
Satellite2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00011f60  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000468  080120f0  080120f0  000220f0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08012558  08012558  00030360  2**0
                  CONTENTS
  4 .ARM          00000008  08012558  08012558  00022558  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08012560  08012560  00030360  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08012560  08012560  00022560  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08012564  08012564  00022564  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000360  20000000  08012568  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002614  20000360  080128c8  00030360  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20002974  080128c8  00032974  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030360  2**0
                  CONTENTS, READONLY
 12 .debug_info   000264d4  00000000  00000000  00030390  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00005033  00000000  00000000  00056864  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001a40  00000000  00000000  0005b898  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001808  00000000  00000000  0005d2d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00008ca8  00000000  00000000  0005eae0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001c169  00000000  00000000  00067788  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000cd9ea  00000000  00000000  000838f1  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001512db  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007ec4  00000000  00000000  00151358  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000360 	.word	0x20000360
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080120d8 	.word	0x080120d8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000364 	.word	0x20000364
 80001cc:	080120d8 	.word	0x080120d8

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003be:	f1a4 0401 	sub.w	r4, r4, #1
 80003c2:	d1e9      	bne.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_ldivmod>:
 8000c88:	b97b      	cbnz	r3, 8000caa <__aeabi_ldivmod+0x22>
 8000c8a:	b972      	cbnz	r2, 8000caa <__aeabi_ldivmod+0x22>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bfbe      	ittt	lt
 8000c90:	2000      	movlt	r0, #0
 8000c92:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000c96:	e006      	blt.n	8000ca6 <__aeabi_ldivmod+0x1e>
 8000c98:	bf08      	it	eq
 8000c9a:	2800      	cmpeq	r0, #0
 8000c9c:	bf1c      	itt	ne
 8000c9e:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000ca2:	f04f 30ff 	movne.w	r0, #4294967295
 8000ca6:	f000 b9bd 	b.w	8001024 <__aeabi_idiv0>
 8000caa:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cae:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb2:	2900      	cmp	r1, #0
 8000cb4:	db09      	blt.n	8000cca <__aeabi_ldivmod+0x42>
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	db1a      	blt.n	8000cf0 <__aeabi_ldivmod+0x68>
 8000cba:	f000 f84d 	bl	8000d58 <__udivmoddi4>
 8000cbe:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc6:	b004      	add	sp, #16
 8000cc8:	4770      	bx	lr
 8000cca:	4240      	negs	r0, r0
 8000ccc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	db1b      	blt.n	8000d0c <__aeabi_ldivmod+0x84>
 8000cd4:	f000 f840 	bl	8000d58 <__udivmoddi4>
 8000cd8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cdc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ce0:	b004      	add	sp, #16
 8000ce2:	4240      	negs	r0, r0
 8000ce4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce8:	4252      	negs	r2, r2
 8000cea:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cee:	4770      	bx	lr
 8000cf0:	4252      	negs	r2, r2
 8000cf2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cf6:	f000 f82f 	bl	8000d58 <__udivmoddi4>
 8000cfa:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cfe:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d02:	b004      	add	sp, #16
 8000d04:	4240      	negs	r0, r0
 8000d06:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d0a:	4770      	bx	lr
 8000d0c:	4252      	negs	r2, r2
 8000d0e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d12:	f000 f821 	bl	8000d58 <__udivmoddi4>
 8000d16:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d1a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d1e:	b004      	add	sp, #16
 8000d20:	4252      	negs	r2, r2
 8000d22:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d26:	4770      	bx	lr

08000d28 <__aeabi_uldivmod>:
 8000d28:	b953      	cbnz	r3, 8000d40 <__aeabi_uldivmod+0x18>
 8000d2a:	b94a      	cbnz	r2, 8000d40 <__aeabi_uldivmod+0x18>
 8000d2c:	2900      	cmp	r1, #0
 8000d2e:	bf08      	it	eq
 8000d30:	2800      	cmpeq	r0, #0
 8000d32:	bf1c      	itt	ne
 8000d34:	f04f 31ff 	movne.w	r1, #4294967295
 8000d38:	f04f 30ff 	movne.w	r0, #4294967295
 8000d3c:	f000 b972 	b.w	8001024 <__aeabi_idiv0>
 8000d40:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d44:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d48:	f000 f806 	bl	8000d58 <__udivmoddi4>
 8000d4c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d50:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d54:	b004      	add	sp, #16
 8000d56:	4770      	bx	lr

08000d58 <__udivmoddi4>:
 8000d58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d5c:	9e08      	ldr	r6, [sp, #32]
 8000d5e:	4604      	mov	r4, r0
 8000d60:	4688      	mov	r8, r1
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d14b      	bne.n	8000dfe <__udivmoddi4+0xa6>
 8000d66:	428a      	cmp	r2, r1
 8000d68:	4615      	mov	r5, r2
 8000d6a:	d967      	bls.n	8000e3c <__udivmoddi4+0xe4>
 8000d6c:	fab2 f282 	clz	r2, r2
 8000d70:	b14a      	cbz	r2, 8000d86 <__udivmoddi4+0x2e>
 8000d72:	f1c2 0720 	rsb	r7, r2, #32
 8000d76:	fa01 f302 	lsl.w	r3, r1, r2
 8000d7a:	fa20 f707 	lsr.w	r7, r0, r7
 8000d7e:	4095      	lsls	r5, r2
 8000d80:	ea47 0803 	orr.w	r8, r7, r3
 8000d84:	4094      	lsls	r4, r2
 8000d86:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d8a:	0c23      	lsrs	r3, r4, #16
 8000d8c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000d90:	fa1f fc85 	uxth.w	ip, r5
 8000d94:	fb0e 8817 	mls	r8, lr, r7, r8
 8000d98:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d9c:	fb07 f10c 	mul.w	r1, r7, ip
 8000da0:	4299      	cmp	r1, r3
 8000da2:	d909      	bls.n	8000db8 <__udivmoddi4+0x60>
 8000da4:	18eb      	adds	r3, r5, r3
 8000da6:	f107 30ff 	add.w	r0, r7, #4294967295
 8000daa:	f080 811b 	bcs.w	8000fe4 <__udivmoddi4+0x28c>
 8000dae:	4299      	cmp	r1, r3
 8000db0:	f240 8118 	bls.w	8000fe4 <__udivmoddi4+0x28c>
 8000db4:	3f02      	subs	r7, #2
 8000db6:	442b      	add	r3, r5
 8000db8:	1a5b      	subs	r3, r3, r1
 8000dba:	b2a4      	uxth	r4, r4
 8000dbc:	fbb3 f0fe 	udiv	r0, r3, lr
 8000dc0:	fb0e 3310 	mls	r3, lr, r0, r3
 8000dc4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000dc8:	fb00 fc0c 	mul.w	ip, r0, ip
 8000dcc:	45a4      	cmp	ip, r4
 8000dce:	d909      	bls.n	8000de4 <__udivmoddi4+0x8c>
 8000dd0:	192c      	adds	r4, r5, r4
 8000dd2:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dd6:	f080 8107 	bcs.w	8000fe8 <__udivmoddi4+0x290>
 8000dda:	45a4      	cmp	ip, r4
 8000ddc:	f240 8104 	bls.w	8000fe8 <__udivmoddi4+0x290>
 8000de0:	3802      	subs	r0, #2
 8000de2:	442c      	add	r4, r5
 8000de4:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000de8:	eba4 040c 	sub.w	r4, r4, ip
 8000dec:	2700      	movs	r7, #0
 8000dee:	b11e      	cbz	r6, 8000df8 <__udivmoddi4+0xa0>
 8000df0:	40d4      	lsrs	r4, r2
 8000df2:	2300      	movs	r3, #0
 8000df4:	e9c6 4300 	strd	r4, r3, [r6]
 8000df8:	4639      	mov	r1, r7
 8000dfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dfe:	428b      	cmp	r3, r1
 8000e00:	d909      	bls.n	8000e16 <__udivmoddi4+0xbe>
 8000e02:	2e00      	cmp	r6, #0
 8000e04:	f000 80eb 	beq.w	8000fde <__udivmoddi4+0x286>
 8000e08:	2700      	movs	r7, #0
 8000e0a:	e9c6 0100 	strd	r0, r1, [r6]
 8000e0e:	4638      	mov	r0, r7
 8000e10:	4639      	mov	r1, r7
 8000e12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e16:	fab3 f783 	clz	r7, r3
 8000e1a:	2f00      	cmp	r7, #0
 8000e1c:	d147      	bne.n	8000eae <__udivmoddi4+0x156>
 8000e1e:	428b      	cmp	r3, r1
 8000e20:	d302      	bcc.n	8000e28 <__udivmoddi4+0xd0>
 8000e22:	4282      	cmp	r2, r0
 8000e24:	f200 80fa 	bhi.w	800101c <__udivmoddi4+0x2c4>
 8000e28:	1a84      	subs	r4, r0, r2
 8000e2a:	eb61 0303 	sbc.w	r3, r1, r3
 8000e2e:	2001      	movs	r0, #1
 8000e30:	4698      	mov	r8, r3
 8000e32:	2e00      	cmp	r6, #0
 8000e34:	d0e0      	beq.n	8000df8 <__udivmoddi4+0xa0>
 8000e36:	e9c6 4800 	strd	r4, r8, [r6]
 8000e3a:	e7dd      	b.n	8000df8 <__udivmoddi4+0xa0>
 8000e3c:	b902      	cbnz	r2, 8000e40 <__udivmoddi4+0xe8>
 8000e3e:	deff      	udf	#255	; 0xff
 8000e40:	fab2 f282 	clz	r2, r2
 8000e44:	2a00      	cmp	r2, #0
 8000e46:	f040 808f 	bne.w	8000f68 <__udivmoddi4+0x210>
 8000e4a:	1b49      	subs	r1, r1, r5
 8000e4c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000e50:	fa1f f885 	uxth.w	r8, r5
 8000e54:	2701      	movs	r7, #1
 8000e56:	fbb1 fcfe 	udiv	ip, r1, lr
 8000e5a:	0c23      	lsrs	r3, r4, #16
 8000e5c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000e60:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e64:	fb08 f10c 	mul.w	r1, r8, ip
 8000e68:	4299      	cmp	r1, r3
 8000e6a:	d907      	bls.n	8000e7c <__udivmoddi4+0x124>
 8000e6c:	18eb      	adds	r3, r5, r3
 8000e6e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000e72:	d202      	bcs.n	8000e7a <__udivmoddi4+0x122>
 8000e74:	4299      	cmp	r1, r3
 8000e76:	f200 80cd 	bhi.w	8001014 <__udivmoddi4+0x2bc>
 8000e7a:	4684      	mov	ip, r0
 8000e7c:	1a59      	subs	r1, r3, r1
 8000e7e:	b2a3      	uxth	r3, r4
 8000e80:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e84:	fb0e 1410 	mls	r4, lr, r0, r1
 8000e88:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000e8c:	fb08 f800 	mul.w	r8, r8, r0
 8000e90:	45a0      	cmp	r8, r4
 8000e92:	d907      	bls.n	8000ea4 <__udivmoddi4+0x14c>
 8000e94:	192c      	adds	r4, r5, r4
 8000e96:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e9a:	d202      	bcs.n	8000ea2 <__udivmoddi4+0x14a>
 8000e9c:	45a0      	cmp	r8, r4
 8000e9e:	f200 80b6 	bhi.w	800100e <__udivmoddi4+0x2b6>
 8000ea2:	4618      	mov	r0, r3
 8000ea4:	eba4 0408 	sub.w	r4, r4, r8
 8000ea8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000eac:	e79f      	b.n	8000dee <__udivmoddi4+0x96>
 8000eae:	f1c7 0c20 	rsb	ip, r7, #32
 8000eb2:	40bb      	lsls	r3, r7
 8000eb4:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000eb8:	ea4e 0e03 	orr.w	lr, lr, r3
 8000ebc:	fa01 f407 	lsl.w	r4, r1, r7
 8000ec0:	fa20 f50c 	lsr.w	r5, r0, ip
 8000ec4:	fa21 f30c 	lsr.w	r3, r1, ip
 8000ec8:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000ecc:	4325      	orrs	r5, r4
 8000ece:	fbb3 f9f8 	udiv	r9, r3, r8
 8000ed2:	0c2c      	lsrs	r4, r5, #16
 8000ed4:	fb08 3319 	mls	r3, r8, r9, r3
 8000ed8:	fa1f fa8e 	uxth.w	sl, lr
 8000edc:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000ee0:	fb09 f40a 	mul.w	r4, r9, sl
 8000ee4:	429c      	cmp	r4, r3
 8000ee6:	fa02 f207 	lsl.w	r2, r2, r7
 8000eea:	fa00 f107 	lsl.w	r1, r0, r7
 8000eee:	d90b      	bls.n	8000f08 <__udivmoddi4+0x1b0>
 8000ef0:	eb1e 0303 	adds.w	r3, lr, r3
 8000ef4:	f109 30ff 	add.w	r0, r9, #4294967295
 8000ef8:	f080 8087 	bcs.w	800100a <__udivmoddi4+0x2b2>
 8000efc:	429c      	cmp	r4, r3
 8000efe:	f240 8084 	bls.w	800100a <__udivmoddi4+0x2b2>
 8000f02:	f1a9 0902 	sub.w	r9, r9, #2
 8000f06:	4473      	add	r3, lr
 8000f08:	1b1b      	subs	r3, r3, r4
 8000f0a:	b2ad      	uxth	r5, r5
 8000f0c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f10:	fb08 3310 	mls	r3, r8, r0, r3
 8000f14:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000f18:	fb00 fa0a 	mul.w	sl, r0, sl
 8000f1c:	45a2      	cmp	sl, r4
 8000f1e:	d908      	bls.n	8000f32 <__udivmoddi4+0x1da>
 8000f20:	eb1e 0404 	adds.w	r4, lr, r4
 8000f24:	f100 33ff 	add.w	r3, r0, #4294967295
 8000f28:	d26b      	bcs.n	8001002 <__udivmoddi4+0x2aa>
 8000f2a:	45a2      	cmp	sl, r4
 8000f2c:	d969      	bls.n	8001002 <__udivmoddi4+0x2aa>
 8000f2e:	3802      	subs	r0, #2
 8000f30:	4474      	add	r4, lr
 8000f32:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000f36:	fba0 8902 	umull	r8, r9, r0, r2
 8000f3a:	eba4 040a 	sub.w	r4, r4, sl
 8000f3e:	454c      	cmp	r4, r9
 8000f40:	46c2      	mov	sl, r8
 8000f42:	464b      	mov	r3, r9
 8000f44:	d354      	bcc.n	8000ff0 <__udivmoddi4+0x298>
 8000f46:	d051      	beq.n	8000fec <__udivmoddi4+0x294>
 8000f48:	2e00      	cmp	r6, #0
 8000f4a:	d069      	beq.n	8001020 <__udivmoddi4+0x2c8>
 8000f4c:	ebb1 050a 	subs.w	r5, r1, sl
 8000f50:	eb64 0403 	sbc.w	r4, r4, r3
 8000f54:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000f58:	40fd      	lsrs	r5, r7
 8000f5a:	40fc      	lsrs	r4, r7
 8000f5c:	ea4c 0505 	orr.w	r5, ip, r5
 8000f60:	e9c6 5400 	strd	r5, r4, [r6]
 8000f64:	2700      	movs	r7, #0
 8000f66:	e747      	b.n	8000df8 <__udivmoddi4+0xa0>
 8000f68:	f1c2 0320 	rsb	r3, r2, #32
 8000f6c:	fa20 f703 	lsr.w	r7, r0, r3
 8000f70:	4095      	lsls	r5, r2
 8000f72:	fa01 f002 	lsl.w	r0, r1, r2
 8000f76:	fa21 f303 	lsr.w	r3, r1, r3
 8000f7a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000f7e:	4338      	orrs	r0, r7
 8000f80:	0c01      	lsrs	r1, r0, #16
 8000f82:	fbb3 f7fe 	udiv	r7, r3, lr
 8000f86:	fa1f f885 	uxth.w	r8, r5
 8000f8a:	fb0e 3317 	mls	r3, lr, r7, r3
 8000f8e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f92:	fb07 f308 	mul.w	r3, r7, r8
 8000f96:	428b      	cmp	r3, r1
 8000f98:	fa04 f402 	lsl.w	r4, r4, r2
 8000f9c:	d907      	bls.n	8000fae <__udivmoddi4+0x256>
 8000f9e:	1869      	adds	r1, r5, r1
 8000fa0:	f107 3cff 	add.w	ip, r7, #4294967295
 8000fa4:	d22f      	bcs.n	8001006 <__udivmoddi4+0x2ae>
 8000fa6:	428b      	cmp	r3, r1
 8000fa8:	d92d      	bls.n	8001006 <__udivmoddi4+0x2ae>
 8000faa:	3f02      	subs	r7, #2
 8000fac:	4429      	add	r1, r5
 8000fae:	1acb      	subs	r3, r1, r3
 8000fb0:	b281      	uxth	r1, r0
 8000fb2:	fbb3 f0fe 	udiv	r0, r3, lr
 8000fb6:	fb0e 3310 	mls	r3, lr, r0, r3
 8000fba:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fbe:	fb00 f308 	mul.w	r3, r0, r8
 8000fc2:	428b      	cmp	r3, r1
 8000fc4:	d907      	bls.n	8000fd6 <__udivmoddi4+0x27e>
 8000fc6:	1869      	adds	r1, r5, r1
 8000fc8:	f100 3cff 	add.w	ip, r0, #4294967295
 8000fcc:	d217      	bcs.n	8000ffe <__udivmoddi4+0x2a6>
 8000fce:	428b      	cmp	r3, r1
 8000fd0:	d915      	bls.n	8000ffe <__udivmoddi4+0x2a6>
 8000fd2:	3802      	subs	r0, #2
 8000fd4:	4429      	add	r1, r5
 8000fd6:	1ac9      	subs	r1, r1, r3
 8000fd8:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000fdc:	e73b      	b.n	8000e56 <__udivmoddi4+0xfe>
 8000fde:	4637      	mov	r7, r6
 8000fe0:	4630      	mov	r0, r6
 8000fe2:	e709      	b.n	8000df8 <__udivmoddi4+0xa0>
 8000fe4:	4607      	mov	r7, r0
 8000fe6:	e6e7      	b.n	8000db8 <__udivmoddi4+0x60>
 8000fe8:	4618      	mov	r0, r3
 8000fea:	e6fb      	b.n	8000de4 <__udivmoddi4+0x8c>
 8000fec:	4541      	cmp	r1, r8
 8000fee:	d2ab      	bcs.n	8000f48 <__udivmoddi4+0x1f0>
 8000ff0:	ebb8 0a02 	subs.w	sl, r8, r2
 8000ff4:	eb69 020e 	sbc.w	r2, r9, lr
 8000ff8:	3801      	subs	r0, #1
 8000ffa:	4613      	mov	r3, r2
 8000ffc:	e7a4      	b.n	8000f48 <__udivmoddi4+0x1f0>
 8000ffe:	4660      	mov	r0, ip
 8001000:	e7e9      	b.n	8000fd6 <__udivmoddi4+0x27e>
 8001002:	4618      	mov	r0, r3
 8001004:	e795      	b.n	8000f32 <__udivmoddi4+0x1da>
 8001006:	4667      	mov	r7, ip
 8001008:	e7d1      	b.n	8000fae <__udivmoddi4+0x256>
 800100a:	4681      	mov	r9, r0
 800100c:	e77c      	b.n	8000f08 <__udivmoddi4+0x1b0>
 800100e:	3802      	subs	r0, #2
 8001010:	442c      	add	r4, r5
 8001012:	e747      	b.n	8000ea4 <__udivmoddi4+0x14c>
 8001014:	f1ac 0c02 	sub.w	ip, ip, #2
 8001018:	442b      	add	r3, r5
 800101a:	e72f      	b.n	8000e7c <__udivmoddi4+0x124>
 800101c:	4638      	mov	r0, r7
 800101e:	e708      	b.n	8000e32 <__udivmoddi4+0xda>
 8001020:	4637      	mov	r7, r6
 8001022:	e6e9      	b.n	8000df8 <__udivmoddi4+0xa0>

08001024 <__aeabi_idiv0>:
 8001024:	4770      	bx	lr
 8001026:	bf00      	nop

08001028 <SX1278_write>:
#include "stm32f4xx_hal_spi.h"

//#### SPI communication with SX1278 ####

void SX1278_write(SPI_HandleTypeDef* spi, uint8_t data)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b082      	sub	sp, #8
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
 8001030:	460b      	mov	r3, r1
 8001032:	70fb      	strb	r3, [r7, #3]
	// writes byte [data] on SPI bus
	HAL_SPI_Transmit(spi, &data, 1, 1000);
 8001034:	1cf9      	adds	r1, r7, #3
 8001036:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800103a:	2201      	movs	r2, #1
 800103c:	6878      	ldr	r0, [r7, #4]
 800103e:	f007 fb25 	bl	800868c <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(spi) != HAL_SPI_STATE_READY);
 8001042:	bf00      	nop
 8001044:	6878      	ldr	r0, [r7, #4]
 8001046:	f007 fdf7 	bl	8008c38 <HAL_SPI_GetState>
 800104a:	4603      	mov	r3, r0
 800104c:	2b01      	cmp	r3, #1
 800104e:	d1f9      	bne.n	8001044 <SX1278_write+0x1c>
}
 8001050:	bf00      	nop
 8001052:	3708      	adds	r7, #8
 8001054:	46bd      	mov	sp, r7
 8001056:	bd80      	pop	{r7, pc}

08001058 <SX1278_command>:
void SX1278_command(SX1278* inst, uint8_t addr, uint8_t cmd)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b082      	sub	sp, #8
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]
 8001060:	460b      	mov	r3, r1
 8001062:	70fb      	strb	r3, [r7, #3]
 8001064:	4613      	mov	r3, r2
 8001066:	70bb      	strb	r3, [r7, #2]
	HAL_GPIO_WritePin(inst->nss_port, inst->nss, GPIO_PIN_RESET);
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	69d8      	ldr	r0, [r3, #28]
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	8a5b      	ldrh	r3, [r3, #18]
 8001070:	2200      	movs	r2, #0
 8001072:	4619      	mov	r1, r3
 8001074:	f002 fe7e 	bl	8003d74 <HAL_GPIO_WritePin>

	SX1278_write(inst->spi, addr | 0x80);
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	6a1a      	ldr	r2, [r3, #32]
 800107c:	78fb      	ldrb	r3, [r7, #3]
 800107e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001082:	b2db      	uxtb	r3, r3
 8001084:	4619      	mov	r1, r3
 8001086:	4610      	mov	r0, r2
 8001088:	f7ff ffce 	bl	8001028 <SX1278_write>
	SX1278_write(inst->spi, cmd);
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	6a1b      	ldr	r3, [r3, #32]
 8001090:	78ba      	ldrb	r2, [r7, #2]
 8001092:	4611      	mov	r1, r2
 8001094:	4618      	mov	r0, r3
 8001096:	f7ff ffc7 	bl	8001028 <SX1278_write>

	HAL_GPIO_WritePin(inst->nss_port, inst->nss, GPIO_PIN_SET);
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	69d8      	ldr	r0, [r3, #28]
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	8a5b      	ldrh	r3, [r3, #18]
 80010a2:	2201      	movs	r2, #1
 80010a4:	4619      	mov	r1, r3
 80010a6:	f002 fe65 	bl	8003d74 <HAL_GPIO_WritePin>
}
 80010aa:	bf00      	nop
 80010ac:	3708      	adds	r7, #8
 80010ae:	46bd      	mov	sp, r7
 80010b0:	bd80      	pop	{r7, pc}

080010b2 <SX1278_command_burst>:
void SX1278_command_burst(SX1278* inst, uint8_t addr, uint8_t* buff, uint8_t len)
{
 80010b2:	b580      	push	{r7, lr}
 80010b4:	b086      	sub	sp, #24
 80010b6:	af00      	add	r7, sp, #0
 80010b8:	60f8      	str	r0, [r7, #12]
 80010ba:	607a      	str	r2, [r7, #4]
 80010bc:	461a      	mov	r2, r3
 80010be:	460b      	mov	r3, r1
 80010c0:	72fb      	strb	r3, [r7, #11]
 80010c2:	4613      	mov	r3, r2
 80010c4:	72bb      	strb	r3, [r7, #10]
	uint8_t i;

	if (len <= 1) return;
 80010c6:	7abb      	ldrb	r3, [r7, #10]
 80010c8:	2b01      	cmp	r3, #1
 80010ca:	d92d      	bls.n	8001128 <SX1278_command_burst+0x76>

	HAL_GPIO_WritePin(inst->nss_port, inst->nss, GPIO_PIN_RESET);
 80010cc:	68fb      	ldr	r3, [r7, #12]
 80010ce:	69d8      	ldr	r0, [r3, #28]
 80010d0:	68fb      	ldr	r3, [r7, #12]
 80010d2:	8a5b      	ldrh	r3, [r3, #18]
 80010d4:	2200      	movs	r2, #0
 80010d6:	4619      	mov	r1, r3
 80010d8:	f002 fe4c 	bl	8003d74 <HAL_GPIO_WritePin>

	SX1278_write(inst->spi, addr | 0x80);
 80010dc:	68fb      	ldr	r3, [r7, #12]
 80010de:	6a1a      	ldr	r2, [r3, #32]
 80010e0:	7afb      	ldrb	r3, [r7, #11]
 80010e2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80010e6:	b2db      	uxtb	r3, r3
 80010e8:	4619      	mov	r1, r3
 80010ea:	4610      	mov	r0, r2
 80010ec:	f7ff ff9c 	bl	8001028 <SX1278_write>
	for (i = 0; i < len; i++)
 80010f0:	2300      	movs	r3, #0
 80010f2:	75fb      	strb	r3, [r7, #23]
 80010f4:	e00b      	b.n	800110e <SX1278_command_burst+0x5c>
	{
		SX1278_write(inst->spi, *(buff + i));	//explanation: *(buff + i) = buff[i]
 80010f6:	68fb      	ldr	r3, [r7, #12]
 80010f8:	6a18      	ldr	r0, [r3, #32]
 80010fa:	7dfb      	ldrb	r3, [r7, #23]
 80010fc:	687a      	ldr	r2, [r7, #4]
 80010fe:	4413      	add	r3, r2
 8001100:	781b      	ldrb	r3, [r3, #0]
 8001102:	4619      	mov	r1, r3
 8001104:	f7ff ff90 	bl	8001028 <SX1278_write>
	for (i = 0; i < len; i++)
 8001108:	7dfb      	ldrb	r3, [r7, #23]
 800110a:	3301      	adds	r3, #1
 800110c:	75fb      	strb	r3, [r7, #23]
 800110e:	7dfa      	ldrb	r2, [r7, #23]
 8001110:	7abb      	ldrb	r3, [r7, #10]
 8001112:	429a      	cmp	r2, r3
 8001114:	d3ef      	bcc.n	80010f6 <SX1278_command_burst+0x44>
	}

	HAL_GPIO_WritePin(inst->nss_port, inst->nss, GPIO_PIN_SET);
 8001116:	68fb      	ldr	r3, [r7, #12]
 8001118:	69d8      	ldr	r0, [r3, #28]
 800111a:	68fb      	ldr	r3, [r7, #12]
 800111c:	8a5b      	ldrh	r3, [r3, #18]
 800111e:	2201      	movs	r2, #1
 8001120:	4619      	mov	r1, r3
 8001122:	f002 fe27 	bl	8003d74 <HAL_GPIO_WritePin>
 8001126:	e000      	b.n	800112a <SX1278_command_burst+0x78>
	if (len <= 1) return;
 8001128:	bf00      	nop
}
 800112a:	3718      	adds	r7, #24
 800112c:	46bd      	mov	sp, r7
 800112e:	bd80      	pop	{r7, pc}

08001130 <SX1278_read>:

uint8_t SX1278_read(SPI_HandleTypeDef* spi)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b086      	sub	sp, #24
 8001134:	af02      	add	r7, sp, #8
 8001136:	6078      	str	r0, [r7, #4]
	// reads byte from SPI bus
	uint8_t txByte = 0x00;
 8001138:	2300      	movs	r3, #0
 800113a:	73fb      	strb	r3, [r7, #15]
	uint8_t rxByte = 0x00;
 800113c:	2300      	movs	r3, #0
 800113e:	73bb      	strb	r3, [r7, #14]

	HAL_SPI_TransmitReceive(spi, &txByte, &rxByte, 1, 1000);
 8001140:	f107 020e 	add.w	r2, r7, #14
 8001144:	f107 010f 	add.w	r1, r7, #15
 8001148:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800114c:	9300      	str	r3, [sp, #0]
 800114e:	2301      	movs	r3, #1
 8001150:	6878      	ldr	r0, [r7, #4]
 8001152:	f007 fbcf 	bl	80088f4 <HAL_SPI_TransmitReceive>
	while (HAL_SPI_GetState(spi) != HAL_SPI_STATE_READY);
 8001156:	bf00      	nop
 8001158:	6878      	ldr	r0, [r7, #4]
 800115a:	f007 fd6d 	bl	8008c38 <HAL_SPI_GetState>
 800115e:	4603      	mov	r3, r0
 8001160:	2b01      	cmp	r3, #1
 8001162:	d1f9      	bne.n	8001158 <SX1278_read+0x28>

	return rxByte;
 8001164:	7bbb      	ldrb	r3, [r7, #14]
}
 8001166:	4618      	mov	r0, r3
 8001168:	3710      	adds	r7, #16
 800116a:	46bd      	mov	sp, r7
 800116c:	bd80      	pop	{r7, pc}

0800116e <SX1278_read_address>:
uint8_t SX1278_read_address(SX1278* inst, uint8_t addr)
{
 800116e:	b580      	push	{r7, lr}
 8001170:	b084      	sub	sp, #16
 8001172:	af00      	add	r7, sp, #0
 8001174:	6078      	str	r0, [r7, #4]
 8001176:	460b      	mov	r3, r1
 8001178:	70fb      	strb	r3, [r7, #3]
	uint8_t recv;

	HAL_GPIO_WritePin(inst->nss_port, inst->nss, GPIO_PIN_RESET);
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	69d8      	ldr	r0, [r3, #28]
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	8a5b      	ldrh	r3, [r3, #18]
 8001182:	2200      	movs	r2, #0
 8001184:	4619      	mov	r1, r3
 8001186:	f002 fdf5 	bl	8003d74 <HAL_GPIO_WritePin>

	SX1278_write(inst->spi, addr);
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	6a1b      	ldr	r3, [r3, #32]
 800118e:	78fa      	ldrb	r2, [r7, #3]
 8001190:	4611      	mov	r1, r2
 8001192:	4618      	mov	r0, r3
 8001194:	f7ff ff48 	bl	8001028 <SX1278_write>
	recv = SX1278_read(inst->spi);
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	6a1b      	ldr	r3, [r3, #32]
 800119c:	4618      	mov	r0, r3
 800119e:	f7ff ffc7 	bl	8001130 <SX1278_read>
 80011a2:	4603      	mov	r3, r0
 80011a4:	73fb      	strb	r3, [r7, #15]

	HAL_GPIO_WritePin(inst->nss_port, inst->nss, GPIO_PIN_SET);
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	69d8      	ldr	r0, [r3, #28]
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	8a5b      	ldrh	r3, [r3, #18]
 80011ae:	2201      	movs	r2, #1
 80011b0:	4619      	mov	r1, r3
 80011b2:	f002 fddf 	bl	8003d74 <HAL_GPIO_WritePin>

	return recv;
 80011b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80011b8:	4618      	mov	r0, r3
 80011ba:	3710      	adds	r7, #16
 80011bc:	46bd      	mov	sp, r7
 80011be:	bd80      	pop	{r7, pc}

080011c0 <SX1278_read_burst>:
void SX1278_read_burst(SX1278* inst, uint8_t addr, uint8_t* buff, uint8_t len)
{
 80011c0:	b590      	push	{r4, r7, lr}
 80011c2:	b087      	sub	sp, #28
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	60f8      	str	r0, [r7, #12]
 80011c8:	607a      	str	r2, [r7, #4]
 80011ca:	461a      	mov	r2, r3
 80011cc:	460b      	mov	r3, r1
 80011ce:	72fb      	strb	r3, [r7, #11]
 80011d0:	4613      	mov	r3, r2
 80011d2:	72bb      	strb	r3, [r7, #10]
	uint8_t i;

	if (len <= 1) return;
 80011d4:	7abb      	ldrb	r3, [r7, #10]
 80011d6:	2b01      	cmp	r3, #1
 80011d8:	d92b      	bls.n	8001232 <SX1278_read_burst+0x72>

	HAL_GPIO_WritePin(inst->nss_port, inst->nss, GPIO_PIN_RESET);
 80011da:	68fb      	ldr	r3, [r7, #12]
 80011dc:	69d8      	ldr	r0, [r3, #28]
 80011de:	68fb      	ldr	r3, [r7, #12]
 80011e0:	8a5b      	ldrh	r3, [r3, #18]
 80011e2:	2200      	movs	r2, #0
 80011e4:	4619      	mov	r1, r3
 80011e6:	f002 fdc5 	bl	8003d74 <HAL_GPIO_WritePin>

	SX1278_write(inst->spi, addr);
 80011ea:	68fb      	ldr	r3, [r7, #12]
 80011ec:	6a1b      	ldr	r3, [r3, #32]
 80011ee:	7afa      	ldrb	r2, [r7, #11]
 80011f0:	4611      	mov	r1, r2
 80011f2:	4618      	mov	r0, r3
 80011f4:	f7ff ff18 	bl	8001028 <SX1278_write>
	for (i = 0; i < len; i++)
 80011f8:	2300      	movs	r3, #0
 80011fa:	75fb      	strb	r3, [r7, #23]
 80011fc:	e00c      	b.n	8001218 <SX1278_read_burst+0x58>
	{
		*(buff + i) = SX1278_read(inst->spi);	//explanation: *(buff + i) = buff[i]
 80011fe:	68fb      	ldr	r3, [r7, #12]
 8001200:	6a19      	ldr	r1, [r3, #32]
 8001202:	7dfb      	ldrb	r3, [r7, #23]
 8001204:	687a      	ldr	r2, [r7, #4]
 8001206:	18d4      	adds	r4, r2, r3
 8001208:	4608      	mov	r0, r1
 800120a:	f7ff ff91 	bl	8001130 <SX1278_read>
 800120e:	4603      	mov	r3, r0
 8001210:	7023      	strb	r3, [r4, #0]
	for (i = 0; i < len; i++)
 8001212:	7dfb      	ldrb	r3, [r7, #23]
 8001214:	3301      	adds	r3, #1
 8001216:	75fb      	strb	r3, [r7, #23]
 8001218:	7dfa      	ldrb	r2, [r7, #23]
 800121a:	7abb      	ldrb	r3, [r7, #10]
 800121c:	429a      	cmp	r2, r3
 800121e:	d3ee      	bcc.n	80011fe <SX1278_read_burst+0x3e>
	}

	HAL_GPIO_WritePin(inst->nss_port, inst->nss, GPIO_PIN_SET);
 8001220:	68fb      	ldr	r3, [r7, #12]
 8001222:	69d8      	ldr	r0, [r3, #28]
 8001224:	68fb      	ldr	r3, [r7, #12]
 8001226:	8a5b      	ldrh	r3, [r3, #18]
 8001228:	2201      	movs	r2, #1
 800122a:	4619      	mov	r1, r3
 800122c:	f002 fda2 	bl	8003d74 <HAL_GPIO_WritePin>
 8001230:	e000      	b.n	8001234 <SX1278_read_burst+0x74>
	if (len <= 1) return;
 8001232:	bf00      	nop
}
 8001234:	371c      	adds	r7, #28
 8001236:	46bd      	mov	sp, r7
 8001238:	bd90      	pop	{r4, r7, pc}

0800123a <SX1278_init>:

//#### SX1278 usage functions ####

bool SX1278_init(SX1278* inst)
{
 800123a:	b580      	push	{r7, lr}
 800123c:	b086      	sub	sp, #24
 800123e:	af00      	add	r7, sp, #0
 8001240:	6078      	str	r0, [r7, #4]
	//default pin configuration
	HAL_GPIO_WritePin(inst->nss_port, inst->nss, GPIO_PIN_SET);
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	69d8      	ldr	r0, [r3, #28]
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	8a5b      	ldrh	r3, [r3, #18]
 800124a:	2201      	movs	r2, #1
 800124c:	4619      	mov	r1, r3
 800124e:	f002 fd91 	bl	8003d74 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(inst->reset_port, inst->reset, GPIO_PIN_SET);
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	6958      	ldr	r0, [r3, #20]
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	89db      	ldrh	r3, [r3, #14]
 800125a:	2201      	movs	r2, #1
 800125c:	4619      	mov	r1, r3
 800125e:	f002 fd89 	bl	8003d74 <HAL_GPIO_WritePin>

	//unable to establish the connection with module
	if (SX1278_read_address(inst, REG_LR_VERSION) != 0x12) return false;
 8001262:	2142      	movs	r1, #66	; 0x42
 8001264:	6878      	ldr	r0, [r7, #4]
 8001266:	f7ff ff82 	bl	800116e <SX1278_read_address>
 800126a:	4603      	mov	r3, r0
 800126c:	2b12      	cmp	r3, #18
 800126e:	d001      	beq.n	8001274 <SX1278_init+0x3a>
 8001270:	2300      	movs	r3, #0
 8001272:	e0f0      	b.n	8001456 <SX1278_init+0x21c>

	//changes must be performed in a Sleep mode
	SX1278_sleep(inst);
 8001274:	6878      	ldr	r0, [r7, #4]
 8001276:	f000 fa4d 	bl	8001714 <SX1278_sleep>

	//HAL_Delay(15);

	//0x88 = 1_00_0_1_000 = Lora, FSK, (r), LowFreq, Sleep
	SX1278_command(inst, LR_RegOpMode, 0x88);
 800127a:	2288      	movs	r2, #136	; 0x88
 800127c:	2101      	movs	r1, #1
 800127e:	6878      	ldr	r0, [r7, #4]
 8001280:	f7ff feea 	bl	8001058 <SX1278_command>

	//Setting three frequency bytes
	//####################################
	//[!!!!] heavy low level shit going out there, must check if correct
	//####################################
	float step_in_mhz = 32/pow(2, 19);
 8001284:	f04f 5362 	mov.w	r3, #947912704	; 0x38800000
 8001288:	617b      	str	r3, [r7, #20]
	float multiplier = inst->config.frequency/step_in_mhz;
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	edd3 6a00 	vldr	s13, [r3]
 8001290:	ed97 7a05 	vldr	s14, [r7, #20]
 8001294:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001298:	edc7 7a02 	vstr	s15, [r7, #8]
	uint8_t* multiplier_addr = &multiplier;
 800129c:	f107 0308 	add.w	r3, r7, #8
 80012a0:	613b      	str	r3, [r7, #16]
	SX1278_command(inst, LR_RegFrMsb, *multiplier_addr);
 80012a2:	693b      	ldr	r3, [r7, #16]
 80012a4:	781b      	ldrb	r3, [r3, #0]
 80012a6:	461a      	mov	r2, r3
 80012a8:	2106      	movs	r1, #6
 80012aa:	6878      	ldr	r0, [r7, #4]
 80012ac:	f7ff fed4 	bl	8001058 <SX1278_command>
	SX1278_command(inst, LR_RegFrMid, *(multiplier_addr + 1));
 80012b0:	693b      	ldr	r3, [r7, #16]
 80012b2:	3301      	adds	r3, #1
 80012b4:	781b      	ldrb	r3, [r3, #0]
 80012b6:	461a      	mov	r2, r3
 80012b8:	2107      	movs	r1, #7
 80012ba:	6878      	ldr	r0, [r7, #4]
 80012bc:	f7ff fecc 	bl	8001058 <SX1278_command>
	SX1278_command(inst, LR_RegFrLsb, *(multiplier_addr + 2));
 80012c0:	693b      	ldr	r3, [r7, #16]
 80012c2:	3302      	adds	r3, #2
 80012c4:	781b      	ldrb	r3, [r3, #0]
 80012c6:	461a      	mov	r2, r3
 80012c8:	2108      	movs	r1, #8
 80012ca:	6878      	ldr	r0, [r7, #4]
 80012cc:	f7ff fec4 	bl	8001058 <SX1278_command>

	SX1278_command(inst, LR_RegPaConfig, inst->config.power);				//Setting transmit power
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	791b      	ldrb	r3, [r3, #4]
 80012d4:	461a      	mov	r2, r3
 80012d6:	2109      	movs	r1, #9
 80012d8:	6878      	ldr	r0, [r7, #4]
 80012da:	f7ff febd 	bl	8001058 <SX1278_command>
	SX1278_command(inst, LR_RegOcp, 0x2B);			// [was 0x0B] Over current protection set to 100mA
 80012de:	222b      	movs	r2, #43	; 0x2b
 80012e0:	210b      	movs	r1, #11
 80012e2:	6878      	ldr	r0, [r7, #4]
 80012e4:	f7ff feb8 	bl	8001058 <SX1278_command>
	SX1278_command(inst, LR_RegLna, 0x23);			// LNA settings: G1 - max gain, Boost on
 80012e8:	2223      	movs	r2, #35	; 0x23
 80012ea:	210c      	movs	r1, #12
 80012ec:	6878      	ldr	r0, [r7, #4]
 80012ee:	f7ff feb3 	bl	8001058 <SX1278_command>
	SX1278_command(inst, REG_LR_PADAC, 0x87);		//high power setting +20dBm
 80012f2:	2287      	movs	r2, #135	; 0x87
 80012f4:	214d      	movs	r1, #77	; 0x4d
 80012f6:	6878      	ldr	r0, [r7, #4]
 80012f8:	f7ff feae 	bl	8001058 <SX1278_command>
	SX1278_command(inst, LR_RegHopPeriod, 0x00);	//frequency hopping off
 80012fc:	2200      	movs	r2, #0
 80012fe:	2124      	movs	r1, #36	; 0x24
 8001300:	6878      	ldr	r0, [r7, #4]
 8001302:	f7ff fea9 	bl	8001058 <SX1278_command>

	if (inst->config.spreadingFactor == SX1278_SF_6)
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	795b      	ldrb	r3, [r3, #5]
 800130a:	2b06      	cmp	r3, #6
 800130c:	d140      	bne.n	8001390 <SX1278_init+0x156>
	{
		uint8_t tmp;
		//implicit CRC enable
		SX1278_command(inst, LR_RegModemConfig1, ((inst->config.bandWidth << 4) + (inst->config.codingRate << 1) + 0x01));
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	79db      	ldrb	r3, [r3, #7]
 8001312:	011b      	lsls	r3, r3, #4
 8001314:	b2da      	uxtb	r2, r3
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	799b      	ldrb	r3, [r3, #6]
 800131a:	005b      	lsls	r3, r3, #1
 800131c:	b2db      	uxtb	r3, r3
 800131e:	4413      	add	r3, r2
 8001320:	b2db      	uxtb	r3, r3
 8001322:	3301      	adds	r3, #1
 8001324:	b2db      	uxtb	r3, r3
 8001326:	461a      	mov	r2, r3
 8001328:	211d      	movs	r1, #29
 800132a:	6878      	ldr	r0, [r7, #4]
 800132c:	f7ff fe94 	bl	8001058 <SX1278_command>
		SX1278_command(inst, LR_RegModemConfig2, ((inst->config.spreadingFactor << 4) + (inst->config.crc << 2) + (uint8_t)(inst->config.rxTimeoutSymb >> 8)));
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	795b      	ldrb	r3, [r3, #5]
 8001334:	011b      	lsls	r3, r3, #4
 8001336:	b2da      	uxtb	r2, r3
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	7a1b      	ldrb	r3, [r3, #8]
 800133c:	009b      	lsls	r3, r3, #2
 800133e:	b2db      	uxtb	r3, r3
 8001340:	4413      	add	r3, r2
 8001342:	b2da      	uxtb	r2, r3
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	895b      	ldrh	r3, [r3, #10]
 8001348:	0a1b      	lsrs	r3, r3, #8
 800134a:	b29b      	uxth	r3, r3
 800134c:	b2db      	uxtb	r3, r3
 800134e:	4413      	add	r3, r2
 8001350:	b2db      	uxtb	r3, r3
 8001352:	461a      	mov	r2, r3
 8001354:	211e      	movs	r1, #30
 8001356:	6878      	ldr	r0, [r7, #4]
 8001358:	f7ff fe7e 	bl	8001058 <SX1278_command>
		tmp = SX1278_read_address(inst, 0x31);
 800135c:	2131      	movs	r1, #49	; 0x31
 800135e:	6878      	ldr	r0, [r7, #4]
 8001360:	f7ff ff05 	bl	800116e <SX1278_read_address>
 8001364:	4603      	mov	r3, r0
 8001366:	73fb      	strb	r3, [r7, #15]
		tmp &= 0xF8;
 8001368:	7bfb      	ldrb	r3, [r7, #15]
 800136a:	f023 0307 	bic.w	r3, r3, #7
 800136e:	73fb      	strb	r3, [r7, #15]
		tmp |= 0x05;
 8001370:	7bfb      	ldrb	r3, [r7, #15]
 8001372:	f043 0305 	orr.w	r3, r3, #5
 8001376:	73fb      	strb	r3, [r7, #15]
		SX1278_command(inst, 0x31, tmp);
 8001378:	7bfb      	ldrb	r3, [r7, #15]
 800137a:	461a      	mov	r2, r3
 800137c:	2131      	movs	r1, #49	; 0x31
 800137e:	6878      	ldr	r0, [r7, #4]
 8001380:	f7ff fe6a 	bl	8001058 <SX1278_command>
		SX1278_command(inst, 0x37, 0x0C);
 8001384:	220c      	movs	r2, #12
 8001386:	2137      	movs	r1, #55	; 0x37
 8001388:	6878      	ldr	r0, [r7, #4]
 800138a:	f7ff fe65 	bl	8001058 <SX1278_command>
 800138e:	e024      	b.n	80013da <SX1278_init+0x1a0>
	}
	else
	{
		//explicit CRC enable
		SX1278_command(inst, LR_RegModemConfig1, ((inst->config.bandWidth << 4) + (inst->config.codingRate << 1) + 0x00));
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	79db      	ldrb	r3, [r3, #7]
 8001394:	011b      	lsls	r3, r3, #4
 8001396:	b2da      	uxtb	r2, r3
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	799b      	ldrb	r3, [r3, #6]
 800139c:	005b      	lsls	r3, r3, #1
 800139e:	b2db      	uxtb	r3, r3
 80013a0:	4413      	add	r3, r2
 80013a2:	b2db      	uxtb	r3, r3
 80013a4:	461a      	mov	r2, r3
 80013a6:	211d      	movs	r1, #29
 80013a8:	6878      	ldr	r0, [r7, #4]
 80013aa:	f7ff fe55 	bl	8001058 <SX1278_command>
		//SFactor &  LNA gain set by the internal AGC loop
		SX1278_command(inst, LR_RegModemConfig2, ((inst->config.spreadingFactor << 4) + (inst->config.crc << 2) + (uint8_t)(inst->config.rxTimeoutSymb >> 8)));
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	795b      	ldrb	r3, [r3, #5]
 80013b2:	011b      	lsls	r3, r3, #4
 80013b4:	b2da      	uxtb	r2, r3
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	7a1b      	ldrb	r3, [r3, #8]
 80013ba:	009b      	lsls	r3, r3, #2
 80013bc:	b2db      	uxtb	r3, r3
 80013be:	4413      	add	r3, r2
 80013c0:	b2da      	uxtb	r2, r3
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	895b      	ldrh	r3, [r3, #10]
 80013c6:	0a1b      	lsrs	r3, r3, #8
 80013c8:	b29b      	uxth	r3, r3
 80013ca:	b2db      	uxtb	r3, r3
 80013cc:	4413      	add	r3, r2
 80013ce:	b2db      	uxtb	r3, r3
 80013d0:	461a      	mov	r2, r3
 80013d2:	211e      	movs	r1, #30
 80013d4:	6878      	ldr	r0, [r7, #4]
 80013d6:	f7ff fe3f 	bl	8001058 <SX1278_command>
	}

	SX1278_command(inst, LR_RegSymbTimeoutLsb, (uint8_t)(inst->config.rxTimeoutSymb & 0x00FF));	//recievier timeout value [timeout = symbtimeout*ts]
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	895b      	ldrh	r3, [r3, #10]
 80013de:	b2db      	uxtb	r3, r3
 80013e0:	461a      	mov	r2, r3
 80013e2:	211f      	movs	r1, #31
 80013e4:	6878      	ldr	r0, [r7, #4]
 80013e6:	f7ff fe37 	bl	8001058 <SX1278_command>
	SX1278_command(inst, LR_RegPreambleMsb, 0x00);		//Setting the preable length?
 80013ea:	2200      	movs	r2, #0
 80013ec:	2120      	movs	r1, #32
 80013ee:	6878      	ldr	r0, [r7, #4]
 80013f0:	f7ff fe32 	bl	8001058 <SX1278_command>
	SX1278_command(inst, LR_RegPreambleLsb, 12);		//8+4=12byte Preamble
 80013f4:	220c      	movs	r2, #12
 80013f6:	2121      	movs	r1, #33	; 0x21
 80013f8:	6878      	ldr	r0, [r7, #4]
 80013fa:	f7ff fe2d 	bl	8001058 <SX1278_command>
	SX1278_command(inst, REG_LR_DIOMAPPING2, 0x01);		//RegDioMapping2 DIO5=00, DIO4=01
 80013fe:	2201      	movs	r2, #1
 8001400:	2141      	movs	r1, #65	; 0x41
 8001402:	6878      	ldr	r0, [r7, #4]
 8001404:	f7ff fe28 	bl	8001058 <SX1278_command>

	inst->newPacket = true;
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	2201      	movs	r2, #1
 800140c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	inst->rxTimeout = false;
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	2200      	movs	r2, #0
 8001414:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
	inst->rxDone = false;
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	2200      	movs	r2, #0
 800141c:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	inst->crcError = false;
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	2200      	movs	r2, #0
 8001424:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	inst->rssi = 1;
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	2201      	movs	r2, #1
 800142c:	62da      	str	r2, [r3, #44]	; 0x2c
	inst->newPacket = false;
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	2200      	movs	r2, #0
 8001432:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	inst->pendingIRQ = false;
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	2200      	movs	r2, #0
 800143a:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
	inst->txLen = 0;
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	2200      	movs	r2, #0
 8001442:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
	inst->rxLen = 0;
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	2200      	movs	r2, #0
 800144a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

	SX1278_standby(inst);
 800144e:	6878      	ldr	r0, [r7, #4]
 8001450:	f000 f970 	bl	8001734 <SX1278_standby>

	return true;
 8001454:	2301      	movs	r3, #1
}
 8001456:	4618      	mov	r0, r3
 8001458:	3718      	adds	r7, #24
 800145a:	46bd      	mov	sp, r7
 800145c:	bd80      	pop	{r7, pc}

0800145e <SX1278_transmit>:

bool SX1278_transmit(SX1278* inst, uint8_t* txBuffer, uint8_t length)
{
 800145e:	b580      	push	{r7, lr}
 8001460:	b084      	sub	sp, #16
 8001462:	af00      	add	r7, sp, #0
 8001464:	60f8      	str	r0, [r7, #12]
 8001466:	60b9      	str	r1, [r7, #8]
 8001468:	4613      	mov	r3, r2
 800146a:	71fb      	strb	r3, [r7, #7]
	// check if the module is ready for the transmission
	if (inst->mode == STANDBY)
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	7b1b      	ldrb	r3, [r3, #12]
 8001470:	2b01      	cmp	r3, #1
 8001472:	d127      	bne.n	80014c4 <SX1278_transmit+0x66>
	{
		SX1278_tx_mode(inst);
 8001474:	68f8      	ldr	r0, [r7, #12]
 8001476:	f000 f8f4 	bl	8001662 <SX1278_tx_mode>
		SX1278_tx_input(inst, txBuffer, length);
 800147a:	79fb      	ldrb	r3, [r7, #7]
 800147c:	461a      	mov	r2, r3
 800147e:	68b9      	ldr	r1, [r7, #8]
 8001480:	68f8      	ldr	r0, [r7, #12]
 8001482:	f000 f852 	bl	800152a <SX1278_tx_input>
		SX1278_tx_push(inst);
 8001486:	68f8      	ldr	r0, [r7, #12]
 8001488:	f000 f86a 	bl	8001560 <SX1278_tx_push>

		if (inst->useDio0IRQ)
 800148c:	68fb      	ldr	r3, [r7, #12]
 800148e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8001492:	2b00      	cmp	r3, #0
 8001494:	d005      	beq.n	80014a2 <SX1278_transmit+0x44>
		{
			//waiting for interrupt
			inst->pendingIRQ = true;
 8001496:	68fb      	ldr	r3, [r7, #12]
 8001498:	2201      	movs	r2, #1
 800149a:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
			while (HAL_GPIO_ReadPin(inst->dio0_port, inst->dio0) == GPIO_PIN_RESET);

			return SX1278_tx_finish(inst);
		}

		return true;
 800149e:	2301      	movs	r3, #1
 80014a0:	e011      	b.n	80014c6 <SX1278_transmit+0x68>
			while (HAL_GPIO_ReadPin(inst->dio0_port, inst->dio0) == GPIO_PIN_RESET);
 80014a2:	bf00      	nop
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	699a      	ldr	r2, [r3, #24]
 80014a8:	68fb      	ldr	r3, [r7, #12]
 80014aa:	8a1b      	ldrh	r3, [r3, #16]
 80014ac:	4619      	mov	r1, r3
 80014ae:	4610      	mov	r0, r2
 80014b0:	f002 fc48 	bl	8003d44 <HAL_GPIO_ReadPin>
 80014b4:	4603      	mov	r3, r0
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d0f4      	beq.n	80014a4 <SX1278_transmit+0x46>
			return SX1278_tx_finish(inst);
 80014ba:	68f8      	ldr	r0, [r7, #12]
 80014bc:	f000 f85d 	bl	800157a <SX1278_tx_finish>
 80014c0:	4603      	mov	r3, r0
 80014c2:	e000      	b.n	80014c6 <SX1278_transmit+0x68>
	}
	else return false;
 80014c4:	2300      	movs	r3, #0
}
 80014c6:	4618      	mov	r0, r3
 80014c8:	3710      	adds	r7, #16
 80014ca:	46bd      	mov	sp, r7
 80014cc:	bd80      	pop	{r7, pc}

080014ce <SX1278_receive>:

bool SX1278_receive(SX1278* inst)
{
 80014ce:	b580      	push	{r7, lr}
 80014d0:	b082      	sub	sp, #8
 80014d2:	af00      	add	r7, sp, #0
 80014d4:	6078      	str	r0, [r7, #4]
	// [!!] writes data to the inst->rxBuffer
	if (inst->mode == STANDBY)
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	7b1b      	ldrb	r3, [r3, #12]
 80014da:	2b01      	cmp	r3, #1
 80014dc:	d120      	bne.n	8001520 <SX1278_receive+0x52>
	{
		SX1278_rx_mode(inst);
 80014de:	6878      	ldr	r0, [r7, #4]
 80014e0:	f000 f8e7 	bl	80016b2 <SX1278_rx_mode>

		if (inst->useDio0IRQ)
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d005      	beq.n	80014fa <SX1278_receive+0x2c>
		{
			//waiting for interrupt
			inst->pendingIRQ = true;
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	2201      	movs	r2, #1
 80014f2:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32

			SX1278_rx_get_packet(inst);
			return inst->newPacket;
		}

		return true;
 80014f6:	2301      	movs	r3, #1
 80014f8:	e013      	b.n	8001522 <SX1278_receive+0x54>
			while (HAL_GPIO_ReadPin(inst->dio0_port, inst->dio0) == GPIO_PIN_RESET);
 80014fa:	bf00      	nop
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	699a      	ldr	r2, [r3, #24]
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	8a1b      	ldrh	r3, [r3, #16]
 8001504:	4619      	mov	r1, r3
 8001506:	4610      	mov	r0, r2
 8001508:	f002 fc1c 	bl	8003d44 <HAL_GPIO_ReadPin>
 800150c:	4603      	mov	r3, r0
 800150e:	2b00      	cmp	r3, #0
 8001510:	d0f4      	beq.n	80014fc <SX1278_receive+0x2e>
			SX1278_rx_get_packet(inst);
 8001512:	6878      	ldr	r0, [r7, #4]
 8001514:	f000 f856 	bl	80015c4 <SX1278_rx_get_packet>
			return inst->newPacket;
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800151e:	e000      	b.n	8001522 <SX1278_receive+0x54>
	}
	else return false;
 8001520:	2300      	movs	r3, #0
}
 8001522:	4618      	mov	r0, r3
 8001524:	3708      	adds	r7, #8
 8001526:	46bd      	mov	sp, r7
 8001528:	bd80      	pop	{r7, pc}

0800152a <SX1278_tx_input>:

//#### Data send / receive routines ####

void SX1278_tx_input(SX1278* inst, uint8_t* txBuffer, uint8_t length)
{
 800152a:	b580      	push	{r7, lr}
 800152c:	b084      	sub	sp, #16
 800152e:	af00      	add	r7, sp, #0
 8001530:	60f8      	str	r0, [r7, #12]
 8001532:	60b9      	str	r1, [r7, #8]
 8001534:	4613      	mov	r3, r2
 8001536:	71fb      	strb	r3, [r7, #7]
	SX1278_command(inst, LR_RegPayloadLength, length);	//(this register must difine when the data long of one byte in SF is 6)
 8001538:	79fb      	ldrb	r3, [r7, #7]
 800153a:	461a      	mov	r2, r3
 800153c:	2122      	movs	r1, #34	; 0x22
 800153e:	68f8      	ldr	r0, [r7, #12]
 8001540:	f7ff fd8a 	bl	8001058 <SX1278_command>
	SX1278_command_burst(inst, 0x00, txBuffer, length);
 8001544:	79fb      	ldrb	r3, [r7, #7]
 8001546:	68ba      	ldr	r2, [r7, #8]
 8001548:	2100      	movs	r1, #0
 800154a:	68f8      	ldr	r0, [r7, #12]
 800154c:	f7ff fdb1 	bl	80010b2 <SX1278_command_burst>

	inst->txLen = length;
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	79fa      	ldrb	r2, [r7, #7]
 8001554:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
}
 8001558:	bf00      	nop
 800155a:	3710      	adds	r7, #16
 800155c:	46bd      	mov	sp, r7
 800155e:	bd80      	pop	{r7, pc}

08001560 <SX1278_tx_push>:
void SX1278_tx_push(SX1278* inst)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	b082      	sub	sp, #8
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]
	//set module to TX mode and transmit
	SX1278_command(inst, LR_RegOpMode, 0x8b);
 8001568:	228b      	movs	r2, #139	; 0x8b
 800156a:	2101      	movs	r1, #1
 800156c:	6878      	ldr	r0, [r7, #4]
 800156e:	f7ff fd73 	bl	8001058 <SX1278_command>
}
 8001572:	bf00      	nop
 8001574:	3708      	adds	r7, #8
 8001576:	46bd      	mov	sp, r7
 8001578:	bd80      	pop	{r7, pc}

0800157a <SX1278_tx_finish>:
bool SX1278_tx_finish(SX1278* inst)
{
 800157a:	b580      	push	{r7, lr}
 800157c:	b082      	sub	sp, #8
 800157e:	af00      	add	r7, sp, #0
 8001580:	6078      	str	r0, [r7, #4]
	inst->irqStatus = SX1278_read_address(inst, LR_RegIrqFlags);
 8001582:	2112      	movs	r1, #18
 8001584:	6878      	ldr	r0, [r7, #4]
 8001586:	f7ff fdf2 	bl	800116e <SX1278_read_address>
 800158a:	4603      	mov	r3, r0
 800158c:	461a      	mov	r2, r3
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	inst->txDone = ((inst->irqStatus & IRQ_LR_TXDONE) > 0x00);
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800159a:	f003 0308 	and.w	r3, r3, #8
 800159e:	2b00      	cmp	r3, #0
 80015a0:	bfcc      	ite	gt
 80015a2:	2301      	movgt	r3, #1
 80015a4:	2300      	movle	r3, #0
 80015a6:	b2da      	uxtb	r2, r3
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
	SX1278_clearLoRaIrq(inst);
 80015ae:	6878      	ldr	r0, [r7, #4]
 80015b0:	f000 f935 	bl	800181e <SX1278_clearLoRaIrq>
	SX1278_standby(inst);
 80015b4:	6878      	ldr	r0, [r7, #4]
 80015b6:	f000 f8bd 	bl	8001734 <SX1278_standby>
	return true;
 80015ba:	2301      	movs	r3, #1
}
 80015bc:	4618      	mov	r0, r3
 80015be:	3708      	adds	r7, #8
 80015c0:	46bd      	mov	sp, r7
 80015c2:	bd80      	pop	{r7, pc}

080015c4 <SX1278_rx_get_packet>:

bool SX1278_rx_get_packet(SX1278* inst)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b084      	sub	sp, #16
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	6078      	str	r0, [r7, #4]
	uint8_t addr;
	uint8_t packet_size;

	SX1278_update_IRQ_status(inst);
 80015cc:	6878      	ldr	r0, [r7, #4]
 80015ce:	f000 f8ee 	bl	80017ae <SX1278_update_IRQ_status>

	memset(inst->rxBuffer, 0x00, SX1278_MAX_PACKET);	//clear rxBuffer
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	3335      	adds	r3, #53	; 0x35
 80015d6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80015da:	2100      	movs	r1, #0
 80015dc:	4618      	mov	r0, r3
 80015de:	f00c fbaa 	bl	800dd36 <memset>

	addr = SX1278_read_address(inst, LR_RegFifoRxCurrentaddr);	//get last packet address
 80015e2:	2110      	movs	r1, #16
 80015e4:	6878      	ldr	r0, [r7, #4]
 80015e6:	f7ff fdc2 	bl	800116e <SX1278_read_address>
 80015ea:	4603      	mov	r3, r0
 80015ec:	73bb      	strb	r3, [r7, #14]
	SX1278_command(inst, LR_RegFifoAddrPtr, addr);				//set fifo pointer to this address
 80015ee:	7bbb      	ldrb	r3, [r7, #14]
 80015f0:	461a      	mov	r2, r3
 80015f2:	210d      	movs	r1, #13
 80015f4:	6878      	ldr	r0, [r7, #4]
 80015f6:	f7ff fd2f 	bl	8001058 <SX1278_command>

	//When SpreadingFactor = 6, use Implicit Header mode (Excluding internal packet length)
	if (inst->config.spreadingFactor == SX1278_SF_6)
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	795b      	ldrb	r3, [r3, #5]
 80015fe:	2b06      	cmp	r3, #6
 8001600:	d104      	bne.n	800160c <SX1278_rx_get_packet+0x48>
	{
		// ??? not sure what to put here
		packet_size = inst->txLen;
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 8001608:	73fb      	strb	r3, [r7, #15]
 800160a:	e005      	b.n	8001618 <SX1278_rx_get_packet+0x54>
	}
	else
	{
		packet_size = SX1278_read_address(inst, LR_RegRxNbBytes); //get the number of received bytes
 800160c:	2113      	movs	r1, #19
 800160e:	6878      	ldr	r0, [r7, #4]
 8001610:	f7ff fdad 	bl	800116e <SX1278_read_address>
 8001614:	4603      	mov	r3, r0
 8001616:	73fb      	strb	r3, [r7, #15]
	}

	SX1278_read_burst(inst, 0x00, inst->rxBuffer, packet_size);
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	f103 0235 	add.w	r2, r3, #53	; 0x35
 800161e:	7bfb      	ldrb	r3, [r7, #15]
 8001620:	2100      	movs	r1, #0
 8001622:	6878      	ldr	r0, [r7, #4]
 8001624:	f7ff fdcc 	bl	80011c0 <SX1278_read_burst>

	inst->newPacket = (inst->rxTimeout || (inst->crcError && LR_VALIDATE_CRCERROR));
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	f893 2026 	ldrb.w	r2, [r3, #38]	; 0x26
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	inst->rssi = SX1278_getRSSI(inst);
 8001634:	6878      	ldr	r0, [r7, #4]
 8001636:	f000 f8ff 	bl	8001838 <SX1278_getRSSI>
 800163a:	4602      	mov	r2, r0
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	62da      	str	r2, [r3, #44]	; 0x2c
	inst->rxLen = packet_size;
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	7bfa      	ldrb	r2, [r7, #15]
 8001644:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	SX1278_clearLoRaIrq(inst);
 8001648:	6878      	ldr	r0, [r7, #4]
 800164a:	f000 f8e8 	bl	800181e <SX1278_clearLoRaIrq>
	SX1278_standby(inst);
 800164e:	6878      	ldr	r0, [r7, #4]
 8001650:	f000 f870 	bl	8001734 <SX1278_standby>

	return inst->newPacket;
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
}
 800165a:	4618      	mov	r0, r3
 800165c:	3710      	adds	r7, #16
 800165e:	46bd      	mov	sp, r7
 8001660:	bd80      	pop	{r7, pc}

08001662 <SX1278_tx_mode>:

//#### Functions to change SX1278 operation mode ####

void SX1278_tx_mode(SX1278* inst)
{
 8001662:	b580      	push	{r7, lr}
 8001664:	b084      	sub	sp, #16
 8001666:	af00      	add	r7, sp, #0
 8001668:	6078      	str	r0, [r7, #4]
	uint8_t addr;

	SX1278_clearLoRaIrq(inst);
 800166a:	6878      	ldr	r0, [r7, #4]
 800166c:	f000 f8d7 	bl	800181e <SX1278_clearLoRaIrq>
	SX1278_command(inst, REG_LR_DIOMAPPING1, 0x41);	//DIO0=01, DIO1=00, DIO2=00, DIO3=01
 8001670:	2241      	movs	r2, #65	; 0x41
 8001672:	2140      	movs	r1, #64	; 0x40
 8001674:	6878      	ldr	r0, [r7, #4]
 8001676:	f7ff fcef 	bl	8001058 <SX1278_command>
	SX1278_command(inst, LR_RegIrqFlagsMask, 0xF7);	//Open TxDone interrupt
 800167a:	22f7      	movs	r2, #247	; 0xf7
 800167c:	2111      	movs	r1, #17
 800167e:	6878      	ldr	r0, [r7, #4]
 8001680:	f7ff fcea 	bl	8001058 <SX1278_command>

	addr = SX1278_read_address(inst, LR_RegFifoTxBaseAddr);	//read tx_fifo beginning adress in memory
 8001684:	210e      	movs	r1, #14
 8001686:	6878      	ldr	r0, [r7, #4]
 8001688:	f7ff fd71 	bl	800116e <SX1278_read_address>
 800168c:	4603      	mov	r3, r0
 800168e:	73fb      	strb	r3, [r7, #15]
	SX1278_command(inst, LR_RegFifoAddrPtr, addr);			//set fifo pointer there
 8001690:	7bfb      	ldrb	r3, [r7, #15]
 8001692:	461a      	mov	r2, r3
 8001694:	210d      	movs	r1, #13
 8001696:	6878      	ldr	r0, [r7, #4]
 8001698:	f7ff fcde 	bl	8001058 <SX1278_command>

	inst->txLen = 0;
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	2200      	movs	r2, #0
 80016a0:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
	inst->mode = TX;
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	2202      	movs	r2, #2
 80016a8:	731a      	strb	r2, [r3, #12]
}
 80016aa:	bf00      	nop
 80016ac:	3710      	adds	r7, #16
 80016ae:	46bd      	mov	sp, r7
 80016b0:	bd80      	pop	{r7, pc}

080016b2 <SX1278_rx_mode>:

void SX1278_rx_mode(SX1278* inst)
{
 80016b2:	b580      	push	{r7, lr}
 80016b4:	b084      	sub	sp, #16
 80016b6:	af00      	add	r7, sp, #0
 80016b8:	6078      	str	r0, [r7, #4]
	uint8_t addr;

	SX1278_clearLoRaIrq(inst);
 80016ba:	6878      	ldr	r0, [r7, #4]
 80016bc:	f000 f8af 	bl	800181e <SX1278_clearLoRaIrq>
	SX1278_command(inst, REG_LR_DIOMAPPING1, 0x01);	//DIO=00, DIO1=00,DIO2=00, DIO3=01
 80016c0:	2201      	movs	r2, #1
 80016c2:	2140      	movs	r1, #64	; 0x40
 80016c4:	6878      	ldr	r0, [r7, #4]
 80016c6:	f7ff fcc7 	bl	8001058 <SX1278_command>
	SX1278_command(inst, LR_RegIrqFlagsMask, 0x1F);	//Open RxDone, RxTimeout, crcError interrupt
 80016ca:	221f      	movs	r2, #31
 80016cc:	2111      	movs	r1, #17
 80016ce:	6878      	ldr	r0, [r7, #4]
 80016d0:	f7ff fcc2 	bl	8001058 <SX1278_command>

	addr = SX1278_read_address(inst, LR_RegFifoRxBaseAddr);	//read rx_fifo beginning adress in memory
 80016d4:	210f      	movs	r1, #15
 80016d6:	6878      	ldr	r0, [r7, #4]
 80016d8:	f7ff fd49 	bl	800116e <SX1278_read_address>
 80016dc:	4603      	mov	r3, r0
 80016de:	73fb      	strb	r3, [r7, #15]
	SX1278_command(inst, LR_RegFifoAddrPtr, addr);			//set fifo pointer there
 80016e0:	7bfb      	ldrb	r3, [r7, #15]
 80016e2:	461a      	mov	r2, r3
 80016e4:	210d      	movs	r1, #13
 80016e6:	6878      	ldr	r0, [r7, #4]
 80016e8:	f7ff fcb6 	bl	8001058 <SX1278_command>

	SX1278_command(inst, LR_RegOpMode, 0x8d);				//0x8d = 1_00_0_1_101 = Lora, FSK, (r), Low Frequency mode, Rx mode
 80016ec:	228d      	movs	r2, #141	; 0x8d
 80016ee:	2101      	movs	r1, #1
 80016f0:	6878      	ldr	r0, [r7, #4]
 80016f2:	f7ff fcb1 	bl	8001058 <SX1278_command>

	inst->crcError = false;
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	2200      	movs	r2, #0
 80016fa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	inst->rxLen = 0;
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	2200      	movs	r2, #0
 8001702:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	inst->mode = RX;
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	2203      	movs	r2, #3
 800170a:	731a      	strb	r2, [r3, #12]
}
 800170c:	bf00      	nop
 800170e:	3710      	adds	r7, #16
 8001710:	46bd      	mov	sp, r7
 8001712:	bd80      	pop	{r7, pc}

08001714 <SX1278_sleep>:

void SX1278_sleep(SX1278* inst)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	b082      	sub	sp, #8
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
	SX1278_command(inst, LR_RegOpMode, 0x08);
 800171c:	2208      	movs	r2, #8
 800171e:	2101      	movs	r1, #1
 8001720:	6878      	ldr	r0, [r7, #4]
 8001722:	f7ff fc99 	bl	8001058 <SX1278_command>
	inst->mode = SLEEP;
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	2200      	movs	r2, #0
 800172a:	731a      	strb	r2, [r3, #12]
}
 800172c:	bf00      	nop
 800172e:	3708      	adds	r7, #8
 8001730:	46bd      	mov	sp, r7
 8001732:	bd80      	pop	{r7, pc}

08001734 <SX1278_standby>:

void SX1278_standby(SX1278* inst)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	b082      	sub	sp, #8
 8001738:	af00      	add	r7, sp, #0
 800173a:	6078      	str	r0, [r7, #4]
	SX1278_command(inst, LR_RegOpMode, 0x09);
 800173c:	2209      	movs	r2, #9
 800173e:	2101      	movs	r1, #1
 8001740:	6878      	ldr	r0, [r7, #4]
 8001742:	f7ff fc89 	bl	8001058 <SX1278_command>
	inst->mode = STANDBY;
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	2201      	movs	r2, #1
 800174a:	731a      	strb	r2, [r3, #12]
}
 800174c:	bf00      	nop
 800174e:	3708      	adds	r7, #8
 8001750:	46bd      	mov	sp, r7
 8001752:	bd80      	pop	{r7, pc}

08001754 <SX1278_dio0_IRQ>:
}

//#### Interrupt methods ####

bool SX1278_dio0_IRQ(SX1278* inst)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	b082      	sub	sp, #8
 8001758:	af00      	add	r7, sp, #0
 800175a:	6078      	str	r0, [r7, #4]
	//function to call when dio0 rises, used only when waiting for the DIO0 interrupt
	//finishes transmit and receive routines
	if (inst->useDio0IRQ && inst->pendingIRQ)
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8001762:	2b00      	cmp	r3, #0
 8001764:	d01e      	beq.n	80017a4 <SX1278_dio0_IRQ+0x50>
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800176c:	2b00      	cmp	r3, #0
 800176e:	d019      	beq.n	80017a4 <SX1278_dio0_IRQ+0x50>
	{
		if (inst->mode == TX)
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	7b1b      	ldrb	r3, [r3, #12]
 8001774:	2b02      	cmp	r3, #2
 8001776:	d104      	bne.n	8001782 <SX1278_dio0_IRQ+0x2e>
		{
			return SX1278_tx_finish(inst);
 8001778:	6878      	ldr	r0, [r7, #4]
 800177a:	f7ff fefe 	bl	800157a <SX1278_tx_finish>
 800177e:	4603      	mov	r3, r0
 8001780:	e011      	b.n	80017a6 <SX1278_dio0_IRQ+0x52>
		}
		else if (inst->mode == RX)
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	7b1b      	ldrb	r3, [r3, #12]
 8001786:	2b03      	cmp	r3, #3
 8001788:	d104      	bne.n	8001794 <SX1278_dio0_IRQ+0x40>
		{
			return SX1278_rx_get_packet(inst);
 800178a:	6878      	ldr	r0, [r7, #4]
 800178c:	f7ff ff1a 	bl	80015c4 <SX1278_rx_get_packet>
 8001790:	4603      	mov	r3, r0
 8001792:	e008      	b.n	80017a6 <SX1278_dio0_IRQ+0x52>
		}
		else
		{
			SX1278_clearLoRaIrq(inst);
 8001794:	6878      	ldr	r0, [r7, #4]
 8001796:	f000 f842 	bl	800181e <SX1278_clearLoRaIrq>
			SX1278_standby(inst);
 800179a:	6878      	ldr	r0, [r7, #4]
 800179c:	f7ff ffca 	bl	8001734 <SX1278_standby>
			return false;
 80017a0:	2300      	movs	r3, #0
 80017a2:	e000      	b.n	80017a6 <SX1278_dio0_IRQ+0x52>
		}

		inst->pendingIRQ = false;
		return true;
	}
	else return false;
 80017a4:	2300      	movs	r3, #0
}
 80017a6:	4618      	mov	r0, r3
 80017a8:	3708      	adds	r7, #8
 80017aa:	46bd      	mov	sp, r7
 80017ac:	bd80      	pop	{r7, pc}

080017ae <SX1278_update_IRQ_status>:

void SX1278_update_IRQ_status(SX1278* inst)
{
 80017ae:	b580      	push	{r7, lr}
 80017b0:	b082      	sub	sp, #8
 80017b2:	af00      	add	r7, sp, #0
 80017b4:	6078      	str	r0, [r7, #4]
	inst->irqStatus = SX1278_read_address(inst, LR_RegIrqFlags);
 80017b6:	2112      	movs	r1, #18
 80017b8:	6878      	ldr	r0, [r7, #4]
 80017ba:	f7ff fcd8 	bl	800116e <SX1278_read_address>
 80017be:	4603      	mov	r3, r0
 80017c0:	461a      	mov	r2, r3
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	inst->rxTimeout = ((inst->irqStatus & IRQ_LR_RXTIMEOUT) > 0x00);
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80017ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	bfcc      	ite	gt
 80017d6:	2301      	movgt	r3, #1
 80017d8:	2300      	movle	r3, #0
 80017da:	b2da      	uxtb	r2, r3
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
	inst->rxDone = 	  ((inst->irqStatus & IRQ_LR_RXDONE) > 0x00);
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80017e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	bfcc      	ite	gt
 80017f0:	2301      	movgt	r3, #1
 80017f2:	2300      	movle	r3, #0
 80017f4:	b2da      	uxtb	r2, r3
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	inst->crcError =  ((inst->irqStatus & IRQ_LR_CRCERROR) > 0x00);
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001802:	f003 0320 	and.w	r3, r3, #32
 8001806:	2b00      	cmp	r3, #0
 8001808:	bfcc      	ite	gt
 800180a:	2301      	movgt	r3, #1
 800180c:	2300      	movle	r3, #0
 800180e:	b2da      	uxtb	r2, r3
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
}
 8001816:	bf00      	nop
 8001818:	3708      	adds	r7, #8
 800181a:	46bd      	mov	sp, r7
 800181c:	bd80      	pop	{r7, pc}

0800181e <SX1278_clearLoRaIrq>:

void SX1278_clearLoRaIrq(SX1278* inst)
{
 800181e:	b580      	push	{r7, lr}
 8001820:	b082      	sub	sp, #8
 8001822:	af00      	add	r7, sp, #0
 8001824:	6078      	str	r0, [r7, #4]
	SX1278_command(inst, LR_RegIrqFlags, 0xFF);
 8001826:	22ff      	movs	r2, #255	; 0xff
 8001828:	2112      	movs	r1, #18
 800182a:	6878      	ldr	r0, [r7, #4]
 800182c:	f7ff fc14 	bl	8001058 <SX1278_command>
}
 8001830:	bf00      	nop
 8001832:	3708      	adds	r7, #8
 8001834:	46bd      	mov	sp, r7
 8001836:	bd80      	pop	{r7, pc}

08001838 <SX1278_getRSSI>:

int SX1278_getRSSI(SX1278* inst)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	b082      	sub	sp, #8
 800183c:	af00      	add	r7, sp, #0
 800183e:	6078      	str	r0, [r7, #4]
  return (-164 + SX1278_read_address(inst, LR_RegPktRssiValue));
 8001840:	211a      	movs	r1, #26
 8001842:	6878      	ldr	r0, [r7, #4]
 8001844:	f7ff fc93 	bl	800116e <SX1278_read_address>
 8001848:	4603      	mov	r3, r0
 800184a:	3ba4      	subs	r3, #164	; 0xa4
}
 800184c:	4618      	mov	r0, r3
 800184e:	3708      	adds	r7, #8
 8001850:	46bd      	mov	sp, r7
 8001852:	bd80      	pop	{r7, pc}

08001854 <read_data>:
#include "bmp280.h"

static inline int read_data(BMP280 *inst, uint8_t addr, uint8_t *value, uint8_t len) {
 8001854:	b590      	push	{r4, r7, lr}
 8001856:	b08b      	sub	sp, #44	; 0x2c
 8001858:	af04      	add	r7, sp, #16
 800185a:	60f8      	str	r0, [r7, #12]
 800185c:	607a      	str	r2, [r7, #4]
 800185e:	461a      	mov	r2, r3
 8001860:	460b      	mov	r3, r1
 8001862:	72fb      	strb	r3, [r7, #11]
 8001864:	4613      	mov	r3, r2
 8001866:	72bb      	strb	r3, [r7, #10]
	uint16_t tx_buff;
	tx_buff = (inst->addr << 1);
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	889b      	ldrh	r3, [r3, #4]
 800186c:	005b      	lsls	r3, r3, #1
 800186e:	82fb      	strh	r3, [r7, #22]

	if (HAL_I2C_Mem_Read(inst->i2c, tx_buff, addr, 1, value, len, 5000) == HAL_OK) return 0;
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	6818      	ldr	r0, [r3, #0]
 8001874:	7afb      	ldrb	r3, [r7, #11]
 8001876:	b29c      	uxth	r4, r3
 8001878:	7abb      	ldrb	r3, [r7, #10]
 800187a:	b29b      	uxth	r3, r3
 800187c:	8af9      	ldrh	r1, [r7, #22]
 800187e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001882:	9202      	str	r2, [sp, #8]
 8001884:	9301      	str	r3, [sp, #4]
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	9300      	str	r3, [sp, #0]
 800188a:	2301      	movs	r3, #1
 800188c:	4622      	mov	r2, r4
 800188e:	f002 fcef 	bl	8004270 <HAL_I2C_Mem_Read>
 8001892:	4603      	mov	r3, r0
 8001894:	2b00      	cmp	r3, #0
 8001896:	d101      	bne.n	800189c <read_data+0x48>
 8001898:	2300      	movs	r3, #0
 800189a:	e000      	b.n	800189e <read_data+0x4a>
	else return 1;
 800189c:	2301      	movs	r3, #1
}
 800189e:	4618      	mov	r0, r3
 80018a0:	371c      	adds	r7, #28
 80018a2:	46bd      	mov	sp, r7
 80018a4:	bd90      	pop	{r4, r7, pc}

080018a6 <write_register8>:

static int write_register8(BMP280 *inst, uint8_t addr, uint8_t value) {
 80018a6:	b580      	push	{r7, lr}
 80018a8:	b088      	sub	sp, #32
 80018aa:	af04      	add	r7, sp, #16
 80018ac:	6078      	str	r0, [r7, #4]
 80018ae:	460b      	mov	r3, r1
 80018b0:	70fb      	strb	r3, [r7, #3]
 80018b2:	4613      	mov	r3, r2
 80018b4:	70bb      	strb	r3, [r7, #2]
	uint16_t tx_buff;

	tx_buff = (inst->addr << 1);
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	889b      	ldrh	r3, [r3, #4]
 80018ba:	005b      	lsls	r3, r3, #1
 80018bc:	81fb      	strh	r3, [r7, #14]

	if (HAL_I2C_Mem_Write(inst->i2c, tx_buff, addr, 1, &value, 1, 10000) == HAL_OK) return false;
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	6818      	ldr	r0, [r3, #0]
 80018c2:	78fb      	ldrb	r3, [r7, #3]
 80018c4:	b29a      	uxth	r2, r3
 80018c6:	89f9      	ldrh	r1, [r7, #14]
 80018c8:	f242 7310 	movw	r3, #10000	; 0x2710
 80018cc:	9302      	str	r3, [sp, #8]
 80018ce:	2301      	movs	r3, #1
 80018d0:	9301      	str	r3, [sp, #4]
 80018d2:	1cbb      	adds	r3, r7, #2
 80018d4:	9300      	str	r3, [sp, #0]
 80018d6:	2301      	movs	r3, #1
 80018d8:	f002 fbd0 	bl	800407c <HAL_I2C_Mem_Write>
 80018dc:	4603      	mov	r3, r0
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d101      	bne.n	80018e6 <write_register8+0x40>
 80018e2:	2300      	movs	r3, #0
 80018e4:	e000      	b.n	80018e8 <write_register8+0x42>
	else return true;
 80018e6:	2301      	movs	r3, #1
}
 80018e8:	4618      	mov	r0, r3
 80018ea:	3710      	adds	r7, #16
 80018ec:	46bd      	mov	sp, r7
 80018ee:	bd80      	pop	{r7, pc}

080018f0 <read_register16>:

static bool read_register16(BMP280 *inst, uint8_t addr, uint16_t *value) {
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b08a      	sub	sp, #40	; 0x28
 80018f4:	af04      	add	r7, sp, #16
 80018f6:	60f8      	str	r0, [r7, #12]
 80018f8:	460b      	mov	r3, r1
 80018fa:	607a      	str	r2, [r7, #4]
 80018fc:	72fb      	strb	r3, [r7, #11]
	uint16_t tx_buff;
	uint8_t rx_buff[2];
	tx_buff = (inst->addr << 1);
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	889b      	ldrh	r3, [r3, #4]
 8001902:	005b      	lsls	r3, r3, #1
 8001904:	82fb      	strh	r3, [r7, #22]

	if (HAL_I2C_Mem_Read(inst->i2c, tx_buff, addr, 1, rx_buff, 2, 5000) == HAL_OK)
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	6818      	ldr	r0, [r3, #0]
 800190a:	7afb      	ldrb	r3, [r7, #11]
 800190c:	b29a      	uxth	r2, r3
 800190e:	8af9      	ldrh	r1, [r7, #22]
 8001910:	f241 3388 	movw	r3, #5000	; 0x1388
 8001914:	9302      	str	r3, [sp, #8]
 8001916:	2302      	movs	r3, #2
 8001918:	9301      	str	r3, [sp, #4]
 800191a:	f107 0314 	add.w	r3, r7, #20
 800191e:	9300      	str	r3, [sp, #0]
 8001920:	2301      	movs	r3, #1
 8001922:	f002 fca5 	bl	8004270 <HAL_I2C_Mem_Read>
 8001926:	4603      	mov	r3, r0
 8001928:	2b00      	cmp	r3, #0
 800192a:	d10b      	bne.n	8001944 <read_register16+0x54>
	{
		*value = (uint16_t) ((rx_buff[1] << 8) | rx_buff[0]);
 800192c:	7d7b      	ldrb	r3, [r7, #21]
 800192e:	021b      	lsls	r3, r3, #8
 8001930:	b21a      	sxth	r2, r3
 8001932:	7d3b      	ldrb	r3, [r7, #20]
 8001934:	b21b      	sxth	r3, r3
 8001936:	4313      	orrs	r3, r2
 8001938:	b21b      	sxth	r3, r3
 800193a:	b29a      	uxth	r2, r3
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	801a      	strh	r2, [r3, #0]
		return true;
 8001940:	2301      	movs	r3, #1
 8001942:	e000      	b.n	8001946 <read_register16+0x56>
	}
	else return false;
 8001944:	2300      	movs	r3, #0

}
 8001946:	4618      	mov	r0, r3
 8001948:	3718      	adds	r7, #24
 800194a:	46bd      	mov	sp, r7
 800194c:	bd80      	pop	{r7, pc}

0800194e <read_calibration_data>:

static bool read_calibration_data(BMP280 *inst)
{
 800194e:	b580      	push	{r7, lr}
 8001950:	b082      	sub	sp, #8
 8001952:	af00      	add	r7, sp, #0
 8001954:	6078      	str	r0, [r7, #4]
	return (read_register16(inst, 0x88, &inst->dig_T1)
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	330c      	adds	r3, #12
 800195a:	461a      	mov	r2, r3
 800195c:	2188      	movs	r1, #136	; 0x88
 800195e:	6878      	ldr	r0, [r7, #4]
 8001960:	f7ff ffc6 	bl	80018f0 <read_register16>
 8001964:	4603      	mov	r3, r0
	&& read_register16(inst, 0x94, (uint16_t *) &inst->dig_P4)
	&& read_register16(inst, 0x96, (uint16_t *) &inst->dig_P5)
	&& read_register16(inst, 0x98, (uint16_t *) &inst->dig_P6)
	&& read_register16(inst, 0x9a, (uint16_t *) &inst->dig_P7)
	&& read_register16(inst, 0x9c, (uint16_t *) &inst->dig_P8)
	&& read_register16(inst, 0x9e, (uint16_t *) &inst->dig_P9));
 8001966:	2b00      	cmp	r3, #0
 8001968:	d06f      	beq.n	8001a4a <read_calibration_data+0xfc>
	&& read_register16(inst, 0x8a, (uint16_t *) &inst->dig_T2)
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	330e      	adds	r3, #14
 800196e:	461a      	mov	r2, r3
 8001970:	218a      	movs	r1, #138	; 0x8a
 8001972:	6878      	ldr	r0, [r7, #4]
 8001974:	f7ff ffbc 	bl	80018f0 <read_register16>
 8001978:	4603      	mov	r3, r0
 800197a:	2b00      	cmp	r3, #0
 800197c:	d065      	beq.n	8001a4a <read_calibration_data+0xfc>
	&& read_register16(inst, 0x8c, (uint16_t *) &inst->dig_T3)
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	3310      	adds	r3, #16
 8001982:	461a      	mov	r2, r3
 8001984:	218c      	movs	r1, #140	; 0x8c
 8001986:	6878      	ldr	r0, [r7, #4]
 8001988:	f7ff ffb2 	bl	80018f0 <read_register16>
 800198c:	4603      	mov	r3, r0
 800198e:	2b00      	cmp	r3, #0
 8001990:	d05b      	beq.n	8001a4a <read_calibration_data+0xfc>
	&& read_register16(inst, 0x8e, &inst->dig_P1)
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	3312      	adds	r3, #18
 8001996:	461a      	mov	r2, r3
 8001998:	218e      	movs	r1, #142	; 0x8e
 800199a:	6878      	ldr	r0, [r7, #4]
 800199c:	f7ff ffa8 	bl	80018f0 <read_register16>
 80019a0:	4603      	mov	r3, r0
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d051      	beq.n	8001a4a <read_calibration_data+0xfc>
	&& read_register16(inst, 0x90, (uint16_t *) &inst->dig_P2)
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	3314      	adds	r3, #20
 80019aa:	461a      	mov	r2, r3
 80019ac:	2190      	movs	r1, #144	; 0x90
 80019ae:	6878      	ldr	r0, [r7, #4]
 80019b0:	f7ff ff9e 	bl	80018f0 <read_register16>
 80019b4:	4603      	mov	r3, r0
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d047      	beq.n	8001a4a <read_calibration_data+0xfc>
	&& read_register16(inst, 0x92, (uint16_t *) &inst->dig_P3)
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	3316      	adds	r3, #22
 80019be:	461a      	mov	r2, r3
 80019c0:	2192      	movs	r1, #146	; 0x92
 80019c2:	6878      	ldr	r0, [r7, #4]
 80019c4:	f7ff ff94 	bl	80018f0 <read_register16>
 80019c8:	4603      	mov	r3, r0
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d03d      	beq.n	8001a4a <read_calibration_data+0xfc>
	&& read_register16(inst, 0x94, (uint16_t *) &inst->dig_P4)
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	3318      	adds	r3, #24
 80019d2:	461a      	mov	r2, r3
 80019d4:	2194      	movs	r1, #148	; 0x94
 80019d6:	6878      	ldr	r0, [r7, #4]
 80019d8:	f7ff ff8a 	bl	80018f0 <read_register16>
 80019dc:	4603      	mov	r3, r0
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d033      	beq.n	8001a4a <read_calibration_data+0xfc>
	&& read_register16(inst, 0x96, (uint16_t *) &inst->dig_P5)
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	331a      	adds	r3, #26
 80019e6:	461a      	mov	r2, r3
 80019e8:	2196      	movs	r1, #150	; 0x96
 80019ea:	6878      	ldr	r0, [r7, #4]
 80019ec:	f7ff ff80 	bl	80018f0 <read_register16>
 80019f0:	4603      	mov	r3, r0
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d029      	beq.n	8001a4a <read_calibration_data+0xfc>
	&& read_register16(inst, 0x98, (uint16_t *) &inst->dig_P6)
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	331c      	adds	r3, #28
 80019fa:	461a      	mov	r2, r3
 80019fc:	2198      	movs	r1, #152	; 0x98
 80019fe:	6878      	ldr	r0, [r7, #4]
 8001a00:	f7ff ff76 	bl	80018f0 <read_register16>
 8001a04:	4603      	mov	r3, r0
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d01f      	beq.n	8001a4a <read_calibration_data+0xfc>
	&& read_register16(inst, 0x9a, (uint16_t *) &inst->dig_P7)
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	331e      	adds	r3, #30
 8001a0e:	461a      	mov	r2, r3
 8001a10:	219a      	movs	r1, #154	; 0x9a
 8001a12:	6878      	ldr	r0, [r7, #4]
 8001a14:	f7ff ff6c 	bl	80018f0 <read_register16>
 8001a18:	4603      	mov	r3, r0
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d015      	beq.n	8001a4a <read_calibration_data+0xfc>
	&& read_register16(inst, 0x9c, (uint16_t *) &inst->dig_P8)
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	3320      	adds	r3, #32
 8001a22:	461a      	mov	r2, r3
 8001a24:	219c      	movs	r1, #156	; 0x9c
 8001a26:	6878      	ldr	r0, [r7, #4]
 8001a28:	f7ff ff62 	bl	80018f0 <read_register16>
 8001a2c:	4603      	mov	r3, r0
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d00b      	beq.n	8001a4a <read_calibration_data+0xfc>
	&& read_register16(inst, 0x9e, (uint16_t *) &inst->dig_P9));
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	3322      	adds	r3, #34	; 0x22
 8001a36:	461a      	mov	r2, r3
 8001a38:	219e      	movs	r1, #158	; 0x9e
 8001a3a:	6878      	ldr	r0, [r7, #4]
 8001a3c:	f7ff ff58 	bl	80018f0 <read_register16>
 8001a40:	4603      	mov	r3, r0
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d001      	beq.n	8001a4a <read_calibration_data+0xfc>
 8001a46:	2301      	movs	r3, #1
 8001a48:	e000      	b.n	8001a4c <read_calibration_data+0xfe>
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	f003 0301 	and.w	r3, r3, #1
 8001a50:	b2db      	uxtb	r3, r3
}
 8001a52:	4618      	mov	r0, r3
 8001a54:	3708      	adds	r7, #8
 8001a56:	46bd      	mov	sp, r7
 8001a58:	bd80      	pop	{r7, pc}

08001a5a <bmp280_init>:

bool bmp280_init(BMP280 *inst, BMP280_config *params)
{
 8001a5a:	b580      	push	{r7, lr}
 8001a5c:	b084      	sub	sp, #16
 8001a5e:	af00      	add	r7, sp, #0
 8001a60:	6078      	str	r0, [r7, #4]
 8001a62:	6039      	str	r1, [r7, #0]
	if (inst->addr != BMP280_I2C_ADDRESS_0 && inst->addr != BMP280_I2C_ADDRESS_1) return false;
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	889b      	ldrh	r3, [r3, #4]
 8001a68:	2b76      	cmp	r3, #118	; 0x76
 8001a6a:	d005      	beq.n	8001a78 <bmp280_init+0x1e>
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	889b      	ldrh	r3, [r3, #4]
 8001a70:	2b77      	cmp	r3, #119	; 0x77
 8001a72:	d001      	beq.n	8001a78 <bmp280_init+0x1e>
 8001a74:	2300      	movs	r3, #0
 8001a76:	e06f      	b.n	8001b58 <bmp280_init+0xfe>
	if (read_data(inst, BMP280_REG_ID, &inst->id, 1)) return false;
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	1d9a      	adds	r2, r3, #6
 8001a7c:	2301      	movs	r3, #1
 8001a7e:	21d0      	movs	r1, #208	; 0xd0
 8001a80:	6878      	ldr	r0, [r7, #4]
 8001a82:	f7ff fee7 	bl	8001854 <read_data>
 8001a86:	4603      	mov	r3, r0
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d001      	beq.n	8001a90 <bmp280_init+0x36>
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	e063      	b.n	8001b58 <bmp280_init+0xfe>
	if (inst->id != BMP280_CHIP_ID) return false;
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	799b      	ldrb	r3, [r3, #6]
 8001a94:	2b58      	cmp	r3, #88	; 0x58
 8001a96:	d001      	beq.n	8001a9c <bmp280_init+0x42>
 8001a98:	2300      	movs	r3, #0
 8001a9a:	e05d      	b.n	8001b58 <bmp280_init+0xfe>

	// Soft reset.
	if (write_register8(inst, BMP280_REG_RESET, BMP280_RESET_VALUE)) return false;
 8001a9c:	22b6      	movs	r2, #182	; 0xb6
 8001a9e:	21e0      	movs	r1, #224	; 0xe0
 8001aa0:	6878      	ldr	r0, [r7, #4]
 8001aa2:	f7ff ff00 	bl	80018a6 <write_register8>
 8001aa6:	4603      	mov	r3, r0
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d001      	beq.n	8001ab0 <bmp280_init+0x56>
 8001aac:	2300      	movs	r3, #0
 8001aae:	e053      	b.n	8001b58 <bmp280_init+0xfe>

	// Wait until finished copying over the NVP data.
	while (1) {
		uint8_t status;
		if (!read_data(inst, BMP280_REG_STATUS, &status, 1) && (status & 1) == 0) break;
 8001ab0:	f107 020d 	add.w	r2, r7, #13
 8001ab4:	2301      	movs	r3, #1
 8001ab6:	21f3      	movs	r1, #243	; 0xf3
 8001ab8:	6878      	ldr	r0, [r7, #4]
 8001aba:	f7ff fecb 	bl	8001854 <read_data>
 8001abe:	4603      	mov	r3, r0
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d1f5      	bne.n	8001ab0 <bmp280_init+0x56>
 8001ac4:	7b7b      	ldrb	r3, [r7, #13]
 8001ac6:	f003 0301 	and.w	r3, r3, #1
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d1f0      	bne.n	8001ab0 <bmp280_init+0x56>
	}

	if (!read_calibration_data(inst)) return false;
 8001ace:	6878      	ldr	r0, [r7, #4]
 8001ad0:	f7ff ff3d 	bl	800194e <read_calibration_data>
 8001ad4:	4603      	mov	r3, r0
 8001ad6:	f083 0301 	eor.w	r3, r3, #1
 8001ada:	b2db      	uxtb	r3, r3
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d100      	bne.n	8001ae2 <bmp280_init+0x88>
 8001ae0:	e001      	b.n	8001ae6 <bmp280_init+0x8c>
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	e038      	b.n	8001b58 <bmp280_init+0xfe>

	uint8_t config = (params->standby << 5) | (params->filter << 2);
 8001ae6:	683b      	ldr	r3, [r7, #0]
 8001ae8:	791b      	ldrb	r3, [r3, #4]
 8001aea:	015b      	lsls	r3, r3, #5
 8001aec:	b25a      	sxtb	r2, r3
 8001aee:	683b      	ldr	r3, [r7, #0]
 8001af0:	785b      	ldrb	r3, [r3, #1]
 8001af2:	009b      	lsls	r3, r3, #2
 8001af4:	b25b      	sxtb	r3, r3
 8001af6:	4313      	orrs	r3, r2
 8001af8:	b25b      	sxtb	r3, r3
 8001afa:	73fb      	strb	r3, [r7, #15]
	if (write_register8(inst, BMP280_REG_CONFIG, config)) return false;
 8001afc:	7bfb      	ldrb	r3, [r7, #15]
 8001afe:	461a      	mov	r2, r3
 8001b00:	21f5      	movs	r1, #245	; 0xf5
 8001b02:	6878      	ldr	r0, [r7, #4]
 8001b04:	f7ff fecf 	bl	80018a6 <write_register8>
 8001b08:	4603      	mov	r3, r0
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d001      	beq.n	8001b12 <bmp280_init+0xb8>
 8001b0e:	2300      	movs	r3, #0
 8001b10:	e022      	b.n	8001b58 <bmp280_init+0xfe>

	if (params->mode == BMP280_MODE_FORCED) {
 8001b12:	683b      	ldr	r3, [r7, #0]
 8001b14:	781b      	ldrb	r3, [r3, #0]
 8001b16:	2b01      	cmp	r3, #1
 8001b18:	d102      	bne.n	8001b20 <bmp280_init+0xc6>
		params->mode = BMP280_MODE_SLEEP;  // initial mode for forced is sleep
 8001b1a:	683b      	ldr	r3, [r7, #0]
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	701a      	strb	r2, [r3, #0]
	}

	uint8_t ctrl = (params->oversampling_temperature << 5) | (params->oversampling_pressure << 2) | (params->mode);
 8001b20:	683b      	ldr	r3, [r7, #0]
 8001b22:	78db      	ldrb	r3, [r3, #3]
 8001b24:	015b      	lsls	r3, r3, #5
 8001b26:	b25a      	sxtb	r2, r3
 8001b28:	683b      	ldr	r3, [r7, #0]
 8001b2a:	789b      	ldrb	r3, [r3, #2]
 8001b2c:	009b      	lsls	r3, r3, #2
 8001b2e:	b25b      	sxtb	r3, r3
 8001b30:	4313      	orrs	r3, r2
 8001b32:	b25a      	sxtb	r2, r3
 8001b34:	683b      	ldr	r3, [r7, #0]
 8001b36:	781b      	ldrb	r3, [r3, #0]
 8001b38:	b25b      	sxtb	r3, r3
 8001b3a:	4313      	orrs	r3, r2
 8001b3c:	b25b      	sxtb	r3, r3
 8001b3e:	73bb      	strb	r3, [r7, #14]

	if (write_register8(inst, BMP280_REG_CTRL, ctrl)) return false;
 8001b40:	7bbb      	ldrb	r3, [r7, #14]
 8001b42:	461a      	mov	r2, r3
 8001b44:	21f4      	movs	r1, #244	; 0xf4
 8001b46:	6878      	ldr	r0, [r7, #4]
 8001b48:	f7ff fead 	bl	80018a6 <write_register8>
 8001b4c:	4603      	mov	r3, r0
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d001      	beq.n	8001b56 <bmp280_init+0xfc>
 8001b52:	2300      	movs	r3, #0
 8001b54:	e000      	b.n	8001b58 <bmp280_init+0xfe>

	return true;
 8001b56:	2301      	movs	r3, #1
}
 8001b58:	4618      	mov	r0, r3
 8001b5a:	3710      	adds	r7, #16
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	bd80      	pop	{r7, pc}

08001b60 <compensate_temperature>:
 * Compensation algorithm is taken from BMP280 datasheet.
 *
 * Return value is in degrees Celsius.
 */
static inline int32_t compensate_temperature(BMP280 *inst, int32_t adc_temp,
		int32_t *fine_temp) {
 8001b60:	b480      	push	{r7}
 8001b62:	b087      	sub	sp, #28
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	60f8      	str	r0, [r7, #12]
 8001b68:	60b9      	str	r1, [r7, #8]
 8001b6a:	607a      	str	r2, [r7, #4]
	int32_t var1, var2;

	var1 = ((((adc_temp >> 3) - ((int32_t) inst->dig_T1 << 1)))
 8001b6c:	68bb      	ldr	r3, [r7, #8]
 8001b6e:	10da      	asrs	r2, r3, #3
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	899b      	ldrh	r3, [r3, #12]
 8001b74:	005b      	lsls	r3, r3, #1
 8001b76:	1ad3      	subs	r3, r2, r3
			* (int32_t) inst->dig_T2) >> 11;
 8001b78:	68fa      	ldr	r2, [r7, #12]
 8001b7a:	f9b2 200e 	ldrsh.w	r2, [r2, #14]
 8001b7e:	fb02 f303 	mul.w	r3, r2, r3
	var1 = ((((adc_temp >> 3) - ((int32_t) inst->dig_T1 << 1)))
 8001b82:	12db      	asrs	r3, r3, #11
 8001b84:	617b      	str	r3, [r7, #20]
	var2 = (((((adc_temp >> 4) - (int32_t) inst->dig_T1)
 8001b86:	68bb      	ldr	r3, [r7, #8]
 8001b88:	111b      	asrs	r3, r3, #4
 8001b8a:	68fa      	ldr	r2, [r7, #12]
 8001b8c:	8992      	ldrh	r2, [r2, #12]
 8001b8e:	1a9b      	subs	r3, r3, r2
			* ((adc_temp >> 4) - (int32_t) inst->dig_T1)) >> 12)
 8001b90:	68ba      	ldr	r2, [r7, #8]
 8001b92:	1112      	asrs	r2, r2, #4
 8001b94:	68f9      	ldr	r1, [r7, #12]
 8001b96:	8989      	ldrh	r1, [r1, #12]
 8001b98:	1a52      	subs	r2, r2, r1
 8001b9a:	fb02 f303 	mul.w	r3, r2, r3
 8001b9e:	131b      	asrs	r3, r3, #12
			* (int32_t) inst->dig_T3) >> 14;
 8001ba0:	68fa      	ldr	r2, [r7, #12]
 8001ba2:	f9b2 2010 	ldrsh.w	r2, [r2, #16]
 8001ba6:	fb02 f303 	mul.w	r3, r2, r3
	var2 = (((((adc_temp >> 4) - (int32_t) inst->dig_T1)
 8001baa:	139b      	asrs	r3, r3, #14
 8001bac:	613b      	str	r3, [r7, #16]

	*fine_temp = var1 + var2;
 8001bae:	697a      	ldr	r2, [r7, #20]
 8001bb0:	693b      	ldr	r3, [r7, #16]
 8001bb2:	441a      	add	r2, r3
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	601a      	str	r2, [r3, #0]
	return (*fine_temp * 5 + 128) >> 8;
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681a      	ldr	r2, [r3, #0]
 8001bbc:	4613      	mov	r3, r2
 8001bbe:	009b      	lsls	r3, r3, #2
 8001bc0:	4413      	add	r3, r2
 8001bc2:	3380      	adds	r3, #128	; 0x80
 8001bc4:	121b      	asrs	r3, r3, #8
}
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	371c      	adds	r7, #28
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd0:	4770      	bx	lr

08001bd2 <compensate_pressure>:
 * Compensation algorithm is taken from BMP280 datasheet.
 *
 * Return value is in Pa, 24 integer bits and 8 fractional bits.
 */
static inline uint32_t compensate_pressure(BMP280 *inst, int32_t adc_press,
		int32_t fine_temp) {
 8001bd2:	e92d 4bf0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, fp, lr}
 8001bd6:	b08a      	sub	sp, #40	; 0x28
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	60f8      	str	r0, [r7, #12]
 8001bdc:	60b9      	str	r1, [r7, #8]
 8001bde:	607a      	str	r2, [r7, #4]
	int64_t var1, var2, p;

	var1 = (int64_t) fine_temp - 128000;
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	4619      	mov	r1, r3
 8001be4:	ea4f 72e1 	mov.w	r2, r1, asr #31
 8001be8:	f5b1 33fa 	subs.w	r3, r1, #128000	; 0x1f400
 8001bec:	f142 34ff 	adc.w	r4, r2, #4294967295
 8001bf0:	e9c7 3408 	strd	r3, r4, [r7, #32]
	var2 = var1 * var1 * (int64_t) inst->dig_P6;
 8001bf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bf6:	6a3a      	ldr	r2, [r7, #32]
 8001bf8:	fb02 f203 	mul.w	r2, r2, r3
 8001bfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bfe:	6a39      	ldr	r1, [r7, #32]
 8001c00:	fb01 f303 	mul.w	r3, r1, r3
 8001c04:	441a      	add	r2, r3
 8001c06:	6a39      	ldr	r1, [r7, #32]
 8001c08:	6a3b      	ldr	r3, [r7, #32]
 8001c0a:	fba1 3403 	umull	r3, r4, r1, r3
 8001c0e:	4422      	add	r2, r4
 8001c10:	4614      	mov	r4, r2
 8001c12:	68fa      	ldr	r2, [r7, #12]
 8001c14:	f9b2 201c 	ldrsh.w	r2, [r2, #28]
 8001c18:	b211      	sxth	r1, r2
 8001c1a:	ea4f 72e1 	mov.w	r2, r1, asr #31
 8001c1e:	fb01 f504 	mul.w	r5, r1, r4
 8001c22:	fb03 f002 	mul.w	r0, r3, r2
 8001c26:	4428      	add	r0, r5
 8001c28:	fba3 3401 	umull	r3, r4, r3, r1
 8001c2c:	1902      	adds	r2, r0, r4
 8001c2e:	4614      	mov	r4, r2
 8001c30:	e9c7 3406 	strd	r3, r4, [r7, #24]
 8001c34:	e9c7 3406 	strd	r3, r4, [r7, #24]
	var2 = var2 + ((var1 * (int64_t) inst->dig_P5) << 17);
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 8001c3e:	b21b      	sxth	r3, r3
 8001c40:	ea4f 74e3 	mov.w	r4, r3, asr #31
 8001c44:	6a3a      	ldr	r2, [r7, #32]
 8001c46:	fb04 f102 	mul.w	r1, r4, r2
 8001c4a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c4c:	fb03 f202 	mul.w	r2, r3, r2
 8001c50:	1888      	adds	r0, r1, r2
 8001c52:	6a3a      	ldr	r2, [r7, #32]
 8001c54:	fba2 1203 	umull	r1, r2, r2, r3
 8001c58:	1883      	adds	r3, r0, r2
 8001c5a:	461a      	mov	r2, r3
 8001c5c:	f04f 0500 	mov.w	r5, #0
 8001c60:	f04f 0600 	mov.w	r6, #0
 8001c64:	0456      	lsls	r6, r2, #17
 8001c66:	ea46 36d1 	orr.w	r6, r6, r1, lsr #15
 8001c6a:	044d      	lsls	r5, r1, #17
 8001c6c:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8001c70:	186b      	adds	r3, r5, r1
 8001c72:	eb46 0402 	adc.w	r4, r6, r2
 8001c76:	e9c7 3406 	strd	r3, r4, [r7, #24]
	var2 = var2 + (((int64_t) inst->dig_P4) << 35);
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 8001c80:	b219      	sxth	r1, r3
 8001c82:	ea4f 72e1 	mov.w	r2, r1, asr #31
 8001c86:	f04f 0500 	mov.w	r5, #0
 8001c8a:	f04f 0600 	mov.w	r6, #0
 8001c8e:	00ce      	lsls	r6, r1, #3
 8001c90:	2500      	movs	r5, #0
 8001c92:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8001c96:	186b      	adds	r3, r5, r1
 8001c98:	eb46 0402 	adc.w	r4, r6, r2
 8001c9c:	e9c7 3406 	strd	r3, r4, [r7, #24]
	var1 = ((var1 * var1 * (int64_t) inst->dig_P3) >> 8)
 8001ca0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ca2:	6a3a      	ldr	r2, [r7, #32]
 8001ca4:	fb02 f203 	mul.w	r2, r2, r3
 8001ca8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001caa:	6a39      	ldr	r1, [r7, #32]
 8001cac:	fb01 f303 	mul.w	r3, r1, r3
 8001cb0:	441a      	add	r2, r3
 8001cb2:	6a39      	ldr	r1, [r7, #32]
 8001cb4:	6a3b      	ldr	r3, [r7, #32]
 8001cb6:	fba1 3403 	umull	r3, r4, r1, r3
 8001cba:	4422      	add	r2, r4
 8001cbc:	4614      	mov	r4, r2
 8001cbe:	68fa      	ldr	r2, [r7, #12]
 8001cc0:	f9b2 2016 	ldrsh.w	r2, [r2, #22]
 8001cc4:	b211      	sxth	r1, r2
 8001cc6:	ea4f 72e1 	mov.w	r2, r1, asr #31
 8001cca:	fb01 f504 	mul.w	r5, r1, r4
 8001cce:	fb03 f002 	mul.w	r0, r3, r2
 8001cd2:	4428      	add	r0, r5
 8001cd4:	fba3 3401 	umull	r3, r4, r3, r1
 8001cd8:	1902      	adds	r2, r0, r4
 8001cda:	4614      	mov	r4, r2
 8001cdc:	f04f 0100 	mov.w	r1, #0
 8001ce0:	f04f 0200 	mov.w	r2, #0
 8001ce4:	0a19      	lsrs	r1, r3, #8
 8001ce6:	ea41 6104 	orr.w	r1, r1, r4, lsl #24
 8001cea:	1222      	asrs	r2, r4, #8
			+ ((var1 * (int64_t) inst->dig_P2) << 12);
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8001cf2:	b21b      	sxth	r3, r3
 8001cf4:	ea4f 74e3 	mov.w	r4, r3, asr #31
 8001cf8:	6a38      	ldr	r0, [r7, #32]
 8001cfa:	fb04 f500 	mul.w	r5, r4, r0
 8001cfe:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001d00:	fb03 f000 	mul.w	r0, r3, r0
 8001d04:	4428      	add	r0, r5
 8001d06:	6a3d      	ldr	r5, [r7, #32]
 8001d08:	fba5 5603 	umull	r5, r6, r5, r3
 8001d0c:	1983      	adds	r3, r0, r6
 8001d0e:	461e      	mov	r6, r3
 8001d10:	f04f 0b00 	mov.w	fp, #0
 8001d14:	f04f 0c00 	mov.w	ip, #0
 8001d18:	ea4f 3c06 	mov.w	ip, r6, lsl #12
 8001d1c:	ea4c 5c15 	orr.w	ip, ip, r5, lsr #20
 8001d20:	ea4f 3b05 	mov.w	fp, r5, lsl #12
	var1 = ((var1 * var1 * (int64_t) inst->dig_P3) >> 8)
 8001d24:	eb1b 0301 	adds.w	r3, fp, r1
 8001d28:	eb4c 0402 	adc.w	r4, ip, r2
 8001d2c:	e9c7 3408 	strd	r3, r4, [r7, #32]
	var1 = (((int64_t) 1 << 47) + var1) * ((int64_t) inst->dig_P1) >> 33;
 8001d30:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8001d34:	1c19      	adds	r1, r3, #0
 8001d36:	f544 4200 	adc.w	r2, r4, #32768	; 0x8000
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	8a5b      	ldrh	r3, [r3, #18]
 8001d3e:	b29b      	uxth	r3, r3
 8001d40:	f04f 0400 	mov.w	r4, #0
 8001d44:	fb03 f502 	mul.w	r5, r3, r2
 8001d48:	fb01 f004 	mul.w	r0, r1, r4
 8001d4c:	4428      	add	r0, r5
 8001d4e:	fba1 3403 	umull	r3, r4, r1, r3
 8001d52:	1902      	adds	r2, r0, r4
 8001d54:	4614      	mov	r4, r2
 8001d56:	f04f 0100 	mov.w	r1, #0
 8001d5a:	f04f 0200 	mov.w	r2, #0
 8001d5e:	1061      	asrs	r1, r4, #1
 8001d60:	17e2      	asrs	r2, r4, #31
 8001d62:	e9c7 1208 	strd	r1, r2, [r7, #32]

	if (var1 == 0) {
 8001d66:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8001d6a:	4323      	orrs	r3, r4
 8001d6c:	d101      	bne.n	8001d72 <compensate_pressure+0x1a0>
		return 0;  // avoid exception caused by division by zero
 8001d6e:	2300      	movs	r3, #0
 8001d70:	e0d4      	b.n	8001f1c <compensate_pressure+0x34a>
	}

	p = 1048576 - adc_press;
 8001d72:	68bb      	ldr	r3, [r7, #8]
 8001d74:	f5c3 1380 	rsb	r3, r3, #1048576	; 0x100000
 8001d78:	ea4f 74e3 	mov.w	r4, r3, asr #31
 8001d7c:	e9c7 3404 	strd	r3, r4, [r7, #16]
	p = (((p << 31) - var2) * 3125) / var1;
 8001d80:	693b      	ldr	r3, [r7, #16]
 8001d82:	ea4f 0963 	mov.w	r9, r3, asr #1
 8001d86:	693b      	ldr	r3, [r7, #16]
 8001d88:	ea4f 78c3 	mov.w	r8, r3, lsl #31
 8001d8c:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8001d90:	4645      	mov	r5, r8
 8001d92:	464e      	mov	r6, r9
 8001d94:	1aed      	subs	r5, r5, r3
 8001d96:	eb66 0604 	sbc.w	r6, r6, r4
 8001d9a:	46a8      	mov	r8, r5
 8001d9c:	46b1      	mov	r9, r6
 8001d9e:	eb18 0308 	adds.w	r3, r8, r8
 8001da2:	eb49 0409 	adc.w	r4, r9, r9
 8001da6:	4698      	mov	r8, r3
 8001da8:	46a1      	mov	r9, r4
 8001daa:	eb18 0805 	adds.w	r8, r8, r5
 8001dae:	eb49 0906 	adc.w	r9, r9, r6
 8001db2:	f04f 0100 	mov.w	r1, #0
 8001db6:	f04f 0200 	mov.w	r2, #0
 8001dba:	ea4f 1289 	mov.w	r2, r9, lsl #6
 8001dbe:	ea42 6298 	orr.w	r2, r2, r8, lsr #26
 8001dc2:	ea4f 1188 	mov.w	r1, r8, lsl #6
 8001dc6:	eb18 0801 	adds.w	r8, r8, r1
 8001dca:	eb49 0902 	adc.w	r9, r9, r2
 8001dce:	f04f 0100 	mov.w	r1, #0
 8001dd2:	f04f 0200 	mov.w	r2, #0
 8001dd6:	ea4f 0289 	mov.w	r2, r9, lsl #2
 8001dda:	ea42 7298 	orr.w	r2, r2, r8, lsr #30
 8001dde:	ea4f 0188 	mov.w	r1, r8, lsl #2
 8001de2:	4688      	mov	r8, r1
 8001de4:	4691      	mov	r9, r2
 8001de6:	eb18 0805 	adds.w	r8, r8, r5
 8001dea:	eb49 0906 	adc.w	r9, r9, r6
 8001dee:	f04f 0100 	mov.w	r1, #0
 8001df2:	f04f 0200 	mov.w	r2, #0
 8001df6:	ea4f 0289 	mov.w	r2, r9, lsl #2
 8001dfa:	ea42 7298 	orr.w	r2, r2, r8, lsr #30
 8001dfe:	ea4f 0188 	mov.w	r1, r8, lsl #2
 8001e02:	4688      	mov	r8, r1
 8001e04:	4691      	mov	r9, r2
 8001e06:	eb18 0005 	adds.w	r0, r8, r5
 8001e0a:	eb49 0106 	adc.w	r1, r9, r6
 8001e0e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001e12:	f7fe ff39 	bl	8000c88 <__aeabi_ldivmod>
 8001e16:	4603      	mov	r3, r0
 8001e18:	460c      	mov	r4, r1
 8001e1a:	e9c7 3404 	strd	r3, r4, [r7, #16]
	var1 = ((int64_t) inst->dig_P9 * (p >> 13) * (p >> 13)) >> 25;
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 8001e24:	b219      	sxth	r1, r3
 8001e26:	ea4f 72e1 	mov.w	r2, r1, asr #31
 8001e2a:	e9d7 5604 	ldrd	r5, r6, [r7, #16]
 8001e2e:	f04f 0300 	mov.w	r3, #0
 8001e32:	f04f 0400 	mov.w	r4, #0
 8001e36:	0b6b      	lsrs	r3, r5, #13
 8001e38:	ea43 43c6 	orr.w	r3, r3, r6, lsl #19
 8001e3c:	1374      	asrs	r4, r6, #13
 8001e3e:	fb03 f502 	mul.w	r5, r3, r2
 8001e42:	fb01 f004 	mul.w	r0, r1, r4
 8001e46:	4428      	add	r0, r5
 8001e48:	fba1 1203 	umull	r1, r2, r1, r3
 8001e4c:	1883      	adds	r3, r0, r2
 8001e4e:	461a      	mov	r2, r3
 8001e50:	e9d7 5604 	ldrd	r5, r6, [r7, #16]
 8001e54:	f04f 0300 	mov.w	r3, #0
 8001e58:	f04f 0400 	mov.w	r4, #0
 8001e5c:	0b6b      	lsrs	r3, r5, #13
 8001e5e:	ea43 43c6 	orr.w	r3, r3, r6, lsl #19
 8001e62:	1374      	asrs	r4, r6, #13
 8001e64:	fb03 f502 	mul.w	r5, r3, r2
 8001e68:	fb01 f004 	mul.w	r0, r1, r4
 8001e6c:	4428      	add	r0, r5
 8001e6e:	fba1 1203 	umull	r1, r2, r1, r3
 8001e72:	1883      	adds	r3, r0, r2
 8001e74:	461a      	mov	r2, r3
 8001e76:	f04f 0300 	mov.w	r3, #0
 8001e7a:	f04f 0400 	mov.w	r4, #0
 8001e7e:	0e4b      	lsrs	r3, r1, #25
 8001e80:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 8001e84:	1654      	asrs	r4, r2, #25
 8001e86:	e9c7 3408 	strd	r3, r4, [r7, #32]
	var2 = ((int64_t) inst->dig_P8 * p) >> 19;
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8001e90:	b21b      	sxth	r3, r3
 8001e92:	ea4f 74e3 	mov.w	r4, r3, asr #31
 8001e96:	693a      	ldr	r2, [r7, #16]
 8001e98:	fb04 f102 	mul.w	r1, r4, r2
 8001e9c:	697a      	ldr	r2, [r7, #20]
 8001e9e:	fb03 f202 	mul.w	r2, r3, r2
 8001ea2:	1888      	adds	r0, r1, r2
 8001ea4:	693a      	ldr	r2, [r7, #16]
 8001ea6:	fba2 1203 	umull	r1, r2, r2, r3
 8001eaa:	1883      	adds	r3, r0, r2
 8001eac:	461a      	mov	r2, r3
 8001eae:	f04f 0300 	mov.w	r3, #0
 8001eb2:	f04f 0400 	mov.w	r4, #0
 8001eb6:	0ccb      	lsrs	r3, r1, #19
 8001eb8:	ea43 3342 	orr.w	r3, r3, r2, lsl #13
 8001ebc:	14d4      	asrs	r4, r2, #19
 8001ebe:	e9c7 3406 	strd	r3, r4, [r7, #24]

	p = ((p + var1 + var2) >> 8) + ((int64_t) inst->dig_P7 << 4);
 8001ec2:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8001ec6:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8001eca:	eb11 0803 	adds.w	r8, r1, r3
 8001ece:	eb42 0904 	adc.w	r9, r2, r4
 8001ed2:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8001ed6:	eb13 0508 	adds.w	r5, r3, r8
 8001eda:	eb44 0609 	adc.w	r6, r4, r9
 8001ede:	f04f 0100 	mov.w	r1, #0
 8001ee2:	f04f 0200 	mov.w	r2, #0
 8001ee6:	0a29      	lsrs	r1, r5, #8
 8001ee8:	ea41 6106 	orr.w	r1, r1, r6, lsl #24
 8001eec:	1232      	asrs	r2, r6, #8
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 8001ef4:	b21d      	sxth	r5, r3
 8001ef6:	ea4f 76e5 	mov.w	r6, r5, asr #31
 8001efa:	f04f 0800 	mov.w	r8, #0
 8001efe:	f04f 0900 	mov.w	r9, #0
 8001f02:	ea4f 1906 	mov.w	r9, r6, lsl #4
 8001f06:	ea49 7915 	orr.w	r9, r9, r5, lsr #28
 8001f0a:	ea4f 1805 	mov.w	r8, r5, lsl #4
 8001f0e:	eb18 0301 	adds.w	r3, r8, r1
 8001f12:	eb49 0402 	adc.w	r4, r9, r2
 8001f16:	e9c7 3404 	strd	r3, r4, [r7, #16]
	return p;
 8001f1a:	693b      	ldr	r3, [r7, #16]
}
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	3728      	adds	r7, #40	; 0x28
 8001f20:	46bd      	mov	sp, r7
 8001f22:	e8bd 8bf0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, fp, pc}

08001f26 <bmp280_read_fixed>:

bool bmp280_read_fixed(BMP280 *inst, int32_t *temperature, uint32_t *pressure) {
 8001f26:	b580      	push	{r7, lr}
 8001f28:	b08a      	sub	sp, #40	; 0x28
 8001f2a:	af00      	add	r7, sp, #0
 8001f2c:	60f8      	str	r0, [r7, #12]
 8001f2e:	60b9      	str	r1, [r7, #8]
 8001f30:	607a      	str	r2, [r7, #4]
	int32_t adc_pressure;
	int32_t adc_temp;
	uint8_t data[6];

	// Need to read in one sequence to ensure they match.
	size_t size = 6;
 8001f32:	2306      	movs	r3, #6
 8001f34:	627b      	str	r3, [r7, #36]	; 0x24
	if (read_data(inst, 0xf7, data, size)) return false;
 8001f36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f38:	b2db      	uxtb	r3, r3
 8001f3a:	f107 0214 	add.w	r2, r7, #20
 8001f3e:	21f7      	movs	r1, #247	; 0xf7
 8001f40:	68f8      	ldr	r0, [r7, #12]
 8001f42:	f7ff fc87 	bl	8001854 <read_data>
 8001f46:	4603      	mov	r3, r0
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d001      	beq.n	8001f50 <bmp280_read_fixed+0x2a>
 8001f4c:	2300      	movs	r3, #0
 8001f4e:	e027      	b.n	8001fa0 <bmp280_read_fixed+0x7a>

	adc_pressure = data[0] << 12 | data[1] << 4 | data[2] >> 4;
 8001f50:	7d3b      	ldrb	r3, [r7, #20]
 8001f52:	031a      	lsls	r2, r3, #12
 8001f54:	7d7b      	ldrb	r3, [r7, #21]
 8001f56:	011b      	lsls	r3, r3, #4
 8001f58:	4313      	orrs	r3, r2
 8001f5a:	7dba      	ldrb	r2, [r7, #22]
 8001f5c:	0912      	lsrs	r2, r2, #4
 8001f5e:	b2d2      	uxtb	r2, r2
 8001f60:	4313      	orrs	r3, r2
 8001f62:	623b      	str	r3, [r7, #32]
	adc_temp = data[3] << 12 | data[4] << 4 | data[5] >> 4;
 8001f64:	7dfb      	ldrb	r3, [r7, #23]
 8001f66:	031a      	lsls	r2, r3, #12
 8001f68:	7e3b      	ldrb	r3, [r7, #24]
 8001f6a:	011b      	lsls	r3, r3, #4
 8001f6c:	4313      	orrs	r3, r2
 8001f6e:	7e7a      	ldrb	r2, [r7, #25]
 8001f70:	0912      	lsrs	r2, r2, #4
 8001f72:	b2d2      	uxtb	r2, r2
 8001f74:	4313      	orrs	r3, r2
 8001f76:	61fb      	str	r3, [r7, #28]

	int32_t fine_temp;
	*temperature = compensate_temperature(inst, adc_temp, &fine_temp);
 8001f78:	f107 0310 	add.w	r3, r7, #16
 8001f7c:	461a      	mov	r2, r3
 8001f7e:	69f9      	ldr	r1, [r7, #28]
 8001f80:	68f8      	ldr	r0, [r7, #12]
 8001f82:	f7ff fded 	bl	8001b60 <compensate_temperature>
 8001f86:	4602      	mov	r2, r0
 8001f88:	68bb      	ldr	r3, [r7, #8]
 8001f8a:	601a      	str	r2, [r3, #0]
	*pressure = compensate_pressure(inst, adc_pressure, fine_temp);
 8001f8c:	693b      	ldr	r3, [r7, #16]
 8001f8e:	461a      	mov	r2, r3
 8001f90:	6a39      	ldr	r1, [r7, #32]
 8001f92:	68f8      	ldr	r0, [r7, #12]
 8001f94:	f7ff fe1d 	bl	8001bd2 <compensate_pressure>
 8001f98:	4602      	mov	r2, r0
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	601a      	str	r2, [r3, #0]

	return true;
 8001f9e:	2301      	movs	r3, #1
}
 8001fa0:	4618      	mov	r0, r3
 8001fa2:	3728      	adds	r7, #40	; 0x28
 8001fa4:	46bd      	mov	sp, r7
 8001fa6:	bd80      	pop	{r7, pc}

08001fa8 <bmp280_read_float>:

bool bmp280_read_float(BMP280 *inst, float *temperature, float *pressure)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	b086      	sub	sp, #24
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	60f8      	str	r0, [r7, #12]
 8001fb0:	60b9      	str	r1, [r7, #8]
 8001fb2:	607a      	str	r2, [r7, #4]
	int32_t fixed_temperature;
	uint32_t fixed_pressure;
	if (bmp280_read_fixed(inst, &fixed_temperature, &fixed_pressure))
 8001fb4:	f107 0210 	add.w	r2, r7, #16
 8001fb8:	f107 0314 	add.w	r3, r7, #20
 8001fbc:	4619      	mov	r1, r3
 8001fbe:	68f8      	ldr	r0, [r7, #12]
 8001fc0:	f7ff ffb1 	bl	8001f26 <bmp280_read_fixed>
 8001fc4:	4603      	mov	r3, r0
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d019      	beq.n	8001ffe <bmp280_read_float+0x56>
	{
		*temperature = (float) fixed_temperature / 100;
 8001fca:	697b      	ldr	r3, [r7, #20]
 8001fcc:	ee07 3a90 	vmov	s15, r3
 8001fd0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001fd4:	eddf 6a0c 	vldr	s13, [pc, #48]	; 8002008 <bmp280_read_float+0x60>
 8001fd8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001fdc:	68bb      	ldr	r3, [r7, #8]
 8001fde:	edc3 7a00 	vstr	s15, [r3]
		*pressure = (float) fixed_pressure / 256;
 8001fe2:	693b      	ldr	r3, [r7, #16]
 8001fe4:	ee07 3a90 	vmov	s15, r3
 8001fe8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001fec:	eddf 6a07 	vldr	s13, [pc, #28]	; 800200c <bmp280_read_float+0x64>
 8001ff0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	edc3 7a00 	vstr	s15, [r3]

		return true;
 8001ffa:	2301      	movs	r3, #1
 8001ffc:	e000      	b.n	8002000 <bmp280_read_float+0x58>
	}

	return false;
 8001ffe:	2300      	movs	r3, #0
}
 8002000:	4618      	mov	r0, r3
 8002002:	3718      	adds	r7, #24
 8002004:	46bd      	mov	sp, r7
 8002006:	bd80      	pop	{r7, pc}
 8002008:	42c80000 	.word	0x42c80000
 800200c:	43800000 	.word	0x43800000

08002010 <print>:
static void setup();
static void loop();

static char printBuffer[512];
static inline void print(char* str)
{
 8002010:	b580      	push	{r7, lr}
 8002012:	b082      	sub	sp, #8
 8002014:	af00      	add	r7, sp, #0
 8002016:	6078      	str	r0, [r7, #4]
	CDC_Transmit_FS((uint8_t*) str, strlen(str));
 8002018:	6878      	ldr	r0, [r7, #4]
 800201a:	f7fe f8d9 	bl	80001d0 <strlen>
 800201e:	4603      	mov	r3, r0
 8002020:	b29b      	uxth	r3, r3
 8002022:	4619      	mov	r1, r3
 8002024:	6878      	ldr	r0, [r7, #4]
 8002026:	f00b fa0d 	bl	800d444 <CDC_Transmit_FS>
};
 800202a:	bf00      	nop
 800202c:	3708      	adds	r7, #8
 800202e:	46bd      	mov	sp, r7
 8002030:	bd80      	pop	{r7, pc}
	...

08002034 <setup>:
bool nextTX;
int message;
uint8_t message_length;

void setup()
{
 8002034:	b580      	push	{r7, lr}
 8002036:	af00      	add	r7, sp, #0
	if (bmp280_begin())
 8002038:	f000 f8d6 	bl	80021e8 <bmp280_begin>
 800203c:	4603      	mov	r3, r0
 800203e:	2b00      	cmp	r3, #0
 8002040:	d00c      	beq.n	800205c <setup+0x28>
	{
		bmp280_read_float(&bmp280, &temperature, &pressure);
 8002042:	4a0f      	ldr	r2, [pc, #60]	; (8002080 <setup+0x4c>)
 8002044:	490f      	ldr	r1, [pc, #60]	; (8002084 <setup+0x50>)
 8002046:	4810      	ldr	r0, [pc, #64]	; (8002088 <setup+0x54>)
 8002048:	f7ff ffae 	bl	8001fa8 <bmp280_read_float>
		HAL_GPIO_TogglePin(LEDA_GPIO_Port, LEDA_Pin);
 800204c:	2180      	movs	r1, #128	; 0x80
 800204e:	480f      	ldr	r0, [pc, #60]	; (800208c <setup+0x58>)
 8002050:	f001 fea9 	bl	8003da6 <HAL_GPIO_TogglePin>
		HAL_Delay(500);
 8002054:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002058:	f001 f80a 	bl	8003070 <HAL_Delay>
	}

	if (radio_begin())
 800205c:	f000 f910 	bl	8002280 <radio_begin>
 8002060:	4603      	mov	r3, r0
 8002062:	2b00      	cmp	r3, #0
 8002064:	d009      	beq.n	800207a <setup+0x46>
	{
		radio_procedure();	//starts radio loop, now radio wokrs dependend on DIO0 interrupt in ping-pong mode
 8002066:	f000 f87f 	bl	8002168 <radio_procedure>
		HAL_GPIO_TogglePin(LEDB_GPIO_Port, LEDB_Pin);
 800206a:	2140      	movs	r1, #64	; 0x40
 800206c:	4807      	ldr	r0, [pc, #28]	; (800208c <setup+0x58>)
 800206e:	f001 fe9a 	bl	8003da6 <HAL_GPIO_TogglePin>
		HAL_Delay(500);
 8002072:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002076:	f000 fffb 	bl	8003070 <HAL_Delay>
	}
}
 800207a:	bf00      	nop
 800207c:	bd80      	pop	{r7, pc}
 800207e:	bf00      	nop
 8002080:	200007ac 	.word	0x200007ac
 8002084:	200007a4 	.word	0x200007a4
 8002088:	200009ec 	.word	0x200009ec
 800208c:	40020800 	.word	0x40020800

08002090 <loop>:

void loop()
{
 8002090:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002092:	b083      	sub	sp, #12
 8002094:	af02      	add	r7, sp, #8
	if (bmp280_read_float(&bmp280, &temperature, &pressure))
 8002096:	4a29      	ldr	r2, [pc, #164]	; (800213c <loop+0xac>)
 8002098:	4929      	ldr	r1, [pc, #164]	; (8002140 <loop+0xb0>)
 800209a:	482a      	ldr	r0, [pc, #168]	; (8002144 <loop+0xb4>)
 800209c:	f7ff ff84 	bl	8001fa8 <bmp280_read_float>
 80020a0:	4603      	mov	r3, r0
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d018      	beq.n	80020d8 <loop+0x48>
	{
		sprintf(printBuffer, "Pressure: %.2f Pa, Temperature: %.2f C\r\n", pressure, temperature);
 80020a6:	4b25      	ldr	r3, [pc, #148]	; (800213c <loop+0xac>)
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	4618      	mov	r0, r3
 80020ac:	f7fe fa4c 	bl	8000548 <__aeabi_f2d>
 80020b0:	4605      	mov	r5, r0
 80020b2:	460e      	mov	r6, r1
 80020b4:	4b22      	ldr	r3, [pc, #136]	; (8002140 <loop+0xb0>)
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	4618      	mov	r0, r3
 80020ba:	f7fe fa45 	bl	8000548 <__aeabi_f2d>
 80020be:	4603      	mov	r3, r0
 80020c0:	460c      	mov	r4, r1
 80020c2:	e9cd 3400 	strd	r3, r4, [sp]
 80020c6:	462a      	mov	r2, r5
 80020c8:	4633      	mov	r3, r6
 80020ca:	491f      	ldr	r1, [pc, #124]	; (8002148 <loop+0xb8>)
 80020cc:	481f      	ldr	r0, [pc, #124]	; (800214c <loop+0xbc>)
 80020ce:	f00c fd4f 	bl	800eb70 <siprintf>
		print(printBuffer);
 80020d2:	481e      	ldr	r0, [pc, #120]	; (800214c <loop+0xbc>)
 80020d4:	f7ff ff9c 	bl	8002010 <print>
		//HAL_Delay(50);
	}
	if (radio.newPacket)
 80020d8:	4b1d      	ldr	r3, [pc, #116]	; (8002150 <loop+0xc0>)
 80020da:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d015      	beq.n	800210e <loop+0x7e>
	{
		sprintf(printBuffer, "Received (%d @ %d):\t%s\r\n", radio.rxLen, radio.rssi, radio.rxBuffer);
 80020e2:	4b1b      	ldr	r3, [pc, #108]	; (8002150 <loop+0xc0>)
 80020e4:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80020e8:	4619      	mov	r1, r3
 80020ea:	4b19      	ldr	r3, [pc, #100]	; (8002150 <loop+0xc0>)
 80020ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80020ee:	4b19      	ldr	r3, [pc, #100]	; (8002154 <loop+0xc4>)
 80020f0:	9300      	str	r3, [sp, #0]
 80020f2:	4613      	mov	r3, r2
 80020f4:	460a      	mov	r2, r1
 80020f6:	4918      	ldr	r1, [pc, #96]	; (8002158 <loop+0xc8>)
 80020f8:	4814      	ldr	r0, [pc, #80]	; (800214c <loop+0xbc>)
 80020fa:	f00c fd39 	bl	800eb70 <siprintf>
		print(printBuffer);
 80020fe:	4813      	ldr	r0, [pc, #76]	; (800214c <loop+0xbc>)
 8002100:	f7ff ff86 	bl	8002010 <print>
		radio.newPacket = false;
 8002104:	4b12      	ldr	r3, [pc, #72]	; (8002150 <loop+0xc0>)
 8002106:	2200      	movs	r2, #0
 8002108:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	{
		printf("Send: %s\r\n", sendBuffer);
		message += 1;
		radio.txDone = false;
	}
}
 800210c:	e011      	b.n	8002132 <loop+0xa2>
	else if (radio.txDone)
 800210e:	4b10      	ldr	r3, [pc, #64]	; (8002150 <loop+0xc0>)
 8002110:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002114:	2b00      	cmp	r3, #0
 8002116:	d00c      	beq.n	8002132 <loop+0xa2>
		printf("Send: %s\r\n", sendBuffer);
 8002118:	4910      	ldr	r1, [pc, #64]	; (800215c <loop+0xcc>)
 800211a:	4811      	ldr	r0, [pc, #68]	; (8002160 <loop+0xd0>)
 800211c:	f00c fcfa 	bl	800eb14 <iprintf>
		message += 1;
 8002120:	4b10      	ldr	r3, [pc, #64]	; (8002164 <loop+0xd4>)
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	3301      	adds	r3, #1
 8002126:	4a0f      	ldr	r2, [pc, #60]	; (8002164 <loop+0xd4>)
 8002128:	6013      	str	r3, [r2, #0]
		radio.txDone = false;
 800212a:	4b09      	ldr	r3, [pc, #36]	; (8002150 <loop+0xc0>)
 800212c:	2200      	movs	r2, #0
 800212e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
}
 8002132:	bf00      	nop
 8002134:	3704      	adds	r7, #4
 8002136:	46bd      	mov	sp, r7
 8002138:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800213a:	bf00      	nop
 800213c:	200007ac 	.word	0x200007ac
 8002140:	200007a4 	.word	0x200007a4
 8002144:	200009ec 	.word	0x200009ec
 8002148:	080120f0 	.word	0x080120f0
 800214c:	2000037c 	.word	0x2000037c
 8002150:	200007b0 	.word	0x200007b0
 8002154:	200007e5 	.word	0x200007e5
 8002158:	0801211c 	.word	0x0801211c
 800215c:	200008e8 	.word	0x200008e8
 8002160:	08012138 	.word	0x08012138
 8002164:	200007a8 	.word	0x200007a8

08002168 <radio_procedure>:

void radio_procedure()
{
 8002168:	b580      	push	{r7, lr}
 800216a:	af00      	add	r7, sp, #0
	if (nextTX)
 800216c:	4b16      	ldr	r3, [pc, #88]	; (80021c8 <radio_procedure+0x60>)
 800216e:	781b      	ldrb	r3, [r3, #0]
 8002170:	2b00      	cmp	r3, #0
 8002172:	d01e      	beq.n	80021b2 <radio_procedure+0x4a>
	{
		memset(sendBuffer, 0x00, SX1278_MAX_PACKET);
 8002174:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002178:	2100      	movs	r1, #0
 800217a:	4814      	ldr	r0, [pc, #80]	; (80021cc <radio_procedure+0x64>)
 800217c:	f00b fddb 	bl	800dd36 <memset>
		message_length = sprintf(sendBuffer, "Hello %d", message);
 8002180:	4b13      	ldr	r3, [pc, #76]	; (80021d0 <radio_procedure+0x68>)
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	461a      	mov	r2, r3
 8002186:	4913      	ldr	r1, [pc, #76]	; (80021d4 <radio_procedure+0x6c>)
 8002188:	4810      	ldr	r0, [pc, #64]	; (80021cc <radio_procedure+0x64>)
 800218a:	f00c fcf1 	bl	800eb70 <siprintf>
 800218e:	4603      	mov	r3, r0
 8002190:	b2da      	uxtb	r2, r3
 8002192:	4b11      	ldr	r3, [pc, #68]	; (80021d8 <radio_procedure+0x70>)
 8002194:	701a      	strb	r2, [r3, #0]
		SX1278_transmit(&radio, sendBuffer, message_length);
 8002196:	4b10      	ldr	r3, [pc, #64]	; (80021d8 <radio_procedure+0x70>)
 8002198:	781b      	ldrb	r3, [r3, #0]
 800219a:	461a      	mov	r2, r3
 800219c:	490b      	ldr	r1, [pc, #44]	; (80021cc <radio_procedure+0x64>)
 800219e:	480f      	ldr	r0, [pc, #60]	; (80021dc <radio_procedure+0x74>)
 80021a0:	f7ff f95d 	bl	800145e <SX1278_transmit>
		print("Sending...\n");
 80021a4:	480e      	ldr	r0, [pc, #56]	; (80021e0 <radio_procedure+0x78>)
 80021a6:	f7ff ff33 	bl	8002010 <print>
		nextTX = false;
 80021aa:	4b07      	ldr	r3, [pc, #28]	; (80021c8 <radio_procedure+0x60>)
 80021ac:	2200      	movs	r2, #0
 80021ae:	701a      	strb	r2, [r3, #0]
	{
		SX1278_receive(&radio);
		print("Receiving...\n");
		nextTX = true;
	}
}
 80021b0:	e008      	b.n	80021c4 <radio_procedure+0x5c>
		SX1278_receive(&radio);
 80021b2:	480a      	ldr	r0, [pc, #40]	; (80021dc <radio_procedure+0x74>)
 80021b4:	f7ff f98b 	bl	80014ce <SX1278_receive>
		print("Receiving...\n");
 80021b8:	480a      	ldr	r0, [pc, #40]	; (80021e4 <radio_procedure+0x7c>)
 80021ba:	f7ff ff29 	bl	8002010 <print>
		nextTX = true;
 80021be:	4b02      	ldr	r3, [pc, #8]	; (80021c8 <radio_procedure+0x60>)
 80021c0:	2201      	movs	r2, #1
 80021c2:	701a      	strb	r2, [r3, #0]
}
 80021c4:	bf00      	nop
 80021c6:	bd80      	pop	{r7, pc}
 80021c8:	200009e8 	.word	0x200009e8
 80021cc:	200008e8 	.word	0x200008e8
 80021d0:	200007a8 	.word	0x200007a8
 80021d4:	08012144 	.word	0x08012144
 80021d8:	200007a0 	.word	0x200007a0
 80021dc:	200007b0 	.word	0x200007b0
 80021e0:	08012150 	.word	0x08012150
 80021e4:	0801215c 	.word	0x0801215c

080021e8 <bmp280_begin>:

bool bmp280_begin()
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	af00      	add	r7, sp, #0
	bmp280.params = bmp280_default_config;
 80021ec:	4b16      	ldr	r3, [pc, #88]	; (8002248 <bmp280_begin+0x60>)
 80021ee:	4a17      	ldr	r2, [pc, #92]	; (800224c <bmp280_begin+0x64>)
 80021f0:	3307      	adds	r3, #7
 80021f2:	6810      	ldr	r0, [r2, #0]
 80021f4:	6018      	str	r0, [r3, #0]
 80021f6:	7912      	ldrb	r2, [r2, #4]
 80021f8:	711a      	strb	r2, [r3, #4]
	bmp280.addr = BMP280_I2C_ADDRESS_0;
 80021fa:	4b13      	ldr	r3, [pc, #76]	; (8002248 <bmp280_begin+0x60>)
 80021fc:	2276      	movs	r2, #118	; 0x76
 80021fe:	809a      	strh	r2, [r3, #4]
	bmp280.i2c = Get_I2C1_Instance();
 8002200:	f000 fb4c 	bl	800289c <Get_I2C1_Instance>
 8002204:	4602      	mov	r2, r0
 8002206:	4b10      	ldr	r3, [pc, #64]	; (8002248 <bmp280_begin+0x60>)
 8002208:	601a      	str	r2, [r3, #0]

	while (!bmp280_init(&bmp280, &bmp280.params)) {
 800220a:	bf00      	nop
 800220c:	4910      	ldr	r1, [pc, #64]	; (8002250 <bmp280_begin+0x68>)
 800220e:	480e      	ldr	r0, [pc, #56]	; (8002248 <bmp280_begin+0x60>)
 8002210:	f7ff fc23 	bl	8001a5a <bmp280_init>
 8002214:	4603      	mov	r3, r0
 8002216:	f083 0301 	eor.w	r3, r3, #1
 800221a:	b2db      	uxtb	r3, r3
 800221c:	2b00      	cmp	r3, #0
 800221e:	d00d      	beq.n	800223c <bmp280_begin+0x54>
		print("BMP280 initialization failed\n");
 8002220:	480c      	ldr	r0, [pc, #48]	; (8002254 <bmp280_begin+0x6c>)
 8002222:	f7ff fef5 	bl	8002010 <print>

		HAL_GPIO_TogglePin(LEDC_GPIO_Port, LEDC_Pin);
 8002226:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800222a:	480b      	ldr	r0, [pc, #44]	; (8002258 <bmp280_begin+0x70>)
 800222c:	f001 fdbb 	bl	8003da6 <HAL_GPIO_TogglePin>
		HAL_Delay(500);
 8002230:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002234:	f000 ff1c 	bl	8003070 <HAL_Delay>
		return false;
 8002238:	2300      	movs	r3, #0
 800223a:	e003      	b.n	8002244 <bmp280_begin+0x5c>
	}

	print("BMP280 found!\n");
 800223c:	4807      	ldr	r0, [pc, #28]	; (800225c <bmp280_begin+0x74>)
 800223e:	f7ff fee7 	bl	8002010 <print>
	return true;
 8002242:	2301      	movs	r3, #1
}
 8002244:	4618      	mov	r0, r3
 8002246:	bd80      	pop	{r7, pc}
 8002248:	200009ec 	.word	0x200009ec
 800224c:	20000000 	.word	0x20000000
 8002250:	200009f3 	.word	0x200009f3
 8002254:	0801216c 	.word	0x0801216c
 8002258:	40020400 	.word	0x40020400
 800225c:	0801218c 	.word	0x0801218c

08002260 <dio0_IRQ>:


void dio0_IRQ()
{
 8002260:	b580      	push	{r7, lr}
 8002262:	af00      	add	r7, sp, #0
	if (radio.pendingIRQ)
 8002264:	4b05      	ldr	r3, [pc, #20]	; (800227c <dio0_IRQ+0x1c>)
 8002266:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800226a:	2b00      	cmp	r3, #0
 800226c:	d004      	beq.n	8002278 <dio0_IRQ+0x18>
	{
		SX1278_dio0_IRQ(&radio);
 800226e:	4803      	ldr	r0, [pc, #12]	; (800227c <dio0_IRQ+0x1c>)
 8002270:	f7ff fa70 	bl	8001754 <SX1278_dio0_IRQ>
		radio_procedure();
 8002274:	f7ff ff78 	bl	8002168 <radio_procedure>
	}
}
 8002278:	bf00      	nop
 800227a:	bd80      	pop	{r7, pc}
 800227c:	200007b0 	.word	0x200007b0

08002280 <radio_begin>:

bool radio_begin()
{
 8002280:	b580      	push	{r7, lr}
 8002282:	af00      	add	r7, sp, #0
	radio.reset = LR_RESET_Pin;
 8002284:	4b1d      	ldr	r3, [pc, #116]	; (80022fc <radio_begin+0x7c>)
 8002286:	2220      	movs	r2, #32
 8002288:	81da      	strh	r2, [r3, #14]
	radio.dio0 = LR_DIO0_Pin;
 800228a:	4b1c      	ldr	r3, [pc, #112]	; (80022fc <radio_begin+0x7c>)
 800228c:	2240      	movs	r2, #64	; 0x40
 800228e:	821a      	strh	r2, [r3, #16]
	radio.nss = LR_NSS_Pin;
 8002290:	4b1a      	ldr	r3, [pc, #104]	; (80022fc <radio_begin+0x7c>)
 8002292:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002296:	825a      	strh	r2, [r3, #18]
	radio.reset_port = LR_RESET_GPIO_Port;
 8002298:	4b18      	ldr	r3, [pc, #96]	; (80022fc <radio_begin+0x7c>)
 800229a:	4a19      	ldr	r2, [pc, #100]	; (8002300 <radio_begin+0x80>)
 800229c:	615a      	str	r2, [r3, #20]
	radio.dio0_port = LR_DIO0_GPIO_Port;
 800229e:	4b17      	ldr	r3, [pc, #92]	; (80022fc <radio_begin+0x7c>)
 80022a0:	4a18      	ldr	r2, [pc, #96]	; (8002304 <radio_begin+0x84>)
 80022a2:	619a      	str	r2, [r3, #24]
	radio.nss_port = LR_NSS_GPIO_Port;
 80022a4:	4b15      	ldr	r3, [pc, #84]	; (80022fc <radio_begin+0x7c>)
 80022a6:	4a18      	ldr	r2, [pc, #96]	; (8002308 <radio_begin+0x88>)
 80022a8:	61da      	str	r2, [r3, #28]
	radio.spi = Get_SPI1_Instance();
 80022aa:	f000 fb01 	bl	80028b0 <Get_SPI1_Instance>
 80022ae:	4602      	mov	r2, r0
 80022b0:	4b12      	ldr	r3, [pc, #72]	; (80022fc <radio_begin+0x7c>)
 80022b2:	621a      	str	r2, [r3, #32]

	radio.config = sx1278_default_config;
 80022b4:	4b11      	ldr	r3, [pc, #68]	; (80022fc <radio_begin+0x7c>)
 80022b6:	4a15      	ldr	r2, [pc, #84]	; (800230c <radio_begin+0x8c>)
 80022b8:	ca07      	ldmia	r2, {r0, r1, r2}
 80022ba:	e883 0007 	stmia.w	r3, {r0, r1, r2}

	radio.useDio0IRQ = true;
 80022be:	4b0f      	ldr	r3, [pc, #60]	; (80022fc <radio_begin+0x7c>)
 80022c0:	2201      	movs	r2, #1
 80022c2:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

	while (!SX1278_init(&radio))
 80022c6:	bf00      	nop
 80022c8:	480c      	ldr	r0, [pc, #48]	; (80022fc <radio_begin+0x7c>)
 80022ca:	f7fe ffb6 	bl	800123a <SX1278_init>
 80022ce:	4603      	mov	r3, r0
 80022d0:	f083 0301 	eor.w	r3, r3, #1
 80022d4:	b2db      	uxtb	r3, r3
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d00d      	beq.n	80022f6 <radio_begin+0x76>
	{
		print("SX1278 initialization failed\n");
 80022da:	480d      	ldr	r0, [pc, #52]	; (8002310 <radio_begin+0x90>)
 80022dc:	f7ff fe98 	bl	8002010 <print>

		HAL_GPIO_TogglePin(LEDC_GPIO_Port, LEDC_Pin);
 80022e0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80022e4:	4808      	ldr	r0, [pc, #32]	; (8002308 <radio_begin+0x88>)
 80022e6:	f001 fd5e 	bl	8003da6 <HAL_GPIO_TogglePin>
		HAL_Delay(500);
 80022ea:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80022ee:	f000 febf 	bl	8003070 <HAL_Delay>

		return false;
 80022f2:	2300      	movs	r3, #0
 80022f4:	e000      	b.n	80022f8 <radio_begin+0x78>
	}

	return true;
 80022f6:	2301      	movs	r3, #1
}
 80022f8:	4618      	mov	r0, r3
 80022fa:	bd80      	pop	{r7, pc}
 80022fc:	200007b0 	.word	0x200007b0
 8002300:	40020800 	.word	0x40020800
 8002304:	40020000 	.word	0x40020000
 8002308:	40020400 	.word	0x40020400
 800230c:	20000008 	.word	0x20000008
 8002310:	0801219c 	.word	0x0801219c

08002314 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002314:	b580      	push	{r7, lr}
 8002316:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002318:	f000 fe38 	bl	8002f8c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800231c:	f000 f818 	bl	8002350 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002320:	f000 f9c8 	bl	80026b4 <MX_GPIO_Init>
  MX_DMA_Init();
 8002324:	f000 f99e 	bl	8002664 <MX_DMA_Init>
  MX_SDIO_SD_Init();
 8002328:	f000 f91c 	bl	8002564 <MX_SDIO_SD_Init>
  MX_FATFS_Init();
 800232c:	f009 f948 	bl	800b5c0 <MX_FATFS_Init>
  MX_I2C1_Init();
 8002330:	f000 f890 	bl	8002454 <MX_I2C1_Init>
  MX_USB_DEVICE_Init();
 8002334:	f00a ff90 	bl	800d258 <MX_USB_DEVICE_Init>
  MX_SPI1_Init();
 8002338:	f000 f934 	bl	80025a4 <MX_SPI1_Init>
  MX_USART3_UART_Init();
 800233c:	f000 f968 	bl	8002610 <MX_USART3_UART_Init>
  MX_RTC_Init();
 8002340:	f000 f8b6 	bl	80024b0 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */
  setup();
 8002344:	f7ff fe76 	bl	8002034 <setup>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	loop();
 8002348:	f7ff fea2 	bl	8002090 <loop>
 800234c:	e7fc      	b.n	8002348 <main+0x34>
	...

08002350 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002350:	b580      	push	{r7, lr}
 8002352:	b098      	sub	sp, #96	; 0x60
 8002354:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002356:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800235a:	2230      	movs	r2, #48	; 0x30
 800235c:	2100      	movs	r1, #0
 800235e:	4618      	mov	r0, r3
 8002360:	f00b fce9 	bl	800dd36 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002364:	f107 031c 	add.w	r3, r7, #28
 8002368:	2200      	movs	r2, #0
 800236a:	601a      	str	r2, [r3, #0]
 800236c:	605a      	str	r2, [r3, #4]
 800236e:	609a      	str	r2, [r3, #8]
 8002370:	60da      	str	r2, [r3, #12]
 8002372:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002374:	f107 030c 	add.w	r3, r7, #12
 8002378:	2200      	movs	r2, #0
 800237a:	601a      	str	r2, [r3, #0]
 800237c:	605a      	str	r2, [r3, #4]
 800237e:	609a      	str	r2, [r3, #8]
 8002380:	60da      	str	r2, [r3, #12]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002382:	2300      	movs	r3, #0
 8002384:	60bb      	str	r3, [r7, #8]
 8002386:	4b31      	ldr	r3, [pc, #196]	; (800244c <SystemClock_Config+0xfc>)
 8002388:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800238a:	4a30      	ldr	r2, [pc, #192]	; (800244c <SystemClock_Config+0xfc>)
 800238c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002390:	6413      	str	r3, [r2, #64]	; 0x40
 8002392:	4b2e      	ldr	r3, [pc, #184]	; (800244c <SystemClock_Config+0xfc>)
 8002394:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002396:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800239a:	60bb      	str	r3, [r7, #8]
 800239c:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800239e:	2300      	movs	r3, #0
 80023a0:	607b      	str	r3, [r7, #4]
 80023a2:	4b2b      	ldr	r3, [pc, #172]	; (8002450 <SystemClock_Config+0x100>)
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	4a2a      	ldr	r2, [pc, #168]	; (8002450 <SystemClock_Config+0x100>)
 80023a8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80023ac:	6013      	str	r3, [r2, #0]
 80023ae:	4b28      	ldr	r3, [pc, #160]	; (8002450 <SystemClock_Config+0x100>)
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80023b6:	607b      	str	r3, [r7, #4]
 80023b8:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 80023ba:	2305      	movs	r3, #5
 80023bc:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80023be:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80023c2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80023c4:	2301      	movs	r3, #1
 80023c6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80023c8:	2302      	movs	r3, #2
 80023ca:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80023cc:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80023d0:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 6;
 80023d2:	2306      	movs	r3, #6
 80023d4:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 168;
 80023d6:	23a8      	movs	r3, #168	; 0xa8
 80023d8:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80023da:	2302      	movs	r3, #2
 80023dc:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80023de:	2307      	movs	r3, #7
 80023e0:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80023e2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80023e6:	4618      	mov	r0, r3
 80023e8:	f003 fe4a 	bl	8006080 <HAL_RCC_OscConfig>
 80023ec:	4603      	mov	r3, r0
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d001      	beq.n	80023f6 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80023f2:	f000 fa75 	bl	80028e0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80023f6:	230f      	movs	r3, #15
 80023f8:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80023fa:	2302      	movs	r3, #2
 80023fc:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80023fe:	2300      	movs	r3, #0
 8002400:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002402:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002406:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002408:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800240c:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800240e:	f107 031c 	add.w	r3, r7, #28
 8002412:	2105      	movs	r1, #5
 8002414:	4618      	mov	r0, r3
 8002416:	f004 f8a3 	bl	8006560 <HAL_RCC_ClockConfig>
 800241a:	4603      	mov	r3, r0
 800241c:	2b00      	cmp	r3, #0
 800241e:	d001      	beq.n	8002424 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8002420:	f000 fa5e 	bl	80028e0 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8002424:	2302      	movs	r3, #2
 8002426:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8002428:	f44f 7380 	mov.w	r3, #256	; 0x100
 800242c:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800242e:	f107 030c 	add.w	r3, r7, #12
 8002432:	4618      	mov	r0, r3
 8002434:	f004 fa60 	bl	80068f8 <HAL_RCCEx_PeriphCLKConfig>
 8002438:	4603      	mov	r3, r0
 800243a:	2b00      	cmp	r3, #0
 800243c:	d001      	beq.n	8002442 <SystemClock_Config+0xf2>
  {
    Error_Handler();
 800243e:	f000 fa4f 	bl	80028e0 <Error_Handler>
  }
}
 8002442:	bf00      	nop
 8002444:	3760      	adds	r7, #96	; 0x60
 8002446:	46bd      	mov	sp, r7
 8002448:	bd80      	pop	{r7, pc}
 800244a:	bf00      	nop
 800244c:	40023800 	.word	0x40023800
 8002450:	40007000 	.word	0x40007000

08002454 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002454:	b580      	push	{r7, lr}
 8002456:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002458:	4b12      	ldr	r3, [pc, #72]	; (80024a4 <MX_I2C1_Init+0x50>)
 800245a:	4a13      	ldr	r2, [pc, #76]	; (80024a8 <MX_I2C1_Init+0x54>)
 800245c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800245e:	4b11      	ldr	r3, [pc, #68]	; (80024a4 <MX_I2C1_Init+0x50>)
 8002460:	4a12      	ldr	r2, [pc, #72]	; (80024ac <MX_I2C1_Init+0x58>)
 8002462:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002464:	4b0f      	ldr	r3, [pc, #60]	; (80024a4 <MX_I2C1_Init+0x50>)
 8002466:	2200      	movs	r2, #0
 8002468:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800246a:	4b0e      	ldr	r3, [pc, #56]	; (80024a4 <MX_I2C1_Init+0x50>)
 800246c:	2200      	movs	r2, #0
 800246e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002470:	4b0c      	ldr	r3, [pc, #48]	; (80024a4 <MX_I2C1_Init+0x50>)
 8002472:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002476:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002478:	4b0a      	ldr	r3, [pc, #40]	; (80024a4 <MX_I2C1_Init+0x50>)
 800247a:	2200      	movs	r2, #0
 800247c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800247e:	4b09      	ldr	r3, [pc, #36]	; (80024a4 <MX_I2C1_Init+0x50>)
 8002480:	2200      	movs	r2, #0
 8002482:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002484:	4b07      	ldr	r3, [pc, #28]	; (80024a4 <MX_I2C1_Init+0x50>)
 8002486:	2200      	movs	r2, #0
 8002488:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800248a:	4b06      	ldr	r3, [pc, #24]	; (80024a4 <MX_I2C1_Init+0x50>)
 800248c:	2200      	movs	r2, #0
 800248e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002490:	4804      	ldr	r0, [pc, #16]	; (80024a4 <MX_I2C1_Init+0x50>)
 8002492:	f001 fcbb 	bl	8003e0c <HAL_I2C_Init>
 8002496:	4603      	mov	r3, r0
 8002498:	2b00      	cmp	r3, #0
 800249a:	d001      	beq.n	80024a0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800249c:	f000 fa20 	bl	80028e0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80024a0:	bf00      	nop
 80024a2:	bd80      	pop	{r7, pc}
 80024a4:	20000ab0 	.word	0x20000ab0
 80024a8:	40005400 	.word	0x40005400
 80024ac:	000186a0 	.word	0x000186a0

080024b0 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80024b0:	b580      	push	{r7, lr}
 80024b2:	b086      	sub	sp, #24
 80024b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80024b6:	1d3b      	adds	r3, r7, #4
 80024b8:	2200      	movs	r2, #0
 80024ba:	601a      	str	r2, [r3, #0]
 80024bc:	605a      	str	r2, [r3, #4]
 80024be:	609a      	str	r2, [r3, #8]
 80024c0:	60da      	str	r2, [r3, #12]
 80024c2:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 80024c4:	2300      	movs	r3, #0
 80024c6:	603b      	str	r3, [r7, #0]
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only 
  */
  hrtc.Instance = RTC;
 80024c8:	4b24      	ldr	r3, [pc, #144]	; (800255c <MX_RTC_Init+0xac>)
 80024ca:	4a25      	ldr	r2, [pc, #148]	; (8002560 <MX_RTC_Init+0xb0>)
 80024cc:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80024ce:	4b23      	ldr	r3, [pc, #140]	; (800255c <MX_RTC_Init+0xac>)
 80024d0:	2200      	movs	r2, #0
 80024d2:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80024d4:	4b21      	ldr	r3, [pc, #132]	; (800255c <MX_RTC_Init+0xac>)
 80024d6:	227f      	movs	r2, #127	; 0x7f
 80024d8:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80024da:	4b20      	ldr	r3, [pc, #128]	; (800255c <MX_RTC_Init+0xac>)
 80024dc:	22ff      	movs	r2, #255	; 0xff
 80024de:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80024e0:	4b1e      	ldr	r3, [pc, #120]	; (800255c <MX_RTC_Init+0xac>)
 80024e2:	2200      	movs	r2, #0
 80024e4:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80024e6:	4b1d      	ldr	r3, [pc, #116]	; (800255c <MX_RTC_Init+0xac>)
 80024e8:	2200      	movs	r2, #0
 80024ea:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80024ec:	4b1b      	ldr	r3, [pc, #108]	; (800255c <MX_RTC_Init+0xac>)
 80024ee:	2200      	movs	r2, #0
 80024f0:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80024f2:	481a      	ldr	r0, [pc, #104]	; (800255c <MX_RTC_Init+0xac>)
 80024f4:	f004 fae2 	bl	8006abc <HAL_RTC_Init>
 80024f8:	4603      	mov	r3, r0
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d001      	beq.n	8002502 <MX_RTC_Init+0x52>
  {
    Error_Handler();
 80024fe:	f000 f9ef 	bl	80028e0 <Error_Handler>
    
  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date 
  */
  sTime.Hours = 0;
 8002502:	2300      	movs	r3, #0
 8002504:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0;
 8002506:	2300      	movs	r3, #0
 8002508:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0;
 800250a:	2300      	movs	r3, #0
 800250c:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800250e:	2300      	movs	r3, #0
 8002510:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8002512:	2300      	movs	r3, #0
 8002514:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8002516:	1d3b      	adds	r3, r7, #4
 8002518:	2200      	movs	r2, #0
 800251a:	4619      	mov	r1, r3
 800251c:	480f      	ldr	r0, [pc, #60]	; (800255c <MX_RTC_Init+0xac>)
 800251e:	f004 fb5e 	bl	8006bde <HAL_RTC_SetTime>
 8002522:	4603      	mov	r3, r0
 8002524:	2b00      	cmp	r3, #0
 8002526:	d001      	beq.n	800252c <MX_RTC_Init+0x7c>
  {
    Error_Handler();
 8002528:	f000 f9da 	bl	80028e0 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 800252c:	2301      	movs	r3, #1
 800252e:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8002530:	2301      	movs	r3, #1
 8002532:	707b      	strb	r3, [r7, #1]
  sDate.Date = 1;
 8002534:	2301      	movs	r3, #1
 8002536:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 20;
 8002538:	2314      	movs	r3, #20
 800253a:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 800253c:	463b      	mov	r3, r7
 800253e:	2200      	movs	r2, #0
 8002540:	4619      	mov	r1, r3
 8002542:	4806      	ldr	r0, [pc, #24]	; (800255c <MX_RTC_Init+0xac>)
 8002544:	f004 fc08 	bl	8006d58 <HAL_RTC_SetDate>
 8002548:	4603      	mov	r3, r0
 800254a:	2b00      	cmp	r3, #0
 800254c:	d001      	beq.n	8002552 <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 800254e:	f000 f9c7 	bl	80028e0 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8002552:	bf00      	nop
 8002554:	3718      	adds	r7, #24
 8002556:	46bd      	mov	sp, r7
 8002558:	bd80      	pop	{r7, pc}
 800255a:	bf00      	nop
 800255c:	20000b04 	.word	0x20000b04
 8002560:	40002800 	.word	0x40002800

08002564 <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 8002564:	b480      	push	{r7}
 8002566:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 8002568:	4b0c      	ldr	r3, [pc, #48]	; (800259c <MX_SDIO_SD_Init+0x38>)
 800256a:	4a0d      	ldr	r2, [pc, #52]	; (80025a0 <MX_SDIO_SD_Init+0x3c>)
 800256c:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 800256e:	4b0b      	ldr	r3, [pc, #44]	; (800259c <MX_SDIO_SD_Init+0x38>)
 8002570:	2200      	movs	r2, #0
 8002572:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8002574:	4b09      	ldr	r3, [pc, #36]	; (800259c <MX_SDIO_SD_Init+0x38>)
 8002576:	2200      	movs	r2, #0
 8002578:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 800257a:	4b08      	ldr	r3, [pc, #32]	; (800259c <MX_SDIO_SD_Init+0x38>)
 800257c:	2200      	movs	r2, #0
 800257e:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 8002580:	4b06      	ldr	r3, [pc, #24]	; (800259c <MX_SDIO_SD_Init+0x38>)
 8002582:	2200      	movs	r2, #0
 8002584:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8002586:	4b05      	ldr	r3, [pc, #20]	; (800259c <MX_SDIO_SD_Init+0x38>)
 8002588:	2200      	movs	r2, #0
 800258a:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 0;
 800258c:	4b03      	ldr	r3, [pc, #12]	; (800259c <MX_SDIO_SD_Init+0x38>)
 800258e:	2200      	movs	r2, #0
 8002590:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 8002592:	bf00      	nop
 8002594:	46bd      	mov	sp, r7
 8002596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800259a:	4770      	bx	lr
 800259c:	20000b84 	.word	0x20000b84
 80025a0:	40012c00 	.word	0x40012c00

080025a4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80025a4:	b580      	push	{r7, lr}
 80025a6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80025a8:	4b17      	ldr	r3, [pc, #92]	; (8002608 <MX_SPI1_Init+0x64>)
 80025aa:	4a18      	ldr	r2, [pc, #96]	; (800260c <MX_SPI1_Init+0x68>)
 80025ac:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80025ae:	4b16      	ldr	r3, [pc, #88]	; (8002608 <MX_SPI1_Init+0x64>)
 80025b0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80025b4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80025b6:	4b14      	ldr	r3, [pc, #80]	; (8002608 <MX_SPI1_Init+0x64>)
 80025b8:	2200      	movs	r2, #0
 80025ba:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80025bc:	4b12      	ldr	r3, [pc, #72]	; (8002608 <MX_SPI1_Init+0x64>)
 80025be:	2200      	movs	r2, #0
 80025c0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80025c2:	4b11      	ldr	r3, [pc, #68]	; (8002608 <MX_SPI1_Init+0x64>)
 80025c4:	2200      	movs	r2, #0
 80025c6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80025c8:	4b0f      	ldr	r3, [pc, #60]	; (8002608 <MX_SPI1_Init+0x64>)
 80025ca:	2200      	movs	r2, #0
 80025cc:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80025ce:	4b0e      	ldr	r3, [pc, #56]	; (8002608 <MX_SPI1_Init+0x64>)
 80025d0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80025d4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80025d6:	4b0c      	ldr	r3, [pc, #48]	; (8002608 <MX_SPI1_Init+0x64>)
 80025d8:	2200      	movs	r2, #0
 80025da:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80025dc:	4b0a      	ldr	r3, [pc, #40]	; (8002608 <MX_SPI1_Init+0x64>)
 80025de:	2200      	movs	r2, #0
 80025e0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80025e2:	4b09      	ldr	r3, [pc, #36]	; (8002608 <MX_SPI1_Init+0x64>)
 80025e4:	2200      	movs	r2, #0
 80025e6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80025e8:	4b07      	ldr	r3, [pc, #28]	; (8002608 <MX_SPI1_Init+0x64>)
 80025ea:	2200      	movs	r2, #0
 80025ec:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80025ee:	4b06      	ldr	r3, [pc, #24]	; (8002608 <MX_SPI1_Init+0x64>)
 80025f0:	220a      	movs	r2, #10
 80025f2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80025f4:	4804      	ldr	r0, [pc, #16]	; (8002608 <MX_SPI1_Init+0x64>)
 80025f6:	f005 ffe5 	bl	80085c4 <HAL_SPI_Init>
 80025fa:	4603      	mov	r3, r0
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d001      	beq.n	8002604 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8002600:	f000 f96e 	bl	80028e0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002604:	bf00      	nop
 8002606:	bd80      	pop	{r7, pc}
 8002608:	20000c08 	.word	0x20000c08
 800260c:	40013000 	.word	0x40013000

08002610 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8002610:	b580      	push	{r7, lr}
 8002612:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002614:	4b11      	ldr	r3, [pc, #68]	; (800265c <MX_USART3_UART_Init+0x4c>)
 8002616:	4a12      	ldr	r2, [pc, #72]	; (8002660 <MX_USART3_UART_Init+0x50>)
 8002618:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800261a:	4b10      	ldr	r3, [pc, #64]	; (800265c <MX_USART3_UART_Init+0x4c>)
 800261c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002620:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002622:	4b0e      	ldr	r3, [pc, #56]	; (800265c <MX_USART3_UART_Init+0x4c>)
 8002624:	2200      	movs	r2, #0
 8002626:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002628:	4b0c      	ldr	r3, [pc, #48]	; (800265c <MX_USART3_UART_Init+0x4c>)
 800262a:	2200      	movs	r2, #0
 800262c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800262e:	4b0b      	ldr	r3, [pc, #44]	; (800265c <MX_USART3_UART_Init+0x4c>)
 8002630:	2200      	movs	r2, #0
 8002632:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002634:	4b09      	ldr	r3, [pc, #36]	; (800265c <MX_USART3_UART_Init+0x4c>)
 8002636:	220c      	movs	r2, #12
 8002638:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800263a:	4b08      	ldr	r3, [pc, #32]	; (800265c <MX_USART3_UART_Init+0x4c>)
 800263c:	2200      	movs	r2, #0
 800263e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002640:	4b06      	ldr	r3, [pc, #24]	; (800265c <MX_USART3_UART_Init+0x4c>)
 8002642:	2200      	movs	r2, #0
 8002644:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002646:	4805      	ldr	r0, [pc, #20]	; (800265c <MX_USART3_UART_Init+0x4c>)
 8002648:	f006 fbb0 	bl	8008dac <HAL_UART_Init>
 800264c:	4603      	mov	r3, r0
 800264e:	2b00      	cmp	r3, #0
 8002650:	d001      	beq.n	8002656 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8002652:	f000 f945 	bl	80028e0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002656:	bf00      	nop
 8002658:	bd80      	pop	{r7, pc}
 800265a:	bf00      	nop
 800265c:	20000a70 	.word	0x20000a70
 8002660:	40004800 	.word	0x40004800

08002664 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 8002664:	b580      	push	{r7, lr}
 8002666:	b082      	sub	sp, #8
 8002668:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800266a:	2300      	movs	r3, #0
 800266c:	607b      	str	r3, [r7, #4]
 800266e:	4b10      	ldr	r3, [pc, #64]	; (80026b0 <MX_DMA_Init+0x4c>)
 8002670:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002672:	4a0f      	ldr	r2, [pc, #60]	; (80026b0 <MX_DMA_Init+0x4c>)
 8002674:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002678:	6313      	str	r3, [r2, #48]	; 0x30
 800267a:	4b0d      	ldr	r3, [pc, #52]	; (80026b0 <MX_DMA_Init+0x4c>)
 800267c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800267e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002682:	607b      	str	r3, [r7, #4]
 8002684:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 8002686:	2200      	movs	r2, #0
 8002688:	2100      	movs	r1, #0
 800268a:	203b      	movs	r0, #59	; 0x3b
 800268c:	f000 fded 	bl	800326a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8002690:	203b      	movs	r0, #59	; 0x3b
 8002692:	f000 fe06 	bl	80032a2 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 8002696:	2200      	movs	r2, #0
 8002698:	2100      	movs	r1, #0
 800269a:	2045      	movs	r0, #69	; 0x45
 800269c:	f000 fde5 	bl	800326a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 80026a0:	2045      	movs	r0, #69	; 0x45
 80026a2:	f000 fdfe 	bl	80032a2 <HAL_NVIC_EnableIRQ>

}
 80026a6:	bf00      	nop
 80026a8:	3708      	adds	r7, #8
 80026aa:	46bd      	mov	sp, r7
 80026ac:	bd80      	pop	{r7, pc}
 80026ae:	bf00      	nop
 80026b0:	40023800 	.word	0x40023800

080026b4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80026b4:	b580      	push	{r7, lr}
 80026b6:	b08a      	sub	sp, #40	; 0x28
 80026b8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026ba:	f107 0314 	add.w	r3, r7, #20
 80026be:	2200      	movs	r2, #0
 80026c0:	601a      	str	r2, [r3, #0]
 80026c2:	605a      	str	r2, [r3, #4]
 80026c4:	609a      	str	r2, [r3, #8]
 80026c6:	60da      	str	r2, [r3, #12]
 80026c8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80026ca:	2300      	movs	r3, #0
 80026cc:	613b      	str	r3, [r7, #16]
 80026ce:	4b6e      	ldr	r3, [pc, #440]	; (8002888 <MX_GPIO_Init+0x1d4>)
 80026d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026d2:	4a6d      	ldr	r2, [pc, #436]	; (8002888 <MX_GPIO_Init+0x1d4>)
 80026d4:	f043 0304 	orr.w	r3, r3, #4
 80026d8:	6313      	str	r3, [r2, #48]	; 0x30
 80026da:	4b6b      	ldr	r3, [pc, #428]	; (8002888 <MX_GPIO_Init+0x1d4>)
 80026dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026de:	f003 0304 	and.w	r3, r3, #4
 80026e2:	613b      	str	r3, [r7, #16]
 80026e4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80026e6:	2300      	movs	r3, #0
 80026e8:	60fb      	str	r3, [r7, #12]
 80026ea:	4b67      	ldr	r3, [pc, #412]	; (8002888 <MX_GPIO_Init+0x1d4>)
 80026ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026ee:	4a66      	ldr	r2, [pc, #408]	; (8002888 <MX_GPIO_Init+0x1d4>)
 80026f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80026f4:	6313      	str	r3, [r2, #48]	; 0x30
 80026f6:	4b64      	ldr	r3, [pc, #400]	; (8002888 <MX_GPIO_Init+0x1d4>)
 80026f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026fe:	60fb      	str	r3, [r7, #12]
 8002700:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002702:	2300      	movs	r3, #0
 8002704:	60bb      	str	r3, [r7, #8]
 8002706:	4b60      	ldr	r3, [pc, #384]	; (8002888 <MX_GPIO_Init+0x1d4>)
 8002708:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800270a:	4a5f      	ldr	r2, [pc, #380]	; (8002888 <MX_GPIO_Init+0x1d4>)
 800270c:	f043 0301 	orr.w	r3, r3, #1
 8002710:	6313      	str	r3, [r2, #48]	; 0x30
 8002712:	4b5d      	ldr	r3, [pc, #372]	; (8002888 <MX_GPIO_Init+0x1d4>)
 8002714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002716:	f003 0301 	and.w	r3, r3, #1
 800271a:	60bb      	str	r3, [r7, #8]
 800271c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800271e:	2300      	movs	r3, #0
 8002720:	607b      	str	r3, [r7, #4]
 8002722:	4b59      	ldr	r3, [pc, #356]	; (8002888 <MX_GPIO_Init+0x1d4>)
 8002724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002726:	4a58      	ldr	r2, [pc, #352]	; (8002888 <MX_GPIO_Init+0x1d4>)
 8002728:	f043 0302 	orr.w	r3, r3, #2
 800272c:	6313      	str	r3, [r2, #48]	; 0x30
 800272e:	4b56      	ldr	r3, [pc, #344]	; (8002888 <MX_GPIO_Init+0x1d4>)
 8002730:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002732:	f003 0302 	and.w	r3, r3, #2
 8002736:	607b      	str	r3, [r7, #4]
 8002738:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800273a:	2300      	movs	r3, #0
 800273c:	603b      	str	r3, [r7, #0]
 800273e:	4b52      	ldr	r3, [pc, #328]	; (8002888 <MX_GPIO_Init+0x1d4>)
 8002740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002742:	4a51      	ldr	r2, [pc, #324]	; (8002888 <MX_GPIO_Init+0x1d4>)
 8002744:	f043 0308 	orr.w	r3, r3, #8
 8002748:	6313      	str	r3, [r2, #48]	; 0x30
 800274a:	4b4f      	ldr	r3, [pc, #316]	; (8002888 <MX_GPIO_Init+0x1d4>)
 800274c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800274e:	f003 0308 	and.w	r3, r3, #8
 8002752:	603b      	str	r3, [r7, #0]
 8002754:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, P1_Pin|P4_Pin|P2_Pin|P5_Pin 
 8002756:	2200      	movs	r2, #0
 8002758:	21ef      	movs	r1, #239	; 0xef
 800275a:	484c      	ldr	r0, [pc, #304]	; (800288c <MX_GPIO_Init+0x1d8>)
 800275c:	f001 fb0a 	bl	8003d74 <HAL_GPIO_WritePin>
                          |LR_RESET_Pin|LEDB_Pin|LEDA_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, PH_L_Pin|EN_L_Pin|PH_R_Pin|EN_R_Pin 
 8002760:	2200      	movs	r2, #0
 8002762:	211f      	movs	r1, #31
 8002764:	484a      	ldr	r0, [pc, #296]	; (8002890 <MX_GPIO_Init+0x1dc>)
 8002766:	f001 fb05 	bl	8003d74 <HAL_GPIO_WritePin>
                          |P7_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, P6_Pin|P3_Pin|LEDD_Pin|LEDC_Pin 
 800276a:	2200      	movs	r2, #0
 800276c:	f243 2103 	movw	r1, #12803	; 0x3203
 8002770:	4848      	ldr	r0, [pc, #288]	; (8002894 <MX_GPIO_Init+0x1e0>)
 8002772:	f001 faff 	bl	8003d74 <HAL_GPIO_WritePin>
                          |LR_NSS_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : P1_Pin P4_Pin P2_Pin P5_Pin 
                           LR_RESET_Pin */
  GPIO_InitStruct.Pin = P1_Pin|P4_Pin|P2_Pin|P5_Pin 
 8002776:	232f      	movs	r3, #47	; 0x2f
 8002778:	617b      	str	r3, [r7, #20]
                          |LR_RESET_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800277a:	2301      	movs	r3, #1
 800277c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800277e:	2300      	movs	r3, #0
 8002780:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002782:	2300      	movs	r3, #0
 8002784:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002786:	f107 0314 	add.w	r3, r7, #20
 800278a:	4619      	mov	r1, r3
 800278c:	483f      	ldr	r0, [pc, #252]	; (800288c <MX_GPIO_Init+0x1d8>)
 800278e:	f001 f93f 	bl	8003a10 <HAL_GPIO_Init>

  /*Configure GPIO pins : PH_L_Pin EN_L_Pin PH_R_Pin EN_R_Pin */
  GPIO_InitStruct.Pin = PH_L_Pin|EN_L_Pin|PH_R_Pin|EN_R_Pin;
 8002792:	230f      	movs	r3, #15
 8002794:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002796:	2301      	movs	r3, #1
 8002798:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800279a:	2302      	movs	r3, #2
 800279c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800279e:	2300      	movs	r3, #0
 80027a0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027a2:	f107 0314 	add.w	r3, r7, #20
 80027a6:	4619      	mov	r1, r3
 80027a8:	4839      	ldr	r0, [pc, #228]	; (8002890 <MX_GPIO_Init+0x1dc>)
 80027aa:	f001 f931 	bl	8003a10 <HAL_GPIO_Init>

  /*Configure GPIO pin : P7_Pin */
  GPIO_InitStruct.Pin = P7_Pin;
 80027ae:	2310      	movs	r3, #16
 80027b0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80027b2:	2301      	movs	r3, #1
 80027b4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027b6:	2300      	movs	r3, #0
 80027b8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027ba:	2300      	movs	r3, #0
 80027bc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(P7_GPIO_Port, &GPIO_InitStruct);
 80027be:	f107 0314 	add.w	r3, r7, #20
 80027c2:	4619      	mov	r1, r3
 80027c4:	4832      	ldr	r0, [pc, #200]	; (8002890 <MX_GPIO_Init+0x1dc>)
 80027c6:	f001 f923 	bl	8003a10 <HAL_GPIO_Init>

  /*Configure GPIO pin : LR_DIO0_Pin */
  GPIO_InitStruct.Pin = LR_DIO0_Pin;
 80027ca:	2340      	movs	r3, #64	; 0x40
 80027cc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80027ce:	4b32      	ldr	r3, [pc, #200]	; (8002898 <MX_GPIO_Init+0x1e4>)
 80027d0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80027d2:	2302      	movs	r3, #2
 80027d4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LR_DIO0_GPIO_Port, &GPIO_InitStruct);
 80027d6:	f107 0314 	add.w	r3, r7, #20
 80027da:	4619      	mov	r1, r3
 80027dc:	482c      	ldr	r0, [pc, #176]	; (8002890 <MX_GPIO_Init+0x1dc>)
 80027de:	f001 f917 	bl	8003a10 <HAL_GPIO_Init>

  /*Configure GPIO pins : P6_Pin P3_Pin LR_NSS_Pin */
  GPIO_InitStruct.Pin = P6_Pin|P3_Pin|LR_NSS_Pin;
 80027e2:	f240 2303 	movw	r3, #515	; 0x203
 80027e6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80027e8:	2301      	movs	r3, #1
 80027ea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027ec:	2300      	movs	r3, #0
 80027ee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027f0:	2300      	movs	r3, #0
 80027f2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80027f4:	f107 0314 	add.w	r3, r7, #20
 80027f8:	4619      	mov	r1, r3
 80027fa:	4826      	ldr	r0, [pc, #152]	; (8002894 <MX_GPIO_Init+0x1e0>)
 80027fc:	f001 f908 	bl	8003a10 <HAL_GPIO_Init>

  /*Configure GPIO pins : LEDD_Pin LEDC_Pin */
  GPIO_InitStruct.Pin = LEDD_Pin|LEDC_Pin;
 8002800:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8002804:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002806:	2301      	movs	r3, #1
 8002808:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800280a:	2302      	movs	r3, #2
 800280c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800280e:	2300      	movs	r3, #0
 8002810:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002812:	f107 0314 	add.w	r3, r7, #20
 8002816:	4619      	mov	r1, r3
 8002818:	481e      	ldr	r0, [pc, #120]	; (8002894 <MX_GPIO_Init+0x1e0>)
 800281a:	f001 f8f9 	bl	8003a10 <HAL_GPIO_Init>

  /*Configure GPIO pins : LEDB_Pin LEDA_Pin */
  GPIO_InitStruct.Pin = LEDB_Pin|LEDA_Pin;
 800281e:	23c0      	movs	r3, #192	; 0xc0
 8002820:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002822:	2301      	movs	r3, #1
 8002824:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002826:	2302      	movs	r3, #2
 8002828:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800282a:	2300      	movs	r3, #0
 800282c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800282e:	f107 0314 	add.w	r3, r7, #20
 8002832:	4619      	mov	r1, r3
 8002834:	4815      	ldr	r0, [pc, #84]	; (800288c <MX_GPIO_Init+0x1d8>)
 8002836:	f001 f8eb 	bl	8003a10 <HAL_GPIO_Init>

  /*Configure GPIO pin : SDIO_SW_Pin */
  GPIO_InitStruct.Pin = SDIO_SW_Pin;
 800283a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800283e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002840:	2300      	movs	r3, #0
 8002842:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002844:	2300      	movs	r3, #0
 8002846:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SDIO_SW_GPIO_Port, &GPIO_InitStruct);
 8002848:	f107 0314 	add.w	r3, r7, #20
 800284c:	4619      	mov	r1, r3
 800284e:	4810      	ldr	r0, [pc, #64]	; (8002890 <MX_GPIO_Init+0x1dc>)
 8002850:	f001 f8de 	bl	8003a10 <HAL_GPIO_Init>

  /*Configure GPIO pin : BTN_USR_Pin */
  GPIO_InitStruct.Pin = BTN_USR_Pin;
 8002854:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002858:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800285a:	2300      	movs	r3, #0
 800285c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800285e:	2301      	movs	r3, #1
 8002860:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BTN_USR_GPIO_Port, &GPIO_InitStruct);
 8002862:	f107 0314 	add.w	r3, r7, #20
 8002866:	4619      	mov	r1, r3
 8002868:	4809      	ldr	r0, [pc, #36]	; (8002890 <MX_GPIO_Init+0x1dc>)
 800286a:	f001 f8d1 	bl	8003a10 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 800286e:	2200      	movs	r2, #0
 8002870:	2100      	movs	r1, #0
 8002872:	2017      	movs	r0, #23
 8002874:	f000 fcf9 	bl	800326a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8002878:	2017      	movs	r0, #23
 800287a:	f000 fd12 	bl	80032a2 <HAL_NVIC_EnableIRQ>

}
 800287e:	bf00      	nop
 8002880:	3728      	adds	r7, #40	; 0x28
 8002882:	46bd      	mov	sp, r7
 8002884:	bd80      	pop	{r7, pc}
 8002886:	bf00      	nop
 8002888:	40023800 	.word	0x40023800
 800288c:	40020800 	.word	0x40020800
 8002890:	40020000 	.word	0x40020000
 8002894:	40020400 	.word	0x40020400
 8002898:	10110000 	.word	0x10110000

0800289c <Get_I2C1_Instance>:

/* USER CODE BEGIN 4 */

I2C_HandleTypeDef* Get_I2C1_Instance()
{
 800289c:	b480      	push	{r7}
 800289e:	af00      	add	r7, sp, #0
	return &hi2c1;
 80028a0:	4b02      	ldr	r3, [pc, #8]	; (80028ac <Get_I2C1_Instance+0x10>)
}
 80028a2:	4618      	mov	r0, r3
 80028a4:	46bd      	mov	sp, r7
 80028a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028aa:	4770      	bx	lr
 80028ac:	20000ab0 	.word	0x20000ab0

080028b0 <Get_SPI1_Instance>:

SPI_HandleTypeDef* Get_SPI1_Instance()
{
 80028b0:	b480      	push	{r7}
 80028b2:	af00      	add	r7, sp, #0
	return &hspi1;
 80028b4:	4b02      	ldr	r3, [pc, #8]	; (80028c0 <Get_SPI1_Instance+0x10>)
}
 80028b6:	4618      	mov	r0, r3
 80028b8:	46bd      	mov	sp, r7
 80028ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028be:	4770      	bx	lr
 80028c0:	20000c08 	.word	0x20000c08

080028c4 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80028c4:	b580      	push	{r7, lr}
 80028c6:	b082      	sub	sp, #8
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	4603      	mov	r3, r0
 80028cc:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == LR_DIO0_Pin)
 80028ce:	88fb      	ldrh	r3, [r7, #6]
 80028d0:	2b40      	cmp	r3, #64	; 0x40
 80028d2:	d101      	bne.n	80028d8 <HAL_GPIO_EXTI_Callback+0x14>
	{
		dio0_IRQ();
 80028d4:	f7ff fcc4 	bl	8002260 <dio0_IRQ>
	}
}
 80028d8:	bf00      	nop
 80028da:	3708      	adds	r7, #8
 80028dc:	46bd      	mov	sp, r7
 80028de:	bd80      	pop	{r7, pc}

080028e0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80028e0:	b480      	push	{r7}
 80028e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80028e4:	bf00      	nop
 80028e6:	46bd      	mov	sp, r7
 80028e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ec:	4770      	bx	lr
	...

080028f0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80028f0:	b480      	push	{r7}
 80028f2:	b083      	sub	sp, #12
 80028f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80028f6:	2300      	movs	r3, #0
 80028f8:	607b      	str	r3, [r7, #4]
 80028fa:	4b10      	ldr	r3, [pc, #64]	; (800293c <HAL_MspInit+0x4c>)
 80028fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028fe:	4a0f      	ldr	r2, [pc, #60]	; (800293c <HAL_MspInit+0x4c>)
 8002900:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002904:	6453      	str	r3, [r2, #68]	; 0x44
 8002906:	4b0d      	ldr	r3, [pc, #52]	; (800293c <HAL_MspInit+0x4c>)
 8002908:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800290a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800290e:	607b      	str	r3, [r7, #4]
 8002910:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002912:	2300      	movs	r3, #0
 8002914:	603b      	str	r3, [r7, #0]
 8002916:	4b09      	ldr	r3, [pc, #36]	; (800293c <HAL_MspInit+0x4c>)
 8002918:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800291a:	4a08      	ldr	r2, [pc, #32]	; (800293c <HAL_MspInit+0x4c>)
 800291c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002920:	6413      	str	r3, [r2, #64]	; 0x40
 8002922:	4b06      	ldr	r3, [pc, #24]	; (800293c <HAL_MspInit+0x4c>)
 8002924:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002926:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800292a:	603b      	str	r3, [r7, #0]
 800292c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800292e:	bf00      	nop
 8002930:	370c      	adds	r7, #12
 8002932:	46bd      	mov	sp, r7
 8002934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002938:	4770      	bx	lr
 800293a:	bf00      	nop
 800293c:	40023800 	.word	0x40023800

08002940 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002940:	b580      	push	{r7, lr}
 8002942:	b08a      	sub	sp, #40	; 0x28
 8002944:	af00      	add	r7, sp, #0
 8002946:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002948:	f107 0314 	add.w	r3, r7, #20
 800294c:	2200      	movs	r2, #0
 800294e:	601a      	str	r2, [r3, #0]
 8002950:	605a      	str	r2, [r3, #4]
 8002952:	609a      	str	r2, [r3, #8]
 8002954:	60da      	str	r2, [r3, #12]
 8002956:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	4a19      	ldr	r2, [pc, #100]	; (80029c4 <HAL_I2C_MspInit+0x84>)
 800295e:	4293      	cmp	r3, r2
 8002960:	d12b      	bne.n	80029ba <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002962:	2300      	movs	r3, #0
 8002964:	613b      	str	r3, [r7, #16]
 8002966:	4b18      	ldr	r3, [pc, #96]	; (80029c8 <HAL_I2C_MspInit+0x88>)
 8002968:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800296a:	4a17      	ldr	r2, [pc, #92]	; (80029c8 <HAL_I2C_MspInit+0x88>)
 800296c:	f043 0302 	orr.w	r3, r3, #2
 8002970:	6313      	str	r3, [r2, #48]	; 0x30
 8002972:	4b15      	ldr	r3, [pc, #84]	; (80029c8 <HAL_I2C_MspInit+0x88>)
 8002974:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002976:	f003 0302 	and.w	r3, r3, #2
 800297a:	613b      	str	r3, [r7, #16]
 800297c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = SCL_Pin|SDA_Pin;
 800297e:	23c0      	movs	r3, #192	; 0xc0
 8002980:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002982:	2312      	movs	r3, #18
 8002984:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002986:	2300      	movs	r3, #0
 8002988:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800298a:	2303      	movs	r3, #3
 800298c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800298e:	2304      	movs	r3, #4
 8002990:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002992:	f107 0314 	add.w	r3, r7, #20
 8002996:	4619      	mov	r1, r3
 8002998:	480c      	ldr	r0, [pc, #48]	; (80029cc <HAL_I2C_MspInit+0x8c>)
 800299a:	f001 f839 	bl	8003a10 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800299e:	2300      	movs	r3, #0
 80029a0:	60fb      	str	r3, [r7, #12]
 80029a2:	4b09      	ldr	r3, [pc, #36]	; (80029c8 <HAL_I2C_MspInit+0x88>)
 80029a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029a6:	4a08      	ldr	r2, [pc, #32]	; (80029c8 <HAL_I2C_MspInit+0x88>)
 80029a8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80029ac:	6413      	str	r3, [r2, #64]	; 0x40
 80029ae:	4b06      	ldr	r3, [pc, #24]	; (80029c8 <HAL_I2C_MspInit+0x88>)
 80029b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029b2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80029b6:	60fb      	str	r3, [r7, #12]
 80029b8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80029ba:	bf00      	nop
 80029bc:	3728      	adds	r7, #40	; 0x28
 80029be:	46bd      	mov	sp, r7
 80029c0:	bd80      	pop	{r7, pc}
 80029c2:	bf00      	nop
 80029c4:	40005400 	.word	0x40005400
 80029c8:	40023800 	.word	0x40023800
 80029cc:	40020400 	.word	0x40020400

080029d0 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80029d0:	b480      	push	{r7}
 80029d2:	b083      	sub	sp, #12
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	4a05      	ldr	r2, [pc, #20]	; (80029f4 <HAL_RTC_MspInit+0x24>)
 80029de:	4293      	cmp	r3, r2
 80029e0:	d102      	bne.n	80029e8 <HAL_RTC_MspInit+0x18>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80029e2:	4b05      	ldr	r3, [pc, #20]	; (80029f8 <HAL_RTC_MspInit+0x28>)
 80029e4:	2201      	movs	r2, #1
 80029e6:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80029e8:	bf00      	nop
 80029ea:	370c      	adds	r7, #12
 80029ec:	46bd      	mov	sp, r7
 80029ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f2:	4770      	bx	lr
 80029f4:	40002800 	.word	0x40002800
 80029f8:	42470e3c 	.word	0x42470e3c

080029fc <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 80029fc:	b580      	push	{r7, lr}
 80029fe:	b08a      	sub	sp, #40	; 0x28
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a04:	f107 0314 	add.w	r3, r7, #20
 8002a08:	2200      	movs	r2, #0
 8002a0a:	601a      	str	r2, [r3, #0]
 8002a0c:	605a      	str	r2, [r3, #4]
 8002a0e:	609a      	str	r2, [r3, #8]
 8002a10:	60da      	str	r2, [r3, #12]
 8002a12:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	4a70      	ldr	r2, [pc, #448]	; (8002bdc <HAL_SD_MspInit+0x1e0>)
 8002a1a:	4293      	cmp	r3, r2
 8002a1c:	f040 80da 	bne.w	8002bd4 <HAL_SD_MspInit+0x1d8>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 8002a20:	2300      	movs	r3, #0
 8002a22:	613b      	str	r3, [r7, #16]
 8002a24:	4b6e      	ldr	r3, [pc, #440]	; (8002be0 <HAL_SD_MspInit+0x1e4>)
 8002a26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a28:	4a6d      	ldr	r2, [pc, #436]	; (8002be0 <HAL_SD_MspInit+0x1e4>)
 8002a2a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002a2e:	6453      	str	r3, [r2, #68]	; 0x44
 8002a30:	4b6b      	ldr	r3, [pc, #428]	; (8002be0 <HAL_SD_MspInit+0x1e4>)
 8002a32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a34:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002a38:	613b      	str	r3, [r7, #16]
 8002a3a:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002a3c:	2300      	movs	r3, #0
 8002a3e:	60fb      	str	r3, [r7, #12]
 8002a40:	4b67      	ldr	r3, [pc, #412]	; (8002be0 <HAL_SD_MspInit+0x1e4>)
 8002a42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a44:	4a66      	ldr	r2, [pc, #408]	; (8002be0 <HAL_SD_MspInit+0x1e4>)
 8002a46:	f043 0304 	orr.w	r3, r3, #4
 8002a4a:	6313      	str	r3, [r2, #48]	; 0x30
 8002a4c:	4b64      	ldr	r3, [pc, #400]	; (8002be0 <HAL_SD_MspInit+0x1e4>)
 8002a4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a50:	f003 0304 	and.w	r3, r3, #4
 8002a54:	60fb      	str	r3, [r7, #12]
 8002a56:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002a58:	2300      	movs	r3, #0
 8002a5a:	60bb      	str	r3, [r7, #8]
 8002a5c:	4b60      	ldr	r3, [pc, #384]	; (8002be0 <HAL_SD_MspInit+0x1e4>)
 8002a5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a60:	4a5f      	ldr	r2, [pc, #380]	; (8002be0 <HAL_SD_MspInit+0x1e4>)
 8002a62:	f043 0308 	orr.w	r3, r3, #8
 8002a66:	6313      	str	r3, [r2, #48]	; 0x30
 8002a68:	4b5d      	ldr	r3, [pc, #372]	; (8002be0 <HAL_SD_MspInit+0x1e4>)
 8002a6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a6c:	f003 0308 	and.w	r3, r3, #8
 8002a70:	60bb      	str	r3, [r7, #8]
 8002a72:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDIO_D2
    PC11     ------> SDIO_D3
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8002a74:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8002a78:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a7a:	2302      	movs	r3, #2
 8002a7c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002a7e:	2301      	movs	r3, #1
 8002a80:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a82:	2303      	movs	r3, #3
 8002a84:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8002a86:	230c      	movs	r3, #12
 8002a88:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002a8a:	f107 0314 	add.w	r3, r7, #20
 8002a8e:	4619      	mov	r1, r3
 8002a90:	4854      	ldr	r0, [pc, #336]	; (8002be4 <HAL_SD_MspInit+0x1e8>)
 8002a92:	f000 ffbd 	bl	8003a10 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8002a96:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8002a9a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a9c:	2302      	movs	r3, #2
 8002a9e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002aa0:	2300      	movs	r3, #0
 8002aa2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002aa4:	2303      	movs	r3, #3
 8002aa6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8002aa8:	230c      	movs	r3, #12
 8002aaa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002aac:	f107 0314 	add.w	r3, r7, #20
 8002ab0:	4619      	mov	r1, r3
 8002ab2:	484c      	ldr	r0, [pc, #304]	; (8002be4 <HAL_SD_MspInit+0x1e8>)
 8002ab4:	f000 ffac 	bl	8003a10 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002ab8:	2304      	movs	r3, #4
 8002aba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002abc:	2302      	movs	r3, #2
 8002abe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002ac0:	2301      	movs	r3, #1
 8002ac2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ac4:	2303      	movs	r3, #3
 8002ac6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8002ac8:	230c      	movs	r3, #12
 8002aca:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002acc:	f107 0314 	add.w	r3, r7, #20
 8002ad0:	4619      	mov	r1, r3
 8002ad2:	4845      	ldr	r0, [pc, #276]	; (8002be8 <HAL_SD_MspInit+0x1ec>)
 8002ad4:	f000 ff9c 	bl	8003a10 <HAL_GPIO_Init>

    /* SDIO DMA Init */
    /* SDIO_RX Init */
    hdma_sdio_rx.Instance = DMA2_Stream3;
 8002ad8:	4b44      	ldr	r3, [pc, #272]	; (8002bec <HAL_SD_MspInit+0x1f0>)
 8002ada:	4a45      	ldr	r2, [pc, #276]	; (8002bf0 <HAL_SD_MspInit+0x1f4>)
 8002adc:	601a      	str	r2, [r3, #0]
    hdma_sdio_rx.Init.Channel = DMA_CHANNEL_4;
 8002ade:	4b43      	ldr	r3, [pc, #268]	; (8002bec <HAL_SD_MspInit+0x1f0>)
 8002ae0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002ae4:	605a      	str	r2, [r3, #4]
    hdma_sdio_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002ae6:	4b41      	ldr	r3, [pc, #260]	; (8002bec <HAL_SD_MspInit+0x1f0>)
 8002ae8:	2200      	movs	r2, #0
 8002aea:	609a      	str	r2, [r3, #8]
    hdma_sdio_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002aec:	4b3f      	ldr	r3, [pc, #252]	; (8002bec <HAL_SD_MspInit+0x1f0>)
 8002aee:	2200      	movs	r2, #0
 8002af0:	60da      	str	r2, [r3, #12]
    hdma_sdio_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002af2:	4b3e      	ldr	r3, [pc, #248]	; (8002bec <HAL_SD_MspInit+0x1f0>)
 8002af4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002af8:	611a      	str	r2, [r3, #16]
    hdma_sdio_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002afa:	4b3c      	ldr	r3, [pc, #240]	; (8002bec <HAL_SD_MspInit+0x1f0>)
 8002afc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002b00:	615a      	str	r2, [r3, #20]
    hdma_sdio_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002b02:	4b3a      	ldr	r3, [pc, #232]	; (8002bec <HAL_SD_MspInit+0x1f0>)
 8002b04:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002b08:	619a      	str	r2, [r3, #24]
    hdma_sdio_rx.Init.Mode = DMA_PFCTRL;
 8002b0a:	4b38      	ldr	r3, [pc, #224]	; (8002bec <HAL_SD_MspInit+0x1f0>)
 8002b0c:	2220      	movs	r2, #32
 8002b0e:	61da      	str	r2, [r3, #28]
    hdma_sdio_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002b10:	4b36      	ldr	r3, [pc, #216]	; (8002bec <HAL_SD_MspInit+0x1f0>)
 8002b12:	2200      	movs	r2, #0
 8002b14:	621a      	str	r2, [r3, #32]
    hdma_sdio_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8002b16:	4b35      	ldr	r3, [pc, #212]	; (8002bec <HAL_SD_MspInit+0x1f0>)
 8002b18:	2204      	movs	r2, #4
 8002b1a:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8002b1c:	4b33      	ldr	r3, [pc, #204]	; (8002bec <HAL_SD_MspInit+0x1f0>)
 8002b1e:	2203      	movs	r2, #3
 8002b20:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_rx.Init.MemBurst = DMA_MBURST_INC4;
 8002b22:	4b32      	ldr	r3, [pc, #200]	; (8002bec <HAL_SD_MspInit+0x1f0>)
 8002b24:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8002b28:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 8002b2a:	4b30      	ldr	r3, [pc, #192]	; (8002bec <HAL_SD_MspInit+0x1f0>)
 8002b2c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8002b30:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_rx) != HAL_OK)
 8002b32:	482e      	ldr	r0, [pc, #184]	; (8002bec <HAL_SD_MspInit+0x1f0>)
 8002b34:	f000 fbd0 	bl	80032d8 <HAL_DMA_Init>
 8002b38:	4603      	mov	r3, r0
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d001      	beq.n	8002b42 <HAL_SD_MspInit+0x146>
    {
      Error_Handler();
 8002b3e:	f7ff fecf 	bl	80028e0 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmarx,hdma_sdio_rx);
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	4a29      	ldr	r2, [pc, #164]	; (8002bec <HAL_SD_MspInit+0x1f0>)
 8002b46:	641a      	str	r2, [r3, #64]	; 0x40
 8002b48:	4a28      	ldr	r2, [pc, #160]	; (8002bec <HAL_SD_MspInit+0x1f0>)
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO_TX Init */
    hdma_sdio_tx.Instance = DMA2_Stream6;
 8002b4e:	4b29      	ldr	r3, [pc, #164]	; (8002bf4 <HAL_SD_MspInit+0x1f8>)
 8002b50:	4a29      	ldr	r2, [pc, #164]	; (8002bf8 <HAL_SD_MspInit+0x1fc>)
 8002b52:	601a      	str	r2, [r3, #0]
    hdma_sdio_tx.Init.Channel = DMA_CHANNEL_4;
 8002b54:	4b27      	ldr	r3, [pc, #156]	; (8002bf4 <HAL_SD_MspInit+0x1f8>)
 8002b56:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002b5a:	605a      	str	r2, [r3, #4]
    hdma_sdio_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002b5c:	4b25      	ldr	r3, [pc, #148]	; (8002bf4 <HAL_SD_MspInit+0x1f8>)
 8002b5e:	2240      	movs	r2, #64	; 0x40
 8002b60:	609a      	str	r2, [r3, #8]
    hdma_sdio_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002b62:	4b24      	ldr	r3, [pc, #144]	; (8002bf4 <HAL_SD_MspInit+0x1f8>)
 8002b64:	2200      	movs	r2, #0
 8002b66:	60da      	str	r2, [r3, #12]
    hdma_sdio_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002b68:	4b22      	ldr	r3, [pc, #136]	; (8002bf4 <HAL_SD_MspInit+0x1f8>)
 8002b6a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002b6e:	611a      	str	r2, [r3, #16]
    hdma_sdio_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002b70:	4b20      	ldr	r3, [pc, #128]	; (8002bf4 <HAL_SD_MspInit+0x1f8>)
 8002b72:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002b76:	615a      	str	r2, [r3, #20]
    hdma_sdio_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002b78:	4b1e      	ldr	r3, [pc, #120]	; (8002bf4 <HAL_SD_MspInit+0x1f8>)
 8002b7a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002b7e:	619a      	str	r2, [r3, #24]
    hdma_sdio_tx.Init.Mode = DMA_PFCTRL;
 8002b80:	4b1c      	ldr	r3, [pc, #112]	; (8002bf4 <HAL_SD_MspInit+0x1f8>)
 8002b82:	2220      	movs	r2, #32
 8002b84:	61da      	str	r2, [r3, #28]
    hdma_sdio_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002b86:	4b1b      	ldr	r3, [pc, #108]	; (8002bf4 <HAL_SD_MspInit+0x1f8>)
 8002b88:	2200      	movs	r2, #0
 8002b8a:	621a      	str	r2, [r3, #32]
    hdma_sdio_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8002b8c:	4b19      	ldr	r3, [pc, #100]	; (8002bf4 <HAL_SD_MspInit+0x1f8>)
 8002b8e:	2204      	movs	r2, #4
 8002b90:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8002b92:	4b18      	ldr	r3, [pc, #96]	; (8002bf4 <HAL_SD_MspInit+0x1f8>)
 8002b94:	2203      	movs	r2, #3
 8002b96:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_tx.Init.MemBurst = DMA_MBURST_INC4;
 8002b98:	4b16      	ldr	r3, [pc, #88]	; (8002bf4 <HAL_SD_MspInit+0x1f8>)
 8002b9a:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8002b9e:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 8002ba0:	4b14      	ldr	r3, [pc, #80]	; (8002bf4 <HAL_SD_MspInit+0x1f8>)
 8002ba2:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8002ba6:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_tx) != HAL_OK)
 8002ba8:	4812      	ldr	r0, [pc, #72]	; (8002bf4 <HAL_SD_MspInit+0x1f8>)
 8002baa:	f000 fb95 	bl	80032d8 <HAL_DMA_Init>
 8002bae:	4603      	mov	r3, r0
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d001      	beq.n	8002bb8 <HAL_SD_MspInit+0x1bc>
    {
      Error_Handler();
 8002bb4:	f7ff fe94 	bl	80028e0 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmatx,hdma_sdio_tx);
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	4a0e      	ldr	r2, [pc, #56]	; (8002bf4 <HAL_SD_MspInit+0x1f8>)
 8002bbc:	63da      	str	r2, [r3, #60]	; 0x3c
 8002bbe:	4a0d      	ldr	r2, [pc, #52]	; (8002bf4 <HAL_SD_MspInit+0x1f8>)
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO interrupt Init */
    HAL_NVIC_SetPriority(SDIO_IRQn, 0, 0);
 8002bc4:	2200      	movs	r2, #0
 8002bc6:	2100      	movs	r1, #0
 8002bc8:	2031      	movs	r0, #49	; 0x31
 8002bca:	f000 fb4e 	bl	800326a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDIO_IRQn);
 8002bce:	2031      	movs	r0, #49	; 0x31
 8002bd0:	f000 fb67 	bl	80032a2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 8002bd4:	bf00      	nop
 8002bd6:	3728      	adds	r7, #40	; 0x28
 8002bd8:	46bd      	mov	sp, r7
 8002bda:	bd80      	pop	{r7, pc}
 8002bdc:	40012c00 	.word	0x40012c00
 8002be0:	40023800 	.word	0x40023800
 8002be4:	40020800 	.word	0x40020800
 8002be8:	40020c00 	.word	0x40020c00
 8002bec:	20000a10 	.word	0x20000a10
 8002bf0:	40026458 	.word	0x40026458
 8002bf4:	20000b24 	.word	0x20000b24
 8002bf8:	400264a0 	.word	0x400264a0

08002bfc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002bfc:	b580      	push	{r7, lr}
 8002bfe:	b08a      	sub	sp, #40	; 0x28
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c04:	f107 0314 	add.w	r3, r7, #20
 8002c08:	2200      	movs	r2, #0
 8002c0a:	601a      	str	r2, [r3, #0]
 8002c0c:	605a      	str	r2, [r3, #4]
 8002c0e:	609a      	str	r2, [r3, #8]
 8002c10:	60da      	str	r2, [r3, #12]
 8002c12:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	4a19      	ldr	r2, [pc, #100]	; (8002c80 <HAL_SPI_MspInit+0x84>)
 8002c1a:	4293      	cmp	r3, r2
 8002c1c:	d12b      	bne.n	8002c76 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002c1e:	2300      	movs	r3, #0
 8002c20:	613b      	str	r3, [r7, #16]
 8002c22:	4b18      	ldr	r3, [pc, #96]	; (8002c84 <HAL_SPI_MspInit+0x88>)
 8002c24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c26:	4a17      	ldr	r2, [pc, #92]	; (8002c84 <HAL_SPI_MspInit+0x88>)
 8002c28:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002c2c:	6453      	str	r3, [r2, #68]	; 0x44
 8002c2e:	4b15      	ldr	r3, [pc, #84]	; (8002c84 <HAL_SPI_MspInit+0x88>)
 8002c30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c32:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002c36:	613b      	str	r3, [r7, #16]
 8002c38:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c3a:	2300      	movs	r3, #0
 8002c3c:	60fb      	str	r3, [r7, #12]
 8002c3e:	4b11      	ldr	r3, [pc, #68]	; (8002c84 <HAL_SPI_MspInit+0x88>)
 8002c40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c42:	4a10      	ldr	r2, [pc, #64]	; (8002c84 <HAL_SPI_MspInit+0x88>)
 8002c44:	f043 0302 	orr.w	r3, r3, #2
 8002c48:	6313      	str	r3, [r2, #48]	; 0x30
 8002c4a:	4b0e      	ldr	r3, [pc, #56]	; (8002c84 <HAL_SPI_MspInit+0x88>)
 8002c4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c4e:	f003 0302 	and.w	r3, r3, #2
 8002c52:	60fb      	str	r3, [r7, #12]
 8002c54:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration    
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = LR_SCK_Pin|LR_MISO_Pin|LR_MOSI_Pin;
 8002c56:	2338      	movs	r3, #56	; 0x38
 8002c58:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c5a:	2302      	movs	r3, #2
 8002c5c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c5e:	2300      	movs	r3, #0
 8002c60:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c62:	2303      	movs	r3, #3
 8002c64:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002c66:	2305      	movs	r3, #5
 8002c68:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c6a:	f107 0314 	add.w	r3, r7, #20
 8002c6e:	4619      	mov	r1, r3
 8002c70:	4805      	ldr	r0, [pc, #20]	; (8002c88 <HAL_SPI_MspInit+0x8c>)
 8002c72:	f000 fecd 	bl	8003a10 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8002c76:	bf00      	nop
 8002c78:	3728      	adds	r7, #40	; 0x28
 8002c7a:	46bd      	mov	sp, r7
 8002c7c:	bd80      	pop	{r7, pc}
 8002c7e:	bf00      	nop
 8002c80:	40013000 	.word	0x40013000
 8002c84:	40023800 	.word	0x40023800
 8002c88:	40020400 	.word	0x40020400

08002c8c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002c8c:	b580      	push	{r7, lr}
 8002c8e:	b08a      	sub	sp, #40	; 0x28
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c94:	f107 0314 	add.w	r3, r7, #20
 8002c98:	2200      	movs	r2, #0
 8002c9a:	601a      	str	r2, [r3, #0]
 8002c9c:	605a      	str	r2, [r3, #4]
 8002c9e:	609a      	str	r2, [r3, #8]
 8002ca0:	60da      	str	r2, [r3, #12]
 8002ca2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	4a19      	ldr	r2, [pc, #100]	; (8002d10 <HAL_UART_MspInit+0x84>)
 8002caa:	4293      	cmp	r3, r2
 8002cac:	d12c      	bne.n	8002d08 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8002cae:	2300      	movs	r3, #0
 8002cb0:	613b      	str	r3, [r7, #16]
 8002cb2:	4b18      	ldr	r3, [pc, #96]	; (8002d14 <HAL_UART_MspInit+0x88>)
 8002cb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cb6:	4a17      	ldr	r2, [pc, #92]	; (8002d14 <HAL_UART_MspInit+0x88>)
 8002cb8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002cbc:	6413      	str	r3, [r2, #64]	; 0x40
 8002cbe:	4b15      	ldr	r3, [pc, #84]	; (8002d14 <HAL_UART_MspInit+0x88>)
 8002cc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cc2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002cc6:	613b      	str	r3, [r7, #16]
 8002cc8:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002cca:	2300      	movs	r3, #0
 8002ccc:	60fb      	str	r3, [r7, #12]
 8002cce:	4b11      	ldr	r3, [pc, #68]	; (8002d14 <HAL_UART_MspInit+0x88>)
 8002cd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cd2:	4a10      	ldr	r2, [pc, #64]	; (8002d14 <HAL_UART_MspInit+0x88>)
 8002cd4:	f043 0302 	orr.w	r3, r3, #2
 8002cd8:	6313      	str	r3, [r2, #48]	; 0x30
 8002cda:	4b0e      	ldr	r3, [pc, #56]	; (8002d14 <HAL_UART_MspInit+0x88>)
 8002cdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cde:	f003 0302 	and.w	r3, r3, #2
 8002ce2:	60fb      	str	r3, [r7, #12]
 8002ce4:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration    
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX 
    */
    GPIO_InitStruct.Pin = GPS_RX_Pin|GPS_TX_Pin;
 8002ce6:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002cea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cec:	2302      	movs	r3, #2
 8002cee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cf0:	2300      	movs	r3, #0
 8002cf2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002cf4:	2303      	movs	r3, #3
 8002cf6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002cf8:	2307      	movs	r3, #7
 8002cfa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002cfc:	f107 0314 	add.w	r3, r7, #20
 8002d00:	4619      	mov	r1, r3
 8002d02:	4805      	ldr	r0, [pc, #20]	; (8002d18 <HAL_UART_MspInit+0x8c>)
 8002d04:	f000 fe84 	bl	8003a10 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002d08:	bf00      	nop
 8002d0a:	3728      	adds	r7, #40	; 0x28
 8002d0c:	46bd      	mov	sp, r7
 8002d0e:	bd80      	pop	{r7, pc}
 8002d10:	40004800 	.word	0x40004800
 8002d14:	40023800 	.word	0x40023800
 8002d18:	40020400 	.word	0x40020400

08002d1c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002d1c:	b480      	push	{r7}
 8002d1e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002d20:	bf00      	nop
 8002d22:	46bd      	mov	sp, r7
 8002d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d28:	4770      	bx	lr

08002d2a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002d2a:	b480      	push	{r7}
 8002d2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002d2e:	e7fe      	b.n	8002d2e <HardFault_Handler+0x4>

08002d30 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002d30:	b480      	push	{r7}
 8002d32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002d34:	e7fe      	b.n	8002d34 <MemManage_Handler+0x4>

08002d36 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002d36:	b480      	push	{r7}
 8002d38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002d3a:	e7fe      	b.n	8002d3a <BusFault_Handler+0x4>

08002d3c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002d3c:	b480      	push	{r7}
 8002d3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002d40:	e7fe      	b.n	8002d40 <UsageFault_Handler+0x4>

08002d42 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002d42:	b480      	push	{r7}
 8002d44:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002d46:	bf00      	nop
 8002d48:	46bd      	mov	sp, r7
 8002d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d4e:	4770      	bx	lr

08002d50 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002d50:	b480      	push	{r7}
 8002d52:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002d54:	bf00      	nop
 8002d56:	46bd      	mov	sp, r7
 8002d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d5c:	4770      	bx	lr

08002d5e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002d5e:	b480      	push	{r7}
 8002d60:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002d62:	bf00      	nop
 8002d64:	46bd      	mov	sp, r7
 8002d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d6a:	4770      	bx	lr

08002d6c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002d6c:	b580      	push	{r7, lr}
 8002d6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002d70:	f000 f95e 	bl	8003030 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002d74:	bf00      	nop
 8002d76:	bd80      	pop	{r7, pc}

08002d78 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8002d78:	b580      	push	{r7, lr}
 8002d7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8002d7c:	2040      	movs	r0, #64	; 0x40
 8002d7e:	f001 f82d 	bl	8003ddc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8002d82:	bf00      	nop
 8002d84:	bd80      	pop	{r7, pc}
	...

08002d88 <SDIO_IRQHandler>:

/**
  * @brief This function handles SDIO global interrupt.
  */
void SDIO_IRQHandler(void)
{
 8002d88:	b580      	push	{r7, lr}
 8002d8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDIO_IRQn 0 */

  /* USER CODE END SDIO_IRQn 0 */
  HAL_SD_IRQHandler(&hsd);
 8002d8c:	4802      	ldr	r0, [pc, #8]	; (8002d98 <SDIO_IRQHandler+0x10>)
 8002d8e:	f004 fb67 	bl	8007460 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDIO_IRQn 1 */

  /* USER CODE END SDIO_IRQn 1 */
}
 8002d92:	bf00      	nop
 8002d94:	bd80      	pop	{r7, pc}
 8002d96:	bf00      	nop
 8002d98:	20000b84 	.word	0x20000b84

08002d9c <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8002d9c:	b580      	push	{r7, lr}
 8002d9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_rx);
 8002da0:	4802      	ldr	r0, [pc, #8]	; (8002dac <DMA2_Stream3_IRQHandler+0x10>)
 8002da2:	f000 fbc1 	bl	8003528 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8002da6:	bf00      	nop
 8002da8:	bd80      	pop	{r7, pc}
 8002daa:	bf00      	nop
 8002dac:	20000a10 	.word	0x20000a10

08002db0 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8002db0:	b580      	push	{r7, lr}
 8002db2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8002db4:	4802      	ldr	r0, [pc, #8]	; (8002dc0 <OTG_FS_IRQHandler+0x10>)
 8002db6:	f002 f928 	bl	800500a <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8002dba:	bf00      	nop
 8002dbc:	bd80      	pop	{r7, pc}
 8002dbe:	bf00      	nop
 8002dc0:	20002568 	.word	0x20002568

08002dc4 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8002dc4:	b580      	push	{r7, lr}
 8002dc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_tx);
 8002dc8:	4802      	ldr	r0, [pc, #8]	; (8002dd4 <DMA2_Stream6_IRQHandler+0x10>)
 8002dca:	f000 fbad 	bl	8003528 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8002dce:	bf00      	nop
 8002dd0:	bd80      	pop	{r7, pc}
 8002dd2:	bf00      	nop
 8002dd4:	20000b24 	.word	0x20000b24

08002dd8 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002dd8:	b580      	push	{r7, lr}
 8002dda:	b086      	sub	sp, #24
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	60f8      	str	r0, [r7, #12]
 8002de0:	60b9      	str	r1, [r7, #8]
 8002de2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002de4:	2300      	movs	r3, #0
 8002de6:	617b      	str	r3, [r7, #20]
 8002de8:	e00a      	b.n	8002e00 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002dea:	f3af 8000 	nop.w
 8002dee:	4601      	mov	r1, r0
 8002df0:	68bb      	ldr	r3, [r7, #8]
 8002df2:	1c5a      	adds	r2, r3, #1
 8002df4:	60ba      	str	r2, [r7, #8]
 8002df6:	b2ca      	uxtb	r2, r1
 8002df8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002dfa:	697b      	ldr	r3, [r7, #20]
 8002dfc:	3301      	adds	r3, #1
 8002dfe:	617b      	str	r3, [r7, #20]
 8002e00:	697a      	ldr	r2, [r7, #20]
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	429a      	cmp	r2, r3
 8002e06:	dbf0      	blt.n	8002dea <_read+0x12>
	}

return len;
 8002e08:	687b      	ldr	r3, [r7, #4]
}
 8002e0a:	4618      	mov	r0, r3
 8002e0c:	3718      	adds	r7, #24
 8002e0e:	46bd      	mov	sp, r7
 8002e10:	bd80      	pop	{r7, pc}

08002e12 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002e12:	b580      	push	{r7, lr}
 8002e14:	b086      	sub	sp, #24
 8002e16:	af00      	add	r7, sp, #0
 8002e18:	60f8      	str	r0, [r7, #12]
 8002e1a:	60b9      	str	r1, [r7, #8]
 8002e1c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002e1e:	2300      	movs	r3, #0
 8002e20:	617b      	str	r3, [r7, #20]
 8002e22:	e009      	b.n	8002e38 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002e24:	68bb      	ldr	r3, [r7, #8]
 8002e26:	1c5a      	adds	r2, r3, #1
 8002e28:	60ba      	str	r2, [r7, #8]
 8002e2a:	781b      	ldrb	r3, [r3, #0]
 8002e2c:	4618      	mov	r0, r3
 8002e2e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002e32:	697b      	ldr	r3, [r7, #20]
 8002e34:	3301      	adds	r3, #1
 8002e36:	617b      	str	r3, [r7, #20]
 8002e38:	697a      	ldr	r2, [r7, #20]
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	429a      	cmp	r2, r3
 8002e3e:	dbf1      	blt.n	8002e24 <_write+0x12>
	}
	return len;
 8002e40:	687b      	ldr	r3, [r7, #4]
}
 8002e42:	4618      	mov	r0, r3
 8002e44:	3718      	adds	r7, #24
 8002e46:	46bd      	mov	sp, r7
 8002e48:	bd80      	pop	{r7, pc}

08002e4a <_close>:

int _close(int file)
{
 8002e4a:	b480      	push	{r7}
 8002e4c:	b083      	sub	sp, #12
 8002e4e:	af00      	add	r7, sp, #0
 8002e50:	6078      	str	r0, [r7, #4]
	return -1;
 8002e52:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002e56:	4618      	mov	r0, r3
 8002e58:	370c      	adds	r7, #12
 8002e5a:	46bd      	mov	sp, r7
 8002e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e60:	4770      	bx	lr

08002e62 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002e62:	b480      	push	{r7}
 8002e64:	b083      	sub	sp, #12
 8002e66:	af00      	add	r7, sp, #0
 8002e68:	6078      	str	r0, [r7, #4]
 8002e6a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002e6c:	683b      	ldr	r3, [r7, #0]
 8002e6e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002e72:	605a      	str	r2, [r3, #4]
	return 0;
 8002e74:	2300      	movs	r3, #0
}
 8002e76:	4618      	mov	r0, r3
 8002e78:	370c      	adds	r7, #12
 8002e7a:	46bd      	mov	sp, r7
 8002e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e80:	4770      	bx	lr

08002e82 <_isatty>:

int _isatty(int file)
{
 8002e82:	b480      	push	{r7}
 8002e84:	b083      	sub	sp, #12
 8002e86:	af00      	add	r7, sp, #0
 8002e88:	6078      	str	r0, [r7, #4]
	return 1;
 8002e8a:	2301      	movs	r3, #1
}
 8002e8c:	4618      	mov	r0, r3
 8002e8e:	370c      	adds	r7, #12
 8002e90:	46bd      	mov	sp, r7
 8002e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e96:	4770      	bx	lr

08002e98 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002e98:	b480      	push	{r7}
 8002e9a:	b085      	sub	sp, #20
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	60f8      	str	r0, [r7, #12]
 8002ea0:	60b9      	str	r1, [r7, #8]
 8002ea2:	607a      	str	r2, [r7, #4]
	return 0;
 8002ea4:	2300      	movs	r3, #0
}
 8002ea6:	4618      	mov	r0, r3
 8002ea8:	3714      	adds	r7, #20
 8002eaa:	46bd      	mov	sp, r7
 8002eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb0:	4770      	bx	lr
	...

08002eb4 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8002eb4:	b580      	push	{r7, lr}
 8002eb6:	b084      	sub	sp, #16
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8002ebc:	4b11      	ldr	r3, [pc, #68]	; (8002f04 <_sbrk+0x50>)
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d102      	bne.n	8002eca <_sbrk+0x16>
		heap_end = &end;
 8002ec4:	4b0f      	ldr	r3, [pc, #60]	; (8002f04 <_sbrk+0x50>)
 8002ec6:	4a10      	ldr	r2, [pc, #64]	; (8002f08 <_sbrk+0x54>)
 8002ec8:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8002eca:	4b0e      	ldr	r3, [pc, #56]	; (8002f04 <_sbrk+0x50>)
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8002ed0:	4b0c      	ldr	r3, [pc, #48]	; (8002f04 <_sbrk+0x50>)
 8002ed2:	681a      	ldr	r2, [r3, #0]
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	4413      	add	r3, r2
 8002ed8:	466a      	mov	r2, sp
 8002eda:	4293      	cmp	r3, r2
 8002edc:	d907      	bls.n	8002eee <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8002ede:	f00a fee5 	bl	800dcac <__errno>
 8002ee2:	4602      	mov	r2, r0
 8002ee4:	230c      	movs	r3, #12
 8002ee6:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8002ee8:	f04f 33ff 	mov.w	r3, #4294967295
 8002eec:	e006      	b.n	8002efc <_sbrk+0x48>
	}

	heap_end += incr;
 8002eee:	4b05      	ldr	r3, [pc, #20]	; (8002f04 <_sbrk+0x50>)
 8002ef0:	681a      	ldr	r2, [r3, #0]
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	4413      	add	r3, r2
 8002ef6:	4a03      	ldr	r2, [pc, #12]	; (8002f04 <_sbrk+0x50>)
 8002ef8:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8002efa:	68fb      	ldr	r3, [r7, #12]
}
 8002efc:	4618      	mov	r0, r3
 8002efe:	3710      	adds	r7, #16
 8002f00:	46bd      	mov	sp, r7
 8002f02:	bd80      	pop	{r7, pc}
 8002f04:	2000057c 	.word	0x2000057c
 8002f08:	20002978 	.word	0x20002978

08002f0c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002f0c:	b480      	push	{r7}
 8002f0e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002f10:	4b08      	ldr	r3, [pc, #32]	; (8002f34 <SystemInit+0x28>)
 8002f12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f16:	4a07      	ldr	r2, [pc, #28]	; (8002f34 <SystemInit+0x28>)
 8002f18:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002f1c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002f20:	4b04      	ldr	r3, [pc, #16]	; (8002f34 <SystemInit+0x28>)
 8002f22:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002f26:	609a      	str	r2, [r3, #8]
#endif
}
 8002f28:	bf00      	nop
 8002f2a:	46bd      	mov	sp, r7
 8002f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f30:	4770      	bx	lr
 8002f32:	bf00      	nop
 8002f34:	e000ed00 	.word	0xe000ed00

08002f38 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002f38:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002f70 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002f3c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002f3e:	e003      	b.n	8002f48 <LoopCopyDataInit>

08002f40 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002f40:	4b0c      	ldr	r3, [pc, #48]	; (8002f74 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8002f42:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002f44:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002f46:	3104      	adds	r1, #4

08002f48 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002f48:	480b      	ldr	r0, [pc, #44]	; (8002f78 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8002f4a:	4b0c      	ldr	r3, [pc, #48]	; (8002f7c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002f4c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002f4e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002f50:	d3f6      	bcc.n	8002f40 <CopyDataInit>
  ldr  r2, =_sbss
 8002f52:	4a0b      	ldr	r2, [pc, #44]	; (8002f80 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002f54:	e002      	b.n	8002f5c <LoopFillZerobss>

08002f56 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002f56:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002f58:	f842 3b04 	str.w	r3, [r2], #4

08002f5c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002f5c:	4b09      	ldr	r3, [pc, #36]	; (8002f84 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002f5e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002f60:	d3f9      	bcc.n	8002f56 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002f62:	f7ff ffd3 	bl	8002f0c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002f66:	f00a fea7 	bl	800dcb8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002f6a:	f7ff f9d3 	bl	8002314 <main>
  bx  lr    
 8002f6e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002f70:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8002f74:	08012568 	.word	0x08012568
  ldr  r0, =_sdata
 8002f78:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002f7c:	20000360 	.word	0x20000360
  ldr  r2, =_sbss
 8002f80:	20000360 	.word	0x20000360
  ldr  r3, = _ebss
 8002f84:	20002974 	.word	0x20002974

08002f88 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002f88:	e7fe      	b.n	8002f88 <ADC_IRQHandler>
	...

08002f8c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002f8c:	b580      	push	{r7, lr}
 8002f8e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002f90:	4b0e      	ldr	r3, [pc, #56]	; (8002fcc <HAL_Init+0x40>)
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	4a0d      	ldr	r2, [pc, #52]	; (8002fcc <HAL_Init+0x40>)
 8002f96:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002f9a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002f9c:	4b0b      	ldr	r3, [pc, #44]	; (8002fcc <HAL_Init+0x40>)
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	4a0a      	ldr	r2, [pc, #40]	; (8002fcc <HAL_Init+0x40>)
 8002fa2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002fa6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002fa8:	4b08      	ldr	r3, [pc, #32]	; (8002fcc <HAL_Init+0x40>)
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	4a07      	ldr	r2, [pc, #28]	; (8002fcc <HAL_Init+0x40>)
 8002fae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002fb2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002fb4:	2003      	movs	r0, #3
 8002fb6:	f000 f94d 	bl	8003254 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002fba:	2000      	movs	r0, #0
 8002fbc:	f000 f808 	bl	8002fd0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002fc0:	f7ff fc96 	bl	80028f0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002fc4:	2300      	movs	r3, #0
}
 8002fc6:	4618      	mov	r0, r3
 8002fc8:	bd80      	pop	{r7, pc}
 8002fca:	bf00      	nop
 8002fcc:	40023c00 	.word	0x40023c00

08002fd0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002fd0:	b580      	push	{r7, lr}
 8002fd2:	b082      	sub	sp, #8
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002fd8:	4b12      	ldr	r3, [pc, #72]	; (8003024 <HAL_InitTick+0x54>)
 8002fda:	681a      	ldr	r2, [r3, #0]
 8002fdc:	4b12      	ldr	r3, [pc, #72]	; (8003028 <HAL_InitTick+0x58>)
 8002fde:	781b      	ldrb	r3, [r3, #0]
 8002fe0:	4619      	mov	r1, r3
 8002fe2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002fe6:	fbb3 f3f1 	udiv	r3, r3, r1
 8002fea:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fee:	4618      	mov	r0, r3
 8002ff0:	f000 f965 	bl	80032be <HAL_SYSTICK_Config>
 8002ff4:	4603      	mov	r3, r0
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d001      	beq.n	8002ffe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002ffa:	2301      	movs	r3, #1
 8002ffc:	e00e      	b.n	800301c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	2b0f      	cmp	r3, #15
 8003002:	d80a      	bhi.n	800301a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003004:	2200      	movs	r2, #0
 8003006:	6879      	ldr	r1, [r7, #4]
 8003008:	f04f 30ff 	mov.w	r0, #4294967295
 800300c:	f000 f92d 	bl	800326a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003010:	4a06      	ldr	r2, [pc, #24]	; (800302c <HAL_InitTick+0x5c>)
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003016:	2300      	movs	r3, #0
 8003018:	e000      	b.n	800301c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800301a:	2301      	movs	r3, #1
}
 800301c:	4618      	mov	r0, r3
 800301e:	3708      	adds	r7, #8
 8003020:	46bd      	mov	sp, r7
 8003022:	bd80      	pop	{r7, pc}
 8003024:	20000014 	.word	0x20000014
 8003028:	2000001c 	.word	0x2000001c
 800302c:	20000018 	.word	0x20000018

08003030 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003030:	b480      	push	{r7}
 8003032:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003034:	4b06      	ldr	r3, [pc, #24]	; (8003050 <HAL_IncTick+0x20>)
 8003036:	781b      	ldrb	r3, [r3, #0]
 8003038:	461a      	mov	r2, r3
 800303a:	4b06      	ldr	r3, [pc, #24]	; (8003054 <HAL_IncTick+0x24>)
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	4413      	add	r3, r2
 8003040:	4a04      	ldr	r2, [pc, #16]	; (8003054 <HAL_IncTick+0x24>)
 8003042:	6013      	str	r3, [r2, #0]
}
 8003044:	bf00      	nop
 8003046:	46bd      	mov	sp, r7
 8003048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800304c:	4770      	bx	lr
 800304e:	bf00      	nop
 8003050:	2000001c 	.word	0x2000001c
 8003054:	20000c60 	.word	0x20000c60

08003058 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003058:	b480      	push	{r7}
 800305a:	af00      	add	r7, sp, #0
  return uwTick;
 800305c:	4b03      	ldr	r3, [pc, #12]	; (800306c <HAL_GetTick+0x14>)
 800305e:	681b      	ldr	r3, [r3, #0]
}
 8003060:	4618      	mov	r0, r3
 8003062:	46bd      	mov	sp, r7
 8003064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003068:	4770      	bx	lr
 800306a:	bf00      	nop
 800306c:	20000c60 	.word	0x20000c60

08003070 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003070:	b580      	push	{r7, lr}
 8003072:	b084      	sub	sp, #16
 8003074:	af00      	add	r7, sp, #0
 8003076:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003078:	f7ff ffee 	bl	8003058 <HAL_GetTick>
 800307c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003088:	d005      	beq.n	8003096 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800308a:	4b09      	ldr	r3, [pc, #36]	; (80030b0 <HAL_Delay+0x40>)
 800308c:	781b      	ldrb	r3, [r3, #0]
 800308e:	461a      	mov	r2, r3
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	4413      	add	r3, r2
 8003094:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003096:	bf00      	nop
 8003098:	f7ff ffde 	bl	8003058 <HAL_GetTick>
 800309c:	4602      	mov	r2, r0
 800309e:	68bb      	ldr	r3, [r7, #8]
 80030a0:	1ad3      	subs	r3, r2, r3
 80030a2:	68fa      	ldr	r2, [r7, #12]
 80030a4:	429a      	cmp	r2, r3
 80030a6:	d8f7      	bhi.n	8003098 <HAL_Delay+0x28>
  {
  }
}
 80030a8:	bf00      	nop
 80030aa:	3710      	adds	r7, #16
 80030ac:	46bd      	mov	sp, r7
 80030ae:	bd80      	pop	{r7, pc}
 80030b0:	2000001c 	.word	0x2000001c

080030b4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80030b4:	b480      	push	{r7}
 80030b6:	b085      	sub	sp, #20
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	f003 0307 	and.w	r3, r3, #7
 80030c2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80030c4:	4b0c      	ldr	r3, [pc, #48]	; (80030f8 <__NVIC_SetPriorityGrouping+0x44>)
 80030c6:	68db      	ldr	r3, [r3, #12]
 80030c8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80030ca:	68ba      	ldr	r2, [r7, #8]
 80030cc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80030d0:	4013      	ands	r3, r2
 80030d2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80030d8:	68bb      	ldr	r3, [r7, #8]
 80030da:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80030dc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80030e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80030e4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80030e6:	4a04      	ldr	r2, [pc, #16]	; (80030f8 <__NVIC_SetPriorityGrouping+0x44>)
 80030e8:	68bb      	ldr	r3, [r7, #8]
 80030ea:	60d3      	str	r3, [r2, #12]
}
 80030ec:	bf00      	nop
 80030ee:	3714      	adds	r7, #20
 80030f0:	46bd      	mov	sp, r7
 80030f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f6:	4770      	bx	lr
 80030f8:	e000ed00 	.word	0xe000ed00

080030fc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80030fc:	b480      	push	{r7}
 80030fe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003100:	4b04      	ldr	r3, [pc, #16]	; (8003114 <__NVIC_GetPriorityGrouping+0x18>)
 8003102:	68db      	ldr	r3, [r3, #12]
 8003104:	0a1b      	lsrs	r3, r3, #8
 8003106:	f003 0307 	and.w	r3, r3, #7
}
 800310a:	4618      	mov	r0, r3
 800310c:	46bd      	mov	sp, r7
 800310e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003112:	4770      	bx	lr
 8003114:	e000ed00 	.word	0xe000ed00

08003118 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003118:	b480      	push	{r7}
 800311a:	b083      	sub	sp, #12
 800311c:	af00      	add	r7, sp, #0
 800311e:	4603      	mov	r3, r0
 8003120:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003122:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003126:	2b00      	cmp	r3, #0
 8003128:	db0b      	blt.n	8003142 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800312a:	79fb      	ldrb	r3, [r7, #7]
 800312c:	f003 021f 	and.w	r2, r3, #31
 8003130:	4907      	ldr	r1, [pc, #28]	; (8003150 <__NVIC_EnableIRQ+0x38>)
 8003132:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003136:	095b      	lsrs	r3, r3, #5
 8003138:	2001      	movs	r0, #1
 800313a:	fa00 f202 	lsl.w	r2, r0, r2
 800313e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003142:	bf00      	nop
 8003144:	370c      	adds	r7, #12
 8003146:	46bd      	mov	sp, r7
 8003148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800314c:	4770      	bx	lr
 800314e:	bf00      	nop
 8003150:	e000e100 	.word	0xe000e100

08003154 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003154:	b480      	push	{r7}
 8003156:	b083      	sub	sp, #12
 8003158:	af00      	add	r7, sp, #0
 800315a:	4603      	mov	r3, r0
 800315c:	6039      	str	r1, [r7, #0]
 800315e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003160:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003164:	2b00      	cmp	r3, #0
 8003166:	db0a      	blt.n	800317e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003168:	683b      	ldr	r3, [r7, #0]
 800316a:	b2da      	uxtb	r2, r3
 800316c:	490c      	ldr	r1, [pc, #48]	; (80031a0 <__NVIC_SetPriority+0x4c>)
 800316e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003172:	0112      	lsls	r2, r2, #4
 8003174:	b2d2      	uxtb	r2, r2
 8003176:	440b      	add	r3, r1
 8003178:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800317c:	e00a      	b.n	8003194 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800317e:	683b      	ldr	r3, [r7, #0]
 8003180:	b2da      	uxtb	r2, r3
 8003182:	4908      	ldr	r1, [pc, #32]	; (80031a4 <__NVIC_SetPriority+0x50>)
 8003184:	79fb      	ldrb	r3, [r7, #7]
 8003186:	f003 030f 	and.w	r3, r3, #15
 800318a:	3b04      	subs	r3, #4
 800318c:	0112      	lsls	r2, r2, #4
 800318e:	b2d2      	uxtb	r2, r2
 8003190:	440b      	add	r3, r1
 8003192:	761a      	strb	r2, [r3, #24]
}
 8003194:	bf00      	nop
 8003196:	370c      	adds	r7, #12
 8003198:	46bd      	mov	sp, r7
 800319a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800319e:	4770      	bx	lr
 80031a0:	e000e100 	.word	0xe000e100
 80031a4:	e000ed00 	.word	0xe000ed00

080031a8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80031a8:	b480      	push	{r7}
 80031aa:	b089      	sub	sp, #36	; 0x24
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	60f8      	str	r0, [r7, #12]
 80031b0:	60b9      	str	r1, [r7, #8]
 80031b2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	f003 0307 	and.w	r3, r3, #7
 80031ba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80031bc:	69fb      	ldr	r3, [r7, #28]
 80031be:	f1c3 0307 	rsb	r3, r3, #7
 80031c2:	2b04      	cmp	r3, #4
 80031c4:	bf28      	it	cs
 80031c6:	2304      	movcs	r3, #4
 80031c8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80031ca:	69fb      	ldr	r3, [r7, #28]
 80031cc:	3304      	adds	r3, #4
 80031ce:	2b06      	cmp	r3, #6
 80031d0:	d902      	bls.n	80031d8 <NVIC_EncodePriority+0x30>
 80031d2:	69fb      	ldr	r3, [r7, #28]
 80031d4:	3b03      	subs	r3, #3
 80031d6:	e000      	b.n	80031da <NVIC_EncodePriority+0x32>
 80031d8:	2300      	movs	r3, #0
 80031da:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80031dc:	f04f 32ff 	mov.w	r2, #4294967295
 80031e0:	69bb      	ldr	r3, [r7, #24]
 80031e2:	fa02 f303 	lsl.w	r3, r2, r3
 80031e6:	43da      	mvns	r2, r3
 80031e8:	68bb      	ldr	r3, [r7, #8]
 80031ea:	401a      	ands	r2, r3
 80031ec:	697b      	ldr	r3, [r7, #20]
 80031ee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80031f0:	f04f 31ff 	mov.w	r1, #4294967295
 80031f4:	697b      	ldr	r3, [r7, #20]
 80031f6:	fa01 f303 	lsl.w	r3, r1, r3
 80031fa:	43d9      	mvns	r1, r3
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003200:	4313      	orrs	r3, r2
         );
}
 8003202:	4618      	mov	r0, r3
 8003204:	3724      	adds	r7, #36	; 0x24
 8003206:	46bd      	mov	sp, r7
 8003208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800320c:	4770      	bx	lr
	...

08003210 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003210:	b580      	push	{r7, lr}
 8003212:	b082      	sub	sp, #8
 8003214:	af00      	add	r7, sp, #0
 8003216:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	3b01      	subs	r3, #1
 800321c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003220:	d301      	bcc.n	8003226 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003222:	2301      	movs	r3, #1
 8003224:	e00f      	b.n	8003246 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003226:	4a0a      	ldr	r2, [pc, #40]	; (8003250 <SysTick_Config+0x40>)
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	3b01      	subs	r3, #1
 800322c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800322e:	210f      	movs	r1, #15
 8003230:	f04f 30ff 	mov.w	r0, #4294967295
 8003234:	f7ff ff8e 	bl	8003154 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003238:	4b05      	ldr	r3, [pc, #20]	; (8003250 <SysTick_Config+0x40>)
 800323a:	2200      	movs	r2, #0
 800323c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800323e:	4b04      	ldr	r3, [pc, #16]	; (8003250 <SysTick_Config+0x40>)
 8003240:	2207      	movs	r2, #7
 8003242:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003244:	2300      	movs	r3, #0
}
 8003246:	4618      	mov	r0, r3
 8003248:	3708      	adds	r7, #8
 800324a:	46bd      	mov	sp, r7
 800324c:	bd80      	pop	{r7, pc}
 800324e:	bf00      	nop
 8003250:	e000e010 	.word	0xe000e010

08003254 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003254:	b580      	push	{r7, lr}
 8003256:	b082      	sub	sp, #8
 8003258:	af00      	add	r7, sp, #0
 800325a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800325c:	6878      	ldr	r0, [r7, #4]
 800325e:	f7ff ff29 	bl	80030b4 <__NVIC_SetPriorityGrouping>
}
 8003262:	bf00      	nop
 8003264:	3708      	adds	r7, #8
 8003266:	46bd      	mov	sp, r7
 8003268:	bd80      	pop	{r7, pc}

0800326a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800326a:	b580      	push	{r7, lr}
 800326c:	b086      	sub	sp, #24
 800326e:	af00      	add	r7, sp, #0
 8003270:	4603      	mov	r3, r0
 8003272:	60b9      	str	r1, [r7, #8]
 8003274:	607a      	str	r2, [r7, #4]
 8003276:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003278:	2300      	movs	r3, #0
 800327a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800327c:	f7ff ff3e 	bl	80030fc <__NVIC_GetPriorityGrouping>
 8003280:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003282:	687a      	ldr	r2, [r7, #4]
 8003284:	68b9      	ldr	r1, [r7, #8]
 8003286:	6978      	ldr	r0, [r7, #20]
 8003288:	f7ff ff8e 	bl	80031a8 <NVIC_EncodePriority>
 800328c:	4602      	mov	r2, r0
 800328e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003292:	4611      	mov	r1, r2
 8003294:	4618      	mov	r0, r3
 8003296:	f7ff ff5d 	bl	8003154 <__NVIC_SetPriority>
}
 800329a:	bf00      	nop
 800329c:	3718      	adds	r7, #24
 800329e:	46bd      	mov	sp, r7
 80032a0:	bd80      	pop	{r7, pc}

080032a2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80032a2:	b580      	push	{r7, lr}
 80032a4:	b082      	sub	sp, #8
 80032a6:	af00      	add	r7, sp, #0
 80032a8:	4603      	mov	r3, r0
 80032aa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80032ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032b0:	4618      	mov	r0, r3
 80032b2:	f7ff ff31 	bl	8003118 <__NVIC_EnableIRQ>
}
 80032b6:	bf00      	nop
 80032b8:	3708      	adds	r7, #8
 80032ba:	46bd      	mov	sp, r7
 80032bc:	bd80      	pop	{r7, pc}

080032be <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80032be:	b580      	push	{r7, lr}
 80032c0:	b082      	sub	sp, #8
 80032c2:	af00      	add	r7, sp, #0
 80032c4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80032c6:	6878      	ldr	r0, [r7, #4]
 80032c8:	f7ff ffa2 	bl	8003210 <SysTick_Config>
 80032cc:	4603      	mov	r3, r0
}
 80032ce:	4618      	mov	r0, r3
 80032d0:	3708      	adds	r7, #8
 80032d2:	46bd      	mov	sp, r7
 80032d4:	bd80      	pop	{r7, pc}
	...

080032d8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80032d8:	b580      	push	{r7, lr}
 80032da:	b086      	sub	sp, #24
 80032dc:	af00      	add	r7, sp, #0
 80032de:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80032e0:	2300      	movs	r3, #0
 80032e2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80032e4:	f7ff feb8 	bl	8003058 <HAL_GetTick>
 80032e8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d101      	bne.n	80032f4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80032f0:	2301      	movs	r3, #1
 80032f2:	e099      	b.n	8003428 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	2200      	movs	r2, #0
 80032f8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	2202      	movs	r2, #2
 8003300:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	681a      	ldr	r2, [r3, #0]
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	f022 0201 	bic.w	r2, r2, #1
 8003312:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003314:	e00f      	b.n	8003336 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003316:	f7ff fe9f 	bl	8003058 <HAL_GetTick>
 800331a:	4602      	mov	r2, r0
 800331c:	693b      	ldr	r3, [r7, #16]
 800331e:	1ad3      	subs	r3, r2, r3
 8003320:	2b05      	cmp	r3, #5
 8003322:	d908      	bls.n	8003336 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	2220      	movs	r2, #32
 8003328:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	2203      	movs	r2, #3
 800332e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003332:	2303      	movs	r3, #3
 8003334:	e078      	b.n	8003428 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	f003 0301 	and.w	r3, r3, #1
 8003340:	2b00      	cmp	r3, #0
 8003342:	d1e8      	bne.n	8003316 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800334c:	697a      	ldr	r2, [r7, #20]
 800334e:	4b38      	ldr	r3, [pc, #224]	; (8003430 <HAL_DMA_Init+0x158>)
 8003350:	4013      	ands	r3, r2
 8003352:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	685a      	ldr	r2, [r3, #4]
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	689b      	ldr	r3, [r3, #8]
 800335c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003362:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	691b      	ldr	r3, [r3, #16]
 8003368:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800336e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	699b      	ldr	r3, [r3, #24]
 8003374:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800337a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	6a1b      	ldr	r3, [r3, #32]
 8003380:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003382:	697a      	ldr	r2, [r7, #20]
 8003384:	4313      	orrs	r3, r2
 8003386:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800338c:	2b04      	cmp	r3, #4
 800338e:	d107      	bne.n	80033a0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003398:	4313      	orrs	r3, r2
 800339a:	697a      	ldr	r2, [r7, #20]
 800339c:	4313      	orrs	r3, r2
 800339e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	697a      	ldr	r2, [r7, #20]
 80033a6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	695b      	ldr	r3, [r3, #20]
 80033ae:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80033b0:	697b      	ldr	r3, [r7, #20]
 80033b2:	f023 0307 	bic.w	r3, r3, #7
 80033b6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033bc:	697a      	ldr	r2, [r7, #20]
 80033be:	4313      	orrs	r3, r2
 80033c0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033c6:	2b04      	cmp	r3, #4
 80033c8:	d117      	bne.n	80033fa <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033ce:	697a      	ldr	r2, [r7, #20]
 80033d0:	4313      	orrs	r3, r2
 80033d2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d00e      	beq.n	80033fa <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80033dc:	6878      	ldr	r0, [r7, #4]
 80033de:	f000 fa9d 	bl	800391c <DMA_CheckFifoParam>
 80033e2:	4603      	mov	r3, r0
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d008      	beq.n	80033fa <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	2240      	movs	r2, #64	; 0x40
 80033ec:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	2201      	movs	r2, #1
 80033f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80033f6:	2301      	movs	r3, #1
 80033f8:	e016      	b.n	8003428 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	697a      	ldr	r2, [r7, #20]
 8003400:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003402:	6878      	ldr	r0, [r7, #4]
 8003404:	f000 fa54 	bl	80038b0 <DMA_CalcBaseAndBitshift>
 8003408:	4603      	mov	r3, r0
 800340a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003410:	223f      	movs	r2, #63	; 0x3f
 8003412:	409a      	lsls	r2, r3
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	2200      	movs	r2, #0
 800341c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	2201      	movs	r2, #1
 8003422:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003426:	2300      	movs	r3, #0
}
 8003428:	4618      	mov	r0, r3
 800342a:	3718      	adds	r7, #24
 800342c:	46bd      	mov	sp, r7
 800342e:	bd80      	pop	{r7, pc}
 8003430:	f010803f 	.word	0xf010803f

08003434 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003434:	b580      	push	{r7, lr}
 8003436:	b086      	sub	sp, #24
 8003438:	af00      	add	r7, sp, #0
 800343a:	60f8      	str	r0, [r7, #12]
 800343c:	60b9      	str	r1, [r7, #8]
 800343e:	607a      	str	r2, [r7, #4]
 8003440:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003442:	2300      	movs	r3, #0
 8003444:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800344a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003452:	2b01      	cmp	r3, #1
 8003454:	d101      	bne.n	800345a <HAL_DMA_Start_IT+0x26>
 8003456:	2302      	movs	r3, #2
 8003458:	e040      	b.n	80034dc <HAL_DMA_Start_IT+0xa8>
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	2201      	movs	r2, #1
 800345e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003468:	b2db      	uxtb	r3, r3
 800346a:	2b01      	cmp	r3, #1
 800346c:	d12f      	bne.n	80034ce <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	2202      	movs	r2, #2
 8003472:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	2200      	movs	r2, #0
 800347a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800347c:	683b      	ldr	r3, [r7, #0]
 800347e:	687a      	ldr	r2, [r7, #4]
 8003480:	68b9      	ldr	r1, [r7, #8]
 8003482:	68f8      	ldr	r0, [r7, #12]
 8003484:	f000 f9e6 	bl	8003854 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800348c:	223f      	movs	r2, #63	; 0x3f
 800348e:	409a      	lsls	r2, r3
 8003490:	693b      	ldr	r3, [r7, #16]
 8003492:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	681a      	ldr	r2, [r3, #0]
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	f042 0216 	orr.w	r2, r2, #22
 80034a2:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d007      	beq.n	80034bc <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	681a      	ldr	r2, [r3, #0]
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	f042 0208 	orr.w	r2, r2, #8
 80034ba:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	681a      	ldr	r2, [r3, #0]
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	f042 0201 	orr.w	r2, r2, #1
 80034ca:	601a      	str	r2, [r3, #0]
 80034cc:	e005      	b.n	80034da <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	2200      	movs	r2, #0
 80034d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80034d6:	2302      	movs	r3, #2
 80034d8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80034da:	7dfb      	ldrb	r3, [r7, #23]
}
 80034dc:	4618      	mov	r0, r3
 80034de:	3718      	adds	r7, #24
 80034e0:	46bd      	mov	sp, r7
 80034e2:	bd80      	pop	{r7, pc}

080034e4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80034e4:	b480      	push	{r7}
 80034e6:	b083      	sub	sp, #12
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80034f2:	b2db      	uxtb	r3, r3
 80034f4:	2b02      	cmp	r3, #2
 80034f6:	d004      	beq.n	8003502 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	2280      	movs	r2, #128	; 0x80
 80034fc:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80034fe:	2301      	movs	r3, #1
 8003500:	e00c      	b.n	800351c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	2205      	movs	r2, #5
 8003506:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	681a      	ldr	r2, [r3, #0]
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	f022 0201 	bic.w	r2, r2, #1
 8003518:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800351a:	2300      	movs	r3, #0
}
 800351c:	4618      	mov	r0, r3
 800351e:	370c      	adds	r7, #12
 8003520:	46bd      	mov	sp, r7
 8003522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003526:	4770      	bx	lr

08003528 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003528:	b580      	push	{r7, lr}
 800352a:	b086      	sub	sp, #24
 800352c:	af00      	add	r7, sp, #0
 800352e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003530:	2300      	movs	r3, #0
 8003532:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003534:	4b92      	ldr	r3, [pc, #584]	; (8003780 <HAL_DMA_IRQHandler+0x258>)
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	4a92      	ldr	r2, [pc, #584]	; (8003784 <HAL_DMA_IRQHandler+0x25c>)
 800353a:	fba2 2303 	umull	r2, r3, r2, r3
 800353e:	0a9b      	lsrs	r3, r3, #10
 8003540:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003546:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003548:	693b      	ldr	r3, [r7, #16]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003552:	2208      	movs	r2, #8
 8003554:	409a      	lsls	r2, r3
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	4013      	ands	r3, r2
 800355a:	2b00      	cmp	r3, #0
 800355c:	d01a      	beq.n	8003594 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	f003 0304 	and.w	r3, r3, #4
 8003568:	2b00      	cmp	r3, #0
 800356a:	d013      	beq.n	8003594 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	681a      	ldr	r2, [r3, #0]
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	f022 0204 	bic.w	r2, r2, #4
 800357a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003580:	2208      	movs	r2, #8
 8003582:	409a      	lsls	r2, r3
 8003584:	693b      	ldr	r3, [r7, #16]
 8003586:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800358c:	f043 0201 	orr.w	r2, r3, #1
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003598:	2201      	movs	r2, #1
 800359a:	409a      	lsls	r2, r3
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	4013      	ands	r3, r2
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d012      	beq.n	80035ca <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	695b      	ldr	r3, [r3, #20]
 80035aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d00b      	beq.n	80035ca <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035b6:	2201      	movs	r2, #1
 80035b8:	409a      	lsls	r2, r3
 80035ba:	693b      	ldr	r3, [r7, #16]
 80035bc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035c2:	f043 0202 	orr.w	r2, r3, #2
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035ce:	2204      	movs	r2, #4
 80035d0:	409a      	lsls	r2, r3
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	4013      	ands	r3, r2
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d012      	beq.n	8003600 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f003 0302 	and.w	r3, r3, #2
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d00b      	beq.n	8003600 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035ec:	2204      	movs	r2, #4
 80035ee:	409a      	lsls	r2, r3
 80035f0:	693b      	ldr	r3, [r7, #16]
 80035f2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035f8:	f043 0204 	orr.w	r2, r3, #4
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003604:	2210      	movs	r2, #16
 8003606:	409a      	lsls	r2, r3
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	4013      	ands	r3, r2
 800360c:	2b00      	cmp	r3, #0
 800360e:	d043      	beq.n	8003698 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	f003 0308 	and.w	r3, r3, #8
 800361a:	2b00      	cmp	r3, #0
 800361c:	d03c      	beq.n	8003698 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003622:	2210      	movs	r2, #16
 8003624:	409a      	lsls	r2, r3
 8003626:	693b      	ldr	r3, [r7, #16]
 8003628:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003634:	2b00      	cmp	r3, #0
 8003636:	d018      	beq.n	800366a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003642:	2b00      	cmp	r3, #0
 8003644:	d108      	bne.n	8003658 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800364a:	2b00      	cmp	r3, #0
 800364c:	d024      	beq.n	8003698 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003652:	6878      	ldr	r0, [r7, #4]
 8003654:	4798      	blx	r3
 8003656:	e01f      	b.n	8003698 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800365c:	2b00      	cmp	r3, #0
 800365e:	d01b      	beq.n	8003698 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003664:	6878      	ldr	r0, [r7, #4]
 8003666:	4798      	blx	r3
 8003668:	e016      	b.n	8003698 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003674:	2b00      	cmp	r3, #0
 8003676:	d107      	bne.n	8003688 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	681a      	ldr	r2, [r3, #0]
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	f022 0208 	bic.w	r2, r2, #8
 8003686:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800368c:	2b00      	cmp	r3, #0
 800368e:	d003      	beq.n	8003698 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003694:	6878      	ldr	r0, [r7, #4]
 8003696:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800369c:	2220      	movs	r2, #32
 800369e:	409a      	lsls	r2, r3
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	4013      	ands	r3, r2
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	f000 808e 	beq.w	80037c6 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	f003 0310 	and.w	r3, r3, #16
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	f000 8086 	beq.w	80037c6 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036be:	2220      	movs	r2, #32
 80036c0:	409a      	lsls	r2, r3
 80036c2:	693b      	ldr	r3, [r7, #16]
 80036c4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80036cc:	b2db      	uxtb	r3, r3
 80036ce:	2b05      	cmp	r3, #5
 80036d0:	d136      	bne.n	8003740 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	681a      	ldr	r2, [r3, #0]
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	f022 0216 	bic.w	r2, r2, #22
 80036e0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	695a      	ldr	r2, [r3, #20]
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80036f0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d103      	bne.n	8003702 <HAL_DMA_IRQHandler+0x1da>
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d007      	beq.n	8003712 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	681a      	ldr	r2, [r3, #0]
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	f022 0208 	bic.w	r2, r2, #8
 8003710:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003716:	223f      	movs	r2, #63	; 0x3f
 8003718:	409a      	lsls	r2, r3
 800371a:	693b      	ldr	r3, [r7, #16]
 800371c:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	2200      	movs	r2, #0
 8003722:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	2201      	movs	r2, #1
 800372a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003732:	2b00      	cmp	r3, #0
 8003734:	d07d      	beq.n	8003832 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800373a:	6878      	ldr	r0, [r7, #4]
 800373c:	4798      	blx	r3
        }
        return;
 800373e:	e078      	b.n	8003832 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800374a:	2b00      	cmp	r3, #0
 800374c:	d01c      	beq.n	8003788 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003758:	2b00      	cmp	r3, #0
 800375a:	d108      	bne.n	800376e <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003760:	2b00      	cmp	r3, #0
 8003762:	d030      	beq.n	80037c6 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003768:	6878      	ldr	r0, [r7, #4]
 800376a:	4798      	blx	r3
 800376c:	e02b      	b.n	80037c6 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003772:	2b00      	cmp	r3, #0
 8003774:	d027      	beq.n	80037c6 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800377a:	6878      	ldr	r0, [r7, #4]
 800377c:	4798      	blx	r3
 800377e:	e022      	b.n	80037c6 <HAL_DMA_IRQHandler+0x29e>
 8003780:	20000014 	.word	0x20000014
 8003784:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003792:	2b00      	cmp	r3, #0
 8003794:	d10f      	bne.n	80037b6 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	681a      	ldr	r2, [r3, #0]
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	f022 0210 	bic.w	r2, r2, #16
 80037a4:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	2200      	movs	r2, #0
 80037aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	2201      	movs	r2, #1
 80037b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d003      	beq.n	80037c6 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037c2:	6878      	ldr	r0, [r7, #4]
 80037c4:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d032      	beq.n	8003834 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037d2:	f003 0301 	and.w	r3, r3, #1
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d022      	beq.n	8003820 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	2205      	movs	r2, #5
 80037de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	681a      	ldr	r2, [r3, #0]
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	f022 0201 	bic.w	r2, r2, #1
 80037f0:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80037f2:	68bb      	ldr	r3, [r7, #8]
 80037f4:	3301      	adds	r3, #1
 80037f6:	60bb      	str	r3, [r7, #8]
 80037f8:	697a      	ldr	r2, [r7, #20]
 80037fa:	429a      	cmp	r2, r3
 80037fc:	d307      	bcc.n	800380e <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	f003 0301 	and.w	r3, r3, #1
 8003808:	2b00      	cmp	r3, #0
 800380a:	d1f2      	bne.n	80037f2 <HAL_DMA_IRQHandler+0x2ca>
 800380c:	e000      	b.n	8003810 <HAL_DMA_IRQHandler+0x2e8>
          break;
 800380e:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	2200      	movs	r2, #0
 8003814:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	2201      	movs	r2, #1
 800381c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003824:	2b00      	cmp	r3, #0
 8003826:	d005      	beq.n	8003834 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800382c:	6878      	ldr	r0, [r7, #4]
 800382e:	4798      	blx	r3
 8003830:	e000      	b.n	8003834 <HAL_DMA_IRQHandler+0x30c>
        return;
 8003832:	bf00      	nop
    }
  }
}
 8003834:	3718      	adds	r7, #24
 8003836:	46bd      	mov	sp, r7
 8003838:	bd80      	pop	{r7, pc}
 800383a:	bf00      	nop

0800383c <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 800383c:	b480      	push	{r7}
 800383e:	b083      	sub	sp, #12
 8003840:	af00      	add	r7, sp, #0
 8003842:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8003848:	4618      	mov	r0, r3
 800384a:	370c      	adds	r7, #12
 800384c:	46bd      	mov	sp, r7
 800384e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003852:	4770      	bx	lr

08003854 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003854:	b480      	push	{r7}
 8003856:	b085      	sub	sp, #20
 8003858:	af00      	add	r7, sp, #0
 800385a:	60f8      	str	r0, [r7, #12]
 800385c:	60b9      	str	r1, [r7, #8]
 800385e:	607a      	str	r2, [r7, #4]
 8003860:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	681a      	ldr	r2, [r3, #0]
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003870:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	683a      	ldr	r2, [r7, #0]
 8003878:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	689b      	ldr	r3, [r3, #8]
 800387e:	2b40      	cmp	r3, #64	; 0x40
 8003880:	d108      	bne.n	8003894 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	687a      	ldr	r2, [r7, #4]
 8003888:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	68ba      	ldr	r2, [r7, #8]
 8003890:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003892:	e007      	b.n	80038a4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	68ba      	ldr	r2, [r7, #8]
 800389a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	687a      	ldr	r2, [r7, #4]
 80038a2:	60da      	str	r2, [r3, #12]
}
 80038a4:	bf00      	nop
 80038a6:	3714      	adds	r7, #20
 80038a8:	46bd      	mov	sp, r7
 80038aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ae:	4770      	bx	lr

080038b0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80038b0:	b480      	push	{r7}
 80038b2:	b085      	sub	sp, #20
 80038b4:	af00      	add	r7, sp, #0
 80038b6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	b2db      	uxtb	r3, r3
 80038be:	3b10      	subs	r3, #16
 80038c0:	4a14      	ldr	r2, [pc, #80]	; (8003914 <DMA_CalcBaseAndBitshift+0x64>)
 80038c2:	fba2 2303 	umull	r2, r3, r2, r3
 80038c6:	091b      	lsrs	r3, r3, #4
 80038c8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80038ca:	4a13      	ldr	r2, [pc, #76]	; (8003918 <DMA_CalcBaseAndBitshift+0x68>)
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	4413      	add	r3, r2
 80038d0:	781b      	ldrb	r3, [r3, #0]
 80038d2:	461a      	mov	r2, r3
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	2b03      	cmp	r3, #3
 80038dc:	d909      	bls.n	80038f2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80038e6:	f023 0303 	bic.w	r3, r3, #3
 80038ea:	1d1a      	adds	r2, r3, #4
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	659a      	str	r2, [r3, #88]	; 0x58
 80038f0:	e007      	b.n	8003902 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80038fa:	f023 0303 	bic.w	r3, r3, #3
 80038fe:	687a      	ldr	r2, [r7, #4]
 8003900:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003906:	4618      	mov	r0, r3
 8003908:	3714      	adds	r7, #20
 800390a:	46bd      	mov	sp, r7
 800390c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003910:	4770      	bx	lr
 8003912:	bf00      	nop
 8003914:	aaaaaaab 	.word	0xaaaaaaab
 8003918:	0801221c 	.word	0x0801221c

0800391c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800391c:	b480      	push	{r7}
 800391e:	b085      	sub	sp, #20
 8003920:	af00      	add	r7, sp, #0
 8003922:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003924:	2300      	movs	r3, #0
 8003926:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800392c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	699b      	ldr	r3, [r3, #24]
 8003932:	2b00      	cmp	r3, #0
 8003934:	d11f      	bne.n	8003976 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003936:	68bb      	ldr	r3, [r7, #8]
 8003938:	2b03      	cmp	r3, #3
 800393a:	d855      	bhi.n	80039e8 <DMA_CheckFifoParam+0xcc>
 800393c:	a201      	add	r2, pc, #4	; (adr r2, 8003944 <DMA_CheckFifoParam+0x28>)
 800393e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003942:	bf00      	nop
 8003944:	08003955 	.word	0x08003955
 8003948:	08003967 	.word	0x08003967
 800394c:	08003955 	.word	0x08003955
 8003950:	080039e9 	.word	0x080039e9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003958:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800395c:	2b00      	cmp	r3, #0
 800395e:	d045      	beq.n	80039ec <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8003960:	2301      	movs	r3, #1
 8003962:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003964:	e042      	b.n	80039ec <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800396a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800396e:	d13f      	bne.n	80039f0 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8003970:	2301      	movs	r3, #1
 8003972:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003974:	e03c      	b.n	80039f0 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	699b      	ldr	r3, [r3, #24]
 800397a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800397e:	d121      	bne.n	80039c4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003980:	68bb      	ldr	r3, [r7, #8]
 8003982:	2b03      	cmp	r3, #3
 8003984:	d836      	bhi.n	80039f4 <DMA_CheckFifoParam+0xd8>
 8003986:	a201      	add	r2, pc, #4	; (adr r2, 800398c <DMA_CheckFifoParam+0x70>)
 8003988:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800398c:	0800399d 	.word	0x0800399d
 8003990:	080039a3 	.word	0x080039a3
 8003994:	0800399d 	.word	0x0800399d
 8003998:	080039b5 	.word	0x080039b5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800399c:	2301      	movs	r3, #1
 800399e:	73fb      	strb	r3, [r7, #15]
      break;
 80039a0:	e02f      	b.n	8003a02 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039a6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d024      	beq.n	80039f8 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 80039ae:	2301      	movs	r3, #1
 80039b0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80039b2:	e021      	b.n	80039f8 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039b8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80039bc:	d11e      	bne.n	80039fc <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 80039be:	2301      	movs	r3, #1
 80039c0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80039c2:	e01b      	b.n	80039fc <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80039c4:	68bb      	ldr	r3, [r7, #8]
 80039c6:	2b02      	cmp	r3, #2
 80039c8:	d902      	bls.n	80039d0 <DMA_CheckFifoParam+0xb4>
 80039ca:	2b03      	cmp	r3, #3
 80039cc:	d003      	beq.n	80039d6 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80039ce:	e018      	b.n	8003a02 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 80039d0:	2301      	movs	r3, #1
 80039d2:	73fb      	strb	r3, [r7, #15]
      break;
 80039d4:	e015      	b.n	8003a02 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039da:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d00e      	beq.n	8003a00 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 80039e2:	2301      	movs	r3, #1
 80039e4:	73fb      	strb	r3, [r7, #15]
      break;
 80039e6:	e00b      	b.n	8003a00 <DMA_CheckFifoParam+0xe4>
      break;
 80039e8:	bf00      	nop
 80039ea:	e00a      	b.n	8003a02 <DMA_CheckFifoParam+0xe6>
      break;
 80039ec:	bf00      	nop
 80039ee:	e008      	b.n	8003a02 <DMA_CheckFifoParam+0xe6>
      break;
 80039f0:	bf00      	nop
 80039f2:	e006      	b.n	8003a02 <DMA_CheckFifoParam+0xe6>
      break;
 80039f4:	bf00      	nop
 80039f6:	e004      	b.n	8003a02 <DMA_CheckFifoParam+0xe6>
      break;
 80039f8:	bf00      	nop
 80039fa:	e002      	b.n	8003a02 <DMA_CheckFifoParam+0xe6>
      break;   
 80039fc:	bf00      	nop
 80039fe:	e000      	b.n	8003a02 <DMA_CheckFifoParam+0xe6>
      break;
 8003a00:	bf00      	nop
    }
  } 
  
  return status; 
 8003a02:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a04:	4618      	mov	r0, r3
 8003a06:	3714      	adds	r7, #20
 8003a08:	46bd      	mov	sp, r7
 8003a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a0e:	4770      	bx	lr

08003a10 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003a10:	b480      	push	{r7}
 8003a12:	b089      	sub	sp, #36	; 0x24
 8003a14:	af00      	add	r7, sp, #0
 8003a16:	6078      	str	r0, [r7, #4]
 8003a18:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003a1a:	2300      	movs	r3, #0
 8003a1c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003a1e:	2300      	movs	r3, #0
 8003a20:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003a22:	2300      	movs	r3, #0
 8003a24:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003a26:	2300      	movs	r3, #0
 8003a28:	61fb      	str	r3, [r7, #28]
 8003a2a:	e16b      	b.n	8003d04 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003a2c:	2201      	movs	r2, #1
 8003a2e:	69fb      	ldr	r3, [r7, #28]
 8003a30:	fa02 f303 	lsl.w	r3, r2, r3
 8003a34:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003a36:	683b      	ldr	r3, [r7, #0]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	697a      	ldr	r2, [r7, #20]
 8003a3c:	4013      	ands	r3, r2
 8003a3e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003a40:	693a      	ldr	r2, [r7, #16]
 8003a42:	697b      	ldr	r3, [r7, #20]
 8003a44:	429a      	cmp	r2, r3
 8003a46:	f040 815a 	bne.w	8003cfe <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003a4a:	683b      	ldr	r3, [r7, #0]
 8003a4c:	685b      	ldr	r3, [r3, #4]
 8003a4e:	2b01      	cmp	r3, #1
 8003a50:	d00b      	beq.n	8003a6a <HAL_GPIO_Init+0x5a>
 8003a52:	683b      	ldr	r3, [r7, #0]
 8003a54:	685b      	ldr	r3, [r3, #4]
 8003a56:	2b02      	cmp	r3, #2
 8003a58:	d007      	beq.n	8003a6a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003a5a:	683b      	ldr	r3, [r7, #0]
 8003a5c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003a5e:	2b11      	cmp	r3, #17
 8003a60:	d003      	beq.n	8003a6a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003a62:	683b      	ldr	r3, [r7, #0]
 8003a64:	685b      	ldr	r3, [r3, #4]
 8003a66:	2b12      	cmp	r3, #18
 8003a68:	d130      	bne.n	8003acc <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	689b      	ldr	r3, [r3, #8]
 8003a6e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003a70:	69fb      	ldr	r3, [r7, #28]
 8003a72:	005b      	lsls	r3, r3, #1
 8003a74:	2203      	movs	r2, #3
 8003a76:	fa02 f303 	lsl.w	r3, r2, r3
 8003a7a:	43db      	mvns	r3, r3
 8003a7c:	69ba      	ldr	r2, [r7, #24]
 8003a7e:	4013      	ands	r3, r2
 8003a80:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003a82:	683b      	ldr	r3, [r7, #0]
 8003a84:	68da      	ldr	r2, [r3, #12]
 8003a86:	69fb      	ldr	r3, [r7, #28]
 8003a88:	005b      	lsls	r3, r3, #1
 8003a8a:	fa02 f303 	lsl.w	r3, r2, r3
 8003a8e:	69ba      	ldr	r2, [r7, #24]
 8003a90:	4313      	orrs	r3, r2
 8003a92:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	69ba      	ldr	r2, [r7, #24]
 8003a98:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	685b      	ldr	r3, [r3, #4]
 8003a9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003aa0:	2201      	movs	r2, #1
 8003aa2:	69fb      	ldr	r3, [r7, #28]
 8003aa4:	fa02 f303 	lsl.w	r3, r2, r3
 8003aa8:	43db      	mvns	r3, r3
 8003aaa:	69ba      	ldr	r2, [r7, #24]
 8003aac:	4013      	ands	r3, r2
 8003aae:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003ab0:	683b      	ldr	r3, [r7, #0]
 8003ab2:	685b      	ldr	r3, [r3, #4]
 8003ab4:	091b      	lsrs	r3, r3, #4
 8003ab6:	f003 0201 	and.w	r2, r3, #1
 8003aba:	69fb      	ldr	r3, [r7, #28]
 8003abc:	fa02 f303 	lsl.w	r3, r2, r3
 8003ac0:	69ba      	ldr	r2, [r7, #24]
 8003ac2:	4313      	orrs	r3, r2
 8003ac4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	69ba      	ldr	r2, [r7, #24]
 8003aca:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	68db      	ldr	r3, [r3, #12]
 8003ad0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003ad2:	69fb      	ldr	r3, [r7, #28]
 8003ad4:	005b      	lsls	r3, r3, #1
 8003ad6:	2203      	movs	r2, #3
 8003ad8:	fa02 f303 	lsl.w	r3, r2, r3
 8003adc:	43db      	mvns	r3, r3
 8003ade:	69ba      	ldr	r2, [r7, #24]
 8003ae0:	4013      	ands	r3, r2
 8003ae2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003ae4:	683b      	ldr	r3, [r7, #0]
 8003ae6:	689a      	ldr	r2, [r3, #8]
 8003ae8:	69fb      	ldr	r3, [r7, #28]
 8003aea:	005b      	lsls	r3, r3, #1
 8003aec:	fa02 f303 	lsl.w	r3, r2, r3
 8003af0:	69ba      	ldr	r2, [r7, #24]
 8003af2:	4313      	orrs	r3, r2
 8003af4:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	69ba      	ldr	r2, [r7, #24]
 8003afa:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003afc:	683b      	ldr	r3, [r7, #0]
 8003afe:	685b      	ldr	r3, [r3, #4]
 8003b00:	2b02      	cmp	r3, #2
 8003b02:	d003      	beq.n	8003b0c <HAL_GPIO_Init+0xfc>
 8003b04:	683b      	ldr	r3, [r7, #0]
 8003b06:	685b      	ldr	r3, [r3, #4]
 8003b08:	2b12      	cmp	r3, #18
 8003b0a:	d123      	bne.n	8003b54 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003b0c:	69fb      	ldr	r3, [r7, #28]
 8003b0e:	08da      	lsrs	r2, r3, #3
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	3208      	adds	r2, #8
 8003b14:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003b18:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003b1a:	69fb      	ldr	r3, [r7, #28]
 8003b1c:	f003 0307 	and.w	r3, r3, #7
 8003b20:	009b      	lsls	r3, r3, #2
 8003b22:	220f      	movs	r2, #15
 8003b24:	fa02 f303 	lsl.w	r3, r2, r3
 8003b28:	43db      	mvns	r3, r3
 8003b2a:	69ba      	ldr	r2, [r7, #24]
 8003b2c:	4013      	ands	r3, r2
 8003b2e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003b30:	683b      	ldr	r3, [r7, #0]
 8003b32:	691a      	ldr	r2, [r3, #16]
 8003b34:	69fb      	ldr	r3, [r7, #28]
 8003b36:	f003 0307 	and.w	r3, r3, #7
 8003b3a:	009b      	lsls	r3, r3, #2
 8003b3c:	fa02 f303 	lsl.w	r3, r2, r3
 8003b40:	69ba      	ldr	r2, [r7, #24]
 8003b42:	4313      	orrs	r3, r2
 8003b44:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003b46:	69fb      	ldr	r3, [r7, #28]
 8003b48:	08da      	lsrs	r2, r3, #3
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	3208      	adds	r2, #8
 8003b4e:	69b9      	ldr	r1, [r7, #24]
 8003b50:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003b5a:	69fb      	ldr	r3, [r7, #28]
 8003b5c:	005b      	lsls	r3, r3, #1
 8003b5e:	2203      	movs	r2, #3
 8003b60:	fa02 f303 	lsl.w	r3, r2, r3
 8003b64:	43db      	mvns	r3, r3
 8003b66:	69ba      	ldr	r2, [r7, #24]
 8003b68:	4013      	ands	r3, r2
 8003b6a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003b6c:	683b      	ldr	r3, [r7, #0]
 8003b6e:	685b      	ldr	r3, [r3, #4]
 8003b70:	f003 0203 	and.w	r2, r3, #3
 8003b74:	69fb      	ldr	r3, [r7, #28]
 8003b76:	005b      	lsls	r3, r3, #1
 8003b78:	fa02 f303 	lsl.w	r3, r2, r3
 8003b7c:	69ba      	ldr	r2, [r7, #24]
 8003b7e:	4313      	orrs	r3, r2
 8003b80:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	69ba      	ldr	r2, [r7, #24]
 8003b86:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003b88:	683b      	ldr	r3, [r7, #0]
 8003b8a:	685b      	ldr	r3, [r3, #4]
 8003b8c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	f000 80b4 	beq.w	8003cfe <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003b96:	2300      	movs	r3, #0
 8003b98:	60fb      	str	r3, [r7, #12]
 8003b9a:	4b5f      	ldr	r3, [pc, #380]	; (8003d18 <HAL_GPIO_Init+0x308>)
 8003b9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b9e:	4a5e      	ldr	r2, [pc, #376]	; (8003d18 <HAL_GPIO_Init+0x308>)
 8003ba0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003ba4:	6453      	str	r3, [r2, #68]	; 0x44
 8003ba6:	4b5c      	ldr	r3, [pc, #368]	; (8003d18 <HAL_GPIO_Init+0x308>)
 8003ba8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003baa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003bae:	60fb      	str	r3, [r7, #12]
 8003bb0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003bb2:	4a5a      	ldr	r2, [pc, #360]	; (8003d1c <HAL_GPIO_Init+0x30c>)
 8003bb4:	69fb      	ldr	r3, [r7, #28]
 8003bb6:	089b      	lsrs	r3, r3, #2
 8003bb8:	3302      	adds	r3, #2
 8003bba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003bbe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003bc0:	69fb      	ldr	r3, [r7, #28]
 8003bc2:	f003 0303 	and.w	r3, r3, #3
 8003bc6:	009b      	lsls	r3, r3, #2
 8003bc8:	220f      	movs	r2, #15
 8003bca:	fa02 f303 	lsl.w	r3, r2, r3
 8003bce:	43db      	mvns	r3, r3
 8003bd0:	69ba      	ldr	r2, [r7, #24]
 8003bd2:	4013      	ands	r3, r2
 8003bd4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	4a51      	ldr	r2, [pc, #324]	; (8003d20 <HAL_GPIO_Init+0x310>)
 8003bda:	4293      	cmp	r3, r2
 8003bdc:	d02b      	beq.n	8003c36 <HAL_GPIO_Init+0x226>
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	4a50      	ldr	r2, [pc, #320]	; (8003d24 <HAL_GPIO_Init+0x314>)
 8003be2:	4293      	cmp	r3, r2
 8003be4:	d025      	beq.n	8003c32 <HAL_GPIO_Init+0x222>
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	4a4f      	ldr	r2, [pc, #316]	; (8003d28 <HAL_GPIO_Init+0x318>)
 8003bea:	4293      	cmp	r3, r2
 8003bec:	d01f      	beq.n	8003c2e <HAL_GPIO_Init+0x21e>
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	4a4e      	ldr	r2, [pc, #312]	; (8003d2c <HAL_GPIO_Init+0x31c>)
 8003bf2:	4293      	cmp	r3, r2
 8003bf4:	d019      	beq.n	8003c2a <HAL_GPIO_Init+0x21a>
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	4a4d      	ldr	r2, [pc, #308]	; (8003d30 <HAL_GPIO_Init+0x320>)
 8003bfa:	4293      	cmp	r3, r2
 8003bfc:	d013      	beq.n	8003c26 <HAL_GPIO_Init+0x216>
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	4a4c      	ldr	r2, [pc, #304]	; (8003d34 <HAL_GPIO_Init+0x324>)
 8003c02:	4293      	cmp	r3, r2
 8003c04:	d00d      	beq.n	8003c22 <HAL_GPIO_Init+0x212>
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	4a4b      	ldr	r2, [pc, #300]	; (8003d38 <HAL_GPIO_Init+0x328>)
 8003c0a:	4293      	cmp	r3, r2
 8003c0c:	d007      	beq.n	8003c1e <HAL_GPIO_Init+0x20e>
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	4a4a      	ldr	r2, [pc, #296]	; (8003d3c <HAL_GPIO_Init+0x32c>)
 8003c12:	4293      	cmp	r3, r2
 8003c14:	d101      	bne.n	8003c1a <HAL_GPIO_Init+0x20a>
 8003c16:	2307      	movs	r3, #7
 8003c18:	e00e      	b.n	8003c38 <HAL_GPIO_Init+0x228>
 8003c1a:	2308      	movs	r3, #8
 8003c1c:	e00c      	b.n	8003c38 <HAL_GPIO_Init+0x228>
 8003c1e:	2306      	movs	r3, #6
 8003c20:	e00a      	b.n	8003c38 <HAL_GPIO_Init+0x228>
 8003c22:	2305      	movs	r3, #5
 8003c24:	e008      	b.n	8003c38 <HAL_GPIO_Init+0x228>
 8003c26:	2304      	movs	r3, #4
 8003c28:	e006      	b.n	8003c38 <HAL_GPIO_Init+0x228>
 8003c2a:	2303      	movs	r3, #3
 8003c2c:	e004      	b.n	8003c38 <HAL_GPIO_Init+0x228>
 8003c2e:	2302      	movs	r3, #2
 8003c30:	e002      	b.n	8003c38 <HAL_GPIO_Init+0x228>
 8003c32:	2301      	movs	r3, #1
 8003c34:	e000      	b.n	8003c38 <HAL_GPIO_Init+0x228>
 8003c36:	2300      	movs	r3, #0
 8003c38:	69fa      	ldr	r2, [r7, #28]
 8003c3a:	f002 0203 	and.w	r2, r2, #3
 8003c3e:	0092      	lsls	r2, r2, #2
 8003c40:	4093      	lsls	r3, r2
 8003c42:	69ba      	ldr	r2, [r7, #24]
 8003c44:	4313      	orrs	r3, r2
 8003c46:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003c48:	4934      	ldr	r1, [pc, #208]	; (8003d1c <HAL_GPIO_Init+0x30c>)
 8003c4a:	69fb      	ldr	r3, [r7, #28]
 8003c4c:	089b      	lsrs	r3, r3, #2
 8003c4e:	3302      	adds	r3, #2
 8003c50:	69ba      	ldr	r2, [r7, #24]
 8003c52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003c56:	4b3a      	ldr	r3, [pc, #232]	; (8003d40 <HAL_GPIO_Init+0x330>)
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003c5c:	693b      	ldr	r3, [r7, #16]
 8003c5e:	43db      	mvns	r3, r3
 8003c60:	69ba      	ldr	r2, [r7, #24]
 8003c62:	4013      	ands	r3, r2
 8003c64:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003c66:	683b      	ldr	r3, [r7, #0]
 8003c68:	685b      	ldr	r3, [r3, #4]
 8003c6a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d003      	beq.n	8003c7a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003c72:	69ba      	ldr	r2, [r7, #24]
 8003c74:	693b      	ldr	r3, [r7, #16]
 8003c76:	4313      	orrs	r3, r2
 8003c78:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003c7a:	4a31      	ldr	r2, [pc, #196]	; (8003d40 <HAL_GPIO_Init+0x330>)
 8003c7c:	69bb      	ldr	r3, [r7, #24]
 8003c7e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003c80:	4b2f      	ldr	r3, [pc, #188]	; (8003d40 <HAL_GPIO_Init+0x330>)
 8003c82:	685b      	ldr	r3, [r3, #4]
 8003c84:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003c86:	693b      	ldr	r3, [r7, #16]
 8003c88:	43db      	mvns	r3, r3
 8003c8a:	69ba      	ldr	r2, [r7, #24]
 8003c8c:	4013      	ands	r3, r2
 8003c8e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003c90:	683b      	ldr	r3, [r7, #0]
 8003c92:	685b      	ldr	r3, [r3, #4]
 8003c94:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d003      	beq.n	8003ca4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003c9c:	69ba      	ldr	r2, [r7, #24]
 8003c9e:	693b      	ldr	r3, [r7, #16]
 8003ca0:	4313      	orrs	r3, r2
 8003ca2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003ca4:	4a26      	ldr	r2, [pc, #152]	; (8003d40 <HAL_GPIO_Init+0x330>)
 8003ca6:	69bb      	ldr	r3, [r7, #24]
 8003ca8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003caa:	4b25      	ldr	r3, [pc, #148]	; (8003d40 <HAL_GPIO_Init+0x330>)
 8003cac:	689b      	ldr	r3, [r3, #8]
 8003cae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003cb0:	693b      	ldr	r3, [r7, #16]
 8003cb2:	43db      	mvns	r3, r3
 8003cb4:	69ba      	ldr	r2, [r7, #24]
 8003cb6:	4013      	ands	r3, r2
 8003cb8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003cba:	683b      	ldr	r3, [r7, #0]
 8003cbc:	685b      	ldr	r3, [r3, #4]
 8003cbe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d003      	beq.n	8003cce <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8003cc6:	69ba      	ldr	r2, [r7, #24]
 8003cc8:	693b      	ldr	r3, [r7, #16]
 8003cca:	4313      	orrs	r3, r2
 8003ccc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003cce:	4a1c      	ldr	r2, [pc, #112]	; (8003d40 <HAL_GPIO_Init+0x330>)
 8003cd0:	69bb      	ldr	r3, [r7, #24]
 8003cd2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003cd4:	4b1a      	ldr	r3, [pc, #104]	; (8003d40 <HAL_GPIO_Init+0x330>)
 8003cd6:	68db      	ldr	r3, [r3, #12]
 8003cd8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003cda:	693b      	ldr	r3, [r7, #16]
 8003cdc:	43db      	mvns	r3, r3
 8003cde:	69ba      	ldr	r2, [r7, #24]
 8003ce0:	4013      	ands	r3, r2
 8003ce2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003ce4:	683b      	ldr	r3, [r7, #0]
 8003ce6:	685b      	ldr	r3, [r3, #4]
 8003ce8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d003      	beq.n	8003cf8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003cf0:	69ba      	ldr	r2, [r7, #24]
 8003cf2:	693b      	ldr	r3, [r7, #16]
 8003cf4:	4313      	orrs	r3, r2
 8003cf6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003cf8:	4a11      	ldr	r2, [pc, #68]	; (8003d40 <HAL_GPIO_Init+0x330>)
 8003cfa:	69bb      	ldr	r3, [r7, #24]
 8003cfc:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003cfe:	69fb      	ldr	r3, [r7, #28]
 8003d00:	3301      	adds	r3, #1
 8003d02:	61fb      	str	r3, [r7, #28]
 8003d04:	69fb      	ldr	r3, [r7, #28]
 8003d06:	2b0f      	cmp	r3, #15
 8003d08:	f67f ae90 	bls.w	8003a2c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003d0c:	bf00      	nop
 8003d0e:	3724      	adds	r7, #36	; 0x24
 8003d10:	46bd      	mov	sp, r7
 8003d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d16:	4770      	bx	lr
 8003d18:	40023800 	.word	0x40023800
 8003d1c:	40013800 	.word	0x40013800
 8003d20:	40020000 	.word	0x40020000
 8003d24:	40020400 	.word	0x40020400
 8003d28:	40020800 	.word	0x40020800
 8003d2c:	40020c00 	.word	0x40020c00
 8003d30:	40021000 	.word	0x40021000
 8003d34:	40021400 	.word	0x40021400
 8003d38:	40021800 	.word	0x40021800
 8003d3c:	40021c00 	.word	0x40021c00
 8003d40:	40013c00 	.word	0x40013c00

08003d44 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003d44:	b480      	push	{r7}
 8003d46:	b085      	sub	sp, #20
 8003d48:	af00      	add	r7, sp, #0
 8003d4a:	6078      	str	r0, [r7, #4]
 8003d4c:	460b      	mov	r3, r1
 8003d4e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	691a      	ldr	r2, [r3, #16]
 8003d54:	887b      	ldrh	r3, [r7, #2]
 8003d56:	4013      	ands	r3, r2
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d002      	beq.n	8003d62 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003d5c:	2301      	movs	r3, #1
 8003d5e:	73fb      	strb	r3, [r7, #15]
 8003d60:	e001      	b.n	8003d66 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003d62:	2300      	movs	r3, #0
 8003d64:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003d66:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d68:	4618      	mov	r0, r3
 8003d6a:	3714      	adds	r7, #20
 8003d6c:	46bd      	mov	sp, r7
 8003d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d72:	4770      	bx	lr

08003d74 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003d74:	b480      	push	{r7}
 8003d76:	b083      	sub	sp, #12
 8003d78:	af00      	add	r7, sp, #0
 8003d7a:	6078      	str	r0, [r7, #4]
 8003d7c:	460b      	mov	r3, r1
 8003d7e:	807b      	strh	r3, [r7, #2]
 8003d80:	4613      	mov	r3, r2
 8003d82:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003d84:	787b      	ldrb	r3, [r7, #1]
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d003      	beq.n	8003d92 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003d8a:	887a      	ldrh	r2, [r7, #2]
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003d90:	e003      	b.n	8003d9a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003d92:	887b      	ldrh	r3, [r7, #2]
 8003d94:	041a      	lsls	r2, r3, #16
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	619a      	str	r2, [r3, #24]
}
 8003d9a:	bf00      	nop
 8003d9c:	370c      	adds	r7, #12
 8003d9e:	46bd      	mov	sp, r7
 8003da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da4:	4770      	bx	lr

08003da6 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003da6:	b480      	push	{r7}
 8003da8:	b083      	sub	sp, #12
 8003daa:	af00      	add	r7, sp, #0
 8003dac:	6078      	str	r0, [r7, #4]
 8003dae:	460b      	mov	r3, r1
 8003db0:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	695a      	ldr	r2, [r3, #20]
 8003db6:	887b      	ldrh	r3, [r7, #2]
 8003db8:	401a      	ands	r2, r3
 8003dba:	887b      	ldrh	r3, [r7, #2]
 8003dbc:	429a      	cmp	r2, r3
 8003dbe:	d104      	bne.n	8003dca <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8003dc0:	887b      	ldrh	r3, [r7, #2]
 8003dc2:	041a      	lsls	r2, r3, #16
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8003dc8:	e002      	b.n	8003dd0 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8003dca:	887a      	ldrh	r2, [r7, #2]
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	619a      	str	r2, [r3, #24]
}
 8003dd0:	bf00      	nop
 8003dd2:	370c      	adds	r7, #12
 8003dd4:	46bd      	mov	sp, r7
 8003dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dda:	4770      	bx	lr

08003ddc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003ddc:	b580      	push	{r7, lr}
 8003dde:	b082      	sub	sp, #8
 8003de0:	af00      	add	r7, sp, #0
 8003de2:	4603      	mov	r3, r0
 8003de4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003de6:	4b08      	ldr	r3, [pc, #32]	; (8003e08 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003de8:	695a      	ldr	r2, [r3, #20]
 8003dea:	88fb      	ldrh	r3, [r7, #6]
 8003dec:	4013      	ands	r3, r2
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d006      	beq.n	8003e00 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003df2:	4a05      	ldr	r2, [pc, #20]	; (8003e08 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003df4:	88fb      	ldrh	r3, [r7, #6]
 8003df6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003df8:	88fb      	ldrh	r3, [r7, #6]
 8003dfa:	4618      	mov	r0, r3
 8003dfc:	f7fe fd62 	bl	80028c4 <HAL_GPIO_EXTI_Callback>
  }
}
 8003e00:	bf00      	nop
 8003e02:	3708      	adds	r7, #8
 8003e04:	46bd      	mov	sp, r7
 8003e06:	bd80      	pop	{r7, pc}
 8003e08:	40013c00 	.word	0x40013c00

08003e0c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003e0c:	b580      	push	{r7, lr}
 8003e0e:	b084      	sub	sp, #16
 8003e10:	af00      	add	r7, sp, #0
 8003e12:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d101      	bne.n	8003e1e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003e1a:	2301      	movs	r3, #1
 8003e1c:	e11f      	b.n	800405e <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e24:	b2db      	uxtb	r3, r3
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d106      	bne.n	8003e38 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	2200      	movs	r2, #0
 8003e2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003e32:	6878      	ldr	r0, [r7, #4]
 8003e34:	f7fe fd84 	bl	8002940 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	2224      	movs	r2, #36	; 0x24
 8003e3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	681a      	ldr	r2, [r3, #0]
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	f022 0201 	bic.w	r2, r2, #1
 8003e4e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	681a      	ldr	r2, [r3, #0]
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003e5e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	681a      	ldr	r2, [r3, #0]
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003e6e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003e70:	f002 fd1a 	bl	80068a8 <HAL_RCC_GetPCLK1Freq>
 8003e74:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	685b      	ldr	r3, [r3, #4]
 8003e7a:	4a7b      	ldr	r2, [pc, #492]	; (8004068 <HAL_I2C_Init+0x25c>)
 8003e7c:	4293      	cmp	r3, r2
 8003e7e:	d807      	bhi.n	8003e90 <HAL_I2C_Init+0x84>
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	4a7a      	ldr	r2, [pc, #488]	; (800406c <HAL_I2C_Init+0x260>)
 8003e84:	4293      	cmp	r3, r2
 8003e86:	bf94      	ite	ls
 8003e88:	2301      	movls	r3, #1
 8003e8a:	2300      	movhi	r3, #0
 8003e8c:	b2db      	uxtb	r3, r3
 8003e8e:	e006      	b.n	8003e9e <HAL_I2C_Init+0x92>
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	4a77      	ldr	r2, [pc, #476]	; (8004070 <HAL_I2C_Init+0x264>)
 8003e94:	4293      	cmp	r3, r2
 8003e96:	bf94      	ite	ls
 8003e98:	2301      	movls	r3, #1
 8003e9a:	2300      	movhi	r3, #0
 8003e9c:	b2db      	uxtb	r3, r3
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d001      	beq.n	8003ea6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003ea2:	2301      	movs	r3, #1
 8003ea4:	e0db      	b.n	800405e <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	4a72      	ldr	r2, [pc, #456]	; (8004074 <HAL_I2C_Init+0x268>)
 8003eaa:	fba2 2303 	umull	r2, r3, r2, r3
 8003eae:	0c9b      	lsrs	r3, r3, #18
 8003eb0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	685b      	ldr	r3, [r3, #4]
 8003eb8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	68ba      	ldr	r2, [r7, #8]
 8003ec2:	430a      	orrs	r2, r1
 8003ec4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	6a1b      	ldr	r3, [r3, #32]
 8003ecc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	685b      	ldr	r3, [r3, #4]
 8003ed4:	4a64      	ldr	r2, [pc, #400]	; (8004068 <HAL_I2C_Init+0x25c>)
 8003ed6:	4293      	cmp	r3, r2
 8003ed8:	d802      	bhi.n	8003ee0 <HAL_I2C_Init+0xd4>
 8003eda:	68bb      	ldr	r3, [r7, #8]
 8003edc:	3301      	adds	r3, #1
 8003ede:	e009      	b.n	8003ef4 <HAL_I2C_Init+0xe8>
 8003ee0:	68bb      	ldr	r3, [r7, #8]
 8003ee2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003ee6:	fb02 f303 	mul.w	r3, r2, r3
 8003eea:	4a63      	ldr	r2, [pc, #396]	; (8004078 <HAL_I2C_Init+0x26c>)
 8003eec:	fba2 2303 	umull	r2, r3, r2, r3
 8003ef0:	099b      	lsrs	r3, r3, #6
 8003ef2:	3301      	adds	r3, #1
 8003ef4:	687a      	ldr	r2, [r7, #4]
 8003ef6:	6812      	ldr	r2, [r2, #0]
 8003ef8:	430b      	orrs	r3, r1
 8003efa:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	69db      	ldr	r3, [r3, #28]
 8003f02:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003f06:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	685b      	ldr	r3, [r3, #4]
 8003f0e:	4956      	ldr	r1, [pc, #344]	; (8004068 <HAL_I2C_Init+0x25c>)
 8003f10:	428b      	cmp	r3, r1
 8003f12:	d80d      	bhi.n	8003f30 <HAL_I2C_Init+0x124>
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	1e59      	subs	r1, r3, #1
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	685b      	ldr	r3, [r3, #4]
 8003f1c:	005b      	lsls	r3, r3, #1
 8003f1e:	fbb1 f3f3 	udiv	r3, r1, r3
 8003f22:	3301      	adds	r3, #1
 8003f24:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003f28:	2b04      	cmp	r3, #4
 8003f2a:	bf38      	it	cc
 8003f2c:	2304      	movcc	r3, #4
 8003f2e:	e04f      	b.n	8003fd0 <HAL_I2C_Init+0x1c4>
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	689b      	ldr	r3, [r3, #8]
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d111      	bne.n	8003f5c <HAL_I2C_Init+0x150>
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	1e58      	subs	r0, r3, #1
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	6859      	ldr	r1, [r3, #4]
 8003f40:	460b      	mov	r3, r1
 8003f42:	005b      	lsls	r3, r3, #1
 8003f44:	440b      	add	r3, r1
 8003f46:	fbb0 f3f3 	udiv	r3, r0, r3
 8003f4a:	3301      	adds	r3, #1
 8003f4c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	bf0c      	ite	eq
 8003f54:	2301      	moveq	r3, #1
 8003f56:	2300      	movne	r3, #0
 8003f58:	b2db      	uxtb	r3, r3
 8003f5a:	e012      	b.n	8003f82 <HAL_I2C_Init+0x176>
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	1e58      	subs	r0, r3, #1
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	6859      	ldr	r1, [r3, #4]
 8003f64:	460b      	mov	r3, r1
 8003f66:	009b      	lsls	r3, r3, #2
 8003f68:	440b      	add	r3, r1
 8003f6a:	0099      	lsls	r1, r3, #2
 8003f6c:	440b      	add	r3, r1
 8003f6e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003f72:	3301      	adds	r3, #1
 8003f74:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	bf0c      	ite	eq
 8003f7c:	2301      	moveq	r3, #1
 8003f7e:	2300      	movne	r3, #0
 8003f80:	b2db      	uxtb	r3, r3
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d001      	beq.n	8003f8a <HAL_I2C_Init+0x17e>
 8003f86:	2301      	movs	r3, #1
 8003f88:	e022      	b.n	8003fd0 <HAL_I2C_Init+0x1c4>
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	689b      	ldr	r3, [r3, #8]
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d10e      	bne.n	8003fb0 <HAL_I2C_Init+0x1a4>
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	1e58      	subs	r0, r3, #1
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	6859      	ldr	r1, [r3, #4]
 8003f9a:	460b      	mov	r3, r1
 8003f9c:	005b      	lsls	r3, r3, #1
 8003f9e:	440b      	add	r3, r1
 8003fa0:	fbb0 f3f3 	udiv	r3, r0, r3
 8003fa4:	3301      	adds	r3, #1
 8003fa6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003faa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003fae:	e00f      	b.n	8003fd0 <HAL_I2C_Init+0x1c4>
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	1e58      	subs	r0, r3, #1
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	6859      	ldr	r1, [r3, #4]
 8003fb8:	460b      	mov	r3, r1
 8003fba:	009b      	lsls	r3, r3, #2
 8003fbc:	440b      	add	r3, r1
 8003fbe:	0099      	lsls	r1, r3, #2
 8003fc0:	440b      	add	r3, r1
 8003fc2:	fbb0 f3f3 	udiv	r3, r0, r3
 8003fc6:	3301      	adds	r3, #1
 8003fc8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003fcc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003fd0:	6879      	ldr	r1, [r7, #4]
 8003fd2:	6809      	ldr	r1, [r1, #0]
 8003fd4:	4313      	orrs	r3, r2
 8003fd6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	69da      	ldr	r2, [r3, #28]
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	6a1b      	ldr	r3, [r3, #32]
 8003fea:	431a      	orrs	r2, r3
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	430a      	orrs	r2, r1
 8003ff2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	689b      	ldr	r3, [r3, #8]
 8003ffa:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003ffe:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004002:	687a      	ldr	r2, [r7, #4]
 8004004:	6911      	ldr	r1, [r2, #16]
 8004006:	687a      	ldr	r2, [r7, #4]
 8004008:	68d2      	ldr	r2, [r2, #12]
 800400a:	4311      	orrs	r1, r2
 800400c:	687a      	ldr	r2, [r7, #4]
 800400e:	6812      	ldr	r2, [r2, #0]
 8004010:	430b      	orrs	r3, r1
 8004012:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	68db      	ldr	r3, [r3, #12]
 800401a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	695a      	ldr	r2, [r3, #20]
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	699b      	ldr	r3, [r3, #24]
 8004026:	431a      	orrs	r2, r3
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	430a      	orrs	r2, r1
 800402e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	681a      	ldr	r2, [r3, #0]
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	f042 0201 	orr.w	r2, r2, #1
 800403e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	2200      	movs	r2, #0
 8004044:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	2220      	movs	r2, #32
 800404a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	2200      	movs	r2, #0
 8004052:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	2200      	movs	r2, #0
 8004058:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800405c:	2300      	movs	r3, #0
}
 800405e:	4618      	mov	r0, r3
 8004060:	3710      	adds	r7, #16
 8004062:	46bd      	mov	sp, r7
 8004064:	bd80      	pop	{r7, pc}
 8004066:	bf00      	nop
 8004068:	000186a0 	.word	0x000186a0
 800406c:	001e847f 	.word	0x001e847f
 8004070:	003d08ff 	.word	0x003d08ff
 8004074:	431bde83 	.word	0x431bde83
 8004078:	10624dd3 	.word	0x10624dd3

0800407c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800407c:	b580      	push	{r7, lr}
 800407e:	b088      	sub	sp, #32
 8004080:	af02      	add	r7, sp, #8
 8004082:	60f8      	str	r0, [r7, #12]
 8004084:	4608      	mov	r0, r1
 8004086:	4611      	mov	r1, r2
 8004088:	461a      	mov	r2, r3
 800408a:	4603      	mov	r3, r0
 800408c:	817b      	strh	r3, [r7, #10]
 800408e:	460b      	mov	r3, r1
 8004090:	813b      	strh	r3, [r7, #8]
 8004092:	4613      	mov	r3, r2
 8004094:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004096:	f7fe ffdf 	bl	8003058 <HAL_GetTick>
 800409a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80040a2:	b2db      	uxtb	r3, r3
 80040a4:	2b20      	cmp	r3, #32
 80040a6:	f040 80d9 	bne.w	800425c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80040aa:	697b      	ldr	r3, [r7, #20]
 80040ac:	9300      	str	r3, [sp, #0]
 80040ae:	2319      	movs	r3, #25
 80040b0:	2201      	movs	r2, #1
 80040b2:	496d      	ldr	r1, [pc, #436]	; (8004268 <HAL_I2C_Mem_Write+0x1ec>)
 80040b4:	68f8      	ldr	r0, [r7, #12]
 80040b6:	f000 fc7b 	bl	80049b0 <I2C_WaitOnFlagUntilTimeout>
 80040ba:	4603      	mov	r3, r0
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d001      	beq.n	80040c4 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80040c0:	2302      	movs	r3, #2
 80040c2:	e0cc      	b.n	800425e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80040ca:	2b01      	cmp	r3, #1
 80040cc:	d101      	bne.n	80040d2 <HAL_I2C_Mem_Write+0x56>
 80040ce:	2302      	movs	r3, #2
 80040d0:	e0c5      	b.n	800425e <HAL_I2C_Mem_Write+0x1e2>
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	2201      	movs	r2, #1
 80040d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	f003 0301 	and.w	r3, r3, #1
 80040e4:	2b01      	cmp	r3, #1
 80040e6:	d007      	beq.n	80040f8 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	681a      	ldr	r2, [r3, #0]
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	f042 0201 	orr.w	r2, r2, #1
 80040f6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	681a      	ldr	r2, [r3, #0]
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004106:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	2221      	movs	r2, #33	; 0x21
 800410c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	2240      	movs	r2, #64	; 0x40
 8004114:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	2200      	movs	r2, #0
 800411c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	6a3a      	ldr	r2, [r7, #32]
 8004122:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004128:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800412e:	b29a      	uxth	r2, r3
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	4a4d      	ldr	r2, [pc, #308]	; (800426c <HAL_I2C_Mem_Write+0x1f0>)
 8004138:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800413a:	88f8      	ldrh	r0, [r7, #6]
 800413c:	893a      	ldrh	r2, [r7, #8]
 800413e:	8979      	ldrh	r1, [r7, #10]
 8004140:	697b      	ldr	r3, [r7, #20]
 8004142:	9301      	str	r3, [sp, #4]
 8004144:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004146:	9300      	str	r3, [sp, #0]
 8004148:	4603      	mov	r3, r0
 800414a:	68f8      	ldr	r0, [r7, #12]
 800414c:	f000 fab6 	bl	80046bc <I2C_RequestMemoryWrite>
 8004150:	4603      	mov	r3, r0
 8004152:	2b00      	cmp	r3, #0
 8004154:	d052      	beq.n	80041fc <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8004156:	2301      	movs	r3, #1
 8004158:	e081      	b.n	800425e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800415a:	697a      	ldr	r2, [r7, #20]
 800415c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800415e:	68f8      	ldr	r0, [r7, #12]
 8004160:	f000 fcfc 	bl	8004b5c <I2C_WaitOnTXEFlagUntilTimeout>
 8004164:	4603      	mov	r3, r0
 8004166:	2b00      	cmp	r3, #0
 8004168:	d00d      	beq.n	8004186 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800416e:	2b04      	cmp	r3, #4
 8004170:	d107      	bne.n	8004182 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	681a      	ldr	r2, [r3, #0]
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004180:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004182:	2301      	movs	r3, #1
 8004184:	e06b      	b.n	800425e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800418a:	781a      	ldrb	r2, [r3, #0]
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004196:	1c5a      	adds	r2, r3, #1
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041a0:	3b01      	subs	r3, #1
 80041a2:	b29a      	uxth	r2, r3
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041ac:	b29b      	uxth	r3, r3
 80041ae:	3b01      	subs	r3, #1
 80041b0:	b29a      	uxth	r2, r3
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	695b      	ldr	r3, [r3, #20]
 80041bc:	f003 0304 	and.w	r3, r3, #4
 80041c0:	2b04      	cmp	r3, #4
 80041c2:	d11b      	bne.n	80041fc <HAL_I2C_Mem_Write+0x180>
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d017      	beq.n	80041fc <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041d0:	781a      	ldrb	r2, [r3, #0]
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041dc:	1c5a      	adds	r2, r3, #1
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041e6:	3b01      	subs	r3, #1
 80041e8:	b29a      	uxth	r2, r3
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041f2:	b29b      	uxth	r3, r3
 80041f4:	3b01      	subs	r3, #1
 80041f6:	b29a      	uxth	r2, r3
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004200:	2b00      	cmp	r3, #0
 8004202:	d1aa      	bne.n	800415a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004204:	697a      	ldr	r2, [r7, #20]
 8004206:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004208:	68f8      	ldr	r0, [r7, #12]
 800420a:	f000 fce8 	bl	8004bde <I2C_WaitOnBTFFlagUntilTimeout>
 800420e:	4603      	mov	r3, r0
 8004210:	2b00      	cmp	r3, #0
 8004212:	d00d      	beq.n	8004230 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004218:	2b04      	cmp	r3, #4
 800421a:	d107      	bne.n	800422c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	681a      	ldr	r2, [r3, #0]
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800422a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800422c:	2301      	movs	r3, #1
 800422e:	e016      	b.n	800425e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	681a      	ldr	r2, [r3, #0]
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800423e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	2220      	movs	r2, #32
 8004244:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	2200      	movs	r2, #0
 800424c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	2200      	movs	r2, #0
 8004254:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004258:	2300      	movs	r3, #0
 800425a:	e000      	b.n	800425e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800425c:	2302      	movs	r3, #2
  }
}
 800425e:	4618      	mov	r0, r3
 8004260:	3718      	adds	r7, #24
 8004262:	46bd      	mov	sp, r7
 8004264:	bd80      	pop	{r7, pc}
 8004266:	bf00      	nop
 8004268:	00100002 	.word	0x00100002
 800426c:	ffff0000 	.word	0xffff0000

08004270 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004270:	b580      	push	{r7, lr}
 8004272:	b08c      	sub	sp, #48	; 0x30
 8004274:	af02      	add	r7, sp, #8
 8004276:	60f8      	str	r0, [r7, #12]
 8004278:	4608      	mov	r0, r1
 800427a:	4611      	mov	r1, r2
 800427c:	461a      	mov	r2, r3
 800427e:	4603      	mov	r3, r0
 8004280:	817b      	strh	r3, [r7, #10]
 8004282:	460b      	mov	r3, r1
 8004284:	813b      	strh	r3, [r7, #8]
 8004286:	4613      	mov	r3, r2
 8004288:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800428a:	f7fe fee5 	bl	8003058 <HAL_GetTick>
 800428e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004296:	b2db      	uxtb	r3, r3
 8004298:	2b20      	cmp	r3, #32
 800429a:	f040 8208 	bne.w	80046ae <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800429e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042a0:	9300      	str	r3, [sp, #0]
 80042a2:	2319      	movs	r3, #25
 80042a4:	2201      	movs	r2, #1
 80042a6:	497b      	ldr	r1, [pc, #492]	; (8004494 <HAL_I2C_Mem_Read+0x224>)
 80042a8:	68f8      	ldr	r0, [r7, #12]
 80042aa:	f000 fb81 	bl	80049b0 <I2C_WaitOnFlagUntilTimeout>
 80042ae:	4603      	mov	r3, r0
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d001      	beq.n	80042b8 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80042b4:	2302      	movs	r3, #2
 80042b6:	e1fb      	b.n	80046b0 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80042be:	2b01      	cmp	r3, #1
 80042c0:	d101      	bne.n	80042c6 <HAL_I2C_Mem_Read+0x56>
 80042c2:	2302      	movs	r3, #2
 80042c4:	e1f4      	b.n	80046b0 <HAL_I2C_Mem_Read+0x440>
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	2201      	movs	r2, #1
 80042ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	f003 0301 	and.w	r3, r3, #1
 80042d8:	2b01      	cmp	r3, #1
 80042da:	d007      	beq.n	80042ec <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	681a      	ldr	r2, [r3, #0]
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	f042 0201 	orr.w	r2, r2, #1
 80042ea:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	681a      	ldr	r2, [r3, #0]
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80042fa:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	2222      	movs	r2, #34	; 0x22
 8004300:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	2240      	movs	r2, #64	; 0x40
 8004308:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	2200      	movs	r2, #0
 8004310:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004316:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800431c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004322:	b29a      	uxth	r2, r3
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	4a5b      	ldr	r2, [pc, #364]	; (8004498 <HAL_I2C_Mem_Read+0x228>)
 800432c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800432e:	88f8      	ldrh	r0, [r7, #6]
 8004330:	893a      	ldrh	r2, [r7, #8]
 8004332:	8979      	ldrh	r1, [r7, #10]
 8004334:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004336:	9301      	str	r3, [sp, #4]
 8004338:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800433a:	9300      	str	r3, [sp, #0]
 800433c:	4603      	mov	r3, r0
 800433e:	68f8      	ldr	r0, [r7, #12]
 8004340:	f000 fa50 	bl	80047e4 <I2C_RequestMemoryRead>
 8004344:	4603      	mov	r3, r0
 8004346:	2b00      	cmp	r3, #0
 8004348:	d001      	beq.n	800434e <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800434a:	2301      	movs	r3, #1
 800434c:	e1b0      	b.n	80046b0 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004352:	2b00      	cmp	r3, #0
 8004354:	d113      	bne.n	800437e <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004356:	2300      	movs	r3, #0
 8004358:	623b      	str	r3, [r7, #32]
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	695b      	ldr	r3, [r3, #20]
 8004360:	623b      	str	r3, [r7, #32]
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	699b      	ldr	r3, [r3, #24]
 8004368:	623b      	str	r3, [r7, #32]
 800436a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	681a      	ldr	r2, [r3, #0]
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800437a:	601a      	str	r2, [r3, #0]
 800437c:	e184      	b.n	8004688 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004382:	2b01      	cmp	r3, #1
 8004384:	d11b      	bne.n	80043be <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	681a      	ldr	r2, [r3, #0]
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004394:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004396:	2300      	movs	r3, #0
 8004398:	61fb      	str	r3, [r7, #28]
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	695b      	ldr	r3, [r3, #20]
 80043a0:	61fb      	str	r3, [r7, #28]
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	699b      	ldr	r3, [r3, #24]
 80043a8:	61fb      	str	r3, [r7, #28]
 80043aa:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	681a      	ldr	r2, [r3, #0]
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80043ba:	601a      	str	r2, [r3, #0]
 80043bc:	e164      	b.n	8004688 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043c2:	2b02      	cmp	r3, #2
 80043c4:	d11b      	bne.n	80043fe <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	681a      	ldr	r2, [r3, #0]
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80043d4:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	681a      	ldr	r2, [r3, #0]
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80043e4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80043e6:	2300      	movs	r3, #0
 80043e8:	61bb      	str	r3, [r7, #24]
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	695b      	ldr	r3, [r3, #20]
 80043f0:	61bb      	str	r3, [r7, #24]
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	699b      	ldr	r3, [r3, #24]
 80043f8:	61bb      	str	r3, [r7, #24]
 80043fa:	69bb      	ldr	r3, [r7, #24]
 80043fc:	e144      	b.n	8004688 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80043fe:	2300      	movs	r3, #0
 8004400:	617b      	str	r3, [r7, #20]
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	695b      	ldr	r3, [r3, #20]
 8004408:	617b      	str	r3, [r7, #20]
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	699b      	ldr	r3, [r3, #24]
 8004410:	617b      	str	r3, [r7, #20]
 8004412:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8004414:	e138      	b.n	8004688 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800441a:	2b03      	cmp	r3, #3
 800441c:	f200 80f1 	bhi.w	8004602 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004424:	2b01      	cmp	r3, #1
 8004426:	d123      	bne.n	8004470 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004428:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800442a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800442c:	68f8      	ldr	r0, [r7, #12]
 800442e:	f000 fc17 	bl	8004c60 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004432:	4603      	mov	r3, r0
 8004434:	2b00      	cmp	r3, #0
 8004436:	d001      	beq.n	800443c <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8004438:	2301      	movs	r3, #1
 800443a:	e139      	b.n	80046b0 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	691a      	ldr	r2, [r3, #16]
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004446:	b2d2      	uxtb	r2, r2
 8004448:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800444e:	1c5a      	adds	r2, r3, #1
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004458:	3b01      	subs	r3, #1
 800445a:	b29a      	uxth	r2, r3
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004464:	b29b      	uxth	r3, r3
 8004466:	3b01      	subs	r3, #1
 8004468:	b29a      	uxth	r2, r3
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800446e:	e10b      	b.n	8004688 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004474:	2b02      	cmp	r3, #2
 8004476:	d14e      	bne.n	8004516 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004478:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800447a:	9300      	str	r3, [sp, #0]
 800447c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800447e:	2200      	movs	r2, #0
 8004480:	4906      	ldr	r1, [pc, #24]	; (800449c <HAL_I2C_Mem_Read+0x22c>)
 8004482:	68f8      	ldr	r0, [r7, #12]
 8004484:	f000 fa94 	bl	80049b0 <I2C_WaitOnFlagUntilTimeout>
 8004488:	4603      	mov	r3, r0
 800448a:	2b00      	cmp	r3, #0
 800448c:	d008      	beq.n	80044a0 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800448e:	2301      	movs	r3, #1
 8004490:	e10e      	b.n	80046b0 <HAL_I2C_Mem_Read+0x440>
 8004492:	bf00      	nop
 8004494:	00100002 	.word	0x00100002
 8004498:	ffff0000 	.word	0xffff0000
 800449c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	681a      	ldr	r2, [r3, #0]
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80044ae:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	691a      	ldr	r2, [r3, #16]
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044ba:	b2d2      	uxtb	r2, r2
 80044bc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044c2:	1c5a      	adds	r2, r3, #1
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80044cc:	3b01      	subs	r3, #1
 80044ce:	b29a      	uxth	r2, r3
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044d8:	b29b      	uxth	r3, r3
 80044da:	3b01      	subs	r3, #1
 80044dc:	b29a      	uxth	r2, r3
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	691a      	ldr	r2, [r3, #16]
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044ec:	b2d2      	uxtb	r2, r2
 80044ee:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044f4:	1c5a      	adds	r2, r3, #1
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80044fe:	3b01      	subs	r3, #1
 8004500:	b29a      	uxth	r2, r3
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800450a:	b29b      	uxth	r3, r3
 800450c:	3b01      	subs	r3, #1
 800450e:	b29a      	uxth	r2, r3
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004514:	e0b8      	b.n	8004688 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004516:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004518:	9300      	str	r3, [sp, #0]
 800451a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800451c:	2200      	movs	r2, #0
 800451e:	4966      	ldr	r1, [pc, #408]	; (80046b8 <HAL_I2C_Mem_Read+0x448>)
 8004520:	68f8      	ldr	r0, [r7, #12]
 8004522:	f000 fa45 	bl	80049b0 <I2C_WaitOnFlagUntilTimeout>
 8004526:	4603      	mov	r3, r0
 8004528:	2b00      	cmp	r3, #0
 800452a:	d001      	beq.n	8004530 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 800452c:	2301      	movs	r3, #1
 800452e:	e0bf      	b.n	80046b0 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	681a      	ldr	r2, [r3, #0]
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800453e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	691a      	ldr	r2, [r3, #16]
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800454a:	b2d2      	uxtb	r2, r2
 800454c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004552:	1c5a      	adds	r2, r3, #1
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800455c:	3b01      	subs	r3, #1
 800455e:	b29a      	uxth	r2, r3
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004568:	b29b      	uxth	r3, r3
 800456a:	3b01      	subs	r3, #1
 800456c:	b29a      	uxth	r2, r3
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004572:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004574:	9300      	str	r3, [sp, #0]
 8004576:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004578:	2200      	movs	r2, #0
 800457a:	494f      	ldr	r1, [pc, #316]	; (80046b8 <HAL_I2C_Mem_Read+0x448>)
 800457c:	68f8      	ldr	r0, [r7, #12]
 800457e:	f000 fa17 	bl	80049b0 <I2C_WaitOnFlagUntilTimeout>
 8004582:	4603      	mov	r3, r0
 8004584:	2b00      	cmp	r3, #0
 8004586:	d001      	beq.n	800458c <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8004588:	2301      	movs	r3, #1
 800458a:	e091      	b.n	80046b0 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	681a      	ldr	r2, [r3, #0]
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800459a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	691a      	ldr	r2, [r3, #16]
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045a6:	b2d2      	uxtb	r2, r2
 80045a8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045ae:	1c5a      	adds	r2, r3, #1
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045b8:	3b01      	subs	r3, #1
 80045ba:	b29a      	uxth	r2, r3
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045c4:	b29b      	uxth	r3, r3
 80045c6:	3b01      	subs	r3, #1
 80045c8:	b29a      	uxth	r2, r3
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	691a      	ldr	r2, [r3, #16]
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045d8:	b2d2      	uxtb	r2, r2
 80045da:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045e0:	1c5a      	adds	r2, r3, #1
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045ea:	3b01      	subs	r3, #1
 80045ec:	b29a      	uxth	r2, r3
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045f6:	b29b      	uxth	r3, r3
 80045f8:	3b01      	subs	r3, #1
 80045fa:	b29a      	uxth	r2, r3
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004600:	e042      	b.n	8004688 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004602:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004604:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004606:	68f8      	ldr	r0, [r7, #12]
 8004608:	f000 fb2a 	bl	8004c60 <I2C_WaitOnRXNEFlagUntilTimeout>
 800460c:	4603      	mov	r3, r0
 800460e:	2b00      	cmp	r3, #0
 8004610:	d001      	beq.n	8004616 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8004612:	2301      	movs	r3, #1
 8004614:	e04c      	b.n	80046b0 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	691a      	ldr	r2, [r3, #16]
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004620:	b2d2      	uxtb	r2, r2
 8004622:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004628:	1c5a      	adds	r2, r3, #1
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004632:	3b01      	subs	r3, #1
 8004634:	b29a      	uxth	r2, r3
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800463e:	b29b      	uxth	r3, r3
 8004640:	3b01      	subs	r3, #1
 8004642:	b29a      	uxth	r2, r3
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	695b      	ldr	r3, [r3, #20]
 800464e:	f003 0304 	and.w	r3, r3, #4
 8004652:	2b04      	cmp	r3, #4
 8004654:	d118      	bne.n	8004688 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	691a      	ldr	r2, [r3, #16]
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004660:	b2d2      	uxtb	r2, r2
 8004662:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004668:	1c5a      	adds	r2, r3, #1
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004672:	3b01      	subs	r3, #1
 8004674:	b29a      	uxth	r2, r3
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800467e:	b29b      	uxth	r3, r3
 8004680:	3b01      	subs	r3, #1
 8004682:	b29a      	uxth	r2, r3
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800468c:	2b00      	cmp	r3, #0
 800468e:	f47f aec2 	bne.w	8004416 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	2220      	movs	r2, #32
 8004696:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	2200      	movs	r2, #0
 800469e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	2200      	movs	r2, #0
 80046a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80046aa:	2300      	movs	r3, #0
 80046ac:	e000      	b.n	80046b0 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 80046ae:	2302      	movs	r3, #2
  }
}
 80046b0:	4618      	mov	r0, r3
 80046b2:	3728      	adds	r7, #40	; 0x28
 80046b4:	46bd      	mov	sp, r7
 80046b6:	bd80      	pop	{r7, pc}
 80046b8:	00010004 	.word	0x00010004

080046bc <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80046bc:	b580      	push	{r7, lr}
 80046be:	b088      	sub	sp, #32
 80046c0:	af02      	add	r7, sp, #8
 80046c2:	60f8      	str	r0, [r7, #12]
 80046c4:	4608      	mov	r0, r1
 80046c6:	4611      	mov	r1, r2
 80046c8:	461a      	mov	r2, r3
 80046ca:	4603      	mov	r3, r0
 80046cc:	817b      	strh	r3, [r7, #10]
 80046ce:	460b      	mov	r3, r1
 80046d0:	813b      	strh	r3, [r7, #8]
 80046d2:	4613      	mov	r3, r2
 80046d4:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	681a      	ldr	r2, [r3, #0]
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80046e4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80046e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046e8:	9300      	str	r3, [sp, #0]
 80046ea:	6a3b      	ldr	r3, [r7, #32]
 80046ec:	2200      	movs	r2, #0
 80046ee:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80046f2:	68f8      	ldr	r0, [r7, #12]
 80046f4:	f000 f95c 	bl	80049b0 <I2C_WaitOnFlagUntilTimeout>
 80046f8:	4603      	mov	r3, r0
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d00c      	beq.n	8004718 <I2C_RequestMemoryWrite+0x5c>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004708:	2b00      	cmp	r3, #0
 800470a:	d003      	beq.n	8004714 <I2C_RequestMemoryWrite+0x58>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004712:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004714:	2303      	movs	r3, #3
 8004716:	e05f      	b.n	80047d8 <I2C_RequestMemoryWrite+0x11c>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004718:	897b      	ldrh	r3, [r7, #10]
 800471a:	b2db      	uxtb	r3, r3
 800471c:	461a      	mov	r2, r3
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004726:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004728:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800472a:	6a3a      	ldr	r2, [r7, #32]
 800472c:	492c      	ldr	r1, [pc, #176]	; (80047e0 <I2C_RequestMemoryWrite+0x124>)
 800472e:	68f8      	ldr	r0, [r7, #12]
 8004730:	f000 f995 	bl	8004a5e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004734:	4603      	mov	r3, r0
 8004736:	2b00      	cmp	r3, #0
 8004738:	d001      	beq.n	800473e <I2C_RequestMemoryWrite+0x82>
  {
    return HAL_ERROR;
 800473a:	2301      	movs	r3, #1
 800473c:	e04c      	b.n	80047d8 <I2C_RequestMemoryWrite+0x11c>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800473e:	2300      	movs	r3, #0
 8004740:	617b      	str	r3, [r7, #20]
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	695b      	ldr	r3, [r3, #20]
 8004748:	617b      	str	r3, [r7, #20]
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	699b      	ldr	r3, [r3, #24]
 8004750:	617b      	str	r3, [r7, #20]
 8004752:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004754:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004756:	6a39      	ldr	r1, [r7, #32]
 8004758:	68f8      	ldr	r0, [r7, #12]
 800475a:	f000 f9ff 	bl	8004b5c <I2C_WaitOnTXEFlagUntilTimeout>
 800475e:	4603      	mov	r3, r0
 8004760:	2b00      	cmp	r3, #0
 8004762:	d00d      	beq.n	8004780 <I2C_RequestMemoryWrite+0xc4>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004768:	2b04      	cmp	r3, #4
 800476a:	d107      	bne.n	800477c <I2C_RequestMemoryWrite+0xc0>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	681a      	ldr	r2, [r3, #0]
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800477a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800477c:	2301      	movs	r3, #1
 800477e:	e02b      	b.n	80047d8 <I2C_RequestMemoryWrite+0x11c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004780:	88fb      	ldrh	r3, [r7, #6]
 8004782:	2b01      	cmp	r3, #1
 8004784:	d105      	bne.n	8004792 <I2C_RequestMemoryWrite+0xd6>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004786:	893b      	ldrh	r3, [r7, #8]
 8004788:	b2da      	uxtb	r2, r3
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	611a      	str	r2, [r3, #16]
 8004790:	e021      	b.n	80047d6 <I2C_RequestMemoryWrite+0x11a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004792:	893b      	ldrh	r3, [r7, #8]
 8004794:	0a1b      	lsrs	r3, r3, #8
 8004796:	b29b      	uxth	r3, r3
 8004798:	b2da      	uxtb	r2, r3
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80047a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80047a2:	6a39      	ldr	r1, [r7, #32]
 80047a4:	68f8      	ldr	r0, [r7, #12]
 80047a6:	f000 f9d9 	bl	8004b5c <I2C_WaitOnTXEFlagUntilTimeout>
 80047aa:	4603      	mov	r3, r0
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d00d      	beq.n	80047cc <I2C_RequestMemoryWrite+0x110>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047b4:	2b04      	cmp	r3, #4
 80047b6:	d107      	bne.n	80047c8 <I2C_RequestMemoryWrite+0x10c>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	681a      	ldr	r2, [r3, #0]
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80047c6:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80047c8:	2301      	movs	r3, #1
 80047ca:	e005      	b.n	80047d8 <I2C_RequestMemoryWrite+0x11c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80047cc:	893b      	ldrh	r3, [r7, #8]
 80047ce:	b2da      	uxtb	r2, r3
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80047d6:	2300      	movs	r3, #0
}
 80047d8:	4618      	mov	r0, r3
 80047da:	3718      	adds	r7, #24
 80047dc:	46bd      	mov	sp, r7
 80047de:	bd80      	pop	{r7, pc}
 80047e0:	00010002 	.word	0x00010002

080047e4 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80047e4:	b580      	push	{r7, lr}
 80047e6:	b088      	sub	sp, #32
 80047e8:	af02      	add	r7, sp, #8
 80047ea:	60f8      	str	r0, [r7, #12]
 80047ec:	4608      	mov	r0, r1
 80047ee:	4611      	mov	r1, r2
 80047f0:	461a      	mov	r2, r3
 80047f2:	4603      	mov	r3, r0
 80047f4:	817b      	strh	r3, [r7, #10]
 80047f6:	460b      	mov	r3, r1
 80047f8:	813b      	strh	r3, [r7, #8]
 80047fa:	4613      	mov	r3, r2
 80047fc:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	681a      	ldr	r2, [r3, #0]
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800480c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	681a      	ldr	r2, [r3, #0]
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800481c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800481e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004820:	9300      	str	r3, [sp, #0]
 8004822:	6a3b      	ldr	r3, [r7, #32]
 8004824:	2200      	movs	r2, #0
 8004826:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800482a:	68f8      	ldr	r0, [r7, #12]
 800482c:	f000 f8c0 	bl	80049b0 <I2C_WaitOnFlagUntilTimeout>
 8004830:	4603      	mov	r3, r0
 8004832:	2b00      	cmp	r3, #0
 8004834:	d00c      	beq.n	8004850 <I2C_RequestMemoryRead+0x6c>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004840:	2b00      	cmp	r3, #0
 8004842:	d003      	beq.n	800484c <I2C_RequestMemoryRead+0x68>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	f44f 7200 	mov.w	r2, #512	; 0x200
 800484a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800484c:	2303      	movs	r3, #3
 800484e:	e0a9      	b.n	80049a4 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004850:	897b      	ldrh	r3, [r7, #10]
 8004852:	b2db      	uxtb	r3, r3
 8004854:	461a      	mov	r2, r3
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800485e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004860:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004862:	6a3a      	ldr	r2, [r7, #32]
 8004864:	4951      	ldr	r1, [pc, #324]	; (80049ac <I2C_RequestMemoryRead+0x1c8>)
 8004866:	68f8      	ldr	r0, [r7, #12]
 8004868:	f000 f8f9 	bl	8004a5e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800486c:	4603      	mov	r3, r0
 800486e:	2b00      	cmp	r3, #0
 8004870:	d001      	beq.n	8004876 <I2C_RequestMemoryRead+0x92>
  {
    return HAL_ERROR;
 8004872:	2301      	movs	r3, #1
 8004874:	e096      	b.n	80049a4 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004876:	2300      	movs	r3, #0
 8004878:	617b      	str	r3, [r7, #20]
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	695b      	ldr	r3, [r3, #20]
 8004880:	617b      	str	r3, [r7, #20]
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	699b      	ldr	r3, [r3, #24]
 8004888:	617b      	str	r3, [r7, #20]
 800488a:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800488c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800488e:	6a39      	ldr	r1, [r7, #32]
 8004890:	68f8      	ldr	r0, [r7, #12]
 8004892:	f000 f963 	bl	8004b5c <I2C_WaitOnTXEFlagUntilTimeout>
 8004896:	4603      	mov	r3, r0
 8004898:	2b00      	cmp	r3, #0
 800489a:	d00d      	beq.n	80048b8 <I2C_RequestMemoryRead+0xd4>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048a0:	2b04      	cmp	r3, #4
 80048a2:	d107      	bne.n	80048b4 <I2C_RequestMemoryRead+0xd0>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	681a      	ldr	r2, [r3, #0]
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80048b2:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80048b4:	2301      	movs	r3, #1
 80048b6:	e075      	b.n	80049a4 <I2C_RequestMemoryRead+0x1c0>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80048b8:	88fb      	ldrh	r3, [r7, #6]
 80048ba:	2b01      	cmp	r3, #1
 80048bc:	d105      	bne.n	80048ca <I2C_RequestMemoryRead+0xe6>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80048be:	893b      	ldrh	r3, [r7, #8]
 80048c0:	b2da      	uxtb	r2, r3
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	611a      	str	r2, [r3, #16]
 80048c8:	e021      	b.n	800490e <I2C_RequestMemoryRead+0x12a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80048ca:	893b      	ldrh	r3, [r7, #8]
 80048cc:	0a1b      	lsrs	r3, r3, #8
 80048ce:	b29b      	uxth	r3, r3
 80048d0:	b2da      	uxtb	r2, r3
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80048d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80048da:	6a39      	ldr	r1, [r7, #32]
 80048dc:	68f8      	ldr	r0, [r7, #12]
 80048de:	f000 f93d 	bl	8004b5c <I2C_WaitOnTXEFlagUntilTimeout>
 80048e2:	4603      	mov	r3, r0
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d00d      	beq.n	8004904 <I2C_RequestMemoryRead+0x120>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048ec:	2b04      	cmp	r3, #4
 80048ee:	d107      	bne.n	8004900 <I2C_RequestMemoryRead+0x11c>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	681a      	ldr	r2, [r3, #0]
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80048fe:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004900:	2301      	movs	r3, #1
 8004902:	e04f      	b.n	80049a4 <I2C_RequestMemoryRead+0x1c0>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004904:	893b      	ldrh	r3, [r7, #8]
 8004906:	b2da      	uxtb	r2, r3
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800490e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004910:	6a39      	ldr	r1, [r7, #32]
 8004912:	68f8      	ldr	r0, [r7, #12]
 8004914:	f000 f922 	bl	8004b5c <I2C_WaitOnTXEFlagUntilTimeout>
 8004918:	4603      	mov	r3, r0
 800491a:	2b00      	cmp	r3, #0
 800491c:	d00d      	beq.n	800493a <I2C_RequestMemoryRead+0x156>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004922:	2b04      	cmp	r3, #4
 8004924:	d107      	bne.n	8004936 <I2C_RequestMemoryRead+0x152>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	681a      	ldr	r2, [r3, #0]
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004934:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004936:	2301      	movs	r3, #1
 8004938:	e034      	b.n	80049a4 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	681a      	ldr	r2, [r3, #0]
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004948:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800494a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800494c:	9300      	str	r3, [sp, #0]
 800494e:	6a3b      	ldr	r3, [r7, #32]
 8004950:	2200      	movs	r2, #0
 8004952:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004956:	68f8      	ldr	r0, [r7, #12]
 8004958:	f000 f82a 	bl	80049b0 <I2C_WaitOnFlagUntilTimeout>
 800495c:	4603      	mov	r3, r0
 800495e:	2b00      	cmp	r3, #0
 8004960:	d00c      	beq.n	800497c <I2C_RequestMemoryRead+0x198>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800496c:	2b00      	cmp	r3, #0
 800496e:	d003      	beq.n	8004978 <I2C_RequestMemoryRead+0x194>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004976:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004978:	2303      	movs	r3, #3
 800497a:	e013      	b.n	80049a4 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800497c:	897b      	ldrh	r3, [r7, #10]
 800497e:	b2db      	uxtb	r3, r3
 8004980:	f043 0301 	orr.w	r3, r3, #1
 8004984:	b2da      	uxtb	r2, r3
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800498c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800498e:	6a3a      	ldr	r2, [r7, #32]
 8004990:	4906      	ldr	r1, [pc, #24]	; (80049ac <I2C_RequestMemoryRead+0x1c8>)
 8004992:	68f8      	ldr	r0, [r7, #12]
 8004994:	f000 f863 	bl	8004a5e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004998:	4603      	mov	r3, r0
 800499a:	2b00      	cmp	r3, #0
 800499c:	d001      	beq.n	80049a2 <I2C_RequestMemoryRead+0x1be>
  {
    return HAL_ERROR;
 800499e:	2301      	movs	r3, #1
 80049a0:	e000      	b.n	80049a4 <I2C_RequestMemoryRead+0x1c0>
  }

  return HAL_OK;
 80049a2:	2300      	movs	r3, #0
}
 80049a4:	4618      	mov	r0, r3
 80049a6:	3718      	adds	r7, #24
 80049a8:	46bd      	mov	sp, r7
 80049aa:	bd80      	pop	{r7, pc}
 80049ac:	00010002 	.word	0x00010002

080049b0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80049b0:	b580      	push	{r7, lr}
 80049b2:	b084      	sub	sp, #16
 80049b4:	af00      	add	r7, sp, #0
 80049b6:	60f8      	str	r0, [r7, #12]
 80049b8:	60b9      	str	r1, [r7, #8]
 80049ba:	603b      	str	r3, [r7, #0]
 80049bc:	4613      	mov	r3, r2
 80049be:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80049c0:	e025      	b.n	8004a0e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80049c2:	683b      	ldr	r3, [r7, #0]
 80049c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049c8:	d021      	beq.n	8004a0e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80049ca:	f7fe fb45 	bl	8003058 <HAL_GetTick>
 80049ce:	4602      	mov	r2, r0
 80049d0:	69bb      	ldr	r3, [r7, #24]
 80049d2:	1ad3      	subs	r3, r2, r3
 80049d4:	683a      	ldr	r2, [r7, #0]
 80049d6:	429a      	cmp	r2, r3
 80049d8:	d302      	bcc.n	80049e0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80049da:	683b      	ldr	r3, [r7, #0]
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d116      	bne.n	8004a0e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	2200      	movs	r2, #0
 80049e4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	2220      	movs	r2, #32
 80049ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	2200      	movs	r2, #0
 80049f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049fa:	f043 0220 	orr.w	r2, r3, #32
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	2200      	movs	r2, #0
 8004a06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004a0a:	2301      	movs	r3, #1
 8004a0c:	e023      	b.n	8004a56 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004a0e:	68bb      	ldr	r3, [r7, #8]
 8004a10:	0c1b      	lsrs	r3, r3, #16
 8004a12:	b2db      	uxtb	r3, r3
 8004a14:	2b01      	cmp	r3, #1
 8004a16:	d10d      	bne.n	8004a34 <I2C_WaitOnFlagUntilTimeout+0x84>
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	695b      	ldr	r3, [r3, #20]
 8004a1e:	43da      	mvns	r2, r3
 8004a20:	68bb      	ldr	r3, [r7, #8]
 8004a22:	4013      	ands	r3, r2
 8004a24:	b29b      	uxth	r3, r3
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	bf0c      	ite	eq
 8004a2a:	2301      	moveq	r3, #1
 8004a2c:	2300      	movne	r3, #0
 8004a2e:	b2db      	uxtb	r3, r3
 8004a30:	461a      	mov	r2, r3
 8004a32:	e00c      	b.n	8004a4e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	699b      	ldr	r3, [r3, #24]
 8004a3a:	43da      	mvns	r2, r3
 8004a3c:	68bb      	ldr	r3, [r7, #8]
 8004a3e:	4013      	ands	r3, r2
 8004a40:	b29b      	uxth	r3, r3
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	bf0c      	ite	eq
 8004a46:	2301      	moveq	r3, #1
 8004a48:	2300      	movne	r3, #0
 8004a4a:	b2db      	uxtb	r3, r3
 8004a4c:	461a      	mov	r2, r3
 8004a4e:	79fb      	ldrb	r3, [r7, #7]
 8004a50:	429a      	cmp	r2, r3
 8004a52:	d0b6      	beq.n	80049c2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004a54:	2300      	movs	r3, #0
}
 8004a56:	4618      	mov	r0, r3
 8004a58:	3710      	adds	r7, #16
 8004a5a:	46bd      	mov	sp, r7
 8004a5c:	bd80      	pop	{r7, pc}

08004a5e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004a5e:	b580      	push	{r7, lr}
 8004a60:	b084      	sub	sp, #16
 8004a62:	af00      	add	r7, sp, #0
 8004a64:	60f8      	str	r0, [r7, #12]
 8004a66:	60b9      	str	r1, [r7, #8]
 8004a68:	607a      	str	r2, [r7, #4]
 8004a6a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004a6c:	e051      	b.n	8004b12 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	695b      	ldr	r3, [r3, #20]
 8004a74:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a78:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a7c:	d123      	bne.n	8004ac6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	681a      	ldr	r2, [r3, #0]
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004a8c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004a96:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	2200      	movs	r2, #0
 8004a9c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	2220      	movs	r2, #32
 8004aa2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	2200      	movs	r2, #0
 8004aaa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ab2:	f043 0204 	orr.w	r2, r3, #4
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	2200      	movs	r2, #0
 8004abe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004ac2:	2301      	movs	r3, #1
 8004ac4:	e046      	b.n	8004b54 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004acc:	d021      	beq.n	8004b12 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004ace:	f7fe fac3 	bl	8003058 <HAL_GetTick>
 8004ad2:	4602      	mov	r2, r0
 8004ad4:	683b      	ldr	r3, [r7, #0]
 8004ad6:	1ad3      	subs	r3, r2, r3
 8004ad8:	687a      	ldr	r2, [r7, #4]
 8004ada:	429a      	cmp	r2, r3
 8004adc:	d302      	bcc.n	8004ae4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d116      	bne.n	8004b12 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	2200      	movs	r2, #0
 8004ae8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	2220      	movs	r2, #32
 8004aee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	2200      	movs	r2, #0
 8004af6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004afe:	f043 0220 	orr.w	r2, r3, #32
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	2200      	movs	r2, #0
 8004b0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004b0e:	2301      	movs	r3, #1
 8004b10:	e020      	b.n	8004b54 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004b12:	68bb      	ldr	r3, [r7, #8]
 8004b14:	0c1b      	lsrs	r3, r3, #16
 8004b16:	b2db      	uxtb	r3, r3
 8004b18:	2b01      	cmp	r3, #1
 8004b1a:	d10c      	bne.n	8004b36 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	695b      	ldr	r3, [r3, #20]
 8004b22:	43da      	mvns	r2, r3
 8004b24:	68bb      	ldr	r3, [r7, #8]
 8004b26:	4013      	ands	r3, r2
 8004b28:	b29b      	uxth	r3, r3
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	bf14      	ite	ne
 8004b2e:	2301      	movne	r3, #1
 8004b30:	2300      	moveq	r3, #0
 8004b32:	b2db      	uxtb	r3, r3
 8004b34:	e00b      	b.n	8004b4e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	699b      	ldr	r3, [r3, #24]
 8004b3c:	43da      	mvns	r2, r3
 8004b3e:	68bb      	ldr	r3, [r7, #8]
 8004b40:	4013      	ands	r3, r2
 8004b42:	b29b      	uxth	r3, r3
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	bf14      	ite	ne
 8004b48:	2301      	movne	r3, #1
 8004b4a:	2300      	moveq	r3, #0
 8004b4c:	b2db      	uxtb	r3, r3
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d18d      	bne.n	8004a6e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8004b52:	2300      	movs	r3, #0
}
 8004b54:	4618      	mov	r0, r3
 8004b56:	3710      	adds	r7, #16
 8004b58:	46bd      	mov	sp, r7
 8004b5a:	bd80      	pop	{r7, pc}

08004b5c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004b5c:	b580      	push	{r7, lr}
 8004b5e:	b084      	sub	sp, #16
 8004b60:	af00      	add	r7, sp, #0
 8004b62:	60f8      	str	r0, [r7, #12]
 8004b64:	60b9      	str	r1, [r7, #8]
 8004b66:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004b68:	e02d      	b.n	8004bc6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004b6a:	68f8      	ldr	r0, [r7, #12]
 8004b6c:	f000 f8ce 	bl	8004d0c <I2C_IsAcknowledgeFailed>
 8004b70:	4603      	mov	r3, r0
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d001      	beq.n	8004b7a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004b76:	2301      	movs	r3, #1
 8004b78:	e02d      	b.n	8004bd6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004b7a:	68bb      	ldr	r3, [r7, #8]
 8004b7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b80:	d021      	beq.n	8004bc6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b82:	f7fe fa69 	bl	8003058 <HAL_GetTick>
 8004b86:	4602      	mov	r2, r0
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	1ad3      	subs	r3, r2, r3
 8004b8c:	68ba      	ldr	r2, [r7, #8]
 8004b8e:	429a      	cmp	r2, r3
 8004b90:	d302      	bcc.n	8004b98 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004b92:	68bb      	ldr	r3, [r7, #8]
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d116      	bne.n	8004bc6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	2200      	movs	r2, #0
 8004b9c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	2220      	movs	r2, #32
 8004ba2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	2200      	movs	r2, #0
 8004baa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bb2:	f043 0220 	orr.w	r2, r3, #32
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	2200      	movs	r2, #0
 8004bbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004bc2:	2301      	movs	r3, #1
 8004bc4:	e007      	b.n	8004bd6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	695b      	ldr	r3, [r3, #20]
 8004bcc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004bd0:	2b80      	cmp	r3, #128	; 0x80
 8004bd2:	d1ca      	bne.n	8004b6a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004bd4:	2300      	movs	r3, #0
}
 8004bd6:	4618      	mov	r0, r3
 8004bd8:	3710      	adds	r7, #16
 8004bda:	46bd      	mov	sp, r7
 8004bdc:	bd80      	pop	{r7, pc}

08004bde <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004bde:	b580      	push	{r7, lr}
 8004be0:	b084      	sub	sp, #16
 8004be2:	af00      	add	r7, sp, #0
 8004be4:	60f8      	str	r0, [r7, #12]
 8004be6:	60b9      	str	r1, [r7, #8]
 8004be8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004bea:	e02d      	b.n	8004c48 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004bec:	68f8      	ldr	r0, [r7, #12]
 8004bee:	f000 f88d 	bl	8004d0c <I2C_IsAcknowledgeFailed>
 8004bf2:	4603      	mov	r3, r0
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d001      	beq.n	8004bfc <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004bf8:	2301      	movs	r3, #1
 8004bfa:	e02d      	b.n	8004c58 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004bfc:	68bb      	ldr	r3, [r7, #8]
 8004bfe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c02:	d021      	beq.n	8004c48 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c04:	f7fe fa28 	bl	8003058 <HAL_GetTick>
 8004c08:	4602      	mov	r2, r0
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	1ad3      	subs	r3, r2, r3
 8004c0e:	68ba      	ldr	r2, [r7, #8]
 8004c10:	429a      	cmp	r2, r3
 8004c12:	d302      	bcc.n	8004c1a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004c14:	68bb      	ldr	r3, [r7, #8]
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d116      	bne.n	8004c48 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	2200      	movs	r2, #0
 8004c1e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	2220      	movs	r2, #32
 8004c24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	2200      	movs	r2, #0
 8004c2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c34:	f043 0220 	orr.w	r2, r3, #32
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	2200      	movs	r2, #0
 8004c40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004c44:	2301      	movs	r3, #1
 8004c46:	e007      	b.n	8004c58 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	695b      	ldr	r3, [r3, #20]
 8004c4e:	f003 0304 	and.w	r3, r3, #4
 8004c52:	2b04      	cmp	r3, #4
 8004c54:	d1ca      	bne.n	8004bec <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004c56:	2300      	movs	r3, #0
}
 8004c58:	4618      	mov	r0, r3
 8004c5a:	3710      	adds	r7, #16
 8004c5c:	46bd      	mov	sp, r7
 8004c5e:	bd80      	pop	{r7, pc}

08004c60 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004c60:	b580      	push	{r7, lr}
 8004c62:	b084      	sub	sp, #16
 8004c64:	af00      	add	r7, sp, #0
 8004c66:	60f8      	str	r0, [r7, #12]
 8004c68:	60b9      	str	r1, [r7, #8]
 8004c6a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004c6c:	e042      	b.n	8004cf4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	695b      	ldr	r3, [r3, #20]
 8004c74:	f003 0310 	and.w	r3, r3, #16
 8004c78:	2b10      	cmp	r3, #16
 8004c7a:	d119      	bne.n	8004cb0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	f06f 0210 	mvn.w	r2, #16
 8004c84:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	2200      	movs	r2, #0
 8004c8a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	2220      	movs	r2, #32
 8004c90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	2200      	movs	r2, #0
 8004c98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	2200      	movs	r2, #0
 8004ca8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004cac:	2301      	movs	r3, #1
 8004cae:	e029      	b.n	8004d04 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004cb0:	f7fe f9d2 	bl	8003058 <HAL_GetTick>
 8004cb4:	4602      	mov	r2, r0
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	1ad3      	subs	r3, r2, r3
 8004cba:	68ba      	ldr	r2, [r7, #8]
 8004cbc:	429a      	cmp	r2, r3
 8004cbe:	d302      	bcc.n	8004cc6 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004cc0:	68bb      	ldr	r3, [r7, #8]
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d116      	bne.n	8004cf4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	2200      	movs	r2, #0
 8004cca:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	2220      	movs	r2, #32
 8004cd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	2200      	movs	r2, #0
 8004cd8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ce0:	f043 0220 	orr.w	r2, r3, #32
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	2200      	movs	r2, #0
 8004cec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004cf0:	2301      	movs	r3, #1
 8004cf2:	e007      	b.n	8004d04 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	695b      	ldr	r3, [r3, #20]
 8004cfa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004cfe:	2b40      	cmp	r3, #64	; 0x40
 8004d00:	d1b5      	bne.n	8004c6e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004d02:	2300      	movs	r3, #0
}
 8004d04:	4618      	mov	r0, r3
 8004d06:	3710      	adds	r7, #16
 8004d08:	46bd      	mov	sp, r7
 8004d0a:	bd80      	pop	{r7, pc}

08004d0c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004d0c:	b480      	push	{r7}
 8004d0e:	b083      	sub	sp, #12
 8004d10:	af00      	add	r7, sp, #0
 8004d12:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	695b      	ldr	r3, [r3, #20]
 8004d1a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d1e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004d22:	d11b      	bne.n	8004d5c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004d2c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	2200      	movs	r2, #0
 8004d32:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	2220      	movs	r2, #32
 8004d38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	2200      	movs	r2, #0
 8004d40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d48:	f043 0204 	orr.w	r2, r3, #4
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	2200      	movs	r2, #0
 8004d54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004d58:	2301      	movs	r3, #1
 8004d5a:	e000      	b.n	8004d5e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004d5c:	2300      	movs	r3, #0
}
 8004d5e:	4618      	mov	r0, r3
 8004d60:	370c      	adds	r7, #12
 8004d62:	46bd      	mov	sp, r7
 8004d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d68:	4770      	bx	lr

08004d6a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004d6a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004d6c:	b08f      	sub	sp, #60	; 0x3c
 8004d6e:	af0a      	add	r7, sp, #40	; 0x28
 8004d70:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d101      	bne.n	8004d7c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004d78:	2301      	movs	r3, #1
 8004d7a:	e10f      	b.n	8004f9c <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8004d88:	b2db      	uxtb	r3, r3
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d106      	bne.n	8004d9c <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	2200      	movs	r2, #0
 8004d92:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004d96:	6878      	ldr	r0, [r7, #4]
 8004d98:	f008 fc88 	bl	800d6ac <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	2203      	movs	r2, #3
 8004da0:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8004da4:	68bb      	ldr	r3, [r7, #8]
 8004da6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004da8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d102      	bne.n	8004db6 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	2200      	movs	r2, #0
 8004db4:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	4618      	mov	r0, r3
 8004dbc:	f005 fa39 	bl	800a232 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	603b      	str	r3, [r7, #0]
 8004dc6:	687e      	ldr	r6, [r7, #4]
 8004dc8:	466d      	mov	r5, sp
 8004dca:	f106 0410 	add.w	r4, r6, #16
 8004dce:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004dd0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004dd2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004dd4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004dd6:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004dda:	e885 0003 	stmia.w	r5, {r0, r1}
 8004dde:	1d33      	adds	r3, r6, #4
 8004de0:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004de2:	6838      	ldr	r0, [r7, #0]
 8004de4:	f005 f910 	bl	800a008 <USB_CoreInit>
 8004de8:	4603      	mov	r3, r0
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d005      	beq.n	8004dfa <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	2202      	movs	r2, #2
 8004df2:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8004df6:	2301      	movs	r3, #1
 8004df8:	e0d0      	b.n	8004f9c <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	2100      	movs	r1, #0
 8004e00:	4618      	mov	r0, r3
 8004e02:	f005 fa27 	bl	800a254 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004e06:	2300      	movs	r3, #0
 8004e08:	73fb      	strb	r3, [r7, #15]
 8004e0a:	e04a      	b.n	8004ea2 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004e0c:	7bfa      	ldrb	r2, [r7, #15]
 8004e0e:	6879      	ldr	r1, [r7, #4]
 8004e10:	4613      	mov	r3, r2
 8004e12:	00db      	lsls	r3, r3, #3
 8004e14:	1a9b      	subs	r3, r3, r2
 8004e16:	009b      	lsls	r3, r3, #2
 8004e18:	440b      	add	r3, r1
 8004e1a:	333d      	adds	r3, #61	; 0x3d
 8004e1c:	2201      	movs	r2, #1
 8004e1e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004e20:	7bfa      	ldrb	r2, [r7, #15]
 8004e22:	6879      	ldr	r1, [r7, #4]
 8004e24:	4613      	mov	r3, r2
 8004e26:	00db      	lsls	r3, r3, #3
 8004e28:	1a9b      	subs	r3, r3, r2
 8004e2a:	009b      	lsls	r3, r3, #2
 8004e2c:	440b      	add	r3, r1
 8004e2e:	333c      	adds	r3, #60	; 0x3c
 8004e30:	7bfa      	ldrb	r2, [r7, #15]
 8004e32:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8004e34:	7bfa      	ldrb	r2, [r7, #15]
 8004e36:	7bfb      	ldrb	r3, [r7, #15]
 8004e38:	b298      	uxth	r0, r3
 8004e3a:	6879      	ldr	r1, [r7, #4]
 8004e3c:	4613      	mov	r3, r2
 8004e3e:	00db      	lsls	r3, r3, #3
 8004e40:	1a9b      	subs	r3, r3, r2
 8004e42:	009b      	lsls	r3, r3, #2
 8004e44:	440b      	add	r3, r1
 8004e46:	3342      	adds	r3, #66	; 0x42
 8004e48:	4602      	mov	r2, r0
 8004e4a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004e4c:	7bfa      	ldrb	r2, [r7, #15]
 8004e4e:	6879      	ldr	r1, [r7, #4]
 8004e50:	4613      	mov	r3, r2
 8004e52:	00db      	lsls	r3, r3, #3
 8004e54:	1a9b      	subs	r3, r3, r2
 8004e56:	009b      	lsls	r3, r3, #2
 8004e58:	440b      	add	r3, r1
 8004e5a:	333f      	adds	r3, #63	; 0x3f
 8004e5c:	2200      	movs	r2, #0
 8004e5e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004e60:	7bfa      	ldrb	r2, [r7, #15]
 8004e62:	6879      	ldr	r1, [r7, #4]
 8004e64:	4613      	mov	r3, r2
 8004e66:	00db      	lsls	r3, r3, #3
 8004e68:	1a9b      	subs	r3, r3, r2
 8004e6a:	009b      	lsls	r3, r3, #2
 8004e6c:	440b      	add	r3, r1
 8004e6e:	3344      	adds	r3, #68	; 0x44
 8004e70:	2200      	movs	r2, #0
 8004e72:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004e74:	7bfa      	ldrb	r2, [r7, #15]
 8004e76:	6879      	ldr	r1, [r7, #4]
 8004e78:	4613      	mov	r3, r2
 8004e7a:	00db      	lsls	r3, r3, #3
 8004e7c:	1a9b      	subs	r3, r3, r2
 8004e7e:	009b      	lsls	r3, r3, #2
 8004e80:	440b      	add	r3, r1
 8004e82:	3348      	adds	r3, #72	; 0x48
 8004e84:	2200      	movs	r2, #0
 8004e86:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004e88:	7bfa      	ldrb	r2, [r7, #15]
 8004e8a:	6879      	ldr	r1, [r7, #4]
 8004e8c:	4613      	mov	r3, r2
 8004e8e:	00db      	lsls	r3, r3, #3
 8004e90:	1a9b      	subs	r3, r3, r2
 8004e92:	009b      	lsls	r3, r3, #2
 8004e94:	440b      	add	r3, r1
 8004e96:	3350      	adds	r3, #80	; 0x50
 8004e98:	2200      	movs	r2, #0
 8004e9a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004e9c:	7bfb      	ldrb	r3, [r7, #15]
 8004e9e:	3301      	adds	r3, #1
 8004ea0:	73fb      	strb	r3, [r7, #15]
 8004ea2:	7bfa      	ldrb	r2, [r7, #15]
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	685b      	ldr	r3, [r3, #4]
 8004ea8:	429a      	cmp	r2, r3
 8004eaa:	d3af      	bcc.n	8004e0c <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004eac:	2300      	movs	r3, #0
 8004eae:	73fb      	strb	r3, [r7, #15]
 8004eb0:	e044      	b.n	8004f3c <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004eb2:	7bfa      	ldrb	r2, [r7, #15]
 8004eb4:	6879      	ldr	r1, [r7, #4]
 8004eb6:	4613      	mov	r3, r2
 8004eb8:	00db      	lsls	r3, r3, #3
 8004eba:	1a9b      	subs	r3, r3, r2
 8004ebc:	009b      	lsls	r3, r3, #2
 8004ebe:	440b      	add	r3, r1
 8004ec0:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8004ec4:	2200      	movs	r2, #0
 8004ec6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004ec8:	7bfa      	ldrb	r2, [r7, #15]
 8004eca:	6879      	ldr	r1, [r7, #4]
 8004ecc:	4613      	mov	r3, r2
 8004ece:	00db      	lsls	r3, r3, #3
 8004ed0:	1a9b      	subs	r3, r3, r2
 8004ed2:	009b      	lsls	r3, r3, #2
 8004ed4:	440b      	add	r3, r1
 8004ed6:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8004eda:	7bfa      	ldrb	r2, [r7, #15]
 8004edc:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004ede:	7bfa      	ldrb	r2, [r7, #15]
 8004ee0:	6879      	ldr	r1, [r7, #4]
 8004ee2:	4613      	mov	r3, r2
 8004ee4:	00db      	lsls	r3, r3, #3
 8004ee6:	1a9b      	subs	r3, r3, r2
 8004ee8:	009b      	lsls	r3, r3, #2
 8004eea:	440b      	add	r3, r1
 8004eec:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8004ef0:	2200      	movs	r2, #0
 8004ef2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004ef4:	7bfa      	ldrb	r2, [r7, #15]
 8004ef6:	6879      	ldr	r1, [r7, #4]
 8004ef8:	4613      	mov	r3, r2
 8004efa:	00db      	lsls	r3, r3, #3
 8004efc:	1a9b      	subs	r3, r3, r2
 8004efe:	009b      	lsls	r3, r3, #2
 8004f00:	440b      	add	r3, r1
 8004f02:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8004f06:	2200      	movs	r2, #0
 8004f08:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004f0a:	7bfa      	ldrb	r2, [r7, #15]
 8004f0c:	6879      	ldr	r1, [r7, #4]
 8004f0e:	4613      	mov	r3, r2
 8004f10:	00db      	lsls	r3, r3, #3
 8004f12:	1a9b      	subs	r3, r3, r2
 8004f14:	009b      	lsls	r3, r3, #2
 8004f16:	440b      	add	r3, r1
 8004f18:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8004f1c:	2200      	movs	r2, #0
 8004f1e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004f20:	7bfa      	ldrb	r2, [r7, #15]
 8004f22:	6879      	ldr	r1, [r7, #4]
 8004f24:	4613      	mov	r3, r2
 8004f26:	00db      	lsls	r3, r3, #3
 8004f28:	1a9b      	subs	r3, r3, r2
 8004f2a:	009b      	lsls	r3, r3, #2
 8004f2c:	440b      	add	r3, r1
 8004f2e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8004f32:	2200      	movs	r2, #0
 8004f34:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004f36:	7bfb      	ldrb	r3, [r7, #15]
 8004f38:	3301      	adds	r3, #1
 8004f3a:	73fb      	strb	r3, [r7, #15]
 8004f3c:	7bfa      	ldrb	r2, [r7, #15]
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	685b      	ldr	r3, [r3, #4]
 8004f42:	429a      	cmp	r2, r3
 8004f44:	d3b5      	bcc.n	8004eb2 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	603b      	str	r3, [r7, #0]
 8004f4c:	687e      	ldr	r6, [r7, #4]
 8004f4e:	466d      	mov	r5, sp
 8004f50:	f106 0410 	add.w	r4, r6, #16
 8004f54:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004f56:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004f58:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004f5a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004f5c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004f60:	e885 0003 	stmia.w	r5, {r0, r1}
 8004f64:	1d33      	adds	r3, r6, #4
 8004f66:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004f68:	6838      	ldr	r0, [r7, #0]
 8004f6a:	f005 f99d 	bl	800a2a8 <USB_DevInit>
 8004f6e:	4603      	mov	r3, r0
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d005      	beq.n	8004f80 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	2202      	movs	r2, #2
 8004f78:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8004f7c:	2301      	movs	r3, #1
 8004f7e:	e00d      	b.n	8004f9c <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	2200      	movs	r2, #0
 8004f84:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	2201      	movs	r2, #1
 8004f8c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
  #endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	4618      	mov	r0, r3
 8004f96:	f006 f992 	bl	800b2be <USB_DevDisconnect>

  return HAL_OK;
 8004f9a:	2300      	movs	r3, #0
}
 8004f9c:	4618      	mov	r0, r3
 8004f9e:	3714      	adds	r7, #20
 8004fa0:	46bd      	mov	sp, r7
 8004fa2:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004fa4 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8004fa4:	b580      	push	{r7, lr}
 8004fa6:	b084      	sub	sp, #16
 8004fa8:	af00      	add	r7, sp, #0
 8004faa:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */

  __HAL_LOCK(hpcd);
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8004fb8:	2b01      	cmp	r3, #1
 8004fba:	d101      	bne.n	8004fc0 <HAL_PCD_Start+0x1c>
 8004fbc:	2302      	movs	r3, #2
 8004fbe:	e020      	b.n	8005002 <HAL_PCD_Start+0x5e>
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	2201      	movs	r2, #1
 8004fc4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fcc:	2b01      	cmp	r3, #1
 8004fce:	d109      	bne.n	8004fe4 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8004fd4:	2b01      	cmp	r3, #1
 8004fd6:	d005      	beq.n	8004fe4 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fdc:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */
  (void)USB_DevConnect(hpcd->Instance);
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	4618      	mov	r0, r3
 8004fea:	f006 f950 	bl	800b28e <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	4618      	mov	r0, r3
 8004ff4:	f005 f90c 	bl	800a210 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	2200      	movs	r2, #0
 8004ffc:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8005000:	2300      	movs	r3, #0
}
 8005002:	4618      	mov	r0, r3
 8005004:	3710      	adds	r7, #16
 8005006:	46bd      	mov	sp, r7
 8005008:	bd80      	pop	{r7, pc}

0800500a <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800500a:	b590      	push	{r4, r7, lr}
 800500c:	b08d      	sub	sp, #52	; 0x34
 800500e:	af00      	add	r7, sp, #0
 8005010:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005018:	6a3b      	ldr	r3, [r7, #32]
 800501a:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	4618      	mov	r0, r3
 8005022:	f006 f9f7 	bl	800b414 <USB_GetMode>
 8005026:	4603      	mov	r3, r0
 8005028:	2b00      	cmp	r3, #0
 800502a:	f040 838e 	bne.w	800574a <HAL_PCD_IRQHandler+0x740>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	4618      	mov	r0, r3
 8005034:	f006 f95b 	bl	800b2ee <USB_ReadInterrupts>
 8005038:	4603      	mov	r3, r0
 800503a:	2b00      	cmp	r3, #0
 800503c:	f000 8384 	beq.w	8005748 <HAL_PCD_IRQHandler+0x73e>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	4618      	mov	r0, r3
 8005046:	f006 f952 	bl	800b2ee <USB_ReadInterrupts>
 800504a:	4603      	mov	r3, r0
 800504c:	f003 0302 	and.w	r3, r3, #2
 8005050:	2b02      	cmp	r3, #2
 8005052:	d107      	bne.n	8005064 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	695a      	ldr	r2, [r3, #20]
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	f002 0202 	and.w	r2, r2, #2
 8005062:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	4618      	mov	r0, r3
 800506a:	f006 f940 	bl	800b2ee <USB_ReadInterrupts>
 800506e:	4603      	mov	r3, r0
 8005070:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005074:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005078:	d17b      	bne.n	8005172 <HAL_PCD_IRQHandler+0x168>
    {
      epnum = 0U;
 800507a:	2300      	movs	r3, #0
 800507c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	4618      	mov	r0, r3
 8005084:	f006 f946 	bl	800b314 <USB_ReadDevAllOutEpInterrupt>
 8005088:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 800508a:	e06f      	b.n	800516c <HAL_PCD_IRQHandler+0x162>
      {
        if ((ep_intr & 0x1U) != 0U)
 800508c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800508e:	f003 0301 	and.w	r3, r3, #1
 8005092:	2b00      	cmp	r3, #0
 8005094:	d064      	beq.n	8005160 <HAL_PCD_IRQHandler+0x156>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800509c:	b2d2      	uxtb	r2, r2
 800509e:	4611      	mov	r1, r2
 80050a0:	4618      	mov	r0, r3
 80050a2:	f006 f96b 	bl	800b37c <USB_ReadDevOutEPInterrupt>
 80050a6:	61b8      	str	r0, [r7, #24]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80050a8:	69bb      	ldr	r3, [r7, #24]
 80050aa:	f003 0301 	and.w	r3, r3, #1
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d00c      	beq.n	80050cc <HAL_PCD_IRQHandler+0xc2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80050b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050b4:	015a      	lsls	r2, r3, #5
 80050b6:	69fb      	ldr	r3, [r7, #28]
 80050b8:	4413      	add	r3, r2
 80050ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80050be:	461a      	mov	r2, r3
 80050c0:	2301      	movs	r3, #1
 80050c2:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80050c4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80050c6:	6878      	ldr	r0, [r7, #4]
 80050c8:	f000 fe0e 	bl	8005ce8 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80050cc:	69bb      	ldr	r3, [r7, #24]
 80050ce:	f003 0308 	and.w	r3, r3, #8
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d00c      	beq.n	80050f0 <HAL_PCD_IRQHandler+0xe6>
          {
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80050d6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80050d8:	6878      	ldr	r0, [r7, #4]
 80050da:	f000 ff0d 	bl	8005ef8 <PCD_EP_OutSetupPacket_int>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80050de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050e0:	015a      	lsls	r2, r3, #5
 80050e2:	69fb      	ldr	r3, [r7, #28]
 80050e4:	4413      	add	r3, r2
 80050e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80050ea:	461a      	mov	r2, r3
 80050ec:	2308      	movs	r3, #8
 80050ee:	6093      	str	r3, [r2, #8]
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80050f0:	69bb      	ldr	r3, [r7, #24]
 80050f2:	f003 0310 	and.w	r3, r3, #16
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d008      	beq.n	800510c <HAL_PCD_IRQHandler+0x102>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80050fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050fc:	015a      	lsls	r2, r3, #5
 80050fe:	69fb      	ldr	r3, [r7, #28]
 8005100:	4413      	add	r3, r2
 8005102:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005106:	461a      	mov	r2, r3
 8005108:	2310      	movs	r3, #16
 800510a:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800510c:	69bb      	ldr	r3, [r7, #24]
 800510e:	f003 0320 	and.w	r3, r3, #32
 8005112:	2b00      	cmp	r3, #0
 8005114:	d015      	beq.n	8005142 <HAL_PCD_IRQHandler+0x138>
          {
            if (hpcd->Init.dma_enable == 1U)
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	691b      	ldr	r3, [r3, #16]
 800511a:	2b01      	cmp	r3, #1
 800511c:	d108      	bne.n	8005130 <HAL_PCD_IRQHandler+0x126>
            {
              (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	6818      	ldr	r0, [r3, #0]
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8005128:	461a      	mov	r2, r3
 800512a:	2101      	movs	r1, #1
 800512c:	f006 f9b6 	bl	800b49c <USB_EP0_OutStart>
            }
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005130:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005132:	015a      	lsls	r2, r3, #5
 8005134:	69fb      	ldr	r3, [r7, #28]
 8005136:	4413      	add	r3, r2
 8005138:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800513c:	461a      	mov	r2, r3
 800513e:	2320      	movs	r3, #32
 8005140:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8005142:	69bb      	ldr	r3, [r7, #24]
 8005144:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005148:	2b00      	cmp	r3, #0
 800514a:	d009      	beq.n	8005160 <HAL_PCD_IRQHandler+0x156>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800514c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800514e:	015a      	lsls	r2, r3, #5
 8005150:	69fb      	ldr	r3, [r7, #28]
 8005152:	4413      	add	r3, r2
 8005154:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005158:	461a      	mov	r2, r3
 800515a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800515e:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8005160:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005162:	3301      	adds	r3, #1
 8005164:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8005166:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005168:	085b      	lsrs	r3, r3, #1
 800516a:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800516c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800516e:	2b00      	cmp	r3, #0
 8005170:	d18c      	bne.n	800508c <HAL_PCD_IRQHandler+0x82>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	4618      	mov	r0, r3
 8005178:	f006 f8b9 	bl	800b2ee <USB_ReadInterrupts>
 800517c:	4603      	mov	r3, r0
 800517e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005182:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005186:	f040 80c4 	bne.w	8005312 <HAL_PCD_IRQHandler+0x308>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	4618      	mov	r0, r3
 8005190:	f006 f8da 	bl	800b348 <USB_ReadDevAllInEpInterrupt>
 8005194:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8005196:	2300      	movs	r3, #0
 8005198:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 800519a:	e0b6      	b.n	800530a <HAL_PCD_IRQHandler+0x300>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800519c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800519e:	f003 0301 	and.w	r3, r3, #1
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	f000 80ab 	beq.w	80052fe <HAL_PCD_IRQHandler+0x2f4>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80051ae:	b2d2      	uxtb	r2, r2
 80051b0:	4611      	mov	r1, r2
 80051b2:	4618      	mov	r0, r3
 80051b4:	f006 f900 	bl	800b3b8 <USB_ReadDevInEPInterrupt>
 80051b8:	61b8      	str	r0, [r7, #24]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80051ba:	69bb      	ldr	r3, [r7, #24]
 80051bc:	f003 0301 	and.w	r3, r3, #1
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d05b      	beq.n	800527c <HAL_PCD_IRQHandler+0x272>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80051c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051c6:	f003 030f 	and.w	r3, r3, #15
 80051ca:	2201      	movs	r2, #1
 80051cc:	fa02 f303 	lsl.w	r3, r2, r3
 80051d0:	617b      	str	r3, [r7, #20]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80051d2:	69fb      	ldr	r3, [r7, #28]
 80051d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80051d8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80051da:	697b      	ldr	r3, [r7, #20]
 80051dc:	43db      	mvns	r3, r3
 80051de:	69f9      	ldr	r1, [r7, #28]
 80051e0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80051e4:	4013      	ands	r3, r2
 80051e6:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80051e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051ea:	015a      	lsls	r2, r3, #5
 80051ec:	69fb      	ldr	r3, [r7, #28]
 80051ee:	4413      	add	r3, r2
 80051f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051f4:	461a      	mov	r2, r3
 80051f6:	2301      	movs	r3, #1
 80051f8:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	691b      	ldr	r3, [r3, #16]
 80051fe:	2b01      	cmp	r3, #1
 8005200:	d11b      	bne.n	800523a <HAL_PCD_IRQHandler+0x230>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8005202:	6879      	ldr	r1, [r7, #4]
 8005204:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005206:	4613      	mov	r3, r2
 8005208:	00db      	lsls	r3, r3, #3
 800520a:	1a9b      	subs	r3, r3, r2
 800520c:	009b      	lsls	r3, r3, #2
 800520e:	440b      	add	r3, r1
 8005210:	3348      	adds	r3, #72	; 0x48
 8005212:	6819      	ldr	r1, [r3, #0]
 8005214:	6878      	ldr	r0, [r7, #4]
 8005216:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005218:	4613      	mov	r3, r2
 800521a:	00db      	lsls	r3, r3, #3
 800521c:	1a9b      	subs	r3, r3, r2
 800521e:	009b      	lsls	r3, r3, #2
 8005220:	4403      	add	r3, r0
 8005222:	3344      	adds	r3, #68	; 0x44
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	4419      	add	r1, r3
 8005228:	6878      	ldr	r0, [r7, #4]
 800522a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800522c:	4613      	mov	r3, r2
 800522e:	00db      	lsls	r3, r3, #3
 8005230:	1a9b      	subs	r3, r3, r2
 8005232:	009b      	lsls	r3, r3, #2
 8005234:	4403      	add	r3, r0
 8005236:	3348      	adds	r3, #72	; 0x48
 8005238:	6019      	str	r1, [r3, #0]
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800523a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800523c:	b2db      	uxtb	r3, r3
 800523e:	4619      	mov	r1, r3
 8005240:	6878      	ldr	r0, [r7, #4]
 8005242:	f008 fab4 	bl	800d7ae <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

            if (hpcd->Init.dma_enable == 1U)
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	691b      	ldr	r3, [r3, #16]
 800524a:	2b01      	cmp	r3, #1
 800524c:	d116      	bne.n	800527c <HAL_PCD_IRQHandler+0x272>
            {
              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800524e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005250:	2b00      	cmp	r3, #0
 8005252:	d113      	bne.n	800527c <HAL_PCD_IRQHandler+0x272>
 8005254:	6879      	ldr	r1, [r7, #4]
 8005256:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005258:	4613      	mov	r3, r2
 800525a:	00db      	lsls	r3, r3, #3
 800525c:	1a9b      	subs	r3, r3, r2
 800525e:	009b      	lsls	r3, r3, #2
 8005260:	440b      	add	r3, r1
 8005262:	3350      	adds	r3, #80	; 0x50
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	2b00      	cmp	r3, #0
 8005268:	d108      	bne.n	800527c <HAL_PCD_IRQHandler+0x272>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	6818      	ldr	r0, [r3, #0]
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8005274:	461a      	mov	r2, r3
 8005276:	2101      	movs	r1, #1
 8005278:	f006 f910 	bl	800b49c <USB_EP0_OutStart>
              }
            }
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800527c:	69bb      	ldr	r3, [r7, #24]
 800527e:	f003 0308 	and.w	r3, r3, #8
 8005282:	2b00      	cmp	r3, #0
 8005284:	d008      	beq.n	8005298 <HAL_PCD_IRQHandler+0x28e>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8005286:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005288:	015a      	lsls	r2, r3, #5
 800528a:	69fb      	ldr	r3, [r7, #28]
 800528c:	4413      	add	r3, r2
 800528e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005292:	461a      	mov	r2, r3
 8005294:	2308      	movs	r3, #8
 8005296:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8005298:	69bb      	ldr	r3, [r7, #24]
 800529a:	f003 0310 	and.w	r3, r3, #16
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d008      	beq.n	80052b4 <HAL_PCD_IRQHandler+0x2aa>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80052a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052a4:	015a      	lsls	r2, r3, #5
 80052a6:	69fb      	ldr	r3, [r7, #28]
 80052a8:	4413      	add	r3, r2
 80052aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052ae:	461a      	mov	r2, r3
 80052b0:	2310      	movs	r3, #16
 80052b2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80052b4:	69bb      	ldr	r3, [r7, #24]
 80052b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d008      	beq.n	80052d0 <HAL_PCD_IRQHandler+0x2c6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80052be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052c0:	015a      	lsls	r2, r3, #5
 80052c2:	69fb      	ldr	r3, [r7, #28]
 80052c4:	4413      	add	r3, r2
 80052c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052ca:	461a      	mov	r2, r3
 80052cc:	2340      	movs	r3, #64	; 0x40
 80052ce:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80052d0:	69bb      	ldr	r3, [r7, #24]
 80052d2:	f003 0302 	and.w	r3, r3, #2
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d008      	beq.n	80052ec <HAL_PCD_IRQHandler+0x2e2>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80052da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052dc:	015a      	lsls	r2, r3, #5
 80052de:	69fb      	ldr	r3, [r7, #28]
 80052e0:	4413      	add	r3, r2
 80052e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052e6:	461a      	mov	r2, r3
 80052e8:	2302      	movs	r3, #2
 80052ea:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80052ec:	69bb      	ldr	r3, [r7, #24]
 80052ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d003      	beq.n	80052fe <HAL_PCD_IRQHandler+0x2f4>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80052f6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80052f8:	6878      	ldr	r0, [r7, #4]
 80052fa:	f000 fc67 	bl	8005bcc <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80052fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005300:	3301      	adds	r3, #1
 8005302:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8005304:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005306:	085b      	lsrs	r3, r3, #1
 8005308:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800530a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800530c:	2b00      	cmp	r3, #0
 800530e:	f47f af45 	bne.w	800519c <HAL_PCD_IRQHandler+0x192>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	4618      	mov	r0, r3
 8005318:	f005 ffe9 	bl	800b2ee <USB_ReadInterrupts>
 800531c:	4603      	mov	r3, r0
 800531e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005322:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005326:	d122      	bne.n	800536e <HAL_PCD_IRQHandler+0x364>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8005328:	69fb      	ldr	r3, [r7, #28]
 800532a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800532e:	685b      	ldr	r3, [r3, #4]
 8005330:	69fa      	ldr	r2, [r7, #28]
 8005332:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005336:	f023 0301 	bic.w	r3, r3, #1
 800533a:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8005342:	2b01      	cmp	r3, #1
 8005344:	d108      	bne.n	8005358 <HAL_PCD_IRQHandler+0x34e>
      {
        hpcd->LPM_State = LPM_L0;
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	2200      	movs	r2, #0
 800534a:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800534e:	2100      	movs	r1, #0
 8005350:	6878      	ldr	r0, [r7, #4]
 8005352:	f000 fe89 	bl	8006068 <HAL_PCDEx_LPM_Callback>
 8005356:	e002      	b.n	800535e <HAL_PCD_IRQHandler+0x354>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8005358:	6878      	ldr	r0, [r7, #4]
 800535a:	f008 fa9f 	bl	800d89c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	695a      	ldr	r2, [r3, #20]
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800536c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	4618      	mov	r0, r3
 8005374:	f005 ffbb 	bl	800b2ee <USB_ReadInterrupts>
 8005378:	4603      	mov	r3, r0
 800537a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800537e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005382:	d112      	bne.n	80053aa <HAL_PCD_IRQHandler+0x3a0>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8005384:	69fb      	ldr	r3, [r7, #28]
 8005386:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800538a:	689b      	ldr	r3, [r3, #8]
 800538c:	f003 0301 	and.w	r3, r3, #1
 8005390:	2b01      	cmp	r3, #1
 8005392:	d102      	bne.n	800539a <HAL_PCD_IRQHandler+0x390>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8005394:	6878      	ldr	r0, [r7, #4]
 8005396:	f008 fa5b 	bl	800d850 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	695a      	ldr	r2, [r3, #20]
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80053a8:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    #endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	4618      	mov	r0, r3
 80053b0:	f005 ff9d 	bl	800b2ee <USB_ReadInterrupts>
 80053b4:	4603      	mov	r3, r0
 80053b6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80053ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80053be:	f040 80a7 	bne.w	8005510 <HAL_PCD_IRQHandler+0x506>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80053c2:	69fb      	ldr	r3, [r7, #28]
 80053c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80053c8:	685b      	ldr	r3, [r3, #4]
 80053ca:	69fa      	ldr	r2, [r7, #28]
 80053cc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80053d0:	f023 0301 	bic.w	r3, r3, #1
 80053d4:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	2110      	movs	r1, #16
 80053dc:	4618      	mov	r0, r3
 80053de:	f005 f8d5 	bl	800a58c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80053e2:	2300      	movs	r3, #0
 80053e4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80053e6:	e036      	b.n	8005456 <HAL_PCD_IRQHandler+0x44c>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80053e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053ea:	015a      	lsls	r2, r3, #5
 80053ec:	69fb      	ldr	r3, [r7, #28]
 80053ee:	4413      	add	r3, r2
 80053f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053f4:	461a      	mov	r2, r3
 80053f6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80053fa:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80053fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053fe:	015a      	lsls	r2, r3, #5
 8005400:	69fb      	ldr	r3, [r7, #28]
 8005402:	4413      	add	r3, r2
 8005404:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800540c:	0151      	lsls	r1, r2, #5
 800540e:	69fa      	ldr	r2, [r7, #28]
 8005410:	440a      	add	r2, r1
 8005412:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005416:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800541a:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800541c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800541e:	015a      	lsls	r2, r3, #5
 8005420:	69fb      	ldr	r3, [r7, #28]
 8005422:	4413      	add	r3, r2
 8005424:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005428:	461a      	mov	r2, r3
 800542a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800542e:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005430:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005432:	015a      	lsls	r2, r3, #5
 8005434:	69fb      	ldr	r3, [r7, #28]
 8005436:	4413      	add	r3, r2
 8005438:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005440:	0151      	lsls	r1, r2, #5
 8005442:	69fa      	ldr	r2, [r7, #28]
 8005444:	440a      	add	r2, r1
 8005446:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800544a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800544e:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005450:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005452:	3301      	adds	r3, #1
 8005454:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	685b      	ldr	r3, [r3, #4]
 800545a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800545c:	429a      	cmp	r2, r3
 800545e:	d3c3      	bcc.n	80053e8 <HAL_PCD_IRQHandler+0x3de>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8005460:	69fb      	ldr	r3, [r7, #28]
 8005462:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005466:	69db      	ldr	r3, [r3, #28]
 8005468:	69fa      	ldr	r2, [r7, #28]
 800546a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800546e:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8005472:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005478:	2b00      	cmp	r3, #0
 800547a:	d016      	beq.n	80054aa <HAL_PCD_IRQHandler+0x4a0>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800547c:	69fb      	ldr	r3, [r7, #28]
 800547e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005482:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005486:	69fa      	ldr	r2, [r7, #28]
 8005488:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800548c:	f043 030b 	orr.w	r3, r3, #11
 8005490:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8005494:	69fb      	ldr	r3, [r7, #28]
 8005496:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800549a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800549c:	69fa      	ldr	r2, [r7, #28]
 800549e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80054a2:	f043 030b 	orr.w	r3, r3, #11
 80054a6:	6453      	str	r3, [r2, #68]	; 0x44
 80054a8:	e015      	b.n	80054d6 <HAL_PCD_IRQHandler+0x4cc>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80054aa:	69fb      	ldr	r3, [r7, #28]
 80054ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80054b0:	695b      	ldr	r3, [r3, #20]
 80054b2:	69fa      	ldr	r2, [r7, #28]
 80054b4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80054b8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80054bc:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80054c0:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80054c2:	69fb      	ldr	r3, [r7, #28]
 80054c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80054c8:	691b      	ldr	r3, [r3, #16]
 80054ca:	69fa      	ldr	r2, [r7, #28]
 80054cc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80054d0:	f043 030b 	orr.w	r3, r3, #11
 80054d4:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80054d6:	69fb      	ldr	r3, [r7, #28]
 80054d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	69fa      	ldr	r2, [r7, #28]
 80054e0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80054e4:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80054e8:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	6818      	ldr	r0, [r3, #0]
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	691b      	ldr	r3, [r3, #16]
 80054f2:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80054fa:	461a      	mov	r2, r3
 80054fc:	f005 ffce 	bl	800b49c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	695a      	ldr	r2, [r3, #20]
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800550e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	4618      	mov	r0, r3
 8005516:	f005 feea 	bl	800b2ee <USB_ReadInterrupts>
 800551a:	4603      	mov	r3, r0
 800551c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005520:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005524:	d124      	bne.n	8005570 <HAL_PCD_IRQHandler+0x566>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	4618      	mov	r0, r3
 800552c:	f005 ff80 	bl	800b430 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	4618      	mov	r0, r3
 8005536:	f005 f88a 	bl	800a64e <USB_GetDevSpeed>
 800553a:	4603      	mov	r3, r0
 800553c:	461a      	mov	r2, r3
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681c      	ldr	r4, [r3, #0]
 8005546:	f001 f9a3 	bl	8006890 <HAL_RCC_GetHCLKFreq>
 800554a:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8005550:	b2db      	uxtb	r3, r3
 8005552:	461a      	mov	r2, r3
 8005554:	4620      	mov	r0, r4
 8005556:	f004 fdb9 	bl	800a0cc <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800555a:	6878      	ldr	r0, [r7, #4]
 800555c:	f008 f94f 	bl	800d7fe <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	695a      	ldr	r2, [r3, #20]
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800556e:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	4618      	mov	r0, r3
 8005576:	f005 feba 	bl	800b2ee <USB_ReadInterrupts>
 800557a:	4603      	mov	r3, r0
 800557c:	f003 0310 	and.w	r3, r3, #16
 8005580:	2b10      	cmp	r3, #16
 8005582:	d161      	bne.n	8005648 <HAL_PCD_IRQHandler+0x63e>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	699a      	ldr	r2, [r3, #24]
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	f022 0210 	bic.w	r2, r2, #16
 8005592:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8005594:	6a3b      	ldr	r3, [r7, #32]
 8005596:	6a1b      	ldr	r3, [r3, #32]
 8005598:	613b      	str	r3, [r7, #16]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 800559a:	693b      	ldr	r3, [r7, #16]
 800559c:	f003 020f 	and.w	r2, r3, #15
 80055a0:	4613      	mov	r3, r2
 80055a2:	00db      	lsls	r3, r3, #3
 80055a4:	1a9b      	subs	r3, r3, r2
 80055a6:	009b      	lsls	r3, r3, #2
 80055a8:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80055ac:	687a      	ldr	r2, [r7, #4]
 80055ae:	4413      	add	r3, r2
 80055b0:	3304      	adds	r3, #4
 80055b2:	60fb      	str	r3, [r7, #12]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80055b4:	693b      	ldr	r3, [r7, #16]
 80055b6:	0c5b      	lsrs	r3, r3, #17
 80055b8:	f003 030f 	and.w	r3, r3, #15
 80055bc:	2b02      	cmp	r3, #2
 80055be:	d124      	bne.n	800560a <HAL_PCD_IRQHandler+0x600>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 80055c0:	693a      	ldr	r2, [r7, #16]
 80055c2:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80055c6:	4013      	ands	r3, r2
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d035      	beq.n	8005638 <HAL_PCD_IRQHandler+0x62e>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 80055d0:	693b      	ldr	r3, [r7, #16]
 80055d2:	091b      	lsrs	r3, r3, #4
 80055d4:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80055d6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80055da:	b29b      	uxth	r3, r3
 80055dc:	461a      	mov	r2, r3
 80055de:	6a38      	ldr	r0, [r7, #32]
 80055e0:	f005 fd32 	bl	800b048 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	68da      	ldr	r2, [r3, #12]
 80055e8:	693b      	ldr	r3, [r7, #16]
 80055ea:	091b      	lsrs	r3, r3, #4
 80055ec:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80055f0:	441a      	add	r2, r3
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	699a      	ldr	r2, [r3, #24]
 80055fa:	693b      	ldr	r3, [r7, #16]
 80055fc:	091b      	lsrs	r3, r3, #4
 80055fe:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005602:	441a      	add	r2, r3
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	619a      	str	r2, [r3, #24]
 8005608:	e016      	b.n	8005638 <HAL_PCD_IRQHandler+0x62e>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 800560a:	693b      	ldr	r3, [r7, #16]
 800560c:	0c5b      	lsrs	r3, r3, #17
 800560e:	f003 030f 	and.w	r3, r3, #15
 8005612:	2b06      	cmp	r3, #6
 8005614:	d110      	bne.n	8005638 <HAL_PCD_IRQHandler+0x62e>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800561c:	2208      	movs	r2, #8
 800561e:	4619      	mov	r1, r3
 8005620:	6a38      	ldr	r0, [r7, #32]
 8005622:	f005 fd11 	bl	800b048 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	699a      	ldr	r2, [r3, #24]
 800562a:	693b      	ldr	r3, [r7, #16]
 800562c:	091b      	lsrs	r3, r3, #4
 800562e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005632:	441a      	add	r2, r3
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	699a      	ldr	r2, [r3, #24]
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	f042 0210 	orr.w	r2, r2, #16
 8005646:	619a      	str	r2, [r3, #24]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	4618      	mov	r0, r3
 800564e:	f005 fe4e 	bl	800b2ee <USB_ReadInterrupts>
 8005652:	4603      	mov	r3, r0
 8005654:	f003 0308 	and.w	r3, r3, #8
 8005658:	2b08      	cmp	r3, #8
 800565a:	d10a      	bne.n	8005672 <HAL_PCD_IRQHandler+0x668>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800565c:	6878      	ldr	r0, [r7, #4]
 800565e:	f008 f8c0 	bl	800d7e2 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	695a      	ldr	r2, [r3, #20]
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	f002 0208 	and.w	r2, r2, #8
 8005670:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	4618      	mov	r0, r3
 8005678:	f005 fe39 	bl	800b2ee <USB_ReadInterrupts>
 800567c:	4603      	mov	r3, r0
 800567e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005682:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005686:	d10f      	bne.n	80056a8 <HAL_PCD_IRQHandler+0x69e>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8005688:	2300      	movs	r3, #0
 800568a:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800568c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800568e:	b2db      	uxtb	r3, r3
 8005690:	4619      	mov	r1, r3
 8005692:	6878      	ldr	r0, [r7, #4]
 8005694:	f008 f922 	bl	800d8dc <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	695a      	ldr	r2, [r3, #20]
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80056a6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	4618      	mov	r0, r3
 80056ae:	f005 fe1e 	bl	800b2ee <USB_ReadInterrupts>
 80056b2:	4603      	mov	r3, r0
 80056b4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80056b8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80056bc:	d10f      	bne.n	80056de <HAL_PCD_IRQHandler+0x6d4>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 80056be:	2300      	movs	r3, #0
 80056c0:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80056c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056c4:	b2db      	uxtb	r3, r3
 80056c6:	4619      	mov	r1, r3
 80056c8:	6878      	ldr	r0, [r7, #4]
 80056ca:	f008 f8f5 	bl	800d8b8 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	695a      	ldr	r2, [r3, #20]
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80056dc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	4618      	mov	r0, r3
 80056e4:	f005 fe03 	bl	800b2ee <USB_ReadInterrupts>
 80056e8:	4603      	mov	r3, r0
 80056ea:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80056ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80056f2:	d10a      	bne.n	800570a <HAL_PCD_IRQHandler+0x700>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80056f4:	6878      	ldr	r0, [r7, #4]
 80056f6:	f008 f903 	bl	800d900 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	695a      	ldr	r2, [r3, #20]
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8005708:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	4618      	mov	r0, r3
 8005710:	f005 fded 	bl	800b2ee <USB_ReadInterrupts>
 8005714:	4603      	mov	r3, r0
 8005716:	f003 0304 	and.w	r3, r3, #4
 800571a:	2b04      	cmp	r3, #4
 800571c:	d115      	bne.n	800574a <HAL_PCD_IRQHandler+0x740>
    {
      temp = hpcd->Instance->GOTGINT;
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	685b      	ldr	r3, [r3, #4]
 8005724:	613b      	str	r3, [r7, #16]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8005726:	693b      	ldr	r3, [r7, #16]
 8005728:	f003 0304 	and.w	r3, r3, #4
 800572c:	2b00      	cmp	r3, #0
 800572e:	d002      	beq.n	8005736 <HAL_PCD_IRQHandler+0x72c>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8005730:	6878      	ldr	r0, [r7, #4]
 8005732:	f008 f8f3 	bl	800d91c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	6859      	ldr	r1, [r3, #4]
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	693a      	ldr	r2, [r7, #16]
 8005742:	430a      	orrs	r2, r1
 8005744:	605a      	str	r2, [r3, #4]
 8005746:	e000      	b.n	800574a <HAL_PCD_IRQHandler+0x740>
      return;
 8005748:	bf00      	nop
    }
  }
}
 800574a:	3734      	adds	r7, #52	; 0x34
 800574c:	46bd      	mov	sp, r7
 800574e:	bd90      	pop	{r4, r7, pc}

08005750 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8005750:	b580      	push	{r7, lr}
 8005752:	b082      	sub	sp, #8
 8005754:	af00      	add	r7, sp, #0
 8005756:	6078      	str	r0, [r7, #4]
 8005758:	460b      	mov	r3, r1
 800575a:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8005762:	2b01      	cmp	r3, #1
 8005764:	d101      	bne.n	800576a <HAL_PCD_SetAddress+0x1a>
 8005766:	2302      	movs	r3, #2
 8005768:	e013      	b.n	8005792 <HAL_PCD_SetAddress+0x42>
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	2201      	movs	r2, #1
 800576e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	78fa      	ldrb	r2, [r7, #3]
 8005776:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	78fa      	ldrb	r2, [r7, #3]
 8005780:	4611      	mov	r1, r2
 8005782:	4618      	mov	r0, r3
 8005784:	f005 fd5d 	bl	800b242 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	2200      	movs	r2, #0
 800578c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8005790:	2300      	movs	r3, #0
}
 8005792:	4618      	mov	r0, r3
 8005794:	3708      	adds	r7, #8
 8005796:	46bd      	mov	sp, r7
 8005798:	bd80      	pop	{r7, pc}

0800579a <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 800579a:	b580      	push	{r7, lr}
 800579c:	b084      	sub	sp, #16
 800579e:	af00      	add	r7, sp, #0
 80057a0:	6078      	str	r0, [r7, #4]
 80057a2:	4608      	mov	r0, r1
 80057a4:	4611      	mov	r1, r2
 80057a6:	461a      	mov	r2, r3
 80057a8:	4603      	mov	r3, r0
 80057aa:	70fb      	strb	r3, [r7, #3]
 80057ac:	460b      	mov	r3, r1
 80057ae:	803b      	strh	r3, [r7, #0]
 80057b0:	4613      	mov	r3, r2
 80057b2:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80057b4:	2300      	movs	r3, #0
 80057b6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80057b8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80057bc:	2b00      	cmp	r3, #0
 80057be:	da0f      	bge.n	80057e0 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80057c0:	78fb      	ldrb	r3, [r7, #3]
 80057c2:	f003 020f 	and.w	r2, r3, #15
 80057c6:	4613      	mov	r3, r2
 80057c8:	00db      	lsls	r3, r3, #3
 80057ca:	1a9b      	subs	r3, r3, r2
 80057cc:	009b      	lsls	r3, r3, #2
 80057ce:	3338      	adds	r3, #56	; 0x38
 80057d0:	687a      	ldr	r2, [r7, #4]
 80057d2:	4413      	add	r3, r2
 80057d4:	3304      	adds	r3, #4
 80057d6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	2201      	movs	r2, #1
 80057dc:	705a      	strb	r2, [r3, #1]
 80057de:	e00f      	b.n	8005800 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80057e0:	78fb      	ldrb	r3, [r7, #3]
 80057e2:	f003 020f 	and.w	r2, r3, #15
 80057e6:	4613      	mov	r3, r2
 80057e8:	00db      	lsls	r3, r3, #3
 80057ea:	1a9b      	subs	r3, r3, r2
 80057ec:	009b      	lsls	r3, r3, #2
 80057ee:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80057f2:	687a      	ldr	r2, [r7, #4]
 80057f4:	4413      	add	r3, r2
 80057f6:	3304      	adds	r3, #4
 80057f8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	2200      	movs	r2, #0
 80057fe:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8005800:	78fb      	ldrb	r3, [r7, #3]
 8005802:	f003 030f 	and.w	r3, r3, #15
 8005806:	b2da      	uxtb	r2, r3
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800580c:	883a      	ldrh	r2, [r7, #0]
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	78ba      	ldrb	r2, [r7, #2]
 8005816:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	785b      	ldrb	r3, [r3, #1]
 800581c:	2b00      	cmp	r3, #0
 800581e:	d004      	beq.n	800582a <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	781b      	ldrb	r3, [r3, #0]
 8005824:	b29a      	uxth	r2, r3
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800582a:	78bb      	ldrb	r3, [r7, #2]
 800582c:	2b02      	cmp	r3, #2
 800582e:	d102      	bne.n	8005836 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	2200      	movs	r2, #0
 8005834:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800583c:	2b01      	cmp	r3, #1
 800583e:	d101      	bne.n	8005844 <HAL_PCD_EP_Open+0xaa>
 8005840:	2302      	movs	r3, #2
 8005842:	e00e      	b.n	8005862 <HAL_PCD_EP_Open+0xc8>
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	2201      	movs	r2, #1
 8005848:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	68f9      	ldr	r1, [r7, #12]
 8005852:	4618      	mov	r0, r3
 8005854:	f004 ff20 	bl	800a698 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	2200      	movs	r2, #0
 800585c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8005860:	7afb      	ldrb	r3, [r7, #11]
}
 8005862:	4618      	mov	r0, r3
 8005864:	3710      	adds	r7, #16
 8005866:	46bd      	mov	sp, r7
 8005868:	bd80      	pop	{r7, pc}

0800586a <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800586a:	b580      	push	{r7, lr}
 800586c:	b084      	sub	sp, #16
 800586e:	af00      	add	r7, sp, #0
 8005870:	6078      	str	r0, [r7, #4]
 8005872:	460b      	mov	r3, r1
 8005874:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005876:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800587a:	2b00      	cmp	r3, #0
 800587c:	da0f      	bge.n	800589e <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800587e:	78fb      	ldrb	r3, [r7, #3]
 8005880:	f003 020f 	and.w	r2, r3, #15
 8005884:	4613      	mov	r3, r2
 8005886:	00db      	lsls	r3, r3, #3
 8005888:	1a9b      	subs	r3, r3, r2
 800588a:	009b      	lsls	r3, r3, #2
 800588c:	3338      	adds	r3, #56	; 0x38
 800588e:	687a      	ldr	r2, [r7, #4]
 8005890:	4413      	add	r3, r2
 8005892:	3304      	adds	r3, #4
 8005894:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	2201      	movs	r2, #1
 800589a:	705a      	strb	r2, [r3, #1]
 800589c:	e00f      	b.n	80058be <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800589e:	78fb      	ldrb	r3, [r7, #3]
 80058a0:	f003 020f 	and.w	r2, r3, #15
 80058a4:	4613      	mov	r3, r2
 80058a6:	00db      	lsls	r3, r3, #3
 80058a8:	1a9b      	subs	r3, r3, r2
 80058aa:	009b      	lsls	r3, r3, #2
 80058ac:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80058b0:	687a      	ldr	r2, [r7, #4]
 80058b2:	4413      	add	r3, r2
 80058b4:	3304      	adds	r3, #4
 80058b6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	2200      	movs	r2, #0
 80058bc:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80058be:	78fb      	ldrb	r3, [r7, #3]
 80058c0:	f003 030f 	and.w	r3, r3, #15
 80058c4:	b2da      	uxtb	r2, r3
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80058d0:	2b01      	cmp	r3, #1
 80058d2:	d101      	bne.n	80058d8 <HAL_PCD_EP_Close+0x6e>
 80058d4:	2302      	movs	r3, #2
 80058d6:	e00e      	b.n	80058f6 <HAL_PCD_EP_Close+0x8c>
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	2201      	movs	r2, #1
 80058dc:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	68f9      	ldr	r1, [r7, #12]
 80058e6:	4618      	mov	r0, r3
 80058e8:	f004 ff5e 	bl	800a7a8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	2200      	movs	r2, #0
 80058f0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 80058f4:	2300      	movs	r3, #0
}
 80058f6:	4618      	mov	r0, r3
 80058f8:	3710      	adds	r7, #16
 80058fa:	46bd      	mov	sp, r7
 80058fc:	bd80      	pop	{r7, pc}

080058fe <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80058fe:	b580      	push	{r7, lr}
 8005900:	b086      	sub	sp, #24
 8005902:	af00      	add	r7, sp, #0
 8005904:	60f8      	str	r0, [r7, #12]
 8005906:	607a      	str	r2, [r7, #4]
 8005908:	603b      	str	r3, [r7, #0]
 800590a:	460b      	mov	r3, r1
 800590c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800590e:	7afb      	ldrb	r3, [r7, #11]
 8005910:	f003 020f 	and.w	r2, r3, #15
 8005914:	4613      	mov	r3, r2
 8005916:	00db      	lsls	r3, r3, #3
 8005918:	1a9b      	subs	r3, r3, r2
 800591a:	009b      	lsls	r3, r3, #2
 800591c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8005920:	68fa      	ldr	r2, [r7, #12]
 8005922:	4413      	add	r3, r2
 8005924:	3304      	adds	r3, #4
 8005926:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005928:	697b      	ldr	r3, [r7, #20]
 800592a:	687a      	ldr	r2, [r7, #4]
 800592c:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800592e:	697b      	ldr	r3, [r7, #20]
 8005930:	683a      	ldr	r2, [r7, #0]
 8005932:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8005934:	697b      	ldr	r3, [r7, #20]
 8005936:	2200      	movs	r2, #0
 8005938:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 800593a:	697b      	ldr	r3, [r7, #20]
 800593c:	2200      	movs	r2, #0
 800593e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005940:	7afb      	ldrb	r3, [r7, #11]
 8005942:	f003 030f 	and.w	r3, r3, #15
 8005946:	b2da      	uxtb	r2, r3
 8005948:	697b      	ldr	r3, [r7, #20]
 800594a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	691b      	ldr	r3, [r3, #16]
 8005950:	2b01      	cmp	r3, #1
 8005952:	d102      	bne.n	800595a <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8005954:	687a      	ldr	r2, [r7, #4]
 8005956:	697b      	ldr	r3, [r7, #20]
 8005958:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800595a:	7afb      	ldrb	r3, [r7, #11]
 800595c:	f003 030f 	and.w	r3, r3, #15
 8005960:	2b00      	cmp	r3, #0
 8005962:	d109      	bne.n	8005978 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	6818      	ldr	r0, [r3, #0]
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	691b      	ldr	r3, [r3, #16]
 800596c:	b2db      	uxtb	r3, r3
 800596e:	461a      	mov	r2, r3
 8005970:	6979      	ldr	r1, [r7, #20]
 8005972:	f005 f9e1 	bl	800ad38 <USB_EP0StartXfer>
 8005976:	e008      	b.n	800598a <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	6818      	ldr	r0, [r3, #0]
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	691b      	ldr	r3, [r3, #16]
 8005980:	b2db      	uxtb	r3, r3
 8005982:	461a      	mov	r2, r3
 8005984:	6979      	ldr	r1, [r7, #20]
 8005986:	f004 ff93 	bl	800a8b0 <USB_EPStartXfer>
  }

  return HAL_OK;
 800598a:	2300      	movs	r3, #0
}
 800598c:	4618      	mov	r0, r3
 800598e:	3718      	adds	r7, #24
 8005990:	46bd      	mov	sp, r7
 8005992:	bd80      	pop	{r7, pc}

08005994 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005994:	b480      	push	{r7}
 8005996:	b083      	sub	sp, #12
 8005998:	af00      	add	r7, sp, #0
 800599a:	6078      	str	r0, [r7, #4]
 800599c:	460b      	mov	r3, r1
 800599e:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80059a0:	78fb      	ldrb	r3, [r7, #3]
 80059a2:	f003 020f 	and.w	r2, r3, #15
 80059a6:	6879      	ldr	r1, [r7, #4]
 80059a8:	4613      	mov	r3, r2
 80059aa:	00db      	lsls	r3, r3, #3
 80059ac:	1a9b      	subs	r3, r3, r2
 80059ae:	009b      	lsls	r3, r3, #2
 80059b0:	440b      	add	r3, r1
 80059b2:	f503 7305 	add.w	r3, r3, #532	; 0x214
 80059b6:	681b      	ldr	r3, [r3, #0]
}
 80059b8:	4618      	mov	r0, r3
 80059ba:	370c      	adds	r7, #12
 80059bc:	46bd      	mov	sp, r7
 80059be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059c2:	4770      	bx	lr

080059c4 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80059c4:	b580      	push	{r7, lr}
 80059c6:	b086      	sub	sp, #24
 80059c8:	af00      	add	r7, sp, #0
 80059ca:	60f8      	str	r0, [r7, #12]
 80059cc:	607a      	str	r2, [r7, #4]
 80059ce:	603b      	str	r3, [r7, #0]
 80059d0:	460b      	mov	r3, r1
 80059d2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80059d4:	7afb      	ldrb	r3, [r7, #11]
 80059d6:	f003 020f 	and.w	r2, r3, #15
 80059da:	4613      	mov	r3, r2
 80059dc:	00db      	lsls	r3, r3, #3
 80059de:	1a9b      	subs	r3, r3, r2
 80059e0:	009b      	lsls	r3, r3, #2
 80059e2:	3338      	adds	r3, #56	; 0x38
 80059e4:	68fa      	ldr	r2, [r7, #12]
 80059e6:	4413      	add	r3, r2
 80059e8:	3304      	adds	r3, #4
 80059ea:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80059ec:	697b      	ldr	r3, [r7, #20]
 80059ee:	687a      	ldr	r2, [r7, #4]
 80059f0:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80059f2:	697b      	ldr	r3, [r7, #20]
 80059f4:	683a      	ldr	r2, [r7, #0]
 80059f6:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 80059f8:	697b      	ldr	r3, [r7, #20]
 80059fa:	2200      	movs	r2, #0
 80059fc:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 80059fe:	697b      	ldr	r3, [r7, #20]
 8005a00:	2201      	movs	r2, #1
 8005a02:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005a04:	7afb      	ldrb	r3, [r7, #11]
 8005a06:	f003 030f 	and.w	r3, r3, #15
 8005a0a:	b2da      	uxtb	r2, r3
 8005a0c:	697b      	ldr	r3, [r7, #20]
 8005a0e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	691b      	ldr	r3, [r3, #16]
 8005a14:	2b01      	cmp	r3, #1
 8005a16:	d102      	bne.n	8005a1e <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8005a18:	687a      	ldr	r2, [r7, #4]
 8005a1a:	697b      	ldr	r3, [r7, #20]
 8005a1c:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005a1e:	7afb      	ldrb	r3, [r7, #11]
 8005a20:	f003 030f 	and.w	r3, r3, #15
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d109      	bne.n	8005a3c <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	6818      	ldr	r0, [r3, #0]
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	691b      	ldr	r3, [r3, #16]
 8005a30:	b2db      	uxtb	r3, r3
 8005a32:	461a      	mov	r2, r3
 8005a34:	6979      	ldr	r1, [r7, #20]
 8005a36:	f005 f97f 	bl	800ad38 <USB_EP0StartXfer>
 8005a3a:	e008      	b.n	8005a4e <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	6818      	ldr	r0, [r3, #0]
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	691b      	ldr	r3, [r3, #16]
 8005a44:	b2db      	uxtb	r3, r3
 8005a46:	461a      	mov	r2, r3
 8005a48:	6979      	ldr	r1, [r7, #20]
 8005a4a:	f004 ff31 	bl	800a8b0 <USB_EPStartXfer>
  }

  return HAL_OK;
 8005a4e:	2300      	movs	r3, #0
}
 8005a50:	4618      	mov	r0, r3
 8005a52:	3718      	adds	r7, #24
 8005a54:	46bd      	mov	sp, r7
 8005a56:	bd80      	pop	{r7, pc}

08005a58 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005a58:	b580      	push	{r7, lr}
 8005a5a:	b084      	sub	sp, #16
 8005a5c:	af00      	add	r7, sp, #0
 8005a5e:	6078      	str	r0, [r7, #4]
 8005a60:	460b      	mov	r3, r1
 8005a62:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8005a64:	78fb      	ldrb	r3, [r7, #3]
 8005a66:	f003 020f 	and.w	r2, r3, #15
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	685b      	ldr	r3, [r3, #4]
 8005a6e:	429a      	cmp	r2, r3
 8005a70:	d901      	bls.n	8005a76 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8005a72:	2301      	movs	r3, #1
 8005a74:	e050      	b.n	8005b18 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005a76:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	da0f      	bge.n	8005a9e <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005a7e:	78fb      	ldrb	r3, [r7, #3]
 8005a80:	f003 020f 	and.w	r2, r3, #15
 8005a84:	4613      	mov	r3, r2
 8005a86:	00db      	lsls	r3, r3, #3
 8005a88:	1a9b      	subs	r3, r3, r2
 8005a8a:	009b      	lsls	r3, r3, #2
 8005a8c:	3338      	adds	r3, #56	; 0x38
 8005a8e:	687a      	ldr	r2, [r7, #4]
 8005a90:	4413      	add	r3, r2
 8005a92:	3304      	adds	r3, #4
 8005a94:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	2201      	movs	r2, #1
 8005a9a:	705a      	strb	r2, [r3, #1]
 8005a9c:	e00d      	b.n	8005aba <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8005a9e:	78fa      	ldrb	r2, [r7, #3]
 8005aa0:	4613      	mov	r3, r2
 8005aa2:	00db      	lsls	r3, r3, #3
 8005aa4:	1a9b      	subs	r3, r3, r2
 8005aa6:	009b      	lsls	r3, r3, #2
 8005aa8:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8005aac:	687a      	ldr	r2, [r7, #4]
 8005aae:	4413      	add	r3, r2
 8005ab0:	3304      	adds	r3, #4
 8005ab2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	2200      	movs	r2, #0
 8005ab8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	2201      	movs	r2, #1
 8005abe:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005ac0:	78fb      	ldrb	r3, [r7, #3]
 8005ac2:	f003 030f 	and.w	r3, r3, #15
 8005ac6:	b2da      	uxtb	r2, r3
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8005ad2:	2b01      	cmp	r3, #1
 8005ad4:	d101      	bne.n	8005ada <HAL_PCD_EP_SetStall+0x82>
 8005ad6:	2302      	movs	r3, #2
 8005ad8:	e01e      	b.n	8005b18 <HAL_PCD_EP_SetStall+0xc0>
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	2201      	movs	r2, #1
 8005ade:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	68f9      	ldr	r1, [r7, #12]
 8005ae8:	4618      	mov	r0, r3
 8005aea:	f005 fad6 	bl	800b09a <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005aee:	78fb      	ldrb	r3, [r7, #3]
 8005af0:	f003 030f 	and.w	r3, r3, #15
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d10a      	bne.n	8005b0e <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	6818      	ldr	r0, [r3, #0]
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	691b      	ldr	r3, [r3, #16]
 8005b00:	b2d9      	uxtb	r1, r3
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8005b08:	461a      	mov	r2, r3
 8005b0a:	f005 fcc7 	bl	800b49c <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	2200      	movs	r2, #0
 8005b12:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8005b16:	2300      	movs	r3, #0
}
 8005b18:	4618      	mov	r0, r3
 8005b1a:	3710      	adds	r7, #16
 8005b1c:	46bd      	mov	sp, r7
 8005b1e:	bd80      	pop	{r7, pc}

08005b20 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005b20:	b580      	push	{r7, lr}
 8005b22:	b084      	sub	sp, #16
 8005b24:	af00      	add	r7, sp, #0
 8005b26:	6078      	str	r0, [r7, #4]
 8005b28:	460b      	mov	r3, r1
 8005b2a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8005b2c:	78fb      	ldrb	r3, [r7, #3]
 8005b2e:	f003 020f 	and.w	r2, r3, #15
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	685b      	ldr	r3, [r3, #4]
 8005b36:	429a      	cmp	r2, r3
 8005b38:	d901      	bls.n	8005b3e <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8005b3a:	2301      	movs	r3, #1
 8005b3c:	e042      	b.n	8005bc4 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005b3e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	da0f      	bge.n	8005b66 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005b46:	78fb      	ldrb	r3, [r7, #3]
 8005b48:	f003 020f 	and.w	r2, r3, #15
 8005b4c:	4613      	mov	r3, r2
 8005b4e:	00db      	lsls	r3, r3, #3
 8005b50:	1a9b      	subs	r3, r3, r2
 8005b52:	009b      	lsls	r3, r3, #2
 8005b54:	3338      	adds	r3, #56	; 0x38
 8005b56:	687a      	ldr	r2, [r7, #4]
 8005b58:	4413      	add	r3, r2
 8005b5a:	3304      	adds	r3, #4
 8005b5c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	2201      	movs	r2, #1
 8005b62:	705a      	strb	r2, [r3, #1]
 8005b64:	e00f      	b.n	8005b86 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005b66:	78fb      	ldrb	r3, [r7, #3]
 8005b68:	f003 020f 	and.w	r2, r3, #15
 8005b6c:	4613      	mov	r3, r2
 8005b6e:	00db      	lsls	r3, r3, #3
 8005b70:	1a9b      	subs	r3, r3, r2
 8005b72:	009b      	lsls	r3, r3, #2
 8005b74:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8005b78:	687a      	ldr	r2, [r7, #4]
 8005b7a:	4413      	add	r3, r2
 8005b7c:	3304      	adds	r3, #4
 8005b7e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	2200      	movs	r2, #0
 8005b84:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	2200      	movs	r2, #0
 8005b8a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005b8c:	78fb      	ldrb	r3, [r7, #3]
 8005b8e:	f003 030f 	and.w	r3, r3, #15
 8005b92:	b2da      	uxtb	r2, r3
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8005b9e:	2b01      	cmp	r3, #1
 8005ba0:	d101      	bne.n	8005ba6 <HAL_PCD_EP_ClrStall+0x86>
 8005ba2:	2302      	movs	r3, #2
 8005ba4:	e00e      	b.n	8005bc4 <HAL_PCD_EP_ClrStall+0xa4>
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	2201      	movs	r2, #1
 8005baa:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	68f9      	ldr	r1, [r7, #12]
 8005bb4:	4618      	mov	r0, r3
 8005bb6:	f005 fade 	bl	800b176 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	2200      	movs	r2, #0
 8005bbe:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8005bc2:	2300      	movs	r3, #0
}
 8005bc4:	4618      	mov	r0, r3
 8005bc6:	3710      	adds	r7, #16
 8005bc8:	46bd      	mov	sp, r7
 8005bca:	bd80      	pop	{r7, pc}

08005bcc <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005bcc:	b580      	push	{r7, lr}
 8005bce:	b08a      	sub	sp, #40	; 0x28
 8005bd0:	af02      	add	r7, sp, #8
 8005bd2:	6078      	str	r0, [r7, #4]
 8005bd4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005bdc:	697b      	ldr	r3, [r7, #20]
 8005bde:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8005be0:	683a      	ldr	r2, [r7, #0]
 8005be2:	4613      	mov	r3, r2
 8005be4:	00db      	lsls	r3, r3, #3
 8005be6:	1a9b      	subs	r3, r3, r2
 8005be8:	009b      	lsls	r3, r3, #2
 8005bea:	3338      	adds	r3, #56	; 0x38
 8005bec:	687a      	ldr	r2, [r7, #4]
 8005bee:	4413      	add	r3, r2
 8005bf0:	3304      	adds	r3, #4
 8005bf2:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	699a      	ldr	r2, [r3, #24]
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	695b      	ldr	r3, [r3, #20]
 8005bfc:	429a      	cmp	r2, r3
 8005bfe:	d901      	bls.n	8005c04 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8005c00:	2301      	movs	r3, #1
 8005c02:	e06c      	b.n	8005cde <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	695a      	ldr	r2, [r3, #20]
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	699b      	ldr	r3, [r3, #24]
 8005c0c:	1ad3      	subs	r3, r2, r3
 8005c0e:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	689b      	ldr	r3, [r3, #8]
 8005c14:	69fa      	ldr	r2, [r7, #28]
 8005c16:	429a      	cmp	r2, r3
 8005c18:	d902      	bls.n	8005c20 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	689b      	ldr	r3, [r3, #8]
 8005c1e:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8005c20:	69fb      	ldr	r3, [r7, #28]
 8005c22:	3303      	adds	r3, #3
 8005c24:	089b      	lsrs	r3, r3, #2
 8005c26:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005c28:	e02b      	b.n	8005c82 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	695a      	ldr	r2, [r3, #20]
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	699b      	ldr	r3, [r3, #24]
 8005c32:	1ad3      	subs	r3, r2, r3
 8005c34:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	689b      	ldr	r3, [r3, #8]
 8005c3a:	69fa      	ldr	r2, [r7, #28]
 8005c3c:	429a      	cmp	r2, r3
 8005c3e:	d902      	bls.n	8005c46 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	689b      	ldr	r3, [r3, #8]
 8005c44:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8005c46:	69fb      	ldr	r3, [r7, #28]
 8005c48:	3303      	adds	r3, #3
 8005c4a:	089b      	lsrs	r3, r3, #2
 8005c4c:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	68d9      	ldr	r1, [r3, #12]
 8005c52:	683b      	ldr	r3, [r7, #0]
 8005c54:	b2da      	uxtb	r2, r3
 8005c56:	69fb      	ldr	r3, [r7, #28]
 8005c58:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8005c5e:	b2db      	uxtb	r3, r3
 8005c60:	9300      	str	r3, [sp, #0]
 8005c62:	4603      	mov	r3, r0
 8005c64:	6978      	ldr	r0, [r7, #20]
 8005c66:	f005 f9ba 	bl	800afde <USB_WritePacket>

    ep->xfer_buff  += len;
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	68da      	ldr	r2, [r3, #12]
 8005c6e:	69fb      	ldr	r3, [r7, #28]
 8005c70:	441a      	add	r2, r3
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	699a      	ldr	r2, [r3, #24]
 8005c7a:	69fb      	ldr	r3, [r7, #28]
 8005c7c:	441a      	add	r2, r3
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005c82:	683b      	ldr	r3, [r7, #0]
 8005c84:	015a      	lsls	r2, r3, #5
 8005c86:	693b      	ldr	r3, [r7, #16]
 8005c88:	4413      	add	r3, r2
 8005c8a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c8e:	699b      	ldr	r3, [r3, #24]
 8005c90:	b29b      	uxth	r3, r3
 8005c92:	69ba      	ldr	r2, [r7, #24]
 8005c94:	429a      	cmp	r2, r3
 8005c96:	d809      	bhi.n	8005cac <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	699a      	ldr	r2, [r3, #24]
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005ca0:	429a      	cmp	r2, r3
 8005ca2:	d203      	bcs.n	8005cac <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	695b      	ldr	r3, [r3, #20]
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d1be      	bne.n	8005c2a <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	695a      	ldr	r2, [r3, #20]
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	699b      	ldr	r3, [r3, #24]
 8005cb4:	429a      	cmp	r2, r3
 8005cb6:	d811      	bhi.n	8005cdc <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8005cb8:	683b      	ldr	r3, [r7, #0]
 8005cba:	f003 030f 	and.w	r3, r3, #15
 8005cbe:	2201      	movs	r2, #1
 8005cc0:	fa02 f303 	lsl.w	r3, r2, r3
 8005cc4:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8005cc6:	693b      	ldr	r3, [r7, #16]
 8005cc8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ccc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005cce:	68bb      	ldr	r3, [r7, #8]
 8005cd0:	43db      	mvns	r3, r3
 8005cd2:	6939      	ldr	r1, [r7, #16]
 8005cd4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005cd8:	4013      	ands	r3, r2
 8005cda:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8005cdc:	2300      	movs	r3, #0
}
 8005cde:	4618      	mov	r0, r3
 8005ce0:	3720      	adds	r7, #32
 8005ce2:	46bd      	mov	sp, r7
 8005ce4:	bd80      	pop	{r7, pc}
	...

08005ce8 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005ce8:	b580      	push	{r7, lr}
 8005cea:	b086      	sub	sp, #24
 8005cec:	af00      	add	r7, sp, #0
 8005cee:	6078      	str	r0, [r7, #4]
 8005cf0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005cf8:	697b      	ldr	r3, [r7, #20]
 8005cfa:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005cfc:	697b      	ldr	r3, [r7, #20]
 8005cfe:	333c      	adds	r3, #60	; 0x3c
 8005d00:	3304      	adds	r3, #4
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8005d06:	683b      	ldr	r3, [r7, #0]
 8005d08:	015a      	lsls	r2, r3, #5
 8005d0a:	693b      	ldr	r3, [r7, #16]
 8005d0c:	4413      	add	r3, r2
 8005d0e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d12:	689b      	ldr	r3, [r3, #8]
 8005d14:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	691b      	ldr	r3, [r3, #16]
 8005d1a:	2b01      	cmp	r3, #1
 8005d1c:	f040 80b3 	bne.w	8005e86 <PCD_EP_OutXfrComplete_int+0x19e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8005d20:	68bb      	ldr	r3, [r7, #8]
 8005d22:	f003 0308 	and.w	r3, r3, #8
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d028      	beq.n	8005d7c <PCD_EP_OutXfrComplete_int+0x94>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	4a70      	ldr	r2, [pc, #448]	; (8005ef0 <PCD_EP_OutXfrComplete_int+0x208>)
 8005d2e:	4293      	cmp	r3, r2
 8005d30:	d90e      	bls.n	8005d50 <PCD_EP_OutXfrComplete_int+0x68>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005d32:	68bb      	ldr	r3, [r7, #8]
 8005d34:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d009      	beq.n	8005d50 <PCD_EP_OutXfrComplete_int+0x68>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005d3c:	683b      	ldr	r3, [r7, #0]
 8005d3e:	015a      	lsls	r2, r3, #5
 8005d40:	693b      	ldr	r3, [r7, #16]
 8005d42:	4413      	add	r3, r2
 8005d44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d48:	461a      	mov	r2, r3
 8005d4a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005d4e:	6093      	str	r3, [r2, #8]

      /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SetupStageCallback(hpcd);
#else
      HAL_PCD_SetupStageCallback(hpcd);
 8005d50:	6878      	ldr	r0, [r7, #4]
 8005d52:	f007 fcff 	bl	800d754 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	6818      	ldr	r0, [r3, #0]
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8005d60:	461a      	mov	r2, r3
 8005d62:	2101      	movs	r1, #1
 8005d64:	f005 fb9a 	bl	800b49c <USB_EP0_OutStart>
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8005d68:	683b      	ldr	r3, [r7, #0]
 8005d6a:	015a      	lsls	r2, r3, #5
 8005d6c:	693b      	ldr	r3, [r7, #16]
 8005d6e:	4413      	add	r3, r2
 8005d70:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d74:	461a      	mov	r2, r3
 8005d76:	2308      	movs	r3, #8
 8005d78:	6093      	str	r3, [r2, #8]
 8005d7a:	e0b3      	b.n	8005ee4 <PCD_EP_OutXfrComplete_int+0x1fc>
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8005d7c:	68bb      	ldr	r3, [r7, #8]
 8005d7e:	f003 0320 	and.w	r3, r3, #32
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d009      	beq.n	8005d9a <PCD_EP_OutXfrComplete_int+0xb2>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005d86:	683b      	ldr	r3, [r7, #0]
 8005d88:	015a      	lsls	r2, r3, #5
 8005d8a:	693b      	ldr	r3, [r7, #16]
 8005d8c:	4413      	add	r3, r2
 8005d8e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d92:	461a      	mov	r2, r3
 8005d94:	2320      	movs	r3, #32
 8005d96:	6093      	str	r3, [r2, #8]
 8005d98:	e0a4      	b.n	8005ee4 <PCD_EP_OutXfrComplete_int+0x1fc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8005d9a:	68bb      	ldr	r3, [r7, #8]
 8005d9c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	f040 809f 	bne.w	8005ee4 <PCD_EP_OutXfrComplete_int+0x1fc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	4a51      	ldr	r2, [pc, #324]	; (8005ef0 <PCD_EP_OutXfrComplete_int+0x208>)
 8005daa:	4293      	cmp	r3, r2
 8005dac:	d90f      	bls.n	8005dce <PCD_EP_OutXfrComplete_int+0xe6>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005dae:	68bb      	ldr	r3, [r7, #8]
 8005db0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d00a      	beq.n	8005dce <PCD_EP_OutXfrComplete_int+0xe6>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005db8:	683b      	ldr	r3, [r7, #0]
 8005dba:	015a      	lsls	r2, r3, #5
 8005dbc:	693b      	ldr	r3, [r7, #16]
 8005dbe:	4413      	add	r3, r2
 8005dc0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005dc4:	461a      	mov	r2, r3
 8005dc6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005dca:	6093      	str	r3, [r2, #8]
 8005dcc:	e08a      	b.n	8005ee4 <PCD_EP_OutXfrComplete_int+0x1fc>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8005dce:	6879      	ldr	r1, [r7, #4]
 8005dd0:	683a      	ldr	r2, [r7, #0]
 8005dd2:	4613      	mov	r3, r2
 8005dd4:	00db      	lsls	r3, r3, #3
 8005dd6:	1a9b      	subs	r3, r3, r2
 8005dd8:	009b      	lsls	r3, r3, #2
 8005dda:	440b      	add	r3, r1
 8005ddc:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8005de0:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8005de2:	683b      	ldr	r3, [r7, #0]
 8005de4:	0159      	lsls	r1, r3, #5
 8005de6:	693b      	ldr	r3, [r7, #16]
 8005de8:	440b      	add	r3, r1
 8005dea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005dee:	691b      	ldr	r3, [r3, #16]
 8005df0:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8005df4:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8005df6:	6878      	ldr	r0, [r7, #4]
 8005df8:	683a      	ldr	r2, [r7, #0]
 8005dfa:	4613      	mov	r3, r2
 8005dfc:	00db      	lsls	r3, r3, #3
 8005dfe:	1a9b      	subs	r3, r3, r2
 8005e00:	009b      	lsls	r3, r3, #2
 8005e02:	4403      	add	r3, r0
 8005e04:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8005e08:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8005e0a:	6879      	ldr	r1, [r7, #4]
 8005e0c:	683a      	ldr	r2, [r7, #0]
 8005e0e:	4613      	mov	r3, r2
 8005e10:	00db      	lsls	r3, r3, #3
 8005e12:	1a9b      	subs	r3, r3, r2
 8005e14:	009b      	lsls	r3, r3, #2
 8005e16:	440b      	add	r3, r1
 8005e18:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8005e1c:	6819      	ldr	r1, [r3, #0]
 8005e1e:	6878      	ldr	r0, [r7, #4]
 8005e20:	683a      	ldr	r2, [r7, #0]
 8005e22:	4613      	mov	r3, r2
 8005e24:	00db      	lsls	r3, r3, #3
 8005e26:	1a9b      	subs	r3, r3, r2
 8005e28:	009b      	lsls	r3, r3, #2
 8005e2a:	4403      	add	r3, r0
 8005e2c:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	4419      	add	r1, r3
 8005e34:	6878      	ldr	r0, [r7, #4]
 8005e36:	683a      	ldr	r2, [r7, #0]
 8005e38:	4613      	mov	r3, r2
 8005e3a:	00db      	lsls	r3, r3, #3
 8005e3c:	1a9b      	subs	r3, r3, r2
 8005e3e:	009b      	lsls	r3, r3, #2
 8005e40:	4403      	add	r3, r0
 8005e42:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8005e46:	6019      	str	r1, [r3, #0]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005e48:	683b      	ldr	r3, [r7, #0]
 8005e4a:	b2db      	uxtb	r3, r3
 8005e4c:	4619      	mov	r1, r3
 8005e4e:	6878      	ldr	r0, [r7, #4]
 8005e50:	f007 fc92 	bl	800d778 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8005e54:	683b      	ldr	r3, [r7, #0]
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d144      	bne.n	8005ee4 <PCD_EP_OutXfrComplete_int+0x1fc>
 8005e5a:	6879      	ldr	r1, [r7, #4]
 8005e5c:	683a      	ldr	r2, [r7, #0]
 8005e5e:	4613      	mov	r3, r2
 8005e60:	00db      	lsls	r3, r3, #3
 8005e62:	1a9b      	subs	r3, r3, r2
 8005e64:	009b      	lsls	r3, r3, #2
 8005e66:	440b      	add	r3, r1
 8005e68:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d138      	bne.n	8005ee4 <PCD_EP_OutXfrComplete_int+0x1fc>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	6818      	ldr	r0, [r3, #0]
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8005e7c:	461a      	mov	r2, r3
 8005e7e:	2101      	movs	r1, #1
 8005e80:	f005 fb0c 	bl	800b49c <USB_EP0_OutStart>
 8005e84:	e02e      	b.n	8005ee4 <PCD_EP_OutXfrComplete_int+0x1fc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	4a1a      	ldr	r2, [pc, #104]	; (8005ef4 <PCD_EP_OutXfrComplete_int+0x20c>)
 8005e8a:	4293      	cmp	r3, r2
 8005e8c:	d124      	bne.n	8005ed8 <PCD_EP_OutXfrComplete_int+0x1f0>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8005e8e:	68bb      	ldr	r3, [r7, #8]
 8005e90:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d00a      	beq.n	8005eae <PCD_EP_OutXfrComplete_int+0x1c6>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005e98:	683b      	ldr	r3, [r7, #0]
 8005e9a:	015a      	lsls	r2, r3, #5
 8005e9c:	693b      	ldr	r3, [r7, #16]
 8005e9e:	4413      	add	r3, r2
 8005ea0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ea4:	461a      	mov	r2, r3
 8005ea6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005eaa:	6093      	str	r3, [r2, #8]
 8005eac:	e01a      	b.n	8005ee4 <PCD_EP_OutXfrComplete_int+0x1fc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8005eae:	68bb      	ldr	r3, [r7, #8]
 8005eb0:	f003 0320 	and.w	r3, r3, #32
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d008      	beq.n	8005eca <PCD_EP_OutXfrComplete_int+0x1e2>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005eb8:	683b      	ldr	r3, [r7, #0]
 8005eba:	015a      	lsls	r2, r3, #5
 8005ebc:	693b      	ldr	r3, [r7, #16]
 8005ebe:	4413      	add	r3, r2
 8005ec0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ec4:	461a      	mov	r2, r3
 8005ec6:	2320      	movs	r3, #32
 8005ec8:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005eca:	683b      	ldr	r3, [r7, #0]
 8005ecc:	b2db      	uxtb	r3, r3
 8005ece:	4619      	mov	r1, r3
 8005ed0:	6878      	ldr	r0, [r7, #4]
 8005ed2:	f007 fc51 	bl	800d778 <HAL_PCD_DataOutStageCallback>
 8005ed6:	e005      	b.n	8005ee4 <PCD_EP_OutXfrComplete_int+0x1fc>
    else
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005ed8:	683b      	ldr	r3, [r7, #0]
 8005eda:	b2db      	uxtb	r3, r3
 8005edc:	4619      	mov	r1, r3
 8005ede:	6878      	ldr	r0, [r7, #4]
 8005ee0:	f007 fc4a 	bl	800d778 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8005ee4:	2300      	movs	r3, #0
}
 8005ee6:	4618      	mov	r0, r3
 8005ee8:	3718      	adds	r7, #24
 8005eea:	46bd      	mov	sp, r7
 8005eec:	bd80      	pop	{r7, pc}
 8005eee:	bf00      	nop
 8005ef0:	4f54300a 	.word	0x4f54300a
 8005ef4:	4f54310a 	.word	0x4f54310a

08005ef8 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005ef8:	b580      	push	{r7, lr}
 8005efa:	b086      	sub	sp, #24
 8005efc:	af00      	add	r7, sp, #0
 8005efe:	6078      	str	r0, [r7, #4]
 8005f00:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f08:	697b      	ldr	r3, [r7, #20]
 8005f0a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005f0c:	697b      	ldr	r3, [r7, #20]
 8005f0e:	333c      	adds	r3, #60	; 0x3c
 8005f10:	3304      	adds	r3, #4
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8005f16:	683b      	ldr	r3, [r7, #0]
 8005f18:	015a      	lsls	r2, r3, #5
 8005f1a:	693b      	ldr	r3, [r7, #16]
 8005f1c:	4413      	add	r3, r2
 8005f1e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f22:	689b      	ldr	r3, [r3, #8]
 8005f24:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	691b      	ldr	r3, [r3, #16]
 8005f2a:	2b01      	cmp	r3, #1
 8005f2c:	d113      	bne.n	8005f56 <PCD_EP_OutSetupPacket_int+0x5e>
  {
    /* StupPktRcvd = 1 pending setup packet int */
    if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	4a1f      	ldr	r2, [pc, #124]	; (8005fb0 <PCD_EP_OutSetupPacket_int+0xb8>)
 8005f32:	4293      	cmp	r3, r2
 8005f34:	d922      	bls.n	8005f7c <PCD_EP_OutSetupPacket_int+0x84>
        ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005f36:	68bb      	ldr	r3, [r7, #8]
 8005f38:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
    if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d01d      	beq.n	8005f7c <PCD_EP_OutSetupPacket_int+0x84>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005f40:	683b      	ldr	r3, [r7, #0]
 8005f42:	015a      	lsls	r2, r3, #5
 8005f44:	693b      	ldr	r3, [r7, #16]
 8005f46:	4413      	add	r3, r2
 8005f48:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f4c:	461a      	mov	r2, r3
 8005f4e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005f52:	6093      	str	r3, [r2, #8]
 8005f54:	e012      	b.n	8005f7c <PCD_EP_OutSetupPacket_int+0x84>
    }
  }
  else
  {
    if ((gSNPSiD == USB_OTG_CORE_ID_310A) &&
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	4a16      	ldr	r2, [pc, #88]	; (8005fb4 <PCD_EP_OutSetupPacket_int+0xbc>)
 8005f5a:	4293      	cmp	r3, r2
 8005f5c:	d10e      	bne.n	8005f7c <PCD_EP_OutSetupPacket_int+0x84>
        ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005f5e:	68bb      	ldr	r3, [r7, #8]
 8005f60:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
    if ((gSNPSiD == USB_OTG_CORE_ID_310A) &&
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d009      	beq.n	8005f7c <PCD_EP_OutSetupPacket_int+0x84>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005f68:	683b      	ldr	r3, [r7, #0]
 8005f6a:	015a      	lsls	r2, r3, #5
 8005f6c:	693b      	ldr	r3, [r7, #16]
 8005f6e:	4413      	add	r3, r2
 8005f70:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f74:	461a      	mov	r2, r3
 8005f76:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005f7a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8005f7c:	6878      	ldr	r0, [r7, #4]
 8005f7e:	f007 fbe9 	bl	800d754 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	4a0a      	ldr	r2, [pc, #40]	; (8005fb0 <PCD_EP_OutSetupPacket_int+0xb8>)
 8005f86:	4293      	cmp	r3, r2
 8005f88:	d90c      	bls.n	8005fa4 <PCD_EP_OutSetupPacket_int+0xac>
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	691b      	ldr	r3, [r3, #16]
 8005f8e:	2b01      	cmp	r3, #1
 8005f90:	d108      	bne.n	8005fa4 <PCD_EP_OutSetupPacket_int+0xac>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	6818      	ldr	r0, [r3, #0]
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8005f9c:	461a      	mov	r2, r3
 8005f9e:	2101      	movs	r1, #1
 8005fa0:	f005 fa7c 	bl	800b49c <USB_EP0_OutStart>
  }

  return HAL_OK;
 8005fa4:	2300      	movs	r3, #0
}
 8005fa6:	4618      	mov	r0, r3
 8005fa8:	3718      	adds	r7, #24
 8005faa:	46bd      	mov	sp, r7
 8005fac:	bd80      	pop	{r7, pc}
 8005fae:	bf00      	nop
 8005fb0:	4f54300a 	.word	0x4f54300a
 8005fb4:	4f54310a 	.word	0x4f54310a

08005fb8 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8005fb8:	b480      	push	{r7}
 8005fba:	b085      	sub	sp, #20
 8005fbc:	af00      	add	r7, sp, #0
 8005fbe:	6078      	str	r0, [r7, #4]
 8005fc0:	460b      	mov	r3, r1
 8005fc2:	70fb      	strb	r3, [r7, #3]
 8005fc4:	4613      	mov	r3, r2
 8005fc6:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fce:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8005fd0:	78fb      	ldrb	r3, [r7, #3]
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d107      	bne.n	8005fe6 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8005fd6:	883b      	ldrh	r3, [r7, #0]
 8005fd8:	0419      	lsls	r1, r3, #16
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	68ba      	ldr	r2, [r7, #8]
 8005fe0:	430a      	orrs	r2, r1
 8005fe2:	629a      	str	r2, [r3, #40]	; 0x28
 8005fe4:	e028      	b.n	8006038 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fec:	0c1b      	lsrs	r3, r3, #16
 8005fee:	68ba      	ldr	r2, [r7, #8]
 8005ff0:	4413      	add	r3, r2
 8005ff2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8005ff4:	2300      	movs	r3, #0
 8005ff6:	73fb      	strb	r3, [r7, #15]
 8005ff8:	e00d      	b.n	8006016 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	681a      	ldr	r2, [r3, #0]
 8005ffe:	7bfb      	ldrb	r3, [r7, #15]
 8006000:	3340      	adds	r3, #64	; 0x40
 8006002:	009b      	lsls	r3, r3, #2
 8006004:	4413      	add	r3, r2
 8006006:	685b      	ldr	r3, [r3, #4]
 8006008:	0c1b      	lsrs	r3, r3, #16
 800600a:	68ba      	ldr	r2, [r7, #8]
 800600c:	4413      	add	r3, r2
 800600e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8006010:	7bfb      	ldrb	r3, [r7, #15]
 8006012:	3301      	adds	r3, #1
 8006014:	73fb      	strb	r3, [r7, #15]
 8006016:	7bfa      	ldrb	r2, [r7, #15]
 8006018:	78fb      	ldrb	r3, [r7, #3]
 800601a:	3b01      	subs	r3, #1
 800601c:	429a      	cmp	r2, r3
 800601e:	d3ec      	bcc.n	8005ffa <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8006020:	883b      	ldrh	r3, [r7, #0]
 8006022:	0418      	lsls	r0, r3, #16
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	6819      	ldr	r1, [r3, #0]
 8006028:	78fb      	ldrb	r3, [r7, #3]
 800602a:	3b01      	subs	r3, #1
 800602c:	68ba      	ldr	r2, [r7, #8]
 800602e:	4302      	orrs	r2, r0
 8006030:	3340      	adds	r3, #64	; 0x40
 8006032:	009b      	lsls	r3, r3, #2
 8006034:	440b      	add	r3, r1
 8006036:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8006038:	2300      	movs	r3, #0
}
 800603a:	4618      	mov	r0, r3
 800603c:	3714      	adds	r7, #20
 800603e:	46bd      	mov	sp, r7
 8006040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006044:	4770      	bx	lr

08006046 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8006046:	b480      	push	{r7}
 8006048:	b083      	sub	sp, #12
 800604a:	af00      	add	r7, sp, #0
 800604c:	6078      	str	r0, [r7, #4]
 800604e:	460b      	mov	r3, r1
 8006050:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	887a      	ldrh	r2, [r7, #2]
 8006058:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800605a:	2300      	movs	r3, #0
}
 800605c:	4618      	mov	r0, r3
 800605e:	370c      	adds	r7, #12
 8006060:	46bd      	mov	sp, r7
 8006062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006066:	4770      	bx	lr

08006068 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8006068:	b480      	push	{r7}
 800606a:	b083      	sub	sp, #12
 800606c:	af00      	add	r7, sp, #0
 800606e:	6078      	str	r0, [r7, #4]
 8006070:	460b      	mov	r3, r1
 8006072:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8006074:	bf00      	nop
 8006076:	370c      	adds	r7, #12
 8006078:	46bd      	mov	sp, r7
 800607a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800607e:	4770      	bx	lr

08006080 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006080:	b580      	push	{r7, lr}
 8006082:	b086      	sub	sp, #24
 8006084:	af00      	add	r7, sp, #0
 8006086:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	2b00      	cmp	r3, #0
 800608c:	d101      	bne.n	8006092 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800608e:	2301      	movs	r3, #1
 8006090:	e25b      	b.n	800654a <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	f003 0301 	and.w	r3, r3, #1
 800609a:	2b00      	cmp	r3, #0
 800609c:	d075      	beq.n	800618a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800609e:	4ba3      	ldr	r3, [pc, #652]	; (800632c <HAL_RCC_OscConfig+0x2ac>)
 80060a0:	689b      	ldr	r3, [r3, #8]
 80060a2:	f003 030c 	and.w	r3, r3, #12
 80060a6:	2b04      	cmp	r3, #4
 80060a8:	d00c      	beq.n	80060c4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80060aa:	4ba0      	ldr	r3, [pc, #640]	; (800632c <HAL_RCC_OscConfig+0x2ac>)
 80060ac:	689b      	ldr	r3, [r3, #8]
 80060ae:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80060b2:	2b08      	cmp	r3, #8
 80060b4:	d112      	bne.n	80060dc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80060b6:	4b9d      	ldr	r3, [pc, #628]	; (800632c <HAL_RCC_OscConfig+0x2ac>)
 80060b8:	685b      	ldr	r3, [r3, #4]
 80060ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80060be:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80060c2:	d10b      	bne.n	80060dc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80060c4:	4b99      	ldr	r3, [pc, #612]	; (800632c <HAL_RCC_OscConfig+0x2ac>)
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d05b      	beq.n	8006188 <HAL_RCC_OscConfig+0x108>
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	685b      	ldr	r3, [r3, #4]
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d157      	bne.n	8006188 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80060d8:	2301      	movs	r3, #1
 80060da:	e236      	b.n	800654a <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	685b      	ldr	r3, [r3, #4]
 80060e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80060e4:	d106      	bne.n	80060f4 <HAL_RCC_OscConfig+0x74>
 80060e6:	4b91      	ldr	r3, [pc, #580]	; (800632c <HAL_RCC_OscConfig+0x2ac>)
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	4a90      	ldr	r2, [pc, #576]	; (800632c <HAL_RCC_OscConfig+0x2ac>)
 80060ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80060f0:	6013      	str	r3, [r2, #0]
 80060f2:	e01d      	b.n	8006130 <HAL_RCC_OscConfig+0xb0>
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	685b      	ldr	r3, [r3, #4]
 80060f8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80060fc:	d10c      	bne.n	8006118 <HAL_RCC_OscConfig+0x98>
 80060fe:	4b8b      	ldr	r3, [pc, #556]	; (800632c <HAL_RCC_OscConfig+0x2ac>)
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	4a8a      	ldr	r2, [pc, #552]	; (800632c <HAL_RCC_OscConfig+0x2ac>)
 8006104:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006108:	6013      	str	r3, [r2, #0]
 800610a:	4b88      	ldr	r3, [pc, #544]	; (800632c <HAL_RCC_OscConfig+0x2ac>)
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	4a87      	ldr	r2, [pc, #540]	; (800632c <HAL_RCC_OscConfig+0x2ac>)
 8006110:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006114:	6013      	str	r3, [r2, #0]
 8006116:	e00b      	b.n	8006130 <HAL_RCC_OscConfig+0xb0>
 8006118:	4b84      	ldr	r3, [pc, #528]	; (800632c <HAL_RCC_OscConfig+0x2ac>)
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	4a83      	ldr	r2, [pc, #524]	; (800632c <HAL_RCC_OscConfig+0x2ac>)
 800611e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006122:	6013      	str	r3, [r2, #0]
 8006124:	4b81      	ldr	r3, [pc, #516]	; (800632c <HAL_RCC_OscConfig+0x2ac>)
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	4a80      	ldr	r2, [pc, #512]	; (800632c <HAL_RCC_OscConfig+0x2ac>)
 800612a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800612e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	685b      	ldr	r3, [r3, #4]
 8006134:	2b00      	cmp	r3, #0
 8006136:	d013      	beq.n	8006160 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006138:	f7fc ff8e 	bl	8003058 <HAL_GetTick>
 800613c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800613e:	e008      	b.n	8006152 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006140:	f7fc ff8a 	bl	8003058 <HAL_GetTick>
 8006144:	4602      	mov	r2, r0
 8006146:	693b      	ldr	r3, [r7, #16]
 8006148:	1ad3      	subs	r3, r2, r3
 800614a:	2b64      	cmp	r3, #100	; 0x64
 800614c:	d901      	bls.n	8006152 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800614e:	2303      	movs	r3, #3
 8006150:	e1fb      	b.n	800654a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006152:	4b76      	ldr	r3, [pc, #472]	; (800632c <HAL_RCC_OscConfig+0x2ac>)
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800615a:	2b00      	cmp	r3, #0
 800615c:	d0f0      	beq.n	8006140 <HAL_RCC_OscConfig+0xc0>
 800615e:	e014      	b.n	800618a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006160:	f7fc ff7a 	bl	8003058 <HAL_GetTick>
 8006164:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006166:	e008      	b.n	800617a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006168:	f7fc ff76 	bl	8003058 <HAL_GetTick>
 800616c:	4602      	mov	r2, r0
 800616e:	693b      	ldr	r3, [r7, #16]
 8006170:	1ad3      	subs	r3, r2, r3
 8006172:	2b64      	cmp	r3, #100	; 0x64
 8006174:	d901      	bls.n	800617a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006176:	2303      	movs	r3, #3
 8006178:	e1e7      	b.n	800654a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800617a:	4b6c      	ldr	r3, [pc, #432]	; (800632c <HAL_RCC_OscConfig+0x2ac>)
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006182:	2b00      	cmp	r3, #0
 8006184:	d1f0      	bne.n	8006168 <HAL_RCC_OscConfig+0xe8>
 8006186:	e000      	b.n	800618a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006188:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	f003 0302 	and.w	r3, r3, #2
 8006192:	2b00      	cmp	r3, #0
 8006194:	d063      	beq.n	800625e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006196:	4b65      	ldr	r3, [pc, #404]	; (800632c <HAL_RCC_OscConfig+0x2ac>)
 8006198:	689b      	ldr	r3, [r3, #8]
 800619a:	f003 030c 	and.w	r3, r3, #12
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d00b      	beq.n	80061ba <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80061a2:	4b62      	ldr	r3, [pc, #392]	; (800632c <HAL_RCC_OscConfig+0x2ac>)
 80061a4:	689b      	ldr	r3, [r3, #8]
 80061a6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80061aa:	2b08      	cmp	r3, #8
 80061ac:	d11c      	bne.n	80061e8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80061ae:	4b5f      	ldr	r3, [pc, #380]	; (800632c <HAL_RCC_OscConfig+0x2ac>)
 80061b0:	685b      	ldr	r3, [r3, #4]
 80061b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d116      	bne.n	80061e8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80061ba:	4b5c      	ldr	r3, [pc, #368]	; (800632c <HAL_RCC_OscConfig+0x2ac>)
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	f003 0302 	and.w	r3, r3, #2
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d005      	beq.n	80061d2 <HAL_RCC_OscConfig+0x152>
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	68db      	ldr	r3, [r3, #12]
 80061ca:	2b01      	cmp	r3, #1
 80061cc:	d001      	beq.n	80061d2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80061ce:	2301      	movs	r3, #1
 80061d0:	e1bb      	b.n	800654a <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80061d2:	4b56      	ldr	r3, [pc, #344]	; (800632c <HAL_RCC_OscConfig+0x2ac>)
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	691b      	ldr	r3, [r3, #16]
 80061de:	00db      	lsls	r3, r3, #3
 80061e0:	4952      	ldr	r1, [pc, #328]	; (800632c <HAL_RCC_OscConfig+0x2ac>)
 80061e2:	4313      	orrs	r3, r2
 80061e4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80061e6:	e03a      	b.n	800625e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	68db      	ldr	r3, [r3, #12]
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d020      	beq.n	8006232 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80061f0:	4b4f      	ldr	r3, [pc, #316]	; (8006330 <HAL_RCC_OscConfig+0x2b0>)
 80061f2:	2201      	movs	r2, #1
 80061f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80061f6:	f7fc ff2f 	bl	8003058 <HAL_GetTick>
 80061fa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80061fc:	e008      	b.n	8006210 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80061fe:	f7fc ff2b 	bl	8003058 <HAL_GetTick>
 8006202:	4602      	mov	r2, r0
 8006204:	693b      	ldr	r3, [r7, #16]
 8006206:	1ad3      	subs	r3, r2, r3
 8006208:	2b02      	cmp	r3, #2
 800620a:	d901      	bls.n	8006210 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800620c:	2303      	movs	r3, #3
 800620e:	e19c      	b.n	800654a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006210:	4b46      	ldr	r3, [pc, #280]	; (800632c <HAL_RCC_OscConfig+0x2ac>)
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	f003 0302 	and.w	r3, r3, #2
 8006218:	2b00      	cmp	r3, #0
 800621a:	d0f0      	beq.n	80061fe <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800621c:	4b43      	ldr	r3, [pc, #268]	; (800632c <HAL_RCC_OscConfig+0x2ac>)
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	691b      	ldr	r3, [r3, #16]
 8006228:	00db      	lsls	r3, r3, #3
 800622a:	4940      	ldr	r1, [pc, #256]	; (800632c <HAL_RCC_OscConfig+0x2ac>)
 800622c:	4313      	orrs	r3, r2
 800622e:	600b      	str	r3, [r1, #0]
 8006230:	e015      	b.n	800625e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006232:	4b3f      	ldr	r3, [pc, #252]	; (8006330 <HAL_RCC_OscConfig+0x2b0>)
 8006234:	2200      	movs	r2, #0
 8006236:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006238:	f7fc ff0e 	bl	8003058 <HAL_GetTick>
 800623c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800623e:	e008      	b.n	8006252 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006240:	f7fc ff0a 	bl	8003058 <HAL_GetTick>
 8006244:	4602      	mov	r2, r0
 8006246:	693b      	ldr	r3, [r7, #16]
 8006248:	1ad3      	subs	r3, r2, r3
 800624a:	2b02      	cmp	r3, #2
 800624c:	d901      	bls.n	8006252 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800624e:	2303      	movs	r3, #3
 8006250:	e17b      	b.n	800654a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006252:	4b36      	ldr	r3, [pc, #216]	; (800632c <HAL_RCC_OscConfig+0x2ac>)
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	f003 0302 	and.w	r3, r3, #2
 800625a:	2b00      	cmp	r3, #0
 800625c:	d1f0      	bne.n	8006240 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	f003 0308 	and.w	r3, r3, #8
 8006266:	2b00      	cmp	r3, #0
 8006268:	d030      	beq.n	80062cc <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	695b      	ldr	r3, [r3, #20]
 800626e:	2b00      	cmp	r3, #0
 8006270:	d016      	beq.n	80062a0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006272:	4b30      	ldr	r3, [pc, #192]	; (8006334 <HAL_RCC_OscConfig+0x2b4>)
 8006274:	2201      	movs	r2, #1
 8006276:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006278:	f7fc feee 	bl	8003058 <HAL_GetTick>
 800627c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800627e:	e008      	b.n	8006292 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006280:	f7fc feea 	bl	8003058 <HAL_GetTick>
 8006284:	4602      	mov	r2, r0
 8006286:	693b      	ldr	r3, [r7, #16]
 8006288:	1ad3      	subs	r3, r2, r3
 800628a:	2b02      	cmp	r3, #2
 800628c:	d901      	bls.n	8006292 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800628e:	2303      	movs	r3, #3
 8006290:	e15b      	b.n	800654a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006292:	4b26      	ldr	r3, [pc, #152]	; (800632c <HAL_RCC_OscConfig+0x2ac>)
 8006294:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006296:	f003 0302 	and.w	r3, r3, #2
 800629a:	2b00      	cmp	r3, #0
 800629c:	d0f0      	beq.n	8006280 <HAL_RCC_OscConfig+0x200>
 800629e:	e015      	b.n	80062cc <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80062a0:	4b24      	ldr	r3, [pc, #144]	; (8006334 <HAL_RCC_OscConfig+0x2b4>)
 80062a2:	2200      	movs	r2, #0
 80062a4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80062a6:	f7fc fed7 	bl	8003058 <HAL_GetTick>
 80062aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80062ac:	e008      	b.n	80062c0 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80062ae:	f7fc fed3 	bl	8003058 <HAL_GetTick>
 80062b2:	4602      	mov	r2, r0
 80062b4:	693b      	ldr	r3, [r7, #16]
 80062b6:	1ad3      	subs	r3, r2, r3
 80062b8:	2b02      	cmp	r3, #2
 80062ba:	d901      	bls.n	80062c0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80062bc:	2303      	movs	r3, #3
 80062be:	e144      	b.n	800654a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80062c0:	4b1a      	ldr	r3, [pc, #104]	; (800632c <HAL_RCC_OscConfig+0x2ac>)
 80062c2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80062c4:	f003 0302 	and.w	r3, r3, #2
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d1f0      	bne.n	80062ae <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	f003 0304 	and.w	r3, r3, #4
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	f000 80a0 	beq.w	800641a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80062da:	2300      	movs	r3, #0
 80062dc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80062de:	4b13      	ldr	r3, [pc, #76]	; (800632c <HAL_RCC_OscConfig+0x2ac>)
 80062e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d10f      	bne.n	800630a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80062ea:	2300      	movs	r3, #0
 80062ec:	60bb      	str	r3, [r7, #8]
 80062ee:	4b0f      	ldr	r3, [pc, #60]	; (800632c <HAL_RCC_OscConfig+0x2ac>)
 80062f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062f2:	4a0e      	ldr	r2, [pc, #56]	; (800632c <HAL_RCC_OscConfig+0x2ac>)
 80062f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80062f8:	6413      	str	r3, [r2, #64]	; 0x40
 80062fa:	4b0c      	ldr	r3, [pc, #48]	; (800632c <HAL_RCC_OscConfig+0x2ac>)
 80062fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006302:	60bb      	str	r3, [r7, #8]
 8006304:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006306:	2301      	movs	r3, #1
 8006308:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800630a:	4b0b      	ldr	r3, [pc, #44]	; (8006338 <HAL_RCC_OscConfig+0x2b8>)
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006312:	2b00      	cmp	r3, #0
 8006314:	d121      	bne.n	800635a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006316:	4b08      	ldr	r3, [pc, #32]	; (8006338 <HAL_RCC_OscConfig+0x2b8>)
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	4a07      	ldr	r2, [pc, #28]	; (8006338 <HAL_RCC_OscConfig+0x2b8>)
 800631c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006320:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006322:	f7fc fe99 	bl	8003058 <HAL_GetTick>
 8006326:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006328:	e011      	b.n	800634e <HAL_RCC_OscConfig+0x2ce>
 800632a:	bf00      	nop
 800632c:	40023800 	.word	0x40023800
 8006330:	42470000 	.word	0x42470000
 8006334:	42470e80 	.word	0x42470e80
 8006338:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800633c:	f7fc fe8c 	bl	8003058 <HAL_GetTick>
 8006340:	4602      	mov	r2, r0
 8006342:	693b      	ldr	r3, [r7, #16]
 8006344:	1ad3      	subs	r3, r2, r3
 8006346:	2b02      	cmp	r3, #2
 8006348:	d901      	bls.n	800634e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800634a:	2303      	movs	r3, #3
 800634c:	e0fd      	b.n	800654a <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800634e:	4b81      	ldr	r3, [pc, #516]	; (8006554 <HAL_RCC_OscConfig+0x4d4>)
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006356:	2b00      	cmp	r3, #0
 8006358:	d0f0      	beq.n	800633c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	689b      	ldr	r3, [r3, #8]
 800635e:	2b01      	cmp	r3, #1
 8006360:	d106      	bne.n	8006370 <HAL_RCC_OscConfig+0x2f0>
 8006362:	4b7d      	ldr	r3, [pc, #500]	; (8006558 <HAL_RCC_OscConfig+0x4d8>)
 8006364:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006366:	4a7c      	ldr	r2, [pc, #496]	; (8006558 <HAL_RCC_OscConfig+0x4d8>)
 8006368:	f043 0301 	orr.w	r3, r3, #1
 800636c:	6713      	str	r3, [r2, #112]	; 0x70
 800636e:	e01c      	b.n	80063aa <HAL_RCC_OscConfig+0x32a>
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	689b      	ldr	r3, [r3, #8]
 8006374:	2b05      	cmp	r3, #5
 8006376:	d10c      	bne.n	8006392 <HAL_RCC_OscConfig+0x312>
 8006378:	4b77      	ldr	r3, [pc, #476]	; (8006558 <HAL_RCC_OscConfig+0x4d8>)
 800637a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800637c:	4a76      	ldr	r2, [pc, #472]	; (8006558 <HAL_RCC_OscConfig+0x4d8>)
 800637e:	f043 0304 	orr.w	r3, r3, #4
 8006382:	6713      	str	r3, [r2, #112]	; 0x70
 8006384:	4b74      	ldr	r3, [pc, #464]	; (8006558 <HAL_RCC_OscConfig+0x4d8>)
 8006386:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006388:	4a73      	ldr	r2, [pc, #460]	; (8006558 <HAL_RCC_OscConfig+0x4d8>)
 800638a:	f043 0301 	orr.w	r3, r3, #1
 800638e:	6713      	str	r3, [r2, #112]	; 0x70
 8006390:	e00b      	b.n	80063aa <HAL_RCC_OscConfig+0x32a>
 8006392:	4b71      	ldr	r3, [pc, #452]	; (8006558 <HAL_RCC_OscConfig+0x4d8>)
 8006394:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006396:	4a70      	ldr	r2, [pc, #448]	; (8006558 <HAL_RCC_OscConfig+0x4d8>)
 8006398:	f023 0301 	bic.w	r3, r3, #1
 800639c:	6713      	str	r3, [r2, #112]	; 0x70
 800639e:	4b6e      	ldr	r3, [pc, #440]	; (8006558 <HAL_RCC_OscConfig+0x4d8>)
 80063a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80063a2:	4a6d      	ldr	r2, [pc, #436]	; (8006558 <HAL_RCC_OscConfig+0x4d8>)
 80063a4:	f023 0304 	bic.w	r3, r3, #4
 80063a8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	689b      	ldr	r3, [r3, #8]
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d015      	beq.n	80063de <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80063b2:	f7fc fe51 	bl	8003058 <HAL_GetTick>
 80063b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80063b8:	e00a      	b.n	80063d0 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80063ba:	f7fc fe4d 	bl	8003058 <HAL_GetTick>
 80063be:	4602      	mov	r2, r0
 80063c0:	693b      	ldr	r3, [r7, #16]
 80063c2:	1ad3      	subs	r3, r2, r3
 80063c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80063c8:	4293      	cmp	r3, r2
 80063ca:	d901      	bls.n	80063d0 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80063cc:	2303      	movs	r3, #3
 80063ce:	e0bc      	b.n	800654a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80063d0:	4b61      	ldr	r3, [pc, #388]	; (8006558 <HAL_RCC_OscConfig+0x4d8>)
 80063d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80063d4:	f003 0302 	and.w	r3, r3, #2
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d0ee      	beq.n	80063ba <HAL_RCC_OscConfig+0x33a>
 80063dc:	e014      	b.n	8006408 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80063de:	f7fc fe3b 	bl	8003058 <HAL_GetTick>
 80063e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80063e4:	e00a      	b.n	80063fc <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80063e6:	f7fc fe37 	bl	8003058 <HAL_GetTick>
 80063ea:	4602      	mov	r2, r0
 80063ec:	693b      	ldr	r3, [r7, #16]
 80063ee:	1ad3      	subs	r3, r2, r3
 80063f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80063f4:	4293      	cmp	r3, r2
 80063f6:	d901      	bls.n	80063fc <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80063f8:	2303      	movs	r3, #3
 80063fa:	e0a6      	b.n	800654a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80063fc:	4b56      	ldr	r3, [pc, #344]	; (8006558 <HAL_RCC_OscConfig+0x4d8>)
 80063fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006400:	f003 0302 	and.w	r3, r3, #2
 8006404:	2b00      	cmp	r3, #0
 8006406:	d1ee      	bne.n	80063e6 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006408:	7dfb      	ldrb	r3, [r7, #23]
 800640a:	2b01      	cmp	r3, #1
 800640c:	d105      	bne.n	800641a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800640e:	4b52      	ldr	r3, [pc, #328]	; (8006558 <HAL_RCC_OscConfig+0x4d8>)
 8006410:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006412:	4a51      	ldr	r2, [pc, #324]	; (8006558 <HAL_RCC_OscConfig+0x4d8>)
 8006414:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006418:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	699b      	ldr	r3, [r3, #24]
 800641e:	2b00      	cmp	r3, #0
 8006420:	f000 8092 	beq.w	8006548 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006424:	4b4c      	ldr	r3, [pc, #304]	; (8006558 <HAL_RCC_OscConfig+0x4d8>)
 8006426:	689b      	ldr	r3, [r3, #8]
 8006428:	f003 030c 	and.w	r3, r3, #12
 800642c:	2b08      	cmp	r3, #8
 800642e:	d05c      	beq.n	80064ea <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	699b      	ldr	r3, [r3, #24]
 8006434:	2b02      	cmp	r3, #2
 8006436:	d141      	bne.n	80064bc <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006438:	4b48      	ldr	r3, [pc, #288]	; (800655c <HAL_RCC_OscConfig+0x4dc>)
 800643a:	2200      	movs	r2, #0
 800643c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800643e:	f7fc fe0b 	bl	8003058 <HAL_GetTick>
 8006442:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006444:	e008      	b.n	8006458 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006446:	f7fc fe07 	bl	8003058 <HAL_GetTick>
 800644a:	4602      	mov	r2, r0
 800644c:	693b      	ldr	r3, [r7, #16]
 800644e:	1ad3      	subs	r3, r2, r3
 8006450:	2b02      	cmp	r3, #2
 8006452:	d901      	bls.n	8006458 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8006454:	2303      	movs	r3, #3
 8006456:	e078      	b.n	800654a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006458:	4b3f      	ldr	r3, [pc, #252]	; (8006558 <HAL_RCC_OscConfig+0x4d8>)
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006460:	2b00      	cmp	r3, #0
 8006462:	d1f0      	bne.n	8006446 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	69da      	ldr	r2, [r3, #28]
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	6a1b      	ldr	r3, [r3, #32]
 800646c:	431a      	orrs	r2, r3
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006472:	019b      	lsls	r3, r3, #6
 8006474:	431a      	orrs	r2, r3
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800647a:	085b      	lsrs	r3, r3, #1
 800647c:	3b01      	subs	r3, #1
 800647e:	041b      	lsls	r3, r3, #16
 8006480:	431a      	orrs	r2, r3
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006486:	061b      	lsls	r3, r3, #24
 8006488:	4933      	ldr	r1, [pc, #204]	; (8006558 <HAL_RCC_OscConfig+0x4d8>)
 800648a:	4313      	orrs	r3, r2
 800648c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800648e:	4b33      	ldr	r3, [pc, #204]	; (800655c <HAL_RCC_OscConfig+0x4dc>)
 8006490:	2201      	movs	r2, #1
 8006492:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006494:	f7fc fde0 	bl	8003058 <HAL_GetTick>
 8006498:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800649a:	e008      	b.n	80064ae <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800649c:	f7fc fddc 	bl	8003058 <HAL_GetTick>
 80064a0:	4602      	mov	r2, r0
 80064a2:	693b      	ldr	r3, [r7, #16]
 80064a4:	1ad3      	subs	r3, r2, r3
 80064a6:	2b02      	cmp	r3, #2
 80064a8:	d901      	bls.n	80064ae <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80064aa:	2303      	movs	r3, #3
 80064ac:	e04d      	b.n	800654a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80064ae:	4b2a      	ldr	r3, [pc, #168]	; (8006558 <HAL_RCC_OscConfig+0x4d8>)
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d0f0      	beq.n	800649c <HAL_RCC_OscConfig+0x41c>
 80064ba:	e045      	b.n	8006548 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80064bc:	4b27      	ldr	r3, [pc, #156]	; (800655c <HAL_RCC_OscConfig+0x4dc>)
 80064be:	2200      	movs	r2, #0
 80064c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80064c2:	f7fc fdc9 	bl	8003058 <HAL_GetTick>
 80064c6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80064c8:	e008      	b.n	80064dc <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80064ca:	f7fc fdc5 	bl	8003058 <HAL_GetTick>
 80064ce:	4602      	mov	r2, r0
 80064d0:	693b      	ldr	r3, [r7, #16]
 80064d2:	1ad3      	subs	r3, r2, r3
 80064d4:	2b02      	cmp	r3, #2
 80064d6:	d901      	bls.n	80064dc <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80064d8:	2303      	movs	r3, #3
 80064da:	e036      	b.n	800654a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80064dc:	4b1e      	ldr	r3, [pc, #120]	; (8006558 <HAL_RCC_OscConfig+0x4d8>)
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d1f0      	bne.n	80064ca <HAL_RCC_OscConfig+0x44a>
 80064e8:	e02e      	b.n	8006548 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	699b      	ldr	r3, [r3, #24]
 80064ee:	2b01      	cmp	r3, #1
 80064f0:	d101      	bne.n	80064f6 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80064f2:	2301      	movs	r3, #1
 80064f4:	e029      	b.n	800654a <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80064f6:	4b18      	ldr	r3, [pc, #96]	; (8006558 <HAL_RCC_OscConfig+0x4d8>)
 80064f8:	689b      	ldr	r3, [r3, #8]
 80064fa:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	69db      	ldr	r3, [r3, #28]
 8006506:	429a      	cmp	r2, r3
 8006508:	d11c      	bne.n	8006544 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006514:	429a      	cmp	r2, r3
 8006516:	d115      	bne.n	8006544 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8006518:	68fa      	ldr	r2, [r7, #12]
 800651a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800651e:	4013      	ands	r3, r2
 8006520:	687a      	ldr	r2, [r7, #4]
 8006522:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006524:	4293      	cmp	r3, r2
 8006526:	d10d      	bne.n	8006544 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8006532:	429a      	cmp	r2, r3
 8006534:	d106      	bne.n	8006544 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8006540:	429a      	cmp	r2, r3
 8006542:	d001      	beq.n	8006548 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8006544:	2301      	movs	r3, #1
 8006546:	e000      	b.n	800654a <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8006548:	2300      	movs	r3, #0
}
 800654a:	4618      	mov	r0, r3
 800654c:	3718      	adds	r7, #24
 800654e:	46bd      	mov	sp, r7
 8006550:	bd80      	pop	{r7, pc}
 8006552:	bf00      	nop
 8006554:	40007000 	.word	0x40007000
 8006558:	40023800 	.word	0x40023800
 800655c:	42470060 	.word	0x42470060

08006560 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006560:	b580      	push	{r7, lr}
 8006562:	b084      	sub	sp, #16
 8006564:	af00      	add	r7, sp, #0
 8006566:	6078      	str	r0, [r7, #4]
 8006568:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	2b00      	cmp	r3, #0
 800656e:	d101      	bne.n	8006574 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006570:	2301      	movs	r3, #1
 8006572:	e0cc      	b.n	800670e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006574:	4b68      	ldr	r3, [pc, #416]	; (8006718 <HAL_RCC_ClockConfig+0x1b8>)
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	f003 030f 	and.w	r3, r3, #15
 800657c:	683a      	ldr	r2, [r7, #0]
 800657e:	429a      	cmp	r2, r3
 8006580:	d90c      	bls.n	800659c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006582:	4b65      	ldr	r3, [pc, #404]	; (8006718 <HAL_RCC_ClockConfig+0x1b8>)
 8006584:	683a      	ldr	r2, [r7, #0]
 8006586:	b2d2      	uxtb	r2, r2
 8006588:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800658a:	4b63      	ldr	r3, [pc, #396]	; (8006718 <HAL_RCC_ClockConfig+0x1b8>)
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	f003 030f 	and.w	r3, r3, #15
 8006592:	683a      	ldr	r2, [r7, #0]
 8006594:	429a      	cmp	r2, r3
 8006596:	d001      	beq.n	800659c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006598:	2301      	movs	r3, #1
 800659a:	e0b8      	b.n	800670e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	f003 0302 	and.w	r3, r3, #2
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d020      	beq.n	80065ea <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	f003 0304 	and.w	r3, r3, #4
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d005      	beq.n	80065c0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80065b4:	4b59      	ldr	r3, [pc, #356]	; (800671c <HAL_RCC_ClockConfig+0x1bc>)
 80065b6:	689b      	ldr	r3, [r3, #8]
 80065b8:	4a58      	ldr	r2, [pc, #352]	; (800671c <HAL_RCC_ClockConfig+0x1bc>)
 80065ba:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80065be:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	f003 0308 	and.w	r3, r3, #8
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d005      	beq.n	80065d8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80065cc:	4b53      	ldr	r3, [pc, #332]	; (800671c <HAL_RCC_ClockConfig+0x1bc>)
 80065ce:	689b      	ldr	r3, [r3, #8]
 80065d0:	4a52      	ldr	r2, [pc, #328]	; (800671c <HAL_RCC_ClockConfig+0x1bc>)
 80065d2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80065d6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80065d8:	4b50      	ldr	r3, [pc, #320]	; (800671c <HAL_RCC_ClockConfig+0x1bc>)
 80065da:	689b      	ldr	r3, [r3, #8]
 80065dc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	689b      	ldr	r3, [r3, #8]
 80065e4:	494d      	ldr	r1, [pc, #308]	; (800671c <HAL_RCC_ClockConfig+0x1bc>)
 80065e6:	4313      	orrs	r3, r2
 80065e8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	f003 0301 	and.w	r3, r3, #1
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d044      	beq.n	8006680 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	685b      	ldr	r3, [r3, #4]
 80065fa:	2b01      	cmp	r3, #1
 80065fc:	d107      	bne.n	800660e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80065fe:	4b47      	ldr	r3, [pc, #284]	; (800671c <HAL_RCC_ClockConfig+0x1bc>)
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006606:	2b00      	cmp	r3, #0
 8006608:	d119      	bne.n	800663e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800660a:	2301      	movs	r3, #1
 800660c:	e07f      	b.n	800670e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	685b      	ldr	r3, [r3, #4]
 8006612:	2b02      	cmp	r3, #2
 8006614:	d003      	beq.n	800661e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800661a:	2b03      	cmp	r3, #3
 800661c:	d107      	bne.n	800662e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800661e:	4b3f      	ldr	r3, [pc, #252]	; (800671c <HAL_RCC_ClockConfig+0x1bc>)
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006626:	2b00      	cmp	r3, #0
 8006628:	d109      	bne.n	800663e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800662a:	2301      	movs	r3, #1
 800662c:	e06f      	b.n	800670e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800662e:	4b3b      	ldr	r3, [pc, #236]	; (800671c <HAL_RCC_ClockConfig+0x1bc>)
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	f003 0302 	and.w	r3, r3, #2
 8006636:	2b00      	cmp	r3, #0
 8006638:	d101      	bne.n	800663e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800663a:	2301      	movs	r3, #1
 800663c:	e067      	b.n	800670e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800663e:	4b37      	ldr	r3, [pc, #220]	; (800671c <HAL_RCC_ClockConfig+0x1bc>)
 8006640:	689b      	ldr	r3, [r3, #8]
 8006642:	f023 0203 	bic.w	r2, r3, #3
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	685b      	ldr	r3, [r3, #4]
 800664a:	4934      	ldr	r1, [pc, #208]	; (800671c <HAL_RCC_ClockConfig+0x1bc>)
 800664c:	4313      	orrs	r3, r2
 800664e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006650:	f7fc fd02 	bl	8003058 <HAL_GetTick>
 8006654:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006656:	e00a      	b.n	800666e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006658:	f7fc fcfe 	bl	8003058 <HAL_GetTick>
 800665c:	4602      	mov	r2, r0
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	1ad3      	subs	r3, r2, r3
 8006662:	f241 3288 	movw	r2, #5000	; 0x1388
 8006666:	4293      	cmp	r3, r2
 8006668:	d901      	bls.n	800666e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800666a:	2303      	movs	r3, #3
 800666c:	e04f      	b.n	800670e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800666e:	4b2b      	ldr	r3, [pc, #172]	; (800671c <HAL_RCC_ClockConfig+0x1bc>)
 8006670:	689b      	ldr	r3, [r3, #8]
 8006672:	f003 020c 	and.w	r2, r3, #12
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	685b      	ldr	r3, [r3, #4]
 800667a:	009b      	lsls	r3, r3, #2
 800667c:	429a      	cmp	r2, r3
 800667e:	d1eb      	bne.n	8006658 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006680:	4b25      	ldr	r3, [pc, #148]	; (8006718 <HAL_RCC_ClockConfig+0x1b8>)
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	f003 030f 	and.w	r3, r3, #15
 8006688:	683a      	ldr	r2, [r7, #0]
 800668a:	429a      	cmp	r2, r3
 800668c:	d20c      	bcs.n	80066a8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800668e:	4b22      	ldr	r3, [pc, #136]	; (8006718 <HAL_RCC_ClockConfig+0x1b8>)
 8006690:	683a      	ldr	r2, [r7, #0]
 8006692:	b2d2      	uxtb	r2, r2
 8006694:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006696:	4b20      	ldr	r3, [pc, #128]	; (8006718 <HAL_RCC_ClockConfig+0x1b8>)
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	f003 030f 	and.w	r3, r3, #15
 800669e:	683a      	ldr	r2, [r7, #0]
 80066a0:	429a      	cmp	r2, r3
 80066a2:	d001      	beq.n	80066a8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80066a4:	2301      	movs	r3, #1
 80066a6:	e032      	b.n	800670e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	f003 0304 	and.w	r3, r3, #4
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d008      	beq.n	80066c6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80066b4:	4b19      	ldr	r3, [pc, #100]	; (800671c <HAL_RCC_ClockConfig+0x1bc>)
 80066b6:	689b      	ldr	r3, [r3, #8]
 80066b8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	68db      	ldr	r3, [r3, #12]
 80066c0:	4916      	ldr	r1, [pc, #88]	; (800671c <HAL_RCC_ClockConfig+0x1bc>)
 80066c2:	4313      	orrs	r3, r2
 80066c4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	f003 0308 	and.w	r3, r3, #8
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d009      	beq.n	80066e6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80066d2:	4b12      	ldr	r3, [pc, #72]	; (800671c <HAL_RCC_ClockConfig+0x1bc>)
 80066d4:	689b      	ldr	r3, [r3, #8]
 80066d6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	691b      	ldr	r3, [r3, #16]
 80066de:	00db      	lsls	r3, r3, #3
 80066e0:	490e      	ldr	r1, [pc, #56]	; (800671c <HAL_RCC_ClockConfig+0x1bc>)
 80066e2:	4313      	orrs	r3, r2
 80066e4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80066e6:	f000 f821 	bl	800672c <HAL_RCC_GetSysClockFreq>
 80066ea:	4601      	mov	r1, r0
 80066ec:	4b0b      	ldr	r3, [pc, #44]	; (800671c <HAL_RCC_ClockConfig+0x1bc>)
 80066ee:	689b      	ldr	r3, [r3, #8]
 80066f0:	091b      	lsrs	r3, r3, #4
 80066f2:	f003 030f 	and.w	r3, r3, #15
 80066f6:	4a0a      	ldr	r2, [pc, #40]	; (8006720 <HAL_RCC_ClockConfig+0x1c0>)
 80066f8:	5cd3      	ldrb	r3, [r2, r3]
 80066fa:	fa21 f303 	lsr.w	r3, r1, r3
 80066fe:	4a09      	ldr	r2, [pc, #36]	; (8006724 <HAL_RCC_ClockConfig+0x1c4>)
 8006700:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8006702:	4b09      	ldr	r3, [pc, #36]	; (8006728 <HAL_RCC_ClockConfig+0x1c8>)
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	4618      	mov	r0, r3
 8006708:	f7fc fc62 	bl	8002fd0 <HAL_InitTick>

  return HAL_OK;
 800670c:	2300      	movs	r3, #0
}
 800670e:	4618      	mov	r0, r3
 8006710:	3710      	adds	r7, #16
 8006712:	46bd      	mov	sp, r7
 8006714:	bd80      	pop	{r7, pc}
 8006716:	bf00      	nop
 8006718:	40023c00 	.word	0x40023c00
 800671c:	40023800 	.word	0x40023800
 8006720:	08012204 	.word	0x08012204
 8006724:	20000014 	.word	0x20000014
 8006728:	20000018 	.word	0x20000018

0800672c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800672c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800672e:	b085      	sub	sp, #20
 8006730:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8006732:	2300      	movs	r3, #0
 8006734:	607b      	str	r3, [r7, #4]
 8006736:	2300      	movs	r3, #0
 8006738:	60fb      	str	r3, [r7, #12]
 800673a:	2300      	movs	r3, #0
 800673c:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800673e:	2300      	movs	r3, #0
 8006740:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006742:	4b50      	ldr	r3, [pc, #320]	; (8006884 <HAL_RCC_GetSysClockFreq+0x158>)
 8006744:	689b      	ldr	r3, [r3, #8]
 8006746:	f003 030c 	and.w	r3, r3, #12
 800674a:	2b04      	cmp	r3, #4
 800674c:	d007      	beq.n	800675e <HAL_RCC_GetSysClockFreq+0x32>
 800674e:	2b08      	cmp	r3, #8
 8006750:	d008      	beq.n	8006764 <HAL_RCC_GetSysClockFreq+0x38>
 8006752:	2b00      	cmp	r3, #0
 8006754:	f040 808d 	bne.w	8006872 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006758:	4b4b      	ldr	r3, [pc, #300]	; (8006888 <HAL_RCC_GetSysClockFreq+0x15c>)
 800675a:	60bb      	str	r3, [r7, #8]
       break;
 800675c:	e08c      	b.n	8006878 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800675e:	4b4b      	ldr	r3, [pc, #300]	; (800688c <HAL_RCC_GetSysClockFreq+0x160>)
 8006760:	60bb      	str	r3, [r7, #8]
      break;
 8006762:	e089      	b.n	8006878 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006764:	4b47      	ldr	r3, [pc, #284]	; (8006884 <HAL_RCC_GetSysClockFreq+0x158>)
 8006766:	685b      	ldr	r3, [r3, #4]
 8006768:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800676c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800676e:	4b45      	ldr	r3, [pc, #276]	; (8006884 <HAL_RCC_GetSysClockFreq+0x158>)
 8006770:	685b      	ldr	r3, [r3, #4]
 8006772:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006776:	2b00      	cmp	r3, #0
 8006778:	d023      	beq.n	80067c2 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800677a:	4b42      	ldr	r3, [pc, #264]	; (8006884 <HAL_RCC_GetSysClockFreq+0x158>)
 800677c:	685b      	ldr	r3, [r3, #4]
 800677e:	099b      	lsrs	r3, r3, #6
 8006780:	f04f 0400 	mov.w	r4, #0
 8006784:	f240 11ff 	movw	r1, #511	; 0x1ff
 8006788:	f04f 0200 	mov.w	r2, #0
 800678c:	ea03 0501 	and.w	r5, r3, r1
 8006790:	ea04 0602 	and.w	r6, r4, r2
 8006794:	4a3d      	ldr	r2, [pc, #244]	; (800688c <HAL_RCC_GetSysClockFreq+0x160>)
 8006796:	fb02 f106 	mul.w	r1, r2, r6
 800679a:	2200      	movs	r2, #0
 800679c:	fb02 f205 	mul.w	r2, r2, r5
 80067a0:	440a      	add	r2, r1
 80067a2:	493a      	ldr	r1, [pc, #232]	; (800688c <HAL_RCC_GetSysClockFreq+0x160>)
 80067a4:	fba5 0101 	umull	r0, r1, r5, r1
 80067a8:	1853      	adds	r3, r2, r1
 80067aa:	4619      	mov	r1, r3
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	f04f 0400 	mov.w	r4, #0
 80067b2:	461a      	mov	r2, r3
 80067b4:	4623      	mov	r3, r4
 80067b6:	f7fa fab7 	bl	8000d28 <__aeabi_uldivmod>
 80067ba:	4603      	mov	r3, r0
 80067bc:	460c      	mov	r4, r1
 80067be:	60fb      	str	r3, [r7, #12]
 80067c0:	e049      	b.n	8006856 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80067c2:	4b30      	ldr	r3, [pc, #192]	; (8006884 <HAL_RCC_GetSysClockFreq+0x158>)
 80067c4:	685b      	ldr	r3, [r3, #4]
 80067c6:	099b      	lsrs	r3, r3, #6
 80067c8:	f04f 0400 	mov.w	r4, #0
 80067cc:	f240 11ff 	movw	r1, #511	; 0x1ff
 80067d0:	f04f 0200 	mov.w	r2, #0
 80067d4:	ea03 0501 	and.w	r5, r3, r1
 80067d8:	ea04 0602 	and.w	r6, r4, r2
 80067dc:	4629      	mov	r1, r5
 80067de:	4632      	mov	r2, r6
 80067e0:	f04f 0300 	mov.w	r3, #0
 80067e4:	f04f 0400 	mov.w	r4, #0
 80067e8:	0154      	lsls	r4, r2, #5
 80067ea:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80067ee:	014b      	lsls	r3, r1, #5
 80067f0:	4619      	mov	r1, r3
 80067f2:	4622      	mov	r2, r4
 80067f4:	1b49      	subs	r1, r1, r5
 80067f6:	eb62 0206 	sbc.w	r2, r2, r6
 80067fa:	f04f 0300 	mov.w	r3, #0
 80067fe:	f04f 0400 	mov.w	r4, #0
 8006802:	0194      	lsls	r4, r2, #6
 8006804:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8006808:	018b      	lsls	r3, r1, #6
 800680a:	1a5b      	subs	r3, r3, r1
 800680c:	eb64 0402 	sbc.w	r4, r4, r2
 8006810:	f04f 0100 	mov.w	r1, #0
 8006814:	f04f 0200 	mov.w	r2, #0
 8006818:	00e2      	lsls	r2, r4, #3
 800681a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800681e:	00d9      	lsls	r1, r3, #3
 8006820:	460b      	mov	r3, r1
 8006822:	4614      	mov	r4, r2
 8006824:	195b      	adds	r3, r3, r5
 8006826:	eb44 0406 	adc.w	r4, r4, r6
 800682a:	f04f 0100 	mov.w	r1, #0
 800682e:	f04f 0200 	mov.w	r2, #0
 8006832:	02a2      	lsls	r2, r4, #10
 8006834:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8006838:	0299      	lsls	r1, r3, #10
 800683a:	460b      	mov	r3, r1
 800683c:	4614      	mov	r4, r2
 800683e:	4618      	mov	r0, r3
 8006840:	4621      	mov	r1, r4
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	f04f 0400 	mov.w	r4, #0
 8006848:	461a      	mov	r2, r3
 800684a:	4623      	mov	r3, r4
 800684c:	f7fa fa6c 	bl	8000d28 <__aeabi_uldivmod>
 8006850:	4603      	mov	r3, r0
 8006852:	460c      	mov	r4, r1
 8006854:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006856:	4b0b      	ldr	r3, [pc, #44]	; (8006884 <HAL_RCC_GetSysClockFreq+0x158>)
 8006858:	685b      	ldr	r3, [r3, #4]
 800685a:	0c1b      	lsrs	r3, r3, #16
 800685c:	f003 0303 	and.w	r3, r3, #3
 8006860:	3301      	adds	r3, #1
 8006862:	005b      	lsls	r3, r3, #1
 8006864:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8006866:	68fa      	ldr	r2, [r7, #12]
 8006868:	683b      	ldr	r3, [r7, #0]
 800686a:	fbb2 f3f3 	udiv	r3, r2, r3
 800686e:	60bb      	str	r3, [r7, #8]
      break;
 8006870:	e002      	b.n	8006878 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006872:	4b05      	ldr	r3, [pc, #20]	; (8006888 <HAL_RCC_GetSysClockFreq+0x15c>)
 8006874:	60bb      	str	r3, [r7, #8]
      break;
 8006876:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006878:	68bb      	ldr	r3, [r7, #8]
}
 800687a:	4618      	mov	r0, r3
 800687c:	3714      	adds	r7, #20
 800687e:	46bd      	mov	sp, r7
 8006880:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006882:	bf00      	nop
 8006884:	40023800 	.word	0x40023800
 8006888:	00f42400 	.word	0x00f42400
 800688c:	00b71b00 	.word	0x00b71b00

08006890 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006890:	b480      	push	{r7}
 8006892:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006894:	4b03      	ldr	r3, [pc, #12]	; (80068a4 <HAL_RCC_GetHCLKFreq+0x14>)
 8006896:	681b      	ldr	r3, [r3, #0]
}
 8006898:	4618      	mov	r0, r3
 800689a:	46bd      	mov	sp, r7
 800689c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068a0:	4770      	bx	lr
 80068a2:	bf00      	nop
 80068a4:	20000014 	.word	0x20000014

080068a8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80068a8:	b580      	push	{r7, lr}
 80068aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80068ac:	f7ff fff0 	bl	8006890 <HAL_RCC_GetHCLKFreq>
 80068b0:	4601      	mov	r1, r0
 80068b2:	4b05      	ldr	r3, [pc, #20]	; (80068c8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80068b4:	689b      	ldr	r3, [r3, #8]
 80068b6:	0a9b      	lsrs	r3, r3, #10
 80068b8:	f003 0307 	and.w	r3, r3, #7
 80068bc:	4a03      	ldr	r2, [pc, #12]	; (80068cc <HAL_RCC_GetPCLK1Freq+0x24>)
 80068be:	5cd3      	ldrb	r3, [r2, r3]
 80068c0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80068c4:	4618      	mov	r0, r3
 80068c6:	bd80      	pop	{r7, pc}
 80068c8:	40023800 	.word	0x40023800
 80068cc:	08012214 	.word	0x08012214

080068d0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80068d0:	b580      	push	{r7, lr}
 80068d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80068d4:	f7ff ffdc 	bl	8006890 <HAL_RCC_GetHCLKFreq>
 80068d8:	4601      	mov	r1, r0
 80068da:	4b05      	ldr	r3, [pc, #20]	; (80068f0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80068dc:	689b      	ldr	r3, [r3, #8]
 80068de:	0b5b      	lsrs	r3, r3, #13
 80068e0:	f003 0307 	and.w	r3, r3, #7
 80068e4:	4a03      	ldr	r2, [pc, #12]	; (80068f4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80068e6:	5cd3      	ldrb	r3, [r2, r3]
 80068e8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80068ec:	4618      	mov	r0, r3
 80068ee:	bd80      	pop	{r7, pc}
 80068f0:	40023800 	.word	0x40023800
 80068f4:	08012214 	.word	0x08012214

080068f8 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80068f8:	b580      	push	{r7, lr}
 80068fa:	b086      	sub	sp, #24
 80068fc:	af00      	add	r7, sp, #0
 80068fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006900:	2300      	movs	r3, #0
 8006902:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8006904:	2300      	movs	r3, #0
 8006906:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	f003 0301 	and.w	r3, r3, #1
 8006910:	2b00      	cmp	r3, #0
 8006912:	d105      	bne.n	8006920 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800691c:	2b00      	cmp	r3, #0
 800691e:	d035      	beq.n	800698c <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8006920:	4b62      	ldr	r3, [pc, #392]	; (8006aac <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8006922:	2200      	movs	r2, #0
 8006924:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006926:	f7fc fb97 	bl	8003058 <HAL_GetTick>
 800692a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800692c:	e008      	b.n	8006940 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800692e:	f7fc fb93 	bl	8003058 <HAL_GetTick>
 8006932:	4602      	mov	r2, r0
 8006934:	697b      	ldr	r3, [r7, #20]
 8006936:	1ad3      	subs	r3, r2, r3
 8006938:	2b02      	cmp	r3, #2
 800693a:	d901      	bls.n	8006940 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800693c:	2303      	movs	r3, #3
 800693e:	e0b0      	b.n	8006aa2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006940:	4b5b      	ldr	r3, [pc, #364]	; (8006ab0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006948:	2b00      	cmp	r3, #0
 800694a:	d1f0      	bne.n	800692e <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	685b      	ldr	r3, [r3, #4]
 8006950:	019a      	lsls	r2, r3, #6
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	689b      	ldr	r3, [r3, #8]
 8006956:	071b      	lsls	r3, r3, #28
 8006958:	4955      	ldr	r1, [pc, #340]	; (8006ab0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800695a:	4313      	orrs	r3, r2
 800695c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8006960:	4b52      	ldr	r3, [pc, #328]	; (8006aac <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8006962:	2201      	movs	r2, #1
 8006964:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006966:	f7fc fb77 	bl	8003058 <HAL_GetTick>
 800696a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800696c:	e008      	b.n	8006980 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800696e:	f7fc fb73 	bl	8003058 <HAL_GetTick>
 8006972:	4602      	mov	r2, r0
 8006974:	697b      	ldr	r3, [r7, #20]
 8006976:	1ad3      	subs	r3, r2, r3
 8006978:	2b02      	cmp	r3, #2
 800697a:	d901      	bls.n	8006980 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800697c:	2303      	movs	r3, #3
 800697e:	e090      	b.n	8006aa2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006980:	4b4b      	ldr	r3, [pc, #300]	; (8006ab0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006988:	2b00      	cmp	r3, #0
 800698a:	d0f0      	beq.n	800696e <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	f003 0302 	and.w	r3, r3, #2
 8006994:	2b00      	cmp	r3, #0
 8006996:	f000 8083 	beq.w	8006aa0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800699a:	2300      	movs	r3, #0
 800699c:	60fb      	str	r3, [r7, #12]
 800699e:	4b44      	ldr	r3, [pc, #272]	; (8006ab0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80069a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069a2:	4a43      	ldr	r2, [pc, #268]	; (8006ab0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80069a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80069a8:	6413      	str	r3, [r2, #64]	; 0x40
 80069aa:	4b41      	ldr	r3, [pc, #260]	; (8006ab0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80069ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80069b2:	60fb      	str	r3, [r7, #12]
 80069b4:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80069b6:	4b3f      	ldr	r3, [pc, #252]	; (8006ab4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	4a3e      	ldr	r2, [pc, #248]	; (8006ab4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80069bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80069c0:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80069c2:	f7fc fb49 	bl	8003058 <HAL_GetTick>
 80069c6:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80069c8:	e008      	b.n	80069dc <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80069ca:	f7fc fb45 	bl	8003058 <HAL_GetTick>
 80069ce:	4602      	mov	r2, r0
 80069d0:	697b      	ldr	r3, [r7, #20]
 80069d2:	1ad3      	subs	r3, r2, r3
 80069d4:	2b02      	cmp	r3, #2
 80069d6:	d901      	bls.n	80069dc <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 80069d8:	2303      	movs	r3, #3
 80069da:	e062      	b.n	8006aa2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80069dc:	4b35      	ldr	r3, [pc, #212]	; (8006ab4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d0f0      	beq.n	80069ca <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80069e8:	4b31      	ldr	r3, [pc, #196]	; (8006ab0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80069ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80069ec:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80069f0:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80069f2:	693b      	ldr	r3, [r7, #16]
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d02f      	beq.n	8006a58 <HAL_RCCEx_PeriphCLKConfig+0x160>
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	68db      	ldr	r3, [r3, #12]
 80069fc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006a00:	693a      	ldr	r2, [r7, #16]
 8006a02:	429a      	cmp	r2, r3
 8006a04:	d028      	beq.n	8006a58 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006a06:	4b2a      	ldr	r3, [pc, #168]	; (8006ab0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006a08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a0a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006a0e:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006a10:	4b29      	ldr	r3, [pc, #164]	; (8006ab8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8006a12:	2201      	movs	r2, #1
 8006a14:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006a16:	4b28      	ldr	r3, [pc, #160]	; (8006ab8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8006a18:	2200      	movs	r2, #0
 8006a1a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8006a1c:	4a24      	ldr	r2, [pc, #144]	; (8006ab0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006a1e:	693b      	ldr	r3, [r7, #16]
 8006a20:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8006a22:	4b23      	ldr	r3, [pc, #140]	; (8006ab0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006a24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a26:	f003 0301 	and.w	r3, r3, #1
 8006a2a:	2b01      	cmp	r3, #1
 8006a2c:	d114      	bne.n	8006a58 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8006a2e:	f7fc fb13 	bl	8003058 <HAL_GetTick>
 8006a32:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006a34:	e00a      	b.n	8006a4c <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006a36:	f7fc fb0f 	bl	8003058 <HAL_GetTick>
 8006a3a:	4602      	mov	r2, r0
 8006a3c:	697b      	ldr	r3, [r7, #20]
 8006a3e:	1ad3      	subs	r3, r2, r3
 8006a40:	f241 3288 	movw	r2, #5000	; 0x1388
 8006a44:	4293      	cmp	r3, r2
 8006a46:	d901      	bls.n	8006a4c <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8006a48:	2303      	movs	r3, #3
 8006a4a:	e02a      	b.n	8006aa2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006a4c:	4b18      	ldr	r3, [pc, #96]	; (8006ab0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006a4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a50:	f003 0302 	and.w	r3, r3, #2
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d0ee      	beq.n	8006a36 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	68db      	ldr	r3, [r3, #12]
 8006a5c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006a60:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006a64:	d10d      	bne.n	8006a82 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8006a66:	4b12      	ldr	r3, [pc, #72]	; (8006ab0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006a68:	689b      	ldr	r3, [r3, #8]
 8006a6a:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	68db      	ldr	r3, [r3, #12]
 8006a72:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8006a76:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006a7a:	490d      	ldr	r1, [pc, #52]	; (8006ab0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006a7c:	4313      	orrs	r3, r2
 8006a7e:	608b      	str	r3, [r1, #8]
 8006a80:	e005      	b.n	8006a8e <HAL_RCCEx_PeriphCLKConfig+0x196>
 8006a82:	4b0b      	ldr	r3, [pc, #44]	; (8006ab0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006a84:	689b      	ldr	r3, [r3, #8]
 8006a86:	4a0a      	ldr	r2, [pc, #40]	; (8006ab0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006a88:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8006a8c:	6093      	str	r3, [r2, #8]
 8006a8e:	4b08      	ldr	r3, [pc, #32]	; (8006ab0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006a90:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	68db      	ldr	r3, [r3, #12]
 8006a96:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006a9a:	4905      	ldr	r1, [pc, #20]	; (8006ab0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006a9c:	4313      	orrs	r3, r2
 8006a9e:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8006aa0:	2300      	movs	r3, #0
}
 8006aa2:	4618      	mov	r0, r3
 8006aa4:	3718      	adds	r7, #24
 8006aa6:	46bd      	mov	sp, r7
 8006aa8:	bd80      	pop	{r7, pc}
 8006aaa:	bf00      	nop
 8006aac:	42470068 	.word	0x42470068
 8006ab0:	40023800 	.word	0x40023800
 8006ab4:	40007000 	.word	0x40007000
 8006ab8:	42470e40 	.word	0x42470e40

08006abc <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8006abc:	b580      	push	{r7, lr}
 8006abe:	b082      	sub	sp, #8
 8006ac0:	af00      	add	r7, sp, #0
 8006ac2:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d101      	bne.n	8006ace <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 8006aca:	2301      	movs	r3, #1
 8006acc:	e083      	b.n	8006bd6 <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	7f5b      	ldrb	r3, [r3, #29]
 8006ad2:	b2db      	uxtb	r3, r3
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d105      	bne.n	8006ae4 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	2200      	movs	r2, #0
 8006adc:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8006ade:	6878      	ldr	r0, [r7, #4]
 8006ae0:	f7fb ff76 	bl	80029d0 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	2202      	movs	r2, #2
 8006ae8:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	22ca      	movs	r2, #202	; 0xca
 8006af0:	625a      	str	r2, [r3, #36]	; 0x24
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	2253      	movs	r2, #83	; 0x53
 8006af8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8006afa:	6878      	ldr	r0, [r7, #4]
 8006afc:	f000 f9fb 	bl	8006ef6 <RTC_EnterInitMode>
 8006b00:	4603      	mov	r3, r0
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d008      	beq.n	8006b18 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	22ff      	movs	r2, #255	; 0xff
 8006b0c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	2204      	movs	r2, #4
 8006b12:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8006b14:	2301      	movs	r3, #1
 8006b16:	e05e      	b.n	8006bd6 <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	689b      	ldr	r3, [r3, #8]
 8006b1e:	687a      	ldr	r2, [r7, #4]
 8006b20:	6812      	ldr	r2, [r2, #0]
 8006b22:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8006b26:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006b2a:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	6899      	ldr	r1, [r3, #8]
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	685a      	ldr	r2, [r3, #4]
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	691b      	ldr	r3, [r3, #16]
 8006b3a:	431a      	orrs	r2, r3
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	695b      	ldr	r3, [r3, #20]
 8006b40:	431a      	orrs	r2, r3
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	430a      	orrs	r2, r1
 8006b48:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	687a      	ldr	r2, [r7, #4]
 8006b50:	68d2      	ldr	r2, [r2, #12]
 8006b52:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	6919      	ldr	r1, [r3, #16]
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	689b      	ldr	r3, [r3, #8]
 8006b5e:	041a      	lsls	r2, r3, #16
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	430a      	orrs	r2, r1
 8006b66:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	68da      	ldr	r2, [r3, #12]
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006b76:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	689b      	ldr	r3, [r3, #8]
 8006b7e:	f003 0320 	and.w	r3, r3, #32
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d10e      	bne.n	8006ba4 <HAL_RTC_Init+0xe8>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006b86:	6878      	ldr	r0, [r7, #4]
 8006b88:	f000 f98d 	bl	8006ea6 <HAL_RTC_WaitForSynchro>
 8006b8c:	4603      	mov	r3, r0
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d008      	beq.n	8006ba4 <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	22ff      	movs	r2, #255	; 0xff
 8006b98:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	2204      	movs	r2, #4
 8006b9e:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 8006ba0:	2301      	movs	r3, #1
 8006ba2:	e018      	b.n	8006bd6 <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006bb2:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	699a      	ldr	r2, [r3, #24]
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	430a      	orrs	r2, r1
 8006bc4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	22ff      	movs	r2, #255	; 0xff
 8006bcc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	2201      	movs	r2, #1
 8006bd2:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8006bd4:	2300      	movs	r3, #0
  }
}
 8006bd6:	4618      	mov	r0, r3
 8006bd8:	3708      	adds	r7, #8
 8006bda:	46bd      	mov	sp, r7
 8006bdc:	bd80      	pop	{r7, pc}

08006bde <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8006bde:	b590      	push	{r4, r7, lr}
 8006be0:	b087      	sub	sp, #28
 8006be2:	af00      	add	r7, sp, #0
 8006be4:	60f8      	str	r0, [r7, #12]
 8006be6:	60b9      	str	r1, [r7, #8]
 8006be8:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8006bea:	2300      	movs	r3, #0
 8006bec:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	7f1b      	ldrb	r3, [r3, #28]
 8006bf2:	2b01      	cmp	r3, #1
 8006bf4:	d101      	bne.n	8006bfa <HAL_RTC_SetTime+0x1c>
 8006bf6:	2302      	movs	r3, #2
 8006bf8:	e0aa      	b.n	8006d50 <HAL_RTC_SetTime+0x172>
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	2201      	movs	r2, #1
 8006bfe:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	2202      	movs	r2, #2
 8006c04:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d126      	bne.n	8006c5a <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	689b      	ldr	r3, [r3, #8]
 8006c12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d102      	bne.n	8006c20 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8006c1a:	68bb      	ldr	r3, [r7, #8]
 8006c1c:	2200      	movs	r2, #0
 8006c1e:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8006c20:	68bb      	ldr	r3, [r7, #8]
 8006c22:	781b      	ldrb	r3, [r3, #0]
 8006c24:	4618      	mov	r0, r3
 8006c26:	f000 f992 	bl	8006f4e <RTC_ByteToBcd2>
 8006c2a:	4603      	mov	r3, r0
 8006c2c:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8006c2e:	68bb      	ldr	r3, [r7, #8]
 8006c30:	785b      	ldrb	r3, [r3, #1]
 8006c32:	4618      	mov	r0, r3
 8006c34:	f000 f98b 	bl	8006f4e <RTC_ByteToBcd2>
 8006c38:	4603      	mov	r3, r0
 8006c3a:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8006c3c:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8006c3e:	68bb      	ldr	r3, [r7, #8]
 8006c40:	789b      	ldrb	r3, [r3, #2]
 8006c42:	4618      	mov	r0, r3
 8006c44:	f000 f983 	bl	8006f4e <RTC_ByteToBcd2>
 8006c48:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8006c4a:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 8006c4e:	68bb      	ldr	r3, [r7, #8]
 8006c50:	78db      	ldrb	r3, [r3, #3]
 8006c52:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8006c54:	4313      	orrs	r3, r2
 8006c56:	617b      	str	r3, [r7, #20]
 8006c58:	e018      	b.n	8006c8c <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	689b      	ldr	r3, [r3, #8]
 8006c60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d102      	bne.n	8006c6e <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8006c68:	68bb      	ldr	r3, [r7, #8]
 8006c6a:	2200      	movs	r2, #0
 8006c6c:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8006c6e:	68bb      	ldr	r3, [r7, #8]
 8006c70:	781b      	ldrb	r3, [r3, #0]
 8006c72:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8006c74:	68bb      	ldr	r3, [r7, #8]
 8006c76:	785b      	ldrb	r3, [r3, #1]
 8006c78:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8006c7a:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 8006c7c:	68ba      	ldr	r2, [r7, #8]
 8006c7e:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8006c80:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 8006c82:	68bb      	ldr	r3, [r7, #8]
 8006c84:	78db      	ldrb	r3, [r3, #3]
 8006c86:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8006c88:	4313      	orrs	r3, r2
 8006c8a:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	22ca      	movs	r2, #202	; 0xca
 8006c92:	625a      	str	r2, [r3, #36]	; 0x24
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	2253      	movs	r2, #83	; 0x53
 8006c9a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8006c9c:	68f8      	ldr	r0, [r7, #12]
 8006c9e:	f000 f92a 	bl	8006ef6 <RTC_EnterInitMode>
 8006ca2:	4603      	mov	r3, r0
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d00b      	beq.n	8006cc0 <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	22ff      	movs	r2, #255	; 0xff
 8006cae:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	2204      	movs	r2, #4
 8006cb4:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	2200      	movs	r2, #0
 8006cba:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8006cbc:	2301      	movs	r3, #1
 8006cbe:	e047      	b.n	8006d50 <HAL_RTC_SetTime+0x172>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	681a      	ldr	r2, [r3, #0]
 8006cc4:	697b      	ldr	r3, [r7, #20]
 8006cc6:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8006cca:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8006cce:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BCK;
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	689a      	ldr	r2, [r3, #8]
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006cde:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	6899      	ldr	r1, [r3, #8]
 8006ce6:	68bb      	ldr	r3, [r7, #8]
 8006ce8:	68da      	ldr	r2, [r3, #12]
 8006cea:	68bb      	ldr	r3, [r7, #8]
 8006cec:	691b      	ldr	r3, [r3, #16]
 8006cee:	431a      	orrs	r2, r3
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	430a      	orrs	r2, r1
 8006cf6:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	68da      	ldr	r2, [r3, #12]
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006d06:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	689b      	ldr	r3, [r3, #8]
 8006d0e:	f003 0320 	and.w	r3, r3, #32
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d111      	bne.n	8006d3a <HAL_RTC_SetTime+0x15c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006d16:	68f8      	ldr	r0, [r7, #12]
 8006d18:	f000 f8c5 	bl	8006ea6 <HAL_RTC_WaitForSynchro>
 8006d1c:	4603      	mov	r3, r0
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d00b      	beq.n	8006d3a <HAL_RTC_SetTime+0x15c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	22ff      	movs	r2, #255	; 0xff
 8006d28:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	2204      	movs	r2, #4
 8006d2e:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	2200      	movs	r2, #0
 8006d34:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8006d36:	2301      	movs	r3, #1
 8006d38:	e00a      	b.n	8006d50 <HAL_RTC_SetTime+0x172>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	22ff      	movs	r2, #255	; 0xff
 8006d40:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	2201      	movs	r2, #1
 8006d46:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	2200      	movs	r2, #0
 8006d4c:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 8006d4e:	2300      	movs	r3, #0
  }
}
 8006d50:	4618      	mov	r0, r3
 8006d52:	371c      	adds	r7, #28
 8006d54:	46bd      	mov	sp, r7
 8006d56:	bd90      	pop	{r4, r7, pc}

08006d58 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8006d58:	b590      	push	{r4, r7, lr}
 8006d5a:	b087      	sub	sp, #28
 8006d5c:	af00      	add	r7, sp, #0
 8006d5e:	60f8      	str	r0, [r7, #12]
 8006d60:	60b9      	str	r1, [r7, #8]
 8006d62:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8006d64:	2300      	movs	r3, #0
 8006d66:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	7f1b      	ldrb	r3, [r3, #28]
 8006d6c:	2b01      	cmp	r3, #1
 8006d6e:	d101      	bne.n	8006d74 <HAL_RTC_SetDate+0x1c>
 8006d70:	2302      	movs	r3, #2
 8006d72:	e094      	b.n	8006e9e <HAL_RTC_SetDate+0x146>
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	2201      	movs	r2, #1
 8006d78:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	2202      	movs	r2, #2
 8006d7e:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d10e      	bne.n	8006da4 <HAL_RTC_SetDate+0x4c>
 8006d86:	68bb      	ldr	r3, [r7, #8]
 8006d88:	785b      	ldrb	r3, [r3, #1]
 8006d8a:	f003 0310 	and.w	r3, r3, #16
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d008      	beq.n	8006da4 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8006d92:	68bb      	ldr	r3, [r7, #8]
 8006d94:	785b      	ldrb	r3, [r3, #1]
 8006d96:	f023 0310 	bic.w	r3, r3, #16
 8006d9a:	b2db      	uxtb	r3, r3
 8006d9c:	330a      	adds	r3, #10
 8006d9e:	b2da      	uxtb	r2, r3
 8006da0:	68bb      	ldr	r3, [r7, #8]
 8006da2:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d11c      	bne.n	8006de4 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8006daa:	68bb      	ldr	r3, [r7, #8]
 8006dac:	78db      	ldrb	r3, [r3, #3]
 8006dae:	4618      	mov	r0, r3
 8006db0:	f000 f8cd 	bl	8006f4e <RTC_ByteToBcd2>
 8006db4:	4603      	mov	r3, r0
 8006db6:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8006db8:	68bb      	ldr	r3, [r7, #8]
 8006dba:	785b      	ldrb	r3, [r3, #1]
 8006dbc:	4618      	mov	r0, r3
 8006dbe:	f000 f8c6 	bl	8006f4e <RTC_ByteToBcd2>
 8006dc2:	4603      	mov	r3, r0
 8006dc4:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8006dc6:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8006dc8:	68bb      	ldr	r3, [r7, #8]
 8006dca:	789b      	ldrb	r3, [r3, #2]
 8006dcc:	4618      	mov	r0, r3
 8006dce:	f000 f8be 	bl	8006f4e <RTC_ByteToBcd2>
 8006dd2:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8006dd4:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13U));
 8006dd8:	68bb      	ldr	r3, [r7, #8]
 8006dda:	781b      	ldrb	r3, [r3, #0]
 8006ddc:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8006dde:	4313      	orrs	r3, r2
 8006de0:	617b      	str	r3, [r7, #20]
 8006de2:	e00e      	b.n	8006e02 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8006de4:	68bb      	ldr	r3, [r7, #8]
 8006de6:	78db      	ldrb	r3, [r3, #3]
 8006de8:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 8006dea:	68bb      	ldr	r3, [r7, #8]
 8006dec:	785b      	ldrb	r3, [r3, #1]
 8006dee:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8006df0:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 8006df2:	68ba      	ldr	r2, [r7, #8]
 8006df4:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 8006df6:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 8006df8:	68bb      	ldr	r3, [r7, #8]
 8006dfa:	781b      	ldrb	r3, [r3, #0]
 8006dfc:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8006dfe:	4313      	orrs	r3, r2
 8006e00:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	22ca      	movs	r2, #202	; 0xca
 8006e08:	625a      	str	r2, [r3, #36]	; 0x24
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	2253      	movs	r2, #83	; 0x53
 8006e10:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8006e12:	68f8      	ldr	r0, [r7, #12]
 8006e14:	f000 f86f 	bl	8006ef6 <RTC_EnterInitMode>
 8006e18:	4603      	mov	r3, r0
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d00b      	beq.n	8006e36 <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	22ff      	movs	r2, #255	; 0xff
 8006e24:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	2204      	movs	r2, #4
 8006e2a:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	2200      	movs	r2, #0
 8006e30:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8006e32:	2301      	movs	r3, #1
 8006e34:	e033      	b.n	8006e9e <HAL_RTC_SetDate+0x146>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	681a      	ldr	r2, [r3, #0]
 8006e3a:	697b      	ldr	r3, [r7, #20]
 8006e3c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8006e40:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8006e44:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	68da      	ldr	r2, [r3, #12]
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006e54:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	689b      	ldr	r3, [r3, #8]
 8006e5c:	f003 0320 	and.w	r3, r3, #32
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	d111      	bne.n	8006e88 <HAL_RTC_SetDate+0x130>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006e64:	68f8      	ldr	r0, [r7, #12]
 8006e66:	f000 f81e 	bl	8006ea6 <HAL_RTC_WaitForSynchro>
 8006e6a:	4603      	mov	r3, r0
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d00b      	beq.n	8006e88 <HAL_RTC_SetDate+0x130>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	22ff      	movs	r2, #255	; 0xff
 8006e76:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	2204      	movs	r2, #4
 8006e7c:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	2200      	movs	r2, #0
 8006e82:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8006e84:	2301      	movs	r3, #1
 8006e86:	e00a      	b.n	8006e9e <HAL_RTC_SetDate+0x146>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	22ff      	movs	r2, #255	; 0xff
 8006e8e:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	2201      	movs	r2, #1
 8006e94:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	2200      	movs	r2, #0
 8006e9a:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 8006e9c:	2300      	movs	r3, #0
  }
}
 8006e9e:	4618      	mov	r0, r3
 8006ea0:	371c      	adds	r7, #28
 8006ea2:	46bd      	mov	sp, r7
 8006ea4:	bd90      	pop	{r4, r7, pc}

08006ea6 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8006ea6:	b580      	push	{r7, lr}
 8006ea8:	b084      	sub	sp, #16
 8006eaa:	af00      	add	r7, sp, #0
 8006eac:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006eae:	2300      	movs	r3, #0
 8006eb0:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	68da      	ldr	r2, [r3, #12]
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006ec0:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006ec2:	f7fc f8c9 	bl	8003058 <HAL_GetTick>
 8006ec6:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8006ec8:	e009      	b.n	8006ede <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8006eca:	f7fc f8c5 	bl	8003058 <HAL_GetTick>
 8006ece:	4602      	mov	r2, r0
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	1ad3      	subs	r3, r2, r3
 8006ed4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006ed8:	d901      	bls.n	8006ede <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8006eda:	2303      	movs	r3, #3
 8006edc:	e007      	b.n	8006eee <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	68db      	ldr	r3, [r3, #12]
 8006ee4:	f003 0320 	and.w	r3, r3, #32
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d0ee      	beq.n	8006eca <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8006eec:	2300      	movs	r3, #0
}
 8006eee:	4618      	mov	r0, r3
 8006ef0:	3710      	adds	r7, #16
 8006ef2:	46bd      	mov	sp, r7
 8006ef4:	bd80      	pop	{r7, pc}

08006ef6 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8006ef6:	b580      	push	{r7, lr}
 8006ef8:	b084      	sub	sp, #16
 8006efa:	af00      	add	r7, sp, #0
 8006efc:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006efe:	2300      	movs	r3, #0
 8006f00:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	68db      	ldr	r3, [r3, #12]
 8006f08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d119      	bne.n	8006f44 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	f04f 32ff 	mov.w	r2, #4294967295
 8006f18:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006f1a:	f7fc f89d 	bl	8003058 <HAL_GetTick>
 8006f1e:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8006f20:	e009      	b.n	8006f36 <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8006f22:	f7fc f899 	bl	8003058 <HAL_GetTick>
 8006f26:	4602      	mov	r2, r0
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	1ad3      	subs	r3, r2, r3
 8006f2c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006f30:	d901      	bls.n	8006f36 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 8006f32:	2303      	movs	r3, #3
 8006f34:	e007      	b.n	8006f46 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	68db      	ldr	r3, [r3, #12]
 8006f3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	d0ee      	beq.n	8006f22 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 8006f44:	2300      	movs	r3, #0
}
 8006f46:	4618      	mov	r0, r3
 8006f48:	3710      	adds	r7, #16
 8006f4a:	46bd      	mov	sp, r7
 8006f4c:	bd80      	pop	{r7, pc}

08006f4e <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8006f4e:	b480      	push	{r7}
 8006f50:	b085      	sub	sp, #20
 8006f52:	af00      	add	r7, sp, #0
 8006f54:	4603      	mov	r3, r0
 8006f56:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8006f58:	2300      	movs	r3, #0
 8006f5a:	60fb      	str	r3, [r7, #12]

  while(Value >= 10U)
 8006f5c:	e005      	b.n	8006f6a <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	3301      	adds	r3, #1
 8006f62:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 8006f64:	79fb      	ldrb	r3, [r7, #7]
 8006f66:	3b0a      	subs	r3, #10
 8006f68:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10U)
 8006f6a:	79fb      	ldrb	r3, [r7, #7]
 8006f6c:	2b09      	cmp	r3, #9
 8006f6e:	d8f6      	bhi.n	8006f5e <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Value);
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	b2db      	uxtb	r3, r3
 8006f74:	011b      	lsls	r3, r3, #4
 8006f76:	b2da      	uxtb	r2, r3
 8006f78:	79fb      	ldrb	r3, [r7, #7]
 8006f7a:	4313      	orrs	r3, r2
 8006f7c:	b2db      	uxtb	r3, r3
}
 8006f7e:	4618      	mov	r0, r3
 8006f80:	3714      	adds	r7, #20
 8006f82:	46bd      	mov	sp, r7
 8006f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f88:	4770      	bx	lr

08006f8a <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8006f8a:	b580      	push	{r7, lr}
 8006f8c:	b082      	sub	sp, #8
 8006f8e:	af00      	add	r7, sp, #0
 8006f90:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	d101      	bne.n	8006f9c <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8006f98:	2301      	movs	r3, #1
 8006f9a:	e022      	b.n	8006fe2 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006fa2:	b2db      	uxtb	r3, r3
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	d105      	bne.n	8006fb4 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	2200      	movs	r2, #0
 8006fac:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8006fae:	6878      	ldr	r0, [r7, #4]
 8006fb0:	f7fb fd24 	bl	80029fc <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	2203      	movs	r2, #3
 8006fb8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8006fbc:	6878      	ldr	r0, [r7, #4]
 8006fbe:	f000 f815 	bl	8006fec <HAL_SD_InitCard>
 8006fc2:	4603      	mov	r3, r0
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d001      	beq.n	8006fcc <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8006fc8:	2301      	movs	r3, #1
 8006fca:	e00a      	b.n	8006fe2 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	2200      	movs	r2, #0
 8006fd0:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	2200      	movs	r2, #0
 8006fd6:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	2201      	movs	r2, #1
 8006fdc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8006fe0:	2300      	movs	r3, #0
}
 8006fe2:	4618      	mov	r0, r3
 8006fe4:	3708      	adds	r7, #8
 8006fe6:	46bd      	mov	sp, r7
 8006fe8:	bd80      	pop	{r7, pc}
	...

08006fec <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8006fec:	b5b0      	push	{r4, r5, r7, lr}
 8006fee:	b08e      	sub	sp, #56	; 0x38
 8006ff0:	af04      	add	r7, sp, #16
 8006ff2:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8006ff4:	2300      	movs	r3, #0
 8006ff6:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 8006ff8:	2300      	movs	r3, #0
 8006ffa:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8006ffc:	2300      	movs	r3, #0
 8006ffe:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 8007000:	2300      	movs	r3, #0
 8007002:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8007004:	2300      	movs	r3, #0
 8007006:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 8007008:	2376      	movs	r3, #118	; 0x76
 800700a:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	681d      	ldr	r5, [r3, #0]
 8007010:	466c      	mov	r4, sp
 8007012:	f107 0314 	add.w	r3, r7, #20
 8007016:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800701a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800701e:	f107 0308 	add.w	r3, r7, #8
 8007022:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007024:	4628      	mov	r0, r5
 8007026:	f002 fa8b 	bl	8009540 <SDIO_Init>
 800702a:	4603      	mov	r3, r0
 800702c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 8007030:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007034:	2b00      	cmp	r3, #0
 8007036:	d001      	beq.n	800703c <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8007038:	2301      	movs	r3, #1
 800703a:	e031      	b.n	80070a0 <HAL_SD_InitCard+0xb4>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 800703c:	4b1a      	ldr	r3, [pc, #104]	; (80070a8 <HAL_SD_InitCard+0xbc>)
 800703e:	2200      	movs	r2, #0
 8007040:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	4618      	mov	r0, r3
 8007048:	f002 fac3 	bl	80095d2 <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 800704c:	4b16      	ldr	r3, [pc, #88]	; (80070a8 <HAL_SD_InitCard+0xbc>)
 800704e:	2201      	movs	r2, #1
 8007050:	601a      	str	r2, [r3, #0]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8007052:	6878      	ldr	r0, [r7, #4]
 8007054:	f000 fffa 	bl	800804c <SD_PowerON>
 8007058:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800705a:	6a3b      	ldr	r3, [r7, #32]
 800705c:	2b00      	cmp	r3, #0
 800705e:	d00b      	beq.n	8007078 <HAL_SD_InitCard+0x8c>
  {
    hsd->State = HAL_SD_STATE_READY;
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	2201      	movs	r2, #1
 8007064:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800706c:	6a3b      	ldr	r3, [r7, #32]
 800706e:	431a      	orrs	r2, r3
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8007074:	2301      	movs	r3, #1
 8007076:	e013      	b.n	80070a0 <HAL_SD_InitCard+0xb4>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8007078:	6878      	ldr	r0, [r7, #4]
 800707a:	f000 ff19 	bl	8007eb0 <SD_InitCard>
 800707e:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007080:	6a3b      	ldr	r3, [r7, #32]
 8007082:	2b00      	cmp	r3, #0
 8007084:	d00b      	beq.n	800709e <HAL_SD_InitCard+0xb2>
  {
    hsd->State = HAL_SD_STATE_READY;
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	2201      	movs	r2, #1
 800708a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007092:	6a3b      	ldr	r3, [r7, #32]
 8007094:	431a      	orrs	r2, r3
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800709a:	2301      	movs	r3, #1
 800709c:	e000      	b.n	80070a0 <HAL_SD_InitCard+0xb4>
  }

  return HAL_OK;
 800709e:	2300      	movs	r3, #0
}
 80070a0:	4618      	mov	r0, r3
 80070a2:	3728      	adds	r7, #40	; 0x28
 80070a4:	46bd      	mov	sp, r7
 80070a6:	bdb0      	pop	{r4, r5, r7, pc}
 80070a8:	422580a0 	.word	0x422580a0

080070ac <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 80070ac:	b580      	push	{r7, lr}
 80070ae:	b08c      	sub	sp, #48	; 0x30
 80070b0:	af00      	add	r7, sp, #0
 80070b2:	60f8      	str	r0, [r7, #12]
 80070b4:	60b9      	str	r1, [r7, #8]
 80070b6:	607a      	str	r2, [r7, #4]
 80070b8:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 80070be:	68bb      	ldr	r3, [r7, #8]
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	d107      	bne.n	80070d4 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070c8:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80070d0:	2301      	movs	r3, #1
 80070d2:	e0c9      	b.n	8007268 <HAL_SD_ReadBlocks_DMA+0x1bc>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80070da:	b2db      	uxtb	r3, r3
 80070dc:	2b01      	cmp	r3, #1
 80070de:	f040 80c2 	bne.w	8007266 <HAL_SD_ReadBlocks_DMA+0x1ba>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	2200      	movs	r2, #0
 80070e6:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80070e8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80070ea:	683b      	ldr	r3, [r7, #0]
 80070ec:	441a      	add	r2, r3
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80070f2:	429a      	cmp	r2, r3
 80070f4:	d907      	bls.n	8007106 <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070fa:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8007102:	2301      	movs	r3, #1
 8007104:	e0b0      	b.n	8007268 <HAL_SD_ReadBlocks_DMA+0x1bc>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	2203      	movs	r2, #3
 800710a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	2200      	movs	r2, #0
 8007114:	62da      	str	r2, [r3, #44]	; 0x2c

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND | SDIO_IT_STBITERR));
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800711c:	68fa      	ldr	r2, [r7, #12]
 800711e:	6812      	ldr	r2, [r2, #0]
 8007120:	f443 734a 	orr.w	r3, r3, #808	; 0x328
 8007124:	f043 0302 	orr.w	r3, r3, #2
 8007128:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800712e:	4a50      	ldr	r2, [pc, #320]	; (8007270 <HAL_SD_ReadBlocks_DMA+0x1c4>)
 8007130:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007136:	4a4f      	ldr	r2, [pc, #316]	; (8007274 <HAL_SD_ReadBlocks_DMA+0x1c8>)
 8007138:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800713e:	2200      	movs	r2, #0
 8007140:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	6c18      	ldr	r0, [r3, #64]	; 0x40
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	3380      	adds	r3, #128	; 0x80
 800714c:	4619      	mov	r1, r3
 800714e:	68ba      	ldr	r2, [r7, #8]
 8007150:	683b      	ldr	r3, [r7, #0]
 8007152:	025b      	lsls	r3, r3, #9
 8007154:	089b      	lsrs	r3, r3, #2
 8007156:	f7fc f96d 	bl	8003434 <HAL_DMA_Start_IT>
 800715a:	4603      	mov	r3, r0
 800715c:	2b00      	cmp	r3, #0
 800715e:	d017      	beq.n	8007190 <HAL_SD_ReadBlocks_DMA+0xe4>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 800716e:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	4a40      	ldr	r2, [pc, #256]	; (8007278 <HAL_SD_ReadBlocks_DMA+0x1cc>)
 8007176:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800717c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	2201      	movs	r2, #1
 8007188:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800718c:	2301      	movs	r3, #1
 800718e:	e06b      	b.n	8007268 <HAL_SD_ReadBlocks_DMA+0x1bc>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 8007190:	4b3a      	ldr	r3, [pc, #232]	; (800727c <HAL_SD_ReadBlocks_DMA+0x1d0>)
 8007192:	2201      	movs	r2, #1
 8007194:	601a      	str	r2, [r3, #0]

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800719a:	2b01      	cmp	r3, #1
 800719c:	d002      	beq.n	80071a4 <HAL_SD_ReadBlocks_DMA+0xf8>
      {
        add *= 512U;
 800719e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071a0:	025b      	lsls	r3, r3, #9
 80071a2:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Set Block Size for Card */
      errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80071ac:	4618      	mov	r0, r3
 80071ae:	f002 faa3 	bl	80096f8 <SDMMC_CmdBlockLength>
 80071b2:	62f8      	str	r0, [r7, #44]	; 0x2c
      if(errorstate != HAL_SD_ERROR_NONE)
 80071b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d00f      	beq.n	80071da <HAL_SD_ReadBlocks_DMA+0x12e>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	4a2e      	ldr	r2, [pc, #184]	; (8007278 <HAL_SD_ReadBlocks_DMA+0x1cc>)
 80071c0:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80071c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071c8:	431a      	orrs	r2, r3
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	2201      	movs	r2, #1
 80071d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        return HAL_ERROR;
 80071d6:	2301      	movs	r3, #1
 80071d8:	e046      	b.n	8007268 <HAL_SD_ReadBlocks_DMA+0x1bc>
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80071da:	f04f 33ff 	mov.w	r3, #4294967295
 80071de:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 80071e0:	683b      	ldr	r3, [r7, #0]
 80071e2:	025b      	lsls	r3, r3, #9
 80071e4:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 80071e6:	2390      	movs	r3, #144	; 0x90
 80071e8:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 80071ea:	2302      	movs	r3, #2
 80071ec:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 80071ee:	2300      	movs	r3, #0
 80071f0:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 80071f2:	2301      	movs	r3, #1
 80071f4:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	f107 0210 	add.w	r2, r7, #16
 80071fe:	4611      	mov	r1, r2
 8007200:	4618      	mov	r0, r3
 8007202:	f002 fa4d 	bl	80096a0 <SDIO_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 8007206:	683b      	ldr	r3, [r7, #0]
 8007208:	2b01      	cmp	r3, #1
 800720a:	d90a      	bls.n	8007222 <HAL_SD_ReadBlocks_DMA+0x176>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	2282      	movs	r2, #130	; 0x82
 8007210:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007218:	4618      	mov	r0, r3
 800721a:	f002 fab1 	bl	8009780 <SDMMC_CmdReadMultiBlock>
 800721e:	62f8      	str	r0, [r7, #44]	; 0x2c
 8007220:	e009      	b.n	8007236 <HAL_SD_ReadBlocks_DMA+0x18a>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	2281      	movs	r2, #129	; 0x81
 8007226:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800722e:	4618      	mov	r0, r3
 8007230:	f002 fa84 	bl	800973c <SDMMC_CmdReadSingleBlock>
 8007234:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 8007236:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007238:	2b00      	cmp	r3, #0
 800723a:	d012      	beq.n	8007262 <HAL_SD_ReadBlocks_DMA+0x1b6>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	4a0d      	ldr	r2, [pc, #52]	; (8007278 <HAL_SD_ReadBlocks_DMA+0x1cc>)
 8007242:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007248:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800724a:	431a      	orrs	r2, r3
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	2201      	movs	r2, #1
 8007254:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	2200      	movs	r2, #0
 800725c:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 800725e:	2301      	movs	r3, #1
 8007260:	e002      	b.n	8007268 <HAL_SD_ReadBlocks_DMA+0x1bc>
      }

      return HAL_OK;
 8007262:	2300      	movs	r3, #0
 8007264:	e000      	b.n	8007268 <HAL_SD_ReadBlocks_DMA+0x1bc>
    }
  }
  else
  {
    return HAL_BUSY;
 8007266:	2302      	movs	r3, #2
  }
}
 8007268:	4618      	mov	r0, r3
 800726a:	3730      	adds	r7, #48	; 0x30
 800726c:	46bd      	mov	sp, r7
 800726e:	bd80      	pop	{r7, pc}
 8007270:	08007cbf 	.word	0x08007cbf
 8007274:	08007d31 	.word	0x08007d31
 8007278:	004005ff 	.word	0x004005ff
 800727c:	4225858c 	.word	0x4225858c

08007280 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8007280:	b580      	push	{r7, lr}
 8007282:	b08c      	sub	sp, #48	; 0x30
 8007284:	af00      	add	r7, sp, #0
 8007286:	60f8      	str	r0, [r7, #12]
 8007288:	60b9      	str	r1, [r7, #8]
 800728a:	607a      	str	r2, [r7, #4]
 800728c:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 8007292:	68bb      	ldr	r3, [r7, #8]
 8007294:	2b00      	cmp	r3, #0
 8007296:	d107      	bne.n	80072a8 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800729c:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80072a4:	2301      	movs	r3, #1
 80072a6:	e0ce      	b.n	8007446 <HAL_SD_WriteBlocks_DMA+0x1c6>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80072ae:	b2db      	uxtb	r3, r3
 80072b0:	2b01      	cmp	r3, #1
 80072b2:	f040 80c7 	bne.w	8007444 <HAL_SD_WriteBlocks_DMA+0x1c4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	2200      	movs	r2, #0
 80072ba:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80072bc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80072be:	683b      	ldr	r3, [r7, #0]
 80072c0:	441a      	add	r2, r3
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80072c6:	429a      	cmp	r2, r3
 80072c8:	d907      	bls.n	80072da <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072ce:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 80072d6:	2301      	movs	r3, #1
 80072d8:	e0b5      	b.n	8007446 <HAL_SD_WriteBlocks_DMA+0x1c6>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	2203      	movs	r2, #3
 80072de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	2200      	movs	r2, #0
 80072e8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable SD Error interrupts */
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80072f0:	68fa      	ldr	r2, [r7, #12]
 80072f2:	6812      	ldr	r2, [r2, #0]
 80072f4:	f443 7306 	orr.w	r3, r3, #536	; 0x218
 80072f8:	f043 0302 	orr.w	r3, r3, #2
 80072fc:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007302:	4a53      	ldr	r2, [pc, #332]	; (8007450 <HAL_SD_WriteBlocks_DMA+0x1d0>)
 8007304:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800730a:	4a52      	ldr	r2, [pc, #328]	; (8007454 <HAL_SD_WriteBlocks_DMA+0x1d4>)
 800730c:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007312:	2200      	movs	r2, #0
 8007314:	651a      	str	r2, [r3, #80]	; 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800731a:	2b01      	cmp	r3, #1
 800731c:	d002      	beq.n	8007324 <HAL_SD_WriteBlocks_DMA+0xa4>
    {
      add *= 512U;
 800731e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007320:	025b      	lsls	r3, r3, #9
 8007322:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Set Block Size for Card */
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	f44f 7100 	mov.w	r1, #512	; 0x200
 800732c:	4618      	mov	r0, r3
 800732e:	f002 f9e3 	bl	80096f8 <SDMMC_CmdBlockLength>
 8007332:	62f8      	str	r0, [r7, #44]	; 0x2c
    if(errorstate != HAL_SD_ERROR_NONE)
 8007334:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007336:	2b00      	cmp	r3, #0
 8007338:	d00f      	beq.n	800735a <HAL_SD_WriteBlocks_DMA+0xda>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	4a46      	ldr	r2, [pc, #280]	; (8007458 <HAL_SD_WriteBlocks_DMA+0x1d8>)
 8007340:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007346:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007348:	431a      	orrs	r2, r3
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	2201      	movs	r2, #1
 8007352:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8007356:	2301      	movs	r3, #1
 8007358:	e075      	b.n	8007446 <HAL_SD_WriteBlocks_DMA+0x1c6>
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 800735a:	683b      	ldr	r3, [r7, #0]
 800735c:	2b01      	cmp	r3, #1
 800735e:	d90a      	bls.n	8007376 <HAL_SD_WriteBlocks_DMA+0xf6>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	22a0      	movs	r2, #160	; 0xa0
 8007364:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800736c:	4618      	mov	r0, r3
 800736e:	f002 fa4b 	bl	8009808 <SDMMC_CmdWriteMultiBlock>
 8007372:	62f8      	str	r0, [r7, #44]	; 0x2c
 8007374:	e009      	b.n	800738a <HAL_SD_WriteBlocks_DMA+0x10a>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	2290      	movs	r2, #144	; 0x90
 800737a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007382:	4618      	mov	r0, r3
 8007384:	f002 fa1e 	bl	80097c4 <SDMMC_CmdWriteSingleBlock>
 8007388:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800738a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800738c:	2b00      	cmp	r3, #0
 800738e:	d012      	beq.n	80073b6 <HAL_SD_WriteBlocks_DMA+0x136>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	4a30      	ldr	r2, [pc, #192]	; (8007458 <HAL_SD_WriteBlocks_DMA+0x1d8>)
 8007396:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800739c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800739e:	431a      	orrs	r2, r3
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	2201      	movs	r2, #1
 80073a8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	2200      	movs	r2, #0
 80073b0:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80073b2:	2301      	movs	r3, #1
 80073b4:	e047      	b.n	8007446 <HAL_SD_WriteBlocks_DMA+0x1c6>
    }

    /* Enable SDIO DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 80073b6:	4b29      	ldr	r3, [pc, #164]	; (800745c <HAL_SD_WriteBlocks_DMA+0x1dc>)
 80073b8:	2201      	movs	r2, #1
 80073ba:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 80073c0:	68b9      	ldr	r1, [r7, #8]
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	3380      	adds	r3, #128	; 0x80
 80073c8:	461a      	mov	r2, r3
 80073ca:	683b      	ldr	r3, [r7, #0]
 80073cc:	025b      	lsls	r3, r3, #9
 80073ce:	089b      	lsrs	r3, r3, #2
 80073d0:	f7fc f830 	bl	8003434 <HAL_DMA_Start_IT>
 80073d4:	4603      	mov	r3, r0
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d01c      	beq.n	8007414 <HAL_SD_WriteBlocks_DMA+0x194>
    {
#if defined(SDIO_STA_STBITERR)
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80073e0:	68fa      	ldr	r2, [r7, #12]
 80073e2:	6812      	ldr	r2, [r2, #0]
 80073e4:	f423 7306 	bic.w	r3, r3, #536	; 0x218
 80073e8:	f023 0302 	bic.w	r3, r3, #2
 80073ec:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
#endif /* SDIO_STA_STBITERR */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	4a19      	ldr	r2, [pc, #100]	; (8007458 <HAL_SD_WriteBlocks_DMA+0x1d8>)
 80073f4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073fa:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	2201      	movs	r2, #1
 8007406:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	2200      	movs	r2, #0
 800740e:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8007410:	2301      	movs	r3, #1
 8007412:	e018      	b.n	8007446 <HAL_SD_WriteBlocks_DMA+0x1c6>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8007414:	f04f 33ff 	mov.w	r3, #4294967295
 8007418:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800741a:	683b      	ldr	r3, [r7, #0]
 800741c:	025b      	lsls	r3, r3, #9
 800741e:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8007420:	2390      	movs	r3, #144	; 0x90
 8007422:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 8007424:	2300      	movs	r3, #0
 8007426:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8007428:	2300      	movs	r3, #0
 800742a:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 800742c:	2301      	movs	r3, #1
 800742e:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	f107 0210 	add.w	r2, r7, #16
 8007438:	4611      	mov	r1, r2
 800743a:	4618      	mov	r0, r3
 800743c:	f002 f930 	bl	80096a0 <SDIO_ConfigData>

      return HAL_OK;
 8007440:	2300      	movs	r3, #0
 8007442:	e000      	b.n	8007446 <HAL_SD_WriteBlocks_DMA+0x1c6>
    }
  }
  else
  {
    return HAL_BUSY;
 8007444:	2302      	movs	r3, #2
  }
}
 8007446:	4618      	mov	r0, r3
 8007448:	3730      	adds	r7, #48	; 0x30
 800744a:	46bd      	mov	sp, r7
 800744c:	bd80      	pop	{r7, pc}
 800744e:	bf00      	nop
 8007450:	08007c95 	.word	0x08007c95
 8007454:	08007d31 	.word	0x08007d31
 8007458:	004005ff 	.word	0x004005ff
 800745c:	4225858c 	.word	0x4225858c

08007460 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 8007460:	b580      	push	{r7, lr}
 8007462:	b084      	sub	sp, #16
 8007464:	af00      	add	r7, sp, #0
 8007466:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800746c:	60fb      	str	r3, [r7, #12]

  /* Check for SDIO interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007474:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007478:	2b00      	cmp	r3, #0
 800747a:	d008      	beq.n	800748e <HAL_SD_IRQHandler+0x2e>
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	f003 0308 	and.w	r3, r3, #8
 8007482:	2b00      	cmp	r3, #0
 8007484:	d003      	beq.n	800748e <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 8007486:	6878      	ldr	r0, [r7, #4]
 8007488:	f000 fff6 	bl	8008478 <SD_Read_IT>
 800748c:	e165      	b.n	800775a <HAL_SD_IRQHandler+0x2fa>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) != RESET)
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007494:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007498:	2b00      	cmp	r3, #0
 800749a:	f000 808f 	beq.w	80075bc <HAL_SD_IRQHandler+0x15c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DATAEND);
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80074a6:	639a      	str	r2, [r3, #56]	; 0x38

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80074ae:	687a      	ldr	r2, [r7, #4]
 80074b0:	6812      	ldr	r2, [r2, #0]
 80074b2:	f423 4343 	bic.w	r3, r3, #49920	; 0xc300
 80074b6:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 80074ba:	63d3      	str	r3, [r2, #60]	; 0x3c
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF);
#endif /* SDIO_STA_STBITERR */

    hsd->Instance->DCTRL &= ~(SDIO_DCTRL_DTEN);
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	f022 0201 	bic.w	r2, r2, #1
 80074ca:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	f003 0308 	and.w	r3, r3, #8
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	d039      	beq.n	800754a <HAL_SD_IRQHandler+0xea>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	f003 0302 	and.w	r3, r3, #2
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d104      	bne.n	80074ea <HAL_SD_IRQHandler+0x8a>
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	f003 0320 	and.w	r3, r3, #32
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	d011      	beq.n	800750e <HAL_SD_IRQHandler+0xae>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	4618      	mov	r0, r3
 80074f0:	f002 f9ac 	bl	800984c <SDMMC_CmdStopTransfer>
 80074f4:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 80074f6:	68bb      	ldr	r3, [r7, #8]
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	d008      	beq.n	800750e <HAL_SD_IRQHandler+0xae>
        {
          hsd->ErrorCode |= errorstate;
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007500:	68bb      	ldr	r3, [r7, #8]
 8007502:	431a      	orrs	r2, r3
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 8007508:	6878      	ldr	r0, [r7, #4]
 800750a:	f000 f943 	bl	8007794 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	f240 523a 	movw	r2, #1338	; 0x53a
 8007516:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	2201      	movs	r2, #1
 800751c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	2200      	movs	r2, #0
 8007524:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	f003 0301 	and.w	r3, r3, #1
 800752c:	2b00      	cmp	r3, #0
 800752e:	d104      	bne.n	800753a <HAL_SD_IRQHandler+0xda>
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	f003 0302 	and.w	r3, r3, #2
 8007536:	2b00      	cmp	r3, #0
 8007538:	d003      	beq.n	8007542 <HAL_SD_IRQHandler+0xe2>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 800753a:	6878      	ldr	r0, [r7, #4]
 800753c:	f000 f920 	bl	8007780 <HAL_SD_RxCpltCallback>
 8007540:	e10b      	b.n	800775a <HAL_SD_IRQHandler+0x2fa>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 8007542:	6878      	ldr	r0, [r7, #4]
 8007544:	f000 f912 	bl	800776c <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8007548:	e107      	b.n	800775a <HAL_SD_IRQHandler+0x2fa>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007550:	2b00      	cmp	r3, #0
 8007552:	f000 8102 	beq.w	800775a <HAL_SD_IRQHandler+0x2fa>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	f003 0320 	and.w	r3, r3, #32
 800755c:	2b00      	cmp	r3, #0
 800755e:	d011      	beq.n	8007584 <HAL_SD_IRQHandler+0x124>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	4618      	mov	r0, r3
 8007566:	f002 f971 	bl	800984c <SDMMC_CmdStopTransfer>
 800756a:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800756c:	68bb      	ldr	r3, [r7, #8]
 800756e:	2b00      	cmp	r3, #0
 8007570:	d008      	beq.n	8007584 <HAL_SD_IRQHandler+0x124>
          hsd->ErrorCode |= errorstate;
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007576:	68bb      	ldr	r3, [r7, #8]
 8007578:	431a      	orrs	r2, r3
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 800757e:	6878      	ldr	r0, [r7, #4]
 8007580:	f000 f908 	bl	8007794 <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	f003 0301 	and.w	r3, r3, #1
 800758a:	2b00      	cmp	r3, #0
 800758c:	f040 80e5 	bne.w	800775a <HAL_SD_IRQHandler+0x2fa>
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	f003 0302 	and.w	r3, r3, #2
 8007596:	2b00      	cmp	r3, #0
 8007598:	f040 80df 	bne.w	800775a <HAL_SD_IRQHandler+0x2fa>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	f022 0208 	bic.w	r2, r2, #8
 80075aa:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	2201      	movs	r2, #1
 80075b0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 80075b4:	6878      	ldr	r0, [r7, #4]
 80075b6:	f000 f8d9 	bl	800776c <HAL_SD_TxCpltCallback>
}
 80075ba:	e0ce      	b.n	800775a <HAL_SD_IRQHandler+0x2fa>
  else if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80075c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	d008      	beq.n	80075dc <HAL_SD_IRQHandler+0x17c>
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	f003 0308 	and.w	r3, r3, #8
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	d003      	beq.n	80075dc <HAL_SD_IRQHandler+0x17c>
    SD_Write_IT(hsd);
 80075d4:	6878      	ldr	r0, [r7, #4]
 80075d6:	f000 ffa0 	bl	800851a <SD_Write_IT>
 80075da:	e0be      	b.n	800775a <HAL_SD_IRQHandler+0x2fa>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_RXOVERR | SDIO_FLAG_TXUNDERR | SDIO_FLAG_STBITERR) != RESET)
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80075e2:	f240 233a 	movw	r3, #570	; 0x23a
 80075e6:	4013      	ands	r3, r2
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	f000 80b6 	beq.w	800775a <HAL_SD_IRQHandler+0x2fa>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL) != RESET)
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80075f4:	f003 0302 	and.w	r3, r3, #2
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	d005      	beq.n	8007608 <HAL_SD_IRQHandler+0x1a8>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007600:	f043 0202 	orr.w	r2, r3, #2
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) != RESET)
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800760e:	f003 0308 	and.w	r3, r3, #8
 8007612:	2b00      	cmp	r3, #0
 8007614:	d005      	beq.n	8007622 <HAL_SD_IRQHandler+0x1c2>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800761a:	f043 0208 	orr.w	r2, r3, #8
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR) != RESET)
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007628:	f003 0320 	and.w	r3, r3, #32
 800762c:	2b00      	cmp	r3, #0
 800762e:	d005      	beq.n	800763c <HAL_SD_IRQHandler+0x1dc>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007634:	f043 0220 	orr.w	r2, r3, #32
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR) != RESET)
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007642:	f003 0310 	and.w	r3, r3, #16
 8007646:	2b00      	cmp	r3, #0
 8007648:	d005      	beq.n	8007656 <HAL_SD_IRQHandler+0x1f6>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800764e:	f043 0210 	orr.w	r2, r3, #16
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR) != RESET)
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800765c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007660:	2b00      	cmp	r3, #0
 8007662:	d005      	beq.n	8007670 <HAL_SD_IRQHandler+0x210>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007668:	f043 0208 	orr.w	r2, r3, #8
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS | SDIO_FLAG_STBITERR);
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	f240 723a 	movw	r2, #1850	; 0x73a
 8007678:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007680:	687a      	ldr	r2, [r7, #4]
 8007682:	6812      	ldr	r2, [r2, #0]
 8007684:	f423 734e 	bic.w	r3, r3, #824	; 0x338
 8007688:	f023 0302 	bic.w	r3, r3, #2
 800768c:	63d3      	str	r3, [r2, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	4618      	mov	r0, r3
 8007694:	f002 f8da 	bl	800984c <SDMMC_CmdStopTransfer>
 8007698:	4602      	mov	r2, r0
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800769e:	431a      	orrs	r2, r3
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	f003 0308 	and.w	r3, r3, #8
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	d00a      	beq.n	80076c4 <HAL_SD_IRQHandler+0x264>
      hsd->State = HAL_SD_STATE_READY;
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	2201      	movs	r2, #1
 80076b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	2200      	movs	r2, #0
 80076ba:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 80076bc:	6878      	ldr	r0, [r7, #4]
 80076be:	f000 f869 	bl	8007794 <HAL_SD_ErrorCallback>
}
 80076c2:	e04a      	b.n	800775a <HAL_SD_IRQHandler+0x2fa>
    else if((context & SD_CONTEXT_DMA) != 0U)
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	d045      	beq.n	800775a <HAL_SD_IRQHandler+0x2fa>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	f003 0310 	and.w	r3, r3, #16
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	d104      	bne.n	80076e2 <HAL_SD_IRQHandler+0x282>
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	f003 0320 	and.w	r3, r3, #32
 80076de:	2b00      	cmp	r3, #0
 80076e0:	d011      	beq.n	8007706 <HAL_SD_IRQHandler+0x2a6>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80076e6:	4a1f      	ldr	r2, [pc, #124]	; (8007764 <HAL_SD_IRQHandler+0x304>)
 80076e8:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80076ee:	4618      	mov	r0, r3
 80076f0:	f7fb fef8 	bl	80034e4 <HAL_DMA_Abort_IT>
 80076f4:	4603      	mov	r3, r0
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	d02f      	beq.n	800775a <HAL_SD_IRQHandler+0x2fa>
          SD_DMATxAbort(hsd->hdmatx);
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80076fe:	4618      	mov	r0, r3
 8007700:	f000 fb68 	bl	8007dd4 <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8007704:	e029      	b.n	800775a <HAL_SD_IRQHandler+0x2fa>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	f003 0301 	and.w	r3, r3, #1
 800770c:	2b00      	cmp	r3, #0
 800770e:	d104      	bne.n	800771a <HAL_SD_IRQHandler+0x2ba>
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	f003 0302 	and.w	r3, r3, #2
 8007716:	2b00      	cmp	r3, #0
 8007718:	d011      	beq.n	800773e <HAL_SD_IRQHandler+0x2de>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800771e:	4a12      	ldr	r2, [pc, #72]	; (8007768 <HAL_SD_IRQHandler+0x308>)
 8007720:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007726:	4618      	mov	r0, r3
 8007728:	f7fb fedc 	bl	80034e4 <HAL_DMA_Abort_IT>
 800772c:	4603      	mov	r3, r0
 800772e:	2b00      	cmp	r3, #0
 8007730:	d013      	beq.n	800775a <HAL_SD_IRQHandler+0x2fa>
          SD_DMARxAbort(hsd->hdmarx);
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007736:	4618      	mov	r0, r3
 8007738:	f000 fb83 	bl	8007e42 <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 800773c:	e00d      	b.n	800775a <HAL_SD_IRQHandler+0x2fa>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	2200      	movs	r2, #0
 8007742:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	2201      	movs	r2, #1
 8007748:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	2200      	movs	r2, #0
 8007750:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 8007752:	6878      	ldr	r0, [r7, #4]
 8007754:	f000 f828 	bl	80077a8 <HAL_SD_AbortCallback>
}
 8007758:	e7ff      	b.n	800775a <HAL_SD_IRQHandler+0x2fa>
 800775a:	bf00      	nop
 800775c:	3710      	adds	r7, #16
 800775e:	46bd      	mov	sp, r7
 8007760:	bd80      	pop	{r7, pc}
 8007762:	bf00      	nop
 8007764:	08007dd5 	.word	0x08007dd5
 8007768:	08007e43 	.word	0x08007e43

0800776c <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: Pointer to SD handle
  * @retval None
  */
__weak void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 800776c:	b480      	push	{r7}
 800776e:	b083      	sub	sp, #12
 8007770:	af00      	add	r7, sp, #0
 8007772:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_TxCpltCallback can be implemented in the user file
   */
}
 8007774:	bf00      	nop
 8007776:	370c      	adds	r7, #12
 8007778:	46bd      	mov	sp, r7
 800777a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800777e:	4770      	bx	lr

08007780 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 8007780:	b480      	push	{r7}
 8007782:	b083      	sub	sp, #12
 8007784:	af00      	add	r7, sp, #0
 8007786:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_RxCpltCallback can be implemented in the user file
   */
}
 8007788:	bf00      	nop
 800778a:	370c      	adds	r7, #12
 800778c:	46bd      	mov	sp, r7
 800778e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007792:	4770      	bx	lr

08007794 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8007794:	b480      	push	{r7}
 8007796:	b083      	sub	sp, #12
 8007798:	af00      	add	r7, sp, #0
 800779a:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 800779c:	bf00      	nop
 800779e:	370c      	adds	r7, #12
 80077a0:	46bd      	mov	sp, r7
 80077a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077a6:	4770      	bx	lr

080077a8 <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 80077a8:	b480      	push	{r7}
 80077aa:	b083      	sub	sp, #12
 80077ac:	af00      	add	r7, sp, #0
 80077ae:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_AbortCallback can be implemented in the user file
   */
}
 80077b0:	bf00      	nop
 80077b2:	370c      	adds	r7, #12
 80077b4:	46bd      	mov	sp, r7
 80077b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ba:	4770      	bx	lr

080077bc <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 80077bc:	b480      	push	{r7}
 80077be:	b083      	sub	sp, #12
 80077c0:	af00      	add	r7, sp, #0
 80077c2:	6078      	str	r0, [r7, #4]
 80077c4:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80077ca:	0f9b      	lsrs	r3, r3, #30
 80077cc:	b2da      	uxtb	r2, r3
 80077ce:	683b      	ldr	r3, [r7, #0]
 80077d0:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80077d6:	0e9b      	lsrs	r3, r3, #26
 80077d8:	b2db      	uxtb	r3, r3
 80077da:	f003 030f 	and.w	r3, r3, #15
 80077de:	b2da      	uxtb	r2, r3
 80077e0:	683b      	ldr	r3, [r7, #0]
 80077e2:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80077e8:	0e1b      	lsrs	r3, r3, #24
 80077ea:	b2db      	uxtb	r3, r3
 80077ec:	f003 0303 	and.w	r3, r3, #3
 80077f0:	b2da      	uxtb	r2, r3
 80077f2:	683b      	ldr	r3, [r7, #0]
 80077f4:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80077fa:	0c1b      	lsrs	r3, r3, #16
 80077fc:	b2da      	uxtb	r2, r3
 80077fe:	683b      	ldr	r3, [r7, #0]
 8007800:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007806:	0a1b      	lsrs	r3, r3, #8
 8007808:	b2da      	uxtb	r2, r3
 800780a:	683b      	ldr	r3, [r7, #0]
 800780c:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007812:	b2da      	uxtb	r2, r3
 8007814:	683b      	ldr	r3, [r7, #0]
 8007816:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800781c:	0d1b      	lsrs	r3, r3, #20
 800781e:	b29a      	uxth	r2, r3
 8007820:	683b      	ldr	r3, [r7, #0]
 8007822:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007828:	0c1b      	lsrs	r3, r3, #16
 800782a:	b2db      	uxtb	r3, r3
 800782c:	f003 030f 	and.w	r3, r3, #15
 8007830:	b2da      	uxtb	r2, r3
 8007832:	683b      	ldr	r3, [r7, #0]
 8007834:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800783a:	0bdb      	lsrs	r3, r3, #15
 800783c:	b2db      	uxtb	r3, r3
 800783e:	f003 0301 	and.w	r3, r3, #1
 8007842:	b2da      	uxtb	r2, r3
 8007844:	683b      	ldr	r3, [r7, #0]
 8007846:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800784c:	0b9b      	lsrs	r3, r3, #14
 800784e:	b2db      	uxtb	r3, r3
 8007850:	f003 0301 	and.w	r3, r3, #1
 8007854:	b2da      	uxtb	r2, r3
 8007856:	683b      	ldr	r3, [r7, #0]
 8007858:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800785e:	0b5b      	lsrs	r3, r3, #13
 8007860:	b2db      	uxtb	r3, r3
 8007862:	f003 0301 	and.w	r3, r3, #1
 8007866:	b2da      	uxtb	r2, r3
 8007868:	683b      	ldr	r3, [r7, #0]
 800786a:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007870:	0b1b      	lsrs	r3, r3, #12
 8007872:	b2db      	uxtb	r3, r3
 8007874:	f003 0301 	and.w	r3, r3, #1
 8007878:	b2da      	uxtb	r2, r3
 800787a:	683b      	ldr	r3, [r7, #0]
 800787c:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800787e:	683b      	ldr	r3, [r7, #0]
 8007880:	2200      	movs	r2, #0
 8007882:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007888:	2b00      	cmp	r3, #0
 800788a:	d163      	bne.n	8007954 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007890:	009a      	lsls	r2, r3, #2
 8007892:	f640 73fc 	movw	r3, #4092	; 0xffc
 8007896:	4013      	ands	r3, r2
 8007898:	687a      	ldr	r2, [r7, #4]
 800789a:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 800789c:	0f92      	lsrs	r2, r2, #30
 800789e:	431a      	orrs	r2, r3
 80078a0:	683b      	ldr	r3, [r7, #0]
 80078a2:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80078a8:	0edb      	lsrs	r3, r3, #27
 80078aa:	b2db      	uxtb	r3, r3
 80078ac:	f003 0307 	and.w	r3, r3, #7
 80078b0:	b2da      	uxtb	r2, r3
 80078b2:	683b      	ldr	r3, [r7, #0]
 80078b4:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80078ba:	0e1b      	lsrs	r3, r3, #24
 80078bc:	b2db      	uxtb	r3, r3
 80078be:	f003 0307 	and.w	r3, r3, #7
 80078c2:	b2da      	uxtb	r2, r3
 80078c4:	683b      	ldr	r3, [r7, #0]
 80078c6:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80078cc:	0d5b      	lsrs	r3, r3, #21
 80078ce:	b2db      	uxtb	r3, r3
 80078d0:	f003 0307 	and.w	r3, r3, #7
 80078d4:	b2da      	uxtb	r2, r3
 80078d6:	683b      	ldr	r3, [r7, #0]
 80078d8:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80078de:	0c9b      	lsrs	r3, r3, #18
 80078e0:	b2db      	uxtb	r3, r3
 80078e2:	f003 0307 	and.w	r3, r3, #7
 80078e6:	b2da      	uxtb	r2, r3
 80078e8:	683b      	ldr	r3, [r7, #0]
 80078ea:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80078f0:	0bdb      	lsrs	r3, r3, #15
 80078f2:	b2db      	uxtb	r3, r3
 80078f4:	f003 0307 	and.w	r3, r3, #7
 80078f8:	b2da      	uxtb	r2, r3
 80078fa:	683b      	ldr	r3, [r7, #0]
 80078fc:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 80078fe:	683b      	ldr	r3, [r7, #0]
 8007900:	691b      	ldr	r3, [r3, #16]
 8007902:	1c5a      	adds	r2, r3, #1
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8007908:	683b      	ldr	r3, [r7, #0]
 800790a:	7e1b      	ldrb	r3, [r3, #24]
 800790c:	b2db      	uxtb	r3, r3
 800790e:	f003 0307 	and.w	r3, r3, #7
 8007912:	3302      	adds	r3, #2
 8007914:	2201      	movs	r2, #1
 8007916:	fa02 f303 	lsl.w	r3, r2, r3
 800791a:	687a      	ldr	r2, [r7, #4]
 800791c:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800791e:	fb02 f203 	mul.w	r2, r2, r3
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8007926:	683b      	ldr	r3, [r7, #0]
 8007928:	7a1b      	ldrb	r3, [r3, #8]
 800792a:	b2db      	uxtb	r3, r3
 800792c:	f003 030f 	and.w	r3, r3, #15
 8007930:	2201      	movs	r2, #1
 8007932:	409a      	lsls	r2, r3
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800793c:	687a      	ldr	r2, [r7, #4]
 800793e:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8007940:	0a52      	lsrs	r2, r2, #9
 8007942:	fb02 f203 	mul.w	r2, r2, r3
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007950:	661a      	str	r2, [r3, #96]	; 0x60
 8007952:	e031      	b.n	80079b8 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007958:	2b01      	cmp	r3, #1
 800795a:	d11d      	bne.n	8007998 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007960:	041b      	lsls	r3, r3, #16
 8007962:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800796a:	0c1b      	lsrs	r3, r3, #16
 800796c:	431a      	orrs	r2, r3
 800796e:	683b      	ldr	r3, [r7, #0]
 8007970:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8007972:	683b      	ldr	r3, [r7, #0]
 8007974:	691b      	ldr	r3, [r3, #16]
 8007976:	3301      	adds	r3, #1
 8007978:	029a      	lsls	r2, r3, #10
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	f44f 7200 	mov.w	r2, #512	; 0x200
 800798c:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	661a      	str	r2, [r3, #96]	; 0x60
 8007996:	e00f      	b.n	80079b8 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	4a58      	ldr	r2, [pc, #352]	; (8007b00 <HAL_SD_GetCardCSD+0x344>)
 800799e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079a4:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	2201      	movs	r2, #1
 80079b0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80079b4:	2301      	movs	r3, #1
 80079b6:	e09d      	b.n	8007af4 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80079bc:	0b9b      	lsrs	r3, r3, #14
 80079be:	b2db      	uxtb	r3, r3
 80079c0:	f003 0301 	and.w	r3, r3, #1
 80079c4:	b2da      	uxtb	r2, r3
 80079c6:	683b      	ldr	r3, [r7, #0]
 80079c8:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80079ce:	09db      	lsrs	r3, r3, #7
 80079d0:	b2db      	uxtb	r3, r3
 80079d2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80079d6:	b2da      	uxtb	r2, r3
 80079d8:	683b      	ldr	r3, [r7, #0]
 80079da:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80079e0:	b2db      	uxtb	r3, r3
 80079e2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80079e6:	b2da      	uxtb	r2, r3
 80079e8:	683b      	ldr	r3, [r7, #0]
 80079ea:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80079f0:	0fdb      	lsrs	r3, r3, #31
 80079f2:	b2da      	uxtb	r2, r3
 80079f4:	683b      	ldr	r3, [r7, #0]
 80079f6:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80079fc:	0f5b      	lsrs	r3, r3, #29
 80079fe:	b2db      	uxtb	r3, r3
 8007a00:	f003 0303 	and.w	r3, r3, #3
 8007a04:	b2da      	uxtb	r2, r3
 8007a06:	683b      	ldr	r3, [r7, #0]
 8007a08:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a0e:	0e9b      	lsrs	r3, r3, #26
 8007a10:	b2db      	uxtb	r3, r3
 8007a12:	f003 0307 	and.w	r3, r3, #7
 8007a16:	b2da      	uxtb	r2, r3
 8007a18:	683b      	ldr	r3, [r7, #0]
 8007a1a:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a20:	0d9b      	lsrs	r3, r3, #22
 8007a22:	b2db      	uxtb	r3, r3
 8007a24:	f003 030f 	and.w	r3, r3, #15
 8007a28:	b2da      	uxtb	r2, r3
 8007a2a:	683b      	ldr	r3, [r7, #0]
 8007a2c:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a32:	0d5b      	lsrs	r3, r3, #21
 8007a34:	b2db      	uxtb	r3, r3
 8007a36:	f003 0301 	and.w	r3, r3, #1
 8007a3a:	b2da      	uxtb	r2, r3
 8007a3c:	683b      	ldr	r3, [r7, #0]
 8007a3e:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8007a42:	683b      	ldr	r3, [r7, #0]
 8007a44:	2200      	movs	r2, #0
 8007a46:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a4e:	0c1b      	lsrs	r3, r3, #16
 8007a50:	b2db      	uxtb	r3, r3
 8007a52:	f003 0301 	and.w	r3, r3, #1
 8007a56:	b2da      	uxtb	r2, r3
 8007a58:	683b      	ldr	r3, [r7, #0]
 8007a5a:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a62:	0bdb      	lsrs	r3, r3, #15
 8007a64:	b2db      	uxtb	r3, r3
 8007a66:	f003 0301 	and.w	r3, r3, #1
 8007a6a:	b2da      	uxtb	r2, r3
 8007a6c:	683b      	ldr	r3, [r7, #0]
 8007a6e:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a76:	0b9b      	lsrs	r3, r3, #14
 8007a78:	b2db      	uxtb	r3, r3
 8007a7a:	f003 0301 	and.w	r3, r3, #1
 8007a7e:	b2da      	uxtb	r2, r3
 8007a80:	683b      	ldr	r3, [r7, #0]
 8007a82:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a8a:	0b5b      	lsrs	r3, r3, #13
 8007a8c:	b2db      	uxtb	r3, r3
 8007a8e:	f003 0301 	and.w	r3, r3, #1
 8007a92:	b2da      	uxtb	r2, r3
 8007a94:	683b      	ldr	r3, [r7, #0]
 8007a96:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a9e:	0b1b      	lsrs	r3, r3, #12
 8007aa0:	b2db      	uxtb	r3, r3
 8007aa2:	f003 0301 	and.w	r3, r3, #1
 8007aa6:	b2da      	uxtb	r2, r3
 8007aa8:	683b      	ldr	r3, [r7, #0]
 8007aaa:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007ab2:	0a9b      	lsrs	r3, r3, #10
 8007ab4:	b2db      	uxtb	r3, r3
 8007ab6:	f003 0303 	and.w	r3, r3, #3
 8007aba:	b2da      	uxtb	r2, r3
 8007abc:	683b      	ldr	r3, [r7, #0]
 8007abe:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007ac6:	0a1b      	lsrs	r3, r3, #8
 8007ac8:	b2db      	uxtb	r3, r3
 8007aca:	f003 0303 	and.w	r3, r3, #3
 8007ace:	b2da      	uxtb	r2, r3
 8007ad0:	683b      	ldr	r3, [r7, #0]
 8007ad2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007ada:	085b      	lsrs	r3, r3, #1
 8007adc:	b2db      	uxtb	r3, r3
 8007ade:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007ae2:	b2da      	uxtb	r2, r3
 8007ae4:	683b      	ldr	r3, [r7, #0]
 8007ae6:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 8007aea:	683b      	ldr	r3, [r7, #0]
 8007aec:	2201      	movs	r2, #1
 8007aee:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8007af2:	2300      	movs	r3, #0
}
 8007af4:	4618      	mov	r0, r3
 8007af6:	370c      	adds	r7, #12
 8007af8:	46bd      	mov	sp, r7
 8007afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007afe:	4770      	bx	lr
 8007b00:	004005ff 	.word	0x004005ff

08007b04 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8007b04:	b480      	push	{r7}
 8007b06:	b083      	sub	sp, #12
 8007b08:	af00      	add	r7, sp, #0
 8007b0a:	6078      	str	r0, [r7, #4]
 8007b0c:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007b12:	683b      	ldr	r3, [r7, #0]
 8007b14:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007b1a:	683b      	ldr	r3, [r7, #0]
 8007b1c:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007b22:	683b      	ldr	r3, [r7, #0]
 8007b24:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007b2a:	683b      	ldr	r3, [r7, #0]
 8007b2c:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007b32:	683b      	ldr	r3, [r7, #0]
 8007b34:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8007b3a:	683b      	ldr	r3, [r7, #0]
 8007b3c:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8007b42:	683b      	ldr	r3, [r7, #0]
 8007b44:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8007b4a:	683b      	ldr	r3, [r7, #0]
 8007b4c:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8007b4e:	2300      	movs	r3, #0
}
 8007b50:	4618      	mov	r0, r3
 8007b52:	370c      	adds	r7, #12
 8007b54:	46bd      	mov	sp, r7
 8007b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b5a:	4770      	bx	lr

08007b5c <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8007b5c:	b5b0      	push	{r4, r5, r7, lr}
 8007b5e:	b08e      	sub	sp, #56	; 0x38
 8007b60:	af04      	add	r7, sp, #16
 8007b62:	6078      	str	r0, [r7, #4]
 8007b64:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	2203      	movs	r2, #3
 8007b6a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007b72:	2b03      	cmp	r3, #3
 8007b74:	d02e      	beq.n	8007bd4 <HAL_SD_ConfigWideBusOperation+0x78>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 8007b76:	683b      	ldr	r3, [r7, #0]
 8007b78:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007b7c:	d106      	bne.n	8007b8c <HAL_SD_ConfigWideBusOperation+0x30>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b82:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	639a      	str	r2, [r3, #56]	; 0x38
 8007b8a:	e029      	b.n	8007be0 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 8007b8c:	683b      	ldr	r3, [r7, #0]
 8007b8e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007b92:	d10a      	bne.n	8007baa <HAL_SD_ConfigWideBusOperation+0x4e>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8007b94:	6878      	ldr	r0, [r7, #4]
 8007b96:	f000 fb0f 	bl	80081b8 <SD_WideBus_Enable>
 8007b9a:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007ba0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ba2:	431a      	orrs	r2, r3
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	639a      	str	r2, [r3, #56]	; 0x38
 8007ba8:	e01a      	b.n	8007be0 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 8007baa:	683b      	ldr	r3, [r7, #0]
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	d10a      	bne.n	8007bc6 <HAL_SD_ConfigWideBusOperation+0x6a>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8007bb0:	6878      	ldr	r0, [r7, #4]
 8007bb2:	f000 fb4c 	bl	800824e <SD_WideBus_Disable>
 8007bb6:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007bbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bbe:	431a      	orrs	r2, r3
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	639a      	str	r2, [r3, #56]	; 0x38
 8007bc4:	e00c      	b.n	8007be0 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007bca:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	639a      	str	r2, [r3, #56]	; 0x38
 8007bd2:	e005      	b.n	8007be0 <HAL_SD_ConfigWideBusOperation+0x84>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007bd8:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	d009      	beq.n	8007bfc <HAL_SD_ConfigWideBusOperation+0xa0>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	4a18      	ldr	r2, [pc, #96]	; (8007c50 <HAL_SD_ConfigWideBusOperation+0xf4>)
 8007bee:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	2201      	movs	r2, #1
 8007bf4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8007bf8:	2301      	movs	r3, #1
 8007bfa:	e024      	b.n	8007c46 <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	685b      	ldr	r3, [r3, #4]
 8007c00:	60fb      	str	r3, [r7, #12]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	689b      	ldr	r3, [r3, #8]
 8007c06:	613b      	str	r3, [r7, #16]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	68db      	ldr	r3, [r3, #12]
 8007c0c:	617b      	str	r3, [r7, #20]
    Init.BusWide             = WideMode;
 8007c0e:	683b      	ldr	r3, [r7, #0]
 8007c10:	61bb      	str	r3, [r7, #24]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	695b      	ldr	r3, [r3, #20]
 8007c16:	61fb      	str	r3, [r7, #28]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	699b      	ldr	r3, [r3, #24]
 8007c1c:	623b      	str	r3, [r7, #32]
    (void)SDIO_Init(hsd->Instance, Init);
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	681d      	ldr	r5, [r3, #0]
 8007c22:	466c      	mov	r4, sp
 8007c24:	f107 0318 	add.w	r3, r7, #24
 8007c28:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8007c2c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8007c30:	f107 030c 	add.w	r3, r7, #12
 8007c34:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007c36:	4628      	mov	r0, r5
 8007c38:	f001 fc82 	bl	8009540 <SDIO_Init>
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	2201      	movs	r2, #1
 8007c40:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8007c44:	2300      	movs	r3, #0
}
 8007c46:	4618      	mov	r0, r3
 8007c48:	3728      	adds	r7, #40	; 0x28
 8007c4a:	46bd      	mov	sp, r7
 8007c4c:	bdb0      	pop	{r4, r5, r7, pc}
 8007c4e:	bf00      	nop
 8007c50:	004005ff 	.word	0x004005ff

08007c54 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8007c54:	b580      	push	{r7, lr}
 8007c56:	b086      	sub	sp, #24
 8007c58:	af00      	add	r7, sp, #0
 8007c5a:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8007c5c:	2300      	movs	r3, #0
 8007c5e:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8007c60:	f107 030c 	add.w	r3, r7, #12
 8007c64:	4619      	mov	r1, r3
 8007c66:	6878      	ldr	r0, [r7, #4]
 8007c68:	f000 fa7e 	bl	8008168 <SD_SendStatus>
 8007c6c:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007c6e:	697b      	ldr	r3, [r7, #20]
 8007c70:	2b00      	cmp	r3, #0
 8007c72:	d005      	beq.n	8007c80 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007c78:	697b      	ldr	r3, [r7, #20]
 8007c7a:	431a      	orrs	r2, r3
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	0a5b      	lsrs	r3, r3, #9
 8007c84:	f003 030f 	and.w	r3, r3, #15
 8007c88:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8007c8a:	693b      	ldr	r3, [r7, #16]
}
 8007c8c:	4618      	mov	r0, r3
 8007c8e:	3718      	adds	r7, #24
 8007c90:	46bd      	mov	sp, r7
 8007c92:	bd80      	pop	{r7, pc}

08007c94 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8007c94:	b480      	push	{r7}
 8007c96:	b085      	sub	sp, #20
 8007c98:	af00      	add	r7, sp, #0
 8007c9a:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ca0:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DATAEND));
 8007ca2:	68fb      	ldr	r3, [r7, #12]
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007ca8:	68fb      	ldr	r3, [r7, #12]
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007cb0:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8007cb2:	bf00      	nop
 8007cb4:	3714      	adds	r7, #20
 8007cb6:	46bd      	mov	sp, r7
 8007cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cbc:	4770      	bx	lr

08007cbe <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8007cbe:	b580      	push	{r7, lr}
 8007cc0:	b084      	sub	sp, #16
 8007cc2:	af00      	add	r7, sp, #0
 8007cc4:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007cca:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007cd0:	2b82      	cmp	r3, #130	; 0x82
 8007cd2:	d111      	bne.n	8007cf8 <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8007cd4:	68fb      	ldr	r3, [r7, #12]
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	4618      	mov	r0, r3
 8007cda:	f001 fdb7 	bl	800984c <SDMMC_CmdStopTransfer>
 8007cde:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007ce0:	68bb      	ldr	r3, [r7, #8]
 8007ce2:	2b00      	cmp	r3, #0
 8007ce4:	d008      	beq.n	8007cf8 <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 8007ce6:	68fb      	ldr	r3, [r7, #12]
 8007ce8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007cea:	68bb      	ldr	r3, [r7, #8]
 8007cec:	431a      	orrs	r2, r3
 8007cee:	68fb      	ldr	r3, [r7, #12]
 8007cf0:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 8007cf2:	68f8      	ldr	r0, [r7, #12]
 8007cf4:	f7ff fd4e 	bl	8007794 <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007cfe:	68fb      	ldr	r3, [r7, #12]
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	f022 0208 	bic.w	r2, r2, #8
 8007d06:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	f240 523a 	movw	r2, #1338	; 0x53a
 8007d10:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	2201      	movs	r2, #1
 8007d16:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	2200      	movs	r2, #0
 8007d1e:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 8007d20:	68f8      	ldr	r0, [r7, #12]
 8007d22:	f7ff fd2d 	bl	8007780 <HAL_SD_RxCpltCallback>
#endif
}
 8007d26:	bf00      	nop
 8007d28:	3710      	adds	r7, #16
 8007d2a:	46bd      	mov	sp, r7
 8007d2c:	bd80      	pop	{r7, pc}
	...

08007d30 <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 8007d30:	b580      	push	{r7, lr}
 8007d32:	b086      	sub	sp, #24
 8007d34:	af00      	add	r7, sp, #0
 8007d36:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d3c:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8007d3e:	6878      	ldr	r0, [r7, #4]
 8007d40:	f7fb fd7c 	bl	800383c <HAL_DMA_GetError>
 8007d44:	4603      	mov	r3, r0
 8007d46:	2b02      	cmp	r3, #2
 8007d48:	d03e      	beq.n	8007dc8 <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 8007d4a:	697b      	ldr	r3, [r7, #20]
 8007d4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007d50:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 8007d52:	697b      	ldr	r3, [r7, #20]
 8007d54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007d56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007d58:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 8007d5a:	693b      	ldr	r3, [r7, #16]
 8007d5c:	2b01      	cmp	r3, #1
 8007d5e:	d002      	beq.n	8007d66 <SD_DMAError+0x36>
 8007d60:	68fb      	ldr	r3, [r7, #12]
 8007d62:	2b01      	cmp	r3, #1
 8007d64:	d12d      	bne.n	8007dc2 <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8007d66:	697b      	ldr	r3, [r7, #20]
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	4a19      	ldr	r2, [pc, #100]	; (8007dd0 <SD_DMAError+0xa0>)
 8007d6c:	639a      	str	r2, [r3, #56]	; 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8007d6e:	697b      	ldr	r3, [r7, #20]
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007d74:	697b      	ldr	r3, [r7, #20]
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8007d7c:	63da      	str	r2, [r3, #60]	; 0x3c
        SDIO_IT_TXUNDERR| SDIO_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8007d7e:	697b      	ldr	r3, [r7, #20]
 8007d80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d82:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8007d86:	697b      	ldr	r3, [r7, #20]
 8007d88:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 8007d8a:	6978      	ldr	r0, [r7, #20]
 8007d8c:	f7ff ff62 	bl	8007c54 <HAL_SD_GetCardState>
 8007d90:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8007d92:	68bb      	ldr	r3, [r7, #8]
 8007d94:	2b06      	cmp	r3, #6
 8007d96:	d002      	beq.n	8007d9e <SD_DMAError+0x6e>
 8007d98:	68bb      	ldr	r3, [r7, #8]
 8007d9a:	2b05      	cmp	r3, #5
 8007d9c:	d10a      	bne.n	8007db4 <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8007d9e:	697b      	ldr	r3, [r7, #20]
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	4618      	mov	r0, r3
 8007da4:	f001 fd52 	bl	800984c <SDMMC_CmdStopTransfer>
 8007da8:	4602      	mov	r2, r0
 8007daa:	697b      	ldr	r3, [r7, #20]
 8007dac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007dae:	431a      	orrs	r2, r3
 8007db0:	697b      	ldr	r3, [r7, #20]
 8007db2:	639a      	str	r2, [r3, #56]	; 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 8007db4:	697b      	ldr	r3, [r7, #20]
 8007db6:	2201      	movs	r2, #1
 8007db8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8007dbc:	697b      	ldr	r3, [r7, #20]
 8007dbe:	2200      	movs	r2, #0
 8007dc0:	631a      	str	r2, [r3, #48]	; 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 8007dc2:	6978      	ldr	r0, [r7, #20]
 8007dc4:	f7ff fce6 	bl	8007794 <HAL_SD_ErrorCallback>
#endif
  }
}
 8007dc8:	bf00      	nop
 8007dca:	3718      	adds	r7, #24
 8007dcc:	46bd      	mov	sp, r7
 8007dce:	bd80      	pop	{r7, pc}
 8007dd0:	004005ff 	.word	0x004005ff

08007dd4 <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 8007dd4:	b580      	push	{r7, lr}
 8007dd6:	b084      	sub	sp, #16
 8007dd8:	af00      	add	r7, sp, #0
 8007dda:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007de0:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8007de2:	68fb      	ldr	r3, [r7, #12]
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	f240 523a 	movw	r2, #1338	; 0x53a
 8007dea:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8007dec:	68f8      	ldr	r0, [r7, #12]
 8007dee:	f7ff ff31 	bl	8007c54 <HAL_SD_GetCardState>
 8007df2:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8007df4:	68fb      	ldr	r3, [r7, #12]
 8007df6:	2201      	movs	r2, #1
 8007df8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	2200      	movs	r2, #0
 8007e00:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8007e02:	68bb      	ldr	r3, [r7, #8]
 8007e04:	2b06      	cmp	r3, #6
 8007e06:	d002      	beq.n	8007e0e <SD_DMATxAbort+0x3a>
 8007e08:	68bb      	ldr	r3, [r7, #8]
 8007e0a:	2b05      	cmp	r3, #5
 8007e0c:	d10a      	bne.n	8007e24 <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8007e0e:	68fb      	ldr	r3, [r7, #12]
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	4618      	mov	r0, r3
 8007e14:	f001 fd1a 	bl	800984c <SDMMC_CmdStopTransfer>
 8007e18:	4602      	mov	r2, r0
 8007e1a:	68fb      	ldr	r3, [r7, #12]
 8007e1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e1e:	431a      	orrs	r2, r3
 8007e20:	68fb      	ldr	r3, [r7, #12]
 8007e22:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	d103      	bne.n	8007e34 <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8007e2c:	68f8      	ldr	r0, [r7, #12]
 8007e2e:	f7ff fcbb 	bl	80077a8 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8007e32:	e002      	b.n	8007e3a <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8007e34:	68f8      	ldr	r0, [r7, #12]
 8007e36:	f7ff fcad 	bl	8007794 <HAL_SD_ErrorCallback>
}
 8007e3a:	bf00      	nop
 8007e3c:	3710      	adds	r7, #16
 8007e3e:	46bd      	mov	sp, r7
 8007e40:	bd80      	pop	{r7, pc}

08007e42 <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 8007e42:	b580      	push	{r7, lr}
 8007e44:	b084      	sub	sp, #16
 8007e46:	af00      	add	r7, sp, #0
 8007e48:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e4e:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8007e50:	68fb      	ldr	r3, [r7, #12]
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	f240 523a 	movw	r2, #1338	; 0x53a
 8007e58:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8007e5a:	68f8      	ldr	r0, [r7, #12]
 8007e5c:	f7ff fefa 	bl	8007c54 <HAL_SD_GetCardState>
 8007e60:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	2201      	movs	r2, #1
 8007e66:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8007e6a:	68fb      	ldr	r3, [r7, #12]
 8007e6c:	2200      	movs	r2, #0
 8007e6e:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8007e70:	68bb      	ldr	r3, [r7, #8]
 8007e72:	2b06      	cmp	r3, #6
 8007e74:	d002      	beq.n	8007e7c <SD_DMARxAbort+0x3a>
 8007e76:	68bb      	ldr	r3, [r7, #8]
 8007e78:	2b05      	cmp	r3, #5
 8007e7a:	d10a      	bne.n	8007e92 <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	4618      	mov	r0, r3
 8007e82:	f001 fce3 	bl	800984c <SDMMC_CmdStopTransfer>
 8007e86:	4602      	mov	r2, r0
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e8c:	431a      	orrs	r2, r3
 8007e8e:	68fb      	ldr	r3, [r7, #12]
 8007e90:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	d103      	bne.n	8007ea2 <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8007e9a:	68f8      	ldr	r0, [r7, #12]
 8007e9c:	f7ff fc84 	bl	80077a8 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8007ea0:	e002      	b.n	8007ea8 <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8007ea2:	68f8      	ldr	r0, [r7, #12]
 8007ea4:	f7ff fc76 	bl	8007794 <HAL_SD_ErrorCallback>
}
 8007ea8:	bf00      	nop
 8007eaa:	3710      	adds	r7, #16
 8007eac:	46bd      	mov	sp, r7
 8007eae:	bd80      	pop	{r7, pc}

08007eb0 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8007eb0:	b5b0      	push	{r4, r5, r7, lr}
 8007eb2:	b094      	sub	sp, #80	; 0x50
 8007eb4:	af04      	add	r7, sp, #16
 8007eb6:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8007eb8:	2301      	movs	r3, #1
 8007eba:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	4618      	mov	r0, r3
 8007ec2:	f001 fb95 	bl	80095f0 <SDIO_GetPowerState>
 8007ec6:	4603      	mov	r3, r0
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	d102      	bne.n	8007ed2 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8007ecc:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8007ed0:	e0b7      	b.n	8008042 <SD_InitCard+0x192>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007ed6:	2b03      	cmp	r3, #3
 8007ed8:	d02f      	beq.n	8007f3a <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	4618      	mov	r0, r3
 8007ee0:	f001 fdbe 	bl	8009a60 <SDMMC_CmdSendCID>
 8007ee4:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8007ee6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007ee8:	2b00      	cmp	r3, #0
 8007eea:	d001      	beq.n	8007ef0 <SD_InitCard+0x40>
    {
      return errorstate;
 8007eec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007eee:	e0a8      	b.n	8008042 <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	2100      	movs	r1, #0
 8007ef6:	4618      	mov	r0, r3
 8007ef8:	f001 fbbf 	bl	800967a <SDIO_GetResponse>
 8007efc:	4602      	mov	r2, r0
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	2104      	movs	r1, #4
 8007f08:	4618      	mov	r0, r3
 8007f0a:	f001 fbb6 	bl	800967a <SDIO_GetResponse>
 8007f0e:	4602      	mov	r2, r0
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	2108      	movs	r1, #8
 8007f1a:	4618      	mov	r0, r3
 8007f1c:	f001 fbad 	bl	800967a <SDIO_GetResponse>
 8007f20:	4602      	mov	r2, r0
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	210c      	movs	r1, #12
 8007f2c:	4618      	mov	r0, r3
 8007f2e:	f001 fba4 	bl	800967a <SDIO_GetResponse>
 8007f32:	4602      	mov	r2, r0
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007f3e:	2b03      	cmp	r3, #3
 8007f40:	d00d      	beq.n	8007f5e <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	f107 020e 	add.w	r2, r7, #14
 8007f4a:	4611      	mov	r1, r2
 8007f4c:	4618      	mov	r0, r3
 8007f4e:	f001 fdc4 	bl	8009ada <SDMMC_CmdSetRelAdd>
 8007f52:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8007f54:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007f56:	2b00      	cmp	r3, #0
 8007f58:	d001      	beq.n	8007f5e <SD_InitCard+0xae>
    {
      return errorstate;
 8007f5a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007f5c:	e071      	b.n	8008042 <SD_InitCard+0x192>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007f62:	2b03      	cmp	r3, #3
 8007f64:	d036      	beq.n	8007fd4 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8007f66:	89fb      	ldrh	r3, [r7, #14]
 8007f68:	461a      	mov	r2, r3
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	681a      	ldr	r2, [r3, #0]
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007f76:	041b      	lsls	r3, r3, #16
 8007f78:	4619      	mov	r1, r3
 8007f7a:	4610      	mov	r0, r2
 8007f7c:	f001 fd8e 	bl	8009a9c <SDMMC_CmdSendCSD>
 8007f80:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8007f82:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007f84:	2b00      	cmp	r3, #0
 8007f86:	d001      	beq.n	8007f8c <SD_InitCard+0xdc>
    {
      return errorstate;
 8007f88:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007f8a:	e05a      	b.n	8008042 <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	2100      	movs	r1, #0
 8007f92:	4618      	mov	r0, r3
 8007f94:	f001 fb71 	bl	800967a <SDIO_GetResponse>
 8007f98:	4602      	mov	r2, r0
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	2104      	movs	r1, #4
 8007fa4:	4618      	mov	r0, r3
 8007fa6:	f001 fb68 	bl	800967a <SDIO_GetResponse>
 8007faa:	4602      	mov	r2, r0
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	2108      	movs	r1, #8
 8007fb6:	4618      	mov	r0, r3
 8007fb8:	f001 fb5f 	bl	800967a <SDIO_GetResponse>
 8007fbc:	4602      	mov	r2, r0
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	210c      	movs	r1, #12
 8007fc8:	4618      	mov	r0, r3
 8007fca:	f001 fb56 	bl	800967a <SDIO_GetResponse>
 8007fce:	4602      	mov	r2, r0
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	2104      	movs	r1, #4
 8007fda:	4618      	mov	r0, r3
 8007fdc:	f001 fb4d 	bl	800967a <SDIO_GetResponse>
 8007fe0:	4603      	mov	r3, r0
 8007fe2:	0d1a      	lsrs	r2, r3, #20
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8007fe8:	f107 0310 	add.w	r3, r7, #16
 8007fec:	4619      	mov	r1, r3
 8007fee:	6878      	ldr	r0, [r7, #4]
 8007ff0:	f7ff fbe4 	bl	80077bc <HAL_SD_GetCardCSD>
 8007ff4:	4603      	mov	r3, r0
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	d002      	beq.n	8008000 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007ffa:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8007ffe:	e020      	b.n	8008042 <SD_InitCard+0x192>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	6819      	ldr	r1, [r3, #0]
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008008:	041b      	lsls	r3, r3, #16
 800800a:	f04f 0400 	mov.w	r4, #0
 800800e:	461a      	mov	r2, r3
 8008010:	4623      	mov	r3, r4
 8008012:	4608      	mov	r0, r1
 8008014:	f001 fc3c 	bl	8009890 <SDMMC_CmdSelDesel>
 8008018:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 800801a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800801c:	2b00      	cmp	r3, #0
 800801e:	d001      	beq.n	8008024 <SD_InitCard+0x174>
  {
    return errorstate;
 8008020:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008022:	e00e      	b.n	8008042 <SD_InitCard+0x192>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	681d      	ldr	r5, [r3, #0]
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	466c      	mov	r4, sp
 800802c:	f103 0210 	add.w	r2, r3, #16
 8008030:	ca07      	ldmia	r2, {r0, r1, r2}
 8008032:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8008036:	3304      	adds	r3, #4
 8008038:	cb0e      	ldmia	r3, {r1, r2, r3}
 800803a:	4628      	mov	r0, r5
 800803c:	f001 fa80 	bl	8009540 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8008040:	2300      	movs	r3, #0
}
 8008042:	4618      	mov	r0, r3
 8008044:	3740      	adds	r7, #64	; 0x40
 8008046:	46bd      	mov	sp, r7
 8008048:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800804c <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800804c:	b580      	push	{r7, lr}
 800804e:	b086      	sub	sp, #24
 8008050:	af00      	add	r7, sp, #0
 8008052:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008054:	2300      	movs	r3, #0
 8008056:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8008058:	2300      	movs	r3, #0
 800805a:	617b      	str	r3, [r7, #20]
 800805c:	2300      	movs	r3, #0
 800805e:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	4618      	mov	r0, r3
 8008066:	f001 fc36 	bl	80098d6 <SDMMC_CmdGoIdleState>
 800806a:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800806c:	68fb      	ldr	r3, [r7, #12]
 800806e:	2b00      	cmp	r3, #0
 8008070:	d001      	beq.n	8008076 <SD_PowerON+0x2a>
  {
    return errorstate;
 8008072:	68fb      	ldr	r3, [r7, #12]
 8008074:	e072      	b.n	800815c <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	4618      	mov	r0, r3
 800807c:	f001 fc49 	bl	8009912 <SDMMC_CmdOperCond>
 8008080:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008082:	68fb      	ldr	r3, [r7, #12]
 8008084:	2b00      	cmp	r3, #0
 8008086:	d00d      	beq.n	80080a4 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	2200      	movs	r2, #0
 800808c:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	4618      	mov	r0, r3
 8008094:	f001 fc1f 	bl	80098d6 <SDMMC_CmdGoIdleState>
 8008098:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800809a:	68fb      	ldr	r3, [r7, #12]
 800809c:	2b00      	cmp	r3, #0
 800809e:	d004      	beq.n	80080aa <SD_PowerON+0x5e>
    {
      return errorstate;
 80080a0:	68fb      	ldr	r3, [r7, #12]
 80080a2:	e05b      	b.n	800815c <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	2201      	movs	r2, #1
 80080a8:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80080ae:	2b01      	cmp	r3, #1
 80080b0:	d137      	bne.n	8008122 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	2100      	movs	r1, #0
 80080b8:	4618      	mov	r0, r3
 80080ba:	f001 fc49 	bl	8009950 <SDMMC_CmdAppCommand>
 80080be:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80080c0:	68fb      	ldr	r3, [r7, #12]
 80080c2:	2b00      	cmp	r3, #0
 80080c4:	d02d      	beq.n	8008122 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80080c6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80080ca:	e047      	b.n	800815c <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	2100      	movs	r1, #0
 80080d2:	4618      	mov	r0, r3
 80080d4:	f001 fc3c 	bl	8009950 <SDMMC_CmdAppCommand>
 80080d8:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80080da:	68fb      	ldr	r3, [r7, #12]
 80080dc:	2b00      	cmp	r3, #0
 80080de:	d001      	beq.n	80080e4 <SD_PowerON+0x98>
    {
      return errorstate;
 80080e0:	68fb      	ldr	r3, [r7, #12]
 80080e2:	e03b      	b.n	800815c <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	491e      	ldr	r1, [pc, #120]	; (8008164 <SD_PowerON+0x118>)
 80080ea:	4618      	mov	r0, r3
 80080ec:	f001 fc52 	bl	8009994 <SDMMC_CmdAppOperCommand>
 80080f0:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80080f2:	68fb      	ldr	r3, [r7, #12]
 80080f4:	2b00      	cmp	r3, #0
 80080f6:	d002      	beq.n	80080fe <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80080f8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80080fc:	e02e      	b.n	800815c <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	2100      	movs	r1, #0
 8008104:	4618      	mov	r0, r3
 8008106:	f001 fab8 	bl	800967a <SDIO_GetResponse>
 800810a:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800810c:	697b      	ldr	r3, [r7, #20]
 800810e:	0fdb      	lsrs	r3, r3, #31
 8008110:	2b01      	cmp	r3, #1
 8008112:	d101      	bne.n	8008118 <SD_PowerON+0xcc>
 8008114:	2301      	movs	r3, #1
 8008116:	e000      	b.n	800811a <SD_PowerON+0xce>
 8008118:	2300      	movs	r3, #0
 800811a:	613b      	str	r3, [r7, #16]

    count++;
 800811c:	68bb      	ldr	r3, [r7, #8]
 800811e:	3301      	adds	r3, #1
 8008120:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8008122:	68bb      	ldr	r3, [r7, #8]
 8008124:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8008128:	4293      	cmp	r3, r2
 800812a:	d802      	bhi.n	8008132 <SD_PowerON+0xe6>
 800812c:	693b      	ldr	r3, [r7, #16]
 800812e:	2b00      	cmp	r3, #0
 8008130:	d0cc      	beq.n	80080cc <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8008132:	68bb      	ldr	r3, [r7, #8]
 8008134:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8008138:	4293      	cmp	r3, r2
 800813a:	d902      	bls.n	8008142 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800813c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008140:	e00c      	b.n	800815c <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8008142:	697b      	ldr	r3, [r7, #20]
 8008144:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8008148:	2b00      	cmp	r3, #0
 800814a:	d003      	beq.n	8008154 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	2201      	movs	r2, #1
 8008150:	645a      	str	r2, [r3, #68]	; 0x44
 8008152:	e002      	b.n	800815a <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	2200      	movs	r2, #0
 8008158:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 800815a:	2300      	movs	r3, #0
}
 800815c:	4618      	mov	r0, r3
 800815e:	3718      	adds	r7, #24
 8008160:	46bd      	mov	sp, r7
 8008162:	bd80      	pop	{r7, pc}
 8008164:	c1100000 	.word	0xc1100000

08008168 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8008168:	b580      	push	{r7, lr}
 800816a:	b084      	sub	sp, #16
 800816c:	af00      	add	r7, sp, #0
 800816e:	6078      	str	r0, [r7, #4]
 8008170:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8008172:	683b      	ldr	r3, [r7, #0]
 8008174:	2b00      	cmp	r3, #0
 8008176:	d102      	bne.n	800817e <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8008178:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800817c:	e018      	b.n	80081b0 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	681a      	ldr	r2, [r3, #0]
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008186:	041b      	lsls	r3, r3, #16
 8008188:	4619      	mov	r1, r3
 800818a:	4610      	mov	r0, r2
 800818c:	f001 fcc6 	bl	8009b1c <SDMMC_CmdSendStatus>
 8008190:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008192:	68fb      	ldr	r3, [r7, #12]
 8008194:	2b00      	cmp	r3, #0
 8008196:	d001      	beq.n	800819c <SD_SendStatus+0x34>
  {
    return errorstate;
 8008198:	68fb      	ldr	r3, [r7, #12]
 800819a:	e009      	b.n	80081b0 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	2100      	movs	r1, #0
 80081a2:	4618      	mov	r0, r3
 80081a4:	f001 fa69 	bl	800967a <SDIO_GetResponse>
 80081a8:	4602      	mov	r2, r0
 80081aa:	683b      	ldr	r3, [r7, #0]
 80081ac:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 80081ae:	2300      	movs	r3, #0
}
 80081b0:	4618      	mov	r0, r3
 80081b2:	3710      	adds	r7, #16
 80081b4:	46bd      	mov	sp, r7
 80081b6:	bd80      	pop	{r7, pc}

080081b8 <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 80081b8:	b580      	push	{r7, lr}
 80081ba:	b086      	sub	sp, #24
 80081bc:	af00      	add	r7, sp, #0
 80081be:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 80081c0:	2300      	movs	r3, #0
 80081c2:	60fb      	str	r3, [r7, #12]
 80081c4:	2300      	movs	r3, #0
 80081c6:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	2100      	movs	r1, #0
 80081ce:	4618      	mov	r0, r3
 80081d0:	f001 fa53 	bl	800967a <SDIO_GetResponse>
 80081d4:	4603      	mov	r3, r0
 80081d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80081da:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80081de:	d102      	bne.n	80081e6 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80081e0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80081e4:	e02f      	b.n	8008246 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 80081e6:	f107 030c 	add.w	r3, r7, #12
 80081ea:	4619      	mov	r1, r3
 80081ec:	6878      	ldr	r0, [r7, #4]
 80081ee:	f000 f879 	bl	80082e4 <SD_FindSCR>
 80081f2:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80081f4:	697b      	ldr	r3, [r7, #20]
 80081f6:	2b00      	cmp	r3, #0
 80081f8:	d001      	beq.n	80081fe <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 80081fa:	697b      	ldr	r3, [r7, #20]
 80081fc:	e023      	b.n	8008246 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80081fe:	693b      	ldr	r3, [r7, #16]
 8008200:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008204:	2b00      	cmp	r3, #0
 8008206:	d01c      	beq.n	8008242 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	681a      	ldr	r2, [r3, #0]
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008210:	041b      	lsls	r3, r3, #16
 8008212:	4619      	mov	r1, r3
 8008214:	4610      	mov	r0, r2
 8008216:	f001 fb9b 	bl	8009950 <SDMMC_CmdAppCommand>
 800821a:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800821c:	697b      	ldr	r3, [r7, #20]
 800821e:	2b00      	cmp	r3, #0
 8008220:	d001      	beq.n	8008226 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8008222:	697b      	ldr	r3, [r7, #20]
 8008224:	e00f      	b.n	8008246 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	2102      	movs	r1, #2
 800822c:	4618      	mov	r0, r3
 800822e:	f001 fbd4 	bl	80099da <SDMMC_CmdBusWidth>
 8008232:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008234:	697b      	ldr	r3, [r7, #20]
 8008236:	2b00      	cmp	r3, #0
 8008238:	d001      	beq.n	800823e <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800823a:	697b      	ldr	r3, [r7, #20]
 800823c:	e003      	b.n	8008246 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800823e:	2300      	movs	r3, #0
 8008240:	e001      	b.n	8008246 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8008242:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8008246:	4618      	mov	r0, r3
 8008248:	3718      	adds	r7, #24
 800824a:	46bd      	mov	sp, r7
 800824c:	bd80      	pop	{r7, pc}

0800824e <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800824e:	b580      	push	{r7, lr}
 8008250:	b086      	sub	sp, #24
 8008252:	af00      	add	r7, sp, #0
 8008254:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8008256:	2300      	movs	r3, #0
 8008258:	60fb      	str	r3, [r7, #12]
 800825a:	2300      	movs	r3, #0
 800825c:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	2100      	movs	r1, #0
 8008264:	4618      	mov	r0, r3
 8008266:	f001 fa08 	bl	800967a <SDIO_GetResponse>
 800826a:	4603      	mov	r3, r0
 800826c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008270:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008274:	d102      	bne.n	800827c <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8008276:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800827a:	e02f      	b.n	80082dc <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800827c:	f107 030c 	add.w	r3, r7, #12
 8008280:	4619      	mov	r1, r3
 8008282:	6878      	ldr	r0, [r7, #4]
 8008284:	f000 f82e 	bl	80082e4 <SD_FindSCR>
 8008288:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800828a:	697b      	ldr	r3, [r7, #20]
 800828c:	2b00      	cmp	r3, #0
 800828e:	d001      	beq.n	8008294 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8008290:	697b      	ldr	r3, [r7, #20]
 8008292:	e023      	b.n	80082dc <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8008294:	693b      	ldr	r3, [r7, #16]
 8008296:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800829a:	2b00      	cmp	r3, #0
 800829c:	d01c      	beq.n	80082d8 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	681a      	ldr	r2, [r3, #0]
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80082a6:	041b      	lsls	r3, r3, #16
 80082a8:	4619      	mov	r1, r3
 80082aa:	4610      	mov	r0, r2
 80082ac:	f001 fb50 	bl	8009950 <SDMMC_CmdAppCommand>
 80082b0:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80082b2:	697b      	ldr	r3, [r7, #20]
 80082b4:	2b00      	cmp	r3, #0
 80082b6:	d001      	beq.n	80082bc <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 80082b8:	697b      	ldr	r3, [r7, #20]
 80082ba:	e00f      	b.n	80082dc <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	2100      	movs	r1, #0
 80082c2:	4618      	mov	r0, r3
 80082c4:	f001 fb89 	bl	80099da <SDMMC_CmdBusWidth>
 80082c8:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80082ca:	697b      	ldr	r3, [r7, #20]
 80082cc:	2b00      	cmp	r3, #0
 80082ce:	d001      	beq.n	80082d4 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 80082d0:	697b      	ldr	r3, [r7, #20]
 80082d2:	e003      	b.n	80082dc <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 80082d4:	2300      	movs	r3, #0
 80082d6:	e001      	b.n	80082dc <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80082d8:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 80082dc:	4618      	mov	r0, r3
 80082de:	3718      	adds	r7, #24
 80082e0:	46bd      	mov	sp, r7
 80082e2:	bd80      	pop	{r7, pc}

080082e4 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 80082e4:	b590      	push	{r4, r7, lr}
 80082e6:	b08f      	sub	sp, #60	; 0x3c
 80082e8:	af00      	add	r7, sp, #0
 80082ea:	6078      	str	r0, [r7, #4]
 80082ec:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80082ee:	f7fa feb3 	bl	8003058 <HAL_GetTick>
 80082f2:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 80082f4:	2300      	movs	r3, #0
 80082f6:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 80082f8:	2300      	movs	r3, #0
 80082fa:	60bb      	str	r3, [r7, #8]
 80082fc:	2300      	movs	r3, #0
 80082fe:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8008300:	683b      	ldr	r3, [r7, #0]
 8008302:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	2108      	movs	r1, #8
 800830a:	4618      	mov	r0, r3
 800830c:	f001 f9f4 	bl	80096f8 <SDMMC_CmdBlockLength>
 8008310:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8008312:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008314:	2b00      	cmp	r3, #0
 8008316:	d001      	beq.n	800831c <SD_FindSCR+0x38>
  {
    return errorstate;
 8008318:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800831a:	e0a9      	b.n	8008470 <SD_FindSCR+0x18c>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	681a      	ldr	r2, [r3, #0]
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008324:	041b      	lsls	r3, r3, #16
 8008326:	4619      	mov	r1, r3
 8008328:	4610      	mov	r0, r2
 800832a:	f001 fb11 	bl	8009950 <SDMMC_CmdAppCommand>
 800832e:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8008330:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008332:	2b00      	cmp	r3, #0
 8008334:	d001      	beq.n	800833a <SD_FindSCR+0x56>
  {
    return errorstate;
 8008336:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008338:	e09a      	b.n	8008470 <SD_FindSCR+0x18c>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800833a:	f04f 33ff 	mov.w	r3, #4294967295
 800833e:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8008340:	2308      	movs	r3, #8
 8008342:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 8008344:	2330      	movs	r3, #48	; 0x30
 8008346:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8008348:	2302      	movs	r3, #2
 800834a:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800834c:	2300      	movs	r3, #0
 800834e:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 8008350:	2301      	movs	r3, #1
 8008352:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	f107 0210 	add.w	r2, r7, #16
 800835c:	4611      	mov	r1, r2
 800835e:	4618      	mov	r0, r3
 8008360:	f001 f99e 	bl	80096a0 <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	4618      	mov	r0, r3
 800836a:	f001 fb58 	bl	8009a1e <SDMMC_CmdSendSCR>
 800836e:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8008370:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008372:	2b00      	cmp	r3, #0
 8008374:	d022      	beq.n	80083bc <SD_FindSCR+0xd8>
  {
    return errorstate;
 8008376:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008378:	e07a      	b.n	8008470 <SD_FindSCR+0x18c>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008380:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008384:	2b00      	cmp	r3, #0
 8008386:	d00e      	beq.n	80083a6 <SD_FindSCR+0xc2>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	6819      	ldr	r1, [r3, #0]
 800838c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800838e:	009b      	lsls	r3, r3, #2
 8008390:	f107 0208 	add.w	r2, r7, #8
 8008394:	18d4      	adds	r4, r2, r3
 8008396:	4608      	mov	r0, r1
 8008398:	f001 f8fd 	bl	8009596 <SDIO_ReadFIFO>
 800839c:	4603      	mov	r3, r0
 800839e:	6023      	str	r3, [r4, #0]
      index++;
 80083a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80083a2:	3301      	adds	r3, #1
 80083a4:	637b      	str	r3, [r7, #52]	; 0x34
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 80083a6:	f7fa fe57 	bl	8003058 <HAL_GetTick>
 80083aa:	4602      	mov	r2, r0
 80083ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083ae:	1ad3      	subs	r3, r2, r3
 80083b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80083b4:	d102      	bne.n	80083bc <SD_FindSCR+0xd8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 80083b6:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80083ba:	e059      	b.n	8008470 <SD_FindSCR+0x18c>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80083c2:	f240 432a 	movw	r3, #1066	; 0x42a
 80083c6:	4013      	ands	r3, r2
 80083c8:	2b00      	cmp	r3, #0
 80083ca:	d0d6      	beq.n	800837a <SD_FindSCR+0x96>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80083d2:	f003 0308 	and.w	r3, r3, #8
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	d005      	beq.n	80083e6 <SD_FindSCR+0x102>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	2208      	movs	r2, #8
 80083e0:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 80083e2:	2308      	movs	r3, #8
 80083e4:	e044      	b.n	8008470 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80083ec:	f003 0302 	and.w	r3, r3, #2
 80083f0:	2b00      	cmp	r3, #0
 80083f2:	d005      	beq.n	8008400 <SD_FindSCR+0x11c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	2202      	movs	r2, #2
 80083fa:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 80083fc:	2302      	movs	r3, #2
 80083fe:	e037      	b.n	8008470 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008406:	f003 0320 	and.w	r3, r3, #32
 800840a:	2b00      	cmp	r3, #0
 800840c:	d005      	beq.n	800841a <SD_FindSCR+0x136>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	2220      	movs	r2, #32
 8008414:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8008416:	2320      	movs	r3, #32
 8008418:	e02a      	b.n	8008470 <SD_FindSCR+0x18c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	f240 523a 	movw	r2, #1338	; 0x53a
 8008422:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8008424:	68fb      	ldr	r3, [r7, #12]
 8008426:	061a      	lsls	r2, r3, #24
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	021b      	lsls	r3, r3, #8
 800842c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8008430:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8008432:	68fb      	ldr	r3, [r7, #12]
 8008434:	0a1b      	lsrs	r3, r3, #8
 8008436:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800843a:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800843c:	68fb      	ldr	r3, [r7, #12]
 800843e:	0e1b      	lsrs	r3, r3, #24
 8008440:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8008442:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008444:	601a      	str	r2, [r3, #0]
    scr++;
 8008446:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008448:	3304      	adds	r3, #4
 800844a:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800844c:	68bb      	ldr	r3, [r7, #8]
 800844e:	061a      	lsls	r2, r3, #24
 8008450:	68bb      	ldr	r3, [r7, #8]
 8008452:	021b      	lsls	r3, r3, #8
 8008454:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8008458:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800845a:	68bb      	ldr	r3, [r7, #8]
 800845c:	0a1b      	lsrs	r3, r3, #8
 800845e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8008462:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8008464:	68bb      	ldr	r3, [r7, #8]
 8008466:	0e1b      	lsrs	r3, r3, #24
 8008468:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800846a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800846c:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800846e:	2300      	movs	r3, #0
}
 8008470:	4618      	mov	r0, r3
 8008472:	373c      	adds	r7, #60	; 0x3c
 8008474:	46bd      	mov	sp, r7
 8008476:	bd90      	pop	{r4, r7, pc}

08008478 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 8008478:	b580      	push	{r7, lr}
 800847a:	b086      	sub	sp, #24
 800847c:	af00      	add	r7, sp, #0
 800847e:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008484:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800848a:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800848c:	693b      	ldr	r3, [r7, #16]
 800848e:	2b00      	cmp	r3, #0
 8008490:	d03f      	beq.n	8008512 <SD_Read_IT+0x9a>
  {
    /* Read data from SDIO Rx FIFO */
    for(count = 0U; count < 8U; count++)
 8008492:	2300      	movs	r3, #0
 8008494:	617b      	str	r3, [r7, #20]
 8008496:	e033      	b.n	8008500 <SD_Read_IT+0x88>
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	4618      	mov	r0, r3
 800849e:	f001 f87a 	bl	8009596 <SDIO_ReadFIFO>
 80084a2:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 80084a4:	68bb      	ldr	r3, [r7, #8]
 80084a6:	b2da      	uxtb	r2, r3
 80084a8:	68fb      	ldr	r3, [r7, #12]
 80084aa:	701a      	strb	r2, [r3, #0]
      tmp++;
 80084ac:	68fb      	ldr	r3, [r7, #12]
 80084ae:	3301      	adds	r3, #1
 80084b0:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80084b2:	693b      	ldr	r3, [r7, #16]
 80084b4:	3b01      	subs	r3, #1
 80084b6:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 80084b8:	68bb      	ldr	r3, [r7, #8]
 80084ba:	0a1b      	lsrs	r3, r3, #8
 80084bc:	b2da      	uxtb	r2, r3
 80084be:	68fb      	ldr	r3, [r7, #12]
 80084c0:	701a      	strb	r2, [r3, #0]
      tmp++;
 80084c2:	68fb      	ldr	r3, [r7, #12]
 80084c4:	3301      	adds	r3, #1
 80084c6:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80084c8:	693b      	ldr	r3, [r7, #16]
 80084ca:	3b01      	subs	r3, #1
 80084cc:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 80084ce:	68bb      	ldr	r3, [r7, #8]
 80084d0:	0c1b      	lsrs	r3, r3, #16
 80084d2:	b2da      	uxtb	r2, r3
 80084d4:	68fb      	ldr	r3, [r7, #12]
 80084d6:	701a      	strb	r2, [r3, #0]
      tmp++;
 80084d8:	68fb      	ldr	r3, [r7, #12]
 80084da:	3301      	adds	r3, #1
 80084dc:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80084de:	693b      	ldr	r3, [r7, #16]
 80084e0:	3b01      	subs	r3, #1
 80084e2:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 80084e4:	68bb      	ldr	r3, [r7, #8]
 80084e6:	0e1b      	lsrs	r3, r3, #24
 80084e8:	b2da      	uxtb	r2, r3
 80084ea:	68fb      	ldr	r3, [r7, #12]
 80084ec:	701a      	strb	r2, [r3, #0]
      tmp++;
 80084ee:	68fb      	ldr	r3, [r7, #12]
 80084f0:	3301      	adds	r3, #1
 80084f2:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80084f4:	693b      	ldr	r3, [r7, #16]
 80084f6:	3b01      	subs	r3, #1
 80084f8:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 80084fa:	697b      	ldr	r3, [r7, #20]
 80084fc:	3301      	adds	r3, #1
 80084fe:	617b      	str	r3, [r7, #20]
 8008500:	697b      	ldr	r3, [r7, #20]
 8008502:	2b07      	cmp	r3, #7
 8008504:	d9c8      	bls.n	8008498 <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	68fa      	ldr	r2, [r7, #12]
 800850a:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	693a      	ldr	r2, [r7, #16]
 8008510:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 8008512:	bf00      	nop
 8008514:	3718      	adds	r7, #24
 8008516:	46bd      	mov	sp, r7
 8008518:	bd80      	pop	{r7, pc}

0800851a <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 800851a:	b580      	push	{r7, lr}
 800851c:	b086      	sub	sp, #24
 800851e:	af00      	add	r7, sp, #0
 8008520:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	6a1b      	ldr	r3, [r3, #32]
 8008526:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800852c:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800852e:	693b      	ldr	r3, [r7, #16]
 8008530:	2b00      	cmp	r3, #0
 8008532:	d043      	beq.n	80085bc <SD_Write_IT+0xa2>
  {
    /* Write data to SDIO Tx FIFO */
    for(count = 0U; count < 8U; count++)
 8008534:	2300      	movs	r3, #0
 8008536:	617b      	str	r3, [r7, #20]
 8008538:	e037      	b.n	80085aa <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 800853a:	68fb      	ldr	r3, [r7, #12]
 800853c:	781b      	ldrb	r3, [r3, #0]
 800853e:	60bb      	str	r3, [r7, #8]
      tmp++;
 8008540:	68fb      	ldr	r3, [r7, #12]
 8008542:	3301      	adds	r3, #1
 8008544:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8008546:	693b      	ldr	r3, [r7, #16]
 8008548:	3b01      	subs	r3, #1
 800854a:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 800854c:	68fb      	ldr	r3, [r7, #12]
 800854e:	781b      	ldrb	r3, [r3, #0]
 8008550:	021a      	lsls	r2, r3, #8
 8008552:	68bb      	ldr	r3, [r7, #8]
 8008554:	4313      	orrs	r3, r2
 8008556:	60bb      	str	r3, [r7, #8]
      tmp++;
 8008558:	68fb      	ldr	r3, [r7, #12]
 800855a:	3301      	adds	r3, #1
 800855c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800855e:	693b      	ldr	r3, [r7, #16]
 8008560:	3b01      	subs	r3, #1
 8008562:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 8008564:	68fb      	ldr	r3, [r7, #12]
 8008566:	781b      	ldrb	r3, [r3, #0]
 8008568:	041a      	lsls	r2, r3, #16
 800856a:	68bb      	ldr	r3, [r7, #8]
 800856c:	4313      	orrs	r3, r2
 800856e:	60bb      	str	r3, [r7, #8]
      tmp++;
 8008570:	68fb      	ldr	r3, [r7, #12]
 8008572:	3301      	adds	r3, #1
 8008574:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8008576:	693b      	ldr	r3, [r7, #16]
 8008578:	3b01      	subs	r3, #1
 800857a:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 800857c:	68fb      	ldr	r3, [r7, #12]
 800857e:	781b      	ldrb	r3, [r3, #0]
 8008580:	061a      	lsls	r2, r3, #24
 8008582:	68bb      	ldr	r3, [r7, #8]
 8008584:	4313      	orrs	r3, r2
 8008586:	60bb      	str	r3, [r7, #8]
      tmp++;
 8008588:	68fb      	ldr	r3, [r7, #12]
 800858a:	3301      	adds	r3, #1
 800858c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800858e:	693b      	ldr	r3, [r7, #16]
 8008590:	3b01      	subs	r3, #1
 8008592:	613b      	str	r3, [r7, #16]
      (void)SDIO_WriteFIFO(hsd->Instance, &data);
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	f107 0208 	add.w	r2, r7, #8
 800859c:	4611      	mov	r1, r2
 800859e:	4618      	mov	r0, r3
 80085a0:	f001 f806 	bl	80095b0 <SDIO_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 80085a4:	697b      	ldr	r3, [r7, #20]
 80085a6:	3301      	adds	r3, #1
 80085a8:	617b      	str	r3, [r7, #20]
 80085aa:	697b      	ldr	r3, [r7, #20]
 80085ac:	2b07      	cmp	r3, #7
 80085ae:	d9c4      	bls.n	800853a <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	68fa      	ldr	r2, [r7, #12]
 80085b4:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	693a      	ldr	r2, [r7, #16]
 80085ba:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 80085bc:	bf00      	nop
 80085be:	3718      	adds	r7, #24
 80085c0:	46bd      	mov	sp, r7
 80085c2:	bd80      	pop	{r7, pc}

080085c4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80085c4:	b580      	push	{r7, lr}
 80085c6:	b082      	sub	sp, #8
 80085c8:	af00      	add	r7, sp, #0
 80085ca:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	2b00      	cmp	r3, #0
 80085d0:	d101      	bne.n	80085d6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80085d2:	2301      	movs	r3, #1
 80085d4:	e056      	b.n	8008684 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	2200      	movs	r2, #0
 80085da:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80085e2:	b2db      	uxtb	r3, r3
 80085e4:	2b00      	cmp	r3, #0
 80085e6:	d106      	bne.n	80085f6 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	2200      	movs	r2, #0
 80085ec:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80085f0:	6878      	ldr	r0, [r7, #4]
 80085f2:	f7fa fb03 	bl	8002bfc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	2202      	movs	r2, #2
 80085fa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	681b      	ldr	r3, [r3, #0]
 8008602:	681a      	ldr	r2, [r3, #0]
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800860c:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	685a      	ldr	r2, [r3, #4]
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	689b      	ldr	r3, [r3, #8]
 8008616:	431a      	orrs	r2, r3
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	68db      	ldr	r3, [r3, #12]
 800861c:	431a      	orrs	r2, r3
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	691b      	ldr	r3, [r3, #16]
 8008622:	431a      	orrs	r2, r3
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	695b      	ldr	r3, [r3, #20]
 8008628:	431a      	orrs	r2, r3
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	699b      	ldr	r3, [r3, #24]
 800862e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008632:	431a      	orrs	r2, r3
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	69db      	ldr	r3, [r3, #28]
 8008638:	431a      	orrs	r2, r3
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	6a1b      	ldr	r3, [r3, #32]
 800863e:	ea42 0103 	orr.w	r1, r2, r3
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	430a      	orrs	r2, r1
 800864c:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	699b      	ldr	r3, [r3, #24]
 8008652:	0c1b      	lsrs	r3, r3, #16
 8008654:	f003 0104 	and.w	r1, r3, #4
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	430a      	orrs	r2, r1
 8008662:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	69da      	ldr	r2, [r3, #28]
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008672:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	2200      	movs	r2, #0
 8008678:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	2201      	movs	r2, #1
 800867e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8008682:	2300      	movs	r3, #0
}
 8008684:	4618      	mov	r0, r3
 8008686:	3708      	adds	r7, #8
 8008688:	46bd      	mov	sp, r7
 800868a:	bd80      	pop	{r7, pc}

0800868c <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800868c:	b580      	push	{r7, lr}
 800868e:	b088      	sub	sp, #32
 8008690:	af00      	add	r7, sp, #0
 8008692:	60f8      	str	r0, [r7, #12]
 8008694:	60b9      	str	r1, [r7, #8]
 8008696:	603b      	str	r3, [r7, #0]
 8008698:	4613      	mov	r3, r2
 800869a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800869c:	2300      	movs	r3, #0
 800869e:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80086a0:	68fb      	ldr	r3, [r7, #12]
 80086a2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80086a6:	2b01      	cmp	r3, #1
 80086a8:	d101      	bne.n	80086ae <HAL_SPI_Transmit+0x22>
 80086aa:	2302      	movs	r3, #2
 80086ac:	e11e      	b.n	80088ec <HAL_SPI_Transmit+0x260>
 80086ae:	68fb      	ldr	r3, [r7, #12]
 80086b0:	2201      	movs	r2, #1
 80086b2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80086b6:	f7fa fccf 	bl	8003058 <HAL_GetTick>
 80086ba:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80086bc:	88fb      	ldrh	r3, [r7, #6]
 80086be:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80086c0:	68fb      	ldr	r3, [r7, #12]
 80086c2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80086c6:	b2db      	uxtb	r3, r3
 80086c8:	2b01      	cmp	r3, #1
 80086ca:	d002      	beq.n	80086d2 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80086cc:	2302      	movs	r3, #2
 80086ce:	77fb      	strb	r3, [r7, #31]
    goto error;
 80086d0:	e103      	b.n	80088da <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 80086d2:	68bb      	ldr	r3, [r7, #8]
 80086d4:	2b00      	cmp	r3, #0
 80086d6:	d002      	beq.n	80086de <HAL_SPI_Transmit+0x52>
 80086d8:	88fb      	ldrh	r3, [r7, #6]
 80086da:	2b00      	cmp	r3, #0
 80086dc:	d102      	bne.n	80086e4 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80086de:	2301      	movs	r3, #1
 80086e0:	77fb      	strb	r3, [r7, #31]
    goto error;
 80086e2:	e0fa      	b.n	80088da <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80086e4:	68fb      	ldr	r3, [r7, #12]
 80086e6:	2203      	movs	r2, #3
 80086e8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80086ec:	68fb      	ldr	r3, [r7, #12]
 80086ee:	2200      	movs	r2, #0
 80086f0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80086f2:	68fb      	ldr	r3, [r7, #12]
 80086f4:	68ba      	ldr	r2, [r7, #8]
 80086f6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80086f8:	68fb      	ldr	r3, [r7, #12]
 80086fa:	88fa      	ldrh	r2, [r7, #6]
 80086fc:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80086fe:	68fb      	ldr	r3, [r7, #12]
 8008700:	88fa      	ldrh	r2, [r7, #6]
 8008702:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8008704:	68fb      	ldr	r3, [r7, #12]
 8008706:	2200      	movs	r2, #0
 8008708:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800870a:	68fb      	ldr	r3, [r7, #12]
 800870c:	2200      	movs	r2, #0
 800870e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8008710:	68fb      	ldr	r3, [r7, #12]
 8008712:	2200      	movs	r2, #0
 8008714:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8008716:	68fb      	ldr	r3, [r7, #12]
 8008718:	2200      	movs	r2, #0
 800871a:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800871c:	68fb      	ldr	r3, [r7, #12]
 800871e:	2200      	movs	r2, #0
 8008720:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008722:	68fb      	ldr	r3, [r7, #12]
 8008724:	689b      	ldr	r3, [r3, #8]
 8008726:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800872a:	d107      	bne.n	800873c <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 800872c:	68fb      	ldr	r3, [r7, #12]
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	681a      	ldr	r2, [r3, #0]
 8008732:	68fb      	ldr	r3, [r7, #12]
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800873a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800873c:	68fb      	ldr	r3, [r7, #12]
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008746:	2b40      	cmp	r3, #64	; 0x40
 8008748:	d007      	beq.n	800875a <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800874a:	68fb      	ldr	r3, [r7, #12]
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	681a      	ldr	r2, [r3, #0]
 8008750:	68fb      	ldr	r3, [r7, #12]
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008758:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800875a:	68fb      	ldr	r3, [r7, #12]
 800875c:	68db      	ldr	r3, [r3, #12]
 800875e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008762:	d14b      	bne.n	80087fc <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008764:	68fb      	ldr	r3, [r7, #12]
 8008766:	685b      	ldr	r3, [r3, #4]
 8008768:	2b00      	cmp	r3, #0
 800876a:	d002      	beq.n	8008772 <HAL_SPI_Transmit+0xe6>
 800876c:	8afb      	ldrh	r3, [r7, #22]
 800876e:	2b01      	cmp	r3, #1
 8008770:	d13e      	bne.n	80087f0 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008772:	68fb      	ldr	r3, [r7, #12]
 8008774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008776:	881a      	ldrh	r2, [r3, #0]
 8008778:	68fb      	ldr	r3, [r7, #12]
 800877a:	681b      	ldr	r3, [r3, #0]
 800877c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800877e:	68fb      	ldr	r3, [r7, #12]
 8008780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008782:	1c9a      	adds	r2, r3, #2
 8008784:	68fb      	ldr	r3, [r7, #12]
 8008786:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8008788:	68fb      	ldr	r3, [r7, #12]
 800878a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800878c:	b29b      	uxth	r3, r3
 800878e:	3b01      	subs	r3, #1
 8008790:	b29a      	uxth	r2, r3
 8008792:	68fb      	ldr	r3, [r7, #12]
 8008794:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8008796:	e02b      	b.n	80087f0 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8008798:	68fb      	ldr	r3, [r7, #12]
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	689b      	ldr	r3, [r3, #8]
 800879e:	f003 0302 	and.w	r3, r3, #2
 80087a2:	2b02      	cmp	r3, #2
 80087a4:	d112      	bne.n	80087cc <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80087a6:	68fb      	ldr	r3, [r7, #12]
 80087a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80087aa:	881a      	ldrh	r2, [r3, #0]
 80087ac:	68fb      	ldr	r3, [r7, #12]
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80087b2:	68fb      	ldr	r3, [r7, #12]
 80087b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80087b6:	1c9a      	adds	r2, r3, #2
 80087b8:	68fb      	ldr	r3, [r7, #12]
 80087ba:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80087bc:	68fb      	ldr	r3, [r7, #12]
 80087be:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80087c0:	b29b      	uxth	r3, r3
 80087c2:	3b01      	subs	r3, #1
 80087c4:	b29a      	uxth	r2, r3
 80087c6:	68fb      	ldr	r3, [r7, #12]
 80087c8:	86da      	strh	r2, [r3, #54]	; 0x36
 80087ca:	e011      	b.n	80087f0 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80087cc:	f7fa fc44 	bl	8003058 <HAL_GetTick>
 80087d0:	4602      	mov	r2, r0
 80087d2:	69bb      	ldr	r3, [r7, #24]
 80087d4:	1ad3      	subs	r3, r2, r3
 80087d6:	683a      	ldr	r2, [r7, #0]
 80087d8:	429a      	cmp	r2, r3
 80087da:	d803      	bhi.n	80087e4 <HAL_SPI_Transmit+0x158>
 80087dc:	683b      	ldr	r3, [r7, #0]
 80087de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80087e2:	d102      	bne.n	80087ea <HAL_SPI_Transmit+0x15e>
 80087e4:	683b      	ldr	r3, [r7, #0]
 80087e6:	2b00      	cmp	r3, #0
 80087e8:	d102      	bne.n	80087f0 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 80087ea:	2303      	movs	r3, #3
 80087ec:	77fb      	strb	r3, [r7, #31]
          goto error;
 80087ee:	e074      	b.n	80088da <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 80087f0:	68fb      	ldr	r3, [r7, #12]
 80087f2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80087f4:	b29b      	uxth	r3, r3
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	d1ce      	bne.n	8008798 <HAL_SPI_Transmit+0x10c>
 80087fa:	e04c      	b.n	8008896 <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80087fc:	68fb      	ldr	r3, [r7, #12]
 80087fe:	685b      	ldr	r3, [r3, #4]
 8008800:	2b00      	cmp	r3, #0
 8008802:	d002      	beq.n	800880a <HAL_SPI_Transmit+0x17e>
 8008804:	8afb      	ldrh	r3, [r7, #22]
 8008806:	2b01      	cmp	r3, #1
 8008808:	d140      	bne.n	800888c <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800880a:	68fb      	ldr	r3, [r7, #12]
 800880c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800880e:	68fb      	ldr	r3, [r7, #12]
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	330c      	adds	r3, #12
 8008814:	7812      	ldrb	r2, [r2, #0]
 8008816:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8008818:	68fb      	ldr	r3, [r7, #12]
 800881a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800881c:	1c5a      	adds	r2, r3, #1
 800881e:	68fb      	ldr	r3, [r7, #12]
 8008820:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8008822:	68fb      	ldr	r3, [r7, #12]
 8008824:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008826:	b29b      	uxth	r3, r3
 8008828:	3b01      	subs	r3, #1
 800882a:	b29a      	uxth	r2, r3
 800882c:	68fb      	ldr	r3, [r7, #12]
 800882e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8008830:	e02c      	b.n	800888c <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8008832:	68fb      	ldr	r3, [r7, #12]
 8008834:	681b      	ldr	r3, [r3, #0]
 8008836:	689b      	ldr	r3, [r3, #8]
 8008838:	f003 0302 	and.w	r3, r3, #2
 800883c:	2b02      	cmp	r3, #2
 800883e:	d113      	bne.n	8008868 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008840:	68fb      	ldr	r3, [r7, #12]
 8008842:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008844:	68fb      	ldr	r3, [r7, #12]
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	330c      	adds	r3, #12
 800884a:	7812      	ldrb	r2, [r2, #0]
 800884c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800884e:	68fb      	ldr	r3, [r7, #12]
 8008850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008852:	1c5a      	adds	r2, r3, #1
 8008854:	68fb      	ldr	r3, [r7, #12]
 8008856:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8008858:	68fb      	ldr	r3, [r7, #12]
 800885a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800885c:	b29b      	uxth	r3, r3
 800885e:	3b01      	subs	r3, #1
 8008860:	b29a      	uxth	r2, r3
 8008862:	68fb      	ldr	r3, [r7, #12]
 8008864:	86da      	strh	r2, [r3, #54]	; 0x36
 8008866:	e011      	b.n	800888c <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008868:	f7fa fbf6 	bl	8003058 <HAL_GetTick>
 800886c:	4602      	mov	r2, r0
 800886e:	69bb      	ldr	r3, [r7, #24]
 8008870:	1ad3      	subs	r3, r2, r3
 8008872:	683a      	ldr	r2, [r7, #0]
 8008874:	429a      	cmp	r2, r3
 8008876:	d803      	bhi.n	8008880 <HAL_SPI_Transmit+0x1f4>
 8008878:	683b      	ldr	r3, [r7, #0]
 800887a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800887e:	d102      	bne.n	8008886 <HAL_SPI_Transmit+0x1fa>
 8008880:	683b      	ldr	r3, [r7, #0]
 8008882:	2b00      	cmp	r3, #0
 8008884:	d102      	bne.n	800888c <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 8008886:	2303      	movs	r3, #3
 8008888:	77fb      	strb	r3, [r7, #31]
          goto error;
 800888a:	e026      	b.n	80088da <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 800888c:	68fb      	ldr	r3, [r7, #12]
 800888e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008890:	b29b      	uxth	r3, r3
 8008892:	2b00      	cmp	r3, #0
 8008894:	d1cd      	bne.n	8008832 <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008896:	69ba      	ldr	r2, [r7, #24]
 8008898:	6839      	ldr	r1, [r7, #0]
 800889a:	68f8      	ldr	r0, [r7, #12]
 800889c:	f000 fa44 	bl	8008d28 <SPI_EndRxTxTransaction>
 80088a0:	4603      	mov	r3, r0
 80088a2:	2b00      	cmp	r3, #0
 80088a4:	d002      	beq.n	80088ac <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80088a6:	68fb      	ldr	r3, [r7, #12]
 80088a8:	2220      	movs	r2, #32
 80088aa:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80088ac:	68fb      	ldr	r3, [r7, #12]
 80088ae:	689b      	ldr	r3, [r3, #8]
 80088b0:	2b00      	cmp	r3, #0
 80088b2:	d10a      	bne.n	80088ca <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80088b4:	2300      	movs	r3, #0
 80088b6:	613b      	str	r3, [r7, #16]
 80088b8:	68fb      	ldr	r3, [r7, #12]
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	68db      	ldr	r3, [r3, #12]
 80088be:	613b      	str	r3, [r7, #16]
 80088c0:	68fb      	ldr	r3, [r7, #12]
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	689b      	ldr	r3, [r3, #8]
 80088c6:	613b      	str	r3, [r7, #16]
 80088c8:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80088ca:	68fb      	ldr	r3, [r7, #12]
 80088cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80088ce:	2b00      	cmp	r3, #0
 80088d0:	d002      	beq.n	80088d8 <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 80088d2:	2301      	movs	r3, #1
 80088d4:	77fb      	strb	r3, [r7, #31]
 80088d6:	e000      	b.n	80088da <HAL_SPI_Transmit+0x24e>
  }

error:
 80088d8:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80088da:	68fb      	ldr	r3, [r7, #12]
 80088dc:	2201      	movs	r2, #1
 80088de:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80088e2:	68fb      	ldr	r3, [r7, #12]
 80088e4:	2200      	movs	r2, #0
 80088e6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80088ea:	7ffb      	ldrb	r3, [r7, #31]
}
 80088ec:	4618      	mov	r0, r3
 80088ee:	3720      	adds	r7, #32
 80088f0:	46bd      	mov	sp, r7
 80088f2:	bd80      	pop	{r7, pc}

080088f4 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80088f4:	b580      	push	{r7, lr}
 80088f6:	b08c      	sub	sp, #48	; 0x30
 80088f8:	af00      	add	r7, sp, #0
 80088fa:	60f8      	str	r0, [r7, #12]
 80088fc:	60b9      	str	r1, [r7, #8]
 80088fe:	607a      	str	r2, [r7, #4]
 8008900:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8008902:	2301      	movs	r3, #1
 8008904:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8008906:	2300      	movs	r3, #0
 8008908:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800890c:	68fb      	ldr	r3, [r7, #12]
 800890e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8008912:	2b01      	cmp	r3, #1
 8008914:	d101      	bne.n	800891a <HAL_SPI_TransmitReceive+0x26>
 8008916:	2302      	movs	r3, #2
 8008918:	e18a      	b.n	8008c30 <HAL_SPI_TransmitReceive+0x33c>
 800891a:	68fb      	ldr	r3, [r7, #12]
 800891c:	2201      	movs	r2, #1
 800891e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008922:	f7fa fb99 	bl	8003058 <HAL_GetTick>
 8008926:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8008928:	68fb      	ldr	r3, [r7, #12]
 800892a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800892e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8008932:	68fb      	ldr	r3, [r7, #12]
 8008934:	685b      	ldr	r3, [r3, #4]
 8008936:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8008938:	887b      	ldrh	r3, [r7, #2]
 800893a:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800893c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008940:	2b01      	cmp	r3, #1
 8008942:	d00f      	beq.n	8008964 <HAL_SPI_TransmitReceive+0x70>
 8008944:	69fb      	ldr	r3, [r7, #28]
 8008946:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800894a:	d107      	bne.n	800895c <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800894c:	68fb      	ldr	r3, [r7, #12]
 800894e:	689b      	ldr	r3, [r3, #8]
 8008950:	2b00      	cmp	r3, #0
 8008952:	d103      	bne.n	800895c <HAL_SPI_TransmitReceive+0x68>
 8008954:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008958:	2b04      	cmp	r3, #4
 800895a:	d003      	beq.n	8008964 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800895c:	2302      	movs	r3, #2
 800895e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8008962:	e15b      	b.n	8008c1c <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8008964:	68bb      	ldr	r3, [r7, #8]
 8008966:	2b00      	cmp	r3, #0
 8008968:	d005      	beq.n	8008976 <HAL_SPI_TransmitReceive+0x82>
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	2b00      	cmp	r3, #0
 800896e:	d002      	beq.n	8008976 <HAL_SPI_TransmitReceive+0x82>
 8008970:	887b      	ldrh	r3, [r7, #2]
 8008972:	2b00      	cmp	r3, #0
 8008974:	d103      	bne.n	800897e <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8008976:	2301      	movs	r3, #1
 8008978:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800897c:	e14e      	b.n	8008c1c <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800897e:	68fb      	ldr	r3, [r7, #12]
 8008980:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008984:	b2db      	uxtb	r3, r3
 8008986:	2b04      	cmp	r3, #4
 8008988:	d003      	beq.n	8008992 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800898a:	68fb      	ldr	r3, [r7, #12]
 800898c:	2205      	movs	r2, #5
 800898e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008992:	68fb      	ldr	r3, [r7, #12]
 8008994:	2200      	movs	r2, #0
 8008996:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8008998:	68fb      	ldr	r3, [r7, #12]
 800899a:	687a      	ldr	r2, [r7, #4]
 800899c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800899e:	68fb      	ldr	r3, [r7, #12]
 80089a0:	887a      	ldrh	r2, [r7, #2]
 80089a2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80089a4:	68fb      	ldr	r3, [r7, #12]
 80089a6:	887a      	ldrh	r2, [r7, #2]
 80089a8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80089aa:	68fb      	ldr	r3, [r7, #12]
 80089ac:	68ba      	ldr	r2, [r7, #8]
 80089ae:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80089b0:	68fb      	ldr	r3, [r7, #12]
 80089b2:	887a      	ldrh	r2, [r7, #2]
 80089b4:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80089b6:	68fb      	ldr	r3, [r7, #12]
 80089b8:	887a      	ldrh	r2, [r7, #2]
 80089ba:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80089bc:	68fb      	ldr	r3, [r7, #12]
 80089be:	2200      	movs	r2, #0
 80089c0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80089c2:	68fb      	ldr	r3, [r7, #12]
 80089c4:	2200      	movs	r2, #0
 80089c6:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80089c8:	68fb      	ldr	r3, [r7, #12]
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	681b      	ldr	r3, [r3, #0]
 80089ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80089d2:	2b40      	cmp	r3, #64	; 0x40
 80089d4:	d007      	beq.n	80089e6 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80089d6:	68fb      	ldr	r3, [r7, #12]
 80089d8:	681b      	ldr	r3, [r3, #0]
 80089da:	681a      	ldr	r2, [r3, #0]
 80089dc:	68fb      	ldr	r3, [r7, #12]
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80089e4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80089e6:	68fb      	ldr	r3, [r7, #12]
 80089e8:	68db      	ldr	r3, [r3, #12]
 80089ea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80089ee:	d178      	bne.n	8008ae2 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80089f0:	68fb      	ldr	r3, [r7, #12]
 80089f2:	685b      	ldr	r3, [r3, #4]
 80089f4:	2b00      	cmp	r3, #0
 80089f6:	d002      	beq.n	80089fe <HAL_SPI_TransmitReceive+0x10a>
 80089f8:	8b7b      	ldrh	r3, [r7, #26]
 80089fa:	2b01      	cmp	r3, #1
 80089fc:	d166      	bne.n	8008acc <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80089fe:	68fb      	ldr	r3, [r7, #12]
 8008a00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a02:	881a      	ldrh	r2, [r3, #0]
 8008a04:	68fb      	ldr	r3, [r7, #12]
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8008a0a:	68fb      	ldr	r3, [r7, #12]
 8008a0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a0e:	1c9a      	adds	r2, r3, #2
 8008a10:	68fb      	ldr	r3, [r7, #12]
 8008a12:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8008a14:	68fb      	ldr	r3, [r7, #12]
 8008a16:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008a18:	b29b      	uxth	r3, r3
 8008a1a:	3b01      	subs	r3, #1
 8008a1c:	b29a      	uxth	r2, r3
 8008a1e:	68fb      	ldr	r3, [r7, #12]
 8008a20:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008a22:	e053      	b.n	8008acc <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008a24:	68fb      	ldr	r3, [r7, #12]
 8008a26:	681b      	ldr	r3, [r3, #0]
 8008a28:	689b      	ldr	r3, [r3, #8]
 8008a2a:	f003 0302 	and.w	r3, r3, #2
 8008a2e:	2b02      	cmp	r3, #2
 8008a30:	d11b      	bne.n	8008a6a <HAL_SPI_TransmitReceive+0x176>
 8008a32:	68fb      	ldr	r3, [r7, #12]
 8008a34:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008a36:	b29b      	uxth	r3, r3
 8008a38:	2b00      	cmp	r3, #0
 8008a3a:	d016      	beq.n	8008a6a <HAL_SPI_TransmitReceive+0x176>
 8008a3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a3e:	2b01      	cmp	r3, #1
 8008a40:	d113      	bne.n	8008a6a <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008a42:	68fb      	ldr	r3, [r7, #12]
 8008a44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a46:	881a      	ldrh	r2, [r3, #0]
 8008a48:	68fb      	ldr	r3, [r7, #12]
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008a4e:	68fb      	ldr	r3, [r7, #12]
 8008a50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a52:	1c9a      	adds	r2, r3, #2
 8008a54:	68fb      	ldr	r3, [r7, #12]
 8008a56:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8008a58:	68fb      	ldr	r3, [r7, #12]
 8008a5a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008a5c:	b29b      	uxth	r3, r3
 8008a5e:	3b01      	subs	r3, #1
 8008a60:	b29a      	uxth	r2, r3
 8008a62:	68fb      	ldr	r3, [r7, #12]
 8008a64:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8008a66:	2300      	movs	r3, #0
 8008a68:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008a6a:	68fb      	ldr	r3, [r7, #12]
 8008a6c:	681b      	ldr	r3, [r3, #0]
 8008a6e:	689b      	ldr	r3, [r3, #8]
 8008a70:	f003 0301 	and.w	r3, r3, #1
 8008a74:	2b01      	cmp	r3, #1
 8008a76:	d119      	bne.n	8008aac <HAL_SPI_TransmitReceive+0x1b8>
 8008a78:	68fb      	ldr	r3, [r7, #12]
 8008a7a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008a7c:	b29b      	uxth	r3, r3
 8008a7e:	2b00      	cmp	r3, #0
 8008a80:	d014      	beq.n	8008aac <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8008a82:	68fb      	ldr	r3, [r7, #12]
 8008a84:	681b      	ldr	r3, [r3, #0]
 8008a86:	68da      	ldr	r2, [r3, #12]
 8008a88:	68fb      	ldr	r3, [r7, #12]
 8008a8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a8c:	b292      	uxth	r2, r2
 8008a8e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8008a90:	68fb      	ldr	r3, [r7, #12]
 8008a92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a94:	1c9a      	adds	r2, r3, #2
 8008a96:	68fb      	ldr	r3, [r7, #12]
 8008a98:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8008a9a:	68fb      	ldr	r3, [r7, #12]
 8008a9c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008a9e:	b29b      	uxth	r3, r3
 8008aa0:	3b01      	subs	r3, #1
 8008aa2:	b29a      	uxth	r2, r3
 8008aa4:	68fb      	ldr	r3, [r7, #12]
 8008aa6:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008aa8:	2301      	movs	r3, #1
 8008aaa:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8008aac:	f7fa fad4 	bl	8003058 <HAL_GetTick>
 8008ab0:	4602      	mov	r2, r0
 8008ab2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ab4:	1ad3      	subs	r3, r2, r3
 8008ab6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008ab8:	429a      	cmp	r2, r3
 8008aba:	d807      	bhi.n	8008acc <HAL_SPI_TransmitReceive+0x1d8>
 8008abc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008abe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ac2:	d003      	beq.n	8008acc <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8008ac4:	2303      	movs	r3, #3
 8008ac6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8008aca:	e0a7      	b.n	8008c1c <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008acc:	68fb      	ldr	r3, [r7, #12]
 8008ace:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008ad0:	b29b      	uxth	r3, r3
 8008ad2:	2b00      	cmp	r3, #0
 8008ad4:	d1a6      	bne.n	8008a24 <HAL_SPI_TransmitReceive+0x130>
 8008ad6:	68fb      	ldr	r3, [r7, #12]
 8008ad8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008ada:	b29b      	uxth	r3, r3
 8008adc:	2b00      	cmp	r3, #0
 8008ade:	d1a1      	bne.n	8008a24 <HAL_SPI_TransmitReceive+0x130>
 8008ae0:	e07c      	b.n	8008bdc <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008ae2:	68fb      	ldr	r3, [r7, #12]
 8008ae4:	685b      	ldr	r3, [r3, #4]
 8008ae6:	2b00      	cmp	r3, #0
 8008ae8:	d002      	beq.n	8008af0 <HAL_SPI_TransmitReceive+0x1fc>
 8008aea:	8b7b      	ldrh	r3, [r7, #26]
 8008aec:	2b01      	cmp	r3, #1
 8008aee:	d16b      	bne.n	8008bc8 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008af0:	68fb      	ldr	r3, [r7, #12]
 8008af2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008af4:	68fb      	ldr	r3, [r7, #12]
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	330c      	adds	r3, #12
 8008afa:	7812      	ldrb	r2, [r2, #0]
 8008afc:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8008afe:	68fb      	ldr	r3, [r7, #12]
 8008b00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b02:	1c5a      	adds	r2, r3, #1
 8008b04:	68fb      	ldr	r3, [r7, #12]
 8008b06:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8008b08:	68fb      	ldr	r3, [r7, #12]
 8008b0a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008b0c:	b29b      	uxth	r3, r3
 8008b0e:	3b01      	subs	r3, #1
 8008b10:	b29a      	uxth	r2, r3
 8008b12:	68fb      	ldr	r3, [r7, #12]
 8008b14:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008b16:	e057      	b.n	8008bc8 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008b18:	68fb      	ldr	r3, [r7, #12]
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	689b      	ldr	r3, [r3, #8]
 8008b1e:	f003 0302 	and.w	r3, r3, #2
 8008b22:	2b02      	cmp	r3, #2
 8008b24:	d11c      	bne.n	8008b60 <HAL_SPI_TransmitReceive+0x26c>
 8008b26:	68fb      	ldr	r3, [r7, #12]
 8008b28:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008b2a:	b29b      	uxth	r3, r3
 8008b2c:	2b00      	cmp	r3, #0
 8008b2e:	d017      	beq.n	8008b60 <HAL_SPI_TransmitReceive+0x26c>
 8008b30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b32:	2b01      	cmp	r3, #1
 8008b34:	d114      	bne.n	8008b60 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8008b36:	68fb      	ldr	r3, [r7, #12]
 8008b38:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008b3a:	68fb      	ldr	r3, [r7, #12]
 8008b3c:	681b      	ldr	r3, [r3, #0]
 8008b3e:	330c      	adds	r3, #12
 8008b40:	7812      	ldrb	r2, [r2, #0]
 8008b42:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8008b44:	68fb      	ldr	r3, [r7, #12]
 8008b46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b48:	1c5a      	adds	r2, r3, #1
 8008b4a:	68fb      	ldr	r3, [r7, #12]
 8008b4c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8008b4e:	68fb      	ldr	r3, [r7, #12]
 8008b50:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008b52:	b29b      	uxth	r3, r3
 8008b54:	3b01      	subs	r3, #1
 8008b56:	b29a      	uxth	r2, r3
 8008b58:	68fb      	ldr	r3, [r7, #12]
 8008b5a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8008b5c:	2300      	movs	r3, #0
 8008b5e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008b60:	68fb      	ldr	r3, [r7, #12]
 8008b62:	681b      	ldr	r3, [r3, #0]
 8008b64:	689b      	ldr	r3, [r3, #8]
 8008b66:	f003 0301 	and.w	r3, r3, #1
 8008b6a:	2b01      	cmp	r3, #1
 8008b6c:	d119      	bne.n	8008ba2 <HAL_SPI_TransmitReceive+0x2ae>
 8008b6e:	68fb      	ldr	r3, [r7, #12]
 8008b70:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008b72:	b29b      	uxth	r3, r3
 8008b74:	2b00      	cmp	r3, #0
 8008b76:	d014      	beq.n	8008ba2 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8008b78:	68fb      	ldr	r3, [r7, #12]
 8008b7a:	681b      	ldr	r3, [r3, #0]
 8008b7c:	68da      	ldr	r2, [r3, #12]
 8008b7e:	68fb      	ldr	r3, [r7, #12]
 8008b80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b82:	b2d2      	uxtb	r2, r2
 8008b84:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8008b86:	68fb      	ldr	r3, [r7, #12]
 8008b88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b8a:	1c5a      	adds	r2, r3, #1
 8008b8c:	68fb      	ldr	r3, [r7, #12]
 8008b8e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8008b90:	68fb      	ldr	r3, [r7, #12]
 8008b92:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008b94:	b29b      	uxth	r3, r3
 8008b96:	3b01      	subs	r3, #1
 8008b98:	b29a      	uxth	r2, r3
 8008b9a:	68fb      	ldr	r3, [r7, #12]
 8008b9c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008b9e:	2301      	movs	r3, #1
 8008ba0:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8008ba2:	f7fa fa59 	bl	8003058 <HAL_GetTick>
 8008ba6:	4602      	mov	r2, r0
 8008ba8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008baa:	1ad3      	subs	r3, r2, r3
 8008bac:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008bae:	429a      	cmp	r2, r3
 8008bb0:	d803      	bhi.n	8008bba <HAL_SPI_TransmitReceive+0x2c6>
 8008bb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008bb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008bb8:	d102      	bne.n	8008bc0 <HAL_SPI_TransmitReceive+0x2cc>
 8008bba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008bbc:	2b00      	cmp	r3, #0
 8008bbe:	d103      	bne.n	8008bc8 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8008bc0:	2303      	movs	r3, #3
 8008bc2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8008bc6:	e029      	b.n	8008c1c <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008bc8:	68fb      	ldr	r3, [r7, #12]
 8008bca:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008bcc:	b29b      	uxth	r3, r3
 8008bce:	2b00      	cmp	r3, #0
 8008bd0:	d1a2      	bne.n	8008b18 <HAL_SPI_TransmitReceive+0x224>
 8008bd2:	68fb      	ldr	r3, [r7, #12]
 8008bd4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008bd6:	b29b      	uxth	r3, r3
 8008bd8:	2b00      	cmp	r3, #0
 8008bda:	d19d      	bne.n	8008b18 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008bdc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008bde:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008be0:	68f8      	ldr	r0, [r7, #12]
 8008be2:	f000 f8a1 	bl	8008d28 <SPI_EndRxTxTransaction>
 8008be6:	4603      	mov	r3, r0
 8008be8:	2b00      	cmp	r3, #0
 8008bea:	d006      	beq.n	8008bfa <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8008bec:	2301      	movs	r3, #1
 8008bee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008bf2:	68fb      	ldr	r3, [r7, #12]
 8008bf4:	2220      	movs	r2, #32
 8008bf6:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8008bf8:	e010      	b.n	8008c1c <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8008bfa:	68fb      	ldr	r3, [r7, #12]
 8008bfc:	689b      	ldr	r3, [r3, #8]
 8008bfe:	2b00      	cmp	r3, #0
 8008c00:	d10b      	bne.n	8008c1a <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008c02:	2300      	movs	r3, #0
 8008c04:	617b      	str	r3, [r7, #20]
 8008c06:	68fb      	ldr	r3, [r7, #12]
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	68db      	ldr	r3, [r3, #12]
 8008c0c:	617b      	str	r3, [r7, #20]
 8008c0e:	68fb      	ldr	r3, [r7, #12]
 8008c10:	681b      	ldr	r3, [r3, #0]
 8008c12:	689b      	ldr	r3, [r3, #8]
 8008c14:	617b      	str	r3, [r7, #20]
 8008c16:	697b      	ldr	r3, [r7, #20]
 8008c18:	e000      	b.n	8008c1c <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8008c1a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8008c1c:	68fb      	ldr	r3, [r7, #12]
 8008c1e:	2201      	movs	r2, #1
 8008c20:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8008c24:	68fb      	ldr	r3, [r7, #12]
 8008c26:	2200      	movs	r2, #0
 8008c28:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8008c2c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8008c30:	4618      	mov	r0, r3
 8008c32:	3730      	adds	r7, #48	; 0x30
 8008c34:	46bd      	mov	sp, r7
 8008c36:	bd80      	pop	{r7, pc}

08008c38 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8008c38:	b480      	push	{r7}
 8008c3a:	b083      	sub	sp, #12
 8008c3c:	af00      	add	r7, sp, #0
 8008c3e:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008c46:	b2db      	uxtb	r3, r3
}
 8008c48:	4618      	mov	r0, r3
 8008c4a:	370c      	adds	r7, #12
 8008c4c:	46bd      	mov	sp, r7
 8008c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c52:	4770      	bx	lr

08008c54 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8008c54:	b580      	push	{r7, lr}
 8008c56:	b084      	sub	sp, #16
 8008c58:	af00      	add	r7, sp, #0
 8008c5a:	60f8      	str	r0, [r7, #12]
 8008c5c:	60b9      	str	r1, [r7, #8]
 8008c5e:	603b      	str	r3, [r7, #0]
 8008c60:	4613      	mov	r3, r2
 8008c62:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008c64:	e04c      	b.n	8008d00 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8008c66:	683b      	ldr	r3, [r7, #0]
 8008c68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c6c:	d048      	beq.n	8008d00 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8008c6e:	f7fa f9f3 	bl	8003058 <HAL_GetTick>
 8008c72:	4602      	mov	r2, r0
 8008c74:	69bb      	ldr	r3, [r7, #24]
 8008c76:	1ad3      	subs	r3, r2, r3
 8008c78:	683a      	ldr	r2, [r7, #0]
 8008c7a:	429a      	cmp	r2, r3
 8008c7c:	d902      	bls.n	8008c84 <SPI_WaitFlagStateUntilTimeout+0x30>
 8008c7e:	683b      	ldr	r3, [r7, #0]
 8008c80:	2b00      	cmp	r3, #0
 8008c82:	d13d      	bne.n	8008d00 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8008c84:	68fb      	ldr	r3, [r7, #12]
 8008c86:	681b      	ldr	r3, [r3, #0]
 8008c88:	685a      	ldr	r2, [r3, #4]
 8008c8a:	68fb      	ldr	r3, [r7, #12]
 8008c8c:	681b      	ldr	r3, [r3, #0]
 8008c8e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8008c92:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008c94:	68fb      	ldr	r3, [r7, #12]
 8008c96:	685b      	ldr	r3, [r3, #4]
 8008c98:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008c9c:	d111      	bne.n	8008cc2 <SPI_WaitFlagStateUntilTimeout+0x6e>
 8008c9e:	68fb      	ldr	r3, [r7, #12]
 8008ca0:	689b      	ldr	r3, [r3, #8]
 8008ca2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008ca6:	d004      	beq.n	8008cb2 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008ca8:	68fb      	ldr	r3, [r7, #12]
 8008caa:	689b      	ldr	r3, [r3, #8]
 8008cac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008cb0:	d107      	bne.n	8008cc2 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8008cb2:	68fb      	ldr	r3, [r7, #12]
 8008cb4:	681b      	ldr	r3, [r3, #0]
 8008cb6:	681a      	ldr	r2, [r3, #0]
 8008cb8:	68fb      	ldr	r3, [r7, #12]
 8008cba:	681b      	ldr	r3, [r3, #0]
 8008cbc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008cc0:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008cc2:	68fb      	ldr	r3, [r7, #12]
 8008cc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008cc6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008cca:	d10f      	bne.n	8008cec <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8008ccc:	68fb      	ldr	r3, [r7, #12]
 8008cce:	681b      	ldr	r3, [r3, #0]
 8008cd0:	681a      	ldr	r2, [r3, #0]
 8008cd2:	68fb      	ldr	r3, [r7, #12]
 8008cd4:	681b      	ldr	r3, [r3, #0]
 8008cd6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008cda:	601a      	str	r2, [r3, #0]
 8008cdc:	68fb      	ldr	r3, [r7, #12]
 8008cde:	681b      	ldr	r3, [r3, #0]
 8008ce0:	681a      	ldr	r2, [r3, #0]
 8008ce2:	68fb      	ldr	r3, [r7, #12]
 8008ce4:	681b      	ldr	r3, [r3, #0]
 8008ce6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008cea:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8008cec:	68fb      	ldr	r3, [r7, #12]
 8008cee:	2201      	movs	r2, #1
 8008cf0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8008cf4:	68fb      	ldr	r3, [r7, #12]
 8008cf6:	2200      	movs	r2, #0
 8008cf8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8008cfc:	2303      	movs	r3, #3
 8008cfe:	e00f      	b.n	8008d20 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008d00:	68fb      	ldr	r3, [r7, #12]
 8008d02:	681b      	ldr	r3, [r3, #0]
 8008d04:	689a      	ldr	r2, [r3, #8]
 8008d06:	68bb      	ldr	r3, [r7, #8]
 8008d08:	4013      	ands	r3, r2
 8008d0a:	68ba      	ldr	r2, [r7, #8]
 8008d0c:	429a      	cmp	r2, r3
 8008d0e:	bf0c      	ite	eq
 8008d10:	2301      	moveq	r3, #1
 8008d12:	2300      	movne	r3, #0
 8008d14:	b2db      	uxtb	r3, r3
 8008d16:	461a      	mov	r2, r3
 8008d18:	79fb      	ldrb	r3, [r7, #7]
 8008d1a:	429a      	cmp	r2, r3
 8008d1c:	d1a3      	bne.n	8008c66 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8008d1e:	2300      	movs	r3, #0
}
 8008d20:	4618      	mov	r0, r3
 8008d22:	3710      	adds	r7, #16
 8008d24:	46bd      	mov	sp, r7
 8008d26:	bd80      	pop	{r7, pc}

08008d28 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8008d28:	b580      	push	{r7, lr}
 8008d2a:	b088      	sub	sp, #32
 8008d2c:	af02      	add	r7, sp, #8
 8008d2e:	60f8      	str	r0, [r7, #12]
 8008d30:	60b9      	str	r1, [r7, #8]
 8008d32:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8008d34:	4b1b      	ldr	r3, [pc, #108]	; (8008da4 <SPI_EndRxTxTransaction+0x7c>)
 8008d36:	681b      	ldr	r3, [r3, #0]
 8008d38:	4a1b      	ldr	r2, [pc, #108]	; (8008da8 <SPI_EndRxTxTransaction+0x80>)
 8008d3a:	fba2 2303 	umull	r2, r3, r2, r3
 8008d3e:	0d5b      	lsrs	r3, r3, #21
 8008d40:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8008d44:	fb02 f303 	mul.w	r3, r2, r3
 8008d48:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008d4a:	68fb      	ldr	r3, [r7, #12]
 8008d4c:	685b      	ldr	r3, [r3, #4]
 8008d4e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008d52:	d112      	bne.n	8008d7a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	9300      	str	r3, [sp, #0]
 8008d58:	68bb      	ldr	r3, [r7, #8]
 8008d5a:	2200      	movs	r2, #0
 8008d5c:	2180      	movs	r1, #128	; 0x80
 8008d5e:	68f8      	ldr	r0, [r7, #12]
 8008d60:	f7ff ff78 	bl	8008c54 <SPI_WaitFlagStateUntilTimeout>
 8008d64:	4603      	mov	r3, r0
 8008d66:	2b00      	cmp	r3, #0
 8008d68:	d016      	beq.n	8008d98 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008d6a:	68fb      	ldr	r3, [r7, #12]
 8008d6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008d6e:	f043 0220 	orr.w	r2, r3, #32
 8008d72:	68fb      	ldr	r3, [r7, #12]
 8008d74:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8008d76:	2303      	movs	r3, #3
 8008d78:	e00f      	b.n	8008d9a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8008d7a:	697b      	ldr	r3, [r7, #20]
 8008d7c:	2b00      	cmp	r3, #0
 8008d7e:	d00a      	beq.n	8008d96 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8008d80:	697b      	ldr	r3, [r7, #20]
 8008d82:	3b01      	subs	r3, #1
 8008d84:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8008d86:	68fb      	ldr	r3, [r7, #12]
 8008d88:	681b      	ldr	r3, [r3, #0]
 8008d8a:	689b      	ldr	r3, [r3, #8]
 8008d8c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008d90:	2b80      	cmp	r3, #128	; 0x80
 8008d92:	d0f2      	beq.n	8008d7a <SPI_EndRxTxTransaction+0x52>
 8008d94:	e000      	b.n	8008d98 <SPI_EndRxTxTransaction+0x70>
        break;
 8008d96:	bf00      	nop
  }

  return HAL_OK;
 8008d98:	2300      	movs	r3, #0
}
 8008d9a:	4618      	mov	r0, r3
 8008d9c:	3718      	adds	r7, #24
 8008d9e:	46bd      	mov	sp, r7
 8008da0:	bd80      	pop	{r7, pc}
 8008da2:	bf00      	nop
 8008da4:	20000014 	.word	0x20000014
 8008da8:	165e9f81 	.word	0x165e9f81

08008dac <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008dac:	b580      	push	{r7, lr}
 8008dae:	b082      	sub	sp, #8
 8008db0:	af00      	add	r7, sp, #0
 8008db2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	2b00      	cmp	r3, #0
 8008db8:	d101      	bne.n	8008dbe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008dba:	2301      	movs	r3, #1
 8008dbc:	e03f      	b.n	8008e3e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8008dc4:	b2db      	uxtb	r3, r3
 8008dc6:	2b00      	cmp	r3, #0
 8008dc8:	d106      	bne.n	8008dd8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	2200      	movs	r2, #0
 8008dce:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008dd2:	6878      	ldr	r0, [r7, #4]
 8008dd4:	f7f9 ff5a 	bl	8002c8c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	2224      	movs	r2, #36	; 0x24
 8008ddc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	681b      	ldr	r3, [r3, #0]
 8008de4:	68da      	ldr	r2, [r3, #12]
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	681b      	ldr	r3, [r3, #0]
 8008dea:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008dee:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008df0:	6878      	ldr	r0, [r7, #4]
 8008df2:	f000 f829 	bl	8008e48 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	681b      	ldr	r3, [r3, #0]
 8008dfa:	691a      	ldr	r2, [r3, #16]
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	681b      	ldr	r3, [r3, #0]
 8008e00:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008e04:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	681b      	ldr	r3, [r3, #0]
 8008e0a:	695a      	ldr	r2, [r3, #20]
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	681b      	ldr	r3, [r3, #0]
 8008e10:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008e14:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	681b      	ldr	r3, [r3, #0]
 8008e1a:	68da      	ldr	r2, [r3, #12]
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	681b      	ldr	r3, [r3, #0]
 8008e20:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008e24:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	2200      	movs	r2, #0
 8008e2a:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	2220      	movs	r2, #32
 8008e30:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	2220      	movs	r2, #32
 8008e38:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8008e3c:	2300      	movs	r3, #0
}
 8008e3e:	4618      	mov	r0, r3
 8008e40:	3708      	adds	r7, #8
 8008e42:	46bd      	mov	sp, r7
 8008e44:	bd80      	pop	{r7, pc}
	...

08008e48 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008e48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e4c:	b085      	sub	sp, #20
 8008e4e:	af00      	add	r7, sp, #0
 8008e50:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	681b      	ldr	r3, [r3, #0]
 8008e56:	691b      	ldr	r3, [r3, #16]
 8008e58:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	68da      	ldr	r2, [r3, #12]
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	681b      	ldr	r3, [r3, #0]
 8008e64:	430a      	orrs	r2, r1
 8008e66:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	689a      	ldr	r2, [r3, #8]
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	691b      	ldr	r3, [r3, #16]
 8008e70:	431a      	orrs	r2, r3
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	695b      	ldr	r3, [r3, #20]
 8008e76:	431a      	orrs	r2, r3
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	69db      	ldr	r3, [r3, #28]
 8008e7c:	4313      	orrs	r3, r2
 8008e7e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	681b      	ldr	r3, [r3, #0]
 8008e84:	68db      	ldr	r3, [r3, #12]
 8008e86:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8008e8a:	f023 030c 	bic.w	r3, r3, #12
 8008e8e:	687a      	ldr	r2, [r7, #4]
 8008e90:	6812      	ldr	r2, [r2, #0]
 8008e92:	68f9      	ldr	r1, [r7, #12]
 8008e94:	430b      	orrs	r3, r1
 8008e96:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	681b      	ldr	r3, [r3, #0]
 8008e9c:	695b      	ldr	r3, [r3, #20]
 8008e9e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	699a      	ldr	r2, [r3, #24]
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	681b      	ldr	r3, [r3, #0]
 8008eaa:	430a      	orrs	r2, r1
 8008eac:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	69db      	ldr	r3, [r3, #28]
 8008eb2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008eb6:	f040 818b 	bne.w	80091d0 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	681b      	ldr	r3, [r3, #0]
 8008ebe:	4ac1      	ldr	r2, [pc, #772]	; (80091c4 <UART_SetConfig+0x37c>)
 8008ec0:	4293      	cmp	r3, r2
 8008ec2:	d005      	beq.n	8008ed0 <UART_SetConfig+0x88>
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	681b      	ldr	r3, [r3, #0]
 8008ec8:	4abf      	ldr	r2, [pc, #764]	; (80091c8 <UART_SetConfig+0x380>)
 8008eca:	4293      	cmp	r3, r2
 8008ecc:	f040 80bd 	bne.w	800904a <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8008ed0:	f7fd fcfe 	bl	80068d0 <HAL_RCC_GetPCLK2Freq>
 8008ed4:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008ed6:	68bb      	ldr	r3, [r7, #8]
 8008ed8:	461d      	mov	r5, r3
 8008eda:	f04f 0600 	mov.w	r6, #0
 8008ede:	46a8      	mov	r8, r5
 8008ee0:	46b1      	mov	r9, r6
 8008ee2:	eb18 0308 	adds.w	r3, r8, r8
 8008ee6:	eb49 0409 	adc.w	r4, r9, r9
 8008eea:	4698      	mov	r8, r3
 8008eec:	46a1      	mov	r9, r4
 8008eee:	eb18 0805 	adds.w	r8, r8, r5
 8008ef2:	eb49 0906 	adc.w	r9, r9, r6
 8008ef6:	f04f 0100 	mov.w	r1, #0
 8008efa:	f04f 0200 	mov.w	r2, #0
 8008efe:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8008f02:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8008f06:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8008f0a:	4688      	mov	r8, r1
 8008f0c:	4691      	mov	r9, r2
 8008f0e:	eb18 0005 	adds.w	r0, r8, r5
 8008f12:	eb49 0106 	adc.w	r1, r9, r6
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	685b      	ldr	r3, [r3, #4]
 8008f1a:	461d      	mov	r5, r3
 8008f1c:	f04f 0600 	mov.w	r6, #0
 8008f20:	196b      	adds	r3, r5, r5
 8008f22:	eb46 0406 	adc.w	r4, r6, r6
 8008f26:	461a      	mov	r2, r3
 8008f28:	4623      	mov	r3, r4
 8008f2a:	f7f7 fefd 	bl	8000d28 <__aeabi_uldivmod>
 8008f2e:	4603      	mov	r3, r0
 8008f30:	460c      	mov	r4, r1
 8008f32:	461a      	mov	r2, r3
 8008f34:	4ba5      	ldr	r3, [pc, #660]	; (80091cc <UART_SetConfig+0x384>)
 8008f36:	fba3 2302 	umull	r2, r3, r3, r2
 8008f3a:	095b      	lsrs	r3, r3, #5
 8008f3c:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8008f40:	68bb      	ldr	r3, [r7, #8]
 8008f42:	461d      	mov	r5, r3
 8008f44:	f04f 0600 	mov.w	r6, #0
 8008f48:	46a9      	mov	r9, r5
 8008f4a:	46b2      	mov	sl, r6
 8008f4c:	eb19 0309 	adds.w	r3, r9, r9
 8008f50:	eb4a 040a 	adc.w	r4, sl, sl
 8008f54:	4699      	mov	r9, r3
 8008f56:	46a2      	mov	sl, r4
 8008f58:	eb19 0905 	adds.w	r9, r9, r5
 8008f5c:	eb4a 0a06 	adc.w	sl, sl, r6
 8008f60:	f04f 0100 	mov.w	r1, #0
 8008f64:	f04f 0200 	mov.w	r2, #0
 8008f68:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008f6c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8008f70:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8008f74:	4689      	mov	r9, r1
 8008f76:	4692      	mov	sl, r2
 8008f78:	eb19 0005 	adds.w	r0, r9, r5
 8008f7c:	eb4a 0106 	adc.w	r1, sl, r6
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	685b      	ldr	r3, [r3, #4]
 8008f84:	461d      	mov	r5, r3
 8008f86:	f04f 0600 	mov.w	r6, #0
 8008f8a:	196b      	adds	r3, r5, r5
 8008f8c:	eb46 0406 	adc.w	r4, r6, r6
 8008f90:	461a      	mov	r2, r3
 8008f92:	4623      	mov	r3, r4
 8008f94:	f7f7 fec8 	bl	8000d28 <__aeabi_uldivmod>
 8008f98:	4603      	mov	r3, r0
 8008f9a:	460c      	mov	r4, r1
 8008f9c:	461a      	mov	r2, r3
 8008f9e:	4b8b      	ldr	r3, [pc, #556]	; (80091cc <UART_SetConfig+0x384>)
 8008fa0:	fba3 1302 	umull	r1, r3, r3, r2
 8008fa4:	095b      	lsrs	r3, r3, #5
 8008fa6:	2164      	movs	r1, #100	; 0x64
 8008fa8:	fb01 f303 	mul.w	r3, r1, r3
 8008fac:	1ad3      	subs	r3, r2, r3
 8008fae:	00db      	lsls	r3, r3, #3
 8008fb0:	3332      	adds	r3, #50	; 0x32
 8008fb2:	4a86      	ldr	r2, [pc, #536]	; (80091cc <UART_SetConfig+0x384>)
 8008fb4:	fba2 2303 	umull	r2, r3, r2, r3
 8008fb8:	095b      	lsrs	r3, r3, #5
 8008fba:	005b      	lsls	r3, r3, #1
 8008fbc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8008fc0:	4498      	add	r8, r3
 8008fc2:	68bb      	ldr	r3, [r7, #8]
 8008fc4:	461d      	mov	r5, r3
 8008fc6:	f04f 0600 	mov.w	r6, #0
 8008fca:	46a9      	mov	r9, r5
 8008fcc:	46b2      	mov	sl, r6
 8008fce:	eb19 0309 	adds.w	r3, r9, r9
 8008fd2:	eb4a 040a 	adc.w	r4, sl, sl
 8008fd6:	4699      	mov	r9, r3
 8008fd8:	46a2      	mov	sl, r4
 8008fda:	eb19 0905 	adds.w	r9, r9, r5
 8008fde:	eb4a 0a06 	adc.w	sl, sl, r6
 8008fe2:	f04f 0100 	mov.w	r1, #0
 8008fe6:	f04f 0200 	mov.w	r2, #0
 8008fea:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008fee:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8008ff2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8008ff6:	4689      	mov	r9, r1
 8008ff8:	4692      	mov	sl, r2
 8008ffa:	eb19 0005 	adds.w	r0, r9, r5
 8008ffe:	eb4a 0106 	adc.w	r1, sl, r6
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	685b      	ldr	r3, [r3, #4]
 8009006:	461d      	mov	r5, r3
 8009008:	f04f 0600 	mov.w	r6, #0
 800900c:	196b      	adds	r3, r5, r5
 800900e:	eb46 0406 	adc.w	r4, r6, r6
 8009012:	461a      	mov	r2, r3
 8009014:	4623      	mov	r3, r4
 8009016:	f7f7 fe87 	bl	8000d28 <__aeabi_uldivmod>
 800901a:	4603      	mov	r3, r0
 800901c:	460c      	mov	r4, r1
 800901e:	461a      	mov	r2, r3
 8009020:	4b6a      	ldr	r3, [pc, #424]	; (80091cc <UART_SetConfig+0x384>)
 8009022:	fba3 1302 	umull	r1, r3, r3, r2
 8009026:	095b      	lsrs	r3, r3, #5
 8009028:	2164      	movs	r1, #100	; 0x64
 800902a:	fb01 f303 	mul.w	r3, r1, r3
 800902e:	1ad3      	subs	r3, r2, r3
 8009030:	00db      	lsls	r3, r3, #3
 8009032:	3332      	adds	r3, #50	; 0x32
 8009034:	4a65      	ldr	r2, [pc, #404]	; (80091cc <UART_SetConfig+0x384>)
 8009036:	fba2 2303 	umull	r2, r3, r2, r3
 800903a:	095b      	lsrs	r3, r3, #5
 800903c:	f003 0207 	and.w	r2, r3, #7
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	681b      	ldr	r3, [r3, #0]
 8009044:	4442      	add	r2, r8
 8009046:	609a      	str	r2, [r3, #8]
 8009048:	e26f      	b.n	800952a <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800904a:	f7fd fc2d 	bl	80068a8 <HAL_RCC_GetPCLK1Freq>
 800904e:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8009050:	68bb      	ldr	r3, [r7, #8]
 8009052:	461d      	mov	r5, r3
 8009054:	f04f 0600 	mov.w	r6, #0
 8009058:	46a8      	mov	r8, r5
 800905a:	46b1      	mov	r9, r6
 800905c:	eb18 0308 	adds.w	r3, r8, r8
 8009060:	eb49 0409 	adc.w	r4, r9, r9
 8009064:	4698      	mov	r8, r3
 8009066:	46a1      	mov	r9, r4
 8009068:	eb18 0805 	adds.w	r8, r8, r5
 800906c:	eb49 0906 	adc.w	r9, r9, r6
 8009070:	f04f 0100 	mov.w	r1, #0
 8009074:	f04f 0200 	mov.w	r2, #0
 8009078:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800907c:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8009080:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8009084:	4688      	mov	r8, r1
 8009086:	4691      	mov	r9, r2
 8009088:	eb18 0005 	adds.w	r0, r8, r5
 800908c:	eb49 0106 	adc.w	r1, r9, r6
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	685b      	ldr	r3, [r3, #4]
 8009094:	461d      	mov	r5, r3
 8009096:	f04f 0600 	mov.w	r6, #0
 800909a:	196b      	adds	r3, r5, r5
 800909c:	eb46 0406 	adc.w	r4, r6, r6
 80090a0:	461a      	mov	r2, r3
 80090a2:	4623      	mov	r3, r4
 80090a4:	f7f7 fe40 	bl	8000d28 <__aeabi_uldivmod>
 80090a8:	4603      	mov	r3, r0
 80090aa:	460c      	mov	r4, r1
 80090ac:	461a      	mov	r2, r3
 80090ae:	4b47      	ldr	r3, [pc, #284]	; (80091cc <UART_SetConfig+0x384>)
 80090b0:	fba3 2302 	umull	r2, r3, r3, r2
 80090b4:	095b      	lsrs	r3, r3, #5
 80090b6:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80090ba:	68bb      	ldr	r3, [r7, #8]
 80090bc:	461d      	mov	r5, r3
 80090be:	f04f 0600 	mov.w	r6, #0
 80090c2:	46a9      	mov	r9, r5
 80090c4:	46b2      	mov	sl, r6
 80090c6:	eb19 0309 	adds.w	r3, r9, r9
 80090ca:	eb4a 040a 	adc.w	r4, sl, sl
 80090ce:	4699      	mov	r9, r3
 80090d0:	46a2      	mov	sl, r4
 80090d2:	eb19 0905 	adds.w	r9, r9, r5
 80090d6:	eb4a 0a06 	adc.w	sl, sl, r6
 80090da:	f04f 0100 	mov.w	r1, #0
 80090de:	f04f 0200 	mov.w	r2, #0
 80090e2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80090e6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80090ea:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80090ee:	4689      	mov	r9, r1
 80090f0:	4692      	mov	sl, r2
 80090f2:	eb19 0005 	adds.w	r0, r9, r5
 80090f6:	eb4a 0106 	adc.w	r1, sl, r6
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	685b      	ldr	r3, [r3, #4]
 80090fe:	461d      	mov	r5, r3
 8009100:	f04f 0600 	mov.w	r6, #0
 8009104:	196b      	adds	r3, r5, r5
 8009106:	eb46 0406 	adc.w	r4, r6, r6
 800910a:	461a      	mov	r2, r3
 800910c:	4623      	mov	r3, r4
 800910e:	f7f7 fe0b 	bl	8000d28 <__aeabi_uldivmod>
 8009112:	4603      	mov	r3, r0
 8009114:	460c      	mov	r4, r1
 8009116:	461a      	mov	r2, r3
 8009118:	4b2c      	ldr	r3, [pc, #176]	; (80091cc <UART_SetConfig+0x384>)
 800911a:	fba3 1302 	umull	r1, r3, r3, r2
 800911e:	095b      	lsrs	r3, r3, #5
 8009120:	2164      	movs	r1, #100	; 0x64
 8009122:	fb01 f303 	mul.w	r3, r1, r3
 8009126:	1ad3      	subs	r3, r2, r3
 8009128:	00db      	lsls	r3, r3, #3
 800912a:	3332      	adds	r3, #50	; 0x32
 800912c:	4a27      	ldr	r2, [pc, #156]	; (80091cc <UART_SetConfig+0x384>)
 800912e:	fba2 2303 	umull	r2, r3, r2, r3
 8009132:	095b      	lsrs	r3, r3, #5
 8009134:	005b      	lsls	r3, r3, #1
 8009136:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800913a:	4498      	add	r8, r3
 800913c:	68bb      	ldr	r3, [r7, #8]
 800913e:	461d      	mov	r5, r3
 8009140:	f04f 0600 	mov.w	r6, #0
 8009144:	46a9      	mov	r9, r5
 8009146:	46b2      	mov	sl, r6
 8009148:	eb19 0309 	adds.w	r3, r9, r9
 800914c:	eb4a 040a 	adc.w	r4, sl, sl
 8009150:	4699      	mov	r9, r3
 8009152:	46a2      	mov	sl, r4
 8009154:	eb19 0905 	adds.w	r9, r9, r5
 8009158:	eb4a 0a06 	adc.w	sl, sl, r6
 800915c:	f04f 0100 	mov.w	r1, #0
 8009160:	f04f 0200 	mov.w	r2, #0
 8009164:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009168:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800916c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8009170:	4689      	mov	r9, r1
 8009172:	4692      	mov	sl, r2
 8009174:	eb19 0005 	adds.w	r0, r9, r5
 8009178:	eb4a 0106 	adc.w	r1, sl, r6
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	685b      	ldr	r3, [r3, #4]
 8009180:	461d      	mov	r5, r3
 8009182:	f04f 0600 	mov.w	r6, #0
 8009186:	196b      	adds	r3, r5, r5
 8009188:	eb46 0406 	adc.w	r4, r6, r6
 800918c:	461a      	mov	r2, r3
 800918e:	4623      	mov	r3, r4
 8009190:	f7f7 fdca 	bl	8000d28 <__aeabi_uldivmod>
 8009194:	4603      	mov	r3, r0
 8009196:	460c      	mov	r4, r1
 8009198:	461a      	mov	r2, r3
 800919a:	4b0c      	ldr	r3, [pc, #48]	; (80091cc <UART_SetConfig+0x384>)
 800919c:	fba3 1302 	umull	r1, r3, r3, r2
 80091a0:	095b      	lsrs	r3, r3, #5
 80091a2:	2164      	movs	r1, #100	; 0x64
 80091a4:	fb01 f303 	mul.w	r3, r1, r3
 80091a8:	1ad3      	subs	r3, r2, r3
 80091aa:	00db      	lsls	r3, r3, #3
 80091ac:	3332      	adds	r3, #50	; 0x32
 80091ae:	4a07      	ldr	r2, [pc, #28]	; (80091cc <UART_SetConfig+0x384>)
 80091b0:	fba2 2303 	umull	r2, r3, r2, r3
 80091b4:	095b      	lsrs	r3, r3, #5
 80091b6:	f003 0207 	and.w	r2, r3, #7
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	681b      	ldr	r3, [r3, #0]
 80091be:	4442      	add	r2, r8
 80091c0:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 80091c2:	e1b2      	b.n	800952a <UART_SetConfig+0x6e2>
 80091c4:	40011000 	.word	0x40011000
 80091c8:	40011400 	.word	0x40011400
 80091cc:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	681b      	ldr	r3, [r3, #0]
 80091d4:	4ad7      	ldr	r2, [pc, #860]	; (8009534 <UART_SetConfig+0x6ec>)
 80091d6:	4293      	cmp	r3, r2
 80091d8:	d005      	beq.n	80091e6 <UART_SetConfig+0x39e>
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	681b      	ldr	r3, [r3, #0]
 80091de:	4ad6      	ldr	r2, [pc, #856]	; (8009538 <UART_SetConfig+0x6f0>)
 80091e0:	4293      	cmp	r3, r2
 80091e2:	f040 80d1 	bne.w	8009388 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 80091e6:	f7fd fb73 	bl	80068d0 <HAL_RCC_GetPCLK2Freq>
 80091ea:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80091ec:	68bb      	ldr	r3, [r7, #8]
 80091ee:	469a      	mov	sl, r3
 80091f0:	f04f 0b00 	mov.w	fp, #0
 80091f4:	46d0      	mov	r8, sl
 80091f6:	46d9      	mov	r9, fp
 80091f8:	eb18 0308 	adds.w	r3, r8, r8
 80091fc:	eb49 0409 	adc.w	r4, r9, r9
 8009200:	4698      	mov	r8, r3
 8009202:	46a1      	mov	r9, r4
 8009204:	eb18 080a 	adds.w	r8, r8, sl
 8009208:	eb49 090b 	adc.w	r9, r9, fp
 800920c:	f04f 0100 	mov.w	r1, #0
 8009210:	f04f 0200 	mov.w	r2, #0
 8009214:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8009218:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800921c:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8009220:	4688      	mov	r8, r1
 8009222:	4691      	mov	r9, r2
 8009224:	eb1a 0508 	adds.w	r5, sl, r8
 8009228:	eb4b 0609 	adc.w	r6, fp, r9
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	685b      	ldr	r3, [r3, #4]
 8009230:	4619      	mov	r1, r3
 8009232:	f04f 0200 	mov.w	r2, #0
 8009236:	f04f 0300 	mov.w	r3, #0
 800923a:	f04f 0400 	mov.w	r4, #0
 800923e:	0094      	lsls	r4, r2, #2
 8009240:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8009244:	008b      	lsls	r3, r1, #2
 8009246:	461a      	mov	r2, r3
 8009248:	4623      	mov	r3, r4
 800924a:	4628      	mov	r0, r5
 800924c:	4631      	mov	r1, r6
 800924e:	f7f7 fd6b 	bl	8000d28 <__aeabi_uldivmod>
 8009252:	4603      	mov	r3, r0
 8009254:	460c      	mov	r4, r1
 8009256:	461a      	mov	r2, r3
 8009258:	4bb8      	ldr	r3, [pc, #736]	; (800953c <UART_SetConfig+0x6f4>)
 800925a:	fba3 2302 	umull	r2, r3, r3, r2
 800925e:	095b      	lsrs	r3, r3, #5
 8009260:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8009264:	68bb      	ldr	r3, [r7, #8]
 8009266:	469b      	mov	fp, r3
 8009268:	f04f 0c00 	mov.w	ip, #0
 800926c:	46d9      	mov	r9, fp
 800926e:	46e2      	mov	sl, ip
 8009270:	eb19 0309 	adds.w	r3, r9, r9
 8009274:	eb4a 040a 	adc.w	r4, sl, sl
 8009278:	4699      	mov	r9, r3
 800927a:	46a2      	mov	sl, r4
 800927c:	eb19 090b 	adds.w	r9, r9, fp
 8009280:	eb4a 0a0c 	adc.w	sl, sl, ip
 8009284:	f04f 0100 	mov.w	r1, #0
 8009288:	f04f 0200 	mov.w	r2, #0
 800928c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009290:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8009294:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8009298:	4689      	mov	r9, r1
 800929a:	4692      	mov	sl, r2
 800929c:	eb1b 0509 	adds.w	r5, fp, r9
 80092a0:	eb4c 060a 	adc.w	r6, ip, sl
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	685b      	ldr	r3, [r3, #4]
 80092a8:	4619      	mov	r1, r3
 80092aa:	f04f 0200 	mov.w	r2, #0
 80092ae:	f04f 0300 	mov.w	r3, #0
 80092b2:	f04f 0400 	mov.w	r4, #0
 80092b6:	0094      	lsls	r4, r2, #2
 80092b8:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80092bc:	008b      	lsls	r3, r1, #2
 80092be:	461a      	mov	r2, r3
 80092c0:	4623      	mov	r3, r4
 80092c2:	4628      	mov	r0, r5
 80092c4:	4631      	mov	r1, r6
 80092c6:	f7f7 fd2f 	bl	8000d28 <__aeabi_uldivmod>
 80092ca:	4603      	mov	r3, r0
 80092cc:	460c      	mov	r4, r1
 80092ce:	461a      	mov	r2, r3
 80092d0:	4b9a      	ldr	r3, [pc, #616]	; (800953c <UART_SetConfig+0x6f4>)
 80092d2:	fba3 1302 	umull	r1, r3, r3, r2
 80092d6:	095b      	lsrs	r3, r3, #5
 80092d8:	2164      	movs	r1, #100	; 0x64
 80092da:	fb01 f303 	mul.w	r3, r1, r3
 80092de:	1ad3      	subs	r3, r2, r3
 80092e0:	011b      	lsls	r3, r3, #4
 80092e2:	3332      	adds	r3, #50	; 0x32
 80092e4:	4a95      	ldr	r2, [pc, #596]	; (800953c <UART_SetConfig+0x6f4>)
 80092e6:	fba2 2303 	umull	r2, r3, r2, r3
 80092ea:	095b      	lsrs	r3, r3, #5
 80092ec:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80092f0:	4498      	add	r8, r3
 80092f2:	68bb      	ldr	r3, [r7, #8]
 80092f4:	469b      	mov	fp, r3
 80092f6:	f04f 0c00 	mov.w	ip, #0
 80092fa:	46d9      	mov	r9, fp
 80092fc:	46e2      	mov	sl, ip
 80092fe:	eb19 0309 	adds.w	r3, r9, r9
 8009302:	eb4a 040a 	adc.w	r4, sl, sl
 8009306:	4699      	mov	r9, r3
 8009308:	46a2      	mov	sl, r4
 800930a:	eb19 090b 	adds.w	r9, r9, fp
 800930e:	eb4a 0a0c 	adc.w	sl, sl, ip
 8009312:	f04f 0100 	mov.w	r1, #0
 8009316:	f04f 0200 	mov.w	r2, #0
 800931a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800931e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8009322:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8009326:	4689      	mov	r9, r1
 8009328:	4692      	mov	sl, r2
 800932a:	eb1b 0509 	adds.w	r5, fp, r9
 800932e:	eb4c 060a 	adc.w	r6, ip, sl
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	685b      	ldr	r3, [r3, #4]
 8009336:	4619      	mov	r1, r3
 8009338:	f04f 0200 	mov.w	r2, #0
 800933c:	f04f 0300 	mov.w	r3, #0
 8009340:	f04f 0400 	mov.w	r4, #0
 8009344:	0094      	lsls	r4, r2, #2
 8009346:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800934a:	008b      	lsls	r3, r1, #2
 800934c:	461a      	mov	r2, r3
 800934e:	4623      	mov	r3, r4
 8009350:	4628      	mov	r0, r5
 8009352:	4631      	mov	r1, r6
 8009354:	f7f7 fce8 	bl	8000d28 <__aeabi_uldivmod>
 8009358:	4603      	mov	r3, r0
 800935a:	460c      	mov	r4, r1
 800935c:	461a      	mov	r2, r3
 800935e:	4b77      	ldr	r3, [pc, #476]	; (800953c <UART_SetConfig+0x6f4>)
 8009360:	fba3 1302 	umull	r1, r3, r3, r2
 8009364:	095b      	lsrs	r3, r3, #5
 8009366:	2164      	movs	r1, #100	; 0x64
 8009368:	fb01 f303 	mul.w	r3, r1, r3
 800936c:	1ad3      	subs	r3, r2, r3
 800936e:	011b      	lsls	r3, r3, #4
 8009370:	3332      	adds	r3, #50	; 0x32
 8009372:	4a72      	ldr	r2, [pc, #456]	; (800953c <UART_SetConfig+0x6f4>)
 8009374:	fba2 2303 	umull	r2, r3, r2, r3
 8009378:	095b      	lsrs	r3, r3, #5
 800937a:	f003 020f 	and.w	r2, r3, #15
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	681b      	ldr	r3, [r3, #0]
 8009382:	4442      	add	r2, r8
 8009384:	609a      	str	r2, [r3, #8]
 8009386:	e0d0      	b.n	800952a <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8009388:	f7fd fa8e 	bl	80068a8 <HAL_RCC_GetPCLK1Freq>
 800938c:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800938e:	68bb      	ldr	r3, [r7, #8]
 8009390:	469a      	mov	sl, r3
 8009392:	f04f 0b00 	mov.w	fp, #0
 8009396:	46d0      	mov	r8, sl
 8009398:	46d9      	mov	r9, fp
 800939a:	eb18 0308 	adds.w	r3, r8, r8
 800939e:	eb49 0409 	adc.w	r4, r9, r9
 80093a2:	4698      	mov	r8, r3
 80093a4:	46a1      	mov	r9, r4
 80093a6:	eb18 080a 	adds.w	r8, r8, sl
 80093aa:	eb49 090b 	adc.w	r9, r9, fp
 80093ae:	f04f 0100 	mov.w	r1, #0
 80093b2:	f04f 0200 	mov.w	r2, #0
 80093b6:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80093ba:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80093be:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80093c2:	4688      	mov	r8, r1
 80093c4:	4691      	mov	r9, r2
 80093c6:	eb1a 0508 	adds.w	r5, sl, r8
 80093ca:	eb4b 0609 	adc.w	r6, fp, r9
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	685b      	ldr	r3, [r3, #4]
 80093d2:	4619      	mov	r1, r3
 80093d4:	f04f 0200 	mov.w	r2, #0
 80093d8:	f04f 0300 	mov.w	r3, #0
 80093dc:	f04f 0400 	mov.w	r4, #0
 80093e0:	0094      	lsls	r4, r2, #2
 80093e2:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80093e6:	008b      	lsls	r3, r1, #2
 80093e8:	461a      	mov	r2, r3
 80093ea:	4623      	mov	r3, r4
 80093ec:	4628      	mov	r0, r5
 80093ee:	4631      	mov	r1, r6
 80093f0:	f7f7 fc9a 	bl	8000d28 <__aeabi_uldivmod>
 80093f4:	4603      	mov	r3, r0
 80093f6:	460c      	mov	r4, r1
 80093f8:	461a      	mov	r2, r3
 80093fa:	4b50      	ldr	r3, [pc, #320]	; (800953c <UART_SetConfig+0x6f4>)
 80093fc:	fba3 2302 	umull	r2, r3, r3, r2
 8009400:	095b      	lsrs	r3, r3, #5
 8009402:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8009406:	68bb      	ldr	r3, [r7, #8]
 8009408:	469b      	mov	fp, r3
 800940a:	f04f 0c00 	mov.w	ip, #0
 800940e:	46d9      	mov	r9, fp
 8009410:	46e2      	mov	sl, ip
 8009412:	eb19 0309 	adds.w	r3, r9, r9
 8009416:	eb4a 040a 	adc.w	r4, sl, sl
 800941a:	4699      	mov	r9, r3
 800941c:	46a2      	mov	sl, r4
 800941e:	eb19 090b 	adds.w	r9, r9, fp
 8009422:	eb4a 0a0c 	adc.w	sl, sl, ip
 8009426:	f04f 0100 	mov.w	r1, #0
 800942a:	f04f 0200 	mov.w	r2, #0
 800942e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009432:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8009436:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800943a:	4689      	mov	r9, r1
 800943c:	4692      	mov	sl, r2
 800943e:	eb1b 0509 	adds.w	r5, fp, r9
 8009442:	eb4c 060a 	adc.w	r6, ip, sl
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	685b      	ldr	r3, [r3, #4]
 800944a:	4619      	mov	r1, r3
 800944c:	f04f 0200 	mov.w	r2, #0
 8009450:	f04f 0300 	mov.w	r3, #0
 8009454:	f04f 0400 	mov.w	r4, #0
 8009458:	0094      	lsls	r4, r2, #2
 800945a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800945e:	008b      	lsls	r3, r1, #2
 8009460:	461a      	mov	r2, r3
 8009462:	4623      	mov	r3, r4
 8009464:	4628      	mov	r0, r5
 8009466:	4631      	mov	r1, r6
 8009468:	f7f7 fc5e 	bl	8000d28 <__aeabi_uldivmod>
 800946c:	4603      	mov	r3, r0
 800946e:	460c      	mov	r4, r1
 8009470:	461a      	mov	r2, r3
 8009472:	4b32      	ldr	r3, [pc, #200]	; (800953c <UART_SetConfig+0x6f4>)
 8009474:	fba3 1302 	umull	r1, r3, r3, r2
 8009478:	095b      	lsrs	r3, r3, #5
 800947a:	2164      	movs	r1, #100	; 0x64
 800947c:	fb01 f303 	mul.w	r3, r1, r3
 8009480:	1ad3      	subs	r3, r2, r3
 8009482:	011b      	lsls	r3, r3, #4
 8009484:	3332      	adds	r3, #50	; 0x32
 8009486:	4a2d      	ldr	r2, [pc, #180]	; (800953c <UART_SetConfig+0x6f4>)
 8009488:	fba2 2303 	umull	r2, r3, r2, r3
 800948c:	095b      	lsrs	r3, r3, #5
 800948e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009492:	4498      	add	r8, r3
 8009494:	68bb      	ldr	r3, [r7, #8]
 8009496:	469b      	mov	fp, r3
 8009498:	f04f 0c00 	mov.w	ip, #0
 800949c:	46d9      	mov	r9, fp
 800949e:	46e2      	mov	sl, ip
 80094a0:	eb19 0309 	adds.w	r3, r9, r9
 80094a4:	eb4a 040a 	adc.w	r4, sl, sl
 80094a8:	4699      	mov	r9, r3
 80094aa:	46a2      	mov	sl, r4
 80094ac:	eb19 090b 	adds.w	r9, r9, fp
 80094b0:	eb4a 0a0c 	adc.w	sl, sl, ip
 80094b4:	f04f 0100 	mov.w	r1, #0
 80094b8:	f04f 0200 	mov.w	r2, #0
 80094bc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80094c0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80094c4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80094c8:	4689      	mov	r9, r1
 80094ca:	4692      	mov	sl, r2
 80094cc:	eb1b 0509 	adds.w	r5, fp, r9
 80094d0:	eb4c 060a 	adc.w	r6, ip, sl
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	685b      	ldr	r3, [r3, #4]
 80094d8:	4619      	mov	r1, r3
 80094da:	f04f 0200 	mov.w	r2, #0
 80094de:	f04f 0300 	mov.w	r3, #0
 80094e2:	f04f 0400 	mov.w	r4, #0
 80094e6:	0094      	lsls	r4, r2, #2
 80094e8:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80094ec:	008b      	lsls	r3, r1, #2
 80094ee:	461a      	mov	r2, r3
 80094f0:	4623      	mov	r3, r4
 80094f2:	4628      	mov	r0, r5
 80094f4:	4631      	mov	r1, r6
 80094f6:	f7f7 fc17 	bl	8000d28 <__aeabi_uldivmod>
 80094fa:	4603      	mov	r3, r0
 80094fc:	460c      	mov	r4, r1
 80094fe:	461a      	mov	r2, r3
 8009500:	4b0e      	ldr	r3, [pc, #56]	; (800953c <UART_SetConfig+0x6f4>)
 8009502:	fba3 1302 	umull	r1, r3, r3, r2
 8009506:	095b      	lsrs	r3, r3, #5
 8009508:	2164      	movs	r1, #100	; 0x64
 800950a:	fb01 f303 	mul.w	r3, r1, r3
 800950e:	1ad3      	subs	r3, r2, r3
 8009510:	011b      	lsls	r3, r3, #4
 8009512:	3332      	adds	r3, #50	; 0x32
 8009514:	4a09      	ldr	r2, [pc, #36]	; (800953c <UART_SetConfig+0x6f4>)
 8009516:	fba2 2303 	umull	r2, r3, r2, r3
 800951a:	095b      	lsrs	r3, r3, #5
 800951c:	f003 020f 	and.w	r2, r3, #15
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	681b      	ldr	r3, [r3, #0]
 8009524:	4442      	add	r2, r8
 8009526:	609a      	str	r2, [r3, #8]
}
 8009528:	e7ff      	b.n	800952a <UART_SetConfig+0x6e2>
 800952a:	bf00      	nop
 800952c:	3714      	adds	r7, #20
 800952e:	46bd      	mov	sp, r7
 8009530:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009534:	40011000 	.word	0x40011000
 8009538:	40011400 	.word	0x40011400
 800953c:	51eb851f 	.word	0x51eb851f

08009540 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 8009540:	b084      	sub	sp, #16
 8009542:	b480      	push	{r7}
 8009544:	b085      	sub	sp, #20
 8009546:	af00      	add	r7, sp, #0
 8009548:	6078      	str	r0, [r7, #4]
 800954a:	f107 001c 	add.w	r0, r7, #28
 800954e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8009552:	2300      	movs	r3, #0
 8009554:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 8009556:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8009558:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800955a:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 800955c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 800955e:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8009560:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 8009562:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8009564:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 8009566:	431a      	orrs	r2, r3
             Init.ClockDiv
 8009568:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 800956a:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800956c:	68fa      	ldr	r2, [r7, #12]
 800956e:	4313      	orrs	r3, r2
 8009570:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	685b      	ldr	r3, [r3, #4]
 8009576:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 800957a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800957e:	68fa      	ldr	r2, [r7, #12]
 8009580:	431a      	orrs	r2, r3
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8009586:	2300      	movs	r3, #0
}
 8009588:	4618      	mov	r0, r3
 800958a:	3714      	adds	r7, #20
 800958c:	46bd      	mov	sp, r7
 800958e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009592:	b004      	add	sp, #16
 8009594:	4770      	bx	lr

08009596 <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 8009596:	b480      	push	{r7}
 8009598:	b083      	sub	sp, #12
 800959a:	af00      	add	r7, sp, #0
 800959c:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 80095a4:	4618      	mov	r0, r3
 80095a6:	370c      	adds	r7, #12
 80095a8:	46bd      	mov	sp, r7
 80095aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095ae:	4770      	bx	lr

080095b0 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 80095b0:	b480      	push	{r7}
 80095b2:	b083      	sub	sp, #12
 80095b4:	af00      	add	r7, sp, #0
 80095b6:	6078      	str	r0, [r7, #4]
 80095b8:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 80095ba:	683b      	ldr	r3, [r7, #0]
 80095bc:	681a      	ldr	r2, [r3, #0]
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80095c4:	2300      	movs	r3, #0
}
 80095c6:	4618      	mov	r0, r3
 80095c8:	370c      	adds	r7, #12
 80095ca:	46bd      	mov	sp, r7
 80095cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095d0:	4770      	bx	lr

080095d2 <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 80095d2:	b580      	push	{r7, lr}
 80095d4:	b082      	sub	sp, #8
 80095d6:	af00      	add	r7, sp, #0
 80095d8:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	2203      	movs	r2, #3
 80095de:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 80095e0:	2002      	movs	r0, #2
 80095e2:	f7f9 fd45 	bl	8003070 <HAL_Delay>
  
  return HAL_OK;
 80095e6:	2300      	movs	r3, #0
}
 80095e8:	4618      	mov	r0, r3
 80095ea:	3708      	adds	r7, #8
 80095ec:	46bd      	mov	sp, r7
 80095ee:	bd80      	pop	{r7, pc}

080095f0 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 80095f0:	b480      	push	{r7}
 80095f2:	b083      	sub	sp, #12
 80095f4:	af00      	add	r7, sp, #0
 80095f6:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	681b      	ldr	r3, [r3, #0]
 80095fc:	f003 0303 	and.w	r3, r3, #3
}
 8009600:	4618      	mov	r0, r3
 8009602:	370c      	adds	r7, #12
 8009604:	46bd      	mov	sp, r7
 8009606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800960a:	4770      	bx	lr

0800960c <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 800960c:	b480      	push	{r7}
 800960e:	b085      	sub	sp, #20
 8009610:	af00      	add	r7, sp, #0
 8009612:	6078      	str	r0, [r7, #4]
 8009614:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8009616:	2300      	movs	r3, #0
 8009618:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 800961a:	683b      	ldr	r3, [r7, #0]
 800961c:	681a      	ldr	r2, [r3, #0]
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8009622:	683b      	ldr	r3, [r7, #0]
 8009624:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8009626:	683b      	ldr	r3, [r7, #0]
 8009628:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800962a:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800962c:	683b      	ldr	r3, [r7, #0]
 800962e:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8009630:	431a      	orrs	r2, r3
                       Command->CPSM);
 8009632:	683b      	ldr	r3, [r7, #0]
 8009634:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8009636:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8009638:	68fa      	ldr	r2, [r7, #12]
 800963a:	4313      	orrs	r3, r2
 800963c:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	68db      	ldr	r3, [r3, #12]
 8009642:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8009646:	f023 030f 	bic.w	r3, r3, #15
 800964a:	68fa      	ldr	r2, [r7, #12]
 800964c:	431a      	orrs	r2, r3
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 8009652:	2300      	movs	r3, #0
}
 8009654:	4618      	mov	r0, r3
 8009656:	3714      	adds	r7, #20
 8009658:	46bd      	mov	sp, r7
 800965a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800965e:	4770      	bx	lr

08009660 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 8009660:	b480      	push	{r7}
 8009662:	b083      	sub	sp, #12
 8009664:	af00      	add	r7, sp, #0
 8009666:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	691b      	ldr	r3, [r3, #16]
 800966c:	b2db      	uxtb	r3, r3
}
 800966e:	4618      	mov	r0, r3
 8009670:	370c      	adds	r7, #12
 8009672:	46bd      	mov	sp, r7
 8009674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009678:	4770      	bx	lr

0800967a <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 800967a:	b480      	push	{r7}
 800967c:	b085      	sub	sp, #20
 800967e:	af00      	add	r7, sp, #0
 8009680:	6078      	str	r0, [r7, #4]
 8009682:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	3314      	adds	r3, #20
 8009688:	461a      	mov	r2, r3
 800968a:	683b      	ldr	r3, [r7, #0]
 800968c:	4413      	add	r3, r2
 800968e:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8009690:	68fb      	ldr	r3, [r7, #12]
 8009692:	681b      	ldr	r3, [r3, #0]
}  
 8009694:	4618      	mov	r0, r3
 8009696:	3714      	adds	r7, #20
 8009698:	46bd      	mov	sp, r7
 800969a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800969e:	4770      	bx	lr

080096a0 <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 80096a0:	b480      	push	{r7}
 80096a2:	b085      	sub	sp, #20
 80096a4:	af00      	add	r7, sp, #0
 80096a6:	6078      	str	r0, [r7, #4]
 80096a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80096aa:	2300      	movs	r3, #0
 80096ac:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 80096ae:	683b      	ldr	r3, [r7, #0]
 80096b0:	681a      	ldr	r2, [r3, #0]
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 80096b6:	683b      	ldr	r3, [r7, #0]
 80096b8:	685a      	ldr	r2, [r3, #4]
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80096be:	683b      	ldr	r3, [r7, #0]
 80096c0:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 80096c2:	683b      	ldr	r3, [r7, #0]
 80096c4:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80096c6:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 80096c8:	683b      	ldr	r3, [r7, #0]
 80096ca:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 80096cc:	431a      	orrs	r2, r3
                       Data->DPSM);
 80096ce:	683b      	ldr	r3, [r7, #0]
 80096d0:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 80096d2:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80096d4:	68fa      	ldr	r2, [r7, #12]
 80096d6:	4313      	orrs	r3, r2
 80096d8:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80096de:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 80096e2:	68fb      	ldr	r3, [r7, #12]
 80096e4:	431a      	orrs	r2, r3
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 80096ea:	2300      	movs	r3, #0

}
 80096ec:	4618      	mov	r0, r3
 80096ee:	3714      	adds	r7, #20
 80096f0:	46bd      	mov	sp, r7
 80096f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096f6:	4770      	bx	lr

080096f8 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 80096f8:	b580      	push	{r7, lr}
 80096fa:	b088      	sub	sp, #32
 80096fc:	af00      	add	r7, sp, #0
 80096fe:	6078      	str	r0, [r7, #4]
 8009700:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8009702:	683b      	ldr	r3, [r7, #0]
 8009704:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8009706:	2310      	movs	r3, #16
 8009708:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800970a:	2340      	movs	r3, #64	; 0x40
 800970c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800970e:	2300      	movs	r3, #0
 8009710:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009712:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009716:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009718:	f107 0308 	add.w	r3, r7, #8
 800971c:	4619      	mov	r1, r3
 800971e:	6878      	ldr	r0, [r7, #4]
 8009720:	f7ff ff74 	bl	800960c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 8009724:	f241 3288 	movw	r2, #5000	; 0x1388
 8009728:	2110      	movs	r1, #16
 800972a:	6878      	ldr	r0, [r7, #4]
 800972c:	f000 fa40 	bl	8009bb0 <SDMMC_GetCmdResp1>
 8009730:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009732:	69fb      	ldr	r3, [r7, #28]
}
 8009734:	4618      	mov	r0, r3
 8009736:	3720      	adds	r7, #32
 8009738:	46bd      	mov	sp, r7
 800973a:	bd80      	pop	{r7, pc}

0800973c <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800973c:	b580      	push	{r7, lr}
 800973e:	b088      	sub	sp, #32
 8009740:	af00      	add	r7, sp, #0
 8009742:	6078      	str	r0, [r7, #4]
 8009744:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8009746:	683b      	ldr	r3, [r7, #0]
 8009748:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800974a:	2311      	movs	r3, #17
 800974c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800974e:	2340      	movs	r3, #64	; 0x40
 8009750:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009752:	2300      	movs	r3, #0
 8009754:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009756:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800975a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800975c:	f107 0308 	add.w	r3, r7, #8
 8009760:	4619      	mov	r1, r3
 8009762:	6878      	ldr	r0, [r7, #4]
 8009764:	f7ff ff52 	bl	800960c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8009768:	f241 3288 	movw	r2, #5000	; 0x1388
 800976c:	2111      	movs	r1, #17
 800976e:	6878      	ldr	r0, [r7, #4]
 8009770:	f000 fa1e 	bl	8009bb0 <SDMMC_GetCmdResp1>
 8009774:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009776:	69fb      	ldr	r3, [r7, #28]
}
 8009778:	4618      	mov	r0, r3
 800977a:	3720      	adds	r7, #32
 800977c:	46bd      	mov	sp, r7
 800977e:	bd80      	pop	{r7, pc}

08009780 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8009780:	b580      	push	{r7, lr}
 8009782:	b088      	sub	sp, #32
 8009784:	af00      	add	r7, sp, #0
 8009786:	6078      	str	r0, [r7, #4]
 8009788:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800978a:	683b      	ldr	r3, [r7, #0]
 800978c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800978e:	2312      	movs	r3, #18
 8009790:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009792:	2340      	movs	r3, #64	; 0x40
 8009794:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009796:	2300      	movs	r3, #0
 8009798:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800979a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800979e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80097a0:	f107 0308 	add.w	r3, r7, #8
 80097a4:	4619      	mov	r1, r3
 80097a6:	6878      	ldr	r0, [r7, #4]
 80097a8:	f7ff ff30 	bl	800960c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 80097ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80097b0:	2112      	movs	r1, #18
 80097b2:	6878      	ldr	r0, [r7, #4]
 80097b4:	f000 f9fc 	bl	8009bb0 <SDMMC_GetCmdResp1>
 80097b8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80097ba:	69fb      	ldr	r3, [r7, #28]
}
 80097bc:	4618      	mov	r0, r3
 80097be:	3720      	adds	r7, #32
 80097c0:	46bd      	mov	sp, r7
 80097c2:	bd80      	pop	{r7, pc}

080097c4 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 80097c4:	b580      	push	{r7, lr}
 80097c6:	b088      	sub	sp, #32
 80097c8:	af00      	add	r7, sp, #0
 80097ca:	6078      	str	r0, [r7, #4]
 80097cc:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 80097ce:	683b      	ldr	r3, [r7, #0]
 80097d0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 80097d2:	2318      	movs	r3, #24
 80097d4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80097d6:	2340      	movs	r3, #64	; 0x40
 80097d8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80097da:	2300      	movs	r3, #0
 80097dc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80097de:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80097e2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80097e4:	f107 0308 	add.w	r3, r7, #8
 80097e8:	4619      	mov	r1, r3
 80097ea:	6878      	ldr	r0, [r7, #4]
 80097ec:	f7ff ff0e 	bl	800960c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 80097f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80097f4:	2118      	movs	r1, #24
 80097f6:	6878      	ldr	r0, [r7, #4]
 80097f8:	f000 f9da 	bl	8009bb0 <SDMMC_GetCmdResp1>
 80097fc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80097fe:	69fb      	ldr	r3, [r7, #28]
}
 8009800:	4618      	mov	r0, r3
 8009802:	3720      	adds	r7, #32
 8009804:	46bd      	mov	sp, r7
 8009806:	bd80      	pop	{r7, pc}

08009808 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8009808:	b580      	push	{r7, lr}
 800980a:	b088      	sub	sp, #32
 800980c:	af00      	add	r7, sp, #0
 800980e:	6078      	str	r0, [r7, #4]
 8009810:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8009812:	683b      	ldr	r3, [r7, #0]
 8009814:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8009816:	2319      	movs	r3, #25
 8009818:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800981a:	2340      	movs	r3, #64	; 0x40
 800981c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800981e:	2300      	movs	r3, #0
 8009820:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009822:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009826:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009828:	f107 0308 	add.w	r3, r7, #8
 800982c:	4619      	mov	r1, r3
 800982e:	6878      	ldr	r0, [r7, #4]
 8009830:	f7ff feec 	bl	800960c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8009834:	f241 3288 	movw	r2, #5000	; 0x1388
 8009838:	2119      	movs	r1, #25
 800983a:	6878      	ldr	r0, [r7, #4]
 800983c:	f000 f9b8 	bl	8009bb0 <SDMMC_GetCmdResp1>
 8009840:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009842:	69fb      	ldr	r3, [r7, #28]
}
 8009844:	4618      	mov	r0, r3
 8009846:	3720      	adds	r7, #32
 8009848:	46bd      	mov	sp, r7
 800984a:	bd80      	pop	{r7, pc}

0800984c <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 800984c:	b580      	push	{r7, lr}
 800984e:	b088      	sub	sp, #32
 8009850:	af00      	add	r7, sp, #0
 8009852:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8009854:	2300      	movs	r3, #0
 8009856:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8009858:	230c      	movs	r3, #12
 800985a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800985c:	2340      	movs	r3, #64	; 0x40
 800985e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009860:	2300      	movs	r3, #0
 8009862:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009864:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009868:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800986a:	f107 0308 	add.w	r3, r7, #8
 800986e:	4619      	mov	r1, r3
 8009870:	6878      	ldr	r0, [r7, #4]
 8009872:	f7ff fecb 	bl	800960c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 8009876:	4a05      	ldr	r2, [pc, #20]	; (800988c <SDMMC_CmdStopTransfer+0x40>)
 8009878:	210c      	movs	r1, #12
 800987a:	6878      	ldr	r0, [r7, #4]
 800987c:	f000 f998 	bl	8009bb0 <SDMMC_GetCmdResp1>
 8009880:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009882:	69fb      	ldr	r3, [r7, #28]
}
 8009884:	4618      	mov	r0, r3
 8009886:	3720      	adds	r7, #32
 8009888:	46bd      	mov	sp, r7
 800988a:	bd80      	pop	{r7, pc}
 800988c:	05f5e100 	.word	0x05f5e100

08009890 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 8009890:	b580      	push	{r7, lr}
 8009892:	b08a      	sub	sp, #40	; 0x28
 8009894:	af00      	add	r7, sp, #0
 8009896:	60f8      	str	r0, [r7, #12]
 8009898:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800989c:	683b      	ldr	r3, [r7, #0]
 800989e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 80098a0:	2307      	movs	r3, #7
 80098a2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80098a4:	2340      	movs	r3, #64	; 0x40
 80098a6:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80098a8:	2300      	movs	r3, #0
 80098aa:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80098ac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80098b0:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80098b2:	f107 0310 	add.w	r3, r7, #16
 80098b6:	4619      	mov	r1, r3
 80098b8:	68f8      	ldr	r0, [r7, #12]
 80098ba:	f7ff fea7 	bl	800960c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 80098be:	f241 3288 	movw	r2, #5000	; 0x1388
 80098c2:	2107      	movs	r1, #7
 80098c4:	68f8      	ldr	r0, [r7, #12]
 80098c6:	f000 f973 	bl	8009bb0 <SDMMC_GetCmdResp1>
 80098ca:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 80098cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80098ce:	4618      	mov	r0, r3
 80098d0:	3728      	adds	r7, #40	; 0x28
 80098d2:	46bd      	mov	sp, r7
 80098d4:	bd80      	pop	{r7, pc}

080098d6 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 80098d6:	b580      	push	{r7, lr}
 80098d8:	b088      	sub	sp, #32
 80098da:	af00      	add	r7, sp, #0
 80098dc:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 80098de:	2300      	movs	r3, #0
 80098e0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 80098e2:	2300      	movs	r3, #0
 80098e4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 80098e6:	2300      	movs	r3, #0
 80098e8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80098ea:	2300      	movs	r3, #0
 80098ec:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80098ee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80098f2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80098f4:	f107 0308 	add.w	r3, r7, #8
 80098f8:	4619      	mov	r1, r3
 80098fa:	6878      	ldr	r0, [r7, #4]
 80098fc:	f7ff fe86 	bl	800960c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 8009900:	6878      	ldr	r0, [r7, #4]
 8009902:	f000 f92d 	bl	8009b60 <SDMMC_GetCmdError>
 8009906:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009908:	69fb      	ldr	r3, [r7, #28]
}
 800990a:	4618      	mov	r0, r3
 800990c:	3720      	adds	r7, #32
 800990e:	46bd      	mov	sp, r7
 8009910:	bd80      	pop	{r7, pc}

08009912 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 8009912:	b580      	push	{r7, lr}
 8009914:	b088      	sub	sp, #32
 8009916:	af00      	add	r7, sp, #0
 8009918:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800991a:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800991e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8009920:	2308      	movs	r3, #8
 8009922:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009924:	2340      	movs	r3, #64	; 0x40
 8009926:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009928:	2300      	movs	r3, #0
 800992a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800992c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009930:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009932:	f107 0308 	add.w	r3, r7, #8
 8009936:	4619      	mov	r1, r3
 8009938:	6878      	ldr	r0, [r7, #4]
 800993a:	f7ff fe67 	bl	800960c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 800993e:	6878      	ldr	r0, [r7, #4]
 8009940:	f000 fb16 	bl	8009f70 <SDMMC_GetCmdResp7>
 8009944:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009946:	69fb      	ldr	r3, [r7, #28]
}
 8009948:	4618      	mov	r0, r3
 800994a:	3720      	adds	r7, #32
 800994c:	46bd      	mov	sp, r7
 800994e:	bd80      	pop	{r7, pc}

08009950 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8009950:	b580      	push	{r7, lr}
 8009952:	b088      	sub	sp, #32
 8009954:	af00      	add	r7, sp, #0
 8009956:	6078      	str	r0, [r7, #4]
 8009958:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800995a:	683b      	ldr	r3, [r7, #0]
 800995c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800995e:	2337      	movs	r3, #55	; 0x37
 8009960:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009962:	2340      	movs	r3, #64	; 0x40
 8009964:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009966:	2300      	movs	r3, #0
 8009968:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800996a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800996e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009970:	f107 0308 	add.w	r3, r7, #8
 8009974:	4619      	mov	r1, r3
 8009976:	6878      	ldr	r0, [r7, #4]
 8009978:	f7ff fe48 	bl	800960c <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 800997c:	f241 3288 	movw	r2, #5000	; 0x1388
 8009980:	2137      	movs	r1, #55	; 0x37
 8009982:	6878      	ldr	r0, [r7, #4]
 8009984:	f000 f914 	bl	8009bb0 <SDMMC_GetCmdResp1>
 8009988:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800998a:	69fb      	ldr	r3, [r7, #28]
}
 800998c:	4618      	mov	r0, r3
 800998e:	3720      	adds	r7, #32
 8009990:	46bd      	mov	sp, r7
 8009992:	bd80      	pop	{r7, pc}

08009994 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8009994:	b580      	push	{r7, lr}
 8009996:	b088      	sub	sp, #32
 8009998:	af00      	add	r7, sp, #0
 800999a:	6078      	str	r0, [r7, #4]
 800999c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800999e:	683b      	ldr	r3, [r7, #0]
 80099a0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80099a4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80099a8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 80099aa:	2329      	movs	r3, #41	; 0x29
 80099ac:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80099ae:	2340      	movs	r3, #64	; 0x40
 80099b0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80099b2:	2300      	movs	r3, #0
 80099b4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80099b6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80099ba:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80099bc:	f107 0308 	add.w	r3, r7, #8
 80099c0:	4619      	mov	r1, r3
 80099c2:	6878      	ldr	r0, [r7, #4]
 80099c4:	f7ff fe22 	bl	800960c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 80099c8:	6878      	ldr	r0, [r7, #4]
 80099ca:	f000 fa23 	bl	8009e14 <SDMMC_GetCmdResp3>
 80099ce:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80099d0:	69fb      	ldr	r3, [r7, #28]
}
 80099d2:	4618      	mov	r0, r3
 80099d4:	3720      	adds	r7, #32
 80099d6:	46bd      	mov	sp, r7
 80099d8:	bd80      	pop	{r7, pc}

080099da <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 80099da:	b580      	push	{r7, lr}
 80099dc:	b088      	sub	sp, #32
 80099de:	af00      	add	r7, sp, #0
 80099e0:	6078      	str	r0, [r7, #4]
 80099e2:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 80099e4:	683b      	ldr	r3, [r7, #0]
 80099e6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 80099e8:	2306      	movs	r3, #6
 80099ea:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80099ec:	2340      	movs	r3, #64	; 0x40
 80099ee:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80099f0:	2300      	movs	r3, #0
 80099f2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80099f4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80099f8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80099fa:	f107 0308 	add.w	r3, r7, #8
 80099fe:	4619      	mov	r1, r3
 8009a00:	6878      	ldr	r0, [r7, #4]
 8009a02:	f7ff fe03 	bl	800960c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 8009a06:	f241 3288 	movw	r2, #5000	; 0x1388
 8009a0a:	2106      	movs	r1, #6
 8009a0c:	6878      	ldr	r0, [r7, #4]
 8009a0e:	f000 f8cf 	bl	8009bb0 <SDMMC_GetCmdResp1>
 8009a12:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009a14:	69fb      	ldr	r3, [r7, #28]
}
 8009a16:	4618      	mov	r0, r3
 8009a18:	3720      	adds	r7, #32
 8009a1a:	46bd      	mov	sp, r7
 8009a1c:	bd80      	pop	{r7, pc}

08009a1e <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 8009a1e:	b580      	push	{r7, lr}
 8009a20:	b088      	sub	sp, #32
 8009a22:	af00      	add	r7, sp, #0
 8009a24:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8009a26:	2300      	movs	r3, #0
 8009a28:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8009a2a:	2333      	movs	r3, #51	; 0x33
 8009a2c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009a2e:	2340      	movs	r3, #64	; 0x40
 8009a30:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009a32:	2300      	movs	r3, #0
 8009a34:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009a36:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009a3a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009a3c:	f107 0308 	add.w	r3, r7, #8
 8009a40:	4619      	mov	r1, r3
 8009a42:	6878      	ldr	r0, [r7, #4]
 8009a44:	f7ff fde2 	bl	800960c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 8009a48:	f241 3288 	movw	r2, #5000	; 0x1388
 8009a4c:	2133      	movs	r1, #51	; 0x33
 8009a4e:	6878      	ldr	r0, [r7, #4]
 8009a50:	f000 f8ae 	bl	8009bb0 <SDMMC_GetCmdResp1>
 8009a54:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009a56:	69fb      	ldr	r3, [r7, #28]
}
 8009a58:	4618      	mov	r0, r3
 8009a5a:	3720      	adds	r7, #32
 8009a5c:	46bd      	mov	sp, r7
 8009a5e:	bd80      	pop	{r7, pc}

08009a60 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 8009a60:	b580      	push	{r7, lr}
 8009a62:	b088      	sub	sp, #32
 8009a64:	af00      	add	r7, sp, #0
 8009a66:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8009a68:	2300      	movs	r3, #0
 8009a6a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8009a6c:	2302      	movs	r3, #2
 8009a6e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8009a70:	23c0      	movs	r3, #192	; 0xc0
 8009a72:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009a74:	2300      	movs	r3, #0
 8009a76:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009a78:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009a7c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009a7e:	f107 0308 	add.w	r3, r7, #8
 8009a82:	4619      	mov	r1, r3
 8009a84:	6878      	ldr	r0, [r7, #4]
 8009a86:	f7ff fdc1 	bl	800960c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8009a8a:	6878      	ldr	r0, [r7, #4]
 8009a8c:	f000 f97c 	bl	8009d88 <SDMMC_GetCmdResp2>
 8009a90:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009a92:	69fb      	ldr	r3, [r7, #28]
}
 8009a94:	4618      	mov	r0, r3
 8009a96:	3720      	adds	r7, #32
 8009a98:	46bd      	mov	sp, r7
 8009a9a:	bd80      	pop	{r7, pc}

08009a9c <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8009a9c:	b580      	push	{r7, lr}
 8009a9e:	b088      	sub	sp, #32
 8009aa0:	af00      	add	r7, sp, #0
 8009aa2:	6078      	str	r0, [r7, #4]
 8009aa4:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8009aa6:	683b      	ldr	r3, [r7, #0]
 8009aa8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8009aaa:	2309      	movs	r3, #9
 8009aac:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8009aae:	23c0      	movs	r3, #192	; 0xc0
 8009ab0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009ab2:	2300      	movs	r3, #0
 8009ab4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009ab6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009aba:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009abc:	f107 0308 	add.w	r3, r7, #8
 8009ac0:	4619      	mov	r1, r3
 8009ac2:	6878      	ldr	r0, [r7, #4]
 8009ac4:	f7ff fda2 	bl	800960c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8009ac8:	6878      	ldr	r0, [r7, #4]
 8009aca:	f000 f95d 	bl	8009d88 <SDMMC_GetCmdResp2>
 8009ace:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009ad0:	69fb      	ldr	r3, [r7, #28]
}
 8009ad2:	4618      	mov	r0, r3
 8009ad4:	3720      	adds	r7, #32
 8009ad6:	46bd      	mov	sp, r7
 8009ad8:	bd80      	pop	{r7, pc}

08009ada <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 8009ada:	b580      	push	{r7, lr}
 8009adc:	b088      	sub	sp, #32
 8009ade:	af00      	add	r7, sp, #0
 8009ae0:	6078      	str	r0, [r7, #4]
 8009ae2:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8009ae4:	2300      	movs	r3, #0
 8009ae6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8009ae8:	2303      	movs	r3, #3
 8009aea:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009aec:	2340      	movs	r3, #64	; 0x40
 8009aee:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009af0:	2300      	movs	r3, #0
 8009af2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009af4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009af8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009afa:	f107 0308 	add.w	r3, r7, #8
 8009afe:	4619      	mov	r1, r3
 8009b00:	6878      	ldr	r0, [r7, #4]
 8009b02:	f7ff fd83 	bl	800960c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8009b06:	683a      	ldr	r2, [r7, #0]
 8009b08:	2103      	movs	r1, #3
 8009b0a:	6878      	ldr	r0, [r7, #4]
 8009b0c:	f000 f9bc 	bl	8009e88 <SDMMC_GetCmdResp6>
 8009b10:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009b12:	69fb      	ldr	r3, [r7, #28]
}
 8009b14:	4618      	mov	r0, r3
 8009b16:	3720      	adds	r7, #32
 8009b18:	46bd      	mov	sp, r7
 8009b1a:	bd80      	pop	{r7, pc}

08009b1c <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8009b1c:	b580      	push	{r7, lr}
 8009b1e:	b088      	sub	sp, #32
 8009b20:	af00      	add	r7, sp, #0
 8009b22:	6078      	str	r0, [r7, #4]
 8009b24:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 8009b26:	683b      	ldr	r3, [r7, #0]
 8009b28:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8009b2a:	230d      	movs	r3, #13
 8009b2c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009b2e:	2340      	movs	r3, #64	; 0x40
 8009b30:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009b32:	2300      	movs	r3, #0
 8009b34:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009b36:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009b3a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009b3c:	f107 0308 	add.w	r3, r7, #8
 8009b40:	4619      	mov	r1, r3
 8009b42:	6878      	ldr	r0, [r7, #4]
 8009b44:	f7ff fd62 	bl	800960c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 8009b48:	f241 3288 	movw	r2, #5000	; 0x1388
 8009b4c:	210d      	movs	r1, #13
 8009b4e:	6878      	ldr	r0, [r7, #4]
 8009b50:	f000 f82e 	bl	8009bb0 <SDMMC_GetCmdResp1>
 8009b54:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009b56:	69fb      	ldr	r3, [r7, #28]
}
 8009b58:	4618      	mov	r0, r3
 8009b5a:	3720      	adds	r7, #32
 8009b5c:	46bd      	mov	sp, r7
 8009b5e:	bd80      	pop	{r7, pc}

08009b60 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 8009b60:	b490      	push	{r4, r7}
 8009b62:	b082      	sub	sp, #8
 8009b64:	af00      	add	r7, sp, #0
 8009b66:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8009b68:	4b0f      	ldr	r3, [pc, #60]	; (8009ba8 <SDMMC_GetCmdError+0x48>)
 8009b6a:	681b      	ldr	r3, [r3, #0]
 8009b6c:	4a0f      	ldr	r2, [pc, #60]	; (8009bac <SDMMC_GetCmdError+0x4c>)
 8009b6e:	fba2 2303 	umull	r2, r3, r2, r3
 8009b72:	0a5b      	lsrs	r3, r3, #9
 8009b74:	f241 3288 	movw	r2, #5000	; 0x1388
 8009b78:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8009b7c:	4623      	mov	r3, r4
 8009b7e:	1e5c      	subs	r4, r3, #1
 8009b80:	2b00      	cmp	r3, #0
 8009b82:	d102      	bne.n	8009b8a <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009b84:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009b88:	e009      	b.n	8009b9e <SDMMC_GetCmdError+0x3e>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009b8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009b92:	2b00      	cmp	r3, #0
 8009b94:	d0f2      	beq.n	8009b7c <SDMMC_GetCmdError+0x1c>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	22c5      	movs	r2, #197	; 0xc5
 8009b9a:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 8009b9c:	2300      	movs	r3, #0
}
 8009b9e:	4618      	mov	r0, r3
 8009ba0:	3708      	adds	r7, #8
 8009ba2:	46bd      	mov	sp, r7
 8009ba4:	bc90      	pop	{r4, r7}
 8009ba6:	4770      	bx	lr
 8009ba8:	20000014 	.word	0x20000014
 8009bac:	10624dd3 	.word	0x10624dd3

08009bb0 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 8009bb0:	b590      	push	{r4, r7, lr}
 8009bb2:	b087      	sub	sp, #28
 8009bb4:	af00      	add	r7, sp, #0
 8009bb6:	60f8      	str	r0, [r7, #12]
 8009bb8:	460b      	mov	r3, r1
 8009bba:	607a      	str	r2, [r7, #4]
 8009bbc:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8009bbe:	4b6f      	ldr	r3, [pc, #444]	; (8009d7c <SDMMC_GetCmdResp1+0x1cc>)
 8009bc0:	681b      	ldr	r3, [r3, #0]
 8009bc2:	4a6f      	ldr	r2, [pc, #444]	; (8009d80 <SDMMC_GetCmdResp1+0x1d0>)
 8009bc4:	fba2 2303 	umull	r2, r3, r2, r3
 8009bc8:	0a5b      	lsrs	r3, r3, #9
 8009bca:	687a      	ldr	r2, [r7, #4]
 8009bcc:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8009bd0:	4623      	mov	r3, r4
 8009bd2:	1e5c      	subs	r4, r3, #1
 8009bd4:	2b00      	cmp	r3, #0
 8009bd6:	d102      	bne.n	8009bde <SDMMC_GetCmdResp1+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009bd8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009bdc:	e0c9      	b.n	8009d72 <SDMMC_GetCmdResp1+0x1c2>
    }
    sta_reg = SDIOx->STA;
 8009bde:	68fb      	ldr	r3, [r7, #12]
 8009be0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009be2:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8009be4:	697b      	ldr	r3, [r7, #20]
 8009be6:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8009bea:	2b00      	cmp	r3, #0
 8009bec:	d0f0      	beq.n	8009bd0 <SDMMC_GetCmdResp1+0x20>
 8009bee:	697b      	ldr	r3, [r7, #20]
 8009bf0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8009bf4:	2b00      	cmp	r3, #0
 8009bf6:	d1eb      	bne.n	8009bd0 <SDMMC_GetCmdResp1+0x20>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8009bf8:	68fb      	ldr	r3, [r7, #12]
 8009bfa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009bfc:	f003 0304 	and.w	r3, r3, #4
 8009c00:	2b00      	cmp	r3, #0
 8009c02:	d004      	beq.n	8009c0e <SDMMC_GetCmdResp1+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8009c04:	68fb      	ldr	r3, [r7, #12]
 8009c06:	2204      	movs	r2, #4
 8009c08:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009c0a:	2304      	movs	r3, #4
 8009c0c:	e0b1      	b.n	8009d72 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8009c0e:	68fb      	ldr	r3, [r7, #12]
 8009c10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009c12:	f003 0301 	and.w	r3, r3, #1
 8009c16:	2b00      	cmp	r3, #0
 8009c18:	d004      	beq.n	8009c24 <SDMMC_GetCmdResp1+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8009c1a:	68fb      	ldr	r3, [r7, #12]
 8009c1c:	2201      	movs	r2, #1
 8009c1e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009c20:	2301      	movs	r3, #1
 8009c22:	e0a6      	b.n	8009d72 <SDMMC_GetCmdResp1+0x1c2>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8009c24:	68fb      	ldr	r3, [r7, #12]
 8009c26:	22c5      	movs	r2, #197	; 0xc5
 8009c28:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8009c2a:	68f8      	ldr	r0, [r7, #12]
 8009c2c:	f7ff fd18 	bl	8009660 <SDIO_GetCommandResponse>
 8009c30:	4603      	mov	r3, r0
 8009c32:	461a      	mov	r2, r3
 8009c34:	7afb      	ldrb	r3, [r7, #11]
 8009c36:	4293      	cmp	r3, r2
 8009c38:	d001      	beq.n	8009c3e <SDMMC_GetCmdResp1+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009c3a:	2301      	movs	r3, #1
 8009c3c:	e099      	b.n	8009d72 <SDMMC_GetCmdResp1+0x1c2>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8009c3e:	2100      	movs	r1, #0
 8009c40:	68f8      	ldr	r0, [r7, #12]
 8009c42:	f7ff fd1a 	bl	800967a <SDIO_GetResponse>
 8009c46:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8009c48:	693a      	ldr	r2, [r7, #16]
 8009c4a:	4b4e      	ldr	r3, [pc, #312]	; (8009d84 <SDMMC_GetCmdResp1+0x1d4>)
 8009c4c:	4013      	ands	r3, r2
 8009c4e:	2b00      	cmp	r3, #0
 8009c50:	d101      	bne.n	8009c56 <SDMMC_GetCmdResp1+0xa6>
  {
    return SDMMC_ERROR_NONE;
 8009c52:	2300      	movs	r3, #0
 8009c54:	e08d      	b.n	8009d72 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8009c56:	693b      	ldr	r3, [r7, #16]
 8009c58:	2b00      	cmp	r3, #0
 8009c5a:	da02      	bge.n	8009c62 <SDMMC_GetCmdResp1+0xb2>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8009c5c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009c60:	e087      	b.n	8009d72 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8009c62:	693b      	ldr	r3, [r7, #16]
 8009c64:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8009c68:	2b00      	cmp	r3, #0
 8009c6a:	d001      	beq.n	8009c70 <SDMMC_GetCmdResp1+0xc0>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8009c6c:	2340      	movs	r3, #64	; 0x40
 8009c6e:	e080      	b.n	8009d72 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8009c70:	693b      	ldr	r3, [r7, #16]
 8009c72:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009c76:	2b00      	cmp	r3, #0
 8009c78:	d001      	beq.n	8009c7e <SDMMC_GetCmdResp1+0xce>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8009c7a:	2380      	movs	r3, #128	; 0x80
 8009c7c:	e079      	b.n	8009d72 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8009c7e:	693b      	ldr	r3, [r7, #16]
 8009c80:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009c84:	2b00      	cmp	r3, #0
 8009c86:	d002      	beq.n	8009c8e <SDMMC_GetCmdResp1+0xde>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8009c88:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009c8c:	e071      	b.n	8009d72 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8009c8e:	693b      	ldr	r3, [r7, #16]
 8009c90:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009c94:	2b00      	cmp	r3, #0
 8009c96:	d002      	beq.n	8009c9e <SDMMC_GetCmdResp1+0xee>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8009c98:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009c9c:	e069      	b.n	8009d72 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8009c9e:	693b      	ldr	r3, [r7, #16]
 8009ca0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8009ca4:	2b00      	cmp	r3, #0
 8009ca6:	d002      	beq.n	8009cae <SDMMC_GetCmdResp1+0xfe>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8009ca8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009cac:	e061      	b.n	8009d72 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8009cae:	693b      	ldr	r3, [r7, #16]
 8009cb0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009cb4:	2b00      	cmp	r3, #0
 8009cb6:	d002      	beq.n	8009cbe <SDMMC_GetCmdResp1+0x10e>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8009cb8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009cbc:	e059      	b.n	8009d72 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8009cbe:	693b      	ldr	r3, [r7, #16]
 8009cc0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009cc4:	2b00      	cmp	r3, #0
 8009cc6:	d002      	beq.n	8009cce <SDMMC_GetCmdResp1+0x11e>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8009cc8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009ccc:	e051      	b.n	8009d72 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8009cce:	693b      	ldr	r3, [r7, #16]
 8009cd0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009cd4:	2b00      	cmp	r3, #0
 8009cd6:	d002      	beq.n	8009cde <SDMMC_GetCmdResp1+0x12e>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8009cd8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8009cdc:	e049      	b.n	8009d72 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8009cde:	693b      	ldr	r3, [r7, #16]
 8009ce0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009ce4:	2b00      	cmp	r3, #0
 8009ce6:	d002      	beq.n	8009cee <SDMMC_GetCmdResp1+0x13e>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8009ce8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8009cec:	e041      	b.n	8009d72 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8009cee:	693b      	ldr	r3, [r7, #16]
 8009cf0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009cf4:	2b00      	cmp	r3, #0
 8009cf6:	d002      	beq.n	8009cfe <SDMMC_GetCmdResp1+0x14e>
  {
    return SDMMC_ERROR_CC_ERR;
 8009cf8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009cfc:	e039      	b.n	8009d72 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8009cfe:	693b      	ldr	r3, [r7, #16]
 8009d00:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009d04:	2b00      	cmp	r3, #0
 8009d06:	d002      	beq.n	8009d0e <SDMMC_GetCmdResp1+0x15e>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8009d08:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8009d0c:	e031      	b.n	8009d72 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8009d0e:	693b      	ldr	r3, [r7, #16]
 8009d10:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009d14:	2b00      	cmp	r3, #0
 8009d16:	d002      	beq.n	8009d1e <SDMMC_GetCmdResp1+0x16e>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8009d18:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8009d1c:	e029      	b.n	8009d72 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8009d1e:	693b      	ldr	r3, [r7, #16]
 8009d20:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009d24:	2b00      	cmp	r3, #0
 8009d26:	d002      	beq.n	8009d2e <SDMMC_GetCmdResp1+0x17e>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8009d28:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8009d2c:	e021      	b.n	8009d72 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8009d2e:	693b      	ldr	r3, [r7, #16]
 8009d30:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009d34:	2b00      	cmp	r3, #0
 8009d36:	d002      	beq.n	8009d3e <SDMMC_GetCmdResp1+0x18e>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8009d38:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8009d3c:	e019      	b.n	8009d72 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8009d3e:	693b      	ldr	r3, [r7, #16]
 8009d40:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009d44:	2b00      	cmp	r3, #0
 8009d46:	d002      	beq.n	8009d4e <SDMMC_GetCmdResp1+0x19e>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8009d48:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8009d4c:	e011      	b.n	8009d72 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8009d4e:	693b      	ldr	r3, [r7, #16]
 8009d50:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009d54:	2b00      	cmp	r3, #0
 8009d56:	d002      	beq.n	8009d5e <SDMMC_GetCmdResp1+0x1ae>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8009d58:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8009d5c:	e009      	b.n	8009d72 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8009d5e:	693b      	ldr	r3, [r7, #16]
 8009d60:	f003 0308 	and.w	r3, r3, #8
 8009d64:	2b00      	cmp	r3, #0
 8009d66:	d002      	beq.n	8009d6e <SDMMC_GetCmdResp1+0x1be>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8009d68:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8009d6c:	e001      	b.n	8009d72 <SDMMC_GetCmdResp1+0x1c2>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8009d6e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8009d72:	4618      	mov	r0, r3
 8009d74:	371c      	adds	r7, #28
 8009d76:	46bd      	mov	sp, r7
 8009d78:	bd90      	pop	{r4, r7, pc}
 8009d7a:	bf00      	nop
 8009d7c:	20000014 	.word	0x20000014
 8009d80:	10624dd3 	.word	0x10624dd3
 8009d84:	fdffe008 	.word	0xfdffe008

08009d88 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 8009d88:	b490      	push	{r4, r7}
 8009d8a:	b084      	sub	sp, #16
 8009d8c:	af00      	add	r7, sp, #0
 8009d8e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8009d90:	4b1e      	ldr	r3, [pc, #120]	; (8009e0c <SDMMC_GetCmdResp2+0x84>)
 8009d92:	681b      	ldr	r3, [r3, #0]
 8009d94:	4a1e      	ldr	r2, [pc, #120]	; (8009e10 <SDMMC_GetCmdResp2+0x88>)
 8009d96:	fba2 2303 	umull	r2, r3, r2, r3
 8009d9a:	0a5b      	lsrs	r3, r3, #9
 8009d9c:	f241 3288 	movw	r2, #5000	; 0x1388
 8009da0:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8009da4:	4623      	mov	r3, r4
 8009da6:	1e5c      	subs	r4, r3, #1
 8009da8:	2b00      	cmp	r3, #0
 8009daa:	d102      	bne.n	8009db2 <SDMMC_GetCmdResp2+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009dac:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009db0:	e026      	b.n	8009e00 <SDMMC_GetCmdResp2+0x78>
    }
    sta_reg = SDIOx->STA;
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009db6:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8009db8:	68fb      	ldr	r3, [r7, #12]
 8009dba:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8009dbe:	2b00      	cmp	r3, #0
 8009dc0:	d0f0      	beq.n	8009da4 <SDMMC_GetCmdResp2+0x1c>
 8009dc2:	68fb      	ldr	r3, [r7, #12]
 8009dc4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8009dc8:	2b00      	cmp	r3, #0
 8009dca:	d1eb      	bne.n	8009da4 <SDMMC_GetCmdResp2+0x1c>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009dd0:	f003 0304 	and.w	r3, r3, #4
 8009dd4:	2b00      	cmp	r3, #0
 8009dd6:	d004      	beq.n	8009de2 <SDMMC_GetCmdResp2+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	2204      	movs	r2, #4
 8009ddc:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009dde:	2304      	movs	r3, #4
 8009de0:	e00e      	b.n	8009e00 <SDMMC_GetCmdResp2+0x78>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009de6:	f003 0301 	and.w	r3, r3, #1
 8009dea:	2b00      	cmp	r3, #0
 8009dec:	d004      	beq.n	8009df8 <SDMMC_GetCmdResp2+0x70>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	2201      	movs	r2, #1
 8009df2:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009df4:	2301      	movs	r3, #1
 8009df6:	e003      	b.n	8009e00 <SDMMC_GetCmdResp2+0x78>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	22c5      	movs	r2, #197	; 0xc5
 8009dfc:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8009dfe:	2300      	movs	r3, #0
}
 8009e00:	4618      	mov	r0, r3
 8009e02:	3710      	adds	r7, #16
 8009e04:	46bd      	mov	sp, r7
 8009e06:	bc90      	pop	{r4, r7}
 8009e08:	4770      	bx	lr
 8009e0a:	bf00      	nop
 8009e0c:	20000014 	.word	0x20000014
 8009e10:	10624dd3 	.word	0x10624dd3

08009e14 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 8009e14:	b490      	push	{r4, r7}
 8009e16:	b084      	sub	sp, #16
 8009e18:	af00      	add	r7, sp, #0
 8009e1a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8009e1c:	4b18      	ldr	r3, [pc, #96]	; (8009e80 <SDMMC_GetCmdResp3+0x6c>)
 8009e1e:	681b      	ldr	r3, [r3, #0]
 8009e20:	4a18      	ldr	r2, [pc, #96]	; (8009e84 <SDMMC_GetCmdResp3+0x70>)
 8009e22:	fba2 2303 	umull	r2, r3, r2, r3
 8009e26:	0a5b      	lsrs	r3, r3, #9
 8009e28:	f241 3288 	movw	r2, #5000	; 0x1388
 8009e2c:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8009e30:	4623      	mov	r3, r4
 8009e32:	1e5c      	subs	r4, r3, #1
 8009e34:	2b00      	cmp	r3, #0
 8009e36:	d102      	bne.n	8009e3e <SDMMC_GetCmdResp3+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009e38:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009e3c:	e01b      	b.n	8009e76 <SDMMC_GetCmdResp3+0x62>
    }
    sta_reg = SDIOx->STA;
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009e42:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8009e44:	68fb      	ldr	r3, [r7, #12]
 8009e46:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8009e4a:	2b00      	cmp	r3, #0
 8009e4c:	d0f0      	beq.n	8009e30 <SDMMC_GetCmdResp3+0x1c>
 8009e4e:	68fb      	ldr	r3, [r7, #12]
 8009e50:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8009e54:	2b00      	cmp	r3, #0
 8009e56:	d1eb      	bne.n	8009e30 <SDMMC_GetCmdResp3+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009e5c:	f003 0304 	and.w	r3, r3, #4
 8009e60:	2b00      	cmp	r3, #0
 8009e62:	d004      	beq.n	8009e6e <SDMMC_GetCmdResp3+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	2204      	movs	r2, #4
 8009e68:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009e6a:	2304      	movs	r3, #4
 8009e6c:	e003      	b.n	8009e76 <SDMMC_GetCmdResp3+0x62>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	22c5      	movs	r2, #197	; 0xc5
 8009e72:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8009e74:	2300      	movs	r3, #0
}
 8009e76:	4618      	mov	r0, r3
 8009e78:	3710      	adds	r7, #16
 8009e7a:	46bd      	mov	sp, r7
 8009e7c:	bc90      	pop	{r4, r7}
 8009e7e:	4770      	bx	lr
 8009e80:	20000014 	.word	0x20000014
 8009e84:	10624dd3 	.word	0x10624dd3

08009e88 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8009e88:	b590      	push	{r4, r7, lr}
 8009e8a:	b087      	sub	sp, #28
 8009e8c:	af00      	add	r7, sp, #0
 8009e8e:	60f8      	str	r0, [r7, #12]
 8009e90:	460b      	mov	r3, r1
 8009e92:	607a      	str	r2, [r7, #4]
 8009e94:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8009e96:	4b34      	ldr	r3, [pc, #208]	; (8009f68 <SDMMC_GetCmdResp6+0xe0>)
 8009e98:	681b      	ldr	r3, [r3, #0]
 8009e9a:	4a34      	ldr	r2, [pc, #208]	; (8009f6c <SDMMC_GetCmdResp6+0xe4>)
 8009e9c:	fba2 2303 	umull	r2, r3, r2, r3
 8009ea0:	0a5b      	lsrs	r3, r3, #9
 8009ea2:	f241 3288 	movw	r2, #5000	; 0x1388
 8009ea6:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8009eaa:	4623      	mov	r3, r4
 8009eac:	1e5c      	subs	r4, r3, #1
 8009eae:	2b00      	cmp	r3, #0
 8009eb0:	d102      	bne.n	8009eb8 <SDMMC_GetCmdResp6+0x30>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009eb2:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009eb6:	e052      	b.n	8009f5e <SDMMC_GetCmdResp6+0xd6>
    }
    sta_reg = SDIOx->STA;
 8009eb8:	68fb      	ldr	r3, [r7, #12]
 8009eba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009ebc:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8009ebe:	697b      	ldr	r3, [r7, #20]
 8009ec0:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8009ec4:	2b00      	cmp	r3, #0
 8009ec6:	d0f0      	beq.n	8009eaa <SDMMC_GetCmdResp6+0x22>
 8009ec8:	697b      	ldr	r3, [r7, #20]
 8009eca:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8009ece:	2b00      	cmp	r3, #0
 8009ed0:	d1eb      	bne.n	8009eaa <SDMMC_GetCmdResp6+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8009ed2:	68fb      	ldr	r3, [r7, #12]
 8009ed4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009ed6:	f003 0304 	and.w	r3, r3, #4
 8009eda:	2b00      	cmp	r3, #0
 8009edc:	d004      	beq.n	8009ee8 <SDMMC_GetCmdResp6+0x60>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8009ede:	68fb      	ldr	r3, [r7, #12]
 8009ee0:	2204      	movs	r2, #4
 8009ee2:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009ee4:	2304      	movs	r3, #4
 8009ee6:	e03a      	b.n	8009f5e <SDMMC_GetCmdResp6+0xd6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8009ee8:	68fb      	ldr	r3, [r7, #12]
 8009eea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009eec:	f003 0301 	and.w	r3, r3, #1
 8009ef0:	2b00      	cmp	r3, #0
 8009ef2:	d004      	beq.n	8009efe <SDMMC_GetCmdResp6+0x76>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8009ef4:	68fb      	ldr	r3, [r7, #12]
 8009ef6:	2201      	movs	r2, #1
 8009ef8:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009efa:	2301      	movs	r3, #1
 8009efc:	e02f      	b.n	8009f5e <SDMMC_GetCmdResp6+0xd6>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8009efe:	68f8      	ldr	r0, [r7, #12]
 8009f00:	f7ff fbae 	bl	8009660 <SDIO_GetCommandResponse>
 8009f04:	4603      	mov	r3, r0
 8009f06:	461a      	mov	r2, r3
 8009f08:	7afb      	ldrb	r3, [r7, #11]
 8009f0a:	4293      	cmp	r3, r2
 8009f0c:	d001      	beq.n	8009f12 <SDMMC_GetCmdResp6+0x8a>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009f0e:	2301      	movs	r3, #1
 8009f10:	e025      	b.n	8009f5e <SDMMC_GetCmdResp6+0xd6>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8009f12:	68fb      	ldr	r3, [r7, #12]
 8009f14:	22c5      	movs	r2, #197	; 0xc5
 8009f16:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8009f18:	2100      	movs	r1, #0
 8009f1a:	68f8      	ldr	r0, [r7, #12]
 8009f1c:	f7ff fbad 	bl	800967a <SDIO_GetResponse>
 8009f20:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8009f22:	693b      	ldr	r3, [r7, #16]
 8009f24:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8009f28:	2b00      	cmp	r3, #0
 8009f2a:	d106      	bne.n	8009f3a <SDMMC_GetCmdResp6+0xb2>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8009f2c:	693b      	ldr	r3, [r7, #16]
 8009f2e:	0c1b      	lsrs	r3, r3, #16
 8009f30:	b29a      	uxth	r2, r3
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 8009f36:	2300      	movs	r3, #0
 8009f38:	e011      	b.n	8009f5e <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8009f3a:	693b      	ldr	r3, [r7, #16]
 8009f3c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009f40:	2b00      	cmp	r3, #0
 8009f42:	d002      	beq.n	8009f4a <SDMMC_GetCmdResp6+0xc2>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8009f44:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8009f48:	e009      	b.n	8009f5e <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8009f4a:	693b      	ldr	r3, [r7, #16]
 8009f4c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009f50:	2b00      	cmp	r3, #0
 8009f52:	d002      	beq.n	8009f5a <SDMMC_GetCmdResp6+0xd2>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8009f54:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009f58:	e001      	b.n	8009f5e <SDMMC_GetCmdResp6+0xd6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8009f5a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8009f5e:	4618      	mov	r0, r3
 8009f60:	371c      	adds	r7, #28
 8009f62:	46bd      	mov	sp, r7
 8009f64:	bd90      	pop	{r4, r7, pc}
 8009f66:	bf00      	nop
 8009f68:	20000014 	.word	0x20000014
 8009f6c:	10624dd3 	.word	0x10624dd3

08009f70 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 8009f70:	b490      	push	{r4, r7}
 8009f72:	b084      	sub	sp, #16
 8009f74:	af00      	add	r7, sp, #0
 8009f76:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8009f78:	4b21      	ldr	r3, [pc, #132]	; (800a000 <SDMMC_GetCmdResp7+0x90>)
 8009f7a:	681b      	ldr	r3, [r3, #0]
 8009f7c:	4a21      	ldr	r2, [pc, #132]	; (800a004 <SDMMC_GetCmdResp7+0x94>)
 8009f7e:	fba2 2303 	umull	r2, r3, r2, r3
 8009f82:	0a5b      	lsrs	r3, r3, #9
 8009f84:	f241 3288 	movw	r2, #5000	; 0x1388
 8009f88:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8009f8c:	4623      	mov	r3, r4
 8009f8e:	1e5c      	subs	r4, r3, #1
 8009f90:	2b00      	cmp	r3, #0
 8009f92:	d102      	bne.n	8009f9a <SDMMC_GetCmdResp7+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009f94:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009f98:	e02c      	b.n	8009ff4 <SDMMC_GetCmdResp7+0x84>
    }
    sta_reg = SDIOx->STA;
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009f9e:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8009fa0:	68fb      	ldr	r3, [r7, #12]
 8009fa2:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8009fa6:	2b00      	cmp	r3, #0
 8009fa8:	d0f0      	beq.n	8009f8c <SDMMC_GetCmdResp7+0x1c>
 8009faa:	68fb      	ldr	r3, [r7, #12]
 8009fac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8009fb0:	2b00      	cmp	r3, #0
 8009fb2:	d1eb      	bne.n	8009f8c <SDMMC_GetCmdResp7+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009fb8:	f003 0304 	and.w	r3, r3, #4
 8009fbc:	2b00      	cmp	r3, #0
 8009fbe:	d004      	beq.n	8009fca <SDMMC_GetCmdResp7+0x5a>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	2204      	movs	r2, #4
 8009fc4:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009fc6:	2304      	movs	r3, #4
 8009fc8:	e014      	b.n	8009ff4 <SDMMC_GetCmdResp7+0x84>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009fce:	f003 0301 	and.w	r3, r3, #1
 8009fd2:	2b00      	cmp	r3, #0
 8009fd4:	d004      	beq.n	8009fe0 <SDMMC_GetCmdResp7+0x70>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	2201      	movs	r2, #1
 8009fda:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009fdc:	2301      	movs	r3, #1
 8009fde:	e009      	b.n	8009ff4 <SDMMC_GetCmdResp7+0x84>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009fe4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009fe8:	2b00      	cmp	r3, #0
 8009fea:	d002      	beq.n	8009ff2 <SDMMC_GetCmdResp7+0x82>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	2240      	movs	r2, #64	; 0x40
 8009ff0:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8009ff2:	2300      	movs	r3, #0
  
}
 8009ff4:	4618      	mov	r0, r3
 8009ff6:	3710      	adds	r7, #16
 8009ff8:	46bd      	mov	sp, r7
 8009ffa:	bc90      	pop	{r4, r7}
 8009ffc:	4770      	bx	lr
 8009ffe:	bf00      	nop
 800a000:	20000014 	.word	0x20000014
 800a004:	10624dd3 	.word	0x10624dd3

0800a008 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800a008:	b084      	sub	sp, #16
 800a00a:	b580      	push	{r7, lr}
 800a00c:	b084      	sub	sp, #16
 800a00e:	af00      	add	r7, sp, #0
 800a010:	6078      	str	r0, [r7, #4]
 800a012:	f107 001c 	add.w	r0, r7, #28
 800a016:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800a01a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a01c:	2b01      	cmp	r3, #1
 800a01e:	d122      	bne.n	800a066 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a024:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	68db      	ldr	r3, [r3, #12]
 800a030:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800a034:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a038:	687a      	ldr	r2, [r7, #4]
 800a03a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	68db      	ldr	r3, [r3, #12]
 800a040:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800a048:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a04a:	2b01      	cmp	r3, #1
 800a04c:	d105      	bne.n	800a05a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	68db      	ldr	r3, [r3, #12]
 800a052:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 800a05a:	6878      	ldr	r0, [r7, #4]
 800a05c:	f001 fa7c 	bl	800b558 <USB_CoreReset>
 800a060:	4603      	mov	r3, r0
 800a062:	73fb      	strb	r3, [r7, #15]
 800a064:	e01a      	b.n	800a09c <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	68db      	ldr	r3, [r3, #12]
 800a06a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 800a072:	6878      	ldr	r0, [r7, #4]
 800a074:	f001 fa70 	bl	800b558 <USB_CoreReset>
 800a078:	4603      	mov	r3, r0
 800a07a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800a07c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a07e:	2b00      	cmp	r3, #0
 800a080:	d106      	bne.n	800a090 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a086:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	639a      	str	r2, [r3, #56]	; 0x38
 800a08e:	e005      	b.n	800a09c <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a094:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800a09c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a09e:	2b01      	cmp	r3, #1
 800a0a0:	d10b      	bne.n	800a0ba <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	689b      	ldr	r3, [r3, #8]
 800a0a6:	f043 0206 	orr.w	r2, r3, #6
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	689b      	ldr	r3, [r3, #8]
 800a0b2:	f043 0220 	orr.w	r2, r3, #32
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800a0ba:	7bfb      	ldrb	r3, [r7, #15]
}
 800a0bc:	4618      	mov	r0, r3
 800a0be:	3710      	adds	r7, #16
 800a0c0:	46bd      	mov	sp, r7
 800a0c2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a0c6:	b004      	add	sp, #16
 800a0c8:	4770      	bx	lr
	...

0800a0cc <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800a0cc:	b480      	push	{r7}
 800a0ce:	b087      	sub	sp, #28
 800a0d0:	af00      	add	r7, sp, #0
 800a0d2:	60f8      	str	r0, [r7, #12]
 800a0d4:	60b9      	str	r1, [r7, #8]
 800a0d6:	4613      	mov	r3, r2
 800a0d8:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800a0da:	79fb      	ldrb	r3, [r7, #7]
 800a0dc:	2b02      	cmp	r3, #2
 800a0de:	d165      	bne.n	800a1ac <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800a0e0:	68bb      	ldr	r3, [r7, #8]
 800a0e2:	4a41      	ldr	r2, [pc, #260]	; (800a1e8 <USB_SetTurnaroundTime+0x11c>)
 800a0e4:	4293      	cmp	r3, r2
 800a0e6:	d906      	bls.n	800a0f6 <USB_SetTurnaroundTime+0x2a>
 800a0e8:	68bb      	ldr	r3, [r7, #8]
 800a0ea:	4a40      	ldr	r2, [pc, #256]	; (800a1ec <USB_SetTurnaroundTime+0x120>)
 800a0ec:	4293      	cmp	r3, r2
 800a0ee:	d802      	bhi.n	800a0f6 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800a0f0:	230f      	movs	r3, #15
 800a0f2:	617b      	str	r3, [r7, #20]
 800a0f4:	e062      	b.n	800a1bc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800a0f6:	68bb      	ldr	r3, [r7, #8]
 800a0f8:	4a3c      	ldr	r2, [pc, #240]	; (800a1ec <USB_SetTurnaroundTime+0x120>)
 800a0fa:	4293      	cmp	r3, r2
 800a0fc:	d906      	bls.n	800a10c <USB_SetTurnaroundTime+0x40>
 800a0fe:	68bb      	ldr	r3, [r7, #8]
 800a100:	4a3b      	ldr	r2, [pc, #236]	; (800a1f0 <USB_SetTurnaroundTime+0x124>)
 800a102:	4293      	cmp	r3, r2
 800a104:	d802      	bhi.n	800a10c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800a106:	230e      	movs	r3, #14
 800a108:	617b      	str	r3, [r7, #20]
 800a10a:	e057      	b.n	800a1bc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800a10c:	68bb      	ldr	r3, [r7, #8]
 800a10e:	4a38      	ldr	r2, [pc, #224]	; (800a1f0 <USB_SetTurnaroundTime+0x124>)
 800a110:	4293      	cmp	r3, r2
 800a112:	d906      	bls.n	800a122 <USB_SetTurnaroundTime+0x56>
 800a114:	68bb      	ldr	r3, [r7, #8]
 800a116:	4a37      	ldr	r2, [pc, #220]	; (800a1f4 <USB_SetTurnaroundTime+0x128>)
 800a118:	4293      	cmp	r3, r2
 800a11a:	d802      	bhi.n	800a122 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800a11c:	230d      	movs	r3, #13
 800a11e:	617b      	str	r3, [r7, #20]
 800a120:	e04c      	b.n	800a1bc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800a122:	68bb      	ldr	r3, [r7, #8]
 800a124:	4a33      	ldr	r2, [pc, #204]	; (800a1f4 <USB_SetTurnaroundTime+0x128>)
 800a126:	4293      	cmp	r3, r2
 800a128:	d906      	bls.n	800a138 <USB_SetTurnaroundTime+0x6c>
 800a12a:	68bb      	ldr	r3, [r7, #8]
 800a12c:	4a32      	ldr	r2, [pc, #200]	; (800a1f8 <USB_SetTurnaroundTime+0x12c>)
 800a12e:	4293      	cmp	r3, r2
 800a130:	d802      	bhi.n	800a138 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800a132:	230c      	movs	r3, #12
 800a134:	617b      	str	r3, [r7, #20]
 800a136:	e041      	b.n	800a1bc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800a138:	68bb      	ldr	r3, [r7, #8]
 800a13a:	4a2f      	ldr	r2, [pc, #188]	; (800a1f8 <USB_SetTurnaroundTime+0x12c>)
 800a13c:	4293      	cmp	r3, r2
 800a13e:	d906      	bls.n	800a14e <USB_SetTurnaroundTime+0x82>
 800a140:	68bb      	ldr	r3, [r7, #8]
 800a142:	4a2e      	ldr	r2, [pc, #184]	; (800a1fc <USB_SetTurnaroundTime+0x130>)
 800a144:	4293      	cmp	r3, r2
 800a146:	d802      	bhi.n	800a14e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800a148:	230b      	movs	r3, #11
 800a14a:	617b      	str	r3, [r7, #20]
 800a14c:	e036      	b.n	800a1bc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800a14e:	68bb      	ldr	r3, [r7, #8]
 800a150:	4a2a      	ldr	r2, [pc, #168]	; (800a1fc <USB_SetTurnaroundTime+0x130>)
 800a152:	4293      	cmp	r3, r2
 800a154:	d906      	bls.n	800a164 <USB_SetTurnaroundTime+0x98>
 800a156:	68bb      	ldr	r3, [r7, #8]
 800a158:	4a29      	ldr	r2, [pc, #164]	; (800a200 <USB_SetTurnaroundTime+0x134>)
 800a15a:	4293      	cmp	r3, r2
 800a15c:	d802      	bhi.n	800a164 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800a15e:	230a      	movs	r3, #10
 800a160:	617b      	str	r3, [r7, #20]
 800a162:	e02b      	b.n	800a1bc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800a164:	68bb      	ldr	r3, [r7, #8]
 800a166:	4a26      	ldr	r2, [pc, #152]	; (800a200 <USB_SetTurnaroundTime+0x134>)
 800a168:	4293      	cmp	r3, r2
 800a16a:	d906      	bls.n	800a17a <USB_SetTurnaroundTime+0xae>
 800a16c:	68bb      	ldr	r3, [r7, #8]
 800a16e:	4a25      	ldr	r2, [pc, #148]	; (800a204 <USB_SetTurnaroundTime+0x138>)
 800a170:	4293      	cmp	r3, r2
 800a172:	d802      	bhi.n	800a17a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800a174:	2309      	movs	r3, #9
 800a176:	617b      	str	r3, [r7, #20]
 800a178:	e020      	b.n	800a1bc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800a17a:	68bb      	ldr	r3, [r7, #8]
 800a17c:	4a21      	ldr	r2, [pc, #132]	; (800a204 <USB_SetTurnaroundTime+0x138>)
 800a17e:	4293      	cmp	r3, r2
 800a180:	d906      	bls.n	800a190 <USB_SetTurnaroundTime+0xc4>
 800a182:	68bb      	ldr	r3, [r7, #8]
 800a184:	4a20      	ldr	r2, [pc, #128]	; (800a208 <USB_SetTurnaroundTime+0x13c>)
 800a186:	4293      	cmp	r3, r2
 800a188:	d802      	bhi.n	800a190 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800a18a:	2308      	movs	r3, #8
 800a18c:	617b      	str	r3, [r7, #20]
 800a18e:	e015      	b.n	800a1bc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800a190:	68bb      	ldr	r3, [r7, #8]
 800a192:	4a1d      	ldr	r2, [pc, #116]	; (800a208 <USB_SetTurnaroundTime+0x13c>)
 800a194:	4293      	cmp	r3, r2
 800a196:	d906      	bls.n	800a1a6 <USB_SetTurnaroundTime+0xda>
 800a198:	68bb      	ldr	r3, [r7, #8]
 800a19a:	4a1c      	ldr	r2, [pc, #112]	; (800a20c <USB_SetTurnaroundTime+0x140>)
 800a19c:	4293      	cmp	r3, r2
 800a19e:	d802      	bhi.n	800a1a6 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800a1a0:	2307      	movs	r3, #7
 800a1a2:	617b      	str	r3, [r7, #20]
 800a1a4:	e00a      	b.n	800a1bc <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800a1a6:	2306      	movs	r3, #6
 800a1a8:	617b      	str	r3, [r7, #20]
 800a1aa:	e007      	b.n	800a1bc <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800a1ac:	79fb      	ldrb	r3, [r7, #7]
 800a1ae:	2b00      	cmp	r3, #0
 800a1b0:	d102      	bne.n	800a1b8 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800a1b2:	2309      	movs	r3, #9
 800a1b4:	617b      	str	r3, [r7, #20]
 800a1b6:	e001      	b.n	800a1bc <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800a1b8:	2309      	movs	r3, #9
 800a1ba:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800a1bc:	68fb      	ldr	r3, [r7, #12]
 800a1be:	68db      	ldr	r3, [r3, #12]
 800a1c0:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800a1c4:	68fb      	ldr	r3, [r7, #12]
 800a1c6:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800a1c8:	68fb      	ldr	r3, [r7, #12]
 800a1ca:	68da      	ldr	r2, [r3, #12]
 800a1cc:	697b      	ldr	r3, [r7, #20]
 800a1ce:	029b      	lsls	r3, r3, #10
 800a1d0:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800a1d4:	431a      	orrs	r2, r3
 800a1d6:	68fb      	ldr	r3, [r7, #12]
 800a1d8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800a1da:	2300      	movs	r3, #0
}
 800a1dc:	4618      	mov	r0, r3
 800a1de:	371c      	adds	r7, #28
 800a1e0:	46bd      	mov	sp, r7
 800a1e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1e6:	4770      	bx	lr
 800a1e8:	00d8acbf 	.word	0x00d8acbf
 800a1ec:	00e4e1bf 	.word	0x00e4e1bf
 800a1f0:	00f423ff 	.word	0x00f423ff
 800a1f4:	0106737f 	.word	0x0106737f
 800a1f8:	011a499f 	.word	0x011a499f
 800a1fc:	01312cff 	.word	0x01312cff
 800a200:	014ca43f 	.word	0x014ca43f
 800a204:	016e35ff 	.word	0x016e35ff
 800a208:	01a6ab1f 	.word	0x01a6ab1f
 800a20c:	01e847ff 	.word	0x01e847ff

0800a210 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800a210:	b480      	push	{r7}
 800a212:	b083      	sub	sp, #12
 800a214:	af00      	add	r7, sp, #0
 800a216:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	689b      	ldr	r3, [r3, #8]
 800a21c:	f043 0201 	orr.w	r2, r3, #1
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800a224:	2300      	movs	r3, #0
}
 800a226:	4618      	mov	r0, r3
 800a228:	370c      	adds	r7, #12
 800a22a:	46bd      	mov	sp, r7
 800a22c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a230:	4770      	bx	lr

0800a232 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800a232:	b480      	push	{r7}
 800a234:	b083      	sub	sp, #12
 800a236:	af00      	add	r7, sp, #0
 800a238:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	689b      	ldr	r3, [r3, #8]
 800a23e:	f023 0201 	bic.w	r2, r3, #1
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800a246:	2300      	movs	r3, #0
}
 800a248:	4618      	mov	r0, r3
 800a24a:	370c      	adds	r7, #12
 800a24c:	46bd      	mov	sp, r7
 800a24e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a252:	4770      	bx	lr

0800a254 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800a254:	b580      	push	{r7, lr}
 800a256:	b082      	sub	sp, #8
 800a258:	af00      	add	r7, sp, #0
 800a25a:	6078      	str	r0, [r7, #4]
 800a25c:	460b      	mov	r3, r1
 800a25e:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	68db      	ldr	r3, [r3, #12]
 800a264:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800a26c:	78fb      	ldrb	r3, [r7, #3]
 800a26e:	2b01      	cmp	r3, #1
 800a270:	d106      	bne.n	800a280 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	68db      	ldr	r3, [r3, #12]
 800a276:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	60da      	str	r2, [r3, #12]
 800a27e:	e00b      	b.n	800a298 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 800a280:	78fb      	ldrb	r3, [r7, #3]
 800a282:	2b00      	cmp	r3, #0
 800a284:	d106      	bne.n	800a294 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	68db      	ldr	r3, [r3, #12]
 800a28a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	60da      	str	r2, [r3, #12]
 800a292:	e001      	b.n	800a298 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800a294:	2301      	movs	r3, #1
 800a296:	e003      	b.n	800a2a0 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800a298:	2032      	movs	r0, #50	; 0x32
 800a29a:	f7f8 fee9 	bl	8003070 <HAL_Delay>

  return HAL_OK;
 800a29e:	2300      	movs	r3, #0
}
 800a2a0:	4618      	mov	r0, r3
 800a2a2:	3708      	adds	r7, #8
 800a2a4:	46bd      	mov	sp, r7
 800a2a6:	bd80      	pop	{r7, pc}

0800a2a8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800a2a8:	b084      	sub	sp, #16
 800a2aa:	b580      	push	{r7, lr}
 800a2ac:	b086      	sub	sp, #24
 800a2ae:	af00      	add	r7, sp, #0
 800a2b0:	6078      	str	r0, [r7, #4]
 800a2b2:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800a2b6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800a2ba:	2300      	movs	r3, #0
 800a2bc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800a2c2:	2300      	movs	r3, #0
 800a2c4:	613b      	str	r3, [r7, #16]
 800a2c6:	e009      	b.n	800a2dc <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800a2c8:	687a      	ldr	r2, [r7, #4]
 800a2ca:	693b      	ldr	r3, [r7, #16]
 800a2cc:	3340      	adds	r3, #64	; 0x40
 800a2ce:	009b      	lsls	r3, r3, #2
 800a2d0:	4413      	add	r3, r2
 800a2d2:	2200      	movs	r2, #0
 800a2d4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800a2d6:	693b      	ldr	r3, [r7, #16]
 800a2d8:	3301      	adds	r3, #1
 800a2da:	613b      	str	r3, [r7, #16]
 800a2dc:	693b      	ldr	r3, [r7, #16]
 800a2de:	2b0e      	cmp	r3, #14
 800a2e0:	d9f2      	bls.n	800a2c8 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800a2e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a2e4:	2b00      	cmp	r3, #0
 800a2e6:	d112      	bne.n	800a30e <USB_DevInit+0x66>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a2ec:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a2f8:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a304:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	639a      	str	r2, [r3, #56]	; 0x38
 800a30c:	e00b      	b.n	800a326 <USB_DevInit+0x7e>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GOTGCTL &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	681b      	ldr	r3, [r3, #0]
 800a312:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	601a      	str	r2, [r3, #0]
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a31e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800a326:	68fb      	ldr	r3, [r7, #12]
 800a328:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a32c:	461a      	mov	r2, r3
 800a32e:	2300      	movs	r3, #0
 800a330:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800a332:	68fb      	ldr	r3, [r7, #12]
 800a334:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a338:	4619      	mov	r1, r3
 800a33a:	68fb      	ldr	r3, [r7, #12]
 800a33c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a340:	461a      	mov	r2, r3
 800a342:	680b      	ldr	r3, [r1, #0]
 800a344:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800a346:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a348:	2b01      	cmp	r3, #1
 800a34a:	d10c      	bne.n	800a366 <USB_DevInit+0xbe>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800a34c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a34e:	2b00      	cmp	r3, #0
 800a350:	d104      	bne.n	800a35c <USB_DevInit+0xb4>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800a352:	2100      	movs	r1, #0
 800a354:	6878      	ldr	r0, [r7, #4]
 800a356:	f000 f961 	bl	800a61c <USB_SetDevSpeed>
 800a35a:	e008      	b.n	800a36e <USB_DevInit+0xc6>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800a35c:	2101      	movs	r1, #1
 800a35e:	6878      	ldr	r0, [r7, #4]
 800a360:	f000 f95c 	bl	800a61c <USB_SetDevSpeed>
 800a364:	e003      	b.n	800a36e <USB_DevInit+0xc6>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800a366:	2103      	movs	r1, #3
 800a368:	6878      	ldr	r0, [r7, #4]
 800a36a:	f000 f957 	bl	800a61c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800a36e:	2110      	movs	r1, #16
 800a370:	6878      	ldr	r0, [r7, #4]
 800a372:	f000 f90b 	bl	800a58c <USB_FlushTxFifo>
 800a376:	4603      	mov	r3, r0
 800a378:	2b00      	cmp	r3, #0
 800a37a:	d001      	beq.n	800a380 <USB_DevInit+0xd8>
  {
    ret = HAL_ERROR;
 800a37c:	2301      	movs	r3, #1
 800a37e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800a380:	6878      	ldr	r0, [r7, #4]
 800a382:	f000 f929 	bl	800a5d8 <USB_FlushRxFifo>
 800a386:	4603      	mov	r3, r0
 800a388:	2b00      	cmp	r3, #0
 800a38a:	d001      	beq.n	800a390 <USB_DevInit+0xe8>
  {
    ret = HAL_ERROR;
 800a38c:	2301      	movs	r3, #1
 800a38e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800a390:	68fb      	ldr	r3, [r7, #12]
 800a392:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a396:	461a      	mov	r2, r3
 800a398:	2300      	movs	r3, #0
 800a39a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800a39c:	68fb      	ldr	r3, [r7, #12]
 800a39e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a3a2:	461a      	mov	r2, r3
 800a3a4:	2300      	movs	r3, #0
 800a3a6:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800a3a8:	68fb      	ldr	r3, [r7, #12]
 800a3aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a3ae:	461a      	mov	r2, r3
 800a3b0:	2300      	movs	r3, #0
 800a3b2:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a3b4:	2300      	movs	r3, #0
 800a3b6:	613b      	str	r3, [r7, #16]
 800a3b8:	e043      	b.n	800a442 <USB_DevInit+0x19a>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800a3ba:	693b      	ldr	r3, [r7, #16]
 800a3bc:	015a      	lsls	r2, r3, #5
 800a3be:	68fb      	ldr	r3, [r7, #12]
 800a3c0:	4413      	add	r3, r2
 800a3c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a3c6:	681b      	ldr	r3, [r3, #0]
 800a3c8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a3cc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a3d0:	d118      	bne.n	800a404 <USB_DevInit+0x15c>
    {
      if (i == 0U)
 800a3d2:	693b      	ldr	r3, [r7, #16]
 800a3d4:	2b00      	cmp	r3, #0
 800a3d6:	d10a      	bne.n	800a3ee <USB_DevInit+0x146>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800a3d8:	693b      	ldr	r3, [r7, #16]
 800a3da:	015a      	lsls	r2, r3, #5
 800a3dc:	68fb      	ldr	r3, [r7, #12]
 800a3de:	4413      	add	r3, r2
 800a3e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a3e4:	461a      	mov	r2, r3
 800a3e6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800a3ea:	6013      	str	r3, [r2, #0]
 800a3ec:	e013      	b.n	800a416 <USB_DevInit+0x16e>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800a3ee:	693b      	ldr	r3, [r7, #16]
 800a3f0:	015a      	lsls	r2, r3, #5
 800a3f2:	68fb      	ldr	r3, [r7, #12]
 800a3f4:	4413      	add	r3, r2
 800a3f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a3fa:	461a      	mov	r2, r3
 800a3fc:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800a400:	6013      	str	r3, [r2, #0]
 800a402:	e008      	b.n	800a416 <USB_DevInit+0x16e>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800a404:	693b      	ldr	r3, [r7, #16]
 800a406:	015a      	lsls	r2, r3, #5
 800a408:	68fb      	ldr	r3, [r7, #12]
 800a40a:	4413      	add	r3, r2
 800a40c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a410:	461a      	mov	r2, r3
 800a412:	2300      	movs	r3, #0
 800a414:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800a416:	693b      	ldr	r3, [r7, #16]
 800a418:	015a      	lsls	r2, r3, #5
 800a41a:	68fb      	ldr	r3, [r7, #12]
 800a41c:	4413      	add	r3, r2
 800a41e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a422:	461a      	mov	r2, r3
 800a424:	2300      	movs	r3, #0
 800a426:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800a428:	693b      	ldr	r3, [r7, #16]
 800a42a:	015a      	lsls	r2, r3, #5
 800a42c:	68fb      	ldr	r3, [r7, #12]
 800a42e:	4413      	add	r3, r2
 800a430:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a434:	461a      	mov	r2, r3
 800a436:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800a43a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a43c:	693b      	ldr	r3, [r7, #16]
 800a43e:	3301      	adds	r3, #1
 800a440:	613b      	str	r3, [r7, #16]
 800a442:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a444:	693a      	ldr	r2, [r7, #16]
 800a446:	429a      	cmp	r2, r3
 800a448:	d3b7      	bcc.n	800a3ba <USB_DevInit+0x112>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a44a:	2300      	movs	r3, #0
 800a44c:	613b      	str	r3, [r7, #16]
 800a44e:	e043      	b.n	800a4d8 <USB_DevInit+0x230>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a450:	693b      	ldr	r3, [r7, #16]
 800a452:	015a      	lsls	r2, r3, #5
 800a454:	68fb      	ldr	r3, [r7, #12]
 800a456:	4413      	add	r3, r2
 800a458:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a45c:	681b      	ldr	r3, [r3, #0]
 800a45e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a462:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a466:	d118      	bne.n	800a49a <USB_DevInit+0x1f2>
    {
      if (i == 0U)
 800a468:	693b      	ldr	r3, [r7, #16]
 800a46a:	2b00      	cmp	r3, #0
 800a46c:	d10a      	bne.n	800a484 <USB_DevInit+0x1dc>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800a46e:	693b      	ldr	r3, [r7, #16]
 800a470:	015a      	lsls	r2, r3, #5
 800a472:	68fb      	ldr	r3, [r7, #12]
 800a474:	4413      	add	r3, r2
 800a476:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a47a:	461a      	mov	r2, r3
 800a47c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800a480:	6013      	str	r3, [r2, #0]
 800a482:	e013      	b.n	800a4ac <USB_DevInit+0x204>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800a484:	693b      	ldr	r3, [r7, #16]
 800a486:	015a      	lsls	r2, r3, #5
 800a488:	68fb      	ldr	r3, [r7, #12]
 800a48a:	4413      	add	r3, r2
 800a48c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a490:	461a      	mov	r2, r3
 800a492:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800a496:	6013      	str	r3, [r2, #0]
 800a498:	e008      	b.n	800a4ac <USB_DevInit+0x204>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800a49a:	693b      	ldr	r3, [r7, #16]
 800a49c:	015a      	lsls	r2, r3, #5
 800a49e:	68fb      	ldr	r3, [r7, #12]
 800a4a0:	4413      	add	r3, r2
 800a4a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a4a6:	461a      	mov	r2, r3
 800a4a8:	2300      	movs	r3, #0
 800a4aa:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800a4ac:	693b      	ldr	r3, [r7, #16]
 800a4ae:	015a      	lsls	r2, r3, #5
 800a4b0:	68fb      	ldr	r3, [r7, #12]
 800a4b2:	4413      	add	r3, r2
 800a4b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a4b8:	461a      	mov	r2, r3
 800a4ba:	2300      	movs	r3, #0
 800a4bc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800a4be:	693b      	ldr	r3, [r7, #16]
 800a4c0:	015a      	lsls	r2, r3, #5
 800a4c2:	68fb      	ldr	r3, [r7, #12]
 800a4c4:	4413      	add	r3, r2
 800a4c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a4ca:	461a      	mov	r2, r3
 800a4cc:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800a4d0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a4d2:	693b      	ldr	r3, [r7, #16]
 800a4d4:	3301      	adds	r3, #1
 800a4d6:	613b      	str	r3, [r7, #16]
 800a4d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4da:	693a      	ldr	r2, [r7, #16]
 800a4dc:	429a      	cmp	r2, r3
 800a4de:	d3b7      	bcc.n	800a450 <USB_DevInit+0x1a8>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800a4e0:	68fb      	ldr	r3, [r7, #12]
 800a4e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a4e6:	691b      	ldr	r3, [r3, #16]
 800a4e8:	68fa      	ldr	r2, [r7, #12]
 800a4ea:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a4ee:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a4f2:	6113      	str	r3, [r2, #16]

  if (cfg.dma_enable == 1U)
 800a4f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a4f6:	2b01      	cmp	r3, #1
 800a4f8:	d111      	bne.n	800a51e <USB_DevInit+0x276>
  {
    /*Set threshold parameters */
    USBx_DEVICE->DTHRCTL = USB_OTG_DTHRCTL_TXTHRLEN_6 |
 800a4fa:	68fb      	ldr	r3, [r7, #12]
 800a4fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a500:	461a      	mov	r2, r3
 800a502:	4b20      	ldr	r3, [pc, #128]	; (800a584 <USB_DevInit+0x2dc>)
 800a504:	6313      	str	r3, [r2, #48]	; 0x30
                           USB_OTG_DTHRCTL_RXTHRLEN_6;

    USBx_DEVICE->DTHRCTL |= USB_OTG_DTHRCTL_RXTHREN |
 800a506:	68fb      	ldr	r3, [r7, #12]
 800a508:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a50c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a50e:	68fa      	ldr	r2, [r7, #12]
 800a510:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a514:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a518:	f043 0303 	orr.w	r3, r3, #3
 800a51c:	6313      	str	r3, [r2, #48]	; 0x30
                            USB_OTG_DTHRCTL_ISOTHREN |
                            USB_OTG_DTHRCTL_NONISOTHREN;
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	2200      	movs	r2, #0
 800a522:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800a52a:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800a52c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a52e:	2b00      	cmp	r3, #0
 800a530:	d105      	bne.n	800a53e <USB_DevInit+0x296>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	699b      	ldr	r3, [r3, #24]
 800a536:	f043 0210 	orr.w	r2, r3, #16
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	699a      	ldr	r2, [r3, #24]
 800a542:	4b11      	ldr	r3, [pc, #68]	; (800a588 <USB_DevInit+0x2e0>)
 800a544:	4313      	orrs	r3, r2
 800a546:	687a      	ldr	r2, [r7, #4]
 800a548:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800a54a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a54c:	2b00      	cmp	r3, #0
 800a54e:	d005      	beq.n	800a55c <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	699b      	ldr	r3, [r3, #24]
 800a554:	f043 0208 	orr.w	r2, r3, #8
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800a55c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a55e:	2b01      	cmp	r3, #1
 800a560:	d107      	bne.n	800a572 <USB_DevInit+0x2ca>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	699b      	ldr	r3, [r3, #24]
 800a566:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a56a:	f043 0304 	orr.w	r3, r3, #4
 800a56e:	687a      	ldr	r2, [r7, #4]
 800a570:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800a572:	7dfb      	ldrb	r3, [r7, #23]
}
 800a574:	4618      	mov	r0, r3
 800a576:	3718      	adds	r7, #24
 800a578:	46bd      	mov	sp, r7
 800a57a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a57e:	b004      	add	sp, #16
 800a580:	4770      	bx	lr
 800a582:	bf00      	nop
 800a584:	00800100 	.word	0x00800100
 800a588:	803c3800 	.word	0x803c3800

0800a58c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800a58c:	b480      	push	{r7}
 800a58e:	b085      	sub	sp, #20
 800a590:	af00      	add	r7, sp, #0
 800a592:	6078      	str	r0, [r7, #4]
 800a594:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800a596:	2300      	movs	r3, #0
 800a598:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800a59a:	683b      	ldr	r3, [r7, #0]
 800a59c:	019b      	lsls	r3, r3, #6
 800a59e:	f043 0220 	orr.w	r2, r3, #32
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800a5a6:	68fb      	ldr	r3, [r7, #12]
 800a5a8:	3301      	adds	r3, #1
 800a5aa:	60fb      	str	r3, [r7, #12]
 800a5ac:	68fb      	ldr	r3, [r7, #12]
 800a5ae:	4a09      	ldr	r2, [pc, #36]	; (800a5d4 <USB_FlushTxFifo+0x48>)
 800a5b0:	4293      	cmp	r3, r2
 800a5b2:	d901      	bls.n	800a5b8 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 800a5b4:	2303      	movs	r3, #3
 800a5b6:	e006      	b.n	800a5c6 <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	691b      	ldr	r3, [r3, #16]
 800a5bc:	f003 0320 	and.w	r3, r3, #32
 800a5c0:	2b20      	cmp	r3, #32
 800a5c2:	d0f0      	beq.n	800a5a6 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800a5c4:	2300      	movs	r3, #0
}
 800a5c6:	4618      	mov	r0, r3
 800a5c8:	3714      	adds	r7, #20
 800a5ca:	46bd      	mov	sp, r7
 800a5cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5d0:	4770      	bx	lr
 800a5d2:	bf00      	nop
 800a5d4:	00030d40 	.word	0x00030d40

0800a5d8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800a5d8:	b480      	push	{r7}
 800a5da:	b085      	sub	sp, #20
 800a5dc:	af00      	add	r7, sp, #0
 800a5de:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800a5e0:	2300      	movs	r3, #0
 800a5e2:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	2210      	movs	r2, #16
 800a5e8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800a5ea:	68fb      	ldr	r3, [r7, #12]
 800a5ec:	3301      	adds	r3, #1
 800a5ee:	60fb      	str	r3, [r7, #12]
 800a5f0:	68fb      	ldr	r3, [r7, #12]
 800a5f2:	4a09      	ldr	r2, [pc, #36]	; (800a618 <USB_FlushRxFifo+0x40>)
 800a5f4:	4293      	cmp	r3, r2
 800a5f6:	d901      	bls.n	800a5fc <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800a5f8:	2303      	movs	r3, #3
 800a5fa:	e006      	b.n	800a60a <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	691b      	ldr	r3, [r3, #16]
 800a600:	f003 0310 	and.w	r3, r3, #16
 800a604:	2b10      	cmp	r3, #16
 800a606:	d0f0      	beq.n	800a5ea <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800a608:	2300      	movs	r3, #0
}
 800a60a:	4618      	mov	r0, r3
 800a60c:	3714      	adds	r7, #20
 800a60e:	46bd      	mov	sp, r7
 800a610:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a614:	4770      	bx	lr
 800a616:	bf00      	nop
 800a618:	00030d40 	.word	0x00030d40

0800a61c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800a61c:	b480      	push	{r7}
 800a61e:	b085      	sub	sp, #20
 800a620:	af00      	add	r7, sp, #0
 800a622:	6078      	str	r0, [r7, #4]
 800a624:	460b      	mov	r3, r1
 800a626:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800a62c:	68fb      	ldr	r3, [r7, #12]
 800a62e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a632:	681a      	ldr	r2, [r3, #0]
 800a634:	78fb      	ldrb	r3, [r7, #3]
 800a636:	68f9      	ldr	r1, [r7, #12]
 800a638:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a63c:	4313      	orrs	r3, r2
 800a63e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800a640:	2300      	movs	r3, #0
}
 800a642:	4618      	mov	r0, r3
 800a644:	3714      	adds	r7, #20
 800a646:	46bd      	mov	sp, r7
 800a648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a64c:	4770      	bx	lr

0800a64e <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_HIGH: High speed mode
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800a64e:	b480      	push	{r7}
 800a650:	b087      	sub	sp, #28
 800a652:	af00      	add	r7, sp, #0
 800a654:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800a65a:	693b      	ldr	r3, [r7, #16]
 800a65c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a660:	689b      	ldr	r3, [r3, #8]
 800a662:	f003 0306 	and.w	r3, r3, #6
 800a666:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800a668:	68fb      	ldr	r3, [r7, #12]
 800a66a:	2b00      	cmp	r3, #0
 800a66c:	d102      	bne.n	800a674 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800a66e:	2300      	movs	r3, #0
 800a670:	75fb      	strb	r3, [r7, #23]
 800a672:	e00a      	b.n	800a68a <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800a674:	68fb      	ldr	r3, [r7, #12]
 800a676:	2b02      	cmp	r3, #2
 800a678:	d002      	beq.n	800a680 <USB_GetDevSpeed+0x32>
 800a67a:	68fb      	ldr	r3, [r7, #12]
 800a67c:	2b06      	cmp	r3, #6
 800a67e:	d102      	bne.n	800a686 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800a680:	2302      	movs	r3, #2
 800a682:	75fb      	strb	r3, [r7, #23]
 800a684:	e001      	b.n	800a68a <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800a686:	230f      	movs	r3, #15
 800a688:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800a68a:	7dfb      	ldrb	r3, [r7, #23]
}
 800a68c:	4618      	mov	r0, r3
 800a68e:	371c      	adds	r7, #28
 800a690:	46bd      	mov	sp, r7
 800a692:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a696:	4770      	bx	lr

0800a698 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800a698:	b480      	push	{r7}
 800a69a:	b085      	sub	sp, #20
 800a69c:	af00      	add	r7, sp, #0
 800a69e:	6078      	str	r0, [r7, #4]
 800a6a0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a6a6:	683b      	ldr	r3, [r7, #0]
 800a6a8:	781b      	ldrb	r3, [r3, #0]
 800a6aa:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800a6ac:	683b      	ldr	r3, [r7, #0]
 800a6ae:	785b      	ldrb	r3, [r3, #1]
 800a6b0:	2b01      	cmp	r3, #1
 800a6b2:	d13a      	bne.n	800a72a <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800a6b4:	68fb      	ldr	r3, [r7, #12]
 800a6b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a6ba:	69da      	ldr	r2, [r3, #28]
 800a6bc:	683b      	ldr	r3, [r7, #0]
 800a6be:	781b      	ldrb	r3, [r3, #0]
 800a6c0:	f003 030f 	and.w	r3, r3, #15
 800a6c4:	2101      	movs	r1, #1
 800a6c6:	fa01 f303 	lsl.w	r3, r1, r3
 800a6ca:	b29b      	uxth	r3, r3
 800a6cc:	68f9      	ldr	r1, [r7, #12]
 800a6ce:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a6d2:	4313      	orrs	r3, r2
 800a6d4:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800a6d6:	68bb      	ldr	r3, [r7, #8]
 800a6d8:	015a      	lsls	r2, r3, #5
 800a6da:	68fb      	ldr	r3, [r7, #12]
 800a6dc:	4413      	add	r3, r2
 800a6de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a6e2:	681b      	ldr	r3, [r3, #0]
 800a6e4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a6e8:	2b00      	cmp	r3, #0
 800a6ea:	d155      	bne.n	800a798 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800a6ec:	68bb      	ldr	r3, [r7, #8]
 800a6ee:	015a      	lsls	r2, r3, #5
 800a6f0:	68fb      	ldr	r3, [r7, #12]
 800a6f2:	4413      	add	r3, r2
 800a6f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a6f8:	681a      	ldr	r2, [r3, #0]
 800a6fa:	683b      	ldr	r3, [r7, #0]
 800a6fc:	689b      	ldr	r3, [r3, #8]
 800a6fe:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800a702:	683b      	ldr	r3, [r7, #0]
 800a704:	78db      	ldrb	r3, [r3, #3]
 800a706:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800a708:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800a70a:	68bb      	ldr	r3, [r7, #8]
 800a70c:	059b      	lsls	r3, r3, #22
 800a70e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800a710:	4313      	orrs	r3, r2
 800a712:	68ba      	ldr	r2, [r7, #8]
 800a714:	0151      	lsls	r1, r2, #5
 800a716:	68fa      	ldr	r2, [r7, #12]
 800a718:	440a      	add	r2, r1
 800a71a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a71e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a722:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a726:	6013      	str	r3, [r2, #0]
 800a728:	e036      	b.n	800a798 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800a72a:	68fb      	ldr	r3, [r7, #12]
 800a72c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a730:	69da      	ldr	r2, [r3, #28]
 800a732:	683b      	ldr	r3, [r7, #0]
 800a734:	781b      	ldrb	r3, [r3, #0]
 800a736:	f003 030f 	and.w	r3, r3, #15
 800a73a:	2101      	movs	r1, #1
 800a73c:	fa01 f303 	lsl.w	r3, r1, r3
 800a740:	041b      	lsls	r3, r3, #16
 800a742:	68f9      	ldr	r1, [r7, #12]
 800a744:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a748:	4313      	orrs	r3, r2
 800a74a:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800a74c:	68bb      	ldr	r3, [r7, #8]
 800a74e:	015a      	lsls	r2, r3, #5
 800a750:	68fb      	ldr	r3, [r7, #12]
 800a752:	4413      	add	r3, r2
 800a754:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a758:	681b      	ldr	r3, [r3, #0]
 800a75a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a75e:	2b00      	cmp	r3, #0
 800a760:	d11a      	bne.n	800a798 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800a762:	68bb      	ldr	r3, [r7, #8]
 800a764:	015a      	lsls	r2, r3, #5
 800a766:	68fb      	ldr	r3, [r7, #12]
 800a768:	4413      	add	r3, r2
 800a76a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a76e:	681a      	ldr	r2, [r3, #0]
 800a770:	683b      	ldr	r3, [r7, #0]
 800a772:	689b      	ldr	r3, [r3, #8]
 800a774:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800a778:	683b      	ldr	r3, [r7, #0]
 800a77a:	78db      	ldrb	r3, [r3, #3]
 800a77c:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800a77e:	430b      	orrs	r3, r1
 800a780:	4313      	orrs	r3, r2
 800a782:	68ba      	ldr	r2, [r7, #8]
 800a784:	0151      	lsls	r1, r2, #5
 800a786:	68fa      	ldr	r2, [r7, #12]
 800a788:	440a      	add	r2, r1
 800a78a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a78e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a792:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a796:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800a798:	2300      	movs	r3, #0
}
 800a79a:	4618      	mov	r0, r3
 800a79c:	3714      	adds	r7, #20
 800a79e:	46bd      	mov	sp, r7
 800a7a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7a4:	4770      	bx	lr
	...

0800a7a8 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800a7a8:	b480      	push	{r7}
 800a7aa:	b085      	sub	sp, #20
 800a7ac:	af00      	add	r7, sp, #0
 800a7ae:	6078      	str	r0, [r7, #4]
 800a7b0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a7b6:	683b      	ldr	r3, [r7, #0]
 800a7b8:	781b      	ldrb	r3, [r3, #0]
 800a7ba:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800a7bc:	683b      	ldr	r3, [r7, #0]
 800a7be:	785b      	ldrb	r3, [r3, #1]
 800a7c0:	2b01      	cmp	r3, #1
 800a7c2:	d135      	bne.n	800a830 <USB_DeactivateEndpoint+0x88>
  {
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800a7c4:	68fb      	ldr	r3, [r7, #12]
 800a7c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a7ca:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a7cc:	683b      	ldr	r3, [r7, #0]
 800a7ce:	781b      	ldrb	r3, [r3, #0]
 800a7d0:	f003 030f 	and.w	r3, r3, #15
 800a7d4:	2101      	movs	r1, #1
 800a7d6:	fa01 f303 	lsl.w	r3, r1, r3
 800a7da:	b29b      	uxth	r3, r3
 800a7dc:	43db      	mvns	r3, r3
 800a7de:	68f9      	ldr	r1, [r7, #12]
 800a7e0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a7e4:	4013      	ands	r3, r2
 800a7e6:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800a7e8:	68fb      	ldr	r3, [r7, #12]
 800a7ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a7ee:	69da      	ldr	r2, [r3, #28]
 800a7f0:	683b      	ldr	r3, [r7, #0]
 800a7f2:	781b      	ldrb	r3, [r3, #0]
 800a7f4:	f003 030f 	and.w	r3, r3, #15
 800a7f8:	2101      	movs	r1, #1
 800a7fa:	fa01 f303 	lsl.w	r3, r1, r3
 800a7fe:	b29b      	uxth	r3, r3
 800a800:	43db      	mvns	r3, r3
 800a802:	68f9      	ldr	r1, [r7, #12]
 800a804:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a808:	4013      	ands	r3, r2
 800a80a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800a80c:	68bb      	ldr	r3, [r7, #8]
 800a80e:	015a      	lsls	r2, r3, #5
 800a810:	68fb      	ldr	r3, [r7, #12]
 800a812:	4413      	add	r3, r2
 800a814:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a818:	681a      	ldr	r2, [r3, #0]
 800a81a:	68bb      	ldr	r3, [r7, #8]
 800a81c:	0159      	lsls	r1, r3, #5
 800a81e:	68fb      	ldr	r3, [r7, #12]
 800a820:	440b      	add	r3, r1
 800a822:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a826:	4619      	mov	r1, r3
 800a828:	4b1f      	ldr	r3, [pc, #124]	; (800a8a8 <USB_DeactivateEndpoint+0x100>)
 800a82a:	4013      	ands	r3, r2
 800a82c:	600b      	str	r3, [r1, #0]
 800a82e:	e034      	b.n	800a89a <USB_DeactivateEndpoint+0xf2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800a830:	68fb      	ldr	r3, [r7, #12]
 800a832:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a836:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a838:	683b      	ldr	r3, [r7, #0]
 800a83a:	781b      	ldrb	r3, [r3, #0]
 800a83c:	f003 030f 	and.w	r3, r3, #15
 800a840:	2101      	movs	r1, #1
 800a842:	fa01 f303 	lsl.w	r3, r1, r3
 800a846:	041b      	lsls	r3, r3, #16
 800a848:	43db      	mvns	r3, r3
 800a84a:	68f9      	ldr	r1, [r7, #12]
 800a84c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a850:	4013      	ands	r3, r2
 800a852:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800a854:	68fb      	ldr	r3, [r7, #12]
 800a856:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a85a:	69da      	ldr	r2, [r3, #28]
 800a85c:	683b      	ldr	r3, [r7, #0]
 800a85e:	781b      	ldrb	r3, [r3, #0]
 800a860:	f003 030f 	and.w	r3, r3, #15
 800a864:	2101      	movs	r1, #1
 800a866:	fa01 f303 	lsl.w	r3, r1, r3
 800a86a:	041b      	lsls	r3, r3, #16
 800a86c:	43db      	mvns	r3, r3
 800a86e:	68f9      	ldr	r1, [r7, #12]
 800a870:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a874:	4013      	ands	r3, r2
 800a876:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800a878:	68bb      	ldr	r3, [r7, #8]
 800a87a:	015a      	lsls	r2, r3, #5
 800a87c:	68fb      	ldr	r3, [r7, #12]
 800a87e:	4413      	add	r3, r2
 800a880:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a884:	681a      	ldr	r2, [r3, #0]
 800a886:	68bb      	ldr	r3, [r7, #8]
 800a888:	0159      	lsls	r1, r3, #5
 800a88a:	68fb      	ldr	r3, [r7, #12]
 800a88c:	440b      	add	r3, r1
 800a88e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a892:	4619      	mov	r1, r3
 800a894:	4b05      	ldr	r3, [pc, #20]	; (800a8ac <USB_DeactivateEndpoint+0x104>)
 800a896:	4013      	ands	r3, r2
 800a898:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800a89a:	2300      	movs	r3, #0
}
 800a89c:	4618      	mov	r0, r3
 800a89e:	3714      	adds	r7, #20
 800a8a0:	46bd      	mov	sp, r7
 800a8a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8a6:	4770      	bx	lr
 800a8a8:	ec337800 	.word	0xec337800
 800a8ac:	eff37800 	.word	0xeff37800

0800a8b0 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800a8b0:	b580      	push	{r7, lr}
 800a8b2:	b08a      	sub	sp, #40	; 0x28
 800a8b4:	af02      	add	r7, sp, #8
 800a8b6:	60f8      	str	r0, [r7, #12]
 800a8b8:	60b9      	str	r1, [r7, #8]
 800a8ba:	4613      	mov	r3, r2
 800a8bc:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a8be:	68fb      	ldr	r3, [r7, #12]
 800a8c0:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800a8c2:	68bb      	ldr	r3, [r7, #8]
 800a8c4:	781b      	ldrb	r3, [r3, #0]
 800a8c6:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800a8c8:	68bb      	ldr	r3, [r7, #8]
 800a8ca:	785b      	ldrb	r3, [r3, #1]
 800a8cc:	2b01      	cmp	r3, #1
 800a8ce:	f040 815c 	bne.w	800ab8a <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800a8d2:	68bb      	ldr	r3, [r7, #8]
 800a8d4:	695b      	ldr	r3, [r3, #20]
 800a8d6:	2b00      	cmp	r3, #0
 800a8d8:	d132      	bne.n	800a940 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800a8da:	69bb      	ldr	r3, [r7, #24]
 800a8dc:	015a      	lsls	r2, r3, #5
 800a8de:	69fb      	ldr	r3, [r7, #28]
 800a8e0:	4413      	add	r3, r2
 800a8e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a8e6:	691b      	ldr	r3, [r3, #16]
 800a8e8:	69ba      	ldr	r2, [r7, #24]
 800a8ea:	0151      	lsls	r1, r2, #5
 800a8ec:	69fa      	ldr	r2, [r7, #28]
 800a8ee:	440a      	add	r2, r1
 800a8f0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a8f4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800a8f8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800a8fc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800a8fe:	69bb      	ldr	r3, [r7, #24]
 800a900:	015a      	lsls	r2, r3, #5
 800a902:	69fb      	ldr	r3, [r7, #28]
 800a904:	4413      	add	r3, r2
 800a906:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a90a:	691b      	ldr	r3, [r3, #16]
 800a90c:	69ba      	ldr	r2, [r7, #24]
 800a90e:	0151      	lsls	r1, r2, #5
 800a910:	69fa      	ldr	r2, [r7, #28]
 800a912:	440a      	add	r2, r1
 800a914:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a918:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a91c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800a91e:	69bb      	ldr	r3, [r7, #24]
 800a920:	015a      	lsls	r2, r3, #5
 800a922:	69fb      	ldr	r3, [r7, #28]
 800a924:	4413      	add	r3, r2
 800a926:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a92a:	691b      	ldr	r3, [r3, #16]
 800a92c:	69ba      	ldr	r2, [r7, #24]
 800a92e:	0151      	lsls	r1, r2, #5
 800a930:	69fa      	ldr	r2, [r7, #28]
 800a932:	440a      	add	r2, r1
 800a934:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a938:	0cdb      	lsrs	r3, r3, #19
 800a93a:	04db      	lsls	r3, r3, #19
 800a93c:	6113      	str	r3, [r2, #16]
 800a93e:	e074      	b.n	800aa2a <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800a940:	69bb      	ldr	r3, [r7, #24]
 800a942:	015a      	lsls	r2, r3, #5
 800a944:	69fb      	ldr	r3, [r7, #28]
 800a946:	4413      	add	r3, r2
 800a948:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a94c:	691b      	ldr	r3, [r3, #16]
 800a94e:	69ba      	ldr	r2, [r7, #24]
 800a950:	0151      	lsls	r1, r2, #5
 800a952:	69fa      	ldr	r2, [r7, #28]
 800a954:	440a      	add	r2, r1
 800a956:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a95a:	0cdb      	lsrs	r3, r3, #19
 800a95c:	04db      	lsls	r3, r3, #19
 800a95e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800a960:	69bb      	ldr	r3, [r7, #24]
 800a962:	015a      	lsls	r2, r3, #5
 800a964:	69fb      	ldr	r3, [r7, #28]
 800a966:	4413      	add	r3, r2
 800a968:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a96c:	691b      	ldr	r3, [r3, #16]
 800a96e:	69ba      	ldr	r2, [r7, #24]
 800a970:	0151      	lsls	r1, r2, #5
 800a972:	69fa      	ldr	r2, [r7, #28]
 800a974:	440a      	add	r2, r1
 800a976:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a97a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800a97e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800a982:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800a984:	69bb      	ldr	r3, [r7, #24]
 800a986:	015a      	lsls	r2, r3, #5
 800a988:	69fb      	ldr	r3, [r7, #28]
 800a98a:	4413      	add	r3, r2
 800a98c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a990:	691a      	ldr	r2, [r3, #16]
 800a992:	68bb      	ldr	r3, [r7, #8]
 800a994:	6959      	ldr	r1, [r3, #20]
 800a996:	68bb      	ldr	r3, [r7, #8]
 800a998:	689b      	ldr	r3, [r3, #8]
 800a99a:	440b      	add	r3, r1
 800a99c:	1e59      	subs	r1, r3, #1
 800a99e:	68bb      	ldr	r3, [r7, #8]
 800a9a0:	689b      	ldr	r3, [r3, #8]
 800a9a2:	fbb1 f3f3 	udiv	r3, r1, r3
 800a9a6:	04d9      	lsls	r1, r3, #19
 800a9a8:	4b9d      	ldr	r3, [pc, #628]	; (800ac20 <USB_EPStartXfer+0x370>)
 800a9aa:	400b      	ands	r3, r1
 800a9ac:	69b9      	ldr	r1, [r7, #24]
 800a9ae:	0148      	lsls	r0, r1, #5
 800a9b0:	69f9      	ldr	r1, [r7, #28]
 800a9b2:	4401      	add	r1, r0
 800a9b4:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800a9b8:	4313      	orrs	r3, r2
 800a9ba:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800a9bc:	69bb      	ldr	r3, [r7, #24]
 800a9be:	015a      	lsls	r2, r3, #5
 800a9c0:	69fb      	ldr	r3, [r7, #28]
 800a9c2:	4413      	add	r3, r2
 800a9c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a9c8:	691a      	ldr	r2, [r3, #16]
 800a9ca:	68bb      	ldr	r3, [r7, #8]
 800a9cc:	695b      	ldr	r3, [r3, #20]
 800a9ce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a9d2:	69b9      	ldr	r1, [r7, #24]
 800a9d4:	0148      	lsls	r0, r1, #5
 800a9d6:	69f9      	ldr	r1, [r7, #28]
 800a9d8:	4401      	add	r1, r0
 800a9da:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800a9de:	4313      	orrs	r3, r2
 800a9e0:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800a9e2:	68bb      	ldr	r3, [r7, #8]
 800a9e4:	78db      	ldrb	r3, [r3, #3]
 800a9e6:	2b01      	cmp	r3, #1
 800a9e8:	d11f      	bne.n	800aa2a <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800a9ea:	69bb      	ldr	r3, [r7, #24]
 800a9ec:	015a      	lsls	r2, r3, #5
 800a9ee:	69fb      	ldr	r3, [r7, #28]
 800a9f0:	4413      	add	r3, r2
 800a9f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a9f6:	691b      	ldr	r3, [r3, #16]
 800a9f8:	69ba      	ldr	r2, [r7, #24]
 800a9fa:	0151      	lsls	r1, r2, #5
 800a9fc:	69fa      	ldr	r2, [r7, #28]
 800a9fe:	440a      	add	r2, r1
 800aa00:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800aa04:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800aa08:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800aa0a:	69bb      	ldr	r3, [r7, #24]
 800aa0c:	015a      	lsls	r2, r3, #5
 800aa0e:	69fb      	ldr	r3, [r7, #28]
 800aa10:	4413      	add	r3, r2
 800aa12:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aa16:	691b      	ldr	r3, [r3, #16]
 800aa18:	69ba      	ldr	r2, [r7, #24]
 800aa1a:	0151      	lsls	r1, r2, #5
 800aa1c:	69fa      	ldr	r2, [r7, #28]
 800aa1e:	440a      	add	r2, r1
 800aa20:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800aa24:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800aa28:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800aa2a:	79fb      	ldrb	r3, [r7, #7]
 800aa2c:	2b01      	cmp	r3, #1
 800aa2e:	d14b      	bne.n	800aac8 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800aa30:	68bb      	ldr	r3, [r7, #8]
 800aa32:	691b      	ldr	r3, [r3, #16]
 800aa34:	2b00      	cmp	r3, #0
 800aa36:	d009      	beq.n	800aa4c <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800aa38:	69bb      	ldr	r3, [r7, #24]
 800aa3a:	015a      	lsls	r2, r3, #5
 800aa3c:	69fb      	ldr	r3, [r7, #28]
 800aa3e:	4413      	add	r3, r2
 800aa40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aa44:	461a      	mov	r2, r3
 800aa46:	68bb      	ldr	r3, [r7, #8]
 800aa48:	691b      	ldr	r3, [r3, #16]
 800aa4a:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800aa4c:	68bb      	ldr	r3, [r7, #8]
 800aa4e:	78db      	ldrb	r3, [r3, #3]
 800aa50:	2b01      	cmp	r3, #1
 800aa52:	d128      	bne.n	800aaa6 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800aa54:	69fb      	ldr	r3, [r7, #28]
 800aa56:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800aa5a:	689b      	ldr	r3, [r3, #8]
 800aa5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800aa60:	2b00      	cmp	r3, #0
 800aa62:	d110      	bne.n	800aa86 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800aa64:	69bb      	ldr	r3, [r7, #24]
 800aa66:	015a      	lsls	r2, r3, #5
 800aa68:	69fb      	ldr	r3, [r7, #28]
 800aa6a:	4413      	add	r3, r2
 800aa6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aa70:	681b      	ldr	r3, [r3, #0]
 800aa72:	69ba      	ldr	r2, [r7, #24]
 800aa74:	0151      	lsls	r1, r2, #5
 800aa76:	69fa      	ldr	r2, [r7, #28]
 800aa78:	440a      	add	r2, r1
 800aa7a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800aa7e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800aa82:	6013      	str	r3, [r2, #0]
 800aa84:	e00f      	b.n	800aaa6 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800aa86:	69bb      	ldr	r3, [r7, #24]
 800aa88:	015a      	lsls	r2, r3, #5
 800aa8a:	69fb      	ldr	r3, [r7, #28]
 800aa8c:	4413      	add	r3, r2
 800aa8e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aa92:	681b      	ldr	r3, [r3, #0]
 800aa94:	69ba      	ldr	r2, [r7, #24]
 800aa96:	0151      	lsls	r1, r2, #5
 800aa98:	69fa      	ldr	r2, [r7, #28]
 800aa9a:	440a      	add	r2, r1
 800aa9c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800aaa0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800aaa4:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800aaa6:	69bb      	ldr	r3, [r7, #24]
 800aaa8:	015a      	lsls	r2, r3, #5
 800aaaa:	69fb      	ldr	r3, [r7, #28]
 800aaac:	4413      	add	r3, r2
 800aaae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aab2:	681b      	ldr	r3, [r3, #0]
 800aab4:	69ba      	ldr	r2, [r7, #24]
 800aab6:	0151      	lsls	r1, r2, #5
 800aab8:	69fa      	ldr	r2, [r7, #28]
 800aaba:	440a      	add	r2, r1
 800aabc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800aac0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800aac4:	6013      	str	r3, [r2, #0]
 800aac6:	e12f      	b.n	800ad28 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800aac8:	69bb      	ldr	r3, [r7, #24]
 800aaca:	015a      	lsls	r2, r3, #5
 800aacc:	69fb      	ldr	r3, [r7, #28]
 800aace:	4413      	add	r3, r2
 800aad0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aad4:	681b      	ldr	r3, [r3, #0]
 800aad6:	69ba      	ldr	r2, [r7, #24]
 800aad8:	0151      	lsls	r1, r2, #5
 800aada:	69fa      	ldr	r2, [r7, #28]
 800aadc:	440a      	add	r2, r1
 800aade:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800aae2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800aae6:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800aae8:	68bb      	ldr	r3, [r7, #8]
 800aaea:	78db      	ldrb	r3, [r3, #3]
 800aaec:	2b01      	cmp	r3, #1
 800aaee:	d015      	beq.n	800ab1c <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800aaf0:	68bb      	ldr	r3, [r7, #8]
 800aaf2:	695b      	ldr	r3, [r3, #20]
 800aaf4:	2b00      	cmp	r3, #0
 800aaf6:	f000 8117 	beq.w	800ad28 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800aafa:	69fb      	ldr	r3, [r7, #28]
 800aafc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ab00:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ab02:	68bb      	ldr	r3, [r7, #8]
 800ab04:	781b      	ldrb	r3, [r3, #0]
 800ab06:	f003 030f 	and.w	r3, r3, #15
 800ab0a:	2101      	movs	r1, #1
 800ab0c:	fa01 f303 	lsl.w	r3, r1, r3
 800ab10:	69f9      	ldr	r1, [r7, #28]
 800ab12:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ab16:	4313      	orrs	r3, r2
 800ab18:	634b      	str	r3, [r1, #52]	; 0x34
 800ab1a:	e105      	b.n	800ad28 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800ab1c:	69fb      	ldr	r3, [r7, #28]
 800ab1e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ab22:	689b      	ldr	r3, [r3, #8]
 800ab24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ab28:	2b00      	cmp	r3, #0
 800ab2a:	d110      	bne.n	800ab4e <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800ab2c:	69bb      	ldr	r3, [r7, #24]
 800ab2e:	015a      	lsls	r2, r3, #5
 800ab30:	69fb      	ldr	r3, [r7, #28]
 800ab32:	4413      	add	r3, r2
 800ab34:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ab38:	681b      	ldr	r3, [r3, #0]
 800ab3a:	69ba      	ldr	r2, [r7, #24]
 800ab3c:	0151      	lsls	r1, r2, #5
 800ab3e:	69fa      	ldr	r2, [r7, #28]
 800ab40:	440a      	add	r2, r1
 800ab42:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ab46:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800ab4a:	6013      	str	r3, [r2, #0]
 800ab4c:	e00f      	b.n	800ab6e <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800ab4e:	69bb      	ldr	r3, [r7, #24]
 800ab50:	015a      	lsls	r2, r3, #5
 800ab52:	69fb      	ldr	r3, [r7, #28]
 800ab54:	4413      	add	r3, r2
 800ab56:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ab5a:	681b      	ldr	r3, [r3, #0]
 800ab5c:	69ba      	ldr	r2, [r7, #24]
 800ab5e:	0151      	lsls	r1, r2, #5
 800ab60:	69fa      	ldr	r2, [r7, #28]
 800ab62:	440a      	add	r2, r1
 800ab64:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ab68:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ab6c:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800ab6e:	68bb      	ldr	r3, [r7, #8]
 800ab70:	68d9      	ldr	r1, [r3, #12]
 800ab72:	68bb      	ldr	r3, [r7, #8]
 800ab74:	781a      	ldrb	r2, [r3, #0]
 800ab76:	68bb      	ldr	r3, [r7, #8]
 800ab78:	695b      	ldr	r3, [r3, #20]
 800ab7a:	b298      	uxth	r0, r3
 800ab7c:	79fb      	ldrb	r3, [r7, #7]
 800ab7e:	9300      	str	r3, [sp, #0]
 800ab80:	4603      	mov	r3, r0
 800ab82:	68f8      	ldr	r0, [r7, #12]
 800ab84:	f000 fa2b 	bl	800afde <USB_WritePacket>
 800ab88:	e0ce      	b.n	800ad28 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800ab8a:	69bb      	ldr	r3, [r7, #24]
 800ab8c:	015a      	lsls	r2, r3, #5
 800ab8e:	69fb      	ldr	r3, [r7, #28]
 800ab90:	4413      	add	r3, r2
 800ab92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ab96:	691b      	ldr	r3, [r3, #16]
 800ab98:	69ba      	ldr	r2, [r7, #24]
 800ab9a:	0151      	lsls	r1, r2, #5
 800ab9c:	69fa      	ldr	r2, [r7, #28]
 800ab9e:	440a      	add	r2, r1
 800aba0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800aba4:	0cdb      	lsrs	r3, r3, #19
 800aba6:	04db      	lsls	r3, r3, #19
 800aba8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800abaa:	69bb      	ldr	r3, [r7, #24]
 800abac:	015a      	lsls	r2, r3, #5
 800abae:	69fb      	ldr	r3, [r7, #28]
 800abb0:	4413      	add	r3, r2
 800abb2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800abb6:	691b      	ldr	r3, [r3, #16]
 800abb8:	69ba      	ldr	r2, [r7, #24]
 800abba:	0151      	lsls	r1, r2, #5
 800abbc:	69fa      	ldr	r2, [r7, #28]
 800abbe:	440a      	add	r2, r1
 800abc0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800abc4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800abc8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800abcc:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800abce:	68bb      	ldr	r3, [r7, #8]
 800abd0:	695b      	ldr	r3, [r3, #20]
 800abd2:	2b00      	cmp	r3, #0
 800abd4:	d126      	bne.n	800ac24 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800abd6:	69bb      	ldr	r3, [r7, #24]
 800abd8:	015a      	lsls	r2, r3, #5
 800abda:	69fb      	ldr	r3, [r7, #28]
 800abdc:	4413      	add	r3, r2
 800abde:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800abe2:	691a      	ldr	r2, [r3, #16]
 800abe4:	68bb      	ldr	r3, [r7, #8]
 800abe6:	689b      	ldr	r3, [r3, #8]
 800abe8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800abec:	69b9      	ldr	r1, [r7, #24]
 800abee:	0148      	lsls	r0, r1, #5
 800abf0:	69f9      	ldr	r1, [r7, #28]
 800abf2:	4401      	add	r1, r0
 800abf4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800abf8:	4313      	orrs	r3, r2
 800abfa:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800abfc:	69bb      	ldr	r3, [r7, #24]
 800abfe:	015a      	lsls	r2, r3, #5
 800ac00:	69fb      	ldr	r3, [r7, #28]
 800ac02:	4413      	add	r3, r2
 800ac04:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ac08:	691b      	ldr	r3, [r3, #16]
 800ac0a:	69ba      	ldr	r2, [r7, #24]
 800ac0c:	0151      	lsls	r1, r2, #5
 800ac0e:	69fa      	ldr	r2, [r7, #28]
 800ac10:	440a      	add	r2, r1
 800ac12:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ac16:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800ac1a:	6113      	str	r3, [r2, #16]
 800ac1c:	e036      	b.n	800ac8c <USB_EPStartXfer+0x3dc>
 800ac1e:	bf00      	nop
 800ac20:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800ac24:	68bb      	ldr	r3, [r7, #8]
 800ac26:	695a      	ldr	r2, [r3, #20]
 800ac28:	68bb      	ldr	r3, [r7, #8]
 800ac2a:	689b      	ldr	r3, [r3, #8]
 800ac2c:	4413      	add	r3, r2
 800ac2e:	1e5a      	subs	r2, r3, #1
 800ac30:	68bb      	ldr	r3, [r7, #8]
 800ac32:	689b      	ldr	r3, [r3, #8]
 800ac34:	fbb2 f3f3 	udiv	r3, r2, r3
 800ac38:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800ac3a:	69bb      	ldr	r3, [r7, #24]
 800ac3c:	015a      	lsls	r2, r3, #5
 800ac3e:	69fb      	ldr	r3, [r7, #28]
 800ac40:	4413      	add	r3, r2
 800ac42:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ac46:	691a      	ldr	r2, [r3, #16]
 800ac48:	8afb      	ldrh	r3, [r7, #22]
 800ac4a:	04d9      	lsls	r1, r3, #19
 800ac4c:	4b39      	ldr	r3, [pc, #228]	; (800ad34 <USB_EPStartXfer+0x484>)
 800ac4e:	400b      	ands	r3, r1
 800ac50:	69b9      	ldr	r1, [r7, #24]
 800ac52:	0148      	lsls	r0, r1, #5
 800ac54:	69f9      	ldr	r1, [r7, #28]
 800ac56:	4401      	add	r1, r0
 800ac58:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800ac5c:	4313      	orrs	r3, r2
 800ac5e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 800ac60:	69bb      	ldr	r3, [r7, #24]
 800ac62:	015a      	lsls	r2, r3, #5
 800ac64:	69fb      	ldr	r3, [r7, #28]
 800ac66:	4413      	add	r3, r2
 800ac68:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ac6c:	691a      	ldr	r2, [r3, #16]
 800ac6e:	68bb      	ldr	r3, [r7, #8]
 800ac70:	689b      	ldr	r3, [r3, #8]
 800ac72:	8af9      	ldrh	r1, [r7, #22]
 800ac74:	fb01 f303 	mul.w	r3, r1, r3
 800ac78:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800ac7c:	69b9      	ldr	r1, [r7, #24]
 800ac7e:	0148      	lsls	r0, r1, #5
 800ac80:	69f9      	ldr	r1, [r7, #28]
 800ac82:	4401      	add	r1, r0
 800ac84:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800ac88:	4313      	orrs	r3, r2
 800ac8a:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800ac8c:	79fb      	ldrb	r3, [r7, #7]
 800ac8e:	2b01      	cmp	r3, #1
 800ac90:	d10d      	bne.n	800acae <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800ac92:	68bb      	ldr	r3, [r7, #8]
 800ac94:	68db      	ldr	r3, [r3, #12]
 800ac96:	2b00      	cmp	r3, #0
 800ac98:	d009      	beq.n	800acae <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800ac9a:	68bb      	ldr	r3, [r7, #8]
 800ac9c:	68d9      	ldr	r1, [r3, #12]
 800ac9e:	69bb      	ldr	r3, [r7, #24]
 800aca0:	015a      	lsls	r2, r3, #5
 800aca2:	69fb      	ldr	r3, [r7, #28]
 800aca4:	4413      	add	r3, r2
 800aca6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800acaa:	460a      	mov	r2, r1
 800acac:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800acae:	68bb      	ldr	r3, [r7, #8]
 800acb0:	78db      	ldrb	r3, [r3, #3]
 800acb2:	2b01      	cmp	r3, #1
 800acb4:	d128      	bne.n	800ad08 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800acb6:	69fb      	ldr	r3, [r7, #28]
 800acb8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800acbc:	689b      	ldr	r3, [r3, #8]
 800acbe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800acc2:	2b00      	cmp	r3, #0
 800acc4:	d110      	bne.n	800ace8 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800acc6:	69bb      	ldr	r3, [r7, #24]
 800acc8:	015a      	lsls	r2, r3, #5
 800acca:	69fb      	ldr	r3, [r7, #28]
 800accc:	4413      	add	r3, r2
 800acce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800acd2:	681b      	ldr	r3, [r3, #0]
 800acd4:	69ba      	ldr	r2, [r7, #24]
 800acd6:	0151      	lsls	r1, r2, #5
 800acd8:	69fa      	ldr	r2, [r7, #28]
 800acda:	440a      	add	r2, r1
 800acdc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ace0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800ace4:	6013      	str	r3, [r2, #0]
 800ace6:	e00f      	b.n	800ad08 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800ace8:	69bb      	ldr	r3, [r7, #24]
 800acea:	015a      	lsls	r2, r3, #5
 800acec:	69fb      	ldr	r3, [r7, #28]
 800acee:	4413      	add	r3, r2
 800acf0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800acf4:	681b      	ldr	r3, [r3, #0]
 800acf6:	69ba      	ldr	r2, [r7, #24]
 800acf8:	0151      	lsls	r1, r2, #5
 800acfa:	69fa      	ldr	r2, [r7, #28]
 800acfc:	440a      	add	r2, r1
 800acfe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ad02:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ad06:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800ad08:	69bb      	ldr	r3, [r7, #24]
 800ad0a:	015a      	lsls	r2, r3, #5
 800ad0c:	69fb      	ldr	r3, [r7, #28]
 800ad0e:	4413      	add	r3, r2
 800ad10:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ad14:	681b      	ldr	r3, [r3, #0]
 800ad16:	69ba      	ldr	r2, [r7, #24]
 800ad18:	0151      	lsls	r1, r2, #5
 800ad1a:	69fa      	ldr	r2, [r7, #28]
 800ad1c:	440a      	add	r2, r1
 800ad1e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ad22:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800ad26:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800ad28:	2300      	movs	r3, #0
}
 800ad2a:	4618      	mov	r0, r3
 800ad2c:	3720      	adds	r7, #32
 800ad2e:	46bd      	mov	sp, r7
 800ad30:	bd80      	pop	{r7, pc}
 800ad32:	bf00      	nop
 800ad34:	1ff80000 	.word	0x1ff80000

0800ad38 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800ad38:	b480      	push	{r7}
 800ad3a:	b087      	sub	sp, #28
 800ad3c:	af00      	add	r7, sp, #0
 800ad3e:	60f8      	str	r0, [r7, #12]
 800ad40:	60b9      	str	r1, [r7, #8]
 800ad42:	4613      	mov	r3, r2
 800ad44:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ad46:	68fb      	ldr	r3, [r7, #12]
 800ad48:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800ad4a:	68bb      	ldr	r3, [r7, #8]
 800ad4c:	781b      	ldrb	r3, [r3, #0]
 800ad4e:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800ad50:	68bb      	ldr	r3, [r7, #8]
 800ad52:	785b      	ldrb	r3, [r3, #1]
 800ad54:	2b01      	cmp	r3, #1
 800ad56:	f040 80cd 	bne.w	800aef4 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800ad5a:	68bb      	ldr	r3, [r7, #8]
 800ad5c:	695b      	ldr	r3, [r3, #20]
 800ad5e:	2b00      	cmp	r3, #0
 800ad60:	d132      	bne.n	800adc8 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800ad62:	693b      	ldr	r3, [r7, #16]
 800ad64:	015a      	lsls	r2, r3, #5
 800ad66:	697b      	ldr	r3, [r7, #20]
 800ad68:	4413      	add	r3, r2
 800ad6a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ad6e:	691b      	ldr	r3, [r3, #16]
 800ad70:	693a      	ldr	r2, [r7, #16]
 800ad72:	0151      	lsls	r1, r2, #5
 800ad74:	697a      	ldr	r2, [r7, #20]
 800ad76:	440a      	add	r2, r1
 800ad78:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ad7c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800ad80:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800ad84:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800ad86:	693b      	ldr	r3, [r7, #16]
 800ad88:	015a      	lsls	r2, r3, #5
 800ad8a:	697b      	ldr	r3, [r7, #20]
 800ad8c:	4413      	add	r3, r2
 800ad8e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ad92:	691b      	ldr	r3, [r3, #16]
 800ad94:	693a      	ldr	r2, [r7, #16]
 800ad96:	0151      	lsls	r1, r2, #5
 800ad98:	697a      	ldr	r2, [r7, #20]
 800ad9a:	440a      	add	r2, r1
 800ad9c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ada0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800ada4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800ada6:	693b      	ldr	r3, [r7, #16]
 800ada8:	015a      	lsls	r2, r3, #5
 800adaa:	697b      	ldr	r3, [r7, #20]
 800adac:	4413      	add	r3, r2
 800adae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800adb2:	691b      	ldr	r3, [r3, #16]
 800adb4:	693a      	ldr	r2, [r7, #16]
 800adb6:	0151      	lsls	r1, r2, #5
 800adb8:	697a      	ldr	r2, [r7, #20]
 800adba:	440a      	add	r2, r1
 800adbc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800adc0:	0cdb      	lsrs	r3, r3, #19
 800adc2:	04db      	lsls	r3, r3, #19
 800adc4:	6113      	str	r3, [r2, #16]
 800adc6:	e04e      	b.n	800ae66 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800adc8:	693b      	ldr	r3, [r7, #16]
 800adca:	015a      	lsls	r2, r3, #5
 800adcc:	697b      	ldr	r3, [r7, #20]
 800adce:	4413      	add	r3, r2
 800add0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800add4:	691b      	ldr	r3, [r3, #16]
 800add6:	693a      	ldr	r2, [r7, #16]
 800add8:	0151      	lsls	r1, r2, #5
 800adda:	697a      	ldr	r2, [r7, #20]
 800addc:	440a      	add	r2, r1
 800adde:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ade2:	0cdb      	lsrs	r3, r3, #19
 800ade4:	04db      	lsls	r3, r3, #19
 800ade6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800ade8:	693b      	ldr	r3, [r7, #16]
 800adea:	015a      	lsls	r2, r3, #5
 800adec:	697b      	ldr	r3, [r7, #20]
 800adee:	4413      	add	r3, r2
 800adf0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800adf4:	691b      	ldr	r3, [r3, #16]
 800adf6:	693a      	ldr	r2, [r7, #16]
 800adf8:	0151      	lsls	r1, r2, #5
 800adfa:	697a      	ldr	r2, [r7, #20]
 800adfc:	440a      	add	r2, r1
 800adfe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ae02:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800ae06:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800ae0a:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 800ae0c:	68bb      	ldr	r3, [r7, #8]
 800ae0e:	695a      	ldr	r2, [r3, #20]
 800ae10:	68bb      	ldr	r3, [r7, #8]
 800ae12:	689b      	ldr	r3, [r3, #8]
 800ae14:	429a      	cmp	r2, r3
 800ae16:	d903      	bls.n	800ae20 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800ae18:	68bb      	ldr	r3, [r7, #8]
 800ae1a:	689a      	ldr	r2, [r3, #8]
 800ae1c:	68bb      	ldr	r3, [r7, #8]
 800ae1e:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800ae20:	693b      	ldr	r3, [r7, #16]
 800ae22:	015a      	lsls	r2, r3, #5
 800ae24:	697b      	ldr	r3, [r7, #20]
 800ae26:	4413      	add	r3, r2
 800ae28:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ae2c:	691b      	ldr	r3, [r3, #16]
 800ae2e:	693a      	ldr	r2, [r7, #16]
 800ae30:	0151      	lsls	r1, r2, #5
 800ae32:	697a      	ldr	r2, [r7, #20]
 800ae34:	440a      	add	r2, r1
 800ae36:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ae3a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800ae3e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800ae40:	693b      	ldr	r3, [r7, #16]
 800ae42:	015a      	lsls	r2, r3, #5
 800ae44:	697b      	ldr	r3, [r7, #20]
 800ae46:	4413      	add	r3, r2
 800ae48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ae4c:	691a      	ldr	r2, [r3, #16]
 800ae4e:	68bb      	ldr	r3, [r7, #8]
 800ae50:	695b      	ldr	r3, [r3, #20]
 800ae52:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800ae56:	6939      	ldr	r1, [r7, #16]
 800ae58:	0148      	lsls	r0, r1, #5
 800ae5a:	6979      	ldr	r1, [r7, #20]
 800ae5c:	4401      	add	r1, r0
 800ae5e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800ae62:	4313      	orrs	r3, r2
 800ae64:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800ae66:	79fb      	ldrb	r3, [r7, #7]
 800ae68:	2b01      	cmp	r3, #1
 800ae6a:	d11e      	bne.n	800aeaa <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800ae6c:	68bb      	ldr	r3, [r7, #8]
 800ae6e:	691b      	ldr	r3, [r3, #16]
 800ae70:	2b00      	cmp	r3, #0
 800ae72:	d009      	beq.n	800ae88 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800ae74:	693b      	ldr	r3, [r7, #16]
 800ae76:	015a      	lsls	r2, r3, #5
 800ae78:	697b      	ldr	r3, [r7, #20]
 800ae7a:	4413      	add	r3, r2
 800ae7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ae80:	461a      	mov	r2, r3
 800ae82:	68bb      	ldr	r3, [r7, #8]
 800ae84:	691b      	ldr	r3, [r3, #16]
 800ae86:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800ae88:	693b      	ldr	r3, [r7, #16]
 800ae8a:	015a      	lsls	r2, r3, #5
 800ae8c:	697b      	ldr	r3, [r7, #20]
 800ae8e:	4413      	add	r3, r2
 800ae90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ae94:	681b      	ldr	r3, [r3, #0]
 800ae96:	693a      	ldr	r2, [r7, #16]
 800ae98:	0151      	lsls	r1, r2, #5
 800ae9a:	697a      	ldr	r2, [r7, #20]
 800ae9c:	440a      	add	r2, r1
 800ae9e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800aea2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800aea6:	6013      	str	r3, [r2, #0]
 800aea8:	e092      	b.n	800afd0 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800aeaa:	693b      	ldr	r3, [r7, #16]
 800aeac:	015a      	lsls	r2, r3, #5
 800aeae:	697b      	ldr	r3, [r7, #20]
 800aeb0:	4413      	add	r3, r2
 800aeb2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aeb6:	681b      	ldr	r3, [r3, #0]
 800aeb8:	693a      	ldr	r2, [r7, #16]
 800aeba:	0151      	lsls	r1, r2, #5
 800aebc:	697a      	ldr	r2, [r7, #20]
 800aebe:	440a      	add	r2, r1
 800aec0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800aec4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800aec8:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800aeca:	68bb      	ldr	r3, [r7, #8]
 800aecc:	695b      	ldr	r3, [r3, #20]
 800aece:	2b00      	cmp	r3, #0
 800aed0:	d07e      	beq.n	800afd0 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800aed2:	697b      	ldr	r3, [r7, #20]
 800aed4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800aed8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800aeda:	68bb      	ldr	r3, [r7, #8]
 800aedc:	781b      	ldrb	r3, [r3, #0]
 800aede:	f003 030f 	and.w	r3, r3, #15
 800aee2:	2101      	movs	r1, #1
 800aee4:	fa01 f303 	lsl.w	r3, r1, r3
 800aee8:	6979      	ldr	r1, [r7, #20]
 800aeea:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800aeee:	4313      	orrs	r3, r2
 800aef0:	634b      	str	r3, [r1, #52]	; 0x34
 800aef2:	e06d      	b.n	800afd0 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800aef4:	693b      	ldr	r3, [r7, #16]
 800aef6:	015a      	lsls	r2, r3, #5
 800aef8:	697b      	ldr	r3, [r7, #20]
 800aefa:	4413      	add	r3, r2
 800aefc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800af00:	691b      	ldr	r3, [r3, #16]
 800af02:	693a      	ldr	r2, [r7, #16]
 800af04:	0151      	lsls	r1, r2, #5
 800af06:	697a      	ldr	r2, [r7, #20]
 800af08:	440a      	add	r2, r1
 800af0a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800af0e:	0cdb      	lsrs	r3, r3, #19
 800af10:	04db      	lsls	r3, r3, #19
 800af12:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800af14:	693b      	ldr	r3, [r7, #16]
 800af16:	015a      	lsls	r2, r3, #5
 800af18:	697b      	ldr	r3, [r7, #20]
 800af1a:	4413      	add	r3, r2
 800af1c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800af20:	691b      	ldr	r3, [r3, #16]
 800af22:	693a      	ldr	r2, [r7, #16]
 800af24:	0151      	lsls	r1, r2, #5
 800af26:	697a      	ldr	r2, [r7, #20]
 800af28:	440a      	add	r2, r1
 800af2a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800af2e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800af32:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800af36:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800af38:	68bb      	ldr	r3, [r7, #8]
 800af3a:	695b      	ldr	r3, [r3, #20]
 800af3c:	2b00      	cmp	r3, #0
 800af3e:	d003      	beq.n	800af48 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 800af40:	68bb      	ldr	r3, [r7, #8]
 800af42:	689a      	ldr	r2, [r3, #8]
 800af44:	68bb      	ldr	r3, [r7, #8]
 800af46:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800af48:	693b      	ldr	r3, [r7, #16]
 800af4a:	015a      	lsls	r2, r3, #5
 800af4c:	697b      	ldr	r3, [r7, #20]
 800af4e:	4413      	add	r3, r2
 800af50:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800af54:	691b      	ldr	r3, [r3, #16]
 800af56:	693a      	ldr	r2, [r7, #16]
 800af58:	0151      	lsls	r1, r2, #5
 800af5a:	697a      	ldr	r2, [r7, #20]
 800af5c:	440a      	add	r2, r1
 800af5e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800af62:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800af66:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 800af68:	693b      	ldr	r3, [r7, #16]
 800af6a:	015a      	lsls	r2, r3, #5
 800af6c:	697b      	ldr	r3, [r7, #20]
 800af6e:	4413      	add	r3, r2
 800af70:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800af74:	691a      	ldr	r2, [r3, #16]
 800af76:	68bb      	ldr	r3, [r7, #8]
 800af78:	689b      	ldr	r3, [r3, #8]
 800af7a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800af7e:	6939      	ldr	r1, [r7, #16]
 800af80:	0148      	lsls	r0, r1, #5
 800af82:	6979      	ldr	r1, [r7, #20]
 800af84:	4401      	add	r1, r0
 800af86:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800af8a:	4313      	orrs	r3, r2
 800af8c:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800af8e:	79fb      	ldrb	r3, [r7, #7]
 800af90:	2b01      	cmp	r3, #1
 800af92:	d10d      	bne.n	800afb0 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800af94:	68bb      	ldr	r3, [r7, #8]
 800af96:	68db      	ldr	r3, [r3, #12]
 800af98:	2b00      	cmp	r3, #0
 800af9a:	d009      	beq.n	800afb0 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800af9c:	68bb      	ldr	r3, [r7, #8]
 800af9e:	68d9      	ldr	r1, [r3, #12]
 800afa0:	693b      	ldr	r3, [r7, #16]
 800afa2:	015a      	lsls	r2, r3, #5
 800afa4:	697b      	ldr	r3, [r7, #20]
 800afa6:	4413      	add	r3, r2
 800afa8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800afac:	460a      	mov	r2, r1
 800afae:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800afb0:	693b      	ldr	r3, [r7, #16]
 800afb2:	015a      	lsls	r2, r3, #5
 800afb4:	697b      	ldr	r3, [r7, #20]
 800afb6:	4413      	add	r3, r2
 800afb8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800afbc:	681b      	ldr	r3, [r3, #0]
 800afbe:	693a      	ldr	r2, [r7, #16]
 800afc0:	0151      	lsls	r1, r2, #5
 800afc2:	697a      	ldr	r2, [r7, #20]
 800afc4:	440a      	add	r2, r1
 800afc6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800afca:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800afce:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800afd0:	2300      	movs	r3, #0
}
 800afd2:	4618      	mov	r0, r3
 800afd4:	371c      	adds	r7, #28
 800afd6:	46bd      	mov	sp, r7
 800afd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afdc:	4770      	bx	lr

0800afde <USB_WritePacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800afde:	b480      	push	{r7}
 800afe0:	b089      	sub	sp, #36	; 0x24
 800afe2:	af00      	add	r7, sp, #0
 800afe4:	60f8      	str	r0, [r7, #12]
 800afe6:	60b9      	str	r1, [r7, #8]
 800afe8:	4611      	mov	r1, r2
 800afea:	461a      	mov	r2, r3
 800afec:	460b      	mov	r3, r1
 800afee:	71fb      	strb	r3, [r7, #7]
 800aff0:	4613      	mov	r3, r2
 800aff2:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aff4:	68fb      	ldr	r3, [r7, #12]
 800aff6:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 800aff8:	68bb      	ldr	r3, [r7, #8]
 800affa:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 800affc:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800b000:	2b00      	cmp	r3, #0
 800b002:	d11a      	bne.n	800b03a <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800b004:	88bb      	ldrh	r3, [r7, #4]
 800b006:	3303      	adds	r3, #3
 800b008:	089b      	lsrs	r3, r3, #2
 800b00a:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800b00c:	2300      	movs	r3, #0
 800b00e:	61bb      	str	r3, [r7, #24]
 800b010:	e00f      	b.n	800b032 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800b012:	79fb      	ldrb	r3, [r7, #7]
 800b014:	031a      	lsls	r2, r3, #12
 800b016:	697b      	ldr	r3, [r7, #20]
 800b018:	4413      	add	r3, r2
 800b01a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b01e:	461a      	mov	r2, r3
 800b020:	69fb      	ldr	r3, [r7, #28]
 800b022:	681b      	ldr	r3, [r3, #0]
 800b024:	6013      	str	r3, [r2, #0]
      pSrc++;
 800b026:	69fb      	ldr	r3, [r7, #28]
 800b028:	3304      	adds	r3, #4
 800b02a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800b02c:	69bb      	ldr	r3, [r7, #24]
 800b02e:	3301      	adds	r3, #1
 800b030:	61bb      	str	r3, [r7, #24]
 800b032:	69ba      	ldr	r2, [r7, #24]
 800b034:	693b      	ldr	r3, [r7, #16]
 800b036:	429a      	cmp	r2, r3
 800b038:	d3eb      	bcc.n	800b012 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800b03a:	2300      	movs	r3, #0
}
 800b03c:	4618      	mov	r0, r3
 800b03e:	3724      	adds	r7, #36	; 0x24
 800b040:	46bd      	mov	sp, r7
 800b042:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b046:	4770      	bx	lr

0800b048 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800b048:	b480      	push	{r7}
 800b04a:	b089      	sub	sp, #36	; 0x24
 800b04c:	af00      	add	r7, sp, #0
 800b04e:	60f8      	str	r0, [r7, #12]
 800b050:	60b9      	str	r1, [r7, #8]
 800b052:	4613      	mov	r3, r2
 800b054:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b056:	68fb      	ldr	r3, [r7, #12]
 800b058:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 800b05a:	68bb      	ldr	r3, [r7, #8]
 800b05c:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 800b05e:	88fb      	ldrh	r3, [r7, #6]
 800b060:	3303      	adds	r3, #3
 800b062:	089b      	lsrs	r3, r3, #2
 800b064:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 800b066:	2300      	movs	r3, #0
 800b068:	61bb      	str	r3, [r7, #24]
 800b06a:	e00b      	b.n	800b084 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800b06c:	697b      	ldr	r3, [r7, #20]
 800b06e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b072:	681a      	ldr	r2, [r3, #0]
 800b074:	69fb      	ldr	r3, [r7, #28]
 800b076:	601a      	str	r2, [r3, #0]
    pDest++;
 800b078:	69fb      	ldr	r3, [r7, #28]
 800b07a:	3304      	adds	r3, #4
 800b07c:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800b07e:	69bb      	ldr	r3, [r7, #24]
 800b080:	3301      	adds	r3, #1
 800b082:	61bb      	str	r3, [r7, #24]
 800b084:	69ba      	ldr	r2, [r7, #24]
 800b086:	693b      	ldr	r3, [r7, #16]
 800b088:	429a      	cmp	r2, r3
 800b08a:	d3ef      	bcc.n	800b06c <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 800b08c:	69fb      	ldr	r3, [r7, #28]
}
 800b08e:	4618      	mov	r0, r3
 800b090:	3724      	adds	r7, #36	; 0x24
 800b092:	46bd      	mov	sp, r7
 800b094:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b098:	4770      	bx	lr

0800b09a <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800b09a:	b480      	push	{r7}
 800b09c:	b085      	sub	sp, #20
 800b09e:	af00      	add	r7, sp, #0
 800b0a0:	6078      	str	r0, [r7, #4]
 800b0a2:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b0a4:	687b      	ldr	r3, [r7, #4]
 800b0a6:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800b0a8:	683b      	ldr	r3, [r7, #0]
 800b0aa:	781b      	ldrb	r3, [r3, #0]
 800b0ac:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800b0ae:	683b      	ldr	r3, [r7, #0]
 800b0b0:	785b      	ldrb	r3, [r3, #1]
 800b0b2:	2b01      	cmp	r3, #1
 800b0b4:	d12c      	bne.n	800b110 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800b0b6:	68bb      	ldr	r3, [r7, #8]
 800b0b8:	015a      	lsls	r2, r3, #5
 800b0ba:	68fb      	ldr	r3, [r7, #12]
 800b0bc:	4413      	add	r3, r2
 800b0be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b0c2:	681b      	ldr	r3, [r3, #0]
 800b0c4:	2b00      	cmp	r3, #0
 800b0c6:	db12      	blt.n	800b0ee <USB_EPSetStall+0x54>
 800b0c8:	68bb      	ldr	r3, [r7, #8]
 800b0ca:	2b00      	cmp	r3, #0
 800b0cc:	d00f      	beq.n	800b0ee <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800b0ce:	68bb      	ldr	r3, [r7, #8]
 800b0d0:	015a      	lsls	r2, r3, #5
 800b0d2:	68fb      	ldr	r3, [r7, #12]
 800b0d4:	4413      	add	r3, r2
 800b0d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b0da:	681b      	ldr	r3, [r3, #0]
 800b0dc:	68ba      	ldr	r2, [r7, #8]
 800b0de:	0151      	lsls	r1, r2, #5
 800b0e0:	68fa      	ldr	r2, [r7, #12]
 800b0e2:	440a      	add	r2, r1
 800b0e4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b0e8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800b0ec:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800b0ee:	68bb      	ldr	r3, [r7, #8]
 800b0f0:	015a      	lsls	r2, r3, #5
 800b0f2:	68fb      	ldr	r3, [r7, #12]
 800b0f4:	4413      	add	r3, r2
 800b0f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b0fa:	681b      	ldr	r3, [r3, #0]
 800b0fc:	68ba      	ldr	r2, [r7, #8]
 800b0fe:	0151      	lsls	r1, r2, #5
 800b100:	68fa      	ldr	r2, [r7, #12]
 800b102:	440a      	add	r2, r1
 800b104:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b108:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800b10c:	6013      	str	r3, [r2, #0]
 800b10e:	e02b      	b.n	800b168 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800b110:	68bb      	ldr	r3, [r7, #8]
 800b112:	015a      	lsls	r2, r3, #5
 800b114:	68fb      	ldr	r3, [r7, #12]
 800b116:	4413      	add	r3, r2
 800b118:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b11c:	681b      	ldr	r3, [r3, #0]
 800b11e:	2b00      	cmp	r3, #0
 800b120:	db12      	blt.n	800b148 <USB_EPSetStall+0xae>
 800b122:	68bb      	ldr	r3, [r7, #8]
 800b124:	2b00      	cmp	r3, #0
 800b126:	d00f      	beq.n	800b148 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800b128:	68bb      	ldr	r3, [r7, #8]
 800b12a:	015a      	lsls	r2, r3, #5
 800b12c:	68fb      	ldr	r3, [r7, #12]
 800b12e:	4413      	add	r3, r2
 800b130:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b134:	681b      	ldr	r3, [r3, #0]
 800b136:	68ba      	ldr	r2, [r7, #8]
 800b138:	0151      	lsls	r1, r2, #5
 800b13a:	68fa      	ldr	r2, [r7, #12]
 800b13c:	440a      	add	r2, r1
 800b13e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b142:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800b146:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800b148:	68bb      	ldr	r3, [r7, #8]
 800b14a:	015a      	lsls	r2, r3, #5
 800b14c:	68fb      	ldr	r3, [r7, #12]
 800b14e:	4413      	add	r3, r2
 800b150:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b154:	681b      	ldr	r3, [r3, #0]
 800b156:	68ba      	ldr	r2, [r7, #8]
 800b158:	0151      	lsls	r1, r2, #5
 800b15a:	68fa      	ldr	r2, [r7, #12]
 800b15c:	440a      	add	r2, r1
 800b15e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b162:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800b166:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800b168:	2300      	movs	r3, #0
}
 800b16a:	4618      	mov	r0, r3
 800b16c:	3714      	adds	r7, #20
 800b16e:	46bd      	mov	sp, r7
 800b170:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b174:	4770      	bx	lr

0800b176 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800b176:	b480      	push	{r7}
 800b178:	b085      	sub	sp, #20
 800b17a:	af00      	add	r7, sp, #0
 800b17c:	6078      	str	r0, [r7, #4]
 800b17e:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b180:	687b      	ldr	r3, [r7, #4]
 800b182:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800b184:	683b      	ldr	r3, [r7, #0]
 800b186:	781b      	ldrb	r3, [r3, #0]
 800b188:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800b18a:	683b      	ldr	r3, [r7, #0]
 800b18c:	785b      	ldrb	r3, [r3, #1]
 800b18e:	2b01      	cmp	r3, #1
 800b190:	d128      	bne.n	800b1e4 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800b192:	68bb      	ldr	r3, [r7, #8]
 800b194:	015a      	lsls	r2, r3, #5
 800b196:	68fb      	ldr	r3, [r7, #12]
 800b198:	4413      	add	r3, r2
 800b19a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b19e:	681b      	ldr	r3, [r3, #0]
 800b1a0:	68ba      	ldr	r2, [r7, #8]
 800b1a2:	0151      	lsls	r1, r2, #5
 800b1a4:	68fa      	ldr	r2, [r7, #12]
 800b1a6:	440a      	add	r2, r1
 800b1a8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b1ac:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800b1b0:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800b1b2:	683b      	ldr	r3, [r7, #0]
 800b1b4:	78db      	ldrb	r3, [r3, #3]
 800b1b6:	2b03      	cmp	r3, #3
 800b1b8:	d003      	beq.n	800b1c2 <USB_EPClearStall+0x4c>
 800b1ba:	683b      	ldr	r3, [r7, #0]
 800b1bc:	78db      	ldrb	r3, [r3, #3]
 800b1be:	2b02      	cmp	r3, #2
 800b1c0:	d138      	bne.n	800b234 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800b1c2:	68bb      	ldr	r3, [r7, #8]
 800b1c4:	015a      	lsls	r2, r3, #5
 800b1c6:	68fb      	ldr	r3, [r7, #12]
 800b1c8:	4413      	add	r3, r2
 800b1ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b1ce:	681b      	ldr	r3, [r3, #0]
 800b1d0:	68ba      	ldr	r2, [r7, #8]
 800b1d2:	0151      	lsls	r1, r2, #5
 800b1d4:	68fa      	ldr	r2, [r7, #12]
 800b1d6:	440a      	add	r2, r1
 800b1d8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b1dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b1e0:	6013      	str	r3, [r2, #0]
 800b1e2:	e027      	b.n	800b234 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800b1e4:	68bb      	ldr	r3, [r7, #8]
 800b1e6:	015a      	lsls	r2, r3, #5
 800b1e8:	68fb      	ldr	r3, [r7, #12]
 800b1ea:	4413      	add	r3, r2
 800b1ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b1f0:	681b      	ldr	r3, [r3, #0]
 800b1f2:	68ba      	ldr	r2, [r7, #8]
 800b1f4:	0151      	lsls	r1, r2, #5
 800b1f6:	68fa      	ldr	r2, [r7, #12]
 800b1f8:	440a      	add	r2, r1
 800b1fa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b1fe:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800b202:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800b204:	683b      	ldr	r3, [r7, #0]
 800b206:	78db      	ldrb	r3, [r3, #3]
 800b208:	2b03      	cmp	r3, #3
 800b20a:	d003      	beq.n	800b214 <USB_EPClearStall+0x9e>
 800b20c:	683b      	ldr	r3, [r7, #0]
 800b20e:	78db      	ldrb	r3, [r3, #3]
 800b210:	2b02      	cmp	r3, #2
 800b212:	d10f      	bne.n	800b234 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800b214:	68bb      	ldr	r3, [r7, #8]
 800b216:	015a      	lsls	r2, r3, #5
 800b218:	68fb      	ldr	r3, [r7, #12]
 800b21a:	4413      	add	r3, r2
 800b21c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b220:	681b      	ldr	r3, [r3, #0]
 800b222:	68ba      	ldr	r2, [r7, #8]
 800b224:	0151      	lsls	r1, r2, #5
 800b226:	68fa      	ldr	r2, [r7, #12]
 800b228:	440a      	add	r2, r1
 800b22a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b22e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b232:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800b234:	2300      	movs	r3, #0
}
 800b236:	4618      	mov	r0, r3
 800b238:	3714      	adds	r7, #20
 800b23a:	46bd      	mov	sp, r7
 800b23c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b240:	4770      	bx	lr

0800b242 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800b242:	b480      	push	{r7}
 800b244:	b085      	sub	sp, #20
 800b246:	af00      	add	r7, sp, #0
 800b248:	6078      	str	r0, [r7, #4]
 800b24a:	460b      	mov	r3, r1
 800b24c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b24e:	687b      	ldr	r3, [r7, #4]
 800b250:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800b252:	68fb      	ldr	r3, [r7, #12]
 800b254:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b258:	681b      	ldr	r3, [r3, #0]
 800b25a:	68fa      	ldr	r2, [r7, #12]
 800b25c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b260:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800b264:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800b266:	68fb      	ldr	r3, [r7, #12]
 800b268:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b26c:	681a      	ldr	r2, [r3, #0]
 800b26e:	78fb      	ldrb	r3, [r7, #3]
 800b270:	011b      	lsls	r3, r3, #4
 800b272:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800b276:	68f9      	ldr	r1, [r7, #12]
 800b278:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b27c:	4313      	orrs	r3, r2
 800b27e:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800b280:	2300      	movs	r3, #0
}
 800b282:	4618      	mov	r0, r3
 800b284:	3714      	adds	r7, #20
 800b286:	46bd      	mov	sp, r7
 800b288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b28c:	4770      	bx	lr

0800b28e <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800b28e:	b580      	push	{r7, lr}
 800b290:	b084      	sub	sp, #16
 800b292:	af00      	add	r7, sp, #0
 800b294:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b296:	687b      	ldr	r3, [r7, #4]
 800b298:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800b29a:	68fb      	ldr	r3, [r7, #12]
 800b29c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b2a0:	685b      	ldr	r3, [r3, #4]
 800b2a2:	68fa      	ldr	r2, [r7, #12]
 800b2a4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b2a8:	f023 0302 	bic.w	r3, r3, #2
 800b2ac:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 800b2ae:	2003      	movs	r0, #3
 800b2b0:	f7f7 fede 	bl	8003070 <HAL_Delay>

  return HAL_OK;
 800b2b4:	2300      	movs	r3, #0
}
 800b2b6:	4618      	mov	r0, r3
 800b2b8:	3710      	adds	r7, #16
 800b2ba:	46bd      	mov	sp, r7
 800b2bc:	bd80      	pop	{r7, pc}

0800b2be <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800b2be:	b580      	push	{r7, lr}
 800b2c0:	b084      	sub	sp, #16
 800b2c2:	af00      	add	r7, sp, #0
 800b2c4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b2c6:	687b      	ldr	r3, [r7, #4]
 800b2c8:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800b2ca:	68fb      	ldr	r3, [r7, #12]
 800b2cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b2d0:	685b      	ldr	r3, [r3, #4]
 800b2d2:	68fa      	ldr	r2, [r7, #12]
 800b2d4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b2d8:	f043 0302 	orr.w	r3, r3, #2
 800b2dc:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 800b2de:	2003      	movs	r0, #3
 800b2e0:	f7f7 fec6 	bl	8003070 <HAL_Delay>

  return HAL_OK;
 800b2e4:	2300      	movs	r3, #0
}
 800b2e6:	4618      	mov	r0, r3
 800b2e8:	3710      	adds	r7, #16
 800b2ea:	46bd      	mov	sp, r7
 800b2ec:	bd80      	pop	{r7, pc}

0800b2ee <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800b2ee:	b480      	push	{r7}
 800b2f0:	b085      	sub	sp, #20
 800b2f2:	af00      	add	r7, sp, #0
 800b2f4:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800b2f6:	687b      	ldr	r3, [r7, #4]
 800b2f8:	695b      	ldr	r3, [r3, #20]
 800b2fa:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800b2fc:	687b      	ldr	r3, [r7, #4]
 800b2fe:	699b      	ldr	r3, [r3, #24]
 800b300:	68fa      	ldr	r2, [r7, #12]
 800b302:	4013      	ands	r3, r2
 800b304:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800b306:	68fb      	ldr	r3, [r7, #12]
}
 800b308:	4618      	mov	r0, r3
 800b30a:	3714      	adds	r7, #20
 800b30c:	46bd      	mov	sp, r7
 800b30e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b312:	4770      	bx	lr

0800b314 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800b314:	b480      	push	{r7}
 800b316:	b085      	sub	sp, #20
 800b318:	af00      	add	r7, sp, #0
 800b31a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b31c:	687b      	ldr	r3, [r7, #4]
 800b31e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800b320:	68fb      	ldr	r3, [r7, #12]
 800b322:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b326:	699b      	ldr	r3, [r3, #24]
 800b328:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800b32a:	68fb      	ldr	r3, [r7, #12]
 800b32c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b330:	69db      	ldr	r3, [r3, #28]
 800b332:	68ba      	ldr	r2, [r7, #8]
 800b334:	4013      	ands	r3, r2
 800b336:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800b338:	68bb      	ldr	r3, [r7, #8]
 800b33a:	0c1b      	lsrs	r3, r3, #16
}
 800b33c:	4618      	mov	r0, r3
 800b33e:	3714      	adds	r7, #20
 800b340:	46bd      	mov	sp, r7
 800b342:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b346:	4770      	bx	lr

0800b348 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800b348:	b480      	push	{r7}
 800b34a:	b085      	sub	sp, #20
 800b34c:	af00      	add	r7, sp, #0
 800b34e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b350:	687b      	ldr	r3, [r7, #4]
 800b352:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800b354:	68fb      	ldr	r3, [r7, #12]
 800b356:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b35a:	699b      	ldr	r3, [r3, #24]
 800b35c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800b35e:	68fb      	ldr	r3, [r7, #12]
 800b360:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b364:	69db      	ldr	r3, [r3, #28]
 800b366:	68ba      	ldr	r2, [r7, #8]
 800b368:	4013      	ands	r3, r2
 800b36a:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800b36c:	68bb      	ldr	r3, [r7, #8]
 800b36e:	b29b      	uxth	r3, r3
}
 800b370:	4618      	mov	r0, r3
 800b372:	3714      	adds	r7, #20
 800b374:	46bd      	mov	sp, r7
 800b376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b37a:	4770      	bx	lr

0800b37c <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800b37c:	b480      	push	{r7}
 800b37e:	b085      	sub	sp, #20
 800b380:	af00      	add	r7, sp, #0
 800b382:	6078      	str	r0, [r7, #4]
 800b384:	460b      	mov	r3, r1
 800b386:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b388:	687b      	ldr	r3, [r7, #4]
 800b38a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800b38c:	78fb      	ldrb	r3, [r7, #3]
 800b38e:	015a      	lsls	r2, r3, #5
 800b390:	68fb      	ldr	r3, [r7, #12]
 800b392:	4413      	add	r3, r2
 800b394:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b398:	689b      	ldr	r3, [r3, #8]
 800b39a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800b39c:	68fb      	ldr	r3, [r7, #12]
 800b39e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b3a2:	695b      	ldr	r3, [r3, #20]
 800b3a4:	68ba      	ldr	r2, [r7, #8]
 800b3a6:	4013      	ands	r3, r2
 800b3a8:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800b3aa:	68bb      	ldr	r3, [r7, #8]
}
 800b3ac:	4618      	mov	r0, r3
 800b3ae:	3714      	adds	r7, #20
 800b3b0:	46bd      	mov	sp, r7
 800b3b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3b6:	4770      	bx	lr

0800b3b8 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800b3b8:	b480      	push	{r7}
 800b3ba:	b087      	sub	sp, #28
 800b3bc:	af00      	add	r7, sp, #0
 800b3be:	6078      	str	r0, [r7, #4]
 800b3c0:	460b      	mov	r3, r1
 800b3c2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b3c4:	687b      	ldr	r3, [r7, #4]
 800b3c6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 800b3c8:	697b      	ldr	r3, [r7, #20]
 800b3ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b3ce:	691b      	ldr	r3, [r3, #16]
 800b3d0:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800b3d2:	697b      	ldr	r3, [r7, #20]
 800b3d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b3d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b3da:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800b3dc:	78fb      	ldrb	r3, [r7, #3]
 800b3de:	f003 030f 	and.w	r3, r3, #15
 800b3e2:	68fa      	ldr	r2, [r7, #12]
 800b3e4:	fa22 f303 	lsr.w	r3, r2, r3
 800b3e8:	01db      	lsls	r3, r3, #7
 800b3ea:	b2db      	uxtb	r3, r3
 800b3ec:	693a      	ldr	r2, [r7, #16]
 800b3ee:	4313      	orrs	r3, r2
 800b3f0:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800b3f2:	78fb      	ldrb	r3, [r7, #3]
 800b3f4:	015a      	lsls	r2, r3, #5
 800b3f6:	697b      	ldr	r3, [r7, #20]
 800b3f8:	4413      	add	r3, r2
 800b3fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b3fe:	689b      	ldr	r3, [r3, #8]
 800b400:	693a      	ldr	r2, [r7, #16]
 800b402:	4013      	ands	r3, r2
 800b404:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800b406:	68bb      	ldr	r3, [r7, #8]
}
 800b408:	4618      	mov	r0, r3
 800b40a:	371c      	adds	r7, #28
 800b40c:	46bd      	mov	sp, r7
 800b40e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b412:	4770      	bx	lr

0800b414 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800b414:	b480      	push	{r7}
 800b416:	b083      	sub	sp, #12
 800b418:	af00      	add	r7, sp, #0
 800b41a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800b41c:	687b      	ldr	r3, [r7, #4]
 800b41e:	695b      	ldr	r3, [r3, #20]
 800b420:	f003 0301 	and.w	r3, r3, #1
}
 800b424:	4618      	mov	r0, r3
 800b426:	370c      	adds	r7, #12
 800b428:	46bd      	mov	sp, r7
 800b42a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b42e:	4770      	bx	lr

0800b430 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800b430:	b480      	push	{r7}
 800b432:	b085      	sub	sp, #20
 800b434:	af00      	add	r7, sp, #0
 800b436:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b438:	687b      	ldr	r3, [r7, #4]
 800b43a:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP based on the enumeration speed */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800b43c:	68fb      	ldr	r3, [r7, #12]
 800b43e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b442:	681b      	ldr	r3, [r3, #0]
 800b444:	68fa      	ldr	r2, [r7, #12]
 800b446:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b44a:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800b44e:	f023 0307 	bic.w	r3, r3, #7
 800b452:	6013      	str	r3, [r2, #0]

  if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_LS_PHY_6MHZ)
 800b454:	68fb      	ldr	r3, [r7, #12]
 800b456:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b45a:	689b      	ldr	r3, [r3, #8]
 800b45c:	f003 0306 	and.w	r3, r3, #6
 800b460:	2b04      	cmp	r3, #4
 800b462:	d109      	bne.n	800b478 <USB_ActivateSetup+0x48>
  {
    USBx_INEP(0U)->DIEPCTL |= 3U;
 800b464:	68fb      	ldr	r3, [r7, #12]
 800b466:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b46a:	681b      	ldr	r3, [r3, #0]
 800b46c:	68fa      	ldr	r2, [r7, #12]
 800b46e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b472:	f043 0303 	orr.w	r3, r3, #3
 800b476:	6013      	str	r3, [r2, #0]
  }
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800b478:	68fb      	ldr	r3, [r7, #12]
 800b47a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b47e:	685b      	ldr	r3, [r3, #4]
 800b480:	68fa      	ldr	r2, [r7, #12]
 800b482:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b486:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b48a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800b48c:	2300      	movs	r3, #0
}
 800b48e:	4618      	mov	r0, r3
 800b490:	3714      	adds	r7, #20
 800b492:	46bd      	mov	sp, r7
 800b494:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b498:	4770      	bx	lr
	...

0800b49c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800b49c:	b480      	push	{r7}
 800b49e:	b087      	sub	sp, #28
 800b4a0:	af00      	add	r7, sp, #0
 800b4a2:	60f8      	str	r0, [r7, #12]
 800b4a4:	460b      	mov	r3, r1
 800b4a6:	607a      	str	r2, [r7, #4]
 800b4a8:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b4aa:	68fb      	ldr	r3, [r7, #12]
 800b4ac:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800b4ae:	68fb      	ldr	r3, [r7, #12]
 800b4b0:	333c      	adds	r3, #60	; 0x3c
 800b4b2:	3304      	adds	r3, #4
 800b4b4:	681b      	ldr	r3, [r3, #0]
 800b4b6:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800b4b8:	693b      	ldr	r3, [r7, #16]
 800b4ba:	4a26      	ldr	r2, [pc, #152]	; (800b554 <USB_EP0_OutStart+0xb8>)
 800b4bc:	4293      	cmp	r3, r2
 800b4be:	d90a      	bls.n	800b4d6 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800b4c0:	697b      	ldr	r3, [r7, #20]
 800b4c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b4c6:	681b      	ldr	r3, [r3, #0]
 800b4c8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b4cc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b4d0:	d101      	bne.n	800b4d6 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800b4d2:	2300      	movs	r3, #0
 800b4d4:	e037      	b.n	800b546 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800b4d6:	697b      	ldr	r3, [r7, #20]
 800b4d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b4dc:	461a      	mov	r2, r3
 800b4de:	2300      	movs	r3, #0
 800b4e0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800b4e2:	697b      	ldr	r3, [r7, #20]
 800b4e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b4e8:	691b      	ldr	r3, [r3, #16]
 800b4ea:	697a      	ldr	r2, [r7, #20]
 800b4ec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b4f0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b4f4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800b4f6:	697b      	ldr	r3, [r7, #20]
 800b4f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b4fc:	691b      	ldr	r3, [r3, #16]
 800b4fe:	697a      	ldr	r2, [r7, #20]
 800b500:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b504:	f043 0318 	orr.w	r3, r3, #24
 800b508:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800b50a:	697b      	ldr	r3, [r7, #20]
 800b50c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b510:	691b      	ldr	r3, [r3, #16]
 800b512:	697a      	ldr	r2, [r7, #20]
 800b514:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b518:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800b51c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800b51e:	7afb      	ldrb	r3, [r7, #11]
 800b520:	2b01      	cmp	r3, #1
 800b522:	d10f      	bne.n	800b544 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800b524:	697b      	ldr	r3, [r7, #20]
 800b526:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b52a:	461a      	mov	r2, r3
 800b52c:	687b      	ldr	r3, [r7, #4]
 800b52e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800b530:	697b      	ldr	r3, [r7, #20]
 800b532:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b536:	681b      	ldr	r3, [r3, #0]
 800b538:	697a      	ldr	r2, [r7, #20]
 800b53a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b53e:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800b542:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800b544:	2300      	movs	r3, #0
}
 800b546:	4618      	mov	r0, r3
 800b548:	371c      	adds	r7, #28
 800b54a:	46bd      	mov	sp, r7
 800b54c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b550:	4770      	bx	lr
 800b552:	bf00      	nop
 800b554:	4f54300a 	.word	0x4f54300a

0800b558 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800b558:	b480      	push	{r7}
 800b55a:	b085      	sub	sp, #20
 800b55c:	af00      	add	r7, sp, #0
 800b55e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800b560:	2300      	movs	r3, #0
 800b562:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800b564:	68fb      	ldr	r3, [r7, #12]
 800b566:	3301      	adds	r3, #1
 800b568:	60fb      	str	r3, [r7, #12]
 800b56a:	68fb      	ldr	r3, [r7, #12]
 800b56c:	4a13      	ldr	r2, [pc, #76]	; (800b5bc <USB_CoreReset+0x64>)
 800b56e:	4293      	cmp	r3, r2
 800b570:	d901      	bls.n	800b576 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800b572:	2303      	movs	r3, #3
 800b574:	e01b      	b.n	800b5ae <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800b576:	687b      	ldr	r3, [r7, #4]
 800b578:	691b      	ldr	r3, [r3, #16]
 800b57a:	2b00      	cmp	r3, #0
 800b57c:	daf2      	bge.n	800b564 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800b57e:	2300      	movs	r3, #0
 800b580:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800b582:	687b      	ldr	r3, [r7, #4]
 800b584:	691b      	ldr	r3, [r3, #16]
 800b586:	f043 0201 	orr.w	r2, r3, #1
 800b58a:	687b      	ldr	r3, [r7, #4]
 800b58c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800b58e:	68fb      	ldr	r3, [r7, #12]
 800b590:	3301      	adds	r3, #1
 800b592:	60fb      	str	r3, [r7, #12]
 800b594:	68fb      	ldr	r3, [r7, #12]
 800b596:	4a09      	ldr	r2, [pc, #36]	; (800b5bc <USB_CoreReset+0x64>)
 800b598:	4293      	cmp	r3, r2
 800b59a:	d901      	bls.n	800b5a0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800b59c:	2303      	movs	r3, #3
 800b59e:	e006      	b.n	800b5ae <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800b5a0:	687b      	ldr	r3, [r7, #4]
 800b5a2:	691b      	ldr	r3, [r3, #16]
 800b5a4:	f003 0301 	and.w	r3, r3, #1
 800b5a8:	2b01      	cmp	r3, #1
 800b5aa:	d0f0      	beq.n	800b58e <USB_CoreReset+0x36>

  return HAL_OK;
 800b5ac:	2300      	movs	r3, #0
}
 800b5ae:	4618      	mov	r0, r3
 800b5b0:	3714      	adds	r7, #20
 800b5b2:	46bd      	mov	sp, r7
 800b5b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5b8:	4770      	bx	lr
 800b5ba:	bf00      	nop
 800b5bc:	00030d40 	.word	0x00030d40

0800b5c0 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */    

void MX_FATFS_Init(void) 
{
 800b5c0:	b580      	push	{r7, lr}
 800b5c2:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800b5c4:	4904      	ldr	r1, [pc, #16]	; (800b5d8 <MX_FATFS_Init+0x18>)
 800b5c6:	4805      	ldr	r0, [pc, #20]	; (800b5dc <MX_FATFS_Init+0x1c>)
 800b5c8:	f001 fe36 	bl	800d238 <FATFS_LinkDriver>
 800b5cc:	4603      	mov	r3, r0
 800b5ce:	461a      	mov	r2, r3
 800b5d0:	4b03      	ldr	r3, [pc, #12]	; (800b5e0 <MX_FATFS_Init+0x20>)
 800b5d2:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */     
  /* USER CODE END Init */
}
 800b5d4:	bf00      	nop
 800b5d6:	bd80      	pop	{r7, pc}
 800b5d8:	20000c68 	.word	0x20000c68
 800b5dc:	08012224 	.word	0x08012224
 800b5e0:	20000c64 	.word	0x20000c64

0800b5e4 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800b5e4:	b580      	push	{r7, lr}
 800b5e6:	b082      	sub	sp, #8
 800b5e8:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800b5ea:	2300      	movs	r3, #0
 800b5ec:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800b5ee:	f000 f871 	bl	800b6d4 <BSP_SD_IsDetected>
 800b5f2:	4603      	mov	r3, r0
 800b5f4:	2b01      	cmp	r3, #1
 800b5f6:	d001      	beq.n	800b5fc <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 800b5f8:	2301      	movs	r3, #1
 800b5fa:	e012      	b.n	800b622 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 800b5fc:	480b      	ldr	r0, [pc, #44]	; (800b62c <BSP_SD_Init+0x48>)
 800b5fe:	f7fb fcc4 	bl	8006f8a <HAL_SD_Init>
 800b602:	4603      	mov	r3, r0
 800b604:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800b606:	79fb      	ldrb	r3, [r7, #7]
 800b608:	2b00      	cmp	r3, #0
 800b60a:	d109      	bne.n	800b620 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 800b60c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800b610:	4806      	ldr	r0, [pc, #24]	; (800b62c <BSP_SD_Init+0x48>)
 800b612:	f7fc faa3 	bl	8007b5c <HAL_SD_ConfigWideBusOperation>
 800b616:	4603      	mov	r3, r0
 800b618:	2b00      	cmp	r3, #0
 800b61a:	d001      	beq.n	800b620 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 800b61c:	2301      	movs	r3, #1
 800b61e:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 800b620:	79fb      	ldrb	r3, [r7, #7]
}
 800b622:	4618      	mov	r0, r3
 800b624:	3708      	adds	r7, #8
 800b626:	46bd      	mov	sp, r7
 800b628:	bd80      	pop	{r7, pc}
 800b62a:	bf00      	nop
 800b62c:	20000b84 	.word	0x20000b84

0800b630 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read 
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 800b630:	b580      	push	{r7, lr}
 800b632:	b086      	sub	sp, #24
 800b634:	af00      	add	r7, sp, #0
 800b636:	60f8      	str	r0, [r7, #12]
 800b638:	60b9      	str	r1, [r7, #8]
 800b63a:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800b63c:	2300      	movs	r3, #0
 800b63e:	75fb      	strb	r3, [r7, #23]
  
  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 800b640:	687b      	ldr	r3, [r7, #4]
 800b642:	68ba      	ldr	r2, [r7, #8]
 800b644:	68f9      	ldr	r1, [r7, #12]
 800b646:	4806      	ldr	r0, [pc, #24]	; (800b660 <BSP_SD_ReadBlocks_DMA+0x30>)
 800b648:	f7fb fd30 	bl	80070ac <HAL_SD_ReadBlocks_DMA>
 800b64c:	4603      	mov	r3, r0
 800b64e:	2b00      	cmp	r3, #0
 800b650:	d001      	beq.n	800b656 <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800b652:	2301      	movs	r3, #1
 800b654:	75fb      	strb	r3, [r7, #23]
  }
  
  return sd_state; 
 800b656:	7dfb      	ldrb	r3, [r7, #23]
}
 800b658:	4618      	mov	r0, r3
 800b65a:	3718      	adds	r7, #24
 800b65c:	46bd      	mov	sp, r7
 800b65e:	bd80      	pop	{r7, pc}
 800b660:	20000b84 	.word	0x20000b84

0800b664 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write 
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 800b664:	b580      	push	{r7, lr}
 800b666:	b086      	sub	sp, #24
 800b668:	af00      	add	r7, sp, #0
 800b66a:	60f8      	str	r0, [r7, #12]
 800b66c:	60b9      	str	r1, [r7, #8]
 800b66e:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800b670:	2300      	movs	r3, #0
 800b672:	75fb      	strb	r3, [r7, #23]
  
  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 800b674:	687b      	ldr	r3, [r7, #4]
 800b676:	68ba      	ldr	r2, [r7, #8]
 800b678:	68f9      	ldr	r1, [r7, #12]
 800b67a:	4806      	ldr	r0, [pc, #24]	; (800b694 <BSP_SD_WriteBlocks_DMA+0x30>)
 800b67c:	f7fb fe00 	bl	8007280 <HAL_SD_WriteBlocks_DMA>
 800b680:	4603      	mov	r3, r0
 800b682:	2b00      	cmp	r3, #0
 800b684:	d001      	beq.n	800b68a <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800b686:	2301      	movs	r3, #1
 800b688:	75fb      	strb	r3, [r7, #23]
  }
  
  return sd_state; 
 800b68a:	7dfb      	ldrb	r3, [r7, #23]
}
 800b68c:	4618      	mov	r0, r3
 800b68e:	3718      	adds	r7, #24
 800b690:	46bd      	mov	sp, r7
 800b692:	bd80      	pop	{r7, pc}
 800b694:	20000b84 	.word	0x20000b84

0800b698 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800b698:	b580      	push	{r7, lr}
 800b69a:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800b69c:	4805      	ldr	r0, [pc, #20]	; (800b6b4 <BSP_SD_GetCardState+0x1c>)
 800b69e:	f7fc fad9 	bl	8007c54 <HAL_SD_GetCardState>
 800b6a2:	4603      	mov	r3, r0
 800b6a4:	2b04      	cmp	r3, #4
 800b6a6:	bf14      	ite	ne
 800b6a8:	2301      	movne	r3, #1
 800b6aa:	2300      	moveq	r3, #0
 800b6ac:	b2db      	uxtb	r3, r3
}
 800b6ae:	4618      	mov	r0, r3
 800b6b0:	bd80      	pop	{r7, pc}
 800b6b2:	bf00      	nop
 800b6b4:	20000b84 	.word	0x20000b84

0800b6b8 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None 
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800b6b8:	b580      	push	{r7, lr}
 800b6ba:	b082      	sub	sp, #8
 800b6bc:	af00      	add	r7, sp, #0
 800b6be:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 800b6c0:	6879      	ldr	r1, [r7, #4]
 800b6c2:	4803      	ldr	r0, [pc, #12]	; (800b6d0 <BSP_SD_GetCardInfo+0x18>)
 800b6c4:	f7fc fa1e 	bl	8007b04 <HAL_SD_GetCardInfo>
}
 800b6c8:	bf00      	nop
 800b6ca:	3708      	adds	r7, #8
 800b6cc:	46bd      	mov	sp, r7
 800b6ce:	bd80      	pop	{r7, pc}
 800b6d0:	20000b84 	.word	0x20000b84

0800b6d4 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800b6d4:	b580      	push	{r7, lr}
 800b6d6:	b082      	sub	sp, #8
 800b6d8:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800b6da:	2301      	movs	r3, #1
 800b6dc:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0) 
 800b6de:	f000 f80b 	bl	800b6f8 <BSP_PlatformIsDetected>
 800b6e2:	4603      	mov	r3, r0
 800b6e4:	2b00      	cmp	r3, #0
 800b6e6:	d101      	bne.n	800b6ec <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800b6e8:	2300      	movs	r3, #0
 800b6ea:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800b6ec:	79fb      	ldrb	r3, [r7, #7]
 800b6ee:	b2db      	uxtb	r3, r3
}
 800b6f0:	4618      	mov	r0, r3
 800b6f2:	3708      	adds	r7, #8
 800b6f4:	46bd      	mov	sp, r7
 800b6f6:	bd80      	pop	{r7, pc}

0800b6f8 <BSP_PlatformIsDetected>:
  *
  ******************************************************************************
*/
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800b6f8:	b580      	push	{r7, lr}
 800b6fa:	b082      	sub	sp, #8
 800b6fc:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800b6fe:	2301      	movs	r3, #1
 800b700:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800b702:	f44f 7180 	mov.w	r1, #256	; 0x100
 800b706:	4806      	ldr	r0, [pc, #24]	; (800b720 <BSP_PlatformIsDetected+0x28>)
 800b708:	f7f8 fb1c 	bl	8003d44 <HAL_GPIO_ReadPin>
 800b70c:	4603      	mov	r3, r0
 800b70e:	2b00      	cmp	r3, #0
 800b710:	d001      	beq.n	800b716 <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 800b712:	2300      	movs	r3, #0
 800b714:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */ 
    return status;
 800b716:	79fb      	ldrb	r3, [r7, #7]
}  
 800b718:	4618      	mov	r0, r3
 800b71a:	3708      	adds	r7, #8
 800b71c:	46bd      	mov	sp, r7
 800b71e:	bd80      	pop	{r7, pc}
 800b720:	40020000 	.word	0x40020000

0800b724 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 800b724:	b580      	push	{r7, lr}
 800b726:	b084      	sub	sp, #16
 800b728:	af00      	add	r7, sp, #0
 800b72a:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 800b72c:	f7f7 fc94 	bl	8003058 <HAL_GetTick>
 800b730:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 800b732:	e006      	b.n	800b742 <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800b734:	f7ff ffb0 	bl	800b698 <BSP_SD_GetCardState>
 800b738:	4603      	mov	r3, r0
 800b73a:	2b00      	cmp	r3, #0
 800b73c:	d101      	bne.n	800b742 <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 800b73e:	2300      	movs	r3, #0
 800b740:	e009      	b.n	800b756 <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 800b742:	f7f7 fc89 	bl	8003058 <HAL_GetTick>
 800b746:	4602      	mov	r2, r0
 800b748:	68fb      	ldr	r3, [r7, #12]
 800b74a:	1ad3      	subs	r3, r2, r3
 800b74c:	687a      	ldr	r2, [r7, #4]
 800b74e:	429a      	cmp	r2, r3
 800b750:	d8f0      	bhi.n	800b734 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 800b752:	f04f 33ff 	mov.w	r3, #4294967295
}
 800b756:	4618      	mov	r0, r3
 800b758:	3710      	adds	r7, #16
 800b75a:	46bd      	mov	sp, r7
 800b75c:	bd80      	pop	{r7, pc}
	...

0800b760 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800b760:	b580      	push	{r7, lr}
 800b762:	b082      	sub	sp, #8
 800b764:	af00      	add	r7, sp, #0
 800b766:	4603      	mov	r3, r0
 800b768:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800b76a:	4b0b      	ldr	r3, [pc, #44]	; (800b798 <SD_CheckStatus+0x38>)
 800b76c:	2201      	movs	r2, #1
 800b76e:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800b770:	f7ff ff92 	bl	800b698 <BSP_SD_GetCardState>
 800b774:	4603      	mov	r3, r0
 800b776:	2b00      	cmp	r3, #0
 800b778:	d107      	bne.n	800b78a <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800b77a:	4b07      	ldr	r3, [pc, #28]	; (800b798 <SD_CheckStatus+0x38>)
 800b77c:	781b      	ldrb	r3, [r3, #0]
 800b77e:	b2db      	uxtb	r3, r3
 800b780:	f023 0301 	bic.w	r3, r3, #1
 800b784:	b2da      	uxtb	r2, r3
 800b786:	4b04      	ldr	r3, [pc, #16]	; (800b798 <SD_CheckStatus+0x38>)
 800b788:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800b78a:	4b03      	ldr	r3, [pc, #12]	; (800b798 <SD_CheckStatus+0x38>)
 800b78c:	781b      	ldrb	r3, [r3, #0]
 800b78e:	b2db      	uxtb	r3, r3
}
 800b790:	4618      	mov	r0, r3
 800b792:	3708      	adds	r7, #8
 800b794:	46bd      	mov	sp, r7
 800b796:	bd80      	pop	{r7, pc}
 800b798:	2000001d 	.word	0x2000001d

0800b79c <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800b79c:	b580      	push	{r7, lr}
 800b79e:	b082      	sub	sp, #8
 800b7a0:	af00      	add	r7, sp, #0
 800b7a2:	4603      	mov	r3, r0
 800b7a4:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800b7a6:	f7ff ff1d 	bl	800b5e4 <BSP_SD_Init>
 800b7aa:	4603      	mov	r3, r0
 800b7ac:	2b00      	cmp	r3, #0
 800b7ae:	d107      	bne.n	800b7c0 <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 800b7b0:	79fb      	ldrb	r3, [r7, #7]
 800b7b2:	4618      	mov	r0, r3
 800b7b4:	f7ff ffd4 	bl	800b760 <SD_CheckStatus>
 800b7b8:	4603      	mov	r3, r0
 800b7ba:	461a      	mov	r2, r3
 800b7bc:	4b04      	ldr	r3, [pc, #16]	; (800b7d0 <SD_initialize+0x34>)
 800b7be:	701a      	strb	r2, [r3, #0]
  }

#else
  Stat = SD_CheckStatus(lun);
#endif
  return Stat;
 800b7c0:	4b03      	ldr	r3, [pc, #12]	; (800b7d0 <SD_initialize+0x34>)
 800b7c2:	781b      	ldrb	r3, [r3, #0]
 800b7c4:	b2db      	uxtb	r3, r3
}
 800b7c6:	4618      	mov	r0, r3
 800b7c8:	3708      	adds	r7, #8
 800b7ca:	46bd      	mov	sp, r7
 800b7cc:	bd80      	pop	{r7, pc}
 800b7ce:	bf00      	nop
 800b7d0:	2000001d 	.word	0x2000001d

0800b7d4 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800b7d4:	b580      	push	{r7, lr}
 800b7d6:	b082      	sub	sp, #8
 800b7d8:	af00      	add	r7, sp, #0
 800b7da:	4603      	mov	r3, r0
 800b7dc:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800b7de:	79fb      	ldrb	r3, [r7, #7]
 800b7e0:	4618      	mov	r0, r3
 800b7e2:	f7ff ffbd 	bl	800b760 <SD_CheckStatus>
 800b7e6:	4603      	mov	r3, r0
}
 800b7e8:	4618      	mov	r0, r3
 800b7ea:	3708      	adds	r7, #8
 800b7ec:	46bd      	mov	sp, r7
 800b7ee:	bd80      	pop	{r7, pc}

0800b7f0 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
              
DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800b7f0:	b580      	push	{r7, lr}
 800b7f2:	b088      	sub	sp, #32
 800b7f4:	af00      	add	r7, sp, #0
 800b7f6:	60b9      	str	r1, [r7, #8]
 800b7f8:	607a      	str	r2, [r7, #4]
 800b7fa:	603b      	str	r3, [r7, #0]
 800b7fc:	4603      	mov	r3, r0
 800b7fe:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800b800:	2301      	movs	r3, #1
 800b802:	77fb      	strb	r3, [r7, #31]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800b804:	f247 5030 	movw	r0, #30000	; 0x7530
 800b808:	f7ff ff8c 	bl	800b724 <SD_CheckStatusWithTimeout>
 800b80c:	4603      	mov	r3, r0
 800b80e:	2b00      	cmp	r3, #0
 800b810:	da01      	bge.n	800b816 <SD_read+0x26>
  {
    return res;
 800b812:	7ffb      	ldrb	r3, [r7, #31]
 800b814:	e08b      	b.n	800b92e <SD_read+0x13e>
  }

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
 800b816:	68bb      	ldr	r3, [r7, #8]
 800b818:	f003 0303 	and.w	r3, r3, #3
 800b81c:	2b00      	cmp	r3, #0
 800b81e:	f040 8085 	bne.w	800b92c <SD_read+0x13c>
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 800b822:	683a      	ldr	r2, [r7, #0]
 800b824:	6879      	ldr	r1, [r7, #4]
 800b826:	68b8      	ldr	r0, [r7, #8]
 800b828:	f7ff ff02 	bl	800b630 <BSP_SD_ReadBlocks_DMA>
 800b82c:	4603      	mov	r3, r0
 800b82e:	2b00      	cmp	r3, #0
 800b830:	d133      	bne.n	800b89a <SD_read+0xaa>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 800b832:	4b41      	ldr	r3, [pc, #260]	; (800b938 <SD_read+0x148>)
 800b834:	2200      	movs	r2, #0
 800b836:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 800b838:	f7f7 fc0e 	bl	8003058 <HAL_GetTick>
 800b83c:	6178      	str	r0, [r7, #20]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800b83e:	bf00      	nop
 800b840:	4b3d      	ldr	r3, [pc, #244]	; (800b938 <SD_read+0x148>)
 800b842:	681b      	ldr	r3, [r3, #0]
 800b844:	2b00      	cmp	r3, #0
 800b846:	d108      	bne.n	800b85a <SD_read+0x6a>
 800b848:	f7f7 fc06 	bl	8003058 <HAL_GetTick>
 800b84c:	4602      	mov	r2, r0
 800b84e:	697b      	ldr	r3, [r7, #20]
 800b850:	1ad3      	subs	r3, r2, r3
 800b852:	f247 522f 	movw	r2, #29999	; 0x752f
 800b856:	4293      	cmp	r3, r2
 800b858:	d9f2      	bls.n	800b840 <SD_read+0x50>
      {
      }
      /* incase of a timeout return error */
      if (ReadStatus == 0)
 800b85a:	4b37      	ldr	r3, [pc, #220]	; (800b938 <SD_read+0x148>)
 800b85c:	681b      	ldr	r3, [r3, #0]
 800b85e:	2b00      	cmp	r3, #0
 800b860:	d102      	bne.n	800b868 <SD_read+0x78>
      {
        res = RES_ERROR;
 800b862:	2301      	movs	r3, #1
 800b864:	77fb      	strb	r3, [r7, #31]
 800b866:	e061      	b.n	800b92c <SD_read+0x13c>
      }
      else
      {
        ReadStatus = 0;
 800b868:	4b33      	ldr	r3, [pc, #204]	; (800b938 <SD_read+0x148>)
 800b86a:	2200      	movs	r2, #0
 800b86c:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 800b86e:	f7f7 fbf3 	bl	8003058 <HAL_GetTick>
 800b872:	6178      	str	r0, [r7, #20]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800b874:	e007      	b.n	800b886 <SD_read+0x96>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800b876:	f7ff ff0f 	bl	800b698 <BSP_SD_GetCardState>
 800b87a:	4603      	mov	r3, r0
 800b87c:	2b00      	cmp	r3, #0
 800b87e:	d102      	bne.n	800b886 <SD_read+0x96>
          {
            res = RES_OK;
 800b880:	2300      	movs	r3, #0
 800b882:	77fb      	strb	r3, [r7, #31]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 800b884:	e052      	b.n	800b92c <SD_read+0x13c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800b886:	f7f7 fbe7 	bl	8003058 <HAL_GetTick>
 800b88a:	4602      	mov	r2, r0
 800b88c:	697b      	ldr	r3, [r7, #20]
 800b88e:	1ad3      	subs	r3, r2, r3
 800b890:	f247 522f 	movw	r2, #29999	; 0x752f
 800b894:	4293      	cmp	r3, r2
 800b896:	d9ee      	bls.n	800b876 <SD_read+0x86>
 800b898:	e048      	b.n	800b92c <SD_read+0x13c>
#if defined(ENABLE_SCRATCH_BUFFER)
    else {
      /* Slow path, fetch each sector a part and memcpy to destination buffer */
      int i;

      for (i = 0; i < count; i++) {
 800b89a:	2300      	movs	r3, #0
 800b89c:	61bb      	str	r3, [r7, #24]
 800b89e:	e034      	b.n	800b90a <SD_read+0x11a>
        ret = BSP_SD_ReadBlocks_DMA((uint32_t*)scratch, (uint32_t)sector++, 1);
 800b8a0:	687b      	ldr	r3, [r7, #4]
 800b8a2:	1c5a      	adds	r2, r3, #1
 800b8a4:	607a      	str	r2, [r7, #4]
 800b8a6:	2201      	movs	r2, #1
 800b8a8:	4619      	mov	r1, r3
 800b8aa:	4824      	ldr	r0, [pc, #144]	; (800b93c <SD_read+0x14c>)
 800b8ac:	f7ff fec0 	bl	800b630 <BSP_SD_ReadBlocks_DMA>
 800b8b0:	4603      	mov	r3, r0
 800b8b2:	77bb      	strb	r3, [r7, #30]
        if (ret == MSD_OK) {
 800b8b4:	7fbb      	ldrb	r3, [r7, #30]
 800b8b6:	2b00      	cmp	r3, #0
 800b8b8:	d12c      	bne.n	800b914 <SD_read+0x124>
          /* wait until the read is successful or a timeout occurs */

          ReadStatus = 0;
 800b8ba:	4b1f      	ldr	r3, [pc, #124]	; (800b938 <SD_read+0x148>)
 800b8bc:	2200      	movs	r2, #0
 800b8be:	601a      	str	r2, [r3, #0]
          timeout = HAL_GetTick();
 800b8c0:	f7f7 fbca 	bl	8003058 <HAL_GetTick>
 800b8c4:	6178      	str	r0, [r7, #20]
          while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800b8c6:	bf00      	nop
 800b8c8:	4b1b      	ldr	r3, [pc, #108]	; (800b938 <SD_read+0x148>)
 800b8ca:	681b      	ldr	r3, [r3, #0]
 800b8cc:	2b00      	cmp	r3, #0
 800b8ce:	d108      	bne.n	800b8e2 <SD_read+0xf2>
 800b8d0:	f7f7 fbc2 	bl	8003058 <HAL_GetTick>
 800b8d4:	4602      	mov	r2, r0
 800b8d6:	697b      	ldr	r3, [r7, #20]
 800b8d8:	1ad3      	subs	r3, r2, r3
 800b8da:	f247 522f 	movw	r2, #29999	; 0x752f
 800b8de:	4293      	cmp	r3, r2
 800b8e0:	d9f2      	bls.n	800b8c8 <SD_read+0xd8>
          {
          }
          if (ReadStatus == 0)
 800b8e2:	4b15      	ldr	r3, [pc, #84]	; (800b938 <SD_read+0x148>)
 800b8e4:	681b      	ldr	r3, [r3, #0]
 800b8e6:	2b00      	cmp	r3, #0
 800b8e8:	d016      	beq.n	800b918 <SD_read+0x128>
          *
          * invalidate the scratch buffer before the next read to get the actual data instead of the cached one
          */
          SCB_InvalidateDCache_by_Addr((uint32_t*)scratch, BLOCKSIZE);
#endif
          memcpy(buff, scratch, BLOCKSIZE);
 800b8ea:	68bb      	ldr	r3, [r7, #8]
 800b8ec:	4a13      	ldr	r2, [pc, #76]	; (800b93c <SD_read+0x14c>)
 800b8ee:	4618      	mov	r0, r3
 800b8f0:	4611      	mov	r1, r2
 800b8f2:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b8f6:	461a      	mov	r2, r3
 800b8f8:	f002 fa12 	bl	800dd20 <memcpy>
          buff += BLOCKSIZE;
 800b8fc:	68bb      	ldr	r3, [r7, #8]
 800b8fe:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800b902:	60bb      	str	r3, [r7, #8]
      for (i = 0; i < count; i++) {
 800b904:	69bb      	ldr	r3, [r7, #24]
 800b906:	3301      	adds	r3, #1
 800b908:	61bb      	str	r3, [r7, #24]
 800b90a:	69bb      	ldr	r3, [r7, #24]
 800b90c:	683a      	ldr	r2, [r7, #0]
 800b90e:	429a      	cmp	r2, r3
 800b910:	d8c6      	bhi.n	800b8a0 <SD_read+0xb0>
 800b912:	e002      	b.n	800b91a <SD_read+0x12a>
        }
        else
        {
          break;
 800b914:	bf00      	nop
 800b916:	e000      	b.n	800b91a <SD_read+0x12a>
            break;
 800b918:	bf00      	nop
        }
      }

      if ((i == count) && (ret == MSD_OK))
 800b91a:	69bb      	ldr	r3, [r7, #24]
 800b91c:	683a      	ldr	r2, [r7, #0]
 800b91e:	429a      	cmp	r2, r3
 800b920:	d104      	bne.n	800b92c <SD_read+0x13c>
 800b922:	7fbb      	ldrb	r3, [r7, #30]
 800b924:	2b00      	cmp	r3, #0
 800b926:	d101      	bne.n	800b92c <SD_read+0x13c>
        res = RES_OK;
 800b928:	2300      	movs	r3, #0
 800b92a:	77fb      	strb	r3, [r7, #31]
    }
#endif
  }

  return res;
 800b92c:	7ffb      	ldrb	r3, [r7, #31]
}
 800b92e:	4618      	mov	r0, r3
 800b930:	3720      	adds	r7, #32
 800b932:	46bd      	mov	sp, r7
 800b934:	bd80      	pop	{r7, pc}
 800b936:	bf00      	nop
 800b938:	20000784 	.word	0x20000784
 800b93c:	20000580 	.word	0x20000580

0800b940 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
              
DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800b940:	b580      	push	{r7, lr}
 800b942:	b088      	sub	sp, #32
 800b944:	af00      	add	r7, sp, #0
 800b946:	60b9      	str	r1, [r7, #8]
 800b948:	607a      	str	r2, [r7, #4]
 800b94a:	603b      	str	r3, [r7, #0]
 800b94c:	4603      	mov	r3, r0
 800b94e:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800b950:	2301      	movs	r3, #1
 800b952:	77fb      	strb	r3, [r7, #31]
  uint32_t timeout;
  uint8_t ret;
  int i;

   WriteStatus = 0;
 800b954:	4b4c      	ldr	r3, [pc, #304]	; (800ba88 <SD_write+0x148>)
 800b956:	2200      	movs	r2, #0
 800b958:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)   
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800b95a:	f247 5030 	movw	r0, #30000	; 0x7530
 800b95e:	f7ff fee1 	bl	800b724 <SD_CheckStatusWithTimeout>
 800b962:	4603      	mov	r3, r0
 800b964:	2b00      	cmp	r3, #0
 800b966:	da01      	bge.n	800b96c <SD_write+0x2c>
  {
    return res;
 800b968:	7ffb      	ldrb	r3, [r7, #31]
 800b96a:	e088      	b.n	800ba7e <SD_write+0x13e>
  }

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
 800b96c:	68bb      	ldr	r3, [r7, #8]
 800b96e:	f003 0303 	and.w	r3, r3, #3
 800b972:	2b00      	cmp	r3, #0
 800b974:	f040 8082 	bne.w	800ba7c <SD_write+0x13c>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 800b978:	683a      	ldr	r2, [r7, #0]
 800b97a:	6879      	ldr	r1, [r7, #4]
 800b97c:	68b8      	ldr	r0, [r7, #8]
 800b97e:	f7ff fe71 	bl	800b664 <BSP_SD_WriteBlocks_DMA>
 800b982:	4603      	mov	r3, r0
 800b984:	2b00      	cmp	r3, #0
 800b986:	d130      	bne.n	800b9ea <SD_write+0xaa>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 800b988:	f7f7 fb66 	bl	8003058 <HAL_GetTick>
 800b98c:	6178      	str	r0, [r7, #20]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800b98e:	bf00      	nop
 800b990:	4b3d      	ldr	r3, [pc, #244]	; (800ba88 <SD_write+0x148>)
 800b992:	681b      	ldr	r3, [r3, #0]
 800b994:	2b00      	cmp	r3, #0
 800b996:	d108      	bne.n	800b9aa <SD_write+0x6a>
 800b998:	f7f7 fb5e 	bl	8003058 <HAL_GetTick>
 800b99c:	4602      	mov	r2, r0
 800b99e:	697b      	ldr	r3, [r7, #20]
 800b9a0:	1ad3      	subs	r3, r2, r3
 800b9a2:	f247 522f 	movw	r2, #29999	; 0x752f
 800b9a6:	4293      	cmp	r3, r2
 800b9a8:	d9f2      	bls.n	800b990 <SD_write+0x50>
      {
      }
      /* incase of a timeout return error */
      if (WriteStatus == 0)
 800b9aa:	4b37      	ldr	r3, [pc, #220]	; (800ba88 <SD_write+0x148>)
 800b9ac:	681b      	ldr	r3, [r3, #0]
 800b9ae:	2b00      	cmp	r3, #0
 800b9b0:	d102      	bne.n	800b9b8 <SD_write+0x78>
      {
        res = RES_ERROR;
 800b9b2:	2301      	movs	r3, #1
 800b9b4:	77fb      	strb	r3, [r7, #31]
 800b9b6:	e061      	b.n	800ba7c <SD_write+0x13c>
      }
      else
      {
        WriteStatus = 0;
 800b9b8:	4b33      	ldr	r3, [pc, #204]	; (800ba88 <SD_write+0x148>)
 800b9ba:	2200      	movs	r2, #0
 800b9bc:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 800b9be:	f7f7 fb4b 	bl	8003058 <HAL_GetTick>
 800b9c2:	6178      	str	r0, [r7, #20]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800b9c4:	e007      	b.n	800b9d6 <SD_write+0x96>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800b9c6:	f7ff fe67 	bl	800b698 <BSP_SD_GetCardState>
 800b9ca:	4603      	mov	r3, r0
 800b9cc:	2b00      	cmp	r3, #0
 800b9ce:	d102      	bne.n	800b9d6 <SD_write+0x96>
          {
            res = RES_OK;
 800b9d0:	2300      	movs	r3, #0
 800b9d2:	77fb      	strb	r3, [r7, #31]
            break;
 800b9d4:	e052      	b.n	800ba7c <SD_write+0x13c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800b9d6:	f7f7 fb3f 	bl	8003058 <HAL_GetTick>
 800b9da:	4602      	mov	r2, r0
 800b9dc:	697b      	ldr	r3, [r7, #20]
 800b9de:	1ad3      	subs	r3, r2, r3
 800b9e0:	f247 522f 	movw	r2, #29999	; 0x752f
 800b9e4:	4293      	cmp	r3, r2
 800b9e6:	d9ee      	bls.n	800b9c6 <SD_write+0x86>
 800b9e8:	e048      	b.n	800ba7c <SD_write+0x13c>
      * invalidate the scratch buffer before the next write to get the actual data instead of the cached one
      */
      SCB_InvalidateDCache_by_Addr((uint32_t*)scratch, BLOCKSIZE);
#endif

      for (i = 0; i < count; i++)
 800b9ea:	2300      	movs	r3, #0
 800b9ec:	61bb      	str	r3, [r7, #24]
 800b9ee:	e034      	b.n	800ba5a <SD_write+0x11a>
      {
        WriteStatus = 0;
 800b9f0:	4b25      	ldr	r3, [pc, #148]	; (800ba88 <SD_write+0x148>)
 800b9f2:	2200      	movs	r2, #0
 800b9f4:	601a      	str	r2, [r3, #0]
        ret = BSP_SD_WriteBlocks_DMA((uint32_t*)scratch, (uint32_t)sector++, 1);
 800b9f6:	687b      	ldr	r3, [r7, #4]
 800b9f8:	1c5a      	adds	r2, r3, #1
 800b9fa:	607a      	str	r2, [r7, #4]
 800b9fc:	2201      	movs	r2, #1
 800b9fe:	4619      	mov	r1, r3
 800ba00:	4822      	ldr	r0, [pc, #136]	; (800ba8c <SD_write+0x14c>)
 800ba02:	f7ff fe2f 	bl	800b664 <BSP_SD_WriteBlocks_DMA>
 800ba06:	4603      	mov	r3, r0
 800ba08:	77bb      	strb	r3, [r7, #30]
        if (ret == MSD_OK) {
 800ba0a:	7fbb      	ldrb	r3, [r7, #30]
 800ba0c:	2b00      	cmp	r3, #0
 800ba0e:	d129      	bne.n	800ba64 <SD_write+0x124>
          /* wait for a message from the queue or a timeout */
          timeout = HAL_GetTick();
 800ba10:	f7f7 fb22 	bl	8003058 <HAL_GetTick>
 800ba14:	6178      	str	r0, [r7, #20]
          while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800ba16:	bf00      	nop
 800ba18:	4b1b      	ldr	r3, [pc, #108]	; (800ba88 <SD_write+0x148>)
 800ba1a:	681b      	ldr	r3, [r3, #0]
 800ba1c:	2b00      	cmp	r3, #0
 800ba1e:	d108      	bne.n	800ba32 <SD_write+0xf2>
 800ba20:	f7f7 fb1a 	bl	8003058 <HAL_GetTick>
 800ba24:	4602      	mov	r2, r0
 800ba26:	697b      	ldr	r3, [r7, #20]
 800ba28:	1ad3      	subs	r3, r2, r3
 800ba2a:	f247 522f 	movw	r2, #29999	; 0x752f
 800ba2e:	4293      	cmp	r3, r2
 800ba30:	d9f2      	bls.n	800ba18 <SD_write+0xd8>
          {
          }
          if (WriteStatus == 0)
 800ba32:	4b15      	ldr	r3, [pc, #84]	; (800ba88 <SD_write+0x148>)
 800ba34:	681b      	ldr	r3, [r3, #0]
 800ba36:	2b00      	cmp	r3, #0
 800ba38:	d016      	beq.n	800ba68 <SD_write+0x128>
          {
            break;
          }

          memcpy((void *)buff, (void *)scratch, BLOCKSIZE);
 800ba3a:	68bb      	ldr	r3, [r7, #8]
 800ba3c:	4a13      	ldr	r2, [pc, #76]	; (800ba8c <SD_write+0x14c>)
 800ba3e:	4618      	mov	r0, r3
 800ba40:	4611      	mov	r1, r2
 800ba42:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ba46:	461a      	mov	r2, r3
 800ba48:	f002 f96a 	bl	800dd20 <memcpy>
          buff += BLOCKSIZE;
 800ba4c:	68bb      	ldr	r3, [r7, #8]
 800ba4e:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800ba52:	60bb      	str	r3, [r7, #8]
      for (i = 0; i < count; i++)
 800ba54:	69bb      	ldr	r3, [r7, #24]
 800ba56:	3301      	adds	r3, #1
 800ba58:	61bb      	str	r3, [r7, #24]
 800ba5a:	69bb      	ldr	r3, [r7, #24]
 800ba5c:	683a      	ldr	r2, [r7, #0]
 800ba5e:	429a      	cmp	r2, r3
 800ba60:	d8c6      	bhi.n	800b9f0 <SD_write+0xb0>
 800ba62:	e002      	b.n	800ba6a <SD_write+0x12a>
        }
        else
        {
          break;
 800ba64:	bf00      	nop
 800ba66:	e000      	b.n	800ba6a <SD_write+0x12a>
            break;
 800ba68:	bf00      	nop
        }
      }
      if ((i == count) && (ret == MSD_OK))
 800ba6a:	69bb      	ldr	r3, [r7, #24]
 800ba6c:	683a      	ldr	r2, [r7, #0]
 800ba6e:	429a      	cmp	r2, r3
 800ba70:	d104      	bne.n	800ba7c <SD_write+0x13c>
 800ba72:	7fbb      	ldrb	r3, [r7, #30]
 800ba74:	2b00      	cmp	r3, #0
 800ba76:	d101      	bne.n	800ba7c <SD_write+0x13c>
        res = RES_OK;
 800ba78:	2300      	movs	r3, #0
 800ba7a:	77fb      	strb	r3, [r7, #31]
    }

  }
  return res;
 800ba7c:	7ffb      	ldrb	r3, [r7, #31]
}
 800ba7e:	4618      	mov	r0, r3
 800ba80:	3720      	adds	r7, #32
 800ba82:	46bd      	mov	sp, r7
 800ba84:	bd80      	pop	{r7, pc}
 800ba86:	bf00      	nop
 800ba88:	20000780 	.word	0x20000780
 800ba8c:	20000580 	.word	0x20000580

0800ba90 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800ba90:	b580      	push	{r7, lr}
 800ba92:	b08c      	sub	sp, #48	; 0x30
 800ba94:	af00      	add	r7, sp, #0
 800ba96:	4603      	mov	r3, r0
 800ba98:	603a      	str	r2, [r7, #0]
 800ba9a:	71fb      	strb	r3, [r7, #7]
 800ba9c:	460b      	mov	r3, r1
 800ba9e:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800baa0:	2301      	movs	r3, #1
 800baa2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800baa6:	4b25      	ldr	r3, [pc, #148]	; (800bb3c <SD_ioctl+0xac>)
 800baa8:	781b      	ldrb	r3, [r3, #0]
 800baaa:	b2db      	uxtb	r3, r3
 800baac:	f003 0301 	and.w	r3, r3, #1
 800bab0:	2b00      	cmp	r3, #0
 800bab2:	d001      	beq.n	800bab8 <SD_ioctl+0x28>
 800bab4:	2303      	movs	r3, #3
 800bab6:	e03c      	b.n	800bb32 <SD_ioctl+0xa2>

  switch (cmd)
 800bab8:	79bb      	ldrb	r3, [r7, #6]
 800baba:	2b03      	cmp	r3, #3
 800babc:	d834      	bhi.n	800bb28 <SD_ioctl+0x98>
 800babe:	a201      	add	r2, pc, #4	; (adr r2, 800bac4 <SD_ioctl+0x34>)
 800bac0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bac4:	0800bad5 	.word	0x0800bad5
 800bac8:	0800badd 	.word	0x0800badd
 800bacc:	0800baf5 	.word	0x0800baf5
 800bad0:	0800bb0f 	.word	0x0800bb0f
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800bad4:	2300      	movs	r3, #0
 800bad6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800bada:	e028      	b.n	800bb2e <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800badc:	f107 030c 	add.w	r3, r7, #12
 800bae0:	4618      	mov	r0, r3
 800bae2:	f7ff fde9 	bl	800b6b8 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800bae6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bae8:	683b      	ldr	r3, [r7, #0]
 800baea:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800baec:	2300      	movs	r3, #0
 800baee:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800baf2:	e01c      	b.n	800bb2e <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800baf4:	f107 030c 	add.w	r3, r7, #12
 800baf8:	4618      	mov	r0, r3
 800bafa:	f7ff fddd 	bl	800b6b8 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800bafe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb00:	b29a      	uxth	r2, r3
 800bb02:	683b      	ldr	r3, [r7, #0]
 800bb04:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800bb06:	2300      	movs	r3, #0
 800bb08:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800bb0c:	e00f      	b.n	800bb2e <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800bb0e:	f107 030c 	add.w	r3, r7, #12
 800bb12:	4618      	mov	r0, r3
 800bb14:	f7ff fdd0 	bl	800b6b8 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800bb18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb1a:	0a5a      	lsrs	r2, r3, #9
 800bb1c:	683b      	ldr	r3, [r7, #0]
 800bb1e:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800bb20:	2300      	movs	r3, #0
 800bb22:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800bb26:	e002      	b.n	800bb2e <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800bb28:	2304      	movs	r3, #4
 800bb2a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800bb2e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800bb32:	4618      	mov	r0, r3
 800bb34:	3730      	adds	r7, #48	; 0x30
 800bb36:	46bd      	mov	sp, r7
 800bb38:	bd80      	pop	{r7, pc}
 800bb3a:	bf00      	nop
 800bb3c:	2000001d 	.word	0x2000001d

0800bb40 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init (USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800bb40:	b580      	push	{r7, lr}
 800bb42:	b084      	sub	sp, #16
 800bb44:	af00      	add	r7, sp, #0
 800bb46:	6078      	str	r0, [r7, #4]
 800bb48:	460b      	mov	r3, r1
 800bb4a:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800bb4c:	2300      	movs	r3, #0
 800bb4e:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if(pdev->dev_speed == USBD_SPEED_HIGH)
 800bb50:	687b      	ldr	r3, [r7, #4]
 800bb52:	7c1b      	ldrb	r3, [r3, #16]
 800bb54:	2b00      	cmp	r3, #0
 800bb56:	d115      	bne.n	800bb84 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800bb58:	f44f 7300 	mov.w	r3, #512	; 0x200
 800bb5c:	2202      	movs	r2, #2
 800bb5e:	2181      	movs	r1, #129	; 0x81
 800bb60:	6878      	ldr	r0, [r7, #4]
 800bb62:	f001 ff50 	bl	800da06 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800bb66:	687b      	ldr	r3, [r7, #4]
 800bb68:	2201      	movs	r2, #1
 800bb6a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800bb6c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800bb70:	2202      	movs	r2, #2
 800bb72:	2101      	movs	r1, #1
 800bb74:	6878      	ldr	r0, [r7, #4]
 800bb76:	f001 ff46 	bl	800da06 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800bb7a:	687b      	ldr	r3, [r7, #4]
 800bb7c:	2201      	movs	r2, #1
 800bb7e:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
 800bb82:	e012      	b.n	800bbaa <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800bb84:	2340      	movs	r3, #64	; 0x40
 800bb86:	2202      	movs	r2, #2
 800bb88:	2181      	movs	r1, #129	; 0x81
 800bb8a:	6878      	ldr	r0, [r7, #4]
 800bb8c:	f001 ff3b 	bl	800da06 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800bb90:	687b      	ldr	r3, [r7, #4]
 800bb92:	2201      	movs	r2, #1
 800bb94:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800bb96:	2340      	movs	r3, #64	; 0x40
 800bb98:	2202      	movs	r2, #2
 800bb9a:	2101      	movs	r1, #1
 800bb9c:	6878      	ldr	r0, [r7, #4]
 800bb9e:	f001 ff32 	bl	800da06 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800bba2:	687b      	ldr	r3, [r7, #4]
 800bba4:	2201      	movs	r2, #1
 800bba6:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800bbaa:	2308      	movs	r3, #8
 800bbac:	2203      	movs	r2, #3
 800bbae:	2182      	movs	r1, #130	; 0x82
 800bbb0:	6878      	ldr	r0, [r7, #4]
 800bbb2:	f001 ff28 	bl	800da06 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800bbb6:	687b      	ldr	r3, [r7, #4]
 800bbb8:	2201      	movs	r2, #1
 800bbba:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof (USBD_CDC_HandleTypeDef));
 800bbbc:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800bbc0:	f002 f89e 	bl	800dd00 <malloc>
 800bbc4:	4603      	mov	r3, r0
 800bbc6:	461a      	mov	r2, r3
 800bbc8:	687b      	ldr	r3, [r7, #4]
 800bbca:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290

  if(pdev->pClassData == NULL)
 800bbce:	687b      	ldr	r3, [r7, #4]
 800bbd0:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800bbd4:	2b00      	cmp	r3, #0
 800bbd6:	d102      	bne.n	800bbde <USBD_CDC_Init+0x9e>
  {
    ret = 1U;
 800bbd8:	2301      	movs	r3, #1
 800bbda:	73fb      	strb	r3, [r7, #15]
 800bbdc:	e026      	b.n	800bc2c <USBD_CDC_Init+0xec>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800bbde:	687b      	ldr	r3, [r7, #4]
 800bbe0:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800bbe4:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800bbe6:	687b      	ldr	r3, [r7, #4]
 800bbe8:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800bbec:	681b      	ldr	r3, [r3, #0]
 800bbee:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 800bbf0:	68bb      	ldr	r3, [r7, #8]
 800bbf2:	2200      	movs	r2, #0
 800bbf4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 800bbf8:	68bb      	ldr	r3, [r7, #8]
 800bbfa:	2200      	movs	r2, #0
 800bbfc:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if(pdev->dev_speed == USBD_SPEED_HIGH)
 800bc00:	687b      	ldr	r3, [r7, #4]
 800bc02:	7c1b      	ldrb	r3, [r3, #16]
 800bc04:	2b00      	cmp	r3, #0
 800bc06:	d109      	bne.n	800bc1c <USBD_CDC_Init+0xdc>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800bc08:	68bb      	ldr	r3, [r7, #8]
 800bc0a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800bc0e:	f44f 7300 	mov.w	r3, #512	; 0x200
 800bc12:	2101      	movs	r1, #1
 800bc14:	6878      	ldr	r0, [r7, #4]
 800bc16:	f001 ffe7 	bl	800dbe8 <USBD_LL_PrepareReceive>
 800bc1a:	e007      	b.n	800bc2c <USBD_CDC_Init+0xec>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800bc1c:	68bb      	ldr	r3, [r7, #8]
 800bc1e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800bc22:	2340      	movs	r3, #64	; 0x40
 800bc24:	2101      	movs	r1, #1
 800bc26:	6878      	ldr	r0, [r7, #4]
 800bc28:	f001 ffde 	bl	800dbe8 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 800bc2c:	7bfb      	ldrb	r3, [r7, #15]
}
 800bc2e:	4618      	mov	r0, r3
 800bc30:	3710      	adds	r7, #16
 800bc32:	46bd      	mov	sp, r7
 800bc34:	bd80      	pop	{r7, pc}

0800bc36 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit (USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800bc36:	b580      	push	{r7, lr}
 800bc38:	b084      	sub	sp, #16
 800bc3a:	af00      	add	r7, sp, #0
 800bc3c:	6078      	str	r0, [r7, #4]
 800bc3e:	460b      	mov	r3, r1
 800bc40:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800bc42:	2300      	movs	r3, #0
 800bc44:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800bc46:	2181      	movs	r1, #129	; 0x81
 800bc48:	6878      	ldr	r0, [r7, #4]
 800bc4a:	f001 ff02 	bl	800da52 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800bc4e:	687b      	ldr	r3, [r7, #4]
 800bc50:	2200      	movs	r2, #0
 800bc52:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800bc54:	2101      	movs	r1, #1
 800bc56:	6878      	ldr	r0, [r7, #4]
 800bc58:	f001 fefb 	bl	800da52 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800bc5c:	687b      	ldr	r3, [r7, #4]
 800bc5e:	2200      	movs	r2, #0
 800bc60:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800bc64:	2182      	movs	r1, #130	; 0x82
 800bc66:	6878      	ldr	r0, [r7, #4]
 800bc68:	f001 fef3 	bl	800da52 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800bc6c:	687b      	ldr	r3, [r7, #4]
 800bc6e:	2200      	movs	r2, #0
 800bc70:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if(pdev->pClassData != NULL)
 800bc72:	687b      	ldr	r3, [r7, #4]
 800bc74:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800bc78:	2b00      	cmp	r3, #0
 800bc7a:	d00e      	beq.n	800bc9a <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800bc7c:	687b      	ldr	r3, [r7, #4]
 800bc7e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800bc82:	685b      	ldr	r3, [r3, #4]
 800bc84:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 800bc86:	687b      	ldr	r3, [r7, #4]
 800bc88:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800bc8c:	4618      	mov	r0, r3
 800bc8e:	f002 f83f 	bl	800dd10 <free>
    pdev->pClassData = NULL;
 800bc92:	687b      	ldr	r3, [r7, #4]
 800bc94:	2200      	movs	r2, #0
 800bc96:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290
  }

  return ret;
 800bc9a:	7bfb      	ldrb	r3, [r7, #15]
}
 800bc9c:	4618      	mov	r0, r3
 800bc9e:	3710      	adds	r7, #16
 800bca0:	46bd      	mov	sp, r7
 800bca2:	bd80      	pop	{r7, pc}

0800bca4 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup (USBD_HandleTypeDef *pdev,
                                USBD_SetupReqTypedef *req)
{
 800bca4:	b580      	push	{r7, lr}
 800bca6:	b086      	sub	sp, #24
 800bca8:	af00      	add	r7, sp, #0
 800bcaa:	6078      	str	r0, [r7, #4]
 800bcac:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800bcae:	687b      	ldr	r3, [r7, #4]
 800bcb0:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800bcb4:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 800bcb6:	2300      	movs	r3, #0
 800bcb8:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 800bcba:	2300      	movs	r3, #0
 800bcbc:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 800bcbe:	2300      	movs	r3, #0
 800bcc0:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800bcc2:	683b      	ldr	r3, [r7, #0]
 800bcc4:	781b      	ldrb	r3, [r3, #0]
 800bcc6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800bcca:	2b00      	cmp	r3, #0
 800bccc:	d039      	beq.n	800bd42 <USBD_CDC_Setup+0x9e>
 800bcce:	2b20      	cmp	r3, #32
 800bcd0:	d17c      	bne.n	800bdcc <USBD_CDC_Setup+0x128>
  {
  case USB_REQ_TYPE_CLASS :
    if (req->wLength)
 800bcd2:	683b      	ldr	r3, [r7, #0]
 800bcd4:	88db      	ldrh	r3, [r3, #6]
 800bcd6:	2b00      	cmp	r3, #0
 800bcd8:	d029      	beq.n	800bd2e <USBD_CDC_Setup+0x8a>
    {
      if (req->bmRequest & 0x80U)
 800bcda:	683b      	ldr	r3, [r7, #0]
 800bcdc:	781b      	ldrb	r3, [r3, #0]
 800bcde:	b25b      	sxtb	r3, r3
 800bce0:	2b00      	cmp	r3, #0
 800bce2:	da11      	bge.n	800bd08 <USBD_CDC_Setup+0x64>
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800bce4:	687b      	ldr	r3, [r7, #4]
 800bce6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800bcea:	689b      	ldr	r3, [r3, #8]
 800bcec:	683a      	ldr	r2, [r7, #0]
 800bcee:	7850      	ldrb	r0, [r2, #1]
                                                          (uint8_t *)(void *)hcdc->data,
 800bcf0:	6939      	ldr	r1, [r7, #16]
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800bcf2:	683a      	ldr	r2, [r7, #0]
 800bcf4:	88d2      	ldrh	r2, [r2, #6]
 800bcf6:	4798      	blx	r3
                                                          req->wLength);

          USBD_CtlSendData (pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800bcf8:	6939      	ldr	r1, [r7, #16]
 800bcfa:	683b      	ldr	r3, [r7, #0]
 800bcfc:	88db      	ldrh	r3, [r3, #6]
 800bcfe:	461a      	mov	r2, r3
 800bd00:	6878      	ldr	r0, [r7, #4]
 800bd02:	f001 f9c9 	bl	800d098 <USBD_CtlSendData>
    else
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                        (uint8_t *)(void *)req, 0U);
    }
    break;
 800bd06:	e068      	b.n	800bdda <USBD_CDC_Setup+0x136>
        hcdc->CmdOpCode = req->bRequest;
 800bd08:	683b      	ldr	r3, [r7, #0]
 800bd0a:	785a      	ldrb	r2, [r3, #1]
 800bd0c:	693b      	ldr	r3, [r7, #16]
 800bd0e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
        hcdc->CmdLength = (uint8_t)req->wLength;
 800bd12:	683b      	ldr	r3, [r7, #0]
 800bd14:	88db      	ldrh	r3, [r3, #6]
 800bd16:	b2da      	uxtb	r2, r3
 800bd18:	693b      	ldr	r3, [r7, #16]
 800bd1a:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
        USBD_CtlPrepareRx (pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800bd1e:	6939      	ldr	r1, [r7, #16]
 800bd20:	683b      	ldr	r3, [r7, #0]
 800bd22:	88db      	ldrh	r3, [r3, #6]
 800bd24:	461a      	mov	r2, r3
 800bd26:	6878      	ldr	r0, [r7, #4]
 800bd28:	f001 f9e4 	bl	800d0f4 <USBD_CtlPrepareRx>
    break;
 800bd2c:	e055      	b.n	800bdda <USBD_CDC_Setup+0x136>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800bd2e:	687b      	ldr	r3, [r7, #4]
 800bd30:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800bd34:	689b      	ldr	r3, [r3, #8]
 800bd36:	683a      	ldr	r2, [r7, #0]
 800bd38:	7850      	ldrb	r0, [r2, #1]
 800bd3a:	2200      	movs	r2, #0
 800bd3c:	6839      	ldr	r1, [r7, #0]
 800bd3e:	4798      	blx	r3
    break;
 800bd40:	e04b      	b.n	800bdda <USBD_CDC_Setup+0x136>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800bd42:	683b      	ldr	r3, [r7, #0]
 800bd44:	785b      	ldrb	r3, [r3, #1]
 800bd46:	2b0a      	cmp	r3, #10
 800bd48:	d017      	beq.n	800bd7a <USBD_CDC_Setup+0xd6>
 800bd4a:	2b0b      	cmp	r3, #11
 800bd4c:	d029      	beq.n	800bda2 <USBD_CDC_Setup+0xfe>
 800bd4e:	2b00      	cmp	r3, #0
 800bd50:	d133      	bne.n	800bdba <USBD_CDC_Setup+0x116>
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bd52:	687b      	ldr	r3, [r7, #4]
 800bd54:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800bd58:	2b03      	cmp	r3, #3
 800bd5a:	d107      	bne.n	800bd6c <USBD_CDC_Setup+0xc8>
      {
        USBD_CtlSendData (pdev, (uint8_t *)(void *)&status_info, 2U);
 800bd5c:	f107 030c 	add.w	r3, r7, #12
 800bd60:	2202      	movs	r2, #2
 800bd62:	4619      	mov	r1, r3
 800bd64:	6878      	ldr	r0, [r7, #4]
 800bd66:	f001 f997 	bl	800d098 <USBD_CtlSendData>
      else
      {
        USBD_CtlError (pdev, req);
			  ret = USBD_FAIL;
      }
      break;
 800bd6a:	e02e      	b.n	800bdca <USBD_CDC_Setup+0x126>
        USBD_CtlError (pdev, req);
 800bd6c:	6839      	ldr	r1, [r7, #0]
 800bd6e:	6878      	ldr	r0, [r7, #4]
 800bd70:	f001 f927 	bl	800cfc2 <USBD_CtlError>
			  ret = USBD_FAIL;
 800bd74:	2302      	movs	r3, #2
 800bd76:	75fb      	strb	r3, [r7, #23]
      break;
 800bd78:	e027      	b.n	800bdca <USBD_CDC_Setup+0x126>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bd7a:	687b      	ldr	r3, [r7, #4]
 800bd7c:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800bd80:	2b03      	cmp	r3, #3
 800bd82:	d107      	bne.n	800bd94 <USBD_CDC_Setup+0xf0>
      {
        USBD_CtlSendData (pdev, &ifalt, 1U);
 800bd84:	f107 030f 	add.w	r3, r7, #15
 800bd88:	2201      	movs	r2, #1
 800bd8a:	4619      	mov	r1, r3
 800bd8c:	6878      	ldr	r0, [r7, #4]
 800bd8e:	f001 f983 	bl	800d098 <USBD_CtlSendData>
      else
      {
        USBD_CtlError (pdev, req);
			  ret = USBD_FAIL;
      }
      break;
 800bd92:	e01a      	b.n	800bdca <USBD_CDC_Setup+0x126>
        USBD_CtlError (pdev, req);
 800bd94:	6839      	ldr	r1, [r7, #0]
 800bd96:	6878      	ldr	r0, [r7, #4]
 800bd98:	f001 f913 	bl	800cfc2 <USBD_CtlError>
			  ret = USBD_FAIL;
 800bd9c:	2302      	movs	r3, #2
 800bd9e:	75fb      	strb	r3, [r7, #23]
      break;
 800bda0:	e013      	b.n	800bdca <USBD_CDC_Setup+0x126>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800bda2:	687b      	ldr	r3, [r7, #4]
 800bda4:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800bda8:	2b03      	cmp	r3, #3
 800bdaa:	d00d      	beq.n	800bdc8 <USBD_CDC_Setup+0x124>
      {
        USBD_CtlError (pdev, req);
 800bdac:	6839      	ldr	r1, [r7, #0]
 800bdae:	6878      	ldr	r0, [r7, #4]
 800bdb0:	f001 f907 	bl	800cfc2 <USBD_CtlError>
			  ret = USBD_FAIL;
 800bdb4:	2302      	movs	r3, #2
 800bdb6:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800bdb8:	e006      	b.n	800bdc8 <USBD_CDC_Setup+0x124>

    default:
      USBD_CtlError (pdev, req);
 800bdba:	6839      	ldr	r1, [r7, #0]
 800bdbc:	6878      	ldr	r0, [r7, #4]
 800bdbe:	f001 f900 	bl	800cfc2 <USBD_CtlError>
      ret = USBD_FAIL;
 800bdc2:	2302      	movs	r3, #2
 800bdc4:	75fb      	strb	r3, [r7, #23]
      break;
 800bdc6:	e000      	b.n	800bdca <USBD_CDC_Setup+0x126>
      break;
 800bdc8:	bf00      	nop
    }
    break;
 800bdca:	e006      	b.n	800bdda <USBD_CDC_Setup+0x136>

  default:
    USBD_CtlError (pdev, req);
 800bdcc:	6839      	ldr	r1, [r7, #0]
 800bdce:	6878      	ldr	r0, [r7, #4]
 800bdd0:	f001 f8f7 	bl	800cfc2 <USBD_CtlError>
    ret = USBD_FAIL;
 800bdd4:	2302      	movs	r3, #2
 800bdd6:	75fb      	strb	r3, [r7, #23]
    break;
 800bdd8:	bf00      	nop
  }

  return ret;
 800bdda:	7dfb      	ldrb	r3, [r7, #23]
}
 800bddc:	4618      	mov	r0, r3
 800bdde:	3718      	adds	r7, #24
 800bde0:	46bd      	mov	sp, r7
 800bde2:	bd80      	pop	{r7, pc}

0800bde4 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800bde4:	b580      	push	{r7, lr}
 800bde6:	b084      	sub	sp, #16
 800bde8:	af00      	add	r7, sp, #0
 800bdea:	6078      	str	r0, [r7, #4]
 800bdec:	460b      	mov	r3, r1
 800bdee:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)pdev->pClassData;
 800bdf0:	687b      	ldr	r3, [r7, #4]
 800bdf2:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800bdf6:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800bdf8:	687b      	ldr	r3, [r7, #4]
 800bdfa:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800bdfe:	60bb      	str	r3, [r7, #8]

  if(pdev->pClassData != NULL)
 800be00:	687b      	ldr	r3, [r7, #4]
 800be02:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800be06:	2b00      	cmp	r3, #0
 800be08:	d03a      	beq.n	800be80 <USBD_CDC_DataIn+0x9c>
  {
    if((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800be0a:	78fa      	ldrb	r2, [r7, #3]
 800be0c:	6879      	ldr	r1, [r7, #4]
 800be0e:	4613      	mov	r3, r2
 800be10:	009b      	lsls	r3, r3, #2
 800be12:	4413      	add	r3, r2
 800be14:	009b      	lsls	r3, r3, #2
 800be16:	440b      	add	r3, r1
 800be18:	331c      	adds	r3, #28
 800be1a:	681b      	ldr	r3, [r3, #0]
 800be1c:	2b00      	cmp	r3, #0
 800be1e:	d029      	beq.n	800be74 <USBD_CDC_DataIn+0x90>
 800be20:	78fa      	ldrb	r2, [r7, #3]
 800be22:	6879      	ldr	r1, [r7, #4]
 800be24:	4613      	mov	r3, r2
 800be26:	009b      	lsls	r3, r3, #2
 800be28:	4413      	add	r3, r2
 800be2a:	009b      	lsls	r3, r3, #2
 800be2c:	440b      	add	r3, r1
 800be2e:	331c      	adds	r3, #28
 800be30:	681a      	ldr	r2, [r3, #0]
 800be32:	78f9      	ldrb	r1, [r7, #3]
 800be34:	68b8      	ldr	r0, [r7, #8]
 800be36:	460b      	mov	r3, r1
 800be38:	00db      	lsls	r3, r3, #3
 800be3a:	1a5b      	subs	r3, r3, r1
 800be3c:	009b      	lsls	r3, r3, #2
 800be3e:	4403      	add	r3, r0
 800be40:	3344      	adds	r3, #68	; 0x44
 800be42:	681b      	ldr	r3, [r3, #0]
 800be44:	fbb2 f1f3 	udiv	r1, r2, r3
 800be48:	fb03 f301 	mul.w	r3, r3, r1
 800be4c:	1ad3      	subs	r3, r2, r3
 800be4e:	2b00      	cmp	r3, #0
 800be50:	d110      	bne.n	800be74 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 800be52:	78fa      	ldrb	r2, [r7, #3]
 800be54:	6879      	ldr	r1, [r7, #4]
 800be56:	4613      	mov	r3, r2
 800be58:	009b      	lsls	r3, r3, #2
 800be5a:	4413      	add	r3, r2
 800be5c:	009b      	lsls	r3, r3, #2
 800be5e:	440b      	add	r3, r1
 800be60:	331c      	adds	r3, #28
 800be62:	2200      	movs	r2, #0
 800be64:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit (pdev, epnum, NULL, 0U);
 800be66:	78f9      	ldrb	r1, [r7, #3]
 800be68:	2300      	movs	r3, #0
 800be6a:	2200      	movs	r2, #0
 800be6c:	6878      	ldr	r0, [r7, #4]
 800be6e:	f001 fe98 	bl	800dba2 <USBD_LL_Transmit>
 800be72:	e003      	b.n	800be7c <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 800be74:	68fb      	ldr	r3, [r7, #12]
 800be76:	2200      	movs	r2, #0
 800be78:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 800be7c:	2300      	movs	r3, #0
 800be7e:	e000      	b.n	800be82 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 800be80:	2302      	movs	r3, #2
  }
}
 800be82:	4618      	mov	r0, r3
 800be84:	3710      	adds	r7, #16
 800be86:	46bd      	mov	sp, r7
 800be88:	bd80      	pop	{r7, pc}

0800be8a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800be8a:	b580      	push	{r7, lr}
 800be8c:	b084      	sub	sp, #16
 800be8e:	af00      	add	r7, sp, #0
 800be90:	6078      	str	r0, [r7, #4]
 800be92:	460b      	mov	r3, r1
 800be94:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800be96:	687b      	ldr	r3, [r7, #4]
 800be98:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800be9c:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize (pdev, epnum);
 800be9e:	78fb      	ldrb	r3, [r7, #3]
 800bea0:	4619      	mov	r1, r3
 800bea2:	6878      	ldr	r0, [r7, #4]
 800bea4:	f001 fec3 	bl	800dc2e <USBD_LL_GetRxDataSize>
 800bea8:	4602      	mov	r2, r0
 800beaa:	68fb      	ldr	r3, [r7, #12]
 800beac:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if(pdev->pClassData != NULL)
 800beb0:	687b      	ldr	r3, [r7, #4]
 800beb2:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800beb6:	2b00      	cmp	r3, #0
 800beb8:	d00d      	beq.n	800bed6 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800beba:	687b      	ldr	r3, [r7, #4]
 800bebc:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800bec0:	68db      	ldr	r3, [r3, #12]
 800bec2:	68fa      	ldr	r2, [r7, #12]
 800bec4:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800bec8:	68fa      	ldr	r2, [r7, #12]
 800beca:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800bece:	4611      	mov	r1, r2
 800bed0:	4798      	blx	r3

    return USBD_OK;
 800bed2:	2300      	movs	r3, #0
 800bed4:	e000      	b.n	800bed8 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 800bed6:	2302      	movs	r3, #2
  }
}
 800bed8:	4618      	mov	r0, r3
 800beda:	3710      	adds	r7, #16
 800bedc:	46bd      	mov	sp, r7
 800bede:	bd80      	pop	{r7, pc}

0800bee0 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady (USBD_HandleTypeDef *pdev)
{
 800bee0:	b580      	push	{r7, lr}
 800bee2:	b084      	sub	sp, #16
 800bee4:	af00      	add	r7, sp, #0
 800bee6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800bee8:	687b      	ldr	r3, [r7, #4]
 800beea:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800beee:	60fb      	str	r3, [r7, #12]

  if((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800bef0:	687b      	ldr	r3, [r7, #4]
 800bef2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800bef6:	2b00      	cmp	r3, #0
 800bef8:	d015      	beq.n	800bf26 <USBD_CDC_EP0_RxReady+0x46>
 800befa:	68fb      	ldr	r3, [r7, #12]
 800befc:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800bf00:	2bff      	cmp	r3, #255	; 0xff
 800bf02:	d010      	beq.n	800bf26 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800bf04:	687b      	ldr	r3, [r7, #4]
 800bf06:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800bf0a:	689b      	ldr	r3, [r3, #8]
 800bf0c:	68fa      	ldr	r2, [r7, #12]
 800bf0e:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 800bf12:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800bf14:	68fa      	ldr	r2, [r7, #12]
 800bf16:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800bf1a:	b292      	uxth	r2, r2
 800bf1c:	4798      	blx	r3
      hcdc->CmdOpCode = 0xFFU;
 800bf1e:	68fb      	ldr	r3, [r7, #12]
 800bf20:	22ff      	movs	r2, #255	; 0xff
 800bf22:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 800bf26:	2300      	movs	r3, #0
}
 800bf28:	4618      	mov	r0, r3
 800bf2a:	3710      	adds	r7, #16
 800bf2c:	46bd      	mov	sp, r7
 800bf2e:	bd80      	pop	{r7, pc}

0800bf30 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc (uint16_t *length)
{
 800bf30:	b480      	push	{r7}
 800bf32:	b083      	sub	sp, #12
 800bf34:	af00      	add	r7, sp, #0
 800bf36:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_CfgFSDesc);
 800bf38:	687b      	ldr	r3, [r7, #4]
 800bf3a:	2243      	movs	r2, #67	; 0x43
 800bf3c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 800bf3e:	4b03      	ldr	r3, [pc, #12]	; (800bf4c <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800bf40:	4618      	mov	r0, r3
 800bf42:	370c      	adds	r7, #12
 800bf44:	46bd      	mov	sp, r7
 800bf46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf4a:	4770      	bx	lr
 800bf4c:	200000a8 	.word	0x200000a8

0800bf50 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc (uint16_t *length)
{
 800bf50:	b480      	push	{r7}
 800bf52:	b083      	sub	sp, #12
 800bf54:	af00      	add	r7, sp, #0
 800bf56:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_CfgHSDesc);
 800bf58:	687b      	ldr	r3, [r7, #4]
 800bf5a:	2243      	movs	r2, #67	; 0x43
 800bf5c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 800bf5e:	4b03      	ldr	r3, [pc, #12]	; (800bf6c <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800bf60:	4618      	mov	r0, r3
 800bf62:	370c      	adds	r7, #12
 800bf64:	46bd      	mov	sp, r7
 800bf66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf6a:	4770      	bx	lr
 800bf6c:	20000064 	.word	0x20000064

0800bf70 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc (uint16_t *length)
{
 800bf70:	b480      	push	{r7}
 800bf72:	b083      	sub	sp, #12
 800bf74:	af00      	add	r7, sp, #0
 800bf76:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_OtherSpeedCfgDesc);
 800bf78:	687b      	ldr	r3, [r7, #4]
 800bf7a:	2243      	movs	r2, #67	; 0x43
 800bf7c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 800bf7e:	4b03      	ldr	r3, [pc, #12]	; (800bf8c <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800bf80:	4618      	mov	r0, r3
 800bf82:	370c      	adds	r7, #12
 800bf84:	46bd      	mov	sp, r7
 800bf86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf8a:	4770      	bx	lr
 800bf8c:	200000ec 	.word	0x200000ec

0800bf90 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor (uint16_t *length)
{
 800bf90:	b480      	push	{r7}
 800bf92:	b083      	sub	sp, #12
 800bf94:	af00      	add	r7, sp, #0
 800bf96:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_DeviceQualifierDesc);
 800bf98:	687b      	ldr	r3, [r7, #4]
 800bf9a:	220a      	movs	r2, #10
 800bf9c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 800bf9e:	4b03      	ldr	r3, [pc, #12]	; (800bfac <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800bfa0:	4618      	mov	r0, r3
 800bfa2:	370c      	adds	r7, #12
 800bfa4:	46bd      	mov	sp, r7
 800bfa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfaa:	4770      	bx	lr
 800bfac:	20000020 	.word	0x20000020

0800bfb0 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface  (USBD_HandleTypeDef   *pdev,
                                      USBD_CDC_ItfTypeDef *fops)
{
 800bfb0:	b480      	push	{r7}
 800bfb2:	b085      	sub	sp, #20
 800bfb4:	af00      	add	r7, sp, #0
 800bfb6:	6078      	str	r0, [r7, #4]
 800bfb8:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 800bfba:	2302      	movs	r3, #2
 800bfbc:	73fb      	strb	r3, [r7, #15]

  if(fops != NULL)
 800bfbe:	683b      	ldr	r3, [r7, #0]
 800bfc0:	2b00      	cmp	r3, #0
 800bfc2:	d005      	beq.n	800bfd0 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData= fops;
 800bfc4:	687b      	ldr	r3, [r7, #4]
 800bfc6:	683a      	ldr	r2, [r7, #0]
 800bfc8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
    ret = USBD_OK;
 800bfcc:	2300      	movs	r3, #0
 800bfce:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800bfd0:	7bfb      	ldrb	r3, [r7, #15]
}
 800bfd2:	4618      	mov	r0, r3
 800bfd4:	3714      	adds	r7, #20
 800bfd6:	46bd      	mov	sp, r7
 800bfd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfdc:	4770      	bx	lr

0800bfde <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer  (USBD_HandleTypeDef   *pdev,
                                uint8_t  *pbuff,
                                uint16_t length)
{
 800bfde:	b480      	push	{r7}
 800bfe0:	b087      	sub	sp, #28
 800bfe2:	af00      	add	r7, sp, #0
 800bfe4:	60f8      	str	r0, [r7, #12]
 800bfe6:	60b9      	str	r1, [r7, #8]
 800bfe8:	4613      	mov	r3, r2
 800bfea:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800bfec:	68fb      	ldr	r3, [r7, #12]
 800bfee:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800bff2:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800bff4:	697b      	ldr	r3, [r7, #20]
 800bff6:	68ba      	ldr	r2, [r7, #8]
 800bff8:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800bffc:	88fa      	ldrh	r2, [r7, #6]
 800bffe:	697b      	ldr	r3, [r7, #20]
 800c000:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 800c004:	2300      	movs	r3, #0
}
 800c006:	4618      	mov	r0, r3
 800c008:	371c      	adds	r7, #28
 800c00a:	46bd      	mov	sp, r7
 800c00c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c010:	4770      	bx	lr

0800c012 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer  (USBD_HandleTypeDef   *pdev,
                                   uint8_t  *pbuff)
{
 800c012:	b480      	push	{r7}
 800c014:	b085      	sub	sp, #20
 800c016:	af00      	add	r7, sp, #0
 800c018:	6078      	str	r0, [r7, #4]
 800c01a:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800c01c:	687b      	ldr	r3, [r7, #4]
 800c01e:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800c022:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 800c024:	68fb      	ldr	r3, [r7, #12]
 800c026:	683a      	ldr	r2, [r7, #0]
 800c028:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 800c02c:	2300      	movs	r3, #0
}
 800c02e:	4618      	mov	r0, r3
 800c030:	3714      	adds	r7, #20
 800c032:	46bd      	mov	sp, r7
 800c034:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c038:	4770      	bx	lr

0800c03a <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800c03a:	b580      	push	{r7, lr}
 800c03c:	b084      	sub	sp, #16
 800c03e:	af00      	add	r7, sp, #0
 800c040:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800c042:	687b      	ldr	r3, [r7, #4]
 800c044:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800c048:	60fb      	str	r3, [r7, #12]

  if(pdev->pClassData != NULL)
 800c04a:	687b      	ldr	r3, [r7, #4]
 800c04c:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800c050:	2b00      	cmp	r3, #0
 800c052:	d01c      	beq.n	800c08e <USBD_CDC_TransmitPacket+0x54>
  {
    if(hcdc->TxState == 0U)
 800c054:	68fb      	ldr	r3, [r7, #12]
 800c056:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800c05a:	2b00      	cmp	r3, #0
 800c05c:	d115      	bne.n	800c08a <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 800c05e:	68fb      	ldr	r3, [r7, #12]
 800c060:	2201      	movs	r2, #1
 800c062:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800c066:	68fb      	ldr	r3, [r7, #12]
 800c068:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800c06c:	687b      	ldr	r3, [r7, #4]
 800c06e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800c070:	68fb      	ldr	r3, [r7, #12]
 800c072:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 800c076:	68fb      	ldr	r3, [r7, #12]
 800c078:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800c07c:	b29b      	uxth	r3, r3
 800c07e:	2181      	movs	r1, #129	; 0x81
 800c080:	6878      	ldr	r0, [r7, #4]
 800c082:	f001 fd8e 	bl	800dba2 <USBD_LL_Transmit>

      return USBD_OK;
 800c086:	2300      	movs	r3, #0
 800c088:	e002      	b.n	800c090 <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 800c08a:	2301      	movs	r3, #1
 800c08c:	e000      	b.n	800c090 <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 800c08e:	2302      	movs	r3, #2
  }
}
 800c090:	4618      	mov	r0, r3
 800c092:	3710      	adds	r7, #16
 800c094:	46bd      	mov	sp, r7
 800c096:	bd80      	pop	{r7, pc}

0800c098 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800c098:	b580      	push	{r7, lr}
 800c09a:	b084      	sub	sp, #16
 800c09c:	af00      	add	r7, sp, #0
 800c09e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800c0a0:	687b      	ldr	r3, [r7, #4]
 800c0a2:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800c0a6:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if(pdev->pClassData != NULL)
 800c0a8:	687b      	ldr	r3, [r7, #4]
 800c0aa:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800c0ae:	2b00      	cmp	r3, #0
 800c0b0:	d017      	beq.n	800c0e2 <USBD_CDC_ReceivePacket+0x4a>
  {
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 800c0b2:	687b      	ldr	r3, [r7, #4]
 800c0b4:	7c1b      	ldrb	r3, [r3, #16]
 800c0b6:	2b00      	cmp	r3, #0
 800c0b8:	d109      	bne.n	800c0ce <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800c0ba:	68fb      	ldr	r3, [r7, #12]
 800c0bc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800c0c0:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c0c4:	2101      	movs	r1, #1
 800c0c6:	6878      	ldr	r0, [r7, #4]
 800c0c8:	f001 fd8e 	bl	800dbe8 <USBD_LL_PrepareReceive>
 800c0cc:	e007      	b.n	800c0de <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800c0ce:	68fb      	ldr	r3, [r7, #12]
 800c0d0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800c0d4:	2340      	movs	r3, #64	; 0x40
 800c0d6:	2101      	movs	r1, #1
 800c0d8:	6878      	ldr	r0, [r7, #4]
 800c0da:	f001 fd85 	bl	800dbe8 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 800c0de:	2300      	movs	r3, #0
 800c0e0:	e000      	b.n	800c0e4 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 800c0e2:	2302      	movs	r3, #2
  }
}
 800c0e4:	4618      	mov	r0, r3
 800c0e6:	3710      	adds	r7, #16
 800c0e8:	46bd      	mov	sp, r7
 800c0ea:	bd80      	pop	{r7, pc}

0800c0ec <USBD_Init>:
* @param  pdesc: Descriptor structure address
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev, USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800c0ec:	b580      	push	{r7, lr}
 800c0ee:	b084      	sub	sp, #16
 800c0f0:	af00      	add	r7, sp, #0
 800c0f2:	60f8      	str	r0, [r7, #12]
 800c0f4:	60b9      	str	r1, [r7, #8]
 800c0f6:	4613      	mov	r3, r2
 800c0f8:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if(pdev == NULL)
 800c0fa:	68fb      	ldr	r3, [r7, #12]
 800c0fc:	2b00      	cmp	r3, #0
 800c0fe:	d101      	bne.n	800c104 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800c100:	2302      	movs	r3, #2
 800c102:	e01a      	b.n	800c13a <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if(pdev->pClass != NULL)
 800c104:	68fb      	ldr	r3, [r7, #12]
 800c106:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800c10a:	2b00      	cmp	r3, #0
 800c10c:	d003      	beq.n	800c116 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800c10e:	68fb      	ldr	r3, [r7, #12]
 800c110:	2200      	movs	r2, #0
 800c112:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
  }

  /* Assign USBD Descriptors */
  if(pdesc != NULL)
 800c116:	68bb      	ldr	r3, [r7, #8]
 800c118:	2b00      	cmp	r3, #0
 800c11a:	d003      	beq.n	800c124 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 800c11c:	68fb      	ldr	r3, [r7, #12]
 800c11e:	68ba      	ldr	r2, [r7, #8]
 800c120:	f8c3 2288 	str.w	r2, [r3, #648]	; 0x288
  }

  /* Set Device initial State */
  pdev->dev_state  = USBD_STATE_DEFAULT;
 800c124:	68fb      	ldr	r3, [r7, #12]
 800c126:	2201      	movs	r2, #1
 800c128:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->id = id;
 800c12c:	68fb      	ldr	r3, [r7, #12]
 800c12e:	79fa      	ldrb	r2, [r7, #7]
 800c130:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800c132:	68f8      	ldr	r0, [r7, #12]
 800c134:	f001 fc00 	bl	800d938 <USBD_LL_Init>

  return USBD_OK;
 800c138:	2300      	movs	r3, #0
}
 800c13a:	4618      	mov	r0, r3
 800c13c:	3710      	adds	r7, #16
 800c13e:	46bd      	mov	sp, r7
 800c140:	bd80      	pop	{r7, pc}

0800c142 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800c142:	b480      	push	{r7}
 800c144:	b085      	sub	sp, #20
 800c146:	af00      	add	r7, sp, #0
 800c148:	6078      	str	r0, [r7, #4]
 800c14a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef   status = USBD_OK;
 800c14c:	2300      	movs	r3, #0
 800c14e:	73fb      	strb	r3, [r7, #15]
  if(pclass != 0)
 800c150:	683b      	ldr	r3, [r7, #0]
 800c152:	2b00      	cmp	r3, #0
 800c154:	d006      	beq.n	800c164 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 800c156:	687b      	ldr	r3, [r7, #4]
 800c158:	683a      	ldr	r2, [r7, #0]
 800c15a:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
    status = USBD_OK;
 800c15e:	2300      	movs	r3, #0
 800c160:	73fb      	strb	r3, [r7, #15]
 800c162:	e001      	b.n	800c168 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 800c164:	2302      	movs	r3, #2
 800c166:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800c168:	7bfb      	ldrb	r3, [r7, #15]
}
 800c16a:	4618      	mov	r0, r3
 800c16c:	3714      	adds	r7, #20
 800c16e:	46bd      	mov	sp, r7
 800c170:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c174:	4770      	bx	lr

0800c176 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start  (USBD_HandleTypeDef *pdev)
{
 800c176:	b580      	push	{r7, lr}
 800c178:	b082      	sub	sp, #8
 800c17a:	af00      	add	r7, sp, #0
 800c17c:	6078      	str	r0, [r7, #4]

  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 800c17e:	6878      	ldr	r0, [r7, #4]
 800c180:	f001 fc26 	bl	800d9d0 <USBD_LL_Start>

  return USBD_OK;
 800c184:	2300      	movs	r3, #0
}
 800c186:	4618      	mov	r0, r3
 800c188:	3708      	adds	r7, #8
 800c18a:	46bd      	mov	sp, r7
 800c18c:	bd80      	pop	{r7, pc}

0800c18e <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode (USBD_HandleTypeDef  *pdev)
{
 800c18e:	b480      	push	{r7}
 800c190:	b083      	sub	sp, #12
 800c192:	af00      	add	r7, sp, #0
 800c194:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800c196:	2300      	movs	r3, #0
}
 800c198:	4618      	mov	r0, r3
 800c19a:	370c      	adds	r7, #12
 800c19c:	46bd      	mov	sp, r7
 800c19e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1a2:	4770      	bx	lr

0800c1a4 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800c1a4:	b580      	push	{r7, lr}
 800c1a6:	b084      	sub	sp, #16
 800c1a8:	af00      	add	r7, sp, #0
 800c1aa:	6078      	str	r0, [r7, #4]
 800c1ac:	460b      	mov	r3, r1
 800c1ae:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef   ret = USBD_FAIL;
 800c1b0:	2302      	movs	r3, #2
 800c1b2:	73fb      	strb	r3, [r7, #15]

  if(pdev->pClass != NULL)
 800c1b4:	687b      	ldr	r3, [r7, #4]
 800c1b6:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800c1ba:	2b00      	cmp	r3, #0
 800c1bc:	d00c      	beq.n	800c1d8 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if(pdev->pClass->Init(pdev, cfgidx) == 0U)
 800c1be:	687b      	ldr	r3, [r7, #4]
 800c1c0:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800c1c4:	681b      	ldr	r3, [r3, #0]
 800c1c6:	78fa      	ldrb	r2, [r7, #3]
 800c1c8:	4611      	mov	r1, r2
 800c1ca:	6878      	ldr	r0, [r7, #4]
 800c1cc:	4798      	blx	r3
 800c1ce:	4603      	mov	r3, r0
 800c1d0:	2b00      	cmp	r3, #0
 800c1d2:	d101      	bne.n	800c1d8 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 800c1d4:	2300      	movs	r3, #0
 800c1d6:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 800c1d8:	7bfb      	ldrb	r3, [r7, #15]
}
 800c1da:	4618      	mov	r0, r3
 800c1dc:	3710      	adds	r7, #16
 800c1de:	46bd      	mov	sp, r7
 800c1e0:	bd80      	pop	{r7, pc}

0800c1e2 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800c1e2:	b580      	push	{r7, lr}
 800c1e4:	b082      	sub	sp, #8
 800c1e6:	af00      	add	r7, sp, #0
 800c1e8:	6078      	str	r0, [r7, #4]
 800c1ea:	460b      	mov	r3, r1
 800c1ec:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 800c1ee:	687b      	ldr	r3, [r7, #4]
 800c1f0:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800c1f4:	685b      	ldr	r3, [r3, #4]
 800c1f6:	78fa      	ldrb	r2, [r7, #3]
 800c1f8:	4611      	mov	r1, r2
 800c1fa:	6878      	ldr	r0, [r7, #4]
 800c1fc:	4798      	blx	r3
  return USBD_OK;
 800c1fe:	2300      	movs	r3, #0
}
 800c200:	4618      	mov	r0, r3
 800c202:	3708      	adds	r7, #8
 800c204:	46bd      	mov	sp, r7
 800c206:	bd80      	pop	{r7, pc}

0800c208 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800c208:	b580      	push	{r7, lr}
 800c20a:	b082      	sub	sp, #8
 800c20c:	af00      	add	r7, sp, #0
 800c20e:	6078      	str	r0, [r7, #4]
 800c210:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800c212:	687b      	ldr	r3, [r7, #4]
 800c214:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800c218:	6839      	ldr	r1, [r7, #0]
 800c21a:	4618      	mov	r0, r3
 800c21c:	f000 fe94 	bl	800cf48 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800c220:	687b      	ldr	r3, [r7, #4]
 800c222:	2201      	movs	r2, #1
 800c224:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

  pdev->ep0_data_len = pdev->request.wLength;
 800c228:	687b      	ldr	r3, [r7, #4]
 800c22a:	f8b3 3286 	ldrh.w	r3, [r3, #646]	; 0x286
 800c22e:	461a      	mov	r2, r3
 800c230:	687b      	ldr	r3, [r7, #4]
 800c232:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

  switch (pdev->request.bmRequest & 0x1FU)
 800c236:	687b      	ldr	r3, [r7, #4]
 800c238:	f893 3280 	ldrb.w	r3, [r3, #640]	; 0x280
 800c23c:	f003 031f 	and.w	r3, r3, #31
 800c240:	2b01      	cmp	r3, #1
 800c242:	d00c      	beq.n	800c25e <USBD_LL_SetupStage+0x56>
 800c244:	2b01      	cmp	r3, #1
 800c246:	d302      	bcc.n	800c24e <USBD_LL_SetupStage+0x46>
 800c248:	2b02      	cmp	r3, #2
 800c24a:	d010      	beq.n	800c26e <USBD_LL_SetupStage+0x66>
 800c24c:	e017      	b.n	800c27e <USBD_LL_SetupStage+0x76>
  {
  case USB_REQ_RECIPIENT_DEVICE:
    USBD_StdDevReq (pdev, &pdev->request);
 800c24e:	687b      	ldr	r3, [r7, #4]
 800c250:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800c254:	4619      	mov	r1, r3
 800c256:	6878      	ldr	r0, [r7, #4]
 800c258:	f000 fa04 	bl	800c664 <USBD_StdDevReq>
    break;
 800c25c:	e01a      	b.n	800c294 <USBD_LL_SetupStage+0x8c>

  case USB_REQ_RECIPIENT_INTERFACE:
    USBD_StdItfReq(pdev, &pdev->request);
 800c25e:	687b      	ldr	r3, [r7, #4]
 800c260:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800c264:	4619      	mov	r1, r3
 800c266:	6878      	ldr	r0, [r7, #4]
 800c268:	f000 fa66 	bl	800c738 <USBD_StdItfReq>
    break;
 800c26c:	e012      	b.n	800c294 <USBD_LL_SetupStage+0x8c>

  case USB_REQ_RECIPIENT_ENDPOINT:
    USBD_StdEPReq(pdev, &pdev->request);
 800c26e:	687b      	ldr	r3, [r7, #4]
 800c270:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800c274:	4619      	mov	r1, r3
 800c276:	6878      	ldr	r0, [r7, #4]
 800c278:	f000 faa4 	bl	800c7c4 <USBD_StdEPReq>
    break;
 800c27c:	e00a      	b.n	800c294 <USBD_LL_SetupStage+0x8c>

  default:
    USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800c27e:	687b      	ldr	r3, [r7, #4]
 800c280:	f893 3280 	ldrb.w	r3, [r3, #640]	; 0x280
 800c284:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800c288:	b2db      	uxtb	r3, r3
 800c28a:	4619      	mov	r1, r3
 800c28c:	6878      	ldr	r0, [r7, #4]
 800c28e:	f001 fbff 	bl	800da90 <USBD_LL_StallEP>
    break;
 800c292:	bf00      	nop
  }

  return USBD_OK;
 800c294:	2300      	movs	r3, #0
}
 800c296:	4618      	mov	r0, r3
 800c298:	3708      	adds	r7, #8
 800c29a:	46bd      	mov	sp, r7
 800c29c:	bd80      	pop	{r7, pc}

0800c29e <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800c29e:	b580      	push	{r7, lr}
 800c2a0:	b086      	sub	sp, #24
 800c2a2:	af00      	add	r7, sp, #0
 800c2a4:	60f8      	str	r0, [r7, #12]
 800c2a6:	460b      	mov	r3, r1
 800c2a8:	607a      	str	r2, [r7, #4]
 800c2aa:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef    *pep;

  if(epnum == 0U)
 800c2ac:	7afb      	ldrb	r3, [r7, #11]
 800c2ae:	2b00      	cmp	r3, #0
 800c2b0:	d14b      	bne.n	800c34a <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 800c2b2:	68fb      	ldr	r3, [r7, #12]
 800c2b4:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 800c2b8:	617b      	str	r3, [r7, #20]

    if ( pdev->ep0_state == USBD_EP0_DATA_OUT)
 800c2ba:	68fb      	ldr	r3, [r7, #12]
 800c2bc:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 800c2c0:	2b03      	cmp	r3, #3
 800c2c2:	d134      	bne.n	800c32e <USBD_LL_DataOutStage+0x90>
    {
      if(pep->rem_length > pep->maxpacket)
 800c2c4:	697b      	ldr	r3, [r7, #20]
 800c2c6:	68da      	ldr	r2, [r3, #12]
 800c2c8:	697b      	ldr	r3, [r7, #20]
 800c2ca:	691b      	ldr	r3, [r3, #16]
 800c2cc:	429a      	cmp	r2, r3
 800c2ce:	d919      	bls.n	800c304 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -=  pep->maxpacket;
 800c2d0:	697b      	ldr	r3, [r7, #20]
 800c2d2:	68da      	ldr	r2, [r3, #12]
 800c2d4:	697b      	ldr	r3, [r7, #20]
 800c2d6:	691b      	ldr	r3, [r3, #16]
 800c2d8:	1ad2      	subs	r2, r2, r3
 800c2da:	697b      	ldr	r3, [r7, #20]
 800c2dc:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx (pdev,
                            pdata,
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800c2de:	697b      	ldr	r3, [r7, #20]
 800c2e0:	68da      	ldr	r2, [r3, #12]
 800c2e2:	697b      	ldr	r3, [r7, #20]
 800c2e4:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx (pdev,
 800c2e6:	429a      	cmp	r2, r3
 800c2e8:	d203      	bcs.n	800c2f2 <USBD_LL_DataOutStage+0x54>
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800c2ea:	697b      	ldr	r3, [r7, #20]
 800c2ec:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx (pdev,
 800c2ee:	b29b      	uxth	r3, r3
 800c2f0:	e002      	b.n	800c2f8 <USBD_LL_DataOutStage+0x5a>
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800c2f2:	697b      	ldr	r3, [r7, #20]
 800c2f4:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx (pdev,
 800c2f6:	b29b      	uxth	r3, r3
 800c2f8:	461a      	mov	r2, r3
 800c2fa:	6879      	ldr	r1, [r7, #4]
 800c2fc:	68f8      	ldr	r0, [r7, #12]
 800c2fe:	f000 ff17 	bl	800d130 <USBD_CtlContinueRx>
 800c302:	e038      	b.n	800c376 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if((pdev->pClass->EP0_RxReady != NULL)&&
 800c304:	68fb      	ldr	r3, [r7, #12]
 800c306:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800c30a:	691b      	ldr	r3, [r3, #16]
 800c30c:	2b00      	cmp	r3, #0
 800c30e:	d00a      	beq.n	800c326 <USBD_LL_DataOutStage+0x88>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800c310:	68fb      	ldr	r3, [r7, #12]
 800c312:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
        if((pdev->pClass->EP0_RxReady != NULL)&&
 800c316:	2b03      	cmp	r3, #3
 800c318:	d105      	bne.n	800c326 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800c31a:	68fb      	ldr	r3, [r7, #12]
 800c31c:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800c320:	691b      	ldr	r3, [r3, #16]
 800c322:	68f8      	ldr	r0, [r7, #12]
 800c324:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 800c326:	68f8      	ldr	r0, [r7, #12]
 800c328:	f000 ff14 	bl	800d154 <USBD_CtlSendStatus>
 800c32c:	e023      	b.n	800c376 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 800c32e:	68fb      	ldr	r3, [r7, #12]
 800c330:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 800c334:	2b05      	cmp	r3, #5
 800c336:	d11e      	bne.n	800c376 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 800c338:	68fb      	ldr	r3, [r7, #12]
 800c33a:	2200      	movs	r2, #0
 800c33c:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
        USBD_LL_StallEP(pdev, 0U);
 800c340:	2100      	movs	r1, #0
 800c342:	68f8      	ldr	r0, [r7, #12]
 800c344:	f001 fba4 	bl	800da90 <USBD_LL_StallEP>
 800c348:	e015      	b.n	800c376 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if((pdev->pClass->DataOut != NULL) &&
 800c34a:	68fb      	ldr	r3, [r7, #12]
 800c34c:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800c350:	699b      	ldr	r3, [r3, #24]
 800c352:	2b00      	cmp	r3, #0
 800c354:	d00d      	beq.n	800c372 <USBD_LL_DataOutStage+0xd4>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 800c356:	68fb      	ldr	r3, [r7, #12]
 800c358:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
  else if((pdev->pClass->DataOut != NULL) &&
 800c35c:	2b03      	cmp	r3, #3
 800c35e:	d108      	bne.n	800c372 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 800c360:	68fb      	ldr	r3, [r7, #12]
 800c362:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800c366:	699b      	ldr	r3, [r3, #24]
 800c368:	7afa      	ldrb	r2, [r7, #11]
 800c36a:	4611      	mov	r1, r2
 800c36c:	68f8      	ldr	r0, [r7, #12]
 800c36e:	4798      	blx	r3
 800c370:	e001      	b.n	800c376 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800c372:	2302      	movs	r3, #2
 800c374:	e000      	b.n	800c378 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 800c376:	2300      	movs	r3, #0
}
 800c378:	4618      	mov	r0, r3
 800c37a:	3718      	adds	r7, #24
 800c37c:	46bd      	mov	sp, r7
 800c37e:	bd80      	pop	{r7, pc}

0800c380 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev, uint8_t epnum,
                                       uint8_t *pdata)
{
 800c380:	b580      	push	{r7, lr}
 800c382:	b086      	sub	sp, #24
 800c384:	af00      	add	r7, sp, #0
 800c386:	60f8      	str	r0, [r7, #12]
 800c388:	460b      	mov	r3, r1
 800c38a:	607a      	str	r2, [r7, #4]
 800c38c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if(epnum == 0U)
 800c38e:	7afb      	ldrb	r3, [r7, #11]
 800c390:	2b00      	cmp	r3, #0
 800c392:	d17f      	bne.n	800c494 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 800c394:	68fb      	ldr	r3, [r7, #12]
 800c396:	3314      	adds	r3, #20
 800c398:	617b      	str	r3, [r7, #20]

    if ( pdev->ep0_state == USBD_EP0_DATA_IN)
 800c39a:	68fb      	ldr	r3, [r7, #12]
 800c39c:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 800c3a0:	2b02      	cmp	r3, #2
 800c3a2:	d15c      	bne.n	800c45e <USBD_LL_DataInStage+0xde>
    {
      if(pep->rem_length > pep->maxpacket)
 800c3a4:	697b      	ldr	r3, [r7, #20]
 800c3a6:	68da      	ldr	r2, [r3, #12]
 800c3a8:	697b      	ldr	r3, [r7, #20]
 800c3aa:	691b      	ldr	r3, [r3, #16]
 800c3ac:	429a      	cmp	r2, r3
 800c3ae:	d915      	bls.n	800c3dc <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 800c3b0:	697b      	ldr	r3, [r7, #20]
 800c3b2:	68da      	ldr	r2, [r3, #12]
 800c3b4:	697b      	ldr	r3, [r7, #20]
 800c3b6:	691b      	ldr	r3, [r3, #16]
 800c3b8:	1ad2      	subs	r2, r2, r3
 800c3ba:	697b      	ldr	r3, [r7, #20]
 800c3bc:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData (pdev, pdata, (uint16_t)pep->rem_length);
 800c3be:	697b      	ldr	r3, [r7, #20]
 800c3c0:	68db      	ldr	r3, [r3, #12]
 800c3c2:	b29b      	uxth	r3, r3
 800c3c4:	461a      	mov	r2, r3
 800c3c6:	6879      	ldr	r1, [r7, #4]
 800c3c8:	68f8      	ldr	r0, [r7, #12]
 800c3ca:	f000 fe81 	bl	800d0d0 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 800c3ce:	2300      	movs	r3, #0
 800c3d0:	2200      	movs	r2, #0
 800c3d2:	2100      	movs	r1, #0
 800c3d4:	68f8      	ldr	r0, [r7, #12]
 800c3d6:	f001 fc07 	bl	800dbe8 <USBD_LL_PrepareReceive>
 800c3da:	e04e      	b.n	800c47a <USBD_LL_DataInStage+0xfa>
      }
      else
      { /* last packet is MPS multiple, so send ZLP packet */
        if((pep->total_length % pep->maxpacket == 0U) &&
 800c3dc:	697b      	ldr	r3, [r7, #20]
 800c3de:	689b      	ldr	r3, [r3, #8]
 800c3e0:	697a      	ldr	r2, [r7, #20]
 800c3e2:	6912      	ldr	r2, [r2, #16]
 800c3e4:	fbb3 f1f2 	udiv	r1, r3, r2
 800c3e8:	fb02 f201 	mul.w	r2, r2, r1
 800c3ec:	1a9b      	subs	r3, r3, r2
 800c3ee:	2b00      	cmp	r3, #0
 800c3f0:	d11c      	bne.n	800c42c <USBD_LL_DataInStage+0xac>
           (pep->total_length >= pep->maxpacket) &&
 800c3f2:	697b      	ldr	r3, [r7, #20]
 800c3f4:	689a      	ldr	r2, [r3, #8]
 800c3f6:	697b      	ldr	r3, [r7, #20]
 800c3f8:	691b      	ldr	r3, [r3, #16]
        if((pep->total_length % pep->maxpacket == 0U) &&
 800c3fa:	429a      	cmp	r2, r3
 800c3fc:	d316      	bcc.n	800c42c <USBD_LL_DataInStage+0xac>
           (pep->total_length < pdev->ep0_data_len))
 800c3fe:	697b      	ldr	r3, [r7, #20]
 800c400:	689a      	ldr	r2, [r3, #8]
 800c402:	68fb      	ldr	r3, [r7, #12]
 800c404:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
           (pep->total_length >= pep->maxpacket) &&
 800c408:	429a      	cmp	r2, r3
 800c40a:	d20f      	bcs.n	800c42c <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800c40c:	2200      	movs	r2, #0
 800c40e:	2100      	movs	r1, #0
 800c410:	68f8      	ldr	r0, [r7, #12]
 800c412:	f000 fe5d 	bl	800d0d0 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800c416:	68fb      	ldr	r3, [r7, #12]
 800c418:	2200      	movs	r2, #0
 800c41a:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 800c41e:	2300      	movs	r3, #0
 800c420:	2200      	movs	r2, #0
 800c422:	2100      	movs	r1, #0
 800c424:	68f8      	ldr	r0, [r7, #12]
 800c426:	f001 fbdf 	bl	800dbe8 <USBD_LL_PrepareReceive>
 800c42a:	e026      	b.n	800c47a <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if((pdev->pClass->EP0_TxSent != NULL)&&
 800c42c:	68fb      	ldr	r3, [r7, #12]
 800c42e:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800c432:	68db      	ldr	r3, [r3, #12]
 800c434:	2b00      	cmp	r3, #0
 800c436:	d00a      	beq.n	800c44e <USBD_LL_DataInStage+0xce>
             (pdev->dev_state == USBD_STATE_CONFIGURED))
 800c438:	68fb      	ldr	r3, [r7, #12]
 800c43a:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
          if((pdev->pClass->EP0_TxSent != NULL)&&
 800c43e:	2b03      	cmp	r3, #3
 800c440:	d105      	bne.n	800c44e <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800c442:	68fb      	ldr	r3, [r7, #12]
 800c444:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800c448:	68db      	ldr	r3, [r3, #12]
 800c44a:	68f8      	ldr	r0, [r7, #12]
 800c44c:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 800c44e:	2180      	movs	r1, #128	; 0x80
 800c450:	68f8      	ldr	r0, [r7, #12]
 800c452:	f001 fb1d 	bl	800da90 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 800c456:	68f8      	ldr	r0, [r7, #12]
 800c458:	f000 fe8f 	bl	800d17a <USBD_CtlReceiveStatus>
 800c45c:	e00d      	b.n	800c47a <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800c45e:	68fb      	ldr	r3, [r7, #12]
 800c460:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 800c464:	2b04      	cmp	r3, #4
 800c466:	d004      	beq.n	800c472 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 800c468:	68fb      	ldr	r3, [r7, #12]
 800c46a:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800c46e:	2b00      	cmp	r3, #0
 800c470:	d103      	bne.n	800c47a <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 800c472:	2180      	movs	r1, #128	; 0x80
 800c474:	68f8      	ldr	r0, [r7, #12]
 800c476:	f001 fb0b 	bl	800da90 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 800c47a:	68fb      	ldr	r3, [r7, #12]
 800c47c:	f893 3278 	ldrb.w	r3, [r3, #632]	; 0x278
 800c480:	2b01      	cmp	r3, #1
 800c482:	d11d      	bne.n	800c4c0 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 800c484:	68f8      	ldr	r0, [r7, #12]
 800c486:	f7ff fe82 	bl	800c18e <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800c48a:	68fb      	ldr	r3, [r7, #12]
 800c48c:	2200      	movs	r2, #0
 800c48e:	f883 2278 	strb.w	r2, [r3, #632]	; 0x278
 800c492:	e015      	b.n	800c4c0 <USBD_LL_DataInStage+0x140>
    }
  }
  else if((pdev->pClass->DataIn != NULL) &&
 800c494:	68fb      	ldr	r3, [r7, #12]
 800c496:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800c49a:	695b      	ldr	r3, [r3, #20]
 800c49c:	2b00      	cmp	r3, #0
 800c49e:	d00d      	beq.n	800c4bc <USBD_LL_DataInStage+0x13c>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 800c4a0:	68fb      	ldr	r3, [r7, #12]
 800c4a2:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
  else if((pdev->pClass->DataIn != NULL) &&
 800c4a6:	2b03      	cmp	r3, #3
 800c4a8:	d108      	bne.n	800c4bc <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 800c4aa:	68fb      	ldr	r3, [r7, #12]
 800c4ac:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800c4b0:	695b      	ldr	r3, [r3, #20]
 800c4b2:	7afa      	ldrb	r2, [r7, #11]
 800c4b4:	4611      	mov	r1, r2
 800c4b6:	68f8      	ldr	r0, [r7, #12]
 800c4b8:	4798      	blx	r3
 800c4ba:	e001      	b.n	800c4c0 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800c4bc:	2302      	movs	r3, #2
 800c4be:	e000      	b.n	800c4c2 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 800c4c0:	2300      	movs	r3, #0
}
 800c4c2:	4618      	mov	r0, r3
 800c4c4:	3718      	adds	r7, #24
 800c4c6:	46bd      	mov	sp, r7
 800c4c8:	bd80      	pop	{r7, pc}

0800c4ca <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef  *pdev)
{
 800c4ca:	b580      	push	{r7, lr}
 800c4cc:	b082      	sub	sp, #8
 800c4ce:	af00      	add	r7, sp, #0
 800c4d0:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800c4d2:	2340      	movs	r3, #64	; 0x40
 800c4d4:	2200      	movs	r2, #0
 800c4d6:	2100      	movs	r1, #0
 800c4d8:	6878      	ldr	r0, [r7, #4]
 800c4da:	f001 fa94 	bl	800da06 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800c4de:	687b      	ldr	r3, [r7, #4]
 800c4e0:	2201      	movs	r2, #1
 800c4e2:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800c4e6:	687b      	ldr	r3, [r7, #4]
 800c4e8:	2240      	movs	r2, #64	; 0x40
 800c4ea:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800c4ee:	2340      	movs	r3, #64	; 0x40
 800c4f0:	2200      	movs	r2, #0
 800c4f2:	2180      	movs	r1, #128	; 0x80
 800c4f4:	6878      	ldr	r0, [r7, #4]
 800c4f6:	f001 fa86 	bl	800da06 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800c4fa:	687b      	ldr	r3, [r7, #4]
 800c4fc:	2201      	movs	r2, #1
 800c4fe:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800c500:	687b      	ldr	r3, [r7, #4]
 800c502:	2240      	movs	r2, #64	; 0x40
 800c504:	625a      	str	r2, [r3, #36]	; 0x24
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800c506:	687b      	ldr	r3, [r7, #4]
 800c508:	2201      	movs	r2, #1
 800c50a:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->ep0_state = USBD_EP0_IDLE;
 800c50e:	687b      	ldr	r3, [r7, #4]
 800c510:	2200      	movs	r2, #0
 800c512:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->dev_config= 0U;
 800c516:	687b      	ldr	r3, [r7, #4]
 800c518:	2200      	movs	r2, #0
 800c51a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800c51c:	687b      	ldr	r3, [r7, #4]
 800c51e:	2200      	movs	r2, #0
 800c520:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c

  if (pdev->pClassData)
 800c524:	687b      	ldr	r3, [r7, #4]
 800c526:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800c52a:	2b00      	cmp	r3, #0
 800c52c:	d009      	beq.n	800c542 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800c52e:	687b      	ldr	r3, [r7, #4]
 800c530:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800c534:	685b      	ldr	r3, [r3, #4]
 800c536:	687a      	ldr	r2, [r7, #4]
 800c538:	6852      	ldr	r2, [r2, #4]
 800c53a:	b2d2      	uxtb	r2, r2
 800c53c:	4611      	mov	r1, r2
 800c53e:	6878      	ldr	r0, [r7, #4]
 800c540:	4798      	blx	r3
  }

  return USBD_OK;
 800c542:	2300      	movs	r3, #0
}
 800c544:	4618      	mov	r0, r3
 800c546:	3708      	adds	r7, #8
 800c548:	46bd      	mov	sp, r7
 800c54a:	bd80      	pop	{r7, pc}

0800c54c <USBD_LL_SetSpeed>:
*         Handle Reset event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef  *pdev, USBD_SpeedTypeDef speed)
{
 800c54c:	b480      	push	{r7}
 800c54e:	b083      	sub	sp, #12
 800c550:	af00      	add	r7, sp, #0
 800c552:	6078      	str	r0, [r7, #4]
 800c554:	460b      	mov	r3, r1
 800c556:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800c558:	687b      	ldr	r3, [r7, #4]
 800c55a:	78fa      	ldrb	r2, [r7, #3]
 800c55c:	741a      	strb	r2, [r3, #16]
  return USBD_OK;
 800c55e:	2300      	movs	r3, #0
}
 800c560:	4618      	mov	r0, r3
 800c562:	370c      	adds	r7, #12
 800c564:	46bd      	mov	sp, r7
 800c566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c56a:	4770      	bx	lr

0800c56c <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef  *pdev)
{
 800c56c:	b480      	push	{r7}
 800c56e:	b083      	sub	sp, #12
 800c570:	af00      	add	r7, sp, #0
 800c572:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 800c574:	687b      	ldr	r3, [r7, #4]
 800c576:	f893 2274 	ldrb.w	r2, [r3, #628]	; 0x274
 800c57a:	687b      	ldr	r3, [r7, #4]
 800c57c:	f883 2275 	strb.w	r2, [r3, #629]	; 0x275
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800c580:	687b      	ldr	r3, [r7, #4]
 800c582:	2204      	movs	r2, #4
 800c584:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  return USBD_OK;
 800c588:	2300      	movs	r3, #0
}
 800c58a:	4618      	mov	r0, r3
 800c58c:	370c      	adds	r7, #12
 800c58e:	46bd      	mov	sp, r7
 800c590:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c594:	4770      	bx	lr

0800c596 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef  *pdev)
{
 800c596:	b480      	push	{r7}
 800c598:	b083      	sub	sp, #12
 800c59a:	af00      	add	r7, sp, #0
 800c59c:	6078      	str	r0, [r7, #4]
  pdev->dev_state = pdev->dev_old_state;
 800c59e:	687b      	ldr	r3, [r7, #4]
 800c5a0:	f893 2275 	ldrb.w	r2, [r3, #629]	; 0x275
 800c5a4:	687b      	ldr	r3, [r7, #4]
 800c5a6:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  return USBD_OK;
 800c5aa:	2300      	movs	r3, #0
}
 800c5ac:	4618      	mov	r0, r3
 800c5ae:	370c      	adds	r7, #12
 800c5b0:	46bd      	mov	sp, r7
 800c5b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5b6:	4770      	bx	lr

0800c5b8 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef  *pdev)
{
 800c5b8:	b580      	push	{r7, lr}
 800c5ba:	b082      	sub	sp, #8
 800c5bc:	af00      	add	r7, sp, #0
 800c5be:	6078      	str	r0, [r7, #4]
  if(pdev->dev_state == USBD_STATE_CONFIGURED)
 800c5c0:	687b      	ldr	r3, [r7, #4]
 800c5c2:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800c5c6:	2b03      	cmp	r3, #3
 800c5c8:	d10b      	bne.n	800c5e2 <USBD_LL_SOF+0x2a>
  {
    if(pdev->pClass->SOF != NULL)
 800c5ca:	687b      	ldr	r3, [r7, #4]
 800c5cc:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800c5d0:	69db      	ldr	r3, [r3, #28]
 800c5d2:	2b00      	cmp	r3, #0
 800c5d4:	d005      	beq.n	800c5e2 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800c5d6:	687b      	ldr	r3, [r7, #4]
 800c5d8:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800c5dc:	69db      	ldr	r3, [r3, #28]
 800c5de:	6878      	ldr	r0, [r7, #4]
 800c5e0:	4798      	blx	r3
    }
  }
  return USBD_OK;
 800c5e2:	2300      	movs	r3, #0
}
 800c5e4:	4618      	mov	r0, r3
 800c5e6:	3708      	adds	r7, #8
 800c5e8:	46bd      	mov	sp, r7
 800c5ea:	bd80      	pop	{r7, pc}

0800c5ec <USBD_LL_IsoINIncomplete>:
*         Handle iso in incomplete event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef  *pdev, uint8_t epnum)
{
 800c5ec:	b480      	push	{r7}
 800c5ee:	b083      	sub	sp, #12
 800c5f0:	af00      	add	r7, sp, #0
 800c5f2:	6078      	str	r0, [r7, #4]
 800c5f4:	460b      	mov	r3, r1
 800c5f6:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 800c5f8:	2300      	movs	r3, #0
}
 800c5fa:	4618      	mov	r0, r3
 800c5fc:	370c      	adds	r7, #12
 800c5fe:	46bd      	mov	sp, r7
 800c600:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c604:	4770      	bx	lr

0800c606 <USBD_LL_IsoOUTIncomplete>:
*         Handle iso out incomplete event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef  *pdev, uint8_t epnum)
{
 800c606:	b480      	push	{r7}
 800c608:	b083      	sub	sp, #12
 800c60a:	af00      	add	r7, sp, #0
 800c60c:	6078      	str	r0, [r7, #4]
 800c60e:	460b      	mov	r3, r1
 800c610:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 800c612:	2300      	movs	r3, #0
}
 800c614:	4618      	mov	r0, r3
 800c616:	370c      	adds	r7, #12
 800c618:	46bd      	mov	sp, r7
 800c61a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c61e:	4770      	bx	lr

0800c620 <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef  *pdev)
{
 800c620:	b480      	push	{r7}
 800c622:	b083      	sub	sp, #12
 800c624:	af00      	add	r7, sp, #0
 800c626:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800c628:	2300      	movs	r3, #0
}
 800c62a:	4618      	mov	r0, r3
 800c62c:	370c      	adds	r7, #12
 800c62e:	46bd      	mov	sp, r7
 800c630:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c634:	4770      	bx	lr

0800c636 <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef  *pdev)
{
 800c636:	b580      	push	{r7, lr}
 800c638:	b082      	sub	sp, #8
 800c63a:	af00      	add	r7, sp, #0
 800c63c:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800c63e:	687b      	ldr	r3, [r7, #4]
 800c640:	2201      	movs	r2, #1
 800c642:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800c646:	687b      	ldr	r3, [r7, #4]
 800c648:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800c64c:	685b      	ldr	r3, [r3, #4]
 800c64e:	687a      	ldr	r2, [r7, #4]
 800c650:	6852      	ldr	r2, [r2, #4]
 800c652:	b2d2      	uxtb	r2, r2
 800c654:	4611      	mov	r1, r2
 800c656:	6878      	ldr	r0, [r7, #4]
 800c658:	4798      	blx	r3

  return USBD_OK;
 800c65a:	2300      	movs	r3, #0
}
 800c65c:	4618      	mov	r0, r3
 800c65e:	3708      	adds	r7, #8
 800c660:	46bd      	mov	sp, r7
 800c662:	bd80      	pop	{r7, pc}

0800c664 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 800c664:	b580      	push	{r7, lr}
 800c666:	b084      	sub	sp, #16
 800c668:	af00      	add	r7, sp, #0
 800c66a:	6078      	str	r0, [r7, #4]
 800c66c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c66e:	2300      	movs	r3, #0
 800c670:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c672:	683b      	ldr	r3, [r7, #0]
 800c674:	781b      	ldrb	r3, [r3, #0]
 800c676:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800c67a:	2b20      	cmp	r3, #32
 800c67c:	d004      	beq.n	800c688 <USBD_StdDevReq+0x24>
 800c67e:	2b40      	cmp	r3, #64	; 0x40
 800c680:	d002      	beq.n	800c688 <USBD_StdDevReq+0x24>
 800c682:	2b00      	cmp	r3, #0
 800c684:	d008      	beq.n	800c698 <USBD_StdDevReq+0x34>
 800c686:	e04c      	b.n	800c722 <USBD_StdDevReq+0xbe>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    pdev->pClass->Setup(pdev, req);
 800c688:	687b      	ldr	r3, [r7, #4]
 800c68a:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800c68e:	689b      	ldr	r3, [r3, #8]
 800c690:	6839      	ldr	r1, [r7, #0]
 800c692:	6878      	ldr	r0, [r7, #4]
 800c694:	4798      	blx	r3
    break;
 800c696:	e049      	b.n	800c72c <USBD_StdDevReq+0xc8>

  case USB_REQ_TYPE_STANDARD:

    switch (req->bRequest)
 800c698:	683b      	ldr	r3, [r7, #0]
 800c69a:	785b      	ldrb	r3, [r3, #1]
 800c69c:	2b09      	cmp	r3, #9
 800c69e:	d83a      	bhi.n	800c716 <USBD_StdDevReq+0xb2>
 800c6a0:	a201      	add	r2, pc, #4	; (adr r2, 800c6a8 <USBD_StdDevReq+0x44>)
 800c6a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c6a6:	bf00      	nop
 800c6a8:	0800c6f9 	.word	0x0800c6f9
 800c6ac:	0800c70d 	.word	0x0800c70d
 800c6b0:	0800c717 	.word	0x0800c717
 800c6b4:	0800c703 	.word	0x0800c703
 800c6b8:	0800c717 	.word	0x0800c717
 800c6bc:	0800c6db 	.word	0x0800c6db
 800c6c0:	0800c6d1 	.word	0x0800c6d1
 800c6c4:	0800c717 	.word	0x0800c717
 800c6c8:	0800c6ef 	.word	0x0800c6ef
 800c6cc:	0800c6e5 	.word	0x0800c6e5
    {
    case USB_REQ_GET_DESCRIPTOR:

      USBD_GetDescriptor (pdev, req);
 800c6d0:	6839      	ldr	r1, [r7, #0]
 800c6d2:	6878      	ldr	r0, [r7, #4]
 800c6d4:	f000 f9d2 	bl	800ca7c <USBD_GetDescriptor>
      break;
 800c6d8:	e022      	b.n	800c720 <USBD_StdDevReq+0xbc>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress (pdev, req);
 800c6da:	6839      	ldr	r1, [r7, #0]
 800c6dc:	6878      	ldr	r0, [r7, #4]
 800c6de:	f000 fac7 	bl	800cc70 <USBD_SetAddress>
      break;
 800c6e2:	e01d      	b.n	800c720 <USBD_StdDevReq+0xbc>

    case USB_REQ_SET_CONFIGURATION:
      USBD_SetConfig (pdev, req);
 800c6e4:	6839      	ldr	r1, [r7, #0]
 800c6e6:	6878      	ldr	r0, [r7, #4]
 800c6e8:	f000 fb04 	bl	800ccf4 <USBD_SetConfig>
      break;
 800c6ec:	e018      	b.n	800c720 <USBD_StdDevReq+0xbc>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig (pdev, req);
 800c6ee:	6839      	ldr	r1, [r7, #0]
 800c6f0:	6878      	ldr	r0, [r7, #4]
 800c6f2:	f000 fb8d 	bl	800ce10 <USBD_GetConfig>
      break;
 800c6f6:	e013      	b.n	800c720 <USBD_StdDevReq+0xbc>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus (pdev, req);
 800c6f8:	6839      	ldr	r1, [r7, #0]
 800c6fa:	6878      	ldr	r0, [r7, #4]
 800c6fc:	f000 fbbc 	bl	800ce78 <USBD_GetStatus>
      break;
 800c700:	e00e      	b.n	800c720 <USBD_StdDevReq+0xbc>


    case USB_REQ_SET_FEATURE:
      USBD_SetFeature (pdev, req);
 800c702:	6839      	ldr	r1, [r7, #0]
 800c704:	6878      	ldr	r0, [r7, #4]
 800c706:	f000 fbea 	bl	800cede <USBD_SetFeature>
      break;
 800c70a:	e009      	b.n	800c720 <USBD_StdDevReq+0xbc>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature (pdev, req);
 800c70c:	6839      	ldr	r1, [r7, #0]
 800c70e:	6878      	ldr	r0, [r7, #4]
 800c710:	f000 fbf9 	bl	800cf06 <USBD_ClrFeature>
      break;
 800c714:	e004      	b.n	800c720 <USBD_StdDevReq+0xbc>

    default:
      USBD_CtlError(pdev, req);
 800c716:	6839      	ldr	r1, [r7, #0]
 800c718:	6878      	ldr	r0, [r7, #4]
 800c71a:	f000 fc52 	bl	800cfc2 <USBD_CtlError>
      break;
 800c71e:	bf00      	nop
    }
    break;
 800c720:	e004      	b.n	800c72c <USBD_StdDevReq+0xc8>

  default:
    USBD_CtlError(pdev, req);
 800c722:	6839      	ldr	r1, [r7, #0]
 800c724:	6878      	ldr	r0, [r7, #4]
 800c726:	f000 fc4c 	bl	800cfc2 <USBD_CtlError>
    break;
 800c72a:	bf00      	nop
  }

  return ret;
 800c72c:	7bfb      	ldrb	r3, [r7, #15]
}
 800c72e:	4618      	mov	r0, r3
 800c730:	3710      	adds	r7, #16
 800c732:	46bd      	mov	sp, r7
 800c734:	bd80      	pop	{r7, pc}
 800c736:	bf00      	nop

0800c738 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 800c738:	b580      	push	{r7, lr}
 800c73a:	b084      	sub	sp, #16
 800c73c:	af00      	add	r7, sp, #0
 800c73e:	6078      	str	r0, [r7, #4]
 800c740:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c742:	2300      	movs	r3, #0
 800c744:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c746:	683b      	ldr	r3, [r7, #0]
 800c748:	781b      	ldrb	r3, [r3, #0]
 800c74a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800c74e:	2b20      	cmp	r3, #32
 800c750:	d003      	beq.n	800c75a <USBD_StdItfReq+0x22>
 800c752:	2b40      	cmp	r3, #64	; 0x40
 800c754:	d001      	beq.n	800c75a <USBD_StdItfReq+0x22>
 800c756:	2b00      	cmp	r3, #0
 800c758:	d12a      	bne.n	800c7b0 <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 800c75a:	687b      	ldr	r3, [r7, #4]
 800c75c:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800c760:	3b01      	subs	r3, #1
 800c762:	2b02      	cmp	r3, #2
 800c764:	d81d      	bhi.n	800c7a2 <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800c766:	683b      	ldr	r3, [r7, #0]
 800c768:	889b      	ldrh	r3, [r3, #4]
 800c76a:	b2db      	uxtb	r3, r3
 800c76c:	2b01      	cmp	r3, #1
 800c76e:	d813      	bhi.n	800c798 <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup (pdev, req);
 800c770:	687b      	ldr	r3, [r7, #4]
 800c772:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800c776:	689b      	ldr	r3, [r3, #8]
 800c778:	6839      	ldr	r1, [r7, #0]
 800c77a:	6878      	ldr	r0, [r7, #4]
 800c77c:	4798      	blx	r3
 800c77e:	4603      	mov	r3, r0
 800c780:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 800c782:	683b      	ldr	r3, [r7, #0]
 800c784:	88db      	ldrh	r3, [r3, #6]
 800c786:	2b00      	cmp	r3, #0
 800c788:	d110      	bne.n	800c7ac <USBD_StdItfReq+0x74>
 800c78a:	7bfb      	ldrb	r3, [r7, #15]
 800c78c:	2b00      	cmp	r3, #0
 800c78e:	d10d      	bne.n	800c7ac <USBD_StdItfReq+0x74>
        {
          USBD_CtlSendStatus(pdev);
 800c790:	6878      	ldr	r0, [r7, #4]
 800c792:	f000 fcdf 	bl	800d154 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 800c796:	e009      	b.n	800c7ac <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 800c798:	6839      	ldr	r1, [r7, #0]
 800c79a:	6878      	ldr	r0, [r7, #4]
 800c79c:	f000 fc11 	bl	800cfc2 <USBD_CtlError>
      break;
 800c7a0:	e004      	b.n	800c7ac <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 800c7a2:	6839      	ldr	r1, [r7, #0]
 800c7a4:	6878      	ldr	r0, [r7, #4]
 800c7a6:	f000 fc0c 	bl	800cfc2 <USBD_CtlError>
      break;
 800c7aa:	e000      	b.n	800c7ae <USBD_StdItfReq+0x76>
      break;
 800c7ac:	bf00      	nop
    }
    break;
 800c7ae:	e004      	b.n	800c7ba <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 800c7b0:	6839      	ldr	r1, [r7, #0]
 800c7b2:	6878      	ldr	r0, [r7, #4]
 800c7b4:	f000 fc05 	bl	800cfc2 <USBD_CtlError>
    break;
 800c7b8:	bf00      	nop
  }

  return USBD_OK;
 800c7ba:	2300      	movs	r3, #0
}
 800c7bc:	4618      	mov	r0, r3
 800c7be:	3710      	adds	r7, #16
 800c7c0:	46bd      	mov	sp, r7
 800c7c2:	bd80      	pop	{r7, pc}

0800c7c4 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 800c7c4:	b580      	push	{r7, lr}
 800c7c6:	b084      	sub	sp, #16
 800c7c8:	af00      	add	r7, sp, #0
 800c7ca:	6078      	str	r0, [r7, #4]
 800c7cc:	6039      	str	r1, [r7, #0]

  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800c7ce:	2300      	movs	r3, #0
 800c7d0:	73fb      	strb	r3, [r7, #15]
  USBD_EndpointTypeDef   *pep;
  ep_addr  = LOBYTE(req->wIndex);
 800c7d2:	683b      	ldr	r3, [r7, #0]
 800c7d4:	889b      	ldrh	r3, [r3, #4]
 800c7d6:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c7d8:	683b      	ldr	r3, [r7, #0]
 800c7da:	781b      	ldrb	r3, [r3, #0]
 800c7dc:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800c7e0:	2b20      	cmp	r3, #32
 800c7e2:	d004      	beq.n	800c7ee <USBD_StdEPReq+0x2a>
 800c7e4:	2b40      	cmp	r3, #64	; 0x40
 800c7e6:	d002      	beq.n	800c7ee <USBD_StdEPReq+0x2a>
 800c7e8:	2b00      	cmp	r3, #0
 800c7ea:	d008      	beq.n	800c7fe <USBD_StdEPReq+0x3a>
 800c7ec:	e13b      	b.n	800ca66 <USBD_StdEPReq+0x2a2>
  {

  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    pdev->pClass->Setup (pdev, req);
 800c7ee:	687b      	ldr	r3, [r7, #4]
 800c7f0:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800c7f4:	689b      	ldr	r3, [r3, #8]
 800c7f6:	6839      	ldr	r1, [r7, #0]
 800c7f8:	6878      	ldr	r0, [r7, #4]
 800c7fa:	4798      	blx	r3
    break;
 800c7fc:	e138      	b.n	800ca70 <USBD_StdEPReq+0x2ac>

  case USB_REQ_TYPE_STANDARD:
    /* Check if it is a class request */
    if ((req->bmRequest & 0x60U) == 0x20U)
 800c7fe:	683b      	ldr	r3, [r7, #0]
 800c800:	781b      	ldrb	r3, [r3, #0]
 800c802:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800c806:	2b20      	cmp	r3, #32
 800c808:	d10a      	bne.n	800c820 <USBD_StdEPReq+0x5c>
    {
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup (pdev, req);
 800c80a:	687b      	ldr	r3, [r7, #4]
 800c80c:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800c810:	689b      	ldr	r3, [r3, #8]
 800c812:	6839      	ldr	r1, [r7, #0]
 800c814:	6878      	ldr	r0, [r7, #4]
 800c816:	4798      	blx	r3
 800c818:	4603      	mov	r3, r0
 800c81a:	73fb      	strb	r3, [r7, #15]

      return ret;
 800c81c:	7bfb      	ldrb	r3, [r7, #15]
 800c81e:	e128      	b.n	800ca72 <USBD_StdEPReq+0x2ae>
    }

    switch (req->bRequest)
 800c820:	683b      	ldr	r3, [r7, #0]
 800c822:	785b      	ldrb	r3, [r3, #1]
 800c824:	2b01      	cmp	r3, #1
 800c826:	d03e      	beq.n	800c8a6 <USBD_StdEPReq+0xe2>
 800c828:	2b03      	cmp	r3, #3
 800c82a:	d002      	beq.n	800c832 <USBD_StdEPReq+0x6e>
 800c82c:	2b00      	cmp	r3, #0
 800c82e:	d070      	beq.n	800c912 <USBD_StdEPReq+0x14e>
 800c830:	e113      	b.n	800ca5a <USBD_StdEPReq+0x296>
    {

    case USB_REQ_SET_FEATURE :

      switch (pdev->dev_state)
 800c832:	687b      	ldr	r3, [r7, #4]
 800c834:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800c838:	2b02      	cmp	r3, #2
 800c83a:	d002      	beq.n	800c842 <USBD_StdEPReq+0x7e>
 800c83c:	2b03      	cmp	r3, #3
 800c83e:	d015      	beq.n	800c86c <USBD_StdEPReq+0xa8>
 800c840:	e02b      	b.n	800c89a <USBD_StdEPReq+0xd6>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c842:	7bbb      	ldrb	r3, [r7, #14]
 800c844:	2b00      	cmp	r3, #0
 800c846:	d00c      	beq.n	800c862 <USBD_StdEPReq+0x9e>
 800c848:	7bbb      	ldrb	r3, [r7, #14]
 800c84a:	2b80      	cmp	r3, #128	; 0x80
 800c84c:	d009      	beq.n	800c862 <USBD_StdEPReq+0x9e>
        {
          USBD_LL_StallEP(pdev, ep_addr);
 800c84e:	7bbb      	ldrb	r3, [r7, #14]
 800c850:	4619      	mov	r1, r3
 800c852:	6878      	ldr	r0, [r7, #4]
 800c854:	f001 f91c 	bl	800da90 <USBD_LL_StallEP>
          USBD_LL_StallEP(pdev, 0x80U);
 800c858:	2180      	movs	r1, #128	; 0x80
 800c85a:	6878      	ldr	r0, [r7, #4]
 800c85c:	f001 f918 	bl	800da90 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800c860:	e020      	b.n	800c8a4 <USBD_StdEPReq+0xe0>
          USBD_CtlError(pdev, req);
 800c862:	6839      	ldr	r1, [r7, #0]
 800c864:	6878      	ldr	r0, [r7, #4]
 800c866:	f000 fbac 	bl	800cfc2 <USBD_CtlError>
        break;
 800c86a:	e01b      	b.n	800c8a4 <USBD_StdEPReq+0xe0>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800c86c:	683b      	ldr	r3, [r7, #0]
 800c86e:	885b      	ldrh	r3, [r3, #2]
 800c870:	2b00      	cmp	r3, #0
 800c872:	d10e      	bne.n	800c892 <USBD_StdEPReq+0xce>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800c874:	7bbb      	ldrb	r3, [r7, #14]
 800c876:	2b00      	cmp	r3, #0
 800c878:	d00b      	beq.n	800c892 <USBD_StdEPReq+0xce>
 800c87a:	7bbb      	ldrb	r3, [r7, #14]
 800c87c:	2b80      	cmp	r3, #128	; 0x80
 800c87e:	d008      	beq.n	800c892 <USBD_StdEPReq+0xce>
 800c880:	683b      	ldr	r3, [r7, #0]
 800c882:	88db      	ldrh	r3, [r3, #6]
 800c884:	2b00      	cmp	r3, #0
 800c886:	d104      	bne.n	800c892 <USBD_StdEPReq+0xce>
          {
            USBD_LL_StallEP(pdev, ep_addr);
 800c888:	7bbb      	ldrb	r3, [r7, #14]
 800c88a:	4619      	mov	r1, r3
 800c88c:	6878      	ldr	r0, [r7, #4]
 800c88e:	f001 f8ff 	bl	800da90 <USBD_LL_StallEP>
          }
        }
        USBD_CtlSendStatus(pdev);
 800c892:	6878      	ldr	r0, [r7, #4]
 800c894:	f000 fc5e 	bl	800d154 <USBD_CtlSendStatus>

        break;
 800c898:	e004      	b.n	800c8a4 <USBD_StdEPReq+0xe0>

      default:
        USBD_CtlError(pdev, req);
 800c89a:	6839      	ldr	r1, [r7, #0]
 800c89c:	6878      	ldr	r0, [r7, #4]
 800c89e:	f000 fb90 	bl	800cfc2 <USBD_CtlError>
        break;
 800c8a2:	bf00      	nop
      }
      break;
 800c8a4:	e0de      	b.n	800ca64 <USBD_StdEPReq+0x2a0>

    case USB_REQ_CLEAR_FEATURE :

      switch (pdev->dev_state)
 800c8a6:	687b      	ldr	r3, [r7, #4]
 800c8a8:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800c8ac:	2b02      	cmp	r3, #2
 800c8ae:	d002      	beq.n	800c8b6 <USBD_StdEPReq+0xf2>
 800c8b0:	2b03      	cmp	r3, #3
 800c8b2:	d015      	beq.n	800c8e0 <USBD_StdEPReq+0x11c>
 800c8b4:	e026      	b.n	800c904 <USBD_StdEPReq+0x140>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c8b6:	7bbb      	ldrb	r3, [r7, #14]
 800c8b8:	2b00      	cmp	r3, #0
 800c8ba:	d00c      	beq.n	800c8d6 <USBD_StdEPReq+0x112>
 800c8bc:	7bbb      	ldrb	r3, [r7, #14]
 800c8be:	2b80      	cmp	r3, #128	; 0x80
 800c8c0:	d009      	beq.n	800c8d6 <USBD_StdEPReq+0x112>
        {
          USBD_LL_StallEP(pdev, ep_addr);
 800c8c2:	7bbb      	ldrb	r3, [r7, #14]
 800c8c4:	4619      	mov	r1, r3
 800c8c6:	6878      	ldr	r0, [r7, #4]
 800c8c8:	f001 f8e2 	bl	800da90 <USBD_LL_StallEP>
          USBD_LL_StallEP(pdev, 0x80U);
 800c8cc:	2180      	movs	r1, #128	; 0x80
 800c8ce:	6878      	ldr	r0, [r7, #4]
 800c8d0:	f001 f8de 	bl	800da90 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800c8d4:	e01c      	b.n	800c910 <USBD_StdEPReq+0x14c>
          USBD_CtlError(pdev, req);
 800c8d6:	6839      	ldr	r1, [r7, #0]
 800c8d8:	6878      	ldr	r0, [r7, #4]
 800c8da:	f000 fb72 	bl	800cfc2 <USBD_CtlError>
        break;
 800c8de:	e017      	b.n	800c910 <USBD_StdEPReq+0x14c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800c8e0:	683b      	ldr	r3, [r7, #0]
 800c8e2:	885b      	ldrh	r3, [r3, #2]
 800c8e4:	2b00      	cmp	r3, #0
 800c8e6:	d112      	bne.n	800c90e <USBD_StdEPReq+0x14a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 800c8e8:	7bbb      	ldrb	r3, [r7, #14]
 800c8ea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c8ee:	2b00      	cmp	r3, #0
 800c8f0:	d004      	beq.n	800c8fc <USBD_StdEPReq+0x138>
          {
            USBD_LL_ClearStallEP(pdev, ep_addr);
 800c8f2:	7bbb      	ldrb	r3, [r7, #14]
 800c8f4:	4619      	mov	r1, r3
 800c8f6:	6878      	ldr	r0, [r7, #4]
 800c8f8:	f001 f8e9 	bl	800dace <USBD_LL_ClearStallEP>
          }
          USBD_CtlSendStatus(pdev);
 800c8fc:	6878      	ldr	r0, [r7, #4]
 800c8fe:	f000 fc29 	bl	800d154 <USBD_CtlSendStatus>
        }
        break;
 800c902:	e004      	b.n	800c90e <USBD_StdEPReq+0x14a>

      default:
        USBD_CtlError(pdev, req);
 800c904:	6839      	ldr	r1, [r7, #0]
 800c906:	6878      	ldr	r0, [r7, #4]
 800c908:	f000 fb5b 	bl	800cfc2 <USBD_CtlError>
        break;
 800c90c:	e000      	b.n	800c910 <USBD_StdEPReq+0x14c>
        break;
 800c90e:	bf00      	nop
      }
      break;
 800c910:	e0a8      	b.n	800ca64 <USBD_StdEPReq+0x2a0>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 800c912:	687b      	ldr	r3, [r7, #4]
 800c914:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800c918:	2b02      	cmp	r3, #2
 800c91a:	d002      	beq.n	800c922 <USBD_StdEPReq+0x15e>
 800c91c:	2b03      	cmp	r3, #3
 800c91e:	d031      	beq.n	800c984 <USBD_StdEPReq+0x1c0>
 800c920:	e095      	b.n	800ca4e <USBD_StdEPReq+0x28a>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c922:	7bbb      	ldrb	r3, [r7, #14]
 800c924:	2b00      	cmp	r3, #0
 800c926:	d007      	beq.n	800c938 <USBD_StdEPReq+0x174>
 800c928:	7bbb      	ldrb	r3, [r7, #14]
 800c92a:	2b80      	cmp	r3, #128	; 0x80
 800c92c:	d004      	beq.n	800c938 <USBD_StdEPReq+0x174>
        {
          USBD_CtlError(pdev, req);
 800c92e:	6839      	ldr	r1, [r7, #0]
 800c930:	6878      	ldr	r0, [r7, #4]
 800c932:	f000 fb46 	bl	800cfc2 <USBD_CtlError>
          break;
 800c936:	e08f      	b.n	800ca58 <USBD_StdEPReq+0x294>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 800c938:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c93c:	2b00      	cmp	r3, #0
 800c93e:	da0b      	bge.n	800c958 <USBD_StdEPReq+0x194>
 800c940:	7bbb      	ldrb	r3, [r7, #14]
 800c942:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c946:	4613      	mov	r3, r2
 800c948:	009b      	lsls	r3, r3, #2
 800c94a:	4413      	add	r3, r2
 800c94c:	009b      	lsls	r3, r3, #2
 800c94e:	3310      	adds	r3, #16
 800c950:	687a      	ldr	r2, [r7, #4]
 800c952:	4413      	add	r3, r2
 800c954:	3304      	adds	r3, #4
 800c956:	e00a      	b.n	800c96e <USBD_StdEPReq+0x1aa>
          &pdev->ep_out[ep_addr & 0x7FU];
 800c958:	7bbb      	ldrb	r3, [r7, #14]
 800c95a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 800c95e:	4613      	mov	r3, r2
 800c960:	009b      	lsls	r3, r3, #2
 800c962:	4413      	add	r3, r2
 800c964:	009b      	lsls	r3, r3, #2
 800c966:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 800c96a:	687a      	ldr	r2, [r7, #4]
 800c96c:	4413      	add	r3, r2
 800c96e:	60bb      	str	r3, [r7, #8]

          pep->status = 0x0000U;
 800c970:	68bb      	ldr	r3, [r7, #8]
 800c972:	2200      	movs	r2, #0
 800c974:	601a      	str	r2, [r3, #0]

          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 800c976:	68bb      	ldr	r3, [r7, #8]
 800c978:	2202      	movs	r2, #2
 800c97a:	4619      	mov	r1, r3
 800c97c:	6878      	ldr	r0, [r7, #4]
 800c97e:	f000 fb8b 	bl	800d098 <USBD_CtlSendData>
          break;
 800c982:	e069      	b.n	800ca58 <USBD_StdEPReq+0x294>

      case USBD_STATE_CONFIGURED:
        if((ep_addr & 0x80U) == 0x80U)
 800c984:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c988:	2b00      	cmp	r3, #0
 800c98a:	da11      	bge.n	800c9b0 <USBD_StdEPReq+0x1ec>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800c98c:	7bbb      	ldrb	r3, [r7, #14]
 800c98e:	f003 020f 	and.w	r2, r3, #15
 800c992:	6879      	ldr	r1, [r7, #4]
 800c994:	4613      	mov	r3, r2
 800c996:	009b      	lsls	r3, r3, #2
 800c998:	4413      	add	r3, r2
 800c99a:	009b      	lsls	r3, r3, #2
 800c99c:	440b      	add	r3, r1
 800c99e:	3318      	adds	r3, #24
 800c9a0:	681b      	ldr	r3, [r3, #0]
 800c9a2:	2b00      	cmp	r3, #0
 800c9a4:	d117      	bne.n	800c9d6 <USBD_StdEPReq+0x212>
          {
            USBD_CtlError(pdev, req);
 800c9a6:	6839      	ldr	r1, [r7, #0]
 800c9a8:	6878      	ldr	r0, [r7, #4]
 800c9aa:	f000 fb0a 	bl	800cfc2 <USBD_CtlError>
            break;
 800c9ae:	e053      	b.n	800ca58 <USBD_StdEPReq+0x294>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800c9b0:	7bbb      	ldrb	r3, [r7, #14]
 800c9b2:	f003 020f 	and.w	r2, r3, #15
 800c9b6:	6879      	ldr	r1, [r7, #4]
 800c9b8:	4613      	mov	r3, r2
 800c9ba:	009b      	lsls	r3, r3, #2
 800c9bc:	4413      	add	r3, r2
 800c9be:	009b      	lsls	r3, r3, #2
 800c9c0:	440b      	add	r3, r1
 800c9c2:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800c9c6:	681b      	ldr	r3, [r3, #0]
 800c9c8:	2b00      	cmp	r3, #0
 800c9ca:	d104      	bne.n	800c9d6 <USBD_StdEPReq+0x212>
          {
            USBD_CtlError(pdev, req);
 800c9cc:	6839      	ldr	r1, [r7, #0]
 800c9ce:	6878      	ldr	r0, [r7, #4]
 800c9d0:	f000 faf7 	bl	800cfc2 <USBD_CtlError>
            break;
 800c9d4:	e040      	b.n	800ca58 <USBD_StdEPReq+0x294>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 800c9d6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c9da:	2b00      	cmp	r3, #0
 800c9dc:	da0b      	bge.n	800c9f6 <USBD_StdEPReq+0x232>
 800c9de:	7bbb      	ldrb	r3, [r7, #14]
 800c9e0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c9e4:	4613      	mov	r3, r2
 800c9e6:	009b      	lsls	r3, r3, #2
 800c9e8:	4413      	add	r3, r2
 800c9ea:	009b      	lsls	r3, r3, #2
 800c9ec:	3310      	adds	r3, #16
 800c9ee:	687a      	ldr	r2, [r7, #4]
 800c9f0:	4413      	add	r3, r2
 800c9f2:	3304      	adds	r3, #4
 800c9f4:	e00a      	b.n	800ca0c <USBD_StdEPReq+0x248>
          &pdev->ep_out[ep_addr & 0x7FU];
 800c9f6:	7bbb      	ldrb	r3, [r7, #14]
 800c9f8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 800c9fc:	4613      	mov	r3, r2
 800c9fe:	009b      	lsls	r3, r3, #2
 800ca00:	4413      	add	r3, r2
 800ca02:	009b      	lsls	r3, r3, #2
 800ca04:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 800ca08:	687a      	ldr	r2, [r7, #4]
 800ca0a:	4413      	add	r3, r2
 800ca0c:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800ca0e:	7bbb      	ldrb	r3, [r7, #14]
 800ca10:	2b00      	cmp	r3, #0
 800ca12:	d002      	beq.n	800ca1a <USBD_StdEPReq+0x256>
 800ca14:	7bbb      	ldrb	r3, [r7, #14]
 800ca16:	2b80      	cmp	r3, #128	; 0x80
 800ca18:	d103      	bne.n	800ca22 <USBD_StdEPReq+0x25e>
          {
            pep->status = 0x0000U;
 800ca1a:	68bb      	ldr	r3, [r7, #8]
 800ca1c:	2200      	movs	r2, #0
 800ca1e:	601a      	str	r2, [r3, #0]
 800ca20:	e00e      	b.n	800ca40 <USBD_StdEPReq+0x27c>
          }
          else if(USBD_LL_IsStallEP(pdev, ep_addr))
 800ca22:	7bbb      	ldrb	r3, [r7, #14]
 800ca24:	4619      	mov	r1, r3
 800ca26:	6878      	ldr	r0, [r7, #4]
 800ca28:	f001 f870 	bl	800db0c <USBD_LL_IsStallEP>
 800ca2c:	4603      	mov	r3, r0
 800ca2e:	2b00      	cmp	r3, #0
 800ca30:	d003      	beq.n	800ca3a <USBD_StdEPReq+0x276>
          {
            pep->status = 0x0001U;
 800ca32:	68bb      	ldr	r3, [r7, #8]
 800ca34:	2201      	movs	r2, #1
 800ca36:	601a      	str	r2, [r3, #0]
 800ca38:	e002      	b.n	800ca40 <USBD_StdEPReq+0x27c>
          }
          else
          {
            pep->status = 0x0000U;
 800ca3a:	68bb      	ldr	r3, [r7, #8]
 800ca3c:	2200      	movs	r2, #0
 800ca3e:	601a      	str	r2, [r3, #0]
          }

          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 800ca40:	68bb      	ldr	r3, [r7, #8]
 800ca42:	2202      	movs	r2, #2
 800ca44:	4619      	mov	r1, r3
 800ca46:	6878      	ldr	r0, [r7, #4]
 800ca48:	f000 fb26 	bl	800d098 <USBD_CtlSendData>
          break;
 800ca4c:	e004      	b.n	800ca58 <USBD_StdEPReq+0x294>

      default:
        USBD_CtlError(pdev, req);
 800ca4e:	6839      	ldr	r1, [r7, #0]
 800ca50:	6878      	ldr	r0, [r7, #4]
 800ca52:	f000 fab6 	bl	800cfc2 <USBD_CtlError>
        break;
 800ca56:	bf00      	nop
      }
      break;
 800ca58:	e004      	b.n	800ca64 <USBD_StdEPReq+0x2a0>

    default:
      USBD_CtlError(pdev, req);
 800ca5a:	6839      	ldr	r1, [r7, #0]
 800ca5c:	6878      	ldr	r0, [r7, #4]
 800ca5e:	f000 fab0 	bl	800cfc2 <USBD_CtlError>
      break;
 800ca62:	bf00      	nop
    }
    break;
 800ca64:	e004      	b.n	800ca70 <USBD_StdEPReq+0x2ac>

  default:
    USBD_CtlError(pdev, req);
 800ca66:	6839      	ldr	r1, [r7, #0]
 800ca68:	6878      	ldr	r0, [r7, #4]
 800ca6a:	f000 faaa 	bl	800cfc2 <USBD_CtlError>
    break;
 800ca6e:	bf00      	nop
  }

  return ret;
 800ca70:	7bfb      	ldrb	r3, [r7, #15]
}
 800ca72:	4618      	mov	r0, r3
 800ca74:	3710      	adds	r7, #16
 800ca76:	46bd      	mov	sp, r7
 800ca78:	bd80      	pop	{r7, pc}
	...

0800ca7c <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev ,
                               USBD_SetupReqTypedef *req)
{
 800ca7c:	b580      	push	{r7, lr}
 800ca7e:	b084      	sub	sp, #16
 800ca80:	af00      	add	r7, sp, #0
 800ca82:	6078      	str	r0, [r7, #4]
 800ca84:	6039      	str	r1, [r7, #0]
  uint16_t len;
  uint8_t *pbuf;


  switch (req->wValue >> 8)
 800ca86:	683b      	ldr	r3, [r7, #0]
 800ca88:	885b      	ldrh	r3, [r3, #2]
 800ca8a:	0a1b      	lsrs	r3, r3, #8
 800ca8c:	b29b      	uxth	r3, r3
 800ca8e:	3b01      	subs	r3, #1
 800ca90:	2b06      	cmp	r3, #6
 800ca92:	f200 80c9 	bhi.w	800cc28 <USBD_GetDescriptor+0x1ac>
 800ca96:	a201      	add	r2, pc, #4	; (adr r2, 800ca9c <USBD_GetDescriptor+0x20>)
 800ca98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ca9c:	0800cab9 	.word	0x0800cab9
 800caa0:	0800cad1 	.word	0x0800cad1
 800caa4:	0800cb11 	.word	0x0800cb11
 800caa8:	0800cc29 	.word	0x0800cc29
 800caac:	0800cc29 	.word	0x0800cc29
 800cab0:	0800cbd5 	.word	0x0800cbd5
 800cab4:	0800cbfb 	.word	0x0800cbfb
  case USB_DESC_TYPE_BOS:
    pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
    break;
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800cab8:	687b      	ldr	r3, [r7, #4]
 800caba:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800cabe:	681b      	ldr	r3, [r3, #0]
 800cac0:	687a      	ldr	r2, [r7, #4]
 800cac2:	7c12      	ldrb	r2, [r2, #16]
 800cac4:	f107 010a 	add.w	r1, r7, #10
 800cac8:	4610      	mov	r0, r2
 800caca:	4798      	blx	r3
 800cacc:	60f8      	str	r0, [r7, #12]
    break;
 800cace:	e0b0      	b.n	800cc32 <USBD_GetDescriptor+0x1b6>

  case USB_DESC_TYPE_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH )
 800cad0:	687b      	ldr	r3, [r7, #4]
 800cad2:	7c1b      	ldrb	r3, [r3, #16]
 800cad4:	2b00      	cmp	r3, #0
 800cad6:	d10d      	bne.n	800caf4 <USBD_GetDescriptor+0x78>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetHSConfigDescriptor(&len);
 800cad8:	687b      	ldr	r3, [r7, #4]
 800cada:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800cade:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cae0:	f107 020a 	add.w	r2, r7, #10
 800cae4:	4610      	mov	r0, r2
 800cae6:	4798      	blx	r3
 800cae8:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800caea:	68fb      	ldr	r3, [r7, #12]
 800caec:	3301      	adds	r3, #1
 800caee:	2202      	movs	r2, #2
 800caf0:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 800caf2:	e09e      	b.n	800cc32 <USBD_GetDescriptor+0x1b6>
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 800caf4:	687b      	ldr	r3, [r7, #4]
 800caf6:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800cafa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cafc:	f107 020a 	add.w	r2, r7, #10
 800cb00:	4610      	mov	r0, r2
 800cb02:	4798      	blx	r3
 800cb04:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800cb06:	68fb      	ldr	r3, [r7, #12]
 800cb08:	3301      	adds	r3, #1
 800cb0a:	2202      	movs	r2, #2
 800cb0c:	701a      	strb	r2, [r3, #0]
    break;
 800cb0e:	e090      	b.n	800cc32 <USBD_GetDescriptor+0x1b6>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 800cb10:	683b      	ldr	r3, [r7, #0]
 800cb12:	885b      	ldrh	r3, [r3, #2]
 800cb14:	b2db      	uxtb	r3, r3
 800cb16:	2b05      	cmp	r3, #5
 800cb18:	d856      	bhi.n	800cbc8 <USBD_GetDescriptor+0x14c>
 800cb1a:	a201      	add	r2, pc, #4	; (adr r2, 800cb20 <USBD_GetDescriptor+0xa4>)
 800cb1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cb20:	0800cb39 	.word	0x0800cb39
 800cb24:	0800cb51 	.word	0x0800cb51
 800cb28:	0800cb69 	.word	0x0800cb69
 800cb2c:	0800cb81 	.word	0x0800cb81
 800cb30:	0800cb99 	.word	0x0800cb99
 800cb34:	0800cbb1 	.word	0x0800cbb1
    {
    case USBD_IDX_LANGID_STR:
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800cb38:	687b      	ldr	r3, [r7, #4]
 800cb3a:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800cb3e:	685b      	ldr	r3, [r3, #4]
 800cb40:	687a      	ldr	r2, [r7, #4]
 800cb42:	7c12      	ldrb	r2, [r2, #16]
 800cb44:	f107 010a 	add.w	r1, r7, #10
 800cb48:	4610      	mov	r0, r2
 800cb4a:	4798      	blx	r3
 800cb4c:	60f8      	str	r0, [r7, #12]
      break;
 800cb4e:	e040      	b.n	800cbd2 <USBD_GetDescriptor+0x156>

    case USBD_IDX_MFC_STR:
      pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800cb50:	687b      	ldr	r3, [r7, #4]
 800cb52:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800cb56:	689b      	ldr	r3, [r3, #8]
 800cb58:	687a      	ldr	r2, [r7, #4]
 800cb5a:	7c12      	ldrb	r2, [r2, #16]
 800cb5c:	f107 010a 	add.w	r1, r7, #10
 800cb60:	4610      	mov	r0, r2
 800cb62:	4798      	blx	r3
 800cb64:	60f8      	str	r0, [r7, #12]
      break;
 800cb66:	e034      	b.n	800cbd2 <USBD_GetDescriptor+0x156>

    case USBD_IDX_PRODUCT_STR:
      pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800cb68:	687b      	ldr	r3, [r7, #4]
 800cb6a:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800cb6e:	68db      	ldr	r3, [r3, #12]
 800cb70:	687a      	ldr	r2, [r7, #4]
 800cb72:	7c12      	ldrb	r2, [r2, #16]
 800cb74:	f107 010a 	add.w	r1, r7, #10
 800cb78:	4610      	mov	r0, r2
 800cb7a:	4798      	blx	r3
 800cb7c:	60f8      	str	r0, [r7, #12]
      break;
 800cb7e:	e028      	b.n	800cbd2 <USBD_GetDescriptor+0x156>

    case USBD_IDX_SERIAL_STR:
      pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800cb80:	687b      	ldr	r3, [r7, #4]
 800cb82:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800cb86:	691b      	ldr	r3, [r3, #16]
 800cb88:	687a      	ldr	r2, [r7, #4]
 800cb8a:	7c12      	ldrb	r2, [r2, #16]
 800cb8c:	f107 010a 	add.w	r1, r7, #10
 800cb90:	4610      	mov	r0, r2
 800cb92:	4798      	blx	r3
 800cb94:	60f8      	str	r0, [r7, #12]
      break;
 800cb96:	e01c      	b.n	800cbd2 <USBD_GetDescriptor+0x156>

    case USBD_IDX_CONFIG_STR:
      pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800cb98:	687b      	ldr	r3, [r7, #4]
 800cb9a:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800cb9e:	695b      	ldr	r3, [r3, #20]
 800cba0:	687a      	ldr	r2, [r7, #4]
 800cba2:	7c12      	ldrb	r2, [r2, #16]
 800cba4:	f107 010a 	add.w	r1, r7, #10
 800cba8:	4610      	mov	r0, r2
 800cbaa:	4798      	blx	r3
 800cbac:	60f8      	str	r0, [r7, #12]
      break;
 800cbae:	e010      	b.n	800cbd2 <USBD_GetDescriptor+0x156>

    case USBD_IDX_INTERFACE_STR:
      pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800cbb0:	687b      	ldr	r3, [r7, #4]
 800cbb2:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800cbb6:	699b      	ldr	r3, [r3, #24]
 800cbb8:	687a      	ldr	r2, [r7, #4]
 800cbba:	7c12      	ldrb	r2, [r2, #16]
 800cbbc:	f107 010a 	add.w	r1, r7, #10
 800cbc0:	4610      	mov	r0, r2
 800cbc2:	4798      	blx	r3
 800cbc4:	60f8      	str	r0, [r7, #12]
      break;
 800cbc6:	e004      	b.n	800cbd2 <USBD_GetDescriptor+0x156>
    default:
#if (USBD_SUPPORT_USER_STRING == 1U)
      pbuf = pdev->pClass->GetUsrStrDescriptor(pdev, (req->wValue) , &len);
      break;
#else
       USBD_CtlError(pdev , req);
 800cbc8:	6839      	ldr	r1, [r7, #0]
 800cbca:	6878      	ldr	r0, [r7, #4]
 800cbcc:	f000 f9f9 	bl	800cfc2 <USBD_CtlError>
      return;
 800cbd0:	e04b      	b.n	800cc6a <USBD_GetDescriptor+0x1ee>
#endif
    }
    break;
 800cbd2:	e02e      	b.n	800cc32 <USBD_GetDescriptor+0x1b6>
  case USB_DESC_TYPE_DEVICE_QUALIFIER:

    if(pdev->dev_speed == USBD_SPEED_HIGH)
 800cbd4:	687b      	ldr	r3, [r7, #4]
 800cbd6:	7c1b      	ldrb	r3, [r3, #16]
 800cbd8:	2b00      	cmp	r3, #0
 800cbda:	d109      	bne.n	800cbf0 <USBD_GetDescriptor+0x174>
    {
      pbuf = (uint8_t *)pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800cbdc:	687b      	ldr	r3, [r7, #4]
 800cbde:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800cbe2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cbe4:	f107 020a 	add.w	r2, r7, #10
 800cbe8:	4610      	mov	r0, r2
 800cbea:	4798      	blx	r3
 800cbec:	60f8      	str	r0, [r7, #12]
      break;
 800cbee:	e020      	b.n	800cc32 <USBD_GetDescriptor+0x1b6>
    }
    else
    {
      USBD_CtlError(pdev , req);
 800cbf0:	6839      	ldr	r1, [r7, #0]
 800cbf2:	6878      	ldr	r0, [r7, #4]
 800cbf4:	f000 f9e5 	bl	800cfc2 <USBD_CtlError>
      return;
 800cbf8:	e037      	b.n	800cc6a <USBD_GetDescriptor+0x1ee>
    }

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 800cbfa:	687b      	ldr	r3, [r7, #4]
 800cbfc:	7c1b      	ldrb	r3, [r3, #16]
 800cbfe:	2b00      	cmp	r3, #0
 800cc00:	d10d      	bne.n	800cc1e <USBD_GetDescriptor+0x1a2>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800cc02:	687b      	ldr	r3, [r7, #4]
 800cc04:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800cc08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cc0a:	f107 020a 	add.w	r2, r7, #10
 800cc0e:	4610      	mov	r0, r2
 800cc10:	4798      	blx	r3
 800cc12:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800cc14:	68fb      	ldr	r3, [r7, #12]
 800cc16:	3301      	adds	r3, #1
 800cc18:	2207      	movs	r2, #7
 800cc1a:	701a      	strb	r2, [r3, #0]
      break;
 800cc1c:	e009      	b.n	800cc32 <USBD_GetDescriptor+0x1b6>
    }
    else
    {
      USBD_CtlError(pdev , req);
 800cc1e:	6839      	ldr	r1, [r7, #0]
 800cc20:	6878      	ldr	r0, [r7, #4]
 800cc22:	f000 f9ce 	bl	800cfc2 <USBD_CtlError>
      return;
 800cc26:	e020      	b.n	800cc6a <USBD_GetDescriptor+0x1ee>
    }

  default:
     USBD_CtlError(pdev , req);
 800cc28:	6839      	ldr	r1, [r7, #0]
 800cc2a:	6878      	ldr	r0, [r7, #4]
 800cc2c:	f000 f9c9 	bl	800cfc2 <USBD_CtlError>
    return;
 800cc30:	e01b      	b.n	800cc6a <USBD_GetDescriptor+0x1ee>
  }

  if((len != 0U) && (req->wLength != 0U))
 800cc32:	897b      	ldrh	r3, [r7, #10]
 800cc34:	2b00      	cmp	r3, #0
 800cc36:	d011      	beq.n	800cc5c <USBD_GetDescriptor+0x1e0>
 800cc38:	683b      	ldr	r3, [r7, #0]
 800cc3a:	88db      	ldrh	r3, [r3, #6]
 800cc3c:	2b00      	cmp	r3, #0
 800cc3e:	d00d      	beq.n	800cc5c <USBD_GetDescriptor+0x1e0>
  {

    len = MIN(len, req->wLength);
 800cc40:	683b      	ldr	r3, [r7, #0]
 800cc42:	88da      	ldrh	r2, [r3, #6]
 800cc44:	897b      	ldrh	r3, [r7, #10]
 800cc46:	4293      	cmp	r3, r2
 800cc48:	bf28      	it	cs
 800cc4a:	4613      	movcs	r3, r2
 800cc4c:	b29b      	uxth	r3, r3
 800cc4e:	817b      	strh	r3, [r7, #10]

    USBD_CtlSendData (pdev, pbuf, len);
 800cc50:	897b      	ldrh	r3, [r7, #10]
 800cc52:	461a      	mov	r2, r3
 800cc54:	68f9      	ldr	r1, [r7, #12]
 800cc56:	6878      	ldr	r0, [r7, #4]
 800cc58:	f000 fa1e 	bl	800d098 <USBD_CtlSendData>
  }

  if(req->wLength == 0U)
 800cc5c:	683b      	ldr	r3, [r7, #0]
 800cc5e:	88db      	ldrh	r3, [r3, #6]
 800cc60:	2b00      	cmp	r3, #0
 800cc62:	d102      	bne.n	800cc6a <USBD_GetDescriptor+0x1ee>
  {
   USBD_CtlSendStatus(pdev);
 800cc64:	6878      	ldr	r0, [r7, #4]
 800cc66:	f000 fa75 	bl	800d154 <USBD_CtlSendStatus>
  }
}
 800cc6a:	3710      	adds	r7, #16
 800cc6c:	46bd      	mov	sp, r7
 800cc6e:	bd80      	pop	{r7, pc}

0800cc70 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 800cc70:	b580      	push	{r7, lr}
 800cc72:	b084      	sub	sp, #16
 800cc74:	af00      	add	r7, sp, #0
 800cc76:	6078      	str	r0, [r7, #4]
 800cc78:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800cc7a:	683b      	ldr	r3, [r7, #0]
 800cc7c:	889b      	ldrh	r3, [r3, #4]
 800cc7e:	2b00      	cmp	r3, #0
 800cc80:	d130      	bne.n	800cce4 <USBD_SetAddress+0x74>
 800cc82:	683b      	ldr	r3, [r7, #0]
 800cc84:	88db      	ldrh	r3, [r3, #6]
 800cc86:	2b00      	cmp	r3, #0
 800cc88:	d12c      	bne.n	800cce4 <USBD_SetAddress+0x74>
 800cc8a:	683b      	ldr	r3, [r7, #0]
 800cc8c:	885b      	ldrh	r3, [r3, #2]
 800cc8e:	2b7f      	cmp	r3, #127	; 0x7f
 800cc90:	d828      	bhi.n	800cce4 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800cc92:	683b      	ldr	r3, [r7, #0]
 800cc94:	885b      	ldrh	r3, [r3, #2]
 800cc96:	b2db      	uxtb	r3, r3
 800cc98:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cc9c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cc9e:	687b      	ldr	r3, [r7, #4]
 800cca0:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800cca4:	2b03      	cmp	r3, #3
 800cca6:	d104      	bne.n	800ccb2 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev , req);
 800cca8:	6839      	ldr	r1, [r7, #0]
 800ccaa:	6878      	ldr	r0, [r7, #4]
 800ccac:	f000 f989 	bl	800cfc2 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ccb0:	e01c      	b.n	800ccec <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800ccb2:	687b      	ldr	r3, [r7, #4]
 800ccb4:	7bfa      	ldrb	r2, [r7, #15]
 800ccb6:	f883 2276 	strb.w	r2, [r3, #630]	; 0x276
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800ccba:	7bfb      	ldrb	r3, [r7, #15]
 800ccbc:	4619      	mov	r1, r3
 800ccbe:	6878      	ldr	r0, [r7, #4]
 800ccc0:	f000 ff50 	bl	800db64 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800ccc4:	6878      	ldr	r0, [r7, #4]
 800ccc6:	f000 fa45 	bl	800d154 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800ccca:	7bfb      	ldrb	r3, [r7, #15]
 800cccc:	2b00      	cmp	r3, #0
 800ccce:	d004      	beq.n	800ccda <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800ccd0:	687b      	ldr	r3, [r7, #4]
 800ccd2:	2202      	movs	r2, #2
 800ccd4:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ccd8:	e008      	b.n	800ccec <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800ccda:	687b      	ldr	r3, [r7, #4]
 800ccdc:	2201      	movs	r2, #1
 800ccde:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cce2:	e003      	b.n	800ccec <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800cce4:	6839      	ldr	r1, [r7, #0]
 800cce6:	6878      	ldr	r0, [r7, #4]
 800cce8:	f000 f96b 	bl	800cfc2 <USBD_CtlError>
  }
}
 800ccec:	bf00      	nop
 800ccee:	3710      	adds	r7, #16
 800ccf0:	46bd      	mov	sp, r7
 800ccf2:	bd80      	pop	{r7, pc}

0800ccf4 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ccf4:	b580      	push	{r7, lr}
 800ccf6:	b082      	sub	sp, #8
 800ccf8:	af00      	add	r7, sp, #0
 800ccfa:	6078      	str	r0, [r7, #4]
 800ccfc:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800ccfe:	683b      	ldr	r3, [r7, #0]
 800cd00:	885b      	ldrh	r3, [r3, #2]
 800cd02:	b2da      	uxtb	r2, r3
 800cd04:	4b41      	ldr	r3, [pc, #260]	; (800ce0c <USBD_SetConfig+0x118>)
 800cd06:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800cd08:	4b40      	ldr	r3, [pc, #256]	; (800ce0c <USBD_SetConfig+0x118>)
 800cd0a:	781b      	ldrb	r3, [r3, #0]
 800cd0c:	2b01      	cmp	r3, #1
 800cd0e:	d904      	bls.n	800cd1a <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 800cd10:	6839      	ldr	r1, [r7, #0]
 800cd12:	6878      	ldr	r0, [r7, #4]
 800cd14:	f000 f955 	bl	800cfc2 <USBD_CtlError>
 800cd18:	e075      	b.n	800ce06 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 800cd1a:	687b      	ldr	r3, [r7, #4]
 800cd1c:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800cd20:	2b02      	cmp	r3, #2
 800cd22:	d002      	beq.n	800cd2a <USBD_SetConfig+0x36>
 800cd24:	2b03      	cmp	r3, #3
 800cd26:	d023      	beq.n	800cd70 <USBD_SetConfig+0x7c>
 800cd28:	e062      	b.n	800cdf0 <USBD_SetConfig+0xfc>
    {
    case USBD_STATE_ADDRESSED:
      if (cfgidx)
 800cd2a:	4b38      	ldr	r3, [pc, #224]	; (800ce0c <USBD_SetConfig+0x118>)
 800cd2c:	781b      	ldrb	r3, [r3, #0]
 800cd2e:	2b00      	cmp	r3, #0
 800cd30:	d01a      	beq.n	800cd68 <USBD_SetConfig+0x74>
      {
        pdev->dev_config = cfgidx;
 800cd32:	4b36      	ldr	r3, [pc, #216]	; (800ce0c <USBD_SetConfig+0x118>)
 800cd34:	781b      	ldrb	r3, [r3, #0]
 800cd36:	461a      	mov	r2, r3
 800cd38:	687b      	ldr	r3, [r7, #4]
 800cd3a:	605a      	str	r2, [r3, #4]
        pdev->dev_state = USBD_STATE_CONFIGURED;
 800cd3c:	687b      	ldr	r3, [r7, #4]
 800cd3e:	2203      	movs	r2, #3
 800cd40:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800cd44:	4b31      	ldr	r3, [pc, #196]	; (800ce0c <USBD_SetConfig+0x118>)
 800cd46:	781b      	ldrb	r3, [r3, #0]
 800cd48:	4619      	mov	r1, r3
 800cd4a:	6878      	ldr	r0, [r7, #4]
 800cd4c:	f7ff fa2a 	bl	800c1a4 <USBD_SetClassConfig>
 800cd50:	4603      	mov	r3, r0
 800cd52:	2b02      	cmp	r3, #2
 800cd54:	d104      	bne.n	800cd60 <USBD_SetConfig+0x6c>
        {
          USBD_CtlError(pdev, req);
 800cd56:	6839      	ldr	r1, [r7, #0]
 800cd58:	6878      	ldr	r0, [r7, #4]
 800cd5a:	f000 f932 	bl	800cfc2 <USBD_CtlError>
          return;
 800cd5e:	e052      	b.n	800ce06 <USBD_SetConfig+0x112>
        }
        USBD_CtlSendStatus(pdev);
 800cd60:	6878      	ldr	r0, [r7, #4]
 800cd62:	f000 f9f7 	bl	800d154 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlSendStatus(pdev);
      }
      break;
 800cd66:	e04e      	b.n	800ce06 <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 800cd68:	6878      	ldr	r0, [r7, #4]
 800cd6a:	f000 f9f3 	bl	800d154 <USBD_CtlSendStatus>
      break;
 800cd6e:	e04a      	b.n	800ce06 <USBD_SetConfig+0x112>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800cd70:	4b26      	ldr	r3, [pc, #152]	; (800ce0c <USBD_SetConfig+0x118>)
 800cd72:	781b      	ldrb	r3, [r3, #0]
 800cd74:	2b00      	cmp	r3, #0
 800cd76:	d112      	bne.n	800cd9e <USBD_SetConfig+0xaa>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800cd78:	687b      	ldr	r3, [r7, #4]
 800cd7a:	2202      	movs	r2, #2
 800cd7c:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
        pdev->dev_config = cfgidx;
 800cd80:	4b22      	ldr	r3, [pc, #136]	; (800ce0c <USBD_SetConfig+0x118>)
 800cd82:	781b      	ldrb	r3, [r3, #0]
 800cd84:	461a      	mov	r2, r3
 800cd86:	687b      	ldr	r3, [r7, #4]
 800cd88:	605a      	str	r2, [r3, #4]
        USBD_ClrClassConfig(pdev, cfgidx);
 800cd8a:	4b20      	ldr	r3, [pc, #128]	; (800ce0c <USBD_SetConfig+0x118>)
 800cd8c:	781b      	ldrb	r3, [r3, #0]
 800cd8e:	4619      	mov	r1, r3
 800cd90:	6878      	ldr	r0, [r7, #4]
 800cd92:	f7ff fa26 	bl	800c1e2 <USBD_ClrClassConfig>
        USBD_CtlSendStatus(pdev);
 800cd96:	6878      	ldr	r0, [r7, #4]
 800cd98:	f000 f9dc 	bl	800d154 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlSendStatus(pdev);
      }
      break;
 800cd9c:	e033      	b.n	800ce06 <USBD_SetConfig+0x112>
      else if (cfgidx != pdev->dev_config)
 800cd9e:	4b1b      	ldr	r3, [pc, #108]	; (800ce0c <USBD_SetConfig+0x118>)
 800cda0:	781b      	ldrb	r3, [r3, #0]
 800cda2:	461a      	mov	r2, r3
 800cda4:	687b      	ldr	r3, [r7, #4]
 800cda6:	685b      	ldr	r3, [r3, #4]
 800cda8:	429a      	cmp	r2, r3
 800cdaa:	d01d      	beq.n	800cde8 <USBD_SetConfig+0xf4>
        USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800cdac:	687b      	ldr	r3, [r7, #4]
 800cdae:	685b      	ldr	r3, [r3, #4]
 800cdb0:	b2db      	uxtb	r3, r3
 800cdb2:	4619      	mov	r1, r3
 800cdb4:	6878      	ldr	r0, [r7, #4]
 800cdb6:	f7ff fa14 	bl	800c1e2 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800cdba:	4b14      	ldr	r3, [pc, #80]	; (800ce0c <USBD_SetConfig+0x118>)
 800cdbc:	781b      	ldrb	r3, [r3, #0]
 800cdbe:	461a      	mov	r2, r3
 800cdc0:	687b      	ldr	r3, [r7, #4]
 800cdc2:	605a      	str	r2, [r3, #4]
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800cdc4:	4b11      	ldr	r3, [pc, #68]	; (800ce0c <USBD_SetConfig+0x118>)
 800cdc6:	781b      	ldrb	r3, [r3, #0]
 800cdc8:	4619      	mov	r1, r3
 800cdca:	6878      	ldr	r0, [r7, #4]
 800cdcc:	f7ff f9ea 	bl	800c1a4 <USBD_SetClassConfig>
 800cdd0:	4603      	mov	r3, r0
 800cdd2:	2b02      	cmp	r3, #2
 800cdd4:	d104      	bne.n	800cde0 <USBD_SetConfig+0xec>
          USBD_CtlError(pdev, req);
 800cdd6:	6839      	ldr	r1, [r7, #0]
 800cdd8:	6878      	ldr	r0, [r7, #4]
 800cdda:	f000 f8f2 	bl	800cfc2 <USBD_CtlError>
          return;
 800cdde:	e012      	b.n	800ce06 <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 800cde0:	6878      	ldr	r0, [r7, #4]
 800cde2:	f000 f9b7 	bl	800d154 <USBD_CtlSendStatus>
      break;
 800cde6:	e00e      	b.n	800ce06 <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 800cde8:	6878      	ldr	r0, [r7, #4]
 800cdea:	f000 f9b3 	bl	800d154 <USBD_CtlSendStatus>
      break;
 800cdee:	e00a      	b.n	800ce06 <USBD_SetConfig+0x112>

    default:
      USBD_CtlError(pdev, req);
 800cdf0:	6839      	ldr	r1, [r7, #0]
 800cdf2:	6878      	ldr	r0, [r7, #4]
 800cdf4:	f000 f8e5 	bl	800cfc2 <USBD_CtlError>
      USBD_ClrClassConfig(pdev, cfgidx);
 800cdf8:	4b04      	ldr	r3, [pc, #16]	; (800ce0c <USBD_SetConfig+0x118>)
 800cdfa:	781b      	ldrb	r3, [r3, #0]
 800cdfc:	4619      	mov	r1, r3
 800cdfe:	6878      	ldr	r0, [r7, #4]
 800ce00:	f7ff f9ef 	bl	800c1e2 <USBD_ClrClassConfig>
      break;
 800ce04:	bf00      	nop
    }
  }
}
 800ce06:	3708      	adds	r7, #8
 800ce08:	46bd      	mov	sp, r7
 800ce0a:	bd80      	pop	{r7, pc}
 800ce0c:	20000788 	.word	0x20000788

0800ce10 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ce10:	b580      	push	{r7, lr}
 800ce12:	b082      	sub	sp, #8
 800ce14:	af00      	add	r7, sp, #0
 800ce16:	6078      	str	r0, [r7, #4]
 800ce18:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800ce1a:	683b      	ldr	r3, [r7, #0]
 800ce1c:	88db      	ldrh	r3, [r3, #6]
 800ce1e:	2b01      	cmp	r3, #1
 800ce20:	d004      	beq.n	800ce2c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev , req);
 800ce22:	6839      	ldr	r1, [r7, #0]
 800ce24:	6878      	ldr	r0, [r7, #4]
 800ce26:	f000 f8cc 	bl	800cfc2 <USBD_CtlError>
    default:
      USBD_CtlError(pdev , req);
      break;
    }
  }
}
 800ce2a:	e021      	b.n	800ce70 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 800ce2c:	687b      	ldr	r3, [r7, #4]
 800ce2e:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800ce32:	2b01      	cmp	r3, #1
 800ce34:	db17      	blt.n	800ce66 <USBD_GetConfig+0x56>
 800ce36:	2b02      	cmp	r3, #2
 800ce38:	dd02      	ble.n	800ce40 <USBD_GetConfig+0x30>
 800ce3a:	2b03      	cmp	r3, #3
 800ce3c:	d00b      	beq.n	800ce56 <USBD_GetConfig+0x46>
 800ce3e:	e012      	b.n	800ce66 <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 800ce40:	687b      	ldr	r3, [r7, #4]
 800ce42:	2200      	movs	r2, #0
 800ce44:	609a      	str	r2, [r3, #8]
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800ce46:	687b      	ldr	r3, [r7, #4]
 800ce48:	3308      	adds	r3, #8
 800ce4a:	2201      	movs	r2, #1
 800ce4c:	4619      	mov	r1, r3
 800ce4e:	6878      	ldr	r0, [r7, #4]
 800ce50:	f000 f922 	bl	800d098 <USBD_CtlSendData>
      break;
 800ce54:	e00c      	b.n	800ce70 <USBD_GetConfig+0x60>
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800ce56:	687b      	ldr	r3, [r7, #4]
 800ce58:	3304      	adds	r3, #4
 800ce5a:	2201      	movs	r2, #1
 800ce5c:	4619      	mov	r1, r3
 800ce5e:	6878      	ldr	r0, [r7, #4]
 800ce60:	f000 f91a 	bl	800d098 <USBD_CtlSendData>
      break;
 800ce64:	e004      	b.n	800ce70 <USBD_GetConfig+0x60>
      USBD_CtlError(pdev , req);
 800ce66:	6839      	ldr	r1, [r7, #0]
 800ce68:	6878      	ldr	r0, [r7, #4]
 800ce6a:	f000 f8aa 	bl	800cfc2 <USBD_CtlError>
      break;
 800ce6e:	bf00      	nop
}
 800ce70:	bf00      	nop
 800ce72:	3708      	adds	r7, #8
 800ce74:	46bd      	mov	sp, r7
 800ce76:	bd80      	pop	{r7, pc}

0800ce78 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ce78:	b580      	push	{r7, lr}
 800ce7a:	b082      	sub	sp, #8
 800ce7c:	af00      	add	r7, sp, #0
 800ce7e:	6078      	str	r0, [r7, #4]
 800ce80:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800ce82:	687b      	ldr	r3, [r7, #4]
 800ce84:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800ce88:	3b01      	subs	r3, #1
 800ce8a:	2b02      	cmp	r3, #2
 800ce8c:	d81e      	bhi.n	800cecc <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if(req->wLength != 0x2U)
 800ce8e:	683b      	ldr	r3, [r7, #0]
 800ce90:	88db      	ldrh	r3, [r3, #6]
 800ce92:	2b02      	cmp	r3, #2
 800ce94:	d004      	beq.n	800cea0 <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 800ce96:	6839      	ldr	r1, [r7, #0]
 800ce98:	6878      	ldr	r0, [r7, #4]
 800ce9a:	f000 f892 	bl	800cfc2 <USBD_CtlError>
      break;
 800ce9e:	e01a      	b.n	800ced6 <USBD_GetStatus+0x5e>
    }

#if ( USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800cea0:	687b      	ldr	r3, [r7, #4]
 800cea2:	2201      	movs	r2, #1
 800cea4:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup)
 800cea6:	687b      	ldr	r3, [r7, #4]
 800cea8:	f8d3 327c 	ldr.w	r3, [r3, #636]	; 0x27c
 800ceac:	2b00      	cmp	r3, #0
 800ceae:	d005      	beq.n	800cebc <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800ceb0:	687b      	ldr	r3, [r7, #4]
 800ceb2:	68db      	ldr	r3, [r3, #12]
 800ceb4:	f043 0202 	orr.w	r2, r3, #2
 800ceb8:	687b      	ldr	r3, [r7, #4]
 800ceba:	60da      	str	r2, [r3, #12]
    }

    USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800cebc:	687b      	ldr	r3, [r7, #4]
 800cebe:	330c      	adds	r3, #12
 800cec0:	2202      	movs	r2, #2
 800cec2:	4619      	mov	r1, r3
 800cec4:	6878      	ldr	r0, [r7, #4]
 800cec6:	f000 f8e7 	bl	800d098 <USBD_CtlSendData>
    break;
 800ceca:	e004      	b.n	800ced6 <USBD_GetStatus+0x5e>

  default :
    USBD_CtlError(pdev , req);
 800cecc:	6839      	ldr	r1, [r7, #0]
 800cece:	6878      	ldr	r0, [r7, #4]
 800ced0:	f000 f877 	bl	800cfc2 <USBD_CtlError>
    break;
 800ced4:	bf00      	nop
  }
}
 800ced6:	bf00      	nop
 800ced8:	3708      	adds	r7, #8
 800ceda:	46bd      	mov	sp, r7
 800cedc:	bd80      	pop	{r7, pc}

0800cede <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 800cede:	b580      	push	{r7, lr}
 800cee0:	b082      	sub	sp, #8
 800cee2:	af00      	add	r7, sp, #0
 800cee4:	6078      	str	r0, [r7, #4]
 800cee6:	6039      	str	r1, [r7, #0]

  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800cee8:	683b      	ldr	r3, [r7, #0]
 800ceea:	885b      	ldrh	r3, [r3, #2]
 800ceec:	2b01      	cmp	r3, #1
 800ceee:	d106      	bne.n	800cefe <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800cef0:	687b      	ldr	r3, [r7, #4]
 800cef2:	2201      	movs	r2, #1
 800cef4:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c
    USBD_CtlSendStatus(pdev);
 800cef8:	6878      	ldr	r0, [r7, #4]
 800cefa:	f000 f92b 	bl	800d154 <USBD_CtlSendStatus>
  }

}
 800cefe:	bf00      	nop
 800cf00:	3708      	adds	r7, #8
 800cf02:	46bd      	mov	sp, r7
 800cf04:	bd80      	pop	{r7, pc}

0800cf06 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 800cf06:	b580      	push	{r7, lr}
 800cf08:	b082      	sub	sp, #8
 800cf0a:	af00      	add	r7, sp, #0
 800cf0c:	6078      	str	r0, [r7, #4]
 800cf0e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800cf10:	687b      	ldr	r3, [r7, #4]
 800cf12:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800cf16:	3b01      	subs	r3, #1
 800cf18:	2b02      	cmp	r3, #2
 800cf1a:	d80b      	bhi.n	800cf34 <USBD_ClrFeature+0x2e>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800cf1c:	683b      	ldr	r3, [r7, #0]
 800cf1e:	885b      	ldrh	r3, [r3, #2]
 800cf20:	2b01      	cmp	r3, #1
 800cf22:	d10c      	bne.n	800cf3e <USBD_ClrFeature+0x38>
    {
      pdev->dev_remote_wakeup = 0U;
 800cf24:	687b      	ldr	r3, [r7, #4]
 800cf26:	2200      	movs	r2, #0
 800cf28:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c
      USBD_CtlSendStatus(pdev);
 800cf2c:	6878      	ldr	r0, [r7, #4]
 800cf2e:	f000 f911 	bl	800d154 <USBD_CtlSendStatus>
    }
    break;
 800cf32:	e004      	b.n	800cf3e <USBD_ClrFeature+0x38>

  default :
     USBD_CtlError(pdev , req);
 800cf34:	6839      	ldr	r1, [r7, #0]
 800cf36:	6878      	ldr	r0, [r7, #4]
 800cf38:	f000 f843 	bl	800cfc2 <USBD_CtlError>
    break;
 800cf3c:	e000      	b.n	800cf40 <USBD_ClrFeature+0x3a>
    break;
 800cf3e:	bf00      	nop
  }
}
 800cf40:	bf00      	nop
 800cf42:	3708      	adds	r7, #8
 800cf44:	46bd      	mov	sp, r7
 800cf46:	bd80      	pop	{r7, pc}

0800cf48 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800cf48:	b480      	push	{r7}
 800cf4a:	b083      	sub	sp, #12
 800cf4c:	af00      	add	r7, sp, #0
 800cf4e:	6078      	str	r0, [r7, #4]
 800cf50:	6039      	str	r1, [r7, #0]
  req->bmRequest     = *(uint8_t *)  (pdata);
 800cf52:	683b      	ldr	r3, [r7, #0]
 800cf54:	781a      	ldrb	r2, [r3, #0]
 800cf56:	687b      	ldr	r3, [r7, #4]
 800cf58:	701a      	strb	r2, [r3, #0]
  req->bRequest      = *(uint8_t *)  (pdata +  1);
 800cf5a:	683b      	ldr	r3, [r7, #0]
 800cf5c:	785a      	ldrb	r2, [r3, #1]
 800cf5e:	687b      	ldr	r3, [r7, #4]
 800cf60:	705a      	strb	r2, [r3, #1]
  req->wValue        = SWAPBYTE      (pdata +  2);
 800cf62:	683b      	ldr	r3, [r7, #0]
 800cf64:	3302      	adds	r3, #2
 800cf66:	781b      	ldrb	r3, [r3, #0]
 800cf68:	b29a      	uxth	r2, r3
 800cf6a:	683b      	ldr	r3, [r7, #0]
 800cf6c:	3303      	adds	r3, #3
 800cf6e:	781b      	ldrb	r3, [r3, #0]
 800cf70:	b29b      	uxth	r3, r3
 800cf72:	021b      	lsls	r3, r3, #8
 800cf74:	b29b      	uxth	r3, r3
 800cf76:	4413      	add	r3, r2
 800cf78:	b29a      	uxth	r2, r3
 800cf7a:	687b      	ldr	r3, [r7, #4]
 800cf7c:	805a      	strh	r2, [r3, #2]
  req->wIndex        = SWAPBYTE      (pdata +  4);
 800cf7e:	683b      	ldr	r3, [r7, #0]
 800cf80:	3304      	adds	r3, #4
 800cf82:	781b      	ldrb	r3, [r3, #0]
 800cf84:	b29a      	uxth	r2, r3
 800cf86:	683b      	ldr	r3, [r7, #0]
 800cf88:	3305      	adds	r3, #5
 800cf8a:	781b      	ldrb	r3, [r3, #0]
 800cf8c:	b29b      	uxth	r3, r3
 800cf8e:	021b      	lsls	r3, r3, #8
 800cf90:	b29b      	uxth	r3, r3
 800cf92:	4413      	add	r3, r2
 800cf94:	b29a      	uxth	r2, r3
 800cf96:	687b      	ldr	r3, [r7, #4]
 800cf98:	809a      	strh	r2, [r3, #4]
  req->wLength       = SWAPBYTE      (pdata +  6);
 800cf9a:	683b      	ldr	r3, [r7, #0]
 800cf9c:	3306      	adds	r3, #6
 800cf9e:	781b      	ldrb	r3, [r3, #0]
 800cfa0:	b29a      	uxth	r2, r3
 800cfa2:	683b      	ldr	r3, [r7, #0]
 800cfa4:	3307      	adds	r3, #7
 800cfa6:	781b      	ldrb	r3, [r3, #0]
 800cfa8:	b29b      	uxth	r3, r3
 800cfaa:	021b      	lsls	r3, r3, #8
 800cfac:	b29b      	uxth	r3, r3
 800cfae:	4413      	add	r3, r2
 800cfb0:	b29a      	uxth	r2, r3
 800cfb2:	687b      	ldr	r3, [r7, #4]
 800cfb4:	80da      	strh	r2, [r3, #6]

}
 800cfb6:	bf00      	nop
 800cfb8:	370c      	adds	r7, #12
 800cfba:	46bd      	mov	sp, r7
 800cfbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfc0:	4770      	bx	lr

0800cfc2 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError( USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 800cfc2:	b580      	push	{r7, lr}
 800cfc4:	b082      	sub	sp, #8
 800cfc6:	af00      	add	r7, sp, #0
 800cfc8:	6078      	str	r0, [r7, #4]
 800cfca:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev , 0x80U);
 800cfcc:	2180      	movs	r1, #128	; 0x80
 800cfce:	6878      	ldr	r0, [r7, #4]
 800cfd0:	f000 fd5e 	bl	800da90 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0U);
 800cfd4:	2100      	movs	r1, #0
 800cfd6:	6878      	ldr	r0, [r7, #4]
 800cfd8:	f000 fd5a 	bl	800da90 <USBD_LL_StallEP>
}
 800cfdc:	bf00      	nop
 800cfde:	3708      	adds	r7, #8
 800cfe0:	46bd      	mov	sp, r7
 800cfe2:	bd80      	pop	{r7, pc}

0800cfe4 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800cfe4:	b580      	push	{r7, lr}
 800cfe6:	b086      	sub	sp, #24
 800cfe8:	af00      	add	r7, sp, #0
 800cfea:	60f8      	str	r0, [r7, #12]
 800cfec:	60b9      	str	r1, [r7, #8]
 800cfee:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800cff0:	2300      	movs	r3, #0
 800cff2:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 800cff4:	68fb      	ldr	r3, [r7, #12]
 800cff6:	2b00      	cmp	r3, #0
 800cff8:	d032      	beq.n	800d060 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800cffa:	68f8      	ldr	r0, [r7, #12]
 800cffc:	f000 f834 	bl	800d068 <USBD_GetLen>
 800d000:	4603      	mov	r3, r0
 800d002:	3301      	adds	r3, #1
 800d004:	b29b      	uxth	r3, r3
 800d006:	005b      	lsls	r3, r3, #1
 800d008:	b29a      	uxth	r2, r3
 800d00a:	687b      	ldr	r3, [r7, #4]
 800d00c:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800d00e:	7dfb      	ldrb	r3, [r7, #23]
 800d010:	1c5a      	adds	r2, r3, #1
 800d012:	75fa      	strb	r2, [r7, #23]
 800d014:	461a      	mov	r2, r3
 800d016:	68bb      	ldr	r3, [r7, #8]
 800d018:	4413      	add	r3, r2
 800d01a:	687a      	ldr	r2, [r7, #4]
 800d01c:	7812      	ldrb	r2, [r2, #0]
 800d01e:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800d020:	7dfb      	ldrb	r3, [r7, #23]
 800d022:	1c5a      	adds	r2, r3, #1
 800d024:	75fa      	strb	r2, [r7, #23]
 800d026:	461a      	mov	r2, r3
 800d028:	68bb      	ldr	r3, [r7, #8]
 800d02a:	4413      	add	r3, r2
 800d02c:	2203      	movs	r2, #3
 800d02e:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800d030:	e012      	b.n	800d058 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 800d032:	68fb      	ldr	r3, [r7, #12]
 800d034:	1c5a      	adds	r2, r3, #1
 800d036:	60fa      	str	r2, [r7, #12]
 800d038:	7dfa      	ldrb	r2, [r7, #23]
 800d03a:	1c51      	adds	r1, r2, #1
 800d03c:	75f9      	strb	r1, [r7, #23]
 800d03e:	4611      	mov	r1, r2
 800d040:	68ba      	ldr	r2, [r7, #8]
 800d042:	440a      	add	r2, r1
 800d044:	781b      	ldrb	r3, [r3, #0]
 800d046:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800d048:	7dfb      	ldrb	r3, [r7, #23]
 800d04a:	1c5a      	adds	r2, r3, #1
 800d04c:	75fa      	strb	r2, [r7, #23]
 800d04e:	461a      	mov	r2, r3
 800d050:	68bb      	ldr	r3, [r7, #8]
 800d052:	4413      	add	r3, r2
 800d054:	2200      	movs	r2, #0
 800d056:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800d058:	68fb      	ldr	r3, [r7, #12]
 800d05a:	781b      	ldrb	r3, [r3, #0]
 800d05c:	2b00      	cmp	r3, #0
 800d05e:	d1e8      	bne.n	800d032 <USBD_GetString+0x4e>
    }
  }
}
 800d060:	bf00      	nop
 800d062:	3718      	adds	r7, #24
 800d064:	46bd      	mov	sp, r7
 800d066:	bd80      	pop	{r7, pc}

0800d068 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800d068:	b480      	push	{r7}
 800d06a:	b085      	sub	sp, #20
 800d06c:	af00      	add	r7, sp, #0
 800d06e:	6078      	str	r0, [r7, #4]
    uint8_t  len = 0U;
 800d070:	2300      	movs	r3, #0
 800d072:	73fb      	strb	r3, [r7, #15]

    while (*buf != '\0')
 800d074:	e005      	b.n	800d082 <USBD_GetLen+0x1a>
    {
        len++;
 800d076:	7bfb      	ldrb	r3, [r7, #15]
 800d078:	3301      	adds	r3, #1
 800d07a:	73fb      	strb	r3, [r7, #15]
        buf++;
 800d07c:	687b      	ldr	r3, [r7, #4]
 800d07e:	3301      	adds	r3, #1
 800d080:	607b      	str	r3, [r7, #4]
    while (*buf != '\0')
 800d082:	687b      	ldr	r3, [r7, #4]
 800d084:	781b      	ldrb	r3, [r3, #0]
 800d086:	2b00      	cmp	r3, #0
 800d088:	d1f5      	bne.n	800d076 <USBD_GetLen+0xe>
    }

    return len;
 800d08a:	7bfb      	ldrb	r3, [r7, #15]
}
 800d08c:	4618      	mov	r0, r3
 800d08e:	3714      	adds	r7, #20
 800d090:	46bd      	mov	sp, r7
 800d092:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d096:	4770      	bx	lr

0800d098 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                     uint16_t len)
{
 800d098:	b580      	push	{r7, lr}
 800d09a:	b084      	sub	sp, #16
 800d09c:	af00      	add	r7, sp, #0
 800d09e:	60f8      	str	r0, [r7, #12]
 800d0a0:	60b9      	str	r1, [r7, #8]
 800d0a2:	4613      	mov	r3, r2
 800d0a4:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800d0a6:	68fb      	ldr	r3, [r7, #12]
 800d0a8:	2202      	movs	r2, #2
 800d0aa:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->ep_in[0].total_length = len;
 800d0ae:	88fa      	ldrh	r2, [r7, #6]
 800d0b0:	68fb      	ldr	r3, [r7, #12]
 800d0b2:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800d0b4:	88fa      	ldrh	r2, [r7, #6]
 800d0b6:	68fb      	ldr	r3, [r7, #12]
 800d0b8:	621a      	str	r2, [r3, #32]

 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 800d0ba:	88fb      	ldrh	r3, [r7, #6]
 800d0bc:	68ba      	ldr	r2, [r7, #8]
 800d0be:	2100      	movs	r1, #0
 800d0c0:	68f8      	ldr	r0, [r7, #12]
 800d0c2:	f000 fd6e 	bl	800dba2 <USBD_LL_Transmit>

  return USBD_OK;
 800d0c6:	2300      	movs	r3, #0
}
 800d0c8:	4618      	mov	r0, r3
 800d0ca:	3710      	adds	r7, #16
 800d0cc:	46bd      	mov	sp, r7
 800d0ce:	bd80      	pop	{r7, pc}

0800d0d0 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData (USBD_HandleTypeDef *pdev,
                                             uint8_t *pbuf, uint16_t len)
{
 800d0d0:	b580      	push	{r7, lr}
 800d0d2:	b084      	sub	sp, #16
 800d0d4:	af00      	add	r7, sp, #0
 800d0d6:	60f8      	str	r0, [r7, #12]
 800d0d8:	60b9      	str	r1, [r7, #8]
 800d0da:	4613      	mov	r3, r2
 800d0dc:	80fb      	strh	r3, [r7, #6]
 /* Start the next transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 800d0de:	88fb      	ldrh	r3, [r7, #6]
 800d0e0:	68ba      	ldr	r2, [r7, #8]
 800d0e2:	2100      	movs	r1, #0
 800d0e4:	68f8      	ldr	r0, [r7, #12]
 800d0e6:	f000 fd5c 	bl	800dba2 <USBD_LL_Transmit>

  return USBD_OK;
 800d0ea:	2300      	movs	r3, #0
}
 800d0ec:	4618      	mov	r0, r3
 800d0ee:	3710      	adds	r7, #16
 800d0f0:	46bd      	mov	sp, r7
 800d0f2:	bd80      	pop	{r7, pc}

0800d0f4 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                      uint16_t len)
{
 800d0f4:	b580      	push	{r7, lr}
 800d0f6:	b084      	sub	sp, #16
 800d0f8:	af00      	add	r7, sp, #0
 800d0fa:	60f8      	str	r0, [r7, #12]
 800d0fc:	60b9      	str	r1, [r7, #8]
 800d0fe:	4613      	mov	r3, r2
 800d100:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800d102:	68fb      	ldr	r3, [r7, #12]
 800d104:	2203      	movs	r2, #3
 800d106:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->ep_out[0].total_length = len;
 800d10a:	88fa      	ldrh	r2, [r7, #6]
 800d10c:	68fb      	ldr	r3, [r7, #12]
 800d10e:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
  pdev->ep_out[0].rem_length   = len;
 800d112:	88fa      	ldrh	r2, [r7, #6]
 800d114:	68fb      	ldr	r3, [r7, #12]
 800d116:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c

  /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, pbuf, len);
 800d11a:	88fb      	ldrh	r3, [r7, #6]
 800d11c:	68ba      	ldr	r2, [r7, #8]
 800d11e:	2100      	movs	r1, #0
 800d120:	68f8      	ldr	r0, [r7, #12]
 800d122:	f000 fd61 	bl	800dbe8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800d126:	2300      	movs	r3, #0
}
 800d128:	4618      	mov	r0, r3
 800d12a:	3710      	adds	r7, #16
 800d12c:	46bd      	mov	sp, r7
 800d12e:	bd80      	pop	{r7, pc}

0800d130 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                       uint16_t len)
{
 800d130:	b580      	push	{r7, lr}
 800d132:	b084      	sub	sp, #16
 800d134:	af00      	add	r7, sp, #0
 800d136:	60f8      	str	r0, [r7, #12]
 800d138:	60b9      	str	r1, [r7, #8]
 800d13a:	4613      	mov	r3, r2
 800d13c:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800d13e:	88fb      	ldrh	r3, [r7, #6]
 800d140:	68ba      	ldr	r2, [r7, #8]
 800d142:	2100      	movs	r1, #0
 800d144:	68f8      	ldr	r0, [r7, #12]
 800d146:	f000 fd4f 	bl	800dbe8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800d14a:	2300      	movs	r3, #0
}
 800d14c:	4618      	mov	r0, r3
 800d14e:	3710      	adds	r7, #16
 800d150:	46bd      	mov	sp, r7
 800d152:	bd80      	pop	{r7, pc}

0800d154 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus (USBD_HandleTypeDef *pdev)
{
 800d154:	b580      	push	{r7, lr}
 800d156:	b082      	sub	sp, #8
 800d158:	af00      	add	r7, sp, #0
 800d15a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800d15c:	687b      	ldr	r3, [r7, #4]
 800d15e:	2204      	movs	r2, #4
 800d160:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800d164:	2300      	movs	r3, #0
 800d166:	2200      	movs	r2, #0
 800d168:	2100      	movs	r1, #0
 800d16a:	6878      	ldr	r0, [r7, #4]
 800d16c:	f000 fd19 	bl	800dba2 <USBD_LL_Transmit>

  return USBD_OK;
 800d170:	2300      	movs	r3, #0
}
 800d172:	4618      	mov	r0, r3
 800d174:	3708      	adds	r7, #8
 800d176:	46bd      	mov	sp, r7
 800d178:	bd80      	pop	{r7, pc}

0800d17a <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus (USBD_HandleTypeDef *pdev)
{
 800d17a:	b580      	push	{r7, lr}
 800d17c:	b082      	sub	sp, #8
 800d17e:	af00      	add	r7, sp, #0
 800d180:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800d182:	687b      	ldr	r3, [r7, #4]
 800d184:	2205      	movs	r2, #5
 800d186:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

 /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 800d18a:	2300      	movs	r3, #0
 800d18c:	2200      	movs	r2, #0
 800d18e:	2100      	movs	r1, #0
 800d190:	6878      	ldr	r0, [r7, #4]
 800d192:	f000 fd29 	bl	800dbe8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800d196:	2300      	movs	r3, #0
}
 800d198:	4618      	mov	r0, r3
 800d19a:	3708      	adds	r7, #8
 800d19c:	46bd      	mov	sp, r7
 800d19e:	bd80      	pop	{r7, pc}

0800d1a0 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800d1a0:	b480      	push	{r7}
 800d1a2:	b087      	sub	sp, #28
 800d1a4:	af00      	add	r7, sp, #0
 800d1a6:	60f8      	str	r0, [r7, #12]
 800d1a8:	60b9      	str	r1, [r7, #8]
 800d1aa:	4613      	mov	r3, r2
 800d1ac:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800d1ae:	2301      	movs	r3, #1
 800d1b0:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800d1b2:	2300      	movs	r3, #0
 800d1b4:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800d1b6:	4b1f      	ldr	r3, [pc, #124]	; (800d234 <FATFS_LinkDriverEx+0x94>)
 800d1b8:	7a5b      	ldrb	r3, [r3, #9]
 800d1ba:	b2db      	uxtb	r3, r3
 800d1bc:	2b00      	cmp	r3, #0
 800d1be:	d131      	bne.n	800d224 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800d1c0:	4b1c      	ldr	r3, [pc, #112]	; (800d234 <FATFS_LinkDriverEx+0x94>)
 800d1c2:	7a5b      	ldrb	r3, [r3, #9]
 800d1c4:	b2db      	uxtb	r3, r3
 800d1c6:	461a      	mov	r2, r3
 800d1c8:	4b1a      	ldr	r3, [pc, #104]	; (800d234 <FATFS_LinkDriverEx+0x94>)
 800d1ca:	2100      	movs	r1, #0
 800d1cc:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800d1ce:	4b19      	ldr	r3, [pc, #100]	; (800d234 <FATFS_LinkDriverEx+0x94>)
 800d1d0:	7a5b      	ldrb	r3, [r3, #9]
 800d1d2:	b2db      	uxtb	r3, r3
 800d1d4:	4a17      	ldr	r2, [pc, #92]	; (800d234 <FATFS_LinkDriverEx+0x94>)
 800d1d6:	009b      	lsls	r3, r3, #2
 800d1d8:	4413      	add	r3, r2
 800d1da:	68fa      	ldr	r2, [r7, #12]
 800d1dc:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800d1de:	4b15      	ldr	r3, [pc, #84]	; (800d234 <FATFS_LinkDriverEx+0x94>)
 800d1e0:	7a5b      	ldrb	r3, [r3, #9]
 800d1e2:	b2db      	uxtb	r3, r3
 800d1e4:	461a      	mov	r2, r3
 800d1e6:	4b13      	ldr	r3, [pc, #76]	; (800d234 <FATFS_LinkDriverEx+0x94>)
 800d1e8:	4413      	add	r3, r2
 800d1ea:	79fa      	ldrb	r2, [r7, #7]
 800d1ec:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800d1ee:	4b11      	ldr	r3, [pc, #68]	; (800d234 <FATFS_LinkDriverEx+0x94>)
 800d1f0:	7a5b      	ldrb	r3, [r3, #9]
 800d1f2:	b2db      	uxtb	r3, r3
 800d1f4:	1c5a      	adds	r2, r3, #1
 800d1f6:	b2d1      	uxtb	r1, r2
 800d1f8:	4a0e      	ldr	r2, [pc, #56]	; (800d234 <FATFS_LinkDriverEx+0x94>)
 800d1fa:	7251      	strb	r1, [r2, #9]
 800d1fc:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800d1fe:	7dbb      	ldrb	r3, [r7, #22]
 800d200:	3330      	adds	r3, #48	; 0x30
 800d202:	b2da      	uxtb	r2, r3
 800d204:	68bb      	ldr	r3, [r7, #8]
 800d206:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800d208:	68bb      	ldr	r3, [r7, #8]
 800d20a:	3301      	adds	r3, #1
 800d20c:	223a      	movs	r2, #58	; 0x3a
 800d20e:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800d210:	68bb      	ldr	r3, [r7, #8]
 800d212:	3302      	adds	r3, #2
 800d214:	222f      	movs	r2, #47	; 0x2f
 800d216:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800d218:	68bb      	ldr	r3, [r7, #8]
 800d21a:	3303      	adds	r3, #3
 800d21c:	2200      	movs	r2, #0
 800d21e:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800d220:	2300      	movs	r3, #0
 800d222:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800d224:	7dfb      	ldrb	r3, [r7, #23]
}
 800d226:	4618      	mov	r0, r3
 800d228:	371c      	adds	r7, #28
 800d22a:	46bd      	mov	sp, r7
 800d22c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d230:	4770      	bx	lr
 800d232:	bf00      	nop
 800d234:	2000078c 	.word	0x2000078c

0800d238 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800d238:	b580      	push	{r7, lr}
 800d23a:	b082      	sub	sp, #8
 800d23c:	af00      	add	r7, sp, #0
 800d23e:	6078      	str	r0, [r7, #4]
 800d240:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800d242:	2200      	movs	r2, #0
 800d244:	6839      	ldr	r1, [r7, #0]
 800d246:	6878      	ldr	r0, [r7, #4]
 800d248:	f7ff ffaa 	bl	800d1a0 <FATFS_LinkDriverEx>
 800d24c:	4603      	mov	r3, r0
}
 800d24e:	4618      	mov	r0, r3
 800d250:	3708      	adds	r7, #8
 800d252:	46bd      	mov	sp, r7
 800d254:	bd80      	pop	{r7, pc}
	...

0800d258 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800d258:	b580      	push	{r7, lr}
 800d25a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800d25c:	2200      	movs	r2, #0
 800d25e:	4912      	ldr	r1, [pc, #72]	; (800d2a8 <MX_USB_DEVICE_Init+0x50>)
 800d260:	4812      	ldr	r0, [pc, #72]	; (800d2ac <MX_USB_DEVICE_Init+0x54>)
 800d262:	f7fe ff43 	bl	800c0ec <USBD_Init>
 800d266:	4603      	mov	r3, r0
 800d268:	2b00      	cmp	r3, #0
 800d26a:	d001      	beq.n	800d270 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800d26c:	f7f5 fb38 	bl	80028e0 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800d270:	490f      	ldr	r1, [pc, #60]	; (800d2b0 <MX_USB_DEVICE_Init+0x58>)
 800d272:	480e      	ldr	r0, [pc, #56]	; (800d2ac <MX_USB_DEVICE_Init+0x54>)
 800d274:	f7fe ff65 	bl	800c142 <USBD_RegisterClass>
 800d278:	4603      	mov	r3, r0
 800d27a:	2b00      	cmp	r3, #0
 800d27c:	d001      	beq.n	800d282 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800d27e:	f7f5 fb2f 	bl	80028e0 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800d282:	490c      	ldr	r1, [pc, #48]	; (800d2b4 <MX_USB_DEVICE_Init+0x5c>)
 800d284:	4809      	ldr	r0, [pc, #36]	; (800d2ac <MX_USB_DEVICE_Init+0x54>)
 800d286:	f7fe fe93 	bl	800bfb0 <USBD_CDC_RegisterInterface>
 800d28a:	4603      	mov	r3, r0
 800d28c:	2b00      	cmp	r3, #0
 800d28e:	d001      	beq.n	800d294 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800d290:	f7f5 fb26 	bl	80028e0 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800d294:	4805      	ldr	r0, [pc, #20]	; (800d2ac <MX_USB_DEVICE_Init+0x54>)
 800d296:	f7fe ff6e 	bl	800c176 <USBD_Start>
 800d29a:	4603      	mov	r3, r0
 800d29c:	2b00      	cmp	r3, #0
 800d29e:	d001      	beq.n	800d2a4 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800d2a0:	f7f5 fb1e 	bl	80028e0 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800d2a4:	bf00      	nop
 800d2a6:	bd80      	pop	{r7, pc}
 800d2a8:	20000140 	.word	0x20000140
 800d2ac:	200010cc 	.word	0x200010cc
 800d2b0:	2000002c 	.word	0x2000002c
 800d2b4:	20000130 	.word	0x20000130

0800d2b8 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800d2b8:	b580      	push	{r7, lr}
 800d2ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800d2bc:	2200      	movs	r2, #0
 800d2be:	4905      	ldr	r1, [pc, #20]	; (800d2d4 <CDC_Init_FS+0x1c>)
 800d2c0:	4805      	ldr	r0, [pc, #20]	; (800d2d8 <CDC_Init_FS+0x20>)
 800d2c2:	f7fe fe8c 	bl	800bfde <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800d2c6:	4905      	ldr	r1, [pc, #20]	; (800d2dc <CDC_Init_FS+0x24>)
 800d2c8:	4803      	ldr	r0, [pc, #12]	; (800d2d8 <CDC_Init_FS+0x20>)
 800d2ca:	f7fe fea2 	bl	800c012 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800d2ce:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800d2d0:	4618      	mov	r0, r3
 800d2d2:	bd80      	pop	{r7, pc}
 800d2d4:	20001b68 	.word	0x20001b68
 800d2d8:	200010cc 	.word	0x200010cc
 800d2dc:	20001368 	.word	0x20001368

0800d2e0 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800d2e0:	b480      	push	{r7}
 800d2e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800d2e4:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800d2e6:	4618      	mov	r0, r3
 800d2e8:	46bd      	mov	sp, r7
 800d2ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2ee:	4770      	bx	lr

0800d2f0 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800d2f0:	b480      	push	{r7}
 800d2f2:	b085      	sub	sp, #20
 800d2f4:	af00      	add	r7, sp, #0
 800d2f6:	4603      	mov	r3, r0
 800d2f8:	6039      	str	r1, [r7, #0]
 800d2fa:	71fb      	strb	r3, [r7, #7]
 800d2fc:	4613      	mov	r3, r2
 800d2fe:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
	uint8_t tempbuf[7] = {0,0,0,0,0,0,0};
 800d300:	f107 0308 	add.w	r3, r7, #8
 800d304:	2200      	movs	r2, #0
 800d306:	601a      	str	r2, [r3, #0]
 800d308:	f8c3 2003 	str.w	r2, [r3, #3]
  switch(cmd)
 800d30c:	79fb      	ldrb	r3, [r7, #7]
 800d30e:	2b23      	cmp	r3, #35	; 0x23
 800d310:	d87c      	bhi.n	800d40c <CDC_Control_FS+0x11c>
 800d312:	a201      	add	r2, pc, #4	; (adr r2, 800d318 <CDC_Control_FS+0x28>)
 800d314:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d318:	0800d40d 	.word	0x0800d40d
 800d31c:	0800d40d 	.word	0x0800d40d
 800d320:	0800d40d 	.word	0x0800d40d
 800d324:	0800d40d 	.word	0x0800d40d
 800d328:	0800d40d 	.word	0x0800d40d
 800d32c:	0800d40d 	.word	0x0800d40d
 800d330:	0800d40d 	.word	0x0800d40d
 800d334:	0800d40d 	.word	0x0800d40d
 800d338:	0800d40d 	.word	0x0800d40d
 800d33c:	0800d40d 	.word	0x0800d40d
 800d340:	0800d40d 	.word	0x0800d40d
 800d344:	0800d40d 	.word	0x0800d40d
 800d348:	0800d40d 	.word	0x0800d40d
 800d34c:	0800d40d 	.word	0x0800d40d
 800d350:	0800d40d 	.word	0x0800d40d
 800d354:	0800d40d 	.word	0x0800d40d
 800d358:	0800d40d 	.word	0x0800d40d
 800d35c:	0800d40d 	.word	0x0800d40d
 800d360:	0800d40d 	.word	0x0800d40d
 800d364:	0800d40d 	.word	0x0800d40d
 800d368:	0800d40d 	.word	0x0800d40d
 800d36c:	0800d40d 	.word	0x0800d40d
 800d370:	0800d40d 	.word	0x0800d40d
 800d374:	0800d40d 	.word	0x0800d40d
 800d378:	0800d40d 	.word	0x0800d40d
 800d37c:	0800d40d 	.word	0x0800d40d
 800d380:	0800d40d 	.word	0x0800d40d
 800d384:	0800d40d 	.word	0x0800d40d
 800d388:	0800d40d 	.word	0x0800d40d
 800d38c:	0800d40d 	.word	0x0800d40d
 800d390:	0800d40d 	.word	0x0800d40d
 800d394:	0800d40d 	.word	0x0800d40d
 800d398:	0800d3a9 	.word	0x0800d3a9
 800d39c:	0800d3d5 	.word	0x0800d3d5
 800d3a0:	0800d40d 	.word	0x0800d40d
 800d3a4:	0800d40d 	.word	0x0800d40d
  /*                                        3 - Mark                             */
  /*                                        4 - Space                            */
  /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
  /*******************************************************************************/
    case CDC_SET_LINE_CODING:
      	tempbuf[0] = pbuf[0];
 800d3a8:	683b      	ldr	r3, [r7, #0]
 800d3aa:	781b      	ldrb	r3, [r3, #0]
 800d3ac:	723b      	strb	r3, [r7, #8]
      	tempbuf[1] = pbuf[1];
 800d3ae:	683b      	ldr	r3, [r7, #0]
 800d3b0:	785b      	ldrb	r3, [r3, #1]
 800d3b2:	727b      	strb	r3, [r7, #9]
      	tempbuf[2] = pbuf[2];
 800d3b4:	683b      	ldr	r3, [r7, #0]
 800d3b6:	789b      	ldrb	r3, [r3, #2]
 800d3b8:	72bb      	strb	r3, [r7, #10]
      	tempbuf[3] = pbuf[3];
 800d3ba:	683b      	ldr	r3, [r7, #0]
 800d3bc:	78db      	ldrb	r3, [r3, #3]
 800d3be:	72fb      	strb	r3, [r7, #11]
      	tempbuf[4] = pbuf[4];
 800d3c0:	683b      	ldr	r3, [r7, #0]
 800d3c2:	791b      	ldrb	r3, [r3, #4]
 800d3c4:	733b      	strb	r3, [r7, #12]
      	tempbuf[5] = pbuf[5];
 800d3c6:	683b      	ldr	r3, [r7, #0]
 800d3c8:	795b      	ldrb	r3, [r3, #5]
 800d3ca:	737b      	strb	r3, [r7, #13]
      	tempbuf[6] = pbuf[6];
 800d3cc:	683b      	ldr	r3, [r7, #0]
 800d3ce:	799b      	ldrb	r3, [r3, #6]
 800d3d0:	73bb      	strb	r3, [r7, #14]
      	break;
 800d3d2:	e01c      	b.n	800d40e <CDC_Control_FS+0x11e>

      case CDC_GET_LINE_CODING:
      	pbuf[0] = tempbuf[0];
 800d3d4:	7a3a      	ldrb	r2, [r7, #8]
 800d3d6:	683b      	ldr	r3, [r7, #0]
 800d3d8:	701a      	strb	r2, [r3, #0]
      	pbuf[1] = tempbuf[1];
 800d3da:	683b      	ldr	r3, [r7, #0]
 800d3dc:	3301      	adds	r3, #1
 800d3de:	7a7a      	ldrb	r2, [r7, #9]
 800d3e0:	701a      	strb	r2, [r3, #0]
      	pbuf[2] = tempbuf[2];
 800d3e2:	683b      	ldr	r3, [r7, #0]
 800d3e4:	3302      	adds	r3, #2
 800d3e6:	7aba      	ldrb	r2, [r7, #10]
 800d3e8:	701a      	strb	r2, [r3, #0]
      	pbuf[3] = tempbuf[3];
 800d3ea:	683b      	ldr	r3, [r7, #0]
 800d3ec:	3303      	adds	r3, #3
 800d3ee:	7afa      	ldrb	r2, [r7, #11]
 800d3f0:	701a      	strb	r2, [r3, #0]
      	pbuf[4] = tempbuf[4];
 800d3f2:	683b      	ldr	r3, [r7, #0]
 800d3f4:	3304      	adds	r3, #4
 800d3f6:	7b3a      	ldrb	r2, [r7, #12]
 800d3f8:	701a      	strb	r2, [r3, #0]
      	pbuf[5] = tempbuf[5];
 800d3fa:	683b      	ldr	r3, [r7, #0]
 800d3fc:	3305      	adds	r3, #5
 800d3fe:	7b7a      	ldrb	r2, [r7, #13]
 800d400:	701a      	strb	r2, [r3, #0]
      	pbuf[6] = tempbuf[6];
 800d402:	683b      	ldr	r3, [r7, #0]
 800d404:	3306      	adds	r3, #6
 800d406:	7bba      	ldrb	r2, [r7, #14]
 800d408:	701a      	strb	r2, [r3, #0]
      	break;
 800d40a:	e000      	b.n	800d40e <CDC_Control_FS+0x11e>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800d40c:	bf00      	nop
  }

  return (USBD_OK);
 800d40e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800d410:	4618      	mov	r0, r3
 800d412:	3714      	adds	r7, #20
 800d414:	46bd      	mov	sp, r7
 800d416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d41a:	4770      	bx	lr

0800d41c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800d41c:	b580      	push	{r7, lr}
 800d41e:	b082      	sub	sp, #8
 800d420:	af00      	add	r7, sp, #0
 800d422:	6078      	str	r0, [r7, #4]
 800d424:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800d426:	6879      	ldr	r1, [r7, #4]
 800d428:	4805      	ldr	r0, [pc, #20]	; (800d440 <CDC_Receive_FS+0x24>)
 800d42a:	f7fe fdf2 	bl	800c012 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800d42e:	4804      	ldr	r0, [pc, #16]	; (800d440 <CDC_Receive_FS+0x24>)
 800d430:	f7fe fe32 	bl	800c098 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800d434:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800d436:	4618      	mov	r0, r3
 800d438:	3708      	adds	r7, #8
 800d43a:	46bd      	mov	sp, r7
 800d43c:	bd80      	pop	{r7, pc}
 800d43e:	bf00      	nop
 800d440:	200010cc 	.word	0x200010cc

0800d444 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800d444:	b580      	push	{r7, lr}
 800d446:	b084      	sub	sp, #16
 800d448:	af00      	add	r7, sp, #0
 800d44a:	6078      	str	r0, [r7, #4]
 800d44c:	460b      	mov	r3, r1
 800d44e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800d450:	2300      	movs	r3, #0
 800d452:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800d454:	4b0d      	ldr	r3, [pc, #52]	; (800d48c <CDC_Transmit_FS+0x48>)
 800d456:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800d45a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800d45c:	68bb      	ldr	r3, [r7, #8]
 800d45e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800d462:	2b00      	cmp	r3, #0
 800d464:	d001      	beq.n	800d46a <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800d466:	2301      	movs	r3, #1
 800d468:	e00b      	b.n	800d482 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800d46a:	887b      	ldrh	r3, [r7, #2]
 800d46c:	461a      	mov	r2, r3
 800d46e:	6879      	ldr	r1, [r7, #4]
 800d470:	4806      	ldr	r0, [pc, #24]	; (800d48c <CDC_Transmit_FS+0x48>)
 800d472:	f7fe fdb4 	bl	800bfde <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800d476:	4805      	ldr	r0, [pc, #20]	; (800d48c <CDC_Transmit_FS+0x48>)
 800d478:	f7fe fddf 	bl	800c03a <USBD_CDC_TransmitPacket>
 800d47c:	4603      	mov	r3, r0
 800d47e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800d480:	7bfb      	ldrb	r3, [r7, #15]
}
 800d482:	4618      	mov	r0, r3
 800d484:	3710      	adds	r7, #16
 800d486:	46bd      	mov	sp, r7
 800d488:	bd80      	pop	{r7, pc}
 800d48a:	bf00      	nop
 800d48c:	200010cc 	.word	0x200010cc

0800d490 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d490:	b480      	push	{r7}
 800d492:	b083      	sub	sp, #12
 800d494:	af00      	add	r7, sp, #0
 800d496:	4603      	mov	r3, r0
 800d498:	6039      	str	r1, [r7, #0]
 800d49a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800d49c:	683b      	ldr	r3, [r7, #0]
 800d49e:	2212      	movs	r2, #18
 800d4a0:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800d4a2:	4b03      	ldr	r3, [pc, #12]	; (800d4b0 <USBD_FS_DeviceDescriptor+0x20>)
}
 800d4a4:	4618      	mov	r0, r3
 800d4a6:	370c      	adds	r7, #12
 800d4a8:	46bd      	mov	sp, r7
 800d4aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4ae:	4770      	bx	lr
 800d4b0:	2000015c 	.word	0x2000015c

0800d4b4 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d4b4:	b480      	push	{r7}
 800d4b6:	b083      	sub	sp, #12
 800d4b8:	af00      	add	r7, sp, #0
 800d4ba:	4603      	mov	r3, r0
 800d4bc:	6039      	str	r1, [r7, #0]
 800d4be:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800d4c0:	683b      	ldr	r3, [r7, #0]
 800d4c2:	2204      	movs	r2, #4
 800d4c4:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800d4c6:	4b03      	ldr	r3, [pc, #12]	; (800d4d4 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800d4c8:	4618      	mov	r0, r3
 800d4ca:	370c      	adds	r7, #12
 800d4cc:	46bd      	mov	sp, r7
 800d4ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4d2:	4770      	bx	lr
 800d4d4:	20000170 	.word	0x20000170

0800d4d8 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d4d8:	b580      	push	{r7, lr}
 800d4da:	b082      	sub	sp, #8
 800d4dc:	af00      	add	r7, sp, #0
 800d4de:	4603      	mov	r3, r0
 800d4e0:	6039      	str	r1, [r7, #0]
 800d4e2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800d4e4:	79fb      	ldrb	r3, [r7, #7]
 800d4e6:	2b00      	cmp	r3, #0
 800d4e8:	d105      	bne.n	800d4f6 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800d4ea:	683a      	ldr	r2, [r7, #0]
 800d4ec:	4907      	ldr	r1, [pc, #28]	; (800d50c <USBD_FS_ProductStrDescriptor+0x34>)
 800d4ee:	4808      	ldr	r0, [pc, #32]	; (800d510 <USBD_FS_ProductStrDescriptor+0x38>)
 800d4f0:	f7ff fd78 	bl	800cfe4 <USBD_GetString>
 800d4f4:	e004      	b.n	800d500 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800d4f6:	683a      	ldr	r2, [r7, #0]
 800d4f8:	4904      	ldr	r1, [pc, #16]	; (800d50c <USBD_FS_ProductStrDescriptor+0x34>)
 800d4fa:	4805      	ldr	r0, [pc, #20]	; (800d510 <USBD_FS_ProductStrDescriptor+0x38>)
 800d4fc:	f7ff fd72 	bl	800cfe4 <USBD_GetString>
  }
  return USBD_StrDesc;
 800d500:	4b02      	ldr	r3, [pc, #8]	; (800d50c <USBD_FS_ProductStrDescriptor+0x34>)
}
 800d502:	4618      	mov	r0, r3
 800d504:	3708      	adds	r7, #8
 800d506:	46bd      	mov	sp, r7
 800d508:	bd80      	pop	{r7, pc}
 800d50a:	bf00      	nop
 800d50c:	20002368 	.word	0x20002368
 800d510:	080121bc 	.word	0x080121bc

0800d514 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d514:	b580      	push	{r7, lr}
 800d516:	b082      	sub	sp, #8
 800d518:	af00      	add	r7, sp, #0
 800d51a:	4603      	mov	r3, r0
 800d51c:	6039      	str	r1, [r7, #0]
 800d51e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800d520:	683a      	ldr	r2, [r7, #0]
 800d522:	4904      	ldr	r1, [pc, #16]	; (800d534 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800d524:	4804      	ldr	r0, [pc, #16]	; (800d538 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800d526:	f7ff fd5d 	bl	800cfe4 <USBD_GetString>
  return USBD_StrDesc;
 800d52a:	4b02      	ldr	r3, [pc, #8]	; (800d534 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800d52c:	4618      	mov	r0, r3
 800d52e:	3708      	adds	r7, #8
 800d530:	46bd      	mov	sp, r7
 800d532:	bd80      	pop	{r7, pc}
 800d534:	20002368 	.word	0x20002368
 800d538:	080121d4 	.word	0x080121d4

0800d53c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d53c:	b580      	push	{r7, lr}
 800d53e:	b082      	sub	sp, #8
 800d540:	af00      	add	r7, sp, #0
 800d542:	4603      	mov	r3, r0
 800d544:	6039      	str	r1, [r7, #0]
 800d546:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800d548:	683b      	ldr	r3, [r7, #0]
 800d54a:	221a      	movs	r2, #26
 800d54c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800d54e:	f000 f843 	bl	800d5d8 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */
  
  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800d552:	4b02      	ldr	r3, [pc, #8]	; (800d55c <USBD_FS_SerialStrDescriptor+0x20>)
}
 800d554:	4618      	mov	r0, r3
 800d556:	3708      	adds	r7, #8
 800d558:	46bd      	mov	sp, r7
 800d55a:	bd80      	pop	{r7, pc}
 800d55c:	20000174 	.word	0x20000174

0800d560 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d560:	b580      	push	{r7, lr}
 800d562:	b082      	sub	sp, #8
 800d564:	af00      	add	r7, sp, #0
 800d566:	4603      	mov	r3, r0
 800d568:	6039      	str	r1, [r7, #0]
 800d56a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800d56c:	79fb      	ldrb	r3, [r7, #7]
 800d56e:	2b00      	cmp	r3, #0
 800d570:	d105      	bne.n	800d57e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800d572:	683a      	ldr	r2, [r7, #0]
 800d574:	4907      	ldr	r1, [pc, #28]	; (800d594 <USBD_FS_ConfigStrDescriptor+0x34>)
 800d576:	4808      	ldr	r0, [pc, #32]	; (800d598 <USBD_FS_ConfigStrDescriptor+0x38>)
 800d578:	f7ff fd34 	bl	800cfe4 <USBD_GetString>
 800d57c:	e004      	b.n	800d588 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800d57e:	683a      	ldr	r2, [r7, #0]
 800d580:	4904      	ldr	r1, [pc, #16]	; (800d594 <USBD_FS_ConfigStrDescriptor+0x34>)
 800d582:	4805      	ldr	r0, [pc, #20]	; (800d598 <USBD_FS_ConfigStrDescriptor+0x38>)
 800d584:	f7ff fd2e 	bl	800cfe4 <USBD_GetString>
  }
  return USBD_StrDesc;
 800d588:	4b02      	ldr	r3, [pc, #8]	; (800d594 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800d58a:	4618      	mov	r0, r3
 800d58c:	3708      	adds	r7, #8
 800d58e:	46bd      	mov	sp, r7
 800d590:	bd80      	pop	{r7, pc}
 800d592:	bf00      	nop
 800d594:	20002368 	.word	0x20002368
 800d598:	080121e8 	.word	0x080121e8

0800d59c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d59c:	b580      	push	{r7, lr}
 800d59e:	b082      	sub	sp, #8
 800d5a0:	af00      	add	r7, sp, #0
 800d5a2:	4603      	mov	r3, r0
 800d5a4:	6039      	str	r1, [r7, #0]
 800d5a6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800d5a8:	79fb      	ldrb	r3, [r7, #7]
 800d5aa:	2b00      	cmp	r3, #0
 800d5ac:	d105      	bne.n	800d5ba <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800d5ae:	683a      	ldr	r2, [r7, #0]
 800d5b0:	4907      	ldr	r1, [pc, #28]	; (800d5d0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800d5b2:	4808      	ldr	r0, [pc, #32]	; (800d5d4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800d5b4:	f7ff fd16 	bl	800cfe4 <USBD_GetString>
 800d5b8:	e004      	b.n	800d5c4 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800d5ba:	683a      	ldr	r2, [r7, #0]
 800d5bc:	4904      	ldr	r1, [pc, #16]	; (800d5d0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800d5be:	4805      	ldr	r0, [pc, #20]	; (800d5d4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800d5c0:	f7ff fd10 	bl	800cfe4 <USBD_GetString>
  }
  return USBD_StrDesc;
 800d5c4:	4b02      	ldr	r3, [pc, #8]	; (800d5d0 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800d5c6:	4618      	mov	r0, r3
 800d5c8:	3708      	adds	r7, #8
 800d5ca:	46bd      	mov	sp, r7
 800d5cc:	bd80      	pop	{r7, pc}
 800d5ce:	bf00      	nop
 800d5d0:	20002368 	.word	0x20002368
 800d5d4:	080121f4 	.word	0x080121f4

0800d5d8 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor 
  * @param  None 
  * @retval None
  */
static void Get_SerialNum(void)
{
 800d5d8:	b580      	push	{r7, lr}
 800d5da:	b084      	sub	sp, #16
 800d5dc:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800d5de:	4b0f      	ldr	r3, [pc, #60]	; (800d61c <Get_SerialNum+0x44>)
 800d5e0:	681b      	ldr	r3, [r3, #0]
 800d5e2:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800d5e4:	4b0e      	ldr	r3, [pc, #56]	; (800d620 <Get_SerialNum+0x48>)
 800d5e6:	681b      	ldr	r3, [r3, #0]
 800d5e8:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800d5ea:	4b0e      	ldr	r3, [pc, #56]	; (800d624 <Get_SerialNum+0x4c>)
 800d5ec:	681b      	ldr	r3, [r3, #0]
 800d5ee:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800d5f0:	68fa      	ldr	r2, [r7, #12]
 800d5f2:	687b      	ldr	r3, [r7, #4]
 800d5f4:	4413      	add	r3, r2
 800d5f6:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800d5f8:	68fb      	ldr	r3, [r7, #12]
 800d5fa:	2b00      	cmp	r3, #0
 800d5fc:	d009      	beq.n	800d612 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800d5fe:	2208      	movs	r2, #8
 800d600:	4909      	ldr	r1, [pc, #36]	; (800d628 <Get_SerialNum+0x50>)
 800d602:	68f8      	ldr	r0, [r7, #12]
 800d604:	f000 f814 	bl	800d630 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800d608:	2204      	movs	r2, #4
 800d60a:	4908      	ldr	r1, [pc, #32]	; (800d62c <Get_SerialNum+0x54>)
 800d60c:	68b8      	ldr	r0, [r7, #8]
 800d60e:	f000 f80f 	bl	800d630 <IntToUnicode>
  }
}
 800d612:	bf00      	nop
 800d614:	3710      	adds	r7, #16
 800d616:	46bd      	mov	sp, r7
 800d618:	bd80      	pop	{r7, pc}
 800d61a:	bf00      	nop
 800d61c:	1fff7a10 	.word	0x1fff7a10
 800d620:	1fff7a14 	.word	0x1fff7a14
 800d624:	1fff7a18 	.word	0x1fff7a18
 800d628:	20000176 	.word	0x20000176
 800d62c:	20000186 	.word	0x20000186

0800d630 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer 
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800d630:	b480      	push	{r7}
 800d632:	b087      	sub	sp, #28
 800d634:	af00      	add	r7, sp, #0
 800d636:	60f8      	str	r0, [r7, #12]
 800d638:	60b9      	str	r1, [r7, #8]
 800d63a:	4613      	mov	r3, r2
 800d63c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800d63e:	2300      	movs	r3, #0
 800d640:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800d642:	2300      	movs	r3, #0
 800d644:	75fb      	strb	r3, [r7, #23]
 800d646:	e027      	b.n	800d698 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800d648:	68fb      	ldr	r3, [r7, #12]
 800d64a:	0f1b      	lsrs	r3, r3, #28
 800d64c:	2b09      	cmp	r3, #9
 800d64e:	d80b      	bhi.n	800d668 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800d650:	68fb      	ldr	r3, [r7, #12]
 800d652:	0f1b      	lsrs	r3, r3, #28
 800d654:	b2da      	uxtb	r2, r3
 800d656:	7dfb      	ldrb	r3, [r7, #23]
 800d658:	005b      	lsls	r3, r3, #1
 800d65a:	4619      	mov	r1, r3
 800d65c:	68bb      	ldr	r3, [r7, #8]
 800d65e:	440b      	add	r3, r1
 800d660:	3230      	adds	r2, #48	; 0x30
 800d662:	b2d2      	uxtb	r2, r2
 800d664:	701a      	strb	r2, [r3, #0]
 800d666:	e00a      	b.n	800d67e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800d668:	68fb      	ldr	r3, [r7, #12]
 800d66a:	0f1b      	lsrs	r3, r3, #28
 800d66c:	b2da      	uxtb	r2, r3
 800d66e:	7dfb      	ldrb	r3, [r7, #23]
 800d670:	005b      	lsls	r3, r3, #1
 800d672:	4619      	mov	r1, r3
 800d674:	68bb      	ldr	r3, [r7, #8]
 800d676:	440b      	add	r3, r1
 800d678:	3237      	adds	r2, #55	; 0x37
 800d67a:	b2d2      	uxtb	r2, r2
 800d67c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800d67e:	68fb      	ldr	r3, [r7, #12]
 800d680:	011b      	lsls	r3, r3, #4
 800d682:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800d684:	7dfb      	ldrb	r3, [r7, #23]
 800d686:	005b      	lsls	r3, r3, #1
 800d688:	3301      	adds	r3, #1
 800d68a:	68ba      	ldr	r2, [r7, #8]
 800d68c:	4413      	add	r3, r2
 800d68e:	2200      	movs	r2, #0
 800d690:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800d692:	7dfb      	ldrb	r3, [r7, #23]
 800d694:	3301      	adds	r3, #1
 800d696:	75fb      	strb	r3, [r7, #23]
 800d698:	7dfa      	ldrb	r2, [r7, #23]
 800d69a:	79fb      	ldrb	r3, [r7, #7]
 800d69c:	429a      	cmp	r2, r3
 800d69e:	d3d3      	bcc.n	800d648 <IntToUnicode+0x18>
  }
}
 800d6a0:	bf00      	nop
 800d6a2:	371c      	adds	r7, #28
 800d6a4:	46bd      	mov	sp, r7
 800d6a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6aa:	4770      	bx	lr

0800d6ac <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800d6ac:	b580      	push	{r7, lr}
 800d6ae:	b08a      	sub	sp, #40	; 0x28
 800d6b0:	af00      	add	r7, sp, #0
 800d6b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800d6b4:	f107 0314 	add.w	r3, r7, #20
 800d6b8:	2200      	movs	r2, #0
 800d6ba:	601a      	str	r2, [r3, #0]
 800d6bc:	605a      	str	r2, [r3, #4]
 800d6be:	609a      	str	r2, [r3, #8]
 800d6c0:	60da      	str	r2, [r3, #12]
 800d6c2:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800d6c4:	687b      	ldr	r3, [r7, #4]
 800d6c6:	681b      	ldr	r3, [r3, #0]
 800d6c8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800d6cc:	d13a      	bne.n	800d744 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800d6ce:	2300      	movs	r3, #0
 800d6d0:	613b      	str	r3, [r7, #16]
 800d6d2:	4b1e      	ldr	r3, [pc, #120]	; (800d74c <HAL_PCD_MspInit+0xa0>)
 800d6d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d6d6:	4a1d      	ldr	r2, [pc, #116]	; (800d74c <HAL_PCD_MspInit+0xa0>)
 800d6d8:	f043 0301 	orr.w	r3, r3, #1
 800d6dc:	6313      	str	r3, [r2, #48]	; 0x30
 800d6de:	4b1b      	ldr	r3, [pc, #108]	; (800d74c <HAL_PCD_MspInit+0xa0>)
 800d6e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d6e2:	f003 0301 	and.w	r3, r3, #1
 800d6e6:	613b      	str	r3, [r7, #16]
 800d6e8:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration    
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800d6ea:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800d6ee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d6f0:	2302      	movs	r3, #2
 800d6f2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d6f4:	2300      	movs	r3, #0
 800d6f6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800d6f8:	2303      	movs	r3, #3
 800d6fa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800d6fc:	230a      	movs	r3, #10
 800d6fe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800d700:	f107 0314 	add.w	r3, r7, #20
 800d704:	4619      	mov	r1, r3
 800d706:	4812      	ldr	r0, [pc, #72]	; (800d750 <HAL_PCD_MspInit+0xa4>)
 800d708:	f7f6 f982 	bl	8003a10 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800d70c:	4b0f      	ldr	r3, [pc, #60]	; (800d74c <HAL_PCD_MspInit+0xa0>)
 800d70e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d710:	4a0e      	ldr	r2, [pc, #56]	; (800d74c <HAL_PCD_MspInit+0xa0>)
 800d712:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d716:	6353      	str	r3, [r2, #52]	; 0x34
 800d718:	2300      	movs	r3, #0
 800d71a:	60fb      	str	r3, [r7, #12]
 800d71c:	4b0b      	ldr	r3, [pc, #44]	; (800d74c <HAL_PCD_MspInit+0xa0>)
 800d71e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d720:	4a0a      	ldr	r2, [pc, #40]	; (800d74c <HAL_PCD_MspInit+0xa0>)
 800d722:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800d726:	6453      	str	r3, [r2, #68]	; 0x44
 800d728:	4b08      	ldr	r3, [pc, #32]	; (800d74c <HAL_PCD_MspInit+0xa0>)
 800d72a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d72c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d730:	60fb      	str	r3, [r7, #12]
 800d732:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800d734:	2200      	movs	r2, #0
 800d736:	2100      	movs	r1, #0
 800d738:	2043      	movs	r0, #67	; 0x43
 800d73a:	f7f5 fd96 	bl	800326a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800d73e:	2043      	movs	r0, #67	; 0x43
 800d740:	f7f5 fdaf 	bl	80032a2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800d744:	bf00      	nop
 800d746:	3728      	adds	r7, #40	; 0x28
 800d748:	46bd      	mov	sp, r7
 800d74a:	bd80      	pop	{r7, pc}
 800d74c:	40023800 	.word	0x40023800
 800d750:	40020000 	.word	0x40020000

0800d754 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d754:	b580      	push	{r7, lr}
 800d756:	b082      	sub	sp, #8
 800d758:	af00      	add	r7, sp, #0
 800d75a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800d75c:	687b      	ldr	r3, [r7, #4]
 800d75e:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 800d762:	687b      	ldr	r3, [r7, #4]
 800d764:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800d768:	4619      	mov	r1, r3
 800d76a:	4610      	mov	r0, r2
 800d76c:	f7fe fd4c 	bl	800c208 <USBD_LL_SetupStage>
}
 800d770:	bf00      	nop
 800d772:	3708      	adds	r7, #8
 800d774:	46bd      	mov	sp, r7
 800d776:	bd80      	pop	{r7, pc}

0800d778 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d778:	b580      	push	{r7, lr}
 800d77a:	b082      	sub	sp, #8
 800d77c:	af00      	add	r7, sp, #0
 800d77e:	6078      	str	r0, [r7, #4]
 800d780:	460b      	mov	r3, r1
 800d782:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800d784:	687b      	ldr	r3, [r7, #4]
 800d786:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800d78a:	78fa      	ldrb	r2, [r7, #3]
 800d78c:	6879      	ldr	r1, [r7, #4]
 800d78e:	4613      	mov	r3, r2
 800d790:	00db      	lsls	r3, r3, #3
 800d792:	1a9b      	subs	r3, r3, r2
 800d794:	009b      	lsls	r3, r3, #2
 800d796:	440b      	add	r3, r1
 800d798:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800d79c:	681a      	ldr	r2, [r3, #0]
 800d79e:	78fb      	ldrb	r3, [r7, #3]
 800d7a0:	4619      	mov	r1, r3
 800d7a2:	f7fe fd7c 	bl	800c29e <USBD_LL_DataOutStage>
}
 800d7a6:	bf00      	nop
 800d7a8:	3708      	adds	r7, #8
 800d7aa:	46bd      	mov	sp, r7
 800d7ac:	bd80      	pop	{r7, pc}

0800d7ae <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d7ae:	b580      	push	{r7, lr}
 800d7b0:	b082      	sub	sp, #8
 800d7b2:	af00      	add	r7, sp, #0
 800d7b4:	6078      	str	r0, [r7, #4]
 800d7b6:	460b      	mov	r3, r1
 800d7b8:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800d7ba:	687b      	ldr	r3, [r7, #4]
 800d7bc:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800d7c0:	78fa      	ldrb	r2, [r7, #3]
 800d7c2:	6879      	ldr	r1, [r7, #4]
 800d7c4:	4613      	mov	r3, r2
 800d7c6:	00db      	lsls	r3, r3, #3
 800d7c8:	1a9b      	subs	r3, r3, r2
 800d7ca:	009b      	lsls	r3, r3, #2
 800d7cc:	440b      	add	r3, r1
 800d7ce:	3348      	adds	r3, #72	; 0x48
 800d7d0:	681a      	ldr	r2, [r3, #0]
 800d7d2:	78fb      	ldrb	r3, [r7, #3]
 800d7d4:	4619      	mov	r1, r3
 800d7d6:	f7fe fdd3 	bl	800c380 <USBD_LL_DataInStage>
}
 800d7da:	bf00      	nop
 800d7dc:	3708      	adds	r7, #8
 800d7de:	46bd      	mov	sp, r7
 800d7e0:	bd80      	pop	{r7, pc}

0800d7e2 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d7e2:	b580      	push	{r7, lr}
 800d7e4:	b082      	sub	sp, #8
 800d7e6:	af00      	add	r7, sp, #0
 800d7e8:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800d7ea:	687b      	ldr	r3, [r7, #4]
 800d7ec:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800d7f0:	4618      	mov	r0, r3
 800d7f2:	f7fe fee1 	bl	800c5b8 <USBD_LL_SOF>
}
 800d7f6:	bf00      	nop
 800d7f8:	3708      	adds	r7, #8
 800d7fa:	46bd      	mov	sp, r7
 800d7fc:	bd80      	pop	{r7, pc}

0800d7fe <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{ 
 800d7fe:	b580      	push	{r7, lr}
 800d800:	b084      	sub	sp, #16
 800d802:	af00      	add	r7, sp, #0
 800d804:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800d806:	2301      	movs	r3, #1
 800d808:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800d80a:	687b      	ldr	r3, [r7, #4]
 800d80c:	68db      	ldr	r3, [r3, #12]
 800d80e:	2b00      	cmp	r3, #0
 800d810:	d102      	bne.n	800d818 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800d812:	2300      	movs	r3, #0
 800d814:	73fb      	strb	r3, [r7, #15]
 800d816:	e008      	b.n	800d82a <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800d818:	687b      	ldr	r3, [r7, #4]
 800d81a:	68db      	ldr	r3, [r3, #12]
 800d81c:	2b02      	cmp	r3, #2
 800d81e:	d102      	bne.n	800d826 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800d820:	2301      	movs	r3, #1
 800d822:	73fb      	strb	r3, [r7, #15]
 800d824:	e001      	b.n	800d82a <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800d826:	f7f5 f85b 	bl	80028e0 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800d82a:	687b      	ldr	r3, [r7, #4]
 800d82c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800d830:	7bfa      	ldrb	r2, [r7, #15]
 800d832:	4611      	mov	r1, r2
 800d834:	4618      	mov	r0, r3
 800d836:	f7fe fe89 	bl	800c54c <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800d83a:	687b      	ldr	r3, [r7, #4]
 800d83c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800d840:	4618      	mov	r0, r3
 800d842:	f7fe fe42 	bl	800c4ca <USBD_LL_Reset>
}
 800d846:	bf00      	nop
 800d848:	3710      	adds	r7, #16
 800d84a:	46bd      	mov	sp, r7
 800d84c:	bd80      	pop	{r7, pc}
	...

0800d850 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d850:	b580      	push	{r7, lr}
 800d852:	b082      	sub	sp, #8
 800d854:	af00      	add	r7, sp, #0
 800d856:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800d858:	687b      	ldr	r3, [r7, #4]
 800d85a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800d85e:	4618      	mov	r0, r3
 800d860:	f7fe fe84 	bl	800c56c <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800d864:	687b      	ldr	r3, [r7, #4]
 800d866:	681b      	ldr	r3, [r3, #0]
 800d868:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800d86c:	681b      	ldr	r3, [r3, #0]
 800d86e:	687a      	ldr	r2, [r7, #4]
 800d870:	6812      	ldr	r2, [r2, #0]
 800d872:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800d876:	f043 0301 	orr.w	r3, r3, #1
 800d87a:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800d87c:	687b      	ldr	r3, [r7, #4]
 800d87e:	6a1b      	ldr	r3, [r3, #32]
 800d880:	2b00      	cmp	r3, #0
 800d882:	d005      	beq.n	800d890 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800d884:	4b04      	ldr	r3, [pc, #16]	; (800d898 <HAL_PCD_SuspendCallback+0x48>)
 800d886:	691b      	ldr	r3, [r3, #16]
 800d888:	4a03      	ldr	r2, [pc, #12]	; (800d898 <HAL_PCD_SuspendCallback+0x48>)
 800d88a:	f043 0306 	orr.w	r3, r3, #6
 800d88e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800d890:	bf00      	nop
 800d892:	3708      	adds	r7, #8
 800d894:	46bd      	mov	sp, r7
 800d896:	bd80      	pop	{r7, pc}
 800d898:	e000ed00 	.word	0xe000ed00

0800d89c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d89c:	b580      	push	{r7, lr}
 800d89e:	b082      	sub	sp, #8
 800d8a0:	af00      	add	r7, sp, #0
 800d8a2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800d8a4:	687b      	ldr	r3, [r7, #4]
 800d8a6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800d8aa:	4618      	mov	r0, r3
 800d8ac:	f7fe fe73 	bl	800c596 <USBD_LL_Resume>
}
 800d8b0:	bf00      	nop
 800d8b2:	3708      	adds	r7, #8
 800d8b4:	46bd      	mov	sp, r7
 800d8b6:	bd80      	pop	{r7, pc}

0800d8b8 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d8b8:	b580      	push	{r7, lr}
 800d8ba:	b082      	sub	sp, #8
 800d8bc:	af00      	add	r7, sp, #0
 800d8be:	6078      	str	r0, [r7, #4]
 800d8c0:	460b      	mov	r3, r1
 800d8c2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800d8c4:	687b      	ldr	r3, [r7, #4]
 800d8c6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800d8ca:	78fa      	ldrb	r2, [r7, #3]
 800d8cc:	4611      	mov	r1, r2
 800d8ce:	4618      	mov	r0, r3
 800d8d0:	f7fe fe99 	bl	800c606 <USBD_LL_IsoOUTIncomplete>
}
 800d8d4:	bf00      	nop
 800d8d6:	3708      	adds	r7, #8
 800d8d8:	46bd      	mov	sp, r7
 800d8da:	bd80      	pop	{r7, pc}

0800d8dc <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d8dc:	b580      	push	{r7, lr}
 800d8de:	b082      	sub	sp, #8
 800d8e0:	af00      	add	r7, sp, #0
 800d8e2:	6078      	str	r0, [r7, #4]
 800d8e4:	460b      	mov	r3, r1
 800d8e6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800d8e8:	687b      	ldr	r3, [r7, #4]
 800d8ea:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800d8ee:	78fa      	ldrb	r2, [r7, #3]
 800d8f0:	4611      	mov	r1, r2
 800d8f2:	4618      	mov	r0, r3
 800d8f4:	f7fe fe7a 	bl	800c5ec <USBD_LL_IsoINIncomplete>
}
 800d8f8:	bf00      	nop
 800d8fa:	3708      	adds	r7, #8
 800d8fc:	46bd      	mov	sp, r7
 800d8fe:	bd80      	pop	{r7, pc}

0800d900 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d900:	b580      	push	{r7, lr}
 800d902:	b082      	sub	sp, #8
 800d904:	af00      	add	r7, sp, #0
 800d906:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800d908:	687b      	ldr	r3, [r7, #4]
 800d90a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800d90e:	4618      	mov	r0, r3
 800d910:	f7fe fe86 	bl	800c620 <USBD_LL_DevConnected>
}
 800d914:	bf00      	nop
 800d916:	3708      	adds	r7, #8
 800d918:	46bd      	mov	sp, r7
 800d91a:	bd80      	pop	{r7, pc}

0800d91c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d91c:	b580      	push	{r7, lr}
 800d91e:	b082      	sub	sp, #8
 800d920:	af00      	add	r7, sp, #0
 800d922:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800d924:	687b      	ldr	r3, [r7, #4]
 800d926:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800d92a:	4618      	mov	r0, r3
 800d92c:	f7fe fe83 	bl	800c636 <USBD_LL_DevDisconnected>
}
 800d930:	bf00      	nop
 800d932:	3708      	adds	r7, #8
 800d934:	46bd      	mov	sp, r7
 800d936:	bd80      	pop	{r7, pc}

0800d938 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800d938:	b580      	push	{r7, lr}
 800d93a:	b082      	sub	sp, #8
 800d93c:	af00      	add	r7, sp, #0
 800d93e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800d940:	687b      	ldr	r3, [r7, #4]
 800d942:	781b      	ldrb	r3, [r3, #0]
 800d944:	2b00      	cmp	r3, #0
 800d946:	d13c      	bne.n	800d9c2 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800d948:	4a20      	ldr	r2, [pc, #128]	; (800d9cc <USBD_LL_Init+0x94>)
 800d94a:	687b      	ldr	r3, [r7, #4]
 800d94c:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 800d950:	687b      	ldr	r3, [r7, #4]
 800d952:	4a1e      	ldr	r2, [pc, #120]	; (800d9cc <USBD_LL_Init+0x94>)
 800d954:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298
  
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800d958:	4b1c      	ldr	r3, [pc, #112]	; (800d9cc <USBD_LL_Init+0x94>)
 800d95a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800d95e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800d960:	4b1a      	ldr	r3, [pc, #104]	; (800d9cc <USBD_LL_Init+0x94>)
 800d962:	2204      	movs	r2, #4
 800d964:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800d966:	4b19      	ldr	r3, [pc, #100]	; (800d9cc <USBD_LL_Init+0x94>)
 800d968:	2202      	movs	r2, #2
 800d96a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800d96c:	4b17      	ldr	r3, [pc, #92]	; (800d9cc <USBD_LL_Init+0x94>)
 800d96e:	2200      	movs	r2, #0
 800d970:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800d972:	4b16      	ldr	r3, [pc, #88]	; (800d9cc <USBD_LL_Init+0x94>)
 800d974:	2202      	movs	r2, #2
 800d976:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800d978:	4b14      	ldr	r3, [pc, #80]	; (800d9cc <USBD_LL_Init+0x94>)
 800d97a:	2200      	movs	r2, #0
 800d97c:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800d97e:	4b13      	ldr	r3, [pc, #76]	; (800d9cc <USBD_LL_Init+0x94>)
 800d980:	2200      	movs	r2, #0
 800d982:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800d984:	4b11      	ldr	r3, [pc, #68]	; (800d9cc <USBD_LL_Init+0x94>)
 800d986:	2200      	movs	r2, #0
 800d988:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800d98a:	4b10      	ldr	r3, [pc, #64]	; (800d9cc <USBD_LL_Init+0x94>)
 800d98c:	2200      	movs	r2, #0
 800d98e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800d990:	4b0e      	ldr	r3, [pc, #56]	; (800d9cc <USBD_LL_Init+0x94>)
 800d992:	2200      	movs	r2, #0
 800d994:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800d996:	480d      	ldr	r0, [pc, #52]	; (800d9cc <USBD_LL_Init+0x94>)
 800d998:	f7f7 f9e7 	bl	8004d6a <HAL_PCD_Init>
 800d99c:	4603      	mov	r3, r0
 800d99e:	2b00      	cmp	r3, #0
 800d9a0:	d001      	beq.n	800d9a6 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800d9a2:	f7f4 ff9d 	bl	80028e0 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800d9a6:	2180      	movs	r1, #128	; 0x80
 800d9a8:	4808      	ldr	r0, [pc, #32]	; (800d9cc <USBD_LL_Init+0x94>)
 800d9aa:	f7f8 fb4c 	bl	8006046 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800d9ae:	2240      	movs	r2, #64	; 0x40
 800d9b0:	2100      	movs	r1, #0
 800d9b2:	4806      	ldr	r0, [pc, #24]	; (800d9cc <USBD_LL_Init+0x94>)
 800d9b4:	f7f8 fb00 	bl	8005fb8 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800d9b8:	2280      	movs	r2, #128	; 0x80
 800d9ba:	2101      	movs	r1, #1
 800d9bc:	4803      	ldr	r0, [pc, #12]	; (800d9cc <USBD_LL_Init+0x94>)
 800d9be:	f7f8 fafb 	bl	8005fb8 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800d9c2:	2300      	movs	r3, #0
}
 800d9c4:	4618      	mov	r0, r3
 800d9c6:	3708      	adds	r7, #8
 800d9c8:	46bd      	mov	sp, r7
 800d9ca:	bd80      	pop	{r7, pc}
 800d9cc:	20002568 	.word	0x20002568

0800d9d0 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver. 
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800d9d0:	b580      	push	{r7, lr}
 800d9d2:	b084      	sub	sp, #16
 800d9d4:	af00      	add	r7, sp, #0
 800d9d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d9d8:	2300      	movs	r3, #0
 800d9da:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d9dc:	2300      	movs	r3, #0
 800d9de:	73bb      	strb	r3, [r7, #14]
 
  hal_status = HAL_PCD_Start(pdev->pData);
 800d9e0:	687b      	ldr	r3, [r7, #4]
 800d9e2:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800d9e6:	4618      	mov	r0, r3
 800d9e8:	f7f7 fadc 	bl	8004fa4 <HAL_PCD_Start>
 800d9ec:	4603      	mov	r3, r0
 800d9ee:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);     
 800d9f0:	7bfb      	ldrb	r3, [r7, #15]
 800d9f2:	4618      	mov	r0, r3
 800d9f4:	f000 f92e 	bl	800dc54 <USBD_Get_USB_Status>
 800d9f8:	4603      	mov	r3, r0
 800d9fa:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 800d9fc:	7bbb      	ldrb	r3, [r7, #14]
}
 800d9fe:	4618      	mov	r0, r3
 800da00:	3710      	adds	r7, #16
 800da02:	46bd      	mov	sp, r7
 800da04:	bd80      	pop	{r7, pc}

0800da06 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800da06:	b580      	push	{r7, lr}
 800da08:	b084      	sub	sp, #16
 800da0a:	af00      	add	r7, sp, #0
 800da0c:	6078      	str	r0, [r7, #4]
 800da0e:	4608      	mov	r0, r1
 800da10:	4611      	mov	r1, r2
 800da12:	461a      	mov	r2, r3
 800da14:	4603      	mov	r3, r0
 800da16:	70fb      	strb	r3, [r7, #3]
 800da18:	460b      	mov	r3, r1
 800da1a:	70bb      	strb	r3, [r7, #2]
 800da1c:	4613      	mov	r3, r2
 800da1e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800da20:	2300      	movs	r3, #0
 800da22:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800da24:	2300      	movs	r3, #0
 800da26:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800da28:	687b      	ldr	r3, [r7, #4]
 800da2a:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 800da2e:	78bb      	ldrb	r3, [r7, #2]
 800da30:	883a      	ldrh	r2, [r7, #0]
 800da32:	78f9      	ldrb	r1, [r7, #3]
 800da34:	f7f7 feb1 	bl	800579a <HAL_PCD_EP_Open>
 800da38:	4603      	mov	r3, r0
 800da3a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800da3c:	7bfb      	ldrb	r3, [r7, #15]
 800da3e:	4618      	mov	r0, r3
 800da40:	f000 f908 	bl	800dc54 <USBD_Get_USB_Status>
 800da44:	4603      	mov	r3, r0
 800da46:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 800da48:	7bbb      	ldrb	r3, [r7, #14]
}
 800da4a:	4618      	mov	r0, r3
 800da4c:	3710      	adds	r7, #16
 800da4e:	46bd      	mov	sp, r7
 800da50:	bd80      	pop	{r7, pc}

0800da52 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800da52:	b580      	push	{r7, lr}
 800da54:	b084      	sub	sp, #16
 800da56:	af00      	add	r7, sp, #0
 800da58:	6078      	str	r0, [r7, #4]
 800da5a:	460b      	mov	r3, r1
 800da5c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800da5e:	2300      	movs	r3, #0
 800da60:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800da62:	2300      	movs	r3, #0
 800da64:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800da66:	687b      	ldr	r3, [r7, #4]
 800da68:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800da6c:	78fa      	ldrb	r2, [r7, #3]
 800da6e:	4611      	mov	r1, r2
 800da70:	4618      	mov	r0, r3
 800da72:	f7f7 fefa 	bl	800586a <HAL_PCD_EP_Close>
 800da76:	4603      	mov	r3, r0
 800da78:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);    
 800da7a:	7bfb      	ldrb	r3, [r7, #15]
 800da7c:	4618      	mov	r0, r3
 800da7e:	f000 f8e9 	bl	800dc54 <USBD_Get_USB_Status>
 800da82:	4603      	mov	r3, r0
 800da84:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;  
 800da86:	7bbb      	ldrb	r3, [r7, #14]
}
 800da88:	4618      	mov	r0, r3
 800da8a:	3710      	adds	r7, #16
 800da8c:	46bd      	mov	sp, r7
 800da8e:	bd80      	pop	{r7, pc}

0800da90 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800da90:	b580      	push	{r7, lr}
 800da92:	b084      	sub	sp, #16
 800da94:	af00      	add	r7, sp, #0
 800da96:	6078      	str	r0, [r7, #4]
 800da98:	460b      	mov	r3, r1
 800da9a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800da9c:	2300      	movs	r3, #0
 800da9e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800daa0:	2300      	movs	r3, #0
 800daa2:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800daa4:	687b      	ldr	r3, [r7, #4]
 800daa6:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800daaa:	78fa      	ldrb	r2, [r7, #3]
 800daac:	4611      	mov	r1, r2
 800daae:	4618      	mov	r0, r3
 800dab0:	f7f7 ffd2 	bl	8005a58 <HAL_PCD_EP_SetStall>
 800dab4:	4603      	mov	r3, r0
 800dab6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800dab8:	7bfb      	ldrb	r3, [r7, #15]
 800daba:	4618      	mov	r0, r3
 800dabc:	f000 f8ca 	bl	800dc54 <USBD_Get_USB_Status>
 800dac0:	4603      	mov	r3, r0
 800dac2:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;  
 800dac4:	7bbb      	ldrb	r3, [r7, #14]
}
 800dac6:	4618      	mov	r0, r3
 800dac8:	3710      	adds	r7, #16
 800daca:	46bd      	mov	sp, r7
 800dacc:	bd80      	pop	{r7, pc}

0800dace <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800dace:	b580      	push	{r7, lr}
 800dad0:	b084      	sub	sp, #16
 800dad2:	af00      	add	r7, sp, #0
 800dad4:	6078      	str	r0, [r7, #4]
 800dad6:	460b      	mov	r3, r1
 800dad8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800dada:	2300      	movs	r3, #0
 800dadc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800dade:	2300      	movs	r3, #0
 800dae0:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800dae2:	687b      	ldr	r3, [r7, #4]
 800dae4:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800dae8:	78fa      	ldrb	r2, [r7, #3]
 800daea:	4611      	mov	r1, r2
 800daec:	4618      	mov	r0, r3
 800daee:	f7f8 f817 	bl	8005b20 <HAL_PCD_EP_ClrStall>
 800daf2:	4603      	mov	r3, r0
 800daf4:	73fb      	strb	r3, [r7, #15]
    
  usb_status =  USBD_Get_USB_Status(hal_status);  
 800daf6:	7bfb      	ldrb	r3, [r7, #15]
 800daf8:	4618      	mov	r0, r3
 800dafa:	f000 f8ab 	bl	800dc54 <USBD_Get_USB_Status>
 800dafe:	4603      	mov	r3, r0
 800db00:	73bb      	strb	r3, [r7, #14]
  
  return usb_status; 
 800db02:	7bbb      	ldrb	r3, [r7, #14]
}
 800db04:	4618      	mov	r0, r3
 800db06:	3710      	adds	r7, #16
 800db08:	46bd      	mov	sp, r7
 800db0a:	bd80      	pop	{r7, pc}

0800db0c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800db0c:	b480      	push	{r7}
 800db0e:	b085      	sub	sp, #20
 800db10:	af00      	add	r7, sp, #0
 800db12:	6078      	str	r0, [r7, #4]
 800db14:	460b      	mov	r3, r1
 800db16:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800db18:	687b      	ldr	r3, [r7, #4]
 800db1a:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800db1e:	60fb      	str	r3, [r7, #12]
  
  if((ep_addr & 0x80) == 0x80)
 800db20:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800db24:	2b00      	cmp	r3, #0
 800db26:	da0b      	bge.n	800db40 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 800db28:	78fb      	ldrb	r3, [r7, #3]
 800db2a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800db2e:	68f9      	ldr	r1, [r7, #12]
 800db30:	4613      	mov	r3, r2
 800db32:	00db      	lsls	r3, r3, #3
 800db34:	1a9b      	subs	r3, r3, r2
 800db36:	009b      	lsls	r3, r3, #2
 800db38:	440b      	add	r3, r1
 800db3a:	333e      	adds	r3, #62	; 0x3e
 800db3c:	781b      	ldrb	r3, [r3, #0]
 800db3e:	e00b      	b.n	800db58 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 800db40:	78fb      	ldrb	r3, [r7, #3]
 800db42:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800db46:	68f9      	ldr	r1, [r7, #12]
 800db48:	4613      	mov	r3, r2
 800db4a:	00db      	lsls	r3, r3, #3
 800db4c:	1a9b      	subs	r3, r3, r2
 800db4e:	009b      	lsls	r3, r3, #2
 800db50:	440b      	add	r3, r1
 800db52:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800db56:	781b      	ldrb	r3, [r3, #0]
  }
}
 800db58:	4618      	mov	r0, r3
 800db5a:	3714      	adds	r7, #20
 800db5c:	46bd      	mov	sp, r7
 800db5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db62:	4770      	bx	lr

0800db64 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800db64:	b580      	push	{r7, lr}
 800db66:	b084      	sub	sp, #16
 800db68:	af00      	add	r7, sp, #0
 800db6a:	6078      	str	r0, [r7, #4]
 800db6c:	460b      	mov	r3, r1
 800db6e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800db70:	2300      	movs	r3, #0
 800db72:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800db74:	2300      	movs	r3, #0
 800db76:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800db78:	687b      	ldr	r3, [r7, #4]
 800db7a:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800db7e:	78fa      	ldrb	r2, [r7, #3]
 800db80:	4611      	mov	r1, r2
 800db82:	4618      	mov	r0, r3
 800db84:	f7f7 fde4 	bl	8005750 <HAL_PCD_SetAddress>
 800db88:	4603      	mov	r3, r0
 800db8a:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);
 800db8c:	7bfb      	ldrb	r3, [r7, #15]
 800db8e:	4618      	mov	r0, r3
 800db90:	f000 f860 	bl	800dc54 <USBD_Get_USB_Status>
 800db94:	4603      	mov	r3, r0
 800db96:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;  
 800db98:	7bbb      	ldrb	r3, [r7, #14]
}
 800db9a:	4618      	mov	r0, r3
 800db9c:	3710      	adds	r7, #16
 800db9e:	46bd      	mov	sp, r7
 800dba0:	bd80      	pop	{r7, pc}

0800dba2 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800dba2:	b580      	push	{r7, lr}
 800dba4:	b086      	sub	sp, #24
 800dba6:	af00      	add	r7, sp, #0
 800dba8:	60f8      	str	r0, [r7, #12]
 800dbaa:	607a      	str	r2, [r7, #4]
 800dbac:	461a      	mov	r2, r3
 800dbae:	460b      	mov	r3, r1
 800dbb0:	72fb      	strb	r3, [r7, #11]
 800dbb2:	4613      	mov	r3, r2
 800dbb4:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800dbb6:	2300      	movs	r3, #0
 800dbb8:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800dbba:	2300      	movs	r3, #0
 800dbbc:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800dbbe:	68fb      	ldr	r3, [r7, #12]
 800dbc0:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 800dbc4:	893b      	ldrh	r3, [r7, #8]
 800dbc6:	7af9      	ldrb	r1, [r7, #11]
 800dbc8:	687a      	ldr	r2, [r7, #4]
 800dbca:	f7f7 fefb 	bl	80059c4 <HAL_PCD_EP_Transmit>
 800dbce:	4603      	mov	r3, r0
 800dbd0:	75fb      	strb	r3, [r7, #23]
  
  usb_status =  USBD_Get_USB_Status(hal_status); 
 800dbd2:	7dfb      	ldrb	r3, [r7, #23]
 800dbd4:	4618      	mov	r0, r3
 800dbd6:	f000 f83d 	bl	800dc54 <USBD_Get_USB_Status>
 800dbda:	4603      	mov	r3, r0
 800dbdc:	75bb      	strb	r3, [r7, #22]
  
  return usb_status;    
 800dbde:	7dbb      	ldrb	r3, [r7, #22]
}
 800dbe0:	4618      	mov	r0, r3
 800dbe2:	3718      	adds	r7, #24
 800dbe4:	46bd      	mov	sp, r7
 800dbe6:	bd80      	pop	{r7, pc}

0800dbe8 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800dbe8:	b580      	push	{r7, lr}
 800dbea:	b086      	sub	sp, #24
 800dbec:	af00      	add	r7, sp, #0
 800dbee:	60f8      	str	r0, [r7, #12]
 800dbf0:	607a      	str	r2, [r7, #4]
 800dbf2:	461a      	mov	r2, r3
 800dbf4:	460b      	mov	r3, r1
 800dbf6:	72fb      	strb	r3, [r7, #11]
 800dbf8:	4613      	mov	r3, r2
 800dbfa:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800dbfc:	2300      	movs	r3, #0
 800dbfe:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800dc00:	2300      	movs	r3, #0
 800dc02:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800dc04:	68fb      	ldr	r3, [r7, #12]
 800dc06:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 800dc0a:	893b      	ldrh	r3, [r7, #8]
 800dc0c:	7af9      	ldrb	r1, [r7, #11]
 800dc0e:	687a      	ldr	r2, [r7, #4]
 800dc10:	f7f7 fe75 	bl	80058fe <HAL_PCD_EP_Receive>
 800dc14:	4603      	mov	r3, r0
 800dc16:	75fb      	strb	r3, [r7, #23]
  
  usb_status =  USBD_Get_USB_Status(hal_status);   
 800dc18:	7dfb      	ldrb	r3, [r7, #23]
 800dc1a:	4618      	mov	r0, r3
 800dc1c:	f000 f81a 	bl	800dc54 <USBD_Get_USB_Status>
 800dc20:	4603      	mov	r3, r0
 800dc22:	75bb      	strb	r3, [r7, #22]
  
  return usb_status; 
 800dc24:	7dbb      	ldrb	r3, [r7, #22]
}
 800dc26:	4618      	mov	r0, r3
 800dc28:	3718      	adds	r7, #24
 800dc2a:	46bd      	mov	sp, r7
 800dc2c:	bd80      	pop	{r7, pc}

0800dc2e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800dc2e:	b580      	push	{r7, lr}
 800dc30:	b082      	sub	sp, #8
 800dc32:	af00      	add	r7, sp, #0
 800dc34:	6078      	str	r0, [r7, #4]
 800dc36:	460b      	mov	r3, r1
 800dc38:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800dc3a:	687b      	ldr	r3, [r7, #4]
 800dc3c:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800dc40:	78fa      	ldrb	r2, [r7, #3]
 800dc42:	4611      	mov	r1, r2
 800dc44:	4618      	mov	r0, r3
 800dc46:	f7f7 fea5 	bl	8005994 <HAL_PCD_EP_GetRxCount>
 800dc4a:	4603      	mov	r3, r0
}
 800dc4c:	4618      	mov	r0, r3
 800dc4e:	3708      	adds	r7, #8
 800dc50:	46bd      	mov	sp, r7
 800dc52:	bd80      	pop	{r7, pc}

0800dc54 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800dc54:	b480      	push	{r7}
 800dc56:	b085      	sub	sp, #20
 800dc58:	af00      	add	r7, sp, #0
 800dc5a:	4603      	mov	r3, r0
 800dc5c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800dc5e:	2300      	movs	r3, #0
 800dc60:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800dc62:	79fb      	ldrb	r3, [r7, #7]
 800dc64:	2b03      	cmp	r3, #3
 800dc66:	d817      	bhi.n	800dc98 <USBD_Get_USB_Status+0x44>
 800dc68:	a201      	add	r2, pc, #4	; (adr r2, 800dc70 <USBD_Get_USB_Status+0x1c>)
 800dc6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dc6e:	bf00      	nop
 800dc70:	0800dc81 	.word	0x0800dc81
 800dc74:	0800dc87 	.word	0x0800dc87
 800dc78:	0800dc8d 	.word	0x0800dc8d
 800dc7c:	0800dc93 	.word	0x0800dc93
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800dc80:	2300      	movs	r3, #0
 800dc82:	73fb      	strb	r3, [r7, #15]
    break;
 800dc84:	e00b      	b.n	800dc9e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800dc86:	2302      	movs	r3, #2
 800dc88:	73fb      	strb	r3, [r7, #15]
    break;
 800dc8a:	e008      	b.n	800dc9e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800dc8c:	2301      	movs	r3, #1
 800dc8e:	73fb      	strb	r3, [r7, #15]
    break;
 800dc90:	e005      	b.n	800dc9e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800dc92:	2302      	movs	r3, #2
 800dc94:	73fb      	strb	r3, [r7, #15]
    break;
 800dc96:	e002      	b.n	800dc9e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800dc98:	2302      	movs	r3, #2
 800dc9a:	73fb      	strb	r3, [r7, #15]
    break;
 800dc9c:	bf00      	nop
  }
  return usb_status;
 800dc9e:	7bfb      	ldrb	r3, [r7, #15]
}
 800dca0:	4618      	mov	r0, r3
 800dca2:	3714      	adds	r7, #20
 800dca4:	46bd      	mov	sp, r7
 800dca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcaa:	4770      	bx	lr

0800dcac <__errno>:
 800dcac:	4b01      	ldr	r3, [pc, #4]	; (800dcb4 <__errno+0x8>)
 800dcae:	6818      	ldr	r0, [r3, #0]
 800dcb0:	4770      	bx	lr
 800dcb2:	bf00      	nop
 800dcb4:	20000190 	.word	0x20000190

0800dcb8 <__libc_init_array>:
 800dcb8:	b570      	push	{r4, r5, r6, lr}
 800dcba:	4e0d      	ldr	r6, [pc, #52]	; (800dcf0 <__libc_init_array+0x38>)
 800dcbc:	4c0d      	ldr	r4, [pc, #52]	; (800dcf4 <__libc_init_array+0x3c>)
 800dcbe:	1ba4      	subs	r4, r4, r6
 800dcc0:	10a4      	asrs	r4, r4, #2
 800dcc2:	2500      	movs	r5, #0
 800dcc4:	42a5      	cmp	r5, r4
 800dcc6:	d109      	bne.n	800dcdc <__libc_init_array+0x24>
 800dcc8:	4e0b      	ldr	r6, [pc, #44]	; (800dcf8 <__libc_init_array+0x40>)
 800dcca:	4c0c      	ldr	r4, [pc, #48]	; (800dcfc <__libc_init_array+0x44>)
 800dccc:	f004 fa04 	bl	80120d8 <_init>
 800dcd0:	1ba4      	subs	r4, r4, r6
 800dcd2:	10a4      	asrs	r4, r4, #2
 800dcd4:	2500      	movs	r5, #0
 800dcd6:	42a5      	cmp	r5, r4
 800dcd8:	d105      	bne.n	800dce6 <__libc_init_array+0x2e>
 800dcda:	bd70      	pop	{r4, r5, r6, pc}
 800dcdc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800dce0:	4798      	blx	r3
 800dce2:	3501      	adds	r5, #1
 800dce4:	e7ee      	b.n	800dcc4 <__libc_init_array+0xc>
 800dce6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800dcea:	4798      	blx	r3
 800dcec:	3501      	adds	r5, #1
 800dcee:	e7f2      	b.n	800dcd6 <__libc_init_array+0x1e>
 800dcf0:	08012560 	.word	0x08012560
 800dcf4:	08012560 	.word	0x08012560
 800dcf8:	08012560 	.word	0x08012560
 800dcfc:	08012564 	.word	0x08012564

0800dd00 <malloc>:
 800dd00:	4b02      	ldr	r3, [pc, #8]	; (800dd0c <malloc+0xc>)
 800dd02:	4601      	mov	r1, r0
 800dd04:	6818      	ldr	r0, [r3, #0]
 800dd06:	f000 b86d 	b.w	800dde4 <_malloc_r>
 800dd0a:	bf00      	nop
 800dd0c:	20000190 	.word	0x20000190

0800dd10 <free>:
 800dd10:	4b02      	ldr	r3, [pc, #8]	; (800dd1c <free+0xc>)
 800dd12:	4601      	mov	r1, r0
 800dd14:	6818      	ldr	r0, [r3, #0]
 800dd16:	f000 b817 	b.w	800dd48 <_free_r>
 800dd1a:	bf00      	nop
 800dd1c:	20000190 	.word	0x20000190

0800dd20 <memcpy>:
 800dd20:	b510      	push	{r4, lr}
 800dd22:	1e43      	subs	r3, r0, #1
 800dd24:	440a      	add	r2, r1
 800dd26:	4291      	cmp	r1, r2
 800dd28:	d100      	bne.n	800dd2c <memcpy+0xc>
 800dd2a:	bd10      	pop	{r4, pc}
 800dd2c:	f811 4b01 	ldrb.w	r4, [r1], #1
 800dd30:	f803 4f01 	strb.w	r4, [r3, #1]!
 800dd34:	e7f7      	b.n	800dd26 <memcpy+0x6>

0800dd36 <memset>:
 800dd36:	4402      	add	r2, r0
 800dd38:	4603      	mov	r3, r0
 800dd3a:	4293      	cmp	r3, r2
 800dd3c:	d100      	bne.n	800dd40 <memset+0xa>
 800dd3e:	4770      	bx	lr
 800dd40:	f803 1b01 	strb.w	r1, [r3], #1
 800dd44:	e7f9      	b.n	800dd3a <memset+0x4>
	...

0800dd48 <_free_r>:
 800dd48:	b538      	push	{r3, r4, r5, lr}
 800dd4a:	4605      	mov	r5, r0
 800dd4c:	2900      	cmp	r1, #0
 800dd4e:	d045      	beq.n	800dddc <_free_r+0x94>
 800dd50:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800dd54:	1f0c      	subs	r4, r1, #4
 800dd56:	2b00      	cmp	r3, #0
 800dd58:	bfb8      	it	lt
 800dd5a:	18e4      	addlt	r4, r4, r3
 800dd5c:	f003 f832 	bl	8010dc4 <__malloc_lock>
 800dd60:	4a1f      	ldr	r2, [pc, #124]	; (800dde0 <_free_r+0x98>)
 800dd62:	6813      	ldr	r3, [r2, #0]
 800dd64:	4610      	mov	r0, r2
 800dd66:	b933      	cbnz	r3, 800dd76 <_free_r+0x2e>
 800dd68:	6063      	str	r3, [r4, #4]
 800dd6a:	6014      	str	r4, [r2, #0]
 800dd6c:	4628      	mov	r0, r5
 800dd6e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800dd72:	f003 b828 	b.w	8010dc6 <__malloc_unlock>
 800dd76:	42a3      	cmp	r3, r4
 800dd78:	d90c      	bls.n	800dd94 <_free_r+0x4c>
 800dd7a:	6821      	ldr	r1, [r4, #0]
 800dd7c:	1862      	adds	r2, r4, r1
 800dd7e:	4293      	cmp	r3, r2
 800dd80:	bf04      	itt	eq
 800dd82:	681a      	ldreq	r2, [r3, #0]
 800dd84:	685b      	ldreq	r3, [r3, #4]
 800dd86:	6063      	str	r3, [r4, #4]
 800dd88:	bf04      	itt	eq
 800dd8a:	1852      	addeq	r2, r2, r1
 800dd8c:	6022      	streq	r2, [r4, #0]
 800dd8e:	6004      	str	r4, [r0, #0]
 800dd90:	e7ec      	b.n	800dd6c <_free_r+0x24>
 800dd92:	4613      	mov	r3, r2
 800dd94:	685a      	ldr	r2, [r3, #4]
 800dd96:	b10a      	cbz	r2, 800dd9c <_free_r+0x54>
 800dd98:	42a2      	cmp	r2, r4
 800dd9a:	d9fa      	bls.n	800dd92 <_free_r+0x4a>
 800dd9c:	6819      	ldr	r1, [r3, #0]
 800dd9e:	1858      	adds	r0, r3, r1
 800dda0:	42a0      	cmp	r0, r4
 800dda2:	d10b      	bne.n	800ddbc <_free_r+0x74>
 800dda4:	6820      	ldr	r0, [r4, #0]
 800dda6:	4401      	add	r1, r0
 800dda8:	1858      	adds	r0, r3, r1
 800ddaa:	4282      	cmp	r2, r0
 800ddac:	6019      	str	r1, [r3, #0]
 800ddae:	d1dd      	bne.n	800dd6c <_free_r+0x24>
 800ddb0:	6810      	ldr	r0, [r2, #0]
 800ddb2:	6852      	ldr	r2, [r2, #4]
 800ddb4:	605a      	str	r2, [r3, #4]
 800ddb6:	4401      	add	r1, r0
 800ddb8:	6019      	str	r1, [r3, #0]
 800ddba:	e7d7      	b.n	800dd6c <_free_r+0x24>
 800ddbc:	d902      	bls.n	800ddc4 <_free_r+0x7c>
 800ddbe:	230c      	movs	r3, #12
 800ddc0:	602b      	str	r3, [r5, #0]
 800ddc2:	e7d3      	b.n	800dd6c <_free_r+0x24>
 800ddc4:	6820      	ldr	r0, [r4, #0]
 800ddc6:	1821      	adds	r1, r4, r0
 800ddc8:	428a      	cmp	r2, r1
 800ddca:	bf04      	itt	eq
 800ddcc:	6811      	ldreq	r1, [r2, #0]
 800ddce:	6852      	ldreq	r2, [r2, #4]
 800ddd0:	6062      	str	r2, [r4, #4]
 800ddd2:	bf04      	itt	eq
 800ddd4:	1809      	addeq	r1, r1, r0
 800ddd6:	6021      	streq	r1, [r4, #0]
 800ddd8:	605c      	str	r4, [r3, #4]
 800ddda:	e7c7      	b.n	800dd6c <_free_r+0x24>
 800dddc:	bd38      	pop	{r3, r4, r5, pc}
 800ddde:	bf00      	nop
 800dde0:	20000798 	.word	0x20000798

0800dde4 <_malloc_r>:
 800dde4:	b570      	push	{r4, r5, r6, lr}
 800dde6:	1ccd      	adds	r5, r1, #3
 800dde8:	f025 0503 	bic.w	r5, r5, #3
 800ddec:	3508      	adds	r5, #8
 800ddee:	2d0c      	cmp	r5, #12
 800ddf0:	bf38      	it	cc
 800ddf2:	250c      	movcc	r5, #12
 800ddf4:	2d00      	cmp	r5, #0
 800ddf6:	4606      	mov	r6, r0
 800ddf8:	db01      	blt.n	800ddfe <_malloc_r+0x1a>
 800ddfa:	42a9      	cmp	r1, r5
 800ddfc:	d903      	bls.n	800de06 <_malloc_r+0x22>
 800ddfe:	230c      	movs	r3, #12
 800de00:	6033      	str	r3, [r6, #0]
 800de02:	2000      	movs	r0, #0
 800de04:	bd70      	pop	{r4, r5, r6, pc}
 800de06:	f002 ffdd 	bl	8010dc4 <__malloc_lock>
 800de0a:	4a21      	ldr	r2, [pc, #132]	; (800de90 <_malloc_r+0xac>)
 800de0c:	6814      	ldr	r4, [r2, #0]
 800de0e:	4621      	mov	r1, r4
 800de10:	b991      	cbnz	r1, 800de38 <_malloc_r+0x54>
 800de12:	4c20      	ldr	r4, [pc, #128]	; (800de94 <_malloc_r+0xb0>)
 800de14:	6823      	ldr	r3, [r4, #0]
 800de16:	b91b      	cbnz	r3, 800de20 <_malloc_r+0x3c>
 800de18:	4630      	mov	r0, r6
 800de1a:	f000 fe93 	bl	800eb44 <_sbrk_r>
 800de1e:	6020      	str	r0, [r4, #0]
 800de20:	4629      	mov	r1, r5
 800de22:	4630      	mov	r0, r6
 800de24:	f000 fe8e 	bl	800eb44 <_sbrk_r>
 800de28:	1c43      	adds	r3, r0, #1
 800de2a:	d124      	bne.n	800de76 <_malloc_r+0x92>
 800de2c:	230c      	movs	r3, #12
 800de2e:	6033      	str	r3, [r6, #0]
 800de30:	4630      	mov	r0, r6
 800de32:	f002 ffc8 	bl	8010dc6 <__malloc_unlock>
 800de36:	e7e4      	b.n	800de02 <_malloc_r+0x1e>
 800de38:	680b      	ldr	r3, [r1, #0]
 800de3a:	1b5b      	subs	r3, r3, r5
 800de3c:	d418      	bmi.n	800de70 <_malloc_r+0x8c>
 800de3e:	2b0b      	cmp	r3, #11
 800de40:	d90f      	bls.n	800de62 <_malloc_r+0x7e>
 800de42:	600b      	str	r3, [r1, #0]
 800de44:	50cd      	str	r5, [r1, r3]
 800de46:	18cc      	adds	r4, r1, r3
 800de48:	4630      	mov	r0, r6
 800de4a:	f002 ffbc 	bl	8010dc6 <__malloc_unlock>
 800de4e:	f104 000b 	add.w	r0, r4, #11
 800de52:	1d23      	adds	r3, r4, #4
 800de54:	f020 0007 	bic.w	r0, r0, #7
 800de58:	1ac3      	subs	r3, r0, r3
 800de5a:	d0d3      	beq.n	800de04 <_malloc_r+0x20>
 800de5c:	425a      	negs	r2, r3
 800de5e:	50e2      	str	r2, [r4, r3]
 800de60:	e7d0      	b.n	800de04 <_malloc_r+0x20>
 800de62:	428c      	cmp	r4, r1
 800de64:	684b      	ldr	r3, [r1, #4]
 800de66:	bf16      	itet	ne
 800de68:	6063      	strne	r3, [r4, #4]
 800de6a:	6013      	streq	r3, [r2, #0]
 800de6c:	460c      	movne	r4, r1
 800de6e:	e7eb      	b.n	800de48 <_malloc_r+0x64>
 800de70:	460c      	mov	r4, r1
 800de72:	6849      	ldr	r1, [r1, #4]
 800de74:	e7cc      	b.n	800de10 <_malloc_r+0x2c>
 800de76:	1cc4      	adds	r4, r0, #3
 800de78:	f024 0403 	bic.w	r4, r4, #3
 800de7c:	42a0      	cmp	r0, r4
 800de7e:	d005      	beq.n	800de8c <_malloc_r+0xa8>
 800de80:	1a21      	subs	r1, r4, r0
 800de82:	4630      	mov	r0, r6
 800de84:	f000 fe5e 	bl	800eb44 <_sbrk_r>
 800de88:	3001      	adds	r0, #1
 800de8a:	d0cf      	beq.n	800de2c <_malloc_r+0x48>
 800de8c:	6025      	str	r5, [r4, #0]
 800de8e:	e7db      	b.n	800de48 <_malloc_r+0x64>
 800de90:	20000798 	.word	0x20000798
 800de94:	2000079c 	.word	0x2000079c

0800de98 <__cvt>:
 800de98:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800de9c:	ec55 4b10 	vmov	r4, r5, d0
 800dea0:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 800dea2:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800dea6:	2d00      	cmp	r5, #0
 800dea8:	460e      	mov	r6, r1
 800deaa:	4691      	mov	r9, r2
 800deac:	4619      	mov	r1, r3
 800deae:	bfb8      	it	lt
 800deb0:	4622      	movlt	r2, r4
 800deb2:	462b      	mov	r3, r5
 800deb4:	f027 0720 	bic.w	r7, r7, #32
 800deb8:	bfbb      	ittet	lt
 800deba:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800debe:	461d      	movlt	r5, r3
 800dec0:	2300      	movge	r3, #0
 800dec2:	232d      	movlt	r3, #45	; 0x2d
 800dec4:	bfb8      	it	lt
 800dec6:	4614      	movlt	r4, r2
 800dec8:	2f46      	cmp	r7, #70	; 0x46
 800deca:	700b      	strb	r3, [r1, #0]
 800decc:	d004      	beq.n	800ded8 <__cvt+0x40>
 800dece:	2f45      	cmp	r7, #69	; 0x45
 800ded0:	d100      	bne.n	800ded4 <__cvt+0x3c>
 800ded2:	3601      	adds	r6, #1
 800ded4:	2102      	movs	r1, #2
 800ded6:	e000      	b.n	800deda <__cvt+0x42>
 800ded8:	2103      	movs	r1, #3
 800deda:	ab03      	add	r3, sp, #12
 800dedc:	9301      	str	r3, [sp, #4]
 800dede:	ab02      	add	r3, sp, #8
 800dee0:	9300      	str	r3, [sp, #0]
 800dee2:	4632      	mov	r2, r6
 800dee4:	4653      	mov	r3, sl
 800dee6:	ec45 4b10 	vmov	d0, r4, r5
 800deea:	f001 fd9d 	bl	800fa28 <_dtoa_r>
 800deee:	2f47      	cmp	r7, #71	; 0x47
 800def0:	4680      	mov	r8, r0
 800def2:	d102      	bne.n	800defa <__cvt+0x62>
 800def4:	f019 0f01 	tst.w	r9, #1
 800def8:	d026      	beq.n	800df48 <__cvt+0xb0>
 800defa:	2f46      	cmp	r7, #70	; 0x46
 800defc:	eb08 0906 	add.w	r9, r8, r6
 800df00:	d111      	bne.n	800df26 <__cvt+0x8e>
 800df02:	f898 3000 	ldrb.w	r3, [r8]
 800df06:	2b30      	cmp	r3, #48	; 0x30
 800df08:	d10a      	bne.n	800df20 <__cvt+0x88>
 800df0a:	2200      	movs	r2, #0
 800df0c:	2300      	movs	r3, #0
 800df0e:	4620      	mov	r0, r4
 800df10:	4629      	mov	r1, r5
 800df12:	f7f2 fdd9 	bl	8000ac8 <__aeabi_dcmpeq>
 800df16:	b918      	cbnz	r0, 800df20 <__cvt+0x88>
 800df18:	f1c6 0601 	rsb	r6, r6, #1
 800df1c:	f8ca 6000 	str.w	r6, [sl]
 800df20:	f8da 3000 	ldr.w	r3, [sl]
 800df24:	4499      	add	r9, r3
 800df26:	2200      	movs	r2, #0
 800df28:	2300      	movs	r3, #0
 800df2a:	4620      	mov	r0, r4
 800df2c:	4629      	mov	r1, r5
 800df2e:	f7f2 fdcb 	bl	8000ac8 <__aeabi_dcmpeq>
 800df32:	b938      	cbnz	r0, 800df44 <__cvt+0xac>
 800df34:	2230      	movs	r2, #48	; 0x30
 800df36:	9b03      	ldr	r3, [sp, #12]
 800df38:	454b      	cmp	r3, r9
 800df3a:	d205      	bcs.n	800df48 <__cvt+0xb0>
 800df3c:	1c59      	adds	r1, r3, #1
 800df3e:	9103      	str	r1, [sp, #12]
 800df40:	701a      	strb	r2, [r3, #0]
 800df42:	e7f8      	b.n	800df36 <__cvt+0x9e>
 800df44:	f8cd 900c 	str.w	r9, [sp, #12]
 800df48:	9b03      	ldr	r3, [sp, #12]
 800df4a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800df4c:	eba3 0308 	sub.w	r3, r3, r8
 800df50:	4640      	mov	r0, r8
 800df52:	6013      	str	r3, [r2, #0]
 800df54:	b004      	add	sp, #16
 800df56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800df5a <__exponent>:
 800df5a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800df5c:	2900      	cmp	r1, #0
 800df5e:	4604      	mov	r4, r0
 800df60:	bfba      	itte	lt
 800df62:	4249      	neglt	r1, r1
 800df64:	232d      	movlt	r3, #45	; 0x2d
 800df66:	232b      	movge	r3, #43	; 0x2b
 800df68:	2909      	cmp	r1, #9
 800df6a:	f804 2b02 	strb.w	r2, [r4], #2
 800df6e:	7043      	strb	r3, [r0, #1]
 800df70:	dd20      	ble.n	800dfb4 <__exponent+0x5a>
 800df72:	f10d 0307 	add.w	r3, sp, #7
 800df76:	461f      	mov	r7, r3
 800df78:	260a      	movs	r6, #10
 800df7a:	fb91 f5f6 	sdiv	r5, r1, r6
 800df7e:	fb06 1115 	mls	r1, r6, r5, r1
 800df82:	3130      	adds	r1, #48	; 0x30
 800df84:	2d09      	cmp	r5, #9
 800df86:	f803 1c01 	strb.w	r1, [r3, #-1]
 800df8a:	f103 32ff 	add.w	r2, r3, #4294967295
 800df8e:	4629      	mov	r1, r5
 800df90:	dc09      	bgt.n	800dfa6 <__exponent+0x4c>
 800df92:	3130      	adds	r1, #48	; 0x30
 800df94:	3b02      	subs	r3, #2
 800df96:	f802 1c01 	strb.w	r1, [r2, #-1]
 800df9a:	42bb      	cmp	r3, r7
 800df9c:	4622      	mov	r2, r4
 800df9e:	d304      	bcc.n	800dfaa <__exponent+0x50>
 800dfa0:	1a10      	subs	r0, r2, r0
 800dfa2:	b003      	add	sp, #12
 800dfa4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800dfa6:	4613      	mov	r3, r2
 800dfa8:	e7e7      	b.n	800df7a <__exponent+0x20>
 800dfaa:	f813 2b01 	ldrb.w	r2, [r3], #1
 800dfae:	f804 2b01 	strb.w	r2, [r4], #1
 800dfb2:	e7f2      	b.n	800df9a <__exponent+0x40>
 800dfb4:	2330      	movs	r3, #48	; 0x30
 800dfb6:	4419      	add	r1, r3
 800dfb8:	7083      	strb	r3, [r0, #2]
 800dfba:	1d02      	adds	r2, r0, #4
 800dfbc:	70c1      	strb	r1, [r0, #3]
 800dfbe:	e7ef      	b.n	800dfa0 <__exponent+0x46>

0800dfc0 <_printf_float>:
 800dfc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dfc4:	b08d      	sub	sp, #52	; 0x34
 800dfc6:	460c      	mov	r4, r1
 800dfc8:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 800dfcc:	4616      	mov	r6, r2
 800dfce:	461f      	mov	r7, r3
 800dfd0:	4605      	mov	r5, r0
 800dfd2:	f002 fed7 	bl	8010d84 <_localeconv_r>
 800dfd6:	6803      	ldr	r3, [r0, #0]
 800dfd8:	9304      	str	r3, [sp, #16]
 800dfda:	4618      	mov	r0, r3
 800dfdc:	f7f2 f8f8 	bl	80001d0 <strlen>
 800dfe0:	2300      	movs	r3, #0
 800dfe2:	930a      	str	r3, [sp, #40]	; 0x28
 800dfe4:	f8d8 3000 	ldr.w	r3, [r8]
 800dfe8:	9005      	str	r0, [sp, #20]
 800dfea:	3307      	adds	r3, #7
 800dfec:	f023 0307 	bic.w	r3, r3, #7
 800dff0:	f103 0208 	add.w	r2, r3, #8
 800dff4:	f894 a018 	ldrb.w	sl, [r4, #24]
 800dff8:	f8d4 b000 	ldr.w	fp, [r4]
 800dffc:	f8c8 2000 	str.w	r2, [r8]
 800e000:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e004:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800e008:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800e00c:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800e010:	9307      	str	r3, [sp, #28]
 800e012:	f8cd 8018 	str.w	r8, [sp, #24]
 800e016:	f04f 32ff 	mov.w	r2, #4294967295
 800e01a:	4ba7      	ldr	r3, [pc, #668]	; (800e2b8 <_printf_float+0x2f8>)
 800e01c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e020:	f7f2 fd84 	bl	8000b2c <__aeabi_dcmpun>
 800e024:	bb70      	cbnz	r0, 800e084 <_printf_float+0xc4>
 800e026:	f04f 32ff 	mov.w	r2, #4294967295
 800e02a:	4ba3      	ldr	r3, [pc, #652]	; (800e2b8 <_printf_float+0x2f8>)
 800e02c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e030:	f7f2 fd5e 	bl	8000af0 <__aeabi_dcmple>
 800e034:	bb30      	cbnz	r0, 800e084 <_printf_float+0xc4>
 800e036:	2200      	movs	r2, #0
 800e038:	2300      	movs	r3, #0
 800e03a:	4640      	mov	r0, r8
 800e03c:	4649      	mov	r1, r9
 800e03e:	f7f2 fd4d 	bl	8000adc <__aeabi_dcmplt>
 800e042:	b110      	cbz	r0, 800e04a <_printf_float+0x8a>
 800e044:	232d      	movs	r3, #45	; 0x2d
 800e046:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e04a:	4a9c      	ldr	r2, [pc, #624]	; (800e2bc <_printf_float+0x2fc>)
 800e04c:	4b9c      	ldr	r3, [pc, #624]	; (800e2c0 <_printf_float+0x300>)
 800e04e:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800e052:	bf8c      	ite	hi
 800e054:	4690      	movhi	r8, r2
 800e056:	4698      	movls	r8, r3
 800e058:	2303      	movs	r3, #3
 800e05a:	f02b 0204 	bic.w	r2, fp, #4
 800e05e:	6123      	str	r3, [r4, #16]
 800e060:	6022      	str	r2, [r4, #0]
 800e062:	f04f 0900 	mov.w	r9, #0
 800e066:	9700      	str	r7, [sp, #0]
 800e068:	4633      	mov	r3, r6
 800e06a:	aa0b      	add	r2, sp, #44	; 0x2c
 800e06c:	4621      	mov	r1, r4
 800e06e:	4628      	mov	r0, r5
 800e070:	f000 f9e6 	bl	800e440 <_printf_common>
 800e074:	3001      	adds	r0, #1
 800e076:	f040 808d 	bne.w	800e194 <_printf_float+0x1d4>
 800e07a:	f04f 30ff 	mov.w	r0, #4294967295
 800e07e:	b00d      	add	sp, #52	; 0x34
 800e080:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e084:	4642      	mov	r2, r8
 800e086:	464b      	mov	r3, r9
 800e088:	4640      	mov	r0, r8
 800e08a:	4649      	mov	r1, r9
 800e08c:	f7f2 fd4e 	bl	8000b2c <__aeabi_dcmpun>
 800e090:	b110      	cbz	r0, 800e098 <_printf_float+0xd8>
 800e092:	4a8c      	ldr	r2, [pc, #560]	; (800e2c4 <_printf_float+0x304>)
 800e094:	4b8c      	ldr	r3, [pc, #560]	; (800e2c8 <_printf_float+0x308>)
 800e096:	e7da      	b.n	800e04e <_printf_float+0x8e>
 800e098:	6861      	ldr	r1, [r4, #4]
 800e09a:	1c4b      	adds	r3, r1, #1
 800e09c:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 800e0a0:	a80a      	add	r0, sp, #40	; 0x28
 800e0a2:	d13e      	bne.n	800e122 <_printf_float+0x162>
 800e0a4:	2306      	movs	r3, #6
 800e0a6:	6063      	str	r3, [r4, #4]
 800e0a8:	2300      	movs	r3, #0
 800e0aa:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800e0ae:	ab09      	add	r3, sp, #36	; 0x24
 800e0b0:	9300      	str	r3, [sp, #0]
 800e0b2:	ec49 8b10 	vmov	d0, r8, r9
 800e0b6:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800e0ba:	6022      	str	r2, [r4, #0]
 800e0bc:	f8cd a004 	str.w	sl, [sp, #4]
 800e0c0:	6861      	ldr	r1, [r4, #4]
 800e0c2:	4628      	mov	r0, r5
 800e0c4:	f7ff fee8 	bl	800de98 <__cvt>
 800e0c8:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 800e0cc:	2b47      	cmp	r3, #71	; 0x47
 800e0ce:	4680      	mov	r8, r0
 800e0d0:	d109      	bne.n	800e0e6 <_printf_float+0x126>
 800e0d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e0d4:	1cd8      	adds	r0, r3, #3
 800e0d6:	db02      	blt.n	800e0de <_printf_float+0x11e>
 800e0d8:	6862      	ldr	r2, [r4, #4]
 800e0da:	4293      	cmp	r3, r2
 800e0dc:	dd47      	ble.n	800e16e <_printf_float+0x1ae>
 800e0de:	f1aa 0a02 	sub.w	sl, sl, #2
 800e0e2:	fa5f fa8a 	uxtb.w	sl, sl
 800e0e6:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800e0ea:	9909      	ldr	r1, [sp, #36]	; 0x24
 800e0ec:	d824      	bhi.n	800e138 <_printf_float+0x178>
 800e0ee:	3901      	subs	r1, #1
 800e0f0:	4652      	mov	r2, sl
 800e0f2:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800e0f6:	9109      	str	r1, [sp, #36]	; 0x24
 800e0f8:	f7ff ff2f 	bl	800df5a <__exponent>
 800e0fc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e0fe:	1813      	adds	r3, r2, r0
 800e100:	2a01      	cmp	r2, #1
 800e102:	4681      	mov	r9, r0
 800e104:	6123      	str	r3, [r4, #16]
 800e106:	dc02      	bgt.n	800e10e <_printf_float+0x14e>
 800e108:	6822      	ldr	r2, [r4, #0]
 800e10a:	07d1      	lsls	r1, r2, #31
 800e10c:	d501      	bpl.n	800e112 <_printf_float+0x152>
 800e10e:	3301      	adds	r3, #1
 800e110:	6123      	str	r3, [r4, #16]
 800e112:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800e116:	2b00      	cmp	r3, #0
 800e118:	d0a5      	beq.n	800e066 <_printf_float+0xa6>
 800e11a:	232d      	movs	r3, #45	; 0x2d
 800e11c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e120:	e7a1      	b.n	800e066 <_printf_float+0xa6>
 800e122:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 800e126:	f000 8177 	beq.w	800e418 <_printf_float+0x458>
 800e12a:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800e12e:	d1bb      	bne.n	800e0a8 <_printf_float+0xe8>
 800e130:	2900      	cmp	r1, #0
 800e132:	d1b9      	bne.n	800e0a8 <_printf_float+0xe8>
 800e134:	2301      	movs	r3, #1
 800e136:	e7b6      	b.n	800e0a6 <_printf_float+0xe6>
 800e138:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 800e13c:	d119      	bne.n	800e172 <_printf_float+0x1b2>
 800e13e:	2900      	cmp	r1, #0
 800e140:	6863      	ldr	r3, [r4, #4]
 800e142:	dd0c      	ble.n	800e15e <_printf_float+0x19e>
 800e144:	6121      	str	r1, [r4, #16]
 800e146:	b913      	cbnz	r3, 800e14e <_printf_float+0x18e>
 800e148:	6822      	ldr	r2, [r4, #0]
 800e14a:	07d2      	lsls	r2, r2, #31
 800e14c:	d502      	bpl.n	800e154 <_printf_float+0x194>
 800e14e:	3301      	adds	r3, #1
 800e150:	440b      	add	r3, r1
 800e152:	6123      	str	r3, [r4, #16]
 800e154:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e156:	65a3      	str	r3, [r4, #88]	; 0x58
 800e158:	f04f 0900 	mov.w	r9, #0
 800e15c:	e7d9      	b.n	800e112 <_printf_float+0x152>
 800e15e:	b913      	cbnz	r3, 800e166 <_printf_float+0x1a6>
 800e160:	6822      	ldr	r2, [r4, #0]
 800e162:	07d0      	lsls	r0, r2, #31
 800e164:	d501      	bpl.n	800e16a <_printf_float+0x1aa>
 800e166:	3302      	adds	r3, #2
 800e168:	e7f3      	b.n	800e152 <_printf_float+0x192>
 800e16a:	2301      	movs	r3, #1
 800e16c:	e7f1      	b.n	800e152 <_printf_float+0x192>
 800e16e:	f04f 0a67 	mov.w	sl, #103	; 0x67
 800e172:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800e176:	4293      	cmp	r3, r2
 800e178:	db05      	blt.n	800e186 <_printf_float+0x1c6>
 800e17a:	6822      	ldr	r2, [r4, #0]
 800e17c:	6123      	str	r3, [r4, #16]
 800e17e:	07d1      	lsls	r1, r2, #31
 800e180:	d5e8      	bpl.n	800e154 <_printf_float+0x194>
 800e182:	3301      	adds	r3, #1
 800e184:	e7e5      	b.n	800e152 <_printf_float+0x192>
 800e186:	2b00      	cmp	r3, #0
 800e188:	bfd4      	ite	le
 800e18a:	f1c3 0302 	rsble	r3, r3, #2
 800e18e:	2301      	movgt	r3, #1
 800e190:	4413      	add	r3, r2
 800e192:	e7de      	b.n	800e152 <_printf_float+0x192>
 800e194:	6823      	ldr	r3, [r4, #0]
 800e196:	055a      	lsls	r2, r3, #21
 800e198:	d407      	bmi.n	800e1aa <_printf_float+0x1ea>
 800e19a:	6923      	ldr	r3, [r4, #16]
 800e19c:	4642      	mov	r2, r8
 800e19e:	4631      	mov	r1, r6
 800e1a0:	4628      	mov	r0, r5
 800e1a2:	47b8      	blx	r7
 800e1a4:	3001      	adds	r0, #1
 800e1a6:	d12b      	bne.n	800e200 <_printf_float+0x240>
 800e1a8:	e767      	b.n	800e07a <_printf_float+0xba>
 800e1aa:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800e1ae:	f240 80dc 	bls.w	800e36a <_printf_float+0x3aa>
 800e1b2:	2200      	movs	r2, #0
 800e1b4:	2300      	movs	r3, #0
 800e1b6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800e1ba:	f7f2 fc85 	bl	8000ac8 <__aeabi_dcmpeq>
 800e1be:	2800      	cmp	r0, #0
 800e1c0:	d033      	beq.n	800e22a <_printf_float+0x26a>
 800e1c2:	2301      	movs	r3, #1
 800e1c4:	4a41      	ldr	r2, [pc, #260]	; (800e2cc <_printf_float+0x30c>)
 800e1c6:	4631      	mov	r1, r6
 800e1c8:	4628      	mov	r0, r5
 800e1ca:	47b8      	blx	r7
 800e1cc:	3001      	adds	r0, #1
 800e1ce:	f43f af54 	beq.w	800e07a <_printf_float+0xba>
 800e1d2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800e1d6:	429a      	cmp	r2, r3
 800e1d8:	db02      	blt.n	800e1e0 <_printf_float+0x220>
 800e1da:	6823      	ldr	r3, [r4, #0]
 800e1dc:	07d8      	lsls	r0, r3, #31
 800e1de:	d50f      	bpl.n	800e200 <_printf_float+0x240>
 800e1e0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e1e4:	4631      	mov	r1, r6
 800e1e6:	4628      	mov	r0, r5
 800e1e8:	47b8      	blx	r7
 800e1ea:	3001      	adds	r0, #1
 800e1ec:	f43f af45 	beq.w	800e07a <_printf_float+0xba>
 800e1f0:	f04f 0800 	mov.w	r8, #0
 800e1f4:	f104 091a 	add.w	r9, r4, #26
 800e1f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e1fa:	3b01      	subs	r3, #1
 800e1fc:	4543      	cmp	r3, r8
 800e1fe:	dc09      	bgt.n	800e214 <_printf_float+0x254>
 800e200:	6823      	ldr	r3, [r4, #0]
 800e202:	079b      	lsls	r3, r3, #30
 800e204:	f100 8103 	bmi.w	800e40e <_printf_float+0x44e>
 800e208:	68e0      	ldr	r0, [r4, #12]
 800e20a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e20c:	4298      	cmp	r0, r3
 800e20e:	bfb8      	it	lt
 800e210:	4618      	movlt	r0, r3
 800e212:	e734      	b.n	800e07e <_printf_float+0xbe>
 800e214:	2301      	movs	r3, #1
 800e216:	464a      	mov	r2, r9
 800e218:	4631      	mov	r1, r6
 800e21a:	4628      	mov	r0, r5
 800e21c:	47b8      	blx	r7
 800e21e:	3001      	adds	r0, #1
 800e220:	f43f af2b 	beq.w	800e07a <_printf_float+0xba>
 800e224:	f108 0801 	add.w	r8, r8, #1
 800e228:	e7e6      	b.n	800e1f8 <_printf_float+0x238>
 800e22a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e22c:	2b00      	cmp	r3, #0
 800e22e:	dc2b      	bgt.n	800e288 <_printf_float+0x2c8>
 800e230:	2301      	movs	r3, #1
 800e232:	4a26      	ldr	r2, [pc, #152]	; (800e2cc <_printf_float+0x30c>)
 800e234:	4631      	mov	r1, r6
 800e236:	4628      	mov	r0, r5
 800e238:	47b8      	blx	r7
 800e23a:	3001      	adds	r0, #1
 800e23c:	f43f af1d 	beq.w	800e07a <_printf_float+0xba>
 800e240:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e242:	b923      	cbnz	r3, 800e24e <_printf_float+0x28e>
 800e244:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e246:	b913      	cbnz	r3, 800e24e <_printf_float+0x28e>
 800e248:	6823      	ldr	r3, [r4, #0]
 800e24a:	07d9      	lsls	r1, r3, #31
 800e24c:	d5d8      	bpl.n	800e200 <_printf_float+0x240>
 800e24e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e252:	4631      	mov	r1, r6
 800e254:	4628      	mov	r0, r5
 800e256:	47b8      	blx	r7
 800e258:	3001      	adds	r0, #1
 800e25a:	f43f af0e 	beq.w	800e07a <_printf_float+0xba>
 800e25e:	f04f 0900 	mov.w	r9, #0
 800e262:	f104 0a1a 	add.w	sl, r4, #26
 800e266:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e268:	425b      	negs	r3, r3
 800e26a:	454b      	cmp	r3, r9
 800e26c:	dc01      	bgt.n	800e272 <_printf_float+0x2b2>
 800e26e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e270:	e794      	b.n	800e19c <_printf_float+0x1dc>
 800e272:	2301      	movs	r3, #1
 800e274:	4652      	mov	r2, sl
 800e276:	4631      	mov	r1, r6
 800e278:	4628      	mov	r0, r5
 800e27a:	47b8      	blx	r7
 800e27c:	3001      	adds	r0, #1
 800e27e:	f43f aefc 	beq.w	800e07a <_printf_float+0xba>
 800e282:	f109 0901 	add.w	r9, r9, #1
 800e286:	e7ee      	b.n	800e266 <_printf_float+0x2a6>
 800e288:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e28a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800e28c:	429a      	cmp	r2, r3
 800e28e:	bfa8      	it	ge
 800e290:	461a      	movge	r2, r3
 800e292:	2a00      	cmp	r2, #0
 800e294:	4691      	mov	r9, r2
 800e296:	dd07      	ble.n	800e2a8 <_printf_float+0x2e8>
 800e298:	4613      	mov	r3, r2
 800e29a:	4631      	mov	r1, r6
 800e29c:	4642      	mov	r2, r8
 800e29e:	4628      	mov	r0, r5
 800e2a0:	47b8      	blx	r7
 800e2a2:	3001      	adds	r0, #1
 800e2a4:	f43f aee9 	beq.w	800e07a <_printf_float+0xba>
 800e2a8:	f104 031a 	add.w	r3, r4, #26
 800e2ac:	f04f 0b00 	mov.w	fp, #0
 800e2b0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800e2b4:	9306      	str	r3, [sp, #24]
 800e2b6:	e015      	b.n	800e2e4 <_printf_float+0x324>
 800e2b8:	7fefffff 	.word	0x7fefffff
 800e2bc:	08012240 	.word	0x08012240
 800e2c0:	0801223c 	.word	0x0801223c
 800e2c4:	08012248 	.word	0x08012248
 800e2c8:	08012244 	.word	0x08012244
 800e2cc:	0801224c 	.word	0x0801224c
 800e2d0:	2301      	movs	r3, #1
 800e2d2:	9a06      	ldr	r2, [sp, #24]
 800e2d4:	4631      	mov	r1, r6
 800e2d6:	4628      	mov	r0, r5
 800e2d8:	47b8      	blx	r7
 800e2da:	3001      	adds	r0, #1
 800e2dc:	f43f aecd 	beq.w	800e07a <_printf_float+0xba>
 800e2e0:	f10b 0b01 	add.w	fp, fp, #1
 800e2e4:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 800e2e8:	ebaa 0309 	sub.w	r3, sl, r9
 800e2ec:	455b      	cmp	r3, fp
 800e2ee:	dcef      	bgt.n	800e2d0 <_printf_float+0x310>
 800e2f0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800e2f4:	429a      	cmp	r2, r3
 800e2f6:	44d0      	add	r8, sl
 800e2f8:	db15      	blt.n	800e326 <_printf_float+0x366>
 800e2fa:	6823      	ldr	r3, [r4, #0]
 800e2fc:	07da      	lsls	r2, r3, #31
 800e2fe:	d412      	bmi.n	800e326 <_printf_float+0x366>
 800e300:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e302:	9909      	ldr	r1, [sp, #36]	; 0x24
 800e304:	eba3 020a 	sub.w	r2, r3, sl
 800e308:	eba3 0a01 	sub.w	sl, r3, r1
 800e30c:	4592      	cmp	sl, r2
 800e30e:	bfa8      	it	ge
 800e310:	4692      	movge	sl, r2
 800e312:	f1ba 0f00 	cmp.w	sl, #0
 800e316:	dc0e      	bgt.n	800e336 <_printf_float+0x376>
 800e318:	f04f 0800 	mov.w	r8, #0
 800e31c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800e320:	f104 091a 	add.w	r9, r4, #26
 800e324:	e019      	b.n	800e35a <_printf_float+0x39a>
 800e326:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e32a:	4631      	mov	r1, r6
 800e32c:	4628      	mov	r0, r5
 800e32e:	47b8      	blx	r7
 800e330:	3001      	adds	r0, #1
 800e332:	d1e5      	bne.n	800e300 <_printf_float+0x340>
 800e334:	e6a1      	b.n	800e07a <_printf_float+0xba>
 800e336:	4653      	mov	r3, sl
 800e338:	4642      	mov	r2, r8
 800e33a:	4631      	mov	r1, r6
 800e33c:	4628      	mov	r0, r5
 800e33e:	47b8      	blx	r7
 800e340:	3001      	adds	r0, #1
 800e342:	d1e9      	bne.n	800e318 <_printf_float+0x358>
 800e344:	e699      	b.n	800e07a <_printf_float+0xba>
 800e346:	2301      	movs	r3, #1
 800e348:	464a      	mov	r2, r9
 800e34a:	4631      	mov	r1, r6
 800e34c:	4628      	mov	r0, r5
 800e34e:	47b8      	blx	r7
 800e350:	3001      	adds	r0, #1
 800e352:	f43f ae92 	beq.w	800e07a <_printf_float+0xba>
 800e356:	f108 0801 	add.w	r8, r8, #1
 800e35a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800e35e:	1a9b      	subs	r3, r3, r2
 800e360:	eba3 030a 	sub.w	r3, r3, sl
 800e364:	4543      	cmp	r3, r8
 800e366:	dcee      	bgt.n	800e346 <_printf_float+0x386>
 800e368:	e74a      	b.n	800e200 <_printf_float+0x240>
 800e36a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e36c:	2a01      	cmp	r2, #1
 800e36e:	dc01      	bgt.n	800e374 <_printf_float+0x3b4>
 800e370:	07db      	lsls	r3, r3, #31
 800e372:	d53a      	bpl.n	800e3ea <_printf_float+0x42a>
 800e374:	2301      	movs	r3, #1
 800e376:	4642      	mov	r2, r8
 800e378:	4631      	mov	r1, r6
 800e37a:	4628      	mov	r0, r5
 800e37c:	47b8      	blx	r7
 800e37e:	3001      	adds	r0, #1
 800e380:	f43f ae7b 	beq.w	800e07a <_printf_float+0xba>
 800e384:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e388:	4631      	mov	r1, r6
 800e38a:	4628      	mov	r0, r5
 800e38c:	47b8      	blx	r7
 800e38e:	3001      	adds	r0, #1
 800e390:	f108 0801 	add.w	r8, r8, #1
 800e394:	f43f ae71 	beq.w	800e07a <_printf_float+0xba>
 800e398:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e39a:	2200      	movs	r2, #0
 800e39c:	f103 3aff 	add.w	sl, r3, #4294967295
 800e3a0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800e3a4:	2300      	movs	r3, #0
 800e3a6:	f7f2 fb8f 	bl	8000ac8 <__aeabi_dcmpeq>
 800e3aa:	b9c8      	cbnz	r0, 800e3e0 <_printf_float+0x420>
 800e3ac:	4653      	mov	r3, sl
 800e3ae:	4642      	mov	r2, r8
 800e3b0:	4631      	mov	r1, r6
 800e3b2:	4628      	mov	r0, r5
 800e3b4:	47b8      	blx	r7
 800e3b6:	3001      	adds	r0, #1
 800e3b8:	d10e      	bne.n	800e3d8 <_printf_float+0x418>
 800e3ba:	e65e      	b.n	800e07a <_printf_float+0xba>
 800e3bc:	2301      	movs	r3, #1
 800e3be:	4652      	mov	r2, sl
 800e3c0:	4631      	mov	r1, r6
 800e3c2:	4628      	mov	r0, r5
 800e3c4:	47b8      	blx	r7
 800e3c6:	3001      	adds	r0, #1
 800e3c8:	f43f ae57 	beq.w	800e07a <_printf_float+0xba>
 800e3cc:	f108 0801 	add.w	r8, r8, #1
 800e3d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e3d2:	3b01      	subs	r3, #1
 800e3d4:	4543      	cmp	r3, r8
 800e3d6:	dcf1      	bgt.n	800e3bc <_printf_float+0x3fc>
 800e3d8:	464b      	mov	r3, r9
 800e3da:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800e3de:	e6de      	b.n	800e19e <_printf_float+0x1de>
 800e3e0:	f04f 0800 	mov.w	r8, #0
 800e3e4:	f104 0a1a 	add.w	sl, r4, #26
 800e3e8:	e7f2      	b.n	800e3d0 <_printf_float+0x410>
 800e3ea:	2301      	movs	r3, #1
 800e3ec:	e7df      	b.n	800e3ae <_printf_float+0x3ee>
 800e3ee:	2301      	movs	r3, #1
 800e3f0:	464a      	mov	r2, r9
 800e3f2:	4631      	mov	r1, r6
 800e3f4:	4628      	mov	r0, r5
 800e3f6:	47b8      	blx	r7
 800e3f8:	3001      	adds	r0, #1
 800e3fa:	f43f ae3e 	beq.w	800e07a <_printf_float+0xba>
 800e3fe:	f108 0801 	add.w	r8, r8, #1
 800e402:	68e3      	ldr	r3, [r4, #12]
 800e404:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800e406:	1a9b      	subs	r3, r3, r2
 800e408:	4543      	cmp	r3, r8
 800e40a:	dcf0      	bgt.n	800e3ee <_printf_float+0x42e>
 800e40c:	e6fc      	b.n	800e208 <_printf_float+0x248>
 800e40e:	f04f 0800 	mov.w	r8, #0
 800e412:	f104 0919 	add.w	r9, r4, #25
 800e416:	e7f4      	b.n	800e402 <_printf_float+0x442>
 800e418:	2900      	cmp	r1, #0
 800e41a:	f43f ae8b 	beq.w	800e134 <_printf_float+0x174>
 800e41e:	2300      	movs	r3, #0
 800e420:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800e424:	ab09      	add	r3, sp, #36	; 0x24
 800e426:	9300      	str	r3, [sp, #0]
 800e428:	ec49 8b10 	vmov	d0, r8, r9
 800e42c:	6022      	str	r2, [r4, #0]
 800e42e:	f8cd a004 	str.w	sl, [sp, #4]
 800e432:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800e436:	4628      	mov	r0, r5
 800e438:	f7ff fd2e 	bl	800de98 <__cvt>
 800e43c:	4680      	mov	r8, r0
 800e43e:	e648      	b.n	800e0d2 <_printf_float+0x112>

0800e440 <_printf_common>:
 800e440:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e444:	4691      	mov	r9, r2
 800e446:	461f      	mov	r7, r3
 800e448:	688a      	ldr	r2, [r1, #8]
 800e44a:	690b      	ldr	r3, [r1, #16]
 800e44c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800e450:	4293      	cmp	r3, r2
 800e452:	bfb8      	it	lt
 800e454:	4613      	movlt	r3, r2
 800e456:	f8c9 3000 	str.w	r3, [r9]
 800e45a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800e45e:	4606      	mov	r6, r0
 800e460:	460c      	mov	r4, r1
 800e462:	b112      	cbz	r2, 800e46a <_printf_common+0x2a>
 800e464:	3301      	adds	r3, #1
 800e466:	f8c9 3000 	str.w	r3, [r9]
 800e46a:	6823      	ldr	r3, [r4, #0]
 800e46c:	0699      	lsls	r1, r3, #26
 800e46e:	bf42      	ittt	mi
 800e470:	f8d9 3000 	ldrmi.w	r3, [r9]
 800e474:	3302      	addmi	r3, #2
 800e476:	f8c9 3000 	strmi.w	r3, [r9]
 800e47a:	6825      	ldr	r5, [r4, #0]
 800e47c:	f015 0506 	ands.w	r5, r5, #6
 800e480:	d107      	bne.n	800e492 <_printf_common+0x52>
 800e482:	f104 0a19 	add.w	sl, r4, #25
 800e486:	68e3      	ldr	r3, [r4, #12]
 800e488:	f8d9 2000 	ldr.w	r2, [r9]
 800e48c:	1a9b      	subs	r3, r3, r2
 800e48e:	42ab      	cmp	r3, r5
 800e490:	dc28      	bgt.n	800e4e4 <_printf_common+0xa4>
 800e492:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800e496:	6822      	ldr	r2, [r4, #0]
 800e498:	3300      	adds	r3, #0
 800e49a:	bf18      	it	ne
 800e49c:	2301      	movne	r3, #1
 800e49e:	0692      	lsls	r2, r2, #26
 800e4a0:	d42d      	bmi.n	800e4fe <_printf_common+0xbe>
 800e4a2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800e4a6:	4639      	mov	r1, r7
 800e4a8:	4630      	mov	r0, r6
 800e4aa:	47c0      	blx	r8
 800e4ac:	3001      	adds	r0, #1
 800e4ae:	d020      	beq.n	800e4f2 <_printf_common+0xb2>
 800e4b0:	6823      	ldr	r3, [r4, #0]
 800e4b2:	68e5      	ldr	r5, [r4, #12]
 800e4b4:	f8d9 2000 	ldr.w	r2, [r9]
 800e4b8:	f003 0306 	and.w	r3, r3, #6
 800e4bc:	2b04      	cmp	r3, #4
 800e4be:	bf08      	it	eq
 800e4c0:	1aad      	subeq	r5, r5, r2
 800e4c2:	68a3      	ldr	r3, [r4, #8]
 800e4c4:	6922      	ldr	r2, [r4, #16]
 800e4c6:	bf0c      	ite	eq
 800e4c8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800e4cc:	2500      	movne	r5, #0
 800e4ce:	4293      	cmp	r3, r2
 800e4d0:	bfc4      	itt	gt
 800e4d2:	1a9b      	subgt	r3, r3, r2
 800e4d4:	18ed      	addgt	r5, r5, r3
 800e4d6:	f04f 0900 	mov.w	r9, #0
 800e4da:	341a      	adds	r4, #26
 800e4dc:	454d      	cmp	r5, r9
 800e4de:	d11a      	bne.n	800e516 <_printf_common+0xd6>
 800e4e0:	2000      	movs	r0, #0
 800e4e2:	e008      	b.n	800e4f6 <_printf_common+0xb6>
 800e4e4:	2301      	movs	r3, #1
 800e4e6:	4652      	mov	r2, sl
 800e4e8:	4639      	mov	r1, r7
 800e4ea:	4630      	mov	r0, r6
 800e4ec:	47c0      	blx	r8
 800e4ee:	3001      	adds	r0, #1
 800e4f0:	d103      	bne.n	800e4fa <_printf_common+0xba>
 800e4f2:	f04f 30ff 	mov.w	r0, #4294967295
 800e4f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e4fa:	3501      	adds	r5, #1
 800e4fc:	e7c3      	b.n	800e486 <_printf_common+0x46>
 800e4fe:	18e1      	adds	r1, r4, r3
 800e500:	1c5a      	adds	r2, r3, #1
 800e502:	2030      	movs	r0, #48	; 0x30
 800e504:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800e508:	4422      	add	r2, r4
 800e50a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800e50e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800e512:	3302      	adds	r3, #2
 800e514:	e7c5      	b.n	800e4a2 <_printf_common+0x62>
 800e516:	2301      	movs	r3, #1
 800e518:	4622      	mov	r2, r4
 800e51a:	4639      	mov	r1, r7
 800e51c:	4630      	mov	r0, r6
 800e51e:	47c0      	blx	r8
 800e520:	3001      	adds	r0, #1
 800e522:	d0e6      	beq.n	800e4f2 <_printf_common+0xb2>
 800e524:	f109 0901 	add.w	r9, r9, #1
 800e528:	e7d8      	b.n	800e4dc <_printf_common+0x9c>
	...

0800e52c <_printf_i>:
 800e52c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e530:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800e534:	460c      	mov	r4, r1
 800e536:	7e09      	ldrb	r1, [r1, #24]
 800e538:	b085      	sub	sp, #20
 800e53a:	296e      	cmp	r1, #110	; 0x6e
 800e53c:	4617      	mov	r7, r2
 800e53e:	4606      	mov	r6, r0
 800e540:	4698      	mov	r8, r3
 800e542:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800e544:	f000 80b3 	beq.w	800e6ae <_printf_i+0x182>
 800e548:	d822      	bhi.n	800e590 <_printf_i+0x64>
 800e54a:	2963      	cmp	r1, #99	; 0x63
 800e54c:	d036      	beq.n	800e5bc <_printf_i+0x90>
 800e54e:	d80a      	bhi.n	800e566 <_printf_i+0x3a>
 800e550:	2900      	cmp	r1, #0
 800e552:	f000 80b9 	beq.w	800e6c8 <_printf_i+0x19c>
 800e556:	2958      	cmp	r1, #88	; 0x58
 800e558:	f000 8083 	beq.w	800e662 <_printf_i+0x136>
 800e55c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800e560:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800e564:	e032      	b.n	800e5cc <_printf_i+0xa0>
 800e566:	2964      	cmp	r1, #100	; 0x64
 800e568:	d001      	beq.n	800e56e <_printf_i+0x42>
 800e56a:	2969      	cmp	r1, #105	; 0x69
 800e56c:	d1f6      	bne.n	800e55c <_printf_i+0x30>
 800e56e:	6820      	ldr	r0, [r4, #0]
 800e570:	6813      	ldr	r3, [r2, #0]
 800e572:	0605      	lsls	r5, r0, #24
 800e574:	f103 0104 	add.w	r1, r3, #4
 800e578:	d52a      	bpl.n	800e5d0 <_printf_i+0xa4>
 800e57a:	681b      	ldr	r3, [r3, #0]
 800e57c:	6011      	str	r1, [r2, #0]
 800e57e:	2b00      	cmp	r3, #0
 800e580:	da03      	bge.n	800e58a <_printf_i+0x5e>
 800e582:	222d      	movs	r2, #45	; 0x2d
 800e584:	425b      	negs	r3, r3
 800e586:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800e58a:	486f      	ldr	r0, [pc, #444]	; (800e748 <_printf_i+0x21c>)
 800e58c:	220a      	movs	r2, #10
 800e58e:	e039      	b.n	800e604 <_printf_i+0xd8>
 800e590:	2973      	cmp	r1, #115	; 0x73
 800e592:	f000 809d 	beq.w	800e6d0 <_printf_i+0x1a4>
 800e596:	d808      	bhi.n	800e5aa <_printf_i+0x7e>
 800e598:	296f      	cmp	r1, #111	; 0x6f
 800e59a:	d020      	beq.n	800e5de <_printf_i+0xb2>
 800e59c:	2970      	cmp	r1, #112	; 0x70
 800e59e:	d1dd      	bne.n	800e55c <_printf_i+0x30>
 800e5a0:	6823      	ldr	r3, [r4, #0]
 800e5a2:	f043 0320 	orr.w	r3, r3, #32
 800e5a6:	6023      	str	r3, [r4, #0]
 800e5a8:	e003      	b.n	800e5b2 <_printf_i+0x86>
 800e5aa:	2975      	cmp	r1, #117	; 0x75
 800e5ac:	d017      	beq.n	800e5de <_printf_i+0xb2>
 800e5ae:	2978      	cmp	r1, #120	; 0x78
 800e5b0:	d1d4      	bne.n	800e55c <_printf_i+0x30>
 800e5b2:	2378      	movs	r3, #120	; 0x78
 800e5b4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800e5b8:	4864      	ldr	r0, [pc, #400]	; (800e74c <_printf_i+0x220>)
 800e5ba:	e055      	b.n	800e668 <_printf_i+0x13c>
 800e5bc:	6813      	ldr	r3, [r2, #0]
 800e5be:	1d19      	adds	r1, r3, #4
 800e5c0:	681b      	ldr	r3, [r3, #0]
 800e5c2:	6011      	str	r1, [r2, #0]
 800e5c4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800e5c8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800e5cc:	2301      	movs	r3, #1
 800e5ce:	e08c      	b.n	800e6ea <_printf_i+0x1be>
 800e5d0:	681b      	ldr	r3, [r3, #0]
 800e5d2:	6011      	str	r1, [r2, #0]
 800e5d4:	f010 0f40 	tst.w	r0, #64	; 0x40
 800e5d8:	bf18      	it	ne
 800e5da:	b21b      	sxthne	r3, r3
 800e5dc:	e7cf      	b.n	800e57e <_printf_i+0x52>
 800e5de:	6813      	ldr	r3, [r2, #0]
 800e5e0:	6825      	ldr	r5, [r4, #0]
 800e5e2:	1d18      	adds	r0, r3, #4
 800e5e4:	6010      	str	r0, [r2, #0]
 800e5e6:	0628      	lsls	r0, r5, #24
 800e5e8:	d501      	bpl.n	800e5ee <_printf_i+0xc2>
 800e5ea:	681b      	ldr	r3, [r3, #0]
 800e5ec:	e002      	b.n	800e5f4 <_printf_i+0xc8>
 800e5ee:	0668      	lsls	r0, r5, #25
 800e5f0:	d5fb      	bpl.n	800e5ea <_printf_i+0xbe>
 800e5f2:	881b      	ldrh	r3, [r3, #0]
 800e5f4:	4854      	ldr	r0, [pc, #336]	; (800e748 <_printf_i+0x21c>)
 800e5f6:	296f      	cmp	r1, #111	; 0x6f
 800e5f8:	bf14      	ite	ne
 800e5fa:	220a      	movne	r2, #10
 800e5fc:	2208      	moveq	r2, #8
 800e5fe:	2100      	movs	r1, #0
 800e600:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800e604:	6865      	ldr	r5, [r4, #4]
 800e606:	60a5      	str	r5, [r4, #8]
 800e608:	2d00      	cmp	r5, #0
 800e60a:	f2c0 8095 	blt.w	800e738 <_printf_i+0x20c>
 800e60e:	6821      	ldr	r1, [r4, #0]
 800e610:	f021 0104 	bic.w	r1, r1, #4
 800e614:	6021      	str	r1, [r4, #0]
 800e616:	2b00      	cmp	r3, #0
 800e618:	d13d      	bne.n	800e696 <_printf_i+0x16a>
 800e61a:	2d00      	cmp	r5, #0
 800e61c:	f040 808e 	bne.w	800e73c <_printf_i+0x210>
 800e620:	4665      	mov	r5, ip
 800e622:	2a08      	cmp	r2, #8
 800e624:	d10b      	bne.n	800e63e <_printf_i+0x112>
 800e626:	6823      	ldr	r3, [r4, #0]
 800e628:	07db      	lsls	r3, r3, #31
 800e62a:	d508      	bpl.n	800e63e <_printf_i+0x112>
 800e62c:	6923      	ldr	r3, [r4, #16]
 800e62e:	6862      	ldr	r2, [r4, #4]
 800e630:	429a      	cmp	r2, r3
 800e632:	bfde      	ittt	le
 800e634:	2330      	movle	r3, #48	; 0x30
 800e636:	f805 3c01 	strble.w	r3, [r5, #-1]
 800e63a:	f105 35ff 	addle.w	r5, r5, #4294967295
 800e63e:	ebac 0305 	sub.w	r3, ip, r5
 800e642:	6123      	str	r3, [r4, #16]
 800e644:	f8cd 8000 	str.w	r8, [sp]
 800e648:	463b      	mov	r3, r7
 800e64a:	aa03      	add	r2, sp, #12
 800e64c:	4621      	mov	r1, r4
 800e64e:	4630      	mov	r0, r6
 800e650:	f7ff fef6 	bl	800e440 <_printf_common>
 800e654:	3001      	adds	r0, #1
 800e656:	d14d      	bne.n	800e6f4 <_printf_i+0x1c8>
 800e658:	f04f 30ff 	mov.w	r0, #4294967295
 800e65c:	b005      	add	sp, #20
 800e65e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e662:	4839      	ldr	r0, [pc, #228]	; (800e748 <_printf_i+0x21c>)
 800e664:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800e668:	6813      	ldr	r3, [r2, #0]
 800e66a:	6821      	ldr	r1, [r4, #0]
 800e66c:	1d1d      	adds	r5, r3, #4
 800e66e:	681b      	ldr	r3, [r3, #0]
 800e670:	6015      	str	r5, [r2, #0]
 800e672:	060a      	lsls	r2, r1, #24
 800e674:	d50b      	bpl.n	800e68e <_printf_i+0x162>
 800e676:	07ca      	lsls	r2, r1, #31
 800e678:	bf44      	itt	mi
 800e67a:	f041 0120 	orrmi.w	r1, r1, #32
 800e67e:	6021      	strmi	r1, [r4, #0]
 800e680:	b91b      	cbnz	r3, 800e68a <_printf_i+0x15e>
 800e682:	6822      	ldr	r2, [r4, #0]
 800e684:	f022 0220 	bic.w	r2, r2, #32
 800e688:	6022      	str	r2, [r4, #0]
 800e68a:	2210      	movs	r2, #16
 800e68c:	e7b7      	b.n	800e5fe <_printf_i+0xd2>
 800e68e:	064d      	lsls	r5, r1, #25
 800e690:	bf48      	it	mi
 800e692:	b29b      	uxthmi	r3, r3
 800e694:	e7ef      	b.n	800e676 <_printf_i+0x14a>
 800e696:	4665      	mov	r5, ip
 800e698:	fbb3 f1f2 	udiv	r1, r3, r2
 800e69c:	fb02 3311 	mls	r3, r2, r1, r3
 800e6a0:	5cc3      	ldrb	r3, [r0, r3]
 800e6a2:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800e6a6:	460b      	mov	r3, r1
 800e6a8:	2900      	cmp	r1, #0
 800e6aa:	d1f5      	bne.n	800e698 <_printf_i+0x16c>
 800e6ac:	e7b9      	b.n	800e622 <_printf_i+0xf6>
 800e6ae:	6813      	ldr	r3, [r2, #0]
 800e6b0:	6825      	ldr	r5, [r4, #0]
 800e6b2:	6961      	ldr	r1, [r4, #20]
 800e6b4:	1d18      	adds	r0, r3, #4
 800e6b6:	6010      	str	r0, [r2, #0]
 800e6b8:	0628      	lsls	r0, r5, #24
 800e6ba:	681b      	ldr	r3, [r3, #0]
 800e6bc:	d501      	bpl.n	800e6c2 <_printf_i+0x196>
 800e6be:	6019      	str	r1, [r3, #0]
 800e6c0:	e002      	b.n	800e6c8 <_printf_i+0x19c>
 800e6c2:	066a      	lsls	r2, r5, #25
 800e6c4:	d5fb      	bpl.n	800e6be <_printf_i+0x192>
 800e6c6:	8019      	strh	r1, [r3, #0]
 800e6c8:	2300      	movs	r3, #0
 800e6ca:	6123      	str	r3, [r4, #16]
 800e6cc:	4665      	mov	r5, ip
 800e6ce:	e7b9      	b.n	800e644 <_printf_i+0x118>
 800e6d0:	6813      	ldr	r3, [r2, #0]
 800e6d2:	1d19      	adds	r1, r3, #4
 800e6d4:	6011      	str	r1, [r2, #0]
 800e6d6:	681d      	ldr	r5, [r3, #0]
 800e6d8:	6862      	ldr	r2, [r4, #4]
 800e6da:	2100      	movs	r1, #0
 800e6dc:	4628      	mov	r0, r5
 800e6de:	f7f1 fd7f 	bl	80001e0 <memchr>
 800e6e2:	b108      	cbz	r0, 800e6e8 <_printf_i+0x1bc>
 800e6e4:	1b40      	subs	r0, r0, r5
 800e6e6:	6060      	str	r0, [r4, #4]
 800e6e8:	6863      	ldr	r3, [r4, #4]
 800e6ea:	6123      	str	r3, [r4, #16]
 800e6ec:	2300      	movs	r3, #0
 800e6ee:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e6f2:	e7a7      	b.n	800e644 <_printf_i+0x118>
 800e6f4:	6923      	ldr	r3, [r4, #16]
 800e6f6:	462a      	mov	r2, r5
 800e6f8:	4639      	mov	r1, r7
 800e6fa:	4630      	mov	r0, r6
 800e6fc:	47c0      	blx	r8
 800e6fe:	3001      	adds	r0, #1
 800e700:	d0aa      	beq.n	800e658 <_printf_i+0x12c>
 800e702:	6823      	ldr	r3, [r4, #0]
 800e704:	079b      	lsls	r3, r3, #30
 800e706:	d413      	bmi.n	800e730 <_printf_i+0x204>
 800e708:	68e0      	ldr	r0, [r4, #12]
 800e70a:	9b03      	ldr	r3, [sp, #12]
 800e70c:	4298      	cmp	r0, r3
 800e70e:	bfb8      	it	lt
 800e710:	4618      	movlt	r0, r3
 800e712:	e7a3      	b.n	800e65c <_printf_i+0x130>
 800e714:	2301      	movs	r3, #1
 800e716:	464a      	mov	r2, r9
 800e718:	4639      	mov	r1, r7
 800e71a:	4630      	mov	r0, r6
 800e71c:	47c0      	blx	r8
 800e71e:	3001      	adds	r0, #1
 800e720:	d09a      	beq.n	800e658 <_printf_i+0x12c>
 800e722:	3501      	adds	r5, #1
 800e724:	68e3      	ldr	r3, [r4, #12]
 800e726:	9a03      	ldr	r2, [sp, #12]
 800e728:	1a9b      	subs	r3, r3, r2
 800e72a:	42ab      	cmp	r3, r5
 800e72c:	dcf2      	bgt.n	800e714 <_printf_i+0x1e8>
 800e72e:	e7eb      	b.n	800e708 <_printf_i+0x1dc>
 800e730:	2500      	movs	r5, #0
 800e732:	f104 0919 	add.w	r9, r4, #25
 800e736:	e7f5      	b.n	800e724 <_printf_i+0x1f8>
 800e738:	2b00      	cmp	r3, #0
 800e73a:	d1ac      	bne.n	800e696 <_printf_i+0x16a>
 800e73c:	7803      	ldrb	r3, [r0, #0]
 800e73e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800e742:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800e746:	e76c      	b.n	800e622 <_printf_i+0xf6>
 800e748:	0801224e 	.word	0x0801224e
 800e74c:	0801225f 	.word	0x0801225f

0800e750 <_scanf_float>:
 800e750:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e754:	469a      	mov	sl, r3
 800e756:	688b      	ldr	r3, [r1, #8]
 800e758:	4616      	mov	r6, r2
 800e75a:	1e5a      	subs	r2, r3, #1
 800e75c:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800e760:	b087      	sub	sp, #28
 800e762:	bf83      	ittte	hi
 800e764:	f46f 72ae 	mvnhi.w	r2, #348	; 0x15c
 800e768:	189b      	addhi	r3, r3, r2
 800e76a:	9301      	strhi	r3, [sp, #4]
 800e76c:	2300      	movls	r3, #0
 800e76e:	bf86      	itte	hi
 800e770:	f240 135d 	movwhi	r3, #349	; 0x15d
 800e774:	608b      	strhi	r3, [r1, #8]
 800e776:	9301      	strls	r3, [sp, #4]
 800e778:	680b      	ldr	r3, [r1, #0]
 800e77a:	4688      	mov	r8, r1
 800e77c:	f04f 0b00 	mov.w	fp, #0
 800e780:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800e784:	f848 3b1c 	str.w	r3, [r8], #28
 800e788:	e9cd bb03 	strd	fp, fp, [sp, #12]
 800e78c:	4607      	mov	r7, r0
 800e78e:	460c      	mov	r4, r1
 800e790:	4645      	mov	r5, r8
 800e792:	465a      	mov	r2, fp
 800e794:	46d9      	mov	r9, fp
 800e796:	f8cd b008 	str.w	fp, [sp, #8]
 800e79a:	68a1      	ldr	r1, [r4, #8]
 800e79c:	b181      	cbz	r1, 800e7c0 <_scanf_float+0x70>
 800e79e:	6833      	ldr	r3, [r6, #0]
 800e7a0:	781b      	ldrb	r3, [r3, #0]
 800e7a2:	2b49      	cmp	r3, #73	; 0x49
 800e7a4:	d071      	beq.n	800e88a <_scanf_float+0x13a>
 800e7a6:	d84d      	bhi.n	800e844 <_scanf_float+0xf4>
 800e7a8:	2b39      	cmp	r3, #57	; 0x39
 800e7aa:	d840      	bhi.n	800e82e <_scanf_float+0xde>
 800e7ac:	2b31      	cmp	r3, #49	; 0x31
 800e7ae:	f080 8088 	bcs.w	800e8c2 <_scanf_float+0x172>
 800e7b2:	2b2d      	cmp	r3, #45	; 0x2d
 800e7b4:	f000 8090 	beq.w	800e8d8 <_scanf_float+0x188>
 800e7b8:	d815      	bhi.n	800e7e6 <_scanf_float+0x96>
 800e7ba:	2b2b      	cmp	r3, #43	; 0x2b
 800e7bc:	f000 808c 	beq.w	800e8d8 <_scanf_float+0x188>
 800e7c0:	f1b9 0f00 	cmp.w	r9, #0
 800e7c4:	d003      	beq.n	800e7ce <_scanf_float+0x7e>
 800e7c6:	6823      	ldr	r3, [r4, #0]
 800e7c8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800e7cc:	6023      	str	r3, [r4, #0]
 800e7ce:	3a01      	subs	r2, #1
 800e7d0:	2a01      	cmp	r2, #1
 800e7d2:	f200 80ea 	bhi.w	800e9aa <_scanf_float+0x25a>
 800e7d6:	4545      	cmp	r5, r8
 800e7d8:	f200 80dc 	bhi.w	800e994 <_scanf_float+0x244>
 800e7dc:	2601      	movs	r6, #1
 800e7de:	4630      	mov	r0, r6
 800e7e0:	b007      	add	sp, #28
 800e7e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e7e6:	2b2e      	cmp	r3, #46	; 0x2e
 800e7e8:	f000 809f 	beq.w	800e92a <_scanf_float+0x1da>
 800e7ec:	2b30      	cmp	r3, #48	; 0x30
 800e7ee:	d1e7      	bne.n	800e7c0 <_scanf_float+0x70>
 800e7f0:	6820      	ldr	r0, [r4, #0]
 800e7f2:	f410 7f80 	tst.w	r0, #256	; 0x100
 800e7f6:	d064      	beq.n	800e8c2 <_scanf_float+0x172>
 800e7f8:	9b01      	ldr	r3, [sp, #4]
 800e7fa:	f020 0080 	bic.w	r0, r0, #128	; 0x80
 800e7fe:	6020      	str	r0, [r4, #0]
 800e800:	f109 0901 	add.w	r9, r9, #1
 800e804:	b11b      	cbz	r3, 800e80e <_scanf_float+0xbe>
 800e806:	3b01      	subs	r3, #1
 800e808:	3101      	adds	r1, #1
 800e80a:	9301      	str	r3, [sp, #4]
 800e80c:	60a1      	str	r1, [r4, #8]
 800e80e:	68a3      	ldr	r3, [r4, #8]
 800e810:	3b01      	subs	r3, #1
 800e812:	60a3      	str	r3, [r4, #8]
 800e814:	6923      	ldr	r3, [r4, #16]
 800e816:	3301      	adds	r3, #1
 800e818:	6123      	str	r3, [r4, #16]
 800e81a:	6873      	ldr	r3, [r6, #4]
 800e81c:	3b01      	subs	r3, #1
 800e81e:	2b00      	cmp	r3, #0
 800e820:	6073      	str	r3, [r6, #4]
 800e822:	f340 80ac 	ble.w	800e97e <_scanf_float+0x22e>
 800e826:	6833      	ldr	r3, [r6, #0]
 800e828:	3301      	adds	r3, #1
 800e82a:	6033      	str	r3, [r6, #0]
 800e82c:	e7b5      	b.n	800e79a <_scanf_float+0x4a>
 800e82e:	2b45      	cmp	r3, #69	; 0x45
 800e830:	f000 8085 	beq.w	800e93e <_scanf_float+0x1ee>
 800e834:	2b46      	cmp	r3, #70	; 0x46
 800e836:	d06a      	beq.n	800e90e <_scanf_float+0x1be>
 800e838:	2b41      	cmp	r3, #65	; 0x41
 800e83a:	d1c1      	bne.n	800e7c0 <_scanf_float+0x70>
 800e83c:	2a01      	cmp	r2, #1
 800e83e:	d1bf      	bne.n	800e7c0 <_scanf_float+0x70>
 800e840:	2202      	movs	r2, #2
 800e842:	e046      	b.n	800e8d2 <_scanf_float+0x182>
 800e844:	2b65      	cmp	r3, #101	; 0x65
 800e846:	d07a      	beq.n	800e93e <_scanf_float+0x1ee>
 800e848:	d818      	bhi.n	800e87c <_scanf_float+0x12c>
 800e84a:	2b54      	cmp	r3, #84	; 0x54
 800e84c:	d066      	beq.n	800e91c <_scanf_float+0x1cc>
 800e84e:	d811      	bhi.n	800e874 <_scanf_float+0x124>
 800e850:	2b4e      	cmp	r3, #78	; 0x4e
 800e852:	d1b5      	bne.n	800e7c0 <_scanf_float+0x70>
 800e854:	2a00      	cmp	r2, #0
 800e856:	d146      	bne.n	800e8e6 <_scanf_float+0x196>
 800e858:	f1b9 0f00 	cmp.w	r9, #0
 800e85c:	d145      	bne.n	800e8ea <_scanf_float+0x19a>
 800e85e:	6821      	ldr	r1, [r4, #0]
 800e860:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 800e864:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 800e868:	d13f      	bne.n	800e8ea <_scanf_float+0x19a>
 800e86a:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 800e86e:	6021      	str	r1, [r4, #0]
 800e870:	2201      	movs	r2, #1
 800e872:	e02e      	b.n	800e8d2 <_scanf_float+0x182>
 800e874:	2b59      	cmp	r3, #89	; 0x59
 800e876:	d01e      	beq.n	800e8b6 <_scanf_float+0x166>
 800e878:	2b61      	cmp	r3, #97	; 0x61
 800e87a:	e7de      	b.n	800e83a <_scanf_float+0xea>
 800e87c:	2b6e      	cmp	r3, #110	; 0x6e
 800e87e:	d0e9      	beq.n	800e854 <_scanf_float+0x104>
 800e880:	d815      	bhi.n	800e8ae <_scanf_float+0x15e>
 800e882:	2b66      	cmp	r3, #102	; 0x66
 800e884:	d043      	beq.n	800e90e <_scanf_float+0x1be>
 800e886:	2b69      	cmp	r3, #105	; 0x69
 800e888:	d19a      	bne.n	800e7c0 <_scanf_float+0x70>
 800e88a:	f1bb 0f00 	cmp.w	fp, #0
 800e88e:	d138      	bne.n	800e902 <_scanf_float+0x1b2>
 800e890:	f1b9 0f00 	cmp.w	r9, #0
 800e894:	d197      	bne.n	800e7c6 <_scanf_float+0x76>
 800e896:	6821      	ldr	r1, [r4, #0]
 800e898:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 800e89c:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 800e8a0:	d195      	bne.n	800e7ce <_scanf_float+0x7e>
 800e8a2:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 800e8a6:	6021      	str	r1, [r4, #0]
 800e8a8:	f04f 0b01 	mov.w	fp, #1
 800e8ac:	e011      	b.n	800e8d2 <_scanf_float+0x182>
 800e8ae:	2b74      	cmp	r3, #116	; 0x74
 800e8b0:	d034      	beq.n	800e91c <_scanf_float+0x1cc>
 800e8b2:	2b79      	cmp	r3, #121	; 0x79
 800e8b4:	d184      	bne.n	800e7c0 <_scanf_float+0x70>
 800e8b6:	f1bb 0f07 	cmp.w	fp, #7
 800e8ba:	d181      	bne.n	800e7c0 <_scanf_float+0x70>
 800e8bc:	f04f 0b08 	mov.w	fp, #8
 800e8c0:	e007      	b.n	800e8d2 <_scanf_float+0x182>
 800e8c2:	eb12 0f0b 	cmn.w	r2, fp
 800e8c6:	f47f af7b 	bne.w	800e7c0 <_scanf_float+0x70>
 800e8ca:	6821      	ldr	r1, [r4, #0]
 800e8cc:	f421 71c0 	bic.w	r1, r1, #384	; 0x180
 800e8d0:	6021      	str	r1, [r4, #0]
 800e8d2:	702b      	strb	r3, [r5, #0]
 800e8d4:	3501      	adds	r5, #1
 800e8d6:	e79a      	b.n	800e80e <_scanf_float+0xbe>
 800e8d8:	6821      	ldr	r1, [r4, #0]
 800e8da:	0608      	lsls	r0, r1, #24
 800e8dc:	f57f af70 	bpl.w	800e7c0 <_scanf_float+0x70>
 800e8e0:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800e8e4:	e7f4      	b.n	800e8d0 <_scanf_float+0x180>
 800e8e6:	2a02      	cmp	r2, #2
 800e8e8:	d047      	beq.n	800e97a <_scanf_float+0x22a>
 800e8ea:	f1bb 0f01 	cmp.w	fp, #1
 800e8ee:	d003      	beq.n	800e8f8 <_scanf_float+0x1a8>
 800e8f0:	f1bb 0f04 	cmp.w	fp, #4
 800e8f4:	f47f af64 	bne.w	800e7c0 <_scanf_float+0x70>
 800e8f8:	f10b 0b01 	add.w	fp, fp, #1
 800e8fc:	fa5f fb8b 	uxtb.w	fp, fp
 800e900:	e7e7      	b.n	800e8d2 <_scanf_float+0x182>
 800e902:	f1bb 0f03 	cmp.w	fp, #3
 800e906:	d0f7      	beq.n	800e8f8 <_scanf_float+0x1a8>
 800e908:	f1bb 0f05 	cmp.w	fp, #5
 800e90c:	e7f2      	b.n	800e8f4 <_scanf_float+0x1a4>
 800e90e:	f1bb 0f02 	cmp.w	fp, #2
 800e912:	f47f af55 	bne.w	800e7c0 <_scanf_float+0x70>
 800e916:	f04f 0b03 	mov.w	fp, #3
 800e91a:	e7da      	b.n	800e8d2 <_scanf_float+0x182>
 800e91c:	f1bb 0f06 	cmp.w	fp, #6
 800e920:	f47f af4e 	bne.w	800e7c0 <_scanf_float+0x70>
 800e924:	f04f 0b07 	mov.w	fp, #7
 800e928:	e7d3      	b.n	800e8d2 <_scanf_float+0x182>
 800e92a:	6821      	ldr	r1, [r4, #0]
 800e92c:	0588      	lsls	r0, r1, #22
 800e92e:	f57f af47 	bpl.w	800e7c0 <_scanf_float+0x70>
 800e932:	f421 7120 	bic.w	r1, r1, #640	; 0x280
 800e936:	6021      	str	r1, [r4, #0]
 800e938:	f8cd 9008 	str.w	r9, [sp, #8]
 800e93c:	e7c9      	b.n	800e8d2 <_scanf_float+0x182>
 800e93e:	6821      	ldr	r1, [r4, #0]
 800e940:	f401 60a0 	and.w	r0, r1, #1280	; 0x500
 800e944:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 800e948:	d006      	beq.n	800e958 <_scanf_float+0x208>
 800e94a:	0548      	lsls	r0, r1, #21
 800e94c:	f57f af38 	bpl.w	800e7c0 <_scanf_float+0x70>
 800e950:	f1b9 0f00 	cmp.w	r9, #0
 800e954:	f43f af3b 	beq.w	800e7ce <_scanf_float+0x7e>
 800e958:	0588      	lsls	r0, r1, #22
 800e95a:	bf58      	it	pl
 800e95c:	9802      	ldrpl	r0, [sp, #8]
 800e95e:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 800e962:	bf58      	it	pl
 800e964:	eba9 0000 	subpl.w	r0, r9, r0
 800e968:	f441 71c0 	orr.w	r1, r1, #384	; 0x180
 800e96c:	bf58      	it	pl
 800e96e:	e9cd 0503 	strdpl	r0, r5, [sp, #12]
 800e972:	6021      	str	r1, [r4, #0]
 800e974:	f04f 0900 	mov.w	r9, #0
 800e978:	e7ab      	b.n	800e8d2 <_scanf_float+0x182>
 800e97a:	2203      	movs	r2, #3
 800e97c:	e7a9      	b.n	800e8d2 <_scanf_float+0x182>
 800e97e:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800e982:	9205      	str	r2, [sp, #20]
 800e984:	4631      	mov	r1, r6
 800e986:	4638      	mov	r0, r7
 800e988:	4798      	blx	r3
 800e98a:	9a05      	ldr	r2, [sp, #20]
 800e98c:	2800      	cmp	r0, #0
 800e98e:	f43f af04 	beq.w	800e79a <_scanf_float+0x4a>
 800e992:	e715      	b.n	800e7c0 <_scanf_float+0x70>
 800e994:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800e998:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 800e99c:	4632      	mov	r2, r6
 800e99e:	4638      	mov	r0, r7
 800e9a0:	4798      	blx	r3
 800e9a2:	6923      	ldr	r3, [r4, #16]
 800e9a4:	3b01      	subs	r3, #1
 800e9a6:	6123      	str	r3, [r4, #16]
 800e9a8:	e715      	b.n	800e7d6 <_scanf_float+0x86>
 800e9aa:	f10b 33ff 	add.w	r3, fp, #4294967295
 800e9ae:	2b06      	cmp	r3, #6
 800e9b0:	d80a      	bhi.n	800e9c8 <_scanf_float+0x278>
 800e9b2:	f1bb 0f02 	cmp.w	fp, #2
 800e9b6:	d968      	bls.n	800ea8a <_scanf_float+0x33a>
 800e9b8:	f1ab 0b03 	sub.w	fp, fp, #3
 800e9bc:	fa5f fb8b 	uxtb.w	fp, fp
 800e9c0:	eba5 0b0b 	sub.w	fp, r5, fp
 800e9c4:	455d      	cmp	r5, fp
 800e9c6:	d14b      	bne.n	800ea60 <_scanf_float+0x310>
 800e9c8:	6823      	ldr	r3, [r4, #0]
 800e9ca:	05da      	lsls	r2, r3, #23
 800e9cc:	d51f      	bpl.n	800ea0e <_scanf_float+0x2be>
 800e9ce:	055b      	lsls	r3, r3, #21
 800e9d0:	d468      	bmi.n	800eaa4 <_scanf_float+0x354>
 800e9d2:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800e9d6:	6923      	ldr	r3, [r4, #16]
 800e9d8:	2965      	cmp	r1, #101	; 0x65
 800e9da:	f103 33ff 	add.w	r3, r3, #4294967295
 800e9de:	f105 3bff 	add.w	fp, r5, #4294967295
 800e9e2:	6123      	str	r3, [r4, #16]
 800e9e4:	d00d      	beq.n	800ea02 <_scanf_float+0x2b2>
 800e9e6:	2945      	cmp	r1, #69	; 0x45
 800e9e8:	d00b      	beq.n	800ea02 <_scanf_float+0x2b2>
 800e9ea:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800e9ee:	4632      	mov	r2, r6
 800e9f0:	4638      	mov	r0, r7
 800e9f2:	4798      	blx	r3
 800e9f4:	6923      	ldr	r3, [r4, #16]
 800e9f6:	f815 1c02 	ldrb.w	r1, [r5, #-2]
 800e9fa:	3b01      	subs	r3, #1
 800e9fc:	f1a5 0b02 	sub.w	fp, r5, #2
 800ea00:	6123      	str	r3, [r4, #16]
 800ea02:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800ea06:	4632      	mov	r2, r6
 800ea08:	4638      	mov	r0, r7
 800ea0a:	4798      	blx	r3
 800ea0c:	465d      	mov	r5, fp
 800ea0e:	6826      	ldr	r6, [r4, #0]
 800ea10:	f016 0610 	ands.w	r6, r6, #16
 800ea14:	d17a      	bne.n	800eb0c <_scanf_float+0x3bc>
 800ea16:	702e      	strb	r6, [r5, #0]
 800ea18:	6823      	ldr	r3, [r4, #0]
 800ea1a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800ea1e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ea22:	d142      	bne.n	800eaaa <_scanf_float+0x35a>
 800ea24:	9b02      	ldr	r3, [sp, #8]
 800ea26:	eba9 0303 	sub.w	r3, r9, r3
 800ea2a:	425a      	negs	r2, r3
 800ea2c:	2b00      	cmp	r3, #0
 800ea2e:	d149      	bne.n	800eac4 <_scanf_float+0x374>
 800ea30:	2200      	movs	r2, #0
 800ea32:	4641      	mov	r1, r8
 800ea34:	4638      	mov	r0, r7
 800ea36:	f000 fecb 	bl	800f7d0 <_strtod_r>
 800ea3a:	6825      	ldr	r5, [r4, #0]
 800ea3c:	f8da 3000 	ldr.w	r3, [sl]
 800ea40:	f015 0f02 	tst.w	r5, #2
 800ea44:	f103 0204 	add.w	r2, r3, #4
 800ea48:	ec59 8b10 	vmov	r8, r9, d0
 800ea4c:	f8ca 2000 	str.w	r2, [sl]
 800ea50:	d043      	beq.n	800eada <_scanf_float+0x38a>
 800ea52:	681b      	ldr	r3, [r3, #0]
 800ea54:	e9c3 8900 	strd	r8, r9, [r3]
 800ea58:	68e3      	ldr	r3, [r4, #12]
 800ea5a:	3301      	adds	r3, #1
 800ea5c:	60e3      	str	r3, [r4, #12]
 800ea5e:	e6be      	b.n	800e7de <_scanf_float+0x8e>
 800ea60:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800ea64:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 800ea68:	4632      	mov	r2, r6
 800ea6a:	4638      	mov	r0, r7
 800ea6c:	4798      	blx	r3
 800ea6e:	6923      	ldr	r3, [r4, #16]
 800ea70:	3b01      	subs	r3, #1
 800ea72:	6123      	str	r3, [r4, #16]
 800ea74:	e7a6      	b.n	800e9c4 <_scanf_float+0x274>
 800ea76:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800ea7a:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 800ea7e:	4632      	mov	r2, r6
 800ea80:	4638      	mov	r0, r7
 800ea82:	4798      	blx	r3
 800ea84:	6923      	ldr	r3, [r4, #16]
 800ea86:	3b01      	subs	r3, #1
 800ea88:	6123      	str	r3, [r4, #16]
 800ea8a:	4545      	cmp	r5, r8
 800ea8c:	d8f3      	bhi.n	800ea76 <_scanf_float+0x326>
 800ea8e:	e6a5      	b.n	800e7dc <_scanf_float+0x8c>
 800ea90:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800ea94:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 800ea98:	4632      	mov	r2, r6
 800ea9a:	4638      	mov	r0, r7
 800ea9c:	4798      	blx	r3
 800ea9e:	6923      	ldr	r3, [r4, #16]
 800eaa0:	3b01      	subs	r3, #1
 800eaa2:	6123      	str	r3, [r4, #16]
 800eaa4:	4545      	cmp	r5, r8
 800eaa6:	d8f3      	bhi.n	800ea90 <_scanf_float+0x340>
 800eaa8:	e698      	b.n	800e7dc <_scanf_float+0x8c>
 800eaaa:	9b03      	ldr	r3, [sp, #12]
 800eaac:	2b00      	cmp	r3, #0
 800eaae:	d0bf      	beq.n	800ea30 <_scanf_float+0x2e0>
 800eab0:	9904      	ldr	r1, [sp, #16]
 800eab2:	230a      	movs	r3, #10
 800eab4:	4632      	mov	r2, r6
 800eab6:	3101      	adds	r1, #1
 800eab8:	4638      	mov	r0, r7
 800eaba:	f000 ff15 	bl	800f8e8 <_strtol_r>
 800eabe:	9b03      	ldr	r3, [sp, #12]
 800eac0:	9d04      	ldr	r5, [sp, #16]
 800eac2:	1ac2      	subs	r2, r0, r3
 800eac4:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800eac8:	429d      	cmp	r5, r3
 800eaca:	bf28      	it	cs
 800eacc:	f504 75b7 	addcs.w	r5, r4, #366	; 0x16e
 800ead0:	490f      	ldr	r1, [pc, #60]	; (800eb10 <_scanf_float+0x3c0>)
 800ead2:	4628      	mov	r0, r5
 800ead4:	f000 f84c 	bl	800eb70 <siprintf>
 800ead8:	e7aa      	b.n	800ea30 <_scanf_float+0x2e0>
 800eada:	f015 0504 	ands.w	r5, r5, #4
 800eade:	d1b8      	bne.n	800ea52 <_scanf_float+0x302>
 800eae0:	681f      	ldr	r7, [r3, #0]
 800eae2:	ee10 2a10 	vmov	r2, s0
 800eae6:	464b      	mov	r3, r9
 800eae8:	ee10 0a10 	vmov	r0, s0
 800eaec:	4649      	mov	r1, r9
 800eaee:	f7f2 f81d 	bl	8000b2c <__aeabi_dcmpun>
 800eaf2:	b128      	cbz	r0, 800eb00 <_scanf_float+0x3b0>
 800eaf4:	4628      	mov	r0, r5
 800eaf6:	f000 f835 	bl	800eb64 <nanf>
 800eafa:	ed87 0a00 	vstr	s0, [r7]
 800eafe:	e7ab      	b.n	800ea58 <_scanf_float+0x308>
 800eb00:	4640      	mov	r0, r8
 800eb02:	4649      	mov	r1, r9
 800eb04:	f7f2 f870 	bl	8000be8 <__aeabi_d2f>
 800eb08:	6038      	str	r0, [r7, #0]
 800eb0a:	e7a5      	b.n	800ea58 <_scanf_float+0x308>
 800eb0c:	2600      	movs	r6, #0
 800eb0e:	e666      	b.n	800e7de <_scanf_float+0x8e>
 800eb10:	08012270 	.word	0x08012270

0800eb14 <iprintf>:
 800eb14:	b40f      	push	{r0, r1, r2, r3}
 800eb16:	4b0a      	ldr	r3, [pc, #40]	; (800eb40 <iprintf+0x2c>)
 800eb18:	b513      	push	{r0, r1, r4, lr}
 800eb1a:	681c      	ldr	r4, [r3, #0]
 800eb1c:	b124      	cbz	r4, 800eb28 <iprintf+0x14>
 800eb1e:	69a3      	ldr	r3, [r4, #24]
 800eb20:	b913      	cbnz	r3, 800eb28 <iprintf+0x14>
 800eb22:	4620      	mov	r0, r4
 800eb24:	f001 fd78 	bl	8010618 <__sinit>
 800eb28:	ab05      	add	r3, sp, #20
 800eb2a:	9a04      	ldr	r2, [sp, #16]
 800eb2c:	68a1      	ldr	r1, [r4, #8]
 800eb2e:	9301      	str	r3, [sp, #4]
 800eb30:	4620      	mov	r0, r4
 800eb32:	f002 fed3 	bl	80118dc <_vfiprintf_r>
 800eb36:	b002      	add	sp, #8
 800eb38:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800eb3c:	b004      	add	sp, #16
 800eb3e:	4770      	bx	lr
 800eb40:	20000190 	.word	0x20000190

0800eb44 <_sbrk_r>:
 800eb44:	b538      	push	{r3, r4, r5, lr}
 800eb46:	4c06      	ldr	r4, [pc, #24]	; (800eb60 <_sbrk_r+0x1c>)
 800eb48:	2300      	movs	r3, #0
 800eb4a:	4605      	mov	r5, r0
 800eb4c:	4608      	mov	r0, r1
 800eb4e:	6023      	str	r3, [r4, #0]
 800eb50:	f7f4 f9b0 	bl	8002eb4 <_sbrk>
 800eb54:	1c43      	adds	r3, r0, #1
 800eb56:	d102      	bne.n	800eb5e <_sbrk_r+0x1a>
 800eb58:	6823      	ldr	r3, [r4, #0]
 800eb5a:	b103      	cbz	r3, 800eb5e <_sbrk_r+0x1a>
 800eb5c:	602b      	str	r3, [r5, #0]
 800eb5e:	bd38      	pop	{r3, r4, r5, pc}
 800eb60:	20002970 	.word	0x20002970

0800eb64 <nanf>:
 800eb64:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800eb6c <nanf+0x8>
 800eb68:	4770      	bx	lr
 800eb6a:	bf00      	nop
 800eb6c:	7fc00000 	.word	0x7fc00000

0800eb70 <siprintf>:
 800eb70:	b40e      	push	{r1, r2, r3}
 800eb72:	b500      	push	{lr}
 800eb74:	b09c      	sub	sp, #112	; 0x70
 800eb76:	ab1d      	add	r3, sp, #116	; 0x74
 800eb78:	9002      	str	r0, [sp, #8]
 800eb7a:	9006      	str	r0, [sp, #24]
 800eb7c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800eb80:	4809      	ldr	r0, [pc, #36]	; (800eba8 <siprintf+0x38>)
 800eb82:	9107      	str	r1, [sp, #28]
 800eb84:	9104      	str	r1, [sp, #16]
 800eb86:	4909      	ldr	r1, [pc, #36]	; (800ebac <siprintf+0x3c>)
 800eb88:	f853 2b04 	ldr.w	r2, [r3], #4
 800eb8c:	9105      	str	r1, [sp, #20]
 800eb8e:	6800      	ldr	r0, [r0, #0]
 800eb90:	9301      	str	r3, [sp, #4]
 800eb92:	a902      	add	r1, sp, #8
 800eb94:	f002 fd80 	bl	8011698 <_svfiprintf_r>
 800eb98:	9b02      	ldr	r3, [sp, #8]
 800eb9a:	2200      	movs	r2, #0
 800eb9c:	701a      	strb	r2, [r3, #0]
 800eb9e:	b01c      	add	sp, #112	; 0x70
 800eba0:	f85d eb04 	ldr.w	lr, [sp], #4
 800eba4:	b003      	add	sp, #12
 800eba6:	4770      	bx	lr
 800eba8:	20000190 	.word	0x20000190
 800ebac:	ffff0208 	.word	0xffff0208

0800ebb0 <sulp>:
 800ebb0:	b570      	push	{r4, r5, r6, lr}
 800ebb2:	4604      	mov	r4, r0
 800ebb4:	460d      	mov	r5, r1
 800ebb6:	ec45 4b10 	vmov	d0, r4, r5
 800ebba:	4616      	mov	r6, r2
 800ebbc:	f002 fbd0 	bl	8011360 <__ulp>
 800ebc0:	ec51 0b10 	vmov	r0, r1, d0
 800ebc4:	b17e      	cbz	r6, 800ebe6 <sulp+0x36>
 800ebc6:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800ebca:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800ebce:	2b00      	cmp	r3, #0
 800ebd0:	dd09      	ble.n	800ebe6 <sulp+0x36>
 800ebd2:	051b      	lsls	r3, r3, #20
 800ebd4:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800ebd8:	2400      	movs	r4, #0
 800ebda:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800ebde:	4622      	mov	r2, r4
 800ebe0:	462b      	mov	r3, r5
 800ebe2:	f7f1 fd09 	bl	80005f8 <__aeabi_dmul>
 800ebe6:	bd70      	pop	{r4, r5, r6, pc}

0800ebe8 <_strtod_l>:
 800ebe8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ebec:	461f      	mov	r7, r3
 800ebee:	b0a1      	sub	sp, #132	; 0x84
 800ebf0:	2300      	movs	r3, #0
 800ebf2:	4681      	mov	r9, r0
 800ebf4:	4638      	mov	r0, r7
 800ebf6:	460e      	mov	r6, r1
 800ebf8:	9217      	str	r2, [sp, #92]	; 0x5c
 800ebfa:	931c      	str	r3, [sp, #112]	; 0x70
 800ebfc:	f002 f8bf 	bl	8010d7e <__localeconv_l>
 800ec00:	4680      	mov	r8, r0
 800ec02:	6800      	ldr	r0, [r0, #0]
 800ec04:	f7f1 fae4 	bl	80001d0 <strlen>
 800ec08:	f04f 0a00 	mov.w	sl, #0
 800ec0c:	4604      	mov	r4, r0
 800ec0e:	f04f 0b00 	mov.w	fp, #0
 800ec12:	961b      	str	r6, [sp, #108]	; 0x6c
 800ec14:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800ec16:	781a      	ldrb	r2, [r3, #0]
 800ec18:	2a0d      	cmp	r2, #13
 800ec1a:	d832      	bhi.n	800ec82 <_strtod_l+0x9a>
 800ec1c:	2a09      	cmp	r2, #9
 800ec1e:	d236      	bcs.n	800ec8e <_strtod_l+0xa6>
 800ec20:	2a00      	cmp	r2, #0
 800ec22:	d03e      	beq.n	800eca2 <_strtod_l+0xba>
 800ec24:	2300      	movs	r3, #0
 800ec26:	930d      	str	r3, [sp, #52]	; 0x34
 800ec28:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 800ec2a:	782b      	ldrb	r3, [r5, #0]
 800ec2c:	2b30      	cmp	r3, #48	; 0x30
 800ec2e:	f040 80ac 	bne.w	800ed8a <_strtod_l+0x1a2>
 800ec32:	786b      	ldrb	r3, [r5, #1]
 800ec34:	2b58      	cmp	r3, #88	; 0x58
 800ec36:	d001      	beq.n	800ec3c <_strtod_l+0x54>
 800ec38:	2b78      	cmp	r3, #120	; 0x78
 800ec3a:	d167      	bne.n	800ed0c <_strtod_l+0x124>
 800ec3c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ec3e:	9301      	str	r3, [sp, #4]
 800ec40:	ab1c      	add	r3, sp, #112	; 0x70
 800ec42:	9300      	str	r3, [sp, #0]
 800ec44:	9702      	str	r7, [sp, #8]
 800ec46:	ab1d      	add	r3, sp, #116	; 0x74
 800ec48:	4a88      	ldr	r2, [pc, #544]	; (800ee6c <_strtod_l+0x284>)
 800ec4a:	a91b      	add	r1, sp, #108	; 0x6c
 800ec4c:	4648      	mov	r0, r9
 800ec4e:	f001 fdbc 	bl	80107ca <__gethex>
 800ec52:	f010 0407 	ands.w	r4, r0, #7
 800ec56:	4606      	mov	r6, r0
 800ec58:	d005      	beq.n	800ec66 <_strtod_l+0x7e>
 800ec5a:	2c06      	cmp	r4, #6
 800ec5c:	d12b      	bne.n	800ecb6 <_strtod_l+0xce>
 800ec5e:	3501      	adds	r5, #1
 800ec60:	2300      	movs	r3, #0
 800ec62:	951b      	str	r5, [sp, #108]	; 0x6c
 800ec64:	930d      	str	r3, [sp, #52]	; 0x34
 800ec66:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800ec68:	2b00      	cmp	r3, #0
 800ec6a:	f040 859a 	bne.w	800f7a2 <_strtod_l+0xbba>
 800ec6e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ec70:	b1e3      	cbz	r3, 800ecac <_strtod_l+0xc4>
 800ec72:	4652      	mov	r2, sl
 800ec74:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800ec78:	ec43 2b10 	vmov	d0, r2, r3
 800ec7c:	b021      	add	sp, #132	; 0x84
 800ec7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ec82:	2a2b      	cmp	r2, #43	; 0x2b
 800ec84:	d015      	beq.n	800ecb2 <_strtod_l+0xca>
 800ec86:	2a2d      	cmp	r2, #45	; 0x2d
 800ec88:	d004      	beq.n	800ec94 <_strtod_l+0xac>
 800ec8a:	2a20      	cmp	r2, #32
 800ec8c:	d1ca      	bne.n	800ec24 <_strtod_l+0x3c>
 800ec8e:	3301      	adds	r3, #1
 800ec90:	931b      	str	r3, [sp, #108]	; 0x6c
 800ec92:	e7bf      	b.n	800ec14 <_strtod_l+0x2c>
 800ec94:	2201      	movs	r2, #1
 800ec96:	920d      	str	r2, [sp, #52]	; 0x34
 800ec98:	1c5a      	adds	r2, r3, #1
 800ec9a:	921b      	str	r2, [sp, #108]	; 0x6c
 800ec9c:	785b      	ldrb	r3, [r3, #1]
 800ec9e:	2b00      	cmp	r3, #0
 800eca0:	d1c2      	bne.n	800ec28 <_strtod_l+0x40>
 800eca2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800eca4:	961b      	str	r6, [sp, #108]	; 0x6c
 800eca6:	2b00      	cmp	r3, #0
 800eca8:	f040 8579 	bne.w	800f79e <_strtod_l+0xbb6>
 800ecac:	4652      	mov	r2, sl
 800ecae:	465b      	mov	r3, fp
 800ecb0:	e7e2      	b.n	800ec78 <_strtod_l+0x90>
 800ecb2:	2200      	movs	r2, #0
 800ecb4:	e7ef      	b.n	800ec96 <_strtod_l+0xae>
 800ecb6:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800ecb8:	b13a      	cbz	r2, 800ecca <_strtod_l+0xe2>
 800ecba:	2135      	movs	r1, #53	; 0x35
 800ecbc:	a81e      	add	r0, sp, #120	; 0x78
 800ecbe:	f002 fc47 	bl	8011550 <__copybits>
 800ecc2:	991c      	ldr	r1, [sp, #112]	; 0x70
 800ecc4:	4648      	mov	r0, r9
 800ecc6:	f002 f8b3 	bl	8010e30 <_Bfree>
 800ecca:	3c01      	subs	r4, #1
 800eccc:	2c04      	cmp	r4, #4
 800ecce:	d806      	bhi.n	800ecde <_strtod_l+0xf6>
 800ecd0:	e8df f004 	tbb	[pc, r4]
 800ecd4:	1714030a 	.word	0x1714030a
 800ecd8:	0a          	.byte	0x0a
 800ecd9:	00          	.byte	0x00
 800ecda:	e9dd ab1e 	ldrd	sl, fp, [sp, #120]	; 0x78
 800ecde:	0730      	lsls	r0, r6, #28
 800ece0:	d5c1      	bpl.n	800ec66 <_strtod_l+0x7e>
 800ece2:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800ece6:	e7be      	b.n	800ec66 <_strtod_l+0x7e>
 800ece8:	e9dd a31e 	ldrd	sl, r3, [sp, #120]	; 0x78
 800ecec:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800ecee:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800ecf2:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800ecf6:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800ecfa:	e7f0      	b.n	800ecde <_strtod_l+0xf6>
 800ecfc:	f8df b170 	ldr.w	fp, [pc, #368]	; 800ee70 <_strtod_l+0x288>
 800ed00:	e7ed      	b.n	800ecde <_strtod_l+0xf6>
 800ed02:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800ed06:	f04f 3aff 	mov.w	sl, #4294967295
 800ed0a:	e7e8      	b.n	800ecde <_strtod_l+0xf6>
 800ed0c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800ed0e:	1c5a      	adds	r2, r3, #1
 800ed10:	921b      	str	r2, [sp, #108]	; 0x6c
 800ed12:	785b      	ldrb	r3, [r3, #1]
 800ed14:	2b30      	cmp	r3, #48	; 0x30
 800ed16:	d0f9      	beq.n	800ed0c <_strtod_l+0x124>
 800ed18:	2b00      	cmp	r3, #0
 800ed1a:	d0a4      	beq.n	800ec66 <_strtod_l+0x7e>
 800ed1c:	2301      	movs	r3, #1
 800ed1e:	2500      	movs	r5, #0
 800ed20:	9306      	str	r3, [sp, #24]
 800ed22:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800ed24:	9308      	str	r3, [sp, #32]
 800ed26:	9507      	str	r5, [sp, #28]
 800ed28:	9505      	str	r5, [sp, #20]
 800ed2a:	220a      	movs	r2, #10
 800ed2c:	981b      	ldr	r0, [sp, #108]	; 0x6c
 800ed2e:	7807      	ldrb	r7, [r0, #0]
 800ed30:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 800ed34:	b2d9      	uxtb	r1, r3
 800ed36:	2909      	cmp	r1, #9
 800ed38:	d929      	bls.n	800ed8e <_strtod_l+0x1a6>
 800ed3a:	4622      	mov	r2, r4
 800ed3c:	f8d8 1000 	ldr.w	r1, [r8]
 800ed40:	f002 ff25 	bl	8011b8e <strncmp>
 800ed44:	2800      	cmp	r0, #0
 800ed46:	d031      	beq.n	800edac <_strtod_l+0x1c4>
 800ed48:	2000      	movs	r0, #0
 800ed4a:	9c05      	ldr	r4, [sp, #20]
 800ed4c:	9004      	str	r0, [sp, #16]
 800ed4e:	463b      	mov	r3, r7
 800ed50:	4602      	mov	r2, r0
 800ed52:	2b65      	cmp	r3, #101	; 0x65
 800ed54:	d001      	beq.n	800ed5a <_strtod_l+0x172>
 800ed56:	2b45      	cmp	r3, #69	; 0x45
 800ed58:	d114      	bne.n	800ed84 <_strtod_l+0x19c>
 800ed5a:	b924      	cbnz	r4, 800ed66 <_strtod_l+0x17e>
 800ed5c:	b910      	cbnz	r0, 800ed64 <_strtod_l+0x17c>
 800ed5e:	9b06      	ldr	r3, [sp, #24]
 800ed60:	2b00      	cmp	r3, #0
 800ed62:	d09e      	beq.n	800eca2 <_strtod_l+0xba>
 800ed64:	2400      	movs	r4, #0
 800ed66:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 800ed68:	1c73      	adds	r3, r6, #1
 800ed6a:	931b      	str	r3, [sp, #108]	; 0x6c
 800ed6c:	7873      	ldrb	r3, [r6, #1]
 800ed6e:	2b2b      	cmp	r3, #43	; 0x2b
 800ed70:	d078      	beq.n	800ee64 <_strtod_l+0x27c>
 800ed72:	2b2d      	cmp	r3, #45	; 0x2d
 800ed74:	d070      	beq.n	800ee58 <_strtod_l+0x270>
 800ed76:	f04f 0c00 	mov.w	ip, #0
 800ed7a:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 800ed7e:	2f09      	cmp	r7, #9
 800ed80:	d97c      	bls.n	800ee7c <_strtod_l+0x294>
 800ed82:	961b      	str	r6, [sp, #108]	; 0x6c
 800ed84:	f04f 0e00 	mov.w	lr, #0
 800ed88:	e09a      	b.n	800eec0 <_strtod_l+0x2d8>
 800ed8a:	2300      	movs	r3, #0
 800ed8c:	e7c7      	b.n	800ed1e <_strtod_l+0x136>
 800ed8e:	9905      	ldr	r1, [sp, #20]
 800ed90:	2908      	cmp	r1, #8
 800ed92:	bfdd      	ittte	le
 800ed94:	9907      	ldrle	r1, [sp, #28]
 800ed96:	fb02 3301 	mlale	r3, r2, r1, r3
 800ed9a:	9307      	strle	r3, [sp, #28]
 800ed9c:	fb02 3505 	mlagt	r5, r2, r5, r3
 800eda0:	9b05      	ldr	r3, [sp, #20]
 800eda2:	3001      	adds	r0, #1
 800eda4:	3301      	adds	r3, #1
 800eda6:	9305      	str	r3, [sp, #20]
 800eda8:	901b      	str	r0, [sp, #108]	; 0x6c
 800edaa:	e7bf      	b.n	800ed2c <_strtod_l+0x144>
 800edac:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800edae:	191a      	adds	r2, r3, r4
 800edb0:	921b      	str	r2, [sp, #108]	; 0x6c
 800edb2:	9a05      	ldr	r2, [sp, #20]
 800edb4:	5d1b      	ldrb	r3, [r3, r4]
 800edb6:	2a00      	cmp	r2, #0
 800edb8:	d037      	beq.n	800ee2a <_strtod_l+0x242>
 800edba:	9c05      	ldr	r4, [sp, #20]
 800edbc:	4602      	mov	r2, r0
 800edbe:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800edc2:	2909      	cmp	r1, #9
 800edc4:	d913      	bls.n	800edee <_strtod_l+0x206>
 800edc6:	2101      	movs	r1, #1
 800edc8:	9104      	str	r1, [sp, #16]
 800edca:	e7c2      	b.n	800ed52 <_strtod_l+0x16a>
 800edcc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800edce:	1c5a      	adds	r2, r3, #1
 800edd0:	921b      	str	r2, [sp, #108]	; 0x6c
 800edd2:	785b      	ldrb	r3, [r3, #1]
 800edd4:	3001      	adds	r0, #1
 800edd6:	2b30      	cmp	r3, #48	; 0x30
 800edd8:	d0f8      	beq.n	800edcc <_strtod_l+0x1e4>
 800edda:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 800edde:	2a08      	cmp	r2, #8
 800ede0:	f200 84e4 	bhi.w	800f7ac <_strtod_l+0xbc4>
 800ede4:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800ede6:	9208      	str	r2, [sp, #32]
 800ede8:	4602      	mov	r2, r0
 800edea:	2000      	movs	r0, #0
 800edec:	4604      	mov	r4, r0
 800edee:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 800edf2:	f100 0101 	add.w	r1, r0, #1
 800edf6:	d012      	beq.n	800ee1e <_strtod_l+0x236>
 800edf8:	440a      	add	r2, r1
 800edfa:	eb00 0c04 	add.w	ip, r0, r4
 800edfe:	4621      	mov	r1, r4
 800ee00:	270a      	movs	r7, #10
 800ee02:	458c      	cmp	ip, r1
 800ee04:	d113      	bne.n	800ee2e <_strtod_l+0x246>
 800ee06:	1821      	adds	r1, r4, r0
 800ee08:	2908      	cmp	r1, #8
 800ee0a:	f104 0401 	add.w	r4, r4, #1
 800ee0e:	4404      	add	r4, r0
 800ee10:	dc19      	bgt.n	800ee46 <_strtod_l+0x25e>
 800ee12:	9b07      	ldr	r3, [sp, #28]
 800ee14:	210a      	movs	r1, #10
 800ee16:	fb01 e303 	mla	r3, r1, r3, lr
 800ee1a:	9307      	str	r3, [sp, #28]
 800ee1c:	2100      	movs	r1, #0
 800ee1e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800ee20:	1c58      	adds	r0, r3, #1
 800ee22:	901b      	str	r0, [sp, #108]	; 0x6c
 800ee24:	785b      	ldrb	r3, [r3, #1]
 800ee26:	4608      	mov	r0, r1
 800ee28:	e7c9      	b.n	800edbe <_strtod_l+0x1d6>
 800ee2a:	9805      	ldr	r0, [sp, #20]
 800ee2c:	e7d3      	b.n	800edd6 <_strtod_l+0x1ee>
 800ee2e:	2908      	cmp	r1, #8
 800ee30:	f101 0101 	add.w	r1, r1, #1
 800ee34:	dc03      	bgt.n	800ee3e <_strtod_l+0x256>
 800ee36:	9b07      	ldr	r3, [sp, #28]
 800ee38:	437b      	muls	r3, r7
 800ee3a:	9307      	str	r3, [sp, #28]
 800ee3c:	e7e1      	b.n	800ee02 <_strtod_l+0x21a>
 800ee3e:	2910      	cmp	r1, #16
 800ee40:	bfd8      	it	le
 800ee42:	437d      	mulle	r5, r7
 800ee44:	e7dd      	b.n	800ee02 <_strtod_l+0x21a>
 800ee46:	2c10      	cmp	r4, #16
 800ee48:	bfdc      	itt	le
 800ee4a:	210a      	movle	r1, #10
 800ee4c:	fb01 e505 	mlale	r5, r1, r5, lr
 800ee50:	e7e4      	b.n	800ee1c <_strtod_l+0x234>
 800ee52:	2301      	movs	r3, #1
 800ee54:	9304      	str	r3, [sp, #16]
 800ee56:	e781      	b.n	800ed5c <_strtod_l+0x174>
 800ee58:	f04f 0c01 	mov.w	ip, #1
 800ee5c:	1cb3      	adds	r3, r6, #2
 800ee5e:	931b      	str	r3, [sp, #108]	; 0x6c
 800ee60:	78b3      	ldrb	r3, [r6, #2]
 800ee62:	e78a      	b.n	800ed7a <_strtod_l+0x192>
 800ee64:	f04f 0c00 	mov.w	ip, #0
 800ee68:	e7f8      	b.n	800ee5c <_strtod_l+0x274>
 800ee6a:	bf00      	nop
 800ee6c:	08012278 	.word	0x08012278
 800ee70:	7ff00000 	.word	0x7ff00000
 800ee74:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800ee76:	1c5f      	adds	r7, r3, #1
 800ee78:	971b      	str	r7, [sp, #108]	; 0x6c
 800ee7a:	785b      	ldrb	r3, [r3, #1]
 800ee7c:	2b30      	cmp	r3, #48	; 0x30
 800ee7e:	d0f9      	beq.n	800ee74 <_strtod_l+0x28c>
 800ee80:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 800ee84:	2f08      	cmp	r7, #8
 800ee86:	f63f af7d 	bhi.w	800ed84 <_strtod_l+0x19c>
 800ee8a:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 800ee8e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800ee90:	930a      	str	r3, [sp, #40]	; 0x28
 800ee92:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800ee94:	1c5f      	adds	r7, r3, #1
 800ee96:	971b      	str	r7, [sp, #108]	; 0x6c
 800ee98:	785b      	ldrb	r3, [r3, #1]
 800ee9a:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 800ee9e:	f1b8 0f09 	cmp.w	r8, #9
 800eea2:	d937      	bls.n	800ef14 <_strtod_l+0x32c>
 800eea4:	990a      	ldr	r1, [sp, #40]	; 0x28
 800eea6:	1a7f      	subs	r7, r7, r1
 800eea8:	2f08      	cmp	r7, #8
 800eeaa:	f644 671f 	movw	r7, #19999	; 0x4e1f
 800eeae:	dc37      	bgt.n	800ef20 <_strtod_l+0x338>
 800eeb0:	45be      	cmp	lr, r7
 800eeb2:	bfa8      	it	ge
 800eeb4:	46be      	movge	lr, r7
 800eeb6:	f1bc 0f00 	cmp.w	ip, #0
 800eeba:	d001      	beq.n	800eec0 <_strtod_l+0x2d8>
 800eebc:	f1ce 0e00 	rsb	lr, lr, #0
 800eec0:	2c00      	cmp	r4, #0
 800eec2:	d151      	bne.n	800ef68 <_strtod_l+0x380>
 800eec4:	2800      	cmp	r0, #0
 800eec6:	f47f aece 	bne.w	800ec66 <_strtod_l+0x7e>
 800eeca:	9a06      	ldr	r2, [sp, #24]
 800eecc:	2a00      	cmp	r2, #0
 800eece:	f47f aeca 	bne.w	800ec66 <_strtod_l+0x7e>
 800eed2:	9a04      	ldr	r2, [sp, #16]
 800eed4:	2a00      	cmp	r2, #0
 800eed6:	f47f aee4 	bne.w	800eca2 <_strtod_l+0xba>
 800eeda:	2b4e      	cmp	r3, #78	; 0x4e
 800eedc:	d027      	beq.n	800ef2e <_strtod_l+0x346>
 800eede:	dc21      	bgt.n	800ef24 <_strtod_l+0x33c>
 800eee0:	2b49      	cmp	r3, #73	; 0x49
 800eee2:	f47f aede 	bne.w	800eca2 <_strtod_l+0xba>
 800eee6:	49a0      	ldr	r1, [pc, #640]	; (800f168 <_strtod_l+0x580>)
 800eee8:	a81b      	add	r0, sp, #108	; 0x6c
 800eeea:	f001 fea1 	bl	8010c30 <__match>
 800eeee:	2800      	cmp	r0, #0
 800eef0:	f43f aed7 	beq.w	800eca2 <_strtod_l+0xba>
 800eef4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800eef6:	499d      	ldr	r1, [pc, #628]	; (800f16c <_strtod_l+0x584>)
 800eef8:	3b01      	subs	r3, #1
 800eefa:	a81b      	add	r0, sp, #108	; 0x6c
 800eefc:	931b      	str	r3, [sp, #108]	; 0x6c
 800eefe:	f001 fe97 	bl	8010c30 <__match>
 800ef02:	b910      	cbnz	r0, 800ef0a <_strtod_l+0x322>
 800ef04:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800ef06:	3301      	adds	r3, #1
 800ef08:	931b      	str	r3, [sp, #108]	; 0x6c
 800ef0a:	f8df b274 	ldr.w	fp, [pc, #628]	; 800f180 <_strtod_l+0x598>
 800ef0e:	f04f 0a00 	mov.w	sl, #0
 800ef12:	e6a8      	b.n	800ec66 <_strtod_l+0x7e>
 800ef14:	210a      	movs	r1, #10
 800ef16:	fb01 3e0e 	mla	lr, r1, lr, r3
 800ef1a:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800ef1e:	e7b8      	b.n	800ee92 <_strtod_l+0x2aa>
 800ef20:	46be      	mov	lr, r7
 800ef22:	e7c8      	b.n	800eeb6 <_strtod_l+0x2ce>
 800ef24:	2b69      	cmp	r3, #105	; 0x69
 800ef26:	d0de      	beq.n	800eee6 <_strtod_l+0x2fe>
 800ef28:	2b6e      	cmp	r3, #110	; 0x6e
 800ef2a:	f47f aeba 	bne.w	800eca2 <_strtod_l+0xba>
 800ef2e:	4990      	ldr	r1, [pc, #576]	; (800f170 <_strtod_l+0x588>)
 800ef30:	a81b      	add	r0, sp, #108	; 0x6c
 800ef32:	f001 fe7d 	bl	8010c30 <__match>
 800ef36:	2800      	cmp	r0, #0
 800ef38:	f43f aeb3 	beq.w	800eca2 <_strtod_l+0xba>
 800ef3c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800ef3e:	781b      	ldrb	r3, [r3, #0]
 800ef40:	2b28      	cmp	r3, #40	; 0x28
 800ef42:	d10e      	bne.n	800ef62 <_strtod_l+0x37a>
 800ef44:	aa1e      	add	r2, sp, #120	; 0x78
 800ef46:	498b      	ldr	r1, [pc, #556]	; (800f174 <_strtod_l+0x58c>)
 800ef48:	a81b      	add	r0, sp, #108	; 0x6c
 800ef4a:	f001 fe85 	bl	8010c58 <__hexnan>
 800ef4e:	2805      	cmp	r0, #5
 800ef50:	d107      	bne.n	800ef62 <_strtod_l+0x37a>
 800ef52:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800ef54:	f8dd a078 	ldr.w	sl, [sp, #120]	; 0x78
 800ef58:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800ef5c:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800ef60:	e681      	b.n	800ec66 <_strtod_l+0x7e>
 800ef62:	f8df b224 	ldr.w	fp, [pc, #548]	; 800f188 <_strtod_l+0x5a0>
 800ef66:	e7d2      	b.n	800ef0e <_strtod_l+0x326>
 800ef68:	ebae 0302 	sub.w	r3, lr, r2
 800ef6c:	9306      	str	r3, [sp, #24]
 800ef6e:	9b05      	ldr	r3, [sp, #20]
 800ef70:	9807      	ldr	r0, [sp, #28]
 800ef72:	2b00      	cmp	r3, #0
 800ef74:	bf08      	it	eq
 800ef76:	4623      	moveq	r3, r4
 800ef78:	2c10      	cmp	r4, #16
 800ef7a:	9305      	str	r3, [sp, #20]
 800ef7c:	46a0      	mov	r8, r4
 800ef7e:	bfa8      	it	ge
 800ef80:	f04f 0810 	movge.w	r8, #16
 800ef84:	f7f1 fabe 	bl	8000504 <__aeabi_ui2d>
 800ef88:	2c09      	cmp	r4, #9
 800ef8a:	4682      	mov	sl, r0
 800ef8c:	468b      	mov	fp, r1
 800ef8e:	dc13      	bgt.n	800efb8 <_strtod_l+0x3d0>
 800ef90:	9b06      	ldr	r3, [sp, #24]
 800ef92:	2b00      	cmp	r3, #0
 800ef94:	f43f ae67 	beq.w	800ec66 <_strtod_l+0x7e>
 800ef98:	9b06      	ldr	r3, [sp, #24]
 800ef9a:	dd7a      	ble.n	800f092 <_strtod_l+0x4aa>
 800ef9c:	2b16      	cmp	r3, #22
 800ef9e:	dc61      	bgt.n	800f064 <_strtod_l+0x47c>
 800efa0:	4a75      	ldr	r2, [pc, #468]	; (800f178 <_strtod_l+0x590>)
 800efa2:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 800efa6:	e9de 0100 	ldrd	r0, r1, [lr]
 800efaa:	4652      	mov	r2, sl
 800efac:	465b      	mov	r3, fp
 800efae:	f7f1 fb23 	bl	80005f8 <__aeabi_dmul>
 800efb2:	4682      	mov	sl, r0
 800efb4:	468b      	mov	fp, r1
 800efb6:	e656      	b.n	800ec66 <_strtod_l+0x7e>
 800efb8:	4b6f      	ldr	r3, [pc, #444]	; (800f178 <_strtod_l+0x590>)
 800efba:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800efbe:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800efc2:	f7f1 fb19 	bl	80005f8 <__aeabi_dmul>
 800efc6:	4606      	mov	r6, r0
 800efc8:	4628      	mov	r0, r5
 800efca:	460f      	mov	r7, r1
 800efcc:	f7f1 fa9a 	bl	8000504 <__aeabi_ui2d>
 800efd0:	4602      	mov	r2, r0
 800efd2:	460b      	mov	r3, r1
 800efd4:	4630      	mov	r0, r6
 800efd6:	4639      	mov	r1, r7
 800efd8:	f7f1 f958 	bl	800028c <__adddf3>
 800efdc:	2c0f      	cmp	r4, #15
 800efde:	4682      	mov	sl, r0
 800efe0:	468b      	mov	fp, r1
 800efe2:	ddd5      	ble.n	800ef90 <_strtod_l+0x3a8>
 800efe4:	9b06      	ldr	r3, [sp, #24]
 800efe6:	eba4 0808 	sub.w	r8, r4, r8
 800efea:	4498      	add	r8, r3
 800efec:	f1b8 0f00 	cmp.w	r8, #0
 800eff0:	f340 8096 	ble.w	800f120 <_strtod_l+0x538>
 800eff4:	f018 030f 	ands.w	r3, r8, #15
 800eff8:	d00a      	beq.n	800f010 <_strtod_l+0x428>
 800effa:	495f      	ldr	r1, [pc, #380]	; (800f178 <_strtod_l+0x590>)
 800effc:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800f000:	4652      	mov	r2, sl
 800f002:	465b      	mov	r3, fp
 800f004:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f008:	f7f1 faf6 	bl	80005f8 <__aeabi_dmul>
 800f00c:	4682      	mov	sl, r0
 800f00e:	468b      	mov	fp, r1
 800f010:	f038 080f 	bics.w	r8, r8, #15
 800f014:	d073      	beq.n	800f0fe <_strtod_l+0x516>
 800f016:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800f01a:	dd47      	ble.n	800f0ac <_strtod_l+0x4c4>
 800f01c:	2400      	movs	r4, #0
 800f01e:	46a0      	mov	r8, r4
 800f020:	9407      	str	r4, [sp, #28]
 800f022:	9405      	str	r4, [sp, #20]
 800f024:	2322      	movs	r3, #34	; 0x22
 800f026:	f8df b158 	ldr.w	fp, [pc, #344]	; 800f180 <_strtod_l+0x598>
 800f02a:	f8c9 3000 	str.w	r3, [r9]
 800f02e:	f04f 0a00 	mov.w	sl, #0
 800f032:	9b07      	ldr	r3, [sp, #28]
 800f034:	2b00      	cmp	r3, #0
 800f036:	f43f ae16 	beq.w	800ec66 <_strtod_l+0x7e>
 800f03a:	991c      	ldr	r1, [sp, #112]	; 0x70
 800f03c:	4648      	mov	r0, r9
 800f03e:	f001 fef7 	bl	8010e30 <_Bfree>
 800f042:	9905      	ldr	r1, [sp, #20]
 800f044:	4648      	mov	r0, r9
 800f046:	f001 fef3 	bl	8010e30 <_Bfree>
 800f04a:	4641      	mov	r1, r8
 800f04c:	4648      	mov	r0, r9
 800f04e:	f001 feef 	bl	8010e30 <_Bfree>
 800f052:	9907      	ldr	r1, [sp, #28]
 800f054:	4648      	mov	r0, r9
 800f056:	f001 feeb 	bl	8010e30 <_Bfree>
 800f05a:	4621      	mov	r1, r4
 800f05c:	4648      	mov	r0, r9
 800f05e:	f001 fee7 	bl	8010e30 <_Bfree>
 800f062:	e600      	b.n	800ec66 <_strtod_l+0x7e>
 800f064:	9a06      	ldr	r2, [sp, #24]
 800f066:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 800f06a:	4293      	cmp	r3, r2
 800f06c:	dbba      	blt.n	800efe4 <_strtod_l+0x3fc>
 800f06e:	4d42      	ldr	r5, [pc, #264]	; (800f178 <_strtod_l+0x590>)
 800f070:	f1c4 040f 	rsb	r4, r4, #15
 800f074:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 800f078:	4652      	mov	r2, sl
 800f07a:	465b      	mov	r3, fp
 800f07c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f080:	f7f1 faba 	bl	80005f8 <__aeabi_dmul>
 800f084:	9b06      	ldr	r3, [sp, #24]
 800f086:	1b1c      	subs	r4, r3, r4
 800f088:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 800f08c:	e9d5 2300 	ldrd	r2, r3, [r5]
 800f090:	e78d      	b.n	800efae <_strtod_l+0x3c6>
 800f092:	f113 0f16 	cmn.w	r3, #22
 800f096:	dba5      	blt.n	800efe4 <_strtod_l+0x3fc>
 800f098:	4a37      	ldr	r2, [pc, #220]	; (800f178 <_strtod_l+0x590>)
 800f09a:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 800f09e:	e9d2 2300 	ldrd	r2, r3, [r2]
 800f0a2:	4650      	mov	r0, sl
 800f0a4:	4659      	mov	r1, fp
 800f0a6:	f7f1 fbd1 	bl	800084c <__aeabi_ddiv>
 800f0aa:	e782      	b.n	800efb2 <_strtod_l+0x3ca>
 800f0ac:	2300      	movs	r3, #0
 800f0ae:	4e33      	ldr	r6, [pc, #204]	; (800f17c <_strtod_l+0x594>)
 800f0b0:	ea4f 1828 	mov.w	r8, r8, asr #4
 800f0b4:	4650      	mov	r0, sl
 800f0b6:	4659      	mov	r1, fp
 800f0b8:	461d      	mov	r5, r3
 800f0ba:	f1b8 0f01 	cmp.w	r8, #1
 800f0be:	dc21      	bgt.n	800f104 <_strtod_l+0x51c>
 800f0c0:	b10b      	cbz	r3, 800f0c6 <_strtod_l+0x4de>
 800f0c2:	4682      	mov	sl, r0
 800f0c4:	468b      	mov	fp, r1
 800f0c6:	4b2d      	ldr	r3, [pc, #180]	; (800f17c <_strtod_l+0x594>)
 800f0c8:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800f0cc:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800f0d0:	4652      	mov	r2, sl
 800f0d2:	465b      	mov	r3, fp
 800f0d4:	e9d5 0100 	ldrd	r0, r1, [r5]
 800f0d8:	f7f1 fa8e 	bl	80005f8 <__aeabi_dmul>
 800f0dc:	4b28      	ldr	r3, [pc, #160]	; (800f180 <_strtod_l+0x598>)
 800f0de:	460a      	mov	r2, r1
 800f0e0:	400b      	ands	r3, r1
 800f0e2:	4928      	ldr	r1, [pc, #160]	; (800f184 <_strtod_l+0x59c>)
 800f0e4:	428b      	cmp	r3, r1
 800f0e6:	4682      	mov	sl, r0
 800f0e8:	d898      	bhi.n	800f01c <_strtod_l+0x434>
 800f0ea:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800f0ee:	428b      	cmp	r3, r1
 800f0f0:	bf86      	itte	hi
 800f0f2:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 800f18c <_strtod_l+0x5a4>
 800f0f6:	f04f 3aff 	movhi.w	sl, #4294967295
 800f0fa:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800f0fe:	2300      	movs	r3, #0
 800f100:	9304      	str	r3, [sp, #16]
 800f102:	e077      	b.n	800f1f4 <_strtod_l+0x60c>
 800f104:	f018 0f01 	tst.w	r8, #1
 800f108:	d006      	beq.n	800f118 <_strtod_l+0x530>
 800f10a:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 800f10e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f112:	f7f1 fa71 	bl	80005f8 <__aeabi_dmul>
 800f116:	2301      	movs	r3, #1
 800f118:	3501      	adds	r5, #1
 800f11a:	ea4f 0868 	mov.w	r8, r8, asr #1
 800f11e:	e7cc      	b.n	800f0ba <_strtod_l+0x4d2>
 800f120:	d0ed      	beq.n	800f0fe <_strtod_l+0x516>
 800f122:	f1c8 0800 	rsb	r8, r8, #0
 800f126:	f018 020f 	ands.w	r2, r8, #15
 800f12a:	d00a      	beq.n	800f142 <_strtod_l+0x55a>
 800f12c:	4b12      	ldr	r3, [pc, #72]	; (800f178 <_strtod_l+0x590>)
 800f12e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800f132:	4650      	mov	r0, sl
 800f134:	4659      	mov	r1, fp
 800f136:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f13a:	f7f1 fb87 	bl	800084c <__aeabi_ddiv>
 800f13e:	4682      	mov	sl, r0
 800f140:	468b      	mov	fp, r1
 800f142:	ea5f 1828 	movs.w	r8, r8, asr #4
 800f146:	d0da      	beq.n	800f0fe <_strtod_l+0x516>
 800f148:	f1b8 0f1f 	cmp.w	r8, #31
 800f14c:	dd20      	ble.n	800f190 <_strtod_l+0x5a8>
 800f14e:	2400      	movs	r4, #0
 800f150:	46a0      	mov	r8, r4
 800f152:	9407      	str	r4, [sp, #28]
 800f154:	9405      	str	r4, [sp, #20]
 800f156:	2322      	movs	r3, #34	; 0x22
 800f158:	f04f 0a00 	mov.w	sl, #0
 800f15c:	f04f 0b00 	mov.w	fp, #0
 800f160:	f8c9 3000 	str.w	r3, [r9]
 800f164:	e765      	b.n	800f032 <_strtod_l+0x44a>
 800f166:	bf00      	nop
 800f168:	08012241 	.word	0x08012241
 800f16c:	080122cb 	.word	0x080122cb
 800f170:	08012249 	.word	0x08012249
 800f174:	0801228c 	.word	0x0801228c
 800f178:	08012370 	.word	0x08012370
 800f17c:	08012348 	.word	0x08012348
 800f180:	7ff00000 	.word	0x7ff00000
 800f184:	7ca00000 	.word	0x7ca00000
 800f188:	fff80000 	.word	0xfff80000
 800f18c:	7fefffff 	.word	0x7fefffff
 800f190:	f018 0310 	ands.w	r3, r8, #16
 800f194:	bf18      	it	ne
 800f196:	236a      	movne	r3, #106	; 0x6a
 800f198:	4da0      	ldr	r5, [pc, #640]	; (800f41c <_strtod_l+0x834>)
 800f19a:	9304      	str	r3, [sp, #16]
 800f19c:	4650      	mov	r0, sl
 800f19e:	4659      	mov	r1, fp
 800f1a0:	2300      	movs	r3, #0
 800f1a2:	f1b8 0f00 	cmp.w	r8, #0
 800f1a6:	f300 810a 	bgt.w	800f3be <_strtod_l+0x7d6>
 800f1aa:	b10b      	cbz	r3, 800f1b0 <_strtod_l+0x5c8>
 800f1ac:	4682      	mov	sl, r0
 800f1ae:	468b      	mov	fp, r1
 800f1b0:	9b04      	ldr	r3, [sp, #16]
 800f1b2:	b1bb      	cbz	r3, 800f1e4 <_strtod_l+0x5fc>
 800f1b4:	f3cb 530a 	ubfx	r3, fp, #20, #11
 800f1b8:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800f1bc:	2b00      	cmp	r3, #0
 800f1be:	4659      	mov	r1, fp
 800f1c0:	dd10      	ble.n	800f1e4 <_strtod_l+0x5fc>
 800f1c2:	2b1f      	cmp	r3, #31
 800f1c4:	f340 8107 	ble.w	800f3d6 <_strtod_l+0x7ee>
 800f1c8:	2b34      	cmp	r3, #52	; 0x34
 800f1ca:	bfde      	ittt	le
 800f1cc:	3b20      	suble	r3, #32
 800f1ce:	f04f 32ff 	movle.w	r2, #4294967295
 800f1d2:	fa02 f303 	lslle.w	r3, r2, r3
 800f1d6:	f04f 0a00 	mov.w	sl, #0
 800f1da:	bfcc      	ite	gt
 800f1dc:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800f1e0:	ea03 0b01 	andle.w	fp, r3, r1
 800f1e4:	2200      	movs	r2, #0
 800f1e6:	2300      	movs	r3, #0
 800f1e8:	4650      	mov	r0, sl
 800f1ea:	4659      	mov	r1, fp
 800f1ec:	f7f1 fc6c 	bl	8000ac8 <__aeabi_dcmpeq>
 800f1f0:	2800      	cmp	r0, #0
 800f1f2:	d1ac      	bne.n	800f14e <_strtod_l+0x566>
 800f1f4:	9b07      	ldr	r3, [sp, #28]
 800f1f6:	9300      	str	r3, [sp, #0]
 800f1f8:	9a05      	ldr	r2, [sp, #20]
 800f1fa:	9908      	ldr	r1, [sp, #32]
 800f1fc:	4623      	mov	r3, r4
 800f1fe:	4648      	mov	r0, r9
 800f200:	f001 fe68 	bl	8010ed4 <__s2b>
 800f204:	9007      	str	r0, [sp, #28]
 800f206:	2800      	cmp	r0, #0
 800f208:	f43f af08 	beq.w	800f01c <_strtod_l+0x434>
 800f20c:	9a06      	ldr	r2, [sp, #24]
 800f20e:	9b06      	ldr	r3, [sp, #24]
 800f210:	2a00      	cmp	r2, #0
 800f212:	f1c3 0300 	rsb	r3, r3, #0
 800f216:	bfa8      	it	ge
 800f218:	2300      	movge	r3, #0
 800f21a:	930e      	str	r3, [sp, #56]	; 0x38
 800f21c:	2400      	movs	r4, #0
 800f21e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800f222:	9316      	str	r3, [sp, #88]	; 0x58
 800f224:	46a0      	mov	r8, r4
 800f226:	9b07      	ldr	r3, [sp, #28]
 800f228:	4648      	mov	r0, r9
 800f22a:	6859      	ldr	r1, [r3, #4]
 800f22c:	f001 fdcc 	bl	8010dc8 <_Balloc>
 800f230:	9005      	str	r0, [sp, #20]
 800f232:	2800      	cmp	r0, #0
 800f234:	f43f aef6 	beq.w	800f024 <_strtod_l+0x43c>
 800f238:	9b07      	ldr	r3, [sp, #28]
 800f23a:	691a      	ldr	r2, [r3, #16]
 800f23c:	3202      	adds	r2, #2
 800f23e:	f103 010c 	add.w	r1, r3, #12
 800f242:	0092      	lsls	r2, r2, #2
 800f244:	300c      	adds	r0, #12
 800f246:	f7fe fd6b 	bl	800dd20 <memcpy>
 800f24a:	aa1e      	add	r2, sp, #120	; 0x78
 800f24c:	a91d      	add	r1, sp, #116	; 0x74
 800f24e:	ec4b ab10 	vmov	d0, sl, fp
 800f252:	4648      	mov	r0, r9
 800f254:	e9cd ab08 	strd	sl, fp, [sp, #32]
 800f258:	f002 f8f8 	bl	801144c <__d2b>
 800f25c:	901c      	str	r0, [sp, #112]	; 0x70
 800f25e:	2800      	cmp	r0, #0
 800f260:	f43f aee0 	beq.w	800f024 <_strtod_l+0x43c>
 800f264:	2101      	movs	r1, #1
 800f266:	4648      	mov	r0, r9
 800f268:	f001 fec0 	bl	8010fec <__i2b>
 800f26c:	4680      	mov	r8, r0
 800f26e:	2800      	cmp	r0, #0
 800f270:	f43f aed8 	beq.w	800f024 <_strtod_l+0x43c>
 800f274:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 800f276:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800f278:	2e00      	cmp	r6, #0
 800f27a:	bfab      	itete	ge
 800f27c:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 800f27e:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 800f280:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 800f282:	9f0e      	ldrlt	r7, [sp, #56]	; 0x38
 800f284:	bfac      	ite	ge
 800f286:	18f7      	addge	r7, r6, r3
 800f288:	1b9d      	sublt	r5, r3, r6
 800f28a:	9b04      	ldr	r3, [sp, #16]
 800f28c:	1af6      	subs	r6, r6, r3
 800f28e:	4416      	add	r6, r2
 800f290:	4b63      	ldr	r3, [pc, #396]	; (800f420 <_strtod_l+0x838>)
 800f292:	3e01      	subs	r6, #1
 800f294:	429e      	cmp	r6, r3
 800f296:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800f29a:	f280 80af 	bge.w	800f3fc <_strtod_l+0x814>
 800f29e:	1b9b      	subs	r3, r3, r6
 800f2a0:	2b1f      	cmp	r3, #31
 800f2a2:	eba2 0203 	sub.w	r2, r2, r3
 800f2a6:	f04f 0101 	mov.w	r1, #1
 800f2aa:	f300 809b 	bgt.w	800f3e4 <_strtod_l+0x7fc>
 800f2ae:	fa01 f303 	lsl.w	r3, r1, r3
 800f2b2:	930f      	str	r3, [sp, #60]	; 0x3c
 800f2b4:	2300      	movs	r3, #0
 800f2b6:	930a      	str	r3, [sp, #40]	; 0x28
 800f2b8:	18be      	adds	r6, r7, r2
 800f2ba:	9b04      	ldr	r3, [sp, #16]
 800f2bc:	42b7      	cmp	r7, r6
 800f2be:	4415      	add	r5, r2
 800f2c0:	441d      	add	r5, r3
 800f2c2:	463b      	mov	r3, r7
 800f2c4:	bfa8      	it	ge
 800f2c6:	4633      	movge	r3, r6
 800f2c8:	42ab      	cmp	r3, r5
 800f2ca:	bfa8      	it	ge
 800f2cc:	462b      	movge	r3, r5
 800f2ce:	2b00      	cmp	r3, #0
 800f2d0:	bfc2      	ittt	gt
 800f2d2:	1af6      	subgt	r6, r6, r3
 800f2d4:	1aed      	subgt	r5, r5, r3
 800f2d6:	1aff      	subgt	r7, r7, r3
 800f2d8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f2da:	b1bb      	cbz	r3, 800f30c <_strtod_l+0x724>
 800f2dc:	4641      	mov	r1, r8
 800f2de:	461a      	mov	r2, r3
 800f2e0:	4648      	mov	r0, r9
 800f2e2:	f001 ff23 	bl	801112c <__pow5mult>
 800f2e6:	4680      	mov	r8, r0
 800f2e8:	2800      	cmp	r0, #0
 800f2ea:	f43f ae9b 	beq.w	800f024 <_strtod_l+0x43c>
 800f2ee:	4601      	mov	r1, r0
 800f2f0:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800f2f2:	4648      	mov	r0, r9
 800f2f4:	f001 fe83 	bl	8010ffe <__multiply>
 800f2f8:	900c      	str	r0, [sp, #48]	; 0x30
 800f2fa:	2800      	cmp	r0, #0
 800f2fc:	f43f ae92 	beq.w	800f024 <_strtod_l+0x43c>
 800f300:	991c      	ldr	r1, [sp, #112]	; 0x70
 800f302:	4648      	mov	r0, r9
 800f304:	f001 fd94 	bl	8010e30 <_Bfree>
 800f308:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f30a:	931c      	str	r3, [sp, #112]	; 0x70
 800f30c:	2e00      	cmp	r6, #0
 800f30e:	dc7a      	bgt.n	800f406 <_strtod_l+0x81e>
 800f310:	9b06      	ldr	r3, [sp, #24]
 800f312:	2b00      	cmp	r3, #0
 800f314:	dd08      	ble.n	800f328 <_strtod_l+0x740>
 800f316:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800f318:	9905      	ldr	r1, [sp, #20]
 800f31a:	4648      	mov	r0, r9
 800f31c:	f001 ff06 	bl	801112c <__pow5mult>
 800f320:	9005      	str	r0, [sp, #20]
 800f322:	2800      	cmp	r0, #0
 800f324:	f43f ae7e 	beq.w	800f024 <_strtod_l+0x43c>
 800f328:	2d00      	cmp	r5, #0
 800f32a:	dd08      	ble.n	800f33e <_strtod_l+0x756>
 800f32c:	462a      	mov	r2, r5
 800f32e:	9905      	ldr	r1, [sp, #20]
 800f330:	4648      	mov	r0, r9
 800f332:	f001 ff49 	bl	80111c8 <__lshift>
 800f336:	9005      	str	r0, [sp, #20]
 800f338:	2800      	cmp	r0, #0
 800f33a:	f43f ae73 	beq.w	800f024 <_strtod_l+0x43c>
 800f33e:	2f00      	cmp	r7, #0
 800f340:	dd08      	ble.n	800f354 <_strtod_l+0x76c>
 800f342:	4641      	mov	r1, r8
 800f344:	463a      	mov	r2, r7
 800f346:	4648      	mov	r0, r9
 800f348:	f001 ff3e 	bl	80111c8 <__lshift>
 800f34c:	4680      	mov	r8, r0
 800f34e:	2800      	cmp	r0, #0
 800f350:	f43f ae68 	beq.w	800f024 <_strtod_l+0x43c>
 800f354:	9a05      	ldr	r2, [sp, #20]
 800f356:	991c      	ldr	r1, [sp, #112]	; 0x70
 800f358:	4648      	mov	r0, r9
 800f35a:	f001 ffa3 	bl	80112a4 <__mdiff>
 800f35e:	4604      	mov	r4, r0
 800f360:	2800      	cmp	r0, #0
 800f362:	f43f ae5f 	beq.w	800f024 <_strtod_l+0x43c>
 800f366:	68c3      	ldr	r3, [r0, #12]
 800f368:	930c      	str	r3, [sp, #48]	; 0x30
 800f36a:	2300      	movs	r3, #0
 800f36c:	60c3      	str	r3, [r0, #12]
 800f36e:	4641      	mov	r1, r8
 800f370:	f001 ff7e 	bl	8011270 <__mcmp>
 800f374:	2800      	cmp	r0, #0
 800f376:	da55      	bge.n	800f424 <_strtod_l+0x83c>
 800f378:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f37a:	b9e3      	cbnz	r3, 800f3b6 <_strtod_l+0x7ce>
 800f37c:	f1ba 0f00 	cmp.w	sl, #0
 800f380:	d119      	bne.n	800f3b6 <_strtod_l+0x7ce>
 800f382:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800f386:	b9b3      	cbnz	r3, 800f3b6 <_strtod_l+0x7ce>
 800f388:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800f38c:	0d1b      	lsrs	r3, r3, #20
 800f38e:	051b      	lsls	r3, r3, #20
 800f390:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800f394:	d90f      	bls.n	800f3b6 <_strtod_l+0x7ce>
 800f396:	6963      	ldr	r3, [r4, #20]
 800f398:	b913      	cbnz	r3, 800f3a0 <_strtod_l+0x7b8>
 800f39a:	6923      	ldr	r3, [r4, #16]
 800f39c:	2b01      	cmp	r3, #1
 800f39e:	dd0a      	ble.n	800f3b6 <_strtod_l+0x7ce>
 800f3a0:	4621      	mov	r1, r4
 800f3a2:	2201      	movs	r2, #1
 800f3a4:	4648      	mov	r0, r9
 800f3a6:	f001 ff0f 	bl	80111c8 <__lshift>
 800f3aa:	4641      	mov	r1, r8
 800f3ac:	4604      	mov	r4, r0
 800f3ae:	f001 ff5f 	bl	8011270 <__mcmp>
 800f3b2:	2800      	cmp	r0, #0
 800f3b4:	dc67      	bgt.n	800f486 <_strtod_l+0x89e>
 800f3b6:	9b04      	ldr	r3, [sp, #16]
 800f3b8:	2b00      	cmp	r3, #0
 800f3ba:	d171      	bne.n	800f4a0 <_strtod_l+0x8b8>
 800f3bc:	e63d      	b.n	800f03a <_strtod_l+0x452>
 800f3be:	f018 0f01 	tst.w	r8, #1
 800f3c2:	d004      	beq.n	800f3ce <_strtod_l+0x7e6>
 800f3c4:	e9d5 2300 	ldrd	r2, r3, [r5]
 800f3c8:	f7f1 f916 	bl	80005f8 <__aeabi_dmul>
 800f3cc:	2301      	movs	r3, #1
 800f3ce:	ea4f 0868 	mov.w	r8, r8, asr #1
 800f3d2:	3508      	adds	r5, #8
 800f3d4:	e6e5      	b.n	800f1a2 <_strtod_l+0x5ba>
 800f3d6:	f04f 32ff 	mov.w	r2, #4294967295
 800f3da:	fa02 f303 	lsl.w	r3, r2, r3
 800f3de:	ea03 0a0a 	and.w	sl, r3, sl
 800f3e2:	e6ff      	b.n	800f1e4 <_strtod_l+0x5fc>
 800f3e4:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 800f3e8:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 800f3ec:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 800f3f0:	36e2      	adds	r6, #226	; 0xe2
 800f3f2:	fa01 f306 	lsl.w	r3, r1, r6
 800f3f6:	930a      	str	r3, [sp, #40]	; 0x28
 800f3f8:	910f      	str	r1, [sp, #60]	; 0x3c
 800f3fa:	e75d      	b.n	800f2b8 <_strtod_l+0x6d0>
 800f3fc:	2300      	movs	r3, #0
 800f3fe:	930a      	str	r3, [sp, #40]	; 0x28
 800f400:	2301      	movs	r3, #1
 800f402:	930f      	str	r3, [sp, #60]	; 0x3c
 800f404:	e758      	b.n	800f2b8 <_strtod_l+0x6d0>
 800f406:	4632      	mov	r2, r6
 800f408:	991c      	ldr	r1, [sp, #112]	; 0x70
 800f40a:	4648      	mov	r0, r9
 800f40c:	f001 fedc 	bl	80111c8 <__lshift>
 800f410:	901c      	str	r0, [sp, #112]	; 0x70
 800f412:	2800      	cmp	r0, #0
 800f414:	f47f af7c 	bne.w	800f310 <_strtod_l+0x728>
 800f418:	e604      	b.n	800f024 <_strtod_l+0x43c>
 800f41a:	bf00      	nop
 800f41c:	080122a0 	.word	0x080122a0
 800f420:	fffffc02 	.word	0xfffffc02
 800f424:	465d      	mov	r5, fp
 800f426:	f040 8086 	bne.w	800f536 <_strtod_l+0x94e>
 800f42a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800f42c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800f430:	b32a      	cbz	r2, 800f47e <_strtod_l+0x896>
 800f432:	4aaf      	ldr	r2, [pc, #700]	; (800f6f0 <_strtod_l+0xb08>)
 800f434:	4293      	cmp	r3, r2
 800f436:	d153      	bne.n	800f4e0 <_strtod_l+0x8f8>
 800f438:	9b04      	ldr	r3, [sp, #16]
 800f43a:	4650      	mov	r0, sl
 800f43c:	b1d3      	cbz	r3, 800f474 <_strtod_l+0x88c>
 800f43e:	4aad      	ldr	r2, [pc, #692]	; (800f6f4 <_strtod_l+0xb0c>)
 800f440:	402a      	ands	r2, r5
 800f442:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 800f446:	f04f 31ff 	mov.w	r1, #4294967295
 800f44a:	d816      	bhi.n	800f47a <_strtod_l+0x892>
 800f44c:	0d12      	lsrs	r2, r2, #20
 800f44e:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800f452:	fa01 f303 	lsl.w	r3, r1, r3
 800f456:	4298      	cmp	r0, r3
 800f458:	d142      	bne.n	800f4e0 <_strtod_l+0x8f8>
 800f45a:	4ba7      	ldr	r3, [pc, #668]	; (800f6f8 <_strtod_l+0xb10>)
 800f45c:	429d      	cmp	r5, r3
 800f45e:	d102      	bne.n	800f466 <_strtod_l+0x87e>
 800f460:	3001      	adds	r0, #1
 800f462:	f43f addf 	beq.w	800f024 <_strtod_l+0x43c>
 800f466:	4ba3      	ldr	r3, [pc, #652]	; (800f6f4 <_strtod_l+0xb0c>)
 800f468:	402b      	ands	r3, r5
 800f46a:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800f46e:	f04f 0a00 	mov.w	sl, #0
 800f472:	e7a0      	b.n	800f3b6 <_strtod_l+0x7ce>
 800f474:	f04f 33ff 	mov.w	r3, #4294967295
 800f478:	e7ed      	b.n	800f456 <_strtod_l+0x86e>
 800f47a:	460b      	mov	r3, r1
 800f47c:	e7eb      	b.n	800f456 <_strtod_l+0x86e>
 800f47e:	bb7b      	cbnz	r3, 800f4e0 <_strtod_l+0x8f8>
 800f480:	f1ba 0f00 	cmp.w	sl, #0
 800f484:	d12c      	bne.n	800f4e0 <_strtod_l+0x8f8>
 800f486:	9904      	ldr	r1, [sp, #16]
 800f488:	4a9a      	ldr	r2, [pc, #616]	; (800f6f4 <_strtod_l+0xb0c>)
 800f48a:	465b      	mov	r3, fp
 800f48c:	b1f1      	cbz	r1, 800f4cc <_strtod_l+0x8e4>
 800f48e:	ea02 010b 	and.w	r1, r2, fp
 800f492:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800f496:	dc19      	bgt.n	800f4cc <_strtod_l+0x8e4>
 800f498:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800f49c:	f77f ae5b 	ble.w	800f156 <_strtod_l+0x56e>
 800f4a0:	4a96      	ldr	r2, [pc, #600]	; (800f6fc <_strtod_l+0xb14>)
 800f4a2:	2300      	movs	r3, #0
 800f4a4:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 800f4a8:	4650      	mov	r0, sl
 800f4aa:	4659      	mov	r1, fp
 800f4ac:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800f4b0:	f7f1 f8a2 	bl	80005f8 <__aeabi_dmul>
 800f4b4:	4682      	mov	sl, r0
 800f4b6:	468b      	mov	fp, r1
 800f4b8:	2900      	cmp	r1, #0
 800f4ba:	f47f adbe 	bne.w	800f03a <_strtod_l+0x452>
 800f4be:	2800      	cmp	r0, #0
 800f4c0:	f47f adbb 	bne.w	800f03a <_strtod_l+0x452>
 800f4c4:	2322      	movs	r3, #34	; 0x22
 800f4c6:	f8c9 3000 	str.w	r3, [r9]
 800f4ca:	e5b6      	b.n	800f03a <_strtod_l+0x452>
 800f4cc:	4013      	ands	r3, r2
 800f4ce:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800f4d2:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800f4d6:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800f4da:	f04f 3aff 	mov.w	sl, #4294967295
 800f4de:	e76a      	b.n	800f3b6 <_strtod_l+0x7ce>
 800f4e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f4e2:	b193      	cbz	r3, 800f50a <_strtod_l+0x922>
 800f4e4:	422b      	tst	r3, r5
 800f4e6:	f43f af66 	beq.w	800f3b6 <_strtod_l+0x7ce>
 800f4ea:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f4ec:	9a04      	ldr	r2, [sp, #16]
 800f4ee:	4650      	mov	r0, sl
 800f4f0:	4659      	mov	r1, fp
 800f4f2:	b173      	cbz	r3, 800f512 <_strtod_l+0x92a>
 800f4f4:	f7ff fb5c 	bl	800ebb0 <sulp>
 800f4f8:	4602      	mov	r2, r0
 800f4fa:	460b      	mov	r3, r1
 800f4fc:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800f500:	f7f0 fec4 	bl	800028c <__adddf3>
 800f504:	4682      	mov	sl, r0
 800f506:	468b      	mov	fp, r1
 800f508:	e755      	b.n	800f3b6 <_strtod_l+0x7ce>
 800f50a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800f50c:	ea13 0f0a 	tst.w	r3, sl
 800f510:	e7e9      	b.n	800f4e6 <_strtod_l+0x8fe>
 800f512:	f7ff fb4d 	bl	800ebb0 <sulp>
 800f516:	4602      	mov	r2, r0
 800f518:	460b      	mov	r3, r1
 800f51a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800f51e:	f7f0 feb3 	bl	8000288 <__aeabi_dsub>
 800f522:	2200      	movs	r2, #0
 800f524:	2300      	movs	r3, #0
 800f526:	4682      	mov	sl, r0
 800f528:	468b      	mov	fp, r1
 800f52a:	f7f1 facd 	bl	8000ac8 <__aeabi_dcmpeq>
 800f52e:	2800      	cmp	r0, #0
 800f530:	f47f ae11 	bne.w	800f156 <_strtod_l+0x56e>
 800f534:	e73f      	b.n	800f3b6 <_strtod_l+0x7ce>
 800f536:	4641      	mov	r1, r8
 800f538:	4620      	mov	r0, r4
 800f53a:	f001 ffd6 	bl	80114ea <__ratio>
 800f53e:	ec57 6b10 	vmov	r6, r7, d0
 800f542:	2200      	movs	r2, #0
 800f544:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800f548:	ee10 0a10 	vmov	r0, s0
 800f54c:	4639      	mov	r1, r7
 800f54e:	f7f1 facf 	bl	8000af0 <__aeabi_dcmple>
 800f552:	2800      	cmp	r0, #0
 800f554:	d077      	beq.n	800f646 <_strtod_l+0xa5e>
 800f556:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f558:	2b00      	cmp	r3, #0
 800f55a:	d04a      	beq.n	800f5f2 <_strtod_l+0xa0a>
 800f55c:	4b68      	ldr	r3, [pc, #416]	; (800f700 <_strtod_l+0xb18>)
 800f55e:	2200      	movs	r2, #0
 800f560:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800f564:	4f66      	ldr	r7, [pc, #408]	; (800f700 <_strtod_l+0xb18>)
 800f566:	2600      	movs	r6, #0
 800f568:	4b62      	ldr	r3, [pc, #392]	; (800f6f4 <_strtod_l+0xb0c>)
 800f56a:	402b      	ands	r3, r5
 800f56c:	930f      	str	r3, [sp, #60]	; 0x3c
 800f56e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800f570:	4b64      	ldr	r3, [pc, #400]	; (800f704 <_strtod_l+0xb1c>)
 800f572:	429a      	cmp	r2, r3
 800f574:	f040 80ce 	bne.w	800f714 <_strtod_l+0xb2c>
 800f578:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800f57c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800f580:	f1a5 7b54 	sub.w	fp, r5, #55574528	; 0x3500000
 800f584:	ec4b ab10 	vmov	d0, sl, fp
 800f588:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 800f58c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800f590:	f001 fee6 	bl	8011360 <__ulp>
 800f594:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800f598:	ec53 2b10 	vmov	r2, r3, d0
 800f59c:	f7f1 f82c 	bl	80005f8 <__aeabi_dmul>
 800f5a0:	4652      	mov	r2, sl
 800f5a2:	465b      	mov	r3, fp
 800f5a4:	f7f0 fe72 	bl	800028c <__adddf3>
 800f5a8:	460b      	mov	r3, r1
 800f5aa:	4952      	ldr	r1, [pc, #328]	; (800f6f4 <_strtod_l+0xb0c>)
 800f5ac:	4a56      	ldr	r2, [pc, #344]	; (800f708 <_strtod_l+0xb20>)
 800f5ae:	4019      	ands	r1, r3
 800f5b0:	4291      	cmp	r1, r2
 800f5b2:	4682      	mov	sl, r0
 800f5b4:	d95b      	bls.n	800f66e <_strtod_l+0xa86>
 800f5b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f5b8:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800f5bc:	4293      	cmp	r3, r2
 800f5be:	d103      	bne.n	800f5c8 <_strtod_l+0x9e0>
 800f5c0:	9b08      	ldr	r3, [sp, #32]
 800f5c2:	3301      	adds	r3, #1
 800f5c4:	f43f ad2e 	beq.w	800f024 <_strtod_l+0x43c>
 800f5c8:	f8df b12c 	ldr.w	fp, [pc, #300]	; 800f6f8 <_strtod_l+0xb10>
 800f5cc:	f04f 3aff 	mov.w	sl, #4294967295
 800f5d0:	991c      	ldr	r1, [sp, #112]	; 0x70
 800f5d2:	4648      	mov	r0, r9
 800f5d4:	f001 fc2c 	bl	8010e30 <_Bfree>
 800f5d8:	9905      	ldr	r1, [sp, #20]
 800f5da:	4648      	mov	r0, r9
 800f5dc:	f001 fc28 	bl	8010e30 <_Bfree>
 800f5e0:	4641      	mov	r1, r8
 800f5e2:	4648      	mov	r0, r9
 800f5e4:	f001 fc24 	bl	8010e30 <_Bfree>
 800f5e8:	4621      	mov	r1, r4
 800f5ea:	4648      	mov	r0, r9
 800f5ec:	f001 fc20 	bl	8010e30 <_Bfree>
 800f5f0:	e619      	b.n	800f226 <_strtod_l+0x63e>
 800f5f2:	f1ba 0f00 	cmp.w	sl, #0
 800f5f6:	d11a      	bne.n	800f62e <_strtod_l+0xa46>
 800f5f8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800f5fc:	b9eb      	cbnz	r3, 800f63a <_strtod_l+0xa52>
 800f5fe:	2200      	movs	r2, #0
 800f600:	4b3f      	ldr	r3, [pc, #252]	; (800f700 <_strtod_l+0xb18>)
 800f602:	4630      	mov	r0, r6
 800f604:	4639      	mov	r1, r7
 800f606:	f7f1 fa69 	bl	8000adc <__aeabi_dcmplt>
 800f60a:	b9c8      	cbnz	r0, 800f640 <_strtod_l+0xa58>
 800f60c:	4630      	mov	r0, r6
 800f60e:	4639      	mov	r1, r7
 800f610:	2200      	movs	r2, #0
 800f612:	4b3e      	ldr	r3, [pc, #248]	; (800f70c <_strtod_l+0xb24>)
 800f614:	f7f0 fff0 	bl	80005f8 <__aeabi_dmul>
 800f618:	4606      	mov	r6, r0
 800f61a:	460f      	mov	r7, r1
 800f61c:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 800f620:	9618      	str	r6, [sp, #96]	; 0x60
 800f622:	9319      	str	r3, [sp, #100]	; 0x64
 800f624:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 800f628:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800f62c:	e79c      	b.n	800f568 <_strtod_l+0x980>
 800f62e:	f1ba 0f01 	cmp.w	sl, #1
 800f632:	d102      	bne.n	800f63a <_strtod_l+0xa52>
 800f634:	2d00      	cmp	r5, #0
 800f636:	f43f ad8e 	beq.w	800f156 <_strtod_l+0x56e>
 800f63a:	2200      	movs	r2, #0
 800f63c:	4b34      	ldr	r3, [pc, #208]	; (800f710 <_strtod_l+0xb28>)
 800f63e:	e78f      	b.n	800f560 <_strtod_l+0x978>
 800f640:	2600      	movs	r6, #0
 800f642:	4f32      	ldr	r7, [pc, #200]	; (800f70c <_strtod_l+0xb24>)
 800f644:	e7ea      	b.n	800f61c <_strtod_l+0xa34>
 800f646:	4b31      	ldr	r3, [pc, #196]	; (800f70c <_strtod_l+0xb24>)
 800f648:	4630      	mov	r0, r6
 800f64a:	4639      	mov	r1, r7
 800f64c:	2200      	movs	r2, #0
 800f64e:	f7f0 ffd3 	bl	80005f8 <__aeabi_dmul>
 800f652:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f654:	4606      	mov	r6, r0
 800f656:	460f      	mov	r7, r1
 800f658:	b933      	cbnz	r3, 800f668 <_strtod_l+0xa80>
 800f65a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800f65e:	9010      	str	r0, [sp, #64]	; 0x40
 800f660:	9311      	str	r3, [sp, #68]	; 0x44
 800f662:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800f666:	e7df      	b.n	800f628 <_strtod_l+0xa40>
 800f668:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 800f66c:	e7f9      	b.n	800f662 <_strtod_l+0xa7a>
 800f66e:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800f672:	9b04      	ldr	r3, [sp, #16]
 800f674:	2b00      	cmp	r3, #0
 800f676:	d1ab      	bne.n	800f5d0 <_strtod_l+0x9e8>
 800f678:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800f67c:	0d1b      	lsrs	r3, r3, #20
 800f67e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800f680:	051b      	lsls	r3, r3, #20
 800f682:	429a      	cmp	r2, r3
 800f684:	465d      	mov	r5, fp
 800f686:	d1a3      	bne.n	800f5d0 <_strtod_l+0x9e8>
 800f688:	4639      	mov	r1, r7
 800f68a:	4630      	mov	r0, r6
 800f68c:	f7f1 fa64 	bl	8000b58 <__aeabi_d2iz>
 800f690:	f7f0 ff48 	bl	8000524 <__aeabi_i2d>
 800f694:	460b      	mov	r3, r1
 800f696:	4602      	mov	r2, r0
 800f698:	4639      	mov	r1, r7
 800f69a:	4630      	mov	r0, r6
 800f69c:	f7f0 fdf4 	bl	8000288 <__aeabi_dsub>
 800f6a0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f6a2:	4606      	mov	r6, r0
 800f6a4:	460f      	mov	r7, r1
 800f6a6:	b933      	cbnz	r3, 800f6b6 <_strtod_l+0xace>
 800f6a8:	f1ba 0f00 	cmp.w	sl, #0
 800f6ac:	d103      	bne.n	800f6b6 <_strtod_l+0xace>
 800f6ae:	f3cb 0513 	ubfx	r5, fp, #0, #20
 800f6b2:	2d00      	cmp	r5, #0
 800f6b4:	d06d      	beq.n	800f792 <_strtod_l+0xbaa>
 800f6b6:	a30a      	add	r3, pc, #40	; (adr r3, 800f6e0 <_strtod_l+0xaf8>)
 800f6b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f6bc:	4630      	mov	r0, r6
 800f6be:	4639      	mov	r1, r7
 800f6c0:	f7f1 fa0c 	bl	8000adc <__aeabi_dcmplt>
 800f6c4:	2800      	cmp	r0, #0
 800f6c6:	f47f acb8 	bne.w	800f03a <_strtod_l+0x452>
 800f6ca:	a307      	add	r3, pc, #28	; (adr r3, 800f6e8 <_strtod_l+0xb00>)
 800f6cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f6d0:	4630      	mov	r0, r6
 800f6d2:	4639      	mov	r1, r7
 800f6d4:	f7f1 fa20 	bl	8000b18 <__aeabi_dcmpgt>
 800f6d8:	2800      	cmp	r0, #0
 800f6da:	f43f af79 	beq.w	800f5d0 <_strtod_l+0x9e8>
 800f6de:	e4ac      	b.n	800f03a <_strtod_l+0x452>
 800f6e0:	94a03595 	.word	0x94a03595
 800f6e4:	3fdfffff 	.word	0x3fdfffff
 800f6e8:	35afe535 	.word	0x35afe535
 800f6ec:	3fe00000 	.word	0x3fe00000
 800f6f0:	000fffff 	.word	0x000fffff
 800f6f4:	7ff00000 	.word	0x7ff00000
 800f6f8:	7fefffff 	.word	0x7fefffff
 800f6fc:	39500000 	.word	0x39500000
 800f700:	3ff00000 	.word	0x3ff00000
 800f704:	7fe00000 	.word	0x7fe00000
 800f708:	7c9fffff 	.word	0x7c9fffff
 800f70c:	3fe00000 	.word	0x3fe00000
 800f710:	bff00000 	.word	0xbff00000
 800f714:	9b04      	ldr	r3, [sp, #16]
 800f716:	b333      	cbz	r3, 800f766 <_strtod_l+0xb7e>
 800f718:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800f71a:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800f71e:	d822      	bhi.n	800f766 <_strtod_l+0xb7e>
 800f720:	a327      	add	r3, pc, #156	; (adr r3, 800f7c0 <_strtod_l+0xbd8>)
 800f722:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f726:	4630      	mov	r0, r6
 800f728:	4639      	mov	r1, r7
 800f72a:	f7f1 f9e1 	bl	8000af0 <__aeabi_dcmple>
 800f72e:	b1a0      	cbz	r0, 800f75a <_strtod_l+0xb72>
 800f730:	4639      	mov	r1, r7
 800f732:	4630      	mov	r0, r6
 800f734:	f7f1 fa38 	bl	8000ba8 <__aeabi_d2uiz>
 800f738:	2800      	cmp	r0, #0
 800f73a:	bf08      	it	eq
 800f73c:	2001      	moveq	r0, #1
 800f73e:	f7f0 fee1 	bl	8000504 <__aeabi_ui2d>
 800f742:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f744:	4606      	mov	r6, r0
 800f746:	460f      	mov	r7, r1
 800f748:	bb03      	cbnz	r3, 800f78c <_strtod_l+0xba4>
 800f74a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800f74e:	9012      	str	r0, [sp, #72]	; 0x48
 800f750:	9313      	str	r3, [sp, #76]	; 0x4c
 800f752:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 800f756:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800f75a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f75c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800f75e:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800f762:	1a9b      	subs	r3, r3, r2
 800f764:	930b      	str	r3, [sp, #44]	; 0x2c
 800f766:	ed9d 0b08 	vldr	d0, [sp, #32]
 800f76a:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
 800f76e:	f001 fdf7 	bl	8011360 <__ulp>
 800f772:	4650      	mov	r0, sl
 800f774:	ec53 2b10 	vmov	r2, r3, d0
 800f778:	4659      	mov	r1, fp
 800f77a:	f7f0 ff3d 	bl	80005f8 <__aeabi_dmul>
 800f77e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800f782:	f7f0 fd83 	bl	800028c <__adddf3>
 800f786:	4682      	mov	sl, r0
 800f788:	468b      	mov	fp, r1
 800f78a:	e772      	b.n	800f672 <_strtod_l+0xa8a>
 800f78c:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48
 800f790:	e7df      	b.n	800f752 <_strtod_l+0xb6a>
 800f792:	a30d      	add	r3, pc, #52	; (adr r3, 800f7c8 <_strtod_l+0xbe0>)
 800f794:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f798:	f7f1 f9a0 	bl	8000adc <__aeabi_dcmplt>
 800f79c:	e79c      	b.n	800f6d8 <_strtod_l+0xaf0>
 800f79e:	2300      	movs	r3, #0
 800f7a0:	930d      	str	r3, [sp, #52]	; 0x34
 800f7a2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800f7a4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800f7a6:	6013      	str	r3, [r2, #0]
 800f7a8:	f7ff ba61 	b.w	800ec6e <_strtod_l+0x86>
 800f7ac:	2b65      	cmp	r3, #101	; 0x65
 800f7ae:	f04f 0200 	mov.w	r2, #0
 800f7b2:	f43f ab4e 	beq.w	800ee52 <_strtod_l+0x26a>
 800f7b6:	2101      	movs	r1, #1
 800f7b8:	4614      	mov	r4, r2
 800f7ba:	9104      	str	r1, [sp, #16]
 800f7bc:	f7ff bacb 	b.w	800ed56 <_strtod_l+0x16e>
 800f7c0:	ffc00000 	.word	0xffc00000
 800f7c4:	41dfffff 	.word	0x41dfffff
 800f7c8:	94a03595 	.word	0x94a03595
 800f7cc:	3fcfffff 	.word	0x3fcfffff

0800f7d0 <_strtod_r>:
 800f7d0:	4b05      	ldr	r3, [pc, #20]	; (800f7e8 <_strtod_r+0x18>)
 800f7d2:	681b      	ldr	r3, [r3, #0]
 800f7d4:	b410      	push	{r4}
 800f7d6:	6a1b      	ldr	r3, [r3, #32]
 800f7d8:	4c04      	ldr	r4, [pc, #16]	; (800f7ec <_strtod_r+0x1c>)
 800f7da:	2b00      	cmp	r3, #0
 800f7dc:	bf08      	it	eq
 800f7de:	4623      	moveq	r3, r4
 800f7e0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f7e4:	f7ff ba00 	b.w	800ebe8 <_strtod_l>
 800f7e8:	20000190 	.word	0x20000190
 800f7ec:	200001f4 	.word	0x200001f4

0800f7f0 <_strtol_l.isra.0>:
 800f7f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f7f4:	4680      	mov	r8, r0
 800f7f6:	4689      	mov	r9, r1
 800f7f8:	4692      	mov	sl, r2
 800f7fa:	461e      	mov	r6, r3
 800f7fc:	460f      	mov	r7, r1
 800f7fe:	463d      	mov	r5, r7
 800f800:	9808      	ldr	r0, [sp, #32]
 800f802:	f815 4b01 	ldrb.w	r4, [r5], #1
 800f806:	f001 fab7 	bl	8010d78 <__locale_ctype_ptr_l>
 800f80a:	4420      	add	r0, r4
 800f80c:	7843      	ldrb	r3, [r0, #1]
 800f80e:	f013 0308 	ands.w	r3, r3, #8
 800f812:	d132      	bne.n	800f87a <_strtol_l.isra.0+0x8a>
 800f814:	2c2d      	cmp	r4, #45	; 0x2d
 800f816:	d132      	bne.n	800f87e <_strtol_l.isra.0+0x8e>
 800f818:	787c      	ldrb	r4, [r7, #1]
 800f81a:	1cbd      	adds	r5, r7, #2
 800f81c:	2201      	movs	r2, #1
 800f81e:	2e00      	cmp	r6, #0
 800f820:	d05d      	beq.n	800f8de <_strtol_l.isra.0+0xee>
 800f822:	2e10      	cmp	r6, #16
 800f824:	d109      	bne.n	800f83a <_strtol_l.isra.0+0x4a>
 800f826:	2c30      	cmp	r4, #48	; 0x30
 800f828:	d107      	bne.n	800f83a <_strtol_l.isra.0+0x4a>
 800f82a:	782b      	ldrb	r3, [r5, #0]
 800f82c:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800f830:	2b58      	cmp	r3, #88	; 0x58
 800f832:	d14f      	bne.n	800f8d4 <_strtol_l.isra.0+0xe4>
 800f834:	786c      	ldrb	r4, [r5, #1]
 800f836:	2610      	movs	r6, #16
 800f838:	3502      	adds	r5, #2
 800f83a:	2a00      	cmp	r2, #0
 800f83c:	bf14      	ite	ne
 800f83e:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 800f842:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 800f846:	2700      	movs	r7, #0
 800f848:	fbb1 fcf6 	udiv	ip, r1, r6
 800f84c:	4638      	mov	r0, r7
 800f84e:	fb06 1e1c 	mls	lr, r6, ip, r1
 800f852:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 800f856:	2b09      	cmp	r3, #9
 800f858:	d817      	bhi.n	800f88a <_strtol_l.isra.0+0x9a>
 800f85a:	461c      	mov	r4, r3
 800f85c:	42a6      	cmp	r6, r4
 800f85e:	dd23      	ble.n	800f8a8 <_strtol_l.isra.0+0xb8>
 800f860:	1c7b      	adds	r3, r7, #1
 800f862:	d007      	beq.n	800f874 <_strtol_l.isra.0+0x84>
 800f864:	4584      	cmp	ip, r0
 800f866:	d31c      	bcc.n	800f8a2 <_strtol_l.isra.0+0xb2>
 800f868:	d101      	bne.n	800f86e <_strtol_l.isra.0+0x7e>
 800f86a:	45a6      	cmp	lr, r4
 800f86c:	db19      	blt.n	800f8a2 <_strtol_l.isra.0+0xb2>
 800f86e:	fb00 4006 	mla	r0, r0, r6, r4
 800f872:	2701      	movs	r7, #1
 800f874:	f815 4b01 	ldrb.w	r4, [r5], #1
 800f878:	e7eb      	b.n	800f852 <_strtol_l.isra.0+0x62>
 800f87a:	462f      	mov	r7, r5
 800f87c:	e7bf      	b.n	800f7fe <_strtol_l.isra.0+0xe>
 800f87e:	2c2b      	cmp	r4, #43	; 0x2b
 800f880:	bf04      	itt	eq
 800f882:	1cbd      	addeq	r5, r7, #2
 800f884:	787c      	ldrbeq	r4, [r7, #1]
 800f886:	461a      	mov	r2, r3
 800f888:	e7c9      	b.n	800f81e <_strtol_l.isra.0+0x2e>
 800f88a:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 800f88e:	2b19      	cmp	r3, #25
 800f890:	d801      	bhi.n	800f896 <_strtol_l.isra.0+0xa6>
 800f892:	3c37      	subs	r4, #55	; 0x37
 800f894:	e7e2      	b.n	800f85c <_strtol_l.isra.0+0x6c>
 800f896:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 800f89a:	2b19      	cmp	r3, #25
 800f89c:	d804      	bhi.n	800f8a8 <_strtol_l.isra.0+0xb8>
 800f89e:	3c57      	subs	r4, #87	; 0x57
 800f8a0:	e7dc      	b.n	800f85c <_strtol_l.isra.0+0x6c>
 800f8a2:	f04f 37ff 	mov.w	r7, #4294967295
 800f8a6:	e7e5      	b.n	800f874 <_strtol_l.isra.0+0x84>
 800f8a8:	1c7b      	adds	r3, r7, #1
 800f8aa:	d108      	bne.n	800f8be <_strtol_l.isra.0+0xce>
 800f8ac:	2322      	movs	r3, #34	; 0x22
 800f8ae:	f8c8 3000 	str.w	r3, [r8]
 800f8b2:	4608      	mov	r0, r1
 800f8b4:	f1ba 0f00 	cmp.w	sl, #0
 800f8b8:	d107      	bne.n	800f8ca <_strtol_l.isra.0+0xda>
 800f8ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f8be:	b102      	cbz	r2, 800f8c2 <_strtol_l.isra.0+0xd2>
 800f8c0:	4240      	negs	r0, r0
 800f8c2:	f1ba 0f00 	cmp.w	sl, #0
 800f8c6:	d0f8      	beq.n	800f8ba <_strtol_l.isra.0+0xca>
 800f8c8:	b10f      	cbz	r7, 800f8ce <_strtol_l.isra.0+0xde>
 800f8ca:	f105 39ff 	add.w	r9, r5, #4294967295
 800f8ce:	f8ca 9000 	str.w	r9, [sl]
 800f8d2:	e7f2      	b.n	800f8ba <_strtol_l.isra.0+0xca>
 800f8d4:	2430      	movs	r4, #48	; 0x30
 800f8d6:	2e00      	cmp	r6, #0
 800f8d8:	d1af      	bne.n	800f83a <_strtol_l.isra.0+0x4a>
 800f8da:	2608      	movs	r6, #8
 800f8dc:	e7ad      	b.n	800f83a <_strtol_l.isra.0+0x4a>
 800f8de:	2c30      	cmp	r4, #48	; 0x30
 800f8e0:	d0a3      	beq.n	800f82a <_strtol_l.isra.0+0x3a>
 800f8e2:	260a      	movs	r6, #10
 800f8e4:	e7a9      	b.n	800f83a <_strtol_l.isra.0+0x4a>
	...

0800f8e8 <_strtol_r>:
 800f8e8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f8ea:	4c06      	ldr	r4, [pc, #24]	; (800f904 <_strtol_r+0x1c>)
 800f8ec:	4d06      	ldr	r5, [pc, #24]	; (800f908 <_strtol_r+0x20>)
 800f8ee:	6824      	ldr	r4, [r4, #0]
 800f8f0:	6a24      	ldr	r4, [r4, #32]
 800f8f2:	2c00      	cmp	r4, #0
 800f8f4:	bf08      	it	eq
 800f8f6:	462c      	moveq	r4, r5
 800f8f8:	9400      	str	r4, [sp, #0]
 800f8fa:	f7ff ff79 	bl	800f7f0 <_strtol_l.isra.0>
 800f8fe:	b003      	add	sp, #12
 800f900:	bd30      	pop	{r4, r5, pc}
 800f902:	bf00      	nop
 800f904:	20000190 	.word	0x20000190
 800f908:	200001f4 	.word	0x200001f4

0800f90c <quorem>:
 800f90c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f910:	6903      	ldr	r3, [r0, #16]
 800f912:	690c      	ldr	r4, [r1, #16]
 800f914:	42a3      	cmp	r3, r4
 800f916:	4680      	mov	r8, r0
 800f918:	f2c0 8082 	blt.w	800fa20 <quorem+0x114>
 800f91c:	3c01      	subs	r4, #1
 800f91e:	f101 0714 	add.w	r7, r1, #20
 800f922:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 800f926:	f100 0614 	add.w	r6, r0, #20
 800f92a:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800f92e:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 800f932:	eb06 030c 	add.w	r3, r6, ip
 800f936:	3501      	adds	r5, #1
 800f938:	eb07 090c 	add.w	r9, r7, ip
 800f93c:	9301      	str	r3, [sp, #4]
 800f93e:	fbb0 f5f5 	udiv	r5, r0, r5
 800f942:	b395      	cbz	r5, 800f9aa <quorem+0x9e>
 800f944:	f04f 0a00 	mov.w	sl, #0
 800f948:	4638      	mov	r0, r7
 800f94a:	46b6      	mov	lr, r6
 800f94c:	46d3      	mov	fp, sl
 800f94e:	f850 2b04 	ldr.w	r2, [r0], #4
 800f952:	b293      	uxth	r3, r2
 800f954:	fb05 a303 	mla	r3, r5, r3, sl
 800f958:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800f95c:	b29b      	uxth	r3, r3
 800f95e:	ebab 0303 	sub.w	r3, fp, r3
 800f962:	0c12      	lsrs	r2, r2, #16
 800f964:	f8de b000 	ldr.w	fp, [lr]
 800f968:	fb05 a202 	mla	r2, r5, r2, sl
 800f96c:	fa13 f38b 	uxtah	r3, r3, fp
 800f970:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 800f974:	fa1f fb82 	uxth.w	fp, r2
 800f978:	f8de 2000 	ldr.w	r2, [lr]
 800f97c:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 800f980:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800f984:	b29b      	uxth	r3, r3
 800f986:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800f98a:	4581      	cmp	r9, r0
 800f98c:	ea4f 4b22 	mov.w	fp, r2, asr #16
 800f990:	f84e 3b04 	str.w	r3, [lr], #4
 800f994:	d2db      	bcs.n	800f94e <quorem+0x42>
 800f996:	f856 300c 	ldr.w	r3, [r6, ip]
 800f99a:	b933      	cbnz	r3, 800f9aa <quorem+0x9e>
 800f99c:	9b01      	ldr	r3, [sp, #4]
 800f99e:	3b04      	subs	r3, #4
 800f9a0:	429e      	cmp	r6, r3
 800f9a2:	461a      	mov	r2, r3
 800f9a4:	d330      	bcc.n	800fa08 <quorem+0xfc>
 800f9a6:	f8c8 4010 	str.w	r4, [r8, #16]
 800f9aa:	4640      	mov	r0, r8
 800f9ac:	f001 fc60 	bl	8011270 <__mcmp>
 800f9b0:	2800      	cmp	r0, #0
 800f9b2:	db25      	blt.n	800fa00 <quorem+0xf4>
 800f9b4:	3501      	adds	r5, #1
 800f9b6:	4630      	mov	r0, r6
 800f9b8:	f04f 0c00 	mov.w	ip, #0
 800f9bc:	f857 2b04 	ldr.w	r2, [r7], #4
 800f9c0:	f8d0 e000 	ldr.w	lr, [r0]
 800f9c4:	b293      	uxth	r3, r2
 800f9c6:	ebac 0303 	sub.w	r3, ip, r3
 800f9ca:	0c12      	lsrs	r2, r2, #16
 800f9cc:	fa13 f38e 	uxtah	r3, r3, lr
 800f9d0:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800f9d4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800f9d8:	b29b      	uxth	r3, r3
 800f9da:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800f9de:	45b9      	cmp	r9, r7
 800f9e0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800f9e4:	f840 3b04 	str.w	r3, [r0], #4
 800f9e8:	d2e8      	bcs.n	800f9bc <quorem+0xb0>
 800f9ea:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800f9ee:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800f9f2:	b92a      	cbnz	r2, 800fa00 <quorem+0xf4>
 800f9f4:	3b04      	subs	r3, #4
 800f9f6:	429e      	cmp	r6, r3
 800f9f8:	461a      	mov	r2, r3
 800f9fa:	d30b      	bcc.n	800fa14 <quorem+0x108>
 800f9fc:	f8c8 4010 	str.w	r4, [r8, #16]
 800fa00:	4628      	mov	r0, r5
 800fa02:	b003      	add	sp, #12
 800fa04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fa08:	6812      	ldr	r2, [r2, #0]
 800fa0a:	3b04      	subs	r3, #4
 800fa0c:	2a00      	cmp	r2, #0
 800fa0e:	d1ca      	bne.n	800f9a6 <quorem+0x9a>
 800fa10:	3c01      	subs	r4, #1
 800fa12:	e7c5      	b.n	800f9a0 <quorem+0x94>
 800fa14:	6812      	ldr	r2, [r2, #0]
 800fa16:	3b04      	subs	r3, #4
 800fa18:	2a00      	cmp	r2, #0
 800fa1a:	d1ef      	bne.n	800f9fc <quorem+0xf0>
 800fa1c:	3c01      	subs	r4, #1
 800fa1e:	e7ea      	b.n	800f9f6 <quorem+0xea>
 800fa20:	2000      	movs	r0, #0
 800fa22:	e7ee      	b.n	800fa02 <quorem+0xf6>
 800fa24:	0000      	movs	r0, r0
	...

0800fa28 <_dtoa_r>:
 800fa28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fa2c:	ec57 6b10 	vmov	r6, r7, d0
 800fa30:	b097      	sub	sp, #92	; 0x5c
 800fa32:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800fa34:	9106      	str	r1, [sp, #24]
 800fa36:	4604      	mov	r4, r0
 800fa38:	920b      	str	r2, [sp, #44]	; 0x2c
 800fa3a:	9312      	str	r3, [sp, #72]	; 0x48
 800fa3c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800fa40:	e9cd 6700 	strd	r6, r7, [sp]
 800fa44:	b93d      	cbnz	r5, 800fa56 <_dtoa_r+0x2e>
 800fa46:	2010      	movs	r0, #16
 800fa48:	f7fe f95a 	bl	800dd00 <malloc>
 800fa4c:	6260      	str	r0, [r4, #36]	; 0x24
 800fa4e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800fa52:	6005      	str	r5, [r0, #0]
 800fa54:	60c5      	str	r5, [r0, #12]
 800fa56:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800fa58:	6819      	ldr	r1, [r3, #0]
 800fa5a:	b151      	cbz	r1, 800fa72 <_dtoa_r+0x4a>
 800fa5c:	685a      	ldr	r2, [r3, #4]
 800fa5e:	604a      	str	r2, [r1, #4]
 800fa60:	2301      	movs	r3, #1
 800fa62:	4093      	lsls	r3, r2
 800fa64:	608b      	str	r3, [r1, #8]
 800fa66:	4620      	mov	r0, r4
 800fa68:	f001 f9e2 	bl	8010e30 <_Bfree>
 800fa6c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800fa6e:	2200      	movs	r2, #0
 800fa70:	601a      	str	r2, [r3, #0]
 800fa72:	1e3b      	subs	r3, r7, #0
 800fa74:	bfbb      	ittet	lt
 800fa76:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800fa7a:	9301      	strlt	r3, [sp, #4]
 800fa7c:	2300      	movge	r3, #0
 800fa7e:	2201      	movlt	r2, #1
 800fa80:	bfac      	ite	ge
 800fa82:	f8c8 3000 	strge.w	r3, [r8]
 800fa86:	f8c8 2000 	strlt.w	r2, [r8]
 800fa8a:	4baf      	ldr	r3, [pc, #700]	; (800fd48 <_dtoa_r+0x320>)
 800fa8c:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800fa90:	ea33 0308 	bics.w	r3, r3, r8
 800fa94:	d114      	bne.n	800fac0 <_dtoa_r+0x98>
 800fa96:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800fa98:	f242 730f 	movw	r3, #9999	; 0x270f
 800fa9c:	6013      	str	r3, [r2, #0]
 800fa9e:	9b00      	ldr	r3, [sp, #0]
 800faa0:	b923      	cbnz	r3, 800faac <_dtoa_r+0x84>
 800faa2:	f3c8 0013 	ubfx	r0, r8, #0, #20
 800faa6:	2800      	cmp	r0, #0
 800faa8:	f000 8542 	beq.w	8010530 <_dtoa_r+0xb08>
 800faac:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800faae:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 800fd5c <_dtoa_r+0x334>
 800fab2:	2b00      	cmp	r3, #0
 800fab4:	f000 8544 	beq.w	8010540 <_dtoa_r+0xb18>
 800fab8:	f10b 0303 	add.w	r3, fp, #3
 800fabc:	f000 bd3e 	b.w	801053c <_dtoa_r+0xb14>
 800fac0:	e9dd 6700 	ldrd	r6, r7, [sp]
 800fac4:	2200      	movs	r2, #0
 800fac6:	2300      	movs	r3, #0
 800fac8:	4630      	mov	r0, r6
 800faca:	4639      	mov	r1, r7
 800facc:	f7f0 fffc 	bl	8000ac8 <__aeabi_dcmpeq>
 800fad0:	4681      	mov	r9, r0
 800fad2:	b168      	cbz	r0, 800faf0 <_dtoa_r+0xc8>
 800fad4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800fad6:	2301      	movs	r3, #1
 800fad8:	6013      	str	r3, [r2, #0]
 800fada:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800fadc:	2b00      	cmp	r3, #0
 800fade:	f000 8524 	beq.w	801052a <_dtoa_r+0xb02>
 800fae2:	4b9a      	ldr	r3, [pc, #616]	; (800fd4c <_dtoa_r+0x324>)
 800fae4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800fae6:	f103 3bff 	add.w	fp, r3, #4294967295
 800faea:	6013      	str	r3, [r2, #0]
 800faec:	f000 bd28 	b.w	8010540 <_dtoa_r+0xb18>
 800faf0:	aa14      	add	r2, sp, #80	; 0x50
 800faf2:	a915      	add	r1, sp, #84	; 0x54
 800faf4:	ec47 6b10 	vmov	d0, r6, r7
 800faf8:	4620      	mov	r0, r4
 800fafa:	f001 fca7 	bl	801144c <__d2b>
 800fafe:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800fb02:	9004      	str	r0, [sp, #16]
 800fb04:	2d00      	cmp	r5, #0
 800fb06:	d07c      	beq.n	800fc02 <_dtoa_r+0x1da>
 800fb08:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800fb0c:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 800fb10:	46b2      	mov	sl, r6
 800fb12:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 800fb16:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800fb1a:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 800fb1e:	2200      	movs	r2, #0
 800fb20:	4b8b      	ldr	r3, [pc, #556]	; (800fd50 <_dtoa_r+0x328>)
 800fb22:	4650      	mov	r0, sl
 800fb24:	4659      	mov	r1, fp
 800fb26:	f7f0 fbaf 	bl	8000288 <__aeabi_dsub>
 800fb2a:	a381      	add	r3, pc, #516	; (adr r3, 800fd30 <_dtoa_r+0x308>)
 800fb2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fb30:	f7f0 fd62 	bl	80005f8 <__aeabi_dmul>
 800fb34:	a380      	add	r3, pc, #512	; (adr r3, 800fd38 <_dtoa_r+0x310>)
 800fb36:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fb3a:	f7f0 fba7 	bl	800028c <__adddf3>
 800fb3e:	4606      	mov	r6, r0
 800fb40:	4628      	mov	r0, r5
 800fb42:	460f      	mov	r7, r1
 800fb44:	f7f0 fcee 	bl	8000524 <__aeabi_i2d>
 800fb48:	a37d      	add	r3, pc, #500	; (adr r3, 800fd40 <_dtoa_r+0x318>)
 800fb4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fb4e:	f7f0 fd53 	bl	80005f8 <__aeabi_dmul>
 800fb52:	4602      	mov	r2, r0
 800fb54:	460b      	mov	r3, r1
 800fb56:	4630      	mov	r0, r6
 800fb58:	4639      	mov	r1, r7
 800fb5a:	f7f0 fb97 	bl	800028c <__adddf3>
 800fb5e:	4606      	mov	r6, r0
 800fb60:	460f      	mov	r7, r1
 800fb62:	f7f0 fff9 	bl	8000b58 <__aeabi_d2iz>
 800fb66:	2200      	movs	r2, #0
 800fb68:	4682      	mov	sl, r0
 800fb6a:	2300      	movs	r3, #0
 800fb6c:	4630      	mov	r0, r6
 800fb6e:	4639      	mov	r1, r7
 800fb70:	f7f0 ffb4 	bl	8000adc <__aeabi_dcmplt>
 800fb74:	b148      	cbz	r0, 800fb8a <_dtoa_r+0x162>
 800fb76:	4650      	mov	r0, sl
 800fb78:	f7f0 fcd4 	bl	8000524 <__aeabi_i2d>
 800fb7c:	4632      	mov	r2, r6
 800fb7e:	463b      	mov	r3, r7
 800fb80:	f7f0 ffa2 	bl	8000ac8 <__aeabi_dcmpeq>
 800fb84:	b908      	cbnz	r0, 800fb8a <_dtoa_r+0x162>
 800fb86:	f10a 3aff 	add.w	sl, sl, #4294967295
 800fb8a:	f1ba 0f16 	cmp.w	sl, #22
 800fb8e:	d859      	bhi.n	800fc44 <_dtoa_r+0x21c>
 800fb90:	4970      	ldr	r1, [pc, #448]	; (800fd54 <_dtoa_r+0x32c>)
 800fb92:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800fb96:	e9dd 2300 	ldrd	r2, r3, [sp]
 800fb9a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800fb9e:	f7f0 ffbb 	bl	8000b18 <__aeabi_dcmpgt>
 800fba2:	2800      	cmp	r0, #0
 800fba4:	d050      	beq.n	800fc48 <_dtoa_r+0x220>
 800fba6:	f10a 3aff 	add.w	sl, sl, #4294967295
 800fbaa:	2300      	movs	r3, #0
 800fbac:	930f      	str	r3, [sp, #60]	; 0x3c
 800fbae:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800fbb0:	1b5d      	subs	r5, r3, r5
 800fbb2:	f1b5 0801 	subs.w	r8, r5, #1
 800fbb6:	bf49      	itett	mi
 800fbb8:	f1c5 0301 	rsbmi	r3, r5, #1
 800fbbc:	2300      	movpl	r3, #0
 800fbbe:	9305      	strmi	r3, [sp, #20]
 800fbc0:	f04f 0800 	movmi.w	r8, #0
 800fbc4:	bf58      	it	pl
 800fbc6:	9305      	strpl	r3, [sp, #20]
 800fbc8:	f1ba 0f00 	cmp.w	sl, #0
 800fbcc:	db3e      	blt.n	800fc4c <_dtoa_r+0x224>
 800fbce:	2300      	movs	r3, #0
 800fbd0:	44d0      	add	r8, sl
 800fbd2:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800fbd6:	9307      	str	r3, [sp, #28]
 800fbd8:	9b06      	ldr	r3, [sp, #24]
 800fbda:	2b09      	cmp	r3, #9
 800fbdc:	f200 8090 	bhi.w	800fd00 <_dtoa_r+0x2d8>
 800fbe0:	2b05      	cmp	r3, #5
 800fbe2:	bfc4      	itt	gt
 800fbe4:	3b04      	subgt	r3, #4
 800fbe6:	9306      	strgt	r3, [sp, #24]
 800fbe8:	9b06      	ldr	r3, [sp, #24]
 800fbea:	f1a3 0302 	sub.w	r3, r3, #2
 800fbee:	bfcc      	ite	gt
 800fbf0:	2500      	movgt	r5, #0
 800fbf2:	2501      	movle	r5, #1
 800fbf4:	2b03      	cmp	r3, #3
 800fbf6:	f200 808f 	bhi.w	800fd18 <_dtoa_r+0x2f0>
 800fbfa:	e8df f003 	tbb	[pc, r3]
 800fbfe:	7f7d      	.short	0x7f7d
 800fc00:	7131      	.short	0x7131
 800fc02:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 800fc06:	441d      	add	r5, r3
 800fc08:	f205 4032 	addw	r0, r5, #1074	; 0x432
 800fc0c:	2820      	cmp	r0, #32
 800fc0e:	dd13      	ble.n	800fc38 <_dtoa_r+0x210>
 800fc10:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 800fc14:	9b00      	ldr	r3, [sp, #0]
 800fc16:	fa08 f800 	lsl.w	r8, r8, r0
 800fc1a:	f205 4012 	addw	r0, r5, #1042	; 0x412
 800fc1e:	fa23 f000 	lsr.w	r0, r3, r0
 800fc22:	ea48 0000 	orr.w	r0, r8, r0
 800fc26:	f7f0 fc6d 	bl	8000504 <__aeabi_ui2d>
 800fc2a:	2301      	movs	r3, #1
 800fc2c:	4682      	mov	sl, r0
 800fc2e:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 800fc32:	3d01      	subs	r5, #1
 800fc34:	9313      	str	r3, [sp, #76]	; 0x4c
 800fc36:	e772      	b.n	800fb1e <_dtoa_r+0xf6>
 800fc38:	9b00      	ldr	r3, [sp, #0]
 800fc3a:	f1c0 0020 	rsb	r0, r0, #32
 800fc3e:	fa03 f000 	lsl.w	r0, r3, r0
 800fc42:	e7f0      	b.n	800fc26 <_dtoa_r+0x1fe>
 800fc44:	2301      	movs	r3, #1
 800fc46:	e7b1      	b.n	800fbac <_dtoa_r+0x184>
 800fc48:	900f      	str	r0, [sp, #60]	; 0x3c
 800fc4a:	e7b0      	b.n	800fbae <_dtoa_r+0x186>
 800fc4c:	9b05      	ldr	r3, [sp, #20]
 800fc4e:	eba3 030a 	sub.w	r3, r3, sl
 800fc52:	9305      	str	r3, [sp, #20]
 800fc54:	f1ca 0300 	rsb	r3, sl, #0
 800fc58:	9307      	str	r3, [sp, #28]
 800fc5a:	2300      	movs	r3, #0
 800fc5c:	930e      	str	r3, [sp, #56]	; 0x38
 800fc5e:	e7bb      	b.n	800fbd8 <_dtoa_r+0x1b0>
 800fc60:	2301      	movs	r3, #1
 800fc62:	930a      	str	r3, [sp, #40]	; 0x28
 800fc64:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800fc66:	2b00      	cmp	r3, #0
 800fc68:	dd59      	ble.n	800fd1e <_dtoa_r+0x2f6>
 800fc6a:	9302      	str	r3, [sp, #8]
 800fc6c:	4699      	mov	r9, r3
 800fc6e:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800fc70:	2200      	movs	r2, #0
 800fc72:	6072      	str	r2, [r6, #4]
 800fc74:	2204      	movs	r2, #4
 800fc76:	f102 0014 	add.w	r0, r2, #20
 800fc7a:	4298      	cmp	r0, r3
 800fc7c:	6871      	ldr	r1, [r6, #4]
 800fc7e:	d953      	bls.n	800fd28 <_dtoa_r+0x300>
 800fc80:	4620      	mov	r0, r4
 800fc82:	f001 f8a1 	bl	8010dc8 <_Balloc>
 800fc86:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800fc88:	6030      	str	r0, [r6, #0]
 800fc8a:	f1b9 0f0e 	cmp.w	r9, #14
 800fc8e:	f8d3 b000 	ldr.w	fp, [r3]
 800fc92:	f200 80e6 	bhi.w	800fe62 <_dtoa_r+0x43a>
 800fc96:	2d00      	cmp	r5, #0
 800fc98:	f000 80e3 	beq.w	800fe62 <_dtoa_r+0x43a>
 800fc9c:	ed9d 7b00 	vldr	d7, [sp]
 800fca0:	f1ba 0f00 	cmp.w	sl, #0
 800fca4:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 800fca8:	dd74      	ble.n	800fd94 <_dtoa_r+0x36c>
 800fcaa:	4a2a      	ldr	r2, [pc, #168]	; (800fd54 <_dtoa_r+0x32c>)
 800fcac:	f00a 030f 	and.w	r3, sl, #15
 800fcb0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800fcb4:	ed93 7b00 	vldr	d7, [r3]
 800fcb8:	ea4f 162a 	mov.w	r6, sl, asr #4
 800fcbc:	06f0      	lsls	r0, r6, #27
 800fcbe:	ed8d 7b08 	vstr	d7, [sp, #32]
 800fcc2:	d565      	bpl.n	800fd90 <_dtoa_r+0x368>
 800fcc4:	4b24      	ldr	r3, [pc, #144]	; (800fd58 <_dtoa_r+0x330>)
 800fcc6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800fcca:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800fcce:	f7f0 fdbd 	bl	800084c <__aeabi_ddiv>
 800fcd2:	e9cd 0100 	strd	r0, r1, [sp]
 800fcd6:	f006 060f 	and.w	r6, r6, #15
 800fcda:	2503      	movs	r5, #3
 800fcdc:	4f1e      	ldr	r7, [pc, #120]	; (800fd58 <_dtoa_r+0x330>)
 800fcde:	e04c      	b.n	800fd7a <_dtoa_r+0x352>
 800fce0:	2301      	movs	r3, #1
 800fce2:	930a      	str	r3, [sp, #40]	; 0x28
 800fce4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800fce6:	4453      	add	r3, sl
 800fce8:	f103 0901 	add.w	r9, r3, #1
 800fcec:	9302      	str	r3, [sp, #8]
 800fcee:	464b      	mov	r3, r9
 800fcf0:	2b01      	cmp	r3, #1
 800fcf2:	bfb8      	it	lt
 800fcf4:	2301      	movlt	r3, #1
 800fcf6:	e7ba      	b.n	800fc6e <_dtoa_r+0x246>
 800fcf8:	2300      	movs	r3, #0
 800fcfa:	e7b2      	b.n	800fc62 <_dtoa_r+0x23a>
 800fcfc:	2300      	movs	r3, #0
 800fcfe:	e7f0      	b.n	800fce2 <_dtoa_r+0x2ba>
 800fd00:	2501      	movs	r5, #1
 800fd02:	2300      	movs	r3, #0
 800fd04:	9306      	str	r3, [sp, #24]
 800fd06:	950a      	str	r5, [sp, #40]	; 0x28
 800fd08:	f04f 33ff 	mov.w	r3, #4294967295
 800fd0c:	9302      	str	r3, [sp, #8]
 800fd0e:	4699      	mov	r9, r3
 800fd10:	2200      	movs	r2, #0
 800fd12:	2312      	movs	r3, #18
 800fd14:	920b      	str	r2, [sp, #44]	; 0x2c
 800fd16:	e7aa      	b.n	800fc6e <_dtoa_r+0x246>
 800fd18:	2301      	movs	r3, #1
 800fd1a:	930a      	str	r3, [sp, #40]	; 0x28
 800fd1c:	e7f4      	b.n	800fd08 <_dtoa_r+0x2e0>
 800fd1e:	2301      	movs	r3, #1
 800fd20:	9302      	str	r3, [sp, #8]
 800fd22:	4699      	mov	r9, r3
 800fd24:	461a      	mov	r2, r3
 800fd26:	e7f5      	b.n	800fd14 <_dtoa_r+0x2ec>
 800fd28:	3101      	adds	r1, #1
 800fd2a:	6071      	str	r1, [r6, #4]
 800fd2c:	0052      	lsls	r2, r2, #1
 800fd2e:	e7a2      	b.n	800fc76 <_dtoa_r+0x24e>
 800fd30:	636f4361 	.word	0x636f4361
 800fd34:	3fd287a7 	.word	0x3fd287a7
 800fd38:	8b60c8b3 	.word	0x8b60c8b3
 800fd3c:	3fc68a28 	.word	0x3fc68a28
 800fd40:	509f79fb 	.word	0x509f79fb
 800fd44:	3fd34413 	.word	0x3fd34413
 800fd48:	7ff00000 	.word	0x7ff00000
 800fd4c:	0801224d 	.word	0x0801224d
 800fd50:	3ff80000 	.word	0x3ff80000
 800fd54:	08012370 	.word	0x08012370
 800fd58:	08012348 	.word	0x08012348
 800fd5c:	080122d1 	.word	0x080122d1
 800fd60:	07f1      	lsls	r1, r6, #31
 800fd62:	d508      	bpl.n	800fd76 <_dtoa_r+0x34e>
 800fd64:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800fd68:	e9d7 2300 	ldrd	r2, r3, [r7]
 800fd6c:	f7f0 fc44 	bl	80005f8 <__aeabi_dmul>
 800fd70:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800fd74:	3501      	adds	r5, #1
 800fd76:	1076      	asrs	r6, r6, #1
 800fd78:	3708      	adds	r7, #8
 800fd7a:	2e00      	cmp	r6, #0
 800fd7c:	d1f0      	bne.n	800fd60 <_dtoa_r+0x338>
 800fd7e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800fd82:	e9dd 0100 	ldrd	r0, r1, [sp]
 800fd86:	f7f0 fd61 	bl	800084c <__aeabi_ddiv>
 800fd8a:	e9cd 0100 	strd	r0, r1, [sp]
 800fd8e:	e01a      	b.n	800fdc6 <_dtoa_r+0x39e>
 800fd90:	2502      	movs	r5, #2
 800fd92:	e7a3      	b.n	800fcdc <_dtoa_r+0x2b4>
 800fd94:	f000 80a0 	beq.w	800fed8 <_dtoa_r+0x4b0>
 800fd98:	f1ca 0600 	rsb	r6, sl, #0
 800fd9c:	4b9f      	ldr	r3, [pc, #636]	; (801001c <_dtoa_r+0x5f4>)
 800fd9e:	4fa0      	ldr	r7, [pc, #640]	; (8010020 <_dtoa_r+0x5f8>)
 800fda0:	f006 020f 	and.w	r2, r6, #15
 800fda4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800fda8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fdac:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800fdb0:	f7f0 fc22 	bl	80005f8 <__aeabi_dmul>
 800fdb4:	e9cd 0100 	strd	r0, r1, [sp]
 800fdb8:	1136      	asrs	r6, r6, #4
 800fdba:	2300      	movs	r3, #0
 800fdbc:	2502      	movs	r5, #2
 800fdbe:	2e00      	cmp	r6, #0
 800fdc0:	d17f      	bne.n	800fec2 <_dtoa_r+0x49a>
 800fdc2:	2b00      	cmp	r3, #0
 800fdc4:	d1e1      	bne.n	800fd8a <_dtoa_r+0x362>
 800fdc6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800fdc8:	2b00      	cmp	r3, #0
 800fdca:	f000 8087 	beq.w	800fedc <_dtoa_r+0x4b4>
 800fdce:	e9dd 6700 	ldrd	r6, r7, [sp]
 800fdd2:	2200      	movs	r2, #0
 800fdd4:	4b93      	ldr	r3, [pc, #588]	; (8010024 <_dtoa_r+0x5fc>)
 800fdd6:	4630      	mov	r0, r6
 800fdd8:	4639      	mov	r1, r7
 800fdda:	f7f0 fe7f 	bl	8000adc <__aeabi_dcmplt>
 800fdde:	2800      	cmp	r0, #0
 800fde0:	d07c      	beq.n	800fedc <_dtoa_r+0x4b4>
 800fde2:	f1b9 0f00 	cmp.w	r9, #0
 800fde6:	d079      	beq.n	800fedc <_dtoa_r+0x4b4>
 800fde8:	9b02      	ldr	r3, [sp, #8]
 800fdea:	2b00      	cmp	r3, #0
 800fdec:	dd35      	ble.n	800fe5a <_dtoa_r+0x432>
 800fdee:	f10a 33ff 	add.w	r3, sl, #4294967295
 800fdf2:	9308      	str	r3, [sp, #32]
 800fdf4:	4639      	mov	r1, r7
 800fdf6:	2200      	movs	r2, #0
 800fdf8:	4b8b      	ldr	r3, [pc, #556]	; (8010028 <_dtoa_r+0x600>)
 800fdfa:	4630      	mov	r0, r6
 800fdfc:	f7f0 fbfc 	bl	80005f8 <__aeabi_dmul>
 800fe00:	e9cd 0100 	strd	r0, r1, [sp]
 800fe04:	9f02      	ldr	r7, [sp, #8]
 800fe06:	3501      	adds	r5, #1
 800fe08:	4628      	mov	r0, r5
 800fe0a:	f7f0 fb8b 	bl	8000524 <__aeabi_i2d>
 800fe0e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800fe12:	f7f0 fbf1 	bl	80005f8 <__aeabi_dmul>
 800fe16:	2200      	movs	r2, #0
 800fe18:	4b84      	ldr	r3, [pc, #528]	; (801002c <_dtoa_r+0x604>)
 800fe1a:	f7f0 fa37 	bl	800028c <__adddf3>
 800fe1e:	4605      	mov	r5, r0
 800fe20:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800fe24:	2f00      	cmp	r7, #0
 800fe26:	d15d      	bne.n	800fee4 <_dtoa_r+0x4bc>
 800fe28:	2200      	movs	r2, #0
 800fe2a:	4b81      	ldr	r3, [pc, #516]	; (8010030 <_dtoa_r+0x608>)
 800fe2c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800fe30:	f7f0 fa2a 	bl	8000288 <__aeabi_dsub>
 800fe34:	462a      	mov	r2, r5
 800fe36:	4633      	mov	r3, r6
 800fe38:	e9cd 0100 	strd	r0, r1, [sp]
 800fe3c:	f7f0 fe6c 	bl	8000b18 <__aeabi_dcmpgt>
 800fe40:	2800      	cmp	r0, #0
 800fe42:	f040 8288 	bne.w	8010356 <_dtoa_r+0x92e>
 800fe46:	462a      	mov	r2, r5
 800fe48:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800fe4c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800fe50:	f7f0 fe44 	bl	8000adc <__aeabi_dcmplt>
 800fe54:	2800      	cmp	r0, #0
 800fe56:	f040 827c 	bne.w	8010352 <_dtoa_r+0x92a>
 800fe5a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800fe5e:	e9cd 2300 	strd	r2, r3, [sp]
 800fe62:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800fe64:	2b00      	cmp	r3, #0
 800fe66:	f2c0 8150 	blt.w	801010a <_dtoa_r+0x6e2>
 800fe6a:	f1ba 0f0e 	cmp.w	sl, #14
 800fe6e:	f300 814c 	bgt.w	801010a <_dtoa_r+0x6e2>
 800fe72:	4b6a      	ldr	r3, [pc, #424]	; (801001c <_dtoa_r+0x5f4>)
 800fe74:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800fe78:	ed93 7b00 	vldr	d7, [r3]
 800fe7c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800fe7e:	2b00      	cmp	r3, #0
 800fe80:	ed8d 7b02 	vstr	d7, [sp, #8]
 800fe84:	f280 80d8 	bge.w	8010038 <_dtoa_r+0x610>
 800fe88:	f1b9 0f00 	cmp.w	r9, #0
 800fe8c:	f300 80d4 	bgt.w	8010038 <_dtoa_r+0x610>
 800fe90:	f040 825e 	bne.w	8010350 <_dtoa_r+0x928>
 800fe94:	2200      	movs	r2, #0
 800fe96:	4b66      	ldr	r3, [pc, #408]	; (8010030 <_dtoa_r+0x608>)
 800fe98:	ec51 0b17 	vmov	r0, r1, d7
 800fe9c:	f7f0 fbac 	bl	80005f8 <__aeabi_dmul>
 800fea0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800fea4:	f7f0 fe2e 	bl	8000b04 <__aeabi_dcmpge>
 800fea8:	464f      	mov	r7, r9
 800feaa:	464e      	mov	r6, r9
 800feac:	2800      	cmp	r0, #0
 800feae:	f040 8234 	bne.w	801031a <_dtoa_r+0x8f2>
 800feb2:	2331      	movs	r3, #49	; 0x31
 800feb4:	f10b 0501 	add.w	r5, fp, #1
 800feb8:	f88b 3000 	strb.w	r3, [fp]
 800febc:	f10a 0a01 	add.w	sl, sl, #1
 800fec0:	e22f      	b.n	8010322 <_dtoa_r+0x8fa>
 800fec2:	07f2      	lsls	r2, r6, #31
 800fec4:	d505      	bpl.n	800fed2 <_dtoa_r+0x4aa>
 800fec6:	e9d7 2300 	ldrd	r2, r3, [r7]
 800feca:	f7f0 fb95 	bl	80005f8 <__aeabi_dmul>
 800fece:	3501      	adds	r5, #1
 800fed0:	2301      	movs	r3, #1
 800fed2:	1076      	asrs	r6, r6, #1
 800fed4:	3708      	adds	r7, #8
 800fed6:	e772      	b.n	800fdbe <_dtoa_r+0x396>
 800fed8:	2502      	movs	r5, #2
 800feda:	e774      	b.n	800fdc6 <_dtoa_r+0x39e>
 800fedc:	f8cd a020 	str.w	sl, [sp, #32]
 800fee0:	464f      	mov	r7, r9
 800fee2:	e791      	b.n	800fe08 <_dtoa_r+0x3e0>
 800fee4:	4b4d      	ldr	r3, [pc, #308]	; (801001c <_dtoa_r+0x5f4>)
 800fee6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800feea:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 800feee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fef0:	2b00      	cmp	r3, #0
 800fef2:	d047      	beq.n	800ff84 <_dtoa_r+0x55c>
 800fef4:	4602      	mov	r2, r0
 800fef6:	460b      	mov	r3, r1
 800fef8:	2000      	movs	r0, #0
 800fefa:	494e      	ldr	r1, [pc, #312]	; (8010034 <_dtoa_r+0x60c>)
 800fefc:	f7f0 fca6 	bl	800084c <__aeabi_ddiv>
 800ff00:	462a      	mov	r2, r5
 800ff02:	4633      	mov	r3, r6
 800ff04:	f7f0 f9c0 	bl	8000288 <__aeabi_dsub>
 800ff08:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800ff0c:	465d      	mov	r5, fp
 800ff0e:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ff12:	f7f0 fe21 	bl	8000b58 <__aeabi_d2iz>
 800ff16:	4606      	mov	r6, r0
 800ff18:	f7f0 fb04 	bl	8000524 <__aeabi_i2d>
 800ff1c:	4602      	mov	r2, r0
 800ff1e:	460b      	mov	r3, r1
 800ff20:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ff24:	f7f0 f9b0 	bl	8000288 <__aeabi_dsub>
 800ff28:	3630      	adds	r6, #48	; 0x30
 800ff2a:	f805 6b01 	strb.w	r6, [r5], #1
 800ff2e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800ff32:	e9cd 0100 	strd	r0, r1, [sp]
 800ff36:	f7f0 fdd1 	bl	8000adc <__aeabi_dcmplt>
 800ff3a:	2800      	cmp	r0, #0
 800ff3c:	d163      	bne.n	8010006 <_dtoa_r+0x5de>
 800ff3e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ff42:	2000      	movs	r0, #0
 800ff44:	4937      	ldr	r1, [pc, #220]	; (8010024 <_dtoa_r+0x5fc>)
 800ff46:	f7f0 f99f 	bl	8000288 <__aeabi_dsub>
 800ff4a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800ff4e:	f7f0 fdc5 	bl	8000adc <__aeabi_dcmplt>
 800ff52:	2800      	cmp	r0, #0
 800ff54:	f040 80b7 	bne.w	80100c6 <_dtoa_r+0x69e>
 800ff58:	eba5 030b 	sub.w	r3, r5, fp
 800ff5c:	429f      	cmp	r7, r3
 800ff5e:	f77f af7c 	ble.w	800fe5a <_dtoa_r+0x432>
 800ff62:	2200      	movs	r2, #0
 800ff64:	4b30      	ldr	r3, [pc, #192]	; (8010028 <_dtoa_r+0x600>)
 800ff66:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800ff6a:	f7f0 fb45 	bl	80005f8 <__aeabi_dmul>
 800ff6e:	2200      	movs	r2, #0
 800ff70:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800ff74:	4b2c      	ldr	r3, [pc, #176]	; (8010028 <_dtoa_r+0x600>)
 800ff76:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ff7a:	f7f0 fb3d 	bl	80005f8 <__aeabi_dmul>
 800ff7e:	e9cd 0100 	strd	r0, r1, [sp]
 800ff82:	e7c4      	b.n	800ff0e <_dtoa_r+0x4e6>
 800ff84:	462a      	mov	r2, r5
 800ff86:	4633      	mov	r3, r6
 800ff88:	f7f0 fb36 	bl	80005f8 <__aeabi_dmul>
 800ff8c:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800ff90:	eb0b 0507 	add.w	r5, fp, r7
 800ff94:	465e      	mov	r6, fp
 800ff96:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ff9a:	f7f0 fddd 	bl	8000b58 <__aeabi_d2iz>
 800ff9e:	4607      	mov	r7, r0
 800ffa0:	f7f0 fac0 	bl	8000524 <__aeabi_i2d>
 800ffa4:	3730      	adds	r7, #48	; 0x30
 800ffa6:	4602      	mov	r2, r0
 800ffa8:	460b      	mov	r3, r1
 800ffaa:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ffae:	f7f0 f96b 	bl	8000288 <__aeabi_dsub>
 800ffb2:	f806 7b01 	strb.w	r7, [r6], #1
 800ffb6:	42ae      	cmp	r6, r5
 800ffb8:	e9cd 0100 	strd	r0, r1, [sp]
 800ffbc:	f04f 0200 	mov.w	r2, #0
 800ffc0:	d126      	bne.n	8010010 <_dtoa_r+0x5e8>
 800ffc2:	4b1c      	ldr	r3, [pc, #112]	; (8010034 <_dtoa_r+0x60c>)
 800ffc4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800ffc8:	f7f0 f960 	bl	800028c <__adddf3>
 800ffcc:	4602      	mov	r2, r0
 800ffce:	460b      	mov	r3, r1
 800ffd0:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ffd4:	f7f0 fda0 	bl	8000b18 <__aeabi_dcmpgt>
 800ffd8:	2800      	cmp	r0, #0
 800ffda:	d174      	bne.n	80100c6 <_dtoa_r+0x69e>
 800ffdc:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800ffe0:	2000      	movs	r0, #0
 800ffe2:	4914      	ldr	r1, [pc, #80]	; (8010034 <_dtoa_r+0x60c>)
 800ffe4:	f7f0 f950 	bl	8000288 <__aeabi_dsub>
 800ffe8:	4602      	mov	r2, r0
 800ffea:	460b      	mov	r3, r1
 800ffec:	e9dd 0100 	ldrd	r0, r1, [sp]
 800fff0:	f7f0 fd74 	bl	8000adc <__aeabi_dcmplt>
 800fff4:	2800      	cmp	r0, #0
 800fff6:	f43f af30 	beq.w	800fe5a <_dtoa_r+0x432>
 800fffa:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800fffe:	2b30      	cmp	r3, #48	; 0x30
 8010000:	f105 32ff 	add.w	r2, r5, #4294967295
 8010004:	d002      	beq.n	801000c <_dtoa_r+0x5e4>
 8010006:	f8dd a020 	ldr.w	sl, [sp, #32]
 801000a:	e04a      	b.n	80100a2 <_dtoa_r+0x67a>
 801000c:	4615      	mov	r5, r2
 801000e:	e7f4      	b.n	800fffa <_dtoa_r+0x5d2>
 8010010:	4b05      	ldr	r3, [pc, #20]	; (8010028 <_dtoa_r+0x600>)
 8010012:	f7f0 faf1 	bl	80005f8 <__aeabi_dmul>
 8010016:	e9cd 0100 	strd	r0, r1, [sp]
 801001a:	e7bc      	b.n	800ff96 <_dtoa_r+0x56e>
 801001c:	08012370 	.word	0x08012370
 8010020:	08012348 	.word	0x08012348
 8010024:	3ff00000 	.word	0x3ff00000
 8010028:	40240000 	.word	0x40240000
 801002c:	401c0000 	.word	0x401c0000
 8010030:	40140000 	.word	0x40140000
 8010034:	3fe00000 	.word	0x3fe00000
 8010038:	e9dd 6700 	ldrd	r6, r7, [sp]
 801003c:	465d      	mov	r5, fp
 801003e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8010042:	4630      	mov	r0, r6
 8010044:	4639      	mov	r1, r7
 8010046:	f7f0 fc01 	bl	800084c <__aeabi_ddiv>
 801004a:	f7f0 fd85 	bl	8000b58 <__aeabi_d2iz>
 801004e:	4680      	mov	r8, r0
 8010050:	f7f0 fa68 	bl	8000524 <__aeabi_i2d>
 8010054:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8010058:	f7f0 face 	bl	80005f8 <__aeabi_dmul>
 801005c:	4602      	mov	r2, r0
 801005e:	460b      	mov	r3, r1
 8010060:	4630      	mov	r0, r6
 8010062:	4639      	mov	r1, r7
 8010064:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8010068:	f7f0 f90e 	bl	8000288 <__aeabi_dsub>
 801006c:	f805 6b01 	strb.w	r6, [r5], #1
 8010070:	eba5 060b 	sub.w	r6, r5, fp
 8010074:	45b1      	cmp	r9, r6
 8010076:	4602      	mov	r2, r0
 8010078:	460b      	mov	r3, r1
 801007a:	d139      	bne.n	80100f0 <_dtoa_r+0x6c8>
 801007c:	f7f0 f906 	bl	800028c <__adddf3>
 8010080:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8010084:	4606      	mov	r6, r0
 8010086:	460f      	mov	r7, r1
 8010088:	f7f0 fd46 	bl	8000b18 <__aeabi_dcmpgt>
 801008c:	b9c8      	cbnz	r0, 80100c2 <_dtoa_r+0x69a>
 801008e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8010092:	4630      	mov	r0, r6
 8010094:	4639      	mov	r1, r7
 8010096:	f7f0 fd17 	bl	8000ac8 <__aeabi_dcmpeq>
 801009a:	b110      	cbz	r0, 80100a2 <_dtoa_r+0x67a>
 801009c:	f018 0f01 	tst.w	r8, #1
 80100a0:	d10f      	bne.n	80100c2 <_dtoa_r+0x69a>
 80100a2:	9904      	ldr	r1, [sp, #16]
 80100a4:	4620      	mov	r0, r4
 80100a6:	f000 fec3 	bl	8010e30 <_Bfree>
 80100aa:	2300      	movs	r3, #0
 80100ac:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80100ae:	702b      	strb	r3, [r5, #0]
 80100b0:	f10a 0301 	add.w	r3, sl, #1
 80100b4:	6013      	str	r3, [r2, #0]
 80100b6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80100b8:	2b00      	cmp	r3, #0
 80100ba:	f000 8241 	beq.w	8010540 <_dtoa_r+0xb18>
 80100be:	601d      	str	r5, [r3, #0]
 80100c0:	e23e      	b.n	8010540 <_dtoa_r+0xb18>
 80100c2:	f8cd a020 	str.w	sl, [sp, #32]
 80100c6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80100ca:	2a39      	cmp	r2, #57	; 0x39
 80100cc:	f105 33ff 	add.w	r3, r5, #4294967295
 80100d0:	d108      	bne.n	80100e4 <_dtoa_r+0x6bc>
 80100d2:	459b      	cmp	fp, r3
 80100d4:	d10a      	bne.n	80100ec <_dtoa_r+0x6c4>
 80100d6:	9b08      	ldr	r3, [sp, #32]
 80100d8:	3301      	adds	r3, #1
 80100da:	9308      	str	r3, [sp, #32]
 80100dc:	2330      	movs	r3, #48	; 0x30
 80100de:	f88b 3000 	strb.w	r3, [fp]
 80100e2:	465b      	mov	r3, fp
 80100e4:	781a      	ldrb	r2, [r3, #0]
 80100e6:	3201      	adds	r2, #1
 80100e8:	701a      	strb	r2, [r3, #0]
 80100ea:	e78c      	b.n	8010006 <_dtoa_r+0x5de>
 80100ec:	461d      	mov	r5, r3
 80100ee:	e7ea      	b.n	80100c6 <_dtoa_r+0x69e>
 80100f0:	2200      	movs	r2, #0
 80100f2:	4b9b      	ldr	r3, [pc, #620]	; (8010360 <_dtoa_r+0x938>)
 80100f4:	f7f0 fa80 	bl	80005f8 <__aeabi_dmul>
 80100f8:	2200      	movs	r2, #0
 80100fa:	2300      	movs	r3, #0
 80100fc:	4606      	mov	r6, r0
 80100fe:	460f      	mov	r7, r1
 8010100:	f7f0 fce2 	bl	8000ac8 <__aeabi_dcmpeq>
 8010104:	2800      	cmp	r0, #0
 8010106:	d09a      	beq.n	801003e <_dtoa_r+0x616>
 8010108:	e7cb      	b.n	80100a2 <_dtoa_r+0x67a>
 801010a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801010c:	2a00      	cmp	r2, #0
 801010e:	f000 808b 	beq.w	8010228 <_dtoa_r+0x800>
 8010112:	9a06      	ldr	r2, [sp, #24]
 8010114:	2a01      	cmp	r2, #1
 8010116:	dc6e      	bgt.n	80101f6 <_dtoa_r+0x7ce>
 8010118:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801011a:	2a00      	cmp	r2, #0
 801011c:	d067      	beq.n	80101ee <_dtoa_r+0x7c6>
 801011e:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8010122:	9f07      	ldr	r7, [sp, #28]
 8010124:	9d05      	ldr	r5, [sp, #20]
 8010126:	9a05      	ldr	r2, [sp, #20]
 8010128:	2101      	movs	r1, #1
 801012a:	441a      	add	r2, r3
 801012c:	4620      	mov	r0, r4
 801012e:	9205      	str	r2, [sp, #20]
 8010130:	4498      	add	r8, r3
 8010132:	f000 ff5b 	bl	8010fec <__i2b>
 8010136:	4606      	mov	r6, r0
 8010138:	2d00      	cmp	r5, #0
 801013a:	dd0c      	ble.n	8010156 <_dtoa_r+0x72e>
 801013c:	f1b8 0f00 	cmp.w	r8, #0
 8010140:	dd09      	ble.n	8010156 <_dtoa_r+0x72e>
 8010142:	4545      	cmp	r5, r8
 8010144:	9a05      	ldr	r2, [sp, #20]
 8010146:	462b      	mov	r3, r5
 8010148:	bfa8      	it	ge
 801014a:	4643      	movge	r3, r8
 801014c:	1ad2      	subs	r2, r2, r3
 801014e:	9205      	str	r2, [sp, #20]
 8010150:	1aed      	subs	r5, r5, r3
 8010152:	eba8 0803 	sub.w	r8, r8, r3
 8010156:	9b07      	ldr	r3, [sp, #28]
 8010158:	b1eb      	cbz	r3, 8010196 <_dtoa_r+0x76e>
 801015a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801015c:	2b00      	cmp	r3, #0
 801015e:	d067      	beq.n	8010230 <_dtoa_r+0x808>
 8010160:	b18f      	cbz	r7, 8010186 <_dtoa_r+0x75e>
 8010162:	4631      	mov	r1, r6
 8010164:	463a      	mov	r2, r7
 8010166:	4620      	mov	r0, r4
 8010168:	f000 ffe0 	bl	801112c <__pow5mult>
 801016c:	9a04      	ldr	r2, [sp, #16]
 801016e:	4601      	mov	r1, r0
 8010170:	4606      	mov	r6, r0
 8010172:	4620      	mov	r0, r4
 8010174:	f000 ff43 	bl	8010ffe <__multiply>
 8010178:	9904      	ldr	r1, [sp, #16]
 801017a:	9008      	str	r0, [sp, #32]
 801017c:	4620      	mov	r0, r4
 801017e:	f000 fe57 	bl	8010e30 <_Bfree>
 8010182:	9b08      	ldr	r3, [sp, #32]
 8010184:	9304      	str	r3, [sp, #16]
 8010186:	9b07      	ldr	r3, [sp, #28]
 8010188:	1bda      	subs	r2, r3, r7
 801018a:	d004      	beq.n	8010196 <_dtoa_r+0x76e>
 801018c:	9904      	ldr	r1, [sp, #16]
 801018e:	4620      	mov	r0, r4
 8010190:	f000 ffcc 	bl	801112c <__pow5mult>
 8010194:	9004      	str	r0, [sp, #16]
 8010196:	2101      	movs	r1, #1
 8010198:	4620      	mov	r0, r4
 801019a:	f000 ff27 	bl	8010fec <__i2b>
 801019e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80101a0:	4607      	mov	r7, r0
 80101a2:	2b00      	cmp	r3, #0
 80101a4:	f000 81d0 	beq.w	8010548 <_dtoa_r+0xb20>
 80101a8:	461a      	mov	r2, r3
 80101aa:	4601      	mov	r1, r0
 80101ac:	4620      	mov	r0, r4
 80101ae:	f000 ffbd 	bl	801112c <__pow5mult>
 80101b2:	9b06      	ldr	r3, [sp, #24]
 80101b4:	2b01      	cmp	r3, #1
 80101b6:	4607      	mov	r7, r0
 80101b8:	dc40      	bgt.n	801023c <_dtoa_r+0x814>
 80101ba:	9b00      	ldr	r3, [sp, #0]
 80101bc:	2b00      	cmp	r3, #0
 80101be:	d139      	bne.n	8010234 <_dtoa_r+0x80c>
 80101c0:	9b01      	ldr	r3, [sp, #4]
 80101c2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80101c6:	2b00      	cmp	r3, #0
 80101c8:	d136      	bne.n	8010238 <_dtoa_r+0x810>
 80101ca:	9b01      	ldr	r3, [sp, #4]
 80101cc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80101d0:	0d1b      	lsrs	r3, r3, #20
 80101d2:	051b      	lsls	r3, r3, #20
 80101d4:	b12b      	cbz	r3, 80101e2 <_dtoa_r+0x7ba>
 80101d6:	9b05      	ldr	r3, [sp, #20]
 80101d8:	3301      	adds	r3, #1
 80101da:	9305      	str	r3, [sp, #20]
 80101dc:	f108 0801 	add.w	r8, r8, #1
 80101e0:	2301      	movs	r3, #1
 80101e2:	9307      	str	r3, [sp, #28]
 80101e4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80101e6:	2b00      	cmp	r3, #0
 80101e8:	d12a      	bne.n	8010240 <_dtoa_r+0x818>
 80101ea:	2001      	movs	r0, #1
 80101ec:	e030      	b.n	8010250 <_dtoa_r+0x828>
 80101ee:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80101f0:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80101f4:	e795      	b.n	8010122 <_dtoa_r+0x6fa>
 80101f6:	9b07      	ldr	r3, [sp, #28]
 80101f8:	f109 37ff 	add.w	r7, r9, #4294967295
 80101fc:	42bb      	cmp	r3, r7
 80101fe:	bfbf      	itttt	lt
 8010200:	9b07      	ldrlt	r3, [sp, #28]
 8010202:	9707      	strlt	r7, [sp, #28]
 8010204:	1afa      	sublt	r2, r7, r3
 8010206:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8010208:	bfbb      	ittet	lt
 801020a:	189b      	addlt	r3, r3, r2
 801020c:	930e      	strlt	r3, [sp, #56]	; 0x38
 801020e:	1bdf      	subge	r7, r3, r7
 8010210:	2700      	movlt	r7, #0
 8010212:	f1b9 0f00 	cmp.w	r9, #0
 8010216:	bfb5      	itete	lt
 8010218:	9b05      	ldrlt	r3, [sp, #20]
 801021a:	9d05      	ldrge	r5, [sp, #20]
 801021c:	eba3 0509 	sublt.w	r5, r3, r9
 8010220:	464b      	movge	r3, r9
 8010222:	bfb8      	it	lt
 8010224:	2300      	movlt	r3, #0
 8010226:	e77e      	b.n	8010126 <_dtoa_r+0x6fe>
 8010228:	9f07      	ldr	r7, [sp, #28]
 801022a:	9d05      	ldr	r5, [sp, #20]
 801022c:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 801022e:	e783      	b.n	8010138 <_dtoa_r+0x710>
 8010230:	9a07      	ldr	r2, [sp, #28]
 8010232:	e7ab      	b.n	801018c <_dtoa_r+0x764>
 8010234:	2300      	movs	r3, #0
 8010236:	e7d4      	b.n	80101e2 <_dtoa_r+0x7ba>
 8010238:	9b00      	ldr	r3, [sp, #0]
 801023a:	e7d2      	b.n	80101e2 <_dtoa_r+0x7ba>
 801023c:	2300      	movs	r3, #0
 801023e:	9307      	str	r3, [sp, #28]
 8010240:	693b      	ldr	r3, [r7, #16]
 8010242:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8010246:	6918      	ldr	r0, [r3, #16]
 8010248:	f000 fe82 	bl	8010f50 <__hi0bits>
 801024c:	f1c0 0020 	rsb	r0, r0, #32
 8010250:	4440      	add	r0, r8
 8010252:	f010 001f 	ands.w	r0, r0, #31
 8010256:	d047      	beq.n	80102e8 <_dtoa_r+0x8c0>
 8010258:	f1c0 0320 	rsb	r3, r0, #32
 801025c:	2b04      	cmp	r3, #4
 801025e:	dd3b      	ble.n	80102d8 <_dtoa_r+0x8b0>
 8010260:	9b05      	ldr	r3, [sp, #20]
 8010262:	f1c0 001c 	rsb	r0, r0, #28
 8010266:	4403      	add	r3, r0
 8010268:	9305      	str	r3, [sp, #20]
 801026a:	4405      	add	r5, r0
 801026c:	4480      	add	r8, r0
 801026e:	9b05      	ldr	r3, [sp, #20]
 8010270:	2b00      	cmp	r3, #0
 8010272:	dd05      	ble.n	8010280 <_dtoa_r+0x858>
 8010274:	461a      	mov	r2, r3
 8010276:	9904      	ldr	r1, [sp, #16]
 8010278:	4620      	mov	r0, r4
 801027a:	f000 ffa5 	bl	80111c8 <__lshift>
 801027e:	9004      	str	r0, [sp, #16]
 8010280:	f1b8 0f00 	cmp.w	r8, #0
 8010284:	dd05      	ble.n	8010292 <_dtoa_r+0x86a>
 8010286:	4639      	mov	r1, r7
 8010288:	4642      	mov	r2, r8
 801028a:	4620      	mov	r0, r4
 801028c:	f000 ff9c 	bl	80111c8 <__lshift>
 8010290:	4607      	mov	r7, r0
 8010292:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8010294:	b353      	cbz	r3, 80102ec <_dtoa_r+0x8c4>
 8010296:	4639      	mov	r1, r7
 8010298:	9804      	ldr	r0, [sp, #16]
 801029a:	f000 ffe9 	bl	8011270 <__mcmp>
 801029e:	2800      	cmp	r0, #0
 80102a0:	da24      	bge.n	80102ec <_dtoa_r+0x8c4>
 80102a2:	2300      	movs	r3, #0
 80102a4:	220a      	movs	r2, #10
 80102a6:	9904      	ldr	r1, [sp, #16]
 80102a8:	4620      	mov	r0, r4
 80102aa:	f000 fdd8 	bl	8010e5e <__multadd>
 80102ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80102b0:	9004      	str	r0, [sp, #16]
 80102b2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80102b6:	2b00      	cmp	r3, #0
 80102b8:	f000 814d 	beq.w	8010556 <_dtoa_r+0xb2e>
 80102bc:	2300      	movs	r3, #0
 80102be:	4631      	mov	r1, r6
 80102c0:	220a      	movs	r2, #10
 80102c2:	4620      	mov	r0, r4
 80102c4:	f000 fdcb 	bl	8010e5e <__multadd>
 80102c8:	9b02      	ldr	r3, [sp, #8]
 80102ca:	2b00      	cmp	r3, #0
 80102cc:	4606      	mov	r6, r0
 80102ce:	dc4f      	bgt.n	8010370 <_dtoa_r+0x948>
 80102d0:	9b06      	ldr	r3, [sp, #24]
 80102d2:	2b02      	cmp	r3, #2
 80102d4:	dd4c      	ble.n	8010370 <_dtoa_r+0x948>
 80102d6:	e011      	b.n	80102fc <_dtoa_r+0x8d4>
 80102d8:	d0c9      	beq.n	801026e <_dtoa_r+0x846>
 80102da:	9a05      	ldr	r2, [sp, #20]
 80102dc:	331c      	adds	r3, #28
 80102de:	441a      	add	r2, r3
 80102e0:	9205      	str	r2, [sp, #20]
 80102e2:	441d      	add	r5, r3
 80102e4:	4498      	add	r8, r3
 80102e6:	e7c2      	b.n	801026e <_dtoa_r+0x846>
 80102e8:	4603      	mov	r3, r0
 80102ea:	e7f6      	b.n	80102da <_dtoa_r+0x8b2>
 80102ec:	f1b9 0f00 	cmp.w	r9, #0
 80102f0:	dc38      	bgt.n	8010364 <_dtoa_r+0x93c>
 80102f2:	9b06      	ldr	r3, [sp, #24]
 80102f4:	2b02      	cmp	r3, #2
 80102f6:	dd35      	ble.n	8010364 <_dtoa_r+0x93c>
 80102f8:	f8cd 9008 	str.w	r9, [sp, #8]
 80102fc:	9b02      	ldr	r3, [sp, #8]
 80102fe:	b963      	cbnz	r3, 801031a <_dtoa_r+0x8f2>
 8010300:	4639      	mov	r1, r7
 8010302:	2205      	movs	r2, #5
 8010304:	4620      	mov	r0, r4
 8010306:	f000 fdaa 	bl	8010e5e <__multadd>
 801030a:	4601      	mov	r1, r0
 801030c:	4607      	mov	r7, r0
 801030e:	9804      	ldr	r0, [sp, #16]
 8010310:	f000 ffae 	bl	8011270 <__mcmp>
 8010314:	2800      	cmp	r0, #0
 8010316:	f73f adcc 	bgt.w	800feb2 <_dtoa_r+0x48a>
 801031a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801031c:	465d      	mov	r5, fp
 801031e:	ea6f 0a03 	mvn.w	sl, r3
 8010322:	f04f 0900 	mov.w	r9, #0
 8010326:	4639      	mov	r1, r7
 8010328:	4620      	mov	r0, r4
 801032a:	f000 fd81 	bl	8010e30 <_Bfree>
 801032e:	2e00      	cmp	r6, #0
 8010330:	f43f aeb7 	beq.w	80100a2 <_dtoa_r+0x67a>
 8010334:	f1b9 0f00 	cmp.w	r9, #0
 8010338:	d005      	beq.n	8010346 <_dtoa_r+0x91e>
 801033a:	45b1      	cmp	r9, r6
 801033c:	d003      	beq.n	8010346 <_dtoa_r+0x91e>
 801033e:	4649      	mov	r1, r9
 8010340:	4620      	mov	r0, r4
 8010342:	f000 fd75 	bl	8010e30 <_Bfree>
 8010346:	4631      	mov	r1, r6
 8010348:	4620      	mov	r0, r4
 801034a:	f000 fd71 	bl	8010e30 <_Bfree>
 801034e:	e6a8      	b.n	80100a2 <_dtoa_r+0x67a>
 8010350:	2700      	movs	r7, #0
 8010352:	463e      	mov	r6, r7
 8010354:	e7e1      	b.n	801031a <_dtoa_r+0x8f2>
 8010356:	f8dd a020 	ldr.w	sl, [sp, #32]
 801035a:	463e      	mov	r6, r7
 801035c:	e5a9      	b.n	800feb2 <_dtoa_r+0x48a>
 801035e:	bf00      	nop
 8010360:	40240000 	.word	0x40240000
 8010364:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010366:	f8cd 9008 	str.w	r9, [sp, #8]
 801036a:	2b00      	cmp	r3, #0
 801036c:	f000 80fa 	beq.w	8010564 <_dtoa_r+0xb3c>
 8010370:	2d00      	cmp	r5, #0
 8010372:	dd05      	ble.n	8010380 <_dtoa_r+0x958>
 8010374:	4631      	mov	r1, r6
 8010376:	462a      	mov	r2, r5
 8010378:	4620      	mov	r0, r4
 801037a:	f000 ff25 	bl	80111c8 <__lshift>
 801037e:	4606      	mov	r6, r0
 8010380:	9b07      	ldr	r3, [sp, #28]
 8010382:	2b00      	cmp	r3, #0
 8010384:	d04c      	beq.n	8010420 <_dtoa_r+0x9f8>
 8010386:	6871      	ldr	r1, [r6, #4]
 8010388:	4620      	mov	r0, r4
 801038a:	f000 fd1d 	bl	8010dc8 <_Balloc>
 801038e:	6932      	ldr	r2, [r6, #16]
 8010390:	3202      	adds	r2, #2
 8010392:	4605      	mov	r5, r0
 8010394:	0092      	lsls	r2, r2, #2
 8010396:	f106 010c 	add.w	r1, r6, #12
 801039a:	300c      	adds	r0, #12
 801039c:	f7fd fcc0 	bl	800dd20 <memcpy>
 80103a0:	2201      	movs	r2, #1
 80103a2:	4629      	mov	r1, r5
 80103a4:	4620      	mov	r0, r4
 80103a6:	f000 ff0f 	bl	80111c8 <__lshift>
 80103aa:	9b00      	ldr	r3, [sp, #0]
 80103ac:	f8cd b014 	str.w	fp, [sp, #20]
 80103b0:	f003 0301 	and.w	r3, r3, #1
 80103b4:	46b1      	mov	r9, r6
 80103b6:	9307      	str	r3, [sp, #28]
 80103b8:	4606      	mov	r6, r0
 80103ba:	4639      	mov	r1, r7
 80103bc:	9804      	ldr	r0, [sp, #16]
 80103be:	f7ff faa5 	bl	800f90c <quorem>
 80103c2:	4649      	mov	r1, r9
 80103c4:	4605      	mov	r5, r0
 80103c6:	f100 0830 	add.w	r8, r0, #48	; 0x30
 80103ca:	9804      	ldr	r0, [sp, #16]
 80103cc:	f000 ff50 	bl	8011270 <__mcmp>
 80103d0:	4632      	mov	r2, r6
 80103d2:	9000      	str	r0, [sp, #0]
 80103d4:	4639      	mov	r1, r7
 80103d6:	4620      	mov	r0, r4
 80103d8:	f000 ff64 	bl	80112a4 <__mdiff>
 80103dc:	68c3      	ldr	r3, [r0, #12]
 80103de:	4602      	mov	r2, r0
 80103e0:	bb03      	cbnz	r3, 8010424 <_dtoa_r+0x9fc>
 80103e2:	4601      	mov	r1, r0
 80103e4:	9008      	str	r0, [sp, #32]
 80103e6:	9804      	ldr	r0, [sp, #16]
 80103e8:	f000 ff42 	bl	8011270 <__mcmp>
 80103ec:	9a08      	ldr	r2, [sp, #32]
 80103ee:	4603      	mov	r3, r0
 80103f0:	4611      	mov	r1, r2
 80103f2:	4620      	mov	r0, r4
 80103f4:	9308      	str	r3, [sp, #32]
 80103f6:	f000 fd1b 	bl	8010e30 <_Bfree>
 80103fa:	9b08      	ldr	r3, [sp, #32]
 80103fc:	b9a3      	cbnz	r3, 8010428 <_dtoa_r+0xa00>
 80103fe:	9a06      	ldr	r2, [sp, #24]
 8010400:	b992      	cbnz	r2, 8010428 <_dtoa_r+0xa00>
 8010402:	9a07      	ldr	r2, [sp, #28]
 8010404:	b982      	cbnz	r2, 8010428 <_dtoa_r+0xa00>
 8010406:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 801040a:	d029      	beq.n	8010460 <_dtoa_r+0xa38>
 801040c:	9b00      	ldr	r3, [sp, #0]
 801040e:	2b00      	cmp	r3, #0
 8010410:	dd01      	ble.n	8010416 <_dtoa_r+0x9ee>
 8010412:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8010416:	9b05      	ldr	r3, [sp, #20]
 8010418:	1c5d      	adds	r5, r3, #1
 801041a:	f883 8000 	strb.w	r8, [r3]
 801041e:	e782      	b.n	8010326 <_dtoa_r+0x8fe>
 8010420:	4630      	mov	r0, r6
 8010422:	e7c2      	b.n	80103aa <_dtoa_r+0x982>
 8010424:	2301      	movs	r3, #1
 8010426:	e7e3      	b.n	80103f0 <_dtoa_r+0x9c8>
 8010428:	9a00      	ldr	r2, [sp, #0]
 801042a:	2a00      	cmp	r2, #0
 801042c:	db04      	blt.n	8010438 <_dtoa_r+0xa10>
 801042e:	d125      	bne.n	801047c <_dtoa_r+0xa54>
 8010430:	9a06      	ldr	r2, [sp, #24]
 8010432:	bb1a      	cbnz	r2, 801047c <_dtoa_r+0xa54>
 8010434:	9a07      	ldr	r2, [sp, #28]
 8010436:	bb0a      	cbnz	r2, 801047c <_dtoa_r+0xa54>
 8010438:	2b00      	cmp	r3, #0
 801043a:	ddec      	ble.n	8010416 <_dtoa_r+0x9ee>
 801043c:	2201      	movs	r2, #1
 801043e:	9904      	ldr	r1, [sp, #16]
 8010440:	4620      	mov	r0, r4
 8010442:	f000 fec1 	bl	80111c8 <__lshift>
 8010446:	4639      	mov	r1, r7
 8010448:	9004      	str	r0, [sp, #16]
 801044a:	f000 ff11 	bl	8011270 <__mcmp>
 801044e:	2800      	cmp	r0, #0
 8010450:	dc03      	bgt.n	801045a <_dtoa_r+0xa32>
 8010452:	d1e0      	bne.n	8010416 <_dtoa_r+0x9ee>
 8010454:	f018 0f01 	tst.w	r8, #1
 8010458:	d0dd      	beq.n	8010416 <_dtoa_r+0x9ee>
 801045a:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 801045e:	d1d8      	bne.n	8010412 <_dtoa_r+0x9ea>
 8010460:	9b05      	ldr	r3, [sp, #20]
 8010462:	9a05      	ldr	r2, [sp, #20]
 8010464:	1c5d      	adds	r5, r3, #1
 8010466:	2339      	movs	r3, #57	; 0x39
 8010468:	7013      	strb	r3, [r2, #0]
 801046a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 801046e:	2b39      	cmp	r3, #57	; 0x39
 8010470:	f105 32ff 	add.w	r2, r5, #4294967295
 8010474:	d04f      	beq.n	8010516 <_dtoa_r+0xaee>
 8010476:	3301      	adds	r3, #1
 8010478:	7013      	strb	r3, [r2, #0]
 801047a:	e754      	b.n	8010326 <_dtoa_r+0x8fe>
 801047c:	9a05      	ldr	r2, [sp, #20]
 801047e:	2b00      	cmp	r3, #0
 8010480:	f102 0501 	add.w	r5, r2, #1
 8010484:	dd06      	ble.n	8010494 <_dtoa_r+0xa6c>
 8010486:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 801048a:	d0e9      	beq.n	8010460 <_dtoa_r+0xa38>
 801048c:	f108 0801 	add.w	r8, r8, #1
 8010490:	9b05      	ldr	r3, [sp, #20]
 8010492:	e7c2      	b.n	801041a <_dtoa_r+0x9f2>
 8010494:	9a02      	ldr	r2, [sp, #8]
 8010496:	f805 8c01 	strb.w	r8, [r5, #-1]
 801049a:	eba5 030b 	sub.w	r3, r5, fp
 801049e:	4293      	cmp	r3, r2
 80104a0:	d021      	beq.n	80104e6 <_dtoa_r+0xabe>
 80104a2:	2300      	movs	r3, #0
 80104a4:	220a      	movs	r2, #10
 80104a6:	9904      	ldr	r1, [sp, #16]
 80104a8:	4620      	mov	r0, r4
 80104aa:	f000 fcd8 	bl	8010e5e <__multadd>
 80104ae:	45b1      	cmp	r9, r6
 80104b0:	9004      	str	r0, [sp, #16]
 80104b2:	f04f 0300 	mov.w	r3, #0
 80104b6:	f04f 020a 	mov.w	r2, #10
 80104ba:	4649      	mov	r1, r9
 80104bc:	4620      	mov	r0, r4
 80104be:	d105      	bne.n	80104cc <_dtoa_r+0xaa4>
 80104c0:	f000 fccd 	bl	8010e5e <__multadd>
 80104c4:	4681      	mov	r9, r0
 80104c6:	4606      	mov	r6, r0
 80104c8:	9505      	str	r5, [sp, #20]
 80104ca:	e776      	b.n	80103ba <_dtoa_r+0x992>
 80104cc:	f000 fcc7 	bl	8010e5e <__multadd>
 80104d0:	4631      	mov	r1, r6
 80104d2:	4681      	mov	r9, r0
 80104d4:	2300      	movs	r3, #0
 80104d6:	220a      	movs	r2, #10
 80104d8:	4620      	mov	r0, r4
 80104da:	f000 fcc0 	bl	8010e5e <__multadd>
 80104de:	4606      	mov	r6, r0
 80104e0:	e7f2      	b.n	80104c8 <_dtoa_r+0xaa0>
 80104e2:	f04f 0900 	mov.w	r9, #0
 80104e6:	2201      	movs	r2, #1
 80104e8:	9904      	ldr	r1, [sp, #16]
 80104ea:	4620      	mov	r0, r4
 80104ec:	f000 fe6c 	bl	80111c8 <__lshift>
 80104f0:	4639      	mov	r1, r7
 80104f2:	9004      	str	r0, [sp, #16]
 80104f4:	f000 febc 	bl	8011270 <__mcmp>
 80104f8:	2800      	cmp	r0, #0
 80104fa:	dcb6      	bgt.n	801046a <_dtoa_r+0xa42>
 80104fc:	d102      	bne.n	8010504 <_dtoa_r+0xadc>
 80104fe:	f018 0f01 	tst.w	r8, #1
 8010502:	d1b2      	bne.n	801046a <_dtoa_r+0xa42>
 8010504:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8010508:	2b30      	cmp	r3, #48	; 0x30
 801050a:	f105 32ff 	add.w	r2, r5, #4294967295
 801050e:	f47f af0a 	bne.w	8010326 <_dtoa_r+0x8fe>
 8010512:	4615      	mov	r5, r2
 8010514:	e7f6      	b.n	8010504 <_dtoa_r+0xadc>
 8010516:	4593      	cmp	fp, r2
 8010518:	d105      	bne.n	8010526 <_dtoa_r+0xafe>
 801051a:	2331      	movs	r3, #49	; 0x31
 801051c:	f10a 0a01 	add.w	sl, sl, #1
 8010520:	f88b 3000 	strb.w	r3, [fp]
 8010524:	e6ff      	b.n	8010326 <_dtoa_r+0x8fe>
 8010526:	4615      	mov	r5, r2
 8010528:	e79f      	b.n	801046a <_dtoa_r+0xa42>
 801052a:	f8df b064 	ldr.w	fp, [pc, #100]	; 8010590 <_dtoa_r+0xb68>
 801052e:	e007      	b.n	8010540 <_dtoa_r+0xb18>
 8010530:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8010532:	f8df b060 	ldr.w	fp, [pc, #96]	; 8010594 <_dtoa_r+0xb6c>
 8010536:	b11b      	cbz	r3, 8010540 <_dtoa_r+0xb18>
 8010538:	f10b 0308 	add.w	r3, fp, #8
 801053c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801053e:	6013      	str	r3, [r2, #0]
 8010540:	4658      	mov	r0, fp
 8010542:	b017      	add	sp, #92	; 0x5c
 8010544:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010548:	9b06      	ldr	r3, [sp, #24]
 801054a:	2b01      	cmp	r3, #1
 801054c:	f77f ae35 	ble.w	80101ba <_dtoa_r+0x792>
 8010550:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8010552:	9307      	str	r3, [sp, #28]
 8010554:	e649      	b.n	80101ea <_dtoa_r+0x7c2>
 8010556:	9b02      	ldr	r3, [sp, #8]
 8010558:	2b00      	cmp	r3, #0
 801055a:	dc03      	bgt.n	8010564 <_dtoa_r+0xb3c>
 801055c:	9b06      	ldr	r3, [sp, #24]
 801055e:	2b02      	cmp	r3, #2
 8010560:	f73f aecc 	bgt.w	80102fc <_dtoa_r+0x8d4>
 8010564:	465d      	mov	r5, fp
 8010566:	4639      	mov	r1, r7
 8010568:	9804      	ldr	r0, [sp, #16]
 801056a:	f7ff f9cf 	bl	800f90c <quorem>
 801056e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8010572:	f805 8b01 	strb.w	r8, [r5], #1
 8010576:	9a02      	ldr	r2, [sp, #8]
 8010578:	eba5 030b 	sub.w	r3, r5, fp
 801057c:	429a      	cmp	r2, r3
 801057e:	ddb0      	ble.n	80104e2 <_dtoa_r+0xaba>
 8010580:	2300      	movs	r3, #0
 8010582:	220a      	movs	r2, #10
 8010584:	9904      	ldr	r1, [sp, #16]
 8010586:	4620      	mov	r0, r4
 8010588:	f000 fc69 	bl	8010e5e <__multadd>
 801058c:	9004      	str	r0, [sp, #16]
 801058e:	e7ea      	b.n	8010566 <_dtoa_r+0xb3e>
 8010590:	0801224c 	.word	0x0801224c
 8010594:	080122c8 	.word	0x080122c8

08010598 <std>:
 8010598:	2300      	movs	r3, #0
 801059a:	b510      	push	{r4, lr}
 801059c:	4604      	mov	r4, r0
 801059e:	e9c0 3300 	strd	r3, r3, [r0]
 80105a2:	6083      	str	r3, [r0, #8]
 80105a4:	8181      	strh	r1, [r0, #12]
 80105a6:	6643      	str	r3, [r0, #100]	; 0x64
 80105a8:	81c2      	strh	r2, [r0, #14]
 80105aa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80105ae:	6183      	str	r3, [r0, #24]
 80105b0:	4619      	mov	r1, r3
 80105b2:	2208      	movs	r2, #8
 80105b4:	305c      	adds	r0, #92	; 0x5c
 80105b6:	f7fd fbbe 	bl	800dd36 <memset>
 80105ba:	4b05      	ldr	r3, [pc, #20]	; (80105d0 <std+0x38>)
 80105bc:	6263      	str	r3, [r4, #36]	; 0x24
 80105be:	4b05      	ldr	r3, [pc, #20]	; (80105d4 <std+0x3c>)
 80105c0:	62a3      	str	r3, [r4, #40]	; 0x28
 80105c2:	4b05      	ldr	r3, [pc, #20]	; (80105d8 <std+0x40>)
 80105c4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80105c6:	4b05      	ldr	r3, [pc, #20]	; (80105dc <std+0x44>)
 80105c8:	6224      	str	r4, [r4, #32]
 80105ca:	6323      	str	r3, [r4, #48]	; 0x30
 80105cc:	bd10      	pop	{r4, pc}
 80105ce:	bf00      	nop
 80105d0:	08011b09 	.word	0x08011b09
 80105d4:	08011b2b 	.word	0x08011b2b
 80105d8:	08011b63 	.word	0x08011b63
 80105dc:	08011b87 	.word	0x08011b87

080105e0 <_cleanup_r>:
 80105e0:	4901      	ldr	r1, [pc, #4]	; (80105e8 <_cleanup_r+0x8>)
 80105e2:	f000 b885 	b.w	80106f0 <_fwalk_reent>
 80105e6:	bf00      	nop
 80105e8:	08011ea1 	.word	0x08011ea1

080105ec <__sfmoreglue>:
 80105ec:	b570      	push	{r4, r5, r6, lr}
 80105ee:	1e4a      	subs	r2, r1, #1
 80105f0:	2568      	movs	r5, #104	; 0x68
 80105f2:	4355      	muls	r5, r2
 80105f4:	460e      	mov	r6, r1
 80105f6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80105fa:	f7fd fbf3 	bl	800dde4 <_malloc_r>
 80105fe:	4604      	mov	r4, r0
 8010600:	b140      	cbz	r0, 8010614 <__sfmoreglue+0x28>
 8010602:	2100      	movs	r1, #0
 8010604:	e9c0 1600 	strd	r1, r6, [r0]
 8010608:	300c      	adds	r0, #12
 801060a:	60a0      	str	r0, [r4, #8]
 801060c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8010610:	f7fd fb91 	bl	800dd36 <memset>
 8010614:	4620      	mov	r0, r4
 8010616:	bd70      	pop	{r4, r5, r6, pc}

08010618 <__sinit>:
 8010618:	6983      	ldr	r3, [r0, #24]
 801061a:	b510      	push	{r4, lr}
 801061c:	4604      	mov	r4, r0
 801061e:	bb33      	cbnz	r3, 801066e <__sinit+0x56>
 8010620:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8010624:	6503      	str	r3, [r0, #80]	; 0x50
 8010626:	4b12      	ldr	r3, [pc, #72]	; (8010670 <__sinit+0x58>)
 8010628:	4a12      	ldr	r2, [pc, #72]	; (8010674 <__sinit+0x5c>)
 801062a:	681b      	ldr	r3, [r3, #0]
 801062c:	6282      	str	r2, [r0, #40]	; 0x28
 801062e:	4298      	cmp	r0, r3
 8010630:	bf04      	itt	eq
 8010632:	2301      	moveq	r3, #1
 8010634:	6183      	streq	r3, [r0, #24]
 8010636:	f000 f81f 	bl	8010678 <__sfp>
 801063a:	6060      	str	r0, [r4, #4]
 801063c:	4620      	mov	r0, r4
 801063e:	f000 f81b 	bl	8010678 <__sfp>
 8010642:	60a0      	str	r0, [r4, #8]
 8010644:	4620      	mov	r0, r4
 8010646:	f000 f817 	bl	8010678 <__sfp>
 801064a:	2200      	movs	r2, #0
 801064c:	60e0      	str	r0, [r4, #12]
 801064e:	2104      	movs	r1, #4
 8010650:	6860      	ldr	r0, [r4, #4]
 8010652:	f7ff ffa1 	bl	8010598 <std>
 8010656:	2201      	movs	r2, #1
 8010658:	2109      	movs	r1, #9
 801065a:	68a0      	ldr	r0, [r4, #8]
 801065c:	f7ff ff9c 	bl	8010598 <std>
 8010660:	2202      	movs	r2, #2
 8010662:	2112      	movs	r1, #18
 8010664:	68e0      	ldr	r0, [r4, #12]
 8010666:	f7ff ff97 	bl	8010598 <std>
 801066a:	2301      	movs	r3, #1
 801066c:	61a3      	str	r3, [r4, #24]
 801066e:	bd10      	pop	{r4, pc}
 8010670:	08012238 	.word	0x08012238
 8010674:	080105e1 	.word	0x080105e1

08010678 <__sfp>:
 8010678:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801067a:	4b1b      	ldr	r3, [pc, #108]	; (80106e8 <__sfp+0x70>)
 801067c:	681e      	ldr	r6, [r3, #0]
 801067e:	69b3      	ldr	r3, [r6, #24]
 8010680:	4607      	mov	r7, r0
 8010682:	b913      	cbnz	r3, 801068a <__sfp+0x12>
 8010684:	4630      	mov	r0, r6
 8010686:	f7ff ffc7 	bl	8010618 <__sinit>
 801068a:	3648      	adds	r6, #72	; 0x48
 801068c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8010690:	3b01      	subs	r3, #1
 8010692:	d503      	bpl.n	801069c <__sfp+0x24>
 8010694:	6833      	ldr	r3, [r6, #0]
 8010696:	b133      	cbz	r3, 80106a6 <__sfp+0x2e>
 8010698:	6836      	ldr	r6, [r6, #0]
 801069a:	e7f7      	b.n	801068c <__sfp+0x14>
 801069c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80106a0:	b16d      	cbz	r5, 80106be <__sfp+0x46>
 80106a2:	3468      	adds	r4, #104	; 0x68
 80106a4:	e7f4      	b.n	8010690 <__sfp+0x18>
 80106a6:	2104      	movs	r1, #4
 80106a8:	4638      	mov	r0, r7
 80106aa:	f7ff ff9f 	bl	80105ec <__sfmoreglue>
 80106ae:	6030      	str	r0, [r6, #0]
 80106b0:	2800      	cmp	r0, #0
 80106b2:	d1f1      	bne.n	8010698 <__sfp+0x20>
 80106b4:	230c      	movs	r3, #12
 80106b6:	603b      	str	r3, [r7, #0]
 80106b8:	4604      	mov	r4, r0
 80106ba:	4620      	mov	r0, r4
 80106bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80106be:	4b0b      	ldr	r3, [pc, #44]	; (80106ec <__sfp+0x74>)
 80106c0:	6665      	str	r5, [r4, #100]	; 0x64
 80106c2:	e9c4 5500 	strd	r5, r5, [r4]
 80106c6:	60a5      	str	r5, [r4, #8]
 80106c8:	e9c4 3503 	strd	r3, r5, [r4, #12]
 80106cc:	e9c4 5505 	strd	r5, r5, [r4, #20]
 80106d0:	2208      	movs	r2, #8
 80106d2:	4629      	mov	r1, r5
 80106d4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80106d8:	f7fd fb2d 	bl	800dd36 <memset>
 80106dc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80106e0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80106e4:	e7e9      	b.n	80106ba <__sfp+0x42>
 80106e6:	bf00      	nop
 80106e8:	08012238 	.word	0x08012238
 80106ec:	ffff0001 	.word	0xffff0001

080106f0 <_fwalk_reent>:
 80106f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80106f4:	4680      	mov	r8, r0
 80106f6:	4689      	mov	r9, r1
 80106f8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80106fc:	2600      	movs	r6, #0
 80106fe:	b914      	cbnz	r4, 8010706 <_fwalk_reent+0x16>
 8010700:	4630      	mov	r0, r6
 8010702:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010706:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 801070a:	3f01      	subs	r7, #1
 801070c:	d501      	bpl.n	8010712 <_fwalk_reent+0x22>
 801070e:	6824      	ldr	r4, [r4, #0]
 8010710:	e7f5      	b.n	80106fe <_fwalk_reent+0xe>
 8010712:	89ab      	ldrh	r3, [r5, #12]
 8010714:	2b01      	cmp	r3, #1
 8010716:	d907      	bls.n	8010728 <_fwalk_reent+0x38>
 8010718:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801071c:	3301      	adds	r3, #1
 801071e:	d003      	beq.n	8010728 <_fwalk_reent+0x38>
 8010720:	4629      	mov	r1, r5
 8010722:	4640      	mov	r0, r8
 8010724:	47c8      	blx	r9
 8010726:	4306      	orrs	r6, r0
 8010728:	3568      	adds	r5, #104	; 0x68
 801072a:	e7ee      	b.n	801070a <_fwalk_reent+0x1a>

0801072c <rshift>:
 801072c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801072e:	6906      	ldr	r6, [r0, #16]
 8010730:	114b      	asrs	r3, r1, #5
 8010732:	429e      	cmp	r6, r3
 8010734:	f100 0414 	add.w	r4, r0, #20
 8010738:	dd30      	ble.n	801079c <rshift+0x70>
 801073a:	f011 011f 	ands.w	r1, r1, #31
 801073e:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 8010742:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 8010746:	d108      	bne.n	801075a <rshift+0x2e>
 8010748:	4621      	mov	r1, r4
 801074a:	42b2      	cmp	r2, r6
 801074c:	460b      	mov	r3, r1
 801074e:	d211      	bcs.n	8010774 <rshift+0x48>
 8010750:	f852 3b04 	ldr.w	r3, [r2], #4
 8010754:	f841 3b04 	str.w	r3, [r1], #4
 8010758:	e7f7      	b.n	801074a <rshift+0x1e>
 801075a:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 801075e:	f1c1 0c20 	rsb	ip, r1, #32
 8010762:	40cd      	lsrs	r5, r1
 8010764:	3204      	adds	r2, #4
 8010766:	4623      	mov	r3, r4
 8010768:	42b2      	cmp	r2, r6
 801076a:	4617      	mov	r7, r2
 801076c:	d30c      	bcc.n	8010788 <rshift+0x5c>
 801076e:	601d      	str	r5, [r3, #0]
 8010770:	b105      	cbz	r5, 8010774 <rshift+0x48>
 8010772:	3304      	adds	r3, #4
 8010774:	1b1a      	subs	r2, r3, r4
 8010776:	42a3      	cmp	r3, r4
 8010778:	ea4f 02a2 	mov.w	r2, r2, asr #2
 801077c:	bf08      	it	eq
 801077e:	2300      	moveq	r3, #0
 8010780:	6102      	str	r2, [r0, #16]
 8010782:	bf08      	it	eq
 8010784:	6143      	streq	r3, [r0, #20]
 8010786:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010788:	683f      	ldr	r7, [r7, #0]
 801078a:	fa07 f70c 	lsl.w	r7, r7, ip
 801078e:	433d      	orrs	r5, r7
 8010790:	f843 5b04 	str.w	r5, [r3], #4
 8010794:	f852 5b04 	ldr.w	r5, [r2], #4
 8010798:	40cd      	lsrs	r5, r1
 801079a:	e7e5      	b.n	8010768 <rshift+0x3c>
 801079c:	4623      	mov	r3, r4
 801079e:	e7e9      	b.n	8010774 <rshift+0x48>

080107a0 <__hexdig_fun>:
 80107a0:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80107a4:	2b09      	cmp	r3, #9
 80107a6:	d802      	bhi.n	80107ae <__hexdig_fun+0xe>
 80107a8:	3820      	subs	r0, #32
 80107aa:	b2c0      	uxtb	r0, r0
 80107ac:	4770      	bx	lr
 80107ae:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 80107b2:	2b05      	cmp	r3, #5
 80107b4:	d801      	bhi.n	80107ba <__hexdig_fun+0x1a>
 80107b6:	3847      	subs	r0, #71	; 0x47
 80107b8:	e7f7      	b.n	80107aa <__hexdig_fun+0xa>
 80107ba:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 80107be:	2b05      	cmp	r3, #5
 80107c0:	d801      	bhi.n	80107c6 <__hexdig_fun+0x26>
 80107c2:	3827      	subs	r0, #39	; 0x27
 80107c4:	e7f1      	b.n	80107aa <__hexdig_fun+0xa>
 80107c6:	2000      	movs	r0, #0
 80107c8:	4770      	bx	lr

080107ca <__gethex>:
 80107ca:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80107ce:	b08b      	sub	sp, #44	; 0x2c
 80107d0:	468a      	mov	sl, r1
 80107d2:	9002      	str	r0, [sp, #8]
 80107d4:	9816      	ldr	r0, [sp, #88]	; 0x58
 80107d6:	9306      	str	r3, [sp, #24]
 80107d8:	4690      	mov	r8, r2
 80107da:	f000 fad0 	bl	8010d7e <__localeconv_l>
 80107de:	6803      	ldr	r3, [r0, #0]
 80107e0:	9303      	str	r3, [sp, #12]
 80107e2:	4618      	mov	r0, r3
 80107e4:	f7ef fcf4 	bl	80001d0 <strlen>
 80107e8:	9b03      	ldr	r3, [sp, #12]
 80107ea:	9001      	str	r0, [sp, #4]
 80107ec:	4403      	add	r3, r0
 80107ee:	f04f 0b00 	mov.w	fp, #0
 80107f2:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 80107f6:	9307      	str	r3, [sp, #28]
 80107f8:	f8da 3000 	ldr.w	r3, [sl]
 80107fc:	3302      	adds	r3, #2
 80107fe:	461f      	mov	r7, r3
 8010800:	f813 0b01 	ldrb.w	r0, [r3], #1
 8010804:	2830      	cmp	r0, #48	; 0x30
 8010806:	d06c      	beq.n	80108e2 <__gethex+0x118>
 8010808:	f7ff ffca 	bl	80107a0 <__hexdig_fun>
 801080c:	4604      	mov	r4, r0
 801080e:	2800      	cmp	r0, #0
 8010810:	d16a      	bne.n	80108e8 <__gethex+0x11e>
 8010812:	9a01      	ldr	r2, [sp, #4]
 8010814:	9903      	ldr	r1, [sp, #12]
 8010816:	4638      	mov	r0, r7
 8010818:	f001 f9b9 	bl	8011b8e <strncmp>
 801081c:	2800      	cmp	r0, #0
 801081e:	d166      	bne.n	80108ee <__gethex+0x124>
 8010820:	9b01      	ldr	r3, [sp, #4]
 8010822:	5cf8      	ldrb	r0, [r7, r3]
 8010824:	18fe      	adds	r6, r7, r3
 8010826:	f7ff ffbb 	bl	80107a0 <__hexdig_fun>
 801082a:	2800      	cmp	r0, #0
 801082c:	d062      	beq.n	80108f4 <__gethex+0x12a>
 801082e:	4633      	mov	r3, r6
 8010830:	7818      	ldrb	r0, [r3, #0]
 8010832:	2830      	cmp	r0, #48	; 0x30
 8010834:	461f      	mov	r7, r3
 8010836:	f103 0301 	add.w	r3, r3, #1
 801083a:	d0f9      	beq.n	8010830 <__gethex+0x66>
 801083c:	f7ff ffb0 	bl	80107a0 <__hexdig_fun>
 8010840:	fab0 f580 	clz	r5, r0
 8010844:	096d      	lsrs	r5, r5, #5
 8010846:	4634      	mov	r4, r6
 8010848:	f04f 0b01 	mov.w	fp, #1
 801084c:	463a      	mov	r2, r7
 801084e:	4616      	mov	r6, r2
 8010850:	3201      	adds	r2, #1
 8010852:	7830      	ldrb	r0, [r6, #0]
 8010854:	f7ff ffa4 	bl	80107a0 <__hexdig_fun>
 8010858:	2800      	cmp	r0, #0
 801085a:	d1f8      	bne.n	801084e <__gethex+0x84>
 801085c:	9a01      	ldr	r2, [sp, #4]
 801085e:	9903      	ldr	r1, [sp, #12]
 8010860:	4630      	mov	r0, r6
 8010862:	f001 f994 	bl	8011b8e <strncmp>
 8010866:	b950      	cbnz	r0, 801087e <__gethex+0xb4>
 8010868:	b954      	cbnz	r4, 8010880 <__gethex+0xb6>
 801086a:	9b01      	ldr	r3, [sp, #4]
 801086c:	18f4      	adds	r4, r6, r3
 801086e:	4622      	mov	r2, r4
 8010870:	4616      	mov	r6, r2
 8010872:	3201      	adds	r2, #1
 8010874:	7830      	ldrb	r0, [r6, #0]
 8010876:	f7ff ff93 	bl	80107a0 <__hexdig_fun>
 801087a:	2800      	cmp	r0, #0
 801087c:	d1f8      	bne.n	8010870 <__gethex+0xa6>
 801087e:	b10c      	cbz	r4, 8010884 <__gethex+0xba>
 8010880:	1ba4      	subs	r4, r4, r6
 8010882:	00a4      	lsls	r4, r4, #2
 8010884:	7833      	ldrb	r3, [r6, #0]
 8010886:	2b50      	cmp	r3, #80	; 0x50
 8010888:	d001      	beq.n	801088e <__gethex+0xc4>
 801088a:	2b70      	cmp	r3, #112	; 0x70
 801088c:	d140      	bne.n	8010910 <__gethex+0x146>
 801088e:	7873      	ldrb	r3, [r6, #1]
 8010890:	2b2b      	cmp	r3, #43	; 0x2b
 8010892:	d031      	beq.n	80108f8 <__gethex+0x12e>
 8010894:	2b2d      	cmp	r3, #45	; 0x2d
 8010896:	d033      	beq.n	8010900 <__gethex+0x136>
 8010898:	1c71      	adds	r1, r6, #1
 801089a:	f04f 0900 	mov.w	r9, #0
 801089e:	7808      	ldrb	r0, [r1, #0]
 80108a0:	f7ff ff7e 	bl	80107a0 <__hexdig_fun>
 80108a4:	1e43      	subs	r3, r0, #1
 80108a6:	b2db      	uxtb	r3, r3
 80108a8:	2b18      	cmp	r3, #24
 80108aa:	d831      	bhi.n	8010910 <__gethex+0x146>
 80108ac:	f1a0 0210 	sub.w	r2, r0, #16
 80108b0:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80108b4:	f7ff ff74 	bl	80107a0 <__hexdig_fun>
 80108b8:	1e43      	subs	r3, r0, #1
 80108ba:	b2db      	uxtb	r3, r3
 80108bc:	2b18      	cmp	r3, #24
 80108be:	d922      	bls.n	8010906 <__gethex+0x13c>
 80108c0:	f1b9 0f00 	cmp.w	r9, #0
 80108c4:	d000      	beq.n	80108c8 <__gethex+0xfe>
 80108c6:	4252      	negs	r2, r2
 80108c8:	4414      	add	r4, r2
 80108ca:	f8ca 1000 	str.w	r1, [sl]
 80108ce:	b30d      	cbz	r5, 8010914 <__gethex+0x14a>
 80108d0:	f1bb 0f00 	cmp.w	fp, #0
 80108d4:	bf0c      	ite	eq
 80108d6:	2706      	moveq	r7, #6
 80108d8:	2700      	movne	r7, #0
 80108da:	4638      	mov	r0, r7
 80108dc:	b00b      	add	sp, #44	; 0x2c
 80108de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80108e2:	f10b 0b01 	add.w	fp, fp, #1
 80108e6:	e78a      	b.n	80107fe <__gethex+0x34>
 80108e8:	2500      	movs	r5, #0
 80108ea:	462c      	mov	r4, r5
 80108ec:	e7ae      	b.n	801084c <__gethex+0x82>
 80108ee:	463e      	mov	r6, r7
 80108f0:	2501      	movs	r5, #1
 80108f2:	e7c7      	b.n	8010884 <__gethex+0xba>
 80108f4:	4604      	mov	r4, r0
 80108f6:	e7fb      	b.n	80108f0 <__gethex+0x126>
 80108f8:	f04f 0900 	mov.w	r9, #0
 80108fc:	1cb1      	adds	r1, r6, #2
 80108fe:	e7ce      	b.n	801089e <__gethex+0xd4>
 8010900:	f04f 0901 	mov.w	r9, #1
 8010904:	e7fa      	b.n	80108fc <__gethex+0x132>
 8010906:	230a      	movs	r3, #10
 8010908:	fb03 0202 	mla	r2, r3, r2, r0
 801090c:	3a10      	subs	r2, #16
 801090e:	e7cf      	b.n	80108b0 <__gethex+0xe6>
 8010910:	4631      	mov	r1, r6
 8010912:	e7da      	b.n	80108ca <__gethex+0x100>
 8010914:	1bf3      	subs	r3, r6, r7
 8010916:	3b01      	subs	r3, #1
 8010918:	4629      	mov	r1, r5
 801091a:	2b07      	cmp	r3, #7
 801091c:	dc49      	bgt.n	80109b2 <__gethex+0x1e8>
 801091e:	9802      	ldr	r0, [sp, #8]
 8010920:	f000 fa52 	bl	8010dc8 <_Balloc>
 8010924:	9b01      	ldr	r3, [sp, #4]
 8010926:	f100 0914 	add.w	r9, r0, #20
 801092a:	f04f 0b00 	mov.w	fp, #0
 801092e:	f1c3 0301 	rsb	r3, r3, #1
 8010932:	4605      	mov	r5, r0
 8010934:	f8cd 9010 	str.w	r9, [sp, #16]
 8010938:	46da      	mov	sl, fp
 801093a:	9308      	str	r3, [sp, #32]
 801093c:	42b7      	cmp	r7, r6
 801093e:	d33b      	bcc.n	80109b8 <__gethex+0x1ee>
 8010940:	9804      	ldr	r0, [sp, #16]
 8010942:	f840 ab04 	str.w	sl, [r0], #4
 8010946:	eba0 0009 	sub.w	r0, r0, r9
 801094a:	1080      	asrs	r0, r0, #2
 801094c:	6128      	str	r0, [r5, #16]
 801094e:	0147      	lsls	r7, r0, #5
 8010950:	4650      	mov	r0, sl
 8010952:	f000 fafd 	bl	8010f50 <__hi0bits>
 8010956:	f8d8 6000 	ldr.w	r6, [r8]
 801095a:	1a3f      	subs	r7, r7, r0
 801095c:	42b7      	cmp	r7, r6
 801095e:	dd64      	ble.n	8010a2a <__gethex+0x260>
 8010960:	1bbf      	subs	r7, r7, r6
 8010962:	4639      	mov	r1, r7
 8010964:	4628      	mov	r0, r5
 8010966:	f000 fe0d 	bl	8011584 <__any_on>
 801096a:	4682      	mov	sl, r0
 801096c:	b178      	cbz	r0, 801098e <__gethex+0x1c4>
 801096e:	1e7b      	subs	r3, r7, #1
 8010970:	1159      	asrs	r1, r3, #5
 8010972:	f003 021f 	and.w	r2, r3, #31
 8010976:	f04f 0a01 	mov.w	sl, #1
 801097a:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 801097e:	fa0a f202 	lsl.w	r2, sl, r2
 8010982:	420a      	tst	r2, r1
 8010984:	d003      	beq.n	801098e <__gethex+0x1c4>
 8010986:	4553      	cmp	r3, sl
 8010988:	dc46      	bgt.n	8010a18 <__gethex+0x24e>
 801098a:	f04f 0a02 	mov.w	sl, #2
 801098e:	4639      	mov	r1, r7
 8010990:	4628      	mov	r0, r5
 8010992:	f7ff fecb 	bl	801072c <rshift>
 8010996:	443c      	add	r4, r7
 8010998:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801099c:	42a3      	cmp	r3, r4
 801099e:	da52      	bge.n	8010a46 <__gethex+0x27c>
 80109a0:	4629      	mov	r1, r5
 80109a2:	9802      	ldr	r0, [sp, #8]
 80109a4:	f000 fa44 	bl	8010e30 <_Bfree>
 80109a8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80109aa:	2300      	movs	r3, #0
 80109ac:	6013      	str	r3, [r2, #0]
 80109ae:	27a3      	movs	r7, #163	; 0xa3
 80109b0:	e793      	b.n	80108da <__gethex+0x110>
 80109b2:	3101      	adds	r1, #1
 80109b4:	105b      	asrs	r3, r3, #1
 80109b6:	e7b0      	b.n	801091a <__gethex+0x150>
 80109b8:	1e73      	subs	r3, r6, #1
 80109ba:	9305      	str	r3, [sp, #20]
 80109bc:	9a07      	ldr	r2, [sp, #28]
 80109be:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80109c2:	4293      	cmp	r3, r2
 80109c4:	d018      	beq.n	80109f8 <__gethex+0x22e>
 80109c6:	f1bb 0f20 	cmp.w	fp, #32
 80109ca:	d107      	bne.n	80109dc <__gethex+0x212>
 80109cc:	9b04      	ldr	r3, [sp, #16]
 80109ce:	f8c3 a000 	str.w	sl, [r3]
 80109d2:	3304      	adds	r3, #4
 80109d4:	f04f 0a00 	mov.w	sl, #0
 80109d8:	9304      	str	r3, [sp, #16]
 80109da:	46d3      	mov	fp, sl
 80109dc:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 80109e0:	f7ff fede 	bl	80107a0 <__hexdig_fun>
 80109e4:	f000 000f 	and.w	r0, r0, #15
 80109e8:	fa00 f00b 	lsl.w	r0, r0, fp
 80109ec:	ea4a 0a00 	orr.w	sl, sl, r0
 80109f0:	f10b 0b04 	add.w	fp, fp, #4
 80109f4:	9b05      	ldr	r3, [sp, #20]
 80109f6:	e00d      	b.n	8010a14 <__gethex+0x24a>
 80109f8:	9b05      	ldr	r3, [sp, #20]
 80109fa:	9a08      	ldr	r2, [sp, #32]
 80109fc:	4413      	add	r3, r2
 80109fe:	42bb      	cmp	r3, r7
 8010a00:	d3e1      	bcc.n	80109c6 <__gethex+0x1fc>
 8010a02:	4618      	mov	r0, r3
 8010a04:	9a01      	ldr	r2, [sp, #4]
 8010a06:	9903      	ldr	r1, [sp, #12]
 8010a08:	9309      	str	r3, [sp, #36]	; 0x24
 8010a0a:	f001 f8c0 	bl	8011b8e <strncmp>
 8010a0e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010a10:	2800      	cmp	r0, #0
 8010a12:	d1d8      	bne.n	80109c6 <__gethex+0x1fc>
 8010a14:	461e      	mov	r6, r3
 8010a16:	e791      	b.n	801093c <__gethex+0x172>
 8010a18:	1eb9      	subs	r1, r7, #2
 8010a1a:	4628      	mov	r0, r5
 8010a1c:	f000 fdb2 	bl	8011584 <__any_on>
 8010a20:	2800      	cmp	r0, #0
 8010a22:	d0b2      	beq.n	801098a <__gethex+0x1c0>
 8010a24:	f04f 0a03 	mov.w	sl, #3
 8010a28:	e7b1      	b.n	801098e <__gethex+0x1c4>
 8010a2a:	da09      	bge.n	8010a40 <__gethex+0x276>
 8010a2c:	1bf7      	subs	r7, r6, r7
 8010a2e:	4629      	mov	r1, r5
 8010a30:	463a      	mov	r2, r7
 8010a32:	9802      	ldr	r0, [sp, #8]
 8010a34:	f000 fbc8 	bl	80111c8 <__lshift>
 8010a38:	1be4      	subs	r4, r4, r7
 8010a3a:	4605      	mov	r5, r0
 8010a3c:	f100 0914 	add.w	r9, r0, #20
 8010a40:	f04f 0a00 	mov.w	sl, #0
 8010a44:	e7a8      	b.n	8010998 <__gethex+0x1ce>
 8010a46:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8010a4a:	42a0      	cmp	r0, r4
 8010a4c:	dd6a      	ble.n	8010b24 <__gethex+0x35a>
 8010a4e:	1b04      	subs	r4, r0, r4
 8010a50:	42a6      	cmp	r6, r4
 8010a52:	dc2e      	bgt.n	8010ab2 <__gethex+0x2e8>
 8010a54:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8010a58:	2b02      	cmp	r3, #2
 8010a5a:	d022      	beq.n	8010aa2 <__gethex+0x2d8>
 8010a5c:	2b03      	cmp	r3, #3
 8010a5e:	d024      	beq.n	8010aaa <__gethex+0x2e0>
 8010a60:	2b01      	cmp	r3, #1
 8010a62:	d115      	bne.n	8010a90 <__gethex+0x2c6>
 8010a64:	42a6      	cmp	r6, r4
 8010a66:	d113      	bne.n	8010a90 <__gethex+0x2c6>
 8010a68:	2e01      	cmp	r6, #1
 8010a6a:	dc0b      	bgt.n	8010a84 <__gethex+0x2ba>
 8010a6c:	9a06      	ldr	r2, [sp, #24]
 8010a6e:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8010a72:	6013      	str	r3, [r2, #0]
 8010a74:	2301      	movs	r3, #1
 8010a76:	612b      	str	r3, [r5, #16]
 8010a78:	f8c9 3000 	str.w	r3, [r9]
 8010a7c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8010a7e:	2762      	movs	r7, #98	; 0x62
 8010a80:	601d      	str	r5, [r3, #0]
 8010a82:	e72a      	b.n	80108da <__gethex+0x110>
 8010a84:	1e71      	subs	r1, r6, #1
 8010a86:	4628      	mov	r0, r5
 8010a88:	f000 fd7c 	bl	8011584 <__any_on>
 8010a8c:	2800      	cmp	r0, #0
 8010a8e:	d1ed      	bne.n	8010a6c <__gethex+0x2a2>
 8010a90:	4629      	mov	r1, r5
 8010a92:	9802      	ldr	r0, [sp, #8]
 8010a94:	f000 f9cc 	bl	8010e30 <_Bfree>
 8010a98:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8010a9a:	2300      	movs	r3, #0
 8010a9c:	6013      	str	r3, [r2, #0]
 8010a9e:	2750      	movs	r7, #80	; 0x50
 8010aa0:	e71b      	b.n	80108da <__gethex+0x110>
 8010aa2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8010aa4:	2b00      	cmp	r3, #0
 8010aa6:	d0e1      	beq.n	8010a6c <__gethex+0x2a2>
 8010aa8:	e7f2      	b.n	8010a90 <__gethex+0x2c6>
 8010aaa:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8010aac:	2b00      	cmp	r3, #0
 8010aae:	d1dd      	bne.n	8010a6c <__gethex+0x2a2>
 8010ab0:	e7ee      	b.n	8010a90 <__gethex+0x2c6>
 8010ab2:	1e67      	subs	r7, r4, #1
 8010ab4:	f1ba 0f00 	cmp.w	sl, #0
 8010ab8:	d131      	bne.n	8010b1e <__gethex+0x354>
 8010aba:	b127      	cbz	r7, 8010ac6 <__gethex+0x2fc>
 8010abc:	4639      	mov	r1, r7
 8010abe:	4628      	mov	r0, r5
 8010ac0:	f000 fd60 	bl	8011584 <__any_on>
 8010ac4:	4682      	mov	sl, r0
 8010ac6:	117a      	asrs	r2, r7, #5
 8010ac8:	2301      	movs	r3, #1
 8010aca:	f007 071f 	and.w	r7, r7, #31
 8010ace:	fa03 f707 	lsl.w	r7, r3, r7
 8010ad2:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 8010ad6:	4621      	mov	r1, r4
 8010ad8:	421f      	tst	r7, r3
 8010ada:	4628      	mov	r0, r5
 8010adc:	bf18      	it	ne
 8010ade:	f04a 0a02 	orrne.w	sl, sl, #2
 8010ae2:	1b36      	subs	r6, r6, r4
 8010ae4:	f7ff fe22 	bl	801072c <rshift>
 8010ae8:	f8d8 4004 	ldr.w	r4, [r8, #4]
 8010aec:	2702      	movs	r7, #2
 8010aee:	f1ba 0f00 	cmp.w	sl, #0
 8010af2:	d048      	beq.n	8010b86 <__gethex+0x3bc>
 8010af4:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8010af8:	2b02      	cmp	r3, #2
 8010afa:	d015      	beq.n	8010b28 <__gethex+0x35e>
 8010afc:	2b03      	cmp	r3, #3
 8010afe:	d017      	beq.n	8010b30 <__gethex+0x366>
 8010b00:	2b01      	cmp	r3, #1
 8010b02:	d109      	bne.n	8010b18 <__gethex+0x34e>
 8010b04:	f01a 0f02 	tst.w	sl, #2
 8010b08:	d006      	beq.n	8010b18 <__gethex+0x34e>
 8010b0a:	f8d9 3000 	ldr.w	r3, [r9]
 8010b0e:	ea4a 0a03 	orr.w	sl, sl, r3
 8010b12:	f01a 0f01 	tst.w	sl, #1
 8010b16:	d10e      	bne.n	8010b36 <__gethex+0x36c>
 8010b18:	f047 0710 	orr.w	r7, r7, #16
 8010b1c:	e033      	b.n	8010b86 <__gethex+0x3bc>
 8010b1e:	f04f 0a01 	mov.w	sl, #1
 8010b22:	e7d0      	b.n	8010ac6 <__gethex+0x2fc>
 8010b24:	2701      	movs	r7, #1
 8010b26:	e7e2      	b.n	8010aee <__gethex+0x324>
 8010b28:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8010b2a:	f1c3 0301 	rsb	r3, r3, #1
 8010b2e:	9315      	str	r3, [sp, #84]	; 0x54
 8010b30:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8010b32:	2b00      	cmp	r3, #0
 8010b34:	d0f0      	beq.n	8010b18 <__gethex+0x34e>
 8010b36:	f8d5 9010 	ldr.w	r9, [r5, #16]
 8010b3a:	f105 0314 	add.w	r3, r5, #20
 8010b3e:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 8010b42:	eb03 010a 	add.w	r1, r3, sl
 8010b46:	f04f 0c00 	mov.w	ip, #0
 8010b4a:	4618      	mov	r0, r3
 8010b4c:	f853 2b04 	ldr.w	r2, [r3], #4
 8010b50:	f1b2 3fff 	cmp.w	r2, #4294967295
 8010b54:	d01c      	beq.n	8010b90 <__gethex+0x3c6>
 8010b56:	3201      	adds	r2, #1
 8010b58:	6002      	str	r2, [r0, #0]
 8010b5a:	2f02      	cmp	r7, #2
 8010b5c:	f105 0314 	add.w	r3, r5, #20
 8010b60:	d138      	bne.n	8010bd4 <__gethex+0x40a>
 8010b62:	f8d8 2000 	ldr.w	r2, [r8]
 8010b66:	3a01      	subs	r2, #1
 8010b68:	42b2      	cmp	r2, r6
 8010b6a:	d10a      	bne.n	8010b82 <__gethex+0x3b8>
 8010b6c:	1171      	asrs	r1, r6, #5
 8010b6e:	2201      	movs	r2, #1
 8010b70:	f006 061f 	and.w	r6, r6, #31
 8010b74:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8010b78:	fa02 f606 	lsl.w	r6, r2, r6
 8010b7c:	421e      	tst	r6, r3
 8010b7e:	bf18      	it	ne
 8010b80:	4617      	movne	r7, r2
 8010b82:	f047 0720 	orr.w	r7, r7, #32
 8010b86:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8010b88:	601d      	str	r5, [r3, #0]
 8010b8a:	9b06      	ldr	r3, [sp, #24]
 8010b8c:	601c      	str	r4, [r3, #0]
 8010b8e:	e6a4      	b.n	80108da <__gethex+0x110>
 8010b90:	4299      	cmp	r1, r3
 8010b92:	f843 cc04 	str.w	ip, [r3, #-4]
 8010b96:	d8d8      	bhi.n	8010b4a <__gethex+0x380>
 8010b98:	68ab      	ldr	r3, [r5, #8]
 8010b9a:	4599      	cmp	r9, r3
 8010b9c:	db12      	blt.n	8010bc4 <__gethex+0x3fa>
 8010b9e:	6869      	ldr	r1, [r5, #4]
 8010ba0:	9802      	ldr	r0, [sp, #8]
 8010ba2:	3101      	adds	r1, #1
 8010ba4:	f000 f910 	bl	8010dc8 <_Balloc>
 8010ba8:	692a      	ldr	r2, [r5, #16]
 8010baa:	3202      	adds	r2, #2
 8010bac:	f105 010c 	add.w	r1, r5, #12
 8010bb0:	4683      	mov	fp, r0
 8010bb2:	0092      	lsls	r2, r2, #2
 8010bb4:	300c      	adds	r0, #12
 8010bb6:	f7fd f8b3 	bl	800dd20 <memcpy>
 8010bba:	4629      	mov	r1, r5
 8010bbc:	9802      	ldr	r0, [sp, #8]
 8010bbe:	f000 f937 	bl	8010e30 <_Bfree>
 8010bc2:	465d      	mov	r5, fp
 8010bc4:	692b      	ldr	r3, [r5, #16]
 8010bc6:	1c5a      	adds	r2, r3, #1
 8010bc8:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8010bcc:	612a      	str	r2, [r5, #16]
 8010bce:	2201      	movs	r2, #1
 8010bd0:	615a      	str	r2, [r3, #20]
 8010bd2:	e7c2      	b.n	8010b5a <__gethex+0x390>
 8010bd4:	692a      	ldr	r2, [r5, #16]
 8010bd6:	454a      	cmp	r2, r9
 8010bd8:	dd0b      	ble.n	8010bf2 <__gethex+0x428>
 8010bda:	2101      	movs	r1, #1
 8010bdc:	4628      	mov	r0, r5
 8010bde:	f7ff fda5 	bl	801072c <rshift>
 8010be2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8010be6:	3401      	adds	r4, #1
 8010be8:	42a3      	cmp	r3, r4
 8010bea:	f6ff aed9 	blt.w	80109a0 <__gethex+0x1d6>
 8010bee:	2701      	movs	r7, #1
 8010bf0:	e7c7      	b.n	8010b82 <__gethex+0x3b8>
 8010bf2:	f016 061f 	ands.w	r6, r6, #31
 8010bf6:	d0fa      	beq.n	8010bee <__gethex+0x424>
 8010bf8:	449a      	add	sl, r3
 8010bfa:	f1c6 0620 	rsb	r6, r6, #32
 8010bfe:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 8010c02:	f000 f9a5 	bl	8010f50 <__hi0bits>
 8010c06:	42b0      	cmp	r0, r6
 8010c08:	dbe7      	blt.n	8010bda <__gethex+0x410>
 8010c0a:	e7f0      	b.n	8010bee <__gethex+0x424>

08010c0c <L_shift>:
 8010c0c:	f1c2 0208 	rsb	r2, r2, #8
 8010c10:	0092      	lsls	r2, r2, #2
 8010c12:	b570      	push	{r4, r5, r6, lr}
 8010c14:	f1c2 0620 	rsb	r6, r2, #32
 8010c18:	6843      	ldr	r3, [r0, #4]
 8010c1a:	6804      	ldr	r4, [r0, #0]
 8010c1c:	fa03 f506 	lsl.w	r5, r3, r6
 8010c20:	432c      	orrs	r4, r5
 8010c22:	40d3      	lsrs	r3, r2
 8010c24:	6004      	str	r4, [r0, #0]
 8010c26:	f840 3f04 	str.w	r3, [r0, #4]!
 8010c2a:	4288      	cmp	r0, r1
 8010c2c:	d3f4      	bcc.n	8010c18 <L_shift+0xc>
 8010c2e:	bd70      	pop	{r4, r5, r6, pc}

08010c30 <__match>:
 8010c30:	b530      	push	{r4, r5, lr}
 8010c32:	6803      	ldr	r3, [r0, #0]
 8010c34:	3301      	adds	r3, #1
 8010c36:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010c3a:	b914      	cbnz	r4, 8010c42 <__match+0x12>
 8010c3c:	6003      	str	r3, [r0, #0]
 8010c3e:	2001      	movs	r0, #1
 8010c40:	bd30      	pop	{r4, r5, pc}
 8010c42:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010c46:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8010c4a:	2d19      	cmp	r5, #25
 8010c4c:	bf98      	it	ls
 8010c4e:	3220      	addls	r2, #32
 8010c50:	42a2      	cmp	r2, r4
 8010c52:	d0f0      	beq.n	8010c36 <__match+0x6>
 8010c54:	2000      	movs	r0, #0
 8010c56:	e7f3      	b.n	8010c40 <__match+0x10>

08010c58 <__hexnan>:
 8010c58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010c5c:	680b      	ldr	r3, [r1, #0]
 8010c5e:	6801      	ldr	r1, [r0, #0]
 8010c60:	115f      	asrs	r7, r3, #5
 8010c62:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 8010c66:	f013 031f 	ands.w	r3, r3, #31
 8010c6a:	b087      	sub	sp, #28
 8010c6c:	bf18      	it	ne
 8010c6e:	3704      	addne	r7, #4
 8010c70:	2500      	movs	r5, #0
 8010c72:	1f3e      	subs	r6, r7, #4
 8010c74:	4682      	mov	sl, r0
 8010c76:	4690      	mov	r8, r2
 8010c78:	9301      	str	r3, [sp, #4]
 8010c7a:	f847 5c04 	str.w	r5, [r7, #-4]
 8010c7e:	46b1      	mov	r9, r6
 8010c80:	4634      	mov	r4, r6
 8010c82:	9502      	str	r5, [sp, #8]
 8010c84:	46ab      	mov	fp, r5
 8010c86:	784a      	ldrb	r2, [r1, #1]
 8010c88:	1c4b      	adds	r3, r1, #1
 8010c8a:	9303      	str	r3, [sp, #12]
 8010c8c:	b342      	cbz	r2, 8010ce0 <__hexnan+0x88>
 8010c8e:	4610      	mov	r0, r2
 8010c90:	9105      	str	r1, [sp, #20]
 8010c92:	9204      	str	r2, [sp, #16]
 8010c94:	f7ff fd84 	bl	80107a0 <__hexdig_fun>
 8010c98:	2800      	cmp	r0, #0
 8010c9a:	d143      	bne.n	8010d24 <__hexnan+0xcc>
 8010c9c:	9a04      	ldr	r2, [sp, #16]
 8010c9e:	9905      	ldr	r1, [sp, #20]
 8010ca0:	2a20      	cmp	r2, #32
 8010ca2:	d818      	bhi.n	8010cd6 <__hexnan+0x7e>
 8010ca4:	9b02      	ldr	r3, [sp, #8]
 8010ca6:	459b      	cmp	fp, r3
 8010ca8:	dd13      	ble.n	8010cd2 <__hexnan+0x7a>
 8010caa:	454c      	cmp	r4, r9
 8010cac:	d206      	bcs.n	8010cbc <__hexnan+0x64>
 8010cae:	2d07      	cmp	r5, #7
 8010cb0:	dc04      	bgt.n	8010cbc <__hexnan+0x64>
 8010cb2:	462a      	mov	r2, r5
 8010cb4:	4649      	mov	r1, r9
 8010cb6:	4620      	mov	r0, r4
 8010cb8:	f7ff ffa8 	bl	8010c0c <L_shift>
 8010cbc:	4544      	cmp	r4, r8
 8010cbe:	d944      	bls.n	8010d4a <__hexnan+0xf2>
 8010cc0:	2300      	movs	r3, #0
 8010cc2:	f1a4 0904 	sub.w	r9, r4, #4
 8010cc6:	f844 3c04 	str.w	r3, [r4, #-4]
 8010cca:	f8cd b008 	str.w	fp, [sp, #8]
 8010cce:	464c      	mov	r4, r9
 8010cd0:	461d      	mov	r5, r3
 8010cd2:	9903      	ldr	r1, [sp, #12]
 8010cd4:	e7d7      	b.n	8010c86 <__hexnan+0x2e>
 8010cd6:	2a29      	cmp	r2, #41	; 0x29
 8010cd8:	d14a      	bne.n	8010d70 <__hexnan+0x118>
 8010cda:	3102      	adds	r1, #2
 8010cdc:	f8ca 1000 	str.w	r1, [sl]
 8010ce0:	f1bb 0f00 	cmp.w	fp, #0
 8010ce4:	d044      	beq.n	8010d70 <__hexnan+0x118>
 8010ce6:	454c      	cmp	r4, r9
 8010ce8:	d206      	bcs.n	8010cf8 <__hexnan+0xa0>
 8010cea:	2d07      	cmp	r5, #7
 8010cec:	dc04      	bgt.n	8010cf8 <__hexnan+0xa0>
 8010cee:	462a      	mov	r2, r5
 8010cf0:	4649      	mov	r1, r9
 8010cf2:	4620      	mov	r0, r4
 8010cf4:	f7ff ff8a 	bl	8010c0c <L_shift>
 8010cf8:	4544      	cmp	r4, r8
 8010cfa:	d928      	bls.n	8010d4e <__hexnan+0xf6>
 8010cfc:	4643      	mov	r3, r8
 8010cfe:	f854 2b04 	ldr.w	r2, [r4], #4
 8010d02:	f843 2b04 	str.w	r2, [r3], #4
 8010d06:	42a6      	cmp	r6, r4
 8010d08:	d2f9      	bcs.n	8010cfe <__hexnan+0xa6>
 8010d0a:	2200      	movs	r2, #0
 8010d0c:	f843 2b04 	str.w	r2, [r3], #4
 8010d10:	429e      	cmp	r6, r3
 8010d12:	d2fb      	bcs.n	8010d0c <__hexnan+0xb4>
 8010d14:	6833      	ldr	r3, [r6, #0]
 8010d16:	b91b      	cbnz	r3, 8010d20 <__hexnan+0xc8>
 8010d18:	4546      	cmp	r6, r8
 8010d1a:	d127      	bne.n	8010d6c <__hexnan+0x114>
 8010d1c:	2301      	movs	r3, #1
 8010d1e:	6033      	str	r3, [r6, #0]
 8010d20:	2005      	movs	r0, #5
 8010d22:	e026      	b.n	8010d72 <__hexnan+0x11a>
 8010d24:	3501      	adds	r5, #1
 8010d26:	2d08      	cmp	r5, #8
 8010d28:	f10b 0b01 	add.w	fp, fp, #1
 8010d2c:	dd06      	ble.n	8010d3c <__hexnan+0xe4>
 8010d2e:	4544      	cmp	r4, r8
 8010d30:	d9cf      	bls.n	8010cd2 <__hexnan+0x7a>
 8010d32:	2300      	movs	r3, #0
 8010d34:	f844 3c04 	str.w	r3, [r4, #-4]
 8010d38:	2501      	movs	r5, #1
 8010d3a:	3c04      	subs	r4, #4
 8010d3c:	6822      	ldr	r2, [r4, #0]
 8010d3e:	f000 000f 	and.w	r0, r0, #15
 8010d42:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8010d46:	6020      	str	r0, [r4, #0]
 8010d48:	e7c3      	b.n	8010cd2 <__hexnan+0x7a>
 8010d4a:	2508      	movs	r5, #8
 8010d4c:	e7c1      	b.n	8010cd2 <__hexnan+0x7a>
 8010d4e:	9b01      	ldr	r3, [sp, #4]
 8010d50:	2b00      	cmp	r3, #0
 8010d52:	d0df      	beq.n	8010d14 <__hexnan+0xbc>
 8010d54:	f04f 32ff 	mov.w	r2, #4294967295
 8010d58:	f1c3 0320 	rsb	r3, r3, #32
 8010d5c:	fa22 f303 	lsr.w	r3, r2, r3
 8010d60:	f857 2c04 	ldr.w	r2, [r7, #-4]
 8010d64:	401a      	ands	r2, r3
 8010d66:	f847 2c04 	str.w	r2, [r7, #-4]
 8010d6a:	e7d3      	b.n	8010d14 <__hexnan+0xbc>
 8010d6c:	3e04      	subs	r6, #4
 8010d6e:	e7d1      	b.n	8010d14 <__hexnan+0xbc>
 8010d70:	2004      	movs	r0, #4
 8010d72:	b007      	add	sp, #28
 8010d74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08010d78 <__locale_ctype_ptr_l>:
 8010d78:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8010d7c:	4770      	bx	lr

08010d7e <__localeconv_l>:
 8010d7e:	30f0      	adds	r0, #240	; 0xf0
 8010d80:	4770      	bx	lr
	...

08010d84 <_localeconv_r>:
 8010d84:	4b04      	ldr	r3, [pc, #16]	; (8010d98 <_localeconv_r+0x14>)
 8010d86:	681b      	ldr	r3, [r3, #0]
 8010d88:	6a18      	ldr	r0, [r3, #32]
 8010d8a:	4b04      	ldr	r3, [pc, #16]	; (8010d9c <_localeconv_r+0x18>)
 8010d8c:	2800      	cmp	r0, #0
 8010d8e:	bf08      	it	eq
 8010d90:	4618      	moveq	r0, r3
 8010d92:	30f0      	adds	r0, #240	; 0xf0
 8010d94:	4770      	bx	lr
 8010d96:	bf00      	nop
 8010d98:	20000190 	.word	0x20000190
 8010d9c:	200001f4 	.word	0x200001f4

08010da0 <__ascii_mbtowc>:
 8010da0:	b082      	sub	sp, #8
 8010da2:	b901      	cbnz	r1, 8010da6 <__ascii_mbtowc+0x6>
 8010da4:	a901      	add	r1, sp, #4
 8010da6:	b142      	cbz	r2, 8010dba <__ascii_mbtowc+0x1a>
 8010da8:	b14b      	cbz	r3, 8010dbe <__ascii_mbtowc+0x1e>
 8010daa:	7813      	ldrb	r3, [r2, #0]
 8010dac:	600b      	str	r3, [r1, #0]
 8010dae:	7812      	ldrb	r2, [r2, #0]
 8010db0:	1c10      	adds	r0, r2, #0
 8010db2:	bf18      	it	ne
 8010db4:	2001      	movne	r0, #1
 8010db6:	b002      	add	sp, #8
 8010db8:	4770      	bx	lr
 8010dba:	4610      	mov	r0, r2
 8010dbc:	e7fb      	b.n	8010db6 <__ascii_mbtowc+0x16>
 8010dbe:	f06f 0001 	mvn.w	r0, #1
 8010dc2:	e7f8      	b.n	8010db6 <__ascii_mbtowc+0x16>

08010dc4 <__malloc_lock>:
 8010dc4:	4770      	bx	lr

08010dc6 <__malloc_unlock>:
 8010dc6:	4770      	bx	lr

08010dc8 <_Balloc>:
 8010dc8:	b570      	push	{r4, r5, r6, lr}
 8010dca:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8010dcc:	4604      	mov	r4, r0
 8010dce:	460e      	mov	r6, r1
 8010dd0:	b93d      	cbnz	r5, 8010de2 <_Balloc+0x1a>
 8010dd2:	2010      	movs	r0, #16
 8010dd4:	f7fc ff94 	bl	800dd00 <malloc>
 8010dd8:	6260      	str	r0, [r4, #36]	; 0x24
 8010dda:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8010dde:	6005      	str	r5, [r0, #0]
 8010de0:	60c5      	str	r5, [r0, #12]
 8010de2:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8010de4:	68eb      	ldr	r3, [r5, #12]
 8010de6:	b183      	cbz	r3, 8010e0a <_Balloc+0x42>
 8010de8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010dea:	68db      	ldr	r3, [r3, #12]
 8010dec:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8010df0:	b9b8      	cbnz	r0, 8010e22 <_Balloc+0x5a>
 8010df2:	2101      	movs	r1, #1
 8010df4:	fa01 f506 	lsl.w	r5, r1, r6
 8010df8:	1d6a      	adds	r2, r5, #5
 8010dfa:	0092      	lsls	r2, r2, #2
 8010dfc:	4620      	mov	r0, r4
 8010dfe:	f000 fbe2 	bl	80115c6 <_calloc_r>
 8010e02:	b160      	cbz	r0, 8010e1e <_Balloc+0x56>
 8010e04:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8010e08:	e00e      	b.n	8010e28 <_Balloc+0x60>
 8010e0a:	2221      	movs	r2, #33	; 0x21
 8010e0c:	2104      	movs	r1, #4
 8010e0e:	4620      	mov	r0, r4
 8010e10:	f000 fbd9 	bl	80115c6 <_calloc_r>
 8010e14:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010e16:	60e8      	str	r0, [r5, #12]
 8010e18:	68db      	ldr	r3, [r3, #12]
 8010e1a:	2b00      	cmp	r3, #0
 8010e1c:	d1e4      	bne.n	8010de8 <_Balloc+0x20>
 8010e1e:	2000      	movs	r0, #0
 8010e20:	bd70      	pop	{r4, r5, r6, pc}
 8010e22:	6802      	ldr	r2, [r0, #0]
 8010e24:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8010e28:	2300      	movs	r3, #0
 8010e2a:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8010e2e:	e7f7      	b.n	8010e20 <_Balloc+0x58>

08010e30 <_Bfree>:
 8010e30:	b570      	push	{r4, r5, r6, lr}
 8010e32:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8010e34:	4606      	mov	r6, r0
 8010e36:	460d      	mov	r5, r1
 8010e38:	b93c      	cbnz	r4, 8010e4a <_Bfree+0x1a>
 8010e3a:	2010      	movs	r0, #16
 8010e3c:	f7fc ff60 	bl	800dd00 <malloc>
 8010e40:	6270      	str	r0, [r6, #36]	; 0x24
 8010e42:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8010e46:	6004      	str	r4, [r0, #0]
 8010e48:	60c4      	str	r4, [r0, #12]
 8010e4a:	b13d      	cbz	r5, 8010e5c <_Bfree+0x2c>
 8010e4c:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8010e4e:	686a      	ldr	r2, [r5, #4]
 8010e50:	68db      	ldr	r3, [r3, #12]
 8010e52:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8010e56:	6029      	str	r1, [r5, #0]
 8010e58:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8010e5c:	bd70      	pop	{r4, r5, r6, pc}

08010e5e <__multadd>:
 8010e5e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010e62:	690d      	ldr	r5, [r1, #16]
 8010e64:	461f      	mov	r7, r3
 8010e66:	4606      	mov	r6, r0
 8010e68:	460c      	mov	r4, r1
 8010e6a:	f101 0c14 	add.w	ip, r1, #20
 8010e6e:	2300      	movs	r3, #0
 8010e70:	f8dc 0000 	ldr.w	r0, [ip]
 8010e74:	b281      	uxth	r1, r0
 8010e76:	fb02 7101 	mla	r1, r2, r1, r7
 8010e7a:	0c0f      	lsrs	r7, r1, #16
 8010e7c:	0c00      	lsrs	r0, r0, #16
 8010e7e:	fb02 7000 	mla	r0, r2, r0, r7
 8010e82:	b289      	uxth	r1, r1
 8010e84:	3301      	adds	r3, #1
 8010e86:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8010e8a:	429d      	cmp	r5, r3
 8010e8c:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8010e90:	f84c 1b04 	str.w	r1, [ip], #4
 8010e94:	dcec      	bgt.n	8010e70 <__multadd+0x12>
 8010e96:	b1d7      	cbz	r7, 8010ece <__multadd+0x70>
 8010e98:	68a3      	ldr	r3, [r4, #8]
 8010e9a:	42ab      	cmp	r3, r5
 8010e9c:	dc12      	bgt.n	8010ec4 <__multadd+0x66>
 8010e9e:	6861      	ldr	r1, [r4, #4]
 8010ea0:	4630      	mov	r0, r6
 8010ea2:	3101      	adds	r1, #1
 8010ea4:	f7ff ff90 	bl	8010dc8 <_Balloc>
 8010ea8:	6922      	ldr	r2, [r4, #16]
 8010eaa:	3202      	adds	r2, #2
 8010eac:	f104 010c 	add.w	r1, r4, #12
 8010eb0:	4680      	mov	r8, r0
 8010eb2:	0092      	lsls	r2, r2, #2
 8010eb4:	300c      	adds	r0, #12
 8010eb6:	f7fc ff33 	bl	800dd20 <memcpy>
 8010eba:	4621      	mov	r1, r4
 8010ebc:	4630      	mov	r0, r6
 8010ebe:	f7ff ffb7 	bl	8010e30 <_Bfree>
 8010ec2:	4644      	mov	r4, r8
 8010ec4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8010ec8:	3501      	adds	r5, #1
 8010eca:	615f      	str	r7, [r3, #20]
 8010ecc:	6125      	str	r5, [r4, #16]
 8010ece:	4620      	mov	r0, r4
 8010ed0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08010ed4 <__s2b>:
 8010ed4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010ed8:	460c      	mov	r4, r1
 8010eda:	4615      	mov	r5, r2
 8010edc:	461f      	mov	r7, r3
 8010ede:	2209      	movs	r2, #9
 8010ee0:	3308      	adds	r3, #8
 8010ee2:	4606      	mov	r6, r0
 8010ee4:	fb93 f3f2 	sdiv	r3, r3, r2
 8010ee8:	2100      	movs	r1, #0
 8010eea:	2201      	movs	r2, #1
 8010eec:	429a      	cmp	r2, r3
 8010eee:	db20      	blt.n	8010f32 <__s2b+0x5e>
 8010ef0:	4630      	mov	r0, r6
 8010ef2:	f7ff ff69 	bl	8010dc8 <_Balloc>
 8010ef6:	9b08      	ldr	r3, [sp, #32]
 8010ef8:	6143      	str	r3, [r0, #20]
 8010efa:	2d09      	cmp	r5, #9
 8010efc:	f04f 0301 	mov.w	r3, #1
 8010f00:	6103      	str	r3, [r0, #16]
 8010f02:	dd19      	ble.n	8010f38 <__s2b+0x64>
 8010f04:	f104 0809 	add.w	r8, r4, #9
 8010f08:	46c1      	mov	r9, r8
 8010f0a:	442c      	add	r4, r5
 8010f0c:	f819 3b01 	ldrb.w	r3, [r9], #1
 8010f10:	4601      	mov	r1, r0
 8010f12:	3b30      	subs	r3, #48	; 0x30
 8010f14:	220a      	movs	r2, #10
 8010f16:	4630      	mov	r0, r6
 8010f18:	f7ff ffa1 	bl	8010e5e <__multadd>
 8010f1c:	45a1      	cmp	r9, r4
 8010f1e:	d1f5      	bne.n	8010f0c <__s2b+0x38>
 8010f20:	eb08 0405 	add.w	r4, r8, r5
 8010f24:	3c08      	subs	r4, #8
 8010f26:	1b2d      	subs	r5, r5, r4
 8010f28:	1963      	adds	r3, r4, r5
 8010f2a:	42bb      	cmp	r3, r7
 8010f2c:	db07      	blt.n	8010f3e <__s2b+0x6a>
 8010f2e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010f32:	0052      	lsls	r2, r2, #1
 8010f34:	3101      	adds	r1, #1
 8010f36:	e7d9      	b.n	8010eec <__s2b+0x18>
 8010f38:	340a      	adds	r4, #10
 8010f3a:	2509      	movs	r5, #9
 8010f3c:	e7f3      	b.n	8010f26 <__s2b+0x52>
 8010f3e:	f814 3b01 	ldrb.w	r3, [r4], #1
 8010f42:	4601      	mov	r1, r0
 8010f44:	3b30      	subs	r3, #48	; 0x30
 8010f46:	220a      	movs	r2, #10
 8010f48:	4630      	mov	r0, r6
 8010f4a:	f7ff ff88 	bl	8010e5e <__multadd>
 8010f4e:	e7eb      	b.n	8010f28 <__s2b+0x54>

08010f50 <__hi0bits>:
 8010f50:	0c02      	lsrs	r2, r0, #16
 8010f52:	0412      	lsls	r2, r2, #16
 8010f54:	4603      	mov	r3, r0
 8010f56:	b9b2      	cbnz	r2, 8010f86 <__hi0bits+0x36>
 8010f58:	0403      	lsls	r3, r0, #16
 8010f5a:	2010      	movs	r0, #16
 8010f5c:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8010f60:	bf04      	itt	eq
 8010f62:	021b      	lsleq	r3, r3, #8
 8010f64:	3008      	addeq	r0, #8
 8010f66:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8010f6a:	bf04      	itt	eq
 8010f6c:	011b      	lsleq	r3, r3, #4
 8010f6e:	3004      	addeq	r0, #4
 8010f70:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8010f74:	bf04      	itt	eq
 8010f76:	009b      	lsleq	r3, r3, #2
 8010f78:	3002      	addeq	r0, #2
 8010f7a:	2b00      	cmp	r3, #0
 8010f7c:	db06      	blt.n	8010f8c <__hi0bits+0x3c>
 8010f7e:	005b      	lsls	r3, r3, #1
 8010f80:	d503      	bpl.n	8010f8a <__hi0bits+0x3a>
 8010f82:	3001      	adds	r0, #1
 8010f84:	4770      	bx	lr
 8010f86:	2000      	movs	r0, #0
 8010f88:	e7e8      	b.n	8010f5c <__hi0bits+0xc>
 8010f8a:	2020      	movs	r0, #32
 8010f8c:	4770      	bx	lr

08010f8e <__lo0bits>:
 8010f8e:	6803      	ldr	r3, [r0, #0]
 8010f90:	f013 0207 	ands.w	r2, r3, #7
 8010f94:	4601      	mov	r1, r0
 8010f96:	d00b      	beq.n	8010fb0 <__lo0bits+0x22>
 8010f98:	07da      	lsls	r2, r3, #31
 8010f9a:	d423      	bmi.n	8010fe4 <__lo0bits+0x56>
 8010f9c:	0798      	lsls	r0, r3, #30
 8010f9e:	bf49      	itett	mi
 8010fa0:	085b      	lsrmi	r3, r3, #1
 8010fa2:	089b      	lsrpl	r3, r3, #2
 8010fa4:	2001      	movmi	r0, #1
 8010fa6:	600b      	strmi	r3, [r1, #0]
 8010fa8:	bf5c      	itt	pl
 8010faa:	600b      	strpl	r3, [r1, #0]
 8010fac:	2002      	movpl	r0, #2
 8010fae:	4770      	bx	lr
 8010fb0:	b298      	uxth	r0, r3
 8010fb2:	b9a8      	cbnz	r0, 8010fe0 <__lo0bits+0x52>
 8010fb4:	0c1b      	lsrs	r3, r3, #16
 8010fb6:	2010      	movs	r0, #16
 8010fb8:	f013 0fff 	tst.w	r3, #255	; 0xff
 8010fbc:	bf04      	itt	eq
 8010fbe:	0a1b      	lsreq	r3, r3, #8
 8010fc0:	3008      	addeq	r0, #8
 8010fc2:	071a      	lsls	r2, r3, #28
 8010fc4:	bf04      	itt	eq
 8010fc6:	091b      	lsreq	r3, r3, #4
 8010fc8:	3004      	addeq	r0, #4
 8010fca:	079a      	lsls	r2, r3, #30
 8010fcc:	bf04      	itt	eq
 8010fce:	089b      	lsreq	r3, r3, #2
 8010fd0:	3002      	addeq	r0, #2
 8010fd2:	07da      	lsls	r2, r3, #31
 8010fd4:	d402      	bmi.n	8010fdc <__lo0bits+0x4e>
 8010fd6:	085b      	lsrs	r3, r3, #1
 8010fd8:	d006      	beq.n	8010fe8 <__lo0bits+0x5a>
 8010fda:	3001      	adds	r0, #1
 8010fdc:	600b      	str	r3, [r1, #0]
 8010fde:	4770      	bx	lr
 8010fe0:	4610      	mov	r0, r2
 8010fe2:	e7e9      	b.n	8010fb8 <__lo0bits+0x2a>
 8010fe4:	2000      	movs	r0, #0
 8010fe6:	4770      	bx	lr
 8010fe8:	2020      	movs	r0, #32
 8010fea:	4770      	bx	lr

08010fec <__i2b>:
 8010fec:	b510      	push	{r4, lr}
 8010fee:	460c      	mov	r4, r1
 8010ff0:	2101      	movs	r1, #1
 8010ff2:	f7ff fee9 	bl	8010dc8 <_Balloc>
 8010ff6:	2201      	movs	r2, #1
 8010ff8:	6144      	str	r4, [r0, #20]
 8010ffa:	6102      	str	r2, [r0, #16]
 8010ffc:	bd10      	pop	{r4, pc}

08010ffe <__multiply>:
 8010ffe:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011002:	4614      	mov	r4, r2
 8011004:	690a      	ldr	r2, [r1, #16]
 8011006:	6923      	ldr	r3, [r4, #16]
 8011008:	429a      	cmp	r2, r3
 801100a:	bfb8      	it	lt
 801100c:	460b      	movlt	r3, r1
 801100e:	4688      	mov	r8, r1
 8011010:	bfbc      	itt	lt
 8011012:	46a0      	movlt	r8, r4
 8011014:	461c      	movlt	r4, r3
 8011016:	f8d8 7010 	ldr.w	r7, [r8, #16]
 801101a:	f8d4 9010 	ldr.w	r9, [r4, #16]
 801101e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8011022:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8011026:	eb07 0609 	add.w	r6, r7, r9
 801102a:	42b3      	cmp	r3, r6
 801102c:	bfb8      	it	lt
 801102e:	3101      	addlt	r1, #1
 8011030:	f7ff feca 	bl	8010dc8 <_Balloc>
 8011034:	f100 0514 	add.w	r5, r0, #20
 8011038:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 801103c:	462b      	mov	r3, r5
 801103e:	2200      	movs	r2, #0
 8011040:	4573      	cmp	r3, lr
 8011042:	d316      	bcc.n	8011072 <__multiply+0x74>
 8011044:	f104 0214 	add.w	r2, r4, #20
 8011048:	f108 0114 	add.w	r1, r8, #20
 801104c:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8011050:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8011054:	9300      	str	r3, [sp, #0]
 8011056:	9b00      	ldr	r3, [sp, #0]
 8011058:	9201      	str	r2, [sp, #4]
 801105a:	4293      	cmp	r3, r2
 801105c:	d80c      	bhi.n	8011078 <__multiply+0x7a>
 801105e:	2e00      	cmp	r6, #0
 8011060:	dd03      	ble.n	801106a <__multiply+0x6c>
 8011062:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8011066:	2b00      	cmp	r3, #0
 8011068:	d05d      	beq.n	8011126 <__multiply+0x128>
 801106a:	6106      	str	r6, [r0, #16]
 801106c:	b003      	add	sp, #12
 801106e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011072:	f843 2b04 	str.w	r2, [r3], #4
 8011076:	e7e3      	b.n	8011040 <__multiply+0x42>
 8011078:	f8b2 b000 	ldrh.w	fp, [r2]
 801107c:	f1bb 0f00 	cmp.w	fp, #0
 8011080:	d023      	beq.n	80110ca <__multiply+0xcc>
 8011082:	4689      	mov	r9, r1
 8011084:	46ac      	mov	ip, r5
 8011086:	f04f 0800 	mov.w	r8, #0
 801108a:	f859 4b04 	ldr.w	r4, [r9], #4
 801108e:	f8dc a000 	ldr.w	sl, [ip]
 8011092:	b2a3      	uxth	r3, r4
 8011094:	fa1f fa8a 	uxth.w	sl, sl
 8011098:	fb0b a303 	mla	r3, fp, r3, sl
 801109c:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80110a0:	f8dc 4000 	ldr.w	r4, [ip]
 80110a4:	4443      	add	r3, r8
 80110a6:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80110aa:	fb0b 840a 	mla	r4, fp, sl, r8
 80110ae:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 80110b2:	46e2      	mov	sl, ip
 80110b4:	b29b      	uxth	r3, r3
 80110b6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80110ba:	454f      	cmp	r7, r9
 80110bc:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80110c0:	f84a 3b04 	str.w	r3, [sl], #4
 80110c4:	d82b      	bhi.n	801111e <__multiply+0x120>
 80110c6:	f8cc 8004 	str.w	r8, [ip, #4]
 80110ca:	9b01      	ldr	r3, [sp, #4]
 80110cc:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 80110d0:	3204      	adds	r2, #4
 80110d2:	f1ba 0f00 	cmp.w	sl, #0
 80110d6:	d020      	beq.n	801111a <__multiply+0x11c>
 80110d8:	682b      	ldr	r3, [r5, #0]
 80110da:	4689      	mov	r9, r1
 80110dc:	46a8      	mov	r8, r5
 80110de:	f04f 0b00 	mov.w	fp, #0
 80110e2:	f8b9 c000 	ldrh.w	ip, [r9]
 80110e6:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 80110ea:	fb0a 440c 	mla	r4, sl, ip, r4
 80110ee:	445c      	add	r4, fp
 80110f0:	46c4      	mov	ip, r8
 80110f2:	b29b      	uxth	r3, r3
 80110f4:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80110f8:	f84c 3b04 	str.w	r3, [ip], #4
 80110fc:	f859 3b04 	ldr.w	r3, [r9], #4
 8011100:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8011104:	0c1b      	lsrs	r3, r3, #16
 8011106:	fb0a b303 	mla	r3, sl, r3, fp
 801110a:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 801110e:	454f      	cmp	r7, r9
 8011110:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8011114:	d805      	bhi.n	8011122 <__multiply+0x124>
 8011116:	f8c8 3004 	str.w	r3, [r8, #4]
 801111a:	3504      	adds	r5, #4
 801111c:	e79b      	b.n	8011056 <__multiply+0x58>
 801111e:	46d4      	mov	ip, sl
 8011120:	e7b3      	b.n	801108a <__multiply+0x8c>
 8011122:	46e0      	mov	r8, ip
 8011124:	e7dd      	b.n	80110e2 <__multiply+0xe4>
 8011126:	3e01      	subs	r6, #1
 8011128:	e799      	b.n	801105e <__multiply+0x60>
	...

0801112c <__pow5mult>:
 801112c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011130:	4615      	mov	r5, r2
 8011132:	f012 0203 	ands.w	r2, r2, #3
 8011136:	4606      	mov	r6, r0
 8011138:	460f      	mov	r7, r1
 801113a:	d007      	beq.n	801114c <__pow5mult+0x20>
 801113c:	3a01      	subs	r2, #1
 801113e:	4c21      	ldr	r4, [pc, #132]	; (80111c4 <__pow5mult+0x98>)
 8011140:	2300      	movs	r3, #0
 8011142:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8011146:	f7ff fe8a 	bl	8010e5e <__multadd>
 801114a:	4607      	mov	r7, r0
 801114c:	10ad      	asrs	r5, r5, #2
 801114e:	d035      	beq.n	80111bc <__pow5mult+0x90>
 8011150:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8011152:	b93c      	cbnz	r4, 8011164 <__pow5mult+0x38>
 8011154:	2010      	movs	r0, #16
 8011156:	f7fc fdd3 	bl	800dd00 <malloc>
 801115a:	6270      	str	r0, [r6, #36]	; 0x24
 801115c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8011160:	6004      	str	r4, [r0, #0]
 8011162:	60c4      	str	r4, [r0, #12]
 8011164:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8011168:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801116c:	b94c      	cbnz	r4, 8011182 <__pow5mult+0x56>
 801116e:	f240 2171 	movw	r1, #625	; 0x271
 8011172:	4630      	mov	r0, r6
 8011174:	f7ff ff3a 	bl	8010fec <__i2b>
 8011178:	2300      	movs	r3, #0
 801117a:	f8c8 0008 	str.w	r0, [r8, #8]
 801117e:	4604      	mov	r4, r0
 8011180:	6003      	str	r3, [r0, #0]
 8011182:	f04f 0800 	mov.w	r8, #0
 8011186:	07eb      	lsls	r3, r5, #31
 8011188:	d50a      	bpl.n	80111a0 <__pow5mult+0x74>
 801118a:	4639      	mov	r1, r7
 801118c:	4622      	mov	r2, r4
 801118e:	4630      	mov	r0, r6
 8011190:	f7ff ff35 	bl	8010ffe <__multiply>
 8011194:	4639      	mov	r1, r7
 8011196:	4681      	mov	r9, r0
 8011198:	4630      	mov	r0, r6
 801119a:	f7ff fe49 	bl	8010e30 <_Bfree>
 801119e:	464f      	mov	r7, r9
 80111a0:	106d      	asrs	r5, r5, #1
 80111a2:	d00b      	beq.n	80111bc <__pow5mult+0x90>
 80111a4:	6820      	ldr	r0, [r4, #0]
 80111a6:	b938      	cbnz	r0, 80111b8 <__pow5mult+0x8c>
 80111a8:	4622      	mov	r2, r4
 80111aa:	4621      	mov	r1, r4
 80111ac:	4630      	mov	r0, r6
 80111ae:	f7ff ff26 	bl	8010ffe <__multiply>
 80111b2:	6020      	str	r0, [r4, #0]
 80111b4:	f8c0 8000 	str.w	r8, [r0]
 80111b8:	4604      	mov	r4, r0
 80111ba:	e7e4      	b.n	8011186 <__pow5mult+0x5a>
 80111bc:	4638      	mov	r0, r7
 80111be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80111c2:	bf00      	nop
 80111c4:	08012438 	.word	0x08012438

080111c8 <__lshift>:
 80111c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80111cc:	460c      	mov	r4, r1
 80111ce:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80111d2:	6923      	ldr	r3, [r4, #16]
 80111d4:	6849      	ldr	r1, [r1, #4]
 80111d6:	eb0a 0903 	add.w	r9, sl, r3
 80111da:	68a3      	ldr	r3, [r4, #8]
 80111dc:	4607      	mov	r7, r0
 80111de:	4616      	mov	r6, r2
 80111e0:	f109 0501 	add.w	r5, r9, #1
 80111e4:	42ab      	cmp	r3, r5
 80111e6:	db32      	blt.n	801124e <__lshift+0x86>
 80111e8:	4638      	mov	r0, r7
 80111ea:	f7ff fded 	bl	8010dc8 <_Balloc>
 80111ee:	2300      	movs	r3, #0
 80111f0:	4680      	mov	r8, r0
 80111f2:	f100 0114 	add.w	r1, r0, #20
 80111f6:	461a      	mov	r2, r3
 80111f8:	4553      	cmp	r3, sl
 80111fa:	db2b      	blt.n	8011254 <__lshift+0x8c>
 80111fc:	6920      	ldr	r0, [r4, #16]
 80111fe:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8011202:	f104 0314 	add.w	r3, r4, #20
 8011206:	f016 021f 	ands.w	r2, r6, #31
 801120a:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801120e:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8011212:	d025      	beq.n	8011260 <__lshift+0x98>
 8011214:	f1c2 0e20 	rsb	lr, r2, #32
 8011218:	2000      	movs	r0, #0
 801121a:	681e      	ldr	r6, [r3, #0]
 801121c:	468a      	mov	sl, r1
 801121e:	4096      	lsls	r6, r2
 8011220:	4330      	orrs	r0, r6
 8011222:	f84a 0b04 	str.w	r0, [sl], #4
 8011226:	f853 0b04 	ldr.w	r0, [r3], #4
 801122a:	459c      	cmp	ip, r3
 801122c:	fa20 f00e 	lsr.w	r0, r0, lr
 8011230:	d814      	bhi.n	801125c <__lshift+0x94>
 8011232:	6048      	str	r0, [r1, #4]
 8011234:	b108      	cbz	r0, 801123a <__lshift+0x72>
 8011236:	f109 0502 	add.w	r5, r9, #2
 801123a:	3d01      	subs	r5, #1
 801123c:	4638      	mov	r0, r7
 801123e:	f8c8 5010 	str.w	r5, [r8, #16]
 8011242:	4621      	mov	r1, r4
 8011244:	f7ff fdf4 	bl	8010e30 <_Bfree>
 8011248:	4640      	mov	r0, r8
 801124a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801124e:	3101      	adds	r1, #1
 8011250:	005b      	lsls	r3, r3, #1
 8011252:	e7c7      	b.n	80111e4 <__lshift+0x1c>
 8011254:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8011258:	3301      	adds	r3, #1
 801125a:	e7cd      	b.n	80111f8 <__lshift+0x30>
 801125c:	4651      	mov	r1, sl
 801125e:	e7dc      	b.n	801121a <__lshift+0x52>
 8011260:	3904      	subs	r1, #4
 8011262:	f853 2b04 	ldr.w	r2, [r3], #4
 8011266:	f841 2f04 	str.w	r2, [r1, #4]!
 801126a:	459c      	cmp	ip, r3
 801126c:	d8f9      	bhi.n	8011262 <__lshift+0x9a>
 801126e:	e7e4      	b.n	801123a <__lshift+0x72>

08011270 <__mcmp>:
 8011270:	6903      	ldr	r3, [r0, #16]
 8011272:	690a      	ldr	r2, [r1, #16]
 8011274:	1a9b      	subs	r3, r3, r2
 8011276:	b530      	push	{r4, r5, lr}
 8011278:	d10c      	bne.n	8011294 <__mcmp+0x24>
 801127a:	0092      	lsls	r2, r2, #2
 801127c:	3014      	adds	r0, #20
 801127e:	3114      	adds	r1, #20
 8011280:	1884      	adds	r4, r0, r2
 8011282:	4411      	add	r1, r2
 8011284:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8011288:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 801128c:	4295      	cmp	r5, r2
 801128e:	d003      	beq.n	8011298 <__mcmp+0x28>
 8011290:	d305      	bcc.n	801129e <__mcmp+0x2e>
 8011292:	2301      	movs	r3, #1
 8011294:	4618      	mov	r0, r3
 8011296:	bd30      	pop	{r4, r5, pc}
 8011298:	42a0      	cmp	r0, r4
 801129a:	d3f3      	bcc.n	8011284 <__mcmp+0x14>
 801129c:	e7fa      	b.n	8011294 <__mcmp+0x24>
 801129e:	f04f 33ff 	mov.w	r3, #4294967295
 80112a2:	e7f7      	b.n	8011294 <__mcmp+0x24>

080112a4 <__mdiff>:
 80112a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80112a8:	460d      	mov	r5, r1
 80112aa:	4607      	mov	r7, r0
 80112ac:	4611      	mov	r1, r2
 80112ae:	4628      	mov	r0, r5
 80112b0:	4614      	mov	r4, r2
 80112b2:	f7ff ffdd 	bl	8011270 <__mcmp>
 80112b6:	1e06      	subs	r6, r0, #0
 80112b8:	d108      	bne.n	80112cc <__mdiff+0x28>
 80112ba:	4631      	mov	r1, r6
 80112bc:	4638      	mov	r0, r7
 80112be:	f7ff fd83 	bl	8010dc8 <_Balloc>
 80112c2:	2301      	movs	r3, #1
 80112c4:	e9c0 3604 	strd	r3, r6, [r0, #16]
 80112c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80112cc:	bfa4      	itt	ge
 80112ce:	4623      	movge	r3, r4
 80112d0:	462c      	movge	r4, r5
 80112d2:	4638      	mov	r0, r7
 80112d4:	6861      	ldr	r1, [r4, #4]
 80112d6:	bfa6      	itte	ge
 80112d8:	461d      	movge	r5, r3
 80112da:	2600      	movge	r6, #0
 80112dc:	2601      	movlt	r6, #1
 80112de:	f7ff fd73 	bl	8010dc8 <_Balloc>
 80112e2:	692b      	ldr	r3, [r5, #16]
 80112e4:	60c6      	str	r6, [r0, #12]
 80112e6:	6926      	ldr	r6, [r4, #16]
 80112e8:	f105 0914 	add.w	r9, r5, #20
 80112ec:	f104 0214 	add.w	r2, r4, #20
 80112f0:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 80112f4:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 80112f8:	f100 0514 	add.w	r5, r0, #20
 80112fc:	f04f 0e00 	mov.w	lr, #0
 8011300:	f852 ab04 	ldr.w	sl, [r2], #4
 8011304:	f859 4b04 	ldr.w	r4, [r9], #4
 8011308:	fa1e f18a 	uxtah	r1, lr, sl
 801130c:	b2a3      	uxth	r3, r4
 801130e:	1ac9      	subs	r1, r1, r3
 8011310:	0c23      	lsrs	r3, r4, #16
 8011312:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 8011316:	eb03 4321 	add.w	r3, r3, r1, asr #16
 801131a:	b289      	uxth	r1, r1
 801131c:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8011320:	45c8      	cmp	r8, r9
 8011322:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8011326:	4694      	mov	ip, r2
 8011328:	f845 3b04 	str.w	r3, [r5], #4
 801132c:	d8e8      	bhi.n	8011300 <__mdiff+0x5c>
 801132e:	45bc      	cmp	ip, r7
 8011330:	d304      	bcc.n	801133c <__mdiff+0x98>
 8011332:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8011336:	b183      	cbz	r3, 801135a <__mdiff+0xb6>
 8011338:	6106      	str	r6, [r0, #16]
 801133a:	e7c5      	b.n	80112c8 <__mdiff+0x24>
 801133c:	f85c 1b04 	ldr.w	r1, [ip], #4
 8011340:	fa1e f381 	uxtah	r3, lr, r1
 8011344:	141a      	asrs	r2, r3, #16
 8011346:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 801134a:	b29b      	uxth	r3, r3
 801134c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8011350:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8011354:	f845 3b04 	str.w	r3, [r5], #4
 8011358:	e7e9      	b.n	801132e <__mdiff+0x8a>
 801135a:	3e01      	subs	r6, #1
 801135c:	e7e9      	b.n	8011332 <__mdiff+0x8e>
	...

08011360 <__ulp>:
 8011360:	4b12      	ldr	r3, [pc, #72]	; (80113ac <__ulp+0x4c>)
 8011362:	ee10 2a90 	vmov	r2, s1
 8011366:	401a      	ands	r2, r3
 8011368:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 801136c:	2b00      	cmp	r3, #0
 801136e:	dd04      	ble.n	801137a <__ulp+0x1a>
 8011370:	2000      	movs	r0, #0
 8011372:	4619      	mov	r1, r3
 8011374:	ec41 0b10 	vmov	d0, r0, r1
 8011378:	4770      	bx	lr
 801137a:	425b      	negs	r3, r3
 801137c:	151b      	asrs	r3, r3, #20
 801137e:	2b13      	cmp	r3, #19
 8011380:	f04f 0000 	mov.w	r0, #0
 8011384:	f04f 0100 	mov.w	r1, #0
 8011388:	dc04      	bgt.n	8011394 <__ulp+0x34>
 801138a:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 801138e:	fa42 f103 	asr.w	r1, r2, r3
 8011392:	e7ef      	b.n	8011374 <__ulp+0x14>
 8011394:	3b14      	subs	r3, #20
 8011396:	2b1e      	cmp	r3, #30
 8011398:	f04f 0201 	mov.w	r2, #1
 801139c:	bfda      	itte	le
 801139e:	f1c3 031f 	rsble	r3, r3, #31
 80113a2:	fa02 f303 	lslle.w	r3, r2, r3
 80113a6:	4613      	movgt	r3, r2
 80113a8:	4618      	mov	r0, r3
 80113aa:	e7e3      	b.n	8011374 <__ulp+0x14>
 80113ac:	7ff00000 	.word	0x7ff00000

080113b0 <__b2d>:
 80113b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80113b2:	6905      	ldr	r5, [r0, #16]
 80113b4:	f100 0714 	add.w	r7, r0, #20
 80113b8:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 80113bc:	1f2e      	subs	r6, r5, #4
 80113be:	f855 4c04 	ldr.w	r4, [r5, #-4]
 80113c2:	4620      	mov	r0, r4
 80113c4:	f7ff fdc4 	bl	8010f50 <__hi0bits>
 80113c8:	f1c0 0320 	rsb	r3, r0, #32
 80113cc:	280a      	cmp	r0, #10
 80113ce:	600b      	str	r3, [r1, #0]
 80113d0:	f8df c074 	ldr.w	ip, [pc, #116]	; 8011448 <__b2d+0x98>
 80113d4:	dc14      	bgt.n	8011400 <__b2d+0x50>
 80113d6:	f1c0 0e0b 	rsb	lr, r0, #11
 80113da:	fa24 f10e 	lsr.w	r1, r4, lr
 80113de:	42b7      	cmp	r7, r6
 80113e0:	ea41 030c 	orr.w	r3, r1, ip
 80113e4:	bf34      	ite	cc
 80113e6:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80113ea:	2100      	movcs	r1, #0
 80113ec:	3015      	adds	r0, #21
 80113ee:	fa04 f000 	lsl.w	r0, r4, r0
 80113f2:	fa21 f10e 	lsr.w	r1, r1, lr
 80113f6:	ea40 0201 	orr.w	r2, r0, r1
 80113fa:	ec43 2b10 	vmov	d0, r2, r3
 80113fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011400:	42b7      	cmp	r7, r6
 8011402:	bf3a      	itte	cc
 8011404:	f1a5 0608 	subcc.w	r6, r5, #8
 8011408:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 801140c:	2100      	movcs	r1, #0
 801140e:	380b      	subs	r0, #11
 8011410:	d015      	beq.n	801143e <__b2d+0x8e>
 8011412:	4084      	lsls	r4, r0
 8011414:	f1c0 0520 	rsb	r5, r0, #32
 8011418:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 801141c:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 8011420:	42be      	cmp	r6, r7
 8011422:	fa21 fc05 	lsr.w	ip, r1, r5
 8011426:	ea44 030c 	orr.w	r3, r4, ip
 801142a:	bf8c      	ite	hi
 801142c:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8011430:	2400      	movls	r4, #0
 8011432:	fa01 f000 	lsl.w	r0, r1, r0
 8011436:	40ec      	lsrs	r4, r5
 8011438:	ea40 0204 	orr.w	r2, r0, r4
 801143c:	e7dd      	b.n	80113fa <__b2d+0x4a>
 801143e:	ea44 030c 	orr.w	r3, r4, ip
 8011442:	460a      	mov	r2, r1
 8011444:	e7d9      	b.n	80113fa <__b2d+0x4a>
 8011446:	bf00      	nop
 8011448:	3ff00000 	.word	0x3ff00000

0801144c <__d2b>:
 801144c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8011450:	460e      	mov	r6, r1
 8011452:	2101      	movs	r1, #1
 8011454:	ec59 8b10 	vmov	r8, r9, d0
 8011458:	4615      	mov	r5, r2
 801145a:	f7ff fcb5 	bl	8010dc8 <_Balloc>
 801145e:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8011462:	4607      	mov	r7, r0
 8011464:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8011468:	bb34      	cbnz	r4, 80114b8 <__d2b+0x6c>
 801146a:	9301      	str	r3, [sp, #4]
 801146c:	f1b8 0300 	subs.w	r3, r8, #0
 8011470:	d027      	beq.n	80114c2 <__d2b+0x76>
 8011472:	a802      	add	r0, sp, #8
 8011474:	f840 3d08 	str.w	r3, [r0, #-8]!
 8011478:	f7ff fd89 	bl	8010f8e <__lo0bits>
 801147c:	9900      	ldr	r1, [sp, #0]
 801147e:	b1f0      	cbz	r0, 80114be <__d2b+0x72>
 8011480:	9a01      	ldr	r2, [sp, #4]
 8011482:	f1c0 0320 	rsb	r3, r0, #32
 8011486:	fa02 f303 	lsl.w	r3, r2, r3
 801148a:	430b      	orrs	r3, r1
 801148c:	40c2      	lsrs	r2, r0
 801148e:	617b      	str	r3, [r7, #20]
 8011490:	9201      	str	r2, [sp, #4]
 8011492:	9b01      	ldr	r3, [sp, #4]
 8011494:	61bb      	str	r3, [r7, #24]
 8011496:	2b00      	cmp	r3, #0
 8011498:	bf14      	ite	ne
 801149a:	2102      	movne	r1, #2
 801149c:	2101      	moveq	r1, #1
 801149e:	6139      	str	r1, [r7, #16]
 80114a0:	b1c4      	cbz	r4, 80114d4 <__d2b+0x88>
 80114a2:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 80114a6:	4404      	add	r4, r0
 80114a8:	6034      	str	r4, [r6, #0]
 80114aa:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80114ae:	6028      	str	r0, [r5, #0]
 80114b0:	4638      	mov	r0, r7
 80114b2:	b003      	add	sp, #12
 80114b4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80114b8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80114bc:	e7d5      	b.n	801146a <__d2b+0x1e>
 80114be:	6179      	str	r1, [r7, #20]
 80114c0:	e7e7      	b.n	8011492 <__d2b+0x46>
 80114c2:	a801      	add	r0, sp, #4
 80114c4:	f7ff fd63 	bl	8010f8e <__lo0bits>
 80114c8:	9b01      	ldr	r3, [sp, #4]
 80114ca:	617b      	str	r3, [r7, #20]
 80114cc:	2101      	movs	r1, #1
 80114ce:	6139      	str	r1, [r7, #16]
 80114d0:	3020      	adds	r0, #32
 80114d2:	e7e5      	b.n	80114a0 <__d2b+0x54>
 80114d4:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 80114d8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80114dc:	6030      	str	r0, [r6, #0]
 80114de:	6918      	ldr	r0, [r3, #16]
 80114e0:	f7ff fd36 	bl	8010f50 <__hi0bits>
 80114e4:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 80114e8:	e7e1      	b.n	80114ae <__d2b+0x62>

080114ea <__ratio>:
 80114ea:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80114ee:	4688      	mov	r8, r1
 80114f0:	4669      	mov	r1, sp
 80114f2:	4681      	mov	r9, r0
 80114f4:	f7ff ff5c 	bl	80113b0 <__b2d>
 80114f8:	a901      	add	r1, sp, #4
 80114fa:	4640      	mov	r0, r8
 80114fc:	ec57 6b10 	vmov	r6, r7, d0
 8011500:	f7ff ff56 	bl	80113b0 <__b2d>
 8011504:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8011508:	f8d8 2010 	ldr.w	r2, [r8, #16]
 801150c:	eba3 0c02 	sub.w	ip, r3, r2
 8011510:	e9dd 3200 	ldrd	r3, r2, [sp]
 8011514:	1a9b      	subs	r3, r3, r2
 8011516:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 801151a:	ec5b ab10 	vmov	sl, fp, d0
 801151e:	2b00      	cmp	r3, #0
 8011520:	bfce      	itee	gt
 8011522:	463a      	movgt	r2, r7
 8011524:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8011528:	465a      	movle	r2, fp
 801152a:	4659      	mov	r1, fp
 801152c:	463d      	mov	r5, r7
 801152e:	bfd4      	ite	le
 8011530:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
 8011534:	eb02 5503 	addgt.w	r5, r2, r3, lsl #20
 8011538:	4630      	mov	r0, r6
 801153a:	ee10 2a10 	vmov	r2, s0
 801153e:	460b      	mov	r3, r1
 8011540:	4629      	mov	r1, r5
 8011542:	f7ef f983 	bl	800084c <__aeabi_ddiv>
 8011546:	ec41 0b10 	vmov	d0, r0, r1
 801154a:	b003      	add	sp, #12
 801154c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08011550 <__copybits>:
 8011550:	3901      	subs	r1, #1
 8011552:	b510      	push	{r4, lr}
 8011554:	1149      	asrs	r1, r1, #5
 8011556:	6914      	ldr	r4, [r2, #16]
 8011558:	3101      	adds	r1, #1
 801155a:	f102 0314 	add.w	r3, r2, #20
 801155e:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8011562:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8011566:	42a3      	cmp	r3, r4
 8011568:	4602      	mov	r2, r0
 801156a:	d303      	bcc.n	8011574 <__copybits+0x24>
 801156c:	2300      	movs	r3, #0
 801156e:	428a      	cmp	r2, r1
 8011570:	d305      	bcc.n	801157e <__copybits+0x2e>
 8011572:	bd10      	pop	{r4, pc}
 8011574:	f853 2b04 	ldr.w	r2, [r3], #4
 8011578:	f840 2b04 	str.w	r2, [r0], #4
 801157c:	e7f3      	b.n	8011566 <__copybits+0x16>
 801157e:	f842 3b04 	str.w	r3, [r2], #4
 8011582:	e7f4      	b.n	801156e <__copybits+0x1e>

08011584 <__any_on>:
 8011584:	f100 0214 	add.w	r2, r0, #20
 8011588:	6900      	ldr	r0, [r0, #16]
 801158a:	114b      	asrs	r3, r1, #5
 801158c:	4298      	cmp	r0, r3
 801158e:	b510      	push	{r4, lr}
 8011590:	db11      	blt.n	80115b6 <__any_on+0x32>
 8011592:	dd0a      	ble.n	80115aa <__any_on+0x26>
 8011594:	f011 011f 	ands.w	r1, r1, #31
 8011598:	d007      	beq.n	80115aa <__any_on+0x26>
 801159a:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 801159e:	fa24 f001 	lsr.w	r0, r4, r1
 80115a2:	fa00 f101 	lsl.w	r1, r0, r1
 80115a6:	428c      	cmp	r4, r1
 80115a8:	d10b      	bne.n	80115c2 <__any_on+0x3e>
 80115aa:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80115ae:	4293      	cmp	r3, r2
 80115b0:	d803      	bhi.n	80115ba <__any_on+0x36>
 80115b2:	2000      	movs	r0, #0
 80115b4:	bd10      	pop	{r4, pc}
 80115b6:	4603      	mov	r3, r0
 80115b8:	e7f7      	b.n	80115aa <__any_on+0x26>
 80115ba:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80115be:	2900      	cmp	r1, #0
 80115c0:	d0f5      	beq.n	80115ae <__any_on+0x2a>
 80115c2:	2001      	movs	r0, #1
 80115c4:	e7f6      	b.n	80115b4 <__any_on+0x30>

080115c6 <_calloc_r>:
 80115c6:	b538      	push	{r3, r4, r5, lr}
 80115c8:	fb02 f401 	mul.w	r4, r2, r1
 80115cc:	4621      	mov	r1, r4
 80115ce:	f7fc fc09 	bl	800dde4 <_malloc_r>
 80115d2:	4605      	mov	r5, r0
 80115d4:	b118      	cbz	r0, 80115de <_calloc_r+0x18>
 80115d6:	4622      	mov	r2, r4
 80115d8:	2100      	movs	r1, #0
 80115da:	f7fc fbac 	bl	800dd36 <memset>
 80115de:	4628      	mov	r0, r5
 80115e0:	bd38      	pop	{r3, r4, r5, pc}

080115e2 <__ssputs_r>:
 80115e2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80115e6:	688e      	ldr	r6, [r1, #8]
 80115e8:	429e      	cmp	r6, r3
 80115ea:	4682      	mov	sl, r0
 80115ec:	460c      	mov	r4, r1
 80115ee:	4690      	mov	r8, r2
 80115f0:	4699      	mov	r9, r3
 80115f2:	d837      	bhi.n	8011664 <__ssputs_r+0x82>
 80115f4:	898a      	ldrh	r2, [r1, #12]
 80115f6:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80115fa:	d031      	beq.n	8011660 <__ssputs_r+0x7e>
 80115fc:	6825      	ldr	r5, [r4, #0]
 80115fe:	6909      	ldr	r1, [r1, #16]
 8011600:	1a6f      	subs	r7, r5, r1
 8011602:	6965      	ldr	r5, [r4, #20]
 8011604:	2302      	movs	r3, #2
 8011606:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801160a:	fb95 f5f3 	sdiv	r5, r5, r3
 801160e:	f109 0301 	add.w	r3, r9, #1
 8011612:	443b      	add	r3, r7
 8011614:	429d      	cmp	r5, r3
 8011616:	bf38      	it	cc
 8011618:	461d      	movcc	r5, r3
 801161a:	0553      	lsls	r3, r2, #21
 801161c:	d530      	bpl.n	8011680 <__ssputs_r+0x9e>
 801161e:	4629      	mov	r1, r5
 8011620:	f7fc fbe0 	bl	800dde4 <_malloc_r>
 8011624:	4606      	mov	r6, r0
 8011626:	b950      	cbnz	r0, 801163e <__ssputs_r+0x5c>
 8011628:	230c      	movs	r3, #12
 801162a:	f8ca 3000 	str.w	r3, [sl]
 801162e:	89a3      	ldrh	r3, [r4, #12]
 8011630:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011634:	81a3      	strh	r3, [r4, #12]
 8011636:	f04f 30ff 	mov.w	r0, #4294967295
 801163a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801163e:	463a      	mov	r2, r7
 8011640:	6921      	ldr	r1, [r4, #16]
 8011642:	f7fc fb6d 	bl	800dd20 <memcpy>
 8011646:	89a3      	ldrh	r3, [r4, #12]
 8011648:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801164c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011650:	81a3      	strh	r3, [r4, #12]
 8011652:	6126      	str	r6, [r4, #16]
 8011654:	6165      	str	r5, [r4, #20]
 8011656:	443e      	add	r6, r7
 8011658:	1bed      	subs	r5, r5, r7
 801165a:	6026      	str	r6, [r4, #0]
 801165c:	60a5      	str	r5, [r4, #8]
 801165e:	464e      	mov	r6, r9
 8011660:	454e      	cmp	r6, r9
 8011662:	d900      	bls.n	8011666 <__ssputs_r+0x84>
 8011664:	464e      	mov	r6, r9
 8011666:	4632      	mov	r2, r6
 8011668:	4641      	mov	r1, r8
 801166a:	6820      	ldr	r0, [r4, #0]
 801166c:	f000 fcb8 	bl	8011fe0 <memmove>
 8011670:	68a3      	ldr	r3, [r4, #8]
 8011672:	1b9b      	subs	r3, r3, r6
 8011674:	60a3      	str	r3, [r4, #8]
 8011676:	6823      	ldr	r3, [r4, #0]
 8011678:	441e      	add	r6, r3
 801167a:	6026      	str	r6, [r4, #0]
 801167c:	2000      	movs	r0, #0
 801167e:	e7dc      	b.n	801163a <__ssputs_r+0x58>
 8011680:	462a      	mov	r2, r5
 8011682:	f000 fcc6 	bl	8012012 <_realloc_r>
 8011686:	4606      	mov	r6, r0
 8011688:	2800      	cmp	r0, #0
 801168a:	d1e2      	bne.n	8011652 <__ssputs_r+0x70>
 801168c:	6921      	ldr	r1, [r4, #16]
 801168e:	4650      	mov	r0, sl
 8011690:	f7fc fb5a 	bl	800dd48 <_free_r>
 8011694:	e7c8      	b.n	8011628 <__ssputs_r+0x46>
	...

08011698 <_svfiprintf_r>:
 8011698:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801169c:	461d      	mov	r5, r3
 801169e:	898b      	ldrh	r3, [r1, #12]
 80116a0:	061f      	lsls	r7, r3, #24
 80116a2:	b09d      	sub	sp, #116	; 0x74
 80116a4:	4680      	mov	r8, r0
 80116a6:	460c      	mov	r4, r1
 80116a8:	4616      	mov	r6, r2
 80116aa:	d50f      	bpl.n	80116cc <_svfiprintf_r+0x34>
 80116ac:	690b      	ldr	r3, [r1, #16]
 80116ae:	b96b      	cbnz	r3, 80116cc <_svfiprintf_r+0x34>
 80116b0:	2140      	movs	r1, #64	; 0x40
 80116b2:	f7fc fb97 	bl	800dde4 <_malloc_r>
 80116b6:	6020      	str	r0, [r4, #0]
 80116b8:	6120      	str	r0, [r4, #16]
 80116ba:	b928      	cbnz	r0, 80116c8 <_svfiprintf_r+0x30>
 80116bc:	230c      	movs	r3, #12
 80116be:	f8c8 3000 	str.w	r3, [r8]
 80116c2:	f04f 30ff 	mov.w	r0, #4294967295
 80116c6:	e0c8      	b.n	801185a <_svfiprintf_r+0x1c2>
 80116c8:	2340      	movs	r3, #64	; 0x40
 80116ca:	6163      	str	r3, [r4, #20]
 80116cc:	2300      	movs	r3, #0
 80116ce:	9309      	str	r3, [sp, #36]	; 0x24
 80116d0:	2320      	movs	r3, #32
 80116d2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80116d6:	2330      	movs	r3, #48	; 0x30
 80116d8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80116dc:	9503      	str	r5, [sp, #12]
 80116de:	f04f 0b01 	mov.w	fp, #1
 80116e2:	4637      	mov	r7, r6
 80116e4:	463d      	mov	r5, r7
 80116e6:	f815 3b01 	ldrb.w	r3, [r5], #1
 80116ea:	b10b      	cbz	r3, 80116f0 <_svfiprintf_r+0x58>
 80116ec:	2b25      	cmp	r3, #37	; 0x25
 80116ee:	d13e      	bne.n	801176e <_svfiprintf_r+0xd6>
 80116f0:	ebb7 0a06 	subs.w	sl, r7, r6
 80116f4:	d00b      	beq.n	801170e <_svfiprintf_r+0x76>
 80116f6:	4653      	mov	r3, sl
 80116f8:	4632      	mov	r2, r6
 80116fa:	4621      	mov	r1, r4
 80116fc:	4640      	mov	r0, r8
 80116fe:	f7ff ff70 	bl	80115e2 <__ssputs_r>
 8011702:	3001      	adds	r0, #1
 8011704:	f000 80a4 	beq.w	8011850 <_svfiprintf_r+0x1b8>
 8011708:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801170a:	4453      	add	r3, sl
 801170c:	9309      	str	r3, [sp, #36]	; 0x24
 801170e:	783b      	ldrb	r3, [r7, #0]
 8011710:	2b00      	cmp	r3, #0
 8011712:	f000 809d 	beq.w	8011850 <_svfiprintf_r+0x1b8>
 8011716:	2300      	movs	r3, #0
 8011718:	f04f 32ff 	mov.w	r2, #4294967295
 801171c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011720:	9304      	str	r3, [sp, #16]
 8011722:	9307      	str	r3, [sp, #28]
 8011724:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8011728:	931a      	str	r3, [sp, #104]	; 0x68
 801172a:	462f      	mov	r7, r5
 801172c:	2205      	movs	r2, #5
 801172e:	f817 1b01 	ldrb.w	r1, [r7], #1
 8011732:	4850      	ldr	r0, [pc, #320]	; (8011874 <_svfiprintf_r+0x1dc>)
 8011734:	f7ee fd54 	bl	80001e0 <memchr>
 8011738:	9b04      	ldr	r3, [sp, #16]
 801173a:	b9d0      	cbnz	r0, 8011772 <_svfiprintf_r+0xda>
 801173c:	06d9      	lsls	r1, r3, #27
 801173e:	bf44      	itt	mi
 8011740:	2220      	movmi	r2, #32
 8011742:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8011746:	071a      	lsls	r2, r3, #28
 8011748:	bf44      	itt	mi
 801174a:	222b      	movmi	r2, #43	; 0x2b
 801174c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8011750:	782a      	ldrb	r2, [r5, #0]
 8011752:	2a2a      	cmp	r2, #42	; 0x2a
 8011754:	d015      	beq.n	8011782 <_svfiprintf_r+0xea>
 8011756:	9a07      	ldr	r2, [sp, #28]
 8011758:	462f      	mov	r7, r5
 801175a:	2000      	movs	r0, #0
 801175c:	250a      	movs	r5, #10
 801175e:	4639      	mov	r1, r7
 8011760:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011764:	3b30      	subs	r3, #48	; 0x30
 8011766:	2b09      	cmp	r3, #9
 8011768:	d94d      	bls.n	8011806 <_svfiprintf_r+0x16e>
 801176a:	b1b8      	cbz	r0, 801179c <_svfiprintf_r+0x104>
 801176c:	e00f      	b.n	801178e <_svfiprintf_r+0xf6>
 801176e:	462f      	mov	r7, r5
 8011770:	e7b8      	b.n	80116e4 <_svfiprintf_r+0x4c>
 8011772:	4a40      	ldr	r2, [pc, #256]	; (8011874 <_svfiprintf_r+0x1dc>)
 8011774:	1a80      	subs	r0, r0, r2
 8011776:	fa0b f000 	lsl.w	r0, fp, r0
 801177a:	4318      	orrs	r0, r3
 801177c:	9004      	str	r0, [sp, #16]
 801177e:	463d      	mov	r5, r7
 8011780:	e7d3      	b.n	801172a <_svfiprintf_r+0x92>
 8011782:	9a03      	ldr	r2, [sp, #12]
 8011784:	1d11      	adds	r1, r2, #4
 8011786:	6812      	ldr	r2, [r2, #0]
 8011788:	9103      	str	r1, [sp, #12]
 801178a:	2a00      	cmp	r2, #0
 801178c:	db01      	blt.n	8011792 <_svfiprintf_r+0xfa>
 801178e:	9207      	str	r2, [sp, #28]
 8011790:	e004      	b.n	801179c <_svfiprintf_r+0x104>
 8011792:	4252      	negs	r2, r2
 8011794:	f043 0302 	orr.w	r3, r3, #2
 8011798:	9207      	str	r2, [sp, #28]
 801179a:	9304      	str	r3, [sp, #16]
 801179c:	783b      	ldrb	r3, [r7, #0]
 801179e:	2b2e      	cmp	r3, #46	; 0x2e
 80117a0:	d10c      	bne.n	80117bc <_svfiprintf_r+0x124>
 80117a2:	787b      	ldrb	r3, [r7, #1]
 80117a4:	2b2a      	cmp	r3, #42	; 0x2a
 80117a6:	d133      	bne.n	8011810 <_svfiprintf_r+0x178>
 80117a8:	9b03      	ldr	r3, [sp, #12]
 80117aa:	1d1a      	adds	r2, r3, #4
 80117ac:	681b      	ldr	r3, [r3, #0]
 80117ae:	9203      	str	r2, [sp, #12]
 80117b0:	2b00      	cmp	r3, #0
 80117b2:	bfb8      	it	lt
 80117b4:	f04f 33ff 	movlt.w	r3, #4294967295
 80117b8:	3702      	adds	r7, #2
 80117ba:	9305      	str	r3, [sp, #20]
 80117bc:	4d2e      	ldr	r5, [pc, #184]	; (8011878 <_svfiprintf_r+0x1e0>)
 80117be:	7839      	ldrb	r1, [r7, #0]
 80117c0:	2203      	movs	r2, #3
 80117c2:	4628      	mov	r0, r5
 80117c4:	f7ee fd0c 	bl	80001e0 <memchr>
 80117c8:	b138      	cbz	r0, 80117da <_svfiprintf_r+0x142>
 80117ca:	2340      	movs	r3, #64	; 0x40
 80117cc:	1b40      	subs	r0, r0, r5
 80117ce:	fa03 f000 	lsl.w	r0, r3, r0
 80117d2:	9b04      	ldr	r3, [sp, #16]
 80117d4:	4303      	orrs	r3, r0
 80117d6:	3701      	adds	r7, #1
 80117d8:	9304      	str	r3, [sp, #16]
 80117da:	7839      	ldrb	r1, [r7, #0]
 80117dc:	4827      	ldr	r0, [pc, #156]	; (801187c <_svfiprintf_r+0x1e4>)
 80117de:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80117e2:	2206      	movs	r2, #6
 80117e4:	1c7e      	adds	r6, r7, #1
 80117e6:	f7ee fcfb 	bl	80001e0 <memchr>
 80117ea:	2800      	cmp	r0, #0
 80117ec:	d038      	beq.n	8011860 <_svfiprintf_r+0x1c8>
 80117ee:	4b24      	ldr	r3, [pc, #144]	; (8011880 <_svfiprintf_r+0x1e8>)
 80117f0:	bb13      	cbnz	r3, 8011838 <_svfiprintf_r+0x1a0>
 80117f2:	9b03      	ldr	r3, [sp, #12]
 80117f4:	3307      	adds	r3, #7
 80117f6:	f023 0307 	bic.w	r3, r3, #7
 80117fa:	3308      	adds	r3, #8
 80117fc:	9303      	str	r3, [sp, #12]
 80117fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011800:	444b      	add	r3, r9
 8011802:	9309      	str	r3, [sp, #36]	; 0x24
 8011804:	e76d      	b.n	80116e2 <_svfiprintf_r+0x4a>
 8011806:	fb05 3202 	mla	r2, r5, r2, r3
 801180a:	2001      	movs	r0, #1
 801180c:	460f      	mov	r7, r1
 801180e:	e7a6      	b.n	801175e <_svfiprintf_r+0xc6>
 8011810:	2300      	movs	r3, #0
 8011812:	3701      	adds	r7, #1
 8011814:	9305      	str	r3, [sp, #20]
 8011816:	4619      	mov	r1, r3
 8011818:	250a      	movs	r5, #10
 801181a:	4638      	mov	r0, r7
 801181c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011820:	3a30      	subs	r2, #48	; 0x30
 8011822:	2a09      	cmp	r2, #9
 8011824:	d903      	bls.n	801182e <_svfiprintf_r+0x196>
 8011826:	2b00      	cmp	r3, #0
 8011828:	d0c8      	beq.n	80117bc <_svfiprintf_r+0x124>
 801182a:	9105      	str	r1, [sp, #20]
 801182c:	e7c6      	b.n	80117bc <_svfiprintf_r+0x124>
 801182e:	fb05 2101 	mla	r1, r5, r1, r2
 8011832:	2301      	movs	r3, #1
 8011834:	4607      	mov	r7, r0
 8011836:	e7f0      	b.n	801181a <_svfiprintf_r+0x182>
 8011838:	ab03      	add	r3, sp, #12
 801183a:	9300      	str	r3, [sp, #0]
 801183c:	4622      	mov	r2, r4
 801183e:	4b11      	ldr	r3, [pc, #68]	; (8011884 <_svfiprintf_r+0x1ec>)
 8011840:	a904      	add	r1, sp, #16
 8011842:	4640      	mov	r0, r8
 8011844:	f7fc fbbc 	bl	800dfc0 <_printf_float>
 8011848:	f1b0 3fff 	cmp.w	r0, #4294967295
 801184c:	4681      	mov	r9, r0
 801184e:	d1d6      	bne.n	80117fe <_svfiprintf_r+0x166>
 8011850:	89a3      	ldrh	r3, [r4, #12]
 8011852:	065b      	lsls	r3, r3, #25
 8011854:	f53f af35 	bmi.w	80116c2 <_svfiprintf_r+0x2a>
 8011858:	9809      	ldr	r0, [sp, #36]	; 0x24
 801185a:	b01d      	add	sp, #116	; 0x74
 801185c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011860:	ab03      	add	r3, sp, #12
 8011862:	9300      	str	r3, [sp, #0]
 8011864:	4622      	mov	r2, r4
 8011866:	4b07      	ldr	r3, [pc, #28]	; (8011884 <_svfiprintf_r+0x1ec>)
 8011868:	a904      	add	r1, sp, #16
 801186a:	4640      	mov	r0, r8
 801186c:	f7fc fe5e 	bl	800e52c <_printf_i>
 8011870:	e7ea      	b.n	8011848 <_svfiprintf_r+0x1b0>
 8011872:	bf00      	nop
 8011874:	08012444 	.word	0x08012444
 8011878:	0801244a 	.word	0x0801244a
 801187c:	0801244e 	.word	0x0801244e
 8011880:	0800dfc1 	.word	0x0800dfc1
 8011884:	080115e3 	.word	0x080115e3

08011888 <__sfputc_r>:
 8011888:	6893      	ldr	r3, [r2, #8]
 801188a:	3b01      	subs	r3, #1
 801188c:	2b00      	cmp	r3, #0
 801188e:	b410      	push	{r4}
 8011890:	6093      	str	r3, [r2, #8]
 8011892:	da08      	bge.n	80118a6 <__sfputc_r+0x1e>
 8011894:	6994      	ldr	r4, [r2, #24]
 8011896:	42a3      	cmp	r3, r4
 8011898:	db01      	blt.n	801189e <__sfputc_r+0x16>
 801189a:	290a      	cmp	r1, #10
 801189c:	d103      	bne.n	80118a6 <__sfputc_r+0x1e>
 801189e:	f85d 4b04 	ldr.w	r4, [sp], #4
 80118a2:	f000 b987 	b.w	8011bb4 <__swbuf_r>
 80118a6:	6813      	ldr	r3, [r2, #0]
 80118a8:	1c58      	adds	r0, r3, #1
 80118aa:	6010      	str	r0, [r2, #0]
 80118ac:	7019      	strb	r1, [r3, #0]
 80118ae:	4608      	mov	r0, r1
 80118b0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80118b4:	4770      	bx	lr

080118b6 <__sfputs_r>:
 80118b6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80118b8:	4606      	mov	r6, r0
 80118ba:	460f      	mov	r7, r1
 80118bc:	4614      	mov	r4, r2
 80118be:	18d5      	adds	r5, r2, r3
 80118c0:	42ac      	cmp	r4, r5
 80118c2:	d101      	bne.n	80118c8 <__sfputs_r+0x12>
 80118c4:	2000      	movs	r0, #0
 80118c6:	e007      	b.n	80118d8 <__sfputs_r+0x22>
 80118c8:	463a      	mov	r2, r7
 80118ca:	f814 1b01 	ldrb.w	r1, [r4], #1
 80118ce:	4630      	mov	r0, r6
 80118d0:	f7ff ffda 	bl	8011888 <__sfputc_r>
 80118d4:	1c43      	adds	r3, r0, #1
 80118d6:	d1f3      	bne.n	80118c0 <__sfputs_r+0xa>
 80118d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080118dc <_vfiprintf_r>:
 80118dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80118e0:	460c      	mov	r4, r1
 80118e2:	b09d      	sub	sp, #116	; 0x74
 80118e4:	4617      	mov	r7, r2
 80118e6:	461d      	mov	r5, r3
 80118e8:	4606      	mov	r6, r0
 80118ea:	b118      	cbz	r0, 80118f4 <_vfiprintf_r+0x18>
 80118ec:	6983      	ldr	r3, [r0, #24]
 80118ee:	b90b      	cbnz	r3, 80118f4 <_vfiprintf_r+0x18>
 80118f0:	f7fe fe92 	bl	8010618 <__sinit>
 80118f4:	4b7c      	ldr	r3, [pc, #496]	; (8011ae8 <_vfiprintf_r+0x20c>)
 80118f6:	429c      	cmp	r4, r3
 80118f8:	d158      	bne.n	80119ac <_vfiprintf_r+0xd0>
 80118fa:	6874      	ldr	r4, [r6, #4]
 80118fc:	89a3      	ldrh	r3, [r4, #12]
 80118fe:	0718      	lsls	r0, r3, #28
 8011900:	d55e      	bpl.n	80119c0 <_vfiprintf_r+0xe4>
 8011902:	6923      	ldr	r3, [r4, #16]
 8011904:	2b00      	cmp	r3, #0
 8011906:	d05b      	beq.n	80119c0 <_vfiprintf_r+0xe4>
 8011908:	2300      	movs	r3, #0
 801190a:	9309      	str	r3, [sp, #36]	; 0x24
 801190c:	2320      	movs	r3, #32
 801190e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8011912:	2330      	movs	r3, #48	; 0x30
 8011914:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8011918:	9503      	str	r5, [sp, #12]
 801191a:	f04f 0b01 	mov.w	fp, #1
 801191e:	46b8      	mov	r8, r7
 8011920:	4645      	mov	r5, r8
 8011922:	f815 3b01 	ldrb.w	r3, [r5], #1
 8011926:	b10b      	cbz	r3, 801192c <_vfiprintf_r+0x50>
 8011928:	2b25      	cmp	r3, #37	; 0x25
 801192a:	d154      	bne.n	80119d6 <_vfiprintf_r+0xfa>
 801192c:	ebb8 0a07 	subs.w	sl, r8, r7
 8011930:	d00b      	beq.n	801194a <_vfiprintf_r+0x6e>
 8011932:	4653      	mov	r3, sl
 8011934:	463a      	mov	r2, r7
 8011936:	4621      	mov	r1, r4
 8011938:	4630      	mov	r0, r6
 801193a:	f7ff ffbc 	bl	80118b6 <__sfputs_r>
 801193e:	3001      	adds	r0, #1
 8011940:	f000 80c2 	beq.w	8011ac8 <_vfiprintf_r+0x1ec>
 8011944:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011946:	4453      	add	r3, sl
 8011948:	9309      	str	r3, [sp, #36]	; 0x24
 801194a:	f898 3000 	ldrb.w	r3, [r8]
 801194e:	2b00      	cmp	r3, #0
 8011950:	f000 80ba 	beq.w	8011ac8 <_vfiprintf_r+0x1ec>
 8011954:	2300      	movs	r3, #0
 8011956:	f04f 32ff 	mov.w	r2, #4294967295
 801195a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801195e:	9304      	str	r3, [sp, #16]
 8011960:	9307      	str	r3, [sp, #28]
 8011962:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8011966:	931a      	str	r3, [sp, #104]	; 0x68
 8011968:	46a8      	mov	r8, r5
 801196a:	2205      	movs	r2, #5
 801196c:	f818 1b01 	ldrb.w	r1, [r8], #1
 8011970:	485e      	ldr	r0, [pc, #376]	; (8011aec <_vfiprintf_r+0x210>)
 8011972:	f7ee fc35 	bl	80001e0 <memchr>
 8011976:	9b04      	ldr	r3, [sp, #16]
 8011978:	bb78      	cbnz	r0, 80119da <_vfiprintf_r+0xfe>
 801197a:	06d9      	lsls	r1, r3, #27
 801197c:	bf44      	itt	mi
 801197e:	2220      	movmi	r2, #32
 8011980:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8011984:	071a      	lsls	r2, r3, #28
 8011986:	bf44      	itt	mi
 8011988:	222b      	movmi	r2, #43	; 0x2b
 801198a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 801198e:	782a      	ldrb	r2, [r5, #0]
 8011990:	2a2a      	cmp	r2, #42	; 0x2a
 8011992:	d02a      	beq.n	80119ea <_vfiprintf_r+0x10e>
 8011994:	9a07      	ldr	r2, [sp, #28]
 8011996:	46a8      	mov	r8, r5
 8011998:	2000      	movs	r0, #0
 801199a:	250a      	movs	r5, #10
 801199c:	4641      	mov	r1, r8
 801199e:	f811 3b01 	ldrb.w	r3, [r1], #1
 80119a2:	3b30      	subs	r3, #48	; 0x30
 80119a4:	2b09      	cmp	r3, #9
 80119a6:	d969      	bls.n	8011a7c <_vfiprintf_r+0x1a0>
 80119a8:	b360      	cbz	r0, 8011a04 <_vfiprintf_r+0x128>
 80119aa:	e024      	b.n	80119f6 <_vfiprintf_r+0x11a>
 80119ac:	4b50      	ldr	r3, [pc, #320]	; (8011af0 <_vfiprintf_r+0x214>)
 80119ae:	429c      	cmp	r4, r3
 80119b0:	d101      	bne.n	80119b6 <_vfiprintf_r+0xda>
 80119b2:	68b4      	ldr	r4, [r6, #8]
 80119b4:	e7a2      	b.n	80118fc <_vfiprintf_r+0x20>
 80119b6:	4b4f      	ldr	r3, [pc, #316]	; (8011af4 <_vfiprintf_r+0x218>)
 80119b8:	429c      	cmp	r4, r3
 80119ba:	bf08      	it	eq
 80119bc:	68f4      	ldreq	r4, [r6, #12]
 80119be:	e79d      	b.n	80118fc <_vfiprintf_r+0x20>
 80119c0:	4621      	mov	r1, r4
 80119c2:	4630      	mov	r0, r6
 80119c4:	f000 f968 	bl	8011c98 <__swsetup_r>
 80119c8:	2800      	cmp	r0, #0
 80119ca:	d09d      	beq.n	8011908 <_vfiprintf_r+0x2c>
 80119cc:	f04f 30ff 	mov.w	r0, #4294967295
 80119d0:	b01d      	add	sp, #116	; 0x74
 80119d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80119d6:	46a8      	mov	r8, r5
 80119d8:	e7a2      	b.n	8011920 <_vfiprintf_r+0x44>
 80119da:	4a44      	ldr	r2, [pc, #272]	; (8011aec <_vfiprintf_r+0x210>)
 80119dc:	1a80      	subs	r0, r0, r2
 80119de:	fa0b f000 	lsl.w	r0, fp, r0
 80119e2:	4318      	orrs	r0, r3
 80119e4:	9004      	str	r0, [sp, #16]
 80119e6:	4645      	mov	r5, r8
 80119e8:	e7be      	b.n	8011968 <_vfiprintf_r+0x8c>
 80119ea:	9a03      	ldr	r2, [sp, #12]
 80119ec:	1d11      	adds	r1, r2, #4
 80119ee:	6812      	ldr	r2, [r2, #0]
 80119f0:	9103      	str	r1, [sp, #12]
 80119f2:	2a00      	cmp	r2, #0
 80119f4:	db01      	blt.n	80119fa <_vfiprintf_r+0x11e>
 80119f6:	9207      	str	r2, [sp, #28]
 80119f8:	e004      	b.n	8011a04 <_vfiprintf_r+0x128>
 80119fa:	4252      	negs	r2, r2
 80119fc:	f043 0302 	orr.w	r3, r3, #2
 8011a00:	9207      	str	r2, [sp, #28]
 8011a02:	9304      	str	r3, [sp, #16]
 8011a04:	f898 3000 	ldrb.w	r3, [r8]
 8011a08:	2b2e      	cmp	r3, #46	; 0x2e
 8011a0a:	d10e      	bne.n	8011a2a <_vfiprintf_r+0x14e>
 8011a0c:	f898 3001 	ldrb.w	r3, [r8, #1]
 8011a10:	2b2a      	cmp	r3, #42	; 0x2a
 8011a12:	d138      	bne.n	8011a86 <_vfiprintf_r+0x1aa>
 8011a14:	9b03      	ldr	r3, [sp, #12]
 8011a16:	1d1a      	adds	r2, r3, #4
 8011a18:	681b      	ldr	r3, [r3, #0]
 8011a1a:	9203      	str	r2, [sp, #12]
 8011a1c:	2b00      	cmp	r3, #0
 8011a1e:	bfb8      	it	lt
 8011a20:	f04f 33ff 	movlt.w	r3, #4294967295
 8011a24:	f108 0802 	add.w	r8, r8, #2
 8011a28:	9305      	str	r3, [sp, #20]
 8011a2a:	4d33      	ldr	r5, [pc, #204]	; (8011af8 <_vfiprintf_r+0x21c>)
 8011a2c:	f898 1000 	ldrb.w	r1, [r8]
 8011a30:	2203      	movs	r2, #3
 8011a32:	4628      	mov	r0, r5
 8011a34:	f7ee fbd4 	bl	80001e0 <memchr>
 8011a38:	b140      	cbz	r0, 8011a4c <_vfiprintf_r+0x170>
 8011a3a:	2340      	movs	r3, #64	; 0x40
 8011a3c:	1b40      	subs	r0, r0, r5
 8011a3e:	fa03 f000 	lsl.w	r0, r3, r0
 8011a42:	9b04      	ldr	r3, [sp, #16]
 8011a44:	4303      	orrs	r3, r0
 8011a46:	f108 0801 	add.w	r8, r8, #1
 8011a4a:	9304      	str	r3, [sp, #16]
 8011a4c:	f898 1000 	ldrb.w	r1, [r8]
 8011a50:	482a      	ldr	r0, [pc, #168]	; (8011afc <_vfiprintf_r+0x220>)
 8011a52:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8011a56:	2206      	movs	r2, #6
 8011a58:	f108 0701 	add.w	r7, r8, #1
 8011a5c:	f7ee fbc0 	bl	80001e0 <memchr>
 8011a60:	2800      	cmp	r0, #0
 8011a62:	d037      	beq.n	8011ad4 <_vfiprintf_r+0x1f8>
 8011a64:	4b26      	ldr	r3, [pc, #152]	; (8011b00 <_vfiprintf_r+0x224>)
 8011a66:	bb1b      	cbnz	r3, 8011ab0 <_vfiprintf_r+0x1d4>
 8011a68:	9b03      	ldr	r3, [sp, #12]
 8011a6a:	3307      	adds	r3, #7
 8011a6c:	f023 0307 	bic.w	r3, r3, #7
 8011a70:	3308      	adds	r3, #8
 8011a72:	9303      	str	r3, [sp, #12]
 8011a74:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011a76:	444b      	add	r3, r9
 8011a78:	9309      	str	r3, [sp, #36]	; 0x24
 8011a7a:	e750      	b.n	801191e <_vfiprintf_r+0x42>
 8011a7c:	fb05 3202 	mla	r2, r5, r2, r3
 8011a80:	2001      	movs	r0, #1
 8011a82:	4688      	mov	r8, r1
 8011a84:	e78a      	b.n	801199c <_vfiprintf_r+0xc0>
 8011a86:	2300      	movs	r3, #0
 8011a88:	f108 0801 	add.w	r8, r8, #1
 8011a8c:	9305      	str	r3, [sp, #20]
 8011a8e:	4619      	mov	r1, r3
 8011a90:	250a      	movs	r5, #10
 8011a92:	4640      	mov	r0, r8
 8011a94:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011a98:	3a30      	subs	r2, #48	; 0x30
 8011a9a:	2a09      	cmp	r2, #9
 8011a9c:	d903      	bls.n	8011aa6 <_vfiprintf_r+0x1ca>
 8011a9e:	2b00      	cmp	r3, #0
 8011aa0:	d0c3      	beq.n	8011a2a <_vfiprintf_r+0x14e>
 8011aa2:	9105      	str	r1, [sp, #20]
 8011aa4:	e7c1      	b.n	8011a2a <_vfiprintf_r+0x14e>
 8011aa6:	fb05 2101 	mla	r1, r5, r1, r2
 8011aaa:	2301      	movs	r3, #1
 8011aac:	4680      	mov	r8, r0
 8011aae:	e7f0      	b.n	8011a92 <_vfiprintf_r+0x1b6>
 8011ab0:	ab03      	add	r3, sp, #12
 8011ab2:	9300      	str	r3, [sp, #0]
 8011ab4:	4622      	mov	r2, r4
 8011ab6:	4b13      	ldr	r3, [pc, #76]	; (8011b04 <_vfiprintf_r+0x228>)
 8011ab8:	a904      	add	r1, sp, #16
 8011aba:	4630      	mov	r0, r6
 8011abc:	f7fc fa80 	bl	800dfc0 <_printf_float>
 8011ac0:	f1b0 3fff 	cmp.w	r0, #4294967295
 8011ac4:	4681      	mov	r9, r0
 8011ac6:	d1d5      	bne.n	8011a74 <_vfiprintf_r+0x198>
 8011ac8:	89a3      	ldrh	r3, [r4, #12]
 8011aca:	065b      	lsls	r3, r3, #25
 8011acc:	f53f af7e 	bmi.w	80119cc <_vfiprintf_r+0xf0>
 8011ad0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8011ad2:	e77d      	b.n	80119d0 <_vfiprintf_r+0xf4>
 8011ad4:	ab03      	add	r3, sp, #12
 8011ad6:	9300      	str	r3, [sp, #0]
 8011ad8:	4622      	mov	r2, r4
 8011ada:	4b0a      	ldr	r3, [pc, #40]	; (8011b04 <_vfiprintf_r+0x228>)
 8011adc:	a904      	add	r1, sp, #16
 8011ade:	4630      	mov	r0, r6
 8011ae0:	f7fc fd24 	bl	800e52c <_printf_i>
 8011ae4:	e7ec      	b.n	8011ac0 <_vfiprintf_r+0x1e4>
 8011ae6:	bf00      	nop
 8011ae8:	080122f8 	.word	0x080122f8
 8011aec:	08012444 	.word	0x08012444
 8011af0:	08012318 	.word	0x08012318
 8011af4:	080122d8 	.word	0x080122d8
 8011af8:	0801244a 	.word	0x0801244a
 8011afc:	0801244e 	.word	0x0801244e
 8011b00:	0800dfc1 	.word	0x0800dfc1
 8011b04:	080118b7 	.word	0x080118b7

08011b08 <__sread>:
 8011b08:	b510      	push	{r4, lr}
 8011b0a:	460c      	mov	r4, r1
 8011b0c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011b10:	f000 faa6 	bl	8012060 <_read_r>
 8011b14:	2800      	cmp	r0, #0
 8011b16:	bfab      	itete	ge
 8011b18:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8011b1a:	89a3      	ldrhlt	r3, [r4, #12]
 8011b1c:	181b      	addge	r3, r3, r0
 8011b1e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8011b22:	bfac      	ite	ge
 8011b24:	6563      	strge	r3, [r4, #84]	; 0x54
 8011b26:	81a3      	strhlt	r3, [r4, #12]
 8011b28:	bd10      	pop	{r4, pc}

08011b2a <__swrite>:
 8011b2a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011b2e:	461f      	mov	r7, r3
 8011b30:	898b      	ldrh	r3, [r1, #12]
 8011b32:	05db      	lsls	r3, r3, #23
 8011b34:	4605      	mov	r5, r0
 8011b36:	460c      	mov	r4, r1
 8011b38:	4616      	mov	r6, r2
 8011b3a:	d505      	bpl.n	8011b48 <__swrite+0x1e>
 8011b3c:	2302      	movs	r3, #2
 8011b3e:	2200      	movs	r2, #0
 8011b40:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011b44:	f000 f9d6 	bl	8011ef4 <_lseek_r>
 8011b48:	89a3      	ldrh	r3, [r4, #12]
 8011b4a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011b4e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8011b52:	81a3      	strh	r3, [r4, #12]
 8011b54:	4632      	mov	r2, r6
 8011b56:	463b      	mov	r3, r7
 8011b58:	4628      	mov	r0, r5
 8011b5a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011b5e:	f000 b889 	b.w	8011c74 <_write_r>

08011b62 <__sseek>:
 8011b62:	b510      	push	{r4, lr}
 8011b64:	460c      	mov	r4, r1
 8011b66:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011b6a:	f000 f9c3 	bl	8011ef4 <_lseek_r>
 8011b6e:	1c43      	adds	r3, r0, #1
 8011b70:	89a3      	ldrh	r3, [r4, #12]
 8011b72:	bf15      	itete	ne
 8011b74:	6560      	strne	r0, [r4, #84]	; 0x54
 8011b76:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8011b7a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8011b7e:	81a3      	strheq	r3, [r4, #12]
 8011b80:	bf18      	it	ne
 8011b82:	81a3      	strhne	r3, [r4, #12]
 8011b84:	bd10      	pop	{r4, pc}

08011b86 <__sclose>:
 8011b86:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011b8a:	f000 b8f3 	b.w	8011d74 <_close_r>

08011b8e <strncmp>:
 8011b8e:	b510      	push	{r4, lr}
 8011b90:	b16a      	cbz	r2, 8011bae <strncmp+0x20>
 8011b92:	3901      	subs	r1, #1
 8011b94:	1884      	adds	r4, r0, r2
 8011b96:	f810 3b01 	ldrb.w	r3, [r0], #1
 8011b9a:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8011b9e:	4293      	cmp	r3, r2
 8011ba0:	d103      	bne.n	8011baa <strncmp+0x1c>
 8011ba2:	42a0      	cmp	r0, r4
 8011ba4:	d001      	beq.n	8011baa <strncmp+0x1c>
 8011ba6:	2b00      	cmp	r3, #0
 8011ba8:	d1f5      	bne.n	8011b96 <strncmp+0x8>
 8011baa:	1a98      	subs	r0, r3, r2
 8011bac:	bd10      	pop	{r4, pc}
 8011bae:	4610      	mov	r0, r2
 8011bb0:	e7fc      	b.n	8011bac <strncmp+0x1e>
	...

08011bb4 <__swbuf_r>:
 8011bb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011bb6:	460e      	mov	r6, r1
 8011bb8:	4614      	mov	r4, r2
 8011bba:	4605      	mov	r5, r0
 8011bbc:	b118      	cbz	r0, 8011bc6 <__swbuf_r+0x12>
 8011bbe:	6983      	ldr	r3, [r0, #24]
 8011bc0:	b90b      	cbnz	r3, 8011bc6 <__swbuf_r+0x12>
 8011bc2:	f7fe fd29 	bl	8010618 <__sinit>
 8011bc6:	4b21      	ldr	r3, [pc, #132]	; (8011c4c <__swbuf_r+0x98>)
 8011bc8:	429c      	cmp	r4, r3
 8011bca:	d12a      	bne.n	8011c22 <__swbuf_r+0x6e>
 8011bcc:	686c      	ldr	r4, [r5, #4]
 8011bce:	69a3      	ldr	r3, [r4, #24]
 8011bd0:	60a3      	str	r3, [r4, #8]
 8011bd2:	89a3      	ldrh	r3, [r4, #12]
 8011bd4:	071a      	lsls	r2, r3, #28
 8011bd6:	d52e      	bpl.n	8011c36 <__swbuf_r+0x82>
 8011bd8:	6923      	ldr	r3, [r4, #16]
 8011bda:	b363      	cbz	r3, 8011c36 <__swbuf_r+0x82>
 8011bdc:	6923      	ldr	r3, [r4, #16]
 8011bde:	6820      	ldr	r0, [r4, #0]
 8011be0:	1ac0      	subs	r0, r0, r3
 8011be2:	6963      	ldr	r3, [r4, #20]
 8011be4:	b2f6      	uxtb	r6, r6
 8011be6:	4283      	cmp	r3, r0
 8011be8:	4637      	mov	r7, r6
 8011bea:	dc04      	bgt.n	8011bf6 <__swbuf_r+0x42>
 8011bec:	4621      	mov	r1, r4
 8011bee:	4628      	mov	r0, r5
 8011bf0:	f000 f956 	bl	8011ea0 <_fflush_r>
 8011bf4:	bb28      	cbnz	r0, 8011c42 <__swbuf_r+0x8e>
 8011bf6:	68a3      	ldr	r3, [r4, #8]
 8011bf8:	3b01      	subs	r3, #1
 8011bfa:	60a3      	str	r3, [r4, #8]
 8011bfc:	6823      	ldr	r3, [r4, #0]
 8011bfe:	1c5a      	adds	r2, r3, #1
 8011c00:	6022      	str	r2, [r4, #0]
 8011c02:	701e      	strb	r6, [r3, #0]
 8011c04:	6963      	ldr	r3, [r4, #20]
 8011c06:	3001      	adds	r0, #1
 8011c08:	4283      	cmp	r3, r0
 8011c0a:	d004      	beq.n	8011c16 <__swbuf_r+0x62>
 8011c0c:	89a3      	ldrh	r3, [r4, #12]
 8011c0e:	07db      	lsls	r3, r3, #31
 8011c10:	d519      	bpl.n	8011c46 <__swbuf_r+0x92>
 8011c12:	2e0a      	cmp	r6, #10
 8011c14:	d117      	bne.n	8011c46 <__swbuf_r+0x92>
 8011c16:	4621      	mov	r1, r4
 8011c18:	4628      	mov	r0, r5
 8011c1a:	f000 f941 	bl	8011ea0 <_fflush_r>
 8011c1e:	b190      	cbz	r0, 8011c46 <__swbuf_r+0x92>
 8011c20:	e00f      	b.n	8011c42 <__swbuf_r+0x8e>
 8011c22:	4b0b      	ldr	r3, [pc, #44]	; (8011c50 <__swbuf_r+0x9c>)
 8011c24:	429c      	cmp	r4, r3
 8011c26:	d101      	bne.n	8011c2c <__swbuf_r+0x78>
 8011c28:	68ac      	ldr	r4, [r5, #8]
 8011c2a:	e7d0      	b.n	8011bce <__swbuf_r+0x1a>
 8011c2c:	4b09      	ldr	r3, [pc, #36]	; (8011c54 <__swbuf_r+0xa0>)
 8011c2e:	429c      	cmp	r4, r3
 8011c30:	bf08      	it	eq
 8011c32:	68ec      	ldreq	r4, [r5, #12]
 8011c34:	e7cb      	b.n	8011bce <__swbuf_r+0x1a>
 8011c36:	4621      	mov	r1, r4
 8011c38:	4628      	mov	r0, r5
 8011c3a:	f000 f82d 	bl	8011c98 <__swsetup_r>
 8011c3e:	2800      	cmp	r0, #0
 8011c40:	d0cc      	beq.n	8011bdc <__swbuf_r+0x28>
 8011c42:	f04f 37ff 	mov.w	r7, #4294967295
 8011c46:	4638      	mov	r0, r7
 8011c48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011c4a:	bf00      	nop
 8011c4c:	080122f8 	.word	0x080122f8
 8011c50:	08012318 	.word	0x08012318
 8011c54:	080122d8 	.word	0x080122d8

08011c58 <__ascii_wctomb>:
 8011c58:	b149      	cbz	r1, 8011c6e <__ascii_wctomb+0x16>
 8011c5a:	2aff      	cmp	r2, #255	; 0xff
 8011c5c:	bf85      	ittet	hi
 8011c5e:	238a      	movhi	r3, #138	; 0x8a
 8011c60:	6003      	strhi	r3, [r0, #0]
 8011c62:	700a      	strbls	r2, [r1, #0]
 8011c64:	f04f 30ff 	movhi.w	r0, #4294967295
 8011c68:	bf98      	it	ls
 8011c6a:	2001      	movls	r0, #1
 8011c6c:	4770      	bx	lr
 8011c6e:	4608      	mov	r0, r1
 8011c70:	4770      	bx	lr
	...

08011c74 <_write_r>:
 8011c74:	b538      	push	{r3, r4, r5, lr}
 8011c76:	4c07      	ldr	r4, [pc, #28]	; (8011c94 <_write_r+0x20>)
 8011c78:	4605      	mov	r5, r0
 8011c7a:	4608      	mov	r0, r1
 8011c7c:	4611      	mov	r1, r2
 8011c7e:	2200      	movs	r2, #0
 8011c80:	6022      	str	r2, [r4, #0]
 8011c82:	461a      	mov	r2, r3
 8011c84:	f7f1 f8c5 	bl	8002e12 <_write>
 8011c88:	1c43      	adds	r3, r0, #1
 8011c8a:	d102      	bne.n	8011c92 <_write_r+0x1e>
 8011c8c:	6823      	ldr	r3, [r4, #0]
 8011c8e:	b103      	cbz	r3, 8011c92 <_write_r+0x1e>
 8011c90:	602b      	str	r3, [r5, #0]
 8011c92:	bd38      	pop	{r3, r4, r5, pc}
 8011c94:	20002970 	.word	0x20002970

08011c98 <__swsetup_r>:
 8011c98:	4b32      	ldr	r3, [pc, #200]	; (8011d64 <__swsetup_r+0xcc>)
 8011c9a:	b570      	push	{r4, r5, r6, lr}
 8011c9c:	681d      	ldr	r5, [r3, #0]
 8011c9e:	4606      	mov	r6, r0
 8011ca0:	460c      	mov	r4, r1
 8011ca2:	b125      	cbz	r5, 8011cae <__swsetup_r+0x16>
 8011ca4:	69ab      	ldr	r3, [r5, #24]
 8011ca6:	b913      	cbnz	r3, 8011cae <__swsetup_r+0x16>
 8011ca8:	4628      	mov	r0, r5
 8011caa:	f7fe fcb5 	bl	8010618 <__sinit>
 8011cae:	4b2e      	ldr	r3, [pc, #184]	; (8011d68 <__swsetup_r+0xd0>)
 8011cb0:	429c      	cmp	r4, r3
 8011cb2:	d10f      	bne.n	8011cd4 <__swsetup_r+0x3c>
 8011cb4:	686c      	ldr	r4, [r5, #4]
 8011cb6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011cba:	b29a      	uxth	r2, r3
 8011cbc:	0715      	lsls	r5, r2, #28
 8011cbe:	d42c      	bmi.n	8011d1a <__swsetup_r+0x82>
 8011cc0:	06d0      	lsls	r0, r2, #27
 8011cc2:	d411      	bmi.n	8011ce8 <__swsetup_r+0x50>
 8011cc4:	2209      	movs	r2, #9
 8011cc6:	6032      	str	r2, [r6, #0]
 8011cc8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011ccc:	81a3      	strh	r3, [r4, #12]
 8011cce:	f04f 30ff 	mov.w	r0, #4294967295
 8011cd2:	e03e      	b.n	8011d52 <__swsetup_r+0xba>
 8011cd4:	4b25      	ldr	r3, [pc, #148]	; (8011d6c <__swsetup_r+0xd4>)
 8011cd6:	429c      	cmp	r4, r3
 8011cd8:	d101      	bne.n	8011cde <__swsetup_r+0x46>
 8011cda:	68ac      	ldr	r4, [r5, #8]
 8011cdc:	e7eb      	b.n	8011cb6 <__swsetup_r+0x1e>
 8011cde:	4b24      	ldr	r3, [pc, #144]	; (8011d70 <__swsetup_r+0xd8>)
 8011ce0:	429c      	cmp	r4, r3
 8011ce2:	bf08      	it	eq
 8011ce4:	68ec      	ldreq	r4, [r5, #12]
 8011ce6:	e7e6      	b.n	8011cb6 <__swsetup_r+0x1e>
 8011ce8:	0751      	lsls	r1, r2, #29
 8011cea:	d512      	bpl.n	8011d12 <__swsetup_r+0x7a>
 8011cec:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8011cee:	b141      	cbz	r1, 8011d02 <__swsetup_r+0x6a>
 8011cf0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8011cf4:	4299      	cmp	r1, r3
 8011cf6:	d002      	beq.n	8011cfe <__swsetup_r+0x66>
 8011cf8:	4630      	mov	r0, r6
 8011cfa:	f7fc f825 	bl	800dd48 <_free_r>
 8011cfe:	2300      	movs	r3, #0
 8011d00:	6363      	str	r3, [r4, #52]	; 0x34
 8011d02:	89a3      	ldrh	r3, [r4, #12]
 8011d04:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8011d08:	81a3      	strh	r3, [r4, #12]
 8011d0a:	2300      	movs	r3, #0
 8011d0c:	6063      	str	r3, [r4, #4]
 8011d0e:	6923      	ldr	r3, [r4, #16]
 8011d10:	6023      	str	r3, [r4, #0]
 8011d12:	89a3      	ldrh	r3, [r4, #12]
 8011d14:	f043 0308 	orr.w	r3, r3, #8
 8011d18:	81a3      	strh	r3, [r4, #12]
 8011d1a:	6923      	ldr	r3, [r4, #16]
 8011d1c:	b94b      	cbnz	r3, 8011d32 <__swsetup_r+0x9a>
 8011d1e:	89a3      	ldrh	r3, [r4, #12]
 8011d20:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8011d24:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8011d28:	d003      	beq.n	8011d32 <__swsetup_r+0x9a>
 8011d2a:	4621      	mov	r1, r4
 8011d2c:	4630      	mov	r0, r6
 8011d2e:	f000 f917 	bl	8011f60 <__smakebuf_r>
 8011d32:	89a2      	ldrh	r2, [r4, #12]
 8011d34:	f012 0301 	ands.w	r3, r2, #1
 8011d38:	d00c      	beq.n	8011d54 <__swsetup_r+0xbc>
 8011d3a:	2300      	movs	r3, #0
 8011d3c:	60a3      	str	r3, [r4, #8]
 8011d3e:	6963      	ldr	r3, [r4, #20]
 8011d40:	425b      	negs	r3, r3
 8011d42:	61a3      	str	r3, [r4, #24]
 8011d44:	6923      	ldr	r3, [r4, #16]
 8011d46:	b953      	cbnz	r3, 8011d5e <__swsetup_r+0xc6>
 8011d48:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011d4c:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8011d50:	d1ba      	bne.n	8011cc8 <__swsetup_r+0x30>
 8011d52:	bd70      	pop	{r4, r5, r6, pc}
 8011d54:	0792      	lsls	r2, r2, #30
 8011d56:	bf58      	it	pl
 8011d58:	6963      	ldrpl	r3, [r4, #20]
 8011d5a:	60a3      	str	r3, [r4, #8]
 8011d5c:	e7f2      	b.n	8011d44 <__swsetup_r+0xac>
 8011d5e:	2000      	movs	r0, #0
 8011d60:	e7f7      	b.n	8011d52 <__swsetup_r+0xba>
 8011d62:	bf00      	nop
 8011d64:	20000190 	.word	0x20000190
 8011d68:	080122f8 	.word	0x080122f8
 8011d6c:	08012318 	.word	0x08012318
 8011d70:	080122d8 	.word	0x080122d8

08011d74 <_close_r>:
 8011d74:	b538      	push	{r3, r4, r5, lr}
 8011d76:	4c06      	ldr	r4, [pc, #24]	; (8011d90 <_close_r+0x1c>)
 8011d78:	2300      	movs	r3, #0
 8011d7a:	4605      	mov	r5, r0
 8011d7c:	4608      	mov	r0, r1
 8011d7e:	6023      	str	r3, [r4, #0]
 8011d80:	f7f1 f863 	bl	8002e4a <_close>
 8011d84:	1c43      	adds	r3, r0, #1
 8011d86:	d102      	bne.n	8011d8e <_close_r+0x1a>
 8011d88:	6823      	ldr	r3, [r4, #0]
 8011d8a:	b103      	cbz	r3, 8011d8e <_close_r+0x1a>
 8011d8c:	602b      	str	r3, [r5, #0]
 8011d8e:	bd38      	pop	{r3, r4, r5, pc}
 8011d90:	20002970 	.word	0x20002970

08011d94 <__sflush_r>:
 8011d94:	898a      	ldrh	r2, [r1, #12]
 8011d96:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011d9a:	4605      	mov	r5, r0
 8011d9c:	0710      	lsls	r0, r2, #28
 8011d9e:	460c      	mov	r4, r1
 8011da0:	d458      	bmi.n	8011e54 <__sflush_r+0xc0>
 8011da2:	684b      	ldr	r3, [r1, #4]
 8011da4:	2b00      	cmp	r3, #0
 8011da6:	dc05      	bgt.n	8011db4 <__sflush_r+0x20>
 8011da8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8011daa:	2b00      	cmp	r3, #0
 8011dac:	dc02      	bgt.n	8011db4 <__sflush_r+0x20>
 8011dae:	2000      	movs	r0, #0
 8011db0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011db4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8011db6:	2e00      	cmp	r6, #0
 8011db8:	d0f9      	beq.n	8011dae <__sflush_r+0x1a>
 8011dba:	2300      	movs	r3, #0
 8011dbc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8011dc0:	682f      	ldr	r7, [r5, #0]
 8011dc2:	6a21      	ldr	r1, [r4, #32]
 8011dc4:	602b      	str	r3, [r5, #0]
 8011dc6:	d032      	beq.n	8011e2e <__sflush_r+0x9a>
 8011dc8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8011dca:	89a3      	ldrh	r3, [r4, #12]
 8011dcc:	075a      	lsls	r2, r3, #29
 8011dce:	d505      	bpl.n	8011ddc <__sflush_r+0x48>
 8011dd0:	6863      	ldr	r3, [r4, #4]
 8011dd2:	1ac0      	subs	r0, r0, r3
 8011dd4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8011dd6:	b10b      	cbz	r3, 8011ddc <__sflush_r+0x48>
 8011dd8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8011dda:	1ac0      	subs	r0, r0, r3
 8011ddc:	2300      	movs	r3, #0
 8011dde:	4602      	mov	r2, r0
 8011de0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8011de2:	6a21      	ldr	r1, [r4, #32]
 8011de4:	4628      	mov	r0, r5
 8011de6:	47b0      	blx	r6
 8011de8:	1c43      	adds	r3, r0, #1
 8011dea:	89a3      	ldrh	r3, [r4, #12]
 8011dec:	d106      	bne.n	8011dfc <__sflush_r+0x68>
 8011dee:	6829      	ldr	r1, [r5, #0]
 8011df0:	291d      	cmp	r1, #29
 8011df2:	d848      	bhi.n	8011e86 <__sflush_r+0xf2>
 8011df4:	4a29      	ldr	r2, [pc, #164]	; (8011e9c <__sflush_r+0x108>)
 8011df6:	40ca      	lsrs	r2, r1
 8011df8:	07d6      	lsls	r6, r2, #31
 8011dfa:	d544      	bpl.n	8011e86 <__sflush_r+0xf2>
 8011dfc:	2200      	movs	r2, #0
 8011dfe:	6062      	str	r2, [r4, #4]
 8011e00:	04d9      	lsls	r1, r3, #19
 8011e02:	6922      	ldr	r2, [r4, #16]
 8011e04:	6022      	str	r2, [r4, #0]
 8011e06:	d504      	bpl.n	8011e12 <__sflush_r+0x7e>
 8011e08:	1c42      	adds	r2, r0, #1
 8011e0a:	d101      	bne.n	8011e10 <__sflush_r+0x7c>
 8011e0c:	682b      	ldr	r3, [r5, #0]
 8011e0e:	b903      	cbnz	r3, 8011e12 <__sflush_r+0x7e>
 8011e10:	6560      	str	r0, [r4, #84]	; 0x54
 8011e12:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8011e14:	602f      	str	r7, [r5, #0]
 8011e16:	2900      	cmp	r1, #0
 8011e18:	d0c9      	beq.n	8011dae <__sflush_r+0x1a>
 8011e1a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8011e1e:	4299      	cmp	r1, r3
 8011e20:	d002      	beq.n	8011e28 <__sflush_r+0x94>
 8011e22:	4628      	mov	r0, r5
 8011e24:	f7fb ff90 	bl	800dd48 <_free_r>
 8011e28:	2000      	movs	r0, #0
 8011e2a:	6360      	str	r0, [r4, #52]	; 0x34
 8011e2c:	e7c0      	b.n	8011db0 <__sflush_r+0x1c>
 8011e2e:	2301      	movs	r3, #1
 8011e30:	4628      	mov	r0, r5
 8011e32:	47b0      	blx	r6
 8011e34:	1c41      	adds	r1, r0, #1
 8011e36:	d1c8      	bne.n	8011dca <__sflush_r+0x36>
 8011e38:	682b      	ldr	r3, [r5, #0]
 8011e3a:	2b00      	cmp	r3, #0
 8011e3c:	d0c5      	beq.n	8011dca <__sflush_r+0x36>
 8011e3e:	2b1d      	cmp	r3, #29
 8011e40:	d001      	beq.n	8011e46 <__sflush_r+0xb2>
 8011e42:	2b16      	cmp	r3, #22
 8011e44:	d101      	bne.n	8011e4a <__sflush_r+0xb6>
 8011e46:	602f      	str	r7, [r5, #0]
 8011e48:	e7b1      	b.n	8011dae <__sflush_r+0x1a>
 8011e4a:	89a3      	ldrh	r3, [r4, #12]
 8011e4c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011e50:	81a3      	strh	r3, [r4, #12]
 8011e52:	e7ad      	b.n	8011db0 <__sflush_r+0x1c>
 8011e54:	690f      	ldr	r7, [r1, #16]
 8011e56:	2f00      	cmp	r7, #0
 8011e58:	d0a9      	beq.n	8011dae <__sflush_r+0x1a>
 8011e5a:	0793      	lsls	r3, r2, #30
 8011e5c:	680e      	ldr	r6, [r1, #0]
 8011e5e:	bf08      	it	eq
 8011e60:	694b      	ldreq	r3, [r1, #20]
 8011e62:	600f      	str	r7, [r1, #0]
 8011e64:	bf18      	it	ne
 8011e66:	2300      	movne	r3, #0
 8011e68:	eba6 0807 	sub.w	r8, r6, r7
 8011e6c:	608b      	str	r3, [r1, #8]
 8011e6e:	f1b8 0f00 	cmp.w	r8, #0
 8011e72:	dd9c      	ble.n	8011dae <__sflush_r+0x1a>
 8011e74:	4643      	mov	r3, r8
 8011e76:	463a      	mov	r2, r7
 8011e78:	6a21      	ldr	r1, [r4, #32]
 8011e7a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8011e7c:	4628      	mov	r0, r5
 8011e7e:	47b0      	blx	r6
 8011e80:	2800      	cmp	r0, #0
 8011e82:	dc06      	bgt.n	8011e92 <__sflush_r+0xfe>
 8011e84:	89a3      	ldrh	r3, [r4, #12]
 8011e86:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011e8a:	81a3      	strh	r3, [r4, #12]
 8011e8c:	f04f 30ff 	mov.w	r0, #4294967295
 8011e90:	e78e      	b.n	8011db0 <__sflush_r+0x1c>
 8011e92:	4407      	add	r7, r0
 8011e94:	eba8 0800 	sub.w	r8, r8, r0
 8011e98:	e7e9      	b.n	8011e6e <__sflush_r+0xda>
 8011e9a:	bf00      	nop
 8011e9c:	20400001 	.word	0x20400001

08011ea0 <_fflush_r>:
 8011ea0:	b538      	push	{r3, r4, r5, lr}
 8011ea2:	690b      	ldr	r3, [r1, #16]
 8011ea4:	4605      	mov	r5, r0
 8011ea6:	460c      	mov	r4, r1
 8011ea8:	b1db      	cbz	r3, 8011ee2 <_fflush_r+0x42>
 8011eaa:	b118      	cbz	r0, 8011eb4 <_fflush_r+0x14>
 8011eac:	6983      	ldr	r3, [r0, #24]
 8011eae:	b90b      	cbnz	r3, 8011eb4 <_fflush_r+0x14>
 8011eb0:	f7fe fbb2 	bl	8010618 <__sinit>
 8011eb4:	4b0c      	ldr	r3, [pc, #48]	; (8011ee8 <_fflush_r+0x48>)
 8011eb6:	429c      	cmp	r4, r3
 8011eb8:	d109      	bne.n	8011ece <_fflush_r+0x2e>
 8011eba:	686c      	ldr	r4, [r5, #4]
 8011ebc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011ec0:	b17b      	cbz	r3, 8011ee2 <_fflush_r+0x42>
 8011ec2:	4621      	mov	r1, r4
 8011ec4:	4628      	mov	r0, r5
 8011ec6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011eca:	f7ff bf63 	b.w	8011d94 <__sflush_r>
 8011ece:	4b07      	ldr	r3, [pc, #28]	; (8011eec <_fflush_r+0x4c>)
 8011ed0:	429c      	cmp	r4, r3
 8011ed2:	d101      	bne.n	8011ed8 <_fflush_r+0x38>
 8011ed4:	68ac      	ldr	r4, [r5, #8]
 8011ed6:	e7f1      	b.n	8011ebc <_fflush_r+0x1c>
 8011ed8:	4b05      	ldr	r3, [pc, #20]	; (8011ef0 <_fflush_r+0x50>)
 8011eda:	429c      	cmp	r4, r3
 8011edc:	bf08      	it	eq
 8011ede:	68ec      	ldreq	r4, [r5, #12]
 8011ee0:	e7ec      	b.n	8011ebc <_fflush_r+0x1c>
 8011ee2:	2000      	movs	r0, #0
 8011ee4:	bd38      	pop	{r3, r4, r5, pc}
 8011ee6:	bf00      	nop
 8011ee8:	080122f8 	.word	0x080122f8
 8011eec:	08012318 	.word	0x08012318
 8011ef0:	080122d8 	.word	0x080122d8

08011ef4 <_lseek_r>:
 8011ef4:	b538      	push	{r3, r4, r5, lr}
 8011ef6:	4c07      	ldr	r4, [pc, #28]	; (8011f14 <_lseek_r+0x20>)
 8011ef8:	4605      	mov	r5, r0
 8011efa:	4608      	mov	r0, r1
 8011efc:	4611      	mov	r1, r2
 8011efe:	2200      	movs	r2, #0
 8011f00:	6022      	str	r2, [r4, #0]
 8011f02:	461a      	mov	r2, r3
 8011f04:	f7f0 ffc8 	bl	8002e98 <_lseek>
 8011f08:	1c43      	adds	r3, r0, #1
 8011f0a:	d102      	bne.n	8011f12 <_lseek_r+0x1e>
 8011f0c:	6823      	ldr	r3, [r4, #0]
 8011f0e:	b103      	cbz	r3, 8011f12 <_lseek_r+0x1e>
 8011f10:	602b      	str	r3, [r5, #0]
 8011f12:	bd38      	pop	{r3, r4, r5, pc}
 8011f14:	20002970 	.word	0x20002970

08011f18 <__swhatbuf_r>:
 8011f18:	b570      	push	{r4, r5, r6, lr}
 8011f1a:	460e      	mov	r6, r1
 8011f1c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011f20:	2900      	cmp	r1, #0
 8011f22:	b096      	sub	sp, #88	; 0x58
 8011f24:	4614      	mov	r4, r2
 8011f26:	461d      	mov	r5, r3
 8011f28:	da07      	bge.n	8011f3a <__swhatbuf_r+0x22>
 8011f2a:	2300      	movs	r3, #0
 8011f2c:	602b      	str	r3, [r5, #0]
 8011f2e:	89b3      	ldrh	r3, [r6, #12]
 8011f30:	061a      	lsls	r2, r3, #24
 8011f32:	d410      	bmi.n	8011f56 <__swhatbuf_r+0x3e>
 8011f34:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8011f38:	e00e      	b.n	8011f58 <__swhatbuf_r+0x40>
 8011f3a:	466a      	mov	r2, sp
 8011f3c:	f000 f8a2 	bl	8012084 <_fstat_r>
 8011f40:	2800      	cmp	r0, #0
 8011f42:	dbf2      	blt.n	8011f2a <__swhatbuf_r+0x12>
 8011f44:	9a01      	ldr	r2, [sp, #4]
 8011f46:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8011f4a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8011f4e:	425a      	negs	r2, r3
 8011f50:	415a      	adcs	r2, r3
 8011f52:	602a      	str	r2, [r5, #0]
 8011f54:	e7ee      	b.n	8011f34 <__swhatbuf_r+0x1c>
 8011f56:	2340      	movs	r3, #64	; 0x40
 8011f58:	2000      	movs	r0, #0
 8011f5a:	6023      	str	r3, [r4, #0]
 8011f5c:	b016      	add	sp, #88	; 0x58
 8011f5e:	bd70      	pop	{r4, r5, r6, pc}

08011f60 <__smakebuf_r>:
 8011f60:	898b      	ldrh	r3, [r1, #12]
 8011f62:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8011f64:	079d      	lsls	r5, r3, #30
 8011f66:	4606      	mov	r6, r0
 8011f68:	460c      	mov	r4, r1
 8011f6a:	d507      	bpl.n	8011f7c <__smakebuf_r+0x1c>
 8011f6c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8011f70:	6023      	str	r3, [r4, #0]
 8011f72:	6123      	str	r3, [r4, #16]
 8011f74:	2301      	movs	r3, #1
 8011f76:	6163      	str	r3, [r4, #20]
 8011f78:	b002      	add	sp, #8
 8011f7a:	bd70      	pop	{r4, r5, r6, pc}
 8011f7c:	ab01      	add	r3, sp, #4
 8011f7e:	466a      	mov	r2, sp
 8011f80:	f7ff ffca 	bl	8011f18 <__swhatbuf_r>
 8011f84:	9900      	ldr	r1, [sp, #0]
 8011f86:	4605      	mov	r5, r0
 8011f88:	4630      	mov	r0, r6
 8011f8a:	f7fb ff2b 	bl	800dde4 <_malloc_r>
 8011f8e:	b948      	cbnz	r0, 8011fa4 <__smakebuf_r+0x44>
 8011f90:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011f94:	059a      	lsls	r2, r3, #22
 8011f96:	d4ef      	bmi.n	8011f78 <__smakebuf_r+0x18>
 8011f98:	f023 0303 	bic.w	r3, r3, #3
 8011f9c:	f043 0302 	orr.w	r3, r3, #2
 8011fa0:	81a3      	strh	r3, [r4, #12]
 8011fa2:	e7e3      	b.n	8011f6c <__smakebuf_r+0xc>
 8011fa4:	4b0d      	ldr	r3, [pc, #52]	; (8011fdc <__smakebuf_r+0x7c>)
 8011fa6:	62b3      	str	r3, [r6, #40]	; 0x28
 8011fa8:	89a3      	ldrh	r3, [r4, #12]
 8011faa:	6020      	str	r0, [r4, #0]
 8011fac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011fb0:	81a3      	strh	r3, [r4, #12]
 8011fb2:	9b00      	ldr	r3, [sp, #0]
 8011fb4:	6163      	str	r3, [r4, #20]
 8011fb6:	9b01      	ldr	r3, [sp, #4]
 8011fb8:	6120      	str	r0, [r4, #16]
 8011fba:	b15b      	cbz	r3, 8011fd4 <__smakebuf_r+0x74>
 8011fbc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011fc0:	4630      	mov	r0, r6
 8011fc2:	f000 f871 	bl	80120a8 <_isatty_r>
 8011fc6:	b128      	cbz	r0, 8011fd4 <__smakebuf_r+0x74>
 8011fc8:	89a3      	ldrh	r3, [r4, #12]
 8011fca:	f023 0303 	bic.w	r3, r3, #3
 8011fce:	f043 0301 	orr.w	r3, r3, #1
 8011fd2:	81a3      	strh	r3, [r4, #12]
 8011fd4:	89a3      	ldrh	r3, [r4, #12]
 8011fd6:	431d      	orrs	r5, r3
 8011fd8:	81a5      	strh	r5, [r4, #12]
 8011fda:	e7cd      	b.n	8011f78 <__smakebuf_r+0x18>
 8011fdc:	080105e1 	.word	0x080105e1

08011fe0 <memmove>:
 8011fe0:	4288      	cmp	r0, r1
 8011fe2:	b510      	push	{r4, lr}
 8011fe4:	eb01 0302 	add.w	r3, r1, r2
 8011fe8:	d807      	bhi.n	8011ffa <memmove+0x1a>
 8011fea:	1e42      	subs	r2, r0, #1
 8011fec:	4299      	cmp	r1, r3
 8011fee:	d00a      	beq.n	8012006 <memmove+0x26>
 8011ff0:	f811 4b01 	ldrb.w	r4, [r1], #1
 8011ff4:	f802 4f01 	strb.w	r4, [r2, #1]!
 8011ff8:	e7f8      	b.n	8011fec <memmove+0xc>
 8011ffa:	4283      	cmp	r3, r0
 8011ffc:	d9f5      	bls.n	8011fea <memmove+0xa>
 8011ffe:	1881      	adds	r1, r0, r2
 8012000:	1ad2      	subs	r2, r2, r3
 8012002:	42d3      	cmn	r3, r2
 8012004:	d100      	bne.n	8012008 <memmove+0x28>
 8012006:	bd10      	pop	{r4, pc}
 8012008:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801200c:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8012010:	e7f7      	b.n	8012002 <memmove+0x22>

08012012 <_realloc_r>:
 8012012:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012014:	4607      	mov	r7, r0
 8012016:	4614      	mov	r4, r2
 8012018:	460e      	mov	r6, r1
 801201a:	b921      	cbnz	r1, 8012026 <_realloc_r+0x14>
 801201c:	4611      	mov	r1, r2
 801201e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8012022:	f7fb bedf 	b.w	800dde4 <_malloc_r>
 8012026:	b922      	cbnz	r2, 8012032 <_realloc_r+0x20>
 8012028:	f7fb fe8e 	bl	800dd48 <_free_r>
 801202c:	4625      	mov	r5, r4
 801202e:	4628      	mov	r0, r5
 8012030:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012032:	f000 f849 	bl	80120c8 <_malloc_usable_size_r>
 8012036:	42a0      	cmp	r0, r4
 8012038:	d20f      	bcs.n	801205a <_realloc_r+0x48>
 801203a:	4621      	mov	r1, r4
 801203c:	4638      	mov	r0, r7
 801203e:	f7fb fed1 	bl	800dde4 <_malloc_r>
 8012042:	4605      	mov	r5, r0
 8012044:	2800      	cmp	r0, #0
 8012046:	d0f2      	beq.n	801202e <_realloc_r+0x1c>
 8012048:	4631      	mov	r1, r6
 801204a:	4622      	mov	r2, r4
 801204c:	f7fb fe68 	bl	800dd20 <memcpy>
 8012050:	4631      	mov	r1, r6
 8012052:	4638      	mov	r0, r7
 8012054:	f7fb fe78 	bl	800dd48 <_free_r>
 8012058:	e7e9      	b.n	801202e <_realloc_r+0x1c>
 801205a:	4635      	mov	r5, r6
 801205c:	e7e7      	b.n	801202e <_realloc_r+0x1c>
	...

08012060 <_read_r>:
 8012060:	b538      	push	{r3, r4, r5, lr}
 8012062:	4c07      	ldr	r4, [pc, #28]	; (8012080 <_read_r+0x20>)
 8012064:	4605      	mov	r5, r0
 8012066:	4608      	mov	r0, r1
 8012068:	4611      	mov	r1, r2
 801206a:	2200      	movs	r2, #0
 801206c:	6022      	str	r2, [r4, #0]
 801206e:	461a      	mov	r2, r3
 8012070:	f7f0 feb2 	bl	8002dd8 <_read>
 8012074:	1c43      	adds	r3, r0, #1
 8012076:	d102      	bne.n	801207e <_read_r+0x1e>
 8012078:	6823      	ldr	r3, [r4, #0]
 801207a:	b103      	cbz	r3, 801207e <_read_r+0x1e>
 801207c:	602b      	str	r3, [r5, #0]
 801207e:	bd38      	pop	{r3, r4, r5, pc}
 8012080:	20002970 	.word	0x20002970

08012084 <_fstat_r>:
 8012084:	b538      	push	{r3, r4, r5, lr}
 8012086:	4c07      	ldr	r4, [pc, #28]	; (80120a4 <_fstat_r+0x20>)
 8012088:	2300      	movs	r3, #0
 801208a:	4605      	mov	r5, r0
 801208c:	4608      	mov	r0, r1
 801208e:	4611      	mov	r1, r2
 8012090:	6023      	str	r3, [r4, #0]
 8012092:	f7f0 fee6 	bl	8002e62 <_fstat>
 8012096:	1c43      	adds	r3, r0, #1
 8012098:	d102      	bne.n	80120a0 <_fstat_r+0x1c>
 801209a:	6823      	ldr	r3, [r4, #0]
 801209c:	b103      	cbz	r3, 80120a0 <_fstat_r+0x1c>
 801209e:	602b      	str	r3, [r5, #0]
 80120a0:	bd38      	pop	{r3, r4, r5, pc}
 80120a2:	bf00      	nop
 80120a4:	20002970 	.word	0x20002970

080120a8 <_isatty_r>:
 80120a8:	b538      	push	{r3, r4, r5, lr}
 80120aa:	4c06      	ldr	r4, [pc, #24]	; (80120c4 <_isatty_r+0x1c>)
 80120ac:	2300      	movs	r3, #0
 80120ae:	4605      	mov	r5, r0
 80120b0:	4608      	mov	r0, r1
 80120b2:	6023      	str	r3, [r4, #0]
 80120b4:	f7f0 fee5 	bl	8002e82 <_isatty>
 80120b8:	1c43      	adds	r3, r0, #1
 80120ba:	d102      	bne.n	80120c2 <_isatty_r+0x1a>
 80120bc:	6823      	ldr	r3, [r4, #0]
 80120be:	b103      	cbz	r3, 80120c2 <_isatty_r+0x1a>
 80120c0:	602b      	str	r3, [r5, #0]
 80120c2:	bd38      	pop	{r3, r4, r5, pc}
 80120c4:	20002970 	.word	0x20002970

080120c8 <_malloc_usable_size_r>:
 80120c8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80120cc:	1f18      	subs	r0, r3, #4
 80120ce:	2b00      	cmp	r3, #0
 80120d0:	bfbc      	itt	lt
 80120d2:	580b      	ldrlt	r3, [r1, r0]
 80120d4:	18c0      	addlt	r0, r0, r3
 80120d6:	4770      	bx	lr

080120d8 <_init>:
 80120d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80120da:	bf00      	nop
 80120dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80120de:	bc08      	pop	{r3}
 80120e0:	469e      	mov	lr, r3
 80120e2:	4770      	bx	lr

080120e4 <_fini>:
 80120e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80120e6:	bf00      	nop
 80120e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80120ea:	bc08      	pop	{r3}
 80120ec:	469e      	mov	lr, r3
 80120ee:	4770      	bx	lr
