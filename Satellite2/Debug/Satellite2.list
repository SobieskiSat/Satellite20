
Satellite2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001573c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000780  080158d0  080158d0  000258d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08016050  08016050  00030354  2**0
                  CONTENTS
  4 .ARM          00000008  08016050  08016050  00026050  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08016058  08016058  00030354  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08016058  08016058  00026058  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801605c  0801605c  0002605c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000354  20000000  08016060  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000042f4  20000354  080163b4  00030354  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004648  080163b4  00034648  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030354  2**0
                  CONTENTS, READONLY
 12 .debug_info   00029bbd  00000000  00000000  00030384  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00005302  00000000  00000000  00059f41  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001f90  00000000  00000000  0005f248  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001d58  00000000  00000000  000611d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00007ab4  00000000  00000000  00062f30  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001ef03  00000000  00000000  0006a9e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d4f6e  00000000  00000000  000898e7  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0015e855  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000094fc  00000000  00000000  0015e8d0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000354 	.word	0x20000354
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080158b4 	.word	0x080158b4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000358 	.word	0x20000358
 80001cc:	080158b4 	.word	0x080158b4

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003be:	f1a4 0401 	sub.w	r4, r4, #1
 80003c2:	d1e9      	bne.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b972 	b.w	8000f84 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9e08      	ldr	r6, [sp, #32]
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	4688      	mov	r8, r1
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d14b      	bne.n	8000d5e <__udivmoddi4+0xa6>
 8000cc6:	428a      	cmp	r2, r1
 8000cc8:	4615      	mov	r5, r2
 8000cca:	d967      	bls.n	8000d9c <__udivmoddi4+0xe4>
 8000ccc:	fab2 f282 	clz	r2, r2
 8000cd0:	b14a      	cbz	r2, 8000ce6 <__udivmoddi4+0x2e>
 8000cd2:	f1c2 0720 	rsb	r7, r2, #32
 8000cd6:	fa01 f302 	lsl.w	r3, r1, r2
 8000cda:	fa20 f707 	lsr.w	r7, r0, r7
 8000cde:	4095      	lsls	r5, r2
 8000ce0:	ea47 0803 	orr.w	r8, r7, r3
 8000ce4:	4094      	lsls	r4, r2
 8000ce6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000cea:	0c23      	lsrs	r3, r4, #16
 8000cec:	fbb8 f7fe 	udiv	r7, r8, lr
 8000cf0:	fa1f fc85 	uxth.w	ip, r5
 8000cf4:	fb0e 8817 	mls	r8, lr, r7, r8
 8000cf8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cfc:	fb07 f10c 	mul.w	r1, r7, ip
 8000d00:	4299      	cmp	r1, r3
 8000d02:	d909      	bls.n	8000d18 <__udivmoddi4+0x60>
 8000d04:	18eb      	adds	r3, r5, r3
 8000d06:	f107 30ff 	add.w	r0, r7, #4294967295
 8000d0a:	f080 811b 	bcs.w	8000f44 <__udivmoddi4+0x28c>
 8000d0e:	4299      	cmp	r1, r3
 8000d10:	f240 8118 	bls.w	8000f44 <__udivmoddi4+0x28c>
 8000d14:	3f02      	subs	r7, #2
 8000d16:	442b      	add	r3, r5
 8000d18:	1a5b      	subs	r3, r3, r1
 8000d1a:	b2a4      	uxth	r4, r4
 8000d1c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d20:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d24:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d28:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d2c:	45a4      	cmp	ip, r4
 8000d2e:	d909      	bls.n	8000d44 <__udivmoddi4+0x8c>
 8000d30:	192c      	adds	r4, r5, r4
 8000d32:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d36:	f080 8107 	bcs.w	8000f48 <__udivmoddi4+0x290>
 8000d3a:	45a4      	cmp	ip, r4
 8000d3c:	f240 8104 	bls.w	8000f48 <__udivmoddi4+0x290>
 8000d40:	3802      	subs	r0, #2
 8000d42:	442c      	add	r4, r5
 8000d44:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d48:	eba4 040c 	sub.w	r4, r4, ip
 8000d4c:	2700      	movs	r7, #0
 8000d4e:	b11e      	cbz	r6, 8000d58 <__udivmoddi4+0xa0>
 8000d50:	40d4      	lsrs	r4, r2
 8000d52:	2300      	movs	r3, #0
 8000d54:	e9c6 4300 	strd	r4, r3, [r6]
 8000d58:	4639      	mov	r1, r7
 8000d5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d5e:	428b      	cmp	r3, r1
 8000d60:	d909      	bls.n	8000d76 <__udivmoddi4+0xbe>
 8000d62:	2e00      	cmp	r6, #0
 8000d64:	f000 80eb 	beq.w	8000f3e <__udivmoddi4+0x286>
 8000d68:	2700      	movs	r7, #0
 8000d6a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d6e:	4638      	mov	r0, r7
 8000d70:	4639      	mov	r1, r7
 8000d72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d76:	fab3 f783 	clz	r7, r3
 8000d7a:	2f00      	cmp	r7, #0
 8000d7c:	d147      	bne.n	8000e0e <__udivmoddi4+0x156>
 8000d7e:	428b      	cmp	r3, r1
 8000d80:	d302      	bcc.n	8000d88 <__udivmoddi4+0xd0>
 8000d82:	4282      	cmp	r2, r0
 8000d84:	f200 80fa 	bhi.w	8000f7c <__udivmoddi4+0x2c4>
 8000d88:	1a84      	subs	r4, r0, r2
 8000d8a:	eb61 0303 	sbc.w	r3, r1, r3
 8000d8e:	2001      	movs	r0, #1
 8000d90:	4698      	mov	r8, r3
 8000d92:	2e00      	cmp	r6, #0
 8000d94:	d0e0      	beq.n	8000d58 <__udivmoddi4+0xa0>
 8000d96:	e9c6 4800 	strd	r4, r8, [r6]
 8000d9a:	e7dd      	b.n	8000d58 <__udivmoddi4+0xa0>
 8000d9c:	b902      	cbnz	r2, 8000da0 <__udivmoddi4+0xe8>
 8000d9e:	deff      	udf	#255	; 0xff
 8000da0:	fab2 f282 	clz	r2, r2
 8000da4:	2a00      	cmp	r2, #0
 8000da6:	f040 808f 	bne.w	8000ec8 <__udivmoddi4+0x210>
 8000daa:	1b49      	subs	r1, r1, r5
 8000dac:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000db0:	fa1f f885 	uxth.w	r8, r5
 8000db4:	2701      	movs	r7, #1
 8000db6:	fbb1 fcfe 	udiv	ip, r1, lr
 8000dba:	0c23      	lsrs	r3, r4, #16
 8000dbc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000dc0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dc4:	fb08 f10c 	mul.w	r1, r8, ip
 8000dc8:	4299      	cmp	r1, r3
 8000dca:	d907      	bls.n	8000ddc <__udivmoddi4+0x124>
 8000dcc:	18eb      	adds	r3, r5, r3
 8000dce:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000dd2:	d202      	bcs.n	8000dda <__udivmoddi4+0x122>
 8000dd4:	4299      	cmp	r1, r3
 8000dd6:	f200 80cd 	bhi.w	8000f74 <__udivmoddi4+0x2bc>
 8000dda:	4684      	mov	ip, r0
 8000ddc:	1a59      	subs	r1, r3, r1
 8000dde:	b2a3      	uxth	r3, r4
 8000de0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000de4:	fb0e 1410 	mls	r4, lr, r0, r1
 8000de8:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000dec:	fb08 f800 	mul.w	r8, r8, r0
 8000df0:	45a0      	cmp	r8, r4
 8000df2:	d907      	bls.n	8000e04 <__udivmoddi4+0x14c>
 8000df4:	192c      	adds	r4, r5, r4
 8000df6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dfa:	d202      	bcs.n	8000e02 <__udivmoddi4+0x14a>
 8000dfc:	45a0      	cmp	r8, r4
 8000dfe:	f200 80b6 	bhi.w	8000f6e <__udivmoddi4+0x2b6>
 8000e02:	4618      	mov	r0, r3
 8000e04:	eba4 0408 	sub.w	r4, r4, r8
 8000e08:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e0c:	e79f      	b.n	8000d4e <__udivmoddi4+0x96>
 8000e0e:	f1c7 0c20 	rsb	ip, r7, #32
 8000e12:	40bb      	lsls	r3, r7
 8000e14:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000e18:	ea4e 0e03 	orr.w	lr, lr, r3
 8000e1c:	fa01 f407 	lsl.w	r4, r1, r7
 8000e20:	fa20 f50c 	lsr.w	r5, r0, ip
 8000e24:	fa21 f30c 	lsr.w	r3, r1, ip
 8000e28:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000e2c:	4325      	orrs	r5, r4
 8000e2e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000e32:	0c2c      	lsrs	r4, r5, #16
 8000e34:	fb08 3319 	mls	r3, r8, r9, r3
 8000e38:	fa1f fa8e 	uxth.w	sl, lr
 8000e3c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e40:	fb09 f40a 	mul.w	r4, r9, sl
 8000e44:	429c      	cmp	r4, r3
 8000e46:	fa02 f207 	lsl.w	r2, r2, r7
 8000e4a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e4e:	d90b      	bls.n	8000e68 <__udivmoddi4+0x1b0>
 8000e50:	eb1e 0303 	adds.w	r3, lr, r3
 8000e54:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e58:	f080 8087 	bcs.w	8000f6a <__udivmoddi4+0x2b2>
 8000e5c:	429c      	cmp	r4, r3
 8000e5e:	f240 8084 	bls.w	8000f6a <__udivmoddi4+0x2b2>
 8000e62:	f1a9 0902 	sub.w	r9, r9, #2
 8000e66:	4473      	add	r3, lr
 8000e68:	1b1b      	subs	r3, r3, r4
 8000e6a:	b2ad      	uxth	r5, r5
 8000e6c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e70:	fb08 3310 	mls	r3, r8, r0, r3
 8000e74:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000e78:	fb00 fa0a 	mul.w	sl, r0, sl
 8000e7c:	45a2      	cmp	sl, r4
 8000e7e:	d908      	bls.n	8000e92 <__udivmoddi4+0x1da>
 8000e80:	eb1e 0404 	adds.w	r4, lr, r4
 8000e84:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e88:	d26b      	bcs.n	8000f62 <__udivmoddi4+0x2aa>
 8000e8a:	45a2      	cmp	sl, r4
 8000e8c:	d969      	bls.n	8000f62 <__udivmoddi4+0x2aa>
 8000e8e:	3802      	subs	r0, #2
 8000e90:	4474      	add	r4, lr
 8000e92:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e96:	fba0 8902 	umull	r8, r9, r0, r2
 8000e9a:	eba4 040a 	sub.w	r4, r4, sl
 8000e9e:	454c      	cmp	r4, r9
 8000ea0:	46c2      	mov	sl, r8
 8000ea2:	464b      	mov	r3, r9
 8000ea4:	d354      	bcc.n	8000f50 <__udivmoddi4+0x298>
 8000ea6:	d051      	beq.n	8000f4c <__udivmoddi4+0x294>
 8000ea8:	2e00      	cmp	r6, #0
 8000eaa:	d069      	beq.n	8000f80 <__udivmoddi4+0x2c8>
 8000eac:	ebb1 050a 	subs.w	r5, r1, sl
 8000eb0:	eb64 0403 	sbc.w	r4, r4, r3
 8000eb4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000eb8:	40fd      	lsrs	r5, r7
 8000eba:	40fc      	lsrs	r4, r7
 8000ebc:	ea4c 0505 	orr.w	r5, ip, r5
 8000ec0:	e9c6 5400 	strd	r5, r4, [r6]
 8000ec4:	2700      	movs	r7, #0
 8000ec6:	e747      	b.n	8000d58 <__udivmoddi4+0xa0>
 8000ec8:	f1c2 0320 	rsb	r3, r2, #32
 8000ecc:	fa20 f703 	lsr.w	r7, r0, r3
 8000ed0:	4095      	lsls	r5, r2
 8000ed2:	fa01 f002 	lsl.w	r0, r1, r2
 8000ed6:	fa21 f303 	lsr.w	r3, r1, r3
 8000eda:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000ede:	4338      	orrs	r0, r7
 8000ee0:	0c01      	lsrs	r1, r0, #16
 8000ee2:	fbb3 f7fe 	udiv	r7, r3, lr
 8000ee6:	fa1f f885 	uxth.w	r8, r5
 8000eea:	fb0e 3317 	mls	r3, lr, r7, r3
 8000eee:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ef2:	fb07 f308 	mul.w	r3, r7, r8
 8000ef6:	428b      	cmp	r3, r1
 8000ef8:	fa04 f402 	lsl.w	r4, r4, r2
 8000efc:	d907      	bls.n	8000f0e <__udivmoddi4+0x256>
 8000efe:	1869      	adds	r1, r5, r1
 8000f00:	f107 3cff 	add.w	ip, r7, #4294967295
 8000f04:	d22f      	bcs.n	8000f66 <__udivmoddi4+0x2ae>
 8000f06:	428b      	cmp	r3, r1
 8000f08:	d92d      	bls.n	8000f66 <__udivmoddi4+0x2ae>
 8000f0a:	3f02      	subs	r7, #2
 8000f0c:	4429      	add	r1, r5
 8000f0e:	1acb      	subs	r3, r1, r3
 8000f10:	b281      	uxth	r1, r0
 8000f12:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f16:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f1a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f1e:	fb00 f308 	mul.w	r3, r0, r8
 8000f22:	428b      	cmp	r3, r1
 8000f24:	d907      	bls.n	8000f36 <__udivmoddi4+0x27e>
 8000f26:	1869      	adds	r1, r5, r1
 8000f28:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f2c:	d217      	bcs.n	8000f5e <__udivmoddi4+0x2a6>
 8000f2e:	428b      	cmp	r3, r1
 8000f30:	d915      	bls.n	8000f5e <__udivmoddi4+0x2a6>
 8000f32:	3802      	subs	r0, #2
 8000f34:	4429      	add	r1, r5
 8000f36:	1ac9      	subs	r1, r1, r3
 8000f38:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000f3c:	e73b      	b.n	8000db6 <__udivmoddi4+0xfe>
 8000f3e:	4637      	mov	r7, r6
 8000f40:	4630      	mov	r0, r6
 8000f42:	e709      	b.n	8000d58 <__udivmoddi4+0xa0>
 8000f44:	4607      	mov	r7, r0
 8000f46:	e6e7      	b.n	8000d18 <__udivmoddi4+0x60>
 8000f48:	4618      	mov	r0, r3
 8000f4a:	e6fb      	b.n	8000d44 <__udivmoddi4+0x8c>
 8000f4c:	4541      	cmp	r1, r8
 8000f4e:	d2ab      	bcs.n	8000ea8 <__udivmoddi4+0x1f0>
 8000f50:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f54:	eb69 020e 	sbc.w	r2, r9, lr
 8000f58:	3801      	subs	r0, #1
 8000f5a:	4613      	mov	r3, r2
 8000f5c:	e7a4      	b.n	8000ea8 <__udivmoddi4+0x1f0>
 8000f5e:	4660      	mov	r0, ip
 8000f60:	e7e9      	b.n	8000f36 <__udivmoddi4+0x27e>
 8000f62:	4618      	mov	r0, r3
 8000f64:	e795      	b.n	8000e92 <__udivmoddi4+0x1da>
 8000f66:	4667      	mov	r7, ip
 8000f68:	e7d1      	b.n	8000f0e <__udivmoddi4+0x256>
 8000f6a:	4681      	mov	r9, r0
 8000f6c:	e77c      	b.n	8000e68 <__udivmoddi4+0x1b0>
 8000f6e:	3802      	subs	r0, #2
 8000f70:	442c      	add	r4, r5
 8000f72:	e747      	b.n	8000e04 <__udivmoddi4+0x14c>
 8000f74:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f78:	442b      	add	r3, r5
 8000f7a:	e72f      	b.n	8000ddc <__udivmoddi4+0x124>
 8000f7c:	4638      	mov	r0, r7
 8000f7e:	e708      	b.n	8000d92 <__udivmoddi4+0xda>
 8000f80:	4637      	mov	r7, r6
 8000f82:	e6e9      	b.n	8000d58 <__udivmoddi4+0xa0>

08000f84 <__aeabi_idiv0>:
 8000f84:	4770      	bx	lr
 8000f86:	bf00      	nop

08000f88 <MPU_writeByte>:

//===================================================================================================================
//====== Set of useful function to access acceleratio, gyroscope, and temperature data
//===================================================================================================================
void MPU_writeByte(uint8_t address, uint8_t subAddress, uint8_t data)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b086      	sub	sp, #24
 8000f8c:	af04      	add	r7, sp, #16
 8000f8e:	4603      	mov	r3, r0
 8000f90:	71fb      	strb	r3, [r7, #7]
 8000f92:	460b      	mov	r3, r1
 8000f94:	71bb      	strb	r3, [r7, #6]
 8000f96:	4613      	mov	r3, r2
 8000f98:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Mem_Write(Get_I2C1_Instance(), address, subAddress, 1, &data, 1, 1);
 8000f9a:	f003 fc9d 	bl	80048d8 <Get_I2C1_Instance>
 8000f9e:	79fb      	ldrb	r3, [r7, #7]
 8000fa0:	b299      	uxth	r1, r3
 8000fa2:	79bb      	ldrb	r3, [r7, #6]
 8000fa4:	b29a      	uxth	r2, r3
 8000fa6:	2301      	movs	r3, #1
 8000fa8:	9302      	str	r3, [sp, #8]
 8000faa:	2301      	movs	r3, #1
 8000fac:	9301      	str	r3, [sp, #4]
 8000fae:	1d7b      	adds	r3, r7, #5
 8000fb0:	9300      	str	r3, [sp, #0]
 8000fb2:	2301      	movs	r3, #1
 8000fb4:	f005 f954 	bl	8006260 <HAL_I2C_Mem_Write>
	//while(HAL_I2C_GetState(Get_I2C1_Instance()) != HAL_I2C_STATE_READY);
	/*print("Write:");
	print_int(data);
	println("");*/
	//i2c.write(address, data_write, 2, 0);
}
 8000fb8:	bf00      	nop
 8000fba:	3708      	adds	r7, #8
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	bd80      	pop	{r7, pc}

08000fc0 <MPU_readByte>:
char MPU_readByte(uint8_t address, uint8_t subAddress)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b088      	sub	sp, #32
 8000fc4:	af04      	add	r7, sp, #16
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	460a      	mov	r2, r1
 8000fca:	71fb      	strb	r3, [r7, #7]
 8000fcc:	4613      	mov	r3, r2
 8000fce:	71bb      	strb	r3, [r7, #6]
	uint8_t data[1]; // `data` will store the register data


	//i2c.write(address, data_write, 1, 1); // no stop
	HAL_I2C_Mem_Read(Get_I2C1_Instance(), address, subAddress, 1, data, 1, 1);
 8000fd0:	f003 fc82 	bl	80048d8 <Get_I2C1_Instance>
 8000fd4:	79fb      	ldrb	r3, [r7, #7]
 8000fd6:	b299      	uxth	r1, r3
 8000fd8:	79bb      	ldrb	r3, [r7, #6]
 8000fda:	b29a      	uxth	r2, r3
 8000fdc:	2301      	movs	r3, #1
 8000fde:	9302      	str	r3, [sp, #8]
 8000fe0:	2301      	movs	r3, #1
 8000fe2:	9301      	str	r3, [sp, #4]
 8000fe4:	f107 030c 	add.w	r3, r7, #12
 8000fe8:	9300      	str	r3, [sp, #0]
 8000fea:	2301      	movs	r3, #1
 8000fec:	f005 fa32 	bl	8006454 <HAL_I2C_Mem_Read>
	/*print("Read:");
	print_int(data[0]);
	println("");*/
	//i2c.read(address, data, 1, 0);

	return (char)data[0];
 8000ff0:	7b3b      	ldrb	r3, [r7, #12]
}
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	3710      	adds	r7, #16
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	bd80      	pop	{r7, pc}

08000ffa <MPU_readBytes>:
void MPU_readBytes(uint8_t address, uint8_t subAddress, uint8_t count, uint8_t* dest)
{     
 8000ffa:	b590      	push	{r4, r7, lr}
 8000ffc:	b08d      	sub	sp, #52	; 0x34
 8000ffe:	af04      	add	r7, sp, #16
 8001000:	603b      	str	r3, [r7, #0]
 8001002:	4603      	mov	r3, r0
 8001004:	71fb      	strb	r3, [r7, #7]
 8001006:	460b      	mov	r3, r1
 8001008:	71bb      	strb	r3, [r7, #6]
 800100a:	4613      	mov	r3, r2
 800100c:	717b      	strb	r3, [r7, #5]
	uint8_t data[14];

	HAL_I2C_Mem_Read(Get_I2C1_Instance(), address, subAddress, 1, data, count, 1);
 800100e:	f003 fc63 	bl	80048d8 <Get_I2C1_Instance>
 8001012:	4604      	mov	r4, r0
 8001014:	79fb      	ldrb	r3, [r7, #7]
 8001016:	b299      	uxth	r1, r3
 8001018:	79bb      	ldrb	r3, [r7, #6]
 800101a:	b298      	uxth	r0, r3
 800101c:	797b      	ldrb	r3, [r7, #5]
 800101e:	b29b      	uxth	r3, r3
 8001020:	2201      	movs	r2, #1
 8001022:	9202      	str	r2, [sp, #8]
 8001024:	9301      	str	r3, [sp, #4]
 8001026:	f107 030c 	add.w	r3, r7, #12
 800102a:	9300      	str	r3, [sp, #0]
 800102c:	2301      	movs	r3, #1
 800102e:	4602      	mov	r2, r0
 8001030:	4620      	mov	r0, r4
 8001032:	f005 fa0f 	bl	8006454 <HAL_I2C_Mem_Read>

	/*
	i2c.write(address, data_write, 1, 1); // no stop
	i2c.read(address, data, count, 0);
	*/
	int ii = 0;
 8001036:	2300      	movs	r3, #0
 8001038:	61fb      	str	r3, [r7, #28]
	for(ii = 0; ii < count; ii++)
 800103a:	2300      	movs	r3, #0
 800103c:	61fb      	str	r3, [r7, #28]
 800103e:	e00b      	b.n	8001058 <MPU_readBytes+0x5e>
	{
		dest[ii] = data[ii];
 8001040:	69fb      	ldr	r3, [r7, #28]
 8001042:	683a      	ldr	r2, [r7, #0]
 8001044:	4413      	add	r3, r2
 8001046:	f107 010c 	add.w	r1, r7, #12
 800104a:	69fa      	ldr	r2, [r7, #28]
 800104c:	440a      	add	r2, r1
 800104e:	7812      	ldrb	r2, [r2, #0]
 8001050:	701a      	strb	r2, [r3, #0]
	for(ii = 0; ii < count; ii++)
 8001052:	69fb      	ldr	r3, [r7, #28]
 8001054:	3301      	adds	r3, #1
 8001056:	61fb      	str	r3, [r7, #28]
 8001058:	797b      	ldrb	r3, [r7, #5]
 800105a:	69fa      	ldr	r2, [r7, #28]
 800105c:	429a      	cmp	r2, r3
 800105e:	dbef      	blt.n	8001040 <MPU_readBytes+0x46>
	}
} 
 8001060:	bf00      	nop
 8001062:	3724      	adds	r7, #36	; 0x24
 8001064:	46bd      	mov	sp, r7
 8001066:	bd90      	pop	{r4, r7, pc}

08001068 <MPU_getMres>:
 
void MPU_getMres()
{
 8001068:	b480      	push	{r7}
 800106a:	af00      	add	r7, sp, #0
	switch (MMscale)
 800106c:	4b09      	ldr	r3, [pc, #36]	; (8001094 <MPU_getMres+0x2c>)
 800106e:	781b      	ldrb	r3, [r3, #0]
 8001070:	2b00      	cmp	r3, #0
 8001072:	d002      	beq.n	800107a <MPU_getMres+0x12>
 8001074:	2b01      	cmp	r3, #1
 8001076:	d004      	beq.n	8001082 <MPU_getMres+0x1a>
			break;
		case MFS_16BITS:
			mRes = 10.0*4912.0/32760.0; // Proper scale to return milliGauss
			break;
	}
}
 8001078:	e007      	b.n	800108a <MPU_getMres+0x22>
			mRes = 10.0*4912.0/8190.0; // Proper scale to return milliGauss
 800107a:	4b07      	ldr	r3, [pc, #28]	; (8001098 <MPU_getMres+0x30>)
 800107c:	4a07      	ldr	r2, [pc, #28]	; (800109c <MPU_getMres+0x34>)
 800107e:	601a      	str	r2, [r3, #0]
			break;
 8001080:	e003      	b.n	800108a <MPU_getMres+0x22>
			mRes = 10.0*4912.0/32760.0; // Proper scale to return milliGauss
 8001082:	4b05      	ldr	r3, [pc, #20]	; (8001098 <MPU_getMres+0x30>)
 8001084:	4a06      	ldr	r2, [pc, #24]	; (80010a0 <MPU_getMres+0x38>)
 8001086:	601a      	str	r2, [r3, #0]
			break;
 8001088:	bf00      	nop
}
 800108a:	bf00      	nop
 800108c:	46bd      	mov	sp, r7
 800108e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001092:	4770      	bx	lr
 8001094:	2000082c 	.word	0x2000082c
 8001098:	20000894 	.word	0x20000894
 800109c:	40bfebff 	.word	0x40bfebff
 80010a0:	3fbfebff 	.word	0x3fbfebff

080010a4 <MPU_getGres>:
void MPU_getGres()
{
 80010a4:	b480      	push	{r7}
 80010a6:	af00      	add	r7, sp, #0
	switch (GGscale)
 80010a8:	4b12      	ldr	r3, [pc, #72]	; (80010f4 <MPU_getGres+0x50>)
 80010aa:	781b      	ldrb	r3, [r3, #0]
 80010ac:	2b03      	cmp	r3, #3
 80010ae:	d81b      	bhi.n	80010e8 <MPU_getGres+0x44>
 80010b0:	a201      	add	r2, pc, #4	; (adr r2, 80010b8 <MPU_getGres+0x14>)
 80010b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010b6:	bf00      	nop
 80010b8:	080010c9 	.word	0x080010c9
 80010bc:	080010d1 	.word	0x080010d1
 80010c0:	080010d9 	.word	0x080010d9
 80010c4:	080010e1 	.word	0x080010e1
	{
		// Possible gyro scales (and their register bit settings) are:
		// 250 DPS (00), 500 DPS (01), 1000 DPS (10), and 2000 DPS  (11). 
		// Here's a bit of an algorith to calculate DPS/(ADC tick) based on that 2-bit value:
		case GFS_250DPS:
			gRes = 250.0/32768.0;
 80010c8:	4b0b      	ldr	r3, [pc, #44]	; (80010f8 <MPU_getGres+0x54>)
 80010ca:	4a0c      	ldr	r2, [pc, #48]	; (80010fc <MPU_getGres+0x58>)
 80010cc:	601a      	str	r2, [r3, #0]
			break;
 80010ce:	e00b      	b.n	80010e8 <MPU_getGres+0x44>
		case GFS_500DPS:
			gRes = 500.0/32768.0;
 80010d0:	4b09      	ldr	r3, [pc, #36]	; (80010f8 <MPU_getGres+0x54>)
 80010d2:	4a0b      	ldr	r2, [pc, #44]	; (8001100 <MPU_getGres+0x5c>)
 80010d4:	601a      	str	r2, [r3, #0]
			break;
 80010d6:	e007      	b.n	80010e8 <MPU_getGres+0x44>
		case GFS_1000DPS:
			gRes = 1000.0/32768.0;
 80010d8:	4b07      	ldr	r3, [pc, #28]	; (80010f8 <MPU_getGres+0x54>)
 80010da:	4a0a      	ldr	r2, [pc, #40]	; (8001104 <MPU_getGres+0x60>)
 80010dc:	601a      	str	r2, [r3, #0]
			break;
 80010de:	e003      	b.n	80010e8 <MPU_getGres+0x44>
		case GFS_2000DPS:
			gRes = 2000.0/32768.0;
 80010e0:	4b05      	ldr	r3, [pc, #20]	; (80010f8 <MPU_getGres+0x54>)
 80010e2:	4a09      	ldr	r2, [pc, #36]	; (8001108 <MPU_getGres+0x64>)
 80010e4:	601a      	str	r2, [r3, #0]
			break;
 80010e6:	bf00      	nop
	}
}
 80010e8:	bf00      	nop
 80010ea:	46bd      	mov	sp, r7
 80010ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f0:	4770      	bx	lr
 80010f2:	bf00      	nop
 80010f4:	200007a2 	.word	0x200007a2
 80010f8:	20000860 	.word	0x20000860
 80010fc:	3bfa0000 	.word	0x3bfa0000
 8001100:	3c7a0000 	.word	0x3c7a0000
 8001104:	3cfa0000 	.word	0x3cfa0000
 8001108:	3d7a0000 	.word	0x3d7a0000

0800110c <MPU_getAres>:
void MPU_getAres()
{
 800110c:	b480      	push	{r7}
 800110e:	af00      	add	r7, sp, #0
	switch (AAscale)
 8001110:	4b14      	ldr	r3, [pc, #80]	; (8001164 <MPU_getAres+0x58>)
 8001112:	781b      	ldrb	r3, [r3, #0]
 8001114:	2b03      	cmp	r3, #3
 8001116:	d81f      	bhi.n	8001158 <MPU_getAres+0x4c>
 8001118:	a201      	add	r2, pc, #4	; (adr r2, 8001120 <MPU_getAres+0x14>)
 800111a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800111e:	bf00      	nop
 8001120:	08001131 	.word	0x08001131
 8001124:	0800113b 	.word	0x0800113b
 8001128:	08001145 	.word	0x08001145
 800112c:	0800114f 	.word	0x0800114f
	{
		// Possible accelerometer scales (and their register bit settings) are:
		// 2 Gs (00), 4 Gs (01), 8 Gs (10), and 16 Gs  (11). 
		// Here's a bit of an algorith to calculate DPS/(ADC tick) based on that 2-bit value:
		case AFS_2G:
			aRes = 2.0/32768.0;
 8001130:	4b0d      	ldr	r3, [pc, #52]	; (8001168 <MPU_getAres+0x5c>)
 8001132:	f04f 5262 	mov.w	r2, #947912704	; 0x38800000
 8001136:	601a      	str	r2, [r3, #0]
			break;
 8001138:	e00e      	b.n	8001158 <MPU_getAres+0x4c>
		case AFS_4G:
			aRes = 4.0/32768.0;
 800113a:	4b0b      	ldr	r3, [pc, #44]	; (8001168 <MPU_getAres+0x5c>)
 800113c:	f04f 5264 	mov.w	r2, #956301312	; 0x39000000
 8001140:	601a      	str	r2, [r3, #0]
			break;
 8001142:	e009      	b.n	8001158 <MPU_getAres+0x4c>
		case AFS_8G:
			aRes = 8.0/32768.0;
 8001144:	4b08      	ldr	r3, [pc, #32]	; (8001168 <MPU_getAres+0x5c>)
 8001146:	f04f 5266 	mov.w	r2, #964689920	; 0x39800000
 800114a:	601a      	str	r2, [r3, #0]
			break;
 800114c:	e004      	b.n	8001158 <MPU_getAres+0x4c>
		case AFS_16G:
			aRes = 16.0/32768.0;
 800114e:	4b06      	ldr	r3, [pc, #24]	; (8001168 <MPU_getAres+0x5c>)
 8001150:	f04f 5268 	mov.w	r2, #973078528	; 0x3a000000
 8001154:	601a      	str	r2, [r3, #0]
			break;
 8001156:	bf00      	nop
	}
}
 8001158:	bf00      	nop
 800115a:	46bd      	mov	sp, r7
 800115c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001160:	4770      	bx	lr
 8001162:	bf00      	nop
 8001164:	200007dc 	.word	0x200007dc
 8001168:	20000820 	.word	0x20000820

0800116c <MPU_readAccelData>:

void MPU_readAccelData(int16_t* destination)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	b084      	sub	sp, #16
 8001170:	af00      	add	r7, sp, #0
 8001172:	6078      	str	r0, [r7, #4]
	uint8_t rawData[6];  // x/y/z accel register data stored here
	MPU_readBytes(MPU9250_ADDRESS, ACCEL_XOUT_H, 6, &rawData[0]);  // Read the six raw data registers into data array
 8001174:	f107 0308 	add.w	r3, r7, #8
 8001178:	2206      	movs	r2, #6
 800117a:	213b      	movs	r1, #59	; 0x3b
 800117c:	20d2      	movs	r0, #210	; 0xd2
 800117e:	f7ff ff3c 	bl	8000ffa <MPU_readBytes>
	destination[0] = (int16_t)(((int16_t)rawData[0] << 8) | rawData[1]);  // Turn the MSB and LSB into a signed 16-bit value
 8001182:	7a3b      	ldrb	r3, [r7, #8]
 8001184:	021b      	lsls	r3, r3, #8
 8001186:	b21a      	sxth	r2, r3
 8001188:	7a7b      	ldrb	r3, [r7, #9]
 800118a:	b21b      	sxth	r3, r3
 800118c:	4313      	orrs	r3, r2
 800118e:	b21a      	sxth	r2, r3
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	801a      	strh	r2, [r3, #0]
	destination[1] = (int16_t)(((int16_t)rawData[2] << 8) | rawData[3]);  
 8001194:	7abb      	ldrb	r3, [r7, #10]
 8001196:	021b      	lsls	r3, r3, #8
 8001198:	b219      	sxth	r1, r3
 800119a:	7afb      	ldrb	r3, [r7, #11]
 800119c:	b21a      	sxth	r2, r3
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	3302      	adds	r3, #2
 80011a2:	430a      	orrs	r2, r1
 80011a4:	b212      	sxth	r2, r2
 80011a6:	801a      	strh	r2, [r3, #0]
	destination[2] = (int16_t)(((int16_t)rawData[4] << 8) | rawData[5]); 
 80011a8:	7b3b      	ldrb	r3, [r7, #12]
 80011aa:	021b      	lsls	r3, r3, #8
 80011ac:	b219      	sxth	r1, r3
 80011ae:	7b7b      	ldrb	r3, [r7, #13]
 80011b0:	b21a      	sxth	r2, r3
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	3304      	adds	r3, #4
 80011b6:	430a      	orrs	r2, r1
 80011b8:	b212      	sxth	r2, r2
 80011ba:	801a      	strh	r2, [r3, #0]
}
 80011bc:	bf00      	nop
 80011be:	3710      	adds	r7, #16
 80011c0:	46bd      	mov	sp, r7
 80011c2:	bd80      	pop	{r7, pc}

080011c4 <MPU_readGyroData>:
void MPU_readGyroData(int16_t* destination)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b084      	sub	sp, #16
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	6078      	str	r0, [r7, #4]
	uint8_t rawData[6];  // x/y/z gyro register data stored here
	MPU_readBytes(MPU9250_ADDRESS, GYRO_XOUT_H, 6, &rawData[0]);  // Read the six raw data registers sequentially into data array
 80011cc:	f107 0308 	add.w	r3, r7, #8
 80011d0:	2206      	movs	r2, #6
 80011d2:	2143      	movs	r1, #67	; 0x43
 80011d4:	20d2      	movs	r0, #210	; 0xd2
 80011d6:	f7ff ff10 	bl	8000ffa <MPU_readBytes>
	destination[0] = (int16_t)(((int16_t)rawData[0] << 8) | rawData[1]);  // Turn the MSB and LSB into a signed 16-bit value
 80011da:	7a3b      	ldrb	r3, [r7, #8]
 80011dc:	021b      	lsls	r3, r3, #8
 80011de:	b21a      	sxth	r2, r3
 80011e0:	7a7b      	ldrb	r3, [r7, #9]
 80011e2:	b21b      	sxth	r3, r3
 80011e4:	4313      	orrs	r3, r2
 80011e6:	b21a      	sxth	r2, r3
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	801a      	strh	r2, [r3, #0]
	destination[1] = (int16_t)(((int16_t)rawData[2] << 8) | rawData[3]);  
 80011ec:	7abb      	ldrb	r3, [r7, #10]
 80011ee:	021b      	lsls	r3, r3, #8
 80011f0:	b219      	sxth	r1, r3
 80011f2:	7afb      	ldrb	r3, [r7, #11]
 80011f4:	b21a      	sxth	r2, r3
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	3302      	adds	r3, #2
 80011fa:	430a      	orrs	r2, r1
 80011fc:	b212      	sxth	r2, r2
 80011fe:	801a      	strh	r2, [r3, #0]
	destination[2] = (int16_t)(((int16_t)rawData[4] << 8) | rawData[5]); 
 8001200:	7b3b      	ldrb	r3, [r7, #12]
 8001202:	021b      	lsls	r3, r3, #8
 8001204:	b219      	sxth	r1, r3
 8001206:	7b7b      	ldrb	r3, [r7, #13]
 8001208:	b21a      	sxth	r2, r3
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	3304      	adds	r3, #4
 800120e:	430a      	orrs	r2, r1
 8001210:	b212      	sxth	r2, r2
 8001212:	801a      	strh	r2, [r3, #0]
}
 8001214:	bf00      	nop
 8001216:	3710      	adds	r7, #16
 8001218:	46bd      	mov	sp, r7
 800121a:	bd80      	pop	{r7, pc}

0800121c <MPU_readMagData>:
void MPU_readMagData(int16_t* destination)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b084      	sub	sp, #16
 8001220:	af00      	add	r7, sp, #0
 8001222:	6078      	str	r0, [r7, #4]
	uint8_t rawData[7];  // x/y/z gyro register data, ST2 register stored here, must read ST2 at end of data acquisition
	if(MPU_readByte(AK8963_ADDRESS, AK8963_ST1) & 0x01)
 8001224:	2102      	movs	r1, #2
 8001226:	2018      	movs	r0, #24
 8001228:	f7ff feca 	bl	8000fc0 <MPU_readByte>
 800122c:	4603      	mov	r3, r0
 800122e:	f003 0301 	and.w	r3, r3, #1
 8001232:	2b00      	cmp	r3, #0
 8001234:	d02a      	beq.n	800128c <MPU_readMagData+0x70>
	{ // wait for magnetometer data ready bit to be set
		MPU_readBytes(AK8963_ADDRESS, AK8963_XOUT_L, 7, &rawData[0]);  // Read the six raw data and ST2 registers sequentially into data array
 8001236:	f107 0308 	add.w	r3, r7, #8
 800123a:	2207      	movs	r2, #7
 800123c:	2103      	movs	r1, #3
 800123e:	2018      	movs	r0, #24
 8001240:	f7ff fedb 	bl	8000ffa <MPU_readBytes>
		uint8_t c = rawData[6]; // End data read by reading ST2 register
 8001244:	7bbb      	ldrb	r3, [r7, #14]
 8001246:	73fb      	strb	r3, [r7, #15]
		if(!(c & 0x08))
 8001248:	7bfb      	ldrb	r3, [r7, #15]
 800124a:	f003 0308 	and.w	r3, r3, #8
 800124e:	2b00      	cmp	r3, #0
 8001250:	d11c      	bne.n	800128c <MPU_readMagData+0x70>
		{ // Check if magnetic sensor overflow set, if not then report data
			destination[0] = (int16_t)(((int16_t)rawData[1] << 8) | rawData[0]);  // Turn the MSB and LSB into a signed 16-bit value
 8001252:	7a7b      	ldrb	r3, [r7, #9]
 8001254:	021b      	lsls	r3, r3, #8
 8001256:	b21a      	sxth	r2, r3
 8001258:	7a3b      	ldrb	r3, [r7, #8]
 800125a:	b21b      	sxth	r3, r3
 800125c:	4313      	orrs	r3, r2
 800125e:	b21a      	sxth	r2, r3
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	801a      	strh	r2, [r3, #0]
			destination[1] = (int16_t)(((int16_t)rawData[3] << 8) | rawData[2]);  // Data stored as little Endian
 8001264:	7afb      	ldrb	r3, [r7, #11]
 8001266:	021b      	lsls	r3, r3, #8
 8001268:	b219      	sxth	r1, r3
 800126a:	7abb      	ldrb	r3, [r7, #10]
 800126c:	b21a      	sxth	r2, r3
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	3302      	adds	r3, #2
 8001272:	430a      	orrs	r2, r1
 8001274:	b212      	sxth	r2, r2
 8001276:	801a      	strh	r2, [r3, #0]
			destination[2] = (int16_t)(((int16_t)rawData[5] << 8) | rawData[4]); 
 8001278:	7b7b      	ldrb	r3, [r7, #13]
 800127a:	021b      	lsls	r3, r3, #8
 800127c:	b219      	sxth	r1, r3
 800127e:	7b3b      	ldrb	r3, [r7, #12]
 8001280:	b21a      	sxth	r2, r3
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	3304      	adds	r3, #4
 8001286:	430a      	orrs	r2, r1
 8001288:	b212      	sxth	r2, r2
 800128a:	801a      	strh	r2, [r3, #0]
		}
	}
}
 800128c:	bf00      	nop
 800128e:	3710      	adds	r7, #16
 8001290:	46bd      	mov	sp, r7
 8001292:	bd80      	pop	{r7, pc}

08001294 <MPU_present>:
	MPU_readBytes(MPU9250_ADDRESS, TEMP_OUT_H, 2, &rawData[0]);  // Read the two raw data registers sequentially into data array 
	return (int16_t)(((int16_t)rawData[0]) << 8 | rawData[1]);  // Turn the MSB and LSB into a 16-bit value
}

bool MPU_present()
{
 8001294:	b580      	push	{r7, lr}
 8001296:	b082      	sub	sp, #8
 8001298:	af00      	add	r7, sp, #0
	// 5 trials of getting WHO_AM_I response from MPU
	uint8_t attempts = 0;
 800129a:	2300      	movs	r3, #0
 800129c:	71fb      	strb	r3, [r7, #7]
	do
	{
		MPU_reset();
 800129e:	f000 f977 	bl	8001590 <MPU_reset>
		char who = MPU_readByte(MPU9250_ADDRESS, MPU9250_WHO_AM_I);
 80012a2:	2175      	movs	r1, #117	; 0x75
 80012a4:	20d2      	movs	r0, #210	; 0xd2
 80012a6:	f7ff fe8b 	bl	8000fc0 <MPU_readByte>
 80012aa:	4603      	mov	r3, r0
 80012ac:	71bb      	strb	r3, [r7, #6]
		if (who == 0x71) return true;
 80012ae:	79bb      	ldrb	r3, [r7, #6]
 80012b0:	2b71      	cmp	r3, #113	; 0x71
 80012b2:	d101      	bne.n	80012b8 <MPU_present+0x24>
 80012b4:	2301      	movs	r3, #1
 80012b6:	e00a      	b.n	80012ce <MPU_present+0x3a>
		else
		{
			attempts++;
 80012b8:	79fb      	ldrb	r3, [r7, #7]
 80012ba:	3301      	adds	r3, #1
 80012bc:	71fb      	strb	r3, [r7, #7]
			HAL_Delay(1000);
 80012be:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80012c2:	f003 ffd5 	bl	8005270 <HAL_Delay>
		}
	} while (attempts <= 5);
 80012c6:	79fb      	ldrb	r3, [r7, #7]
 80012c8:	2b05      	cmp	r3, #5
 80012ca:	d9e8      	bls.n	800129e <MPU_present+0xa>
	return false;
 80012cc:	2300      	movs	r3, #0
}
 80012ce:	4618      	mov	r0, r3
 80012d0:	3708      	adds	r7, #8
 80012d2:	46bd      	mov	sp, r7
 80012d4:	bd80      	pop	{r7, pc}
	...

080012d8 <MPU_init>:
void MPU_init()
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b082      	sub	sp, #8
 80012dc:	af00      	add	r7, sp, #0
	AAscale = AFS_2G;
 80012de:	4b64      	ldr	r3, [pc, #400]	; (8001470 <MPU_init+0x198>)
 80012e0:	2200      	movs	r2, #0
 80012e2:	701a      	strb	r2, [r3, #0]
	GGscale = GFS_250DPS;
 80012e4:	4b63      	ldr	r3, [pc, #396]	; (8001474 <MPU_init+0x19c>)
 80012e6:	2200      	movs	r2, #0
 80012e8:	701a      	strb	r2, [r3, #0]
	MMscale = MFS_16BITS;
 80012ea:	4b63      	ldr	r3, [pc, #396]	; (8001478 <MPU_init+0x1a0>)
 80012ec:	2201      	movs	r2, #1
 80012ee:	701a      	strb	r2, [r3, #0]
	Mmode = 0x06;
 80012f0:	4b62      	ldr	r3, [pc, #392]	; (800147c <MPU_init+0x1a4>)
 80012f2:	2206      	movs	r2, #6
 80012f4:	701a      	strb	r2, [r3, #0]
	magCalibration[0] = 0;
 80012f6:	4b62      	ldr	r3, [pc, #392]	; (8001480 <MPU_init+0x1a8>)
 80012f8:	f04f 0200 	mov.w	r2, #0
 80012fc:	601a      	str	r2, [r3, #0]
	magCalibration[1] = 0;
 80012fe:	4b60      	ldr	r3, [pc, #384]	; (8001480 <MPU_init+0x1a8>)
 8001300:	f04f 0200 	mov.w	r2, #0
 8001304:	605a      	str	r2, [r3, #4]
	magCalibration[2] = 0;
 8001306:	4b5e      	ldr	r3, [pc, #376]	; (8001480 <MPU_init+0x1a8>)
 8001308:	f04f 0200 	mov.w	r2, #0
 800130c:	609a      	str	r2, [r3, #8]
	magbias[0] = 0;
 800130e:	4b5d      	ldr	r3, [pc, #372]	; (8001484 <MPU_init+0x1ac>)
 8001310:	f04f 0200 	mov.w	r2, #0
 8001314:	601a      	str	r2, [r3, #0]
	magbias[1] = 0;
 8001316:	4b5b      	ldr	r3, [pc, #364]	; (8001484 <MPU_init+0x1ac>)
 8001318:	f04f 0200 	mov.w	r2, #0
 800131c:	605a      	str	r2, [r3, #4]
	magbias[2] = 0;
 800131e:	4b59      	ldr	r3, [pc, #356]	; (8001484 <MPU_init+0x1ac>)
 8001320:	f04f 0200 	mov.w	r2, #0
 8001324:	609a      	str	r2, [r3, #8]
	delt_t = 0;
 8001326:	4b58      	ldr	r3, [pc, #352]	; (8001488 <MPU_init+0x1b0>)
 8001328:	2200      	movs	r2, #0
 800132a:	601a      	str	r2, [r3, #0]
	count = 0;
 800132c:	4b57      	ldr	r3, [pc, #348]	; (800148c <MPU_init+0x1b4>)
 800132e:	2200      	movs	r2, #0
 8001330:	601a      	str	r2, [r3, #0]
	deltat = 0.0f;
 8001332:	4b57      	ldr	r3, [pc, #348]	; (8001490 <MPU_init+0x1b8>)
 8001334:	f04f 0200 	mov.w	r2, #0
 8001338:	601a      	str	r2, [r3, #0]
	lastUpdate = 0;
 800133a:	4b56      	ldr	r3, [pc, #344]	; (8001494 <MPU_init+0x1bc>)
 800133c:	2200      	movs	r2, #0
 800133e:	601a      	str	r2, [r3, #0]
	firstUpdate = 0;
 8001340:	4b55      	ldr	r3, [pc, #340]	; (8001498 <MPU_init+0x1c0>)
 8001342:	2200      	movs	r2, #0
 8001344:	601a      	str	r2, [r3, #0]
	Now = 0;
 8001346:	4b55      	ldr	r3, [pc, #340]	; (800149c <MPU_init+0x1c4>)
 8001348:	2200      	movs	r2, #0
 800134a:	601a      	str	r2, [r3, #0]
	q[0] = 1.0f;
 800134c:	4b54      	ldr	r3, [pc, #336]	; (80014a0 <MPU_init+0x1c8>)
 800134e:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001352:	601a      	str	r2, [r3, #0]
	q[1] = 0.0f;
 8001354:	4b52      	ldr	r3, [pc, #328]	; (80014a0 <MPU_init+0x1c8>)
 8001356:	f04f 0200 	mov.w	r2, #0
 800135a:	605a      	str	r2, [r3, #4]
	q[2] = 0.0f;
 800135c:	4b50      	ldr	r3, [pc, #320]	; (80014a0 <MPU_init+0x1c8>)
 800135e:	f04f 0200 	mov.w	r2, #0
 8001362:	609a      	str	r2, [r3, #8]
	q[3] = 0.0f;
 8001364:	4b4e      	ldr	r3, [pc, #312]	; (80014a0 <MPU_init+0x1c8>)
 8001366:	f04f 0200 	mov.w	r2, #0
 800136a:	60da      	str	r2, [r3, #12]
	eInt[0] = 0.0f;
 800136c:	4b4d      	ldr	r3, [pc, #308]	; (80014a4 <MPU_init+0x1cc>)
 800136e:	f04f 0200 	mov.w	r2, #0
 8001372:	601a      	str	r2, [r3, #0]
	eInt[1] = 0.0f;
 8001374:	4b4b      	ldr	r3, [pc, #300]	; (80014a4 <MPU_init+0x1cc>)
 8001376:	f04f 0200 	mov.w	r2, #0
 800137a:	605a      	str	r2, [r3, #4]
	eInt[2] = 0.0f;
 800137c:	4b49      	ldr	r3, [pc, #292]	; (80014a4 <MPU_init+0x1cc>)
 800137e:	f04f 0200 	mov.w	r2, #0
 8001382:	609a      	str	r2, [r3, #8]

	// Initialize MPU9250 device
	// wake up device
	MPU_writeByte(MPU9250_ADDRESS, PWR_MGMT_1, 0x00); // Clear sleep mode bit (6), enable all sensors 
 8001384:	2200      	movs	r2, #0
 8001386:	216b      	movs	r1, #107	; 0x6b
 8001388:	20d2      	movs	r0, #210	; 0xd2
 800138a:	f7ff fdfd 	bl	8000f88 <MPU_writeByte>
	HAL_Delay(100); // Delay 100 ms for PLL to get established on x-axis gyro; should check for PLL ready interrupt  
 800138e:	2064      	movs	r0, #100	; 0x64
 8001390:	f003 ff6e 	bl	8005270 <HAL_Delay>

	// get stable time source
	MPU_writeByte(MPU9250_ADDRESS, PWR_MGMT_1, 0x01);  // Set clock source to be PLL with x-axis gyroscope reference, bits 2:0 = 001
 8001394:	2201      	movs	r2, #1
 8001396:	216b      	movs	r1, #107	; 0x6b
 8001398:	20d2      	movs	r0, #210	; 0xd2
 800139a:	f7ff fdf5 	bl	8000f88 <MPU_writeByte>

	// Configure Gyro and Accelerometer
	// Disable FSYNC and set accelerometer and gyro bandwidth to 44 and 42 Hz, respectively; 
	// DLPF_CFG = bits 2:0 = 010; this sets the sample rate at 1 kHz for both
	// Maximum delay is 4.9 ms which is just over a 200 Hz maximum rate
	HAL_Delay(100);
 800139e:	2064      	movs	r0, #100	; 0x64
 80013a0:	f003 ff66 	bl	8005270 <HAL_Delay>
	//MPU_writeByte(MPU9250_ADDRESS, CONFIG, 0x03);
	MPU_writeByte(MPU9250_ADDRESS, CONFIG, 0x03);
 80013a4:	2203      	movs	r2, #3
 80013a6:	211a      	movs	r1, #26
 80013a8:	20d2      	movs	r0, #210	; 0xd2
 80013aa:	f7ff fded 	bl	8000f88 <MPU_writeByte>

	// Set sample rate = gyroscope output rate/(1 + SMPLRT_DIV)
	HAL_Delay(100);
 80013ae:	2064      	movs	r0, #100	; 0x64
 80013b0:	f003 ff5e 	bl	8005270 <HAL_Delay>
	//MPU_writeByte(MPU9250_ADDRESS, SMPLRT_DIV, 0x04);  // Use a 200 Hz rate; the same rate set in CONFIG above
	MPU_writeByte(MPU9250_ADDRESS, SMPLRT_DIV, 0x04);
 80013b4:	2204      	movs	r2, #4
 80013b6:	2119      	movs	r1, #25
 80013b8:	20d2      	movs	r0, #210	; 0xd2
 80013ba:	f7ff fde5 	bl	8000f88 <MPU_writeByte>

	// Set gyroscope full scale range
	// Range selects FS_SEL and AFS_SEL are 0 - 3, so 2-bit values are left-shifted into positions 4:3
	uint8_t c = MPU_readByte(MPU9250_ADDRESS, GYRO_CONFIG); // get current GYRO_CONFIG register value
 80013be:	211b      	movs	r1, #27
 80013c0:	20d2      	movs	r0, #210	; 0xd2
 80013c2:	f7ff fdfd 	bl	8000fc0 <MPU_readByte>
 80013c6:	4603      	mov	r3, r0
 80013c8:	71fb      	strb	r3, [r7, #7]
	// c = c & ~0xE0; // Clear self-test bits [7:5] 
	c = c & ~0x03; // Clear Fchoice bits [1:0]
 80013ca:	79fb      	ldrb	r3, [r7, #7]
 80013cc:	f023 0303 	bic.w	r3, r3, #3
 80013d0:	71fb      	strb	r3, [r7, #7]
	c = c & ~0x18; // Clear AFS bits [4:3]
 80013d2:	79fb      	ldrb	r3, [r7, #7]
 80013d4:	f023 0318 	bic.w	r3, r3, #24
 80013d8:	71fb      	strb	r3, [r7, #7]
	c = c | GGscale << 3; // Set full scale range for the gyro
 80013da:	4b26      	ldr	r3, [pc, #152]	; (8001474 <MPU_init+0x19c>)
 80013dc:	781b      	ldrb	r3, [r3, #0]
 80013de:	00db      	lsls	r3, r3, #3
 80013e0:	b25a      	sxtb	r2, r3
 80013e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013e6:	4313      	orrs	r3, r2
 80013e8:	b25b      	sxtb	r3, r3
 80013ea:	71fb      	strb	r3, [r7, #7]
	// c =| 0x00; // Set Fchoice for the gyro to 11 by writing its inverse to bits 1:0 of GYRO_CONFIG
	MPU_writeByte(MPU9250_ADDRESS, GYRO_CONFIG, c ); // Write new GYRO_CONFIG value to register
 80013ec:	79fb      	ldrb	r3, [r7, #7]
 80013ee:	461a      	mov	r2, r3
 80013f0:	211b      	movs	r1, #27
 80013f2:	20d2      	movs	r0, #210	; 0xd2
 80013f4:	f7ff fdc8 	bl	8000f88 <MPU_writeByte>

	// Set accelerometer full-scale range configuration
	c = MPU_readByte(MPU9250_ADDRESS, ACCEL_CONFIG); // get current ACCEL_CONFIG register value
 80013f8:	211c      	movs	r1, #28
 80013fa:	20d2      	movs	r0, #210	; 0xd2
 80013fc:	f7ff fde0 	bl	8000fc0 <MPU_readByte>
 8001400:	4603      	mov	r3, r0
 8001402:	71fb      	strb	r3, [r7, #7]
	// c = c & ~0xE0; // Clear self-test bits [7:5] 
	c = c & ~0x18;  // Clear AFS bits [4:3]
 8001404:	79fb      	ldrb	r3, [r7, #7]
 8001406:	f023 0318 	bic.w	r3, r3, #24
 800140a:	71fb      	strb	r3, [r7, #7]
	c = c | AAscale << 3; // Set full scale range for the accelerometer
 800140c:	4b18      	ldr	r3, [pc, #96]	; (8001470 <MPU_init+0x198>)
 800140e:	781b      	ldrb	r3, [r3, #0]
 8001410:	00db      	lsls	r3, r3, #3
 8001412:	b25a      	sxtb	r2, r3
 8001414:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001418:	4313      	orrs	r3, r2
 800141a:	b25b      	sxtb	r3, r3
 800141c:	71fb      	strb	r3, [r7, #7]
	MPU_writeByte(MPU9250_ADDRESS, ACCEL_CONFIG, c); // Write new ACCEL_CONFIG register value
 800141e:	79fb      	ldrb	r3, [r7, #7]
 8001420:	461a      	mov	r2, r3
 8001422:	211c      	movs	r1, #28
 8001424:	20d2      	movs	r0, #210	; 0xd2
 8001426:	f7ff fdaf 	bl	8000f88 <MPU_writeByte>

	// Set accelerometer sample rate configuration
	// It is possible to get a 4 kHz sample rate from the accelerometer by choosing 1 for
	// accel_fchoice_b bit [3]; in this case the bandwidth is 1.13 kHz
	c = MPU_readByte(MPU9250_ADDRESS, ACCEL_CONFIG2); // get current ACCEL_CONFIG2 register value
 800142a:	211d      	movs	r1, #29
 800142c:	20d2      	movs	r0, #210	; 0xd2
 800142e:	f7ff fdc7 	bl	8000fc0 <MPU_readByte>
 8001432:	4603      	mov	r3, r0
 8001434:	71fb      	strb	r3, [r7, #7]
	c = c & ~0x0F; // Clear accel_fchoice_b (bit 3) and A_DLPFG (bits [2:0])  
 8001436:	79fb      	ldrb	r3, [r7, #7]
 8001438:	f023 030f 	bic.w	r3, r3, #15
 800143c:	71fb      	strb	r3, [r7, #7]
	c = c | 0x03;  // Set accelerometer rate to 1 kHz and bandwidth to 41 Hz
 800143e:	79fb      	ldrb	r3, [r7, #7]
 8001440:	f043 0303 	orr.w	r3, r3, #3
 8001444:	71fb      	strb	r3, [r7, #7]
	MPU_writeByte(MPU9250_ADDRESS, ACCEL_CONFIG2, c); // Write new ACCEL_CONFIG2 register value
 8001446:	79fb      	ldrb	r3, [r7, #7]
 8001448:	461a      	mov	r2, r3
 800144a:	211d      	movs	r1, #29
 800144c:	20d2      	movs	r0, #210	; 0xd2
 800144e:	f7ff fd9b 	bl	8000f88 <MPU_writeByte>
	// but all these rates are further reduced by a factor of 5 to 200 Hz because of the SMPLRT_DIV setting

	// Configure Interrupts and Bypass Enable
	// Set interrupt pin active high, push-pull, and clear on read of INT_STATUS, enable I2C_BYPASS_EN so additional chips 
	// can join the I2C bus and all can be controlled by the Arduino as master
	MPU_writeByte(MPU9250_ADDRESS, INT_PIN_CFG, 0x22);    
 8001452:	2222      	movs	r2, #34	; 0x22
 8001454:	2137      	movs	r1, #55	; 0x37
 8001456:	20d2      	movs	r0, #210	; 0xd2
 8001458:	f7ff fd96 	bl	8000f88 <MPU_writeByte>
	MPU_writeByte(MPU9250_ADDRESS, INT_ENABLE, 0x01);  // Enable data ready (bit 0) interrupt
 800145c:	2201      	movs	r2, #1
 800145e:	2138      	movs	r1, #56	; 0x38
 8001460:	20d2      	movs	r0, #210	; 0xd2
 8001462:	f7ff fd91 	bl	8000f88 <MPU_writeByte>
}
 8001466:	bf00      	nop
 8001468:	3708      	adds	r7, #8
 800146a:	46bd      	mov	sp, r7
 800146c:	bd80      	pop	{r7, pc}
 800146e:	bf00      	nop
 8001470:	200007dc 	.word	0x200007dc
 8001474:	200007a2 	.word	0x200007a2
 8001478:	2000082c 	.word	0x2000082c
 800147c:	20000804 	.word	0x20000804
 8001480:	200008bc 	.word	0x200008bc
 8001484:	20000808 	.word	0x20000808
 8001488:	20000854 	.word	0x20000854
 800148c:	2000084c 	.word	0x2000084c
 8001490:	20000890 	.word	0x20000890
 8001494:	200007e8 	.word	0x200007e8
 8001498:	20000898 	.word	0x20000898
 800149c:	20000818 	.word	0x20000818
 80014a0:	200008a8 	.word	0x200008a8
 80014a4:	200007f8 	.word	0x200007f8

080014a8 <AK8963_init>:
void AK8963_init(float * destination)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b084      	sub	sp, #16
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6078      	str	r0, [r7, #4]
	// First extract the factory calibration for each magnetometer axis
	uint8_t rawData[3];  // x/y/z gyro calibration data stored here
	MPU_writeByte(AK8963_ADDRESS, AK8963_CNTL, 0x00); // Power down magnetometer
 80014b0:	2200      	movs	r2, #0
 80014b2:	210a      	movs	r1, #10
 80014b4:	2018      	movs	r0, #24
 80014b6:	f7ff fd67 	bl	8000f88 <MPU_writeByte>
	HAL_Delay(10);
 80014ba:	200a      	movs	r0, #10
 80014bc:	f003 fed8 	bl	8005270 <HAL_Delay>
	MPU_writeByte(AK8963_ADDRESS, AK8963_CNTL, 0x0F); // Enter Fuse ROM access mode
 80014c0:	220f      	movs	r2, #15
 80014c2:	210a      	movs	r1, #10
 80014c4:	2018      	movs	r0, #24
 80014c6:	f7ff fd5f 	bl	8000f88 <MPU_writeByte>
	HAL_Delay(10);
 80014ca:	200a      	movs	r0, #10
 80014cc:	f003 fed0 	bl	8005270 <HAL_Delay>
	MPU_readBytes(AK8963_ADDRESS, AK8963_ASAX, 3, &rawData[0]);  // Read the x-, y-, and z-axis calibration values
 80014d0:	f107 030c 	add.w	r3, r7, #12
 80014d4:	2203      	movs	r2, #3
 80014d6:	2110      	movs	r1, #16
 80014d8:	2018      	movs	r0, #24
 80014da:	f7ff fd8e 	bl	8000ffa <MPU_readBytes>
	destination[0] =  (float)(rawData[0] - 128)/256.0f + 1.0f;   // Return x-axis sensitivity adjustment values, etc.
 80014de:	7b3b      	ldrb	r3, [r7, #12]
 80014e0:	3b80      	subs	r3, #128	; 0x80
 80014e2:	ee07 3a90 	vmov	s15, r3
 80014e6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80014ea:	eddf 6a26 	vldr	s13, [pc, #152]	; 8001584 <AK8963_init+0xdc>
 80014ee:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80014f2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80014f6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	edc3 7a00 	vstr	s15, [r3]
	destination[1] =  (float)(rawData[1] - 128)/256.0f + 1.0f;
 8001500:	7b7b      	ldrb	r3, [r7, #13]
 8001502:	3b80      	subs	r3, #128	; 0x80
 8001504:	ee07 3a90 	vmov	s15, r3
 8001508:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800150c:	eddf 6a1d 	vldr	s13, [pc, #116]	; 8001584 <AK8963_init+0xdc>
 8001510:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	3304      	adds	r3, #4
 8001518:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800151c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001520:	edc3 7a00 	vstr	s15, [r3]
	destination[2] =  (float)(rawData[2] - 128)/256.0f + 1.0f;
 8001524:	7bbb      	ldrb	r3, [r7, #14]
 8001526:	3b80      	subs	r3, #128	; 0x80
 8001528:	ee07 3a90 	vmov	s15, r3
 800152c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001530:	eddf 6a14 	vldr	s13, [pc, #80]	; 8001584 <AK8963_init+0xdc>
 8001534:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	3308      	adds	r3, #8
 800153c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001540:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001544:	edc3 7a00 	vstr	s15, [r3]
	MPU_writeByte(AK8963_ADDRESS, AK8963_CNTL, 0x00); // Power down magnetometer
 8001548:	2200      	movs	r2, #0
 800154a:	210a      	movs	r1, #10
 800154c:	2018      	movs	r0, #24
 800154e:	f7ff fd1b 	bl	8000f88 <MPU_writeByte>
	HAL_Delay(10);
 8001552:	200a      	movs	r0, #10
 8001554:	f003 fe8c 	bl	8005270 <HAL_Delay>
	// Configure the magnetometer for continuous read and highest resolution
	// set Mscale bit 4 to 1 (0) to enable 16 (14) bit resolution in CNTL register,
	// and enable continuous mode data acquisition Mmode (bits [3:0]), 0010 for 8 Hz and 0110 for 100 Hz sample rates
	MPU_writeByte(AK8963_ADDRESS, AK8963_CNTL, MMscale << 4 | Mmode); // Set magnetometer data resolution and sample ODR
 8001558:	4b0b      	ldr	r3, [pc, #44]	; (8001588 <AK8963_init+0xe0>)
 800155a:	781b      	ldrb	r3, [r3, #0]
 800155c:	011b      	lsls	r3, r3, #4
 800155e:	b25a      	sxtb	r2, r3
 8001560:	4b0a      	ldr	r3, [pc, #40]	; (800158c <AK8963_init+0xe4>)
 8001562:	781b      	ldrb	r3, [r3, #0]
 8001564:	b25b      	sxtb	r3, r3
 8001566:	4313      	orrs	r3, r2
 8001568:	b25b      	sxtb	r3, r3
 800156a:	b2db      	uxtb	r3, r3
 800156c:	461a      	mov	r2, r3
 800156e:	210a      	movs	r1, #10
 8001570:	2018      	movs	r0, #24
 8001572:	f7ff fd09 	bl	8000f88 <MPU_writeByte>
	HAL_Delay(10);
 8001576:	200a      	movs	r0, #10
 8001578:	f003 fe7a 	bl	8005270 <HAL_Delay>
}
 800157c:	bf00      	nop
 800157e:	3710      	adds	r7, #16
 8001580:	46bd      	mov	sp, r7
 8001582:	bd80      	pop	{r7, pc}
 8001584:	43800000 	.word	0x43800000
 8001588:	2000082c 	.word	0x2000082c
 800158c:	20000804 	.word	0x20000804

08001590 <MPU_reset>:

void MPU_reset()
{
 8001590:	b580      	push	{r7, lr}
 8001592:	af00      	add	r7, sp, #0
	// reset device
	MPU_writeByte(MPU9250_ADDRESS, PWR_MGMT_1, 0x80); // Write a one to bit 7 reset bit; toggle reset device
 8001594:	2280      	movs	r2, #128	; 0x80
 8001596:	216b      	movs	r1, #107	; 0x6b
 8001598:	20d2      	movs	r0, #210	; 0xd2
 800159a:	f7ff fcf5 	bl	8000f88 <MPU_writeByte>
	HAL_Delay(100);
 800159e:	2064      	movs	r0, #100	; 0x64
 80015a0:	f003 fe66 	bl	8005270 <HAL_Delay>
}
 80015a4:	bf00      	nop
 80015a6:	bd80      	pop	{r7, pc}

080015a8 <MPU_calibrate>:

void MPU_calibrate(float* dest1, float* dest2)
{  
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b098      	sub	sp, #96	; 0x60
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]
 80015b0:	6039      	str	r1, [r7, #0]
	// Function which accumulates gyro and accelerometer data after device initialization. It calculates the average
	// of the at-rest readings and then loads the resulting offsets into accelerometer and gyro bias registers.
	uint8_t data[12]; // data array to hold accelerometer and gyro x, y, z, data
	uint16_t ii, packet_count, fifo_count;
	int32_t gyro_bias[3] = {0, 0, 0}, accel_bias[3] = {0, 0, 0};
 80015b2:	2300      	movs	r3, #0
 80015b4:	63bb      	str	r3, [r7, #56]	; 0x38
 80015b6:	2300      	movs	r3, #0
 80015b8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80015ba:	2300      	movs	r3, #0
 80015bc:	643b      	str	r3, [r7, #64]	; 0x40
 80015be:	2300      	movs	r3, #0
 80015c0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80015c2:	2300      	movs	r3, #0
 80015c4:	633b      	str	r3, [r7, #48]	; 0x30
 80015c6:	2300      	movs	r3, #0
 80015c8:	637b      	str	r3, [r7, #52]	; 0x34

	// reset device, reset all registers, clear gyro and accelerometer bias registers
	MPU_writeByte(MPU9250_ADDRESS, PWR_MGMT_1, 0x80); // Write a one to bit 7 reset bit; toggle reset device
 80015ca:	2280      	movs	r2, #128	; 0x80
 80015cc:	216b      	movs	r1, #107	; 0x6b
 80015ce:	20d2      	movs	r0, #210	; 0xd2
 80015d0:	f7ff fcda 	bl	8000f88 <MPU_writeByte>
	HAL_Delay(100);  
 80015d4:	2064      	movs	r0, #100	; 0x64
 80015d6:	f003 fe4b 	bl	8005270 <HAL_Delay>

	// get stable time source
	// Set clock source to be PLL with x-axis gyroscope reference, bits 2:0 = 001
	MPU_writeByte(MPU9250_ADDRESS, PWR_MGMT_1, 0x01);  
 80015da:	2201      	movs	r2, #1
 80015dc:	216b      	movs	r1, #107	; 0x6b
 80015de:	20d2      	movs	r0, #210	; 0xd2
 80015e0:	f7ff fcd2 	bl	8000f88 <MPU_writeByte>
	MPU_writeByte(MPU9250_ADDRESS, PWR_MGMT_2, 0x00); 
 80015e4:	2200      	movs	r2, #0
 80015e6:	216c      	movs	r1, #108	; 0x6c
 80015e8:	20d2      	movs	r0, #210	; 0xd2
 80015ea:	f7ff fccd 	bl	8000f88 <MPU_writeByte>
	HAL_Delay(200);
 80015ee:	20c8      	movs	r0, #200	; 0xc8
 80015f0:	f003 fe3e 	bl	8005270 <HAL_Delay>

	// Configure device for bias calculation
	MPU_writeByte(MPU9250_ADDRESS, INT_ENABLE, 0x00);   // Disable all interrupts
 80015f4:	2200      	movs	r2, #0
 80015f6:	2138      	movs	r1, #56	; 0x38
 80015f8:	20d2      	movs	r0, #210	; 0xd2
 80015fa:	f7ff fcc5 	bl	8000f88 <MPU_writeByte>
	MPU_writeByte(MPU9250_ADDRESS, FIFO_EN, 0x00);      // Disable FIFO
 80015fe:	2200      	movs	r2, #0
 8001600:	2123      	movs	r1, #35	; 0x23
 8001602:	20d2      	movs	r0, #210	; 0xd2
 8001604:	f7ff fcc0 	bl	8000f88 <MPU_writeByte>
	MPU_writeByte(MPU9250_ADDRESS, PWR_MGMT_1, 0x00);   // Turn on internal clock source
 8001608:	2200      	movs	r2, #0
 800160a:	216b      	movs	r1, #107	; 0x6b
 800160c:	20d2      	movs	r0, #210	; 0xd2
 800160e:	f7ff fcbb 	bl	8000f88 <MPU_writeByte>
	MPU_writeByte(MPU9250_ADDRESS, I2C_MST_CTRL, 0x00); // Disable I2C master
 8001612:	2200      	movs	r2, #0
 8001614:	2124      	movs	r1, #36	; 0x24
 8001616:	20d2      	movs	r0, #210	; 0xd2
 8001618:	f7ff fcb6 	bl	8000f88 <MPU_writeByte>
	MPU_writeByte(MPU9250_ADDRESS, USER_CTRL, 0x00);    // Disable FIFO and I2C master modes
 800161c:	2200      	movs	r2, #0
 800161e:	216a      	movs	r1, #106	; 0x6a
 8001620:	20d2      	movs	r0, #210	; 0xd2
 8001622:	f7ff fcb1 	bl	8000f88 <MPU_writeByte>
	MPU_writeByte(MPU9250_ADDRESS, USER_CTRL, 0x0C);    // Reset FIFO and DMP
 8001626:	220c      	movs	r2, #12
 8001628:	216a      	movs	r1, #106	; 0x6a
 800162a:	20d2      	movs	r0, #210	; 0xd2
 800162c:	f7ff fcac 	bl	8000f88 <MPU_writeByte>
	HAL_Delay(15);
 8001630:	200f      	movs	r0, #15
 8001632:	f003 fe1d 	bl	8005270 <HAL_Delay>

	// Configure MPU9250 gyro and accelerometer for bias calculation
	MPU_writeByte(MPU9250_ADDRESS, CONFIG, 0x01);      // Set low-pass filter to 188 Hz
 8001636:	2201      	movs	r2, #1
 8001638:	211a      	movs	r1, #26
 800163a:	20d2      	movs	r0, #210	; 0xd2
 800163c:	f7ff fca4 	bl	8000f88 <MPU_writeByte>
	MPU_writeByte(MPU9250_ADDRESS, SMPLRT_DIV, 0x00);  // Set sample rate to 1 kHz
 8001640:	2200      	movs	r2, #0
 8001642:	2119      	movs	r1, #25
 8001644:	20d2      	movs	r0, #210	; 0xd2
 8001646:	f7ff fc9f 	bl	8000f88 <MPU_writeByte>
	MPU_writeByte(MPU9250_ADDRESS, GYRO_CONFIG, 0x00);  // Set gyro full-scale to 250 degrees per second, maximum sensitivity
 800164a:	2200      	movs	r2, #0
 800164c:	211b      	movs	r1, #27
 800164e:	20d2      	movs	r0, #210	; 0xd2
 8001650:	f7ff fc9a 	bl	8000f88 <MPU_writeByte>
	MPU_writeByte(MPU9250_ADDRESS, ACCEL_CONFIG, 0x00); // Set accelerometer full-scale to 2 g, maximum sensitivity
 8001654:	2200      	movs	r2, #0
 8001656:	211c      	movs	r1, #28
 8001658:	20d2      	movs	r0, #210	; 0xd2
 800165a:	f7ff fc95 	bl	8000f88 <MPU_writeByte>

	uint16_t  gyrosensitivity  = 131;   // = 131 LSB/degrees/sec
 800165e:	2383      	movs	r3, #131	; 0x83
 8001660:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
	uint16_t  accelsensitivity = 16384;  // = 16384 LSB/g
 8001664:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001668:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a

	// Configure FIFO to capture accelerometer and gyro data for bias calculation
	MPU_writeByte(MPU9250_ADDRESS, USER_CTRL, 0x40);   // Enable FIFO  
 800166c:	2240      	movs	r2, #64	; 0x40
 800166e:	216a      	movs	r1, #106	; 0x6a
 8001670:	20d2      	movs	r0, #210	; 0xd2
 8001672:	f7ff fc89 	bl	8000f88 <MPU_writeByte>
	MPU_writeByte(MPU9250_ADDRESS, FIFO_EN, 0x78);     // Enable gyro and accelerometer sensors for FIFO (max size 512 bytes in MPU-9250)
 8001676:	2278      	movs	r2, #120	; 0x78
 8001678:	2123      	movs	r1, #35	; 0x23
 800167a:	20d2      	movs	r0, #210	; 0xd2
 800167c:	f7ff fc84 	bl	8000f88 <MPU_writeByte>
	HAL_Delay(40); // accumulate 40 samples in 80 milliseconds = 480 bytes
 8001680:	2028      	movs	r0, #40	; 0x28
 8001682:	f003 fdf5 	bl	8005270 <HAL_Delay>

	// At end of sample accumulation, turn off FIFO sensor read
	MPU_writeByte(MPU9250_ADDRESS, FIFO_EN, 0x00);        // Disable gyro and accelerometer sensors for FIFO
 8001686:	2200      	movs	r2, #0
 8001688:	2123      	movs	r1, #35	; 0x23
 800168a:	20d2      	movs	r0, #210	; 0xd2
 800168c:	f7ff fc7c 	bl	8000f88 <MPU_writeByte>
	MPU_readBytes(MPU9250_ADDRESS, FIFO_COUNTH, 2, &data[0]); // read FIFO sample count
 8001690:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001694:	2202      	movs	r2, #2
 8001696:	2172      	movs	r1, #114	; 0x72
 8001698:	20d2      	movs	r0, #210	; 0xd2
 800169a:	f7ff fcae 	bl	8000ffa <MPU_readBytes>
	fifo_count = ((uint16_t)data[0] << 8) | data[1];
 800169e:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 80016a2:	021b      	lsls	r3, r3, #8
 80016a4:	b21a      	sxth	r2, r3
 80016a6:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 80016aa:	b21b      	sxth	r3, r3
 80016ac:	4313      	orrs	r3, r2
 80016ae:	b21b      	sxth	r3, r3
 80016b0:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
	packet_count = fifo_count/12;// How many sets of full gyro and accelerometer data for averaging
 80016b4:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 80016b8:	4ab0      	ldr	r2, [pc, #704]	; (800197c <MPU_calibrate+0x3d4>)
 80016ba:	fba2 2303 	umull	r2, r3, r2, r3
 80016be:	08db      	lsrs	r3, r3, #3
 80016c0:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56

	for (ii = 0; ii < packet_count; ii++)
 80016c4:	2300      	movs	r3, #0
 80016c6:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 80016ca:	e071      	b.n	80017b0 <MPU_calibrate+0x208>
	{
		int16_t accel_temp[3] = {0, 0, 0}, gyro_temp[3] = {0, 0, 0};
 80016cc:	2300      	movs	r3, #0
 80016ce:	82bb      	strh	r3, [r7, #20]
 80016d0:	2300      	movs	r3, #0
 80016d2:	82fb      	strh	r3, [r7, #22]
 80016d4:	2300      	movs	r3, #0
 80016d6:	833b      	strh	r3, [r7, #24]
 80016d8:	2300      	movs	r3, #0
 80016da:	81bb      	strh	r3, [r7, #12]
 80016dc:	2300      	movs	r3, #0
 80016de:	81fb      	strh	r3, [r7, #14]
 80016e0:	2300      	movs	r3, #0
 80016e2:	823b      	strh	r3, [r7, #16]
		MPU_readBytes(MPU9250_ADDRESS, FIFO_R_W, 12, &data[0]); // read data for averaging
 80016e4:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80016e8:	220c      	movs	r2, #12
 80016ea:	2174      	movs	r1, #116	; 0x74
 80016ec:	20d2      	movs	r0, #210	; 0xd2
 80016ee:	f7ff fc84 	bl	8000ffa <MPU_readBytes>
		accel_temp[0] = (int16_t) (((int16_t)data[0] << 8) | data[1]  ) ;  // Form signed 16-bit integer for each sample in FIFO
 80016f2:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 80016f6:	021b      	lsls	r3, r3, #8
 80016f8:	b21a      	sxth	r2, r3
 80016fa:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 80016fe:	b21b      	sxth	r3, r3
 8001700:	4313      	orrs	r3, r2
 8001702:	b21b      	sxth	r3, r3
 8001704:	82bb      	strh	r3, [r7, #20]
		accel_temp[1] = (int16_t) (((int16_t)data[2] << 8) | data[3]  ) ;
 8001706:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800170a:	021b      	lsls	r3, r3, #8
 800170c:	b21a      	sxth	r2, r3
 800170e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8001712:	b21b      	sxth	r3, r3
 8001714:	4313      	orrs	r3, r2
 8001716:	b21b      	sxth	r3, r3
 8001718:	82fb      	strh	r3, [r7, #22]
		accel_temp[2] = (int16_t) (((int16_t)data[4] << 8) | data[5]  ) ;    
 800171a:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 800171e:	021b      	lsls	r3, r3, #8
 8001720:	b21a      	sxth	r2, r3
 8001722:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 8001726:	b21b      	sxth	r3, r3
 8001728:	4313      	orrs	r3, r2
 800172a:	b21b      	sxth	r3, r3
 800172c:	833b      	strh	r3, [r7, #24]
		gyro_temp[0]  = (int16_t) (((int16_t)data[6] << 8) | data[7]  ) ;
 800172e:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8001732:	021b      	lsls	r3, r3, #8
 8001734:	b21a      	sxth	r2, r3
 8001736:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 800173a:	b21b      	sxth	r3, r3
 800173c:	4313      	orrs	r3, r2
 800173e:	b21b      	sxth	r3, r3
 8001740:	81bb      	strh	r3, [r7, #12]
		gyro_temp[1]  = (int16_t) (((int16_t)data[8] << 8) | data[9]  ) ;
 8001742:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8001746:	021b      	lsls	r3, r3, #8
 8001748:	b21a      	sxth	r2, r3
 800174a:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800174e:	b21b      	sxth	r3, r3
 8001750:	4313      	orrs	r3, r2
 8001752:	b21b      	sxth	r3, r3
 8001754:	81fb      	strh	r3, [r7, #14]
		gyro_temp[2]  = (int16_t) (((int16_t)data[10] << 8) | data[11]) ;
 8001756:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 800175a:	021b      	lsls	r3, r3, #8
 800175c:	b21a      	sxth	r2, r3
 800175e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8001762:	b21b      	sxth	r3, r3
 8001764:	4313      	orrs	r3, r2
 8001766:	b21b      	sxth	r3, r3
 8001768:	823b      	strh	r3, [r7, #16]

		accel_bias[0] += (int32_t) accel_temp[0]; // Sum individual signed 16-bit biases to get accumulated signed 32-bit biases
 800176a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800176c:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8001770:	4413      	add	r3, r2
 8001772:	62fb      	str	r3, [r7, #44]	; 0x2c
		accel_bias[1] += (int32_t) accel_temp[1];
 8001774:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001776:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800177a:	4413      	add	r3, r2
 800177c:	633b      	str	r3, [r7, #48]	; 0x30
		accel_bias[2] += (int32_t) accel_temp[2];
 800177e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001780:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8001784:	4413      	add	r3, r2
 8001786:	637b      	str	r3, [r7, #52]	; 0x34
		gyro_bias[0]  += (int32_t) gyro_temp[0];
 8001788:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800178a:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800178e:	4413      	add	r3, r2
 8001790:	63bb      	str	r3, [r7, #56]	; 0x38
		gyro_bias[1]  += (int32_t) gyro_temp[1];
 8001792:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001794:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8001798:	4413      	add	r3, r2
 800179a:	63fb      	str	r3, [r7, #60]	; 0x3c
		gyro_bias[2]  += (int32_t) gyro_temp[2];
 800179c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800179e:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 80017a2:	4413      	add	r3, r2
 80017a4:	643b      	str	r3, [r7, #64]	; 0x40
	for (ii = 0; ii < packet_count; ii++)
 80017a6:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 80017aa:	3301      	adds	r3, #1
 80017ac:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 80017b0:	f8b7 205e 	ldrh.w	r2, [r7, #94]	; 0x5e
 80017b4:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80017b8:	429a      	cmp	r2, r3
 80017ba:	d387      	bcc.n	80016cc <MPU_calibrate+0x124>
	}
	accel_bias[0] /= (int32_t) packet_count; // Normalize sums to get average count biases
 80017bc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80017be:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80017c2:	fb92 f3f3 	sdiv	r3, r2, r3
 80017c6:	62fb      	str	r3, [r7, #44]	; 0x2c
	accel_bias[1] /= (int32_t) packet_count;
 80017c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80017ca:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80017ce:	fb92 f3f3 	sdiv	r3, r2, r3
 80017d2:	633b      	str	r3, [r7, #48]	; 0x30
	accel_bias[2] /= (int32_t) packet_count;
 80017d4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80017d6:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80017da:	fb92 f3f3 	sdiv	r3, r2, r3
 80017de:	637b      	str	r3, [r7, #52]	; 0x34
	gyro_bias[0]  /= (int32_t) packet_count;
 80017e0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80017e2:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80017e6:	fb92 f3f3 	sdiv	r3, r2, r3
 80017ea:	63bb      	str	r3, [r7, #56]	; 0x38
	gyro_bias[1]  /= (int32_t) packet_count;
 80017ec:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80017ee:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80017f2:	fb92 f3f3 	sdiv	r3, r2, r3
 80017f6:	63fb      	str	r3, [r7, #60]	; 0x3c
	gyro_bias[2]  /= (int32_t) packet_count;
 80017f8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80017fa:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80017fe:	fb92 f3f3 	sdiv	r3, r2, r3
 8001802:	643b      	str	r3, [r7, #64]	; 0x40

	if(accel_bias[2] > 0L) {accel_bias[2] -= (int32_t) accelsensitivity;}  // Remove gravity from the z-axis accelerometer bias calculation
 8001804:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001806:	2b00      	cmp	r3, #0
 8001808:	dd05      	ble.n	8001816 <MPU_calibrate+0x26e>
 800180a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800180c:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8001810:	1ad3      	subs	r3, r2, r3
 8001812:	637b      	str	r3, [r7, #52]	; 0x34
 8001814:	e004      	b.n	8001820 <MPU_calibrate+0x278>
	else {accel_bias[2] += (int32_t) accelsensitivity;}
 8001816:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001818:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 800181c:	4413      	add	r3, r2
 800181e:	637b      	str	r3, [r7, #52]	; 0x34

	// Construct the gyro biases for push to the hardware gyro bias registers, which are reset to zero upon device startup
	data[0] = (-gyro_bias[0]/4  >> 8) & 0xFF; // Divide by 4 to get 32.9 LSB per deg/s to conform to expected bias input format
 8001820:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001822:	425b      	negs	r3, r3
 8001824:	2b00      	cmp	r3, #0
 8001826:	da00      	bge.n	800182a <MPU_calibrate+0x282>
 8001828:	3303      	adds	r3, #3
 800182a:	109b      	asrs	r3, r3, #2
 800182c:	121b      	asrs	r3, r3, #8
 800182e:	b2db      	uxtb	r3, r3
 8001830:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
	data[1] = (-gyro_bias[0]/4)       & 0xFF; // Biases are additive, so change sign on calculated average gyro biases
 8001834:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001836:	425b      	negs	r3, r3
 8001838:	2b00      	cmp	r3, #0
 800183a:	da00      	bge.n	800183e <MPU_calibrate+0x296>
 800183c:	3303      	adds	r3, #3
 800183e:	109b      	asrs	r3, r3, #2
 8001840:	b2db      	uxtb	r3, r3
 8001842:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
	data[2] = (-gyro_bias[1]/4  >> 8) & 0xFF;
 8001846:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001848:	425b      	negs	r3, r3
 800184a:	2b00      	cmp	r3, #0
 800184c:	da00      	bge.n	8001850 <MPU_calibrate+0x2a8>
 800184e:	3303      	adds	r3, #3
 8001850:	109b      	asrs	r3, r3, #2
 8001852:	121b      	asrs	r3, r3, #8
 8001854:	b2db      	uxtb	r3, r3
 8001856:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
	data[3] = (-gyro_bias[1]/4)       & 0xFF;
 800185a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800185c:	425b      	negs	r3, r3
 800185e:	2b00      	cmp	r3, #0
 8001860:	da00      	bge.n	8001864 <MPU_calibrate+0x2bc>
 8001862:	3303      	adds	r3, #3
 8001864:	109b      	asrs	r3, r3, #2
 8001866:	b2db      	uxtb	r3, r3
 8001868:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	data[4] = (-gyro_bias[2]/4  >> 8) & 0xFF;
 800186c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800186e:	425b      	negs	r3, r3
 8001870:	2b00      	cmp	r3, #0
 8001872:	da00      	bge.n	8001876 <MPU_calibrate+0x2ce>
 8001874:	3303      	adds	r3, #3
 8001876:	109b      	asrs	r3, r3, #2
 8001878:	121b      	asrs	r3, r3, #8
 800187a:	b2db      	uxtb	r3, r3
 800187c:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
	data[5] = (-gyro_bias[2]/4)       & 0xFF;
 8001880:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001882:	425b      	negs	r3, r3
 8001884:	2b00      	cmp	r3, #0
 8001886:	da00      	bge.n	800188a <MPU_calibrate+0x2e2>
 8001888:	3303      	adds	r3, #3
 800188a:	109b      	asrs	r3, r3, #2
 800188c:	b2db      	uxtb	r3, r3
 800188e:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
	MPU_writeByte(MPU9250_ADDRESS, YG_OFFSET_H, data[2]);
	MPU_writeByte(MPU9250_ADDRESS, YG_OFFSET_L, data[3]);
	MPU_writeByte(MPU9250_ADDRESS, ZG_OFFSET_H, data[4]);
	MPU_writeByte(MPU9250_ADDRESS, ZG_OFFSET_L, data[5]);
	*/
	dest1[0] = (float) gyro_bias[0]/(float) gyrosensitivity; // construct gyro bias in deg/s for later manual subtraction
 8001892:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001894:	ee07 3a90 	vmov	s15, r3
 8001898:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800189c:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 80018a0:	ee07 3a90 	vmov	s15, r3
 80018a4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80018a8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	edc3 7a00 	vstr	s15, [r3]
	dest1[1] = (float) gyro_bias[1]/(float) gyrosensitivity;
 80018b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80018b4:	ee07 3a90 	vmov	s15, r3
 80018b8:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80018bc:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 80018c0:	ee07 3a90 	vmov	s15, r3
 80018c4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	3304      	adds	r3, #4
 80018cc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80018d0:	edc3 7a00 	vstr	s15, [r3]
	dest1[2] = (float) gyro_bias[2]/(float) gyrosensitivity;
 80018d4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80018d6:	ee07 3a90 	vmov	s15, r3
 80018da:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80018de:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 80018e2:	ee07 3a90 	vmov	s15, r3
 80018e6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	3308      	adds	r3, #8
 80018ee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80018f2:	edc3 7a00 	vstr	s15, [r3]
	// factory trim values which must be added to the calculated accelerometer biases; on boot up these registers will hold
	// non-zero values. In addition, bit 0 of the lower byte must be preserved since it is used for temperature
	// compensation calculations. Accelerometer bias registers expect bias input as 2048 LSB per g, so that
	// the accelerometer biases calculated above must be divided by 8.

	int32_t accel_bias_reg[3] = {0, 0, 0}; // A place to hold the factory accelerometer trim biases
 80018f6:	2300      	movs	r3, #0
 80018f8:	623b      	str	r3, [r7, #32]
 80018fa:	2300      	movs	r3, #0
 80018fc:	627b      	str	r3, [r7, #36]	; 0x24
 80018fe:	2300      	movs	r3, #0
 8001900:	62bb      	str	r3, [r7, #40]	; 0x28
	MPU_readBytes(MPU9250_ADDRESS, XA_OFFSET_H, 2, &data[0]); // Read factory accelerometer trim values
 8001902:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001906:	2202      	movs	r2, #2
 8001908:	2177      	movs	r1, #119	; 0x77
 800190a:	20d2      	movs	r0, #210	; 0xd2
 800190c:	f7ff fb75 	bl	8000ffa <MPU_readBytes>
	accel_bias_reg[0] = (int16_t) ((int16_t)data[0] << 8) | data[1];
 8001910:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8001914:	021b      	lsls	r3, r3, #8
 8001916:	b21b      	sxth	r3, r3
 8001918:	461a      	mov	r2, r3
 800191a:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 800191e:	4313      	orrs	r3, r2
 8001920:	623b      	str	r3, [r7, #32]
	MPU_readBytes(MPU9250_ADDRESS, YA_OFFSET_H, 2, &data[0]);
 8001922:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001926:	2202      	movs	r2, #2
 8001928:	217a      	movs	r1, #122	; 0x7a
 800192a:	20d2      	movs	r0, #210	; 0xd2
 800192c:	f7ff fb65 	bl	8000ffa <MPU_readBytes>
	accel_bias_reg[1] = (int16_t) ((int16_t)data[0] << 8) | data[1];
 8001930:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8001934:	021b      	lsls	r3, r3, #8
 8001936:	b21b      	sxth	r3, r3
 8001938:	461a      	mov	r2, r3
 800193a:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 800193e:	4313      	orrs	r3, r2
 8001940:	627b      	str	r3, [r7, #36]	; 0x24
	MPU_readBytes(MPU9250_ADDRESS, ZA_OFFSET_H, 2, &data[0]);
 8001942:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001946:	2202      	movs	r2, #2
 8001948:	217d      	movs	r1, #125	; 0x7d
 800194a:	20d2      	movs	r0, #210	; 0xd2
 800194c:	f7ff fb55 	bl	8000ffa <MPU_readBytes>
	accel_bias_reg[2] = (int16_t) ((int16_t)data[0] << 8) | data[1];
 8001950:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8001954:	021b      	lsls	r3, r3, #8
 8001956:	b21b      	sxth	r3, r3
 8001958:	461a      	mov	r2, r3
 800195a:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 800195e:	4313      	orrs	r3, r2
 8001960:	62bb      	str	r3, [r7, #40]	; 0x28

	uint32_t mask = 1uL; // Define mask for temperature compensation bit 0 of lower byte of accelerometer bias registers
 8001962:	2301      	movs	r3, #1
 8001964:	653b      	str	r3, [r7, #80]	; 0x50
	uint8_t mask_bit[3] = {0, 0, 0}; // Define array to hold mask bit for each accelerometer bias axis
 8001966:	2300      	movs	r3, #0
 8001968:	773b      	strb	r3, [r7, #28]
 800196a:	2300      	movs	r3, #0
 800196c:	777b      	strb	r3, [r7, #29]
 800196e:	2300      	movs	r3, #0
 8001970:	77bb      	strb	r3, [r7, #30]

	for(ii = 0; ii < 3; ii++)
 8001972:	2300      	movs	r3, #0
 8001974:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8001978:	e01c      	b.n	80019b4 <MPU_calibrate+0x40c>
 800197a:	bf00      	nop
 800197c:	aaaaaaab 	.word	0xaaaaaaab
	{
		if(accel_bias_reg[ii] & mask) mask_bit[ii] = 0x01; // If temperature compensation bit is set, record that fact in mask_bit
 8001980:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8001984:	009b      	lsls	r3, r3, #2
 8001986:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800198a:	4413      	add	r3, r2
 800198c:	f853 3c40 	ldr.w	r3, [r3, #-64]
 8001990:	461a      	mov	r2, r3
 8001992:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001994:	4013      	ands	r3, r2
 8001996:	2b00      	cmp	r3, #0
 8001998:	d007      	beq.n	80019aa <MPU_calibrate+0x402>
 800199a:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 800199e:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80019a2:	4413      	add	r3, r2
 80019a4:	2201      	movs	r2, #1
 80019a6:	f803 2c44 	strb.w	r2, [r3, #-68]
	for(ii = 0; ii < 3; ii++)
 80019aa:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 80019ae:	3301      	adds	r3, #1
 80019b0:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 80019b4:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 80019b8:	2b02      	cmp	r3, #2
 80019ba:	d9e1      	bls.n	8001980 <MPU_calibrate+0x3d8>
	}

	// Construct total accelerometer bias, including calculated average accelerometer bias from above
	accel_bias_reg[0] -= (accel_bias[0]/8); // Subtract calculated averaged accelerometer bias scaled to 2048 LSB/g (16 g full scale)
 80019bc:	6a3a      	ldr	r2, [r7, #32]
 80019be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	da00      	bge.n	80019c6 <MPU_calibrate+0x41e>
 80019c4:	3307      	adds	r3, #7
 80019c6:	10db      	asrs	r3, r3, #3
 80019c8:	425b      	negs	r3, r3
 80019ca:	4413      	add	r3, r2
 80019cc:	623b      	str	r3, [r7, #32]
	accel_bias_reg[1] -= (accel_bias[1]/8);
 80019ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80019d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	da00      	bge.n	80019d8 <MPU_calibrate+0x430>
 80019d6:	3307      	adds	r3, #7
 80019d8:	10db      	asrs	r3, r3, #3
 80019da:	425b      	negs	r3, r3
 80019dc:	4413      	add	r3, r2
 80019de:	627b      	str	r3, [r7, #36]	; 0x24
	accel_bias_reg[2] -= (accel_bias[2]/8);
 80019e0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80019e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	da00      	bge.n	80019ea <MPU_calibrate+0x442>
 80019e8:	3307      	adds	r3, #7
 80019ea:	10db      	asrs	r3, r3, #3
 80019ec:	425b      	negs	r3, r3
 80019ee:	4413      	add	r3, r2
 80019f0:	62bb      	str	r3, [r7, #40]	; 0x28

	data[0] = (accel_bias_reg[0] >> 8) & 0xFF;
 80019f2:	6a3b      	ldr	r3, [r7, #32]
 80019f4:	121b      	asrs	r3, r3, #8
 80019f6:	b2db      	uxtb	r3, r3
 80019f8:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
	data[1] = (accel_bias_reg[0])      & 0xFF;
 80019fc:	6a3b      	ldr	r3, [r7, #32]
 80019fe:	b2db      	uxtb	r3, r3
 8001a00:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
	data[1] = data[1] | mask_bit[0]; // preserve temperature compensation bit when writing back to accelerometer bias registers
 8001a04:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8001a08:	7f3b      	ldrb	r3, [r7, #28]
 8001a0a:	4313      	orrs	r3, r2
 8001a0c:	b2db      	uxtb	r3, r3
 8001a0e:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
	data[2] = (accel_bias_reg[1] >> 8) & 0xFF;
 8001a12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a14:	121b      	asrs	r3, r3, #8
 8001a16:	b2db      	uxtb	r3, r3
 8001a18:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
	data[3] = (accel_bias_reg[1])      & 0xFF;
 8001a1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a1e:	b2db      	uxtb	r3, r3
 8001a20:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	data[3] = data[3] | mask_bit[1]; // preserve temperature compensation bit when writing back to accelerometer bias registers
 8001a24:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 8001a28:	7f7b      	ldrb	r3, [r7, #29]
 8001a2a:	4313      	orrs	r3, r2
 8001a2c:	b2db      	uxtb	r3, r3
 8001a2e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	data[4] = (accel_bias_reg[2] >> 8) & 0xFF;
 8001a32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a34:	121b      	asrs	r3, r3, #8
 8001a36:	b2db      	uxtb	r3, r3
 8001a38:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
	data[5] = (accel_bias_reg[2])      & 0xFF;
 8001a3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a3e:	b2db      	uxtb	r3, r3
 8001a40:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
	data[5] = data[5] | mask_bit[2]; // preserve temperature compensation bit when writing back to accelerometer bias registers
 8001a44:	f897 2049 	ldrb.w	r2, [r7, #73]	; 0x49
 8001a48:	7fbb      	ldrb	r3, [r7, #30]
 8001a4a:	4313      	orrs	r3, r2
 8001a4c:	b2db      	uxtb	r3, r3
 8001a4e:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
	MPU_writeByte(MPU9250_ADDRESS, YA_OFFSET_L, data[3]);
	MPU_writeByte(MPU9250_ADDRESS, ZA_OFFSET_H, data[4]);
	MPU_writeByte(MPU9250_ADDRESS, ZA_OFFSET_L, data[5]);
	*/
	// Output scaled accelerometer biases for manual subtraction in the main program
	dest2[0] = (float)accel_bias[0]/(float)accelsensitivity; 
 8001a52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a54:	ee07 3a90 	vmov	s15, r3
 8001a58:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001a5c:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8001a60:	ee07 3a90 	vmov	s15, r3
 8001a64:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001a68:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001a6c:	683b      	ldr	r3, [r7, #0]
 8001a6e:	edc3 7a00 	vstr	s15, [r3]
	dest2[1] = (float)accel_bias[1]/(float)accelsensitivity;
 8001a72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a74:	ee07 3a90 	vmov	s15, r3
 8001a78:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001a7c:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8001a80:	ee07 3a90 	vmov	s15, r3
 8001a84:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001a88:	683b      	ldr	r3, [r7, #0]
 8001a8a:	3304      	adds	r3, #4
 8001a8c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001a90:	edc3 7a00 	vstr	s15, [r3]
	dest2[2] = (float)accel_bias[2]/(float)accelsensitivity;
 8001a94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a96:	ee07 3a90 	vmov	s15, r3
 8001a9a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001a9e:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8001aa2:	ee07 3a90 	vmov	s15, r3
 8001aa6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001aaa:	683b      	ldr	r3, [r7, #0]
 8001aac:	3308      	adds	r3, #8
 8001aae:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001ab2:	edc3 7a00 	vstr	s15, [r3]
}
 8001ab6:	bf00      	nop
 8001ab8:	3760      	adds	r7, #96	; 0x60
 8001aba:	46bd      	mov	sp, r7
 8001abc:	bd80      	pop	{r7, pc}
 8001abe:	bf00      	nop

08001ac0 <MPU_SelfTest>:
void MPU_SelfTest(float* destination)
{
 8001ac0:	b5b0      	push	{r4, r5, r7, lr}
 8001ac2:	b09e      	sub	sp, #120	; 0x78
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]
	// Accelerometer and gyroscope self test; check calibration wrt factory settings
	 // Should return percent deviation from factory trim values, +/- 14 or less deviation is a pass
	uint8_t rawData[6] = {0, 0, 0, 0, 0, 0};
 8001ac8:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001acc:	2200      	movs	r2, #0
 8001ace:	601a      	str	r2, [r3, #0]
 8001ad0:	809a      	strh	r2, [r3, #4]
	uint8_t selfTest[6];
	int32_t gAvg[3] = {0}, aAvg[3] = {0}, aSTAvg[3] = {0}, gSTAvg[3] = {0};
 8001ad2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	601a      	str	r2, [r3, #0]
 8001ada:	605a      	str	r2, [r3, #4]
 8001adc:	609a      	str	r2, [r3, #8]
 8001ade:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	601a      	str	r2, [r3, #0]
 8001ae6:	605a      	str	r2, [r3, #4]
 8001ae8:	609a      	str	r2, [r3, #8]
 8001aea:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001aee:	2200      	movs	r2, #0
 8001af0:	601a      	str	r2, [r3, #0]
 8001af2:	605a      	str	r2, [r3, #4]
 8001af4:	609a      	str	r2, [r3, #8]
 8001af6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001afa:	2200      	movs	r2, #0
 8001afc:	601a      	str	r2, [r3, #0]
 8001afe:	605a      	str	r2, [r3, #4]
 8001b00:	609a      	str	r2, [r3, #8]
	float factoryTrim[6];
	uint8_t FS = 0;
 8001b02:	2300      	movs	r3, #0
 8001b04:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63

	MPU_writeByte(MPU9250_ADDRESS, SMPLRT_DIV, 0x00); // Set gyro sample rate to 1 kHz
 8001b08:	2200      	movs	r2, #0
 8001b0a:	2119      	movs	r1, #25
 8001b0c:	20d2      	movs	r0, #210	; 0xd2
 8001b0e:	f7ff fa3b 	bl	8000f88 <MPU_writeByte>
	MPU_writeByte(MPU9250_ADDRESS, CONFIG, 0x02); // Set gyro sample rate to 1 kHz and DLPF to 92 Hz
 8001b12:	2202      	movs	r2, #2
 8001b14:	211a      	movs	r1, #26
 8001b16:	20d2      	movs	r0, #210	; 0xd2
 8001b18:	f7ff fa36 	bl	8000f88 <MPU_writeByte>
	MPU_writeByte(MPU9250_ADDRESS, GYRO_CONFIG, FS<<3); // Set full scale range for the gyro to 250 dps
 8001b1c:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 8001b20:	00db      	lsls	r3, r3, #3
 8001b22:	b2db      	uxtb	r3, r3
 8001b24:	461a      	mov	r2, r3
 8001b26:	211b      	movs	r1, #27
 8001b28:	20d2      	movs	r0, #210	; 0xd2
 8001b2a:	f7ff fa2d 	bl	8000f88 <MPU_writeByte>
	MPU_writeByte(MPU9250_ADDRESS, ACCEL_CONFIG2, 0x02); // Set accelerometer rate to 1 kHz and bandwidth to 92 Hz
 8001b2e:	2202      	movs	r2, #2
 8001b30:	211d      	movs	r1, #29
 8001b32:	20d2      	movs	r0, #210	; 0xd2
 8001b34:	f7ff fa28 	bl	8000f88 <MPU_writeByte>
	MPU_writeByte(MPU9250_ADDRESS, ACCEL_CONFIG, FS<<3); // Set full scale range for the accelerometer to 2 g
 8001b38:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 8001b3c:	00db      	lsls	r3, r3, #3
 8001b3e:	b2db      	uxtb	r3, r3
 8001b40:	461a      	mov	r2, r3
 8001b42:	211c      	movs	r1, #28
 8001b44:	20d2      	movs	r0, #210	; 0xd2
 8001b46:	f7ff fa1f 	bl	8000f88 <MPU_writeByte>

	for( int ii = 0; ii < 200; ii++)
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	677b      	str	r3, [r7, #116]	; 0x74
 8001b4e:	e058      	b.n	8001c02 <MPU_SelfTest+0x142>
	{ // get average current values of gyro and acclerometer

		MPU_readBytes(MPU9250_ADDRESS, ACCEL_XOUT_H, 6, &rawData[0]); // Read the six raw data registers into data array
 8001b50:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001b54:	2206      	movs	r2, #6
 8001b56:	213b      	movs	r1, #59	; 0x3b
 8001b58:	20d2      	movs	r0, #210	; 0xd2
 8001b5a:	f7ff fa4e 	bl	8000ffa <MPU_readBytes>
		aAvg[0] += (int16_t)(((int16_t)rawData[0] << 8) | rawData[1]) ; // Turn the MSB and LSB into a signed 16-bit value
 8001b5e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001b60:	f897 205c 	ldrb.w	r2, [r7, #92]	; 0x5c
 8001b64:	0212      	lsls	r2, r2, #8
 8001b66:	b211      	sxth	r1, r2
 8001b68:	f897 205d 	ldrb.w	r2, [r7, #93]	; 0x5d
 8001b6c:	b212      	sxth	r2, r2
 8001b6e:	430a      	orrs	r2, r1
 8001b70:	b212      	sxth	r2, r2
 8001b72:	4413      	add	r3, r2
 8001b74:	63fb      	str	r3, [r7, #60]	; 0x3c
		aAvg[1] += (int16_t)(((int16_t)rawData[2] << 8) | rawData[3]) ;
 8001b76:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001b78:	f897 205e 	ldrb.w	r2, [r7, #94]	; 0x5e
 8001b7c:	0212      	lsls	r2, r2, #8
 8001b7e:	b211      	sxth	r1, r2
 8001b80:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 8001b84:	b212      	sxth	r2, r2
 8001b86:	430a      	orrs	r2, r1
 8001b88:	b212      	sxth	r2, r2
 8001b8a:	4413      	add	r3, r2
 8001b8c:	643b      	str	r3, [r7, #64]	; 0x40
		aAvg[2] += (int16_t)(((int16_t)rawData[4] << 8) | rawData[5]) ;
 8001b8e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001b90:	f897 2060 	ldrb.w	r2, [r7, #96]	; 0x60
 8001b94:	0212      	lsls	r2, r2, #8
 8001b96:	b211      	sxth	r1, r2
 8001b98:	f897 2061 	ldrb.w	r2, [r7, #97]	; 0x61
 8001b9c:	b212      	sxth	r2, r2
 8001b9e:	430a      	orrs	r2, r1
 8001ba0:	b212      	sxth	r2, r2
 8001ba2:	4413      	add	r3, r2
 8001ba4:	647b      	str	r3, [r7, #68]	; 0x44

		MPU_readBytes(MPU9250_ADDRESS, GYRO_XOUT_H, 6, &rawData[0]); // Read the six raw data registers sequentially into data array
 8001ba6:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001baa:	2206      	movs	r2, #6
 8001bac:	2143      	movs	r1, #67	; 0x43
 8001bae:	20d2      	movs	r0, #210	; 0xd2
 8001bb0:	f7ff fa23 	bl	8000ffa <MPU_readBytes>
		gAvg[0] += (int16_t)(((int16_t)rawData[0] << 8) | rawData[1]) ; // Turn the MSB and LSB into a signed 16-bit value
 8001bb4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001bb6:	f897 205c 	ldrb.w	r2, [r7, #92]	; 0x5c
 8001bba:	0212      	lsls	r2, r2, #8
 8001bbc:	b211      	sxth	r1, r2
 8001bbe:	f897 205d 	ldrb.w	r2, [r7, #93]	; 0x5d
 8001bc2:	b212      	sxth	r2, r2
 8001bc4:	430a      	orrs	r2, r1
 8001bc6:	b212      	sxth	r2, r2
 8001bc8:	4413      	add	r3, r2
 8001bca:	64bb      	str	r3, [r7, #72]	; 0x48
		gAvg[1] += (int16_t)(((int16_t)rawData[2] << 8) | rawData[3]) ;
 8001bcc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001bce:	f897 205e 	ldrb.w	r2, [r7, #94]	; 0x5e
 8001bd2:	0212      	lsls	r2, r2, #8
 8001bd4:	b211      	sxth	r1, r2
 8001bd6:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 8001bda:	b212      	sxth	r2, r2
 8001bdc:	430a      	orrs	r2, r1
 8001bde:	b212      	sxth	r2, r2
 8001be0:	4413      	add	r3, r2
 8001be2:	64fb      	str	r3, [r7, #76]	; 0x4c
		gAvg[2] += (int16_t)(((int16_t)rawData[4] << 8) | rawData[5]) ;
 8001be4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001be6:	f897 2060 	ldrb.w	r2, [r7, #96]	; 0x60
 8001bea:	0212      	lsls	r2, r2, #8
 8001bec:	b211      	sxth	r1, r2
 8001bee:	f897 2061 	ldrb.w	r2, [r7, #97]	; 0x61
 8001bf2:	b212      	sxth	r2, r2
 8001bf4:	430a      	orrs	r2, r1
 8001bf6:	b212      	sxth	r2, r2
 8001bf8:	4413      	add	r3, r2
 8001bfa:	653b      	str	r3, [r7, #80]	; 0x50
	for( int ii = 0; ii < 200; ii++)
 8001bfc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001bfe:	3301      	adds	r3, #1
 8001c00:	677b      	str	r3, [r7, #116]	; 0x74
 8001c02:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001c04:	2bc7      	cmp	r3, #199	; 0xc7
 8001c06:	dda3      	ble.n	8001b50 <MPU_SelfTest+0x90>
	}

	for (int ii =0; ii < 3; ii++)
 8001c08:	2300      	movs	r3, #0
 8001c0a:	673b      	str	r3, [r7, #112]	; 0x70
 8001c0c:	e02a      	b.n	8001c64 <MPU_SelfTest+0x1a4>
	{ // Get average of 200 values and store as average current readings
		aAvg[ii] /= 200;
 8001c0e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001c10:	009b      	lsls	r3, r3, #2
 8001c12:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8001c16:	4413      	add	r3, r2
 8001c18:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8001c1c:	4a4a      	ldr	r2, [pc, #296]	; (8001d48 <MPU_SelfTest+0x288>)
 8001c1e:	fb82 1203 	smull	r1, r2, r2, r3
 8001c22:	1192      	asrs	r2, r2, #6
 8001c24:	17db      	asrs	r3, r3, #31
 8001c26:	1ad2      	subs	r2, r2, r3
 8001c28:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001c2a:	009b      	lsls	r3, r3, #2
 8001c2c:	f107 0178 	add.w	r1, r7, #120	; 0x78
 8001c30:	440b      	add	r3, r1
 8001c32:	f843 2c3c 	str.w	r2, [r3, #-60]
		gAvg[ii] /= 200;
 8001c36:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001c38:	009b      	lsls	r3, r3, #2
 8001c3a:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8001c3e:	4413      	add	r3, r2
 8001c40:	f853 3c30 	ldr.w	r3, [r3, #-48]
 8001c44:	4a40      	ldr	r2, [pc, #256]	; (8001d48 <MPU_SelfTest+0x288>)
 8001c46:	fb82 1203 	smull	r1, r2, r2, r3
 8001c4a:	1192      	asrs	r2, r2, #6
 8001c4c:	17db      	asrs	r3, r3, #31
 8001c4e:	1ad2      	subs	r2, r2, r3
 8001c50:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001c52:	009b      	lsls	r3, r3, #2
 8001c54:	f107 0178 	add.w	r1, r7, #120	; 0x78
 8001c58:	440b      	add	r3, r1
 8001c5a:	f843 2c30 	str.w	r2, [r3, #-48]
	for (int ii =0; ii < 3; ii++)
 8001c5e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001c60:	3301      	adds	r3, #1
 8001c62:	673b      	str	r3, [r7, #112]	; 0x70
 8001c64:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001c66:	2b02      	cmp	r3, #2
 8001c68:	ddd1      	ble.n	8001c0e <MPU_SelfTest+0x14e>
	}

	// Configure the accelerometer for self-test
	MPU_writeByte(MPU9250_ADDRESS, ACCEL_CONFIG, 0xE0); // Enable self test on all three axes and set accelerometer range to +/- 2 g
 8001c6a:	22e0      	movs	r2, #224	; 0xe0
 8001c6c:	211c      	movs	r1, #28
 8001c6e:	20d2      	movs	r0, #210	; 0xd2
 8001c70:	f7ff f98a 	bl	8000f88 <MPU_writeByte>
	MPU_writeByte(MPU9250_ADDRESS, GYRO_CONFIG, 0xE0); // Enable self test on all three axes and set gyro range to +/- 250 degrees/s
 8001c74:	22e0      	movs	r2, #224	; 0xe0
 8001c76:	211b      	movs	r1, #27
 8001c78:	20d2      	movs	r0, #210	; 0xd2
 8001c7a:	f7ff f985 	bl	8000f88 <MPU_writeByte>
	HAL_Delay(25); // Delay a while to let the device stabilize
 8001c7e:	2019      	movs	r0, #25
 8001c80:	f003 faf6 	bl	8005270 <HAL_Delay>

	for( int ii = 0; ii < 200; ii++)
 8001c84:	2300      	movs	r3, #0
 8001c86:	66fb      	str	r3, [r7, #108]	; 0x6c
 8001c88:	e058      	b.n	8001d3c <MPU_SelfTest+0x27c>
	{ // get average self-test values of gyro and acclerometer

		MPU_readBytes(MPU9250_ADDRESS, ACCEL_XOUT_H, 6, &rawData[0]); // Read the six raw data registers into data array
 8001c8a:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001c8e:	2206      	movs	r2, #6
 8001c90:	213b      	movs	r1, #59	; 0x3b
 8001c92:	20d2      	movs	r0, #210	; 0xd2
 8001c94:	f7ff f9b1 	bl	8000ffa <MPU_readBytes>
		aSTAvg[0] += (int16_t)(((int16_t)rawData[0] << 8) | rawData[1]) ; // Turn the MSB and LSB into a signed 16-bit value
 8001c98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c9a:	f897 205c 	ldrb.w	r2, [r7, #92]	; 0x5c
 8001c9e:	0212      	lsls	r2, r2, #8
 8001ca0:	b211      	sxth	r1, r2
 8001ca2:	f897 205d 	ldrb.w	r2, [r7, #93]	; 0x5d
 8001ca6:	b212      	sxth	r2, r2
 8001ca8:	430a      	orrs	r2, r1
 8001caa:	b212      	sxth	r2, r2
 8001cac:	4413      	add	r3, r2
 8001cae:	633b      	str	r3, [r7, #48]	; 0x30
		aSTAvg[1] += (int16_t)(((int16_t)rawData[2] << 8) | rawData[3]) ;
 8001cb0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001cb2:	f897 205e 	ldrb.w	r2, [r7, #94]	; 0x5e
 8001cb6:	0212      	lsls	r2, r2, #8
 8001cb8:	b211      	sxth	r1, r2
 8001cba:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 8001cbe:	b212      	sxth	r2, r2
 8001cc0:	430a      	orrs	r2, r1
 8001cc2:	b212      	sxth	r2, r2
 8001cc4:	4413      	add	r3, r2
 8001cc6:	637b      	str	r3, [r7, #52]	; 0x34
		aSTAvg[2] += (int16_t)(((int16_t)rawData[4] << 8) | rawData[5]) ;
 8001cc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001cca:	f897 2060 	ldrb.w	r2, [r7, #96]	; 0x60
 8001cce:	0212      	lsls	r2, r2, #8
 8001cd0:	b211      	sxth	r1, r2
 8001cd2:	f897 2061 	ldrb.w	r2, [r7, #97]	; 0x61
 8001cd6:	b212      	sxth	r2, r2
 8001cd8:	430a      	orrs	r2, r1
 8001cda:	b212      	sxth	r2, r2
 8001cdc:	4413      	add	r3, r2
 8001cde:	63bb      	str	r3, [r7, #56]	; 0x38

		MPU_readBytes(MPU9250_ADDRESS, GYRO_XOUT_H, 6, &rawData[0]); // Read the six raw data registers sequentially into data array
 8001ce0:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001ce4:	2206      	movs	r2, #6
 8001ce6:	2143      	movs	r1, #67	; 0x43
 8001ce8:	20d2      	movs	r0, #210	; 0xd2
 8001cea:	f7ff f986 	bl	8000ffa <MPU_readBytes>
		gSTAvg[0] += (int16_t)(((int16_t)rawData[0] << 8) | rawData[1]) ; // Turn the MSB and LSB into a signed 16-bit value
 8001cee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cf0:	f897 205c 	ldrb.w	r2, [r7, #92]	; 0x5c
 8001cf4:	0212      	lsls	r2, r2, #8
 8001cf6:	b211      	sxth	r1, r2
 8001cf8:	f897 205d 	ldrb.w	r2, [r7, #93]	; 0x5d
 8001cfc:	b212      	sxth	r2, r2
 8001cfe:	430a      	orrs	r2, r1
 8001d00:	b212      	sxth	r2, r2
 8001d02:	4413      	add	r3, r2
 8001d04:	627b      	str	r3, [r7, #36]	; 0x24
		gSTAvg[1] += (int16_t)(((int16_t)rawData[2] << 8) | rawData[3]) ;
 8001d06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d08:	f897 205e 	ldrb.w	r2, [r7, #94]	; 0x5e
 8001d0c:	0212      	lsls	r2, r2, #8
 8001d0e:	b211      	sxth	r1, r2
 8001d10:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 8001d14:	b212      	sxth	r2, r2
 8001d16:	430a      	orrs	r2, r1
 8001d18:	b212      	sxth	r2, r2
 8001d1a:	4413      	add	r3, r2
 8001d1c:	62bb      	str	r3, [r7, #40]	; 0x28
		gSTAvg[2] += (int16_t)(((int16_t)rawData[4] << 8) | rawData[5]) ;
 8001d1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d20:	f897 2060 	ldrb.w	r2, [r7, #96]	; 0x60
 8001d24:	0212      	lsls	r2, r2, #8
 8001d26:	b211      	sxth	r1, r2
 8001d28:	f897 2061 	ldrb.w	r2, [r7, #97]	; 0x61
 8001d2c:	b212      	sxth	r2, r2
 8001d2e:	430a      	orrs	r2, r1
 8001d30:	b212      	sxth	r2, r2
 8001d32:	4413      	add	r3, r2
 8001d34:	62fb      	str	r3, [r7, #44]	; 0x2c
	for( int ii = 0; ii < 200; ii++)
 8001d36:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001d38:	3301      	adds	r3, #1
 8001d3a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8001d3c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001d3e:	2bc7      	cmp	r3, #199	; 0xc7
 8001d40:	dda3      	ble.n	8001c8a <MPU_SelfTest+0x1ca>
	}

	for (int ii =0; ii < 3; ii++)
 8001d42:	2300      	movs	r3, #0
 8001d44:	66bb      	str	r3, [r7, #104]	; 0x68
 8001d46:	e02c      	b.n	8001da2 <MPU_SelfTest+0x2e2>
 8001d48:	51eb851f 	.word	0x51eb851f
	{ // Get average of 200 values and store as average self-test readings
		aSTAvg[ii] /= 200;
 8001d4c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001d4e:	009b      	lsls	r3, r3, #2
 8001d50:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8001d54:	4413      	add	r3, r2
 8001d56:	f853 3c48 	ldr.w	r3, [r3, #-72]
 8001d5a:	4add      	ldr	r2, [pc, #884]	; (80020d0 <MPU_SelfTest+0x610>)
 8001d5c:	fb82 1203 	smull	r1, r2, r2, r3
 8001d60:	1192      	asrs	r2, r2, #6
 8001d62:	17db      	asrs	r3, r3, #31
 8001d64:	1ad2      	subs	r2, r2, r3
 8001d66:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001d68:	009b      	lsls	r3, r3, #2
 8001d6a:	f107 0178 	add.w	r1, r7, #120	; 0x78
 8001d6e:	440b      	add	r3, r1
 8001d70:	f843 2c48 	str.w	r2, [r3, #-72]
		gSTAvg[ii] /= 200;
 8001d74:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001d76:	009b      	lsls	r3, r3, #2
 8001d78:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8001d7c:	4413      	add	r3, r2
 8001d7e:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8001d82:	4ad3      	ldr	r2, [pc, #844]	; (80020d0 <MPU_SelfTest+0x610>)
 8001d84:	fb82 1203 	smull	r1, r2, r2, r3
 8001d88:	1192      	asrs	r2, r2, #6
 8001d8a:	17db      	asrs	r3, r3, #31
 8001d8c:	1ad2      	subs	r2, r2, r3
 8001d8e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001d90:	009b      	lsls	r3, r3, #2
 8001d92:	f107 0178 	add.w	r1, r7, #120	; 0x78
 8001d96:	440b      	add	r3, r1
 8001d98:	f843 2c54 	str.w	r2, [r3, #-84]
	for (int ii =0; ii < 3; ii++)
 8001d9c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001d9e:	3301      	adds	r3, #1
 8001da0:	66bb      	str	r3, [r7, #104]	; 0x68
 8001da2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001da4:	2b02      	cmp	r3, #2
 8001da6:	ddd1      	ble.n	8001d4c <MPU_SelfTest+0x28c>
	}

	// Configure the gyro and accelerometer for normal operation
	MPU_writeByte(MPU9250_ADDRESS, ACCEL_CONFIG, 0x00);
 8001da8:	2200      	movs	r2, #0
 8001daa:	211c      	movs	r1, #28
 8001dac:	20d2      	movs	r0, #210	; 0xd2
 8001dae:	f7ff f8eb 	bl	8000f88 <MPU_writeByte>
	MPU_writeByte(MPU9250_ADDRESS, GYRO_CONFIG, 0x00);
 8001db2:	2200      	movs	r2, #0
 8001db4:	211b      	movs	r1, #27
 8001db6:	20d2      	movs	r0, #210	; 0xd2
 8001db8:	f7ff f8e6 	bl	8000f88 <MPU_writeByte>
	HAL_Delay(25); // Delay a while to let the device stabilize
 8001dbc:	2019      	movs	r0, #25
 8001dbe:	f003 fa57 	bl	8005270 <HAL_Delay>

	// Retrieve accelerometer and gyro factory Self-Test Code from USR_Reg
	selfTest[0] = MPU_readByte(MPU9250_ADDRESS, SELF_TEST_X_ACCEL); // X-axis accel self-test results
 8001dc2:	210d      	movs	r1, #13
 8001dc4:	20d2      	movs	r0, #210	; 0xd2
 8001dc6:	f7ff f8fb 	bl	8000fc0 <MPU_readByte>
 8001dca:	4603      	mov	r3, r0
 8001dcc:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
	selfTest[1] = MPU_readByte(MPU9250_ADDRESS, SELF_TEST_Y_ACCEL); // Y-axis accel self-test results
 8001dd0:	210e      	movs	r1, #14
 8001dd2:	20d2      	movs	r0, #210	; 0xd2
 8001dd4:	f7ff f8f4 	bl	8000fc0 <MPU_readByte>
 8001dd8:	4603      	mov	r3, r0
 8001dda:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55
	selfTest[2] = MPU_readByte(MPU9250_ADDRESS, SELF_TEST_Z_ACCEL); // Z-axis accel self-test results
 8001dde:	210f      	movs	r1, #15
 8001de0:	20d2      	movs	r0, #210	; 0xd2
 8001de2:	f7ff f8ed 	bl	8000fc0 <MPU_readByte>
 8001de6:	4603      	mov	r3, r0
 8001de8:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
	selfTest[3] = MPU_readByte(MPU9250_ADDRESS, SELF_TEST_X_GYRO); // X-axis gyro self-test results
 8001dec:	2100      	movs	r1, #0
 8001dee:	20d2      	movs	r0, #210	; 0xd2
 8001df0:	f7ff f8e6 	bl	8000fc0 <MPU_readByte>
 8001df4:	4603      	mov	r3, r0
 8001df6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	selfTest[4] = MPU_readByte(MPU9250_ADDRESS, SELF_TEST_Y_GYRO); // Y-axis gyro self-test results
 8001dfa:	2101      	movs	r1, #1
 8001dfc:	20d2      	movs	r0, #210	; 0xd2
 8001dfe:	f7ff f8df 	bl	8000fc0 <MPU_readByte>
 8001e02:	4603      	mov	r3, r0
 8001e04:	f887 3058 	strb.w	r3, [r7, #88]	; 0x58
	selfTest[5] = MPU_readByte(MPU9250_ADDRESS, SELF_TEST_Z_GYRO); // Z-axis gyro self-test results
 8001e08:	2102      	movs	r1, #2
 8001e0a:	20d2      	movs	r0, #210	; 0xd2
 8001e0c:	f7ff f8d8 	bl	8000fc0 <MPU_readByte>
 8001e10:	4603      	mov	r3, r0
 8001e12:	f887 3059 	strb.w	r3, [r7, #89]	; 0x59

	// Retrieve factory self-test value from self-test code reads
	factoryTrim[0] = (float)(2620/1<<FS)*(pow( 1.01 , ((float)selfTest[0] - 1.0) )); // FT[Xa] factory trim calculation
 8001e16:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 8001e1a:	f640 223c 	movw	r2, #2620	; 0xa3c
 8001e1e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e22:	ee07 3a90 	vmov	s15, r3
 8001e26:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001e2a:	ee17 0a90 	vmov	r0, s15
 8001e2e:	f7fe fb8b 	bl	8000548 <__aeabi_f2d>
 8001e32:	4604      	mov	r4, r0
 8001e34:	460d      	mov	r5, r1
 8001e36:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 8001e3a:	ee07 3a90 	vmov	s15, r3
 8001e3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001e42:	ee17 0a90 	vmov	r0, s15
 8001e46:	f7fe fb7f 	bl	8000548 <__aeabi_f2d>
 8001e4a:	f04f 0200 	mov.w	r2, #0
 8001e4e:	4ba1      	ldr	r3, [pc, #644]	; (80020d4 <MPU_SelfTest+0x614>)
 8001e50:	f7fe fa1a 	bl	8000288 <__aeabi_dsub>
 8001e54:	4602      	mov	r2, r0
 8001e56:	460b      	mov	r3, r1
 8001e58:	ec43 2b17 	vmov	d7, r2, r3
 8001e5c:	eeb0 1a47 	vmov.f32	s2, s14
 8001e60:	eef0 1a67 	vmov.f32	s3, s15
 8001e64:	ed9f 0b98 	vldr	d0, [pc, #608]	; 80020c8 <MPU_SelfTest+0x608>
 8001e68:	f011 ffd6 	bl	8013e18 <pow>
 8001e6c:	ec53 2b10 	vmov	r2, r3, d0
 8001e70:	4620      	mov	r0, r4
 8001e72:	4629      	mov	r1, r5
 8001e74:	f7fe fbc0 	bl	80005f8 <__aeabi_dmul>
 8001e78:	4603      	mov	r3, r0
 8001e7a:	460c      	mov	r4, r1
 8001e7c:	4618      	mov	r0, r3
 8001e7e:	4621      	mov	r1, r4
 8001e80:	f7fe feb2 	bl	8000be8 <__aeabi_d2f>
 8001e84:	4603      	mov	r3, r0
 8001e86:	60fb      	str	r3, [r7, #12]
	factoryTrim[1] = (float)(2620/1<<FS)*(pow( 1.01 , ((float)selfTest[1] - 1.0) )); // FT[Ya] factory trim calculation
 8001e88:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 8001e8c:	f640 223c 	movw	r2, #2620	; 0xa3c
 8001e90:	fa02 f303 	lsl.w	r3, r2, r3
 8001e94:	ee07 3a90 	vmov	s15, r3
 8001e98:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001e9c:	ee17 0a90 	vmov	r0, s15
 8001ea0:	f7fe fb52 	bl	8000548 <__aeabi_f2d>
 8001ea4:	4604      	mov	r4, r0
 8001ea6:	460d      	mov	r5, r1
 8001ea8:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8001eac:	ee07 3a90 	vmov	s15, r3
 8001eb0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001eb4:	ee17 0a90 	vmov	r0, s15
 8001eb8:	f7fe fb46 	bl	8000548 <__aeabi_f2d>
 8001ebc:	f04f 0200 	mov.w	r2, #0
 8001ec0:	4b84      	ldr	r3, [pc, #528]	; (80020d4 <MPU_SelfTest+0x614>)
 8001ec2:	f7fe f9e1 	bl	8000288 <__aeabi_dsub>
 8001ec6:	4602      	mov	r2, r0
 8001ec8:	460b      	mov	r3, r1
 8001eca:	ec43 2b17 	vmov	d7, r2, r3
 8001ece:	eeb0 1a47 	vmov.f32	s2, s14
 8001ed2:	eef0 1a67 	vmov.f32	s3, s15
 8001ed6:	ed9f 0b7c 	vldr	d0, [pc, #496]	; 80020c8 <MPU_SelfTest+0x608>
 8001eda:	f011 ff9d 	bl	8013e18 <pow>
 8001ede:	ec53 2b10 	vmov	r2, r3, d0
 8001ee2:	4620      	mov	r0, r4
 8001ee4:	4629      	mov	r1, r5
 8001ee6:	f7fe fb87 	bl	80005f8 <__aeabi_dmul>
 8001eea:	4603      	mov	r3, r0
 8001eec:	460c      	mov	r4, r1
 8001eee:	4618      	mov	r0, r3
 8001ef0:	4621      	mov	r1, r4
 8001ef2:	f7fe fe79 	bl	8000be8 <__aeabi_d2f>
 8001ef6:	4603      	mov	r3, r0
 8001ef8:	613b      	str	r3, [r7, #16]
	factoryTrim[2] = (float)(2620/1<<FS)*(pow( 1.01 , ((float)selfTest[2] - 1.0) )); // FT[Za] factory trim calculation
 8001efa:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 8001efe:	f640 223c 	movw	r2, #2620	; 0xa3c
 8001f02:	fa02 f303 	lsl.w	r3, r2, r3
 8001f06:	ee07 3a90 	vmov	s15, r3
 8001f0a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001f0e:	ee17 0a90 	vmov	r0, s15
 8001f12:	f7fe fb19 	bl	8000548 <__aeabi_f2d>
 8001f16:	4604      	mov	r4, r0
 8001f18:	460d      	mov	r5, r1
 8001f1a:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 8001f1e:	ee07 3a90 	vmov	s15, r3
 8001f22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001f26:	ee17 0a90 	vmov	r0, s15
 8001f2a:	f7fe fb0d 	bl	8000548 <__aeabi_f2d>
 8001f2e:	f04f 0200 	mov.w	r2, #0
 8001f32:	4b68      	ldr	r3, [pc, #416]	; (80020d4 <MPU_SelfTest+0x614>)
 8001f34:	f7fe f9a8 	bl	8000288 <__aeabi_dsub>
 8001f38:	4602      	mov	r2, r0
 8001f3a:	460b      	mov	r3, r1
 8001f3c:	ec43 2b17 	vmov	d7, r2, r3
 8001f40:	eeb0 1a47 	vmov.f32	s2, s14
 8001f44:	eef0 1a67 	vmov.f32	s3, s15
 8001f48:	ed9f 0b5f 	vldr	d0, [pc, #380]	; 80020c8 <MPU_SelfTest+0x608>
 8001f4c:	f011 ff64 	bl	8013e18 <pow>
 8001f50:	ec53 2b10 	vmov	r2, r3, d0
 8001f54:	4620      	mov	r0, r4
 8001f56:	4629      	mov	r1, r5
 8001f58:	f7fe fb4e 	bl	80005f8 <__aeabi_dmul>
 8001f5c:	4603      	mov	r3, r0
 8001f5e:	460c      	mov	r4, r1
 8001f60:	4618      	mov	r0, r3
 8001f62:	4621      	mov	r1, r4
 8001f64:	f7fe fe40 	bl	8000be8 <__aeabi_d2f>
 8001f68:	4603      	mov	r3, r0
 8001f6a:	617b      	str	r3, [r7, #20]
	factoryTrim[3] = (float)(2620/1<<FS)*(pow( 1.01 , ((float)selfTest[3] - 1.0) )); // FT[Xg] factory trim calculation
 8001f6c:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 8001f70:	f640 223c 	movw	r2, #2620	; 0xa3c
 8001f74:	fa02 f303 	lsl.w	r3, r2, r3
 8001f78:	ee07 3a90 	vmov	s15, r3
 8001f7c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001f80:	ee17 0a90 	vmov	r0, s15
 8001f84:	f7fe fae0 	bl	8000548 <__aeabi_f2d>
 8001f88:	4604      	mov	r4, r0
 8001f8a:	460d      	mov	r5, r1
 8001f8c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8001f90:	ee07 3a90 	vmov	s15, r3
 8001f94:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001f98:	ee17 0a90 	vmov	r0, s15
 8001f9c:	f7fe fad4 	bl	8000548 <__aeabi_f2d>
 8001fa0:	f04f 0200 	mov.w	r2, #0
 8001fa4:	4b4b      	ldr	r3, [pc, #300]	; (80020d4 <MPU_SelfTest+0x614>)
 8001fa6:	f7fe f96f 	bl	8000288 <__aeabi_dsub>
 8001faa:	4602      	mov	r2, r0
 8001fac:	460b      	mov	r3, r1
 8001fae:	ec43 2b17 	vmov	d7, r2, r3
 8001fb2:	eeb0 1a47 	vmov.f32	s2, s14
 8001fb6:	eef0 1a67 	vmov.f32	s3, s15
 8001fba:	ed9f 0b43 	vldr	d0, [pc, #268]	; 80020c8 <MPU_SelfTest+0x608>
 8001fbe:	f011 ff2b 	bl	8013e18 <pow>
 8001fc2:	ec53 2b10 	vmov	r2, r3, d0
 8001fc6:	4620      	mov	r0, r4
 8001fc8:	4629      	mov	r1, r5
 8001fca:	f7fe fb15 	bl	80005f8 <__aeabi_dmul>
 8001fce:	4603      	mov	r3, r0
 8001fd0:	460c      	mov	r4, r1
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	4621      	mov	r1, r4
 8001fd6:	f7fe fe07 	bl	8000be8 <__aeabi_d2f>
 8001fda:	4603      	mov	r3, r0
 8001fdc:	61bb      	str	r3, [r7, #24]
	factoryTrim[4] = (float)(2620/1<<FS)*(pow( 1.01 , ((float)selfTest[4] - 1.0) )); // FT[Yg] factory trim calculation
 8001fde:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 8001fe2:	f640 223c 	movw	r2, #2620	; 0xa3c
 8001fe6:	fa02 f303 	lsl.w	r3, r2, r3
 8001fea:	ee07 3a90 	vmov	s15, r3
 8001fee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001ff2:	ee17 0a90 	vmov	r0, s15
 8001ff6:	f7fe faa7 	bl	8000548 <__aeabi_f2d>
 8001ffa:	4604      	mov	r4, r0
 8001ffc:	460d      	mov	r5, r1
 8001ffe:	f897 3058 	ldrb.w	r3, [r7, #88]	; 0x58
 8002002:	ee07 3a90 	vmov	s15, r3
 8002006:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800200a:	ee17 0a90 	vmov	r0, s15
 800200e:	f7fe fa9b 	bl	8000548 <__aeabi_f2d>
 8002012:	f04f 0200 	mov.w	r2, #0
 8002016:	4b2f      	ldr	r3, [pc, #188]	; (80020d4 <MPU_SelfTest+0x614>)
 8002018:	f7fe f936 	bl	8000288 <__aeabi_dsub>
 800201c:	4602      	mov	r2, r0
 800201e:	460b      	mov	r3, r1
 8002020:	ec43 2b17 	vmov	d7, r2, r3
 8002024:	eeb0 1a47 	vmov.f32	s2, s14
 8002028:	eef0 1a67 	vmov.f32	s3, s15
 800202c:	ed9f 0b26 	vldr	d0, [pc, #152]	; 80020c8 <MPU_SelfTest+0x608>
 8002030:	f011 fef2 	bl	8013e18 <pow>
 8002034:	ec53 2b10 	vmov	r2, r3, d0
 8002038:	4620      	mov	r0, r4
 800203a:	4629      	mov	r1, r5
 800203c:	f7fe fadc 	bl	80005f8 <__aeabi_dmul>
 8002040:	4603      	mov	r3, r0
 8002042:	460c      	mov	r4, r1
 8002044:	4618      	mov	r0, r3
 8002046:	4621      	mov	r1, r4
 8002048:	f7fe fdce 	bl	8000be8 <__aeabi_d2f>
 800204c:	4603      	mov	r3, r0
 800204e:	61fb      	str	r3, [r7, #28]
	factoryTrim[5] = (float)(2620/1<<FS)*(pow( 1.01 , ((float)selfTest[5] - 1.0) )); // FT[Zg] factory trim calculation
 8002050:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 8002054:	f640 223c 	movw	r2, #2620	; 0xa3c
 8002058:	fa02 f303 	lsl.w	r3, r2, r3
 800205c:	ee07 3a90 	vmov	s15, r3
 8002060:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002064:	ee17 0a90 	vmov	r0, s15
 8002068:	f7fe fa6e 	bl	8000548 <__aeabi_f2d>
 800206c:	4604      	mov	r4, r0
 800206e:	460d      	mov	r5, r1
 8002070:	f897 3059 	ldrb.w	r3, [r7, #89]	; 0x59
 8002074:	ee07 3a90 	vmov	s15, r3
 8002078:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800207c:	ee17 0a90 	vmov	r0, s15
 8002080:	f7fe fa62 	bl	8000548 <__aeabi_f2d>
 8002084:	f04f 0200 	mov.w	r2, #0
 8002088:	4b12      	ldr	r3, [pc, #72]	; (80020d4 <MPU_SelfTest+0x614>)
 800208a:	f7fe f8fd 	bl	8000288 <__aeabi_dsub>
 800208e:	4602      	mov	r2, r0
 8002090:	460b      	mov	r3, r1
 8002092:	ec43 2b17 	vmov	d7, r2, r3
 8002096:	eeb0 1a47 	vmov.f32	s2, s14
 800209a:	eef0 1a67 	vmov.f32	s3, s15
 800209e:	ed9f 0b0a 	vldr	d0, [pc, #40]	; 80020c8 <MPU_SelfTest+0x608>
 80020a2:	f011 feb9 	bl	8013e18 <pow>
 80020a6:	ec53 2b10 	vmov	r2, r3, d0
 80020aa:	4620      	mov	r0, r4
 80020ac:	4629      	mov	r1, r5
 80020ae:	f7fe faa3 	bl	80005f8 <__aeabi_dmul>
 80020b2:	4603      	mov	r3, r0
 80020b4:	460c      	mov	r4, r1
 80020b6:	4618      	mov	r0, r3
 80020b8:	4621      	mov	r1, r4
 80020ba:	f7fe fd95 	bl	8000be8 <__aeabi_d2f>
 80020be:	4603      	mov	r3, r0
 80020c0:	623b      	str	r3, [r7, #32]

	// Report results as a ratio of (STR - FT)/FT; the change from Factory Trim of the Self-Test Response
	// To get percent, must multiply by 100
	for (int i = 0; i < 3; i++)
 80020c2:	2300      	movs	r3, #0
 80020c4:	667b      	str	r3, [r7, #100]	; 0x64
 80020c6:	e096      	b.n	80021f6 <MPU_SelfTest+0x736>
 80020c8:	c28f5c29 	.word	0xc28f5c29
 80020cc:	3ff028f5 	.word	0x3ff028f5
 80020d0:	51eb851f 	.word	0x51eb851f
 80020d4:	3ff00000 	.word	0x3ff00000
	{
		destination[i] = 100.0*((float)(aSTAvg[i] - aAvg[i]))/factoryTrim[i] - 100.; // Report percent differences
 80020d8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80020da:	009b      	lsls	r3, r3, #2
 80020dc:	f107 0278 	add.w	r2, r7, #120	; 0x78
 80020e0:	4413      	add	r3, r2
 80020e2:	f853 2c48 	ldr.w	r2, [r3, #-72]
 80020e6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80020e8:	009b      	lsls	r3, r3, #2
 80020ea:	f107 0178 	add.w	r1, r7, #120	; 0x78
 80020ee:	440b      	add	r3, r1
 80020f0:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 80020f4:	1ad3      	subs	r3, r2, r3
 80020f6:	ee07 3a90 	vmov	s15, r3
 80020fa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80020fe:	ee17 0a90 	vmov	r0, s15
 8002102:	f7fe fa21 	bl	8000548 <__aeabi_f2d>
 8002106:	f04f 0200 	mov.w	r2, #0
 800210a:	4b3f      	ldr	r3, [pc, #252]	; (8002208 <MPU_SelfTest+0x748>)
 800210c:	f7fe fa74 	bl	80005f8 <__aeabi_dmul>
 8002110:	4603      	mov	r3, r0
 8002112:	460c      	mov	r4, r1
 8002114:	4625      	mov	r5, r4
 8002116:	461c      	mov	r4, r3
 8002118:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800211a:	009b      	lsls	r3, r3, #2
 800211c:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8002120:	4413      	add	r3, r2
 8002122:	3b6c      	subs	r3, #108	; 0x6c
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	4618      	mov	r0, r3
 8002128:	f7fe fa0e 	bl	8000548 <__aeabi_f2d>
 800212c:	4602      	mov	r2, r0
 800212e:	460b      	mov	r3, r1
 8002130:	4620      	mov	r0, r4
 8002132:	4629      	mov	r1, r5
 8002134:	f7fe fb8a 	bl	800084c <__aeabi_ddiv>
 8002138:	4603      	mov	r3, r0
 800213a:	460c      	mov	r4, r1
 800213c:	4618      	mov	r0, r3
 800213e:	4621      	mov	r1, r4
 8002140:	f04f 0200 	mov.w	r2, #0
 8002144:	4b30      	ldr	r3, [pc, #192]	; (8002208 <MPU_SelfTest+0x748>)
 8002146:	f7fe f89f 	bl	8000288 <__aeabi_dsub>
 800214a:	4603      	mov	r3, r0
 800214c:	460c      	mov	r4, r1
 800214e:	4618      	mov	r0, r3
 8002150:	4621      	mov	r1, r4
 8002152:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002154:	009b      	lsls	r3, r3, #2
 8002156:	687a      	ldr	r2, [r7, #4]
 8002158:	18d4      	adds	r4, r2, r3
 800215a:	f7fe fd45 	bl	8000be8 <__aeabi_d2f>
 800215e:	4603      	mov	r3, r0
 8002160:	6023      	str	r3, [r4, #0]
		destination[i+3] = 100.0*((float)(gSTAvg[i] - gAvg[i]))/factoryTrim[i+3] - 100.; // Report percent differences
 8002162:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002164:	009b      	lsls	r3, r3, #2
 8002166:	f107 0278 	add.w	r2, r7, #120	; 0x78
 800216a:	4413      	add	r3, r2
 800216c:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8002170:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002172:	009b      	lsls	r3, r3, #2
 8002174:	f107 0178 	add.w	r1, r7, #120	; 0x78
 8002178:	440b      	add	r3, r1
 800217a:	f853 3c30 	ldr.w	r3, [r3, #-48]
 800217e:	1ad3      	subs	r3, r2, r3
 8002180:	ee07 3a90 	vmov	s15, r3
 8002184:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002188:	ee17 0a90 	vmov	r0, s15
 800218c:	f7fe f9dc 	bl	8000548 <__aeabi_f2d>
 8002190:	f04f 0200 	mov.w	r2, #0
 8002194:	4b1c      	ldr	r3, [pc, #112]	; (8002208 <MPU_SelfTest+0x748>)
 8002196:	f7fe fa2f 	bl	80005f8 <__aeabi_dmul>
 800219a:	4603      	mov	r3, r0
 800219c:	460c      	mov	r4, r1
 800219e:	4625      	mov	r5, r4
 80021a0:	461c      	mov	r4, r3
 80021a2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80021a4:	3303      	adds	r3, #3
 80021a6:	009b      	lsls	r3, r3, #2
 80021a8:	f107 0278 	add.w	r2, r7, #120	; 0x78
 80021ac:	4413      	add	r3, r2
 80021ae:	3b6c      	subs	r3, #108	; 0x6c
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	4618      	mov	r0, r3
 80021b4:	f7fe f9c8 	bl	8000548 <__aeabi_f2d>
 80021b8:	4602      	mov	r2, r0
 80021ba:	460b      	mov	r3, r1
 80021bc:	4620      	mov	r0, r4
 80021be:	4629      	mov	r1, r5
 80021c0:	f7fe fb44 	bl	800084c <__aeabi_ddiv>
 80021c4:	4603      	mov	r3, r0
 80021c6:	460c      	mov	r4, r1
 80021c8:	4618      	mov	r0, r3
 80021ca:	4621      	mov	r1, r4
 80021cc:	f04f 0200 	mov.w	r2, #0
 80021d0:	4b0d      	ldr	r3, [pc, #52]	; (8002208 <MPU_SelfTest+0x748>)
 80021d2:	f7fe f859 	bl	8000288 <__aeabi_dsub>
 80021d6:	4603      	mov	r3, r0
 80021d8:	460c      	mov	r4, r1
 80021da:	4618      	mov	r0, r3
 80021dc:	4621      	mov	r1, r4
 80021de:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80021e0:	3303      	adds	r3, #3
 80021e2:	009b      	lsls	r3, r3, #2
 80021e4:	687a      	ldr	r2, [r7, #4]
 80021e6:	18d4      	adds	r4, r2, r3
 80021e8:	f7fe fcfe 	bl	8000be8 <__aeabi_d2f>
 80021ec:	4603      	mov	r3, r0
 80021ee:	6023      	str	r3, [r4, #0]
	for (int i = 0; i < 3; i++)
 80021f0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80021f2:	3301      	adds	r3, #1
 80021f4:	667b      	str	r3, [r7, #100]	; 0x64
 80021f6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80021f8:	2b02      	cmp	r3, #2
 80021fa:	f77f af6d 	ble.w	80020d8 <MPU_SelfTest+0x618>
	}
}
 80021fe:	bf00      	nop
 8002200:	3778      	adds	r7, #120	; 0x78
 8002202:	46bd      	mov	sp, r7
 8002204:	bdb0      	pop	{r4, r5, r7, pc}
 8002206:	bf00      	nop
 8002208:	40590000 	.word	0x40590000

0800220c <MPU_calibrateMag>:
void MPU_calibrateMag(float* dest1)
{
 800220c:	b580      	push	{r7, lr}
 800220e:	b08e      	sub	sp, #56	; 0x38
 8002210:	af00      	add	r7, sp, #0
 8002212:	6078      	str	r0, [r7, #4]
	uint16_t ii = 0, jj=0, sample_count = 0;
 8002214:	2300      	movs	r3, #0
 8002216:	86fb      	strh	r3, [r7, #54]	; 0x36
 8002218:	2300      	movs	r3, #0
 800221a:	86bb      	strh	r3, [r7, #52]	; 0x34
 800221c:	2300      	movs	r3, #0
 800221e:	867b      	strh	r3, [r7, #50]	; 0x32
	int32_t mag_bias[3] = {0, 0, 0};
 8002220:	2300      	movs	r3, #0
 8002222:	627b      	str	r3, [r7, #36]	; 0x24
 8002224:	2300      	movs	r3, #0
 8002226:	62bb      	str	r3, [r7, #40]	; 0x28
 8002228:	2300      	movs	r3, #0
 800222a:	62fb      	str	r3, [r7, #44]	; 0x2c
	int16_t mag_max[3] = {-32767, -32767, -32767}, mag_min[3] = {32767, 32767, 32767}, mag_temp[3] = {0, 0, 0};
 800222c:	4a67      	ldr	r2, [pc, #412]	; (80023cc <MPU_calibrateMag+0x1c0>)
 800222e:	f107 031c 	add.w	r3, r7, #28
 8002232:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002236:	6018      	str	r0, [r3, #0]
 8002238:	3304      	adds	r3, #4
 800223a:	8019      	strh	r1, [r3, #0]
 800223c:	4a64      	ldr	r2, [pc, #400]	; (80023d0 <MPU_calibrateMag+0x1c4>)
 800223e:	f107 0314 	add.w	r3, r7, #20
 8002242:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002246:	6018      	str	r0, [r3, #0]
 8002248:	3304      	adds	r3, #4
 800224a:	8019      	strh	r1, [r3, #0]
 800224c:	2300      	movs	r3, #0
 800224e:	81bb      	strh	r3, [r7, #12]
 8002250:	2300      	movs	r3, #0
 8002252:	81fb      	strh	r3, [r7, #14]
 8002254:	2300      	movs	r3, #0
 8002256:	823b      	strh	r3, [r7, #16]

	HAL_Delay(4000);
 8002258:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 800225c:	f003 f808 	bl	8005270 <HAL_Delay>

	sample_count = 64;
 8002260:	2340      	movs	r3, #64	; 0x40
 8002262:	867b      	strh	r3, [r7, #50]	; 0x32
	for(ii = 0; ii < sample_count; ii++)
 8002264:	2300      	movs	r3, #0
 8002266:	86fb      	strh	r3, [r7, #54]	; 0x36
 8002268:	e051      	b.n	800230e <MPU_calibrateMag+0x102>
	{
		MPU_readMagData(mag_temp);  // Read the mag data
 800226a:	f107 030c 	add.w	r3, r7, #12
 800226e:	4618      	mov	r0, r3
 8002270:	f7fe ffd4 	bl	800121c <MPU_readMagData>
		for (jj = 0; jj < 3; jj++)
 8002274:	2300      	movs	r3, #0
 8002276:	86bb      	strh	r3, [r7, #52]	; 0x34
 8002278:	e040      	b.n	80022fc <MPU_calibrateMag+0xf0>
		{
			if(mag_temp[jj] > mag_max[jj]) mag_max[jj] = mag_temp[jj];
 800227a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800227c:	005b      	lsls	r3, r3, #1
 800227e:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002282:	4413      	add	r3, r2
 8002284:	f933 2c2c 	ldrsh.w	r2, [r3, #-44]
 8002288:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800228a:	005b      	lsls	r3, r3, #1
 800228c:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8002290:	440b      	add	r3, r1
 8002292:	f933 3c1c 	ldrsh.w	r3, [r3, #-28]
 8002296:	429a      	cmp	r2, r3
 8002298:	dd0e      	ble.n	80022b8 <MPU_calibrateMag+0xac>
 800229a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800229c:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800229e:	005b      	lsls	r3, r3, #1
 80022a0:	f107 0138 	add.w	r1, r7, #56	; 0x38
 80022a4:	440b      	add	r3, r1
 80022a6:	f933 1c2c 	ldrsh.w	r1, [r3, #-44]
 80022aa:	0053      	lsls	r3, r2, #1
 80022ac:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80022b0:	4413      	add	r3, r2
 80022b2:	460a      	mov	r2, r1
 80022b4:	f823 2c1c 	strh.w	r2, [r3, #-28]
			if(mag_temp[jj] < mag_min[jj]) mag_min[jj] = mag_temp[jj];
 80022b8:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80022ba:	005b      	lsls	r3, r3, #1
 80022bc:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80022c0:	4413      	add	r3, r2
 80022c2:	f933 2c2c 	ldrsh.w	r2, [r3, #-44]
 80022c6:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80022c8:	005b      	lsls	r3, r3, #1
 80022ca:	f107 0138 	add.w	r1, r7, #56	; 0x38
 80022ce:	440b      	add	r3, r1
 80022d0:	f933 3c24 	ldrsh.w	r3, [r3, #-36]
 80022d4:	429a      	cmp	r2, r3
 80022d6:	da0e      	bge.n	80022f6 <MPU_calibrateMag+0xea>
 80022d8:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80022da:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80022dc:	005b      	lsls	r3, r3, #1
 80022de:	f107 0138 	add.w	r1, r7, #56	; 0x38
 80022e2:	440b      	add	r3, r1
 80022e4:	f933 1c2c 	ldrsh.w	r1, [r3, #-44]
 80022e8:	0053      	lsls	r3, r2, #1
 80022ea:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80022ee:	4413      	add	r3, r2
 80022f0:	460a      	mov	r2, r1
 80022f2:	f823 2c24 	strh.w	r2, [r3, #-36]
		for (jj = 0; jj < 3; jj++)
 80022f6:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80022f8:	3301      	adds	r3, #1
 80022fa:	86bb      	strh	r3, [r7, #52]	; 0x34
 80022fc:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80022fe:	2b02      	cmp	r3, #2
 8002300:	d9bb      	bls.n	800227a <MPU_calibrateMag+0x6e>
		}
		HAL_Delay(135);  // at 8 Hz ODR, new mag data is available every 125 ms
 8002302:	2087      	movs	r0, #135	; 0x87
 8002304:	f002 ffb4 	bl	8005270 <HAL_Delay>
	for(ii = 0; ii < sample_count; ii++)
 8002308:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800230a:	3301      	adds	r3, #1
 800230c:	86fb      	strh	r3, [r7, #54]	; 0x36
 800230e:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8002310:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8002312:	429a      	cmp	r2, r3
 8002314:	d3a9      	bcc.n	800226a <MPU_calibrateMag+0x5e>
	}

	mag_bias[0]  = (mag_max[0] + mag_min[0])/2;  // get average x mag bias in counts
 8002316:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800231a:	461a      	mov	r2, r3
 800231c:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8002320:	4413      	add	r3, r2
 8002322:	0fda      	lsrs	r2, r3, #31
 8002324:	4413      	add	r3, r2
 8002326:	105b      	asrs	r3, r3, #1
 8002328:	627b      	str	r3, [r7, #36]	; 0x24
	mag_bias[1]  = (mag_max[1] + mag_min[1])/2;  // get average y mag bias in counts
 800232a:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800232e:	461a      	mov	r2, r3
 8002330:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8002334:	4413      	add	r3, r2
 8002336:	0fda      	lsrs	r2, r3, #31
 8002338:	4413      	add	r3, r2
 800233a:	105b      	asrs	r3, r3, #1
 800233c:	62bb      	str	r3, [r7, #40]	; 0x28
	mag_bias[2]  = (mag_max[2] + mag_min[2])/2;  // get average z mag bias in counts
 800233e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8002342:	461a      	mov	r2, r3
 8002344:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8002348:	4413      	add	r3, r2
 800234a:	0fda      	lsrs	r2, r3, #31
 800234c:	4413      	add	r3, r2
 800234e:	105b      	asrs	r3, r3, #1
 8002350:	62fb      	str	r3, [r7, #44]	; 0x2c

	dest1[0] = (float) mag_bias[0]*mRes*magCalibration[0];  // save mag biases in G for main program
 8002352:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002354:	ee07 3a90 	vmov	s15, r3
 8002358:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800235c:	4b1d      	ldr	r3, [pc, #116]	; (80023d4 <MPU_calibrateMag+0x1c8>)
 800235e:	edd3 7a00 	vldr	s15, [r3]
 8002362:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002366:	4b1c      	ldr	r3, [pc, #112]	; (80023d8 <MPU_calibrateMag+0x1cc>)
 8002368:	edd3 7a00 	vldr	s15, [r3]
 800236c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	edc3 7a00 	vstr	s15, [r3]
	dest1[1] = (float) mag_bias[1]*mRes*magCalibration[1];
 8002376:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002378:	ee07 3a90 	vmov	s15, r3
 800237c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002380:	4b14      	ldr	r3, [pc, #80]	; (80023d4 <MPU_calibrateMag+0x1c8>)
 8002382:	edd3 7a00 	vldr	s15, [r3]
 8002386:	ee27 7a27 	vmul.f32	s14, s14, s15
 800238a:	4b13      	ldr	r3, [pc, #76]	; (80023d8 <MPU_calibrateMag+0x1cc>)
 800238c:	edd3 7a01 	vldr	s15, [r3, #4]
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	3304      	adds	r3, #4
 8002394:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002398:	edc3 7a00 	vstr	s15, [r3]
	dest1[2] = (float) mag_bias[2]*mRes*magCalibration[2];
 800239c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800239e:	ee07 3a90 	vmov	s15, r3
 80023a2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80023a6:	4b0b      	ldr	r3, [pc, #44]	; (80023d4 <MPU_calibrateMag+0x1c8>)
 80023a8:	edd3 7a00 	vldr	s15, [r3]
 80023ac:	ee27 7a27 	vmul.f32	s14, s14, s15
 80023b0:	4b09      	ldr	r3, [pc, #36]	; (80023d8 <MPU_calibrateMag+0x1cc>)
 80023b2:	edd3 7a02 	vldr	s15, [r3, #8]
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	3308      	adds	r3, #8
 80023ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80023be:	edc3 7a00 	vstr	s15, [r3]
}
 80023c2:	bf00      	nop
 80023c4:	3738      	adds	r7, #56	; 0x38
 80023c6:	46bd      	mov	sp, r7
 80023c8:	bd80      	pop	{r7, pc}
 80023ca:	bf00      	nop
 80023cc:	080158d0 	.word	0x080158d0
 80023d0:	080158d8 	.word	0x080158d8
 80023d4:	20000894 	.word	0x20000894
 80023d8:	200008bc 	.word	0x200008bc

080023dc <MadgwickQuaternionUpdate>:

void MadgwickQuaternionUpdate(float ax, float ay, float az, float gx, float gy, float gz, float mx, float my, float mz)
{
 80023dc:	b580      	push	{r7, lr}
 80023de:	b0b2      	sub	sp, #200	; 0xc8
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24
 80023e6:	edc7 0a08 	vstr	s1, [r7, #32]
 80023ea:	ed87 1a07 	vstr	s2, [r7, #28]
 80023ee:	edc7 1a06 	vstr	s3, [r7, #24]
 80023f2:	ed87 2a05 	vstr	s4, [r7, #20]
 80023f6:	edc7 2a04 	vstr	s5, [r7, #16]
 80023fa:	ed87 3a03 	vstr	s6, [r7, #12]
 80023fe:	edc7 3a02 	vstr	s7, [r7, #8]
 8002402:	ed87 4a01 	vstr	s8, [r7, #4]
	float q1 = q[0], q2 = q[1], q3 = q[2], q4 = q[3];   // short name local variable for readability
 8002406:	4b7a      	ldr	r3, [pc, #488]	; (80025f0 <MadgwickQuaternionUpdate+0x214>)
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800240e:	4b78      	ldr	r3, [pc, #480]	; (80025f0 <MadgwickQuaternionUpdate+0x214>)
 8002410:	685b      	ldr	r3, [r3, #4]
 8002412:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002416:	4b76      	ldr	r3, [pc, #472]	; (80025f0 <MadgwickQuaternionUpdate+0x214>)
 8002418:	689b      	ldr	r3, [r3, #8]
 800241a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800241e:	4b74      	ldr	r3, [pc, #464]	; (80025f0 <MadgwickQuaternionUpdate+0x214>)
 8002420:	68db      	ldr	r3, [r3, #12]
 8002422:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
	float _2q1my;
	float _2q1mz;
	float _2q2mx;
	float _4bx;
	float _4bz;
	float _2q1 = 2.0f * q1;
 8002426:	edd7 7a31 	vldr	s15, [r7, #196]	; 0xc4
 800242a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800242e:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
	float _2q2 = 2.0f * q2;
 8002432:	edd7 7a30 	vldr	s15, [r7, #192]	; 0xc0
 8002436:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800243a:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
	float _2q3 = 2.0f * q3;
 800243e:	edd7 7a2f 	vldr	s15, [r7, #188]	; 0xbc
 8002442:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002446:	edc7 7a2b 	vstr	s15, [r7, #172]	; 0xac
	float _2q4 = 2.0f * q4;
 800244a:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 800244e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002452:	edc7 7a2a 	vstr	s15, [r7, #168]	; 0xa8
	float _2q1q3 = 2.0f * q1 * q3;
 8002456:	edd7 7a31 	vldr	s15, [r7, #196]	; 0xc4
 800245a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800245e:	ed97 7a2f 	vldr	s14, [r7, #188]	; 0xbc
 8002462:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002466:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
	float _2q3q4 = 2.0f * q3 * q4;
 800246a:	edd7 7a2f 	vldr	s15, [r7, #188]	; 0xbc
 800246e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002472:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 8002476:	ee67 7a27 	vmul.f32	s15, s14, s15
 800247a:	edc7 7a28 	vstr	s15, [r7, #160]	; 0xa0
	float q1q1 = q1 * q1;
 800247e:	ed97 7a31 	vldr	s14, [r7, #196]	; 0xc4
 8002482:	edd7 7a31 	vldr	s15, [r7, #196]	; 0xc4
 8002486:	ee67 7a27 	vmul.f32	s15, s14, s15
 800248a:	edc7 7a27 	vstr	s15, [r7, #156]	; 0x9c
	float q1q2 = q1 * q2;
 800248e:	ed97 7a31 	vldr	s14, [r7, #196]	; 0xc4
 8002492:	edd7 7a30 	vldr	s15, [r7, #192]	; 0xc0
 8002496:	ee67 7a27 	vmul.f32	s15, s14, s15
 800249a:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
	float q1q3 = q1 * q3;
 800249e:	ed97 7a31 	vldr	s14, [r7, #196]	; 0xc4
 80024a2:	edd7 7a2f 	vldr	s15, [r7, #188]	; 0xbc
 80024a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80024aa:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
	float q1q4 = q1 * q4;
 80024ae:	ed97 7a31 	vldr	s14, [r7, #196]	; 0xc4
 80024b2:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 80024b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80024ba:	edc7 7a24 	vstr	s15, [r7, #144]	; 0x90
	float q2q2 = q2 * q2;
 80024be:	ed97 7a30 	vldr	s14, [r7, #192]	; 0xc0
 80024c2:	edd7 7a30 	vldr	s15, [r7, #192]	; 0xc0
 80024c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80024ca:	edc7 7a23 	vstr	s15, [r7, #140]	; 0x8c
	float q2q3 = q2 * q3;
 80024ce:	ed97 7a30 	vldr	s14, [r7, #192]	; 0xc0
 80024d2:	edd7 7a2f 	vldr	s15, [r7, #188]	; 0xbc
 80024d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80024da:	edc7 7a22 	vstr	s15, [r7, #136]	; 0x88
	float q2q4 = q2 * q4;
 80024de:	ed97 7a30 	vldr	s14, [r7, #192]	; 0xc0
 80024e2:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 80024e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80024ea:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
	float q3q3 = q3 * q3;
 80024ee:	ed97 7a2f 	vldr	s14, [r7, #188]	; 0xbc
 80024f2:	edd7 7a2f 	vldr	s15, [r7, #188]	; 0xbc
 80024f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80024fa:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
	float q3q4 = q3 * q4;
 80024fe:	ed97 7a2f 	vldr	s14, [r7, #188]	; 0xbc
 8002502:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8002506:	ee67 7a27 	vmul.f32	s15, s14, s15
 800250a:	edc7 7a1f 	vstr	s15, [r7, #124]	; 0x7c
	float q4q4 = q4 * q4;
 800250e:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 8002512:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8002516:	ee67 7a27 	vmul.f32	s15, s14, s15
 800251a:	edc7 7a1e 	vstr	s15, [r7, #120]	; 0x78

	// Normalise accelerometer measurement
	norm = sqrtf(ax * ax + ay * ay + az * az);
 800251e:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8002522:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002526:	ee27 7a27 	vmul.f32	s14, s14, s15
 800252a:	edd7 6a08 	vldr	s13, [r7, #32]
 800252e:	edd7 7a08 	vldr	s15, [r7, #32]
 8002532:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002536:	ee37 7a27 	vadd.f32	s14, s14, s15
 800253a:	edd7 6a07 	vldr	s13, [r7, #28]
 800253e:	edd7 7a07 	vldr	s15, [r7, #28]
 8002542:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002546:	ee77 7a27 	vadd.f32	s15, s14, s15
 800254a:	eeb0 0a67 	vmov.f32	s0, s15
 800254e:	f011 fdd3 	bl	80140f8 <sqrtf>
 8002552:	ed87 0a1d 	vstr	s0, [r7, #116]	; 0x74
	if (norm == 0.0f) return; // handle NaN
 8002556:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 800255a:	eef5 7a40 	vcmp.f32	s15, #0.0
 800255e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002562:	f000 85cc 	beq.w	80030fe <MadgwickQuaternionUpdate+0xd22>
	norm = 1.0f/norm;
 8002566:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800256a:	ed97 7a1d 	vldr	s14, [r7, #116]	; 0x74
 800256e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002572:	edc7 7a1d 	vstr	s15, [r7, #116]	; 0x74
	ax *= norm;
 8002576:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800257a:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 800257e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002582:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
	ay *= norm;
 8002586:	ed97 7a08 	vldr	s14, [r7, #32]
 800258a:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 800258e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002592:	edc7 7a08 	vstr	s15, [r7, #32]
	az *= norm;
 8002596:	ed97 7a07 	vldr	s14, [r7, #28]
 800259a:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 800259e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80025a2:	edc7 7a07 	vstr	s15, [r7, #28]

	// Normalise magnetometer measurement
	norm = sqrtf(mx * mx + my * my + mz * mz);
 80025a6:	ed97 7a03 	vldr	s14, [r7, #12]
 80025aa:	edd7 7a03 	vldr	s15, [r7, #12]
 80025ae:	ee27 7a27 	vmul.f32	s14, s14, s15
 80025b2:	edd7 6a02 	vldr	s13, [r7, #8]
 80025b6:	edd7 7a02 	vldr	s15, [r7, #8]
 80025ba:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80025be:	ee37 7a27 	vadd.f32	s14, s14, s15
 80025c2:	edd7 6a01 	vldr	s13, [r7, #4]
 80025c6:	edd7 7a01 	vldr	s15, [r7, #4]
 80025ca:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80025ce:	ee77 7a27 	vadd.f32	s15, s14, s15
 80025d2:	eeb0 0a67 	vmov.f32	s0, s15
 80025d6:	f011 fd8f 	bl	80140f8 <sqrtf>
 80025da:	ed87 0a1d 	vstr	s0, [r7, #116]	; 0x74
	if (norm == 0.0f) return; // handle NaN
 80025de:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 80025e2:	eef5 7a40 	vcmp.f32	s15, #0.0
 80025e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80025ea:	f000 858a 	beq.w	8003102 <MadgwickQuaternionUpdate+0xd26>
 80025ee:	e001      	b.n	80025f4 <MadgwickQuaternionUpdate+0x218>
 80025f0:	200008a8 	.word	0x200008a8
	norm = 1.0f/norm;
 80025f4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80025f8:	ed97 7a1d 	vldr	s14, [r7, #116]	; 0x74
 80025fc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002600:	edc7 7a1d 	vstr	s15, [r7, #116]	; 0x74
	mx *= norm;
 8002604:	ed97 7a03 	vldr	s14, [r7, #12]
 8002608:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 800260c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002610:	edc7 7a03 	vstr	s15, [r7, #12]
	my *= norm;
 8002614:	ed97 7a02 	vldr	s14, [r7, #8]
 8002618:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 800261c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002620:	edc7 7a02 	vstr	s15, [r7, #8]
	mz *= norm;
 8002624:	ed97 7a01 	vldr	s14, [r7, #4]
 8002628:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 800262c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002630:	edc7 7a01 	vstr	s15, [r7, #4]

	// Reference direction of Earth's magnetic field
	_2q1mx = 2.0f * q1 * mx;
 8002634:	edd7 7a31 	vldr	s15, [r7, #196]	; 0xc4
 8002638:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800263c:	ed97 7a03 	vldr	s14, [r7, #12]
 8002640:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002644:	edc7 7a1c 	vstr	s15, [r7, #112]	; 0x70
	_2q1my = 2.0f * q1 * my;
 8002648:	edd7 7a31 	vldr	s15, [r7, #196]	; 0xc4
 800264c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002650:	ed97 7a02 	vldr	s14, [r7, #8]
 8002654:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002658:	edc7 7a1b 	vstr	s15, [r7, #108]	; 0x6c
	_2q1mz = 2.0f * q1 * mz;
 800265c:	edd7 7a31 	vldr	s15, [r7, #196]	; 0xc4
 8002660:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002664:	ed97 7a01 	vldr	s14, [r7, #4]
 8002668:	ee67 7a27 	vmul.f32	s15, s14, s15
 800266c:	edc7 7a1a 	vstr	s15, [r7, #104]	; 0x68
	_2q2mx = 2.0f * q2 * mx;
 8002670:	edd7 7a30 	vldr	s15, [r7, #192]	; 0xc0
 8002674:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002678:	ed97 7a03 	vldr	s14, [r7, #12]
 800267c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002680:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64
	hx = mx * q1q1 - _2q1my * q4 + _2q1mz * q3 + mx * q2q2 + _2q2 * my * q3 + _2q2 * mz * q4 - mx * q3q3 - mx * q4q4;
 8002684:	ed97 7a03 	vldr	s14, [r7, #12]
 8002688:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 800268c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002690:	edd7 6a1b 	vldr	s13, [r7, #108]	; 0x6c
 8002694:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8002698:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800269c:	ee37 7a67 	vsub.f32	s14, s14, s15
 80026a0:	edd7 6a1a 	vldr	s13, [r7, #104]	; 0x68
 80026a4:	edd7 7a2f 	vldr	s15, [r7, #188]	; 0xbc
 80026a8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80026ac:	ee37 7a27 	vadd.f32	s14, s14, s15
 80026b0:	edd7 6a03 	vldr	s13, [r7, #12]
 80026b4:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 80026b8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80026bc:	ee37 7a27 	vadd.f32	s14, s14, s15
 80026c0:	edd7 6a2c 	vldr	s13, [r7, #176]	; 0xb0
 80026c4:	edd7 7a02 	vldr	s15, [r7, #8]
 80026c8:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80026cc:	edd7 7a2f 	vldr	s15, [r7, #188]	; 0xbc
 80026d0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80026d4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80026d8:	edd7 6a2c 	vldr	s13, [r7, #176]	; 0xb0
 80026dc:	edd7 7a01 	vldr	s15, [r7, #4]
 80026e0:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80026e4:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 80026e8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80026ec:	ee37 7a27 	vadd.f32	s14, s14, s15
 80026f0:	edd7 6a03 	vldr	s13, [r7, #12]
 80026f4:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 80026f8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80026fc:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002700:	edd7 6a03 	vldr	s13, [r7, #12]
 8002704:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 8002708:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800270c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002710:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
	hy = _2q1mx * q4 + my * q1q1 - _2q1mz * q2 + _2q2mx * q3 - my * q2q2 + my * q3q3 + _2q3 * mz * q4 - my * q4q4;
 8002714:	ed97 7a1c 	vldr	s14, [r7, #112]	; 0x70
 8002718:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 800271c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002720:	edd7 6a02 	vldr	s13, [r7, #8]
 8002724:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8002728:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800272c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002730:	edd7 6a1a 	vldr	s13, [r7, #104]	; 0x68
 8002734:	edd7 7a30 	vldr	s15, [r7, #192]	; 0xc0
 8002738:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800273c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002740:	edd7 6a19 	vldr	s13, [r7, #100]	; 0x64
 8002744:	edd7 7a2f 	vldr	s15, [r7, #188]	; 0xbc
 8002748:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800274c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002750:	edd7 6a02 	vldr	s13, [r7, #8]
 8002754:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8002758:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800275c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002760:	edd7 6a02 	vldr	s13, [r7, #8]
 8002764:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8002768:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800276c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002770:	edd7 6a2b 	vldr	s13, [r7, #172]	; 0xac
 8002774:	edd7 7a01 	vldr	s15, [r7, #4]
 8002778:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800277c:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8002780:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002784:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002788:	edd7 6a02 	vldr	s13, [r7, #8]
 800278c:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 8002790:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002794:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002798:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
	_2bx = sqrtf(hx * hx + hy * hy);
 800279c:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 80027a0:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 80027a4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80027a8:	edd7 6a17 	vldr	s13, [r7, #92]	; 0x5c
 80027ac:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 80027b0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80027b4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80027b8:	eeb0 0a67 	vmov.f32	s0, s15
 80027bc:	f011 fc9c 	bl	80140f8 <sqrtf>
 80027c0:	ed87 0a16 	vstr	s0, [r7, #88]	; 0x58
	_2bz = -_2q1mx * q3 + _2q1my * q2 + mz * q1q1 + _2q2mx * q4 - mz * q2q2 + _2q3 * my * q4 - mz * q3q3 + mz * q4q4;
 80027c4:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 80027c8:	eeb1 7a67 	vneg.f32	s14, s15
 80027cc:	edd7 7a2f 	vldr	s15, [r7, #188]	; 0xbc
 80027d0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80027d4:	edd7 6a1b 	vldr	s13, [r7, #108]	; 0x6c
 80027d8:	edd7 7a30 	vldr	s15, [r7, #192]	; 0xc0
 80027dc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80027e0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80027e4:	edd7 6a01 	vldr	s13, [r7, #4]
 80027e8:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 80027ec:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80027f0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80027f4:	edd7 6a19 	vldr	s13, [r7, #100]	; 0x64
 80027f8:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 80027fc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002800:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002804:	edd7 6a01 	vldr	s13, [r7, #4]
 8002808:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 800280c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002810:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002814:	edd7 6a2b 	vldr	s13, [r7, #172]	; 0xac
 8002818:	edd7 7a02 	vldr	s15, [r7, #8]
 800281c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002820:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8002824:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002828:	ee37 7a27 	vadd.f32	s14, s14, s15
 800282c:	edd7 6a01 	vldr	s13, [r7, #4]
 8002830:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8002834:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002838:	ee37 7a67 	vsub.f32	s14, s14, s15
 800283c:	edd7 6a01 	vldr	s13, [r7, #4]
 8002840:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 8002844:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002848:	ee77 7a27 	vadd.f32	s15, s14, s15
 800284c:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
	_4bx = 2.0f * _2bx;
 8002850:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8002854:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002858:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
	_4bz = 2.0f * _2bz;
 800285c:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8002860:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002864:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c

	// Gradient decent algorithm corrective step
	s1 = -_2q3 * (2.0f * q2q4 - _2q1q3 - ax) + _2q2 * (2.0f * q1q2 + _2q3q4 - ay) - _2bz * q3 * (_2bx * (0.5f - q3q3 - q4q4) + _2bz * (q2q4 - q1q3) - mx) + (-_2bx * q4 + _2bz * q2) * (_2bx * (q2q3 - q1q4) + _2bz * (q1q2 + q3q4) - my) + _2bx * q3 * (_2bx * (q1q3 + q2q4) + _2bz * (0.5f - q2q2 - q3q3) - mz);
 8002868:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 800286c:	eeb1 7a67 	vneg.f32	s14, s15
 8002870:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8002874:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8002878:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 800287c:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8002880:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002884:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8002888:	ee27 7a27 	vmul.f32	s14, s14, s15
 800288c:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 8002890:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8002894:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 8002898:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800289c:	edd7 7a08 	vldr	s15, [r7, #32]
 80028a0:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80028a4:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 80028a8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80028ac:	ee37 7a27 	vadd.f32	s14, s14, s15
 80028b0:	edd7 6a15 	vldr	s13, [r7, #84]	; 0x54
 80028b4:	edd7 7a2f 	vldr	s15, [r7, #188]	; 0xbc
 80028b8:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80028bc:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 80028c0:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 80028c4:	ee36 6a67 	vsub.f32	s12, s12, s15
 80028c8:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 80028cc:	ee36 6a67 	vsub.f32	s12, s12, s15
 80028d0:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 80028d4:	ee26 6a27 	vmul.f32	s12, s12, s15
 80028d8:	edd7 5a21 	vldr	s11, [r7, #132]	; 0x84
 80028dc:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 80028e0:	ee75 5ae7 	vsub.f32	s11, s11, s15
 80028e4:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 80028e8:	ee65 7aa7 	vmul.f32	s15, s11, s15
 80028ec:	ee36 6a27 	vadd.f32	s12, s12, s15
 80028f0:	edd7 7a03 	vldr	s15, [r7, #12]
 80028f4:	ee76 7a67 	vsub.f32	s15, s12, s15
 80028f8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80028fc:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002900:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8002904:	eef1 6a67 	vneg.f32	s13, s15
 8002908:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 800290c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002910:	ed97 6a15 	vldr	s12, [r7, #84]	; 0x54
 8002914:	edd7 7a30 	vldr	s15, [r7, #192]	; 0xc0
 8002918:	ee66 7a27 	vmul.f32	s15, s12, s15
 800291c:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8002920:	ed97 6a22 	vldr	s12, [r7, #136]	; 0x88
 8002924:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 8002928:	ee36 6a67 	vsub.f32	s12, s12, s15
 800292c:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8002930:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002934:	edd7 5a26 	vldr	s11, [r7, #152]	; 0x98
 8002938:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 800293c:	ee75 5aa7 	vadd.f32	s11, s11, s15
 8002940:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8002944:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8002948:	ee36 6a27 	vadd.f32	s12, s12, s15
 800294c:	edd7 7a02 	vldr	s15, [r7, #8]
 8002950:	ee76 7a67 	vsub.f32	s15, s12, s15
 8002954:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002958:	ee37 7a27 	vadd.f32	s14, s14, s15
 800295c:	edd7 6a16 	vldr	s13, [r7, #88]	; 0x58
 8002960:	edd7 7a2f 	vldr	s15, [r7, #188]	; 0xbc
 8002964:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002968:	ed97 6a25 	vldr	s12, [r7, #148]	; 0x94
 800296c:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8002970:	ee36 6a27 	vadd.f32	s12, s12, s15
 8002974:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8002978:	ee26 6a27 	vmul.f32	s12, s12, s15
 800297c:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 8002980:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8002984:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8002988:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 800298c:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8002990:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8002994:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8002998:	ee36 6a27 	vadd.f32	s12, s12, s15
 800299c:	edd7 7a01 	vldr	s15, [r7, #4]
 80029a0:	ee76 7a67 	vsub.f32	s15, s12, s15
 80029a4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80029a8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80029ac:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
	s2 = _2q4 * (2.0f * q2q4 - _2q1q3 - ax) + _2q1 * (2.0f * q1q2 + _2q3q4 - ay) - 4.0f * q2 * (1.0f - 2.0f * q2q2 - 2.0f * q3q3 - az) + _2bz * q4 * (_2bx * (0.5f - q3q3 - q4q4) + _2bz * (q2q4 - q1q3) - mx) + (_2bx * q3 + _2bz * q1) * (_2bx * (q2q3 - q1q4) + _2bz * (q1q2 + q3q4) - my) + (_2bx * q4 - _4bz * q2) * (_2bx * (q1q3 + q2q4) + _2bz * (0.5f - q2q2 - q3q3) - mz);
 80029b0:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 80029b4:	ee37 7aa7 	vadd.f32	s14, s15, s15
 80029b8:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 80029bc:	ee37 7a67 	vsub.f32	s14, s14, s15
 80029c0:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80029c4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80029c8:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 80029cc:	ee27 7a27 	vmul.f32	s14, s14, s15
 80029d0:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 80029d4:	ee77 6aa7 	vadd.f32	s13, s15, s15
 80029d8:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 80029dc:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80029e0:	edd7 7a08 	vldr	s15, [r7, #32]
 80029e4:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80029e8:	edd7 7a2d 	vldr	s15, [r7, #180]	; 0xb4
 80029ec:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80029f0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80029f4:	edd7 7a30 	vldr	s15, [r7, #192]	; 0xc0
 80029f8:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 80029fc:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8002a00:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8002a04:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002a08:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8002a0c:	ee36 6a67 	vsub.f32	s12, s12, s15
 8002a10:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8002a14:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002a18:	ee36 6a67 	vsub.f32	s12, s12, s15
 8002a1c:	edd7 7a07 	vldr	s15, [r7, #28]
 8002a20:	ee76 7a67 	vsub.f32	s15, s12, s15
 8002a24:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002a28:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002a2c:	edd7 6a15 	vldr	s13, [r7, #84]	; 0x54
 8002a30:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8002a34:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002a38:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8002a3c:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8002a40:	ee36 6a67 	vsub.f32	s12, s12, s15
 8002a44:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 8002a48:	ee36 6a67 	vsub.f32	s12, s12, s15
 8002a4c:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8002a50:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002a54:	edd7 5a21 	vldr	s11, [r7, #132]	; 0x84
 8002a58:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 8002a5c:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8002a60:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8002a64:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8002a68:	ee36 6a27 	vadd.f32	s12, s12, s15
 8002a6c:	edd7 7a03 	vldr	s15, [r7, #12]
 8002a70:	ee76 7a67 	vsub.f32	s15, s12, s15
 8002a74:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002a78:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002a7c:	edd7 6a16 	vldr	s13, [r7, #88]	; 0x58
 8002a80:	edd7 7a2f 	vldr	s15, [r7, #188]	; 0xbc
 8002a84:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002a88:	ed97 6a15 	vldr	s12, [r7, #84]	; 0x54
 8002a8c:	edd7 7a31 	vldr	s15, [r7, #196]	; 0xc4
 8002a90:	ee66 7a27 	vmul.f32	s15, s12, s15
 8002a94:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8002a98:	ed97 6a22 	vldr	s12, [r7, #136]	; 0x88
 8002a9c:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 8002aa0:	ee36 6a67 	vsub.f32	s12, s12, s15
 8002aa4:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8002aa8:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002aac:	edd7 5a26 	vldr	s11, [r7, #152]	; 0x98
 8002ab0:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 8002ab4:	ee75 5aa7 	vadd.f32	s11, s11, s15
 8002ab8:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8002abc:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8002ac0:	ee36 6a27 	vadd.f32	s12, s12, s15
 8002ac4:	edd7 7a02 	vldr	s15, [r7, #8]
 8002ac8:	ee76 7a67 	vsub.f32	s15, s12, s15
 8002acc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002ad0:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002ad4:	edd7 6a16 	vldr	s13, [r7, #88]	; 0x58
 8002ad8:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8002adc:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002ae0:	ed97 6a13 	vldr	s12, [r7, #76]	; 0x4c
 8002ae4:	edd7 7a30 	vldr	s15, [r7, #192]	; 0xc0
 8002ae8:	ee66 7a27 	vmul.f32	s15, s12, s15
 8002aec:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8002af0:	ed97 6a25 	vldr	s12, [r7, #148]	; 0x94
 8002af4:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8002af8:	ee36 6a27 	vadd.f32	s12, s12, s15
 8002afc:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8002b00:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002b04:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 8002b08:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8002b0c:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8002b10:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8002b14:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8002b18:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8002b1c:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8002b20:	ee36 6a27 	vadd.f32	s12, s12, s15
 8002b24:	edd7 7a01 	vldr	s15, [r7, #4]
 8002b28:	ee76 7a67 	vsub.f32	s15, s12, s15
 8002b2c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002b30:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002b34:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
	s3 = -_2q1 * (2.0f * q2q4 - _2q1q3 - ax) + _2q4 * (2.0f * q1q2 + _2q3q4 - ay) - 4.0f * q3 * (1.0f - 2.0f * q2q2 - 2.0f * q3q3 - az) + (-_4bx * q3 - _2bz * q1) * (_2bx * (0.5f - q3q3 - q4q4) + _2bz * (q2q4 - q1q3) - mx) + (_2bx * q2 + _2bz * q4) * (_2bx * (q2q3 - q1q4) + _2bz * (q1q2 + q3q4) - my) + (_2bx * q1 - _4bz * q3) * (_2bx * (q1q3 + q2q4) + _2bz * (0.5f - q2q2 - q3q3) - mz);
 8002b38:	edd7 7a2d 	vldr	s15, [r7, #180]	; 0xb4
 8002b3c:	eeb1 7a67 	vneg.f32	s14, s15
 8002b40:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8002b44:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8002b48:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8002b4c:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8002b50:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002b54:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8002b58:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002b5c:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 8002b60:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8002b64:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 8002b68:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8002b6c:	edd7 7a08 	vldr	s15, [r7, #32]
 8002b70:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8002b74:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 8002b78:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002b7c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002b80:	edd7 7a2f 	vldr	s15, [r7, #188]	; 0xbc
 8002b84:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 8002b88:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8002b8c:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8002b90:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002b94:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8002b98:	ee36 6a67 	vsub.f32	s12, s12, s15
 8002b9c:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8002ba0:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002ba4:	ee36 6a67 	vsub.f32	s12, s12, s15
 8002ba8:	edd7 7a07 	vldr	s15, [r7, #28]
 8002bac:	ee76 7a67 	vsub.f32	s15, s12, s15
 8002bb0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002bb4:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002bb8:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8002bbc:	eef1 6a67 	vneg.f32	s13, s15
 8002bc0:	edd7 7a2f 	vldr	s15, [r7, #188]	; 0xbc
 8002bc4:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002bc8:	ed97 6a15 	vldr	s12, [r7, #84]	; 0x54
 8002bcc:	edd7 7a31 	vldr	s15, [r7, #196]	; 0xc4
 8002bd0:	ee66 7a27 	vmul.f32	s15, s12, s15
 8002bd4:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8002bd8:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8002bdc:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8002be0:	ee36 6a67 	vsub.f32	s12, s12, s15
 8002be4:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 8002be8:	ee36 6a67 	vsub.f32	s12, s12, s15
 8002bec:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8002bf0:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002bf4:	edd7 5a21 	vldr	s11, [r7, #132]	; 0x84
 8002bf8:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 8002bfc:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8002c00:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8002c04:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8002c08:	ee36 6a27 	vadd.f32	s12, s12, s15
 8002c0c:	edd7 7a03 	vldr	s15, [r7, #12]
 8002c10:	ee76 7a67 	vsub.f32	s15, s12, s15
 8002c14:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002c18:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002c1c:	edd7 6a16 	vldr	s13, [r7, #88]	; 0x58
 8002c20:	edd7 7a30 	vldr	s15, [r7, #192]	; 0xc0
 8002c24:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002c28:	ed97 6a15 	vldr	s12, [r7, #84]	; 0x54
 8002c2c:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8002c30:	ee66 7a27 	vmul.f32	s15, s12, s15
 8002c34:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8002c38:	ed97 6a22 	vldr	s12, [r7, #136]	; 0x88
 8002c3c:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 8002c40:	ee36 6a67 	vsub.f32	s12, s12, s15
 8002c44:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8002c48:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002c4c:	edd7 5a26 	vldr	s11, [r7, #152]	; 0x98
 8002c50:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 8002c54:	ee75 5aa7 	vadd.f32	s11, s11, s15
 8002c58:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8002c5c:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8002c60:	ee36 6a27 	vadd.f32	s12, s12, s15
 8002c64:	edd7 7a02 	vldr	s15, [r7, #8]
 8002c68:	ee76 7a67 	vsub.f32	s15, s12, s15
 8002c6c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002c70:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002c74:	edd7 6a16 	vldr	s13, [r7, #88]	; 0x58
 8002c78:	edd7 7a31 	vldr	s15, [r7, #196]	; 0xc4
 8002c7c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002c80:	ed97 6a13 	vldr	s12, [r7, #76]	; 0x4c
 8002c84:	edd7 7a2f 	vldr	s15, [r7, #188]	; 0xbc
 8002c88:	ee66 7a27 	vmul.f32	s15, s12, s15
 8002c8c:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8002c90:	ed97 6a25 	vldr	s12, [r7, #148]	; 0x94
 8002c94:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8002c98:	ee36 6a27 	vadd.f32	s12, s12, s15
 8002c9c:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8002ca0:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002ca4:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 8002ca8:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8002cac:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8002cb0:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8002cb4:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8002cb8:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8002cbc:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8002cc0:	ee36 6a27 	vadd.f32	s12, s12, s15
 8002cc4:	edd7 7a01 	vldr	s15, [r7, #4]
 8002cc8:	ee76 7a67 	vsub.f32	s15, s12, s15
 8002ccc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002cd0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002cd4:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
	s4 = _2q2 * (2.0f * q2q4 - _2q1q3 - ax) + _2q3 * (2.0f * q1q2 + _2q3q4 - ay) + (-_4bx * q4 + _2bz * q2) * (_2bx * (0.5f - q3q3 - q4q4) + _2bz * (q2q4 - q1q3) - mx) + (-_2bx * q1 + _2bz * q3) * (_2bx * (q2q3 - q1q4) + _2bz * (q1q2 + q3q4) - my) + _2bx * q2 * (_2bx * (q1q3 + q2q4) + _2bz * (0.5f - q2q2 - q3q3) - mz);
 8002cd8:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8002cdc:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8002ce0:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8002ce4:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002ce8:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002cec:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002cf0:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 8002cf4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002cf8:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 8002cfc:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8002d00:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 8002d04:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8002d08:	edd7 7a08 	vldr	s15, [r7, #32]
 8002d0c:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8002d10:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 8002d14:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002d18:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002d1c:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8002d20:	eef1 6a67 	vneg.f32	s13, s15
 8002d24:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8002d28:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002d2c:	ed97 6a15 	vldr	s12, [r7, #84]	; 0x54
 8002d30:	edd7 7a30 	vldr	s15, [r7, #192]	; 0xc0
 8002d34:	ee66 7a27 	vmul.f32	s15, s12, s15
 8002d38:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8002d3c:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8002d40:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8002d44:	ee36 6a67 	vsub.f32	s12, s12, s15
 8002d48:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 8002d4c:	ee36 6a67 	vsub.f32	s12, s12, s15
 8002d50:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8002d54:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002d58:	edd7 5a21 	vldr	s11, [r7, #132]	; 0x84
 8002d5c:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 8002d60:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8002d64:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8002d68:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8002d6c:	ee36 6a27 	vadd.f32	s12, s12, s15
 8002d70:	edd7 7a03 	vldr	s15, [r7, #12]
 8002d74:	ee76 7a67 	vsub.f32	s15, s12, s15
 8002d78:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002d7c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002d80:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8002d84:	eef1 6a67 	vneg.f32	s13, s15
 8002d88:	edd7 7a31 	vldr	s15, [r7, #196]	; 0xc4
 8002d8c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002d90:	ed97 6a15 	vldr	s12, [r7, #84]	; 0x54
 8002d94:	edd7 7a2f 	vldr	s15, [r7, #188]	; 0xbc
 8002d98:	ee66 7a27 	vmul.f32	s15, s12, s15
 8002d9c:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8002da0:	ed97 6a22 	vldr	s12, [r7, #136]	; 0x88
 8002da4:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 8002da8:	ee36 6a67 	vsub.f32	s12, s12, s15
 8002dac:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8002db0:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002db4:	edd7 5a26 	vldr	s11, [r7, #152]	; 0x98
 8002db8:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 8002dbc:	ee75 5aa7 	vadd.f32	s11, s11, s15
 8002dc0:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8002dc4:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8002dc8:	ee36 6a27 	vadd.f32	s12, s12, s15
 8002dcc:	edd7 7a02 	vldr	s15, [r7, #8]
 8002dd0:	ee76 7a67 	vsub.f32	s15, s12, s15
 8002dd4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002dd8:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002ddc:	edd7 6a16 	vldr	s13, [r7, #88]	; 0x58
 8002de0:	edd7 7a30 	vldr	s15, [r7, #192]	; 0xc0
 8002de4:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002de8:	ed97 6a25 	vldr	s12, [r7, #148]	; 0x94
 8002dec:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8002df0:	ee36 6a27 	vadd.f32	s12, s12, s15
 8002df4:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8002df8:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002dfc:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 8002e00:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8002e04:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8002e08:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8002e0c:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8002e10:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8002e14:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8002e18:	ee36 6a27 	vadd.f32	s12, s12, s15
 8002e1c:	edd7 7a01 	vldr	s15, [r7, #4]
 8002e20:	ee76 7a67 	vsub.f32	s15, s12, s15
 8002e24:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002e28:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002e2c:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
	norm = sqrtf(s1 * s1 + s2 * s2 + s3 * s3 + s4 * s4);    // normalise step magnitude
 8002e30:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8002e34:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8002e38:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002e3c:	edd7 6a11 	vldr	s13, [r7, #68]	; 0x44
 8002e40:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8002e44:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002e48:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002e4c:	edd7 6a10 	vldr	s13, [r7, #64]	; 0x40
 8002e50:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8002e54:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002e58:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002e5c:	edd7 6a0f 	vldr	s13, [r7, #60]	; 0x3c
 8002e60:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8002e64:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002e68:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002e6c:	eeb0 0a67 	vmov.f32	s0, s15
 8002e70:	f011 f942 	bl	80140f8 <sqrtf>
 8002e74:	ed87 0a1d 	vstr	s0, [r7, #116]	; 0x74
	norm = 1.0f/norm;
 8002e78:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002e7c:	ed97 7a1d 	vldr	s14, [r7, #116]	; 0x74
 8002e80:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002e84:	edc7 7a1d 	vstr	s15, [r7, #116]	; 0x74
	s1 *= norm;
 8002e88:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8002e8c:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8002e90:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002e94:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
	s2 *= norm;
 8002e98:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 8002e9c:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8002ea0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002ea4:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
	s3 *= norm;
 8002ea8:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8002eac:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8002eb0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002eb4:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
	s4 *= norm;
 8002eb8:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8002ebc:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8002ec0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002ec4:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

	// Compute rate of change of quaternion
	qDot1 = 0.5f * (-q2 * gx - q3 * gy - q4 * gz) - beta * s1;
 8002ec8:	edd7 7a30 	vldr	s15, [r7, #192]	; 0xc0
 8002ecc:	eeb1 7a67 	vneg.f32	s14, s15
 8002ed0:	edd7 7a06 	vldr	s15, [r7, #24]
 8002ed4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002ed8:	edd7 6a2f 	vldr	s13, [r7, #188]	; 0xbc
 8002edc:	edd7 7a05 	vldr	s15, [r7, #20]
 8002ee0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002ee4:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002ee8:	edd7 6a2e 	vldr	s13, [r7, #184]	; 0xb8
 8002eec:	edd7 7a04 	vldr	s15, [r7, #16]
 8002ef0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002ef4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002ef8:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002efc:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002f00:	4b82      	ldr	r3, [pc, #520]	; (800310c <MadgwickQuaternionUpdate+0xd30>)
 8002f02:	edd3 6a00 	vldr	s13, [r3]
 8002f06:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8002f0a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002f0e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002f12:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
	qDot2 = 0.5f * (q1 * gx + q3 * gz - q4 * gy) - beta * s2;
 8002f16:	ed97 7a31 	vldr	s14, [r7, #196]	; 0xc4
 8002f1a:	edd7 7a06 	vldr	s15, [r7, #24]
 8002f1e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002f22:	edd7 6a2f 	vldr	s13, [r7, #188]	; 0xbc
 8002f26:	edd7 7a04 	vldr	s15, [r7, #16]
 8002f2a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002f2e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002f32:	edd7 6a2e 	vldr	s13, [r7, #184]	; 0xb8
 8002f36:	edd7 7a05 	vldr	s15, [r7, #20]
 8002f3a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002f3e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002f42:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002f46:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002f4a:	4b70      	ldr	r3, [pc, #448]	; (800310c <MadgwickQuaternionUpdate+0xd30>)
 8002f4c:	edd3 6a00 	vldr	s13, [r3]
 8002f50:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8002f54:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002f58:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002f5c:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
	qDot3 = 0.5f * (q1 * gy - q2 * gz + q4 * gx) - beta * s3;
 8002f60:	ed97 7a31 	vldr	s14, [r7, #196]	; 0xc4
 8002f64:	edd7 7a05 	vldr	s15, [r7, #20]
 8002f68:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002f6c:	edd7 6a30 	vldr	s13, [r7, #192]	; 0xc0
 8002f70:	edd7 7a04 	vldr	s15, [r7, #16]
 8002f74:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002f78:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002f7c:	edd7 6a2e 	vldr	s13, [r7, #184]	; 0xb8
 8002f80:	edd7 7a06 	vldr	s15, [r7, #24]
 8002f84:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002f88:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002f8c:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002f90:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002f94:	4b5d      	ldr	r3, [pc, #372]	; (800310c <MadgwickQuaternionUpdate+0xd30>)
 8002f96:	edd3 6a00 	vldr	s13, [r3]
 8002f9a:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8002f9e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002fa2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002fa6:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
	qDot4 = 0.5f * (q1 * gz + q2 * gy - q3 * gx) - beta * s4;
 8002faa:	ed97 7a31 	vldr	s14, [r7, #196]	; 0xc4
 8002fae:	edd7 7a04 	vldr	s15, [r7, #16]
 8002fb2:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002fb6:	edd7 6a30 	vldr	s13, [r7, #192]	; 0xc0
 8002fba:	edd7 7a05 	vldr	s15, [r7, #20]
 8002fbe:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002fc2:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002fc6:	edd7 6a2f 	vldr	s13, [r7, #188]	; 0xbc
 8002fca:	edd7 7a06 	vldr	s15, [r7, #24]
 8002fce:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002fd2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002fd6:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002fda:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002fde:	4b4b      	ldr	r3, [pc, #300]	; (800310c <MadgwickQuaternionUpdate+0xd30>)
 8002fe0:	edd3 6a00 	vldr	s13, [r3]
 8002fe4:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8002fe8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002fec:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002ff0:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c

	// Integrate to yield quaternion
	q1 += qDot1 * deltat;
 8002ff4:	4b46      	ldr	r3, [pc, #280]	; (8003110 <MadgwickQuaternionUpdate+0xd34>)
 8002ff6:	ed93 7a00 	vldr	s14, [r3]
 8002ffa:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8002ffe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003002:	ed97 7a31 	vldr	s14, [r7, #196]	; 0xc4
 8003006:	ee77 7a27 	vadd.f32	s15, s14, s15
 800300a:	edc7 7a31 	vstr	s15, [r7, #196]	; 0xc4
	q2 += qDot2 * deltat;
 800300e:	4b40      	ldr	r3, [pc, #256]	; (8003110 <MadgwickQuaternionUpdate+0xd34>)
 8003010:	ed93 7a00 	vldr	s14, [r3]
 8003014:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8003018:	ee67 7a27 	vmul.f32	s15, s14, s15
 800301c:	ed97 7a30 	vldr	s14, [r7, #192]	; 0xc0
 8003020:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003024:	edc7 7a30 	vstr	s15, [r7, #192]	; 0xc0
	q3 += qDot3 * deltat;
 8003028:	4b39      	ldr	r3, [pc, #228]	; (8003110 <MadgwickQuaternionUpdate+0xd34>)
 800302a:	ed93 7a00 	vldr	s14, [r3]
 800302e:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8003032:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003036:	ed97 7a2f 	vldr	s14, [r7, #188]	; 0xbc
 800303a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800303e:	edc7 7a2f 	vstr	s15, [r7, #188]	; 0xbc
	q4 += qDot4 * deltat;
 8003042:	4b33      	ldr	r3, [pc, #204]	; (8003110 <MadgwickQuaternionUpdate+0xd34>)
 8003044:	ed93 7a00 	vldr	s14, [r3]
 8003048:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800304c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003050:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 8003054:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003058:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
	norm = sqrtf(q1 * q1 + q2 * q2 + q3 * q3 + q4 * q4);    // normalise quaternion
 800305c:	ed97 7a31 	vldr	s14, [r7, #196]	; 0xc4
 8003060:	edd7 7a31 	vldr	s15, [r7, #196]	; 0xc4
 8003064:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003068:	edd7 6a30 	vldr	s13, [r7, #192]	; 0xc0
 800306c:	edd7 7a30 	vldr	s15, [r7, #192]	; 0xc0
 8003070:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003074:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003078:	edd7 6a2f 	vldr	s13, [r7, #188]	; 0xbc
 800307c:	edd7 7a2f 	vldr	s15, [r7, #188]	; 0xbc
 8003080:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003084:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003088:	edd7 6a2e 	vldr	s13, [r7, #184]	; 0xb8
 800308c:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8003090:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003094:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003098:	eeb0 0a67 	vmov.f32	s0, s15
 800309c:	f011 f82c 	bl	80140f8 <sqrtf>
 80030a0:	ed87 0a1d 	vstr	s0, [r7, #116]	; 0x74
	norm = 1.0f/norm;
 80030a4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80030a8:	ed97 7a1d 	vldr	s14, [r7, #116]	; 0x74
 80030ac:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80030b0:	edc7 7a1d 	vstr	s15, [r7, #116]	; 0x74
	q[0] = q1 * norm;
 80030b4:	ed97 7a31 	vldr	s14, [r7, #196]	; 0xc4
 80030b8:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 80030bc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80030c0:	4b14      	ldr	r3, [pc, #80]	; (8003114 <MadgwickQuaternionUpdate+0xd38>)
 80030c2:	edc3 7a00 	vstr	s15, [r3]
	q[1] = q2 * norm;
 80030c6:	ed97 7a30 	vldr	s14, [r7, #192]	; 0xc0
 80030ca:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 80030ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80030d2:	4b10      	ldr	r3, [pc, #64]	; (8003114 <MadgwickQuaternionUpdate+0xd38>)
 80030d4:	edc3 7a01 	vstr	s15, [r3, #4]
	q[2] = q3 * norm;
 80030d8:	ed97 7a2f 	vldr	s14, [r7, #188]	; 0xbc
 80030dc:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 80030e0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80030e4:	4b0b      	ldr	r3, [pc, #44]	; (8003114 <MadgwickQuaternionUpdate+0xd38>)
 80030e6:	edc3 7a02 	vstr	s15, [r3, #8]
	q[3] = q4 * norm;
 80030ea:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 80030ee:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 80030f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80030f6:	4b07      	ldr	r3, [pc, #28]	; (8003114 <MadgwickQuaternionUpdate+0xd38>)
 80030f8:	edc3 7a03 	vstr	s15, [r3, #12]
 80030fc:	e002      	b.n	8003104 <MadgwickQuaternionUpdate+0xd28>
	if (norm == 0.0f) return; // handle NaN
 80030fe:	bf00      	nop
 8003100:	e000      	b.n	8003104 <MadgwickQuaternionUpdate+0xd28>
	if (norm == 0.0f) return; // handle NaN
 8003102:	bf00      	nop

}
 8003104:	37c8      	adds	r7, #200	; 0xc8
 8003106:	46bd      	mov	sp, r7
 8003108:	bd80      	pop	{r7, pc}
 800310a:	bf00      	nop
 800310c:	2000085c 	.word	0x2000085c
 8003110:	20000890 	.word	0x20000890
 8003114:	200008a8 	.word	0x200008a8

08003118 <print>:
static void loop(void);

static uint32_t printLen = 0;
static char printBuffer[512];
static inline void print(char* str)
{
 8003118:	b580      	push	{r7, lr}
 800311a:	b082      	sub	sp, #8
 800311c:	af00      	add	r7, sp, #0
 800311e:	6078      	str	r0, [r7, #4]
	#if PRINT_OUT
	HAL_GPIO_WritePin(LEDB_GPIO_Port, LEDB_Pin, GPIO_PIN_SET);
 8003120:	2201      	movs	r2, #1
 8003122:	2140      	movs	r1, #64	; 0x40
 8003124:	480c      	ldr	r0, [pc, #48]	; (8003158 <print+0x40>)
 8003126:	f002 ff25 	bl	8005f74 <HAL_GPIO_WritePin>

	while (CDC_Transmit_FS((uint8_t*) str, strlen(str)) == USBD_BUSY);
 800312a:	bf00      	nop
 800312c:	6878      	ldr	r0, [r7, #4]
 800312e:	f7fd f84f 	bl	80001d0 <strlen>
 8003132:	4603      	mov	r3, r0
 8003134:	b29b      	uxth	r3, r3
 8003136:	4619      	mov	r1, r3
 8003138:	6878      	ldr	r0, [r7, #4]
 800313a:	f00c fc71 	bl	800fa20 <CDC_Transmit_FS>
 800313e:	4603      	mov	r3, r0
 8003140:	2b01      	cmp	r3, #1
 8003142:	d0f3      	beq.n	800312c <print+0x14>

	HAL_GPIO_WritePin(LEDB_GPIO_Port, LEDB_Pin, GPIO_PIN_RESET);
 8003144:	2200      	movs	r2, #0
 8003146:	2140      	movs	r1, #64	; 0x40
 8003148:	4803      	ldr	r0, [pc, #12]	; (8003158 <print+0x40>)
 800314a:	f002 ff13 	bl	8005f74 <HAL_GPIO_WritePin>
	#endif
};
 800314e:	bf00      	nop
 8003150:	3708      	adds	r7, #8
 8003152:	46bd      	mov	sp, r7
 8003154:	bd80      	pop	{r7, pc}
 8003156:	bf00      	nop
 8003158:	40020800 	.word	0x40020800

0800315c <println>:
static inline void println(char* str)
{
 800315c:	b580      	push	{r7, lr}
 800315e:	b084      	sub	sp, #16
 8003160:	af00      	add	r7, sp, #0
 8003162:	6078      	str	r0, [r7, #4]
	#if PRINT_OUT
	HAL_GPIO_WritePin(LEDB_GPIO_Port, LEDB_Pin, GPIO_PIN_SET);
 8003164:	2201      	movs	r2, #1
 8003166:	2140      	movs	r1, #64	; 0x40
 8003168:	4820      	ldr	r0, [pc, #128]	; (80031ec <println+0x90>)
 800316a:	f002 ff03 	bl	8005f74 <HAL_GPIO_WritePin>

	printLen = strlen(str);
 800316e:	6878      	ldr	r0, [r7, #4]
 8003170:	f7fd f82e 	bl	80001d0 <strlen>
 8003174:	4602      	mov	r2, r0
 8003176:	4b1e      	ldr	r3, [pc, #120]	; (80031f0 <println+0x94>)
 8003178:	601a      	str	r2, [r3, #0]
	uint8_t i;
	for (i = 0; i < printLen; i++)
 800317a:	2300      	movs	r3, #0
 800317c:	73fb      	strb	r3, [r7, #15]
 800317e:	e009      	b.n	8003194 <println+0x38>
	{
		printBuffer[i] = str[i];
 8003180:	7bfb      	ldrb	r3, [r7, #15]
 8003182:	687a      	ldr	r2, [r7, #4]
 8003184:	441a      	add	r2, r3
 8003186:	7bfb      	ldrb	r3, [r7, #15]
 8003188:	7811      	ldrb	r1, [r2, #0]
 800318a:	4a1a      	ldr	r2, [pc, #104]	; (80031f4 <println+0x98>)
 800318c:	54d1      	strb	r1, [r2, r3]
	for (i = 0; i < printLen; i++)
 800318e:	7bfb      	ldrb	r3, [r7, #15]
 8003190:	3301      	adds	r3, #1
 8003192:	73fb      	strb	r3, [r7, #15]
 8003194:	7bfa      	ldrb	r2, [r7, #15]
 8003196:	4b16      	ldr	r3, [pc, #88]	; (80031f0 <println+0x94>)
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	429a      	cmp	r2, r3
 800319c:	d3f0      	bcc.n	8003180 <println+0x24>
	}
	printBuffer[printLen] = '\n';
 800319e:	4b14      	ldr	r3, [pc, #80]	; (80031f0 <println+0x94>)
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	4a14      	ldr	r2, [pc, #80]	; (80031f4 <println+0x98>)
 80031a4:	210a      	movs	r1, #10
 80031a6:	54d1      	strb	r1, [r2, r3]
	printBuffer[printLen + 1] = '\r';
 80031a8:	4b11      	ldr	r3, [pc, #68]	; (80031f0 <println+0x94>)
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	3301      	adds	r3, #1
 80031ae:	4a11      	ldr	r2, [pc, #68]	; (80031f4 <println+0x98>)
 80031b0:	210d      	movs	r1, #13
 80031b2:	54d1      	strb	r1, [r2, r3]
	printBuffer[printLen + 2] = '\0';
 80031b4:	4b0e      	ldr	r3, [pc, #56]	; (80031f0 <println+0x94>)
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	3302      	adds	r3, #2
 80031ba:	4a0e      	ldr	r2, [pc, #56]	; (80031f4 <println+0x98>)
 80031bc:	2100      	movs	r1, #0
 80031be:	54d1      	strb	r1, [r2, r3]
 	while (CDC_Transmit_FS((uint8_t*) printBuffer, printLen + 3) == USBD_BUSY);
 80031c0:	bf00      	nop
 80031c2:	4b0b      	ldr	r3, [pc, #44]	; (80031f0 <println+0x94>)
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	b29b      	uxth	r3, r3
 80031c8:	3303      	adds	r3, #3
 80031ca:	b29b      	uxth	r3, r3
 80031cc:	4619      	mov	r1, r3
 80031ce:	4809      	ldr	r0, [pc, #36]	; (80031f4 <println+0x98>)
 80031d0:	f00c fc26 	bl	800fa20 <CDC_Transmit_FS>
 80031d4:	4603      	mov	r3, r0
 80031d6:	2b01      	cmp	r3, #1
 80031d8:	d0f3      	beq.n	80031c2 <println+0x66>

	HAL_GPIO_WritePin(LEDB_GPIO_Port, LEDB_Pin, GPIO_PIN_RESET);
 80031da:	2200      	movs	r2, #0
 80031dc:	2140      	movs	r1, #64	; 0x40
 80031de:	4803      	ldr	r0, [pc, #12]	; (80031ec <println+0x90>)
 80031e0:	f002 fec8 	bl	8005f74 <HAL_GPIO_WritePin>
	#endif
};
 80031e4:	bf00      	nop
 80031e6:	3710      	adds	r7, #16
 80031e8:	46bd      	mov	sp, r7
 80031ea:	bd80      	pop	{r7, pc}
 80031ec:	40020800 	.word	0x40020800
 80031f0:	20000370 	.word	0x20000370
 80031f4:	20000374 	.word	0x20000374

080031f8 <print_float>:

	HAL_GPIO_WritePin(LEDB_GPIO_Port, LEDB_Pin, GPIO_PIN_RESET);
	#endif
}
static inline void print_float(float number)
{
 80031f8:	b590      	push	{r4, r7, lr}
 80031fa:	b083      	sub	sp, #12
 80031fc:	af00      	add	r7, sp, #0
 80031fe:	ed87 0a01 	vstr	s0, [r7, #4]
	#if PRINT_OUT
	HAL_GPIO_WritePin(LEDB_GPIO_Port, LEDB_Pin, GPIO_PIN_SET);
 8003202:	2201      	movs	r2, #1
 8003204:	2140      	movs	r1, #64	; 0x40
 8003206:	4813      	ldr	r0, [pc, #76]	; (8003254 <print_float+0x5c>)
 8003208:	f002 feb4 	bl	8005f74 <HAL_GPIO_WritePin>

	printLen = sprintf(printBuffer, "%f", number);
 800320c:	6878      	ldr	r0, [r7, #4]
 800320e:	f7fd f99b 	bl	8000548 <__aeabi_f2d>
 8003212:	4603      	mov	r3, r0
 8003214:	460c      	mov	r4, r1
 8003216:	461a      	mov	r2, r3
 8003218:	4623      	mov	r3, r4
 800321a:	490f      	ldr	r1, [pc, #60]	; (8003258 <print_float+0x60>)
 800321c:	480f      	ldr	r0, [pc, #60]	; (800325c <print_float+0x64>)
 800321e:	f00d ff77 	bl	8011110 <siprintf>
 8003222:	4603      	mov	r3, r0
 8003224:	461a      	mov	r2, r3
 8003226:	4b0e      	ldr	r3, [pc, #56]	; (8003260 <print_float+0x68>)
 8003228:	601a      	str	r2, [r3, #0]
	while (CDC_Transmit_FS((uint8_t*) printBuffer, printLen) == USBD_BUSY);
 800322a:	bf00      	nop
 800322c:	4b0c      	ldr	r3, [pc, #48]	; (8003260 <print_float+0x68>)
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	b29b      	uxth	r3, r3
 8003232:	4619      	mov	r1, r3
 8003234:	4809      	ldr	r0, [pc, #36]	; (800325c <print_float+0x64>)
 8003236:	f00c fbf3 	bl	800fa20 <CDC_Transmit_FS>
 800323a:	4603      	mov	r3, r0
 800323c:	2b01      	cmp	r3, #1
 800323e:	d0f5      	beq.n	800322c <print_float+0x34>

	HAL_GPIO_WritePin(LEDB_GPIO_Port, LEDB_Pin, GPIO_PIN_RESET);
 8003240:	2200      	movs	r2, #0
 8003242:	2140      	movs	r1, #64	; 0x40
 8003244:	4803      	ldr	r0, [pc, #12]	; (8003254 <print_float+0x5c>)
 8003246:	f002 fe95 	bl	8005f74 <HAL_GPIO_WritePin>
	#endif
}
 800324a:	bf00      	nop
 800324c:	370c      	adds	r7, #12
 800324e:	46bd      	mov	sp, r7
 8003250:	bd90      	pop	{r4, r7, pc}
 8003252:	bf00      	nop
 8003254:	40020800 	.word	0x40020800
 8003258:	080158e0 	.word	0x080158e0
 800325c:	20000374 	.word	0x20000374
 8003260:	20000370 	.word	0x20000370

08003264 <micros>:
#include "stm32f4xx_hal.h"
#include "main.h"
#include "run.h"

// TIM5 has 32-bit counter -> takes longer to overflow
static inline uint32_t micros(void) { return (uint32_t)TIM2->CNT; }
 8003264:	b480      	push	{r7}
 8003266:	af00      	add	r7, sp, #0
 8003268:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800326c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800326e:	4618      	mov	r0, r3
 8003270:	46bd      	mov	sp, r7
 8003272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003276:	4770      	bx	lr

08003278 <millis>:
static inline uint32_t millis(void) { return (uint32_t)(TIM2->CNT) / 1000; }
 8003278:	b480      	push	{r7}
 800327a:	af00      	add	r7, sp, #0
 800327c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003280:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003282:	4a04      	ldr	r2, [pc, #16]	; (8003294 <millis+0x1c>)
 8003284:	fba2 2303 	umull	r2, r3, r2, r3
 8003288:	099b      	lsrs	r3, r3, #6
 800328a:	4618      	mov	r0, r3
 800328c:	46bd      	mov	sp, r7
 800328e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003292:	4770      	bx	lr
 8003294:	10624dd3 	.word	0x10624dd3

08003298 <imuTest_getData>:

float a12, a22, a31, a32, a33;            // rotation matrix coefficients for Euler angles and gravity components
float lin_ax, lin_ay, lin_az;             // linear acceleration (acceleration with gravity component subtracted)

static bool imuTest_getData(void)
{
 8003298:	b580      	push	{r7, lr}
 800329a:	af00      	add	r7, sp, #0
	if (MPU_readByte(MPU9250_ADDRESS, INT_STATUS) & 0x01)	// check if data ready interrupt
 800329c:	213a      	movs	r1, #58	; 0x3a
 800329e:	20d2      	movs	r0, #210	; 0xd2
 80032a0:	f7fd fe8e 	bl	8000fc0 <MPU_readByte>
 80032a4:	4603      	mov	r3, r0
 80032a6:	f003 0301 	and.w	r3, r3, #1
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	f000 80bf 	beq.w	800342e <imuTest_getData+0x196>
	{
		MPU_readAccelData(accelCount);						// Read the x/y/z adc values
 80032b0:	4860      	ldr	r0, [pc, #384]	; (8003434 <imuTest_getData+0x19c>)
 80032b2:	f7fd ff5b 	bl	800116c <MPU_readAccelData>

		// Now we'll calculate the accleration value into actual g's
		ax = (float)accelCount[0]*aRes - MPU9250accelBias[0];	// get actual g value, this depends on scale being set
 80032b6:	4b5f      	ldr	r3, [pc, #380]	; (8003434 <imuTest_getData+0x19c>)
 80032b8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80032bc:	ee07 3a90 	vmov	s15, r3
 80032c0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80032c4:	4b5c      	ldr	r3, [pc, #368]	; (8003438 <imuTest_getData+0x1a0>)
 80032c6:	edd3 7a00 	vldr	s15, [r3]
 80032ca:	ee27 7a27 	vmul.f32	s14, s14, s15
 80032ce:	4b5b      	ldr	r3, [pc, #364]	; (800343c <imuTest_getData+0x1a4>)
 80032d0:	edd3 7a00 	vldr	s15, [r3]
 80032d4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80032d8:	4b59      	ldr	r3, [pc, #356]	; (8003440 <imuTest_getData+0x1a8>)
 80032da:	edc3 7a00 	vstr	s15, [r3]
		ay = (float)accelCount[1]*aRes - MPU9250accelBias[1];
 80032de:	4b55      	ldr	r3, [pc, #340]	; (8003434 <imuTest_getData+0x19c>)
 80032e0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80032e4:	ee07 3a90 	vmov	s15, r3
 80032e8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80032ec:	4b52      	ldr	r3, [pc, #328]	; (8003438 <imuTest_getData+0x1a0>)
 80032ee:	edd3 7a00 	vldr	s15, [r3]
 80032f2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80032f6:	4b51      	ldr	r3, [pc, #324]	; (800343c <imuTest_getData+0x1a4>)
 80032f8:	edd3 7a01 	vldr	s15, [r3, #4]
 80032fc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003300:	4b50      	ldr	r3, [pc, #320]	; (8003444 <imuTest_getData+0x1ac>)
 8003302:	edc3 7a00 	vstr	s15, [r3]
		az = (float)accelCount[2]*aRes - MPU9250accelBias[2];
 8003306:	4b4b      	ldr	r3, [pc, #300]	; (8003434 <imuTest_getData+0x19c>)
 8003308:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800330c:	ee07 3a90 	vmov	s15, r3
 8003310:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003314:	4b48      	ldr	r3, [pc, #288]	; (8003438 <imuTest_getData+0x1a0>)
 8003316:	edd3 7a00 	vldr	s15, [r3]
 800331a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800331e:	4b47      	ldr	r3, [pc, #284]	; (800343c <imuTest_getData+0x1a4>)
 8003320:	edd3 7a02 	vldr	s15, [r3, #8]
 8003324:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003328:	4b47      	ldr	r3, [pc, #284]	; (8003448 <imuTest_getData+0x1b0>)
 800332a:	edc3 7a00 	vstr	s15, [r3]

		MPU_readGyroData(gyroCount);	// Read the x/y/z adc values
 800332e:	4847      	ldr	r0, [pc, #284]	; (800344c <imuTest_getData+0x1b4>)
 8003330:	f7fd ff48 	bl	80011c4 <MPU_readGyroData>

		// Calculate the gyro value into actual degrees per second
		gx = (float)gyroCount[0]*gRes;	// get actual gyro value, this depends on scale being set
 8003334:	4b45      	ldr	r3, [pc, #276]	; (800344c <imuTest_getData+0x1b4>)
 8003336:	f9b3 3000 	ldrsh.w	r3, [r3]
 800333a:	ee07 3a90 	vmov	s15, r3
 800333e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003342:	4b43      	ldr	r3, [pc, #268]	; (8003450 <imuTest_getData+0x1b8>)
 8003344:	edd3 7a00 	vldr	s15, [r3]
 8003348:	ee67 7a27 	vmul.f32	s15, s14, s15
 800334c:	4b41      	ldr	r3, [pc, #260]	; (8003454 <imuTest_getData+0x1bc>)
 800334e:	edc3 7a00 	vstr	s15, [r3]
		gy = (float)gyroCount[1]*gRes;
 8003352:	4b3e      	ldr	r3, [pc, #248]	; (800344c <imuTest_getData+0x1b4>)
 8003354:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8003358:	ee07 3a90 	vmov	s15, r3
 800335c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003360:	4b3b      	ldr	r3, [pc, #236]	; (8003450 <imuTest_getData+0x1b8>)
 8003362:	edd3 7a00 	vldr	s15, [r3]
 8003366:	ee67 7a27 	vmul.f32	s15, s14, s15
 800336a:	4b3b      	ldr	r3, [pc, #236]	; (8003458 <imuTest_getData+0x1c0>)
 800336c:	edc3 7a00 	vstr	s15, [r3]
		gz = (float)gyroCount[2]*gRes;
 8003370:	4b36      	ldr	r3, [pc, #216]	; (800344c <imuTest_getData+0x1b4>)
 8003372:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8003376:	ee07 3a90 	vmov	s15, r3
 800337a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800337e:	4b34      	ldr	r3, [pc, #208]	; (8003450 <imuTest_getData+0x1b8>)
 8003380:	edd3 7a00 	vldr	s15, [r3]
 8003384:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003388:	4b34      	ldr	r3, [pc, #208]	; (800345c <imuTest_getData+0x1c4>)
 800338a:	edc3 7a00 	vstr	s15, [r3]

		MPU_readMagData(magCount);	// Read the x/y/z adc values
 800338e:	4834      	ldr	r0, [pc, #208]	; (8003460 <imuTest_getData+0x1c8>)
 8003390:	f7fd ff44 	bl	800121c <MPU_readMagData>

		// Calculate the magnetometer values in milliGauss
		// Include factory calibration per data sheet and user environmental corrections
		mx = (float)magCount[0]*mRes*magCalibration[0] - MPU9250magBias[0];	// get actual magnetometer value, this depends on scale being set
 8003394:	4b32      	ldr	r3, [pc, #200]	; (8003460 <imuTest_getData+0x1c8>)
 8003396:	f9b3 3000 	ldrsh.w	r3, [r3]
 800339a:	ee07 3a90 	vmov	s15, r3
 800339e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80033a2:	4b30      	ldr	r3, [pc, #192]	; (8003464 <imuTest_getData+0x1cc>)
 80033a4:	edd3 7a00 	vldr	s15, [r3]
 80033a8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80033ac:	4b2e      	ldr	r3, [pc, #184]	; (8003468 <imuTest_getData+0x1d0>)
 80033ae:	edd3 7a00 	vldr	s15, [r3]
 80033b2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80033b6:	4b2d      	ldr	r3, [pc, #180]	; (800346c <imuTest_getData+0x1d4>)
 80033b8:	edd3 7a00 	vldr	s15, [r3]
 80033bc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80033c0:	4b2b      	ldr	r3, [pc, #172]	; (8003470 <imuTest_getData+0x1d8>)
 80033c2:	edc3 7a00 	vstr	s15, [r3]
		my = (float)magCount[1]*mRes*magCalibration[1] - MPU9250magBias[1];
 80033c6:	4b26      	ldr	r3, [pc, #152]	; (8003460 <imuTest_getData+0x1c8>)
 80033c8:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80033cc:	ee07 3a90 	vmov	s15, r3
 80033d0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80033d4:	4b23      	ldr	r3, [pc, #140]	; (8003464 <imuTest_getData+0x1cc>)
 80033d6:	edd3 7a00 	vldr	s15, [r3]
 80033da:	ee27 7a27 	vmul.f32	s14, s14, s15
 80033de:	4b22      	ldr	r3, [pc, #136]	; (8003468 <imuTest_getData+0x1d0>)
 80033e0:	edd3 7a01 	vldr	s15, [r3, #4]
 80033e4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80033e8:	4b20      	ldr	r3, [pc, #128]	; (800346c <imuTest_getData+0x1d4>)
 80033ea:	edd3 7a01 	vldr	s15, [r3, #4]
 80033ee:	ee77 7a67 	vsub.f32	s15, s14, s15
 80033f2:	4b20      	ldr	r3, [pc, #128]	; (8003474 <imuTest_getData+0x1dc>)
 80033f4:	edc3 7a00 	vstr	s15, [r3]
		mz = (float)magCount[2]*mRes*magCalibration[2] - MPU9250magBias[2];
 80033f8:	4b19      	ldr	r3, [pc, #100]	; (8003460 <imuTest_getData+0x1c8>)
 80033fa:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80033fe:	ee07 3a90 	vmov	s15, r3
 8003402:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003406:	4b17      	ldr	r3, [pc, #92]	; (8003464 <imuTest_getData+0x1cc>)
 8003408:	edd3 7a00 	vldr	s15, [r3]
 800340c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003410:	4b15      	ldr	r3, [pc, #84]	; (8003468 <imuTest_getData+0x1d0>)
 8003412:	edd3 7a02 	vldr	s15, [r3, #8]
 8003416:	ee27 7a27 	vmul.f32	s14, s14, s15
 800341a:	4b14      	ldr	r3, [pc, #80]	; (800346c <imuTest_getData+0x1d4>)
 800341c:	edd3 7a02 	vldr	s15, [r3, #8]
 8003420:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003424:	4b14      	ldr	r3, [pc, #80]	; (8003478 <imuTest_getData+0x1e0>)
 8003426:	edc3 7a00 	vstr	s15, [r3]

		return true;
 800342a:	2301      	movs	r3, #1
 800342c:	e000      	b.n	8003430 <imuTest_getData+0x198>
	}
	return false;
 800342e:	2300      	movs	r3, #0
}
 8003430:	4618      	mov	r0, r3
 8003432:	bd80      	pop	{r7, pc}
 8003434:	2000079c 	.word	0x2000079c
 8003438:	20000820 	.word	0x20000820
 800343c:	200007a4 	.word	0x200007a4
 8003440:	2000081c 	.word	0x2000081c
 8003444:	200008c8 	.word	0x200008c8
 8003448:	200007e4 	.word	0x200007e4
 800344c:	200007ec 	.word	0x200007ec
 8003450:	20000860 	.word	0x20000860
 8003454:	200008b8 	.word	0x200008b8
 8003458:	200007e0 	.word	0x200007e0
 800345c:	20000850 	.word	0x20000850
 8003460:	2000087c 	.word	0x2000087c
 8003464:	20000894 	.word	0x20000894
 8003468:	200008bc 	.word	0x200008bc
 800346c:	20000834 	.word	0x20000834
 8003470:	200008cc 	.word	0x200008cc
 8003474:	200007f4 	.word	0x200007f4
 8003478:	20000864 	.word	0x20000864

0800347c <imuTest_quatUpdate>:
static bool imuTest_quatUpdate(void)
{
 800347c:	b580      	push	{r7, lr}
 800347e:	af00      	add	r7, sp, #0
	if (micros() - lastCompute > 10)
 8003480:	f7ff fef0 	bl	8003264 <micros>
 8003484:	4602      	mov	r2, r0
 8003486:	4b43      	ldr	r3, [pc, #268]	; (8003594 <imuTest_quatUpdate+0x118>)
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	1ad3      	subs	r3, r2, r3
 800348c:	2b0a      	cmp	r3, #10
 800348e:	d97d      	bls.n	800358c <imuTest_quatUpdate+0x110>
	{
		Now = micros();
 8003490:	f7ff fee8 	bl	8003264 <micros>
 8003494:	4603      	mov	r3, r0
 8003496:	461a      	mov	r2, r3
 8003498:	4b3f      	ldr	r3, [pc, #252]	; (8003598 <imuTest_quatUpdate+0x11c>)
 800349a:	601a      	str	r2, [r3, #0]
		deltat = ((Now - lastUpdate)/1000000.0f); // set integration time by time elapsed since last filter update
 800349c:	4b3e      	ldr	r3, [pc, #248]	; (8003598 <imuTest_quatUpdate+0x11c>)
 800349e:	681a      	ldr	r2, [r3, #0]
 80034a0:	4b3e      	ldr	r3, [pc, #248]	; (800359c <imuTest_quatUpdate+0x120>)
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	1ad3      	subs	r3, r2, r3
 80034a6:	ee07 3a90 	vmov	s15, r3
 80034aa:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80034ae:	eddf 6a3c 	vldr	s13, [pc, #240]	; 80035a0 <imuTest_quatUpdate+0x124>
 80034b2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80034b6:	4b3b      	ldr	r3, [pc, #236]	; (80035a4 <imuTest_quatUpdate+0x128>)
 80034b8:	edc3 7a00 	vstr	s15, [r3]
		lastUpdate = Now;
 80034bc:	4b36      	ldr	r3, [pc, #216]	; (8003598 <imuTest_quatUpdate+0x11c>)
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	4a36      	ldr	r2, [pc, #216]	; (800359c <imuTest_quatUpdate+0x120>)
 80034c2:	6013      	str	r3, [r2, #0]

		sum += deltat; // sum for averaging filter update rate
 80034c4:	4b38      	ldr	r3, [pc, #224]	; (80035a8 <imuTest_quatUpdate+0x12c>)
 80034c6:	ed93 7a00 	vldr	s14, [r3]
 80034ca:	4b36      	ldr	r3, [pc, #216]	; (80035a4 <imuTest_quatUpdate+0x128>)
 80034cc:	edd3 7a00 	vldr	s15, [r3]
 80034d0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80034d4:	4b34      	ldr	r3, [pc, #208]	; (80035a8 <imuTest_quatUpdate+0x12c>)
 80034d6:	edc3 7a00 	vstr	s15, [r3]
		sumCount++;
 80034da:	4b34      	ldr	r3, [pc, #208]	; (80035ac <imuTest_quatUpdate+0x130>)
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	3301      	adds	r3, #1
 80034e0:	4a32      	ldr	r2, [pc, #200]	; (80035ac <imuTest_quatUpdate+0x130>)
 80034e2:	6013      	str	r3, [r2, #0]

		MadgwickQuaternionUpdate(ax, -ay, -az, gx*PI/180.0f, -gy*PI/180.0f, -gz*PI/180.0f,  my,  -mx, mz);
 80034e4:	4b32      	ldr	r3, [pc, #200]	; (80035b0 <imuTest_quatUpdate+0x134>)
 80034e6:	edd3 6a00 	vldr	s13, [r3]
 80034ea:	4b32      	ldr	r3, [pc, #200]	; (80035b4 <imuTest_quatUpdate+0x138>)
 80034ec:	edd3 7a00 	vldr	s15, [r3]
 80034f0:	eeb1 6a67 	vneg.f32	s12, s15
 80034f4:	4b30      	ldr	r3, [pc, #192]	; (80035b8 <imuTest_quatUpdate+0x13c>)
 80034f6:	edd3 7a00 	vldr	s15, [r3]
 80034fa:	eef1 5a67 	vneg.f32	s11, s15
 80034fe:	4b2f      	ldr	r3, [pc, #188]	; (80035bc <imuTest_quatUpdate+0x140>)
 8003500:	edd3 7a00 	vldr	s15, [r3]
 8003504:	ed9f 7a2e 	vldr	s14, [pc, #184]	; 80035c0 <imuTest_quatUpdate+0x144>
 8003508:	ee67 7a87 	vmul.f32	s15, s15, s14
 800350c:	ed9f 7a2d 	vldr	s14, [pc, #180]	; 80035c4 <imuTest_quatUpdate+0x148>
 8003510:	ee87 5a87 	vdiv.f32	s10, s15, s14
 8003514:	4b2c      	ldr	r3, [pc, #176]	; (80035c8 <imuTest_quatUpdate+0x14c>)
 8003516:	edd3 7a00 	vldr	s15, [r3]
 800351a:	eef1 7a67 	vneg.f32	s15, s15
 800351e:	ed9f 7a28 	vldr	s14, [pc, #160]	; 80035c0 <imuTest_quatUpdate+0x144>
 8003522:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003526:	ed9f 7a27 	vldr	s14, [pc, #156]	; 80035c4 <imuTest_quatUpdate+0x148>
 800352a:	eec7 4a87 	vdiv.f32	s9, s15, s14
 800352e:	4b27      	ldr	r3, [pc, #156]	; (80035cc <imuTest_quatUpdate+0x150>)
 8003530:	edd3 7a00 	vldr	s15, [r3]
 8003534:	eef1 7a67 	vneg.f32	s15, s15
 8003538:	ed9f 7a21 	vldr	s14, [pc, #132]	; 80035c0 <imuTest_quatUpdate+0x144>
 800353c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003540:	ed9f 7a20 	vldr	s14, [pc, #128]	; 80035c4 <imuTest_quatUpdate+0x148>
 8003544:	eec7 2a87 	vdiv.f32	s5, s15, s14
 8003548:	4b21      	ldr	r3, [pc, #132]	; (80035d0 <imuTest_quatUpdate+0x154>)
 800354a:	ed93 7a00 	vldr	s14, [r3]
 800354e:	4b21      	ldr	r3, [pc, #132]	; (80035d4 <imuTest_quatUpdate+0x158>)
 8003550:	edd3 7a00 	vldr	s15, [r3]
 8003554:	eef1 7a67 	vneg.f32	s15, s15
 8003558:	4b1f      	ldr	r3, [pc, #124]	; (80035d8 <imuTest_quatUpdate+0x15c>)
 800355a:	ed93 4a00 	vldr	s8, [r3]
 800355e:	eef0 3a67 	vmov.f32	s7, s15
 8003562:	eeb0 3a47 	vmov.f32	s6, s14
 8003566:	eeb0 2a64 	vmov.f32	s4, s9
 800356a:	eef0 1a45 	vmov.f32	s3, s10
 800356e:	eeb0 1a65 	vmov.f32	s2, s11
 8003572:	eef0 0a46 	vmov.f32	s1, s12
 8003576:	eeb0 0a66 	vmov.f32	s0, s13
 800357a:	f7fe ff2f 	bl	80023dc <MadgwickQuaternionUpdate>

		lastCompute = micros();
 800357e:	f7ff fe71 	bl	8003264 <micros>
 8003582:	4602      	mov	r2, r0
 8003584:	4b03      	ldr	r3, [pc, #12]	; (8003594 <imuTest_quatUpdate+0x118>)
 8003586:	601a      	str	r2, [r3, #0]
		return true;
 8003588:	2301      	movs	r3, #1
 800358a:	e000      	b.n	800358e <imuTest_quatUpdate+0x112>
	}
	return false;
 800358c:	2300      	movs	r3, #0
}
 800358e:	4618      	mov	r0, r3
 8003590:	bd80      	pop	{r7, pc}
 8003592:	bf00      	nop
 8003594:	200008d0 	.word	0x200008d0
 8003598:	20000818 	.word	0x20000818
 800359c:	200007e8 	.word	0x200007e8
 80035a0:	49742400 	.word	0x49742400
 80035a4:	20000890 	.word	0x20000890
 80035a8:	200007d8 	.word	0x200007d8
 80035ac:	200008d8 	.word	0x200008d8
 80035b0:	2000081c 	.word	0x2000081c
 80035b4:	200008c8 	.word	0x200008c8
 80035b8:	200007e4 	.word	0x200007e4
 80035bc:	200008b8 	.word	0x200008b8
 80035c0:	40490fdb 	.word	0x40490fdb
 80035c4:	43340000 	.word	0x43340000
 80035c8:	200007e0 	.word	0x200007e0
 80035cc:	20000850 	.word	0x20000850
 80035d0:	200007f4 	.word	0x200007f4
 80035d4:	200008cc 	.word	0x200008cc
 80035d8:	20000864 	.word	0x20000864

080035dc <imuTest_getEuler>:
static void imuTest_getEuler()
{
 80035dc:	b5b0      	push	{r4, r5, r7, lr}
 80035de:	af00      	add	r7, sp, #0
	yaw   = atan2(2.0f * (q[1] * q[2] + q[0] * q[3]), q[0] * q[0] + q[1] * q[1] - q[2] * q[2] - q[3] * q[3]);
 80035e0:	4b84      	ldr	r3, [pc, #528]	; (80037f4 <imuTest_getEuler+0x218>)
 80035e2:	ed93 7a01 	vldr	s14, [r3, #4]
 80035e6:	4b83      	ldr	r3, [pc, #524]	; (80037f4 <imuTest_getEuler+0x218>)
 80035e8:	edd3 7a02 	vldr	s15, [r3, #8]
 80035ec:	ee27 7a27 	vmul.f32	s14, s14, s15
 80035f0:	4b80      	ldr	r3, [pc, #512]	; (80037f4 <imuTest_getEuler+0x218>)
 80035f2:	edd3 6a00 	vldr	s13, [r3]
 80035f6:	4b7f      	ldr	r3, [pc, #508]	; (80037f4 <imuTest_getEuler+0x218>)
 80035f8:	edd3 7a03 	vldr	s15, [r3, #12]
 80035fc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003600:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003604:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8003608:	ee17 0a90 	vmov	r0, s15
 800360c:	f7fc ff9c 	bl	8000548 <__aeabi_f2d>
 8003610:	4604      	mov	r4, r0
 8003612:	460d      	mov	r5, r1
 8003614:	4b77      	ldr	r3, [pc, #476]	; (80037f4 <imuTest_getEuler+0x218>)
 8003616:	ed93 7a00 	vldr	s14, [r3]
 800361a:	4b76      	ldr	r3, [pc, #472]	; (80037f4 <imuTest_getEuler+0x218>)
 800361c:	edd3 7a00 	vldr	s15, [r3]
 8003620:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003624:	4b73      	ldr	r3, [pc, #460]	; (80037f4 <imuTest_getEuler+0x218>)
 8003626:	edd3 6a01 	vldr	s13, [r3, #4]
 800362a:	4b72      	ldr	r3, [pc, #456]	; (80037f4 <imuTest_getEuler+0x218>)
 800362c:	edd3 7a01 	vldr	s15, [r3, #4]
 8003630:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003634:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003638:	4b6e      	ldr	r3, [pc, #440]	; (80037f4 <imuTest_getEuler+0x218>)
 800363a:	edd3 6a02 	vldr	s13, [r3, #8]
 800363e:	4b6d      	ldr	r3, [pc, #436]	; (80037f4 <imuTest_getEuler+0x218>)
 8003640:	edd3 7a02 	vldr	s15, [r3, #8]
 8003644:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003648:	ee37 7a67 	vsub.f32	s14, s14, s15
 800364c:	4b69      	ldr	r3, [pc, #420]	; (80037f4 <imuTest_getEuler+0x218>)
 800364e:	edd3 6a03 	vldr	s13, [r3, #12]
 8003652:	4b68      	ldr	r3, [pc, #416]	; (80037f4 <imuTest_getEuler+0x218>)
 8003654:	edd3 7a03 	vldr	s15, [r3, #12]
 8003658:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800365c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003660:	ee17 0a90 	vmov	r0, s15
 8003664:	f7fc ff70 	bl	8000548 <__aeabi_f2d>
 8003668:	4602      	mov	r2, r0
 800366a:	460b      	mov	r3, r1
 800366c:	ec43 2b11 	vmov	d1, r2, r3
 8003670:	ec45 4b10 	vmov	d0, r4, r5
 8003674:	f010 fbce 	bl	8013e14 <atan2>
 8003678:	ec54 3b10 	vmov	r3, r4, d0
 800367c:	4618      	mov	r0, r3
 800367e:	4621      	mov	r1, r4
 8003680:	f7fd fab2 	bl	8000be8 <__aeabi_d2f>
 8003684:	4602      	mov	r2, r0
 8003686:	4b5c      	ldr	r3, [pc, #368]	; (80037f8 <imuTest_getEuler+0x21c>)
 8003688:	601a      	str	r2, [r3, #0]
	pitch = -asin(2.0f * (q[1] * q[3] - q[0] * q[2]));
 800368a:	4b5a      	ldr	r3, [pc, #360]	; (80037f4 <imuTest_getEuler+0x218>)
 800368c:	ed93 7a01 	vldr	s14, [r3, #4]
 8003690:	4b58      	ldr	r3, [pc, #352]	; (80037f4 <imuTest_getEuler+0x218>)
 8003692:	edd3 7a03 	vldr	s15, [r3, #12]
 8003696:	ee27 7a27 	vmul.f32	s14, s14, s15
 800369a:	4b56      	ldr	r3, [pc, #344]	; (80037f4 <imuTest_getEuler+0x218>)
 800369c:	edd3 6a00 	vldr	s13, [r3]
 80036a0:	4b54      	ldr	r3, [pc, #336]	; (80037f4 <imuTest_getEuler+0x218>)
 80036a2:	edd3 7a02 	vldr	s15, [r3, #8]
 80036a6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80036aa:	ee77 7a67 	vsub.f32	s15, s14, s15
 80036ae:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80036b2:	ee17 0a90 	vmov	r0, s15
 80036b6:	f7fc ff47 	bl	8000548 <__aeabi_f2d>
 80036ba:	4603      	mov	r3, r0
 80036bc:	460c      	mov	r4, r1
 80036be:	ec44 3b10 	vmov	d0, r3, r4
 80036c2:	f010 fb4f 	bl	8013d64 <asin>
 80036c6:	ec54 3b10 	vmov	r3, r4, d0
 80036ca:	4618      	mov	r0, r3
 80036cc:	4621      	mov	r1, r4
 80036ce:	f7fd fa8b 	bl	8000be8 <__aeabi_d2f>
 80036d2:	4603      	mov	r3, r0
 80036d4:	ee07 3a90 	vmov	s15, r3
 80036d8:	eef1 7a67 	vneg.f32	s15, s15
 80036dc:	4b47      	ldr	r3, [pc, #284]	; (80037fc <imuTest_getEuler+0x220>)
 80036de:	edc3 7a00 	vstr	s15, [r3]
	roll  = atan2(2.0f * (q[0] * q[1] + q[2] * q[3]), q[0] * q[0] - q[1] * q[1] - q[2] * q[2] + q[3] * q[3]);
 80036e2:	4b44      	ldr	r3, [pc, #272]	; (80037f4 <imuTest_getEuler+0x218>)
 80036e4:	ed93 7a00 	vldr	s14, [r3]
 80036e8:	4b42      	ldr	r3, [pc, #264]	; (80037f4 <imuTest_getEuler+0x218>)
 80036ea:	edd3 7a01 	vldr	s15, [r3, #4]
 80036ee:	ee27 7a27 	vmul.f32	s14, s14, s15
 80036f2:	4b40      	ldr	r3, [pc, #256]	; (80037f4 <imuTest_getEuler+0x218>)
 80036f4:	edd3 6a02 	vldr	s13, [r3, #8]
 80036f8:	4b3e      	ldr	r3, [pc, #248]	; (80037f4 <imuTest_getEuler+0x218>)
 80036fa:	edd3 7a03 	vldr	s15, [r3, #12]
 80036fe:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003702:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003706:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800370a:	ee17 0a90 	vmov	r0, s15
 800370e:	f7fc ff1b 	bl	8000548 <__aeabi_f2d>
 8003712:	4604      	mov	r4, r0
 8003714:	460d      	mov	r5, r1
 8003716:	4b37      	ldr	r3, [pc, #220]	; (80037f4 <imuTest_getEuler+0x218>)
 8003718:	ed93 7a00 	vldr	s14, [r3]
 800371c:	4b35      	ldr	r3, [pc, #212]	; (80037f4 <imuTest_getEuler+0x218>)
 800371e:	edd3 7a00 	vldr	s15, [r3]
 8003722:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003726:	4b33      	ldr	r3, [pc, #204]	; (80037f4 <imuTest_getEuler+0x218>)
 8003728:	edd3 6a01 	vldr	s13, [r3, #4]
 800372c:	4b31      	ldr	r3, [pc, #196]	; (80037f4 <imuTest_getEuler+0x218>)
 800372e:	edd3 7a01 	vldr	s15, [r3, #4]
 8003732:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003736:	ee37 7a67 	vsub.f32	s14, s14, s15
 800373a:	4b2e      	ldr	r3, [pc, #184]	; (80037f4 <imuTest_getEuler+0x218>)
 800373c:	edd3 6a02 	vldr	s13, [r3, #8]
 8003740:	4b2c      	ldr	r3, [pc, #176]	; (80037f4 <imuTest_getEuler+0x218>)
 8003742:	edd3 7a02 	vldr	s15, [r3, #8]
 8003746:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800374a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800374e:	4b29      	ldr	r3, [pc, #164]	; (80037f4 <imuTest_getEuler+0x218>)
 8003750:	edd3 6a03 	vldr	s13, [r3, #12]
 8003754:	4b27      	ldr	r3, [pc, #156]	; (80037f4 <imuTest_getEuler+0x218>)
 8003756:	edd3 7a03 	vldr	s15, [r3, #12]
 800375a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800375e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003762:	ee17 0a90 	vmov	r0, s15
 8003766:	f7fc feef 	bl	8000548 <__aeabi_f2d>
 800376a:	4602      	mov	r2, r0
 800376c:	460b      	mov	r3, r1
 800376e:	ec43 2b11 	vmov	d1, r2, r3
 8003772:	ec45 4b10 	vmov	d0, r4, r5
 8003776:	f010 fb4d 	bl	8013e14 <atan2>
 800377a:	ec54 3b10 	vmov	r3, r4, d0
 800377e:	4618      	mov	r0, r3
 8003780:	4621      	mov	r1, r4
 8003782:	f7fd fa31 	bl	8000be8 <__aeabi_d2f>
 8003786:	4602      	mov	r2, r0
 8003788:	4b1d      	ldr	r3, [pc, #116]	; (8003800 <imuTest_getEuler+0x224>)
 800378a:	601a      	str	r2, [r3, #0]
	pitch *= 180.0f / PI;
 800378c:	4b1b      	ldr	r3, [pc, #108]	; (80037fc <imuTest_getEuler+0x220>)
 800378e:	edd3 7a00 	vldr	s15, [r3]
 8003792:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8003804 <imuTest_getEuler+0x228>
 8003796:	ee67 7a87 	vmul.f32	s15, s15, s14
 800379a:	4b18      	ldr	r3, [pc, #96]	; (80037fc <imuTest_getEuler+0x220>)
 800379c:	edc3 7a00 	vstr	s15, [r3]
	yaw   *= 180.0f / PI;
 80037a0:	4b15      	ldr	r3, [pc, #84]	; (80037f8 <imuTest_getEuler+0x21c>)
 80037a2:	edd3 7a00 	vldr	s15, [r3]
 80037a6:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8003804 <imuTest_getEuler+0x228>
 80037aa:	ee67 7a87 	vmul.f32	s15, s15, s14
 80037ae:	4b12      	ldr	r3, [pc, #72]	; (80037f8 <imuTest_getEuler+0x21c>)
 80037b0:	edc3 7a00 	vstr	s15, [r3]
	//yaw   -= 5.78f;
	roll  *= 180.0f / PI;
 80037b4:	4b12      	ldr	r3, [pc, #72]	; (8003800 <imuTest_getEuler+0x224>)
 80037b6:	edd3 7a00 	vldr	s15, [r3]
 80037ba:	ed9f 7a12 	vldr	s14, [pc, #72]	; 8003804 <imuTest_getEuler+0x228>
 80037be:	ee67 7a87 	vmul.f32	s15, s15, s14
 80037c2:	4b0f      	ldr	r3, [pc, #60]	; (8003800 <imuTest_getEuler+0x224>)
 80037c4:	edc3 7a00 	vstr	s15, [r3]
	if(yaw < 0) yaw   += 360.0f;
 80037c8:	4b0b      	ldr	r3, [pc, #44]	; (80037f8 <imuTest_getEuler+0x21c>)
 80037ca:	edd3 7a00 	vldr	s15, [r3]
 80037ce:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80037d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80037d6:	d400      	bmi.n	80037da <imuTest_getEuler+0x1fe>
}
 80037d8:	e009      	b.n	80037ee <imuTest_getEuler+0x212>
	if(yaw < 0) yaw   += 360.0f;
 80037da:	4b07      	ldr	r3, [pc, #28]	; (80037f8 <imuTest_getEuler+0x21c>)
 80037dc:	edd3 7a00 	vldr	s15, [r3]
 80037e0:	ed9f 7a09 	vldr	s14, [pc, #36]	; 8003808 <imuTest_getEuler+0x22c>
 80037e4:	ee77 7a87 	vadd.f32	s15, s15, s14
 80037e8:	4b03      	ldr	r3, [pc, #12]	; (80037f8 <imuTest_getEuler+0x21c>)
 80037ea:	edc3 7a00 	vstr	s15, [r3]
}
 80037ee:	bf00      	nop
 80037f0:	bdb0      	pop	{r4, r5, r7, pc}
 80037f2:	bf00      	nop
 80037f4:	200008a8 	.word	0x200008a8
 80037f8:	20000878 	.word	0x20000878
 80037fc:	20000884 	.word	0x20000884
 8003800:	20000888 	.word	0x20000888
 8003804:	42652ee0 	.word	0x42652ee0
 8003808:	43b40000 	.word	0x43b40000
 800380c:	00000000 	.word	0x00000000

08003810 <imuTest_begin>:
		lastPrint = millis();
	}
}

static bool imuTest_begin(void)
{
 8003810:	b590      	push	{r4, r7, lr}
 8003812:	b083      	sub	sp, #12
 8003814:	af00      	add	r7, sp, #0
	println("imuTest start!");
 8003816:	48c4      	ldr	r0, [pc, #784]	; (8003b28 <imuTest_begin+0x318>)
 8003818:	f7ff fca0 	bl	800315c <println>
	GyroMeasError = PI * (60.0f / 180.0f);
 800381c:	4bc3      	ldr	r3, [pc, #780]	; (8003b2c <imuTest_begin+0x31c>)
 800381e:	4ac4      	ldr	r2, [pc, #784]	; (8003b30 <imuTest_begin+0x320>)
 8003820:	601a      	str	r2, [r3, #0]
	beta = sqrt(3.0f / 4.0f) * GyroMeasError;
 8003822:	4bc2      	ldr	r3, [pc, #776]	; (8003b2c <imuTest_begin+0x31c>)
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	4618      	mov	r0, r3
 8003828:	f7fc fe8e 	bl	8000548 <__aeabi_f2d>
 800382c:	a3bc      	add	r3, pc, #752	; (adr r3, 8003b20 <imuTest_begin+0x310>)
 800382e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003832:	f7fc fee1 	bl	80005f8 <__aeabi_dmul>
 8003836:	4603      	mov	r3, r0
 8003838:	460c      	mov	r4, r1
 800383a:	4618      	mov	r0, r3
 800383c:	4621      	mov	r1, r4
 800383e:	f7fd f9d3 	bl	8000be8 <__aeabi_d2f>
 8003842:	4602      	mov	r2, r0
 8003844:	4bbb      	ldr	r3, [pc, #748]	; (8003b34 <imuTest_begin+0x324>)
 8003846:	601a      	str	r2, [r3, #0]
	GyroMeasDrift = PI * (1.0f / 180.0f);
 8003848:	4bbb      	ldr	r3, [pc, #748]	; (8003b38 <imuTest_begin+0x328>)
 800384a:	4abc      	ldr	r2, [pc, #752]	; (8003b3c <imuTest_begin+0x32c>)
 800384c:	601a      	str	r2, [r3, #0]
	zeta = sqrt(3.0f / 4.0f) * GyroMeasDrift;
 800384e:	4bba      	ldr	r3, [pc, #744]	; (8003b38 <imuTest_begin+0x328>)
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	4618      	mov	r0, r3
 8003854:	f7fc fe78 	bl	8000548 <__aeabi_f2d>
 8003858:	a3b1      	add	r3, pc, #708	; (adr r3, 8003b20 <imuTest_begin+0x310>)
 800385a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800385e:	f7fc fecb 	bl	80005f8 <__aeabi_dmul>
 8003862:	4603      	mov	r3, r0
 8003864:	460c      	mov	r4, r1
 8003866:	4618      	mov	r0, r3
 8003868:	4621      	mov	r1, r4
 800386a:	f7fd f9bd 	bl	8000be8 <__aeabi_d2f>
 800386e:	4602      	mov	r2, r0
 8003870:	4bb3      	ldr	r3, [pc, #716]	; (8003b40 <imuTest_begin+0x330>)
 8003872:	601a      	str	r2, [r3, #0]

	AAscale = AFS_2G;
 8003874:	4bb3      	ldr	r3, [pc, #716]	; (8003b44 <imuTest_begin+0x334>)
 8003876:	2200      	movs	r2, #0
 8003878:	701a      	strb	r2, [r3, #0]
	GGscale = GFS_250DPS;
 800387a:	4bb3      	ldr	r3, [pc, #716]	; (8003b48 <imuTest_begin+0x338>)
 800387c:	2200      	movs	r2, #0
 800387e:	701a      	strb	r2, [r3, #0]
	MMscale = MFS_16BITS;
 8003880:	4bb2      	ldr	r3, [pc, #712]	; (8003b4c <imuTest_begin+0x33c>)
 8003882:	2201      	movs	r2, #1
 8003884:	701a      	strb	r2, [r3, #0]
	Mmode = 0x06;
 8003886:	4bb2      	ldr	r3, [pc, #712]	; (8003b50 <imuTest_begin+0x340>)
 8003888:	2206      	movs	r2, #6
 800388a:	701a      	strb	r2, [r3, #0]
	magCalibration[0] = 0;
 800388c:	4bb1      	ldr	r3, [pc, #708]	; (8003b54 <imuTest_begin+0x344>)
 800388e:	f04f 0200 	mov.w	r2, #0
 8003892:	601a      	str	r2, [r3, #0]
	magCalibration[1] = 0;
 8003894:	4baf      	ldr	r3, [pc, #700]	; (8003b54 <imuTest_begin+0x344>)
 8003896:	f04f 0200 	mov.w	r2, #0
 800389a:	605a      	str	r2, [r3, #4]
	magCalibration[2] = 0;
 800389c:	4bad      	ldr	r3, [pc, #692]	; (8003b54 <imuTest_begin+0x344>)
 800389e:	f04f 0200 	mov.w	r2, #0
 80038a2:	609a      	str	r2, [r3, #8]
	magbias[0] = 0;
 80038a4:	4bac      	ldr	r3, [pc, #688]	; (8003b58 <imuTest_begin+0x348>)
 80038a6:	f04f 0200 	mov.w	r2, #0
 80038aa:	601a      	str	r2, [r3, #0]
	magbias[1] = 0;
 80038ac:	4baa      	ldr	r3, [pc, #680]	; (8003b58 <imuTest_begin+0x348>)
 80038ae:	f04f 0200 	mov.w	r2, #0
 80038b2:	605a      	str	r2, [r3, #4]
	magbias[2] = 0;
 80038b4:	4ba8      	ldr	r3, [pc, #672]	; (8003b58 <imuTest_begin+0x348>)
 80038b6:	f04f 0200 	mov.w	r2, #0
 80038ba:	609a      	str	r2, [r3, #8]
	delt_t = 0;
 80038bc:	4ba7      	ldr	r3, [pc, #668]	; (8003b5c <imuTest_begin+0x34c>)
 80038be:	2200      	movs	r2, #0
 80038c0:	601a      	str	r2, [r3, #0]
	count = 0;
 80038c2:	4ba7      	ldr	r3, [pc, #668]	; (8003b60 <imuTest_begin+0x350>)
 80038c4:	2200      	movs	r2, #0
 80038c6:	601a      	str	r2, [r3, #0]
	deltat = 0.0f;
 80038c8:	4ba6      	ldr	r3, [pc, #664]	; (8003b64 <imuTest_begin+0x354>)
 80038ca:	f04f 0200 	mov.w	r2, #0
 80038ce:	601a      	str	r2, [r3, #0]
	lastUpdate = 0;
 80038d0:	4ba5      	ldr	r3, [pc, #660]	; (8003b68 <imuTest_begin+0x358>)
 80038d2:	2200      	movs	r2, #0
 80038d4:	601a      	str	r2, [r3, #0]
	firstUpdate = 0;
 80038d6:	4ba5      	ldr	r3, [pc, #660]	; (8003b6c <imuTest_begin+0x35c>)
 80038d8:	2200      	movs	r2, #0
 80038da:	601a      	str	r2, [r3, #0]
	Now = 0;
 80038dc:	4ba4      	ldr	r3, [pc, #656]	; (8003b70 <imuTest_begin+0x360>)
 80038de:	2200      	movs	r2, #0
 80038e0:	601a      	str	r2, [r3, #0]
	q[0] = 1.0f;
 80038e2:	4ba4      	ldr	r3, [pc, #656]	; (8003b74 <imuTest_begin+0x364>)
 80038e4:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80038e8:	601a      	str	r2, [r3, #0]
	q[1] = 0.0f;
 80038ea:	4ba2      	ldr	r3, [pc, #648]	; (8003b74 <imuTest_begin+0x364>)
 80038ec:	f04f 0200 	mov.w	r2, #0
 80038f0:	605a      	str	r2, [r3, #4]
	q[2] = 0.0f;
 80038f2:	4ba0      	ldr	r3, [pc, #640]	; (8003b74 <imuTest_begin+0x364>)
 80038f4:	f04f 0200 	mov.w	r2, #0
 80038f8:	609a      	str	r2, [r3, #8]
	q[3] = 0.0f;
 80038fa:	4b9e      	ldr	r3, [pc, #632]	; (8003b74 <imuTest_begin+0x364>)
 80038fc:	f04f 0200 	mov.w	r2, #0
 8003900:	60da      	str	r2, [r3, #12]
	eInt[0] = 0.0f;
 8003902:	4b9d      	ldr	r3, [pc, #628]	; (8003b78 <imuTest_begin+0x368>)
 8003904:	f04f 0200 	mov.w	r2, #0
 8003908:	601a      	str	r2, [r3, #0]
	eInt[1] = 0.0f;
 800390a:	4b9b      	ldr	r3, [pc, #620]	; (8003b78 <imuTest_begin+0x368>)
 800390c:	f04f 0200 	mov.w	r2, #0
 8003910:	605a      	str	r2, [r3, #4]
	eInt[2] = 0.0f;
 8003912:	4b99      	ldr	r3, [pc, #612]	; (8003b78 <imuTest_begin+0x368>)
 8003914:	f04f 0200 	mov.w	r2, #0
 8003918:	609a      	str	r2, [r3, #8]


	if (MPU_present())
 800391a:	f7fd fcbb 	bl	8001294 <MPU_present>
 800391e:	4603      	mov	r3, r0
 8003920:	2b00      	cmp	r3, #0
 8003922:	f000 818a 	beq.w	8003c3a <imuTest_begin+0x42a>
	{
		HAL_Delay(1000);
 8003926:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800392a:	f001 fca1 	bl	8005270 <HAL_Delay>
		MPU_SelfTest(SelfTest); // Start by performing self test and reporting values
 800392e:	4893      	ldr	r0, [pc, #588]	; (8003b7c <imuTest_begin+0x36c>)
 8003930:	f7fe f8c6 	bl	8001ac0 <MPU_SelfTest>
		println("MPU9250 Self Test:");
 8003934:	4892      	ldr	r0, [pc, #584]	; (8003b80 <imuTest_begin+0x370>)
 8003936:	f7ff fc11 	bl	800315c <println>
		print("x-axis self test: acceleration trim within : "); print_float(SelfTest[0]); println("% of factory value");
 800393a:	4892      	ldr	r0, [pc, #584]	; (8003b84 <imuTest_begin+0x374>)
 800393c:	f7ff fbec 	bl	8003118 <print>
 8003940:	4b8e      	ldr	r3, [pc, #568]	; (8003b7c <imuTest_begin+0x36c>)
 8003942:	edd3 7a00 	vldr	s15, [r3]
 8003946:	eeb0 0a67 	vmov.f32	s0, s15
 800394a:	f7ff fc55 	bl	80031f8 <print_float>
 800394e:	488e      	ldr	r0, [pc, #568]	; (8003b88 <imuTest_begin+0x378>)
 8003950:	f7ff fc04 	bl	800315c <println>
		print("y-axis self test: acceleration trim within : "); print_float(SelfTest[1]); println("% of factory value");
 8003954:	488d      	ldr	r0, [pc, #564]	; (8003b8c <imuTest_begin+0x37c>)
 8003956:	f7ff fbdf 	bl	8003118 <print>
 800395a:	4b88      	ldr	r3, [pc, #544]	; (8003b7c <imuTest_begin+0x36c>)
 800395c:	edd3 7a01 	vldr	s15, [r3, #4]
 8003960:	eeb0 0a67 	vmov.f32	s0, s15
 8003964:	f7ff fc48 	bl	80031f8 <print_float>
 8003968:	4887      	ldr	r0, [pc, #540]	; (8003b88 <imuTest_begin+0x378>)
 800396a:	f7ff fbf7 	bl	800315c <println>
		print("z-axis self test: acceleration trim within : "); print_float(SelfTest[2]); println("% of factory value");
 800396e:	4888      	ldr	r0, [pc, #544]	; (8003b90 <imuTest_begin+0x380>)
 8003970:	f7ff fbd2 	bl	8003118 <print>
 8003974:	4b81      	ldr	r3, [pc, #516]	; (8003b7c <imuTest_begin+0x36c>)
 8003976:	edd3 7a02 	vldr	s15, [r3, #8]
 800397a:	eeb0 0a67 	vmov.f32	s0, s15
 800397e:	f7ff fc3b 	bl	80031f8 <print_float>
 8003982:	4881      	ldr	r0, [pc, #516]	; (8003b88 <imuTest_begin+0x378>)
 8003984:	f7ff fbea 	bl	800315c <println>
		print("x-axis self test: gyration trim within : "); print_float(SelfTest[3]); println("% of factory value");
 8003988:	4882      	ldr	r0, [pc, #520]	; (8003b94 <imuTest_begin+0x384>)
 800398a:	f7ff fbc5 	bl	8003118 <print>
 800398e:	4b7b      	ldr	r3, [pc, #492]	; (8003b7c <imuTest_begin+0x36c>)
 8003990:	edd3 7a03 	vldr	s15, [r3, #12]
 8003994:	eeb0 0a67 	vmov.f32	s0, s15
 8003998:	f7ff fc2e 	bl	80031f8 <print_float>
 800399c:	487a      	ldr	r0, [pc, #488]	; (8003b88 <imuTest_begin+0x378>)
 800399e:	f7ff fbdd 	bl	800315c <println>
		print("y-axis self test: gyration trim within : "); print_float(SelfTest[4]); println("% of factory value");
 80039a2:	487d      	ldr	r0, [pc, #500]	; (8003b98 <imuTest_begin+0x388>)
 80039a4:	f7ff fbb8 	bl	8003118 <print>
 80039a8:	4b74      	ldr	r3, [pc, #464]	; (8003b7c <imuTest_begin+0x36c>)
 80039aa:	edd3 7a04 	vldr	s15, [r3, #16]
 80039ae:	eeb0 0a67 	vmov.f32	s0, s15
 80039b2:	f7ff fc21 	bl	80031f8 <print_float>
 80039b6:	4874      	ldr	r0, [pc, #464]	; (8003b88 <imuTest_begin+0x378>)
 80039b8:	f7ff fbd0 	bl	800315c <println>
		print("z-axis self test: gyration trim within : "); print_float(SelfTest[5]); println("% of factory value");
 80039bc:	4877      	ldr	r0, [pc, #476]	; (8003b9c <imuTest_begin+0x38c>)
 80039be:	f7ff fbab 	bl	8003118 <print>
 80039c2:	4b6e      	ldr	r3, [pc, #440]	; (8003b7c <imuTest_begin+0x36c>)
 80039c4:	edd3 7a05 	vldr	s15, [r3, #20]
 80039c8:	eeb0 0a67 	vmov.f32	s0, s15
 80039cc:	f7ff fc14 	bl	80031f8 <print_float>
 80039d0:	486d      	ldr	r0, [pc, #436]	; (8003b88 <imuTest_begin+0x378>)
 80039d2:	f7ff fbc3 	bl	800315c <println>
		HAL_Delay(1000);
 80039d6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80039da:	f001 fc49 	bl	8005270 <HAL_Delay>

		// get sensor resolutions, only need to do this once
		MPU_getAres();
 80039de:	f7fd fb95 	bl	800110c <MPU_getAres>
		MPU_getGres();
 80039e2:	f7fd fb5f 	bl	80010a4 <MPU_getGres>
		MPU_getMres();
 80039e6:	f7fd fb3f 	bl	8001068 <MPU_getMres>

		println(" Calibrate MPU9250 gyro and accel");
 80039ea:	486d      	ldr	r0, [pc, #436]	; (8003ba0 <imuTest_begin+0x390>)
 80039ec:	f7ff fbb6 	bl	800315c <println>
		MPU_calibrate(MPU9250gyroBias, MPU9250accelBias); // Calibrate gyro and accelerometers, load biases in bias registers
 80039f0:	496c      	ldr	r1, [pc, #432]	; (8003ba4 <imuTest_begin+0x394>)
 80039f2:	486d      	ldr	r0, [pc, #436]	; (8003ba8 <imuTest_begin+0x398>)
 80039f4:	f7fd fdd8 	bl	80015a8 <MPU_calibrate>
		println("accel biases (mg)");
 80039f8:	486c      	ldr	r0, [pc, #432]	; (8003bac <imuTest_begin+0x39c>)
 80039fa:	f7ff fbaf 	bl	800315c <println>
		print_float(1000.0 * MPU9250accelBias[0]); println("");
 80039fe:	4b69      	ldr	r3, [pc, #420]	; (8003ba4 <imuTest_begin+0x394>)
 8003a00:	edd3 7a00 	vldr	s15, [r3]
 8003a04:	ed9f 7a6a 	vldr	s14, [pc, #424]	; 8003bb0 <imuTest_begin+0x3a0>
 8003a08:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003a0c:	eeb0 0a67 	vmov.f32	s0, s15
 8003a10:	f7ff fbf2 	bl	80031f8 <print_float>
 8003a14:	4867      	ldr	r0, [pc, #412]	; (8003bb4 <imuTest_begin+0x3a4>)
 8003a16:	f7ff fba1 	bl	800315c <println>
		print_float(1000.0 * MPU9250accelBias[1]); println("");
 8003a1a:	4b62      	ldr	r3, [pc, #392]	; (8003ba4 <imuTest_begin+0x394>)
 8003a1c:	edd3 7a01 	vldr	s15, [r3, #4]
 8003a20:	ed9f 7a63 	vldr	s14, [pc, #396]	; 8003bb0 <imuTest_begin+0x3a0>
 8003a24:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003a28:	eeb0 0a67 	vmov.f32	s0, s15
 8003a2c:	f7ff fbe4 	bl	80031f8 <print_float>
 8003a30:	4860      	ldr	r0, [pc, #384]	; (8003bb4 <imuTest_begin+0x3a4>)
 8003a32:	f7ff fb93 	bl	800315c <println>
		print_float(1000.0 * MPU9250accelBias[2]); println("");
 8003a36:	4b5b      	ldr	r3, [pc, #364]	; (8003ba4 <imuTest_begin+0x394>)
 8003a38:	edd3 7a02 	vldr	s15, [r3, #8]
 8003a3c:	ed9f 7a5c 	vldr	s14, [pc, #368]	; 8003bb0 <imuTest_begin+0x3a0>
 8003a40:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003a44:	eeb0 0a67 	vmov.f32	s0, s15
 8003a48:	f7ff fbd6 	bl	80031f8 <print_float>
 8003a4c:	4859      	ldr	r0, [pc, #356]	; (8003bb4 <imuTest_begin+0x3a4>)
 8003a4e:	f7ff fb85 	bl	800315c <println>
		println("gyro biases (dps)");
 8003a52:	4859      	ldr	r0, [pc, #356]	; (8003bb8 <imuTest_begin+0x3a8>)
 8003a54:	f7ff fb82 	bl	800315c <println>
		print_float(MPU9250gyroBias[0]); println("");
 8003a58:	4b53      	ldr	r3, [pc, #332]	; (8003ba8 <imuTest_begin+0x398>)
 8003a5a:	edd3 7a00 	vldr	s15, [r3]
 8003a5e:	eeb0 0a67 	vmov.f32	s0, s15
 8003a62:	f7ff fbc9 	bl	80031f8 <print_float>
 8003a66:	4853      	ldr	r0, [pc, #332]	; (8003bb4 <imuTest_begin+0x3a4>)
 8003a68:	f7ff fb78 	bl	800315c <println>
		print_float(MPU9250gyroBias[1]); println("");
 8003a6c:	4b4e      	ldr	r3, [pc, #312]	; (8003ba8 <imuTest_begin+0x398>)
 8003a6e:	edd3 7a01 	vldr	s15, [r3, #4]
 8003a72:	eeb0 0a67 	vmov.f32	s0, s15
 8003a76:	f7ff fbbf 	bl	80031f8 <print_float>
 8003a7a:	484e      	ldr	r0, [pc, #312]	; (8003bb4 <imuTest_begin+0x3a4>)
 8003a7c:	f7ff fb6e 	bl	800315c <println>
		print_float(MPU9250gyroBias[2]); println("");
 8003a80:	4b49      	ldr	r3, [pc, #292]	; (8003ba8 <imuTest_begin+0x398>)
 8003a82:	edd3 7a02 	vldr	s15, [r3, #8]
 8003a86:	eeb0 0a67 	vmov.f32	s0, s15
 8003a8a:	f7ff fbb5 	bl	80031f8 <print_float>
 8003a8e:	4849      	ldr	r0, [pc, #292]	; (8003bb4 <imuTest_begin+0x3a4>)
 8003a90:	f7ff fb64 	bl	800315c <println>

		HAL_Delay(1000);
 8003a94:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003a98:	f001 fbea 	bl	8005270 <HAL_Delay>

		MPU_init();
 8003a9c:	f7fd fc1c 	bl	80012d8 <MPU_init>
		println("MPU9250 initialized for active data mode...."); // Initialize device for active mode read of acclerometer, gyroscope, and temperature
 8003aa0:	4846      	ldr	r0, [pc, #280]	; (8003bbc <imuTest_begin+0x3ac>)
 8003aa2:	f7ff fb5b 	bl	800315c <println>

		// Read the WHO_AM_I register of the magnetometer, this is a good test of communication
		char d = MPU_readByte(AK8963_ADDRESS, AK8963_WHO_AM_I);  // Read WHO_AM_I register for AK8963
 8003aa6:	2100      	movs	r1, #0
 8003aa8:	2018      	movs	r0, #24
 8003aaa:	f7fd fa89 	bl	8000fc0 <MPU_readByte>
 8003aae:	4603      	mov	r3, r0
 8003ab0:	71fb      	strb	r3, [r7, #7]
		if (d == 0x48) println("[MAG] SUCCESSS!!!!");
 8003ab2:	79fb      	ldrb	r3, [r7, #7]
 8003ab4:	2b48      	cmp	r3, #72	; 0x48
 8003ab6:	d102      	bne.n	8003abe <imuTest_begin+0x2ae>
 8003ab8:	4841      	ldr	r0, [pc, #260]	; (8003bc0 <imuTest_begin+0x3b0>)
 8003aba:	f7ff fb4f 	bl	800315c <println>

		HAL_GPIO_WritePin(LEDA_GPIO_Port, LEDA_Pin, GPIO_PIN_SET);
 8003abe:	2201      	movs	r2, #1
 8003ac0:	2180      	movs	r1, #128	; 0x80
 8003ac2:	4840      	ldr	r0, [pc, #256]	; (8003bc4 <imuTest_begin+0x3b4>)
 8003ac4:	f002 fa56 	bl	8005f74 <HAL_GPIO_WritePin>

		HAL_Delay(1000);
 8003ac8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003acc:	f001 fbd0 	bl	8005270 <HAL_Delay>

		// Get magnetometer calibration from AK8963 ROM
		AK8963_init(magCalibration); println("AK8963 initialized for active data mode...."); // Initialize device for active mode read of magnetometer
 8003ad0:	4820      	ldr	r0, [pc, #128]	; (8003b54 <imuTest_begin+0x344>)
 8003ad2:	f7fd fce9 	bl	80014a8 <AK8963_init>
 8003ad6:	483c      	ldr	r0, [pc, #240]	; (8003bc8 <imuTest_begin+0x3b8>)
 8003ad8:	f7ff fb40 	bl	800315c <println>

		MPU_calibrateMag(MPU9250magBias);
 8003adc:	483b      	ldr	r0, [pc, #236]	; (8003bcc <imuTest_begin+0x3bc>)
 8003ade:	f7fe fb95 	bl	800220c <MPU_calibrateMag>
		println("AK8963 mag biases (mG)");
 8003ae2:	483b      	ldr	r0, [pc, #236]	; (8003bd0 <imuTest_begin+0x3c0>)
 8003ae4:	f7ff fb3a 	bl	800315c <println>
		print_float(MPU9250magBias[0]); println("");
 8003ae8:	4b38      	ldr	r3, [pc, #224]	; (8003bcc <imuTest_begin+0x3bc>)
 8003aea:	edd3 7a00 	vldr	s15, [r3]
 8003aee:	eeb0 0a67 	vmov.f32	s0, s15
 8003af2:	f7ff fb81 	bl	80031f8 <print_float>
 8003af6:	482f      	ldr	r0, [pc, #188]	; (8003bb4 <imuTest_begin+0x3a4>)
 8003af8:	f7ff fb30 	bl	800315c <println>
		print_float(MPU9250magBias[1]); println("");
 8003afc:	4b33      	ldr	r3, [pc, #204]	; (8003bcc <imuTest_begin+0x3bc>)
 8003afe:	edd3 7a01 	vldr	s15, [r3, #4]
 8003b02:	eeb0 0a67 	vmov.f32	s0, s15
 8003b06:	f7ff fb77 	bl	80031f8 <print_float>
 8003b0a:	482a      	ldr	r0, [pc, #168]	; (8003bb4 <imuTest_begin+0x3a4>)
 8003b0c:	f7ff fb26 	bl	800315c <println>
		print_float(MPU9250magBias[2]); println("");
 8003b10:	4b2e      	ldr	r3, [pc, #184]	; (8003bcc <imuTest_begin+0x3bc>)
 8003b12:	edd3 7a02 	vldr	s15, [r3, #8]
 8003b16:	eeb0 0a67 	vmov.f32	s0, s15
 8003b1a:	f7ff fb6d 	bl	80031f8 <print_float>
 8003b1e:	e059      	b.n	8003bd4 <imuTest_begin+0x3c4>
 8003b20:	e8584caa 	.word	0xe8584caa
 8003b24:	3febb67a 	.word	0x3febb67a
 8003b28:	080158f0 	.word	0x080158f0
 8003b2c:	20000828 	.word	0x20000828
 8003b30:	3f860a92 	.word	0x3f860a92
 8003b34:	2000085c 	.word	0x2000085c
 8003b38:	200007b0 	.word	0x200007b0
 8003b3c:	3c8efa36 	.word	0x3c8efa36
 8003b40:	200008d4 	.word	0x200008d4
 8003b44:	200007dc 	.word	0x200007dc
 8003b48:	200007a2 	.word	0x200007a2
 8003b4c:	2000082c 	.word	0x2000082c
 8003b50:	20000804 	.word	0x20000804
 8003b54:	200008bc 	.word	0x200008bc
 8003b58:	20000808 	.word	0x20000808
 8003b5c:	20000854 	.word	0x20000854
 8003b60:	2000084c 	.word	0x2000084c
 8003b64:	20000890 	.word	0x20000890
 8003b68:	200007e8 	.word	0x200007e8
 8003b6c:	20000898 	.word	0x20000898
 8003b70:	20000818 	.word	0x20000818
 8003b74:	200008a8 	.word	0x200008a8
 8003b78:	200007f8 	.word	0x200007f8
 8003b7c:	200007b4 	.word	0x200007b4
 8003b80:	08015900 	.word	0x08015900
 8003b84:	08015914 	.word	0x08015914
 8003b88:	08015944 	.word	0x08015944
 8003b8c:	08015958 	.word	0x08015958
 8003b90:	08015988 	.word	0x08015988
 8003b94:	080159b8 	.word	0x080159b8
 8003b98:	080159e4 	.word	0x080159e4
 8003b9c:	08015a10 	.word	0x08015a10
 8003ba0:	08015a3c 	.word	0x08015a3c
 8003ba4:	200007a4 	.word	0x200007a4
 8003ba8:	2000086c 	.word	0x2000086c
 8003bac:	08015a60 	.word	0x08015a60
 8003bb0:	447a0000 	.word	0x447a0000
 8003bb4:	08015a74 	.word	0x08015a74
 8003bb8:	08015a78 	.word	0x08015a78
 8003bbc:	08015a8c 	.word	0x08015a8c
 8003bc0:	08015abc 	.word	0x08015abc
 8003bc4:	40020800 	.word	0x40020800
 8003bc8:	08015ad0 	.word	0x08015ad0
 8003bcc:	20000834 	.word	0x20000834
 8003bd0:	08015afc 	.word	0x08015afc
 8003bd4:	481b      	ldr	r0, [pc, #108]	; (8003c44 <imuTest_begin+0x434>)
 8003bd6:	f7ff fac1 	bl	800315c <println>
		HAL_Delay(2000); // add delay to see results before serial spew of data
 8003bda:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8003bde:	f001 fb47 	bl	8005270 <HAL_Delay>

		print("[MAG] X-Axis sensitivity adjustment value "); print_float(magCalibration[0]); println("");
 8003be2:	4819      	ldr	r0, [pc, #100]	; (8003c48 <imuTest_begin+0x438>)
 8003be4:	f7ff fa98 	bl	8003118 <print>
 8003be8:	4b18      	ldr	r3, [pc, #96]	; (8003c4c <imuTest_begin+0x43c>)
 8003bea:	edd3 7a00 	vldr	s15, [r3]
 8003bee:	eeb0 0a67 	vmov.f32	s0, s15
 8003bf2:	f7ff fb01 	bl	80031f8 <print_float>
 8003bf6:	4813      	ldr	r0, [pc, #76]	; (8003c44 <imuTest_begin+0x434>)
 8003bf8:	f7ff fab0 	bl	800315c <println>
		print("[MAG] Y-Axis sensitivity adjustment value "); print_float(magCalibration[1]); println("");
 8003bfc:	4814      	ldr	r0, [pc, #80]	; (8003c50 <imuTest_begin+0x440>)
 8003bfe:	f7ff fa8b 	bl	8003118 <print>
 8003c02:	4b12      	ldr	r3, [pc, #72]	; (8003c4c <imuTest_begin+0x43c>)
 8003c04:	edd3 7a01 	vldr	s15, [r3, #4]
 8003c08:	eeb0 0a67 	vmov.f32	s0, s15
 8003c0c:	f7ff faf4 	bl	80031f8 <print_float>
 8003c10:	480c      	ldr	r0, [pc, #48]	; (8003c44 <imuTest_begin+0x434>)
 8003c12:	f7ff faa3 	bl	800315c <println>
		print("[MAG] Z-Axis sensitivity adjustment value "); print_float(magCalibration[2]); println("");
 8003c16:	480f      	ldr	r0, [pc, #60]	; (8003c54 <imuTest_begin+0x444>)
 8003c18:	f7ff fa7e 	bl	8003118 <print>
 8003c1c:	4b0b      	ldr	r3, [pc, #44]	; (8003c4c <imuTest_begin+0x43c>)
 8003c1e:	edd3 7a02 	vldr	s15, [r3, #8]
 8003c22:	eeb0 0a67 	vmov.f32	s0, s15
 8003c26:	f7ff fae7 	bl	80031f8 <print_float>
 8003c2a:	4806      	ldr	r0, [pc, #24]	; (8003c44 <imuTest_begin+0x434>)
 8003c2c:	f7ff fa96 	bl	800315c <println>


		HAL_GPIO_WritePin(LEDA_GPIO_Port, LEDA_Pin, GPIO_PIN_RESET);
 8003c30:	2200      	movs	r2, #0
 8003c32:	2180      	movs	r1, #128	; 0x80
 8003c34:	4808      	ldr	r0, [pc, #32]	; (8003c58 <imuTest_begin+0x448>)
 8003c36:	f002 f99d 	bl	8005f74 <HAL_GPIO_WritePin>
	}
}
 8003c3a:	bf00      	nop
 8003c3c:	4618      	mov	r0, r3
 8003c3e:	370c      	adds	r7, #12
 8003c40:	46bd      	mov	sp, r7
 8003c42:	bd90      	pop	{r4, r7, pc}
 8003c44:	08015a74 	.word	0x08015a74
 8003c48:	08015b14 	.word	0x08015b14
 8003c4c:	200008bc 	.word	0x200008bc
 8003c50:	08015b40 	.word	0x08015b40
 8003c54:	08015b6c 	.word	0x08015b6c
 8003c58:	40020800 	.word	0x40020800
 8003c5c:	00000000 	.word	0x00000000

08003c60 <algoGalgo>:
#include <stdbool.h>

#include "motors.h"

static void algoGalgo(float yaw)
{
 8003c60:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003c62:	b085      	sub	sp, #20
 8003c64:	af00      	add	r7, sp, #0
 8003c66:	ed87 0a01 	vstr	s0, [r7, #4]
	float maxPower = 0.8;	// scale of motor power
 8003c6a:	4b37      	ldr	r3, [pc, #220]	; (8003d48 <algoGalgo+0xe8>)
 8003c6c:	60fb      	str	r3, [r7, #12]
	// Aim center: yaw = 180*

	setMotors(yaw * maxPower * (1.0 / 360.0), (360.0 - yaw) * maxPower * (1.0 / 360.0));
 8003c6e:	ed97 7a01 	vldr	s14, [r7, #4]
 8003c72:	edd7 7a03 	vldr	s15, [r7, #12]
 8003c76:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003c7a:	ee17 0a90 	vmov	r0, s15
 8003c7e:	f7fc fc63 	bl	8000548 <__aeabi_f2d>
 8003c82:	a32f      	add	r3, pc, #188	; (adr r3, 8003d40 <algoGalgo+0xe0>)
 8003c84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c88:	f7fc fcb6 	bl	80005f8 <__aeabi_dmul>
 8003c8c:	4603      	mov	r3, r0
 8003c8e:	460c      	mov	r4, r1
 8003c90:	4618      	mov	r0, r3
 8003c92:	4621      	mov	r1, r4
 8003c94:	f7fc ffa8 	bl	8000be8 <__aeabi_d2f>
 8003c98:	4606      	mov	r6, r0
 8003c9a:	6878      	ldr	r0, [r7, #4]
 8003c9c:	f7fc fc54 	bl	8000548 <__aeabi_f2d>
 8003ca0:	4603      	mov	r3, r0
 8003ca2:	460c      	mov	r4, r1
 8003ca4:	461a      	mov	r2, r3
 8003ca6:	4623      	mov	r3, r4
 8003ca8:	f04f 0000 	mov.w	r0, #0
 8003cac:	4927      	ldr	r1, [pc, #156]	; (8003d4c <algoGalgo+0xec>)
 8003cae:	f7fc faeb 	bl	8000288 <__aeabi_dsub>
 8003cb2:	4603      	mov	r3, r0
 8003cb4:	460c      	mov	r4, r1
 8003cb6:	4625      	mov	r5, r4
 8003cb8:	461c      	mov	r4, r3
 8003cba:	68f8      	ldr	r0, [r7, #12]
 8003cbc:	f7fc fc44 	bl	8000548 <__aeabi_f2d>
 8003cc0:	4602      	mov	r2, r0
 8003cc2:	460b      	mov	r3, r1
 8003cc4:	4620      	mov	r0, r4
 8003cc6:	4629      	mov	r1, r5
 8003cc8:	f7fc fc96 	bl	80005f8 <__aeabi_dmul>
 8003ccc:	4603      	mov	r3, r0
 8003cce:	460c      	mov	r4, r1
 8003cd0:	4618      	mov	r0, r3
 8003cd2:	4621      	mov	r1, r4
 8003cd4:	a31a      	add	r3, pc, #104	; (adr r3, 8003d40 <algoGalgo+0xe0>)
 8003cd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cda:	f7fc fc8d 	bl	80005f8 <__aeabi_dmul>
 8003cde:	4603      	mov	r3, r0
 8003ce0:	460c      	mov	r4, r1
 8003ce2:	4618      	mov	r0, r3
 8003ce4:	4621      	mov	r1, r4
 8003ce6:	f7fc ff7f 	bl	8000be8 <__aeabi_d2f>
 8003cea:	4603      	mov	r3, r0
 8003cec:	ee00 3a90 	vmov	s1, r3
 8003cf0:	ee00 6a10 	vmov	s0, r6
 8003cf4:	f000 f890 	bl	8003e18 <setMotors>

	// Shines purple LED if centered
	if (yaw >= 178.0 && yaw <= 182.0) HAL_GPIO_WritePin(LEDA_GPIO_Port, LEDA_Pin, GPIO_PIN_SET);
 8003cf8:	edd7 7a01 	vldr	s15, [r7, #4]
 8003cfc:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8003d50 <algoGalgo+0xf0>
 8003d00:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003d04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d08:	db0e      	blt.n	8003d28 <algoGalgo+0xc8>
 8003d0a:	edd7 7a01 	vldr	s15, [r7, #4]
 8003d0e:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8003d54 <algoGalgo+0xf4>
 8003d12:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003d16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d1a:	d805      	bhi.n	8003d28 <algoGalgo+0xc8>
 8003d1c:	2201      	movs	r2, #1
 8003d1e:	2180      	movs	r1, #128	; 0x80
 8003d20:	480d      	ldr	r0, [pc, #52]	; (8003d58 <algoGalgo+0xf8>)
 8003d22:	f002 f927 	bl	8005f74 <HAL_GPIO_WritePin>
 8003d26:	e004      	b.n	8003d32 <algoGalgo+0xd2>
	else HAL_GPIO_WritePin(LEDA_GPIO_Port, LEDA_Pin, GPIO_PIN_RESET);
 8003d28:	2200      	movs	r2, #0
 8003d2a:	2180      	movs	r1, #128	; 0x80
 8003d2c:	480a      	ldr	r0, [pc, #40]	; (8003d58 <algoGalgo+0xf8>)
 8003d2e:	f002 f921 	bl	8005f74 <HAL_GPIO_WritePin>
}
 8003d32:	bf00      	nop
 8003d34:	3714      	adds	r7, #20
 8003d36:	46bd      	mov	sp, r7
 8003d38:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003d3a:	bf00      	nop
 8003d3c:	f3af 8000 	nop.w
 8003d40:	16c16c17 	.word	0x16c16c17
 8003d44:	3f66c16c 	.word	0x3f66c16c
 8003d48:	3f4ccccd 	.word	0x3f4ccccd
 8003d4c:	40768000 	.word	0x40768000
 8003d50:	43320000 	.word	0x43320000
 8003d54:	43360000 	.word	0x43360000
 8003d58:	40020800 	.word	0x40020800

08003d5c <setup>:
#include "Algorithms/algoGalgo.c"

uint32_t lastMotUpdate;

static void setup(void)
{
 8003d5c:	b580      	push	{r7, lr}
 8003d5e:	af00      	add	r7, sp, #0
	// wait for USR button press
	while (HAL_GPIO_ReadPin(BTN_USR_GPIO_Port, BTN_USR_Pin) == GPIO_PIN_SET);
 8003d60:	bf00      	nop
 8003d62:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003d66:	4815      	ldr	r0, [pc, #84]	; (8003dbc <setup+0x60>)
 8003d68:	f002 f8ec 	bl	8005f44 <HAL_GPIO_ReadPin>
 8003d6c:	4603      	mov	r3, r0
 8003d6e:	2b01      	cmp	r3, #1
 8003d70:	d0f7      	beq.n	8003d62 <setup+0x6>
	// begin the program
	HAL_GPIO_WritePin(LEDB_GPIO_Port, LEDB_Pin, GPIO_PIN_SET);
 8003d72:	2201      	movs	r2, #1
 8003d74:	2140      	movs	r1, #64	; 0x40
 8003d76:	4812      	ldr	r0, [pc, #72]	; (8003dc0 <setup+0x64>)
 8003d78:	f002 f8fc 	bl	8005f74 <HAL_GPIO_WritePin>
	println("Hello world!!");	HAL_Delay(500);
 8003d7c:	4811      	ldr	r0, [pc, #68]	; (8003dc4 <setup+0x68>)
 8003d7e:	f7ff f9ed 	bl	800315c <println>
 8003d82:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003d86:	f001 fa73 	bl	8005270 <HAL_Delay>
	HAL_GPIO_WritePin(LEDB_GPIO_Port, LEDB_Pin, GPIO_PIN_RESET);
 8003d8a:	2200      	movs	r2, #0
 8003d8c:	2140      	movs	r1, #64	; 0x40
 8003d8e:	480c      	ldr	r0, [pc, #48]	; (8003dc0 <setup+0x64>)
 8003d90:	f002 f8f0 	bl	8005f74 <HAL_GPIO_WritePin>

	if (imuTest_begin()) println("[IMU] Init successful!");
 8003d94:	f7ff fd3c 	bl	8003810 <imuTest_begin>
 8003d98:	4603      	mov	r3, r0
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d002      	beq.n	8003da4 <setup+0x48>
 8003d9e:	480a      	ldr	r0, [pc, #40]	; (8003dc8 <setup+0x6c>)
 8003da0:	f7ff f9dc 	bl	800315c <println>

	enableMotors(); println("[MOT] Motors enabled!");
 8003da4:	f000 f898 	bl	8003ed8 <enableMotors>
 8003da8:	4808      	ldr	r0, [pc, #32]	; (8003dcc <setup+0x70>)
 8003daa:	f7ff f9d7 	bl	800315c <println>
	lastMotUpdate = millis();
 8003dae:	f7ff fa63 	bl	8003278 <millis>
 8003db2:	4602      	mov	r2, r0
 8003db4:	4b06      	ldr	r3, [pc, #24]	; (8003dd0 <setup+0x74>)
 8003db6:	601a      	str	r2, [r3, #0]
}
 8003db8:	bf00      	nop
 8003dba:	bd80      	pop	{r7, pc}
 8003dbc:	40020000 	.word	0x40020000
 8003dc0:	40020800 	.word	0x40020800
 8003dc4:	08015b98 	.word	0x08015b98
 8003dc8:	08015ba8 	.word	0x08015ba8
 8003dcc:	08015bc0 	.word	0x08015bc0
 8003dd0:	200008dc 	.word	0x200008dc

08003dd4 <loop>:

static void loop(void)
{
 8003dd4:	b580      	push	{r7, lr}
 8003dd6:	af00      	add	r7, sp, #0
	imuTest_getData();		// get data from IMU
 8003dd8:	f7ff fa5e 	bl	8003298 <imuTest_getData>
	imuTest_quatUpdate();	// compute data received
 8003ddc:	f7ff fb4e 	bl	800347c <imuTest_quatUpdate>

	if (millis() - lastMotUpdate >= 100)	// every 100ms get Euler angles and run motor alogrithm
 8003de0:	f7ff fa4a 	bl	8003278 <millis>
 8003de4:	4602      	mov	r2, r0
 8003de6:	4b0a      	ldr	r3, [pc, #40]	; (8003e10 <loop+0x3c>)
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	1ad3      	subs	r3, r2, r3
 8003dec:	2b63      	cmp	r3, #99	; 0x63
 8003dee:	d90d      	bls.n	8003e0c <loop+0x38>
	{
		imuTest_getEuler();
 8003df0:	f7ff fbf4 	bl	80035dc <imuTest_getEuler>
		algoGalgo(yaw);
 8003df4:	4b07      	ldr	r3, [pc, #28]	; (8003e14 <loop+0x40>)
 8003df6:	edd3 7a00 	vldr	s15, [r3]
 8003dfa:	eeb0 0a67 	vmov.f32	s0, s15
 8003dfe:	f7ff ff2f 	bl	8003c60 <algoGalgo>
		lastMotUpdate = millis();
 8003e02:	f7ff fa39 	bl	8003278 <millis>
 8003e06:	4602      	mov	r2, r0
 8003e08:	4b01      	ldr	r3, [pc, #4]	; (8003e10 <loop+0x3c>)
 8003e0a:	601a      	str	r2, [r3, #0]
	}
}
 8003e0c:	bf00      	nop
 8003e0e:	bd80      	pop	{r7, pc}
 8003e10:	200008dc 	.word	0x200008dc
 8003e14:	20000878 	.word	0x20000878

08003e18 <setMotors>:
// DRV8838 has max of 250kHz PWM frequency
// Motors will automatically turn off after (TIM4->ARR * 1ms) time, default 100ms
// Any new value applied will reset timeout timer

static void setMotors(float dutyL, float dutyR)
{
 8003e18:	b580      	push	{r7, lr}
 8003e1a:	b082      	sub	sp, #8
 8003e1c:	af00      	add	r7, sp, #0
 8003e1e:	ed87 0a01 	vstr	s0, [r7, #4]
 8003e22:	edc7 0a00 	vstr	s1, [r7]
	TIM5->CCR2 = (uint32_t)((float)TIM5->ARR * (1 - dutyL));
 8003e26:	4b1e      	ldr	r3, [pc, #120]	; (8003ea0 <setMotors+0x88>)
 8003e28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e2a:	ee07 3a90 	vmov	s15, r3
 8003e2e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003e32:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003e36:	edd7 7a01 	vldr	s15, [r7, #4]
 8003e3a:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8003e3e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003e42:	4b17      	ldr	r3, [pc, #92]	; (8003ea0 <setMotors+0x88>)
 8003e44:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003e48:	ee17 2a90 	vmov	r2, s15
 8003e4c:	639a      	str	r2, [r3, #56]	; 0x38
	TIM5->CCR4 = (uint32_t)((float)TIM5->ARR * (1 - dutyR));
 8003e4e:	4b14      	ldr	r3, [pc, #80]	; (8003ea0 <setMotors+0x88>)
 8003e50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e52:	ee07 3a90 	vmov	s15, r3
 8003e56:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003e5a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003e5e:	edd7 7a00 	vldr	s15, [r7]
 8003e62:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8003e66:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003e6a:	4b0d      	ldr	r3, [pc, #52]	; (8003ea0 <setMotors+0x88>)
 8003e6c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003e70:	ee17 2a90 	vmov	r2, s15
 8003e74:	641a      	str	r2, [r3, #64]	; 0x40
	TIM5->CNT = 0;
 8003e76:	4b0a      	ldr	r3, [pc, #40]	; (8003ea0 <setMotors+0x88>)
 8003e78:	2200      	movs	r2, #0
 8003e7a:	625a      	str	r2, [r3, #36]	; 0x24

	TIM4->CNT = 0;	// reset timer counter -> clears motor timeout
 8003e7c:	4b09      	ldr	r3, [pc, #36]	; (8003ea4 <setMotors+0x8c>)
 8003e7e:	2200      	movs	r2, #0
 8003e80:	625a      	str	r2, [r3, #36]	; 0x24

	HAL_GPIO_WritePin(PH_R_GPIO_Port, PH_R_Pin, GPIO_PIN_SET);
 8003e82:	2201      	movs	r2, #1
 8003e84:	2104      	movs	r1, #4
 8003e86:	4808      	ldr	r0, [pc, #32]	; (8003ea8 <setMotors+0x90>)
 8003e88:	f002 f874 	bl	8005f74 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PH_L_GPIO_Port, PH_L_Pin, GPIO_PIN_SET);
 8003e8c:	2201      	movs	r2, #1
 8003e8e:	2101      	movs	r1, #1
 8003e90:	4805      	ldr	r0, [pc, #20]	; (8003ea8 <setMotors+0x90>)
 8003e92:	f002 f86f 	bl	8005f74 <HAL_GPIO_WritePin>
}
 8003e96:	bf00      	nop
 8003e98:	3708      	adds	r7, #8
 8003e9a:	46bd      	mov	sp, r7
 8003e9c:	bd80      	pop	{r7, pc}
 8003e9e:	bf00      	nop
 8003ea0:	40000c00 	.word	0x40000c00
 8003ea4:	40000800 	.word	0x40000800
 8003ea8:	40020000 	.word	0x40020000

08003eac <haltMotors>:

static void haltMotors()
{
 8003eac:	b480      	push	{r7}
 8003eae:	af00      	add	r7, sp, #0
	// Function called on TIM4 overflow interrupt
	TIM5->CCR2 = TIM5->ARR;
 8003eb0:	4b07      	ldr	r3, [pc, #28]	; (8003ed0 <haltMotors+0x24>)
 8003eb2:	4a07      	ldr	r2, [pc, #28]	; (8003ed0 <haltMotors+0x24>)
 8003eb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003eb6:	6393      	str	r3, [r2, #56]	; 0x38
	TIM5->CCR4 = TIM5->ARR;
 8003eb8:	4b05      	ldr	r3, [pc, #20]	; (8003ed0 <haltMotors+0x24>)
 8003eba:	4a05      	ldr	r2, [pc, #20]	; (8003ed0 <haltMotors+0x24>)
 8003ebc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ebe:	6413      	str	r3, [r2, #64]	; 0x40

	TIM4->CNT = 0;	// reset timer counter -> clears motor timeout
 8003ec0:	4b04      	ldr	r3, [pc, #16]	; (8003ed4 <haltMotors+0x28>)
 8003ec2:	2200      	movs	r2, #0
 8003ec4:	625a      	str	r2, [r3, #36]	; 0x24
}
 8003ec6:	bf00      	nop
 8003ec8:	46bd      	mov	sp, r7
 8003eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ece:	4770      	bx	lr
 8003ed0:	40000c00 	.word	0x40000c00
 8003ed4:	40000800 	.word	0x40000800

08003ed8 <enableMotors>:

static void enableMotors()
{
 8003ed8:	b580      	push	{r7, lr}
 8003eda:	af00      	add	r7, sp, #0
	haltMotors();
 8003edc:	f7ff ffe6 	bl	8003eac <haltMotors>

	//MAX_PWM_FREQ = 42000000 / (2 * PWM_RESOLUTION); // 82031 Hz for 256 resolution
	//setPwmFrequency(MAX_PWM_FREQ);

	motL_forward = true;
 8003ee0:	4b14      	ldr	r3, [pc, #80]	; (8003f34 <enableMotors+0x5c>)
 8003ee2:	2201      	movs	r2, #1
 8003ee4:	701a      	strb	r2, [r3, #0]
	motR_forward = true;
 8003ee6:	4b14      	ldr	r3, [pc, #80]	; (8003f38 <enableMotors+0x60>)
 8003ee8:	2201      	movs	r2, #1
 8003eea:	701a      	strb	r2, [r3, #0]

	// flip direction based on config
	HAL_GPIO_WritePin(PH_L_GPIO_Port, PH_L_Pin, motL_forward ^ MOTOR_L_DIR);
 8003eec:	4b11      	ldr	r3, [pc, #68]	; (8003f34 <enableMotors+0x5c>)
 8003eee:	781b      	ldrb	r3, [r3, #0]
 8003ef0:	461a      	mov	r2, r3
 8003ef2:	2101      	movs	r1, #1
 8003ef4:	4811      	ldr	r0, [pc, #68]	; (8003f3c <enableMotors+0x64>)
 8003ef6:	f002 f83d 	bl	8005f74 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PH_R_GPIO_Port, PH_R_Pin, motR_forward ^ MOTOR_R_DIR);
 8003efa:	4b0f      	ldr	r3, [pc, #60]	; (8003f38 <enableMotors+0x60>)
 8003efc:	781b      	ldrb	r3, [r3, #0]
 8003efe:	461a      	mov	r2, r3
 8003f00:	2104      	movs	r1, #4
 8003f02:	480e      	ldr	r0, [pc, #56]	; (8003f3c <enableMotors+0x64>)
 8003f04:	f002 f836 	bl	8005f74 <HAL_GPIO_WritePin>

	HAL_TIM_PWM_Start(Get_TIM5_Instance(), TIM_CHANNEL_2);
 8003f08:	f000 fcf0 	bl	80048ec <Get_TIM5_Instance>
 8003f0c:	4603      	mov	r3, r0
 8003f0e:	2104      	movs	r1, #4
 8003f10:	4618      	mov	r0, r3
 8003f12:	f006 fcf1 	bl	800a8f8 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(Get_TIM5_Instance(), TIM_CHANNEL_4);
 8003f16:	f000 fce9 	bl	80048ec <Get_TIM5_Instance>
 8003f1a:	4603      	mov	r3, r0
 8003f1c:	210c      	movs	r1, #12
 8003f1e:	4618      	mov	r0, r3
 8003f20:	f006 fcea 	bl	800a8f8 <HAL_TIM_PWM_Start>

	haltMotors();
 8003f24:	f7ff ffc2 	bl	8003eac <haltMotors>
	println("[MOT] MOTORS ENABLED!!");
 8003f28:	4805      	ldr	r0, [pc, #20]	; (8003f40 <enableMotors+0x68>)
 8003f2a:	f7ff f917 	bl	800315c <println>
}
 8003f2e:	bf00      	nop
 8003f30:	bd80      	pop	{r7, pc}
 8003f32:	bf00      	nop
 8003f34:	20000000 	.word	0x20000000
 8003f38:	20000001 	.word	0x20000001
 8003f3c:	40020000 	.word	0x40020000
 8003f40:	08015bd8 	.word	0x08015bd8

08003f44 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003f44:	b580      	push	{r7, lr}
 8003f46:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003f48:	f001 f920 	bl	800518c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003f4c:	f000 f86a 	bl	8004024 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003f50:	f000 fbdc 	bl	800470c <MX_GPIO_Init>
  MX_DMA_Init();
 8003f54:	f000 fba2 	bl	800469c <MX_DMA_Init>
  MX_SDIO_SD_Init();
 8003f58:	f000 f93a 	bl	80041d0 <MX_SDIO_SD_Init>
  MX_FATFS_Init();
 8003f5c:	f009 fe1e 	bl	800db9c <MX_FATFS_Init>
  MX_I2C1_Init();
 8003f60:	f000 f8e2 	bl	8004128 <MX_I2C1_Init>
  MX_USB_DEVICE_Init();
 8003f64:	f00b fc66 	bl	800f834 <MX_USB_DEVICE_Init>
  MX_SPI1_Init();
 8003f68:	f000 f952 	bl	8004210 <MX_SPI1_Init>
  MX_USART3_UART_Init();
 8003f6c:	f000 fb6c 	bl	8004648 <MX_USART3_UART_Init>
  MX_RTC_Init();
 8003f70:	f000 f908 	bl	8004184 <MX_RTC_Init>
  MX_TIM2_Init();
 8003f74:	f000 f9d4 	bl	8004320 <MX_TIM2_Init>
  MX_TIM5_Init();
 8003f78:	f000 fae4 	bl	8004544 <MX_TIM5_Init>
  MX_TIM4_Init();
 8003f7c:	f000 fa94 	bl	80044a8 <MX_TIM4_Init>
  MX_TIM1_Init();
 8003f80:	f000 f97c 	bl	800427c <MX_TIM1_Init>
  MX_TIM3_Init();
 8003f84:	f000 fa1a 	bl	80043bc <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  // Start millisecond timer
  HAL_TIM_Base_Start(&htim2);
 8003f88:	4821      	ldr	r0, [pc, #132]	; (8004010 <main+0xcc>)
 8003f8a:	f006 fc38 	bl	800a7fe <HAL_TIM_Base_Start>

  // Setup pins
  HAL_GPIO_WritePin(LEDA_GPIO_Port, LEDA_Pin, GPIO_PIN_RESET);
 8003f8e:	2200      	movs	r2, #0
 8003f90:	2180      	movs	r1, #128	; 0x80
 8003f92:	4820      	ldr	r0, [pc, #128]	; (8004014 <main+0xd0>)
 8003f94:	f001 ffee 	bl	8005f74 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LEDB_GPIO_Port, LEDB_Pin, GPIO_PIN_RESET);
 8003f98:	2200      	movs	r2, #0
 8003f9a:	2140      	movs	r1, #64	; 0x40
 8003f9c:	481d      	ldr	r0, [pc, #116]	; (8004014 <main+0xd0>)
 8003f9e:	f001 ffe9 	bl	8005f74 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LEDC_GPIO_Port, LEDC_Pin, GPIO_PIN_RESET);
 8003fa2:	2200      	movs	r2, #0
 8003fa4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003fa8:	481b      	ldr	r0, [pc, #108]	; (8004018 <main+0xd4>)
 8003faa:	f001 ffe3 	bl	8005f74 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LEDD_GPIO_Port, LEDD_Pin, GPIO_PIN_RESET);
 8003fae:	2200      	movs	r2, #0
 8003fb0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003fb4:	4818      	ldr	r0, [pc, #96]	; (8004018 <main+0xd4>)
 8003fb6:	f001 ffdd 	bl	8005f74 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(PH_L_GPIO_Port, PH_L_Pin, GPIO_PIN_RESET);
 8003fba:	2200      	movs	r2, #0
 8003fbc:	2101      	movs	r1, #1
 8003fbe:	4817      	ldr	r0, [pc, #92]	; (800401c <main+0xd8>)
 8003fc0:	f001 ffd8 	bl	8005f74 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(PH_R_GPIO_Port, PH_R_Pin, GPIO_PIN_RESET);
 8003fc4:	2200      	movs	r2, #0
 8003fc6:	2104      	movs	r1, #4
 8003fc8:	4814      	ldr	r0, [pc, #80]	; (800401c <main+0xd8>)
 8003fca:	f001 ffd3 	bl	8005f74 <HAL_GPIO_WritePin>
  //HAL_GPIO_WritePin(EN_L_GPIO_Port, EN_L_Pin, GPIO_PIN_RESET);
  //HAL_GPIO_WritePin(EN_R_GPIO_Port, EN_R_Pin, GPIO_PIN_RESET);
  HAL_GPIO_WritePin(P1_GPIO_Port, P1_Pin, GPIO_PIN_RESET);
 8003fce:	2200      	movs	r2, #0
 8003fd0:	2101      	movs	r1, #1
 8003fd2:	4810      	ldr	r0, [pc, #64]	; (8004014 <main+0xd0>)
 8003fd4:	f001 ffce 	bl	8005f74 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(P2_GPIO_Port, P2_Pin, GPIO_PIN_RESET);
 8003fd8:	2200      	movs	r2, #0
 8003fda:	2104      	movs	r1, #4
 8003fdc:	480d      	ldr	r0, [pc, #52]	; (8004014 <main+0xd0>)
 8003fde:	f001 ffc9 	bl	8005f74 <HAL_GPIO_WritePin>
  //HAL_GPIO_WritePin(P3_GPIO_Port, P3_Pin, GPIO_PIN_RESET);
  HAL_GPIO_WritePin(P4_GPIO_Port, P4_Pin, GPIO_PIN_RESET);
 8003fe2:	2200      	movs	r2, #0
 8003fe4:	2102      	movs	r1, #2
 8003fe6:	480b      	ldr	r0, [pc, #44]	; (8004014 <main+0xd0>)
 8003fe8:	f001 ffc4 	bl	8005f74 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(P5_GPIO_Port, P5_Pin, GPIO_PIN_SET);
 8003fec:	2201      	movs	r2, #1
 8003fee:	2108      	movs	r1, #8
 8003ff0:	4808      	ldr	r0, [pc, #32]	; (8004014 <main+0xd0>)
 8003ff2:	f001 ffbf 	bl	8005f74 <HAL_GPIO_WritePin>
  //HAL_GPIO_WritePin(P6_GPIO_Port, P6_Pin, GPIO_PIN_RESET);
  HAL_GPIO_WritePin(P7_GPIO_Port, P7_Pin, GPIO_PIN_RESET);
 8003ff6:	2200      	movs	r2, #0
 8003ff8:	2110      	movs	r1, #16
 8003ffa:	4808      	ldr	r0, [pc, #32]	; (800401c <main+0xd8>)
 8003ffc:	f001 ffba 	bl	8005f74 <HAL_GPIO_WritePin>

  // Execute code
  setup();
 8004000:	f7ff feac 	bl	8003d5c <setup>


  // Start motor timeout interrupt timer
  HAL_TIM_Base_Start_IT(&htim4);
 8004004:	4806      	ldr	r0, [pc, #24]	; (8004020 <main+0xdc>)
 8004006:	f006 fc1e 	bl	800a846 <HAL_TIM_Base_Start_IT>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	// Execute code
	loop();
 800400a:	f7ff fee3 	bl	8003dd4 <loop>
 800400e:	e7fc      	b.n	800400a <main+0xc6>
 8004010:	20000c30 	.word	0x20000c30
 8004014:	40020800 	.word	0x40020800
 8004018:	40020400 	.word	0x40020400
 800401c:	40020000 	.word	0x40020000
 8004020:	20000940 	.word	0x20000940

08004024 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004024:	b580      	push	{r7, lr}
 8004026:	b098      	sub	sp, #96	; 0x60
 8004028:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800402a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800402e:	2230      	movs	r2, #48	; 0x30
 8004030:	2100      	movs	r1, #0
 8004032:	4618      	mov	r0, r3
 8004034:	f00c f967 	bl	8010306 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004038:	f107 031c 	add.w	r3, r7, #28
 800403c:	2200      	movs	r2, #0
 800403e:	601a      	str	r2, [r3, #0]
 8004040:	605a      	str	r2, [r3, #4]
 8004042:	609a      	str	r2, [r3, #8]
 8004044:	60da      	str	r2, [r3, #12]
 8004046:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004048:	f107 030c 	add.w	r3, r7, #12
 800404c:	2200      	movs	r2, #0
 800404e:	601a      	str	r2, [r3, #0]
 8004050:	605a      	str	r2, [r3, #4]
 8004052:	609a      	str	r2, [r3, #8]
 8004054:	60da      	str	r2, [r3, #12]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8004056:	2300      	movs	r3, #0
 8004058:	60bb      	str	r3, [r7, #8]
 800405a:	4b31      	ldr	r3, [pc, #196]	; (8004120 <SystemClock_Config+0xfc>)
 800405c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800405e:	4a30      	ldr	r2, [pc, #192]	; (8004120 <SystemClock_Config+0xfc>)
 8004060:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004064:	6413      	str	r3, [r2, #64]	; 0x40
 8004066:	4b2e      	ldr	r3, [pc, #184]	; (8004120 <SystemClock_Config+0xfc>)
 8004068:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800406a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800406e:	60bb      	str	r3, [r7, #8]
 8004070:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8004072:	2300      	movs	r3, #0
 8004074:	607b      	str	r3, [r7, #4]
 8004076:	4b2b      	ldr	r3, [pc, #172]	; (8004124 <SystemClock_Config+0x100>)
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	4a2a      	ldr	r2, [pc, #168]	; (8004124 <SystemClock_Config+0x100>)
 800407c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004080:	6013      	str	r3, [r2, #0]
 8004082:	4b28      	ldr	r3, [pc, #160]	; (8004124 <SystemClock_Config+0x100>)
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800408a:	607b      	str	r3, [r7, #4]
 800408c:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 800408e:	2305      	movs	r3, #5
 8004090:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8004092:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004096:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8004098:	2301      	movs	r3, #1
 800409a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800409c:	2302      	movs	r3, #2
 800409e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80040a0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80040a4:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 6;
 80040a6:	2306      	movs	r3, #6
 80040a8:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 168;
 80040aa:	23a8      	movs	r3, #168	; 0xa8
 80040ac:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80040ae:	2302      	movs	r3, #2
 80040b0:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80040b2:	2307      	movs	r3, #7
 80040b4:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80040b6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80040ba:	4618      	mov	r0, r3
 80040bc:	f004 f8d2 	bl	8008264 <HAL_RCC_OscConfig>
 80040c0:	4603      	mov	r3, r0
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d001      	beq.n	80040ca <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80040c6:	f000 fc1b 	bl	8004900 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80040ca:	230f      	movs	r3, #15
 80040cc:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80040ce:	2302      	movs	r3, #2
 80040d0:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80040d2:	2300      	movs	r3, #0
 80040d4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80040d6:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80040da:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80040dc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80040e0:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80040e2:	f107 031c 	add.w	r3, r7, #28
 80040e6:	2105      	movs	r1, #5
 80040e8:	4618      	mov	r0, r3
 80040ea:	f004 fb2b 	bl	8008744 <HAL_RCC_ClockConfig>
 80040ee:	4603      	mov	r3, r0
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d001      	beq.n	80040f8 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 80040f4:	f000 fc04 	bl	8004900 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80040f8:	2302      	movs	r3, #2
 80040fa:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80040fc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004100:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004102:	f107 030c 	add.w	r3, r7, #12
 8004106:	4618      	mov	r0, r3
 8004108:	f004 fce8 	bl	8008adc <HAL_RCCEx_PeriphCLKConfig>
 800410c:	4603      	mov	r3, r0
 800410e:	2b00      	cmp	r3, #0
 8004110:	d001      	beq.n	8004116 <SystemClock_Config+0xf2>
  {
    Error_Handler();
 8004112:	f000 fbf5 	bl	8004900 <Error_Handler>
  }
}
 8004116:	bf00      	nop
 8004118:	3760      	adds	r7, #96	; 0x60
 800411a:	46bd      	mov	sp, r7
 800411c:	bd80      	pop	{r7, pc}
 800411e:	bf00      	nop
 8004120:	40023800 	.word	0x40023800
 8004124:	40007000 	.word	0x40007000

08004128 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8004128:	b580      	push	{r7, lr}
 800412a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800412c:	4b12      	ldr	r3, [pc, #72]	; (8004178 <MX_I2C1_Init+0x50>)
 800412e:	4a13      	ldr	r2, [pc, #76]	; (800417c <MX_I2C1_Init+0x54>)
 8004130:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8004132:	4b11      	ldr	r3, [pc, #68]	; (8004178 <MX_I2C1_Init+0x50>)
 8004134:	4a12      	ldr	r2, [pc, #72]	; (8004180 <MX_I2C1_Init+0x58>)
 8004136:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8004138:	4b0f      	ldr	r3, [pc, #60]	; (8004178 <MX_I2C1_Init+0x50>)
 800413a:	2200      	movs	r2, #0
 800413c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800413e:	4b0e      	ldr	r3, [pc, #56]	; (8004178 <MX_I2C1_Init+0x50>)
 8004140:	2200      	movs	r2, #0
 8004142:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8004144:	4b0c      	ldr	r3, [pc, #48]	; (8004178 <MX_I2C1_Init+0x50>)
 8004146:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800414a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800414c:	4b0a      	ldr	r3, [pc, #40]	; (8004178 <MX_I2C1_Init+0x50>)
 800414e:	2200      	movs	r2, #0
 8004150:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8004152:	4b09      	ldr	r3, [pc, #36]	; (8004178 <MX_I2C1_Init+0x50>)
 8004154:	2200      	movs	r2, #0
 8004156:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8004158:	4b07      	ldr	r3, [pc, #28]	; (8004178 <MX_I2C1_Init+0x50>)
 800415a:	2200      	movs	r2, #0
 800415c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800415e:	4b06      	ldr	r3, [pc, #24]	; (8004178 <MX_I2C1_Init+0x50>)
 8004160:	2200      	movs	r2, #0
 8004162:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8004164:	4804      	ldr	r0, [pc, #16]	; (8004178 <MX_I2C1_Init+0x50>)
 8004166:	f001 ff43 	bl	8005ff0 <HAL_I2C_Init>
 800416a:	4603      	mov	r3, r0
 800416c:	2b00      	cmp	r3, #0
 800416e:	d001      	beq.n	8004174 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8004170:	f000 fbc6 	bl	8004900 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8004174:	bf00      	nop
 8004176:	bd80      	pop	{r7, pc}
 8004178:	200009c0 	.word	0x200009c0
 800417c:	40005400 	.word	0x40005400
 8004180:	00061a80 	.word	0x00061a80

08004184 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8004184:	b580      	push	{r7, lr}
 8004186:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only 
  */
  hrtc.Instance = RTC;
 8004188:	4b0f      	ldr	r3, [pc, #60]	; (80041c8 <MX_RTC_Init+0x44>)
 800418a:	4a10      	ldr	r2, [pc, #64]	; (80041cc <MX_RTC_Init+0x48>)
 800418c:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800418e:	4b0e      	ldr	r3, [pc, #56]	; (80041c8 <MX_RTC_Init+0x44>)
 8004190:	2200      	movs	r2, #0
 8004192:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8004194:	4b0c      	ldr	r3, [pc, #48]	; (80041c8 <MX_RTC_Init+0x44>)
 8004196:	227f      	movs	r2, #127	; 0x7f
 8004198:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800419a:	4b0b      	ldr	r3, [pc, #44]	; (80041c8 <MX_RTC_Init+0x44>)
 800419c:	22ff      	movs	r2, #255	; 0xff
 800419e:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80041a0:	4b09      	ldr	r3, [pc, #36]	; (80041c8 <MX_RTC_Init+0x44>)
 80041a2:	2200      	movs	r2, #0
 80041a4:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80041a6:	4b08      	ldr	r3, [pc, #32]	; (80041c8 <MX_RTC_Init+0x44>)
 80041a8:	2200      	movs	r2, #0
 80041aa:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80041ac:	4b06      	ldr	r3, [pc, #24]	; (80041c8 <MX_RTC_Init+0x44>)
 80041ae:	2200      	movs	r2, #0
 80041b0:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80041b2:	4805      	ldr	r0, [pc, #20]	; (80041c8 <MX_RTC_Init+0x44>)
 80041b4:	f004 fd74 	bl	8008ca0 <HAL_RTC_Init>
 80041b8:	4603      	mov	r3, r0
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d001      	beq.n	80041c2 <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 80041be:	f000 fb9f 	bl	8004900 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80041c2:	bf00      	nop
 80041c4:	bd80      	pop	{r7, pc}
 80041c6:	bf00      	nop
 80041c8:	20000a94 	.word	0x20000a94
 80041cc:	40002800 	.word	0x40002800

080041d0 <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 80041d0:	b480      	push	{r7}
 80041d2:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 80041d4:	4b0c      	ldr	r3, [pc, #48]	; (8004208 <MX_SDIO_SD_Init+0x38>)
 80041d6:	4a0d      	ldr	r2, [pc, #52]	; (800420c <MX_SDIO_SD_Init+0x3c>)
 80041d8:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 80041da:	4b0b      	ldr	r3, [pc, #44]	; (8004208 <MX_SDIO_SD_Init+0x38>)
 80041dc:	2200      	movs	r2, #0
 80041de:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 80041e0:	4b09      	ldr	r3, [pc, #36]	; (8004208 <MX_SDIO_SD_Init+0x38>)
 80041e2:	2200      	movs	r2, #0
 80041e4:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 80041e6:	4b08      	ldr	r3, [pc, #32]	; (8004208 <MX_SDIO_SD_Init+0x38>)
 80041e8:	2200      	movs	r2, #0
 80041ea:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 80041ec:	4b06      	ldr	r3, [pc, #24]	; (8004208 <MX_SDIO_SD_Init+0x38>)
 80041ee:	2200      	movs	r2, #0
 80041f0:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 80041f2:	4b05      	ldr	r3, [pc, #20]	; (8004208 <MX_SDIO_SD_Init+0x38>)
 80041f4:	2200      	movs	r2, #0
 80041f6:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 0;
 80041f8:	4b03      	ldr	r3, [pc, #12]	; (8004208 <MX_SDIO_SD_Init+0x38>)
 80041fa:	2200      	movs	r2, #0
 80041fc:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 80041fe:	bf00      	nop
 8004200:	46bd      	mov	sp, r7
 8004202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004206:	4770      	bx	lr
 8004208:	20000b54 	.word	0x20000b54
 800420c:	40012c00 	.word	0x40012c00

08004210 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8004210:	b580      	push	{r7, lr}
 8004212:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8004214:	4b17      	ldr	r3, [pc, #92]	; (8004274 <MX_SPI1_Init+0x64>)
 8004216:	4a18      	ldr	r2, [pc, #96]	; (8004278 <MX_SPI1_Init+0x68>)
 8004218:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800421a:	4b16      	ldr	r3, [pc, #88]	; (8004274 <MX_SPI1_Init+0x64>)
 800421c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8004220:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8004222:	4b14      	ldr	r3, [pc, #80]	; (8004274 <MX_SPI1_Init+0x64>)
 8004224:	2200      	movs	r2, #0
 8004226:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8004228:	4b12      	ldr	r3, [pc, #72]	; (8004274 <MX_SPI1_Init+0x64>)
 800422a:	2200      	movs	r2, #0
 800422c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800422e:	4b11      	ldr	r3, [pc, #68]	; (8004274 <MX_SPI1_Init+0x64>)
 8004230:	2200      	movs	r2, #0
 8004232:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8004234:	4b0f      	ldr	r3, [pc, #60]	; (8004274 <MX_SPI1_Init+0x64>)
 8004236:	2200      	movs	r2, #0
 8004238:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800423a:	4b0e      	ldr	r3, [pc, #56]	; (8004274 <MX_SPI1_Init+0x64>)
 800423c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004240:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8004242:	4b0c      	ldr	r3, [pc, #48]	; (8004274 <MX_SPI1_Init+0x64>)
 8004244:	2228      	movs	r2, #40	; 0x28
 8004246:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8004248:	4b0a      	ldr	r3, [pc, #40]	; (8004274 <MX_SPI1_Init+0x64>)
 800424a:	2200      	movs	r2, #0
 800424c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800424e:	4b09      	ldr	r3, [pc, #36]	; (8004274 <MX_SPI1_Init+0x64>)
 8004250:	2200      	movs	r2, #0
 8004252:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004254:	4b07      	ldr	r3, [pc, #28]	; (8004274 <MX_SPI1_Init+0x64>)
 8004256:	2200      	movs	r2, #0
 8004258:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800425a:	4b06      	ldr	r3, [pc, #24]	; (8004274 <MX_SPI1_Init+0x64>)
 800425c:	220a      	movs	r2, #10
 800425e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8004260:	4804      	ldr	r0, [pc, #16]	; (8004274 <MX_SPI1_Init+0x64>)
 8004262:	f006 f91f 	bl	800a4a4 <HAL_SPI_Init>
 8004266:	4603      	mov	r3, r0
 8004268:	2b00      	cmp	r3, #0
 800426a:	d001      	beq.n	8004270 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800426c:	f000 fb48 	bl	8004900 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8004270:	bf00      	nop
 8004272:	bd80      	pop	{r7, pc}
 8004274:	20000bd8 	.word	0x20000bd8
 8004278:	40013000 	.word	0x40013000

0800427c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800427c:	b580      	push	{r7, lr}
 800427e:	b086      	sub	sp, #24
 8004280:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004282:	f107 0308 	add.w	r3, r7, #8
 8004286:	2200      	movs	r2, #0
 8004288:	601a      	str	r2, [r3, #0]
 800428a:	605a      	str	r2, [r3, #4]
 800428c:	609a      	str	r2, [r3, #8]
 800428e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004290:	463b      	mov	r3, r7
 8004292:	2200      	movs	r2, #0
 8004294:	601a      	str	r2, [r3, #0]
 8004296:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8004298:	4b1f      	ldr	r3, [pc, #124]	; (8004318 <MX_TIM1_Init+0x9c>)
 800429a:	4a20      	ldr	r2, [pc, #128]	; (800431c <MX_TIM1_Init+0xa0>)
 800429c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 16799;
 800429e:	4b1e      	ldr	r3, [pc, #120]	; (8004318 <MX_TIM1_Init+0x9c>)
 80042a0:	f244 129f 	movw	r2, #16799	; 0x419f
 80042a4:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80042a6:	4b1c      	ldr	r3, [pc, #112]	; (8004318 <MX_TIM1_Init+0x9c>)
 80042a8:	2200      	movs	r2, #0
 80042aa:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80042ac:	4b1a      	ldr	r3, [pc, #104]	; (8004318 <MX_TIM1_Init+0x9c>)
 80042ae:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80042b2:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80042b4:	4b18      	ldr	r3, [pc, #96]	; (8004318 <MX_TIM1_Init+0x9c>)
 80042b6:	2200      	movs	r2, #0
 80042b8:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80042ba:	4b17      	ldr	r3, [pc, #92]	; (8004318 <MX_TIM1_Init+0x9c>)
 80042bc:	2200      	movs	r2, #0
 80042be:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80042c0:	4b15      	ldr	r3, [pc, #84]	; (8004318 <MX_TIM1_Init+0x9c>)
 80042c2:	2200      	movs	r2, #0
 80042c4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80042c6:	4814      	ldr	r0, [pc, #80]	; (8004318 <MX_TIM1_Init+0x9c>)
 80042c8:	f006 fa6e 	bl	800a7a8 <HAL_TIM_Base_Init>
 80042cc:	4603      	mov	r3, r0
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d001      	beq.n	80042d6 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 80042d2:	f000 fb15 	bl	8004900 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80042d6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80042da:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80042dc:	f107 0308 	add.w	r3, r7, #8
 80042e0:	4619      	mov	r1, r3
 80042e2:	480d      	ldr	r0, [pc, #52]	; (8004318 <MX_TIM1_Init+0x9c>)
 80042e4:	f006 fc0c 	bl	800ab00 <HAL_TIM_ConfigClockSource>
 80042e8:	4603      	mov	r3, r0
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d001      	beq.n	80042f2 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 80042ee:	f000 fb07 	bl	8004900 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80042f2:	2300      	movs	r3, #0
 80042f4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80042f6:	2300      	movs	r3, #0
 80042f8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80042fa:	463b      	mov	r3, r7
 80042fc:	4619      	mov	r1, r3
 80042fe:	4806      	ldr	r0, [pc, #24]	; (8004318 <MX_TIM1_Init+0x9c>)
 8004300:	f006 ffc6 	bl	800b290 <HAL_TIMEx_MasterConfigSynchronization>
 8004304:	4603      	mov	r3, r0
 8004306:	2b00      	cmp	r3, #0
 8004308:	d001      	beq.n	800430e <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 800430a:	f000 faf9 	bl	8004900 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800430e:	bf00      	nop
 8004310:	3718      	adds	r7, #24
 8004312:	46bd      	mov	sp, r7
 8004314:	bd80      	pop	{r7, pc}
 8004316:	bf00      	nop
 8004318:	20000b14 	.word	0x20000b14
 800431c:	40010000 	.word	0x40010000

08004320 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8004320:	b580      	push	{r7, lr}
 8004322:	b086      	sub	sp, #24
 8004324:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004326:	f107 0308 	add.w	r3, r7, #8
 800432a:	2200      	movs	r2, #0
 800432c:	601a      	str	r2, [r3, #0]
 800432e:	605a      	str	r2, [r3, #4]
 8004330:	609a      	str	r2, [r3, #8]
 8004332:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004334:	463b      	mov	r3, r7
 8004336:	2200      	movs	r2, #0
 8004338:	601a      	str	r2, [r3, #0]
 800433a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800433c:	4b1d      	ldr	r3, [pc, #116]	; (80043b4 <MX_TIM2_Init+0x94>)
 800433e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8004342:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 83;
 8004344:	4b1b      	ldr	r3, [pc, #108]	; (80043b4 <MX_TIM2_Init+0x94>)
 8004346:	2253      	movs	r2, #83	; 0x53
 8004348:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800434a:	4b1a      	ldr	r3, [pc, #104]	; (80043b4 <MX_TIM2_Init+0x94>)
 800434c:	2200      	movs	r2, #0
 800434e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4200000000;
 8004350:	4b18      	ldr	r3, [pc, #96]	; (80043b4 <MX_TIM2_Init+0x94>)
 8004352:	4a19      	ldr	r2, [pc, #100]	; (80043b8 <MX_TIM2_Init+0x98>)
 8004354:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004356:	4b17      	ldr	r3, [pc, #92]	; (80043b4 <MX_TIM2_Init+0x94>)
 8004358:	2200      	movs	r2, #0
 800435a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800435c:	4b15      	ldr	r3, [pc, #84]	; (80043b4 <MX_TIM2_Init+0x94>)
 800435e:	2200      	movs	r2, #0
 8004360:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8004362:	4814      	ldr	r0, [pc, #80]	; (80043b4 <MX_TIM2_Init+0x94>)
 8004364:	f006 fa20 	bl	800a7a8 <HAL_TIM_Base_Init>
 8004368:	4603      	mov	r3, r0
 800436a:	2b00      	cmp	r3, #0
 800436c:	d001      	beq.n	8004372 <MX_TIM2_Init+0x52>
  {
    Error_Handler();
 800436e:	f000 fac7 	bl	8004900 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004372:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004376:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8004378:	f107 0308 	add.w	r3, r7, #8
 800437c:	4619      	mov	r1, r3
 800437e:	480d      	ldr	r0, [pc, #52]	; (80043b4 <MX_TIM2_Init+0x94>)
 8004380:	f006 fbbe 	bl	800ab00 <HAL_TIM_ConfigClockSource>
 8004384:	4603      	mov	r3, r0
 8004386:	2b00      	cmp	r3, #0
 8004388:	d001      	beq.n	800438e <MX_TIM2_Init+0x6e>
  {
    Error_Handler();
 800438a:	f000 fab9 	bl	8004900 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800438e:	2300      	movs	r3, #0
 8004390:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004392:	2300      	movs	r3, #0
 8004394:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8004396:	463b      	mov	r3, r7
 8004398:	4619      	mov	r1, r3
 800439a:	4806      	ldr	r0, [pc, #24]	; (80043b4 <MX_TIM2_Init+0x94>)
 800439c:	f006 ff78 	bl	800b290 <HAL_TIMEx_MasterConfigSynchronization>
 80043a0:	4603      	mov	r3, r0
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d001      	beq.n	80043aa <MX_TIM2_Init+0x8a>
  {
    Error_Handler();
 80043a6:	f000 faab 	bl	8004900 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80043aa:	bf00      	nop
 80043ac:	3718      	adds	r7, #24
 80043ae:	46bd      	mov	sp, r7
 80043b0:	bd80      	pop	{r7, pc}
 80043b2:	bf00      	nop
 80043b4:	20000c30 	.word	0x20000c30
 80043b8:	fa56ea00 	.word	0xfa56ea00

080043bc <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80043bc:	b580      	push	{r7, lr}
 80043be:	b08e      	sub	sp, #56	; 0x38
 80043c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80043c2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80043c6:	2200      	movs	r2, #0
 80043c8:	601a      	str	r2, [r3, #0]
 80043ca:	605a      	str	r2, [r3, #4]
 80043cc:	609a      	str	r2, [r3, #8]
 80043ce:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80043d0:	f107 0320 	add.w	r3, r7, #32
 80043d4:	2200      	movs	r2, #0
 80043d6:	601a      	str	r2, [r3, #0]
 80043d8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80043da:	1d3b      	adds	r3, r7, #4
 80043dc:	2200      	movs	r2, #0
 80043de:	601a      	str	r2, [r3, #0]
 80043e0:	605a      	str	r2, [r3, #4]
 80043e2:	609a      	str	r2, [r3, #8]
 80043e4:	60da      	str	r2, [r3, #12]
 80043e6:	611a      	str	r2, [r3, #16]
 80043e8:	615a      	str	r2, [r3, #20]
 80043ea:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80043ec:	4b2c      	ldr	r3, [pc, #176]	; (80044a0 <MX_TIM3_Init+0xe4>)
 80043ee:	4a2d      	ldr	r2, [pc, #180]	; (80044a4 <MX_TIM3_Init+0xe8>)
 80043f0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 167;
 80043f2:	4b2b      	ldr	r3, [pc, #172]	; (80044a0 <MX_TIM3_Init+0xe4>)
 80043f4:	22a7      	movs	r2, #167	; 0xa7
 80043f6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80043f8:	4b29      	ldr	r3, [pc, #164]	; (80044a0 <MX_TIM3_Init+0xe4>)
 80043fa:	2200      	movs	r2, #0
 80043fc:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 10000;
 80043fe:	4b28      	ldr	r3, [pc, #160]	; (80044a0 <MX_TIM3_Init+0xe4>)
 8004400:	f242 7210 	movw	r2, #10000	; 0x2710
 8004404:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004406:	4b26      	ldr	r3, [pc, #152]	; (80044a0 <MX_TIM3_Init+0xe4>)
 8004408:	2200      	movs	r2, #0
 800440a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800440c:	4b24      	ldr	r3, [pc, #144]	; (80044a0 <MX_TIM3_Init+0xe4>)
 800440e:	2200      	movs	r2, #0
 8004410:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8004412:	4823      	ldr	r0, [pc, #140]	; (80044a0 <MX_TIM3_Init+0xe4>)
 8004414:	f006 f9c8 	bl	800a7a8 <HAL_TIM_Base_Init>
 8004418:	4603      	mov	r3, r0
 800441a:	2b00      	cmp	r3, #0
 800441c:	d001      	beq.n	8004422 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 800441e:	f000 fa6f 	bl	8004900 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004422:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004426:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8004428:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800442c:	4619      	mov	r1, r3
 800442e:	481c      	ldr	r0, [pc, #112]	; (80044a0 <MX_TIM3_Init+0xe4>)
 8004430:	f006 fb66 	bl	800ab00 <HAL_TIM_ConfigClockSource>
 8004434:	4603      	mov	r3, r0
 8004436:	2b00      	cmp	r3, #0
 8004438:	d001      	beq.n	800443e <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 800443a:	f000 fa61 	bl	8004900 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800443e:	4818      	ldr	r0, [pc, #96]	; (80044a0 <MX_TIM3_Init+0xe4>)
 8004440:	f006 fa25 	bl	800a88e <HAL_TIM_PWM_Init>
 8004444:	4603      	mov	r3, r0
 8004446:	2b00      	cmp	r3, #0
 8004448:	d001      	beq.n	800444e <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 800444a:	f000 fa59 	bl	8004900 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800444e:	2300      	movs	r3, #0
 8004450:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004452:	2300      	movs	r3, #0
 8004454:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8004456:	f107 0320 	add.w	r3, r7, #32
 800445a:	4619      	mov	r1, r3
 800445c:	4810      	ldr	r0, [pc, #64]	; (80044a0 <MX_TIM3_Init+0xe4>)
 800445e:	f006 ff17 	bl	800b290 <HAL_TIMEx_MasterConfigSynchronization>
 8004462:	4603      	mov	r3, r0
 8004464:	2b00      	cmp	r3, #0
 8004466:	d001      	beq.n	800446c <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8004468:	f000 fa4a 	bl	8004900 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800446c:	2360      	movs	r3, #96	; 0x60
 800446e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8004470:	2300      	movs	r3, #0
 8004472:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004474:	2300      	movs	r3, #0
 8004476:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004478:	2300      	movs	r3, #0
 800447a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800447c:	1d3b      	adds	r3, r7, #4
 800447e:	2208      	movs	r2, #8
 8004480:	4619      	mov	r1, r3
 8004482:	4807      	ldr	r0, [pc, #28]	; (80044a0 <MX_TIM3_Init+0xe4>)
 8004484:	f006 fa76 	bl	800a974 <HAL_TIM_PWM_ConfigChannel>
 8004488:	4603      	mov	r3, r0
 800448a:	2b00      	cmp	r3, #0
 800448c:	d001      	beq.n	8004492 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 800448e:	f000 fa37 	bl	8004900 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8004492:	4803      	ldr	r0, [pc, #12]	; (80044a0 <MX_TIM3_Init+0xe4>)
 8004494:	f000 fd14 	bl	8004ec0 <HAL_TIM_MspPostInit>

}
 8004498:	bf00      	nop
 800449a:	3738      	adds	r7, #56	; 0x38
 800449c:	46bd      	mov	sp, r7
 800449e:	bd80      	pop	{r7, pc}
 80044a0:	20000a54 	.word	0x20000a54
 80044a4:	40000400 	.word	0x40000400

080044a8 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80044a8:	b580      	push	{r7, lr}
 80044aa:	b086      	sub	sp, #24
 80044ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80044ae:	f107 0308 	add.w	r3, r7, #8
 80044b2:	2200      	movs	r2, #0
 80044b4:	601a      	str	r2, [r3, #0]
 80044b6:	605a      	str	r2, [r3, #4]
 80044b8:	609a      	str	r2, [r3, #8]
 80044ba:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80044bc:	463b      	mov	r3, r7
 80044be:	2200      	movs	r2, #0
 80044c0:	601a      	str	r2, [r3, #0]
 80044c2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80044c4:	4b1d      	ldr	r3, [pc, #116]	; (800453c <MX_TIM4_Init+0x94>)
 80044c6:	4a1e      	ldr	r2, [pc, #120]	; (8004540 <MX_TIM4_Init+0x98>)
 80044c8:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80044ca:	4b1c      	ldr	r3, [pc, #112]	; (800453c <MX_TIM4_Init+0x94>)
 80044cc:	2200      	movs	r2, #0
 80044ce:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80044d0:	4b1a      	ldr	r3, [pc, #104]	; (800453c <MX_TIM4_Init+0x94>)
 80044d2:	2200      	movs	r2, #0
 80044d4:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1024;
 80044d6:	4b19      	ldr	r3, [pc, #100]	; (800453c <MX_TIM4_Init+0x94>)
 80044d8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80044dc:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80044de:	4b17      	ldr	r3, [pc, #92]	; (800453c <MX_TIM4_Init+0x94>)
 80044e0:	2200      	movs	r2, #0
 80044e2:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80044e4:	4b15      	ldr	r3, [pc, #84]	; (800453c <MX_TIM4_Init+0x94>)
 80044e6:	2200      	movs	r2, #0
 80044e8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80044ea:	4814      	ldr	r0, [pc, #80]	; (800453c <MX_TIM4_Init+0x94>)
 80044ec:	f006 f95c 	bl	800a7a8 <HAL_TIM_Base_Init>
 80044f0:	4603      	mov	r3, r0
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d001      	beq.n	80044fa <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 80044f6:	f000 fa03 	bl	8004900 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80044fa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80044fe:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8004500:	f107 0308 	add.w	r3, r7, #8
 8004504:	4619      	mov	r1, r3
 8004506:	480d      	ldr	r0, [pc, #52]	; (800453c <MX_TIM4_Init+0x94>)
 8004508:	f006 fafa 	bl	800ab00 <HAL_TIM_ConfigClockSource>
 800450c:	4603      	mov	r3, r0
 800450e:	2b00      	cmp	r3, #0
 8004510:	d001      	beq.n	8004516 <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 8004512:	f000 f9f5 	bl	8004900 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004516:	2300      	movs	r3, #0
 8004518:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800451a:	2300      	movs	r3, #0
 800451c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800451e:	463b      	mov	r3, r7
 8004520:	4619      	mov	r1, r3
 8004522:	4806      	ldr	r0, [pc, #24]	; (800453c <MX_TIM4_Init+0x94>)
 8004524:	f006 feb4 	bl	800b290 <HAL_TIMEx_MasterConfigSynchronization>
 8004528:	4603      	mov	r3, r0
 800452a:	2b00      	cmp	r3, #0
 800452c:	d001      	beq.n	8004532 <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 800452e:	f000 f9e7 	bl	8004900 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8004532:	bf00      	nop
 8004534:	3718      	adds	r7, #24
 8004536:	46bd      	mov	sp, r7
 8004538:	bd80      	pop	{r7, pc}
 800453a:	bf00      	nop
 800453c:	20000940 	.word	0x20000940
 8004540:	40000800 	.word	0x40000800

08004544 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8004544:	b580      	push	{r7, lr}
 8004546:	b08e      	sub	sp, #56	; 0x38
 8004548:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800454a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800454e:	2200      	movs	r2, #0
 8004550:	601a      	str	r2, [r3, #0]
 8004552:	605a      	str	r2, [r3, #4]
 8004554:	609a      	str	r2, [r3, #8]
 8004556:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004558:	f107 0320 	add.w	r3, r7, #32
 800455c:	2200      	movs	r2, #0
 800455e:	601a      	str	r2, [r3, #0]
 8004560:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004562:	1d3b      	adds	r3, r7, #4
 8004564:	2200      	movs	r2, #0
 8004566:	601a      	str	r2, [r3, #0]
 8004568:	605a      	str	r2, [r3, #4]
 800456a:	609a      	str	r2, [r3, #8]
 800456c:	60da      	str	r2, [r3, #12]
 800456e:	611a      	str	r2, [r3, #16]
 8004570:	615a      	str	r2, [r3, #20]
 8004572:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8004574:	4b32      	ldr	r3, [pc, #200]	; (8004640 <MX_TIM5_Init+0xfc>)
 8004576:	4a33      	ldr	r2, [pc, #204]	; (8004644 <MX_TIM5_Init+0x100>)
 8004578:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 800457a:	4b31      	ldr	r3, [pc, #196]	; (8004640 <MX_TIM5_Init+0xfc>)
 800457c:	2200      	movs	r2, #0
 800457e:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED2;
 8004580:	4b2f      	ldr	r3, [pc, #188]	; (8004640 <MX_TIM5_Init+0xfc>)
 8004582:	2240      	movs	r2, #64	; 0x40
 8004584:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 1024;
 8004586:	4b2e      	ldr	r3, [pc, #184]	; (8004640 <MX_TIM5_Init+0xfc>)
 8004588:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800458c:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800458e:	4b2c      	ldr	r3, [pc, #176]	; (8004640 <MX_TIM5_Init+0xfc>)
 8004590:	2200      	movs	r2, #0
 8004592:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004594:	4b2a      	ldr	r3, [pc, #168]	; (8004640 <MX_TIM5_Init+0xfc>)
 8004596:	2200      	movs	r2, #0
 8004598:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 800459a:	4829      	ldr	r0, [pc, #164]	; (8004640 <MX_TIM5_Init+0xfc>)
 800459c:	f006 f904 	bl	800a7a8 <HAL_TIM_Base_Init>
 80045a0:	4603      	mov	r3, r0
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d001      	beq.n	80045aa <MX_TIM5_Init+0x66>
  {
    Error_Handler();
 80045a6:	f000 f9ab 	bl	8004900 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80045aa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80045ae:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80045b0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80045b4:	4619      	mov	r1, r3
 80045b6:	4822      	ldr	r0, [pc, #136]	; (8004640 <MX_TIM5_Init+0xfc>)
 80045b8:	f006 faa2 	bl	800ab00 <HAL_TIM_ConfigClockSource>
 80045bc:	4603      	mov	r3, r0
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d001      	beq.n	80045c6 <MX_TIM5_Init+0x82>
  {
    Error_Handler();
 80045c2:	f000 f99d 	bl	8004900 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 80045c6:	481e      	ldr	r0, [pc, #120]	; (8004640 <MX_TIM5_Init+0xfc>)
 80045c8:	f006 f961 	bl	800a88e <HAL_TIM_PWM_Init>
 80045cc:	4603      	mov	r3, r0
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d001      	beq.n	80045d6 <MX_TIM5_Init+0x92>
  {
    Error_Handler();
 80045d2:	f000 f995 	bl	8004900 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80045d6:	2300      	movs	r3, #0
 80045d8:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80045da:	2300      	movs	r3, #0
 80045dc:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80045de:	f107 0320 	add.w	r3, r7, #32
 80045e2:	4619      	mov	r1, r3
 80045e4:	4816      	ldr	r0, [pc, #88]	; (8004640 <MX_TIM5_Init+0xfc>)
 80045e6:	f006 fe53 	bl	800b290 <HAL_TIMEx_MasterConfigSynchronization>
 80045ea:	4603      	mov	r3, r0
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d001      	beq.n	80045f4 <MX_TIM5_Init+0xb0>
  {
    Error_Handler();
 80045f0:	f000 f986 	bl	8004900 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 80045f4:	2370      	movs	r3, #112	; 0x70
 80045f6:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80045f8:	2300      	movs	r3, #0
 80045fa:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80045fc:	2300      	movs	r3, #0
 80045fe:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004600:	2300      	movs	r3, #0
 8004602:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8004604:	1d3b      	adds	r3, r7, #4
 8004606:	2204      	movs	r2, #4
 8004608:	4619      	mov	r1, r3
 800460a:	480d      	ldr	r0, [pc, #52]	; (8004640 <MX_TIM5_Init+0xfc>)
 800460c:	f006 f9b2 	bl	800a974 <HAL_TIM_PWM_ConfigChannel>
 8004610:	4603      	mov	r3, r0
 8004612:	2b00      	cmp	r3, #0
 8004614:	d001      	beq.n	800461a <MX_TIM5_Init+0xd6>
  {
    Error_Handler();
 8004616:	f000 f973 	bl	8004900 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800461a:	1d3b      	adds	r3, r7, #4
 800461c:	220c      	movs	r2, #12
 800461e:	4619      	mov	r1, r3
 8004620:	4807      	ldr	r0, [pc, #28]	; (8004640 <MX_TIM5_Init+0xfc>)
 8004622:	f006 f9a7 	bl	800a974 <HAL_TIM_PWM_ConfigChannel>
 8004626:	4603      	mov	r3, r0
 8004628:	2b00      	cmp	r3, #0
 800462a:	d001      	beq.n	8004630 <MX_TIM5_Init+0xec>
  {
    Error_Handler();
 800462c:	f000 f968 	bl	8004900 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8004630:	4803      	ldr	r0, [pc, #12]	; (8004640 <MX_TIM5_Init+0xfc>)
 8004632:	f000 fc45 	bl	8004ec0 <HAL_TIM_MspPostInit>

}
 8004636:	bf00      	nop
 8004638:	3738      	adds	r7, #56	; 0x38
 800463a:	46bd      	mov	sp, r7
 800463c:	bd80      	pop	{r7, pc}
 800463e:	bf00      	nop
 8004640:	20000a14 	.word	0x20000a14
 8004644:	40000c00 	.word	0x40000c00

08004648 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8004648:	b580      	push	{r7, lr}
 800464a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800464c:	4b11      	ldr	r3, [pc, #68]	; (8004694 <MX_USART3_UART_Init+0x4c>)
 800464e:	4a12      	ldr	r2, [pc, #72]	; (8004698 <MX_USART3_UART_Init+0x50>)
 8004650:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8004652:	4b10      	ldr	r3, [pc, #64]	; (8004694 <MX_USART3_UART_Init+0x4c>)
 8004654:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8004658:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800465a:	4b0e      	ldr	r3, [pc, #56]	; (8004694 <MX_USART3_UART_Init+0x4c>)
 800465c:	2200      	movs	r2, #0
 800465e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8004660:	4b0c      	ldr	r3, [pc, #48]	; (8004694 <MX_USART3_UART_Init+0x4c>)
 8004662:	2200      	movs	r2, #0
 8004664:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8004666:	4b0b      	ldr	r3, [pc, #44]	; (8004694 <MX_USART3_UART_Init+0x4c>)
 8004668:	2200      	movs	r2, #0
 800466a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800466c:	4b09      	ldr	r3, [pc, #36]	; (8004694 <MX_USART3_UART_Init+0x4c>)
 800466e:	220c      	movs	r2, #12
 8004670:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004672:	4b08      	ldr	r3, [pc, #32]	; (8004694 <MX_USART3_UART_Init+0x4c>)
 8004674:	2200      	movs	r2, #0
 8004676:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8004678:	4b06      	ldr	r3, [pc, #24]	; (8004694 <MX_USART3_UART_Init+0x4c>)
 800467a:	2200      	movs	r2, #0
 800467c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800467e:	4805      	ldr	r0, [pc, #20]	; (8004694 <MX_USART3_UART_Init+0x4c>)
 8004680:	f006 fe82 	bl	800b388 <HAL_UART_Init>
 8004684:	4603      	mov	r3, r0
 8004686:	2b00      	cmp	r3, #0
 8004688:	d001      	beq.n	800468e <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800468a:	f000 f939 	bl	8004900 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800468e:	bf00      	nop
 8004690:	bd80      	pop	{r7, pc}
 8004692:	bf00      	nop
 8004694:	20000980 	.word	0x20000980
 8004698:	40004800 	.word	0x40004800

0800469c <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 800469c:	b580      	push	{r7, lr}
 800469e:	b082      	sub	sp, #8
 80046a0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80046a2:	2300      	movs	r3, #0
 80046a4:	607b      	str	r3, [r7, #4]
 80046a6:	4b18      	ldr	r3, [pc, #96]	; (8004708 <MX_DMA_Init+0x6c>)
 80046a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046aa:	4a17      	ldr	r2, [pc, #92]	; (8004708 <MX_DMA_Init+0x6c>)
 80046ac:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80046b0:	6313      	str	r3, [r2, #48]	; 0x30
 80046b2:	4b15      	ldr	r3, [pc, #84]	; (8004708 <MX_DMA_Init+0x6c>)
 80046b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80046ba:	607b      	str	r3, [r7, #4]
 80046bc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80046be:	2200      	movs	r2, #0
 80046c0:	2100      	movs	r1, #0
 80046c2:	2038      	movs	r0, #56	; 0x38
 80046c4:	f000 fed1 	bl	800546a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80046c8:	2038      	movs	r0, #56	; 0x38
 80046ca:	f000 feea 	bl	80054a2 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 80046ce:	2200      	movs	r2, #0
 80046d0:	2100      	movs	r1, #0
 80046d2:	203b      	movs	r0, #59	; 0x3b
 80046d4:	f000 fec9 	bl	800546a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 80046d8:	203b      	movs	r0, #59	; 0x3b
 80046da:	f000 fee2 	bl	80054a2 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream5_IRQn, 0, 0);
 80046de:	2200      	movs	r2, #0
 80046e0:	2100      	movs	r1, #0
 80046e2:	2044      	movs	r0, #68	; 0x44
 80046e4:	f000 fec1 	bl	800546a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream5_IRQn);
 80046e8:	2044      	movs	r0, #68	; 0x44
 80046ea:	f000 feda 	bl	80054a2 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 80046ee:	2200      	movs	r2, #0
 80046f0:	2100      	movs	r1, #0
 80046f2:	2045      	movs	r0, #69	; 0x45
 80046f4:	f000 feb9 	bl	800546a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 80046f8:	2045      	movs	r0, #69	; 0x45
 80046fa:	f000 fed2 	bl	80054a2 <HAL_NVIC_EnableIRQ>

}
 80046fe:	bf00      	nop
 8004700:	3708      	adds	r7, #8
 8004702:	46bd      	mov	sp, r7
 8004704:	bd80      	pop	{r7, pc}
 8004706:	bf00      	nop
 8004708:	40023800 	.word	0x40023800

0800470c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800470c:	b580      	push	{r7, lr}
 800470e:	b08a      	sub	sp, #40	; 0x28
 8004710:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004712:	f107 0314 	add.w	r3, r7, #20
 8004716:	2200      	movs	r2, #0
 8004718:	601a      	str	r2, [r3, #0]
 800471a:	605a      	str	r2, [r3, #4]
 800471c:	609a      	str	r2, [r3, #8]
 800471e:	60da      	str	r2, [r3, #12]
 8004720:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004722:	2300      	movs	r3, #0
 8004724:	613b      	str	r3, [r7, #16]
 8004726:	4b67      	ldr	r3, [pc, #412]	; (80048c4 <MX_GPIO_Init+0x1b8>)
 8004728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800472a:	4a66      	ldr	r2, [pc, #408]	; (80048c4 <MX_GPIO_Init+0x1b8>)
 800472c:	f043 0304 	orr.w	r3, r3, #4
 8004730:	6313      	str	r3, [r2, #48]	; 0x30
 8004732:	4b64      	ldr	r3, [pc, #400]	; (80048c4 <MX_GPIO_Init+0x1b8>)
 8004734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004736:	f003 0304 	and.w	r3, r3, #4
 800473a:	613b      	str	r3, [r7, #16]
 800473c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800473e:	2300      	movs	r3, #0
 8004740:	60fb      	str	r3, [r7, #12]
 8004742:	4b60      	ldr	r3, [pc, #384]	; (80048c4 <MX_GPIO_Init+0x1b8>)
 8004744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004746:	4a5f      	ldr	r2, [pc, #380]	; (80048c4 <MX_GPIO_Init+0x1b8>)
 8004748:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800474c:	6313      	str	r3, [r2, #48]	; 0x30
 800474e:	4b5d      	ldr	r3, [pc, #372]	; (80048c4 <MX_GPIO_Init+0x1b8>)
 8004750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004752:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004756:	60fb      	str	r3, [r7, #12]
 8004758:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800475a:	2300      	movs	r3, #0
 800475c:	60bb      	str	r3, [r7, #8]
 800475e:	4b59      	ldr	r3, [pc, #356]	; (80048c4 <MX_GPIO_Init+0x1b8>)
 8004760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004762:	4a58      	ldr	r2, [pc, #352]	; (80048c4 <MX_GPIO_Init+0x1b8>)
 8004764:	f043 0301 	orr.w	r3, r3, #1
 8004768:	6313      	str	r3, [r2, #48]	; 0x30
 800476a:	4b56      	ldr	r3, [pc, #344]	; (80048c4 <MX_GPIO_Init+0x1b8>)
 800476c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800476e:	f003 0301 	and.w	r3, r3, #1
 8004772:	60bb      	str	r3, [r7, #8]
 8004774:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004776:	2300      	movs	r3, #0
 8004778:	607b      	str	r3, [r7, #4]
 800477a:	4b52      	ldr	r3, [pc, #328]	; (80048c4 <MX_GPIO_Init+0x1b8>)
 800477c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800477e:	4a51      	ldr	r2, [pc, #324]	; (80048c4 <MX_GPIO_Init+0x1b8>)
 8004780:	f043 0302 	orr.w	r3, r3, #2
 8004784:	6313      	str	r3, [r2, #48]	; 0x30
 8004786:	4b4f      	ldr	r3, [pc, #316]	; (80048c4 <MX_GPIO_Init+0x1b8>)
 8004788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800478a:	f003 0302 	and.w	r3, r3, #2
 800478e:	607b      	str	r3, [r7, #4]
 8004790:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8004792:	2300      	movs	r3, #0
 8004794:	603b      	str	r3, [r7, #0]
 8004796:	4b4b      	ldr	r3, [pc, #300]	; (80048c4 <MX_GPIO_Init+0x1b8>)
 8004798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800479a:	4a4a      	ldr	r2, [pc, #296]	; (80048c4 <MX_GPIO_Init+0x1b8>)
 800479c:	f043 0308 	orr.w	r3, r3, #8
 80047a0:	6313      	str	r3, [r2, #48]	; 0x30
 80047a2:	4b48      	ldr	r3, [pc, #288]	; (80048c4 <MX_GPIO_Init+0x1b8>)
 80047a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047a6:	f003 0308 	and.w	r3, r3, #8
 80047aa:	603b      	str	r3, [r7, #0]
 80047ac:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, P1_Pin|P4_Pin|P2_Pin|P5_Pin 
 80047ae:	2200      	movs	r2, #0
 80047b0:	21ef      	movs	r1, #239	; 0xef
 80047b2:	4845      	ldr	r0, [pc, #276]	; (80048c8 <MX_GPIO_Init+0x1bc>)
 80047b4:	f001 fbde 	bl	8005f74 <HAL_GPIO_WritePin>
                          |LR_RESET_Pin|LEDB_Pin|LEDA_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, PH_L_Pin|PH_R_Pin|P7_Pin, GPIO_PIN_RESET);
 80047b8:	2200      	movs	r2, #0
 80047ba:	2115      	movs	r1, #21
 80047bc:	4843      	ldr	r0, [pc, #268]	; (80048cc <MX_GPIO_Init+0x1c0>)
 80047be:	f001 fbd9 	bl	8005f74 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LEDD_Pin|LEDC_Pin|LR_NSS_Pin, GPIO_PIN_RESET);
 80047c2:	2200      	movs	r2, #0
 80047c4:	f44f 5148 	mov.w	r1, #12800	; 0x3200
 80047c8:	4841      	ldr	r0, [pc, #260]	; (80048d0 <MX_GPIO_Init+0x1c4>)
 80047ca:	f001 fbd3 	bl	8005f74 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : P1_Pin P4_Pin P2_Pin P5_Pin 
                           LR_RESET_Pin LEDA_Pin */
  GPIO_InitStruct.Pin = P1_Pin|P4_Pin|P2_Pin|P5_Pin 
 80047ce:	23af      	movs	r3, #175	; 0xaf
 80047d0:	617b      	str	r3, [r7, #20]
                          |LR_RESET_Pin|LEDA_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80047d2:	2301      	movs	r3, #1
 80047d4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80047d6:	2300      	movs	r3, #0
 80047d8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80047da:	2300      	movs	r3, #0
 80047dc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80047de:	f107 0314 	add.w	r3, r7, #20
 80047e2:	4619      	mov	r1, r3
 80047e4:	4838      	ldr	r0, [pc, #224]	; (80048c8 <MX_GPIO_Init+0x1bc>)
 80047e6:	f001 fa13 	bl	8005c10 <HAL_GPIO_Init>

  /*Configure GPIO pins : PH_L_Pin PH_R_Pin P7_Pin */
  GPIO_InitStruct.Pin = PH_L_Pin|PH_R_Pin|P7_Pin;
 80047ea:	2315      	movs	r3, #21
 80047ec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80047ee:	2301      	movs	r3, #1
 80047f0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80047f2:	2300      	movs	r3, #0
 80047f4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80047f6:	2300      	movs	r3, #0
 80047f8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80047fa:	f107 0314 	add.w	r3, r7, #20
 80047fe:	4619      	mov	r1, r3
 8004800:	4832      	ldr	r0, [pc, #200]	; (80048cc <MX_GPIO_Init+0x1c0>)
 8004802:	f001 fa05 	bl	8005c10 <HAL_GPIO_Init>

  /*Configure GPIO pin : LR_DIO0_Pin */
  GPIO_InitStruct.Pin = LR_DIO0_Pin;
 8004806:	2340      	movs	r3, #64	; 0x40
 8004808:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800480a:	4b32      	ldr	r3, [pc, #200]	; (80048d4 <MX_GPIO_Init+0x1c8>)
 800480c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800480e:	2302      	movs	r3, #2
 8004810:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LR_DIO0_GPIO_Port, &GPIO_InitStruct);
 8004812:	f107 0314 	add.w	r3, r7, #20
 8004816:	4619      	mov	r1, r3
 8004818:	482c      	ldr	r0, [pc, #176]	; (80048cc <MX_GPIO_Init+0x1c0>)
 800481a:	f001 f9f9 	bl	8005c10 <HAL_GPIO_Init>

  /*Configure GPIO pins : LR_TIM_Pin SDIO_SW_Pin */
  GPIO_InitStruct.Pin = LR_TIM_Pin|SDIO_SW_Pin;
 800481e:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8004822:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004824:	2300      	movs	r3, #0
 8004826:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004828:	2300      	movs	r3, #0
 800482a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800482c:	f107 0314 	add.w	r3, r7, #20
 8004830:	4619      	mov	r1, r3
 8004832:	4826      	ldr	r0, [pc, #152]	; (80048cc <MX_GPIO_Init+0x1c0>)
 8004834:	f001 f9ec 	bl	8005c10 <HAL_GPIO_Init>

  /*Configure GPIO pins : LEDD_Pin LEDC_Pin */
  GPIO_InitStruct.Pin = LEDD_Pin|LEDC_Pin;
 8004838:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800483c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800483e:	2301      	movs	r3, #1
 8004840:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8004842:	2302      	movs	r3, #2
 8004844:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004846:	2300      	movs	r3, #0
 8004848:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800484a:	f107 0314 	add.w	r3, r7, #20
 800484e:	4619      	mov	r1, r3
 8004850:	481f      	ldr	r0, [pc, #124]	; (80048d0 <MX_GPIO_Init+0x1c4>)
 8004852:	f001 f9dd 	bl	8005c10 <HAL_GPIO_Init>

  /*Configure GPIO pin : LEDB_Pin */
  GPIO_InitStruct.Pin = LEDB_Pin;
 8004856:	2340      	movs	r3, #64	; 0x40
 8004858:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800485a:	2301      	movs	r3, #1
 800485c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800485e:	2302      	movs	r3, #2
 8004860:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004862:	2300      	movs	r3, #0
 8004864:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LEDB_GPIO_Port, &GPIO_InitStruct);
 8004866:	f107 0314 	add.w	r3, r7, #20
 800486a:	4619      	mov	r1, r3
 800486c:	4816      	ldr	r0, [pc, #88]	; (80048c8 <MX_GPIO_Init+0x1bc>)
 800486e:	f001 f9cf 	bl	8005c10 <HAL_GPIO_Init>

  /*Configure GPIO pin : BTN_USR_Pin */
  GPIO_InitStruct.Pin = BTN_USR_Pin;
 8004872:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004876:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004878:	2300      	movs	r3, #0
 800487a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800487c:	2301      	movs	r3, #1
 800487e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BTN_USR_GPIO_Port, &GPIO_InitStruct);
 8004880:	f107 0314 	add.w	r3, r7, #20
 8004884:	4619      	mov	r1, r3
 8004886:	4811      	ldr	r0, [pc, #68]	; (80048cc <MX_GPIO_Init+0x1c0>)
 8004888:	f001 f9c2 	bl	8005c10 <HAL_GPIO_Init>

  /*Configure GPIO pin : LR_NSS_Pin */
  GPIO_InitStruct.Pin = LR_NSS_Pin;
 800488c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004890:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004892:	2301      	movs	r3, #1
 8004894:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004896:	2300      	movs	r3, #0
 8004898:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800489a:	2300      	movs	r3, #0
 800489c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LR_NSS_GPIO_Port, &GPIO_InitStruct);
 800489e:	f107 0314 	add.w	r3, r7, #20
 80048a2:	4619      	mov	r1, r3
 80048a4:	480a      	ldr	r0, [pc, #40]	; (80048d0 <MX_GPIO_Init+0x1c4>)
 80048a6:	f001 f9b3 	bl	8005c10 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80048aa:	2200      	movs	r2, #0
 80048ac:	2100      	movs	r1, #0
 80048ae:	2017      	movs	r0, #23
 80048b0:	f000 fddb 	bl	800546a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80048b4:	2017      	movs	r0, #23
 80048b6:	f000 fdf4 	bl	80054a2 <HAL_NVIC_EnableIRQ>

}
 80048ba:	bf00      	nop
 80048bc:	3728      	adds	r7, #40	; 0x28
 80048be:	46bd      	mov	sp, r7
 80048c0:	bd80      	pop	{r7, pc}
 80048c2:	bf00      	nop
 80048c4:	40023800 	.word	0x40023800
 80048c8:	40020800 	.word	0x40020800
 80048cc:	40020000 	.word	0x40020000
 80048d0:	40020400 	.word	0x40020400
 80048d4:	10110000 	.word	0x10110000

080048d8 <Get_I2C1_Instance>:

/* USER CODE BEGIN 4 */

I2C_HandleTypeDef* Get_I2C1_Instance(void) { return &hi2c1; }
 80048d8:	b480      	push	{r7}
 80048da:	af00      	add	r7, sp, #0
 80048dc:	4b02      	ldr	r3, [pc, #8]	; (80048e8 <Get_I2C1_Instance+0x10>)
 80048de:	4618      	mov	r0, r3
 80048e0:	46bd      	mov	sp, r7
 80048e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e6:	4770      	bx	lr
 80048e8:	200009c0 	.word	0x200009c0

080048ec <Get_TIM5_Instance>:
SPI_HandleTypeDef* Get_SPI1_Instance(void) { return &hspi1; }
UART_HandleTypeDef* Get_UART3_Instance(void) { return &huart3; }
RTC_HandleTypeDef* Get_RTC_Instance(void) { return &hrtc; }
TIM_HandleTypeDef* Get_TIM2_Instance(void) { return &htim2; }
TIM_HandleTypeDef* Get_TIM3_Instance(void) { return &htim3; }
TIM_HandleTypeDef* Get_TIM5_Instance(void) { return &htim5; }
 80048ec:	b480      	push	{r7}
 80048ee:	af00      	add	r7, sp, #0
 80048f0:	4b02      	ldr	r3, [pc, #8]	; (80048fc <Get_TIM5_Instance+0x10>)
 80048f2:	4618      	mov	r0, r3
 80048f4:	46bd      	mov	sp, r7
 80048f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048fa:	4770      	bx	lr
 80048fc:	20000a14 	.word	0x20000a14

08004900 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004900:	b480      	push	{r7}
 8004902:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8004904:	bf00      	nop
 8004906:	46bd      	mov	sp, r7
 8004908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800490c:	4770      	bx	lr
	...

08004910 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004910:	b480      	push	{r7}
 8004912:	b083      	sub	sp, #12
 8004914:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004916:	2300      	movs	r3, #0
 8004918:	607b      	str	r3, [r7, #4]
 800491a:	4b10      	ldr	r3, [pc, #64]	; (800495c <HAL_MspInit+0x4c>)
 800491c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800491e:	4a0f      	ldr	r2, [pc, #60]	; (800495c <HAL_MspInit+0x4c>)
 8004920:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004924:	6453      	str	r3, [r2, #68]	; 0x44
 8004926:	4b0d      	ldr	r3, [pc, #52]	; (800495c <HAL_MspInit+0x4c>)
 8004928:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800492a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800492e:	607b      	str	r3, [r7, #4]
 8004930:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004932:	2300      	movs	r3, #0
 8004934:	603b      	str	r3, [r7, #0]
 8004936:	4b09      	ldr	r3, [pc, #36]	; (800495c <HAL_MspInit+0x4c>)
 8004938:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800493a:	4a08      	ldr	r2, [pc, #32]	; (800495c <HAL_MspInit+0x4c>)
 800493c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004940:	6413      	str	r3, [r2, #64]	; 0x40
 8004942:	4b06      	ldr	r3, [pc, #24]	; (800495c <HAL_MspInit+0x4c>)
 8004944:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004946:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800494a:	603b      	str	r3, [r7, #0]
 800494c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800494e:	bf00      	nop
 8004950:	370c      	adds	r7, #12
 8004952:	46bd      	mov	sp, r7
 8004954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004958:	4770      	bx	lr
 800495a:	bf00      	nop
 800495c:	40023800 	.word	0x40023800

08004960 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8004960:	b580      	push	{r7, lr}
 8004962:	b08a      	sub	sp, #40	; 0x28
 8004964:	af00      	add	r7, sp, #0
 8004966:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004968:	f107 0314 	add.w	r3, r7, #20
 800496c:	2200      	movs	r2, #0
 800496e:	601a      	str	r2, [r3, #0]
 8004970:	605a      	str	r2, [r3, #4]
 8004972:	609a      	str	r2, [r3, #8]
 8004974:	60da      	str	r2, [r3, #12]
 8004976:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	4a19      	ldr	r2, [pc, #100]	; (80049e4 <HAL_I2C_MspInit+0x84>)
 800497e:	4293      	cmp	r3, r2
 8004980:	d12b      	bne.n	80049da <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004982:	2300      	movs	r3, #0
 8004984:	613b      	str	r3, [r7, #16]
 8004986:	4b18      	ldr	r3, [pc, #96]	; (80049e8 <HAL_I2C_MspInit+0x88>)
 8004988:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800498a:	4a17      	ldr	r2, [pc, #92]	; (80049e8 <HAL_I2C_MspInit+0x88>)
 800498c:	f043 0302 	orr.w	r3, r3, #2
 8004990:	6313      	str	r3, [r2, #48]	; 0x30
 8004992:	4b15      	ldr	r3, [pc, #84]	; (80049e8 <HAL_I2C_MspInit+0x88>)
 8004994:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004996:	f003 0302 	and.w	r3, r3, #2
 800499a:	613b      	str	r3, [r7, #16]
 800499c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = SCL_Pin|SDA_Pin;
 800499e:	23c0      	movs	r3, #192	; 0xc0
 80049a0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80049a2:	2312      	movs	r3, #18
 80049a4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80049a6:	2300      	movs	r3, #0
 80049a8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80049aa:	2303      	movs	r3, #3
 80049ac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80049ae:	2304      	movs	r3, #4
 80049b0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80049b2:	f107 0314 	add.w	r3, r7, #20
 80049b6:	4619      	mov	r1, r3
 80049b8:	480c      	ldr	r0, [pc, #48]	; (80049ec <HAL_I2C_MspInit+0x8c>)
 80049ba:	f001 f929 	bl	8005c10 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80049be:	2300      	movs	r3, #0
 80049c0:	60fb      	str	r3, [r7, #12]
 80049c2:	4b09      	ldr	r3, [pc, #36]	; (80049e8 <HAL_I2C_MspInit+0x88>)
 80049c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049c6:	4a08      	ldr	r2, [pc, #32]	; (80049e8 <HAL_I2C_MspInit+0x88>)
 80049c8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80049cc:	6413      	str	r3, [r2, #64]	; 0x40
 80049ce:	4b06      	ldr	r3, [pc, #24]	; (80049e8 <HAL_I2C_MspInit+0x88>)
 80049d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049d2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80049d6:	60fb      	str	r3, [r7, #12]
 80049d8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80049da:	bf00      	nop
 80049dc:	3728      	adds	r7, #40	; 0x28
 80049de:	46bd      	mov	sp, r7
 80049e0:	bd80      	pop	{r7, pc}
 80049e2:	bf00      	nop
 80049e4:	40005400 	.word	0x40005400
 80049e8:	40023800 	.word	0x40023800
 80049ec:	40020400 	.word	0x40020400

080049f0 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80049f0:	b480      	push	{r7}
 80049f2:	b083      	sub	sp, #12
 80049f4:	af00      	add	r7, sp, #0
 80049f6:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	4a05      	ldr	r2, [pc, #20]	; (8004a14 <HAL_RTC_MspInit+0x24>)
 80049fe:	4293      	cmp	r3, r2
 8004a00:	d102      	bne.n	8004a08 <HAL_RTC_MspInit+0x18>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8004a02:	4b05      	ldr	r3, [pc, #20]	; (8004a18 <HAL_RTC_MspInit+0x28>)
 8004a04:	2201      	movs	r2, #1
 8004a06:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8004a08:	bf00      	nop
 8004a0a:	370c      	adds	r7, #12
 8004a0c:	46bd      	mov	sp, r7
 8004a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a12:	4770      	bx	lr
 8004a14:	40002800 	.word	0x40002800
 8004a18:	42470e3c 	.word	0x42470e3c

08004a1c <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8004a1c:	b580      	push	{r7, lr}
 8004a1e:	b08a      	sub	sp, #40	; 0x28
 8004a20:	af00      	add	r7, sp, #0
 8004a22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004a24:	f107 0314 	add.w	r3, r7, #20
 8004a28:	2200      	movs	r2, #0
 8004a2a:	601a      	str	r2, [r3, #0]
 8004a2c:	605a      	str	r2, [r3, #4]
 8004a2e:	609a      	str	r2, [r3, #8]
 8004a30:	60da      	str	r2, [r3, #12]
 8004a32:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	4a70      	ldr	r2, [pc, #448]	; (8004bfc <HAL_SD_MspInit+0x1e0>)
 8004a3a:	4293      	cmp	r3, r2
 8004a3c:	f040 80da 	bne.w	8004bf4 <HAL_SD_MspInit+0x1d8>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 8004a40:	2300      	movs	r3, #0
 8004a42:	613b      	str	r3, [r7, #16]
 8004a44:	4b6e      	ldr	r3, [pc, #440]	; (8004c00 <HAL_SD_MspInit+0x1e4>)
 8004a46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a48:	4a6d      	ldr	r2, [pc, #436]	; (8004c00 <HAL_SD_MspInit+0x1e4>)
 8004a4a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004a4e:	6453      	str	r3, [r2, #68]	; 0x44
 8004a50:	4b6b      	ldr	r3, [pc, #428]	; (8004c00 <HAL_SD_MspInit+0x1e4>)
 8004a52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a54:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004a58:	613b      	str	r3, [r7, #16]
 8004a5a:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004a5c:	2300      	movs	r3, #0
 8004a5e:	60fb      	str	r3, [r7, #12]
 8004a60:	4b67      	ldr	r3, [pc, #412]	; (8004c00 <HAL_SD_MspInit+0x1e4>)
 8004a62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a64:	4a66      	ldr	r2, [pc, #408]	; (8004c00 <HAL_SD_MspInit+0x1e4>)
 8004a66:	f043 0304 	orr.w	r3, r3, #4
 8004a6a:	6313      	str	r3, [r2, #48]	; 0x30
 8004a6c:	4b64      	ldr	r3, [pc, #400]	; (8004c00 <HAL_SD_MspInit+0x1e4>)
 8004a6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a70:	f003 0304 	and.w	r3, r3, #4
 8004a74:	60fb      	str	r3, [r7, #12]
 8004a76:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8004a78:	2300      	movs	r3, #0
 8004a7a:	60bb      	str	r3, [r7, #8]
 8004a7c:	4b60      	ldr	r3, [pc, #384]	; (8004c00 <HAL_SD_MspInit+0x1e4>)
 8004a7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a80:	4a5f      	ldr	r2, [pc, #380]	; (8004c00 <HAL_SD_MspInit+0x1e4>)
 8004a82:	f043 0308 	orr.w	r3, r3, #8
 8004a86:	6313      	str	r3, [r2, #48]	; 0x30
 8004a88:	4b5d      	ldr	r3, [pc, #372]	; (8004c00 <HAL_SD_MspInit+0x1e4>)
 8004a8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a8c:	f003 0308 	and.w	r3, r3, #8
 8004a90:	60bb      	str	r3, [r7, #8]
 8004a92:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDIO_D2
    PC11     ------> SDIO_D3
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8004a94:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8004a98:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004a9a:	2302      	movs	r3, #2
 8004a9c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004a9e:	2301      	movs	r3, #1
 8004aa0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004aa2:	2303      	movs	r3, #3
 8004aa4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8004aa6:	230c      	movs	r3, #12
 8004aa8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004aaa:	f107 0314 	add.w	r3, r7, #20
 8004aae:	4619      	mov	r1, r3
 8004ab0:	4854      	ldr	r0, [pc, #336]	; (8004c04 <HAL_SD_MspInit+0x1e8>)
 8004ab2:	f001 f8ad 	bl	8005c10 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8004ab6:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8004aba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004abc:	2302      	movs	r3, #2
 8004abe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ac0:	2300      	movs	r3, #0
 8004ac2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004ac4:	2303      	movs	r3, #3
 8004ac6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8004ac8:	230c      	movs	r3, #12
 8004aca:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004acc:	f107 0314 	add.w	r3, r7, #20
 8004ad0:	4619      	mov	r1, r3
 8004ad2:	484c      	ldr	r0, [pc, #304]	; (8004c04 <HAL_SD_MspInit+0x1e8>)
 8004ad4:	f001 f89c 	bl	8005c10 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8004ad8:	2304      	movs	r3, #4
 8004ada:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004adc:	2302      	movs	r3, #2
 8004ade:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004ae0:	2301      	movs	r3, #1
 8004ae2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004ae4:	2303      	movs	r3, #3
 8004ae6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8004ae8:	230c      	movs	r3, #12
 8004aea:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004aec:	f107 0314 	add.w	r3, r7, #20
 8004af0:	4619      	mov	r1, r3
 8004af2:	4845      	ldr	r0, [pc, #276]	; (8004c08 <HAL_SD_MspInit+0x1ec>)
 8004af4:	f001 f88c 	bl	8005c10 <HAL_GPIO_Init>

    /* SDIO DMA Init */
    /* SDIO_RX Init */
    hdma_sdio_rx.Instance = DMA2_Stream3;
 8004af8:	4b44      	ldr	r3, [pc, #272]	; (8004c0c <HAL_SD_MspInit+0x1f0>)
 8004afa:	4a45      	ldr	r2, [pc, #276]	; (8004c10 <HAL_SD_MspInit+0x1f4>)
 8004afc:	601a      	str	r2, [r3, #0]
    hdma_sdio_rx.Init.Channel = DMA_CHANNEL_4;
 8004afe:	4b43      	ldr	r3, [pc, #268]	; (8004c0c <HAL_SD_MspInit+0x1f0>)
 8004b00:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004b04:	605a      	str	r2, [r3, #4]
    hdma_sdio_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004b06:	4b41      	ldr	r3, [pc, #260]	; (8004c0c <HAL_SD_MspInit+0x1f0>)
 8004b08:	2200      	movs	r2, #0
 8004b0a:	609a      	str	r2, [r3, #8]
    hdma_sdio_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004b0c:	4b3f      	ldr	r3, [pc, #252]	; (8004c0c <HAL_SD_MspInit+0x1f0>)
 8004b0e:	2200      	movs	r2, #0
 8004b10:	60da      	str	r2, [r3, #12]
    hdma_sdio_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004b12:	4b3e      	ldr	r3, [pc, #248]	; (8004c0c <HAL_SD_MspInit+0x1f0>)
 8004b14:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004b18:	611a      	str	r2, [r3, #16]
    hdma_sdio_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8004b1a:	4b3c      	ldr	r3, [pc, #240]	; (8004c0c <HAL_SD_MspInit+0x1f0>)
 8004b1c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004b20:	615a      	str	r2, [r3, #20]
    hdma_sdio_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8004b22:	4b3a      	ldr	r3, [pc, #232]	; (8004c0c <HAL_SD_MspInit+0x1f0>)
 8004b24:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004b28:	619a      	str	r2, [r3, #24]
    hdma_sdio_rx.Init.Mode = DMA_PFCTRL;
 8004b2a:	4b38      	ldr	r3, [pc, #224]	; (8004c0c <HAL_SD_MspInit+0x1f0>)
 8004b2c:	2220      	movs	r2, #32
 8004b2e:	61da      	str	r2, [r3, #28]
    hdma_sdio_rx.Init.Priority = DMA_PRIORITY_LOW;
 8004b30:	4b36      	ldr	r3, [pc, #216]	; (8004c0c <HAL_SD_MspInit+0x1f0>)
 8004b32:	2200      	movs	r2, #0
 8004b34:	621a      	str	r2, [r3, #32]
    hdma_sdio_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8004b36:	4b35      	ldr	r3, [pc, #212]	; (8004c0c <HAL_SD_MspInit+0x1f0>)
 8004b38:	2204      	movs	r2, #4
 8004b3a:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8004b3c:	4b33      	ldr	r3, [pc, #204]	; (8004c0c <HAL_SD_MspInit+0x1f0>)
 8004b3e:	2203      	movs	r2, #3
 8004b40:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_rx.Init.MemBurst = DMA_MBURST_INC4;
 8004b42:	4b32      	ldr	r3, [pc, #200]	; (8004c0c <HAL_SD_MspInit+0x1f0>)
 8004b44:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8004b48:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 8004b4a:	4b30      	ldr	r3, [pc, #192]	; (8004c0c <HAL_SD_MspInit+0x1f0>)
 8004b4c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8004b50:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_rx) != HAL_OK)
 8004b52:	482e      	ldr	r0, [pc, #184]	; (8004c0c <HAL_SD_MspInit+0x1f0>)
 8004b54:	f000 fcc0 	bl	80054d8 <HAL_DMA_Init>
 8004b58:	4603      	mov	r3, r0
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d001      	beq.n	8004b62 <HAL_SD_MspInit+0x146>
    {
      Error_Handler();
 8004b5e:	f7ff fecf 	bl	8004900 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmarx,hdma_sdio_rx);
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	4a29      	ldr	r2, [pc, #164]	; (8004c0c <HAL_SD_MspInit+0x1f0>)
 8004b66:	641a      	str	r2, [r3, #64]	; 0x40
 8004b68:	4a28      	ldr	r2, [pc, #160]	; (8004c0c <HAL_SD_MspInit+0x1f0>)
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO_TX Init */
    hdma_sdio_tx.Instance = DMA2_Stream6;
 8004b6e:	4b29      	ldr	r3, [pc, #164]	; (8004c14 <HAL_SD_MspInit+0x1f8>)
 8004b70:	4a29      	ldr	r2, [pc, #164]	; (8004c18 <HAL_SD_MspInit+0x1fc>)
 8004b72:	601a      	str	r2, [r3, #0]
    hdma_sdio_tx.Init.Channel = DMA_CHANNEL_4;
 8004b74:	4b27      	ldr	r3, [pc, #156]	; (8004c14 <HAL_SD_MspInit+0x1f8>)
 8004b76:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004b7a:	605a      	str	r2, [r3, #4]
    hdma_sdio_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004b7c:	4b25      	ldr	r3, [pc, #148]	; (8004c14 <HAL_SD_MspInit+0x1f8>)
 8004b7e:	2240      	movs	r2, #64	; 0x40
 8004b80:	609a      	str	r2, [r3, #8]
    hdma_sdio_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004b82:	4b24      	ldr	r3, [pc, #144]	; (8004c14 <HAL_SD_MspInit+0x1f8>)
 8004b84:	2200      	movs	r2, #0
 8004b86:	60da      	str	r2, [r3, #12]
    hdma_sdio_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004b88:	4b22      	ldr	r3, [pc, #136]	; (8004c14 <HAL_SD_MspInit+0x1f8>)
 8004b8a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004b8e:	611a      	str	r2, [r3, #16]
    hdma_sdio_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8004b90:	4b20      	ldr	r3, [pc, #128]	; (8004c14 <HAL_SD_MspInit+0x1f8>)
 8004b92:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004b96:	615a      	str	r2, [r3, #20]
    hdma_sdio_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8004b98:	4b1e      	ldr	r3, [pc, #120]	; (8004c14 <HAL_SD_MspInit+0x1f8>)
 8004b9a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004b9e:	619a      	str	r2, [r3, #24]
    hdma_sdio_tx.Init.Mode = DMA_PFCTRL;
 8004ba0:	4b1c      	ldr	r3, [pc, #112]	; (8004c14 <HAL_SD_MspInit+0x1f8>)
 8004ba2:	2220      	movs	r2, #32
 8004ba4:	61da      	str	r2, [r3, #28]
    hdma_sdio_tx.Init.Priority = DMA_PRIORITY_LOW;
 8004ba6:	4b1b      	ldr	r3, [pc, #108]	; (8004c14 <HAL_SD_MspInit+0x1f8>)
 8004ba8:	2200      	movs	r2, #0
 8004baa:	621a      	str	r2, [r3, #32]
    hdma_sdio_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8004bac:	4b19      	ldr	r3, [pc, #100]	; (8004c14 <HAL_SD_MspInit+0x1f8>)
 8004bae:	2204      	movs	r2, #4
 8004bb0:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8004bb2:	4b18      	ldr	r3, [pc, #96]	; (8004c14 <HAL_SD_MspInit+0x1f8>)
 8004bb4:	2203      	movs	r2, #3
 8004bb6:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_tx.Init.MemBurst = DMA_MBURST_INC4;
 8004bb8:	4b16      	ldr	r3, [pc, #88]	; (8004c14 <HAL_SD_MspInit+0x1f8>)
 8004bba:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8004bbe:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 8004bc0:	4b14      	ldr	r3, [pc, #80]	; (8004c14 <HAL_SD_MspInit+0x1f8>)
 8004bc2:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8004bc6:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_tx) != HAL_OK)
 8004bc8:	4812      	ldr	r0, [pc, #72]	; (8004c14 <HAL_SD_MspInit+0x1f8>)
 8004bca:	f000 fc85 	bl	80054d8 <HAL_DMA_Init>
 8004bce:	4603      	mov	r3, r0
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d001      	beq.n	8004bd8 <HAL_SD_MspInit+0x1bc>
    {
      Error_Handler();
 8004bd4:	f7ff fe94 	bl	8004900 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmatx,hdma_sdio_tx);
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	4a0e      	ldr	r2, [pc, #56]	; (8004c14 <HAL_SD_MspInit+0x1f8>)
 8004bdc:	63da      	str	r2, [r3, #60]	; 0x3c
 8004bde:	4a0d      	ldr	r2, [pc, #52]	; (8004c14 <HAL_SD_MspInit+0x1f8>)
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO interrupt Init */
    HAL_NVIC_SetPriority(SDIO_IRQn, 0, 0);
 8004be4:	2200      	movs	r2, #0
 8004be6:	2100      	movs	r1, #0
 8004be8:	2031      	movs	r0, #49	; 0x31
 8004bea:	f000 fc3e 	bl	800546a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDIO_IRQn);
 8004bee:	2031      	movs	r0, #49	; 0x31
 8004bf0:	f000 fc57 	bl	80054a2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 8004bf4:	bf00      	nop
 8004bf6:	3728      	adds	r7, #40	; 0x28
 8004bf8:	46bd      	mov	sp, r7
 8004bfa:	bd80      	pop	{r7, pc}
 8004bfc:	40012c00 	.word	0x40012c00
 8004c00:	40023800 	.word	0x40023800
 8004c04:	40020800 	.word	0x40020800
 8004c08:	40020c00 	.word	0x40020c00
 8004c0c:	200008e0 	.word	0x200008e0
 8004c10:	40026458 	.word	0x40026458
 8004c14:	20000ab4 	.word	0x20000ab4
 8004c18:	400264a0 	.word	0x400264a0

08004c1c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8004c1c:	b580      	push	{r7, lr}
 8004c1e:	b08a      	sub	sp, #40	; 0x28
 8004c20:	af00      	add	r7, sp, #0
 8004c22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004c24:	f107 0314 	add.w	r3, r7, #20
 8004c28:	2200      	movs	r2, #0
 8004c2a:	601a      	str	r2, [r3, #0]
 8004c2c:	605a      	str	r2, [r3, #4]
 8004c2e:	609a      	str	r2, [r3, #8]
 8004c30:	60da      	str	r2, [r3, #12]
 8004c32:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	4a4b      	ldr	r2, [pc, #300]	; (8004d68 <HAL_SPI_MspInit+0x14c>)
 8004c3a:	4293      	cmp	r3, r2
 8004c3c:	f040 8090 	bne.w	8004d60 <HAL_SPI_MspInit+0x144>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8004c40:	2300      	movs	r3, #0
 8004c42:	613b      	str	r3, [r7, #16]
 8004c44:	4b49      	ldr	r3, [pc, #292]	; (8004d6c <HAL_SPI_MspInit+0x150>)
 8004c46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c48:	4a48      	ldr	r2, [pc, #288]	; (8004d6c <HAL_SPI_MspInit+0x150>)
 8004c4a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004c4e:	6453      	str	r3, [r2, #68]	; 0x44
 8004c50:	4b46      	ldr	r3, [pc, #280]	; (8004d6c <HAL_SPI_MspInit+0x150>)
 8004c52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c54:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004c58:	613b      	str	r3, [r7, #16]
 8004c5a:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004c5c:	2300      	movs	r3, #0
 8004c5e:	60fb      	str	r3, [r7, #12]
 8004c60:	4b42      	ldr	r3, [pc, #264]	; (8004d6c <HAL_SPI_MspInit+0x150>)
 8004c62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c64:	4a41      	ldr	r2, [pc, #260]	; (8004d6c <HAL_SPI_MspInit+0x150>)
 8004c66:	f043 0302 	orr.w	r3, r3, #2
 8004c6a:	6313      	str	r3, [r2, #48]	; 0x30
 8004c6c:	4b3f      	ldr	r3, [pc, #252]	; (8004d6c <HAL_SPI_MspInit+0x150>)
 8004c6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c70:	f003 0302 	and.w	r3, r3, #2
 8004c74:	60fb      	str	r3, [r7, #12]
 8004c76:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration    
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = LR_SCK_Pin|LR_MISO_Pin|LR_MOSI_Pin;
 8004c78:	2338      	movs	r3, #56	; 0x38
 8004c7a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004c7c:	2302      	movs	r3, #2
 8004c7e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c80:	2300      	movs	r3, #0
 8004c82:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004c84:	2303      	movs	r3, #3
 8004c86:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8004c88:	2305      	movs	r3, #5
 8004c8a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004c8c:	f107 0314 	add.w	r3, r7, #20
 8004c90:	4619      	mov	r1, r3
 8004c92:	4837      	ldr	r0, [pc, #220]	; (8004d70 <HAL_SPI_MspInit+0x154>)
 8004c94:	f000 ffbc 	bl	8005c10 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA2_Stream0;
 8004c98:	4b36      	ldr	r3, [pc, #216]	; (8004d74 <HAL_SPI_MspInit+0x158>)
 8004c9a:	4a37      	ldr	r2, [pc, #220]	; (8004d78 <HAL_SPI_MspInit+0x15c>)
 8004c9c:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Channel = DMA_CHANNEL_3;
 8004c9e:	4b35      	ldr	r3, [pc, #212]	; (8004d74 <HAL_SPI_MspInit+0x158>)
 8004ca0:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8004ca4:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004ca6:	4b33      	ldr	r3, [pc, #204]	; (8004d74 <HAL_SPI_MspInit+0x158>)
 8004ca8:	2200      	movs	r2, #0
 8004caa:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004cac:	4b31      	ldr	r3, [pc, #196]	; (8004d74 <HAL_SPI_MspInit+0x158>)
 8004cae:	2200      	movs	r2, #0
 8004cb0:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004cb2:	4b30      	ldr	r3, [pc, #192]	; (8004d74 <HAL_SPI_MspInit+0x158>)
 8004cb4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004cb8:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004cba:	4b2e      	ldr	r3, [pc, #184]	; (8004d74 <HAL_SPI_MspInit+0x158>)
 8004cbc:	2200      	movs	r2, #0
 8004cbe:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004cc0:	4b2c      	ldr	r3, [pc, #176]	; (8004d74 <HAL_SPI_MspInit+0x158>)
 8004cc2:	2200      	movs	r2, #0
 8004cc4:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 8004cc6:	4b2b      	ldr	r3, [pc, #172]	; (8004d74 <HAL_SPI_MspInit+0x158>)
 8004cc8:	2200      	movs	r2, #0
 8004cca:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8004ccc:	4b29      	ldr	r3, [pc, #164]	; (8004d74 <HAL_SPI_MspInit+0x158>)
 8004cce:	2200      	movs	r2, #0
 8004cd0:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004cd2:	4b28      	ldr	r3, [pc, #160]	; (8004d74 <HAL_SPI_MspInit+0x158>)
 8004cd4:	2200      	movs	r2, #0
 8004cd6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8004cd8:	4826      	ldr	r0, [pc, #152]	; (8004d74 <HAL_SPI_MspInit+0x158>)
 8004cda:	f000 fbfd 	bl	80054d8 <HAL_DMA_Init>
 8004cde:	4603      	mov	r3, r0
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d001      	beq.n	8004ce8 <HAL_SPI_MspInit+0xcc>
    {
      Error_Handler();
 8004ce4:	f7ff fe0c 	bl	8004900 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi1_rx);
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	4a22      	ldr	r2, [pc, #136]	; (8004d74 <HAL_SPI_MspInit+0x158>)
 8004cec:	64da      	str	r2, [r3, #76]	; 0x4c
 8004cee:	4a21      	ldr	r2, [pc, #132]	; (8004d74 <HAL_SPI_MspInit+0x158>)
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream5;
 8004cf4:	4b21      	ldr	r3, [pc, #132]	; (8004d7c <HAL_SPI_MspInit+0x160>)
 8004cf6:	4a22      	ldr	r2, [pc, #136]	; (8004d80 <HAL_SPI_MspInit+0x164>)
 8004cf8:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 8004cfa:	4b20      	ldr	r3, [pc, #128]	; (8004d7c <HAL_SPI_MspInit+0x160>)
 8004cfc:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8004d00:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004d02:	4b1e      	ldr	r3, [pc, #120]	; (8004d7c <HAL_SPI_MspInit+0x160>)
 8004d04:	2240      	movs	r2, #64	; 0x40
 8004d06:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004d08:	4b1c      	ldr	r3, [pc, #112]	; (8004d7c <HAL_SPI_MspInit+0x160>)
 8004d0a:	2200      	movs	r2, #0
 8004d0c:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004d0e:	4b1b      	ldr	r3, [pc, #108]	; (8004d7c <HAL_SPI_MspInit+0x160>)
 8004d10:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004d14:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004d16:	4b19      	ldr	r3, [pc, #100]	; (8004d7c <HAL_SPI_MspInit+0x160>)
 8004d18:	2200      	movs	r2, #0
 8004d1a:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004d1c:	4b17      	ldr	r3, [pc, #92]	; (8004d7c <HAL_SPI_MspInit+0x160>)
 8004d1e:	2200      	movs	r2, #0
 8004d20:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8004d22:	4b16      	ldr	r3, [pc, #88]	; (8004d7c <HAL_SPI_MspInit+0x160>)
 8004d24:	2200      	movs	r2, #0
 8004d26:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8004d28:	4b14      	ldr	r3, [pc, #80]	; (8004d7c <HAL_SPI_MspInit+0x160>)
 8004d2a:	2200      	movs	r2, #0
 8004d2c:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004d2e:	4b13      	ldr	r3, [pc, #76]	; (8004d7c <HAL_SPI_MspInit+0x160>)
 8004d30:	2200      	movs	r2, #0
 8004d32:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8004d34:	4811      	ldr	r0, [pc, #68]	; (8004d7c <HAL_SPI_MspInit+0x160>)
 8004d36:	f000 fbcf 	bl	80054d8 <HAL_DMA_Init>
 8004d3a:	4603      	mov	r3, r0
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d001      	beq.n	8004d44 <HAL_SPI_MspInit+0x128>
    {
      Error_Handler();
 8004d40:	f7ff fdde 	bl	8004900 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	4a0d      	ldr	r2, [pc, #52]	; (8004d7c <HAL_SPI_MspInit+0x160>)
 8004d48:	649a      	str	r2, [r3, #72]	; 0x48
 8004d4a:	4a0c      	ldr	r2, [pc, #48]	; (8004d7c <HAL_SPI_MspInit+0x160>)
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8004d50:	2200      	movs	r2, #0
 8004d52:	2100      	movs	r1, #0
 8004d54:	2023      	movs	r0, #35	; 0x23
 8004d56:	f000 fb88 	bl	800546a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8004d5a:	2023      	movs	r0, #35	; 0x23
 8004d5c:	f000 fba1 	bl	80054a2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8004d60:	bf00      	nop
 8004d62:	3728      	adds	r7, #40	; 0x28
 8004d64:	46bd      	mov	sp, r7
 8004d66:	bd80      	pop	{r7, pc}
 8004d68:	40013000 	.word	0x40013000
 8004d6c:	40023800 	.word	0x40023800
 8004d70:	40020400 	.word	0x40020400
 8004d74:	20000c70 	.word	0x20000c70
 8004d78:	40026410 	.word	0x40026410
 8004d7c:	20000cd0 	.word	0x20000cd0
 8004d80:	40026488 	.word	0x40026488

08004d84 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004d84:	b580      	push	{r7, lr}
 8004d86:	b08e      	sub	sp, #56	; 0x38
 8004d88:	af00      	add	r7, sp, #0
 8004d8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004d8c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004d90:	2200      	movs	r2, #0
 8004d92:	601a      	str	r2, [r3, #0]
 8004d94:	605a      	str	r2, [r3, #4]
 8004d96:	609a      	str	r2, [r3, #8]
 8004d98:	60da      	str	r2, [r3, #12]
 8004d9a:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	4a41      	ldr	r2, [pc, #260]	; (8004ea8 <HAL_TIM_Base_MspInit+0x124>)
 8004da2:	4293      	cmp	r3, r2
 8004da4:	d10e      	bne.n	8004dc4 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8004da6:	2300      	movs	r3, #0
 8004da8:	623b      	str	r3, [r7, #32]
 8004daa:	4b40      	ldr	r3, [pc, #256]	; (8004eac <HAL_TIM_Base_MspInit+0x128>)
 8004dac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004dae:	4a3f      	ldr	r2, [pc, #252]	; (8004eac <HAL_TIM_Base_MspInit+0x128>)
 8004db0:	f043 0301 	orr.w	r3, r3, #1
 8004db4:	6453      	str	r3, [r2, #68]	; 0x44
 8004db6:	4b3d      	ldr	r3, [pc, #244]	; (8004eac <HAL_TIM_Base_MspInit+0x128>)
 8004db8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004dba:	f003 0301 	and.w	r3, r3, #1
 8004dbe:	623b      	str	r3, [r7, #32]
 8004dc0:	6a3b      	ldr	r3, [r7, #32]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8004dc2:	e06c      	b.n	8004e9e <HAL_TIM_Base_MspInit+0x11a>
  else if(htim_base->Instance==TIM2)
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004dcc:	d10e      	bne.n	8004dec <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8004dce:	2300      	movs	r3, #0
 8004dd0:	61fb      	str	r3, [r7, #28]
 8004dd2:	4b36      	ldr	r3, [pc, #216]	; (8004eac <HAL_TIM_Base_MspInit+0x128>)
 8004dd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dd6:	4a35      	ldr	r2, [pc, #212]	; (8004eac <HAL_TIM_Base_MspInit+0x128>)
 8004dd8:	f043 0301 	orr.w	r3, r3, #1
 8004ddc:	6413      	str	r3, [r2, #64]	; 0x40
 8004dde:	4b33      	ldr	r3, [pc, #204]	; (8004eac <HAL_TIM_Base_MspInit+0x128>)
 8004de0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004de2:	f003 0301 	and.w	r3, r3, #1
 8004de6:	61fb      	str	r3, [r7, #28]
 8004de8:	69fb      	ldr	r3, [r7, #28]
}
 8004dea:	e058      	b.n	8004e9e <HAL_TIM_Base_MspInit+0x11a>
  else if(htim_base->Instance==TIM3)
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	4a2f      	ldr	r2, [pc, #188]	; (8004eb0 <HAL_TIM_Base_MspInit+0x12c>)
 8004df2:	4293      	cmp	r3, r2
 8004df4:	d12c      	bne.n	8004e50 <HAL_TIM_Base_MspInit+0xcc>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8004df6:	2300      	movs	r3, #0
 8004df8:	61bb      	str	r3, [r7, #24]
 8004dfa:	4b2c      	ldr	r3, [pc, #176]	; (8004eac <HAL_TIM_Base_MspInit+0x128>)
 8004dfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dfe:	4a2b      	ldr	r2, [pc, #172]	; (8004eac <HAL_TIM_Base_MspInit+0x128>)
 8004e00:	f043 0302 	orr.w	r3, r3, #2
 8004e04:	6413      	str	r3, [r2, #64]	; 0x40
 8004e06:	4b29      	ldr	r3, [pc, #164]	; (8004eac <HAL_TIM_Base_MspInit+0x128>)
 8004e08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e0a:	f003 0302 	and.w	r3, r3, #2
 8004e0e:	61bb      	str	r3, [r7, #24]
 8004e10:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004e12:	2300      	movs	r3, #0
 8004e14:	617b      	str	r3, [r7, #20]
 8004e16:	4b25      	ldr	r3, [pc, #148]	; (8004eac <HAL_TIM_Base_MspInit+0x128>)
 8004e18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e1a:	4a24      	ldr	r2, [pc, #144]	; (8004eac <HAL_TIM_Base_MspInit+0x128>)
 8004e1c:	f043 0302 	orr.w	r3, r3, #2
 8004e20:	6313      	str	r3, [r2, #48]	; 0x30
 8004e22:	4b22      	ldr	r3, [pc, #136]	; (8004eac <HAL_TIM_Base_MspInit+0x128>)
 8004e24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e26:	f003 0302 	and.w	r3, r3, #2
 8004e2a:	617b      	str	r3, [r7, #20]
 8004e2c:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = P3_Pin;
 8004e2e:	2302      	movs	r3, #2
 8004e30:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004e32:	2302      	movs	r3, #2
 8004e34:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004e36:	2300      	movs	r3, #0
 8004e38:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004e3a:	2300      	movs	r3, #0
 8004e3c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8004e3e:	2302      	movs	r3, #2
 8004e40:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(P3_GPIO_Port, &GPIO_InitStruct);
 8004e42:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004e46:	4619      	mov	r1, r3
 8004e48:	481a      	ldr	r0, [pc, #104]	; (8004eb4 <HAL_TIM_Base_MspInit+0x130>)
 8004e4a:	f000 fee1 	bl	8005c10 <HAL_GPIO_Init>
}
 8004e4e:	e026      	b.n	8004e9e <HAL_TIM_Base_MspInit+0x11a>
  else if(htim_base->Instance==TIM4)
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	4a18      	ldr	r2, [pc, #96]	; (8004eb8 <HAL_TIM_Base_MspInit+0x134>)
 8004e56:	4293      	cmp	r3, r2
 8004e58:	d10e      	bne.n	8004e78 <HAL_TIM_Base_MspInit+0xf4>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8004e5a:	2300      	movs	r3, #0
 8004e5c:	613b      	str	r3, [r7, #16]
 8004e5e:	4b13      	ldr	r3, [pc, #76]	; (8004eac <HAL_TIM_Base_MspInit+0x128>)
 8004e60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e62:	4a12      	ldr	r2, [pc, #72]	; (8004eac <HAL_TIM_Base_MspInit+0x128>)
 8004e64:	f043 0304 	orr.w	r3, r3, #4
 8004e68:	6413      	str	r3, [r2, #64]	; 0x40
 8004e6a:	4b10      	ldr	r3, [pc, #64]	; (8004eac <HAL_TIM_Base_MspInit+0x128>)
 8004e6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e6e:	f003 0304 	and.w	r3, r3, #4
 8004e72:	613b      	str	r3, [r7, #16]
 8004e74:	693b      	ldr	r3, [r7, #16]
}
 8004e76:	e012      	b.n	8004e9e <HAL_TIM_Base_MspInit+0x11a>
  else if(htim_base->Instance==TIM5)
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	4a0f      	ldr	r2, [pc, #60]	; (8004ebc <HAL_TIM_Base_MspInit+0x138>)
 8004e7e:	4293      	cmp	r3, r2
 8004e80:	d10d      	bne.n	8004e9e <HAL_TIM_Base_MspInit+0x11a>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8004e82:	2300      	movs	r3, #0
 8004e84:	60fb      	str	r3, [r7, #12]
 8004e86:	4b09      	ldr	r3, [pc, #36]	; (8004eac <HAL_TIM_Base_MspInit+0x128>)
 8004e88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e8a:	4a08      	ldr	r2, [pc, #32]	; (8004eac <HAL_TIM_Base_MspInit+0x128>)
 8004e8c:	f043 0308 	orr.w	r3, r3, #8
 8004e90:	6413      	str	r3, [r2, #64]	; 0x40
 8004e92:	4b06      	ldr	r3, [pc, #24]	; (8004eac <HAL_TIM_Base_MspInit+0x128>)
 8004e94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e96:	f003 0308 	and.w	r3, r3, #8
 8004e9a:	60fb      	str	r3, [r7, #12]
 8004e9c:	68fb      	ldr	r3, [r7, #12]
}
 8004e9e:	bf00      	nop
 8004ea0:	3738      	adds	r7, #56	; 0x38
 8004ea2:	46bd      	mov	sp, r7
 8004ea4:	bd80      	pop	{r7, pc}
 8004ea6:	bf00      	nop
 8004ea8:	40010000 	.word	0x40010000
 8004eac:	40023800 	.word	0x40023800
 8004eb0:	40000400 	.word	0x40000400
 8004eb4:	40020400 	.word	0x40020400
 8004eb8:	40000800 	.word	0x40000800
 8004ebc:	40000c00 	.word	0x40000c00

08004ec0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8004ec0:	b580      	push	{r7, lr}
 8004ec2:	b08a      	sub	sp, #40	; 0x28
 8004ec4:	af00      	add	r7, sp, #0
 8004ec6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004ec8:	f107 0314 	add.w	r3, r7, #20
 8004ecc:	2200      	movs	r2, #0
 8004ece:	601a      	str	r2, [r3, #0]
 8004ed0:	605a      	str	r2, [r3, #4]
 8004ed2:	609a      	str	r2, [r3, #8]
 8004ed4:	60da      	str	r2, [r3, #12]
 8004ed6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	4a24      	ldr	r2, [pc, #144]	; (8004f70 <HAL_TIM_MspPostInit+0xb0>)
 8004ede:	4293      	cmp	r3, r2
 8004ee0:	d11e      	bne.n	8004f20 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004ee2:	2300      	movs	r3, #0
 8004ee4:	613b      	str	r3, [r7, #16]
 8004ee6:	4b23      	ldr	r3, [pc, #140]	; (8004f74 <HAL_TIM_MspPostInit+0xb4>)
 8004ee8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004eea:	4a22      	ldr	r2, [pc, #136]	; (8004f74 <HAL_TIM_MspPostInit+0xb4>)
 8004eec:	f043 0302 	orr.w	r3, r3, #2
 8004ef0:	6313      	str	r3, [r2, #48]	; 0x30
 8004ef2:	4b20      	ldr	r3, [pc, #128]	; (8004f74 <HAL_TIM_MspPostInit+0xb4>)
 8004ef4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ef6:	f003 0302 	and.w	r3, r3, #2
 8004efa:	613b      	str	r3, [r7, #16]
 8004efc:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration    
    PB0     ------> TIM3_CH3 
    */
    GPIO_InitStruct.Pin = P6_Pin;
 8004efe:	2301      	movs	r3, #1
 8004f00:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004f02:	2302      	movs	r3, #2
 8004f04:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f06:	2300      	movs	r3, #0
 8004f08:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004f0a:	2300      	movs	r3, #0
 8004f0c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8004f0e:	2302      	movs	r3, #2
 8004f10:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(P6_GPIO_Port, &GPIO_InitStruct);
 8004f12:	f107 0314 	add.w	r3, r7, #20
 8004f16:	4619      	mov	r1, r3
 8004f18:	4817      	ldr	r0, [pc, #92]	; (8004f78 <HAL_TIM_MspPostInit+0xb8>)
 8004f1a:	f000 fe79 	bl	8005c10 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 8004f1e:	e022      	b.n	8004f66 <HAL_TIM_MspPostInit+0xa6>
  else if(htim->Instance==TIM5)
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	4a15      	ldr	r2, [pc, #84]	; (8004f7c <HAL_TIM_MspPostInit+0xbc>)
 8004f26:	4293      	cmp	r3, r2
 8004f28:	d11d      	bne.n	8004f66 <HAL_TIM_MspPostInit+0xa6>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004f2a:	2300      	movs	r3, #0
 8004f2c:	60fb      	str	r3, [r7, #12]
 8004f2e:	4b11      	ldr	r3, [pc, #68]	; (8004f74 <HAL_TIM_MspPostInit+0xb4>)
 8004f30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f32:	4a10      	ldr	r2, [pc, #64]	; (8004f74 <HAL_TIM_MspPostInit+0xb4>)
 8004f34:	f043 0301 	orr.w	r3, r3, #1
 8004f38:	6313      	str	r3, [r2, #48]	; 0x30
 8004f3a:	4b0e      	ldr	r3, [pc, #56]	; (8004f74 <HAL_TIM_MspPostInit+0xb4>)
 8004f3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f3e:	f003 0301 	and.w	r3, r3, #1
 8004f42:	60fb      	str	r3, [r7, #12]
 8004f44:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_3;
 8004f46:	230a      	movs	r3, #10
 8004f48:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004f4a:	2302      	movs	r3, #2
 8004f4c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f4e:	2300      	movs	r3, #0
 8004f50:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004f52:	2300      	movs	r3, #0
 8004f54:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8004f56:	2302      	movs	r3, #2
 8004f58:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004f5a:	f107 0314 	add.w	r3, r7, #20
 8004f5e:	4619      	mov	r1, r3
 8004f60:	4807      	ldr	r0, [pc, #28]	; (8004f80 <HAL_TIM_MspPostInit+0xc0>)
 8004f62:	f000 fe55 	bl	8005c10 <HAL_GPIO_Init>
}
 8004f66:	bf00      	nop
 8004f68:	3728      	adds	r7, #40	; 0x28
 8004f6a:	46bd      	mov	sp, r7
 8004f6c:	bd80      	pop	{r7, pc}
 8004f6e:	bf00      	nop
 8004f70:	40000400 	.word	0x40000400
 8004f74:	40023800 	.word	0x40023800
 8004f78:	40020400 	.word	0x40020400
 8004f7c:	40000c00 	.word	0x40000c00
 8004f80:	40020000 	.word	0x40020000

08004f84 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004f84:	b580      	push	{r7, lr}
 8004f86:	b08a      	sub	sp, #40	; 0x28
 8004f88:	af00      	add	r7, sp, #0
 8004f8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004f8c:	f107 0314 	add.w	r3, r7, #20
 8004f90:	2200      	movs	r2, #0
 8004f92:	601a      	str	r2, [r3, #0]
 8004f94:	605a      	str	r2, [r3, #4]
 8004f96:	609a      	str	r2, [r3, #8]
 8004f98:	60da      	str	r2, [r3, #12]
 8004f9a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	4a19      	ldr	r2, [pc, #100]	; (8005008 <HAL_UART_MspInit+0x84>)
 8004fa2:	4293      	cmp	r3, r2
 8004fa4:	d12c      	bne.n	8005000 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8004fa6:	2300      	movs	r3, #0
 8004fa8:	613b      	str	r3, [r7, #16]
 8004faa:	4b18      	ldr	r3, [pc, #96]	; (800500c <HAL_UART_MspInit+0x88>)
 8004fac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fae:	4a17      	ldr	r2, [pc, #92]	; (800500c <HAL_UART_MspInit+0x88>)
 8004fb0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004fb4:	6413      	str	r3, [r2, #64]	; 0x40
 8004fb6:	4b15      	ldr	r3, [pc, #84]	; (800500c <HAL_UART_MspInit+0x88>)
 8004fb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fba:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004fbe:	613b      	str	r3, [r7, #16]
 8004fc0:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004fc2:	2300      	movs	r3, #0
 8004fc4:	60fb      	str	r3, [r7, #12]
 8004fc6:	4b11      	ldr	r3, [pc, #68]	; (800500c <HAL_UART_MspInit+0x88>)
 8004fc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fca:	4a10      	ldr	r2, [pc, #64]	; (800500c <HAL_UART_MspInit+0x88>)
 8004fcc:	f043 0302 	orr.w	r3, r3, #2
 8004fd0:	6313      	str	r3, [r2, #48]	; 0x30
 8004fd2:	4b0e      	ldr	r3, [pc, #56]	; (800500c <HAL_UART_MspInit+0x88>)
 8004fd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fd6:	f003 0302 	and.w	r3, r3, #2
 8004fda:	60fb      	str	r3, [r7, #12]
 8004fdc:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration    
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX 
    */
    GPIO_InitStruct.Pin = GPS_RX_Pin|GPS_TX_Pin;
 8004fde:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8004fe2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004fe4:	2302      	movs	r3, #2
 8004fe6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004fe8:	2300      	movs	r3, #0
 8004fea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004fec:	2303      	movs	r3, #3
 8004fee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8004ff0:	2307      	movs	r3, #7
 8004ff2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004ff4:	f107 0314 	add.w	r3, r7, #20
 8004ff8:	4619      	mov	r1, r3
 8004ffa:	4805      	ldr	r0, [pc, #20]	; (8005010 <HAL_UART_MspInit+0x8c>)
 8004ffc:	f000 fe08 	bl	8005c10 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8005000:	bf00      	nop
 8005002:	3728      	adds	r7, #40	; 0x28
 8005004:	46bd      	mov	sp, r7
 8005006:	bd80      	pop	{r7, pc}
 8005008:	40004800 	.word	0x40004800
 800500c:	40023800 	.word	0x40023800
 8005010:	40020400 	.word	0x40020400

08005014 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005014:	b480      	push	{r7}
 8005016:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8005018:	bf00      	nop
 800501a:	46bd      	mov	sp, r7
 800501c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005020:	4770      	bx	lr

08005022 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005022:	b480      	push	{r7}
 8005024:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005026:	e7fe      	b.n	8005026 <HardFault_Handler+0x4>

08005028 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005028:	b480      	push	{r7}
 800502a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800502c:	e7fe      	b.n	800502c <MemManage_Handler+0x4>

0800502e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800502e:	b480      	push	{r7}
 8005030:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005032:	e7fe      	b.n	8005032 <BusFault_Handler+0x4>

08005034 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005034:	b480      	push	{r7}
 8005036:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005038:	e7fe      	b.n	8005038 <UsageFault_Handler+0x4>

0800503a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800503a:	b480      	push	{r7}
 800503c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800503e:	bf00      	nop
 8005040:	46bd      	mov	sp, r7
 8005042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005046:	4770      	bx	lr

08005048 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005048:	b480      	push	{r7}
 800504a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800504c:	bf00      	nop
 800504e:	46bd      	mov	sp, r7
 8005050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005054:	4770      	bx	lr

08005056 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8005056:	b480      	push	{r7}
 8005058:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800505a:	bf00      	nop
 800505c:	46bd      	mov	sp, r7
 800505e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005062:	4770      	bx	lr

08005064 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005064:	b580      	push	{r7, lr}
 8005066:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005068:	f000 f8e2 	bl	8005230 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800506c:	bf00      	nop
 800506e:	bd80      	pop	{r7, pc}

08005070 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8005070:	b580      	push	{r7, lr}
 8005072:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8005074:	2040      	movs	r0, #64	; 0x40
 8005076:	f000 ff97 	bl	8005fa8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800507a:	bf00      	nop
 800507c:	bd80      	pop	{r7, pc}
	...

08005080 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8005080:	b580      	push	{r7, lr}
 8005082:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8005084:	4802      	ldr	r0, [pc, #8]	; (8005090 <SPI1_IRQHandler+0x10>)
 8005086:	f005 fa71 	bl	800a56c <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 800508a:	bf00      	nop
 800508c:	bd80      	pop	{r7, pc}
 800508e:	bf00      	nop
 8005090:	20000bd8 	.word	0x20000bd8

08005094 <SDIO_IRQHandler>:

/**
  * @brief This function handles SDIO global interrupt.
  */
void SDIO_IRQHandler(void)
{
 8005094:	b580      	push	{r7, lr}
 8005096:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDIO_IRQn 0 */

  /* USER CODE END SDIO_IRQn 0 */
  HAL_SD_IRQHandler(&hsd);
 8005098:	4802      	ldr	r0, [pc, #8]	; (80050a4 <SDIO_IRQHandler+0x10>)
 800509a:	f004 f951 	bl	8009340 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDIO_IRQn 1 */

  /* USER CODE END SDIO_IRQn 1 */
}
 800509e:	bf00      	nop
 80050a0:	bd80      	pop	{r7, pc}
 80050a2:	bf00      	nop
 80050a4:	20000b54 	.word	0x20000b54

080050a8 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80050a8:	b580      	push	{r7, lr}
 80050aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 80050ac:	4802      	ldr	r0, [pc, #8]	; (80050b8 <DMA2_Stream0_IRQHandler+0x10>)
 80050ae:	f000 fb3b 	bl	8005728 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80050b2:	bf00      	nop
 80050b4:	bd80      	pop	{r7, pc}
 80050b6:	bf00      	nop
 80050b8:	20000c70 	.word	0x20000c70

080050bc <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 80050bc:	b580      	push	{r7, lr}
 80050be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_rx);
 80050c0:	4802      	ldr	r0, [pc, #8]	; (80050cc <DMA2_Stream3_IRQHandler+0x10>)
 80050c2:	f000 fb31 	bl	8005728 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 80050c6:	bf00      	nop
 80050c8:	bd80      	pop	{r7, pc}
 80050ca:	bf00      	nop
 80050cc:	200008e0 	.word	0x200008e0

080050d0 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80050d0:	b580      	push	{r7, lr}
 80050d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80050d4:	4802      	ldr	r0, [pc, #8]	; (80050e0 <OTG_FS_IRQHandler+0x10>)
 80050d6:	f002 f88a 	bl	80071ee <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80050da:	bf00      	nop
 80050dc:	bd80      	pop	{r7, pc}
 80050de:	bf00      	nop
 80050e0:	2000423c 	.word	0x2000423c

080050e4 <DMA2_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA2 stream5 global interrupt.
  */
void DMA2_Stream5_IRQHandler(void)
{
 80050e4:	b580      	push	{r7, lr}
 80050e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream5_IRQn 0 */

  /* USER CODE END DMA2_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 80050e8:	4802      	ldr	r0, [pc, #8]	; (80050f4 <DMA2_Stream5_IRQHandler+0x10>)
 80050ea:	f000 fb1d 	bl	8005728 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream5_IRQn 1 */

  /* USER CODE END DMA2_Stream5_IRQn 1 */
}
 80050ee:	bf00      	nop
 80050f0:	bd80      	pop	{r7, pc}
 80050f2:	bf00      	nop
 80050f4:	20000cd0 	.word	0x20000cd0

080050f8 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 80050f8:	b580      	push	{r7, lr}
 80050fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_tx);
 80050fc:	4802      	ldr	r0, [pc, #8]	; (8005108 <DMA2_Stream6_IRQHandler+0x10>)
 80050fe:	f000 fb13 	bl	8005728 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8005102:	bf00      	nop
 8005104:	bd80      	pop	{r7, pc}
 8005106:	bf00      	nop
 8005108:	20000ab4 	.word	0x20000ab4

0800510c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800510c:	b480      	push	{r7}
 800510e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8005110:	4b08      	ldr	r3, [pc, #32]	; (8005134 <SystemInit+0x28>)
 8005112:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005116:	4a07      	ldr	r2, [pc, #28]	; (8005134 <SystemInit+0x28>)
 8005118:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800511c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8005120:	4b04      	ldr	r3, [pc, #16]	; (8005134 <SystemInit+0x28>)
 8005122:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8005126:	609a      	str	r2, [r3, #8]
#endif
}
 8005128:	bf00      	nop
 800512a:	46bd      	mov	sp, r7
 800512c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005130:	4770      	bx	lr
 8005132:	bf00      	nop
 8005134:	e000ed00 	.word	0xe000ed00

08005138 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8005138:	f8df d034 	ldr.w	sp, [pc, #52]	; 8005170 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800513c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800513e:	e003      	b.n	8005148 <LoopCopyDataInit>

08005140 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8005140:	4b0c      	ldr	r3, [pc, #48]	; (8005174 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8005142:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8005144:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8005146:	3104      	adds	r1, #4

08005148 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8005148:	480b      	ldr	r0, [pc, #44]	; (8005178 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800514a:	4b0c      	ldr	r3, [pc, #48]	; (800517c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800514c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800514e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8005150:	d3f6      	bcc.n	8005140 <CopyDataInit>
  ldr  r2, =_sbss
 8005152:	4a0b      	ldr	r2, [pc, #44]	; (8005180 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8005154:	e002      	b.n	800515c <LoopFillZerobss>

08005156 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8005156:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8005158:	f842 3b04 	str.w	r3, [r2], #4

0800515c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800515c:	4b09      	ldr	r3, [pc, #36]	; (8005184 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800515e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8005160:	d3f9      	bcc.n	8005156 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8005162:	f7ff ffd3 	bl	800510c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8005166:	f00b f88f 	bl	8010288 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800516a:	f7fe feeb 	bl	8003f44 <main>
  bx  lr    
 800516e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8005170:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8005174:	08016060 	.word	0x08016060
  ldr  r0, =_sdata
 8005178:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800517c:	20000354 	.word	0x20000354
  ldr  r2, =_sbss
 8005180:	20000354 	.word	0x20000354
  ldr  r3, = _ebss
 8005184:	20004648 	.word	0x20004648

08005188 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005188:	e7fe      	b.n	8005188 <ADC_IRQHandler>
	...

0800518c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800518c:	b580      	push	{r7, lr}
 800518e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8005190:	4b0e      	ldr	r3, [pc, #56]	; (80051cc <HAL_Init+0x40>)
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	4a0d      	ldr	r2, [pc, #52]	; (80051cc <HAL_Init+0x40>)
 8005196:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800519a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800519c:	4b0b      	ldr	r3, [pc, #44]	; (80051cc <HAL_Init+0x40>)
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	4a0a      	ldr	r2, [pc, #40]	; (80051cc <HAL_Init+0x40>)
 80051a2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80051a6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80051a8:	4b08      	ldr	r3, [pc, #32]	; (80051cc <HAL_Init+0x40>)
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	4a07      	ldr	r2, [pc, #28]	; (80051cc <HAL_Init+0x40>)
 80051ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80051b2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80051b4:	2003      	movs	r0, #3
 80051b6:	f000 f94d 	bl	8005454 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80051ba:	2000      	movs	r0, #0
 80051bc:	f000 f808 	bl	80051d0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80051c0:	f7ff fba6 	bl	8004910 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80051c4:	2300      	movs	r3, #0
}
 80051c6:	4618      	mov	r0, r3
 80051c8:	bd80      	pop	{r7, pc}
 80051ca:	bf00      	nop
 80051cc:	40023c00 	.word	0x40023c00

080051d0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80051d0:	b580      	push	{r7, lr}
 80051d2:	b082      	sub	sp, #8
 80051d4:	af00      	add	r7, sp, #0
 80051d6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80051d8:	4b12      	ldr	r3, [pc, #72]	; (8005224 <HAL_InitTick+0x54>)
 80051da:	681a      	ldr	r2, [r3, #0]
 80051dc:	4b12      	ldr	r3, [pc, #72]	; (8005228 <HAL_InitTick+0x58>)
 80051de:	781b      	ldrb	r3, [r3, #0]
 80051e0:	4619      	mov	r1, r3
 80051e2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80051e6:	fbb3 f3f1 	udiv	r3, r3, r1
 80051ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80051ee:	4618      	mov	r0, r3
 80051f0:	f000 f965 	bl	80054be <HAL_SYSTICK_Config>
 80051f4:	4603      	mov	r3, r0
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d001      	beq.n	80051fe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80051fa:	2301      	movs	r3, #1
 80051fc:	e00e      	b.n	800521c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	2b0f      	cmp	r3, #15
 8005202:	d80a      	bhi.n	800521a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005204:	2200      	movs	r2, #0
 8005206:	6879      	ldr	r1, [r7, #4]
 8005208:	f04f 30ff 	mov.w	r0, #4294967295
 800520c:	f000 f92d 	bl	800546a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8005210:	4a06      	ldr	r2, [pc, #24]	; (800522c <HAL_InitTick+0x5c>)
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8005216:	2300      	movs	r3, #0
 8005218:	e000      	b.n	800521c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800521a:	2301      	movs	r3, #1
}
 800521c:	4618      	mov	r0, r3
 800521e:	3708      	adds	r7, #8
 8005220:	46bd      	mov	sp, r7
 8005222:	bd80      	pop	{r7, pc}
 8005224:	20000004 	.word	0x20000004
 8005228:	2000000c 	.word	0x2000000c
 800522c:	20000008 	.word	0x20000008

08005230 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005230:	b480      	push	{r7}
 8005232:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005234:	4b06      	ldr	r3, [pc, #24]	; (8005250 <HAL_IncTick+0x20>)
 8005236:	781b      	ldrb	r3, [r3, #0]
 8005238:	461a      	mov	r2, r3
 800523a:	4b06      	ldr	r3, [pc, #24]	; (8005254 <HAL_IncTick+0x24>)
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	4413      	add	r3, r2
 8005240:	4a04      	ldr	r2, [pc, #16]	; (8005254 <HAL_IncTick+0x24>)
 8005242:	6013      	str	r3, [r2, #0]
}
 8005244:	bf00      	nop
 8005246:	46bd      	mov	sp, r7
 8005248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800524c:	4770      	bx	lr
 800524e:	bf00      	nop
 8005250:	2000000c 	.word	0x2000000c
 8005254:	20000d30 	.word	0x20000d30

08005258 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005258:	b480      	push	{r7}
 800525a:	af00      	add	r7, sp, #0
  return uwTick;
 800525c:	4b03      	ldr	r3, [pc, #12]	; (800526c <HAL_GetTick+0x14>)
 800525e:	681b      	ldr	r3, [r3, #0]
}
 8005260:	4618      	mov	r0, r3
 8005262:	46bd      	mov	sp, r7
 8005264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005268:	4770      	bx	lr
 800526a:	bf00      	nop
 800526c:	20000d30 	.word	0x20000d30

08005270 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005270:	b580      	push	{r7, lr}
 8005272:	b084      	sub	sp, #16
 8005274:	af00      	add	r7, sp, #0
 8005276:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005278:	f7ff ffee 	bl	8005258 <HAL_GetTick>
 800527c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005288:	d005      	beq.n	8005296 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800528a:	4b09      	ldr	r3, [pc, #36]	; (80052b0 <HAL_Delay+0x40>)
 800528c:	781b      	ldrb	r3, [r3, #0]
 800528e:	461a      	mov	r2, r3
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	4413      	add	r3, r2
 8005294:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8005296:	bf00      	nop
 8005298:	f7ff ffde 	bl	8005258 <HAL_GetTick>
 800529c:	4602      	mov	r2, r0
 800529e:	68bb      	ldr	r3, [r7, #8]
 80052a0:	1ad3      	subs	r3, r2, r3
 80052a2:	68fa      	ldr	r2, [r7, #12]
 80052a4:	429a      	cmp	r2, r3
 80052a6:	d8f7      	bhi.n	8005298 <HAL_Delay+0x28>
  {
  }
}
 80052a8:	bf00      	nop
 80052aa:	3710      	adds	r7, #16
 80052ac:	46bd      	mov	sp, r7
 80052ae:	bd80      	pop	{r7, pc}
 80052b0:	2000000c 	.word	0x2000000c

080052b4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80052b4:	b480      	push	{r7}
 80052b6:	b085      	sub	sp, #20
 80052b8:	af00      	add	r7, sp, #0
 80052ba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	f003 0307 	and.w	r3, r3, #7
 80052c2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80052c4:	4b0c      	ldr	r3, [pc, #48]	; (80052f8 <__NVIC_SetPriorityGrouping+0x44>)
 80052c6:	68db      	ldr	r3, [r3, #12]
 80052c8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80052ca:	68ba      	ldr	r2, [r7, #8]
 80052cc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80052d0:	4013      	ands	r3, r2
 80052d2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80052d8:	68bb      	ldr	r3, [r7, #8]
 80052da:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80052dc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80052e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80052e4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80052e6:	4a04      	ldr	r2, [pc, #16]	; (80052f8 <__NVIC_SetPriorityGrouping+0x44>)
 80052e8:	68bb      	ldr	r3, [r7, #8]
 80052ea:	60d3      	str	r3, [r2, #12]
}
 80052ec:	bf00      	nop
 80052ee:	3714      	adds	r7, #20
 80052f0:	46bd      	mov	sp, r7
 80052f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f6:	4770      	bx	lr
 80052f8:	e000ed00 	.word	0xe000ed00

080052fc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80052fc:	b480      	push	{r7}
 80052fe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005300:	4b04      	ldr	r3, [pc, #16]	; (8005314 <__NVIC_GetPriorityGrouping+0x18>)
 8005302:	68db      	ldr	r3, [r3, #12]
 8005304:	0a1b      	lsrs	r3, r3, #8
 8005306:	f003 0307 	and.w	r3, r3, #7
}
 800530a:	4618      	mov	r0, r3
 800530c:	46bd      	mov	sp, r7
 800530e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005312:	4770      	bx	lr
 8005314:	e000ed00 	.word	0xe000ed00

08005318 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005318:	b480      	push	{r7}
 800531a:	b083      	sub	sp, #12
 800531c:	af00      	add	r7, sp, #0
 800531e:	4603      	mov	r3, r0
 8005320:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005322:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005326:	2b00      	cmp	r3, #0
 8005328:	db0b      	blt.n	8005342 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800532a:	79fb      	ldrb	r3, [r7, #7]
 800532c:	f003 021f 	and.w	r2, r3, #31
 8005330:	4907      	ldr	r1, [pc, #28]	; (8005350 <__NVIC_EnableIRQ+0x38>)
 8005332:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005336:	095b      	lsrs	r3, r3, #5
 8005338:	2001      	movs	r0, #1
 800533a:	fa00 f202 	lsl.w	r2, r0, r2
 800533e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8005342:	bf00      	nop
 8005344:	370c      	adds	r7, #12
 8005346:	46bd      	mov	sp, r7
 8005348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800534c:	4770      	bx	lr
 800534e:	bf00      	nop
 8005350:	e000e100 	.word	0xe000e100

08005354 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005354:	b480      	push	{r7}
 8005356:	b083      	sub	sp, #12
 8005358:	af00      	add	r7, sp, #0
 800535a:	4603      	mov	r3, r0
 800535c:	6039      	str	r1, [r7, #0]
 800535e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005360:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005364:	2b00      	cmp	r3, #0
 8005366:	db0a      	blt.n	800537e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005368:	683b      	ldr	r3, [r7, #0]
 800536a:	b2da      	uxtb	r2, r3
 800536c:	490c      	ldr	r1, [pc, #48]	; (80053a0 <__NVIC_SetPriority+0x4c>)
 800536e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005372:	0112      	lsls	r2, r2, #4
 8005374:	b2d2      	uxtb	r2, r2
 8005376:	440b      	add	r3, r1
 8005378:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800537c:	e00a      	b.n	8005394 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800537e:	683b      	ldr	r3, [r7, #0]
 8005380:	b2da      	uxtb	r2, r3
 8005382:	4908      	ldr	r1, [pc, #32]	; (80053a4 <__NVIC_SetPriority+0x50>)
 8005384:	79fb      	ldrb	r3, [r7, #7]
 8005386:	f003 030f 	and.w	r3, r3, #15
 800538a:	3b04      	subs	r3, #4
 800538c:	0112      	lsls	r2, r2, #4
 800538e:	b2d2      	uxtb	r2, r2
 8005390:	440b      	add	r3, r1
 8005392:	761a      	strb	r2, [r3, #24]
}
 8005394:	bf00      	nop
 8005396:	370c      	adds	r7, #12
 8005398:	46bd      	mov	sp, r7
 800539a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800539e:	4770      	bx	lr
 80053a0:	e000e100 	.word	0xe000e100
 80053a4:	e000ed00 	.word	0xe000ed00

080053a8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80053a8:	b480      	push	{r7}
 80053aa:	b089      	sub	sp, #36	; 0x24
 80053ac:	af00      	add	r7, sp, #0
 80053ae:	60f8      	str	r0, [r7, #12]
 80053b0:	60b9      	str	r1, [r7, #8]
 80053b2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	f003 0307 	and.w	r3, r3, #7
 80053ba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80053bc:	69fb      	ldr	r3, [r7, #28]
 80053be:	f1c3 0307 	rsb	r3, r3, #7
 80053c2:	2b04      	cmp	r3, #4
 80053c4:	bf28      	it	cs
 80053c6:	2304      	movcs	r3, #4
 80053c8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80053ca:	69fb      	ldr	r3, [r7, #28]
 80053cc:	3304      	adds	r3, #4
 80053ce:	2b06      	cmp	r3, #6
 80053d0:	d902      	bls.n	80053d8 <NVIC_EncodePriority+0x30>
 80053d2:	69fb      	ldr	r3, [r7, #28]
 80053d4:	3b03      	subs	r3, #3
 80053d6:	e000      	b.n	80053da <NVIC_EncodePriority+0x32>
 80053d8:	2300      	movs	r3, #0
 80053da:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80053dc:	f04f 32ff 	mov.w	r2, #4294967295
 80053e0:	69bb      	ldr	r3, [r7, #24]
 80053e2:	fa02 f303 	lsl.w	r3, r2, r3
 80053e6:	43da      	mvns	r2, r3
 80053e8:	68bb      	ldr	r3, [r7, #8]
 80053ea:	401a      	ands	r2, r3
 80053ec:	697b      	ldr	r3, [r7, #20]
 80053ee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80053f0:	f04f 31ff 	mov.w	r1, #4294967295
 80053f4:	697b      	ldr	r3, [r7, #20]
 80053f6:	fa01 f303 	lsl.w	r3, r1, r3
 80053fa:	43d9      	mvns	r1, r3
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005400:	4313      	orrs	r3, r2
         );
}
 8005402:	4618      	mov	r0, r3
 8005404:	3724      	adds	r7, #36	; 0x24
 8005406:	46bd      	mov	sp, r7
 8005408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800540c:	4770      	bx	lr
	...

08005410 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005410:	b580      	push	{r7, lr}
 8005412:	b082      	sub	sp, #8
 8005414:	af00      	add	r7, sp, #0
 8005416:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	3b01      	subs	r3, #1
 800541c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005420:	d301      	bcc.n	8005426 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005422:	2301      	movs	r3, #1
 8005424:	e00f      	b.n	8005446 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005426:	4a0a      	ldr	r2, [pc, #40]	; (8005450 <SysTick_Config+0x40>)
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	3b01      	subs	r3, #1
 800542c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800542e:	210f      	movs	r1, #15
 8005430:	f04f 30ff 	mov.w	r0, #4294967295
 8005434:	f7ff ff8e 	bl	8005354 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005438:	4b05      	ldr	r3, [pc, #20]	; (8005450 <SysTick_Config+0x40>)
 800543a:	2200      	movs	r2, #0
 800543c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800543e:	4b04      	ldr	r3, [pc, #16]	; (8005450 <SysTick_Config+0x40>)
 8005440:	2207      	movs	r2, #7
 8005442:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005444:	2300      	movs	r3, #0
}
 8005446:	4618      	mov	r0, r3
 8005448:	3708      	adds	r7, #8
 800544a:	46bd      	mov	sp, r7
 800544c:	bd80      	pop	{r7, pc}
 800544e:	bf00      	nop
 8005450:	e000e010 	.word	0xe000e010

08005454 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005454:	b580      	push	{r7, lr}
 8005456:	b082      	sub	sp, #8
 8005458:	af00      	add	r7, sp, #0
 800545a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800545c:	6878      	ldr	r0, [r7, #4]
 800545e:	f7ff ff29 	bl	80052b4 <__NVIC_SetPriorityGrouping>
}
 8005462:	bf00      	nop
 8005464:	3708      	adds	r7, #8
 8005466:	46bd      	mov	sp, r7
 8005468:	bd80      	pop	{r7, pc}

0800546a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800546a:	b580      	push	{r7, lr}
 800546c:	b086      	sub	sp, #24
 800546e:	af00      	add	r7, sp, #0
 8005470:	4603      	mov	r3, r0
 8005472:	60b9      	str	r1, [r7, #8]
 8005474:	607a      	str	r2, [r7, #4]
 8005476:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8005478:	2300      	movs	r3, #0
 800547a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800547c:	f7ff ff3e 	bl	80052fc <__NVIC_GetPriorityGrouping>
 8005480:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005482:	687a      	ldr	r2, [r7, #4]
 8005484:	68b9      	ldr	r1, [r7, #8]
 8005486:	6978      	ldr	r0, [r7, #20]
 8005488:	f7ff ff8e 	bl	80053a8 <NVIC_EncodePriority>
 800548c:	4602      	mov	r2, r0
 800548e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005492:	4611      	mov	r1, r2
 8005494:	4618      	mov	r0, r3
 8005496:	f7ff ff5d 	bl	8005354 <__NVIC_SetPriority>
}
 800549a:	bf00      	nop
 800549c:	3718      	adds	r7, #24
 800549e:	46bd      	mov	sp, r7
 80054a0:	bd80      	pop	{r7, pc}

080054a2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80054a2:	b580      	push	{r7, lr}
 80054a4:	b082      	sub	sp, #8
 80054a6:	af00      	add	r7, sp, #0
 80054a8:	4603      	mov	r3, r0
 80054aa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80054ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80054b0:	4618      	mov	r0, r3
 80054b2:	f7ff ff31 	bl	8005318 <__NVIC_EnableIRQ>
}
 80054b6:	bf00      	nop
 80054b8:	3708      	adds	r7, #8
 80054ba:	46bd      	mov	sp, r7
 80054bc:	bd80      	pop	{r7, pc}

080054be <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80054be:	b580      	push	{r7, lr}
 80054c0:	b082      	sub	sp, #8
 80054c2:	af00      	add	r7, sp, #0
 80054c4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80054c6:	6878      	ldr	r0, [r7, #4]
 80054c8:	f7ff ffa2 	bl	8005410 <SysTick_Config>
 80054cc:	4603      	mov	r3, r0
}
 80054ce:	4618      	mov	r0, r3
 80054d0:	3708      	adds	r7, #8
 80054d2:	46bd      	mov	sp, r7
 80054d4:	bd80      	pop	{r7, pc}
	...

080054d8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80054d8:	b580      	push	{r7, lr}
 80054da:	b086      	sub	sp, #24
 80054dc:	af00      	add	r7, sp, #0
 80054de:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80054e0:	2300      	movs	r3, #0
 80054e2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80054e4:	f7ff feb8 	bl	8005258 <HAL_GetTick>
 80054e8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d101      	bne.n	80054f4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80054f0:	2301      	movs	r3, #1
 80054f2:	e099      	b.n	8005628 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	2200      	movs	r2, #0
 80054f8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	2202      	movs	r2, #2
 8005500:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	681a      	ldr	r2, [r3, #0]
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	f022 0201 	bic.w	r2, r2, #1
 8005512:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005514:	e00f      	b.n	8005536 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005516:	f7ff fe9f 	bl	8005258 <HAL_GetTick>
 800551a:	4602      	mov	r2, r0
 800551c:	693b      	ldr	r3, [r7, #16]
 800551e:	1ad3      	subs	r3, r2, r3
 8005520:	2b05      	cmp	r3, #5
 8005522:	d908      	bls.n	8005536 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	2220      	movs	r2, #32
 8005528:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	2203      	movs	r2, #3
 800552e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8005532:	2303      	movs	r3, #3
 8005534:	e078      	b.n	8005628 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	f003 0301 	and.w	r3, r3, #1
 8005540:	2b00      	cmp	r3, #0
 8005542:	d1e8      	bne.n	8005516 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800554c:	697a      	ldr	r2, [r7, #20]
 800554e:	4b38      	ldr	r3, [pc, #224]	; (8005630 <HAL_DMA_Init+0x158>)
 8005550:	4013      	ands	r3, r2
 8005552:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	685a      	ldr	r2, [r3, #4]
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	689b      	ldr	r3, [r3, #8]
 800555c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005562:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	691b      	ldr	r3, [r3, #16]
 8005568:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800556e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	699b      	ldr	r3, [r3, #24]
 8005574:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800557a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	6a1b      	ldr	r3, [r3, #32]
 8005580:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005582:	697a      	ldr	r2, [r7, #20]
 8005584:	4313      	orrs	r3, r2
 8005586:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800558c:	2b04      	cmp	r3, #4
 800558e:	d107      	bne.n	80055a0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005598:	4313      	orrs	r3, r2
 800559a:	697a      	ldr	r2, [r7, #20]
 800559c:	4313      	orrs	r3, r2
 800559e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	697a      	ldr	r2, [r7, #20]
 80055a6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	695b      	ldr	r3, [r3, #20]
 80055ae:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80055b0:	697b      	ldr	r3, [r7, #20]
 80055b2:	f023 0307 	bic.w	r3, r3, #7
 80055b6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055bc:	697a      	ldr	r2, [r7, #20]
 80055be:	4313      	orrs	r3, r2
 80055c0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055c6:	2b04      	cmp	r3, #4
 80055c8:	d117      	bne.n	80055fa <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055ce:	697a      	ldr	r2, [r7, #20]
 80055d0:	4313      	orrs	r3, r2
 80055d2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d00e      	beq.n	80055fa <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80055dc:	6878      	ldr	r0, [r7, #4]
 80055de:	f000 fa9d 	bl	8005b1c <DMA_CheckFifoParam>
 80055e2:	4603      	mov	r3, r0
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d008      	beq.n	80055fa <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	2240      	movs	r2, #64	; 0x40
 80055ec:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	2201      	movs	r2, #1
 80055f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80055f6:	2301      	movs	r3, #1
 80055f8:	e016      	b.n	8005628 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	697a      	ldr	r2, [r7, #20]
 8005600:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005602:	6878      	ldr	r0, [r7, #4]
 8005604:	f000 fa54 	bl	8005ab0 <DMA_CalcBaseAndBitshift>
 8005608:	4603      	mov	r3, r0
 800560a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005610:	223f      	movs	r2, #63	; 0x3f
 8005612:	409a      	lsls	r2, r3
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	2200      	movs	r2, #0
 800561c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	2201      	movs	r2, #1
 8005622:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8005626:	2300      	movs	r3, #0
}
 8005628:	4618      	mov	r0, r3
 800562a:	3718      	adds	r7, #24
 800562c:	46bd      	mov	sp, r7
 800562e:	bd80      	pop	{r7, pc}
 8005630:	f010803f 	.word	0xf010803f

08005634 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005634:	b580      	push	{r7, lr}
 8005636:	b086      	sub	sp, #24
 8005638:	af00      	add	r7, sp, #0
 800563a:	60f8      	str	r0, [r7, #12]
 800563c:	60b9      	str	r1, [r7, #8]
 800563e:	607a      	str	r2, [r7, #4]
 8005640:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005642:	2300      	movs	r3, #0
 8005644:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800564a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005652:	2b01      	cmp	r3, #1
 8005654:	d101      	bne.n	800565a <HAL_DMA_Start_IT+0x26>
 8005656:	2302      	movs	r3, #2
 8005658:	e040      	b.n	80056dc <HAL_DMA_Start_IT+0xa8>
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	2201      	movs	r2, #1
 800565e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005668:	b2db      	uxtb	r3, r3
 800566a:	2b01      	cmp	r3, #1
 800566c:	d12f      	bne.n	80056ce <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	2202      	movs	r2, #2
 8005672:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	2200      	movs	r2, #0
 800567a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800567c:	683b      	ldr	r3, [r7, #0]
 800567e:	687a      	ldr	r2, [r7, #4]
 8005680:	68b9      	ldr	r1, [r7, #8]
 8005682:	68f8      	ldr	r0, [r7, #12]
 8005684:	f000 f9e6 	bl	8005a54 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800568c:	223f      	movs	r2, #63	; 0x3f
 800568e:	409a      	lsls	r2, r3
 8005690:	693b      	ldr	r3, [r7, #16]
 8005692:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	681a      	ldr	r2, [r3, #0]
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	f042 0216 	orr.w	r2, r2, #22
 80056a2:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d007      	beq.n	80056bc <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	681a      	ldr	r2, [r3, #0]
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	f042 0208 	orr.w	r2, r2, #8
 80056ba:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	681a      	ldr	r2, [r3, #0]
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	f042 0201 	orr.w	r2, r2, #1
 80056ca:	601a      	str	r2, [r3, #0]
 80056cc:	e005      	b.n	80056da <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	2200      	movs	r2, #0
 80056d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80056d6:	2302      	movs	r3, #2
 80056d8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80056da:	7dfb      	ldrb	r3, [r7, #23]
}
 80056dc:	4618      	mov	r0, r3
 80056de:	3718      	adds	r7, #24
 80056e0:	46bd      	mov	sp, r7
 80056e2:	bd80      	pop	{r7, pc}

080056e4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80056e4:	b480      	push	{r7}
 80056e6:	b083      	sub	sp, #12
 80056e8:	af00      	add	r7, sp, #0
 80056ea:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80056f2:	b2db      	uxtb	r3, r3
 80056f4:	2b02      	cmp	r3, #2
 80056f6:	d004      	beq.n	8005702 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	2280      	movs	r2, #128	; 0x80
 80056fc:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80056fe:	2301      	movs	r3, #1
 8005700:	e00c      	b.n	800571c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	2205      	movs	r2, #5
 8005706:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	681a      	ldr	r2, [r3, #0]
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	f022 0201 	bic.w	r2, r2, #1
 8005718:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800571a:	2300      	movs	r3, #0
}
 800571c:	4618      	mov	r0, r3
 800571e:	370c      	adds	r7, #12
 8005720:	46bd      	mov	sp, r7
 8005722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005726:	4770      	bx	lr

08005728 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005728:	b580      	push	{r7, lr}
 800572a:	b086      	sub	sp, #24
 800572c:	af00      	add	r7, sp, #0
 800572e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8005730:	2300      	movs	r3, #0
 8005732:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8005734:	4b92      	ldr	r3, [pc, #584]	; (8005980 <HAL_DMA_IRQHandler+0x258>)
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	4a92      	ldr	r2, [pc, #584]	; (8005984 <HAL_DMA_IRQHandler+0x25c>)
 800573a:	fba2 2303 	umull	r2, r3, r2, r3
 800573e:	0a9b      	lsrs	r3, r3, #10
 8005740:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005746:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8005748:	693b      	ldr	r3, [r7, #16]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005752:	2208      	movs	r2, #8
 8005754:	409a      	lsls	r2, r3
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	4013      	ands	r3, r2
 800575a:	2b00      	cmp	r3, #0
 800575c:	d01a      	beq.n	8005794 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	f003 0304 	and.w	r3, r3, #4
 8005768:	2b00      	cmp	r3, #0
 800576a:	d013      	beq.n	8005794 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	681a      	ldr	r2, [r3, #0]
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	f022 0204 	bic.w	r2, r2, #4
 800577a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005780:	2208      	movs	r2, #8
 8005782:	409a      	lsls	r2, r3
 8005784:	693b      	ldr	r3, [r7, #16]
 8005786:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800578c:	f043 0201 	orr.w	r2, r3, #1
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005798:	2201      	movs	r2, #1
 800579a:	409a      	lsls	r2, r3
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	4013      	ands	r3, r2
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d012      	beq.n	80057ca <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	695b      	ldr	r3, [r3, #20]
 80057aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d00b      	beq.n	80057ca <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80057b6:	2201      	movs	r2, #1
 80057b8:	409a      	lsls	r2, r3
 80057ba:	693b      	ldr	r3, [r7, #16]
 80057bc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057c2:	f043 0202 	orr.w	r2, r3, #2
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80057ce:	2204      	movs	r2, #4
 80057d0:	409a      	lsls	r2, r3
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	4013      	ands	r3, r2
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d012      	beq.n	8005800 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	f003 0302 	and.w	r3, r3, #2
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d00b      	beq.n	8005800 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80057ec:	2204      	movs	r2, #4
 80057ee:	409a      	lsls	r2, r3
 80057f0:	693b      	ldr	r3, [r7, #16]
 80057f2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057f8:	f043 0204 	orr.w	r2, r3, #4
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005804:	2210      	movs	r2, #16
 8005806:	409a      	lsls	r2, r3
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	4013      	ands	r3, r2
 800580c:	2b00      	cmp	r3, #0
 800580e:	d043      	beq.n	8005898 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	f003 0308 	and.w	r3, r3, #8
 800581a:	2b00      	cmp	r3, #0
 800581c:	d03c      	beq.n	8005898 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005822:	2210      	movs	r2, #16
 8005824:	409a      	lsls	r2, r3
 8005826:	693b      	ldr	r3, [r7, #16]
 8005828:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005834:	2b00      	cmp	r3, #0
 8005836:	d018      	beq.n	800586a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005842:	2b00      	cmp	r3, #0
 8005844:	d108      	bne.n	8005858 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800584a:	2b00      	cmp	r3, #0
 800584c:	d024      	beq.n	8005898 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005852:	6878      	ldr	r0, [r7, #4]
 8005854:	4798      	blx	r3
 8005856:	e01f      	b.n	8005898 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800585c:	2b00      	cmp	r3, #0
 800585e:	d01b      	beq.n	8005898 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005864:	6878      	ldr	r0, [r7, #4]
 8005866:	4798      	blx	r3
 8005868:	e016      	b.n	8005898 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005874:	2b00      	cmp	r3, #0
 8005876:	d107      	bne.n	8005888 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	681a      	ldr	r2, [r3, #0]
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	f022 0208 	bic.w	r2, r2, #8
 8005886:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800588c:	2b00      	cmp	r3, #0
 800588e:	d003      	beq.n	8005898 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005894:	6878      	ldr	r0, [r7, #4]
 8005896:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800589c:	2220      	movs	r2, #32
 800589e:	409a      	lsls	r2, r3
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	4013      	ands	r3, r2
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	f000 808e 	beq.w	80059c6 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	f003 0310 	and.w	r3, r3, #16
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	f000 8086 	beq.w	80059c6 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80058be:	2220      	movs	r2, #32
 80058c0:	409a      	lsls	r2, r3
 80058c2:	693b      	ldr	r3, [r7, #16]
 80058c4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80058cc:	b2db      	uxtb	r3, r3
 80058ce:	2b05      	cmp	r3, #5
 80058d0:	d136      	bne.n	8005940 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	681a      	ldr	r2, [r3, #0]
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	f022 0216 	bic.w	r2, r2, #22
 80058e0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	695a      	ldr	r2, [r3, #20]
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80058f0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d103      	bne.n	8005902 <HAL_DMA_IRQHandler+0x1da>
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d007      	beq.n	8005912 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	681a      	ldr	r2, [r3, #0]
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	f022 0208 	bic.w	r2, r2, #8
 8005910:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005916:	223f      	movs	r2, #63	; 0x3f
 8005918:	409a      	lsls	r2, r3
 800591a:	693b      	ldr	r3, [r7, #16]
 800591c:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	2200      	movs	r2, #0
 8005922:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	2201      	movs	r2, #1
 800592a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005932:	2b00      	cmp	r3, #0
 8005934:	d07d      	beq.n	8005a32 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800593a:	6878      	ldr	r0, [r7, #4]
 800593c:	4798      	blx	r3
        }
        return;
 800593e:	e078      	b.n	8005a32 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800594a:	2b00      	cmp	r3, #0
 800594c:	d01c      	beq.n	8005988 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005958:	2b00      	cmp	r3, #0
 800595a:	d108      	bne.n	800596e <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005960:	2b00      	cmp	r3, #0
 8005962:	d030      	beq.n	80059c6 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005968:	6878      	ldr	r0, [r7, #4]
 800596a:	4798      	blx	r3
 800596c:	e02b      	b.n	80059c6 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005972:	2b00      	cmp	r3, #0
 8005974:	d027      	beq.n	80059c6 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800597a:	6878      	ldr	r0, [r7, #4]
 800597c:	4798      	blx	r3
 800597e:	e022      	b.n	80059c6 <HAL_DMA_IRQHandler+0x29e>
 8005980:	20000004 	.word	0x20000004
 8005984:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005992:	2b00      	cmp	r3, #0
 8005994:	d10f      	bne.n	80059b6 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	681a      	ldr	r2, [r3, #0]
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	f022 0210 	bic.w	r2, r2, #16
 80059a4:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	2200      	movs	r2, #0
 80059aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	2201      	movs	r2, #1
 80059b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d003      	beq.n	80059c6 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80059c2:	6878      	ldr	r0, [r7, #4]
 80059c4:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d032      	beq.n	8005a34 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80059d2:	f003 0301 	and.w	r3, r3, #1
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d022      	beq.n	8005a20 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	2205      	movs	r2, #5
 80059de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	681a      	ldr	r2, [r3, #0]
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	f022 0201 	bic.w	r2, r2, #1
 80059f0:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80059f2:	68bb      	ldr	r3, [r7, #8]
 80059f4:	3301      	adds	r3, #1
 80059f6:	60bb      	str	r3, [r7, #8]
 80059f8:	697a      	ldr	r2, [r7, #20]
 80059fa:	429a      	cmp	r2, r3
 80059fc:	d307      	bcc.n	8005a0e <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	f003 0301 	and.w	r3, r3, #1
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d1f2      	bne.n	80059f2 <HAL_DMA_IRQHandler+0x2ca>
 8005a0c:	e000      	b.n	8005a10 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8005a0e:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	2200      	movs	r2, #0
 8005a14:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	2201      	movs	r2, #1
 8005a1c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d005      	beq.n	8005a34 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005a2c:	6878      	ldr	r0, [r7, #4]
 8005a2e:	4798      	blx	r3
 8005a30:	e000      	b.n	8005a34 <HAL_DMA_IRQHandler+0x30c>
        return;
 8005a32:	bf00      	nop
    }
  }
}
 8005a34:	3718      	adds	r7, #24
 8005a36:	46bd      	mov	sp, r7
 8005a38:	bd80      	pop	{r7, pc}
 8005a3a:	bf00      	nop

08005a3c <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8005a3c:	b480      	push	{r7}
 8005a3e:	b083      	sub	sp, #12
 8005a40:	af00      	add	r7, sp, #0
 8005a42:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8005a48:	4618      	mov	r0, r3
 8005a4a:	370c      	adds	r7, #12
 8005a4c:	46bd      	mov	sp, r7
 8005a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a52:	4770      	bx	lr

08005a54 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005a54:	b480      	push	{r7}
 8005a56:	b085      	sub	sp, #20
 8005a58:	af00      	add	r7, sp, #0
 8005a5a:	60f8      	str	r0, [r7, #12]
 8005a5c:	60b9      	str	r1, [r7, #8]
 8005a5e:	607a      	str	r2, [r7, #4]
 8005a60:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	681a      	ldr	r2, [r3, #0]
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005a70:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	683a      	ldr	r2, [r7, #0]
 8005a78:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	689b      	ldr	r3, [r3, #8]
 8005a7e:	2b40      	cmp	r3, #64	; 0x40
 8005a80:	d108      	bne.n	8005a94 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	687a      	ldr	r2, [r7, #4]
 8005a88:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	68ba      	ldr	r2, [r7, #8]
 8005a90:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8005a92:	e007      	b.n	8005aa4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	68ba      	ldr	r2, [r7, #8]
 8005a9a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	687a      	ldr	r2, [r7, #4]
 8005aa2:	60da      	str	r2, [r3, #12]
}
 8005aa4:	bf00      	nop
 8005aa6:	3714      	adds	r7, #20
 8005aa8:	46bd      	mov	sp, r7
 8005aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aae:	4770      	bx	lr

08005ab0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005ab0:	b480      	push	{r7}
 8005ab2:	b085      	sub	sp, #20
 8005ab4:	af00      	add	r7, sp, #0
 8005ab6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	b2db      	uxtb	r3, r3
 8005abe:	3b10      	subs	r3, #16
 8005ac0:	4a14      	ldr	r2, [pc, #80]	; (8005b14 <DMA_CalcBaseAndBitshift+0x64>)
 8005ac2:	fba2 2303 	umull	r2, r3, r2, r3
 8005ac6:	091b      	lsrs	r3, r3, #4
 8005ac8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8005aca:	4a13      	ldr	r2, [pc, #76]	; (8005b18 <DMA_CalcBaseAndBitshift+0x68>)
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	4413      	add	r3, r2
 8005ad0:	781b      	ldrb	r3, [r3, #0]
 8005ad2:	461a      	mov	r2, r3
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	2b03      	cmp	r3, #3
 8005adc:	d909      	bls.n	8005af2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8005ae6:	f023 0303 	bic.w	r3, r3, #3
 8005aea:	1d1a      	adds	r2, r3, #4
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	659a      	str	r2, [r3, #88]	; 0x58
 8005af0:	e007      	b.n	8005b02 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8005afa:	f023 0303 	bic.w	r3, r3, #3
 8005afe:	687a      	ldr	r2, [r7, #4]
 8005b00:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8005b06:	4618      	mov	r0, r3
 8005b08:	3714      	adds	r7, #20
 8005b0a:	46bd      	mov	sp, r7
 8005b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b10:	4770      	bx	lr
 8005b12:	bf00      	nop
 8005b14:	aaaaaaab 	.word	0xaaaaaaab
 8005b18:	08015cec 	.word	0x08015cec

08005b1c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005b1c:	b480      	push	{r7}
 8005b1e:	b085      	sub	sp, #20
 8005b20:	af00      	add	r7, sp, #0
 8005b22:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005b24:	2300      	movs	r3, #0
 8005b26:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b2c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	699b      	ldr	r3, [r3, #24]
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d11f      	bne.n	8005b76 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8005b36:	68bb      	ldr	r3, [r7, #8]
 8005b38:	2b03      	cmp	r3, #3
 8005b3a:	d855      	bhi.n	8005be8 <DMA_CheckFifoParam+0xcc>
 8005b3c:	a201      	add	r2, pc, #4	; (adr r2, 8005b44 <DMA_CheckFifoParam+0x28>)
 8005b3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b42:	bf00      	nop
 8005b44:	08005b55 	.word	0x08005b55
 8005b48:	08005b67 	.word	0x08005b67
 8005b4c:	08005b55 	.word	0x08005b55
 8005b50:	08005be9 	.word	0x08005be9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b58:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d045      	beq.n	8005bec <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8005b60:	2301      	movs	r3, #1
 8005b62:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005b64:	e042      	b.n	8005bec <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b6a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005b6e:	d13f      	bne.n	8005bf0 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8005b70:	2301      	movs	r3, #1
 8005b72:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005b74:	e03c      	b.n	8005bf0 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	699b      	ldr	r3, [r3, #24]
 8005b7a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005b7e:	d121      	bne.n	8005bc4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8005b80:	68bb      	ldr	r3, [r7, #8]
 8005b82:	2b03      	cmp	r3, #3
 8005b84:	d836      	bhi.n	8005bf4 <DMA_CheckFifoParam+0xd8>
 8005b86:	a201      	add	r2, pc, #4	; (adr r2, 8005b8c <DMA_CheckFifoParam+0x70>)
 8005b88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b8c:	08005b9d 	.word	0x08005b9d
 8005b90:	08005ba3 	.word	0x08005ba3
 8005b94:	08005b9d 	.word	0x08005b9d
 8005b98:	08005bb5 	.word	0x08005bb5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8005b9c:	2301      	movs	r3, #1
 8005b9e:	73fb      	strb	r3, [r7, #15]
      break;
 8005ba0:	e02f      	b.n	8005c02 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ba6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d024      	beq.n	8005bf8 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8005bae:	2301      	movs	r3, #1
 8005bb0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005bb2:	e021      	b.n	8005bf8 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bb8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005bbc:	d11e      	bne.n	8005bfc <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8005bbe:	2301      	movs	r3, #1
 8005bc0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8005bc2:	e01b      	b.n	8005bfc <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8005bc4:	68bb      	ldr	r3, [r7, #8]
 8005bc6:	2b02      	cmp	r3, #2
 8005bc8:	d902      	bls.n	8005bd0 <DMA_CheckFifoParam+0xb4>
 8005bca:	2b03      	cmp	r3, #3
 8005bcc:	d003      	beq.n	8005bd6 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8005bce:	e018      	b.n	8005c02 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8005bd0:	2301      	movs	r3, #1
 8005bd2:	73fb      	strb	r3, [r7, #15]
      break;
 8005bd4:	e015      	b.n	8005c02 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bda:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d00e      	beq.n	8005c00 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8005be2:	2301      	movs	r3, #1
 8005be4:	73fb      	strb	r3, [r7, #15]
      break;
 8005be6:	e00b      	b.n	8005c00 <DMA_CheckFifoParam+0xe4>
      break;
 8005be8:	bf00      	nop
 8005bea:	e00a      	b.n	8005c02 <DMA_CheckFifoParam+0xe6>
      break;
 8005bec:	bf00      	nop
 8005bee:	e008      	b.n	8005c02 <DMA_CheckFifoParam+0xe6>
      break;
 8005bf0:	bf00      	nop
 8005bf2:	e006      	b.n	8005c02 <DMA_CheckFifoParam+0xe6>
      break;
 8005bf4:	bf00      	nop
 8005bf6:	e004      	b.n	8005c02 <DMA_CheckFifoParam+0xe6>
      break;
 8005bf8:	bf00      	nop
 8005bfa:	e002      	b.n	8005c02 <DMA_CheckFifoParam+0xe6>
      break;   
 8005bfc:	bf00      	nop
 8005bfe:	e000      	b.n	8005c02 <DMA_CheckFifoParam+0xe6>
      break;
 8005c00:	bf00      	nop
    }
  } 
  
  return status; 
 8005c02:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c04:	4618      	mov	r0, r3
 8005c06:	3714      	adds	r7, #20
 8005c08:	46bd      	mov	sp, r7
 8005c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c0e:	4770      	bx	lr

08005c10 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005c10:	b480      	push	{r7}
 8005c12:	b089      	sub	sp, #36	; 0x24
 8005c14:	af00      	add	r7, sp, #0
 8005c16:	6078      	str	r0, [r7, #4]
 8005c18:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8005c1a:	2300      	movs	r3, #0
 8005c1c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8005c1e:	2300      	movs	r3, #0
 8005c20:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8005c22:	2300      	movs	r3, #0
 8005c24:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005c26:	2300      	movs	r3, #0
 8005c28:	61fb      	str	r3, [r7, #28]
 8005c2a:	e16b      	b.n	8005f04 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005c2c:	2201      	movs	r2, #1
 8005c2e:	69fb      	ldr	r3, [r7, #28]
 8005c30:	fa02 f303 	lsl.w	r3, r2, r3
 8005c34:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005c36:	683b      	ldr	r3, [r7, #0]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	697a      	ldr	r2, [r7, #20]
 8005c3c:	4013      	ands	r3, r2
 8005c3e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005c40:	693a      	ldr	r2, [r7, #16]
 8005c42:	697b      	ldr	r3, [r7, #20]
 8005c44:	429a      	cmp	r2, r3
 8005c46:	f040 815a 	bne.w	8005efe <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005c4a:	683b      	ldr	r3, [r7, #0]
 8005c4c:	685b      	ldr	r3, [r3, #4]
 8005c4e:	2b01      	cmp	r3, #1
 8005c50:	d00b      	beq.n	8005c6a <HAL_GPIO_Init+0x5a>
 8005c52:	683b      	ldr	r3, [r7, #0]
 8005c54:	685b      	ldr	r3, [r3, #4]
 8005c56:	2b02      	cmp	r3, #2
 8005c58:	d007      	beq.n	8005c6a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005c5a:	683b      	ldr	r3, [r7, #0]
 8005c5c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005c5e:	2b11      	cmp	r3, #17
 8005c60:	d003      	beq.n	8005c6a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005c62:	683b      	ldr	r3, [r7, #0]
 8005c64:	685b      	ldr	r3, [r3, #4]
 8005c66:	2b12      	cmp	r3, #18
 8005c68:	d130      	bne.n	8005ccc <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	689b      	ldr	r3, [r3, #8]
 8005c6e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005c70:	69fb      	ldr	r3, [r7, #28]
 8005c72:	005b      	lsls	r3, r3, #1
 8005c74:	2203      	movs	r2, #3
 8005c76:	fa02 f303 	lsl.w	r3, r2, r3
 8005c7a:	43db      	mvns	r3, r3
 8005c7c:	69ba      	ldr	r2, [r7, #24]
 8005c7e:	4013      	ands	r3, r2
 8005c80:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005c82:	683b      	ldr	r3, [r7, #0]
 8005c84:	68da      	ldr	r2, [r3, #12]
 8005c86:	69fb      	ldr	r3, [r7, #28]
 8005c88:	005b      	lsls	r3, r3, #1
 8005c8a:	fa02 f303 	lsl.w	r3, r2, r3
 8005c8e:	69ba      	ldr	r2, [r7, #24]
 8005c90:	4313      	orrs	r3, r2
 8005c92:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	69ba      	ldr	r2, [r7, #24]
 8005c98:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	685b      	ldr	r3, [r3, #4]
 8005c9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005ca0:	2201      	movs	r2, #1
 8005ca2:	69fb      	ldr	r3, [r7, #28]
 8005ca4:	fa02 f303 	lsl.w	r3, r2, r3
 8005ca8:	43db      	mvns	r3, r3
 8005caa:	69ba      	ldr	r2, [r7, #24]
 8005cac:	4013      	ands	r3, r2
 8005cae:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8005cb0:	683b      	ldr	r3, [r7, #0]
 8005cb2:	685b      	ldr	r3, [r3, #4]
 8005cb4:	091b      	lsrs	r3, r3, #4
 8005cb6:	f003 0201 	and.w	r2, r3, #1
 8005cba:	69fb      	ldr	r3, [r7, #28]
 8005cbc:	fa02 f303 	lsl.w	r3, r2, r3
 8005cc0:	69ba      	ldr	r2, [r7, #24]
 8005cc2:	4313      	orrs	r3, r2
 8005cc4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	69ba      	ldr	r2, [r7, #24]
 8005cca:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	68db      	ldr	r3, [r3, #12]
 8005cd0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005cd2:	69fb      	ldr	r3, [r7, #28]
 8005cd4:	005b      	lsls	r3, r3, #1
 8005cd6:	2203      	movs	r2, #3
 8005cd8:	fa02 f303 	lsl.w	r3, r2, r3
 8005cdc:	43db      	mvns	r3, r3
 8005cde:	69ba      	ldr	r2, [r7, #24]
 8005ce0:	4013      	ands	r3, r2
 8005ce2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005ce4:	683b      	ldr	r3, [r7, #0]
 8005ce6:	689a      	ldr	r2, [r3, #8]
 8005ce8:	69fb      	ldr	r3, [r7, #28]
 8005cea:	005b      	lsls	r3, r3, #1
 8005cec:	fa02 f303 	lsl.w	r3, r2, r3
 8005cf0:	69ba      	ldr	r2, [r7, #24]
 8005cf2:	4313      	orrs	r3, r2
 8005cf4:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	69ba      	ldr	r2, [r7, #24]
 8005cfa:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005cfc:	683b      	ldr	r3, [r7, #0]
 8005cfe:	685b      	ldr	r3, [r3, #4]
 8005d00:	2b02      	cmp	r3, #2
 8005d02:	d003      	beq.n	8005d0c <HAL_GPIO_Init+0xfc>
 8005d04:	683b      	ldr	r3, [r7, #0]
 8005d06:	685b      	ldr	r3, [r3, #4]
 8005d08:	2b12      	cmp	r3, #18
 8005d0a:	d123      	bne.n	8005d54 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005d0c:	69fb      	ldr	r3, [r7, #28]
 8005d0e:	08da      	lsrs	r2, r3, #3
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	3208      	adds	r2, #8
 8005d14:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005d18:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005d1a:	69fb      	ldr	r3, [r7, #28]
 8005d1c:	f003 0307 	and.w	r3, r3, #7
 8005d20:	009b      	lsls	r3, r3, #2
 8005d22:	220f      	movs	r2, #15
 8005d24:	fa02 f303 	lsl.w	r3, r2, r3
 8005d28:	43db      	mvns	r3, r3
 8005d2a:	69ba      	ldr	r2, [r7, #24]
 8005d2c:	4013      	ands	r3, r2
 8005d2e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005d30:	683b      	ldr	r3, [r7, #0]
 8005d32:	691a      	ldr	r2, [r3, #16]
 8005d34:	69fb      	ldr	r3, [r7, #28]
 8005d36:	f003 0307 	and.w	r3, r3, #7
 8005d3a:	009b      	lsls	r3, r3, #2
 8005d3c:	fa02 f303 	lsl.w	r3, r2, r3
 8005d40:	69ba      	ldr	r2, [r7, #24]
 8005d42:	4313      	orrs	r3, r2
 8005d44:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005d46:	69fb      	ldr	r3, [r7, #28]
 8005d48:	08da      	lsrs	r2, r3, #3
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	3208      	adds	r2, #8
 8005d4e:	69b9      	ldr	r1, [r7, #24]
 8005d50:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005d5a:	69fb      	ldr	r3, [r7, #28]
 8005d5c:	005b      	lsls	r3, r3, #1
 8005d5e:	2203      	movs	r2, #3
 8005d60:	fa02 f303 	lsl.w	r3, r2, r3
 8005d64:	43db      	mvns	r3, r3
 8005d66:	69ba      	ldr	r2, [r7, #24]
 8005d68:	4013      	ands	r3, r2
 8005d6a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005d6c:	683b      	ldr	r3, [r7, #0]
 8005d6e:	685b      	ldr	r3, [r3, #4]
 8005d70:	f003 0203 	and.w	r2, r3, #3
 8005d74:	69fb      	ldr	r3, [r7, #28]
 8005d76:	005b      	lsls	r3, r3, #1
 8005d78:	fa02 f303 	lsl.w	r3, r2, r3
 8005d7c:	69ba      	ldr	r2, [r7, #24]
 8005d7e:	4313      	orrs	r3, r2
 8005d80:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	69ba      	ldr	r2, [r7, #24]
 8005d86:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8005d88:	683b      	ldr	r3, [r7, #0]
 8005d8a:	685b      	ldr	r3, [r3, #4]
 8005d8c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	f000 80b4 	beq.w	8005efe <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005d96:	2300      	movs	r3, #0
 8005d98:	60fb      	str	r3, [r7, #12]
 8005d9a:	4b5f      	ldr	r3, [pc, #380]	; (8005f18 <HAL_GPIO_Init+0x308>)
 8005d9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d9e:	4a5e      	ldr	r2, [pc, #376]	; (8005f18 <HAL_GPIO_Init+0x308>)
 8005da0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005da4:	6453      	str	r3, [r2, #68]	; 0x44
 8005da6:	4b5c      	ldr	r3, [pc, #368]	; (8005f18 <HAL_GPIO_Init+0x308>)
 8005da8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005daa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005dae:	60fb      	str	r3, [r7, #12]
 8005db0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005db2:	4a5a      	ldr	r2, [pc, #360]	; (8005f1c <HAL_GPIO_Init+0x30c>)
 8005db4:	69fb      	ldr	r3, [r7, #28]
 8005db6:	089b      	lsrs	r3, r3, #2
 8005db8:	3302      	adds	r3, #2
 8005dba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005dbe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005dc0:	69fb      	ldr	r3, [r7, #28]
 8005dc2:	f003 0303 	and.w	r3, r3, #3
 8005dc6:	009b      	lsls	r3, r3, #2
 8005dc8:	220f      	movs	r2, #15
 8005dca:	fa02 f303 	lsl.w	r3, r2, r3
 8005dce:	43db      	mvns	r3, r3
 8005dd0:	69ba      	ldr	r2, [r7, #24]
 8005dd2:	4013      	ands	r3, r2
 8005dd4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	4a51      	ldr	r2, [pc, #324]	; (8005f20 <HAL_GPIO_Init+0x310>)
 8005dda:	4293      	cmp	r3, r2
 8005ddc:	d02b      	beq.n	8005e36 <HAL_GPIO_Init+0x226>
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	4a50      	ldr	r2, [pc, #320]	; (8005f24 <HAL_GPIO_Init+0x314>)
 8005de2:	4293      	cmp	r3, r2
 8005de4:	d025      	beq.n	8005e32 <HAL_GPIO_Init+0x222>
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	4a4f      	ldr	r2, [pc, #316]	; (8005f28 <HAL_GPIO_Init+0x318>)
 8005dea:	4293      	cmp	r3, r2
 8005dec:	d01f      	beq.n	8005e2e <HAL_GPIO_Init+0x21e>
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	4a4e      	ldr	r2, [pc, #312]	; (8005f2c <HAL_GPIO_Init+0x31c>)
 8005df2:	4293      	cmp	r3, r2
 8005df4:	d019      	beq.n	8005e2a <HAL_GPIO_Init+0x21a>
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	4a4d      	ldr	r2, [pc, #308]	; (8005f30 <HAL_GPIO_Init+0x320>)
 8005dfa:	4293      	cmp	r3, r2
 8005dfc:	d013      	beq.n	8005e26 <HAL_GPIO_Init+0x216>
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	4a4c      	ldr	r2, [pc, #304]	; (8005f34 <HAL_GPIO_Init+0x324>)
 8005e02:	4293      	cmp	r3, r2
 8005e04:	d00d      	beq.n	8005e22 <HAL_GPIO_Init+0x212>
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	4a4b      	ldr	r2, [pc, #300]	; (8005f38 <HAL_GPIO_Init+0x328>)
 8005e0a:	4293      	cmp	r3, r2
 8005e0c:	d007      	beq.n	8005e1e <HAL_GPIO_Init+0x20e>
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	4a4a      	ldr	r2, [pc, #296]	; (8005f3c <HAL_GPIO_Init+0x32c>)
 8005e12:	4293      	cmp	r3, r2
 8005e14:	d101      	bne.n	8005e1a <HAL_GPIO_Init+0x20a>
 8005e16:	2307      	movs	r3, #7
 8005e18:	e00e      	b.n	8005e38 <HAL_GPIO_Init+0x228>
 8005e1a:	2308      	movs	r3, #8
 8005e1c:	e00c      	b.n	8005e38 <HAL_GPIO_Init+0x228>
 8005e1e:	2306      	movs	r3, #6
 8005e20:	e00a      	b.n	8005e38 <HAL_GPIO_Init+0x228>
 8005e22:	2305      	movs	r3, #5
 8005e24:	e008      	b.n	8005e38 <HAL_GPIO_Init+0x228>
 8005e26:	2304      	movs	r3, #4
 8005e28:	e006      	b.n	8005e38 <HAL_GPIO_Init+0x228>
 8005e2a:	2303      	movs	r3, #3
 8005e2c:	e004      	b.n	8005e38 <HAL_GPIO_Init+0x228>
 8005e2e:	2302      	movs	r3, #2
 8005e30:	e002      	b.n	8005e38 <HAL_GPIO_Init+0x228>
 8005e32:	2301      	movs	r3, #1
 8005e34:	e000      	b.n	8005e38 <HAL_GPIO_Init+0x228>
 8005e36:	2300      	movs	r3, #0
 8005e38:	69fa      	ldr	r2, [r7, #28]
 8005e3a:	f002 0203 	and.w	r2, r2, #3
 8005e3e:	0092      	lsls	r2, r2, #2
 8005e40:	4093      	lsls	r3, r2
 8005e42:	69ba      	ldr	r2, [r7, #24]
 8005e44:	4313      	orrs	r3, r2
 8005e46:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005e48:	4934      	ldr	r1, [pc, #208]	; (8005f1c <HAL_GPIO_Init+0x30c>)
 8005e4a:	69fb      	ldr	r3, [r7, #28]
 8005e4c:	089b      	lsrs	r3, r3, #2
 8005e4e:	3302      	adds	r3, #2
 8005e50:	69ba      	ldr	r2, [r7, #24]
 8005e52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005e56:	4b3a      	ldr	r3, [pc, #232]	; (8005f40 <HAL_GPIO_Init+0x330>)
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005e5c:	693b      	ldr	r3, [r7, #16]
 8005e5e:	43db      	mvns	r3, r3
 8005e60:	69ba      	ldr	r2, [r7, #24]
 8005e62:	4013      	ands	r3, r2
 8005e64:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8005e66:	683b      	ldr	r3, [r7, #0]
 8005e68:	685b      	ldr	r3, [r3, #4]
 8005e6a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d003      	beq.n	8005e7a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8005e72:	69ba      	ldr	r2, [r7, #24]
 8005e74:	693b      	ldr	r3, [r7, #16]
 8005e76:	4313      	orrs	r3, r2
 8005e78:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005e7a:	4a31      	ldr	r2, [pc, #196]	; (8005f40 <HAL_GPIO_Init+0x330>)
 8005e7c:	69bb      	ldr	r3, [r7, #24]
 8005e7e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8005e80:	4b2f      	ldr	r3, [pc, #188]	; (8005f40 <HAL_GPIO_Init+0x330>)
 8005e82:	685b      	ldr	r3, [r3, #4]
 8005e84:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005e86:	693b      	ldr	r3, [r7, #16]
 8005e88:	43db      	mvns	r3, r3
 8005e8a:	69ba      	ldr	r2, [r7, #24]
 8005e8c:	4013      	ands	r3, r2
 8005e8e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005e90:	683b      	ldr	r3, [r7, #0]
 8005e92:	685b      	ldr	r3, [r3, #4]
 8005e94:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d003      	beq.n	8005ea4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8005e9c:	69ba      	ldr	r2, [r7, #24]
 8005e9e:	693b      	ldr	r3, [r7, #16]
 8005ea0:	4313      	orrs	r3, r2
 8005ea2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005ea4:	4a26      	ldr	r2, [pc, #152]	; (8005f40 <HAL_GPIO_Init+0x330>)
 8005ea6:	69bb      	ldr	r3, [r7, #24]
 8005ea8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005eaa:	4b25      	ldr	r3, [pc, #148]	; (8005f40 <HAL_GPIO_Init+0x330>)
 8005eac:	689b      	ldr	r3, [r3, #8]
 8005eae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005eb0:	693b      	ldr	r3, [r7, #16]
 8005eb2:	43db      	mvns	r3, r3
 8005eb4:	69ba      	ldr	r2, [r7, #24]
 8005eb6:	4013      	ands	r3, r2
 8005eb8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8005eba:	683b      	ldr	r3, [r7, #0]
 8005ebc:	685b      	ldr	r3, [r3, #4]
 8005ebe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d003      	beq.n	8005ece <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8005ec6:	69ba      	ldr	r2, [r7, #24]
 8005ec8:	693b      	ldr	r3, [r7, #16]
 8005eca:	4313      	orrs	r3, r2
 8005ecc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005ece:	4a1c      	ldr	r2, [pc, #112]	; (8005f40 <HAL_GPIO_Init+0x330>)
 8005ed0:	69bb      	ldr	r3, [r7, #24]
 8005ed2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005ed4:	4b1a      	ldr	r3, [pc, #104]	; (8005f40 <HAL_GPIO_Init+0x330>)
 8005ed6:	68db      	ldr	r3, [r3, #12]
 8005ed8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005eda:	693b      	ldr	r3, [r7, #16]
 8005edc:	43db      	mvns	r3, r3
 8005ede:	69ba      	ldr	r2, [r7, #24]
 8005ee0:	4013      	ands	r3, r2
 8005ee2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005ee4:	683b      	ldr	r3, [r7, #0]
 8005ee6:	685b      	ldr	r3, [r3, #4]
 8005ee8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d003      	beq.n	8005ef8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8005ef0:	69ba      	ldr	r2, [r7, #24]
 8005ef2:	693b      	ldr	r3, [r7, #16]
 8005ef4:	4313      	orrs	r3, r2
 8005ef6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005ef8:	4a11      	ldr	r2, [pc, #68]	; (8005f40 <HAL_GPIO_Init+0x330>)
 8005efa:	69bb      	ldr	r3, [r7, #24]
 8005efc:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005efe:	69fb      	ldr	r3, [r7, #28]
 8005f00:	3301      	adds	r3, #1
 8005f02:	61fb      	str	r3, [r7, #28]
 8005f04:	69fb      	ldr	r3, [r7, #28]
 8005f06:	2b0f      	cmp	r3, #15
 8005f08:	f67f ae90 	bls.w	8005c2c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005f0c:	bf00      	nop
 8005f0e:	3724      	adds	r7, #36	; 0x24
 8005f10:	46bd      	mov	sp, r7
 8005f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f16:	4770      	bx	lr
 8005f18:	40023800 	.word	0x40023800
 8005f1c:	40013800 	.word	0x40013800
 8005f20:	40020000 	.word	0x40020000
 8005f24:	40020400 	.word	0x40020400
 8005f28:	40020800 	.word	0x40020800
 8005f2c:	40020c00 	.word	0x40020c00
 8005f30:	40021000 	.word	0x40021000
 8005f34:	40021400 	.word	0x40021400
 8005f38:	40021800 	.word	0x40021800
 8005f3c:	40021c00 	.word	0x40021c00
 8005f40:	40013c00 	.word	0x40013c00

08005f44 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005f44:	b480      	push	{r7}
 8005f46:	b085      	sub	sp, #20
 8005f48:	af00      	add	r7, sp, #0
 8005f4a:	6078      	str	r0, [r7, #4]
 8005f4c:	460b      	mov	r3, r1
 8005f4e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	691a      	ldr	r2, [r3, #16]
 8005f54:	887b      	ldrh	r3, [r7, #2]
 8005f56:	4013      	ands	r3, r2
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d002      	beq.n	8005f62 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005f5c:	2301      	movs	r3, #1
 8005f5e:	73fb      	strb	r3, [r7, #15]
 8005f60:	e001      	b.n	8005f66 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005f62:	2300      	movs	r3, #0
 8005f64:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005f66:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f68:	4618      	mov	r0, r3
 8005f6a:	3714      	adds	r7, #20
 8005f6c:	46bd      	mov	sp, r7
 8005f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f72:	4770      	bx	lr

08005f74 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005f74:	b480      	push	{r7}
 8005f76:	b083      	sub	sp, #12
 8005f78:	af00      	add	r7, sp, #0
 8005f7a:	6078      	str	r0, [r7, #4]
 8005f7c:	460b      	mov	r3, r1
 8005f7e:	807b      	strh	r3, [r7, #2]
 8005f80:	4613      	mov	r3, r2
 8005f82:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005f84:	787b      	ldrb	r3, [r7, #1]
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d003      	beq.n	8005f92 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005f8a:	887a      	ldrh	r2, [r7, #2]
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005f90:	e003      	b.n	8005f9a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8005f92:	887b      	ldrh	r3, [r7, #2]
 8005f94:	041a      	lsls	r2, r3, #16
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	619a      	str	r2, [r3, #24]
}
 8005f9a:	bf00      	nop
 8005f9c:	370c      	adds	r7, #12
 8005f9e:	46bd      	mov	sp, r7
 8005fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fa4:	4770      	bx	lr
	...

08005fa8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005fa8:	b580      	push	{r7, lr}
 8005faa:	b082      	sub	sp, #8
 8005fac:	af00      	add	r7, sp, #0
 8005fae:	4603      	mov	r3, r0
 8005fb0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8005fb2:	4b08      	ldr	r3, [pc, #32]	; (8005fd4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005fb4:	695a      	ldr	r2, [r3, #20]
 8005fb6:	88fb      	ldrh	r3, [r7, #6]
 8005fb8:	4013      	ands	r3, r2
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d006      	beq.n	8005fcc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005fbe:	4a05      	ldr	r2, [pc, #20]	; (8005fd4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005fc0:	88fb      	ldrh	r3, [r7, #6]
 8005fc2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005fc4:	88fb      	ldrh	r3, [r7, #6]
 8005fc6:	4618      	mov	r0, r3
 8005fc8:	f000 f806 	bl	8005fd8 <HAL_GPIO_EXTI_Callback>
  }
}
 8005fcc:	bf00      	nop
 8005fce:	3708      	adds	r7, #8
 8005fd0:	46bd      	mov	sp, r7
 8005fd2:	bd80      	pop	{r7, pc}
 8005fd4:	40013c00 	.word	0x40013c00

08005fd8 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8005fd8:	b480      	push	{r7}
 8005fda:	b083      	sub	sp, #12
 8005fdc:	af00      	add	r7, sp, #0
 8005fde:	4603      	mov	r3, r0
 8005fe0:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8005fe2:	bf00      	nop
 8005fe4:	370c      	adds	r7, #12
 8005fe6:	46bd      	mov	sp, r7
 8005fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fec:	4770      	bx	lr
	...

08005ff0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005ff0:	b580      	push	{r7, lr}
 8005ff2:	b084      	sub	sp, #16
 8005ff4:	af00      	add	r7, sp, #0
 8005ff6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d101      	bne.n	8006002 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005ffe:	2301      	movs	r3, #1
 8006000:	e11f      	b.n	8006242 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006008:	b2db      	uxtb	r3, r3
 800600a:	2b00      	cmp	r3, #0
 800600c:	d106      	bne.n	800601c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	2200      	movs	r2, #0
 8006012:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8006016:	6878      	ldr	r0, [r7, #4]
 8006018:	f7fe fca2 	bl	8004960 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	2224      	movs	r2, #36	; 0x24
 8006020:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	681a      	ldr	r2, [r3, #0]
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	f022 0201 	bic.w	r2, r2, #1
 8006032:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	681a      	ldr	r2, [r3, #0]
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006042:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	681a      	ldr	r2, [r3, #0]
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006052:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8006054:	f002 fd1a 	bl	8008a8c <HAL_RCC_GetPCLK1Freq>
 8006058:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	685b      	ldr	r3, [r3, #4]
 800605e:	4a7b      	ldr	r2, [pc, #492]	; (800624c <HAL_I2C_Init+0x25c>)
 8006060:	4293      	cmp	r3, r2
 8006062:	d807      	bhi.n	8006074 <HAL_I2C_Init+0x84>
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	4a7a      	ldr	r2, [pc, #488]	; (8006250 <HAL_I2C_Init+0x260>)
 8006068:	4293      	cmp	r3, r2
 800606a:	bf94      	ite	ls
 800606c:	2301      	movls	r3, #1
 800606e:	2300      	movhi	r3, #0
 8006070:	b2db      	uxtb	r3, r3
 8006072:	e006      	b.n	8006082 <HAL_I2C_Init+0x92>
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	4a77      	ldr	r2, [pc, #476]	; (8006254 <HAL_I2C_Init+0x264>)
 8006078:	4293      	cmp	r3, r2
 800607a:	bf94      	ite	ls
 800607c:	2301      	movls	r3, #1
 800607e:	2300      	movhi	r3, #0
 8006080:	b2db      	uxtb	r3, r3
 8006082:	2b00      	cmp	r3, #0
 8006084:	d001      	beq.n	800608a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8006086:	2301      	movs	r3, #1
 8006088:	e0db      	b.n	8006242 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	4a72      	ldr	r2, [pc, #456]	; (8006258 <HAL_I2C_Init+0x268>)
 800608e:	fba2 2303 	umull	r2, r3, r2, r3
 8006092:	0c9b      	lsrs	r3, r3, #18
 8006094:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	685b      	ldr	r3, [r3, #4]
 800609c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	68ba      	ldr	r2, [r7, #8]
 80060a6:	430a      	orrs	r2, r1
 80060a8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	6a1b      	ldr	r3, [r3, #32]
 80060b0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	685b      	ldr	r3, [r3, #4]
 80060b8:	4a64      	ldr	r2, [pc, #400]	; (800624c <HAL_I2C_Init+0x25c>)
 80060ba:	4293      	cmp	r3, r2
 80060bc:	d802      	bhi.n	80060c4 <HAL_I2C_Init+0xd4>
 80060be:	68bb      	ldr	r3, [r7, #8]
 80060c0:	3301      	adds	r3, #1
 80060c2:	e009      	b.n	80060d8 <HAL_I2C_Init+0xe8>
 80060c4:	68bb      	ldr	r3, [r7, #8]
 80060c6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80060ca:	fb02 f303 	mul.w	r3, r2, r3
 80060ce:	4a63      	ldr	r2, [pc, #396]	; (800625c <HAL_I2C_Init+0x26c>)
 80060d0:	fba2 2303 	umull	r2, r3, r2, r3
 80060d4:	099b      	lsrs	r3, r3, #6
 80060d6:	3301      	adds	r3, #1
 80060d8:	687a      	ldr	r2, [r7, #4]
 80060da:	6812      	ldr	r2, [r2, #0]
 80060dc:	430b      	orrs	r3, r1
 80060de:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	69db      	ldr	r3, [r3, #28]
 80060e6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80060ea:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	685b      	ldr	r3, [r3, #4]
 80060f2:	4956      	ldr	r1, [pc, #344]	; (800624c <HAL_I2C_Init+0x25c>)
 80060f4:	428b      	cmp	r3, r1
 80060f6:	d80d      	bhi.n	8006114 <HAL_I2C_Init+0x124>
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	1e59      	subs	r1, r3, #1
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	685b      	ldr	r3, [r3, #4]
 8006100:	005b      	lsls	r3, r3, #1
 8006102:	fbb1 f3f3 	udiv	r3, r1, r3
 8006106:	3301      	adds	r3, #1
 8006108:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800610c:	2b04      	cmp	r3, #4
 800610e:	bf38      	it	cc
 8006110:	2304      	movcc	r3, #4
 8006112:	e04f      	b.n	80061b4 <HAL_I2C_Init+0x1c4>
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	689b      	ldr	r3, [r3, #8]
 8006118:	2b00      	cmp	r3, #0
 800611a:	d111      	bne.n	8006140 <HAL_I2C_Init+0x150>
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	1e58      	subs	r0, r3, #1
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	6859      	ldr	r1, [r3, #4]
 8006124:	460b      	mov	r3, r1
 8006126:	005b      	lsls	r3, r3, #1
 8006128:	440b      	add	r3, r1
 800612a:	fbb0 f3f3 	udiv	r3, r0, r3
 800612e:	3301      	adds	r3, #1
 8006130:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006134:	2b00      	cmp	r3, #0
 8006136:	bf0c      	ite	eq
 8006138:	2301      	moveq	r3, #1
 800613a:	2300      	movne	r3, #0
 800613c:	b2db      	uxtb	r3, r3
 800613e:	e012      	b.n	8006166 <HAL_I2C_Init+0x176>
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	1e58      	subs	r0, r3, #1
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	6859      	ldr	r1, [r3, #4]
 8006148:	460b      	mov	r3, r1
 800614a:	009b      	lsls	r3, r3, #2
 800614c:	440b      	add	r3, r1
 800614e:	0099      	lsls	r1, r3, #2
 8006150:	440b      	add	r3, r1
 8006152:	fbb0 f3f3 	udiv	r3, r0, r3
 8006156:	3301      	adds	r3, #1
 8006158:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800615c:	2b00      	cmp	r3, #0
 800615e:	bf0c      	ite	eq
 8006160:	2301      	moveq	r3, #1
 8006162:	2300      	movne	r3, #0
 8006164:	b2db      	uxtb	r3, r3
 8006166:	2b00      	cmp	r3, #0
 8006168:	d001      	beq.n	800616e <HAL_I2C_Init+0x17e>
 800616a:	2301      	movs	r3, #1
 800616c:	e022      	b.n	80061b4 <HAL_I2C_Init+0x1c4>
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	689b      	ldr	r3, [r3, #8]
 8006172:	2b00      	cmp	r3, #0
 8006174:	d10e      	bne.n	8006194 <HAL_I2C_Init+0x1a4>
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	1e58      	subs	r0, r3, #1
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	6859      	ldr	r1, [r3, #4]
 800617e:	460b      	mov	r3, r1
 8006180:	005b      	lsls	r3, r3, #1
 8006182:	440b      	add	r3, r1
 8006184:	fbb0 f3f3 	udiv	r3, r0, r3
 8006188:	3301      	adds	r3, #1
 800618a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800618e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006192:	e00f      	b.n	80061b4 <HAL_I2C_Init+0x1c4>
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	1e58      	subs	r0, r3, #1
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	6859      	ldr	r1, [r3, #4]
 800619c:	460b      	mov	r3, r1
 800619e:	009b      	lsls	r3, r3, #2
 80061a0:	440b      	add	r3, r1
 80061a2:	0099      	lsls	r1, r3, #2
 80061a4:	440b      	add	r3, r1
 80061a6:	fbb0 f3f3 	udiv	r3, r0, r3
 80061aa:	3301      	adds	r3, #1
 80061ac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80061b0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80061b4:	6879      	ldr	r1, [r7, #4]
 80061b6:	6809      	ldr	r1, [r1, #0]
 80061b8:	4313      	orrs	r3, r2
 80061ba:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	69da      	ldr	r2, [r3, #28]
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	6a1b      	ldr	r3, [r3, #32]
 80061ce:	431a      	orrs	r2, r3
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	430a      	orrs	r2, r1
 80061d6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	689b      	ldr	r3, [r3, #8]
 80061de:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80061e2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80061e6:	687a      	ldr	r2, [r7, #4]
 80061e8:	6911      	ldr	r1, [r2, #16]
 80061ea:	687a      	ldr	r2, [r7, #4]
 80061ec:	68d2      	ldr	r2, [r2, #12]
 80061ee:	4311      	orrs	r1, r2
 80061f0:	687a      	ldr	r2, [r7, #4]
 80061f2:	6812      	ldr	r2, [r2, #0]
 80061f4:	430b      	orrs	r3, r1
 80061f6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	68db      	ldr	r3, [r3, #12]
 80061fe:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	695a      	ldr	r2, [r3, #20]
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	699b      	ldr	r3, [r3, #24]
 800620a:	431a      	orrs	r2, r3
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	430a      	orrs	r2, r1
 8006212:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	681a      	ldr	r2, [r3, #0]
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	f042 0201 	orr.w	r2, r2, #1
 8006222:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	2200      	movs	r2, #0
 8006228:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	2220      	movs	r2, #32
 800622e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	2200      	movs	r2, #0
 8006236:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	2200      	movs	r2, #0
 800623c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006240:	2300      	movs	r3, #0
}
 8006242:	4618      	mov	r0, r3
 8006244:	3710      	adds	r7, #16
 8006246:	46bd      	mov	sp, r7
 8006248:	bd80      	pop	{r7, pc}
 800624a:	bf00      	nop
 800624c:	000186a0 	.word	0x000186a0
 8006250:	001e847f 	.word	0x001e847f
 8006254:	003d08ff 	.word	0x003d08ff
 8006258:	431bde83 	.word	0x431bde83
 800625c:	10624dd3 	.word	0x10624dd3

08006260 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006260:	b580      	push	{r7, lr}
 8006262:	b088      	sub	sp, #32
 8006264:	af02      	add	r7, sp, #8
 8006266:	60f8      	str	r0, [r7, #12]
 8006268:	4608      	mov	r0, r1
 800626a:	4611      	mov	r1, r2
 800626c:	461a      	mov	r2, r3
 800626e:	4603      	mov	r3, r0
 8006270:	817b      	strh	r3, [r7, #10]
 8006272:	460b      	mov	r3, r1
 8006274:	813b      	strh	r3, [r7, #8]
 8006276:	4613      	mov	r3, r2
 8006278:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800627a:	f7fe ffed 	bl	8005258 <HAL_GetTick>
 800627e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006286:	b2db      	uxtb	r3, r3
 8006288:	2b20      	cmp	r3, #32
 800628a:	f040 80d9 	bne.w	8006440 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800628e:	697b      	ldr	r3, [r7, #20]
 8006290:	9300      	str	r3, [sp, #0]
 8006292:	2319      	movs	r3, #25
 8006294:	2201      	movs	r2, #1
 8006296:	496d      	ldr	r1, [pc, #436]	; (800644c <HAL_I2C_Mem_Write+0x1ec>)
 8006298:	68f8      	ldr	r0, [r7, #12]
 800629a:	f000 fc7b 	bl	8006b94 <I2C_WaitOnFlagUntilTimeout>
 800629e:	4603      	mov	r3, r0
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d001      	beq.n	80062a8 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80062a4:	2302      	movs	r3, #2
 80062a6:	e0cc      	b.n	8006442 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80062ae:	2b01      	cmp	r3, #1
 80062b0:	d101      	bne.n	80062b6 <HAL_I2C_Mem_Write+0x56>
 80062b2:	2302      	movs	r3, #2
 80062b4:	e0c5      	b.n	8006442 <HAL_I2C_Mem_Write+0x1e2>
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	2201      	movs	r2, #1
 80062ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	f003 0301 	and.w	r3, r3, #1
 80062c8:	2b01      	cmp	r3, #1
 80062ca:	d007      	beq.n	80062dc <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	681a      	ldr	r2, [r3, #0]
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	f042 0201 	orr.w	r2, r2, #1
 80062da:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	681a      	ldr	r2, [r3, #0]
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80062ea:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	2221      	movs	r2, #33	; 0x21
 80062f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	2240      	movs	r2, #64	; 0x40
 80062f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	2200      	movs	r2, #0
 8006300:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	6a3a      	ldr	r2, [r7, #32]
 8006306:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800630c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006312:	b29a      	uxth	r2, r3
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	4a4d      	ldr	r2, [pc, #308]	; (8006450 <HAL_I2C_Mem_Write+0x1f0>)
 800631c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800631e:	88f8      	ldrh	r0, [r7, #6]
 8006320:	893a      	ldrh	r2, [r7, #8]
 8006322:	8979      	ldrh	r1, [r7, #10]
 8006324:	697b      	ldr	r3, [r7, #20]
 8006326:	9301      	str	r3, [sp, #4]
 8006328:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800632a:	9300      	str	r3, [sp, #0]
 800632c:	4603      	mov	r3, r0
 800632e:	68f8      	ldr	r0, [r7, #12]
 8006330:	f000 fab6 	bl	80068a0 <I2C_RequestMemoryWrite>
 8006334:	4603      	mov	r3, r0
 8006336:	2b00      	cmp	r3, #0
 8006338:	d052      	beq.n	80063e0 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800633a:	2301      	movs	r3, #1
 800633c:	e081      	b.n	8006442 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800633e:	697a      	ldr	r2, [r7, #20]
 8006340:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006342:	68f8      	ldr	r0, [r7, #12]
 8006344:	f000 fcfc 	bl	8006d40 <I2C_WaitOnTXEFlagUntilTimeout>
 8006348:	4603      	mov	r3, r0
 800634a:	2b00      	cmp	r3, #0
 800634c:	d00d      	beq.n	800636a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006352:	2b04      	cmp	r3, #4
 8006354:	d107      	bne.n	8006366 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	681a      	ldr	r2, [r3, #0]
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006364:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8006366:	2301      	movs	r3, #1
 8006368:	e06b      	b.n	8006442 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800636e:	781a      	ldrb	r2, [r3, #0]
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800637a:	1c5a      	adds	r2, r3, #1
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006384:	3b01      	subs	r3, #1
 8006386:	b29a      	uxth	r2, r3
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006390:	b29b      	uxth	r3, r3
 8006392:	3b01      	subs	r3, #1
 8006394:	b29a      	uxth	r2, r3
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	695b      	ldr	r3, [r3, #20]
 80063a0:	f003 0304 	and.w	r3, r3, #4
 80063a4:	2b04      	cmp	r3, #4
 80063a6:	d11b      	bne.n	80063e0 <HAL_I2C_Mem_Write+0x180>
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d017      	beq.n	80063e0 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063b4:	781a      	ldrb	r2, [r3, #0]
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063c0:	1c5a      	adds	r2, r3, #1
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80063ca:	3b01      	subs	r3, #1
 80063cc:	b29a      	uxth	r2, r3
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80063d6:	b29b      	uxth	r3, r3
 80063d8:	3b01      	subs	r3, #1
 80063da:	b29a      	uxth	r2, r3
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d1aa      	bne.n	800633e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80063e8:	697a      	ldr	r2, [r7, #20]
 80063ea:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80063ec:	68f8      	ldr	r0, [r7, #12]
 80063ee:	f000 fce8 	bl	8006dc2 <I2C_WaitOnBTFFlagUntilTimeout>
 80063f2:	4603      	mov	r3, r0
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d00d      	beq.n	8006414 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063fc:	2b04      	cmp	r3, #4
 80063fe:	d107      	bne.n	8006410 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	681a      	ldr	r2, [r3, #0]
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800640e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006410:	2301      	movs	r3, #1
 8006412:	e016      	b.n	8006442 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	681a      	ldr	r2, [r3, #0]
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006422:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	2220      	movs	r2, #32
 8006428:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	2200      	movs	r2, #0
 8006430:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	2200      	movs	r2, #0
 8006438:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800643c:	2300      	movs	r3, #0
 800643e:	e000      	b.n	8006442 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8006440:	2302      	movs	r3, #2
  }
}
 8006442:	4618      	mov	r0, r3
 8006444:	3718      	adds	r7, #24
 8006446:	46bd      	mov	sp, r7
 8006448:	bd80      	pop	{r7, pc}
 800644a:	bf00      	nop
 800644c:	00100002 	.word	0x00100002
 8006450:	ffff0000 	.word	0xffff0000

08006454 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006454:	b580      	push	{r7, lr}
 8006456:	b08c      	sub	sp, #48	; 0x30
 8006458:	af02      	add	r7, sp, #8
 800645a:	60f8      	str	r0, [r7, #12]
 800645c:	4608      	mov	r0, r1
 800645e:	4611      	mov	r1, r2
 8006460:	461a      	mov	r2, r3
 8006462:	4603      	mov	r3, r0
 8006464:	817b      	strh	r3, [r7, #10]
 8006466:	460b      	mov	r3, r1
 8006468:	813b      	strh	r3, [r7, #8]
 800646a:	4613      	mov	r3, r2
 800646c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800646e:	f7fe fef3 	bl	8005258 <HAL_GetTick>
 8006472:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800647a:	b2db      	uxtb	r3, r3
 800647c:	2b20      	cmp	r3, #32
 800647e:	f040 8208 	bne.w	8006892 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006482:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006484:	9300      	str	r3, [sp, #0]
 8006486:	2319      	movs	r3, #25
 8006488:	2201      	movs	r2, #1
 800648a:	497b      	ldr	r1, [pc, #492]	; (8006678 <HAL_I2C_Mem_Read+0x224>)
 800648c:	68f8      	ldr	r0, [r7, #12]
 800648e:	f000 fb81 	bl	8006b94 <I2C_WaitOnFlagUntilTimeout>
 8006492:	4603      	mov	r3, r0
 8006494:	2b00      	cmp	r3, #0
 8006496:	d001      	beq.n	800649c <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8006498:	2302      	movs	r3, #2
 800649a:	e1fb      	b.n	8006894 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80064a2:	2b01      	cmp	r3, #1
 80064a4:	d101      	bne.n	80064aa <HAL_I2C_Mem_Read+0x56>
 80064a6:	2302      	movs	r3, #2
 80064a8:	e1f4      	b.n	8006894 <HAL_I2C_Mem_Read+0x440>
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	2201      	movs	r2, #1
 80064ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	f003 0301 	and.w	r3, r3, #1
 80064bc:	2b01      	cmp	r3, #1
 80064be:	d007      	beq.n	80064d0 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	681a      	ldr	r2, [r3, #0]
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	f042 0201 	orr.w	r2, r2, #1
 80064ce:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	681a      	ldr	r2, [r3, #0]
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80064de:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	2222      	movs	r2, #34	; 0x22
 80064e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	2240      	movs	r2, #64	; 0x40
 80064ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	2200      	movs	r2, #0
 80064f4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80064fa:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8006500:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006506:	b29a      	uxth	r2, r3
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	4a5b      	ldr	r2, [pc, #364]	; (800667c <HAL_I2C_Mem_Read+0x228>)
 8006510:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006512:	88f8      	ldrh	r0, [r7, #6]
 8006514:	893a      	ldrh	r2, [r7, #8]
 8006516:	8979      	ldrh	r1, [r7, #10]
 8006518:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800651a:	9301      	str	r3, [sp, #4]
 800651c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800651e:	9300      	str	r3, [sp, #0]
 8006520:	4603      	mov	r3, r0
 8006522:	68f8      	ldr	r0, [r7, #12]
 8006524:	f000 fa50 	bl	80069c8 <I2C_RequestMemoryRead>
 8006528:	4603      	mov	r3, r0
 800652a:	2b00      	cmp	r3, #0
 800652c:	d001      	beq.n	8006532 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800652e:	2301      	movs	r3, #1
 8006530:	e1b0      	b.n	8006894 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006536:	2b00      	cmp	r3, #0
 8006538:	d113      	bne.n	8006562 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800653a:	2300      	movs	r3, #0
 800653c:	623b      	str	r3, [r7, #32]
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	695b      	ldr	r3, [r3, #20]
 8006544:	623b      	str	r3, [r7, #32]
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	699b      	ldr	r3, [r3, #24]
 800654c:	623b      	str	r3, [r7, #32]
 800654e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	681a      	ldr	r2, [r3, #0]
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800655e:	601a      	str	r2, [r3, #0]
 8006560:	e184      	b.n	800686c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006566:	2b01      	cmp	r3, #1
 8006568:	d11b      	bne.n	80065a2 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	681a      	ldr	r2, [r3, #0]
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006578:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800657a:	2300      	movs	r3, #0
 800657c:	61fb      	str	r3, [r7, #28]
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	695b      	ldr	r3, [r3, #20]
 8006584:	61fb      	str	r3, [r7, #28]
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	699b      	ldr	r3, [r3, #24]
 800658c:	61fb      	str	r3, [r7, #28]
 800658e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	681a      	ldr	r2, [r3, #0]
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800659e:	601a      	str	r2, [r3, #0]
 80065a0:	e164      	b.n	800686c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80065a6:	2b02      	cmp	r3, #2
 80065a8:	d11b      	bne.n	80065e2 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	681a      	ldr	r2, [r3, #0]
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80065b8:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	681a      	ldr	r2, [r3, #0]
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80065c8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80065ca:	2300      	movs	r3, #0
 80065cc:	61bb      	str	r3, [r7, #24]
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	695b      	ldr	r3, [r3, #20]
 80065d4:	61bb      	str	r3, [r7, #24]
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	699b      	ldr	r3, [r3, #24]
 80065dc:	61bb      	str	r3, [r7, #24]
 80065de:	69bb      	ldr	r3, [r7, #24]
 80065e0:	e144      	b.n	800686c <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80065e2:	2300      	movs	r3, #0
 80065e4:	617b      	str	r3, [r7, #20]
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	695b      	ldr	r3, [r3, #20]
 80065ec:	617b      	str	r3, [r7, #20]
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	699b      	ldr	r3, [r3, #24]
 80065f4:	617b      	str	r3, [r7, #20]
 80065f6:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80065f8:	e138      	b.n	800686c <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80065fe:	2b03      	cmp	r3, #3
 8006600:	f200 80f1 	bhi.w	80067e6 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006608:	2b01      	cmp	r3, #1
 800660a:	d123      	bne.n	8006654 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800660c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800660e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006610:	68f8      	ldr	r0, [r7, #12]
 8006612:	f000 fc17 	bl	8006e44 <I2C_WaitOnRXNEFlagUntilTimeout>
 8006616:	4603      	mov	r3, r0
 8006618:	2b00      	cmp	r3, #0
 800661a:	d001      	beq.n	8006620 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 800661c:	2301      	movs	r3, #1
 800661e:	e139      	b.n	8006894 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	691a      	ldr	r2, [r3, #16]
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800662a:	b2d2      	uxtb	r2, r2
 800662c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006632:	1c5a      	adds	r2, r3, #1
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800663c:	3b01      	subs	r3, #1
 800663e:	b29a      	uxth	r2, r3
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006648:	b29b      	uxth	r3, r3
 800664a:	3b01      	subs	r3, #1
 800664c:	b29a      	uxth	r2, r3
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006652:	e10b      	b.n	800686c <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006658:	2b02      	cmp	r3, #2
 800665a:	d14e      	bne.n	80066fa <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800665c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800665e:	9300      	str	r3, [sp, #0]
 8006660:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006662:	2200      	movs	r2, #0
 8006664:	4906      	ldr	r1, [pc, #24]	; (8006680 <HAL_I2C_Mem_Read+0x22c>)
 8006666:	68f8      	ldr	r0, [r7, #12]
 8006668:	f000 fa94 	bl	8006b94 <I2C_WaitOnFlagUntilTimeout>
 800666c:	4603      	mov	r3, r0
 800666e:	2b00      	cmp	r3, #0
 8006670:	d008      	beq.n	8006684 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8006672:	2301      	movs	r3, #1
 8006674:	e10e      	b.n	8006894 <HAL_I2C_Mem_Read+0x440>
 8006676:	bf00      	nop
 8006678:	00100002 	.word	0x00100002
 800667c:	ffff0000 	.word	0xffff0000
 8006680:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	681a      	ldr	r2, [r3, #0]
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006692:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	691a      	ldr	r2, [r3, #16]
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800669e:	b2d2      	uxtb	r2, r2
 80066a0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066a6:	1c5a      	adds	r2, r3, #1
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80066b0:	3b01      	subs	r3, #1
 80066b2:	b29a      	uxth	r2, r3
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80066bc:	b29b      	uxth	r3, r3
 80066be:	3b01      	subs	r3, #1
 80066c0:	b29a      	uxth	r2, r3
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	691a      	ldr	r2, [r3, #16]
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066d0:	b2d2      	uxtb	r2, r2
 80066d2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066d8:	1c5a      	adds	r2, r3, #1
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80066e2:	3b01      	subs	r3, #1
 80066e4:	b29a      	uxth	r2, r3
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80066ee:	b29b      	uxth	r3, r3
 80066f0:	3b01      	subs	r3, #1
 80066f2:	b29a      	uxth	r2, r3
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80066f8:	e0b8      	b.n	800686c <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80066fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066fc:	9300      	str	r3, [sp, #0]
 80066fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006700:	2200      	movs	r2, #0
 8006702:	4966      	ldr	r1, [pc, #408]	; (800689c <HAL_I2C_Mem_Read+0x448>)
 8006704:	68f8      	ldr	r0, [r7, #12]
 8006706:	f000 fa45 	bl	8006b94 <I2C_WaitOnFlagUntilTimeout>
 800670a:	4603      	mov	r3, r0
 800670c:	2b00      	cmp	r3, #0
 800670e:	d001      	beq.n	8006714 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8006710:	2301      	movs	r3, #1
 8006712:	e0bf      	b.n	8006894 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	681a      	ldr	r2, [r3, #0]
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006722:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	691a      	ldr	r2, [r3, #16]
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800672e:	b2d2      	uxtb	r2, r2
 8006730:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006736:	1c5a      	adds	r2, r3, #1
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006740:	3b01      	subs	r3, #1
 8006742:	b29a      	uxth	r2, r3
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800674c:	b29b      	uxth	r3, r3
 800674e:	3b01      	subs	r3, #1
 8006750:	b29a      	uxth	r2, r3
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006756:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006758:	9300      	str	r3, [sp, #0]
 800675a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800675c:	2200      	movs	r2, #0
 800675e:	494f      	ldr	r1, [pc, #316]	; (800689c <HAL_I2C_Mem_Read+0x448>)
 8006760:	68f8      	ldr	r0, [r7, #12]
 8006762:	f000 fa17 	bl	8006b94 <I2C_WaitOnFlagUntilTimeout>
 8006766:	4603      	mov	r3, r0
 8006768:	2b00      	cmp	r3, #0
 800676a:	d001      	beq.n	8006770 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 800676c:	2301      	movs	r3, #1
 800676e:	e091      	b.n	8006894 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	681a      	ldr	r2, [r3, #0]
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800677e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	691a      	ldr	r2, [r3, #16]
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800678a:	b2d2      	uxtb	r2, r2
 800678c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006792:	1c5a      	adds	r2, r3, #1
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800679c:	3b01      	subs	r3, #1
 800679e:	b29a      	uxth	r2, r3
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80067a8:	b29b      	uxth	r3, r3
 80067aa:	3b01      	subs	r3, #1
 80067ac:	b29a      	uxth	r2, r3
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	691a      	ldr	r2, [r3, #16]
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067bc:	b2d2      	uxtb	r2, r2
 80067be:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067c4:	1c5a      	adds	r2, r3, #1
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80067ce:	3b01      	subs	r3, #1
 80067d0:	b29a      	uxth	r2, r3
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80067da:	b29b      	uxth	r3, r3
 80067dc:	3b01      	subs	r3, #1
 80067de:	b29a      	uxth	r2, r3
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80067e4:	e042      	b.n	800686c <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80067e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80067e8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80067ea:	68f8      	ldr	r0, [r7, #12]
 80067ec:	f000 fb2a 	bl	8006e44 <I2C_WaitOnRXNEFlagUntilTimeout>
 80067f0:	4603      	mov	r3, r0
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d001      	beq.n	80067fa <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80067f6:	2301      	movs	r3, #1
 80067f8:	e04c      	b.n	8006894 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	691a      	ldr	r2, [r3, #16]
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006804:	b2d2      	uxtb	r2, r2
 8006806:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800680c:	1c5a      	adds	r2, r3, #1
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006816:	3b01      	subs	r3, #1
 8006818:	b29a      	uxth	r2, r3
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006822:	b29b      	uxth	r3, r3
 8006824:	3b01      	subs	r3, #1
 8006826:	b29a      	uxth	r2, r3
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	695b      	ldr	r3, [r3, #20]
 8006832:	f003 0304 	and.w	r3, r3, #4
 8006836:	2b04      	cmp	r3, #4
 8006838:	d118      	bne.n	800686c <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	691a      	ldr	r2, [r3, #16]
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006844:	b2d2      	uxtb	r2, r2
 8006846:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800684c:	1c5a      	adds	r2, r3, #1
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006856:	3b01      	subs	r3, #1
 8006858:	b29a      	uxth	r2, r3
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006862:	b29b      	uxth	r3, r3
 8006864:	3b01      	subs	r3, #1
 8006866:	b29a      	uxth	r2, r3
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006870:	2b00      	cmp	r3, #0
 8006872:	f47f aec2 	bne.w	80065fa <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	2220      	movs	r2, #32
 800687a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	2200      	movs	r2, #0
 8006882:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	2200      	movs	r2, #0
 800688a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800688e:	2300      	movs	r3, #0
 8006890:	e000      	b.n	8006894 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8006892:	2302      	movs	r3, #2
  }
}
 8006894:	4618      	mov	r0, r3
 8006896:	3728      	adds	r7, #40	; 0x28
 8006898:	46bd      	mov	sp, r7
 800689a:	bd80      	pop	{r7, pc}
 800689c:	00010004 	.word	0x00010004

080068a0 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80068a0:	b580      	push	{r7, lr}
 80068a2:	b088      	sub	sp, #32
 80068a4:	af02      	add	r7, sp, #8
 80068a6:	60f8      	str	r0, [r7, #12]
 80068a8:	4608      	mov	r0, r1
 80068aa:	4611      	mov	r1, r2
 80068ac:	461a      	mov	r2, r3
 80068ae:	4603      	mov	r3, r0
 80068b0:	817b      	strh	r3, [r7, #10]
 80068b2:	460b      	mov	r3, r1
 80068b4:	813b      	strh	r3, [r7, #8]
 80068b6:	4613      	mov	r3, r2
 80068b8:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	681a      	ldr	r2, [r3, #0]
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80068c8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80068ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068cc:	9300      	str	r3, [sp, #0]
 80068ce:	6a3b      	ldr	r3, [r7, #32]
 80068d0:	2200      	movs	r2, #0
 80068d2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80068d6:	68f8      	ldr	r0, [r7, #12]
 80068d8:	f000 f95c 	bl	8006b94 <I2C_WaitOnFlagUntilTimeout>
 80068dc:	4603      	mov	r3, r0
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d00c      	beq.n	80068fc <I2C_RequestMemoryWrite+0x5c>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d003      	beq.n	80068f8 <I2C_RequestMemoryWrite+0x58>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80068f6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80068f8:	2303      	movs	r3, #3
 80068fa:	e05f      	b.n	80069bc <I2C_RequestMemoryWrite+0x11c>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80068fc:	897b      	ldrh	r3, [r7, #10]
 80068fe:	b2db      	uxtb	r3, r3
 8006900:	461a      	mov	r2, r3
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800690a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800690c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800690e:	6a3a      	ldr	r2, [r7, #32]
 8006910:	492c      	ldr	r1, [pc, #176]	; (80069c4 <I2C_RequestMemoryWrite+0x124>)
 8006912:	68f8      	ldr	r0, [r7, #12]
 8006914:	f000 f995 	bl	8006c42 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006918:	4603      	mov	r3, r0
 800691a:	2b00      	cmp	r3, #0
 800691c:	d001      	beq.n	8006922 <I2C_RequestMemoryWrite+0x82>
  {
    return HAL_ERROR;
 800691e:	2301      	movs	r3, #1
 8006920:	e04c      	b.n	80069bc <I2C_RequestMemoryWrite+0x11c>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006922:	2300      	movs	r3, #0
 8006924:	617b      	str	r3, [r7, #20]
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	695b      	ldr	r3, [r3, #20]
 800692c:	617b      	str	r3, [r7, #20]
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	699b      	ldr	r3, [r3, #24]
 8006934:	617b      	str	r3, [r7, #20]
 8006936:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006938:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800693a:	6a39      	ldr	r1, [r7, #32]
 800693c:	68f8      	ldr	r0, [r7, #12]
 800693e:	f000 f9ff 	bl	8006d40 <I2C_WaitOnTXEFlagUntilTimeout>
 8006942:	4603      	mov	r3, r0
 8006944:	2b00      	cmp	r3, #0
 8006946:	d00d      	beq.n	8006964 <I2C_RequestMemoryWrite+0xc4>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800694c:	2b04      	cmp	r3, #4
 800694e:	d107      	bne.n	8006960 <I2C_RequestMemoryWrite+0xc0>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	681a      	ldr	r2, [r3, #0]
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800695e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006960:	2301      	movs	r3, #1
 8006962:	e02b      	b.n	80069bc <I2C_RequestMemoryWrite+0x11c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006964:	88fb      	ldrh	r3, [r7, #6]
 8006966:	2b01      	cmp	r3, #1
 8006968:	d105      	bne.n	8006976 <I2C_RequestMemoryWrite+0xd6>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800696a:	893b      	ldrh	r3, [r7, #8]
 800696c:	b2da      	uxtb	r2, r3
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	611a      	str	r2, [r3, #16]
 8006974:	e021      	b.n	80069ba <I2C_RequestMemoryWrite+0x11a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8006976:	893b      	ldrh	r3, [r7, #8]
 8006978:	0a1b      	lsrs	r3, r3, #8
 800697a:	b29b      	uxth	r3, r3
 800697c:	b2da      	uxtb	r2, r3
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006984:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006986:	6a39      	ldr	r1, [r7, #32]
 8006988:	68f8      	ldr	r0, [r7, #12]
 800698a:	f000 f9d9 	bl	8006d40 <I2C_WaitOnTXEFlagUntilTimeout>
 800698e:	4603      	mov	r3, r0
 8006990:	2b00      	cmp	r3, #0
 8006992:	d00d      	beq.n	80069b0 <I2C_RequestMemoryWrite+0x110>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006998:	2b04      	cmp	r3, #4
 800699a:	d107      	bne.n	80069ac <I2C_RequestMemoryWrite+0x10c>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	681a      	ldr	r2, [r3, #0]
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80069aa:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80069ac:	2301      	movs	r3, #1
 80069ae:	e005      	b.n	80069bc <I2C_RequestMemoryWrite+0x11c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80069b0:	893b      	ldrh	r3, [r7, #8]
 80069b2:	b2da      	uxtb	r2, r3
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80069ba:	2300      	movs	r3, #0
}
 80069bc:	4618      	mov	r0, r3
 80069be:	3718      	adds	r7, #24
 80069c0:	46bd      	mov	sp, r7
 80069c2:	bd80      	pop	{r7, pc}
 80069c4:	00010002 	.word	0x00010002

080069c8 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80069c8:	b580      	push	{r7, lr}
 80069ca:	b088      	sub	sp, #32
 80069cc:	af02      	add	r7, sp, #8
 80069ce:	60f8      	str	r0, [r7, #12]
 80069d0:	4608      	mov	r0, r1
 80069d2:	4611      	mov	r1, r2
 80069d4:	461a      	mov	r2, r3
 80069d6:	4603      	mov	r3, r0
 80069d8:	817b      	strh	r3, [r7, #10]
 80069da:	460b      	mov	r3, r1
 80069dc:	813b      	strh	r3, [r7, #8]
 80069de:	4613      	mov	r3, r2
 80069e0:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	681a      	ldr	r2, [r3, #0]
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80069f0:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	681a      	ldr	r2, [r3, #0]
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006a00:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006a02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a04:	9300      	str	r3, [sp, #0]
 8006a06:	6a3b      	ldr	r3, [r7, #32]
 8006a08:	2200      	movs	r2, #0
 8006a0a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006a0e:	68f8      	ldr	r0, [r7, #12]
 8006a10:	f000 f8c0 	bl	8006b94 <I2C_WaitOnFlagUntilTimeout>
 8006a14:	4603      	mov	r3, r0
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d00c      	beq.n	8006a34 <I2C_RequestMemoryRead+0x6c>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	d003      	beq.n	8006a30 <I2C_RequestMemoryRead+0x68>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006a2e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006a30:	2303      	movs	r3, #3
 8006a32:	e0a9      	b.n	8006b88 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006a34:	897b      	ldrh	r3, [r7, #10]
 8006a36:	b2db      	uxtb	r3, r3
 8006a38:	461a      	mov	r2, r3
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006a42:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006a44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a46:	6a3a      	ldr	r2, [r7, #32]
 8006a48:	4951      	ldr	r1, [pc, #324]	; (8006b90 <I2C_RequestMemoryRead+0x1c8>)
 8006a4a:	68f8      	ldr	r0, [r7, #12]
 8006a4c:	f000 f8f9 	bl	8006c42 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006a50:	4603      	mov	r3, r0
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d001      	beq.n	8006a5a <I2C_RequestMemoryRead+0x92>
  {
    return HAL_ERROR;
 8006a56:	2301      	movs	r3, #1
 8006a58:	e096      	b.n	8006b88 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006a5a:	2300      	movs	r3, #0
 8006a5c:	617b      	str	r3, [r7, #20]
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	695b      	ldr	r3, [r3, #20]
 8006a64:	617b      	str	r3, [r7, #20]
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	699b      	ldr	r3, [r3, #24]
 8006a6c:	617b      	str	r3, [r7, #20]
 8006a6e:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006a70:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006a72:	6a39      	ldr	r1, [r7, #32]
 8006a74:	68f8      	ldr	r0, [r7, #12]
 8006a76:	f000 f963 	bl	8006d40 <I2C_WaitOnTXEFlagUntilTimeout>
 8006a7a:	4603      	mov	r3, r0
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d00d      	beq.n	8006a9c <I2C_RequestMemoryRead+0xd4>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a84:	2b04      	cmp	r3, #4
 8006a86:	d107      	bne.n	8006a98 <I2C_RequestMemoryRead+0xd0>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	681a      	ldr	r2, [r3, #0]
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006a96:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006a98:	2301      	movs	r3, #1
 8006a9a:	e075      	b.n	8006b88 <I2C_RequestMemoryRead+0x1c0>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006a9c:	88fb      	ldrh	r3, [r7, #6]
 8006a9e:	2b01      	cmp	r3, #1
 8006aa0:	d105      	bne.n	8006aae <I2C_RequestMemoryRead+0xe6>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006aa2:	893b      	ldrh	r3, [r7, #8]
 8006aa4:	b2da      	uxtb	r2, r3
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	611a      	str	r2, [r3, #16]
 8006aac:	e021      	b.n	8006af2 <I2C_RequestMemoryRead+0x12a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8006aae:	893b      	ldrh	r3, [r7, #8]
 8006ab0:	0a1b      	lsrs	r3, r3, #8
 8006ab2:	b29b      	uxth	r3, r3
 8006ab4:	b2da      	uxtb	r2, r3
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006abc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006abe:	6a39      	ldr	r1, [r7, #32]
 8006ac0:	68f8      	ldr	r0, [r7, #12]
 8006ac2:	f000 f93d 	bl	8006d40 <I2C_WaitOnTXEFlagUntilTimeout>
 8006ac6:	4603      	mov	r3, r0
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	d00d      	beq.n	8006ae8 <I2C_RequestMemoryRead+0x120>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ad0:	2b04      	cmp	r3, #4
 8006ad2:	d107      	bne.n	8006ae4 <I2C_RequestMemoryRead+0x11c>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	681a      	ldr	r2, [r3, #0]
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006ae2:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006ae4:	2301      	movs	r3, #1
 8006ae6:	e04f      	b.n	8006b88 <I2C_RequestMemoryRead+0x1c0>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006ae8:	893b      	ldrh	r3, [r7, #8]
 8006aea:	b2da      	uxtb	r2, r3
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006af2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006af4:	6a39      	ldr	r1, [r7, #32]
 8006af6:	68f8      	ldr	r0, [r7, #12]
 8006af8:	f000 f922 	bl	8006d40 <I2C_WaitOnTXEFlagUntilTimeout>
 8006afc:	4603      	mov	r3, r0
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d00d      	beq.n	8006b1e <I2C_RequestMemoryRead+0x156>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b06:	2b04      	cmp	r3, #4
 8006b08:	d107      	bne.n	8006b1a <I2C_RequestMemoryRead+0x152>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	681a      	ldr	r2, [r3, #0]
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006b18:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006b1a:	2301      	movs	r3, #1
 8006b1c:	e034      	b.n	8006b88 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	681a      	ldr	r2, [r3, #0]
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006b2c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006b2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b30:	9300      	str	r3, [sp, #0]
 8006b32:	6a3b      	ldr	r3, [r7, #32]
 8006b34:	2200      	movs	r2, #0
 8006b36:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006b3a:	68f8      	ldr	r0, [r7, #12]
 8006b3c:	f000 f82a 	bl	8006b94 <I2C_WaitOnFlagUntilTimeout>
 8006b40:	4603      	mov	r3, r0
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d00c      	beq.n	8006b60 <I2C_RequestMemoryRead+0x198>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	d003      	beq.n	8006b5c <I2C_RequestMemoryRead+0x194>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006b5a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006b5c:	2303      	movs	r3, #3
 8006b5e:	e013      	b.n	8006b88 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8006b60:	897b      	ldrh	r3, [r7, #10]
 8006b62:	b2db      	uxtb	r3, r3
 8006b64:	f043 0301 	orr.w	r3, r3, #1
 8006b68:	b2da      	uxtb	r2, r3
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006b70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b72:	6a3a      	ldr	r2, [r7, #32]
 8006b74:	4906      	ldr	r1, [pc, #24]	; (8006b90 <I2C_RequestMemoryRead+0x1c8>)
 8006b76:	68f8      	ldr	r0, [r7, #12]
 8006b78:	f000 f863 	bl	8006c42 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006b7c:	4603      	mov	r3, r0
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d001      	beq.n	8006b86 <I2C_RequestMemoryRead+0x1be>
  {
    return HAL_ERROR;
 8006b82:	2301      	movs	r3, #1
 8006b84:	e000      	b.n	8006b88 <I2C_RequestMemoryRead+0x1c0>
  }

  return HAL_OK;
 8006b86:	2300      	movs	r3, #0
}
 8006b88:	4618      	mov	r0, r3
 8006b8a:	3718      	adds	r7, #24
 8006b8c:	46bd      	mov	sp, r7
 8006b8e:	bd80      	pop	{r7, pc}
 8006b90:	00010002 	.word	0x00010002

08006b94 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8006b94:	b580      	push	{r7, lr}
 8006b96:	b084      	sub	sp, #16
 8006b98:	af00      	add	r7, sp, #0
 8006b9a:	60f8      	str	r0, [r7, #12]
 8006b9c:	60b9      	str	r1, [r7, #8]
 8006b9e:	603b      	str	r3, [r7, #0]
 8006ba0:	4613      	mov	r3, r2
 8006ba2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006ba4:	e025      	b.n	8006bf2 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006ba6:	683b      	ldr	r3, [r7, #0]
 8006ba8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006bac:	d021      	beq.n	8006bf2 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006bae:	f7fe fb53 	bl	8005258 <HAL_GetTick>
 8006bb2:	4602      	mov	r2, r0
 8006bb4:	69bb      	ldr	r3, [r7, #24]
 8006bb6:	1ad3      	subs	r3, r2, r3
 8006bb8:	683a      	ldr	r2, [r7, #0]
 8006bba:	429a      	cmp	r2, r3
 8006bbc:	d302      	bcc.n	8006bc4 <I2C_WaitOnFlagUntilTimeout+0x30>
 8006bbe:	683b      	ldr	r3, [r7, #0]
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d116      	bne.n	8006bf2 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	2200      	movs	r2, #0
 8006bc8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	2220      	movs	r2, #32
 8006bce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	2200      	movs	r2, #0
 8006bd6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bde:	f043 0220 	orr.w	r2, r3, #32
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	2200      	movs	r2, #0
 8006bea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006bee:	2301      	movs	r3, #1
 8006bf0:	e023      	b.n	8006c3a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006bf2:	68bb      	ldr	r3, [r7, #8]
 8006bf4:	0c1b      	lsrs	r3, r3, #16
 8006bf6:	b2db      	uxtb	r3, r3
 8006bf8:	2b01      	cmp	r3, #1
 8006bfa:	d10d      	bne.n	8006c18 <I2C_WaitOnFlagUntilTimeout+0x84>
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	695b      	ldr	r3, [r3, #20]
 8006c02:	43da      	mvns	r2, r3
 8006c04:	68bb      	ldr	r3, [r7, #8]
 8006c06:	4013      	ands	r3, r2
 8006c08:	b29b      	uxth	r3, r3
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	bf0c      	ite	eq
 8006c0e:	2301      	moveq	r3, #1
 8006c10:	2300      	movne	r3, #0
 8006c12:	b2db      	uxtb	r3, r3
 8006c14:	461a      	mov	r2, r3
 8006c16:	e00c      	b.n	8006c32 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	699b      	ldr	r3, [r3, #24]
 8006c1e:	43da      	mvns	r2, r3
 8006c20:	68bb      	ldr	r3, [r7, #8]
 8006c22:	4013      	ands	r3, r2
 8006c24:	b29b      	uxth	r3, r3
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	bf0c      	ite	eq
 8006c2a:	2301      	moveq	r3, #1
 8006c2c:	2300      	movne	r3, #0
 8006c2e:	b2db      	uxtb	r3, r3
 8006c30:	461a      	mov	r2, r3
 8006c32:	79fb      	ldrb	r3, [r7, #7]
 8006c34:	429a      	cmp	r2, r3
 8006c36:	d0b6      	beq.n	8006ba6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006c38:	2300      	movs	r3, #0
}
 8006c3a:	4618      	mov	r0, r3
 8006c3c:	3710      	adds	r7, #16
 8006c3e:	46bd      	mov	sp, r7
 8006c40:	bd80      	pop	{r7, pc}

08006c42 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8006c42:	b580      	push	{r7, lr}
 8006c44:	b084      	sub	sp, #16
 8006c46:	af00      	add	r7, sp, #0
 8006c48:	60f8      	str	r0, [r7, #12]
 8006c4a:	60b9      	str	r1, [r7, #8]
 8006c4c:	607a      	str	r2, [r7, #4]
 8006c4e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006c50:	e051      	b.n	8006cf6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	695b      	ldr	r3, [r3, #20]
 8006c58:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006c5c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006c60:	d123      	bne.n	8006caa <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	681a      	ldr	r2, [r3, #0]
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006c70:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006c7a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	2200      	movs	r2, #0
 8006c80:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	2220      	movs	r2, #32
 8006c86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	2200      	movs	r2, #0
 8006c8e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c96:	f043 0204 	orr.w	r2, r3, #4
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	2200      	movs	r2, #0
 8006ca2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006ca6:	2301      	movs	r3, #1
 8006ca8:	e046      	b.n	8006d38 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006cb0:	d021      	beq.n	8006cf6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006cb2:	f7fe fad1 	bl	8005258 <HAL_GetTick>
 8006cb6:	4602      	mov	r2, r0
 8006cb8:	683b      	ldr	r3, [r7, #0]
 8006cba:	1ad3      	subs	r3, r2, r3
 8006cbc:	687a      	ldr	r2, [r7, #4]
 8006cbe:	429a      	cmp	r2, r3
 8006cc0:	d302      	bcc.n	8006cc8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d116      	bne.n	8006cf6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	2200      	movs	r2, #0
 8006ccc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	2220      	movs	r2, #32
 8006cd2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	2200      	movs	r2, #0
 8006cda:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ce2:	f043 0220 	orr.w	r2, r3, #32
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	2200      	movs	r2, #0
 8006cee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006cf2:	2301      	movs	r3, #1
 8006cf4:	e020      	b.n	8006d38 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006cf6:	68bb      	ldr	r3, [r7, #8]
 8006cf8:	0c1b      	lsrs	r3, r3, #16
 8006cfa:	b2db      	uxtb	r3, r3
 8006cfc:	2b01      	cmp	r3, #1
 8006cfe:	d10c      	bne.n	8006d1a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	695b      	ldr	r3, [r3, #20]
 8006d06:	43da      	mvns	r2, r3
 8006d08:	68bb      	ldr	r3, [r7, #8]
 8006d0a:	4013      	ands	r3, r2
 8006d0c:	b29b      	uxth	r3, r3
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	bf14      	ite	ne
 8006d12:	2301      	movne	r3, #1
 8006d14:	2300      	moveq	r3, #0
 8006d16:	b2db      	uxtb	r3, r3
 8006d18:	e00b      	b.n	8006d32 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	699b      	ldr	r3, [r3, #24]
 8006d20:	43da      	mvns	r2, r3
 8006d22:	68bb      	ldr	r3, [r7, #8]
 8006d24:	4013      	ands	r3, r2
 8006d26:	b29b      	uxth	r3, r3
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	bf14      	ite	ne
 8006d2c:	2301      	movne	r3, #1
 8006d2e:	2300      	moveq	r3, #0
 8006d30:	b2db      	uxtb	r3, r3
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d18d      	bne.n	8006c52 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8006d36:	2300      	movs	r3, #0
}
 8006d38:	4618      	mov	r0, r3
 8006d3a:	3710      	adds	r7, #16
 8006d3c:	46bd      	mov	sp, r7
 8006d3e:	bd80      	pop	{r7, pc}

08006d40 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006d40:	b580      	push	{r7, lr}
 8006d42:	b084      	sub	sp, #16
 8006d44:	af00      	add	r7, sp, #0
 8006d46:	60f8      	str	r0, [r7, #12]
 8006d48:	60b9      	str	r1, [r7, #8]
 8006d4a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006d4c:	e02d      	b.n	8006daa <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006d4e:	68f8      	ldr	r0, [r7, #12]
 8006d50:	f000 f8ce 	bl	8006ef0 <I2C_IsAcknowledgeFailed>
 8006d54:	4603      	mov	r3, r0
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d001      	beq.n	8006d5e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006d5a:	2301      	movs	r3, #1
 8006d5c:	e02d      	b.n	8006dba <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006d5e:	68bb      	ldr	r3, [r7, #8]
 8006d60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d64:	d021      	beq.n	8006daa <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006d66:	f7fe fa77 	bl	8005258 <HAL_GetTick>
 8006d6a:	4602      	mov	r2, r0
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	1ad3      	subs	r3, r2, r3
 8006d70:	68ba      	ldr	r2, [r7, #8]
 8006d72:	429a      	cmp	r2, r3
 8006d74:	d302      	bcc.n	8006d7c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8006d76:	68bb      	ldr	r3, [r7, #8]
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d116      	bne.n	8006daa <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	2200      	movs	r2, #0
 8006d80:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	2220      	movs	r2, #32
 8006d86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	2200      	movs	r2, #0
 8006d8e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d96:	f043 0220 	orr.w	r2, r3, #32
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	2200      	movs	r2, #0
 8006da2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006da6:	2301      	movs	r3, #1
 8006da8:	e007      	b.n	8006dba <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	695b      	ldr	r3, [r3, #20]
 8006db0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006db4:	2b80      	cmp	r3, #128	; 0x80
 8006db6:	d1ca      	bne.n	8006d4e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006db8:	2300      	movs	r3, #0
}
 8006dba:	4618      	mov	r0, r3
 8006dbc:	3710      	adds	r7, #16
 8006dbe:	46bd      	mov	sp, r7
 8006dc0:	bd80      	pop	{r7, pc}

08006dc2 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006dc2:	b580      	push	{r7, lr}
 8006dc4:	b084      	sub	sp, #16
 8006dc6:	af00      	add	r7, sp, #0
 8006dc8:	60f8      	str	r0, [r7, #12]
 8006dca:	60b9      	str	r1, [r7, #8]
 8006dcc:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006dce:	e02d      	b.n	8006e2c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006dd0:	68f8      	ldr	r0, [r7, #12]
 8006dd2:	f000 f88d 	bl	8006ef0 <I2C_IsAcknowledgeFailed>
 8006dd6:	4603      	mov	r3, r0
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	d001      	beq.n	8006de0 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006ddc:	2301      	movs	r3, #1
 8006dde:	e02d      	b.n	8006e3c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006de0:	68bb      	ldr	r3, [r7, #8]
 8006de2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006de6:	d021      	beq.n	8006e2c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006de8:	f7fe fa36 	bl	8005258 <HAL_GetTick>
 8006dec:	4602      	mov	r2, r0
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	1ad3      	subs	r3, r2, r3
 8006df2:	68ba      	ldr	r2, [r7, #8]
 8006df4:	429a      	cmp	r2, r3
 8006df6:	d302      	bcc.n	8006dfe <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8006df8:	68bb      	ldr	r3, [r7, #8]
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d116      	bne.n	8006e2c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	2200      	movs	r2, #0
 8006e02:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	2220      	movs	r2, #32
 8006e08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	2200      	movs	r2, #0
 8006e10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e18:	f043 0220 	orr.w	r2, r3, #32
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	2200      	movs	r2, #0
 8006e24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006e28:	2301      	movs	r3, #1
 8006e2a:	e007      	b.n	8006e3c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	695b      	ldr	r3, [r3, #20]
 8006e32:	f003 0304 	and.w	r3, r3, #4
 8006e36:	2b04      	cmp	r3, #4
 8006e38:	d1ca      	bne.n	8006dd0 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006e3a:	2300      	movs	r3, #0
}
 8006e3c:	4618      	mov	r0, r3
 8006e3e:	3710      	adds	r7, #16
 8006e40:	46bd      	mov	sp, r7
 8006e42:	bd80      	pop	{r7, pc}

08006e44 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006e44:	b580      	push	{r7, lr}
 8006e46:	b084      	sub	sp, #16
 8006e48:	af00      	add	r7, sp, #0
 8006e4a:	60f8      	str	r0, [r7, #12]
 8006e4c:	60b9      	str	r1, [r7, #8]
 8006e4e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006e50:	e042      	b.n	8006ed8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	695b      	ldr	r3, [r3, #20]
 8006e58:	f003 0310 	and.w	r3, r3, #16
 8006e5c:	2b10      	cmp	r3, #16
 8006e5e:	d119      	bne.n	8006e94 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	f06f 0210 	mvn.w	r2, #16
 8006e68:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	2200      	movs	r2, #0
 8006e6e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	2220      	movs	r2, #32
 8006e74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	2200      	movs	r2, #0
 8006e7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	2200      	movs	r2, #0
 8006e8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006e90:	2301      	movs	r3, #1
 8006e92:	e029      	b.n	8006ee8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006e94:	f7fe f9e0 	bl	8005258 <HAL_GetTick>
 8006e98:	4602      	mov	r2, r0
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	1ad3      	subs	r3, r2, r3
 8006e9e:	68ba      	ldr	r2, [r7, #8]
 8006ea0:	429a      	cmp	r2, r3
 8006ea2:	d302      	bcc.n	8006eaa <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8006ea4:	68bb      	ldr	r3, [r7, #8]
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d116      	bne.n	8006ed8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	2200      	movs	r2, #0
 8006eae:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	2220      	movs	r2, #32
 8006eb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	2200      	movs	r2, #0
 8006ebc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ec4:	f043 0220 	orr.w	r2, r3, #32
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	2200      	movs	r2, #0
 8006ed0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006ed4:	2301      	movs	r3, #1
 8006ed6:	e007      	b.n	8006ee8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	695b      	ldr	r3, [r3, #20]
 8006ede:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ee2:	2b40      	cmp	r3, #64	; 0x40
 8006ee4:	d1b5      	bne.n	8006e52 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8006ee6:	2300      	movs	r3, #0
}
 8006ee8:	4618      	mov	r0, r3
 8006eea:	3710      	adds	r7, #16
 8006eec:	46bd      	mov	sp, r7
 8006eee:	bd80      	pop	{r7, pc}

08006ef0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8006ef0:	b480      	push	{r7}
 8006ef2:	b083      	sub	sp, #12
 8006ef4:	af00      	add	r7, sp, #0
 8006ef6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	695b      	ldr	r3, [r3, #20]
 8006efe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006f02:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006f06:	d11b      	bne.n	8006f40 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006f10:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	2200      	movs	r2, #0
 8006f16:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	2220      	movs	r2, #32
 8006f1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	2200      	movs	r2, #0
 8006f24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f2c:	f043 0204 	orr.w	r2, r3, #4
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	2200      	movs	r2, #0
 8006f38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8006f3c:	2301      	movs	r3, #1
 8006f3e:	e000      	b.n	8006f42 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8006f40:	2300      	movs	r3, #0
}
 8006f42:	4618      	mov	r0, r3
 8006f44:	370c      	adds	r7, #12
 8006f46:	46bd      	mov	sp, r7
 8006f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f4c:	4770      	bx	lr

08006f4e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8006f4e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006f50:	b08f      	sub	sp, #60	; 0x3c
 8006f52:	af0a      	add	r7, sp, #40	; 0x28
 8006f54:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d101      	bne.n	8006f60 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8006f5c:	2301      	movs	r3, #1
 8006f5e:	e10f      	b.n	8007180 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8006f6c:	b2db      	uxtb	r3, r3
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	d106      	bne.n	8006f80 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	2200      	movs	r2, #0
 8006f76:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8006f7a:	6878      	ldr	r0, [r7, #4]
 8006f7c:	f008 fe84 	bl	800fc88 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	2203      	movs	r2, #3
 8006f84:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8006f88:	68bb      	ldr	r3, [r7, #8]
 8006f8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	d102      	bne.n	8006f9a <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	2200      	movs	r2, #0
 8006f98:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	4618      	mov	r0, r3
 8006fa0:	f005 fc35 	bl	800c80e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	603b      	str	r3, [r7, #0]
 8006faa:	687e      	ldr	r6, [r7, #4]
 8006fac:	466d      	mov	r5, sp
 8006fae:	f106 0410 	add.w	r4, r6, #16
 8006fb2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006fb4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006fb6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006fb8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006fba:	e894 0003 	ldmia.w	r4, {r0, r1}
 8006fbe:	e885 0003 	stmia.w	r5, {r0, r1}
 8006fc2:	1d33      	adds	r3, r6, #4
 8006fc4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006fc6:	6838      	ldr	r0, [r7, #0]
 8006fc8:	f005 fb0c 	bl	800c5e4 <USB_CoreInit>
 8006fcc:	4603      	mov	r3, r0
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d005      	beq.n	8006fde <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	2202      	movs	r2, #2
 8006fd6:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8006fda:	2301      	movs	r3, #1
 8006fdc:	e0d0      	b.n	8007180 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	2100      	movs	r1, #0
 8006fe4:	4618      	mov	r0, r3
 8006fe6:	f005 fc23 	bl	800c830 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006fea:	2300      	movs	r3, #0
 8006fec:	73fb      	strb	r3, [r7, #15]
 8006fee:	e04a      	b.n	8007086 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8006ff0:	7bfa      	ldrb	r2, [r7, #15]
 8006ff2:	6879      	ldr	r1, [r7, #4]
 8006ff4:	4613      	mov	r3, r2
 8006ff6:	00db      	lsls	r3, r3, #3
 8006ff8:	1a9b      	subs	r3, r3, r2
 8006ffa:	009b      	lsls	r3, r3, #2
 8006ffc:	440b      	add	r3, r1
 8006ffe:	333d      	adds	r3, #61	; 0x3d
 8007000:	2201      	movs	r2, #1
 8007002:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8007004:	7bfa      	ldrb	r2, [r7, #15]
 8007006:	6879      	ldr	r1, [r7, #4]
 8007008:	4613      	mov	r3, r2
 800700a:	00db      	lsls	r3, r3, #3
 800700c:	1a9b      	subs	r3, r3, r2
 800700e:	009b      	lsls	r3, r3, #2
 8007010:	440b      	add	r3, r1
 8007012:	333c      	adds	r3, #60	; 0x3c
 8007014:	7bfa      	ldrb	r2, [r7, #15]
 8007016:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8007018:	7bfa      	ldrb	r2, [r7, #15]
 800701a:	7bfb      	ldrb	r3, [r7, #15]
 800701c:	b298      	uxth	r0, r3
 800701e:	6879      	ldr	r1, [r7, #4]
 8007020:	4613      	mov	r3, r2
 8007022:	00db      	lsls	r3, r3, #3
 8007024:	1a9b      	subs	r3, r3, r2
 8007026:	009b      	lsls	r3, r3, #2
 8007028:	440b      	add	r3, r1
 800702a:	3342      	adds	r3, #66	; 0x42
 800702c:	4602      	mov	r2, r0
 800702e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8007030:	7bfa      	ldrb	r2, [r7, #15]
 8007032:	6879      	ldr	r1, [r7, #4]
 8007034:	4613      	mov	r3, r2
 8007036:	00db      	lsls	r3, r3, #3
 8007038:	1a9b      	subs	r3, r3, r2
 800703a:	009b      	lsls	r3, r3, #2
 800703c:	440b      	add	r3, r1
 800703e:	333f      	adds	r3, #63	; 0x3f
 8007040:	2200      	movs	r2, #0
 8007042:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8007044:	7bfa      	ldrb	r2, [r7, #15]
 8007046:	6879      	ldr	r1, [r7, #4]
 8007048:	4613      	mov	r3, r2
 800704a:	00db      	lsls	r3, r3, #3
 800704c:	1a9b      	subs	r3, r3, r2
 800704e:	009b      	lsls	r3, r3, #2
 8007050:	440b      	add	r3, r1
 8007052:	3344      	adds	r3, #68	; 0x44
 8007054:	2200      	movs	r2, #0
 8007056:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8007058:	7bfa      	ldrb	r2, [r7, #15]
 800705a:	6879      	ldr	r1, [r7, #4]
 800705c:	4613      	mov	r3, r2
 800705e:	00db      	lsls	r3, r3, #3
 8007060:	1a9b      	subs	r3, r3, r2
 8007062:	009b      	lsls	r3, r3, #2
 8007064:	440b      	add	r3, r1
 8007066:	3348      	adds	r3, #72	; 0x48
 8007068:	2200      	movs	r2, #0
 800706a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800706c:	7bfa      	ldrb	r2, [r7, #15]
 800706e:	6879      	ldr	r1, [r7, #4]
 8007070:	4613      	mov	r3, r2
 8007072:	00db      	lsls	r3, r3, #3
 8007074:	1a9b      	subs	r3, r3, r2
 8007076:	009b      	lsls	r3, r3, #2
 8007078:	440b      	add	r3, r1
 800707a:	3350      	adds	r3, #80	; 0x50
 800707c:	2200      	movs	r2, #0
 800707e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007080:	7bfb      	ldrb	r3, [r7, #15]
 8007082:	3301      	adds	r3, #1
 8007084:	73fb      	strb	r3, [r7, #15]
 8007086:	7bfa      	ldrb	r2, [r7, #15]
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	685b      	ldr	r3, [r3, #4]
 800708c:	429a      	cmp	r2, r3
 800708e:	d3af      	bcc.n	8006ff0 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007090:	2300      	movs	r3, #0
 8007092:	73fb      	strb	r3, [r7, #15]
 8007094:	e044      	b.n	8007120 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8007096:	7bfa      	ldrb	r2, [r7, #15]
 8007098:	6879      	ldr	r1, [r7, #4]
 800709a:	4613      	mov	r3, r2
 800709c:	00db      	lsls	r3, r3, #3
 800709e:	1a9b      	subs	r3, r3, r2
 80070a0:	009b      	lsls	r3, r3, #2
 80070a2:	440b      	add	r3, r1
 80070a4:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 80070a8:	2200      	movs	r2, #0
 80070aa:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80070ac:	7bfa      	ldrb	r2, [r7, #15]
 80070ae:	6879      	ldr	r1, [r7, #4]
 80070b0:	4613      	mov	r3, r2
 80070b2:	00db      	lsls	r3, r3, #3
 80070b4:	1a9b      	subs	r3, r3, r2
 80070b6:	009b      	lsls	r3, r3, #2
 80070b8:	440b      	add	r3, r1
 80070ba:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 80070be:	7bfa      	ldrb	r2, [r7, #15]
 80070c0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80070c2:	7bfa      	ldrb	r2, [r7, #15]
 80070c4:	6879      	ldr	r1, [r7, #4]
 80070c6:	4613      	mov	r3, r2
 80070c8:	00db      	lsls	r3, r3, #3
 80070ca:	1a9b      	subs	r3, r3, r2
 80070cc:	009b      	lsls	r3, r3, #2
 80070ce:	440b      	add	r3, r1
 80070d0:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80070d4:	2200      	movs	r2, #0
 80070d6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80070d8:	7bfa      	ldrb	r2, [r7, #15]
 80070da:	6879      	ldr	r1, [r7, #4]
 80070dc:	4613      	mov	r3, r2
 80070de:	00db      	lsls	r3, r3, #3
 80070e0:	1a9b      	subs	r3, r3, r2
 80070e2:	009b      	lsls	r3, r3, #2
 80070e4:	440b      	add	r3, r1
 80070e6:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80070ea:	2200      	movs	r2, #0
 80070ec:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80070ee:	7bfa      	ldrb	r2, [r7, #15]
 80070f0:	6879      	ldr	r1, [r7, #4]
 80070f2:	4613      	mov	r3, r2
 80070f4:	00db      	lsls	r3, r3, #3
 80070f6:	1a9b      	subs	r3, r3, r2
 80070f8:	009b      	lsls	r3, r3, #2
 80070fa:	440b      	add	r3, r1
 80070fc:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8007100:	2200      	movs	r2, #0
 8007102:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8007104:	7bfa      	ldrb	r2, [r7, #15]
 8007106:	6879      	ldr	r1, [r7, #4]
 8007108:	4613      	mov	r3, r2
 800710a:	00db      	lsls	r3, r3, #3
 800710c:	1a9b      	subs	r3, r3, r2
 800710e:	009b      	lsls	r3, r3, #2
 8007110:	440b      	add	r3, r1
 8007112:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8007116:	2200      	movs	r2, #0
 8007118:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800711a:	7bfb      	ldrb	r3, [r7, #15]
 800711c:	3301      	adds	r3, #1
 800711e:	73fb      	strb	r3, [r7, #15]
 8007120:	7bfa      	ldrb	r2, [r7, #15]
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	685b      	ldr	r3, [r3, #4]
 8007126:	429a      	cmp	r2, r3
 8007128:	d3b5      	bcc.n	8007096 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	603b      	str	r3, [r7, #0]
 8007130:	687e      	ldr	r6, [r7, #4]
 8007132:	466d      	mov	r5, sp
 8007134:	f106 0410 	add.w	r4, r6, #16
 8007138:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800713a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800713c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800713e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007140:	e894 0003 	ldmia.w	r4, {r0, r1}
 8007144:	e885 0003 	stmia.w	r5, {r0, r1}
 8007148:	1d33      	adds	r3, r6, #4
 800714a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800714c:	6838      	ldr	r0, [r7, #0]
 800714e:	f005 fb99 	bl	800c884 <USB_DevInit>
 8007152:	4603      	mov	r3, r0
 8007154:	2b00      	cmp	r3, #0
 8007156:	d005      	beq.n	8007164 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	2202      	movs	r2, #2
 800715c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8007160:	2301      	movs	r3, #1
 8007162:	e00d      	b.n	8007180 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	2200      	movs	r2, #0
 8007168:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	2201      	movs	r2, #1
 8007170:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
  #endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	4618      	mov	r0, r3
 800717a:	f006 fb8e 	bl	800d89a <USB_DevDisconnect>

  return HAL_OK;
 800717e:	2300      	movs	r3, #0
}
 8007180:	4618      	mov	r0, r3
 8007182:	3714      	adds	r7, #20
 8007184:	46bd      	mov	sp, r7
 8007186:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007188 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8007188:	b580      	push	{r7, lr}
 800718a:	b084      	sub	sp, #16
 800718c:	af00      	add	r7, sp, #0
 800718e:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */

  __HAL_LOCK(hpcd);
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800719c:	2b01      	cmp	r3, #1
 800719e:	d101      	bne.n	80071a4 <HAL_PCD_Start+0x1c>
 80071a0:	2302      	movs	r3, #2
 80071a2:	e020      	b.n	80071e6 <HAL_PCD_Start+0x5e>
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	2201      	movs	r2, #1
 80071a8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071b0:	2b01      	cmp	r3, #1
 80071b2:	d109      	bne.n	80071c8 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80071b8:	2b01      	cmp	r3, #1
 80071ba:	d005      	beq.n	80071c8 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071c0:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */
  (void)USB_DevConnect(hpcd->Instance);
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	4618      	mov	r0, r3
 80071ce:	f006 fb4c 	bl	800d86a <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	4618      	mov	r0, r3
 80071d8:	f005 fb08 	bl	800c7ec <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	2200      	movs	r2, #0
 80071e0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 80071e4:	2300      	movs	r3, #0
}
 80071e6:	4618      	mov	r0, r3
 80071e8:	3710      	adds	r7, #16
 80071ea:	46bd      	mov	sp, r7
 80071ec:	bd80      	pop	{r7, pc}

080071ee <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80071ee:	b590      	push	{r4, r7, lr}
 80071f0:	b08d      	sub	sp, #52	; 0x34
 80071f2:	af00      	add	r7, sp, #0
 80071f4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80071fc:	6a3b      	ldr	r3, [r7, #32]
 80071fe:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	4618      	mov	r0, r3
 8007206:	f006 fbf3 	bl	800d9f0 <USB_GetMode>
 800720a:	4603      	mov	r3, r0
 800720c:	2b00      	cmp	r3, #0
 800720e:	f040 838e 	bne.w	800792e <HAL_PCD_IRQHandler+0x740>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	4618      	mov	r0, r3
 8007218:	f006 fb57 	bl	800d8ca <USB_ReadInterrupts>
 800721c:	4603      	mov	r3, r0
 800721e:	2b00      	cmp	r3, #0
 8007220:	f000 8384 	beq.w	800792c <HAL_PCD_IRQHandler+0x73e>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	4618      	mov	r0, r3
 800722a:	f006 fb4e 	bl	800d8ca <USB_ReadInterrupts>
 800722e:	4603      	mov	r3, r0
 8007230:	f003 0302 	and.w	r3, r3, #2
 8007234:	2b02      	cmp	r3, #2
 8007236:	d107      	bne.n	8007248 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	695a      	ldr	r2, [r3, #20]
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	f002 0202 	and.w	r2, r2, #2
 8007246:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	4618      	mov	r0, r3
 800724e:	f006 fb3c 	bl	800d8ca <USB_ReadInterrupts>
 8007252:	4603      	mov	r3, r0
 8007254:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007258:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800725c:	d17b      	bne.n	8007356 <HAL_PCD_IRQHandler+0x168>
    {
      epnum = 0U;
 800725e:	2300      	movs	r3, #0
 8007260:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	4618      	mov	r0, r3
 8007268:	f006 fb42 	bl	800d8f0 <USB_ReadDevAllOutEpInterrupt>
 800726c:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 800726e:	e06f      	b.n	8007350 <HAL_PCD_IRQHandler+0x162>
      {
        if ((ep_intr & 0x1U) != 0U)
 8007270:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007272:	f003 0301 	and.w	r3, r3, #1
 8007276:	2b00      	cmp	r3, #0
 8007278:	d064      	beq.n	8007344 <HAL_PCD_IRQHandler+0x156>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007280:	b2d2      	uxtb	r2, r2
 8007282:	4611      	mov	r1, r2
 8007284:	4618      	mov	r0, r3
 8007286:	f006 fb67 	bl	800d958 <USB_ReadDevOutEPInterrupt>
 800728a:	61b8      	str	r0, [r7, #24]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800728c:	69bb      	ldr	r3, [r7, #24]
 800728e:	f003 0301 	and.w	r3, r3, #1
 8007292:	2b00      	cmp	r3, #0
 8007294:	d00c      	beq.n	80072b0 <HAL_PCD_IRQHandler+0xc2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8007296:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007298:	015a      	lsls	r2, r3, #5
 800729a:	69fb      	ldr	r3, [r7, #28]
 800729c:	4413      	add	r3, r2
 800729e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80072a2:	461a      	mov	r2, r3
 80072a4:	2301      	movs	r3, #1
 80072a6:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80072a8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80072aa:	6878      	ldr	r0, [r7, #4]
 80072ac:	f000 fe0e 	bl	8007ecc <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80072b0:	69bb      	ldr	r3, [r7, #24]
 80072b2:	f003 0308 	and.w	r3, r3, #8
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	d00c      	beq.n	80072d4 <HAL_PCD_IRQHandler+0xe6>
          {
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80072ba:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80072bc:	6878      	ldr	r0, [r7, #4]
 80072be:	f000 ff0d 	bl	80080dc <PCD_EP_OutSetupPacket_int>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80072c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072c4:	015a      	lsls	r2, r3, #5
 80072c6:	69fb      	ldr	r3, [r7, #28]
 80072c8:	4413      	add	r3, r2
 80072ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80072ce:	461a      	mov	r2, r3
 80072d0:	2308      	movs	r3, #8
 80072d2:	6093      	str	r3, [r2, #8]
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80072d4:	69bb      	ldr	r3, [r7, #24]
 80072d6:	f003 0310 	and.w	r3, r3, #16
 80072da:	2b00      	cmp	r3, #0
 80072dc:	d008      	beq.n	80072f0 <HAL_PCD_IRQHandler+0x102>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80072de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072e0:	015a      	lsls	r2, r3, #5
 80072e2:	69fb      	ldr	r3, [r7, #28]
 80072e4:	4413      	add	r3, r2
 80072e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80072ea:	461a      	mov	r2, r3
 80072ec:	2310      	movs	r3, #16
 80072ee:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80072f0:	69bb      	ldr	r3, [r7, #24]
 80072f2:	f003 0320 	and.w	r3, r3, #32
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d015      	beq.n	8007326 <HAL_PCD_IRQHandler+0x138>
          {
            if (hpcd->Init.dma_enable == 1U)
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	691b      	ldr	r3, [r3, #16]
 80072fe:	2b01      	cmp	r3, #1
 8007300:	d108      	bne.n	8007314 <HAL_PCD_IRQHandler+0x126>
            {
              (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	6818      	ldr	r0, [r3, #0]
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800730c:	461a      	mov	r2, r3
 800730e:	2101      	movs	r1, #1
 8007310:	f006 fbb2 	bl	800da78 <USB_EP0_OutStart>
            }
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8007314:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007316:	015a      	lsls	r2, r3, #5
 8007318:	69fb      	ldr	r3, [r7, #28]
 800731a:	4413      	add	r3, r2
 800731c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007320:	461a      	mov	r2, r3
 8007322:	2320      	movs	r3, #32
 8007324:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8007326:	69bb      	ldr	r3, [r7, #24]
 8007328:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800732c:	2b00      	cmp	r3, #0
 800732e:	d009      	beq.n	8007344 <HAL_PCD_IRQHandler+0x156>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8007330:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007332:	015a      	lsls	r2, r3, #5
 8007334:	69fb      	ldr	r3, [r7, #28]
 8007336:	4413      	add	r3, r2
 8007338:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800733c:	461a      	mov	r2, r3
 800733e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007342:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8007344:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007346:	3301      	adds	r3, #1
 8007348:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800734a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800734c:	085b      	lsrs	r3, r3, #1
 800734e:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8007350:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007352:	2b00      	cmp	r3, #0
 8007354:	d18c      	bne.n	8007270 <HAL_PCD_IRQHandler+0x82>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	4618      	mov	r0, r3
 800735c:	f006 fab5 	bl	800d8ca <USB_ReadInterrupts>
 8007360:	4603      	mov	r3, r0
 8007362:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007366:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800736a:	f040 80c4 	bne.w	80074f6 <HAL_PCD_IRQHandler+0x308>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	4618      	mov	r0, r3
 8007374:	f006 fad6 	bl	800d924 <USB_ReadDevAllInEpInterrupt>
 8007378:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800737a:	2300      	movs	r3, #0
 800737c:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 800737e:	e0b6      	b.n	80074ee <HAL_PCD_IRQHandler+0x300>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8007380:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007382:	f003 0301 	and.w	r3, r3, #1
 8007386:	2b00      	cmp	r3, #0
 8007388:	f000 80ab 	beq.w	80074e2 <HAL_PCD_IRQHandler+0x2f4>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007392:	b2d2      	uxtb	r2, r2
 8007394:	4611      	mov	r1, r2
 8007396:	4618      	mov	r0, r3
 8007398:	f006 fafc 	bl	800d994 <USB_ReadDevInEPInterrupt>
 800739c:	61b8      	str	r0, [r7, #24]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800739e:	69bb      	ldr	r3, [r7, #24]
 80073a0:	f003 0301 	and.w	r3, r3, #1
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	d05b      	beq.n	8007460 <HAL_PCD_IRQHandler+0x272>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80073a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073aa:	f003 030f 	and.w	r3, r3, #15
 80073ae:	2201      	movs	r2, #1
 80073b0:	fa02 f303 	lsl.w	r3, r2, r3
 80073b4:	617b      	str	r3, [r7, #20]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80073b6:	69fb      	ldr	r3, [r7, #28]
 80073b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80073bc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80073be:	697b      	ldr	r3, [r7, #20]
 80073c0:	43db      	mvns	r3, r3
 80073c2:	69f9      	ldr	r1, [r7, #28]
 80073c4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80073c8:	4013      	ands	r3, r2
 80073ca:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80073cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073ce:	015a      	lsls	r2, r3, #5
 80073d0:	69fb      	ldr	r3, [r7, #28]
 80073d2:	4413      	add	r3, r2
 80073d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80073d8:	461a      	mov	r2, r3
 80073da:	2301      	movs	r3, #1
 80073dc:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	691b      	ldr	r3, [r3, #16]
 80073e2:	2b01      	cmp	r3, #1
 80073e4:	d11b      	bne.n	800741e <HAL_PCD_IRQHandler+0x230>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80073e6:	6879      	ldr	r1, [r7, #4]
 80073e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80073ea:	4613      	mov	r3, r2
 80073ec:	00db      	lsls	r3, r3, #3
 80073ee:	1a9b      	subs	r3, r3, r2
 80073f0:	009b      	lsls	r3, r3, #2
 80073f2:	440b      	add	r3, r1
 80073f4:	3348      	adds	r3, #72	; 0x48
 80073f6:	6819      	ldr	r1, [r3, #0]
 80073f8:	6878      	ldr	r0, [r7, #4]
 80073fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80073fc:	4613      	mov	r3, r2
 80073fe:	00db      	lsls	r3, r3, #3
 8007400:	1a9b      	subs	r3, r3, r2
 8007402:	009b      	lsls	r3, r3, #2
 8007404:	4403      	add	r3, r0
 8007406:	3344      	adds	r3, #68	; 0x44
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	4419      	add	r1, r3
 800740c:	6878      	ldr	r0, [r7, #4]
 800740e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007410:	4613      	mov	r3, r2
 8007412:	00db      	lsls	r3, r3, #3
 8007414:	1a9b      	subs	r3, r3, r2
 8007416:	009b      	lsls	r3, r3, #2
 8007418:	4403      	add	r3, r0
 800741a:	3348      	adds	r3, #72	; 0x48
 800741c:	6019      	str	r1, [r3, #0]
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800741e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007420:	b2db      	uxtb	r3, r3
 8007422:	4619      	mov	r1, r3
 8007424:	6878      	ldr	r0, [r7, #4]
 8007426:	f008 fcb0 	bl	800fd8a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

            if (hpcd->Init.dma_enable == 1U)
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	691b      	ldr	r3, [r3, #16]
 800742e:	2b01      	cmp	r3, #1
 8007430:	d116      	bne.n	8007460 <HAL_PCD_IRQHandler+0x272>
            {
              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8007432:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007434:	2b00      	cmp	r3, #0
 8007436:	d113      	bne.n	8007460 <HAL_PCD_IRQHandler+0x272>
 8007438:	6879      	ldr	r1, [r7, #4]
 800743a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800743c:	4613      	mov	r3, r2
 800743e:	00db      	lsls	r3, r3, #3
 8007440:	1a9b      	subs	r3, r3, r2
 8007442:	009b      	lsls	r3, r3, #2
 8007444:	440b      	add	r3, r1
 8007446:	3350      	adds	r3, #80	; 0x50
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	2b00      	cmp	r3, #0
 800744c:	d108      	bne.n	8007460 <HAL_PCD_IRQHandler+0x272>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	6818      	ldr	r0, [r3, #0]
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8007458:	461a      	mov	r2, r3
 800745a:	2101      	movs	r1, #1
 800745c:	f006 fb0c 	bl	800da78 <USB_EP0_OutStart>
              }
            }
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8007460:	69bb      	ldr	r3, [r7, #24]
 8007462:	f003 0308 	and.w	r3, r3, #8
 8007466:	2b00      	cmp	r3, #0
 8007468:	d008      	beq.n	800747c <HAL_PCD_IRQHandler+0x28e>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800746a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800746c:	015a      	lsls	r2, r3, #5
 800746e:	69fb      	ldr	r3, [r7, #28]
 8007470:	4413      	add	r3, r2
 8007472:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007476:	461a      	mov	r2, r3
 8007478:	2308      	movs	r3, #8
 800747a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800747c:	69bb      	ldr	r3, [r7, #24]
 800747e:	f003 0310 	and.w	r3, r3, #16
 8007482:	2b00      	cmp	r3, #0
 8007484:	d008      	beq.n	8007498 <HAL_PCD_IRQHandler+0x2aa>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8007486:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007488:	015a      	lsls	r2, r3, #5
 800748a:	69fb      	ldr	r3, [r7, #28]
 800748c:	4413      	add	r3, r2
 800748e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007492:	461a      	mov	r2, r3
 8007494:	2310      	movs	r3, #16
 8007496:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8007498:	69bb      	ldr	r3, [r7, #24]
 800749a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d008      	beq.n	80074b4 <HAL_PCD_IRQHandler+0x2c6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80074a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074a4:	015a      	lsls	r2, r3, #5
 80074a6:	69fb      	ldr	r3, [r7, #28]
 80074a8:	4413      	add	r3, r2
 80074aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80074ae:	461a      	mov	r2, r3
 80074b0:	2340      	movs	r3, #64	; 0x40
 80074b2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80074b4:	69bb      	ldr	r3, [r7, #24]
 80074b6:	f003 0302 	and.w	r3, r3, #2
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	d008      	beq.n	80074d0 <HAL_PCD_IRQHandler+0x2e2>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80074be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074c0:	015a      	lsls	r2, r3, #5
 80074c2:	69fb      	ldr	r3, [r7, #28]
 80074c4:	4413      	add	r3, r2
 80074c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80074ca:	461a      	mov	r2, r3
 80074cc:	2302      	movs	r3, #2
 80074ce:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80074d0:	69bb      	ldr	r3, [r7, #24]
 80074d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	d003      	beq.n	80074e2 <HAL_PCD_IRQHandler+0x2f4>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80074da:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80074dc:	6878      	ldr	r0, [r7, #4]
 80074de:	f000 fc67 	bl	8007db0 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80074e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074e4:	3301      	adds	r3, #1
 80074e6:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80074e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074ea:	085b      	lsrs	r3, r3, #1
 80074ec:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80074ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	f47f af45 	bne.w	8007380 <HAL_PCD_IRQHandler+0x192>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	4618      	mov	r0, r3
 80074fc:	f006 f9e5 	bl	800d8ca <USB_ReadInterrupts>
 8007500:	4603      	mov	r3, r0
 8007502:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007506:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800750a:	d122      	bne.n	8007552 <HAL_PCD_IRQHandler+0x364>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800750c:	69fb      	ldr	r3, [r7, #28]
 800750e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007512:	685b      	ldr	r3, [r3, #4]
 8007514:	69fa      	ldr	r2, [r7, #28]
 8007516:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800751a:	f023 0301 	bic.w	r3, r3, #1
 800751e:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8007526:	2b01      	cmp	r3, #1
 8007528:	d108      	bne.n	800753c <HAL_PCD_IRQHandler+0x34e>
      {
        hpcd->LPM_State = LPM_L0;
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	2200      	movs	r2, #0
 800752e:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8007532:	2100      	movs	r1, #0
 8007534:	6878      	ldr	r0, [r7, #4]
 8007536:	f000 fe89 	bl	800824c <HAL_PCDEx_LPM_Callback>
 800753a:	e002      	b.n	8007542 <HAL_PCD_IRQHandler+0x354>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800753c:	6878      	ldr	r0, [r7, #4]
 800753e:	f008 fc9b 	bl	800fe78 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	695a      	ldr	r2, [r3, #20]
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8007550:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	4618      	mov	r0, r3
 8007558:	f006 f9b7 	bl	800d8ca <USB_ReadInterrupts>
 800755c:	4603      	mov	r3, r0
 800755e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007562:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007566:	d112      	bne.n	800758e <HAL_PCD_IRQHandler+0x3a0>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8007568:	69fb      	ldr	r3, [r7, #28]
 800756a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800756e:	689b      	ldr	r3, [r3, #8]
 8007570:	f003 0301 	and.w	r3, r3, #1
 8007574:	2b01      	cmp	r3, #1
 8007576:	d102      	bne.n	800757e <HAL_PCD_IRQHandler+0x390>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8007578:	6878      	ldr	r0, [r7, #4]
 800757a:	f008 fc57 	bl	800fe2c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	695a      	ldr	r2, [r3, #20]
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800758c:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    #endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	4618      	mov	r0, r3
 8007594:	f006 f999 	bl	800d8ca <USB_ReadInterrupts>
 8007598:	4603      	mov	r3, r0
 800759a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800759e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80075a2:	f040 80a7 	bne.w	80076f4 <HAL_PCD_IRQHandler+0x506>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80075a6:	69fb      	ldr	r3, [r7, #28]
 80075a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80075ac:	685b      	ldr	r3, [r3, #4]
 80075ae:	69fa      	ldr	r2, [r7, #28]
 80075b0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80075b4:	f023 0301 	bic.w	r3, r3, #1
 80075b8:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	2110      	movs	r1, #16
 80075c0:	4618      	mov	r0, r3
 80075c2:	f005 fad1 	bl	800cb68 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80075c6:	2300      	movs	r3, #0
 80075c8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80075ca:	e036      	b.n	800763a <HAL_PCD_IRQHandler+0x44c>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80075cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075ce:	015a      	lsls	r2, r3, #5
 80075d0:	69fb      	ldr	r3, [r7, #28]
 80075d2:	4413      	add	r3, r2
 80075d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80075d8:	461a      	mov	r2, r3
 80075da:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80075de:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80075e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075e2:	015a      	lsls	r2, r3, #5
 80075e4:	69fb      	ldr	r3, [r7, #28]
 80075e6:	4413      	add	r3, r2
 80075e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80075f0:	0151      	lsls	r1, r2, #5
 80075f2:	69fa      	ldr	r2, [r7, #28]
 80075f4:	440a      	add	r2, r1
 80075f6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80075fa:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80075fe:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8007600:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007602:	015a      	lsls	r2, r3, #5
 8007604:	69fb      	ldr	r3, [r7, #28]
 8007606:	4413      	add	r3, r2
 8007608:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800760c:	461a      	mov	r2, r3
 800760e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007612:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8007614:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007616:	015a      	lsls	r2, r3, #5
 8007618:	69fb      	ldr	r3, [r7, #28]
 800761a:	4413      	add	r3, r2
 800761c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007624:	0151      	lsls	r1, r2, #5
 8007626:	69fa      	ldr	r2, [r7, #28]
 8007628:	440a      	add	r2, r1
 800762a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800762e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007632:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007634:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007636:	3301      	adds	r3, #1
 8007638:	62fb      	str	r3, [r7, #44]	; 0x2c
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	685b      	ldr	r3, [r3, #4]
 800763e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007640:	429a      	cmp	r2, r3
 8007642:	d3c3      	bcc.n	80075cc <HAL_PCD_IRQHandler+0x3de>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8007644:	69fb      	ldr	r3, [r7, #28]
 8007646:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800764a:	69db      	ldr	r3, [r3, #28]
 800764c:	69fa      	ldr	r2, [r7, #28]
 800764e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007652:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8007656:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800765c:	2b00      	cmp	r3, #0
 800765e:	d016      	beq.n	800768e <HAL_PCD_IRQHandler+0x4a0>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8007660:	69fb      	ldr	r3, [r7, #28]
 8007662:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007666:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800766a:	69fa      	ldr	r2, [r7, #28]
 800766c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007670:	f043 030b 	orr.w	r3, r3, #11
 8007674:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8007678:	69fb      	ldr	r3, [r7, #28]
 800767a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800767e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007680:	69fa      	ldr	r2, [r7, #28]
 8007682:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007686:	f043 030b 	orr.w	r3, r3, #11
 800768a:	6453      	str	r3, [r2, #68]	; 0x44
 800768c:	e015      	b.n	80076ba <HAL_PCD_IRQHandler+0x4cc>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800768e:	69fb      	ldr	r3, [r7, #28]
 8007690:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007694:	695b      	ldr	r3, [r3, #20]
 8007696:	69fa      	ldr	r2, [r7, #28]
 8007698:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800769c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80076a0:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80076a4:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80076a6:	69fb      	ldr	r3, [r7, #28]
 80076a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80076ac:	691b      	ldr	r3, [r3, #16]
 80076ae:	69fa      	ldr	r2, [r7, #28]
 80076b0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80076b4:	f043 030b 	orr.w	r3, r3, #11
 80076b8:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80076ba:	69fb      	ldr	r3, [r7, #28]
 80076bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	69fa      	ldr	r2, [r7, #28]
 80076c4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80076c8:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80076cc:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	6818      	ldr	r0, [r3, #0]
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	691b      	ldr	r3, [r3, #16]
 80076d6:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80076de:	461a      	mov	r2, r3
 80076e0:	f006 f9ca 	bl	800da78 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	695a      	ldr	r2, [r3, #20]
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80076f2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	4618      	mov	r0, r3
 80076fa:	f006 f8e6 	bl	800d8ca <USB_ReadInterrupts>
 80076fe:	4603      	mov	r3, r0
 8007700:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007704:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007708:	d124      	bne.n	8007754 <HAL_PCD_IRQHandler+0x566>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	4618      	mov	r0, r3
 8007710:	f006 f97c 	bl	800da0c <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	4618      	mov	r0, r3
 800771a:	f005 fa86 	bl	800cc2a <USB_GetDevSpeed>
 800771e:	4603      	mov	r3, r0
 8007720:	461a      	mov	r2, r3
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	681c      	ldr	r4, [r3, #0]
 800772a:	f001 f9a3 	bl	8008a74 <HAL_RCC_GetHCLKFreq>
 800772e:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8007734:	b2db      	uxtb	r3, r3
 8007736:	461a      	mov	r2, r3
 8007738:	4620      	mov	r0, r4
 800773a:	f004 ffb5 	bl	800c6a8 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800773e:	6878      	ldr	r0, [r7, #4]
 8007740:	f008 fb4b 	bl	800fdda <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	695a      	ldr	r2, [r3, #20]
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8007752:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	4618      	mov	r0, r3
 800775a:	f006 f8b6 	bl	800d8ca <USB_ReadInterrupts>
 800775e:	4603      	mov	r3, r0
 8007760:	f003 0310 	and.w	r3, r3, #16
 8007764:	2b10      	cmp	r3, #16
 8007766:	d161      	bne.n	800782c <HAL_PCD_IRQHandler+0x63e>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	699a      	ldr	r2, [r3, #24]
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	f022 0210 	bic.w	r2, r2, #16
 8007776:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8007778:	6a3b      	ldr	r3, [r7, #32]
 800777a:	6a1b      	ldr	r3, [r3, #32]
 800777c:	613b      	str	r3, [r7, #16]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 800777e:	693b      	ldr	r3, [r7, #16]
 8007780:	f003 020f 	and.w	r2, r3, #15
 8007784:	4613      	mov	r3, r2
 8007786:	00db      	lsls	r3, r3, #3
 8007788:	1a9b      	subs	r3, r3, r2
 800778a:	009b      	lsls	r3, r3, #2
 800778c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8007790:	687a      	ldr	r2, [r7, #4]
 8007792:	4413      	add	r3, r2
 8007794:	3304      	adds	r3, #4
 8007796:	60fb      	str	r3, [r7, #12]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8007798:	693b      	ldr	r3, [r7, #16]
 800779a:	0c5b      	lsrs	r3, r3, #17
 800779c:	f003 030f 	and.w	r3, r3, #15
 80077a0:	2b02      	cmp	r3, #2
 80077a2:	d124      	bne.n	80077ee <HAL_PCD_IRQHandler+0x600>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 80077a4:	693a      	ldr	r2, [r7, #16]
 80077a6:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80077aa:	4013      	ands	r3, r2
 80077ac:	2b00      	cmp	r3, #0
 80077ae:	d035      	beq.n	800781c <HAL_PCD_IRQHandler+0x62e>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 80077b4:	693b      	ldr	r3, [r7, #16]
 80077b6:	091b      	lsrs	r3, r3, #4
 80077b8:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80077ba:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80077be:	b29b      	uxth	r3, r3
 80077c0:	461a      	mov	r2, r3
 80077c2:	6a38      	ldr	r0, [r7, #32]
 80077c4:	f005 ff2e 	bl	800d624 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	68da      	ldr	r2, [r3, #12]
 80077cc:	693b      	ldr	r3, [r7, #16]
 80077ce:	091b      	lsrs	r3, r3, #4
 80077d0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80077d4:	441a      	add	r2, r3
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	699a      	ldr	r2, [r3, #24]
 80077de:	693b      	ldr	r3, [r7, #16]
 80077e0:	091b      	lsrs	r3, r3, #4
 80077e2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80077e6:	441a      	add	r2, r3
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	619a      	str	r2, [r3, #24]
 80077ec:	e016      	b.n	800781c <HAL_PCD_IRQHandler+0x62e>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 80077ee:	693b      	ldr	r3, [r7, #16]
 80077f0:	0c5b      	lsrs	r3, r3, #17
 80077f2:	f003 030f 	and.w	r3, r3, #15
 80077f6:	2b06      	cmp	r3, #6
 80077f8:	d110      	bne.n	800781c <HAL_PCD_IRQHandler+0x62e>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8007800:	2208      	movs	r2, #8
 8007802:	4619      	mov	r1, r3
 8007804:	6a38      	ldr	r0, [r7, #32]
 8007806:	f005 ff0d 	bl	800d624 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	699a      	ldr	r2, [r3, #24]
 800780e:	693b      	ldr	r3, [r7, #16]
 8007810:	091b      	lsrs	r3, r3, #4
 8007812:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007816:	441a      	add	r2, r3
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	699a      	ldr	r2, [r3, #24]
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	f042 0210 	orr.w	r2, r2, #16
 800782a:	619a      	str	r2, [r3, #24]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	4618      	mov	r0, r3
 8007832:	f006 f84a 	bl	800d8ca <USB_ReadInterrupts>
 8007836:	4603      	mov	r3, r0
 8007838:	f003 0308 	and.w	r3, r3, #8
 800783c:	2b08      	cmp	r3, #8
 800783e:	d10a      	bne.n	8007856 <HAL_PCD_IRQHandler+0x668>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8007840:	6878      	ldr	r0, [r7, #4]
 8007842:	f008 fabc 	bl	800fdbe <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	695a      	ldr	r2, [r3, #20]
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	f002 0208 	and.w	r2, r2, #8
 8007854:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	4618      	mov	r0, r3
 800785c:	f006 f835 	bl	800d8ca <USB_ReadInterrupts>
 8007860:	4603      	mov	r3, r0
 8007862:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007866:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800786a:	d10f      	bne.n	800788c <HAL_PCD_IRQHandler+0x69e>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 800786c:	2300      	movs	r3, #0
 800786e:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8007870:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007872:	b2db      	uxtb	r3, r3
 8007874:	4619      	mov	r1, r3
 8007876:	6878      	ldr	r0, [r7, #4]
 8007878:	f008 fb1e 	bl	800feb8 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	695a      	ldr	r2, [r3, #20]
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 800788a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	4618      	mov	r0, r3
 8007892:	f006 f81a 	bl	800d8ca <USB_ReadInterrupts>
 8007896:	4603      	mov	r3, r0
 8007898:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800789c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80078a0:	d10f      	bne.n	80078c2 <HAL_PCD_IRQHandler+0x6d4>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 80078a2:	2300      	movs	r3, #0
 80078a4:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80078a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078a8:	b2db      	uxtb	r3, r3
 80078aa:	4619      	mov	r1, r3
 80078ac:	6878      	ldr	r0, [r7, #4]
 80078ae:	f008 faf1 	bl	800fe94 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	695a      	ldr	r2, [r3, #20]
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80078c0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	4618      	mov	r0, r3
 80078c8:	f005 ffff 	bl	800d8ca <USB_ReadInterrupts>
 80078cc:	4603      	mov	r3, r0
 80078ce:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80078d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80078d6:	d10a      	bne.n	80078ee <HAL_PCD_IRQHandler+0x700>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80078d8:	6878      	ldr	r0, [r7, #4]
 80078da:	f008 faff 	bl	800fedc <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	695a      	ldr	r2, [r3, #20]
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80078ec:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	4618      	mov	r0, r3
 80078f4:	f005 ffe9 	bl	800d8ca <USB_ReadInterrupts>
 80078f8:	4603      	mov	r3, r0
 80078fa:	f003 0304 	and.w	r3, r3, #4
 80078fe:	2b04      	cmp	r3, #4
 8007900:	d115      	bne.n	800792e <HAL_PCD_IRQHandler+0x740>
    {
      temp = hpcd->Instance->GOTGINT;
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	685b      	ldr	r3, [r3, #4]
 8007908:	613b      	str	r3, [r7, #16]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800790a:	693b      	ldr	r3, [r7, #16]
 800790c:	f003 0304 	and.w	r3, r3, #4
 8007910:	2b00      	cmp	r3, #0
 8007912:	d002      	beq.n	800791a <HAL_PCD_IRQHandler+0x72c>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8007914:	6878      	ldr	r0, [r7, #4]
 8007916:	f008 faef 	bl	800fef8 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	6859      	ldr	r1, [r3, #4]
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	693a      	ldr	r2, [r7, #16]
 8007926:	430a      	orrs	r2, r1
 8007928:	605a      	str	r2, [r3, #4]
 800792a:	e000      	b.n	800792e <HAL_PCD_IRQHandler+0x740>
      return;
 800792c:	bf00      	nop
    }
  }
}
 800792e:	3734      	adds	r7, #52	; 0x34
 8007930:	46bd      	mov	sp, r7
 8007932:	bd90      	pop	{r4, r7, pc}

08007934 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8007934:	b580      	push	{r7, lr}
 8007936:	b082      	sub	sp, #8
 8007938:	af00      	add	r7, sp, #0
 800793a:	6078      	str	r0, [r7, #4]
 800793c:	460b      	mov	r3, r1
 800793e:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8007946:	2b01      	cmp	r3, #1
 8007948:	d101      	bne.n	800794e <HAL_PCD_SetAddress+0x1a>
 800794a:	2302      	movs	r3, #2
 800794c:	e013      	b.n	8007976 <HAL_PCD_SetAddress+0x42>
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	2201      	movs	r2, #1
 8007952:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	78fa      	ldrb	r2, [r7, #3]
 800795a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	78fa      	ldrb	r2, [r7, #3]
 8007964:	4611      	mov	r1, r2
 8007966:	4618      	mov	r0, r3
 8007968:	f005 ff59 	bl	800d81e <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	2200      	movs	r2, #0
 8007970:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8007974:	2300      	movs	r3, #0
}
 8007976:	4618      	mov	r0, r3
 8007978:	3708      	adds	r7, #8
 800797a:	46bd      	mov	sp, r7
 800797c:	bd80      	pop	{r7, pc}

0800797e <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 800797e:	b580      	push	{r7, lr}
 8007980:	b084      	sub	sp, #16
 8007982:	af00      	add	r7, sp, #0
 8007984:	6078      	str	r0, [r7, #4]
 8007986:	4608      	mov	r0, r1
 8007988:	4611      	mov	r1, r2
 800798a:	461a      	mov	r2, r3
 800798c:	4603      	mov	r3, r0
 800798e:	70fb      	strb	r3, [r7, #3]
 8007990:	460b      	mov	r3, r1
 8007992:	803b      	strh	r3, [r7, #0]
 8007994:	4613      	mov	r3, r2
 8007996:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8007998:	2300      	movs	r3, #0
 800799a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800799c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	da0f      	bge.n	80079c4 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80079a4:	78fb      	ldrb	r3, [r7, #3]
 80079a6:	f003 020f 	and.w	r2, r3, #15
 80079aa:	4613      	mov	r3, r2
 80079ac:	00db      	lsls	r3, r3, #3
 80079ae:	1a9b      	subs	r3, r3, r2
 80079b0:	009b      	lsls	r3, r3, #2
 80079b2:	3338      	adds	r3, #56	; 0x38
 80079b4:	687a      	ldr	r2, [r7, #4]
 80079b6:	4413      	add	r3, r2
 80079b8:	3304      	adds	r3, #4
 80079ba:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	2201      	movs	r2, #1
 80079c0:	705a      	strb	r2, [r3, #1]
 80079c2:	e00f      	b.n	80079e4 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80079c4:	78fb      	ldrb	r3, [r7, #3]
 80079c6:	f003 020f 	and.w	r2, r3, #15
 80079ca:	4613      	mov	r3, r2
 80079cc:	00db      	lsls	r3, r3, #3
 80079ce:	1a9b      	subs	r3, r3, r2
 80079d0:	009b      	lsls	r3, r3, #2
 80079d2:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80079d6:	687a      	ldr	r2, [r7, #4]
 80079d8:	4413      	add	r3, r2
 80079da:	3304      	adds	r3, #4
 80079dc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	2200      	movs	r2, #0
 80079e2:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80079e4:	78fb      	ldrb	r3, [r7, #3]
 80079e6:	f003 030f 	and.w	r3, r3, #15
 80079ea:	b2da      	uxtb	r2, r3
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80079f0:	883a      	ldrh	r2, [r7, #0]
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80079f6:	68fb      	ldr	r3, [r7, #12]
 80079f8:	78ba      	ldrb	r2, [r7, #2]
 80079fa:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	785b      	ldrb	r3, [r3, #1]
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	d004      	beq.n	8007a0e <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	781b      	ldrb	r3, [r3, #0]
 8007a08:	b29a      	uxth	r2, r3
 8007a0a:	68fb      	ldr	r3, [r7, #12]
 8007a0c:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8007a0e:	78bb      	ldrb	r3, [r7, #2]
 8007a10:	2b02      	cmp	r3, #2
 8007a12:	d102      	bne.n	8007a1a <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	2200      	movs	r2, #0
 8007a18:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8007a20:	2b01      	cmp	r3, #1
 8007a22:	d101      	bne.n	8007a28 <HAL_PCD_EP_Open+0xaa>
 8007a24:	2302      	movs	r3, #2
 8007a26:	e00e      	b.n	8007a46 <HAL_PCD_EP_Open+0xc8>
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	2201      	movs	r2, #1
 8007a2c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	68f9      	ldr	r1, [r7, #12]
 8007a36:	4618      	mov	r0, r3
 8007a38:	f005 f91c 	bl	800cc74 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	2200      	movs	r2, #0
 8007a40:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8007a44:	7afb      	ldrb	r3, [r7, #11]
}
 8007a46:	4618      	mov	r0, r3
 8007a48:	3710      	adds	r7, #16
 8007a4a:	46bd      	mov	sp, r7
 8007a4c:	bd80      	pop	{r7, pc}

08007a4e <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007a4e:	b580      	push	{r7, lr}
 8007a50:	b084      	sub	sp, #16
 8007a52:	af00      	add	r7, sp, #0
 8007a54:	6078      	str	r0, [r7, #4]
 8007a56:	460b      	mov	r3, r1
 8007a58:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8007a5a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	da0f      	bge.n	8007a82 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007a62:	78fb      	ldrb	r3, [r7, #3]
 8007a64:	f003 020f 	and.w	r2, r3, #15
 8007a68:	4613      	mov	r3, r2
 8007a6a:	00db      	lsls	r3, r3, #3
 8007a6c:	1a9b      	subs	r3, r3, r2
 8007a6e:	009b      	lsls	r3, r3, #2
 8007a70:	3338      	adds	r3, #56	; 0x38
 8007a72:	687a      	ldr	r2, [r7, #4]
 8007a74:	4413      	add	r3, r2
 8007a76:	3304      	adds	r3, #4
 8007a78:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8007a7a:	68fb      	ldr	r3, [r7, #12]
 8007a7c:	2201      	movs	r2, #1
 8007a7e:	705a      	strb	r2, [r3, #1]
 8007a80:	e00f      	b.n	8007aa2 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007a82:	78fb      	ldrb	r3, [r7, #3]
 8007a84:	f003 020f 	and.w	r2, r3, #15
 8007a88:	4613      	mov	r3, r2
 8007a8a:	00db      	lsls	r3, r3, #3
 8007a8c:	1a9b      	subs	r3, r3, r2
 8007a8e:	009b      	lsls	r3, r3, #2
 8007a90:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8007a94:	687a      	ldr	r2, [r7, #4]
 8007a96:	4413      	add	r3, r2
 8007a98:	3304      	adds	r3, #4
 8007a9a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	2200      	movs	r2, #0
 8007aa0:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8007aa2:	78fb      	ldrb	r3, [r7, #3]
 8007aa4:	f003 030f 	and.w	r3, r3, #15
 8007aa8:	b2da      	uxtb	r2, r3
 8007aaa:	68fb      	ldr	r3, [r7, #12]
 8007aac:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8007ab4:	2b01      	cmp	r3, #1
 8007ab6:	d101      	bne.n	8007abc <HAL_PCD_EP_Close+0x6e>
 8007ab8:	2302      	movs	r3, #2
 8007aba:	e00e      	b.n	8007ada <HAL_PCD_EP_Close+0x8c>
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	2201      	movs	r2, #1
 8007ac0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	68f9      	ldr	r1, [r7, #12]
 8007aca:	4618      	mov	r0, r3
 8007acc:	f005 f95a 	bl	800cd84 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	2200      	movs	r2, #0
 8007ad4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8007ad8:	2300      	movs	r3, #0
}
 8007ada:	4618      	mov	r0, r3
 8007adc:	3710      	adds	r7, #16
 8007ade:	46bd      	mov	sp, r7
 8007ae0:	bd80      	pop	{r7, pc}

08007ae2 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8007ae2:	b580      	push	{r7, lr}
 8007ae4:	b086      	sub	sp, #24
 8007ae6:	af00      	add	r7, sp, #0
 8007ae8:	60f8      	str	r0, [r7, #12]
 8007aea:	607a      	str	r2, [r7, #4]
 8007aec:	603b      	str	r3, [r7, #0]
 8007aee:	460b      	mov	r3, r1
 8007af0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007af2:	7afb      	ldrb	r3, [r7, #11]
 8007af4:	f003 020f 	and.w	r2, r3, #15
 8007af8:	4613      	mov	r3, r2
 8007afa:	00db      	lsls	r3, r3, #3
 8007afc:	1a9b      	subs	r3, r3, r2
 8007afe:	009b      	lsls	r3, r3, #2
 8007b00:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8007b04:	68fa      	ldr	r2, [r7, #12]
 8007b06:	4413      	add	r3, r2
 8007b08:	3304      	adds	r3, #4
 8007b0a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8007b0c:	697b      	ldr	r3, [r7, #20]
 8007b0e:	687a      	ldr	r2, [r7, #4]
 8007b10:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8007b12:	697b      	ldr	r3, [r7, #20]
 8007b14:	683a      	ldr	r2, [r7, #0]
 8007b16:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8007b18:	697b      	ldr	r3, [r7, #20]
 8007b1a:	2200      	movs	r2, #0
 8007b1c:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8007b1e:	697b      	ldr	r3, [r7, #20]
 8007b20:	2200      	movs	r2, #0
 8007b22:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007b24:	7afb      	ldrb	r3, [r7, #11]
 8007b26:	f003 030f 	and.w	r3, r3, #15
 8007b2a:	b2da      	uxtb	r2, r3
 8007b2c:	697b      	ldr	r3, [r7, #20]
 8007b2e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	691b      	ldr	r3, [r3, #16]
 8007b34:	2b01      	cmp	r3, #1
 8007b36:	d102      	bne.n	8007b3e <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8007b38:	687a      	ldr	r2, [r7, #4]
 8007b3a:	697b      	ldr	r3, [r7, #20]
 8007b3c:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8007b3e:	7afb      	ldrb	r3, [r7, #11]
 8007b40:	f003 030f 	and.w	r3, r3, #15
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	d109      	bne.n	8007b5c <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	6818      	ldr	r0, [r3, #0]
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	691b      	ldr	r3, [r3, #16]
 8007b50:	b2db      	uxtb	r3, r3
 8007b52:	461a      	mov	r2, r3
 8007b54:	6979      	ldr	r1, [r7, #20]
 8007b56:	f005 fbdd 	bl	800d314 <USB_EP0StartXfer>
 8007b5a:	e008      	b.n	8007b6e <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8007b5c:	68fb      	ldr	r3, [r7, #12]
 8007b5e:	6818      	ldr	r0, [r3, #0]
 8007b60:	68fb      	ldr	r3, [r7, #12]
 8007b62:	691b      	ldr	r3, [r3, #16]
 8007b64:	b2db      	uxtb	r3, r3
 8007b66:	461a      	mov	r2, r3
 8007b68:	6979      	ldr	r1, [r7, #20]
 8007b6a:	f005 f98f 	bl	800ce8c <USB_EPStartXfer>
  }

  return HAL_OK;
 8007b6e:	2300      	movs	r3, #0
}
 8007b70:	4618      	mov	r0, r3
 8007b72:	3718      	adds	r7, #24
 8007b74:	46bd      	mov	sp, r7
 8007b76:	bd80      	pop	{r7, pc}

08007b78 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007b78:	b480      	push	{r7}
 8007b7a:	b083      	sub	sp, #12
 8007b7c:	af00      	add	r7, sp, #0
 8007b7e:	6078      	str	r0, [r7, #4]
 8007b80:	460b      	mov	r3, r1
 8007b82:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8007b84:	78fb      	ldrb	r3, [r7, #3]
 8007b86:	f003 020f 	and.w	r2, r3, #15
 8007b8a:	6879      	ldr	r1, [r7, #4]
 8007b8c:	4613      	mov	r3, r2
 8007b8e:	00db      	lsls	r3, r3, #3
 8007b90:	1a9b      	subs	r3, r3, r2
 8007b92:	009b      	lsls	r3, r3, #2
 8007b94:	440b      	add	r3, r1
 8007b96:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8007b9a:	681b      	ldr	r3, [r3, #0]
}
 8007b9c:	4618      	mov	r0, r3
 8007b9e:	370c      	adds	r7, #12
 8007ba0:	46bd      	mov	sp, r7
 8007ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ba6:	4770      	bx	lr

08007ba8 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8007ba8:	b580      	push	{r7, lr}
 8007baa:	b086      	sub	sp, #24
 8007bac:	af00      	add	r7, sp, #0
 8007bae:	60f8      	str	r0, [r7, #12]
 8007bb0:	607a      	str	r2, [r7, #4]
 8007bb2:	603b      	str	r3, [r7, #0]
 8007bb4:	460b      	mov	r3, r1
 8007bb6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007bb8:	7afb      	ldrb	r3, [r7, #11]
 8007bba:	f003 020f 	and.w	r2, r3, #15
 8007bbe:	4613      	mov	r3, r2
 8007bc0:	00db      	lsls	r3, r3, #3
 8007bc2:	1a9b      	subs	r3, r3, r2
 8007bc4:	009b      	lsls	r3, r3, #2
 8007bc6:	3338      	adds	r3, #56	; 0x38
 8007bc8:	68fa      	ldr	r2, [r7, #12]
 8007bca:	4413      	add	r3, r2
 8007bcc:	3304      	adds	r3, #4
 8007bce:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8007bd0:	697b      	ldr	r3, [r7, #20]
 8007bd2:	687a      	ldr	r2, [r7, #4]
 8007bd4:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8007bd6:	697b      	ldr	r3, [r7, #20]
 8007bd8:	683a      	ldr	r2, [r7, #0]
 8007bda:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8007bdc:	697b      	ldr	r3, [r7, #20]
 8007bde:	2200      	movs	r2, #0
 8007be0:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8007be2:	697b      	ldr	r3, [r7, #20]
 8007be4:	2201      	movs	r2, #1
 8007be6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007be8:	7afb      	ldrb	r3, [r7, #11]
 8007bea:	f003 030f 	and.w	r3, r3, #15
 8007bee:	b2da      	uxtb	r2, r3
 8007bf0:	697b      	ldr	r3, [r7, #20]
 8007bf2:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	691b      	ldr	r3, [r3, #16]
 8007bf8:	2b01      	cmp	r3, #1
 8007bfa:	d102      	bne.n	8007c02 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8007bfc:	687a      	ldr	r2, [r7, #4]
 8007bfe:	697b      	ldr	r3, [r7, #20]
 8007c00:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8007c02:	7afb      	ldrb	r3, [r7, #11]
 8007c04:	f003 030f 	and.w	r3, r3, #15
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	d109      	bne.n	8007c20 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	6818      	ldr	r0, [r3, #0]
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	691b      	ldr	r3, [r3, #16]
 8007c14:	b2db      	uxtb	r3, r3
 8007c16:	461a      	mov	r2, r3
 8007c18:	6979      	ldr	r1, [r7, #20]
 8007c1a:	f005 fb7b 	bl	800d314 <USB_EP0StartXfer>
 8007c1e:	e008      	b.n	8007c32 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	6818      	ldr	r0, [r3, #0]
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	691b      	ldr	r3, [r3, #16]
 8007c28:	b2db      	uxtb	r3, r3
 8007c2a:	461a      	mov	r2, r3
 8007c2c:	6979      	ldr	r1, [r7, #20]
 8007c2e:	f005 f92d 	bl	800ce8c <USB_EPStartXfer>
  }

  return HAL_OK;
 8007c32:	2300      	movs	r3, #0
}
 8007c34:	4618      	mov	r0, r3
 8007c36:	3718      	adds	r7, #24
 8007c38:	46bd      	mov	sp, r7
 8007c3a:	bd80      	pop	{r7, pc}

08007c3c <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007c3c:	b580      	push	{r7, lr}
 8007c3e:	b084      	sub	sp, #16
 8007c40:	af00      	add	r7, sp, #0
 8007c42:	6078      	str	r0, [r7, #4]
 8007c44:	460b      	mov	r3, r1
 8007c46:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8007c48:	78fb      	ldrb	r3, [r7, #3]
 8007c4a:	f003 020f 	and.w	r2, r3, #15
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	685b      	ldr	r3, [r3, #4]
 8007c52:	429a      	cmp	r2, r3
 8007c54:	d901      	bls.n	8007c5a <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8007c56:	2301      	movs	r3, #1
 8007c58:	e050      	b.n	8007cfc <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8007c5a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	da0f      	bge.n	8007c82 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007c62:	78fb      	ldrb	r3, [r7, #3]
 8007c64:	f003 020f 	and.w	r2, r3, #15
 8007c68:	4613      	mov	r3, r2
 8007c6a:	00db      	lsls	r3, r3, #3
 8007c6c:	1a9b      	subs	r3, r3, r2
 8007c6e:	009b      	lsls	r3, r3, #2
 8007c70:	3338      	adds	r3, #56	; 0x38
 8007c72:	687a      	ldr	r2, [r7, #4]
 8007c74:	4413      	add	r3, r2
 8007c76:	3304      	adds	r3, #4
 8007c78:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8007c7a:	68fb      	ldr	r3, [r7, #12]
 8007c7c:	2201      	movs	r2, #1
 8007c7e:	705a      	strb	r2, [r3, #1]
 8007c80:	e00d      	b.n	8007c9e <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8007c82:	78fa      	ldrb	r2, [r7, #3]
 8007c84:	4613      	mov	r3, r2
 8007c86:	00db      	lsls	r3, r3, #3
 8007c88:	1a9b      	subs	r3, r3, r2
 8007c8a:	009b      	lsls	r3, r3, #2
 8007c8c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8007c90:	687a      	ldr	r2, [r7, #4]
 8007c92:	4413      	add	r3, r2
 8007c94:	3304      	adds	r3, #4
 8007c96:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8007c98:	68fb      	ldr	r3, [r7, #12]
 8007c9a:	2200      	movs	r2, #0
 8007c9c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8007c9e:	68fb      	ldr	r3, [r7, #12]
 8007ca0:	2201      	movs	r2, #1
 8007ca2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007ca4:	78fb      	ldrb	r3, [r7, #3]
 8007ca6:	f003 030f 	and.w	r3, r3, #15
 8007caa:	b2da      	uxtb	r2, r3
 8007cac:	68fb      	ldr	r3, [r7, #12]
 8007cae:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8007cb6:	2b01      	cmp	r3, #1
 8007cb8:	d101      	bne.n	8007cbe <HAL_PCD_EP_SetStall+0x82>
 8007cba:	2302      	movs	r3, #2
 8007cbc:	e01e      	b.n	8007cfc <HAL_PCD_EP_SetStall+0xc0>
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	2201      	movs	r2, #1
 8007cc2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	68f9      	ldr	r1, [r7, #12]
 8007ccc:	4618      	mov	r0, r3
 8007cce:	f005 fcd2 	bl	800d676 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8007cd2:	78fb      	ldrb	r3, [r7, #3]
 8007cd4:	f003 030f 	and.w	r3, r3, #15
 8007cd8:	2b00      	cmp	r3, #0
 8007cda:	d10a      	bne.n	8007cf2 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	6818      	ldr	r0, [r3, #0]
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	691b      	ldr	r3, [r3, #16]
 8007ce4:	b2d9      	uxtb	r1, r3
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8007cec:	461a      	mov	r2, r3
 8007cee:	f005 fec3 	bl	800da78 <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	2200      	movs	r2, #0
 8007cf6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8007cfa:	2300      	movs	r3, #0
}
 8007cfc:	4618      	mov	r0, r3
 8007cfe:	3710      	adds	r7, #16
 8007d00:	46bd      	mov	sp, r7
 8007d02:	bd80      	pop	{r7, pc}

08007d04 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007d04:	b580      	push	{r7, lr}
 8007d06:	b084      	sub	sp, #16
 8007d08:	af00      	add	r7, sp, #0
 8007d0a:	6078      	str	r0, [r7, #4]
 8007d0c:	460b      	mov	r3, r1
 8007d0e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8007d10:	78fb      	ldrb	r3, [r7, #3]
 8007d12:	f003 020f 	and.w	r2, r3, #15
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	685b      	ldr	r3, [r3, #4]
 8007d1a:	429a      	cmp	r2, r3
 8007d1c:	d901      	bls.n	8007d22 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8007d1e:	2301      	movs	r3, #1
 8007d20:	e042      	b.n	8007da8 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8007d22:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	da0f      	bge.n	8007d4a <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007d2a:	78fb      	ldrb	r3, [r7, #3]
 8007d2c:	f003 020f 	and.w	r2, r3, #15
 8007d30:	4613      	mov	r3, r2
 8007d32:	00db      	lsls	r3, r3, #3
 8007d34:	1a9b      	subs	r3, r3, r2
 8007d36:	009b      	lsls	r3, r3, #2
 8007d38:	3338      	adds	r3, #56	; 0x38
 8007d3a:	687a      	ldr	r2, [r7, #4]
 8007d3c:	4413      	add	r3, r2
 8007d3e:	3304      	adds	r3, #4
 8007d40:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8007d42:	68fb      	ldr	r3, [r7, #12]
 8007d44:	2201      	movs	r2, #1
 8007d46:	705a      	strb	r2, [r3, #1]
 8007d48:	e00f      	b.n	8007d6a <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007d4a:	78fb      	ldrb	r3, [r7, #3]
 8007d4c:	f003 020f 	and.w	r2, r3, #15
 8007d50:	4613      	mov	r3, r2
 8007d52:	00db      	lsls	r3, r3, #3
 8007d54:	1a9b      	subs	r3, r3, r2
 8007d56:	009b      	lsls	r3, r3, #2
 8007d58:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8007d5c:	687a      	ldr	r2, [r7, #4]
 8007d5e:	4413      	add	r3, r2
 8007d60:	3304      	adds	r3, #4
 8007d62:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	2200      	movs	r2, #0
 8007d68:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8007d6a:	68fb      	ldr	r3, [r7, #12]
 8007d6c:	2200      	movs	r2, #0
 8007d6e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007d70:	78fb      	ldrb	r3, [r7, #3]
 8007d72:	f003 030f 	and.w	r3, r3, #15
 8007d76:	b2da      	uxtb	r2, r3
 8007d78:	68fb      	ldr	r3, [r7, #12]
 8007d7a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8007d82:	2b01      	cmp	r3, #1
 8007d84:	d101      	bne.n	8007d8a <HAL_PCD_EP_ClrStall+0x86>
 8007d86:	2302      	movs	r3, #2
 8007d88:	e00e      	b.n	8007da8 <HAL_PCD_EP_ClrStall+0xa4>
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	2201      	movs	r2, #1
 8007d8e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	68f9      	ldr	r1, [r7, #12]
 8007d98:	4618      	mov	r0, r3
 8007d9a:	f005 fcda 	bl	800d752 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	2200      	movs	r2, #0
 8007da2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8007da6:	2300      	movs	r3, #0
}
 8007da8:	4618      	mov	r0, r3
 8007daa:	3710      	adds	r7, #16
 8007dac:	46bd      	mov	sp, r7
 8007dae:	bd80      	pop	{r7, pc}

08007db0 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8007db0:	b580      	push	{r7, lr}
 8007db2:	b08a      	sub	sp, #40	; 0x28
 8007db4:	af02      	add	r7, sp, #8
 8007db6:	6078      	str	r0, [r7, #4]
 8007db8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007dc0:	697b      	ldr	r3, [r7, #20]
 8007dc2:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8007dc4:	683a      	ldr	r2, [r7, #0]
 8007dc6:	4613      	mov	r3, r2
 8007dc8:	00db      	lsls	r3, r3, #3
 8007dca:	1a9b      	subs	r3, r3, r2
 8007dcc:	009b      	lsls	r3, r3, #2
 8007dce:	3338      	adds	r3, #56	; 0x38
 8007dd0:	687a      	ldr	r2, [r7, #4]
 8007dd2:	4413      	add	r3, r2
 8007dd4:	3304      	adds	r3, #4
 8007dd6:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	699a      	ldr	r2, [r3, #24]
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	695b      	ldr	r3, [r3, #20]
 8007de0:	429a      	cmp	r2, r3
 8007de2:	d901      	bls.n	8007de8 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8007de4:	2301      	movs	r3, #1
 8007de6:	e06c      	b.n	8007ec2 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	695a      	ldr	r2, [r3, #20]
 8007dec:	68fb      	ldr	r3, [r7, #12]
 8007dee:	699b      	ldr	r3, [r3, #24]
 8007df0:	1ad3      	subs	r3, r2, r3
 8007df2:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8007df4:	68fb      	ldr	r3, [r7, #12]
 8007df6:	689b      	ldr	r3, [r3, #8]
 8007df8:	69fa      	ldr	r2, [r7, #28]
 8007dfa:	429a      	cmp	r2, r3
 8007dfc:	d902      	bls.n	8007e04 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8007dfe:	68fb      	ldr	r3, [r7, #12]
 8007e00:	689b      	ldr	r3, [r3, #8]
 8007e02:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8007e04:	69fb      	ldr	r3, [r7, #28]
 8007e06:	3303      	adds	r3, #3
 8007e08:	089b      	lsrs	r3, r3, #2
 8007e0a:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8007e0c:	e02b      	b.n	8007e66 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8007e0e:	68fb      	ldr	r3, [r7, #12]
 8007e10:	695a      	ldr	r2, [r3, #20]
 8007e12:	68fb      	ldr	r3, [r7, #12]
 8007e14:	699b      	ldr	r3, [r3, #24]
 8007e16:	1ad3      	subs	r3, r2, r3
 8007e18:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8007e1a:	68fb      	ldr	r3, [r7, #12]
 8007e1c:	689b      	ldr	r3, [r3, #8]
 8007e1e:	69fa      	ldr	r2, [r7, #28]
 8007e20:	429a      	cmp	r2, r3
 8007e22:	d902      	bls.n	8007e2a <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	689b      	ldr	r3, [r3, #8]
 8007e28:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8007e2a:	69fb      	ldr	r3, [r7, #28]
 8007e2c:	3303      	adds	r3, #3
 8007e2e:	089b      	lsrs	r3, r3, #2
 8007e30:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8007e32:	68fb      	ldr	r3, [r7, #12]
 8007e34:	68d9      	ldr	r1, [r3, #12]
 8007e36:	683b      	ldr	r3, [r7, #0]
 8007e38:	b2da      	uxtb	r2, r3
 8007e3a:	69fb      	ldr	r3, [r7, #28]
 8007e3c:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8007e42:	b2db      	uxtb	r3, r3
 8007e44:	9300      	str	r3, [sp, #0]
 8007e46:	4603      	mov	r3, r0
 8007e48:	6978      	ldr	r0, [r7, #20]
 8007e4a:	f005 fbb6 	bl	800d5ba <USB_WritePacket>

    ep->xfer_buff  += len;
 8007e4e:	68fb      	ldr	r3, [r7, #12]
 8007e50:	68da      	ldr	r2, [r3, #12]
 8007e52:	69fb      	ldr	r3, [r7, #28]
 8007e54:	441a      	add	r2, r3
 8007e56:	68fb      	ldr	r3, [r7, #12]
 8007e58:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8007e5a:	68fb      	ldr	r3, [r7, #12]
 8007e5c:	699a      	ldr	r2, [r3, #24]
 8007e5e:	69fb      	ldr	r3, [r7, #28]
 8007e60:	441a      	add	r2, r3
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8007e66:	683b      	ldr	r3, [r7, #0]
 8007e68:	015a      	lsls	r2, r3, #5
 8007e6a:	693b      	ldr	r3, [r7, #16]
 8007e6c:	4413      	add	r3, r2
 8007e6e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007e72:	699b      	ldr	r3, [r3, #24]
 8007e74:	b29b      	uxth	r3, r3
 8007e76:	69ba      	ldr	r2, [r7, #24]
 8007e78:	429a      	cmp	r2, r3
 8007e7a:	d809      	bhi.n	8007e90 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	699a      	ldr	r2, [r3, #24]
 8007e80:	68fb      	ldr	r3, [r7, #12]
 8007e82:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8007e84:	429a      	cmp	r2, r3
 8007e86:	d203      	bcs.n	8007e90 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	695b      	ldr	r3, [r3, #20]
 8007e8c:	2b00      	cmp	r3, #0
 8007e8e:	d1be      	bne.n	8007e0e <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8007e90:	68fb      	ldr	r3, [r7, #12]
 8007e92:	695a      	ldr	r2, [r3, #20]
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	699b      	ldr	r3, [r3, #24]
 8007e98:	429a      	cmp	r2, r3
 8007e9a:	d811      	bhi.n	8007ec0 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8007e9c:	683b      	ldr	r3, [r7, #0]
 8007e9e:	f003 030f 	and.w	r3, r3, #15
 8007ea2:	2201      	movs	r2, #1
 8007ea4:	fa02 f303 	lsl.w	r3, r2, r3
 8007ea8:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8007eaa:	693b      	ldr	r3, [r7, #16]
 8007eac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007eb0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007eb2:	68bb      	ldr	r3, [r7, #8]
 8007eb4:	43db      	mvns	r3, r3
 8007eb6:	6939      	ldr	r1, [r7, #16]
 8007eb8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007ebc:	4013      	ands	r3, r2
 8007ebe:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8007ec0:	2300      	movs	r3, #0
}
 8007ec2:	4618      	mov	r0, r3
 8007ec4:	3720      	adds	r7, #32
 8007ec6:	46bd      	mov	sp, r7
 8007ec8:	bd80      	pop	{r7, pc}
	...

08007ecc <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8007ecc:	b580      	push	{r7, lr}
 8007ece:	b086      	sub	sp, #24
 8007ed0:	af00      	add	r7, sp, #0
 8007ed2:	6078      	str	r0, [r7, #4]
 8007ed4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007edc:	697b      	ldr	r3, [r7, #20]
 8007ede:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8007ee0:	697b      	ldr	r3, [r7, #20]
 8007ee2:	333c      	adds	r3, #60	; 0x3c
 8007ee4:	3304      	adds	r3, #4
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8007eea:	683b      	ldr	r3, [r7, #0]
 8007eec:	015a      	lsls	r2, r3, #5
 8007eee:	693b      	ldr	r3, [r7, #16]
 8007ef0:	4413      	add	r3, r2
 8007ef2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007ef6:	689b      	ldr	r3, [r3, #8]
 8007ef8:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	691b      	ldr	r3, [r3, #16]
 8007efe:	2b01      	cmp	r3, #1
 8007f00:	f040 80b3 	bne.w	800806a <PCD_EP_OutXfrComplete_int+0x19e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8007f04:	68bb      	ldr	r3, [r7, #8]
 8007f06:	f003 0308 	and.w	r3, r3, #8
 8007f0a:	2b00      	cmp	r3, #0
 8007f0c:	d028      	beq.n	8007f60 <PCD_EP_OutXfrComplete_int+0x94>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007f0e:	68fb      	ldr	r3, [r7, #12]
 8007f10:	4a70      	ldr	r2, [pc, #448]	; (80080d4 <PCD_EP_OutXfrComplete_int+0x208>)
 8007f12:	4293      	cmp	r3, r2
 8007f14:	d90e      	bls.n	8007f34 <PCD_EP_OutXfrComplete_int+0x68>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8007f16:	68bb      	ldr	r3, [r7, #8]
 8007f18:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	d009      	beq.n	8007f34 <PCD_EP_OutXfrComplete_int+0x68>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8007f20:	683b      	ldr	r3, [r7, #0]
 8007f22:	015a      	lsls	r2, r3, #5
 8007f24:	693b      	ldr	r3, [r7, #16]
 8007f26:	4413      	add	r3, r2
 8007f28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f2c:	461a      	mov	r2, r3
 8007f2e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007f32:	6093      	str	r3, [r2, #8]

      /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SetupStageCallback(hpcd);
#else
      HAL_PCD_SetupStageCallback(hpcd);
 8007f34:	6878      	ldr	r0, [r7, #4]
 8007f36:	f007 fefb 	bl	800fd30 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	6818      	ldr	r0, [r3, #0]
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8007f44:	461a      	mov	r2, r3
 8007f46:	2101      	movs	r1, #1
 8007f48:	f005 fd96 	bl	800da78 <USB_EP0_OutStart>
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8007f4c:	683b      	ldr	r3, [r7, #0]
 8007f4e:	015a      	lsls	r2, r3, #5
 8007f50:	693b      	ldr	r3, [r7, #16]
 8007f52:	4413      	add	r3, r2
 8007f54:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f58:	461a      	mov	r2, r3
 8007f5a:	2308      	movs	r3, #8
 8007f5c:	6093      	str	r3, [r2, #8]
 8007f5e:	e0b3      	b.n	80080c8 <PCD_EP_OutXfrComplete_int+0x1fc>
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8007f60:	68bb      	ldr	r3, [r7, #8]
 8007f62:	f003 0320 	and.w	r3, r3, #32
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	d009      	beq.n	8007f7e <PCD_EP_OutXfrComplete_int+0xb2>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8007f6a:	683b      	ldr	r3, [r7, #0]
 8007f6c:	015a      	lsls	r2, r3, #5
 8007f6e:	693b      	ldr	r3, [r7, #16]
 8007f70:	4413      	add	r3, r2
 8007f72:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f76:	461a      	mov	r2, r3
 8007f78:	2320      	movs	r3, #32
 8007f7a:	6093      	str	r3, [r2, #8]
 8007f7c:	e0a4      	b.n	80080c8 <PCD_EP_OutXfrComplete_int+0x1fc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8007f7e:	68bb      	ldr	r3, [r7, #8]
 8007f80:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8007f84:	2b00      	cmp	r3, #0
 8007f86:	f040 809f 	bne.w	80080c8 <PCD_EP_OutXfrComplete_int+0x1fc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007f8a:	68fb      	ldr	r3, [r7, #12]
 8007f8c:	4a51      	ldr	r2, [pc, #324]	; (80080d4 <PCD_EP_OutXfrComplete_int+0x208>)
 8007f8e:	4293      	cmp	r3, r2
 8007f90:	d90f      	bls.n	8007fb2 <PCD_EP_OutXfrComplete_int+0xe6>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8007f92:	68bb      	ldr	r3, [r7, #8]
 8007f94:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007f98:	2b00      	cmp	r3, #0
 8007f9a:	d00a      	beq.n	8007fb2 <PCD_EP_OutXfrComplete_int+0xe6>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8007f9c:	683b      	ldr	r3, [r7, #0]
 8007f9e:	015a      	lsls	r2, r3, #5
 8007fa0:	693b      	ldr	r3, [r7, #16]
 8007fa2:	4413      	add	r3, r2
 8007fa4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007fa8:	461a      	mov	r2, r3
 8007faa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007fae:	6093      	str	r3, [r2, #8]
 8007fb0:	e08a      	b.n	80080c8 <PCD_EP_OutXfrComplete_int+0x1fc>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8007fb2:	6879      	ldr	r1, [r7, #4]
 8007fb4:	683a      	ldr	r2, [r7, #0]
 8007fb6:	4613      	mov	r3, r2
 8007fb8:	00db      	lsls	r3, r3, #3
 8007fba:	1a9b      	subs	r3, r3, r2
 8007fbc:	009b      	lsls	r3, r3, #2
 8007fbe:	440b      	add	r3, r1
 8007fc0:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8007fc4:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8007fc6:	683b      	ldr	r3, [r7, #0]
 8007fc8:	0159      	lsls	r1, r3, #5
 8007fca:	693b      	ldr	r3, [r7, #16]
 8007fcc:	440b      	add	r3, r1
 8007fce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007fd2:	691b      	ldr	r3, [r3, #16]
 8007fd4:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8007fd8:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8007fda:	6878      	ldr	r0, [r7, #4]
 8007fdc:	683a      	ldr	r2, [r7, #0]
 8007fde:	4613      	mov	r3, r2
 8007fe0:	00db      	lsls	r3, r3, #3
 8007fe2:	1a9b      	subs	r3, r3, r2
 8007fe4:	009b      	lsls	r3, r3, #2
 8007fe6:	4403      	add	r3, r0
 8007fe8:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8007fec:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8007fee:	6879      	ldr	r1, [r7, #4]
 8007ff0:	683a      	ldr	r2, [r7, #0]
 8007ff2:	4613      	mov	r3, r2
 8007ff4:	00db      	lsls	r3, r3, #3
 8007ff6:	1a9b      	subs	r3, r3, r2
 8007ff8:	009b      	lsls	r3, r3, #2
 8007ffa:	440b      	add	r3, r1
 8007ffc:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8008000:	6819      	ldr	r1, [r3, #0]
 8008002:	6878      	ldr	r0, [r7, #4]
 8008004:	683a      	ldr	r2, [r7, #0]
 8008006:	4613      	mov	r3, r2
 8008008:	00db      	lsls	r3, r3, #3
 800800a:	1a9b      	subs	r3, r3, r2
 800800c:	009b      	lsls	r3, r3, #2
 800800e:	4403      	add	r3, r0
 8008010:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	4419      	add	r1, r3
 8008018:	6878      	ldr	r0, [r7, #4]
 800801a:	683a      	ldr	r2, [r7, #0]
 800801c:	4613      	mov	r3, r2
 800801e:	00db      	lsls	r3, r3, #3
 8008020:	1a9b      	subs	r3, r3, r2
 8008022:	009b      	lsls	r3, r3, #2
 8008024:	4403      	add	r3, r0
 8008026:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800802a:	6019      	str	r1, [r3, #0]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800802c:	683b      	ldr	r3, [r7, #0]
 800802e:	b2db      	uxtb	r3, r3
 8008030:	4619      	mov	r1, r3
 8008032:	6878      	ldr	r0, [r7, #4]
 8008034:	f007 fe8e 	bl	800fd54 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8008038:	683b      	ldr	r3, [r7, #0]
 800803a:	2b00      	cmp	r3, #0
 800803c:	d144      	bne.n	80080c8 <PCD_EP_OutXfrComplete_int+0x1fc>
 800803e:	6879      	ldr	r1, [r7, #4]
 8008040:	683a      	ldr	r2, [r7, #0]
 8008042:	4613      	mov	r3, r2
 8008044:	00db      	lsls	r3, r3, #3
 8008046:	1a9b      	subs	r3, r3, r2
 8008048:	009b      	lsls	r3, r3, #2
 800804a:	440b      	add	r3, r1
 800804c:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	2b00      	cmp	r3, #0
 8008054:	d138      	bne.n	80080c8 <PCD_EP_OutXfrComplete_int+0x1fc>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	6818      	ldr	r0, [r3, #0]
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8008060:	461a      	mov	r2, r3
 8008062:	2101      	movs	r1, #1
 8008064:	f005 fd08 	bl	800da78 <USB_EP0_OutStart>
 8008068:	e02e      	b.n	80080c8 <PCD_EP_OutXfrComplete_int+0x1fc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800806a:	68fb      	ldr	r3, [r7, #12]
 800806c:	4a1a      	ldr	r2, [pc, #104]	; (80080d8 <PCD_EP_OutXfrComplete_int+0x20c>)
 800806e:	4293      	cmp	r3, r2
 8008070:	d124      	bne.n	80080bc <PCD_EP_OutXfrComplete_int+0x1f0>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8008072:	68bb      	ldr	r3, [r7, #8]
 8008074:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008078:	2b00      	cmp	r3, #0
 800807a:	d00a      	beq.n	8008092 <PCD_EP_OutXfrComplete_int+0x1c6>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800807c:	683b      	ldr	r3, [r7, #0]
 800807e:	015a      	lsls	r2, r3, #5
 8008080:	693b      	ldr	r3, [r7, #16]
 8008082:	4413      	add	r3, r2
 8008084:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008088:	461a      	mov	r2, r3
 800808a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800808e:	6093      	str	r3, [r2, #8]
 8008090:	e01a      	b.n	80080c8 <PCD_EP_OutXfrComplete_int+0x1fc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8008092:	68bb      	ldr	r3, [r7, #8]
 8008094:	f003 0320 	and.w	r3, r3, #32
 8008098:	2b00      	cmp	r3, #0
 800809a:	d008      	beq.n	80080ae <PCD_EP_OutXfrComplete_int+0x1e2>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800809c:	683b      	ldr	r3, [r7, #0]
 800809e:	015a      	lsls	r2, r3, #5
 80080a0:	693b      	ldr	r3, [r7, #16]
 80080a2:	4413      	add	r3, r2
 80080a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80080a8:	461a      	mov	r2, r3
 80080aa:	2320      	movs	r3, #32
 80080ac:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80080ae:	683b      	ldr	r3, [r7, #0]
 80080b0:	b2db      	uxtb	r3, r3
 80080b2:	4619      	mov	r1, r3
 80080b4:	6878      	ldr	r0, [r7, #4]
 80080b6:	f007 fe4d 	bl	800fd54 <HAL_PCD_DataOutStageCallback>
 80080ba:	e005      	b.n	80080c8 <PCD_EP_OutXfrComplete_int+0x1fc>
    else
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80080bc:	683b      	ldr	r3, [r7, #0]
 80080be:	b2db      	uxtb	r3, r3
 80080c0:	4619      	mov	r1, r3
 80080c2:	6878      	ldr	r0, [r7, #4]
 80080c4:	f007 fe46 	bl	800fd54 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80080c8:	2300      	movs	r3, #0
}
 80080ca:	4618      	mov	r0, r3
 80080cc:	3718      	adds	r7, #24
 80080ce:	46bd      	mov	sp, r7
 80080d0:	bd80      	pop	{r7, pc}
 80080d2:	bf00      	nop
 80080d4:	4f54300a 	.word	0x4f54300a
 80080d8:	4f54310a 	.word	0x4f54310a

080080dc <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80080dc:	b580      	push	{r7, lr}
 80080de:	b086      	sub	sp, #24
 80080e0:	af00      	add	r7, sp, #0
 80080e2:	6078      	str	r0, [r7, #4]
 80080e4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80080ec:	697b      	ldr	r3, [r7, #20]
 80080ee:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80080f0:	697b      	ldr	r3, [r7, #20]
 80080f2:	333c      	adds	r3, #60	; 0x3c
 80080f4:	3304      	adds	r3, #4
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80080fa:	683b      	ldr	r3, [r7, #0]
 80080fc:	015a      	lsls	r2, r3, #5
 80080fe:	693b      	ldr	r3, [r7, #16]
 8008100:	4413      	add	r3, r2
 8008102:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008106:	689b      	ldr	r3, [r3, #8]
 8008108:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	691b      	ldr	r3, [r3, #16]
 800810e:	2b01      	cmp	r3, #1
 8008110:	d113      	bne.n	800813a <PCD_EP_OutSetupPacket_int+0x5e>
  {
    /* StupPktRcvd = 1 pending setup packet int */
    if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8008112:	68fb      	ldr	r3, [r7, #12]
 8008114:	4a1f      	ldr	r2, [pc, #124]	; (8008194 <PCD_EP_OutSetupPacket_int+0xb8>)
 8008116:	4293      	cmp	r3, r2
 8008118:	d922      	bls.n	8008160 <PCD_EP_OutSetupPacket_int+0x84>
        ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800811a:	68bb      	ldr	r3, [r7, #8]
 800811c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
    if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8008120:	2b00      	cmp	r3, #0
 8008122:	d01d      	beq.n	8008160 <PCD_EP_OutSetupPacket_int+0x84>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8008124:	683b      	ldr	r3, [r7, #0]
 8008126:	015a      	lsls	r2, r3, #5
 8008128:	693b      	ldr	r3, [r7, #16]
 800812a:	4413      	add	r3, r2
 800812c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008130:	461a      	mov	r2, r3
 8008132:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008136:	6093      	str	r3, [r2, #8]
 8008138:	e012      	b.n	8008160 <PCD_EP_OutSetupPacket_int+0x84>
    }
  }
  else
  {
    if ((gSNPSiD == USB_OTG_CORE_ID_310A) &&
 800813a:	68fb      	ldr	r3, [r7, #12]
 800813c:	4a16      	ldr	r2, [pc, #88]	; (8008198 <PCD_EP_OutSetupPacket_int+0xbc>)
 800813e:	4293      	cmp	r3, r2
 8008140:	d10e      	bne.n	8008160 <PCD_EP_OutSetupPacket_int+0x84>
        ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8008142:	68bb      	ldr	r3, [r7, #8]
 8008144:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
    if ((gSNPSiD == USB_OTG_CORE_ID_310A) &&
 8008148:	2b00      	cmp	r3, #0
 800814a:	d009      	beq.n	8008160 <PCD_EP_OutSetupPacket_int+0x84>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800814c:	683b      	ldr	r3, [r7, #0]
 800814e:	015a      	lsls	r2, r3, #5
 8008150:	693b      	ldr	r3, [r7, #16]
 8008152:	4413      	add	r3, r2
 8008154:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008158:	461a      	mov	r2, r3
 800815a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800815e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8008160:	6878      	ldr	r0, [r7, #4]
 8008162:	f007 fde5 	bl	800fd30 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8008166:	68fb      	ldr	r3, [r7, #12]
 8008168:	4a0a      	ldr	r2, [pc, #40]	; (8008194 <PCD_EP_OutSetupPacket_int+0xb8>)
 800816a:	4293      	cmp	r3, r2
 800816c:	d90c      	bls.n	8008188 <PCD_EP_OutSetupPacket_int+0xac>
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	691b      	ldr	r3, [r3, #16]
 8008172:	2b01      	cmp	r3, #1
 8008174:	d108      	bne.n	8008188 <PCD_EP_OutSetupPacket_int+0xac>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	6818      	ldr	r0, [r3, #0]
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8008180:	461a      	mov	r2, r3
 8008182:	2101      	movs	r1, #1
 8008184:	f005 fc78 	bl	800da78 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8008188:	2300      	movs	r3, #0
}
 800818a:	4618      	mov	r0, r3
 800818c:	3718      	adds	r7, #24
 800818e:	46bd      	mov	sp, r7
 8008190:	bd80      	pop	{r7, pc}
 8008192:	bf00      	nop
 8008194:	4f54300a 	.word	0x4f54300a
 8008198:	4f54310a 	.word	0x4f54310a

0800819c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800819c:	b480      	push	{r7}
 800819e:	b085      	sub	sp, #20
 80081a0:	af00      	add	r7, sp, #0
 80081a2:	6078      	str	r0, [r7, #4]
 80081a4:	460b      	mov	r3, r1
 80081a6:	70fb      	strb	r3, [r7, #3]
 80081a8:	4613      	mov	r3, r2
 80081aa:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081b2:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80081b4:	78fb      	ldrb	r3, [r7, #3]
 80081b6:	2b00      	cmp	r3, #0
 80081b8:	d107      	bne.n	80081ca <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80081ba:	883b      	ldrh	r3, [r7, #0]
 80081bc:	0419      	lsls	r1, r3, #16
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	68ba      	ldr	r2, [r7, #8]
 80081c4:	430a      	orrs	r2, r1
 80081c6:	629a      	str	r2, [r3, #40]	; 0x28
 80081c8:	e028      	b.n	800821c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80081d0:	0c1b      	lsrs	r3, r3, #16
 80081d2:	68ba      	ldr	r2, [r7, #8]
 80081d4:	4413      	add	r3, r2
 80081d6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80081d8:	2300      	movs	r3, #0
 80081da:	73fb      	strb	r3, [r7, #15]
 80081dc:	e00d      	b.n	80081fa <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	681a      	ldr	r2, [r3, #0]
 80081e2:	7bfb      	ldrb	r3, [r7, #15]
 80081e4:	3340      	adds	r3, #64	; 0x40
 80081e6:	009b      	lsls	r3, r3, #2
 80081e8:	4413      	add	r3, r2
 80081ea:	685b      	ldr	r3, [r3, #4]
 80081ec:	0c1b      	lsrs	r3, r3, #16
 80081ee:	68ba      	ldr	r2, [r7, #8]
 80081f0:	4413      	add	r3, r2
 80081f2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80081f4:	7bfb      	ldrb	r3, [r7, #15]
 80081f6:	3301      	adds	r3, #1
 80081f8:	73fb      	strb	r3, [r7, #15]
 80081fa:	7bfa      	ldrb	r2, [r7, #15]
 80081fc:	78fb      	ldrb	r3, [r7, #3]
 80081fe:	3b01      	subs	r3, #1
 8008200:	429a      	cmp	r2, r3
 8008202:	d3ec      	bcc.n	80081de <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8008204:	883b      	ldrh	r3, [r7, #0]
 8008206:	0418      	lsls	r0, r3, #16
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	6819      	ldr	r1, [r3, #0]
 800820c:	78fb      	ldrb	r3, [r7, #3]
 800820e:	3b01      	subs	r3, #1
 8008210:	68ba      	ldr	r2, [r7, #8]
 8008212:	4302      	orrs	r2, r0
 8008214:	3340      	adds	r3, #64	; 0x40
 8008216:	009b      	lsls	r3, r3, #2
 8008218:	440b      	add	r3, r1
 800821a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800821c:	2300      	movs	r3, #0
}
 800821e:	4618      	mov	r0, r3
 8008220:	3714      	adds	r7, #20
 8008222:	46bd      	mov	sp, r7
 8008224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008228:	4770      	bx	lr

0800822a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800822a:	b480      	push	{r7}
 800822c:	b083      	sub	sp, #12
 800822e:	af00      	add	r7, sp, #0
 8008230:	6078      	str	r0, [r7, #4]
 8008232:	460b      	mov	r3, r1
 8008234:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	887a      	ldrh	r2, [r7, #2]
 800823c:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800823e:	2300      	movs	r3, #0
}
 8008240:	4618      	mov	r0, r3
 8008242:	370c      	adds	r7, #12
 8008244:	46bd      	mov	sp, r7
 8008246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800824a:	4770      	bx	lr

0800824c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800824c:	b480      	push	{r7}
 800824e:	b083      	sub	sp, #12
 8008250:	af00      	add	r7, sp, #0
 8008252:	6078      	str	r0, [r7, #4]
 8008254:	460b      	mov	r3, r1
 8008256:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8008258:	bf00      	nop
 800825a:	370c      	adds	r7, #12
 800825c:	46bd      	mov	sp, r7
 800825e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008262:	4770      	bx	lr

08008264 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008264:	b580      	push	{r7, lr}
 8008266:	b086      	sub	sp, #24
 8008268:	af00      	add	r7, sp, #0
 800826a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	2b00      	cmp	r3, #0
 8008270:	d101      	bne.n	8008276 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8008272:	2301      	movs	r3, #1
 8008274:	e25b      	b.n	800872e <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	f003 0301 	and.w	r3, r3, #1
 800827e:	2b00      	cmp	r3, #0
 8008280:	d075      	beq.n	800836e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8008282:	4ba3      	ldr	r3, [pc, #652]	; (8008510 <HAL_RCC_OscConfig+0x2ac>)
 8008284:	689b      	ldr	r3, [r3, #8]
 8008286:	f003 030c 	and.w	r3, r3, #12
 800828a:	2b04      	cmp	r3, #4
 800828c:	d00c      	beq.n	80082a8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800828e:	4ba0      	ldr	r3, [pc, #640]	; (8008510 <HAL_RCC_OscConfig+0x2ac>)
 8008290:	689b      	ldr	r3, [r3, #8]
 8008292:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8008296:	2b08      	cmp	r3, #8
 8008298:	d112      	bne.n	80082c0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800829a:	4b9d      	ldr	r3, [pc, #628]	; (8008510 <HAL_RCC_OscConfig+0x2ac>)
 800829c:	685b      	ldr	r3, [r3, #4]
 800829e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80082a2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80082a6:	d10b      	bne.n	80082c0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80082a8:	4b99      	ldr	r3, [pc, #612]	; (8008510 <HAL_RCC_OscConfig+0x2ac>)
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	d05b      	beq.n	800836c <HAL_RCC_OscConfig+0x108>
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	685b      	ldr	r3, [r3, #4]
 80082b8:	2b00      	cmp	r3, #0
 80082ba:	d157      	bne.n	800836c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80082bc:	2301      	movs	r3, #1
 80082be:	e236      	b.n	800872e <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	685b      	ldr	r3, [r3, #4]
 80082c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80082c8:	d106      	bne.n	80082d8 <HAL_RCC_OscConfig+0x74>
 80082ca:	4b91      	ldr	r3, [pc, #580]	; (8008510 <HAL_RCC_OscConfig+0x2ac>)
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	4a90      	ldr	r2, [pc, #576]	; (8008510 <HAL_RCC_OscConfig+0x2ac>)
 80082d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80082d4:	6013      	str	r3, [r2, #0]
 80082d6:	e01d      	b.n	8008314 <HAL_RCC_OscConfig+0xb0>
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	685b      	ldr	r3, [r3, #4]
 80082dc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80082e0:	d10c      	bne.n	80082fc <HAL_RCC_OscConfig+0x98>
 80082e2:	4b8b      	ldr	r3, [pc, #556]	; (8008510 <HAL_RCC_OscConfig+0x2ac>)
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	4a8a      	ldr	r2, [pc, #552]	; (8008510 <HAL_RCC_OscConfig+0x2ac>)
 80082e8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80082ec:	6013      	str	r3, [r2, #0]
 80082ee:	4b88      	ldr	r3, [pc, #544]	; (8008510 <HAL_RCC_OscConfig+0x2ac>)
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	4a87      	ldr	r2, [pc, #540]	; (8008510 <HAL_RCC_OscConfig+0x2ac>)
 80082f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80082f8:	6013      	str	r3, [r2, #0]
 80082fa:	e00b      	b.n	8008314 <HAL_RCC_OscConfig+0xb0>
 80082fc:	4b84      	ldr	r3, [pc, #528]	; (8008510 <HAL_RCC_OscConfig+0x2ac>)
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	4a83      	ldr	r2, [pc, #524]	; (8008510 <HAL_RCC_OscConfig+0x2ac>)
 8008302:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008306:	6013      	str	r3, [r2, #0]
 8008308:	4b81      	ldr	r3, [pc, #516]	; (8008510 <HAL_RCC_OscConfig+0x2ac>)
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	4a80      	ldr	r2, [pc, #512]	; (8008510 <HAL_RCC_OscConfig+0x2ac>)
 800830e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008312:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	685b      	ldr	r3, [r3, #4]
 8008318:	2b00      	cmp	r3, #0
 800831a:	d013      	beq.n	8008344 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800831c:	f7fc ff9c 	bl	8005258 <HAL_GetTick>
 8008320:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008322:	e008      	b.n	8008336 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008324:	f7fc ff98 	bl	8005258 <HAL_GetTick>
 8008328:	4602      	mov	r2, r0
 800832a:	693b      	ldr	r3, [r7, #16]
 800832c:	1ad3      	subs	r3, r2, r3
 800832e:	2b64      	cmp	r3, #100	; 0x64
 8008330:	d901      	bls.n	8008336 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8008332:	2303      	movs	r3, #3
 8008334:	e1fb      	b.n	800872e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008336:	4b76      	ldr	r3, [pc, #472]	; (8008510 <HAL_RCC_OscConfig+0x2ac>)
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800833e:	2b00      	cmp	r3, #0
 8008340:	d0f0      	beq.n	8008324 <HAL_RCC_OscConfig+0xc0>
 8008342:	e014      	b.n	800836e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008344:	f7fc ff88 	bl	8005258 <HAL_GetTick>
 8008348:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800834a:	e008      	b.n	800835e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800834c:	f7fc ff84 	bl	8005258 <HAL_GetTick>
 8008350:	4602      	mov	r2, r0
 8008352:	693b      	ldr	r3, [r7, #16]
 8008354:	1ad3      	subs	r3, r2, r3
 8008356:	2b64      	cmp	r3, #100	; 0x64
 8008358:	d901      	bls.n	800835e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800835a:	2303      	movs	r3, #3
 800835c:	e1e7      	b.n	800872e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800835e:	4b6c      	ldr	r3, [pc, #432]	; (8008510 <HAL_RCC_OscConfig+0x2ac>)
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008366:	2b00      	cmp	r3, #0
 8008368:	d1f0      	bne.n	800834c <HAL_RCC_OscConfig+0xe8>
 800836a:	e000      	b.n	800836e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800836c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	f003 0302 	and.w	r3, r3, #2
 8008376:	2b00      	cmp	r3, #0
 8008378:	d063      	beq.n	8008442 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800837a:	4b65      	ldr	r3, [pc, #404]	; (8008510 <HAL_RCC_OscConfig+0x2ac>)
 800837c:	689b      	ldr	r3, [r3, #8]
 800837e:	f003 030c 	and.w	r3, r3, #12
 8008382:	2b00      	cmp	r3, #0
 8008384:	d00b      	beq.n	800839e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008386:	4b62      	ldr	r3, [pc, #392]	; (8008510 <HAL_RCC_OscConfig+0x2ac>)
 8008388:	689b      	ldr	r3, [r3, #8]
 800838a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800838e:	2b08      	cmp	r3, #8
 8008390:	d11c      	bne.n	80083cc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008392:	4b5f      	ldr	r3, [pc, #380]	; (8008510 <HAL_RCC_OscConfig+0x2ac>)
 8008394:	685b      	ldr	r3, [r3, #4]
 8008396:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800839a:	2b00      	cmp	r3, #0
 800839c:	d116      	bne.n	80083cc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800839e:	4b5c      	ldr	r3, [pc, #368]	; (8008510 <HAL_RCC_OscConfig+0x2ac>)
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	f003 0302 	and.w	r3, r3, #2
 80083a6:	2b00      	cmp	r3, #0
 80083a8:	d005      	beq.n	80083b6 <HAL_RCC_OscConfig+0x152>
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	68db      	ldr	r3, [r3, #12]
 80083ae:	2b01      	cmp	r3, #1
 80083b0:	d001      	beq.n	80083b6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80083b2:	2301      	movs	r3, #1
 80083b4:	e1bb      	b.n	800872e <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80083b6:	4b56      	ldr	r3, [pc, #344]	; (8008510 <HAL_RCC_OscConfig+0x2ac>)
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	691b      	ldr	r3, [r3, #16]
 80083c2:	00db      	lsls	r3, r3, #3
 80083c4:	4952      	ldr	r1, [pc, #328]	; (8008510 <HAL_RCC_OscConfig+0x2ac>)
 80083c6:	4313      	orrs	r3, r2
 80083c8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80083ca:	e03a      	b.n	8008442 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	68db      	ldr	r3, [r3, #12]
 80083d0:	2b00      	cmp	r3, #0
 80083d2:	d020      	beq.n	8008416 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80083d4:	4b4f      	ldr	r3, [pc, #316]	; (8008514 <HAL_RCC_OscConfig+0x2b0>)
 80083d6:	2201      	movs	r2, #1
 80083d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80083da:	f7fc ff3d 	bl	8005258 <HAL_GetTick>
 80083de:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80083e0:	e008      	b.n	80083f4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80083e2:	f7fc ff39 	bl	8005258 <HAL_GetTick>
 80083e6:	4602      	mov	r2, r0
 80083e8:	693b      	ldr	r3, [r7, #16]
 80083ea:	1ad3      	subs	r3, r2, r3
 80083ec:	2b02      	cmp	r3, #2
 80083ee:	d901      	bls.n	80083f4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80083f0:	2303      	movs	r3, #3
 80083f2:	e19c      	b.n	800872e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80083f4:	4b46      	ldr	r3, [pc, #280]	; (8008510 <HAL_RCC_OscConfig+0x2ac>)
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	f003 0302 	and.w	r3, r3, #2
 80083fc:	2b00      	cmp	r3, #0
 80083fe:	d0f0      	beq.n	80083e2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008400:	4b43      	ldr	r3, [pc, #268]	; (8008510 <HAL_RCC_OscConfig+0x2ac>)
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	691b      	ldr	r3, [r3, #16]
 800840c:	00db      	lsls	r3, r3, #3
 800840e:	4940      	ldr	r1, [pc, #256]	; (8008510 <HAL_RCC_OscConfig+0x2ac>)
 8008410:	4313      	orrs	r3, r2
 8008412:	600b      	str	r3, [r1, #0]
 8008414:	e015      	b.n	8008442 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008416:	4b3f      	ldr	r3, [pc, #252]	; (8008514 <HAL_RCC_OscConfig+0x2b0>)
 8008418:	2200      	movs	r2, #0
 800841a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800841c:	f7fc ff1c 	bl	8005258 <HAL_GetTick>
 8008420:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008422:	e008      	b.n	8008436 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008424:	f7fc ff18 	bl	8005258 <HAL_GetTick>
 8008428:	4602      	mov	r2, r0
 800842a:	693b      	ldr	r3, [r7, #16]
 800842c:	1ad3      	subs	r3, r2, r3
 800842e:	2b02      	cmp	r3, #2
 8008430:	d901      	bls.n	8008436 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8008432:	2303      	movs	r3, #3
 8008434:	e17b      	b.n	800872e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008436:	4b36      	ldr	r3, [pc, #216]	; (8008510 <HAL_RCC_OscConfig+0x2ac>)
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	f003 0302 	and.w	r3, r3, #2
 800843e:	2b00      	cmp	r3, #0
 8008440:	d1f0      	bne.n	8008424 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	f003 0308 	and.w	r3, r3, #8
 800844a:	2b00      	cmp	r3, #0
 800844c:	d030      	beq.n	80084b0 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	695b      	ldr	r3, [r3, #20]
 8008452:	2b00      	cmp	r3, #0
 8008454:	d016      	beq.n	8008484 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008456:	4b30      	ldr	r3, [pc, #192]	; (8008518 <HAL_RCC_OscConfig+0x2b4>)
 8008458:	2201      	movs	r2, #1
 800845a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800845c:	f7fc fefc 	bl	8005258 <HAL_GetTick>
 8008460:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008462:	e008      	b.n	8008476 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008464:	f7fc fef8 	bl	8005258 <HAL_GetTick>
 8008468:	4602      	mov	r2, r0
 800846a:	693b      	ldr	r3, [r7, #16]
 800846c:	1ad3      	subs	r3, r2, r3
 800846e:	2b02      	cmp	r3, #2
 8008470:	d901      	bls.n	8008476 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8008472:	2303      	movs	r3, #3
 8008474:	e15b      	b.n	800872e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008476:	4b26      	ldr	r3, [pc, #152]	; (8008510 <HAL_RCC_OscConfig+0x2ac>)
 8008478:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800847a:	f003 0302 	and.w	r3, r3, #2
 800847e:	2b00      	cmp	r3, #0
 8008480:	d0f0      	beq.n	8008464 <HAL_RCC_OscConfig+0x200>
 8008482:	e015      	b.n	80084b0 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008484:	4b24      	ldr	r3, [pc, #144]	; (8008518 <HAL_RCC_OscConfig+0x2b4>)
 8008486:	2200      	movs	r2, #0
 8008488:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800848a:	f7fc fee5 	bl	8005258 <HAL_GetTick>
 800848e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008490:	e008      	b.n	80084a4 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008492:	f7fc fee1 	bl	8005258 <HAL_GetTick>
 8008496:	4602      	mov	r2, r0
 8008498:	693b      	ldr	r3, [r7, #16]
 800849a:	1ad3      	subs	r3, r2, r3
 800849c:	2b02      	cmp	r3, #2
 800849e:	d901      	bls.n	80084a4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80084a0:	2303      	movs	r3, #3
 80084a2:	e144      	b.n	800872e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80084a4:	4b1a      	ldr	r3, [pc, #104]	; (8008510 <HAL_RCC_OscConfig+0x2ac>)
 80084a6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80084a8:	f003 0302 	and.w	r3, r3, #2
 80084ac:	2b00      	cmp	r3, #0
 80084ae:	d1f0      	bne.n	8008492 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	f003 0304 	and.w	r3, r3, #4
 80084b8:	2b00      	cmp	r3, #0
 80084ba:	f000 80a0 	beq.w	80085fe <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80084be:	2300      	movs	r3, #0
 80084c0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80084c2:	4b13      	ldr	r3, [pc, #76]	; (8008510 <HAL_RCC_OscConfig+0x2ac>)
 80084c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80084ca:	2b00      	cmp	r3, #0
 80084cc:	d10f      	bne.n	80084ee <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80084ce:	2300      	movs	r3, #0
 80084d0:	60bb      	str	r3, [r7, #8]
 80084d2:	4b0f      	ldr	r3, [pc, #60]	; (8008510 <HAL_RCC_OscConfig+0x2ac>)
 80084d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084d6:	4a0e      	ldr	r2, [pc, #56]	; (8008510 <HAL_RCC_OscConfig+0x2ac>)
 80084d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80084dc:	6413      	str	r3, [r2, #64]	; 0x40
 80084de:	4b0c      	ldr	r3, [pc, #48]	; (8008510 <HAL_RCC_OscConfig+0x2ac>)
 80084e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80084e6:	60bb      	str	r3, [r7, #8]
 80084e8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80084ea:	2301      	movs	r3, #1
 80084ec:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80084ee:	4b0b      	ldr	r3, [pc, #44]	; (800851c <HAL_RCC_OscConfig+0x2b8>)
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	d121      	bne.n	800853e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80084fa:	4b08      	ldr	r3, [pc, #32]	; (800851c <HAL_RCC_OscConfig+0x2b8>)
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	4a07      	ldr	r2, [pc, #28]	; (800851c <HAL_RCC_OscConfig+0x2b8>)
 8008500:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008504:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008506:	f7fc fea7 	bl	8005258 <HAL_GetTick>
 800850a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800850c:	e011      	b.n	8008532 <HAL_RCC_OscConfig+0x2ce>
 800850e:	bf00      	nop
 8008510:	40023800 	.word	0x40023800
 8008514:	42470000 	.word	0x42470000
 8008518:	42470e80 	.word	0x42470e80
 800851c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008520:	f7fc fe9a 	bl	8005258 <HAL_GetTick>
 8008524:	4602      	mov	r2, r0
 8008526:	693b      	ldr	r3, [r7, #16]
 8008528:	1ad3      	subs	r3, r2, r3
 800852a:	2b02      	cmp	r3, #2
 800852c:	d901      	bls.n	8008532 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800852e:	2303      	movs	r3, #3
 8008530:	e0fd      	b.n	800872e <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008532:	4b81      	ldr	r3, [pc, #516]	; (8008738 <HAL_RCC_OscConfig+0x4d4>)
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800853a:	2b00      	cmp	r3, #0
 800853c:	d0f0      	beq.n	8008520 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	689b      	ldr	r3, [r3, #8]
 8008542:	2b01      	cmp	r3, #1
 8008544:	d106      	bne.n	8008554 <HAL_RCC_OscConfig+0x2f0>
 8008546:	4b7d      	ldr	r3, [pc, #500]	; (800873c <HAL_RCC_OscConfig+0x4d8>)
 8008548:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800854a:	4a7c      	ldr	r2, [pc, #496]	; (800873c <HAL_RCC_OscConfig+0x4d8>)
 800854c:	f043 0301 	orr.w	r3, r3, #1
 8008550:	6713      	str	r3, [r2, #112]	; 0x70
 8008552:	e01c      	b.n	800858e <HAL_RCC_OscConfig+0x32a>
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	689b      	ldr	r3, [r3, #8]
 8008558:	2b05      	cmp	r3, #5
 800855a:	d10c      	bne.n	8008576 <HAL_RCC_OscConfig+0x312>
 800855c:	4b77      	ldr	r3, [pc, #476]	; (800873c <HAL_RCC_OscConfig+0x4d8>)
 800855e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008560:	4a76      	ldr	r2, [pc, #472]	; (800873c <HAL_RCC_OscConfig+0x4d8>)
 8008562:	f043 0304 	orr.w	r3, r3, #4
 8008566:	6713      	str	r3, [r2, #112]	; 0x70
 8008568:	4b74      	ldr	r3, [pc, #464]	; (800873c <HAL_RCC_OscConfig+0x4d8>)
 800856a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800856c:	4a73      	ldr	r2, [pc, #460]	; (800873c <HAL_RCC_OscConfig+0x4d8>)
 800856e:	f043 0301 	orr.w	r3, r3, #1
 8008572:	6713      	str	r3, [r2, #112]	; 0x70
 8008574:	e00b      	b.n	800858e <HAL_RCC_OscConfig+0x32a>
 8008576:	4b71      	ldr	r3, [pc, #452]	; (800873c <HAL_RCC_OscConfig+0x4d8>)
 8008578:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800857a:	4a70      	ldr	r2, [pc, #448]	; (800873c <HAL_RCC_OscConfig+0x4d8>)
 800857c:	f023 0301 	bic.w	r3, r3, #1
 8008580:	6713      	str	r3, [r2, #112]	; 0x70
 8008582:	4b6e      	ldr	r3, [pc, #440]	; (800873c <HAL_RCC_OscConfig+0x4d8>)
 8008584:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008586:	4a6d      	ldr	r2, [pc, #436]	; (800873c <HAL_RCC_OscConfig+0x4d8>)
 8008588:	f023 0304 	bic.w	r3, r3, #4
 800858c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	689b      	ldr	r3, [r3, #8]
 8008592:	2b00      	cmp	r3, #0
 8008594:	d015      	beq.n	80085c2 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008596:	f7fc fe5f 	bl	8005258 <HAL_GetTick>
 800859a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800859c:	e00a      	b.n	80085b4 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800859e:	f7fc fe5b 	bl	8005258 <HAL_GetTick>
 80085a2:	4602      	mov	r2, r0
 80085a4:	693b      	ldr	r3, [r7, #16]
 80085a6:	1ad3      	subs	r3, r2, r3
 80085a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80085ac:	4293      	cmp	r3, r2
 80085ae:	d901      	bls.n	80085b4 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80085b0:	2303      	movs	r3, #3
 80085b2:	e0bc      	b.n	800872e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80085b4:	4b61      	ldr	r3, [pc, #388]	; (800873c <HAL_RCC_OscConfig+0x4d8>)
 80085b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80085b8:	f003 0302 	and.w	r3, r3, #2
 80085bc:	2b00      	cmp	r3, #0
 80085be:	d0ee      	beq.n	800859e <HAL_RCC_OscConfig+0x33a>
 80085c0:	e014      	b.n	80085ec <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80085c2:	f7fc fe49 	bl	8005258 <HAL_GetTick>
 80085c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80085c8:	e00a      	b.n	80085e0 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80085ca:	f7fc fe45 	bl	8005258 <HAL_GetTick>
 80085ce:	4602      	mov	r2, r0
 80085d0:	693b      	ldr	r3, [r7, #16]
 80085d2:	1ad3      	subs	r3, r2, r3
 80085d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80085d8:	4293      	cmp	r3, r2
 80085da:	d901      	bls.n	80085e0 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80085dc:	2303      	movs	r3, #3
 80085de:	e0a6      	b.n	800872e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80085e0:	4b56      	ldr	r3, [pc, #344]	; (800873c <HAL_RCC_OscConfig+0x4d8>)
 80085e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80085e4:	f003 0302 	and.w	r3, r3, #2
 80085e8:	2b00      	cmp	r3, #0
 80085ea:	d1ee      	bne.n	80085ca <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80085ec:	7dfb      	ldrb	r3, [r7, #23]
 80085ee:	2b01      	cmp	r3, #1
 80085f0:	d105      	bne.n	80085fe <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80085f2:	4b52      	ldr	r3, [pc, #328]	; (800873c <HAL_RCC_OscConfig+0x4d8>)
 80085f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085f6:	4a51      	ldr	r2, [pc, #324]	; (800873c <HAL_RCC_OscConfig+0x4d8>)
 80085f8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80085fc:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	699b      	ldr	r3, [r3, #24]
 8008602:	2b00      	cmp	r3, #0
 8008604:	f000 8092 	beq.w	800872c <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8008608:	4b4c      	ldr	r3, [pc, #304]	; (800873c <HAL_RCC_OscConfig+0x4d8>)
 800860a:	689b      	ldr	r3, [r3, #8]
 800860c:	f003 030c 	and.w	r3, r3, #12
 8008610:	2b08      	cmp	r3, #8
 8008612:	d05c      	beq.n	80086ce <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	699b      	ldr	r3, [r3, #24]
 8008618:	2b02      	cmp	r3, #2
 800861a:	d141      	bne.n	80086a0 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800861c:	4b48      	ldr	r3, [pc, #288]	; (8008740 <HAL_RCC_OscConfig+0x4dc>)
 800861e:	2200      	movs	r2, #0
 8008620:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008622:	f7fc fe19 	bl	8005258 <HAL_GetTick>
 8008626:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008628:	e008      	b.n	800863c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800862a:	f7fc fe15 	bl	8005258 <HAL_GetTick>
 800862e:	4602      	mov	r2, r0
 8008630:	693b      	ldr	r3, [r7, #16]
 8008632:	1ad3      	subs	r3, r2, r3
 8008634:	2b02      	cmp	r3, #2
 8008636:	d901      	bls.n	800863c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8008638:	2303      	movs	r3, #3
 800863a:	e078      	b.n	800872e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800863c:	4b3f      	ldr	r3, [pc, #252]	; (800873c <HAL_RCC_OscConfig+0x4d8>)
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008644:	2b00      	cmp	r3, #0
 8008646:	d1f0      	bne.n	800862a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	69da      	ldr	r2, [r3, #28]
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	6a1b      	ldr	r3, [r3, #32]
 8008650:	431a      	orrs	r2, r3
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008656:	019b      	lsls	r3, r3, #6
 8008658:	431a      	orrs	r2, r3
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800865e:	085b      	lsrs	r3, r3, #1
 8008660:	3b01      	subs	r3, #1
 8008662:	041b      	lsls	r3, r3, #16
 8008664:	431a      	orrs	r2, r3
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800866a:	061b      	lsls	r3, r3, #24
 800866c:	4933      	ldr	r1, [pc, #204]	; (800873c <HAL_RCC_OscConfig+0x4d8>)
 800866e:	4313      	orrs	r3, r2
 8008670:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008672:	4b33      	ldr	r3, [pc, #204]	; (8008740 <HAL_RCC_OscConfig+0x4dc>)
 8008674:	2201      	movs	r2, #1
 8008676:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008678:	f7fc fdee 	bl	8005258 <HAL_GetTick>
 800867c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800867e:	e008      	b.n	8008692 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008680:	f7fc fdea 	bl	8005258 <HAL_GetTick>
 8008684:	4602      	mov	r2, r0
 8008686:	693b      	ldr	r3, [r7, #16]
 8008688:	1ad3      	subs	r3, r2, r3
 800868a:	2b02      	cmp	r3, #2
 800868c:	d901      	bls.n	8008692 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800868e:	2303      	movs	r3, #3
 8008690:	e04d      	b.n	800872e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008692:	4b2a      	ldr	r3, [pc, #168]	; (800873c <HAL_RCC_OscConfig+0x4d8>)
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800869a:	2b00      	cmp	r3, #0
 800869c:	d0f0      	beq.n	8008680 <HAL_RCC_OscConfig+0x41c>
 800869e:	e045      	b.n	800872c <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80086a0:	4b27      	ldr	r3, [pc, #156]	; (8008740 <HAL_RCC_OscConfig+0x4dc>)
 80086a2:	2200      	movs	r2, #0
 80086a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80086a6:	f7fc fdd7 	bl	8005258 <HAL_GetTick>
 80086aa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80086ac:	e008      	b.n	80086c0 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80086ae:	f7fc fdd3 	bl	8005258 <HAL_GetTick>
 80086b2:	4602      	mov	r2, r0
 80086b4:	693b      	ldr	r3, [r7, #16]
 80086b6:	1ad3      	subs	r3, r2, r3
 80086b8:	2b02      	cmp	r3, #2
 80086ba:	d901      	bls.n	80086c0 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80086bc:	2303      	movs	r3, #3
 80086be:	e036      	b.n	800872e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80086c0:	4b1e      	ldr	r3, [pc, #120]	; (800873c <HAL_RCC_OscConfig+0x4d8>)
 80086c2:	681b      	ldr	r3, [r3, #0]
 80086c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80086c8:	2b00      	cmp	r3, #0
 80086ca:	d1f0      	bne.n	80086ae <HAL_RCC_OscConfig+0x44a>
 80086cc:	e02e      	b.n	800872c <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	699b      	ldr	r3, [r3, #24]
 80086d2:	2b01      	cmp	r3, #1
 80086d4:	d101      	bne.n	80086da <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80086d6:	2301      	movs	r3, #1
 80086d8:	e029      	b.n	800872e <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80086da:	4b18      	ldr	r3, [pc, #96]	; (800873c <HAL_RCC_OscConfig+0x4d8>)
 80086dc:	689b      	ldr	r3, [r3, #8]
 80086de:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80086e0:	68fb      	ldr	r3, [r7, #12]
 80086e2:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	69db      	ldr	r3, [r3, #28]
 80086ea:	429a      	cmp	r2, r3
 80086ec:	d11c      	bne.n	8008728 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80086ee:	68fb      	ldr	r3, [r7, #12]
 80086f0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80086f8:	429a      	cmp	r2, r3
 80086fa:	d115      	bne.n	8008728 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80086fc:	68fa      	ldr	r2, [r7, #12]
 80086fe:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8008702:	4013      	ands	r3, r2
 8008704:	687a      	ldr	r2, [r7, #4]
 8008706:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8008708:	4293      	cmp	r3, r2
 800870a:	d10d      	bne.n	8008728 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800870c:	68fb      	ldr	r3, [r7, #12]
 800870e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8008716:	429a      	cmp	r2, r3
 8008718:	d106      	bne.n	8008728 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 800871a:	68fb      	ldr	r3, [r7, #12]
 800871c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8008724:	429a      	cmp	r2, r3
 8008726:	d001      	beq.n	800872c <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8008728:	2301      	movs	r3, #1
 800872a:	e000      	b.n	800872e <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 800872c:	2300      	movs	r3, #0
}
 800872e:	4618      	mov	r0, r3
 8008730:	3718      	adds	r7, #24
 8008732:	46bd      	mov	sp, r7
 8008734:	bd80      	pop	{r7, pc}
 8008736:	bf00      	nop
 8008738:	40007000 	.word	0x40007000
 800873c:	40023800 	.word	0x40023800
 8008740:	42470060 	.word	0x42470060

08008744 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008744:	b580      	push	{r7, lr}
 8008746:	b084      	sub	sp, #16
 8008748:	af00      	add	r7, sp, #0
 800874a:	6078      	str	r0, [r7, #4]
 800874c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	2b00      	cmp	r3, #0
 8008752:	d101      	bne.n	8008758 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008754:	2301      	movs	r3, #1
 8008756:	e0cc      	b.n	80088f2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8008758:	4b68      	ldr	r3, [pc, #416]	; (80088fc <HAL_RCC_ClockConfig+0x1b8>)
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	f003 030f 	and.w	r3, r3, #15
 8008760:	683a      	ldr	r2, [r7, #0]
 8008762:	429a      	cmp	r2, r3
 8008764:	d90c      	bls.n	8008780 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008766:	4b65      	ldr	r3, [pc, #404]	; (80088fc <HAL_RCC_ClockConfig+0x1b8>)
 8008768:	683a      	ldr	r2, [r7, #0]
 800876a:	b2d2      	uxtb	r2, r2
 800876c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800876e:	4b63      	ldr	r3, [pc, #396]	; (80088fc <HAL_RCC_ClockConfig+0x1b8>)
 8008770:	681b      	ldr	r3, [r3, #0]
 8008772:	f003 030f 	and.w	r3, r3, #15
 8008776:	683a      	ldr	r2, [r7, #0]
 8008778:	429a      	cmp	r2, r3
 800877a:	d001      	beq.n	8008780 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800877c:	2301      	movs	r3, #1
 800877e:	e0b8      	b.n	80088f2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	f003 0302 	and.w	r3, r3, #2
 8008788:	2b00      	cmp	r3, #0
 800878a:	d020      	beq.n	80087ce <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	f003 0304 	and.w	r3, r3, #4
 8008794:	2b00      	cmp	r3, #0
 8008796:	d005      	beq.n	80087a4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8008798:	4b59      	ldr	r3, [pc, #356]	; (8008900 <HAL_RCC_ClockConfig+0x1bc>)
 800879a:	689b      	ldr	r3, [r3, #8]
 800879c:	4a58      	ldr	r2, [pc, #352]	; (8008900 <HAL_RCC_ClockConfig+0x1bc>)
 800879e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80087a2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	f003 0308 	and.w	r3, r3, #8
 80087ac:	2b00      	cmp	r3, #0
 80087ae:	d005      	beq.n	80087bc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80087b0:	4b53      	ldr	r3, [pc, #332]	; (8008900 <HAL_RCC_ClockConfig+0x1bc>)
 80087b2:	689b      	ldr	r3, [r3, #8]
 80087b4:	4a52      	ldr	r2, [pc, #328]	; (8008900 <HAL_RCC_ClockConfig+0x1bc>)
 80087b6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80087ba:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80087bc:	4b50      	ldr	r3, [pc, #320]	; (8008900 <HAL_RCC_ClockConfig+0x1bc>)
 80087be:	689b      	ldr	r3, [r3, #8]
 80087c0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	689b      	ldr	r3, [r3, #8]
 80087c8:	494d      	ldr	r1, [pc, #308]	; (8008900 <HAL_RCC_ClockConfig+0x1bc>)
 80087ca:	4313      	orrs	r3, r2
 80087cc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	f003 0301 	and.w	r3, r3, #1
 80087d6:	2b00      	cmp	r3, #0
 80087d8:	d044      	beq.n	8008864 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	685b      	ldr	r3, [r3, #4]
 80087de:	2b01      	cmp	r3, #1
 80087e0:	d107      	bne.n	80087f2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80087e2:	4b47      	ldr	r3, [pc, #284]	; (8008900 <HAL_RCC_ClockConfig+0x1bc>)
 80087e4:	681b      	ldr	r3, [r3, #0]
 80087e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80087ea:	2b00      	cmp	r3, #0
 80087ec:	d119      	bne.n	8008822 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80087ee:	2301      	movs	r3, #1
 80087f0:	e07f      	b.n	80088f2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	685b      	ldr	r3, [r3, #4]
 80087f6:	2b02      	cmp	r3, #2
 80087f8:	d003      	beq.n	8008802 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80087fe:	2b03      	cmp	r3, #3
 8008800:	d107      	bne.n	8008812 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008802:	4b3f      	ldr	r3, [pc, #252]	; (8008900 <HAL_RCC_ClockConfig+0x1bc>)
 8008804:	681b      	ldr	r3, [r3, #0]
 8008806:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800880a:	2b00      	cmp	r3, #0
 800880c:	d109      	bne.n	8008822 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800880e:	2301      	movs	r3, #1
 8008810:	e06f      	b.n	80088f2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008812:	4b3b      	ldr	r3, [pc, #236]	; (8008900 <HAL_RCC_ClockConfig+0x1bc>)
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	f003 0302 	and.w	r3, r3, #2
 800881a:	2b00      	cmp	r3, #0
 800881c:	d101      	bne.n	8008822 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800881e:	2301      	movs	r3, #1
 8008820:	e067      	b.n	80088f2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8008822:	4b37      	ldr	r3, [pc, #220]	; (8008900 <HAL_RCC_ClockConfig+0x1bc>)
 8008824:	689b      	ldr	r3, [r3, #8]
 8008826:	f023 0203 	bic.w	r2, r3, #3
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	685b      	ldr	r3, [r3, #4]
 800882e:	4934      	ldr	r1, [pc, #208]	; (8008900 <HAL_RCC_ClockConfig+0x1bc>)
 8008830:	4313      	orrs	r3, r2
 8008832:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8008834:	f7fc fd10 	bl	8005258 <HAL_GetTick>
 8008838:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800883a:	e00a      	b.n	8008852 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800883c:	f7fc fd0c 	bl	8005258 <HAL_GetTick>
 8008840:	4602      	mov	r2, r0
 8008842:	68fb      	ldr	r3, [r7, #12]
 8008844:	1ad3      	subs	r3, r2, r3
 8008846:	f241 3288 	movw	r2, #5000	; 0x1388
 800884a:	4293      	cmp	r3, r2
 800884c:	d901      	bls.n	8008852 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800884e:	2303      	movs	r3, #3
 8008850:	e04f      	b.n	80088f2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008852:	4b2b      	ldr	r3, [pc, #172]	; (8008900 <HAL_RCC_ClockConfig+0x1bc>)
 8008854:	689b      	ldr	r3, [r3, #8]
 8008856:	f003 020c 	and.w	r2, r3, #12
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	685b      	ldr	r3, [r3, #4]
 800885e:	009b      	lsls	r3, r3, #2
 8008860:	429a      	cmp	r2, r3
 8008862:	d1eb      	bne.n	800883c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8008864:	4b25      	ldr	r3, [pc, #148]	; (80088fc <HAL_RCC_ClockConfig+0x1b8>)
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	f003 030f 	and.w	r3, r3, #15
 800886c:	683a      	ldr	r2, [r7, #0]
 800886e:	429a      	cmp	r2, r3
 8008870:	d20c      	bcs.n	800888c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008872:	4b22      	ldr	r3, [pc, #136]	; (80088fc <HAL_RCC_ClockConfig+0x1b8>)
 8008874:	683a      	ldr	r2, [r7, #0]
 8008876:	b2d2      	uxtb	r2, r2
 8008878:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800887a:	4b20      	ldr	r3, [pc, #128]	; (80088fc <HAL_RCC_ClockConfig+0x1b8>)
 800887c:	681b      	ldr	r3, [r3, #0]
 800887e:	f003 030f 	and.w	r3, r3, #15
 8008882:	683a      	ldr	r2, [r7, #0]
 8008884:	429a      	cmp	r2, r3
 8008886:	d001      	beq.n	800888c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8008888:	2301      	movs	r3, #1
 800888a:	e032      	b.n	80088f2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	f003 0304 	and.w	r3, r3, #4
 8008894:	2b00      	cmp	r3, #0
 8008896:	d008      	beq.n	80088aa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008898:	4b19      	ldr	r3, [pc, #100]	; (8008900 <HAL_RCC_ClockConfig+0x1bc>)
 800889a:	689b      	ldr	r3, [r3, #8]
 800889c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	68db      	ldr	r3, [r3, #12]
 80088a4:	4916      	ldr	r1, [pc, #88]	; (8008900 <HAL_RCC_ClockConfig+0x1bc>)
 80088a6:	4313      	orrs	r3, r2
 80088a8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	f003 0308 	and.w	r3, r3, #8
 80088b2:	2b00      	cmp	r3, #0
 80088b4:	d009      	beq.n	80088ca <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80088b6:	4b12      	ldr	r3, [pc, #72]	; (8008900 <HAL_RCC_ClockConfig+0x1bc>)
 80088b8:	689b      	ldr	r3, [r3, #8]
 80088ba:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	691b      	ldr	r3, [r3, #16]
 80088c2:	00db      	lsls	r3, r3, #3
 80088c4:	490e      	ldr	r1, [pc, #56]	; (8008900 <HAL_RCC_ClockConfig+0x1bc>)
 80088c6:	4313      	orrs	r3, r2
 80088c8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80088ca:	f000 f821 	bl	8008910 <HAL_RCC_GetSysClockFreq>
 80088ce:	4601      	mov	r1, r0
 80088d0:	4b0b      	ldr	r3, [pc, #44]	; (8008900 <HAL_RCC_ClockConfig+0x1bc>)
 80088d2:	689b      	ldr	r3, [r3, #8]
 80088d4:	091b      	lsrs	r3, r3, #4
 80088d6:	f003 030f 	and.w	r3, r3, #15
 80088da:	4a0a      	ldr	r2, [pc, #40]	; (8008904 <HAL_RCC_ClockConfig+0x1c0>)
 80088dc:	5cd3      	ldrb	r3, [r2, r3]
 80088de:	fa21 f303 	lsr.w	r3, r1, r3
 80088e2:	4a09      	ldr	r2, [pc, #36]	; (8008908 <HAL_RCC_ClockConfig+0x1c4>)
 80088e4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80088e6:	4b09      	ldr	r3, [pc, #36]	; (800890c <HAL_RCC_ClockConfig+0x1c8>)
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	4618      	mov	r0, r3
 80088ec:	f7fc fc70 	bl	80051d0 <HAL_InitTick>

  return HAL_OK;
 80088f0:	2300      	movs	r3, #0
}
 80088f2:	4618      	mov	r0, r3
 80088f4:	3710      	adds	r7, #16
 80088f6:	46bd      	mov	sp, r7
 80088f8:	bd80      	pop	{r7, pc}
 80088fa:	bf00      	nop
 80088fc:	40023c00 	.word	0x40023c00
 8008900:	40023800 	.word	0x40023800
 8008904:	08015cd4 	.word	0x08015cd4
 8008908:	20000004 	.word	0x20000004
 800890c:	20000008 	.word	0x20000008

08008910 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008910:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008912:	b085      	sub	sp, #20
 8008914:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8008916:	2300      	movs	r3, #0
 8008918:	607b      	str	r3, [r7, #4]
 800891a:	2300      	movs	r3, #0
 800891c:	60fb      	str	r3, [r7, #12]
 800891e:	2300      	movs	r3, #0
 8008920:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8008922:	2300      	movs	r3, #0
 8008924:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008926:	4b50      	ldr	r3, [pc, #320]	; (8008a68 <HAL_RCC_GetSysClockFreq+0x158>)
 8008928:	689b      	ldr	r3, [r3, #8]
 800892a:	f003 030c 	and.w	r3, r3, #12
 800892e:	2b04      	cmp	r3, #4
 8008930:	d007      	beq.n	8008942 <HAL_RCC_GetSysClockFreq+0x32>
 8008932:	2b08      	cmp	r3, #8
 8008934:	d008      	beq.n	8008948 <HAL_RCC_GetSysClockFreq+0x38>
 8008936:	2b00      	cmp	r3, #0
 8008938:	f040 808d 	bne.w	8008a56 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800893c:	4b4b      	ldr	r3, [pc, #300]	; (8008a6c <HAL_RCC_GetSysClockFreq+0x15c>)
 800893e:	60bb      	str	r3, [r7, #8]
       break;
 8008940:	e08c      	b.n	8008a5c <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8008942:	4b4b      	ldr	r3, [pc, #300]	; (8008a70 <HAL_RCC_GetSysClockFreq+0x160>)
 8008944:	60bb      	str	r3, [r7, #8]
      break;
 8008946:	e089      	b.n	8008a5c <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8008948:	4b47      	ldr	r3, [pc, #284]	; (8008a68 <HAL_RCC_GetSysClockFreq+0x158>)
 800894a:	685b      	ldr	r3, [r3, #4]
 800894c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008950:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8008952:	4b45      	ldr	r3, [pc, #276]	; (8008a68 <HAL_RCC_GetSysClockFreq+0x158>)
 8008954:	685b      	ldr	r3, [r3, #4]
 8008956:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800895a:	2b00      	cmp	r3, #0
 800895c:	d023      	beq.n	80089a6 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800895e:	4b42      	ldr	r3, [pc, #264]	; (8008a68 <HAL_RCC_GetSysClockFreq+0x158>)
 8008960:	685b      	ldr	r3, [r3, #4]
 8008962:	099b      	lsrs	r3, r3, #6
 8008964:	f04f 0400 	mov.w	r4, #0
 8008968:	f240 11ff 	movw	r1, #511	; 0x1ff
 800896c:	f04f 0200 	mov.w	r2, #0
 8008970:	ea03 0501 	and.w	r5, r3, r1
 8008974:	ea04 0602 	and.w	r6, r4, r2
 8008978:	4a3d      	ldr	r2, [pc, #244]	; (8008a70 <HAL_RCC_GetSysClockFreq+0x160>)
 800897a:	fb02 f106 	mul.w	r1, r2, r6
 800897e:	2200      	movs	r2, #0
 8008980:	fb02 f205 	mul.w	r2, r2, r5
 8008984:	440a      	add	r2, r1
 8008986:	493a      	ldr	r1, [pc, #232]	; (8008a70 <HAL_RCC_GetSysClockFreq+0x160>)
 8008988:	fba5 0101 	umull	r0, r1, r5, r1
 800898c:	1853      	adds	r3, r2, r1
 800898e:	4619      	mov	r1, r3
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	f04f 0400 	mov.w	r4, #0
 8008996:	461a      	mov	r2, r3
 8008998:	4623      	mov	r3, r4
 800899a:	f7f8 f975 	bl	8000c88 <__aeabi_uldivmod>
 800899e:	4603      	mov	r3, r0
 80089a0:	460c      	mov	r4, r1
 80089a2:	60fb      	str	r3, [r7, #12]
 80089a4:	e049      	b.n	8008a3a <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80089a6:	4b30      	ldr	r3, [pc, #192]	; (8008a68 <HAL_RCC_GetSysClockFreq+0x158>)
 80089a8:	685b      	ldr	r3, [r3, #4]
 80089aa:	099b      	lsrs	r3, r3, #6
 80089ac:	f04f 0400 	mov.w	r4, #0
 80089b0:	f240 11ff 	movw	r1, #511	; 0x1ff
 80089b4:	f04f 0200 	mov.w	r2, #0
 80089b8:	ea03 0501 	and.w	r5, r3, r1
 80089bc:	ea04 0602 	and.w	r6, r4, r2
 80089c0:	4629      	mov	r1, r5
 80089c2:	4632      	mov	r2, r6
 80089c4:	f04f 0300 	mov.w	r3, #0
 80089c8:	f04f 0400 	mov.w	r4, #0
 80089cc:	0154      	lsls	r4, r2, #5
 80089ce:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80089d2:	014b      	lsls	r3, r1, #5
 80089d4:	4619      	mov	r1, r3
 80089d6:	4622      	mov	r2, r4
 80089d8:	1b49      	subs	r1, r1, r5
 80089da:	eb62 0206 	sbc.w	r2, r2, r6
 80089de:	f04f 0300 	mov.w	r3, #0
 80089e2:	f04f 0400 	mov.w	r4, #0
 80089e6:	0194      	lsls	r4, r2, #6
 80089e8:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80089ec:	018b      	lsls	r3, r1, #6
 80089ee:	1a5b      	subs	r3, r3, r1
 80089f0:	eb64 0402 	sbc.w	r4, r4, r2
 80089f4:	f04f 0100 	mov.w	r1, #0
 80089f8:	f04f 0200 	mov.w	r2, #0
 80089fc:	00e2      	lsls	r2, r4, #3
 80089fe:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8008a02:	00d9      	lsls	r1, r3, #3
 8008a04:	460b      	mov	r3, r1
 8008a06:	4614      	mov	r4, r2
 8008a08:	195b      	adds	r3, r3, r5
 8008a0a:	eb44 0406 	adc.w	r4, r4, r6
 8008a0e:	f04f 0100 	mov.w	r1, #0
 8008a12:	f04f 0200 	mov.w	r2, #0
 8008a16:	02a2      	lsls	r2, r4, #10
 8008a18:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8008a1c:	0299      	lsls	r1, r3, #10
 8008a1e:	460b      	mov	r3, r1
 8008a20:	4614      	mov	r4, r2
 8008a22:	4618      	mov	r0, r3
 8008a24:	4621      	mov	r1, r4
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	f04f 0400 	mov.w	r4, #0
 8008a2c:	461a      	mov	r2, r3
 8008a2e:	4623      	mov	r3, r4
 8008a30:	f7f8 f92a 	bl	8000c88 <__aeabi_uldivmod>
 8008a34:	4603      	mov	r3, r0
 8008a36:	460c      	mov	r4, r1
 8008a38:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8008a3a:	4b0b      	ldr	r3, [pc, #44]	; (8008a68 <HAL_RCC_GetSysClockFreq+0x158>)
 8008a3c:	685b      	ldr	r3, [r3, #4]
 8008a3e:	0c1b      	lsrs	r3, r3, #16
 8008a40:	f003 0303 	and.w	r3, r3, #3
 8008a44:	3301      	adds	r3, #1
 8008a46:	005b      	lsls	r3, r3, #1
 8008a48:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8008a4a:	68fa      	ldr	r2, [r7, #12]
 8008a4c:	683b      	ldr	r3, [r7, #0]
 8008a4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008a52:	60bb      	str	r3, [r7, #8]
      break;
 8008a54:	e002      	b.n	8008a5c <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8008a56:	4b05      	ldr	r3, [pc, #20]	; (8008a6c <HAL_RCC_GetSysClockFreq+0x15c>)
 8008a58:	60bb      	str	r3, [r7, #8]
      break;
 8008a5a:	bf00      	nop
    }
  }
  return sysclockfreq;
 8008a5c:	68bb      	ldr	r3, [r7, #8]
}
 8008a5e:	4618      	mov	r0, r3
 8008a60:	3714      	adds	r7, #20
 8008a62:	46bd      	mov	sp, r7
 8008a64:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008a66:	bf00      	nop
 8008a68:	40023800 	.word	0x40023800
 8008a6c:	00f42400 	.word	0x00f42400
 8008a70:	00b71b00 	.word	0x00b71b00

08008a74 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008a74:	b480      	push	{r7}
 8008a76:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008a78:	4b03      	ldr	r3, [pc, #12]	; (8008a88 <HAL_RCC_GetHCLKFreq+0x14>)
 8008a7a:	681b      	ldr	r3, [r3, #0]
}
 8008a7c:	4618      	mov	r0, r3
 8008a7e:	46bd      	mov	sp, r7
 8008a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a84:	4770      	bx	lr
 8008a86:	bf00      	nop
 8008a88:	20000004 	.word	0x20000004

08008a8c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008a8c:	b580      	push	{r7, lr}
 8008a8e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8008a90:	f7ff fff0 	bl	8008a74 <HAL_RCC_GetHCLKFreq>
 8008a94:	4601      	mov	r1, r0
 8008a96:	4b05      	ldr	r3, [pc, #20]	; (8008aac <HAL_RCC_GetPCLK1Freq+0x20>)
 8008a98:	689b      	ldr	r3, [r3, #8]
 8008a9a:	0a9b      	lsrs	r3, r3, #10
 8008a9c:	f003 0307 	and.w	r3, r3, #7
 8008aa0:	4a03      	ldr	r2, [pc, #12]	; (8008ab0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008aa2:	5cd3      	ldrb	r3, [r2, r3]
 8008aa4:	fa21 f303 	lsr.w	r3, r1, r3
}
 8008aa8:	4618      	mov	r0, r3
 8008aaa:	bd80      	pop	{r7, pc}
 8008aac:	40023800 	.word	0x40023800
 8008ab0:	08015ce4 	.word	0x08015ce4

08008ab4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008ab4:	b580      	push	{r7, lr}
 8008ab6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8008ab8:	f7ff ffdc 	bl	8008a74 <HAL_RCC_GetHCLKFreq>
 8008abc:	4601      	mov	r1, r0
 8008abe:	4b05      	ldr	r3, [pc, #20]	; (8008ad4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8008ac0:	689b      	ldr	r3, [r3, #8]
 8008ac2:	0b5b      	lsrs	r3, r3, #13
 8008ac4:	f003 0307 	and.w	r3, r3, #7
 8008ac8:	4a03      	ldr	r2, [pc, #12]	; (8008ad8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008aca:	5cd3      	ldrb	r3, [r2, r3]
 8008acc:	fa21 f303 	lsr.w	r3, r1, r3
}
 8008ad0:	4618      	mov	r0, r3
 8008ad2:	bd80      	pop	{r7, pc}
 8008ad4:	40023800 	.word	0x40023800
 8008ad8:	08015ce4 	.word	0x08015ce4

08008adc <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008adc:	b580      	push	{r7, lr}
 8008ade:	b086      	sub	sp, #24
 8008ae0:	af00      	add	r7, sp, #0
 8008ae2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8008ae4:	2300      	movs	r3, #0
 8008ae6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8008ae8:	2300      	movs	r3, #0
 8008aea:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	681b      	ldr	r3, [r3, #0]
 8008af0:	f003 0301 	and.w	r3, r3, #1
 8008af4:	2b00      	cmp	r3, #0
 8008af6:	d105      	bne.n	8008b04 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	681b      	ldr	r3, [r3, #0]
 8008afc:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8008b00:	2b00      	cmp	r3, #0
 8008b02:	d035      	beq.n	8008b70 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8008b04:	4b62      	ldr	r3, [pc, #392]	; (8008c90 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8008b06:	2200      	movs	r2, #0
 8008b08:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8008b0a:	f7fc fba5 	bl	8005258 <HAL_GetTick>
 8008b0e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8008b10:	e008      	b.n	8008b24 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8008b12:	f7fc fba1 	bl	8005258 <HAL_GetTick>
 8008b16:	4602      	mov	r2, r0
 8008b18:	697b      	ldr	r3, [r7, #20]
 8008b1a:	1ad3      	subs	r3, r2, r3
 8008b1c:	2b02      	cmp	r3, #2
 8008b1e:	d901      	bls.n	8008b24 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008b20:	2303      	movs	r3, #3
 8008b22:	e0b0      	b.n	8008c86 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8008b24:	4b5b      	ldr	r3, [pc, #364]	; (8008c94 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8008b26:	681b      	ldr	r3, [r3, #0]
 8008b28:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008b2c:	2b00      	cmp	r3, #0
 8008b2e:	d1f0      	bne.n	8008b12 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	685b      	ldr	r3, [r3, #4]
 8008b34:	019a      	lsls	r2, r3, #6
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	689b      	ldr	r3, [r3, #8]
 8008b3a:	071b      	lsls	r3, r3, #28
 8008b3c:	4955      	ldr	r1, [pc, #340]	; (8008c94 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8008b3e:	4313      	orrs	r3, r2
 8008b40:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8008b44:	4b52      	ldr	r3, [pc, #328]	; (8008c90 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8008b46:	2201      	movs	r2, #1
 8008b48:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8008b4a:	f7fc fb85 	bl	8005258 <HAL_GetTick>
 8008b4e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8008b50:	e008      	b.n	8008b64 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8008b52:	f7fc fb81 	bl	8005258 <HAL_GetTick>
 8008b56:	4602      	mov	r2, r0
 8008b58:	697b      	ldr	r3, [r7, #20]
 8008b5a:	1ad3      	subs	r3, r2, r3
 8008b5c:	2b02      	cmp	r3, #2
 8008b5e:	d901      	bls.n	8008b64 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008b60:	2303      	movs	r3, #3
 8008b62:	e090      	b.n	8008c86 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8008b64:	4b4b      	ldr	r3, [pc, #300]	; (8008c94 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008b6c:	2b00      	cmp	r3, #0
 8008b6e:	d0f0      	beq.n	8008b52 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	f003 0302 	and.w	r3, r3, #2
 8008b78:	2b00      	cmp	r3, #0
 8008b7a:	f000 8083 	beq.w	8008c84 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8008b7e:	2300      	movs	r3, #0
 8008b80:	60fb      	str	r3, [r7, #12]
 8008b82:	4b44      	ldr	r3, [pc, #272]	; (8008c94 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8008b84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b86:	4a43      	ldr	r2, [pc, #268]	; (8008c94 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8008b88:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008b8c:	6413      	str	r3, [r2, #64]	; 0x40
 8008b8e:	4b41      	ldr	r3, [pc, #260]	; (8008c94 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8008b90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008b96:	60fb      	str	r3, [r7, #12]
 8008b98:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8008b9a:	4b3f      	ldr	r3, [pc, #252]	; (8008c98 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8008b9c:	681b      	ldr	r3, [r3, #0]
 8008b9e:	4a3e      	ldr	r2, [pc, #248]	; (8008c98 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8008ba0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008ba4:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8008ba6:	f7fc fb57 	bl	8005258 <HAL_GetTick>
 8008baa:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8008bac:	e008      	b.n	8008bc0 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8008bae:	f7fc fb53 	bl	8005258 <HAL_GetTick>
 8008bb2:	4602      	mov	r2, r0
 8008bb4:	697b      	ldr	r3, [r7, #20]
 8008bb6:	1ad3      	subs	r3, r2, r3
 8008bb8:	2b02      	cmp	r3, #2
 8008bba:	d901      	bls.n	8008bc0 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8008bbc:	2303      	movs	r3, #3
 8008bbe:	e062      	b.n	8008c86 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8008bc0:	4b35      	ldr	r3, [pc, #212]	; (8008c98 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8008bc2:	681b      	ldr	r3, [r3, #0]
 8008bc4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008bc8:	2b00      	cmp	r3, #0
 8008bca:	d0f0      	beq.n	8008bae <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8008bcc:	4b31      	ldr	r3, [pc, #196]	; (8008c94 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8008bce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008bd0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008bd4:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8008bd6:	693b      	ldr	r3, [r7, #16]
 8008bd8:	2b00      	cmp	r3, #0
 8008bda:	d02f      	beq.n	8008c3c <HAL_RCCEx_PeriphCLKConfig+0x160>
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	68db      	ldr	r3, [r3, #12]
 8008be0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008be4:	693a      	ldr	r2, [r7, #16]
 8008be6:	429a      	cmp	r2, r3
 8008be8:	d028      	beq.n	8008c3c <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8008bea:	4b2a      	ldr	r3, [pc, #168]	; (8008c94 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8008bec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008bee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008bf2:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8008bf4:	4b29      	ldr	r3, [pc, #164]	; (8008c9c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8008bf6:	2201      	movs	r2, #1
 8008bf8:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8008bfa:	4b28      	ldr	r3, [pc, #160]	; (8008c9c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8008bfc:	2200      	movs	r2, #0
 8008bfe:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8008c00:	4a24      	ldr	r2, [pc, #144]	; (8008c94 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8008c02:	693b      	ldr	r3, [r7, #16]
 8008c04:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8008c06:	4b23      	ldr	r3, [pc, #140]	; (8008c94 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8008c08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008c0a:	f003 0301 	and.w	r3, r3, #1
 8008c0e:	2b01      	cmp	r3, #1
 8008c10:	d114      	bne.n	8008c3c <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8008c12:	f7fc fb21 	bl	8005258 <HAL_GetTick>
 8008c16:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008c18:	e00a      	b.n	8008c30 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008c1a:	f7fc fb1d 	bl	8005258 <HAL_GetTick>
 8008c1e:	4602      	mov	r2, r0
 8008c20:	697b      	ldr	r3, [r7, #20]
 8008c22:	1ad3      	subs	r3, r2, r3
 8008c24:	f241 3288 	movw	r2, #5000	; 0x1388
 8008c28:	4293      	cmp	r3, r2
 8008c2a:	d901      	bls.n	8008c30 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8008c2c:	2303      	movs	r3, #3
 8008c2e:	e02a      	b.n	8008c86 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008c30:	4b18      	ldr	r3, [pc, #96]	; (8008c94 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8008c32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008c34:	f003 0302 	and.w	r3, r3, #2
 8008c38:	2b00      	cmp	r3, #0
 8008c3a:	d0ee      	beq.n	8008c1a <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	68db      	ldr	r3, [r3, #12]
 8008c40:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008c44:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008c48:	d10d      	bne.n	8008c66 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8008c4a:	4b12      	ldr	r3, [pc, #72]	; (8008c94 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8008c4c:	689b      	ldr	r3, [r3, #8]
 8008c4e:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	68db      	ldr	r3, [r3, #12]
 8008c56:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8008c5a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008c5e:	490d      	ldr	r1, [pc, #52]	; (8008c94 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8008c60:	4313      	orrs	r3, r2
 8008c62:	608b      	str	r3, [r1, #8]
 8008c64:	e005      	b.n	8008c72 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8008c66:	4b0b      	ldr	r3, [pc, #44]	; (8008c94 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8008c68:	689b      	ldr	r3, [r3, #8]
 8008c6a:	4a0a      	ldr	r2, [pc, #40]	; (8008c94 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8008c6c:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8008c70:	6093      	str	r3, [r2, #8]
 8008c72:	4b08      	ldr	r3, [pc, #32]	; (8008c94 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8008c74:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	68db      	ldr	r3, [r3, #12]
 8008c7a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008c7e:	4905      	ldr	r1, [pc, #20]	; (8008c94 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8008c80:	4313      	orrs	r3, r2
 8008c82:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8008c84:	2300      	movs	r3, #0
}
 8008c86:	4618      	mov	r0, r3
 8008c88:	3718      	adds	r7, #24
 8008c8a:	46bd      	mov	sp, r7
 8008c8c:	bd80      	pop	{r7, pc}
 8008c8e:	bf00      	nop
 8008c90:	42470068 	.word	0x42470068
 8008c94:	40023800 	.word	0x40023800
 8008c98:	40007000 	.word	0x40007000
 8008c9c:	42470e40 	.word	0x42470e40

08008ca0 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8008ca0:	b580      	push	{r7, lr}
 8008ca2:	b082      	sub	sp, #8
 8008ca4:	af00      	add	r7, sp, #0
 8008ca6:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	2b00      	cmp	r3, #0
 8008cac:	d101      	bne.n	8008cb2 <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 8008cae:	2301      	movs	r3, #1
 8008cb0:	e083      	b.n	8008dba <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	7f5b      	ldrb	r3, [r3, #29]
 8008cb6:	b2db      	uxtb	r3, r3
 8008cb8:	2b00      	cmp	r3, #0
 8008cba:	d105      	bne.n	8008cc8 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	2200      	movs	r2, #0
 8008cc0:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8008cc2:	6878      	ldr	r0, [r7, #4]
 8008cc4:	f7fb fe94 	bl	80049f0 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	2202      	movs	r2, #2
 8008ccc:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	681b      	ldr	r3, [r3, #0]
 8008cd2:	22ca      	movs	r2, #202	; 0xca
 8008cd4:	625a      	str	r2, [r3, #36]	; 0x24
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	681b      	ldr	r3, [r3, #0]
 8008cda:	2253      	movs	r2, #83	; 0x53
 8008cdc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8008cde:	6878      	ldr	r0, [r7, #4]
 8008ce0:	f000 f897 	bl	8008e12 <RTC_EnterInitMode>
 8008ce4:	4603      	mov	r3, r0
 8008ce6:	2b00      	cmp	r3, #0
 8008ce8:	d008      	beq.n	8008cfc <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	681b      	ldr	r3, [r3, #0]
 8008cee:	22ff      	movs	r2, #255	; 0xff
 8008cf0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	2204      	movs	r2, #4
 8008cf6:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8008cf8:	2301      	movs	r3, #1
 8008cfa:	e05e      	b.n	8008dba <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	681b      	ldr	r3, [r3, #0]
 8008d00:	689b      	ldr	r3, [r3, #8]
 8008d02:	687a      	ldr	r2, [r7, #4]
 8008d04:	6812      	ldr	r2, [r2, #0]
 8008d06:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8008d0a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008d0e:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	681b      	ldr	r3, [r3, #0]
 8008d14:	6899      	ldr	r1, [r3, #8]
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	685a      	ldr	r2, [r3, #4]
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	691b      	ldr	r3, [r3, #16]
 8008d1e:	431a      	orrs	r2, r3
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	695b      	ldr	r3, [r3, #20]
 8008d24:	431a      	orrs	r2, r3
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	681b      	ldr	r3, [r3, #0]
 8008d2a:	430a      	orrs	r2, r1
 8008d2c:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	681b      	ldr	r3, [r3, #0]
 8008d32:	687a      	ldr	r2, [r7, #4]
 8008d34:	68d2      	ldr	r2, [r2, #12]
 8008d36:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	681b      	ldr	r3, [r3, #0]
 8008d3c:	6919      	ldr	r1, [r3, #16]
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	689b      	ldr	r3, [r3, #8]
 8008d42:	041a      	lsls	r2, r3, #16
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	681b      	ldr	r3, [r3, #0]
 8008d48:	430a      	orrs	r2, r1
 8008d4a:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	681b      	ldr	r3, [r3, #0]
 8008d50:	68da      	ldr	r2, [r3, #12]
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	681b      	ldr	r3, [r3, #0]
 8008d56:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008d5a:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	681b      	ldr	r3, [r3, #0]
 8008d60:	689b      	ldr	r3, [r3, #8]
 8008d62:	f003 0320 	and.w	r3, r3, #32
 8008d66:	2b00      	cmp	r3, #0
 8008d68:	d10e      	bne.n	8008d88 <HAL_RTC_Init+0xe8>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8008d6a:	6878      	ldr	r0, [r7, #4]
 8008d6c:	f000 f829 	bl	8008dc2 <HAL_RTC_WaitForSynchro>
 8008d70:	4603      	mov	r3, r0
 8008d72:	2b00      	cmp	r3, #0
 8008d74:	d008      	beq.n	8008d88 <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	681b      	ldr	r3, [r3, #0]
 8008d7a:	22ff      	movs	r2, #255	; 0xff
 8008d7c:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	2204      	movs	r2, #4
 8008d82:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 8008d84:	2301      	movs	r3, #1
 8008d86:	e018      	b.n	8008dba <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	681b      	ldr	r3, [r3, #0]
 8008d8c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	681b      	ldr	r3, [r3, #0]
 8008d92:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8008d96:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	681b      	ldr	r3, [r3, #0]
 8008d9c:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	699a      	ldr	r2, [r3, #24]
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	681b      	ldr	r3, [r3, #0]
 8008da6:	430a      	orrs	r2, r1
 8008da8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	681b      	ldr	r3, [r3, #0]
 8008dae:	22ff      	movs	r2, #255	; 0xff
 8008db0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	2201      	movs	r2, #1
 8008db6:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8008db8:	2300      	movs	r3, #0
  }
}
 8008dba:	4618      	mov	r0, r3
 8008dbc:	3708      	adds	r7, #8
 8008dbe:	46bd      	mov	sp, r7
 8008dc0:	bd80      	pop	{r7, pc}

08008dc2 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8008dc2:	b580      	push	{r7, lr}
 8008dc4:	b084      	sub	sp, #16
 8008dc6:	af00      	add	r7, sp, #0
 8008dc8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8008dca:	2300      	movs	r3, #0
 8008dcc:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	681b      	ldr	r3, [r3, #0]
 8008dd2:	68da      	ldr	r2, [r3, #12]
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	681b      	ldr	r3, [r3, #0]
 8008dd8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8008ddc:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8008dde:	f7fc fa3b 	bl	8005258 <HAL_GetTick>
 8008de2:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8008de4:	e009      	b.n	8008dfa <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8008de6:	f7fc fa37 	bl	8005258 <HAL_GetTick>
 8008dea:	4602      	mov	r2, r0
 8008dec:	68fb      	ldr	r3, [r7, #12]
 8008dee:	1ad3      	subs	r3, r2, r3
 8008df0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008df4:	d901      	bls.n	8008dfa <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8008df6:	2303      	movs	r3, #3
 8008df8:	e007      	b.n	8008e0a <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	681b      	ldr	r3, [r3, #0]
 8008dfe:	68db      	ldr	r3, [r3, #12]
 8008e00:	f003 0320 	and.w	r3, r3, #32
 8008e04:	2b00      	cmp	r3, #0
 8008e06:	d0ee      	beq.n	8008de6 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8008e08:	2300      	movs	r3, #0
}
 8008e0a:	4618      	mov	r0, r3
 8008e0c:	3710      	adds	r7, #16
 8008e0e:	46bd      	mov	sp, r7
 8008e10:	bd80      	pop	{r7, pc}

08008e12 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8008e12:	b580      	push	{r7, lr}
 8008e14:	b084      	sub	sp, #16
 8008e16:	af00      	add	r7, sp, #0
 8008e18:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8008e1a:	2300      	movs	r3, #0
 8008e1c:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	681b      	ldr	r3, [r3, #0]
 8008e22:	68db      	ldr	r3, [r3, #12]
 8008e24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008e28:	2b00      	cmp	r3, #0
 8008e2a:	d119      	bne.n	8008e60 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	681b      	ldr	r3, [r3, #0]
 8008e30:	f04f 32ff 	mov.w	r2, #4294967295
 8008e34:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8008e36:	f7fc fa0f 	bl	8005258 <HAL_GetTick>
 8008e3a:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8008e3c:	e009      	b.n	8008e52 <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8008e3e:	f7fc fa0b 	bl	8005258 <HAL_GetTick>
 8008e42:	4602      	mov	r2, r0
 8008e44:	68fb      	ldr	r3, [r7, #12]
 8008e46:	1ad3      	subs	r3, r2, r3
 8008e48:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008e4c:	d901      	bls.n	8008e52 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 8008e4e:	2303      	movs	r3, #3
 8008e50:	e007      	b.n	8008e62 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	681b      	ldr	r3, [r3, #0]
 8008e56:	68db      	ldr	r3, [r3, #12]
 8008e58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008e5c:	2b00      	cmp	r3, #0
 8008e5e:	d0ee      	beq.n	8008e3e <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 8008e60:	2300      	movs	r3, #0
}
 8008e62:	4618      	mov	r0, r3
 8008e64:	3710      	adds	r7, #16
 8008e66:	46bd      	mov	sp, r7
 8008e68:	bd80      	pop	{r7, pc}

08008e6a <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8008e6a:	b580      	push	{r7, lr}
 8008e6c:	b082      	sub	sp, #8
 8008e6e:	af00      	add	r7, sp, #0
 8008e70:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	2b00      	cmp	r3, #0
 8008e76:	d101      	bne.n	8008e7c <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8008e78:	2301      	movs	r3, #1
 8008e7a:	e022      	b.n	8008ec2 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8008e82:	b2db      	uxtb	r3, r3
 8008e84:	2b00      	cmp	r3, #0
 8008e86:	d105      	bne.n	8008e94 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	2200      	movs	r2, #0
 8008e8c:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8008e8e:	6878      	ldr	r0, [r7, #4]
 8008e90:	f7fb fdc4 	bl	8004a1c <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	2203      	movs	r2, #3
 8008e98:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8008e9c:	6878      	ldr	r0, [r7, #4]
 8008e9e:	f000 f815 	bl	8008ecc <HAL_SD_InitCard>
 8008ea2:	4603      	mov	r3, r0
 8008ea4:	2b00      	cmp	r3, #0
 8008ea6:	d001      	beq.n	8008eac <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8008ea8:	2301      	movs	r3, #1
 8008eaa:	e00a      	b.n	8008ec2 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	2200      	movs	r2, #0
 8008eb0:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	2200      	movs	r2, #0
 8008eb6:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	2201      	movs	r2, #1
 8008ebc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8008ec0:	2300      	movs	r3, #0
}
 8008ec2:	4618      	mov	r0, r3
 8008ec4:	3708      	adds	r7, #8
 8008ec6:	46bd      	mov	sp, r7
 8008ec8:	bd80      	pop	{r7, pc}
	...

08008ecc <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8008ecc:	b5b0      	push	{r4, r5, r7, lr}
 8008ece:	b08e      	sub	sp, #56	; 0x38
 8008ed0:	af04      	add	r7, sp, #16
 8008ed2:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8008ed4:	2300      	movs	r3, #0
 8008ed6:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 8008ed8:	2300      	movs	r3, #0
 8008eda:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8008edc:	2300      	movs	r3, #0
 8008ede:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 8008ee0:	2300      	movs	r3, #0
 8008ee2:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8008ee4:	2300      	movs	r3, #0
 8008ee6:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 8008ee8:	2376      	movs	r3, #118	; 0x76
 8008eea:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	681d      	ldr	r5, [r3, #0]
 8008ef0:	466c      	mov	r4, sp
 8008ef2:	f107 0314 	add.w	r3, r7, #20
 8008ef6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8008efa:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8008efe:	f107 0308 	add.w	r3, r7, #8
 8008f02:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008f04:	4628      	mov	r0, r5
 8008f06:	f002 fe09 	bl	800bb1c <SDIO_Init>
 8008f0a:	4603      	mov	r3, r0
 8008f0c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 8008f10:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008f14:	2b00      	cmp	r3, #0
 8008f16:	d001      	beq.n	8008f1c <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8008f18:	2301      	movs	r3, #1
 8008f1a:	e031      	b.n	8008f80 <HAL_SD_InitCard+0xb4>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 8008f1c:	4b1a      	ldr	r3, [pc, #104]	; (8008f88 <HAL_SD_InitCard+0xbc>)
 8008f1e:	2200      	movs	r2, #0
 8008f20:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	681b      	ldr	r3, [r3, #0]
 8008f26:	4618      	mov	r0, r3
 8008f28:	f002 fe41 	bl	800bbae <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 8008f2c:	4b16      	ldr	r3, [pc, #88]	; (8008f88 <HAL_SD_InitCard+0xbc>)
 8008f2e:	2201      	movs	r2, #1
 8008f30:	601a      	str	r2, [r3, #0]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8008f32:	6878      	ldr	r0, [r7, #4]
 8008f34:	f000 fffa 	bl	8009f2c <SD_PowerON>
 8008f38:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008f3a:	6a3b      	ldr	r3, [r7, #32]
 8008f3c:	2b00      	cmp	r3, #0
 8008f3e:	d00b      	beq.n	8008f58 <HAL_SD_InitCard+0x8c>
  {
    hsd->State = HAL_SD_STATE_READY;
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	2201      	movs	r2, #1
 8008f44:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008f4c:	6a3b      	ldr	r3, [r7, #32]
 8008f4e:	431a      	orrs	r2, r3
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8008f54:	2301      	movs	r3, #1
 8008f56:	e013      	b.n	8008f80 <HAL_SD_InitCard+0xb4>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8008f58:	6878      	ldr	r0, [r7, #4]
 8008f5a:	f000 ff19 	bl	8009d90 <SD_InitCard>
 8008f5e:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008f60:	6a3b      	ldr	r3, [r7, #32]
 8008f62:	2b00      	cmp	r3, #0
 8008f64:	d00b      	beq.n	8008f7e <HAL_SD_InitCard+0xb2>
  {
    hsd->State = HAL_SD_STATE_READY;
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	2201      	movs	r2, #1
 8008f6a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008f72:	6a3b      	ldr	r3, [r7, #32]
 8008f74:	431a      	orrs	r2, r3
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8008f7a:	2301      	movs	r3, #1
 8008f7c:	e000      	b.n	8008f80 <HAL_SD_InitCard+0xb4>
  }

  return HAL_OK;
 8008f7e:	2300      	movs	r3, #0
}
 8008f80:	4618      	mov	r0, r3
 8008f82:	3728      	adds	r7, #40	; 0x28
 8008f84:	46bd      	mov	sp, r7
 8008f86:	bdb0      	pop	{r4, r5, r7, pc}
 8008f88:	422580a0 	.word	0x422580a0

08008f8c <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8008f8c:	b580      	push	{r7, lr}
 8008f8e:	b08c      	sub	sp, #48	; 0x30
 8008f90:	af00      	add	r7, sp, #0
 8008f92:	60f8      	str	r0, [r7, #12]
 8008f94:	60b9      	str	r1, [r7, #8]
 8008f96:	607a      	str	r2, [r7, #4]
 8008f98:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 8008f9e:	68bb      	ldr	r3, [r7, #8]
 8008fa0:	2b00      	cmp	r3, #0
 8008fa2:	d107      	bne.n	8008fb4 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8008fa4:	68fb      	ldr	r3, [r7, #12]
 8008fa6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008fa8:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8008fac:	68fb      	ldr	r3, [r7, #12]
 8008fae:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8008fb0:	2301      	movs	r3, #1
 8008fb2:	e0c9      	b.n	8009148 <HAL_SD_ReadBlocks_DMA+0x1bc>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8008fb4:	68fb      	ldr	r3, [r7, #12]
 8008fb6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8008fba:	b2db      	uxtb	r3, r3
 8008fbc:	2b01      	cmp	r3, #1
 8008fbe:	f040 80c2 	bne.w	8009146 <HAL_SD_ReadBlocks_DMA+0x1ba>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8008fc2:	68fb      	ldr	r3, [r7, #12]
 8008fc4:	2200      	movs	r2, #0
 8008fc6:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8008fc8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008fca:	683b      	ldr	r3, [r7, #0]
 8008fcc:	441a      	add	r2, r3
 8008fce:	68fb      	ldr	r3, [r7, #12]
 8008fd0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008fd2:	429a      	cmp	r2, r3
 8008fd4:	d907      	bls.n	8008fe6 <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8008fd6:	68fb      	ldr	r3, [r7, #12]
 8008fd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008fda:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8008fde:	68fb      	ldr	r3, [r7, #12]
 8008fe0:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8008fe2:	2301      	movs	r3, #1
 8008fe4:	e0b0      	b.n	8009148 <HAL_SD_ReadBlocks_DMA+0x1bc>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8008fe6:	68fb      	ldr	r3, [r7, #12]
 8008fe8:	2203      	movs	r2, #3
 8008fea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8008fee:	68fb      	ldr	r3, [r7, #12]
 8008ff0:	681b      	ldr	r3, [r3, #0]
 8008ff2:	2200      	movs	r2, #0
 8008ff4:	62da      	str	r2, [r3, #44]	; 0x2c

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND | SDIO_IT_STBITERR));
 8008ff6:	68fb      	ldr	r3, [r7, #12]
 8008ff8:	681b      	ldr	r3, [r3, #0]
 8008ffa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008ffc:	68fa      	ldr	r2, [r7, #12]
 8008ffe:	6812      	ldr	r2, [r2, #0]
 8009000:	f443 734a 	orr.w	r3, r3, #808	; 0x328
 8009004:	f043 0302 	orr.w	r3, r3, #2
 8009008:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 800900a:	68fb      	ldr	r3, [r7, #12]
 800900c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800900e:	4a50      	ldr	r2, [pc, #320]	; (8009150 <HAL_SD_ReadBlocks_DMA+0x1c4>)
 8009010:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 8009012:	68fb      	ldr	r3, [r7, #12]
 8009014:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009016:	4a4f      	ldr	r2, [pc, #316]	; (8009154 <HAL_SD_ReadBlocks_DMA+0x1c8>)
 8009018:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 800901a:	68fb      	ldr	r3, [r7, #12]
 800901c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800901e:	2200      	movs	r2, #0
 8009020:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8009022:	68fb      	ldr	r3, [r7, #12]
 8009024:	6c18      	ldr	r0, [r3, #64]	; 0x40
 8009026:	68fb      	ldr	r3, [r7, #12]
 8009028:	681b      	ldr	r3, [r3, #0]
 800902a:	3380      	adds	r3, #128	; 0x80
 800902c:	4619      	mov	r1, r3
 800902e:	68ba      	ldr	r2, [r7, #8]
 8009030:	683b      	ldr	r3, [r7, #0]
 8009032:	025b      	lsls	r3, r3, #9
 8009034:	089b      	lsrs	r3, r3, #2
 8009036:	f7fc fafd 	bl	8005634 <HAL_DMA_Start_IT>
 800903a:	4603      	mov	r3, r0
 800903c:	2b00      	cmp	r3, #0
 800903e:	d017      	beq.n	8009070 <HAL_SD_ReadBlocks_DMA+0xe4>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 8009040:	68fb      	ldr	r3, [r7, #12]
 8009042:	681b      	ldr	r3, [r3, #0]
 8009044:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009046:	68fb      	ldr	r3, [r7, #12]
 8009048:	681b      	ldr	r3, [r3, #0]
 800904a:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 800904e:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8009050:	68fb      	ldr	r3, [r7, #12]
 8009052:	681b      	ldr	r3, [r3, #0]
 8009054:	4a40      	ldr	r2, [pc, #256]	; (8009158 <HAL_SD_ReadBlocks_DMA+0x1cc>)
 8009056:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8009058:	68fb      	ldr	r3, [r7, #12]
 800905a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800905c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8009060:	68fb      	ldr	r3, [r7, #12]
 8009062:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8009064:	68fb      	ldr	r3, [r7, #12]
 8009066:	2201      	movs	r2, #1
 8009068:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800906c:	2301      	movs	r3, #1
 800906e:	e06b      	b.n	8009148 <HAL_SD_ReadBlocks_DMA+0x1bc>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 8009070:	4b3a      	ldr	r3, [pc, #232]	; (800915c <HAL_SD_ReadBlocks_DMA+0x1d0>)
 8009072:	2201      	movs	r2, #1
 8009074:	601a      	str	r2, [r3, #0]

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8009076:	68fb      	ldr	r3, [r7, #12]
 8009078:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800907a:	2b01      	cmp	r3, #1
 800907c:	d002      	beq.n	8009084 <HAL_SD_ReadBlocks_DMA+0xf8>
      {
        add *= 512U;
 800907e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009080:	025b      	lsls	r3, r3, #9
 8009082:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Set Block Size for Card */
      errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8009084:	68fb      	ldr	r3, [r7, #12]
 8009086:	681b      	ldr	r3, [r3, #0]
 8009088:	f44f 7100 	mov.w	r1, #512	; 0x200
 800908c:	4618      	mov	r0, r3
 800908e:	f002 fe21 	bl	800bcd4 <SDMMC_CmdBlockLength>
 8009092:	62f8      	str	r0, [r7, #44]	; 0x2c
      if(errorstate != HAL_SD_ERROR_NONE)
 8009094:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009096:	2b00      	cmp	r3, #0
 8009098:	d00f      	beq.n	80090ba <HAL_SD_ReadBlocks_DMA+0x12e>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800909a:	68fb      	ldr	r3, [r7, #12]
 800909c:	681b      	ldr	r3, [r3, #0]
 800909e:	4a2e      	ldr	r2, [pc, #184]	; (8009158 <HAL_SD_ReadBlocks_DMA+0x1cc>)
 80090a0:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 80090a2:	68fb      	ldr	r3, [r7, #12]
 80090a4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80090a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80090a8:	431a      	orrs	r2, r3
 80090aa:	68fb      	ldr	r3, [r7, #12]
 80090ac:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 80090ae:	68fb      	ldr	r3, [r7, #12]
 80090b0:	2201      	movs	r2, #1
 80090b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        return HAL_ERROR;
 80090b6:	2301      	movs	r3, #1
 80090b8:	e046      	b.n	8009148 <HAL_SD_ReadBlocks_DMA+0x1bc>
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80090ba:	f04f 33ff 	mov.w	r3, #4294967295
 80090be:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 80090c0:	683b      	ldr	r3, [r7, #0]
 80090c2:	025b      	lsls	r3, r3, #9
 80090c4:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 80090c6:	2390      	movs	r3, #144	; 0x90
 80090c8:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 80090ca:	2302      	movs	r3, #2
 80090cc:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 80090ce:	2300      	movs	r3, #0
 80090d0:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 80090d2:	2301      	movs	r3, #1
 80090d4:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 80090d6:	68fb      	ldr	r3, [r7, #12]
 80090d8:	681b      	ldr	r3, [r3, #0]
 80090da:	f107 0210 	add.w	r2, r7, #16
 80090de:	4611      	mov	r1, r2
 80090e0:	4618      	mov	r0, r3
 80090e2:	f002 fdcb 	bl	800bc7c <SDIO_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 80090e6:	683b      	ldr	r3, [r7, #0]
 80090e8:	2b01      	cmp	r3, #1
 80090ea:	d90a      	bls.n	8009102 <HAL_SD_ReadBlocks_DMA+0x176>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 80090ec:	68fb      	ldr	r3, [r7, #12]
 80090ee:	2282      	movs	r2, #130	; 0x82
 80090f0:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 80090f2:	68fb      	ldr	r3, [r7, #12]
 80090f4:	681b      	ldr	r3, [r3, #0]
 80090f6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80090f8:	4618      	mov	r0, r3
 80090fa:	f002 fe2f 	bl	800bd5c <SDMMC_CmdReadMultiBlock>
 80090fe:	62f8      	str	r0, [r7, #44]	; 0x2c
 8009100:	e009      	b.n	8009116 <HAL_SD_ReadBlocks_DMA+0x18a>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8009102:	68fb      	ldr	r3, [r7, #12]
 8009104:	2281      	movs	r2, #129	; 0x81
 8009106:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8009108:	68fb      	ldr	r3, [r7, #12]
 800910a:	681b      	ldr	r3, [r3, #0]
 800910c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800910e:	4618      	mov	r0, r3
 8009110:	f002 fe02 	bl	800bd18 <SDMMC_CmdReadSingleBlock>
 8009114:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 8009116:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009118:	2b00      	cmp	r3, #0
 800911a:	d012      	beq.n	8009142 <HAL_SD_ReadBlocks_DMA+0x1b6>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800911c:	68fb      	ldr	r3, [r7, #12]
 800911e:	681b      	ldr	r3, [r3, #0]
 8009120:	4a0d      	ldr	r2, [pc, #52]	; (8009158 <HAL_SD_ReadBlocks_DMA+0x1cc>)
 8009122:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8009124:	68fb      	ldr	r3, [r7, #12]
 8009126:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009128:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800912a:	431a      	orrs	r2, r3
 800912c:	68fb      	ldr	r3, [r7, #12]
 800912e:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8009130:	68fb      	ldr	r3, [r7, #12]
 8009132:	2201      	movs	r2, #1
 8009134:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8009138:	68fb      	ldr	r3, [r7, #12]
 800913a:	2200      	movs	r2, #0
 800913c:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 800913e:	2301      	movs	r3, #1
 8009140:	e002      	b.n	8009148 <HAL_SD_ReadBlocks_DMA+0x1bc>
      }

      return HAL_OK;
 8009142:	2300      	movs	r3, #0
 8009144:	e000      	b.n	8009148 <HAL_SD_ReadBlocks_DMA+0x1bc>
    }
  }
  else
  {
    return HAL_BUSY;
 8009146:	2302      	movs	r3, #2
  }
}
 8009148:	4618      	mov	r0, r3
 800914a:	3730      	adds	r7, #48	; 0x30
 800914c:	46bd      	mov	sp, r7
 800914e:	bd80      	pop	{r7, pc}
 8009150:	08009b9f 	.word	0x08009b9f
 8009154:	08009c11 	.word	0x08009c11
 8009158:	004005ff 	.word	0x004005ff
 800915c:	4225858c 	.word	0x4225858c

08009160 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8009160:	b580      	push	{r7, lr}
 8009162:	b08c      	sub	sp, #48	; 0x30
 8009164:	af00      	add	r7, sp, #0
 8009166:	60f8      	str	r0, [r7, #12]
 8009168:	60b9      	str	r1, [r7, #8]
 800916a:	607a      	str	r2, [r7, #4]
 800916c:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 8009172:	68bb      	ldr	r3, [r7, #8]
 8009174:	2b00      	cmp	r3, #0
 8009176:	d107      	bne.n	8009188 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8009178:	68fb      	ldr	r3, [r7, #12]
 800917a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800917c:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8009180:	68fb      	ldr	r3, [r7, #12]
 8009182:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8009184:	2301      	movs	r3, #1
 8009186:	e0ce      	b.n	8009326 <HAL_SD_WriteBlocks_DMA+0x1c6>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8009188:	68fb      	ldr	r3, [r7, #12]
 800918a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800918e:	b2db      	uxtb	r3, r3
 8009190:	2b01      	cmp	r3, #1
 8009192:	f040 80c7 	bne.w	8009324 <HAL_SD_WriteBlocks_DMA+0x1c4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8009196:	68fb      	ldr	r3, [r7, #12]
 8009198:	2200      	movs	r2, #0
 800919a:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800919c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800919e:	683b      	ldr	r3, [r7, #0]
 80091a0:	441a      	add	r2, r3
 80091a2:	68fb      	ldr	r3, [r7, #12]
 80091a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80091a6:	429a      	cmp	r2, r3
 80091a8:	d907      	bls.n	80091ba <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80091aa:	68fb      	ldr	r3, [r7, #12]
 80091ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80091ae:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80091b2:	68fb      	ldr	r3, [r7, #12]
 80091b4:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 80091b6:	2301      	movs	r3, #1
 80091b8:	e0b5      	b.n	8009326 <HAL_SD_WriteBlocks_DMA+0x1c6>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80091ba:	68fb      	ldr	r3, [r7, #12]
 80091bc:	2203      	movs	r2, #3
 80091be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80091c2:	68fb      	ldr	r3, [r7, #12]
 80091c4:	681b      	ldr	r3, [r3, #0]
 80091c6:	2200      	movs	r2, #0
 80091c8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable SD Error interrupts */
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 80091ca:	68fb      	ldr	r3, [r7, #12]
 80091cc:	681b      	ldr	r3, [r3, #0]
 80091ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80091d0:	68fa      	ldr	r2, [r7, #12]
 80091d2:	6812      	ldr	r2, [r2, #0]
 80091d4:	f443 7306 	orr.w	r3, r3, #536	; 0x218
 80091d8:	f043 0302 	orr.w	r3, r3, #2
 80091dc:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 80091de:	68fb      	ldr	r3, [r7, #12]
 80091e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80091e2:	4a53      	ldr	r2, [pc, #332]	; (8009330 <HAL_SD_WriteBlocks_DMA+0x1d0>)
 80091e4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 80091e6:	68fb      	ldr	r3, [r7, #12]
 80091e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80091ea:	4a52      	ldr	r2, [pc, #328]	; (8009334 <HAL_SD_WriteBlocks_DMA+0x1d4>)
 80091ec:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 80091ee:	68fb      	ldr	r3, [r7, #12]
 80091f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80091f2:	2200      	movs	r2, #0
 80091f4:	651a      	str	r2, [r3, #80]	; 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80091f6:	68fb      	ldr	r3, [r7, #12]
 80091f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80091fa:	2b01      	cmp	r3, #1
 80091fc:	d002      	beq.n	8009204 <HAL_SD_WriteBlocks_DMA+0xa4>
    {
      add *= 512U;
 80091fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009200:	025b      	lsls	r3, r3, #9
 8009202:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Set Block Size for Card */
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8009204:	68fb      	ldr	r3, [r7, #12]
 8009206:	681b      	ldr	r3, [r3, #0]
 8009208:	f44f 7100 	mov.w	r1, #512	; 0x200
 800920c:	4618      	mov	r0, r3
 800920e:	f002 fd61 	bl	800bcd4 <SDMMC_CmdBlockLength>
 8009212:	62f8      	str	r0, [r7, #44]	; 0x2c
    if(errorstate != HAL_SD_ERROR_NONE)
 8009214:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009216:	2b00      	cmp	r3, #0
 8009218:	d00f      	beq.n	800923a <HAL_SD_WriteBlocks_DMA+0xda>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800921a:	68fb      	ldr	r3, [r7, #12]
 800921c:	681b      	ldr	r3, [r3, #0]
 800921e:	4a46      	ldr	r2, [pc, #280]	; (8009338 <HAL_SD_WriteBlocks_DMA+0x1d8>)
 8009220:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8009222:	68fb      	ldr	r3, [r7, #12]
 8009224:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009226:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009228:	431a      	orrs	r2, r3
 800922a:	68fb      	ldr	r3, [r7, #12]
 800922c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800922e:	68fb      	ldr	r3, [r7, #12]
 8009230:	2201      	movs	r2, #1
 8009232:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8009236:	2301      	movs	r3, #1
 8009238:	e075      	b.n	8009326 <HAL_SD_WriteBlocks_DMA+0x1c6>
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 800923a:	683b      	ldr	r3, [r7, #0]
 800923c:	2b01      	cmp	r3, #1
 800923e:	d90a      	bls.n	8009256 <HAL_SD_WriteBlocks_DMA+0xf6>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8009240:	68fb      	ldr	r3, [r7, #12]
 8009242:	22a0      	movs	r2, #160	; 0xa0
 8009244:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8009246:	68fb      	ldr	r3, [r7, #12]
 8009248:	681b      	ldr	r3, [r3, #0]
 800924a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800924c:	4618      	mov	r0, r3
 800924e:	f002 fdc9 	bl	800bde4 <SDMMC_CmdWriteMultiBlock>
 8009252:	62f8      	str	r0, [r7, #44]	; 0x2c
 8009254:	e009      	b.n	800926a <HAL_SD_WriteBlocks_DMA+0x10a>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8009256:	68fb      	ldr	r3, [r7, #12]
 8009258:	2290      	movs	r2, #144	; 0x90
 800925a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800925c:	68fb      	ldr	r3, [r7, #12]
 800925e:	681b      	ldr	r3, [r3, #0]
 8009260:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009262:	4618      	mov	r0, r3
 8009264:	f002 fd9c 	bl	800bda0 <SDMMC_CmdWriteSingleBlock>
 8009268:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800926a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800926c:	2b00      	cmp	r3, #0
 800926e:	d012      	beq.n	8009296 <HAL_SD_WriteBlocks_DMA+0x136>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8009270:	68fb      	ldr	r3, [r7, #12]
 8009272:	681b      	ldr	r3, [r3, #0]
 8009274:	4a30      	ldr	r2, [pc, #192]	; (8009338 <HAL_SD_WriteBlocks_DMA+0x1d8>)
 8009276:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8009278:	68fb      	ldr	r3, [r7, #12]
 800927a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800927c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800927e:	431a      	orrs	r2, r3
 8009280:	68fb      	ldr	r3, [r7, #12]
 8009282:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8009284:	68fb      	ldr	r3, [r7, #12]
 8009286:	2201      	movs	r2, #1
 8009288:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800928c:	68fb      	ldr	r3, [r7, #12]
 800928e:	2200      	movs	r2, #0
 8009290:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8009292:	2301      	movs	r3, #1
 8009294:	e047      	b.n	8009326 <HAL_SD_WriteBlocks_DMA+0x1c6>
    }

    /* Enable SDIO DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 8009296:	4b29      	ldr	r3, [pc, #164]	; (800933c <HAL_SD_WriteBlocks_DMA+0x1dc>)
 8009298:	2201      	movs	r2, #1
 800929a:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800929c:	68fb      	ldr	r3, [r7, #12]
 800929e:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 80092a0:	68b9      	ldr	r1, [r7, #8]
 80092a2:	68fb      	ldr	r3, [r7, #12]
 80092a4:	681b      	ldr	r3, [r3, #0]
 80092a6:	3380      	adds	r3, #128	; 0x80
 80092a8:	461a      	mov	r2, r3
 80092aa:	683b      	ldr	r3, [r7, #0]
 80092ac:	025b      	lsls	r3, r3, #9
 80092ae:	089b      	lsrs	r3, r3, #2
 80092b0:	f7fc f9c0 	bl	8005634 <HAL_DMA_Start_IT>
 80092b4:	4603      	mov	r3, r0
 80092b6:	2b00      	cmp	r3, #0
 80092b8:	d01c      	beq.n	80092f4 <HAL_SD_WriteBlocks_DMA+0x194>
    {
#if defined(SDIO_STA_STBITERR)
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 80092ba:	68fb      	ldr	r3, [r7, #12]
 80092bc:	681b      	ldr	r3, [r3, #0]
 80092be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80092c0:	68fa      	ldr	r2, [r7, #12]
 80092c2:	6812      	ldr	r2, [r2, #0]
 80092c4:	f423 7306 	bic.w	r3, r3, #536	; 0x218
 80092c8:	f023 0302 	bic.w	r3, r3, #2
 80092cc:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
#endif /* SDIO_STA_STBITERR */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80092ce:	68fb      	ldr	r3, [r7, #12]
 80092d0:	681b      	ldr	r3, [r3, #0]
 80092d2:	4a19      	ldr	r2, [pc, #100]	; (8009338 <HAL_SD_WriteBlocks_DMA+0x1d8>)
 80092d4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 80092d6:	68fb      	ldr	r3, [r7, #12]
 80092d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80092da:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80092de:	68fb      	ldr	r3, [r7, #12]
 80092e0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80092e2:	68fb      	ldr	r3, [r7, #12]
 80092e4:	2201      	movs	r2, #1
 80092e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80092ea:	68fb      	ldr	r3, [r7, #12]
 80092ec:	2200      	movs	r2, #0
 80092ee:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80092f0:	2301      	movs	r3, #1
 80092f2:	e018      	b.n	8009326 <HAL_SD_WriteBlocks_DMA+0x1c6>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80092f4:	f04f 33ff 	mov.w	r3, #4294967295
 80092f8:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 80092fa:	683b      	ldr	r3, [r7, #0]
 80092fc:	025b      	lsls	r3, r3, #9
 80092fe:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8009300:	2390      	movs	r3, #144	; 0x90
 8009302:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 8009304:	2300      	movs	r3, #0
 8009306:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8009308:	2300      	movs	r3, #0
 800930a:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 800930c:	2301      	movs	r3, #1
 800930e:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 8009310:	68fb      	ldr	r3, [r7, #12]
 8009312:	681b      	ldr	r3, [r3, #0]
 8009314:	f107 0210 	add.w	r2, r7, #16
 8009318:	4611      	mov	r1, r2
 800931a:	4618      	mov	r0, r3
 800931c:	f002 fcae 	bl	800bc7c <SDIO_ConfigData>

      return HAL_OK;
 8009320:	2300      	movs	r3, #0
 8009322:	e000      	b.n	8009326 <HAL_SD_WriteBlocks_DMA+0x1c6>
    }
  }
  else
  {
    return HAL_BUSY;
 8009324:	2302      	movs	r3, #2
  }
}
 8009326:	4618      	mov	r0, r3
 8009328:	3730      	adds	r7, #48	; 0x30
 800932a:	46bd      	mov	sp, r7
 800932c:	bd80      	pop	{r7, pc}
 800932e:	bf00      	nop
 8009330:	08009b75 	.word	0x08009b75
 8009334:	08009c11 	.word	0x08009c11
 8009338:	004005ff 	.word	0x004005ff
 800933c:	4225858c 	.word	0x4225858c

08009340 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 8009340:	b580      	push	{r7, lr}
 8009342:	b084      	sub	sp, #16
 8009344:	af00      	add	r7, sp, #0
 8009346:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800934c:	60fb      	str	r3, [r7, #12]

  /* Check for SDIO interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	681b      	ldr	r3, [r3, #0]
 8009352:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009354:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009358:	2b00      	cmp	r3, #0
 800935a:	d008      	beq.n	800936e <HAL_SD_IRQHandler+0x2e>
 800935c:	68fb      	ldr	r3, [r7, #12]
 800935e:	f003 0308 	and.w	r3, r3, #8
 8009362:	2b00      	cmp	r3, #0
 8009364:	d003      	beq.n	800936e <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 8009366:	6878      	ldr	r0, [r7, #4]
 8009368:	f000 fff6 	bl	800a358 <SD_Read_IT>
 800936c:	e165      	b.n	800963a <HAL_SD_IRQHandler+0x2fa>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) != RESET)
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	681b      	ldr	r3, [r3, #0]
 8009372:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009374:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009378:	2b00      	cmp	r3, #0
 800937a:	f000 808f 	beq.w	800949c <HAL_SD_IRQHandler+0x15c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DATAEND);
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	681b      	ldr	r3, [r3, #0]
 8009382:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009386:	639a      	str	r2, [r3, #56]	; 0x38

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	681b      	ldr	r3, [r3, #0]
 800938c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800938e:	687a      	ldr	r2, [r7, #4]
 8009390:	6812      	ldr	r2, [r2, #0]
 8009392:	f423 4343 	bic.w	r3, r3, #49920	; 0xc300
 8009396:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 800939a:	63d3      	str	r3, [r2, #60]	; 0x3c
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF);
#endif /* SDIO_STA_STBITERR */

    hsd->Instance->DCTRL &= ~(SDIO_DCTRL_DTEN);
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	681b      	ldr	r3, [r3, #0]
 80093a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	681b      	ldr	r3, [r3, #0]
 80093a6:	f022 0201 	bic.w	r2, r2, #1
 80093aa:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 80093ac:	68fb      	ldr	r3, [r7, #12]
 80093ae:	f003 0308 	and.w	r3, r3, #8
 80093b2:	2b00      	cmp	r3, #0
 80093b4:	d039      	beq.n	800942a <HAL_SD_IRQHandler+0xea>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 80093b6:	68fb      	ldr	r3, [r7, #12]
 80093b8:	f003 0302 	and.w	r3, r3, #2
 80093bc:	2b00      	cmp	r3, #0
 80093be:	d104      	bne.n	80093ca <HAL_SD_IRQHandler+0x8a>
 80093c0:	68fb      	ldr	r3, [r7, #12]
 80093c2:	f003 0320 	and.w	r3, r3, #32
 80093c6:	2b00      	cmp	r3, #0
 80093c8:	d011      	beq.n	80093ee <HAL_SD_IRQHandler+0xae>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	681b      	ldr	r3, [r3, #0]
 80093ce:	4618      	mov	r0, r3
 80093d0:	f002 fd2a 	bl	800be28 <SDMMC_CmdStopTransfer>
 80093d4:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 80093d6:	68bb      	ldr	r3, [r7, #8]
 80093d8:	2b00      	cmp	r3, #0
 80093da:	d008      	beq.n	80093ee <HAL_SD_IRQHandler+0xae>
        {
          hsd->ErrorCode |= errorstate;
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80093e0:	68bb      	ldr	r3, [r7, #8]
 80093e2:	431a      	orrs	r2, r3
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 80093e8:	6878      	ldr	r0, [r7, #4]
 80093ea:	f000 f943 	bl	8009674 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	681b      	ldr	r3, [r3, #0]
 80093f2:	f240 523a 	movw	r2, #1338	; 0x53a
 80093f6:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	2201      	movs	r2, #1
 80093fc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	2200      	movs	r2, #0
 8009404:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8009406:	68fb      	ldr	r3, [r7, #12]
 8009408:	f003 0301 	and.w	r3, r3, #1
 800940c:	2b00      	cmp	r3, #0
 800940e:	d104      	bne.n	800941a <HAL_SD_IRQHandler+0xda>
 8009410:	68fb      	ldr	r3, [r7, #12]
 8009412:	f003 0302 	and.w	r3, r3, #2
 8009416:	2b00      	cmp	r3, #0
 8009418:	d003      	beq.n	8009422 <HAL_SD_IRQHandler+0xe2>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 800941a:	6878      	ldr	r0, [r7, #4]
 800941c:	f000 f920 	bl	8009660 <HAL_SD_RxCpltCallback>
 8009420:	e10b      	b.n	800963a <HAL_SD_IRQHandler+0x2fa>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 8009422:	6878      	ldr	r0, [r7, #4]
 8009424:	f000 f912 	bl	800964c <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8009428:	e107      	b.n	800963a <HAL_SD_IRQHandler+0x2fa>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800942a:	68fb      	ldr	r3, [r7, #12]
 800942c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009430:	2b00      	cmp	r3, #0
 8009432:	f000 8102 	beq.w	800963a <HAL_SD_IRQHandler+0x2fa>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8009436:	68fb      	ldr	r3, [r7, #12]
 8009438:	f003 0320 	and.w	r3, r3, #32
 800943c:	2b00      	cmp	r3, #0
 800943e:	d011      	beq.n	8009464 <HAL_SD_IRQHandler+0x124>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	681b      	ldr	r3, [r3, #0]
 8009444:	4618      	mov	r0, r3
 8009446:	f002 fcef 	bl	800be28 <SDMMC_CmdStopTransfer>
 800944a:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800944c:	68bb      	ldr	r3, [r7, #8]
 800944e:	2b00      	cmp	r3, #0
 8009450:	d008      	beq.n	8009464 <HAL_SD_IRQHandler+0x124>
          hsd->ErrorCode |= errorstate;
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009456:	68bb      	ldr	r3, [r7, #8]
 8009458:	431a      	orrs	r2, r3
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 800945e:	6878      	ldr	r0, [r7, #4]
 8009460:	f000 f908 	bl	8009674 <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 8009464:	68fb      	ldr	r3, [r7, #12]
 8009466:	f003 0301 	and.w	r3, r3, #1
 800946a:	2b00      	cmp	r3, #0
 800946c:	f040 80e5 	bne.w	800963a <HAL_SD_IRQHandler+0x2fa>
 8009470:	68fb      	ldr	r3, [r7, #12]
 8009472:	f003 0302 	and.w	r3, r3, #2
 8009476:	2b00      	cmp	r3, #0
 8009478:	f040 80df 	bne.w	800963a <HAL_SD_IRQHandler+0x2fa>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	681b      	ldr	r3, [r3, #0]
 8009480:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	681b      	ldr	r3, [r3, #0]
 8009486:	f022 0208 	bic.w	r2, r2, #8
 800948a:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	2201      	movs	r2, #1
 8009490:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 8009494:	6878      	ldr	r0, [r7, #4]
 8009496:	f000 f8d9 	bl	800964c <HAL_SD_TxCpltCallback>
}
 800949a:	e0ce      	b.n	800963a <HAL_SD_IRQHandler+0x2fa>
  else if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	681b      	ldr	r3, [r3, #0]
 80094a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80094a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80094a6:	2b00      	cmp	r3, #0
 80094a8:	d008      	beq.n	80094bc <HAL_SD_IRQHandler+0x17c>
 80094aa:	68fb      	ldr	r3, [r7, #12]
 80094ac:	f003 0308 	and.w	r3, r3, #8
 80094b0:	2b00      	cmp	r3, #0
 80094b2:	d003      	beq.n	80094bc <HAL_SD_IRQHandler+0x17c>
    SD_Write_IT(hsd);
 80094b4:	6878      	ldr	r0, [r7, #4]
 80094b6:	f000 ffa0 	bl	800a3fa <SD_Write_IT>
 80094ba:	e0be      	b.n	800963a <HAL_SD_IRQHandler+0x2fa>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_RXOVERR | SDIO_FLAG_TXUNDERR | SDIO_FLAG_STBITERR) != RESET)
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	681b      	ldr	r3, [r3, #0]
 80094c0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80094c2:	f240 233a 	movw	r3, #570	; 0x23a
 80094c6:	4013      	ands	r3, r2
 80094c8:	2b00      	cmp	r3, #0
 80094ca:	f000 80b6 	beq.w	800963a <HAL_SD_IRQHandler+0x2fa>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL) != RESET)
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	681b      	ldr	r3, [r3, #0]
 80094d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80094d4:	f003 0302 	and.w	r3, r3, #2
 80094d8:	2b00      	cmp	r3, #0
 80094da:	d005      	beq.n	80094e8 <HAL_SD_IRQHandler+0x1a8>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80094e0:	f043 0202 	orr.w	r2, r3, #2
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) != RESET)
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	681b      	ldr	r3, [r3, #0]
 80094ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80094ee:	f003 0308 	and.w	r3, r3, #8
 80094f2:	2b00      	cmp	r3, #0
 80094f4:	d005      	beq.n	8009502 <HAL_SD_IRQHandler+0x1c2>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80094fa:	f043 0208 	orr.w	r2, r3, #8
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR) != RESET)
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	681b      	ldr	r3, [r3, #0]
 8009506:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009508:	f003 0320 	and.w	r3, r3, #32
 800950c:	2b00      	cmp	r3, #0
 800950e:	d005      	beq.n	800951c <HAL_SD_IRQHandler+0x1dc>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009514:	f043 0220 	orr.w	r2, r3, #32
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR) != RESET)
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	681b      	ldr	r3, [r3, #0]
 8009520:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009522:	f003 0310 	and.w	r3, r3, #16
 8009526:	2b00      	cmp	r3, #0
 8009528:	d005      	beq.n	8009536 <HAL_SD_IRQHandler+0x1f6>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800952e:	f043 0210 	orr.w	r2, r3, #16
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR) != RESET)
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	681b      	ldr	r3, [r3, #0]
 800953a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800953c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009540:	2b00      	cmp	r3, #0
 8009542:	d005      	beq.n	8009550 <HAL_SD_IRQHandler+0x210>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009548:	f043 0208 	orr.w	r2, r3, #8
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS | SDIO_FLAG_STBITERR);
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	681b      	ldr	r3, [r3, #0]
 8009554:	f240 723a 	movw	r2, #1850	; 0x73a
 8009558:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	681b      	ldr	r3, [r3, #0]
 800955e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009560:	687a      	ldr	r2, [r7, #4]
 8009562:	6812      	ldr	r2, [r2, #0]
 8009564:	f423 734e 	bic.w	r3, r3, #824	; 0x338
 8009568:	f023 0302 	bic.w	r3, r3, #2
 800956c:	63d3      	str	r3, [r2, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	681b      	ldr	r3, [r3, #0]
 8009572:	4618      	mov	r0, r3
 8009574:	f002 fc58 	bl	800be28 <SDMMC_CmdStopTransfer>
 8009578:	4602      	mov	r2, r0
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800957e:	431a      	orrs	r2, r3
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 8009584:	68fb      	ldr	r3, [r7, #12]
 8009586:	f003 0308 	and.w	r3, r3, #8
 800958a:	2b00      	cmp	r3, #0
 800958c:	d00a      	beq.n	80095a4 <HAL_SD_IRQHandler+0x264>
      hsd->State = HAL_SD_STATE_READY;
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	2201      	movs	r2, #1
 8009592:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	2200      	movs	r2, #0
 800959a:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 800959c:	6878      	ldr	r0, [r7, #4]
 800959e:	f000 f869 	bl	8009674 <HAL_SD_ErrorCallback>
}
 80095a2:	e04a      	b.n	800963a <HAL_SD_IRQHandler+0x2fa>
    else if((context & SD_CONTEXT_DMA) != 0U)
 80095a4:	68fb      	ldr	r3, [r7, #12]
 80095a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80095aa:	2b00      	cmp	r3, #0
 80095ac:	d045      	beq.n	800963a <HAL_SD_IRQHandler+0x2fa>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 80095ae:	68fb      	ldr	r3, [r7, #12]
 80095b0:	f003 0310 	and.w	r3, r3, #16
 80095b4:	2b00      	cmp	r3, #0
 80095b6:	d104      	bne.n	80095c2 <HAL_SD_IRQHandler+0x282>
 80095b8:	68fb      	ldr	r3, [r7, #12]
 80095ba:	f003 0320 	and.w	r3, r3, #32
 80095be:	2b00      	cmp	r3, #0
 80095c0:	d011      	beq.n	80095e6 <HAL_SD_IRQHandler+0x2a6>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80095c6:	4a1f      	ldr	r2, [pc, #124]	; (8009644 <HAL_SD_IRQHandler+0x304>)
 80095c8:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80095ce:	4618      	mov	r0, r3
 80095d0:	f7fc f888 	bl	80056e4 <HAL_DMA_Abort_IT>
 80095d4:	4603      	mov	r3, r0
 80095d6:	2b00      	cmp	r3, #0
 80095d8:	d02f      	beq.n	800963a <HAL_SD_IRQHandler+0x2fa>
          SD_DMATxAbort(hsd->hdmatx);
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80095de:	4618      	mov	r0, r3
 80095e0:	f000 fb68 	bl	8009cb4 <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 80095e4:	e029      	b.n	800963a <HAL_SD_IRQHandler+0x2fa>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 80095e6:	68fb      	ldr	r3, [r7, #12]
 80095e8:	f003 0301 	and.w	r3, r3, #1
 80095ec:	2b00      	cmp	r3, #0
 80095ee:	d104      	bne.n	80095fa <HAL_SD_IRQHandler+0x2ba>
 80095f0:	68fb      	ldr	r3, [r7, #12]
 80095f2:	f003 0302 	and.w	r3, r3, #2
 80095f6:	2b00      	cmp	r3, #0
 80095f8:	d011      	beq.n	800961e <HAL_SD_IRQHandler+0x2de>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80095fe:	4a12      	ldr	r2, [pc, #72]	; (8009648 <HAL_SD_IRQHandler+0x308>)
 8009600:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009606:	4618      	mov	r0, r3
 8009608:	f7fc f86c 	bl	80056e4 <HAL_DMA_Abort_IT>
 800960c:	4603      	mov	r3, r0
 800960e:	2b00      	cmp	r3, #0
 8009610:	d013      	beq.n	800963a <HAL_SD_IRQHandler+0x2fa>
          SD_DMARxAbort(hsd->hdmarx);
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009616:	4618      	mov	r0, r3
 8009618:	f000 fb83 	bl	8009d22 <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 800961c:	e00d      	b.n	800963a <HAL_SD_IRQHandler+0x2fa>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	2200      	movs	r2, #0
 8009622:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	2201      	movs	r2, #1
 8009628:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	2200      	movs	r2, #0
 8009630:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 8009632:	6878      	ldr	r0, [r7, #4]
 8009634:	f000 f828 	bl	8009688 <HAL_SD_AbortCallback>
}
 8009638:	e7ff      	b.n	800963a <HAL_SD_IRQHandler+0x2fa>
 800963a:	bf00      	nop
 800963c:	3710      	adds	r7, #16
 800963e:	46bd      	mov	sp, r7
 8009640:	bd80      	pop	{r7, pc}
 8009642:	bf00      	nop
 8009644:	08009cb5 	.word	0x08009cb5
 8009648:	08009d23 	.word	0x08009d23

0800964c <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: Pointer to SD handle
  * @retval None
  */
__weak void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 800964c:	b480      	push	{r7}
 800964e:	b083      	sub	sp, #12
 8009650:	af00      	add	r7, sp, #0
 8009652:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_TxCpltCallback can be implemented in the user file
   */
}
 8009654:	bf00      	nop
 8009656:	370c      	adds	r7, #12
 8009658:	46bd      	mov	sp, r7
 800965a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800965e:	4770      	bx	lr

08009660 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 8009660:	b480      	push	{r7}
 8009662:	b083      	sub	sp, #12
 8009664:	af00      	add	r7, sp, #0
 8009666:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_RxCpltCallback can be implemented in the user file
   */
}
 8009668:	bf00      	nop
 800966a:	370c      	adds	r7, #12
 800966c:	46bd      	mov	sp, r7
 800966e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009672:	4770      	bx	lr

08009674 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8009674:	b480      	push	{r7}
 8009676:	b083      	sub	sp, #12
 8009678:	af00      	add	r7, sp, #0
 800967a:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 800967c:	bf00      	nop
 800967e:	370c      	adds	r7, #12
 8009680:	46bd      	mov	sp, r7
 8009682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009686:	4770      	bx	lr

08009688 <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 8009688:	b480      	push	{r7}
 800968a:	b083      	sub	sp, #12
 800968c:	af00      	add	r7, sp, #0
 800968e:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_AbortCallback can be implemented in the user file
   */
}
 8009690:	bf00      	nop
 8009692:	370c      	adds	r7, #12
 8009694:	46bd      	mov	sp, r7
 8009696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800969a:	4770      	bx	lr

0800969c <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800969c:	b480      	push	{r7}
 800969e:	b083      	sub	sp, #12
 80096a0:	af00      	add	r7, sp, #0
 80096a2:	6078      	str	r0, [r7, #4]
 80096a4:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80096aa:	0f9b      	lsrs	r3, r3, #30
 80096ac:	b2da      	uxtb	r2, r3
 80096ae:	683b      	ldr	r3, [r7, #0]
 80096b0:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80096b6:	0e9b      	lsrs	r3, r3, #26
 80096b8:	b2db      	uxtb	r3, r3
 80096ba:	f003 030f 	and.w	r3, r3, #15
 80096be:	b2da      	uxtb	r2, r3
 80096c0:	683b      	ldr	r3, [r7, #0]
 80096c2:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80096c8:	0e1b      	lsrs	r3, r3, #24
 80096ca:	b2db      	uxtb	r3, r3
 80096cc:	f003 0303 	and.w	r3, r3, #3
 80096d0:	b2da      	uxtb	r2, r3
 80096d2:	683b      	ldr	r3, [r7, #0]
 80096d4:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80096da:	0c1b      	lsrs	r3, r3, #16
 80096dc:	b2da      	uxtb	r2, r3
 80096de:	683b      	ldr	r3, [r7, #0]
 80096e0:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80096e6:	0a1b      	lsrs	r3, r3, #8
 80096e8:	b2da      	uxtb	r2, r3
 80096ea:	683b      	ldr	r3, [r7, #0]
 80096ec:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80096f2:	b2da      	uxtb	r2, r3
 80096f4:	683b      	ldr	r3, [r7, #0]
 80096f6:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80096fc:	0d1b      	lsrs	r3, r3, #20
 80096fe:	b29a      	uxth	r2, r3
 8009700:	683b      	ldr	r3, [r7, #0]
 8009702:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009708:	0c1b      	lsrs	r3, r3, #16
 800970a:	b2db      	uxtb	r3, r3
 800970c:	f003 030f 	and.w	r3, r3, #15
 8009710:	b2da      	uxtb	r2, r3
 8009712:	683b      	ldr	r3, [r7, #0]
 8009714:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800971a:	0bdb      	lsrs	r3, r3, #15
 800971c:	b2db      	uxtb	r3, r3
 800971e:	f003 0301 	and.w	r3, r3, #1
 8009722:	b2da      	uxtb	r2, r3
 8009724:	683b      	ldr	r3, [r7, #0]
 8009726:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800972c:	0b9b      	lsrs	r3, r3, #14
 800972e:	b2db      	uxtb	r3, r3
 8009730:	f003 0301 	and.w	r3, r3, #1
 8009734:	b2da      	uxtb	r2, r3
 8009736:	683b      	ldr	r3, [r7, #0]
 8009738:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800973e:	0b5b      	lsrs	r3, r3, #13
 8009740:	b2db      	uxtb	r3, r3
 8009742:	f003 0301 	and.w	r3, r3, #1
 8009746:	b2da      	uxtb	r2, r3
 8009748:	683b      	ldr	r3, [r7, #0]
 800974a:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009750:	0b1b      	lsrs	r3, r3, #12
 8009752:	b2db      	uxtb	r3, r3
 8009754:	f003 0301 	and.w	r3, r3, #1
 8009758:	b2da      	uxtb	r2, r3
 800975a:	683b      	ldr	r3, [r7, #0]
 800975c:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800975e:	683b      	ldr	r3, [r7, #0]
 8009760:	2200      	movs	r2, #0
 8009762:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009768:	2b00      	cmp	r3, #0
 800976a:	d163      	bne.n	8009834 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009770:	009a      	lsls	r2, r3, #2
 8009772:	f640 73fc 	movw	r3, #4092	; 0xffc
 8009776:	4013      	ands	r3, r2
 8009778:	687a      	ldr	r2, [r7, #4]
 800977a:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 800977c:	0f92      	lsrs	r2, r2, #30
 800977e:	431a      	orrs	r2, r3
 8009780:	683b      	ldr	r3, [r7, #0]
 8009782:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009788:	0edb      	lsrs	r3, r3, #27
 800978a:	b2db      	uxtb	r3, r3
 800978c:	f003 0307 	and.w	r3, r3, #7
 8009790:	b2da      	uxtb	r2, r3
 8009792:	683b      	ldr	r3, [r7, #0]
 8009794:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800979a:	0e1b      	lsrs	r3, r3, #24
 800979c:	b2db      	uxtb	r3, r3
 800979e:	f003 0307 	and.w	r3, r3, #7
 80097a2:	b2da      	uxtb	r2, r3
 80097a4:	683b      	ldr	r3, [r7, #0]
 80097a6:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80097ac:	0d5b      	lsrs	r3, r3, #21
 80097ae:	b2db      	uxtb	r3, r3
 80097b0:	f003 0307 	and.w	r3, r3, #7
 80097b4:	b2da      	uxtb	r2, r3
 80097b6:	683b      	ldr	r3, [r7, #0]
 80097b8:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80097be:	0c9b      	lsrs	r3, r3, #18
 80097c0:	b2db      	uxtb	r3, r3
 80097c2:	f003 0307 	and.w	r3, r3, #7
 80097c6:	b2da      	uxtb	r2, r3
 80097c8:	683b      	ldr	r3, [r7, #0]
 80097ca:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80097d0:	0bdb      	lsrs	r3, r3, #15
 80097d2:	b2db      	uxtb	r3, r3
 80097d4:	f003 0307 	and.w	r3, r3, #7
 80097d8:	b2da      	uxtb	r2, r3
 80097da:	683b      	ldr	r3, [r7, #0]
 80097dc:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 80097de:	683b      	ldr	r3, [r7, #0]
 80097e0:	691b      	ldr	r3, [r3, #16]
 80097e2:	1c5a      	adds	r2, r3, #1
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 80097e8:	683b      	ldr	r3, [r7, #0]
 80097ea:	7e1b      	ldrb	r3, [r3, #24]
 80097ec:	b2db      	uxtb	r3, r3
 80097ee:	f003 0307 	and.w	r3, r3, #7
 80097f2:	3302      	adds	r3, #2
 80097f4:	2201      	movs	r2, #1
 80097f6:	fa02 f303 	lsl.w	r3, r2, r3
 80097fa:	687a      	ldr	r2, [r7, #4]
 80097fc:	6d52      	ldr	r2, [r2, #84]	; 0x54
 80097fe:	fb02 f203 	mul.w	r2, r2, r3
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8009806:	683b      	ldr	r3, [r7, #0]
 8009808:	7a1b      	ldrb	r3, [r3, #8]
 800980a:	b2db      	uxtb	r3, r3
 800980c:	f003 030f 	and.w	r3, r3, #15
 8009810:	2201      	movs	r2, #1
 8009812:	409a      	lsls	r2, r3
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800981c:	687a      	ldr	r2, [r7, #4]
 800981e:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8009820:	0a52      	lsrs	r2, r2, #9
 8009822:	fb02 f203 	mul.w	r2, r2, r3
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009830:	661a      	str	r2, [r3, #96]	; 0x60
 8009832:	e031      	b.n	8009898 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009838:	2b01      	cmp	r3, #1
 800983a:	d11d      	bne.n	8009878 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009840:	041b      	lsls	r3, r3, #16
 8009842:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800984a:	0c1b      	lsrs	r3, r3, #16
 800984c:	431a      	orrs	r2, r3
 800984e:	683b      	ldr	r3, [r7, #0]
 8009850:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8009852:	683b      	ldr	r3, [r7, #0]
 8009854:	691b      	ldr	r3, [r3, #16]
 8009856:	3301      	adds	r3, #1
 8009858:	029a      	lsls	r2, r3, #10
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	f44f 7200 	mov.w	r2, #512	; 0x200
 800986c:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	661a      	str	r2, [r3, #96]	; 0x60
 8009876:	e00f      	b.n	8009898 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	681b      	ldr	r3, [r3, #0]
 800987c:	4a58      	ldr	r2, [pc, #352]	; (80099e0 <HAL_SD_GetCardCSD+0x344>)
 800987e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009884:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	2201      	movs	r2, #1
 8009890:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8009894:	2301      	movs	r3, #1
 8009896:	e09d      	b.n	80099d4 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800989c:	0b9b      	lsrs	r3, r3, #14
 800989e:	b2db      	uxtb	r3, r3
 80098a0:	f003 0301 	and.w	r3, r3, #1
 80098a4:	b2da      	uxtb	r2, r3
 80098a6:	683b      	ldr	r3, [r7, #0]
 80098a8:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80098ae:	09db      	lsrs	r3, r3, #7
 80098b0:	b2db      	uxtb	r3, r3
 80098b2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80098b6:	b2da      	uxtb	r2, r3
 80098b8:	683b      	ldr	r3, [r7, #0]
 80098ba:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80098c0:	b2db      	uxtb	r3, r3
 80098c2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80098c6:	b2da      	uxtb	r2, r3
 80098c8:	683b      	ldr	r3, [r7, #0]
 80098ca:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80098d0:	0fdb      	lsrs	r3, r3, #31
 80098d2:	b2da      	uxtb	r2, r3
 80098d4:	683b      	ldr	r3, [r7, #0]
 80098d6:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80098dc:	0f5b      	lsrs	r3, r3, #29
 80098de:	b2db      	uxtb	r3, r3
 80098e0:	f003 0303 	and.w	r3, r3, #3
 80098e4:	b2da      	uxtb	r2, r3
 80098e6:	683b      	ldr	r3, [r7, #0]
 80098e8:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80098ee:	0e9b      	lsrs	r3, r3, #26
 80098f0:	b2db      	uxtb	r3, r3
 80098f2:	f003 0307 	and.w	r3, r3, #7
 80098f6:	b2da      	uxtb	r2, r3
 80098f8:	683b      	ldr	r3, [r7, #0]
 80098fa:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009900:	0d9b      	lsrs	r3, r3, #22
 8009902:	b2db      	uxtb	r3, r3
 8009904:	f003 030f 	and.w	r3, r3, #15
 8009908:	b2da      	uxtb	r2, r3
 800990a:	683b      	ldr	r3, [r7, #0]
 800990c:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009912:	0d5b      	lsrs	r3, r3, #21
 8009914:	b2db      	uxtb	r3, r3
 8009916:	f003 0301 	and.w	r3, r3, #1
 800991a:	b2da      	uxtb	r2, r3
 800991c:	683b      	ldr	r3, [r7, #0]
 800991e:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8009922:	683b      	ldr	r3, [r7, #0]
 8009924:	2200      	movs	r2, #0
 8009926:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800992e:	0c1b      	lsrs	r3, r3, #16
 8009930:	b2db      	uxtb	r3, r3
 8009932:	f003 0301 	and.w	r3, r3, #1
 8009936:	b2da      	uxtb	r2, r3
 8009938:	683b      	ldr	r3, [r7, #0]
 800993a:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009942:	0bdb      	lsrs	r3, r3, #15
 8009944:	b2db      	uxtb	r3, r3
 8009946:	f003 0301 	and.w	r3, r3, #1
 800994a:	b2da      	uxtb	r2, r3
 800994c:	683b      	ldr	r3, [r7, #0]
 800994e:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009956:	0b9b      	lsrs	r3, r3, #14
 8009958:	b2db      	uxtb	r3, r3
 800995a:	f003 0301 	and.w	r3, r3, #1
 800995e:	b2da      	uxtb	r2, r3
 8009960:	683b      	ldr	r3, [r7, #0]
 8009962:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800996a:	0b5b      	lsrs	r3, r3, #13
 800996c:	b2db      	uxtb	r3, r3
 800996e:	f003 0301 	and.w	r3, r3, #1
 8009972:	b2da      	uxtb	r2, r3
 8009974:	683b      	ldr	r3, [r7, #0]
 8009976:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800997e:	0b1b      	lsrs	r3, r3, #12
 8009980:	b2db      	uxtb	r3, r3
 8009982:	f003 0301 	and.w	r3, r3, #1
 8009986:	b2da      	uxtb	r2, r3
 8009988:	683b      	ldr	r3, [r7, #0]
 800998a:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009992:	0a9b      	lsrs	r3, r3, #10
 8009994:	b2db      	uxtb	r3, r3
 8009996:	f003 0303 	and.w	r3, r3, #3
 800999a:	b2da      	uxtb	r2, r3
 800999c:	683b      	ldr	r3, [r7, #0]
 800999e:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80099a6:	0a1b      	lsrs	r3, r3, #8
 80099a8:	b2db      	uxtb	r3, r3
 80099aa:	f003 0303 	and.w	r3, r3, #3
 80099ae:	b2da      	uxtb	r2, r3
 80099b0:	683b      	ldr	r3, [r7, #0]
 80099b2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80099ba:	085b      	lsrs	r3, r3, #1
 80099bc:	b2db      	uxtb	r3, r3
 80099be:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80099c2:	b2da      	uxtb	r2, r3
 80099c4:	683b      	ldr	r3, [r7, #0]
 80099c6:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 80099ca:	683b      	ldr	r3, [r7, #0]
 80099cc:	2201      	movs	r2, #1
 80099ce:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 80099d2:	2300      	movs	r3, #0
}
 80099d4:	4618      	mov	r0, r3
 80099d6:	370c      	adds	r7, #12
 80099d8:	46bd      	mov	sp, r7
 80099da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099de:	4770      	bx	lr
 80099e0:	004005ff 	.word	0x004005ff

080099e4 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 80099e4:	b480      	push	{r7}
 80099e6:	b083      	sub	sp, #12
 80099e8:	af00      	add	r7, sp, #0
 80099ea:	6078      	str	r0, [r7, #4]
 80099ec:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80099f2:	683b      	ldr	r3, [r7, #0]
 80099f4:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80099fa:	683b      	ldr	r3, [r7, #0]
 80099fc:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009a02:	683b      	ldr	r3, [r7, #0]
 8009a04:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009a0a:	683b      	ldr	r3, [r7, #0]
 8009a0c:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009a12:	683b      	ldr	r3, [r7, #0]
 8009a14:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8009a1a:	683b      	ldr	r3, [r7, #0]
 8009a1c:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8009a22:	683b      	ldr	r3, [r7, #0]
 8009a24:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8009a2a:	683b      	ldr	r3, [r7, #0]
 8009a2c:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8009a2e:	2300      	movs	r3, #0
}
 8009a30:	4618      	mov	r0, r3
 8009a32:	370c      	adds	r7, #12
 8009a34:	46bd      	mov	sp, r7
 8009a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a3a:	4770      	bx	lr

08009a3c <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8009a3c:	b5b0      	push	{r4, r5, r7, lr}
 8009a3e:	b08e      	sub	sp, #56	; 0x38
 8009a40:	af04      	add	r7, sp, #16
 8009a42:	6078      	str	r0, [r7, #4]
 8009a44:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	2203      	movs	r2, #3
 8009a4a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009a52:	2b03      	cmp	r3, #3
 8009a54:	d02e      	beq.n	8009ab4 <HAL_SD_ConfigWideBusOperation+0x78>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 8009a56:	683b      	ldr	r3, [r7, #0]
 8009a58:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009a5c:	d106      	bne.n	8009a6c <HAL_SD_ConfigWideBusOperation+0x30>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a62:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	639a      	str	r2, [r3, #56]	; 0x38
 8009a6a:	e029      	b.n	8009ac0 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 8009a6c:	683b      	ldr	r3, [r7, #0]
 8009a6e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009a72:	d10a      	bne.n	8009a8a <HAL_SD_ConfigWideBusOperation+0x4e>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8009a74:	6878      	ldr	r0, [r7, #4]
 8009a76:	f000 fb0f 	bl	800a098 <SD_WideBus_Enable>
 8009a7a:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009a80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a82:	431a      	orrs	r2, r3
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	639a      	str	r2, [r3, #56]	; 0x38
 8009a88:	e01a      	b.n	8009ac0 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 8009a8a:	683b      	ldr	r3, [r7, #0]
 8009a8c:	2b00      	cmp	r3, #0
 8009a8e:	d10a      	bne.n	8009aa6 <HAL_SD_ConfigWideBusOperation+0x6a>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8009a90:	6878      	ldr	r0, [r7, #4]
 8009a92:	f000 fb4c 	bl	800a12e <SD_WideBus_Disable>
 8009a96:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009a9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a9e:	431a      	orrs	r2, r3
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	639a      	str	r2, [r3, #56]	; 0x38
 8009aa4:	e00c      	b.n	8009ac0 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009aaa:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	639a      	str	r2, [r3, #56]	; 0x38
 8009ab2:	e005      	b.n	8009ac0 <HAL_SD_ConfigWideBusOperation+0x84>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ab8:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ac4:	2b00      	cmp	r3, #0
 8009ac6:	d009      	beq.n	8009adc <HAL_SD_ConfigWideBusOperation+0xa0>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	681b      	ldr	r3, [r3, #0]
 8009acc:	4a18      	ldr	r2, [pc, #96]	; (8009b30 <HAL_SD_ConfigWideBusOperation+0xf4>)
 8009ace:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	2201      	movs	r2, #1
 8009ad4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8009ad8:	2301      	movs	r3, #1
 8009ada:	e024      	b.n	8009b26 <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	685b      	ldr	r3, [r3, #4]
 8009ae0:	60fb      	str	r3, [r7, #12]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	689b      	ldr	r3, [r3, #8]
 8009ae6:	613b      	str	r3, [r7, #16]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	68db      	ldr	r3, [r3, #12]
 8009aec:	617b      	str	r3, [r7, #20]
    Init.BusWide             = WideMode;
 8009aee:	683b      	ldr	r3, [r7, #0]
 8009af0:	61bb      	str	r3, [r7, #24]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	695b      	ldr	r3, [r3, #20]
 8009af6:	61fb      	str	r3, [r7, #28]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	699b      	ldr	r3, [r3, #24]
 8009afc:	623b      	str	r3, [r7, #32]
    (void)SDIO_Init(hsd->Instance, Init);
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	681d      	ldr	r5, [r3, #0]
 8009b02:	466c      	mov	r4, sp
 8009b04:	f107 0318 	add.w	r3, r7, #24
 8009b08:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8009b0c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8009b10:	f107 030c 	add.w	r3, r7, #12
 8009b14:	cb0e      	ldmia	r3, {r1, r2, r3}
 8009b16:	4628      	mov	r0, r5
 8009b18:	f002 f800 	bl	800bb1c <SDIO_Init>
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	2201      	movs	r2, #1
 8009b20:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8009b24:	2300      	movs	r3, #0
}
 8009b26:	4618      	mov	r0, r3
 8009b28:	3728      	adds	r7, #40	; 0x28
 8009b2a:	46bd      	mov	sp, r7
 8009b2c:	bdb0      	pop	{r4, r5, r7, pc}
 8009b2e:	bf00      	nop
 8009b30:	004005ff 	.word	0x004005ff

08009b34 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8009b34:	b580      	push	{r7, lr}
 8009b36:	b086      	sub	sp, #24
 8009b38:	af00      	add	r7, sp, #0
 8009b3a:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8009b3c:	2300      	movs	r3, #0
 8009b3e:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8009b40:	f107 030c 	add.w	r3, r7, #12
 8009b44:	4619      	mov	r1, r3
 8009b46:	6878      	ldr	r0, [r7, #4]
 8009b48:	f000 fa7e 	bl	800a048 <SD_SendStatus>
 8009b4c:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009b4e:	697b      	ldr	r3, [r7, #20]
 8009b50:	2b00      	cmp	r3, #0
 8009b52:	d005      	beq.n	8009b60 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009b58:	697b      	ldr	r3, [r7, #20]
 8009b5a:	431a      	orrs	r2, r3
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8009b60:	68fb      	ldr	r3, [r7, #12]
 8009b62:	0a5b      	lsrs	r3, r3, #9
 8009b64:	f003 030f 	and.w	r3, r3, #15
 8009b68:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8009b6a:	693b      	ldr	r3, [r7, #16]
}
 8009b6c:	4618      	mov	r0, r3
 8009b6e:	3718      	adds	r7, #24
 8009b70:	46bd      	mov	sp, r7
 8009b72:	bd80      	pop	{r7, pc}

08009b74 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8009b74:	b480      	push	{r7}
 8009b76:	b085      	sub	sp, #20
 8009b78:	af00      	add	r7, sp, #0
 8009b7a:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b80:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DATAEND));
 8009b82:	68fb      	ldr	r3, [r7, #12]
 8009b84:	681b      	ldr	r3, [r3, #0]
 8009b86:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009b88:	68fb      	ldr	r3, [r7, #12]
 8009b8a:	681b      	ldr	r3, [r3, #0]
 8009b8c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009b90:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8009b92:	bf00      	nop
 8009b94:	3714      	adds	r7, #20
 8009b96:	46bd      	mov	sp, r7
 8009b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b9c:	4770      	bx	lr

08009b9e <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8009b9e:	b580      	push	{r7, lr}
 8009ba0:	b084      	sub	sp, #16
 8009ba2:	af00      	add	r7, sp, #0
 8009ba4:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009baa:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 8009bac:	68fb      	ldr	r3, [r7, #12]
 8009bae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009bb0:	2b82      	cmp	r3, #130	; 0x82
 8009bb2:	d111      	bne.n	8009bd8 <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8009bb4:	68fb      	ldr	r3, [r7, #12]
 8009bb6:	681b      	ldr	r3, [r3, #0]
 8009bb8:	4618      	mov	r0, r3
 8009bba:	f002 f935 	bl	800be28 <SDMMC_CmdStopTransfer>
 8009bbe:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009bc0:	68bb      	ldr	r3, [r7, #8]
 8009bc2:	2b00      	cmp	r3, #0
 8009bc4:	d008      	beq.n	8009bd8 <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 8009bc6:	68fb      	ldr	r3, [r7, #12]
 8009bc8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009bca:	68bb      	ldr	r3, [r7, #8]
 8009bcc:	431a      	orrs	r2, r3
 8009bce:	68fb      	ldr	r3, [r7, #12]
 8009bd0:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 8009bd2:	68f8      	ldr	r0, [r7, #12]
 8009bd4:	f7ff fd4e 	bl	8009674 <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 8009bd8:	68fb      	ldr	r3, [r7, #12]
 8009bda:	681b      	ldr	r3, [r3, #0]
 8009bdc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009bde:	68fb      	ldr	r3, [r7, #12]
 8009be0:	681b      	ldr	r3, [r3, #0]
 8009be2:	f022 0208 	bic.w	r2, r2, #8
 8009be6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8009be8:	68fb      	ldr	r3, [r7, #12]
 8009bea:	681b      	ldr	r3, [r3, #0]
 8009bec:	f240 523a 	movw	r2, #1338	; 0x53a
 8009bf0:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 8009bf2:	68fb      	ldr	r3, [r7, #12]
 8009bf4:	2201      	movs	r2, #1
 8009bf6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8009bfa:	68fb      	ldr	r3, [r7, #12]
 8009bfc:	2200      	movs	r2, #0
 8009bfe:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 8009c00:	68f8      	ldr	r0, [r7, #12]
 8009c02:	f7ff fd2d 	bl	8009660 <HAL_SD_RxCpltCallback>
#endif
}
 8009c06:	bf00      	nop
 8009c08:	3710      	adds	r7, #16
 8009c0a:	46bd      	mov	sp, r7
 8009c0c:	bd80      	pop	{r7, pc}
	...

08009c10 <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 8009c10:	b580      	push	{r7, lr}
 8009c12:	b086      	sub	sp, #24
 8009c14:	af00      	add	r7, sp, #0
 8009c16:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c1c:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8009c1e:	6878      	ldr	r0, [r7, #4]
 8009c20:	f7fb ff0c 	bl	8005a3c <HAL_DMA_GetError>
 8009c24:	4603      	mov	r3, r0
 8009c26:	2b02      	cmp	r3, #2
 8009c28:	d03e      	beq.n	8009ca8 <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 8009c2a:	697b      	ldr	r3, [r7, #20]
 8009c2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009c30:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 8009c32:	697b      	ldr	r3, [r7, #20]
 8009c34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009c36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009c38:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 8009c3a:	693b      	ldr	r3, [r7, #16]
 8009c3c:	2b01      	cmp	r3, #1
 8009c3e:	d002      	beq.n	8009c46 <SD_DMAError+0x36>
 8009c40:	68fb      	ldr	r3, [r7, #12]
 8009c42:	2b01      	cmp	r3, #1
 8009c44:	d12d      	bne.n	8009ca2 <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8009c46:	697b      	ldr	r3, [r7, #20]
 8009c48:	681b      	ldr	r3, [r3, #0]
 8009c4a:	4a19      	ldr	r2, [pc, #100]	; (8009cb0 <SD_DMAError+0xa0>)
 8009c4c:	639a      	str	r2, [r3, #56]	; 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8009c4e:	697b      	ldr	r3, [r7, #20]
 8009c50:	681b      	ldr	r3, [r3, #0]
 8009c52:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009c54:	697b      	ldr	r3, [r7, #20]
 8009c56:	681b      	ldr	r3, [r3, #0]
 8009c58:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8009c5c:	63da      	str	r2, [r3, #60]	; 0x3c
        SDIO_IT_TXUNDERR| SDIO_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8009c5e:	697b      	ldr	r3, [r7, #20]
 8009c60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c62:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8009c66:	697b      	ldr	r3, [r7, #20]
 8009c68:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 8009c6a:	6978      	ldr	r0, [r7, #20]
 8009c6c:	f7ff ff62 	bl	8009b34 <HAL_SD_GetCardState>
 8009c70:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8009c72:	68bb      	ldr	r3, [r7, #8]
 8009c74:	2b06      	cmp	r3, #6
 8009c76:	d002      	beq.n	8009c7e <SD_DMAError+0x6e>
 8009c78:	68bb      	ldr	r3, [r7, #8]
 8009c7a:	2b05      	cmp	r3, #5
 8009c7c:	d10a      	bne.n	8009c94 <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8009c7e:	697b      	ldr	r3, [r7, #20]
 8009c80:	681b      	ldr	r3, [r3, #0]
 8009c82:	4618      	mov	r0, r3
 8009c84:	f002 f8d0 	bl	800be28 <SDMMC_CmdStopTransfer>
 8009c88:	4602      	mov	r2, r0
 8009c8a:	697b      	ldr	r3, [r7, #20]
 8009c8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c8e:	431a      	orrs	r2, r3
 8009c90:	697b      	ldr	r3, [r7, #20]
 8009c92:	639a      	str	r2, [r3, #56]	; 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 8009c94:	697b      	ldr	r3, [r7, #20]
 8009c96:	2201      	movs	r2, #1
 8009c98:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8009c9c:	697b      	ldr	r3, [r7, #20]
 8009c9e:	2200      	movs	r2, #0
 8009ca0:	631a      	str	r2, [r3, #48]	; 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 8009ca2:	6978      	ldr	r0, [r7, #20]
 8009ca4:	f7ff fce6 	bl	8009674 <HAL_SD_ErrorCallback>
#endif
  }
}
 8009ca8:	bf00      	nop
 8009caa:	3718      	adds	r7, #24
 8009cac:	46bd      	mov	sp, r7
 8009cae:	bd80      	pop	{r7, pc}
 8009cb0:	004005ff 	.word	0x004005ff

08009cb4 <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 8009cb4:	b580      	push	{r7, lr}
 8009cb6:	b084      	sub	sp, #16
 8009cb8:	af00      	add	r7, sp, #0
 8009cba:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009cc0:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8009cc2:	68fb      	ldr	r3, [r7, #12]
 8009cc4:	681b      	ldr	r3, [r3, #0]
 8009cc6:	f240 523a 	movw	r2, #1338	; 0x53a
 8009cca:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8009ccc:	68f8      	ldr	r0, [r7, #12]
 8009cce:	f7ff ff31 	bl	8009b34 <HAL_SD_GetCardState>
 8009cd2:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8009cd4:	68fb      	ldr	r3, [r7, #12]
 8009cd6:	2201      	movs	r2, #1
 8009cd8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8009cdc:	68fb      	ldr	r3, [r7, #12]
 8009cde:	2200      	movs	r2, #0
 8009ce0:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8009ce2:	68bb      	ldr	r3, [r7, #8]
 8009ce4:	2b06      	cmp	r3, #6
 8009ce6:	d002      	beq.n	8009cee <SD_DMATxAbort+0x3a>
 8009ce8:	68bb      	ldr	r3, [r7, #8]
 8009cea:	2b05      	cmp	r3, #5
 8009cec:	d10a      	bne.n	8009d04 <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8009cee:	68fb      	ldr	r3, [r7, #12]
 8009cf0:	681b      	ldr	r3, [r3, #0]
 8009cf2:	4618      	mov	r0, r3
 8009cf4:	f002 f898 	bl	800be28 <SDMMC_CmdStopTransfer>
 8009cf8:	4602      	mov	r2, r0
 8009cfa:	68fb      	ldr	r3, [r7, #12]
 8009cfc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009cfe:	431a      	orrs	r2, r3
 8009d00:	68fb      	ldr	r3, [r7, #12]
 8009d02:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8009d04:	68fb      	ldr	r3, [r7, #12]
 8009d06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d08:	2b00      	cmp	r3, #0
 8009d0a:	d103      	bne.n	8009d14 <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8009d0c:	68f8      	ldr	r0, [r7, #12]
 8009d0e:	f7ff fcbb 	bl	8009688 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8009d12:	e002      	b.n	8009d1a <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8009d14:	68f8      	ldr	r0, [r7, #12]
 8009d16:	f7ff fcad 	bl	8009674 <HAL_SD_ErrorCallback>
}
 8009d1a:	bf00      	nop
 8009d1c:	3710      	adds	r7, #16
 8009d1e:	46bd      	mov	sp, r7
 8009d20:	bd80      	pop	{r7, pc}

08009d22 <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 8009d22:	b580      	push	{r7, lr}
 8009d24:	b084      	sub	sp, #16
 8009d26:	af00      	add	r7, sp, #0
 8009d28:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d2e:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8009d30:	68fb      	ldr	r3, [r7, #12]
 8009d32:	681b      	ldr	r3, [r3, #0]
 8009d34:	f240 523a 	movw	r2, #1338	; 0x53a
 8009d38:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8009d3a:	68f8      	ldr	r0, [r7, #12]
 8009d3c:	f7ff fefa 	bl	8009b34 <HAL_SD_GetCardState>
 8009d40:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8009d42:	68fb      	ldr	r3, [r7, #12]
 8009d44:	2201      	movs	r2, #1
 8009d46:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8009d4a:	68fb      	ldr	r3, [r7, #12]
 8009d4c:	2200      	movs	r2, #0
 8009d4e:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8009d50:	68bb      	ldr	r3, [r7, #8]
 8009d52:	2b06      	cmp	r3, #6
 8009d54:	d002      	beq.n	8009d5c <SD_DMARxAbort+0x3a>
 8009d56:	68bb      	ldr	r3, [r7, #8]
 8009d58:	2b05      	cmp	r3, #5
 8009d5a:	d10a      	bne.n	8009d72 <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8009d5c:	68fb      	ldr	r3, [r7, #12]
 8009d5e:	681b      	ldr	r3, [r3, #0]
 8009d60:	4618      	mov	r0, r3
 8009d62:	f002 f861 	bl	800be28 <SDMMC_CmdStopTransfer>
 8009d66:	4602      	mov	r2, r0
 8009d68:	68fb      	ldr	r3, [r7, #12]
 8009d6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d6c:	431a      	orrs	r2, r3
 8009d6e:	68fb      	ldr	r3, [r7, #12]
 8009d70:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8009d72:	68fb      	ldr	r3, [r7, #12]
 8009d74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d76:	2b00      	cmp	r3, #0
 8009d78:	d103      	bne.n	8009d82 <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8009d7a:	68f8      	ldr	r0, [r7, #12]
 8009d7c:	f7ff fc84 	bl	8009688 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8009d80:	e002      	b.n	8009d88 <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8009d82:	68f8      	ldr	r0, [r7, #12]
 8009d84:	f7ff fc76 	bl	8009674 <HAL_SD_ErrorCallback>
}
 8009d88:	bf00      	nop
 8009d8a:	3710      	adds	r7, #16
 8009d8c:	46bd      	mov	sp, r7
 8009d8e:	bd80      	pop	{r7, pc}

08009d90 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8009d90:	b5b0      	push	{r4, r5, r7, lr}
 8009d92:	b094      	sub	sp, #80	; 0x50
 8009d94:	af04      	add	r7, sp, #16
 8009d96:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8009d98:	2301      	movs	r3, #1
 8009d9a:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	681b      	ldr	r3, [r3, #0]
 8009da0:	4618      	mov	r0, r3
 8009da2:	f001 ff13 	bl	800bbcc <SDIO_GetPowerState>
 8009da6:	4603      	mov	r3, r0
 8009da8:	2b00      	cmp	r3, #0
 8009daa:	d102      	bne.n	8009db2 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8009dac:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8009db0:	e0b7      	b.n	8009f22 <SD_InitCard+0x192>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009db6:	2b03      	cmp	r3, #3
 8009db8:	d02f      	beq.n	8009e1a <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	681b      	ldr	r3, [r3, #0]
 8009dbe:	4618      	mov	r0, r3
 8009dc0:	f002 f93c 	bl	800c03c <SDMMC_CmdSendCID>
 8009dc4:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8009dc6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009dc8:	2b00      	cmp	r3, #0
 8009dca:	d001      	beq.n	8009dd0 <SD_InitCard+0x40>
    {
      return errorstate;
 8009dcc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009dce:	e0a8      	b.n	8009f22 <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	681b      	ldr	r3, [r3, #0]
 8009dd4:	2100      	movs	r1, #0
 8009dd6:	4618      	mov	r0, r3
 8009dd8:	f001 ff3d 	bl	800bc56 <SDIO_GetResponse>
 8009ddc:	4602      	mov	r2, r0
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	681b      	ldr	r3, [r3, #0]
 8009de6:	2104      	movs	r1, #4
 8009de8:	4618      	mov	r0, r3
 8009dea:	f001 ff34 	bl	800bc56 <SDIO_GetResponse>
 8009dee:	4602      	mov	r2, r0
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	681b      	ldr	r3, [r3, #0]
 8009df8:	2108      	movs	r1, #8
 8009dfa:	4618      	mov	r0, r3
 8009dfc:	f001 ff2b 	bl	800bc56 <SDIO_GetResponse>
 8009e00:	4602      	mov	r2, r0
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	681b      	ldr	r3, [r3, #0]
 8009e0a:	210c      	movs	r1, #12
 8009e0c:	4618      	mov	r0, r3
 8009e0e:	f001 ff22 	bl	800bc56 <SDIO_GetResponse>
 8009e12:	4602      	mov	r2, r0
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009e1e:	2b03      	cmp	r3, #3
 8009e20:	d00d      	beq.n	8009e3e <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	681b      	ldr	r3, [r3, #0]
 8009e26:	f107 020e 	add.w	r2, r7, #14
 8009e2a:	4611      	mov	r1, r2
 8009e2c:	4618      	mov	r0, r3
 8009e2e:	f002 f942 	bl	800c0b6 <SDMMC_CmdSetRelAdd>
 8009e32:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8009e34:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009e36:	2b00      	cmp	r3, #0
 8009e38:	d001      	beq.n	8009e3e <SD_InitCard+0xae>
    {
      return errorstate;
 8009e3a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009e3c:	e071      	b.n	8009f22 <SD_InitCard+0x192>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009e42:	2b03      	cmp	r3, #3
 8009e44:	d036      	beq.n	8009eb4 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8009e46:	89fb      	ldrh	r3, [r7, #14]
 8009e48:	461a      	mov	r2, r3
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	681a      	ldr	r2, [r3, #0]
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009e56:	041b      	lsls	r3, r3, #16
 8009e58:	4619      	mov	r1, r3
 8009e5a:	4610      	mov	r0, r2
 8009e5c:	f002 f90c 	bl	800c078 <SDMMC_CmdSendCSD>
 8009e60:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8009e62:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009e64:	2b00      	cmp	r3, #0
 8009e66:	d001      	beq.n	8009e6c <SD_InitCard+0xdc>
    {
      return errorstate;
 8009e68:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009e6a:	e05a      	b.n	8009f22 <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	681b      	ldr	r3, [r3, #0]
 8009e70:	2100      	movs	r1, #0
 8009e72:	4618      	mov	r0, r3
 8009e74:	f001 feef 	bl	800bc56 <SDIO_GetResponse>
 8009e78:	4602      	mov	r2, r0
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	681b      	ldr	r3, [r3, #0]
 8009e82:	2104      	movs	r1, #4
 8009e84:	4618      	mov	r0, r3
 8009e86:	f001 fee6 	bl	800bc56 <SDIO_GetResponse>
 8009e8a:	4602      	mov	r2, r0
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	681b      	ldr	r3, [r3, #0]
 8009e94:	2108      	movs	r1, #8
 8009e96:	4618      	mov	r0, r3
 8009e98:	f001 fedd 	bl	800bc56 <SDIO_GetResponse>
 8009e9c:	4602      	mov	r2, r0
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	681b      	ldr	r3, [r3, #0]
 8009ea6:	210c      	movs	r1, #12
 8009ea8:	4618      	mov	r0, r3
 8009eaa:	f001 fed4 	bl	800bc56 <SDIO_GetResponse>
 8009eae:	4602      	mov	r2, r0
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	681b      	ldr	r3, [r3, #0]
 8009eb8:	2104      	movs	r1, #4
 8009eba:	4618      	mov	r0, r3
 8009ebc:	f001 fecb 	bl	800bc56 <SDIO_GetResponse>
 8009ec0:	4603      	mov	r3, r0
 8009ec2:	0d1a      	lsrs	r2, r3, #20
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8009ec8:	f107 0310 	add.w	r3, r7, #16
 8009ecc:	4619      	mov	r1, r3
 8009ece:	6878      	ldr	r0, [r7, #4]
 8009ed0:	f7ff fbe4 	bl	800969c <HAL_SD_GetCardCSD>
 8009ed4:	4603      	mov	r3, r0
 8009ed6:	2b00      	cmp	r3, #0
 8009ed8:	d002      	beq.n	8009ee0 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009eda:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8009ede:	e020      	b.n	8009f22 <SD_InitCard+0x192>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	6819      	ldr	r1, [r3, #0]
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009ee8:	041b      	lsls	r3, r3, #16
 8009eea:	f04f 0400 	mov.w	r4, #0
 8009eee:	461a      	mov	r2, r3
 8009ef0:	4623      	mov	r3, r4
 8009ef2:	4608      	mov	r0, r1
 8009ef4:	f001 ffba 	bl	800be6c <SDMMC_CmdSelDesel>
 8009ef8:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8009efa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009efc:	2b00      	cmp	r3, #0
 8009efe:	d001      	beq.n	8009f04 <SD_InitCard+0x174>
  {
    return errorstate;
 8009f00:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009f02:	e00e      	b.n	8009f22 <SD_InitCard+0x192>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	681d      	ldr	r5, [r3, #0]
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	466c      	mov	r4, sp
 8009f0c:	f103 0210 	add.w	r2, r3, #16
 8009f10:	ca07      	ldmia	r2, {r0, r1, r2}
 8009f12:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8009f16:	3304      	adds	r3, #4
 8009f18:	cb0e      	ldmia	r3, {r1, r2, r3}
 8009f1a:	4628      	mov	r0, r5
 8009f1c:	f001 fdfe 	bl	800bb1c <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8009f20:	2300      	movs	r3, #0
}
 8009f22:	4618      	mov	r0, r3
 8009f24:	3740      	adds	r7, #64	; 0x40
 8009f26:	46bd      	mov	sp, r7
 8009f28:	bdb0      	pop	{r4, r5, r7, pc}
	...

08009f2c <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8009f2c:	b580      	push	{r7, lr}
 8009f2e:	b086      	sub	sp, #24
 8009f30:	af00      	add	r7, sp, #0
 8009f32:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009f34:	2300      	movs	r3, #0
 8009f36:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8009f38:	2300      	movs	r3, #0
 8009f3a:	617b      	str	r3, [r7, #20]
 8009f3c:	2300      	movs	r3, #0
 8009f3e:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	681b      	ldr	r3, [r3, #0]
 8009f44:	4618      	mov	r0, r3
 8009f46:	f001 ffb4 	bl	800beb2 <SDMMC_CmdGoIdleState>
 8009f4a:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009f4c:	68fb      	ldr	r3, [r7, #12]
 8009f4e:	2b00      	cmp	r3, #0
 8009f50:	d001      	beq.n	8009f56 <SD_PowerON+0x2a>
  {
    return errorstate;
 8009f52:	68fb      	ldr	r3, [r7, #12]
 8009f54:	e072      	b.n	800a03c <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	681b      	ldr	r3, [r3, #0]
 8009f5a:	4618      	mov	r0, r3
 8009f5c:	f001 ffc7 	bl	800beee <SDMMC_CmdOperCond>
 8009f60:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009f62:	68fb      	ldr	r3, [r7, #12]
 8009f64:	2b00      	cmp	r3, #0
 8009f66:	d00d      	beq.n	8009f84 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	2200      	movs	r2, #0
 8009f6c:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	681b      	ldr	r3, [r3, #0]
 8009f72:	4618      	mov	r0, r3
 8009f74:	f001 ff9d 	bl	800beb2 <SDMMC_CmdGoIdleState>
 8009f78:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009f7a:	68fb      	ldr	r3, [r7, #12]
 8009f7c:	2b00      	cmp	r3, #0
 8009f7e:	d004      	beq.n	8009f8a <SD_PowerON+0x5e>
    {
      return errorstate;
 8009f80:	68fb      	ldr	r3, [r7, #12]
 8009f82:	e05b      	b.n	800a03c <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	2201      	movs	r2, #1
 8009f88:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009f8e:	2b01      	cmp	r3, #1
 8009f90:	d137      	bne.n	800a002 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	681b      	ldr	r3, [r3, #0]
 8009f96:	2100      	movs	r1, #0
 8009f98:	4618      	mov	r0, r3
 8009f9a:	f001 ffc7 	bl	800bf2c <SDMMC_CmdAppCommand>
 8009f9e:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009fa0:	68fb      	ldr	r3, [r7, #12]
 8009fa2:	2b00      	cmp	r3, #0
 8009fa4:	d02d      	beq.n	800a002 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009fa6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8009faa:	e047      	b.n	800a03c <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	681b      	ldr	r3, [r3, #0]
 8009fb0:	2100      	movs	r1, #0
 8009fb2:	4618      	mov	r0, r3
 8009fb4:	f001 ffba 	bl	800bf2c <SDMMC_CmdAppCommand>
 8009fb8:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009fba:	68fb      	ldr	r3, [r7, #12]
 8009fbc:	2b00      	cmp	r3, #0
 8009fbe:	d001      	beq.n	8009fc4 <SD_PowerON+0x98>
    {
      return errorstate;
 8009fc0:	68fb      	ldr	r3, [r7, #12]
 8009fc2:	e03b      	b.n	800a03c <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	681b      	ldr	r3, [r3, #0]
 8009fc8:	491e      	ldr	r1, [pc, #120]	; (800a044 <SD_PowerON+0x118>)
 8009fca:	4618      	mov	r0, r3
 8009fcc:	f001 ffd0 	bl	800bf70 <SDMMC_CmdAppOperCommand>
 8009fd0:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009fd2:	68fb      	ldr	r3, [r7, #12]
 8009fd4:	2b00      	cmp	r3, #0
 8009fd6:	d002      	beq.n	8009fde <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009fd8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8009fdc:	e02e      	b.n	800a03c <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	681b      	ldr	r3, [r3, #0]
 8009fe2:	2100      	movs	r1, #0
 8009fe4:	4618      	mov	r0, r3
 8009fe6:	f001 fe36 	bl	800bc56 <SDIO_GetResponse>
 8009fea:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8009fec:	697b      	ldr	r3, [r7, #20]
 8009fee:	0fdb      	lsrs	r3, r3, #31
 8009ff0:	2b01      	cmp	r3, #1
 8009ff2:	d101      	bne.n	8009ff8 <SD_PowerON+0xcc>
 8009ff4:	2301      	movs	r3, #1
 8009ff6:	e000      	b.n	8009ffa <SD_PowerON+0xce>
 8009ff8:	2300      	movs	r3, #0
 8009ffa:	613b      	str	r3, [r7, #16]

    count++;
 8009ffc:	68bb      	ldr	r3, [r7, #8]
 8009ffe:	3301      	adds	r3, #1
 800a000:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800a002:	68bb      	ldr	r3, [r7, #8]
 800a004:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800a008:	4293      	cmp	r3, r2
 800a00a:	d802      	bhi.n	800a012 <SD_PowerON+0xe6>
 800a00c:	693b      	ldr	r3, [r7, #16]
 800a00e:	2b00      	cmp	r3, #0
 800a010:	d0cc      	beq.n	8009fac <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800a012:	68bb      	ldr	r3, [r7, #8]
 800a014:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800a018:	4293      	cmp	r3, r2
 800a01a:	d902      	bls.n	800a022 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800a01c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800a020:	e00c      	b.n	800a03c <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800a022:	697b      	ldr	r3, [r7, #20]
 800a024:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800a028:	2b00      	cmp	r3, #0
 800a02a:	d003      	beq.n	800a034 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	2201      	movs	r2, #1
 800a030:	645a      	str	r2, [r3, #68]	; 0x44
 800a032:	e002      	b.n	800a03a <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	2200      	movs	r2, #0
 800a038:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 800a03a:	2300      	movs	r3, #0
}
 800a03c:	4618      	mov	r0, r3
 800a03e:	3718      	adds	r7, #24
 800a040:	46bd      	mov	sp, r7
 800a042:	bd80      	pop	{r7, pc}
 800a044:	c1100000 	.word	0xc1100000

0800a048 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800a048:	b580      	push	{r7, lr}
 800a04a:	b084      	sub	sp, #16
 800a04c:	af00      	add	r7, sp, #0
 800a04e:	6078      	str	r0, [r7, #4]
 800a050:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800a052:	683b      	ldr	r3, [r7, #0]
 800a054:	2b00      	cmp	r3, #0
 800a056:	d102      	bne.n	800a05e <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800a058:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800a05c:	e018      	b.n	800a090 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	681a      	ldr	r2, [r3, #0]
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a066:	041b      	lsls	r3, r3, #16
 800a068:	4619      	mov	r1, r3
 800a06a:	4610      	mov	r0, r2
 800a06c:	f002 f844 	bl	800c0f8 <SDMMC_CmdSendStatus>
 800a070:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800a072:	68fb      	ldr	r3, [r7, #12]
 800a074:	2b00      	cmp	r3, #0
 800a076:	d001      	beq.n	800a07c <SD_SendStatus+0x34>
  {
    return errorstate;
 800a078:	68fb      	ldr	r3, [r7, #12]
 800a07a:	e009      	b.n	800a090 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	681b      	ldr	r3, [r3, #0]
 800a080:	2100      	movs	r1, #0
 800a082:	4618      	mov	r0, r3
 800a084:	f001 fde7 	bl	800bc56 <SDIO_GetResponse>
 800a088:	4602      	mov	r2, r0
 800a08a:	683b      	ldr	r3, [r7, #0]
 800a08c:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800a08e:	2300      	movs	r3, #0
}
 800a090:	4618      	mov	r0, r3
 800a092:	3710      	adds	r7, #16
 800a094:	46bd      	mov	sp, r7
 800a096:	bd80      	pop	{r7, pc}

0800a098 <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800a098:	b580      	push	{r7, lr}
 800a09a:	b086      	sub	sp, #24
 800a09c:	af00      	add	r7, sp, #0
 800a09e:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800a0a0:	2300      	movs	r3, #0
 800a0a2:	60fb      	str	r3, [r7, #12]
 800a0a4:	2300      	movs	r3, #0
 800a0a6:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	681b      	ldr	r3, [r3, #0]
 800a0ac:	2100      	movs	r1, #0
 800a0ae:	4618      	mov	r0, r3
 800a0b0:	f001 fdd1 	bl	800bc56 <SDIO_GetResponse>
 800a0b4:	4603      	mov	r3, r0
 800a0b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a0ba:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a0be:	d102      	bne.n	800a0c6 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800a0c0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800a0c4:	e02f      	b.n	800a126 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800a0c6:	f107 030c 	add.w	r3, r7, #12
 800a0ca:	4619      	mov	r1, r3
 800a0cc:	6878      	ldr	r0, [r7, #4]
 800a0ce:	f000 f879 	bl	800a1c4 <SD_FindSCR>
 800a0d2:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800a0d4:	697b      	ldr	r3, [r7, #20]
 800a0d6:	2b00      	cmp	r3, #0
 800a0d8:	d001      	beq.n	800a0de <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800a0da:	697b      	ldr	r3, [r7, #20]
 800a0dc:	e023      	b.n	800a126 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800a0de:	693b      	ldr	r3, [r7, #16]
 800a0e0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a0e4:	2b00      	cmp	r3, #0
 800a0e6:	d01c      	beq.n	800a122 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	681a      	ldr	r2, [r3, #0]
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a0f0:	041b      	lsls	r3, r3, #16
 800a0f2:	4619      	mov	r1, r3
 800a0f4:	4610      	mov	r0, r2
 800a0f6:	f001 ff19 	bl	800bf2c <SDMMC_CmdAppCommand>
 800a0fa:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800a0fc:	697b      	ldr	r3, [r7, #20]
 800a0fe:	2b00      	cmp	r3, #0
 800a100:	d001      	beq.n	800a106 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800a102:	697b      	ldr	r3, [r7, #20]
 800a104:	e00f      	b.n	800a126 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	681b      	ldr	r3, [r3, #0]
 800a10a:	2102      	movs	r1, #2
 800a10c:	4618      	mov	r0, r3
 800a10e:	f001 ff52 	bl	800bfb6 <SDMMC_CmdBusWidth>
 800a112:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800a114:	697b      	ldr	r3, [r7, #20]
 800a116:	2b00      	cmp	r3, #0
 800a118:	d001      	beq.n	800a11e <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800a11a:	697b      	ldr	r3, [r7, #20]
 800a11c:	e003      	b.n	800a126 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800a11e:	2300      	movs	r3, #0
 800a120:	e001      	b.n	800a126 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800a122:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800a126:	4618      	mov	r0, r3
 800a128:	3718      	adds	r7, #24
 800a12a:	46bd      	mov	sp, r7
 800a12c:	bd80      	pop	{r7, pc}

0800a12e <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800a12e:	b580      	push	{r7, lr}
 800a130:	b086      	sub	sp, #24
 800a132:	af00      	add	r7, sp, #0
 800a134:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800a136:	2300      	movs	r3, #0
 800a138:	60fb      	str	r3, [r7, #12]
 800a13a:	2300      	movs	r3, #0
 800a13c:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	681b      	ldr	r3, [r3, #0]
 800a142:	2100      	movs	r1, #0
 800a144:	4618      	mov	r0, r3
 800a146:	f001 fd86 	bl	800bc56 <SDIO_GetResponse>
 800a14a:	4603      	mov	r3, r0
 800a14c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a150:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a154:	d102      	bne.n	800a15c <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800a156:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800a15a:	e02f      	b.n	800a1bc <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800a15c:	f107 030c 	add.w	r3, r7, #12
 800a160:	4619      	mov	r1, r3
 800a162:	6878      	ldr	r0, [r7, #4]
 800a164:	f000 f82e 	bl	800a1c4 <SD_FindSCR>
 800a168:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800a16a:	697b      	ldr	r3, [r7, #20]
 800a16c:	2b00      	cmp	r3, #0
 800a16e:	d001      	beq.n	800a174 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800a170:	697b      	ldr	r3, [r7, #20]
 800a172:	e023      	b.n	800a1bc <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800a174:	693b      	ldr	r3, [r7, #16]
 800a176:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a17a:	2b00      	cmp	r3, #0
 800a17c:	d01c      	beq.n	800a1b8 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	681a      	ldr	r2, [r3, #0]
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a186:	041b      	lsls	r3, r3, #16
 800a188:	4619      	mov	r1, r3
 800a18a:	4610      	mov	r0, r2
 800a18c:	f001 fece 	bl	800bf2c <SDMMC_CmdAppCommand>
 800a190:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800a192:	697b      	ldr	r3, [r7, #20]
 800a194:	2b00      	cmp	r3, #0
 800a196:	d001      	beq.n	800a19c <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800a198:	697b      	ldr	r3, [r7, #20]
 800a19a:	e00f      	b.n	800a1bc <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	681b      	ldr	r3, [r3, #0]
 800a1a0:	2100      	movs	r1, #0
 800a1a2:	4618      	mov	r0, r3
 800a1a4:	f001 ff07 	bl	800bfb6 <SDMMC_CmdBusWidth>
 800a1a8:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800a1aa:	697b      	ldr	r3, [r7, #20]
 800a1ac:	2b00      	cmp	r3, #0
 800a1ae:	d001      	beq.n	800a1b4 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800a1b0:	697b      	ldr	r3, [r7, #20]
 800a1b2:	e003      	b.n	800a1bc <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800a1b4:	2300      	movs	r3, #0
 800a1b6:	e001      	b.n	800a1bc <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800a1b8:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800a1bc:	4618      	mov	r0, r3
 800a1be:	3718      	adds	r7, #24
 800a1c0:	46bd      	mov	sp, r7
 800a1c2:	bd80      	pop	{r7, pc}

0800a1c4 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800a1c4:	b590      	push	{r4, r7, lr}
 800a1c6:	b08f      	sub	sp, #60	; 0x3c
 800a1c8:	af00      	add	r7, sp, #0
 800a1ca:	6078      	str	r0, [r7, #4]
 800a1cc:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800a1ce:	f7fb f843 	bl	8005258 <HAL_GetTick>
 800a1d2:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 800a1d4:	2300      	movs	r3, #0
 800a1d6:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 800a1d8:	2300      	movs	r3, #0
 800a1da:	60bb      	str	r3, [r7, #8]
 800a1dc:	2300      	movs	r3, #0
 800a1de:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800a1e0:	683b      	ldr	r3, [r7, #0]
 800a1e2:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	681b      	ldr	r3, [r3, #0]
 800a1e8:	2108      	movs	r1, #8
 800a1ea:	4618      	mov	r0, r3
 800a1ec:	f001 fd72 	bl	800bcd4 <SDMMC_CmdBlockLength>
 800a1f0:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800a1f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1f4:	2b00      	cmp	r3, #0
 800a1f6:	d001      	beq.n	800a1fc <SD_FindSCR+0x38>
  {
    return errorstate;
 800a1f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1fa:	e0a9      	b.n	800a350 <SD_FindSCR+0x18c>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	681a      	ldr	r2, [r3, #0]
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a204:	041b      	lsls	r3, r3, #16
 800a206:	4619      	mov	r1, r3
 800a208:	4610      	mov	r0, r2
 800a20a:	f001 fe8f 	bl	800bf2c <SDMMC_CmdAppCommand>
 800a20e:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800a210:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a212:	2b00      	cmp	r3, #0
 800a214:	d001      	beq.n	800a21a <SD_FindSCR+0x56>
  {
    return errorstate;
 800a216:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a218:	e09a      	b.n	800a350 <SD_FindSCR+0x18c>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800a21a:	f04f 33ff 	mov.w	r3, #4294967295
 800a21e:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800a220:	2308      	movs	r3, #8
 800a222:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 800a224:	2330      	movs	r3, #48	; 0x30
 800a226:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 800a228:	2302      	movs	r3, #2
 800a22a:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800a22c:	2300      	movs	r3, #0
 800a22e:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 800a230:	2301      	movs	r3, #1
 800a232:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	681b      	ldr	r3, [r3, #0]
 800a238:	f107 0210 	add.w	r2, r7, #16
 800a23c:	4611      	mov	r1, r2
 800a23e:	4618      	mov	r0, r3
 800a240:	f001 fd1c 	bl	800bc7c <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	681b      	ldr	r3, [r3, #0]
 800a248:	4618      	mov	r0, r3
 800a24a:	f001 fed6 	bl	800bffa <SDMMC_CmdSendSCR>
 800a24e:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800a250:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a252:	2b00      	cmp	r3, #0
 800a254:	d022      	beq.n	800a29c <SD_FindSCR+0xd8>
  {
    return errorstate;
 800a256:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a258:	e07a      	b.n	800a350 <SD_FindSCR+0x18c>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	681b      	ldr	r3, [r3, #0]
 800a25e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a260:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a264:	2b00      	cmp	r3, #0
 800a266:	d00e      	beq.n	800a286 <SD_FindSCR+0xc2>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	6819      	ldr	r1, [r3, #0]
 800a26c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a26e:	009b      	lsls	r3, r3, #2
 800a270:	f107 0208 	add.w	r2, r7, #8
 800a274:	18d4      	adds	r4, r2, r3
 800a276:	4608      	mov	r0, r1
 800a278:	f001 fc7b 	bl	800bb72 <SDIO_ReadFIFO>
 800a27c:	4603      	mov	r3, r0
 800a27e:	6023      	str	r3, [r4, #0]
      index++;
 800a280:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a282:	3301      	adds	r3, #1
 800a284:	637b      	str	r3, [r7, #52]	; 0x34
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800a286:	f7fa ffe7 	bl	8005258 <HAL_GetTick>
 800a28a:	4602      	mov	r2, r0
 800a28c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a28e:	1ad3      	subs	r3, r2, r3
 800a290:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a294:	d102      	bne.n	800a29c <SD_FindSCR+0xd8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800a296:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a29a:	e059      	b.n	800a350 <SD_FindSCR+0x18c>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	681b      	ldr	r3, [r3, #0]
 800a2a0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a2a2:	f240 432a 	movw	r3, #1066	; 0x42a
 800a2a6:	4013      	ands	r3, r2
 800a2a8:	2b00      	cmp	r3, #0
 800a2aa:	d0d6      	beq.n	800a25a <SD_FindSCR+0x96>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	681b      	ldr	r3, [r3, #0]
 800a2b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a2b2:	f003 0308 	and.w	r3, r3, #8
 800a2b6:	2b00      	cmp	r3, #0
 800a2b8:	d005      	beq.n	800a2c6 <SD_FindSCR+0x102>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	681b      	ldr	r3, [r3, #0]
 800a2be:	2208      	movs	r2, #8
 800a2c0:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800a2c2:	2308      	movs	r3, #8
 800a2c4:	e044      	b.n	800a350 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	681b      	ldr	r3, [r3, #0]
 800a2ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a2cc:	f003 0302 	and.w	r3, r3, #2
 800a2d0:	2b00      	cmp	r3, #0
 800a2d2:	d005      	beq.n	800a2e0 <SD_FindSCR+0x11c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	681b      	ldr	r3, [r3, #0]
 800a2d8:	2202      	movs	r2, #2
 800a2da:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800a2dc:	2302      	movs	r3, #2
 800a2de:	e037      	b.n	800a350 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	681b      	ldr	r3, [r3, #0]
 800a2e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a2e6:	f003 0320 	and.w	r3, r3, #32
 800a2ea:	2b00      	cmp	r3, #0
 800a2ec:	d005      	beq.n	800a2fa <SD_FindSCR+0x136>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	681b      	ldr	r3, [r3, #0]
 800a2f2:	2220      	movs	r2, #32
 800a2f4:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800a2f6:	2320      	movs	r3, #32
 800a2f8:	e02a      	b.n	800a350 <SD_FindSCR+0x18c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	681b      	ldr	r3, [r3, #0]
 800a2fe:	f240 523a 	movw	r2, #1338	; 0x53a
 800a302:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800a304:	68fb      	ldr	r3, [r7, #12]
 800a306:	061a      	lsls	r2, r3, #24
 800a308:	68fb      	ldr	r3, [r7, #12]
 800a30a:	021b      	lsls	r3, r3, #8
 800a30c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800a310:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800a312:	68fb      	ldr	r3, [r7, #12]
 800a314:	0a1b      	lsrs	r3, r3, #8
 800a316:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800a31a:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800a31c:	68fb      	ldr	r3, [r7, #12]
 800a31e:	0e1b      	lsrs	r3, r3, #24
 800a320:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800a322:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a324:	601a      	str	r2, [r3, #0]
    scr++;
 800a326:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a328:	3304      	adds	r3, #4
 800a32a:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800a32c:	68bb      	ldr	r3, [r7, #8]
 800a32e:	061a      	lsls	r2, r3, #24
 800a330:	68bb      	ldr	r3, [r7, #8]
 800a332:	021b      	lsls	r3, r3, #8
 800a334:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800a338:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800a33a:	68bb      	ldr	r3, [r7, #8]
 800a33c:	0a1b      	lsrs	r3, r3, #8
 800a33e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800a342:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800a344:	68bb      	ldr	r3, [r7, #8]
 800a346:	0e1b      	lsrs	r3, r3, #24
 800a348:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800a34a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a34c:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800a34e:	2300      	movs	r3, #0
}
 800a350:	4618      	mov	r0, r3
 800a352:	373c      	adds	r7, #60	; 0x3c
 800a354:	46bd      	mov	sp, r7
 800a356:	bd90      	pop	{r4, r7, pc}

0800a358 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 800a358:	b580      	push	{r7, lr}
 800a35a:	b086      	sub	sp, #24
 800a35c:	af00      	add	r7, sp, #0
 800a35e:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a364:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a36a:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800a36c:	693b      	ldr	r3, [r7, #16]
 800a36e:	2b00      	cmp	r3, #0
 800a370:	d03f      	beq.n	800a3f2 <SD_Read_IT+0x9a>
  {
    /* Read data from SDIO Rx FIFO */
    for(count = 0U; count < 8U; count++)
 800a372:	2300      	movs	r3, #0
 800a374:	617b      	str	r3, [r7, #20]
 800a376:	e033      	b.n	800a3e0 <SD_Read_IT+0x88>
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	681b      	ldr	r3, [r3, #0]
 800a37c:	4618      	mov	r0, r3
 800a37e:	f001 fbf8 	bl	800bb72 <SDIO_ReadFIFO>
 800a382:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 800a384:	68bb      	ldr	r3, [r7, #8]
 800a386:	b2da      	uxtb	r2, r3
 800a388:	68fb      	ldr	r3, [r7, #12]
 800a38a:	701a      	strb	r2, [r3, #0]
      tmp++;
 800a38c:	68fb      	ldr	r3, [r7, #12]
 800a38e:	3301      	adds	r3, #1
 800a390:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800a392:	693b      	ldr	r3, [r7, #16]
 800a394:	3b01      	subs	r3, #1
 800a396:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 800a398:	68bb      	ldr	r3, [r7, #8]
 800a39a:	0a1b      	lsrs	r3, r3, #8
 800a39c:	b2da      	uxtb	r2, r3
 800a39e:	68fb      	ldr	r3, [r7, #12]
 800a3a0:	701a      	strb	r2, [r3, #0]
      tmp++;
 800a3a2:	68fb      	ldr	r3, [r7, #12]
 800a3a4:	3301      	adds	r3, #1
 800a3a6:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800a3a8:	693b      	ldr	r3, [r7, #16]
 800a3aa:	3b01      	subs	r3, #1
 800a3ac:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 800a3ae:	68bb      	ldr	r3, [r7, #8]
 800a3b0:	0c1b      	lsrs	r3, r3, #16
 800a3b2:	b2da      	uxtb	r2, r3
 800a3b4:	68fb      	ldr	r3, [r7, #12]
 800a3b6:	701a      	strb	r2, [r3, #0]
      tmp++;
 800a3b8:	68fb      	ldr	r3, [r7, #12]
 800a3ba:	3301      	adds	r3, #1
 800a3bc:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800a3be:	693b      	ldr	r3, [r7, #16]
 800a3c0:	3b01      	subs	r3, #1
 800a3c2:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 800a3c4:	68bb      	ldr	r3, [r7, #8]
 800a3c6:	0e1b      	lsrs	r3, r3, #24
 800a3c8:	b2da      	uxtb	r2, r3
 800a3ca:	68fb      	ldr	r3, [r7, #12]
 800a3cc:	701a      	strb	r2, [r3, #0]
      tmp++;
 800a3ce:	68fb      	ldr	r3, [r7, #12]
 800a3d0:	3301      	adds	r3, #1
 800a3d2:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800a3d4:	693b      	ldr	r3, [r7, #16]
 800a3d6:	3b01      	subs	r3, #1
 800a3d8:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 800a3da:	697b      	ldr	r3, [r7, #20]
 800a3dc:	3301      	adds	r3, #1
 800a3de:	617b      	str	r3, [r7, #20]
 800a3e0:	697b      	ldr	r3, [r7, #20]
 800a3e2:	2b07      	cmp	r3, #7
 800a3e4:	d9c8      	bls.n	800a378 <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	68fa      	ldr	r2, [r7, #12]
 800a3ea:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	693a      	ldr	r2, [r7, #16]
 800a3f0:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 800a3f2:	bf00      	nop
 800a3f4:	3718      	adds	r7, #24
 800a3f6:	46bd      	mov	sp, r7
 800a3f8:	bd80      	pop	{r7, pc}

0800a3fa <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 800a3fa:	b580      	push	{r7, lr}
 800a3fc:	b086      	sub	sp, #24
 800a3fe:	af00      	add	r7, sp, #0
 800a400:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	6a1b      	ldr	r3, [r3, #32]
 800a406:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a40c:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800a40e:	693b      	ldr	r3, [r7, #16]
 800a410:	2b00      	cmp	r3, #0
 800a412:	d043      	beq.n	800a49c <SD_Write_IT+0xa2>
  {
    /* Write data to SDIO Tx FIFO */
    for(count = 0U; count < 8U; count++)
 800a414:	2300      	movs	r3, #0
 800a416:	617b      	str	r3, [r7, #20]
 800a418:	e037      	b.n	800a48a <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 800a41a:	68fb      	ldr	r3, [r7, #12]
 800a41c:	781b      	ldrb	r3, [r3, #0]
 800a41e:	60bb      	str	r3, [r7, #8]
      tmp++;
 800a420:	68fb      	ldr	r3, [r7, #12]
 800a422:	3301      	adds	r3, #1
 800a424:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800a426:	693b      	ldr	r3, [r7, #16]
 800a428:	3b01      	subs	r3, #1
 800a42a:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 800a42c:	68fb      	ldr	r3, [r7, #12]
 800a42e:	781b      	ldrb	r3, [r3, #0]
 800a430:	021a      	lsls	r2, r3, #8
 800a432:	68bb      	ldr	r3, [r7, #8]
 800a434:	4313      	orrs	r3, r2
 800a436:	60bb      	str	r3, [r7, #8]
      tmp++;
 800a438:	68fb      	ldr	r3, [r7, #12]
 800a43a:	3301      	adds	r3, #1
 800a43c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800a43e:	693b      	ldr	r3, [r7, #16]
 800a440:	3b01      	subs	r3, #1
 800a442:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 800a444:	68fb      	ldr	r3, [r7, #12]
 800a446:	781b      	ldrb	r3, [r3, #0]
 800a448:	041a      	lsls	r2, r3, #16
 800a44a:	68bb      	ldr	r3, [r7, #8]
 800a44c:	4313      	orrs	r3, r2
 800a44e:	60bb      	str	r3, [r7, #8]
      tmp++;
 800a450:	68fb      	ldr	r3, [r7, #12]
 800a452:	3301      	adds	r3, #1
 800a454:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800a456:	693b      	ldr	r3, [r7, #16]
 800a458:	3b01      	subs	r3, #1
 800a45a:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 800a45c:	68fb      	ldr	r3, [r7, #12]
 800a45e:	781b      	ldrb	r3, [r3, #0]
 800a460:	061a      	lsls	r2, r3, #24
 800a462:	68bb      	ldr	r3, [r7, #8]
 800a464:	4313      	orrs	r3, r2
 800a466:	60bb      	str	r3, [r7, #8]
      tmp++;
 800a468:	68fb      	ldr	r3, [r7, #12]
 800a46a:	3301      	adds	r3, #1
 800a46c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800a46e:	693b      	ldr	r3, [r7, #16]
 800a470:	3b01      	subs	r3, #1
 800a472:	613b      	str	r3, [r7, #16]
      (void)SDIO_WriteFIFO(hsd->Instance, &data);
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	681b      	ldr	r3, [r3, #0]
 800a478:	f107 0208 	add.w	r2, r7, #8
 800a47c:	4611      	mov	r1, r2
 800a47e:	4618      	mov	r0, r3
 800a480:	f001 fb84 	bl	800bb8c <SDIO_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 800a484:	697b      	ldr	r3, [r7, #20]
 800a486:	3301      	adds	r3, #1
 800a488:	617b      	str	r3, [r7, #20]
 800a48a:	697b      	ldr	r3, [r7, #20]
 800a48c:	2b07      	cmp	r3, #7
 800a48e:	d9c4      	bls.n	800a41a <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	68fa      	ldr	r2, [r7, #12]
 800a494:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	693a      	ldr	r2, [r7, #16]
 800a49a:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 800a49c:	bf00      	nop
 800a49e:	3718      	adds	r7, #24
 800a4a0:	46bd      	mov	sp, r7
 800a4a2:	bd80      	pop	{r7, pc}

0800a4a4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800a4a4:	b580      	push	{r7, lr}
 800a4a6:	b082      	sub	sp, #8
 800a4a8:	af00      	add	r7, sp, #0
 800a4aa:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	2b00      	cmp	r3, #0
 800a4b0:	d101      	bne.n	800a4b6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800a4b2:	2301      	movs	r3, #1
 800a4b4:	e056      	b.n	800a564 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	2200      	movs	r2, #0
 800a4ba:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800a4c2:	b2db      	uxtb	r3, r3
 800a4c4:	2b00      	cmp	r3, #0
 800a4c6:	d106      	bne.n	800a4d6 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	2200      	movs	r2, #0
 800a4cc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800a4d0:	6878      	ldr	r0, [r7, #4]
 800a4d2:	f7fa fba3 	bl	8004c1c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	2202      	movs	r2, #2
 800a4da:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800a4de:	687b      	ldr	r3, [r7, #4]
 800a4e0:	681b      	ldr	r3, [r3, #0]
 800a4e2:	681a      	ldr	r2, [r3, #0]
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	681b      	ldr	r3, [r3, #0]
 800a4e8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a4ec:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	685a      	ldr	r2, [r3, #4]
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	689b      	ldr	r3, [r3, #8]
 800a4f6:	431a      	orrs	r2, r3
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	68db      	ldr	r3, [r3, #12]
 800a4fc:	431a      	orrs	r2, r3
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	691b      	ldr	r3, [r3, #16]
 800a502:	431a      	orrs	r2, r3
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	695b      	ldr	r3, [r3, #20]
 800a508:	431a      	orrs	r2, r3
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	699b      	ldr	r3, [r3, #24]
 800a50e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a512:	431a      	orrs	r2, r3
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	69db      	ldr	r3, [r3, #28]
 800a518:	431a      	orrs	r2, r3
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	6a1b      	ldr	r3, [r3, #32]
 800a51e:	ea42 0103 	orr.w	r1, r2, r3
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	681b      	ldr	r3, [r3, #0]
 800a52a:	430a      	orrs	r2, r1
 800a52c:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	699b      	ldr	r3, [r3, #24]
 800a532:	0c1b      	lsrs	r3, r3, #16
 800a534:	f003 0104 	and.w	r1, r3, #4
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	681b      	ldr	r3, [r3, #0]
 800a540:	430a      	orrs	r2, r1
 800a542:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	681b      	ldr	r3, [r3, #0]
 800a548:	69da      	ldr	r2, [r3, #28]
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	681b      	ldr	r3, [r3, #0]
 800a54e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800a552:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	2200      	movs	r2, #0
 800a558:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	2201      	movs	r2, #1
 800a55e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800a562:	2300      	movs	r3, #0
}
 800a564:	4618      	mov	r0, r3
 800a566:	3708      	adds	r7, #8
 800a568:	46bd      	mov	sp, r7
 800a56a:	bd80      	pop	{r7, pc}

0800a56c <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800a56c:	b580      	push	{r7, lr}
 800a56e:	b088      	sub	sp, #32
 800a570:	af00      	add	r7, sp, #0
 800a572:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	681b      	ldr	r3, [r3, #0]
 800a578:	685b      	ldr	r3, [r3, #4]
 800a57a:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	681b      	ldr	r3, [r3, #0]
 800a580:	689b      	ldr	r3, [r3, #8]
 800a582:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800a584:	69bb      	ldr	r3, [r7, #24]
 800a586:	099b      	lsrs	r3, r3, #6
 800a588:	f003 0301 	and.w	r3, r3, #1
 800a58c:	2b00      	cmp	r3, #0
 800a58e:	d10f      	bne.n	800a5b0 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800a590:	69bb      	ldr	r3, [r7, #24]
 800a592:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800a596:	2b00      	cmp	r3, #0
 800a598:	d00a      	beq.n	800a5b0 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800a59a:	69fb      	ldr	r3, [r7, #28]
 800a59c:	099b      	lsrs	r3, r3, #6
 800a59e:	f003 0301 	and.w	r3, r3, #1
 800a5a2:	2b00      	cmp	r3, #0
 800a5a4:	d004      	beq.n	800a5b0 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a5aa:	6878      	ldr	r0, [r7, #4]
 800a5ac:	4798      	blx	r3
    return;
 800a5ae:	e0d8      	b.n	800a762 <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 800a5b0:	69bb      	ldr	r3, [r7, #24]
 800a5b2:	085b      	lsrs	r3, r3, #1
 800a5b4:	f003 0301 	and.w	r3, r3, #1
 800a5b8:	2b00      	cmp	r3, #0
 800a5ba:	d00a      	beq.n	800a5d2 <HAL_SPI_IRQHandler+0x66>
 800a5bc:	69fb      	ldr	r3, [r7, #28]
 800a5be:	09db      	lsrs	r3, r3, #7
 800a5c0:	f003 0301 	and.w	r3, r3, #1
 800a5c4:	2b00      	cmp	r3, #0
 800a5c6:	d004      	beq.n	800a5d2 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a5cc:	6878      	ldr	r0, [r7, #4]
 800a5ce:	4798      	blx	r3
    return;
 800a5d0:	e0c7      	b.n	800a762 <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800a5d2:	69bb      	ldr	r3, [r7, #24]
 800a5d4:	095b      	lsrs	r3, r3, #5
 800a5d6:	f003 0301 	and.w	r3, r3, #1
 800a5da:	2b00      	cmp	r3, #0
 800a5dc:	d10c      	bne.n	800a5f8 <HAL_SPI_IRQHandler+0x8c>
 800a5de:	69bb      	ldr	r3, [r7, #24]
 800a5e0:	099b      	lsrs	r3, r3, #6
 800a5e2:	f003 0301 	and.w	r3, r3, #1
 800a5e6:	2b00      	cmp	r3, #0
 800a5e8:	d106      	bne.n	800a5f8 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800a5ea:	69bb      	ldr	r3, [r7, #24]
 800a5ec:	0a1b      	lsrs	r3, r3, #8
 800a5ee:	f003 0301 	and.w	r3, r3, #1
 800a5f2:	2b00      	cmp	r3, #0
 800a5f4:	f000 80b5 	beq.w	800a762 <HAL_SPI_IRQHandler+0x1f6>
 800a5f8:	69fb      	ldr	r3, [r7, #28]
 800a5fa:	095b      	lsrs	r3, r3, #5
 800a5fc:	f003 0301 	and.w	r3, r3, #1
 800a600:	2b00      	cmp	r3, #0
 800a602:	f000 80ae 	beq.w	800a762 <HAL_SPI_IRQHandler+0x1f6>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800a606:	69bb      	ldr	r3, [r7, #24]
 800a608:	099b      	lsrs	r3, r3, #6
 800a60a:	f003 0301 	and.w	r3, r3, #1
 800a60e:	2b00      	cmp	r3, #0
 800a610:	d023      	beq.n	800a65a <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800a618:	b2db      	uxtb	r3, r3
 800a61a:	2b03      	cmp	r3, #3
 800a61c:	d011      	beq.n	800a642 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a622:	f043 0204 	orr.w	r2, r3, #4
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800a62a:	2300      	movs	r3, #0
 800a62c:	617b      	str	r3, [r7, #20]
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	681b      	ldr	r3, [r3, #0]
 800a632:	68db      	ldr	r3, [r3, #12]
 800a634:	617b      	str	r3, [r7, #20]
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	681b      	ldr	r3, [r3, #0]
 800a63a:	689b      	ldr	r3, [r3, #8]
 800a63c:	617b      	str	r3, [r7, #20]
 800a63e:	697b      	ldr	r3, [r7, #20]
 800a640:	e00b      	b.n	800a65a <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800a642:	2300      	movs	r3, #0
 800a644:	613b      	str	r3, [r7, #16]
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	681b      	ldr	r3, [r3, #0]
 800a64a:	68db      	ldr	r3, [r3, #12]
 800a64c:	613b      	str	r3, [r7, #16]
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	681b      	ldr	r3, [r3, #0]
 800a652:	689b      	ldr	r3, [r3, #8]
 800a654:	613b      	str	r3, [r7, #16]
 800a656:	693b      	ldr	r3, [r7, #16]
        return;
 800a658:	e083      	b.n	800a762 <HAL_SPI_IRQHandler+0x1f6>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800a65a:	69bb      	ldr	r3, [r7, #24]
 800a65c:	095b      	lsrs	r3, r3, #5
 800a65e:	f003 0301 	and.w	r3, r3, #1
 800a662:	2b00      	cmp	r3, #0
 800a664:	d014      	beq.n	800a690 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a66a:	f043 0201 	orr.w	r2, r3, #1
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800a672:	2300      	movs	r3, #0
 800a674:	60fb      	str	r3, [r7, #12]
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	681b      	ldr	r3, [r3, #0]
 800a67a:	689b      	ldr	r3, [r3, #8]
 800a67c:	60fb      	str	r3, [r7, #12]
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	681b      	ldr	r3, [r3, #0]
 800a682:	681a      	ldr	r2, [r3, #0]
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	681b      	ldr	r3, [r3, #0]
 800a688:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a68c:	601a      	str	r2, [r3, #0]
 800a68e:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 800a690:	69bb      	ldr	r3, [r7, #24]
 800a692:	0a1b      	lsrs	r3, r3, #8
 800a694:	f003 0301 	and.w	r3, r3, #1
 800a698:	2b00      	cmp	r3, #0
 800a69a:	d00c      	beq.n	800a6b6 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a6a0:	f043 0208 	orr.w	r2, r3, #8
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800a6a8:	2300      	movs	r3, #0
 800a6aa:	60bb      	str	r3, [r7, #8]
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	681b      	ldr	r3, [r3, #0]
 800a6b0:	689b      	ldr	r3, [r3, #8]
 800a6b2:	60bb      	str	r3, [r7, #8]
 800a6b4:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a6ba:	2b00      	cmp	r3, #0
 800a6bc:	d050      	beq.n	800a760 <HAL_SPI_IRQHandler+0x1f4>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	681b      	ldr	r3, [r3, #0]
 800a6c2:	685a      	ldr	r2, [r3, #4]
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	681b      	ldr	r3, [r3, #0]
 800a6c8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800a6cc:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	2201      	movs	r2, #1
 800a6d2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800a6d6:	69fb      	ldr	r3, [r7, #28]
 800a6d8:	f003 0302 	and.w	r3, r3, #2
 800a6dc:	2b00      	cmp	r3, #0
 800a6de:	d104      	bne.n	800a6ea <HAL_SPI_IRQHandler+0x17e>
 800a6e0:	69fb      	ldr	r3, [r7, #28]
 800a6e2:	f003 0301 	and.w	r3, r3, #1
 800a6e6:	2b00      	cmp	r3, #0
 800a6e8:	d034      	beq.n	800a754 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	681b      	ldr	r3, [r3, #0]
 800a6ee:	685a      	ldr	r2, [r3, #4]
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	681b      	ldr	r3, [r3, #0]
 800a6f4:	f022 0203 	bic.w	r2, r2, #3
 800a6f8:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a6fe:	2b00      	cmp	r3, #0
 800a700:	d011      	beq.n	800a726 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a706:	4a18      	ldr	r2, [pc, #96]	; (800a768 <HAL_SPI_IRQHandler+0x1fc>)
 800a708:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a70e:	4618      	mov	r0, r3
 800a710:	f7fa ffe8 	bl	80056e4 <HAL_DMA_Abort_IT>
 800a714:	4603      	mov	r3, r0
 800a716:	2b00      	cmp	r3, #0
 800a718:	d005      	beq.n	800a726 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a71e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a72a:	2b00      	cmp	r3, #0
 800a72c:	d016      	beq.n	800a75c <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a732:	4a0d      	ldr	r2, [pc, #52]	; (800a768 <HAL_SPI_IRQHandler+0x1fc>)
 800a734:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a73a:	4618      	mov	r0, r3
 800a73c:	f7fa ffd2 	bl	80056e4 <HAL_DMA_Abort_IT>
 800a740:	4603      	mov	r3, r0
 800a742:	2b00      	cmp	r3, #0
 800a744:	d00a      	beq.n	800a75c <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a74a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 800a752:	e003      	b.n	800a75c <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800a754:	6878      	ldr	r0, [r7, #4]
 800a756:	f000 f809 	bl	800a76c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800a75a:	e000      	b.n	800a75e <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 800a75c:	bf00      	nop
    return;
 800a75e:	bf00      	nop
 800a760:	bf00      	nop
  }
}
 800a762:	3720      	adds	r7, #32
 800a764:	46bd      	mov	sp, r7
 800a766:	bd80      	pop	{r7, pc}
 800a768:	0800a781 	.word	0x0800a781

0800a76c <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800a76c:	b480      	push	{r7}
 800a76e:	b083      	sub	sp, #12
 800a770:	af00      	add	r7, sp, #0
 800a772:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800a774:	bf00      	nop
 800a776:	370c      	adds	r7, #12
 800a778:	46bd      	mov	sp, r7
 800a77a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a77e:	4770      	bx	lr

0800a780 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a780:	b580      	push	{r7, lr}
 800a782:	b084      	sub	sp, #16
 800a784:	af00      	add	r7, sp, #0
 800a786:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a78c:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800a78e:	68fb      	ldr	r3, [r7, #12]
 800a790:	2200      	movs	r2, #0
 800a792:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 800a794:	68fb      	ldr	r3, [r7, #12]
 800a796:	2200      	movs	r2, #0
 800a798:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800a79a:	68f8      	ldr	r0, [r7, #12]
 800a79c:	f7ff ffe6 	bl	800a76c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800a7a0:	bf00      	nop
 800a7a2:	3710      	adds	r7, #16
 800a7a4:	46bd      	mov	sp, r7
 800a7a6:	bd80      	pop	{r7, pc}

0800a7a8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a7a8:	b580      	push	{r7, lr}
 800a7aa:	b082      	sub	sp, #8
 800a7ac:	af00      	add	r7, sp, #0
 800a7ae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	2b00      	cmp	r3, #0
 800a7b4:	d101      	bne.n	800a7ba <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a7b6:	2301      	movs	r3, #1
 800a7b8:	e01d      	b.n	800a7f6 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a7c0:	b2db      	uxtb	r3, r3
 800a7c2:	2b00      	cmp	r3, #0
 800a7c4:	d106      	bne.n	800a7d4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a7c6:	687b      	ldr	r3, [r7, #4]
 800a7c8:	2200      	movs	r2, #0
 800a7ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a7ce:	6878      	ldr	r0, [r7, #4]
 800a7d0:	f7fa fad8 	bl	8004d84 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	2202      	movs	r2, #2
 800a7d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	681a      	ldr	r2, [r3, #0]
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	3304      	adds	r3, #4
 800a7e4:	4619      	mov	r1, r3
 800a7e6:	4610      	mov	r0, r2
 800a7e8:	f000 fa42 	bl	800ac70 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	2201      	movs	r2, #1
 800a7f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a7f4:	2300      	movs	r3, #0
}
 800a7f6:	4618      	mov	r0, r3
 800a7f8:	3708      	adds	r7, #8
 800a7fa:	46bd      	mov	sp, r7
 800a7fc:	bd80      	pop	{r7, pc}

0800a7fe <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800a7fe:	b480      	push	{r7}
 800a800:	b085      	sub	sp, #20
 800a802:	af00      	add	r7, sp, #0
 800a804:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	2202      	movs	r2, #2
 800a80a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	681b      	ldr	r3, [r3, #0]
 800a812:	689b      	ldr	r3, [r3, #8]
 800a814:	f003 0307 	and.w	r3, r3, #7
 800a818:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a81a:	68fb      	ldr	r3, [r7, #12]
 800a81c:	2b06      	cmp	r3, #6
 800a81e:	d007      	beq.n	800a830 <HAL_TIM_Base_Start+0x32>
  {
    __HAL_TIM_ENABLE(htim);
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	681b      	ldr	r3, [r3, #0]
 800a824:	681a      	ldr	r2, [r3, #0]
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	681b      	ldr	r3, [r3, #0]
 800a82a:	f042 0201 	orr.w	r2, r2, #1
 800a82e:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	2201      	movs	r2, #1
 800a834:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800a838:	2300      	movs	r3, #0
}
 800a83a:	4618      	mov	r0, r3
 800a83c:	3714      	adds	r7, #20
 800a83e:	46bd      	mov	sp, r7
 800a840:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a844:	4770      	bx	lr

0800a846 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800a846:	b480      	push	{r7}
 800a848:	b085      	sub	sp, #20
 800a84a:	af00      	add	r7, sp, #0
 800a84c:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	681b      	ldr	r3, [r3, #0]
 800a852:	68da      	ldr	r2, [r3, #12]
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	681b      	ldr	r3, [r3, #0]
 800a858:	f042 0201 	orr.w	r2, r2, #1
 800a85c:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	681b      	ldr	r3, [r3, #0]
 800a862:	689b      	ldr	r3, [r3, #8]
 800a864:	f003 0307 	and.w	r3, r3, #7
 800a868:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a86a:	68fb      	ldr	r3, [r7, #12]
 800a86c:	2b06      	cmp	r3, #6
 800a86e:	d007      	beq.n	800a880 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	681b      	ldr	r3, [r3, #0]
 800a874:	681a      	ldr	r2, [r3, #0]
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	681b      	ldr	r3, [r3, #0]
 800a87a:	f042 0201 	orr.w	r2, r2, #1
 800a87e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800a880:	2300      	movs	r3, #0
}
 800a882:	4618      	mov	r0, r3
 800a884:	3714      	adds	r7, #20
 800a886:	46bd      	mov	sp, r7
 800a888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a88c:	4770      	bx	lr

0800a88e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800a88e:	b580      	push	{r7, lr}
 800a890:	b082      	sub	sp, #8
 800a892:	af00      	add	r7, sp, #0
 800a894:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	2b00      	cmp	r3, #0
 800a89a:	d101      	bne.n	800a8a0 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800a89c:	2301      	movs	r3, #1
 800a89e:	e01d      	b.n	800a8dc <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a8a6:	b2db      	uxtb	r3, r3
 800a8a8:	2b00      	cmp	r3, #0
 800a8aa:	d106      	bne.n	800a8ba <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	2200      	movs	r2, #0
 800a8b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800a8b4:	6878      	ldr	r0, [r7, #4]
 800a8b6:	f000 f815 	bl	800a8e4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	2202      	movs	r2, #2
 800a8be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a8c2:	687b      	ldr	r3, [r7, #4]
 800a8c4:	681a      	ldr	r2, [r3, #0]
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	3304      	adds	r3, #4
 800a8ca:	4619      	mov	r1, r3
 800a8cc:	4610      	mov	r0, r2
 800a8ce:	f000 f9cf 	bl	800ac70 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	2201      	movs	r2, #1
 800a8d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a8da:	2300      	movs	r3, #0
}
 800a8dc:	4618      	mov	r0, r3
 800a8de:	3708      	adds	r7, #8
 800a8e0:	46bd      	mov	sp, r7
 800a8e2:	bd80      	pop	{r7, pc}

0800a8e4 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800a8e4:	b480      	push	{r7}
 800a8e6:	b083      	sub	sp, #12
 800a8e8:	af00      	add	r7, sp, #0
 800a8ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800a8ec:	bf00      	nop
 800a8ee:	370c      	adds	r7, #12
 800a8f0:	46bd      	mov	sp, r7
 800a8f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8f6:	4770      	bx	lr

0800a8f8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800a8f8:	b580      	push	{r7, lr}
 800a8fa:	b084      	sub	sp, #16
 800a8fc:	af00      	add	r7, sp, #0
 800a8fe:	6078      	str	r0, [r7, #4]
 800a900:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	681b      	ldr	r3, [r3, #0]
 800a906:	2201      	movs	r2, #1
 800a908:	6839      	ldr	r1, [r7, #0]
 800a90a:	4618      	mov	r0, r3
 800a90c:	f000 fc9a 	bl	800b244 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	681b      	ldr	r3, [r3, #0]
 800a914:	4a15      	ldr	r2, [pc, #84]	; (800a96c <HAL_TIM_PWM_Start+0x74>)
 800a916:	4293      	cmp	r3, r2
 800a918:	d004      	beq.n	800a924 <HAL_TIM_PWM_Start+0x2c>
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	681b      	ldr	r3, [r3, #0]
 800a91e:	4a14      	ldr	r2, [pc, #80]	; (800a970 <HAL_TIM_PWM_Start+0x78>)
 800a920:	4293      	cmp	r3, r2
 800a922:	d101      	bne.n	800a928 <HAL_TIM_PWM_Start+0x30>
 800a924:	2301      	movs	r3, #1
 800a926:	e000      	b.n	800a92a <HAL_TIM_PWM_Start+0x32>
 800a928:	2300      	movs	r3, #0
 800a92a:	2b00      	cmp	r3, #0
 800a92c:	d007      	beq.n	800a93e <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	681b      	ldr	r3, [r3, #0]
 800a932:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	681b      	ldr	r3, [r3, #0]
 800a938:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800a93c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	681b      	ldr	r3, [r3, #0]
 800a942:	689b      	ldr	r3, [r3, #8]
 800a944:	f003 0307 	and.w	r3, r3, #7
 800a948:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a94a:	68fb      	ldr	r3, [r7, #12]
 800a94c:	2b06      	cmp	r3, #6
 800a94e:	d007      	beq.n	800a960 <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	681b      	ldr	r3, [r3, #0]
 800a954:	681a      	ldr	r2, [r3, #0]
 800a956:	687b      	ldr	r3, [r7, #4]
 800a958:	681b      	ldr	r3, [r3, #0]
 800a95a:	f042 0201 	orr.w	r2, r2, #1
 800a95e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800a960:	2300      	movs	r3, #0
}
 800a962:	4618      	mov	r0, r3
 800a964:	3710      	adds	r7, #16
 800a966:	46bd      	mov	sp, r7
 800a968:	bd80      	pop	{r7, pc}
 800a96a:	bf00      	nop
 800a96c:	40010000 	.word	0x40010000
 800a970:	40010400 	.word	0x40010400

0800a974 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800a974:	b580      	push	{r7, lr}
 800a976:	b084      	sub	sp, #16
 800a978:	af00      	add	r7, sp, #0
 800a97a:	60f8      	str	r0, [r7, #12]
 800a97c:	60b9      	str	r1, [r7, #8]
 800a97e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800a980:	68fb      	ldr	r3, [r7, #12]
 800a982:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a986:	2b01      	cmp	r3, #1
 800a988:	d101      	bne.n	800a98e <HAL_TIM_PWM_ConfigChannel+0x1a>
 800a98a:	2302      	movs	r3, #2
 800a98c:	e0b4      	b.n	800aaf8 <HAL_TIM_PWM_ConfigChannel+0x184>
 800a98e:	68fb      	ldr	r3, [r7, #12]
 800a990:	2201      	movs	r2, #1
 800a992:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800a996:	68fb      	ldr	r3, [r7, #12]
 800a998:	2202      	movs	r2, #2
 800a99a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	2b0c      	cmp	r3, #12
 800a9a2:	f200 809f 	bhi.w	800aae4 <HAL_TIM_PWM_ConfigChannel+0x170>
 800a9a6:	a201      	add	r2, pc, #4	; (adr r2, 800a9ac <HAL_TIM_PWM_ConfigChannel+0x38>)
 800a9a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a9ac:	0800a9e1 	.word	0x0800a9e1
 800a9b0:	0800aae5 	.word	0x0800aae5
 800a9b4:	0800aae5 	.word	0x0800aae5
 800a9b8:	0800aae5 	.word	0x0800aae5
 800a9bc:	0800aa21 	.word	0x0800aa21
 800a9c0:	0800aae5 	.word	0x0800aae5
 800a9c4:	0800aae5 	.word	0x0800aae5
 800a9c8:	0800aae5 	.word	0x0800aae5
 800a9cc:	0800aa63 	.word	0x0800aa63
 800a9d0:	0800aae5 	.word	0x0800aae5
 800a9d4:	0800aae5 	.word	0x0800aae5
 800a9d8:	0800aae5 	.word	0x0800aae5
 800a9dc:	0800aaa3 	.word	0x0800aaa3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800a9e0:	68fb      	ldr	r3, [r7, #12]
 800a9e2:	681b      	ldr	r3, [r3, #0]
 800a9e4:	68b9      	ldr	r1, [r7, #8]
 800a9e6:	4618      	mov	r0, r3
 800a9e8:	f000 f9e2 	bl	800adb0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800a9ec:	68fb      	ldr	r3, [r7, #12]
 800a9ee:	681b      	ldr	r3, [r3, #0]
 800a9f0:	699a      	ldr	r2, [r3, #24]
 800a9f2:	68fb      	ldr	r3, [r7, #12]
 800a9f4:	681b      	ldr	r3, [r3, #0]
 800a9f6:	f042 0208 	orr.w	r2, r2, #8
 800a9fa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800a9fc:	68fb      	ldr	r3, [r7, #12]
 800a9fe:	681b      	ldr	r3, [r3, #0]
 800aa00:	699a      	ldr	r2, [r3, #24]
 800aa02:	68fb      	ldr	r3, [r7, #12]
 800aa04:	681b      	ldr	r3, [r3, #0]
 800aa06:	f022 0204 	bic.w	r2, r2, #4
 800aa0a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800aa0c:	68fb      	ldr	r3, [r7, #12]
 800aa0e:	681b      	ldr	r3, [r3, #0]
 800aa10:	6999      	ldr	r1, [r3, #24]
 800aa12:	68bb      	ldr	r3, [r7, #8]
 800aa14:	691a      	ldr	r2, [r3, #16]
 800aa16:	68fb      	ldr	r3, [r7, #12]
 800aa18:	681b      	ldr	r3, [r3, #0]
 800aa1a:	430a      	orrs	r2, r1
 800aa1c:	619a      	str	r2, [r3, #24]
      break;
 800aa1e:	e062      	b.n	800aae6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800aa20:	68fb      	ldr	r3, [r7, #12]
 800aa22:	681b      	ldr	r3, [r3, #0]
 800aa24:	68b9      	ldr	r1, [r7, #8]
 800aa26:	4618      	mov	r0, r3
 800aa28:	f000 fa32 	bl	800ae90 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800aa2c:	68fb      	ldr	r3, [r7, #12]
 800aa2e:	681b      	ldr	r3, [r3, #0]
 800aa30:	699a      	ldr	r2, [r3, #24]
 800aa32:	68fb      	ldr	r3, [r7, #12]
 800aa34:	681b      	ldr	r3, [r3, #0]
 800aa36:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800aa3a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800aa3c:	68fb      	ldr	r3, [r7, #12]
 800aa3e:	681b      	ldr	r3, [r3, #0]
 800aa40:	699a      	ldr	r2, [r3, #24]
 800aa42:	68fb      	ldr	r3, [r7, #12]
 800aa44:	681b      	ldr	r3, [r3, #0]
 800aa46:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800aa4a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800aa4c:	68fb      	ldr	r3, [r7, #12]
 800aa4e:	681b      	ldr	r3, [r3, #0]
 800aa50:	6999      	ldr	r1, [r3, #24]
 800aa52:	68bb      	ldr	r3, [r7, #8]
 800aa54:	691b      	ldr	r3, [r3, #16]
 800aa56:	021a      	lsls	r2, r3, #8
 800aa58:	68fb      	ldr	r3, [r7, #12]
 800aa5a:	681b      	ldr	r3, [r3, #0]
 800aa5c:	430a      	orrs	r2, r1
 800aa5e:	619a      	str	r2, [r3, #24]
      break;
 800aa60:	e041      	b.n	800aae6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800aa62:	68fb      	ldr	r3, [r7, #12]
 800aa64:	681b      	ldr	r3, [r3, #0]
 800aa66:	68b9      	ldr	r1, [r7, #8]
 800aa68:	4618      	mov	r0, r3
 800aa6a:	f000 fa87 	bl	800af7c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800aa6e:	68fb      	ldr	r3, [r7, #12]
 800aa70:	681b      	ldr	r3, [r3, #0]
 800aa72:	69da      	ldr	r2, [r3, #28]
 800aa74:	68fb      	ldr	r3, [r7, #12]
 800aa76:	681b      	ldr	r3, [r3, #0]
 800aa78:	f042 0208 	orr.w	r2, r2, #8
 800aa7c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800aa7e:	68fb      	ldr	r3, [r7, #12]
 800aa80:	681b      	ldr	r3, [r3, #0]
 800aa82:	69da      	ldr	r2, [r3, #28]
 800aa84:	68fb      	ldr	r3, [r7, #12]
 800aa86:	681b      	ldr	r3, [r3, #0]
 800aa88:	f022 0204 	bic.w	r2, r2, #4
 800aa8c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800aa8e:	68fb      	ldr	r3, [r7, #12]
 800aa90:	681b      	ldr	r3, [r3, #0]
 800aa92:	69d9      	ldr	r1, [r3, #28]
 800aa94:	68bb      	ldr	r3, [r7, #8]
 800aa96:	691a      	ldr	r2, [r3, #16]
 800aa98:	68fb      	ldr	r3, [r7, #12]
 800aa9a:	681b      	ldr	r3, [r3, #0]
 800aa9c:	430a      	orrs	r2, r1
 800aa9e:	61da      	str	r2, [r3, #28]
      break;
 800aaa0:	e021      	b.n	800aae6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800aaa2:	68fb      	ldr	r3, [r7, #12]
 800aaa4:	681b      	ldr	r3, [r3, #0]
 800aaa6:	68b9      	ldr	r1, [r7, #8]
 800aaa8:	4618      	mov	r0, r3
 800aaaa:	f000 fadb 	bl	800b064 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800aaae:	68fb      	ldr	r3, [r7, #12]
 800aab0:	681b      	ldr	r3, [r3, #0]
 800aab2:	69da      	ldr	r2, [r3, #28]
 800aab4:	68fb      	ldr	r3, [r7, #12]
 800aab6:	681b      	ldr	r3, [r3, #0]
 800aab8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800aabc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800aabe:	68fb      	ldr	r3, [r7, #12]
 800aac0:	681b      	ldr	r3, [r3, #0]
 800aac2:	69da      	ldr	r2, [r3, #28]
 800aac4:	68fb      	ldr	r3, [r7, #12]
 800aac6:	681b      	ldr	r3, [r3, #0]
 800aac8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800aacc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800aace:	68fb      	ldr	r3, [r7, #12]
 800aad0:	681b      	ldr	r3, [r3, #0]
 800aad2:	69d9      	ldr	r1, [r3, #28]
 800aad4:	68bb      	ldr	r3, [r7, #8]
 800aad6:	691b      	ldr	r3, [r3, #16]
 800aad8:	021a      	lsls	r2, r3, #8
 800aada:	68fb      	ldr	r3, [r7, #12]
 800aadc:	681b      	ldr	r3, [r3, #0]
 800aade:	430a      	orrs	r2, r1
 800aae0:	61da      	str	r2, [r3, #28]
      break;
 800aae2:	e000      	b.n	800aae6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 800aae4:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800aae6:	68fb      	ldr	r3, [r7, #12]
 800aae8:	2201      	movs	r2, #1
 800aaea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800aaee:	68fb      	ldr	r3, [r7, #12]
 800aaf0:	2200      	movs	r2, #0
 800aaf2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800aaf6:	2300      	movs	r3, #0
}
 800aaf8:	4618      	mov	r0, r3
 800aafa:	3710      	adds	r7, #16
 800aafc:	46bd      	mov	sp, r7
 800aafe:	bd80      	pop	{r7, pc}

0800ab00 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800ab00:	b580      	push	{r7, lr}
 800ab02:	b084      	sub	sp, #16
 800ab04:	af00      	add	r7, sp, #0
 800ab06:	6078      	str	r0, [r7, #4]
 800ab08:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ab10:	2b01      	cmp	r3, #1
 800ab12:	d101      	bne.n	800ab18 <HAL_TIM_ConfigClockSource+0x18>
 800ab14:	2302      	movs	r3, #2
 800ab16:	e0a6      	b.n	800ac66 <HAL_TIM_ConfigClockSource+0x166>
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	2201      	movs	r2, #1
 800ab1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	2202      	movs	r2, #2
 800ab24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800ab28:	687b      	ldr	r3, [r7, #4]
 800ab2a:	681b      	ldr	r3, [r3, #0]
 800ab2c:	689b      	ldr	r3, [r3, #8]
 800ab2e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800ab30:	68fb      	ldr	r3, [r7, #12]
 800ab32:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800ab36:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800ab38:	68fb      	ldr	r3, [r7, #12]
 800ab3a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800ab3e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	681b      	ldr	r3, [r3, #0]
 800ab44:	68fa      	ldr	r2, [r7, #12]
 800ab46:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800ab48:	683b      	ldr	r3, [r7, #0]
 800ab4a:	681b      	ldr	r3, [r3, #0]
 800ab4c:	2b40      	cmp	r3, #64	; 0x40
 800ab4e:	d067      	beq.n	800ac20 <HAL_TIM_ConfigClockSource+0x120>
 800ab50:	2b40      	cmp	r3, #64	; 0x40
 800ab52:	d80b      	bhi.n	800ab6c <HAL_TIM_ConfigClockSource+0x6c>
 800ab54:	2b10      	cmp	r3, #16
 800ab56:	d073      	beq.n	800ac40 <HAL_TIM_ConfigClockSource+0x140>
 800ab58:	2b10      	cmp	r3, #16
 800ab5a:	d802      	bhi.n	800ab62 <HAL_TIM_ConfigClockSource+0x62>
 800ab5c:	2b00      	cmp	r3, #0
 800ab5e:	d06f      	beq.n	800ac40 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 800ab60:	e078      	b.n	800ac54 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800ab62:	2b20      	cmp	r3, #32
 800ab64:	d06c      	beq.n	800ac40 <HAL_TIM_ConfigClockSource+0x140>
 800ab66:	2b30      	cmp	r3, #48	; 0x30
 800ab68:	d06a      	beq.n	800ac40 <HAL_TIM_ConfigClockSource+0x140>
      break;
 800ab6a:	e073      	b.n	800ac54 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800ab6c:	2b70      	cmp	r3, #112	; 0x70
 800ab6e:	d00d      	beq.n	800ab8c <HAL_TIM_ConfigClockSource+0x8c>
 800ab70:	2b70      	cmp	r3, #112	; 0x70
 800ab72:	d804      	bhi.n	800ab7e <HAL_TIM_ConfigClockSource+0x7e>
 800ab74:	2b50      	cmp	r3, #80	; 0x50
 800ab76:	d033      	beq.n	800abe0 <HAL_TIM_ConfigClockSource+0xe0>
 800ab78:	2b60      	cmp	r3, #96	; 0x60
 800ab7a:	d041      	beq.n	800ac00 <HAL_TIM_ConfigClockSource+0x100>
      break;
 800ab7c:	e06a      	b.n	800ac54 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800ab7e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ab82:	d066      	beq.n	800ac52 <HAL_TIM_ConfigClockSource+0x152>
 800ab84:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ab88:	d017      	beq.n	800abba <HAL_TIM_ConfigClockSource+0xba>
      break;
 800ab8a:	e063      	b.n	800ac54 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	6818      	ldr	r0, [r3, #0]
 800ab90:	683b      	ldr	r3, [r7, #0]
 800ab92:	6899      	ldr	r1, [r3, #8]
 800ab94:	683b      	ldr	r3, [r7, #0]
 800ab96:	685a      	ldr	r2, [r3, #4]
 800ab98:	683b      	ldr	r3, [r7, #0]
 800ab9a:	68db      	ldr	r3, [r3, #12]
 800ab9c:	f000 fb32 	bl	800b204 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800aba0:	687b      	ldr	r3, [r7, #4]
 800aba2:	681b      	ldr	r3, [r3, #0]
 800aba4:	689b      	ldr	r3, [r3, #8]
 800aba6:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800aba8:	68fb      	ldr	r3, [r7, #12]
 800abaa:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800abae:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	681b      	ldr	r3, [r3, #0]
 800abb4:	68fa      	ldr	r2, [r7, #12]
 800abb6:	609a      	str	r2, [r3, #8]
      break;
 800abb8:	e04c      	b.n	800ac54 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800abba:	687b      	ldr	r3, [r7, #4]
 800abbc:	6818      	ldr	r0, [r3, #0]
 800abbe:	683b      	ldr	r3, [r7, #0]
 800abc0:	6899      	ldr	r1, [r3, #8]
 800abc2:	683b      	ldr	r3, [r7, #0]
 800abc4:	685a      	ldr	r2, [r3, #4]
 800abc6:	683b      	ldr	r3, [r7, #0]
 800abc8:	68db      	ldr	r3, [r3, #12]
 800abca:	f000 fb1b 	bl	800b204 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	681b      	ldr	r3, [r3, #0]
 800abd2:	689a      	ldr	r2, [r3, #8]
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	681b      	ldr	r3, [r3, #0]
 800abd8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800abdc:	609a      	str	r2, [r3, #8]
      break;
 800abde:	e039      	b.n	800ac54 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	6818      	ldr	r0, [r3, #0]
 800abe4:	683b      	ldr	r3, [r7, #0]
 800abe6:	6859      	ldr	r1, [r3, #4]
 800abe8:	683b      	ldr	r3, [r7, #0]
 800abea:	68db      	ldr	r3, [r3, #12]
 800abec:	461a      	mov	r2, r3
 800abee:	f000 fa8f 	bl	800b110 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	681b      	ldr	r3, [r3, #0]
 800abf6:	2150      	movs	r1, #80	; 0x50
 800abf8:	4618      	mov	r0, r3
 800abfa:	f000 fae8 	bl	800b1ce <TIM_ITRx_SetConfig>
      break;
 800abfe:	e029      	b.n	800ac54 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	6818      	ldr	r0, [r3, #0]
 800ac04:	683b      	ldr	r3, [r7, #0]
 800ac06:	6859      	ldr	r1, [r3, #4]
 800ac08:	683b      	ldr	r3, [r7, #0]
 800ac0a:	68db      	ldr	r3, [r3, #12]
 800ac0c:	461a      	mov	r2, r3
 800ac0e:	f000 faae 	bl	800b16e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800ac12:	687b      	ldr	r3, [r7, #4]
 800ac14:	681b      	ldr	r3, [r3, #0]
 800ac16:	2160      	movs	r1, #96	; 0x60
 800ac18:	4618      	mov	r0, r3
 800ac1a:	f000 fad8 	bl	800b1ce <TIM_ITRx_SetConfig>
      break;
 800ac1e:	e019      	b.n	800ac54 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	6818      	ldr	r0, [r3, #0]
 800ac24:	683b      	ldr	r3, [r7, #0]
 800ac26:	6859      	ldr	r1, [r3, #4]
 800ac28:	683b      	ldr	r3, [r7, #0]
 800ac2a:	68db      	ldr	r3, [r3, #12]
 800ac2c:	461a      	mov	r2, r3
 800ac2e:	f000 fa6f 	bl	800b110 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	681b      	ldr	r3, [r3, #0]
 800ac36:	2140      	movs	r1, #64	; 0x40
 800ac38:	4618      	mov	r0, r3
 800ac3a:	f000 fac8 	bl	800b1ce <TIM_ITRx_SetConfig>
      break;
 800ac3e:	e009      	b.n	800ac54 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800ac40:	687b      	ldr	r3, [r7, #4]
 800ac42:	681a      	ldr	r2, [r3, #0]
 800ac44:	683b      	ldr	r3, [r7, #0]
 800ac46:	681b      	ldr	r3, [r3, #0]
 800ac48:	4619      	mov	r1, r3
 800ac4a:	4610      	mov	r0, r2
 800ac4c:	f000 fabf 	bl	800b1ce <TIM_ITRx_SetConfig>
      break;
 800ac50:	e000      	b.n	800ac54 <HAL_TIM_ConfigClockSource+0x154>
      break;
 800ac52:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	2201      	movs	r2, #1
 800ac58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	2200      	movs	r2, #0
 800ac60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800ac64:	2300      	movs	r3, #0
}
 800ac66:	4618      	mov	r0, r3
 800ac68:	3710      	adds	r7, #16
 800ac6a:	46bd      	mov	sp, r7
 800ac6c:	bd80      	pop	{r7, pc}
	...

0800ac70 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800ac70:	b480      	push	{r7}
 800ac72:	b085      	sub	sp, #20
 800ac74:	af00      	add	r7, sp, #0
 800ac76:	6078      	str	r0, [r7, #4]
 800ac78:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800ac7a:	687b      	ldr	r3, [r7, #4]
 800ac7c:	681b      	ldr	r3, [r3, #0]
 800ac7e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	4a40      	ldr	r2, [pc, #256]	; (800ad84 <TIM_Base_SetConfig+0x114>)
 800ac84:	4293      	cmp	r3, r2
 800ac86:	d013      	beq.n	800acb0 <TIM_Base_SetConfig+0x40>
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ac8e:	d00f      	beq.n	800acb0 <TIM_Base_SetConfig+0x40>
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	4a3d      	ldr	r2, [pc, #244]	; (800ad88 <TIM_Base_SetConfig+0x118>)
 800ac94:	4293      	cmp	r3, r2
 800ac96:	d00b      	beq.n	800acb0 <TIM_Base_SetConfig+0x40>
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	4a3c      	ldr	r2, [pc, #240]	; (800ad8c <TIM_Base_SetConfig+0x11c>)
 800ac9c:	4293      	cmp	r3, r2
 800ac9e:	d007      	beq.n	800acb0 <TIM_Base_SetConfig+0x40>
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	4a3b      	ldr	r2, [pc, #236]	; (800ad90 <TIM_Base_SetConfig+0x120>)
 800aca4:	4293      	cmp	r3, r2
 800aca6:	d003      	beq.n	800acb0 <TIM_Base_SetConfig+0x40>
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	4a3a      	ldr	r2, [pc, #232]	; (800ad94 <TIM_Base_SetConfig+0x124>)
 800acac:	4293      	cmp	r3, r2
 800acae:	d108      	bne.n	800acc2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800acb0:	68fb      	ldr	r3, [r7, #12]
 800acb2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800acb6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800acb8:	683b      	ldr	r3, [r7, #0]
 800acba:	685b      	ldr	r3, [r3, #4]
 800acbc:	68fa      	ldr	r2, [r7, #12]
 800acbe:	4313      	orrs	r3, r2
 800acc0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	4a2f      	ldr	r2, [pc, #188]	; (800ad84 <TIM_Base_SetConfig+0x114>)
 800acc6:	4293      	cmp	r3, r2
 800acc8:	d02b      	beq.n	800ad22 <TIM_Base_SetConfig+0xb2>
 800acca:	687b      	ldr	r3, [r7, #4]
 800accc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800acd0:	d027      	beq.n	800ad22 <TIM_Base_SetConfig+0xb2>
 800acd2:	687b      	ldr	r3, [r7, #4]
 800acd4:	4a2c      	ldr	r2, [pc, #176]	; (800ad88 <TIM_Base_SetConfig+0x118>)
 800acd6:	4293      	cmp	r3, r2
 800acd8:	d023      	beq.n	800ad22 <TIM_Base_SetConfig+0xb2>
 800acda:	687b      	ldr	r3, [r7, #4]
 800acdc:	4a2b      	ldr	r2, [pc, #172]	; (800ad8c <TIM_Base_SetConfig+0x11c>)
 800acde:	4293      	cmp	r3, r2
 800ace0:	d01f      	beq.n	800ad22 <TIM_Base_SetConfig+0xb2>
 800ace2:	687b      	ldr	r3, [r7, #4]
 800ace4:	4a2a      	ldr	r2, [pc, #168]	; (800ad90 <TIM_Base_SetConfig+0x120>)
 800ace6:	4293      	cmp	r3, r2
 800ace8:	d01b      	beq.n	800ad22 <TIM_Base_SetConfig+0xb2>
 800acea:	687b      	ldr	r3, [r7, #4]
 800acec:	4a29      	ldr	r2, [pc, #164]	; (800ad94 <TIM_Base_SetConfig+0x124>)
 800acee:	4293      	cmp	r3, r2
 800acf0:	d017      	beq.n	800ad22 <TIM_Base_SetConfig+0xb2>
 800acf2:	687b      	ldr	r3, [r7, #4]
 800acf4:	4a28      	ldr	r2, [pc, #160]	; (800ad98 <TIM_Base_SetConfig+0x128>)
 800acf6:	4293      	cmp	r3, r2
 800acf8:	d013      	beq.n	800ad22 <TIM_Base_SetConfig+0xb2>
 800acfa:	687b      	ldr	r3, [r7, #4]
 800acfc:	4a27      	ldr	r2, [pc, #156]	; (800ad9c <TIM_Base_SetConfig+0x12c>)
 800acfe:	4293      	cmp	r3, r2
 800ad00:	d00f      	beq.n	800ad22 <TIM_Base_SetConfig+0xb2>
 800ad02:	687b      	ldr	r3, [r7, #4]
 800ad04:	4a26      	ldr	r2, [pc, #152]	; (800ada0 <TIM_Base_SetConfig+0x130>)
 800ad06:	4293      	cmp	r3, r2
 800ad08:	d00b      	beq.n	800ad22 <TIM_Base_SetConfig+0xb2>
 800ad0a:	687b      	ldr	r3, [r7, #4]
 800ad0c:	4a25      	ldr	r2, [pc, #148]	; (800ada4 <TIM_Base_SetConfig+0x134>)
 800ad0e:	4293      	cmp	r3, r2
 800ad10:	d007      	beq.n	800ad22 <TIM_Base_SetConfig+0xb2>
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	4a24      	ldr	r2, [pc, #144]	; (800ada8 <TIM_Base_SetConfig+0x138>)
 800ad16:	4293      	cmp	r3, r2
 800ad18:	d003      	beq.n	800ad22 <TIM_Base_SetConfig+0xb2>
 800ad1a:	687b      	ldr	r3, [r7, #4]
 800ad1c:	4a23      	ldr	r2, [pc, #140]	; (800adac <TIM_Base_SetConfig+0x13c>)
 800ad1e:	4293      	cmp	r3, r2
 800ad20:	d108      	bne.n	800ad34 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800ad22:	68fb      	ldr	r3, [r7, #12]
 800ad24:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ad28:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800ad2a:	683b      	ldr	r3, [r7, #0]
 800ad2c:	68db      	ldr	r3, [r3, #12]
 800ad2e:	68fa      	ldr	r2, [r7, #12]
 800ad30:	4313      	orrs	r3, r2
 800ad32:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800ad34:	68fb      	ldr	r3, [r7, #12]
 800ad36:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800ad3a:	683b      	ldr	r3, [r7, #0]
 800ad3c:	695b      	ldr	r3, [r3, #20]
 800ad3e:	4313      	orrs	r3, r2
 800ad40:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	68fa      	ldr	r2, [r7, #12]
 800ad46:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800ad48:	683b      	ldr	r3, [r7, #0]
 800ad4a:	689a      	ldr	r2, [r3, #8]
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800ad50:	683b      	ldr	r3, [r7, #0]
 800ad52:	681a      	ldr	r2, [r3, #0]
 800ad54:	687b      	ldr	r3, [r7, #4]
 800ad56:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	4a0a      	ldr	r2, [pc, #40]	; (800ad84 <TIM_Base_SetConfig+0x114>)
 800ad5c:	4293      	cmp	r3, r2
 800ad5e:	d003      	beq.n	800ad68 <TIM_Base_SetConfig+0xf8>
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	4a0c      	ldr	r2, [pc, #48]	; (800ad94 <TIM_Base_SetConfig+0x124>)
 800ad64:	4293      	cmp	r3, r2
 800ad66:	d103      	bne.n	800ad70 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800ad68:	683b      	ldr	r3, [r7, #0]
 800ad6a:	691a      	ldr	r2, [r3, #16]
 800ad6c:	687b      	ldr	r3, [r7, #4]
 800ad6e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	2201      	movs	r2, #1
 800ad74:	615a      	str	r2, [r3, #20]
}
 800ad76:	bf00      	nop
 800ad78:	3714      	adds	r7, #20
 800ad7a:	46bd      	mov	sp, r7
 800ad7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad80:	4770      	bx	lr
 800ad82:	bf00      	nop
 800ad84:	40010000 	.word	0x40010000
 800ad88:	40000400 	.word	0x40000400
 800ad8c:	40000800 	.word	0x40000800
 800ad90:	40000c00 	.word	0x40000c00
 800ad94:	40010400 	.word	0x40010400
 800ad98:	40014000 	.word	0x40014000
 800ad9c:	40014400 	.word	0x40014400
 800ada0:	40014800 	.word	0x40014800
 800ada4:	40001800 	.word	0x40001800
 800ada8:	40001c00 	.word	0x40001c00
 800adac:	40002000 	.word	0x40002000

0800adb0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800adb0:	b480      	push	{r7}
 800adb2:	b087      	sub	sp, #28
 800adb4:	af00      	add	r7, sp, #0
 800adb6:	6078      	str	r0, [r7, #4]
 800adb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800adba:	687b      	ldr	r3, [r7, #4]
 800adbc:	6a1b      	ldr	r3, [r3, #32]
 800adbe:	f023 0201 	bic.w	r2, r3, #1
 800adc2:	687b      	ldr	r3, [r7, #4]
 800adc4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800adc6:	687b      	ldr	r3, [r7, #4]
 800adc8:	6a1b      	ldr	r3, [r3, #32]
 800adca:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	685b      	ldr	r3, [r3, #4]
 800add0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800add2:	687b      	ldr	r3, [r7, #4]
 800add4:	699b      	ldr	r3, [r3, #24]
 800add6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800add8:	68fb      	ldr	r3, [r7, #12]
 800adda:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800adde:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800ade0:	68fb      	ldr	r3, [r7, #12]
 800ade2:	f023 0303 	bic.w	r3, r3, #3
 800ade6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ade8:	683b      	ldr	r3, [r7, #0]
 800adea:	681b      	ldr	r3, [r3, #0]
 800adec:	68fa      	ldr	r2, [r7, #12]
 800adee:	4313      	orrs	r3, r2
 800adf0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800adf2:	697b      	ldr	r3, [r7, #20]
 800adf4:	f023 0302 	bic.w	r3, r3, #2
 800adf8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800adfa:	683b      	ldr	r3, [r7, #0]
 800adfc:	689b      	ldr	r3, [r3, #8]
 800adfe:	697a      	ldr	r2, [r7, #20]
 800ae00:	4313      	orrs	r3, r2
 800ae02:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800ae04:	687b      	ldr	r3, [r7, #4]
 800ae06:	4a20      	ldr	r2, [pc, #128]	; (800ae88 <TIM_OC1_SetConfig+0xd8>)
 800ae08:	4293      	cmp	r3, r2
 800ae0a:	d003      	beq.n	800ae14 <TIM_OC1_SetConfig+0x64>
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	4a1f      	ldr	r2, [pc, #124]	; (800ae8c <TIM_OC1_SetConfig+0xdc>)
 800ae10:	4293      	cmp	r3, r2
 800ae12:	d10c      	bne.n	800ae2e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800ae14:	697b      	ldr	r3, [r7, #20]
 800ae16:	f023 0308 	bic.w	r3, r3, #8
 800ae1a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800ae1c:	683b      	ldr	r3, [r7, #0]
 800ae1e:	68db      	ldr	r3, [r3, #12]
 800ae20:	697a      	ldr	r2, [r7, #20]
 800ae22:	4313      	orrs	r3, r2
 800ae24:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800ae26:	697b      	ldr	r3, [r7, #20]
 800ae28:	f023 0304 	bic.w	r3, r3, #4
 800ae2c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ae2e:	687b      	ldr	r3, [r7, #4]
 800ae30:	4a15      	ldr	r2, [pc, #84]	; (800ae88 <TIM_OC1_SetConfig+0xd8>)
 800ae32:	4293      	cmp	r3, r2
 800ae34:	d003      	beq.n	800ae3e <TIM_OC1_SetConfig+0x8e>
 800ae36:	687b      	ldr	r3, [r7, #4]
 800ae38:	4a14      	ldr	r2, [pc, #80]	; (800ae8c <TIM_OC1_SetConfig+0xdc>)
 800ae3a:	4293      	cmp	r3, r2
 800ae3c:	d111      	bne.n	800ae62 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800ae3e:	693b      	ldr	r3, [r7, #16]
 800ae40:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800ae44:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800ae46:	693b      	ldr	r3, [r7, #16]
 800ae48:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800ae4c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800ae4e:	683b      	ldr	r3, [r7, #0]
 800ae50:	695b      	ldr	r3, [r3, #20]
 800ae52:	693a      	ldr	r2, [r7, #16]
 800ae54:	4313      	orrs	r3, r2
 800ae56:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800ae58:	683b      	ldr	r3, [r7, #0]
 800ae5a:	699b      	ldr	r3, [r3, #24]
 800ae5c:	693a      	ldr	r2, [r7, #16]
 800ae5e:	4313      	orrs	r3, r2
 800ae60:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ae62:	687b      	ldr	r3, [r7, #4]
 800ae64:	693a      	ldr	r2, [r7, #16]
 800ae66:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	68fa      	ldr	r2, [r7, #12]
 800ae6c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800ae6e:	683b      	ldr	r3, [r7, #0]
 800ae70:	685a      	ldr	r2, [r3, #4]
 800ae72:	687b      	ldr	r3, [r7, #4]
 800ae74:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	697a      	ldr	r2, [r7, #20]
 800ae7a:	621a      	str	r2, [r3, #32]
}
 800ae7c:	bf00      	nop
 800ae7e:	371c      	adds	r7, #28
 800ae80:	46bd      	mov	sp, r7
 800ae82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae86:	4770      	bx	lr
 800ae88:	40010000 	.word	0x40010000
 800ae8c:	40010400 	.word	0x40010400

0800ae90 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800ae90:	b480      	push	{r7}
 800ae92:	b087      	sub	sp, #28
 800ae94:	af00      	add	r7, sp, #0
 800ae96:	6078      	str	r0, [r7, #4]
 800ae98:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800ae9a:	687b      	ldr	r3, [r7, #4]
 800ae9c:	6a1b      	ldr	r3, [r3, #32]
 800ae9e:	f023 0210 	bic.w	r2, r3, #16
 800aea2:	687b      	ldr	r3, [r7, #4]
 800aea4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800aea6:	687b      	ldr	r3, [r7, #4]
 800aea8:	6a1b      	ldr	r3, [r3, #32]
 800aeaa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	685b      	ldr	r3, [r3, #4]
 800aeb0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800aeb2:	687b      	ldr	r3, [r7, #4]
 800aeb4:	699b      	ldr	r3, [r3, #24]
 800aeb6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800aeb8:	68fb      	ldr	r3, [r7, #12]
 800aeba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800aebe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800aec0:	68fb      	ldr	r3, [r7, #12]
 800aec2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800aec6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800aec8:	683b      	ldr	r3, [r7, #0]
 800aeca:	681b      	ldr	r3, [r3, #0]
 800aecc:	021b      	lsls	r3, r3, #8
 800aece:	68fa      	ldr	r2, [r7, #12]
 800aed0:	4313      	orrs	r3, r2
 800aed2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800aed4:	697b      	ldr	r3, [r7, #20]
 800aed6:	f023 0320 	bic.w	r3, r3, #32
 800aeda:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800aedc:	683b      	ldr	r3, [r7, #0]
 800aede:	689b      	ldr	r3, [r3, #8]
 800aee0:	011b      	lsls	r3, r3, #4
 800aee2:	697a      	ldr	r2, [r7, #20]
 800aee4:	4313      	orrs	r3, r2
 800aee6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800aee8:	687b      	ldr	r3, [r7, #4]
 800aeea:	4a22      	ldr	r2, [pc, #136]	; (800af74 <TIM_OC2_SetConfig+0xe4>)
 800aeec:	4293      	cmp	r3, r2
 800aeee:	d003      	beq.n	800aef8 <TIM_OC2_SetConfig+0x68>
 800aef0:	687b      	ldr	r3, [r7, #4]
 800aef2:	4a21      	ldr	r2, [pc, #132]	; (800af78 <TIM_OC2_SetConfig+0xe8>)
 800aef4:	4293      	cmp	r3, r2
 800aef6:	d10d      	bne.n	800af14 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800aef8:	697b      	ldr	r3, [r7, #20]
 800aefa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800aefe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800af00:	683b      	ldr	r3, [r7, #0]
 800af02:	68db      	ldr	r3, [r3, #12]
 800af04:	011b      	lsls	r3, r3, #4
 800af06:	697a      	ldr	r2, [r7, #20]
 800af08:	4313      	orrs	r3, r2
 800af0a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800af0c:	697b      	ldr	r3, [r7, #20]
 800af0e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800af12:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800af14:	687b      	ldr	r3, [r7, #4]
 800af16:	4a17      	ldr	r2, [pc, #92]	; (800af74 <TIM_OC2_SetConfig+0xe4>)
 800af18:	4293      	cmp	r3, r2
 800af1a:	d003      	beq.n	800af24 <TIM_OC2_SetConfig+0x94>
 800af1c:	687b      	ldr	r3, [r7, #4]
 800af1e:	4a16      	ldr	r2, [pc, #88]	; (800af78 <TIM_OC2_SetConfig+0xe8>)
 800af20:	4293      	cmp	r3, r2
 800af22:	d113      	bne.n	800af4c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800af24:	693b      	ldr	r3, [r7, #16]
 800af26:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800af2a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800af2c:	693b      	ldr	r3, [r7, #16]
 800af2e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800af32:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800af34:	683b      	ldr	r3, [r7, #0]
 800af36:	695b      	ldr	r3, [r3, #20]
 800af38:	009b      	lsls	r3, r3, #2
 800af3a:	693a      	ldr	r2, [r7, #16]
 800af3c:	4313      	orrs	r3, r2
 800af3e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800af40:	683b      	ldr	r3, [r7, #0]
 800af42:	699b      	ldr	r3, [r3, #24]
 800af44:	009b      	lsls	r3, r3, #2
 800af46:	693a      	ldr	r2, [r7, #16]
 800af48:	4313      	orrs	r3, r2
 800af4a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	693a      	ldr	r2, [r7, #16]
 800af50:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800af52:	687b      	ldr	r3, [r7, #4]
 800af54:	68fa      	ldr	r2, [r7, #12]
 800af56:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800af58:	683b      	ldr	r3, [r7, #0]
 800af5a:	685a      	ldr	r2, [r3, #4]
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800af60:	687b      	ldr	r3, [r7, #4]
 800af62:	697a      	ldr	r2, [r7, #20]
 800af64:	621a      	str	r2, [r3, #32]
}
 800af66:	bf00      	nop
 800af68:	371c      	adds	r7, #28
 800af6a:	46bd      	mov	sp, r7
 800af6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af70:	4770      	bx	lr
 800af72:	bf00      	nop
 800af74:	40010000 	.word	0x40010000
 800af78:	40010400 	.word	0x40010400

0800af7c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800af7c:	b480      	push	{r7}
 800af7e:	b087      	sub	sp, #28
 800af80:	af00      	add	r7, sp, #0
 800af82:	6078      	str	r0, [r7, #4]
 800af84:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800af86:	687b      	ldr	r3, [r7, #4]
 800af88:	6a1b      	ldr	r3, [r3, #32]
 800af8a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800af8e:	687b      	ldr	r3, [r7, #4]
 800af90:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800af92:	687b      	ldr	r3, [r7, #4]
 800af94:	6a1b      	ldr	r3, [r3, #32]
 800af96:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800af98:	687b      	ldr	r3, [r7, #4]
 800af9a:	685b      	ldr	r3, [r3, #4]
 800af9c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800af9e:	687b      	ldr	r3, [r7, #4]
 800afa0:	69db      	ldr	r3, [r3, #28]
 800afa2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800afa4:	68fb      	ldr	r3, [r7, #12]
 800afa6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800afaa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800afac:	68fb      	ldr	r3, [r7, #12]
 800afae:	f023 0303 	bic.w	r3, r3, #3
 800afb2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800afb4:	683b      	ldr	r3, [r7, #0]
 800afb6:	681b      	ldr	r3, [r3, #0]
 800afb8:	68fa      	ldr	r2, [r7, #12]
 800afba:	4313      	orrs	r3, r2
 800afbc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800afbe:	697b      	ldr	r3, [r7, #20]
 800afc0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800afc4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800afc6:	683b      	ldr	r3, [r7, #0]
 800afc8:	689b      	ldr	r3, [r3, #8]
 800afca:	021b      	lsls	r3, r3, #8
 800afcc:	697a      	ldr	r2, [r7, #20]
 800afce:	4313      	orrs	r3, r2
 800afd0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800afd2:	687b      	ldr	r3, [r7, #4]
 800afd4:	4a21      	ldr	r2, [pc, #132]	; (800b05c <TIM_OC3_SetConfig+0xe0>)
 800afd6:	4293      	cmp	r3, r2
 800afd8:	d003      	beq.n	800afe2 <TIM_OC3_SetConfig+0x66>
 800afda:	687b      	ldr	r3, [r7, #4]
 800afdc:	4a20      	ldr	r2, [pc, #128]	; (800b060 <TIM_OC3_SetConfig+0xe4>)
 800afde:	4293      	cmp	r3, r2
 800afe0:	d10d      	bne.n	800affe <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800afe2:	697b      	ldr	r3, [r7, #20]
 800afe4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800afe8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800afea:	683b      	ldr	r3, [r7, #0]
 800afec:	68db      	ldr	r3, [r3, #12]
 800afee:	021b      	lsls	r3, r3, #8
 800aff0:	697a      	ldr	r2, [r7, #20]
 800aff2:	4313      	orrs	r3, r2
 800aff4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800aff6:	697b      	ldr	r3, [r7, #20]
 800aff8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800affc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800affe:	687b      	ldr	r3, [r7, #4]
 800b000:	4a16      	ldr	r2, [pc, #88]	; (800b05c <TIM_OC3_SetConfig+0xe0>)
 800b002:	4293      	cmp	r3, r2
 800b004:	d003      	beq.n	800b00e <TIM_OC3_SetConfig+0x92>
 800b006:	687b      	ldr	r3, [r7, #4]
 800b008:	4a15      	ldr	r2, [pc, #84]	; (800b060 <TIM_OC3_SetConfig+0xe4>)
 800b00a:	4293      	cmp	r3, r2
 800b00c:	d113      	bne.n	800b036 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800b00e:	693b      	ldr	r3, [r7, #16]
 800b010:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b014:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800b016:	693b      	ldr	r3, [r7, #16]
 800b018:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800b01c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800b01e:	683b      	ldr	r3, [r7, #0]
 800b020:	695b      	ldr	r3, [r3, #20]
 800b022:	011b      	lsls	r3, r3, #4
 800b024:	693a      	ldr	r2, [r7, #16]
 800b026:	4313      	orrs	r3, r2
 800b028:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800b02a:	683b      	ldr	r3, [r7, #0]
 800b02c:	699b      	ldr	r3, [r3, #24]
 800b02e:	011b      	lsls	r3, r3, #4
 800b030:	693a      	ldr	r2, [r7, #16]
 800b032:	4313      	orrs	r3, r2
 800b034:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b036:	687b      	ldr	r3, [r7, #4]
 800b038:	693a      	ldr	r2, [r7, #16]
 800b03a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b03c:	687b      	ldr	r3, [r7, #4]
 800b03e:	68fa      	ldr	r2, [r7, #12]
 800b040:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800b042:	683b      	ldr	r3, [r7, #0]
 800b044:	685a      	ldr	r2, [r3, #4]
 800b046:	687b      	ldr	r3, [r7, #4]
 800b048:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b04a:	687b      	ldr	r3, [r7, #4]
 800b04c:	697a      	ldr	r2, [r7, #20]
 800b04e:	621a      	str	r2, [r3, #32]
}
 800b050:	bf00      	nop
 800b052:	371c      	adds	r7, #28
 800b054:	46bd      	mov	sp, r7
 800b056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b05a:	4770      	bx	lr
 800b05c:	40010000 	.word	0x40010000
 800b060:	40010400 	.word	0x40010400

0800b064 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b064:	b480      	push	{r7}
 800b066:	b087      	sub	sp, #28
 800b068:	af00      	add	r7, sp, #0
 800b06a:	6078      	str	r0, [r7, #4]
 800b06c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800b06e:	687b      	ldr	r3, [r7, #4]
 800b070:	6a1b      	ldr	r3, [r3, #32]
 800b072:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800b076:	687b      	ldr	r3, [r7, #4]
 800b078:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b07a:	687b      	ldr	r3, [r7, #4]
 800b07c:	6a1b      	ldr	r3, [r3, #32]
 800b07e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b080:	687b      	ldr	r3, [r7, #4]
 800b082:	685b      	ldr	r3, [r3, #4]
 800b084:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b086:	687b      	ldr	r3, [r7, #4]
 800b088:	69db      	ldr	r3, [r3, #28]
 800b08a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800b08c:	68fb      	ldr	r3, [r7, #12]
 800b08e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b092:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800b094:	68fb      	ldr	r3, [r7, #12]
 800b096:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b09a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b09c:	683b      	ldr	r3, [r7, #0]
 800b09e:	681b      	ldr	r3, [r3, #0]
 800b0a0:	021b      	lsls	r3, r3, #8
 800b0a2:	68fa      	ldr	r2, [r7, #12]
 800b0a4:	4313      	orrs	r3, r2
 800b0a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800b0a8:	693b      	ldr	r3, [r7, #16]
 800b0aa:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800b0ae:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800b0b0:	683b      	ldr	r3, [r7, #0]
 800b0b2:	689b      	ldr	r3, [r3, #8]
 800b0b4:	031b      	lsls	r3, r3, #12
 800b0b6:	693a      	ldr	r2, [r7, #16]
 800b0b8:	4313      	orrs	r3, r2
 800b0ba:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b0bc:	687b      	ldr	r3, [r7, #4]
 800b0be:	4a12      	ldr	r2, [pc, #72]	; (800b108 <TIM_OC4_SetConfig+0xa4>)
 800b0c0:	4293      	cmp	r3, r2
 800b0c2:	d003      	beq.n	800b0cc <TIM_OC4_SetConfig+0x68>
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	4a11      	ldr	r2, [pc, #68]	; (800b10c <TIM_OC4_SetConfig+0xa8>)
 800b0c8:	4293      	cmp	r3, r2
 800b0ca:	d109      	bne.n	800b0e0 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800b0cc:	697b      	ldr	r3, [r7, #20]
 800b0ce:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b0d2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800b0d4:	683b      	ldr	r3, [r7, #0]
 800b0d6:	695b      	ldr	r3, [r3, #20]
 800b0d8:	019b      	lsls	r3, r3, #6
 800b0da:	697a      	ldr	r2, [r7, #20]
 800b0dc:	4313      	orrs	r3, r2
 800b0de:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b0e0:	687b      	ldr	r3, [r7, #4]
 800b0e2:	697a      	ldr	r2, [r7, #20]
 800b0e4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b0e6:	687b      	ldr	r3, [r7, #4]
 800b0e8:	68fa      	ldr	r2, [r7, #12]
 800b0ea:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800b0ec:	683b      	ldr	r3, [r7, #0]
 800b0ee:	685a      	ldr	r2, [r3, #4]
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b0f4:	687b      	ldr	r3, [r7, #4]
 800b0f6:	693a      	ldr	r2, [r7, #16]
 800b0f8:	621a      	str	r2, [r3, #32]
}
 800b0fa:	bf00      	nop
 800b0fc:	371c      	adds	r7, #28
 800b0fe:	46bd      	mov	sp, r7
 800b100:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b104:	4770      	bx	lr
 800b106:	bf00      	nop
 800b108:	40010000 	.word	0x40010000
 800b10c:	40010400 	.word	0x40010400

0800b110 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b110:	b480      	push	{r7}
 800b112:	b087      	sub	sp, #28
 800b114:	af00      	add	r7, sp, #0
 800b116:	60f8      	str	r0, [r7, #12]
 800b118:	60b9      	str	r1, [r7, #8]
 800b11a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800b11c:	68fb      	ldr	r3, [r7, #12]
 800b11e:	6a1b      	ldr	r3, [r3, #32]
 800b120:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b122:	68fb      	ldr	r3, [r7, #12]
 800b124:	6a1b      	ldr	r3, [r3, #32]
 800b126:	f023 0201 	bic.w	r2, r3, #1
 800b12a:	68fb      	ldr	r3, [r7, #12]
 800b12c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b12e:	68fb      	ldr	r3, [r7, #12]
 800b130:	699b      	ldr	r3, [r3, #24]
 800b132:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800b134:	693b      	ldr	r3, [r7, #16]
 800b136:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800b13a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800b13c:	687b      	ldr	r3, [r7, #4]
 800b13e:	011b      	lsls	r3, r3, #4
 800b140:	693a      	ldr	r2, [r7, #16]
 800b142:	4313      	orrs	r3, r2
 800b144:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800b146:	697b      	ldr	r3, [r7, #20]
 800b148:	f023 030a 	bic.w	r3, r3, #10
 800b14c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800b14e:	697a      	ldr	r2, [r7, #20]
 800b150:	68bb      	ldr	r3, [r7, #8]
 800b152:	4313      	orrs	r3, r2
 800b154:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800b156:	68fb      	ldr	r3, [r7, #12]
 800b158:	693a      	ldr	r2, [r7, #16]
 800b15a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b15c:	68fb      	ldr	r3, [r7, #12]
 800b15e:	697a      	ldr	r2, [r7, #20]
 800b160:	621a      	str	r2, [r3, #32]
}
 800b162:	bf00      	nop
 800b164:	371c      	adds	r7, #28
 800b166:	46bd      	mov	sp, r7
 800b168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b16c:	4770      	bx	lr

0800b16e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b16e:	b480      	push	{r7}
 800b170:	b087      	sub	sp, #28
 800b172:	af00      	add	r7, sp, #0
 800b174:	60f8      	str	r0, [r7, #12]
 800b176:	60b9      	str	r1, [r7, #8]
 800b178:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b17a:	68fb      	ldr	r3, [r7, #12]
 800b17c:	6a1b      	ldr	r3, [r3, #32]
 800b17e:	f023 0210 	bic.w	r2, r3, #16
 800b182:	68fb      	ldr	r3, [r7, #12]
 800b184:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b186:	68fb      	ldr	r3, [r7, #12]
 800b188:	699b      	ldr	r3, [r3, #24]
 800b18a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800b18c:	68fb      	ldr	r3, [r7, #12]
 800b18e:	6a1b      	ldr	r3, [r3, #32]
 800b190:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800b192:	697b      	ldr	r3, [r7, #20]
 800b194:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800b198:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800b19a:	687b      	ldr	r3, [r7, #4]
 800b19c:	031b      	lsls	r3, r3, #12
 800b19e:	697a      	ldr	r2, [r7, #20]
 800b1a0:	4313      	orrs	r3, r2
 800b1a2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800b1a4:	693b      	ldr	r3, [r7, #16]
 800b1a6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800b1aa:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800b1ac:	68bb      	ldr	r3, [r7, #8]
 800b1ae:	011b      	lsls	r3, r3, #4
 800b1b0:	693a      	ldr	r2, [r7, #16]
 800b1b2:	4313      	orrs	r3, r2
 800b1b4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800b1b6:	68fb      	ldr	r3, [r7, #12]
 800b1b8:	697a      	ldr	r2, [r7, #20]
 800b1ba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b1bc:	68fb      	ldr	r3, [r7, #12]
 800b1be:	693a      	ldr	r2, [r7, #16]
 800b1c0:	621a      	str	r2, [r3, #32]
}
 800b1c2:	bf00      	nop
 800b1c4:	371c      	adds	r7, #28
 800b1c6:	46bd      	mov	sp, r7
 800b1c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1cc:	4770      	bx	lr

0800b1ce <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800b1ce:	b480      	push	{r7}
 800b1d0:	b085      	sub	sp, #20
 800b1d2:	af00      	add	r7, sp, #0
 800b1d4:	6078      	str	r0, [r7, #4]
 800b1d6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800b1d8:	687b      	ldr	r3, [r7, #4]
 800b1da:	689b      	ldr	r3, [r3, #8]
 800b1dc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800b1de:	68fb      	ldr	r3, [r7, #12]
 800b1e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b1e4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800b1e6:	683a      	ldr	r2, [r7, #0]
 800b1e8:	68fb      	ldr	r3, [r7, #12]
 800b1ea:	4313      	orrs	r3, r2
 800b1ec:	f043 0307 	orr.w	r3, r3, #7
 800b1f0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b1f2:	687b      	ldr	r3, [r7, #4]
 800b1f4:	68fa      	ldr	r2, [r7, #12]
 800b1f6:	609a      	str	r2, [r3, #8]
}
 800b1f8:	bf00      	nop
 800b1fa:	3714      	adds	r7, #20
 800b1fc:	46bd      	mov	sp, r7
 800b1fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b202:	4770      	bx	lr

0800b204 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800b204:	b480      	push	{r7}
 800b206:	b087      	sub	sp, #28
 800b208:	af00      	add	r7, sp, #0
 800b20a:	60f8      	str	r0, [r7, #12]
 800b20c:	60b9      	str	r1, [r7, #8]
 800b20e:	607a      	str	r2, [r7, #4]
 800b210:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800b212:	68fb      	ldr	r3, [r7, #12]
 800b214:	689b      	ldr	r3, [r3, #8]
 800b216:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b218:	697b      	ldr	r3, [r7, #20]
 800b21a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800b21e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800b220:	683b      	ldr	r3, [r7, #0]
 800b222:	021a      	lsls	r2, r3, #8
 800b224:	687b      	ldr	r3, [r7, #4]
 800b226:	431a      	orrs	r2, r3
 800b228:	68bb      	ldr	r3, [r7, #8]
 800b22a:	4313      	orrs	r3, r2
 800b22c:	697a      	ldr	r2, [r7, #20]
 800b22e:	4313      	orrs	r3, r2
 800b230:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b232:	68fb      	ldr	r3, [r7, #12]
 800b234:	697a      	ldr	r2, [r7, #20]
 800b236:	609a      	str	r2, [r3, #8]
}
 800b238:	bf00      	nop
 800b23a:	371c      	adds	r7, #28
 800b23c:	46bd      	mov	sp, r7
 800b23e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b242:	4770      	bx	lr

0800b244 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800b244:	b480      	push	{r7}
 800b246:	b087      	sub	sp, #28
 800b248:	af00      	add	r7, sp, #0
 800b24a:	60f8      	str	r0, [r7, #12]
 800b24c:	60b9      	str	r1, [r7, #8]
 800b24e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800b250:	68bb      	ldr	r3, [r7, #8]
 800b252:	f003 031f 	and.w	r3, r3, #31
 800b256:	2201      	movs	r2, #1
 800b258:	fa02 f303 	lsl.w	r3, r2, r3
 800b25c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800b25e:	68fb      	ldr	r3, [r7, #12]
 800b260:	6a1a      	ldr	r2, [r3, #32]
 800b262:	697b      	ldr	r3, [r7, #20]
 800b264:	43db      	mvns	r3, r3
 800b266:	401a      	ands	r2, r3
 800b268:	68fb      	ldr	r3, [r7, #12]
 800b26a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800b26c:	68fb      	ldr	r3, [r7, #12]
 800b26e:	6a1a      	ldr	r2, [r3, #32]
 800b270:	68bb      	ldr	r3, [r7, #8]
 800b272:	f003 031f 	and.w	r3, r3, #31
 800b276:	6879      	ldr	r1, [r7, #4]
 800b278:	fa01 f303 	lsl.w	r3, r1, r3
 800b27c:	431a      	orrs	r2, r3
 800b27e:	68fb      	ldr	r3, [r7, #12]
 800b280:	621a      	str	r2, [r3, #32]
}
 800b282:	bf00      	nop
 800b284:	371c      	adds	r7, #28
 800b286:	46bd      	mov	sp, r7
 800b288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b28c:	4770      	bx	lr
	...

0800b290 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800b290:	b480      	push	{r7}
 800b292:	b085      	sub	sp, #20
 800b294:	af00      	add	r7, sp, #0
 800b296:	6078      	str	r0, [r7, #4]
 800b298:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b29a:	687b      	ldr	r3, [r7, #4]
 800b29c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b2a0:	2b01      	cmp	r3, #1
 800b2a2:	d101      	bne.n	800b2a8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800b2a4:	2302      	movs	r3, #2
 800b2a6:	e05a      	b.n	800b35e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800b2a8:	687b      	ldr	r3, [r7, #4]
 800b2aa:	2201      	movs	r2, #1
 800b2ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b2b0:	687b      	ldr	r3, [r7, #4]
 800b2b2:	2202      	movs	r2, #2
 800b2b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800b2b8:	687b      	ldr	r3, [r7, #4]
 800b2ba:	681b      	ldr	r3, [r3, #0]
 800b2bc:	685b      	ldr	r3, [r3, #4]
 800b2be:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b2c0:	687b      	ldr	r3, [r7, #4]
 800b2c2:	681b      	ldr	r3, [r3, #0]
 800b2c4:	689b      	ldr	r3, [r3, #8]
 800b2c6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800b2c8:	68fb      	ldr	r3, [r7, #12]
 800b2ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b2ce:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800b2d0:	683b      	ldr	r3, [r7, #0]
 800b2d2:	681b      	ldr	r3, [r3, #0]
 800b2d4:	68fa      	ldr	r2, [r7, #12]
 800b2d6:	4313      	orrs	r3, r2
 800b2d8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800b2da:	687b      	ldr	r3, [r7, #4]
 800b2dc:	681b      	ldr	r3, [r3, #0]
 800b2de:	68fa      	ldr	r2, [r7, #12]
 800b2e0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b2e2:	687b      	ldr	r3, [r7, #4]
 800b2e4:	681b      	ldr	r3, [r3, #0]
 800b2e6:	4a21      	ldr	r2, [pc, #132]	; (800b36c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800b2e8:	4293      	cmp	r3, r2
 800b2ea:	d022      	beq.n	800b332 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b2ec:	687b      	ldr	r3, [r7, #4]
 800b2ee:	681b      	ldr	r3, [r3, #0]
 800b2f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b2f4:	d01d      	beq.n	800b332 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b2f6:	687b      	ldr	r3, [r7, #4]
 800b2f8:	681b      	ldr	r3, [r3, #0]
 800b2fa:	4a1d      	ldr	r2, [pc, #116]	; (800b370 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800b2fc:	4293      	cmp	r3, r2
 800b2fe:	d018      	beq.n	800b332 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b300:	687b      	ldr	r3, [r7, #4]
 800b302:	681b      	ldr	r3, [r3, #0]
 800b304:	4a1b      	ldr	r2, [pc, #108]	; (800b374 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800b306:	4293      	cmp	r3, r2
 800b308:	d013      	beq.n	800b332 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b30a:	687b      	ldr	r3, [r7, #4]
 800b30c:	681b      	ldr	r3, [r3, #0]
 800b30e:	4a1a      	ldr	r2, [pc, #104]	; (800b378 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800b310:	4293      	cmp	r3, r2
 800b312:	d00e      	beq.n	800b332 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	681b      	ldr	r3, [r3, #0]
 800b318:	4a18      	ldr	r2, [pc, #96]	; (800b37c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800b31a:	4293      	cmp	r3, r2
 800b31c:	d009      	beq.n	800b332 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b31e:	687b      	ldr	r3, [r7, #4]
 800b320:	681b      	ldr	r3, [r3, #0]
 800b322:	4a17      	ldr	r2, [pc, #92]	; (800b380 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800b324:	4293      	cmp	r3, r2
 800b326:	d004      	beq.n	800b332 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b328:	687b      	ldr	r3, [r7, #4]
 800b32a:	681b      	ldr	r3, [r3, #0]
 800b32c:	4a15      	ldr	r2, [pc, #84]	; (800b384 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800b32e:	4293      	cmp	r3, r2
 800b330:	d10c      	bne.n	800b34c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800b332:	68bb      	ldr	r3, [r7, #8]
 800b334:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b338:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800b33a:	683b      	ldr	r3, [r7, #0]
 800b33c:	685b      	ldr	r3, [r3, #4]
 800b33e:	68ba      	ldr	r2, [r7, #8]
 800b340:	4313      	orrs	r3, r2
 800b342:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800b344:	687b      	ldr	r3, [r7, #4]
 800b346:	681b      	ldr	r3, [r3, #0]
 800b348:	68ba      	ldr	r2, [r7, #8]
 800b34a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800b34c:	687b      	ldr	r3, [r7, #4]
 800b34e:	2201      	movs	r2, #1
 800b350:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b354:	687b      	ldr	r3, [r7, #4]
 800b356:	2200      	movs	r2, #0
 800b358:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b35c:	2300      	movs	r3, #0
}
 800b35e:	4618      	mov	r0, r3
 800b360:	3714      	adds	r7, #20
 800b362:	46bd      	mov	sp, r7
 800b364:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b368:	4770      	bx	lr
 800b36a:	bf00      	nop
 800b36c:	40010000 	.word	0x40010000
 800b370:	40000400 	.word	0x40000400
 800b374:	40000800 	.word	0x40000800
 800b378:	40000c00 	.word	0x40000c00
 800b37c:	40010400 	.word	0x40010400
 800b380:	40014000 	.word	0x40014000
 800b384:	40001800 	.word	0x40001800

0800b388 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800b388:	b580      	push	{r7, lr}
 800b38a:	b082      	sub	sp, #8
 800b38c:	af00      	add	r7, sp, #0
 800b38e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b390:	687b      	ldr	r3, [r7, #4]
 800b392:	2b00      	cmp	r3, #0
 800b394:	d101      	bne.n	800b39a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800b396:	2301      	movs	r3, #1
 800b398:	e03f      	b.n	800b41a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800b39a:	687b      	ldr	r3, [r7, #4]
 800b39c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800b3a0:	b2db      	uxtb	r3, r3
 800b3a2:	2b00      	cmp	r3, #0
 800b3a4:	d106      	bne.n	800b3b4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b3a6:	687b      	ldr	r3, [r7, #4]
 800b3a8:	2200      	movs	r2, #0
 800b3aa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800b3ae:	6878      	ldr	r0, [r7, #4]
 800b3b0:	f7f9 fde8 	bl	8004f84 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b3b4:	687b      	ldr	r3, [r7, #4]
 800b3b6:	2224      	movs	r2, #36	; 0x24
 800b3b8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800b3bc:	687b      	ldr	r3, [r7, #4]
 800b3be:	681b      	ldr	r3, [r3, #0]
 800b3c0:	68da      	ldr	r2, [r3, #12]
 800b3c2:	687b      	ldr	r3, [r7, #4]
 800b3c4:	681b      	ldr	r3, [r3, #0]
 800b3c6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800b3ca:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800b3cc:	6878      	ldr	r0, [r7, #4]
 800b3ce:	f000 f829 	bl	800b424 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b3d2:	687b      	ldr	r3, [r7, #4]
 800b3d4:	681b      	ldr	r3, [r3, #0]
 800b3d6:	691a      	ldr	r2, [r3, #16]
 800b3d8:	687b      	ldr	r3, [r7, #4]
 800b3da:	681b      	ldr	r3, [r3, #0]
 800b3dc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800b3e0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b3e2:	687b      	ldr	r3, [r7, #4]
 800b3e4:	681b      	ldr	r3, [r3, #0]
 800b3e6:	695a      	ldr	r2, [r3, #20]
 800b3e8:	687b      	ldr	r3, [r7, #4]
 800b3ea:	681b      	ldr	r3, [r3, #0]
 800b3ec:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800b3f0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800b3f2:	687b      	ldr	r3, [r7, #4]
 800b3f4:	681b      	ldr	r3, [r3, #0]
 800b3f6:	68da      	ldr	r2, [r3, #12]
 800b3f8:	687b      	ldr	r3, [r7, #4]
 800b3fa:	681b      	ldr	r3, [r3, #0]
 800b3fc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800b400:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b402:	687b      	ldr	r3, [r7, #4]
 800b404:	2200      	movs	r2, #0
 800b406:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800b408:	687b      	ldr	r3, [r7, #4]
 800b40a:	2220      	movs	r2, #32
 800b40c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800b410:	687b      	ldr	r3, [r7, #4]
 800b412:	2220      	movs	r2, #32
 800b414:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800b418:	2300      	movs	r3, #0
}
 800b41a:	4618      	mov	r0, r3
 800b41c:	3708      	adds	r7, #8
 800b41e:	46bd      	mov	sp, r7
 800b420:	bd80      	pop	{r7, pc}
	...

0800b424 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b424:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b428:	b085      	sub	sp, #20
 800b42a:	af00      	add	r7, sp, #0
 800b42c:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b42e:	687b      	ldr	r3, [r7, #4]
 800b430:	681b      	ldr	r3, [r3, #0]
 800b432:	691b      	ldr	r3, [r3, #16]
 800b434:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800b438:	687b      	ldr	r3, [r7, #4]
 800b43a:	68da      	ldr	r2, [r3, #12]
 800b43c:	687b      	ldr	r3, [r7, #4]
 800b43e:	681b      	ldr	r3, [r3, #0]
 800b440:	430a      	orrs	r2, r1
 800b442:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800b444:	687b      	ldr	r3, [r7, #4]
 800b446:	689a      	ldr	r2, [r3, #8]
 800b448:	687b      	ldr	r3, [r7, #4]
 800b44a:	691b      	ldr	r3, [r3, #16]
 800b44c:	431a      	orrs	r2, r3
 800b44e:	687b      	ldr	r3, [r7, #4]
 800b450:	695b      	ldr	r3, [r3, #20]
 800b452:	431a      	orrs	r2, r3
 800b454:	687b      	ldr	r3, [r7, #4]
 800b456:	69db      	ldr	r3, [r3, #28]
 800b458:	4313      	orrs	r3, r2
 800b45a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 800b45c:	687b      	ldr	r3, [r7, #4]
 800b45e:	681b      	ldr	r3, [r3, #0]
 800b460:	68db      	ldr	r3, [r3, #12]
 800b462:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800b466:	f023 030c 	bic.w	r3, r3, #12
 800b46a:	687a      	ldr	r2, [r7, #4]
 800b46c:	6812      	ldr	r2, [r2, #0]
 800b46e:	68f9      	ldr	r1, [r7, #12]
 800b470:	430b      	orrs	r3, r1
 800b472:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800b474:	687b      	ldr	r3, [r7, #4]
 800b476:	681b      	ldr	r3, [r3, #0]
 800b478:	695b      	ldr	r3, [r3, #20]
 800b47a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800b47e:	687b      	ldr	r3, [r7, #4]
 800b480:	699a      	ldr	r2, [r3, #24]
 800b482:	687b      	ldr	r3, [r7, #4]
 800b484:	681b      	ldr	r3, [r3, #0]
 800b486:	430a      	orrs	r2, r1
 800b488:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b48a:	687b      	ldr	r3, [r7, #4]
 800b48c:	69db      	ldr	r3, [r3, #28]
 800b48e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b492:	f040 818b 	bne.w	800b7ac <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800b496:	687b      	ldr	r3, [r7, #4]
 800b498:	681b      	ldr	r3, [r3, #0]
 800b49a:	4ac1      	ldr	r2, [pc, #772]	; (800b7a0 <UART_SetConfig+0x37c>)
 800b49c:	4293      	cmp	r3, r2
 800b49e:	d005      	beq.n	800b4ac <UART_SetConfig+0x88>
 800b4a0:	687b      	ldr	r3, [r7, #4]
 800b4a2:	681b      	ldr	r3, [r3, #0]
 800b4a4:	4abf      	ldr	r2, [pc, #764]	; (800b7a4 <UART_SetConfig+0x380>)
 800b4a6:	4293      	cmp	r3, r2
 800b4a8:	f040 80bd 	bne.w	800b626 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800b4ac:	f7fd fb02 	bl	8008ab4 <HAL_RCC_GetPCLK2Freq>
 800b4b0:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800b4b2:	68bb      	ldr	r3, [r7, #8]
 800b4b4:	461d      	mov	r5, r3
 800b4b6:	f04f 0600 	mov.w	r6, #0
 800b4ba:	46a8      	mov	r8, r5
 800b4bc:	46b1      	mov	r9, r6
 800b4be:	eb18 0308 	adds.w	r3, r8, r8
 800b4c2:	eb49 0409 	adc.w	r4, r9, r9
 800b4c6:	4698      	mov	r8, r3
 800b4c8:	46a1      	mov	r9, r4
 800b4ca:	eb18 0805 	adds.w	r8, r8, r5
 800b4ce:	eb49 0906 	adc.w	r9, r9, r6
 800b4d2:	f04f 0100 	mov.w	r1, #0
 800b4d6:	f04f 0200 	mov.w	r2, #0
 800b4da:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800b4de:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800b4e2:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800b4e6:	4688      	mov	r8, r1
 800b4e8:	4691      	mov	r9, r2
 800b4ea:	eb18 0005 	adds.w	r0, r8, r5
 800b4ee:	eb49 0106 	adc.w	r1, r9, r6
 800b4f2:	687b      	ldr	r3, [r7, #4]
 800b4f4:	685b      	ldr	r3, [r3, #4]
 800b4f6:	461d      	mov	r5, r3
 800b4f8:	f04f 0600 	mov.w	r6, #0
 800b4fc:	196b      	adds	r3, r5, r5
 800b4fe:	eb46 0406 	adc.w	r4, r6, r6
 800b502:	461a      	mov	r2, r3
 800b504:	4623      	mov	r3, r4
 800b506:	f7f5 fbbf 	bl	8000c88 <__aeabi_uldivmod>
 800b50a:	4603      	mov	r3, r0
 800b50c:	460c      	mov	r4, r1
 800b50e:	461a      	mov	r2, r3
 800b510:	4ba5      	ldr	r3, [pc, #660]	; (800b7a8 <UART_SetConfig+0x384>)
 800b512:	fba3 2302 	umull	r2, r3, r3, r2
 800b516:	095b      	lsrs	r3, r3, #5
 800b518:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800b51c:	68bb      	ldr	r3, [r7, #8]
 800b51e:	461d      	mov	r5, r3
 800b520:	f04f 0600 	mov.w	r6, #0
 800b524:	46a9      	mov	r9, r5
 800b526:	46b2      	mov	sl, r6
 800b528:	eb19 0309 	adds.w	r3, r9, r9
 800b52c:	eb4a 040a 	adc.w	r4, sl, sl
 800b530:	4699      	mov	r9, r3
 800b532:	46a2      	mov	sl, r4
 800b534:	eb19 0905 	adds.w	r9, r9, r5
 800b538:	eb4a 0a06 	adc.w	sl, sl, r6
 800b53c:	f04f 0100 	mov.w	r1, #0
 800b540:	f04f 0200 	mov.w	r2, #0
 800b544:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800b548:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800b54c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800b550:	4689      	mov	r9, r1
 800b552:	4692      	mov	sl, r2
 800b554:	eb19 0005 	adds.w	r0, r9, r5
 800b558:	eb4a 0106 	adc.w	r1, sl, r6
 800b55c:	687b      	ldr	r3, [r7, #4]
 800b55e:	685b      	ldr	r3, [r3, #4]
 800b560:	461d      	mov	r5, r3
 800b562:	f04f 0600 	mov.w	r6, #0
 800b566:	196b      	adds	r3, r5, r5
 800b568:	eb46 0406 	adc.w	r4, r6, r6
 800b56c:	461a      	mov	r2, r3
 800b56e:	4623      	mov	r3, r4
 800b570:	f7f5 fb8a 	bl	8000c88 <__aeabi_uldivmod>
 800b574:	4603      	mov	r3, r0
 800b576:	460c      	mov	r4, r1
 800b578:	461a      	mov	r2, r3
 800b57a:	4b8b      	ldr	r3, [pc, #556]	; (800b7a8 <UART_SetConfig+0x384>)
 800b57c:	fba3 1302 	umull	r1, r3, r3, r2
 800b580:	095b      	lsrs	r3, r3, #5
 800b582:	2164      	movs	r1, #100	; 0x64
 800b584:	fb01 f303 	mul.w	r3, r1, r3
 800b588:	1ad3      	subs	r3, r2, r3
 800b58a:	00db      	lsls	r3, r3, #3
 800b58c:	3332      	adds	r3, #50	; 0x32
 800b58e:	4a86      	ldr	r2, [pc, #536]	; (800b7a8 <UART_SetConfig+0x384>)
 800b590:	fba2 2303 	umull	r2, r3, r2, r3
 800b594:	095b      	lsrs	r3, r3, #5
 800b596:	005b      	lsls	r3, r3, #1
 800b598:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800b59c:	4498      	add	r8, r3
 800b59e:	68bb      	ldr	r3, [r7, #8]
 800b5a0:	461d      	mov	r5, r3
 800b5a2:	f04f 0600 	mov.w	r6, #0
 800b5a6:	46a9      	mov	r9, r5
 800b5a8:	46b2      	mov	sl, r6
 800b5aa:	eb19 0309 	adds.w	r3, r9, r9
 800b5ae:	eb4a 040a 	adc.w	r4, sl, sl
 800b5b2:	4699      	mov	r9, r3
 800b5b4:	46a2      	mov	sl, r4
 800b5b6:	eb19 0905 	adds.w	r9, r9, r5
 800b5ba:	eb4a 0a06 	adc.w	sl, sl, r6
 800b5be:	f04f 0100 	mov.w	r1, #0
 800b5c2:	f04f 0200 	mov.w	r2, #0
 800b5c6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800b5ca:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800b5ce:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800b5d2:	4689      	mov	r9, r1
 800b5d4:	4692      	mov	sl, r2
 800b5d6:	eb19 0005 	adds.w	r0, r9, r5
 800b5da:	eb4a 0106 	adc.w	r1, sl, r6
 800b5de:	687b      	ldr	r3, [r7, #4]
 800b5e0:	685b      	ldr	r3, [r3, #4]
 800b5e2:	461d      	mov	r5, r3
 800b5e4:	f04f 0600 	mov.w	r6, #0
 800b5e8:	196b      	adds	r3, r5, r5
 800b5ea:	eb46 0406 	adc.w	r4, r6, r6
 800b5ee:	461a      	mov	r2, r3
 800b5f0:	4623      	mov	r3, r4
 800b5f2:	f7f5 fb49 	bl	8000c88 <__aeabi_uldivmod>
 800b5f6:	4603      	mov	r3, r0
 800b5f8:	460c      	mov	r4, r1
 800b5fa:	461a      	mov	r2, r3
 800b5fc:	4b6a      	ldr	r3, [pc, #424]	; (800b7a8 <UART_SetConfig+0x384>)
 800b5fe:	fba3 1302 	umull	r1, r3, r3, r2
 800b602:	095b      	lsrs	r3, r3, #5
 800b604:	2164      	movs	r1, #100	; 0x64
 800b606:	fb01 f303 	mul.w	r3, r1, r3
 800b60a:	1ad3      	subs	r3, r2, r3
 800b60c:	00db      	lsls	r3, r3, #3
 800b60e:	3332      	adds	r3, #50	; 0x32
 800b610:	4a65      	ldr	r2, [pc, #404]	; (800b7a8 <UART_SetConfig+0x384>)
 800b612:	fba2 2303 	umull	r2, r3, r2, r3
 800b616:	095b      	lsrs	r3, r3, #5
 800b618:	f003 0207 	and.w	r2, r3, #7
 800b61c:	687b      	ldr	r3, [r7, #4]
 800b61e:	681b      	ldr	r3, [r3, #0]
 800b620:	4442      	add	r2, r8
 800b622:	609a      	str	r2, [r3, #8]
 800b624:	e26f      	b.n	800bb06 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800b626:	f7fd fa31 	bl	8008a8c <HAL_RCC_GetPCLK1Freq>
 800b62a:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800b62c:	68bb      	ldr	r3, [r7, #8]
 800b62e:	461d      	mov	r5, r3
 800b630:	f04f 0600 	mov.w	r6, #0
 800b634:	46a8      	mov	r8, r5
 800b636:	46b1      	mov	r9, r6
 800b638:	eb18 0308 	adds.w	r3, r8, r8
 800b63c:	eb49 0409 	adc.w	r4, r9, r9
 800b640:	4698      	mov	r8, r3
 800b642:	46a1      	mov	r9, r4
 800b644:	eb18 0805 	adds.w	r8, r8, r5
 800b648:	eb49 0906 	adc.w	r9, r9, r6
 800b64c:	f04f 0100 	mov.w	r1, #0
 800b650:	f04f 0200 	mov.w	r2, #0
 800b654:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800b658:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800b65c:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800b660:	4688      	mov	r8, r1
 800b662:	4691      	mov	r9, r2
 800b664:	eb18 0005 	adds.w	r0, r8, r5
 800b668:	eb49 0106 	adc.w	r1, r9, r6
 800b66c:	687b      	ldr	r3, [r7, #4]
 800b66e:	685b      	ldr	r3, [r3, #4]
 800b670:	461d      	mov	r5, r3
 800b672:	f04f 0600 	mov.w	r6, #0
 800b676:	196b      	adds	r3, r5, r5
 800b678:	eb46 0406 	adc.w	r4, r6, r6
 800b67c:	461a      	mov	r2, r3
 800b67e:	4623      	mov	r3, r4
 800b680:	f7f5 fb02 	bl	8000c88 <__aeabi_uldivmod>
 800b684:	4603      	mov	r3, r0
 800b686:	460c      	mov	r4, r1
 800b688:	461a      	mov	r2, r3
 800b68a:	4b47      	ldr	r3, [pc, #284]	; (800b7a8 <UART_SetConfig+0x384>)
 800b68c:	fba3 2302 	umull	r2, r3, r3, r2
 800b690:	095b      	lsrs	r3, r3, #5
 800b692:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800b696:	68bb      	ldr	r3, [r7, #8]
 800b698:	461d      	mov	r5, r3
 800b69a:	f04f 0600 	mov.w	r6, #0
 800b69e:	46a9      	mov	r9, r5
 800b6a0:	46b2      	mov	sl, r6
 800b6a2:	eb19 0309 	adds.w	r3, r9, r9
 800b6a6:	eb4a 040a 	adc.w	r4, sl, sl
 800b6aa:	4699      	mov	r9, r3
 800b6ac:	46a2      	mov	sl, r4
 800b6ae:	eb19 0905 	adds.w	r9, r9, r5
 800b6b2:	eb4a 0a06 	adc.w	sl, sl, r6
 800b6b6:	f04f 0100 	mov.w	r1, #0
 800b6ba:	f04f 0200 	mov.w	r2, #0
 800b6be:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800b6c2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800b6c6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800b6ca:	4689      	mov	r9, r1
 800b6cc:	4692      	mov	sl, r2
 800b6ce:	eb19 0005 	adds.w	r0, r9, r5
 800b6d2:	eb4a 0106 	adc.w	r1, sl, r6
 800b6d6:	687b      	ldr	r3, [r7, #4]
 800b6d8:	685b      	ldr	r3, [r3, #4]
 800b6da:	461d      	mov	r5, r3
 800b6dc:	f04f 0600 	mov.w	r6, #0
 800b6e0:	196b      	adds	r3, r5, r5
 800b6e2:	eb46 0406 	adc.w	r4, r6, r6
 800b6e6:	461a      	mov	r2, r3
 800b6e8:	4623      	mov	r3, r4
 800b6ea:	f7f5 facd 	bl	8000c88 <__aeabi_uldivmod>
 800b6ee:	4603      	mov	r3, r0
 800b6f0:	460c      	mov	r4, r1
 800b6f2:	461a      	mov	r2, r3
 800b6f4:	4b2c      	ldr	r3, [pc, #176]	; (800b7a8 <UART_SetConfig+0x384>)
 800b6f6:	fba3 1302 	umull	r1, r3, r3, r2
 800b6fa:	095b      	lsrs	r3, r3, #5
 800b6fc:	2164      	movs	r1, #100	; 0x64
 800b6fe:	fb01 f303 	mul.w	r3, r1, r3
 800b702:	1ad3      	subs	r3, r2, r3
 800b704:	00db      	lsls	r3, r3, #3
 800b706:	3332      	adds	r3, #50	; 0x32
 800b708:	4a27      	ldr	r2, [pc, #156]	; (800b7a8 <UART_SetConfig+0x384>)
 800b70a:	fba2 2303 	umull	r2, r3, r2, r3
 800b70e:	095b      	lsrs	r3, r3, #5
 800b710:	005b      	lsls	r3, r3, #1
 800b712:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800b716:	4498      	add	r8, r3
 800b718:	68bb      	ldr	r3, [r7, #8]
 800b71a:	461d      	mov	r5, r3
 800b71c:	f04f 0600 	mov.w	r6, #0
 800b720:	46a9      	mov	r9, r5
 800b722:	46b2      	mov	sl, r6
 800b724:	eb19 0309 	adds.w	r3, r9, r9
 800b728:	eb4a 040a 	adc.w	r4, sl, sl
 800b72c:	4699      	mov	r9, r3
 800b72e:	46a2      	mov	sl, r4
 800b730:	eb19 0905 	adds.w	r9, r9, r5
 800b734:	eb4a 0a06 	adc.w	sl, sl, r6
 800b738:	f04f 0100 	mov.w	r1, #0
 800b73c:	f04f 0200 	mov.w	r2, #0
 800b740:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800b744:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800b748:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800b74c:	4689      	mov	r9, r1
 800b74e:	4692      	mov	sl, r2
 800b750:	eb19 0005 	adds.w	r0, r9, r5
 800b754:	eb4a 0106 	adc.w	r1, sl, r6
 800b758:	687b      	ldr	r3, [r7, #4]
 800b75a:	685b      	ldr	r3, [r3, #4]
 800b75c:	461d      	mov	r5, r3
 800b75e:	f04f 0600 	mov.w	r6, #0
 800b762:	196b      	adds	r3, r5, r5
 800b764:	eb46 0406 	adc.w	r4, r6, r6
 800b768:	461a      	mov	r2, r3
 800b76a:	4623      	mov	r3, r4
 800b76c:	f7f5 fa8c 	bl	8000c88 <__aeabi_uldivmod>
 800b770:	4603      	mov	r3, r0
 800b772:	460c      	mov	r4, r1
 800b774:	461a      	mov	r2, r3
 800b776:	4b0c      	ldr	r3, [pc, #48]	; (800b7a8 <UART_SetConfig+0x384>)
 800b778:	fba3 1302 	umull	r1, r3, r3, r2
 800b77c:	095b      	lsrs	r3, r3, #5
 800b77e:	2164      	movs	r1, #100	; 0x64
 800b780:	fb01 f303 	mul.w	r3, r1, r3
 800b784:	1ad3      	subs	r3, r2, r3
 800b786:	00db      	lsls	r3, r3, #3
 800b788:	3332      	adds	r3, #50	; 0x32
 800b78a:	4a07      	ldr	r2, [pc, #28]	; (800b7a8 <UART_SetConfig+0x384>)
 800b78c:	fba2 2303 	umull	r2, r3, r2, r3
 800b790:	095b      	lsrs	r3, r3, #5
 800b792:	f003 0207 	and.w	r2, r3, #7
 800b796:	687b      	ldr	r3, [r7, #4]
 800b798:	681b      	ldr	r3, [r3, #0]
 800b79a:	4442      	add	r2, r8
 800b79c:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800b79e:	e1b2      	b.n	800bb06 <UART_SetConfig+0x6e2>
 800b7a0:	40011000 	.word	0x40011000
 800b7a4:	40011400 	.word	0x40011400
 800b7a8:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800b7ac:	687b      	ldr	r3, [r7, #4]
 800b7ae:	681b      	ldr	r3, [r3, #0]
 800b7b0:	4ad7      	ldr	r2, [pc, #860]	; (800bb10 <UART_SetConfig+0x6ec>)
 800b7b2:	4293      	cmp	r3, r2
 800b7b4:	d005      	beq.n	800b7c2 <UART_SetConfig+0x39e>
 800b7b6:	687b      	ldr	r3, [r7, #4]
 800b7b8:	681b      	ldr	r3, [r3, #0]
 800b7ba:	4ad6      	ldr	r2, [pc, #856]	; (800bb14 <UART_SetConfig+0x6f0>)
 800b7bc:	4293      	cmp	r3, r2
 800b7be:	f040 80d1 	bne.w	800b964 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 800b7c2:	f7fd f977 	bl	8008ab4 <HAL_RCC_GetPCLK2Freq>
 800b7c6:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800b7c8:	68bb      	ldr	r3, [r7, #8]
 800b7ca:	469a      	mov	sl, r3
 800b7cc:	f04f 0b00 	mov.w	fp, #0
 800b7d0:	46d0      	mov	r8, sl
 800b7d2:	46d9      	mov	r9, fp
 800b7d4:	eb18 0308 	adds.w	r3, r8, r8
 800b7d8:	eb49 0409 	adc.w	r4, r9, r9
 800b7dc:	4698      	mov	r8, r3
 800b7de:	46a1      	mov	r9, r4
 800b7e0:	eb18 080a 	adds.w	r8, r8, sl
 800b7e4:	eb49 090b 	adc.w	r9, r9, fp
 800b7e8:	f04f 0100 	mov.w	r1, #0
 800b7ec:	f04f 0200 	mov.w	r2, #0
 800b7f0:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800b7f4:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800b7f8:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800b7fc:	4688      	mov	r8, r1
 800b7fe:	4691      	mov	r9, r2
 800b800:	eb1a 0508 	adds.w	r5, sl, r8
 800b804:	eb4b 0609 	adc.w	r6, fp, r9
 800b808:	687b      	ldr	r3, [r7, #4]
 800b80a:	685b      	ldr	r3, [r3, #4]
 800b80c:	4619      	mov	r1, r3
 800b80e:	f04f 0200 	mov.w	r2, #0
 800b812:	f04f 0300 	mov.w	r3, #0
 800b816:	f04f 0400 	mov.w	r4, #0
 800b81a:	0094      	lsls	r4, r2, #2
 800b81c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800b820:	008b      	lsls	r3, r1, #2
 800b822:	461a      	mov	r2, r3
 800b824:	4623      	mov	r3, r4
 800b826:	4628      	mov	r0, r5
 800b828:	4631      	mov	r1, r6
 800b82a:	f7f5 fa2d 	bl	8000c88 <__aeabi_uldivmod>
 800b82e:	4603      	mov	r3, r0
 800b830:	460c      	mov	r4, r1
 800b832:	461a      	mov	r2, r3
 800b834:	4bb8      	ldr	r3, [pc, #736]	; (800bb18 <UART_SetConfig+0x6f4>)
 800b836:	fba3 2302 	umull	r2, r3, r3, r2
 800b83a:	095b      	lsrs	r3, r3, #5
 800b83c:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800b840:	68bb      	ldr	r3, [r7, #8]
 800b842:	469b      	mov	fp, r3
 800b844:	f04f 0c00 	mov.w	ip, #0
 800b848:	46d9      	mov	r9, fp
 800b84a:	46e2      	mov	sl, ip
 800b84c:	eb19 0309 	adds.w	r3, r9, r9
 800b850:	eb4a 040a 	adc.w	r4, sl, sl
 800b854:	4699      	mov	r9, r3
 800b856:	46a2      	mov	sl, r4
 800b858:	eb19 090b 	adds.w	r9, r9, fp
 800b85c:	eb4a 0a0c 	adc.w	sl, sl, ip
 800b860:	f04f 0100 	mov.w	r1, #0
 800b864:	f04f 0200 	mov.w	r2, #0
 800b868:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800b86c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800b870:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800b874:	4689      	mov	r9, r1
 800b876:	4692      	mov	sl, r2
 800b878:	eb1b 0509 	adds.w	r5, fp, r9
 800b87c:	eb4c 060a 	adc.w	r6, ip, sl
 800b880:	687b      	ldr	r3, [r7, #4]
 800b882:	685b      	ldr	r3, [r3, #4]
 800b884:	4619      	mov	r1, r3
 800b886:	f04f 0200 	mov.w	r2, #0
 800b88a:	f04f 0300 	mov.w	r3, #0
 800b88e:	f04f 0400 	mov.w	r4, #0
 800b892:	0094      	lsls	r4, r2, #2
 800b894:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800b898:	008b      	lsls	r3, r1, #2
 800b89a:	461a      	mov	r2, r3
 800b89c:	4623      	mov	r3, r4
 800b89e:	4628      	mov	r0, r5
 800b8a0:	4631      	mov	r1, r6
 800b8a2:	f7f5 f9f1 	bl	8000c88 <__aeabi_uldivmod>
 800b8a6:	4603      	mov	r3, r0
 800b8a8:	460c      	mov	r4, r1
 800b8aa:	461a      	mov	r2, r3
 800b8ac:	4b9a      	ldr	r3, [pc, #616]	; (800bb18 <UART_SetConfig+0x6f4>)
 800b8ae:	fba3 1302 	umull	r1, r3, r3, r2
 800b8b2:	095b      	lsrs	r3, r3, #5
 800b8b4:	2164      	movs	r1, #100	; 0x64
 800b8b6:	fb01 f303 	mul.w	r3, r1, r3
 800b8ba:	1ad3      	subs	r3, r2, r3
 800b8bc:	011b      	lsls	r3, r3, #4
 800b8be:	3332      	adds	r3, #50	; 0x32
 800b8c0:	4a95      	ldr	r2, [pc, #596]	; (800bb18 <UART_SetConfig+0x6f4>)
 800b8c2:	fba2 2303 	umull	r2, r3, r2, r3
 800b8c6:	095b      	lsrs	r3, r3, #5
 800b8c8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b8cc:	4498      	add	r8, r3
 800b8ce:	68bb      	ldr	r3, [r7, #8]
 800b8d0:	469b      	mov	fp, r3
 800b8d2:	f04f 0c00 	mov.w	ip, #0
 800b8d6:	46d9      	mov	r9, fp
 800b8d8:	46e2      	mov	sl, ip
 800b8da:	eb19 0309 	adds.w	r3, r9, r9
 800b8de:	eb4a 040a 	adc.w	r4, sl, sl
 800b8e2:	4699      	mov	r9, r3
 800b8e4:	46a2      	mov	sl, r4
 800b8e6:	eb19 090b 	adds.w	r9, r9, fp
 800b8ea:	eb4a 0a0c 	adc.w	sl, sl, ip
 800b8ee:	f04f 0100 	mov.w	r1, #0
 800b8f2:	f04f 0200 	mov.w	r2, #0
 800b8f6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800b8fa:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800b8fe:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800b902:	4689      	mov	r9, r1
 800b904:	4692      	mov	sl, r2
 800b906:	eb1b 0509 	adds.w	r5, fp, r9
 800b90a:	eb4c 060a 	adc.w	r6, ip, sl
 800b90e:	687b      	ldr	r3, [r7, #4]
 800b910:	685b      	ldr	r3, [r3, #4]
 800b912:	4619      	mov	r1, r3
 800b914:	f04f 0200 	mov.w	r2, #0
 800b918:	f04f 0300 	mov.w	r3, #0
 800b91c:	f04f 0400 	mov.w	r4, #0
 800b920:	0094      	lsls	r4, r2, #2
 800b922:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800b926:	008b      	lsls	r3, r1, #2
 800b928:	461a      	mov	r2, r3
 800b92a:	4623      	mov	r3, r4
 800b92c:	4628      	mov	r0, r5
 800b92e:	4631      	mov	r1, r6
 800b930:	f7f5 f9aa 	bl	8000c88 <__aeabi_uldivmod>
 800b934:	4603      	mov	r3, r0
 800b936:	460c      	mov	r4, r1
 800b938:	461a      	mov	r2, r3
 800b93a:	4b77      	ldr	r3, [pc, #476]	; (800bb18 <UART_SetConfig+0x6f4>)
 800b93c:	fba3 1302 	umull	r1, r3, r3, r2
 800b940:	095b      	lsrs	r3, r3, #5
 800b942:	2164      	movs	r1, #100	; 0x64
 800b944:	fb01 f303 	mul.w	r3, r1, r3
 800b948:	1ad3      	subs	r3, r2, r3
 800b94a:	011b      	lsls	r3, r3, #4
 800b94c:	3332      	adds	r3, #50	; 0x32
 800b94e:	4a72      	ldr	r2, [pc, #456]	; (800bb18 <UART_SetConfig+0x6f4>)
 800b950:	fba2 2303 	umull	r2, r3, r2, r3
 800b954:	095b      	lsrs	r3, r3, #5
 800b956:	f003 020f 	and.w	r2, r3, #15
 800b95a:	687b      	ldr	r3, [r7, #4]
 800b95c:	681b      	ldr	r3, [r3, #0]
 800b95e:	4442      	add	r2, r8
 800b960:	609a      	str	r2, [r3, #8]
 800b962:	e0d0      	b.n	800bb06 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 800b964:	f7fd f892 	bl	8008a8c <HAL_RCC_GetPCLK1Freq>
 800b968:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800b96a:	68bb      	ldr	r3, [r7, #8]
 800b96c:	469a      	mov	sl, r3
 800b96e:	f04f 0b00 	mov.w	fp, #0
 800b972:	46d0      	mov	r8, sl
 800b974:	46d9      	mov	r9, fp
 800b976:	eb18 0308 	adds.w	r3, r8, r8
 800b97a:	eb49 0409 	adc.w	r4, r9, r9
 800b97e:	4698      	mov	r8, r3
 800b980:	46a1      	mov	r9, r4
 800b982:	eb18 080a 	adds.w	r8, r8, sl
 800b986:	eb49 090b 	adc.w	r9, r9, fp
 800b98a:	f04f 0100 	mov.w	r1, #0
 800b98e:	f04f 0200 	mov.w	r2, #0
 800b992:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800b996:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800b99a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800b99e:	4688      	mov	r8, r1
 800b9a0:	4691      	mov	r9, r2
 800b9a2:	eb1a 0508 	adds.w	r5, sl, r8
 800b9a6:	eb4b 0609 	adc.w	r6, fp, r9
 800b9aa:	687b      	ldr	r3, [r7, #4]
 800b9ac:	685b      	ldr	r3, [r3, #4]
 800b9ae:	4619      	mov	r1, r3
 800b9b0:	f04f 0200 	mov.w	r2, #0
 800b9b4:	f04f 0300 	mov.w	r3, #0
 800b9b8:	f04f 0400 	mov.w	r4, #0
 800b9bc:	0094      	lsls	r4, r2, #2
 800b9be:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800b9c2:	008b      	lsls	r3, r1, #2
 800b9c4:	461a      	mov	r2, r3
 800b9c6:	4623      	mov	r3, r4
 800b9c8:	4628      	mov	r0, r5
 800b9ca:	4631      	mov	r1, r6
 800b9cc:	f7f5 f95c 	bl	8000c88 <__aeabi_uldivmod>
 800b9d0:	4603      	mov	r3, r0
 800b9d2:	460c      	mov	r4, r1
 800b9d4:	461a      	mov	r2, r3
 800b9d6:	4b50      	ldr	r3, [pc, #320]	; (800bb18 <UART_SetConfig+0x6f4>)
 800b9d8:	fba3 2302 	umull	r2, r3, r3, r2
 800b9dc:	095b      	lsrs	r3, r3, #5
 800b9de:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800b9e2:	68bb      	ldr	r3, [r7, #8]
 800b9e4:	469b      	mov	fp, r3
 800b9e6:	f04f 0c00 	mov.w	ip, #0
 800b9ea:	46d9      	mov	r9, fp
 800b9ec:	46e2      	mov	sl, ip
 800b9ee:	eb19 0309 	adds.w	r3, r9, r9
 800b9f2:	eb4a 040a 	adc.w	r4, sl, sl
 800b9f6:	4699      	mov	r9, r3
 800b9f8:	46a2      	mov	sl, r4
 800b9fa:	eb19 090b 	adds.w	r9, r9, fp
 800b9fe:	eb4a 0a0c 	adc.w	sl, sl, ip
 800ba02:	f04f 0100 	mov.w	r1, #0
 800ba06:	f04f 0200 	mov.w	r2, #0
 800ba0a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800ba0e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800ba12:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800ba16:	4689      	mov	r9, r1
 800ba18:	4692      	mov	sl, r2
 800ba1a:	eb1b 0509 	adds.w	r5, fp, r9
 800ba1e:	eb4c 060a 	adc.w	r6, ip, sl
 800ba22:	687b      	ldr	r3, [r7, #4]
 800ba24:	685b      	ldr	r3, [r3, #4]
 800ba26:	4619      	mov	r1, r3
 800ba28:	f04f 0200 	mov.w	r2, #0
 800ba2c:	f04f 0300 	mov.w	r3, #0
 800ba30:	f04f 0400 	mov.w	r4, #0
 800ba34:	0094      	lsls	r4, r2, #2
 800ba36:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800ba3a:	008b      	lsls	r3, r1, #2
 800ba3c:	461a      	mov	r2, r3
 800ba3e:	4623      	mov	r3, r4
 800ba40:	4628      	mov	r0, r5
 800ba42:	4631      	mov	r1, r6
 800ba44:	f7f5 f920 	bl	8000c88 <__aeabi_uldivmod>
 800ba48:	4603      	mov	r3, r0
 800ba4a:	460c      	mov	r4, r1
 800ba4c:	461a      	mov	r2, r3
 800ba4e:	4b32      	ldr	r3, [pc, #200]	; (800bb18 <UART_SetConfig+0x6f4>)
 800ba50:	fba3 1302 	umull	r1, r3, r3, r2
 800ba54:	095b      	lsrs	r3, r3, #5
 800ba56:	2164      	movs	r1, #100	; 0x64
 800ba58:	fb01 f303 	mul.w	r3, r1, r3
 800ba5c:	1ad3      	subs	r3, r2, r3
 800ba5e:	011b      	lsls	r3, r3, #4
 800ba60:	3332      	adds	r3, #50	; 0x32
 800ba62:	4a2d      	ldr	r2, [pc, #180]	; (800bb18 <UART_SetConfig+0x6f4>)
 800ba64:	fba2 2303 	umull	r2, r3, r2, r3
 800ba68:	095b      	lsrs	r3, r3, #5
 800ba6a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800ba6e:	4498      	add	r8, r3
 800ba70:	68bb      	ldr	r3, [r7, #8]
 800ba72:	469b      	mov	fp, r3
 800ba74:	f04f 0c00 	mov.w	ip, #0
 800ba78:	46d9      	mov	r9, fp
 800ba7a:	46e2      	mov	sl, ip
 800ba7c:	eb19 0309 	adds.w	r3, r9, r9
 800ba80:	eb4a 040a 	adc.w	r4, sl, sl
 800ba84:	4699      	mov	r9, r3
 800ba86:	46a2      	mov	sl, r4
 800ba88:	eb19 090b 	adds.w	r9, r9, fp
 800ba8c:	eb4a 0a0c 	adc.w	sl, sl, ip
 800ba90:	f04f 0100 	mov.w	r1, #0
 800ba94:	f04f 0200 	mov.w	r2, #0
 800ba98:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800ba9c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800baa0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800baa4:	4689      	mov	r9, r1
 800baa6:	4692      	mov	sl, r2
 800baa8:	eb1b 0509 	adds.w	r5, fp, r9
 800baac:	eb4c 060a 	adc.w	r6, ip, sl
 800bab0:	687b      	ldr	r3, [r7, #4]
 800bab2:	685b      	ldr	r3, [r3, #4]
 800bab4:	4619      	mov	r1, r3
 800bab6:	f04f 0200 	mov.w	r2, #0
 800baba:	f04f 0300 	mov.w	r3, #0
 800babe:	f04f 0400 	mov.w	r4, #0
 800bac2:	0094      	lsls	r4, r2, #2
 800bac4:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800bac8:	008b      	lsls	r3, r1, #2
 800baca:	461a      	mov	r2, r3
 800bacc:	4623      	mov	r3, r4
 800bace:	4628      	mov	r0, r5
 800bad0:	4631      	mov	r1, r6
 800bad2:	f7f5 f8d9 	bl	8000c88 <__aeabi_uldivmod>
 800bad6:	4603      	mov	r3, r0
 800bad8:	460c      	mov	r4, r1
 800bada:	461a      	mov	r2, r3
 800badc:	4b0e      	ldr	r3, [pc, #56]	; (800bb18 <UART_SetConfig+0x6f4>)
 800bade:	fba3 1302 	umull	r1, r3, r3, r2
 800bae2:	095b      	lsrs	r3, r3, #5
 800bae4:	2164      	movs	r1, #100	; 0x64
 800bae6:	fb01 f303 	mul.w	r3, r1, r3
 800baea:	1ad3      	subs	r3, r2, r3
 800baec:	011b      	lsls	r3, r3, #4
 800baee:	3332      	adds	r3, #50	; 0x32
 800baf0:	4a09      	ldr	r2, [pc, #36]	; (800bb18 <UART_SetConfig+0x6f4>)
 800baf2:	fba2 2303 	umull	r2, r3, r2, r3
 800baf6:	095b      	lsrs	r3, r3, #5
 800baf8:	f003 020f 	and.w	r2, r3, #15
 800bafc:	687b      	ldr	r3, [r7, #4]
 800bafe:	681b      	ldr	r3, [r3, #0]
 800bb00:	4442      	add	r2, r8
 800bb02:	609a      	str	r2, [r3, #8]
}
 800bb04:	e7ff      	b.n	800bb06 <UART_SetConfig+0x6e2>
 800bb06:	bf00      	nop
 800bb08:	3714      	adds	r7, #20
 800bb0a:	46bd      	mov	sp, r7
 800bb0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bb10:	40011000 	.word	0x40011000
 800bb14:	40011400 	.word	0x40011400
 800bb18:	51eb851f 	.word	0x51eb851f

0800bb1c <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 800bb1c:	b084      	sub	sp, #16
 800bb1e:	b480      	push	{r7}
 800bb20:	b085      	sub	sp, #20
 800bb22:	af00      	add	r7, sp, #0
 800bb24:	6078      	str	r0, [r7, #4]
 800bb26:	f107 001c 	add.w	r0, r7, #28
 800bb2a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800bb2e:	2300      	movs	r3, #0
 800bb30:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800bb32:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 800bb34:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800bb36:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 800bb38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 800bb3a:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800bb3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 800bb3e:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800bb40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 800bb42:	431a      	orrs	r2, r3
             Init.ClockDiv
 800bb44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 800bb46:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800bb48:	68fa      	ldr	r2, [r7, #12]
 800bb4a:	4313      	orrs	r3, r2
 800bb4c:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800bb4e:	687b      	ldr	r3, [r7, #4]
 800bb50:	685b      	ldr	r3, [r3, #4]
 800bb52:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 800bb56:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800bb5a:	68fa      	ldr	r2, [r7, #12]
 800bb5c:	431a      	orrs	r2, r3
 800bb5e:	687b      	ldr	r3, [r7, #4]
 800bb60:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800bb62:	2300      	movs	r3, #0
}
 800bb64:	4618      	mov	r0, r3
 800bb66:	3714      	adds	r7, #20
 800bb68:	46bd      	mov	sp, r7
 800bb6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb6e:	b004      	add	sp, #16
 800bb70:	4770      	bx	lr

0800bb72 <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 800bb72:	b480      	push	{r7}
 800bb74:	b083      	sub	sp, #12
 800bb76:	af00      	add	r7, sp, #0
 800bb78:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 800bb7a:	687b      	ldr	r3, [r7, #4]
 800bb7c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800bb80:	4618      	mov	r0, r3
 800bb82:	370c      	adds	r7, #12
 800bb84:	46bd      	mov	sp, r7
 800bb86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb8a:	4770      	bx	lr

0800bb8c <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 800bb8c:	b480      	push	{r7}
 800bb8e:	b083      	sub	sp, #12
 800bb90:	af00      	add	r7, sp, #0
 800bb92:	6078      	str	r0, [r7, #4]
 800bb94:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 800bb96:	683b      	ldr	r3, [r7, #0]
 800bb98:	681a      	ldr	r2, [r3, #0]
 800bb9a:	687b      	ldr	r3, [r7, #4]
 800bb9c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800bba0:	2300      	movs	r3, #0
}
 800bba2:	4618      	mov	r0, r3
 800bba4:	370c      	adds	r7, #12
 800bba6:	46bd      	mov	sp, r7
 800bba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbac:	4770      	bx	lr

0800bbae <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 800bbae:	b580      	push	{r7, lr}
 800bbb0:	b082      	sub	sp, #8
 800bbb2:	af00      	add	r7, sp, #0
 800bbb4:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 800bbb6:	687b      	ldr	r3, [r7, #4]
 800bbb8:	2203      	movs	r2, #3
 800bbba:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 800bbbc:	2002      	movs	r0, #2
 800bbbe:	f7f9 fb57 	bl	8005270 <HAL_Delay>
  
  return HAL_OK;
 800bbc2:	2300      	movs	r3, #0
}
 800bbc4:	4618      	mov	r0, r3
 800bbc6:	3708      	adds	r7, #8
 800bbc8:	46bd      	mov	sp, r7
 800bbca:	bd80      	pop	{r7, pc}

0800bbcc <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 800bbcc:	b480      	push	{r7}
 800bbce:	b083      	sub	sp, #12
 800bbd0:	af00      	add	r7, sp, #0
 800bbd2:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 800bbd4:	687b      	ldr	r3, [r7, #4]
 800bbd6:	681b      	ldr	r3, [r3, #0]
 800bbd8:	f003 0303 	and.w	r3, r3, #3
}
 800bbdc:	4618      	mov	r0, r3
 800bbde:	370c      	adds	r7, #12
 800bbe0:	46bd      	mov	sp, r7
 800bbe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbe6:	4770      	bx	lr

0800bbe8 <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 800bbe8:	b480      	push	{r7}
 800bbea:	b085      	sub	sp, #20
 800bbec:	af00      	add	r7, sp, #0
 800bbee:	6078      	str	r0, [r7, #4]
 800bbf0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800bbf2:	2300      	movs	r3, #0
 800bbf4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 800bbf6:	683b      	ldr	r3, [r7, #0]
 800bbf8:	681a      	ldr	r2, [r3, #0]
 800bbfa:	687b      	ldr	r3, [r7, #4]
 800bbfc:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800bbfe:	683b      	ldr	r3, [r7, #0]
 800bc00:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800bc02:	683b      	ldr	r3, [r7, #0]
 800bc04:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800bc06:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800bc08:	683b      	ldr	r3, [r7, #0]
 800bc0a:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800bc0c:	431a      	orrs	r2, r3
                       Command->CPSM);
 800bc0e:	683b      	ldr	r3, [r7, #0]
 800bc10:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800bc12:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800bc14:	68fa      	ldr	r2, [r7, #12]
 800bc16:	4313      	orrs	r3, r2
 800bc18:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800bc1a:	687b      	ldr	r3, [r7, #4]
 800bc1c:	68db      	ldr	r3, [r3, #12]
 800bc1e:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800bc22:	f023 030f 	bic.w	r3, r3, #15
 800bc26:	68fa      	ldr	r2, [r7, #12]
 800bc28:	431a      	orrs	r2, r3
 800bc2a:	687b      	ldr	r3, [r7, #4]
 800bc2c:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800bc2e:	2300      	movs	r3, #0
}
 800bc30:	4618      	mov	r0, r3
 800bc32:	3714      	adds	r7, #20
 800bc34:	46bd      	mov	sp, r7
 800bc36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc3a:	4770      	bx	lr

0800bc3c <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 800bc3c:	b480      	push	{r7}
 800bc3e:	b083      	sub	sp, #12
 800bc40:	af00      	add	r7, sp, #0
 800bc42:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 800bc44:	687b      	ldr	r3, [r7, #4]
 800bc46:	691b      	ldr	r3, [r3, #16]
 800bc48:	b2db      	uxtb	r3, r3
}
 800bc4a:	4618      	mov	r0, r3
 800bc4c:	370c      	adds	r7, #12
 800bc4e:	46bd      	mov	sp, r7
 800bc50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc54:	4770      	bx	lr

0800bc56 <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 800bc56:	b480      	push	{r7}
 800bc58:	b085      	sub	sp, #20
 800bc5a:	af00      	add	r7, sp, #0
 800bc5c:	6078      	str	r0, [r7, #4]
 800bc5e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 800bc60:	687b      	ldr	r3, [r7, #4]
 800bc62:	3314      	adds	r3, #20
 800bc64:	461a      	mov	r2, r3
 800bc66:	683b      	ldr	r3, [r7, #0]
 800bc68:	4413      	add	r3, r2
 800bc6a:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 800bc6c:	68fb      	ldr	r3, [r7, #12]
 800bc6e:	681b      	ldr	r3, [r3, #0]
}  
 800bc70:	4618      	mov	r0, r3
 800bc72:	3714      	adds	r7, #20
 800bc74:	46bd      	mov	sp, r7
 800bc76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc7a:	4770      	bx	lr

0800bc7c <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 800bc7c:	b480      	push	{r7}
 800bc7e:	b085      	sub	sp, #20
 800bc80:	af00      	add	r7, sp, #0
 800bc82:	6078      	str	r0, [r7, #4]
 800bc84:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800bc86:	2300      	movs	r3, #0
 800bc88:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 800bc8a:	683b      	ldr	r3, [r7, #0]
 800bc8c:	681a      	ldr	r2, [r3, #0]
 800bc8e:	687b      	ldr	r3, [r7, #4]
 800bc90:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 800bc92:	683b      	ldr	r3, [r7, #0]
 800bc94:	685a      	ldr	r2, [r3, #4]
 800bc96:	687b      	ldr	r3, [r7, #4]
 800bc98:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800bc9a:	683b      	ldr	r3, [r7, #0]
 800bc9c:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800bc9e:	683b      	ldr	r3, [r7, #0]
 800bca0:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800bca2:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800bca4:	683b      	ldr	r3, [r7, #0]
 800bca6:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800bca8:	431a      	orrs	r2, r3
                       Data->DPSM);
 800bcaa:	683b      	ldr	r3, [r7, #0]
 800bcac:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800bcae:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800bcb0:	68fa      	ldr	r2, [r7, #12]
 800bcb2:	4313      	orrs	r3, r2
 800bcb4:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800bcb6:	687b      	ldr	r3, [r7, #4]
 800bcb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bcba:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 800bcbe:	68fb      	ldr	r3, [r7, #12]
 800bcc0:	431a      	orrs	r2, r3
 800bcc2:	687b      	ldr	r3, [r7, #4]
 800bcc4:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800bcc6:	2300      	movs	r3, #0

}
 800bcc8:	4618      	mov	r0, r3
 800bcca:	3714      	adds	r7, #20
 800bccc:	46bd      	mov	sp, r7
 800bcce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcd2:	4770      	bx	lr

0800bcd4 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 800bcd4:	b580      	push	{r7, lr}
 800bcd6:	b088      	sub	sp, #32
 800bcd8:	af00      	add	r7, sp, #0
 800bcda:	6078      	str	r0, [r7, #4]
 800bcdc:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800bcde:	683b      	ldr	r3, [r7, #0]
 800bce0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800bce2:	2310      	movs	r3, #16
 800bce4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800bce6:	2340      	movs	r3, #64	; 0x40
 800bce8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800bcea:	2300      	movs	r3, #0
 800bcec:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800bcee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bcf2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800bcf4:	f107 0308 	add.w	r3, r7, #8
 800bcf8:	4619      	mov	r1, r3
 800bcfa:	6878      	ldr	r0, [r7, #4]
 800bcfc:	f7ff ff74 	bl	800bbe8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 800bd00:	f241 3288 	movw	r2, #5000	; 0x1388
 800bd04:	2110      	movs	r1, #16
 800bd06:	6878      	ldr	r0, [r7, #4]
 800bd08:	f000 fa40 	bl	800c18c <SDMMC_GetCmdResp1>
 800bd0c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bd0e:	69fb      	ldr	r3, [r7, #28]
}
 800bd10:	4618      	mov	r0, r3
 800bd12:	3720      	adds	r7, #32
 800bd14:	46bd      	mov	sp, r7
 800bd16:	bd80      	pop	{r7, pc}

0800bd18 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800bd18:	b580      	push	{r7, lr}
 800bd1a:	b088      	sub	sp, #32
 800bd1c:	af00      	add	r7, sp, #0
 800bd1e:	6078      	str	r0, [r7, #4]
 800bd20:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800bd22:	683b      	ldr	r3, [r7, #0]
 800bd24:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800bd26:	2311      	movs	r3, #17
 800bd28:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800bd2a:	2340      	movs	r3, #64	; 0x40
 800bd2c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800bd2e:	2300      	movs	r3, #0
 800bd30:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800bd32:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bd36:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800bd38:	f107 0308 	add.w	r3, r7, #8
 800bd3c:	4619      	mov	r1, r3
 800bd3e:	6878      	ldr	r0, [r7, #4]
 800bd40:	f7ff ff52 	bl	800bbe8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800bd44:	f241 3288 	movw	r2, #5000	; 0x1388
 800bd48:	2111      	movs	r1, #17
 800bd4a:	6878      	ldr	r0, [r7, #4]
 800bd4c:	f000 fa1e 	bl	800c18c <SDMMC_GetCmdResp1>
 800bd50:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bd52:	69fb      	ldr	r3, [r7, #28]
}
 800bd54:	4618      	mov	r0, r3
 800bd56:	3720      	adds	r7, #32
 800bd58:	46bd      	mov	sp, r7
 800bd5a:	bd80      	pop	{r7, pc}

0800bd5c <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800bd5c:	b580      	push	{r7, lr}
 800bd5e:	b088      	sub	sp, #32
 800bd60:	af00      	add	r7, sp, #0
 800bd62:	6078      	str	r0, [r7, #4]
 800bd64:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800bd66:	683b      	ldr	r3, [r7, #0]
 800bd68:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800bd6a:	2312      	movs	r3, #18
 800bd6c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800bd6e:	2340      	movs	r3, #64	; 0x40
 800bd70:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800bd72:	2300      	movs	r3, #0
 800bd74:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800bd76:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bd7a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800bd7c:	f107 0308 	add.w	r3, r7, #8
 800bd80:	4619      	mov	r1, r3
 800bd82:	6878      	ldr	r0, [r7, #4]
 800bd84:	f7ff ff30 	bl	800bbe8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800bd88:	f241 3288 	movw	r2, #5000	; 0x1388
 800bd8c:	2112      	movs	r1, #18
 800bd8e:	6878      	ldr	r0, [r7, #4]
 800bd90:	f000 f9fc 	bl	800c18c <SDMMC_GetCmdResp1>
 800bd94:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bd96:	69fb      	ldr	r3, [r7, #28]
}
 800bd98:	4618      	mov	r0, r3
 800bd9a:	3720      	adds	r7, #32
 800bd9c:	46bd      	mov	sp, r7
 800bd9e:	bd80      	pop	{r7, pc}

0800bda0 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800bda0:	b580      	push	{r7, lr}
 800bda2:	b088      	sub	sp, #32
 800bda4:	af00      	add	r7, sp, #0
 800bda6:	6078      	str	r0, [r7, #4]
 800bda8:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800bdaa:	683b      	ldr	r3, [r7, #0]
 800bdac:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800bdae:	2318      	movs	r3, #24
 800bdb0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800bdb2:	2340      	movs	r3, #64	; 0x40
 800bdb4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800bdb6:	2300      	movs	r3, #0
 800bdb8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800bdba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bdbe:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800bdc0:	f107 0308 	add.w	r3, r7, #8
 800bdc4:	4619      	mov	r1, r3
 800bdc6:	6878      	ldr	r0, [r7, #4]
 800bdc8:	f7ff ff0e 	bl	800bbe8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800bdcc:	f241 3288 	movw	r2, #5000	; 0x1388
 800bdd0:	2118      	movs	r1, #24
 800bdd2:	6878      	ldr	r0, [r7, #4]
 800bdd4:	f000 f9da 	bl	800c18c <SDMMC_GetCmdResp1>
 800bdd8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bdda:	69fb      	ldr	r3, [r7, #28]
}
 800bddc:	4618      	mov	r0, r3
 800bdde:	3720      	adds	r7, #32
 800bde0:	46bd      	mov	sp, r7
 800bde2:	bd80      	pop	{r7, pc}

0800bde4 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800bde4:	b580      	push	{r7, lr}
 800bde6:	b088      	sub	sp, #32
 800bde8:	af00      	add	r7, sp, #0
 800bdea:	6078      	str	r0, [r7, #4]
 800bdec:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800bdee:	683b      	ldr	r3, [r7, #0]
 800bdf0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800bdf2:	2319      	movs	r3, #25
 800bdf4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800bdf6:	2340      	movs	r3, #64	; 0x40
 800bdf8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800bdfa:	2300      	movs	r3, #0
 800bdfc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800bdfe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800be02:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800be04:	f107 0308 	add.w	r3, r7, #8
 800be08:	4619      	mov	r1, r3
 800be0a:	6878      	ldr	r0, [r7, #4]
 800be0c:	f7ff feec 	bl	800bbe8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800be10:	f241 3288 	movw	r2, #5000	; 0x1388
 800be14:	2119      	movs	r1, #25
 800be16:	6878      	ldr	r0, [r7, #4]
 800be18:	f000 f9b8 	bl	800c18c <SDMMC_GetCmdResp1>
 800be1c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800be1e:	69fb      	ldr	r3, [r7, #28]
}
 800be20:	4618      	mov	r0, r3
 800be22:	3720      	adds	r7, #32
 800be24:	46bd      	mov	sp, r7
 800be26:	bd80      	pop	{r7, pc}

0800be28 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 800be28:	b580      	push	{r7, lr}
 800be2a:	b088      	sub	sp, #32
 800be2c:	af00      	add	r7, sp, #0
 800be2e:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800be30:	2300      	movs	r3, #0
 800be32:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800be34:	230c      	movs	r3, #12
 800be36:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800be38:	2340      	movs	r3, #64	; 0x40
 800be3a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800be3c:	2300      	movs	r3, #0
 800be3e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800be40:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800be44:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800be46:	f107 0308 	add.w	r3, r7, #8
 800be4a:	4619      	mov	r1, r3
 800be4c:	6878      	ldr	r0, [r7, #4]
 800be4e:	f7ff fecb 	bl	800bbe8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 800be52:	4a05      	ldr	r2, [pc, #20]	; (800be68 <SDMMC_CmdStopTransfer+0x40>)
 800be54:	210c      	movs	r1, #12
 800be56:	6878      	ldr	r0, [r7, #4]
 800be58:	f000 f998 	bl	800c18c <SDMMC_GetCmdResp1>
 800be5c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800be5e:	69fb      	ldr	r3, [r7, #28]
}
 800be60:	4618      	mov	r0, r3
 800be62:	3720      	adds	r7, #32
 800be64:	46bd      	mov	sp, r7
 800be66:	bd80      	pop	{r7, pc}
 800be68:	05f5e100 	.word	0x05f5e100

0800be6c <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 800be6c:	b580      	push	{r7, lr}
 800be6e:	b08a      	sub	sp, #40	; 0x28
 800be70:	af00      	add	r7, sp, #0
 800be72:	60f8      	str	r0, [r7, #12]
 800be74:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800be78:	683b      	ldr	r3, [r7, #0]
 800be7a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800be7c:	2307      	movs	r3, #7
 800be7e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800be80:	2340      	movs	r3, #64	; 0x40
 800be82:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800be84:	2300      	movs	r3, #0
 800be86:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800be88:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800be8c:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800be8e:	f107 0310 	add.w	r3, r7, #16
 800be92:	4619      	mov	r1, r3
 800be94:	68f8      	ldr	r0, [r7, #12]
 800be96:	f7ff fea7 	bl	800bbe8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 800be9a:	f241 3288 	movw	r2, #5000	; 0x1388
 800be9e:	2107      	movs	r1, #7
 800bea0:	68f8      	ldr	r0, [r7, #12]
 800bea2:	f000 f973 	bl	800c18c <SDMMC_GetCmdResp1>
 800bea6:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 800bea8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800beaa:	4618      	mov	r0, r3
 800beac:	3728      	adds	r7, #40	; 0x28
 800beae:	46bd      	mov	sp, r7
 800beb0:	bd80      	pop	{r7, pc}

0800beb2 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 800beb2:	b580      	push	{r7, lr}
 800beb4:	b088      	sub	sp, #32
 800beb6:	af00      	add	r7, sp, #0
 800beb8:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800beba:	2300      	movs	r3, #0
 800bebc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800bebe:	2300      	movs	r3, #0
 800bec0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 800bec2:	2300      	movs	r3, #0
 800bec4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800bec6:	2300      	movs	r3, #0
 800bec8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800beca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bece:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800bed0:	f107 0308 	add.w	r3, r7, #8
 800bed4:	4619      	mov	r1, r3
 800bed6:	6878      	ldr	r0, [r7, #4]
 800bed8:	f7ff fe86 	bl	800bbe8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 800bedc:	6878      	ldr	r0, [r7, #4]
 800bede:	f000 f92d 	bl	800c13c <SDMMC_GetCmdError>
 800bee2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bee4:	69fb      	ldr	r3, [r7, #28]
}
 800bee6:	4618      	mov	r0, r3
 800bee8:	3720      	adds	r7, #32
 800beea:	46bd      	mov	sp, r7
 800beec:	bd80      	pop	{r7, pc}

0800beee <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 800beee:	b580      	push	{r7, lr}
 800bef0:	b088      	sub	sp, #32
 800bef2:	af00      	add	r7, sp, #0
 800bef4:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800bef6:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800befa:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800befc:	2308      	movs	r3, #8
 800befe:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800bf00:	2340      	movs	r3, #64	; 0x40
 800bf02:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800bf04:	2300      	movs	r3, #0
 800bf06:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800bf08:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bf0c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800bf0e:	f107 0308 	add.w	r3, r7, #8
 800bf12:	4619      	mov	r1, r3
 800bf14:	6878      	ldr	r0, [r7, #4]
 800bf16:	f7ff fe67 	bl	800bbe8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 800bf1a:	6878      	ldr	r0, [r7, #4]
 800bf1c:	f000 fb16 	bl	800c54c <SDMMC_GetCmdResp7>
 800bf20:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bf22:	69fb      	ldr	r3, [r7, #28]
}
 800bf24:	4618      	mov	r0, r3
 800bf26:	3720      	adds	r7, #32
 800bf28:	46bd      	mov	sp, r7
 800bf2a:	bd80      	pop	{r7, pc}

0800bf2c <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800bf2c:	b580      	push	{r7, lr}
 800bf2e:	b088      	sub	sp, #32
 800bf30:	af00      	add	r7, sp, #0
 800bf32:	6078      	str	r0, [r7, #4]
 800bf34:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800bf36:	683b      	ldr	r3, [r7, #0]
 800bf38:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800bf3a:	2337      	movs	r3, #55	; 0x37
 800bf3c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800bf3e:	2340      	movs	r3, #64	; 0x40
 800bf40:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800bf42:	2300      	movs	r3, #0
 800bf44:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800bf46:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bf4a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800bf4c:	f107 0308 	add.w	r3, r7, #8
 800bf50:	4619      	mov	r1, r3
 800bf52:	6878      	ldr	r0, [r7, #4]
 800bf54:	f7ff fe48 	bl	800bbe8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 800bf58:	f241 3288 	movw	r2, #5000	; 0x1388
 800bf5c:	2137      	movs	r1, #55	; 0x37
 800bf5e:	6878      	ldr	r0, [r7, #4]
 800bf60:	f000 f914 	bl	800c18c <SDMMC_GetCmdResp1>
 800bf64:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bf66:	69fb      	ldr	r3, [r7, #28]
}
 800bf68:	4618      	mov	r0, r3
 800bf6a:	3720      	adds	r7, #32
 800bf6c:	46bd      	mov	sp, r7
 800bf6e:	bd80      	pop	{r7, pc}

0800bf70 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800bf70:	b580      	push	{r7, lr}
 800bf72:	b088      	sub	sp, #32
 800bf74:	af00      	add	r7, sp, #0
 800bf76:	6078      	str	r0, [r7, #4]
 800bf78:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800bf7a:	683b      	ldr	r3, [r7, #0]
 800bf7c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800bf80:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800bf84:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800bf86:	2329      	movs	r3, #41	; 0x29
 800bf88:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800bf8a:	2340      	movs	r3, #64	; 0x40
 800bf8c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800bf8e:	2300      	movs	r3, #0
 800bf90:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800bf92:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bf96:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800bf98:	f107 0308 	add.w	r3, r7, #8
 800bf9c:	4619      	mov	r1, r3
 800bf9e:	6878      	ldr	r0, [r7, #4]
 800bfa0:	f7ff fe22 	bl	800bbe8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 800bfa4:	6878      	ldr	r0, [r7, #4]
 800bfa6:	f000 fa23 	bl	800c3f0 <SDMMC_GetCmdResp3>
 800bfaa:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bfac:	69fb      	ldr	r3, [r7, #28]
}
 800bfae:	4618      	mov	r0, r3
 800bfb0:	3720      	adds	r7, #32
 800bfb2:	46bd      	mov	sp, r7
 800bfb4:	bd80      	pop	{r7, pc}

0800bfb6 <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 800bfb6:	b580      	push	{r7, lr}
 800bfb8:	b088      	sub	sp, #32
 800bfba:	af00      	add	r7, sp, #0
 800bfbc:	6078      	str	r0, [r7, #4]
 800bfbe:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800bfc0:	683b      	ldr	r3, [r7, #0]
 800bfc2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800bfc4:	2306      	movs	r3, #6
 800bfc6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800bfc8:	2340      	movs	r3, #64	; 0x40
 800bfca:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800bfcc:	2300      	movs	r3, #0
 800bfce:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800bfd0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bfd4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800bfd6:	f107 0308 	add.w	r3, r7, #8
 800bfda:	4619      	mov	r1, r3
 800bfdc:	6878      	ldr	r0, [r7, #4]
 800bfde:	f7ff fe03 	bl	800bbe8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 800bfe2:	f241 3288 	movw	r2, #5000	; 0x1388
 800bfe6:	2106      	movs	r1, #6
 800bfe8:	6878      	ldr	r0, [r7, #4]
 800bfea:	f000 f8cf 	bl	800c18c <SDMMC_GetCmdResp1>
 800bfee:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bff0:	69fb      	ldr	r3, [r7, #28]
}
 800bff2:	4618      	mov	r0, r3
 800bff4:	3720      	adds	r7, #32
 800bff6:	46bd      	mov	sp, r7
 800bff8:	bd80      	pop	{r7, pc}

0800bffa <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 800bffa:	b580      	push	{r7, lr}
 800bffc:	b088      	sub	sp, #32
 800bffe:	af00      	add	r7, sp, #0
 800c000:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800c002:	2300      	movs	r3, #0
 800c004:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800c006:	2333      	movs	r3, #51	; 0x33
 800c008:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800c00a:	2340      	movs	r3, #64	; 0x40
 800c00c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800c00e:	2300      	movs	r3, #0
 800c010:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800c012:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c016:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800c018:	f107 0308 	add.w	r3, r7, #8
 800c01c:	4619      	mov	r1, r3
 800c01e:	6878      	ldr	r0, [r7, #4]
 800c020:	f7ff fde2 	bl	800bbe8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 800c024:	f241 3288 	movw	r2, #5000	; 0x1388
 800c028:	2133      	movs	r1, #51	; 0x33
 800c02a:	6878      	ldr	r0, [r7, #4]
 800c02c:	f000 f8ae 	bl	800c18c <SDMMC_GetCmdResp1>
 800c030:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c032:	69fb      	ldr	r3, [r7, #28]
}
 800c034:	4618      	mov	r0, r3
 800c036:	3720      	adds	r7, #32
 800c038:	46bd      	mov	sp, r7
 800c03a:	bd80      	pop	{r7, pc}

0800c03c <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 800c03c:	b580      	push	{r7, lr}
 800c03e:	b088      	sub	sp, #32
 800c040:	af00      	add	r7, sp, #0
 800c042:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800c044:	2300      	movs	r3, #0
 800c046:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800c048:	2302      	movs	r3, #2
 800c04a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800c04c:	23c0      	movs	r3, #192	; 0xc0
 800c04e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800c050:	2300      	movs	r3, #0
 800c052:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800c054:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c058:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800c05a:	f107 0308 	add.w	r3, r7, #8
 800c05e:	4619      	mov	r1, r3
 800c060:	6878      	ldr	r0, [r7, #4]
 800c062:	f7ff fdc1 	bl	800bbe8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800c066:	6878      	ldr	r0, [r7, #4]
 800c068:	f000 f97c 	bl	800c364 <SDMMC_GetCmdResp2>
 800c06c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c06e:	69fb      	ldr	r3, [r7, #28]
}
 800c070:	4618      	mov	r0, r3
 800c072:	3720      	adds	r7, #32
 800c074:	46bd      	mov	sp, r7
 800c076:	bd80      	pop	{r7, pc}

0800c078 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800c078:	b580      	push	{r7, lr}
 800c07a:	b088      	sub	sp, #32
 800c07c:	af00      	add	r7, sp, #0
 800c07e:	6078      	str	r0, [r7, #4]
 800c080:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800c082:	683b      	ldr	r3, [r7, #0]
 800c084:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800c086:	2309      	movs	r3, #9
 800c088:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800c08a:	23c0      	movs	r3, #192	; 0xc0
 800c08c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800c08e:	2300      	movs	r3, #0
 800c090:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800c092:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c096:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800c098:	f107 0308 	add.w	r3, r7, #8
 800c09c:	4619      	mov	r1, r3
 800c09e:	6878      	ldr	r0, [r7, #4]
 800c0a0:	f7ff fda2 	bl	800bbe8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800c0a4:	6878      	ldr	r0, [r7, #4]
 800c0a6:	f000 f95d 	bl	800c364 <SDMMC_GetCmdResp2>
 800c0aa:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c0ac:	69fb      	ldr	r3, [r7, #28]
}
 800c0ae:	4618      	mov	r0, r3
 800c0b0:	3720      	adds	r7, #32
 800c0b2:	46bd      	mov	sp, r7
 800c0b4:	bd80      	pop	{r7, pc}

0800c0b6 <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 800c0b6:	b580      	push	{r7, lr}
 800c0b8:	b088      	sub	sp, #32
 800c0ba:	af00      	add	r7, sp, #0
 800c0bc:	6078      	str	r0, [r7, #4]
 800c0be:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800c0c0:	2300      	movs	r3, #0
 800c0c2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800c0c4:	2303      	movs	r3, #3
 800c0c6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800c0c8:	2340      	movs	r3, #64	; 0x40
 800c0ca:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800c0cc:	2300      	movs	r3, #0
 800c0ce:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800c0d0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c0d4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800c0d6:	f107 0308 	add.w	r3, r7, #8
 800c0da:	4619      	mov	r1, r3
 800c0dc:	6878      	ldr	r0, [r7, #4]
 800c0de:	f7ff fd83 	bl	800bbe8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800c0e2:	683a      	ldr	r2, [r7, #0]
 800c0e4:	2103      	movs	r1, #3
 800c0e6:	6878      	ldr	r0, [r7, #4]
 800c0e8:	f000 f9bc 	bl	800c464 <SDMMC_GetCmdResp6>
 800c0ec:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c0ee:	69fb      	ldr	r3, [r7, #28]
}
 800c0f0:	4618      	mov	r0, r3
 800c0f2:	3720      	adds	r7, #32
 800c0f4:	46bd      	mov	sp, r7
 800c0f6:	bd80      	pop	{r7, pc}

0800c0f8 <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800c0f8:	b580      	push	{r7, lr}
 800c0fa:	b088      	sub	sp, #32
 800c0fc:	af00      	add	r7, sp, #0
 800c0fe:	6078      	str	r0, [r7, #4]
 800c100:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 800c102:	683b      	ldr	r3, [r7, #0]
 800c104:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800c106:	230d      	movs	r3, #13
 800c108:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800c10a:	2340      	movs	r3, #64	; 0x40
 800c10c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800c10e:	2300      	movs	r3, #0
 800c110:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800c112:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c116:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800c118:	f107 0308 	add.w	r3, r7, #8
 800c11c:	4619      	mov	r1, r3
 800c11e:	6878      	ldr	r0, [r7, #4]
 800c120:	f7ff fd62 	bl	800bbe8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 800c124:	f241 3288 	movw	r2, #5000	; 0x1388
 800c128:	210d      	movs	r1, #13
 800c12a:	6878      	ldr	r0, [r7, #4]
 800c12c:	f000 f82e 	bl	800c18c <SDMMC_GetCmdResp1>
 800c130:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c132:	69fb      	ldr	r3, [r7, #28]
}
 800c134:	4618      	mov	r0, r3
 800c136:	3720      	adds	r7, #32
 800c138:	46bd      	mov	sp, r7
 800c13a:	bd80      	pop	{r7, pc}

0800c13c <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 800c13c:	b490      	push	{r4, r7}
 800c13e:	b082      	sub	sp, #8
 800c140:	af00      	add	r7, sp, #0
 800c142:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800c144:	4b0f      	ldr	r3, [pc, #60]	; (800c184 <SDMMC_GetCmdError+0x48>)
 800c146:	681b      	ldr	r3, [r3, #0]
 800c148:	4a0f      	ldr	r2, [pc, #60]	; (800c188 <SDMMC_GetCmdError+0x4c>)
 800c14a:	fba2 2303 	umull	r2, r3, r2, r3
 800c14e:	0a5b      	lsrs	r3, r3, #9
 800c150:	f241 3288 	movw	r2, #5000	; 0x1388
 800c154:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800c158:	4623      	mov	r3, r4
 800c15a:	1e5c      	subs	r4, r3, #1
 800c15c:	2b00      	cmp	r3, #0
 800c15e:	d102      	bne.n	800c166 <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800c160:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800c164:	e009      	b.n	800c17a <SDMMC_GetCmdError+0x3e>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 800c166:	687b      	ldr	r3, [r7, #4]
 800c168:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c16a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c16e:	2b00      	cmp	r3, #0
 800c170:	d0f2      	beq.n	800c158 <SDMMC_GetCmdError+0x1c>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800c172:	687b      	ldr	r3, [r7, #4]
 800c174:	22c5      	movs	r2, #197	; 0xc5
 800c176:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 800c178:	2300      	movs	r3, #0
}
 800c17a:	4618      	mov	r0, r3
 800c17c:	3708      	adds	r7, #8
 800c17e:	46bd      	mov	sp, r7
 800c180:	bc90      	pop	{r4, r7}
 800c182:	4770      	bx	lr
 800c184:	20000004 	.word	0x20000004
 800c188:	10624dd3 	.word	0x10624dd3

0800c18c <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 800c18c:	b590      	push	{r4, r7, lr}
 800c18e:	b087      	sub	sp, #28
 800c190:	af00      	add	r7, sp, #0
 800c192:	60f8      	str	r0, [r7, #12]
 800c194:	460b      	mov	r3, r1
 800c196:	607a      	str	r2, [r7, #4]
 800c198:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800c19a:	4b6f      	ldr	r3, [pc, #444]	; (800c358 <SDMMC_GetCmdResp1+0x1cc>)
 800c19c:	681b      	ldr	r3, [r3, #0]
 800c19e:	4a6f      	ldr	r2, [pc, #444]	; (800c35c <SDMMC_GetCmdResp1+0x1d0>)
 800c1a0:	fba2 2303 	umull	r2, r3, r2, r3
 800c1a4:	0a5b      	lsrs	r3, r3, #9
 800c1a6:	687a      	ldr	r2, [r7, #4]
 800c1a8:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800c1ac:	4623      	mov	r3, r4
 800c1ae:	1e5c      	subs	r4, r3, #1
 800c1b0:	2b00      	cmp	r3, #0
 800c1b2:	d102      	bne.n	800c1ba <SDMMC_GetCmdResp1+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800c1b4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800c1b8:	e0c9      	b.n	800c34e <SDMMC_GetCmdResp1+0x1c2>
    }
    sta_reg = SDIOx->STA;
 800c1ba:	68fb      	ldr	r3, [r7, #12]
 800c1bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c1be:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800c1c0:	697b      	ldr	r3, [r7, #20]
 800c1c2:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800c1c6:	2b00      	cmp	r3, #0
 800c1c8:	d0f0      	beq.n	800c1ac <SDMMC_GetCmdResp1+0x20>
 800c1ca:	697b      	ldr	r3, [r7, #20]
 800c1cc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800c1d0:	2b00      	cmp	r3, #0
 800c1d2:	d1eb      	bne.n	800c1ac <SDMMC_GetCmdResp1+0x20>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800c1d4:	68fb      	ldr	r3, [r7, #12]
 800c1d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c1d8:	f003 0304 	and.w	r3, r3, #4
 800c1dc:	2b00      	cmp	r3, #0
 800c1de:	d004      	beq.n	800c1ea <SDMMC_GetCmdResp1+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800c1e0:	68fb      	ldr	r3, [r7, #12]
 800c1e2:	2204      	movs	r2, #4
 800c1e4:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c1e6:	2304      	movs	r3, #4
 800c1e8:	e0b1      	b.n	800c34e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800c1ea:	68fb      	ldr	r3, [r7, #12]
 800c1ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c1ee:	f003 0301 	and.w	r3, r3, #1
 800c1f2:	2b00      	cmp	r3, #0
 800c1f4:	d004      	beq.n	800c200 <SDMMC_GetCmdResp1+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800c1f6:	68fb      	ldr	r3, [r7, #12]
 800c1f8:	2201      	movs	r2, #1
 800c1fa:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c1fc:	2301      	movs	r3, #1
 800c1fe:	e0a6      	b.n	800c34e <SDMMC_GetCmdResp1+0x1c2>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800c200:	68fb      	ldr	r3, [r7, #12]
 800c202:	22c5      	movs	r2, #197	; 0xc5
 800c204:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800c206:	68f8      	ldr	r0, [r7, #12]
 800c208:	f7ff fd18 	bl	800bc3c <SDIO_GetCommandResponse>
 800c20c:	4603      	mov	r3, r0
 800c20e:	461a      	mov	r2, r3
 800c210:	7afb      	ldrb	r3, [r7, #11]
 800c212:	4293      	cmp	r3, r2
 800c214:	d001      	beq.n	800c21a <SDMMC_GetCmdResp1+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c216:	2301      	movs	r3, #1
 800c218:	e099      	b.n	800c34e <SDMMC_GetCmdResp1+0x1c2>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800c21a:	2100      	movs	r1, #0
 800c21c:	68f8      	ldr	r0, [r7, #12]
 800c21e:	f7ff fd1a 	bl	800bc56 <SDIO_GetResponse>
 800c222:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800c224:	693a      	ldr	r2, [r7, #16]
 800c226:	4b4e      	ldr	r3, [pc, #312]	; (800c360 <SDMMC_GetCmdResp1+0x1d4>)
 800c228:	4013      	ands	r3, r2
 800c22a:	2b00      	cmp	r3, #0
 800c22c:	d101      	bne.n	800c232 <SDMMC_GetCmdResp1+0xa6>
  {
    return SDMMC_ERROR_NONE;
 800c22e:	2300      	movs	r3, #0
 800c230:	e08d      	b.n	800c34e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800c232:	693b      	ldr	r3, [r7, #16]
 800c234:	2b00      	cmp	r3, #0
 800c236:	da02      	bge.n	800c23e <SDMMC_GetCmdResp1+0xb2>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800c238:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800c23c:	e087      	b.n	800c34e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800c23e:	693b      	ldr	r3, [r7, #16]
 800c240:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800c244:	2b00      	cmp	r3, #0
 800c246:	d001      	beq.n	800c24c <SDMMC_GetCmdResp1+0xc0>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800c248:	2340      	movs	r3, #64	; 0x40
 800c24a:	e080      	b.n	800c34e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800c24c:	693b      	ldr	r3, [r7, #16]
 800c24e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c252:	2b00      	cmp	r3, #0
 800c254:	d001      	beq.n	800c25a <SDMMC_GetCmdResp1+0xce>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800c256:	2380      	movs	r3, #128	; 0x80
 800c258:	e079      	b.n	800c34e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800c25a:	693b      	ldr	r3, [r7, #16]
 800c25c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c260:	2b00      	cmp	r3, #0
 800c262:	d002      	beq.n	800c26a <SDMMC_GetCmdResp1+0xde>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800c264:	f44f 7380 	mov.w	r3, #256	; 0x100
 800c268:	e071      	b.n	800c34e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800c26a:	693b      	ldr	r3, [r7, #16]
 800c26c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c270:	2b00      	cmp	r3, #0
 800c272:	d002      	beq.n	800c27a <SDMMC_GetCmdResp1+0xee>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800c274:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c278:	e069      	b.n	800c34e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800c27a:	693b      	ldr	r3, [r7, #16]
 800c27c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800c280:	2b00      	cmp	r3, #0
 800c282:	d002      	beq.n	800c28a <SDMMC_GetCmdResp1+0xfe>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800c284:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c288:	e061      	b.n	800c34e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800c28a:	693b      	ldr	r3, [r7, #16]
 800c28c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800c290:	2b00      	cmp	r3, #0
 800c292:	d002      	beq.n	800c29a <SDMMC_GetCmdResp1+0x10e>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800c294:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800c298:	e059      	b.n	800c34e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800c29a:	693b      	ldr	r3, [r7, #16]
 800c29c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c2a0:	2b00      	cmp	r3, #0
 800c2a2:	d002      	beq.n	800c2aa <SDMMC_GetCmdResp1+0x11e>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800c2a4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c2a8:	e051      	b.n	800c34e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800c2aa:	693b      	ldr	r3, [r7, #16]
 800c2ac:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c2b0:	2b00      	cmp	r3, #0
 800c2b2:	d002      	beq.n	800c2ba <SDMMC_GetCmdResp1+0x12e>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800c2b4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800c2b8:	e049      	b.n	800c34e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800c2ba:	693b      	ldr	r3, [r7, #16]
 800c2bc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800c2c0:	2b00      	cmp	r3, #0
 800c2c2:	d002      	beq.n	800c2ca <SDMMC_GetCmdResp1+0x13e>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800c2c4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800c2c8:	e041      	b.n	800c34e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800c2ca:	693b      	ldr	r3, [r7, #16]
 800c2cc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800c2d0:	2b00      	cmp	r3, #0
 800c2d2:	d002      	beq.n	800c2da <SDMMC_GetCmdResp1+0x14e>
  {
    return SDMMC_ERROR_CC_ERR;
 800c2d4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c2d8:	e039      	b.n	800c34e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800c2da:	693b      	ldr	r3, [r7, #16]
 800c2dc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800c2e0:	2b00      	cmp	r3, #0
 800c2e2:	d002      	beq.n	800c2ea <SDMMC_GetCmdResp1+0x15e>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800c2e4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800c2e8:	e031      	b.n	800c34e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800c2ea:	693b      	ldr	r3, [r7, #16]
 800c2ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c2f0:	2b00      	cmp	r3, #0
 800c2f2:	d002      	beq.n	800c2fa <SDMMC_GetCmdResp1+0x16e>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800c2f4:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800c2f8:	e029      	b.n	800c34e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800c2fa:	693b      	ldr	r3, [r7, #16]
 800c2fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800c300:	2b00      	cmp	r3, #0
 800c302:	d002      	beq.n	800c30a <SDMMC_GetCmdResp1+0x17e>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800c304:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800c308:	e021      	b.n	800c34e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800c30a:	693b      	ldr	r3, [r7, #16]
 800c30c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c310:	2b00      	cmp	r3, #0
 800c312:	d002      	beq.n	800c31a <SDMMC_GetCmdResp1+0x18e>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800c314:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800c318:	e019      	b.n	800c34e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800c31a:	693b      	ldr	r3, [r7, #16]
 800c31c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c320:	2b00      	cmp	r3, #0
 800c322:	d002      	beq.n	800c32a <SDMMC_GetCmdResp1+0x19e>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800c324:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800c328:	e011      	b.n	800c34e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800c32a:	693b      	ldr	r3, [r7, #16]
 800c32c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800c330:	2b00      	cmp	r3, #0
 800c332:	d002      	beq.n	800c33a <SDMMC_GetCmdResp1+0x1ae>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800c334:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800c338:	e009      	b.n	800c34e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800c33a:	693b      	ldr	r3, [r7, #16]
 800c33c:	f003 0308 	and.w	r3, r3, #8
 800c340:	2b00      	cmp	r3, #0
 800c342:	d002      	beq.n	800c34a <SDMMC_GetCmdResp1+0x1be>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800c344:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800c348:	e001      	b.n	800c34e <SDMMC_GetCmdResp1+0x1c2>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800c34a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800c34e:	4618      	mov	r0, r3
 800c350:	371c      	adds	r7, #28
 800c352:	46bd      	mov	sp, r7
 800c354:	bd90      	pop	{r4, r7, pc}
 800c356:	bf00      	nop
 800c358:	20000004 	.word	0x20000004
 800c35c:	10624dd3 	.word	0x10624dd3
 800c360:	fdffe008 	.word	0xfdffe008

0800c364 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 800c364:	b490      	push	{r4, r7}
 800c366:	b084      	sub	sp, #16
 800c368:	af00      	add	r7, sp, #0
 800c36a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800c36c:	4b1e      	ldr	r3, [pc, #120]	; (800c3e8 <SDMMC_GetCmdResp2+0x84>)
 800c36e:	681b      	ldr	r3, [r3, #0]
 800c370:	4a1e      	ldr	r2, [pc, #120]	; (800c3ec <SDMMC_GetCmdResp2+0x88>)
 800c372:	fba2 2303 	umull	r2, r3, r2, r3
 800c376:	0a5b      	lsrs	r3, r3, #9
 800c378:	f241 3288 	movw	r2, #5000	; 0x1388
 800c37c:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800c380:	4623      	mov	r3, r4
 800c382:	1e5c      	subs	r4, r3, #1
 800c384:	2b00      	cmp	r3, #0
 800c386:	d102      	bne.n	800c38e <SDMMC_GetCmdResp2+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800c388:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800c38c:	e026      	b.n	800c3dc <SDMMC_GetCmdResp2+0x78>
    }
    sta_reg = SDIOx->STA;
 800c38e:	687b      	ldr	r3, [r7, #4]
 800c390:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c392:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800c394:	68fb      	ldr	r3, [r7, #12]
 800c396:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800c39a:	2b00      	cmp	r3, #0
 800c39c:	d0f0      	beq.n	800c380 <SDMMC_GetCmdResp2+0x1c>
 800c39e:	68fb      	ldr	r3, [r7, #12]
 800c3a0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800c3a4:	2b00      	cmp	r3, #0
 800c3a6:	d1eb      	bne.n	800c380 <SDMMC_GetCmdResp2+0x1c>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800c3a8:	687b      	ldr	r3, [r7, #4]
 800c3aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c3ac:	f003 0304 	and.w	r3, r3, #4
 800c3b0:	2b00      	cmp	r3, #0
 800c3b2:	d004      	beq.n	800c3be <SDMMC_GetCmdResp2+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800c3b4:	687b      	ldr	r3, [r7, #4]
 800c3b6:	2204      	movs	r2, #4
 800c3b8:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c3ba:	2304      	movs	r3, #4
 800c3bc:	e00e      	b.n	800c3dc <SDMMC_GetCmdResp2+0x78>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800c3be:	687b      	ldr	r3, [r7, #4]
 800c3c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c3c2:	f003 0301 	and.w	r3, r3, #1
 800c3c6:	2b00      	cmp	r3, #0
 800c3c8:	d004      	beq.n	800c3d4 <SDMMC_GetCmdResp2+0x70>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800c3ca:	687b      	ldr	r3, [r7, #4]
 800c3cc:	2201      	movs	r2, #1
 800c3ce:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c3d0:	2301      	movs	r3, #1
 800c3d2:	e003      	b.n	800c3dc <SDMMC_GetCmdResp2+0x78>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800c3d4:	687b      	ldr	r3, [r7, #4]
 800c3d6:	22c5      	movs	r2, #197	; 0xc5
 800c3d8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800c3da:	2300      	movs	r3, #0
}
 800c3dc:	4618      	mov	r0, r3
 800c3de:	3710      	adds	r7, #16
 800c3e0:	46bd      	mov	sp, r7
 800c3e2:	bc90      	pop	{r4, r7}
 800c3e4:	4770      	bx	lr
 800c3e6:	bf00      	nop
 800c3e8:	20000004 	.word	0x20000004
 800c3ec:	10624dd3 	.word	0x10624dd3

0800c3f0 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 800c3f0:	b490      	push	{r4, r7}
 800c3f2:	b084      	sub	sp, #16
 800c3f4:	af00      	add	r7, sp, #0
 800c3f6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800c3f8:	4b18      	ldr	r3, [pc, #96]	; (800c45c <SDMMC_GetCmdResp3+0x6c>)
 800c3fa:	681b      	ldr	r3, [r3, #0]
 800c3fc:	4a18      	ldr	r2, [pc, #96]	; (800c460 <SDMMC_GetCmdResp3+0x70>)
 800c3fe:	fba2 2303 	umull	r2, r3, r2, r3
 800c402:	0a5b      	lsrs	r3, r3, #9
 800c404:	f241 3288 	movw	r2, #5000	; 0x1388
 800c408:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800c40c:	4623      	mov	r3, r4
 800c40e:	1e5c      	subs	r4, r3, #1
 800c410:	2b00      	cmp	r3, #0
 800c412:	d102      	bne.n	800c41a <SDMMC_GetCmdResp3+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800c414:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800c418:	e01b      	b.n	800c452 <SDMMC_GetCmdResp3+0x62>
    }
    sta_reg = SDIOx->STA;
 800c41a:	687b      	ldr	r3, [r7, #4]
 800c41c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c41e:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800c420:	68fb      	ldr	r3, [r7, #12]
 800c422:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800c426:	2b00      	cmp	r3, #0
 800c428:	d0f0      	beq.n	800c40c <SDMMC_GetCmdResp3+0x1c>
 800c42a:	68fb      	ldr	r3, [r7, #12]
 800c42c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800c430:	2b00      	cmp	r3, #0
 800c432:	d1eb      	bne.n	800c40c <SDMMC_GetCmdResp3+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800c434:	687b      	ldr	r3, [r7, #4]
 800c436:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c438:	f003 0304 	and.w	r3, r3, #4
 800c43c:	2b00      	cmp	r3, #0
 800c43e:	d004      	beq.n	800c44a <SDMMC_GetCmdResp3+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800c440:	687b      	ldr	r3, [r7, #4]
 800c442:	2204      	movs	r2, #4
 800c444:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c446:	2304      	movs	r3, #4
 800c448:	e003      	b.n	800c452 <SDMMC_GetCmdResp3+0x62>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800c44a:	687b      	ldr	r3, [r7, #4]
 800c44c:	22c5      	movs	r2, #197	; 0xc5
 800c44e:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800c450:	2300      	movs	r3, #0
}
 800c452:	4618      	mov	r0, r3
 800c454:	3710      	adds	r7, #16
 800c456:	46bd      	mov	sp, r7
 800c458:	bc90      	pop	{r4, r7}
 800c45a:	4770      	bx	lr
 800c45c:	20000004 	.word	0x20000004
 800c460:	10624dd3 	.word	0x10624dd3

0800c464 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800c464:	b590      	push	{r4, r7, lr}
 800c466:	b087      	sub	sp, #28
 800c468:	af00      	add	r7, sp, #0
 800c46a:	60f8      	str	r0, [r7, #12]
 800c46c:	460b      	mov	r3, r1
 800c46e:	607a      	str	r2, [r7, #4]
 800c470:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800c472:	4b34      	ldr	r3, [pc, #208]	; (800c544 <SDMMC_GetCmdResp6+0xe0>)
 800c474:	681b      	ldr	r3, [r3, #0]
 800c476:	4a34      	ldr	r2, [pc, #208]	; (800c548 <SDMMC_GetCmdResp6+0xe4>)
 800c478:	fba2 2303 	umull	r2, r3, r2, r3
 800c47c:	0a5b      	lsrs	r3, r3, #9
 800c47e:	f241 3288 	movw	r2, #5000	; 0x1388
 800c482:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800c486:	4623      	mov	r3, r4
 800c488:	1e5c      	subs	r4, r3, #1
 800c48a:	2b00      	cmp	r3, #0
 800c48c:	d102      	bne.n	800c494 <SDMMC_GetCmdResp6+0x30>
    {
      return SDMMC_ERROR_TIMEOUT;
 800c48e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800c492:	e052      	b.n	800c53a <SDMMC_GetCmdResp6+0xd6>
    }
    sta_reg = SDIOx->STA;
 800c494:	68fb      	ldr	r3, [r7, #12]
 800c496:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c498:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800c49a:	697b      	ldr	r3, [r7, #20]
 800c49c:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800c4a0:	2b00      	cmp	r3, #0
 800c4a2:	d0f0      	beq.n	800c486 <SDMMC_GetCmdResp6+0x22>
 800c4a4:	697b      	ldr	r3, [r7, #20]
 800c4a6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800c4aa:	2b00      	cmp	r3, #0
 800c4ac:	d1eb      	bne.n	800c486 <SDMMC_GetCmdResp6+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800c4ae:	68fb      	ldr	r3, [r7, #12]
 800c4b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c4b2:	f003 0304 	and.w	r3, r3, #4
 800c4b6:	2b00      	cmp	r3, #0
 800c4b8:	d004      	beq.n	800c4c4 <SDMMC_GetCmdResp6+0x60>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800c4ba:	68fb      	ldr	r3, [r7, #12]
 800c4bc:	2204      	movs	r2, #4
 800c4be:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c4c0:	2304      	movs	r3, #4
 800c4c2:	e03a      	b.n	800c53a <SDMMC_GetCmdResp6+0xd6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800c4c4:	68fb      	ldr	r3, [r7, #12]
 800c4c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c4c8:	f003 0301 	and.w	r3, r3, #1
 800c4cc:	2b00      	cmp	r3, #0
 800c4ce:	d004      	beq.n	800c4da <SDMMC_GetCmdResp6+0x76>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800c4d0:	68fb      	ldr	r3, [r7, #12]
 800c4d2:	2201      	movs	r2, #1
 800c4d4:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c4d6:	2301      	movs	r3, #1
 800c4d8:	e02f      	b.n	800c53a <SDMMC_GetCmdResp6+0xd6>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800c4da:	68f8      	ldr	r0, [r7, #12]
 800c4dc:	f7ff fbae 	bl	800bc3c <SDIO_GetCommandResponse>
 800c4e0:	4603      	mov	r3, r0
 800c4e2:	461a      	mov	r2, r3
 800c4e4:	7afb      	ldrb	r3, [r7, #11]
 800c4e6:	4293      	cmp	r3, r2
 800c4e8:	d001      	beq.n	800c4ee <SDMMC_GetCmdResp6+0x8a>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c4ea:	2301      	movs	r3, #1
 800c4ec:	e025      	b.n	800c53a <SDMMC_GetCmdResp6+0xd6>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800c4ee:	68fb      	ldr	r3, [r7, #12]
 800c4f0:	22c5      	movs	r2, #197	; 0xc5
 800c4f2:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800c4f4:	2100      	movs	r1, #0
 800c4f6:	68f8      	ldr	r0, [r7, #12]
 800c4f8:	f7ff fbad 	bl	800bc56 <SDIO_GetResponse>
 800c4fc:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800c4fe:	693b      	ldr	r3, [r7, #16]
 800c500:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800c504:	2b00      	cmp	r3, #0
 800c506:	d106      	bne.n	800c516 <SDMMC_GetCmdResp6+0xb2>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800c508:	693b      	ldr	r3, [r7, #16]
 800c50a:	0c1b      	lsrs	r3, r3, #16
 800c50c:	b29a      	uxth	r2, r3
 800c50e:	687b      	ldr	r3, [r7, #4]
 800c510:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800c512:	2300      	movs	r3, #0
 800c514:	e011      	b.n	800c53a <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800c516:	693b      	ldr	r3, [r7, #16]
 800c518:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c51c:	2b00      	cmp	r3, #0
 800c51e:	d002      	beq.n	800c526 <SDMMC_GetCmdResp6+0xc2>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800c520:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800c524:	e009      	b.n	800c53a <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800c526:	693b      	ldr	r3, [r7, #16]
 800c528:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c52c:	2b00      	cmp	r3, #0
 800c52e:	d002      	beq.n	800c536 <SDMMC_GetCmdResp6+0xd2>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800c530:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c534:	e001      	b.n	800c53a <SDMMC_GetCmdResp6+0xd6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800c536:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800c53a:	4618      	mov	r0, r3
 800c53c:	371c      	adds	r7, #28
 800c53e:	46bd      	mov	sp, r7
 800c540:	bd90      	pop	{r4, r7, pc}
 800c542:	bf00      	nop
 800c544:	20000004 	.word	0x20000004
 800c548:	10624dd3 	.word	0x10624dd3

0800c54c <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 800c54c:	b490      	push	{r4, r7}
 800c54e:	b084      	sub	sp, #16
 800c550:	af00      	add	r7, sp, #0
 800c552:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800c554:	4b21      	ldr	r3, [pc, #132]	; (800c5dc <SDMMC_GetCmdResp7+0x90>)
 800c556:	681b      	ldr	r3, [r3, #0]
 800c558:	4a21      	ldr	r2, [pc, #132]	; (800c5e0 <SDMMC_GetCmdResp7+0x94>)
 800c55a:	fba2 2303 	umull	r2, r3, r2, r3
 800c55e:	0a5b      	lsrs	r3, r3, #9
 800c560:	f241 3288 	movw	r2, #5000	; 0x1388
 800c564:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800c568:	4623      	mov	r3, r4
 800c56a:	1e5c      	subs	r4, r3, #1
 800c56c:	2b00      	cmp	r3, #0
 800c56e:	d102      	bne.n	800c576 <SDMMC_GetCmdResp7+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800c570:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800c574:	e02c      	b.n	800c5d0 <SDMMC_GetCmdResp7+0x84>
    }
    sta_reg = SDIOx->STA;
 800c576:	687b      	ldr	r3, [r7, #4]
 800c578:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c57a:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800c57c:	68fb      	ldr	r3, [r7, #12]
 800c57e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800c582:	2b00      	cmp	r3, #0
 800c584:	d0f0      	beq.n	800c568 <SDMMC_GetCmdResp7+0x1c>
 800c586:	68fb      	ldr	r3, [r7, #12]
 800c588:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800c58c:	2b00      	cmp	r3, #0
 800c58e:	d1eb      	bne.n	800c568 <SDMMC_GetCmdResp7+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800c590:	687b      	ldr	r3, [r7, #4]
 800c592:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c594:	f003 0304 	and.w	r3, r3, #4
 800c598:	2b00      	cmp	r3, #0
 800c59a:	d004      	beq.n	800c5a6 <SDMMC_GetCmdResp7+0x5a>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800c59c:	687b      	ldr	r3, [r7, #4]
 800c59e:	2204      	movs	r2, #4
 800c5a0:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c5a2:	2304      	movs	r3, #4
 800c5a4:	e014      	b.n	800c5d0 <SDMMC_GetCmdResp7+0x84>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800c5a6:	687b      	ldr	r3, [r7, #4]
 800c5a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c5aa:	f003 0301 	and.w	r3, r3, #1
 800c5ae:	2b00      	cmp	r3, #0
 800c5b0:	d004      	beq.n	800c5bc <SDMMC_GetCmdResp7+0x70>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800c5b2:	687b      	ldr	r3, [r7, #4]
 800c5b4:	2201      	movs	r2, #1
 800c5b6:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c5b8:	2301      	movs	r3, #1
 800c5ba:	e009      	b.n	800c5d0 <SDMMC_GetCmdResp7+0x84>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 800c5bc:	687b      	ldr	r3, [r7, #4]
 800c5be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c5c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c5c4:	2b00      	cmp	r3, #0
 800c5c6:	d002      	beq.n	800c5ce <SDMMC_GetCmdResp7+0x82>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 800c5c8:	687b      	ldr	r3, [r7, #4]
 800c5ca:	2240      	movs	r2, #64	; 0x40
 800c5cc:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800c5ce:	2300      	movs	r3, #0
  
}
 800c5d0:	4618      	mov	r0, r3
 800c5d2:	3710      	adds	r7, #16
 800c5d4:	46bd      	mov	sp, r7
 800c5d6:	bc90      	pop	{r4, r7}
 800c5d8:	4770      	bx	lr
 800c5da:	bf00      	nop
 800c5dc:	20000004 	.word	0x20000004
 800c5e0:	10624dd3 	.word	0x10624dd3

0800c5e4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800c5e4:	b084      	sub	sp, #16
 800c5e6:	b580      	push	{r7, lr}
 800c5e8:	b084      	sub	sp, #16
 800c5ea:	af00      	add	r7, sp, #0
 800c5ec:	6078      	str	r0, [r7, #4]
 800c5ee:	f107 001c 	add.w	r0, r7, #28
 800c5f2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800c5f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c5f8:	2b01      	cmp	r3, #1
 800c5fa:	d122      	bne.n	800c642 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800c5fc:	687b      	ldr	r3, [r7, #4]
 800c5fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c600:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800c604:	687b      	ldr	r3, [r7, #4]
 800c606:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800c608:	687b      	ldr	r3, [r7, #4]
 800c60a:	68db      	ldr	r3, [r3, #12]
 800c60c:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800c610:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c614:	687a      	ldr	r2, [r7, #4]
 800c616:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800c618:	687b      	ldr	r3, [r7, #4]
 800c61a:	68db      	ldr	r3, [r3, #12]
 800c61c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800c620:	687b      	ldr	r3, [r7, #4]
 800c622:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800c624:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c626:	2b01      	cmp	r3, #1
 800c628:	d105      	bne.n	800c636 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800c62a:	687b      	ldr	r3, [r7, #4]
 800c62c:	68db      	ldr	r3, [r3, #12]
 800c62e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800c632:	687b      	ldr	r3, [r7, #4]
 800c634:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 800c636:	6878      	ldr	r0, [r7, #4]
 800c638:	f001 fa7c 	bl	800db34 <USB_CoreReset>
 800c63c:	4603      	mov	r3, r0
 800c63e:	73fb      	strb	r3, [r7, #15]
 800c640:	e01a      	b.n	800c678 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800c642:	687b      	ldr	r3, [r7, #4]
 800c644:	68db      	ldr	r3, [r3, #12]
 800c646:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800c64a:	687b      	ldr	r3, [r7, #4]
 800c64c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 800c64e:	6878      	ldr	r0, [r7, #4]
 800c650:	f001 fa70 	bl	800db34 <USB_CoreReset>
 800c654:	4603      	mov	r3, r0
 800c656:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800c658:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c65a:	2b00      	cmp	r3, #0
 800c65c:	d106      	bne.n	800c66c <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800c65e:	687b      	ldr	r3, [r7, #4]
 800c660:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c662:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800c666:	687b      	ldr	r3, [r7, #4]
 800c668:	639a      	str	r2, [r3, #56]	; 0x38
 800c66a:	e005      	b.n	800c678 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800c66c:	687b      	ldr	r3, [r7, #4]
 800c66e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c670:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800c674:	687b      	ldr	r3, [r7, #4]
 800c676:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800c678:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c67a:	2b01      	cmp	r3, #1
 800c67c:	d10b      	bne.n	800c696 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800c67e:	687b      	ldr	r3, [r7, #4]
 800c680:	689b      	ldr	r3, [r3, #8]
 800c682:	f043 0206 	orr.w	r2, r3, #6
 800c686:	687b      	ldr	r3, [r7, #4]
 800c688:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800c68a:	687b      	ldr	r3, [r7, #4]
 800c68c:	689b      	ldr	r3, [r3, #8]
 800c68e:	f043 0220 	orr.w	r2, r3, #32
 800c692:	687b      	ldr	r3, [r7, #4]
 800c694:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800c696:	7bfb      	ldrb	r3, [r7, #15]
}
 800c698:	4618      	mov	r0, r3
 800c69a:	3710      	adds	r7, #16
 800c69c:	46bd      	mov	sp, r7
 800c69e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800c6a2:	b004      	add	sp, #16
 800c6a4:	4770      	bx	lr
	...

0800c6a8 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800c6a8:	b480      	push	{r7}
 800c6aa:	b087      	sub	sp, #28
 800c6ac:	af00      	add	r7, sp, #0
 800c6ae:	60f8      	str	r0, [r7, #12]
 800c6b0:	60b9      	str	r1, [r7, #8]
 800c6b2:	4613      	mov	r3, r2
 800c6b4:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800c6b6:	79fb      	ldrb	r3, [r7, #7]
 800c6b8:	2b02      	cmp	r3, #2
 800c6ba:	d165      	bne.n	800c788 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800c6bc:	68bb      	ldr	r3, [r7, #8]
 800c6be:	4a41      	ldr	r2, [pc, #260]	; (800c7c4 <USB_SetTurnaroundTime+0x11c>)
 800c6c0:	4293      	cmp	r3, r2
 800c6c2:	d906      	bls.n	800c6d2 <USB_SetTurnaroundTime+0x2a>
 800c6c4:	68bb      	ldr	r3, [r7, #8]
 800c6c6:	4a40      	ldr	r2, [pc, #256]	; (800c7c8 <USB_SetTurnaroundTime+0x120>)
 800c6c8:	4293      	cmp	r3, r2
 800c6ca:	d802      	bhi.n	800c6d2 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800c6cc:	230f      	movs	r3, #15
 800c6ce:	617b      	str	r3, [r7, #20]
 800c6d0:	e062      	b.n	800c798 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800c6d2:	68bb      	ldr	r3, [r7, #8]
 800c6d4:	4a3c      	ldr	r2, [pc, #240]	; (800c7c8 <USB_SetTurnaroundTime+0x120>)
 800c6d6:	4293      	cmp	r3, r2
 800c6d8:	d906      	bls.n	800c6e8 <USB_SetTurnaroundTime+0x40>
 800c6da:	68bb      	ldr	r3, [r7, #8]
 800c6dc:	4a3b      	ldr	r2, [pc, #236]	; (800c7cc <USB_SetTurnaroundTime+0x124>)
 800c6de:	4293      	cmp	r3, r2
 800c6e0:	d802      	bhi.n	800c6e8 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800c6e2:	230e      	movs	r3, #14
 800c6e4:	617b      	str	r3, [r7, #20]
 800c6e6:	e057      	b.n	800c798 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800c6e8:	68bb      	ldr	r3, [r7, #8]
 800c6ea:	4a38      	ldr	r2, [pc, #224]	; (800c7cc <USB_SetTurnaroundTime+0x124>)
 800c6ec:	4293      	cmp	r3, r2
 800c6ee:	d906      	bls.n	800c6fe <USB_SetTurnaroundTime+0x56>
 800c6f0:	68bb      	ldr	r3, [r7, #8]
 800c6f2:	4a37      	ldr	r2, [pc, #220]	; (800c7d0 <USB_SetTurnaroundTime+0x128>)
 800c6f4:	4293      	cmp	r3, r2
 800c6f6:	d802      	bhi.n	800c6fe <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800c6f8:	230d      	movs	r3, #13
 800c6fa:	617b      	str	r3, [r7, #20]
 800c6fc:	e04c      	b.n	800c798 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800c6fe:	68bb      	ldr	r3, [r7, #8]
 800c700:	4a33      	ldr	r2, [pc, #204]	; (800c7d0 <USB_SetTurnaroundTime+0x128>)
 800c702:	4293      	cmp	r3, r2
 800c704:	d906      	bls.n	800c714 <USB_SetTurnaroundTime+0x6c>
 800c706:	68bb      	ldr	r3, [r7, #8]
 800c708:	4a32      	ldr	r2, [pc, #200]	; (800c7d4 <USB_SetTurnaroundTime+0x12c>)
 800c70a:	4293      	cmp	r3, r2
 800c70c:	d802      	bhi.n	800c714 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800c70e:	230c      	movs	r3, #12
 800c710:	617b      	str	r3, [r7, #20]
 800c712:	e041      	b.n	800c798 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800c714:	68bb      	ldr	r3, [r7, #8]
 800c716:	4a2f      	ldr	r2, [pc, #188]	; (800c7d4 <USB_SetTurnaroundTime+0x12c>)
 800c718:	4293      	cmp	r3, r2
 800c71a:	d906      	bls.n	800c72a <USB_SetTurnaroundTime+0x82>
 800c71c:	68bb      	ldr	r3, [r7, #8]
 800c71e:	4a2e      	ldr	r2, [pc, #184]	; (800c7d8 <USB_SetTurnaroundTime+0x130>)
 800c720:	4293      	cmp	r3, r2
 800c722:	d802      	bhi.n	800c72a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800c724:	230b      	movs	r3, #11
 800c726:	617b      	str	r3, [r7, #20]
 800c728:	e036      	b.n	800c798 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800c72a:	68bb      	ldr	r3, [r7, #8]
 800c72c:	4a2a      	ldr	r2, [pc, #168]	; (800c7d8 <USB_SetTurnaroundTime+0x130>)
 800c72e:	4293      	cmp	r3, r2
 800c730:	d906      	bls.n	800c740 <USB_SetTurnaroundTime+0x98>
 800c732:	68bb      	ldr	r3, [r7, #8]
 800c734:	4a29      	ldr	r2, [pc, #164]	; (800c7dc <USB_SetTurnaroundTime+0x134>)
 800c736:	4293      	cmp	r3, r2
 800c738:	d802      	bhi.n	800c740 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800c73a:	230a      	movs	r3, #10
 800c73c:	617b      	str	r3, [r7, #20]
 800c73e:	e02b      	b.n	800c798 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800c740:	68bb      	ldr	r3, [r7, #8]
 800c742:	4a26      	ldr	r2, [pc, #152]	; (800c7dc <USB_SetTurnaroundTime+0x134>)
 800c744:	4293      	cmp	r3, r2
 800c746:	d906      	bls.n	800c756 <USB_SetTurnaroundTime+0xae>
 800c748:	68bb      	ldr	r3, [r7, #8]
 800c74a:	4a25      	ldr	r2, [pc, #148]	; (800c7e0 <USB_SetTurnaroundTime+0x138>)
 800c74c:	4293      	cmp	r3, r2
 800c74e:	d802      	bhi.n	800c756 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800c750:	2309      	movs	r3, #9
 800c752:	617b      	str	r3, [r7, #20]
 800c754:	e020      	b.n	800c798 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800c756:	68bb      	ldr	r3, [r7, #8]
 800c758:	4a21      	ldr	r2, [pc, #132]	; (800c7e0 <USB_SetTurnaroundTime+0x138>)
 800c75a:	4293      	cmp	r3, r2
 800c75c:	d906      	bls.n	800c76c <USB_SetTurnaroundTime+0xc4>
 800c75e:	68bb      	ldr	r3, [r7, #8]
 800c760:	4a20      	ldr	r2, [pc, #128]	; (800c7e4 <USB_SetTurnaroundTime+0x13c>)
 800c762:	4293      	cmp	r3, r2
 800c764:	d802      	bhi.n	800c76c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800c766:	2308      	movs	r3, #8
 800c768:	617b      	str	r3, [r7, #20]
 800c76a:	e015      	b.n	800c798 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800c76c:	68bb      	ldr	r3, [r7, #8]
 800c76e:	4a1d      	ldr	r2, [pc, #116]	; (800c7e4 <USB_SetTurnaroundTime+0x13c>)
 800c770:	4293      	cmp	r3, r2
 800c772:	d906      	bls.n	800c782 <USB_SetTurnaroundTime+0xda>
 800c774:	68bb      	ldr	r3, [r7, #8]
 800c776:	4a1c      	ldr	r2, [pc, #112]	; (800c7e8 <USB_SetTurnaroundTime+0x140>)
 800c778:	4293      	cmp	r3, r2
 800c77a:	d802      	bhi.n	800c782 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800c77c:	2307      	movs	r3, #7
 800c77e:	617b      	str	r3, [r7, #20]
 800c780:	e00a      	b.n	800c798 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800c782:	2306      	movs	r3, #6
 800c784:	617b      	str	r3, [r7, #20]
 800c786:	e007      	b.n	800c798 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800c788:	79fb      	ldrb	r3, [r7, #7]
 800c78a:	2b00      	cmp	r3, #0
 800c78c:	d102      	bne.n	800c794 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800c78e:	2309      	movs	r3, #9
 800c790:	617b      	str	r3, [r7, #20]
 800c792:	e001      	b.n	800c798 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800c794:	2309      	movs	r3, #9
 800c796:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800c798:	68fb      	ldr	r3, [r7, #12]
 800c79a:	68db      	ldr	r3, [r3, #12]
 800c79c:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800c7a0:	68fb      	ldr	r3, [r7, #12]
 800c7a2:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800c7a4:	68fb      	ldr	r3, [r7, #12]
 800c7a6:	68da      	ldr	r2, [r3, #12]
 800c7a8:	697b      	ldr	r3, [r7, #20]
 800c7aa:	029b      	lsls	r3, r3, #10
 800c7ac:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800c7b0:	431a      	orrs	r2, r3
 800c7b2:	68fb      	ldr	r3, [r7, #12]
 800c7b4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800c7b6:	2300      	movs	r3, #0
}
 800c7b8:	4618      	mov	r0, r3
 800c7ba:	371c      	adds	r7, #28
 800c7bc:	46bd      	mov	sp, r7
 800c7be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7c2:	4770      	bx	lr
 800c7c4:	00d8acbf 	.word	0x00d8acbf
 800c7c8:	00e4e1bf 	.word	0x00e4e1bf
 800c7cc:	00f423ff 	.word	0x00f423ff
 800c7d0:	0106737f 	.word	0x0106737f
 800c7d4:	011a499f 	.word	0x011a499f
 800c7d8:	01312cff 	.word	0x01312cff
 800c7dc:	014ca43f 	.word	0x014ca43f
 800c7e0:	016e35ff 	.word	0x016e35ff
 800c7e4:	01a6ab1f 	.word	0x01a6ab1f
 800c7e8:	01e847ff 	.word	0x01e847ff

0800c7ec <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800c7ec:	b480      	push	{r7}
 800c7ee:	b083      	sub	sp, #12
 800c7f0:	af00      	add	r7, sp, #0
 800c7f2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800c7f4:	687b      	ldr	r3, [r7, #4]
 800c7f6:	689b      	ldr	r3, [r3, #8]
 800c7f8:	f043 0201 	orr.w	r2, r3, #1
 800c7fc:	687b      	ldr	r3, [r7, #4]
 800c7fe:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800c800:	2300      	movs	r3, #0
}
 800c802:	4618      	mov	r0, r3
 800c804:	370c      	adds	r7, #12
 800c806:	46bd      	mov	sp, r7
 800c808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c80c:	4770      	bx	lr

0800c80e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800c80e:	b480      	push	{r7}
 800c810:	b083      	sub	sp, #12
 800c812:	af00      	add	r7, sp, #0
 800c814:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800c816:	687b      	ldr	r3, [r7, #4]
 800c818:	689b      	ldr	r3, [r3, #8]
 800c81a:	f023 0201 	bic.w	r2, r3, #1
 800c81e:	687b      	ldr	r3, [r7, #4]
 800c820:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800c822:	2300      	movs	r3, #0
}
 800c824:	4618      	mov	r0, r3
 800c826:	370c      	adds	r7, #12
 800c828:	46bd      	mov	sp, r7
 800c82a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c82e:	4770      	bx	lr

0800c830 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800c830:	b580      	push	{r7, lr}
 800c832:	b082      	sub	sp, #8
 800c834:	af00      	add	r7, sp, #0
 800c836:	6078      	str	r0, [r7, #4]
 800c838:	460b      	mov	r3, r1
 800c83a:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800c83c:	687b      	ldr	r3, [r7, #4]
 800c83e:	68db      	ldr	r3, [r3, #12]
 800c840:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800c844:	687b      	ldr	r3, [r7, #4]
 800c846:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800c848:	78fb      	ldrb	r3, [r7, #3]
 800c84a:	2b01      	cmp	r3, #1
 800c84c:	d106      	bne.n	800c85c <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800c84e:	687b      	ldr	r3, [r7, #4]
 800c850:	68db      	ldr	r3, [r3, #12]
 800c852:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800c856:	687b      	ldr	r3, [r7, #4]
 800c858:	60da      	str	r2, [r3, #12]
 800c85a:	e00b      	b.n	800c874 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 800c85c:	78fb      	ldrb	r3, [r7, #3]
 800c85e:	2b00      	cmp	r3, #0
 800c860:	d106      	bne.n	800c870 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800c862:	687b      	ldr	r3, [r7, #4]
 800c864:	68db      	ldr	r3, [r3, #12]
 800c866:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800c86a:	687b      	ldr	r3, [r7, #4]
 800c86c:	60da      	str	r2, [r3, #12]
 800c86e:	e001      	b.n	800c874 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800c870:	2301      	movs	r3, #1
 800c872:	e003      	b.n	800c87c <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800c874:	2032      	movs	r0, #50	; 0x32
 800c876:	f7f8 fcfb 	bl	8005270 <HAL_Delay>

  return HAL_OK;
 800c87a:	2300      	movs	r3, #0
}
 800c87c:	4618      	mov	r0, r3
 800c87e:	3708      	adds	r7, #8
 800c880:	46bd      	mov	sp, r7
 800c882:	bd80      	pop	{r7, pc}

0800c884 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800c884:	b084      	sub	sp, #16
 800c886:	b580      	push	{r7, lr}
 800c888:	b086      	sub	sp, #24
 800c88a:	af00      	add	r7, sp, #0
 800c88c:	6078      	str	r0, [r7, #4]
 800c88e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800c892:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800c896:	2300      	movs	r3, #0
 800c898:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c89a:	687b      	ldr	r3, [r7, #4]
 800c89c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800c89e:	2300      	movs	r3, #0
 800c8a0:	613b      	str	r3, [r7, #16]
 800c8a2:	e009      	b.n	800c8b8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800c8a4:	687a      	ldr	r2, [r7, #4]
 800c8a6:	693b      	ldr	r3, [r7, #16]
 800c8a8:	3340      	adds	r3, #64	; 0x40
 800c8aa:	009b      	lsls	r3, r3, #2
 800c8ac:	4413      	add	r3, r2
 800c8ae:	2200      	movs	r2, #0
 800c8b0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800c8b2:	693b      	ldr	r3, [r7, #16]
 800c8b4:	3301      	adds	r3, #1
 800c8b6:	613b      	str	r3, [r7, #16]
 800c8b8:	693b      	ldr	r3, [r7, #16]
 800c8ba:	2b0e      	cmp	r3, #14
 800c8bc:	d9f2      	bls.n	800c8a4 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800c8be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c8c0:	2b00      	cmp	r3, #0
 800c8c2:	d112      	bne.n	800c8ea <USB_DevInit+0x66>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800c8c4:	687b      	ldr	r3, [r7, #4]
 800c8c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c8c8:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800c8cc:	687b      	ldr	r3, [r7, #4]
 800c8ce:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800c8d0:	687b      	ldr	r3, [r7, #4]
 800c8d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c8d4:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800c8d8:	687b      	ldr	r3, [r7, #4]
 800c8da:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800c8dc:	687b      	ldr	r3, [r7, #4]
 800c8de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c8e0:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800c8e4:	687b      	ldr	r3, [r7, #4]
 800c8e6:	639a      	str	r2, [r3, #56]	; 0x38
 800c8e8:	e00b      	b.n	800c902 <USB_DevInit+0x7e>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GOTGCTL &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800c8ea:	687b      	ldr	r3, [r7, #4]
 800c8ec:	681b      	ldr	r3, [r3, #0]
 800c8ee:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800c8f2:	687b      	ldr	r3, [r7, #4]
 800c8f4:	601a      	str	r2, [r3, #0]
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800c8f6:	687b      	ldr	r3, [r7, #4]
 800c8f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c8fa:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800c8fe:	687b      	ldr	r3, [r7, #4]
 800c900:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800c902:	68fb      	ldr	r3, [r7, #12]
 800c904:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800c908:	461a      	mov	r2, r3
 800c90a:	2300      	movs	r3, #0
 800c90c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800c90e:	68fb      	ldr	r3, [r7, #12]
 800c910:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c914:	4619      	mov	r1, r3
 800c916:	68fb      	ldr	r3, [r7, #12]
 800c918:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c91c:	461a      	mov	r2, r3
 800c91e:	680b      	ldr	r3, [r1, #0]
 800c920:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800c922:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c924:	2b01      	cmp	r3, #1
 800c926:	d10c      	bne.n	800c942 <USB_DevInit+0xbe>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800c928:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c92a:	2b00      	cmp	r3, #0
 800c92c:	d104      	bne.n	800c938 <USB_DevInit+0xb4>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800c92e:	2100      	movs	r1, #0
 800c930:	6878      	ldr	r0, [r7, #4]
 800c932:	f000 f961 	bl	800cbf8 <USB_SetDevSpeed>
 800c936:	e008      	b.n	800c94a <USB_DevInit+0xc6>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800c938:	2101      	movs	r1, #1
 800c93a:	6878      	ldr	r0, [r7, #4]
 800c93c:	f000 f95c 	bl	800cbf8 <USB_SetDevSpeed>
 800c940:	e003      	b.n	800c94a <USB_DevInit+0xc6>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800c942:	2103      	movs	r1, #3
 800c944:	6878      	ldr	r0, [r7, #4]
 800c946:	f000 f957 	bl	800cbf8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800c94a:	2110      	movs	r1, #16
 800c94c:	6878      	ldr	r0, [r7, #4]
 800c94e:	f000 f90b 	bl	800cb68 <USB_FlushTxFifo>
 800c952:	4603      	mov	r3, r0
 800c954:	2b00      	cmp	r3, #0
 800c956:	d001      	beq.n	800c95c <USB_DevInit+0xd8>
  {
    ret = HAL_ERROR;
 800c958:	2301      	movs	r3, #1
 800c95a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800c95c:	6878      	ldr	r0, [r7, #4]
 800c95e:	f000 f929 	bl	800cbb4 <USB_FlushRxFifo>
 800c962:	4603      	mov	r3, r0
 800c964:	2b00      	cmp	r3, #0
 800c966:	d001      	beq.n	800c96c <USB_DevInit+0xe8>
  {
    ret = HAL_ERROR;
 800c968:	2301      	movs	r3, #1
 800c96a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800c96c:	68fb      	ldr	r3, [r7, #12]
 800c96e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c972:	461a      	mov	r2, r3
 800c974:	2300      	movs	r3, #0
 800c976:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800c978:	68fb      	ldr	r3, [r7, #12]
 800c97a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c97e:	461a      	mov	r2, r3
 800c980:	2300      	movs	r3, #0
 800c982:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800c984:	68fb      	ldr	r3, [r7, #12]
 800c986:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c98a:	461a      	mov	r2, r3
 800c98c:	2300      	movs	r3, #0
 800c98e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800c990:	2300      	movs	r3, #0
 800c992:	613b      	str	r3, [r7, #16]
 800c994:	e043      	b.n	800ca1e <USB_DevInit+0x19a>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800c996:	693b      	ldr	r3, [r7, #16]
 800c998:	015a      	lsls	r2, r3, #5
 800c99a:	68fb      	ldr	r3, [r7, #12]
 800c99c:	4413      	add	r3, r2
 800c99e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c9a2:	681b      	ldr	r3, [r3, #0]
 800c9a4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c9a8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c9ac:	d118      	bne.n	800c9e0 <USB_DevInit+0x15c>
    {
      if (i == 0U)
 800c9ae:	693b      	ldr	r3, [r7, #16]
 800c9b0:	2b00      	cmp	r3, #0
 800c9b2:	d10a      	bne.n	800c9ca <USB_DevInit+0x146>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800c9b4:	693b      	ldr	r3, [r7, #16]
 800c9b6:	015a      	lsls	r2, r3, #5
 800c9b8:	68fb      	ldr	r3, [r7, #12]
 800c9ba:	4413      	add	r3, r2
 800c9bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c9c0:	461a      	mov	r2, r3
 800c9c2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800c9c6:	6013      	str	r3, [r2, #0]
 800c9c8:	e013      	b.n	800c9f2 <USB_DevInit+0x16e>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800c9ca:	693b      	ldr	r3, [r7, #16]
 800c9cc:	015a      	lsls	r2, r3, #5
 800c9ce:	68fb      	ldr	r3, [r7, #12]
 800c9d0:	4413      	add	r3, r2
 800c9d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c9d6:	461a      	mov	r2, r3
 800c9d8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800c9dc:	6013      	str	r3, [r2, #0]
 800c9de:	e008      	b.n	800c9f2 <USB_DevInit+0x16e>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800c9e0:	693b      	ldr	r3, [r7, #16]
 800c9e2:	015a      	lsls	r2, r3, #5
 800c9e4:	68fb      	ldr	r3, [r7, #12]
 800c9e6:	4413      	add	r3, r2
 800c9e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c9ec:	461a      	mov	r2, r3
 800c9ee:	2300      	movs	r3, #0
 800c9f0:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800c9f2:	693b      	ldr	r3, [r7, #16]
 800c9f4:	015a      	lsls	r2, r3, #5
 800c9f6:	68fb      	ldr	r3, [r7, #12]
 800c9f8:	4413      	add	r3, r2
 800c9fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c9fe:	461a      	mov	r2, r3
 800ca00:	2300      	movs	r3, #0
 800ca02:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800ca04:	693b      	ldr	r3, [r7, #16]
 800ca06:	015a      	lsls	r2, r3, #5
 800ca08:	68fb      	ldr	r3, [r7, #12]
 800ca0a:	4413      	add	r3, r2
 800ca0c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ca10:	461a      	mov	r2, r3
 800ca12:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800ca16:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800ca18:	693b      	ldr	r3, [r7, #16]
 800ca1a:	3301      	adds	r3, #1
 800ca1c:	613b      	str	r3, [r7, #16]
 800ca1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca20:	693a      	ldr	r2, [r7, #16]
 800ca22:	429a      	cmp	r2, r3
 800ca24:	d3b7      	bcc.n	800c996 <USB_DevInit+0x112>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800ca26:	2300      	movs	r3, #0
 800ca28:	613b      	str	r3, [r7, #16]
 800ca2a:	e043      	b.n	800cab4 <USB_DevInit+0x230>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800ca2c:	693b      	ldr	r3, [r7, #16]
 800ca2e:	015a      	lsls	r2, r3, #5
 800ca30:	68fb      	ldr	r3, [r7, #12]
 800ca32:	4413      	add	r3, r2
 800ca34:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ca38:	681b      	ldr	r3, [r3, #0]
 800ca3a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800ca3e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ca42:	d118      	bne.n	800ca76 <USB_DevInit+0x1f2>
    {
      if (i == 0U)
 800ca44:	693b      	ldr	r3, [r7, #16]
 800ca46:	2b00      	cmp	r3, #0
 800ca48:	d10a      	bne.n	800ca60 <USB_DevInit+0x1dc>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800ca4a:	693b      	ldr	r3, [r7, #16]
 800ca4c:	015a      	lsls	r2, r3, #5
 800ca4e:	68fb      	ldr	r3, [r7, #12]
 800ca50:	4413      	add	r3, r2
 800ca52:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ca56:	461a      	mov	r2, r3
 800ca58:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800ca5c:	6013      	str	r3, [r2, #0]
 800ca5e:	e013      	b.n	800ca88 <USB_DevInit+0x204>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800ca60:	693b      	ldr	r3, [r7, #16]
 800ca62:	015a      	lsls	r2, r3, #5
 800ca64:	68fb      	ldr	r3, [r7, #12]
 800ca66:	4413      	add	r3, r2
 800ca68:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ca6c:	461a      	mov	r2, r3
 800ca6e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800ca72:	6013      	str	r3, [r2, #0]
 800ca74:	e008      	b.n	800ca88 <USB_DevInit+0x204>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800ca76:	693b      	ldr	r3, [r7, #16]
 800ca78:	015a      	lsls	r2, r3, #5
 800ca7a:	68fb      	ldr	r3, [r7, #12]
 800ca7c:	4413      	add	r3, r2
 800ca7e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ca82:	461a      	mov	r2, r3
 800ca84:	2300      	movs	r3, #0
 800ca86:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800ca88:	693b      	ldr	r3, [r7, #16]
 800ca8a:	015a      	lsls	r2, r3, #5
 800ca8c:	68fb      	ldr	r3, [r7, #12]
 800ca8e:	4413      	add	r3, r2
 800ca90:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ca94:	461a      	mov	r2, r3
 800ca96:	2300      	movs	r3, #0
 800ca98:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800ca9a:	693b      	ldr	r3, [r7, #16]
 800ca9c:	015a      	lsls	r2, r3, #5
 800ca9e:	68fb      	ldr	r3, [r7, #12]
 800caa0:	4413      	add	r3, r2
 800caa2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800caa6:	461a      	mov	r2, r3
 800caa8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800caac:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800caae:	693b      	ldr	r3, [r7, #16]
 800cab0:	3301      	adds	r3, #1
 800cab2:	613b      	str	r3, [r7, #16]
 800cab4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cab6:	693a      	ldr	r2, [r7, #16]
 800cab8:	429a      	cmp	r2, r3
 800caba:	d3b7      	bcc.n	800ca2c <USB_DevInit+0x1a8>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800cabc:	68fb      	ldr	r3, [r7, #12]
 800cabe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cac2:	691b      	ldr	r3, [r3, #16]
 800cac4:	68fa      	ldr	r2, [r7, #12]
 800cac6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800caca:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800cace:	6113      	str	r3, [r2, #16]

  if (cfg.dma_enable == 1U)
 800cad0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cad2:	2b01      	cmp	r3, #1
 800cad4:	d111      	bne.n	800cafa <USB_DevInit+0x276>
  {
    /*Set threshold parameters */
    USBx_DEVICE->DTHRCTL = USB_OTG_DTHRCTL_TXTHRLEN_6 |
 800cad6:	68fb      	ldr	r3, [r7, #12]
 800cad8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cadc:	461a      	mov	r2, r3
 800cade:	4b20      	ldr	r3, [pc, #128]	; (800cb60 <USB_DevInit+0x2dc>)
 800cae0:	6313      	str	r3, [r2, #48]	; 0x30
                           USB_OTG_DTHRCTL_RXTHRLEN_6;

    USBx_DEVICE->DTHRCTL |= USB_OTG_DTHRCTL_RXTHREN |
 800cae2:	68fb      	ldr	r3, [r7, #12]
 800cae4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cae8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800caea:	68fa      	ldr	r2, [r7, #12]
 800caec:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800caf0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800caf4:	f043 0303 	orr.w	r3, r3, #3
 800caf8:	6313      	str	r3, [r2, #48]	; 0x30
                            USB_OTG_DTHRCTL_ISOTHREN |
                            USB_OTG_DTHRCTL_NONISOTHREN;
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800cafa:	687b      	ldr	r3, [r7, #4]
 800cafc:	2200      	movs	r2, #0
 800cafe:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800cb00:	687b      	ldr	r3, [r7, #4]
 800cb02:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800cb06:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800cb08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb0a:	2b00      	cmp	r3, #0
 800cb0c:	d105      	bne.n	800cb1a <USB_DevInit+0x296>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800cb0e:	687b      	ldr	r3, [r7, #4]
 800cb10:	699b      	ldr	r3, [r3, #24]
 800cb12:	f043 0210 	orr.w	r2, r3, #16
 800cb16:	687b      	ldr	r3, [r7, #4]
 800cb18:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800cb1a:	687b      	ldr	r3, [r7, #4]
 800cb1c:	699a      	ldr	r2, [r3, #24]
 800cb1e:	4b11      	ldr	r3, [pc, #68]	; (800cb64 <USB_DevInit+0x2e0>)
 800cb20:	4313      	orrs	r3, r2
 800cb22:	687a      	ldr	r2, [r7, #4]
 800cb24:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800cb26:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cb28:	2b00      	cmp	r3, #0
 800cb2a:	d005      	beq.n	800cb38 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800cb2c:	687b      	ldr	r3, [r7, #4]
 800cb2e:	699b      	ldr	r3, [r3, #24]
 800cb30:	f043 0208 	orr.w	r2, r3, #8
 800cb34:	687b      	ldr	r3, [r7, #4]
 800cb36:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800cb38:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cb3a:	2b01      	cmp	r3, #1
 800cb3c:	d107      	bne.n	800cb4e <USB_DevInit+0x2ca>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800cb3e:	687b      	ldr	r3, [r7, #4]
 800cb40:	699b      	ldr	r3, [r3, #24]
 800cb42:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800cb46:	f043 0304 	orr.w	r3, r3, #4
 800cb4a:	687a      	ldr	r2, [r7, #4]
 800cb4c:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800cb4e:	7dfb      	ldrb	r3, [r7, #23]
}
 800cb50:	4618      	mov	r0, r3
 800cb52:	3718      	adds	r7, #24
 800cb54:	46bd      	mov	sp, r7
 800cb56:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800cb5a:	b004      	add	sp, #16
 800cb5c:	4770      	bx	lr
 800cb5e:	bf00      	nop
 800cb60:	00800100 	.word	0x00800100
 800cb64:	803c3800 	.word	0x803c3800

0800cb68 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800cb68:	b480      	push	{r7}
 800cb6a:	b085      	sub	sp, #20
 800cb6c:	af00      	add	r7, sp, #0
 800cb6e:	6078      	str	r0, [r7, #4]
 800cb70:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800cb72:	2300      	movs	r3, #0
 800cb74:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800cb76:	683b      	ldr	r3, [r7, #0]
 800cb78:	019b      	lsls	r3, r3, #6
 800cb7a:	f043 0220 	orr.w	r2, r3, #32
 800cb7e:	687b      	ldr	r3, [r7, #4]
 800cb80:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800cb82:	68fb      	ldr	r3, [r7, #12]
 800cb84:	3301      	adds	r3, #1
 800cb86:	60fb      	str	r3, [r7, #12]
 800cb88:	68fb      	ldr	r3, [r7, #12]
 800cb8a:	4a09      	ldr	r2, [pc, #36]	; (800cbb0 <USB_FlushTxFifo+0x48>)
 800cb8c:	4293      	cmp	r3, r2
 800cb8e:	d901      	bls.n	800cb94 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 800cb90:	2303      	movs	r3, #3
 800cb92:	e006      	b.n	800cba2 <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800cb94:	687b      	ldr	r3, [r7, #4]
 800cb96:	691b      	ldr	r3, [r3, #16]
 800cb98:	f003 0320 	and.w	r3, r3, #32
 800cb9c:	2b20      	cmp	r3, #32
 800cb9e:	d0f0      	beq.n	800cb82 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800cba0:	2300      	movs	r3, #0
}
 800cba2:	4618      	mov	r0, r3
 800cba4:	3714      	adds	r7, #20
 800cba6:	46bd      	mov	sp, r7
 800cba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbac:	4770      	bx	lr
 800cbae:	bf00      	nop
 800cbb0:	00030d40 	.word	0x00030d40

0800cbb4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800cbb4:	b480      	push	{r7}
 800cbb6:	b085      	sub	sp, #20
 800cbb8:	af00      	add	r7, sp, #0
 800cbba:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800cbbc:	2300      	movs	r3, #0
 800cbbe:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800cbc0:	687b      	ldr	r3, [r7, #4]
 800cbc2:	2210      	movs	r2, #16
 800cbc4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800cbc6:	68fb      	ldr	r3, [r7, #12]
 800cbc8:	3301      	adds	r3, #1
 800cbca:	60fb      	str	r3, [r7, #12]
 800cbcc:	68fb      	ldr	r3, [r7, #12]
 800cbce:	4a09      	ldr	r2, [pc, #36]	; (800cbf4 <USB_FlushRxFifo+0x40>)
 800cbd0:	4293      	cmp	r3, r2
 800cbd2:	d901      	bls.n	800cbd8 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800cbd4:	2303      	movs	r3, #3
 800cbd6:	e006      	b.n	800cbe6 <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800cbd8:	687b      	ldr	r3, [r7, #4]
 800cbda:	691b      	ldr	r3, [r3, #16]
 800cbdc:	f003 0310 	and.w	r3, r3, #16
 800cbe0:	2b10      	cmp	r3, #16
 800cbe2:	d0f0      	beq.n	800cbc6 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800cbe4:	2300      	movs	r3, #0
}
 800cbe6:	4618      	mov	r0, r3
 800cbe8:	3714      	adds	r7, #20
 800cbea:	46bd      	mov	sp, r7
 800cbec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbf0:	4770      	bx	lr
 800cbf2:	bf00      	nop
 800cbf4:	00030d40 	.word	0x00030d40

0800cbf8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800cbf8:	b480      	push	{r7}
 800cbfa:	b085      	sub	sp, #20
 800cbfc:	af00      	add	r7, sp, #0
 800cbfe:	6078      	str	r0, [r7, #4]
 800cc00:	460b      	mov	r3, r1
 800cc02:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cc04:	687b      	ldr	r3, [r7, #4]
 800cc06:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800cc08:	68fb      	ldr	r3, [r7, #12]
 800cc0a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cc0e:	681a      	ldr	r2, [r3, #0]
 800cc10:	78fb      	ldrb	r3, [r7, #3]
 800cc12:	68f9      	ldr	r1, [r7, #12]
 800cc14:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800cc18:	4313      	orrs	r3, r2
 800cc1a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800cc1c:	2300      	movs	r3, #0
}
 800cc1e:	4618      	mov	r0, r3
 800cc20:	3714      	adds	r7, #20
 800cc22:	46bd      	mov	sp, r7
 800cc24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc28:	4770      	bx	lr

0800cc2a <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_HIGH: High speed mode
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800cc2a:	b480      	push	{r7}
 800cc2c:	b087      	sub	sp, #28
 800cc2e:	af00      	add	r7, sp, #0
 800cc30:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cc32:	687b      	ldr	r3, [r7, #4]
 800cc34:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800cc36:	693b      	ldr	r3, [r7, #16]
 800cc38:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cc3c:	689b      	ldr	r3, [r3, #8]
 800cc3e:	f003 0306 	and.w	r3, r3, #6
 800cc42:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800cc44:	68fb      	ldr	r3, [r7, #12]
 800cc46:	2b00      	cmp	r3, #0
 800cc48:	d102      	bne.n	800cc50 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800cc4a:	2300      	movs	r3, #0
 800cc4c:	75fb      	strb	r3, [r7, #23]
 800cc4e:	e00a      	b.n	800cc66 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800cc50:	68fb      	ldr	r3, [r7, #12]
 800cc52:	2b02      	cmp	r3, #2
 800cc54:	d002      	beq.n	800cc5c <USB_GetDevSpeed+0x32>
 800cc56:	68fb      	ldr	r3, [r7, #12]
 800cc58:	2b06      	cmp	r3, #6
 800cc5a:	d102      	bne.n	800cc62 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800cc5c:	2302      	movs	r3, #2
 800cc5e:	75fb      	strb	r3, [r7, #23]
 800cc60:	e001      	b.n	800cc66 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800cc62:	230f      	movs	r3, #15
 800cc64:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800cc66:	7dfb      	ldrb	r3, [r7, #23]
}
 800cc68:	4618      	mov	r0, r3
 800cc6a:	371c      	adds	r7, #28
 800cc6c:	46bd      	mov	sp, r7
 800cc6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc72:	4770      	bx	lr

0800cc74 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800cc74:	b480      	push	{r7}
 800cc76:	b085      	sub	sp, #20
 800cc78:	af00      	add	r7, sp, #0
 800cc7a:	6078      	str	r0, [r7, #4]
 800cc7c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cc7e:	687b      	ldr	r3, [r7, #4]
 800cc80:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800cc82:	683b      	ldr	r3, [r7, #0]
 800cc84:	781b      	ldrb	r3, [r3, #0]
 800cc86:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800cc88:	683b      	ldr	r3, [r7, #0]
 800cc8a:	785b      	ldrb	r3, [r3, #1]
 800cc8c:	2b01      	cmp	r3, #1
 800cc8e:	d13a      	bne.n	800cd06 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800cc90:	68fb      	ldr	r3, [r7, #12]
 800cc92:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cc96:	69da      	ldr	r2, [r3, #28]
 800cc98:	683b      	ldr	r3, [r7, #0]
 800cc9a:	781b      	ldrb	r3, [r3, #0]
 800cc9c:	f003 030f 	and.w	r3, r3, #15
 800cca0:	2101      	movs	r1, #1
 800cca2:	fa01 f303 	lsl.w	r3, r1, r3
 800cca6:	b29b      	uxth	r3, r3
 800cca8:	68f9      	ldr	r1, [r7, #12]
 800ccaa:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ccae:	4313      	orrs	r3, r2
 800ccb0:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800ccb2:	68bb      	ldr	r3, [r7, #8]
 800ccb4:	015a      	lsls	r2, r3, #5
 800ccb6:	68fb      	ldr	r3, [r7, #12]
 800ccb8:	4413      	add	r3, r2
 800ccba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ccbe:	681b      	ldr	r3, [r3, #0]
 800ccc0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800ccc4:	2b00      	cmp	r3, #0
 800ccc6:	d155      	bne.n	800cd74 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800ccc8:	68bb      	ldr	r3, [r7, #8]
 800ccca:	015a      	lsls	r2, r3, #5
 800cccc:	68fb      	ldr	r3, [r7, #12]
 800ccce:	4413      	add	r3, r2
 800ccd0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ccd4:	681a      	ldr	r2, [r3, #0]
 800ccd6:	683b      	ldr	r3, [r7, #0]
 800ccd8:	689b      	ldr	r3, [r3, #8]
 800ccda:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800ccde:	683b      	ldr	r3, [r7, #0]
 800cce0:	78db      	ldrb	r3, [r3, #3]
 800cce2:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800cce4:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800cce6:	68bb      	ldr	r3, [r7, #8]
 800cce8:	059b      	lsls	r3, r3, #22
 800ccea:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800ccec:	4313      	orrs	r3, r2
 800ccee:	68ba      	ldr	r2, [r7, #8]
 800ccf0:	0151      	lsls	r1, r2, #5
 800ccf2:	68fa      	ldr	r2, [r7, #12]
 800ccf4:	440a      	add	r2, r1
 800ccf6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ccfa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ccfe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800cd02:	6013      	str	r3, [r2, #0]
 800cd04:	e036      	b.n	800cd74 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800cd06:	68fb      	ldr	r3, [r7, #12]
 800cd08:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cd0c:	69da      	ldr	r2, [r3, #28]
 800cd0e:	683b      	ldr	r3, [r7, #0]
 800cd10:	781b      	ldrb	r3, [r3, #0]
 800cd12:	f003 030f 	and.w	r3, r3, #15
 800cd16:	2101      	movs	r1, #1
 800cd18:	fa01 f303 	lsl.w	r3, r1, r3
 800cd1c:	041b      	lsls	r3, r3, #16
 800cd1e:	68f9      	ldr	r1, [r7, #12]
 800cd20:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800cd24:	4313      	orrs	r3, r2
 800cd26:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800cd28:	68bb      	ldr	r3, [r7, #8]
 800cd2a:	015a      	lsls	r2, r3, #5
 800cd2c:	68fb      	ldr	r3, [r7, #12]
 800cd2e:	4413      	add	r3, r2
 800cd30:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cd34:	681b      	ldr	r3, [r3, #0]
 800cd36:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800cd3a:	2b00      	cmp	r3, #0
 800cd3c:	d11a      	bne.n	800cd74 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800cd3e:	68bb      	ldr	r3, [r7, #8]
 800cd40:	015a      	lsls	r2, r3, #5
 800cd42:	68fb      	ldr	r3, [r7, #12]
 800cd44:	4413      	add	r3, r2
 800cd46:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cd4a:	681a      	ldr	r2, [r3, #0]
 800cd4c:	683b      	ldr	r3, [r7, #0]
 800cd4e:	689b      	ldr	r3, [r3, #8]
 800cd50:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800cd54:	683b      	ldr	r3, [r7, #0]
 800cd56:	78db      	ldrb	r3, [r3, #3]
 800cd58:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800cd5a:	430b      	orrs	r3, r1
 800cd5c:	4313      	orrs	r3, r2
 800cd5e:	68ba      	ldr	r2, [r7, #8]
 800cd60:	0151      	lsls	r1, r2, #5
 800cd62:	68fa      	ldr	r2, [r7, #12]
 800cd64:	440a      	add	r2, r1
 800cd66:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800cd6a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800cd6e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800cd72:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800cd74:	2300      	movs	r3, #0
}
 800cd76:	4618      	mov	r0, r3
 800cd78:	3714      	adds	r7, #20
 800cd7a:	46bd      	mov	sp, r7
 800cd7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd80:	4770      	bx	lr
	...

0800cd84 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800cd84:	b480      	push	{r7}
 800cd86:	b085      	sub	sp, #20
 800cd88:	af00      	add	r7, sp, #0
 800cd8a:	6078      	str	r0, [r7, #4]
 800cd8c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cd8e:	687b      	ldr	r3, [r7, #4]
 800cd90:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800cd92:	683b      	ldr	r3, [r7, #0]
 800cd94:	781b      	ldrb	r3, [r3, #0]
 800cd96:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800cd98:	683b      	ldr	r3, [r7, #0]
 800cd9a:	785b      	ldrb	r3, [r3, #1]
 800cd9c:	2b01      	cmp	r3, #1
 800cd9e:	d135      	bne.n	800ce0c <USB_DeactivateEndpoint+0x88>
  {
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800cda0:	68fb      	ldr	r3, [r7, #12]
 800cda2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cda6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800cda8:	683b      	ldr	r3, [r7, #0]
 800cdaa:	781b      	ldrb	r3, [r3, #0]
 800cdac:	f003 030f 	and.w	r3, r3, #15
 800cdb0:	2101      	movs	r1, #1
 800cdb2:	fa01 f303 	lsl.w	r3, r1, r3
 800cdb6:	b29b      	uxth	r3, r3
 800cdb8:	43db      	mvns	r3, r3
 800cdba:	68f9      	ldr	r1, [r7, #12]
 800cdbc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800cdc0:	4013      	ands	r3, r2
 800cdc2:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800cdc4:	68fb      	ldr	r3, [r7, #12]
 800cdc6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cdca:	69da      	ldr	r2, [r3, #28]
 800cdcc:	683b      	ldr	r3, [r7, #0]
 800cdce:	781b      	ldrb	r3, [r3, #0]
 800cdd0:	f003 030f 	and.w	r3, r3, #15
 800cdd4:	2101      	movs	r1, #1
 800cdd6:	fa01 f303 	lsl.w	r3, r1, r3
 800cdda:	b29b      	uxth	r3, r3
 800cddc:	43db      	mvns	r3, r3
 800cdde:	68f9      	ldr	r1, [r7, #12]
 800cde0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800cde4:	4013      	ands	r3, r2
 800cde6:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800cde8:	68bb      	ldr	r3, [r7, #8]
 800cdea:	015a      	lsls	r2, r3, #5
 800cdec:	68fb      	ldr	r3, [r7, #12]
 800cdee:	4413      	add	r3, r2
 800cdf0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cdf4:	681a      	ldr	r2, [r3, #0]
 800cdf6:	68bb      	ldr	r3, [r7, #8]
 800cdf8:	0159      	lsls	r1, r3, #5
 800cdfa:	68fb      	ldr	r3, [r7, #12]
 800cdfc:	440b      	add	r3, r1
 800cdfe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ce02:	4619      	mov	r1, r3
 800ce04:	4b1f      	ldr	r3, [pc, #124]	; (800ce84 <USB_DeactivateEndpoint+0x100>)
 800ce06:	4013      	ands	r3, r2
 800ce08:	600b      	str	r3, [r1, #0]
 800ce0a:	e034      	b.n	800ce76 <USB_DeactivateEndpoint+0xf2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800ce0c:	68fb      	ldr	r3, [r7, #12]
 800ce0e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ce12:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ce14:	683b      	ldr	r3, [r7, #0]
 800ce16:	781b      	ldrb	r3, [r3, #0]
 800ce18:	f003 030f 	and.w	r3, r3, #15
 800ce1c:	2101      	movs	r1, #1
 800ce1e:	fa01 f303 	lsl.w	r3, r1, r3
 800ce22:	041b      	lsls	r3, r3, #16
 800ce24:	43db      	mvns	r3, r3
 800ce26:	68f9      	ldr	r1, [r7, #12]
 800ce28:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ce2c:	4013      	ands	r3, r2
 800ce2e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800ce30:	68fb      	ldr	r3, [r7, #12]
 800ce32:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ce36:	69da      	ldr	r2, [r3, #28]
 800ce38:	683b      	ldr	r3, [r7, #0]
 800ce3a:	781b      	ldrb	r3, [r3, #0]
 800ce3c:	f003 030f 	and.w	r3, r3, #15
 800ce40:	2101      	movs	r1, #1
 800ce42:	fa01 f303 	lsl.w	r3, r1, r3
 800ce46:	041b      	lsls	r3, r3, #16
 800ce48:	43db      	mvns	r3, r3
 800ce4a:	68f9      	ldr	r1, [r7, #12]
 800ce4c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ce50:	4013      	ands	r3, r2
 800ce52:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800ce54:	68bb      	ldr	r3, [r7, #8]
 800ce56:	015a      	lsls	r2, r3, #5
 800ce58:	68fb      	ldr	r3, [r7, #12]
 800ce5a:	4413      	add	r3, r2
 800ce5c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ce60:	681a      	ldr	r2, [r3, #0]
 800ce62:	68bb      	ldr	r3, [r7, #8]
 800ce64:	0159      	lsls	r1, r3, #5
 800ce66:	68fb      	ldr	r3, [r7, #12]
 800ce68:	440b      	add	r3, r1
 800ce6a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ce6e:	4619      	mov	r1, r3
 800ce70:	4b05      	ldr	r3, [pc, #20]	; (800ce88 <USB_DeactivateEndpoint+0x104>)
 800ce72:	4013      	ands	r3, r2
 800ce74:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800ce76:	2300      	movs	r3, #0
}
 800ce78:	4618      	mov	r0, r3
 800ce7a:	3714      	adds	r7, #20
 800ce7c:	46bd      	mov	sp, r7
 800ce7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce82:	4770      	bx	lr
 800ce84:	ec337800 	.word	0xec337800
 800ce88:	eff37800 	.word	0xeff37800

0800ce8c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800ce8c:	b580      	push	{r7, lr}
 800ce8e:	b08a      	sub	sp, #40	; 0x28
 800ce90:	af02      	add	r7, sp, #8
 800ce92:	60f8      	str	r0, [r7, #12]
 800ce94:	60b9      	str	r1, [r7, #8]
 800ce96:	4613      	mov	r3, r2
 800ce98:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ce9a:	68fb      	ldr	r3, [r7, #12]
 800ce9c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800ce9e:	68bb      	ldr	r3, [r7, #8]
 800cea0:	781b      	ldrb	r3, [r3, #0]
 800cea2:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800cea4:	68bb      	ldr	r3, [r7, #8]
 800cea6:	785b      	ldrb	r3, [r3, #1]
 800cea8:	2b01      	cmp	r3, #1
 800ceaa:	f040 815c 	bne.w	800d166 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800ceae:	68bb      	ldr	r3, [r7, #8]
 800ceb0:	695b      	ldr	r3, [r3, #20]
 800ceb2:	2b00      	cmp	r3, #0
 800ceb4:	d132      	bne.n	800cf1c <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800ceb6:	69bb      	ldr	r3, [r7, #24]
 800ceb8:	015a      	lsls	r2, r3, #5
 800ceba:	69fb      	ldr	r3, [r7, #28]
 800cebc:	4413      	add	r3, r2
 800cebe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cec2:	691b      	ldr	r3, [r3, #16]
 800cec4:	69ba      	ldr	r2, [r7, #24]
 800cec6:	0151      	lsls	r1, r2, #5
 800cec8:	69fa      	ldr	r2, [r7, #28]
 800ceca:	440a      	add	r2, r1
 800cecc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ced0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800ced4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800ced8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800ceda:	69bb      	ldr	r3, [r7, #24]
 800cedc:	015a      	lsls	r2, r3, #5
 800cede:	69fb      	ldr	r3, [r7, #28]
 800cee0:	4413      	add	r3, r2
 800cee2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cee6:	691b      	ldr	r3, [r3, #16]
 800cee8:	69ba      	ldr	r2, [r7, #24]
 800ceea:	0151      	lsls	r1, r2, #5
 800ceec:	69fa      	ldr	r2, [r7, #28]
 800ceee:	440a      	add	r2, r1
 800cef0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cef4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800cef8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800cefa:	69bb      	ldr	r3, [r7, #24]
 800cefc:	015a      	lsls	r2, r3, #5
 800cefe:	69fb      	ldr	r3, [r7, #28]
 800cf00:	4413      	add	r3, r2
 800cf02:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cf06:	691b      	ldr	r3, [r3, #16]
 800cf08:	69ba      	ldr	r2, [r7, #24]
 800cf0a:	0151      	lsls	r1, r2, #5
 800cf0c:	69fa      	ldr	r2, [r7, #28]
 800cf0e:	440a      	add	r2, r1
 800cf10:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cf14:	0cdb      	lsrs	r3, r3, #19
 800cf16:	04db      	lsls	r3, r3, #19
 800cf18:	6113      	str	r3, [r2, #16]
 800cf1a:	e074      	b.n	800d006 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800cf1c:	69bb      	ldr	r3, [r7, #24]
 800cf1e:	015a      	lsls	r2, r3, #5
 800cf20:	69fb      	ldr	r3, [r7, #28]
 800cf22:	4413      	add	r3, r2
 800cf24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cf28:	691b      	ldr	r3, [r3, #16]
 800cf2a:	69ba      	ldr	r2, [r7, #24]
 800cf2c:	0151      	lsls	r1, r2, #5
 800cf2e:	69fa      	ldr	r2, [r7, #28]
 800cf30:	440a      	add	r2, r1
 800cf32:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cf36:	0cdb      	lsrs	r3, r3, #19
 800cf38:	04db      	lsls	r3, r3, #19
 800cf3a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800cf3c:	69bb      	ldr	r3, [r7, #24]
 800cf3e:	015a      	lsls	r2, r3, #5
 800cf40:	69fb      	ldr	r3, [r7, #28]
 800cf42:	4413      	add	r3, r2
 800cf44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cf48:	691b      	ldr	r3, [r3, #16]
 800cf4a:	69ba      	ldr	r2, [r7, #24]
 800cf4c:	0151      	lsls	r1, r2, #5
 800cf4e:	69fa      	ldr	r2, [r7, #28]
 800cf50:	440a      	add	r2, r1
 800cf52:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cf56:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800cf5a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800cf5e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800cf60:	69bb      	ldr	r3, [r7, #24]
 800cf62:	015a      	lsls	r2, r3, #5
 800cf64:	69fb      	ldr	r3, [r7, #28]
 800cf66:	4413      	add	r3, r2
 800cf68:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cf6c:	691a      	ldr	r2, [r3, #16]
 800cf6e:	68bb      	ldr	r3, [r7, #8]
 800cf70:	6959      	ldr	r1, [r3, #20]
 800cf72:	68bb      	ldr	r3, [r7, #8]
 800cf74:	689b      	ldr	r3, [r3, #8]
 800cf76:	440b      	add	r3, r1
 800cf78:	1e59      	subs	r1, r3, #1
 800cf7a:	68bb      	ldr	r3, [r7, #8]
 800cf7c:	689b      	ldr	r3, [r3, #8]
 800cf7e:	fbb1 f3f3 	udiv	r3, r1, r3
 800cf82:	04d9      	lsls	r1, r3, #19
 800cf84:	4b9d      	ldr	r3, [pc, #628]	; (800d1fc <USB_EPStartXfer+0x370>)
 800cf86:	400b      	ands	r3, r1
 800cf88:	69b9      	ldr	r1, [r7, #24]
 800cf8a:	0148      	lsls	r0, r1, #5
 800cf8c:	69f9      	ldr	r1, [r7, #28]
 800cf8e:	4401      	add	r1, r0
 800cf90:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800cf94:	4313      	orrs	r3, r2
 800cf96:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800cf98:	69bb      	ldr	r3, [r7, #24]
 800cf9a:	015a      	lsls	r2, r3, #5
 800cf9c:	69fb      	ldr	r3, [r7, #28]
 800cf9e:	4413      	add	r3, r2
 800cfa0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cfa4:	691a      	ldr	r2, [r3, #16]
 800cfa6:	68bb      	ldr	r3, [r7, #8]
 800cfa8:	695b      	ldr	r3, [r3, #20]
 800cfaa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800cfae:	69b9      	ldr	r1, [r7, #24]
 800cfb0:	0148      	lsls	r0, r1, #5
 800cfb2:	69f9      	ldr	r1, [r7, #28]
 800cfb4:	4401      	add	r1, r0
 800cfb6:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800cfba:	4313      	orrs	r3, r2
 800cfbc:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800cfbe:	68bb      	ldr	r3, [r7, #8]
 800cfc0:	78db      	ldrb	r3, [r3, #3]
 800cfc2:	2b01      	cmp	r3, #1
 800cfc4:	d11f      	bne.n	800d006 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800cfc6:	69bb      	ldr	r3, [r7, #24]
 800cfc8:	015a      	lsls	r2, r3, #5
 800cfca:	69fb      	ldr	r3, [r7, #28]
 800cfcc:	4413      	add	r3, r2
 800cfce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cfd2:	691b      	ldr	r3, [r3, #16]
 800cfd4:	69ba      	ldr	r2, [r7, #24]
 800cfd6:	0151      	lsls	r1, r2, #5
 800cfd8:	69fa      	ldr	r2, [r7, #28]
 800cfda:	440a      	add	r2, r1
 800cfdc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cfe0:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800cfe4:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800cfe6:	69bb      	ldr	r3, [r7, #24]
 800cfe8:	015a      	lsls	r2, r3, #5
 800cfea:	69fb      	ldr	r3, [r7, #28]
 800cfec:	4413      	add	r3, r2
 800cfee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cff2:	691b      	ldr	r3, [r3, #16]
 800cff4:	69ba      	ldr	r2, [r7, #24]
 800cff6:	0151      	lsls	r1, r2, #5
 800cff8:	69fa      	ldr	r2, [r7, #28]
 800cffa:	440a      	add	r2, r1
 800cffc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d000:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800d004:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800d006:	79fb      	ldrb	r3, [r7, #7]
 800d008:	2b01      	cmp	r3, #1
 800d00a:	d14b      	bne.n	800d0a4 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800d00c:	68bb      	ldr	r3, [r7, #8]
 800d00e:	691b      	ldr	r3, [r3, #16]
 800d010:	2b00      	cmp	r3, #0
 800d012:	d009      	beq.n	800d028 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800d014:	69bb      	ldr	r3, [r7, #24]
 800d016:	015a      	lsls	r2, r3, #5
 800d018:	69fb      	ldr	r3, [r7, #28]
 800d01a:	4413      	add	r3, r2
 800d01c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d020:	461a      	mov	r2, r3
 800d022:	68bb      	ldr	r3, [r7, #8]
 800d024:	691b      	ldr	r3, [r3, #16]
 800d026:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800d028:	68bb      	ldr	r3, [r7, #8]
 800d02a:	78db      	ldrb	r3, [r3, #3]
 800d02c:	2b01      	cmp	r3, #1
 800d02e:	d128      	bne.n	800d082 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800d030:	69fb      	ldr	r3, [r7, #28]
 800d032:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d036:	689b      	ldr	r3, [r3, #8]
 800d038:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d03c:	2b00      	cmp	r3, #0
 800d03e:	d110      	bne.n	800d062 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800d040:	69bb      	ldr	r3, [r7, #24]
 800d042:	015a      	lsls	r2, r3, #5
 800d044:	69fb      	ldr	r3, [r7, #28]
 800d046:	4413      	add	r3, r2
 800d048:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d04c:	681b      	ldr	r3, [r3, #0]
 800d04e:	69ba      	ldr	r2, [r7, #24]
 800d050:	0151      	lsls	r1, r2, #5
 800d052:	69fa      	ldr	r2, [r7, #28]
 800d054:	440a      	add	r2, r1
 800d056:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d05a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800d05e:	6013      	str	r3, [r2, #0]
 800d060:	e00f      	b.n	800d082 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800d062:	69bb      	ldr	r3, [r7, #24]
 800d064:	015a      	lsls	r2, r3, #5
 800d066:	69fb      	ldr	r3, [r7, #28]
 800d068:	4413      	add	r3, r2
 800d06a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d06e:	681b      	ldr	r3, [r3, #0]
 800d070:	69ba      	ldr	r2, [r7, #24]
 800d072:	0151      	lsls	r1, r2, #5
 800d074:	69fa      	ldr	r2, [r7, #28]
 800d076:	440a      	add	r2, r1
 800d078:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d07c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d080:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800d082:	69bb      	ldr	r3, [r7, #24]
 800d084:	015a      	lsls	r2, r3, #5
 800d086:	69fb      	ldr	r3, [r7, #28]
 800d088:	4413      	add	r3, r2
 800d08a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d08e:	681b      	ldr	r3, [r3, #0]
 800d090:	69ba      	ldr	r2, [r7, #24]
 800d092:	0151      	lsls	r1, r2, #5
 800d094:	69fa      	ldr	r2, [r7, #28]
 800d096:	440a      	add	r2, r1
 800d098:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d09c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800d0a0:	6013      	str	r3, [r2, #0]
 800d0a2:	e12f      	b.n	800d304 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800d0a4:	69bb      	ldr	r3, [r7, #24]
 800d0a6:	015a      	lsls	r2, r3, #5
 800d0a8:	69fb      	ldr	r3, [r7, #28]
 800d0aa:	4413      	add	r3, r2
 800d0ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d0b0:	681b      	ldr	r3, [r3, #0]
 800d0b2:	69ba      	ldr	r2, [r7, #24]
 800d0b4:	0151      	lsls	r1, r2, #5
 800d0b6:	69fa      	ldr	r2, [r7, #28]
 800d0b8:	440a      	add	r2, r1
 800d0ba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d0be:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800d0c2:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800d0c4:	68bb      	ldr	r3, [r7, #8]
 800d0c6:	78db      	ldrb	r3, [r3, #3]
 800d0c8:	2b01      	cmp	r3, #1
 800d0ca:	d015      	beq.n	800d0f8 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800d0cc:	68bb      	ldr	r3, [r7, #8]
 800d0ce:	695b      	ldr	r3, [r3, #20]
 800d0d0:	2b00      	cmp	r3, #0
 800d0d2:	f000 8117 	beq.w	800d304 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800d0d6:	69fb      	ldr	r3, [r7, #28]
 800d0d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d0dc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d0de:	68bb      	ldr	r3, [r7, #8]
 800d0e0:	781b      	ldrb	r3, [r3, #0]
 800d0e2:	f003 030f 	and.w	r3, r3, #15
 800d0e6:	2101      	movs	r1, #1
 800d0e8:	fa01 f303 	lsl.w	r3, r1, r3
 800d0ec:	69f9      	ldr	r1, [r7, #28]
 800d0ee:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800d0f2:	4313      	orrs	r3, r2
 800d0f4:	634b      	str	r3, [r1, #52]	; 0x34
 800d0f6:	e105      	b.n	800d304 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800d0f8:	69fb      	ldr	r3, [r7, #28]
 800d0fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d0fe:	689b      	ldr	r3, [r3, #8]
 800d100:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d104:	2b00      	cmp	r3, #0
 800d106:	d110      	bne.n	800d12a <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800d108:	69bb      	ldr	r3, [r7, #24]
 800d10a:	015a      	lsls	r2, r3, #5
 800d10c:	69fb      	ldr	r3, [r7, #28]
 800d10e:	4413      	add	r3, r2
 800d110:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d114:	681b      	ldr	r3, [r3, #0]
 800d116:	69ba      	ldr	r2, [r7, #24]
 800d118:	0151      	lsls	r1, r2, #5
 800d11a:	69fa      	ldr	r2, [r7, #28]
 800d11c:	440a      	add	r2, r1
 800d11e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d122:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800d126:	6013      	str	r3, [r2, #0]
 800d128:	e00f      	b.n	800d14a <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800d12a:	69bb      	ldr	r3, [r7, #24]
 800d12c:	015a      	lsls	r2, r3, #5
 800d12e:	69fb      	ldr	r3, [r7, #28]
 800d130:	4413      	add	r3, r2
 800d132:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d136:	681b      	ldr	r3, [r3, #0]
 800d138:	69ba      	ldr	r2, [r7, #24]
 800d13a:	0151      	lsls	r1, r2, #5
 800d13c:	69fa      	ldr	r2, [r7, #28]
 800d13e:	440a      	add	r2, r1
 800d140:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d144:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d148:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800d14a:	68bb      	ldr	r3, [r7, #8]
 800d14c:	68d9      	ldr	r1, [r3, #12]
 800d14e:	68bb      	ldr	r3, [r7, #8]
 800d150:	781a      	ldrb	r2, [r3, #0]
 800d152:	68bb      	ldr	r3, [r7, #8]
 800d154:	695b      	ldr	r3, [r3, #20]
 800d156:	b298      	uxth	r0, r3
 800d158:	79fb      	ldrb	r3, [r7, #7]
 800d15a:	9300      	str	r3, [sp, #0]
 800d15c:	4603      	mov	r3, r0
 800d15e:	68f8      	ldr	r0, [r7, #12]
 800d160:	f000 fa2b 	bl	800d5ba <USB_WritePacket>
 800d164:	e0ce      	b.n	800d304 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800d166:	69bb      	ldr	r3, [r7, #24]
 800d168:	015a      	lsls	r2, r3, #5
 800d16a:	69fb      	ldr	r3, [r7, #28]
 800d16c:	4413      	add	r3, r2
 800d16e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d172:	691b      	ldr	r3, [r3, #16]
 800d174:	69ba      	ldr	r2, [r7, #24]
 800d176:	0151      	lsls	r1, r2, #5
 800d178:	69fa      	ldr	r2, [r7, #28]
 800d17a:	440a      	add	r2, r1
 800d17c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d180:	0cdb      	lsrs	r3, r3, #19
 800d182:	04db      	lsls	r3, r3, #19
 800d184:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800d186:	69bb      	ldr	r3, [r7, #24]
 800d188:	015a      	lsls	r2, r3, #5
 800d18a:	69fb      	ldr	r3, [r7, #28]
 800d18c:	4413      	add	r3, r2
 800d18e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d192:	691b      	ldr	r3, [r3, #16]
 800d194:	69ba      	ldr	r2, [r7, #24]
 800d196:	0151      	lsls	r1, r2, #5
 800d198:	69fa      	ldr	r2, [r7, #28]
 800d19a:	440a      	add	r2, r1
 800d19c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d1a0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800d1a4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800d1a8:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800d1aa:	68bb      	ldr	r3, [r7, #8]
 800d1ac:	695b      	ldr	r3, [r3, #20]
 800d1ae:	2b00      	cmp	r3, #0
 800d1b0:	d126      	bne.n	800d200 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800d1b2:	69bb      	ldr	r3, [r7, #24]
 800d1b4:	015a      	lsls	r2, r3, #5
 800d1b6:	69fb      	ldr	r3, [r7, #28]
 800d1b8:	4413      	add	r3, r2
 800d1ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d1be:	691a      	ldr	r2, [r3, #16]
 800d1c0:	68bb      	ldr	r3, [r7, #8]
 800d1c2:	689b      	ldr	r3, [r3, #8]
 800d1c4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800d1c8:	69b9      	ldr	r1, [r7, #24]
 800d1ca:	0148      	lsls	r0, r1, #5
 800d1cc:	69f9      	ldr	r1, [r7, #28]
 800d1ce:	4401      	add	r1, r0
 800d1d0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800d1d4:	4313      	orrs	r3, r2
 800d1d6:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800d1d8:	69bb      	ldr	r3, [r7, #24]
 800d1da:	015a      	lsls	r2, r3, #5
 800d1dc:	69fb      	ldr	r3, [r7, #28]
 800d1de:	4413      	add	r3, r2
 800d1e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d1e4:	691b      	ldr	r3, [r3, #16]
 800d1e6:	69ba      	ldr	r2, [r7, #24]
 800d1e8:	0151      	lsls	r1, r2, #5
 800d1ea:	69fa      	ldr	r2, [r7, #28]
 800d1ec:	440a      	add	r2, r1
 800d1ee:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d1f2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800d1f6:	6113      	str	r3, [r2, #16]
 800d1f8:	e036      	b.n	800d268 <USB_EPStartXfer+0x3dc>
 800d1fa:	bf00      	nop
 800d1fc:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800d200:	68bb      	ldr	r3, [r7, #8]
 800d202:	695a      	ldr	r2, [r3, #20]
 800d204:	68bb      	ldr	r3, [r7, #8]
 800d206:	689b      	ldr	r3, [r3, #8]
 800d208:	4413      	add	r3, r2
 800d20a:	1e5a      	subs	r2, r3, #1
 800d20c:	68bb      	ldr	r3, [r7, #8]
 800d20e:	689b      	ldr	r3, [r3, #8]
 800d210:	fbb2 f3f3 	udiv	r3, r2, r3
 800d214:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800d216:	69bb      	ldr	r3, [r7, #24]
 800d218:	015a      	lsls	r2, r3, #5
 800d21a:	69fb      	ldr	r3, [r7, #28]
 800d21c:	4413      	add	r3, r2
 800d21e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d222:	691a      	ldr	r2, [r3, #16]
 800d224:	8afb      	ldrh	r3, [r7, #22]
 800d226:	04d9      	lsls	r1, r3, #19
 800d228:	4b39      	ldr	r3, [pc, #228]	; (800d310 <USB_EPStartXfer+0x484>)
 800d22a:	400b      	ands	r3, r1
 800d22c:	69b9      	ldr	r1, [r7, #24]
 800d22e:	0148      	lsls	r0, r1, #5
 800d230:	69f9      	ldr	r1, [r7, #28]
 800d232:	4401      	add	r1, r0
 800d234:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800d238:	4313      	orrs	r3, r2
 800d23a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 800d23c:	69bb      	ldr	r3, [r7, #24]
 800d23e:	015a      	lsls	r2, r3, #5
 800d240:	69fb      	ldr	r3, [r7, #28]
 800d242:	4413      	add	r3, r2
 800d244:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d248:	691a      	ldr	r2, [r3, #16]
 800d24a:	68bb      	ldr	r3, [r7, #8]
 800d24c:	689b      	ldr	r3, [r3, #8]
 800d24e:	8af9      	ldrh	r1, [r7, #22]
 800d250:	fb01 f303 	mul.w	r3, r1, r3
 800d254:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800d258:	69b9      	ldr	r1, [r7, #24]
 800d25a:	0148      	lsls	r0, r1, #5
 800d25c:	69f9      	ldr	r1, [r7, #28]
 800d25e:	4401      	add	r1, r0
 800d260:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800d264:	4313      	orrs	r3, r2
 800d266:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800d268:	79fb      	ldrb	r3, [r7, #7]
 800d26a:	2b01      	cmp	r3, #1
 800d26c:	d10d      	bne.n	800d28a <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800d26e:	68bb      	ldr	r3, [r7, #8]
 800d270:	68db      	ldr	r3, [r3, #12]
 800d272:	2b00      	cmp	r3, #0
 800d274:	d009      	beq.n	800d28a <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800d276:	68bb      	ldr	r3, [r7, #8]
 800d278:	68d9      	ldr	r1, [r3, #12]
 800d27a:	69bb      	ldr	r3, [r7, #24]
 800d27c:	015a      	lsls	r2, r3, #5
 800d27e:	69fb      	ldr	r3, [r7, #28]
 800d280:	4413      	add	r3, r2
 800d282:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d286:	460a      	mov	r2, r1
 800d288:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800d28a:	68bb      	ldr	r3, [r7, #8]
 800d28c:	78db      	ldrb	r3, [r3, #3]
 800d28e:	2b01      	cmp	r3, #1
 800d290:	d128      	bne.n	800d2e4 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800d292:	69fb      	ldr	r3, [r7, #28]
 800d294:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d298:	689b      	ldr	r3, [r3, #8]
 800d29a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d29e:	2b00      	cmp	r3, #0
 800d2a0:	d110      	bne.n	800d2c4 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800d2a2:	69bb      	ldr	r3, [r7, #24]
 800d2a4:	015a      	lsls	r2, r3, #5
 800d2a6:	69fb      	ldr	r3, [r7, #28]
 800d2a8:	4413      	add	r3, r2
 800d2aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d2ae:	681b      	ldr	r3, [r3, #0]
 800d2b0:	69ba      	ldr	r2, [r7, #24]
 800d2b2:	0151      	lsls	r1, r2, #5
 800d2b4:	69fa      	ldr	r2, [r7, #28]
 800d2b6:	440a      	add	r2, r1
 800d2b8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d2bc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800d2c0:	6013      	str	r3, [r2, #0]
 800d2c2:	e00f      	b.n	800d2e4 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800d2c4:	69bb      	ldr	r3, [r7, #24]
 800d2c6:	015a      	lsls	r2, r3, #5
 800d2c8:	69fb      	ldr	r3, [r7, #28]
 800d2ca:	4413      	add	r3, r2
 800d2cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d2d0:	681b      	ldr	r3, [r3, #0]
 800d2d2:	69ba      	ldr	r2, [r7, #24]
 800d2d4:	0151      	lsls	r1, r2, #5
 800d2d6:	69fa      	ldr	r2, [r7, #28]
 800d2d8:	440a      	add	r2, r1
 800d2da:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d2de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d2e2:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800d2e4:	69bb      	ldr	r3, [r7, #24]
 800d2e6:	015a      	lsls	r2, r3, #5
 800d2e8:	69fb      	ldr	r3, [r7, #28]
 800d2ea:	4413      	add	r3, r2
 800d2ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d2f0:	681b      	ldr	r3, [r3, #0]
 800d2f2:	69ba      	ldr	r2, [r7, #24]
 800d2f4:	0151      	lsls	r1, r2, #5
 800d2f6:	69fa      	ldr	r2, [r7, #28]
 800d2f8:	440a      	add	r2, r1
 800d2fa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d2fe:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800d302:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800d304:	2300      	movs	r3, #0
}
 800d306:	4618      	mov	r0, r3
 800d308:	3720      	adds	r7, #32
 800d30a:	46bd      	mov	sp, r7
 800d30c:	bd80      	pop	{r7, pc}
 800d30e:	bf00      	nop
 800d310:	1ff80000 	.word	0x1ff80000

0800d314 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800d314:	b480      	push	{r7}
 800d316:	b087      	sub	sp, #28
 800d318:	af00      	add	r7, sp, #0
 800d31a:	60f8      	str	r0, [r7, #12]
 800d31c:	60b9      	str	r1, [r7, #8]
 800d31e:	4613      	mov	r3, r2
 800d320:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d322:	68fb      	ldr	r3, [r7, #12]
 800d324:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800d326:	68bb      	ldr	r3, [r7, #8]
 800d328:	781b      	ldrb	r3, [r3, #0]
 800d32a:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800d32c:	68bb      	ldr	r3, [r7, #8]
 800d32e:	785b      	ldrb	r3, [r3, #1]
 800d330:	2b01      	cmp	r3, #1
 800d332:	f040 80cd 	bne.w	800d4d0 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800d336:	68bb      	ldr	r3, [r7, #8]
 800d338:	695b      	ldr	r3, [r3, #20]
 800d33a:	2b00      	cmp	r3, #0
 800d33c:	d132      	bne.n	800d3a4 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800d33e:	693b      	ldr	r3, [r7, #16]
 800d340:	015a      	lsls	r2, r3, #5
 800d342:	697b      	ldr	r3, [r7, #20]
 800d344:	4413      	add	r3, r2
 800d346:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d34a:	691b      	ldr	r3, [r3, #16]
 800d34c:	693a      	ldr	r2, [r7, #16]
 800d34e:	0151      	lsls	r1, r2, #5
 800d350:	697a      	ldr	r2, [r7, #20]
 800d352:	440a      	add	r2, r1
 800d354:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d358:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800d35c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800d360:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800d362:	693b      	ldr	r3, [r7, #16]
 800d364:	015a      	lsls	r2, r3, #5
 800d366:	697b      	ldr	r3, [r7, #20]
 800d368:	4413      	add	r3, r2
 800d36a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d36e:	691b      	ldr	r3, [r3, #16]
 800d370:	693a      	ldr	r2, [r7, #16]
 800d372:	0151      	lsls	r1, r2, #5
 800d374:	697a      	ldr	r2, [r7, #20]
 800d376:	440a      	add	r2, r1
 800d378:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d37c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800d380:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800d382:	693b      	ldr	r3, [r7, #16]
 800d384:	015a      	lsls	r2, r3, #5
 800d386:	697b      	ldr	r3, [r7, #20]
 800d388:	4413      	add	r3, r2
 800d38a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d38e:	691b      	ldr	r3, [r3, #16]
 800d390:	693a      	ldr	r2, [r7, #16]
 800d392:	0151      	lsls	r1, r2, #5
 800d394:	697a      	ldr	r2, [r7, #20]
 800d396:	440a      	add	r2, r1
 800d398:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d39c:	0cdb      	lsrs	r3, r3, #19
 800d39e:	04db      	lsls	r3, r3, #19
 800d3a0:	6113      	str	r3, [r2, #16]
 800d3a2:	e04e      	b.n	800d442 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800d3a4:	693b      	ldr	r3, [r7, #16]
 800d3a6:	015a      	lsls	r2, r3, #5
 800d3a8:	697b      	ldr	r3, [r7, #20]
 800d3aa:	4413      	add	r3, r2
 800d3ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d3b0:	691b      	ldr	r3, [r3, #16]
 800d3b2:	693a      	ldr	r2, [r7, #16]
 800d3b4:	0151      	lsls	r1, r2, #5
 800d3b6:	697a      	ldr	r2, [r7, #20]
 800d3b8:	440a      	add	r2, r1
 800d3ba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d3be:	0cdb      	lsrs	r3, r3, #19
 800d3c0:	04db      	lsls	r3, r3, #19
 800d3c2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800d3c4:	693b      	ldr	r3, [r7, #16]
 800d3c6:	015a      	lsls	r2, r3, #5
 800d3c8:	697b      	ldr	r3, [r7, #20]
 800d3ca:	4413      	add	r3, r2
 800d3cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d3d0:	691b      	ldr	r3, [r3, #16]
 800d3d2:	693a      	ldr	r2, [r7, #16]
 800d3d4:	0151      	lsls	r1, r2, #5
 800d3d6:	697a      	ldr	r2, [r7, #20]
 800d3d8:	440a      	add	r2, r1
 800d3da:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d3de:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800d3e2:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800d3e6:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 800d3e8:	68bb      	ldr	r3, [r7, #8]
 800d3ea:	695a      	ldr	r2, [r3, #20]
 800d3ec:	68bb      	ldr	r3, [r7, #8]
 800d3ee:	689b      	ldr	r3, [r3, #8]
 800d3f0:	429a      	cmp	r2, r3
 800d3f2:	d903      	bls.n	800d3fc <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800d3f4:	68bb      	ldr	r3, [r7, #8]
 800d3f6:	689a      	ldr	r2, [r3, #8]
 800d3f8:	68bb      	ldr	r3, [r7, #8]
 800d3fa:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800d3fc:	693b      	ldr	r3, [r7, #16]
 800d3fe:	015a      	lsls	r2, r3, #5
 800d400:	697b      	ldr	r3, [r7, #20]
 800d402:	4413      	add	r3, r2
 800d404:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d408:	691b      	ldr	r3, [r3, #16]
 800d40a:	693a      	ldr	r2, [r7, #16]
 800d40c:	0151      	lsls	r1, r2, #5
 800d40e:	697a      	ldr	r2, [r7, #20]
 800d410:	440a      	add	r2, r1
 800d412:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d416:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800d41a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800d41c:	693b      	ldr	r3, [r7, #16]
 800d41e:	015a      	lsls	r2, r3, #5
 800d420:	697b      	ldr	r3, [r7, #20]
 800d422:	4413      	add	r3, r2
 800d424:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d428:	691a      	ldr	r2, [r3, #16]
 800d42a:	68bb      	ldr	r3, [r7, #8]
 800d42c:	695b      	ldr	r3, [r3, #20]
 800d42e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800d432:	6939      	ldr	r1, [r7, #16]
 800d434:	0148      	lsls	r0, r1, #5
 800d436:	6979      	ldr	r1, [r7, #20]
 800d438:	4401      	add	r1, r0
 800d43a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800d43e:	4313      	orrs	r3, r2
 800d440:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800d442:	79fb      	ldrb	r3, [r7, #7]
 800d444:	2b01      	cmp	r3, #1
 800d446:	d11e      	bne.n	800d486 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800d448:	68bb      	ldr	r3, [r7, #8]
 800d44a:	691b      	ldr	r3, [r3, #16]
 800d44c:	2b00      	cmp	r3, #0
 800d44e:	d009      	beq.n	800d464 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800d450:	693b      	ldr	r3, [r7, #16]
 800d452:	015a      	lsls	r2, r3, #5
 800d454:	697b      	ldr	r3, [r7, #20]
 800d456:	4413      	add	r3, r2
 800d458:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d45c:	461a      	mov	r2, r3
 800d45e:	68bb      	ldr	r3, [r7, #8]
 800d460:	691b      	ldr	r3, [r3, #16]
 800d462:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800d464:	693b      	ldr	r3, [r7, #16]
 800d466:	015a      	lsls	r2, r3, #5
 800d468:	697b      	ldr	r3, [r7, #20]
 800d46a:	4413      	add	r3, r2
 800d46c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d470:	681b      	ldr	r3, [r3, #0]
 800d472:	693a      	ldr	r2, [r7, #16]
 800d474:	0151      	lsls	r1, r2, #5
 800d476:	697a      	ldr	r2, [r7, #20]
 800d478:	440a      	add	r2, r1
 800d47a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d47e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800d482:	6013      	str	r3, [r2, #0]
 800d484:	e092      	b.n	800d5ac <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800d486:	693b      	ldr	r3, [r7, #16]
 800d488:	015a      	lsls	r2, r3, #5
 800d48a:	697b      	ldr	r3, [r7, #20]
 800d48c:	4413      	add	r3, r2
 800d48e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d492:	681b      	ldr	r3, [r3, #0]
 800d494:	693a      	ldr	r2, [r7, #16]
 800d496:	0151      	lsls	r1, r2, #5
 800d498:	697a      	ldr	r2, [r7, #20]
 800d49a:	440a      	add	r2, r1
 800d49c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d4a0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800d4a4:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800d4a6:	68bb      	ldr	r3, [r7, #8]
 800d4a8:	695b      	ldr	r3, [r3, #20]
 800d4aa:	2b00      	cmp	r3, #0
 800d4ac:	d07e      	beq.n	800d5ac <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800d4ae:	697b      	ldr	r3, [r7, #20]
 800d4b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d4b4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d4b6:	68bb      	ldr	r3, [r7, #8]
 800d4b8:	781b      	ldrb	r3, [r3, #0]
 800d4ba:	f003 030f 	and.w	r3, r3, #15
 800d4be:	2101      	movs	r1, #1
 800d4c0:	fa01 f303 	lsl.w	r3, r1, r3
 800d4c4:	6979      	ldr	r1, [r7, #20]
 800d4c6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800d4ca:	4313      	orrs	r3, r2
 800d4cc:	634b      	str	r3, [r1, #52]	; 0x34
 800d4ce:	e06d      	b.n	800d5ac <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800d4d0:	693b      	ldr	r3, [r7, #16]
 800d4d2:	015a      	lsls	r2, r3, #5
 800d4d4:	697b      	ldr	r3, [r7, #20]
 800d4d6:	4413      	add	r3, r2
 800d4d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d4dc:	691b      	ldr	r3, [r3, #16]
 800d4de:	693a      	ldr	r2, [r7, #16]
 800d4e0:	0151      	lsls	r1, r2, #5
 800d4e2:	697a      	ldr	r2, [r7, #20]
 800d4e4:	440a      	add	r2, r1
 800d4e6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d4ea:	0cdb      	lsrs	r3, r3, #19
 800d4ec:	04db      	lsls	r3, r3, #19
 800d4ee:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800d4f0:	693b      	ldr	r3, [r7, #16]
 800d4f2:	015a      	lsls	r2, r3, #5
 800d4f4:	697b      	ldr	r3, [r7, #20]
 800d4f6:	4413      	add	r3, r2
 800d4f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d4fc:	691b      	ldr	r3, [r3, #16]
 800d4fe:	693a      	ldr	r2, [r7, #16]
 800d500:	0151      	lsls	r1, r2, #5
 800d502:	697a      	ldr	r2, [r7, #20]
 800d504:	440a      	add	r2, r1
 800d506:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d50a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800d50e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800d512:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800d514:	68bb      	ldr	r3, [r7, #8]
 800d516:	695b      	ldr	r3, [r3, #20]
 800d518:	2b00      	cmp	r3, #0
 800d51a:	d003      	beq.n	800d524 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 800d51c:	68bb      	ldr	r3, [r7, #8]
 800d51e:	689a      	ldr	r2, [r3, #8]
 800d520:	68bb      	ldr	r3, [r7, #8]
 800d522:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800d524:	693b      	ldr	r3, [r7, #16]
 800d526:	015a      	lsls	r2, r3, #5
 800d528:	697b      	ldr	r3, [r7, #20]
 800d52a:	4413      	add	r3, r2
 800d52c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d530:	691b      	ldr	r3, [r3, #16]
 800d532:	693a      	ldr	r2, [r7, #16]
 800d534:	0151      	lsls	r1, r2, #5
 800d536:	697a      	ldr	r2, [r7, #20]
 800d538:	440a      	add	r2, r1
 800d53a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d53e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800d542:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 800d544:	693b      	ldr	r3, [r7, #16]
 800d546:	015a      	lsls	r2, r3, #5
 800d548:	697b      	ldr	r3, [r7, #20]
 800d54a:	4413      	add	r3, r2
 800d54c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d550:	691a      	ldr	r2, [r3, #16]
 800d552:	68bb      	ldr	r3, [r7, #8]
 800d554:	689b      	ldr	r3, [r3, #8]
 800d556:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800d55a:	6939      	ldr	r1, [r7, #16]
 800d55c:	0148      	lsls	r0, r1, #5
 800d55e:	6979      	ldr	r1, [r7, #20]
 800d560:	4401      	add	r1, r0
 800d562:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800d566:	4313      	orrs	r3, r2
 800d568:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800d56a:	79fb      	ldrb	r3, [r7, #7]
 800d56c:	2b01      	cmp	r3, #1
 800d56e:	d10d      	bne.n	800d58c <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800d570:	68bb      	ldr	r3, [r7, #8]
 800d572:	68db      	ldr	r3, [r3, #12]
 800d574:	2b00      	cmp	r3, #0
 800d576:	d009      	beq.n	800d58c <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800d578:	68bb      	ldr	r3, [r7, #8]
 800d57a:	68d9      	ldr	r1, [r3, #12]
 800d57c:	693b      	ldr	r3, [r7, #16]
 800d57e:	015a      	lsls	r2, r3, #5
 800d580:	697b      	ldr	r3, [r7, #20]
 800d582:	4413      	add	r3, r2
 800d584:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d588:	460a      	mov	r2, r1
 800d58a:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800d58c:	693b      	ldr	r3, [r7, #16]
 800d58e:	015a      	lsls	r2, r3, #5
 800d590:	697b      	ldr	r3, [r7, #20]
 800d592:	4413      	add	r3, r2
 800d594:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d598:	681b      	ldr	r3, [r3, #0]
 800d59a:	693a      	ldr	r2, [r7, #16]
 800d59c:	0151      	lsls	r1, r2, #5
 800d59e:	697a      	ldr	r2, [r7, #20]
 800d5a0:	440a      	add	r2, r1
 800d5a2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d5a6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800d5aa:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800d5ac:	2300      	movs	r3, #0
}
 800d5ae:	4618      	mov	r0, r3
 800d5b0:	371c      	adds	r7, #28
 800d5b2:	46bd      	mov	sp, r7
 800d5b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5b8:	4770      	bx	lr

0800d5ba <USB_WritePacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800d5ba:	b480      	push	{r7}
 800d5bc:	b089      	sub	sp, #36	; 0x24
 800d5be:	af00      	add	r7, sp, #0
 800d5c0:	60f8      	str	r0, [r7, #12]
 800d5c2:	60b9      	str	r1, [r7, #8]
 800d5c4:	4611      	mov	r1, r2
 800d5c6:	461a      	mov	r2, r3
 800d5c8:	460b      	mov	r3, r1
 800d5ca:	71fb      	strb	r3, [r7, #7]
 800d5cc:	4613      	mov	r3, r2
 800d5ce:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d5d0:	68fb      	ldr	r3, [r7, #12]
 800d5d2:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 800d5d4:	68bb      	ldr	r3, [r7, #8]
 800d5d6:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 800d5d8:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800d5dc:	2b00      	cmp	r3, #0
 800d5de:	d11a      	bne.n	800d616 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800d5e0:	88bb      	ldrh	r3, [r7, #4]
 800d5e2:	3303      	adds	r3, #3
 800d5e4:	089b      	lsrs	r3, r3, #2
 800d5e6:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800d5e8:	2300      	movs	r3, #0
 800d5ea:	61bb      	str	r3, [r7, #24]
 800d5ec:	e00f      	b.n	800d60e <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800d5ee:	79fb      	ldrb	r3, [r7, #7]
 800d5f0:	031a      	lsls	r2, r3, #12
 800d5f2:	697b      	ldr	r3, [r7, #20]
 800d5f4:	4413      	add	r3, r2
 800d5f6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d5fa:	461a      	mov	r2, r3
 800d5fc:	69fb      	ldr	r3, [r7, #28]
 800d5fe:	681b      	ldr	r3, [r3, #0]
 800d600:	6013      	str	r3, [r2, #0]
      pSrc++;
 800d602:	69fb      	ldr	r3, [r7, #28]
 800d604:	3304      	adds	r3, #4
 800d606:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800d608:	69bb      	ldr	r3, [r7, #24]
 800d60a:	3301      	adds	r3, #1
 800d60c:	61bb      	str	r3, [r7, #24]
 800d60e:	69ba      	ldr	r2, [r7, #24]
 800d610:	693b      	ldr	r3, [r7, #16]
 800d612:	429a      	cmp	r2, r3
 800d614:	d3eb      	bcc.n	800d5ee <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800d616:	2300      	movs	r3, #0
}
 800d618:	4618      	mov	r0, r3
 800d61a:	3724      	adds	r7, #36	; 0x24
 800d61c:	46bd      	mov	sp, r7
 800d61e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d622:	4770      	bx	lr

0800d624 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800d624:	b480      	push	{r7}
 800d626:	b089      	sub	sp, #36	; 0x24
 800d628:	af00      	add	r7, sp, #0
 800d62a:	60f8      	str	r0, [r7, #12]
 800d62c:	60b9      	str	r1, [r7, #8]
 800d62e:	4613      	mov	r3, r2
 800d630:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d632:	68fb      	ldr	r3, [r7, #12]
 800d634:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 800d636:	68bb      	ldr	r3, [r7, #8]
 800d638:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 800d63a:	88fb      	ldrh	r3, [r7, #6]
 800d63c:	3303      	adds	r3, #3
 800d63e:	089b      	lsrs	r3, r3, #2
 800d640:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 800d642:	2300      	movs	r3, #0
 800d644:	61bb      	str	r3, [r7, #24]
 800d646:	e00b      	b.n	800d660 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800d648:	697b      	ldr	r3, [r7, #20]
 800d64a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d64e:	681a      	ldr	r2, [r3, #0]
 800d650:	69fb      	ldr	r3, [r7, #28]
 800d652:	601a      	str	r2, [r3, #0]
    pDest++;
 800d654:	69fb      	ldr	r3, [r7, #28]
 800d656:	3304      	adds	r3, #4
 800d658:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800d65a:	69bb      	ldr	r3, [r7, #24]
 800d65c:	3301      	adds	r3, #1
 800d65e:	61bb      	str	r3, [r7, #24]
 800d660:	69ba      	ldr	r2, [r7, #24]
 800d662:	693b      	ldr	r3, [r7, #16]
 800d664:	429a      	cmp	r2, r3
 800d666:	d3ef      	bcc.n	800d648 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 800d668:	69fb      	ldr	r3, [r7, #28]
}
 800d66a:	4618      	mov	r0, r3
 800d66c:	3724      	adds	r7, #36	; 0x24
 800d66e:	46bd      	mov	sp, r7
 800d670:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d674:	4770      	bx	lr

0800d676 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800d676:	b480      	push	{r7}
 800d678:	b085      	sub	sp, #20
 800d67a:	af00      	add	r7, sp, #0
 800d67c:	6078      	str	r0, [r7, #4]
 800d67e:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d680:	687b      	ldr	r3, [r7, #4]
 800d682:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800d684:	683b      	ldr	r3, [r7, #0]
 800d686:	781b      	ldrb	r3, [r3, #0]
 800d688:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800d68a:	683b      	ldr	r3, [r7, #0]
 800d68c:	785b      	ldrb	r3, [r3, #1]
 800d68e:	2b01      	cmp	r3, #1
 800d690:	d12c      	bne.n	800d6ec <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800d692:	68bb      	ldr	r3, [r7, #8]
 800d694:	015a      	lsls	r2, r3, #5
 800d696:	68fb      	ldr	r3, [r7, #12]
 800d698:	4413      	add	r3, r2
 800d69a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d69e:	681b      	ldr	r3, [r3, #0]
 800d6a0:	2b00      	cmp	r3, #0
 800d6a2:	db12      	blt.n	800d6ca <USB_EPSetStall+0x54>
 800d6a4:	68bb      	ldr	r3, [r7, #8]
 800d6a6:	2b00      	cmp	r3, #0
 800d6a8:	d00f      	beq.n	800d6ca <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800d6aa:	68bb      	ldr	r3, [r7, #8]
 800d6ac:	015a      	lsls	r2, r3, #5
 800d6ae:	68fb      	ldr	r3, [r7, #12]
 800d6b0:	4413      	add	r3, r2
 800d6b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d6b6:	681b      	ldr	r3, [r3, #0]
 800d6b8:	68ba      	ldr	r2, [r7, #8]
 800d6ba:	0151      	lsls	r1, r2, #5
 800d6bc:	68fa      	ldr	r2, [r7, #12]
 800d6be:	440a      	add	r2, r1
 800d6c0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d6c4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800d6c8:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800d6ca:	68bb      	ldr	r3, [r7, #8]
 800d6cc:	015a      	lsls	r2, r3, #5
 800d6ce:	68fb      	ldr	r3, [r7, #12]
 800d6d0:	4413      	add	r3, r2
 800d6d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d6d6:	681b      	ldr	r3, [r3, #0]
 800d6d8:	68ba      	ldr	r2, [r7, #8]
 800d6da:	0151      	lsls	r1, r2, #5
 800d6dc:	68fa      	ldr	r2, [r7, #12]
 800d6de:	440a      	add	r2, r1
 800d6e0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d6e4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800d6e8:	6013      	str	r3, [r2, #0]
 800d6ea:	e02b      	b.n	800d744 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800d6ec:	68bb      	ldr	r3, [r7, #8]
 800d6ee:	015a      	lsls	r2, r3, #5
 800d6f0:	68fb      	ldr	r3, [r7, #12]
 800d6f2:	4413      	add	r3, r2
 800d6f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d6f8:	681b      	ldr	r3, [r3, #0]
 800d6fa:	2b00      	cmp	r3, #0
 800d6fc:	db12      	blt.n	800d724 <USB_EPSetStall+0xae>
 800d6fe:	68bb      	ldr	r3, [r7, #8]
 800d700:	2b00      	cmp	r3, #0
 800d702:	d00f      	beq.n	800d724 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800d704:	68bb      	ldr	r3, [r7, #8]
 800d706:	015a      	lsls	r2, r3, #5
 800d708:	68fb      	ldr	r3, [r7, #12]
 800d70a:	4413      	add	r3, r2
 800d70c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d710:	681b      	ldr	r3, [r3, #0]
 800d712:	68ba      	ldr	r2, [r7, #8]
 800d714:	0151      	lsls	r1, r2, #5
 800d716:	68fa      	ldr	r2, [r7, #12]
 800d718:	440a      	add	r2, r1
 800d71a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d71e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800d722:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800d724:	68bb      	ldr	r3, [r7, #8]
 800d726:	015a      	lsls	r2, r3, #5
 800d728:	68fb      	ldr	r3, [r7, #12]
 800d72a:	4413      	add	r3, r2
 800d72c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d730:	681b      	ldr	r3, [r3, #0]
 800d732:	68ba      	ldr	r2, [r7, #8]
 800d734:	0151      	lsls	r1, r2, #5
 800d736:	68fa      	ldr	r2, [r7, #12]
 800d738:	440a      	add	r2, r1
 800d73a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d73e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800d742:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800d744:	2300      	movs	r3, #0
}
 800d746:	4618      	mov	r0, r3
 800d748:	3714      	adds	r7, #20
 800d74a:	46bd      	mov	sp, r7
 800d74c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d750:	4770      	bx	lr

0800d752 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800d752:	b480      	push	{r7}
 800d754:	b085      	sub	sp, #20
 800d756:	af00      	add	r7, sp, #0
 800d758:	6078      	str	r0, [r7, #4]
 800d75a:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d75c:	687b      	ldr	r3, [r7, #4]
 800d75e:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800d760:	683b      	ldr	r3, [r7, #0]
 800d762:	781b      	ldrb	r3, [r3, #0]
 800d764:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800d766:	683b      	ldr	r3, [r7, #0]
 800d768:	785b      	ldrb	r3, [r3, #1]
 800d76a:	2b01      	cmp	r3, #1
 800d76c:	d128      	bne.n	800d7c0 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800d76e:	68bb      	ldr	r3, [r7, #8]
 800d770:	015a      	lsls	r2, r3, #5
 800d772:	68fb      	ldr	r3, [r7, #12]
 800d774:	4413      	add	r3, r2
 800d776:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d77a:	681b      	ldr	r3, [r3, #0]
 800d77c:	68ba      	ldr	r2, [r7, #8]
 800d77e:	0151      	lsls	r1, r2, #5
 800d780:	68fa      	ldr	r2, [r7, #12]
 800d782:	440a      	add	r2, r1
 800d784:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d788:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800d78c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800d78e:	683b      	ldr	r3, [r7, #0]
 800d790:	78db      	ldrb	r3, [r3, #3]
 800d792:	2b03      	cmp	r3, #3
 800d794:	d003      	beq.n	800d79e <USB_EPClearStall+0x4c>
 800d796:	683b      	ldr	r3, [r7, #0]
 800d798:	78db      	ldrb	r3, [r3, #3]
 800d79a:	2b02      	cmp	r3, #2
 800d79c:	d138      	bne.n	800d810 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800d79e:	68bb      	ldr	r3, [r7, #8]
 800d7a0:	015a      	lsls	r2, r3, #5
 800d7a2:	68fb      	ldr	r3, [r7, #12]
 800d7a4:	4413      	add	r3, r2
 800d7a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d7aa:	681b      	ldr	r3, [r3, #0]
 800d7ac:	68ba      	ldr	r2, [r7, #8]
 800d7ae:	0151      	lsls	r1, r2, #5
 800d7b0:	68fa      	ldr	r2, [r7, #12]
 800d7b2:	440a      	add	r2, r1
 800d7b4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d7b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d7bc:	6013      	str	r3, [r2, #0]
 800d7be:	e027      	b.n	800d810 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800d7c0:	68bb      	ldr	r3, [r7, #8]
 800d7c2:	015a      	lsls	r2, r3, #5
 800d7c4:	68fb      	ldr	r3, [r7, #12]
 800d7c6:	4413      	add	r3, r2
 800d7c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d7cc:	681b      	ldr	r3, [r3, #0]
 800d7ce:	68ba      	ldr	r2, [r7, #8]
 800d7d0:	0151      	lsls	r1, r2, #5
 800d7d2:	68fa      	ldr	r2, [r7, #12]
 800d7d4:	440a      	add	r2, r1
 800d7d6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d7da:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800d7de:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800d7e0:	683b      	ldr	r3, [r7, #0]
 800d7e2:	78db      	ldrb	r3, [r3, #3]
 800d7e4:	2b03      	cmp	r3, #3
 800d7e6:	d003      	beq.n	800d7f0 <USB_EPClearStall+0x9e>
 800d7e8:	683b      	ldr	r3, [r7, #0]
 800d7ea:	78db      	ldrb	r3, [r3, #3]
 800d7ec:	2b02      	cmp	r3, #2
 800d7ee:	d10f      	bne.n	800d810 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800d7f0:	68bb      	ldr	r3, [r7, #8]
 800d7f2:	015a      	lsls	r2, r3, #5
 800d7f4:	68fb      	ldr	r3, [r7, #12]
 800d7f6:	4413      	add	r3, r2
 800d7f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d7fc:	681b      	ldr	r3, [r3, #0]
 800d7fe:	68ba      	ldr	r2, [r7, #8]
 800d800:	0151      	lsls	r1, r2, #5
 800d802:	68fa      	ldr	r2, [r7, #12]
 800d804:	440a      	add	r2, r1
 800d806:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d80a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d80e:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800d810:	2300      	movs	r3, #0
}
 800d812:	4618      	mov	r0, r3
 800d814:	3714      	adds	r7, #20
 800d816:	46bd      	mov	sp, r7
 800d818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d81c:	4770      	bx	lr

0800d81e <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800d81e:	b480      	push	{r7}
 800d820:	b085      	sub	sp, #20
 800d822:	af00      	add	r7, sp, #0
 800d824:	6078      	str	r0, [r7, #4]
 800d826:	460b      	mov	r3, r1
 800d828:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d82a:	687b      	ldr	r3, [r7, #4]
 800d82c:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800d82e:	68fb      	ldr	r3, [r7, #12]
 800d830:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d834:	681b      	ldr	r3, [r3, #0]
 800d836:	68fa      	ldr	r2, [r7, #12]
 800d838:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800d83c:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800d840:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800d842:	68fb      	ldr	r3, [r7, #12]
 800d844:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d848:	681a      	ldr	r2, [r3, #0]
 800d84a:	78fb      	ldrb	r3, [r7, #3]
 800d84c:	011b      	lsls	r3, r3, #4
 800d84e:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800d852:	68f9      	ldr	r1, [r7, #12]
 800d854:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800d858:	4313      	orrs	r3, r2
 800d85a:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800d85c:	2300      	movs	r3, #0
}
 800d85e:	4618      	mov	r0, r3
 800d860:	3714      	adds	r7, #20
 800d862:	46bd      	mov	sp, r7
 800d864:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d868:	4770      	bx	lr

0800d86a <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800d86a:	b580      	push	{r7, lr}
 800d86c:	b084      	sub	sp, #16
 800d86e:	af00      	add	r7, sp, #0
 800d870:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d872:	687b      	ldr	r3, [r7, #4]
 800d874:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800d876:	68fb      	ldr	r3, [r7, #12]
 800d878:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d87c:	685b      	ldr	r3, [r3, #4]
 800d87e:	68fa      	ldr	r2, [r7, #12]
 800d880:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800d884:	f023 0302 	bic.w	r3, r3, #2
 800d888:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 800d88a:	2003      	movs	r0, #3
 800d88c:	f7f7 fcf0 	bl	8005270 <HAL_Delay>

  return HAL_OK;
 800d890:	2300      	movs	r3, #0
}
 800d892:	4618      	mov	r0, r3
 800d894:	3710      	adds	r7, #16
 800d896:	46bd      	mov	sp, r7
 800d898:	bd80      	pop	{r7, pc}

0800d89a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800d89a:	b580      	push	{r7, lr}
 800d89c:	b084      	sub	sp, #16
 800d89e:	af00      	add	r7, sp, #0
 800d8a0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d8a2:	687b      	ldr	r3, [r7, #4]
 800d8a4:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800d8a6:	68fb      	ldr	r3, [r7, #12]
 800d8a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d8ac:	685b      	ldr	r3, [r3, #4]
 800d8ae:	68fa      	ldr	r2, [r7, #12]
 800d8b0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800d8b4:	f043 0302 	orr.w	r3, r3, #2
 800d8b8:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 800d8ba:	2003      	movs	r0, #3
 800d8bc:	f7f7 fcd8 	bl	8005270 <HAL_Delay>

  return HAL_OK;
 800d8c0:	2300      	movs	r3, #0
}
 800d8c2:	4618      	mov	r0, r3
 800d8c4:	3710      	adds	r7, #16
 800d8c6:	46bd      	mov	sp, r7
 800d8c8:	bd80      	pop	{r7, pc}

0800d8ca <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800d8ca:	b480      	push	{r7}
 800d8cc:	b085      	sub	sp, #20
 800d8ce:	af00      	add	r7, sp, #0
 800d8d0:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800d8d2:	687b      	ldr	r3, [r7, #4]
 800d8d4:	695b      	ldr	r3, [r3, #20]
 800d8d6:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800d8d8:	687b      	ldr	r3, [r7, #4]
 800d8da:	699b      	ldr	r3, [r3, #24]
 800d8dc:	68fa      	ldr	r2, [r7, #12]
 800d8de:	4013      	ands	r3, r2
 800d8e0:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800d8e2:	68fb      	ldr	r3, [r7, #12]
}
 800d8e4:	4618      	mov	r0, r3
 800d8e6:	3714      	adds	r7, #20
 800d8e8:	46bd      	mov	sp, r7
 800d8ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8ee:	4770      	bx	lr

0800d8f0 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800d8f0:	b480      	push	{r7}
 800d8f2:	b085      	sub	sp, #20
 800d8f4:	af00      	add	r7, sp, #0
 800d8f6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d8f8:	687b      	ldr	r3, [r7, #4]
 800d8fa:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800d8fc:	68fb      	ldr	r3, [r7, #12]
 800d8fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d902:	699b      	ldr	r3, [r3, #24]
 800d904:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800d906:	68fb      	ldr	r3, [r7, #12]
 800d908:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d90c:	69db      	ldr	r3, [r3, #28]
 800d90e:	68ba      	ldr	r2, [r7, #8]
 800d910:	4013      	ands	r3, r2
 800d912:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800d914:	68bb      	ldr	r3, [r7, #8]
 800d916:	0c1b      	lsrs	r3, r3, #16
}
 800d918:	4618      	mov	r0, r3
 800d91a:	3714      	adds	r7, #20
 800d91c:	46bd      	mov	sp, r7
 800d91e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d922:	4770      	bx	lr

0800d924 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800d924:	b480      	push	{r7}
 800d926:	b085      	sub	sp, #20
 800d928:	af00      	add	r7, sp, #0
 800d92a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d92c:	687b      	ldr	r3, [r7, #4]
 800d92e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800d930:	68fb      	ldr	r3, [r7, #12]
 800d932:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d936:	699b      	ldr	r3, [r3, #24]
 800d938:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800d93a:	68fb      	ldr	r3, [r7, #12]
 800d93c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d940:	69db      	ldr	r3, [r3, #28]
 800d942:	68ba      	ldr	r2, [r7, #8]
 800d944:	4013      	ands	r3, r2
 800d946:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800d948:	68bb      	ldr	r3, [r7, #8]
 800d94a:	b29b      	uxth	r3, r3
}
 800d94c:	4618      	mov	r0, r3
 800d94e:	3714      	adds	r7, #20
 800d950:	46bd      	mov	sp, r7
 800d952:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d956:	4770      	bx	lr

0800d958 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800d958:	b480      	push	{r7}
 800d95a:	b085      	sub	sp, #20
 800d95c:	af00      	add	r7, sp, #0
 800d95e:	6078      	str	r0, [r7, #4]
 800d960:	460b      	mov	r3, r1
 800d962:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d964:	687b      	ldr	r3, [r7, #4]
 800d966:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800d968:	78fb      	ldrb	r3, [r7, #3]
 800d96a:	015a      	lsls	r2, r3, #5
 800d96c:	68fb      	ldr	r3, [r7, #12]
 800d96e:	4413      	add	r3, r2
 800d970:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d974:	689b      	ldr	r3, [r3, #8]
 800d976:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800d978:	68fb      	ldr	r3, [r7, #12]
 800d97a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d97e:	695b      	ldr	r3, [r3, #20]
 800d980:	68ba      	ldr	r2, [r7, #8]
 800d982:	4013      	ands	r3, r2
 800d984:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800d986:	68bb      	ldr	r3, [r7, #8]
}
 800d988:	4618      	mov	r0, r3
 800d98a:	3714      	adds	r7, #20
 800d98c:	46bd      	mov	sp, r7
 800d98e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d992:	4770      	bx	lr

0800d994 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800d994:	b480      	push	{r7}
 800d996:	b087      	sub	sp, #28
 800d998:	af00      	add	r7, sp, #0
 800d99a:	6078      	str	r0, [r7, #4]
 800d99c:	460b      	mov	r3, r1
 800d99e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d9a0:	687b      	ldr	r3, [r7, #4]
 800d9a2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 800d9a4:	697b      	ldr	r3, [r7, #20]
 800d9a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d9aa:	691b      	ldr	r3, [r3, #16]
 800d9ac:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800d9ae:	697b      	ldr	r3, [r7, #20]
 800d9b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d9b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d9b6:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800d9b8:	78fb      	ldrb	r3, [r7, #3]
 800d9ba:	f003 030f 	and.w	r3, r3, #15
 800d9be:	68fa      	ldr	r2, [r7, #12]
 800d9c0:	fa22 f303 	lsr.w	r3, r2, r3
 800d9c4:	01db      	lsls	r3, r3, #7
 800d9c6:	b2db      	uxtb	r3, r3
 800d9c8:	693a      	ldr	r2, [r7, #16]
 800d9ca:	4313      	orrs	r3, r2
 800d9cc:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800d9ce:	78fb      	ldrb	r3, [r7, #3]
 800d9d0:	015a      	lsls	r2, r3, #5
 800d9d2:	697b      	ldr	r3, [r7, #20]
 800d9d4:	4413      	add	r3, r2
 800d9d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d9da:	689b      	ldr	r3, [r3, #8]
 800d9dc:	693a      	ldr	r2, [r7, #16]
 800d9de:	4013      	ands	r3, r2
 800d9e0:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800d9e2:	68bb      	ldr	r3, [r7, #8]
}
 800d9e4:	4618      	mov	r0, r3
 800d9e6:	371c      	adds	r7, #28
 800d9e8:	46bd      	mov	sp, r7
 800d9ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9ee:	4770      	bx	lr

0800d9f0 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800d9f0:	b480      	push	{r7}
 800d9f2:	b083      	sub	sp, #12
 800d9f4:	af00      	add	r7, sp, #0
 800d9f6:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800d9f8:	687b      	ldr	r3, [r7, #4]
 800d9fa:	695b      	ldr	r3, [r3, #20]
 800d9fc:	f003 0301 	and.w	r3, r3, #1
}
 800da00:	4618      	mov	r0, r3
 800da02:	370c      	adds	r7, #12
 800da04:	46bd      	mov	sp, r7
 800da06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da0a:	4770      	bx	lr

0800da0c <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800da0c:	b480      	push	{r7}
 800da0e:	b085      	sub	sp, #20
 800da10:	af00      	add	r7, sp, #0
 800da12:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800da14:	687b      	ldr	r3, [r7, #4]
 800da16:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP based on the enumeration speed */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800da18:	68fb      	ldr	r3, [r7, #12]
 800da1a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800da1e:	681b      	ldr	r3, [r3, #0]
 800da20:	68fa      	ldr	r2, [r7, #12]
 800da22:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800da26:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800da2a:	f023 0307 	bic.w	r3, r3, #7
 800da2e:	6013      	str	r3, [r2, #0]

  if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_LS_PHY_6MHZ)
 800da30:	68fb      	ldr	r3, [r7, #12]
 800da32:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800da36:	689b      	ldr	r3, [r3, #8]
 800da38:	f003 0306 	and.w	r3, r3, #6
 800da3c:	2b04      	cmp	r3, #4
 800da3e:	d109      	bne.n	800da54 <USB_ActivateSetup+0x48>
  {
    USBx_INEP(0U)->DIEPCTL |= 3U;
 800da40:	68fb      	ldr	r3, [r7, #12]
 800da42:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800da46:	681b      	ldr	r3, [r3, #0]
 800da48:	68fa      	ldr	r2, [r7, #12]
 800da4a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800da4e:	f043 0303 	orr.w	r3, r3, #3
 800da52:	6013      	str	r3, [r2, #0]
  }
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800da54:	68fb      	ldr	r3, [r7, #12]
 800da56:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800da5a:	685b      	ldr	r3, [r3, #4]
 800da5c:	68fa      	ldr	r2, [r7, #12]
 800da5e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800da62:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800da66:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800da68:	2300      	movs	r3, #0
}
 800da6a:	4618      	mov	r0, r3
 800da6c:	3714      	adds	r7, #20
 800da6e:	46bd      	mov	sp, r7
 800da70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da74:	4770      	bx	lr
	...

0800da78 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800da78:	b480      	push	{r7}
 800da7a:	b087      	sub	sp, #28
 800da7c:	af00      	add	r7, sp, #0
 800da7e:	60f8      	str	r0, [r7, #12]
 800da80:	460b      	mov	r3, r1
 800da82:	607a      	str	r2, [r7, #4]
 800da84:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800da86:	68fb      	ldr	r3, [r7, #12]
 800da88:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800da8a:	68fb      	ldr	r3, [r7, #12]
 800da8c:	333c      	adds	r3, #60	; 0x3c
 800da8e:	3304      	adds	r3, #4
 800da90:	681b      	ldr	r3, [r3, #0]
 800da92:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800da94:	693b      	ldr	r3, [r7, #16]
 800da96:	4a26      	ldr	r2, [pc, #152]	; (800db30 <USB_EP0_OutStart+0xb8>)
 800da98:	4293      	cmp	r3, r2
 800da9a:	d90a      	bls.n	800dab2 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800da9c:	697b      	ldr	r3, [r7, #20]
 800da9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800daa2:	681b      	ldr	r3, [r3, #0]
 800daa4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800daa8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800daac:	d101      	bne.n	800dab2 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800daae:	2300      	movs	r3, #0
 800dab0:	e037      	b.n	800db22 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800dab2:	697b      	ldr	r3, [r7, #20]
 800dab4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dab8:	461a      	mov	r2, r3
 800daba:	2300      	movs	r3, #0
 800dabc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800dabe:	697b      	ldr	r3, [r7, #20]
 800dac0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dac4:	691b      	ldr	r3, [r3, #16]
 800dac6:	697a      	ldr	r2, [r7, #20]
 800dac8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800dacc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800dad0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800dad2:	697b      	ldr	r3, [r7, #20]
 800dad4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dad8:	691b      	ldr	r3, [r3, #16]
 800dada:	697a      	ldr	r2, [r7, #20]
 800dadc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800dae0:	f043 0318 	orr.w	r3, r3, #24
 800dae4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800dae6:	697b      	ldr	r3, [r7, #20]
 800dae8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800daec:	691b      	ldr	r3, [r3, #16]
 800daee:	697a      	ldr	r2, [r7, #20]
 800daf0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800daf4:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800daf8:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800dafa:	7afb      	ldrb	r3, [r7, #11]
 800dafc:	2b01      	cmp	r3, #1
 800dafe:	d10f      	bne.n	800db20 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800db00:	697b      	ldr	r3, [r7, #20]
 800db02:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800db06:	461a      	mov	r2, r3
 800db08:	687b      	ldr	r3, [r7, #4]
 800db0a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800db0c:	697b      	ldr	r3, [r7, #20]
 800db0e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800db12:	681b      	ldr	r3, [r3, #0]
 800db14:	697a      	ldr	r2, [r7, #20]
 800db16:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800db1a:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800db1e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800db20:	2300      	movs	r3, #0
}
 800db22:	4618      	mov	r0, r3
 800db24:	371c      	adds	r7, #28
 800db26:	46bd      	mov	sp, r7
 800db28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db2c:	4770      	bx	lr
 800db2e:	bf00      	nop
 800db30:	4f54300a 	.word	0x4f54300a

0800db34 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800db34:	b480      	push	{r7}
 800db36:	b085      	sub	sp, #20
 800db38:	af00      	add	r7, sp, #0
 800db3a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800db3c:	2300      	movs	r3, #0
 800db3e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800db40:	68fb      	ldr	r3, [r7, #12]
 800db42:	3301      	adds	r3, #1
 800db44:	60fb      	str	r3, [r7, #12]
 800db46:	68fb      	ldr	r3, [r7, #12]
 800db48:	4a13      	ldr	r2, [pc, #76]	; (800db98 <USB_CoreReset+0x64>)
 800db4a:	4293      	cmp	r3, r2
 800db4c:	d901      	bls.n	800db52 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800db4e:	2303      	movs	r3, #3
 800db50:	e01b      	b.n	800db8a <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800db52:	687b      	ldr	r3, [r7, #4]
 800db54:	691b      	ldr	r3, [r3, #16]
 800db56:	2b00      	cmp	r3, #0
 800db58:	daf2      	bge.n	800db40 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800db5a:	2300      	movs	r3, #0
 800db5c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800db5e:	687b      	ldr	r3, [r7, #4]
 800db60:	691b      	ldr	r3, [r3, #16]
 800db62:	f043 0201 	orr.w	r2, r3, #1
 800db66:	687b      	ldr	r3, [r7, #4]
 800db68:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800db6a:	68fb      	ldr	r3, [r7, #12]
 800db6c:	3301      	adds	r3, #1
 800db6e:	60fb      	str	r3, [r7, #12]
 800db70:	68fb      	ldr	r3, [r7, #12]
 800db72:	4a09      	ldr	r2, [pc, #36]	; (800db98 <USB_CoreReset+0x64>)
 800db74:	4293      	cmp	r3, r2
 800db76:	d901      	bls.n	800db7c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800db78:	2303      	movs	r3, #3
 800db7a:	e006      	b.n	800db8a <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800db7c:	687b      	ldr	r3, [r7, #4]
 800db7e:	691b      	ldr	r3, [r3, #16]
 800db80:	f003 0301 	and.w	r3, r3, #1
 800db84:	2b01      	cmp	r3, #1
 800db86:	d0f0      	beq.n	800db6a <USB_CoreReset+0x36>

  return HAL_OK;
 800db88:	2300      	movs	r3, #0
}
 800db8a:	4618      	mov	r0, r3
 800db8c:	3714      	adds	r7, #20
 800db8e:	46bd      	mov	sp, r7
 800db90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db94:	4770      	bx	lr
 800db96:	bf00      	nop
 800db98:	00030d40 	.word	0x00030d40

0800db9c <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */    

void MX_FATFS_Init(void) 
{
 800db9c:	b580      	push	{r7, lr}
 800db9e:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800dba0:	4904      	ldr	r1, [pc, #16]	; (800dbb4 <MX_FATFS_Init+0x18>)
 800dba2:	4805      	ldr	r0, [pc, #20]	; (800dbb8 <MX_FATFS_Init+0x1c>)
 800dba4:	f001 fe36 	bl	800f814 <FATFS_LinkDriver>
 800dba8:	4603      	mov	r3, r0
 800dbaa:	461a      	mov	r2, r3
 800dbac:	4b03      	ldr	r3, [pc, #12]	; (800dbbc <MX_FATFS_Init+0x20>)
 800dbae:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */     
  /* USER CODE END Init */
}
 800dbb0:	bf00      	nop
 800dbb2:	bd80      	pop	{r7, pc}
 800dbb4:	20000d38 	.word	0x20000d38
 800dbb8:	08015cf4 	.word	0x08015cf4
 800dbbc:	20000d34 	.word	0x20000d34

0800dbc0 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800dbc0:	b580      	push	{r7, lr}
 800dbc2:	b082      	sub	sp, #8
 800dbc4:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800dbc6:	2300      	movs	r3, #0
 800dbc8:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800dbca:	f000 f871 	bl	800dcb0 <BSP_SD_IsDetected>
 800dbce:	4603      	mov	r3, r0
 800dbd0:	2b01      	cmp	r3, #1
 800dbd2:	d001      	beq.n	800dbd8 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 800dbd4:	2301      	movs	r3, #1
 800dbd6:	e012      	b.n	800dbfe <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 800dbd8:	480b      	ldr	r0, [pc, #44]	; (800dc08 <BSP_SD_Init+0x48>)
 800dbda:	f7fb f946 	bl	8008e6a <HAL_SD_Init>
 800dbde:	4603      	mov	r3, r0
 800dbe0:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800dbe2:	79fb      	ldrb	r3, [r7, #7]
 800dbe4:	2b00      	cmp	r3, #0
 800dbe6:	d109      	bne.n	800dbfc <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 800dbe8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800dbec:	4806      	ldr	r0, [pc, #24]	; (800dc08 <BSP_SD_Init+0x48>)
 800dbee:	f7fb ff25 	bl	8009a3c <HAL_SD_ConfigWideBusOperation>
 800dbf2:	4603      	mov	r3, r0
 800dbf4:	2b00      	cmp	r3, #0
 800dbf6:	d001      	beq.n	800dbfc <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 800dbf8:	2301      	movs	r3, #1
 800dbfa:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 800dbfc:	79fb      	ldrb	r3, [r7, #7]
}
 800dbfe:	4618      	mov	r0, r3
 800dc00:	3708      	adds	r7, #8
 800dc02:	46bd      	mov	sp, r7
 800dc04:	bd80      	pop	{r7, pc}
 800dc06:	bf00      	nop
 800dc08:	20000b54 	.word	0x20000b54

0800dc0c <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read 
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 800dc0c:	b580      	push	{r7, lr}
 800dc0e:	b086      	sub	sp, #24
 800dc10:	af00      	add	r7, sp, #0
 800dc12:	60f8      	str	r0, [r7, #12]
 800dc14:	60b9      	str	r1, [r7, #8]
 800dc16:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800dc18:	2300      	movs	r3, #0
 800dc1a:	75fb      	strb	r3, [r7, #23]
  
  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 800dc1c:	687b      	ldr	r3, [r7, #4]
 800dc1e:	68ba      	ldr	r2, [r7, #8]
 800dc20:	68f9      	ldr	r1, [r7, #12]
 800dc22:	4806      	ldr	r0, [pc, #24]	; (800dc3c <BSP_SD_ReadBlocks_DMA+0x30>)
 800dc24:	f7fb f9b2 	bl	8008f8c <HAL_SD_ReadBlocks_DMA>
 800dc28:	4603      	mov	r3, r0
 800dc2a:	2b00      	cmp	r3, #0
 800dc2c:	d001      	beq.n	800dc32 <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800dc2e:	2301      	movs	r3, #1
 800dc30:	75fb      	strb	r3, [r7, #23]
  }
  
  return sd_state; 
 800dc32:	7dfb      	ldrb	r3, [r7, #23]
}
 800dc34:	4618      	mov	r0, r3
 800dc36:	3718      	adds	r7, #24
 800dc38:	46bd      	mov	sp, r7
 800dc3a:	bd80      	pop	{r7, pc}
 800dc3c:	20000b54 	.word	0x20000b54

0800dc40 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write 
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 800dc40:	b580      	push	{r7, lr}
 800dc42:	b086      	sub	sp, #24
 800dc44:	af00      	add	r7, sp, #0
 800dc46:	60f8      	str	r0, [r7, #12]
 800dc48:	60b9      	str	r1, [r7, #8]
 800dc4a:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800dc4c:	2300      	movs	r3, #0
 800dc4e:	75fb      	strb	r3, [r7, #23]
  
  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 800dc50:	687b      	ldr	r3, [r7, #4]
 800dc52:	68ba      	ldr	r2, [r7, #8]
 800dc54:	68f9      	ldr	r1, [r7, #12]
 800dc56:	4806      	ldr	r0, [pc, #24]	; (800dc70 <BSP_SD_WriteBlocks_DMA+0x30>)
 800dc58:	f7fb fa82 	bl	8009160 <HAL_SD_WriteBlocks_DMA>
 800dc5c:	4603      	mov	r3, r0
 800dc5e:	2b00      	cmp	r3, #0
 800dc60:	d001      	beq.n	800dc66 <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800dc62:	2301      	movs	r3, #1
 800dc64:	75fb      	strb	r3, [r7, #23]
  }
  
  return sd_state; 
 800dc66:	7dfb      	ldrb	r3, [r7, #23]
}
 800dc68:	4618      	mov	r0, r3
 800dc6a:	3718      	adds	r7, #24
 800dc6c:	46bd      	mov	sp, r7
 800dc6e:	bd80      	pop	{r7, pc}
 800dc70:	20000b54 	.word	0x20000b54

0800dc74 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800dc74:	b580      	push	{r7, lr}
 800dc76:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800dc78:	4805      	ldr	r0, [pc, #20]	; (800dc90 <BSP_SD_GetCardState+0x1c>)
 800dc7a:	f7fb ff5b 	bl	8009b34 <HAL_SD_GetCardState>
 800dc7e:	4603      	mov	r3, r0
 800dc80:	2b04      	cmp	r3, #4
 800dc82:	bf14      	ite	ne
 800dc84:	2301      	movne	r3, #1
 800dc86:	2300      	moveq	r3, #0
 800dc88:	b2db      	uxtb	r3, r3
}
 800dc8a:	4618      	mov	r0, r3
 800dc8c:	bd80      	pop	{r7, pc}
 800dc8e:	bf00      	nop
 800dc90:	20000b54 	.word	0x20000b54

0800dc94 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None 
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800dc94:	b580      	push	{r7, lr}
 800dc96:	b082      	sub	sp, #8
 800dc98:	af00      	add	r7, sp, #0
 800dc9a:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 800dc9c:	6879      	ldr	r1, [r7, #4]
 800dc9e:	4803      	ldr	r0, [pc, #12]	; (800dcac <BSP_SD_GetCardInfo+0x18>)
 800dca0:	f7fb fea0 	bl	80099e4 <HAL_SD_GetCardInfo>
}
 800dca4:	bf00      	nop
 800dca6:	3708      	adds	r7, #8
 800dca8:	46bd      	mov	sp, r7
 800dcaa:	bd80      	pop	{r7, pc}
 800dcac:	20000b54 	.word	0x20000b54

0800dcb0 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800dcb0:	b580      	push	{r7, lr}
 800dcb2:	b082      	sub	sp, #8
 800dcb4:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800dcb6:	2301      	movs	r3, #1
 800dcb8:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0) 
 800dcba:	f000 f80b 	bl	800dcd4 <BSP_PlatformIsDetected>
 800dcbe:	4603      	mov	r3, r0
 800dcc0:	2b00      	cmp	r3, #0
 800dcc2:	d101      	bne.n	800dcc8 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800dcc4:	2300      	movs	r3, #0
 800dcc6:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800dcc8:	79fb      	ldrb	r3, [r7, #7]
 800dcca:	b2db      	uxtb	r3, r3
}
 800dccc:	4618      	mov	r0, r3
 800dcce:	3708      	adds	r7, #8
 800dcd0:	46bd      	mov	sp, r7
 800dcd2:	bd80      	pop	{r7, pc}

0800dcd4 <BSP_PlatformIsDetected>:
  *
  ******************************************************************************
*/
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800dcd4:	b580      	push	{r7, lr}
 800dcd6:	b082      	sub	sp, #8
 800dcd8:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800dcda:	2301      	movs	r3, #1
 800dcdc:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800dcde:	f44f 7180 	mov.w	r1, #256	; 0x100
 800dce2:	4806      	ldr	r0, [pc, #24]	; (800dcfc <BSP_PlatformIsDetected+0x28>)
 800dce4:	f7f8 f92e 	bl	8005f44 <HAL_GPIO_ReadPin>
 800dce8:	4603      	mov	r3, r0
 800dcea:	2b00      	cmp	r3, #0
 800dcec:	d001      	beq.n	800dcf2 <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 800dcee:	2300      	movs	r3, #0
 800dcf0:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */ 
    return status;
 800dcf2:	79fb      	ldrb	r3, [r7, #7]
}  
 800dcf4:	4618      	mov	r0, r3
 800dcf6:	3708      	adds	r7, #8
 800dcf8:	46bd      	mov	sp, r7
 800dcfa:	bd80      	pop	{r7, pc}
 800dcfc:	40020000 	.word	0x40020000

0800dd00 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 800dd00:	b580      	push	{r7, lr}
 800dd02:	b084      	sub	sp, #16
 800dd04:	af00      	add	r7, sp, #0
 800dd06:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 800dd08:	f7f7 faa6 	bl	8005258 <HAL_GetTick>
 800dd0c:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 800dd0e:	e006      	b.n	800dd1e <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800dd10:	f7ff ffb0 	bl	800dc74 <BSP_SD_GetCardState>
 800dd14:	4603      	mov	r3, r0
 800dd16:	2b00      	cmp	r3, #0
 800dd18:	d101      	bne.n	800dd1e <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 800dd1a:	2300      	movs	r3, #0
 800dd1c:	e009      	b.n	800dd32 <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 800dd1e:	f7f7 fa9b 	bl	8005258 <HAL_GetTick>
 800dd22:	4602      	mov	r2, r0
 800dd24:	68fb      	ldr	r3, [r7, #12]
 800dd26:	1ad3      	subs	r3, r2, r3
 800dd28:	687a      	ldr	r2, [r7, #4]
 800dd2a:	429a      	cmp	r2, r3
 800dd2c:	d8f0      	bhi.n	800dd10 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 800dd2e:	f04f 33ff 	mov.w	r3, #4294967295
}
 800dd32:	4618      	mov	r0, r3
 800dd34:	3710      	adds	r7, #16
 800dd36:	46bd      	mov	sp, r7
 800dd38:	bd80      	pop	{r7, pc}
	...

0800dd3c <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800dd3c:	b580      	push	{r7, lr}
 800dd3e:	b082      	sub	sp, #8
 800dd40:	af00      	add	r7, sp, #0
 800dd42:	4603      	mov	r3, r0
 800dd44:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800dd46:	4b0b      	ldr	r3, [pc, #44]	; (800dd74 <SD_CheckStatus+0x38>)
 800dd48:	2201      	movs	r2, #1
 800dd4a:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800dd4c:	f7ff ff92 	bl	800dc74 <BSP_SD_GetCardState>
 800dd50:	4603      	mov	r3, r0
 800dd52:	2b00      	cmp	r3, #0
 800dd54:	d107      	bne.n	800dd66 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800dd56:	4b07      	ldr	r3, [pc, #28]	; (800dd74 <SD_CheckStatus+0x38>)
 800dd58:	781b      	ldrb	r3, [r3, #0]
 800dd5a:	b2db      	uxtb	r3, r3
 800dd5c:	f023 0301 	bic.w	r3, r3, #1
 800dd60:	b2da      	uxtb	r2, r3
 800dd62:	4b04      	ldr	r3, [pc, #16]	; (800dd74 <SD_CheckStatus+0x38>)
 800dd64:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800dd66:	4b03      	ldr	r3, [pc, #12]	; (800dd74 <SD_CheckStatus+0x38>)
 800dd68:	781b      	ldrb	r3, [r3, #0]
 800dd6a:	b2db      	uxtb	r3, r3
}
 800dd6c:	4618      	mov	r0, r3
 800dd6e:	3708      	adds	r7, #8
 800dd70:	46bd      	mov	sp, r7
 800dd72:	bd80      	pop	{r7, pc}
 800dd74:	2000000d 	.word	0x2000000d

0800dd78 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800dd78:	b580      	push	{r7, lr}
 800dd7a:	b082      	sub	sp, #8
 800dd7c:	af00      	add	r7, sp, #0
 800dd7e:	4603      	mov	r3, r0
 800dd80:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800dd82:	f7ff ff1d 	bl	800dbc0 <BSP_SD_Init>
 800dd86:	4603      	mov	r3, r0
 800dd88:	2b00      	cmp	r3, #0
 800dd8a:	d107      	bne.n	800dd9c <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 800dd8c:	79fb      	ldrb	r3, [r7, #7]
 800dd8e:	4618      	mov	r0, r3
 800dd90:	f7ff ffd4 	bl	800dd3c <SD_CheckStatus>
 800dd94:	4603      	mov	r3, r0
 800dd96:	461a      	mov	r2, r3
 800dd98:	4b04      	ldr	r3, [pc, #16]	; (800ddac <SD_initialize+0x34>)
 800dd9a:	701a      	strb	r2, [r3, #0]
  }

#else
  Stat = SD_CheckStatus(lun);
#endif
  return Stat;
 800dd9c:	4b03      	ldr	r3, [pc, #12]	; (800ddac <SD_initialize+0x34>)
 800dd9e:	781b      	ldrb	r3, [r3, #0]
 800dda0:	b2db      	uxtb	r3, r3
}
 800dda2:	4618      	mov	r0, r3
 800dda4:	3708      	adds	r7, #8
 800dda6:	46bd      	mov	sp, r7
 800dda8:	bd80      	pop	{r7, pc}
 800ddaa:	bf00      	nop
 800ddac:	2000000d 	.word	0x2000000d

0800ddb0 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800ddb0:	b580      	push	{r7, lr}
 800ddb2:	b082      	sub	sp, #8
 800ddb4:	af00      	add	r7, sp, #0
 800ddb6:	4603      	mov	r3, r0
 800ddb8:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800ddba:	79fb      	ldrb	r3, [r7, #7]
 800ddbc:	4618      	mov	r0, r3
 800ddbe:	f7ff ffbd 	bl	800dd3c <SD_CheckStatus>
 800ddc2:	4603      	mov	r3, r0
}
 800ddc4:	4618      	mov	r0, r3
 800ddc6:	3708      	adds	r7, #8
 800ddc8:	46bd      	mov	sp, r7
 800ddca:	bd80      	pop	{r7, pc}

0800ddcc <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
              
DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800ddcc:	b580      	push	{r7, lr}
 800ddce:	b088      	sub	sp, #32
 800ddd0:	af00      	add	r7, sp, #0
 800ddd2:	60b9      	str	r1, [r7, #8]
 800ddd4:	607a      	str	r2, [r7, #4]
 800ddd6:	603b      	str	r3, [r7, #0]
 800ddd8:	4603      	mov	r3, r0
 800ddda:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800dddc:	2301      	movs	r3, #1
 800ddde:	77fb      	strb	r3, [r7, #31]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800dde0:	f247 5030 	movw	r0, #30000	; 0x7530
 800dde4:	f7ff ff8c 	bl	800dd00 <SD_CheckStatusWithTimeout>
 800dde8:	4603      	mov	r3, r0
 800ddea:	2b00      	cmp	r3, #0
 800ddec:	da01      	bge.n	800ddf2 <SD_read+0x26>
  {
    return res;
 800ddee:	7ffb      	ldrb	r3, [r7, #31]
 800ddf0:	e08b      	b.n	800df0a <SD_read+0x13e>
  }

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
 800ddf2:	68bb      	ldr	r3, [r7, #8]
 800ddf4:	f003 0303 	and.w	r3, r3, #3
 800ddf8:	2b00      	cmp	r3, #0
 800ddfa:	f040 8085 	bne.w	800df08 <SD_read+0x13c>
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 800ddfe:	683a      	ldr	r2, [r7, #0]
 800de00:	6879      	ldr	r1, [r7, #4]
 800de02:	68b8      	ldr	r0, [r7, #8]
 800de04:	f7ff ff02 	bl	800dc0c <BSP_SD_ReadBlocks_DMA>
 800de08:	4603      	mov	r3, r0
 800de0a:	2b00      	cmp	r3, #0
 800de0c:	d133      	bne.n	800de76 <SD_read+0xaa>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 800de0e:	4b41      	ldr	r3, [pc, #260]	; (800df14 <SD_read+0x148>)
 800de10:	2200      	movs	r2, #0
 800de12:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 800de14:	f7f7 fa20 	bl	8005258 <HAL_GetTick>
 800de18:	6178      	str	r0, [r7, #20]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800de1a:	bf00      	nop
 800de1c:	4b3d      	ldr	r3, [pc, #244]	; (800df14 <SD_read+0x148>)
 800de1e:	681b      	ldr	r3, [r3, #0]
 800de20:	2b00      	cmp	r3, #0
 800de22:	d108      	bne.n	800de36 <SD_read+0x6a>
 800de24:	f7f7 fa18 	bl	8005258 <HAL_GetTick>
 800de28:	4602      	mov	r2, r0
 800de2a:	697b      	ldr	r3, [r7, #20]
 800de2c:	1ad3      	subs	r3, r2, r3
 800de2e:	f247 522f 	movw	r2, #29999	; 0x752f
 800de32:	4293      	cmp	r3, r2
 800de34:	d9f2      	bls.n	800de1c <SD_read+0x50>
      {
      }
      /* incase of a timeout return error */
      if (ReadStatus == 0)
 800de36:	4b37      	ldr	r3, [pc, #220]	; (800df14 <SD_read+0x148>)
 800de38:	681b      	ldr	r3, [r3, #0]
 800de3a:	2b00      	cmp	r3, #0
 800de3c:	d102      	bne.n	800de44 <SD_read+0x78>
      {
        res = RES_ERROR;
 800de3e:	2301      	movs	r3, #1
 800de40:	77fb      	strb	r3, [r7, #31]
 800de42:	e061      	b.n	800df08 <SD_read+0x13c>
      }
      else
      {
        ReadStatus = 0;
 800de44:	4b33      	ldr	r3, [pc, #204]	; (800df14 <SD_read+0x148>)
 800de46:	2200      	movs	r2, #0
 800de48:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 800de4a:	f7f7 fa05 	bl	8005258 <HAL_GetTick>
 800de4e:	6178      	str	r0, [r7, #20]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800de50:	e007      	b.n	800de62 <SD_read+0x96>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800de52:	f7ff ff0f 	bl	800dc74 <BSP_SD_GetCardState>
 800de56:	4603      	mov	r3, r0
 800de58:	2b00      	cmp	r3, #0
 800de5a:	d102      	bne.n	800de62 <SD_read+0x96>
          {
            res = RES_OK;
 800de5c:	2300      	movs	r3, #0
 800de5e:	77fb      	strb	r3, [r7, #31]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 800de60:	e052      	b.n	800df08 <SD_read+0x13c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800de62:	f7f7 f9f9 	bl	8005258 <HAL_GetTick>
 800de66:	4602      	mov	r2, r0
 800de68:	697b      	ldr	r3, [r7, #20]
 800de6a:	1ad3      	subs	r3, r2, r3
 800de6c:	f247 522f 	movw	r2, #29999	; 0x752f
 800de70:	4293      	cmp	r3, r2
 800de72:	d9ee      	bls.n	800de52 <SD_read+0x86>
 800de74:	e048      	b.n	800df08 <SD_read+0x13c>
#if defined(ENABLE_SCRATCH_BUFFER)
    else {
      /* Slow path, fetch each sector a part and memcpy to destination buffer */
      int i;

      for (i = 0; i < count; i++) {
 800de76:	2300      	movs	r3, #0
 800de78:	61bb      	str	r3, [r7, #24]
 800de7a:	e034      	b.n	800dee6 <SD_read+0x11a>
        ret = BSP_SD_ReadBlocks_DMA((uint32_t*)scratch, (uint32_t)sector++, 1);
 800de7c:	687b      	ldr	r3, [r7, #4]
 800de7e:	1c5a      	adds	r2, r3, #1
 800de80:	607a      	str	r2, [r7, #4]
 800de82:	2201      	movs	r2, #1
 800de84:	4619      	mov	r1, r3
 800de86:	4824      	ldr	r0, [pc, #144]	; (800df18 <SD_read+0x14c>)
 800de88:	f7ff fec0 	bl	800dc0c <BSP_SD_ReadBlocks_DMA>
 800de8c:	4603      	mov	r3, r0
 800de8e:	77bb      	strb	r3, [r7, #30]
        if (ret == MSD_OK) {
 800de90:	7fbb      	ldrb	r3, [r7, #30]
 800de92:	2b00      	cmp	r3, #0
 800de94:	d12c      	bne.n	800def0 <SD_read+0x124>
          /* wait until the read is successful or a timeout occurs */

          ReadStatus = 0;
 800de96:	4b1f      	ldr	r3, [pc, #124]	; (800df14 <SD_read+0x148>)
 800de98:	2200      	movs	r2, #0
 800de9a:	601a      	str	r2, [r3, #0]
          timeout = HAL_GetTick();
 800de9c:	f7f7 f9dc 	bl	8005258 <HAL_GetTick>
 800dea0:	6178      	str	r0, [r7, #20]
          while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800dea2:	bf00      	nop
 800dea4:	4b1b      	ldr	r3, [pc, #108]	; (800df14 <SD_read+0x148>)
 800dea6:	681b      	ldr	r3, [r3, #0]
 800dea8:	2b00      	cmp	r3, #0
 800deaa:	d108      	bne.n	800debe <SD_read+0xf2>
 800deac:	f7f7 f9d4 	bl	8005258 <HAL_GetTick>
 800deb0:	4602      	mov	r2, r0
 800deb2:	697b      	ldr	r3, [r7, #20]
 800deb4:	1ad3      	subs	r3, r2, r3
 800deb6:	f247 522f 	movw	r2, #29999	; 0x752f
 800deba:	4293      	cmp	r3, r2
 800debc:	d9f2      	bls.n	800dea4 <SD_read+0xd8>
          {
          }
          if (ReadStatus == 0)
 800debe:	4b15      	ldr	r3, [pc, #84]	; (800df14 <SD_read+0x148>)
 800dec0:	681b      	ldr	r3, [r3, #0]
 800dec2:	2b00      	cmp	r3, #0
 800dec4:	d016      	beq.n	800def4 <SD_read+0x128>
          *
          * invalidate the scratch buffer before the next read to get the actual data instead of the cached one
          */
          SCB_InvalidateDCache_by_Addr((uint32_t*)scratch, BLOCKSIZE);
#endif
          memcpy(buff, scratch, BLOCKSIZE);
 800dec6:	68bb      	ldr	r3, [r7, #8]
 800dec8:	4a13      	ldr	r2, [pc, #76]	; (800df18 <SD_read+0x14c>)
 800deca:	4618      	mov	r0, r3
 800decc:	4611      	mov	r1, r2
 800dece:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ded2:	461a      	mov	r2, r3
 800ded4:	f002 fa0c 	bl	80102f0 <memcpy>
          buff += BLOCKSIZE;
 800ded8:	68bb      	ldr	r3, [r7, #8]
 800deda:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800dede:	60bb      	str	r3, [r7, #8]
      for (i = 0; i < count; i++) {
 800dee0:	69bb      	ldr	r3, [r7, #24]
 800dee2:	3301      	adds	r3, #1
 800dee4:	61bb      	str	r3, [r7, #24]
 800dee6:	69bb      	ldr	r3, [r7, #24]
 800dee8:	683a      	ldr	r2, [r7, #0]
 800deea:	429a      	cmp	r2, r3
 800deec:	d8c6      	bhi.n	800de7c <SD_read+0xb0>
 800deee:	e002      	b.n	800def6 <SD_read+0x12a>
        }
        else
        {
          break;
 800def0:	bf00      	nop
 800def2:	e000      	b.n	800def6 <SD_read+0x12a>
            break;
 800def4:	bf00      	nop
        }
      }

      if ((i == count) && (ret == MSD_OK))
 800def6:	69bb      	ldr	r3, [r7, #24]
 800def8:	683a      	ldr	r2, [r7, #0]
 800defa:	429a      	cmp	r2, r3
 800defc:	d104      	bne.n	800df08 <SD_read+0x13c>
 800defe:	7fbb      	ldrb	r3, [r7, #30]
 800df00:	2b00      	cmp	r3, #0
 800df02:	d101      	bne.n	800df08 <SD_read+0x13c>
        res = RES_OK;
 800df04:	2300      	movs	r3, #0
 800df06:	77fb      	strb	r3, [r7, #31]
    }
#endif
  }

  return res;
 800df08:	7ffb      	ldrb	r3, [r7, #31]
}
 800df0a:	4618      	mov	r0, r3
 800df0c:	3720      	adds	r7, #32
 800df0e:	46bd      	mov	sp, r7
 800df10:	bd80      	pop	{r7, pc}
 800df12:	bf00      	nop
 800df14:	20000778 	.word	0x20000778
 800df18:	20000574 	.word	0x20000574

0800df1c <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
              
DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800df1c:	b580      	push	{r7, lr}
 800df1e:	b088      	sub	sp, #32
 800df20:	af00      	add	r7, sp, #0
 800df22:	60b9      	str	r1, [r7, #8]
 800df24:	607a      	str	r2, [r7, #4]
 800df26:	603b      	str	r3, [r7, #0]
 800df28:	4603      	mov	r3, r0
 800df2a:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800df2c:	2301      	movs	r3, #1
 800df2e:	77fb      	strb	r3, [r7, #31]
  uint32_t timeout;
  uint8_t ret;
  int i;

   WriteStatus = 0;
 800df30:	4b4c      	ldr	r3, [pc, #304]	; (800e064 <SD_write+0x148>)
 800df32:	2200      	movs	r2, #0
 800df34:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)   
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800df36:	f247 5030 	movw	r0, #30000	; 0x7530
 800df3a:	f7ff fee1 	bl	800dd00 <SD_CheckStatusWithTimeout>
 800df3e:	4603      	mov	r3, r0
 800df40:	2b00      	cmp	r3, #0
 800df42:	da01      	bge.n	800df48 <SD_write+0x2c>
  {
    return res;
 800df44:	7ffb      	ldrb	r3, [r7, #31]
 800df46:	e088      	b.n	800e05a <SD_write+0x13e>
  }

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
 800df48:	68bb      	ldr	r3, [r7, #8]
 800df4a:	f003 0303 	and.w	r3, r3, #3
 800df4e:	2b00      	cmp	r3, #0
 800df50:	f040 8082 	bne.w	800e058 <SD_write+0x13c>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 800df54:	683a      	ldr	r2, [r7, #0]
 800df56:	6879      	ldr	r1, [r7, #4]
 800df58:	68b8      	ldr	r0, [r7, #8]
 800df5a:	f7ff fe71 	bl	800dc40 <BSP_SD_WriteBlocks_DMA>
 800df5e:	4603      	mov	r3, r0
 800df60:	2b00      	cmp	r3, #0
 800df62:	d130      	bne.n	800dfc6 <SD_write+0xaa>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 800df64:	f7f7 f978 	bl	8005258 <HAL_GetTick>
 800df68:	6178      	str	r0, [r7, #20]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800df6a:	bf00      	nop
 800df6c:	4b3d      	ldr	r3, [pc, #244]	; (800e064 <SD_write+0x148>)
 800df6e:	681b      	ldr	r3, [r3, #0]
 800df70:	2b00      	cmp	r3, #0
 800df72:	d108      	bne.n	800df86 <SD_write+0x6a>
 800df74:	f7f7 f970 	bl	8005258 <HAL_GetTick>
 800df78:	4602      	mov	r2, r0
 800df7a:	697b      	ldr	r3, [r7, #20]
 800df7c:	1ad3      	subs	r3, r2, r3
 800df7e:	f247 522f 	movw	r2, #29999	; 0x752f
 800df82:	4293      	cmp	r3, r2
 800df84:	d9f2      	bls.n	800df6c <SD_write+0x50>
      {
      }
      /* incase of a timeout return error */
      if (WriteStatus == 0)
 800df86:	4b37      	ldr	r3, [pc, #220]	; (800e064 <SD_write+0x148>)
 800df88:	681b      	ldr	r3, [r3, #0]
 800df8a:	2b00      	cmp	r3, #0
 800df8c:	d102      	bne.n	800df94 <SD_write+0x78>
      {
        res = RES_ERROR;
 800df8e:	2301      	movs	r3, #1
 800df90:	77fb      	strb	r3, [r7, #31]
 800df92:	e061      	b.n	800e058 <SD_write+0x13c>
      }
      else
      {
        WriteStatus = 0;
 800df94:	4b33      	ldr	r3, [pc, #204]	; (800e064 <SD_write+0x148>)
 800df96:	2200      	movs	r2, #0
 800df98:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 800df9a:	f7f7 f95d 	bl	8005258 <HAL_GetTick>
 800df9e:	6178      	str	r0, [r7, #20]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800dfa0:	e007      	b.n	800dfb2 <SD_write+0x96>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800dfa2:	f7ff fe67 	bl	800dc74 <BSP_SD_GetCardState>
 800dfa6:	4603      	mov	r3, r0
 800dfa8:	2b00      	cmp	r3, #0
 800dfaa:	d102      	bne.n	800dfb2 <SD_write+0x96>
          {
            res = RES_OK;
 800dfac:	2300      	movs	r3, #0
 800dfae:	77fb      	strb	r3, [r7, #31]
            break;
 800dfb0:	e052      	b.n	800e058 <SD_write+0x13c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800dfb2:	f7f7 f951 	bl	8005258 <HAL_GetTick>
 800dfb6:	4602      	mov	r2, r0
 800dfb8:	697b      	ldr	r3, [r7, #20]
 800dfba:	1ad3      	subs	r3, r2, r3
 800dfbc:	f247 522f 	movw	r2, #29999	; 0x752f
 800dfc0:	4293      	cmp	r3, r2
 800dfc2:	d9ee      	bls.n	800dfa2 <SD_write+0x86>
 800dfc4:	e048      	b.n	800e058 <SD_write+0x13c>
      * invalidate the scratch buffer before the next write to get the actual data instead of the cached one
      */
      SCB_InvalidateDCache_by_Addr((uint32_t*)scratch, BLOCKSIZE);
#endif

      for (i = 0; i < count; i++)
 800dfc6:	2300      	movs	r3, #0
 800dfc8:	61bb      	str	r3, [r7, #24]
 800dfca:	e034      	b.n	800e036 <SD_write+0x11a>
      {
        WriteStatus = 0;
 800dfcc:	4b25      	ldr	r3, [pc, #148]	; (800e064 <SD_write+0x148>)
 800dfce:	2200      	movs	r2, #0
 800dfd0:	601a      	str	r2, [r3, #0]
        ret = BSP_SD_WriteBlocks_DMA((uint32_t*)scratch, (uint32_t)sector++, 1);
 800dfd2:	687b      	ldr	r3, [r7, #4]
 800dfd4:	1c5a      	adds	r2, r3, #1
 800dfd6:	607a      	str	r2, [r7, #4]
 800dfd8:	2201      	movs	r2, #1
 800dfda:	4619      	mov	r1, r3
 800dfdc:	4822      	ldr	r0, [pc, #136]	; (800e068 <SD_write+0x14c>)
 800dfde:	f7ff fe2f 	bl	800dc40 <BSP_SD_WriteBlocks_DMA>
 800dfe2:	4603      	mov	r3, r0
 800dfe4:	77bb      	strb	r3, [r7, #30]
        if (ret == MSD_OK) {
 800dfe6:	7fbb      	ldrb	r3, [r7, #30]
 800dfe8:	2b00      	cmp	r3, #0
 800dfea:	d129      	bne.n	800e040 <SD_write+0x124>
          /* wait for a message from the queue or a timeout */
          timeout = HAL_GetTick();
 800dfec:	f7f7 f934 	bl	8005258 <HAL_GetTick>
 800dff0:	6178      	str	r0, [r7, #20]
          while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800dff2:	bf00      	nop
 800dff4:	4b1b      	ldr	r3, [pc, #108]	; (800e064 <SD_write+0x148>)
 800dff6:	681b      	ldr	r3, [r3, #0]
 800dff8:	2b00      	cmp	r3, #0
 800dffa:	d108      	bne.n	800e00e <SD_write+0xf2>
 800dffc:	f7f7 f92c 	bl	8005258 <HAL_GetTick>
 800e000:	4602      	mov	r2, r0
 800e002:	697b      	ldr	r3, [r7, #20]
 800e004:	1ad3      	subs	r3, r2, r3
 800e006:	f247 522f 	movw	r2, #29999	; 0x752f
 800e00a:	4293      	cmp	r3, r2
 800e00c:	d9f2      	bls.n	800dff4 <SD_write+0xd8>
          {
          }
          if (WriteStatus == 0)
 800e00e:	4b15      	ldr	r3, [pc, #84]	; (800e064 <SD_write+0x148>)
 800e010:	681b      	ldr	r3, [r3, #0]
 800e012:	2b00      	cmp	r3, #0
 800e014:	d016      	beq.n	800e044 <SD_write+0x128>
          {
            break;
          }

          memcpy((void *)buff, (void *)scratch, BLOCKSIZE);
 800e016:	68bb      	ldr	r3, [r7, #8]
 800e018:	4a13      	ldr	r2, [pc, #76]	; (800e068 <SD_write+0x14c>)
 800e01a:	4618      	mov	r0, r3
 800e01c:	4611      	mov	r1, r2
 800e01e:	f44f 7300 	mov.w	r3, #512	; 0x200
 800e022:	461a      	mov	r2, r3
 800e024:	f002 f964 	bl	80102f0 <memcpy>
          buff += BLOCKSIZE;
 800e028:	68bb      	ldr	r3, [r7, #8]
 800e02a:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800e02e:	60bb      	str	r3, [r7, #8]
      for (i = 0; i < count; i++)
 800e030:	69bb      	ldr	r3, [r7, #24]
 800e032:	3301      	adds	r3, #1
 800e034:	61bb      	str	r3, [r7, #24]
 800e036:	69bb      	ldr	r3, [r7, #24]
 800e038:	683a      	ldr	r2, [r7, #0]
 800e03a:	429a      	cmp	r2, r3
 800e03c:	d8c6      	bhi.n	800dfcc <SD_write+0xb0>
 800e03e:	e002      	b.n	800e046 <SD_write+0x12a>
        }
        else
        {
          break;
 800e040:	bf00      	nop
 800e042:	e000      	b.n	800e046 <SD_write+0x12a>
            break;
 800e044:	bf00      	nop
        }
      }
      if ((i == count) && (ret == MSD_OK))
 800e046:	69bb      	ldr	r3, [r7, #24]
 800e048:	683a      	ldr	r2, [r7, #0]
 800e04a:	429a      	cmp	r2, r3
 800e04c:	d104      	bne.n	800e058 <SD_write+0x13c>
 800e04e:	7fbb      	ldrb	r3, [r7, #30]
 800e050:	2b00      	cmp	r3, #0
 800e052:	d101      	bne.n	800e058 <SD_write+0x13c>
        res = RES_OK;
 800e054:	2300      	movs	r3, #0
 800e056:	77fb      	strb	r3, [r7, #31]
    }

  }
  return res;
 800e058:	7ffb      	ldrb	r3, [r7, #31]
}
 800e05a:	4618      	mov	r0, r3
 800e05c:	3720      	adds	r7, #32
 800e05e:	46bd      	mov	sp, r7
 800e060:	bd80      	pop	{r7, pc}
 800e062:	bf00      	nop
 800e064:	20000774 	.word	0x20000774
 800e068:	20000574 	.word	0x20000574

0800e06c <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800e06c:	b580      	push	{r7, lr}
 800e06e:	b08c      	sub	sp, #48	; 0x30
 800e070:	af00      	add	r7, sp, #0
 800e072:	4603      	mov	r3, r0
 800e074:	603a      	str	r2, [r7, #0]
 800e076:	71fb      	strb	r3, [r7, #7]
 800e078:	460b      	mov	r3, r1
 800e07a:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800e07c:	2301      	movs	r3, #1
 800e07e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800e082:	4b25      	ldr	r3, [pc, #148]	; (800e118 <SD_ioctl+0xac>)
 800e084:	781b      	ldrb	r3, [r3, #0]
 800e086:	b2db      	uxtb	r3, r3
 800e088:	f003 0301 	and.w	r3, r3, #1
 800e08c:	2b00      	cmp	r3, #0
 800e08e:	d001      	beq.n	800e094 <SD_ioctl+0x28>
 800e090:	2303      	movs	r3, #3
 800e092:	e03c      	b.n	800e10e <SD_ioctl+0xa2>

  switch (cmd)
 800e094:	79bb      	ldrb	r3, [r7, #6]
 800e096:	2b03      	cmp	r3, #3
 800e098:	d834      	bhi.n	800e104 <SD_ioctl+0x98>
 800e09a:	a201      	add	r2, pc, #4	; (adr r2, 800e0a0 <SD_ioctl+0x34>)
 800e09c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e0a0:	0800e0b1 	.word	0x0800e0b1
 800e0a4:	0800e0b9 	.word	0x0800e0b9
 800e0a8:	0800e0d1 	.word	0x0800e0d1
 800e0ac:	0800e0eb 	.word	0x0800e0eb
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800e0b0:	2300      	movs	r3, #0
 800e0b2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800e0b6:	e028      	b.n	800e10a <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800e0b8:	f107 030c 	add.w	r3, r7, #12
 800e0bc:	4618      	mov	r0, r3
 800e0be:	f7ff fde9 	bl	800dc94 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800e0c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e0c4:	683b      	ldr	r3, [r7, #0]
 800e0c6:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800e0c8:	2300      	movs	r3, #0
 800e0ca:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800e0ce:	e01c      	b.n	800e10a <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800e0d0:	f107 030c 	add.w	r3, r7, #12
 800e0d4:	4618      	mov	r0, r3
 800e0d6:	f7ff fddd 	bl	800dc94 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800e0da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e0dc:	b29a      	uxth	r2, r3
 800e0de:	683b      	ldr	r3, [r7, #0]
 800e0e0:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800e0e2:	2300      	movs	r3, #0
 800e0e4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800e0e8:	e00f      	b.n	800e10a <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800e0ea:	f107 030c 	add.w	r3, r7, #12
 800e0ee:	4618      	mov	r0, r3
 800e0f0:	f7ff fdd0 	bl	800dc94 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800e0f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e0f6:	0a5a      	lsrs	r2, r3, #9
 800e0f8:	683b      	ldr	r3, [r7, #0]
 800e0fa:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800e0fc:	2300      	movs	r3, #0
 800e0fe:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800e102:	e002      	b.n	800e10a <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800e104:	2304      	movs	r3, #4
 800e106:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800e10a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800e10e:	4618      	mov	r0, r3
 800e110:	3730      	adds	r7, #48	; 0x30
 800e112:	46bd      	mov	sp, r7
 800e114:	bd80      	pop	{r7, pc}
 800e116:	bf00      	nop
 800e118:	2000000d 	.word	0x2000000d

0800e11c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init (USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800e11c:	b580      	push	{r7, lr}
 800e11e:	b084      	sub	sp, #16
 800e120:	af00      	add	r7, sp, #0
 800e122:	6078      	str	r0, [r7, #4]
 800e124:	460b      	mov	r3, r1
 800e126:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800e128:	2300      	movs	r3, #0
 800e12a:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if(pdev->dev_speed == USBD_SPEED_HIGH)
 800e12c:	687b      	ldr	r3, [r7, #4]
 800e12e:	7c1b      	ldrb	r3, [r3, #16]
 800e130:	2b00      	cmp	r3, #0
 800e132:	d115      	bne.n	800e160 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800e134:	f44f 7300 	mov.w	r3, #512	; 0x200
 800e138:	2202      	movs	r2, #2
 800e13a:	2181      	movs	r1, #129	; 0x81
 800e13c:	6878      	ldr	r0, [r7, #4]
 800e13e:	f001 ff50 	bl	800ffe2 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800e142:	687b      	ldr	r3, [r7, #4]
 800e144:	2201      	movs	r2, #1
 800e146:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800e148:	f44f 7300 	mov.w	r3, #512	; 0x200
 800e14c:	2202      	movs	r2, #2
 800e14e:	2101      	movs	r1, #1
 800e150:	6878      	ldr	r0, [r7, #4]
 800e152:	f001 ff46 	bl	800ffe2 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800e156:	687b      	ldr	r3, [r7, #4]
 800e158:	2201      	movs	r2, #1
 800e15a:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
 800e15e:	e012      	b.n	800e186 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800e160:	2340      	movs	r3, #64	; 0x40
 800e162:	2202      	movs	r2, #2
 800e164:	2181      	movs	r1, #129	; 0x81
 800e166:	6878      	ldr	r0, [r7, #4]
 800e168:	f001 ff3b 	bl	800ffe2 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800e16c:	687b      	ldr	r3, [r7, #4]
 800e16e:	2201      	movs	r2, #1
 800e170:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800e172:	2340      	movs	r3, #64	; 0x40
 800e174:	2202      	movs	r2, #2
 800e176:	2101      	movs	r1, #1
 800e178:	6878      	ldr	r0, [r7, #4]
 800e17a:	f001 ff32 	bl	800ffe2 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800e17e:	687b      	ldr	r3, [r7, #4]
 800e180:	2201      	movs	r2, #1
 800e182:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800e186:	2308      	movs	r3, #8
 800e188:	2203      	movs	r2, #3
 800e18a:	2182      	movs	r1, #130	; 0x82
 800e18c:	6878      	ldr	r0, [r7, #4]
 800e18e:	f001 ff28 	bl	800ffe2 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800e192:	687b      	ldr	r3, [r7, #4]
 800e194:	2201      	movs	r2, #1
 800e196:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof (USBD_CDC_HandleTypeDef));
 800e198:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800e19c:	f002 f898 	bl	80102d0 <malloc>
 800e1a0:	4603      	mov	r3, r0
 800e1a2:	461a      	mov	r2, r3
 800e1a4:	687b      	ldr	r3, [r7, #4]
 800e1a6:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290

  if(pdev->pClassData == NULL)
 800e1aa:	687b      	ldr	r3, [r7, #4]
 800e1ac:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800e1b0:	2b00      	cmp	r3, #0
 800e1b2:	d102      	bne.n	800e1ba <USBD_CDC_Init+0x9e>
  {
    ret = 1U;
 800e1b4:	2301      	movs	r3, #1
 800e1b6:	73fb      	strb	r3, [r7, #15]
 800e1b8:	e026      	b.n	800e208 <USBD_CDC_Init+0xec>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800e1ba:	687b      	ldr	r3, [r7, #4]
 800e1bc:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800e1c0:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800e1c2:	687b      	ldr	r3, [r7, #4]
 800e1c4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800e1c8:	681b      	ldr	r3, [r3, #0]
 800e1ca:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 800e1cc:	68bb      	ldr	r3, [r7, #8]
 800e1ce:	2200      	movs	r2, #0
 800e1d0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 800e1d4:	68bb      	ldr	r3, [r7, #8]
 800e1d6:	2200      	movs	r2, #0
 800e1d8:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if(pdev->dev_speed == USBD_SPEED_HIGH)
 800e1dc:	687b      	ldr	r3, [r7, #4]
 800e1de:	7c1b      	ldrb	r3, [r3, #16]
 800e1e0:	2b00      	cmp	r3, #0
 800e1e2:	d109      	bne.n	800e1f8 <USBD_CDC_Init+0xdc>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800e1e4:	68bb      	ldr	r3, [r7, #8]
 800e1e6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800e1ea:	f44f 7300 	mov.w	r3, #512	; 0x200
 800e1ee:	2101      	movs	r1, #1
 800e1f0:	6878      	ldr	r0, [r7, #4]
 800e1f2:	f001 ffe7 	bl	80101c4 <USBD_LL_PrepareReceive>
 800e1f6:	e007      	b.n	800e208 <USBD_CDC_Init+0xec>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800e1f8:	68bb      	ldr	r3, [r7, #8]
 800e1fa:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800e1fe:	2340      	movs	r3, #64	; 0x40
 800e200:	2101      	movs	r1, #1
 800e202:	6878      	ldr	r0, [r7, #4]
 800e204:	f001 ffde 	bl	80101c4 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 800e208:	7bfb      	ldrb	r3, [r7, #15]
}
 800e20a:	4618      	mov	r0, r3
 800e20c:	3710      	adds	r7, #16
 800e20e:	46bd      	mov	sp, r7
 800e210:	bd80      	pop	{r7, pc}

0800e212 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit (USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800e212:	b580      	push	{r7, lr}
 800e214:	b084      	sub	sp, #16
 800e216:	af00      	add	r7, sp, #0
 800e218:	6078      	str	r0, [r7, #4]
 800e21a:	460b      	mov	r3, r1
 800e21c:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800e21e:	2300      	movs	r3, #0
 800e220:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800e222:	2181      	movs	r1, #129	; 0x81
 800e224:	6878      	ldr	r0, [r7, #4]
 800e226:	f001 ff02 	bl	801002e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800e22a:	687b      	ldr	r3, [r7, #4]
 800e22c:	2200      	movs	r2, #0
 800e22e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800e230:	2101      	movs	r1, #1
 800e232:	6878      	ldr	r0, [r7, #4]
 800e234:	f001 fefb 	bl	801002e <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800e238:	687b      	ldr	r3, [r7, #4]
 800e23a:	2200      	movs	r2, #0
 800e23c:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800e240:	2182      	movs	r1, #130	; 0x82
 800e242:	6878      	ldr	r0, [r7, #4]
 800e244:	f001 fef3 	bl	801002e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800e248:	687b      	ldr	r3, [r7, #4]
 800e24a:	2200      	movs	r2, #0
 800e24c:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if(pdev->pClassData != NULL)
 800e24e:	687b      	ldr	r3, [r7, #4]
 800e250:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800e254:	2b00      	cmp	r3, #0
 800e256:	d00e      	beq.n	800e276 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800e258:	687b      	ldr	r3, [r7, #4]
 800e25a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800e25e:	685b      	ldr	r3, [r3, #4]
 800e260:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 800e262:	687b      	ldr	r3, [r7, #4]
 800e264:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800e268:	4618      	mov	r0, r3
 800e26a:	f002 f839 	bl	80102e0 <free>
    pdev->pClassData = NULL;
 800e26e:	687b      	ldr	r3, [r7, #4]
 800e270:	2200      	movs	r2, #0
 800e272:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290
  }

  return ret;
 800e276:	7bfb      	ldrb	r3, [r7, #15]
}
 800e278:	4618      	mov	r0, r3
 800e27a:	3710      	adds	r7, #16
 800e27c:	46bd      	mov	sp, r7
 800e27e:	bd80      	pop	{r7, pc}

0800e280 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup (USBD_HandleTypeDef *pdev,
                                USBD_SetupReqTypedef *req)
{
 800e280:	b580      	push	{r7, lr}
 800e282:	b086      	sub	sp, #24
 800e284:	af00      	add	r7, sp, #0
 800e286:	6078      	str	r0, [r7, #4]
 800e288:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800e28a:	687b      	ldr	r3, [r7, #4]
 800e28c:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800e290:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 800e292:	2300      	movs	r3, #0
 800e294:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 800e296:	2300      	movs	r3, #0
 800e298:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 800e29a:	2300      	movs	r3, #0
 800e29c:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800e29e:	683b      	ldr	r3, [r7, #0]
 800e2a0:	781b      	ldrb	r3, [r3, #0]
 800e2a2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800e2a6:	2b00      	cmp	r3, #0
 800e2a8:	d039      	beq.n	800e31e <USBD_CDC_Setup+0x9e>
 800e2aa:	2b20      	cmp	r3, #32
 800e2ac:	d17c      	bne.n	800e3a8 <USBD_CDC_Setup+0x128>
  {
  case USB_REQ_TYPE_CLASS :
    if (req->wLength)
 800e2ae:	683b      	ldr	r3, [r7, #0]
 800e2b0:	88db      	ldrh	r3, [r3, #6]
 800e2b2:	2b00      	cmp	r3, #0
 800e2b4:	d029      	beq.n	800e30a <USBD_CDC_Setup+0x8a>
    {
      if (req->bmRequest & 0x80U)
 800e2b6:	683b      	ldr	r3, [r7, #0]
 800e2b8:	781b      	ldrb	r3, [r3, #0]
 800e2ba:	b25b      	sxtb	r3, r3
 800e2bc:	2b00      	cmp	r3, #0
 800e2be:	da11      	bge.n	800e2e4 <USBD_CDC_Setup+0x64>
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800e2c0:	687b      	ldr	r3, [r7, #4]
 800e2c2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800e2c6:	689b      	ldr	r3, [r3, #8]
 800e2c8:	683a      	ldr	r2, [r7, #0]
 800e2ca:	7850      	ldrb	r0, [r2, #1]
                                                          (uint8_t *)(void *)hcdc->data,
 800e2cc:	6939      	ldr	r1, [r7, #16]
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800e2ce:	683a      	ldr	r2, [r7, #0]
 800e2d0:	88d2      	ldrh	r2, [r2, #6]
 800e2d2:	4798      	blx	r3
                                                          req->wLength);

          USBD_CtlSendData (pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800e2d4:	6939      	ldr	r1, [r7, #16]
 800e2d6:	683b      	ldr	r3, [r7, #0]
 800e2d8:	88db      	ldrh	r3, [r3, #6]
 800e2da:	461a      	mov	r2, r3
 800e2dc:	6878      	ldr	r0, [r7, #4]
 800e2de:	f001 f9c9 	bl	800f674 <USBD_CtlSendData>
    else
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                        (uint8_t *)(void *)req, 0U);
    }
    break;
 800e2e2:	e068      	b.n	800e3b6 <USBD_CDC_Setup+0x136>
        hcdc->CmdOpCode = req->bRequest;
 800e2e4:	683b      	ldr	r3, [r7, #0]
 800e2e6:	785a      	ldrb	r2, [r3, #1]
 800e2e8:	693b      	ldr	r3, [r7, #16]
 800e2ea:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
        hcdc->CmdLength = (uint8_t)req->wLength;
 800e2ee:	683b      	ldr	r3, [r7, #0]
 800e2f0:	88db      	ldrh	r3, [r3, #6]
 800e2f2:	b2da      	uxtb	r2, r3
 800e2f4:	693b      	ldr	r3, [r7, #16]
 800e2f6:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
        USBD_CtlPrepareRx (pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800e2fa:	6939      	ldr	r1, [r7, #16]
 800e2fc:	683b      	ldr	r3, [r7, #0]
 800e2fe:	88db      	ldrh	r3, [r3, #6]
 800e300:	461a      	mov	r2, r3
 800e302:	6878      	ldr	r0, [r7, #4]
 800e304:	f001 f9e4 	bl	800f6d0 <USBD_CtlPrepareRx>
    break;
 800e308:	e055      	b.n	800e3b6 <USBD_CDC_Setup+0x136>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800e30a:	687b      	ldr	r3, [r7, #4]
 800e30c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800e310:	689b      	ldr	r3, [r3, #8]
 800e312:	683a      	ldr	r2, [r7, #0]
 800e314:	7850      	ldrb	r0, [r2, #1]
 800e316:	2200      	movs	r2, #0
 800e318:	6839      	ldr	r1, [r7, #0]
 800e31a:	4798      	blx	r3
    break;
 800e31c:	e04b      	b.n	800e3b6 <USBD_CDC_Setup+0x136>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800e31e:	683b      	ldr	r3, [r7, #0]
 800e320:	785b      	ldrb	r3, [r3, #1]
 800e322:	2b0a      	cmp	r3, #10
 800e324:	d017      	beq.n	800e356 <USBD_CDC_Setup+0xd6>
 800e326:	2b0b      	cmp	r3, #11
 800e328:	d029      	beq.n	800e37e <USBD_CDC_Setup+0xfe>
 800e32a:	2b00      	cmp	r3, #0
 800e32c:	d133      	bne.n	800e396 <USBD_CDC_Setup+0x116>
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e32e:	687b      	ldr	r3, [r7, #4]
 800e330:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800e334:	2b03      	cmp	r3, #3
 800e336:	d107      	bne.n	800e348 <USBD_CDC_Setup+0xc8>
      {
        USBD_CtlSendData (pdev, (uint8_t *)(void *)&status_info, 2U);
 800e338:	f107 030c 	add.w	r3, r7, #12
 800e33c:	2202      	movs	r2, #2
 800e33e:	4619      	mov	r1, r3
 800e340:	6878      	ldr	r0, [r7, #4]
 800e342:	f001 f997 	bl	800f674 <USBD_CtlSendData>
      else
      {
        USBD_CtlError (pdev, req);
			  ret = USBD_FAIL;
      }
      break;
 800e346:	e02e      	b.n	800e3a6 <USBD_CDC_Setup+0x126>
        USBD_CtlError (pdev, req);
 800e348:	6839      	ldr	r1, [r7, #0]
 800e34a:	6878      	ldr	r0, [r7, #4]
 800e34c:	f001 f927 	bl	800f59e <USBD_CtlError>
			  ret = USBD_FAIL;
 800e350:	2302      	movs	r3, #2
 800e352:	75fb      	strb	r3, [r7, #23]
      break;
 800e354:	e027      	b.n	800e3a6 <USBD_CDC_Setup+0x126>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e356:	687b      	ldr	r3, [r7, #4]
 800e358:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800e35c:	2b03      	cmp	r3, #3
 800e35e:	d107      	bne.n	800e370 <USBD_CDC_Setup+0xf0>
      {
        USBD_CtlSendData (pdev, &ifalt, 1U);
 800e360:	f107 030f 	add.w	r3, r7, #15
 800e364:	2201      	movs	r2, #1
 800e366:	4619      	mov	r1, r3
 800e368:	6878      	ldr	r0, [r7, #4]
 800e36a:	f001 f983 	bl	800f674 <USBD_CtlSendData>
      else
      {
        USBD_CtlError (pdev, req);
			  ret = USBD_FAIL;
      }
      break;
 800e36e:	e01a      	b.n	800e3a6 <USBD_CDC_Setup+0x126>
        USBD_CtlError (pdev, req);
 800e370:	6839      	ldr	r1, [r7, #0]
 800e372:	6878      	ldr	r0, [r7, #4]
 800e374:	f001 f913 	bl	800f59e <USBD_CtlError>
			  ret = USBD_FAIL;
 800e378:	2302      	movs	r3, #2
 800e37a:	75fb      	strb	r3, [r7, #23]
      break;
 800e37c:	e013      	b.n	800e3a6 <USBD_CDC_Setup+0x126>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800e37e:	687b      	ldr	r3, [r7, #4]
 800e380:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800e384:	2b03      	cmp	r3, #3
 800e386:	d00d      	beq.n	800e3a4 <USBD_CDC_Setup+0x124>
      {
        USBD_CtlError (pdev, req);
 800e388:	6839      	ldr	r1, [r7, #0]
 800e38a:	6878      	ldr	r0, [r7, #4]
 800e38c:	f001 f907 	bl	800f59e <USBD_CtlError>
			  ret = USBD_FAIL;
 800e390:	2302      	movs	r3, #2
 800e392:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800e394:	e006      	b.n	800e3a4 <USBD_CDC_Setup+0x124>

    default:
      USBD_CtlError (pdev, req);
 800e396:	6839      	ldr	r1, [r7, #0]
 800e398:	6878      	ldr	r0, [r7, #4]
 800e39a:	f001 f900 	bl	800f59e <USBD_CtlError>
      ret = USBD_FAIL;
 800e39e:	2302      	movs	r3, #2
 800e3a0:	75fb      	strb	r3, [r7, #23]
      break;
 800e3a2:	e000      	b.n	800e3a6 <USBD_CDC_Setup+0x126>
      break;
 800e3a4:	bf00      	nop
    }
    break;
 800e3a6:	e006      	b.n	800e3b6 <USBD_CDC_Setup+0x136>

  default:
    USBD_CtlError (pdev, req);
 800e3a8:	6839      	ldr	r1, [r7, #0]
 800e3aa:	6878      	ldr	r0, [r7, #4]
 800e3ac:	f001 f8f7 	bl	800f59e <USBD_CtlError>
    ret = USBD_FAIL;
 800e3b0:	2302      	movs	r3, #2
 800e3b2:	75fb      	strb	r3, [r7, #23]
    break;
 800e3b4:	bf00      	nop
  }

  return ret;
 800e3b6:	7dfb      	ldrb	r3, [r7, #23]
}
 800e3b8:	4618      	mov	r0, r3
 800e3ba:	3718      	adds	r7, #24
 800e3bc:	46bd      	mov	sp, r7
 800e3be:	bd80      	pop	{r7, pc}

0800e3c0 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800e3c0:	b580      	push	{r7, lr}
 800e3c2:	b084      	sub	sp, #16
 800e3c4:	af00      	add	r7, sp, #0
 800e3c6:	6078      	str	r0, [r7, #4]
 800e3c8:	460b      	mov	r3, r1
 800e3ca:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)pdev->pClassData;
 800e3cc:	687b      	ldr	r3, [r7, #4]
 800e3ce:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800e3d2:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800e3d4:	687b      	ldr	r3, [r7, #4]
 800e3d6:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800e3da:	60bb      	str	r3, [r7, #8]

  if(pdev->pClassData != NULL)
 800e3dc:	687b      	ldr	r3, [r7, #4]
 800e3de:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800e3e2:	2b00      	cmp	r3, #0
 800e3e4:	d03a      	beq.n	800e45c <USBD_CDC_DataIn+0x9c>
  {
    if((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800e3e6:	78fa      	ldrb	r2, [r7, #3]
 800e3e8:	6879      	ldr	r1, [r7, #4]
 800e3ea:	4613      	mov	r3, r2
 800e3ec:	009b      	lsls	r3, r3, #2
 800e3ee:	4413      	add	r3, r2
 800e3f0:	009b      	lsls	r3, r3, #2
 800e3f2:	440b      	add	r3, r1
 800e3f4:	331c      	adds	r3, #28
 800e3f6:	681b      	ldr	r3, [r3, #0]
 800e3f8:	2b00      	cmp	r3, #0
 800e3fa:	d029      	beq.n	800e450 <USBD_CDC_DataIn+0x90>
 800e3fc:	78fa      	ldrb	r2, [r7, #3]
 800e3fe:	6879      	ldr	r1, [r7, #4]
 800e400:	4613      	mov	r3, r2
 800e402:	009b      	lsls	r3, r3, #2
 800e404:	4413      	add	r3, r2
 800e406:	009b      	lsls	r3, r3, #2
 800e408:	440b      	add	r3, r1
 800e40a:	331c      	adds	r3, #28
 800e40c:	681a      	ldr	r2, [r3, #0]
 800e40e:	78f9      	ldrb	r1, [r7, #3]
 800e410:	68b8      	ldr	r0, [r7, #8]
 800e412:	460b      	mov	r3, r1
 800e414:	00db      	lsls	r3, r3, #3
 800e416:	1a5b      	subs	r3, r3, r1
 800e418:	009b      	lsls	r3, r3, #2
 800e41a:	4403      	add	r3, r0
 800e41c:	3344      	adds	r3, #68	; 0x44
 800e41e:	681b      	ldr	r3, [r3, #0]
 800e420:	fbb2 f1f3 	udiv	r1, r2, r3
 800e424:	fb03 f301 	mul.w	r3, r3, r1
 800e428:	1ad3      	subs	r3, r2, r3
 800e42a:	2b00      	cmp	r3, #0
 800e42c:	d110      	bne.n	800e450 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 800e42e:	78fa      	ldrb	r2, [r7, #3]
 800e430:	6879      	ldr	r1, [r7, #4]
 800e432:	4613      	mov	r3, r2
 800e434:	009b      	lsls	r3, r3, #2
 800e436:	4413      	add	r3, r2
 800e438:	009b      	lsls	r3, r3, #2
 800e43a:	440b      	add	r3, r1
 800e43c:	331c      	adds	r3, #28
 800e43e:	2200      	movs	r2, #0
 800e440:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit (pdev, epnum, NULL, 0U);
 800e442:	78f9      	ldrb	r1, [r7, #3]
 800e444:	2300      	movs	r3, #0
 800e446:	2200      	movs	r2, #0
 800e448:	6878      	ldr	r0, [r7, #4]
 800e44a:	f001 fe98 	bl	801017e <USBD_LL_Transmit>
 800e44e:	e003      	b.n	800e458 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 800e450:	68fb      	ldr	r3, [r7, #12]
 800e452:	2200      	movs	r2, #0
 800e454:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 800e458:	2300      	movs	r3, #0
 800e45a:	e000      	b.n	800e45e <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 800e45c:	2302      	movs	r3, #2
  }
}
 800e45e:	4618      	mov	r0, r3
 800e460:	3710      	adds	r7, #16
 800e462:	46bd      	mov	sp, r7
 800e464:	bd80      	pop	{r7, pc}

0800e466 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800e466:	b580      	push	{r7, lr}
 800e468:	b084      	sub	sp, #16
 800e46a:	af00      	add	r7, sp, #0
 800e46c:	6078      	str	r0, [r7, #4]
 800e46e:	460b      	mov	r3, r1
 800e470:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800e472:	687b      	ldr	r3, [r7, #4]
 800e474:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800e478:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize (pdev, epnum);
 800e47a:	78fb      	ldrb	r3, [r7, #3]
 800e47c:	4619      	mov	r1, r3
 800e47e:	6878      	ldr	r0, [r7, #4]
 800e480:	f001 fec3 	bl	801020a <USBD_LL_GetRxDataSize>
 800e484:	4602      	mov	r2, r0
 800e486:	68fb      	ldr	r3, [r7, #12]
 800e488:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if(pdev->pClassData != NULL)
 800e48c:	687b      	ldr	r3, [r7, #4]
 800e48e:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800e492:	2b00      	cmp	r3, #0
 800e494:	d00d      	beq.n	800e4b2 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800e496:	687b      	ldr	r3, [r7, #4]
 800e498:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800e49c:	68db      	ldr	r3, [r3, #12]
 800e49e:	68fa      	ldr	r2, [r7, #12]
 800e4a0:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800e4a4:	68fa      	ldr	r2, [r7, #12]
 800e4a6:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800e4aa:	4611      	mov	r1, r2
 800e4ac:	4798      	blx	r3

    return USBD_OK;
 800e4ae:	2300      	movs	r3, #0
 800e4b0:	e000      	b.n	800e4b4 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 800e4b2:	2302      	movs	r3, #2
  }
}
 800e4b4:	4618      	mov	r0, r3
 800e4b6:	3710      	adds	r7, #16
 800e4b8:	46bd      	mov	sp, r7
 800e4ba:	bd80      	pop	{r7, pc}

0800e4bc <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady (USBD_HandleTypeDef *pdev)
{
 800e4bc:	b580      	push	{r7, lr}
 800e4be:	b084      	sub	sp, #16
 800e4c0:	af00      	add	r7, sp, #0
 800e4c2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800e4c4:	687b      	ldr	r3, [r7, #4]
 800e4c6:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800e4ca:	60fb      	str	r3, [r7, #12]

  if((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800e4cc:	687b      	ldr	r3, [r7, #4]
 800e4ce:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800e4d2:	2b00      	cmp	r3, #0
 800e4d4:	d015      	beq.n	800e502 <USBD_CDC_EP0_RxReady+0x46>
 800e4d6:	68fb      	ldr	r3, [r7, #12]
 800e4d8:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800e4dc:	2bff      	cmp	r3, #255	; 0xff
 800e4de:	d010      	beq.n	800e502 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800e4e0:	687b      	ldr	r3, [r7, #4]
 800e4e2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800e4e6:	689b      	ldr	r3, [r3, #8]
 800e4e8:	68fa      	ldr	r2, [r7, #12]
 800e4ea:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 800e4ee:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800e4f0:	68fa      	ldr	r2, [r7, #12]
 800e4f2:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800e4f6:	b292      	uxth	r2, r2
 800e4f8:	4798      	blx	r3
      hcdc->CmdOpCode = 0xFFU;
 800e4fa:	68fb      	ldr	r3, [r7, #12]
 800e4fc:	22ff      	movs	r2, #255	; 0xff
 800e4fe:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 800e502:	2300      	movs	r3, #0
}
 800e504:	4618      	mov	r0, r3
 800e506:	3710      	adds	r7, #16
 800e508:	46bd      	mov	sp, r7
 800e50a:	bd80      	pop	{r7, pc}

0800e50c <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc (uint16_t *length)
{
 800e50c:	b480      	push	{r7}
 800e50e:	b083      	sub	sp, #12
 800e510:	af00      	add	r7, sp, #0
 800e512:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_CfgFSDesc);
 800e514:	687b      	ldr	r3, [r7, #4]
 800e516:	2243      	movs	r2, #67	; 0x43
 800e518:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 800e51a:	4b03      	ldr	r3, [pc, #12]	; (800e528 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800e51c:	4618      	mov	r0, r3
 800e51e:	370c      	adds	r7, #12
 800e520:	46bd      	mov	sp, r7
 800e522:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e526:	4770      	bx	lr
 800e528:	20000098 	.word	0x20000098

0800e52c <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc (uint16_t *length)
{
 800e52c:	b480      	push	{r7}
 800e52e:	b083      	sub	sp, #12
 800e530:	af00      	add	r7, sp, #0
 800e532:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_CfgHSDesc);
 800e534:	687b      	ldr	r3, [r7, #4]
 800e536:	2243      	movs	r2, #67	; 0x43
 800e538:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 800e53a:	4b03      	ldr	r3, [pc, #12]	; (800e548 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800e53c:	4618      	mov	r0, r3
 800e53e:	370c      	adds	r7, #12
 800e540:	46bd      	mov	sp, r7
 800e542:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e546:	4770      	bx	lr
 800e548:	20000054 	.word	0x20000054

0800e54c <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc (uint16_t *length)
{
 800e54c:	b480      	push	{r7}
 800e54e:	b083      	sub	sp, #12
 800e550:	af00      	add	r7, sp, #0
 800e552:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_OtherSpeedCfgDesc);
 800e554:	687b      	ldr	r3, [r7, #4]
 800e556:	2243      	movs	r2, #67	; 0x43
 800e558:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 800e55a:	4b03      	ldr	r3, [pc, #12]	; (800e568 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800e55c:	4618      	mov	r0, r3
 800e55e:	370c      	adds	r7, #12
 800e560:	46bd      	mov	sp, r7
 800e562:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e566:	4770      	bx	lr
 800e568:	200000dc 	.word	0x200000dc

0800e56c <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor (uint16_t *length)
{
 800e56c:	b480      	push	{r7}
 800e56e:	b083      	sub	sp, #12
 800e570:	af00      	add	r7, sp, #0
 800e572:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_DeviceQualifierDesc);
 800e574:	687b      	ldr	r3, [r7, #4]
 800e576:	220a      	movs	r2, #10
 800e578:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 800e57a:	4b03      	ldr	r3, [pc, #12]	; (800e588 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800e57c:	4618      	mov	r0, r3
 800e57e:	370c      	adds	r7, #12
 800e580:	46bd      	mov	sp, r7
 800e582:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e586:	4770      	bx	lr
 800e588:	20000010 	.word	0x20000010

0800e58c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface  (USBD_HandleTypeDef   *pdev,
                                      USBD_CDC_ItfTypeDef *fops)
{
 800e58c:	b480      	push	{r7}
 800e58e:	b085      	sub	sp, #20
 800e590:	af00      	add	r7, sp, #0
 800e592:	6078      	str	r0, [r7, #4]
 800e594:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 800e596:	2302      	movs	r3, #2
 800e598:	73fb      	strb	r3, [r7, #15]

  if(fops != NULL)
 800e59a:	683b      	ldr	r3, [r7, #0]
 800e59c:	2b00      	cmp	r3, #0
 800e59e:	d005      	beq.n	800e5ac <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData= fops;
 800e5a0:	687b      	ldr	r3, [r7, #4]
 800e5a2:	683a      	ldr	r2, [r7, #0]
 800e5a4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
    ret = USBD_OK;
 800e5a8:	2300      	movs	r3, #0
 800e5aa:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800e5ac:	7bfb      	ldrb	r3, [r7, #15]
}
 800e5ae:	4618      	mov	r0, r3
 800e5b0:	3714      	adds	r7, #20
 800e5b2:	46bd      	mov	sp, r7
 800e5b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5b8:	4770      	bx	lr

0800e5ba <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer  (USBD_HandleTypeDef   *pdev,
                                uint8_t  *pbuff,
                                uint16_t length)
{
 800e5ba:	b480      	push	{r7}
 800e5bc:	b087      	sub	sp, #28
 800e5be:	af00      	add	r7, sp, #0
 800e5c0:	60f8      	str	r0, [r7, #12]
 800e5c2:	60b9      	str	r1, [r7, #8]
 800e5c4:	4613      	mov	r3, r2
 800e5c6:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800e5c8:	68fb      	ldr	r3, [r7, #12]
 800e5ca:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800e5ce:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800e5d0:	697b      	ldr	r3, [r7, #20]
 800e5d2:	68ba      	ldr	r2, [r7, #8]
 800e5d4:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800e5d8:	88fa      	ldrh	r2, [r7, #6]
 800e5da:	697b      	ldr	r3, [r7, #20]
 800e5dc:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 800e5e0:	2300      	movs	r3, #0
}
 800e5e2:	4618      	mov	r0, r3
 800e5e4:	371c      	adds	r7, #28
 800e5e6:	46bd      	mov	sp, r7
 800e5e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5ec:	4770      	bx	lr

0800e5ee <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer  (USBD_HandleTypeDef   *pdev,
                                   uint8_t  *pbuff)
{
 800e5ee:	b480      	push	{r7}
 800e5f0:	b085      	sub	sp, #20
 800e5f2:	af00      	add	r7, sp, #0
 800e5f4:	6078      	str	r0, [r7, #4]
 800e5f6:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800e5f8:	687b      	ldr	r3, [r7, #4]
 800e5fa:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800e5fe:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 800e600:	68fb      	ldr	r3, [r7, #12]
 800e602:	683a      	ldr	r2, [r7, #0]
 800e604:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 800e608:	2300      	movs	r3, #0
}
 800e60a:	4618      	mov	r0, r3
 800e60c:	3714      	adds	r7, #20
 800e60e:	46bd      	mov	sp, r7
 800e610:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e614:	4770      	bx	lr

0800e616 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800e616:	b580      	push	{r7, lr}
 800e618:	b084      	sub	sp, #16
 800e61a:	af00      	add	r7, sp, #0
 800e61c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800e61e:	687b      	ldr	r3, [r7, #4]
 800e620:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800e624:	60fb      	str	r3, [r7, #12]

  if(pdev->pClassData != NULL)
 800e626:	687b      	ldr	r3, [r7, #4]
 800e628:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800e62c:	2b00      	cmp	r3, #0
 800e62e:	d01c      	beq.n	800e66a <USBD_CDC_TransmitPacket+0x54>
  {
    if(hcdc->TxState == 0U)
 800e630:	68fb      	ldr	r3, [r7, #12]
 800e632:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800e636:	2b00      	cmp	r3, #0
 800e638:	d115      	bne.n	800e666 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 800e63a:	68fb      	ldr	r3, [r7, #12]
 800e63c:	2201      	movs	r2, #1
 800e63e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800e642:	68fb      	ldr	r3, [r7, #12]
 800e644:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800e648:	687b      	ldr	r3, [r7, #4]
 800e64a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800e64c:	68fb      	ldr	r3, [r7, #12]
 800e64e:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 800e652:	68fb      	ldr	r3, [r7, #12]
 800e654:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800e658:	b29b      	uxth	r3, r3
 800e65a:	2181      	movs	r1, #129	; 0x81
 800e65c:	6878      	ldr	r0, [r7, #4]
 800e65e:	f001 fd8e 	bl	801017e <USBD_LL_Transmit>

      return USBD_OK;
 800e662:	2300      	movs	r3, #0
 800e664:	e002      	b.n	800e66c <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 800e666:	2301      	movs	r3, #1
 800e668:	e000      	b.n	800e66c <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 800e66a:	2302      	movs	r3, #2
  }
}
 800e66c:	4618      	mov	r0, r3
 800e66e:	3710      	adds	r7, #16
 800e670:	46bd      	mov	sp, r7
 800e672:	bd80      	pop	{r7, pc}

0800e674 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800e674:	b580      	push	{r7, lr}
 800e676:	b084      	sub	sp, #16
 800e678:	af00      	add	r7, sp, #0
 800e67a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800e67c:	687b      	ldr	r3, [r7, #4]
 800e67e:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800e682:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if(pdev->pClassData != NULL)
 800e684:	687b      	ldr	r3, [r7, #4]
 800e686:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800e68a:	2b00      	cmp	r3, #0
 800e68c:	d017      	beq.n	800e6be <USBD_CDC_ReceivePacket+0x4a>
  {
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 800e68e:	687b      	ldr	r3, [r7, #4]
 800e690:	7c1b      	ldrb	r3, [r3, #16]
 800e692:	2b00      	cmp	r3, #0
 800e694:	d109      	bne.n	800e6aa <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800e696:	68fb      	ldr	r3, [r7, #12]
 800e698:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800e69c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800e6a0:	2101      	movs	r1, #1
 800e6a2:	6878      	ldr	r0, [r7, #4]
 800e6a4:	f001 fd8e 	bl	80101c4 <USBD_LL_PrepareReceive>
 800e6a8:	e007      	b.n	800e6ba <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800e6aa:	68fb      	ldr	r3, [r7, #12]
 800e6ac:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800e6b0:	2340      	movs	r3, #64	; 0x40
 800e6b2:	2101      	movs	r1, #1
 800e6b4:	6878      	ldr	r0, [r7, #4]
 800e6b6:	f001 fd85 	bl	80101c4 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 800e6ba:	2300      	movs	r3, #0
 800e6bc:	e000      	b.n	800e6c0 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 800e6be:	2302      	movs	r3, #2
  }
}
 800e6c0:	4618      	mov	r0, r3
 800e6c2:	3710      	adds	r7, #16
 800e6c4:	46bd      	mov	sp, r7
 800e6c6:	bd80      	pop	{r7, pc}

0800e6c8 <USBD_Init>:
* @param  pdesc: Descriptor structure address
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev, USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800e6c8:	b580      	push	{r7, lr}
 800e6ca:	b084      	sub	sp, #16
 800e6cc:	af00      	add	r7, sp, #0
 800e6ce:	60f8      	str	r0, [r7, #12]
 800e6d0:	60b9      	str	r1, [r7, #8]
 800e6d2:	4613      	mov	r3, r2
 800e6d4:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if(pdev == NULL)
 800e6d6:	68fb      	ldr	r3, [r7, #12]
 800e6d8:	2b00      	cmp	r3, #0
 800e6da:	d101      	bne.n	800e6e0 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800e6dc:	2302      	movs	r3, #2
 800e6de:	e01a      	b.n	800e716 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if(pdev->pClass != NULL)
 800e6e0:	68fb      	ldr	r3, [r7, #12]
 800e6e2:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800e6e6:	2b00      	cmp	r3, #0
 800e6e8:	d003      	beq.n	800e6f2 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800e6ea:	68fb      	ldr	r3, [r7, #12]
 800e6ec:	2200      	movs	r2, #0
 800e6ee:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
  }

  /* Assign USBD Descriptors */
  if(pdesc != NULL)
 800e6f2:	68bb      	ldr	r3, [r7, #8]
 800e6f4:	2b00      	cmp	r3, #0
 800e6f6:	d003      	beq.n	800e700 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 800e6f8:	68fb      	ldr	r3, [r7, #12]
 800e6fa:	68ba      	ldr	r2, [r7, #8]
 800e6fc:	f8c3 2288 	str.w	r2, [r3, #648]	; 0x288
  }

  /* Set Device initial State */
  pdev->dev_state  = USBD_STATE_DEFAULT;
 800e700:	68fb      	ldr	r3, [r7, #12]
 800e702:	2201      	movs	r2, #1
 800e704:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->id = id;
 800e708:	68fb      	ldr	r3, [r7, #12]
 800e70a:	79fa      	ldrb	r2, [r7, #7]
 800e70c:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800e70e:	68f8      	ldr	r0, [r7, #12]
 800e710:	f001 fc00 	bl	800ff14 <USBD_LL_Init>

  return USBD_OK;
 800e714:	2300      	movs	r3, #0
}
 800e716:	4618      	mov	r0, r3
 800e718:	3710      	adds	r7, #16
 800e71a:	46bd      	mov	sp, r7
 800e71c:	bd80      	pop	{r7, pc}

0800e71e <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800e71e:	b480      	push	{r7}
 800e720:	b085      	sub	sp, #20
 800e722:	af00      	add	r7, sp, #0
 800e724:	6078      	str	r0, [r7, #4]
 800e726:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef   status = USBD_OK;
 800e728:	2300      	movs	r3, #0
 800e72a:	73fb      	strb	r3, [r7, #15]
  if(pclass != 0)
 800e72c:	683b      	ldr	r3, [r7, #0]
 800e72e:	2b00      	cmp	r3, #0
 800e730:	d006      	beq.n	800e740 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 800e732:	687b      	ldr	r3, [r7, #4]
 800e734:	683a      	ldr	r2, [r7, #0]
 800e736:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
    status = USBD_OK;
 800e73a:	2300      	movs	r3, #0
 800e73c:	73fb      	strb	r3, [r7, #15]
 800e73e:	e001      	b.n	800e744 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 800e740:	2302      	movs	r3, #2
 800e742:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800e744:	7bfb      	ldrb	r3, [r7, #15]
}
 800e746:	4618      	mov	r0, r3
 800e748:	3714      	adds	r7, #20
 800e74a:	46bd      	mov	sp, r7
 800e74c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e750:	4770      	bx	lr

0800e752 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start  (USBD_HandleTypeDef *pdev)
{
 800e752:	b580      	push	{r7, lr}
 800e754:	b082      	sub	sp, #8
 800e756:	af00      	add	r7, sp, #0
 800e758:	6078      	str	r0, [r7, #4]

  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 800e75a:	6878      	ldr	r0, [r7, #4]
 800e75c:	f001 fc26 	bl	800ffac <USBD_LL_Start>

  return USBD_OK;
 800e760:	2300      	movs	r3, #0
}
 800e762:	4618      	mov	r0, r3
 800e764:	3708      	adds	r7, #8
 800e766:	46bd      	mov	sp, r7
 800e768:	bd80      	pop	{r7, pc}

0800e76a <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode (USBD_HandleTypeDef  *pdev)
{
 800e76a:	b480      	push	{r7}
 800e76c:	b083      	sub	sp, #12
 800e76e:	af00      	add	r7, sp, #0
 800e770:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800e772:	2300      	movs	r3, #0
}
 800e774:	4618      	mov	r0, r3
 800e776:	370c      	adds	r7, #12
 800e778:	46bd      	mov	sp, r7
 800e77a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e77e:	4770      	bx	lr

0800e780 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800e780:	b580      	push	{r7, lr}
 800e782:	b084      	sub	sp, #16
 800e784:	af00      	add	r7, sp, #0
 800e786:	6078      	str	r0, [r7, #4]
 800e788:	460b      	mov	r3, r1
 800e78a:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef   ret = USBD_FAIL;
 800e78c:	2302      	movs	r3, #2
 800e78e:	73fb      	strb	r3, [r7, #15]

  if(pdev->pClass != NULL)
 800e790:	687b      	ldr	r3, [r7, #4]
 800e792:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800e796:	2b00      	cmp	r3, #0
 800e798:	d00c      	beq.n	800e7b4 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if(pdev->pClass->Init(pdev, cfgidx) == 0U)
 800e79a:	687b      	ldr	r3, [r7, #4]
 800e79c:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800e7a0:	681b      	ldr	r3, [r3, #0]
 800e7a2:	78fa      	ldrb	r2, [r7, #3]
 800e7a4:	4611      	mov	r1, r2
 800e7a6:	6878      	ldr	r0, [r7, #4]
 800e7a8:	4798      	blx	r3
 800e7aa:	4603      	mov	r3, r0
 800e7ac:	2b00      	cmp	r3, #0
 800e7ae:	d101      	bne.n	800e7b4 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 800e7b0:	2300      	movs	r3, #0
 800e7b2:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 800e7b4:	7bfb      	ldrb	r3, [r7, #15]
}
 800e7b6:	4618      	mov	r0, r3
 800e7b8:	3710      	adds	r7, #16
 800e7ba:	46bd      	mov	sp, r7
 800e7bc:	bd80      	pop	{r7, pc}

0800e7be <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800e7be:	b580      	push	{r7, lr}
 800e7c0:	b082      	sub	sp, #8
 800e7c2:	af00      	add	r7, sp, #0
 800e7c4:	6078      	str	r0, [r7, #4]
 800e7c6:	460b      	mov	r3, r1
 800e7c8:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 800e7ca:	687b      	ldr	r3, [r7, #4]
 800e7cc:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800e7d0:	685b      	ldr	r3, [r3, #4]
 800e7d2:	78fa      	ldrb	r2, [r7, #3]
 800e7d4:	4611      	mov	r1, r2
 800e7d6:	6878      	ldr	r0, [r7, #4]
 800e7d8:	4798      	blx	r3
  return USBD_OK;
 800e7da:	2300      	movs	r3, #0
}
 800e7dc:	4618      	mov	r0, r3
 800e7de:	3708      	adds	r7, #8
 800e7e0:	46bd      	mov	sp, r7
 800e7e2:	bd80      	pop	{r7, pc}

0800e7e4 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800e7e4:	b580      	push	{r7, lr}
 800e7e6:	b082      	sub	sp, #8
 800e7e8:	af00      	add	r7, sp, #0
 800e7ea:	6078      	str	r0, [r7, #4]
 800e7ec:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800e7ee:	687b      	ldr	r3, [r7, #4]
 800e7f0:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800e7f4:	6839      	ldr	r1, [r7, #0]
 800e7f6:	4618      	mov	r0, r3
 800e7f8:	f000 fe94 	bl	800f524 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800e7fc:	687b      	ldr	r3, [r7, #4]
 800e7fe:	2201      	movs	r2, #1
 800e800:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

  pdev->ep0_data_len = pdev->request.wLength;
 800e804:	687b      	ldr	r3, [r7, #4]
 800e806:	f8b3 3286 	ldrh.w	r3, [r3, #646]	; 0x286
 800e80a:	461a      	mov	r2, r3
 800e80c:	687b      	ldr	r3, [r7, #4]
 800e80e:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

  switch (pdev->request.bmRequest & 0x1FU)
 800e812:	687b      	ldr	r3, [r7, #4]
 800e814:	f893 3280 	ldrb.w	r3, [r3, #640]	; 0x280
 800e818:	f003 031f 	and.w	r3, r3, #31
 800e81c:	2b01      	cmp	r3, #1
 800e81e:	d00c      	beq.n	800e83a <USBD_LL_SetupStage+0x56>
 800e820:	2b01      	cmp	r3, #1
 800e822:	d302      	bcc.n	800e82a <USBD_LL_SetupStage+0x46>
 800e824:	2b02      	cmp	r3, #2
 800e826:	d010      	beq.n	800e84a <USBD_LL_SetupStage+0x66>
 800e828:	e017      	b.n	800e85a <USBD_LL_SetupStage+0x76>
  {
  case USB_REQ_RECIPIENT_DEVICE:
    USBD_StdDevReq (pdev, &pdev->request);
 800e82a:	687b      	ldr	r3, [r7, #4]
 800e82c:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800e830:	4619      	mov	r1, r3
 800e832:	6878      	ldr	r0, [r7, #4]
 800e834:	f000 fa04 	bl	800ec40 <USBD_StdDevReq>
    break;
 800e838:	e01a      	b.n	800e870 <USBD_LL_SetupStage+0x8c>

  case USB_REQ_RECIPIENT_INTERFACE:
    USBD_StdItfReq(pdev, &pdev->request);
 800e83a:	687b      	ldr	r3, [r7, #4]
 800e83c:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800e840:	4619      	mov	r1, r3
 800e842:	6878      	ldr	r0, [r7, #4]
 800e844:	f000 fa66 	bl	800ed14 <USBD_StdItfReq>
    break;
 800e848:	e012      	b.n	800e870 <USBD_LL_SetupStage+0x8c>

  case USB_REQ_RECIPIENT_ENDPOINT:
    USBD_StdEPReq(pdev, &pdev->request);
 800e84a:	687b      	ldr	r3, [r7, #4]
 800e84c:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800e850:	4619      	mov	r1, r3
 800e852:	6878      	ldr	r0, [r7, #4]
 800e854:	f000 faa4 	bl	800eda0 <USBD_StdEPReq>
    break;
 800e858:	e00a      	b.n	800e870 <USBD_LL_SetupStage+0x8c>

  default:
    USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800e85a:	687b      	ldr	r3, [r7, #4]
 800e85c:	f893 3280 	ldrb.w	r3, [r3, #640]	; 0x280
 800e860:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800e864:	b2db      	uxtb	r3, r3
 800e866:	4619      	mov	r1, r3
 800e868:	6878      	ldr	r0, [r7, #4]
 800e86a:	f001 fbff 	bl	801006c <USBD_LL_StallEP>
    break;
 800e86e:	bf00      	nop
  }

  return USBD_OK;
 800e870:	2300      	movs	r3, #0
}
 800e872:	4618      	mov	r0, r3
 800e874:	3708      	adds	r7, #8
 800e876:	46bd      	mov	sp, r7
 800e878:	bd80      	pop	{r7, pc}

0800e87a <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800e87a:	b580      	push	{r7, lr}
 800e87c:	b086      	sub	sp, #24
 800e87e:	af00      	add	r7, sp, #0
 800e880:	60f8      	str	r0, [r7, #12]
 800e882:	460b      	mov	r3, r1
 800e884:	607a      	str	r2, [r7, #4]
 800e886:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef    *pep;

  if(epnum == 0U)
 800e888:	7afb      	ldrb	r3, [r7, #11]
 800e88a:	2b00      	cmp	r3, #0
 800e88c:	d14b      	bne.n	800e926 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 800e88e:	68fb      	ldr	r3, [r7, #12]
 800e890:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 800e894:	617b      	str	r3, [r7, #20]

    if ( pdev->ep0_state == USBD_EP0_DATA_OUT)
 800e896:	68fb      	ldr	r3, [r7, #12]
 800e898:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 800e89c:	2b03      	cmp	r3, #3
 800e89e:	d134      	bne.n	800e90a <USBD_LL_DataOutStage+0x90>
    {
      if(pep->rem_length > pep->maxpacket)
 800e8a0:	697b      	ldr	r3, [r7, #20]
 800e8a2:	68da      	ldr	r2, [r3, #12]
 800e8a4:	697b      	ldr	r3, [r7, #20]
 800e8a6:	691b      	ldr	r3, [r3, #16]
 800e8a8:	429a      	cmp	r2, r3
 800e8aa:	d919      	bls.n	800e8e0 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -=  pep->maxpacket;
 800e8ac:	697b      	ldr	r3, [r7, #20]
 800e8ae:	68da      	ldr	r2, [r3, #12]
 800e8b0:	697b      	ldr	r3, [r7, #20]
 800e8b2:	691b      	ldr	r3, [r3, #16]
 800e8b4:	1ad2      	subs	r2, r2, r3
 800e8b6:	697b      	ldr	r3, [r7, #20]
 800e8b8:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx (pdev,
                            pdata,
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800e8ba:	697b      	ldr	r3, [r7, #20]
 800e8bc:	68da      	ldr	r2, [r3, #12]
 800e8be:	697b      	ldr	r3, [r7, #20]
 800e8c0:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx (pdev,
 800e8c2:	429a      	cmp	r2, r3
 800e8c4:	d203      	bcs.n	800e8ce <USBD_LL_DataOutStage+0x54>
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800e8c6:	697b      	ldr	r3, [r7, #20]
 800e8c8:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx (pdev,
 800e8ca:	b29b      	uxth	r3, r3
 800e8cc:	e002      	b.n	800e8d4 <USBD_LL_DataOutStage+0x5a>
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800e8ce:	697b      	ldr	r3, [r7, #20]
 800e8d0:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx (pdev,
 800e8d2:	b29b      	uxth	r3, r3
 800e8d4:	461a      	mov	r2, r3
 800e8d6:	6879      	ldr	r1, [r7, #4]
 800e8d8:	68f8      	ldr	r0, [r7, #12]
 800e8da:	f000 ff17 	bl	800f70c <USBD_CtlContinueRx>
 800e8de:	e038      	b.n	800e952 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if((pdev->pClass->EP0_RxReady != NULL)&&
 800e8e0:	68fb      	ldr	r3, [r7, #12]
 800e8e2:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800e8e6:	691b      	ldr	r3, [r3, #16]
 800e8e8:	2b00      	cmp	r3, #0
 800e8ea:	d00a      	beq.n	800e902 <USBD_LL_DataOutStage+0x88>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800e8ec:	68fb      	ldr	r3, [r7, #12]
 800e8ee:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
        if((pdev->pClass->EP0_RxReady != NULL)&&
 800e8f2:	2b03      	cmp	r3, #3
 800e8f4:	d105      	bne.n	800e902 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800e8f6:	68fb      	ldr	r3, [r7, #12]
 800e8f8:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800e8fc:	691b      	ldr	r3, [r3, #16]
 800e8fe:	68f8      	ldr	r0, [r7, #12]
 800e900:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 800e902:	68f8      	ldr	r0, [r7, #12]
 800e904:	f000 ff14 	bl	800f730 <USBD_CtlSendStatus>
 800e908:	e023      	b.n	800e952 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 800e90a:	68fb      	ldr	r3, [r7, #12]
 800e90c:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 800e910:	2b05      	cmp	r3, #5
 800e912:	d11e      	bne.n	800e952 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 800e914:	68fb      	ldr	r3, [r7, #12]
 800e916:	2200      	movs	r2, #0
 800e918:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
        USBD_LL_StallEP(pdev, 0U);
 800e91c:	2100      	movs	r1, #0
 800e91e:	68f8      	ldr	r0, [r7, #12]
 800e920:	f001 fba4 	bl	801006c <USBD_LL_StallEP>
 800e924:	e015      	b.n	800e952 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if((pdev->pClass->DataOut != NULL) &&
 800e926:	68fb      	ldr	r3, [r7, #12]
 800e928:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800e92c:	699b      	ldr	r3, [r3, #24]
 800e92e:	2b00      	cmp	r3, #0
 800e930:	d00d      	beq.n	800e94e <USBD_LL_DataOutStage+0xd4>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 800e932:	68fb      	ldr	r3, [r7, #12]
 800e934:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
  else if((pdev->pClass->DataOut != NULL) &&
 800e938:	2b03      	cmp	r3, #3
 800e93a:	d108      	bne.n	800e94e <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 800e93c:	68fb      	ldr	r3, [r7, #12]
 800e93e:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800e942:	699b      	ldr	r3, [r3, #24]
 800e944:	7afa      	ldrb	r2, [r7, #11]
 800e946:	4611      	mov	r1, r2
 800e948:	68f8      	ldr	r0, [r7, #12]
 800e94a:	4798      	blx	r3
 800e94c:	e001      	b.n	800e952 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800e94e:	2302      	movs	r3, #2
 800e950:	e000      	b.n	800e954 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 800e952:	2300      	movs	r3, #0
}
 800e954:	4618      	mov	r0, r3
 800e956:	3718      	adds	r7, #24
 800e958:	46bd      	mov	sp, r7
 800e95a:	bd80      	pop	{r7, pc}

0800e95c <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev, uint8_t epnum,
                                       uint8_t *pdata)
{
 800e95c:	b580      	push	{r7, lr}
 800e95e:	b086      	sub	sp, #24
 800e960:	af00      	add	r7, sp, #0
 800e962:	60f8      	str	r0, [r7, #12]
 800e964:	460b      	mov	r3, r1
 800e966:	607a      	str	r2, [r7, #4]
 800e968:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if(epnum == 0U)
 800e96a:	7afb      	ldrb	r3, [r7, #11]
 800e96c:	2b00      	cmp	r3, #0
 800e96e:	d17f      	bne.n	800ea70 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 800e970:	68fb      	ldr	r3, [r7, #12]
 800e972:	3314      	adds	r3, #20
 800e974:	617b      	str	r3, [r7, #20]

    if ( pdev->ep0_state == USBD_EP0_DATA_IN)
 800e976:	68fb      	ldr	r3, [r7, #12]
 800e978:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 800e97c:	2b02      	cmp	r3, #2
 800e97e:	d15c      	bne.n	800ea3a <USBD_LL_DataInStage+0xde>
    {
      if(pep->rem_length > pep->maxpacket)
 800e980:	697b      	ldr	r3, [r7, #20]
 800e982:	68da      	ldr	r2, [r3, #12]
 800e984:	697b      	ldr	r3, [r7, #20]
 800e986:	691b      	ldr	r3, [r3, #16]
 800e988:	429a      	cmp	r2, r3
 800e98a:	d915      	bls.n	800e9b8 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 800e98c:	697b      	ldr	r3, [r7, #20]
 800e98e:	68da      	ldr	r2, [r3, #12]
 800e990:	697b      	ldr	r3, [r7, #20]
 800e992:	691b      	ldr	r3, [r3, #16]
 800e994:	1ad2      	subs	r2, r2, r3
 800e996:	697b      	ldr	r3, [r7, #20]
 800e998:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData (pdev, pdata, (uint16_t)pep->rem_length);
 800e99a:	697b      	ldr	r3, [r7, #20]
 800e99c:	68db      	ldr	r3, [r3, #12]
 800e99e:	b29b      	uxth	r3, r3
 800e9a0:	461a      	mov	r2, r3
 800e9a2:	6879      	ldr	r1, [r7, #4]
 800e9a4:	68f8      	ldr	r0, [r7, #12]
 800e9a6:	f000 fe81 	bl	800f6ac <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 800e9aa:	2300      	movs	r3, #0
 800e9ac:	2200      	movs	r2, #0
 800e9ae:	2100      	movs	r1, #0
 800e9b0:	68f8      	ldr	r0, [r7, #12]
 800e9b2:	f001 fc07 	bl	80101c4 <USBD_LL_PrepareReceive>
 800e9b6:	e04e      	b.n	800ea56 <USBD_LL_DataInStage+0xfa>
      }
      else
      { /* last packet is MPS multiple, so send ZLP packet */
        if((pep->total_length % pep->maxpacket == 0U) &&
 800e9b8:	697b      	ldr	r3, [r7, #20]
 800e9ba:	689b      	ldr	r3, [r3, #8]
 800e9bc:	697a      	ldr	r2, [r7, #20]
 800e9be:	6912      	ldr	r2, [r2, #16]
 800e9c0:	fbb3 f1f2 	udiv	r1, r3, r2
 800e9c4:	fb02 f201 	mul.w	r2, r2, r1
 800e9c8:	1a9b      	subs	r3, r3, r2
 800e9ca:	2b00      	cmp	r3, #0
 800e9cc:	d11c      	bne.n	800ea08 <USBD_LL_DataInStage+0xac>
           (pep->total_length >= pep->maxpacket) &&
 800e9ce:	697b      	ldr	r3, [r7, #20]
 800e9d0:	689a      	ldr	r2, [r3, #8]
 800e9d2:	697b      	ldr	r3, [r7, #20]
 800e9d4:	691b      	ldr	r3, [r3, #16]
        if((pep->total_length % pep->maxpacket == 0U) &&
 800e9d6:	429a      	cmp	r2, r3
 800e9d8:	d316      	bcc.n	800ea08 <USBD_LL_DataInStage+0xac>
           (pep->total_length < pdev->ep0_data_len))
 800e9da:	697b      	ldr	r3, [r7, #20]
 800e9dc:	689a      	ldr	r2, [r3, #8]
 800e9de:	68fb      	ldr	r3, [r7, #12]
 800e9e0:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
           (pep->total_length >= pep->maxpacket) &&
 800e9e4:	429a      	cmp	r2, r3
 800e9e6:	d20f      	bcs.n	800ea08 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800e9e8:	2200      	movs	r2, #0
 800e9ea:	2100      	movs	r1, #0
 800e9ec:	68f8      	ldr	r0, [r7, #12]
 800e9ee:	f000 fe5d 	bl	800f6ac <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800e9f2:	68fb      	ldr	r3, [r7, #12]
 800e9f4:	2200      	movs	r2, #0
 800e9f6:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 800e9fa:	2300      	movs	r3, #0
 800e9fc:	2200      	movs	r2, #0
 800e9fe:	2100      	movs	r1, #0
 800ea00:	68f8      	ldr	r0, [r7, #12]
 800ea02:	f001 fbdf 	bl	80101c4 <USBD_LL_PrepareReceive>
 800ea06:	e026      	b.n	800ea56 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if((pdev->pClass->EP0_TxSent != NULL)&&
 800ea08:	68fb      	ldr	r3, [r7, #12]
 800ea0a:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800ea0e:	68db      	ldr	r3, [r3, #12]
 800ea10:	2b00      	cmp	r3, #0
 800ea12:	d00a      	beq.n	800ea2a <USBD_LL_DataInStage+0xce>
             (pdev->dev_state == USBD_STATE_CONFIGURED))
 800ea14:	68fb      	ldr	r3, [r7, #12]
 800ea16:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
          if((pdev->pClass->EP0_TxSent != NULL)&&
 800ea1a:	2b03      	cmp	r3, #3
 800ea1c:	d105      	bne.n	800ea2a <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800ea1e:	68fb      	ldr	r3, [r7, #12]
 800ea20:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800ea24:	68db      	ldr	r3, [r3, #12]
 800ea26:	68f8      	ldr	r0, [r7, #12]
 800ea28:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 800ea2a:	2180      	movs	r1, #128	; 0x80
 800ea2c:	68f8      	ldr	r0, [r7, #12]
 800ea2e:	f001 fb1d 	bl	801006c <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 800ea32:	68f8      	ldr	r0, [r7, #12]
 800ea34:	f000 fe8f 	bl	800f756 <USBD_CtlReceiveStatus>
 800ea38:	e00d      	b.n	800ea56 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800ea3a:	68fb      	ldr	r3, [r7, #12]
 800ea3c:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 800ea40:	2b04      	cmp	r3, #4
 800ea42:	d004      	beq.n	800ea4e <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 800ea44:	68fb      	ldr	r3, [r7, #12]
 800ea46:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800ea4a:	2b00      	cmp	r3, #0
 800ea4c:	d103      	bne.n	800ea56 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 800ea4e:	2180      	movs	r1, #128	; 0x80
 800ea50:	68f8      	ldr	r0, [r7, #12]
 800ea52:	f001 fb0b 	bl	801006c <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 800ea56:	68fb      	ldr	r3, [r7, #12]
 800ea58:	f893 3278 	ldrb.w	r3, [r3, #632]	; 0x278
 800ea5c:	2b01      	cmp	r3, #1
 800ea5e:	d11d      	bne.n	800ea9c <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 800ea60:	68f8      	ldr	r0, [r7, #12]
 800ea62:	f7ff fe82 	bl	800e76a <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800ea66:	68fb      	ldr	r3, [r7, #12]
 800ea68:	2200      	movs	r2, #0
 800ea6a:	f883 2278 	strb.w	r2, [r3, #632]	; 0x278
 800ea6e:	e015      	b.n	800ea9c <USBD_LL_DataInStage+0x140>
    }
  }
  else if((pdev->pClass->DataIn != NULL) &&
 800ea70:	68fb      	ldr	r3, [r7, #12]
 800ea72:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800ea76:	695b      	ldr	r3, [r3, #20]
 800ea78:	2b00      	cmp	r3, #0
 800ea7a:	d00d      	beq.n	800ea98 <USBD_LL_DataInStage+0x13c>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 800ea7c:	68fb      	ldr	r3, [r7, #12]
 800ea7e:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
  else if((pdev->pClass->DataIn != NULL) &&
 800ea82:	2b03      	cmp	r3, #3
 800ea84:	d108      	bne.n	800ea98 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 800ea86:	68fb      	ldr	r3, [r7, #12]
 800ea88:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800ea8c:	695b      	ldr	r3, [r3, #20]
 800ea8e:	7afa      	ldrb	r2, [r7, #11]
 800ea90:	4611      	mov	r1, r2
 800ea92:	68f8      	ldr	r0, [r7, #12]
 800ea94:	4798      	blx	r3
 800ea96:	e001      	b.n	800ea9c <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800ea98:	2302      	movs	r3, #2
 800ea9a:	e000      	b.n	800ea9e <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 800ea9c:	2300      	movs	r3, #0
}
 800ea9e:	4618      	mov	r0, r3
 800eaa0:	3718      	adds	r7, #24
 800eaa2:	46bd      	mov	sp, r7
 800eaa4:	bd80      	pop	{r7, pc}

0800eaa6 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef  *pdev)
{
 800eaa6:	b580      	push	{r7, lr}
 800eaa8:	b082      	sub	sp, #8
 800eaaa:	af00      	add	r7, sp, #0
 800eaac:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800eaae:	2340      	movs	r3, #64	; 0x40
 800eab0:	2200      	movs	r2, #0
 800eab2:	2100      	movs	r1, #0
 800eab4:	6878      	ldr	r0, [r7, #4]
 800eab6:	f001 fa94 	bl	800ffe2 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800eaba:	687b      	ldr	r3, [r7, #4]
 800eabc:	2201      	movs	r2, #1
 800eabe:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800eac2:	687b      	ldr	r3, [r7, #4]
 800eac4:	2240      	movs	r2, #64	; 0x40
 800eac6:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800eaca:	2340      	movs	r3, #64	; 0x40
 800eacc:	2200      	movs	r2, #0
 800eace:	2180      	movs	r1, #128	; 0x80
 800ead0:	6878      	ldr	r0, [r7, #4]
 800ead2:	f001 fa86 	bl	800ffe2 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800ead6:	687b      	ldr	r3, [r7, #4]
 800ead8:	2201      	movs	r2, #1
 800eada:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800eadc:	687b      	ldr	r3, [r7, #4]
 800eade:	2240      	movs	r2, #64	; 0x40
 800eae0:	625a      	str	r2, [r3, #36]	; 0x24
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800eae2:	687b      	ldr	r3, [r7, #4]
 800eae4:	2201      	movs	r2, #1
 800eae6:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->ep0_state = USBD_EP0_IDLE;
 800eaea:	687b      	ldr	r3, [r7, #4]
 800eaec:	2200      	movs	r2, #0
 800eaee:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->dev_config= 0U;
 800eaf2:	687b      	ldr	r3, [r7, #4]
 800eaf4:	2200      	movs	r2, #0
 800eaf6:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800eaf8:	687b      	ldr	r3, [r7, #4]
 800eafa:	2200      	movs	r2, #0
 800eafc:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c

  if (pdev->pClassData)
 800eb00:	687b      	ldr	r3, [r7, #4]
 800eb02:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800eb06:	2b00      	cmp	r3, #0
 800eb08:	d009      	beq.n	800eb1e <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800eb0a:	687b      	ldr	r3, [r7, #4]
 800eb0c:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800eb10:	685b      	ldr	r3, [r3, #4]
 800eb12:	687a      	ldr	r2, [r7, #4]
 800eb14:	6852      	ldr	r2, [r2, #4]
 800eb16:	b2d2      	uxtb	r2, r2
 800eb18:	4611      	mov	r1, r2
 800eb1a:	6878      	ldr	r0, [r7, #4]
 800eb1c:	4798      	blx	r3
  }

  return USBD_OK;
 800eb1e:	2300      	movs	r3, #0
}
 800eb20:	4618      	mov	r0, r3
 800eb22:	3708      	adds	r7, #8
 800eb24:	46bd      	mov	sp, r7
 800eb26:	bd80      	pop	{r7, pc}

0800eb28 <USBD_LL_SetSpeed>:
*         Handle Reset event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef  *pdev, USBD_SpeedTypeDef speed)
{
 800eb28:	b480      	push	{r7}
 800eb2a:	b083      	sub	sp, #12
 800eb2c:	af00      	add	r7, sp, #0
 800eb2e:	6078      	str	r0, [r7, #4]
 800eb30:	460b      	mov	r3, r1
 800eb32:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800eb34:	687b      	ldr	r3, [r7, #4]
 800eb36:	78fa      	ldrb	r2, [r7, #3]
 800eb38:	741a      	strb	r2, [r3, #16]
  return USBD_OK;
 800eb3a:	2300      	movs	r3, #0
}
 800eb3c:	4618      	mov	r0, r3
 800eb3e:	370c      	adds	r7, #12
 800eb40:	46bd      	mov	sp, r7
 800eb42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb46:	4770      	bx	lr

0800eb48 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef  *pdev)
{
 800eb48:	b480      	push	{r7}
 800eb4a:	b083      	sub	sp, #12
 800eb4c:	af00      	add	r7, sp, #0
 800eb4e:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 800eb50:	687b      	ldr	r3, [r7, #4]
 800eb52:	f893 2274 	ldrb.w	r2, [r3, #628]	; 0x274
 800eb56:	687b      	ldr	r3, [r7, #4]
 800eb58:	f883 2275 	strb.w	r2, [r3, #629]	; 0x275
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800eb5c:	687b      	ldr	r3, [r7, #4]
 800eb5e:	2204      	movs	r2, #4
 800eb60:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  return USBD_OK;
 800eb64:	2300      	movs	r3, #0
}
 800eb66:	4618      	mov	r0, r3
 800eb68:	370c      	adds	r7, #12
 800eb6a:	46bd      	mov	sp, r7
 800eb6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb70:	4770      	bx	lr

0800eb72 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef  *pdev)
{
 800eb72:	b480      	push	{r7}
 800eb74:	b083      	sub	sp, #12
 800eb76:	af00      	add	r7, sp, #0
 800eb78:	6078      	str	r0, [r7, #4]
  pdev->dev_state = pdev->dev_old_state;
 800eb7a:	687b      	ldr	r3, [r7, #4]
 800eb7c:	f893 2275 	ldrb.w	r2, [r3, #629]	; 0x275
 800eb80:	687b      	ldr	r3, [r7, #4]
 800eb82:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  return USBD_OK;
 800eb86:	2300      	movs	r3, #0
}
 800eb88:	4618      	mov	r0, r3
 800eb8a:	370c      	adds	r7, #12
 800eb8c:	46bd      	mov	sp, r7
 800eb8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb92:	4770      	bx	lr

0800eb94 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef  *pdev)
{
 800eb94:	b580      	push	{r7, lr}
 800eb96:	b082      	sub	sp, #8
 800eb98:	af00      	add	r7, sp, #0
 800eb9a:	6078      	str	r0, [r7, #4]
  if(pdev->dev_state == USBD_STATE_CONFIGURED)
 800eb9c:	687b      	ldr	r3, [r7, #4]
 800eb9e:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800eba2:	2b03      	cmp	r3, #3
 800eba4:	d10b      	bne.n	800ebbe <USBD_LL_SOF+0x2a>
  {
    if(pdev->pClass->SOF != NULL)
 800eba6:	687b      	ldr	r3, [r7, #4]
 800eba8:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800ebac:	69db      	ldr	r3, [r3, #28]
 800ebae:	2b00      	cmp	r3, #0
 800ebb0:	d005      	beq.n	800ebbe <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800ebb2:	687b      	ldr	r3, [r7, #4]
 800ebb4:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800ebb8:	69db      	ldr	r3, [r3, #28]
 800ebba:	6878      	ldr	r0, [r7, #4]
 800ebbc:	4798      	blx	r3
    }
  }
  return USBD_OK;
 800ebbe:	2300      	movs	r3, #0
}
 800ebc0:	4618      	mov	r0, r3
 800ebc2:	3708      	adds	r7, #8
 800ebc4:	46bd      	mov	sp, r7
 800ebc6:	bd80      	pop	{r7, pc}

0800ebc8 <USBD_LL_IsoINIncomplete>:
*         Handle iso in incomplete event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef  *pdev, uint8_t epnum)
{
 800ebc8:	b480      	push	{r7}
 800ebca:	b083      	sub	sp, #12
 800ebcc:	af00      	add	r7, sp, #0
 800ebce:	6078      	str	r0, [r7, #4]
 800ebd0:	460b      	mov	r3, r1
 800ebd2:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 800ebd4:	2300      	movs	r3, #0
}
 800ebd6:	4618      	mov	r0, r3
 800ebd8:	370c      	adds	r7, #12
 800ebda:	46bd      	mov	sp, r7
 800ebdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebe0:	4770      	bx	lr

0800ebe2 <USBD_LL_IsoOUTIncomplete>:
*         Handle iso out incomplete event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef  *pdev, uint8_t epnum)
{
 800ebe2:	b480      	push	{r7}
 800ebe4:	b083      	sub	sp, #12
 800ebe6:	af00      	add	r7, sp, #0
 800ebe8:	6078      	str	r0, [r7, #4]
 800ebea:	460b      	mov	r3, r1
 800ebec:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 800ebee:	2300      	movs	r3, #0
}
 800ebf0:	4618      	mov	r0, r3
 800ebf2:	370c      	adds	r7, #12
 800ebf4:	46bd      	mov	sp, r7
 800ebf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebfa:	4770      	bx	lr

0800ebfc <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef  *pdev)
{
 800ebfc:	b480      	push	{r7}
 800ebfe:	b083      	sub	sp, #12
 800ec00:	af00      	add	r7, sp, #0
 800ec02:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800ec04:	2300      	movs	r3, #0
}
 800ec06:	4618      	mov	r0, r3
 800ec08:	370c      	adds	r7, #12
 800ec0a:	46bd      	mov	sp, r7
 800ec0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec10:	4770      	bx	lr

0800ec12 <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef  *pdev)
{
 800ec12:	b580      	push	{r7, lr}
 800ec14:	b082      	sub	sp, #8
 800ec16:	af00      	add	r7, sp, #0
 800ec18:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800ec1a:	687b      	ldr	r3, [r7, #4]
 800ec1c:	2201      	movs	r2, #1
 800ec1e:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800ec22:	687b      	ldr	r3, [r7, #4]
 800ec24:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800ec28:	685b      	ldr	r3, [r3, #4]
 800ec2a:	687a      	ldr	r2, [r7, #4]
 800ec2c:	6852      	ldr	r2, [r2, #4]
 800ec2e:	b2d2      	uxtb	r2, r2
 800ec30:	4611      	mov	r1, r2
 800ec32:	6878      	ldr	r0, [r7, #4]
 800ec34:	4798      	blx	r3

  return USBD_OK;
 800ec36:	2300      	movs	r3, #0
}
 800ec38:	4618      	mov	r0, r3
 800ec3a:	3708      	adds	r7, #8
 800ec3c:	46bd      	mov	sp, r7
 800ec3e:	bd80      	pop	{r7, pc}

0800ec40 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 800ec40:	b580      	push	{r7, lr}
 800ec42:	b084      	sub	sp, #16
 800ec44:	af00      	add	r7, sp, #0
 800ec46:	6078      	str	r0, [r7, #4]
 800ec48:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800ec4a:	2300      	movs	r3, #0
 800ec4c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ec4e:	683b      	ldr	r3, [r7, #0]
 800ec50:	781b      	ldrb	r3, [r3, #0]
 800ec52:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800ec56:	2b20      	cmp	r3, #32
 800ec58:	d004      	beq.n	800ec64 <USBD_StdDevReq+0x24>
 800ec5a:	2b40      	cmp	r3, #64	; 0x40
 800ec5c:	d002      	beq.n	800ec64 <USBD_StdDevReq+0x24>
 800ec5e:	2b00      	cmp	r3, #0
 800ec60:	d008      	beq.n	800ec74 <USBD_StdDevReq+0x34>
 800ec62:	e04c      	b.n	800ecfe <USBD_StdDevReq+0xbe>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    pdev->pClass->Setup(pdev, req);
 800ec64:	687b      	ldr	r3, [r7, #4]
 800ec66:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800ec6a:	689b      	ldr	r3, [r3, #8]
 800ec6c:	6839      	ldr	r1, [r7, #0]
 800ec6e:	6878      	ldr	r0, [r7, #4]
 800ec70:	4798      	blx	r3
    break;
 800ec72:	e049      	b.n	800ed08 <USBD_StdDevReq+0xc8>

  case USB_REQ_TYPE_STANDARD:

    switch (req->bRequest)
 800ec74:	683b      	ldr	r3, [r7, #0]
 800ec76:	785b      	ldrb	r3, [r3, #1]
 800ec78:	2b09      	cmp	r3, #9
 800ec7a:	d83a      	bhi.n	800ecf2 <USBD_StdDevReq+0xb2>
 800ec7c:	a201      	add	r2, pc, #4	; (adr r2, 800ec84 <USBD_StdDevReq+0x44>)
 800ec7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ec82:	bf00      	nop
 800ec84:	0800ecd5 	.word	0x0800ecd5
 800ec88:	0800ece9 	.word	0x0800ece9
 800ec8c:	0800ecf3 	.word	0x0800ecf3
 800ec90:	0800ecdf 	.word	0x0800ecdf
 800ec94:	0800ecf3 	.word	0x0800ecf3
 800ec98:	0800ecb7 	.word	0x0800ecb7
 800ec9c:	0800ecad 	.word	0x0800ecad
 800eca0:	0800ecf3 	.word	0x0800ecf3
 800eca4:	0800eccb 	.word	0x0800eccb
 800eca8:	0800ecc1 	.word	0x0800ecc1
    {
    case USB_REQ_GET_DESCRIPTOR:

      USBD_GetDescriptor (pdev, req);
 800ecac:	6839      	ldr	r1, [r7, #0]
 800ecae:	6878      	ldr	r0, [r7, #4]
 800ecb0:	f000 f9d2 	bl	800f058 <USBD_GetDescriptor>
      break;
 800ecb4:	e022      	b.n	800ecfc <USBD_StdDevReq+0xbc>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress (pdev, req);
 800ecb6:	6839      	ldr	r1, [r7, #0]
 800ecb8:	6878      	ldr	r0, [r7, #4]
 800ecba:	f000 fac7 	bl	800f24c <USBD_SetAddress>
      break;
 800ecbe:	e01d      	b.n	800ecfc <USBD_StdDevReq+0xbc>

    case USB_REQ_SET_CONFIGURATION:
      USBD_SetConfig (pdev, req);
 800ecc0:	6839      	ldr	r1, [r7, #0]
 800ecc2:	6878      	ldr	r0, [r7, #4]
 800ecc4:	f000 fb04 	bl	800f2d0 <USBD_SetConfig>
      break;
 800ecc8:	e018      	b.n	800ecfc <USBD_StdDevReq+0xbc>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig (pdev, req);
 800ecca:	6839      	ldr	r1, [r7, #0]
 800eccc:	6878      	ldr	r0, [r7, #4]
 800ecce:	f000 fb8d 	bl	800f3ec <USBD_GetConfig>
      break;
 800ecd2:	e013      	b.n	800ecfc <USBD_StdDevReq+0xbc>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus (pdev, req);
 800ecd4:	6839      	ldr	r1, [r7, #0]
 800ecd6:	6878      	ldr	r0, [r7, #4]
 800ecd8:	f000 fbbc 	bl	800f454 <USBD_GetStatus>
      break;
 800ecdc:	e00e      	b.n	800ecfc <USBD_StdDevReq+0xbc>


    case USB_REQ_SET_FEATURE:
      USBD_SetFeature (pdev, req);
 800ecde:	6839      	ldr	r1, [r7, #0]
 800ece0:	6878      	ldr	r0, [r7, #4]
 800ece2:	f000 fbea 	bl	800f4ba <USBD_SetFeature>
      break;
 800ece6:	e009      	b.n	800ecfc <USBD_StdDevReq+0xbc>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature (pdev, req);
 800ece8:	6839      	ldr	r1, [r7, #0]
 800ecea:	6878      	ldr	r0, [r7, #4]
 800ecec:	f000 fbf9 	bl	800f4e2 <USBD_ClrFeature>
      break;
 800ecf0:	e004      	b.n	800ecfc <USBD_StdDevReq+0xbc>

    default:
      USBD_CtlError(pdev, req);
 800ecf2:	6839      	ldr	r1, [r7, #0]
 800ecf4:	6878      	ldr	r0, [r7, #4]
 800ecf6:	f000 fc52 	bl	800f59e <USBD_CtlError>
      break;
 800ecfa:	bf00      	nop
    }
    break;
 800ecfc:	e004      	b.n	800ed08 <USBD_StdDevReq+0xc8>

  default:
    USBD_CtlError(pdev, req);
 800ecfe:	6839      	ldr	r1, [r7, #0]
 800ed00:	6878      	ldr	r0, [r7, #4]
 800ed02:	f000 fc4c 	bl	800f59e <USBD_CtlError>
    break;
 800ed06:	bf00      	nop
  }

  return ret;
 800ed08:	7bfb      	ldrb	r3, [r7, #15]
}
 800ed0a:	4618      	mov	r0, r3
 800ed0c:	3710      	adds	r7, #16
 800ed0e:	46bd      	mov	sp, r7
 800ed10:	bd80      	pop	{r7, pc}
 800ed12:	bf00      	nop

0800ed14 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 800ed14:	b580      	push	{r7, lr}
 800ed16:	b084      	sub	sp, #16
 800ed18:	af00      	add	r7, sp, #0
 800ed1a:	6078      	str	r0, [r7, #4]
 800ed1c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800ed1e:	2300      	movs	r3, #0
 800ed20:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ed22:	683b      	ldr	r3, [r7, #0]
 800ed24:	781b      	ldrb	r3, [r3, #0]
 800ed26:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800ed2a:	2b20      	cmp	r3, #32
 800ed2c:	d003      	beq.n	800ed36 <USBD_StdItfReq+0x22>
 800ed2e:	2b40      	cmp	r3, #64	; 0x40
 800ed30:	d001      	beq.n	800ed36 <USBD_StdItfReq+0x22>
 800ed32:	2b00      	cmp	r3, #0
 800ed34:	d12a      	bne.n	800ed8c <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 800ed36:	687b      	ldr	r3, [r7, #4]
 800ed38:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800ed3c:	3b01      	subs	r3, #1
 800ed3e:	2b02      	cmp	r3, #2
 800ed40:	d81d      	bhi.n	800ed7e <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800ed42:	683b      	ldr	r3, [r7, #0]
 800ed44:	889b      	ldrh	r3, [r3, #4]
 800ed46:	b2db      	uxtb	r3, r3
 800ed48:	2b01      	cmp	r3, #1
 800ed4a:	d813      	bhi.n	800ed74 <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup (pdev, req);
 800ed4c:	687b      	ldr	r3, [r7, #4]
 800ed4e:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800ed52:	689b      	ldr	r3, [r3, #8]
 800ed54:	6839      	ldr	r1, [r7, #0]
 800ed56:	6878      	ldr	r0, [r7, #4]
 800ed58:	4798      	blx	r3
 800ed5a:	4603      	mov	r3, r0
 800ed5c:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 800ed5e:	683b      	ldr	r3, [r7, #0]
 800ed60:	88db      	ldrh	r3, [r3, #6]
 800ed62:	2b00      	cmp	r3, #0
 800ed64:	d110      	bne.n	800ed88 <USBD_StdItfReq+0x74>
 800ed66:	7bfb      	ldrb	r3, [r7, #15]
 800ed68:	2b00      	cmp	r3, #0
 800ed6a:	d10d      	bne.n	800ed88 <USBD_StdItfReq+0x74>
        {
          USBD_CtlSendStatus(pdev);
 800ed6c:	6878      	ldr	r0, [r7, #4]
 800ed6e:	f000 fcdf 	bl	800f730 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 800ed72:	e009      	b.n	800ed88 <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 800ed74:	6839      	ldr	r1, [r7, #0]
 800ed76:	6878      	ldr	r0, [r7, #4]
 800ed78:	f000 fc11 	bl	800f59e <USBD_CtlError>
      break;
 800ed7c:	e004      	b.n	800ed88 <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 800ed7e:	6839      	ldr	r1, [r7, #0]
 800ed80:	6878      	ldr	r0, [r7, #4]
 800ed82:	f000 fc0c 	bl	800f59e <USBD_CtlError>
      break;
 800ed86:	e000      	b.n	800ed8a <USBD_StdItfReq+0x76>
      break;
 800ed88:	bf00      	nop
    }
    break;
 800ed8a:	e004      	b.n	800ed96 <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 800ed8c:	6839      	ldr	r1, [r7, #0]
 800ed8e:	6878      	ldr	r0, [r7, #4]
 800ed90:	f000 fc05 	bl	800f59e <USBD_CtlError>
    break;
 800ed94:	bf00      	nop
  }

  return USBD_OK;
 800ed96:	2300      	movs	r3, #0
}
 800ed98:	4618      	mov	r0, r3
 800ed9a:	3710      	adds	r7, #16
 800ed9c:	46bd      	mov	sp, r7
 800ed9e:	bd80      	pop	{r7, pc}

0800eda0 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 800eda0:	b580      	push	{r7, lr}
 800eda2:	b084      	sub	sp, #16
 800eda4:	af00      	add	r7, sp, #0
 800eda6:	6078      	str	r0, [r7, #4]
 800eda8:	6039      	str	r1, [r7, #0]

  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800edaa:	2300      	movs	r3, #0
 800edac:	73fb      	strb	r3, [r7, #15]
  USBD_EndpointTypeDef   *pep;
  ep_addr  = LOBYTE(req->wIndex);
 800edae:	683b      	ldr	r3, [r7, #0]
 800edb0:	889b      	ldrh	r3, [r3, #4]
 800edb2:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800edb4:	683b      	ldr	r3, [r7, #0]
 800edb6:	781b      	ldrb	r3, [r3, #0]
 800edb8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800edbc:	2b20      	cmp	r3, #32
 800edbe:	d004      	beq.n	800edca <USBD_StdEPReq+0x2a>
 800edc0:	2b40      	cmp	r3, #64	; 0x40
 800edc2:	d002      	beq.n	800edca <USBD_StdEPReq+0x2a>
 800edc4:	2b00      	cmp	r3, #0
 800edc6:	d008      	beq.n	800edda <USBD_StdEPReq+0x3a>
 800edc8:	e13b      	b.n	800f042 <USBD_StdEPReq+0x2a2>
  {

  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    pdev->pClass->Setup (pdev, req);
 800edca:	687b      	ldr	r3, [r7, #4]
 800edcc:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800edd0:	689b      	ldr	r3, [r3, #8]
 800edd2:	6839      	ldr	r1, [r7, #0]
 800edd4:	6878      	ldr	r0, [r7, #4]
 800edd6:	4798      	blx	r3
    break;
 800edd8:	e138      	b.n	800f04c <USBD_StdEPReq+0x2ac>

  case USB_REQ_TYPE_STANDARD:
    /* Check if it is a class request */
    if ((req->bmRequest & 0x60U) == 0x20U)
 800edda:	683b      	ldr	r3, [r7, #0]
 800eddc:	781b      	ldrb	r3, [r3, #0]
 800edde:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800ede2:	2b20      	cmp	r3, #32
 800ede4:	d10a      	bne.n	800edfc <USBD_StdEPReq+0x5c>
    {
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup (pdev, req);
 800ede6:	687b      	ldr	r3, [r7, #4]
 800ede8:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800edec:	689b      	ldr	r3, [r3, #8]
 800edee:	6839      	ldr	r1, [r7, #0]
 800edf0:	6878      	ldr	r0, [r7, #4]
 800edf2:	4798      	blx	r3
 800edf4:	4603      	mov	r3, r0
 800edf6:	73fb      	strb	r3, [r7, #15]

      return ret;
 800edf8:	7bfb      	ldrb	r3, [r7, #15]
 800edfa:	e128      	b.n	800f04e <USBD_StdEPReq+0x2ae>
    }

    switch (req->bRequest)
 800edfc:	683b      	ldr	r3, [r7, #0]
 800edfe:	785b      	ldrb	r3, [r3, #1]
 800ee00:	2b01      	cmp	r3, #1
 800ee02:	d03e      	beq.n	800ee82 <USBD_StdEPReq+0xe2>
 800ee04:	2b03      	cmp	r3, #3
 800ee06:	d002      	beq.n	800ee0e <USBD_StdEPReq+0x6e>
 800ee08:	2b00      	cmp	r3, #0
 800ee0a:	d070      	beq.n	800eeee <USBD_StdEPReq+0x14e>
 800ee0c:	e113      	b.n	800f036 <USBD_StdEPReq+0x296>
    {

    case USB_REQ_SET_FEATURE :

      switch (pdev->dev_state)
 800ee0e:	687b      	ldr	r3, [r7, #4]
 800ee10:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800ee14:	2b02      	cmp	r3, #2
 800ee16:	d002      	beq.n	800ee1e <USBD_StdEPReq+0x7e>
 800ee18:	2b03      	cmp	r3, #3
 800ee1a:	d015      	beq.n	800ee48 <USBD_StdEPReq+0xa8>
 800ee1c:	e02b      	b.n	800ee76 <USBD_StdEPReq+0xd6>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ee1e:	7bbb      	ldrb	r3, [r7, #14]
 800ee20:	2b00      	cmp	r3, #0
 800ee22:	d00c      	beq.n	800ee3e <USBD_StdEPReq+0x9e>
 800ee24:	7bbb      	ldrb	r3, [r7, #14]
 800ee26:	2b80      	cmp	r3, #128	; 0x80
 800ee28:	d009      	beq.n	800ee3e <USBD_StdEPReq+0x9e>
        {
          USBD_LL_StallEP(pdev, ep_addr);
 800ee2a:	7bbb      	ldrb	r3, [r7, #14]
 800ee2c:	4619      	mov	r1, r3
 800ee2e:	6878      	ldr	r0, [r7, #4]
 800ee30:	f001 f91c 	bl	801006c <USBD_LL_StallEP>
          USBD_LL_StallEP(pdev, 0x80U);
 800ee34:	2180      	movs	r1, #128	; 0x80
 800ee36:	6878      	ldr	r0, [r7, #4]
 800ee38:	f001 f918 	bl	801006c <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800ee3c:	e020      	b.n	800ee80 <USBD_StdEPReq+0xe0>
          USBD_CtlError(pdev, req);
 800ee3e:	6839      	ldr	r1, [r7, #0]
 800ee40:	6878      	ldr	r0, [r7, #4]
 800ee42:	f000 fbac 	bl	800f59e <USBD_CtlError>
        break;
 800ee46:	e01b      	b.n	800ee80 <USBD_StdEPReq+0xe0>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800ee48:	683b      	ldr	r3, [r7, #0]
 800ee4a:	885b      	ldrh	r3, [r3, #2]
 800ee4c:	2b00      	cmp	r3, #0
 800ee4e:	d10e      	bne.n	800ee6e <USBD_StdEPReq+0xce>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800ee50:	7bbb      	ldrb	r3, [r7, #14]
 800ee52:	2b00      	cmp	r3, #0
 800ee54:	d00b      	beq.n	800ee6e <USBD_StdEPReq+0xce>
 800ee56:	7bbb      	ldrb	r3, [r7, #14]
 800ee58:	2b80      	cmp	r3, #128	; 0x80
 800ee5a:	d008      	beq.n	800ee6e <USBD_StdEPReq+0xce>
 800ee5c:	683b      	ldr	r3, [r7, #0]
 800ee5e:	88db      	ldrh	r3, [r3, #6]
 800ee60:	2b00      	cmp	r3, #0
 800ee62:	d104      	bne.n	800ee6e <USBD_StdEPReq+0xce>
          {
            USBD_LL_StallEP(pdev, ep_addr);
 800ee64:	7bbb      	ldrb	r3, [r7, #14]
 800ee66:	4619      	mov	r1, r3
 800ee68:	6878      	ldr	r0, [r7, #4]
 800ee6a:	f001 f8ff 	bl	801006c <USBD_LL_StallEP>
          }
        }
        USBD_CtlSendStatus(pdev);
 800ee6e:	6878      	ldr	r0, [r7, #4]
 800ee70:	f000 fc5e 	bl	800f730 <USBD_CtlSendStatus>

        break;
 800ee74:	e004      	b.n	800ee80 <USBD_StdEPReq+0xe0>

      default:
        USBD_CtlError(pdev, req);
 800ee76:	6839      	ldr	r1, [r7, #0]
 800ee78:	6878      	ldr	r0, [r7, #4]
 800ee7a:	f000 fb90 	bl	800f59e <USBD_CtlError>
        break;
 800ee7e:	bf00      	nop
      }
      break;
 800ee80:	e0de      	b.n	800f040 <USBD_StdEPReq+0x2a0>

    case USB_REQ_CLEAR_FEATURE :

      switch (pdev->dev_state)
 800ee82:	687b      	ldr	r3, [r7, #4]
 800ee84:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800ee88:	2b02      	cmp	r3, #2
 800ee8a:	d002      	beq.n	800ee92 <USBD_StdEPReq+0xf2>
 800ee8c:	2b03      	cmp	r3, #3
 800ee8e:	d015      	beq.n	800eebc <USBD_StdEPReq+0x11c>
 800ee90:	e026      	b.n	800eee0 <USBD_StdEPReq+0x140>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ee92:	7bbb      	ldrb	r3, [r7, #14]
 800ee94:	2b00      	cmp	r3, #0
 800ee96:	d00c      	beq.n	800eeb2 <USBD_StdEPReq+0x112>
 800ee98:	7bbb      	ldrb	r3, [r7, #14]
 800ee9a:	2b80      	cmp	r3, #128	; 0x80
 800ee9c:	d009      	beq.n	800eeb2 <USBD_StdEPReq+0x112>
        {
          USBD_LL_StallEP(pdev, ep_addr);
 800ee9e:	7bbb      	ldrb	r3, [r7, #14]
 800eea0:	4619      	mov	r1, r3
 800eea2:	6878      	ldr	r0, [r7, #4]
 800eea4:	f001 f8e2 	bl	801006c <USBD_LL_StallEP>
          USBD_LL_StallEP(pdev, 0x80U);
 800eea8:	2180      	movs	r1, #128	; 0x80
 800eeaa:	6878      	ldr	r0, [r7, #4]
 800eeac:	f001 f8de 	bl	801006c <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800eeb0:	e01c      	b.n	800eeec <USBD_StdEPReq+0x14c>
          USBD_CtlError(pdev, req);
 800eeb2:	6839      	ldr	r1, [r7, #0]
 800eeb4:	6878      	ldr	r0, [r7, #4]
 800eeb6:	f000 fb72 	bl	800f59e <USBD_CtlError>
        break;
 800eeba:	e017      	b.n	800eeec <USBD_StdEPReq+0x14c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800eebc:	683b      	ldr	r3, [r7, #0]
 800eebe:	885b      	ldrh	r3, [r3, #2]
 800eec0:	2b00      	cmp	r3, #0
 800eec2:	d112      	bne.n	800eeea <USBD_StdEPReq+0x14a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 800eec4:	7bbb      	ldrb	r3, [r7, #14]
 800eec6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800eeca:	2b00      	cmp	r3, #0
 800eecc:	d004      	beq.n	800eed8 <USBD_StdEPReq+0x138>
          {
            USBD_LL_ClearStallEP(pdev, ep_addr);
 800eece:	7bbb      	ldrb	r3, [r7, #14]
 800eed0:	4619      	mov	r1, r3
 800eed2:	6878      	ldr	r0, [r7, #4]
 800eed4:	f001 f8e9 	bl	80100aa <USBD_LL_ClearStallEP>
          }
          USBD_CtlSendStatus(pdev);
 800eed8:	6878      	ldr	r0, [r7, #4]
 800eeda:	f000 fc29 	bl	800f730 <USBD_CtlSendStatus>
        }
        break;
 800eede:	e004      	b.n	800eeea <USBD_StdEPReq+0x14a>

      default:
        USBD_CtlError(pdev, req);
 800eee0:	6839      	ldr	r1, [r7, #0]
 800eee2:	6878      	ldr	r0, [r7, #4]
 800eee4:	f000 fb5b 	bl	800f59e <USBD_CtlError>
        break;
 800eee8:	e000      	b.n	800eeec <USBD_StdEPReq+0x14c>
        break;
 800eeea:	bf00      	nop
      }
      break;
 800eeec:	e0a8      	b.n	800f040 <USBD_StdEPReq+0x2a0>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 800eeee:	687b      	ldr	r3, [r7, #4]
 800eef0:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800eef4:	2b02      	cmp	r3, #2
 800eef6:	d002      	beq.n	800eefe <USBD_StdEPReq+0x15e>
 800eef8:	2b03      	cmp	r3, #3
 800eefa:	d031      	beq.n	800ef60 <USBD_StdEPReq+0x1c0>
 800eefc:	e095      	b.n	800f02a <USBD_StdEPReq+0x28a>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800eefe:	7bbb      	ldrb	r3, [r7, #14]
 800ef00:	2b00      	cmp	r3, #0
 800ef02:	d007      	beq.n	800ef14 <USBD_StdEPReq+0x174>
 800ef04:	7bbb      	ldrb	r3, [r7, #14]
 800ef06:	2b80      	cmp	r3, #128	; 0x80
 800ef08:	d004      	beq.n	800ef14 <USBD_StdEPReq+0x174>
        {
          USBD_CtlError(pdev, req);
 800ef0a:	6839      	ldr	r1, [r7, #0]
 800ef0c:	6878      	ldr	r0, [r7, #4]
 800ef0e:	f000 fb46 	bl	800f59e <USBD_CtlError>
          break;
 800ef12:	e08f      	b.n	800f034 <USBD_StdEPReq+0x294>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 800ef14:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ef18:	2b00      	cmp	r3, #0
 800ef1a:	da0b      	bge.n	800ef34 <USBD_StdEPReq+0x194>
 800ef1c:	7bbb      	ldrb	r3, [r7, #14]
 800ef1e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ef22:	4613      	mov	r3, r2
 800ef24:	009b      	lsls	r3, r3, #2
 800ef26:	4413      	add	r3, r2
 800ef28:	009b      	lsls	r3, r3, #2
 800ef2a:	3310      	adds	r3, #16
 800ef2c:	687a      	ldr	r2, [r7, #4]
 800ef2e:	4413      	add	r3, r2
 800ef30:	3304      	adds	r3, #4
 800ef32:	e00a      	b.n	800ef4a <USBD_StdEPReq+0x1aa>
          &pdev->ep_out[ep_addr & 0x7FU];
 800ef34:	7bbb      	ldrb	r3, [r7, #14]
 800ef36:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 800ef3a:	4613      	mov	r3, r2
 800ef3c:	009b      	lsls	r3, r3, #2
 800ef3e:	4413      	add	r3, r2
 800ef40:	009b      	lsls	r3, r3, #2
 800ef42:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 800ef46:	687a      	ldr	r2, [r7, #4]
 800ef48:	4413      	add	r3, r2
 800ef4a:	60bb      	str	r3, [r7, #8]

          pep->status = 0x0000U;
 800ef4c:	68bb      	ldr	r3, [r7, #8]
 800ef4e:	2200      	movs	r2, #0
 800ef50:	601a      	str	r2, [r3, #0]

          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 800ef52:	68bb      	ldr	r3, [r7, #8]
 800ef54:	2202      	movs	r2, #2
 800ef56:	4619      	mov	r1, r3
 800ef58:	6878      	ldr	r0, [r7, #4]
 800ef5a:	f000 fb8b 	bl	800f674 <USBD_CtlSendData>
          break;
 800ef5e:	e069      	b.n	800f034 <USBD_StdEPReq+0x294>

      case USBD_STATE_CONFIGURED:
        if((ep_addr & 0x80U) == 0x80U)
 800ef60:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ef64:	2b00      	cmp	r3, #0
 800ef66:	da11      	bge.n	800ef8c <USBD_StdEPReq+0x1ec>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800ef68:	7bbb      	ldrb	r3, [r7, #14]
 800ef6a:	f003 020f 	and.w	r2, r3, #15
 800ef6e:	6879      	ldr	r1, [r7, #4]
 800ef70:	4613      	mov	r3, r2
 800ef72:	009b      	lsls	r3, r3, #2
 800ef74:	4413      	add	r3, r2
 800ef76:	009b      	lsls	r3, r3, #2
 800ef78:	440b      	add	r3, r1
 800ef7a:	3318      	adds	r3, #24
 800ef7c:	681b      	ldr	r3, [r3, #0]
 800ef7e:	2b00      	cmp	r3, #0
 800ef80:	d117      	bne.n	800efb2 <USBD_StdEPReq+0x212>
          {
            USBD_CtlError(pdev, req);
 800ef82:	6839      	ldr	r1, [r7, #0]
 800ef84:	6878      	ldr	r0, [r7, #4]
 800ef86:	f000 fb0a 	bl	800f59e <USBD_CtlError>
            break;
 800ef8a:	e053      	b.n	800f034 <USBD_StdEPReq+0x294>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800ef8c:	7bbb      	ldrb	r3, [r7, #14]
 800ef8e:	f003 020f 	and.w	r2, r3, #15
 800ef92:	6879      	ldr	r1, [r7, #4]
 800ef94:	4613      	mov	r3, r2
 800ef96:	009b      	lsls	r3, r3, #2
 800ef98:	4413      	add	r3, r2
 800ef9a:	009b      	lsls	r3, r3, #2
 800ef9c:	440b      	add	r3, r1
 800ef9e:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800efa2:	681b      	ldr	r3, [r3, #0]
 800efa4:	2b00      	cmp	r3, #0
 800efa6:	d104      	bne.n	800efb2 <USBD_StdEPReq+0x212>
          {
            USBD_CtlError(pdev, req);
 800efa8:	6839      	ldr	r1, [r7, #0]
 800efaa:	6878      	ldr	r0, [r7, #4]
 800efac:	f000 faf7 	bl	800f59e <USBD_CtlError>
            break;
 800efb0:	e040      	b.n	800f034 <USBD_StdEPReq+0x294>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 800efb2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800efb6:	2b00      	cmp	r3, #0
 800efb8:	da0b      	bge.n	800efd2 <USBD_StdEPReq+0x232>
 800efba:	7bbb      	ldrb	r3, [r7, #14]
 800efbc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800efc0:	4613      	mov	r3, r2
 800efc2:	009b      	lsls	r3, r3, #2
 800efc4:	4413      	add	r3, r2
 800efc6:	009b      	lsls	r3, r3, #2
 800efc8:	3310      	adds	r3, #16
 800efca:	687a      	ldr	r2, [r7, #4]
 800efcc:	4413      	add	r3, r2
 800efce:	3304      	adds	r3, #4
 800efd0:	e00a      	b.n	800efe8 <USBD_StdEPReq+0x248>
          &pdev->ep_out[ep_addr & 0x7FU];
 800efd2:	7bbb      	ldrb	r3, [r7, #14]
 800efd4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 800efd8:	4613      	mov	r3, r2
 800efda:	009b      	lsls	r3, r3, #2
 800efdc:	4413      	add	r3, r2
 800efde:	009b      	lsls	r3, r3, #2
 800efe0:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 800efe4:	687a      	ldr	r2, [r7, #4]
 800efe6:	4413      	add	r3, r2
 800efe8:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800efea:	7bbb      	ldrb	r3, [r7, #14]
 800efec:	2b00      	cmp	r3, #0
 800efee:	d002      	beq.n	800eff6 <USBD_StdEPReq+0x256>
 800eff0:	7bbb      	ldrb	r3, [r7, #14]
 800eff2:	2b80      	cmp	r3, #128	; 0x80
 800eff4:	d103      	bne.n	800effe <USBD_StdEPReq+0x25e>
          {
            pep->status = 0x0000U;
 800eff6:	68bb      	ldr	r3, [r7, #8]
 800eff8:	2200      	movs	r2, #0
 800effa:	601a      	str	r2, [r3, #0]
 800effc:	e00e      	b.n	800f01c <USBD_StdEPReq+0x27c>
          }
          else if(USBD_LL_IsStallEP(pdev, ep_addr))
 800effe:	7bbb      	ldrb	r3, [r7, #14]
 800f000:	4619      	mov	r1, r3
 800f002:	6878      	ldr	r0, [r7, #4]
 800f004:	f001 f870 	bl	80100e8 <USBD_LL_IsStallEP>
 800f008:	4603      	mov	r3, r0
 800f00a:	2b00      	cmp	r3, #0
 800f00c:	d003      	beq.n	800f016 <USBD_StdEPReq+0x276>
          {
            pep->status = 0x0001U;
 800f00e:	68bb      	ldr	r3, [r7, #8]
 800f010:	2201      	movs	r2, #1
 800f012:	601a      	str	r2, [r3, #0]
 800f014:	e002      	b.n	800f01c <USBD_StdEPReq+0x27c>
          }
          else
          {
            pep->status = 0x0000U;
 800f016:	68bb      	ldr	r3, [r7, #8]
 800f018:	2200      	movs	r2, #0
 800f01a:	601a      	str	r2, [r3, #0]
          }

          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 800f01c:	68bb      	ldr	r3, [r7, #8]
 800f01e:	2202      	movs	r2, #2
 800f020:	4619      	mov	r1, r3
 800f022:	6878      	ldr	r0, [r7, #4]
 800f024:	f000 fb26 	bl	800f674 <USBD_CtlSendData>
          break;
 800f028:	e004      	b.n	800f034 <USBD_StdEPReq+0x294>

      default:
        USBD_CtlError(pdev, req);
 800f02a:	6839      	ldr	r1, [r7, #0]
 800f02c:	6878      	ldr	r0, [r7, #4]
 800f02e:	f000 fab6 	bl	800f59e <USBD_CtlError>
        break;
 800f032:	bf00      	nop
      }
      break;
 800f034:	e004      	b.n	800f040 <USBD_StdEPReq+0x2a0>

    default:
      USBD_CtlError(pdev, req);
 800f036:	6839      	ldr	r1, [r7, #0]
 800f038:	6878      	ldr	r0, [r7, #4]
 800f03a:	f000 fab0 	bl	800f59e <USBD_CtlError>
      break;
 800f03e:	bf00      	nop
    }
    break;
 800f040:	e004      	b.n	800f04c <USBD_StdEPReq+0x2ac>

  default:
    USBD_CtlError(pdev, req);
 800f042:	6839      	ldr	r1, [r7, #0]
 800f044:	6878      	ldr	r0, [r7, #4]
 800f046:	f000 faaa 	bl	800f59e <USBD_CtlError>
    break;
 800f04a:	bf00      	nop
  }

  return ret;
 800f04c:	7bfb      	ldrb	r3, [r7, #15]
}
 800f04e:	4618      	mov	r0, r3
 800f050:	3710      	adds	r7, #16
 800f052:	46bd      	mov	sp, r7
 800f054:	bd80      	pop	{r7, pc}
	...

0800f058 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev ,
                               USBD_SetupReqTypedef *req)
{
 800f058:	b580      	push	{r7, lr}
 800f05a:	b084      	sub	sp, #16
 800f05c:	af00      	add	r7, sp, #0
 800f05e:	6078      	str	r0, [r7, #4]
 800f060:	6039      	str	r1, [r7, #0]
  uint16_t len;
  uint8_t *pbuf;


  switch (req->wValue >> 8)
 800f062:	683b      	ldr	r3, [r7, #0]
 800f064:	885b      	ldrh	r3, [r3, #2]
 800f066:	0a1b      	lsrs	r3, r3, #8
 800f068:	b29b      	uxth	r3, r3
 800f06a:	3b01      	subs	r3, #1
 800f06c:	2b06      	cmp	r3, #6
 800f06e:	f200 80c9 	bhi.w	800f204 <USBD_GetDescriptor+0x1ac>
 800f072:	a201      	add	r2, pc, #4	; (adr r2, 800f078 <USBD_GetDescriptor+0x20>)
 800f074:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f078:	0800f095 	.word	0x0800f095
 800f07c:	0800f0ad 	.word	0x0800f0ad
 800f080:	0800f0ed 	.word	0x0800f0ed
 800f084:	0800f205 	.word	0x0800f205
 800f088:	0800f205 	.word	0x0800f205
 800f08c:	0800f1b1 	.word	0x0800f1b1
 800f090:	0800f1d7 	.word	0x0800f1d7
  case USB_DESC_TYPE_BOS:
    pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
    break;
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800f094:	687b      	ldr	r3, [r7, #4]
 800f096:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800f09a:	681b      	ldr	r3, [r3, #0]
 800f09c:	687a      	ldr	r2, [r7, #4]
 800f09e:	7c12      	ldrb	r2, [r2, #16]
 800f0a0:	f107 010a 	add.w	r1, r7, #10
 800f0a4:	4610      	mov	r0, r2
 800f0a6:	4798      	blx	r3
 800f0a8:	60f8      	str	r0, [r7, #12]
    break;
 800f0aa:	e0b0      	b.n	800f20e <USBD_GetDescriptor+0x1b6>

  case USB_DESC_TYPE_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH )
 800f0ac:	687b      	ldr	r3, [r7, #4]
 800f0ae:	7c1b      	ldrb	r3, [r3, #16]
 800f0b0:	2b00      	cmp	r3, #0
 800f0b2:	d10d      	bne.n	800f0d0 <USBD_GetDescriptor+0x78>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetHSConfigDescriptor(&len);
 800f0b4:	687b      	ldr	r3, [r7, #4]
 800f0b6:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800f0ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f0bc:	f107 020a 	add.w	r2, r7, #10
 800f0c0:	4610      	mov	r0, r2
 800f0c2:	4798      	blx	r3
 800f0c4:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800f0c6:	68fb      	ldr	r3, [r7, #12]
 800f0c8:	3301      	adds	r3, #1
 800f0ca:	2202      	movs	r2, #2
 800f0cc:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 800f0ce:	e09e      	b.n	800f20e <USBD_GetDescriptor+0x1b6>
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 800f0d0:	687b      	ldr	r3, [r7, #4]
 800f0d2:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800f0d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f0d8:	f107 020a 	add.w	r2, r7, #10
 800f0dc:	4610      	mov	r0, r2
 800f0de:	4798      	blx	r3
 800f0e0:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800f0e2:	68fb      	ldr	r3, [r7, #12]
 800f0e4:	3301      	adds	r3, #1
 800f0e6:	2202      	movs	r2, #2
 800f0e8:	701a      	strb	r2, [r3, #0]
    break;
 800f0ea:	e090      	b.n	800f20e <USBD_GetDescriptor+0x1b6>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 800f0ec:	683b      	ldr	r3, [r7, #0]
 800f0ee:	885b      	ldrh	r3, [r3, #2]
 800f0f0:	b2db      	uxtb	r3, r3
 800f0f2:	2b05      	cmp	r3, #5
 800f0f4:	d856      	bhi.n	800f1a4 <USBD_GetDescriptor+0x14c>
 800f0f6:	a201      	add	r2, pc, #4	; (adr r2, 800f0fc <USBD_GetDescriptor+0xa4>)
 800f0f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f0fc:	0800f115 	.word	0x0800f115
 800f100:	0800f12d 	.word	0x0800f12d
 800f104:	0800f145 	.word	0x0800f145
 800f108:	0800f15d 	.word	0x0800f15d
 800f10c:	0800f175 	.word	0x0800f175
 800f110:	0800f18d 	.word	0x0800f18d
    {
    case USBD_IDX_LANGID_STR:
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800f114:	687b      	ldr	r3, [r7, #4]
 800f116:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800f11a:	685b      	ldr	r3, [r3, #4]
 800f11c:	687a      	ldr	r2, [r7, #4]
 800f11e:	7c12      	ldrb	r2, [r2, #16]
 800f120:	f107 010a 	add.w	r1, r7, #10
 800f124:	4610      	mov	r0, r2
 800f126:	4798      	blx	r3
 800f128:	60f8      	str	r0, [r7, #12]
      break;
 800f12a:	e040      	b.n	800f1ae <USBD_GetDescriptor+0x156>

    case USBD_IDX_MFC_STR:
      pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800f12c:	687b      	ldr	r3, [r7, #4]
 800f12e:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800f132:	689b      	ldr	r3, [r3, #8]
 800f134:	687a      	ldr	r2, [r7, #4]
 800f136:	7c12      	ldrb	r2, [r2, #16]
 800f138:	f107 010a 	add.w	r1, r7, #10
 800f13c:	4610      	mov	r0, r2
 800f13e:	4798      	blx	r3
 800f140:	60f8      	str	r0, [r7, #12]
      break;
 800f142:	e034      	b.n	800f1ae <USBD_GetDescriptor+0x156>

    case USBD_IDX_PRODUCT_STR:
      pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800f144:	687b      	ldr	r3, [r7, #4]
 800f146:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800f14a:	68db      	ldr	r3, [r3, #12]
 800f14c:	687a      	ldr	r2, [r7, #4]
 800f14e:	7c12      	ldrb	r2, [r2, #16]
 800f150:	f107 010a 	add.w	r1, r7, #10
 800f154:	4610      	mov	r0, r2
 800f156:	4798      	blx	r3
 800f158:	60f8      	str	r0, [r7, #12]
      break;
 800f15a:	e028      	b.n	800f1ae <USBD_GetDescriptor+0x156>

    case USBD_IDX_SERIAL_STR:
      pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800f15c:	687b      	ldr	r3, [r7, #4]
 800f15e:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800f162:	691b      	ldr	r3, [r3, #16]
 800f164:	687a      	ldr	r2, [r7, #4]
 800f166:	7c12      	ldrb	r2, [r2, #16]
 800f168:	f107 010a 	add.w	r1, r7, #10
 800f16c:	4610      	mov	r0, r2
 800f16e:	4798      	blx	r3
 800f170:	60f8      	str	r0, [r7, #12]
      break;
 800f172:	e01c      	b.n	800f1ae <USBD_GetDescriptor+0x156>

    case USBD_IDX_CONFIG_STR:
      pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800f174:	687b      	ldr	r3, [r7, #4]
 800f176:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800f17a:	695b      	ldr	r3, [r3, #20]
 800f17c:	687a      	ldr	r2, [r7, #4]
 800f17e:	7c12      	ldrb	r2, [r2, #16]
 800f180:	f107 010a 	add.w	r1, r7, #10
 800f184:	4610      	mov	r0, r2
 800f186:	4798      	blx	r3
 800f188:	60f8      	str	r0, [r7, #12]
      break;
 800f18a:	e010      	b.n	800f1ae <USBD_GetDescriptor+0x156>

    case USBD_IDX_INTERFACE_STR:
      pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800f18c:	687b      	ldr	r3, [r7, #4]
 800f18e:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800f192:	699b      	ldr	r3, [r3, #24]
 800f194:	687a      	ldr	r2, [r7, #4]
 800f196:	7c12      	ldrb	r2, [r2, #16]
 800f198:	f107 010a 	add.w	r1, r7, #10
 800f19c:	4610      	mov	r0, r2
 800f19e:	4798      	blx	r3
 800f1a0:	60f8      	str	r0, [r7, #12]
      break;
 800f1a2:	e004      	b.n	800f1ae <USBD_GetDescriptor+0x156>
    default:
#if (USBD_SUPPORT_USER_STRING == 1U)
      pbuf = pdev->pClass->GetUsrStrDescriptor(pdev, (req->wValue) , &len);
      break;
#else
       USBD_CtlError(pdev , req);
 800f1a4:	6839      	ldr	r1, [r7, #0]
 800f1a6:	6878      	ldr	r0, [r7, #4]
 800f1a8:	f000 f9f9 	bl	800f59e <USBD_CtlError>
      return;
 800f1ac:	e04b      	b.n	800f246 <USBD_GetDescriptor+0x1ee>
#endif
    }
    break;
 800f1ae:	e02e      	b.n	800f20e <USBD_GetDescriptor+0x1b6>
  case USB_DESC_TYPE_DEVICE_QUALIFIER:

    if(pdev->dev_speed == USBD_SPEED_HIGH)
 800f1b0:	687b      	ldr	r3, [r7, #4]
 800f1b2:	7c1b      	ldrb	r3, [r3, #16]
 800f1b4:	2b00      	cmp	r3, #0
 800f1b6:	d109      	bne.n	800f1cc <USBD_GetDescriptor+0x174>
    {
      pbuf = (uint8_t *)pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800f1b8:	687b      	ldr	r3, [r7, #4]
 800f1ba:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800f1be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f1c0:	f107 020a 	add.w	r2, r7, #10
 800f1c4:	4610      	mov	r0, r2
 800f1c6:	4798      	blx	r3
 800f1c8:	60f8      	str	r0, [r7, #12]
      break;
 800f1ca:	e020      	b.n	800f20e <USBD_GetDescriptor+0x1b6>
    }
    else
    {
      USBD_CtlError(pdev , req);
 800f1cc:	6839      	ldr	r1, [r7, #0]
 800f1ce:	6878      	ldr	r0, [r7, #4]
 800f1d0:	f000 f9e5 	bl	800f59e <USBD_CtlError>
      return;
 800f1d4:	e037      	b.n	800f246 <USBD_GetDescriptor+0x1ee>
    }

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 800f1d6:	687b      	ldr	r3, [r7, #4]
 800f1d8:	7c1b      	ldrb	r3, [r3, #16]
 800f1da:	2b00      	cmp	r3, #0
 800f1dc:	d10d      	bne.n	800f1fa <USBD_GetDescriptor+0x1a2>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800f1de:	687b      	ldr	r3, [r7, #4]
 800f1e0:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800f1e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f1e6:	f107 020a 	add.w	r2, r7, #10
 800f1ea:	4610      	mov	r0, r2
 800f1ec:	4798      	blx	r3
 800f1ee:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800f1f0:	68fb      	ldr	r3, [r7, #12]
 800f1f2:	3301      	adds	r3, #1
 800f1f4:	2207      	movs	r2, #7
 800f1f6:	701a      	strb	r2, [r3, #0]
      break;
 800f1f8:	e009      	b.n	800f20e <USBD_GetDescriptor+0x1b6>
    }
    else
    {
      USBD_CtlError(pdev , req);
 800f1fa:	6839      	ldr	r1, [r7, #0]
 800f1fc:	6878      	ldr	r0, [r7, #4]
 800f1fe:	f000 f9ce 	bl	800f59e <USBD_CtlError>
      return;
 800f202:	e020      	b.n	800f246 <USBD_GetDescriptor+0x1ee>
    }

  default:
     USBD_CtlError(pdev , req);
 800f204:	6839      	ldr	r1, [r7, #0]
 800f206:	6878      	ldr	r0, [r7, #4]
 800f208:	f000 f9c9 	bl	800f59e <USBD_CtlError>
    return;
 800f20c:	e01b      	b.n	800f246 <USBD_GetDescriptor+0x1ee>
  }

  if((len != 0U) && (req->wLength != 0U))
 800f20e:	897b      	ldrh	r3, [r7, #10]
 800f210:	2b00      	cmp	r3, #0
 800f212:	d011      	beq.n	800f238 <USBD_GetDescriptor+0x1e0>
 800f214:	683b      	ldr	r3, [r7, #0]
 800f216:	88db      	ldrh	r3, [r3, #6]
 800f218:	2b00      	cmp	r3, #0
 800f21a:	d00d      	beq.n	800f238 <USBD_GetDescriptor+0x1e0>
  {

    len = MIN(len, req->wLength);
 800f21c:	683b      	ldr	r3, [r7, #0]
 800f21e:	88da      	ldrh	r2, [r3, #6]
 800f220:	897b      	ldrh	r3, [r7, #10]
 800f222:	4293      	cmp	r3, r2
 800f224:	bf28      	it	cs
 800f226:	4613      	movcs	r3, r2
 800f228:	b29b      	uxth	r3, r3
 800f22a:	817b      	strh	r3, [r7, #10]

    USBD_CtlSendData (pdev, pbuf, len);
 800f22c:	897b      	ldrh	r3, [r7, #10]
 800f22e:	461a      	mov	r2, r3
 800f230:	68f9      	ldr	r1, [r7, #12]
 800f232:	6878      	ldr	r0, [r7, #4]
 800f234:	f000 fa1e 	bl	800f674 <USBD_CtlSendData>
  }

  if(req->wLength == 0U)
 800f238:	683b      	ldr	r3, [r7, #0]
 800f23a:	88db      	ldrh	r3, [r3, #6]
 800f23c:	2b00      	cmp	r3, #0
 800f23e:	d102      	bne.n	800f246 <USBD_GetDescriptor+0x1ee>
  {
   USBD_CtlSendStatus(pdev);
 800f240:	6878      	ldr	r0, [r7, #4]
 800f242:	f000 fa75 	bl	800f730 <USBD_CtlSendStatus>
  }
}
 800f246:	3710      	adds	r7, #16
 800f248:	46bd      	mov	sp, r7
 800f24a:	bd80      	pop	{r7, pc}

0800f24c <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 800f24c:	b580      	push	{r7, lr}
 800f24e:	b084      	sub	sp, #16
 800f250:	af00      	add	r7, sp, #0
 800f252:	6078      	str	r0, [r7, #4]
 800f254:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800f256:	683b      	ldr	r3, [r7, #0]
 800f258:	889b      	ldrh	r3, [r3, #4]
 800f25a:	2b00      	cmp	r3, #0
 800f25c:	d130      	bne.n	800f2c0 <USBD_SetAddress+0x74>
 800f25e:	683b      	ldr	r3, [r7, #0]
 800f260:	88db      	ldrh	r3, [r3, #6]
 800f262:	2b00      	cmp	r3, #0
 800f264:	d12c      	bne.n	800f2c0 <USBD_SetAddress+0x74>
 800f266:	683b      	ldr	r3, [r7, #0]
 800f268:	885b      	ldrh	r3, [r3, #2]
 800f26a:	2b7f      	cmp	r3, #127	; 0x7f
 800f26c:	d828      	bhi.n	800f2c0 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800f26e:	683b      	ldr	r3, [r7, #0]
 800f270:	885b      	ldrh	r3, [r3, #2]
 800f272:	b2db      	uxtb	r3, r3
 800f274:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f278:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f27a:	687b      	ldr	r3, [r7, #4]
 800f27c:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800f280:	2b03      	cmp	r3, #3
 800f282:	d104      	bne.n	800f28e <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev , req);
 800f284:	6839      	ldr	r1, [r7, #0]
 800f286:	6878      	ldr	r0, [r7, #4]
 800f288:	f000 f989 	bl	800f59e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f28c:	e01c      	b.n	800f2c8 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800f28e:	687b      	ldr	r3, [r7, #4]
 800f290:	7bfa      	ldrb	r2, [r7, #15]
 800f292:	f883 2276 	strb.w	r2, [r3, #630]	; 0x276
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800f296:	7bfb      	ldrb	r3, [r7, #15]
 800f298:	4619      	mov	r1, r3
 800f29a:	6878      	ldr	r0, [r7, #4]
 800f29c:	f000 ff50 	bl	8010140 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800f2a0:	6878      	ldr	r0, [r7, #4]
 800f2a2:	f000 fa45 	bl	800f730 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800f2a6:	7bfb      	ldrb	r3, [r7, #15]
 800f2a8:	2b00      	cmp	r3, #0
 800f2aa:	d004      	beq.n	800f2b6 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800f2ac:	687b      	ldr	r3, [r7, #4]
 800f2ae:	2202      	movs	r2, #2
 800f2b0:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f2b4:	e008      	b.n	800f2c8 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800f2b6:	687b      	ldr	r3, [r7, #4]
 800f2b8:	2201      	movs	r2, #1
 800f2ba:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f2be:	e003      	b.n	800f2c8 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800f2c0:	6839      	ldr	r1, [r7, #0]
 800f2c2:	6878      	ldr	r0, [r7, #4]
 800f2c4:	f000 f96b 	bl	800f59e <USBD_CtlError>
  }
}
 800f2c8:	bf00      	nop
 800f2ca:	3710      	adds	r7, #16
 800f2cc:	46bd      	mov	sp, r7
 800f2ce:	bd80      	pop	{r7, pc}

0800f2d0 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f2d0:	b580      	push	{r7, lr}
 800f2d2:	b082      	sub	sp, #8
 800f2d4:	af00      	add	r7, sp, #0
 800f2d6:	6078      	str	r0, [r7, #4]
 800f2d8:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800f2da:	683b      	ldr	r3, [r7, #0]
 800f2dc:	885b      	ldrh	r3, [r3, #2]
 800f2de:	b2da      	uxtb	r2, r3
 800f2e0:	4b41      	ldr	r3, [pc, #260]	; (800f3e8 <USBD_SetConfig+0x118>)
 800f2e2:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800f2e4:	4b40      	ldr	r3, [pc, #256]	; (800f3e8 <USBD_SetConfig+0x118>)
 800f2e6:	781b      	ldrb	r3, [r3, #0]
 800f2e8:	2b01      	cmp	r3, #1
 800f2ea:	d904      	bls.n	800f2f6 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 800f2ec:	6839      	ldr	r1, [r7, #0]
 800f2ee:	6878      	ldr	r0, [r7, #4]
 800f2f0:	f000 f955 	bl	800f59e <USBD_CtlError>
 800f2f4:	e075      	b.n	800f3e2 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 800f2f6:	687b      	ldr	r3, [r7, #4]
 800f2f8:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800f2fc:	2b02      	cmp	r3, #2
 800f2fe:	d002      	beq.n	800f306 <USBD_SetConfig+0x36>
 800f300:	2b03      	cmp	r3, #3
 800f302:	d023      	beq.n	800f34c <USBD_SetConfig+0x7c>
 800f304:	e062      	b.n	800f3cc <USBD_SetConfig+0xfc>
    {
    case USBD_STATE_ADDRESSED:
      if (cfgidx)
 800f306:	4b38      	ldr	r3, [pc, #224]	; (800f3e8 <USBD_SetConfig+0x118>)
 800f308:	781b      	ldrb	r3, [r3, #0]
 800f30a:	2b00      	cmp	r3, #0
 800f30c:	d01a      	beq.n	800f344 <USBD_SetConfig+0x74>
      {
        pdev->dev_config = cfgidx;
 800f30e:	4b36      	ldr	r3, [pc, #216]	; (800f3e8 <USBD_SetConfig+0x118>)
 800f310:	781b      	ldrb	r3, [r3, #0]
 800f312:	461a      	mov	r2, r3
 800f314:	687b      	ldr	r3, [r7, #4]
 800f316:	605a      	str	r2, [r3, #4]
        pdev->dev_state = USBD_STATE_CONFIGURED;
 800f318:	687b      	ldr	r3, [r7, #4]
 800f31a:	2203      	movs	r2, #3
 800f31c:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800f320:	4b31      	ldr	r3, [pc, #196]	; (800f3e8 <USBD_SetConfig+0x118>)
 800f322:	781b      	ldrb	r3, [r3, #0]
 800f324:	4619      	mov	r1, r3
 800f326:	6878      	ldr	r0, [r7, #4]
 800f328:	f7ff fa2a 	bl	800e780 <USBD_SetClassConfig>
 800f32c:	4603      	mov	r3, r0
 800f32e:	2b02      	cmp	r3, #2
 800f330:	d104      	bne.n	800f33c <USBD_SetConfig+0x6c>
        {
          USBD_CtlError(pdev, req);
 800f332:	6839      	ldr	r1, [r7, #0]
 800f334:	6878      	ldr	r0, [r7, #4]
 800f336:	f000 f932 	bl	800f59e <USBD_CtlError>
          return;
 800f33a:	e052      	b.n	800f3e2 <USBD_SetConfig+0x112>
        }
        USBD_CtlSendStatus(pdev);
 800f33c:	6878      	ldr	r0, [r7, #4]
 800f33e:	f000 f9f7 	bl	800f730 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlSendStatus(pdev);
      }
      break;
 800f342:	e04e      	b.n	800f3e2 <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 800f344:	6878      	ldr	r0, [r7, #4]
 800f346:	f000 f9f3 	bl	800f730 <USBD_CtlSendStatus>
      break;
 800f34a:	e04a      	b.n	800f3e2 <USBD_SetConfig+0x112>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800f34c:	4b26      	ldr	r3, [pc, #152]	; (800f3e8 <USBD_SetConfig+0x118>)
 800f34e:	781b      	ldrb	r3, [r3, #0]
 800f350:	2b00      	cmp	r3, #0
 800f352:	d112      	bne.n	800f37a <USBD_SetConfig+0xaa>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800f354:	687b      	ldr	r3, [r7, #4]
 800f356:	2202      	movs	r2, #2
 800f358:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
        pdev->dev_config = cfgidx;
 800f35c:	4b22      	ldr	r3, [pc, #136]	; (800f3e8 <USBD_SetConfig+0x118>)
 800f35e:	781b      	ldrb	r3, [r3, #0]
 800f360:	461a      	mov	r2, r3
 800f362:	687b      	ldr	r3, [r7, #4]
 800f364:	605a      	str	r2, [r3, #4]
        USBD_ClrClassConfig(pdev, cfgidx);
 800f366:	4b20      	ldr	r3, [pc, #128]	; (800f3e8 <USBD_SetConfig+0x118>)
 800f368:	781b      	ldrb	r3, [r3, #0]
 800f36a:	4619      	mov	r1, r3
 800f36c:	6878      	ldr	r0, [r7, #4]
 800f36e:	f7ff fa26 	bl	800e7be <USBD_ClrClassConfig>
        USBD_CtlSendStatus(pdev);
 800f372:	6878      	ldr	r0, [r7, #4]
 800f374:	f000 f9dc 	bl	800f730 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlSendStatus(pdev);
      }
      break;
 800f378:	e033      	b.n	800f3e2 <USBD_SetConfig+0x112>
      else if (cfgidx != pdev->dev_config)
 800f37a:	4b1b      	ldr	r3, [pc, #108]	; (800f3e8 <USBD_SetConfig+0x118>)
 800f37c:	781b      	ldrb	r3, [r3, #0]
 800f37e:	461a      	mov	r2, r3
 800f380:	687b      	ldr	r3, [r7, #4]
 800f382:	685b      	ldr	r3, [r3, #4]
 800f384:	429a      	cmp	r2, r3
 800f386:	d01d      	beq.n	800f3c4 <USBD_SetConfig+0xf4>
        USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800f388:	687b      	ldr	r3, [r7, #4]
 800f38a:	685b      	ldr	r3, [r3, #4]
 800f38c:	b2db      	uxtb	r3, r3
 800f38e:	4619      	mov	r1, r3
 800f390:	6878      	ldr	r0, [r7, #4]
 800f392:	f7ff fa14 	bl	800e7be <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800f396:	4b14      	ldr	r3, [pc, #80]	; (800f3e8 <USBD_SetConfig+0x118>)
 800f398:	781b      	ldrb	r3, [r3, #0]
 800f39a:	461a      	mov	r2, r3
 800f39c:	687b      	ldr	r3, [r7, #4]
 800f39e:	605a      	str	r2, [r3, #4]
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800f3a0:	4b11      	ldr	r3, [pc, #68]	; (800f3e8 <USBD_SetConfig+0x118>)
 800f3a2:	781b      	ldrb	r3, [r3, #0]
 800f3a4:	4619      	mov	r1, r3
 800f3a6:	6878      	ldr	r0, [r7, #4]
 800f3a8:	f7ff f9ea 	bl	800e780 <USBD_SetClassConfig>
 800f3ac:	4603      	mov	r3, r0
 800f3ae:	2b02      	cmp	r3, #2
 800f3b0:	d104      	bne.n	800f3bc <USBD_SetConfig+0xec>
          USBD_CtlError(pdev, req);
 800f3b2:	6839      	ldr	r1, [r7, #0]
 800f3b4:	6878      	ldr	r0, [r7, #4]
 800f3b6:	f000 f8f2 	bl	800f59e <USBD_CtlError>
          return;
 800f3ba:	e012      	b.n	800f3e2 <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 800f3bc:	6878      	ldr	r0, [r7, #4]
 800f3be:	f000 f9b7 	bl	800f730 <USBD_CtlSendStatus>
      break;
 800f3c2:	e00e      	b.n	800f3e2 <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 800f3c4:	6878      	ldr	r0, [r7, #4]
 800f3c6:	f000 f9b3 	bl	800f730 <USBD_CtlSendStatus>
      break;
 800f3ca:	e00a      	b.n	800f3e2 <USBD_SetConfig+0x112>

    default:
      USBD_CtlError(pdev, req);
 800f3cc:	6839      	ldr	r1, [r7, #0]
 800f3ce:	6878      	ldr	r0, [r7, #4]
 800f3d0:	f000 f8e5 	bl	800f59e <USBD_CtlError>
      USBD_ClrClassConfig(pdev, cfgidx);
 800f3d4:	4b04      	ldr	r3, [pc, #16]	; (800f3e8 <USBD_SetConfig+0x118>)
 800f3d6:	781b      	ldrb	r3, [r3, #0]
 800f3d8:	4619      	mov	r1, r3
 800f3da:	6878      	ldr	r0, [r7, #4]
 800f3dc:	f7ff f9ef 	bl	800e7be <USBD_ClrClassConfig>
      break;
 800f3e0:	bf00      	nop
    }
  }
}
 800f3e2:	3708      	adds	r7, #8
 800f3e4:	46bd      	mov	sp, r7
 800f3e6:	bd80      	pop	{r7, pc}
 800f3e8:	2000077c 	.word	0x2000077c

0800f3ec <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f3ec:	b580      	push	{r7, lr}
 800f3ee:	b082      	sub	sp, #8
 800f3f0:	af00      	add	r7, sp, #0
 800f3f2:	6078      	str	r0, [r7, #4]
 800f3f4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800f3f6:	683b      	ldr	r3, [r7, #0]
 800f3f8:	88db      	ldrh	r3, [r3, #6]
 800f3fa:	2b01      	cmp	r3, #1
 800f3fc:	d004      	beq.n	800f408 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev , req);
 800f3fe:	6839      	ldr	r1, [r7, #0]
 800f400:	6878      	ldr	r0, [r7, #4]
 800f402:	f000 f8cc 	bl	800f59e <USBD_CtlError>
    default:
      USBD_CtlError(pdev , req);
      break;
    }
  }
}
 800f406:	e021      	b.n	800f44c <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 800f408:	687b      	ldr	r3, [r7, #4]
 800f40a:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800f40e:	2b01      	cmp	r3, #1
 800f410:	db17      	blt.n	800f442 <USBD_GetConfig+0x56>
 800f412:	2b02      	cmp	r3, #2
 800f414:	dd02      	ble.n	800f41c <USBD_GetConfig+0x30>
 800f416:	2b03      	cmp	r3, #3
 800f418:	d00b      	beq.n	800f432 <USBD_GetConfig+0x46>
 800f41a:	e012      	b.n	800f442 <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 800f41c:	687b      	ldr	r3, [r7, #4]
 800f41e:	2200      	movs	r2, #0
 800f420:	609a      	str	r2, [r3, #8]
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800f422:	687b      	ldr	r3, [r7, #4]
 800f424:	3308      	adds	r3, #8
 800f426:	2201      	movs	r2, #1
 800f428:	4619      	mov	r1, r3
 800f42a:	6878      	ldr	r0, [r7, #4]
 800f42c:	f000 f922 	bl	800f674 <USBD_CtlSendData>
      break;
 800f430:	e00c      	b.n	800f44c <USBD_GetConfig+0x60>
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800f432:	687b      	ldr	r3, [r7, #4]
 800f434:	3304      	adds	r3, #4
 800f436:	2201      	movs	r2, #1
 800f438:	4619      	mov	r1, r3
 800f43a:	6878      	ldr	r0, [r7, #4]
 800f43c:	f000 f91a 	bl	800f674 <USBD_CtlSendData>
      break;
 800f440:	e004      	b.n	800f44c <USBD_GetConfig+0x60>
      USBD_CtlError(pdev , req);
 800f442:	6839      	ldr	r1, [r7, #0]
 800f444:	6878      	ldr	r0, [r7, #4]
 800f446:	f000 f8aa 	bl	800f59e <USBD_CtlError>
      break;
 800f44a:	bf00      	nop
}
 800f44c:	bf00      	nop
 800f44e:	3708      	adds	r7, #8
 800f450:	46bd      	mov	sp, r7
 800f452:	bd80      	pop	{r7, pc}

0800f454 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f454:	b580      	push	{r7, lr}
 800f456:	b082      	sub	sp, #8
 800f458:	af00      	add	r7, sp, #0
 800f45a:	6078      	str	r0, [r7, #4]
 800f45c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800f45e:	687b      	ldr	r3, [r7, #4]
 800f460:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800f464:	3b01      	subs	r3, #1
 800f466:	2b02      	cmp	r3, #2
 800f468:	d81e      	bhi.n	800f4a8 <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if(req->wLength != 0x2U)
 800f46a:	683b      	ldr	r3, [r7, #0]
 800f46c:	88db      	ldrh	r3, [r3, #6]
 800f46e:	2b02      	cmp	r3, #2
 800f470:	d004      	beq.n	800f47c <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 800f472:	6839      	ldr	r1, [r7, #0]
 800f474:	6878      	ldr	r0, [r7, #4]
 800f476:	f000 f892 	bl	800f59e <USBD_CtlError>
      break;
 800f47a:	e01a      	b.n	800f4b2 <USBD_GetStatus+0x5e>
    }

#if ( USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800f47c:	687b      	ldr	r3, [r7, #4]
 800f47e:	2201      	movs	r2, #1
 800f480:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup)
 800f482:	687b      	ldr	r3, [r7, #4]
 800f484:	f8d3 327c 	ldr.w	r3, [r3, #636]	; 0x27c
 800f488:	2b00      	cmp	r3, #0
 800f48a:	d005      	beq.n	800f498 <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800f48c:	687b      	ldr	r3, [r7, #4]
 800f48e:	68db      	ldr	r3, [r3, #12]
 800f490:	f043 0202 	orr.w	r2, r3, #2
 800f494:	687b      	ldr	r3, [r7, #4]
 800f496:	60da      	str	r2, [r3, #12]
    }

    USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800f498:	687b      	ldr	r3, [r7, #4]
 800f49a:	330c      	adds	r3, #12
 800f49c:	2202      	movs	r2, #2
 800f49e:	4619      	mov	r1, r3
 800f4a0:	6878      	ldr	r0, [r7, #4]
 800f4a2:	f000 f8e7 	bl	800f674 <USBD_CtlSendData>
    break;
 800f4a6:	e004      	b.n	800f4b2 <USBD_GetStatus+0x5e>

  default :
    USBD_CtlError(pdev , req);
 800f4a8:	6839      	ldr	r1, [r7, #0]
 800f4aa:	6878      	ldr	r0, [r7, #4]
 800f4ac:	f000 f877 	bl	800f59e <USBD_CtlError>
    break;
 800f4b0:	bf00      	nop
  }
}
 800f4b2:	bf00      	nop
 800f4b4:	3708      	adds	r7, #8
 800f4b6:	46bd      	mov	sp, r7
 800f4b8:	bd80      	pop	{r7, pc}

0800f4ba <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 800f4ba:	b580      	push	{r7, lr}
 800f4bc:	b082      	sub	sp, #8
 800f4be:	af00      	add	r7, sp, #0
 800f4c0:	6078      	str	r0, [r7, #4]
 800f4c2:	6039      	str	r1, [r7, #0]

  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800f4c4:	683b      	ldr	r3, [r7, #0]
 800f4c6:	885b      	ldrh	r3, [r3, #2]
 800f4c8:	2b01      	cmp	r3, #1
 800f4ca:	d106      	bne.n	800f4da <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800f4cc:	687b      	ldr	r3, [r7, #4]
 800f4ce:	2201      	movs	r2, #1
 800f4d0:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c
    USBD_CtlSendStatus(pdev);
 800f4d4:	6878      	ldr	r0, [r7, #4]
 800f4d6:	f000 f92b 	bl	800f730 <USBD_CtlSendStatus>
  }

}
 800f4da:	bf00      	nop
 800f4dc:	3708      	adds	r7, #8
 800f4de:	46bd      	mov	sp, r7
 800f4e0:	bd80      	pop	{r7, pc}

0800f4e2 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 800f4e2:	b580      	push	{r7, lr}
 800f4e4:	b082      	sub	sp, #8
 800f4e6:	af00      	add	r7, sp, #0
 800f4e8:	6078      	str	r0, [r7, #4]
 800f4ea:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800f4ec:	687b      	ldr	r3, [r7, #4]
 800f4ee:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800f4f2:	3b01      	subs	r3, #1
 800f4f4:	2b02      	cmp	r3, #2
 800f4f6:	d80b      	bhi.n	800f510 <USBD_ClrFeature+0x2e>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800f4f8:	683b      	ldr	r3, [r7, #0]
 800f4fa:	885b      	ldrh	r3, [r3, #2]
 800f4fc:	2b01      	cmp	r3, #1
 800f4fe:	d10c      	bne.n	800f51a <USBD_ClrFeature+0x38>
    {
      pdev->dev_remote_wakeup = 0U;
 800f500:	687b      	ldr	r3, [r7, #4]
 800f502:	2200      	movs	r2, #0
 800f504:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c
      USBD_CtlSendStatus(pdev);
 800f508:	6878      	ldr	r0, [r7, #4]
 800f50a:	f000 f911 	bl	800f730 <USBD_CtlSendStatus>
    }
    break;
 800f50e:	e004      	b.n	800f51a <USBD_ClrFeature+0x38>

  default :
     USBD_CtlError(pdev , req);
 800f510:	6839      	ldr	r1, [r7, #0]
 800f512:	6878      	ldr	r0, [r7, #4]
 800f514:	f000 f843 	bl	800f59e <USBD_CtlError>
    break;
 800f518:	e000      	b.n	800f51c <USBD_ClrFeature+0x3a>
    break;
 800f51a:	bf00      	nop
  }
}
 800f51c:	bf00      	nop
 800f51e:	3708      	adds	r7, #8
 800f520:	46bd      	mov	sp, r7
 800f522:	bd80      	pop	{r7, pc}

0800f524 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800f524:	b480      	push	{r7}
 800f526:	b083      	sub	sp, #12
 800f528:	af00      	add	r7, sp, #0
 800f52a:	6078      	str	r0, [r7, #4]
 800f52c:	6039      	str	r1, [r7, #0]
  req->bmRequest     = *(uint8_t *)  (pdata);
 800f52e:	683b      	ldr	r3, [r7, #0]
 800f530:	781a      	ldrb	r2, [r3, #0]
 800f532:	687b      	ldr	r3, [r7, #4]
 800f534:	701a      	strb	r2, [r3, #0]
  req->bRequest      = *(uint8_t *)  (pdata +  1);
 800f536:	683b      	ldr	r3, [r7, #0]
 800f538:	785a      	ldrb	r2, [r3, #1]
 800f53a:	687b      	ldr	r3, [r7, #4]
 800f53c:	705a      	strb	r2, [r3, #1]
  req->wValue        = SWAPBYTE      (pdata +  2);
 800f53e:	683b      	ldr	r3, [r7, #0]
 800f540:	3302      	adds	r3, #2
 800f542:	781b      	ldrb	r3, [r3, #0]
 800f544:	b29a      	uxth	r2, r3
 800f546:	683b      	ldr	r3, [r7, #0]
 800f548:	3303      	adds	r3, #3
 800f54a:	781b      	ldrb	r3, [r3, #0]
 800f54c:	b29b      	uxth	r3, r3
 800f54e:	021b      	lsls	r3, r3, #8
 800f550:	b29b      	uxth	r3, r3
 800f552:	4413      	add	r3, r2
 800f554:	b29a      	uxth	r2, r3
 800f556:	687b      	ldr	r3, [r7, #4]
 800f558:	805a      	strh	r2, [r3, #2]
  req->wIndex        = SWAPBYTE      (pdata +  4);
 800f55a:	683b      	ldr	r3, [r7, #0]
 800f55c:	3304      	adds	r3, #4
 800f55e:	781b      	ldrb	r3, [r3, #0]
 800f560:	b29a      	uxth	r2, r3
 800f562:	683b      	ldr	r3, [r7, #0]
 800f564:	3305      	adds	r3, #5
 800f566:	781b      	ldrb	r3, [r3, #0]
 800f568:	b29b      	uxth	r3, r3
 800f56a:	021b      	lsls	r3, r3, #8
 800f56c:	b29b      	uxth	r3, r3
 800f56e:	4413      	add	r3, r2
 800f570:	b29a      	uxth	r2, r3
 800f572:	687b      	ldr	r3, [r7, #4]
 800f574:	809a      	strh	r2, [r3, #4]
  req->wLength       = SWAPBYTE      (pdata +  6);
 800f576:	683b      	ldr	r3, [r7, #0]
 800f578:	3306      	adds	r3, #6
 800f57a:	781b      	ldrb	r3, [r3, #0]
 800f57c:	b29a      	uxth	r2, r3
 800f57e:	683b      	ldr	r3, [r7, #0]
 800f580:	3307      	adds	r3, #7
 800f582:	781b      	ldrb	r3, [r3, #0]
 800f584:	b29b      	uxth	r3, r3
 800f586:	021b      	lsls	r3, r3, #8
 800f588:	b29b      	uxth	r3, r3
 800f58a:	4413      	add	r3, r2
 800f58c:	b29a      	uxth	r2, r3
 800f58e:	687b      	ldr	r3, [r7, #4]
 800f590:	80da      	strh	r2, [r3, #6]

}
 800f592:	bf00      	nop
 800f594:	370c      	adds	r7, #12
 800f596:	46bd      	mov	sp, r7
 800f598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f59c:	4770      	bx	lr

0800f59e <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError( USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 800f59e:	b580      	push	{r7, lr}
 800f5a0:	b082      	sub	sp, #8
 800f5a2:	af00      	add	r7, sp, #0
 800f5a4:	6078      	str	r0, [r7, #4]
 800f5a6:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev , 0x80U);
 800f5a8:	2180      	movs	r1, #128	; 0x80
 800f5aa:	6878      	ldr	r0, [r7, #4]
 800f5ac:	f000 fd5e 	bl	801006c <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0U);
 800f5b0:	2100      	movs	r1, #0
 800f5b2:	6878      	ldr	r0, [r7, #4]
 800f5b4:	f000 fd5a 	bl	801006c <USBD_LL_StallEP>
}
 800f5b8:	bf00      	nop
 800f5ba:	3708      	adds	r7, #8
 800f5bc:	46bd      	mov	sp, r7
 800f5be:	bd80      	pop	{r7, pc}

0800f5c0 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800f5c0:	b580      	push	{r7, lr}
 800f5c2:	b086      	sub	sp, #24
 800f5c4:	af00      	add	r7, sp, #0
 800f5c6:	60f8      	str	r0, [r7, #12]
 800f5c8:	60b9      	str	r1, [r7, #8]
 800f5ca:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800f5cc:	2300      	movs	r3, #0
 800f5ce:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 800f5d0:	68fb      	ldr	r3, [r7, #12]
 800f5d2:	2b00      	cmp	r3, #0
 800f5d4:	d032      	beq.n	800f63c <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800f5d6:	68f8      	ldr	r0, [r7, #12]
 800f5d8:	f000 f834 	bl	800f644 <USBD_GetLen>
 800f5dc:	4603      	mov	r3, r0
 800f5de:	3301      	adds	r3, #1
 800f5e0:	b29b      	uxth	r3, r3
 800f5e2:	005b      	lsls	r3, r3, #1
 800f5e4:	b29a      	uxth	r2, r3
 800f5e6:	687b      	ldr	r3, [r7, #4]
 800f5e8:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800f5ea:	7dfb      	ldrb	r3, [r7, #23]
 800f5ec:	1c5a      	adds	r2, r3, #1
 800f5ee:	75fa      	strb	r2, [r7, #23]
 800f5f0:	461a      	mov	r2, r3
 800f5f2:	68bb      	ldr	r3, [r7, #8]
 800f5f4:	4413      	add	r3, r2
 800f5f6:	687a      	ldr	r2, [r7, #4]
 800f5f8:	7812      	ldrb	r2, [r2, #0]
 800f5fa:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800f5fc:	7dfb      	ldrb	r3, [r7, #23]
 800f5fe:	1c5a      	adds	r2, r3, #1
 800f600:	75fa      	strb	r2, [r7, #23]
 800f602:	461a      	mov	r2, r3
 800f604:	68bb      	ldr	r3, [r7, #8]
 800f606:	4413      	add	r3, r2
 800f608:	2203      	movs	r2, #3
 800f60a:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800f60c:	e012      	b.n	800f634 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 800f60e:	68fb      	ldr	r3, [r7, #12]
 800f610:	1c5a      	adds	r2, r3, #1
 800f612:	60fa      	str	r2, [r7, #12]
 800f614:	7dfa      	ldrb	r2, [r7, #23]
 800f616:	1c51      	adds	r1, r2, #1
 800f618:	75f9      	strb	r1, [r7, #23]
 800f61a:	4611      	mov	r1, r2
 800f61c:	68ba      	ldr	r2, [r7, #8]
 800f61e:	440a      	add	r2, r1
 800f620:	781b      	ldrb	r3, [r3, #0]
 800f622:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800f624:	7dfb      	ldrb	r3, [r7, #23]
 800f626:	1c5a      	adds	r2, r3, #1
 800f628:	75fa      	strb	r2, [r7, #23]
 800f62a:	461a      	mov	r2, r3
 800f62c:	68bb      	ldr	r3, [r7, #8]
 800f62e:	4413      	add	r3, r2
 800f630:	2200      	movs	r2, #0
 800f632:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800f634:	68fb      	ldr	r3, [r7, #12]
 800f636:	781b      	ldrb	r3, [r3, #0]
 800f638:	2b00      	cmp	r3, #0
 800f63a:	d1e8      	bne.n	800f60e <USBD_GetString+0x4e>
    }
  }
}
 800f63c:	bf00      	nop
 800f63e:	3718      	adds	r7, #24
 800f640:	46bd      	mov	sp, r7
 800f642:	bd80      	pop	{r7, pc}

0800f644 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800f644:	b480      	push	{r7}
 800f646:	b085      	sub	sp, #20
 800f648:	af00      	add	r7, sp, #0
 800f64a:	6078      	str	r0, [r7, #4]
    uint8_t  len = 0U;
 800f64c:	2300      	movs	r3, #0
 800f64e:	73fb      	strb	r3, [r7, #15]

    while (*buf != '\0')
 800f650:	e005      	b.n	800f65e <USBD_GetLen+0x1a>
    {
        len++;
 800f652:	7bfb      	ldrb	r3, [r7, #15]
 800f654:	3301      	adds	r3, #1
 800f656:	73fb      	strb	r3, [r7, #15]
        buf++;
 800f658:	687b      	ldr	r3, [r7, #4]
 800f65a:	3301      	adds	r3, #1
 800f65c:	607b      	str	r3, [r7, #4]
    while (*buf != '\0')
 800f65e:	687b      	ldr	r3, [r7, #4]
 800f660:	781b      	ldrb	r3, [r3, #0]
 800f662:	2b00      	cmp	r3, #0
 800f664:	d1f5      	bne.n	800f652 <USBD_GetLen+0xe>
    }

    return len;
 800f666:	7bfb      	ldrb	r3, [r7, #15]
}
 800f668:	4618      	mov	r0, r3
 800f66a:	3714      	adds	r7, #20
 800f66c:	46bd      	mov	sp, r7
 800f66e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f672:	4770      	bx	lr

0800f674 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                     uint16_t len)
{
 800f674:	b580      	push	{r7, lr}
 800f676:	b084      	sub	sp, #16
 800f678:	af00      	add	r7, sp, #0
 800f67a:	60f8      	str	r0, [r7, #12]
 800f67c:	60b9      	str	r1, [r7, #8]
 800f67e:	4613      	mov	r3, r2
 800f680:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800f682:	68fb      	ldr	r3, [r7, #12]
 800f684:	2202      	movs	r2, #2
 800f686:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->ep_in[0].total_length = len;
 800f68a:	88fa      	ldrh	r2, [r7, #6]
 800f68c:	68fb      	ldr	r3, [r7, #12]
 800f68e:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800f690:	88fa      	ldrh	r2, [r7, #6]
 800f692:	68fb      	ldr	r3, [r7, #12]
 800f694:	621a      	str	r2, [r3, #32]

 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 800f696:	88fb      	ldrh	r3, [r7, #6]
 800f698:	68ba      	ldr	r2, [r7, #8]
 800f69a:	2100      	movs	r1, #0
 800f69c:	68f8      	ldr	r0, [r7, #12]
 800f69e:	f000 fd6e 	bl	801017e <USBD_LL_Transmit>

  return USBD_OK;
 800f6a2:	2300      	movs	r3, #0
}
 800f6a4:	4618      	mov	r0, r3
 800f6a6:	3710      	adds	r7, #16
 800f6a8:	46bd      	mov	sp, r7
 800f6aa:	bd80      	pop	{r7, pc}

0800f6ac <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData (USBD_HandleTypeDef *pdev,
                                             uint8_t *pbuf, uint16_t len)
{
 800f6ac:	b580      	push	{r7, lr}
 800f6ae:	b084      	sub	sp, #16
 800f6b0:	af00      	add	r7, sp, #0
 800f6b2:	60f8      	str	r0, [r7, #12]
 800f6b4:	60b9      	str	r1, [r7, #8]
 800f6b6:	4613      	mov	r3, r2
 800f6b8:	80fb      	strh	r3, [r7, #6]
 /* Start the next transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 800f6ba:	88fb      	ldrh	r3, [r7, #6]
 800f6bc:	68ba      	ldr	r2, [r7, #8]
 800f6be:	2100      	movs	r1, #0
 800f6c0:	68f8      	ldr	r0, [r7, #12]
 800f6c2:	f000 fd5c 	bl	801017e <USBD_LL_Transmit>

  return USBD_OK;
 800f6c6:	2300      	movs	r3, #0
}
 800f6c8:	4618      	mov	r0, r3
 800f6ca:	3710      	adds	r7, #16
 800f6cc:	46bd      	mov	sp, r7
 800f6ce:	bd80      	pop	{r7, pc}

0800f6d0 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                      uint16_t len)
{
 800f6d0:	b580      	push	{r7, lr}
 800f6d2:	b084      	sub	sp, #16
 800f6d4:	af00      	add	r7, sp, #0
 800f6d6:	60f8      	str	r0, [r7, #12]
 800f6d8:	60b9      	str	r1, [r7, #8]
 800f6da:	4613      	mov	r3, r2
 800f6dc:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800f6de:	68fb      	ldr	r3, [r7, #12]
 800f6e0:	2203      	movs	r2, #3
 800f6e2:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->ep_out[0].total_length = len;
 800f6e6:	88fa      	ldrh	r2, [r7, #6]
 800f6e8:	68fb      	ldr	r3, [r7, #12]
 800f6ea:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
  pdev->ep_out[0].rem_length   = len;
 800f6ee:	88fa      	ldrh	r2, [r7, #6]
 800f6f0:	68fb      	ldr	r3, [r7, #12]
 800f6f2:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c

  /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, pbuf, len);
 800f6f6:	88fb      	ldrh	r3, [r7, #6]
 800f6f8:	68ba      	ldr	r2, [r7, #8]
 800f6fa:	2100      	movs	r1, #0
 800f6fc:	68f8      	ldr	r0, [r7, #12]
 800f6fe:	f000 fd61 	bl	80101c4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800f702:	2300      	movs	r3, #0
}
 800f704:	4618      	mov	r0, r3
 800f706:	3710      	adds	r7, #16
 800f708:	46bd      	mov	sp, r7
 800f70a:	bd80      	pop	{r7, pc}

0800f70c <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                       uint16_t len)
{
 800f70c:	b580      	push	{r7, lr}
 800f70e:	b084      	sub	sp, #16
 800f710:	af00      	add	r7, sp, #0
 800f712:	60f8      	str	r0, [r7, #12]
 800f714:	60b9      	str	r1, [r7, #8]
 800f716:	4613      	mov	r3, r2
 800f718:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800f71a:	88fb      	ldrh	r3, [r7, #6]
 800f71c:	68ba      	ldr	r2, [r7, #8]
 800f71e:	2100      	movs	r1, #0
 800f720:	68f8      	ldr	r0, [r7, #12]
 800f722:	f000 fd4f 	bl	80101c4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800f726:	2300      	movs	r3, #0
}
 800f728:	4618      	mov	r0, r3
 800f72a:	3710      	adds	r7, #16
 800f72c:	46bd      	mov	sp, r7
 800f72e:	bd80      	pop	{r7, pc}

0800f730 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus (USBD_HandleTypeDef *pdev)
{
 800f730:	b580      	push	{r7, lr}
 800f732:	b082      	sub	sp, #8
 800f734:	af00      	add	r7, sp, #0
 800f736:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800f738:	687b      	ldr	r3, [r7, #4]
 800f73a:	2204      	movs	r2, #4
 800f73c:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800f740:	2300      	movs	r3, #0
 800f742:	2200      	movs	r2, #0
 800f744:	2100      	movs	r1, #0
 800f746:	6878      	ldr	r0, [r7, #4]
 800f748:	f000 fd19 	bl	801017e <USBD_LL_Transmit>

  return USBD_OK;
 800f74c:	2300      	movs	r3, #0
}
 800f74e:	4618      	mov	r0, r3
 800f750:	3708      	adds	r7, #8
 800f752:	46bd      	mov	sp, r7
 800f754:	bd80      	pop	{r7, pc}

0800f756 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus (USBD_HandleTypeDef *pdev)
{
 800f756:	b580      	push	{r7, lr}
 800f758:	b082      	sub	sp, #8
 800f75a:	af00      	add	r7, sp, #0
 800f75c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800f75e:	687b      	ldr	r3, [r7, #4]
 800f760:	2205      	movs	r2, #5
 800f762:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

 /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 800f766:	2300      	movs	r3, #0
 800f768:	2200      	movs	r2, #0
 800f76a:	2100      	movs	r1, #0
 800f76c:	6878      	ldr	r0, [r7, #4]
 800f76e:	f000 fd29 	bl	80101c4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800f772:	2300      	movs	r3, #0
}
 800f774:	4618      	mov	r0, r3
 800f776:	3708      	adds	r7, #8
 800f778:	46bd      	mov	sp, r7
 800f77a:	bd80      	pop	{r7, pc}

0800f77c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800f77c:	b480      	push	{r7}
 800f77e:	b087      	sub	sp, #28
 800f780:	af00      	add	r7, sp, #0
 800f782:	60f8      	str	r0, [r7, #12]
 800f784:	60b9      	str	r1, [r7, #8]
 800f786:	4613      	mov	r3, r2
 800f788:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800f78a:	2301      	movs	r3, #1
 800f78c:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800f78e:	2300      	movs	r3, #0
 800f790:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800f792:	4b1f      	ldr	r3, [pc, #124]	; (800f810 <FATFS_LinkDriverEx+0x94>)
 800f794:	7a5b      	ldrb	r3, [r3, #9]
 800f796:	b2db      	uxtb	r3, r3
 800f798:	2b00      	cmp	r3, #0
 800f79a:	d131      	bne.n	800f800 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800f79c:	4b1c      	ldr	r3, [pc, #112]	; (800f810 <FATFS_LinkDriverEx+0x94>)
 800f79e:	7a5b      	ldrb	r3, [r3, #9]
 800f7a0:	b2db      	uxtb	r3, r3
 800f7a2:	461a      	mov	r2, r3
 800f7a4:	4b1a      	ldr	r3, [pc, #104]	; (800f810 <FATFS_LinkDriverEx+0x94>)
 800f7a6:	2100      	movs	r1, #0
 800f7a8:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800f7aa:	4b19      	ldr	r3, [pc, #100]	; (800f810 <FATFS_LinkDriverEx+0x94>)
 800f7ac:	7a5b      	ldrb	r3, [r3, #9]
 800f7ae:	b2db      	uxtb	r3, r3
 800f7b0:	4a17      	ldr	r2, [pc, #92]	; (800f810 <FATFS_LinkDriverEx+0x94>)
 800f7b2:	009b      	lsls	r3, r3, #2
 800f7b4:	4413      	add	r3, r2
 800f7b6:	68fa      	ldr	r2, [r7, #12]
 800f7b8:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800f7ba:	4b15      	ldr	r3, [pc, #84]	; (800f810 <FATFS_LinkDriverEx+0x94>)
 800f7bc:	7a5b      	ldrb	r3, [r3, #9]
 800f7be:	b2db      	uxtb	r3, r3
 800f7c0:	461a      	mov	r2, r3
 800f7c2:	4b13      	ldr	r3, [pc, #76]	; (800f810 <FATFS_LinkDriverEx+0x94>)
 800f7c4:	4413      	add	r3, r2
 800f7c6:	79fa      	ldrb	r2, [r7, #7]
 800f7c8:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800f7ca:	4b11      	ldr	r3, [pc, #68]	; (800f810 <FATFS_LinkDriverEx+0x94>)
 800f7cc:	7a5b      	ldrb	r3, [r3, #9]
 800f7ce:	b2db      	uxtb	r3, r3
 800f7d0:	1c5a      	adds	r2, r3, #1
 800f7d2:	b2d1      	uxtb	r1, r2
 800f7d4:	4a0e      	ldr	r2, [pc, #56]	; (800f810 <FATFS_LinkDriverEx+0x94>)
 800f7d6:	7251      	strb	r1, [r2, #9]
 800f7d8:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800f7da:	7dbb      	ldrb	r3, [r7, #22]
 800f7dc:	3330      	adds	r3, #48	; 0x30
 800f7de:	b2da      	uxtb	r2, r3
 800f7e0:	68bb      	ldr	r3, [r7, #8]
 800f7e2:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800f7e4:	68bb      	ldr	r3, [r7, #8]
 800f7e6:	3301      	adds	r3, #1
 800f7e8:	223a      	movs	r2, #58	; 0x3a
 800f7ea:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800f7ec:	68bb      	ldr	r3, [r7, #8]
 800f7ee:	3302      	adds	r3, #2
 800f7f0:	222f      	movs	r2, #47	; 0x2f
 800f7f2:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800f7f4:	68bb      	ldr	r3, [r7, #8]
 800f7f6:	3303      	adds	r3, #3
 800f7f8:	2200      	movs	r2, #0
 800f7fa:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800f7fc:	2300      	movs	r3, #0
 800f7fe:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800f800:	7dfb      	ldrb	r3, [r7, #23]
}
 800f802:	4618      	mov	r0, r3
 800f804:	371c      	adds	r7, #28
 800f806:	46bd      	mov	sp, r7
 800f808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f80c:	4770      	bx	lr
 800f80e:	bf00      	nop
 800f810:	20000780 	.word	0x20000780

0800f814 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800f814:	b580      	push	{r7, lr}
 800f816:	b082      	sub	sp, #8
 800f818:	af00      	add	r7, sp, #0
 800f81a:	6078      	str	r0, [r7, #4]
 800f81c:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800f81e:	2200      	movs	r2, #0
 800f820:	6839      	ldr	r1, [r7, #0]
 800f822:	6878      	ldr	r0, [r7, #4]
 800f824:	f7ff ffaa 	bl	800f77c <FATFS_LinkDriverEx>
 800f828:	4603      	mov	r3, r0
}
 800f82a:	4618      	mov	r0, r3
 800f82c:	3708      	adds	r7, #8
 800f82e:	46bd      	mov	sp, r7
 800f830:	bd80      	pop	{r7, pc}
	...

0800f834 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800f834:	b580      	push	{r7, lr}
 800f836:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800f838:	2200      	movs	r2, #0
 800f83a:	4912      	ldr	r1, [pc, #72]	; (800f884 <MX_USB_DEVICE_Init+0x50>)
 800f83c:	4812      	ldr	r0, [pc, #72]	; (800f888 <MX_USB_DEVICE_Init+0x54>)
 800f83e:	f7fe ff43 	bl	800e6c8 <USBD_Init>
 800f842:	4603      	mov	r3, r0
 800f844:	2b00      	cmp	r3, #0
 800f846:	d001      	beq.n	800f84c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800f848:	f7f5 f85a 	bl	8004900 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800f84c:	490f      	ldr	r1, [pc, #60]	; (800f88c <MX_USB_DEVICE_Init+0x58>)
 800f84e:	480e      	ldr	r0, [pc, #56]	; (800f888 <MX_USB_DEVICE_Init+0x54>)
 800f850:	f7fe ff65 	bl	800e71e <USBD_RegisterClass>
 800f854:	4603      	mov	r3, r0
 800f856:	2b00      	cmp	r3, #0
 800f858:	d001      	beq.n	800f85e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800f85a:	f7f5 f851 	bl	8004900 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800f85e:	490c      	ldr	r1, [pc, #48]	; (800f890 <MX_USB_DEVICE_Init+0x5c>)
 800f860:	4809      	ldr	r0, [pc, #36]	; (800f888 <MX_USB_DEVICE_Init+0x54>)
 800f862:	f7fe fe93 	bl	800e58c <USBD_CDC_RegisterInterface>
 800f866:	4603      	mov	r3, r0
 800f868:	2b00      	cmp	r3, #0
 800f86a:	d001      	beq.n	800f870 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800f86c:	f7f5 f848 	bl	8004900 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800f870:	4805      	ldr	r0, [pc, #20]	; (800f888 <MX_USB_DEVICE_Init+0x54>)
 800f872:	f7fe ff6e 	bl	800e752 <USBD_Start>
 800f876:	4603      	mov	r3, r0
 800f878:	2b00      	cmp	r3, #0
 800f87a:	d001      	beq.n	800f880 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800f87c:	f7f5 f840 	bl	8004900 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800f880:	bf00      	nop
 800f882:	bd80      	pop	{r7, pc}
 800f884:	20000130 	.word	0x20000130
 800f888:	20002da0 	.word	0x20002da0
 800f88c:	2000001c 	.word	0x2000001c
 800f890:	20000120 	.word	0x20000120

0800f894 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800f894:	b580      	push	{r7, lr}
 800f896:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800f898:	2200      	movs	r2, #0
 800f89a:	4905      	ldr	r1, [pc, #20]	; (800f8b0 <CDC_Init_FS+0x1c>)
 800f89c:	4805      	ldr	r0, [pc, #20]	; (800f8b4 <CDC_Init_FS+0x20>)
 800f89e:	f7fe fe8c 	bl	800e5ba <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800f8a2:	4905      	ldr	r1, [pc, #20]	; (800f8b8 <CDC_Init_FS+0x24>)
 800f8a4:	4803      	ldr	r0, [pc, #12]	; (800f8b4 <CDC_Init_FS+0x20>)
 800f8a6:	f7fe fea2 	bl	800e5ee <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800f8aa:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800f8ac:	4618      	mov	r0, r3
 800f8ae:	bd80      	pop	{r7, pc}
 800f8b0:	2000383c 	.word	0x2000383c
 800f8b4:	20002da0 	.word	0x20002da0
 800f8b8:	2000303c 	.word	0x2000303c

0800f8bc <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800f8bc:	b480      	push	{r7}
 800f8be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800f8c0:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800f8c2:	4618      	mov	r0, r3
 800f8c4:	46bd      	mov	sp, r7
 800f8c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8ca:	4770      	bx	lr

0800f8cc <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800f8cc:	b480      	push	{r7}
 800f8ce:	b085      	sub	sp, #20
 800f8d0:	af00      	add	r7, sp, #0
 800f8d2:	4603      	mov	r3, r0
 800f8d4:	6039      	str	r1, [r7, #0]
 800f8d6:	71fb      	strb	r3, [r7, #7]
 800f8d8:	4613      	mov	r3, r2
 800f8da:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  uint8_t tempbuf[7] = {0,0,0,0,0,0,0};
 800f8dc:	f107 0308 	add.w	r3, r7, #8
 800f8e0:	2200      	movs	r2, #0
 800f8e2:	601a      	str	r2, [r3, #0]
 800f8e4:	f8c3 2003 	str.w	r2, [r3, #3]
  switch(cmd)
 800f8e8:	79fb      	ldrb	r3, [r7, #7]
 800f8ea:	2b23      	cmp	r3, #35	; 0x23
 800f8ec:	d87c      	bhi.n	800f9e8 <CDC_Control_FS+0x11c>
 800f8ee:	a201      	add	r2, pc, #4	; (adr r2, 800f8f4 <CDC_Control_FS+0x28>)
 800f8f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f8f4:	0800f9e9 	.word	0x0800f9e9
 800f8f8:	0800f9e9 	.word	0x0800f9e9
 800f8fc:	0800f9e9 	.word	0x0800f9e9
 800f900:	0800f9e9 	.word	0x0800f9e9
 800f904:	0800f9e9 	.word	0x0800f9e9
 800f908:	0800f9e9 	.word	0x0800f9e9
 800f90c:	0800f9e9 	.word	0x0800f9e9
 800f910:	0800f9e9 	.word	0x0800f9e9
 800f914:	0800f9e9 	.word	0x0800f9e9
 800f918:	0800f9e9 	.word	0x0800f9e9
 800f91c:	0800f9e9 	.word	0x0800f9e9
 800f920:	0800f9e9 	.word	0x0800f9e9
 800f924:	0800f9e9 	.word	0x0800f9e9
 800f928:	0800f9e9 	.word	0x0800f9e9
 800f92c:	0800f9e9 	.word	0x0800f9e9
 800f930:	0800f9e9 	.word	0x0800f9e9
 800f934:	0800f9e9 	.word	0x0800f9e9
 800f938:	0800f9e9 	.word	0x0800f9e9
 800f93c:	0800f9e9 	.word	0x0800f9e9
 800f940:	0800f9e9 	.word	0x0800f9e9
 800f944:	0800f9e9 	.word	0x0800f9e9
 800f948:	0800f9e9 	.word	0x0800f9e9
 800f94c:	0800f9e9 	.word	0x0800f9e9
 800f950:	0800f9e9 	.word	0x0800f9e9
 800f954:	0800f9e9 	.word	0x0800f9e9
 800f958:	0800f9e9 	.word	0x0800f9e9
 800f95c:	0800f9e9 	.word	0x0800f9e9
 800f960:	0800f9e9 	.word	0x0800f9e9
 800f964:	0800f9e9 	.word	0x0800f9e9
 800f968:	0800f9e9 	.word	0x0800f9e9
 800f96c:	0800f9e9 	.word	0x0800f9e9
 800f970:	0800f9e9 	.word	0x0800f9e9
 800f974:	0800f985 	.word	0x0800f985
 800f978:	0800f9b1 	.word	0x0800f9b1
 800f97c:	0800f9e9 	.word	0x0800f9e9
 800f980:	0800f9e9 	.word	0x0800f9e9
  /*                                        3 - Mark                             */
  /*                                        4 - Space                            */
  /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
  /*******************************************************************************/
    case CDC_SET_LINE_CODING:
      	tempbuf[0] = pbuf[0];
 800f984:	683b      	ldr	r3, [r7, #0]
 800f986:	781b      	ldrb	r3, [r3, #0]
 800f988:	723b      	strb	r3, [r7, #8]
      	tempbuf[1] = pbuf[1];
 800f98a:	683b      	ldr	r3, [r7, #0]
 800f98c:	785b      	ldrb	r3, [r3, #1]
 800f98e:	727b      	strb	r3, [r7, #9]
      	tempbuf[2] = pbuf[2];
 800f990:	683b      	ldr	r3, [r7, #0]
 800f992:	789b      	ldrb	r3, [r3, #2]
 800f994:	72bb      	strb	r3, [r7, #10]
      	tempbuf[3] = pbuf[3];
 800f996:	683b      	ldr	r3, [r7, #0]
 800f998:	78db      	ldrb	r3, [r3, #3]
 800f99a:	72fb      	strb	r3, [r7, #11]
      	tempbuf[4] = pbuf[4];
 800f99c:	683b      	ldr	r3, [r7, #0]
 800f99e:	791b      	ldrb	r3, [r3, #4]
 800f9a0:	733b      	strb	r3, [r7, #12]
      	tempbuf[5] = pbuf[5];
 800f9a2:	683b      	ldr	r3, [r7, #0]
 800f9a4:	795b      	ldrb	r3, [r3, #5]
 800f9a6:	737b      	strb	r3, [r7, #13]
      	tempbuf[6] = pbuf[6];
 800f9a8:	683b      	ldr	r3, [r7, #0]
 800f9aa:	799b      	ldrb	r3, [r3, #6]
 800f9ac:	73bb      	strb	r3, [r7, #14]
      	break;
 800f9ae:	e01c      	b.n	800f9ea <CDC_Control_FS+0x11e>

    case CDC_GET_LINE_CODING:
      	pbuf[0] = tempbuf[0];
 800f9b0:	7a3a      	ldrb	r2, [r7, #8]
 800f9b2:	683b      	ldr	r3, [r7, #0]
 800f9b4:	701a      	strb	r2, [r3, #0]
      	pbuf[1] = tempbuf[1];
 800f9b6:	683b      	ldr	r3, [r7, #0]
 800f9b8:	3301      	adds	r3, #1
 800f9ba:	7a7a      	ldrb	r2, [r7, #9]
 800f9bc:	701a      	strb	r2, [r3, #0]
      	pbuf[2] = tempbuf[2];
 800f9be:	683b      	ldr	r3, [r7, #0]
 800f9c0:	3302      	adds	r3, #2
 800f9c2:	7aba      	ldrb	r2, [r7, #10]
 800f9c4:	701a      	strb	r2, [r3, #0]
      	pbuf[3] = tempbuf[3];
 800f9c6:	683b      	ldr	r3, [r7, #0]
 800f9c8:	3303      	adds	r3, #3
 800f9ca:	7afa      	ldrb	r2, [r7, #11]
 800f9cc:	701a      	strb	r2, [r3, #0]
      	pbuf[4] = tempbuf[4];
 800f9ce:	683b      	ldr	r3, [r7, #0]
 800f9d0:	3304      	adds	r3, #4
 800f9d2:	7b3a      	ldrb	r2, [r7, #12]
 800f9d4:	701a      	strb	r2, [r3, #0]
      	pbuf[5] = tempbuf[5];
 800f9d6:	683b      	ldr	r3, [r7, #0]
 800f9d8:	3305      	adds	r3, #5
 800f9da:	7b7a      	ldrb	r2, [r7, #13]
 800f9dc:	701a      	strb	r2, [r3, #0]
      	pbuf[6] = tempbuf[6];
 800f9de:	683b      	ldr	r3, [r7, #0]
 800f9e0:	3306      	adds	r3, #6
 800f9e2:	7bba      	ldrb	r2, [r7, #14]
 800f9e4:	701a      	strb	r2, [r3, #0]
      	break;
 800f9e6:	e000      	b.n	800f9ea <CDC_Control_FS+0x11e>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800f9e8:	bf00      	nop
  }

  return (USBD_OK);
 800f9ea:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800f9ec:	4618      	mov	r0, r3
 800f9ee:	3714      	adds	r7, #20
 800f9f0:	46bd      	mov	sp, r7
 800f9f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9f6:	4770      	bx	lr

0800f9f8 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800f9f8:	b580      	push	{r7, lr}
 800f9fa:	b082      	sub	sp, #8
 800f9fc:	af00      	add	r7, sp, #0
 800f9fe:	6078      	str	r0, [r7, #4]
 800fa00:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800fa02:	6879      	ldr	r1, [r7, #4]
 800fa04:	4805      	ldr	r0, [pc, #20]	; (800fa1c <CDC_Receive_FS+0x24>)
 800fa06:	f7fe fdf2 	bl	800e5ee <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800fa0a:	4804      	ldr	r0, [pc, #16]	; (800fa1c <CDC_Receive_FS+0x24>)
 800fa0c:	f7fe fe32 	bl	800e674 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800fa10:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800fa12:	4618      	mov	r0, r3
 800fa14:	3708      	adds	r7, #8
 800fa16:	46bd      	mov	sp, r7
 800fa18:	bd80      	pop	{r7, pc}
 800fa1a:	bf00      	nop
 800fa1c:	20002da0 	.word	0x20002da0

0800fa20 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800fa20:	b580      	push	{r7, lr}
 800fa22:	b084      	sub	sp, #16
 800fa24:	af00      	add	r7, sp, #0
 800fa26:	6078      	str	r0, [r7, #4]
 800fa28:	460b      	mov	r3, r1
 800fa2a:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800fa2c:	2300      	movs	r3, #0
 800fa2e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800fa30:	4b0d      	ldr	r3, [pc, #52]	; (800fa68 <CDC_Transmit_FS+0x48>)
 800fa32:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800fa36:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800fa38:	68bb      	ldr	r3, [r7, #8]
 800fa3a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800fa3e:	2b00      	cmp	r3, #0
 800fa40:	d001      	beq.n	800fa46 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800fa42:	2301      	movs	r3, #1
 800fa44:	e00b      	b.n	800fa5e <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800fa46:	887b      	ldrh	r3, [r7, #2]
 800fa48:	461a      	mov	r2, r3
 800fa4a:	6879      	ldr	r1, [r7, #4]
 800fa4c:	4806      	ldr	r0, [pc, #24]	; (800fa68 <CDC_Transmit_FS+0x48>)
 800fa4e:	f7fe fdb4 	bl	800e5ba <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800fa52:	4805      	ldr	r0, [pc, #20]	; (800fa68 <CDC_Transmit_FS+0x48>)
 800fa54:	f7fe fddf 	bl	800e616 <USBD_CDC_TransmitPacket>
 800fa58:	4603      	mov	r3, r0
 800fa5a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800fa5c:	7bfb      	ldrb	r3, [r7, #15]
}
 800fa5e:	4618      	mov	r0, r3
 800fa60:	3710      	adds	r7, #16
 800fa62:	46bd      	mov	sp, r7
 800fa64:	bd80      	pop	{r7, pc}
 800fa66:	bf00      	nop
 800fa68:	20002da0 	.word	0x20002da0

0800fa6c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800fa6c:	b480      	push	{r7}
 800fa6e:	b083      	sub	sp, #12
 800fa70:	af00      	add	r7, sp, #0
 800fa72:	4603      	mov	r3, r0
 800fa74:	6039      	str	r1, [r7, #0]
 800fa76:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800fa78:	683b      	ldr	r3, [r7, #0]
 800fa7a:	2212      	movs	r2, #18
 800fa7c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800fa7e:	4b03      	ldr	r3, [pc, #12]	; (800fa8c <USBD_FS_DeviceDescriptor+0x20>)
}
 800fa80:	4618      	mov	r0, r3
 800fa82:	370c      	adds	r7, #12
 800fa84:	46bd      	mov	sp, r7
 800fa86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa8a:	4770      	bx	lr
 800fa8c:	2000014c 	.word	0x2000014c

0800fa90 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800fa90:	b480      	push	{r7}
 800fa92:	b083      	sub	sp, #12
 800fa94:	af00      	add	r7, sp, #0
 800fa96:	4603      	mov	r3, r0
 800fa98:	6039      	str	r1, [r7, #0]
 800fa9a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800fa9c:	683b      	ldr	r3, [r7, #0]
 800fa9e:	2204      	movs	r2, #4
 800faa0:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800faa2:	4b03      	ldr	r3, [pc, #12]	; (800fab0 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800faa4:	4618      	mov	r0, r3
 800faa6:	370c      	adds	r7, #12
 800faa8:	46bd      	mov	sp, r7
 800faaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800faae:	4770      	bx	lr
 800fab0:	20000160 	.word	0x20000160

0800fab4 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800fab4:	b580      	push	{r7, lr}
 800fab6:	b082      	sub	sp, #8
 800fab8:	af00      	add	r7, sp, #0
 800faba:	4603      	mov	r3, r0
 800fabc:	6039      	str	r1, [r7, #0]
 800fabe:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800fac0:	79fb      	ldrb	r3, [r7, #7]
 800fac2:	2b00      	cmp	r3, #0
 800fac4:	d105      	bne.n	800fad2 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800fac6:	683a      	ldr	r2, [r7, #0]
 800fac8:	4907      	ldr	r1, [pc, #28]	; (800fae8 <USBD_FS_ProductStrDescriptor+0x34>)
 800faca:	4808      	ldr	r0, [pc, #32]	; (800faec <USBD_FS_ProductStrDescriptor+0x38>)
 800facc:	f7ff fd78 	bl	800f5c0 <USBD_GetString>
 800fad0:	e004      	b.n	800fadc <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800fad2:	683a      	ldr	r2, [r7, #0]
 800fad4:	4904      	ldr	r1, [pc, #16]	; (800fae8 <USBD_FS_ProductStrDescriptor+0x34>)
 800fad6:	4805      	ldr	r0, [pc, #20]	; (800faec <USBD_FS_ProductStrDescriptor+0x38>)
 800fad8:	f7ff fd72 	bl	800f5c0 <USBD_GetString>
  }
  return USBD_StrDesc;
 800fadc:	4b02      	ldr	r3, [pc, #8]	; (800fae8 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800fade:	4618      	mov	r0, r3
 800fae0:	3708      	adds	r7, #8
 800fae2:	46bd      	mov	sp, r7
 800fae4:	bd80      	pop	{r7, pc}
 800fae6:	bf00      	nop
 800fae8:	2000403c 	.word	0x2000403c
 800faec:	08015c98 	.word	0x08015c98

0800faf0 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800faf0:	b580      	push	{r7, lr}
 800faf2:	b082      	sub	sp, #8
 800faf4:	af00      	add	r7, sp, #0
 800faf6:	4603      	mov	r3, r0
 800faf8:	6039      	str	r1, [r7, #0]
 800fafa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800fafc:	683a      	ldr	r2, [r7, #0]
 800fafe:	4904      	ldr	r1, [pc, #16]	; (800fb10 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800fb00:	4804      	ldr	r0, [pc, #16]	; (800fb14 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800fb02:	f7ff fd5d 	bl	800f5c0 <USBD_GetString>
  return USBD_StrDesc;
 800fb06:	4b02      	ldr	r3, [pc, #8]	; (800fb10 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800fb08:	4618      	mov	r0, r3
 800fb0a:	3708      	adds	r7, #8
 800fb0c:	46bd      	mov	sp, r7
 800fb0e:	bd80      	pop	{r7, pc}
 800fb10:	2000403c 	.word	0x2000403c
 800fb14:	08015ca4 	.word	0x08015ca4

0800fb18 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800fb18:	b580      	push	{r7, lr}
 800fb1a:	b082      	sub	sp, #8
 800fb1c:	af00      	add	r7, sp, #0
 800fb1e:	4603      	mov	r3, r0
 800fb20:	6039      	str	r1, [r7, #0]
 800fb22:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800fb24:	683b      	ldr	r3, [r7, #0]
 800fb26:	221a      	movs	r2, #26
 800fb28:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800fb2a:	f000 f843 	bl	800fbb4 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */
  
  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800fb2e:	4b02      	ldr	r3, [pc, #8]	; (800fb38 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800fb30:	4618      	mov	r0, r3
 800fb32:	3708      	adds	r7, #8
 800fb34:	46bd      	mov	sp, r7
 800fb36:	bd80      	pop	{r7, pc}
 800fb38:	20000164 	.word	0x20000164

0800fb3c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800fb3c:	b580      	push	{r7, lr}
 800fb3e:	b082      	sub	sp, #8
 800fb40:	af00      	add	r7, sp, #0
 800fb42:	4603      	mov	r3, r0
 800fb44:	6039      	str	r1, [r7, #0]
 800fb46:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800fb48:	79fb      	ldrb	r3, [r7, #7]
 800fb4a:	2b00      	cmp	r3, #0
 800fb4c:	d105      	bne.n	800fb5a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800fb4e:	683a      	ldr	r2, [r7, #0]
 800fb50:	4907      	ldr	r1, [pc, #28]	; (800fb70 <USBD_FS_ConfigStrDescriptor+0x34>)
 800fb52:	4808      	ldr	r0, [pc, #32]	; (800fb74 <USBD_FS_ConfigStrDescriptor+0x38>)
 800fb54:	f7ff fd34 	bl	800f5c0 <USBD_GetString>
 800fb58:	e004      	b.n	800fb64 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800fb5a:	683a      	ldr	r2, [r7, #0]
 800fb5c:	4904      	ldr	r1, [pc, #16]	; (800fb70 <USBD_FS_ConfigStrDescriptor+0x34>)
 800fb5e:	4805      	ldr	r0, [pc, #20]	; (800fb74 <USBD_FS_ConfigStrDescriptor+0x38>)
 800fb60:	f7ff fd2e 	bl	800f5c0 <USBD_GetString>
  }
  return USBD_StrDesc;
 800fb64:	4b02      	ldr	r3, [pc, #8]	; (800fb70 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800fb66:	4618      	mov	r0, r3
 800fb68:	3708      	adds	r7, #8
 800fb6a:	46bd      	mov	sp, r7
 800fb6c:	bd80      	pop	{r7, pc}
 800fb6e:	bf00      	nop
 800fb70:	2000403c 	.word	0x2000403c
 800fb74:	08015cb8 	.word	0x08015cb8

0800fb78 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800fb78:	b580      	push	{r7, lr}
 800fb7a:	b082      	sub	sp, #8
 800fb7c:	af00      	add	r7, sp, #0
 800fb7e:	4603      	mov	r3, r0
 800fb80:	6039      	str	r1, [r7, #0]
 800fb82:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800fb84:	79fb      	ldrb	r3, [r7, #7]
 800fb86:	2b00      	cmp	r3, #0
 800fb88:	d105      	bne.n	800fb96 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800fb8a:	683a      	ldr	r2, [r7, #0]
 800fb8c:	4907      	ldr	r1, [pc, #28]	; (800fbac <USBD_FS_InterfaceStrDescriptor+0x34>)
 800fb8e:	4808      	ldr	r0, [pc, #32]	; (800fbb0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800fb90:	f7ff fd16 	bl	800f5c0 <USBD_GetString>
 800fb94:	e004      	b.n	800fba0 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800fb96:	683a      	ldr	r2, [r7, #0]
 800fb98:	4904      	ldr	r1, [pc, #16]	; (800fbac <USBD_FS_InterfaceStrDescriptor+0x34>)
 800fb9a:	4805      	ldr	r0, [pc, #20]	; (800fbb0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800fb9c:	f7ff fd10 	bl	800f5c0 <USBD_GetString>
  }
  return USBD_StrDesc;
 800fba0:	4b02      	ldr	r3, [pc, #8]	; (800fbac <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800fba2:	4618      	mov	r0, r3
 800fba4:	3708      	adds	r7, #8
 800fba6:	46bd      	mov	sp, r7
 800fba8:	bd80      	pop	{r7, pc}
 800fbaa:	bf00      	nop
 800fbac:	2000403c 	.word	0x2000403c
 800fbb0:	08015cc4 	.word	0x08015cc4

0800fbb4 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor 
  * @param  None 
  * @retval None
  */
static void Get_SerialNum(void)
{
 800fbb4:	b580      	push	{r7, lr}
 800fbb6:	b084      	sub	sp, #16
 800fbb8:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800fbba:	4b0f      	ldr	r3, [pc, #60]	; (800fbf8 <Get_SerialNum+0x44>)
 800fbbc:	681b      	ldr	r3, [r3, #0]
 800fbbe:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800fbc0:	4b0e      	ldr	r3, [pc, #56]	; (800fbfc <Get_SerialNum+0x48>)
 800fbc2:	681b      	ldr	r3, [r3, #0]
 800fbc4:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800fbc6:	4b0e      	ldr	r3, [pc, #56]	; (800fc00 <Get_SerialNum+0x4c>)
 800fbc8:	681b      	ldr	r3, [r3, #0]
 800fbca:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800fbcc:	68fa      	ldr	r2, [r7, #12]
 800fbce:	687b      	ldr	r3, [r7, #4]
 800fbd0:	4413      	add	r3, r2
 800fbd2:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800fbd4:	68fb      	ldr	r3, [r7, #12]
 800fbd6:	2b00      	cmp	r3, #0
 800fbd8:	d009      	beq.n	800fbee <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800fbda:	2208      	movs	r2, #8
 800fbdc:	4909      	ldr	r1, [pc, #36]	; (800fc04 <Get_SerialNum+0x50>)
 800fbde:	68f8      	ldr	r0, [r7, #12]
 800fbe0:	f000 f814 	bl	800fc0c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800fbe4:	2204      	movs	r2, #4
 800fbe6:	4908      	ldr	r1, [pc, #32]	; (800fc08 <Get_SerialNum+0x54>)
 800fbe8:	68b8      	ldr	r0, [r7, #8]
 800fbea:	f000 f80f 	bl	800fc0c <IntToUnicode>
  }
}
 800fbee:	bf00      	nop
 800fbf0:	3710      	adds	r7, #16
 800fbf2:	46bd      	mov	sp, r7
 800fbf4:	bd80      	pop	{r7, pc}
 800fbf6:	bf00      	nop
 800fbf8:	1fff7a10 	.word	0x1fff7a10
 800fbfc:	1fff7a14 	.word	0x1fff7a14
 800fc00:	1fff7a18 	.word	0x1fff7a18
 800fc04:	20000166 	.word	0x20000166
 800fc08:	20000176 	.word	0x20000176

0800fc0c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer 
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800fc0c:	b480      	push	{r7}
 800fc0e:	b087      	sub	sp, #28
 800fc10:	af00      	add	r7, sp, #0
 800fc12:	60f8      	str	r0, [r7, #12]
 800fc14:	60b9      	str	r1, [r7, #8]
 800fc16:	4613      	mov	r3, r2
 800fc18:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800fc1a:	2300      	movs	r3, #0
 800fc1c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800fc1e:	2300      	movs	r3, #0
 800fc20:	75fb      	strb	r3, [r7, #23]
 800fc22:	e027      	b.n	800fc74 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800fc24:	68fb      	ldr	r3, [r7, #12]
 800fc26:	0f1b      	lsrs	r3, r3, #28
 800fc28:	2b09      	cmp	r3, #9
 800fc2a:	d80b      	bhi.n	800fc44 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800fc2c:	68fb      	ldr	r3, [r7, #12]
 800fc2e:	0f1b      	lsrs	r3, r3, #28
 800fc30:	b2da      	uxtb	r2, r3
 800fc32:	7dfb      	ldrb	r3, [r7, #23]
 800fc34:	005b      	lsls	r3, r3, #1
 800fc36:	4619      	mov	r1, r3
 800fc38:	68bb      	ldr	r3, [r7, #8]
 800fc3a:	440b      	add	r3, r1
 800fc3c:	3230      	adds	r2, #48	; 0x30
 800fc3e:	b2d2      	uxtb	r2, r2
 800fc40:	701a      	strb	r2, [r3, #0]
 800fc42:	e00a      	b.n	800fc5a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800fc44:	68fb      	ldr	r3, [r7, #12]
 800fc46:	0f1b      	lsrs	r3, r3, #28
 800fc48:	b2da      	uxtb	r2, r3
 800fc4a:	7dfb      	ldrb	r3, [r7, #23]
 800fc4c:	005b      	lsls	r3, r3, #1
 800fc4e:	4619      	mov	r1, r3
 800fc50:	68bb      	ldr	r3, [r7, #8]
 800fc52:	440b      	add	r3, r1
 800fc54:	3237      	adds	r2, #55	; 0x37
 800fc56:	b2d2      	uxtb	r2, r2
 800fc58:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800fc5a:	68fb      	ldr	r3, [r7, #12]
 800fc5c:	011b      	lsls	r3, r3, #4
 800fc5e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800fc60:	7dfb      	ldrb	r3, [r7, #23]
 800fc62:	005b      	lsls	r3, r3, #1
 800fc64:	3301      	adds	r3, #1
 800fc66:	68ba      	ldr	r2, [r7, #8]
 800fc68:	4413      	add	r3, r2
 800fc6a:	2200      	movs	r2, #0
 800fc6c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800fc6e:	7dfb      	ldrb	r3, [r7, #23]
 800fc70:	3301      	adds	r3, #1
 800fc72:	75fb      	strb	r3, [r7, #23]
 800fc74:	7dfa      	ldrb	r2, [r7, #23]
 800fc76:	79fb      	ldrb	r3, [r7, #7]
 800fc78:	429a      	cmp	r2, r3
 800fc7a:	d3d3      	bcc.n	800fc24 <IntToUnicode+0x18>
  }
}
 800fc7c:	bf00      	nop
 800fc7e:	371c      	adds	r7, #28
 800fc80:	46bd      	mov	sp, r7
 800fc82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc86:	4770      	bx	lr

0800fc88 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800fc88:	b580      	push	{r7, lr}
 800fc8a:	b08a      	sub	sp, #40	; 0x28
 800fc8c:	af00      	add	r7, sp, #0
 800fc8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800fc90:	f107 0314 	add.w	r3, r7, #20
 800fc94:	2200      	movs	r2, #0
 800fc96:	601a      	str	r2, [r3, #0]
 800fc98:	605a      	str	r2, [r3, #4]
 800fc9a:	609a      	str	r2, [r3, #8]
 800fc9c:	60da      	str	r2, [r3, #12]
 800fc9e:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800fca0:	687b      	ldr	r3, [r7, #4]
 800fca2:	681b      	ldr	r3, [r3, #0]
 800fca4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800fca8:	d13a      	bne.n	800fd20 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800fcaa:	2300      	movs	r3, #0
 800fcac:	613b      	str	r3, [r7, #16]
 800fcae:	4b1e      	ldr	r3, [pc, #120]	; (800fd28 <HAL_PCD_MspInit+0xa0>)
 800fcb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fcb2:	4a1d      	ldr	r2, [pc, #116]	; (800fd28 <HAL_PCD_MspInit+0xa0>)
 800fcb4:	f043 0301 	orr.w	r3, r3, #1
 800fcb8:	6313      	str	r3, [r2, #48]	; 0x30
 800fcba:	4b1b      	ldr	r3, [pc, #108]	; (800fd28 <HAL_PCD_MspInit+0xa0>)
 800fcbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fcbe:	f003 0301 	and.w	r3, r3, #1
 800fcc2:	613b      	str	r3, [r7, #16]
 800fcc4:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration    
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800fcc6:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800fcca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800fccc:	2302      	movs	r3, #2
 800fcce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800fcd0:	2300      	movs	r3, #0
 800fcd2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800fcd4:	2303      	movs	r3, #3
 800fcd6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800fcd8:	230a      	movs	r3, #10
 800fcda:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800fcdc:	f107 0314 	add.w	r3, r7, #20
 800fce0:	4619      	mov	r1, r3
 800fce2:	4812      	ldr	r0, [pc, #72]	; (800fd2c <HAL_PCD_MspInit+0xa4>)
 800fce4:	f7f5 ff94 	bl	8005c10 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800fce8:	4b0f      	ldr	r3, [pc, #60]	; (800fd28 <HAL_PCD_MspInit+0xa0>)
 800fcea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fcec:	4a0e      	ldr	r2, [pc, #56]	; (800fd28 <HAL_PCD_MspInit+0xa0>)
 800fcee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800fcf2:	6353      	str	r3, [r2, #52]	; 0x34
 800fcf4:	2300      	movs	r3, #0
 800fcf6:	60fb      	str	r3, [r7, #12]
 800fcf8:	4b0b      	ldr	r3, [pc, #44]	; (800fd28 <HAL_PCD_MspInit+0xa0>)
 800fcfa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fcfc:	4a0a      	ldr	r2, [pc, #40]	; (800fd28 <HAL_PCD_MspInit+0xa0>)
 800fcfe:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800fd02:	6453      	str	r3, [r2, #68]	; 0x44
 800fd04:	4b08      	ldr	r3, [pc, #32]	; (800fd28 <HAL_PCD_MspInit+0xa0>)
 800fd06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fd08:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800fd0c:	60fb      	str	r3, [r7, #12]
 800fd0e:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800fd10:	2200      	movs	r2, #0
 800fd12:	2100      	movs	r1, #0
 800fd14:	2043      	movs	r0, #67	; 0x43
 800fd16:	f7f5 fba8 	bl	800546a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800fd1a:	2043      	movs	r0, #67	; 0x43
 800fd1c:	f7f5 fbc1 	bl	80054a2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800fd20:	bf00      	nop
 800fd22:	3728      	adds	r7, #40	; 0x28
 800fd24:	46bd      	mov	sp, r7
 800fd26:	bd80      	pop	{r7, pc}
 800fd28:	40023800 	.word	0x40023800
 800fd2c:	40020000 	.word	0x40020000

0800fd30 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fd30:	b580      	push	{r7, lr}
 800fd32:	b082      	sub	sp, #8
 800fd34:	af00      	add	r7, sp, #0
 800fd36:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800fd38:	687b      	ldr	r3, [r7, #4]
 800fd3a:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 800fd3e:	687b      	ldr	r3, [r7, #4]
 800fd40:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800fd44:	4619      	mov	r1, r3
 800fd46:	4610      	mov	r0, r2
 800fd48:	f7fe fd4c 	bl	800e7e4 <USBD_LL_SetupStage>
}
 800fd4c:	bf00      	nop
 800fd4e:	3708      	adds	r7, #8
 800fd50:	46bd      	mov	sp, r7
 800fd52:	bd80      	pop	{r7, pc}

0800fd54 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fd54:	b580      	push	{r7, lr}
 800fd56:	b082      	sub	sp, #8
 800fd58:	af00      	add	r7, sp, #0
 800fd5a:	6078      	str	r0, [r7, #4]
 800fd5c:	460b      	mov	r3, r1
 800fd5e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800fd60:	687b      	ldr	r3, [r7, #4]
 800fd62:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800fd66:	78fa      	ldrb	r2, [r7, #3]
 800fd68:	6879      	ldr	r1, [r7, #4]
 800fd6a:	4613      	mov	r3, r2
 800fd6c:	00db      	lsls	r3, r3, #3
 800fd6e:	1a9b      	subs	r3, r3, r2
 800fd70:	009b      	lsls	r3, r3, #2
 800fd72:	440b      	add	r3, r1
 800fd74:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800fd78:	681a      	ldr	r2, [r3, #0]
 800fd7a:	78fb      	ldrb	r3, [r7, #3]
 800fd7c:	4619      	mov	r1, r3
 800fd7e:	f7fe fd7c 	bl	800e87a <USBD_LL_DataOutStage>
}
 800fd82:	bf00      	nop
 800fd84:	3708      	adds	r7, #8
 800fd86:	46bd      	mov	sp, r7
 800fd88:	bd80      	pop	{r7, pc}

0800fd8a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fd8a:	b580      	push	{r7, lr}
 800fd8c:	b082      	sub	sp, #8
 800fd8e:	af00      	add	r7, sp, #0
 800fd90:	6078      	str	r0, [r7, #4]
 800fd92:	460b      	mov	r3, r1
 800fd94:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800fd96:	687b      	ldr	r3, [r7, #4]
 800fd98:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800fd9c:	78fa      	ldrb	r2, [r7, #3]
 800fd9e:	6879      	ldr	r1, [r7, #4]
 800fda0:	4613      	mov	r3, r2
 800fda2:	00db      	lsls	r3, r3, #3
 800fda4:	1a9b      	subs	r3, r3, r2
 800fda6:	009b      	lsls	r3, r3, #2
 800fda8:	440b      	add	r3, r1
 800fdaa:	3348      	adds	r3, #72	; 0x48
 800fdac:	681a      	ldr	r2, [r3, #0]
 800fdae:	78fb      	ldrb	r3, [r7, #3]
 800fdb0:	4619      	mov	r1, r3
 800fdb2:	f7fe fdd3 	bl	800e95c <USBD_LL_DataInStage>
}
 800fdb6:	bf00      	nop
 800fdb8:	3708      	adds	r7, #8
 800fdba:	46bd      	mov	sp, r7
 800fdbc:	bd80      	pop	{r7, pc}

0800fdbe <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fdbe:	b580      	push	{r7, lr}
 800fdc0:	b082      	sub	sp, #8
 800fdc2:	af00      	add	r7, sp, #0
 800fdc4:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800fdc6:	687b      	ldr	r3, [r7, #4]
 800fdc8:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800fdcc:	4618      	mov	r0, r3
 800fdce:	f7fe fee1 	bl	800eb94 <USBD_LL_SOF>
}
 800fdd2:	bf00      	nop
 800fdd4:	3708      	adds	r7, #8
 800fdd6:	46bd      	mov	sp, r7
 800fdd8:	bd80      	pop	{r7, pc}

0800fdda <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{ 
 800fdda:	b580      	push	{r7, lr}
 800fddc:	b084      	sub	sp, #16
 800fdde:	af00      	add	r7, sp, #0
 800fde0:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800fde2:	2301      	movs	r3, #1
 800fde4:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800fde6:	687b      	ldr	r3, [r7, #4]
 800fde8:	68db      	ldr	r3, [r3, #12]
 800fdea:	2b00      	cmp	r3, #0
 800fdec:	d102      	bne.n	800fdf4 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800fdee:	2300      	movs	r3, #0
 800fdf0:	73fb      	strb	r3, [r7, #15]
 800fdf2:	e008      	b.n	800fe06 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800fdf4:	687b      	ldr	r3, [r7, #4]
 800fdf6:	68db      	ldr	r3, [r3, #12]
 800fdf8:	2b02      	cmp	r3, #2
 800fdfa:	d102      	bne.n	800fe02 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800fdfc:	2301      	movs	r3, #1
 800fdfe:	73fb      	strb	r3, [r7, #15]
 800fe00:	e001      	b.n	800fe06 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800fe02:	f7f4 fd7d 	bl	8004900 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800fe06:	687b      	ldr	r3, [r7, #4]
 800fe08:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800fe0c:	7bfa      	ldrb	r2, [r7, #15]
 800fe0e:	4611      	mov	r1, r2
 800fe10:	4618      	mov	r0, r3
 800fe12:	f7fe fe89 	bl	800eb28 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800fe16:	687b      	ldr	r3, [r7, #4]
 800fe18:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800fe1c:	4618      	mov	r0, r3
 800fe1e:	f7fe fe42 	bl	800eaa6 <USBD_LL_Reset>
}
 800fe22:	bf00      	nop
 800fe24:	3710      	adds	r7, #16
 800fe26:	46bd      	mov	sp, r7
 800fe28:	bd80      	pop	{r7, pc}
	...

0800fe2c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fe2c:	b580      	push	{r7, lr}
 800fe2e:	b082      	sub	sp, #8
 800fe30:	af00      	add	r7, sp, #0
 800fe32:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800fe34:	687b      	ldr	r3, [r7, #4]
 800fe36:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800fe3a:	4618      	mov	r0, r3
 800fe3c:	f7fe fe84 	bl	800eb48 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800fe40:	687b      	ldr	r3, [r7, #4]
 800fe42:	681b      	ldr	r3, [r3, #0]
 800fe44:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800fe48:	681b      	ldr	r3, [r3, #0]
 800fe4a:	687a      	ldr	r2, [r7, #4]
 800fe4c:	6812      	ldr	r2, [r2, #0]
 800fe4e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800fe52:	f043 0301 	orr.w	r3, r3, #1
 800fe56:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800fe58:	687b      	ldr	r3, [r7, #4]
 800fe5a:	6a1b      	ldr	r3, [r3, #32]
 800fe5c:	2b00      	cmp	r3, #0
 800fe5e:	d005      	beq.n	800fe6c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800fe60:	4b04      	ldr	r3, [pc, #16]	; (800fe74 <HAL_PCD_SuspendCallback+0x48>)
 800fe62:	691b      	ldr	r3, [r3, #16]
 800fe64:	4a03      	ldr	r2, [pc, #12]	; (800fe74 <HAL_PCD_SuspendCallback+0x48>)
 800fe66:	f043 0306 	orr.w	r3, r3, #6
 800fe6a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800fe6c:	bf00      	nop
 800fe6e:	3708      	adds	r7, #8
 800fe70:	46bd      	mov	sp, r7
 800fe72:	bd80      	pop	{r7, pc}
 800fe74:	e000ed00 	.word	0xe000ed00

0800fe78 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fe78:	b580      	push	{r7, lr}
 800fe7a:	b082      	sub	sp, #8
 800fe7c:	af00      	add	r7, sp, #0
 800fe7e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800fe80:	687b      	ldr	r3, [r7, #4]
 800fe82:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800fe86:	4618      	mov	r0, r3
 800fe88:	f7fe fe73 	bl	800eb72 <USBD_LL_Resume>
}
 800fe8c:	bf00      	nop
 800fe8e:	3708      	adds	r7, #8
 800fe90:	46bd      	mov	sp, r7
 800fe92:	bd80      	pop	{r7, pc}

0800fe94 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fe94:	b580      	push	{r7, lr}
 800fe96:	b082      	sub	sp, #8
 800fe98:	af00      	add	r7, sp, #0
 800fe9a:	6078      	str	r0, [r7, #4]
 800fe9c:	460b      	mov	r3, r1
 800fe9e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800fea0:	687b      	ldr	r3, [r7, #4]
 800fea2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800fea6:	78fa      	ldrb	r2, [r7, #3]
 800fea8:	4611      	mov	r1, r2
 800feaa:	4618      	mov	r0, r3
 800feac:	f7fe fe99 	bl	800ebe2 <USBD_LL_IsoOUTIncomplete>
}
 800feb0:	bf00      	nop
 800feb2:	3708      	adds	r7, #8
 800feb4:	46bd      	mov	sp, r7
 800feb6:	bd80      	pop	{r7, pc}

0800feb8 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800feb8:	b580      	push	{r7, lr}
 800feba:	b082      	sub	sp, #8
 800febc:	af00      	add	r7, sp, #0
 800febe:	6078      	str	r0, [r7, #4]
 800fec0:	460b      	mov	r3, r1
 800fec2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800fec4:	687b      	ldr	r3, [r7, #4]
 800fec6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800feca:	78fa      	ldrb	r2, [r7, #3]
 800fecc:	4611      	mov	r1, r2
 800fece:	4618      	mov	r0, r3
 800fed0:	f7fe fe7a 	bl	800ebc8 <USBD_LL_IsoINIncomplete>
}
 800fed4:	bf00      	nop
 800fed6:	3708      	adds	r7, #8
 800fed8:	46bd      	mov	sp, r7
 800feda:	bd80      	pop	{r7, pc}

0800fedc <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fedc:	b580      	push	{r7, lr}
 800fede:	b082      	sub	sp, #8
 800fee0:	af00      	add	r7, sp, #0
 800fee2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800fee4:	687b      	ldr	r3, [r7, #4]
 800fee6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800feea:	4618      	mov	r0, r3
 800feec:	f7fe fe86 	bl	800ebfc <USBD_LL_DevConnected>
}
 800fef0:	bf00      	nop
 800fef2:	3708      	adds	r7, #8
 800fef4:	46bd      	mov	sp, r7
 800fef6:	bd80      	pop	{r7, pc}

0800fef8 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fef8:	b580      	push	{r7, lr}
 800fefa:	b082      	sub	sp, #8
 800fefc:	af00      	add	r7, sp, #0
 800fefe:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800ff00:	687b      	ldr	r3, [r7, #4]
 800ff02:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800ff06:	4618      	mov	r0, r3
 800ff08:	f7fe fe83 	bl	800ec12 <USBD_LL_DevDisconnected>
}
 800ff0c:	bf00      	nop
 800ff0e:	3708      	adds	r7, #8
 800ff10:	46bd      	mov	sp, r7
 800ff12:	bd80      	pop	{r7, pc}

0800ff14 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800ff14:	b580      	push	{r7, lr}
 800ff16:	b082      	sub	sp, #8
 800ff18:	af00      	add	r7, sp, #0
 800ff1a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800ff1c:	687b      	ldr	r3, [r7, #4]
 800ff1e:	781b      	ldrb	r3, [r3, #0]
 800ff20:	2b00      	cmp	r3, #0
 800ff22:	d13c      	bne.n	800ff9e <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800ff24:	4a20      	ldr	r2, [pc, #128]	; (800ffa8 <USBD_LL_Init+0x94>)
 800ff26:	687b      	ldr	r3, [r7, #4]
 800ff28:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 800ff2c:	687b      	ldr	r3, [r7, #4]
 800ff2e:	4a1e      	ldr	r2, [pc, #120]	; (800ffa8 <USBD_LL_Init+0x94>)
 800ff30:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298
  
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800ff34:	4b1c      	ldr	r3, [pc, #112]	; (800ffa8 <USBD_LL_Init+0x94>)
 800ff36:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800ff3a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800ff3c:	4b1a      	ldr	r3, [pc, #104]	; (800ffa8 <USBD_LL_Init+0x94>)
 800ff3e:	2204      	movs	r2, #4
 800ff40:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800ff42:	4b19      	ldr	r3, [pc, #100]	; (800ffa8 <USBD_LL_Init+0x94>)
 800ff44:	2202      	movs	r2, #2
 800ff46:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800ff48:	4b17      	ldr	r3, [pc, #92]	; (800ffa8 <USBD_LL_Init+0x94>)
 800ff4a:	2200      	movs	r2, #0
 800ff4c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800ff4e:	4b16      	ldr	r3, [pc, #88]	; (800ffa8 <USBD_LL_Init+0x94>)
 800ff50:	2202      	movs	r2, #2
 800ff52:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800ff54:	4b14      	ldr	r3, [pc, #80]	; (800ffa8 <USBD_LL_Init+0x94>)
 800ff56:	2200      	movs	r2, #0
 800ff58:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800ff5a:	4b13      	ldr	r3, [pc, #76]	; (800ffa8 <USBD_LL_Init+0x94>)
 800ff5c:	2200      	movs	r2, #0
 800ff5e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800ff60:	4b11      	ldr	r3, [pc, #68]	; (800ffa8 <USBD_LL_Init+0x94>)
 800ff62:	2200      	movs	r2, #0
 800ff64:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800ff66:	4b10      	ldr	r3, [pc, #64]	; (800ffa8 <USBD_LL_Init+0x94>)
 800ff68:	2200      	movs	r2, #0
 800ff6a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800ff6c:	4b0e      	ldr	r3, [pc, #56]	; (800ffa8 <USBD_LL_Init+0x94>)
 800ff6e:	2200      	movs	r2, #0
 800ff70:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800ff72:	480d      	ldr	r0, [pc, #52]	; (800ffa8 <USBD_LL_Init+0x94>)
 800ff74:	f7f6 ffeb 	bl	8006f4e <HAL_PCD_Init>
 800ff78:	4603      	mov	r3, r0
 800ff7a:	2b00      	cmp	r3, #0
 800ff7c:	d001      	beq.n	800ff82 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800ff7e:	f7f4 fcbf 	bl	8004900 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800ff82:	2180      	movs	r1, #128	; 0x80
 800ff84:	4808      	ldr	r0, [pc, #32]	; (800ffa8 <USBD_LL_Init+0x94>)
 800ff86:	f7f8 f950 	bl	800822a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800ff8a:	2240      	movs	r2, #64	; 0x40
 800ff8c:	2100      	movs	r1, #0
 800ff8e:	4806      	ldr	r0, [pc, #24]	; (800ffa8 <USBD_LL_Init+0x94>)
 800ff90:	f7f8 f904 	bl	800819c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800ff94:	2280      	movs	r2, #128	; 0x80
 800ff96:	2101      	movs	r1, #1
 800ff98:	4803      	ldr	r0, [pc, #12]	; (800ffa8 <USBD_LL_Init+0x94>)
 800ff9a:	f7f8 f8ff 	bl	800819c <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800ff9e:	2300      	movs	r3, #0
}
 800ffa0:	4618      	mov	r0, r3
 800ffa2:	3708      	adds	r7, #8
 800ffa4:	46bd      	mov	sp, r7
 800ffa6:	bd80      	pop	{r7, pc}
 800ffa8:	2000423c 	.word	0x2000423c

0800ffac <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver. 
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800ffac:	b580      	push	{r7, lr}
 800ffae:	b084      	sub	sp, #16
 800ffb0:	af00      	add	r7, sp, #0
 800ffb2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ffb4:	2300      	movs	r3, #0
 800ffb6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ffb8:	2300      	movs	r3, #0
 800ffba:	73bb      	strb	r3, [r7, #14]
 
  hal_status = HAL_PCD_Start(pdev->pData);
 800ffbc:	687b      	ldr	r3, [r7, #4]
 800ffbe:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800ffc2:	4618      	mov	r0, r3
 800ffc4:	f7f7 f8e0 	bl	8007188 <HAL_PCD_Start>
 800ffc8:	4603      	mov	r3, r0
 800ffca:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);     
 800ffcc:	7bfb      	ldrb	r3, [r7, #15]
 800ffce:	4618      	mov	r0, r3
 800ffd0:	f000 f92e 	bl	8010230 <USBD_Get_USB_Status>
 800ffd4:	4603      	mov	r3, r0
 800ffd6:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 800ffd8:	7bbb      	ldrb	r3, [r7, #14]
}
 800ffda:	4618      	mov	r0, r3
 800ffdc:	3710      	adds	r7, #16
 800ffde:	46bd      	mov	sp, r7
 800ffe0:	bd80      	pop	{r7, pc}

0800ffe2 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800ffe2:	b580      	push	{r7, lr}
 800ffe4:	b084      	sub	sp, #16
 800ffe6:	af00      	add	r7, sp, #0
 800ffe8:	6078      	str	r0, [r7, #4]
 800ffea:	4608      	mov	r0, r1
 800ffec:	4611      	mov	r1, r2
 800ffee:	461a      	mov	r2, r3
 800fff0:	4603      	mov	r3, r0
 800fff2:	70fb      	strb	r3, [r7, #3]
 800fff4:	460b      	mov	r3, r1
 800fff6:	70bb      	strb	r3, [r7, #2]
 800fff8:	4613      	mov	r3, r2
 800fffa:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fffc:	2300      	movs	r3, #0
 800fffe:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010000:	2300      	movs	r3, #0
 8010002:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8010004:	687b      	ldr	r3, [r7, #4]
 8010006:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 801000a:	78bb      	ldrb	r3, [r7, #2]
 801000c:	883a      	ldrh	r2, [r7, #0]
 801000e:	78f9      	ldrb	r1, [r7, #3]
 8010010:	f7f7 fcb5 	bl	800797e <HAL_PCD_EP_Open>
 8010014:	4603      	mov	r3, r0
 8010016:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010018:	7bfb      	ldrb	r3, [r7, #15]
 801001a:	4618      	mov	r0, r3
 801001c:	f000 f908 	bl	8010230 <USBD_Get_USB_Status>
 8010020:	4603      	mov	r3, r0
 8010022:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8010024:	7bbb      	ldrb	r3, [r7, #14]
}
 8010026:	4618      	mov	r0, r3
 8010028:	3710      	adds	r7, #16
 801002a:	46bd      	mov	sp, r7
 801002c:	bd80      	pop	{r7, pc}

0801002e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801002e:	b580      	push	{r7, lr}
 8010030:	b084      	sub	sp, #16
 8010032:	af00      	add	r7, sp, #0
 8010034:	6078      	str	r0, [r7, #4]
 8010036:	460b      	mov	r3, r1
 8010038:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801003a:	2300      	movs	r3, #0
 801003c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801003e:	2300      	movs	r3, #0
 8010040:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8010042:	687b      	ldr	r3, [r7, #4]
 8010044:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8010048:	78fa      	ldrb	r2, [r7, #3]
 801004a:	4611      	mov	r1, r2
 801004c:	4618      	mov	r0, r3
 801004e:	f7f7 fcfe 	bl	8007a4e <HAL_PCD_EP_Close>
 8010052:	4603      	mov	r3, r0
 8010054:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);    
 8010056:	7bfb      	ldrb	r3, [r7, #15]
 8010058:	4618      	mov	r0, r3
 801005a:	f000 f8e9 	bl	8010230 <USBD_Get_USB_Status>
 801005e:	4603      	mov	r3, r0
 8010060:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;  
 8010062:	7bbb      	ldrb	r3, [r7, #14]
}
 8010064:	4618      	mov	r0, r3
 8010066:	3710      	adds	r7, #16
 8010068:	46bd      	mov	sp, r7
 801006a:	bd80      	pop	{r7, pc}

0801006c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801006c:	b580      	push	{r7, lr}
 801006e:	b084      	sub	sp, #16
 8010070:	af00      	add	r7, sp, #0
 8010072:	6078      	str	r0, [r7, #4]
 8010074:	460b      	mov	r3, r1
 8010076:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010078:	2300      	movs	r3, #0
 801007a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801007c:	2300      	movs	r3, #0
 801007e:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8010080:	687b      	ldr	r3, [r7, #4]
 8010082:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8010086:	78fa      	ldrb	r2, [r7, #3]
 8010088:	4611      	mov	r1, r2
 801008a:	4618      	mov	r0, r3
 801008c:	f7f7 fdd6 	bl	8007c3c <HAL_PCD_EP_SetStall>
 8010090:	4603      	mov	r3, r0
 8010092:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010094:	7bfb      	ldrb	r3, [r7, #15]
 8010096:	4618      	mov	r0, r3
 8010098:	f000 f8ca 	bl	8010230 <USBD_Get_USB_Status>
 801009c:	4603      	mov	r3, r0
 801009e:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;  
 80100a0:	7bbb      	ldrb	r3, [r7, #14]
}
 80100a2:	4618      	mov	r0, r3
 80100a4:	3710      	adds	r7, #16
 80100a6:	46bd      	mov	sp, r7
 80100a8:	bd80      	pop	{r7, pc}

080100aa <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80100aa:	b580      	push	{r7, lr}
 80100ac:	b084      	sub	sp, #16
 80100ae:	af00      	add	r7, sp, #0
 80100b0:	6078      	str	r0, [r7, #4]
 80100b2:	460b      	mov	r3, r1
 80100b4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80100b6:	2300      	movs	r3, #0
 80100b8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80100ba:	2300      	movs	r3, #0
 80100bc:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80100be:	687b      	ldr	r3, [r7, #4]
 80100c0:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 80100c4:	78fa      	ldrb	r2, [r7, #3]
 80100c6:	4611      	mov	r1, r2
 80100c8:	4618      	mov	r0, r3
 80100ca:	f7f7 fe1b 	bl	8007d04 <HAL_PCD_EP_ClrStall>
 80100ce:	4603      	mov	r3, r0
 80100d0:	73fb      	strb	r3, [r7, #15]
    
  usb_status =  USBD_Get_USB_Status(hal_status);  
 80100d2:	7bfb      	ldrb	r3, [r7, #15]
 80100d4:	4618      	mov	r0, r3
 80100d6:	f000 f8ab 	bl	8010230 <USBD_Get_USB_Status>
 80100da:	4603      	mov	r3, r0
 80100dc:	73bb      	strb	r3, [r7, #14]
  
  return usb_status; 
 80100de:	7bbb      	ldrb	r3, [r7, #14]
}
 80100e0:	4618      	mov	r0, r3
 80100e2:	3710      	adds	r7, #16
 80100e4:	46bd      	mov	sp, r7
 80100e6:	bd80      	pop	{r7, pc}

080100e8 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80100e8:	b480      	push	{r7}
 80100ea:	b085      	sub	sp, #20
 80100ec:	af00      	add	r7, sp, #0
 80100ee:	6078      	str	r0, [r7, #4]
 80100f0:	460b      	mov	r3, r1
 80100f2:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80100f4:	687b      	ldr	r3, [r7, #4]
 80100f6:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 80100fa:	60fb      	str	r3, [r7, #12]
  
  if((ep_addr & 0x80) == 0x80)
 80100fc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8010100:	2b00      	cmp	r3, #0
 8010102:	da0b      	bge.n	801011c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 8010104:	78fb      	ldrb	r3, [r7, #3]
 8010106:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801010a:	68f9      	ldr	r1, [r7, #12]
 801010c:	4613      	mov	r3, r2
 801010e:	00db      	lsls	r3, r3, #3
 8010110:	1a9b      	subs	r3, r3, r2
 8010112:	009b      	lsls	r3, r3, #2
 8010114:	440b      	add	r3, r1
 8010116:	333e      	adds	r3, #62	; 0x3e
 8010118:	781b      	ldrb	r3, [r3, #0]
 801011a:	e00b      	b.n	8010134 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 801011c:	78fb      	ldrb	r3, [r7, #3]
 801011e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8010122:	68f9      	ldr	r1, [r7, #12]
 8010124:	4613      	mov	r3, r2
 8010126:	00db      	lsls	r3, r3, #3
 8010128:	1a9b      	subs	r3, r3, r2
 801012a:	009b      	lsls	r3, r3, #2
 801012c:	440b      	add	r3, r1
 801012e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8010132:	781b      	ldrb	r3, [r3, #0]
  }
}
 8010134:	4618      	mov	r0, r3
 8010136:	3714      	adds	r7, #20
 8010138:	46bd      	mov	sp, r7
 801013a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801013e:	4770      	bx	lr

08010140 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8010140:	b580      	push	{r7, lr}
 8010142:	b084      	sub	sp, #16
 8010144:	af00      	add	r7, sp, #0
 8010146:	6078      	str	r0, [r7, #4]
 8010148:	460b      	mov	r3, r1
 801014a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801014c:	2300      	movs	r3, #0
 801014e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010150:	2300      	movs	r3, #0
 8010152:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8010154:	687b      	ldr	r3, [r7, #4]
 8010156:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 801015a:	78fa      	ldrb	r2, [r7, #3]
 801015c:	4611      	mov	r1, r2
 801015e:	4618      	mov	r0, r3
 8010160:	f7f7 fbe8 	bl	8007934 <HAL_PCD_SetAddress>
 8010164:	4603      	mov	r3, r0
 8010166:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);
 8010168:	7bfb      	ldrb	r3, [r7, #15]
 801016a:	4618      	mov	r0, r3
 801016c:	f000 f860 	bl	8010230 <USBD_Get_USB_Status>
 8010170:	4603      	mov	r3, r0
 8010172:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;  
 8010174:	7bbb      	ldrb	r3, [r7, #14]
}
 8010176:	4618      	mov	r0, r3
 8010178:	3710      	adds	r7, #16
 801017a:	46bd      	mov	sp, r7
 801017c:	bd80      	pop	{r7, pc}

0801017e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 801017e:	b580      	push	{r7, lr}
 8010180:	b086      	sub	sp, #24
 8010182:	af00      	add	r7, sp, #0
 8010184:	60f8      	str	r0, [r7, #12]
 8010186:	607a      	str	r2, [r7, #4]
 8010188:	461a      	mov	r2, r3
 801018a:	460b      	mov	r3, r1
 801018c:	72fb      	strb	r3, [r7, #11]
 801018e:	4613      	mov	r3, r2
 8010190:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010192:	2300      	movs	r3, #0
 8010194:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010196:	2300      	movs	r3, #0
 8010198:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 801019a:	68fb      	ldr	r3, [r7, #12]
 801019c:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 80101a0:	893b      	ldrh	r3, [r7, #8]
 80101a2:	7af9      	ldrb	r1, [r7, #11]
 80101a4:	687a      	ldr	r2, [r7, #4]
 80101a6:	f7f7 fcff 	bl	8007ba8 <HAL_PCD_EP_Transmit>
 80101aa:	4603      	mov	r3, r0
 80101ac:	75fb      	strb	r3, [r7, #23]
  
  usb_status =  USBD_Get_USB_Status(hal_status); 
 80101ae:	7dfb      	ldrb	r3, [r7, #23]
 80101b0:	4618      	mov	r0, r3
 80101b2:	f000 f83d 	bl	8010230 <USBD_Get_USB_Status>
 80101b6:	4603      	mov	r3, r0
 80101b8:	75bb      	strb	r3, [r7, #22]
  
  return usb_status;    
 80101ba:	7dbb      	ldrb	r3, [r7, #22]
}
 80101bc:	4618      	mov	r0, r3
 80101be:	3718      	adds	r7, #24
 80101c0:	46bd      	mov	sp, r7
 80101c2:	bd80      	pop	{r7, pc}

080101c4 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 80101c4:	b580      	push	{r7, lr}
 80101c6:	b086      	sub	sp, #24
 80101c8:	af00      	add	r7, sp, #0
 80101ca:	60f8      	str	r0, [r7, #12]
 80101cc:	607a      	str	r2, [r7, #4]
 80101ce:	461a      	mov	r2, r3
 80101d0:	460b      	mov	r3, r1
 80101d2:	72fb      	strb	r3, [r7, #11]
 80101d4:	4613      	mov	r3, r2
 80101d6:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80101d8:	2300      	movs	r3, #0
 80101da:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80101dc:	2300      	movs	r3, #0
 80101de:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80101e0:	68fb      	ldr	r3, [r7, #12]
 80101e2:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 80101e6:	893b      	ldrh	r3, [r7, #8]
 80101e8:	7af9      	ldrb	r1, [r7, #11]
 80101ea:	687a      	ldr	r2, [r7, #4]
 80101ec:	f7f7 fc79 	bl	8007ae2 <HAL_PCD_EP_Receive>
 80101f0:	4603      	mov	r3, r0
 80101f2:	75fb      	strb	r3, [r7, #23]
  
  usb_status =  USBD_Get_USB_Status(hal_status);   
 80101f4:	7dfb      	ldrb	r3, [r7, #23]
 80101f6:	4618      	mov	r0, r3
 80101f8:	f000 f81a 	bl	8010230 <USBD_Get_USB_Status>
 80101fc:	4603      	mov	r3, r0
 80101fe:	75bb      	strb	r3, [r7, #22]
  
  return usb_status; 
 8010200:	7dbb      	ldrb	r3, [r7, #22]
}
 8010202:	4618      	mov	r0, r3
 8010204:	3718      	adds	r7, #24
 8010206:	46bd      	mov	sp, r7
 8010208:	bd80      	pop	{r7, pc}

0801020a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801020a:	b580      	push	{r7, lr}
 801020c:	b082      	sub	sp, #8
 801020e:	af00      	add	r7, sp, #0
 8010210:	6078      	str	r0, [r7, #4]
 8010212:	460b      	mov	r3, r1
 8010214:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8010216:	687b      	ldr	r3, [r7, #4]
 8010218:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 801021c:	78fa      	ldrb	r2, [r7, #3]
 801021e:	4611      	mov	r1, r2
 8010220:	4618      	mov	r0, r3
 8010222:	f7f7 fca9 	bl	8007b78 <HAL_PCD_EP_GetRxCount>
 8010226:	4603      	mov	r3, r0
}
 8010228:	4618      	mov	r0, r3
 801022a:	3708      	adds	r7, #8
 801022c:	46bd      	mov	sp, r7
 801022e:	bd80      	pop	{r7, pc}

08010230 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8010230:	b480      	push	{r7}
 8010232:	b085      	sub	sp, #20
 8010234:	af00      	add	r7, sp, #0
 8010236:	4603      	mov	r3, r0
 8010238:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801023a:	2300      	movs	r3, #0
 801023c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 801023e:	79fb      	ldrb	r3, [r7, #7]
 8010240:	2b03      	cmp	r3, #3
 8010242:	d817      	bhi.n	8010274 <USBD_Get_USB_Status+0x44>
 8010244:	a201      	add	r2, pc, #4	; (adr r2, 801024c <USBD_Get_USB_Status+0x1c>)
 8010246:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801024a:	bf00      	nop
 801024c:	0801025d 	.word	0x0801025d
 8010250:	08010263 	.word	0x08010263
 8010254:	08010269 	.word	0x08010269
 8010258:	0801026f 	.word	0x0801026f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 801025c:	2300      	movs	r3, #0
 801025e:	73fb      	strb	r3, [r7, #15]
    break;
 8010260:	e00b      	b.n	801027a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8010262:	2302      	movs	r3, #2
 8010264:	73fb      	strb	r3, [r7, #15]
    break;
 8010266:	e008      	b.n	801027a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8010268:	2301      	movs	r3, #1
 801026a:	73fb      	strb	r3, [r7, #15]
    break;
 801026c:	e005      	b.n	801027a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 801026e:	2302      	movs	r3, #2
 8010270:	73fb      	strb	r3, [r7, #15]
    break;
 8010272:	e002      	b.n	801027a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8010274:	2302      	movs	r3, #2
 8010276:	73fb      	strb	r3, [r7, #15]
    break;
 8010278:	bf00      	nop
  }
  return usb_status;
 801027a:	7bfb      	ldrb	r3, [r7, #15]
}
 801027c:	4618      	mov	r0, r3
 801027e:	3714      	adds	r7, #20
 8010280:	46bd      	mov	sp, r7
 8010282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010286:	4770      	bx	lr

08010288 <__libc_init_array>:
 8010288:	b570      	push	{r4, r5, r6, lr}
 801028a:	4e0d      	ldr	r6, [pc, #52]	; (80102c0 <__libc_init_array+0x38>)
 801028c:	4c0d      	ldr	r4, [pc, #52]	; (80102c4 <__libc_init_array+0x3c>)
 801028e:	1ba4      	subs	r4, r4, r6
 8010290:	10a4      	asrs	r4, r4, #2
 8010292:	2500      	movs	r5, #0
 8010294:	42a5      	cmp	r5, r4
 8010296:	d109      	bne.n	80102ac <__libc_init_array+0x24>
 8010298:	4e0b      	ldr	r6, [pc, #44]	; (80102c8 <__libc_init_array+0x40>)
 801029a:	4c0c      	ldr	r4, [pc, #48]	; (80102cc <__libc_init_array+0x44>)
 801029c:	f005 fb0a 	bl	80158b4 <_init>
 80102a0:	1ba4      	subs	r4, r4, r6
 80102a2:	10a4      	asrs	r4, r4, #2
 80102a4:	2500      	movs	r5, #0
 80102a6:	42a5      	cmp	r5, r4
 80102a8:	d105      	bne.n	80102b6 <__libc_init_array+0x2e>
 80102aa:	bd70      	pop	{r4, r5, r6, pc}
 80102ac:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80102b0:	4798      	blx	r3
 80102b2:	3501      	adds	r5, #1
 80102b4:	e7ee      	b.n	8010294 <__libc_init_array+0xc>
 80102b6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80102ba:	4798      	blx	r3
 80102bc:	3501      	adds	r5, #1
 80102be:	e7f2      	b.n	80102a6 <__libc_init_array+0x1e>
 80102c0:	08016058 	.word	0x08016058
 80102c4:	08016058 	.word	0x08016058
 80102c8:	08016058 	.word	0x08016058
 80102cc:	0801605c 	.word	0x0801605c

080102d0 <malloc>:
 80102d0:	4b02      	ldr	r3, [pc, #8]	; (80102dc <malloc+0xc>)
 80102d2:	4601      	mov	r1, r0
 80102d4:	6818      	ldr	r0, [r3, #0]
 80102d6:	f000 b86d 	b.w	80103b4 <_malloc_r>
 80102da:	bf00      	nop
 80102dc:	20000180 	.word	0x20000180

080102e0 <free>:
 80102e0:	4b02      	ldr	r3, [pc, #8]	; (80102ec <free+0xc>)
 80102e2:	4601      	mov	r1, r0
 80102e4:	6818      	ldr	r0, [r3, #0]
 80102e6:	f000 b817 	b.w	8010318 <_free_r>
 80102ea:	bf00      	nop
 80102ec:	20000180 	.word	0x20000180

080102f0 <memcpy>:
 80102f0:	b510      	push	{r4, lr}
 80102f2:	1e43      	subs	r3, r0, #1
 80102f4:	440a      	add	r2, r1
 80102f6:	4291      	cmp	r1, r2
 80102f8:	d100      	bne.n	80102fc <memcpy+0xc>
 80102fa:	bd10      	pop	{r4, pc}
 80102fc:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010300:	f803 4f01 	strb.w	r4, [r3, #1]!
 8010304:	e7f7      	b.n	80102f6 <memcpy+0x6>

08010306 <memset>:
 8010306:	4402      	add	r2, r0
 8010308:	4603      	mov	r3, r0
 801030a:	4293      	cmp	r3, r2
 801030c:	d100      	bne.n	8010310 <memset+0xa>
 801030e:	4770      	bx	lr
 8010310:	f803 1b01 	strb.w	r1, [r3], #1
 8010314:	e7f9      	b.n	801030a <memset+0x4>
	...

08010318 <_free_r>:
 8010318:	b538      	push	{r3, r4, r5, lr}
 801031a:	4605      	mov	r5, r0
 801031c:	2900      	cmp	r1, #0
 801031e:	d045      	beq.n	80103ac <_free_r+0x94>
 8010320:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010324:	1f0c      	subs	r4, r1, #4
 8010326:	2b00      	cmp	r3, #0
 8010328:	bfb8      	it	lt
 801032a:	18e4      	addlt	r4, r4, r3
 801032c:	f002 ff64 	bl	80131f8 <__malloc_lock>
 8010330:	4a1f      	ldr	r2, [pc, #124]	; (80103b0 <_free_r+0x98>)
 8010332:	6813      	ldr	r3, [r2, #0]
 8010334:	4610      	mov	r0, r2
 8010336:	b933      	cbnz	r3, 8010346 <_free_r+0x2e>
 8010338:	6063      	str	r3, [r4, #4]
 801033a:	6014      	str	r4, [r2, #0]
 801033c:	4628      	mov	r0, r5
 801033e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010342:	f002 bf5a 	b.w	80131fa <__malloc_unlock>
 8010346:	42a3      	cmp	r3, r4
 8010348:	d90c      	bls.n	8010364 <_free_r+0x4c>
 801034a:	6821      	ldr	r1, [r4, #0]
 801034c:	1862      	adds	r2, r4, r1
 801034e:	4293      	cmp	r3, r2
 8010350:	bf04      	itt	eq
 8010352:	681a      	ldreq	r2, [r3, #0]
 8010354:	685b      	ldreq	r3, [r3, #4]
 8010356:	6063      	str	r3, [r4, #4]
 8010358:	bf04      	itt	eq
 801035a:	1852      	addeq	r2, r2, r1
 801035c:	6022      	streq	r2, [r4, #0]
 801035e:	6004      	str	r4, [r0, #0]
 8010360:	e7ec      	b.n	801033c <_free_r+0x24>
 8010362:	4613      	mov	r3, r2
 8010364:	685a      	ldr	r2, [r3, #4]
 8010366:	b10a      	cbz	r2, 801036c <_free_r+0x54>
 8010368:	42a2      	cmp	r2, r4
 801036a:	d9fa      	bls.n	8010362 <_free_r+0x4a>
 801036c:	6819      	ldr	r1, [r3, #0]
 801036e:	1858      	adds	r0, r3, r1
 8010370:	42a0      	cmp	r0, r4
 8010372:	d10b      	bne.n	801038c <_free_r+0x74>
 8010374:	6820      	ldr	r0, [r4, #0]
 8010376:	4401      	add	r1, r0
 8010378:	1858      	adds	r0, r3, r1
 801037a:	4282      	cmp	r2, r0
 801037c:	6019      	str	r1, [r3, #0]
 801037e:	d1dd      	bne.n	801033c <_free_r+0x24>
 8010380:	6810      	ldr	r0, [r2, #0]
 8010382:	6852      	ldr	r2, [r2, #4]
 8010384:	605a      	str	r2, [r3, #4]
 8010386:	4401      	add	r1, r0
 8010388:	6019      	str	r1, [r3, #0]
 801038a:	e7d7      	b.n	801033c <_free_r+0x24>
 801038c:	d902      	bls.n	8010394 <_free_r+0x7c>
 801038e:	230c      	movs	r3, #12
 8010390:	602b      	str	r3, [r5, #0]
 8010392:	e7d3      	b.n	801033c <_free_r+0x24>
 8010394:	6820      	ldr	r0, [r4, #0]
 8010396:	1821      	adds	r1, r4, r0
 8010398:	428a      	cmp	r2, r1
 801039a:	bf04      	itt	eq
 801039c:	6811      	ldreq	r1, [r2, #0]
 801039e:	6852      	ldreq	r2, [r2, #4]
 80103a0:	6062      	str	r2, [r4, #4]
 80103a2:	bf04      	itt	eq
 80103a4:	1809      	addeq	r1, r1, r0
 80103a6:	6021      	streq	r1, [r4, #0]
 80103a8:	605c      	str	r4, [r3, #4]
 80103aa:	e7c7      	b.n	801033c <_free_r+0x24>
 80103ac:	bd38      	pop	{r3, r4, r5, pc}
 80103ae:	bf00      	nop
 80103b0:	2000078c 	.word	0x2000078c

080103b4 <_malloc_r>:
 80103b4:	b570      	push	{r4, r5, r6, lr}
 80103b6:	1ccd      	adds	r5, r1, #3
 80103b8:	f025 0503 	bic.w	r5, r5, #3
 80103bc:	3508      	adds	r5, #8
 80103be:	2d0c      	cmp	r5, #12
 80103c0:	bf38      	it	cc
 80103c2:	250c      	movcc	r5, #12
 80103c4:	2d00      	cmp	r5, #0
 80103c6:	4606      	mov	r6, r0
 80103c8:	db01      	blt.n	80103ce <_malloc_r+0x1a>
 80103ca:	42a9      	cmp	r1, r5
 80103cc:	d903      	bls.n	80103d6 <_malloc_r+0x22>
 80103ce:	230c      	movs	r3, #12
 80103d0:	6033      	str	r3, [r6, #0]
 80103d2:	2000      	movs	r0, #0
 80103d4:	bd70      	pop	{r4, r5, r6, pc}
 80103d6:	f002 ff0f 	bl	80131f8 <__malloc_lock>
 80103da:	4a21      	ldr	r2, [pc, #132]	; (8010460 <_malloc_r+0xac>)
 80103dc:	6814      	ldr	r4, [r2, #0]
 80103de:	4621      	mov	r1, r4
 80103e0:	b991      	cbnz	r1, 8010408 <_malloc_r+0x54>
 80103e2:	4c20      	ldr	r4, [pc, #128]	; (8010464 <_malloc_r+0xb0>)
 80103e4:	6823      	ldr	r3, [r4, #0]
 80103e6:	b91b      	cbnz	r3, 80103f0 <_malloc_r+0x3c>
 80103e8:	4630      	mov	r0, r6
 80103ea:	f000 fe7b 	bl	80110e4 <_sbrk_r>
 80103ee:	6020      	str	r0, [r4, #0]
 80103f0:	4629      	mov	r1, r5
 80103f2:	4630      	mov	r0, r6
 80103f4:	f000 fe76 	bl	80110e4 <_sbrk_r>
 80103f8:	1c43      	adds	r3, r0, #1
 80103fa:	d124      	bne.n	8010446 <_malloc_r+0x92>
 80103fc:	230c      	movs	r3, #12
 80103fe:	6033      	str	r3, [r6, #0]
 8010400:	4630      	mov	r0, r6
 8010402:	f002 fefa 	bl	80131fa <__malloc_unlock>
 8010406:	e7e4      	b.n	80103d2 <_malloc_r+0x1e>
 8010408:	680b      	ldr	r3, [r1, #0]
 801040a:	1b5b      	subs	r3, r3, r5
 801040c:	d418      	bmi.n	8010440 <_malloc_r+0x8c>
 801040e:	2b0b      	cmp	r3, #11
 8010410:	d90f      	bls.n	8010432 <_malloc_r+0x7e>
 8010412:	600b      	str	r3, [r1, #0]
 8010414:	50cd      	str	r5, [r1, r3]
 8010416:	18cc      	adds	r4, r1, r3
 8010418:	4630      	mov	r0, r6
 801041a:	f002 feee 	bl	80131fa <__malloc_unlock>
 801041e:	f104 000b 	add.w	r0, r4, #11
 8010422:	1d23      	adds	r3, r4, #4
 8010424:	f020 0007 	bic.w	r0, r0, #7
 8010428:	1ac3      	subs	r3, r0, r3
 801042a:	d0d3      	beq.n	80103d4 <_malloc_r+0x20>
 801042c:	425a      	negs	r2, r3
 801042e:	50e2      	str	r2, [r4, r3]
 8010430:	e7d0      	b.n	80103d4 <_malloc_r+0x20>
 8010432:	428c      	cmp	r4, r1
 8010434:	684b      	ldr	r3, [r1, #4]
 8010436:	bf16      	itet	ne
 8010438:	6063      	strne	r3, [r4, #4]
 801043a:	6013      	streq	r3, [r2, #0]
 801043c:	460c      	movne	r4, r1
 801043e:	e7eb      	b.n	8010418 <_malloc_r+0x64>
 8010440:	460c      	mov	r4, r1
 8010442:	6849      	ldr	r1, [r1, #4]
 8010444:	e7cc      	b.n	80103e0 <_malloc_r+0x2c>
 8010446:	1cc4      	adds	r4, r0, #3
 8010448:	f024 0403 	bic.w	r4, r4, #3
 801044c:	42a0      	cmp	r0, r4
 801044e:	d005      	beq.n	801045c <_malloc_r+0xa8>
 8010450:	1a21      	subs	r1, r4, r0
 8010452:	4630      	mov	r0, r6
 8010454:	f000 fe46 	bl	80110e4 <_sbrk_r>
 8010458:	3001      	adds	r0, #1
 801045a:	d0cf      	beq.n	80103fc <_malloc_r+0x48>
 801045c:	6025      	str	r5, [r4, #0]
 801045e:	e7db      	b.n	8010418 <_malloc_r+0x64>
 8010460:	2000078c 	.word	0x2000078c
 8010464:	20000790 	.word	0x20000790

08010468 <__cvt>:
 8010468:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801046c:	ec55 4b10 	vmov	r4, r5, d0
 8010470:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8010472:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8010476:	2d00      	cmp	r5, #0
 8010478:	460e      	mov	r6, r1
 801047a:	4691      	mov	r9, r2
 801047c:	4619      	mov	r1, r3
 801047e:	bfb8      	it	lt
 8010480:	4622      	movlt	r2, r4
 8010482:	462b      	mov	r3, r5
 8010484:	f027 0720 	bic.w	r7, r7, #32
 8010488:	bfbb      	ittet	lt
 801048a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 801048e:	461d      	movlt	r5, r3
 8010490:	2300      	movge	r3, #0
 8010492:	232d      	movlt	r3, #45	; 0x2d
 8010494:	bfb8      	it	lt
 8010496:	4614      	movlt	r4, r2
 8010498:	2f46      	cmp	r7, #70	; 0x46
 801049a:	700b      	strb	r3, [r1, #0]
 801049c:	d004      	beq.n	80104a8 <__cvt+0x40>
 801049e:	2f45      	cmp	r7, #69	; 0x45
 80104a0:	d100      	bne.n	80104a4 <__cvt+0x3c>
 80104a2:	3601      	adds	r6, #1
 80104a4:	2102      	movs	r1, #2
 80104a6:	e000      	b.n	80104aa <__cvt+0x42>
 80104a8:	2103      	movs	r1, #3
 80104aa:	ab03      	add	r3, sp, #12
 80104ac:	9301      	str	r3, [sp, #4]
 80104ae:	ab02      	add	r3, sp, #8
 80104b0:	9300      	str	r3, [sp, #0]
 80104b2:	4632      	mov	r2, r6
 80104b4:	4653      	mov	r3, sl
 80104b6:	ec45 4b10 	vmov	d0, r4, r5
 80104ba:	f001 fd99 	bl	8011ff0 <_dtoa_r>
 80104be:	2f47      	cmp	r7, #71	; 0x47
 80104c0:	4680      	mov	r8, r0
 80104c2:	d102      	bne.n	80104ca <__cvt+0x62>
 80104c4:	f019 0f01 	tst.w	r9, #1
 80104c8:	d026      	beq.n	8010518 <__cvt+0xb0>
 80104ca:	2f46      	cmp	r7, #70	; 0x46
 80104cc:	eb08 0906 	add.w	r9, r8, r6
 80104d0:	d111      	bne.n	80104f6 <__cvt+0x8e>
 80104d2:	f898 3000 	ldrb.w	r3, [r8]
 80104d6:	2b30      	cmp	r3, #48	; 0x30
 80104d8:	d10a      	bne.n	80104f0 <__cvt+0x88>
 80104da:	2200      	movs	r2, #0
 80104dc:	2300      	movs	r3, #0
 80104de:	4620      	mov	r0, r4
 80104e0:	4629      	mov	r1, r5
 80104e2:	f7f0 faf1 	bl	8000ac8 <__aeabi_dcmpeq>
 80104e6:	b918      	cbnz	r0, 80104f0 <__cvt+0x88>
 80104e8:	f1c6 0601 	rsb	r6, r6, #1
 80104ec:	f8ca 6000 	str.w	r6, [sl]
 80104f0:	f8da 3000 	ldr.w	r3, [sl]
 80104f4:	4499      	add	r9, r3
 80104f6:	2200      	movs	r2, #0
 80104f8:	2300      	movs	r3, #0
 80104fa:	4620      	mov	r0, r4
 80104fc:	4629      	mov	r1, r5
 80104fe:	f7f0 fae3 	bl	8000ac8 <__aeabi_dcmpeq>
 8010502:	b938      	cbnz	r0, 8010514 <__cvt+0xac>
 8010504:	2230      	movs	r2, #48	; 0x30
 8010506:	9b03      	ldr	r3, [sp, #12]
 8010508:	454b      	cmp	r3, r9
 801050a:	d205      	bcs.n	8010518 <__cvt+0xb0>
 801050c:	1c59      	adds	r1, r3, #1
 801050e:	9103      	str	r1, [sp, #12]
 8010510:	701a      	strb	r2, [r3, #0]
 8010512:	e7f8      	b.n	8010506 <__cvt+0x9e>
 8010514:	f8cd 900c 	str.w	r9, [sp, #12]
 8010518:	9b03      	ldr	r3, [sp, #12]
 801051a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801051c:	eba3 0308 	sub.w	r3, r3, r8
 8010520:	4640      	mov	r0, r8
 8010522:	6013      	str	r3, [r2, #0]
 8010524:	b004      	add	sp, #16
 8010526:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0801052a <__exponent>:
 801052a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801052c:	2900      	cmp	r1, #0
 801052e:	4604      	mov	r4, r0
 8010530:	bfba      	itte	lt
 8010532:	4249      	neglt	r1, r1
 8010534:	232d      	movlt	r3, #45	; 0x2d
 8010536:	232b      	movge	r3, #43	; 0x2b
 8010538:	2909      	cmp	r1, #9
 801053a:	f804 2b02 	strb.w	r2, [r4], #2
 801053e:	7043      	strb	r3, [r0, #1]
 8010540:	dd20      	ble.n	8010584 <__exponent+0x5a>
 8010542:	f10d 0307 	add.w	r3, sp, #7
 8010546:	461f      	mov	r7, r3
 8010548:	260a      	movs	r6, #10
 801054a:	fb91 f5f6 	sdiv	r5, r1, r6
 801054e:	fb06 1115 	mls	r1, r6, r5, r1
 8010552:	3130      	adds	r1, #48	; 0x30
 8010554:	2d09      	cmp	r5, #9
 8010556:	f803 1c01 	strb.w	r1, [r3, #-1]
 801055a:	f103 32ff 	add.w	r2, r3, #4294967295
 801055e:	4629      	mov	r1, r5
 8010560:	dc09      	bgt.n	8010576 <__exponent+0x4c>
 8010562:	3130      	adds	r1, #48	; 0x30
 8010564:	3b02      	subs	r3, #2
 8010566:	f802 1c01 	strb.w	r1, [r2, #-1]
 801056a:	42bb      	cmp	r3, r7
 801056c:	4622      	mov	r2, r4
 801056e:	d304      	bcc.n	801057a <__exponent+0x50>
 8010570:	1a10      	subs	r0, r2, r0
 8010572:	b003      	add	sp, #12
 8010574:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010576:	4613      	mov	r3, r2
 8010578:	e7e7      	b.n	801054a <__exponent+0x20>
 801057a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801057e:	f804 2b01 	strb.w	r2, [r4], #1
 8010582:	e7f2      	b.n	801056a <__exponent+0x40>
 8010584:	2330      	movs	r3, #48	; 0x30
 8010586:	4419      	add	r1, r3
 8010588:	7083      	strb	r3, [r0, #2]
 801058a:	1d02      	adds	r2, r0, #4
 801058c:	70c1      	strb	r1, [r0, #3]
 801058e:	e7ef      	b.n	8010570 <__exponent+0x46>

08010590 <_printf_float>:
 8010590:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010594:	b08d      	sub	sp, #52	; 0x34
 8010596:	460c      	mov	r4, r1
 8010598:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 801059c:	4616      	mov	r6, r2
 801059e:	461f      	mov	r7, r3
 80105a0:	4605      	mov	r5, r0
 80105a2:	f002 fe09 	bl	80131b8 <_localeconv_r>
 80105a6:	6803      	ldr	r3, [r0, #0]
 80105a8:	9304      	str	r3, [sp, #16]
 80105aa:	4618      	mov	r0, r3
 80105ac:	f7ef fe10 	bl	80001d0 <strlen>
 80105b0:	2300      	movs	r3, #0
 80105b2:	930a      	str	r3, [sp, #40]	; 0x28
 80105b4:	f8d8 3000 	ldr.w	r3, [r8]
 80105b8:	9005      	str	r0, [sp, #20]
 80105ba:	3307      	adds	r3, #7
 80105bc:	f023 0307 	bic.w	r3, r3, #7
 80105c0:	f103 0208 	add.w	r2, r3, #8
 80105c4:	f894 a018 	ldrb.w	sl, [r4, #24]
 80105c8:	f8d4 b000 	ldr.w	fp, [r4]
 80105cc:	f8c8 2000 	str.w	r2, [r8]
 80105d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80105d4:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80105d8:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80105dc:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80105e0:	9307      	str	r3, [sp, #28]
 80105e2:	f8cd 8018 	str.w	r8, [sp, #24]
 80105e6:	f04f 32ff 	mov.w	r2, #4294967295
 80105ea:	4ba7      	ldr	r3, [pc, #668]	; (8010888 <_printf_float+0x2f8>)
 80105ec:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80105f0:	f7f0 fa9c 	bl	8000b2c <__aeabi_dcmpun>
 80105f4:	bb70      	cbnz	r0, 8010654 <_printf_float+0xc4>
 80105f6:	f04f 32ff 	mov.w	r2, #4294967295
 80105fa:	4ba3      	ldr	r3, [pc, #652]	; (8010888 <_printf_float+0x2f8>)
 80105fc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8010600:	f7f0 fa76 	bl	8000af0 <__aeabi_dcmple>
 8010604:	bb30      	cbnz	r0, 8010654 <_printf_float+0xc4>
 8010606:	2200      	movs	r2, #0
 8010608:	2300      	movs	r3, #0
 801060a:	4640      	mov	r0, r8
 801060c:	4649      	mov	r1, r9
 801060e:	f7f0 fa65 	bl	8000adc <__aeabi_dcmplt>
 8010612:	b110      	cbz	r0, 801061a <_printf_float+0x8a>
 8010614:	232d      	movs	r3, #45	; 0x2d
 8010616:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801061a:	4a9c      	ldr	r2, [pc, #624]	; (801088c <_printf_float+0x2fc>)
 801061c:	4b9c      	ldr	r3, [pc, #624]	; (8010890 <_printf_float+0x300>)
 801061e:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8010622:	bf8c      	ite	hi
 8010624:	4690      	movhi	r8, r2
 8010626:	4698      	movls	r8, r3
 8010628:	2303      	movs	r3, #3
 801062a:	f02b 0204 	bic.w	r2, fp, #4
 801062e:	6123      	str	r3, [r4, #16]
 8010630:	6022      	str	r2, [r4, #0]
 8010632:	f04f 0900 	mov.w	r9, #0
 8010636:	9700      	str	r7, [sp, #0]
 8010638:	4633      	mov	r3, r6
 801063a:	aa0b      	add	r2, sp, #44	; 0x2c
 801063c:	4621      	mov	r1, r4
 801063e:	4628      	mov	r0, r5
 8010640:	f000 f9e6 	bl	8010a10 <_printf_common>
 8010644:	3001      	adds	r0, #1
 8010646:	f040 808d 	bne.w	8010764 <_printf_float+0x1d4>
 801064a:	f04f 30ff 	mov.w	r0, #4294967295
 801064e:	b00d      	add	sp, #52	; 0x34
 8010650:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010654:	4642      	mov	r2, r8
 8010656:	464b      	mov	r3, r9
 8010658:	4640      	mov	r0, r8
 801065a:	4649      	mov	r1, r9
 801065c:	f7f0 fa66 	bl	8000b2c <__aeabi_dcmpun>
 8010660:	b110      	cbz	r0, 8010668 <_printf_float+0xd8>
 8010662:	4a8c      	ldr	r2, [pc, #560]	; (8010894 <_printf_float+0x304>)
 8010664:	4b8c      	ldr	r3, [pc, #560]	; (8010898 <_printf_float+0x308>)
 8010666:	e7da      	b.n	801061e <_printf_float+0x8e>
 8010668:	6861      	ldr	r1, [r4, #4]
 801066a:	1c4b      	adds	r3, r1, #1
 801066c:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 8010670:	a80a      	add	r0, sp, #40	; 0x28
 8010672:	d13e      	bne.n	80106f2 <_printf_float+0x162>
 8010674:	2306      	movs	r3, #6
 8010676:	6063      	str	r3, [r4, #4]
 8010678:	2300      	movs	r3, #0
 801067a:	e9cd 0302 	strd	r0, r3, [sp, #8]
 801067e:	ab09      	add	r3, sp, #36	; 0x24
 8010680:	9300      	str	r3, [sp, #0]
 8010682:	ec49 8b10 	vmov	d0, r8, r9
 8010686:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 801068a:	6022      	str	r2, [r4, #0]
 801068c:	f8cd a004 	str.w	sl, [sp, #4]
 8010690:	6861      	ldr	r1, [r4, #4]
 8010692:	4628      	mov	r0, r5
 8010694:	f7ff fee8 	bl	8010468 <__cvt>
 8010698:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 801069c:	2b47      	cmp	r3, #71	; 0x47
 801069e:	4680      	mov	r8, r0
 80106a0:	d109      	bne.n	80106b6 <_printf_float+0x126>
 80106a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80106a4:	1cd8      	adds	r0, r3, #3
 80106a6:	db02      	blt.n	80106ae <_printf_float+0x11e>
 80106a8:	6862      	ldr	r2, [r4, #4]
 80106aa:	4293      	cmp	r3, r2
 80106ac:	dd47      	ble.n	801073e <_printf_float+0x1ae>
 80106ae:	f1aa 0a02 	sub.w	sl, sl, #2
 80106b2:	fa5f fa8a 	uxtb.w	sl, sl
 80106b6:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 80106ba:	9909      	ldr	r1, [sp, #36]	; 0x24
 80106bc:	d824      	bhi.n	8010708 <_printf_float+0x178>
 80106be:	3901      	subs	r1, #1
 80106c0:	4652      	mov	r2, sl
 80106c2:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80106c6:	9109      	str	r1, [sp, #36]	; 0x24
 80106c8:	f7ff ff2f 	bl	801052a <__exponent>
 80106cc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80106ce:	1813      	adds	r3, r2, r0
 80106d0:	2a01      	cmp	r2, #1
 80106d2:	4681      	mov	r9, r0
 80106d4:	6123      	str	r3, [r4, #16]
 80106d6:	dc02      	bgt.n	80106de <_printf_float+0x14e>
 80106d8:	6822      	ldr	r2, [r4, #0]
 80106da:	07d1      	lsls	r1, r2, #31
 80106dc:	d501      	bpl.n	80106e2 <_printf_float+0x152>
 80106de:	3301      	adds	r3, #1
 80106e0:	6123      	str	r3, [r4, #16]
 80106e2:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80106e6:	2b00      	cmp	r3, #0
 80106e8:	d0a5      	beq.n	8010636 <_printf_float+0xa6>
 80106ea:	232d      	movs	r3, #45	; 0x2d
 80106ec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80106f0:	e7a1      	b.n	8010636 <_printf_float+0xa6>
 80106f2:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 80106f6:	f000 8177 	beq.w	80109e8 <_printf_float+0x458>
 80106fa:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 80106fe:	d1bb      	bne.n	8010678 <_printf_float+0xe8>
 8010700:	2900      	cmp	r1, #0
 8010702:	d1b9      	bne.n	8010678 <_printf_float+0xe8>
 8010704:	2301      	movs	r3, #1
 8010706:	e7b6      	b.n	8010676 <_printf_float+0xe6>
 8010708:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 801070c:	d119      	bne.n	8010742 <_printf_float+0x1b2>
 801070e:	2900      	cmp	r1, #0
 8010710:	6863      	ldr	r3, [r4, #4]
 8010712:	dd0c      	ble.n	801072e <_printf_float+0x19e>
 8010714:	6121      	str	r1, [r4, #16]
 8010716:	b913      	cbnz	r3, 801071e <_printf_float+0x18e>
 8010718:	6822      	ldr	r2, [r4, #0]
 801071a:	07d2      	lsls	r2, r2, #31
 801071c:	d502      	bpl.n	8010724 <_printf_float+0x194>
 801071e:	3301      	adds	r3, #1
 8010720:	440b      	add	r3, r1
 8010722:	6123      	str	r3, [r4, #16]
 8010724:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010726:	65a3      	str	r3, [r4, #88]	; 0x58
 8010728:	f04f 0900 	mov.w	r9, #0
 801072c:	e7d9      	b.n	80106e2 <_printf_float+0x152>
 801072e:	b913      	cbnz	r3, 8010736 <_printf_float+0x1a6>
 8010730:	6822      	ldr	r2, [r4, #0]
 8010732:	07d0      	lsls	r0, r2, #31
 8010734:	d501      	bpl.n	801073a <_printf_float+0x1aa>
 8010736:	3302      	adds	r3, #2
 8010738:	e7f3      	b.n	8010722 <_printf_float+0x192>
 801073a:	2301      	movs	r3, #1
 801073c:	e7f1      	b.n	8010722 <_printf_float+0x192>
 801073e:	f04f 0a67 	mov.w	sl, #103	; 0x67
 8010742:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8010746:	4293      	cmp	r3, r2
 8010748:	db05      	blt.n	8010756 <_printf_float+0x1c6>
 801074a:	6822      	ldr	r2, [r4, #0]
 801074c:	6123      	str	r3, [r4, #16]
 801074e:	07d1      	lsls	r1, r2, #31
 8010750:	d5e8      	bpl.n	8010724 <_printf_float+0x194>
 8010752:	3301      	adds	r3, #1
 8010754:	e7e5      	b.n	8010722 <_printf_float+0x192>
 8010756:	2b00      	cmp	r3, #0
 8010758:	bfd4      	ite	le
 801075a:	f1c3 0302 	rsble	r3, r3, #2
 801075e:	2301      	movgt	r3, #1
 8010760:	4413      	add	r3, r2
 8010762:	e7de      	b.n	8010722 <_printf_float+0x192>
 8010764:	6823      	ldr	r3, [r4, #0]
 8010766:	055a      	lsls	r2, r3, #21
 8010768:	d407      	bmi.n	801077a <_printf_float+0x1ea>
 801076a:	6923      	ldr	r3, [r4, #16]
 801076c:	4642      	mov	r2, r8
 801076e:	4631      	mov	r1, r6
 8010770:	4628      	mov	r0, r5
 8010772:	47b8      	blx	r7
 8010774:	3001      	adds	r0, #1
 8010776:	d12b      	bne.n	80107d0 <_printf_float+0x240>
 8010778:	e767      	b.n	801064a <_printf_float+0xba>
 801077a:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 801077e:	f240 80dc 	bls.w	801093a <_printf_float+0x3aa>
 8010782:	2200      	movs	r2, #0
 8010784:	2300      	movs	r3, #0
 8010786:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 801078a:	f7f0 f99d 	bl	8000ac8 <__aeabi_dcmpeq>
 801078e:	2800      	cmp	r0, #0
 8010790:	d033      	beq.n	80107fa <_printf_float+0x26a>
 8010792:	2301      	movs	r3, #1
 8010794:	4a41      	ldr	r2, [pc, #260]	; (801089c <_printf_float+0x30c>)
 8010796:	4631      	mov	r1, r6
 8010798:	4628      	mov	r0, r5
 801079a:	47b8      	blx	r7
 801079c:	3001      	adds	r0, #1
 801079e:	f43f af54 	beq.w	801064a <_printf_float+0xba>
 80107a2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80107a6:	429a      	cmp	r2, r3
 80107a8:	db02      	blt.n	80107b0 <_printf_float+0x220>
 80107aa:	6823      	ldr	r3, [r4, #0]
 80107ac:	07d8      	lsls	r0, r3, #31
 80107ae:	d50f      	bpl.n	80107d0 <_printf_float+0x240>
 80107b0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80107b4:	4631      	mov	r1, r6
 80107b6:	4628      	mov	r0, r5
 80107b8:	47b8      	blx	r7
 80107ba:	3001      	adds	r0, #1
 80107bc:	f43f af45 	beq.w	801064a <_printf_float+0xba>
 80107c0:	f04f 0800 	mov.w	r8, #0
 80107c4:	f104 091a 	add.w	r9, r4, #26
 80107c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80107ca:	3b01      	subs	r3, #1
 80107cc:	4543      	cmp	r3, r8
 80107ce:	dc09      	bgt.n	80107e4 <_printf_float+0x254>
 80107d0:	6823      	ldr	r3, [r4, #0]
 80107d2:	079b      	lsls	r3, r3, #30
 80107d4:	f100 8103 	bmi.w	80109de <_printf_float+0x44e>
 80107d8:	68e0      	ldr	r0, [r4, #12]
 80107da:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80107dc:	4298      	cmp	r0, r3
 80107de:	bfb8      	it	lt
 80107e0:	4618      	movlt	r0, r3
 80107e2:	e734      	b.n	801064e <_printf_float+0xbe>
 80107e4:	2301      	movs	r3, #1
 80107e6:	464a      	mov	r2, r9
 80107e8:	4631      	mov	r1, r6
 80107ea:	4628      	mov	r0, r5
 80107ec:	47b8      	blx	r7
 80107ee:	3001      	adds	r0, #1
 80107f0:	f43f af2b 	beq.w	801064a <_printf_float+0xba>
 80107f4:	f108 0801 	add.w	r8, r8, #1
 80107f8:	e7e6      	b.n	80107c8 <_printf_float+0x238>
 80107fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80107fc:	2b00      	cmp	r3, #0
 80107fe:	dc2b      	bgt.n	8010858 <_printf_float+0x2c8>
 8010800:	2301      	movs	r3, #1
 8010802:	4a26      	ldr	r2, [pc, #152]	; (801089c <_printf_float+0x30c>)
 8010804:	4631      	mov	r1, r6
 8010806:	4628      	mov	r0, r5
 8010808:	47b8      	blx	r7
 801080a:	3001      	adds	r0, #1
 801080c:	f43f af1d 	beq.w	801064a <_printf_float+0xba>
 8010810:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010812:	b923      	cbnz	r3, 801081e <_printf_float+0x28e>
 8010814:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010816:	b913      	cbnz	r3, 801081e <_printf_float+0x28e>
 8010818:	6823      	ldr	r3, [r4, #0]
 801081a:	07d9      	lsls	r1, r3, #31
 801081c:	d5d8      	bpl.n	80107d0 <_printf_float+0x240>
 801081e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8010822:	4631      	mov	r1, r6
 8010824:	4628      	mov	r0, r5
 8010826:	47b8      	blx	r7
 8010828:	3001      	adds	r0, #1
 801082a:	f43f af0e 	beq.w	801064a <_printf_float+0xba>
 801082e:	f04f 0900 	mov.w	r9, #0
 8010832:	f104 0a1a 	add.w	sl, r4, #26
 8010836:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010838:	425b      	negs	r3, r3
 801083a:	454b      	cmp	r3, r9
 801083c:	dc01      	bgt.n	8010842 <_printf_float+0x2b2>
 801083e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010840:	e794      	b.n	801076c <_printf_float+0x1dc>
 8010842:	2301      	movs	r3, #1
 8010844:	4652      	mov	r2, sl
 8010846:	4631      	mov	r1, r6
 8010848:	4628      	mov	r0, r5
 801084a:	47b8      	blx	r7
 801084c:	3001      	adds	r0, #1
 801084e:	f43f aefc 	beq.w	801064a <_printf_float+0xba>
 8010852:	f109 0901 	add.w	r9, r9, #1
 8010856:	e7ee      	b.n	8010836 <_printf_float+0x2a6>
 8010858:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801085a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801085c:	429a      	cmp	r2, r3
 801085e:	bfa8      	it	ge
 8010860:	461a      	movge	r2, r3
 8010862:	2a00      	cmp	r2, #0
 8010864:	4691      	mov	r9, r2
 8010866:	dd07      	ble.n	8010878 <_printf_float+0x2e8>
 8010868:	4613      	mov	r3, r2
 801086a:	4631      	mov	r1, r6
 801086c:	4642      	mov	r2, r8
 801086e:	4628      	mov	r0, r5
 8010870:	47b8      	blx	r7
 8010872:	3001      	adds	r0, #1
 8010874:	f43f aee9 	beq.w	801064a <_printf_float+0xba>
 8010878:	f104 031a 	add.w	r3, r4, #26
 801087c:	f04f 0b00 	mov.w	fp, #0
 8010880:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8010884:	9306      	str	r3, [sp, #24]
 8010886:	e015      	b.n	80108b4 <_printf_float+0x324>
 8010888:	7fefffff 	.word	0x7fefffff
 801088c:	08015d0c 	.word	0x08015d0c
 8010890:	08015d08 	.word	0x08015d08
 8010894:	08015d14 	.word	0x08015d14
 8010898:	08015d10 	.word	0x08015d10
 801089c:	08015d18 	.word	0x08015d18
 80108a0:	2301      	movs	r3, #1
 80108a2:	9a06      	ldr	r2, [sp, #24]
 80108a4:	4631      	mov	r1, r6
 80108a6:	4628      	mov	r0, r5
 80108a8:	47b8      	blx	r7
 80108aa:	3001      	adds	r0, #1
 80108ac:	f43f aecd 	beq.w	801064a <_printf_float+0xba>
 80108b0:	f10b 0b01 	add.w	fp, fp, #1
 80108b4:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 80108b8:	ebaa 0309 	sub.w	r3, sl, r9
 80108bc:	455b      	cmp	r3, fp
 80108be:	dcef      	bgt.n	80108a0 <_printf_float+0x310>
 80108c0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80108c4:	429a      	cmp	r2, r3
 80108c6:	44d0      	add	r8, sl
 80108c8:	db15      	blt.n	80108f6 <_printf_float+0x366>
 80108ca:	6823      	ldr	r3, [r4, #0]
 80108cc:	07da      	lsls	r2, r3, #31
 80108ce:	d412      	bmi.n	80108f6 <_printf_float+0x366>
 80108d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80108d2:	9909      	ldr	r1, [sp, #36]	; 0x24
 80108d4:	eba3 020a 	sub.w	r2, r3, sl
 80108d8:	eba3 0a01 	sub.w	sl, r3, r1
 80108dc:	4592      	cmp	sl, r2
 80108de:	bfa8      	it	ge
 80108e0:	4692      	movge	sl, r2
 80108e2:	f1ba 0f00 	cmp.w	sl, #0
 80108e6:	dc0e      	bgt.n	8010906 <_printf_float+0x376>
 80108e8:	f04f 0800 	mov.w	r8, #0
 80108ec:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80108f0:	f104 091a 	add.w	r9, r4, #26
 80108f4:	e019      	b.n	801092a <_printf_float+0x39a>
 80108f6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80108fa:	4631      	mov	r1, r6
 80108fc:	4628      	mov	r0, r5
 80108fe:	47b8      	blx	r7
 8010900:	3001      	adds	r0, #1
 8010902:	d1e5      	bne.n	80108d0 <_printf_float+0x340>
 8010904:	e6a1      	b.n	801064a <_printf_float+0xba>
 8010906:	4653      	mov	r3, sl
 8010908:	4642      	mov	r2, r8
 801090a:	4631      	mov	r1, r6
 801090c:	4628      	mov	r0, r5
 801090e:	47b8      	blx	r7
 8010910:	3001      	adds	r0, #1
 8010912:	d1e9      	bne.n	80108e8 <_printf_float+0x358>
 8010914:	e699      	b.n	801064a <_printf_float+0xba>
 8010916:	2301      	movs	r3, #1
 8010918:	464a      	mov	r2, r9
 801091a:	4631      	mov	r1, r6
 801091c:	4628      	mov	r0, r5
 801091e:	47b8      	blx	r7
 8010920:	3001      	adds	r0, #1
 8010922:	f43f ae92 	beq.w	801064a <_printf_float+0xba>
 8010926:	f108 0801 	add.w	r8, r8, #1
 801092a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801092e:	1a9b      	subs	r3, r3, r2
 8010930:	eba3 030a 	sub.w	r3, r3, sl
 8010934:	4543      	cmp	r3, r8
 8010936:	dcee      	bgt.n	8010916 <_printf_float+0x386>
 8010938:	e74a      	b.n	80107d0 <_printf_float+0x240>
 801093a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801093c:	2a01      	cmp	r2, #1
 801093e:	dc01      	bgt.n	8010944 <_printf_float+0x3b4>
 8010940:	07db      	lsls	r3, r3, #31
 8010942:	d53a      	bpl.n	80109ba <_printf_float+0x42a>
 8010944:	2301      	movs	r3, #1
 8010946:	4642      	mov	r2, r8
 8010948:	4631      	mov	r1, r6
 801094a:	4628      	mov	r0, r5
 801094c:	47b8      	blx	r7
 801094e:	3001      	adds	r0, #1
 8010950:	f43f ae7b 	beq.w	801064a <_printf_float+0xba>
 8010954:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8010958:	4631      	mov	r1, r6
 801095a:	4628      	mov	r0, r5
 801095c:	47b8      	blx	r7
 801095e:	3001      	adds	r0, #1
 8010960:	f108 0801 	add.w	r8, r8, #1
 8010964:	f43f ae71 	beq.w	801064a <_printf_float+0xba>
 8010968:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801096a:	2200      	movs	r2, #0
 801096c:	f103 3aff 	add.w	sl, r3, #4294967295
 8010970:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8010974:	2300      	movs	r3, #0
 8010976:	f7f0 f8a7 	bl	8000ac8 <__aeabi_dcmpeq>
 801097a:	b9c8      	cbnz	r0, 80109b0 <_printf_float+0x420>
 801097c:	4653      	mov	r3, sl
 801097e:	4642      	mov	r2, r8
 8010980:	4631      	mov	r1, r6
 8010982:	4628      	mov	r0, r5
 8010984:	47b8      	blx	r7
 8010986:	3001      	adds	r0, #1
 8010988:	d10e      	bne.n	80109a8 <_printf_float+0x418>
 801098a:	e65e      	b.n	801064a <_printf_float+0xba>
 801098c:	2301      	movs	r3, #1
 801098e:	4652      	mov	r2, sl
 8010990:	4631      	mov	r1, r6
 8010992:	4628      	mov	r0, r5
 8010994:	47b8      	blx	r7
 8010996:	3001      	adds	r0, #1
 8010998:	f43f ae57 	beq.w	801064a <_printf_float+0xba>
 801099c:	f108 0801 	add.w	r8, r8, #1
 80109a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80109a2:	3b01      	subs	r3, #1
 80109a4:	4543      	cmp	r3, r8
 80109a6:	dcf1      	bgt.n	801098c <_printf_float+0x3fc>
 80109a8:	464b      	mov	r3, r9
 80109aa:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80109ae:	e6de      	b.n	801076e <_printf_float+0x1de>
 80109b0:	f04f 0800 	mov.w	r8, #0
 80109b4:	f104 0a1a 	add.w	sl, r4, #26
 80109b8:	e7f2      	b.n	80109a0 <_printf_float+0x410>
 80109ba:	2301      	movs	r3, #1
 80109bc:	e7df      	b.n	801097e <_printf_float+0x3ee>
 80109be:	2301      	movs	r3, #1
 80109c0:	464a      	mov	r2, r9
 80109c2:	4631      	mov	r1, r6
 80109c4:	4628      	mov	r0, r5
 80109c6:	47b8      	blx	r7
 80109c8:	3001      	adds	r0, #1
 80109ca:	f43f ae3e 	beq.w	801064a <_printf_float+0xba>
 80109ce:	f108 0801 	add.w	r8, r8, #1
 80109d2:	68e3      	ldr	r3, [r4, #12]
 80109d4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80109d6:	1a9b      	subs	r3, r3, r2
 80109d8:	4543      	cmp	r3, r8
 80109da:	dcf0      	bgt.n	80109be <_printf_float+0x42e>
 80109dc:	e6fc      	b.n	80107d8 <_printf_float+0x248>
 80109de:	f04f 0800 	mov.w	r8, #0
 80109e2:	f104 0919 	add.w	r9, r4, #25
 80109e6:	e7f4      	b.n	80109d2 <_printf_float+0x442>
 80109e8:	2900      	cmp	r1, #0
 80109ea:	f43f ae8b 	beq.w	8010704 <_printf_float+0x174>
 80109ee:	2300      	movs	r3, #0
 80109f0:	e9cd 0302 	strd	r0, r3, [sp, #8]
 80109f4:	ab09      	add	r3, sp, #36	; 0x24
 80109f6:	9300      	str	r3, [sp, #0]
 80109f8:	ec49 8b10 	vmov	d0, r8, r9
 80109fc:	6022      	str	r2, [r4, #0]
 80109fe:	f8cd a004 	str.w	sl, [sp, #4]
 8010a02:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8010a06:	4628      	mov	r0, r5
 8010a08:	f7ff fd2e 	bl	8010468 <__cvt>
 8010a0c:	4680      	mov	r8, r0
 8010a0e:	e648      	b.n	80106a2 <_printf_float+0x112>

08010a10 <_printf_common>:
 8010a10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010a14:	4691      	mov	r9, r2
 8010a16:	461f      	mov	r7, r3
 8010a18:	688a      	ldr	r2, [r1, #8]
 8010a1a:	690b      	ldr	r3, [r1, #16]
 8010a1c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8010a20:	4293      	cmp	r3, r2
 8010a22:	bfb8      	it	lt
 8010a24:	4613      	movlt	r3, r2
 8010a26:	f8c9 3000 	str.w	r3, [r9]
 8010a2a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8010a2e:	4606      	mov	r6, r0
 8010a30:	460c      	mov	r4, r1
 8010a32:	b112      	cbz	r2, 8010a3a <_printf_common+0x2a>
 8010a34:	3301      	adds	r3, #1
 8010a36:	f8c9 3000 	str.w	r3, [r9]
 8010a3a:	6823      	ldr	r3, [r4, #0]
 8010a3c:	0699      	lsls	r1, r3, #26
 8010a3e:	bf42      	ittt	mi
 8010a40:	f8d9 3000 	ldrmi.w	r3, [r9]
 8010a44:	3302      	addmi	r3, #2
 8010a46:	f8c9 3000 	strmi.w	r3, [r9]
 8010a4a:	6825      	ldr	r5, [r4, #0]
 8010a4c:	f015 0506 	ands.w	r5, r5, #6
 8010a50:	d107      	bne.n	8010a62 <_printf_common+0x52>
 8010a52:	f104 0a19 	add.w	sl, r4, #25
 8010a56:	68e3      	ldr	r3, [r4, #12]
 8010a58:	f8d9 2000 	ldr.w	r2, [r9]
 8010a5c:	1a9b      	subs	r3, r3, r2
 8010a5e:	42ab      	cmp	r3, r5
 8010a60:	dc28      	bgt.n	8010ab4 <_printf_common+0xa4>
 8010a62:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8010a66:	6822      	ldr	r2, [r4, #0]
 8010a68:	3300      	adds	r3, #0
 8010a6a:	bf18      	it	ne
 8010a6c:	2301      	movne	r3, #1
 8010a6e:	0692      	lsls	r2, r2, #26
 8010a70:	d42d      	bmi.n	8010ace <_printf_common+0xbe>
 8010a72:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8010a76:	4639      	mov	r1, r7
 8010a78:	4630      	mov	r0, r6
 8010a7a:	47c0      	blx	r8
 8010a7c:	3001      	adds	r0, #1
 8010a7e:	d020      	beq.n	8010ac2 <_printf_common+0xb2>
 8010a80:	6823      	ldr	r3, [r4, #0]
 8010a82:	68e5      	ldr	r5, [r4, #12]
 8010a84:	f8d9 2000 	ldr.w	r2, [r9]
 8010a88:	f003 0306 	and.w	r3, r3, #6
 8010a8c:	2b04      	cmp	r3, #4
 8010a8e:	bf08      	it	eq
 8010a90:	1aad      	subeq	r5, r5, r2
 8010a92:	68a3      	ldr	r3, [r4, #8]
 8010a94:	6922      	ldr	r2, [r4, #16]
 8010a96:	bf0c      	ite	eq
 8010a98:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8010a9c:	2500      	movne	r5, #0
 8010a9e:	4293      	cmp	r3, r2
 8010aa0:	bfc4      	itt	gt
 8010aa2:	1a9b      	subgt	r3, r3, r2
 8010aa4:	18ed      	addgt	r5, r5, r3
 8010aa6:	f04f 0900 	mov.w	r9, #0
 8010aaa:	341a      	adds	r4, #26
 8010aac:	454d      	cmp	r5, r9
 8010aae:	d11a      	bne.n	8010ae6 <_printf_common+0xd6>
 8010ab0:	2000      	movs	r0, #0
 8010ab2:	e008      	b.n	8010ac6 <_printf_common+0xb6>
 8010ab4:	2301      	movs	r3, #1
 8010ab6:	4652      	mov	r2, sl
 8010ab8:	4639      	mov	r1, r7
 8010aba:	4630      	mov	r0, r6
 8010abc:	47c0      	blx	r8
 8010abe:	3001      	adds	r0, #1
 8010ac0:	d103      	bne.n	8010aca <_printf_common+0xba>
 8010ac2:	f04f 30ff 	mov.w	r0, #4294967295
 8010ac6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010aca:	3501      	adds	r5, #1
 8010acc:	e7c3      	b.n	8010a56 <_printf_common+0x46>
 8010ace:	18e1      	adds	r1, r4, r3
 8010ad0:	1c5a      	adds	r2, r3, #1
 8010ad2:	2030      	movs	r0, #48	; 0x30
 8010ad4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8010ad8:	4422      	add	r2, r4
 8010ada:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8010ade:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8010ae2:	3302      	adds	r3, #2
 8010ae4:	e7c5      	b.n	8010a72 <_printf_common+0x62>
 8010ae6:	2301      	movs	r3, #1
 8010ae8:	4622      	mov	r2, r4
 8010aea:	4639      	mov	r1, r7
 8010aec:	4630      	mov	r0, r6
 8010aee:	47c0      	blx	r8
 8010af0:	3001      	adds	r0, #1
 8010af2:	d0e6      	beq.n	8010ac2 <_printf_common+0xb2>
 8010af4:	f109 0901 	add.w	r9, r9, #1
 8010af8:	e7d8      	b.n	8010aac <_printf_common+0x9c>
	...

08010afc <_printf_i>:
 8010afc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010b00:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8010b04:	460c      	mov	r4, r1
 8010b06:	7e09      	ldrb	r1, [r1, #24]
 8010b08:	b085      	sub	sp, #20
 8010b0a:	296e      	cmp	r1, #110	; 0x6e
 8010b0c:	4617      	mov	r7, r2
 8010b0e:	4606      	mov	r6, r0
 8010b10:	4698      	mov	r8, r3
 8010b12:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8010b14:	f000 80b3 	beq.w	8010c7e <_printf_i+0x182>
 8010b18:	d822      	bhi.n	8010b60 <_printf_i+0x64>
 8010b1a:	2963      	cmp	r1, #99	; 0x63
 8010b1c:	d036      	beq.n	8010b8c <_printf_i+0x90>
 8010b1e:	d80a      	bhi.n	8010b36 <_printf_i+0x3a>
 8010b20:	2900      	cmp	r1, #0
 8010b22:	f000 80b9 	beq.w	8010c98 <_printf_i+0x19c>
 8010b26:	2958      	cmp	r1, #88	; 0x58
 8010b28:	f000 8083 	beq.w	8010c32 <_printf_i+0x136>
 8010b2c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8010b30:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8010b34:	e032      	b.n	8010b9c <_printf_i+0xa0>
 8010b36:	2964      	cmp	r1, #100	; 0x64
 8010b38:	d001      	beq.n	8010b3e <_printf_i+0x42>
 8010b3a:	2969      	cmp	r1, #105	; 0x69
 8010b3c:	d1f6      	bne.n	8010b2c <_printf_i+0x30>
 8010b3e:	6820      	ldr	r0, [r4, #0]
 8010b40:	6813      	ldr	r3, [r2, #0]
 8010b42:	0605      	lsls	r5, r0, #24
 8010b44:	f103 0104 	add.w	r1, r3, #4
 8010b48:	d52a      	bpl.n	8010ba0 <_printf_i+0xa4>
 8010b4a:	681b      	ldr	r3, [r3, #0]
 8010b4c:	6011      	str	r1, [r2, #0]
 8010b4e:	2b00      	cmp	r3, #0
 8010b50:	da03      	bge.n	8010b5a <_printf_i+0x5e>
 8010b52:	222d      	movs	r2, #45	; 0x2d
 8010b54:	425b      	negs	r3, r3
 8010b56:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8010b5a:	486f      	ldr	r0, [pc, #444]	; (8010d18 <_printf_i+0x21c>)
 8010b5c:	220a      	movs	r2, #10
 8010b5e:	e039      	b.n	8010bd4 <_printf_i+0xd8>
 8010b60:	2973      	cmp	r1, #115	; 0x73
 8010b62:	f000 809d 	beq.w	8010ca0 <_printf_i+0x1a4>
 8010b66:	d808      	bhi.n	8010b7a <_printf_i+0x7e>
 8010b68:	296f      	cmp	r1, #111	; 0x6f
 8010b6a:	d020      	beq.n	8010bae <_printf_i+0xb2>
 8010b6c:	2970      	cmp	r1, #112	; 0x70
 8010b6e:	d1dd      	bne.n	8010b2c <_printf_i+0x30>
 8010b70:	6823      	ldr	r3, [r4, #0]
 8010b72:	f043 0320 	orr.w	r3, r3, #32
 8010b76:	6023      	str	r3, [r4, #0]
 8010b78:	e003      	b.n	8010b82 <_printf_i+0x86>
 8010b7a:	2975      	cmp	r1, #117	; 0x75
 8010b7c:	d017      	beq.n	8010bae <_printf_i+0xb2>
 8010b7e:	2978      	cmp	r1, #120	; 0x78
 8010b80:	d1d4      	bne.n	8010b2c <_printf_i+0x30>
 8010b82:	2378      	movs	r3, #120	; 0x78
 8010b84:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8010b88:	4864      	ldr	r0, [pc, #400]	; (8010d1c <_printf_i+0x220>)
 8010b8a:	e055      	b.n	8010c38 <_printf_i+0x13c>
 8010b8c:	6813      	ldr	r3, [r2, #0]
 8010b8e:	1d19      	adds	r1, r3, #4
 8010b90:	681b      	ldr	r3, [r3, #0]
 8010b92:	6011      	str	r1, [r2, #0]
 8010b94:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8010b98:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8010b9c:	2301      	movs	r3, #1
 8010b9e:	e08c      	b.n	8010cba <_printf_i+0x1be>
 8010ba0:	681b      	ldr	r3, [r3, #0]
 8010ba2:	6011      	str	r1, [r2, #0]
 8010ba4:	f010 0f40 	tst.w	r0, #64	; 0x40
 8010ba8:	bf18      	it	ne
 8010baa:	b21b      	sxthne	r3, r3
 8010bac:	e7cf      	b.n	8010b4e <_printf_i+0x52>
 8010bae:	6813      	ldr	r3, [r2, #0]
 8010bb0:	6825      	ldr	r5, [r4, #0]
 8010bb2:	1d18      	adds	r0, r3, #4
 8010bb4:	6010      	str	r0, [r2, #0]
 8010bb6:	0628      	lsls	r0, r5, #24
 8010bb8:	d501      	bpl.n	8010bbe <_printf_i+0xc2>
 8010bba:	681b      	ldr	r3, [r3, #0]
 8010bbc:	e002      	b.n	8010bc4 <_printf_i+0xc8>
 8010bbe:	0668      	lsls	r0, r5, #25
 8010bc0:	d5fb      	bpl.n	8010bba <_printf_i+0xbe>
 8010bc2:	881b      	ldrh	r3, [r3, #0]
 8010bc4:	4854      	ldr	r0, [pc, #336]	; (8010d18 <_printf_i+0x21c>)
 8010bc6:	296f      	cmp	r1, #111	; 0x6f
 8010bc8:	bf14      	ite	ne
 8010bca:	220a      	movne	r2, #10
 8010bcc:	2208      	moveq	r2, #8
 8010bce:	2100      	movs	r1, #0
 8010bd0:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8010bd4:	6865      	ldr	r5, [r4, #4]
 8010bd6:	60a5      	str	r5, [r4, #8]
 8010bd8:	2d00      	cmp	r5, #0
 8010bda:	f2c0 8095 	blt.w	8010d08 <_printf_i+0x20c>
 8010bde:	6821      	ldr	r1, [r4, #0]
 8010be0:	f021 0104 	bic.w	r1, r1, #4
 8010be4:	6021      	str	r1, [r4, #0]
 8010be6:	2b00      	cmp	r3, #0
 8010be8:	d13d      	bne.n	8010c66 <_printf_i+0x16a>
 8010bea:	2d00      	cmp	r5, #0
 8010bec:	f040 808e 	bne.w	8010d0c <_printf_i+0x210>
 8010bf0:	4665      	mov	r5, ip
 8010bf2:	2a08      	cmp	r2, #8
 8010bf4:	d10b      	bne.n	8010c0e <_printf_i+0x112>
 8010bf6:	6823      	ldr	r3, [r4, #0]
 8010bf8:	07db      	lsls	r3, r3, #31
 8010bfa:	d508      	bpl.n	8010c0e <_printf_i+0x112>
 8010bfc:	6923      	ldr	r3, [r4, #16]
 8010bfe:	6862      	ldr	r2, [r4, #4]
 8010c00:	429a      	cmp	r2, r3
 8010c02:	bfde      	ittt	le
 8010c04:	2330      	movle	r3, #48	; 0x30
 8010c06:	f805 3c01 	strble.w	r3, [r5, #-1]
 8010c0a:	f105 35ff 	addle.w	r5, r5, #4294967295
 8010c0e:	ebac 0305 	sub.w	r3, ip, r5
 8010c12:	6123      	str	r3, [r4, #16]
 8010c14:	f8cd 8000 	str.w	r8, [sp]
 8010c18:	463b      	mov	r3, r7
 8010c1a:	aa03      	add	r2, sp, #12
 8010c1c:	4621      	mov	r1, r4
 8010c1e:	4630      	mov	r0, r6
 8010c20:	f7ff fef6 	bl	8010a10 <_printf_common>
 8010c24:	3001      	adds	r0, #1
 8010c26:	d14d      	bne.n	8010cc4 <_printf_i+0x1c8>
 8010c28:	f04f 30ff 	mov.w	r0, #4294967295
 8010c2c:	b005      	add	sp, #20
 8010c2e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010c32:	4839      	ldr	r0, [pc, #228]	; (8010d18 <_printf_i+0x21c>)
 8010c34:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8010c38:	6813      	ldr	r3, [r2, #0]
 8010c3a:	6821      	ldr	r1, [r4, #0]
 8010c3c:	1d1d      	adds	r5, r3, #4
 8010c3e:	681b      	ldr	r3, [r3, #0]
 8010c40:	6015      	str	r5, [r2, #0]
 8010c42:	060a      	lsls	r2, r1, #24
 8010c44:	d50b      	bpl.n	8010c5e <_printf_i+0x162>
 8010c46:	07ca      	lsls	r2, r1, #31
 8010c48:	bf44      	itt	mi
 8010c4a:	f041 0120 	orrmi.w	r1, r1, #32
 8010c4e:	6021      	strmi	r1, [r4, #0]
 8010c50:	b91b      	cbnz	r3, 8010c5a <_printf_i+0x15e>
 8010c52:	6822      	ldr	r2, [r4, #0]
 8010c54:	f022 0220 	bic.w	r2, r2, #32
 8010c58:	6022      	str	r2, [r4, #0]
 8010c5a:	2210      	movs	r2, #16
 8010c5c:	e7b7      	b.n	8010bce <_printf_i+0xd2>
 8010c5e:	064d      	lsls	r5, r1, #25
 8010c60:	bf48      	it	mi
 8010c62:	b29b      	uxthmi	r3, r3
 8010c64:	e7ef      	b.n	8010c46 <_printf_i+0x14a>
 8010c66:	4665      	mov	r5, ip
 8010c68:	fbb3 f1f2 	udiv	r1, r3, r2
 8010c6c:	fb02 3311 	mls	r3, r2, r1, r3
 8010c70:	5cc3      	ldrb	r3, [r0, r3]
 8010c72:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8010c76:	460b      	mov	r3, r1
 8010c78:	2900      	cmp	r1, #0
 8010c7a:	d1f5      	bne.n	8010c68 <_printf_i+0x16c>
 8010c7c:	e7b9      	b.n	8010bf2 <_printf_i+0xf6>
 8010c7e:	6813      	ldr	r3, [r2, #0]
 8010c80:	6825      	ldr	r5, [r4, #0]
 8010c82:	6961      	ldr	r1, [r4, #20]
 8010c84:	1d18      	adds	r0, r3, #4
 8010c86:	6010      	str	r0, [r2, #0]
 8010c88:	0628      	lsls	r0, r5, #24
 8010c8a:	681b      	ldr	r3, [r3, #0]
 8010c8c:	d501      	bpl.n	8010c92 <_printf_i+0x196>
 8010c8e:	6019      	str	r1, [r3, #0]
 8010c90:	e002      	b.n	8010c98 <_printf_i+0x19c>
 8010c92:	066a      	lsls	r2, r5, #25
 8010c94:	d5fb      	bpl.n	8010c8e <_printf_i+0x192>
 8010c96:	8019      	strh	r1, [r3, #0]
 8010c98:	2300      	movs	r3, #0
 8010c9a:	6123      	str	r3, [r4, #16]
 8010c9c:	4665      	mov	r5, ip
 8010c9e:	e7b9      	b.n	8010c14 <_printf_i+0x118>
 8010ca0:	6813      	ldr	r3, [r2, #0]
 8010ca2:	1d19      	adds	r1, r3, #4
 8010ca4:	6011      	str	r1, [r2, #0]
 8010ca6:	681d      	ldr	r5, [r3, #0]
 8010ca8:	6862      	ldr	r2, [r4, #4]
 8010caa:	2100      	movs	r1, #0
 8010cac:	4628      	mov	r0, r5
 8010cae:	f7ef fa97 	bl	80001e0 <memchr>
 8010cb2:	b108      	cbz	r0, 8010cb8 <_printf_i+0x1bc>
 8010cb4:	1b40      	subs	r0, r0, r5
 8010cb6:	6060      	str	r0, [r4, #4]
 8010cb8:	6863      	ldr	r3, [r4, #4]
 8010cba:	6123      	str	r3, [r4, #16]
 8010cbc:	2300      	movs	r3, #0
 8010cbe:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010cc2:	e7a7      	b.n	8010c14 <_printf_i+0x118>
 8010cc4:	6923      	ldr	r3, [r4, #16]
 8010cc6:	462a      	mov	r2, r5
 8010cc8:	4639      	mov	r1, r7
 8010cca:	4630      	mov	r0, r6
 8010ccc:	47c0      	blx	r8
 8010cce:	3001      	adds	r0, #1
 8010cd0:	d0aa      	beq.n	8010c28 <_printf_i+0x12c>
 8010cd2:	6823      	ldr	r3, [r4, #0]
 8010cd4:	079b      	lsls	r3, r3, #30
 8010cd6:	d413      	bmi.n	8010d00 <_printf_i+0x204>
 8010cd8:	68e0      	ldr	r0, [r4, #12]
 8010cda:	9b03      	ldr	r3, [sp, #12]
 8010cdc:	4298      	cmp	r0, r3
 8010cde:	bfb8      	it	lt
 8010ce0:	4618      	movlt	r0, r3
 8010ce2:	e7a3      	b.n	8010c2c <_printf_i+0x130>
 8010ce4:	2301      	movs	r3, #1
 8010ce6:	464a      	mov	r2, r9
 8010ce8:	4639      	mov	r1, r7
 8010cea:	4630      	mov	r0, r6
 8010cec:	47c0      	blx	r8
 8010cee:	3001      	adds	r0, #1
 8010cf0:	d09a      	beq.n	8010c28 <_printf_i+0x12c>
 8010cf2:	3501      	adds	r5, #1
 8010cf4:	68e3      	ldr	r3, [r4, #12]
 8010cf6:	9a03      	ldr	r2, [sp, #12]
 8010cf8:	1a9b      	subs	r3, r3, r2
 8010cfa:	42ab      	cmp	r3, r5
 8010cfc:	dcf2      	bgt.n	8010ce4 <_printf_i+0x1e8>
 8010cfe:	e7eb      	b.n	8010cd8 <_printf_i+0x1dc>
 8010d00:	2500      	movs	r5, #0
 8010d02:	f104 0919 	add.w	r9, r4, #25
 8010d06:	e7f5      	b.n	8010cf4 <_printf_i+0x1f8>
 8010d08:	2b00      	cmp	r3, #0
 8010d0a:	d1ac      	bne.n	8010c66 <_printf_i+0x16a>
 8010d0c:	7803      	ldrb	r3, [r0, #0]
 8010d0e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8010d12:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8010d16:	e76c      	b.n	8010bf2 <_printf_i+0xf6>
 8010d18:	08015d1a 	.word	0x08015d1a
 8010d1c:	08015d2b 	.word	0x08015d2b

08010d20 <_scanf_float>:
 8010d20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010d24:	469a      	mov	sl, r3
 8010d26:	688b      	ldr	r3, [r1, #8]
 8010d28:	4616      	mov	r6, r2
 8010d2a:	1e5a      	subs	r2, r3, #1
 8010d2c:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8010d30:	b087      	sub	sp, #28
 8010d32:	bf83      	ittte	hi
 8010d34:	f46f 72ae 	mvnhi.w	r2, #348	; 0x15c
 8010d38:	189b      	addhi	r3, r3, r2
 8010d3a:	9301      	strhi	r3, [sp, #4]
 8010d3c:	2300      	movls	r3, #0
 8010d3e:	bf86      	itte	hi
 8010d40:	f240 135d 	movwhi	r3, #349	; 0x15d
 8010d44:	608b      	strhi	r3, [r1, #8]
 8010d46:	9301      	strls	r3, [sp, #4]
 8010d48:	680b      	ldr	r3, [r1, #0]
 8010d4a:	4688      	mov	r8, r1
 8010d4c:	f04f 0b00 	mov.w	fp, #0
 8010d50:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8010d54:	f848 3b1c 	str.w	r3, [r8], #28
 8010d58:	e9cd bb03 	strd	fp, fp, [sp, #12]
 8010d5c:	4607      	mov	r7, r0
 8010d5e:	460c      	mov	r4, r1
 8010d60:	4645      	mov	r5, r8
 8010d62:	465a      	mov	r2, fp
 8010d64:	46d9      	mov	r9, fp
 8010d66:	f8cd b008 	str.w	fp, [sp, #8]
 8010d6a:	68a1      	ldr	r1, [r4, #8]
 8010d6c:	b181      	cbz	r1, 8010d90 <_scanf_float+0x70>
 8010d6e:	6833      	ldr	r3, [r6, #0]
 8010d70:	781b      	ldrb	r3, [r3, #0]
 8010d72:	2b49      	cmp	r3, #73	; 0x49
 8010d74:	d071      	beq.n	8010e5a <_scanf_float+0x13a>
 8010d76:	d84d      	bhi.n	8010e14 <_scanf_float+0xf4>
 8010d78:	2b39      	cmp	r3, #57	; 0x39
 8010d7a:	d840      	bhi.n	8010dfe <_scanf_float+0xde>
 8010d7c:	2b31      	cmp	r3, #49	; 0x31
 8010d7e:	f080 8088 	bcs.w	8010e92 <_scanf_float+0x172>
 8010d82:	2b2d      	cmp	r3, #45	; 0x2d
 8010d84:	f000 8090 	beq.w	8010ea8 <_scanf_float+0x188>
 8010d88:	d815      	bhi.n	8010db6 <_scanf_float+0x96>
 8010d8a:	2b2b      	cmp	r3, #43	; 0x2b
 8010d8c:	f000 808c 	beq.w	8010ea8 <_scanf_float+0x188>
 8010d90:	f1b9 0f00 	cmp.w	r9, #0
 8010d94:	d003      	beq.n	8010d9e <_scanf_float+0x7e>
 8010d96:	6823      	ldr	r3, [r4, #0]
 8010d98:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8010d9c:	6023      	str	r3, [r4, #0]
 8010d9e:	3a01      	subs	r2, #1
 8010da0:	2a01      	cmp	r2, #1
 8010da2:	f200 80ea 	bhi.w	8010f7a <_scanf_float+0x25a>
 8010da6:	4545      	cmp	r5, r8
 8010da8:	f200 80dc 	bhi.w	8010f64 <_scanf_float+0x244>
 8010dac:	2601      	movs	r6, #1
 8010dae:	4630      	mov	r0, r6
 8010db0:	b007      	add	sp, #28
 8010db2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010db6:	2b2e      	cmp	r3, #46	; 0x2e
 8010db8:	f000 809f 	beq.w	8010efa <_scanf_float+0x1da>
 8010dbc:	2b30      	cmp	r3, #48	; 0x30
 8010dbe:	d1e7      	bne.n	8010d90 <_scanf_float+0x70>
 8010dc0:	6820      	ldr	r0, [r4, #0]
 8010dc2:	f410 7f80 	tst.w	r0, #256	; 0x100
 8010dc6:	d064      	beq.n	8010e92 <_scanf_float+0x172>
 8010dc8:	9b01      	ldr	r3, [sp, #4]
 8010dca:	f020 0080 	bic.w	r0, r0, #128	; 0x80
 8010dce:	6020      	str	r0, [r4, #0]
 8010dd0:	f109 0901 	add.w	r9, r9, #1
 8010dd4:	b11b      	cbz	r3, 8010dde <_scanf_float+0xbe>
 8010dd6:	3b01      	subs	r3, #1
 8010dd8:	3101      	adds	r1, #1
 8010dda:	9301      	str	r3, [sp, #4]
 8010ddc:	60a1      	str	r1, [r4, #8]
 8010dde:	68a3      	ldr	r3, [r4, #8]
 8010de0:	3b01      	subs	r3, #1
 8010de2:	60a3      	str	r3, [r4, #8]
 8010de4:	6923      	ldr	r3, [r4, #16]
 8010de6:	3301      	adds	r3, #1
 8010de8:	6123      	str	r3, [r4, #16]
 8010dea:	6873      	ldr	r3, [r6, #4]
 8010dec:	3b01      	subs	r3, #1
 8010dee:	2b00      	cmp	r3, #0
 8010df0:	6073      	str	r3, [r6, #4]
 8010df2:	f340 80ac 	ble.w	8010f4e <_scanf_float+0x22e>
 8010df6:	6833      	ldr	r3, [r6, #0]
 8010df8:	3301      	adds	r3, #1
 8010dfa:	6033      	str	r3, [r6, #0]
 8010dfc:	e7b5      	b.n	8010d6a <_scanf_float+0x4a>
 8010dfe:	2b45      	cmp	r3, #69	; 0x45
 8010e00:	f000 8085 	beq.w	8010f0e <_scanf_float+0x1ee>
 8010e04:	2b46      	cmp	r3, #70	; 0x46
 8010e06:	d06a      	beq.n	8010ede <_scanf_float+0x1be>
 8010e08:	2b41      	cmp	r3, #65	; 0x41
 8010e0a:	d1c1      	bne.n	8010d90 <_scanf_float+0x70>
 8010e0c:	2a01      	cmp	r2, #1
 8010e0e:	d1bf      	bne.n	8010d90 <_scanf_float+0x70>
 8010e10:	2202      	movs	r2, #2
 8010e12:	e046      	b.n	8010ea2 <_scanf_float+0x182>
 8010e14:	2b65      	cmp	r3, #101	; 0x65
 8010e16:	d07a      	beq.n	8010f0e <_scanf_float+0x1ee>
 8010e18:	d818      	bhi.n	8010e4c <_scanf_float+0x12c>
 8010e1a:	2b54      	cmp	r3, #84	; 0x54
 8010e1c:	d066      	beq.n	8010eec <_scanf_float+0x1cc>
 8010e1e:	d811      	bhi.n	8010e44 <_scanf_float+0x124>
 8010e20:	2b4e      	cmp	r3, #78	; 0x4e
 8010e22:	d1b5      	bne.n	8010d90 <_scanf_float+0x70>
 8010e24:	2a00      	cmp	r2, #0
 8010e26:	d146      	bne.n	8010eb6 <_scanf_float+0x196>
 8010e28:	f1b9 0f00 	cmp.w	r9, #0
 8010e2c:	d145      	bne.n	8010eba <_scanf_float+0x19a>
 8010e2e:	6821      	ldr	r1, [r4, #0]
 8010e30:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 8010e34:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8010e38:	d13f      	bne.n	8010eba <_scanf_float+0x19a>
 8010e3a:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8010e3e:	6021      	str	r1, [r4, #0]
 8010e40:	2201      	movs	r2, #1
 8010e42:	e02e      	b.n	8010ea2 <_scanf_float+0x182>
 8010e44:	2b59      	cmp	r3, #89	; 0x59
 8010e46:	d01e      	beq.n	8010e86 <_scanf_float+0x166>
 8010e48:	2b61      	cmp	r3, #97	; 0x61
 8010e4a:	e7de      	b.n	8010e0a <_scanf_float+0xea>
 8010e4c:	2b6e      	cmp	r3, #110	; 0x6e
 8010e4e:	d0e9      	beq.n	8010e24 <_scanf_float+0x104>
 8010e50:	d815      	bhi.n	8010e7e <_scanf_float+0x15e>
 8010e52:	2b66      	cmp	r3, #102	; 0x66
 8010e54:	d043      	beq.n	8010ede <_scanf_float+0x1be>
 8010e56:	2b69      	cmp	r3, #105	; 0x69
 8010e58:	d19a      	bne.n	8010d90 <_scanf_float+0x70>
 8010e5a:	f1bb 0f00 	cmp.w	fp, #0
 8010e5e:	d138      	bne.n	8010ed2 <_scanf_float+0x1b2>
 8010e60:	f1b9 0f00 	cmp.w	r9, #0
 8010e64:	d197      	bne.n	8010d96 <_scanf_float+0x76>
 8010e66:	6821      	ldr	r1, [r4, #0]
 8010e68:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 8010e6c:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8010e70:	d195      	bne.n	8010d9e <_scanf_float+0x7e>
 8010e72:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8010e76:	6021      	str	r1, [r4, #0]
 8010e78:	f04f 0b01 	mov.w	fp, #1
 8010e7c:	e011      	b.n	8010ea2 <_scanf_float+0x182>
 8010e7e:	2b74      	cmp	r3, #116	; 0x74
 8010e80:	d034      	beq.n	8010eec <_scanf_float+0x1cc>
 8010e82:	2b79      	cmp	r3, #121	; 0x79
 8010e84:	d184      	bne.n	8010d90 <_scanf_float+0x70>
 8010e86:	f1bb 0f07 	cmp.w	fp, #7
 8010e8a:	d181      	bne.n	8010d90 <_scanf_float+0x70>
 8010e8c:	f04f 0b08 	mov.w	fp, #8
 8010e90:	e007      	b.n	8010ea2 <_scanf_float+0x182>
 8010e92:	eb12 0f0b 	cmn.w	r2, fp
 8010e96:	f47f af7b 	bne.w	8010d90 <_scanf_float+0x70>
 8010e9a:	6821      	ldr	r1, [r4, #0]
 8010e9c:	f421 71c0 	bic.w	r1, r1, #384	; 0x180
 8010ea0:	6021      	str	r1, [r4, #0]
 8010ea2:	702b      	strb	r3, [r5, #0]
 8010ea4:	3501      	adds	r5, #1
 8010ea6:	e79a      	b.n	8010dde <_scanf_float+0xbe>
 8010ea8:	6821      	ldr	r1, [r4, #0]
 8010eaa:	0608      	lsls	r0, r1, #24
 8010eac:	f57f af70 	bpl.w	8010d90 <_scanf_float+0x70>
 8010eb0:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8010eb4:	e7f4      	b.n	8010ea0 <_scanf_float+0x180>
 8010eb6:	2a02      	cmp	r2, #2
 8010eb8:	d047      	beq.n	8010f4a <_scanf_float+0x22a>
 8010eba:	f1bb 0f01 	cmp.w	fp, #1
 8010ebe:	d003      	beq.n	8010ec8 <_scanf_float+0x1a8>
 8010ec0:	f1bb 0f04 	cmp.w	fp, #4
 8010ec4:	f47f af64 	bne.w	8010d90 <_scanf_float+0x70>
 8010ec8:	f10b 0b01 	add.w	fp, fp, #1
 8010ecc:	fa5f fb8b 	uxtb.w	fp, fp
 8010ed0:	e7e7      	b.n	8010ea2 <_scanf_float+0x182>
 8010ed2:	f1bb 0f03 	cmp.w	fp, #3
 8010ed6:	d0f7      	beq.n	8010ec8 <_scanf_float+0x1a8>
 8010ed8:	f1bb 0f05 	cmp.w	fp, #5
 8010edc:	e7f2      	b.n	8010ec4 <_scanf_float+0x1a4>
 8010ede:	f1bb 0f02 	cmp.w	fp, #2
 8010ee2:	f47f af55 	bne.w	8010d90 <_scanf_float+0x70>
 8010ee6:	f04f 0b03 	mov.w	fp, #3
 8010eea:	e7da      	b.n	8010ea2 <_scanf_float+0x182>
 8010eec:	f1bb 0f06 	cmp.w	fp, #6
 8010ef0:	f47f af4e 	bne.w	8010d90 <_scanf_float+0x70>
 8010ef4:	f04f 0b07 	mov.w	fp, #7
 8010ef8:	e7d3      	b.n	8010ea2 <_scanf_float+0x182>
 8010efa:	6821      	ldr	r1, [r4, #0]
 8010efc:	0588      	lsls	r0, r1, #22
 8010efe:	f57f af47 	bpl.w	8010d90 <_scanf_float+0x70>
 8010f02:	f421 7120 	bic.w	r1, r1, #640	; 0x280
 8010f06:	6021      	str	r1, [r4, #0]
 8010f08:	f8cd 9008 	str.w	r9, [sp, #8]
 8010f0c:	e7c9      	b.n	8010ea2 <_scanf_float+0x182>
 8010f0e:	6821      	ldr	r1, [r4, #0]
 8010f10:	f401 60a0 	and.w	r0, r1, #1280	; 0x500
 8010f14:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 8010f18:	d006      	beq.n	8010f28 <_scanf_float+0x208>
 8010f1a:	0548      	lsls	r0, r1, #21
 8010f1c:	f57f af38 	bpl.w	8010d90 <_scanf_float+0x70>
 8010f20:	f1b9 0f00 	cmp.w	r9, #0
 8010f24:	f43f af3b 	beq.w	8010d9e <_scanf_float+0x7e>
 8010f28:	0588      	lsls	r0, r1, #22
 8010f2a:	bf58      	it	pl
 8010f2c:	9802      	ldrpl	r0, [sp, #8]
 8010f2e:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8010f32:	bf58      	it	pl
 8010f34:	eba9 0000 	subpl.w	r0, r9, r0
 8010f38:	f441 71c0 	orr.w	r1, r1, #384	; 0x180
 8010f3c:	bf58      	it	pl
 8010f3e:	e9cd 0503 	strdpl	r0, r5, [sp, #12]
 8010f42:	6021      	str	r1, [r4, #0]
 8010f44:	f04f 0900 	mov.w	r9, #0
 8010f48:	e7ab      	b.n	8010ea2 <_scanf_float+0x182>
 8010f4a:	2203      	movs	r2, #3
 8010f4c:	e7a9      	b.n	8010ea2 <_scanf_float+0x182>
 8010f4e:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8010f52:	9205      	str	r2, [sp, #20]
 8010f54:	4631      	mov	r1, r6
 8010f56:	4638      	mov	r0, r7
 8010f58:	4798      	blx	r3
 8010f5a:	9a05      	ldr	r2, [sp, #20]
 8010f5c:	2800      	cmp	r0, #0
 8010f5e:	f43f af04 	beq.w	8010d6a <_scanf_float+0x4a>
 8010f62:	e715      	b.n	8010d90 <_scanf_float+0x70>
 8010f64:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8010f68:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8010f6c:	4632      	mov	r2, r6
 8010f6e:	4638      	mov	r0, r7
 8010f70:	4798      	blx	r3
 8010f72:	6923      	ldr	r3, [r4, #16]
 8010f74:	3b01      	subs	r3, #1
 8010f76:	6123      	str	r3, [r4, #16]
 8010f78:	e715      	b.n	8010da6 <_scanf_float+0x86>
 8010f7a:	f10b 33ff 	add.w	r3, fp, #4294967295
 8010f7e:	2b06      	cmp	r3, #6
 8010f80:	d80a      	bhi.n	8010f98 <_scanf_float+0x278>
 8010f82:	f1bb 0f02 	cmp.w	fp, #2
 8010f86:	d968      	bls.n	801105a <_scanf_float+0x33a>
 8010f88:	f1ab 0b03 	sub.w	fp, fp, #3
 8010f8c:	fa5f fb8b 	uxtb.w	fp, fp
 8010f90:	eba5 0b0b 	sub.w	fp, r5, fp
 8010f94:	455d      	cmp	r5, fp
 8010f96:	d14b      	bne.n	8011030 <_scanf_float+0x310>
 8010f98:	6823      	ldr	r3, [r4, #0]
 8010f9a:	05da      	lsls	r2, r3, #23
 8010f9c:	d51f      	bpl.n	8010fde <_scanf_float+0x2be>
 8010f9e:	055b      	lsls	r3, r3, #21
 8010fa0:	d468      	bmi.n	8011074 <_scanf_float+0x354>
 8010fa2:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8010fa6:	6923      	ldr	r3, [r4, #16]
 8010fa8:	2965      	cmp	r1, #101	; 0x65
 8010faa:	f103 33ff 	add.w	r3, r3, #4294967295
 8010fae:	f105 3bff 	add.w	fp, r5, #4294967295
 8010fb2:	6123      	str	r3, [r4, #16]
 8010fb4:	d00d      	beq.n	8010fd2 <_scanf_float+0x2b2>
 8010fb6:	2945      	cmp	r1, #69	; 0x45
 8010fb8:	d00b      	beq.n	8010fd2 <_scanf_float+0x2b2>
 8010fba:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8010fbe:	4632      	mov	r2, r6
 8010fc0:	4638      	mov	r0, r7
 8010fc2:	4798      	blx	r3
 8010fc4:	6923      	ldr	r3, [r4, #16]
 8010fc6:	f815 1c02 	ldrb.w	r1, [r5, #-2]
 8010fca:	3b01      	subs	r3, #1
 8010fcc:	f1a5 0b02 	sub.w	fp, r5, #2
 8010fd0:	6123      	str	r3, [r4, #16]
 8010fd2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8010fd6:	4632      	mov	r2, r6
 8010fd8:	4638      	mov	r0, r7
 8010fda:	4798      	blx	r3
 8010fdc:	465d      	mov	r5, fp
 8010fde:	6826      	ldr	r6, [r4, #0]
 8010fe0:	f016 0610 	ands.w	r6, r6, #16
 8010fe4:	d17a      	bne.n	80110dc <_scanf_float+0x3bc>
 8010fe6:	702e      	strb	r6, [r5, #0]
 8010fe8:	6823      	ldr	r3, [r4, #0]
 8010fea:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8010fee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8010ff2:	d142      	bne.n	801107a <_scanf_float+0x35a>
 8010ff4:	9b02      	ldr	r3, [sp, #8]
 8010ff6:	eba9 0303 	sub.w	r3, r9, r3
 8010ffa:	425a      	negs	r2, r3
 8010ffc:	2b00      	cmp	r3, #0
 8010ffe:	d149      	bne.n	8011094 <_scanf_float+0x374>
 8011000:	2200      	movs	r2, #0
 8011002:	4641      	mov	r1, r8
 8011004:	4638      	mov	r0, r7
 8011006:	f000 fec7 	bl	8011d98 <_strtod_r>
 801100a:	6825      	ldr	r5, [r4, #0]
 801100c:	f8da 3000 	ldr.w	r3, [sl]
 8011010:	f015 0f02 	tst.w	r5, #2
 8011014:	f103 0204 	add.w	r2, r3, #4
 8011018:	ec59 8b10 	vmov	r8, r9, d0
 801101c:	f8ca 2000 	str.w	r2, [sl]
 8011020:	d043      	beq.n	80110aa <_scanf_float+0x38a>
 8011022:	681b      	ldr	r3, [r3, #0]
 8011024:	e9c3 8900 	strd	r8, r9, [r3]
 8011028:	68e3      	ldr	r3, [r4, #12]
 801102a:	3301      	adds	r3, #1
 801102c:	60e3      	str	r3, [r4, #12]
 801102e:	e6be      	b.n	8010dae <_scanf_float+0x8e>
 8011030:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8011034:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8011038:	4632      	mov	r2, r6
 801103a:	4638      	mov	r0, r7
 801103c:	4798      	blx	r3
 801103e:	6923      	ldr	r3, [r4, #16]
 8011040:	3b01      	subs	r3, #1
 8011042:	6123      	str	r3, [r4, #16]
 8011044:	e7a6      	b.n	8010f94 <_scanf_float+0x274>
 8011046:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801104a:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 801104e:	4632      	mov	r2, r6
 8011050:	4638      	mov	r0, r7
 8011052:	4798      	blx	r3
 8011054:	6923      	ldr	r3, [r4, #16]
 8011056:	3b01      	subs	r3, #1
 8011058:	6123      	str	r3, [r4, #16]
 801105a:	4545      	cmp	r5, r8
 801105c:	d8f3      	bhi.n	8011046 <_scanf_float+0x326>
 801105e:	e6a5      	b.n	8010dac <_scanf_float+0x8c>
 8011060:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8011064:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8011068:	4632      	mov	r2, r6
 801106a:	4638      	mov	r0, r7
 801106c:	4798      	blx	r3
 801106e:	6923      	ldr	r3, [r4, #16]
 8011070:	3b01      	subs	r3, #1
 8011072:	6123      	str	r3, [r4, #16]
 8011074:	4545      	cmp	r5, r8
 8011076:	d8f3      	bhi.n	8011060 <_scanf_float+0x340>
 8011078:	e698      	b.n	8010dac <_scanf_float+0x8c>
 801107a:	9b03      	ldr	r3, [sp, #12]
 801107c:	2b00      	cmp	r3, #0
 801107e:	d0bf      	beq.n	8011000 <_scanf_float+0x2e0>
 8011080:	9904      	ldr	r1, [sp, #16]
 8011082:	230a      	movs	r3, #10
 8011084:	4632      	mov	r2, r6
 8011086:	3101      	adds	r1, #1
 8011088:	4638      	mov	r0, r7
 801108a:	f000 ff11 	bl	8011eb0 <_strtol_r>
 801108e:	9b03      	ldr	r3, [sp, #12]
 8011090:	9d04      	ldr	r5, [sp, #16]
 8011092:	1ac2      	subs	r2, r0, r3
 8011094:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8011098:	429d      	cmp	r5, r3
 801109a:	bf28      	it	cs
 801109c:	f504 75b7 	addcs.w	r5, r4, #366	; 0x16e
 80110a0:	490f      	ldr	r1, [pc, #60]	; (80110e0 <_scanf_float+0x3c0>)
 80110a2:	4628      	mov	r0, r5
 80110a4:	f000 f834 	bl	8011110 <siprintf>
 80110a8:	e7aa      	b.n	8011000 <_scanf_float+0x2e0>
 80110aa:	f015 0504 	ands.w	r5, r5, #4
 80110ae:	d1b8      	bne.n	8011022 <_scanf_float+0x302>
 80110b0:	681f      	ldr	r7, [r3, #0]
 80110b2:	ee10 2a10 	vmov	r2, s0
 80110b6:	464b      	mov	r3, r9
 80110b8:	ee10 0a10 	vmov	r0, s0
 80110bc:	4649      	mov	r1, r9
 80110be:	f7ef fd35 	bl	8000b2c <__aeabi_dcmpun>
 80110c2:	b128      	cbz	r0, 80110d0 <_scanf_float+0x3b0>
 80110c4:	4628      	mov	r0, r5
 80110c6:	f000 f81d 	bl	8011104 <nanf>
 80110ca:	ed87 0a00 	vstr	s0, [r7]
 80110ce:	e7ab      	b.n	8011028 <_scanf_float+0x308>
 80110d0:	4640      	mov	r0, r8
 80110d2:	4649      	mov	r1, r9
 80110d4:	f7ef fd88 	bl	8000be8 <__aeabi_d2f>
 80110d8:	6038      	str	r0, [r7, #0]
 80110da:	e7a5      	b.n	8011028 <_scanf_float+0x308>
 80110dc:	2600      	movs	r6, #0
 80110de:	e666      	b.n	8010dae <_scanf_float+0x8e>
 80110e0:	08015d3c 	.word	0x08015d3c

080110e4 <_sbrk_r>:
 80110e4:	b538      	push	{r3, r4, r5, lr}
 80110e6:	4c06      	ldr	r4, [pc, #24]	; (8011100 <_sbrk_r+0x1c>)
 80110e8:	2300      	movs	r3, #0
 80110ea:	4605      	mov	r5, r0
 80110ec:	4608      	mov	r0, r1
 80110ee:	6023      	str	r3, [r4, #0]
 80110f0:	f004 fbd2 	bl	8015898 <_sbrk>
 80110f4:	1c43      	adds	r3, r0, #1
 80110f6:	d102      	bne.n	80110fe <_sbrk_r+0x1a>
 80110f8:	6823      	ldr	r3, [r4, #0]
 80110fa:	b103      	cbz	r3, 80110fe <_sbrk_r+0x1a>
 80110fc:	602b      	str	r3, [r5, #0]
 80110fe:	bd38      	pop	{r3, r4, r5, pc}
 8011100:	20004644 	.word	0x20004644

08011104 <nanf>:
 8011104:	ed9f 0a01 	vldr	s0, [pc, #4]	; 801110c <nanf+0x8>
 8011108:	4770      	bx	lr
 801110a:	bf00      	nop
 801110c:	7fc00000 	.word	0x7fc00000

08011110 <siprintf>:
 8011110:	b40e      	push	{r1, r2, r3}
 8011112:	b500      	push	{lr}
 8011114:	b09c      	sub	sp, #112	; 0x70
 8011116:	ab1d      	add	r3, sp, #116	; 0x74
 8011118:	9002      	str	r0, [sp, #8]
 801111a:	9006      	str	r0, [sp, #24]
 801111c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8011120:	4809      	ldr	r0, [pc, #36]	; (8011148 <siprintf+0x38>)
 8011122:	9107      	str	r1, [sp, #28]
 8011124:	9104      	str	r1, [sp, #16]
 8011126:	4909      	ldr	r1, [pc, #36]	; (801114c <siprintf+0x3c>)
 8011128:	f853 2b04 	ldr.w	r2, [r3], #4
 801112c:	9105      	str	r1, [sp, #20]
 801112e:	6800      	ldr	r0, [r0, #0]
 8011130:	9301      	str	r3, [sp, #4]
 8011132:	a902      	add	r1, sp, #8
 8011134:	f002 fcca 	bl	8013acc <_svfiprintf_r>
 8011138:	9b02      	ldr	r3, [sp, #8]
 801113a:	2200      	movs	r2, #0
 801113c:	701a      	strb	r2, [r3, #0]
 801113e:	b01c      	add	sp, #112	; 0x70
 8011140:	f85d eb04 	ldr.w	lr, [sp], #4
 8011144:	b003      	add	sp, #12
 8011146:	4770      	bx	lr
 8011148:	20000180 	.word	0x20000180
 801114c:	ffff0208 	.word	0xffff0208

08011150 <strncmp>:
 8011150:	b510      	push	{r4, lr}
 8011152:	b16a      	cbz	r2, 8011170 <strncmp+0x20>
 8011154:	3901      	subs	r1, #1
 8011156:	1884      	adds	r4, r0, r2
 8011158:	f810 3b01 	ldrb.w	r3, [r0], #1
 801115c:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8011160:	4293      	cmp	r3, r2
 8011162:	d103      	bne.n	801116c <strncmp+0x1c>
 8011164:	42a0      	cmp	r0, r4
 8011166:	d001      	beq.n	801116c <strncmp+0x1c>
 8011168:	2b00      	cmp	r3, #0
 801116a:	d1f5      	bne.n	8011158 <strncmp+0x8>
 801116c:	1a98      	subs	r0, r3, r2
 801116e:	bd10      	pop	{r4, pc}
 8011170:	4610      	mov	r0, r2
 8011172:	e7fc      	b.n	801116e <strncmp+0x1e>

08011174 <sulp>:
 8011174:	b570      	push	{r4, r5, r6, lr}
 8011176:	4604      	mov	r4, r0
 8011178:	460d      	mov	r5, r1
 801117a:	ec45 4b10 	vmov	d0, r4, r5
 801117e:	4616      	mov	r6, r2
 8011180:	f002 fb08 	bl	8013794 <__ulp>
 8011184:	ec51 0b10 	vmov	r0, r1, d0
 8011188:	b17e      	cbz	r6, 80111aa <sulp+0x36>
 801118a:	f3c5 530a 	ubfx	r3, r5, #20, #11
 801118e:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8011192:	2b00      	cmp	r3, #0
 8011194:	dd09      	ble.n	80111aa <sulp+0x36>
 8011196:	051b      	lsls	r3, r3, #20
 8011198:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 801119c:	2400      	movs	r4, #0
 801119e:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 80111a2:	4622      	mov	r2, r4
 80111a4:	462b      	mov	r3, r5
 80111a6:	f7ef fa27 	bl	80005f8 <__aeabi_dmul>
 80111aa:	bd70      	pop	{r4, r5, r6, pc}
 80111ac:	0000      	movs	r0, r0
	...

080111b0 <_strtod_l>:
 80111b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80111b4:	461f      	mov	r7, r3
 80111b6:	b0a1      	sub	sp, #132	; 0x84
 80111b8:	2300      	movs	r3, #0
 80111ba:	4681      	mov	r9, r0
 80111bc:	4638      	mov	r0, r7
 80111be:	460e      	mov	r6, r1
 80111c0:	9217      	str	r2, [sp, #92]	; 0x5c
 80111c2:	931c      	str	r3, [sp, #112]	; 0x70
 80111c4:	f001 fff5 	bl	80131b2 <__localeconv_l>
 80111c8:	4680      	mov	r8, r0
 80111ca:	6800      	ldr	r0, [r0, #0]
 80111cc:	f7ef f800 	bl	80001d0 <strlen>
 80111d0:	f04f 0a00 	mov.w	sl, #0
 80111d4:	4604      	mov	r4, r0
 80111d6:	f04f 0b00 	mov.w	fp, #0
 80111da:	961b      	str	r6, [sp, #108]	; 0x6c
 80111dc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80111de:	781a      	ldrb	r2, [r3, #0]
 80111e0:	2a0d      	cmp	r2, #13
 80111e2:	d832      	bhi.n	801124a <_strtod_l+0x9a>
 80111e4:	2a09      	cmp	r2, #9
 80111e6:	d236      	bcs.n	8011256 <_strtod_l+0xa6>
 80111e8:	2a00      	cmp	r2, #0
 80111ea:	d03e      	beq.n	801126a <_strtod_l+0xba>
 80111ec:	2300      	movs	r3, #0
 80111ee:	930d      	str	r3, [sp, #52]	; 0x34
 80111f0:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 80111f2:	782b      	ldrb	r3, [r5, #0]
 80111f4:	2b30      	cmp	r3, #48	; 0x30
 80111f6:	f040 80ac 	bne.w	8011352 <_strtod_l+0x1a2>
 80111fa:	786b      	ldrb	r3, [r5, #1]
 80111fc:	2b58      	cmp	r3, #88	; 0x58
 80111fe:	d001      	beq.n	8011204 <_strtod_l+0x54>
 8011200:	2b78      	cmp	r3, #120	; 0x78
 8011202:	d167      	bne.n	80112d4 <_strtod_l+0x124>
 8011204:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011206:	9301      	str	r3, [sp, #4]
 8011208:	ab1c      	add	r3, sp, #112	; 0x70
 801120a:	9300      	str	r3, [sp, #0]
 801120c:	9702      	str	r7, [sp, #8]
 801120e:	ab1d      	add	r3, sp, #116	; 0x74
 8011210:	4a88      	ldr	r2, [pc, #544]	; (8011434 <_strtod_l+0x284>)
 8011212:	a91b      	add	r1, sp, #108	; 0x6c
 8011214:	4648      	mov	r0, r9
 8011216:	f001 fcf2 	bl	8012bfe <__gethex>
 801121a:	f010 0407 	ands.w	r4, r0, #7
 801121e:	4606      	mov	r6, r0
 8011220:	d005      	beq.n	801122e <_strtod_l+0x7e>
 8011222:	2c06      	cmp	r4, #6
 8011224:	d12b      	bne.n	801127e <_strtod_l+0xce>
 8011226:	3501      	adds	r5, #1
 8011228:	2300      	movs	r3, #0
 801122a:	951b      	str	r5, [sp, #108]	; 0x6c
 801122c:	930d      	str	r3, [sp, #52]	; 0x34
 801122e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8011230:	2b00      	cmp	r3, #0
 8011232:	f040 859a 	bne.w	8011d6a <_strtod_l+0xbba>
 8011236:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011238:	b1e3      	cbz	r3, 8011274 <_strtod_l+0xc4>
 801123a:	4652      	mov	r2, sl
 801123c:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8011240:	ec43 2b10 	vmov	d0, r2, r3
 8011244:	b021      	add	sp, #132	; 0x84
 8011246:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801124a:	2a2b      	cmp	r2, #43	; 0x2b
 801124c:	d015      	beq.n	801127a <_strtod_l+0xca>
 801124e:	2a2d      	cmp	r2, #45	; 0x2d
 8011250:	d004      	beq.n	801125c <_strtod_l+0xac>
 8011252:	2a20      	cmp	r2, #32
 8011254:	d1ca      	bne.n	80111ec <_strtod_l+0x3c>
 8011256:	3301      	adds	r3, #1
 8011258:	931b      	str	r3, [sp, #108]	; 0x6c
 801125a:	e7bf      	b.n	80111dc <_strtod_l+0x2c>
 801125c:	2201      	movs	r2, #1
 801125e:	920d      	str	r2, [sp, #52]	; 0x34
 8011260:	1c5a      	adds	r2, r3, #1
 8011262:	921b      	str	r2, [sp, #108]	; 0x6c
 8011264:	785b      	ldrb	r3, [r3, #1]
 8011266:	2b00      	cmp	r3, #0
 8011268:	d1c2      	bne.n	80111f0 <_strtod_l+0x40>
 801126a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801126c:	961b      	str	r6, [sp, #108]	; 0x6c
 801126e:	2b00      	cmp	r3, #0
 8011270:	f040 8579 	bne.w	8011d66 <_strtod_l+0xbb6>
 8011274:	4652      	mov	r2, sl
 8011276:	465b      	mov	r3, fp
 8011278:	e7e2      	b.n	8011240 <_strtod_l+0x90>
 801127a:	2200      	movs	r2, #0
 801127c:	e7ef      	b.n	801125e <_strtod_l+0xae>
 801127e:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8011280:	b13a      	cbz	r2, 8011292 <_strtod_l+0xe2>
 8011282:	2135      	movs	r1, #53	; 0x35
 8011284:	a81e      	add	r0, sp, #120	; 0x78
 8011286:	f002 fb7d 	bl	8013984 <__copybits>
 801128a:	991c      	ldr	r1, [sp, #112]	; 0x70
 801128c:	4648      	mov	r0, r9
 801128e:	f001 ffe9 	bl	8013264 <_Bfree>
 8011292:	3c01      	subs	r4, #1
 8011294:	2c04      	cmp	r4, #4
 8011296:	d806      	bhi.n	80112a6 <_strtod_l+0xf6>
 8011298:	e8df f004 	tbb	[pc, r4]
 801129c:	1714030a 	.word	0x1714030a
 80112a0:	0a          	.byte	0x0a
 80112a1:	00          	.byte	0x00
 80112a2:	e9dd ab1e 	ldrd	sl, fp, [sp, #120]	; 0x78
 80112a6:	0730      	lsls	r0, r6, #28
 80112a8:	d5c1      	bpl.n	801122e <_strtod_l+0x7e>
 80112aa:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 80112ae:	e7be      	b.n	801122e <_strtod_l+0x7e>
 80112b0:	e9dd a31e 	ldrd	sl, r3, [sp, #120]	; 0x78
 80112b4:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 80112b6:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80112ba:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80112be:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 80112c2:	e7f0      	b.n	80112a6 <_strtod_l+0xf6>
 80112c4:	f8df b170 	ldr.w	fp, [pc, #368]	; 8011438 <_strtod_l+0x288>
 80112c8:	e7ed      	b.n	80112a6 <_strtod_l+0xf6>
 80112ca:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 80112ce:	f04f 3aff 	mov.w	sl, #4294967295
 80112d2:	e7e8      	b.n	80112a6 <_strtod_l+0xf6>
 80112d4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80112d6:	1c5a      	adds	r2, r3, #1
 80112d8:	921b      	str	r2, [sp, #108]	; 0x6c
 80112da:	785b      	ldrb	r3, [r3, #1]
 80112dc:	2b30      	cmp	r3, #48	; 0x30
 80112de:	d0f9      	beq.n	80112d4 <_strtod_l+0x124>
 80112e0:	2b00      	cmp	r3, #0
 80112e2:	d0a4      	beq.n	801122e <_strtod_l+0x7e>
 80112e4:	2301      	movs	r3, #1
 80112e6:	2500      	movs	r5, #0
 80112e8:	9306      	str	r3, [sp, #24]
 80112ea:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80112ec:	9308      	str	r3, [sp, #32]
 80112ee:	9507      	str	r5, [sp, #28]
 80112f0:	9505      	str	r5, [sp, #20]
 80112f2:	220a      	movs	r2, #10
 80112f4:	981b      	ldr	r0, [sp, #108]	; 0x6c
 80112f6:	7807      	ldrb	r7, [r0, #0]
 80112f8:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 80112fc:	b2d9      	uxtb	r1, r3
 80112fe:	2909      	cmp	r1, #9
 8011300:	d929      	bls.n	8011356 <_strtod_l+0x1a6>
 8011302:	4622      	mov	r2, r4
 8011304:	f8d8 1000 	ldr.w	r1, [r8]
 8011308:	f7ff ff22 	bl	8011150 <strncmp>
 801130c:	2800      	cmp	r0, #0
 801130e:	d031      	beq.n	8011374 <_strtod_l+0x1c4>
 8011310:	2000      	movs	r0, #0
 8011312:	9c05      	ldr	r4, [sp, #20]
 8011314:	9004      	str	r0, [sp, #16]
 8011316:	463b      	mov	r3, r7
 8011318:	4602      	mov	r2, r0
 801131a:	2b65      	cmp	r3, #101	; 0x65
 801131c:	d001      	beq.n	8011322 <_strtod_l+0x172>
 801131e:	2b45      	cmp	r3, #69	; 0x45
 8011320:	d114      	bne.n	801134c <_strtod_l+0x19c>
 8011322:	b924      	cbnz	r4, 801132e <_strtod_l+0x17e>
 8011324:	b910      	cbnz	r0, 801132c <_strtod_l+0x17c>
 8011326:	9b06      	ldr	r3, [sp, #24]
 8011328:	2b00      	cmp	r3, #0
 801132a:	d09e      	beq.n	801126a <_strtod_l+0xba>
 801132c:	2400      	movs	r4, #0
 801132e:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 8011330:	1c73      	adds	r3, r6, #1
 8011332:	931b      	str	r3, [sp, #108]	; 0x6c
 8011334:	7873      	ldrb	r3, [r6, #1]
 8011336:	2b2b      	cmp	r3, #43	; 0x2b
 8011338:	d078      	beq.n	801142c <_strtod_l+0x27c>
 801133a:	2b2d      	cmp	r3, #45	; 0x2d
 801133c:	d070      	beq.n	8011420 <_strtod_l+0x270>
 801133e:	f04f 0c00 	mov.w	ip, #0
 8011342:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 8011346:	2f09      	cmp	r7, #9
 8011348:	d97c      	bls.n	8011444 <_strtod_l+0x294>
 801134a:	961b      	str	r6, [sp, #108]	; 0x6c
 801134c:	f04f 0e00 	mov.w	lr, #0
 8011350:	e09a      	b.n	8011488 <_strtod_l+0x2d8>
 8011352:	2300      	movs	r3, #0
 8011354:	e7c7      	b.n	80112e6 <_strtod_l+0x136>
 8011356:	9905      	ldr	r1, [sp, #20]
 8011358:	2908      	cmp	r1, #8
 801135a:	bfdd      	ittte	le
 801135c:	9907      	ldrle	r1, [sp, #28]
 801135e:	fb02 3301 	mlale	r3, r2, r1, r3
 8011362:	9307      	strle	r3, [sp, #28]
 8011364:	fb02 3505 	mlagt	r5, r2, r5, r3
 8011368:	9b05      	ldr	r3, [sp, #20]
 801136a:	3001      	adds	r0, #1
 801136c:	3301      	adds	r3, #1
 801136e:	9305      	str	r3, [sp, #20]
 8011370:	901b      	str	r0, [sp, #108]	; 0x6c
 8011372:	e7bf      	b.n	80112f4 <_strtod_l+0x144>
 8011374:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8011376:	191a      	adds	r2, r3, r4
 8011378:	921b      	str	r2, [sp, #108]	; 0x6c
 801137a:	9a05      	ldr	r2, [sp, #20]
 801137c:	5d1b      	ldrb	r3, [r3, r4]
 801137e:	2a00      	cmp	r2, #0
 8011380:	d037      	beq.n	80113f2 <_strtod_l+0x242>
 8011382:	9c05      	ldr	r4, [sp, #20]
 8011384:	4602      	mov	r2, r0
 8011386:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 801138a:	2909      	cmp	r1, #9
 801138c:	d913      	bls.n	80113b6 <_strtod_l+0x206>
 801138e:	2101      	movs	r1, #1
 8011390:	9104      	str	r1, [sp, #16]
 8011392:	e7c2      	b.n	801131a <_strtod_l+0x16a>
 8011394:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8011396:	1c5a      	adds	r2, r3, #1
 8011398:	921b      	str	r2, [sp, #108]	; 0x6c
 801139a:	785b      	ldrb	r3, [r3, #1]
 801139c:	3001      	adds	r0, #1
 801139e:	2b30      	cmp	r3, #48	; 0x30
 80113a0:	d0f8      	beq.n	8011394 <_strtod_l+0x1e4>
 80113a2:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 80113a6:	2a08      	cmp	r2, #8
 80113a8:	f200 84e4 	bhi.w	8011d74 <_strtod_l+0xbc4>
 80113ac:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 80113ae:	9208      	str	r2, [sp, #32]
 80113b0:	4602      	mov	r2, r0
 80113b2:	2000      	movs	r0, #0
 80113b4:	4604      	mov	r4, r0
 80113b6:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 80113ba:	f100 0101 	add.w	r1, r0, #1
 80113be:	d012      	beq.n	80113e6 <_strtod_l+0x236>
 80113c0:	440a      	add	r2, r1
 80113c2:	eb00 0c04 	add.w	ip, r0, r4
 80113c6:	4621      	mov	r1, r4
 80113c8:	270a      	movs	r7, #10
 80113ca:	458c      	cmp	ip, r1
 80113cc:	d113      	bne.n	80113f6 <_strtod_l+0x246>
 80113ce:	1821      	adds	r1, r4, r0
 80113d0:	2908      	cmp	r1, #8
 80113d2:	f104 0401 	add.w	r4, r4, #1
 80113d6:	4404      	add	r4, r0
 80113d8:	dc19      	bgt.n	801140e <_strtod_l+0x25e>
 80113da:	9b07      	ldr	r3, [sp, #28]
 80113dc:	210a      	movs	r1, #10
 80113de:	fb01 e303 	mla	r3, r1, r3, lr
 80113e2:	9307      	str	r3, [sp, #28]
 80113e4:	2100      	movs	r1, #0
 80113e6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80113e8:	1c58      	adds	r0, r3, #1
 80113ea:	901b      	str	r0, [sp, #108]	; 0x6c
 80113ec:	785b      	ldrb	r3, [r3, #1]
 80113ee:	4608      	mov	r0, r1
 80113f0:	e7c9      	b.n	8011386 <_strtod_l+0x1d6>
 80113f2:	9805      	ldr	r0, [sp, #20]
 80113f4:	e7d3      	b.n	801139e <_strtod_l+0x1ee>
 80113f6:	2908      	cmp	r1, #8
 80113f8:	f101 0101 	add.w	r1, r1, #1
 80113fc:	dc03      	bgt.n	8011406 <_strtod_l+0x256>
 80113fe:	9b07      	ldr	r3, [sp, #28]
 8011400:	437b      	muls	r3, r7
 8011402:	9307      	str	r3, [sp, #28]
 8011404:	e7e1      	b.n	80113ca <_strtod_l+0x21a>
 8011406:	2910      	cmp	r1, #16
 8011408:	bfd8      	it	le
 801140a:	437d      	mulle	r5, r7
 801140c:	e7dd      	b.n	80113ca <_strtod_l+0x21a>
 801140e:	2c10      	cmp	r4, #16
 8011410:	bfdc      	itt	le
 8011412:	210a      	movle	r1, #10
 8011414:	fb01 e505 	mlale	r5, r1, r5, lr
 8011418:	e7e4      	b.n	80113e4 <_strtod_l+0x234>
 801141a:	2301      	movs	r3, #1
 801141c:	9304      	str	r3, [sp, #16]
 801141e:	e781      	b.n	8011324 <_strtod_l+0x174>
 8011420:	f04f 0c01 	mov.w	ip, #1
 8011424:	1cb3      	adds	r3, r6, #2
 8011426:	931b      	str	r3, [sp, #108]	; 0x6c
 8011428:	78b3      	ldrb	r3, [r6, #2]
 801142a:	e78a      	b.n	8011342 <_strtod_l+0x192>
 801142c:	f04f 0c00 	mov.w	ip, #0
 8011430:	e7f8      	b.n	8011424 <_strtod_l+0x274>
 8011432:	bf00      	nop
 8011434:	08015d44 	.word	0x08015d44
 8011438:	7ff00000 	.word	0x7ff00000
 801143c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801143e:	1c5f      	adds	r7, r3, #1
 8011440:	971b      	str	r7, [sp, #108]	; 0x6c
 8011442:	785b      	ldrb	r3, [r3, #1]
 8011444:	2b30      	cmp	r3, #48	; 0x30
 8011446:	d0f9      	beq.n	801143c <_strtod_l+0x28c>
 8011448:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 801144c:	2f08      	cmp	r7, #8
 801144e:	f63f af7d 	bhi.w	801134c <_strtod_l+0x19c>
 8011452:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 8011456:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8011458:	930a      	str	r3, [sp, #40]	; 0x28
 801145a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801145c:	1c5f      	adds	r7, r3, #1
 801145e:	971b      	str	r7, [sp, #108]	; 0x6c
 8011460:	785b      	ldrb	r3, [r3, #1]
 8011462:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 8011466:	f1b8 0f09 	cmp.w	r8, #9
 801146a:	d937      	bls.n	80114dc <_strtod_l+0x32c>
 801146c:	990a      	ldr	r1, [sp, #40]	; 0x28
 801146e:	1a7f      	subs	r7, r7, r1
 8011470:	2f08      	cmp	r7, #8
 8011472:	f644 671f 	movw	r7, #19999	; 0x4e1f
 8011476:	dc37      	bgt.n	80114e8 <_strtod_l+0x338>
 8011478:	45be      	cmp	lr, r7
 801147a:	bfa8      	it	ge
 801147c:	46be      	movge	lr, r7
 801147e:	f1bc 0f00 	cmp.w	ip, #0
 8011482:	d001      	beq.n	8011488 <_strtod_l+0x2d8>
 8011484:	f1ce 0e00 	rsb	lr, lr, #0
 8011488:	2c00      	cmp	r4, #0
 801148a:	d151      	bne.n	8011530 <_strtod_l+0x380>
 801148c:	2800      	cmp	r0, #0
 801148e:	f47f aece 	bne.w	801122e <_strtod_l+0x7e>
 8011492:	9a06      	ldr	r2, [sp, #24]
 8011494:	2a00      	cmp	r2, #0
 8011496:	f47f aeca 	bne.w	801122e <_strtod_l+0x7e>
 801149a:	9a04      	ldr	r2, [sp, #16]
 801149c:	2a00      	cmp	r2, #0
 801149e:	f47f aee4 	bne.w	801126a <_strtod_l+0xba>
 80114a2:	2b4e      	cmp	r3, #78	; 0x4e
 80114a4:	d027      	beq.n	80114f6 <_strtod_l+0x346>
 80114a6:	dc21      	bgt.n	80114ec <_strtod_l+0x33c>
 80114a8:	2b49      	cmp	r3, #73	; 0x49
 80114aa:	f47f aede 	bne.w	801126a <_strtod_l+0xba>
 80114ae:	49a0      	ldr	r1, [pc, #640]	; (8011730 <_strtod_l+0x580>)
 80114b0:	a81b      	add	r0, sp, #108	; 0x6c
 80114b2:	f001 fdd7 	bl	8013064 <__match>
 80114b6:	2800      	cmp	r0, #0
 80114b8:	f43f aed7 	beq.w	801126a <_strtod_l+0xba>
 80114bc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80114be:	499d      	ldr	r1, [pc, #628]	; (8011734 <_strtod_l+0x584>)
 80114c0:	3b01      	subs	r3, #1
 80114c2:	a81b      	add	r0, sp, #108	; 0x6c
 80114c4:	931b      	str	r3, [sp, #108]	; 0x6c
 80114c6:	f001 fdcd 	bl	8013064 <__match>
 80114ca:	b910      	cbnz	r0, 80114d2 <_strtod_l+0x322>
 80114cc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80114ce:	3301      	adds	r3, #1
 80114d0:	931b      	str	r3, [sp, #108]	; 0x6c
 80114d2:	f8df b274 	ldr.w	fp, [pc, #628]	; 8011748 <_strtod_l+0x598>
 80114d6:	f04f 0a00 	mov.w	sl, #0
 80114da:	e6a8      	b.n	801122e <_strtod_l+0x7e>
 80114dc:	210a      	movs	r1, #10
 80114de:	fb01 3e0e 	mla	lr, r1, lr, r3
 80114e2:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 80114e6:	e7b8      	b.n	801145a <_strtod_l+0x2aa>
 80114e8:	46be      	mov	lr, r7
 80114ea:	e7c8      	b.n	801147e <_strtod_l+0x2ce>
 80114ec:	2b69      	cmp	r3, #105	; 0x69
 80114ee:	d0de      	beq.n	80114ae <_strtod_l+0x2fe>
 80114f0:	2b6e      	cmp	r3, #110	; 0x6e
 80114f2:	f47f aeba 	bne.w	801126a <_strtod_l+0xba>
 80114f6:	4990      	ldr	r1, [pc, #576]	; (8011738 <_strtod_l+0x588>)
 80114f8:	a81b      	add	r0, sp, #108	; 0x6c
 80114fa:	f001 fdb3 	bl	8013064 <__match>
 80114fe:	2800      	cmp	r0, #0
 8011500:	f43f aeb3 	beq.w	801126a <_strtod_l+0xba>
 8011504:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8011506:	781b      	ldrb	r3, [r3, #0]
 8011508:	2b28      	cmp	r3, #40	; 0x28
 801150a:	d10e      	bne.n	801152a <_strtod_l+0x37a>
 801150c:	aa1e      	add	r2, sp, #120	; 0x78
 801150e:	498b      	ldr	r1, [pc, #556]	; (801173c <_strtod_l+0x58c>)
 8011510:	a81b      	add	r0, sp, #108	; 0x6c
 8011512:	f001 fdbb 	bl	801308c <__hexnan>
 8011516:	2805      	cmp	r0, #5
 8011518:	d107      	bne.n	801152a <_strtod_l+0x37a>
 801151a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801151c:	f8dd a078 	ldr.w	sl, [sp, #120]	; 0x78
 8011520:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8011524:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8011528:	e681      	b.n	801122e <_strtod_l+0x7e>
 801152a:	f8df b224 	ldr.w	fp, [pc, #548]	; 8011750 <_strtod_l+0x5a0>
 801152e:	e7d2      	b.n	80114d6 <_strtod_l+0x326>
 8011530:	ebae 0302 	sub.w	r3, lr, r2
 8011534:	9306      	str	r3, [sp, #24]
 8011536:	9b05      	ldr	r3, [sp, #20]
 8011538:	9807      	ldr	r0, [sp, #28]
 801153a:	2b00      	cmp	r3, #0
 801153c:	bf08      	it	eq
 801153e:	4623      	moveq	r3, r4
 8011540:	2c10      	cmp	r4, #16
 8011542:	9305      	str	r3, [sp, #20]
 8011544:	46a0      	mov	r8, r4
 8011546:	bfa8      	it	ge
 8011548:	f04f 0810 	movge.w	r8, #16
 801154c:	f7ee ffda 	bl	8000504 <__aeabi_ui2d>
 8011550:	2c09      	cmp	r4, #9
 8011552:	4682      	mov	sl, r0
 8011554:	468b      	mov	fp, r1
 8011556:	dc13      	bgt.n	8011580 <_strtod_l+0x3d0>
 8011558:	9b06      	ldr	r3, [sp, #24]
 801155a:	2b00      	cmp	r3, #0
 801155c:	f43f ae67 	beq.w	801122e <_strtod_l+0x7e>
 8011560:	9b06      	ldr	r3, [sp, #24]
 8011562:	dd7a      	ble.n	801165a <_strtod_l+0x4aa>
 8011564:	2b16      	cmp	r3, #22
 8011566:	dc61      	bgt.n	801162c <_strtod_l+0x47c>
 8011568:	4a75      	ldr	r2, [pc, #468]	; (8011740 <_strtod_l+0x590>)
 801156a:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 801156e:	e9de 0100 	ldrd	r0, r1, [lr]
 8011572:	4652      	mov	r2, sl
 8011574:	465b      	mov	r3, fp
 8011576:	f7ef f83f 	bl	80005f8 <__aeabi_dmul>
 801157a:	4682      	mov	sl, r0
 801157c:	468b      	mov	fp, r1
 801157e:	e656      	b.n	801122e <_strtod_l+0x7e>
 8011580:	4b6f      	ldr	r3, [pc, #444]	; (8011740 <_strtod_l+0x590>)
 8011582:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8011586:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 801158a:	f7ef f835 	bl	80005f8 <__aeabi_dmul>
 801158e:	4606      	mov	r6, r0
 8011590:	4628      	mov	r0, r5
 8011592:	460f      	mov	r7, r1
 8011594:	f7ee ffb6 	bl	8000504 <__aeabi_ui2d>
 8011598:	4602      	mov	r2, r0
 801159a:	460b      	mov	r3, r1
 801159c:	4630      	mov	r0, r6
 801159e:	4639      	mov	r1, r7
 80115a0:	f7ee fe74 	bl	800028c <__adddf3>
 80115a4:	2c0f      	cmp	r4, #15
 80115a6:	4682      	mov	sl, r0
 80115a8:	468b      	mov	fp, r1
 80115aa:	ddd5      	ble.n	8011558 <_strtod_l+0x3a8>
 80115ac:	9b06      	ldr	r3, [sp, #24]
 80115ae:	eba4 0808 	sub.w	r8, r4, r8
 80115b2:	4498      	add	r8, r3
 80115b4:	f1b8 0f00 	cmp.w	r8, #0
 80115b8:	f340 8096 	ble.w	80116e8 <_strtod_l+0x538>
 80115bc:	f018 030f 	ands.w	r3, r8, #15
 80115c0:	d00a      	beq.n	80115d8 <_strtod_l+0x428>
 80115c2:	495f      	ldr	r1, [pc, #380]	; (8011740 <_strtod_l+0x590>)
 80115c4:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80115c8:	4652      	mov	r2, sl
 80115ca:	465b      	mov	r3, fp
 80115cc:	e9d1 0100 	ldrd	r0, r1, [r1]
 80115d0:	f7ef f812 	bl	80005f8 <__aeabi_dmul>
 80115d4:	4682      	mov	sl, r0
 80115d6:	468b      	mov	fp, r1
 80115d8:	f038 080f 	bics.w	r8, r8, #15
 80115dc:	d073      	beq.n	80116c6 <_strtod_l+0x516>
 80115de:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 80115e2:	dd47      	ble.n	8011674 <_strtod_l+0x4c4>
 80115e4:	2400      	movs	r4, #0
 80115e6:	46a0      	mov	r8, r4
 80115e8:	9407      	str	r4, [sp, #28]
 80115ea:	9405      	str	r4, [sp, #20]
 80115ec:	2322      	movs	r3, #34	; 0x22
 80115ee:	f8df b158 	ldr.w	fp, [pc, #344]	; 8011748 <_strtod_l+0x598>
 80115f2:	f8c9 3000 	str.w	r3, [r9]
 80115f6:	f04f 0a00 	mov.w	sl, #0
 80115fa:	9b07      	ldr	r3, [sp, #28]
 80115fc:	2b00      	cmp	r3, #0
 80115fe:	f43f ae16 	beq.w	801122e <_strtod_l+0x7e>
 8011602:	991c      	ldr	r1, [sp, #112]	; 0x70
 8011604:	4648      	mov	r0, r9
 8011606:	f001 fe2d 	bl	8013264 <_Bfree>
 801160a:	9905      	ldr	r1, [sp, #20]
 801160c:	4648      	mov	r0, r9
 801160e:	f001 fe29 	bl	8013264 <_Bfree>
 8011612:	4641      	mov	r1, r8
 8011614:	4648      	mov	r0, r9
 8011616:	f001 fe25 	bl	8013264 <_Bfree>
 801161a:	9907      	ldr	r1, [sp, #28]
 801161c:	4648      	mov	r0, r9
 801161e:	f001 fe21 	bl	8013264 <_Bfree>
 8011622:	4621      	mov	r1, r4
 8011624:	4648      	mov	r0, r9
 8011626:	f001 fe1d 	bl	8013264 <_Bfree>
 801162a:	e600      	b.n	801122e <_strtod_l+0x7e>
 801162c:	9a06      	ldr	r2, [sp, #24]
 801162e:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 8011632:	4293      	cmp	r3, r2
 8011634:	dbba      	blt.n	80115ac <_strtod_l+0x3fc>
 8011636:	4d42      	ldr	r5, [pc, #264]	; (8011740 <_strtod_l+0x590>)
 8011638:	f1c4 040f 	rsb	r4, r4, #15
 801163c:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 8011640:	4652      	mov	r2, sl
 8011642:	465b      	mov	r3, fp
 8011644:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011648:	f7ee ffd6 	bl	80005f8 <__aeabi_dmul>
 801164c:	9b06      	ldr	r3, [sp, #24]
 801164e:	1b1c      	subs	r4, r3, r4
 8011650:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 8011654:	e9d5 2300 	ldrd	r2, r3, [r5]
 8011658:	e78d      	b.n	8011576 <_strtod_l+0x3c6>
 801165a:	f113 0f16 	cmn.w	r3, #22
 801165e:	dba5      	blt.n	80115ac <_strtod_l+0x3fc>
 8011660:	4a37      	ldr	r2, [pc, #220]	; (8011740 <_strtod_l+0x590>)
 8011662:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 8011666:	e9d2 2300 	ldrd	r2, r3, [r2]
 801166a:	4650      	mov	r0, sl
 801166c:	4659      	mov	r1, fp
 801166e:	f7ef f8ed 	bl	800084c <__aeabi_ddiv>
 8011672:	e782      	b.n	801157a <_strtod_l+0x3ca>
 8011674:	2300      	movs	r3, #0
 8011676:	4e33      	ldr	r6, [pc, #204]	; (8011744 <_strtod_l+0x594>)
 8011678:	ea4f 1828 	mov.w	r8, r8, asr #4
 801167c:	4650      	mov	r0, sl
 801167e:	4659      	mov	r1, fp
 8011680:	461d      	mov	r5, r3
 8011682:	f1b8 0f01 	cmp.w	r8, #1
 8011686:	dc21      	bgt.n	80116cc <_strtod_l+0x51c>
 8011688:	b10b      	cbz	r3, 801168e <_strtod_l+0x4de>
 801168a:	4682      	mov	sl, r0
 801168c:	468b      	mov	fp, r1
 801168e:	4b2d      	ldr	r3, [pc, #180]	; (8011744 <_strtod_l+0x594>)
 8011690:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8011694:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8011698:	4652      	mov	r2, sl
 801169a:	465b      	mov	r3, fp
 801169c:	e9d5 0100 	ldrd	r0, r1, [r5]
 80116a0:	f7ee ffaa 	bl	80005f8 <__aeabi_dmul>
 80116a4:	4b28      	ldr	r3, [pc, #160]	; (8011748 <_strtod_l+0x598>)
 80116a6:	460a      	mov	r2, r1
 80116a8:	400b      	ands	r3, r1
 80116aa:	4928      	ldr	r1, [pc, #160]	; (801174c <_strtod_l+0x59c>)
 80116ac:	428b      	cmp	r3, r1
 80116ae:	4682      	mov	sl, r0
 80116b0:	d898      	bhi.n	80115e4 <_strtod_l+0x434>
 80116b2:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 80116b6:	428b      	cmp	r3, r1
 80116b8:	bf86      	itte	hi
 80116ba:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 8011754 <_strtod_l+0x5a4>
 80116be:	f04f 3aff 	movhi.w	sl, #4294967295
 80116c2:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 80116c6:	2300      	movs	r3, #0
 80116c8:	9304      	str	r3, [sp, #16]
 80116ca:	e077      	b.n	80117bc <_strtod_l+0x60c>
 80116cc:	f018 0f01 	tst.w	r8, #1
 80116d0:	d006      	beq.n	80116e0 <_strtod_l+0x530>
 80116d2:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 80116d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80116da:	f7ee ff8d 	bl	80005f8 <__aeabi_dmul>
 80116de:	2301      	movs	r3, #1
 80116e0:	3501      	adds	r5, #1
 80116e2:	ea4f 0868 	mov.w	r8, r8, asr #1
 80116e6:	e7cc      	b.n	8011682 <_strtod_l+0x4d2>
 80116e8:	d0ed      	beq.n	80116c6 <_strtod_l+0x516>
 80116ea:	f1c8 0800 	rsb	r8, r8, #0
 80116ee:	f018 020f 	ands.w	r2, r8, #15
 80116f2:	d00a      	beq.n	801170a <_strtod_l+0x55a>
 80116f4:	4b12      	ldr	r3, [pc, #72]	; (8011740 <_strtod_l+0x590>)
 80116f6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80116fa:	4650      	mov	r0, sl
 80116fc:	4659      	mov	r1, fp
 80116fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011702:	f7ef f8a3 	bl	800084c <__aeabi_ddiv>
 8011706:	4682      	mov	sl, r0
 8011708:	468b      	mov	fp, r1
 801170a:	ea5f 1828 	movs.w	r8, r8, asr #4
 801170e:	d0da      	beq.n	80116c6 <_strtod_l+0x516>
 8011710:	f1b8 0f1f 	cmp.w	r8, #31
 8011714:	dd20      	ble.n	8011758 <_strtod_l+0x5a8>
 8011716:	2400      	movs	r4, #0
 8011718:	46a0      	mov	r8, r4
 801171a:	9407      	str	r4, [sp, #28]
 801171c:	9405      	str	r4, [sp, #20]
 801171e:	2322      	movs	r3, #34	; 0x22
 8011720:	f04f 0a00 	mov.w	sl, #0
 8011724:	f04f 0b00 	mov.w	fp, #0
 8011728:	f8c9 3000 	str.w	r3, [r9]
 801172c:	e765      	b.n	80115fa <_strtod_l+0x44a>
 801172e:	bf00      	nop
 8011730:	08015d0d 	.word	0x08015d0d
 8011734:	08015d9b 	.word	0x08015d9b
 8011738:	08015d15 	.word	0x08015d15
 801173c:	08015d58 	.word	0x08015d58
 8011740:	08015dd8 	.word	0x08015dd8
 8011744:	08015db0 	.word	0x08015db0
 8011748:	7ff00000 	.word	0x7ff00000
 801174c:	7ca00000 	.word	0x7ca00000
 8011750:	fff80000 	.word	0xfff80000
 8011754:	7fefffff 	.word	0x7fefffff
 8011758:	f018 0310 	ands.w	r3, r8, #16
 801175c:	bf18      	it	ne
 801175e:	236a      	movne	r3, #106	; 0x6a
 8011760:	4da0      	ldr	r5, [pc, #640]	; (80119e4 <_strtod_l+0x834>)
 8011762:	9304      	str	r3, [sp, #16]
 8011764:	4650      	mov	r0, sl
 8011766:	4659      	mov	r1, fp
 8011768:	2300      	movs	r3, #0
 801176a:	f1b8 0f00 	cmp.w	r8, #0
 801176e:	f300 810a 	bgt.w	8011986 <_strtod_l+0x7d6>
 8011772:	b10b      	cbz	r3, 8011778 <_strtod_l+0x5c8>
 8011774:	4682      	mov	sl, r0
 8011776:	468b      	mov	fp, r1
 8011778:	9b04      	ldr	r3, [sp, #16]
 801177a:	b1bb      	cbz	r3, 80117ac <_strtod_l+0x5fc>
 801177c:	f3cb 530a 	ubfx	r3, fp, #20, #11
 8011780:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8011784:	2b00      	cmp	r3, #0
 8011786:	4659      	mov	r1, fp
 8011788:	dd10      	ble.n	80117ac <_strtod_l+0x5fc>
 801178a:	2b1f      	cmp	r3, #31
 801178c:	f340 8107 	ble.w	801199e <_strtod_l+0x7ee>
 8011790:	2b34      	cmp	r3, #52	; 0x34
 8011792:	bfde      	ittt	le
 8011794:	3b20      	suble	r3, #32
 8011796:	f04f 32ff 	movle.w	r2, #4294967295
 801179a:	fa02 f303 	lslle.w	r3, r2, r3
 801179e:	f04f 0a00 	mov.w	sl, #0
 80117a2:	bfcc      	ite	gt
 80117a4:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 80117a8:	ea03 0b01 	andle.w	fp, r3, r1
 80117ac:	2200      	movs	r2, #0
 80117ae:	2300      	movs	r3, #0
 80117b0:	4650      	mov	r0, sl
 80117b2:	4659      	mov	r1, fp
 80117b4:	f7ef f988 	bl	8000ac8 <__aeabi_dcmpeq>
 80117b8:	2800      	cmp	r0, #0
 80117ba:	d1ac      	bne.n	8011716 <_strtod_l+0x566>
 80117bc:	9b07      	ldr	r3, [sp, #28]
 80117be:	9300      	str	r3, [sp, #0]
 80117c0:	9a05      	ldr	r2, [sp, #20]
 80117c2:	9908      	ldr	r1, [sp, #32]
 80117c4:	4623      	mov	r3, r4
 80117c6:	4648      	mov	r0, r9
 80117c8:	f001 fd9e 	bl	8013308 <__s2b>
 80117cc:	9007      	str	r0, [sp, #28]
 80117ce:	2800      	cmp	r0, #0
 80117d0:	f43f af08 	beq.w	80115e4 <_strtod_l+0x434>
 80117d4:	9a06      	ldr	r2, [sp, #24]
 80117d6:	9b06      	ldr	r3, [sp, #24]
 80117d8:	2a00      	cmp	r2, #0
 80117da:	f1c3 0300 	rsb	r3, r3, #0
 80117de:	bfa8      	it	ge
 80117e0:	2300      	movge	r3, #0
 80117e2:	930e      	str	r3, [sp, #56]	; 0x38
 80117e4:	2400      	movs	r4, #0
 80117e6:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 80117ea:	9316      	str	r3, [sp, #88]	; 0x58
 80117ec:	46a0      	mov	r8, r4
 80117ee:	9b07      	ldr	r3, [sp, #28]
 80117f0:	4648      	mov	r0, r9
 80117f2:	6859      	ldr	r1, [r3, #4]
 80117f4:	f001 fd02 	bl	80131fc <_Balloc>
 80117f8:	9005      	str	r0, [sp, #20]
 80117fa:	2800      	cmp	r0, #0
 80117fc:	f43f aef6 	beq.w	80115ec <_strtod_l+0x43c>
 8011800:	9b07      	ldr	r3, [sp, #28]
 8011802:	691a      	ldr	r2, [r3, #16]
 8011804:	3202      	adds	r2, #2
 8011806:	f103 010c 	add.w	r1, r3, #12
 801180a:	0092      	lsls	r2, r2, #2
 801180c:	300c      	adds	r0, #12
 801180e:	f7fe fd6f 	bl	80102f0 <memcpy>
 8011812:	aa1e      	add	r2, sp, #120	; 0x78
 8011814:	a91d      	add	r1, sp, #116	; 0x74
 8011816:	ec4b ab10 	vmov	d0, sl, fp
 801181a:	4648      	mov	r0, r9
 801181c:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8011820:	f002 f82e 	bl	8013880 <__d2b>
 8011824:	901c      	str	r0, [sp, #112]	; 0x70
 8011826:	2800      	cmp	r0, #0
 8011828:	f43f aee0 	beq.w	80115ec <_strtod_l+0x43c>
 801182c:	2101      	movs	r1, #1
 801182e:	4648      	mov	r0, r9
 8011830:	f001 fdf6 	bl	8013420 <__i2b>
 8011834:	4680      	mov	r8, r0
 8011836:	2800      	cmp	r0, #0
 8011838:	f43f aed8 	beq.w	80115ec <_strtod_l+0x43c>
 801183c:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 801183e:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8011840:	2e00      	cmp	r6, #0
 8011842:	bfab      	itete	ge
 8011844:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 8011846:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 8011848:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 801184a:	9f0e      	ldrlt	r7, [sp, #56]	; 0x38
 801184c:	bfac      	ite	ge
 801184e:	18f7      	addge	r7, r6, r3
 8011850:	1b9d      	sublt	r5, r3, r6
 8011852:	9b04      	ldr	r3, [sp, #16]
 8011854:	1af6      	subs	r6, r6, r3
 8011856:	4416      	add	r6, r2
 8011858:	4b63      	ldr	r3, [pc, #396]	; (80119e8 <_strtod_l+0x838>)
 801185a:	3e01      	subs	r6, #1
 801185c:	429e      	cmp	r6, r3
 801185e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8011862:	f280 80af 	bge.w	80119c4 <_strtod_l+0x814>
 8011866:	1b9b      	subs	r3, r3, r6
 8011868:	2b1f      	cmp	r3, #31
 801186a:	eba2 0203 	sub.w	r2, r2, r3
 801186e:	f04f 0101 	mov.w	r1, #1
 8011872:	f300 809b 	bgt.w	80119ac <_strtod_l+0x7fc>
 8011876:	fa01 f303 	lsl.w	r3, r1, r3
 801187a:	930f      	str	r3, [sp, #60]	; 0x3c
 801187c:	2300      	movs	r3, #0
 801187e:	930a      	str	r3, [sp, #40]	; 0x28
 8011880:	18be      	adds	r6, r7, r2
 8011882:	9b04      	ldr	r3, [sp, #16]
 8011884:	42b7      	cmp	r7, r6
 8011886:	4415      	add	r5, r2
 8011888:	441d      	add	r5, r3
 801188a:	463b      	mov	r3, r7
 801188c:	bfa8      	it	ge
 801188e:	4633      	movge	r3, r6
 8011890:	42ab      	cmp	r3, r5
 8011892:	bfa8      	it	ge
 8011894:	462b      	movge	r3, r5
 8011896:	2b00      	cmp	r3, #0
 8011898:	bfc2      	ittt	gt
 801189a:	1af6      	subgt	r6, r6, r3
 801189c:	1aed      	subgt	r5, r5, r3
 801189e:	1aff      	subgt	r7, r7, r3
 80118a0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80118a2:	b1bb      	cbz	r3, 80118d4 <_strtod_l+0x724>
 80118a4:	4641      	mov	r1, r8
 80118a6:	461a      	mov	r2, r3
 80118a8:	4648      	mov	r0, r9
 80118aa:	f001 fe59 	bl	8013560 <__pow5mult>
 80118ae:	4680      	mov	r8, r0
 80118b0:	2800      	cmp	r0, #0
 80118b2:	f43f ae9b 	beq.w	80115ec <_strtod_l+0x43c>
 80118b6:	4601      	mov	r1, r0
 80118b8:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80118ba:	4648      	mov	r0, r9
 80118bc:	f001 fdb9 	bl	8013432 <__multiply>
 80118c0:	900c      	str	r0, [sp, #48]	; 0x30
 80118c2:	2800      	cmp	r0, #0
 80118c4:	f43f ae92 	beq.w	80115ec <_strtod_l+0x43c>
 80118c8:	991c      	ldr	r1, [sp, #112]	; 0x70
 80118ca:	4648      	mov	r0, r9
 80118cc:	f001 fcca 	bl	8013264 <_Bfree>
 80118d0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80118d2:	931c      	str	r3, [sp, #112]	; 0x70
 80118d4:	2e00      	cmp	r6, #0
 80118d6:	dc7a      	bgt.n	80119ce <_strtod_l+0x81e>
 80118d8:	9b06      	ldr	r3, [sp, #24]
 80118da:	2b00      	cmp	r3, #0
 80118dc:	dd08      	ble.n	80118f0 <_strtod_l+0x740>
 80118de:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80118e0:	9905      	ldr	r1, [sp, #20]
 80118e2:	4648      	mov	r0, r9
 80118e4:	f001 fe3c 	bl	8013560 <__pow5mult>
 80118e8:	9005      	str	r0, [sp, #20]
 80118ea:	2800      	cmp	r0, #0
 80118ec:	f43f ae7e 	beq.w	80115ec <_strtod_l+0x43c>
 80118f0:	2d00      	cmp	r5, #0
 80118f2:	dd08      	ble.n	8011906 <_strtod_l+0x756>
 80118f4:	462a      	mov	r2, r5
 80118f6:	9905      	ldr	r1, [sp, #20]
 80118f8:	4648      	mov	r0, r9
 80118fa:	f001 fe7f 	bl	80135fc <__lshift>
 80118fe:	9005      	str	r0, [sp, #20]
 8011900:	2800      	cmp	r0, #0
 8011902:	f43f ae73 	beq.w	80115ec <_strtod_l+0x43c>
 8011906:	2f00      	cmp	r7, #0
 8011908:	dd08      	ble.n	801191c <_strtod_l+0x76c>
 801190a:	4641      	mov	r1, r8
 801190c:	463a      	mov	r2, r7
 801190e:	4648      	mov	r0, r9
 8011910:	f001 fe74 	bl	80135fc <__lshift>
 8011914:	4680      	mov	r8, r0
 8011916:	2800      	cmp	r0, #0
 8011918:	f43f ae68 	beq.w	80115ec <_strtod_l+0x43c>
 801191c:	9a05      	ldr	r2, [sp, #20]
 801191e:	991c      	ldr	r1, [sp, #112]	; 0x70
 8011920:	4648      	mov	r0, r9
 8011922:	f001 fed9 	bl	80136d8 <__mdiff>
 8011926:	4604      	mov	r4, r0
 8011928:	2800      	cmp	r0, #0
 801192a:	f43f ae5f 	beq.w	80115ec <_strtod_l+0x43c>
 801192e:	68c3      	ldr	r3, [r0, #12]
 8011930:	930c      	str	r3, [sp, #48]	; 0x30
 8011932:	2300      	movs	r3, #0
 8011934:	60c3      	str	r3, [r0, #12]
 8011936:	4641      	mov	r1, r8
 8011938:	f001 feb4 	bl	80136a4 <__mcmp>
 801193c:	2800      	cmp	r0, #0
 801193e:	da55      	bge.n	80119ec <_strtod_l+0x83c>
 8011940:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8011942:	b9e3      	cbnz	r3, 801197e <_strtod_l+0x7ce>
 8011944:	f1ba 0f00 	cmp.w	sl, #0
 8011948:	d119      	bne.n	801197e <_strtod_l+0x7ce>
 801194a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801194e:	b9b3      	cbnz	r3, 801197e <_strtod_l+0x7ce>
 8011950:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8011954:	0d1b      	lsrs	r3, r3, #20
 8011956:	051b      	lsls	r3, r3, #20
 8011958:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 801195c:	d90f      	bls.n	801197e <_strtod_l+0x7ce>
 801195e:	6963      	ldr	r3, [r4, #20]
 8011960:	b913      	cbnz	r3, 8011968 <_strtod_l+0x7b8>
 8011962:	6923      	ldr	r3, [r4, #16]
 8011964:	2b01      	cmp	r3, #1
 8011966:	dd0a      	ble.n	801197e <_strtod_l+0x7ce>
 8011968:	4621      	mov	r1, r4
 801196a:	2201      	movs	r2, #1
 801196c:	4648      	mov	r0, r9
 801196e:	f001 fe45 	bl	80135fc <__lshift>
 8011972:	4641      	mov	r1, r8
 8011974:	4604      	mov	r4, r0
 8011976:	f001 fe95 	bl	80136a4 <__mcmp>
 801197a:	2800      	cmp	r0, #0
 801197c:	dc67      	bgt.n	8011a4e <_strtod_l+0x89e>
 801197e:	9b04      	ldr	r3, [sp, #16]
 8011980:	2b00      	cmp	r3, #0
 8011982:	d171      	bne.n	8011a68 <_strtod_l+0x8b8>
 8011984:	e63d      	b.n	8011602 <_strtod_l+0x452>
 8011986:	f018 0f01 	tst.w	r8, #1
 801198a:	d004      	beq.n	8011996 <_strtod_l+0x7e6>
 801198c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8011990:	f7ee fe32 	bl	80005f8 <__aeabi_dmul>
 8011994:	2301      	movs	r3, #1
 8011996:	ea4f 0868 	mov.w	r8, r8, asr #1
 801199a:	3508      	adds	r5, #8
 801199c:	e6e5      	b.n	801176a <_strtod_l+0x5ba>
 801199e:	f04f 32ff 	mov.w	r2, #4294967295
 80119a2:	fa02 f303 	lsl.w	r3, r2, r3
 80119a6:	ea03 0a0a 	and.w	sl, r3, sl
 80119aa:	e6ff      	b.n	80117ac <_strtod_l+0x5fc>
 80119ac:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 80119b0:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 80119b4:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 80119b8:	36e2      	adds	r6, #226	; 0xe2
 80119ba:	fa01 f306 	lsl.w	r3, r1, r6
 80119be:	930a      	str	r3, [sp, #40]	; 0x28
 80119c0:	910f      	str	r1, [sp, #60]	; 0x3c
 80119c2:	e75d      	b.n	8011880 <_strtod_l+0x6d0>
 80119c4:	2300      	movs	r3, #0
 80119c6:	930a      	str	r3, [sp, #40]	; 0x28
 80119c8:	2301      	movs	r3, #1
 80119ca:	930f      	str	r3, [sp, #60]	; 0x3c
 80119cc:	e758      	b.n	8011880 <_strtod_l+0x6d0>
 80119ce:	4632      	mov	r2, r6
 80119d0:	991c      	ldr	r1, [sp, #112]	; 0x70
 80119d2:	4648      	mov	r0, r9
 80119d4:	f001 fe12 	bl	80135fc <__lshift>
 80119d8:	901c      	str	r0, [sp, #112]	; 0x70
 80119da:	2800      	cmp	r0, #0
 80119dc:	f47f af7c 	bne.w	80118d8 <_strtod_l+0x728>
 80119e0:	e604      	b.n	80115ec <_strtod_l+0x43c>
 80119e2:	bf00      	nop
 80119e4:	08015d70 	.word	0x08015d70
 80119e8:	fffffc02 	.word	0xfffffc02
 80119ec:	465d      	mov	r5, fp
 80119ee:	f040 8086 	bne.w	8011afe <_strtod_l+0x94e>
 80119f2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80119f4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80119f8:	b32a      	cbz	r2, 8011a46 <_strtod_l+0x896>
 80119fa:	4aaf      	ldr	r2, [pc, #700]	; (8011cb8 <_strtod_l+0xb08>)
 80119fc:	4293      	cmp	r3, r2
 80119fe:	d153      	bne.n	8011aa8 <_strtod_l+0x8f8>
 8011a00:	9b04      	ldr	r3, [sp, #16]
 8011a02:	4650      	mov	r0, sl
 8011a04:	b1d3      	cbz	r3, 8011a3c <_strtod_l+0x88c>
 8011a06:	4aad      	ldr	r2, [pc, #692]	; (8011cbc <_strtod_l+0xb0c>)
 8011a08:	402a      	ands	r2, r5
 8011a0a:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8011a0e:	f04f 31ff 	mov.w	r1, #4294967295
 8011a12:	d816      	bhi.n	8011a42 <_strtod_l+0x892>
 8011a14:	0d12      	lsrs	r2, r2, #20
 8011a16:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8011a1a:	fa01 f303 	lsl.w	r3, r1, r3
 8011a1e:	4298      	cmp	r0, r3
 8011a20:	d142      	bne.n	8011aa8 <_strtod_l+0x8f8>
 8011a22:	4ba7      	ldr	r3, [pc, #668]	; (8011cc0 <_strtod_l+0xb10>)
 8011a24:	429d      	cmp	r5, r3
 8011a26:	d102      	bne.n	8011a2e <_strtod_l+0x87e>
 8011a28:	3001      	adds	r0, #1
 8011a2a:	f43f addf 	beq.w	80115ec <_strtod_l+0x43c>
 8011a2e:	4ba3      	ldr	r3, [pc, #652]	; (8011cbc <_strtod_l+0xb0c>)
 8011a30:	402b      	ands	r3, r5
 8011a32:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8011a36:	f04f 0a00 	mov.w	sl, #0
 8011a3a:	e7a0      	b.n	801197e <_strtod_l+0x7ce>
 8011a3c:	f04f 33ff 	mov.w	r3, #4294967295
 8011a40:	e7ed      	b.n	8011a1e <_strtod_l+0x86e>
 8011a42:	460b      	mov	r3, r1
 8011a44:	e7eb      	b.n	8011a1e <_strtod_l+0x86e>
 8011a46:	bb7b      	cbnz	r3, 8011aa8 <_strtod_l+0x8f8>
 8011a48:	f1ba 0f00 	cmp.w	sl, #0
 8011a4c:	d12c      	bne.n	8011aa8 <_strtod_l+0x8f8>
 8011a4e:	9904      	ldr	r1, [sp, #16]
 8011a50:	4a9a      	ldr	r2, [pc, #616]	; (8011cbc <_strtod_l+0xb0c>)
 8011a52:	465b      	mov	r3, fp
 8011a54:	b1f1      	cbz	r1, 8011a94 <_strtod_l+0x8e4>
 8011a56:	ea02 010b 	and.w	r1, r2, fp
 8011a5a:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8011a5e:	dc19      	bgt.n	8011a94 <_strtod_l+0x8e4>
 8011a60:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8011a64:	f77f ae5b 	ble.w	801171e <_strtod_l+0x56e>
 8011a68:	4a96      	ldr	r2, [pc, #600]	; (8011cc4 <_strtod_l+0xb14>)
 8011a6a:	2300      	movs	r3, #0
 8011a6c:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 8011a70:	4650      	mov	r0, sl
 8011a72:	4659      	mov	r1, fp
 8011a74:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8011a78:	f7ee fdbe 	bl	80005f8 <__aeabi_dmul>
 8011a7c:	4682      	mov	sl, r0
 8011a7e:	468b      	mov	fp, r1
 8011a80:	2900      	cmp	r1, #0
 8011a82:	f47f adbe 	bne.w	8011602 <_strtod_l+0x452>
 8011a86:	2800      	cmp	r0, #0
 8011a88:	f47f adbb 	bne.w	8011602 <_strtod_l+0x452>
 8011a8c:	2322      	movs	r3, #34	; 0x22
 8011a8e:	f8c9 3000 	str.w	r3, [r9]
 8011a92:	e5b6      	b.n	8011602 <_strtod_l+0x452>
 8011a94:	4013      	ands	r3, r2
 8011a96:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8011a9a:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8011a9e:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8011aa2:	f04f 3aff 	mov.w	sl, #4294967295
 8011aa6:	e76a      	b.n	801197e <_strtod_l+0x7ce>
 8011aa8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011aaa:	b193      	cbz	r3, 8011ad2 <_strtod_l+0x922>
 8011aac:	422b      	tst	r3, r5
 8011aae:	f43f af66 	beq.w	801197e <_strtod_l+0x7ce>
 8011ab2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8011ab4:	9a04      	ldr	r2, [sp, #16]
 8011ab6:	4650      	mov	r0, sl
 8011ab8:	4659      	mov	r1, fp
 8011aba:	b173      	cbz	r3, 8011ada <_strtod_l+0x92a>
 8011abc:	f7ff fb5a 	bl	8011174 <sulp>
 8011ac0:	4602      	mov	r2, r0
 8011ac2:	460b      	mov	r3, r1
 8011ac4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8011ac8:	f7ee fbe0 	bl	800028c <__adddf3>
 8011acc:	4682      	mov	sl, r0
 8011ace:	468b      	mov	fp, r1
 8011ad0:	e755      	b.n	801197e <_strtod_l+0x7ce>
 8011ad2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8011ad4:	ea13 0f0a 	tst.w	r3, sl
 8011ad8:	e7e9      	b.n	8011aae <_strtod_l+0x8fe>
 8011ada:	f7ff fb4b 	bl	8011174 <sulp>
 8011ade:	4602      	mov	r2, r0
 8011ae0:	460b      	mov	r3, r1
 8011ae2:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8011ae6:	f7ee fbcf 	bl	8000288 <__aeabi_dsub>
 8011aea:	2200      	movs	r2, #0
 8011aec:	2300      	movs	r3, #0
 8011aee:	4682      	mov	sl, r0
 8011af0:	468b      	mov	fp, r1
 8011af2:	f7ee ffe9 	bl	8000ac8 <__aeabi_dcmpeq>
 8011af6:	2800      	cmp	r0, #0
 8011af8:	f47f ae11 	bne.w	801171e <_strtod_l+0x56e>
 8011afc:	e73f      	b.n	801197e <_strtod_l+0x7ce>
 8011afe:	4641      	mov	r1, r8
 8011b00:	4620      	mov	r0, r4
 8011b02:	f001 ff0c 	bl	801391e <__ratio>
 8011b06:	ec57 6b10 	vmov	r6, r7, d0
 8011b0a:	2200      	movs	r2, #0
 8011b0c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8011b10:	ee10 0a10 	vmov	r0, s0
 8011b14:	4639      	mov	r1, r7
 8011b16:	f7ee ffeb 	bl	8000af0 <__aeabi_dcmple>
 8011b1a:	2800      	cmp	r0, #0
 8011b1c:	d077      	beq.n	8011c0e <_strtod_l+0xa5e>
 8011b1e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8011b20:	2b00      	cmp	r3, #0
 8011b22:	d04a      	beq.n	8011bba <_strtod_l+0xa0a>
 8011b24:	4b68      	ldr	r3, [pc, #416]	; (8011cc8 <_strtod_l+0xb18>)
 8011b26:	2200      	movs	r2, #0
 8011b28:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8011b2c:	4f66      	ldr	r7, [pc, #408]	; (8011cc8 <_strtod_l+0xb18>)
 8011b2e:	2600      	movs	r6, #0
 8011b30:	4b62      	ldr	r3, [pc, #392]	; (8011cbc <_strtod_l+0xb0c>)
 8011b32:	402b      	ands	r3, r5
 8011b34:	930f      	str	r3, [sp, #60]	; 0x3c
 8011b36:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8011b38:	4b64      	ldr	r3, [pc, #400]	; (8011ccc <_strtod_l+0xb1c>)
 8011b3a:	429a      	cmp	r2, r3
 8011b3c:	f040 80ce 	bne.w	8011cdc <_strtod_l+0xb2c>
 8011b40:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8011b44:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8011b48:	f1a5 7b54 	sub.w	fp, r5, #55574528	; 0x3500000
 8011b4c:	ec4b ab10 	vmov	d0, sl, fp
 8011b50:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 8011b54:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8011b58:	f001 fe1c 	bl	8013794 <__ulp>
 8011b5c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8011b60:	ec53 2b10 	vmov	r2, r3, d0
 8011b64:	f7ee fd48 	bl	80005f8 <__aeabi_dmul>
 8011b68:	4652      	mov	r2, sl
 8011b6a:	465b      	mov	r3, fp
 8011b6c:	f7ee fb8e 	bl	800028c <__adddf3>
 8011b70:	460b      	mov	r3, r1
 8011b72:	4952      	ldr	r1, [pc, #328]	; (8011cbc <_strtod_l+0xb0c>)
 8011b74:	4a56      	ldr	r2, [pc, #344]	; (8011cd0 <_strtod_l+0xb20>)
 8011b76:	4019      	ands	r1, r3
 8011b78:	4291      	cmp	r1, r2
 8011b7a:	4682      	mov	sl, r0
 8011b7c:	d95b      	bls.n	8011c36 <_strtod_l+0xa86>
 8011b7e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011b80:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8011b84:	4293      	cmp	r3, r2
 8011b86:	d103      	bne.n	8011b90 <_strtod_l+0x9e0>
 8011b88:	9b08      	ldr	r3, [sp, #32]
 8011b8a:	3301      	adds	r3, #1
 8011b8c:	f43f ad2e 	beq.w	80115ec <_strtod_l+0x43c>
 8011b90:	f8df b12c 	ldr.w	fp, [pc, #300]	; 8011cc0 <_strtod_l+0xb10>
 8011b94:	f04f 3aff 	mov.w	sl, #4294967295
 8011b98:	991c      	ldr	r1, [sp, #112]	; 0x70
 8011b9a:	4648      	mov	r0, r9
 8011b9c:	f001 fb62 	bl	8013264 <_Bfree>
 8011ba0:	9905      	ldr	r1, [sp, #20]
 8011ba2:	4648      	mov	r0, r9
 8011ba4:	f001 fb5e 	bl	8013264 <_Bfree>
 8011ba8:	4641      	mov	r1, r8
 8011baa:	4648      	mov	r0, r9
 8011bac:	f001 fb5a 	bl	8013264 <_Bfree>
 8011bb0:	4621      	mov	r1, r4
 8011bb2:	4648      	mov	r0, r9
 8011bb4:	f001 fb56 	bl	8013264 <_Bfree>
 8011bb8:	e619      	b.n	80117ee <_strtod_l+0x63e>
 8011bba:	f1ba 0f00 	cmp.w	sl, #0
 8011bbe:	d11a      	bne.n	8011bf6 <_strtod_l+0xa46>
 8011bc0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8011bc4:	b9eb      	cbnz	r3, 8011c02 <_strtod_l+0xa52>
 8011bc6:	2200      	movs	r2, #0
 8011bc8:	4b3f      	ldr	r3, [pc, #252]	; (8011cc8 <_strtod_l+0xb18>)
 8011bca:	4630      	mov	r0, r6
 8011bcc:	4639      	mov	r1, r7
 8011bce:	f7ee ff85 	bl	8000adc <__aeabi_dcmplt>
 8011bd2:	b9c8      	cbnz	r0, 8011c08 <_strtod_l+0xa58>
 8011bd4:	4630      	mov	r0, r6
 8011bd6:	4639      	mov	r1, r7
 8011bd8:	2200      	movs	r2, #0
 8011bda:	4b3e      	ldr	r3, [pc, #248]	; (8011cd4 <_strtod_l+0xb24>)
 8011bdc:	f7ee fd0c 	bl	80005f8 <__aeabi_dmul>
 8011be0:	4606      	mov	r6, r0
 8011be2:	460f      	mov	r7, r1
 8011be4:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8011be8:	9618      	str	r6, [sp, #96]	; 0x60
 8011bea:	9319      	str	r3, [sp, #100]	; 0x64
 8011bec:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 8011bf0:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8011bf4:	e79c      	b.n	8011b30 <_strtod_l+0x980>
 8011bf6:	f1ba 0f01 	cmp.w	sl, #1
 8011bfa:	d102      	bne.n	8011c02 <_strtod_l+0xa52>
 8011bfc:	2d00      	cmp	r5, #0
 8011bfe:	f43f ad8e 	beq.w	801171e <_strtod_l+0x56e>
 8011c02:	2200      	movs	r2, #0
 8011c04:	4b34      	ldr	r3, [pc, #208]	; (8011cd8 <_strtod_l+0xb28>)
 8011c06:	e78f      	b.n	8011b28 <_strtod_l+0x978>
 8011c08:	2600      	movs	r6, #0
 8011c0a:	4f32      	ldr	r7, [pc, #200]	; (8011cd4 <_strtod_l+0xb24>)
 8011c0c:	e7ea      	b.n	8011be4 <_strtod_l+0xa34>
 8011c0e:	4b31      	ldr	r3, [pc, #196]	; (8011cd4 <_strtod_l+0xb24>)
 8011c10:	4630      	mov	r0, r6
 8011c12:	4639      	mov	r1, r7
 8011c14:	2200      	movs	r2, #0
 8011c16:	f7ee fcef 	bl	80005f8 <__aeabi_dmul>
 8011c1a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8011c1c:	4606      	mov	r6, r0
 8011c1e:	460f      	mov	r7, r1
 8011c20:	b933      	cbnz	r3, 8011c30 <_strtod_l+0xa80>
 8011c22:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8011c26:	9010      	str	r0, [sp, #64]	; 0x40
 8011c28:	9311      	str	r3, [sp, #68]	; 0x44
 8011c2a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8011c2e:	e7df      	b.n	8011bf0 <_strtod_l+0xa40>
 8011c30:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 8011c34:	e7f9      	b.n	8011c2a <_strtod_l+0xa7a>
 8011c36:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8011c3a:	9b04      	ldr	r3, [sp, #16]
 8011c3c:	2b00      	cmp	r3, #0
 8011c3e:	d1ab      	bne.n	8011b98 <_strtod_l+0x9e8>
 8011c40:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8011c44:	0d1b      	lsrs	r3, r3, #20
 8011c46:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8011c48:	051b      	lsls	r3, r3, #20
 8011c4a:	429a      	cmp	r2, r3
 8011c4c:	465d      	mov	r5, fp
 8011c4e:	d1a3      	bne.n	8011b98 <_strtod_l+0x9e8>
 8011c50:	4639      	mov	r1, r7
 8011c52:	4630      	mov	r0, r6
 8011c54:	f7ee ff80 	bl	8000b58 <__aeabi_d2iz>
 8011c58:	f7ee fc64 	bl	8000524 <__aeabi_i2d>
 8011c5c:	460b      	mov	r3, r1
 8011c5e:	4602      	mov	r2, r0
 8011c60:	4639      	mov	r1, r7
 8011c62:	4630      	mov	r0, r6
 8011c64:	f7ee fb10 	bl	8000288 <__aeabi_dsub>
 8011c68:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8011c6a:	4606      	mov	r6, r0
 8011c6c:	460f      	mov	r7, r1
 8011c6e:	b933      	cbnz	r3, 8011c7e <_strtod_l+0xace>
 8011c70:	f1ba 0f00 	cmp.w	sl, #0
 8011c74:	d103      	bne.n	8011c7e <_strtod_l+0xace>
 8011c76:	f3cb 0513 	ubfx	r5, fp, #0, #20
 8011c7a:	2d00      	cmp	r5, #0
 8011c7c:	d06d      	beq.n	8011d5a <_strtod_l+0xbaa>
 8011c7e:	a30a      	add	r3, pc, #40	; (adr r3, 8011ca8 <_strtod_l+0xaf8>)
 8011c80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011c84:	4630      	mov	r0, r6
 8011c86:	4639      	mov	r1, r7
 8011c88:	f7ee ff28 	bl	8000adc <__aeabi_dcmplt>
 8011c8c:	2800      	cmp	r0, #0
 8011c8e:	f47f acb8 	bne.w	8011602 <_strtod_l+0x452>
 8011c92:	a307      	add	r3, pc, #28	; (adr r3, 8011cb0 <_strtod_l+0xb00>)
 8011c94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011c98:	4630      	mov	r0, r6
 8011c9a:	4639      	mov	r1, r7
 8011c9c:	f7ee ff3c 	bl	8000b18 <__aeabi_dcmpgt>
 8011ca0:	2800      	cmp	r0, #0
 8011ca2:	f43f af79 	beq.w	8011b98 <_strtod_l+0x9e8>
 8011ca6:	e4ac      	b.n	8011602 <_strtod_l+0x452>
 8011ca8:	94a03595 	.word	0x94a03595
 8011cac:	3fdfffff 	.word	0x3fdfffff
 8011cb0:	35afe535 	.word	0x35afe535
 8011cb4:	3fe00000 	.word	0x3fe00000
 8011cb8:	000fffff 	.word	0x000fffff
 8011cbc:	7ff00000 	.word	0x7ff00000
 8011cc0:	7fefffff 	.word	0x7fefffff
 8011cc4:	39500000 	.word	0x39500000
 8011cc8:	3ff00000 	.word	0x3ff00000
 8011ccc:	7fe00000 	.word	0x7fe00000
 8011cd0:	7c9fffff 	.word	0x7c9fffff
 8011cd4:	3fe00000 	.word	0x3fe00000
 8011cd8:	bff00000 	.word	0xbff00000
 8011cdc:	9b04      	ldr	r3, [sp, #16]
 8011cde:	b333      	cbz	r3, 8011d2e <_strtod_l+0xb7e>
 8011ce0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8011ce2:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8011ce6:	d822      	bhi.n	8011d2e <_strtod_l+0xb7e>
 8011ce8:	a327      	add	r3, pc, #156	; (adr r3, 8011d88 <_strtod_l+0xbd8>)
 8011cea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011cee:	4630      	mov	r0, r6
 8011cf0:	4639      	mov	r1, r7
 8011cf2:	f7ee fefd 	bl	8000af0 <__aeabi_dcmple>
 8011cf6:	b1a0      	cbz	r0, 8011d22 <_strtod_l+0xb72>
 8011cf8:	4639      	mov	r1, r7
 8011cfa:	4630      	mov	r0, r6
 8011cfc:	f7ee ff54 	bl	8000ba8 <__aeabi_d2uiz>
 8011d00:	2800      	cmp	r0, #0
 8011d02:	bf08      	it	eq
 8011d04:	2001      	moveq	r0, #1
 8011d06:	f7ee fbfd 	bl	8000504 <__aeabi_ui2d>
 8011d0a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8011d0c:	4606      	mov	r6, r0
 8011d0e:	460f      	mov	r7, r1
 8011d10:	bb03      	cbnz	r3, 8011d54 <_strtod_l+0xba4>
 8011d12:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8011d16:	9012      	str	r0, [sp, #72]	; 0x48
 8011d18:	9313      	str	r3, [sp, #76]	; 0x4c
 8011d1a:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 8011d1e:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8011d22:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011d24:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8011d26:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8011d2a:	1a9b      	subs	r3, r3, r2
 8011d2c:	930b      	str	r3, [sp, #44]	; 0x2c
 8011d2e:	ed9d 0b08 	vldr	d0, [sp, #32]
 8011d32:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
 8011d36:	f001 fd2d 	bl	8013794 <__ulp>
 8011d3a:	4650      	mov	r0, sl
 8011d3c:	ec53 2b10 	vmov	r2, r3, d0
 8011d40:	4659      	mov	r1, fp
 8011d42:	f7ee fc59 	bl	80005f8 <__aeabi_dmul>
 8011d46:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8011d4a:	f7ee fa9f 	bl	800028c <__adddf3>
 8011d4e:	4682      	mov	sl, r0
 8011d50:	468b      	mov	fp, r1
 8011d52:	e772      	b.n	8011c3a <_strtod_l+0xa8a>
 8011d54:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48
 8011d58:	e7df      	b.n	8011d1a <_strtod_l+0xb6a>
 8011d5a:	a30d      	add	r3, pc, #52	; (adr r3, 8011d90 <_strtod_l+0xbe0>)
 8011d5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011d60:	f7ee febc 	bl	8000adc <__aeabi_dcmplt>
 8011d64:	e79c      	b.n	8011ca0 <_strtod_l+0xaf0>
 8011d66:	2300      	movs	r3, #0
 8011d68:	930d      	str	r3, [sp, #52]	; 0x34
 8011d6a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8011d6c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8011d6e:	6013      	str	r3, [r2, #0]
 8011d70:	f7ff ba61 	b.w	8011236 <_strtod_l+0x86>
 8011d74:	2b65      	cmp	r3, #101	; 0x65
 8011d76:	f04f 0200 	mov.w	r2, #0
 8011d7a:	f43f ab4e 	beq.w	801141a <_strtod_l+0x26a>
 8011d7e:	2101      	movs	r1, #1
 8011d80:	4614      	mov	r4, r2
 8011d82:	9104      	str	r1, [sp, #16]
 8011d84:	f7ff bacb 	b.w	801131e <_strtod_l+0x16e>
 8011d88:	ffc00000 	.word	0xffc00000
 8011d8c:	41dfffff 	.word	0x41dfffff
 8011d90:	94a03595 	.word	0x94a03595
 8011d94:	3fcfffff 	.word	0x3fcfffff

08011d98 <_strtod_r>:
 8011d98:	4b05      	ldr	r3, [pc, #20]	; (8011db0 <_strtod_r+0x18>)
 8011d9a:	681b      	ldr	r3, [r3, #0]
 8011d9c:	b410      	push	{r4}
 8011d9e:	6a1b      	ldr	r3, [r3, #32]
 8011da0:	4c04      	ldr	r4, [pc, #16]	; (8011db4 <_strtod_r+0x1c>)
 8011da2:	2b00      	cmp	r3, #0
 8011da4:	bf08      	it	eq
 8011da6:	4623      	moveq	r3, r4
 8011da8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011dac:	f7ff ba00 	b.w	80111b0 <_strtod_l>
 8011db0:	20000180 	.word	0x20000180
 8011db4:	200001e4 	.word	0x200001e4

08011db8 <_strtol_l.isra.0>:
 8011db8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011dbc:	4680      	mov	r8, r0
 8011dbe:	4689      	mov	r9, r1
 8011dc0:	4692      	mov	sl, r2
 8011dc2:	461e      	mov	r6, r3
 8011dc4:	460f      	mov	r7, r1
 8011dc6:	463d      	mov	r5, r7
 8011dc8:	9808      	ldr	r0, [sp, #32]
 8011dca:	f815 4b01 	ldrb.w	r4, [r5], #1
 8011dce:	f001 f9ed 	bl	80131ac <__locale_ctype_ptr_l>
 8011dd2:	4420      	add	r0, r4
 8011dd4:	7843      	ldrb	r3, [r0, #1]
 8011dd6:	f013 0308 	ands.w	r3, r3, #8
 8011dda:	d132      	bne.n	8011e42 <_strtol_l.isra.0+0x8a>
 8011ddc:	2c2d      	cmp	r4, #45	; 0x2d
 8011dde:	d132      	bne.n	8011e46 <_strtol_l.isra.0+0x8e>
 8011de0:	787c      	ldrb	r4, [r7, #1]
 8011de2:	1cbd      	adds	r5, r7, #2
 8011de4:	2201      	movs	r2, #1
 8011de6:	2e00      	cmp	r6, #0
 8011de8:	d05d      	beq.n	8011ea6 <_strtol_l.isra.0+0xee>
 8011dea:	2e10      	cmp	r6, #16
 8011dec:	d109      	bne.n	8011e02 <_strtol_l.isra.0+0x4a>
 8011dee:	2c30      	cmp	r4, #48	; 0x30
 8011df0:	d107      	bne.n	8011e02 <_strtol_l.isra.0+0x4a>
 8011df2:	782b      	ldrb	r3, [r5, #0]
 8011df4:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8011df8:	2b58      	cmp	r3, #88	; 0x58
 8011dfa:	d14f      	bne.n	8011e9c <_strtol_l.isra.0+0xe4>
 8011dfc:	786c      	ldrb	r4, [r5, #1]
 8011dfe:	2610      	movs	r6, #16
 8011e00:	3502      	adds	r5, #2
 8011e02:	2a00      	cmp	r2, #0
 8011e04:	bf14      	ite	ne
 8011e06:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 8011e0a:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 8011e0e:	2700      	movs	r7, #0
 8011e10:	fbb1 fcf6 	udiv	ip, r1, r6
 8011e14:	4638      	mov	r0, r7
 8011e16:	fb06 1e1c 	mls	lr, r6, ip, r1
 8011e1a:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8011e1e:	2b09      	cmp	r3, #9
 8011e20:	d817      	bhi.n	8011e52 <_strtol_l.isra.0+0x9a>
 8011e22:	461c      	mov	r4, r3
 8011e24:	42a6      	cmp	r6, r4
 8011e26:	dd23      	ble.n	8011e70 <_strtol_l.isra.0+0xb8>
 8011e28:	1c7b      	adds	r3, r7, #1
 8011e2a:	d007      	beq.n	8011e3c <_strtol_l.isra.0+0x84>
 8011e2c:	4584      	cmp	ip, r0
 8011e2e:	d31c      	bcc.n	8011e6a <_strtol_l.isra.0+0xb2>
 8011e30:	d101      	bne.n	8011e36 <_strtol_l.isra.0+0x7e>
 8011e32:	45a6      	cmp	lr, r4
 8011e34:	db19      	blt.n	8011e6a <_strtol_l.isra.0+0xb2>
 8011e36:	fb00 4006 	mla	r0, r0, r6, r4
 8011e3a:	2701      	movs	r7, #1
 8011e3c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8011e40:	e7eb      	b.n	8011e1a <_strtol_l.isra.0+0x62>
 8011e42:	462f      	mov	r7, r5
 8011e44:	e7bf      	b.n	8011dc6 <_strtol_l.isra.0+0xe>
 8011e46:	2c2b      	cmp	r4, #43	; 0x2b
 8011e48:	bf04      	itt	eq
 8011e4a:	1cbd      	addeq	r5, r7, #2
 8011e4c:	787c      	ldrbeq	r4, [r7, #1]
 8011e4e:	461a      	mov	r2, r3
 8011e50:	e7c9      	b.n	8011de6 <_strtol_l.isra.0+0x2e>
 8011e52:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 8011e56:	2b19      	cmp	r3, #25
 8011e58:	d801      	bhi.n	8011e5e <_strtol_l.isra.0+0xa6>
 8011e5a:	3c37      	subs	r4, #55	; 0x37
 8011e5c:	e7e2      	b.n	8011e24 <_strtol_l.isra.0+0x6c>
 8011e5e:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8011e62:	2b19      	cmp	r3, #25
 8011e64:	d804      	bhi.n	8011e70 <_strtol_l.isra.0+0xb8>
 8011e66:	3c57      	subs	r4, #87	; 0x57
 8011e68:	e7dc      	b.n	8011e24 <_strtol_l.isra.0+0x6c>
 8011e6a:	f04f 37ff 	mov.w	r7, #4294967295
 8011e6e:	e7e5      	b.n	8011e3c <_strtol_l.isra.0+0x84>
 8011e70:	1c7b      	adds	r3, r7, #1
 8011e72:	d108      	bne.n	8011e86 <_strtol_l.isra.0+0xce>
 8011e74:	2322      	movs	r3, #34	; 0x22
 8011e76:	f8c8 3000 	str.w	r3, [r8]
 8011e7a:	4608      	mov	r0, r1
 8011e7c:	f1ba 0f00 	cmp.w	sl, #0
 8011e80:	d107      	bne.n	8011e92 <_strtol_l.isra.0+0xda>
 8011e82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011e86:	b102      	cbz	r2, 8011e8a <_strtol_l.isra.0+0xd2>
 8011e88:	4240      	negs	r0, r0
 8011e8a:	f1ba 0f00 	cmp.w	sl, #0
 8011e8e:	d0f8      	beq.n	8011e82 <_strtol_l.isra.0+0xca>
 8011e90:	b10f      	cbz	r7, 8011e96 <_strtol_l.isra.0+0xde>
 8011e92:	f105 39ff 	add.w	r9, r5, #4294967295
 8011e96:	f8ca 9000 	str.w	r9, [sl]
 8011e9a:	e7f2      	b.n	8011e82 <_strtol_l.isra.0+0xca>
 8011e9c:	2430      	movs	r4, #48	; 0x30
 8011e9e:	2e00      	cmp	r6, #0
 8011ea0:	d1af      	bne.n	8011e02 <_strtol_l.isra.0+0x4a>
 8011ea2:	2608      	movs	r6, #8
 8011ea4:	e7ad      	b.n	8011e02 <_strtol_l.isra.0+0x4a>
 8011ea6:	2c30      	cmp	r4, #48	; 0x30
 8011ea8:	d0a3      	beq.n	8011df2 <_strtol_l.isra.0+0x3a>
 8011eaa:	260a      	movs	r6, #10
 8011eac:	e7a9      	b.n	8011e02 <_strtol_l.isra.0+0x4a>
	...

08011eb0 <_strtol_r>:
 8011eb0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8011eb2:	4c06      	ldr	r4, [pc, #24]	; (8011ecc <_strtol_r+0x1c>)
 8011eb4:	4d06      	ldr	r5, [pc, #24]	; (8011ed0 <_strtol_r+0x20>)
 8011eb6:	6824      	ldr	r4, [r4, #0]
 8011eb8:	6a24      	ldr	r4, [r4, #32]
 8011eba:	2c00      	cmp	r4, #0
 8011ebc:	bf08      	it	eq
 8011ebe:	462c      	moveq	r4, r5
 8011ec0:	9400      	str	r4, [sp, #0]
 8011ec2:	f7ff ff79 	bl	8011db8 <_strtol_l.isra.0>
 8011ec6:	b003      	add	sp, #12
 8011ec8:	bd30      	pop	{r4, r5, pc}
 8011eca:	bf00      	nop
 8011ecc:	20000180 	.word	0x20000180
 8011ed0:	200001e4 	.word	0x200001e4

08011ed4 <quorem>:
 8011ed4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011ed8:	6903      	ldr	r3, [r0, #16]
 8011eda:	690c      	ldr	r4, [r1, #16]
 8011edc:	42a3      	cmp	r3, r4
 8011ede:	4680      	mov	r8, r0
 8011ee0:	f2c0 8082 	blt.w	8011fe8 <quorem+0x114>
 8011ee4:	3c01      	subs	r4, #1
 8011ee6:	f101 0714 	add.w	r7, r1, #20
 8011eea:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8011eee:	f100 0614 	add.w	r6, r0, #20
 8011ef2:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8011ef6:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8011efa:	eb06 030c 	add.w	r3, r6, ip
 8011efe:	3501      	adds	r5, #1
 8011f00:	eb07 090c 	add.w	r9, r7, ip
 8011f04:	9301      	str	r3, [sp, #4]
 8011f06:	fbb0 f5f5 	udiv	r5, r0, r5
 8011f0a:	b395      	cbz	r5, 8011f72 <quorem+0x9e>
 8011f0c:	f04f 0a00 	mov.w	sl, #0
 8011f10:	4638      	mov	r0, r7
 8011f12:	46b6      	mov	lr, r6
 8011f14:	46d3      	mov	fp, sl
 8011f16:	f850 2b04 	ldr.w	r2, [r0], #4
 8011f1a:	b293      	uxth	r3, r2
 8011f1c:	fb05 a303 	mla	r3, r5, r3, sl
 8011f20:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8011f24:	b29b      	uxth	r3, r3
 8011f26:	ebab 0303 	sub.w	r3, fp, r3
 8011f2a:	0c12      	lsrs	r2, r2, #16
 8011f2c:	f8de b000 	ldr.w	fp, [lr]
 8011f30:	fb05 a202 	mla	r2, r5, r2, sl
 8011f34:	fa13 f38b 	uxtah	r3, r3, fp
 8011f38:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8011f3c:	fa1f fb82 	uxth.w	fp, r2
 8011f40:	f8de 2000 	ldr.w	r2, [lr]
 8011f44:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8011f48:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8011f4c:	b29b      	uxth	r3, r3
 8011f4e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8011f52:	4581      	cmp	r9, r0
 8011f54:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8011f58:	f84e 3b04 	str.w	r3, [lr], #4
 8011f5c:	d2db      	bcs.n	8011f16 <quorem+0x42>
 8011f5e:	f856 300c 	ldr.w	r3, [r6, ip]
 8011f62:	b933      	cbnz	r3, 8011f72 <quorem+0x9e>
 8011f64:	9b01      	ldr	r3, [sp, #4]
 8011f66:	3b04      	subs	r3, #4
 8011f68:	429e      	cmp	r6, r3
 8011f6a:	461a      	mov	r2, r3
 8011f6c:	d330      	bcc.n	8011fd0 <quorem+0xfc>
 8011f6e:	f8c8 4010 	str.w	r4, [r8, #16]
 8011f72:	4640      	mov	r0, r8
 8011f74:	f001 fb96 	bl	80136a4 <__mcmp>
 8011f78:	2800      	cmp	r0, #0
 8011f7a:	db25      	blt.n	8011fc8 <quorem+0xf4>
 8011f7c:	3501      	adds	r5, #1
 8011f7e:	4630      	mov	r0, r6
 8011f80:	f04f 0c00 	mov.w	ip, #0
 8011f84:	f857 2b04 	ldr.w	r2, [r7], #4
 8011f88:	f8d0 e000 	ldr.w	lr, [r0]
 8011f8c:	b293      	uxth	r3, r2
 8011f8e:	ebac 0303 	sub.w	r3, ip, r3
 8011f92:	0c12      	lsrs	r2, r2, #16
 8011f94:	fa13 f38e 	uxtah	r3, r3, lr
 8011f98:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8011f9c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8011fa0:	b29b      	uxth	r3, r3
 8011fa2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8011fa6:	45b9      	cmp	r9, r7
 8011fa8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8011fac:	f840 3b04 	str.w	r3, [r0], #4
 8011fb0:	d2e8      	bcs.n	8011f84 <quorem+0xb0>
 8011fb2:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8011fb6:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8011fba:	b92a      	cbnz	r2, 8011fc8 <quorem+0xf4>
 8011fbc:	3b04      	subs	r3, #4
 8011fbe:	429e      	cmp	r6, r3
 8011fc0:	461a      	mov	r2, r3
 8011fc2:	d30b      	bcc.n	8011fdc <quorem+0x108>
 8011fc4:	f8c8 4010 	str.w	r4, [r8, #16]
 8011fc8:	4628      	mov	r0, r5
 8011fca:	b003      	add	sp, #12
 8011fcc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011fd0:	6812      	ldr	r2, [r2, #0]
 8011fd2:	3b04      	subs	r3, #4
 8011fd4:	2a00      	cmp	r2, #0
 8011fd6:	d1ca      	bne.n	8011f6e <quorem+0x9a>
 8011fd8:	3c01      	subs	r4, #1
 8011fda:	e7c5      	b.n	8011f68 <quorem+0x94>
 8011fdc:	6812      	ldr	r2, [r2, #0]
 8011fde:	3b04      	subs	r3, #4
 8011fe0:	2a00      	cmp	r2, #0
 8011fe2:	d1ef      	bne.n	8011fc4 <quorem+0xf0>
 8011fe4:	3c01      	subs	r4, #1
 8011fe6:	e7ea      	b.n	8011fbe <quorem+0xea>
 8011fe8:	2000      	movs	r0, #0
 8011fea:	e7ee      	b.n	8011fca <quorem+0xf6>
 8011fec:	0000      	movs	r0, r0
	...

08011ff0 <_dtoa_r>:
 8011ff0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011ff4:	ec57 6b10 	vmov	r6, r7, d0
 8011ff8:	b097      	sub	sp, #92	; 0x5c
 8011ffa:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8011ffc:	9106      	str	r1, [sp, #24]
 8011ffe:	4604      	mov	r4, r0
 8012000:	920b      	str	r2, [sp, #44]	; 0x2c
 8012002:	9312      	str	r3, [sp, #72]	; 0x48
 8012004:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8012008:	e9cd 6700 	strd	r6, r7, [sp]
 801200c:	b93d      	cbnz	r5, 801201e <_dtoa_r+0x2e>
 801200e:	2010      	movs	r0, #16
 8012010:	f7fe f95e 	bl	80102d0 <malloc>
 8012014:	6260      	str	r0, [r4, #36]	; 0x24
 8012016:	e9c0 5501 	strd	r5, r5, [r0, #4]
 801201a:	6005      	str	r5, [r0, #0]
 801201c:	60c5      	str	r5, [r0, #12]
 801201e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8012020:	6819      	ldr	r1, [r3, #0]
 8012022:	b151      	cbz	r1, 801203a <_dtoa_r+0x4a>
 8012024:	685a      	ldr	r2, [r3, #4]
 8012026:	604a      	str	r2, [r1, #4]
 8012028:	2301      	movs	r3, #1
 801202a:	4093      	lsls	r3, r2
 801202c:	608b      	str	r3, [r1, #8]
 801202e:	4620      	mov	r0, r4
 8012030:	f001 f918 	bl	8013264 <_Bfree>
 8012034:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8012036:	2200      	movs	r2, #0
 8012038:	601a      	str	r2, [r3, #0]
 801203a:	1e3b      	subs	r3, r7, #0
 801203c:	bfbb      	ittet	lt
 801203e:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8012042:	9301      	strlt	r3, [sp, #4]
 8012044:	2300      	movge	r3, #0
 8012046:	2201      	movlt	r2, #1
 8012048:	bfac      	ite	ge
 801204a:	f8c8 3000 	strge.w	r3, [r8]
 801204e:	f8c8 2000 	strlt.w	r2, [r8]
 8012052:	4baf      	ldr	r3, [pc, #700]	; (8012310 <_dtoa_r+0x320>)
 8012054:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8012058:	ea33 0308 	bics.w	r3, r3, r8
 801205c:	d114      	bne.n	8012088 <_dtoa_r+0x98>
 801205e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8012060:	f242 730f 	movw	r3, #9999	; 0x270f
 8012064:	6013      	str	r3, [r2, #0]
 8012066:	9b00      	ldr	r3, [sp, #0]
 8012068:	b923      	cbnz	r3, 8012074 <_dtoa_r+0x84>
 801206a:	f3c8 0013 	ubfx	r0, r8, #0, #20
 801206e:	2800      	cmp	r0, #0
 8012070:	f000 8542 	beq.w	8012af8 <_dtoa_r+0xb08>
 8012074:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8012076:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 8012324 <_dtoa_r+0x334>
 801207a:	2b00      	cmp	r3, #0
 801207c:	f000 8544 	beq.w	8012b08 <_dtoa_r+0xb18>
 8012080:	f10b 0303 	add.w	r3, fp, #3
 8012084:	f000 bd3e 	b.w	8012b04 <_dtoa_r+0xb14>
 8012088:	e9dd 6700 	ldrd	r6, r7, [sp]
 801208c:	2200      	movs	r2, #0
 801208e:	2300      	movs	r3, #0
 8012090:	4630      	mov	r0, r6
 8012092:	4639      	mov	r1, r7
 8012094:	f7ee fd18 	bl	8000ac8 <__aeabi_dcmpeq>
 8012098:	4681      	mov	r9, r0
 801209a:	b168      	cbz	r0, 80120b8 <_dtoa_r+0xc8>
 801209c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801209e:	2301      	movs	r3, #1
 80120a0:	6013      	str	r3, [r2, #0]
 80120a2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80120a4:	2b00      	cmp	r3, #0
 80120a6:	f000 8524 	beq.w	8012af2 <_dtoa_r+0xb02>
 80120aa:	4b9a      	ldr	r3, [pc, #616]	; (8012314 <_dtoa_r+0x324>)
 80120ac:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80120ae:	f103 3bff 	add.w	fp, r3, #4294967295
 80120b2:	6013      	str	r3, [r2, #0]
 80120b4:	f000 bd28 	b.w	8012b08 <_dtoa_r+0xb18>
 80120b8:	aa14      	add	r2, sp, #80	; 0x50
 80120ba:	a915      	add	r1, sp, #84	; 0x54
 80120bc:	ec47 6b10 	vmov	d0, r6, r7
 80120c0:	4620      	mov	r0, r4
 80120c2:	f001 fbdd 	bl	8013880 <__d2b>
 80120c6:	f3c8 550a 	ubfx	r5, r8, #20, #11
 80120ca:	9004      	str	r0, [sp, #16]
 80120cc:	2d00      	cmp	r5, #0
 80120ce:	d07c      	beq.n	80121ca <_dtoa_r+0x1da>
 80120d0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80120d4:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 80120d8:	46b2      	mov	sl, r6
 80120da:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 80120de:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80120e2:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 80120e6:	2200      	movs	r2, #0
 80120e8:	4b8b      	ldr	r3, [pc, #556]	; (8012318 <_dtoa_r+0x328>)
 80120ea:	4650      	mov	r0, sl
 80120ec:	4659      	mov	r1, fp
 80120ee:	f7ee f8cb 	bl	8000288 <__aeabi_dsub>
 80120f2:	a381      	add	r3, pc, #516	; (adr r3, 80122f8 <_dtoa_r+0x308>)
 80120f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80120f8:	f7ee fa7e 	bl	80005f8 <__aeabi_dmul>
 80120fc:	a380      	add	r3, pc, #512	; (adr r3, 8012300 <_dtoa_r+0x310>)
 80120fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012102:	f7ee f8c3 	bl	800028c <__adddf3>
 8012106:	4606      	mov	r6, r0
 8012108:	4628      	mov	r0, r5
 801210a:	460f      	mov	r7, r1
 801210c:	f7ee fa0a 	bl	8000524 <__aeabi_i2d>
 8012110:	a37d      	add	r3, pc, #500	; (adr r3, 8012308 <_dtoa_r+0x318>)
 8012112:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012116:	f7ee fa6f 	bl	80005f8 <__aeabi_dmul>
 801211a:	4602      	mov	r2, r0
 801211c:	460b      	mov	r3, r1
 801211e:	4630      	mov	r0, r6
 8012120:	4639      	mov	r1, r7
 8012122:	f7ee f8b3 	bl	800028c <__adddf3>
 8012126:	4606      	mov	r6, r0
 8012128:	460f      	mov	r7, r1
 801212a:	f7ee fd15 	bl	8000b58 <__aeabi_d2iz>
 801212e:	2200      	movs	r2, #0
 8012130:	4682      	mov	sl, r0
 8012132:	2300      	movs	r3, #0
 8012134:	4630      	mov	r0, r6
 8012136:	4639      	mov	r1, r7
 8012138:	f7ee fcd0 	bl	8000adc <__aeabi_dcmplt>
 801213c:	b148      	cbz	r0, 8012152 <_dtoa_r+0x162>
 801213e:	4650      	mov	r0, sl
 8012140:	f7ee f9f0 	bl	8000524 <__aeabi_i2d>
 8012144:	4632      	mov	r2, r6
 8012146:	463b      	mov	r3, r7
 8012148:	f7ee fcbe 	bl	8000ac8 <__aeabi_dcmpeq>
 801214c:	b908      	cbnz	r0, 8012152 <_dtoa_r+0x162>
 801214e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8012152:	f1ba 0f16 	cmp.w	sl, #22
 8012156:	d859      	bhi.n	801220c <_dtoa_r+0x21c>
 8012158:	4970      	ldr	r1, [pc, #448]	; (801231c <_dtoa_r+0x32c>)
 801215a:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 801215e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8012162:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012166:	f7ee fcd7 	bl	8000b18 <__aeabi_dcmpgt>
 801216a:	2800      	cmp	r0, #0
 801216c:	d050      	beq.n	8012210 <_dtoa_r+0x220>
 801216e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8012172:	2300      	movs	r3, #0
 8012174:	930f      	str	r3, [sp, #60]	; 0x3c
 8012176:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8012178:	1b5d      	subs	r5, r3, r5
 801217a:	f1b5 0801 	subs.w	r8, r5, #1
 801217e:	bf49      	itett	mi
 8012180:	f1c5 0301 	rsbmi	r3, r5, #1
 8012184:	2300      	movpl	r3, #0
 8012186:	9305      	strmi	r3, [sp, #20]
 8012188:	f04f 0800 	movmi.w	r8, #0
 801218c:	bf58      	it	pl
 801218e:	9305      	strpl	r3, [sp, #20]
 8012190:	f1ba 0f00 	cmp.w	sl, #0
 8012194:	db3e      	blt.n	8012214 <_dtoa_r+0x224>
 8012196:	2300      	movs	r3, #0
 8012198:	44d0      	add	r8, sl
 801219a:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 801219e:	9307      	str	r3, [sp, #28]
 80121a0:	9b06      	ldr	r3, [sp, #24]
 80121a2:	2b09      	cmp	r3, #9
 80121a4:	f200 8090 	bhi.w	80122c8 <_dtoa_r+0x2d8>
 80121a8:	2b05      	cmp	r3, #5
 80121aa:	bfc4      	itt	gt
 80121ac:	3b04      	subgt	r3, #4
 80121ae:	9306      	strgt	r3, [sp, #24]
 80121b0:	9b06      	ldr	r3, [sp, #24]
 80121b2:	f1a3 0302 	sub.w	r3, r3, #2
 80121b6:	bfcc      	ite	gt
 80121b8:	2500      	movgt	r5, #0
 80121ba:	2501      	movle	r5, #1
 80121bc:	2b03      	cmp	r3, #3
 80121be:	f200 808f 	bhi.w	80122e0 <_dtoa_r+0x2f0>
 80121c2:	e8df f003 	tbb	[pc, r3]
 80121c6:	7f7d      	.short	0x7f7d
 80121c8:	7131      	.short	0x7131
 80121ca:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 80121ce:	441d      	add	r5, r3
 80121d0:	f205 4032 	addw	r0, r5, #1074	; 0x432
 80121d4:	2820      	cmp	r0, #32
 80121d6:	dd13      	ble.n	8012200 <_dtoa_r+0x210>
 80121d8:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 80121dc:	9b00      	ldr	r3, [sp, #0]
 80121de:	fa08 f800 	lsl.w	r8, r8, r0
 80121e2:	f205 4012 	addw	r0, r5, #1042	; 0x412
 80121e6:	fa23 f000 	lsr.w	r0, r3, r0
 80121ea:	ea48 0000 	orr.w	r0, r8, r0
 80121ee:	f7ee f989 	bl	8000504 <__aeabi_ui2d>
 80121f2:	2301      	movs	r3, #1
 80121f4:	4682      	mov	sl, r0
 80121f6:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 80121fa:	3d01      	subs	r5, #1
 80121fc:	9313      	str	r3, [sp, #76]	; 0x4c
 80121fe:	e772      	b.n	80120e6 <_dtoa_r+0xf6>
 8012200:	9b00      	ldr	r3, [sp, #0]
 8012202:	f1c0 0020 	rsb	r0, r0, #32
 8012206:	fa03 f000 	lsl.w	r0, r3, r0
 801220a:	e7f0      	b.n	80121ee <_dtoa_r+0x1fe>
 801220c:	2301      	movs	r3, #1
 801220e:	e7b1      	b.n	8012174 <_dtoa_r+0x184>
 8012210:	900f      	str	r0, [sp, #60]	; 0x3c
 8012212:	e7b0      	b.n	8012176 <_dtoa_r+0x186>
 8012214:	9b05      	ldr	r3, [sp, #20]
 8012216:	eba3 030a 	sub.w	r3, r3, sl
 801221a:	9305      	str	r3, [sp, #20]
 801221c:	f1ca 0300 	rsb	r3, sl, #0
 8012220:	9307      	str	r3, [sp, #28]
 8012222:	2300      	movs	r3, #0
 8012224:	930e      	str	r3, [sp, #56]	; 0x38
 8012226:	e7bb      	b.n	80121a0 <_dtoa_r+0x1b0>
 8012228:	2301      	movs	r3, #1
 801222a:	930a      	str	r3, [sp, #40]	; 0x28
 801222c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801222e:	2b00      	cmp	r3, #0
 8012230:	dd59      	ble.n	80122e6 <_dtoa_r+0x2f6>
 8012232:	9302      	str	r3, [sp, #8]
 8012234:	4699      	mov	r9, r3
 8012236:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8012238:	2200      	movs	r2, #0
 801223a:	6072      	str	r2, [r6, #4]
 801223c:	2204      	movs	r2, #4
 801223e:	f102 0014 	add.w	r0, r2, #20
 8012242:	4298      	cmp	r0, r3
 8012244:	6871      	ldr	r1, [r6, #4]
 8012246:	d953      	bls.n	80122f0 <_dtoa_r+0x300>
 8012248:	4620      	mov	r0, r4
 801224a:	f000 ffd7 	bl	80131fc <_Balloc>
 801224e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8012250:	6030      	str	r0, [r6, #0]
 8012252:	f1b9 0f0e 	cmp.w	r9, #14
 8012256:	f8d3 b000 	ldr.w	fp, [r3]
 801225a:	f200 80e6 	bhi.w	801242a <_dtoa_r+0x43a>
 801225e:	2d00      	cmp	r5, #0
 8012260:	f000 80e3 	beq.w	801242a <_dtoa_r+0x43a>
 8012264:	ed9d 7b00 	vldr	d7, [sp]
 8012268:	f1ba 0f00 	cmp.w	sl, #0
 801226c:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8012270:	dd74      	ble.n	801235c <_dtoa_r+0x36c>
 8012272:	4a2a      	ldr	r2, [pc, #168]	; (801231c <_dtoa_r+0x32c>)
 8012274:	f00a 030f 	and.w	r3, sl, #15
 8012278:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 801227c:	ed93 7b00 	vldr	d7, [r3]
 8012280:	ea4f 162a 	mov.w	r6, sl, asr #4
 8012284:	06f0      	lsls	r0, r6, #27
 8012286:	ed8d 7b08 	vstr	d7, [sp, #32]
 801228a:	d565      	bpl.n	8012358 <_dtoa_r+0x368>
 801228c:	4b24      	ldr	r3, [pc, #144]	; (8012320 <_dtoa_r+0x330>)
 801228e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8012292:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8012296:	f7ee fad9 	bl	800084c <__aeabi_ddiv>
 801229a:	e9cd 0100 	strd	r0, r1, [sp]
 801229e:	f006 060f 	and.w	r6, r6, #15
 80122a2:	2503      	movs	r5, #3
 80122a4:	4f1e      	ldr	r7, [pc, #120]	; (8012320 <_dtoa_r+0x330>)
 80122a6:	e04c      	b.n	8012342 <_dtoa_r+0x352>
 80122a8:	2301      	movs	r3, #1
 80122aa:	930a      	str	r3, [sp, #40]	; 0x28
 80122ac:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80122ae:	4453      	add	r3, sl
 80122b0:	f103 0901 	add.w	r9, r3, #1
 80122b4:	9302      	str	r3, [sp, #8]
 80122b6:	464b      	mov	r3, r9
 80122b8:	2b01      	cmp	r3, #1
 80122ba:	bfb8      	it	lt
 80122bc:	2301      	movlt	r3, #1
 80122be:	e7ba      	b.n	8012236 <_dtoa_r+0x246>
 80122c0:	2300      	movs	r3, #0
 80122c2:	e7b2      	b.n	801222a <_dtoa_r+0x23a>
 80122c4:	2300      	movs	r3, #0
 80122c6:	e7f0      	b.n	80122aa <_dtoa_r+0x2ba>
 80122c8:	2501      	movs	r5, #1
 80122ca:	2300      	movs	r3, #0
 80122cc:	9306      	str	r3, [sp, #24]
 80122ce:	950a      	str	r5, [sp, #40]	; 0x28
 80122d0:	f04f 33ff 	mov.w	r3, #4294967295
 80122d4:	9302      	str	r3, [sp, #8]
 80122d6:	4699      	mov	r9, r3
 80122d8:	2200      	movs	r2, #0
 80122da:	2312      	movs	r3, #18
 80122dc:	920b      	str	r2, [sp, #44]	; 0x2c
 80122de:	e7aa      	b.n	8012236 <_dtoa_r+0x246>
 80122e0:	2301      	movs	r3, #1
 80122e2:	930a      	str	r3, [sp, #40]	; 0x28
 80122e4:	e7f4      	b.n	80122d0 <_dtoa_r+0x2e0>
 80122e6:	2301      	movs	r3, #1
 80122e8:	9302      	str	r3, [sp, #8]
 80122ea:	4699      	mov	r9, r3
 80122ec:	461a      	mov	r2, r3
 80122ee:	e7f5      	b.n	80122dc <_dtoa_r+0x2ec>
 80122f0:	3101      	adds	r1, #1
 80122f2:	6071      	str	r1, [r6, #4]
 80122f4:	0052      	lsls	r2, r2, #1
 80122f6:	e7a2      	b.n	801223e <_dtoa_r+0x24e>
 80122f8:	636f4361 	.word	0x636f4361
 80122fc:	3fd287a7 	.word	0x3fd287a7
 8012300:	8b60c8b3 	.word	0x8b60c8b3
 8012304:	3fc68a28 	.word	0x3fc68a28
 8012308:	509f79fb 	.word	0x509f79fb
 801230c:	3fd34413 	.word	0x3fd34413
 8012310:	7ff00000 	.word	0x7ff00000
 8012314:	08015d19 	.word	0x08015d19
 8012318:	3ff80000 	.word	0x3ff80000
 801231c:	08015dd8 	.word	0x08015dd8
 8012320:	08015db0 	.word	0x08015db0
 8012324:	08015da1 	.word	0x08015da1
 8012328:	07f1      	lsls	r1, r6, #31
 801232a:	d508      	bpl.n	801233e <_dtoa_r+0x34e>
 801232c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8012330:	e9d7 2300 	ldrd	r2, r3, [r7]
 8012334:	f7ee f960 	bl	80005f8 <__aeabi_dmul>
 8012338:	e9cd 0108 	strd	r0, r1, [sp, #32]
 801233c:	3501      	adds	r5, #1
 801233e:	1076      	asrs	r6, r6, #1
 8012340:	3708      	adds	r7, #8
 8012342:	2e00      	cmp	r6, #0
 8012344:	d1f0      	bne.n	8012328 <_dtoa_r+0x338>
 8012346:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 801234a:	e9dd 0100 	ldrd	r0, r1, [sp]
 801234e:	f7ee fa7d 	bl	800084c <__aeabi_ddiv>
 8012352:	e9cd 0100 	strd	r0, r1, [sp]
 8012356:	e01a      	b.n	801238e <_dtoa_r+0x39e>
 8012358:	2502      	movs	r5, #2
 801235a:	e7a3      	b.n	80122a4 <_dtoa_r+0x2b4>
 801235c:	f000 80a0 	beq.w	80124a0 <_dtoa_r+0x4b0>
 8012360:	f1ca 0600 	rsb	r6, sl, #0
 8012364:	4b9f      	ldr	r3, [pc, #636]	; (80125e4 <_dtoa_r+0x5f4>)
 8012366:	4fa0      	ldr	r7, [pc, #640]	; (80125e8 <_dtoa_r+0x5f8>)
 8012368:	f006 020f 	and.w	r2, r6, #15
 801236c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8012370:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012374:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8012378:	f7ee f93e 	bl	80005f8 <__aeabi_dmul>
 801237c:	e9cd 0100 	strd	r0, r1, [sp]
 8012380:	1136      	asrs	r6, r6, #4
 8012382:	2300      	movs	r3, #0
 8012384:	2502      	movs	r5, #2
 8012386:	2e00      	cmp	r6, #0
 8012388:	d17f      	bne.n	801248a <_dtoa_r+0x49a>
 801238a:	2b00      	cmp	r3, #0
 801238c:	d1e1      	bne.n	8012352 <_dtoa_r+0x362>
 801238e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8012390:	2b00      	cmp	r3, #0
 8012392:	f000 8087 	beq.w	80124a4 <_dtoa_r+0x4b4>
 8012396:	e9dd 6700 	ldrd	r6, r7, [sp]
 801239a:	2200      	movs	r2, #0
 801239c:	4b93      	ldr	r3, [pc, #588]	; (80125ec <_dtoa_r+0x5fc>)
 801239e:	4630      	mov	r0, r6
 80123a0:	4639      	mov	r1, r7
 80123a2:	f7ee fb9b 	bl	8000adc <__aeabi_dcmplt>
 80123a6:	2800      	cmp	r0, #0
 80123a8:	d07c      	beq.n	80124a4 <_dtoa_r+0x4b4>
 80123aa:	f1b9 0f00 	cmp.w	r9, #0
 80123ae:	d079      	beq.n	80124a4 <_dtoa_r+0x4b4>
 80123b0:	9b02      	ldr	r3, [sp, #8]
 80123b2:	2b00      	cmp	r3, #0
 80123b4:	dd35      	ble.n	8012422 <_dtoa_r+0x432>
 80123b6:	f10a 33ff 	add.w	r3, sl, #4294967295
 80123ba:	9308      	str	r3, [sp, #32]
 80123bc:	4639      	mov	r1, r7
 80123be:	2200      	movs	r2, #0
 80123c0:	4b8b      	ldr	r3, [pc, #556]	; (80125f0 <_dtoa_r+0x600>)
 80123c2:	4630      	mov	r0, r6
 80123c4:	f7ee f918 	bl	80005f8 <__aeabi_dmul>
 80123c8:	e9cd 0100 	strd	r0, r1, [sp]
 80123cc:	9f02      	ldr	r7, [sp, #8]
 80123ce:	3501      	adds	r5, #1
 80123d0:	4628      	mov	r0, r5
 80123d2:	f7ee f8a7 	bl	8000524 <__aeabi_i2d>
 80123d6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80123da:	f7ee f90d 	bl	80005f8 <__aeabi_dmul>
 80123de:	2200      	movs	r2, #0
 80123e0:	4b84      	ldr	r3, [pc, #528]	; (80125f4 <_dtoa_r+0x604>)
 80123e2:	f7ed ff53 	bl	800028c <__adddf3>
 80123e6:	4605      	mov	r5, r0
 80123e8:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 80123ec:	2f00      	cmp	r7, #0
 80123ee:	d15d      	bne.n	80124ac <_dtoa_r+0x4bc>
 80123f0:	2200      	movs	r2, #0
 80123f2:	4b81      	ldr	r3, [pc, #516]	; (80125f8 <_dtoa_r+0x608>)
 80123f4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80123f8:	f7ed ff46 	bl	8000288 <__aeabi_dsub>
 80123fc:	462a      	mov	r2, r5
 80123fe:	4633      	mov	r3, r6
 8012400:	e9cd 0100 	strd	r0, r1, [sp]
 8012404:	f7ee fb88 	bl	8000b18 <__aeabi_dcmpgt>
 8012408:	2800      	cmp	r0, #0
 801240a:	f040 8288 	bne.w	801291e <_dtoa_r+0x92e>
 801240e:	462a      	mov	r2, r5
 8012410:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8012414:	e9dd 0100 	ldrd	r0, r1, [sp]
 8012418:	f7ee fb60 	bl	8000adc <__aeabi_dcmplt>
 801241c:	2800      	cmp	r0, #0
 801241e:	f040 827c 	bne.w	801291a <_dtoa_r+0x92a>
 8012422:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8012426:	e9cd 2300 	strd	r2, r3, [sp]
 801242a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801242c:	2b00      	cmp	r3, #0
 801242e:	f2c0 8150 	blt.w	80126d2 <_dtoa_r+0x6e2>
 8012432:	f1ba 0f0e 	cmp.w	sl, #14
 8012436:	f300 814c 	bgt.w	80126d2 <_dtoa_r+0x6e2>
 801243a:	4b6a      	ldr	r3, [pc, #424]	; (80125e4 <_dtoa_r+0x5f4>)
 801243c:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8012440:	ed93 7b00 	vldr	d7, [r3]
 8012444:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012446:	2b00      	cmp	r3, #0
 8012448:	ed8d 7b02 	vstr	d7, [sp, #8]
 801244c:	f280 80d8 	bge.w	8012600 <_dtoa_r+0x610>
 8012450:	f1b9 0f00 	cmp.w	r9, #0
 8012454:	f300 80d4 	bgt.w	8012600 <_dtoa_r+0x610>
 8012458:	f040 825e 	bne.w	8012918 <_dtoa_r+0x928>
 801245c:	2200      	movs	r2, #0
 801245e:	4b66      	ldr	r3, [pc, #408]	; (80125f8 <_dtoa_r+0x608>)
 8012460:	ec51 0b17 	vmov	r0, r1, d7
 8012464:	f7ee f8c8 	bl	80005f8 <__aeabi_dmul>
 8012468:	e9dd 2300 	ldrd	r2, r3, [sp]
 801246c:	f7ee fb4a 	bl	8000b04 <__aeabi_dcmpge>
 8012470:	464f      	mov	r7, r9
 8012472:	464e      	mov	r6, r9
 8012474:	2800      	cmp	r0, #0
 8012476:	f040 8234 	bne.w	80128e2 <_dtoa_r+0x8f2>
 801247a:	2331      	movs	r3, #49	; 0x31
 801247c:	f10b 0501 	add.w	r5, fp, #1
 8012480:	f88b 3000 	strb.w	r3, [fp]
 8012484:	f10a 0a01 	add.w	sl, sl, #1
 8012488:	e22f      	b.n	80128ea <_dtoa_r+0x8fa>
 801248a:	07f2      	lsls	r2, r6, #31
 801248c:	d505      	bpl.n	801249a <_dtoa_r+0x4aa>
 801248e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8012492:	f7ee f8b1 	bl	80005f8 <__aeabi_dmul>
 8012496:	3501      	adds	r5, #1
 8012498:	2301      	movs	r3, #1
 801249a:	1076      	asrs	r6, r6, #1
 801249c:	3708      	adds	r7, #8
 801249e:	e772      	b.n	8012386 <_dtoa_r+0x396>
 80124a0:	2502      	movs	r5, #2
 80124a2:	e774      	b.n	801238e <_dtoa_r+0x39e>
 80124a4:	f8cd a020 	str.w	sl, [sp, #32]
 80124a8:	464f      	mov	r7, r9
 80124aa:	e791      	b.n	80123d0 <_dtoa_r+0x3e0>
 80124ac:	4b4d      	ldr	r3, [pc, #308]	; (80125e4 <_dtoa_r+0x5f4>)
 80124ae:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80124b2:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 80124b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80124b8:	2b00      	cmp	r3, #0
 80124ba:	d047      	beq.n	801254c <_dtoa_r+0x55c>
 80124bc:	4602      	mov	r2, r0
 80124be:	460b      	mov	r3, r1
 80124c0:	2000      	movs	r0, #0
 80124c2:	494e      	ldr	r1, [pc, #312]	; (80125fc <_dtoa_r+0x60c>)
 80124c4:	f7ee f9c2 	bl	800084c <__aeabi_ddiv>
 80124c8:	462a      	mov	r2, r5
 80124ca:	4633      	mov	r3, r6
 80124cc:	f7ed fedc 	bl	8000288 <__aeabi_dsub>
 80124d0:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80124d4:	465d      	mov	r5, fp
 80124d6:	e9dd 0100 	ldrd	r0, r1, [sp]
 80124da:	f7ee fb3d 	bl	8000b58 <__aeabi_d2iz>
 80124de:	4606      	mov	r6, r0
 80124e0:	f7ee f820 	bl	8000524 <__aeabi_i2d>
 80124e4:	4602      	mov	r2, r0
 80124e6:	460b      	mov	r3, r1
 80124e8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80124ec:	f7ed fecc 	bl	8000288 <__aeabi_dsub>
 80124f0:	3630      	adds	r6, #48	; 0x30
 80124f2:	f805 6b01 	strb.w	r6, [r5], #1
 80124f6:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80124fa:	e9cd 0100 	strd	r0, r1, [sp]
 80124fe:	f7ee faed 	bl	8000adc <__aeabi_dcmplt>
 8012502:	2800      	cmp	r0, #0
 8012504:	d163      	bne.n	80125ce <_dtoa_r+0x5de>
 8012506:	e9dd 2300 	ldrd	r2, r3, [sp]
 801250a:	2000      	movs	r0, #0
 801250c:	4937      	ldr	r1, [pc, #220]	; (80125ec <_dtoa_r+0x5fc>)
 801250e:	f7ed febb 	bl	8000288 <__aeabi_dsub>
 8012512:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8012516:	f7ee fae1 	bl	8000adc <__aeabi_dcmplt>
 801251a:	2800      	cmp	r0, #0
 801251c:	f040 80b7 	bne.w	801268e <_dtoa_r+0x69e>
 8012520:	eba5 030b 	sub.w	r3, r5, fp
 8012524:	429f      	cmp	r7, r3
 8012526:	f77f af7c 	ble.w	8012422 <_dtoa_r+0x432>
 801252a:	2200      	movs	r2, #0
 801252c:	4b30      	ldr	r3, [pc, #192]	; (80125f0 <_dtoa_r+0x600>)
 801252e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8012532:	f7ee f861 	bl	80005f8 <__aeabi_dmul>
 8012536:	2200      	movs	r2, #0
 8012538:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 801253c:	4b2c      	ldr	r3, [pc, #176]	; (80125f0 <_dtoa_r+0x600>)
 801253e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8012542:	f7ee f859 	bl	80005f8 <__aeabi_dmul>
 8012546:	e9cd 0100 	strd	r0, r1, [sp]
 801254a:	e7c4      	b.n	80124d6 <_dtoa_r+0x4e6>
 801254c:	462a      	mov	r2, r5
 801254e:	4633      	mov	r3, r6
 8012550:	f7ee f852 	bl	80005f8 <__aeabi_dmul>
 8012554:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8012558:	eb0b 0507 	add.w	r5, fp, r7
 801255c:	465e      	mov	r6, fp
 801255e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8012562:	f7ee faf9 	bl	8000b58 <__aeabi_d2iz>
 8012566:	4607      	mov	r7, r0
 8012568:	f7ed ffdc 	bl	8000524 <__aeabi_i2d>
 801256c:	3730      	adds	r7, #48	; 0x30
 801256e:	4602      	mov	r2, r0
 8012570:	460b      	mov	r3, r1
 8012572:	e9dd 0100 	ldrd	r0, r1, [sp]
 8012576:	f7ed fe87 	bl	8000288 <__aeabi_dsub>
 801257a:	f806 7b01 	strb.w	r7, [r6], #1
 801257e:	42ae      	cmp	r6, r5
 8012580:	e9cd 0100 	strd	r0, r1, [sp]
 8012584:	f04f 0200 	mov.w	r2, #0
 8012588:	d126      	bne.n	80125d8 <_dtoa_r+0x5e8>
 801258a:	4b1c      	ldr	r3, [pc, #112]	; (80125fc <_dtoa_r+0x60c>)
 801258c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8012590:	f7ed fe7c 	bl	800028c <__adddf3>
 8012594:	4602      	mov	r2, r0
 8012596:	460b      	mov	r3, r1
 8012598:	e9dd 0100 	ldrd	r0, r1, [sp]
 801259c:	f7ee fabc 	bl	8000b18 <__aeabi_dcmpgt>
 80125a0:	2800      	cmp	r0, #0
 80125a2:	d174      	bne.n	801268e <_dtoa_r+0x69e>
 80125a4:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80125a8:	2000      	movs	r0, #0
 80125aa:	4914      	ldr	r1, [pc, #80]	; (80125fc <_dtoa_r+0x60c>)
 80125ac:	f7ed fe6c 	bl	8000288 <__aeabi_dsub>
 80125b0:	4602      	mov	r2, r0
 80125b2:	460b      	mov	r3, r1
 80125b4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80125b8:	f7ee fa90 	bl	8000adc <__aeabi_dcmplt>
 80125bc:	2800      	cmp	r0, #0
 80125be:	f43f af30 	beq.w	8012422 <_dtoa_r+0x432>
 80125c2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80125c6:	2b30      	cmp	r3, #48	; 0x30
 80125c8:	f105 32ff 	add.w	r2, r5, #4294967295
 80125cc:	d002      	beq.n	80125d4 <_dtoa_r+0x5e4>
 80125ce:	f8dd a020 	ldr.w	sl, [sp, #32]
 80125d2:	e04a      	b.n	801266a <_dtoa_r+0x67a>
 80125d4:	4615      	mov	r5, r2
 80125d6:	e7f4      	b.n	80125c2 <_dtoa_r+0x5d2>
 80125d8:	4b05      	ldr	r3, [pc, #20]	; (80125f0 <_dtoa_r+0x600>)
 80125da:	f7ee f80d 	bl	80005f8 <__aeabi_dmul>
 80125de:	e9cd 0100 	strd	r0, r1, [sp]
 80125e2:	e7bc      	b.n	801255e <_dtoa_r+0x56e>
 80125e4:	08015dd8 	.word	0x08015dd8
 80125e8:	08015db0 	.word	0x08015db0
 80125ec:	3ff00000 	.word	0x3ff00000
 80125f0:	40240000 	.word	0x40240000
 80125f4:	401c0000 	.word	0x401c0000
 80125f8:	40140000 	.word	0x40140000
 80125fc:	3fe00000 	.word	0x3fe00000
 8012600:	e9dd 6700 	ldrd	r6, r7, [sp]
 8012604:	465d      	mov	r5, fp
 8012606:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801260a:	4630      	mov	r0, r6
 801260c:	4639      	mov	r1, r7
 801260e:	f7ee f91d 	bl	800084c <__aeabi_ddiv>
 8012612:	f7ee faa1 	bl	8000b58 <__aeabi_d2iz>
 8012616:	4680      	mov	r8, r0
 8012618:	f7ed ff84 	bl	8000524 <__aeabi_i2d>
 801261c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8012620:	f7ed ffea 	bl	80005f8 <__aeabi_dmul>
 8012624:	4602      	mov	r2, r0
 8012626:	460b      	mov	r3, r1
 8012628:	4630      	mov	r0, r6
 801262a:	4639      	mov	r1, r7
 801262c:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8012630:	f7ed fe2a 	bl	8000288 <__aeabi_dsub>
 8012634:	f805 6b01 	strb.w	r6, [r5], #1
 8012638:	eba5 060b 	sub.w	r6, r5, fp
 801263c:	45b1      	cmp	r9, r6
 801263e:	4602      	mov	r2, r0
 8012640:	460b      	mov	r3, r1
 8012642:	d139      	bne.n	80126b8 <_dtoa_r+0x6c8>
 8012644:	f7ed fe22 	bl	800028c <__adddf3>
 8012648:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801264c:	4606      	mov	r6, r0
 801264e:	460f      	mov	r7, r1
 8012650:	f7ee fa62 	bl	8000b18 <__aeabi_dcmpgt>
 8012654:	b9c8      	cbnz	r0, 801268a <_dtoa_r+0x69a>
 8012656:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801265a:	4630      	mov	r0, r6
 801265c:	4639      	mov	r1, r7
 801265e:	f7ee fa33 	bl	8000ac8 <__aeabi_dcmpeq>
 8012662:	b110      	cbz	r0, 801266a <_dtoa_r+0x67a>
 8012664:	f018 0f01 	tst.w	r8, #1
 8012668:	d10f      	bne.n	801268a <_dtoa_r+0x69a>
 801266a:	9904      	ldr	r1, [sp, #16]
 801266c:	4620      	mov	r0, r4
 801266e:	f000 fdf9 	bl	8013264 <_Bfree>
 8012672:	2300      	movs	r3, #0
 8012674:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8012676:	702b      	strb	r3, [r5, #0]
 8012678:	f10a 0301 	add.w	r3, sl, #1
 801267c:	6013      	str	r3, [r2, #0]
 801267e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8012680:	2b00      	cmp	r3, #0
 8012682:	f000 8241 	beq.w	8012b08 <_dtoa_r+0xb18>
 8012686:	601d      	str	r5, [r3, #0]
 8012688:	e23e      	b.n	8012b08 <_dtoa_r+0xb18>
 801268a:	f8cd a020 	str.w	sl, [sp, #32]
 801268e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8012692:	2a39      	cmp	r2, #57	; 0x39
 8012694:	f105 33ff 	add.w	r3, r5, #4294967295
 8012698:	d108      	bne.n	80126ac <_dtoa_r+0x6bc>
 801269a:	459b      	cmp	fp, r3
 801269c:	d10a      	bne.n	80126b4 <_dtoa_r+0x6c4>
 801269e:	9b08      	ldr	r3, [sp, #32]
 80126a0:	3301      	adds	r3, #1
 80126a2:	9308      	str	r3, [sp, #32]
 80126a4:	2330      	movs	r3, #48	; 0x30
 80126a6:	f88b 3000 	strb.w	r3, [fp]
 80126aa:	465b      	mov	r3, fp
 80126ac:	781a      	ldrb	r2, [r3, #0]
 80126ae:	3201      	adds	r2, #1
 80126b0:	701a      	strb	r2, [r3, #0]
 80126b2:	e78c      	b.n	80125ce <_dtoa_r+0x5de>
 80126b4:	461d      	mov	r5, r3
 80126b6:	e7ea      	b.n	801268e <_dtoa_r+0x69e>
 80126b8:	2200      	movs	r2, #0
 80126ba:	4b9b      	ldr	r3, [pc, #620]	; (8012928 <_dtoa_r+0x938>)
 80126bc:	f7ed ff9c 	bl	80005f8 <__aeabi_dmul>
 80126c0:	2200      	movs	r2, #0
 80126c2:	2300      	movs	r3, #0
 80126c4:	4606      	mov	r6, r0
 80126c6:	460f      	mov	r7, r1
 80126c8:	f7ee f9fe 	bl	8000ac8 <__aeabi_dcmpeq>
 80126cc:	2800      	cmp	r0, #0
 80126ce:	d09a      	beq.n	8012606 <_dtoa_r+0x616>
 80126d0:	e7cb      	b.n	801266a <_dtoa_r+0x67a>
 80126d2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80126d4:	2a00      	cmp	r2, #0
 80126d6:	f000 808b 	beq.w	80127f0 <_dtoa_r+0x800>
 80126da:	9a06      	ldr	r2, [sp, #24]
 80126dc:	2a01      	cmp	r2, #1
 80126de:	dc6e      	bgt.n	80127be <_dtoa_r+0x7ce>
 80126e0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80126e2:	2a00      	cmp	r2, #0
 80126e4:	d067      	beq.n	80127b6 <_dtoa_r+0x7c6>
 80126e6:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80126ea:	9f07      	ldr	r7, [sp, #28]
 80126ec:	9d05      	ldr	r5, [sp, #20]
 80126ee:	9a05      	ldr	r2, [sp, #20]
 80126f0:	2101      	movs	r1, #1
 80126f2:	441a      	add	r2, r3
 80126f4:	4620      	mov	r0, r4
 80126f6:	9205      	str	r2, [sp, #20]
 80126f8:	4498      	add	r8, r3
 80126fa:	f000 fe91 	bl	8013420 <__i2b>
 80126fe:	4606      	mov	r6, r0
 8012700:	2d00      	cmp	r5, #0
 8012702:	dd0c      	ble.n	801271e <_dtoa_r+0x72e>
 8012704:	f1b8 0f00 	cmp.w	r8, #0
 8012708:	dd09      	ble.n	801271e <_dtoa_r+0x72e>
 801270a:	4545      	cmp	r5, r8
 801270c:	9a05      	ldr	r2, [sp, #20]
 801270e:	462b      	mov	r3, r5
 8012710:	bfa8      	it	ge
 8012712:	4643      	movge	r3, r8
 8012714:	1ad2      	subs	r2, r2, r3
 8012716:	9205      	str	r2, [sp, #20]
 8012718:	1aed      	subs	r5, r5, r3
 801271a:	eba8 0803 	sub.w	r8, r8, r3
 801271e:	9b07      	ldr	r3, [sp, #28]
 8012720:	b1eb      	cbz	r3, 801275e <_dtoa_r+0x76e>
 8012722:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012724:	2b00      	cmp	r3, #0
 8012726:	d067      	beq.n	80127f8 <_dtoa_r+0x808>
 8012728:	b18f      	cbz	r7, 801274e <_dtoa_r+0x75e>
 801272a:	4631      	mov	r1, r6
 801272c:	463a      	mov	r2, r7
 801272e:	4620      	mov	r0, r4
 8012730:	f000 ff16 	bl	8013560 <__pow5mult>
 8012734:	9a04      	ldr	r2, [sp, #16]
 8012736:	4601      	mov	r1, r0
 8012738:	4606      	mov	r6, r0
 801273a:	4620      	mov	r0, r4
 801273c:	f000 fe79 	bl	8013432 <__multiply>
 8012740:	9904      	ldr	r1, [sp, #16]
 8012742:	9008      	str	r0, [sp, #32]
 8012744:	4620      	mov	r0, r4
 8012746:	f000 fd8d 	bl	8013264 <_Bfree>
 801274a:	9b08      	ldr	r3, [sp, #32]
 801274c:	9304      	str	r3, [sp, #16]
 801274e:	9b07      	ldr	r3, [sp, #28]
 8012750:	1bda      	subs	r2, r3, r7
 8012752:	d004      	beq.n	801275e <_dtoa_r+0x76e>
 8012754:	9904      	ldr	r1, [sp, #16]
 8012756:	4620      	mov	r0, r4
 8012758:	f000 ff02 	bl	8013560 <__pow5mult>
 801275c:	9004      	str	r0, [sp, #16]
 801275e:	2101      	movs	r1, #1
 8012760:	4620      	mov	r0, r4
 8012762:	f000 fe5d 	bl	8013420 <__i2b>
 8012766:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8012768:	4607      	mov	r7, r0
 801276a:	2b00      	cmp	r3, #0
 801276c:	f000 81d0 	beq.w	8012b10 <_dtoa_r+0xb20>
 8012770:	461a      	mov	r2, r3
 8012772:	4601      	mov	r1, r0
 8012774:	4620      	mov	r0, r4
 8012776:	f000 fef3 	bl	8013560 <__pow5mult>
 801277a:	9b06      	ldr	r3, [sp, #24]
 801277c:	2b01      	cmp	r3, #1
 801277e:	4607      	mov	r7, r0
 8012780:	dc40      	bgt.n	8012804 <_dtoa_r+0x814>
 8012782:	9b00      	ldr	r3, [sp, #0]
 8012784:	2b00      	cmp	r3, #0
 8012786:	d139      	bne.n	80127fc <_dtoa_r+0x80c>
 8012788:	9b01      	ldr	r3, [sp, #4]
 801278a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801278e:	2b00      	cmp	r3, #0
 8012790:	d136      	bne.n	8012800 <_dtoa_r+0x810>
 8012792:	9b01      	ldr	r3, [sp, #4]
 8012794:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8012798:	0d1b      	lsrs	r3, r3, #20
 801279a:	051b      	lsls	r3, r3, #20
 801279c:	b12b      	cbz	r3, 80127aa <_dtoa_r+0x7ba>
 801279e:	9b05      	ldr	r3, [sp, #20]
 80127a0:	3301      	adds	r3, #1
 80127a2:	9305      	str	r3, [sp, #20]
 80127a4:	f108 0801 	add.w	r8, r8, #1
 80127a8:	2301      	movs	r3, #1
 80127aa:	9307      	str	r3, [sp, #28]
 80127ac:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80127ae:	2b00      	cmp	r3, #0
 80127b0:	d12a      	bne.n	8012808 <_dtoa_r+0x818>
 80127b2:	2001      	movs	r0, #1
 80127b4:	e030      	b.n	8012818 <_dtoa_r+0x828>
 80127b6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80127b8:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80127bc:	e795      	b.n	80126ea <_dtoa_r+0x6fa>
 80127be:	9b07      	ldr	r3, [sp, #28]
 80127c0:	f109 37ff 	add.w	r7, r9, #4294967295
 80127c4:	42bb      	cmp	r3, r7
 80127c6:	bfbf      	itttt	lt
 80127c8:	9b07      	ldrlt	r3, [sp, #28]
 80127ca:	9707      	strlt	r7, [sp, #28]
 80127cc:	1afa      	sublt	r2, r7, r3
 80127ce:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 80127d0:	bfbb      	ittet	lt
 80127d2:	189b      	addlt	r3, r3, r2
 80127d4:	930e      	strlt	r3, [sp, #56]	; 0x38
 80127d6:	1bdf      	subge	r7, r3, r7
 80127d8:	2700      	movlt	r7, #0
 80127da:	f1b9 0f00 	cmp.w	r9, #0
 80127de:	bfb5      	itete	lt
 80127e0:	9b05      	ldrlt	r3, [sp, #20]
 80127e2:	9d05      	ldrge	r5, [sp, #20]
 80127e4:	eba3 0509 	sublt.w	r5, r3, r9
 80127e8:	464b      	movge	r3, r9
 80127ea:	bfb8      	it	lt
 80127ec:	2300      	movlt	r3, #0
 80127ee:	e77e      	b.n	80126ee <_dtoa_r+0x6fe>
 80127f0:	9f07      	ldr	r7, [sp, #28]
 80127f2:	9d05      	ldr	r5, [sp, #20]
 80127f4:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 80127f6:	e783      	b.n	8012700 <_dtoa_r+0x710>
 80127f8:	9a07      	ldr	r2, [sp, #28]
 80127fa:	e7ab      	b.n	8012754 <_dtoa_r+0x764>
 80127fc:	2300      	movs	r3, #0
 80127fe:	e7d4      	b.n	80127aa <_dtoa_r+0x7ba>
 8012800:	9b00      	ldr	r3, [sp, #0]
 8012802:	e7d2      	b.n	80127aa <_dtoa_r+0x7ba>
 8012804:	2300      	movs	r3, #0
 8012806:	9307      	str	r3, [sp, #28]
 8012808:	693b      	ldr	r3, [r7, #16]
 801280a:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 801280e:	6918      	ldr	r0, [r3, #16]
 8012810:	f000 fdb8 	bl	8013384 <__hi0bits>
 8012814:	f1c0 0020 	rsb	r0, r0, #32
 8012818:	4440      	add	r0, r8
 801281a:	f010 001f 	ands.w	r0, r0, #31
 801281e:	d047      	beq.n	80128b0 <_dtoa_r+0x8c0>
 8012820:	f1c0 0320 	rsb	r3, r0, #32
 8012824:	2b04      	cmp	r3, #4
 8012826:	dd3b      	ble.n	80128a0 <_dtoa_r+0x8b0>
 8012828:	9b05      	ldr	r3, [sp, #20]
 801282a:	f1c0 001c 	rsb	r0, r0, #28
 801282e:	4403      	add	r3, r0
 8012830:	9305      	str	r3, [sp, #20]
 8012832:	4405      	add	r5, r0
 8012834:	4480      	add	r8, r0
 8012836:	9b05      	ldr	r3, [sp, #20]
 8012838:	2b00      	cmp	r3, #0
 801283a:	dd05      	ble.n	8012848 <_dtoa_r+0x858>
 801283c:	461a      	mov	r2, r3
 801283e:	9904      	ldr	r1, [sp, #16]
 8012840:	4620      	mov	r0, r4
 8012842:	f000 fedb 	bl	80135fc <__lshift>
 8012846:	9004      	str	r0, [sp, #16]
 8012848:	f1b8 0f00 	cmp.w	r8, #0
 801284c:	dd05      	ble.n	801285a <_dtoa_r+0x86a>
 801284e:	4639      	mov	r1, r7
 8012850:	4642      	mov	r2, r8
 8012852:	4620      	mov	r0, r4
 8012854:	f000 fed2 	bl	80135fc <__lshift>
 8012858:	4607      	mov	r7, r0
 801285a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801285c:	b353      	cbz	r3, 80128b4 <_dtoa_r+0x8c4>
 801285e:	4639      	mov	r1, r7
 8012860:	9804      	ldr	r0, [sp, #16]
 8012862:	f000 ff1f 	bl	80136a4 <__mcmp>
 8012866:	2800      	cmp	r0, #0
 8012868:	da24      	bge.n	80128b4 <_dtoa_r+0x8c4>
 801286a:	2300      	movs	r3, #0
 801286c:	220a      	movs	r2, #10
 801286e:	9904      	ldr	r1, [sp, #16]
 8012870:	4620      	mov	r0, r4
 8012872:	f000 fd0e 	bl	8013292 <__multadd>
 8012876:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012878:	9004      	str	r0, [sp, #16]
 801287a:	f10a 3aff 	add.w	sl, sl, #4294967295
 801287e:	2b00      	cmp	r3, #0
 8012880:	f000 814d 	beq.w	8012b1e <_dtoa_r+0xb2e>
 8012884:	2300      	movs	r3, #0
 8012886:	4631      	mov	r1, r6
 8012888:	220a      	movs	r2, #10
 801288a:	4620      	mov	r0, r4
 801288c:	f000 fd01 	bl	8013292 <__multadd>
 8012890:	9b02      	ldr	r3, [sp, #8]
 8012892:	2b00      	cmp	r3, #0
 8012894:	4606      	mov	r6, r0
 8012896:	dc4f      	bgt.n	8012938 <_dtoa_r+0x948>
 8012898:	9b06      	ldr	r3, [sp, #24]
 801289a:	2b02      	cmp	r3, #2
 801289c:	dd4c      	ble.n	8012938 <_dtoa_r+0x948>
 801289e:	e011      	b.n	80128c4 <_dtoa_r+0x8d4>
 80128a0:	d0c9      	beq.n	8012836 <_dtoa_r+0x846>
 80128a2:	9a05      	ldr	r2, [sp, #20]
 80128a4:	331c      	adds	r3, #28
 80128a6:	441a      	add	r2, r3
 80128a8:	9205      	str	r2, [sp, #20]
 80128aa:	441d      	add	r5, r3
 80128ac:	4498      	add	r8, r3
 80128ae:	e7c2      	b.n	8012836 <_dtoa_r+0x846>
 80128b0:	4603      	mov	r3, r0
 80128b2:	e7f6      	b.n	80128a2 <_dtoa_r+0x8b2>
 80128b4:	f1b9 0f00 	cmp.w	r9, #0
 80128b8:	dc38      	bgt.n	801292c <_dtoa_r+0x93c>
 80128ba:	9b06      	ldr	r3, [sp, #24]
 80128bc:	2b02      	cmp	r3, #2
 80128be:	dd35      	ble.n	801292c <_dtoa_r+0x93c>
 80128c0:	f8cd 9008 	str.w	r9, [sp, #8]
 80128c4:	9b02      	ldr	r3, [sp, #8]
 80128c6:	b963      	cbnz	r3, 80128e2 <_dtoa_r+0x8f2>
 80128c8:	4639      	mov	r1, r7
 80128ca:	2205      	movs	r2, #5
 80128cc:	4620      	mov	r0, r4
 80128ce:	f000 fce0 	bl	8013292 <__multadd>
 80128d2:	4601      	mov	r1, r0
 80128d4:	4607      	mov	r7, r0
 80128d6:	9804      	ldr	r0, [sp, #16]
 80128d8:	f000 fee4 	bl	80136a4 <__mcmp>
 80128dc:	2800      	cmp	r0, #0
 80128de:	f73f adcc 	bgt.w	801247a <_dtoa_r+0x48a>
 80128e2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80128e4:	465d      	mov	r5, fp
 80128e6:	ea6f 0a03 	mvn.w	sl, r3
 80128ea:	f04f 0900 	mov.w	r9, #0
 80128ee:	4639      	mov	r1, r7
 80128f0:	4620      	mov	r0, r4
 80128f2:	f000 fcb7 	bl	8013264 <_Bfree>
 80128f6:	2e00      	cmp	r6, #0
 80128f8:	f43f aeb7 	beq.w	801266a <_dtoa_r+0x67a>
 80128fc:	f1b9 0f00 	cmp.w	r9, #0
 8012900:	d005      	beq.n	801290e <_dtoa_r+0x91e>
 8012902:	45b1      	cmp	r9, r6
 8012904:	d003      	beq.n	801290e <_dtoa_r+0x91e>
 8012906:	4649      	mov	r1, r9
 8012908:	4620      	mov	r0, r4
 801290a:	f000 fcab 	bl	8013264 <_Bfree>
 801290e:	4631      	mov	r1, r6
 8012910:	4620      	mov	r0, r4
 8012912:	f000 fca7 	bl	8013264 <_Bfree>
 8012916:	e6a8      	b.n	801266a <_dtoa_r+0x67a>
 8012918:	2700      	movs	r7, #0
 801291a:	463e      	mov	r6, r7
 801291c:	e7e1      	b.n	80128e2 <_dtoa_r+0x8f2>
 801291e:	f8dd a020 	ldr.w	sl, [sp, #32]
 8012922:	463e      	mov	r6, r7
 8012924:	e5a9      	b.n	801247a <_dtoa_r+0x48a>
 8012926:	bf00      	nop
 8012928:	40240000 	.word	0x40240000
 801292c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801292e:	f8cd 9008 	str.w	r9, [sp, #8]
 8012932:	2b00      	cmp	r3, #0
 8012934:	f000 80fa 	beq.w	8012b2c <_dtoa_r+0xb3c>
 8012938:	2d00      	cmp	r5, #0
 801293a:	dd05      	ble.n	8012948 <_dtoa_r+0x958>
 801293c:	4631      	mov	r1, r6
 801293e:	462a      	mov	r2, r5
 8012940:	4620      	mov	r0, r4
 8012942:	f000 fe5b 	bl	80135fc <__lshift>
 8012946:	4606      	mov	r6, r0
 8012948:	9b07      	ldr	r3, [sp, #28]
 801294a:	2b00      	cmp	r3, #0
 801294c:	d04c      	beq.n	80129e8 <_dtoa_r+0x9f8>
 801294e:	6871      	ldr	r1, [r6, #4]
 8012950:	4620      	mov	r0, r4
 8012952:	f000 fc53 	bl	80131fc <_Balloc>
 8012956:	6932      	ldr	r2, [r6, #16]
 8012958:	3202      	adds	r2, #2
 801295a:	4605      	mov	r5, r0
 801295c:	0092      	lsls	r2, r2, #2
 801295e:	f106 010c 	add.w	r1, r6, #12
 8012962:	300c      	adds	r0, #12
 8012964:	f7fd fcc4 	bl	80102f0 <memcpy>
 8012968:	2201      	movs	r2, #1
 801296a:	4629      	mov	r1, r5
 801296c:	4620      	mov	r0, r4
 801296e:	f000 fe45 	bl	80135fc <__lshift>
 8012972:	9b00      	ldr	r3, [sp, #0]
 8012974:	f8cd b014 	str.w	fp, [sp, #20]
 8012978:	f003 0301 	and.w	r3, r3, #1
 801297c:	46b1      	mov	r9, r6
 801297e:	9307      	str	r3, [sp, #28]
 8012980:	4606      	mov	r6, r0
 8012982:	4639      	mov	r1, r7
 8012984:	9804      	ldr	r0, [sp, #16]
 8012986:	f7ff faa5 	bl	8011ed4 <quorem>
 801298a:	4649      	mov	r1, r9
 801298c:	4605      	mov	r5, r0
 801298e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8012992:	9804      	ldr	r0, [sp, #16]
 8012994:	f000 fe86 	bl	80136a4 <__mcmp>
 8012998:	4632      	mov	r2, r6
 801299a:	9000      	str	r0, [sp, #0]
 801299c:	4639      	mov	r1, r7
 801299e:	4620      	mov	r0, r4
 80129a0:	f000 fe9a 	bl	80136d8 <__mdiff>
 80129a4:	68c3      	ldr	r3, [r0, #12]
 80129a6:	4602      	mov	r2, r0
 80129a8:	bb03      	cbnz	r3, 80129ec <_dtoa_r+0x9fc>
 80129aa:	4601      	mov	r1, r0
 80129ac:	9008      	str	r0, [sp, #32]
 80129ae:	9804      	ldr	r0, [sp, #16]
 80129b0:	f000 fe78 	bl	80136a4 <__mcmp>
 80129b4:	9a08      	ldr	r2, [sp, #32]
 80129b6:	4603      	mov	r3, r0
 80129b8:	4611      	mov	r1, r2
 80129ba:	4620      	mov	r0, r4
 80129bc:	9308      	str	r3, [sp, #32]
 80129be:	f000 fc51 	bl	8013264 <_Bfree>
 80129c2:	9b08      	ldr	r3, [sp, #32]
 80129c4:	b9a3      	cbnz	r3, 80129f0 <_dtoa_r+0xa00>
 80129c6:	9a06      	ldr	r2, [sp, #24]
 80129c8:	b992      	cbnz	r2, 80129f0 <_dtoa_r+0xa00>
 80129ca:	9a07      	ldr	r2, [sp, #28]
 80129cc:	b982      	cbnz	r2, 80129f0 <_dtoa_r+0xa00>
 80129ce:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80129d2:	d029      	beq.n	8012a28 <_dtoa_r+0xa38>
 80129d4:	9b00      	ldr	r3, [sp, #0]
 80129d6:	2b00      	cmp	r3, #0
 80129d8:	dd01      	ble.n	80129de <_dtoa_r+0x9ee>
 80129da:	f105 0831 	add.w	r8, r5, #49	; 0x31
 80129de:	9b05      	ldr	r3, [sp, #20]
 80129e0:	1c5d      	adds	r5, r3, #1
 80129e2:	f883 8000 	strb.w	r8, [r3]
 80129e6:	e782      	b.n	80128ee <_dtoa_r+0x8fe>
 80129e8:	4630      	mov	r0, r6
 80129ea:	e7c2      	b.n	8012972 <_dtoa_r+0x982>
 80129ec:	2301      	movs	r3, #1
 80129ee:	e7e3      	b.n	80129b8 <_dtoa_r+0x9c8>
 80129f0:	9a00      	ldr	r2, [sp, #0]
 80129f2:	2a00      	cmp	r2, #0
 80129f4:	db04      	blt.n	8012a00 <_dtoa_r+0xa10>
 80129f6:	d125      	bne.n	8012a44 <_dtoa_r+0xa54>
 80129f8:	9a06      	ldr	r2, [sp, #24]
 80129fa:	bb1a      	cbnz	r2, 8012a44 <_dtoa_r+0xa54>
 80129fc:	9a07      	ldr	r2, [sp, #28]
 80129fe:	bb0a      	cbnz	r2, 8012a44 <_dtoa_r+0xa54>
 8012a00:	2b00      	cmp	r3, #0
 8012a02:	ddec      	ble.n	80129de <_dtoa_r+0x9ee>
 8012a04:	2201      	movs	r2, #1
 8012a06:	9904      	ldr	r1, [sp, #16]
 8012a08:	4620      	mov	r0, r4
 8012a0a:	f000 fdf7 	bl	80135fc <__lshift>
 8012a0e:	4639      	mov	r1, r7
 8012a10:	9004      	str	r0, [sp, #16]
 8012a12:	f000 fe47 	bl	80136a4 <__mcmp>
 8012a16:	2800      	cmp	r0, #0
 8012a18:	dc03      	bgt.n	8012a22 <_dtoa_r+0xa32>
 8012a1a:	d1e0      	bne.n	80129de <_dtoa_r+0x9ee>
 8012a1c:	f018 0f01 	tst.w	r8, #1
 8012a20:	d0dd      	beq.n	80129de <_dtoa_r+0x9ee>
 8012a22:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8012a26:	d1d8      	bne.n	80129da <_dtoa_r+0x9ea>
 8012a28:	9b05      	ldr	r3, [sp, #20]
 8012a2a:	9a05      	ldr	r2, [sp, #20]
 8012a2c:	1c5d      	adds	r5, r3, #1
 8012a2e:	2339      	movs	r3, #57	; 0x39
 8012a30:	7013      	strb	r3, [r2, #0]
 8012a32:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8012a36:	2b39      	cmp	r3, #57	; 0x39
 8012a38:	f105 32ff 	add.w	r2, r5, #4294967295
 8012a3c:	d04f      	beq.n	8012ade <_dtoa_r+0xaee>
 8012a3e:	3301      	adds	r3, #1
 8012a40:	7013      	strb	r3, [r2, #0]
 8012a42:	e754      	b.n	80128ee <_dtoa_r+0x8fe>
 8012a44:	9a05      	ldr	r2, [sp, #20]
 8012a46:	2b00      	cmp	r3, #0
 8012a48:	f102 0501 	add.w	r5, r2, #1
 8012a4c:	dd06      	ble.n	8012a5c <_dtoa_r+0xa6c>
 8012a4e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8012a52:	d0e9      	beq.n	8012a28 <_dtoa_r+0xa38>
 8012a54:	f108 0801 	add.w	r8, r8, #1
 8012a58:	9b05      	ldr	r3, [sp, #20]
 8012a5a:	e7c2      	b.n	80129e2 <_dtoa_r+0x9f2>
 8012a5c:	9a02      	ldr	r2, [sp, #8]
 8012a5e:	f805 8c01 	strb.w	r8, [r5, #-1]
 8012a62:	eba5 030b 	sub.w	r3, r5, fp
 8012a66:	4293      	cmp	r3, r2
 8012a68:	d021      	beq.n	8012aae <_dtoa_r+0xabe>
 8012a6a:	2300      	movs	r3, #0
 8012a6c:	220a      	movs	r2, #10
 8012a6e:	9904      	ldr	r1, [sp, #16]
 8012a70:	4620      	mov	r0, r4
 8012a72:	f000 fc0e 	bl	8013292 <__multadd>
 8012a76:	45b1      	cmp	r9, r6
 8012a78:	9004      	str	r0, [sp, #16]
 8012a7a:	f04f 0300 	mov.w	r3, #0
 8012a7e:	f04f 020a 	mov.w	r2, #10
 8012a82:	4649      	mov	r1, r9
 8012a84:	4620      	mov	r0, r4
 8012a86:	d105      	bne.n	8012a94 <_dtoa_r+0xaa4>
 8012a88:	f000 fc03 	bl	8013292 <__multadd>
 8012a8c:	4681      	mov	r9, r0
 8012a8e:	4606      	mov	r6, r0
 8012a90:	9505      	str	r5, [sp, #20]
 8012a92:	e776      	b.n	8012982 <_dtoa_r+0x992>
 8012a94:	f000 fbfd 	bl	8013292 <__multadd>
 8012a98:	4631      	mov	r1, r6
 8012a9a:	4681      	mov	r9, r0
 8012a9c:	2300      	movs	r3, #0
 8012a9e:	220a      	movs	r2, #10
 8012aa0:	4620      	mov	r0, r4
 8012aa2:	f000 fbf6 	bl	8013292 <__multadd>
 8012aa6:	4606      	mov	r6, r0
 8012aa8:	e7f2      	b.n	8012a90 <_dtoa_r+0xaa0>
 8012aaa:	f04f 0900 	mov.w	r9, #0
 8012aae:	2201      	movs	r2, #1
 8012ab0:	9904      	ldr	r1, [sp, #16]
 8012ab2:	4620      	mov	r0, r4
 8012ab4:	f000 fda2 	bl	80135fc <__lshift>
 8012ab8:	4639      	mov	r1, r7
 8012aba:	9004      	str	r0, [sp, #16]
 8012abc:	f000 fdf2 	bl	80136a4 <__mcmp>
 8012ac0:	2800      	cmp	r0, #0
 8012ac2:	dcb6      	bgt.n	8012a32 <_dtoa_r+0xa42>
 8012ac4:	d102      	bne.n	8012acc <_dtoa_r+0xadc>
 8012ac6:	f018 0f01 	tst.w	r8, #1
 8012aca:	d1b2      	bne.n	8012a32 <_dtoa_r+0xa42>
 8012acc:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8012ad0:	2b30      	cmp	r3, #48	; 0x30
 8012ad2:	f105 32ff 	add.w	r2, r5, #4294967295
 8012ad6:	f47f af0a 	bne.w	80128ee <_dtoa_r+0x8fe>
 8012ada:	4615      	mov	r5, r2
 8012adc:	e7f6      	b.n	8012acc <_dtoa_r+0xadc>
 8012ade:	4593      	cmp	fp, r2
 8012ae0:	d105      	bne.n	8012aee <_dtoa_r+0xafe>
 8012ae2:	2331      	movs	r3, #49	; 0x31
 8012ae4:	f10a 0a01 	add.w	sl, sl, #1
 8012ae8:	f88b 3000 	strb.w	r3, [fp]
 8012aec:	e6ff      	b.n	80128ee <_dtoa_r+0x8fe>
 8012aee:	4615      	mov	r5, r2
 8012af0:	e79f      	b.n	8012a32 <_dtoa_r+0xa42>
 8012af2:	f8df b064 	ldr.w	fp, [pc, #100]	; 8012b58 <_dtoa_r+0xb68>
 8012af6:	e007      	b.n	8012b08 <_dtoa_r+0xb18>
 8012af8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8012afa:	f8df b060 	ldr.w	fp, [pc, #96]	; 8012b5c <_dtoa_r+0xb6c>
 8012afe:	b11b      	cbz	r3, 8012b08 <_dtoa_r+0xb18>
 8012b00:	f10b 0308 	add.w	r3, fp, #8
 8012b04:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8012b06:	6013      	str	r3, [r2, #0]
 8012b08:	4658      	mov	r0, fp
 8012b0a:	b017      	add	sp, #92	; 0x5c
 8012b0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012b10:	9b06      	ldr	r3, [sp, #24]
 8012b12:	2b01      	cmp	r3, #1
 8012b14:	f77f ae35 	ble.w	8012782 <_dtoa_r+0x792>
 8012b18:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8012b1a:	9307      	str	r3, [sp, #28]
 8012b1c:	e649      	b.n	80127b2 <_dtoa_r+0x7c2>
 8012b1e:	9b02      	ldr	r3, [sp, #8]
 8012b20:	2b00      	cmp	r3, #0
 8012b22:	dc03      	bgt.n	8012b2c <_dtoa_r+0xb3c>
 8012b24:	9b06      	ldr	r3, [sp, #24]
 8012b26:	2b02      	cmp	r3, #2
 8012b28:	f73f aecc 	bgt.w	80128c4 <_dtoa_r+0x8d4>
 8012b2c:	465d      	mov	r5, fp
 8012b2e:	4639      	mov	r1, r7
 8012b30:	9804      	ldr	r0, [sp, #16]
 8012b32:	f7ff f9cf 	bl	8011ed4 <quorem>
 8012b36:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8012b3a:	f805 8b01 	strb.w	r8, [r5], #1
 8012b3e:	9a02      	ldr	r2, [sp, #8]
 8012b40:	eba5 030b 	sub.w	r3, r5, fp
 8012b44:	429a      	cmp	r2, r3
 8012b46:	ddb0      	ble.n	8012aaa <_dtoa_r+0xaba>
 8012b48:	2300      	movs	r3, #0
 8012b4a:	220a      	movs	r2, #10
 8012b4c:	9904      	ldr	r1, [sp, #16]
 8012b4e:	4620      	mov	r0, r4
 8012b50:	f000 fb9f 	bl	8013292 <__multadd>
 8012b54:	9004      	str	r0, [sp, #16]
 8012b56:	e7ea      	b.n	8012b2e <_dtoa_r+0xb3e>
 8012b58:	08015d18 	.word	0x08015d18
 8012b5c:	08015d98 	.word	0x08015d98

08012b60 <rshift>:
 8012b60:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012b62:	6906      	ldr	r6, [r0, #16]
 8012b64:	114b      	asrs	r3, r1, #5
 8012b66:	429e      	cmp	r6, r3
 8012b68:	f100 0414 	add.w	r4, r0, #20
 8012b6c:	dd30      	ble.n	8012bd0 <rshift+0x70>
 8012b6e:	f011 011f 	ands.w	r1, r1, #31
 8012b72:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 8012b76:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 8012b7a:	d108      	bne.n	8012b8e <rshift+0x2e>
 8012b7c:	4621      	mov	r1, r4
 8012b7e:	42b2      	cmp	r2, r6
 8012b80:	460b      	mov	r3, r1
 8012b82:	d211      	bcs.n	8012ba8 <rshift+0x48>
 8012b84:	f852 3b04 	ldr.w	r3, [r2], #4
 8012b88:	f841 3b04 	str.w	r3, [r1], #4
 8012b8c:	e7f7      	b.n	8012b7e <rshift+0x1e>
 8012b8e:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 8012b92:	f1c1 0c20 	rsb	ip, r1, #32
 8012b96:	40cd      	lsrs	r5, r1
 8012b98:	3204      	adds	r2, #4
 8012b9a:	4623      	mov	r3, r4
 8012b9c:	42b2      	cmp	r2, r6
 8012b9e:	4617      	mov	r7, r2
 8012ba0:	d30c      	bcc.n	8012bbc <rshift+0x5c>
 8012ba2:	601d      	str	r5, [r3, #0]
 8012ba4:	b105      	cbz	r5, 8012ba8 <rshift+0x48>
 8012ba6:	3304      	adds	r3, #4
 8012ba8:	1b1a      	subs	r2, r3, r4
 8012baa:	42a3      	cmp	r3, r4
 8012bac:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8012bb0:	bf08      	it	eq
 8012bb2:	2300      	moveq	r3, #0
 8012bb4:	6102      	str	r2, [r0, #16]
 8012bb6:	bf08      	it	eq
 8012bb8:	6143      	streq	r3, [r0, #20]
 8012bba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012bbc:	683f      	ldr	r7, [r7, #0]
 8012bbe:	fa07 f70c 	lsl.w	r7, r7, ip
 8012bc2:	433d      	orrs	r5, r7
 8012bc4:	f843 5b04 	str.w	r5, [r3], #4
 8012bc8:	f852 5b04 	ldr.w	r5, [r2], #4
 8012bcc:	40cd      	lsrs	r5, r1
 8012bce:	e7e5      	b.n	8012b9c <rshift+0x3c>
 8012bd0:	4623      	mov	r3, r4
 8012bd2:	e7e9      	b.n	8012ba8 <rshift+0x48>

08012bd4 <__hexdig_fun>:
 8012bd4:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8012bd8:	2b09      	cmp	r3, #9
 8012bda:	d802      	bhi.n	8012be2 <__hexdig_fun+0xe>
 8012bdc:	3820      	subs	r0, #32
 8012bde:	b2c0      	uxtb	r0, r0
 8012be0:	4770      	bx	lr
 8012be2:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8012be6:	2b05      	cmp	r3, #5
 8012be8:	d801      	bhi.n	8012bee <__hexdig_fun+0x1a>
 8012bea:	3847      	subs	r0, #71	; 0x47
 8012bec:	e7f7      	b.n	8012bde <__hexdig_fun+0xa>
 8012bee:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8012bf2:	2b05      	cmp	r3, #5
 8012bf4:	d801      	bhi.n	8012bfa <__hexdig_fun+0x26>
 8012bf6:	3827      	subs	r0, #39	; 0x27
 8012bf8:	e7f1      	b.n	8012bde <__hexdig_fun+0xa>
 8012bfa:	2000      	movs	r0, #0
 8012bfc:	4770      	bx	lr

08012bfe <__gethex>:
 8012bfe:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012c02:	b08b      	sub	sp, #44	; 0x2c
 8012c04:	468a      	mov	sl, r1
 8012c06:	9002      	str	r0, [sp, #8]
 8012c08:	9816      	ldr	r0, [sp, #88]	; 0x58
 8012c0a:	9306      	str	r3, [sp, #24]
 8012c0c:	4690      	mov	r8, r2
 8012c0e:	f000 fad0 	bl	80131b2 <__localeconv_l>
 8012c12:	6803      	ldr	r3, [r0, #0]
 8012c14:	9303      	str	r3, [sp, #12]
 8012c16:	4618      	mov	r0, r3
 8012c18:	f7ed fada 	bl	80001d0 <strlen>
 8012c1c:	9b03      	ldr	r3, [sp, #12]
 8012c1e:	9001      	str	r0, [sp, #4]
 8012c20:	4403      	add	r3, r0
 8012c22:	f04f 0b00 	mov.w	fp, #0
 8012c26:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8012c2a:	9307      	str	r3, [sp, #28]
 8012c2c:	f8da 3000 	ldr.w	r3, [sl]
 8012c30:	3302      	adds	r3, #2
 8012c32:	461f      	mov	r7, r3
 8012c34:	f813 0b01 	ldrb.w	r0, [r3], #1
 8012c38:	2830      	cmp	r0, #48	; 0x30
 8012c3a:	d06c      	beq.n	8012d16 <__gethex+0x118>
 8012c3c:	f7ff ffca 	bl	8012bd4 <__hexdig_fun>
 8012c40:	4604      	mov	r4, r0
 8012c42:	2800      	cmp	r0, #0
 8012c44:	d16a      	bne.n	8012d1c <__gethex+0x11e>
 8012c46:	9a01      	ldr	r2, [sp, #4]
 8012c48:	9903      	ldr	r1, [sp, #12]
 8012c4a:	4638      	mov	r0, r7
 8012c4c:	f7fe fa80 	bl	8011150 <strncmp>
 8012c50:	2800      	cmp	r0, #0
 8012c52:	d166      	bne.n	8012d22 <__gethex+0x124>
 8012c54:	9b01      	ldr	r3, [sp, #4]
 8012c56:	5cf8      	ldrb	r0, [r7, r3]
 8012c58:	18fe      	adds	r6, r7, r3
 8012c5a:	f7ff ffbb 	bl	8012bd4 <__hexdig_fun>
 8012c5e:	2800      	cmp	r0, #0
 8012c60:	d062      	beq.n	8012d28 <__gethex+0x12a>
 8012c62:	4633      	mov	r3, r6
 8012c64:	7818      	ldrb	r0, [r3, #0]
 8012c66:	2830      	cmp	r0, #48	; 0x30
 8012c68:	461f      	mov	r7, r3
 8012c6a:	f103 0301 	add.w	r3, r3, #1
 8012c6e:	d0f9      	beq.n	8012c64 <__gethex+0x66>
 8012c70:	f7ff ffb0 	bl	8012bd4 <__hexdig_fun>
 8012c74:	fab0 f580 	clz	r5, r0
 8012c78:	096d      	lsrs	r5, r5, #5
 8012c7a:	4634      	mov	r4, r6
 8012c7c:	f04f 0b01 	mov.w	fp, #1
 8012c80:	463a      	mov	r2, r7
 8012c82:	4616      	mov	r6, r2
 8012c84:	3201      	adds	r2, #1
 8012c86:	7830      	ldrb	r0, [r6, #0]
 8012c88:	f7ff ffa4 	bl	8012bd4 <__hexdig_fun>
 8012c8c:	2800      	cmp	r0, #0
 8012c8e:	d1f8      	bne.n	8012c82 <__gethex+0x84>
 8012c90:	9a01      	ldr	r2, [sp, #4]
 8012c92:	9903      	ldr	r1, [sp, #12]
 8012c94:	4630      	mov	r0, r6
 8012c96:	f7fe fa5b 	bl	8011150 <strncmp>
 8012c9a:	b950      	cbnz	r0, 8012cb2 <__gethex+0xb4>
 8012c9c:	b954      	cbnz	r4, 8012cb4 <__gethex+0xb6>
 8012c9e:	9b01      	ldr	r3, [sp, #4]
 8012ca0:	18f4      	adds	r4, r6, r3
 8012ca2:	4622      	mov	r2, r4
 8012ca4:	4616      	mov	r6, r2
 8012ca6:	3201      	adds	r2, #1
 8012ca8:	7830      	ldrb	r0, [r6, #0]
 8012caa:	f7ff ff93 	bl	8012bd4 <__hexdig_fun>
 8012cae:	2800      	cmp	r0, #0
 8012cb0:	d1f8      	bne.n	8012ca4 <__gethex+0xa6>
 8012cb2:	b10c      	cbz	r4, 8012cb8 <__gethex+0xba>
 8012cb4:	1ba4      	subs	r4, r4, r6
 8012cb6:	00a4      	lsls	r4, r4, #2
 8012cb8:	7833      	ldrb	r3, [r6, #0]
 8012cba:	2b50      	cmp	r3, #80	; 0x50
 8012cbc:	d001      	beq.n	8012cc2 <__gethex+0xc4>
 8012cbe:	2b70      	cmp	r3, #112	; 0x70
 8012cc0:	d140      	bne.n	8012d44 <__gethex+0x146>
 8012cc2:	7873      	ldrb	r3, [r6, #1]
 8012cc4:	2b2b      	cmp	r3, #43	; 0x2b
 8012cc6:	d031      	beq.n	8012d2c <__gethex+0x12e>
 8012cc8:	2b2d      	cmp	r3, #45	; 0x2d
 8012cca:	d033      	beq.n	8012d34 <__gethex+0x136>
 8012ccc:	1c71      	adds	r1, r6, #1
 8012cce:	f04f 0900 	mov.w	r9, #0
 8012cd2:	7808      	ldrb	r0, [r1, #0]
 8012cd4:	f7ff ff7e 	bl	8012bd4 <__hexdig_fun>
 8012cd8:	1e43      	subs	r3, r0, #1
 8012cda:	b2db      	uxtb	r3, r3
 8012cdc:	2b18      	cmp	r3, #24
 8012cde:	d831      	bhi.n	8012d44 <__gethex+0x146>
 8012ce0:	f1a0 0210 	sub.w	r2, r0, #16
 8012ce4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8012ce8:	f7ff ff74 	bl	8012bd4 <__hexdig_fun>
 8012cec:	1e43      	subs	r3, r0, #1
 8012cee:	b2db      	uxtb	r3, r3
 8012cf0:	2b18      	cmp	r3, #24
 8012cf2:	d922      	bls.n	8012d3a <__gethex+0x13c>
 8012cf4:	f1b9 0f00 	cmp.w	r9, #0
 8012cf8:	d000      	beq.n	8012cfc <__gethex+0xfe>
 8012cfa:	4252      	negs	r2, r2
 8012cfc:	4414      	add	r4, r2
 8012cfe:	f8ca 1000 	str.w	r1, [sl]
 8012d02:	b30d      	cbz	r5, 8012d48 <__gethex+0x14a>
 8012d04:	f1bb 0f00 	cmp.w	fp, #0
 8012d08:	bf0c      	ite	eq
 8012d0a:	2706      	moveq	r7, #6
 8012d0c:	2700      	movne	r7, #0
 8012d0e:	4638      	mov	r0, r7
 8012d10:	b00b      	add	sp, #44	; 0x2c
 8012d12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012d16:	f10b 0b01 	add.w	fp, fp, #1
 8012d1a:	e78a      	b.n	8012c32 <__gethex+0x34>
 8012d1c:	2500      	movs	r5, #0
 8012d1e:	462c      	mov	r4, r5
 8012d20:	e7ae      	b.n	8012c80 <__gethex+0x82>
 8012d22:	463e      	mov	r6, r7
 8012d24:	2501      	movs	r5, #1
 8012d26:	e7c7      	b.n	8012cb8 <__gethex+0xba>
 8012d28:	4604      	mov	r4, r0
 8012d2a:	e7fb      	b.n	8012d24 <__gethex+0x126>
 8012d2c:	f04f 0900 	mov.w	r9, #0
 8012d30:	1cb1      	adds	r1, r6, #2
 8012d32:	e7ce      	b.n	8012cd2 <__gethex+0xd4>
 8012d34:	f04f 0901 	mov.w	r9, #1
 8012d38:	e7fa      	b.n	8012d30 <__gethex+0x132>
 8012d3a:	230a      	movs	r3, #10
 8012d3c:	fb03 0202 	mla	r2, r3, r2, r0
 8012d40:	3a10      	subs	r2, #16
 8012d42:	e7cf      	b.n	8012ce4 <__gethex+0xe6>
 8012d44:	4631      	mov	r1, r6
 8012d46:	e7da      	b.n	8012cfe <__gethex+0x100>
 8012d48:	1bf3      	subs	r3, r6, r7
 8012d4a:	3b01      	subs	r3, #1
 8012d4c:	4629      	mov	r1, r5
 8012d4e:	2b07      	cmp	r3, #7
 8012d50:	dc49      	bgt.n	8012de6 <__gethex+0x1e8>
 8012d52:	9802      	ldr	r0, [sp, #8]
 8012d54:	f000 fa52 	bl	80131fc <_Balloc>
 8012d58:	9b01      	ldr	r3, [sp, #4]
 8012d5a:	f100 0914 	add.w	r9, r0, #20
 8012d5e:	f04f 0b00 	mov.w	fp, #0
 8012d62:	f1c3 0301 	rsb	r3, r3, #1
 8012d66:	4605      	mov	r5, r0
 8012d68:	f8cd 9010 	str.w	r9, [sp, #16]
 8012d6c:	46da      	mov	sl, fp
 8012d6e:	9308      	str	r3, [sp, #32]
 8012d70:	42b7      	cmp	r7, r6
 8012d72:	d33b      	bcc.n	8012dec <__gethex+0x1ee>
 8012d74:	9804      	ldr	r0, [sp, #16]
 8012d76:	f840 ab04 	str.w	sl, [r0], #4
 8012d7a:	eba0 0009 	sub.w	r0, r0, r9
 8012d7e:	1080      	asrs	r0, r0, #2
 8012d80:	6128      	str	r0, [r5, #16]
 8012d82:	0147      	lsls	r7, r0, #5
 8012d84:	4650      	mov	r0, sl
 8012d86:	f000 fafd 	bl	8013384 <__hi0bits>
 8012d8a:	f8d8 6000 	ldr.w	r6, [r8]
 8012d8e:	1a3f      	subs	r7, r7, r0
 8012d90:	42b7      	cmp	r7, r6
 8012d92:	dd64      	ble.n	8012e5e <__gethex+0x260>
 8012d94:	1bbf      	subs	r7, r7, r6
 8012d96:	4639      	mov	r1, r7
 8012d98:	4628      	mov	r0, r5
 8012d9a:	f000 fe0d 	bl	80139b8 <__any_on>
 8012d9e:	4682      	mov	sl, r0
 8012da0:	b178      	cbz	r0, 8012dc2 <__gethex+0x1c4>
 8012da2:	1e7b      	subs	r3, r7, #1
 8012da4:	1159      	asrs	r1, r3, #5
 8012da6:	f003 021f 	and.w	r2, r3, #31
 8012daa:	f04f 0a01 	mov.w	sl, #1
 8012dae:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8012db2:	fa0a f202 	lsl.w	r2, sl, r2
 8012db6:	420a      	tst	r2, r1
 8012db8:	d003      	beq.n	8012dc2 <__gethex+0x1c4>
 8012dba:	4553      	cmp	r3, sl
 8012dbc:	dc46      	bgt.n	8012e4c <__gethex+0x24e>
 8012dbe:	f04f 0a02 	mov.w	sl, #2
 8012dc2:	4639      	mov	r1, r7
 8012dc4:	4628      	mov	r0, r5
 8012dc6:	f7ff fecb 	bl	8012b60 <rshift>
 8012dca:	443c      	add	r4, r7
 8012dcc:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8012dd0:	42a3      	cmp	r3, r4
 8012dd2:	da52      	bge.n	8012e7a <__gethex+0x27c>
 8012dd4:	4629      	mov	r1, r5
 8012dd6:	9802      	ldr	r0, [sp, #8]
 8012dd8:	f000 fa44 	bl	8013264 <_Bfree>
 8012ddc:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8012dde:	2300      	movs	r3, #0
 8012de0:	6013      	str	r3, [r2, #0]
 8012de2:	27a3      	movs	r7, #163	; 0xa3
 8012de4:	e793      	b.n	8012d0e <__gethex+0x110>
 8012de6:	3101      	adds	r1, #1
 8012de8:	105b      	asrs	r3, r3, #1
 8012dea:	e7b0      	b.n	8012d4e <__gethex+0x150>
 8012dec:	1e73      	subs	r3, r6, #1
 8012dee:	9305      	str	r3, [sp, #20]
 8012df0:	9a07      	ldr	r2, [sp, #28]
 8012df2:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8012df6:	4293      	cmp	r3, r2
 8012df8:	d018      	beq.n	8012e2c <__gethex+0x22e>
 8012dfa:	f1bb 0f20 	cmp.w	fp, #32
 8012dfe:	d107      	bne.n	8012e10 <__gethex+0x212>
 8012e00:	9b04      	ldr	r3, [sp, #16]
 8012e02:	f8c3 a000 	str.w	sl, [r3]
 8012e06:	3304      	adds	r3, #4
 8012e08:	f04f 0a00 	mov.w	sl, #0
 8012e0c:	9304      	str	r3, [sp, #16]
 8012e0e:	46d3      	mov	fp, sl
 8012e10:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8012e14:	f7ff fede 	bl	8012bd4 <__hexdig_fun>
 8012e18:	f000 000f 	and.w	r0, r0, #15
 8012e1c:	fa00 f00b 	lsl.w	r0, r0, fp
 8012e20:	ea4a 0a00 	orr.w	sl, sl, r0
 8012e24:	f10b 0b04 	add.w	fp, fp, #4
 8012e28:	9b05      	ldr	r3, [sp, #20]
 8012e2a:	e00d      	b.n	8012e48 <__gethex+0x24a>
 8012e2c:	9b05      	ldr	r3, [sp, #20]
 8012e2e:	9a08      	ldr	r2, [sp, #32]
 8012e30:	4413      	add	r3, r2
 8012e32:	42bb      	cmp	r3, r7
 8012e34:	d3e1      	bcc.n	8012dfa <__gethex+0x1fc>
 8012e36:	4618      	mov	r0, r3
 8012e38:	9a01      	ldr	r2, [sp, #4]
 8012e3a:	9903      	ldr	r1, [sp, #12]
 8012e3c:	9309      	str	r3, [sp, #36]	; 0x24
 8012e3e:	f7fe f987 	bl	8011150 <strncmp>
 8012e42:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012e44:	2800      	cmp	r0, #0
 8012e46:	d1d8      	bne.n	8012dfa <__gethex+0x1fc>
 8012e48:	461e      	mov	r6, r3
 8012e4a:	e791      	b.n	8012d70 <__gethex+0x172>
 8012e4c:	1eb9      	subs	r1, r7, #2
 8012e4e:	4628      	mov	r0, r5
 8012e50:	f000 fdb2 	bl	80139b8 <__any_on>
 8012e54:	2800      	cmp	r0, #0
 8012e56:	d0b2      	beq.n	8012dbe <__gethex+0x1c0>
 8012e58:	f04f 0a03 	mov.w	sl, #3
 8012e5c:	e7b1      	b.n	8012dc2 <__gethex+0x1c4>
 8012e5e:	da09      	bge.n	8012e74 <__gethex+0x276>
 8012e60:	1bf7      	subs	r7, r6, r7
 8012e62:	4629      	mov	r1, r5
 8012e64:	463a      	mov	r2, r7
 8012e66:	9802      	ldr	r0, [sp, #8]
 8012e68:	f000 fbc8 	bl	80135fc <__lshift>
 8012e6c:	1be4      	subs	r4, r4, r7
 8012e6e:	4605      	mov	r5, r0
 8012e70:	f100 0914 	add.w	r9, r0, #20
 8012e74:	f04f 0a00 	mov.w	sl, #0
 8012e78:	e7a8      	b.n	8012dcc <__gethex+0x1ce>
 8012e7a:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8012e7e:	42a0      	cmp	r0, r4
 8012e80:	dd6a      	ble.n	8012f58 <__gethex+0x35a>
 8012e82:	1b04      	subs	r4, r0, r4
 8012e84:	42a6      	cmp	r6, r4
 8012e86:	dc2e      	bgt.n	8012ee6 <__gethex+0x2e8>
 8012e88:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8012e8c:	2b02      	cmp	r3, #2
 8012e8e:	d022      	beq.n	8012ed6 <__gethex+0x2d8>
 8012e90:	2b03      	cmp	r3, #3
 8012e92:	d024      	beq.n	8012ede <__gethex+0x2e0>
 8012e94:	2b01      	cmp	r3, #1
 8012e96:	d115      	bne.n	8012ec4 <__gethex+0x2c6>
 8012e98:	42a6      	cmp	r6, r4
 8012e9a:	d113      	bne.n	8012ec4 <__gethex+0x2c6>
 8012e9c:	2e01      	cmp	r6, #1
 8012e9e:	dc0b      	bgt.n	8012eb8 <__gethex+0x2ba>
 8012ea0:	9a06      	ldr	r2, [sp, #24]
 8012ea2:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8012ea6:	6013      	str	r3, [r2, #0]
 8012ea8:	2301      	movs	r3, #1
 8012eaa:	612b      	str	r3, [r5, #16]
 8012eac:	f8c9 3000 	str.w	r3, [r9]
 8012eb0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8012eb2:	2762      	movs	r7, #98	; 0x62
 8012eb4:	601d      	str	r5, [r3, #0]
 8012eb6:	e72a      	b.n	8012d0e <__gethex+0x110>
 8012eb8:	1e71      	subs	r1, r6, #1
 8012eba:	4628      	mov	r0, r5
 8012ebc:	f000 fd7c 	bl	80139b8 <__any_on>
 8012ec0:	2800      	cmp	r0, #0
 8012ec2:	d1ed      	bne.n	8012ea0 <__gethex+0x2a2>
 8012ec4:	4629      	mov	r1, r5
 8012ec6:	9802      	ldr	r0, [sp, #8]
 8012ec8:	f000 f9cc 	bl	8013264 <_Bfree>
 8012ecc:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8012ece:	2300      	movs	r3, #0
 8012ed0:	6013      	str	r3, [r2, #0]
 8012ed2:	2750      	movs	r7, #80	; 0x50
 8012ed4:	e71b      	b.n	8012d0e <__gethex+0x110>
 8012ed6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8012ed8:	2b00      	cmp	r3, #0
 8012eda:	d0e1      	beq.n	8012ea0 <__gethex+0x2a2>
 8012edc:	e7f2      	b.n	8012ec4 <__gethex+0x2c6>
 8012ede:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8012ee0:	2b00      	cmp	r3, #0
 8012ee2:	d1dd      	bne.n	8012ea0 <__gethex+0x2a2>
 8012ee4:	e7ee      	b.n	8012ec4 <__gethex+0x2c6>
 8012ee6:	1e67      	subs	r7, r4, #1
 8012ee8:	f1ba 0f00 	cmp.w	sl, #0
 8012eec:	d131      	bne.n	8012f52 <__gethex+0x354>
 8012eee:	b127      	cbz	r7, 8012efa <__gethex+0x2fc>
 8012ef0:	4639      	mov	r1, r7
 8012ef2:	4628      	mov	r0, r5
 8012ef4:	f000 fd60 	bl	80139b8 <__any_on>
 8012ef8:	4682      	mov	sl, r0
 8012efa:	117a      	asrs	r2, r7, #5
 8012efc:	2301      	movs	r3, #1
 8012efe:	f007 071f 	and.w	r7, r7, #31
 8012f02:	fa03 f707 	lsl.w	r7, r3, r7
 8012f06:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 8012f0a:	4621      	mov	r1, r4
 8012f0c:	421f      	tst	r7, r3
 8012f0e:	4628      	mov	r0, r5
 8012f10:	bf18      	it	ne
 8012f12:	f04a 0a02 	orrne.w	sl, sl, #2
 8012f16:	1b36      	subs	r6, r6, r4
 8012f18:	f7ff fe22 	bl	8012b60 <rshift>
 8012f1c:	f8d8 4004 	ldr.w	r4, [r8, #4]
 8012f20:	2702      	movs	r7, #2
 8012f22:	f1ba 0f00 	cmp.w	sl, #0
 8012f26:	d048      	beq.n	8012fba <__gethex+0x3bc>
 8012f28:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8012f2c:	2b02      	cmp	r3, #2
 8012f2e:	d015      	beq.n	8012f5c <__gethex+0x35e>
 8012f30:	2b03      	cmp	r3, #3
 8012f32:	d017      	beq.n	8012f64 <__gethex+0x366>
 8012f34:	2b01      	cmp	r3, #1
 8012f36:	d109      	bne.n	8012f4c <__gethex+0x34e>
 8012f38:	f01a 0f02 	tst.w	sl, #2
 8012f3c:	d006      	beq.n	8012f4c <__gethex+0x34e>
 8012f3e:	f8d9 3000 	ldr.w	r3, [r9]
 8012f42:	ea4a 0a03 	orr.w	sl, sl, r3
 8012f46:	f01a 0f01 	tst.w	sl, #1
 8012f4a:	d10e      	bne.n	8012f6a <__gethex+0x36c>
 8012f4c:	f047 0710 	orr.w	r7, r7, #16
 8012f50:	e033      	b.n	8012fba <__gethex+0x3bc>
 8012f52:	f04f 0a01 	mov.w	sl, #1
 8012f56:	e7d0      	b.n	8012efa <__gethex+0x2fc>
 8012f58:	2701      	movs	r7, #1
 8012f5a:	e7e2      	b.n	8012f22 <__gethex+0x324>
 8012f5c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8012f5e:	f1c3 0301 	rsb	r3, r3, #1
 8012f62:	9315      	str	r3, [sp, #84]	; 0x54
 8012f64:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8012f66:	2b00      	cmp	r3, #0
 8012f68:	d0f0      	beq.n	8012f4c <__gethex+0x34e>
 8012f6a:	f8d5 9010 	ldr.w	r9, [r5, #16]
 8012f6e:	f105 0314 	add.w	r3, r5, #20
 8012f72:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 8012f76:	eb03 010a 	add.w	r1, r3, sl
 8012f7a:	f04f 0c00 	mov.w	ip, #0
 8012f7e:	4618      	mov	r0, r3
 8012f80:	f853 2b04 	ldr.w	r2, [r3], #4
 8012f84:	f1b2 3fff 	cmp.w	r2, #4294967295
 8012f88:	d01c      	beq.n	8012fc4 <__gethex+0x3c6>
 8012f8a:	3201      	adds	r2, #1
 8012f8c:	6002      	str	r2, [r0, #0]
 8012f8e:	2f02      	cmp	r7, #2
 8012f90:	f105 0314 	add.w	r3, r5, #20
 8012f94:	d138      	bne.n	8013008 <__gethex+0x40a>
 8012f96:	f8d8 2000 	ldr.w	r2, [r8]
 8012f9a:	3a01      	subs	r2, #1
 8012f9c:	42b2      	cmp	r2, r6
 8012f9e:	d10a      	bne.n	8012fb6 <__gethex+0x3b8>
 8012fa0:	1171      	asrs	r1, r6, #5
 8012fa2:	2201      	movs	r2, #1
 8012fa4:	f006 061f 	and.w	r6, r6, #31
 8012fa8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8012fac:	fa02 f606 	lsl.w	r6, r2, r6
 8012fb0:	421e      	tst	r6, r3
 8012fb2:	bf18      	it	ne
 8012fb4:	4617      	movne	r7, r2
 8012fb6:	f047 0720 	orr.w	r7, r7, #32
 8012fba:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8012fbc:	601d      	str	r5, [r3, #0]
 8012fbe:	9b06      	ldr	r3, [sp, #24]
 8012fc0:	601c      	str	r4, [r3, #0]
 8012fc2:	e6a4      	b.n	8012d0e <__gethex+0x110>
 8012fc4:	4299      	cmp	r1, r3
 8012fc6:	f843 cc04 	str.w	ip, [r3, #-4]
 8012fca:	d8d8      	bhi.n	8012f7e <__gethex+0x380>
 8012fcc:	68ab      	ldr	r3, [r5, #8]
 8012fce:	4599      	cmp	r9, r3
 8012fd0:	db12      	blt.n	8012ff8 <__gethex+0x3fa>
 8012fd2:	6869      	ldr	r1, [r5, #4]
 8012fd4:	9802      	ldr	r0, [sp, #8]
 8012fd6:	3101      	adds	r1, #1
 8012fd8:	f000 f910 	bl	80131fc <_Balloc>
 8012fdc:	692a      	ldr	r2, [r5, #16]
 8012fde:	3202      	adds	r2, #2
 8012fe0:	f105 010c 	add.w	r1, r5, #12
 8012fe4:	4683      	mov	fp, r0
 8012fe6:	0092      	lsls	r2, r2, #2
 8012fe8:	300c      	adds	r0, #12
 8012fea:	f7fd f981 	bl	80102f0 <memcpy>
 8012fee:	4629      	mov	r1, r5
 8012ff0:	9802      	ldr	r0, [sp, #8]
 8012ff2:	f000 f937 	bl	8013264 <_Bfree>
 8012ff6:	465d      	mov	r5, fp
 8012ff8:	692b      	ldr	r3, [r5, #16]
 8012ffa:	1c5a      	adds	r2, r3, #1
 8012ffc:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8013000:	612a      	str	r2, [r5, #16]
 8013002:	2201      	movs	r2, #1
 8013004:	615a      	str	r2, [r3, #20]
 8013006:	e7c2      	b.n	8012f8e <__gethex+0x390>
 8013008:	692a      	ldr	r2, [r5, #16]
 801300a:	454a      	cmp	r2, r9
 801300c:	dd0b      	ble.n	8013026 <__gethex+0x428>
 801300e:	2101      	movs	r1, #1
 8013010:	4628      	mov	r0, r5
 8013012:	f7ff fda5 	bl	8012b60 <rshift>
 8013016:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801301a:	3401      	adds	r4, #1
 801301c:	42a3      	cmp	r3, r4
 801301e:	f6ff aed9 	blt.w	8012dd4 <__gethex+0x1d6>
 8013022:	2701      	movs	r7, #1
 8013024:	e7c7      	b.n	8012fb6 <__gethex+0x3b8>
 8013026:	f016 061f 	ands.w	r6, r6, #31
 801302a:	d0fa      	beq.n	8013022 <__gethex+0x424>
 801302c:	449a      	add	sl, r3
 801302e:	f1c6 0620 	rsb	r6, r6, #32
 8013032:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 8013036:	f000 f9a5 	bl	8013384 <__hi0bits>
 801303a:	42b0      	cmp	r0, r6
 801303c:	dbe7      	blt.n	801300e <__gethex+0x410>
 801303e:	e7f0      	b.n	8013022 <__gethex+0x424>

08013040 <L_shift>:
 8013040:	f1c2 0208 	rsb	r2, r2, #8
 8013044:	0092      	lsls	r2, r2, #2
 8013046:	b570      	push	{r4, r5, r6, lr}
 8013048:	f1c2 0620 	rsb	r6, r2, #32
 801304c:	6843      	ldr	r3, [r0, #4]
 801304e:	6804      	ldr	r4, [r0, #0]
 8013050:	fa03 f506 	lsl.w	r5, r3, r6
 8013054:	432c      	orrs	r4, r5
 8013056:	40d3      	lsrs	r3, r2
 8013058:	6004      	str	r4, [r0, #0]
 801305a:	f840 3f04 	str.w	r3, [r0, #4]!
 801305e:	4288      	cmp	r0, r1
 8013060:	d3f4      	bcc.n	801304c <L_shift+0xc>
 8013062:	bd70      	pop	{r4, r5, r6, pc}

08013064 <__match>:
 8013064:	b530      	push	{r4, r5, lr}
 8013066:	6803      	ldr	r3, [r0, #0]
 8013068:	3301      	adds	r3, #1
 801306a:	f811 4b01 	ldrb.w	r4, [r1], #1
 801306e:	b914      	cbnz	r4, 8013076 <__match+0x12>
 8013070:	6003      	str	r3, [r0, #0]
 8013072:	2001      	movs	r0, #1
 8013074:	bd30      	pop	{r4, r5, pc}
 8013076:	f813 2b01 	ldrb.w	r2, [r3], #1
 801307a:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 801307e:	2d19      	cmp	r5, #25
 8013080:	bf98      	it	ls
 8013082:	3220      	addls	r2, #32
 8013084:	42a2      	cmp	r2, r4
 8013086:	d0f0      	beq.n	801306a <__match+0x6>
 8013088:	2000      	movs	r0, #0
 801308a:	e7f3      	b.n	8013074 <__match+0x10>

0801308c <__hexnan>:
 801308c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013090:	680b      	ldr	r3, [r1, #0]
 8013092:	6801      	ldr	r1, [r0, #0]
 8013094:	115f      	asrs	r7, r3, #5
 8013096:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 801309a:	f013 031f 	ands.w	r3, r3, #31
 801309e:	b087      	sub	sp, #28
 80130a0:	bf18      	it	ne
 80130a2:	3704      	addne	r7, #4
 80130a4:	2500      	movs	r5, #0
 80130a6:	1f3e      	subs	r6, r7, #4
 80130a8:	4682      	mov	sl, r0
 80130aa:	4690      	mov	r8, r2
 80130ac:	9301      	str	r3, [sp, #4]
 80130ae:	f847 5c04 	str.w	r5, [r7, #-4]
 80130b2:	46b1      	mov	r9, r6
 80130b4:	4634      	mov	r4, r6
 80130b6:	9502      	str	r5, [sp, #8]
 80130b8:	46ab      	mov	fp, r5
 80130ba:	784a      	ldrb	r2, [r1, #1]
 80130bc:	1c4b      	adds	r3, r1, #1
 80130be:	9303      	str	r3, [sp, #12]
 80130c0:	b342      	cbz	r2, 8013114 <__hexnan+0x88>
 80130c2:	4610      	mov	r0, r2
 80130c4:	9105      	str	r1, [sp, #20]
 80130c6:	9204      	str	r2, [sp, #16]
 80130c8:	f7ff fd84 	bl	8012bd4 <__hexdig_fun>
 80130cc:	2800      	cmp	r0, #0
 80130ce:	d143      	bne.n	8013158 <__hexnan+0xcc>
 80130d0:	9a04      	ldr	r2, [sp, #16]
 80130d2:	9905      	ldr	r1, [sp, #20]
 80130d4:	2a20      	cmp	r2, #32
 80130d6:	d818      	bhi.n	801310a <__hexnan+0x7e>
 80130d8:	9b02      	ldr	r3, [sp, #8]
 80130da:	459b      	cmp	fp, r3
 80130dc:	dd13      	ble.n	8013106 <__hexnan+0x7a>
 80130de:	454c      	cmp	r4, r9
 80130e0:	d206      	bcs.n	80130f0 <__hexnan+0x64>
 80130e2:	2d07      	cmp	r5, #7
 80130e4:	dc04      	bgt.n	80130f0 <__hexnan+0x64>
 80130e6:	462a      	mov	r2, r5
 80130e8:	4649      	mov	r1, r9
 80130ea:	4620      	mov	r0, r4
 80130ec:	f7ff ffa8 	bl	8013040 <L_shift>
 80130f0:	4544      	cmp	r4, r8
 80130f2:	d944      	bls.n	801317e <__hexnan+0xf2>
 80130f4:	2300      	movs	r3, #0
 80130f6:	f1a4 0904 	sub.w	r9, r4, #4
 80130fa:	f844 3c04 	str.w	r3, [r4, #-4]
 80130fe:	f8cd b008 	str.w	fp, [sp, #8]
 8013102:	464c      	mov	r4, r9
 8013104:	461d      	mov	r5, r3
 8013106:	9903      	ldr	r1, [sp, #12]
 8013108:	e7d7      	b.n	80130ba <__hexnan+0x2e>
 801310a:	2a29      	cmp	r2, #41	; 0x29
 801310c:	d14a      	bne.n	80131a4 <__hexnan+0x118>
 801310e:	3102      	adds	r1, #2
 8013110:	f8ca 1000 	str.w	r1, [sl]
 8013114:	f1bb 0f00 	cmp.w	fp, #0
 8013118:	d044      	beq.n	80131a4 <__hexnan+0x118>
 801311a:	454c      	cmp	r4, r9
 801311c:	d206      	bcs.n	801312c <__hexnan+0xa0>
 801311e:	2d07      	cmp	r5, #7
 8013120:	dc04      	bgt.n	801312c <__hexnan+0xa0>
 8013122:	462a      	mov	r2, r5
 8013124:	4649      	mov	r1, r9
 8013126:	4620      	mov	r0, r4
 8013128:	f7ff ff8a 	bl	8013040 <L_shift>
 801312c:	4544      	cmp	r4, r8
 801312e:	d928      	bls.n	8013182 <__hexnan+0xf6>
 8013130:	4643      	mov	r3, r8
 8013132:	f854 2b04 	ldr.w	r2, [r4], #4
 8013136:	f843 2b04 	str.w	r2, [r3], #4
 801313a:	42a6      	cmp	r6, r4
 801313c:	d2f9      	bcs.n	8013132 <__hexnan+0xa6>
 801313e:	2200      	movs	r2, #0
 8013140:	f843 2b04 	str.w	r2, [r3], #4
 8013144:	429e      	cmp	r6, r3
 8013146:	d2fb      	bcs.n	8013140 <__hexnan+0xb4>
 8013148:	6833      	ldr	r3, [r6, #0]
 801314a:	b91b      	cbnz	r3, 8013154 <__hexnan+0xc8>
 801314c:	4546      	cmp	r6, r8
 801314e:	d127      	bne.n	80131a0 <__hexnan+0x114>
 8013150:	2301      	movs	r3, #1
 8013152:	6033      	str	r3, [r6, #0]
 8013154:	2005      	movs	r0, #5
 8013156:	e026      	b.n	80131a6 <__hexnan+0x11a>
 8013158:	3501      	adds	r5, #1
 801315a:	2d08      	cmp	r5, #8
 801315c:	f10b 0b01 	add.w	fp, fp, #1
 8013160:	dd06      	ble.n	8013170 <__hexnan+0xe4>
 8013162:	4544      	cmp	r4, r8
 8013164:	d9cf      	bls.n	8013106 <__hexnan+0x7a>
 8013166:	2300      	movs	r3, #0
 8013168:	f844 3c04 	str.w	r3, [r4, #-4]
 801316c:	2501      	movs	r5, #1
 801316e:	3c04      	subs	r4, #4
 8013170:	6822      	ldr	r2, [r4, #0]
 8013172:	f000 000f 	and.w	r0, r0, #15
 8013176:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 801317a:	6020      	str	r0, [r4, #0]
 801317c:	e7c3      	b.n	8013106 <__hexnan+0x7a>
 801317e:	2508      	movs	r5, #8
 8013180:	e7c1      	b.n	8013106 <__hexnan+0x7a>
 8013182:	9b01      	ldr	r3, [sp, #4]
 8013184:	2b00      	cmp	r3, #0
 8013186:	d0df      	beq.n	8013148 <__hexnan+0xbc>
 8013188:	f04f 32ff 	mov.w	r2, #4294967295
 801318c:	f1c3 0320 	rsb	r3, r3, #32
 8013190:	fa22 f303 	lsr.w	r3, r2, r3
 8013194:	f857 2c04 	ldr.w	r2, [r7, #-4]
 8013198:	401a      	ands	r2, r3
 801319a:	f847 2c04 	str.w	r2, [r7, #-4]
 801319e:	e7d3      	b.n	8013148 <__hexnan+0xbc>
 80131a0:	3e04      	subs	r6, #4
 80131a2:	e7d1      	b.n	8013148 <__hexnan+0xbc>
 80131a4:	2004      	movs	r0, #4
 80131a6:	b007      	add	sp, #28
 80131a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080131ac <__locale_ctype_ptr_l>:
 80131ac:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 80131b0:	4770      	bx	lr

080131b2 <__localeconv_l>:
 80131b2:	30f0      	adds	r0, #240	; 0xf0
 80131b4:	4770      	bx	lr
	...

080131b8 <_localeconv_r>:
 80131b8:	4b04      	ldr	r3, [pc, #16]	; (80131cc <_localeconv_r+0x14>)
 80131ba:	681b      	ldr	r3, [r3, #0]
 80131bc:	6a18      	ldr	r0, [r3, #32]
 80131be:	4b04      	ldr	r3, [pc, #16]	; (80131d0 <_localeconv_r+0x18>)
 80131c0:	2800      	cmp	r0, #0
 80131c2:	bf08      	it	eq
 80131c4:	4618      	moveq	r0, r3
 80131c6:	30f0      	adds	r0, #240	; 0xf0
 80131c8:	4770      	bx	lr
 80131ca:	bf00      	nop
 80131cc:	20000180 	.word	0x20000180
 80131d0:	200001e4 	.word	0x200001e4

080131d4 <__ascii_mbtowc>:
 80131d4:	b082      	sub	sp, #8
 80131d6:	b901      	cbnz	r1, 80131da <__ascii_mbtowc+0x6>
 80131d8:	a901      	add	r1, sp, #4
 80131da:	b142      	cbz	r2, 80131ee <__ascii_mbtowc+0x1a>
 80131dc:	b14b      	cbz	r3, 80131f2 <__ascii_mbtowc+0x1e>
 80131de:	7813      	ldrb	r3, [r2, #0]
 80131e0:	600b      	str	r3, [r1, #0]
 80131e2:	7812      	ldrb	r2, [r2, #0]
 80131e4:	1c10      	adds	r0, r2, #0
 80131e6:	bf18      	it	ne
 80131e8:	2001      	movne	r0, #1
 80131ea:	b002      	add	sp, #8
 80131ec:	4770      	bx	lr
 80131ee:	4610      	mov	r0, r2
 80131f0:	e7fb      	b.n	80131ea <__ascii_mbtowc+0x16>
 80131f2:	f06f 0001 	mvn.w	r0, #1
 80131f6:	e7f8      	b.n	80131ea <__ascii_mbtowc+0x16>

080131f8 <__malloc_lock>:
 80131f8:	4770      	bx	lr

080131fa <__malloc_unlock>:
 80131fa:	4770      	bx	lr

080131fc <_Balloc>:
 80131fc:	b570      	push	{r4, r5, r6, lr}
 80131fe:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8013200:	4604      	mov	r4, r0
 8013202:	460e      	mov	r6, r1
 8013204:	b93d      	cbnz	r5, 8013216 <_Balloc+0x1a>
 8013206:	2010      	movs	r0, #16
 8013208:	f7fd f862 	bl	80102d0 <malloc>
 801320c:	6260      	str	r0, [r4, #36]	; 0x24
 801320e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8013212:	6005      	str	r5, [r0, #0]
 8013214:	60c5      	str	r5, [r0, #12]
 8013216:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8013218:	68eb      	ldr	r3, [r5, #12]
 801321a:	b183      	cbz	r3, 801323e <_Balloc+0x42>
 801321c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801321e:	68db      	ldr	r3, [r3, #12]
 8013220:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8013224:	b9b8      	cbnz	r0, 8013256 <_Balloc+0x5a>
 8013226:	2101      	movs	r1, #1
 8013228:	fa01 f506 	lsl.w	r5, r1, r6
 801322c:	1d6a      	adds	r2, r5, #5
 801322e:	0092      	lsls	r2, r2, #2
 8013230:	4620      	mov	r0, r4
 8013232:	f000 fbe2 	bl	80139fa <_calloc_r>
 8013236:	b160      	cbz	r0, 8013252 <_Balloc+0x56>
 8013238:	e9c0 6501 	strd	r6, r5, [r0, #4]
 801323c:	e00e      	b.n	801325c <_Balloc+0x60>
 801323e:	2221      	movs	r2, #33	; 0x21
 8013240:	2104      	movs	r1, #4
 8013242:	4620      	mov	r0, r4
 8013244:	f000 fbd9 	bl	80139fa <_calloc_r>
 8013248:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801324a:	60e8      	str	r0, [r5, #12]
 801324c:	68db      	ldr	r3, [r3, #12]
 801324e:	2b00      	cmp	r3, #0
 8013250:	d1e4      	bne.n	801321c <_Balloc+0x20>
 8013252:	2000      	movs	r0, #0
 8013254:	bd70      	pop	{r4, r5, r6, pc}
 8013256:	6802      	ldr	r2, [r0, #0]
 8013258:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 801325c:	2300      	movs	r3, #0
 801325e:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8013262:	e7f7      	b.n	8013254 <_Balloc+0x58>

08013264 <_Bfree>:
 8013264:	b570      	push	{r4, r5, r6, lr}
 8013266:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8013268:	4606      	mov	r6, r0
 801326a:	460d      	mov	r5, r1
 801326c:	b93c      	cbnz	r4, 801327e <_Bfree+0x1a>
 801326e:	2010      	movs	r0, #16
 8013270:	f7fd f82e 	bl	80102d0 <malloc>
 8013274:	6270      	str	r0, [r6, #36]	; 0x24
 8013276:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801327a:	6004      	str	r4, [r0, #0]
 801327c:	60c4      	str	r4, [r0, #12]
 801327e:	b13d      	cbz	r5, 8013290 <_Bfree+0x2c>
 8013280:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8013282:	686a      	ldr	r2, [r5, #4]
 8013284:	68db      	ldr	r3, [r3, #12]
 8013286:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801328a:	6029      	str	r1, [r5, #0]
 801328c:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8013290:	bd70      	pop	{r4, r5, r6, pc}

08013292 <__multadd>:
 8013292:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013296:	690d      	ldr	r5, [r1, #16]
 8013298:	461f      	mov	r7, r3
 801329a:	4606      	mov	r6, r0
 801329c:	460c      	mov	r4, r1
 801329e:	f101 0c14 	add.w	ip, r1, #20
 80132a2:	2300      	movs	r3, #0
 80132a4:	f8dc 0000 	ldr.w	r0, [ip]
 80132a8:	b281      	uxth	r1, r0
 80132aa:	fb02 7101 	mla	r1, r2, r1, r7
 80132ae:	0c0f      	lsrs	r7, r1, #16
 80132b0:	0c00      	lsrs	r0, r0, #16
 80132b2:	fb02 7000 	mla	r0, r2, r0, r7
 80132b6:	b289      	uxth	r1, r1
 80132b8:	3301      	adds	r3, #1
 80132ba:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 80132be:	429d      	cmp	r5, r3
 80132c0:	ea4f 4710 	mov.w	r7, r0, lsr #16
 80132c4:	f84c 1b04 	str.w	r1, [ip], #4
 80132c8:	dcec      	bgt.n	80132a4 <__multadd+0x12>
 80132ca:	b1d7      	cbz	r7, 8013302 <__multadd+0x70>
 80132cc:	68a3      	ldr	r3, [r4, #8]
 80132ce:	42ab      	cmp	r3, r5
 80132d0:	dc12      	bgt.n	80132f8 <__multadd+0x66>
 80132d2:	6861      	ldr	r1, [r4, #4]
 80132d4:	4630      	mov	r0, r6
 80132d6:	3101      	adds	r1, #1
 80132d8:	f7ff ff90 	bl	80131fc <_Balloc>
 80132dc:	6922      	ldr	r2, [r4, #16]
 80132de:	3202      	adds	r2, #2
 80132e0:	f104 010c 	add.w	r1, r4, #12
 80132e4:	4680      	mov	r8, r0
 80132e6:	0092      	lsls	r2, r2, #2
 80132e8:	300c      	adds	r0, #12
 80132ea:	f7fd f801 	bl	80102f0 <memcpy>
 80132ee:	4621      	mov	r1, r4
 80132f0:	4630      	mov	r0, r6
 80132f2:	f7ff ffb7 	bl	8013264 <_Bfree>
 80132f6:	4644      	mov	r4, r8
 80132f8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80132fc:	3501      	adds	r5, #1
 80132fe:	615f      	str	r7, [r3, #20]
 8013300:	6125      	str	r5, [r4, #16]
 8013302:	4620      	mov	r0, r4
 8013304:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08013308 <__s2b>:
 8013308:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801330c:	460c      	mov	r4, r1
 801330e:	4615      	mov	r5, r2
 8013310:	461f      	mov	r7, r3
 8013312:	2209      	movs	r2, #9
 8013314:	3308      	adds	r3, #8
 8013316:	4606      	mov	r6, r0
 8013318:	fb93 f3f2 	sdiv	r3, r3, r2
 801331c:	2100      	movs	r1, #0
 801331e:	2201      	movs	r2, #1
 8013320:	429a      	cmp	r2, r3
 8013322:	db20      	blt.n	8013366 <__s2b+0x5e>
 8013324:	4630      	mov	r0, r6
 8013326:	f7ff ff69 	bl	80131fc <_Balloc>
 801332a:	9b08      	ldr	r3, [sp, #32]
 801332c:	6143      	str	r3, [r0, #20]
 801332e:	2d09      	cmp	r5, #9
 8013330:	f04f 0301 	mov.w	r3, #1
 8013334:	6103      	str	r3, [r0, #16]
 8013336:	dd19      	ble.n	801336c <__s2b+0x64>
 8013338:	f104 0809 	add.w	r8, r4, #9
 801333c:	46c1      	mov	r9, r8
 801333e:	442c      	add	r4, r5
 8013340:	f819 3b01 	ldrb.w	r3, [r9], #1
 8013344:	4601      	mov	r1, r0
 8013346:	3b30      	subs	r3, #48	; 0x30
 8013348:	220a      	movs	r2, #10
 801334a:	4630      	mov	r0, r6
 801334c:	f7ff ffa1 	bl	8013292 <__multadd>
 8013350:	45a1      	cmp	r9, r4
 8013352:	d1f5      	bne.n	8013340 <__s2b+0x38>
 8013354:	eb08 0405 	add.w	r4, r8, r5
 8013358:	3c08      	subs	r4, #8
 801335a:	1b2d      	subs	r5, r5, r4
 801335c:	1963      	adds	r3, r4, r5
 801335e:	42bb      	cmp	r3, r7
 8013360:	db07      	blt.n	8013372 <__s2b+0x6a>
 8013362:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013366:	0052      	lsls	r2, r2, #1
 8013368:	3101      	adds	r1, #1
 801336a:	e7d9      	b.n	8013320 <__s2b+0x18>
 801336c:	340a      	adds	r4, #10
 801336e:	2509      	movs	r5, #9
 8013370:	e7f3      	b.n	801335a <__s2b+0x52>
 8013372:	f814 3b01 	ldrb.w	r3, [r4], #1
 8013376:	4601      	mov	r1, r0
 8013378:	3b30      	subs	r3, #48	; 0x30
 801337a:	220a      	movs	r2, #10
 801337c:	4630      	mov	r0, r6
 801337e:	f7ff ff88 	bl	8013292 <__multadd>
 8013382:	e7eb      	b.n	801335c <__s2b+0x54>

08013384 <__hi0bits>:
 8013384:	0c02      	lsrs	r2, r0, #16
 8013386:	0412      	lsls	r2, r2, #16
 8013388:	4603      	mov	r3, r0
 801338a:	b9b2      	cbnz	r2, 80133ba <__hi0bits+0x36>
 801338c:	0403      	lsls	r3, r0, #16
 801338e:	2010      	movs	r0, #16
 8013390:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8013394:	bf04      	itt	eq
 8013396:	021b      	lsleq	r3, r3, #8
 8013398:	3008      	addeq	r0, #8
 801339a:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 801339e:	bf04      	itt	eq
 80133a0:	011b      	lsleq	r3, r3, #4
 80133a2:	3004      	addeq	r0, #4
 80133a4:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80133a8:	bf04      	itt	eq
 80133aa:	009b      	lsleq	r3, r3, #2
 80133ac:	3002      	addeq	r0, #2
 80133ae:	2b00      	cmp	r3, #0
 80133b0:	db06      	blt.n	80133c0 <__hi0bits+0x3c>
 80133b2:	005b      	lsls	r3, r3, #1
 80133b4:	d503      	bpl.n	80133be <__hi0bits+0x3a>
 80133b6:	3001      	adds	r0, #1
 80133b8:	4770      	bx	lr
 80133ba:	2000      	movs	r0, #0
 80133bc:	e7e8      	b.n	8013390 <__hi0bits+0xc>
 80133be:	2020      	movs	r0, #32
 80133c0:	4770      	bx	lr

080133c2 <__lo0bits>:
 80133c2:	6803      	ldr	r3, [r0, #0]
 80133c4:	f013 0207 	ands.w	r2, r3, #7
 80133c8:	4601      	mov	r1, r0
 80133ca:	d00b      	beq.n	80133e4 <__lo0bits+0x22>
 80133cc:	07da      	lsls	r2, r3, #31
 80133ce:	d423      	bmi.n	8013418 <__lo0bits+0x56>
 80133d0:	0798      	lsls	r0, r3, #30
 80133d2:	bf49      	itett	mi
 80133d4:	085b      	lsrmi	r3, r3, #1
 80133d6:	089b      	lsrpl	r3, r3, #2
 80133d8:	2001      	movmi	r0, #1
 80133da:	600b      	strmi	r3, [r1, #0]
 80133dc:	bf5c      	itt	pl
 80133de:	600b      	strpl	r3, [r1, #0]
 80133e0:	2002      	movpl	r0, #2
 80133e2:	4770      	bx	lr
 80133e4:	b298      	uxth	r0, r3
 80133e6:	b9a8      	cbnz	r0, 8013414 <__lo0bits+0x52>
 80133e8:	0c1b      	lsrs	r3, r3, #16
 80133ea:	2010      	movs	r0, #16
 80133ec:	f013 0fff 	tst.w	r3, #255	; 0xff
 80133f0:	bf04      	itt	eq
 80133f2:	0a1b      	lsreq	r3, r3, #8
 80133f4:	3008      	addeq	r0, #8
 80133f6:	071a      	lsls	r2, r3, #28
 80133f8:	bf04      	itt	eq
 80133fa:	091b      	lsreq	r3, r3, #4
 80133fc:	3004      	addeq	r0, #4
 80133fe:	079a      	lsls	r2, r3, #30
 8013400:	bf04      	itt	eq
 8013402:	089b      	lsreq	r3, r3, #2
 8013404:	3002      	addeq	r0, #2
 8013406:	07da      	lsls	r2, r3, #31
 8013408:	d402      	bmi.n	8013410 <__lo0bits+0x4e>
 801340a:	085b      	lsrs	r3, r3, #1
 801340c:	d006      	beq.n	801341c <__lo0bits+0x5a>
 801340e:	3001      	adds	r0, #1
 8013410:	600b      	str	r3, [r1, #0]
 8013412:	4770      	bx	lr
 8013414:	4610      	mov	r0, r2
 8013416:	e7e9      	b.n	80133ec <__lo0bits+0x2a>
 8013418:	2000      	movs	r0, #0
 801341a:	4770      	bx	lr
 801341c:	2020      	movs	r0, #32
 801341e:	4770      	bx	lr

08013420 <__i2b>:
 8013420:	b510      	push	{r4, lr}
 8013422:	460c      	mov	r4, r1
 8013424:	2101      	movs	r1, #1
 8013426:	f7ff fee9 	bl	80131fc <_Balloc>
 801342a:	2201      	movs	r2, #1
 801342c:	6144      	str	r4, [r0, #20]
 801342e:	6102      	str	r2, [r0, #16]
 8013430:	bd10      	pop	{r4, pc}

08013432 <__multiply>:
 8013432:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013436:	4614      	mov	r4, r2
 8013438:	690a      	ldr	r2, [r1, #16]
 801343a:	6923      	ldr	r3, [r4, #16]
 801343c:	429a      	cmp	r2, r3
 801343e:	bfb8      	it	lt
 8013440:	460b      	movlt	r3, r1
 8013442:	4688      	mov	r8, r1
 8013444:	bfbc      	itt	lt
 8013446:	46a0      	movlt	r8, r4
 8013448:	461c      	movlt	r4, r3
 801344a:	f8d8 7010 	ldr.w	r7, [r8, #16]
 801344e:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8013452:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8013456:	f8d8 1004 	ldr.w	r1, [r8, #4]
 801345a:	eb07 0609 	add.w	r6, r7, r9
 801345e:	42b3      	cmp	r3, r6
 8013460:	bfb8      	it	lt
 8013462:	3101      	addlt	r1, #1
 8013464:	f7ff feca 	bl	80131fc <_Balloc>
 8013468:	f100 0514 	add.w	r5, r0, #20
 801346c:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8013470:	462b      	mov	r3, r5
 8013472:	2200      	movs	r2, #0
 8013474:	4573      	cmp	r3, lr
 8013476:	d316      	bcc.n	80134a6 <__multiply+0x74>
 8013478:	f104 0214 	add.w	r2, r4, #20
 801347c:	f108 0114 	add.w	r1, r8, #20
 8013480:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8013484:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8013488:	9300      	str	r3, [sp, #0]
 801348a:	9b00      	ldr	r3, [sp, #0]
 801348c:	9201      	str	r2, [sp, #4]
 801348e:	4293      	cmp	r3, r2
 8013490:	d80c      	bhi.n	80134ac <__multiply+0x7a>
 8013492:	2e00      	cmp	r6, #0
 8013494:	dd03      	ble.n	801349e <__multiply+0x6c>
 8013496:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 801349a:	2b00      	cmp	r3, #0
 801349c:	d05d      	beq.n	801355a <__multiply+0x128>
 801349e:	6106      	str	r6, [r0, #16]
 80134a0:	b003      	add	sp, #12
 80134a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80134a6:	f843 2b04 	str.w	r2, [r3], #4
 80134aa:	e7e3      	b.n	8013474 <__multiply+0x42>
 80134ac:	f8b2 b000 	ldrh.w	fp, [r2]
 80134b0:	f1bb 0f00 	cmp.w	fp, #0
 80134b4:	d023      	beq.n	80134fe <__multiply+0xcc>
 80134b6:	4689      	mov	r9, r1
 80134b8:	46ac      	mov	ip, r5
 80134ba:	f04f 0800 	mov.w	r8, #0
 80134be:	f859 4b04 	ldr.w	r4, [r9], #4
 80134c2:	f8dc a000 	ldr.w	sl, [ip]
 80134c6:	b2a3      	uxth	r3, r4
 80134c8:	fa1f fa8a 	uxth.w	sl, sl
 80134cc:	fb0b a303 	mla	r3, fp, r3, sl
 80134d0:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80134d4:	f8dc 4000 	ldr.w	r4, [ip]
 80134d8:	4443      	add	r3, r8
 80134da:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80134de:	fb0b 840a 	mla	r4, fp, sl, r8
 80134e2:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 80134e6:	46e2      	mov	sl, ip
 80134e8:	b29b      	uxth	r3, r3
 80134ea:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80134ee:	454f      	cmp	r7, r9
 80134f0:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80134f4:	f84a 3b04 	str.w	r3, [sl], #4
 80134f8:	d82b      	bhi.n	8013552 <__multiply+0x120>
 80134fa:	f8cc 8004 	str.w	r8, [ip, #4]
 80134fe:	9b01      	ldr	r3, [sp, #4]
 8013500:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8013504:	3204      	adds	r2, #4
 8013506:	f1ba 0f00 	cmp.w	sl, #0
 801350a:	d020      	beq.n	801354e <__multiply+0x11c>
 801350c:	682b      	ldr	r3, [r5, #0]
 801350e:	4689      	mov	r9, r1
 8013510:	46a8      	mov	r8, r5
 8013512:	f04f 0b00 	mov.w	fp, #0
 8013516:	f8b9 c000 	ldrh.w	ip, [r9]
 801351a:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 801351e:	fb0a 440c 	mla	r4, sl, ip, r4
 8013522:	445c      	add	r4, fp
 8013524:	46c4      	mov	ip, r8
 8013526:	b29b      	uxth	r3, r3
 8013528:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 801352c:	f84c 3b04 	str.w	r3, [ip], #4
 8013530:	f859 3b04 	ldr.w	r3, [r9], #4
 8013534:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8013538:	0c1b      	lsrs	r3, r3, #16
 801353a:	fb0a b303 	mla	r3, sl, r3, fp
 801353e:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8013542:	454f      	cmp	r7, r9
 8013544:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8013548:	d805      	bhi.n	8013556 <__multiply+0x124>
 801354a:	f8c8 3004 	str.w	r3, [r8, #4]
 801354e:	3504      	adds	r5, #4
 8013550:	e79b      	b.n	801348a <__multiply+0x58>
 8013552:	46d4      	mov	ip, sl
 8013554:	e7b3      	b.n	80134be <__multiply+0x8c>
 8013556:	46e0      	mov	r8, ip
 8013558:	e7dd      	b.n	8013516 <__multiply+0xe4>
 801355a:	3e01      	subs	r6, #1
 801355c:	e799      	b.n	8013492 <__multiply+0x60>
	...

08013560 <__pow5mult>:
 8013560:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013564:	4615      	mov	r5, r2
 8013566:	f012 0203 	ands.w	r2, r2, #3
 801356a:	4606      	mov	r6, r0
 801356c:	460f      	mov	r7, r1
 801356e:	d007      	beq.n	8013580 <__pow5mult+0x20>
 8013570:	3a01      	subs	r2, #1
 8013572:	4c21      	ldr	r4, [pc, #132]	; (80135f8 <__pow5mult+0x98>)
 8013574:	2300      	movs	r3, #0
 8013576:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801357a:	f7ff fe8a 	bl	8013292 <__multadd>
 801357e:	4607      	mov	r7, r0
 8013580:	10ad      	asrs	r5, r5, #2
 8013582:	d035      	beq.n	80135f0 <__pow5mult+0x90>
 8013584:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8013586:	b93c      	cbnz	r4, 8013598 <__pow5mult+0x38>
 8013588:	2010      	movs	r0, #16
 801358a:	f7fc fea1 	bl	80102d0 <malloc>
 801358e:	6270      	str	r0, [r6, #36]	; 0x24
 8013590:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8013594:	6004      	str	r4, [r0, #0]
 8013596:	60c4      	str	r4, [r0, #12]
 8013598:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 801359c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80135a0:	b94c      	cbnz	r4, 80135b6 <__pow5mult+0x56>
 80135a2:	f240 2171 	movw	r1, #625	; 0x271
 80135a6:	4630      	mov	r0, r6
 80135a8:	f7ff ff3a 	bl	8013420 <__i2b>
 80135ac:	2300      	movs	r3, #0
 80135ae:	f8c8 0008 	str.w	r0, [r8, #8]
 80135b2:	4604      	mov	r4, r0
 80135b4:	6003      	str	r3, [r0, #0]
 80135b6:	f04f 0800 	mov.w	r8, #0
 80135ba:	07eb      	lsls	r3, r5, #31
 80135bc:	d50a      	bpl.n	80135d4 <__pow5mult+0x74>
 80135be:	4639      	mov	r1, r7
 80135c0:	4622      	mov	r2, r4
 80135c2:	4630      	mov	r0, r6
 80135c4:	f7ff ff35 	bl	8013432 <__multiply>
 80135c8:	4639      	mov	r1, r7
 80135ca:	4681      	mov	r9, r0
 80135cc:	4630      	mov	r0, r6
 80135ce:	f7ff fe49 	bl	8013264 <_Bfree>
 80135d2:	464f      	mov	r7, r9
 80135d4:	106d      	asrs	r5, r5, #1
 80135d6:	d00b      	beq.n	80135f0 <__pow5mult+0x90>
 80135d8:	6820      	ldr	r0, [r4, #0]
 80135da:	b938      	cbnz	r0, 80135ec <__pow5mult+0x8c>
 80135dc:	4622      	mov	r2, r4
 80135de:	4621      	mov	r1, r4
 80135e0:	4630      	mov	r0, r6
 80135e2:	f7ff ff26 	bl	8013432 <__multiply>
 80135e6:	6020      	str	r0, [r4, #0]
 80135e8:	f8c0 8000 	str.w	r8, [r0]
 80135ec:	4604      	mov	r4, r0
 80135ee:	e7e4      	b.n	80135ba <__pow5mult+0x5a>
 80135f0:	4638      	mov	r0, r7
 80135f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80135f6:	bf00      	nop
 80135f8:	08015ea0 	.word	0x08015ea0

080135fc <__lshift>:
 80135fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013600:	460c      	mov	r4, r1
 8013602:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8013606:	6923      	ldr	r3, [r4, #16]
 8013608:	6849      	ldr	r1, [r1, #4]
 801360a:	eb0a 0903 	add.w	r9, sl, r3
 801360e:	68a3      	ldr	r3, [r4, #8]
 8013610:	4607      	mov	r7, r0
 8013612:	4616      	mov	r6, r2
 8013614:	f109 0501 	add.w	r5, r9, #1
 8013618:	42ab      	cmp	r3, r5
 801361a:	db32      	blt.n	8013682 <__lshift+0x86>
 801361c:	4638      	mov	r0, r7
 801361e:	f7ff fded 	bl	80131fc <_Balloc>
 8013622:	2300      	movs	r3, #0
 8013624:	4680      	mov	r8, r0
 8013626:	f100 0114 	add.w	r1, r0, #20
 801362a:	461a      	mov	r2, r3
 801362c:	4553      	cmp	r3, sl
 801362e:	db2b      	blt.n	8013688 <__lshift+0x8c>
 8013630:	6920      	ldr	r0, [r4, #16]
 8013632:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8013636:	f104 0314 	add.w	r3, r4, #20
 801363a:	f016 021f 	ands.w	r2, r6, #31
 801363e:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8013642:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8013646:	d025      	beq.n	8013694 <__lshift+0x98>
 8013648:	f1c2 0e20 	rsb	lr, r2, #32
 801364c:	2000      	movs	r0, #0
 801364e:	681e      	ldr	r6, [r3, #0]
 8013650:	468a      	mov	sl, r1
 8013652:	4096      	lsls	r6, r2
 8013654:	4330      	orrs	r0, r6
 8013656:	f84a 0b04 	str.w	r0, [sl], #4
 801365a:	f853 0b04 	ldr.w	r0, [r3], #4
 801365e:	459c      	cmp	ip, r3
 8013660:	fa20 f00e 	lsr.w	r0, r0, lr
 8013664:	d814      	bhi.n	8013690 <__lshift+0x94>
 8013666:	6048      	str	r0, [r1, #4]
 8013668:	b108      	cbz	r0, 801366e <__lshift+0x72>
 801366a:	f109 0502 	add.w	r5, r9, #2
 801366e:	3d01      	subs	r5, #1
 8013670:	4638      	mov	r0, r7
 8013672:	f8c8 5010 	str.w	r5, [r8, #16]
 8013676:	4621      	mov	r1, r4
 8013678:	f7ff fdf4 	bl	8013264 <_Bfree>
 801367c:	4640      	mov	r0, r8
 801367e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013682:	3101      	adds	r1, #1
 8013684:	005b      	lsls	r3, r3, #1
 8013686:	e7c7      	b.n	8013618 <__lshift+0x1c>
 8013688:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 801368c:	3301      	adds	r3, #1
 801368e:	e7cd      	b.n	801362c <__lshift+0x30>
 8013690:	4651      	mov	r1, sl
 8013692:	e7dc      	b.n	801364e <__lshift+0x52>
 8013694:	3904      	subs	r1, #4
 8013696:	f853 2b04 	ldr.w	r2, [r3], #4
 801369a:	f841 2f04 	str.w	r2, [r1, #4]!
 801369e:	459c      	cmp	ip, r3
 80136a0:	d8f9      	bhi.n	8013696 <__lshift+0x9a>
 80136a2:	e7e4      	b.n	801366e <__lshift+0x72>

080136a4 <__mcmp>:
 80136a4:	6903      	ldr	r3, [r0, #16]
 80136a6:	690a      	ldr	r2, [r1, #16]
 80136a8:	1a9b      	subs	r3, r3, r2
 80136aa:	b530      	push	{r4, r5, lr}
 80136ac:	d10c      	bne.n	80136c8 <__mcmp+0x24>
 80136ae:	0092      	lsls	r2, r2, #2
 80136b0:	3014      	adds	r0, #20
 80136b2:	3114      	adds	r1, #20
 80136b4:	1884      	adds	r4, r0, r2
 80136b6:	4411      	add	r1, r2
 80136b8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80136bc:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80136c0:	4295      	cmp	r5, r2
 80136c2:	d003      	beq.n	80136cc <__mcmp+0x28>
 80136c4:	d305      	bcc.n	80136d2 <__mcmp+0x2e>
 80136c6:	2301      	movs	r3, #1
 80136c8:	4618      	mov	r0, r3
 80136ca:	bd30      	pop	{r4, r5, pc}
 80136cc:	42a0      	cmp	r0, r4
 80136ce:	d3f3      	bcc.n	80136b8 <__mcmp+0x14>
 80136d0:	e7fa      	b.n	80136c8 <__mcmp+0x24>
 80136d2:	f04f 33ff 	mov.w	r3, #4294967295
 80136d6:	e7f7      	b.n	80136c8 <__mcmp+0x24>

080136d8 <__mdiff>:
 80136d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80136dc:	460d      	mov	r5, r1
 80136de:	4607      	mov	r7, r0
 80136e0:	4611      	mov	r1, r2
 80136e2:	4628      	mov	r0, r5
 80136e4:	4614      	mov	r4, r2
 80136e6:	f7ff ffdd 	bl	80136a4 <__mcmp>
 80136ea:	1e06      	subs	r6, r0, #0
 80136ec:	d108      	bne.n	8013700 <__mdiff+0x28>
 80136ee:	4631      	mov	r1, r6
 80136f0:	4638      	mov	r0, r7
 80136f2:	f7ff fd83 	bl	80131fc <_Balloc>
 80136f6:	2301      	movs	r3, #1
 80136f8:	e9c0 3604 	strd	r3, r6, [r0, #16]
 80136fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013700:	bfa4      	itt	ge
 8013702:	4623      	movge	r3, r4
 8013704:	462c      	movge	r4, r5
 8013706:	4638      	mov	r0, r7
 8013708:	6861      	ldr	r1, [r4, #4]
 801370a:	bfa6      	itte	ge
 801370c:	461d      	movge	r5, r3
 801370e:	2600      	movge	r6, #0
 8013710:	2601      	movlt	r6, #1
 8013712:	f7ff fd73 	bl	80131fc <_Balloc>
 8013716:	692b      	ldr	r3, [r5, #16]
 8013718:	60c6      	str	r6, [r0, #12]
 801371a:	6926      	ldr	r6, [r4, #16]
 801371c:	f105 0914 	add.w	r9, r5, #20
 8013720:	f104 0214 	add.w	r2, r4, #20
 8013724:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8013728:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 801372c:	f100 0514 	add.w	r5, r0, #20
 8013730:	f04f 0e00 	mov.w	lr, #0
 8013734:	f852 ab04 	ldr.w	sl, [r2], #4
 8013738:	f859 4b04 	ldr.w	r4, [r9], #4
 801373c:	fa1e f18a 	uxtah	r1, lr, sl
 8013740:	b2a3      	uxth	r3, r4
 8013742:	1ac9      	subs	r1, r1, r3
 8013744:	0c23      	lsrs	r3, r4, #16
 8013746:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 801374a:	eb03 4321 	add.w	r3, r3, r1, asr #16
 801374e:	b289      	uxth	r1, r1
 8013750:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8013754:	45c8      	cmp	r8, r9
 8013756:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 801375a:	4694      	mov	ip, r2
 801375c:	f845 3b04 	str.w	r3, [r5], #4
 8013760:	d8e8      	bhi.n	8013734 <__mdiff+0x5c>
 8013762:	45bc      	cmp	ip, r7
 8013764:	d304      	bcc.n	8013770 <__mdiff+0x98>
 8013766:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 801376a:	b183      	cbz	r3, 801378e <__mdiff+0xb6>
 801376c:	6106      	str	r6, [r0, #16]
 801376e:	e7c5      	b.n	80136fc <__mdiff+0x24>
 8013770:	f85c 1b04 	ldr.w	r1, [ip], #4
 8013774:	fa1e f381 	uxtah	r3, lr, r1
 8013778:	141a      	asrs	r2, r3, #16
 801377a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 801377e:	b29b      	uxth	r3, r3
 8013780:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8013784:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8013788:	f845 3b04 	str.w	r3, [r5], #4
 801378c:	e7e9      	b.n	8013762 <__mdiff+0x8a>
 801378e:	3e01      	subs	r6, #1
 8013790:	e7e9      	b.n	8013766 <__mdiff+0x8e>
	...

08013794 <__ulp>:
 8013794:	4b12      	ldr	r3, [pc, #72]	; (80137e0 <__ulp+0x4c>)
 8013796:	ee10 2a90 	vmov	r2, s1
 801379a:	401a      	ands	r2, r3
 801379c:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 80137a0:	2b00      	cmp	r3, #0
 80137a2:	dd04      	ble.n	80137ae <__ulp+0x1a>
 80137a4:	2000      	movs	r0, #0
 80137a6:	4619      	mov	r1, r3
 80137a8:	ec41 0b10 	vmov	d0, r0, r1
 80137ac:	4770      	bx	lr
 80137ae:	425b      	negs	r3, r3
 80137b0:	151b      	asrs	r3, r3, #20
 80137b2:	2b13      	cmp	r3, #19
 80137b4:	f04f 0000 	mov.w	r0, #0
 80137b8:	f04f 0100 	mov.w	r1, #0
 80137bc:	dc04      	bgt.n	80137c8 <__ulp+0x34>
 80137be:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80137c2:	fa42 f103 	asr.w	r1, r2, r3
 80137c6:	e7ef      	b.n	80137a8 <__ulp+0x14>
 80137c8:	3b14      	subs	r3, #20
 80137ca:	2b1e      	cmp	r3, #30
 80137cc:	f04f 0201 	mov.w	r2, #1
 80137d0:	bfda      	itte	le
 80137d2:	f1c3 031f 	rsble	r3, r3, #31
 80137d6:	fa02 f303 	lslle.w	r3, r2, r3
 80137da:	4613      	movgt	r3, r2
 80137dc:	4618      	mov	r0, r3
 80137de:	e7e3      	b.n	80137a8 <__ulp+0x14>
 80137e0:	7ff00000 	.word	0x7ff00000

080137e4 <__b2d>:
 80137e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80137e6:	6905      	ldr	r5, [r0, #16]
 80137e8:	f100 0714 	add.w	r7, r0, #20
 80137ec:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 80137f0:	1f2e      	subs	r6, r5, #4
 80137f2:	f855 4c04 	ldr.w	r4, [r5, #-4]
 80137f6:	4620      	mov	r0, r4
 80137f8:	f7ff fdc4 	bl	8013384 <__hi0bits>
 80137fc:	f1c0 0320 	rsb	r3, r0, #32
 8013800:	280a      	cmp	r0, #10
 8013802:	600b      	str	r3, [r1, #0]
 8013804:	f8df c074 	ldr.w	ip, [pc, #116]	; 801387c <__b2d+0x98>
 8013808:	dc14      	bgt.n	8013834 <__b2d+0x50>
 801380a:	f1c0 0e0b 	rsb	lr, r0, #11
 801380e:	fa24 f10e 	lsr.w	r1, r4, lr
 8013812:	42b7      	cmp	r7, r6
 8013814:	ea41 030c 	orr.w	r3, r1, ip
 8013818:	bf34      	ite	cc
 801381a:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 801381e:	2100      	movcs	r1, #0
 8013820:	3015      	adds	r0, #21
 8013822:	fa04 f000 	lsl.w	r0, r4, r0
 8013826:	fa21 f10e 	lsr.w	r1, r1, lr
 801382a:	ea40 0201 	orr.w	r2, r0, r1
 801382e:	ec43 2b10 	vmov	d0, r2, r3
 8013832:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013834:	42b7      	cmp	r7, r6
 8013836:	bf3a      	itte	cc
 8013838:	f1a5 0608 	subcc.w	r6, r5, #8
 801383c:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8013840:	2100      	movcs	r1, #0
 8013842:	380b      	subs	r0, #11
 8013844:	d015      	beq.n	8013872 <__b2d+0x8e>
 8013846:	4084      	lsls	r4, r0
 8013848:	f1c0 0520 	rsb	r5, r0, #32
 801384c:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 8013850:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 8013854:	42be      	cmp	r6, r7
 8013856:	fa21 fc05 	lsr.w	ip, r1, r5
 801385a:	ea44 030c 	orr.w	r3, r4, ip
 801385e:	bf8c      	ite	hi
 8013860:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8013864:	2400      	movls	r4, #0
 8013866:	fa01 f000 	lsl.w	r0, r1, r0
 801386a:	40ec      	lsrs	r4, r5
 801386c:	ea40 0204 	orr.w	r2, r0, r4
 8013870:	e7dd      	b.n	801382e <__b2d+0x4a>
 8013872:	ea44 030c 	orr.w	r3, r4, ip
 8013876:	460a      	mov	r2, r1
 8013878:	e7d9      	b.n	801382e <__b2d+0x4a>
 801387a:	bf00      	nop
 801387c:	3ff00000 	.word	0x3ff00000

08013880 <__d2b>:
 8013880:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8013884:	460e      	mov	r6, r1
 8013886:	2101      	movs	r1, #1
 8013888:	ec59 8b10 	vmov	r8, r9, d0
 801388c:	4615      	mov	r5, r2
 801388e:	f7ff fcb5 	bl	80131fc <_Balloc>
 8013892:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8013896:	4607      	mov	r7, r0
 8013898:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801389c:	bb34      	cbnz	r4, 80138ec <__d2b+0x6c>
 801389e:	9301      	str	r3, [sp, #4]
 80138a0:	f1b8 0300 	subs.w	r3, r8, #0
 80138a4:	d027      	beq.n	80138f6 <__d2b+0x76>
 80138a6:	a802      	add	r0, sp, #8
 80138a8:	f840 3d08 	str.w	r3, [r0, #-8]!
 80138ac:	f7ff fd89 	bl	80133c2 <__lo0bits>
 80138b0:	9900      	ldr	r1, [sp, #0]
 80138b2:	b1f0      	cbz	r0, 80138f2 <__d2b+0x72>
 80138b4:	9a01      	ldr	r2, [sp, #4]
 80138b6:	f1c0 0320 	rsb	r3, r0, #32
 80138ba:	fa02 f303 	lsl.w	r3, r2, r3
 80138be:	430b      	orrs	r3, r1
 80138c0:	40c2      	lsrs	r2, r0
 80138c2:	617b      	str	r3, [r7, #20]
 80138c4:	9201      	str	r2, [sp, #4]
 80138c6:	9b01      	ldr	r3, [sp, #4]
 80138c8:	61bb      	str	r3, [r7, #24]
 80138ca:	2b00      	cmp	r3, #0
 80138cc:	bf14      	ite	ne
 80138ce:	2102      	movne	r1, #2
 80138d0:	2101      	moveq	r1, #1
 80138d2:	6139      	str	r1, [r7, #16]
 80138d4:	b1c4      	cbz	r4, 8013908 <__d2b+0x88>
 80138d6:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 80138da:	4404      	add	r4, r0
 80138dc:	6034      	str	r4, [r6, #0]
 80138de:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80138e2:	6028      	str	r0, [r5, #0]
 80138e4:	4638      	mov	r0, r7
 80138e6:	b003      	add	sp, #12
 80138e8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80138ec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80138f0:	e7d5      	b.n	801389e <__d2b+0x1e>
 80138f2:	6179      	str	r1, [r7, #20]
 80138f4:	e7e7      	b.n	80138c6 <__d2b+0x46>
 80138f6:	a801      	add	r0, sp, #4
 80138f8:	f7ff fd63 	bl	80133c2 <__lo0bits>
 80138fc:	9b01      	ldr	r3, [sp, #4]
 80138fe:	617b      	str	r3, [r7, #20]
 8013900:	2101      	movs	r1, #1
 8013902:	6139      	str	r1, [r7, #16]
 8013904:	3020      	adds	r0, #32
 8013906:	e7e5      	b.n	80138d4 <__d2b+0x54>
 8013908:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 801390c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8013910:	6030      	str	r0, [r6, #0]
 8013912:	6918      	ldr	r0, [r3, #16]
 8013914:	f7ff fd36 	bl	8013384 <__hi0bits>
 8013918:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 801391c:	e7e1      	b.n	80138e2 <__d2b+0x62>

0801391e <__ratio>:
 801391e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013922:	4688      	mov	r8, r1
 8013924:	4669      	mov	r1, sp
 8013926:	4681      	mov	r9, r0
 8013928:	f7ff ff5c 	bl	80137e4 <__b2d>
 801392c:	a901      	add	r1, sp, #4
 801392e:	4640      	mov	r0, r8
 8013930:	ec57 6b10 	vmov	r6, r7, d0
 8013934:	f7ff ff56 	bl	80137e4 <__b2d>
 8013938:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801393c:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8013940:	eba3 0c02 	sub.w	ip, r3, r2
 8013944:	e9dd 3200 	ldrd	r3, r2, [sp]
 8013948:	1a9b      	subs	r3, r3, r2
 801394a:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 801394e:	ec5b ab10 	vmov	sl, fp, d0
 8013952:	2b00      	cmp	r3, #0
 8013954:	bfce      	itee	gt
 8013956:	463a      	movgt	r2, r7
 8013958:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 801395c:	465a      	movle	r2, fp
 801395e:	4659      	mov	r1, fp
 8013960:	463d      	mov	r5, r7
 8013962:	bfd4      	ite	le
 8013964:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
 8013968:	eb02 5503 	addgt.w	r5, r2, r3, lsl #20
 801396c:	4630      	mov	r0, r6
 801396e:	ee10 2a10 	vmov	r2, s0
 8013972:	460b      	mov	r3, r1
 8013974:	4629      	mov	r1, r5
 8013976:	f7ec ff69 	bl	800084c <__aeabi_ddiv>
 801397a:	ec41 0b10 	vmov	d0, r0, r1
 801397e:	b003      	add	sp, #12
 8013980:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08013984 <__copybits>:
 8013984:	3901      	subs	r1, #1
 8013986:	b510      	push	{r4, lr}
 8013988:	1149      	asrs	r1, r1, #5
 801398a:	6914      	ldr	r4, [r2, #16]
 801398c:	3101      	adds	r1, #1
 801398e:	f102 0314 	add.w	r3, r2, #20
 8013992:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8013996:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 801399a:	42a3      	cmp	r3, r4
 801399c:	4602      	mov	r2, r0
 801399e:	d303      	bcc.n	80139a8 <__copybits+0x24>
 80139a0:	2300      	movs	r3, #0
 80139a2:	428a      	cmp	r2, r1
 80139a4:	d305      	bcc.n	80139b2 <__copybits+0x2e>
 80139a6:	bd10      	pop	{r4, pc}
 80139a8:	f853 2b04 	ldr.w	r2, [r3], #4
 80139ac:	f840 2b04 	str.w	r2, [r0], #4
 80139b0:	e7f3      	b.n	801399a <__copybits+0x16>
 80139b2:	f842 3b04 	str.w	r3, [r2], #4
 80139b6:	e7f4      	b.n	80139a2 <__copybits+0x1e>

080139b8 <__any_on>:
 80139b8:	f100 0214 	add.w	r2, r0, #20
 80139bc:	6900      	ldr	r0, [r0, #16]
 80139be:	114b      	asrs	r3, r1, #5
 80139c0:	4298      	cmp	r0, r3
 80139c2:	b510      	push	{r4, lr}
 80139c4:	db11      	blt.n	80139ea <__any_on+0x32>
 80139c6:	dd0a      	ble.n	80139de <__any_on+0x26>
 80139c8:	f011 011f 	ands.w	r1, r1, #31
 80139cc:	d007      	beq.n	80139de <__any_on+0x26>
 80139ce:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80139d2:	fa24 f001 	lsr.w	r0, r4, r1
 80139d6:	fa00 f101 	lsl.w	r1, r0, r1
 80139da:	428c      	cmp	r4, r1
 80139dc:	d10b      	bne.n	80139f6 <__any_on+0x3e>
 80139de:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80139e2:	4293      	cmp	r3, r2
 80139e4:	d803      	bhi.n	80139ee <__any_on+0x36>
 80139e6:	2000      	movs	r0, #0
 80139e8:	bd10      	pop	{r4, pc}
 80139ea:	4603      	mov	r3, r0
 80139ec:	e7f7      	b.n	80139de <__any_on+0x26>
 80139ee:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80139f2:	2900      	cmp	r1, #0
 80139f4:	d0f5      	beq.n	80139e2 <__any_on+0x2a>
 80139f6:	2001      	movs	r0, #1
 80139f8:	e7f6      	b.n	80139e8 <__any_on+0x30>

080139fa <_calloc_r>:
 80139fa:	b538      	push	{r3, r4, r5, lr}
 80139fc:	fb02 f401 	mul.w	r4, r2, r1
 8013a00:	4621      	mov	r1, r4
 8013a02:	f7fc fcd7 	bl	80103b4 <_malloc_r>
 8013a06:	4605      	mov	r5, r0
 8013a08:	b118      	cbz	r0, 8013a12 <_calloc_r+0x18>
 8013a0a:	4622      	mov	r2, r4
 8013a0c:	2100      	movs	r1, #0
 8013a0e:	f7fc fc7a 	bl	8010306 <memset>
 8013a12:	4628      	mov	r0, r5
 8013a14:	bd38      	pop	{r3, r4, r5, pc}

08013a16 <__ssputs_r>:
 8013a16:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013a1a:	688e      	ldr	r6, [r1, #8]
 8013a1c:	429e      	cmp	r6, r3
 8013a1e:	4682      	mov	sl, r0
 8013a20:	460c      	mov	r4, r1
 8013a22:	4690      	mov	r8, r2
 8013a24:	4699      	mov	r9, r3
 8013a26:	d837      	bhi.n	8013a98 <__ssputs_r+0x82>
 8013a28:	898a      	ldrh	r2, [r1, #12]
 8013a2a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8013a2e:	d031      	beq.n	8013a94 <__ssputs_r+0x7e>
 8013a30:	6825      	ldr	r5, [r4, #0]
 8013a32:	6909      	ldr	r1, [r1, #16]
 8013a34:	1a6f      	subs	r7, r5, r1
 8013a36:	6965      	ldr	r5, [r4, #20]
 8013a38:	2302      	movs	r3, #2
 8013a3a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8013a3e:	fb95 f5f3 	sdiv	r5, r5, r3
 8013a42:	f109 0301 	add.w	r3, r9, #1
 8013a46:	443b      	add	r3, r7
 8013a48:	429d      	cmp	r5, r3
 8013a4a:	bf38      	it	cc
 8013a4c:	461d      	movcc	r5, r3
 8013a4e:	0553      	lsls	r3, r2, #21
 8013a50:	d530      	bpl.n	8013ab4 <__ssputs_r+0x9e>
 8013a52:	4629      	mov	r1, r5
 8013a54:	f7fc fcae 	bl	80103b4 <_malloc_r>
 8013a58:	4606      	mov	r6, r0
 8013a5a:	b950      	cbnz	r0, 8013a72 <__ssputs_r+0x5c>
 8013a5c:	230c      	movs	r3, #12
 8013a5e:	f8ca 3000 	str.w	r3, [sl]
 8013a62:	89a3      	ldrh	r3, [r4, #12]
 8013a64:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013a68:	81a3      	strh	r3, [r4, #12]
 8013a6a:	f04f 30ff 	mov.w	r0, #4294967295
 8013a6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013a72:	463a      	mov	r2, r7
 8013a74:	6921      	ldr	r1, [r4, #16]
 8013a76:	f7fc fc3b 	bl	80102f0 <memcpy>
 8013a7a:	89a3      	ldrh	r3, [r4, #12]
 8013a7c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8013a80:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013a84:	81a3      	strh	r3, [r4, #12]
 8013a86:	6126      	str	r6, [r4, #16]
 8013a88:	6165      	str	r5, [r4, #20]
 8013a8a:	443e      	add	r6, r7
 8013a8c:	1bed      	subs	r5, r5, r7
 8013a8e:	6026      	str	r6, [r4, #0]
 8013a90:	60a5      	str	r5, [r4, #8]
 8013a92:	464e      	mov	r6, r9
 8013a94:	454e      	cmp	r6, r9
 8013a96:	d900      	bls.n	8013a9a <__ssputs_r+0x84>
 8013a98:	464e      	mov	r6, r9
 8013a9a:	4632      	mov	r2, r6
 8013a9c:	4641      	mov	r1, r8
 8013a9e:	6820      	ldr	r0, [r4, #0]
 8013aa0:	f000 f919 	bl	8013cd6 <memmove>
 8013aa4:	68a3      	ldr	r3, [r4, #8]
 8013aa6:	1b9b      	subs	r3, r3, r6
 8013aa8:	60a3      	str	r3, [r4, #8]
 8013aaa:	6823      	ldr	r3, [r4, #0]
 8013aac:	441e      	add	r6, r3
 8013aae:	6026      	str	r6, [r4, #0]
 8013ab0:	2000      	movs	r0, #0
 8013ab2:	e7dc      	b.n	8013a6e <__ssputs_r+0x58>
 8013ab4:	462a      	mov	r2, r5
 8013ab6:	f000 f927 	bl	8013d08 <_realloc_r>
 8013aba:	4606      	mov	r6, r0
 8013abc:	2800      	cmp	r0, #0
 8013abe:	d1e2      	bne.n	8013a86 <__ssputs_r+0x70>
 8013ac0:	6921      	ldr	r1, [r4, #16]
 8013ac2:	4650      	mov	r0, sl
 8013ac4:	f7fc fc28 	bl	8010318 <_free_r>
 8013ac8:	e7c8      	b.n	8013a5c <__ssputs_r+0x46>
	...

08013acc <_svfiprintf_r>:
 8013acc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013ad0:	461d      	mov	r5, r3
 8013ad2:	898b      	ldrh	r3, [r1, #12]
 8013ad4:	061f      	lsls	r7, r3, #24
 8013ad6:	b09d      	sub	sp, #116	; 0x74
 8013ad8:	4680      	mov	r8, r0
 8013ada:	460c      	mov	r4, r1
 8013adc:	4616      	mov	r6, r2
 8013ade:	d50f      	bpl.n	8013b00 <_svfiprintf_r+0x34>
 8013ae0:	690b      	ldr	r3, [r1, #16]
 8013ae2:	b96b      	cbnz	r3, 8013b00 <_svfiprintf_r+0x34>
 8013ae4:	2140      	movs	r1, #64	; 0x40
 8013ae6:	f7fc fc65 	bl	80103b4 <_malloc_r>
 8013aea:	6020      	str	r0, [r4, #0]
 8013aec:	6120      	str	r0, [r4, #16]
 8013aee:	b928      	cbnz	r0, 8013afc <_svfiprintf_r+0x30>
 8013af0:	230c      	movs	r3, #12
 8013af2:	f8c8 3000 	str.w	r3, [r8]
 8013af6:	f04f 30ff 	mov.w	r0, #4294967295
 8013afa:	e0c8      	b.n	8013c8e <_svfiprintf_r+0x1c2>
 8013afc:	2340      	movs	r3, #64	; 0x40
 8013afe:	6163      	str	r3, [r4, #20]
 8013b00:	2300      	movs	r3, #0
 8013b02:	9309      	str	r3, [sp, #36]	; 0x24
 8013b04:	2320      	movs	r3, #32
 8013b06:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8013b0a:	2330      	movs	r3, #48	; 0x30
 8013b0c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8013b10:	9503      	str	r5, [sp, #12]
 8013b12:	f04f 0b01 	mov.w	fp, #1
 8013b16:	4637      	mov	r7, r6
 8013b18:	463d      	mov	r5, r7
 8013b1a:	f815 3b01 	ldrb.w	r3, [r5], #1
 8013b1e:	b10b      	cbz	r3, 8013b24 <_svfiprintf_r+0x58>
 8013b20:	2b25      	cmp	r3, #37	; 0x25
 8013b22:	d13e      	bne.n	8013ba2 <_svfiprintf_r+0xd6>
 8013b24:	ebb7 0a06 	subs.w	sl, r7, r6
 8013b28:	d00b      	beq.n	8013b42 <_svfiprintf_r+0x76>
 8013b2a:	4653      	mov	r3, sl
 8013b2c:	4632      	mov	r2, r6
 8013b2e:	4621      	mov	r1, r4
 8013b30:	4640      	mov	r0, r8
 8013b32:	f7ff ff70 	bl	8013a16 <__ssputs_r>
 8013b36:	3001      	adds	r0, #1
 8013b38:	f000 80a4 	beq.w	8013c84 <_svfiprintf_r+0x1b8>
 8013b3c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013b3e:	4453      	add	r3, sl
 8013b40:	9309      	str	r3, [sp, #36]	; 0x24
 8013b42:	783b      	ldrb	r3, [r7, #0]
 8013b44:	2b00      	cmp	r3, #0
 8013b46:	f000 809d 	beq.w	8013c84 <_svfiprintf_r+0x1b8>
 8013b4a:	2300      	movs	r3, #0
 8013b4c:	f04f 32ff 	mov.w	r2, #4294967295
 8013b50:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8013b54:	9304      	str	r3, [sp, #16]
 8013b56:	9307      	str	r3, [sp, #28]
 8013b58:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8013b5c:	931a      	str	r3, [sp, #104]	; 0x68
 8013b5e:	462f      	mov	r7, r5
 8013b60:	2205      	movs	r2, #5
 8013b62:	f817 1b01 	ldrb.w	r1, [r7], #1
 8013b66:	4850      	ldr	r0, [pc, #320]	; (8013ca8 <_svfiprintf_r+0x1dc>)
 8013b68:	f7ec fb3a 	bl	80001e0 <memchr>
 8013b6c:	9b04      	ldr	r3, [sp, #16]
 8013b6e:	b9d0      	cbnz	r0, 8013ba6 <_svfiprintf_r+0xda>
 8013b70:	06d9      	lsls	r1, r3, #27
 8013b72:	bf44      	itt	mi
 8013b74:	2220      	movmi	r2, #32
 8013b76:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8013b7a:	071a      	lsls	r2, r3, #28
 8013b7c:	bf44      	itt	mi
 8013b7e:	222b      	movmi	r2, #43	; 0x2b
 8013b80:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8013b84:	782a      	ldrb	r2, [r5, #0]
 8013b86:	2a2a      	cmp	r2, #42	; 0x2a
 8013b88:	d015      	beq.n	8013bb6 <_svfiprintf_r+0xea>
 8013b8a:	9a07      	ldr	r2, [sp, #28]
 8013b8c:	462f      	mov	r7, r5
 8013b8e:	2000      	movs	r0, #0
 8013b90:	250a      	movs	r5, #10
 8013b92:	4639      	mov	r1, r7
 8013b94:	f811 3b01 	ldrb.w	r3, [r1], #1
 8013b98:	3b30      	subs	r3, #48	; 0x30
 8013b9a:	2b09      	cmp	r3, #9
 8013b9c:	d94d      	bls.n	8013c3a <_svfiprintf_r+0x16e>
 8013b9e:	b1b8      	cbz	r0, 8013bd0 <_svfiprintf_r+0x104>
 8013ba0:	e00f      	b.n	8013bc2 <_svfiprintf_r+0xf6>
 8013ba2:	462f      	mov	r7, r5
 8013ba4:	e7b8      	b.n	8013b18 <_svfiprintf_r+0x4c>
 8013ba6:	4a40      	ldr	r2, [pc, #256]	; (8013ca8 <_svfiprintf_r+0x1dc>)
 8013ba8:	1a80      	subs	r0, r0, r2
 8013baa:	fa0b f000 	lsl.w	r0, fp, r0
 8013bae:	4318      	orrs	r0, r3
 8013bb0:	9004      	str	r0, [sp, #16]
 8013bb2:	463d      	mov	r5, r7
 8013bb4:	e7d3      	b.n	8013b5e <_svfiprintf_r+0x92>
 8013bb6:	9a03      	ldr	r2, [sp, #12]
 8013bb8:	1d11      	adds	r1, r2, #4
 8013bba:	6812      	ldr	r2, [r2, #0]
 8013bbc:	9103      	str	r1, [sp, #12]
 8013bbe:	2a00      	cmp	r2, #0
 8013bc0:	db01      	blt.n	8013bc6 <_svfiprintf_r+0xfa>
 8013bc2:	9207      	str	r2, [sp, #28]
 8013bc4:	e004      	b.n	8013bd0 <_svfiprintf_r+0x104>
 8013bc6:	4252      	negs	r2, r2
 8013bc8:	f043 0302 	orr.w	r3, r3, #2
 8013bcc:	9207      	str	r2, [sp, #28]
 8013bce:	9304      	str	r3, [sp, #16]
 8013bd0:	783b      	ldrb	r3, [r7, #0]
 8013bd2:	2b2e      	cmp	r3, #46	; 0x2e
 8013bd4:	d10c      	bne.n	8013bf0 <_svfiprintf_r+0x124>
 8013bd6:	787b      	ldrb	r3, [r7, #1]
 8013bd8:	2b2a      	cmp	r3, #42	; 0x2a
 8013bda:	d133      	bne.n	8013c44 <_svfiprintf_r+0x178>
 8013bdc:	9b03      	ldr	r3, [sp, #12]
 8013bde:	1d1a      	adds	r2, r3, #4
 8013be0:	681b      	ldr	r3, [r3, #0]
 8013be2:	9203      	str	r2, [sp, #12]
 8013be4:	2b00      	cmp	r3, #0
 8013be6:	bfb8      	it	lt
 8013be8:	f04f 33ff 	movlt.w	r3, #4294967295
 8013bec:	3702      	adds	r7, #2
 8013bee:	9305      	str	r3, [sp, #20]
 8013bf0:	4d2e      	ldr	r5, [pc, #184]	; (8013cac <_svfiprintf_r+0x1e0>)
 8013bf2:	7839      	ldrb	r1, [r7, #0]
 8013bf4:	2203      	movs	r2, #3
 8013bf6:	4628      	mov	r0, r5
 8013bf8:	f7ec faf2 	bl	80001e0 <memchr>
 8013bfc:	b138      	cbz	r0, 8013c0e <_svfiprintf_r+0x142>
 8013bfe:	2340      	movs	r3, #64	; 0x40
 8013c00:	1b40      	subs	r0, r0, r5
 8013c02:	fa03 f000 	lsl.w	r0, r3, r0
 8013c06:	9b04      	ldr	r3, [sp, #16]
 8013c08:	4303      	orrs	r3, r0
 8013c0a:	3701      	adds	r7, #1
 8013c0c:	9304      	str	r3, [sp, #16]
 8013c0e:	7839      	ldrb	r1, [r7, #0]
 8013c10:	4827      	ldr	r0, [pc, #156]	; (8013cb0 <_svfiprintf_r+0x1e4>)
 8013c12:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8013c16:	2206      	movs	r2, #6
 8013c18:	1c7e      	adds	r6, r7, #1
 8013c1a:	f7ec fae1 	bl	80001e0 <memchr>
 8013c1e:	2800      	cmp	r0, #0
 8013c20:	d038      	beq.n	8013c94 <_svfiprintf_r+0x1c8>
 8013c22:	4b24      	ldr	r3, [pc, #144]	; (8013cb4 <_svfiprintf_r+0x1e8>)
 8013c24:	bb13      	cbnz	r3, 8013c6c <_svfiprintf_r+0x1a0>
 8013c26:	9b03      	ldr	r3, [sp, #12]
 8013c28:	3307      	adds	r3, #7
 8013c2a:	f023 0307 	bic.w	r3, r3, #7
 8013c2e:	3308      	adds	r3, #8
 8013c30:	9303      	str	r3, [sp, #12]
 8013c32:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013c34:	444b      	add	r3, r9
 8013c36:	9309      	str	r3, [sp, #36]	; 0x24
 8013c38:	e76d      	b.n	8013b16 <_svfiprintf_r+0x4a>
 8013c3a:	fb05 3202 	mla	r2, r5, r2, r3
 8013c3e:	2001      	movs	r0, #1
 8013c40:	460f      	mov	r7, r1
 8013c42:	e7a6      	b.n	8013b92 <_svfiprintf_r+0xc6>
 8013c44:	2300      	movs	r3, #0
 8013c46:	3701      	adds	r7, #1
 8013c48:	9305      	str	r3, [sp, #20]
 8013c4a:	4619      	mov	r1, r3
 8013c4c:	250a      	movs	r5, #10
 8013c4e:	4638      	mov	r0, r7
 8013c50:	f810 2b01 	ldrb.w	r2, [r0], #1
 8013c54:	3a30      	subs	r2, #48	; 0x30
 8013c56:	2a09      	cmp	r2, #9
 8013c58:	d903      	bls.n	8013c62 <_svfiprintf_r+0x196>
 8013c5a:	2b00      	cmp	r3, #0
 8013c5c:	d0c8      	beq.n	8013bf0 <_svfiprintf_r+0x124>
 8013c5e:	9105      	str	r1, [sp, #20]
 8013c60:	e7c6      	b.n	8013bf0 <_svfiprintf_r+0x124>
 8013c62:	fb05 2101 	mla	r1, r5, r1, r2
 8013c66:	2301      	movs	r3, #1
 8013c68:	4607      	mov	r7, r0
 8013c6a:	e7f0      	b.n	8013c4e <_svfiprintf_r+0x182>
 8013c6c:	ab03      	add	r3, sp, #12
 8013c6e:	9300      	str	r3, [sp, #0]
 8013c70:	4622      	mov	r2, r4
 8013c72:	4b11      	ldr	r3, [pc, #68]	; (8013cb8 <_svfiprintf_r+0x1ec>)
 8013c74:	a904      	add	r1, sp, #16
 8013c76:	4640      	mov	r0, r8
 8013c78:	f7fc fc8a 	bl	8010590 <_printf_float>
 8013c7c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8013c80:	4681      	mov	r9, r0
 8013c82:	d1d6      	bne.n	8013c32 <_svfiprintf_r+0x166>
 8013c84:	89a3      	ldrh	r3, [r4, #12]
 8013c86:	065b      	lsls	r3, r3, #25
 8013c88:	f53f af35 	bmi.w	8013af6 <_svfiprintf_r+0x2a>
 8013c8c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8013c8e:	b01d      	add	sp, #116	; 0x74
 8013c90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013c94:	ab03      	add	r3, sp, #12
 8013c96:	9300      	str	r3, [sp, #0]
 8013c98:	4622      	mov	r2, r4
 8013c9a:	4b07      	ldr	r3, [pc, #28]	; (8013cb8 <_svfiprintf_r+0x1ec>)
 8013c9c:	a904      	add	r1, sp, #16
 8013c9e:	4640      	mov	r0, r8
 8013ca0:	f7fc ff2c 	bl	8010afc <_printf_i>
 8013ca4:	e7ea      	b.n	8013c7c <_svfiprintf_r+0x1b0>
 8013ca6:	bf00      	nop
 8013ca8:	08015eac 	.word	0x08015eac
 8013cac:	08015eb2 	.word	0x08015eb2
 8013cb0:	08015eb6 	.word	0x08015eb6
 8013cb4:	08010591 	.word	0x08010591
 8013cb8:	08013a17 	.word	0x08013a17

08013cbc <__ascii_wctomb>:
 8013cbc:	b149      	cbz	r1, 8013cd2 <__ascii_wctomb+0x16>
 8013cbe:	2aff      	cmp	r2, #255	; 0xff
 8013cc0:	bf85      	ittet	hi
 8013cc2:	238a      	movhi	r3, #138	; 0x8a
 8013cc4:	6003      	strhi	r3, [r0, #0]
 8013cc6:	700a      	strbls	r2, [r1, #0]
 8013cc8:	f04f 30ff 	movhi.w	r0, #4294967295
 8013ccc:	bf98      	it	ls
 8013cce:	2001      	movls	r0, #1
 8013cd0:	4770      	bx	lr
 8013cd2:	4608      	mov	r0, r1
 8013cd4:	4770      	bx	lr

08013cd6 <memmove>:
 8013cd6:	4288      	cmp	r0, r1
 8013cd8:	b510      	push	{r4, lr}
 8013cda:	eb01 0302 	add.w	r3, r1, r2
 8013cde:	d807      	bhi.n	8013cf0 <memmove+0x1a>
 8013ce0:	1e42      	subs	r2, r0, #1
 8013ce2:	4299      	cmp	r1, r3
 8013ce4:	d00a      	beq.n	8013cfc <memmove+0x26>
 8013ce6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8013cea:	f802 4f01 	strb.w	r4, [r2, #1]!
 8013cee:	e7f8      	b.n	8013ce2 <memmove+0xc>
 8013cf0:	4283      	cmp	r3, r0
 8013cf2:	d9f5      	bls.n	8013ce0 <memmove+0xa>
 8013cf4:	1881      	adds	r1, r0, r2
 8013cf6:	1ad2      	subs	r2, r2, r3
 8013cf8:	42d3      	cmn	r3, r2
 8013cfa:	d100      	bne.n	8013cfe <memmove+0x28>
 8013cfc:	bd10      	pop	{r4, pc}
 8013cfe:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8013d02:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8013d06:	e7f7      	b.n	8013cf8 <memmove+0x22>

08013d08 <_realloc_r>:
 8013d08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013d0a:	4607      	mov	r7, r0
 8013d0c:	4614      	mov	r4, r2
 8013d0e:	460e      	mov	r6, r1
 8013d10:	b921      	cbnz	r1, 8013d1c <_realloc_r+0x14>
 8013d12:	4611      	mov	r1, r2
 8013d14:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8013d18:	f7fc bb4c 	b.w	80103b4 <_malloc_r>
 8013d1c:	b922      	cbnz	r2, 8013d28 <_realloc_r+0x20>
 8013d1e:	f7fc fafb 	bl	8010318 <_free_r>
 8013d22:	4625      	mov	r5, r4
 8013d24:	4628      	mov	r0, r5
 8013d26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013d28:	f000 f814 	bl	8013d54 <_malloc_usable_size_r>
 8013d2c:	42a0      	cmp	r0, r4
 8013d2e:	d20f      	bcs.n	8013d50 <_realloc_r+0x48>
 8013d30:	4621      	mov	r1, r4
 8013d32:	4638      	mov	r0, r7
 8013d34:	f7fc fb3e 	bl	80103b4 <_malloc_r>
 8013d38:	4605      	mov	r5, r0
 8013d3a:	2800      	cmp	r0, #0
 8013d3c:	d0f2      	beq.n	8013d24 <_realloc_r+0x1c>
 8013d3e:	4631      	mov	r1, r6
 8013d40:	4622      	mov	r2, r4
 8013d42:	f7fc fad5 	bl	80102f0 <memcpy>
 8013d46:	4631      	mov	r1, r6
 8013d48:	4638      	mov	r0, r7
 8013d4a:	f7fc fae5 	bl	8010318 <_free_r>
 8013d4e:	e7e9      	b.n	8013d24 <_realloc_r+0x1c>
 8013d50:	4635      	mov	r5, r6
 8013d52:	e7e7      	b.n	8013d24 <_realloc_r+0x1c>

08013d54 <_malloc_usable_size_r>:
 8013d54:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8013d58:	1f18      	subs	r0, r3, #4
 8013d5a:	2b00      	cmp	r3, #0
 8013d5c:	bfbc      	itt	lt
 8013d5e:	580b      	ldrlt	r3, [r1, r0]
 8013d60:	18c0      	addlt	r0, r0, r3
 8013d62:	4770      	bx	lr

08013d64 <asin>:
 8013d64:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013d66:	ed2d 8b02 	vpush	{d8}
 8013d6a:	4e26      	ldr	r6, [pc, #152]	; (8013e04 <asin+0xa0>)
 8013d6c:	b08b      	sub	sp, #44	; 0x2c
 8013d6e:	ec55 4b10 	vmov	r4, r5, d0
 8013d72:	f000 fa11 	bl	8014198 <__ieee754_asin>
 8013d76:	f996 3000 	ldrsb.w	r3, [r6]
 8013d7a:	eeb0 8a40 	vmov.f32	s16, s0
 8013d7e:	eef0 8a60 	vmov.f32	s17, s1
 8013d82:	3301      	adds	r3, #1
 8013d84:	d036      	beq.n	8013df4 <asin+0x90>
 8013d86:	4622      	mov	r2, r4
 8013d88:	462b      	mov	r3, r5
 8013d8a:	4620      	mov	r0, r4
 8013d8c:	4629      	mov	r1, r5
 8013d8e:	f7ec fecd 	bl	8000b2c <__aeabi_dcmpun>
 8013d92:	4607      	mov	r7, r0
 8013d94:	bb70      	cbnz	r0, 8013df4 <asin+0x90>
 8013d96:	ec45 4b10 	vmov	d0, r4, r5
 8013d9a:	f001 fc51 	bl	8015640 <fabs>
 8013d9e:	2200      	movs	r2, #0
 8013da0:	4b19      	ldr	r3, [pc, #100]	; (8013e08 <asin+0xa4>)
 8013da2:	ec51 0b10 	vmov	r0, r1, d0
 8013da6:	f7ec feb7 	bl	8000b18 <__aeabi_dcmpgt>
 8013daa:	b318      	cbz	r0, 8013df4 <asin+0x90>
 8013dac:	2301      	movs	r3, #1
 8013dae:	9300      	str	r3, [sp, #0]
 8013db0:	4816      	ldr	r0, [pc, #88]	; (8013e0c <asin+0xa8>)
 8013db2:	4b17      	ldr	r3, [pc, #92]	; (8013e10 <asin+0xac>)
 8013db4:	9301      	str	r3, [sp, #4]
 8013db6:	9708      	str	r7, [sp, #32]
 8013db8:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8013dbc:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8013dc0:	f001 fc52 	bl	8015668 <nan>
 8013dc4:	f996 3000 	ldrsb.w	r3, [r6]
 8013dc8:	2b02      	cmp	r3, #2
 8013dca:	ed8d 0b06 	vstr	d0, [sp, #24]
 8013dce:	d104      	bne.n	8013dda <asin+0x76>
 8013dd0:	f001 fd5c 	bl	801588c <__errno>
 8013dd4:	2321      	movs	r3, #33	; 0x21
 8013dd6:	6003      	str	r3, [r0, #0]
 8013dd8:	e004      	b.n	8013de4 <asin+0x80>
 8013dda:	4668      	mov	r0, sp
 8013ddc:	f001 fc41 	bl	8015662 <matherr>
 8013de0:	2800      	cmp	r0, #0
 8013de2:	d0f5      	beq.n	8013dd0 <asin+0x6c>
 8013de4:	9b08      	ldr	r3, [sp, #32]
 8013de6:	b11b      	cbz	r3, 8013df0 <asin+0x8c>
 8013de8:	f001 fd50 	bl	801588c <__errno>
 8013dec:	9b08      	ldr	r3, [sp, #32]
 8013dee:	6003      	str	r3, [r0, #0]
 8013df0:	ed9d 8b06 	vldr	d8, [sp, #24]
 8013df4:	eeb0 0a48 	vmov.f32	s0, s16
 8013df8:	eef0 0a68 	vmov.f32	s1, s17
 8013dfc:	b00b      	add	sp, #44	; 0x2c
 8013dfe:	ecbd 8b02 	vpop	{d8}
 8013e02:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013e04:	20000350 	.word	0x20000350
 8013e08:	3ff00000 	.word	0x3ff00000
 8013e0c:	08015eb1 	.word	0x08015eb1
 8013e10:	08015fbe 	.word	0x08015fbe

08013e14 <atan2>:
 8013e14:	f000 bbd0 	b.w	80145b8 <__ieee754_atan2>

08013e18 <pow>:
 8013e18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013e1c:	ed2d 8b04 	vpush	{d8-d9}
 8013e20:	f8df 92d0 	ldr.w	r9, [pc, #720]	; 80140f4 <pow+0x2dc>
 8013e24:	b08d      	sub	sp, #52	; 0x34
 8013e26:	ec57 6b10 	vmov	r6, r7, d0
 8013e2a:	ec55 4b11 	vmov	r4, r5, d1
 8013e2e:	f000 fca3 	bl	8014778 <__ieee754_pow>
 8013e32:	f999 3000 	ldrsb.w	r3, [r9]
 8013e36:	9300      	str	r3, [sp, #0]
 8013e38:	3301      	adds	r3, #1
 8013e3a:	eeb0 8a40 	vmov.f32	s16, s0
 8013e3e:	eef0 8a60 	vmov.f32	s17, s1
 8013e42:	46c8      	mov	r8, r9
 8013e44:	d05f      	beq.n	8013f06 <pow+0xee>
 8013e46:	4622      	mov	r2, r4
 8013e48:	462b      	mov	r3, r5
 8013e4a:	4620      	mov	r0, r4
 8013e4c:	4629      	mov	r1, r5
 8013e4e:	f7ec fe6d 	bl	8000b2c <__aeabi_dcmpun>
 8013e52:	4683      	mov	fp, r0
 8013e54:	2800      	cmp	r0, #0
 8013e56:	d156      	bne.n	8013f06 <pow+0xee>
 8013e58:	4632      	mov	r2, r6
 8013e5a:	463b      	mov	r3, r7
 8013e5c:	4630      	mov	r0, r6
 8013e5e:	4639      	mov	r1, r7
 8013e60:	f7ec fe64 	bl	8000b2c <__aeabi_dcmpun>
 8013e64:	9001      	str	r0, [sp, #4]
 8013e66:	b1e8      	cbz	r0, 8013ea4 <pow+0x8c>
 8013e68:	2200      	movs	r2, #0
 8013e6a:	2300      	movs	r3, #0
 8013e6c:	4620      	mov	r0, r4
 8013e6e:	4629      	mov	r1, r5
 8013e70:	f7ec fe2a 	bl	8000ac8 <__aeabi_dcmpeq>
 8013e74:	2800      	cmp	r0, #0
 8013e76:	d046      	beq.n	8013f06 <pow+0xee>
 8013e78:	2301      	movs	r3, #1
 8013e7a:	9302      	str	r3, [sp, #8]
 8013e7c:	4b96      	ldr	r3, [pc, #600]	; (80140d8 <pow+0x2c0>)
 8013e7e:	9303      	str	r3, [sp, #12]
 8013e80:	4b96      	ldr	r3, [pc, #600]	; (80140dc <pow+0x2c4>)
 8013e82:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 8013e86:	2200      	movs	r2, #0
 8013e88:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8013e8c:	9b00      	ldr	r3, [sp, #0]
 8013e8e:	2b02      	cmp	r3, #2
 8013e90:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8013e94:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8013e98:	d033      	beq.n	8013f02 <pow+0xea>
 8013e9a:	a802      	add	r0, sp, #8
 8013e9c:	f001 fbe1 	bl	8015662 <matherr>
 8013ea0:	bb48      	cbnz	r0, 8013ef6 <pow+0xde>
 8013ea2:	e05d      	b.n	8013f60 <pow+0x148>
 8013ea4:	f04f 0a00 	mov.w	sl, #0
 8013ea8:	f04f 0b00 	mov.w	fp, #0
 8013eac:	4652      	mov	r2, sl
 8013eae:	465b      	mov	r3, fp
 8013eb0:	4630      	mov	r0, r6
 8013eb2:	4639      	mov	r1, r7
 8013eb4:	f7ec fe08 	bl	8000ac8 <__aeabi_dcmpeq>
 8013eb8:	ec4b ab19 	vmov	d9, sl, fp
 8013ebc:	2800      	cmp	r0, #0
 8013ebe:	d054      	beq.n	8013f6a <pow+0x152>
 8013ec0:	4652      	mov	r2, sl
 8013ec2:	465b      	mov	r3, fp
 8013ec4:	4620      	mov	r0, r4
 8013ec6:	4629      	mov	r1, r5
 8013ec8:	f7ec fdfe 	bl	8000ac8 <__aeabi_dcmpeq>
 8013ecc:	4680      	mov	r8, r0
 8013ece:	b318      	cbz	r0, 8013f18 <pow+0x100>
 8013ed0:	2301      	movs	r3, #1
 8013ed2:	9302      	str	r3, [sp, #8]
 8013ed4:	4b80      	ldr	r3, [pc, #512]	; (80140d8 <pow+0x2c0>)
 8013ed6:	9303      	str	r3, [sp, #12]
 8013ed8:	9b01      	ldr	r3, [sp, #4]
 8013eda:	930a      	str	r3, [sp, #40]	; 0x28
 8013edc:	9b00      	ldr	r3, [sp, #0]
 8013ede:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8013ee2:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8013ee6:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8013eea:	2b00      	cmp	r3, #0
 8013eec:	d0d5      	beq.n	8013e9a <pow+0x82>
 8013eee:	4b7b      	ldr	r3, [pc, #492]	; (80140dc <pow+0x2c4>)
 8013ef0:	2200      	movs	r2, #0
 8013ef2:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8013ef6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013ef8:	b11b      	cbz	r3, 8013f02 <pow+0xea>
 8013efa:	f001 fcc7 	bl	801588c <__errno>
 8013efe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013f00:	6003      	str	r3, [r0, #0]
 8013f02:	ed9d 8b08 	vldr	d8, [sp, #32]
 8013f06:	eeb0 0a48 	vmov.f32	s0, s16
 8013f0a:	eef0 0a68 	vmov.f32	s1, s17
 8013f0e:	b00d      	add	sp, #52	; 0x34
 8013f10:	ecbd 8b04 	vpop	{d8-d9}
 8013f14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013f18:	ec45 4b10 	vmov	d0, r4, r5
 8013f1c:	f001 fb99 	bl	8015652 <finite>
 8013f20:	2800      	cmp	r0, #0
 8013f22:	d0f0      	beq.n	8013f06 <pow+0xee>
 8013f24:	4652      	mov	r2, sl
 8013f26:	465b      	mov	r3, fp
 8013f28:	4620      	mov	r0, r4
 8013f2a:	4629      	mov	r1, r5
 8013f2c:	f7ec fdd6 	bl	8000adc <__aeabi_dcmplt>
 8013f30:	2800      	cmp	r0, #0
 8013f32:	d0e8      	beq.n	8013f06 <pow+0xee>
 8013f34:	2301      	movs	r3, #1
 8013f36:	9302      	str	r3, [sp, #8]
 8013f38:	4b67      	ldr	r3, [pc, #412]	; (80140d8 <pow+0x2c0>)
 8013f3a:	9303      	str	r3, [sp, #12]
 8013f3c:	f999 3000 	ldrsb.w	r3, [r9]
 8013f40:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
 8013f44:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8013f48:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8013f4c:	b913      	cbnz	r3, 8013f54 <pow+0x13c>
 8013f4e:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8013f52:	e7a2      	b.n	8013e9a <pow+0x82>
 8013f54:	4962      	ldr	r1, [pc, #392]	; (80140e0 <pow+0x2c8>)
 8013f56:	2000      	movs	r0, #0
 8013f58:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8013f5c:	2b02      	cmp	r3, #2
 8013f5e:	d19c      	bne.n	8013e9a <pow+0x82>
 8013f60:	f001 fc94 	bl	801588c <__errno>
 8013f64:	2321      	movs	r3, #33	; 0x21
 8013f66:	6003      	str	r3, [r0, #0]
 8013f68:	e7c5      	b.n	8013ef6 <pow+0xde>
 8013f6a:	eeb0 0a48 	vmov.f32	s0, s16
 8013f6e:	eef0 0a68 	vmov.f32	s1, s17
 8013f72:	f001 fb6e 	bl	8015652 <finite>
 8013f76:	9000      	str	r0, [sp, #0]
 8013f78:	2800      	cmp	r0, #0
 8013f7a:	f040 8081 	bne.w	8014080 <pow+0x268>
 8013f7e:	ec47 6b10 	vmov	d0, r6, r7
 8013f82:	f001 fb66 	bl	8015652 <finite>
 8013f86:	2800      	cmp	r0, #0
 8013f88:	d07a      	beq.n	8014080 <pow+0x268>
 8013f8a:	ec45 4b10 	vmov	d0, r4, r5
 8013f8e:	f001 fb60 	bl	8015652 <finite>
 8013f92:	2800      	cmp	r0, #0
 8013f94:	d074      	beq.n	8014080 <pow+0x268>
 8013f96:	ec53 2b18 	vmov	r2, r3, d8
 8013f9a:	ee18 0a10 	vmov	r0, s16
 8013f9e:	4619      	mov	r1, r3
 8013fa0:	f7ec fdc4 	bl	8000b2c <__aeabi_dcmpun>
 8013fa4:	f999 9000 	ldrsb.w	r9, [r9]
 8013fa8:	4b4b      	ldr	r3, [pc, #300]	; (80140d8 <pow+0x2c0>)
 8013faa:	b1b0      	cbz	r0, 8013fda <pow+0x1c2>
 8013fac:	2201      	movs	r2, #1
 8013fae:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8013fb2:	9b00      	ldr	r3, [sp, #0]
 8013fb4:	930a      	str	r3, [sp, #40]	; 0x28
 8013fb6:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8013fba:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8013fbe:	f1b9 0f00 	cmp.w	r9, #0
 8013fc2:	d0c4      	beq.n	8013f4e <pow+0x136>
 8013fc4:	4652      	mov	r2, sl
 8013fc6:	465b      	mov	r3, fp
 8013fc8:	4650      	mov	r0, sl
 8013fca:	4659      	mov	r1, fp
 8013fcc:	f7ec fc3e 	bl	800084c <__aeabi_ddiv>
 8013fd0:	f1b9 0f02 	cmp.w	r9, #2
 8013fd4:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8013fd8:	e7c1      	b.n	8013f5e <pow+0x146>
 8013fda:	2203      	movs	r2, #3
 8013fdc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8013fe0:	900a      	str	r0, [sp, #40]	; 0x28
 8013fe2:	4629      	mov	r1, r5
 8013fe4:	4620      	mov	r0, r4
 8013fe6:	2200      	movs	r2, #0
 8013fe8:	4b3e      	ldr	r3, [pc, #248]	; (80140e4 <pow+0x2cc>)
 8013fea:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8013fee:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8013ff2:	f7ec fb01 	bl	80005f8 <__aeabi_dmul>
 8013ff6:	4604      	mov	r4, r0
 8013ff8:	460d      	mov	r5, r1
 8013ffa:	f1b9 0f00 	cmp.w	r9, #0
 8013ffe:	d124      	bne.n	801404a <pow+0x232>
 8014000:	4b39      	ldr	r3, [pc, #228]	; (80140e8 <pow+0x2d0>)
 8014002:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8014006:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801400a:	4630      	mov	r0, r6
 801400c:	4652      	mov	r2, sl
 801400e:	465b      	mov	r3, fp
 8014010:	4639      	mov	r1, r7
 8014012:	f7ec fd63 	bl	8000adc <__aeabi_dcmplt>
 8014016:	2800      	cmp	r0, #0
 8014018:	d056      	beq.n	80140c8 <pow+0x2b0>
 801401a:	ec45 4b10 	vmov	d0, r4, r5
 801401e:	f001 fb2b 	bl	8015678 <rint>
 8014022:	4622      	mov	r2, r4
 8014024:	462b      	mov	r3, r5
 8014026:	ec51 0b10 	vmov	r0, r1, d0
 801402a:	f7ec fd4d 	bl	8000ac8 <__aeabi_dcmpeq>
 801402e:	b920      	cbnz	r0, 801403a <pow+0x222>
 8014030:	4b2e      	ldr	r3, [pc, #184]	; (80140ec <pow+0x2d4>)
 8014032:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8014036:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801403a:	f998 3000 	ldrsb.w	r3, [r8]
 801403e:	2b02      	cmp	r3, #2
 8014040:	d142      	bne.n	80140c8 <pow+0x2b0>
 8014042:	f001 fc23 	bl	801588c <__errno>
 8014046:	2322      	movs	r3, #34	; 0x22
 8014048:	e78d      	b.n	8013f66 <pow+0x14e>
 801404a:	4b29      	ldr	r3, [pc, #164]	; (80140f0 <pow+0x2d8>)
 801404c:	2200      	movs	r2, #0
 801404e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8014052:	4630      	mov	r0, r6
 8014054:	4652      	mov	r2, sl
 8014056:	465b      	mov	r3, fp
 8014058:	4639      	mov	r1, r7
 801405a:	f7ec fd3f 	bl	8000adc <__aeabi_dcmplt>
 801405e:	2800      	cmp	r0, #0
 8014060:	d0eb      	beq.n	801403a <pow+0x222>
 8014062:	ec45 4b10 	vmov	d0, r4, r5
 8014066:	f001 fb07 	bl	8015678 <rint>
 801406a:	4622      	mov	r2, r4
 801406c:	462b      	mov	r3, r5
 801406e:	ec51 0b10 	vmov	r0, r1, d0
 8014072:	f7ec fd29 	bl	8000ac8 <__aeabi_dcmpeq>
 8014076:	2800      	cmp	r0, #0
 8014078:	d1df      	bne.n	801403a <pow+0x222>
 801407a:	2200      	movs	r2, #0
 801407c:	4b18      	ldr	r3, [pc, #96]	; (80140e0 <pow+0x2c8>)
 801407e:	e7da      	b.n	8014036 <pow+0x21e>
 8014080:	2200      	movs	r2, #0
 8014082:	2300      	movs	r3, #0
 8014084:	ec51 0b18 	vmov	r0, r1, d8
 8014088:	f7ec fd1e 	bl	8000ac8 <__aeabi_dcmpeq>
 801408c:	2800      	cmp	r0, #0
 801408e:	f43f af3a 	beq.w	8013f06 <pow+0xee>
 8014092:	ec47 6b10 	vmov	d0, r6, r7
 8014096:	f001 fadc 	bl	8015652 <finite>
 801409a:	2800      	cmp	r0, #0
 801409c:	f43f af33 	beq.w	8013f06 <pow+0xee>
 80140a0:	ec45 4b10 	vmov	d0, r4, r5
 80140a4:	f001 fad5 	bl	8015652 <finite>
 80140a8:	2800      	cmp	r0, #0
 80140aa:	f43f af2c 	beq.w	8013f06 <pow+0xee>
 80140ae:	2304      	movs	r3, #4
 80140b0:	9302      	str	r3, [sp, #8]
 80140b2:	4b09      	ldr	r3, [pc, #36]	; (80140d8 <pow+0x2c0>)
 80140b4:	9303      	str	r3, [sp, #12]
 80140b6:	2300      	movs	r3, #0
 80140b8:	930a      	str	r3, [sp, #40]	; 0x28
 80140ba:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80140be:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80140c2:	ed8d 9b08 	vstr	d9, [sp, #32]
 80140c6:	e7b8      	b.n	801403a <pow+0x222>
 80140c8:	a802      	add	r0, sp, #8
 80140ca:	f001 faca 	bl	8015662 <matherr>
 80140ce:	2800      	cmp	r0, #0
 80140d0:	f47f af11 	bne.w	8013ef6 <pow+0xde>
 80140d4:	e7b5      	b.n	8014042 <pow+0x22a>
 80140d6:	bf00      	nop
 80140d8:	08015fc3 	.word	0x08015fc3
 80140dc:	3ff00000 	.word	0x3ff00000
 80140e0:	fff00000 	.word	0xfff00000
 80140e4:	3fe00000 	.word	0x3fe00000
 80140e8:	47efffff 	.word	0x47efffff
 80140ec:	c7efffff 	.word	0xc7efffff
 80140f0:	7ff00000 	.word	0x7ff00000
 80140f4:	20000350 	.word	0x20000350

080140f8 <sqrtf>:
 80140f8:	b510      	push	{r4, lr}
 80140fa:	ed2d 8b02 	vpush	{d8}
 80140fe:	b08a      	sub	sp, #40	; 0x28
 8014100:	eeb0 8a40 	vmov.f32	s16, s0
 8014104:	f001 f8f6 	bl	80152f4 <__ieee754_sqrtf>
 8014108:	4b21      	ldr	r3, [pc, #132]	; (8014190 <sqrtf+0x98>)
 801410a:	f993 4000 	ldrsb.w	r4, [r3]
 801410e:	1c63      	adds	r3, r4, #1
 8014110:	d02c      	beq.n	801416c <sqrtf+0x74>
 8014112:	eeb4 8a48 	vcmp.f32	s16, s16
 8014116:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801411a:	d627      	bvs.n	801416c <sqrtf+0x74>
 801411c:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8014120:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014124:	d522      	bpl.n	801416c <sqrtf+0x74>
 8014126:	2301      	movs	r3, #1
 8014128:	9300      	str	r3, [sp, #0]
 801412a:	4b1a      	ldr	r3, [pc, #104]	; (8014194 <sqrtf+0x9c>)
 801412c:	9301      	str	r3, [sp, #4]
 801412e:	ee18 0a10 	vmov	r0, s16
 8014132:	2300      	movs	r3, #0
 8014134:	9308      	str	r3, [sp, #32]
 8014136:	f7ec fa07 	bl	8000548 <__aeabi_f2d>
 801413a:	2200      	movs	r2, #0
 801413c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8014140:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8014144:	2300      	movs	r3, #0
 8014146:	b9ac      	cbnz	r4, 8014174 <sqrtf+0x7c>
 8014148:	e9cd 2306 	strd	r2, r3, [sp, #24]
 801414c:	4668      	mov	r0, sp
 801414e:	f001 fa88 	bl	8015662 <matherr>
 8014152:	b1b8      	cbz	r0, 8014184 <sqrtf+0x8c>
 8014154:	9b08      	ldr	r3, [sp, #32]
 8014156:	b11b      	cbz	r3, 8014160 <sqrtf+0x68>
 8014158:	f001 fb98 	bl	801588c <__errno>
 801415c:	9b08      	ldr	r3, [sp, #32]
 801415e:	6003      	str	r3, [r0, #0]
 8014160:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8014164:	f7ec fd40 	bl	8000be8 <__aeabi_d2f>
 8014168:	ee00 0a10 	vmov	s0, r0
 801416c:	b00a      	add	sp, #40	; 0x28
 801416e:	ecbd 8b02 	vpop	{d8}
 8014172:	bd10      	pop	{r4, pc}
 8014174:	4610      	mov	r0, r2
 8014176:	4619      	mov	r1, r3
 8014178:	f7ec fb68 	bl	800084c <__aeabi_ddiv>
 801417c:	2c02      	cmp	r4, #2
 801417e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8014182:	d1e3      	bne.n	801414c <sqrtf+0x54>
 8014184:	f001 fb82 	bl	801588c <__errno>
 8014188:	2321      	movs	r3, #33	; 0x21
 801418a:	6003      	str	r3, [r0, #0]
 801418c:	e7e2      	b.n	8014154 <sqrtf+0x5c>
 801418e:	bf00      	nop
 8014190:	20000350 	.word	0x20000350
 8014194:	08015fc7 	.word	0x08015fc7

08014198 <__ieee754_asin>:
 8014198:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801419c:	ec55 4b10 	vmov	r4, r5, d0
 80141a0:	4bcb      	ldr	r3, [pc, #812]	; (80144d0 <__ieee754_asin+0x338>)
 80141a2:	b087      	sub	sp, #28
 80141a4:	f025 4700 	bic.w	r7, r5, #2147483648	; 0x80000000
 80141a8:	429f      	cmp	r7, r3
 80141aa:	9501      	str	r5, [sp, #4]
 80141ac:	dd31      	ble.n	8014212 <__ieee754_asin+0x7a>
 80141ae:	f107 4740 	add.w	r7, r7, #3221225472	; 0xc0000000
 80141b2:	ee10 3a10 	vmov	r3, s0
 80141b6:	f507 1780 	add.w	r7, r7, #1048576	; 0x100000
 80141ba:	433b      	orrs	r3, r7
 80141bc:	d117      	bne.n	80141ee <__ieee754_asin+0x56>
 80141be:	a3aa      	add	r3, pc, #680	; (adr r3, 8014468 <__ieee754_asin+0x2d0>)
 80141c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80141c4:	ee10 0a10 	vmov	r0, s0
 80141c8:	4629      	mov	r1, r5
 80141ca:	f7ec fa15 	bl	80005f8 <__aeabi_dmul>
 80141ce:	a3a8      	add	r3, pc, #672	; (adr r3, 8014470 <__ieee754_asin+0x2d8>)
 80141d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80141d4:	4606      	mov	r6, r0
 80141d6:	460f      	mov	r7, r1
 80141d8:	4620      	mov	r0, r4
 80141da:	4629      	mov	r1, r5
 80141dc:	f7ec fa0c 	bl	80005f8 <__aeabi_dmul>
 80141e0:	4602      	mov	r2, r0
 80141e2:	460b      	mov	r3, r1
 80141e4:	4630      	mov	r0, r6
 80141e6:	4639      	mov	r1, r7
 80141e8:	f7ec f850 	bl	800028c <__adddf3>
 80141ec:	e00a      	b.n	8014204 <__ieee754_asin+0x6c>
 80141ee:	ee10 2a10 	vmov	r2, s0
 80141f2:	462b      	mov	r3, r5
 80141f4:	4620      	mov	r0, r4
 80141f6:	4629      	mov	r1, r5
 80141f8:	f7ec f846 	bl	8000288 <__aeabi_dsub>
 80141fc:	4602      	mov	r2, r0
 80141fe:	460b      	mov	r3, r1
 8014200:	f7ec fb24 	bl	800084c <__aeabi_ddiv>
 8014204:	4604      	mov	r4, r0
 8014206:	460d      	mov	r5, r1
 8014208:	ec45 4b10 	vmov	d0, r4, r5
 801420c:	b007      	add	sp, #28
 801420e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014212:	4bb0      	ldr	r3, [pc, #704]	; (80144d4 <__ieee754_asin+0x33c>)
 8014214:	429f      	cmp	r7, r3
 8014216:	dc11      	bgt.n	801423c <__ieee754_asin+0xa4>
 8014218:	f1b7 5f79 	cmp.w	r7, #1044381696	; 0x3e400000
 801421c:	f280 80ae 	bge.w	801437c <__ieee754_asin+0x1e4>
 8014220:	a395      	add	r3, pc, #596	; (adr r3, 8014478 <__ieee754_asin+0x2e0>)
 8014222:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014226:	ee10 0a10 	vmov	r0, s0
 801422a:	4629      	mov	r1, r5
 801422c:	f7ec f82e 	bl	800028c <__adddf3>
 8014230:	2200      	movs	r2, #0
 8014232:	4ba9      	ldr	r3, [pc, #676]	; (80144d8 <__ieee754_asin+0x340>)
 8014234:	f7ec fc70 	bl	8000b18 <__aeabi_dcmpgt>
 8014238:	2800      	cmp	r0, #0
 801423a:	d1e5      	bne.n	8014208 <__ieee754_asin+0x70>
 801423c:	ec45 4b10 	vmov	d0, r4, r5
 8014240:	f001 f9fe 	bl	8015640 <fabs>
 8014244:	2000      	movs	r0, #0
 8014246:	ec53 2b10 	vmov	r2, r3, d0
 801424a:	49a3      	ldr	r1, [pc, #652]	; (80144d8 <__ieee754_asin+0x340>)
 801424c:	f7ec f81c 	bl	8000288 <__aeabi_dsub>
 8014250:	2200      	movs	r2, #0
 8014252:	4ba2      	ldr	r3, [pc, #648]	; (80144dc <__ieee754_asin+0x344>)
 8014254:	f7ec f9d0 	bl	80005f8 <__aeabi_dmul>
 8014258:	a389      	add	r3, pc, #548	; (adr r3, 8014480 <__ieee754_asin+0x2e8>)
 801425a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801425e:	4604      	mov	r4, r0
 8014260:	460d      	mov	r5, r1
 8014262:	f7ec f9c9 	bl	80005f8 <__aeabi_dmul>
 8014266:	a388      	add	r3, pc, #544	; (adr r3, 8014488 <__ieee754_asin+0x2f0>)
 8014268:	e9d3 2300 	ldrd	r2, r3, [r3]
 801426c:	f7ec f80e 	bl	800028c <__adddf3>
 8014270:	4622      	mov	r2, r4
 8014272:	462b      	mov	r3, r5
 8014274:	f7ec f9c0 	bl	80005f8 <__aeabi_dmul>
 8014278:	a385      	add	r3, pc, #532	; (adr r3, 8014490 <__ieee754_asin+0x2f8>)
 801427a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801427e:	f7ec f803 	bl	8000288 <__aeabi_dsub>
 8014282:	4622      	mov	r2, r4
 8014284:	462b      	mov	r3, r5
 8014286:	f7ec f9b7 	bl	80005f8 <__aeabi_dmul>
 801428a:	a383      	add	r3, pc, #524	; (adr r3, 8014498 <__ieee754_asin+0x300>)
 801428c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014290:	f7eb fffc 	bl	800028c <__adddf3>
 8014294:	4622      	mov	r2, r4
 8014296:	462b      	mov	r3, r5
 8014298:	f7ec f9ae 	bl	80005f8 <__aeabi_dmul>
 801429c:	a380      	add	r3, pc, #512	; (adr r3, 80144a0 <__ieee754_asin+0x308>)
 801429e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80142a2:	f7eb fff1 	bl	8000288 <__aeabi_dsub>
 80142a6:	4622      	mov	r2, r4
 80142a8:	462b      	mov	r3, r5
 80142aa:	f7ec f9a5 	bl	80005f8 <__aeabi_dmul>
 80142ae:	a37e      	add	r3, pc, #504	; (adr r3, 80144a8 <__ieee754_asin+0x310>)
 80142b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80142b4:	f7eb ffea 	bl	800028c <__adddf3>
 80142b8:	4622      	mov	r2, r4
 80142ba:	462b      	mov	r3, r5
 80142bc:	f7ec f99c 	bl	80005f8 <__aeabi_dmul>
 80142c0:	a37b      	add	r3, pc, #492	; (adr r3, 80144b0 <__ieee754_asin+0x318>)
 80142c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80142c6:	4680      	mov	r8, r0
 80142c8:	4689      	mov	r9, r1
 80142ca:	4620      	mov	r0, r4
 80142cc:	4629      	mov	r1, r5
 80142ce:	f7ec f993 	bl	80005f8 <__aeabi_dmul>
 80142d2:	a379      	add	r3, pc, #484	; (adr r3, 80144b8 <__ieee754_asin+0x320>)
 80142d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80142d8:	f7eb ffd6 	bl	8000288 <__aeabi_dsub>
 80142dc:	4622      	mov	r2, r4
 80142de:	462b      	mov	r3, r5
 80142e0:	f7ec f98a 	bl	80005f8 <__aeabi_dmul>
 80142e4:	a376      	add	r3, pc, #472	; (adr r3, 80144c0 <__ieee754_asin+0x328>)
 80142e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80142ea:	f7eb ffcf 	bl	800028c <__adddf3>
 80142ee:	4622      	mov	r2, r4
 80142f0:	462b      	mov	r3, r5
 80142f2:	f7ec f981 	bl	80005f8 <__aeabi_dmul>
 80142f6:	a374      	add	r3, pc, #464	; (adr r3, 80144c8 <__ieee754_asin+0x330>)
 80142f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80142fc:	f7eb ffc4 	bl	8000288 <__aeabi_dsub>
 8014300:	4622      	mov	r2, r4
 8014302:	462b      	mov	r3, r5
 8014304:	f7ec f978 	bl	80005f8 <__aeabi_dmul>
 8014308:	4b73      	ldr	r3, [pc, #460]	; (80144d8 <__ieee754_asin+0x340>)
 801430a:	2200      	movs	r2, #0
 801430c:	f7eb ffbe 	bl	800028c <__adddf3>
 8014310:	ec45 4b10 	vmov	d0, r4, r5
 8014314:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8014318:	f000 ff3c 	bl	8015194 <__ieee754_sqrt>
 801431c:	4b70      	ldr	r3, [pc, #448]	; (80144e0 <__ieee754_asin+0x348>)
 801431e:	429f      	cmp	r7, r3
 8014320:	ec5b ab10 	vmov	sl, fp, d0
 8014324:	f340 80de 	ble.w	80144e4 <__ieee754_asin+0x34c>
 8014328:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801432c:	4640      	mov	r0, r8
 801432e:	4649      	mov	r1, r9
 8014330:	f7ec fa8c 	bl	800084c <__aeabi_ddiv>
 8014334:	4652      	mov	r2, sl
 8014336:	465b      	mov	r3, fp
 8014338:	f7ec f95e 	bl	80005f8 <__aeabi_dmul>
 801433c:	4652      	mov	r2, sl
 801433e:	465b      	mov	r3, fp
 8014340:	f7eb ffa4 	bl	800028c <__adddf3>
 8014344:	4602      	mov	r2, r0
 8014346:	460b      	mov	r3, r1
 8014348:	f7eb ffa0 	bl	800028c <__adddf3>
 801434c:	a348      	add	r3, pc, #288	; (adr r3, 8014470 <__ieee754_asin+0x2d8>)
 801434e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014352:	f7eb ff99 	bl	8000288 <__aeabi_dsub>
 8014356:	4602      	mov	r2, r0
 8014358:	460b      	mov	r3, r1
 801435a:	a143      	add	r1, pc, #268	; (adr r1, 8014468 <__ieee754_asin+0x2d0>)
 801435c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8014360:	f7eb ff92 	bl	8000288 <__aeabi_dsub>
 8014364:	9b01      	ldr	r3, [sp, #4]
 8014366:	2b00      	cmp	r3, #0
 8014368:	bfdc      	itt	le
 801436a:	4602      	movle	r2, r0
 801436c:	f101 4300 	addle.w	r3, r1, #2147483648	; 0x80000000
 8014370:	4604      	mov	r4, r0
 8014372:	460d      	mov	r5, r1
 8014374:	bfdc      	itt	le
 8014376:	4614      	movle	r4, r2
 8014378:	461d      	movle	r5, r3
 801437a:	e745      	b.n	8014208 <__ieee754_asin+0x70>
 801437c:	ee10 2a10 	vmov	r2, s0
 8014380:	ee10 0a10 	vmov	r0, s0
 8014384:	462b      	mov	r3, r5
 8014386:	4629      	mov	r1, r5
 8014388:	f7ec f936 	bl	80005f8 <__aeabi_dmul>
 801438c:	a33c      	add	r3, pc, #240	; (adr r3, 8014480 <__ieee754_asin+0x2e8>)
 801438e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014392:	4606      	mov	r6, r0
 8014394:	460f      	mov	r7, r1
 8014396:	f7ec f92f 	bl	80005f8 <__aeabi_dmul>
 801439a:	a33b      	add	r3, pc, #236	; (adr r3, 8014488 <__ieee754_asin+0x2f0>)
 801439c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80143a0:	f7eb ff74 	bl	800028c <__adddf3>
 80143a4:	4632      	mov	r2, r6
 80143a6:	463b      	mov	r3, r7
 80143a8:	f7ec f926 	bl	80005f8 <__aeabi_dmul>
 80143ac:	a338      	add	r3, pc, #224	; (adr r3, 8014490 <__ieee754_asin+0x2f8>)
 80143ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80143b2:	f7eb ff69 	bl	8000288 <__aeabi_dsub>
 80143b6:	4632      	mov	r2, r6
 80143b8:	463b      	mov	r3, r7
 80143ba:	f7ec f91d 	bl	80005f8 <__aeabi_dmul>
 80143be:	a336      	add	r3, pc, #216	; (adr r3, 8014498 <__ieee754_asin+0x300>)
 80143c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80143c4:	f7eb ff62 	bl	800028c <__adddf3>
 80143c8:	4632      	mov	r2, r6
 80143ca:	463b      	mov	r3, r7
 80143cc:	f7ec f914 	bl	80005f8 <__aeabi_dmul>
 80143d0:	a333      	add	r3, pc, #204	; (adr r3, 80144a0 <__ieee754_asin+0x308>)
 80143d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80143d6:	f7eb ff57 	bl	8000288 <__aeabi_dsub>
 80143da:	4632      	mov	r2, r6
 80143dc:	463b      	mov	r3, r7
 80143de:	f7ec f90b 	bl	80005f8 <__aeabi_dmul>
 80143e2:	a331      	add	r3, pc, #196	; (adr r3, 80144a8 <__ieee754_asin+0x310>)
 80143e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80143e8:	f7eb ff50 	bl	800028c <__adddf3>
 80143ec:	4632      	mov	r2, r6
 80143ee:	463b      	mov	r3, r7
 80143f0:	f7ec f902 	bl	80005f8 <__aeabi_dmul>
 80143f4:	a32e      	add	r3, pc, #184	; (adr r3, 80144b0 <__ieee754_asin+0x318>)
 80143f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80143fa:	4680      	mov	r8, r0
 80143fc:	4689      	mov	r9, r1
 80143fe:	4630      	mov	r0, r6
 8014400:	4639      	mov	r1, r7
 8014402:	f7ec f8f9 	bl	80005f8 <__aeabi_dmul>
 8014406:	a32c      	add	r3, pc, #176	; (adr r3, 80144b8 <__ieee754_asin+0x320>)
 8014408:	e9d3 2300 	ldrd	r2, r3, [r3]
 801440c:	f7eb ff3c 	bl	8000288 <__aeabi_dsub>
 8014410:	4632      	mov	r2, r6
 8014412:	463b      	mov	r3, r7
 8014414:	f7ec f8f0 	bl	80005f8 <__aeabi_dmul>
 8014418:	a329      	add	r3, pc, #164	; (adr r3, 80144c0 <__ieee754_asin+0x328>)
 801441a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801441e:	f7eb ff35 	bl	800028c <__adddf3>
 8014422:	4632      	mov	r2, r6
 8014424:	463b      	mov	r3, r7
 8014426:	f7ec f8e7 	bl	80005f8 <__aeabi_dmul>
 801442a:	a327      	add	r3, pc, #156	; (adr r3, 80144c8 <__ieee754_asin+0x330>)
 801442c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014430:	f7eb ff2a 	bl	8000288 <__aeabi_dsub>
 8014434:	4632      	mov	r2, r6
 8014436:	463b      	mov	r3, r7
 8014438:	f7ec f8de 	bl	80005f8 <__aeabi_dmul>
 801443c:	2200      	movs	r2, #0
 801443e:	4b26      	ldr	r3, [pc, #152]	; (80144d8 <__ieee754_asin+0x340>)
 8014440:	f7eb ff24 	bl	800028c <__adddf3>
 8014444:	4602      	mov	r2, r0
 8014446:	460b      	mov	r3, r1
 8014448:	4640      	mov	r0, r8
 801444a:	4649      	mov	r1, r9
 801444c:	f7ec f9fe 	bl	800084c <__aeabi_ddiv>
 8014450:	4622      	mov	r2, r4
 8014452:	462b      	mov	r3, r5
 8014454:	f7ec f8d0 	bl	80005f8 <__aeabi_dmul>
 8014458:	4602      	mov	r2, r0
 801445a:	460b      	mov	r3, r1
 801445c:	4620      	mov	r0, r4
 801445e:	4629      	mov	r1, r5
 8014460:	e6c2      	b.n	80141e8 <__ieee754_asin+0x50>
 8014462:	bf00      	nop
 8014464:	f3af 8000 	nop.w
 8014468:	54442d18 	.word	0x54442d18
 801446c:	3ff921fb 	.word	0x3ff921fb
 8014470:	33145c07 	.word	0x33145c07
 8014474:	3c91a626 	.word	0x3c91a626
 8014478:	8800759c 	.word	0x8800759c
 801447c:	7e37e43c 	.word	0x7e37e43c
 8014480:	0dfdf709 	.word	0x0dfdf709
 8014484:	3f023de1 	.word	0x3f023de1
 8014488:	7501b288 	.word	0x7501b288
 801448c:	3f49efe0 	.word	0x3f49efe0
 8014490:	b5688f3b 	.word	0xb5688f3b
 8014494:	3fa48228 	.word	0x3fa48228
 8014498:	0e884455 	.word	0x0e884455
 801449c:	3fc9c155 	.word	0x3fc9c155
 80144a0:	03eb6f7d 	.word	0x03eb6f7d
 80144a4:	3fd4d612 	.word	0x3fd4d612
 80144a8:	55555555 	.word	0x55555555
 80144ac:	3fc55555 	.word	0x3fc55555
 80144b0:	b12e9282 	.word	0xb12e9282
 80144b4:	3fb3b8c5 	.word	0x3fb3b8c5
 80144b8:	1b8d0159 	.word	0x1b8d0159
 80144bc:	3fe6066c 	.word	0x3fe6066c
 80144c0:	9c598ac8 	.word	0x9c598ac8
 80144c4:	40002ae5 	.word	0x40002ae5
 80144c8:	1c8a2d4b 	.word	0x1c8a2d4b
 80144cc:	40033a27 	.word	0x40033a27
 80144d0:	3fefffff 	.word	0x3fefffff
 80144d4:	3fdfffff 	.word	0x3fdfffff
 80144d8:	3ff00000 	.word	0x3ff00000
 80144dc:	3fe00000 	.word	0x3fe00000
 80144e0:	3fef3332 	.word	0x3fef3332
 80144e4:	ee10 2a10 	vmov	r2, s0
 80144e8:	ee10 0a10 	vmov	r0, s0
 80144ec:	465b      	mov	r3, fp
 80144ee:	4659      	mov	r1, fp
 80144f0:	f7eb fecc 	bl	800028c <__adddf3>
 80144f4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80144f8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80144fc:	4640      	mov	r0, r8
 80144fe:	4649      	mov	r1, r9
 8014500:	f7ec f9a4 	bl	800084c <__aeabi_ddiv>
 8014504:	4602      	mov	r2, r0
 8014506:	460b      	mov	r3, r1
 8014508:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801450c:	f7ec f874 	bl	80005f8 <__aeabi_dmul>
 8014510:	2600      	movs	r6, #0
 8014512:	4680      	mov	r8, r0
 8014514:	4689      	mov	r9, r1
 8014516:	4632      	mov	r2, r6
 8014518:	465b      	mov	r3, fp
 801451a:	4630      	mov	r0, r6
 801451c:	4659      	mov	r1, fp
 801451e:	f7ec f86b 	bl	80005f8 <__aeabi_dmul>
 8014522:	4602      	mov	r2, r0
 8014524:	460b      	mov	r3, r1
 8014526:	4620      	mov	r0, r4
 8014528:	4629      	mov	r1, r5
 801452a:	f7eb fead 	bl	8000288 <__aeabi_dsub>
 801452e:	4632      	mov	r2, r6
 8014530:	4604      	mov	r4, r0
 8014532:	460d      	mov	r5, r1
 8014534:	465b      	mov	r3, fp
 8014536:	4650      	mov	r0, sl
 8014538:	4659      	mov	r1, fp
 801453a:	f7eb fea7 	bl	800028c <__adddf3>
 801453e:	4602      	mov	r2, r0
 8014540:	460b      	mov	r3, r1
 8014542:	4620      	mov	r0, r4
 8014544:	4629      	mov	r1, r5
 8014546:	f7ec f981 	bl	800084c <__aeabi_ddiv>
 801454a:	4602      	mov	r2, r0
 801454c:	460b      	mov	r3, r1
 801454e:	f7eb fe9d 	bl	800028c <__adddf3>
 8014552:	4602      	mov	r2, r0
 8014554:	460b      	mov	r3, r1
 8014556:	a114      	add	r1, pc, #80	; (adr r1, 80145a8 <__ieee754_asin+0x410>)
 8014558:	e9d1 0100 	ldrd	r0, r1, [r1]
 801455c:	f7eb fe94 	bl	8000288 <__aeabi_dsub>
 8014560:	4602      	mov	r2, r0
 8014562:	460b      	mov	r3, r1
 8014564:	4640      	mov	r0, r8
 8014566:	4649      	mov	r1, r9
 8014568:	f7eb fe8e 	bl	8000288 <__aeabi_dsub>
 801456c:	465f      	mov	r7, fp
 801456e:	4604      	mov	r4, r0
 8014570:	460d      	mov	r5, r1
 8014572:	4632      	mov	r2, r6
 8014574:	465b      	mov	r3, fp
 8014576:	4630      	mov	r0, r6
 8014578:	4639      	mov	r1, r7
 801457a:	f7eb fe87 	bl	800028c <__adddf3>
 801457e:	4602      	mov	r2, r0
 8014580:	460b      	mov	r3, r1
 8014582:	a10b      	add	r1, pc, #44	; (adr r1, 80145b0 <__ieee754_asin+0x418>)
 8014584:	e9d1 0100 	ldrd	r0, r1, [r1]
 8014588:	f7eb fe7e 	bl	8000288 <__aeabi_dsub>
 801458c:	4602      	mov	r2, r0
 801458e:	460b      	mov	r3, r1
 8014590:	4620      	mov	r0, r4
 8014592:	4629      	mov	r1, r5
 8014594:	f7eb fe78 	bl	8000288 <__aeabi_dsub>
 8014598:	4602      	mov	r2, r0
 801459a:	460b      	mov	r3, r1
 801459c:	a104      	add	r1, pc, #16	; (adr r1, 80145b0 <__ieee754_asin+0x418>)
 801459e:	e9d1 0100 	ldrd	r0, r1, [r1]
 80145a2:	e6dd      	b.n	8014360 <__ieee754_asin+0x1c8>
 80145a4:	f3af 8000 	nop.w
 80145a8:	33145c07 	.word	0x33145c07
 80145ac:	3c91a626 	.word	0x3c91a626
 80145b0:	54442d18 	.word	0x54442d18
 80145b4:	3fe921fb 	.word	0x3fe921fb

080145b8 <__ieee754_atan2>:
 80145b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80145bc:	ec57 6b11 	vmov	r6, r7, d1
 80145c0:	4273      	negs	r3, r6
 80145c2:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 80145c6:	4333      	orrs	r3, r6
 80145c8:	f8df e1a4 	ldr.w	lr, [pc, #420]	; 8014770 <__ieee754_atan2+0x1b8>
 80145cc:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 80145d0:	4573      	cmp	r3, lr
 80145d2:	ec51 0b10 	vmov	r0, r1, d0
 80145d6:	ee11 8a10 	vmov	r8, s2
 80145da:	d80a      	bhi.n	80145f2 <__ieee754_atan2+0x3a>
 80145dc:	4244      	negs	r4, r0
 80145de:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80145e2:	4304      	orrs	r4, r0
 80145e4:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 80145e8:	4574      	cmp	r4, lr
 80145ea:	468c      	mov	ip, r1
 80145ec:	ee10 9a10 	vmov	r9, s0
 80145f0:	d907      	bls.n	8014602 <__ieee754_atan2+0x4a>
 80145f2:	4632      	mov	r2, r6
 80145f4:	463b      	mov	r3, r7
 80145f6:	f7eb fe49 	bl	800028c <__adddf3>
 80145fa:	ec41 0b10 	vmov	d0, r0, r1
 80145fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014602:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 8014606:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 801460a:	4334      	orrs	r4, r6
 801460c:	d103      	bne.n	8014616 <__ieee754_atan2+0x5e>
 801460e:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014612:	f000 be75 	b.w	8015300 <atan>
 8014616:	17bc      	asrs	r4, r7, #30
 8014618:	f004 0402 	and.w	r4, r4, #2
 801461c:	ea53 0909 	orrs.w	r9, r3, r9
 8014620:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 8014624:	d107      	bne.n	8014636 <__ieee754_atan2+0x7e>
 8014626:	2c02      	cmp	r4, #2
 8014628:	d073      	beq.n	8014712 <__ieee754_atan2+0x15a>
 801462a:	2c03      	cmp	r4, #3
 801462c:	d1e5      	bne.n	80145fa <__ieee754_atan2+0x42>
 801462e:	a13e      	add	r1, pc, #248	; (adr r1, 8014728 <__ieee754_atan2+0x170>)
 8014630:	e9d1 0100 	ldrd	r0, r1, [r1]
 8014634:	e7e1      	b.n	80145fa <__ieee754_atan2+0x42>
 8014636:	ea52 0808 	orrs.w	r8, r2, r8
 801463a:	d106      	bne.n	801464a <__ieee754_atan2+0x92>
 801463c:	f1bc 0f00 	cmp.w	ip, #0
 8014640:	da6b      	bge.n	801471a <__ieee754_atan2+0x162>
 8014642:	a13b      	add	r1, pc, #236	; (adr r1, 8014730 <__ieee754_atan2+0x178>)
 8014644:	e9d1 0100 	ldrd	r0, r1, [r1]
 8014648:	e7d7      	b.n	80145fa <__ieee754_atan2+0x42>
 801464a:	4572      	cmp	r2, lr
 801464c:	d120      	bne.n	8014690 <__ieee754_atan2+0xd8>
 801464e:	4293      	cmp	r3, r2
 8014650:	d111      	bne.n	8014676 <__ieee754_atan2+0xbe>
 8014652:	2c02      	cmp	r4, #2
 8014654:	d007      	beq.n	8014666 <__ieee754_atan2+0xae>
 8014656:	2c03      	cmp	r4, #3
 8014658:	d009      	beq.n	801466e <__ieee754_atan2+0xb6>
 801465a:	2c01      	cmp	r4, #1
 801465c:	d155      	bne.n	801470a <__ieee754_atan2+0x152>
 801465e:	a136      	add	r1, pc, #216	; (adr r1, 8014738 <__ieee754_atan2+0x180>)
 8014660:	e9d1 0100 	ldrd	r0, r1, [r1]
 8014664:	e7c9      	b.n	80145fa <__ieee754_atan2+0x42>
 8014666:	a136      	add	r1, pc, #216	; (adr r1, 8014740 <__ieee754_atan2+0x188>)
 8014668:	e9d1 0100 	ldrd	r0, r1, [r1]
 801466c:	e7c5      	b.n	80145fa <__ieee754_atan2+0x42>
 801466e:	a136      	add	r1, pc, #216	; (adr r1, 8014748 <__ieee754_atan2+0x190>)
 8014670:	e9d1 0100 	ldrd	r0, r1, [r1]
 8014674:	e7c1      	b.n	80145fa <__ieee754_atan2+0x42>
 8014676:	2c02      	cmp	r4, #2
 8014678:	d04b      	beq.n	8014712 <__ieee754_atan2+0x15a>
 801467a:	2c03      	cmp	r4, #3
 801467c:	d0d7      	beq.n	801462e <__ieee754_atan2+0x76>
 801467e:	2c01      	cmp	r4, #1
 8014680:	f04f 0000 	mov.w	r0, #0
 8014684:	d102      	bne.n	801468c <__ieee754_atan2+0xd4>
 8014686:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 801468a:	e7b6      	b.n	80145fa <__ieee754_atan2+0x42>
 801468c:	2100      	movs	r1, #0
 801468e:	e7b4      	b.n	80145fa <__ieee754_atan2+0x42>
 8014690:	4573      	cmp	r3, lr
 8014692:	d0d3      	beq.n	801463c <__ieee754_atan2+0x84>
 8014694:	1a9b      	subs	r3, r3, r2
 8014696:	151b      	asrs	r3, r3, #20
 8014698:	2b3c      	cmp	r3, #60	; 0x3c
 801469a:	dc1e      	bgt.n	80146da <__ieee754_atan2+0x122>
 801469c:	2f00      	cmp	r7, #0
 801469e:	da01      	bge.n	80146a4 <__ieee754_atan2+0xec>
 80146a0:	333c      	adds	r3, #60	; 0x3c
 80146a2:	db1e      	blt.n	80146e2 <__ieee754_atan2+0x12a>
 80146a4:	4632      	mov	r2, r6
 80146a6:	463b      	mov	r3, r7
 80146a8:	f7ec f8d0 	bl	800084c <__aeabi_ddiv>
 80146ac:	ec41 0b10 	vmov	d0, r0, r1
 80146b0:	f000 ffc6 	bl	8015640 <fabs>
 80146b4:	f000 fe24 	bl	8015300 <atan>
 80146b8:	ec51 0b10 	vmov	r0, r1, d0
 80146bc:	2c01      	cmp	r4, #1
 80146be:	d013      	beq.n	80146e8 <__ieee754_atan2+0x130>
 80146c0:	2c02      	cmp	r4, #2
 80146c2:	d015      	beq.n	80146f0 <__ieee754_atan2+0x138>
 80146c4:	2c00      	cmp	r4, #0
 80146c6:	d098      	beq.n	80145fa <__ieee754_atan2+0x42>
 80146c8:	a321      	add	r3, pc, #132	; (adr r3, 8014750 <__ieee754_atan2+0x198>)
 80146ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80146ce:	f7eb fddb 	bl	8000288 <__aeabi_dsub>
 80146d2:	a321      	add	r3, pc, #132	; (adr r3, 8014758 <__ieee754_atan2+0x1a0>)
 80146d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80146d8:	e014      	b.n	8014704 <__ieee754_atan2+0x14c>
 80146da:	a121      	add	r1, pc, #132	; (adr r1, 8014760 <__ieee754_atan2+0x1a8>)
 80146dc:	e9d1 0100 	ldrd	r0, r1, [r1]
 80146e0:	e7ec      	b.n	80146bc <__ieee754_atan2+0x104>
 80146e2:	2000      	movs	r0, #0
 80146e4:	2100      	movs	r1, #0
 80146e6:	e7e9      	b.n	80146bc <__ieee754_atan2+0x104>
 80146e8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80146ec:	4619      	mov	r1, r3
 80146ee:	e784      	b.n	80145fa <__ieee754_atan2+0x42>
 80146f0:	a317      	add	r3, pc, #92	; (adr r3, 8014750 <__ieee754_atan2+0x198>)
 80146f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80146f6:	f7eb fdc7 	bl	8000288 <__aeabi_dsub>
 80146fa:	4602      	mov	r2, r0
 80146fc:	460b      	mov	r3, r1
 80146fe:	a116      	add	r1, pc, #88	; (adr r1, 8014758 <__ieee754_atan2+0x1a0>)
 8014700:	e9d1 0100 	ldrd	r0, r1, [r1]
 8014704:	f7eb fdc0 	bl	8000288 <__aeabi_dsub>
 8014708:	e777      	b.n	80145fa <__ieee754_atan2+0x42>
 801470a:	a117      	add	r1, pc, #92	; (adr r1, 8014768 <__ieee754_atan2+0x1b0>)
 801470c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8014710:	e773      	b.n	80145fa <__ieee754_atan2+0x42>
 8014712:	a111      	add	r1, pc, #68	; (adr r1, 8014758 <__ieee754_atan2+0x1a0>)
 8014714:	e9d1 0100 	ldrd	r0, r1, [r1]
 8014718:	e76f      	b.n	80145fa <__ieee754_atan2+0x42>
 801471a:	a111      	add	r1, pc, #68	; (adr r1, 8014760 <__ieee754_atan2+0x1a8>)
 801471c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8014720:	e76b      	b.n	80145fa <__ieee754_atan2+0x42>
 8014722:	bf00      	nop
 8014724:	f3af 8000 	nop.w
 8014728:	54442d18 	.word	0x54442d18
 801472c:	c00921fb 	.word	0xc00921fb
 8014730:	54442d18 	.word	0x54442d18
 8014734:	bff921fb 	.word	0xbff921fb
 8014738:	54442d18 	.word	0x54442d18
 801473c:	bfe921fb 	.word	0xbfe921fb
 8014740:	7f3321d2 	.word	0x7f3321d2
 8014744:	4002d97c 	.word	0x4002d97c
 8014748:	7f3321d2 	.word	0x7f3321d2
 801474c:	c002d97c 	.word	0xc002d97c
 8014750:	33145c07 	.word	0x33145c07
 8014754:	3ca1a626 	.word	0x3ca1a626
 8014758:	54442d18 	.word	0x54442d18
 801475c:	400921fb 	.word	0x400921fb
 8014760:	54442d18 	.word	0x54442d18
 8014764:	3ff921fb 	.word	0x3ff921fb
 8014768:	54442d18 	.word	0x54442d18
 801476c:	3fe921fb 	.word	0x3fe921fb
 8014770:	7ff00000 	.word	0x7ff00000
 8014774:	00000000 	.word	0x00000000

08014778 <__ieee754_pow>:
 8014778:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801477c:	b091      	sub	sp, #68	; 0x44
 801477e:	ed8d 1b00 	vstr	d1, [sp]
 8014782:	e9dd 2900 	ldrd	r2, r9, [sp]
 8014786:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 801478a:	ea58 0302 	orrs.w	r3, r8, r2
 801478e:	ec57 6b10 	vmov	r6, r7, d0
 8014792:	f000 84be 	beq.w	8015112 <__ieee754_pow+0x99a>
 8014796:	4b7a      	ldr	r3, [pc, #488]	; (8014980 <__ieee754_pow+0x208>)
 8014798:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 801479c:	429c      	cmp	r4, r3
 801479e:	463d      	mov	r5, r7
 80147a0:	ee10 aa10 	vmov	sl, s0
 80147a4:	dc09      	bgt.n	80147ba <__ieee754_pow+0x42>
 80147a6:	d103      	bne.n	80147b0 <__ieee754_pow+0x38>
 80147a8:	b93e      	cbnz	r6, 80147ba <__ieee754_pow+0x42>
 80147aa:	45a0      	cmp	r8, r4
 80147ac:	dc0d      	bgt.n	80147ca <__ieee754_pow+0x52>
 80147ae:	e001      	b.n	80147b4 <__ieee754_pow+0x3c>
 80147b0:	4598      	cmp	r8, r3
 80147b2:	dc02      	bgt.n	80147ba <__ieee754_pow+0x42>
 80147b4:	4598      	cmp	r8, r3
 80147b6:	d10e      	bne.n	80147d6 <__ieee754_pow+0x5e>
 80147b8:	b16a      	cbz	r2, 80147d6 <__ieee754_pow+0x5e>
 80147ba:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 80147be:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80147c2:	ea54 030a 	orrs.w	r3, r4, sl
 80147c6:	f000 84a4 	beq.w	8015112 <__ieee754_pow+0x99a>
 80147ca:	486e      	ldr	r0, [pc, #440]	; (8014984 <__ieee754_pow+0x20c>)
 80147cc:	b011      	add	sp, #68	; 0x44
 80147ce:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80147d2:	f000 bf49 	b.w	8015668 <nan>
 80147d6:	2d00      	cmp	r5, #0
 80147d8:	da53      	bge.n	8014882 <__ieee754_pow+0x10a>
 80147da:	4b6b      	ldr	r3, [pc, #428]	; (8014988 <__ieee754_pow+0x210>)
 80147dc:	4598      	cmp	r8, r3
 80147de:	dc4d      	bgt.n	801487c <__ieee754_pow+0x104>
 80147e0:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 80147e4:	4598      	cmp	r8, r3
 80147e6:	dd4c      	ble.n	8014882 <__ieee754_pow+0x10a>
 80147e8:	ea4f 5328 	mov.w	r3, r8, asr #20
 80147ec:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80147f0:	2b14      	cmp	r3, #20
 80147f2:	dd26      	ble.n	8014842 <__ieee754_pow+0xca>
 80147f4:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 80147f8:	fa22 f103 	lsr.w	r1, r2, r3
 80147fc:	fa01 f303 	lsl.w	r3, r1, r3
 8014800:	4293      	cmp	r3, r2
 8014802:	d13e      	bne.n	8014882 <__ieee754_pow+0x10a>
 8014804:	f001 0101 	and.w	r1, r1, #1
 8014808:	f1c1 0b02 	rsb	fp, r1, #2
 801480c:	2a00      	cmp	r2, #0
 801480e:	d15b      	bne.n	80148c8 <__ieee754_pow+0x150>
 8014810:	4b5b      	ldr	r3, [pc, #364]	; (8014980 <__ieee754_pow+0x208>)
 8014812:	4598      	cmp	r8, r3
 8014814:	d124      	bne.n	8014860 <__ieee754_pow+0xe8>
 8014816:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 801481a:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 801481e:	ea53 030a 	orrs.w	r3, r3, sl
 8014822:	f000 8476 	beq.w	8015112 <__ieee754_pow+0x99a>
 8014826:	4b59      	ldr	r3, [pc, #356]	; (801498c <__ieee754_pow+0x214>)
 8014828:	429c      	cmp	r4, r3
 801482a:	dd2d      	ble.n	8014888 <__ieee754_pow+0x110>
 801482c:	f1b9 0f00 	cmp.w	r9, #0
 8014830:	f280 8473 	bge.w	801511a <__ieee754_pow+0x9a2>
 8014834:	2000      	movs	r0, #0
 8014836:	2100      	movs	r1, #0
 8014838:	ec41 0b10 	vmov	d0, r0, r1
 801483c:	b011      	add	sp, #68	; 0x44
 801483e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014842:	2a00      	cmp	r2, #0
 8014844:	d13e      	bne.n	80148c4 <__ieee754_pow+0x14c>
 8014846:	f1c3 0314 	rsb	r3, r3, #20
 801484a:	fa48 f103 	asr.w	r1, r8, r3
 801484e:	fa01 f303 	lsl.w	r3, r1, r3
 8014852:	4543      	cmp	r3, r8
 8014854:	f040 8469 	bne.w	801512a <__ieee754_pow+0x9b2>
 8014858:	f001 0101 	and.w	r1, r1, #1
 801485c:	f1c1 0b02 	rsb	fp, r1, #2
 8014860:	4b4b      	ldr	r3, [pc, #300]	; (8014990 <__ieee754_pow+0x218>)
 8014862:	4598      	cmp	r8, r3
 8014864:	d118      	bne.n	8014898 <__ieee754_pow+0x120>
 8014866:	f1b9 0f00 	cmp.w	r9, #0
 801486a:	f280 845a 	bge.w	8015122 <__ieee754_pow+0x9aa>
 801486e:	4948      	ldr	r1, [pc, #288]	; (8014990 <__ieee754_pow+0x218>)
 8014870:	4632      	mov	r2, r6
 8014872:	463b      	mov	r3, r7
 8014874:	2000      	movs	r0, #0
 8014876:	f7eb ffe9 	bl	800084c <__aeabi_ddiv>
 801487a:	e7dd      	b.n	8014838 <__ieee754_pow+0xc0>
 801487c:	f04f 0b02 	mov.w	fp, #2
 8014880:	e7c4      	b.n	801480c <__ieee754_pow+0x94>
 8014882:	f04f 0b00 	mov.w	fp, #0
 8014886:	e7c1      	b.n	801480c <__ieee754_pow+0x94>
 8014888:	f1b9 0f00 	cmp.w	r9, #0
 801488c:	dad2      	bge.n	8014834 <__ieee754_pow+0xbc>
 801488e:	e9dd 0300 	ldrd	r0, r3, [sp]
 8014892:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8014896:	e7cf      	b.n	8014838 <__ieee754_pow+0xc0>
 8014898:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 801489c:	d106      	bne.n	80148ac <__ieee754_pow+0x134>
 801489e:	4632      	mov	r2, r6
 80148a0:	463b      	mov	r3, r7
 80148a2:	4610      	mov	r0, r2
 80148a4:	4619      	mov	r1, r3
 80148a6:	f7eb fea7 	bl	80005f8 <__aeabi_dmul>
 80148aa:	e7c5      	b.n	8014838 <__ieee754_pow+0xc0>
 80148ac:	4b39      	ldr	r3, [pc, #228]	; (8014994 <__ieee754_pow+0x21c>)
 80148ae:	4599      	cmp	r9, r3
 80148b0:	d10a      	bne.n	80148c8 <__ieee754_pow+0x150>
 80148b2:	2d00      	cmp	r5, #0
 80148b4:	db08      	blt.n	80148c8 <__ieee754_pow+0x150>
 80148b6:	ec47 6b10 	vmov	d0, r6, r7
 80148ba:	b011      	add	sp, #68	; 0x44
 80148bc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80148c0:	f000 bc68 	b.w	8015194 <__ieee754_sqrt>
 80148c4:	f04f 0b00 	mov.w	fp, #0
 80148c8:	ec47 6b10 	vmov	d0, r6, r7
 80148cc:	f000 feb8 	bl	8015640 <fabs>
 80148d0:	ec51 0b10 	vmov	r0, r1, d0
 80148d4:	f1ba 0f00 	cmp.w	sl, #0
 80148d8:	d127      	bne.n	801492a <__ieee754_pow+0x1b2>
 80148da:	b124      	cbz	r4, 80148e6 <__ieee754_pow+0x16e>
 80148dc:	4b2c      	ldr	r3, [pc, #176]	; (8014990 <__ieee754_pow+0x218>)
 80148de:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 80148e2:	429a      	cmp	r2, r3
 80148e4:	d121      	bne.n	801492a <__ieee754_pow+0x1b2>
 80148e6:	f1b9 0f00 	cmp.w	r9, #0
 80148ea:	da05      	bge.n	80148f8 <__ieee754_pow+0x180>
 80148ec:	4602      	mov	r2, r0
 80148ee:	460b      	mov	r3, r1
 80148f0:	2000      	movs	r0, #0
 80148f2:	4927      	ldr	r1, [pc, #156]	; (8014990 <__ieee754_pow+0x218>)
 80148f4:	f7eb ffaa 	bl	800084c <__aeabi_ddiv>
 80148f8:	2d00      	cmp	r5, #0
 80148fa:	da9d      	bge.n	8014838 <__ieee754_pow+0xc0>
 80148fc:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8014900:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8014904:	ea54 030b 	orrs.w	r3, r4, fp
 8014908:	d108      	bne.n	801491c <__ieee754_pow+0x1a4>
 801490a:	4602      	mov	r2, r0
 801490c:	460b      	mov	r3, r1
 801490e:	4610      	mov	r0, r2
 8014910:	4619      	mov	r1, r3
 8014912:	f7eb fcb9 	bl	8000288 <__aeabi_dsub>
 8014916:	4602      	mov	r2, r0
 8014918:	460b      	mov	r3, r1
 801491a:	e7ac      	b.n	8014876 <__ieee754_pow+0xfe>
 801491c:	f1bb 0f01 	cmp.w	fp, #1
 8014920:	d18a      	bne.n	8014838 <__ieee754_pow+0xc0>
 8014922:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8014926:	4619      	mov	r1, r3
 8014928:	e786      	b.n	8014838 <__ieee754_pow+0xc0>
 801492a:	0fed      	lsrs	r5, r5, #31
 801492c:	1e6b      	subs	r3, r5, #1
 801492e:	930d      	str	r3, [sp, #52]	; 0x34
 8014930:	ea5b 0303 	orrs.w	r3, fp, r3
 8014934:	d102      	bne.n	801493c <__ieee754_pow+0x1c4>
 8014936:	4632      	mov	r2, r6
 8014938:	463b      	mov	r3, r7
 801493a:	e7e8      	b.n	801490e <__ieee754_pow+0x196>
 801493c:	4b16      	ldr	r3, [pc, #88]	; (8014998 <__ieee754_pow+0x220>)
 801493e:	4598      	cmp	r8, r3
 8014940:	f340 80fe 	ble.w	8014b40 <__ieee754_pow+0x3c8>
 8014944:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8014948:	4598      	cmp	r8, r3
 801494a:	dd0a      	ble.n	8014962 <__ieee754_pow+0x1ea>
 801494c:	4b0f      	ldr	r3, [pc, #60]	; (801498c <__ieee754_pow+0x214>)
 801494e:	429c      	cmp	r4, r3
 8014950:	dc0d      	bgt.n	801496e <__ieee754_pow+0x1f6>
 8014952:	f1b9 0f00 	cmp.w	r9, #0
 8014956:	f6bf af6d 	bge.w	8014834 <__ieee754_pow+0xbc>
 801495a:	a307      	add	r3, pc, #28	; (adr r3, 8014978 <__ieee754_pow+0x200>)
 801495c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014960:	e79f      	b.n	80148a2 <__ieee754_pow+0x12a>
 8014962:	4b0e      	ldr	r3, [pc, #56]	; (801499c <__ieee754_pow+0x224>)
 8014964:	429c      	cmp	r4, r3
 8014966:	ddf4      	ble.n	8014952 <__ieee754_pow+0x1da>
 8014968:	4b09      	ldr	r3, [pc, #36]	; (8014990 <__ieee754_pow+0x218>)
 801496a:	429c      	cmp	r4, r3
 801496c:	dd18      	ble.n	80149a0 <__ieee754_pow+0x228>
 801496e:	f1b9 0f00 	cmp.w	r9, #0
 8014972:	dcf2      	bgt.n	801495a <__ieee754_pow+0x1e2>
 8014974:	e75e      	b.n	8014834 <__ieee754_pow+0xbc>
 8014976:	bf00      	nop
 8014978:	8800759c 	.word	0x8800759c
 801497c:	7e37e43c 	.word	0x7e37e43c
 8014980:	7ff00000 	.word	0x7ff00000
 8014984:	08015eb1 	.word	0x08015eb1
 8014988:	433fffff 	.word	0x433fffff
 801498c:	3fefffff 	.word	0x3fefffff
 8014990:	3ff00000 	.word	0x3ff00000
 8014994:	3fe00000 	.word	0x3fe00000
 8014998:	41e00000 	.word	0x41e00000
 801499c:	3feffffe 	.word	0x3feffffe
 80149a0:	2200      	movs	r2, #0
 80149a2:	4b63      	ldr	r3, [pc, #396]	; (8014b30 <__ieee754_pow+0x3b8>)
 80149a4:	f7eb fc70 	bl	8000288 <__aeabi_dsub>
 80149a8:	a355      	add	r3, pc, #340	; (adr r3, 8014b00 <__ieee754_pow+0x388>)
 80149aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80149ae:	4604      	mov	r4, r0
 80149b0:	460d      	mov	r5, r1
 80149b2:	f7eb fe21 	bl	80005f8 <__aeabi_dmul>
 80149b6:	a354      	add	r3, pc, #336	; (adr r3, 8014b08 <__ieee754_pow+0x390>)
 80149b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80149bc:	4606      	mov	r6, r0
 80149be:	460f      	mov	r7, r1
 80149c0:	4620      	mov	r0, r4
 80149c2:	4629      	mov	r1, r5
 80149c4:	f7eb fe18 	bl	80005f8 <__aeabi_dmul>
 80149c8:	2200      	movs	r2, #0
 80149ca:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80149ce:	4b59      	ldr	r3, [pc, #356]	; (8014b34 <__ieee754_pow+0x3bc>)
 80149d0:	4620      	mov	r0, r4
 80149d2:	4629      	mov	r1, r5
 80149d4:	f7eb fe10 	bl	80005f8 <__aeabi_dmul>
 80149d8:	4602      	mov	r2, r0
 80149da:	460b      	mov	r3, r1
 80149dc:	a14c      	add	r1, pc, #304	; (adr r1, 8014b10 <__ieee754_pow+0x398>)
 80149de:	e9d1 0100 	ldrd	r0, r1, [r1]
 80149e2:	f7eb fc51 	bl	8000288 <__aeabi_dsub>
 80149e6:	4622      	mov	r2, r4
 80149e8:	462b      	mov	r3, r5
 80149ea:	f7eb fe05 	bl	80005f8 <__aeabi_dmul>
 80149ee:	4602      	mov	r2, r0
 80149f0:	460b      	mov	r3, r1
 80149f2:	2000      	movs	r0, #0
 80149f4:	4950      	ldr	r1, [pc, #320]	; (8014b38 <__ieee754_pow+0x3c0>)
 80149f6:	f7eb fc47 	bl	8000288 <__aeabi_dsub>
 80149fa:	4622      	mov	r2, r4
 80149fc:	462b      	mov	r3, r5
 80149fe:	4680      	mov	r8, r0
 8014a00:	4689      	mov	r9, r1
 8014a02:	4620      	mov	r0, r4
 8014a04:	4629      	mov	r1, r5
 8014a06:	f7eb fdf7 	bl	80005f8 <__aeabi_dmul>
 8014a0a:	4602      	mov	r2, r0
 8014a0c:	460b      	mov	r3, r1
 8014a0e:	4640      	mov	r0, r8
 8014a10:	4649      	mov	r1, r9
 8014a12:	f7eb fdf1 	bl	80005f8 <__aeabi_dmul>
 8014a16:	a340      	add	r3, pc, #256	; (adr r3, 8014b18 <__ieee754_pow+0x3a0>)
 8014a18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014a1c:	f7eb fdec 	bl	80005f8 <__aeabi_dmul>
 8014a20:	4602      	mov	r2, r0
 8014a22:	460b      	mov	r3, r1
 8014a24:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8014a28:	f7eb fc2e 	bl	8000288 <__aeabi_dsub>
 8014a2c:	4602      	mov	r2, r0
 8014a2e:	460b      	mov	r3, r1
 8014a30:	4604      	mov	r4, r0
 8014a32:	460d      	mov	r5, r1
 8014a34:	4630      	mov	r0, r6
 8014a36:	4639      	mov	r1, r7
 8014a38:	f7eb fc28 	bl	800028c <__adddf3>
 8014a3c:	2000      	movs	r0, #0
 8014a3e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8014a42:	4632      	mov	r2, r6
 8014a44:	463b      	mov	r3, r7
 8014a46:	f7eb fc1f 	bl	8000288 <__aeabi_dsub>
 8014a4a:	4602      	mov	r2, r0
 8014a4c:	460b      	mov	r3, r1
 8014a4e:	4620      	mov	r0, r4
 8014a50:	4629      	mov	r1, r5
 8014a52:	f7eb fc19 	bl	8000288 <__aeabi_dsub>
 8014a56:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8014a58:	f10b 33ff 	add.w	r3, fp, #4294967295
 8014a5c:	4313      	orrs	r3, r2
 8014a5e:	4606      	mov	r6, r0
 8014a60:	460f      	mov	r7, r1
 8014a62:	f040 81eb 	bne.w	8014e3c <__ieee754_pow+0x6c4>
 8014a66:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 8014b20 <__ieee754_pow+0x3a8>
 8014a6a:	e9dd 4500 	ldrd	r4, r5, [sp]
 8014a6e:	2400      	movs	r4, #0
 8014a70:	4622      	mov	r2, r4
 8014a72:	462b      	mov	r3, r5
 8014a74:	e9dd 0100 	ldrd	r0, r1, [sp]
 8014a78:	ed8d 7b02 	vstr	d7, [sp, #8]
 8014a7c:	f7eb fc04 	bl	8000288 <__aeabi_dsub>
 8014a80:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8014a84:	f7eb fdb8 	bl	80005f8 <__aeabi_dmul>
 8014a88:	e9dd 2300 	ldrd	r2, r3, [sp]
 8014a8c:	4680      	mov	r8, r0
 8014a8e:	4689      	mov	r9, r1
 8014a90:	4630      	mov	r0, r6
 8014a92:	4639      	mov	r1, r7
 8014a94:	f7eb fdb0 	bl	80005f8 <__aeabi_dmul>
 8014a98:	4602      	mov	r2, r0
 8014a9a:	460b      	mov	r3, r1
 8014a9c:	4640      	mov	r0, r8
 8014a9e:	4649      	mov	r1, r9
 8014aa0:	f7eb fbf4 	bl	800028c <__adddf3>
 8014aa4:	4622      	mov	r2, r4
 8014aa6:	462b      	mov	r3, r5
 8014aa8:	4680      	mov	r8, r0
 8014aaa:	4689      	mov	r9, r1
 8014aac:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8014ab0:	f7eb fda2 	bl	80005f8 <__aeabi_dmul>
 8014ab4:	460b      	mov	r3, r1
 8014ab6:	4604      	mov	r4, r0
 8014ab8:	460d      	mov	r5, r1
 8014aba:	4602      	mov	r2, r0
 8014abc:	4649      	mov	r1, r9
 8014abe:	4640      	mov	r0, r8
 8014ac0:	e9cd 4500 	strd	r4, r5, [sp]
 8014ac4:	f7eb fbe2 	bl	800028c <__adddf3>
 8014ac8:	4b1c      	ldr	r3, [pc, #112]	; (8014b3c <__ieee754_pow+0x3c4>)
 8014aca:	4299      	cmp	r1, r3
 8014acc:	4606      	mov	r6, r0
 8014ace:	460f      	mov	r7, r1
 8014ad0:	468b      	mov	fp, r1
 8014ad2:	f340 82f7 	ble.w	80150c4 <__ieee754_pow+0x94c>
 8014ad6:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8014ada:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8014ade:	4303      	orrs	r3, r0
 8014ae0:	f000 81ea 	beq.w	8014eb8 <__ieee754_pow+0x740>
 8014ae4:	a310      	add	r3, pc, #64	; (adr r3, 8014b28 <__ieee754_pow+0x3b0>)
 8014ae6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014aea:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8014aee:	f7eb fd83 	bl	80005f8 <__aeabi_dmul>
 8014af2:	a30d      	add	r3, pc, #52	; (adr r3, 8014b28 <__ieee754_pow+0x3b0>)
 8014af4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014af8:	e6d5      	b.n	80148a6 <__ieee754_pow+0x12e>
 8014afa:	bf00      	nop
 8014afc:	f3af 8000 	nop.w
 8014b00:	60000000 	.word	0x60000000
 8014b04:	3ff71547 	.word	0x3ff71547
 8014b08:	f85ddf44 	.word	0xf85ddf44
 8014b0c:	3e54ae0b 	.word	0x3e54ae0b
 8014b10:	55555555 	.word	0x55555555
 8014b14:	3fd55555 	.word	0x3fd55555
 8014b18:	652b82fe 	.word	0x652b82fe
 8014b1c:	3ff71547 	.word	0x3ff71547
 8014b20:	00000000 	.word	0x00000000
 8014b24:	bff00000 	.word	0xbff00000
 8014b28:	8800759c 	.word	0x8800759c
 8014b2c:	7e37e43c 	.word	0x7e37e43c
 8014b30:	3ff00000 	.word	0x3ff00000
 8014b34:	3fd00000 	.word	0x3fd00000
 8014b38:	3fe00000 	.word	0x3fe00000
 8014b3c:	408fffff 	.word	0x408fffff
 8014b40:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8014b44:	f04f 0200 	mov.w	r2, #0
 8014b48:	da05      	bge.n	8014b56 <__ieee754_pow+0x3de>
 8014b4a:	4bd3      	ldr	r3, [pc, #844]	; (8014e98 <__ieee754_pow+0x720>)
 8014b4c:	f7eb fd54 	bl	80005f8 <__aeabi_dmul>
 8014b50:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8014b54:	460c      	mov	r4, r1
 8014b56:	1523      	asrs	r3, r4, #20
 8014b58:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8014b5c:	4413      	add	r3, r2
 8014b5e:	9309      	str	r3, [sp, #36]	; 0x24
 8014b60:	4bce      	ldr	r3, [pc, #824]	; (8014e9c <__ieee754_pow+0x724>)
 8014b62:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8014b66:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8014b6a:	429c      	cmp	r4, r3
 8014b6c:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8014b70:	dd08      	ble.n	8014b84 <__ieee754_pow+0x40c>
 8014b72:	4bcb      	ldr	r3, [pc, #812]	; (8014ea0 <__ieee754_pow+0x728>)
 8014b74:	429c      	cmp	r4, r3
 8014b76:	f340 815e 	ble.w	8014e36 <__ieee754_pow+0x6be>
 8014b7a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014b7c:	3301      	adds	r3, #1
 8014b7e:	9309      	str	r3, [sp, #36]	; 0x24
 8014b80:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8014b84:	f04f 0a00 	mov.w	sl, #0
 8014b88:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 8014b8c:	930c      	str	r3, [sp, #48]	; 0x30
 8014b8e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8014b90:	4bc4      	ldr	r3, [pc, #784]	; (8014ea4 <__ieee754_pow+0x72c>)
 8014b92:	4413      	add	r3, r2
 8014b94:	ed93 7b00 	vldr	d7, [r3]
 8014b98:	4629      	mov	r1, r5
 8014b9a:	ec53 2b17 	vmov	r2, r3, d7
 8014b9e:	ed8d 7b06 	vstr	d7, [sp, #24]
 8014ba2:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8014ba6:	f7eb fb6f 	bl	8000288 <__aeabi_dsub>
 8014baa:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8014bae:	4606      	mov	r6, r0
 8014bb0:	460f      	mov	r7, r1
 8014bb2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8014bb6:	f7eb fb69 	bl	800028c <__adddf3>
 8014bba:	4602      	mov	r2, r0
 8014bbc:	460b      	mov	r3, r1
 8014bbe:	2000      	movs	r0, #0
 8014bc0:	49b9      	ldr	r1, [pc, #740]	; (8014ea8 <__ieee754_pow+0x730>)
 8014bc2:	f7eb fe43 	bl	800084c <__aeabi_ddiv>
 8014bc6:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8014bca:	4602      	mov	r2, r0
 8014bcc:	460b      	mov	r3, r1
 8014bce:	4630      	mov	r0, r6
 8014bd0:	4639      	mov	r1, r7
 8014bd2:	f7eb fd11 	bl	80005f8 <__aeabi_dmul>
 8014bd6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8014bda:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8014bde:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8014be2:	2300      	movs	r3, #0
 8014be4:	9302      	str	r3, [sp, #8]
 8014be6:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8014bea:	106d      	asrs	r5, r5, #1
 8014bec:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8014bf0:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8014bf4:	2200      	movs	r2, #0
 8014bf6:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 8014bfa:	4640      	mov	r0, r8
 8014bfc:	4649      	mov	r1, r9
 8014bfe:	4614      	mov	r4, r2
 8014c00:	461d      	mov	r5, r3
 8014c02:	f7eb fcf9 	bl	80005f8 <__aeabi_dmul>
 8014c06:	4602      	mov	r2, r0
 8014c08:	460b      	mov	r3, r1
 8014c0a:	4630      	mov	r0, r6
 8014c0c:	4639      	mov	r1, r7
 8014c0e:	f7eb fb3b 	bl	8000288 <__aeabi_dsub>
 8014c12:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8014c16:	4606      	mov	r6, r0
 8014c18:	460f      	mov	r7, r1
 8014c1a:	4620      	mov	r0, r4
 8014c1c:	4629      	mov	r1, r5
 8014c1e:	f7eb fb33 	bl	8000288 <__aeabi_dsub>
 8014c22:	4602      	mov	r2, r0
 8014c24:	460b      	mov	r3, r1
 8014c26:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8014c2a:	f7eb fb2d 	bl	8000288 <__aeabi_dsub>
 8014c2e:	4642      	mov	r2, r8
 8014c30:	464b      	mov	r3, r9
 8014c32:	f7eb fce1 	bl	80005f8 <__aeabi_dmul>
 8014c36:	4602      	mov	r2, r0
 8014c38:	460b      	mov	r3, r1
 8014c3a:	4630      	mov	r0, r6
 8014c3c:	4639      	mov	r1, r7
 8014c3e:	f7eb fb23 	bl	8000288 <__aeabi_dsub>
 8014c42:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8014c46:	f7eb fcd7 	bl	80005f8 <__aeabi_dmul>
 8014c4a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8014c4e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8014c52:	4610      	mov	r0, r2
 8014c54:	4619      	mov	r1, r3
 8014c56:	f7eb fccf 	bl	80005f8 <__aeabi_dmul>
 8014c5a:	a37b      	add	r3, pc, #492	; (adr r3, 8014e48 <__ieee754_pow+0x6d0>)
 8014c5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014c60:	4604      	mov	r4, r0
 8014c62:	460d      	mov	r5, r1
 8014c64:	f7eb fcc8 	bl	80005f8 <__aeabi_dmul>
 8014c68:	a379      	add	r3, pc, #484	; (adr r3, 8014e50 <__ieee754_pow+0x6d8>)
 8014c6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014c6e:	f7eb fb0d 	bl	800028c <__adddf3>
 8014c72:	4622      	mov	r2, r4
 8014c74:	462b      	mov	r3, r5
 8014c76:	f7eb fcbf 	bl	80005f8 <__aeabi_dmul>
 8014c7a:	a377      	add	r3, pc, #476	; (adr r3, 8014e58 <__ieee754_pow+0x6e0>)
 8014c7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014c80:	f7eb fb04 	bl	800028c <__adddf3>
 8014c84:	4622      	mov	r2, r4
 8014c86:	462b      	mov	r3, r5
 8014c88:	f7eb fcb6 	bl	80005f8 <__aeabi_dmul>
 8014c8c:	a374      	add	r3, pc, #464	; (adr r3, 8014e60 <__ieee754_pow+0x6e8>)
 8014c8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014c92:	f7eb fafb 	bl	800028c <__adddf3>
 8014c96:	4622      	mov	r2, r4
 8014c98:	462b      	mov	r3, r5
 8014c9a:	f7eb fcad 	bl	80005f8 <__aeabi_dmul>
 8014c9e:	a372      	add	r3, pc, #456	; (adr r3, 8014e68 <__ieee754_pow+0x6f0>)
 8014ca0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014ca4:	f7eb faf2 	bl	800028c <__adddf3>
 8014ca8:	4622      	mov	r2, r4
 8014caa:	462b      	mov	r3, r5
 8014cac:	f7eb fca4 	bl	80005f8 <__aeabi_dmul>
 8014cb0:	a36f      	add	r3, pc, #444	; (adr r3, 8014e70 <__ieee754_pow+0x6f8>)
 8014cb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014cb6:	f7eb fae9 	bl	800028c <__adddf3>
 8014cba:	4622      	mov	r2, r4
 8014cbc:	4606      	mov	r6, r0
 8014cbe:	460f      	mov	r7, r1
 8014cc0:	462b      	mov	r3, r5
 8014cc2:	4620      	mov	r0, r4
 8014cc4:	4629      	mov	r1, r5
 8014cc6:	f7eb fc97 	bl	80005f8 <__aeabi_dmul>
 8014cca:	4602      	mov	r2, r0
 8014ccc:	460b      	mov	r3, r1
 8014cce:	4630      	mov	r0, r6
 8014cd0:	4639      	mov	r1, r7
 8014cd2:	f7eb fc91 	bl	80005f8 <__aeabi_dmul>
 8014cd6:	4642      	mov	r2, r8
 8014cd8:	4604      	mov	r4, r0
 8014cda:	460d      	mov	r5, r1
 8014cdc:	464b      	mov	r3, r9
 8014cde:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8014ce2:	f7eb fad3 	bl	800028c <__adddf3>
 8014ce6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8014cea:	f7eb fc85 	bl	80005f8 <__aeabi_dmul>
 8014cee:	4622      	mov	r2, r4
 8014cf0:	462b      	mov	r3, r5
 8014cf2:	f7eb facb 	bl	800028c <__adddf3>
 8014cf6:	4642      	mov	r2, r8
 8014cf8:	4606      	mov	r6, r0
 8014cfa:	460f      	mov	r7, r1
 8014cfc:	464b      	mov	r3, r9
 8014cfe:	4640      	mov	r0, r8
 8014d00:	4649      	mov	r1, r9
 8014d02:	f7eb fc79 	bl	80005f8 <__aeabi_dmul>
 8014d06:	2200      	movs	r2, #0
 8014d08:	4b68      	ldr	r3, [pc, #416]	; (8014eac <__ieee754_pow+0x734>)
 8014d0a:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8014d0e:	f7eb fabd 	bl	800028c <__adddf3>
 8014d12:	4632      	mov	r2, r6
 8014d14:	463b      	mov	r3, r7
 8014d16:	f7eb fab9 	bl	800028c <__adddf3>
 8014d1a:	9802      	ldr	r0, [sp, #8]
 8014d1c:	460d      	mov	r5, r1
 8014d1e:	4604      	mov	r4, r0
 8014d20:	4602      	mov	r2, r0
 8014d22:	460b      	mov	r3, r1
 8014d24:	4640      	mov	r0, r8
 8014d26:	4649      	mov	r1, r9
 8014d28:	f7eb fc66 	bl	80005f8 <__aeabi_dmul>
 8014d2c:	2200      	movs	r2, #0
 8014d2e:	4680      	mov	r8, r0
 8014d30:	4689      	mov	r9, r1
 8014d32:	4b5e      	ldr	r3, [pc, #376]	; (8014eac <__ieee754_pow+0x734>)
 8014d34:	4620      	mov	r0, r4
 8014d36:	4629      	mov	r1, r5
 8014d38:	f7eb faa6 	bl	8000288 <__aeabi_dsub>
 8014d3c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8014d40:	f7eb faa2 	bl	8000288 <__aeabi_dsub>
 8014d44:	4602      	mov	r2, r0
 8014d46:	460b      	mov	r3, r1
 8014d48:	4630      	mov	r0, r6
 8014d4a:	4639      	mov	r1, r7
 8014d4c:	f7eb fa9c 	bl	8000288 <__aeabi_dsub>
 8014d50:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8014d54:	f7eb fc50 	bl	80005f8 <__aeabi_dmul>
 8014d58:	4622      	mov	r2, r4
 8014d5a:	4606      	mov	r6, r0
 8014d5c:	460f      	mov	r7, r1
 8014d5e:	462b      	mov	r3, r5
 8014d60:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8014d64:	f7eb fc48 	bl	80005f8 <__aeabi_dmul>
 8014d68:	4602      	mov	r2, r0
 8014d6a:	460b      	mov	r3, r1
 8014d6c:	4630      	mov	r0, r6
 8014d6e:	4639      	mov	r1, r7
 8014d70:	f7eb fa8c 	bl	800028c <__adddf3>
 8014d74:	4606      	mov	r6, r0
 8014d76:	460f      	mov	r7, r1
 8014d78:	4602      	mov	r2, r0
 8014d7a:	460b      	mov	r3, r1
 8014d7c:	4640      	mov	r0, r8
 8014d7e:	4649      	mov	r1, r9
 8014d80:	f7eb fa84 	bl	800028c <__adddf3>
 8014d84:	9802      	ldr	r0, [sp, #8]
 8014d86:	a33c      	add	r3, pc, #240	; (adr r3, 8014e78 <__ieee754_pow+0x700>)
 8014d88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014d8c:	4604      	mov	r4, r0
 8014d8e:	460d      	mov	r5, r1
 8014d90:	f7eb fc32 	bl	80005f8 <__aeabi_dmul>
 8014d94:	4642      	mov	r2, r8
 8014d96:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8014d9a:	464b      	mov	r3, r9
 8014d9c:	4620      	mov	r0, r4
 8014d9e:	4629      	mov	r1, r5
 8014da0:	f7eb fa72 	bl	8000288 <__aeabi_dsub>
 8014da4:	4602      	mov	r2, r0
 8014da6:	460b      	mov	r3, r1
 8014da8:	4630      	mov	r0, r6
 8014daa:	4639      	mov	r1, r7
 8014dac:	f7eb fa6c 	bl	8000288 <__aeabi_dsub>
 8014db0:	a333      	add	r3, pc, #204	; (adr r3, 8014e80 <__ieee754_pow+0x708>)
 8014db2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014db6:	f7eb fc1f 	bl	80005f8 <__aeabi_dmul>
 8014dba:	a333      	add	r3, pc, #204	; (adr r3, 8014e88 <__ieee754_pow+0x710>)
 8014dbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014dc0:	4606      	mov	r6, r0
 8014dc2:	460f      	mov	r7, r1
 8014dc4:	4620      	mov	r0, r4
 8014dc6:	4629      	mov	r1, r5
 8014dc8:	f7eb fc16 	bl	80005f8 <__aeabi_dmul>
 8014dcc:	4602      	mov	r2, r0
 8014dce:	460b      	mov	r3, r1
 8014dd0:	4630      	mov	r0, r6
 8014dd2:	4639      	mov	r1, r7
 8014dd4:	f7eb fa5a 	bl	800028c <__adddf3>
 8014dd8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8014dda:	4b35      	ldr	r3, [pc, #212]	; (8014eb0 <__ieee754_pow+0x738>)
 8014ddc:	4413      	add	r3, r2
 8014dde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014de2:	f7eb fa53 	bl	800028c <__adddf3>
 8014de6:	4604      	mov	r4, r0
 8014de8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8014dea:	460d      	mov	r5, r1
 8014dec:	f7eb fb9a 	bl	8000524 <__aeabi_i2d>
 8014df0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8014df2:	4b30      	ldr	r3, [pc, #192]	; (8014eb4 <__ieee754_pow+0x73c>)
 8014df4:	4413      	add	r3, r2
 8014df6:	e9d3 8900 	ldrd	r8, r9, [r3]
 8014dfa:	4606      	mov	r6, r0
 8014dfc:	460f      	mov	r7, r1
 8014dfe:	4622      	mov	r2, r4
 8014e00:	462b      	mov	r3, r5
 8014e02:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8014e06:	f7eb fa41 	bl	800028c <__adddf3>
 8014e0a:	4642      	mov	r2, r8
 8014e0c:	464b      	mov	r3, r9
 8014e0e:	f7eb fa3d 	bl	800028c <__adddf3>
 8014e12:	4632      	mov	r2, r6
 8014e14:	463b      	mov	r3, r7
 8014e16:	f7eb fa39 	bl	800028c <__adddf3>
 8014e1a:	9802      	ldr	r0, [sp, #8]
 8014e1c:	4632      	mov	r2, r6
 8014e1e:	463b      	mov	r3, r7
 8014e20:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8014e24:	f7eb fa30 	bl	8000288 <__aeabi_dsub>
 8014e28:	4642      	mov	r2, r8
 8014e2a:	464b      	mov	r3, r9
 8014e2c:	f7eb fa2c 	bl	8000288 <__aeabi_dsub>
 8014e30:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8014e34:	e607      	b.n	8014a46 <__ieee754_pow+0x2ce>
 8014e36:	f04f 0a01 	mov.w	sl, #1
 8014e3a:	e6a5      	b.n	8014b88 <__ieee754_pow+0x410>
 8014e3c:	ed9f 7b14 	vldr	d7, [pc, #80]	; 8014e90 <__ieee754_pow+0x718>
 8014e40:	e613      	b.n	8014a6a <__ieee754_pow+0x2f2>
 8014e42:	bf00      	nop
 8014e44:	f3af 8000 	nop.w
 8014e48:	4a454eef 	.word	0x4a454eef
 8014e4c:	3fca7e28 	.word	0x3fca7e28
 8014e50:	93c9db65 	.word	0x93c9db65
 8014e54:	3fcd864a 	.word	0x3fcd864a
 8014e58:	a91d4101 	.word	0xa91d4101
 8014e5c:	3fd17460 	.word	0x3fd17460
 8014e60:	518f264d 	.word	0x518f264d
 8014e64:	3fd55555 	.word	0x3fd55555
 8014e68:	db6fabff 	.word	0xdb6fabff
 8014e6c:	3fdb6db6 	.word	0x3fdb6db6
 8014e70:	33333303 	.word	0x33333303
 8014e74:	3fe33333 	.word	0x3fe33333
 8014e78:	e0000000 	.word	0xe0000000
 8014e7c:	3feec709 	.word	0x3feec709
 8014e80:	dc3a03fd 	.word	0xdc3a03fd
 8014e84:	3feec709 	.word	0x3feec709
 8014e88:	145b01f5 	.word	0x145b01f5
 8014e8c:	be3e2fe0 	.word	0xbe3e2fe0
 8014e90:	00000000 	.word	0x00000000
 8014e94:	3ff00000 	.word	0x3ff00000
 8014e98:	43400000 	.word	0x43400000
 8014e9c:	0003988e 	.word	0x0003988e
 8014ea0:	000bb679 	.word	0x000bb679
 8014ea4:	08015fd0 	.word	0x08015fd0
 8014ea8:	3ff00000 	.word	0x3ff00000
 8014eac:	40080000 	.word	0x40080000
 8014eb0:	08015ff0 	.word	0x08015ff0
 8014eb4:	08015fe0 	.word	0x08015fe0
 8014eb8:	a3b4      	add	r3, pc, #720	; (adr r3, 801518c <__ieee754_pow+0xa14>)
 8014eba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014ebe:	4640      	mov	r0, r8
 8014ec0:	4649      	mov	r1, r9
 8014ec2:	f7eb f9e3 	bl	800028c <__adddf3>
 8014ec6:	4622      	mov	r2, r4
 8014ec8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8014ecc:	462b      	mov	r3, r5
 8014ece:	4630      	mov	r0, r6
 8014ed0:	4639      	mov	r1, r7
 8014ed2:	f7eb f9d9 	bl	8000288 <__aeabi_dsub>
 8014ed6:	4602      	mov	r2, r0
 8014ed8:	460b      	mov	r3, r1
 8014eda:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8014ede:	f7eb fe1b 	bl	8000b18 <__aeabi_dcmpgt>
 8014ee2:	2800      	cmp	r0, #0
 8014ee4:	f47f adfe 	bne.w	8014ae4 <__ieee754_pow+0x36c>
 8014ee8:	4aa3      	ldr	r2, [pc, #652]	; (8015178 <__ieee754_pow+0xa00>)
 8014eea:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8014eee:	4293      	cmp	r3, r2
 8014ef0:	f340 810a 	ble.w	8015108 <__ieee754_pow+0x990>
 8014ef4:	151b      	asrs	r3, r3, #20
 8014ef6:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8014efa:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8014efe:	fa4a f303 	asr.w	r3, sl, r3
 8014f02:	445b      	add	r3, fp
 8014f04:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8014f08:	4e9c      	ldr	r6, [pc, #624]	; (801517c <__ieee754_pow+0xa04>)
 8014f0a:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8014f0e:	4116      	asrs	r6, r2
 8014f10:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8014f14:	2000      	movs	r0, #0
 8014f16:	ea23 0106 	bic.w	r1, r3, r6
 8014f1a:	f1c2 0214 	rsb	r2, r2, #20
 8014f1e:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8014f22:	fa4a fa02 	asr.w	sl, sl, r2
 8014f26:	f1bb 0f00 	cmp.w	fp, #0
 8014f2a:	4602      	mov	r2, r0
 8014f2c:	460b      	mov	r3, r1
 8014f2e:	4620      	mov	r0, r4
 8014f30:	4629      	mov	r1, r5
 8014f32:	bfb8      	it	lt
 8014f34:	f1ca 0a00 	rsblt	sl, sl, #0
 8014f38:	f7eb f9a6 	bl	8000288 <__aeabi_dsub>
 8014f3c:	e9cd 0100 	strd	r0, r1, [sp]
 8014f40:	4642      	mov	r2, r8
 8014f42:	464b      	mov	r3, r9
 8014f44:	e9dd 0100 	ldrd	r0, r1, [sp]
 8014f48:	f7eb f9a0 	bl	800028c <__adddf3>
 8014f4c:	2000      	movs	r0, #0
 8014f4e:	a378      	add	r3, pc, #480	; (adr r3, 8015130 <__ieee754_pow+0x9b8>)
 8014f50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014f54:	4604      	mov	r4, r0
 8014f56:	460d      	mov	r5, r1
 8014f58:	f7eb fb4e 	bl	80005f8 <__aeabi_dmul>
 8014f5c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8014f60:	4606      	mov	r6, r0
 8014f62:	460f      	mov	r7, r1
 8014f64:	4620      	mov	r0, r4
 8014f66:	4629      	mov	r1, r5
 8014f68:	f7eb f98e 	bl	8000288 <__aeabi_dsub>
 8014f6c:	4602      	mov	r2, r0
 8014f6e:	460b      	mov	r3, r1
 8014f70:	4640      	mov	r0, r8
 8014f72:	4649      	mov	r1, r9
 8014f74:	f7eb f988 	bl	8000288 <__aeabi_dsub>
 8014f78:	a36f      	add	r3, pc, #444	; (adr r3, 8015138 <__ieee754_pow+0x9c0>)
 8014f7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014f7e:	f7eb fb3b 	bl	80005f8 <__aeabi_dmul>
 8014f82:	a36f      	add	r3, pc, #444	; (adr r3, 8015140 <__ieee754_pow+0x9c8>)
 8014f84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014f88:	4680      	mov	r8, r0
 8014f8a:	4689      	mov	r9, r1
 8014f8c:	4620      	mov	r0, r4
 8014f8e:	4629      	mov	r1, r5
 8014f90:	f7eb fb32 	bl	80005f8 <__aeabi_dmul>
 8014f94:	4602      	mov	r2, r0
 8014f96:	460b      	mov	r3, r1
 8014f98:	4640      	mov	r0, r8
 8014f9a:	4649      	mov	r1, r9
 8014f9c:	f7eb f976 	bl	800028c <__adddf3>
 8014fa0:	4604      	mov	r4, r0
 8014fa2:	460d      	mov	r5, r1
 8014fa4:	4602      	mov	r2, r0
 8014fa6:	460b      	mov	r3, r1
 8014fa8:	4630      	mov	r0, r6
 8014faa:	4639      	mov	r1, r7
 8014fac:	f7eb f96e 	bl	800028c <__adddf3>
 8014fb0:	4632      	mov	r2, r6
 8014fb2:	463b      	mov	r3, r7
 8014fb4:	4680      	mov	r8, r0
 8014fb6:	4689      	mov	r9, r1
 8014fb8:	f7eb f966 	bl	8000288 <__aeabi_dsub>
 8014fbc:	4602      	mov	r2, r0
 8014fbe:	460b      	mov	r3, r1
 8014fc0:	4620      	mov	r0, r4
 8014fc2:	4629      	mov	r1, r5
 8014fc4:	f7eb f960 	bl	8000288 <__aeabi_dsub>
 8014fc8:	4642      	mov	r2, r8
 8014fca:	4606      	mov	r6, r0
 8014fcc:	460f      	mov	r7, r1
 8014fce:	464b      	mov	r3, r9
 8014fd0:	4640      	mov	r0, r8
 8014fd2:	4649      	mov	r1, r9
 8014fd4:	f7eb fb10 	bl	80005f8 <__aeabi_dmul>
 8014fd8:	a35b      	add	r3, pc, #364	; (adr r3, 8015148 <__ieee754_pow+0x9d0>)
 8014fda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014fde:	4604      	mov	r4, r0
 8014fe0:	460d      	mov	r5, r1
 8014fe2:	f7eb fb09 	bl	80005f8 <__aeabi_dmul>
 8014fe6:	a35a      	add	r3, pc, #360	; (adr r3, 8015150 <__ieee754_pow+0x9d8>)
 8014fe8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014fec:	f7eb f94c 	bl	8000288 <__aeabi_dsub>
 8014ff0:	4622      	mov	r2, r4
 8014ff2:	462b      	mov	r3, r5
 8014ff4:	f7eb fb00 	bl	80005f8 <__aeabi_dmul>
 8014ff8:	a357      	add	r3, pc, #348	; (adr r3, 8015158 <__ieee754_pow+0x9e0>)
 8014ffa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014ffe:	f7eb f945 	bl	800028c <__adddf3>
 8015002:	4622      	mov	r2, r4
 8015004:	462b      	mov	r3, r5
 8015006:	f7eb faf7 	bl	80005f8 <__aeabi_dmul>
 801500a:	a355      	add	r3, pc, #340	; (adr r3, 8015160 <__ieee754_pow+0x9e8>)
 801500c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015010:	f7eb f93a 	bl	8000288 <__aeabi_dsub>
 8015014:	4622      	mov	r2, r4
 8015016:	462b      	mov	r3, r5
 8015018:	f7eb faee 	bl	80005f8 <__aeabi_dmul>
 801501c:	a352      	add	r3, pc, #328	; (adr r3, 8015168 <__ieee754_pow+0x9f0>)
 801501e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015022:	f7eb f933 	bl	800028c <__adddf3>
 8015026:	4622      	mov	r2, r4
 8015028:	462b      	mov	r3, r5
 801502a:	f7eb fae5 	bl	80005f8 <__aeabi_dmul>
 801502e:	4602      	mov	r2, r0
 8015030:	460b      	mov	r3, r1
 8015032:	4640      	mov	r0, r8
 8015034:	4649      	mov	r1, r9
 8015036:	f7eb f927 	bl	8000288 <__aeabi_dsub>
 801503a:	4604      	mov	r4, r0
 801503c:	460d      	mov	r5, r1
 801503e:	4602      	mov	r2, r0
 8015040:	460b      	mov	r3, r1
 8015042:	4640      	mov	r0, r8
 8015044:	4649      	mov	r1, r9
 8015046:	f7eb fad7 	bl	80005f8 <__aeabi_dmul>
 801504a:	2200      	movs	r2, #0
 801504c:	e9cd 0100 	strd	r0, r1, [sp]
 8015050:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8015054:	4620      	mov	r0, r4
 8015056:	4629      	mov	r1, r5
 8015058:	f7eb f916 	bl	8000288 <__aeabi_dsub>
 801505c:	4602      	mov	r2, r0
 801505e:	460b      	mov	r3, r1
 8015060:	e9dd 0100 	ldrd	r0, r1, [sp]
 8015064:	f7eb fbf2 	bl	800084c <__aeabi_ddiv>
 8015068:	4632      	mov	r2, r6
 801506a:	4604      	mov	r4, r0
 801506c:	460d      	mov	r5, r1
 801506e:	463b      	mov	r3, r7
 8015070:	4640      	mov	r0, r8
 8015072:	4649      	mov	r1, r9
 8015074:	f7eb fac0 	bl	80005f8 <__aeabi_dmul>
 8015078:	4632      	mov	r2, r6
 801507a:	463b      	mov	r3, r7
 801507c:	f7eb f906 	bl	800028c <__adddf3>
 8015080:	4602      	mov	r2, r0
 8015082:	460b      	mov	r3, r1
 8015084:	4620      	mov	r0, r4
 8015086:	4629      	mov	r1, r5
 8015088:	f7eb f8fe 	bl	8000288 <__aeabi_dsub>
 801508c:	4642      	mov	r2, r8
 801508e:	464b      	mov	r3, r9
 8015090:	f7eb f8fa 	bl	8000288 <__aeabi_dsub>
 8015094:	4602      	mov	r2, r0
 8015096:	460b      	mov	r3, r1
 8015098:	2000      	movs	r0, #0
 801509a:	4939      	ldr	r1, [pc, #228]	; (8015180 <__ieee754_pow+0xa08>)
 801509c:	f7eb f8f4 	bl	8000288 <__aeabi_dsub>
 80150a0:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 80150a4:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 80150a8:	4602      	mov	r2, r0
 80150aa:	460b      	mov	r3, r1
 80150ac:	da2f      	bge.n	801510e <__ieee754_pow+0x996>
 80150ae:	4650      	mov	r0, sl
 80150b0:	ec43 2b10 	vmov	d0, r2, r3
 80150b4:	f000 fb64 	bl	8015780 <scalbn>
 80150b8:	ec51 0b10 	vmov	r0, r1, d0
 80150bc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80150c0:	f7ff bbf1 	b.w	80148a6 <__ieee754_pow+0x12e>
 80150c4:	4b2f      	ldr	r3, [pc, #188]	; (8015184 <__ieee754_pow+0xa0c>)
 80150c6:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 80150ca:	429e      	cmp	r6, r3
 80150cc:	f77f af0c 	ble.w	8014ee8 <__ieee754_pow+0x770>
 80150d0:	4b2d      	ldr	r3, [pc, #180]	; (8015188 <__ieee754_pow+0xa10>)
 80150d2:	440b      	add	r3, r1
 80150d4:	4303      	orrs	r3, r0
 80150d6:	d00b      	beq.n	80150f0 <__ieee754_pow+0x978>
 80150d8:	a325      	add	r3, pc, #148	; (adr r3, 8015170 <__ieee754_pow+0x9f8>)
 80150da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80150de:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80150e2:	f7eb fa89 	bl	80005f8 <__aeabi_dmul>
 80150e6:	a322      	add	r3, pc, #136	; (adr r3, 8015170 <__ieee754_pow+0x9f8>)
 80150e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80150ec:	f7ff bbdb 	b.w	80148a6 <__ieee754_pow+0x12e>
 80150f0:	4622      	mov	r2, r4
 80150f2:	462b      	mov	r3, r5
 80150f4:	f7eb f8c8 	bl	8000288 <__aeabi_dsub>
 80150f8:	4642      	mov	r2, r8
 80150fa:	464b      	mov	r3, r9
 80150fc:	f7eb fd02 	bl	8000b04 <__aeabi_dcmpge>
 8015100:	2800      	cmp	r0, #0
 8015102:	f43f aef1 	beq.w	8014ee8 <__ieee754_pow+0x770>
 8015106:	e7e7      	b.n	80150d8 <__ieee754_pow+0x960>
 8015108:	f04f 0a00 	mov.w	sl, #0
 801510c:	e718      	b.n	8014f40 <__ieee754_pow+0x7c8>
 801510e:	4621      	mov	r1, r4
 8015110:	e7d4      	b.n	80150bc <__ieee754_pow+0x944>
 8015112:	2000      	movs	r0, #0
 8015114:	491a      	ldr	r1, [pc, #104]	; (8015180 <__ieee754_pow+0xa08>)
 8015116:	f7ff bb8f 	b.w	8014838 <__ieee754_pow+0xc0>
 801511a:	e9dd 0100 	ldrd	r0, r1, [sp]
 801511e:	f7ff bb8b 	b.w	8014838 <__ieee754_pow+0xc0>
 8015122:	4630      	mov	r0, r6
 8015124:	4639      	mov	r1, r7
 8015126:	f7ff bb87 	b.w	8014838 <__ieee754_pow+0xc0>
 801512a:	4693      	mov	fp, r2
 801512c:	f7ff bb98 	b.w	8014860 <__ieee754_pow+0xe8>
 8015130:	00000000 	.word	0x00000000
 8015134:	3fe62e43 	.word	0x3fe62e43
 8015138:	fefa39ef 	.word	0xfefa39ef
 801513c:	3fe62e42 	.word	0x3fe62e42
 8015140:	0ca86c39 	.word	0x0ca86c39
 8015144:	be205c61 	.word	0xbe205c61
 8015148:	72bea4d0 	.word	0x72bea4d0
 801514c:	3e663769 	.word	0x3e663769
 8015150:	c5d26bf1 	.word	0xc5d26bf1
 8015154:	3ebbbd41 	.word	0x3ebbbd41
 8015158:	af25de2c 	.word	0xaf25de2c
 801515c:	3f11566a 	.word	0x3f11566a
 8015160:	16bebd93 	.word	0x16bebd93
 8015164:	3f66c16c 	.word	0x3f66c16c
 8015168:	5555553e 	.word	0x5555553e
 801516c:	3fc55555 	.word	0x3fc55555
 8015170:	c2f8f359 	.word	0xc2f8f359
 8015174:	01a56e1f 	.word	0x01a56e1f
 8015178:	3fe00000 	.word	0x3fe00000
 801517c:	000fffff 	.word	0x000fffff
 8015180:	3ff00000 	.word	0x3ff00000
 8015184:	4090cbff 	.word	0x4090cbff
 8015188:	3f6f3400 	.word	0x3f6f3400
 801518c:	652b82fe 	.word	0x652b82fe
 8015190:	3c971547 	.word	0x3c971547

08015194 <__ieee754_sqrt>:
 8015194:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015198:	4955      	ldr	r1, [pc, #340]	; (80152f0 <__ieee754_sqrt+0x15c>)
 801519a:	ec55 4b10 	vmov	r4, r5, d0
 801519e:	43a9      	bics	r1, r5
 80151a0:	462b      	mov	r3, r5
 80151a2:	462a      	mov	r2, r5
 80151a4:	d112      	bne.n	80151cc <__ieee754_sqrt+0x38>
 80151a6:	ee10 2a10 	vmov	r2, s0
 80151aa:	ee10 0a10 	vmov	r0, s0
 80151ae:	4629      	mov	r1, r5
 80151b0:	f7eb fa22 	bl	80005f8 <__aeabi_dmul>
 80151b4:	4602      	mov	r2, r0
 80151b6:	460b      	mov	r3, r1
 80151b8:	4620      	mov	r0, r4
 80151ba:	4629      	mov	r1, r5
 80151bc:	f7eb f866 	bl	800028c <__adddf3>
 80151c0:	4604      	mov	r4, r0
 80151c2:	460d      	mov	r5, r1
 80151c4:	ec45 4b10 	vmov	d0, r4, r5
 80151c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80151cc:	2d00      	cmp	r5, #0
 80151ce:	ee10 0a10 	vmov	r0, s0
 80151d2:	4621      	mov	r1, r4
 80151d4:	dc0f      	bgt.n	80151f6 <__ieee754_sqrt+0x62>
 80151d6:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 80151da:	4330      	orrs	r0, r6
 80151dc:	d0f2      	beq.n	80151c4 <__ieee754_sqrt+0x30>
 80151de:	b155      	cbz	r5, 80151f6 <__ieee754_sqrt+0x62>
 80151e0:	ee10 2a10 	vmov	r2, s0
 80151e4:	4620      	mov	r0, r4
 80151e6:	4629      	mov	r1, r5
 80151e8:	f7eb f84e 	bl	8000288 <__aeabi_dsub>
 80151ec:	4602      	mov	r2, r0
 80151ee:	460b      	mov	r3, r1
 80151f0:	f7eb fb2c 	bl	800084c <__aeabi_ddiv>
 80151f4:	e7e4      	b.n	80151c0 <__ieee754_sqrt+0x2c>
 80151f6:	151b      	asrs	r3, r3, #20
 80151f8:	d073      	beq.n	80152e2 <__ieee754_sqrt+0x14e>
 80151fa:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80151fe:	07dd      	lsls	r5, r3, #31
 8015200:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8015204:	bf48      	it	mi
 8015206:	0fc8      	lsrmi	r0, r1, #31
 8015208:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 801520c:	bf44      	itt	mi
 801520e:	0049      	lslmi	r1, r1, #1
 8015210:	eb00 0242 	addmi.w	r2, r0, r2, lsl #1
 8015214:	2500      	movs	r5, #0
 8015216:	1058      	asrs	r0, r3, #1
 8015218:	0fcb      	lsrs	r3, r1, #31
 801521a:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 801521e:	0049      	lsls	r1, r1, #1
 8015220:	2316      	movs	r3, #22
 8015222:	462c      	mov	r4, r5
 8015224:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 8015228:	19a7      	adds	r7, r4, r6
 801522a:	4297      	cmp	r7, r2
 801522c:	bfde      	ittt	le
 801522e:	19bc      	addle	r4, r7, r6
 8015230:	1bd2      	suble	r2, r2, r7
 8015232:	19ad      	addle	r5, r5, r6
 8015234:	0fcf      	lsrs	r7, r1, #31
 8015236:	3b01      	subs	r3, #1
 8015238:	eb07 0242 	add.w	r2, r7, r2, lsl #1
 801523c:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8015240:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8015244:	d1f0      	bne.n	8015228 <__ieee754_sqrt+0x94>
 8015246:	f04f 0c20 	mov.w	ip, #32
 801524a:	469e      	mov	lr, r3
 801524c:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8015250:	42a2      	cmp	r2, r4
 8015252:	eb06 070e 	add.w	r7, r6, lr
 8015256:	dc02      	bgt.n	801525e <__ieee754_sqrt+0xca>
 8015258:	d112      	bne.n	8015280 <__ieee754_sqrt+0xec>
 801525a:	428f      	cmp	r7, r1
 801525c:	d810      	bhi.n	8015280 <__ieee754_sqrt+0xec>
 801525e:	2f00      	cmp	r7, #0
 8015260:	eb07 0e06 	add.w	lr, r7, r6
 8015264:	da42      	bge.n	80152ec <__ieee754_sqrt+0x158>
 8015266:	f1be 0f00 	cmp.w	lr, #0
 801526a:	db3f      	blt.n	80152ec <__ieee754_sqrt+0x158>
 801526c:	f104 0801 	add.w	r8, r4, #1
 8015270:	1b12      	subs	r2, r2, r4
 8015272:	428f      	cmp	r7, r1
 8015274:	bf88      	it	hi
 8015276:	f102 32ff 	addhi.w	r2, r2, #4294967295
 801527a:	1bc9      	subs	r1, r1, r7
 801527c:	4433      	add	r3, r6
 801527e:	4644      	mov	r4, r8
 8015280:	0052      	lsls	r2, r2, #1
 8015282:	f1bc 0c01 	subs.w	ip, ip, #1
 8015286:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 801528a:	ea4f 0656 	mov.w	r6, r6, lsr #1
 801528e:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8015292:	d1dd      	bne.n	8015250 <__ieee754_sqrt+0xbc>
 8015294:	430a      	orrs	r2, r1
 8015296:	d006      	beq.n	80152a6 <__ieee754_sqrt+0x112>
 8015298:	1c5c      	adds	r4, r3, #1
 801529a:	bf13      	iteet	ne
 801529c:	3301      	addne	r3, #1
 801529e:	3501      	addeq	r5, #1
 80152a0:	4663      	moveq	r3, ip
 80152a2:	f023 0301 	bicne.w	r3, r3, #1
 80152a6:	106a      	asrs	r2, r5, #1
 80152a8:	085b      	lsrs	r3, r3, #1
 80152aa:	07e9      	lsls	r1, r5, #31
 80152ac:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 80152b0:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 80152b4:	bf48      	it	mi
 80152b6:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 80152ba:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 80152be:	461c      	mov	r4, r3
 80152c0:	e780      	b.n	80151c4 <__ieee754_sqrt+0x30>
 80152c2:	0aca      	lsrs	r2, r1, #11
 80152c4:	3815      	subs	r0, #21
 80152c6:	0549      	lsls	r1, r1, #21
 80152c8:	2a00      	cmp	r2, #0
 80152ca:	d0fa      	beq.n	80152c2 <__ieee754_sqrt+0x12e>
 80152cc:	02d6      	lsls	r6, r2, #11
 80152ce:	d50a      	bpl.n	80152e6 <__ieee754_sqrt+0x152>
 80152d0:	f1c3 0420 	rsb	r4, r3, #32
 80152d4:	fa21 f404 	lsr.w	r4, r1, r4
 80152d8:	1e5d      	subs	r5, r3, #1
 80152da:	4099      	lsls	r1, r3
 80152dc:	4322      	orrs	r2, r4
 80152de:	1b43      	subs	r3, r0, r5
 80152e0:	e78b      	b.n	80151fa <__ieee754_sqrt+0x66>
 80152e2:	4618      	mov	r0, r3
 80152e4:	e7f0      	b.n	80152c8 <__ieee754_sqrt+0x134>
 80152e6:	0052      	lsls	r2, r2, #1
 80152e8:	3301      	adds	r3, #1
 80152ea:	e7ef      	b.n	80152cc <__ieee754_sqrt+0x138>
 80152ec:	46a0      	mov	r8, r4
 80152ee:	e7bf      	b.n	8015270 <__ieee754_sqrt+0xdc>
 80152f0:	7ff00000 	.word	0x7ff00000

080152f4 <__ieee754_sqrtf>:
 80152f4:	eeb1 0ac0 	vsqrt.f32	s0, s0
 80152f8:	4770      	bx	lr
 80152fa:	0000      	movs	r0, r0
 80152fc:	0000      	movs	r0, r0
	...

08015300 <atan>:
 8015300:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015304:	ec55 4b10 	vmov	r4, r5, d0
 8015308:	4bc3      	ldr	r3, [pc, #780]	; (8015618 <atan+0x318>)
 801530a:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 801530e:	429e      	cmp	r6, r3
 8015310:	46ab      	mov	fp, r5
 8015312:	dd18      	ble.n	8015346 <atan+0x46>
 8015314:	4bc1      	ldr	r3, [pc, #772]	; (801561c <atan+0x31c>)
 8015316:	429e      	cmp	r6, r3
 8015318:	dc01      	bgt.n	801531e <atan+0x1e>
 801531a:	d109      	bne.n	8015330 <atan+0x30>
 801531c:	b144      	cbz	r4, 8015330 <atan+0x30>
 801531e:	4622      	mov	r2, r4
 8015320:	462b      	mov	r3, r5
 8015322:	4620      	mov	r0, r4
 8015324:	4629      	mov	r1, r5
 8015326:	f7ea ffb1 	bl	800028c <__adddf3>
 801532a:	4604      	mov	r4, r0
 801532c:	460d      	mov	r5, r1
 801532e:	e006      	b.n	801533e <atan+0x3e>
 8015330:	f1bb 0f00 	cmp.w	fp, #0
 8015334:	f340 8131 	ble.w	801559a <atan+0x29a>
 8015338:	a59b      	add	r5, pc, #620	; (adr r5, 80155a8 <atan+0x2a8>)
 801533a:	e9d5 4500 	ldrd	r4, r5, [r5]
 801533e:	ec45 4b10 	vmov	d0, r4, r5
 8015342:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015346:	4bb6      	ldr	r3, [pc, #728]	; (8015620 <atan+0x320>)
 8015348:	429e      	cmp	r6, r3
 801534a:	dc14      	bgt.n	8015376 <atan+0x76>
 801534c:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 8015350:	429e      	cmp	r6, r3
 8015352:	dc0d      	bgt.n	8015370 <atan+0x70>
 8015354:	a396      	add	r3, pc, #600	; (adr r3, 80155b0 <atan+0x2b0>)
 8015356:	e9d3 2300 	ldrd	r2, r3, [r3]
 801535a:	ee10 0a10 	vmov	r0, s0
 801535e:	4629      	mov	r1, r5
 8015360:	f7ea ff94 	bl	800028c <__adddf3>
 8015364:	2200      	movs	r2, #0
 8015366:	4baf      	ldr	r3, [pc, #700]	; (8015624 <atan+0x324>)
 8015368:	f7eb fbd6 	bl	8000b18 <__aeabi_dcmpgt>
 801536c:	2800      	cmp	r0, #0
 801536e:	d1e6      	bne.n	801533e <atan+0x3e>
 8015370:	f04f 3aff 	mov.w	sl, #4294967295
 8015374:	e02b      	b.n	80153ce <atan+0xce>
 8015376:	f000 f963 	bl	8015640 <fabs>
 801537a:	4bab      	ldr	r3, [pc, #684]	; (8015628 <atan+0x328>)
 801537c:	429e      	cmp	r6, r3
 801537e:	ec55 4b10 	vmov	r4, r5, d0
 8015382:	f300 80bf 	bgt.w	8015504 <atan+0x204>
 8015386:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 801538a:	429e      	cmp	r6, r3
 801538c:	f300 80a0 	bgt.w	80154d0 <atan+0x1d0>
 8015390:	ee10 2a10 	vmov	r2, s0
 8015394:	ee10 0a10 	vmov	r0, s0
 8015398:	462b      	mov	r3, r5
 801539a:	4629      	mov	r1, r5
 801539c:	f7ea ff76 	bl	800028c <__adddf3>
 80153a0:	2200      	movs	r2, #0
 80153a2:	4ba0      	ldr	r3, [pc, #640]	; (8015624 <atan+0x324>)
 80153a4:	f7ea ff70 	bl	8000288 <__aeabi_dsub>
 80153a8:	2200      	movs	r2, #0
 80153aa:	4606      	mov	r6, r0
 80153ac:	460f      	mov	r7, r1
 80153ae:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80153b2:	4620      	mov	r0, r4
 80153b4:	4629      	mov	r1, r5
 80153b6:	f7ea ff69 	bl	800028c <__adddf3>
 80153ba:	4602      	mov	r2, r0
 80153bc:	460b      	mov	r3, r1
 80153be:	4630      	mov	r0, r6
 80153c0:	4639      	mov	r1, r7
 80153c2:	f7eb fa43 	bl	800084c <__aeabi_ddiv>
 80153c6:	f04f 0a00 	mov.w	sl, #0
 80153ca:	4604      	mov	r4, r0
 80153cc:	460d      	mov	r5, r1
 80153ce:	4622      	mov	r2, r4
 80153d0:	462b      	mov	r3, r5
 80153d2:	4620      	mov	r0, r4
 80153d4:	4629      	mov	r1, r5
 80153d6:	f7eb f90f 	bl	80005f8 <__aeabi_dmul>
 80153da:	4602      	mov	r2, r0
 80153dc:	460b      	mov	r3, r1
 80153de:	4680      	mov	r8, r0
 80153e0:	4689      	mov	r9, r1
 80153e2:	f7eb f909 	bl	80005f8 <__aeabi_dmul>
 80153e6:	a374      	add	r3, pc, #464	; (adr r3, 80155b8 <atan+0x2b8>)
 80153e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80153ec:	4606      	mov	r6, r0
 80153ee:	460f      	mov	r7, r1
 80153f0:	f7eb f902 	bl	80005f8 <__aeabi_dmul>
 80153f4:	a372      	add	r3, pc, #456	; (adr r3, 80155c0 <atan+0x2c0>)
 80153f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80153fa:	f7ea ff47 	bl	800028c <__adddf3>
 80153fe:	4632      	mov	r2, r6
 8015400:	463b      	mov	r3, r7
 8015402:	f7eb f8f9 	bl	80005f8 <__aeabi_dmul>
 8015406:	a370      	add	r3, pc, #448	; (adr r3, 80155c8 <atan+0x2c8>)
 8015408:	e9d3 2300 	ldrd	r2, r3, [r3]
 801540c:	f7ea ff3e 	bl	800028c <__adddf3>
 8015410:	4632      	mov	r2, r6
 8015412:	463b      	mov	r3, r7
 8015414:	f7eb f8f0 	bl	80005f8 <__aeabi_dmul>
 8015418:	a36d      	add	r3, pc, #436	; (adr r3, 80155d0 <atan+0x2d0>)
 801541a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801541e:	f7ea ff35 	bl	800028c <__adddf3>
 8015422:	4632      	mov	r2, r6
 8015424:	463b      	mov	r3, r7
 8015426:	f7eb f8e7 	bl	80005f8 <__aeabi_dmul>
 801542a:	a36b      	add	r3, pc, #428	; (adr r3, 80155d8 <atan+0x2d8>)
 801542c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015430:	f7ea ff2c 	bl	800028c <__adddf3>
 8015434:	4632      	mov	r2, r6
 8015436:	463b      	mov	r3, r7
 8015438:	f7eb f8de 	bl	80005f8 <__aeabi_dmul>
 801543c:	a368      	add	r3, pc, #416	; (adr r3, 80155e0 <atan+0x2e0>)
 801543e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015442:	f7ea ff23 	bl	800028c <__adddf3>
 8015446:	4642      	mov	r2, r8
 8015448:	464b      	mov	r3, r9
 801544a:	f7eb f8d5 	bl	80005f8 <__aeabi_dmul>
 801544e:	a366      	add	r3, pc, #408	; (adr r3, 80155e8 <atan+0x2e8>)
 8015450:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015454:	4680      	mov	r8, r0
 8015456:	4689      	mov	r9, r1
 8015458:	4630      	mov	r0, r6
 801545a:	4639      	mov	r1, r7
 801545c:	f7eb f8cc 	bl	80005f8 <__aeabi_dmul>
 8015460:	a363      	add	r3, pc, #396	; (adr r3, 80155f0 <atan+0x2f0>)
 8015462:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015466:	f7ea ff0f 	bl	8000288 <__aeabi_dsub>
 801546a:	4632      	mov	r2, r6
 801546c:	463b      	mov	r3, r7
 801546e:	f7eb f8c3 	bl	80005f8 <__aeabi_dmul>
 8015472:	a361      	add	r3, pc, #388	; (adr r3, 80155f8 <atan+0x2f8>)
 8015474:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015478:	f7ea ff06 	bl	8000288 <__aeabi_dsub>
 801547c:	4632      	mov	r2, r6
 801547e:	463b      	mov	r3, r7
 8015480:	f7eb f8ba 	bl	80005f8 <__aeabi_dmul>
 8015484:	a35e      	add	r3, pc, #376	; (adr r3, 8015600 <atan+0x300>)
 8015486:	e9d3 2300 	ldrd	r2, r3, [r3]
 801548a:	f7ea fefd 	bl	8000288 <__aeabi_dsub>
 801548e:	4632      	mov	r2, r6
 8015490:	463b      	mov	r3, r7
 8015492:	f7eb f8b1 	bl	80005f8 <__aeabi_dmul>
 8015496:	a35c      	add	r3, pc, #368	; (adr r3, 8015608 <atan+0x308>)
 8015498:	e9d3 2300 	ldrd	r2, r3, [r3]
 801549c:	f7ea fef4 	bl	8000288 <__aeabi_dsub>
 80154a0:	4632      	mov	r2, r6
 80154a2:	463b      	mov	r3, r7
 80154a4:	f7eb f8a8 	bl	80005f8 <__aeabi_dmul>
 80154a8:	4602      	mov	r2, r0
 80154aa:	460b      	mov	r3, r1
 80154ac:	4640      	mov	r0, r8
 80154ae:	4649      	mov	r1, r9
 80154b0:	f7ea feec 	bl	800028c <__adddf3>
 80154b4:	4622      	mov	r2, r4
 80154b6:	462b      	mov	r3, r5
 80154b8:	f7eb f89e 	bl	80005f8 <__aeabi_dmul>
 80154bc:	f1ba 3fff 	cmp.w	sl, #4294967295
 80154c0:	4602      	mov	r2, r0
 80154c2:	460b      	mov	r3, r1
 80154c4:	d14b      	bne.n	801555e <atan+0x25e>
 80154c6:	4620      	mov	r0, r4
 80154c8:	4629      	mov	r1, r5
 80154ca:	f7ea fedd 	bl	8000288 <__aeabi_dsub>
 80154ce:	e72c      	b.n	801532a <atan+0x2a>
 80154d0:	ee10 0a10 	vmov	r0, s0
 80154d4:	2200      	movs	r2, #0
 80154d6:	4b53      	ldr	r3, [pc, #332]	; (8015624 <atan+0x324>)
 80154d8:	4629      	mov	r1, r5
 80154da:	f7ea fed5 	bl	8000288 <__aeabi_dsub>
 80154de:	2200      	movs	r2, #0
 80154e0:	4606      	mov	r6, r0
 80154e2:	460f      	mov	r7, r1
 80154e4:	4b4f      	ldr	r3, [pc, #316]	; (8015624 <atan+0x324>)
 80154e6:	4620      	mov	r0, r4
 80154e8:	4629      	mov	r1, r5
 80154ea:	f7ea fecf 	bl	800028c <__adddf3>
 80154ee:	4602      	mov	r2, r0
 80154f0:	460b      	mov	r3, r1
 80154f2:	4630      	mov	r0, r6
 80154f4:	4639      	mov	r1, r7
 80154f6:	f7eb f9a9 	bl	800084c <__aeabi_ddiv>
 80154fa:	f04f 0a01 	mov.w	sl, #1
 80154fe:	4604      	mov	r4, r0
 8015500:	460d      	mov	r5, r1
 8015502:	e764      	b.n	80153ce <atan+0xce>
 8015504:	4b49      	ldr	r3, [pc, #292]	; (801562c <atan+0x32c>)
 8015506:	429e      	cmp	r6, r3
 8015508:	dc1d      	bgt.n	8015546 <atan+0x246>
 801550a:	ee10 0a10 	vmov	r0, s0
 801550e:	2200      	movs	r2, #0
 8015510:	4b47      	ldr	r3, [pc, #284]	; (8015630 <atan+0x330>)
 8015512:	4629      	mov	r1, r5
 8015514:	f7ea feb8 	bl	8000288 <__aeabi_dsub>
 8015518:	2200      	movs	r2, #0
 801551a:	4606      	mov	r6, r0
 801551c:	460f      	mov	r7, r1
 801551e:	4b44      	ldr	r3, [pc, #272]	; (8015630 <atan+0x330>)
 8015520:	4620      	mov	r0, r4
 8015522:	4629      	mov	r1, r5
 8015524:	f7eb f868 	bl	80005f8 <__aeabi_dmul>
 8015528:	2200      	movs	r2, #0
 801552a:	4b3e      	ldr	r3, [pc, #248]	; (8015624 <atan+0x324>)
 801552c:	f7ea feae 	bl	800028c <__adddf3>
 8015530:	4602      	mov	r2, r0
 8015532:	460b      	mov	r3, r1
 8015534:	4630      	mov	r0, r6
 8015536:	4639      	mov	r1, r7
 8015538:	f7eb f988 	bl	800084c <__aeabi_ddiv>
 801553c:	f04f 0a02 	mov.w	sl, #2
 8015540:	4604      	mov	r4, r0
 8015542:	460d      	mov	r5, r1
 8015544:	e743      	b.n	80153ce <atan+0xce>
 8015546:	462b      	mov	r3, r5
 8015548:	ee10 2a10 	vmov	r2, s0
 801554c:	2000      	movs	r0, #0
 801554e:	4939      	ldr	r1, [pc, #228]	; (8015634 <atan+0x334>)
 8015550:	f7eb f97c 	bl	800084c <__aeabi_ddiv>
 8015554:	f04f 0a03 	mov.w	sl, #3
 8015558:	4604      	mov	r4, r0
 801555a:	460d      	mov	r5, r1
 801555c:	e737      	b.n	80153ce <atan+0xce>
 801555e:	4b36      	ldr	r3, [pc, #216]	; (8015638 <atan+0x338>)
 8015560:	4e36      	ldr	r6, [pc, #216]	; (801563c <atan+0x33c>)
 8015562:	ea4f 0aca 	mov.w	sl, sl, lsl #3
 8015566:	4456      	add	r6, sl
 8015568:	449a      	add	sl, r3
 801556a:	e9da 2300 	ldrd	r2, r3, [sl]
 801556e:	f7ea fe8b 	bl	8000288 <__aeabi_dsub>
 8015572:	4622      	mov	r2, r4
 8015574:	462b      	mov	r3, r5
 8015576:	f7ea fe87 	bl	8000288 <__aeabi_dsub>
 801557a:	4602      	mov	r2, r0
 801557c:	460b      	mov	r3, r1
 801557e:	e9d6 0100 	ldrd	r0, r1, [r6]
 8015582:	f7ea fe81 	bl	8000288 <__aeabi_dsub>
 8015586:	f1bb 0f00 	cmp.w	fp, #0
 801558a:	4604      	mov	r4, r0
 801558c:	460d      	mov	r5, r1
 801558e:	f6bf aed6 	bge.w	801533e <atan+0x3e>
 8015592:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8015596:	461d      	mov	r5, r3
 8015598:	e6d1      	b.n	801533e <atan+0x3e>
 801559a:	a51d      	add	r5, pc, #116	; (adr r5, 8015610 <atan+0x310>)
 801559c:	e9d5 4500 	ldrd	r4, r5, [r5]
 80155a0:	e6cd      	b.n	801533e <atan+0x3e>
 80155a2:	bf00      	nop
 80155a4:	f3af 8000 	nop.w
 80155a8:	54442d18 	.word	0x54442d18
 80155ac:	3ff921fb 	.word	0x3ff921fb
 80155b0:	8800759c 	.word	0x8800759c
 80155b4:	7e37e43c 	.word	0x7e37e43c
 80155b8:	e322da11 	.word	0xe322da11
 80155bc:	3f90ad3a 	.word	0x3f90ad3a
 80155c0:	24760deb 	.word	0x24760deb
 80155c4:	3fa97b4b 	.word	0x3fa97b4b
 80155c8:	a0d03d51 	.word	0xa0d03d51
 80155cc:	3fb10d66 	.word	0x3fb10d66
 80155d0:	c54c206e 	.word	0xc54c206e
 80155d4:	3fb745cd 	.word	0x3fb745cd
 80155d8:	920083ff 	.word	0x920083ff
 80155dc:	3fc24924 	.word	0x3fc24924
 80155e0:	5555550d 	.word	0x5555550d
 80155e4:	3fd55555 	.word	0x3fd55555
 80155e8:	2c6a6c2f 	.word	0x2c6a6c2f
 80155ec:	bfa2b444 	.word	0xbfa2b444
 80155f0:	52defd9a 	.word	0x52defd9a
 80155f4:	3fadde2d 	.word	0x3fadde2d
 80155f8:	af749a6d 	.word	0xaf749a6d
 80155fc:	3fb3b0f2 	.word	0x3fb3b0f2
 8015600:	fe231671 	.word	0xfe231671
 8015604:	3fbc71c6 	.word	0x3fbc71c6
 8015608:	9998ebc4 	.word	0x9998ebc4
 801560c:	3fc99999 	.word	0x3fc99999
 8015610:	54442d18 	.word	0x54442d18
 8015614:	bff921fb 	.word	0xbff921fb
 8015618:	440fffff 	.word	0x440fffff
 801561c:	7ff00000 	.word	0x7ff00000
 8015620:	3fdbffff 	.word	0x3fdbffff
 8015624:	3ff00000 	.word	0x3ff00000
 8015628:	3ff2ffff 	.word	0x3ff2ffff
 801562c:	40037fff 	.word	0x40037fff
 8015630:	3ff80000 	.word	0x3ff80000
 8015634:	bff00000 	.word	0xbff00000
 8015638:	08016020 	.word	0x08016020
 801563c:	08016000 	.word	0x08016000

08015640 <fabs>:
 8015640:	ec51 0b10 	vmov	r0, r1, d0
 8015644:	ee10 2a10 	vmov	r2, s0
 8015648:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801564c:	ec43 2b10 	vmov	d0, r2, r3
 8015650:	4770      	bx	lr

08015652 <finite>:
 8015652:	ee10 3a90 	vmov	r3, s1
 8015656:	f043 4000 	orr.w	r0, r3, #2147483648	; 0x80000000
 801565a:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 801565e:	0fc0      	lsrs	r0, r0, #31
 8015660:	4770      	bx	lr

08015662 <matherr>:
 8015662:	2000      	movs	r0, #0
 8015664:	4770      	bx	lr
	...

08015668 <nan>:
 8015668:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8015670 <nan+0x8>
 801566c:	4770      	bx	lr
 801566e:	bf00      	nop
 8015670:	00000000 	.word	0x00000000
 8015674:	7ff80000 	.word	0x7ff80000

08015678 <rint>:
 8015678:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801567a:	ec51 0b10 	vmov	r0, r1, d0
 801567e:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8015682:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 8015686:	2e13      	cmp	r6, #19
 8015688:	460b      	mov	r3, r1
 801568a:	ee10 4a10 	vmov	r4, s0
 801568e:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 8015692:	dc56      	bgt.n	8015742 <rint+0xca>
 8015694:	2e00      	cmp	r6, #0
 8015696:	da2b      	bge.n	80156f0 <rint+0x78>
 8015698:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 801569c:	4302      	orrs	r2, r0
 801569e:	d023      	beq.n	80156e8 <rint+0x70>
 80156a0:	f3c1 0213 	ubfx	r2, r1, #0, #20
 80156a4:	4302      	orrs	r2, r0
 80156a6:	4254      	negs	r4, r2
 80156a8:	4314      	orrs	r4, r2
 80156aa:	0c4b      	lsrs	r3, r1, #17
 80156ac:	0b24      	lsrs	r4, r4, #12
 80156ae:	045b      	lsls	r3, r3, #17
 80156b0:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 80156b4:	ea44 0103 	orr.w	r1, r4, r3
 80156b8:	460b      	mov	r3, r1
 80156ba:	492f      	ldr	r1, [pc, #188]	; (8015778 <rint+0x100>)
 80156bc:	eb01 01c5 	add.w	r1, r1, r5, lsl #3
 80156c0:	e9d1 6700 	ldrd	r6, r7, [r1]
 80156c4:	4602      	mov	r2, r0
 80156c6:	4639      	mov	r1, r7
 80156c8:	4630      	mov	r0, r6
 80156ca:	f7ea fddf 	bl	800028c <__adddf3>
 80156ce:	e9cd 0100 	strd	r0, r1, [sp]
 80156d2:	463b      	mov	r3, r7
 80156d4:	4632      	mov	r2, r6
 80156d6:	e9dd 0100 	ldrd	r0, r1, [sp]
 80156da:	f7ea fdd5 	bl	8000288 <__aeabi_dsub>
 80156de:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80156e2:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 80156e6:	4639      	mov	r1, r7
 80156e8:	ec41 0b10 	vmov	d0, r0, r1
 80156ec:	b003      	add	sp, #12
 80156ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80156f0:	4a22      	ldr	r2, [pc, #136]	; (801577c <rint+0x104>)
 80156f2:	4132      	asrs	r2, r6
 80156f4:	ea01 0702 	and.w	r7, r1, r2
 80156f8:	4307      	orrs	r7, r0
 80156fa:	d0f5      	beq.n	80156e8 <rint+0x70>
 80156fc:	0852      	lsrs	r2, r2, #1
 80156fe:	4011      	ands	r1, r2
 8015700:	430c      	orrs	r4, r1
 8015702:	d00b      	beq.n	801571c <rint+0xa4>
 8015704:	ea23 0202 	bic.w	r2, r3, r2
 8015708:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 801570c:	2e13      	cmp	r6, #19
 801570e:	fa43 f306 	asr.w	r3, r3, r6
 8015712:	bf0c      	ite	eq
 8015714:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 8015718:	2400      	movne	r4, #0
 801571a:	4313      	orrs	r3, r2
 801571c:	4916      	ldr	r1, [pc, #88]	; (8015778 <rint+0x100>)
 801571e:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 8015722:	4622      	mov	r2, r4
 8015724:	e9d5 4500 	ldrd	r4, r5, [r5]
 8015728:	4620      	mov	r0, r4
 801572a:	4629      	mov	r1, r5
 801572c:	f7ea fdae 	bl	800028c <__adddf3>
 8015730:	e9cd 0100 	strd	r0, r1, [sp]
 8015734:	4622      	mov	r2, r4
 8015736:	462b      	mov	r3, r5
 8015738:	e9dd 0100 	ldrd	r0, r1, [sp]
 801573c:	f7ea fda4 	bl	8000288 <__aeabi_dsub>
 8015740:	e7d2      	b.n	80156e8 <rint+0x70>
 8015742:	2e33      	cmp	r6, #51	; 0x33
 8015744:	dd07      	ble.n	8015756 <rint+0xde>
 8015746:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 801574a:	d1cd      	bne.n	80156e8 <rint+0x70>
 801574c:	ee10 2a10 	vmov	r2, s0
 8015750:	f7ea fd9c 	bl	800028c <__adddf3>
 8015754:	e7c8      	b.n	80156e8 <rint+0x70>
 8015756:	f2a2 4613 	subw	r6, r2, #1043	; 0x413
 801575a:	f04f 32ff 	mov.w	r2, #4294967295
 801575e:	40f2      	lsrs	r2, r6
 8015760:	4210      	tst	r0, r2
 8015762:	d0c1      	beq.n	80156e8 <rint+0x70>
 8015764:	0852      	lsrs	r2, r2, #1
 8015766:	4210      	tst	r0, r2
 8015768:	bf1f      	itttt	ne
 801576a:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 801576e:	ea20 0202 	bicne.w	r2, r0, r2
 8015772:	4134      	asrne	r4, r6
 8015774:	4314      	orrne	r4, r2
 8015776:	e7d1      	b.n	801571c <rint+0xa4>
 8015778:	08016040 	.word	0x08016040
 801577c:	000fffff 	.word	0x000fffff

08015780 <scalbn>:
 8015780:	b570      	push	{r4, r5, r6, lr}
 8015782:	ec55 4b10 	vmov	r4, r5, d0
 8015786:	f3c5 520a 	ubfx	r2, r5, #20, #11
 801578a:	4606      	mov	r6, r0
 801578c:	462b      	mov	r3, r5
 801578e:	b9aa      	cbnz	r2, 80157bc <scalbn+0x3c>
 8015790:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8015794:	4323      	orrs	r3, r4
 8015796:	d03b      	beq.n	8015810 <scalbn+0x90>
 8015798:	4b31      	ldr	r3, [pc, #196]	; (8015860 <scalbn+0xe0>)
 801579a:	4629      	mov	r1, r5
 801579c:	2200      	movs	r2, #0
 801579e:	ee10 0a10 	vmov	r0, s0
 80157a2:	f7ea ff29 	bl	80005f8 <__aeabi_dmul>
 80157a6:	4b2f      	ldr	r3, [pc, #188]	; (8015864 <scalbn+0xe4>)
 80157a8:	429e      	cmp	r6, r3
 80157aa:	4604      	mov	r4, r0
 80157ac:	460d      	mov	r5, r1
 80157ae:	da12      	bge.n	80157d6 <scalbn+0x56>
 80157b0:	a327      	add	r3, pc, #156	; (adr r3, 8015850 <scalbn+0xd0>)
 80157b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80157b6:	f7ea ff1f 	bl	80005f8 <__aeabi_dmul>
 80157ba:	e009      	b.n	80157d0 <scalbn+0x50>
 80157bc:	f240 71ff 	movw	r1, #2047	; 0x7ff
 80157c0:	428a      	cmp	r2, r1
 80157c2:	d10c      	bne.n	80157de <scalbn+0x5e>
 80157c4:	ee10 2a10 	vmov	r2, s0
 80157c8:	4620      	mov	r0, r4
 80157ca:	4629      	mov	r1, r5
 80157cc:	f7ea fd5e 	bl	800028c <__adddf3>
 80157d0:	4604      	mov	r4, r0
 80157d2:	460d      	mov	r5, r1
 80157d4:	e01c      	b.n	8015810 <scalbn+0x90>
 80157d6:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80157da:	460b      	mov	r3, r1
 80157dc:	3a36      	subs	r2, #54	; 0x36
 80157de:	4432      	add	r2, r6
 80157e0:	f240 71fe 	movw	r1, #2046	; 0x7fe
 80157e4:	428a      	cmp	r2, r1
 80157e6:	dd0b      	ble.n	8015800 <scalbn+0x80>
 80157e8:	ec45 4b11 	vmov	d1, r4, r5
 80157ec:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 8015858 <scalbn+0xd8>
 80157f0:	f000 f83c 	bl	801586c <copysign>
 80157f4:	a318      	add	r3, pc, #96	; (adr r3, 8015858 <scalbn+0xd8>)
 80157f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80157fa:	ec51 0b10 	vmov	r0, r1, d0
 80157fe:	e7da      	b.n	80157b6 <scalbn+0x36>
 8015800:	2a00      	cmp	r2, #0
 8015802:	dd08      	ble.n	8015816 <scalbn+0x96>
 8015804:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8015808:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801580c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8015810:	ec45 4b10 	vmov	d0, r4, r5
 8015814:	bd70      	pop	{r4, r5, r6, pc}
 8015816:	f112 0f35 	cmn.w	r2, #53	; 0x35
 801581a:	da0d      	bge.n	8015838 <scalbn+0xb8>
 801581c:	f24c 3350 	movw	r3, #50000	; 0xc350
 8015820:	429e      	cmp	r6, r3
 8015822:	ec45 4b11 	vmov	d1, r4, r5
 8015826:	dce1      	bgt.n	80157ec <scalbn+0x6c>
 8015828:	ed9f 0b09 	vldr	d0, [pc, #36]	; 8015850 <scalbn+0xd0>
 801582c:	f000 f81e 	bl	801586c <copysign>
 8015830:	a307      	add	r3, pc, #28	; (adr r3, 8015850 <scalbn+0xd0>)
 8015832:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015836:	e7e0      	b.n	80157fa <scalbn+0x7a>
 8015838:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801583c:	3236      	adds	r2, #54	; 0x36
 801583e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8015842:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8015846:	4620      	mov	r0, r4
 8015848:	4629      	mov	r1, r5
 801584a:	2200      	movs	r2, #0
 801584c:	4b06      	ldr	r3, [pc, #24]	; (8015868 <scalbn+0xe8>)
 801584e:	e7b2      	b.n	80157b6 <scalbn+0x36>
 8015850:	c2f8f359 	.word	0xc2f8f359
 8015854:	01a56e1f 	.word	0x01a56e1f
 8015858:	8800759c 	.word	0x8800759c
 801585c:	7e37e43c 	.word	0x7e37e43c
 8015860:	43500000 	.word	0x43500000
 8015864:	ffff3cb0 	.word	0xffff3cb0
 8015868:	3c900000 	.word	0x3c900000

0801586c <copysign>:
 801586c:	ec51 0b10 	vmov	r0, r1, d0
 8015870:	ee11 0a90 	vmov	r0, s3
 8015874:	ee10 2a10 	vmov	r2, s0
 8015878:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 801587c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8015880:	ea41 0300 	orr.w	r3, r1, r0
 8015884:	ec43 2b10 	vmov	d0, r2, r3
 8015888:	4770      	bx	lr
	...

0801588c <__errno>:
 801588c:	4b01      	ldr	r3, [pc, #4]	; (8015894 <__errno+0x8>)
 801588e:	6818      	ldr	r0, [r3, #0]
 8015890:	4770      	bx	lr
 8015892:	bf00      	nop
 8015894:	20000180 	.word	0x20000180

08015898 <_sbrk>:
 8015898:	4b04      	ldr	r3, [pc, #16]	; (80158ac <_sbrk+0x14>)
 801589a:	6819      	ldr	r1, [r3, #0]
 801589c:	4602      	mov	r2, r0
 801589e:	b909      	cbnz	r1, 80158a4 <_sbrk+0xc>
 80158a0:	4903      	ldr	r1, [pc, #12]	; (80158b0 <_sbrk+0x18>)
 80158a2:	6019      	str	r1, [r3, #0]
 80158a4:	6818      	ldr	r0, [r3, #0]
 80158a6:	4402      	add	r2, r0
 80158a8:	601a      	str	r2, [r3, #0]
 80158aa:	4770      	bx	lr
 80158ac:	20000794 	.word	0x20000794
 80158b0:	20004648 	.word	0x20004648

080158b4 <_init>:
 80158b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80158b6:	bf00      	nop
 80158b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80158ba:	bc08      	pop	{r3}
 80158bc:	469e      	mov	lr, r3
 80158be:	4770      	bx	lr

080158c0 <_fini>:
 80158c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80158c2:	bf00      	nop
 80158c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80158c6:	bc08      	pop	{r3}
 80158c8:	469e      	mov	lr, r3
 80158ca:	4770      	bx	lr
