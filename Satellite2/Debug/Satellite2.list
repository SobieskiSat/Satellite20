
Satellite2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000150a8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000ae8  08015238  08015238  00025238  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08015d20  08015d20  00030350  2**0
                  CONTENTS
  4 .ARM          00000008  08015d20  08015d20  00025d20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08015d28  08015d28  00030350  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08015d28  08015d28  00025d28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08015d2c  08015d2c  00025d2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000350  20000000  08015d30  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000475c  20000350  08016080  00030350  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004aac  08016080  00034aac  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030350  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002a5bc  00000000  00000000  00030380  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000050fa  00000000  00000000  0005a93c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001fb0  00000000  00000000  0005fa38  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001d88  00000000  00000000  000619e8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0000783f  00000000  00000000  00063770  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001e36f  00000000  00000000  0006afaf  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d5bc1  00000000  00000000  0008931e  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0015eedf  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009624  00000000  00000000  0015ef5c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000350 	.word	0x20000350
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08015220 	.word	0x08015220

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000354 	.word	0x20000354
 80001cc:	08015220 	.word	0x08015220

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003be:	f1a4 0401 	sub.w	r4, r4, #1
 80003c2:	d1e9      	bne.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b972 	b.w	8000f84 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9e08      	ldr	r6, [sp, #32]
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	4688      	mov	r8, r1
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d14b      	bne.n	8000d5e <__udivmoddi4+0xa6>
 8000cc6:	428a      	cmp	r2, r1
 8000cc8:	4615      	mov	r5, r2
 8000cca:	d967      	bls.n	8000d9c <__udivmoddi4+0xe4>
 8000ccc:	fab2 f282 	clz	r2, r2
 8000cd0:	b14a      	cbz	r2, 8000ce6 <__udivmoddi4+0x2e>
 8000cd2:	f1c2 0720 	rsb	r7, r2, #32
 8000cd6:	fa01 f302 	lsl.w	r3, r1, r2
 8000cda:	fa20 f707 	lsr.w	r7, r0, r7
 8000cde:	4095      	lsls	r5, r2
 8000ce0:	ea47 0803 	orr.w	r8, r7, r3
 8000ce4:	4094      	lsls	r4, r2
 8000ce6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000cea:	0c23      	lsrs	r3, r4, #16
 8000cec:	fbb8 f7fe 	udiv	r7, r8, lr
 8000cf0:	fa1f fc85 	uxth.w	ip, r5
 8000cf4:	fb0e 8817 	mls	r8, lr, r7, r8
 8000cf8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cfc:	fb07 f10c 	mul.w	r1, r7, ip
 8000d00:	4299      	cmp	r1, r3
 8000d02:	d909      	bls.n	8000d18 <__udivmoddi4+0x60>
 8000d04:	18eb      	adds	r3, r5, r3
 8000d06:	f107 30ff 	add.w	r0, r7, #4294967295
 8000d0a:	f080 811b 	bcs.w	8000f44 <__udivmoddi4+0x28c>
 8000d0e:	4299      	cmp	r1, r3
 8000d10:	f240 8118 	bls.w	8000f44 <__udivmoddi4+0x28c>
 8000d14:	3f02      	subs	r7, #2
 8000d16:	442b      	add	r3, r5
 8000d18:	1a5b      	subs	r3, r3, r1
 8000d1a:	b2a4      	uxth	r4, r4
 8000d1c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d20:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d24:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d28:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d2c:	45a4      	cmp	ip, r4
 8000d2e:	d909      	bls.n	8000d44 <__udivmoddi4+0x8c>
 8000d30:	192c      	adds	r4, r5, r4
 8000d32:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d36:	f080 8107 	bcs.w	8000f48 <__udivmoddi4+0x290>
 8000d3a:	45a4      	cmp	ip, r4
 8000d3c:	f240 8104 	bls.w	8000f48 <__udivmoddi4+0x290>
 8000d40:	3802      	subs	r0, #2
 8000d42:	442c      	add	r4, r5
 8000d44:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d48:	eba4 040c 	sub.w	r4, r4, ip
 8000d4c:	2700      	movs	r7, #0
 8000d4e:	b11e      	cbz	r6, 8000d58 <__udivmoddi4+0xa0>
 8000d50:	40d4      	lsrs	r4, r2
 8000d52:	2300      	movs	r3, #0
 8000d54:	e9c6 4300 	strd	r4, r3, [r6]
 8000d58:	4639      	mov	r1, r7
 8000d5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d5e:	428b      	cmp	r3, r1
 8000d60:	d909      	bls.n	8000d76 <__udivmoddi4+0xbe>
 8000d62:	2e00      	cmp	r6, #0
 8000d64:	f000 80eb 	beq.w	8000f3e <__udivmoddi4+0x286>
 8000d68:	2700      	movs	r7, #0
 8000d6a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d6e:	4638      	mov	r0, r7
 8000d70:	4639      	mov	r1, r7
 8000d72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d76:	fab3 f783 	clz	r7, r3
 8000d7a:	2f00      	cmp	r7, #0
 8000d7c:	d147      	bne.n	8000e0e <__udivmoddi4+0x156>
 8000d7e:	428b      	cmp	r3, r1
 8000d80:	d302      	bcc.n	8000d88 <__udivmoddi4+0xd0>
 8000d82:	4282      	cmp	r2, r0
 8000d84:	f200 80fa 	bhi.w	8000f7c <__udivmoddi4+0x2c4>
 8000d88:	1a84      	subs	r4, r0, r2
 8000d8a:	eb61 0303 	sbc.w	r3, r1, r3
 8000d8e:	2001      	movs	r0, #1
 8000d90:	4698      	mov	r8, r3
 8000d92:	2e00      	cmp	r6, #0
 8000d94:	d0e0      	beq.n	8000d58 <__udivmoddi4+0xa0>
 8000d96:	e9c6 4800 	strd	r4, r8, [r6]
 8000d9a:	e7dd      	b.n	8000d58 <__udivmoddi4+0xa0>
 8000d9c:	b902      	cbnz	r2, 8000da0 <__udivmoddi4+0xe8>
 8000d9e:	deff      	udf	#255	; 0xff
 8000da0:	fab2 f282 	clz	r2, r2
 8000da4:	2a00      	cmp	r2, #0
 8000da6:	f040 808f 	bne.w	8000ec8 <__udivmoddi4+0x210>
 8000daa:	1b49      	subs	r1, r1, r5
 8000dac:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000db0:	fa1f f885 	uxth.w	r8, r5
 8000db4:	2701      	movs	r7, #1
 8000db6:	fbb1 fcfe 	udiv	ip, r1, lr
 8000dba:	0c23      	lsrs	r3, r4, #16
 8000dbc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000dc0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dc4:	fb08 f10c 	mul.w	r1, r8, ip
 8000dc8:	4299      	cmp	r1, r3
 8000dca:	d907      	bls.n	8000ddc <__udivmoddi4+0x124>
 8000dcc:	18eb      	adds	r3, r5, r3
 8000dce:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000dd2:	d202      	bcs.n	8000dda <__udivmoddi4+0x122>
 8000dd4:	4299      	cmp	r1, r3
 8000dd6:	f200 80cd 	bhi.w	8000f74 <__udivmoddi4+0x2bc>
 8000dda:	4684      	mov	ip, r0
 8000ddc:	1a59      	subs	r1, r3, r1
 8000dde:	b2a3      	uxth	r3, r4
 8000de0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000de4:	fb0e 1410 	mls	r4, lr, r0, r1
 8000de8:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000dec:	fb08 f800 	mul.w	r8, r8, r0
 8000df0:	45a0      	cmp	r8, r4
 8000df2:	d907      	bls.n	8000e04 <__udivmoddi4+0x14c>
 8000df4:	192c      	adds	r4, r5, r4
 8000df6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dfa:	d202      	bcs.n	8000e02 <__udivmoddi4+0x14a>
 8000dfc:	45a0      	cmp	r8, r4
 8000dfe:	f200 80b6 	bhi.w	8000f6e <__udivmoddi4+0x2b6>
 8000e02:	4618      	mov	r0, r3
 8000e04:	eba4 0408 	sub.w	r4, r4, r8
 8000e08:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e0c:	e79f      	b.n	8000d4e <__udivmoddi4+0x96>
 8000e0e:	f1c7 0c20 	rsb	ip, r7, #32
 8000e12:	40bb      	lsls	r3, r7
 8000e14:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000e18:	ea4e 0e03 	orr.w	lr, lr, r3
 8000e1c:	fa01 f407 	lsl.w	r4, r1, r7
 8000e20:	fa20 f50c 	lsr.w	r5, r0, ip
 8000e24:	fa21 f30c 	lsr.w	r3, r1, ip
 8000e28:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000e2c:	4325      	orrs	r5, r4
 8000e2e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000e32:	0c2c      	lsrs	r4, r5, #16
 8000e34:	fb08 3319 	mls	r3, r8, r9, r3
 8000e38:	fa1f fa8e 	uxth.w	sl, lr
 8000e3c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e40:	fb09 f40a 	mul.w	r4, r9, sl
 8000e44:	429c      	cmp	r4, r3
 8000e46:	fa02 f207 	lsl.w	r2, r2, r7
 8000e4a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e4e:	d90b      	bls.n	8000e68 <__udivmoddi4+0x1b0>
 8000e50:	eb1e 0303 	adds.w	r3, lr, r3
 8000e54:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e58:	f080 8087 	bcs.w	8000f6a <__udivmoddi4+0x2b2>
 8000e5c:	429c      	cmp	r4, r3
 8000e5e:	f240 8084 	bls.w	8000f6a <__udivmoddi4+0x2b2>
 8000e62:	f1a9 0902 	sub.w	r9, r9, #2
 8000e66:	4473      	add	r3, lr
 8000e68:	1b1b      	subs	r3, r3, r4
 8000e6a:	b2ad      	uxth	r5, r5
 8000e6c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e70:	fb08 3310 	mls	r3, r8, r0, r3
 8000e74:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000e78:	fb00 fa0a 	mul.w	sl, r0, sl
 8000e7c:	45a2      	cmp	sl, r4
 8000e7e:	d908      	bls.n	8000e92 <__udivmoddi4+0x1da>
 8000e80:	eb1e 0404 	adds.w	r4, lr, r4
 8000e84:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e88:	d26b      	bcs.n	8000f62 <__udivmoddi4+0x2aa>
 8000e8a:	45a2      	cmp	sl, r4
 8000e8c:	d969      	bls.n	8000f62 <__udivmoddi4+0x2aa>
 8000e8e:	3802      	subs	r0, #2
 8000e90:	4474      	add	r4, lr
 8000e92:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e96:	fba0 8902 	umull	r8, r9, r0, r2
 8000e9a:	eba4 040a 	sub.w	r4, r4, sl
 8000e9e:	454c      	cmp	r4, r9
 8000ea0:	46c2      	mov	sl, r8
 8000ea2:	464b      	mov	r3, r9
 8000ea4:	d354      	bcc.n	8000f50 <__udivmoddi4+0x298>
 8000ea6:	d051      	beq.n	8000f4c <__udivmoddi4+0x294>
 8000ea8:	2e00      	cmp	r6, #0
 8000eaa:	d069      	beq.n	8000f80 <__udivmoddi4+0x2c8>
 8000eac:	ebb1 050a 	subs.w	r5, r1, sl
 8000eb0:	eb64 0403 	sbc.w	r4, r4, r3
 8000eb4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000eb8:	40fd      	lsrs	r5, r7
 8000eba:	40fc      	lsrs	r4, r7
 8000ebc:	ea4c 0505 	orr.w	r5, ip, r5
 8000ec0:	e9c6 5400 	strd	r5, r4, [r6]
 8000ec4:	2700      	movs	r7, #0
 8000ec6:	e747      	b.n	8000d58 <__udivmoddi4+0xa0>
 8000ec8:	f1c2 0320 	rsb	r3, r2, #32
 8000ecc:	fa20 f703 	lsr.w	r7, r0, r3
 8000ed0:	4095      	lsls	r5, r2
 8000ed2:	fa01 f002 	lsl.w	r0, r1, r2
 8000ed6:	fa21 f303 	lsr.w	r3, r1, r3
 8000eda:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000ede:	4338      	orrs	r0, r7
 8000ee0:	0c01      	lsrs	r1, r0, #16
 8000ee2:	fbb3 f7fe 	udiv	r7, r3, lr
 8000ee6:	fa1f f885 	uxth.w	r8, r5
 8000eea:	fb0e 3317 	mls	r3, lr, r7, r3
 8000eee:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ef2:	fb07 f308 	mul.w	r3, r7, r8
 8000ef6:	428b      	cmp	r3, r1
 8000ef8:	fa04 f402 	lsl.w	r4, r4, r2
 8000efc:	d907      	bls.n	8000f0e <__udivmoddi4+0x256>
 8000efe:	1869      	adds	r1, r5, r1
 8000f00:	f107 3cff 	add.w	ip, r7, #4294967295
 8000f04:	d22f      	bcs.n	8000f66 <__udivmoddi4+0x2ae>
 8000f06:	428b      	cmp	r3, r1
 8000f08:	d92d      	bls.n	8000f66 <__udivmoddi4+0x2ae>
 8000f0a:	3f02      	subs	r7, #2
 8000f0c:	4429      	add	r1, r5
 8000f0e:	1acb      	subs	r3, r1, r3
 8000f10:	b281      	uxth	r1, r0
 8000f12:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f16:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f1a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f1e:	fb00 f308 	mul.w	r3, r0, r8
 8000f22:	428b      	cmp	r3, r1
 8000f24:	d907      	bls.n	8000f36 <__udivmoddi4+0x27e>
 8000f26:	1869      	adds	r1, r5, r1
 8000f28:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f2c:	d217      	bcs.n	8000f5e <__udivmoddi4+0x2a6>
 8000f2e:	428b      	cmp	r3, r1
 8000f30:	d915      	bls.n	8000f5e <__udivmoddi4+0x2a6>
 8000f32:	3802      	subs	r0, #2
 8000f34:	4429      	add	r1, r5
 8000f36:	1ac9      	subs	r1, r1, r3
 8000f38:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000f3c:	e73b      	b.n	8000db6 <__udivmoddi4+0xfe>
 8000f3e:	4637      	mov	r7, r6
 8000f40:	4630      	mov	r0, r6
 8000f42:	e709      	b.n	8000d58 <__udivmoddi4+0xa0>
 8000f44:	4607      	mov	r7, r0
 8000f46:	e6e7      	b.n	8000d18 <__udivmoddi4+0x60>
 8000f48:	4618      	mov	r0, r3
 8000f4a:	e6fb      	b.n	8000d44 <__udivmoddi4+0x8c>
 8000f4c:	4541      	cmp	r1, r8
 8000f4e:	d2ab      	bcs.n	8000ea8 <__udivmoddi4+0x1f0>
 8000f50:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f54:	eb69 020e 	sbc.w	r2, r9, lr
 8000f58:	3801      	subs	r0, #1
 8000f5a:	4613      	mov	r3, r2
 8000f5c:	e7a4      	b.n	8000ea8 <__udivmoddi4+0x1f0>
 8000f5e:	4660      	mov	r0, ip
 8000f60:	e7e9      	b.n	8000f36 <__udivmoddi4+0x27e>
 8000f62:	4618      	mov	r0, r3
 8000f64:	e795      	b.n	8000e92 <__udivmoddi4+0x1da>
 8000f66:	4667      	mov	r7, ip
 8000f68:	e7d1      	b.n	8000f0e <__udivmoddi4+0x256>
 8000f6a:	4681      	mov	r9, r0
 8000f6c:	e77c      	b.n	8000e68 <__udivmoddi4+0x1b0>
 8000f6e:	3802      	subs	r0, #2
 8000f70:	442c      	add	r4, r5
 8000f72:	e747      	b.n	8000e04 <__udivmoddi4+0x14c>
 8000f74:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f78:	442b      	add	r3, r5
 8000f7a:	e72f      	b.n	8000ddc <__udivmoddi4+0x124>
 8000f7c:	4638      	mov	r0, r7
 8000f7e:	e708      	b.n	8000d92 <__udivmoddi4+0xda>
 8000f80:	4637      	mov	r7, r6
 8000f82:	e6e9      	b.n	8000d58 <__udivmoddi4+0xa0>

08000f84 <__aeabi_idiv0>:
 8000f84:	4770      	bx	lr
 8000f86:	bf00      	nop

08000f88 <MPU_writeByte>:

//===================================================================================================================
//====== Set of useful function to access acceleratio, gyroscope, and temperature data
//===================================================================================================================
void MPU_writeByte(uint8_t address, uint8_t subAddress, uint8_t data)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b086      	sub	sp, #24
 8000f8c:	af04      	add	r7, sp, #16
 8000f8e:	4603      	mov	r3, r0
 8000f90:	71fb      	strb	r3, [r7, #7]
 8000f92:	460b      	mov	r3, r1
 8000f94:	71bb      	strb	r3, [r7, #6]
 8000f96:	4613      	mov	r3, r2
 8000f98:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Mem_Write(Get_I2C1_Instance(), address, subAddress, 1, &data, 1, 5000);
 8000f9a:	f003 fb8d 	bl	80046b8 <Get_I2C1_Instance>
 8000f9e:	79fb      	ldrb	r3, [r7, #7]
 8000fa0:	b299      	uxth	r1, r3
 8000fa2:	79bb      	ldrb	r3, [r7, #6]
 8000fa4:	b29a      	uxth	r2, r3
 8000fa6:	f241 3388 	movw	r3, #5000	; 0x1388
 8000faa:	9302      	str	r3, [sp, #8]
 8000fac:	2301      	movs	r3, #1
 8000fae:	9301      	str	r3, [sp, #4]
 8000fb0:	1d7b      	adds	r3, r7, #5
 8000fb2:	9300      	str	r3, [sp, #0]
 8000fb4:	2301      	movs	r3, #1
 8000fb6:	f005 f813 	bl	8005fe0 <HAL_I2C_Mem_Write>
	/*print("Write:");
	print_int(data);
	println("");*/
	while(HAL_I2C_GetState(Get_I2C1_Instance()) != HAL_I2C_STATE_READY);
 8000fba:	bf00      	nop
 8000fbc:	f003 fb7c 	bl	80046b8 <Get_I2C1_Instance>
 8000fc0:	4603      	mov	r3, r0
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	f005 fb2c 	bl	8006620 <HAL_I2C_GetState>
 8000fc8:	4603      	mov	r3, r0
 8000fca:	2b20      	cmp	r3, #32
 8000fcc:	d1f6      	bne.n	8000fbc <MPU_writeByte+0x34>
	//i2c.write(address, data_write, 2, 0);
}
 8000fce:	bf00      	nop
 8000fd0:	3708      	adds	r7, #8
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	bd80      	pop	{r7, pc}

08000fd6 <MPU_readByte>:
char MPU_readByte(uint8_t address, uint8_t subAddress)
{
 8000fd6:	b580      	push	{r7, lr}
 8000fd8:	b088      	sub	sp, #32
 8000fda:	af04      	add	r7, sp, #16
 8000fdc:	4603      	mov	r3, r0
 8000fde:	460a      	mov	r2, r1
 8000fe0:	71fb      	strb	r3, [r7, #7]
 8000fe2:	4613      	mov	r3, r2
 8000fe4:	71bb      	strb	r3, [r7, #6]
	uint8_t data[1]; // `data` will store the register data


	//i2c.write(address, data_write, 1, 1); // no stop
	HAL_I2C_Mem_Read(Get_I2C1_Instance(), address, subAddress, 1, data, 1, 5000);
 8000fe6:	f003 fb67 	bl	80046b8 <Get_I2C1_Instance>
 8000fea:	79fb      	ldrb	r3, [r7, #7]
 8000fec:	b299      	uxth	r1, r3
 8000fee:	79bb      	ldrb	r3, [r7, #6]
 8000ff0:	b29a      	uxth	r2, r3
 8000ff2:	f241 3388 	movw	r3, #5000	; 0x1388
 8000ff6:	9302      	str	r3, [sp, #8]
 8000ff8:	2301      	movs	r3, #1
 8000ffa:	9301      	str	r3, [sp, #4]
 8000ffc:	f107 030c 	add.w	r3, r7, #12
 8001000:	9300      	str	r3, [sp, #0]
 8001002:	2301      	movs	r3, #1
 8001004:	f005 f8e6 	bl	80061d4 <HAL_I2C_Mem_Read>
	/*print("Read:");
	print_int(data[0]);
	println("");*/
	while(HAL_I2C_GetState(Get_I2C1_Instance()) != HAL_I2C_STATE_READY);
 8001008:	bf00      	nop
 800100a:	f003 fb55 	bl	80046b8 <Get_I2C1_Instance>
 800100e:	4603      	mov	r3, r0
 8001010:	4618      	mov	r0, r3
 8001012:	f005 fb05 	bl	8006620 <HAL_I2C_GetState>
 8001016:	4603      	mov	r3, r0
 8001018:	2b20      	cmp	r3, #32
 800101a:	d1f6      	bne.n	800100a <MPU_readByte+0x34>
	//i2c.read(address, data, 1, 0);

	return (char)data[0];
 800101c:	7b3b      	ldrb	r3, [r7, #12]
}
 800101e:	4618      	mov	r0, r3
 8001020:	3710      	adds	r7, #16
 8001022:	46bd      	mov	sp, r7
 8001024:	bd80      	pop	{r7, pc}

08001026 <MPU_readBytes>:
void MPU_readBytes(uint8_t address, uint8_t subAddress, uint8_t count, uint8_t* dest)
{     
 8001026:	b590      	push	{r4, r7, lr}
 8001028:	b08d      	sub	sp, #52	; 0x34
 800102a:	af04      	add	r7, sp, #16
 800102c:	603b      	str	r3, [r7, #0]
 800102e:	4603      	mov	r3, r0
 8001030:	71fb      	strb	r3, [r7, #7]
 8001032:	460b      	mov	r3, r1
 8001034:	71bb      	strb	r3, [r7, #6]
 8001036:	4613      	mov	r3, r2
 8001038:	717b      	strb	r3, [r7, #5]
	uint8_t data[14];

	HAL_I2C_Mem_Read(Get_I2C1_Instance(), address, subAddress, 1, data, count, 5000);
 800103a:	f003 fb3d 	bl	80046b8 <Get_I2C1_Instance>
 800103e:	4604      	mov	r4, r0
 8001040:	79fb      	ldrb	r3, [r7, #7]
 8001042:	b299      	uxth	r1, r3
 8001044:	79bb      	ldrb	r3, [r7, #6]
 8001046:	b298      	uxth	r0, r3
 8001048:	797b      	ldrb	r3, [r7, #5]
 800104a:	b29b      	uxth	r3, r3
 800104c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001050:	9202      	str	r2, [sp, #8]
 8001052:	9301      	str	r3, [sp, #4]
 8001054:	f107 030c 	add.w	r3, r7, #12
 8001058:	9300      	str	r3, [sp, #0]
 800105a:	2301      	movs	r3, #1
 800105c:	4602      	mov	r2, r0
 800105e:	4620      	mov	r0, r4
 8001060:	f005 f8b8 	bl	80061d4 <HAL_I2C_Mem_Read>
	{
		print_int(data[bo]);
		print(" ");
	}
	println("");*/
	while(HAL_I2C_GetState(Get_I2C1_Instance()) != HAL_I2C_STATE_READY);
 8001064:	bf00      	nop
 8001066:	f003 fb27 	bl	80046b8 <Get_I2C1_Instance>
 800106a:	4603      	mov	r3, r0
 800106c:	4618      	mov	r0, r3
 800106e:	f005 fad7 	bl	8006620 <HAL_I2C_GetState>
 8001072:	4603      	mov	r3, r0
 8001074:	2b20      	cmp	r3, #32
 8001076:	d1f6      	bne.n	8001066 <MPU_readBytes+0x40>

	/*
	i2c.write(address, data_write, 1, 1); // no stop
	i2c.read(address, data, count, 0);
	*/
	int ii = 0;
 8001078:	2300      	movs	r3, #0
 800107a:	61fb      	str	r3, [r7, #28]
	for(ii = 0; ii < count; ii++)
 800107c:	2300      	movs	r3, #0
 800107e:	61fb      	str	r3, [r7, #28]
 8001080:	e00b      	b.n	800109a <MPU_readBytes+0x74>
	{
		dest[ii] = data[ii];
 8001082:	69fb      	ldr	r3, [r7, #28]
 8001084:	683a      	ldr	r2, [r7, #0]
 8001086:	4413      	add	r3, r2
 8001088:	f107 010c 	add.w	r1, r7, #12
 800108c:	69fa      	ldr	r2, [r7, #28]
 800108e:	440a      	add	r2, r1
 8001090:	7812      	ldrb	r2, [r2, #0]
 8001092:	701a      	strb	r2, [r3, #0]
	for(ii = 0; ii < count; ii++)
 8001094:	69fb      	ldr	r3, [r7, #28]
 8001096:	3301      	adds	r3, #1
 8001098:	61fb      	str	r3, [r7, #28]
 800109a:	797b      	ldrb	r3, [r7, #5]
 800109c:	69fa      	ldr	r2, [r7, #28]
 800109e:	429a      	cmp	r2, r3
 80010a0:	dbef      	blt.n	8001082 <MPU_readBytes+0x5c>
	}
} 
 80010a2:	bf00      	nop
 80010a4:	3724      	adds	r7, #36	; 0x24
 80010a6:	46bd      	mov	sp, r7
 80010a8:	bd90      	pop	{r4, r7, pc}
	...

080010ac <MPU_getMres>:
 
void MPU_getMres()
{
 80010ac:	b480      	push	{r7}
 80010ae:	af00      	add	r7, sp, #0
	switch (MMscale)
 80010b0:	4b09      	ldr	r3, [pc, #36]	; (80010d8 <MPU_getMres+0x2c>)
 80010b2:	781b      	ldrb	r3, [r3, #0]
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d002      	beq.n	80010be <MPU_getMres+0x12>
 80010b8:	2b01      	cmp	r3, #1
 80010ba:	d004      	beq.n	80010c6 <MPU_getMres+0x1a>
			break;
		case MFS_16BITS:
			mRes = 10.0*4912.0/32760.0; // Proper scale to return milliGauss
			break;
	}
}
 80010bc:	e007      	b.n	80010ce <MPU_getMres+0x22>
			mRes = 10.0*4912.0/8190.0; // Proper scale to return milliGauss
 80010be:	4b07      	ldr	r3, [pc, #28]	; (80010dc <MPU_getMres+0x30>)
 80010c0:	4a07      	ldr	r2, [pc, #28]	; (80010e0 <MPU_getMres+0x34>)
 80010c2:	601a      	str	r2, [r3, #0]
			break;
 80010c4:	e003      	b.n	80010ce <MPU_getMres+0x22>
			mRes = 10.0*4912.0/32760.0; // Proper scale to return milliGauss
 80010c6:	4b05      	ldr	r3, [pc, #20]	; (80010dc <MPU_getMres+0x30>)
 80010c8:	4a06      	ldr	r2, [pc, #24]	; (80010e4 <MPU_getMres+0x38>)
 80010ca:	601a      	str	r2, [r3, #0]
			break;
 80010cc:	bf00      	nop
}
 80010ce:	bf00      	nop
 80010d0:	46bd      	mov	sp, r7
 80010d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d6:	4770      	bx	lr
 80010d8:	20000810 	.word	0x20000810
 80010dc:	20000844 	.word	0x20000844
 80010e0:	40bfebff 	.word	0x40bfebff
 80010e4:	3fbfebff 	.word	0x3fbfebff

080010e8 <MPU_getGres>:
void MPU_getGres()
{
 80010e8:	b480      	push	{r7}
 80010ea:	af00      	add	r7, sp, #0
	switch (GGscale)
 80010ec:	4b12      	ldr	r3, [pc, #72]	; (8001138 <MPU_getGres+0x50>)
 80010ee:	781b      	ldrb	r3, [r3, #0]
 80010f0:	2b03      	cmp	r3, #3
 80010f2:	d81b      	bhi.n	800112c <MPU_getGres+0x44>
 80010f4:	a201      	add	r2, pc, #4	; (adr r2, 80010fc <MPU_getGres+0x14>)
 80010f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010fa:	bf00      	nop
 80010fc:	0800110d 	.word	0x0800110d
 8001100:	08001115 	.word	0x08001115
 8001104:	0800111d 	.word	0x0800111d
 8001108:	08001125 	.word	0x08001125
	{
		// Possible gyro scales (and their register bit settings) are:
		// 250 DPS (00), 500 DPS (01), 1000 DPS (10), and 2000 DPS  (11). 
		// Here's a bit of an algorith to calculate DPS/(ADC tick) based on that 2-bit value:
		case GFS_250DPS:
			gRes = 250.0/32768.0;
 800110c:	4b0b      	ldr	r3, [pc, #44]	; (800113c <MPU_getGres+0x54>)
 800110e:	4a0c      	ldr	r2, [pc, #48]	; (8001140 <MPU_getGres+0x58>)
 8001110:	601a      	str	r2, [r3, #0]
			break;
 8001112:	e00b      	b.n	800112c <MPU_getGres+0x44>
		case GFS_500DPS:
			gRes = 500.0/32768.0;
 8001114:	4b09      	ldr	r3, [pc, #36]	; (800113c <MPU_getGres+0x54>)
 8001116:	4a0b      	ldr	r2, [pc, #44]	; (8001144 <MPU_getGres+0x5c>)
 8001118:	601a      	str	r2, [r3, #0]
			break;
 800111a:	e007      	b.n	800112c <MPU_getGres+0x44>
		case GFS_1000DPS:
			gRes = 1000.0/32768.0;
 800111c:	4b07      	ldr	r3, [pc, #28]	; (800113c <MPU_getGres+0x54>)
 800111e:	4a0a      	ldr	r2, [pc, #40]	; (8001148 <MPU_getGres+0x60>)
 8001120:	601a      	str	r2, [r3, #0]
			break;
 8001122:	e003      	b.n	800112c <MPU_getGres+0x44>
		case GFS_2000DPS:
			gRes = 2000.0/32768.0;
 8001124:	4b05      	ldr	r3, [pc, #20]	; (800113c <MPU_getGres+0x54>)
 8001126:	4a09      	ldr	r2, [pc, #36]	; (800114c <MPU_getGres+0x64>)
 8001128:	601a      	str	r2, [r3, #0]
			break;
 800112a:	bf00      	nop
	}
}
 800112c:	bf00      	nop
 800112e:	46bd      	mov	sp, r7
 8001130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001134:	4770      	bx	lr
 8001136:	bf00      	nop
 8001138:	2000079a 	.word	0x2000079a
 800113c:	20000824 	.word	0x20000824
 8001140:	3bfa0000 	.word	0x3bfa0000
 8001144:	3c7a0000 	.word	0x3c7a0000
 8001148:	3cfa0000 	.word	0x3cfa0000
 800114c:	3d7a0000 	.word	0x3d7a0000

08001150 <MPU_getAres>:
void MPU_getAres()
{
 8001150:	b480      	push	{r7}
 8001152:	af00      	add	r7, sp, #0
	switch (AAscale)
 8001154:	4b14      	ldr	r3, [pc, #80]	; (80011a8 <MPU_getAres+0x58>)
 8001156:	781b      	ldrb	r3, [r3, #0]
 8001158:	2b03      	cmp	r3, #3
 800115a:	d81f      	bhi.n	800119c <MPU_getAres+0x4c>
 800115c:	a201      	add	r2, pc, #4	; (adr r2, 8001164 <MPU_getAres+0x14>)
 800115e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001162:	bf00      	nop
 8001164:	08001175 	.word	0x08001175
 8001168:	0800117f 	.word	0x0800117f
 800116c:	08001189 	.word	0x08001189
 8001170:	08001193 	.word	0x08001193
	{
		// Possible accelerometer scales (and their register bit settings) are:
		// 2 Gs (00), 4 Gs (01), 8 Gs (10), and 16 Gs  (11). 
		// Here's a bit of an algorith to calculate DPS/(ADC tick) based on that 2-bit value:
		case AFS_2G:
			aRes = 2.0/32768.0;
 8001174:	4b0d      	ldr	r3, [pc, #52]	; (80011ac <MPU_getAres+0x5c>)
 8001176:	f04f 5262 	mov.w	r2, #947912704	; 0x38800000
 800117a:	601a      	str	r2, [r3, #0]
			break;
 800117c:	e00e      	b.n	800119c <MPU_getAres+0x4c>
		case AFS_4G:
			aRes = 4.0/32768.0;
 800117e:	4b0b      	ldr	r3, [pc, #44]	; (80011ac <MPU_getAres+0x5c>)
 8001180:	f04f 5264 	mov.w	r2, #956301312	; 0x39000000
 8001184:	601a      	str	r2, [r3, #0]
			break;
 8001186:	e009      	b.n	800119c <MPU_getAres+0x4c>
		case AFS_8G:
			aRes = 8.0/32768.0;
 8001188:	4b08      	ldr	r3, [pc, #32]	; (80011ac <MPU_getAres+0x5c>)
 800118a:	f04f 5266 	mov.w	r2, #964689920	; 0x39800000
 800118e:	601a      	str	r2, [r3, #0]
			break;
 8001190:	e004      	b.n	800119c <MPU_getAres+0x4c>
		case AFS_16G:
			aRes = 16.0/32768.0;
 8001192:	4b06      	ldr	r3, [pc, #24]	; (80011ac <MPU_getAres+0x5c>)
 8001194:	f04f 5268 	mov.w	r2, #973078528	; 0x3a000000
 8001198:	601a      	str	r2, [r3, #0]
			break;
 800119a:	bf00      	nop
	}
}
 800119c:	bf00      	nop
 800119e:	46bd      	mov	sp, r7
 80011a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a4:	4770      	bx	lr
 80011a6:	bf00      	nop
 80011a8:	200007c4 	.word	0x200007c4
 80011ac:	20000808 	.word	0x20000808

080011b0 <MPU_readAccelData>:

void MPU_readAccelData(int16_t* destination)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b084      	sub	sp, #16
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	6078      	str	r0, [r7, #4]
	uint8_t rawData[6];  // x/y/z accel register data stored here
	MPU_readBytes(MPU9250_ADDRESS, ACCEL_XOUT_H, 6, &rawData[0]);  // Read the six raw data registers into data array
 80011b8:	f107 0308 	add.w	r3, r7, #8
 80011bc:	2206      	movs	r2, #6
 80011be:	213b      	movs	r1, #59	; 0x3b
 80011c0:	20d2      	movs	r0, #210	; 0xd2
 80011c2:	f7ff ff30 	bl	8001026 <MPU_readBytes>
	destination[0] = (int16_t)(((int16_t)rawData[0] << 8) | rawData[1]);  // Turn the MSB and LSB into a signed 16-bit value
 80011c6:	7a3b      	ldrb	r3, [r7, #8]
 80011c8:	021b      	lsls	r3, r3, #8
 80011ca:	b21a      	sxth	r2, r3
 80011cc:	7a7b      	ldrb	r3, [r7, #9]
 80011ce:	b21b      	sxth	r3, r3
 80011d0:	4313      	orrs	r3, r2
 80011d2:	b21a      	sxth	r2, r3
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	801a      	strh	r2, [r3, #0]
	destination[1] = (int16_t)(((int16_t)rawData[2] << 8) | rawData[3]);  
 80011d8:	7abb      	ldrb	r3, [r7, #10]
 80011da:	021b      	lsls	r3, r3, #8
 80011dc:	b219      	sxth	r1, r3
 80011de:	7afb      	ldrb	r3, [r7, #11]
 80011e0:	b21a      	sxth	r2, r3
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	3302      	adds	r3, #2
 80011e6:	430a      	orrs	r2, r1
 80011e8:	b212      	sxth	r2, r2
 80011ea:	801a      	strh	r2, [r3, #0]
	destination[2] = (int16_t)(((int16_t)rawData[4] << 8) | rawData[5]); 
 80011ec:	7b3b      	ldrb	r3, [r7, #12]
 80011ee:	021b      	lsls	r3, r3, #8
 80011f0:	b219      	sxth	r1, r3
 80011f2:	7b7b      	ldrb	r3, [r7, #13]
 80011f4:	b21a      	sxth	r2, r3
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	3304      	adds	r3, #4
 80011fa:	430a      	orrs	r2, r1
 80011fc:	b212      	sxth	r2, r2
 80011fe:	801a      	strh	r2, [r3, #0]
}
 8001200:	bf00      	nop
 8001202:	3710      	adds	r7, #16
 8001204:	46bd      	mov	sp, r7
 8001206:	bd80      	pop	{r7, pc}

08001208 <MPU_readGyroData>:
void MPU_readGyroData(int16_t* destination)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b084      	sub	sp, #16
 800120c:	af00      	add	r7, sp, #0
 800120e:	6078      	str	r0, [r7, #4]
	uint8_t rawData[6];  // x/y/z gyro register data stored here
	MPU_readBytes(MPU9250_ADDRESS, GYRO_XOUT_H, 6, &rawData[0]);  // Read the six raw data registers sequentially into data array
 8001210:	f107 0308 	add.w	r3, r7, #8
 8001214:	2206      	movs	r2, #6
 8001216:	2143      	movs	r1, #67	; 0x43
 8001218:	20d2      	movs	r0, #210	; 0xd2
 800121a:	f7ff ff04 	bl	8001026 <MPU_readBytes>
	destination[0] = (int16_t)(((int16_t)rawData[0] << 8) | rawData[1]);  // Turn the MSB and LSB into a signed 16-bit value
 800121e:	7a3b      	ldrb	r3, [r7, #8]
 8001220:	021b      	lsls	r3, r3, #8
 8001222:	b21a      	sxth	r2, r3
 8001224:	7a7b      	ldrb	r3, [r7, #9]
 8001226:	b21b      	sxth	r3, r3
 8001228:	4313      	orrs	r3, r2
 800122a:	b21a      	sxth	r2, r3
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	801a      	strh	r2, [r3, #0]
	destination[1] = (int16_t)(((int16_t)rawData[2] << 8) | rawData[3]);  
 8001230:	7abb      	ldrb	r3, [r7, #10]
 8001232:	021b      	lsls	r3, r3, #8
 8001234:	b219      	sxth	r1, r3
 8001236:	7afb      	ldrb	r3, [r7, #11]
 8001238:	b21a      	sxth	r2, r3
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	3302      	adds	r3, #2
 800123e:	430a      	orrs	r2, r1
 8001240:	b212      	sxth	r2, r2
 8001242:	801a      	strh	r2, [r3, #0]
	destination[2] = (int16_t)(((int16_t)rawData[4] << 8) | rawData[5]); 
 8001244:	7b3b      	ldrb	r3, [r7, #12]
 8001246:	021b      	lsls	r3, r3, #8
 8001248:	b219      	sxth	r1, r3
 800124a:	7b7b      	ldrb	r3, [r7, #13]
 800124c:	b21a      	sxth	r2, r3
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	3304      	adds	r3, #4
 8001252:	430a      	orrs	r2, r1
 8001254:	b212      	sxth	r2, r2
 8001256:	801a      	strh	r2, [r3, #0]
}
 8001258:	bf00      	nop
 800125a:	3710      	adds	r7, #16
 800125c:	46bd      	mov	sp, r7
 800125e:	bd80      	pop	{r7, pc}

08001260 <MPU_readMagData>:
void MPU_readMagData(int16_t* destination)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b084      	sub	sp, #16
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]
	uint8_t rawData[7];  // x/y/z gyro register data, ST2 register stored here, must read ST2 at end of data acquisition
	if(MPU_readByte(AK8963_ADDRESS, AK8963_ST1) & 0x01)
 8001268:	2102      	movs	r1, #2
 800126a:	2018      	movs	r0, #24
 800126c:	f7ff feb3 	bl	8000fd6 <MPU_readByte>
 8001270:	4603      	mov	r3, r0
 8001272:	f003 0301 	and.w	r3, r3, #1
 8001276:	2b00      	cmp	r3, #0
 8001278:	d02a      	beq.n	80012d0 <MPU_readMagData+0x70>
	{ // wait for magnetometer data ready bit to be set
		MPU_readBytes(AK8963_ADDRESS, AK8963_XOUT_L, 7, &rawData[0]);  // Read the six raw data and ST2 registers sequentially into data array
 800127a:	f107 0308 	add.w	r3, r7, #8
 800127e:	2207      	movs	r2, #7
 8001280:	2103      	movs	r1, #3
 8001282:	2018      	movs	r0, #24
 8001284:	f7ff fecf 	bl	8001026 <MPU_readBytes>
		uint8_t c = rawData[6]; // End data read by reading ST2 register
 8001288:	7bbb      	ldrb	r3, [r7, #14]
 800128a:	73fb      	strb	r3, [r7, #15]
		if(!(c & 0x08))
 800128c:	7bfb      	ldrb	r3, [r7, #15]
 800128e:	f003 0308 	and.w	r3, r3, #8
 8001292:	2b00      	cmp	r3, #0
 8001294:	d11c      	bne.n	80012d0 <MPU_readMagData+0x70>
		{ // Check if magnetic sensor overflow set, if not then report data
			destination[0] = (int16_t)(((int16_t)rawData[1] << 8) | rawData[0]);  // Turn the MSB and LSB into a signed 16-bit value
 8001296:	7a7b      	ldrb	r3, [r7, #9]
 8001298:	021b      	lsls	r3, r3, #8
 800129a:	b21a      	sxth	r2, r3
 800129c:	7a3b      	ldrb	r3, [r7, #8]
 800129e:	b21b      	sxth	r3, r3
 80012a0:	4313      	orrs	r3, r2
 80012a2:	b21a      	sxth	r2, r3
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	801a      	strh	r2, [r3, #0]
			destination[1] = (int16_t)(((int16_t)rawData[3] << 8) | rawData[2]);  // Data stored as little Endian
 80012a8:	7afb      	ldrb	r3, [r7, #11]
 80012aa:	021b      	lsls	r3, r3, #8
 80012ac:	b219      	sxth	r1, r3
 80012ae:	7abb      	ldrb	r3, [r7, #10]
 80012b0:	b21a      	sxth	r2, r3
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	3302      	adds	r3, #2
 80012b6:	430a      	orrs	r2, r1
 80012b8:	b212      	sxth	r2, r2
 80012ba:	801a      	strh	r2, [r3, #0]
			destination[2] = (int16_t)(((int16_t)rawData[5] << 8) | rawData[4]); 
 80012bc:	7b7b      	ldrb	r3, [r7, #13]
 80012be:	021b      	lsls	r3, r3, #8
 80012c0:	b219      	sxth	r1, r3
 80012c2:	7b3b      	ldrb	r3, [r7, #12]
 80012c4:	b21a      	sxth	r2, r3
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	3304      	adds	r3, #4
 80012ca:	430a      	orrs	r2, r1
 80012cc:	b212      	sxth	r2, r2
 80012ce:	801a      	strh	r2, [r3, #0]
		}
	}
}
 80012d0:	bf00      	nop
 80012d2:	3710      	adds	r7, #16
 80012d4:	46bd      	mov	sp, r7
 80012d6:	bd80      	pop	{r7, pc}

080012d8 <MPU_readTempData>:
int16_t MPU_readTempData()
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b082      	sub	sp, #8
 80012dc:	af00      	add	r7, sp, #0
	uint8_t rawData[2];  // x/y/z gyro register data stored here
	MPU_readBytes(MPU9250_ADDRESS, TEMP_OUT_H, 2, &rawData[0]);  // Read the two raw data registers sequentially into data array 
 80012de:	1d3b      	adds	r3, r7, #4
 80012e0:	2202      	movs	r2, #2
 80012e2:	2141      	movs	r1, #65	; 0x41
 80012e4:	20d2      	movs	r0, #210	; 0xd2
 80012e6:	f7ff fe9e 	bl	8001026 <MPU_readBytes>
	return (int16_t)(((int16_t)rawData[0]) << 8 | rawData[1]);  // Turn the MSB and LSB into a 16-bit value
 80012ea:	793b      	ldrb	r3, [r7, #4]
 80012ec:	021b      	lsls	r3, r3, #8
 80012ee:	b21a      	sxth	r2, r3
 80012f0:	797b      	ldrb	r3, [r7, #5]
 80012f2:	b21b      	sxth	r3, r3
 80012f4:	4313      	orrs	r3, r2
 80012f6:	b21b      	sxth	r3, r3
}
 80012f8:	4618      	mov	r0, r3
 80012fa:	3708      	adds	r7, #8
 80012fc:	46bd      	mov	sp, r7
 80012fe:	bd80      	pop	{r7, pc}

08001300 <MPU_present>:

bool MPU_present()
{
 8001300:	b580      	push	{r7, lr}
 8001302:	b082      	sub	sp, #8
 8001304:	af00      	add	r7, sp, #0
	// 5 trials of getting WHO_AM_I response from MPU
	uint8_t attempts = 0;
 8001306:	2300      	movs	r3, #0
 8001308:	71fb      	strb	r3, [r7, #7]
	do
	{
		char who = MPU_readByte(MPU9250_ADDRESS, MPU9250_WHO_AM_I);
 800130a:	2175      	movs	r1, #117	; 0x75
 800130c:	20d2      	movs	r0, #210	; 0xd2
 800130e:	f7ff fe62 	bl	8000fd6 <MPU_readByte>
 8001312:	4603      	mov	r3, r0
 8001314:	71bb      	strb	r3, [r7, #6]
		if (who == 0x71) return true;
 8001316:	79bb      	ldrb	r3, [r7, #6]
 8001318:	2b71      	cmp	r3, #113	; 0x71
 800131a:	d101      	bne.n	8001320 <MPU_present+0x20>
 800131c:	2301      	movs	r3, #1
 800131e:	e00a      	b.n	8001336 <MPU_present+0x36>
		else
		{
			attempts++;
 8001320:	79fb      	ldrb	r3, [r7, #7]
 8001322:	3301      	adds	r3, #1
 8001324:	71fb      	strb	r3, [r7, #7]
			HAL_Delay(1000);
 8001326:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800132a:	f003 fe61 	bl	8004ff0 <HAL_Delay>
		}
	} while (attempts <= 5);
 800132e:	79fb      	ldrb	r3, [r7, #7]
 8001330:	2b05      	cmp	r3, #5
 8001332:	d9ea      	bls.n	800130a <MPU_present+0xa>
	return false;
 8001334:	2300      	movs	r3, #0
}
 8001336:	4618      	mov	r0, r3
 8001338:	3708      	adds	r7, #8
 800133a:	46bd      	mov	sp, r7
 800133c:	bd80      	pop	{r7, pc}
	...

08001340 <MPU_init>:
void MPU_init()
{
 8001340:	b590      	push	{r4, r7, lr}
 8001342:	b083      	sub	sp, #12
 8001344:	af00      	add	r7, sp, #0
	GyroMeasError = PI * (60.0f / 180.0f);
 8001346:	4b7a      	ldr	r3, [pc, #488]	; (8001530 <MPU_init+0x1f0>)
 8001348:	4a7a      	ldr	r2, [pc, #488]	; (8001534 <MPU_init+0x1f4>)
 800134a:	601a      	str	r2, [r3, #0]
	beta = sqrt(3.0f / 4.0f) * GyroMeasError;
 800134c:	4b78      	ldr	r3, [pc, #480]	; (8001530 <MPU_init+0x1f0>)
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	4618      	mov	r0, r3
 8001352:	f7ff f8f9 	bl	8000548 <__aeabi_f2d>
 8001356:	a374      	add	r3, pc, #464	; (adr r3, 8001528 <MPU_init+0x1e8>)
 8001358:	e9d3 2300 	ldrd	r2, r3, [r3]
 800135c:	f7ff f94c 	bl	80005f8 <__aeabi_dmul>
 8001360:	4603      	mov	r3, r0
 8001362:	460c      	mov	r4, r1
 8001364:	4618      	mov	r0, r3
 8001366:	4621      	mov	r1, r4
 8001368:	f7ff fc3e 	bl	8000be8 <__aeabi_d2f>
 800136c:	4602      	mov	r2, r0
 800136e:	4b72      	ldr	r3, [pc, #456]	; (8001538 <MPU_init+0x1f8>)
 8001370:	601a      	str	r2, [r3, #0]
	GyroMeasDrift = PI * (1.0f / 180.0f);
 8001372:	4b72      	ldr	r3, [pc, #456]	; (800153c <MPU_init+0x1fc>)
 8001374:	4a72      	ldr	r2, [pc, #456]	; (8001540 <MPU_init+0x200>)
 8001376:	601a      	str	r2, [r3, #0]
	zeta = sqrt(3.0f / 4.0f) * GyroMeasDrift;
 8001378:	4b70      	ldr	r3, [pc, #448]	; (800153c <MPU_init+0x1fc>)
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	4618      	mov	r0, r3
 800137e:	f7ff f8e3 	bl	8000548 <__aeabi_f2d>
 8001382:	a369      	add	r3, pc, #420	; (adr r3, 8001528 <MPU_init+0x1e8>)
 8001384:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001388:	f7ff f936 	bl	80005f8 <__aeabi_dmul>
 800138c:	4603      	mov	r3, r0
 800138e:	460c      	mov	r4, r1
 8001390:	4618      	mov	r0, r3
 8001392:	4621      	mov	r1, r4
 8001394:	f7ff fc28 	bl	8000be8 <__aeabi_d2f>
 8001398:	4602      	mov	r2, r0
 800139a:	4b6a      	ldr	r3, [pc, #424]	; (8001544 <MPU_init+0x204>)
 800139c:	601a      	str	r2, [r3, #0]

	AAscale = AFS_2G;
 800139e:	4b6a      	ldr	r3, [pc, #424]	; (8001548 <MPU_init+0x208>)
 80013a0:	2200      	movs	r2, #0
 80013a2:	701a      	strb	r2, [r3, #0]
	GGscale = GFS_250DPS;
 80013a4:	4b69      	ldr	r3, [pc, #420]	; (800154c <MPU_init+0x20c>)
 80013a6:	2200      	movs	r2, #0
 80013a8:	701a      	strb	r2, [r3, #0]
	MMscale = MFS_16BITS;
 80013aa:	4b69      	ldr	r3, [pc, #420]	; (8001550 <MPU_init+0x210>)
 80013ac:	2201      	movs	r2, #1
 80013ae:	701a      	strb	r2, [r3, #0]
	Mmode = 0x06;
 80013b0:	4b68      	ldr	r3, [pc, #416]	; (8001554 <MPU_init+0x214>)
 80013b2:	2206      	movs	r2, #6
 80013b4:	701a      	strb	r2, [r3, #0]
	magCalibration[0] = 0;
 80013b6:	4b68      	ldr	r3, [pc, #416]	; (8001558 <MPU_init+0x218>)
 80013b8:	f04f 0200 	mov.w	r2, #0
 80013bc:	601a      	str	r2, [r3, #0]
	magCalibration[1] = 0;
 80013be:	4b66      	ldr	r3, [pc, #408]	; (8001558 <MPU_init+0x218>)
 80013c0:	f04f 0200 	mov.w	r2, #0
 80013c4:	605a      	str	r2, [r3, #4]
	magCalibration[2] = 0;
 80013c6:	4b64      	ldr	r3, [pc, #400]	; (8001558 <MPU_init+0x218>)
 80013c8:	f04f 0200 	mov.w	r2, #0
 80013cc:	609a      	str	r2, [r3, #8]
	magbias[0] = 0;
 80013ce:	4b63      	ldr	r3, [pc, #396]	; (800155c <MPU_init+0x21c>)
 80013d0:	f04f 0200 	mov.w	r2, #0
 80013d4:	601a      	str	r2, [r3, #0]
	magbias[1] = 0;
 80013d6:	4b61      	ldr	r3, [pc, #388]	; (800155c <MPU_init+0x21c>)
 80013d8:	f04f 0200 	mov.w	r2, #0
 80013dc:	605a      	str	r2, [r3, #4]
	magbias[2] = 0;
 80013de:	4b5f      	ldr	r3, [pc, #380]	; (800155c <MPU_init+0x21c>)
 80013e0:	f04f 0200 	mov.w	r2, #0
 80013e4:	609a      	str	r2, [r3, #8]
	delt_t = 0;
 80013e6:	4b5e      	ldr	r3, [pc, #376]	; (8001560 <MPU_init+0x220>)
 80013e8:	2200      	movs	r2, #0
 80013ea:	601a      	str	r2, [r3, #0]
	count = 0;
 80013ec:	4b5d      	ldr	r3, [pc, #372]	; (8001564 <MPU_init+0x224>)
 80013ee:	2200      	movs	r2, #0
 80013f0:	601a      	str	r2, [r3, #0]
	deltat = 0.0f;
 80013f2:	4b5d      	ldr	r3, [pc, #372]	; (8001568 <MPU_init+0x228>)
 80013f4:	f04f 0200 	mov.w	r2, #0
 80013f8:	601a      	str	r2, [r3, #0]
	lastUpdate = 0;
 80013fa:	4b5c      	ldr	r3, [pc, #368]	; (800156c <MPU_init+0x22c>)
 80013fc:	2200      	movs	r2, #0
 80013fe:	601a      	str	r2, [r3, #0]
	firstUpdate = 0;
 8001400:	4b5b      	ldr	r3, [pc, #364]	; (8001570 <MPU_init+0x230>)
 8001402:	2200      	movs	r2, #0
 8001404:	601a      	str	r2, [r3, #0]
	Now = 0;
 8001406:	4b5b      	ldr	r3, [pc, #364]	; (8001574 <MPU_init+0x234>)
 8001408:	2200      	movs	r2, #0
 800140a:	601a      	str	r2, [r3, #0]
	q[0] = 1.0f;
 800140c:	4b5a      	ldr	r3, [pc, #360]	; (8001578 <MPU_init+0x238>)
 800140e:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001412:	601a      	str	r2, [r3, #0]
	q[1] = 0.0f;
 8001414:	4b58      	ldr	r3, [pc, #352]	; (8001578 <MPU_init+0x238>)
 8001416:	f04f 0200 	mov.w	r2, #0
 800141a:	605a      	str	r2, [r3, #4]
	q[2] = 0.0f;
 800141c:	4b56      	ldr	r3, [pc, #344]	; (8001578 <MPU_init+0x238>)
 800141e:	f04f 0200 	mov.w	r2, #0
 8001422:	609a      	str	r2, [r3, #8]
	q[3] = 0.0f;
 8001424:	4b54      	ldr	r3, [pc, #336]	; (8001578 <MPU_init+0x238>)
 8001426:	f04f 0200 	mov.w	r2, #0
 800142a:	60da      	str	r2, [r3, #12]
	eInt[0] = 0.0f;
 800142c:	4b53      	ldr	r3, [pc, #332]	; (800157c <MPU_init+0x23c>)
 800142e:	f04f 0200 	mov.w	r2, #0
 8001432:	601a      	str	r2, [r3, #0]
	eInt[1] = 0.0f;
 8001434:	4b51      	ldr	r3, [pc, #324]	; (800157c <MPU_init+0x23c>)
 8001436:	f04f 0200 	mov.w	r2, #0
 800143a:	605a      	str	r2, [r3, #4]
	eInt[2] = 0.0f;
 800143c:	4b4f      	ldr	r3, [pc, #316]	; (800157c <MPU_init+0x23c>)
 800143e:	f04f 0200 	mov.w	r2, #0
 8001442:	609a      	str	r2, [r3, #8]

	// Initialize MPU9250 device
	// wake up device
	MPU_writeByte(MPU9250_ADDRESS, PWR_MGMT_1, 0x00); // Clear sleep mode bit (6), enable all sensors 
 8001444:	2200      	movs	r2, #0
 8001446:	216b      	movs	r1, #107	; 0x6b
 8001448:	20d2      	movs	r0, #210	; 0xd2
 800144a:	f7ff fd9d 	bl	8000f88 <MPU_writeByte>
	HAL_Delay(100); // Delay 100 ms for PLL to get established on x-axis gyro; should check for PLL ready interrupt  
 800144e:	2064      	movs	r0, #100	; 0x64
 8001450:	f003 fdce 	bl	8004ff0 <HAL_Delay>

	// get stable time source
	MPU_writeByte(MPU9250_ADDRESS, PWR_MGMT_1, 0x01);  // Set clock source to be PLL with x-axis gyroscope reference, bits 2:0 = 001
 8001454:	2201      	movs	r2, #1
 8001456:	216b      	movs	r1, #107	; 0x6b
 8001458:	20d2      	movs	r0, #210	; 0xd2
 800145a:	f7ff fd95 	bl	8000f88 <MPU_writeByte>

	// Configure Gyro and Accelerometer
	// Disable FSYNC and set accelerometer and gyro bandwidth to 44 and 42 Hz, respectively; 
	// DLPF_CFG = bits 2:0 = 010; this sets the sample rate at 1 kHz for both
	// Maximum delay is 4.9 ms which is just over a 200 Hz maximum rate
	MPU_writeByte(MPU9250_ADDRESS, CONFIG, 0x03);  
 800145e:	2203      	movs	r2, #3
 8001460:	211a      	movs	r1, #26
 8001462:	20d2      	movs	r0, #210	; 0xd2
 8001464:	f7ff fd90 	bl	8000f88 <MPU_writeByte>

	// Set sample rate = gyroscope output rate/(1 + SMPLRT_DIV)
	MPU_writeByte(MPU9250_ADDRESS, SMPLRT_DIV, 0x04);  // Use a 200 Hz rate; the same rate set in CONFIG above
 8001468:	2204      	movs	r2, #4
 800146a:	2119      	movs	r1, #25
 800146c:	20d2      	movs	r0, #210	; 0xd2
 800146e:	f7ff fd8b 	bl	8000f88 <MPU_writeByte>

	// Set gyroscope full scale range
	// Range selects FS_SEL and AFS_SEL are 0 - 3, so 2-bit values are left-shifted into positions 4:3
	uint8_t c = MPU_readByte(MPU9250_ADDRESS, GYRO_CONFIG); // get current GYRO_CONFIG register value
 8001472:	211b      	movs	r1, #27
 8001474:	20d2      	movs	r0, #210	; 0xd2
 8001476:	f7ff fdae 	bl	8000fd6 <MPU_readByte>
 800147a:	4603      	mov	r3, r0
 800147c:	71fb      	strb	r3, [r7, #7]
	// c = c & ~0xE0; // Clear self-test bits [7:5] 
	c = c & ~0x02; // Clear Fchoice bits [1:0] 
 800147e:	79fb      	ldrb	r3, [r7, #7]
 8001480:	f023 0302 	bic.w	r3, r3, #2
 8001484:	71fb      	strb	r3, [r7, #7]
	c = c & ~0x18; // Clear AFS bits [4:3]
 8001486:	79fb      	ldrb	r3, [r7, #7]
 8001488:	f023 0318 	bic.w	r3, r3, #24
 800148c:	71fb      	strb	r3, [r7, #7]
	c = c | GGscale << 3; // Set full scale range for the gyro
 800148e:	4b2f      	ldr	r3, [pc, #188]	; (800154c <MPU_init+0x20c>)
 8001490:	781b      	ldrb	r3, [r3, #0]
 8001492:	00db      	lsls	r3, r3, #3
 8001494:	b25a      	sxtb	r2, r3
 8001496:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800149a:	4313      	orrs	r3, r2
 800149c:	b25b      	sxtb	r3, r3
 800149e:	71fb      	strb	r3, [r7, #7]
	// c =| 0x00; // Set Fchoice for the gyro to 11 by writing its inverse to bits 1:0 of GYRO_CONFIG
	MPU_writeByte(MPU9250_ADDRESS, GYRO_CONFIG, c ); // Write new GYRO_CONFIG value to register
 80014a0:	79fb      	ldrb	r3, [r7, #7]
 80014a2:	461a      	mov	r2, r3
 80014a4:	211b      	movs	r1, #27
 80014a6:	20d2      	movs	r0, #210	; 0xd2
 80014a8:	f7ff fd6e 	bl	8000f88 <MPU_writeByte>

	// Set accelerometer full-scale range configuration
	c = MPU_readByte(MPU9250_ADDRESS, ACCEL_CONFIG); // get current ACCEL_CONFIG register value
 80014ac:	211c      	movs	r1, #28
 80014ae:	20d2      	movs	r0, #210	; 0xd2
 80014b0:	f7ff fd91 	bl	8000fd6 <MPU_readByte>
 80014b4:	4603      	mov	r3, r0
 80014b6:	71fb      	strb	r3, [r7, #7]
	// c = c & ~0xE0; // Clear self-test bits [7:5] 
	c = c & ~0x18;  // Clear AFS bits [4:3]
 80014b8:	79fb      	ldrb	r3, [r7, #7]
 80014ba:	f023 0318 	bic.w	r3, r3, #24
 80014be:	71fb      	strb	r3, [r7, #7]
	c = c | AAscale << 3; // Set full scale range for the accelerometer
 80014c0:	4b21      	ldr	r3, [pc, #132]	; (8001548 <MPU_init+0x208>)
 80014c2:	781b      	ldrb	r3, [r3, #0]
 80014c4:	00db      	lsls	r3, r3, #3
 80014c6:	b25a      	sxtb	r2, r3
 80014c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014cc:	4313      	orrs	r3, r2
 80014ce:	b25b      	sxtb	r3, r3
 80014d0:	71fb      	strb	r3, [r7, #7]
	MPU_writeByte(MPU9250_ADDRESS, ACCEL_CONFIG, c); // Write new ACCEL_CONFIG register value
 80014d2:	79fb      	ldrb	r3, [r7, #7]
 80014d4:	461a      	mov	r2, r3
 80014d6:	211c      	movs	r1, #28
 80014d8:	20d2      	movs	r0, #210	; 0xd2
 80014da:	f7ff fd55 	bl	8000f88 <MPU_writeByte>

	// Set accelerometer sample rate configuration
	// It is possible to get a 4 kHz sample rate from the accelerometer by choosing 1 for
	// accel_fchoice_b bit [3]; in this case the bandwidth is 1.13 kHz
	c = MPU_readByte(MPU9250_ADDRESS, ACCEL_CONFIG2); // get current ACCEL_CONFIG2 register value
 80014de:	211d      	movs	r1, #29
 80014e0:	20d2      	movs	r0, #210	; 0xd2
 80014e2:	f7ff fd78 	bl	8000fd6 <MPU_readByte>
 80014e6:	4603      	mov	r3, r0
 80014e8:	71fb      	strb	r3, [r7, #7]
	c = c & ~0x0F; // Clear accel_fchoice_b (bit 3) and A_DLPFG (bits [2:0])  
 80014ea:	79fb      	ldrb	r3, [r7, #7]
 80014ec:	f023 030f 	bic.w	r3, r3, #15
 80014f0:	71fb      	strb	r3, [r7, #7]
	c = c | 0x03;  // Set accelerometer rate to 1 kHz and bandwidth to 41 Hz
 80014f2:	79fb      	ldrb	r3, [r7, #7]
 80014f4:	f043 0303 	orr.w	r3, r3, #3
 80014f8:	71fb      	strb	r3, [r7, #7]
	MPU_writeByte(MPU9250_ADDRESS, ACCEL_CONFIG2, c); // Write new ACCEL_CONFIG2 register value
 80014fa:	79fb      	ldrb	r3, [r7, #7]
 80014fc:	461a      	mov	r2, r3
 80014fe:	211d      	movs	r1, #29
 8001500:	20d2      	movs	r0, #210	; 0xd2
 8001502:	f7ff fd41 	bl	8000f88 <MPU_writeByte>
	// but all these rates are further reduced by a factor of 5 to 200 Hz because of the SMPLRT_DIV setting

	// Configure Interrupts and Bypass Enable
	// Set interrupt pin active high, push-pull, and clear on read of INT_STATUS, enable I2C_BYPASS_EN so additional chips 
	// can join the I2C bus and all can be controlled by the Arduino as master
	MPU_writeByte(MPU9250_ADDRESS, INT_PIN_CFG, 0x22);    
 8001506:	2222      	movs	r2, #34	; 0x22
 8001508:	2137      	movs	r1, #55	; 0x37
 800150a:	20d2      	movs	r0, #210	; 0xd2
 800150c:	f7ff fd3c 	bl	8000f88 <MPU_writeByte>
	MPU_writeByte(MPU9250_ADDRESS, INT_ENABLE, 0x01);  // Enable data ready (bit 0) interrupt
 8001510:	2201      	movs	r2, #1
 8001512:	2138      	movs	r1, #56	; 0x38
 8001514:	20d2      	movs	r0, #210	; 0xd2
 8001516:	f7ff fd37 	bl	8000f88 <MPU_writeByte>
}
 800151a:	bf00      	nop
 800151c:	370c      	adds	r7, #12
 800151e:	46bd      	mov	sp, r7
 8001520:	bd90      	pop	{r4, r7, pc}
 8001522:	bf00      	nop
 8001524:	f3af 8000 	nop.w
 8001528:	e8584caa 	.word	0xe8584caa
 800152c:	3febb67a 	.word	0x3febb67a
 8001530:	2000080c 	.word	0x2000080c
 8001534:	3f860a92 	.word	0x3f860a92
 8001538:	20000820 	.word	0x20000820
 800153c:	2000079c 	.word	0x2000079c
 8001540:	3c8efa36 	.word	0x3c8efa36
 8001544:	20000880 	.word	0x20000880
 8001548:	200007c4 	.word	0x200007c4
 800154c:	2000079a 	.word	0x2000079a
 8001550:	20000810 	.word	0x20000810
 8001554:	200007f0 	.word	0x200007f0
 8001558:	2000086c 	.word	0x2000086c
 800155c:	200007f4 	.word	0x200007f4
 8001560:	2000081c 	.word	0x2000081c
 8001564:	20000814 	.word	0x20000814
 8001568:	20000840 	.word	0x20000840
 800156c:	200007d0 	.word	0x200007d0
 8001570:	20000848 	.word	0x20000848
 8001574:	20000800 	.word	0x20000800
 8001578:	20000858 	.word	0x20000858
 800157c:	200007e4 	.word	0x200007e4

08001580 <AK8963_init>:
void AK8963_init(float * destination)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	b084      	sub	sp, #16
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]
	// First extract the factory calibration for each magnetometer axis
	uint8_t rawData[3];  // x/y/z gyro calibration data stored here
	MPU_writeByte(AK8963_ADDRESS, AK8963_CNTL, 0x00); // Power down magnetometer
 8001588:	2200      	movs	r2, #0
 800158a:	210a      	movs	r1, #10
 800158c:	2018      	movs	r0, #24
 800158e:	f7ff fcfb 	bl	8000f88 <MPU_writeByte>
	HAL_Delay(10);
 8001592:	200a      	movs	r0, #10
 8001594:	f003 fd2c 	bl	8004ff0 <HAL_Delay>
	MPU_writeByte(AK8963_ADDRESS, AK8963_CNTL, 0x0F); // Enter Fuse ROM access mode
 8001598:	220f      	movs	r2, #15
 800159a:	210a      	movs	r1, #10
 800159c:	2018      	movs	r0, #24
 800159e:	f7ff fcf3 	bl	8000f88 <MPU_writeByte>
	HAL_Delay(10);
 80015a2:	200a      	movs	r0, #10
 80015a4:	f003 fd24 	bl	8004ff0 <HAL_Delay>
	MPU_readBytes(AK8963_ADDRESS, AK8963_ASAX, 3, &rawData[0]);  // Read the x-, y-, and z-axis calibration values
 80015a8:	f107 030c 	add.w	r3, r7, #12
 80015ac:	2203      	movs	r2, #3
 80015ae:	2110      	movs	r1, #16
 80015b0:	2018      	movs	r0, #24
 80015b2:	f7ff fd38 	bl	8001026 <MPU_readBytes>
	destination[0] =  (float)(rawData[0] - 128)/256.0f + 1.0f;   // Return x-axis sensitivity adjustment values, etc.
 80015b6:	7b3b      	ldrb	r3, [r7, #12]
 80015b8:	3b80      	subs	r3, #128	; 0x80
 80015ba:	ee07 3a90 	vmov	s15, r3
 80015be:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80015c2:	eddf 6a26 	vldr	s13, [pc, #152]	; 800165c <AK8963_init+0xdc>
 80015c6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80015ca:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80015ce:	ee77 7a87 	vadd.f32	s15, s15, s14
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	edc3 7a00 	vstr	s15, [r3]
	destination[1] =  (float)(rawData[1] - 128)/256.0f + 1.0f;
 80015d8:	7b7b      	ldrb	r3, [r7, #13]
 80015da:	3b80      	subs	r3, #128	; 0x80
 80015dc:	ee07 3a90 	vmov	s15, r3
 80015e0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80015e4:	eddf 6a1d 	vldr	s13, [pc, #116]	; 800165c <AK8963_init+0xdc>
 80015e8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	3304      	adds	r3, #4
 80015f0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80015f4:	ee77 7a87 	vadd.f32	s15, s15, s14
 80015f8:	edc3 7a00 	vstr	s15, [r3]
	destination[2] =  (float)(rawData[2] - 128)/256.0f + 1.0f;
 80015fc:	7bbb      	ldrb	r3, [r7, #14]
 80015fe:	3b80      	subs	r3, #128	; 0x80
 8001600:	ee07 3a90 	vmov	s15, r3
 8001604:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001608:	eddf 6a14 	vldr	s13, [pc, #80]	; 800165c <AK8963_init+0xdc>
 800160c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	3308      	adds	r3, #8
 8001614:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001618:	ee77 7a87 	vadd.f32	s15, s15, s14
 800161c:	edc3 7a00 	vstr	s15, [r3]
	MPU_writeByte(AK8963_ADDRESS, AK8963_CNTL, 0x00); // Power down magnetometer
 8001620:	2200      	movs	r2, #0
 8001622:	210a      	movs	r1, #10
 8001624:	2018      	movs	r0, #24
 8001626:	f7ff fcaf 	bl	8000f88 <MPU_writeByte>
	HAL_Delay(10);
 800162a:	200a      	movs	r0, #10
 800162c:	f003 fce0 	bl	8004ff0 <HAL_Delay>
	// Configure the magnetometer for continuous read and highest resolution
	// set Mscale bit 4 to 1 (0) to enable 16 (14) bit resolution in CNTL register,
	// and enable continuous mode data acquisition Mmode (bits [3:0]), 0010 for 8 Hz and 0110 for 100 Hz sample rates
	MPU_writeByte(AK8963_ADDRESS, AK8963_CNTL, MMscale << 4 | Mmode); // Set magnetometer data resolution and sample ODR
 8001630:	4b0b      	ldr	r3, [pc, #44]	; (8001660 <AK8963_init+0xe0>)
 8001632:	781b      	ldrb	r3, [r3, #0]
 8001634:	011b      	lsls	r3, r3, #4
 8001636:	b25a      	sxtb	r2, r3
 8001638:	4b0a      	ldr	r3, [pc, #40]	; (8001664 <AK8963_init+0xe4>)
 800163a:	781b      	ldrb	r3, [r3, #0]
 800163c:	b25b      	sxtb	r3, r3
 800163e:	4313      	orrs	r3, r2
 8001640:	b25b      	sxtb	r3, r3
 8001642:	b2db      	uxtb	r3, r3
 8001644:	461a      	mov	r2, r3
 8001646:	210a      	movs	r1, #10
 8001648:	2018      	movs	r0, #24
 800164a:	f7ff fc9d 	bl	8000f88 <MPU_writeByte>
	HAL_Delay(10);
 800164e:	200a      	movs	r0, #10
 8001650:	f003 fcce 	bl	8004ff0 <HAL_Delay>
}
 8001654:	bf00      	nop
 8001656:	3710      	adds	r7, #16
 8001658:	46bd      	mov	sp, r7
 800165a:	bd80      	pop	{r7, pc}
 800165c:	43800000 	.word	0x43800000
 8001660:	20000810 	.word	0x20000810
 8001664:	200007f0 	.word	0x200007f0

08001668 <MPU_calibrate>:
	MPU_writeByte(MPU9250_ADDRESS, PWR_MGMT_1, 0x80); // Write a one to bit 7 reset bit; toggle reset device
	HAL_Delay(100);
}

void MPU_calibrate(float* dest1, float* dest2)
{  
 8001668:	b580      	push	{r7, lr}
 800166a:	b098      	sub	sp, #96	; 0x60
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]
 8001670:	6039      	str	r1, [r7, #0]
	// Function which accumulates gyro and accelerometer data after device initialization. It calculates the average
	// of the at-rest readings and then loads the resulting offsets into accelerometer and gyro bias registers.
	uint8_t data[12]; // data array to hold accelerometer and gyro x, y, z, data
	uint16_t ii, packet_count, fifo_count;
	int32_t gyro_bias[3] = {0, 0, 0}, accel_bias[3] = {0, 0, 0};
 8001672:	2300      	movs	r3, #0
 8001674:	63bb      	str	r3, [r7, #56]	; 0x38
 8001676:	2300      	movs	r3, #0
 8001678:	63fb      	str	r3, [r7, #60]	; 0x3c
 800167a:	2300      	movs	r3, #0
 800167c:	643b      	str	r3, [r7, #64]	; 0x40
 800167e:	2300      	movs	r3, #0
 8001680:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001682:	2300      	movs	r3, #0
 8001684:	633b      	str	r3, [r7, #48]	; 0x30
 8001686:	2300      	movs	r3, #0
 8001688:	637b      	str	r3, [r7, #52]	; 0x34

	// reset device, reset all registers, clear gyro and accelerometer bias registers
	MPU_writeByte(MPU9250_ADDRESS, PWR_MGMT_1, 0x80); // Write a one to bit 7 reset bit; toggle reset device
 800168a:	2280      	movs	r2, #128	; 0x80
 800168c:	216b      	movs	r1, #107	; 0x6b
 800168e:	20d2      	movs	r0, #210	; 0xd2
 8001690:	f7ff fc7a 	bl	8000f88 <MPU_writeByte>
	HAL_Delay(100);  
 8001694:	2064      	movs	r0, #100	; 0x64
 8001696:	f003 fcab 	bl	8004ff0 <HAL_Delay>

	// get stable time source
	// Set clock source to be PLL with x-axis gyroscope reference, bits 2:0 = 001
	MPU_writeByte(MPU9250_ADDRESS, PWR_MGMT_1, 0x01);  
 800169a:	2201      	movs	r2, #1
 800169c:	216b      	movs	r1, #107	; 0x6b
 800169e:	20d2      	movs	r0, #210	; 0xd2
 80016a0:	f7ff fc72 	bl	8000f88 <MPU_writeByte>
	MPU_writeByte(MPU9250_ADDRESS, PWR_MGMT_2, 0x00); 
 80016a4:	2200      	movs	r2, #0
 80016a6:	216c      	movs	r1, #108	; 0x6c
 80016a8:	20d2      	movs	r0, #210	; 0xd2
 80016aa:	f7ff fc6d 	bl	8000f88 <MPU_writeByte>
	HAL_Delay(200);
 80016ae:	20c8      	movs	r0, #200	; 0xc8
 80016b0:	f003 fc9e 	bl	8004ff0 <HAL_Delay>

	// Configure device for bias calculation
	MPU_writeByte(MPU9250_ADDRESS, INT_ENABLE, 0x00);   // Disable all interrupts
 80016b4:	2200      	movs	r2, #0
 80016b6:	2138      	movs	r1, #56	; 0x38
 80016b8:	20d2      	movs	r0, #210	; 0xd2
 80016ba:	f7ff fc65 	bl	8000f88 <MPU_writeByte>
	MPU_writeByte(MPU9250_ADDRESS, FIFO_EN, 0x00);      // Disable FIFO
 80016be:	2200      	movs	r2, #0
 80016c0:	2123      	movs	r1, #35	; 0x23
 80016c2:	20d2      	movs	r0, #210	; 0xd2
 80016c4:	f7ff fc60 	bl	8000f88 <MPU_writeByte>
	MPU_writeByte(MPU9250_ADDRESS, PWR_MGMT_1, 0x00);   // Turn on internal clock source
 80016c8:	2200      	movs	r2, #0
 80016ca:	216b      	movs	r1, #107	; 0x6b
 80016cc:	20d2      	movs	r0, #210	; 0xd2
 80016ce:	f7ff fc5b 	bl	8000f88 <MPU_writeByte>
	MPU_writeByte(MPU9250_ADDRESS, I2C_MST_CTRL, 0x00); // Disable I2C master
 80016d2:	2200      	movs	r2, #0
 80016d4:	2124      	movs	r1, #36	; 0x24
 80016d6:	20d2      	movs	r0, #210	; 0xd2
 80016d8:	f7ff fc56 	bl	8000f88 <MPU_writeByte>
	MPU_writeByte(MPU9250_ADDRESS, USER_CTRL, 0x00);    // Disable FIFO and I2C master modes
 80016dc:	2200      	movs	r2, #0
 80016de:	216a      	movs	r1, #106	; 0x6a
 80016e0:	20d2      	movs	r0, #210	; 0xd2
 80016e2:	f7ff fc51 	bl	8000f88 <MPU_writeByte>
	MPU_writeByte(MPU9250_ADDRESS, USER_CTRL, 0x0C);    // Reset FIFO and DMP
 80016e6:	220c      	movs	r2, #12
 80016e8:	216a      	movs	r1, #106	; 0x6a
 80016ea:	20d2      	movs	r0, #210	; 0xd2
 80016ec:	f7ff fc4c 	bl	8000f88 <MPU_writeByte>
	HAL_Delay(15);
 80016f0:	200f      	movs	r0, #15
 80016f2:	f003 fc7d 	bl	8004ff0 <HAL_Delay>

	// Configure MPU9250 gyro and accelerometer for bias calculation
	MPU_writeByte(MPU9250_ADDRESS, CONFIG, 0x01);      // Set low-pass filter to 188 Hz
 80016f6:	2201      	movs	r2, #1
 80016f8:	211a      	movs	r1, #26
 80016fa:	20d2      	movs	r0, #210	; 0xd2
 80016fc:	f7ff fc44 	bl	8000f88 <MPU_writeByte>
	MPU_writeByte(MPU9250_ADDRESS, SMPLRT_DIV, 0x00);  // Set sample rate to 1 kHz
 8001700:	2200      	movs	r2, #0
 8001702:	2119      	movs	r1, #25
 8001704:	20d2      	movs	r0, #210	; 0xd2
 8001706:	f7ff fc3f 	bl	8000f88 <MPU_writeByte>
	MPU_writeByte(MPU9250_ADDRESS, GYRO_CONFIG, 0x00);  // Set gyro full-scale to 250 degrees per second, maximum sensitivity
 800170a:	2200      	movs	r2, #0
 800170c:	211b      	movs	r1, #27
 800170e:	20d2      	movs	r0, #210	; 0xd2
 8001710:	f7ff fc3a 	bl	8000f88 <MPU_writeByte>
	MPU_writeByte(MPU9250_ADDRESS, ACCEL_CONFIG, 0x00); // Set accelerometer full-scale to 2 g, maximum sensitivity
 8001714:	2200      	movs	r2, #0
 8001716:	211c      	movs	r1, #28
 8001718:	20d2      	movs	r0, #210	; 0xd2
 800171a:	f7ff fc35 	bl	8000f88 <MPU_writeByte>

	uint16_t  gyrosensitivity  = 131;   // = 131 LSB/degrees/sec
 800171e:	2383      	movs	r3, #131	; 0x83
 8001720:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
	uint16_t  accelsensitivity = 16384;  // = 16384 LSB/g
 8001724:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001728:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a

	// Configure FIFO to capture accelerometer and gyro data for bias calculation
	MPU_writeByte(MPU9250_ADDRESS, USER_CTRL, 0x40);   // Enable FIFO  
 800172c:	2240      	movs	r2, #64	; 0x40
 800172e:	216a      	movs	r1, #106	; 0x6a
 8001730:	20d2      	movs	r0, #210	; 0xd2
 8001732:	f7ff fc29 	bl	8000f88 <MPU_writeByte>
	MPU_writeByte(MPU9250_ADDRESS, FIFO_EN, 0x78);     // Enable gyro and accelerometer sensors for FIFO (max size 512 bytes in MPU-9250)
 8001736:	2278      	movs	r2, #120	; 0x78
 8001738:	2123      	movs	r1, #35	; 0x23
 800173a:	20d2      	movs	r0, #210	; 0xd2
 800173c:	f7ff fc24 	bl	8000f88 <MPU_writeByte>
	HAL_Delay(40); // accumulate 40 samples in 80 milliseconds = 480 bytes
 8001740:	2028      	movs	r0, #40	; 0x28
 8001742:	f003 fc55 	bl	8004ff0 <HAL_Delay>

	// At end of sample accumulation, turn off FIFO sensor read
	MPU_writeByte(MPU9250_ADDRESS, FIFO_EN, 0x00);        // Disable gyro and accelerometer sensors for FIFO
 8001746:	2200      	movs	r2, #0
 8001748:	2123      	movs	r1, #35	; 0x23
 800174a:	20d2      	movs	r0, #210	; 0xd2
 800174c:	f7ff fc1c 	bl	8000f88 <MPU_writeByte>
	MPU_readBytes(MPU9250_ADDRESS, FIFO_COUNTH, 2, &data[0]); // read FIFO sample count
 8001750:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001754:	2202      	movs	r2, #2
 8001756:	2172      	movs	r1, #114	; 0x72
 8001758:	20d2      	movs	r0, #210	; 0xd2
 800175a:	f7ff fc64 	bl	8001026 <MPU_readBytes>
	fifo_count = ((uint16_t)data[0] << 8) | data[1];
 800175e:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8001762:	021b      	lsls	r3, r3, #8
 8001764:	b21a      	sxth	r2, r3
 8001766:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 800176a:	b21b      	sxth	r3, r3
 800176c:	4313      	orrs	r3, r2
 800176e:	b21b      	sxth	r3, r3
 8001770:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
	packet_count = fifo_count/12;// How many sets of full gyro and accelerometer data for averaging
 8001774:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 8001778:	4ab0      	ldr	r2, [pc, #704]	; (8001a3c <MPU_calibrate+0x3d4>)
 800177a:	fba2 2303 	umull	r2, r3, r2, r3
 800177e:	08db      	lsrs	r3, r3, #3
 8001780:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56

	for (ii = 0; ii < packet_count; ii++)
 8001784:	2300      	movs	r3, #0
 8001786:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 800178a:	e071      	b.n	8001870 <MPU_calibrate+0x208>
	{
		int16_t accel_temp[3] = {0, 0, 0}, gyro_temp[3] = {0, 0, 0};
 800178c:	2300      	movs	r3, #0
 800178e:	82bb      	strh	r3, [r7, #20]
 8001790:	2300      	movs	r3, #0
 8001792:	82fb      	strh	r3, [r7, #22]
 8001794:	2300      	movs	r3, #0
 8001796:	833b      	strh	r3, [r7, #24]
 8001798:	2300      	movs	r3, #0
 800179a:	81bb      	strh	r3, [r7, #12]
 800179c:	2300      	movs	r3, #0
 800179e:	81fb      	strh	r3, [r7, #14]
 80017a0:	2300      	movs	r3, #0
 80017a2:	823b      	strh	r3, [r7, #16]
		MPU_readBytes(MPU9250_ADDRESS, FIFO_R_W, 12, &data[0]); // read data for averaging
 80017a4:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80017a8:	220c      	movs	r2, #12
 80017aa:	2174      	movs	r1, #116	; 0x74
 80017ac:	20d2      	movs	r0, #210	; 0xd2
 80017ae:	f7ff fc3a 	bl	8001026 <MPU_readBytes>
		accel_temp[0] = (int16_t) (((int16_t)data[0] << 8) | data[1]  ) ;  // Form signed 16-bit integer for each sample in FIFO
 80017b2:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 80017b6:	021b      	lsls	r3, r3, #8
 80017b8:	b21a      	sxth	r2, r3
 80017ba:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 80017be:	b21b      	sxth	r3, r3
 80017c0:	4313      	orrs	r3, r2
 80017c2:	b21b      	sxth	r3, r3
 80017c4:	82bb      	strh	r3, [r7, #20]
		accel_temp[1] = (int16_t) (((int16_t)data[2] << 8) | data[3]  ) ;
 80017c6:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80017ca:	021b      	lsls	r3, r3, #8
 80017cc:	b21a      	sxth	r2, r3
 80017ce:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80017d2:	b21b      	sxth	r3, r3
 80017d4:	4313      	orrs	r3, r2
 80017d6:	b21b      	sxth	r3, r3
 80017d8:	82fb      	strh	r3, [r7, #22]
		accel_temp[2] = (int16_t) (((int16_t)data[4] << 8) | data[5]  ) ;    
 80017da:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 80017de:	021b      	lsls	r3, r3, #8
 80017e0:	b21a      	sxth	r2, r3
 80017e2:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 80017e6:	b21b      	sxth	r3, r3
 80017e8:	4313      	orrs	r3, r2
 80017ea:	b21b      	sxth	r3, r3
 80017ec:	833b      	strh	r3, [r7, #24]
		gyro_temp[0]  = (int16_t) (((int16_t)data[6] << 8) | data[7]  ) ;
 80017ee:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 80017f2:	021b      	lsls	r3, r3, #8
 80017f4:	b21a      	sxth	r2, r3
 80017f6:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 80017fa:	b21b      	sxth	r3, r3
 80017fc:	4313      	orrs	r3, r2
 80017fe:	b21b      	sxth	r3, r3
 8001800:	81bb      	strh	r3, [r7, #12]
		gyro_temp[1]  = (int16_t) (((int16_t)data[8] << 8) | data[9]  ) ;
 8001802:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8001806:	021b      	lsls	r3, r3, #8
 8001808:	b21a      	sxth	r2, r3
 800180a:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800180e:	b21b      	sxth	r3, r3
 8001810:	4313      	orrs	r3, r2
 8001812:	b21b      	sxth	r3, r3
 8001814:	81fb      	strh	r3, [r7, #14]
		gyro_temp[2]  = (int16_t) (((int16_t)data[10] << 8) | data[11]) ;
 8001816:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 800181a:	021b      	lsls	r3, r3, #8
 800181c:	b21a      	sxth	r2, r3
 800181e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8001822:	b21b      	sxth	r3, r3
 8001824:	4313      	orrs	r3, r2
 8001826:	b21b      	sxth	r3, r3
 8001828:	823b      	strh	r3, [r7, #16]

		accel_bias[0] += (int32_t) accel_temp[0]; // Sum individual signed 16-bit biases to get accumulated signed 32-bit biases
 800182a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800182c:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8001830:	4413      	add	r3, r2
 8001832:	62fb      	str	r3, [r7, #44]	; 0x2c
		accel_bias[1] += (int32_t) accel_temp[1];
 8001834:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001836:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800183a:	4413      	add	r3, r2
 800183c:	633b      	str	r3, [r7, #48]	; 0x30
		accel_bias[2] += (int32_t) accel_temp[2];
 800183e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001840:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8001844:	4413      	add	r3, r2
 8001846:	637b      	str	r3, [r7, #52]	; 0x34
		gyro_bias[0]  += (int32_t) gyro_temp[0];
 8001848:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800184a:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800184e:	4413      	add	r3, r2
 8001850:	63bb      	str	r3, [r7, #56]	; 0x38
		gyro_bias[1]  += (int32_t) gyro_temp[1];
 8001852:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001854:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8001858:	4413      	add	r3, r2
 800185a:	63fb      	str	r3, [r7, #60]	; 0x3c
		gyro_bias[2]  += (int32_t) gyro_temp[2];
 800185c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800185e:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8001862:	4413      	add	r3, r2
 8001864:	643b      	str	r3, [r7, #64]	; 0x40
	for (ii = 0; ii < packet_count; ii++)
 8001866:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 800186a:	3301      	adds	r3, #1
 800186c:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8001870:	f8b7 205e 	ldrh.w	r2, [r7, #94]	; 0x5e
 8001874:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8001878:	429a      	cmp	r2, r3
 800187a:	d387      	bcc.n	800178c <MPU_calibrate+0x124>
	}
	accel_bias[0] /= (int32_t) packet_count; // Normalize sums to get average count biases
 800187c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800187e:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8001882:	fb92 f3f3 	sdiv	r3, r2, r3
 8001886:	62fb      	str	r3, [r7, #44]	; 0x2c
	accel_bias[1] /= (int32_t) packet_count;
 8001888:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800188a:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800188e:	fb92 f3f3 	sdiv	r3, r2, r3
 8001892:	633b      	str	r3, [r7, #48]	; 0x30
	accel_bias[2] /= (int32_t) packet_count;
 8001894:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001896:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800189a:	fb92 f3f3 	sdiv	r3, r2, r3
 800189e:	637b      	str	r3, [r7, #52]	; 0x34
	gyro_bias[0]  /= (int32_t) packet_count;
 80018a0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80018a2:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80018a6:	fb92 f3f3 	sdiv	r3, r2, r3
 80018aa:	63bb      	str	r3, [r7, #56]	; 0x38
	gyro_bias[1]  /= (int32_t) packet_count;
 80018ac:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80018ae:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80018b2:	fb92 f3f3 	sdiv	r3, r2, r3
 80018b6:	63fb      	str	r3, [r7, #60]	; 0x3c
	gyro_bias[2]  /= (int32_t) packet_count;
 80018b8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80018ba:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80018be:	fb92 f3f3 	sdiv	r3, r2, r3
 80018c2:	643b      	str	r3, [r7, #64]	; 0x40

	if(accel_bias[2] > 0L) {accel_bias[2] -= (int32_t) accelsensitivity;}  // Remove gravity from the z-axis accelerometer bias calculation
 80018c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	dd05      	ble.n	80018d6 <MPU_calibrate+0x26e>
 80018ca:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80018cc:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 80018d0:	1ad3      	subs	r3, r2, r3
 80018d2:	637b      	str	r3, [r7, #52]	; 0x34
 80018d4:	e004      	b.n	80018e0 <MPU_calibrate+0x278>
	else {accel_bias[2] += (int32_t) accelsensitivity;}
 80018d6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80018d8:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 80018dc:	4413      	add	r3, r2
 80018de:	637b      	str	r3, [r7, #52]	; 0x34

	// Construct the gyro biases for push to the hardware gyro bias registers, which are reset to zero upon device startup
	data[0] = (-gyro_bias[0]/4  >> 8) & 0xFF; // Divide by 4 to get 32.9 LSB per deg/s to conform to expected bias input format
 80018e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80018e2:	425b      	negs	r3, r3
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	da00      	bge.n	80018ea <MPU_calibrate+0x282>
 80018e8:	3303      	adds	r3, #3
 80018ea:	109b      	asrs	r3, r3, #2
 80018ec:	121b      	asrs	r3, r3, #8
 80018ee:	b2db      	uxtb	r3, r3
 80018f0:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
	data[1] = (-gyro_bias[0]/4)       & 0xFF; // Biases are additive, so change sign on calculated average gyro biases
 80018f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80018f6:	425b      	negs	r3, r3
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	da00      	bge.n	80018fe <MPU_calibrate+0x296>
 80018fc:	3303      	adds	r3, #3
 80018fe:	109b      	asrs	r3, r3, #2
 8001900:	b2db      	uxtb	r3, r3
 8001902:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
	data[2] = (-gyro_bias[1]/4  >> 8) & 0xFF;
 8001906:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001908:	425b      	negs	r3, r3
 800190a:	2b00      	cmp	r3, #0
 800190c:	da00      	bge.n	8001910 <MPU_calibrate+0x2a8>
 800190e:	3303      	adds	r3, #3
 8001910:	109b      	asrs	r3, r3, #2
 8001912:	121b      	asrs	r3, r3, #8
 8001914:	b2db      	uxtb	r3, r3
 8001916:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
	data[3] = (-gyro_bias[1]/4)       & 0xFF;
 800191a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800191c:	425b      	negs	r3, r3
 800191e:	2b00      	cmp	r3, #0
 8001920:	da00      	bge.n	8001924 <MPU_calibrate+0x2bc>
 8001922:	3303      	adds	r3, #3
 8001924:	109b      	asrs	r3, r3, #2
 8001926:	b2db      	uxtb	r3, r3
 8001928:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	data[4] = (-gyro_bias[2]/4  >> 8) & 0xFF;
 800192c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800192e:	425b      	negs	r3, r3
 8001930:	2b00      	cmp	r3, #0
 8001932:	da00      	bge.n	8001936 <MPU_calibrate+0x2ce>
 8001934:	3303      	adds	r3, #3
 8001936:	109b      	asrs	r3, r3, #2
 8001938:	121b      	asrs	r3, r3, #8
 800193a:	b2db      	uxtb	r3, r3
 800193c:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
	data[5] = (-gyro_bias[2]/4)       & 0xFF;
 8001940:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001942:	425b      	negs	r3, r3
 8001944:	2b00      	cmp	r3, #0
 8001946:	da00      	bge.n	800194a <MPU_calibrate+0x2e2>
 8001948:	3303      	adds	r3, #3
 800194a:	109b      	asrs	r3, r3, #2
 800194c:	b2db      	uxtb	r3, r3
 800194e:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
	MPU_writeByte(MPU9250_ADDRESS, YG_OFFSET_H, data[2]);
	MPU_writeByte(MPU9250_ADDRESS, YG_OFFSET_L, data[3]);
	MPU_writeByte(MPU9250_ADDRESS, ZG_OFFSET_H, data[4]);
	MPU_writeByte(MPU9250_ADDRESS, ZG_OFFSET_L, data[5]);
	*/
	dest1[0] = (float) gyro_bias[0]/(float) gyrosensitivity; // construct gyro bias in deg/s for later manual subtraction
 8001952:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001954:	ee07 3a90 	vmov	s15, r3
 8001958:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800195c:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8001960:	ee07 3a90 	vmov	s15, r3
 8001964:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001968:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	edc3 7a00 	vstr	s15, [r3]
	dest1[1] = (float) gyro_bias[1]/(float) gyrosensitivity;
 8001972:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001974:	ee07 3a90 	vmov	s15, r3
 8001978:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800197c:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8001980:	ee07 3a90 	vmov	s15, r3
 8001984:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	3304      	adds	r3, #4
 800198c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001990:	edc3 7a00 	vstr	s15, [r3]
	dest1[2] = (float) gyro_bias[2]/(float) gyrosensitivity;
 8001994:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001996:	ee07 3a90 	vmov	s15, r3
 800199a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800199e:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 80019a2:	ee07 3a90 	vmov	s15, r3
 80019a6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	3308      	adds	r3, #8
 80019ae:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80019b2:	edc3 7a00 	vstr	s15, [r3]
	// factory trim values which must be added to the calculated accelerometer biases; on boot up these registers will hold
	// non-zero values. In addition, bit 0 of the lower byte must be preserved since it is used for temperature
	// compensation calculations. Accelerometer bias registers expect bias input as 2048 LSB per g, so that
	// the accelerometer biases calculated above must be divided by 8.

	int32_t accel_bias_reg[3] = {0, 0, 0}; // A place to hold the factory accelerometer trim biases
 80019b6:	2300      	movs	r3, #0
 80019b8:	623b      	str	r3, [r7, #32]
 80019ba:	2300      	movs	r3, #0
 80019bc:	627b      	str	r3, [r7, #36]	; 0x24
 80019be:	2300      	movs	r3, #0
 80019c0:	62bb      	str	r3, [r7, #40]	; 0x28
	MPU_readBytes(MPU9250_ADDRESS, XA_OFFSET_H, 2, &data[0]); // Read factory accelerometer trim values
 80019c2:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80019c6:	2202      	movs	r2, #2
 80019c8:	2177      	movs	r1, #119	; 0x77
 80019ca:	20d2      	movs	r0, #210	; 0xd2
 80019cc:	f7ff fb2b 	bl	8001026 <MPU_readBytes>
	accel_bias_reg[0] = (int16_t) ((int16_t)data[0] << 8) | data[1];
 80019d0:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 80019d4:	021b      	lsls	r3, r3, #8
 80019d6:	b21b      	sxth	r3, r3
 80019d8:	461a      	mov	r2, r3
 80019da:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 80019de:	4313      	orrs	r3, r2
 80019e0:	623b      	str	r3, [r7, #32]
	MPU_readBytes(MPU9250_ADDRESS, YA_OFFSET_H, 2, &data[0]);
 80019e2:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80019e6:	2202      	movs	r2, #2
 80019e8:	217a      	movs	r1, #122	; 0x7a
 80019ea:	20d2      	movs	r0, #210	; 0xd2
 80019ec:	f7ff fb1b 	bl	8001026 <MPU_readBytes>
	accel_bias_reg[1] = (int16_t) ((int16_t)data[0] << 8) | data[1];
 80019f0:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 80019f4:	021b      	lsls	r3, r3, #8
 80019f6:	b21b      	sxth	r3, r3
 80019f8:	461a      	mov	r2, r3
 80019fa:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 80019fe:	4313      	orrs	r3, r2
 8001a00:	627b      	str	r3, [r7, #36]	; 0x24
	MPU_readBytes(MPU9250_ADDRESS, ZA_OFFSET_H, 2, &data[0]);
 8001a02:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001a06:	2202      	movs	r2, #2
 8001a08:	217d      	movs	r1, #125	; 0x7d
 8001a0a:	20d2      	movs	r0, #210	; 0xd2
 8001a0c:	f7ff fb0b 	bl	8001026 <MPU_readBytes>
	accel_bias_reg[2] = (int16_t) ((int16_t)data[0] << 8) | data[1];
 8001a10:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8001a14:	021b      	lsls	r3, r3, #8
 8001a16:	b21b      	sxth	r3, r3
 8001a18:	461a      	mov	r2, r3
 8001a1a:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8001a1e:	4313      	orrs	r3, r2
 8001a20:	62bb      	str	r3, [r7, #40]	; 0x28

	uint32_t mask = 1uL; // Define mask for temperature compensation bit 0 of lower byte of accelerometer bias registers
 8001a22:	2301      	movs	r3, #1
 8001a24:	653b      	str	r3, [r7, #80]	; 0x50
	uint8_t mask_bit[3] = {0, 0, 0}; // Define array to hold mask bit for each accelerometer bias axis
 8001a26:	2300      	movs	r3, #0
 8001a28:	773b      	strb	r3, [r7, #28]
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	777b      	strb	r3, [r7, #29]
 8001a2e:	2300      	movs	r3, #0
 8001a30:	77bb      	strb	r3, [r7, #30]

	for(ii = 0; ii < 3; ii++)
 8001a32:	2300      	movs	r3, #0
 8001a34:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8001a38:	e01c      	b.n	8001a74 <MPU_calibrate+0x40c>
 8001a3a:	bf00      	nop
 8001a3c:	aaaaaaab 	.word	0xaaaaaaab
	{
		if(accel_bias_reg[ii] & mask) mask_bit[ii] = 0x01; // If temperature compensation bit is set, record that fact in mask_bit
 8001a40:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8001a44:	009b      	lsls	r3, r3, #2
 8001a46:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001a4a:	4413      	add	r3, r2
 8001a4c:	f853 3c40 	ldr.w	r3, [r3, #-64]
 8001a50:	461a      	mov	r2, r3
 8001a52:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001a54:	4013      	ands	r3, r2
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d007      	beq.n	8001a6a <MPU_calibrate+0x402>
 8001a5a:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8001a5e:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001a62:	4413      	add	r3, r2
 8001a64:	2201      	movs	r2, #1
 8001a66:	f803 2c44 	strb.w	r2, [r3, #-68]
	for(ii = 0; ii < 3; ii++)
 8001a6a:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8001a6e:	3301      	adds	r3, #1
 8001a70:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8001a74:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8001a78:	2b02      	cmp	r3, #2
 8001a7a:	d9e1      	bls.n	8001a40 <MPU_calibrate+0x3d8>
	}

	// Construct total accelerometer bias, including calculated average accelerometer bias from above
	accel_bias_reg[0] -= (accel_bias[0]/8); // Subtract calculated averaged accelerometer bias scaled to 2048 LSB/g (16 g full scale)
 8001a7c:	6a3a      	ldr	r2, [r7, #32]
 8001a7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	da00      	bge.n	8001a86 <MPU_calibrate+0x41e>
 8001a84:	3307      	adds	r3, #7
 8001a86:	10db      	asrs	r3, r3, #3
 8001a88:	425b      	negs	r3, r3
 8001a8a:	4413      	add	r3, r2
 8001a8c:	623b      	str	r3, [r7, #32]
	accel_bias_reg[1] -= (accel_bias[1]/8);
 8001a8e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	da00      	bge.n	8001a98 <MPU_calibrate+0x430>
 8001a96:	3307      	adds	r3, #7
 8001a98:	10db      	asrs	r3, r3, #3
 8001a9a:	425b      	negs	r3, r3
 8001a9c:	4413      	add	r3, r2
 8001a9e:	627b      	str	r3, [r7, #36]	; 0x24
	accel_bias_reg[2] -= (accel_bias[2]/8);
 8001aa0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001aa2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	da00      	bge.n	8001aaa <MPU_calibrate+0x442>
 8001aa8:	3307      	adds	r3, #7
 8001aaa:	10db      	asrs	r3, r3, #3
 8001aac:	425b      	negs	r3, r3
 8001aae:	4413      	add	r3, r2
 8001ab0:	62bb      	str	r3, [r7, #40]	; 0x28

	data[0] = (accel_bias_reg[0] >> 8) & 0xFF;
 8001ab2:	6a3b      	ldr	r3, [r7, #32]
 8001ab4:	121b      	asrs	r3, r3, #8
 8001ab6:	b2db      	uxtb	r3, r3
 8001ab8:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
	data[1] = (accel_bias_reg[0])      & 0xFF;
 8001abc:	6a3b      	ldr	r3, [r7, #32]
 8001abe:	b2db      	uxtb	r3, r3
 8001ac0:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
	data[1] = data[1] | mask_bit[0]; // preserve temperature compensation bit when writing back to accelerometer bias registers
 8001ac4:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8001ac8:	7f3b      	ldrb	r3, [r7, #28]
 8001aca:	4313      	orrs	r3, r2
 8001acc:	b2db      	uxtb	r3, r3
 8001ace:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
	data[2] = (accel_bias_reg[1] >> 8) & 0xFF;
 8001ad2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ad4:	121b      	asrs	r3, r3, #8
 8001ad6:	b2db      	uxtb	r3, r3
 8001ad8:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
	data[3] = (accel_bias_reg[1])      & 0xFF;
 8001adc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ade:	b2db      	uxtb	r3, r3
 8001ae0:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	data[3] = data[3] | mask_bit[1]; // preserve temperature compensation bit when writing back to accelerometer bias registers
 8001ae4:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 8001ae8:	7f7b      	ldrb	r3, [r7, #29]
 8001aea:	4313      	orrs	r3, r2
 8001aec:	b2db      	uxtb	r3, r3
 8001aee:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	data[4] = (accel_bias_reg[2] >> 8) & 0xFF;
 8001af2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001af4:	121b      	asrs	r3, r3, #8
 8001af6:	b2db      	uxtb	r3, r3
 8001af8:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
	data[5] = (accel_bias_reg[2])      & 0xFF;
 8001afc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001afe:	b2db      	uxtb	r3, r3
 8001b00:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
	data[5] = data[5] | mask_bit[2]; // preserve temperature compensation bit when writing back to accelerometer bias registers
 8001b04:	f897 2049 	ldrb.w	r2, [r7, #73]	; 0x49
 8001b08:	7fbb      	ldrb	r3, [r7, #30]
 8001b0a:	4313      	orrs	r3, r2
 8001b0c:	b2db      	uxtb	r3, r3
 8001b0e:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
	MPU_writeByte(MPU9250_ADDRESS, YA_OFFSET_L, data[3]);
	MPU_writeByte(MPU9250_ADDRESS, ZA_OFFSET_H, data[4]);
	MPU_writeByte(MPU9250_ADDRESS, ZA_OFFSET_L, data[5]);
	*/
	// Output scaled accelerometer biases for manual subtraction in the main program
	dest2[0] = (float)accel_bias[0]/(float)accelsensitivity; 
 8001b12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b14:	ee07 3a90 	vmov	s15, r3
 8001b18:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001b1c:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8001b20:	ee07 3a90 	vmov	s15, r3
 8001b24:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001b28:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001b2c:	683b      	ldr	r3, [r7, #0]
 8001b2e:	edc3 7a00 	vstr	s15, [r3]
	dest2[1] = (float)accel_bias[1]/(float)accelsensitivity;
 8001b32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b34:	ee07 3a90 	vmov	s15, r3
 8001b38:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001b3c:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8001b40:	ee07 3a90 	vmov	s15, r3
 8001b44:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001b48:	683b      	ldr	r3, [r7, #0]
 8001b4a:	3304      	adds	r3, #4
 8001b4c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001b50:	edc3 7a00 	vstr	s15, [r3]
	dest2[2] = (float)accel_bias[2]/(float)accelsensitivity;
 8001b54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b56:	ee07 3a90 	vmov	s15, r3
 8001b5a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001b5e:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8001b62:	ee07 3a90 	vmov	s15, r3
 8001b66:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001b6a:	683b      	ldr	r3, [r7, #0]
 8001b6c:	3308      	adds	r3, #8
 8001b6e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001b72:	edc3 7a00 	vstr	s15, [r3]
}
 8001b76:	bf00      	nop
 8001b78:	3760      	adds	r7, #96	; 0x60
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	bd80      	pop	{r7, pc}
 8001b7e:	bf00      	nop

08001b80 <MPU_SelfTest>:
void MPU_SelfTest(float* destination)
{
 8001b80:	b5b0      	push	{r4, r5, r7, lr}
 8001b82:	b09e      	sub	sp, #120	; 0x78
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	6078      	str	r0, [r7, #4]
	// Accelerometer and gyroscope self test; check calibration wrt factory settings
	 // Should return percent deviation from factory trim values, +/- 14 or less deviation is a pass
	uint8_t rawData[6] = {0, 0, 0, 0, 0, 0};
 8001b88:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	601a      	str	r2, [r3, #0]
 8001b90:	809a      	strh	r2, [r3, #4]
	uint8_t selfTest[6];
	int32_t gAvg[3] = {0}, aAvg[3] = {0}, aSTAvg[3] = {0}, gSTAvg[3] = {0};
 8001b92:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001b96:	2200      	movs	r2, #0
 8001b98:	601a      	str	r2, [r3, #0]
 8001b9a:	605a      	str	r2, [r3, #4]
 8001b9c:	609a      	str	r2, [r3, #8]
 8001b9e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	601a      	str	r2, [r3, #0]
 8001ba6:	605a      	str	r2, [r3, #4]
 8001ba8:	609a      	str	r2, [r3, #8]
 8001baa:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001bae:	2200      	movs	r2, #0
 8001bb0:	601a      	str	r2, [r3, #0]
 8001bb2:	605a      	str	r2, [r3, #4]
 8001bb4:	609a      	str	r2, [r3, #8]
 8001bb6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001bba:	2200      	movs	r2, #0
 8001bbc:	601a      	str	r2, [r3, #0]
 8001bbe:	605a      	str	r2, [r3, #4]
 8001bc0:	609a      	str	r2, [r3, #8]
	float factoryTrim[6];
	uint8_t FS = 0;
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63

	MPU_writeByte(MPU9250_ADDRESS, SMPLRT_DIV, 0x00); // Set gyro sample rate to 1 kHz
 8001bc8:	2200      	movs	r2, #0
 8001bca:	2119      	movs	r1, #25
 8001bcc:	20d2      	movs	r0, #210	; 0xd2
 8001bce:	f7ff f9db 	bl	8000f88 <MPU_writeByte>
	MPU_writeByte(MPU9250_ADDRESS, CONFIG, 0x02); // Set gyro sample rate to 1 kHz and DLPF to 92 Hz
 8001bd2:	2202      	movs	r2, #2
 8001bd4:	211a      	movs	r1, #26
 8001bd6:	20d2      	movs	r0, #210	; 0xd2
 8001bd8:	f7ff f9d6 	bl	8000f88 <MPU_writeByte>
	MPU_writeByte(MPU9250_ADDRESS, GYRO_CONFIG, FS<<3); // Set full scale range for the gyro to 250 dps
 8001bdc:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 8001be0:	00db      	lsls	r3, r3, #3
 8001be2:	b2db      	uxtb	r3, r3
 8001be4:	461a      	mov	r2, r3
 8001be6:	211b      	movs	r1, #27
 8001be8:	20d2      	movs	r0, #210	; 0xd2
 8001bea:	f7ff f9cd 	bl	8000f88 <MPU_writeByte>
	MPU_writeByte(MPU9250_ADDRESS, ACCEL_CONFIG2, 0x02); // Set accelerometer rate to 1 kHz and bandwidth to 92 Hz
 8001bee:	2202      	movs	r2, #2
 8001bf0:	211d      	movs	r1, #29
 8001bf2:	20d2      	movs	r0, #210	; 0xd2
 8001bf4:	f7ff f9c8 	bl	8000f88 <MPU_writeByte>
	MPU_writeByte(MPU9250_ADDRESS, ACCEL_CONFIG, FS<<3); // Set full scale range for the accelerometer to 2 g
 8001bf8:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 8001bfc:	00db      	lsls	r3, r3, #3
 8001bfe:	b2db      	uxtb	r3, r3
 8001c00:	461a      	mov	r2, r3
 8001c02:	211c      	movs	r1, #28
 8001c04:	20d2      	movs	r0, #210	; 0xd2
 8001c06:	f7ff f9bf 	bl	8000f88 <MPU_writeByte>

	for( int ii = 0; ii < 200; ii++)
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	677b      	str	r3, [r7, #116]	; 0x74
 8001c0e:	e058      	b.n	8001cc2 <MPU_SelfTest+0x142>
	{ // get average current values of gyro and acclerometer

		MPU_readBytes(MPU9250_ADDRESS, ACCEL_XOUT_H, 6, &rawData[0]); // Read the six raw data registers into data array
 8001c10:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001c14:	2206      	movs	r2, #6
 8001c16:	213b      	movs	r1, #59	; 0x3b
 8001c18:	20d2      	movs	r0, #210	; 0xd2
 8001c1a:	f7ff fa04 	bl	8001026 <MPU_readBytes>
		aAvg[0] += (int16_t)(((int16_t)rawData[0] << 8) | rawData[1]) ; // Turn the MSB and LSB into a signed 16-bit value
 8001c1e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001c20:	f897 205c 	ldrb.w	r2, [r7, #92]	; 0x5c
 8001c24:	0212      	lsls	r2, r2, #8
 8001c26:	b211      	sxth	r1, r2
 8001c28:	f897 205d 	ldrb.w	r2, [r7, #93]	; 0x5d
 8001c2c:	b212      	sxth	r2, r2
 8001c2e:	430a      	orrs	r2, r1
 8001c30:	b212      	sxth	r2, r2
 8001c32:	4413      	add	r3, r2
 8001c34:	63fb      	str	r3, [r7, #60]	; 0x3c
		aAvg[1] += (int16_t)(((int16_t)rawData[2] << 8) | rawData[3]) ;
 8001c36:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001c38:	f897 205e 	ldrb.w	r2, [r7, #94]	; 0x5e
 8001c3c:	0212      	lsls	r2, r2, #8
 8001c3e:	b211      	sxth	r1, r2
 8001c40:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 8001c44:	b212      	sxth	r2, r2
 8001c46:	430a      	orrs	r2, r1
 8001c48:	b212      	sxth	r2, r2
 8001c4a:	4413      	add	r3, r2
 8001c4c:	643b      	str	r3, [r7, #64]	; 0x40
		aAvg[2] += (int16_t)(((int16_t)rawData[4] << 8) | rawData[5]) ;
 8001c4e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001c50:	f897 2060 	ldrb.w	r2, [r7, #96]	; 0x60
 8001c54:	0212      	lsls	r2, r2, #8
 8001c56:	b211      	sxth	r1, r2
 8001c58:	f897 2061 	ldrb.w	r2, [r7, #97]	; 0x61
 8001c5c:	b212      	sxth	r2, r2
 8001c5e:	430a      	orrs	r2, r1
 8001c60:	b212      	sxth	r2, r2
 8001c62:	4413      	add	r3, r2
 8001c64:	647b      	str	r3, [r7, #68]	; 0x44

		MPU_readBytes(MPU9250_ADDRESS, GYRO_XOUT_H, 6, &rawData[0]); // Read the six raw data registers sequentially into data array
 8001c66:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001c6a:	2206      	movs	r2, #6
 8001c6c:	2143      	movs	r1, #67	; 0x43
 8001c6e:	20d2      	movs	r0, #210	; 0xd2
 8001c70:	f7ff f9d9 	bl	8001026 <MPU_readBytes>
		gAvg[0] += (int16_t)(((int16_t)rawData[0] << 8) | rawData[1]) ; // Turn the MSB and LSB into a signed 16-bit value
 8001c74:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001c76:	f897 205c 	ldrb.w	r2, [r7, #92]	; 0x5c
 8001c7a:	0212      	lsls	r2, r2, #8
 8001c7c:	b211      	sxth	r1, r2
 8001c7e:	f897 205d 	ldrb.w	r2, [r7, #93]	; 0x5d
 8001c82:	b212      	sxth	r2, r2
 8001c84:	430a      	orrs	r2, r1
 8001c86:	b212      	sxth	r2, r2
 8001c88:	4413      	add	r3, r2
 8001c8a:	64bb      	str	r3, [r7, #72]	; 0x48
		gAvg[1] += (int16_t)(((int16_t)rawData[2] << 8) | rawData[3]) ;
 8001c8c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001c8e:	f897 205e 	ldrb.w	r2, [r7, #94]	; 0x5e
 8001c92:	0212      	lsls	r2, r2, #8
 8001c94:	b211      	sxth	r1, r2
 8001c96:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 8001c9a:	b212      	sxth	r2, r2
 8001c9c:	430a      	orrs	r2, r1
 8001c9e:	b212      	sxth	r2, r2
 8001ca0:	4413      	add	r3, r2
 8001ca2:	64fb      	str	r3, [r7, #76]	; 0x4c
		gAvg[2] += (int16_t)(((int16_t)rawData[4] << 8) | rawData[5]) ;
 8001ca4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001ca6:	f897 2060 	ldrb.w	r2, [r7, #96]	; 0x60
 8001caa:	0212      	lsls	r2, r2, #8
 8001cac:	b211      	sxth	r1, r2
 8001cae:	f897 2061 	ldrb.w	r2, [r7, #97]	; 0x61
 8001cb2:	b212      	sxth	r2, r2
 8001cb4:	430a      	orrs	r2, r1
 8001cb6:	b212      	sxth	r2, r2
 8001cb8:	4413      	add	r3, r2
 8001cba:	653b      	str	r3, [r7, #80]	; 0x50
	for( int ii = 0; ii < 200; ii++)
 8001cbc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001cbe:	3301      	adds	r3, #1
 8001cc0:	677b      	str	r3, [r7, #116]	; 0x74
 8001cc2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001cc4:	2bc7      	cmp	r3, #199	; 0xc7
 8001cc6:	dda3      	ble.n	8001c10 <MPU_SelfTest+0x90>
	}

	for (int ii =0; ii < 3; ii++)
 8001cc8:	2300      	movs	r3, #0
 8001cca:	673b      	str	r3, [r7, #112]	; 0x70
 8001ccc:	e02a      	b.n	8001d24 <MPU_SelfTest+0x1a4>
	{ // Get average of 200 values and store as average current readings
		aAvg[ii] /= 200;
 8001cce:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001cd0:	009b      	lsls	r3, r3, #2
 8001cd2:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8001cd6:	4413      	add	r3, r2
 8001cd8:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8001cdc:	4a4a      	ldr	r2, [pc, #296]	; (8001e08 <MPU_SelfTest+0x288>)
 8001cde:	fb82 1203 	smull	r1, r2, r2, r3
 8001ce2:	1192      	asrs	r2, r2, #6
 8001ce4:	17db      	asrs	r3, r3, #31
 8001ce6:	1ad2      	subs	r2, r2, r3
 8001ce8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001cea:	009b      	lsls	r3, r3, #2
 8001cec:	f107 0178 	add.w	r1, r7, #120	; 0x78
 8001cf0:	440b      	add	r3, r1
 8001cf2:	f843 2c3c 	str.w	r2, [r3, #-60]
		gAvg[ii] /= 200;
 8001cf6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001cf8:	009b      	lsls	r3, r3, #2
 8001cfa:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8001cfe:	4413      	add	r3, r2
 8001d00:	f853 3c30 	ldr.w	r3, [r3, #-48]
 8001d04:	4a40      	ldr	r2, [pc, #256]	; (8001e08 <MPU_SelfTest+0x288>)
 8001d06:	fb82 1203 	smull	r1, r2, r2, r3
 8001d0a:	1192      	asrs	r2, r2, #6
 8001d0c:	17db      	asrs	r3, r3, #31
 8001d0e:	1ad2      	subs	r2, r2, r3
 8001d10:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001d12:	009b      	lsls	r3, r3, #2
 8001d14:	f107 0178 	add.w	r1, r7, #120	; 0x78
 8001d18:	440b      	add	r3, r1
 8001d1a:	f843 2c30 	str.w	r2, [r3, #-48]
	for (int ii =0; ii < 3; ii++)
 8001d1e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001d20:	3301      	adds	r3, #1
 8001d22:	673b      	str	r3, [r7, #112]	; 0x70
 8001d24:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001d26:	2b02      	cmp	r3, #2
 8001d28:	ddd1      	ble.n	8001cce <MPU_SelfTest+0x14e>
	}

	// Configure the accelerometer for self-test
	MPU_writeByte(MPU9250_ADDRESS, ACCEL_CONFIG, 0xE0); // Enable self test on all three axes and set accelerometer range to +/- 2 g
 8001d2a:	22e0      	movs	r2, #224	; 0xe0
 8001d2c:	211c      	movs	r1, #28
 8001d2e:	20d2      	movs	r0, #210	; 0xd2
 8001d30:	f7ff f92a 	bl	8000f88 <MPU_writeByte>
	MPU_writeByte(MPU9250_ADDRESS, GYRO_CONFIG, 0xE0); // Enable self test on all three axes and set gyro range to +/- 250 degrees/s
 8001d34:	22e0      	movs	r2, #224	; 0xe0
 8001d36:	211b      	movs	r1, #27
 8001d38:	20d2      	movs	r0, #210	; 0xd2
 8001d3a:	f7ff f925 	bl	8000f88 <MPU_writeByte>
	HAL_Delay(25); // Delay a while to let the device stabilize
 8001d3e:	2019      	movs	r0, #25
 8001d40:	f003 f956 	bl	8004ff0 <HAL_Delay>

	for( int ii = 0; ii < 200; ii++)
 8001d44:	2300      	movs	r3, #0
 8001d46:	66fb      	str	r3, [r7, #108]	; 0x6c
 8001d48:	e058      	b.n	8001dfc <MPU_SelfTest+0x27c>
	{ // get average self-test values of gyro and acclerometer

		MPU_readBytes(MPU9250_ADDRESS, ACCEL_XOUT_H, 6, &rawData[0]); // Read the six raw data registers into data array
 8001d4a:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001d4e:	2206      	movs	r2, #6
 8001d50:	213b      	movs	r1, #59	; 0x3b
 8001d52:	20d2      	movs	r0, #210	; 0xd2
 8001d54:	f7ff f967 	bl	8001026 <MPU_readBytes>
		aSTAvg[0] += (int16_t)(((int16_t)rawData[0] << 8) | rawData[1]) ; // Turn the MSB and LSB into a signed 16-bit value
 8001d58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d5a:	f897 205c 	ldrb.w	r2, [r7, #92]	; 0x5c
 8001d5e:	0212      	lsls	r2, r2, #8
 8001d60:	b211      	sxth	r1, r2
 8001d62:	f897 205d 	ldrb.w	r2, [r7, #93]	; 0x5d
 8001d66:	b212      	sxth	r2, r2
 8001d68:	430a      	orrs	r2, r1
 8001d6a:	b212      	sxth	r2, r2
 8001d6c:	4413      	add	r3, r2
 8001d6e:	633b      	str	r3, [r7, #48]	; 0x30
		aSTAvg[1] += (int16_t)(((int16_t)rawData[2] << 8) | rawData[3]) ;
 8001d70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d72:	f897 205e 	ldrb.w	r2, [r7, #94]	; 0x5e
 8001d76:	0212      	lsls	r2, r2, #8
 8001d78:	b211      	sxth	r1, r2
 8001d7a:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 8001d7e:	b212      	sxth	r2, r2
 8001d80:	430a      	orrs	r2, r1
 8001d82:	b212      	sxth	r2, r2
 8001d84:	4413      	add	r3, r2
 8001d86:	637b      	str	r3, [r7, #52]	; 0x34
		aSTAvg[2] += (int16_t)(((int16_t)rawData[4] << 8) | rawData[5]) ;
 8001d88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001d8a:	f897 2060 	ldrb.w	r2, [r7, #96]	; 0x60
 8001d8e:	0212      	lsls	r2, r2, #8
 8001d90:	b211      	sxth	r1, r2
 8001d92:	f897 2061 	ldrb.w	r2, [r7, #97]	; 0x61
 8001d96:	b212      	sxth	r2, r2
 8001d98:	430a      	orrs	r2, r1
 8001d9a:	b212      	sxth	r2, r2
 8001d9c:	4413      	add	r3, r2
 8001d9e:	63bb      	str	r3, [r7, #56]	; 0x38

		MPU_readBytes(MPU9250_ADDRESS, GYRO_XOUT_H, 6, &rawData[0]); // Read the six raw data registers sequentially into data array
 8001da0:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001da4:	2206      	movs	r2, #6
 8001da6:	2143      	movs	r1, #67	; 0x43
 8001da8:	20d2      	movs	r0, #210	; 0xd2
 8001daa:	f7ff f93c 	bl	8001026 <MPU_readBytes>
		gSTAvg[0] += (int16_t)(((int16_t)rawData[0] << 8) | rawData[1]) ; // Turn the MSB and LSB into a signed 16-bit value
 8001dae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001db0:	f897 205c 	ldrb.w	r2, [r7, #92]	; 0x5c
 8001db4:	0212      	lsls	r2, r2, #8
 8001db6:	b211      	sxth	r1, r2
 8001db8:	f897 205d 	ldrb.w	r2, [r7, #93]	; 0x5d
 8001dbc:	b212      	sxth	r2, r2
 8001dbe:	430a      	orrs	r2, r1
 8001dc0:	b212      	sxth	r2, r2
 8001dc2:	4413      	add	r3, r2
 8001dc4:	627b      	str	r3, [r7, #36]	; 0x24
		gSTAvg[1] += (int16_t)(((int16_t)rawData[2] << 8) | rawData[3]) ;
 8001dc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001dc8:	f897 205e 	ldrb.w	r2, [r7, #94]	; 0x5e
 8001dcc:	0212      	lsls	r2, r2, #8
 8001dce:	b211      	sxth	r1, r2
 8001dd0:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 8001dd4:	b212      	sxth	r2, r2
 8001dd6:	430a      	orrs	r2, r1
 8001dd8:	b212      	sxth	r2, r2
 8001dda:	4413      	add	r3, r2
 8001ddc:	62bb      	str	r3, [r7, #40]	; 0x28
		gSTAvg[2] += (int16_t)(((int16_t)rawData[4] << 8) | rawData[5]) ;
 8001dde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001de0:	f897 2060 	ldrb.w	r2, [r7, #96]	; 0x60
 8001de4:	0212      	lsls	r2, r2, #8
 8001de6:	b211      	sxth	r1, r2
 8001de8:	f897 2061 	ldrb.w	r2, [r7, #97]	; 0x61
 8001dec:	b212      	sxth	r2, r2
 8001dee:	430a      	orrs	r2, r1
 8001df0:	b212      	sxth	r2, r2
 8001df2:	4413      	add	r3, r2
 8001df4:	62fb      	str	r3, [r7, #44]	; 0x2c
	for( int ii = 0; ii < 200; ii++)
 8001df6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001df8:	3301      	adds	r3, #1
 8001dfa:	66fb      	str	r3, [r7, #108]	; 0x6c
 8001dfc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001dfe:	2bc7      	cmp	r3, #199	; 0xc7
 8001e00:	dda3      	ble.n	8001d4a <MPU_SelfTest+0x1ca>
	}

	for (int ii =0; ii < 3; ii++)
 8001e02:	2300      	movs	r3, #0
 8001e04:	66bb      	str	r3, [r7, #104]	; 0x68
 8001e06:	e02c      	b.n	8001e62 <MPU_SelfTest+0x2e2>
 8001e08:	51eb851f 	.word	0x51eb851f
	{ // Get average of 200 values and store as average self-test readings
		aSTAvg[ii] /= 200;
 8001e0c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001e0e:	009b      	lsls	r3, r3, #2
 8001e10:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8001e14:	4413      	add	r3, r2
 8001e16:	f853 3c48 	ldr.w	r3, [r3, #-72]
 8001e1a:	4add      	ldr	r2, [pc, #884]	; (8002190 <MPU_SelfTest+0x610>)
 8001e1c:	fb82 1203 	smull	r1, r2, r2, r3
 8001e20:	1192      	asrs	r2, r2, #6
 8001e22:	17db      	asrs	r3, r3, #31
 8001e24:	1ad2      	subs	r2, r2, r3
 8001e26:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001e28:	009b      	lsls	r3, r3, #2
 8001e2a:	f107 0178 	add.w	r1, r7, #120	; 0x78
 8001e2e:	440b      	add	r3, r1
 8001e30:	f843 2c48 	str.w	r2, [r3, #-72]
		gSTAvg[ii] /= 200;
 8001e34:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001e36:	009b      	lsls	r3, r3, #2
 8001e38:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8001e3c:	4413      	add	r3, r2
 8001e3e:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8001e42:	4ad3      	ldr	r2, [pc, #844]	; (8002190 <MPU_SelfTest+0x610>)
 8001e44:	fb82 1203 	smull	r1, r2, r2, r3
 8001e48:	1192      	asrs	r2, r2, #6
 8001e4a:	17db      	asrs	r3, r3, #31
 8001e4c:	1ad2      	subs	r2, r2, r3
 8001e4e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001e50:	009b      	lsls	r3, r3, #2
 8001e52:	f107 0178 	add.w	r1, r7, #120	; 0x78
 8001e56:	440b      	add	r3, r1
 8001e58:	f843 2c54 	str.w	r2, [r3, #-84]
	for (int ii =0; ii < 3; ii++)
 8001e5c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001e5e:	3301      	adds	r3, #1
 8001e60:	66bb      	str	r3, [r7, #104]	; 0x68
 8001e62:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001e64:	2b02      	cmp	r3, #2
 8001e66:	ddd1      	ble.n	8001e0c <MPU_SelfTest+0x28c>
	}

	// Configure the gyro and accelerometer for normal operation
	MPU_writeByte(MPU9250_ADDRESS, ACCEL_CONFIG, 0x00);
 8001e68:	2200      	movs	r2, #0
 8001e6a:	211c      	movs	r1, #28
 8001e6c:	20d2      	movs	r0, #210	; 0xd2
 8001e6e:	f7ff f88b 	bl	8000f88 <MPU_writeByte>
	MPU_writeByte(MPU9250_ADDRESS, GYRO_CONFIG, 0x00);
 8001e72:	2200      	movs	r2, #0
 8001e74:	211b      	movs	r1, #27
 8001e76:	20d2      	movs	r0, #210	; 0xd2
 8001e78:	f7ff f886 	bl	8000f88 <MPU_writeByte>
	HAL_Delay(25); // Delay a while to let the device stabilize
 8001e7c:	2019      	movs	r0, #25
 8001e7e:	f003 f8b7 	bl	8004ff0 <HAL_Delay>

	// Retrieve accelerometer and gyro factory Self-Test Code from USR_Reg
	selfTest[0] = MPU_readByte(MPU9250_ADDRESS, SELF_TEST_X_ACCEL); // X-axis accel self-test results
 8001e82:	210d      	movs	r1, #13
 8001e84:	20d2      	movs	r0, #210	; 0xd2
 8001e86:	f7ff f8a6 	bl	8000fd6 <MPU_readByte>
 8001e8a:	4603      	mov	r3, r0
 8001e8c:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
	selfTest[1] = MPU_readByte(MPU9250_ADDRESS, SELF_TEST_Y_ACCEL); // Y-axis accel self-test results
 8001e90:	210e      	movs	r1, #14
 8001e92:	20d2      	movs	r0, #210	; 0xd2
 8001e94:	f7ff f89f 	bl	8000fd6 <MPU_readByte>
 8001e98:	4603      	mov	r3, r0
 8001e9a:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55
	selfTest[2] = MPU_readByte(MPU9250_ADDRESS, SELF_TEST_Z_ACCEL); // Z-axis accel self-test results
 8001e9e:	210f      	movs	r1, #15
 8001ea0:	20d2      	movs	r0, #210	; 0xd2
 8001ea2:	f7ff f898 	bl	8000fd6 <MPU_readByte>
 8001ea6:	4603      	mov	r3, r0
 8001ea8:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
	selfTest[3] = MPU_readByte(MPU9250_ADDRESS, SELF_TEST_X_GYRO); // X-axis gyro self-test results
 8001eac:	2100      	movs	r1, #0
 8001eae:	20d2      	movs	r0, #210	; 0xd2
 8001eb0:	f7ff f891 	bl	8000fd6 <MPU_readByte>
 8001eb4:	4603      	mov	r3, r0
 8001eb6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	selfTest[4] = MPU_readByte(MPU9250_ADDRESS, SELF_TEST_Y_GYRO); // Y-axis gyro self-test results
 8001eba:	2101      	movs	r1, #1
 8001ebc:	20d2      	movs	r0, #210	; 0xd2
 8001ebe:	f7ff f88a 	bl	8000fd6 <MPU_readByte>
 8001ec2:	4603      	mov	r3, r0
 8001ec4:	f887 3058 	strb.w	r3, [r7, #88]	; 0x58
	selfTest[5] = MPU_readByte(MPU9250_ADDRESS, SELF_TEST_Z_GYRO); // Z-axis gyro self-test results
 8001ec8:	2102      	movs	r1, #2
 8001eca:	20d2      	movs	r0, #210	; 0xd2
 8001ecc:	f7ff f883 	bl	8000fd6 <MPU_readByte>
 8001ed0:	4603      	mov	r3, r0
 8001ed2:	f887 3059 	strb.w	r3, [r7, #89]	; 0x59

	// Retrieve factory self-test value from self-test code reads
	factoryTrim[0] = (float)(2620/1<<FS)*(pow( 1.01 , ((float)selfTest[0] - 1.0) )); // FT[Xa] factory trim calculation
 8001ed6:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 8001eda:	f640 223c 	movw	r2, #2620	; 0xa3c
 8001ede:	fa02 f303 	lsl.w	r3, r2, r3
 8001ee2:	ee07 3a90 	vmov	s15, r3
 8001ee6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001eea:	ee17 0a90 	vmov	r0, s15
 8001eee:	f7fe fb2b 	bl	8000548 <__aeabi_f2d>
 8001ef2:	4604      	mov	r4, r0
 8001ef4:	460d      	mov	r5, r1
 8001ef6:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 8001efa:	ee07 3a90 	vmov	s15, r3
 8001efe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001f02:	ee17 0a90 	vmov	r0, s15
 8001f06:	f7fe fb1f 	bl	8000548 <__aeabi_f2d>
 8001f0a:	f04f 0200 	mov.w	r2, #0
 8001f0e:	4ba1      	ldr	r3, [pc, #644]	; (8002194 <MPU_SelfTest+0x614>)
 8001f10:	f7fe f9ba 	bl	8000288 <__aeabi_dsub>
 8001f14:	4602      	mov	r2, r0
 8001f16:	460b      	mov	r3, r1
 8001f18:	ec43 2b17 	vmov	d7, r2, r3
 8001f1c:	eeb0 1a47 	vmov.f32	s2, s14
 8001f20:	eef0 1a67 	vmov.f32	s3, s15
 8001f24:	ed9f 0b98 	vldr	d0, [pc, #608]	; 8002188 <MPU_SelfTest+0x608>
 8001f28:	f011 fde8 	bl	8013afc <pow>
 8001f2c:	ec53 2b10 	vmov	r2, r3, d0
 8001f30:	4620      	mov	r0, r4
 8001f32:	4629      	mov	r1, r5
 8001f34:	f7fe fb60 	bl	80005f8 <__aeabi_dmul>
 8001f38:	4603      	mov	r3, r0
 8001f3a:	460c      	mov	r4, r1
 8001f3c:	4618      	mov	r0, r3
 8001f3e:	4621      	mov	r1, r4
 8001f40:	f7fe fe52 	bl	8000be8 <__aeabi_d2f>
 8001f44:	4603      	mov	r3, r0
 8001f46:	60fb      	str	r3, [r7, #12]
	factoryTrim[1] = (float)(2620/1<<FS)*(pow( 1.01 , ((float)selfTest[1] - 1.0) )); // FT[Ya] factory trim calculation
 8001f48:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 8001f4c:	f640 223c 	movw	r2, #2620	; 0xa3c
 8001f50:	fa02 f303 	lsl.w	r3, r2, r3
 8001f54:	ee07 3a90 	vmov	s15, r3
 8001f58:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001f5c:	ee17 0a90 	vmov	r0, s15
 8001f60:	f7fe faf2 	bl	8000548 <__aeabi_f2d>
 8001f64:	4604      	mov	r4, r0
 8001f66:	460d      	mov	r5, r1
 8001f68:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8001f6c:	ee07 3a90 	vmov	s15, r3
 8001f70:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001f74:	ee17 0a90 	vmov	r0, s15
 8001f78:	f7fe fae6 	bl	8000548 <__aeabi_f2d>
 8001f7c:	f04f 0200 	mov.w	r2, #0
 8001f80:	4b84      	ldr	r3, [pc, #528]	; (8002194 <MPU_SelfTest+0x614>)
 8001f82:	f7fe f981 	bl	8000288 <__aeabi_dsub>
 8001f86:	4602      	mov	r2, r0
 8001f88:	460b      	mov	r3, r1
 8001f8a:	ec43 2b17 	vmov	d7, r2, r3
 8001f8e:	eeb0 1a47 	vmov.f32	s2, s14
 8001f92:	eef0 1a67 	vmov.f32	s3, s15
 8001f96:	ed9f 0b7c 	vldr	d0, [pc, #496]	; 8002188 <MPU_SelfTest+0x608>
 8001f9a:	f011 fdaf 	bl	8013afc <pow>
 8001f9e:	ec53 2b10 	vmov	r2, r3, d0
 8001fa2:	4620      	mov	r0, r4
 8001fa4:	4629      	mov	r1, r5
 8001fa6:	f7fe fb27 	bl	80005f8 <__aeabi_dmul>
 8001faa:	4603      	mov	r3, r0
 8001fac:	460c      	mov	r4, r1
 8001fae:	4618      	mov	r0, r3
 8001fb0:	4621      	mov	r1, r4
 8001fb2:	f7fe fe19 	bl	8000be8 <__aeabi_d2f>
 8001fb6:	4603      	mov	r3, r0
 8001fb8:	613b      	str	r3, [r7, #16]
	factoryTrim[2] = (float)(2620/1<<FS)*(pow( 1.01 , ((float)selfTest[2] - 1.0) )); // FT[Za] factory trim calculation
 8001fba:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 8001fbe:	f640 223c 	movw	r2, #2620	; 0xa3c
 8001fc2:	fa02 f303 	lsl.w	r3, r2, r3
 8001fc6:	ee07 3a90 	vmov	s15, r3
 8001fca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001fce:	ee17 0a90 	vmov	r0, s15
 8001fd2:	f7fe fab9 	bl	8000548 <__aeabi_f2d>
 8001fd6:	4604      	mov	r4, r0
 8001fd8:	460d      	mov	r5, r1
 8001fda:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 8001fde:	ee07 3a90 	vmov	s15, r3
 8001fe2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001fe6:	ee17 0a90 	vmov	r0, s15
 8001fea:	f7fe faad 	bl	8000548 <__aeabi_f2d>
 8001fee:	f04f 0200 	mov.w	r2, #0
 8001ff2:	4b68      	ldr	r3, [pc, #416]	; (8002194 <MPU_SelfTest+0x614>)
 8001ff4:	f7fe f948 	bl	8000288 <__aeabi_dsub>
 8001ff8:	4602      	mov	r2, r0
 8001ffa:	460b      	mov	r3, r1
 8001ffc:	ec43 2b17 	vmov	d7, r2, r3
 8002000:	eeb0 1a47 	vmov.f32	s2, s14
 8002004:	eef0 1a67 	vmov.f32	s3, s15
 8002008:	ed9f 0b5f 	vldr	d0, [pc, #380]	; 8002188 <MPU_SelfTest+0x608>
 800200c:	f011 fd76 	bl	8013afc <pow>
 8002010:	ec53 2b10 	vmov	r2, r3, d0
 8002014:	4620      	mov	r0, r4
 8002016:	4629      	mov	r1, r5
 8002018:	f7fe faee 	bl	80005f8 <__aeabi_dmul>
 800201c:	4603      	mov	r3, r0
 800201e:	460c      	mov	r4, r1
 8002020:	4618      	mov	r0, r3
 8002022:	4621      	mov	r1, r4
 8002024:	f7fe fde0 	bl	8000be8 <__aeabi_d2f>
 8002028:	4603      	mov	r3, r0
 800202a:	617b      	str	r3, [r7, #20]
	factoryTrim[3] = (float)(2620/1<<FS)*(pow( 1.01 , ((float)selfTest[3] - 1.0) )); // FT[Xg] factory trim calculation
 800202c:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 8002030:	f640 223c 	movw	r2, #2620	; 0xa3c
 8002034:	fa02 f303 	lsl.w	r3, r2, r3
 8002038:	ee07 3a90 	vmov	s15, r3
 800203c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002040:	ee17 0a90 	vmov	r0, s15
 8002044:	f7fe fa80 	bl	8000548 <__aeabi_f2d>
 8002048:	4604      	mov	r4, r0
 800204a:	460d      	mov	r5, r1
 800204c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8002050:	ee07 3a90 	vmov	s15, r3
 8002054:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002058:	ee17 0a90 	vmov	r0, s15
 800205c:	f7fe fa74 	bl	8000548 <__aeabi_f2d>
 8002060:	f04f 0200 	mov.w	r2, #0
 8002064:	4b4b      	ldr	r3, [pc, #300]	; (8002194 <MPU_SelfTest+0x614>)
 8002066:	f7fe f90f 	bl	8000288 <__aeabi_dsub>
 800206a:	4602      	mov	r2, r0
 800206c:	460b      	mov	r3, r1
 800206e:	ec43 2b17 	vmov	d7, r2, r3
 8002072:	eeb0 1a47 	vmov.f32	s2, s14
 8002076:	eef0 1a67 	vmov.f32	s3, s15
 800207a:	ed9f 0b43 	vldr	d0, [pc, #268]	; 8002188 <MPU_SelfTest+0x608>
 800207e:	f011 fd3d 	bl	8013afc <pow>
 8002082:	ec53 2b10 	vmov	r2, r3, d0
 8002086:	4620      	mov	r0, r4
 8002088:	4629      	mov	r1, r5
 800208a:	f7fe fab5 	bl	80005f8 <__aeabi_dmul>
 800208e:	4603      	mov	r3, r0
 8002090:	460c      	mov	r4, r1
 8002092:	4618      	mov	r0, r3
 8002094:	4621      	mov	r1, r4
 8002096:	f7fe fda7 	bl	8000be8 <__aeabi_d2f>
 800209a:	4603      	mov	r3, r0
 800209c:	61bb      	str	r3, [r7, #24]
	factoryTrim[4] = (float)(2620/1<<FS)*(pow( 1.01 , ((float)selfTest[4] - 1.0) )); // FT[Yg] factory trim calculation
 800209e:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 80020a2:	f640 223c 	movw	r2, #2620	; 0xa3c
 80020a6:	fa02 f303 	lsl.w	r3, r2, r3
 80020aa:	ee07 3a90 	vmov	s15, r3
 80020ae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80020b2:	ee17 0a90 	vmov	r0, s15
 80020b6:	f7fe fa47 	bl	8000548 <__aeabi_f2d>
 80020ba:	4604      	mov	r4, r0
 80020bc:	460d      	mov	r5, r1
 80020be:	f897 3058 	ldrb.w	r3, [r7, #88]	; 0x58
 80020c2:	ee07 3a90 	vmov	s15, r3
 80020c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80020ca:	ee17 0a90 	vmov	r0, s15
 80020ce:	f7fe fa3b 	bl	8000548 <__aeabi_f2d>
 80020d2:	f04f 0200 	mov.w	r2, #0
 80020d6:	4b2f      	ldr	r3, [pc, #188]	; (8002194 <MPU_SelfTest+0x614>)
 80020d8:	f7fe f8d6 	bl	8000288 <__aeabi_dsub>
 80020dc:	4602      	mov	r2, r0
 80020de:	460b      	mov	r3, r1
 80020e0:	ec43 2b17 	vmov	d7, r2, r3
 80020e4:	eeb0 1a47 	vmov.f32	s2, s14
 80020e8:	eef0 1a67 	vmov.f32	s3, s15
 80020ec:	ed9f 0b26 	vldr	d0, [pc, #152]	; 8002188 <MPU_SelfTest+0x608>
 80020f0:	f011 fd04 	bl	8013afc <pow>
 80020f4:	ec53 2b10 	vmov	r2, r3, d0
 80020f8:	4620      	mov	r0, r4
 80020fa:	4629      	mov	r1, r5
 80020fc:	f7fe fa7c 	bl	80005f8 <__aeabi_dmul>
 8002100:	4603      	mov	r3, r0
 8002102:	460c      	mov	r4, r1
 8002104:	4618      	mov	r0, r3
 8002106:	4621      	mov	r1, r4
 8002108:	f7fe fd6e 	bl	8000be8 <__aeabi_d2f>
 800210c:	4603      	mov	r3, r0
 800210e:	61fb      	str	r3, [r7, #28]
	factoryTrim[5] = (float)(2620/1<<FS)*(pow( 1.01 , ((float)selfTest[5] - 1.0) )); // FT[Zg] factory trim calculation
 8002110:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 8002114:	f640 223c 	movw	r2, #2620	; 0xa3c
 8002118:	fa02 f303 	lsl.w	r3, r2, r3
 800211c:	ee07 3a90 	vmov	s15, r3
 8002120:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002124:	ee17 0a90 	vmov	r0, s15
 8002128:	f7fe fa0e 	bl	8000548 <__aeabi_f2d>
 800212c:	4604      	mov	r4, r0
 800212e:	460d      	mov	r5, r1
 8002130:	f897 3059 	ldrb.w	r3, [r7, #89]	; 0x59
 8002134:	ee07 3a90 	vmov	s15, r3
 8002138:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800213c:	ee17 0a90 	vmov	r0, s15
 8002140:	f7fe fa02 	bl	8000548 <__aeabi_f2d>
 8002144:	f04f 0200 	mov.w	r2, #0
 8002148:	4b12      	ldr	r3, [pc, #72]	; (8002194 <MPU_SelfTest+0x614>)
 800214a:	f7fe f89d 	bl	8000288 <__aeabi_dsub>
 800214e:	4602      	mov	r2, r0
 8002150:	460b      	mov	r3, r1
 8002152:	ec43 2b17 	vmov	d7, r2, r3
 8002156:	eeb0 1a47 	vmov.f32	s2, s14
 800215a:	eef0 1a67 	vmov.f32	s3, s15
 800215e:	ed9f 0b0a 	vldr	d0, [pc, #40]	; 8002188 <MPU_SelfTest+0x608>
 8002162:	f011 fccb 	bl	8013afc <pow>
 8002166:	ec53 2b10 	vmov	r2, r3, d0
 800216a:	4620      	mov	r0, r4
 800216c:	4629      	mov	r1, r5
 800216e:	f7fe fa43 	bl	80005f8 <__aeabi_dmul>
 8002172:	4603      	mov	r3, r0
 8002174:	460c      	mov	r4, r1
 8002176:	4618      	mov	r0, r3
 8002178:	4621      	mov	r1, r4
 800217a:	f7fe fd35 	bl	8000be8 <__aeabi_d2f>
 800217e:	4603      	mov	r3, r0
 8002180:	623b      	str	r3, [r7, #32]

	// Report results as a ratio of (STR - FT)/FT; the change from Factory Trim of the Self-Test Response
	// To get percent, must multiply by 100
	for (int i = 0; i < 3; i++)
 8002182:	2300      	movs	r3, #0
 8002184:	667b      	str	r3, [r7, #100]	; 0x64
 8002186:	e096      	b.n	80022b6 <MPU_SelfTest+0x736>
 8002188:	c28f5c29 	.word	0xc28f5c29
 800218c:	3ff028f5 	.word	0x3ff028f5
 8002190:	51eb851f 	.word	0x51eb851f
 8002194:	3ff00000 	.word	0x3ff00000
	{
		destination[i] = 100.0*((float)(aSTAvg[i] - aAvg[i]))/factoryTrim[i] - 100.; // Report percent differences
 8002198:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800219a:	009b      	lsls	r3, r3, #2
 800219c:	f107 0278 	add.w	r2, r7, #120	; 0x78
 80021a0:	4413      	add	r3, r2
 80021a2:	f853 2c48 	ldr.w	r2, [r3, #-72]
 80021a6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80021a8:	009b      	lsls	r3, r3, #2
 80021aa:	f107 0178 	add.w	r1, r7, #120	; 0x78
 80021ae:	440b      	add	r3, r1
 80021b0:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 80021b4:	1ad3      	subs	r3, r2, r3
 80021b6:	ee07 3a90 	vmov	s15, r3
 80021ba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80021be:	ee17 0a90 	vmov	r0, s15
 80021c2:	f7fe f9c1 	bl	8000548 <__aeabi_f2d>
 80021c6:	f04f 0200 	mov.w	r2, #0
 80021ca:	4b3f      	ldr	r3, [pc, #252]	; (80022c8 <MPU_SelfTest+0x748>)
 80021cc:	f7fe fa14 	bl	80005f8 <__aeabi_dmul>
 80021d0:	4603      	mov	r3, r0
 80021d2:	460c      	mov	r4, r1
 80021d4:	4625      	mov	r5, r4
 80021d6:	461c      	mov	r4, r3
 80021d8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80021da:	009b      	lsls	r3, r3, #2
 80021dc:	f107 0278 	add.w	r2, r7, #120	; 0x78
 80021e0:	4413      	add	r3, r2
 80021e2:	3b6c      	subs	r3, #108	; 0x6c
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	4618      	mov	r0, r3
 80021e8:	f7fe f9ae 	bl	8000548 <__aeabi_f2d>
 80021ec:	4602      	mov	r2, r0
 80021ee:	460b      	mov	r3, r1
 80021f0:	4620      	mov	r0, r4
 80021f2:	4629      	mov	r1, r5
 80021f4:	f7fe fb2a 	bl	800084c <__aeabi_ddiv>
 80021f8:	4603      	mov	r3, r0
 80021fa:	460c      	mov	r4, r1
 80021fc:	4618      	mov	r0, r3
 80021fe:	4621      	mov	r1, r4
 8002200:	f04f 0200 	mov.w	r2, #0
 8002204:	4b30      	ldr	r3, [pc, #192]	; (80022c8 <MPU_SelfTest+0x748>)
 8002206:	f7fe f83f 	bl	8000288 <__aeabi_dsub>
 800220a:	4603      	mov	r3, r0
 800220c:	460c      	mov	r4, r1
 800220e:	4618      	mov	r0, r3
 8002210:	4621      	mov	r1, r4
 8002212:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002214:	009b      	lsls	r3, r3, #2
 8002216:	687a      	ldr	r2, [r7, #4]
 8002218:	18d4      	adds	r4, r2, r3
 800221a:	f7fe fce5 	bl	8000be8 <__aeabi_d2f>
 800221e:	4603      	mov	r3, r0
 8002220:	6023      	str	r3, [r4, #0]
		destination[i+3] = 100.0*((float)(gSTAvg[i] - gAvg[i]))/factoryTrim[i+3] - 100.; // Report percent differences
 8002222:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002224:	009b      	lsls	r3, r3, #2
 8002226:	f107 0278 	add.w	r2, r7, #120	; 0x78
 800222a:	4413      	add	r3, r2
 800222c:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8002230:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002232:	009b      	lsls	r3, r3, #2
 8002234:	f107 0178 	add.w	r1, r7, #120	; 0x78
 8002238:	440b      	add	r3, r1
 800223a:	f853 3c30 	ldr.w	r3, [r3, #-48]
 800223e:	1ad3      	subs	r3, r2, r3
 8002240:	ee07 3a90 	vmov	s15, r3
 8002244:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002248:	ee17 0a90 	vmov	r0, s15
 800224c:	f7fe f97c 	bl	8000548 <__aeabi_f2d>
 8002250:	f04f 0200 	mov.w	r2, #0
 8002254:	4b1c      	ldr	r3, [pc, #112]	; (80022c8 <MPU_SelfTest+0x748>)
 8002256:	f7fe f9cf 	bl	80005f8 <__aeabi_dmul>
 800225a:	4603      	mov	r3, r0
 800225c:	460c      	mov	r4, r1
 800225e:	4625      	mov	r5, r4
 8002260:	461c      	mov	r4, r3
 8002262:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002264:	3303      	adds	r3, #3
 8002266:	009b      	lsls	r3, r3, #2
 8002268:	f107 0278 	add.w	r2, r7, #120	; 0x78
 800226c:	4413      	add	r3, r2
 800226e:	3b6c      	subs	r3, #108	; 0x6c
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	4618      	mov	r0, r3
 8002274:	f7fe f968 	bl	8000548 <__aeabi_f2d>
 8002278:	4602      	mov	r2, r0
 800227a:	460b      	mov	r3, r1
 800227c:	4620      	mov	r0, r4
 800227e:	4629      	mov	r1, r5
 8002280:	f7fe fae4 	bl	800084c <__aeabi_ddiv>
 8002284:	4603      	mov	r3, r0
 8002286:	460c      	mov	r4, r1
 8002288:	4618      	mov	r0, r3
 800228a:	4621      	mov	r1, r4
 800228c:	f04f 0200 	mov.w	r2, #0
 8002290:	4b0d      	ldr	r3, [pc, #52]	; (80022c8 <MPU_SelfTest+0x748>)
 8002292:	f7fd fff9 	bl	8000288 <__aeabi_dsub>
 8002296:	4603      	mov	r3, r0
 8002298:	460c      	mov	r4, r1
 800229a:	4618      	mov	r0, r3
 800229c:	4621      	mov	r1, r4
 800229e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80022a0:	3303      	adds	r3, #3
 80022a2:	009b      	lsls	r3, r3, #2
 80022a4:	687a      	ldr	r2, [r7, #4]
 80022a6:	18d4      	adds	r4, r2, r3
 80022a8:	f7fe fc9e 	bl	8000be8 <__aeabi_d2f>
 80022ac:	4603      	mov	r3, r0
 80022ae:	6023      	str	r3, [r4, #0]
	for (int i = 0; i < 3; i++)
 80022b0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80022b2:	3301      	adds	r3, #1
 80022b4:	667b      	str	r3, [r7, #100]	; 0x64
 80022b6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80022b8:	2b02      	cmp	r3, #2
 80022ba:	f77f af6d 	ble.w	8002198 <MPU_SelfTest+0x618>
	}
}
 80022be:	bf00      	nop
 80022c0:	3778      	adds	r7, #120	; 0x78
 80022c2:	46bd      	mov	sp, r7
 80022c4:	bdb0      	pop	{r4, r5, r7, pc}
 80022c6:	bf00      	nop
 80022c8:	40590000 	.word	0x40590000

080022cc <MPU_calibrateMag>:
void MPU_calibrateMag(float* dest1)
{
 80022cc:	b580      	push	{r7, lr}
 80022ce:	b08e      	sub	sp, #56	; 0x38
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	6078      	str	r0, [r7, #4]
	uint16_t ii = 0, jj=0, sample_count = 0;
 80022d4:	2300      	movs	r3, #0
 80022d6:	86fb      	strh	r3, [r7, #54]	; 0x36
 80022d8:	2300      	movs	r3, #0
 80022da:	86bb      	strh	r3, [r7, #52]	; 0x34
 80022dc:	2300      	movs	r3, #0
 80022de:	867b      	strh	r3, [r7, #50]	; 0x32
	int32_t mag_bias[3] = {0, 0, 0};
 80022e0:	2300      	movs	r3, #0
 80022e2:	627b      	str	r3, [r7, #36]	; 0x24
 80022e4:	2300      	movs	r3, #0
 80022e6:	62bb      	str	r3, [r7, #40]	; 0x28
 80022e8:	2300      	movs	r3, #0
 80022ea:	62fb      	str	r3, [r7, #44]	; 0x2c
	int16_t mag_max[3] = {-32767, -32767, -32767}, mag_min[3] = {32767, 32767, 32767}, mag_temp[3] = {0, 0, 0};
 80022ec:	4a67      	ldr	r2, [pc, #412]	; (800248c <MPU_calibrateMag+0x1c0>)
 80022ee:	f107 031c 	add.w	r3, r7, #28
 80022f2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80022f6:	6018      	str	r0, [r3, #0]
 80022f8:	3304      	adds	r3, #4
 80022fa:	8019      	strh	r1, [r3, #0]
 80022fc:	4a64      	ldr	r2, [pc, #400]	; (8002490 <MPU_calibrateMag+0x1c4>)
 80022fe:	f107 0314 	add.w	r3, r7, #20
 8002302:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002306:	6018      	str	r0, [r3, #0]
 8002308:	3304      	adds	r3, #4
 800230a:	8019      	strh	r1, [r3, #0]
 800230c:	2300      	movs	r3, #0
 800230e:	81bb      	strh	r3, [r7, #12]
 8002310:	2300      	movs	r3, #0
 8002312:	81fb      	strh	r3, [r7, #14]
 8002314:	2300      	movs	r3, #0
 8002316:	823b      	strh	r3, [r7, #16]

	HAL_Delay(4000);
 8002318:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 800231c:	f002 fe68 	bl	8004ff0 <HAL_Delay>

	sample_count = 64;
 8002320:	2340      	movs	r3, #64	; 0x40
 8002322:	867b      	strh	r3, [r7, #50]	; 0x32
	for(ii = 0; ii < sample_count; ii++)
 8002324:	2300      	movs	r3, #0
 8002326:	86fb      	strh	r3, [r7, #54]	; 0x36
 8002328:	e051      	b.n	80023ce <MPU_calibrateMag+0x102>
	{
		MPU_readMagData(mag_temp);  // Read the mag data
 800232a:	f107 030c 	add.w	r3, r7, #12
 800232e:	4618      	mov	r0, r3
 8002330:	f7fe ff96 	bl	8001260 <MPU_readMagData>
		for (jj = 0; jj < 3; jj++)
 8002334:	2300      	movs	r3, #0
 8002336:	86bb      	strh	r3, [r7, #52]	; 0x34
 8002338:	e040      	b.n	80023bc <MPU_calibrateMag+0xf0>
		{
			if(mag_temp[jj] > mag_max[jj]) mag_max[jj] = mag_temp[jj];
 800233a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800233c:	005b      	lsls	r3, r3, #1
 800233e:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002342:	4413      	add	r3, r2
 8002344:	f933 2c2c 	ldrsh.w	r2, [r3, #-44]
 8002348:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800234a:	005b      	lsls	r3, r3, #1
 800234c:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8002350:	440b      	add	r3, r1
 8002352:	f933 3c1c 	ldrsh.w	r3, [r3, #-28]
 8002356:	429a      	cmp	r2, r3
 8002358:	dd0e      	ble.n	8002378 <MPU_calibrateMag+0xac>
 800235a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800235c:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800235e:	005b      	lsls	r3, r3, #1
 8002360:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8002364:	440b      	add	r3, r1
 8002366:	f933 1c2c 	ldrsh.w	r1, [r3, #-44]
 800236a:	0053      	lsls	r3, r2, #1
 800236c:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002370:	4413      	add	r3, r2
 8002372:	460a      	mov	r2, r1
 8002374:	f823 2c1c 	strh.w	r2, [r3, #-28]
			if(mag_temp[jj] < mag_min[jj]) mag_min[jj] = mag_temp[jj];
 8002378:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800237a:	005b      	lsls	r3, r3, #1
 800237c:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002380:	4413      	add	r3, r2
 8002382:	f933 2c2c 	ldrsh.w	r2, [r3, #-44]
 8002386:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8002388:	005b      	lsls	r3, r3, #1
 800238a:	f107 0138 	add.w	r1, r7, #56	; 0x38
 800238e:	440b      	add	r3, r1
 8002390:	f933 3c24 	ldrsh.w	r3, [r3, #-36]
 8002394:	429a      	cmp	r2, r3
 8002396:	da0e      	bge.n	80023b6 <MPU_calibrateMag+0xea>
 8002398:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800239a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800239c:	005b      	lsls	r3, r3, #1
 800239e:	f107 0138 	add.w	r1, r7, #56	; 0x38
 80023a2:	440b      	add	r3, r1
 80023a4:	f933 1c2c 	ldrsh.w	r1, [r3, #-44]
 80023a8:	0053      	lsls	r3, r2, #1
 80023aa:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80023ae:	4413      	add	r3, r2
 80023b0:	460a      	mov	r2, r1
 80023b2:	f823 2c24 	strh.w	r2, [r3, #-36]
		for (jj = 0; jj < 3; jj++)
 80023b6:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80023b8:	3301      	adds	r3, #1
 80023ba:	86bb      	strh	r3, [r7, #52]	; 0x34
 80023bc:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80023be:	2b02      	cmp	r3, #2
 80023c0:	d9bb      	bls.n	800233a <MPU_calibrateMag+0x6e>
		}
		HAL_Delay(135);  // at 8 Hz ODR, new mag data is available every 125 ms
 80023c2:	2087      	movs	r0, #135	; 0x87
 80023c4:	f002 fe14 	bl	8004ff0 <HAL_Delay>
	for(ii = 0; ii < sample_count; ii++)
 80023c8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80023ca:	3301      	adds	r3, #1
 80023cc:	86fb      	strh	r3, [r7, #54]	; 0x36
 80023ce:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80023d0:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 80023d2:	429a      	cmp	r2, r3
 80023d4:	d3a9      	bcc.n	800232a <MPU_calibrateMag+0x5e>
	}

	mag_bias[0]  = (mag_max[0] + mag_min[0])/2;  // get average x mag bias in counts
 80023d6:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80023da:	461a      	mov	r2, r3
 80023dc:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80023e0:	4413      	add	r3, r2
 80023e2:	0fda      	lsrs	r2, r3, #31
 80023e4:	4413      	add	r3, r2
 80023e6:	105b      	asrs	r3, r3, #1
 80023e8:	627b      	str	r3, [r7, #36]	; 0x24
	mag_bias[1]  = (mag_max[1] + mag_min[1])/2;  // get average y mag bias in counts
 80023ea:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80023ee:	461a      	mov	r2, r3
 80023f0:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80023f4:	4413      	add	r3, r2
 80023f6:	0fda      	lsrs	r2, r3, #31
 80023f8:	4413      	add	r3, r2
 80023fa:	105b      	asrs	r3, r3, #1
 80023fc:	62bb      	str	r3, [r7, #40]	; 0x28
	mag_bias[2]  = (mag_max[2] + mag_min[2])/2;  // get average z mag bias in counts
 80023fe:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8002402:	461a      	mov	r2, r3
 8002404:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8002408:	4413      	add	r3, r2
 800240a:	0fda      	lsrs	r2, r3, #31
 800240c:	4413      	add	r3, r2
 800240e:	105b      	asrs	r3, r3, #1
 8002410:	62fb      	str	r3, [r7, #44]	; 0x2c

	dest1[0] = (float) mag_bias[0]*mRes*magCalibration[0];  // save mag biases in G for main program
 8002412:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002414:	ee07 3a90 	vmov	s15, r3
 8002418:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800241c:	4b1d      	ldr	r3, [pc, #116]	; (8002494 <MPU_calibrateMag+0x1c8>)
 800241e:	edd3 7a00 	vldr	s15, [r3]
 8002422:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002426:	4b1c      	ldr	r3, [pc, #112]	; (8002498 <MPU_calibrateMag+0x1cc>)
 8002428:	edd3 7a00 	vldr	s15, [r3]
 800242c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	edc3 7a00 	vstr	s15, [r3]
	dest1[1] = (float) mag_bias[1]*mRes*magCalibration[1];
 8002436:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002438:	ee07 3a90 	vmov	s15, r3
 800243c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002440:	4b14      	ldr	r3, [pc, #80]	; (8002494 <MPU_calibrateMag+0x1c8>)
 8002442:	edd3 7a00 	vldr	s15, [r3]
 8002446:	ee27 7a27 	vmul.f32	s14, s14, s15
 800244a:	4b13      	ldr	r3, [pc, #76]	; (8002498 <MPU_calibrateMag+0x1cc>)
 800244c:	edd3 7a01 	vldr	s15, [r3, #4]
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	3304      	adds	r3, #4
 8002454:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002458:	edc3 7a00 	vstr	s15, [r3]
	dest1[2] = (float) mag_bias[2]*mRes*magCalibration[2];
 800245c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800245e:	ee07 3a90 	vmov	s15, r3
 8002462:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002466:	4b0b      	ldr	r3, [pc, #44]	; (8002494 <MPU_calibrateMag+0x1c8>)
 8002468:	edd3 7a00 	vldr	s15, [r3]
 800246c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002470:	4b09      	ldr	r3, [pc, #36]	; (8002498 <MPU_calibrateMag+0x1cc>)
 8002472:	edd3 7a02 	vldr	s15, [r3, #8]
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	3308      	adds	r3, #8
 800247a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800247e:	edc3 7a00 	vstr	s15, [r3]
}
 8002482:	bf00      	nop
 8002484:	3738      	adds	r7, #56	; 0x38
 8002486:	46bd      	mov	sp, r7
 8002488:	bd80      	pop	{r7, pc}
 800248a:	bf00      	nop
 800248c:	08015238 	.word	0x08015238
 8002490:	08015240 	.word	0x08015240
 8002494:	20000844 	.word	0x20000844
 8002498:	2000086c 	.word	0x2000086c

0800249c <MadgwickQuaternionUpdate>:

void MadgwickQuaternionUpdate(float ax, float ay, float az, float gx, float gy, float gz, float mx, float my, float mz)
{
 800249c:	b590      	push	{r4, r7, lr}
 800249e:	b0b3      	sub	sp, #204	; 0xcc
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24
 80024a6:	edc7 0a08 	vstr	s1, [r7, #32]
 80024aa:	ed87 1a07 	vstr	s2, [r7, #28]
 80024ae:	edc7 1a06 	vstr	s3, [r7, #24]
 80024b2:	ed87 2a05 	vstr	s4, [r7, #20]
 80024b6:	edc7 2a04 	vstr	s5, [r7, #16]
 80024ba:	ed87 3a03 	vstr	s6, [r7, #12]
 80024be:	edc7 3a02 	vstr	s7, [r7, #8]
 80024c2:	ed87 4a01 	vstr	s8, [r7, #4]
	// (see http://www.x-io.co.uk/category/open-source/ for examples and more details)
	// which fuses acceleration, rotation rate, and magnetic moments to produce a quaternion-based estimate of absolute
	// device orientation -- which can be converted to yaw, pitch, and roll. Useful for stabilizing quadcopters, etc.
	// The performance of the orientation filter is at least as good as conventional Kalman-based filtering algorithms
	// but is much less computationally intensive---it can be performed on a 3.3 V Pro Mini operating at 8 MHz!
	float q1 = q[0], q2 = q[1], q3 = q[2], q4 = q[3];   // short name local variable for readability
 80024c6:	4b86      	ldr	r3, [pc, #536]	; (80026e0 <MadgwickQuaternionUpdate+0x244>)
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80024ce:	4b84      	ldr	r3, [pc, #528]	; (80026e0 <MadgwickQuaternionUpdate+0x244>)
 80024d0:	685b      	ldr	r3, [r3, #4]
 80024d2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80024d6:	4b82      	ldr	r3, [pc, #520]	; (80026e0 <MadgwickQuaternionUpdate+0x244>)
 80024d8:	689b      	ldr	r3, [r3, #8]
 80024da:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80024de:	4b80      	ldr	r3, [pc, #512]	; (80026e0 <MadgwickQuaternionUpdate+0x244>)
 80024e0:	68db      	ldr	r3, [r3, #12]
 80024e2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
	float _2q1my;
	float _2q1mz;
	float _2q2mx;
	float _4bx;
	float _4bz;
	float _2q1 = 2.0f * q1;
 80024e6:	edd7 7a31 	vldr	s15, [r7, #196]	; 0xc4
 80024ea:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80024ee:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
	float _2q2 = 2.0f * q2;
 80024f2:	edd7 7a30 	vldr	s15, [r7, #192]	; 0xc0
 80024f6:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80024fa:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
	float _2q3 = 2.0f * q3;
 80024fe:	edd7 7a2f 	vldr	s15, [r7, #188]	; 0xbc
 8002502:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002506:	edc7 7a2b 	vstr	s15, [r7, #172]	; 0xac
	float _2q4 = 2.0f * q4;
 800250a:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 800250e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002512:	edc7 7a2a 	vstr	s15, [r7, #168]	; 0xa8
	float _2q1q3 = 2.0f * q1 * q3;
 8002516:	edd7 7a31 	vldr	s15, [r7, #196]	; 0xc4
 800251a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800251e:	ed97 7a2f 	vldr	s14, [r7, #188]	; 0xbc
 8002522:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002526:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
	float _2q3q4 = 2.0f * q3 * q4;
 800252a:	edd7 7a2f 	vldr	s15, [r7, #188]	; 0xbc
 800252e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002532:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 8002536:	ee67 7a27 	vmul.f32	s15, s14, s15
 800253a:	edc7 7a28 	vstr	s15, [r7, #160]	; 0xa0
	float q1q1 = q1 * q1;
 800253e:	ed97 7a31 	vldr	s14, [r7, #196]	; 0xc4
 8002542:	edd7 7a31 	vldr	s15, [r7, #196]	; 0xc4
 8002546:	ee67 7a27 	vmul.f32	s15, s14, s15
 800254a:	edc7 7a27 	vstr	s15, [r7, #156]	; 0x9c
	float q1q2 = q1 * q2;
 800254e:	ed97 7a31 	vldr	s14, [r7, #196]	; 0xc4
 8002552:	edd7 7a30 	vldr	s15, [r7, #192]	; 0xc0
 8002556:	ee67 7a27 	vmul.f32	s15, s14, s15
 800255a:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
	float q1q3 = q1 * q3;
 800255e:	ed97 7a31 	vldr	s14, [r7, #196]	; 0xc4
 8002562:	edd7 7a2f 	vldr	s15, [r7, #188]	; 0xbc
 8002566:	ee67 7a27 	vmul.f32	s15, s14, s15
 800256a:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
	float q1q4 = q1 * q4;
 800256e:	ed97 7a31 	vldr	s14, [r7, #196]	; 0xc4
 8002572:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8002576:	ee67 7a27 	vmul.f32	s15, s14, s15
 800257a:	edc7 7a24 	vstr	s15, [r7, #144]	; 0x90
	float q2q2 = q2 * q2;
 800257e:	ed97 7a30 	vldr	s14, [r7, #192]	; 0xc0
 8002582:	edd7 7a30 	vldr	s15, [r7, #192]	; 0xc0
 8002586:	ee67 7a27 	vmul.f32	s15, s14, s15
 800258a:	edc7 7a23 	vstr	s15, [r7, #140]	; 0x8c
	float q2q3 = q2 * q3;
 800258e:	ed97 7a30 	vldr	s14, [r7, #192]	; 0xc0
 8002592:	edd7 7a2f 	vldr	s15, [r7, #188]	; 0xbc
 8002596:	ee67 7a27 	vmul.f32	s15, s14, s15
 800259a:	edc7 7a22 	vstr	s15, [r7, #136]	; 0x88
	float q2q4 = q2 * q4;
 800259e:	ed97 7a30 	vldr	s14, [r7, #192]	; 0xc0
 80025a2:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 80025a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80025aa:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
	float q3q3 = q3 * q3;
 80025ae:	ed97 7a2f 	vldr	s14, [r7, #188]	; 0xbc
 80025b2:	edd7 7a2f 	vldr	s15, [r7, #188]	; 0xbc
 80025b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80025ba:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
	float q3q4 = q3 * q4;
 80025be:	ed97 7a2f 	vldr	s14, [r7, #188]	; 0xbc
 80025c2:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 80025c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80025ca:	edc7 7a1f 	vstr	s15, [r7, #124]	; 0x7c
	float q4q4 = q4 * q4;
 80025ce:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 80025d2:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 80025d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80025da:	edc7 7a1e 	vstr	s15, [r7, #120]	; 0x78

	// Normalise accelerometer measurement
	norm = sqrt(ax * ax + ay * ay + az * az);
 80025de:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80025e2:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80025e6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80025ea:	edd7 6a08 	vldr	s13, [r7, #32]
 80025ee:	edd7 7a08 	vldr	s15, [r7, #32]
 80025f2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80025f6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80025fa:	edd7 6a07 	vldr	s13, [r7, #28]
 80025fe:	edd7 7a07 	vldr	s15, [r7, #28]
 8002602:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002606:	ee77 7a27 	vadd.f32	s15, s14, s15
 800260a:	ee17 0a90 	vmov	r0, s15
 800260e:	f7fd ff9b 	bl	8000548 <__aeabi_f2d>
 8002612:	4603      	mov	r3, r0
 8002614:	460c      	mov	r4, r1
 8002616:	ec44 3b10 	vmov	d0, r3, r4
 800261a:	f011 fbdf 	bl	8013ddc <sqrt>
 800261e:	ec54 3b10 	vmov	r3, r4, d0
 8002622:	4618      	mov	r0, r3
 8002624:	4621      	mov	r1, r4
 8002626:	f7fe fadf 	bl	8000be8 <__aeabi_d2f>
 800262a:	4603      	mov	r3, r0
 800262c:	677b      	str	r3, [r7, #116]	; 0x74
	if (norm == 0.0f) return; // handle NaN
 800262e:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8002632:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002636:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800263a:	f000 85fc 	beq.w	8003236 <MadgwickQuaternionUpdate+0xd9a>
	norm = 1.0f/norm;
 800263e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002642:	ed97 7a1d 	vldr	s14, [r7, #116]	; 0x74
 8002646:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800264a:	edc7 7a1d 	vstr	s15, [r7, #116]	; 0x74
	ax *= norm;
 800264e:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8002652:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8002656:	ee67 7a27 	vmul.f32	s15, s14, s15
 800265a:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
	ay *= norm;
 800265e:	ed97 7a08 	vldr	s14, [r7, #32]
 8002662:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8002666:	ee67 7a27 	vmul.f32	s15, s14, s15
 800266a:	edc7 7a08 	vstr	s15, [r7, #32]
	az *= norm;
 800266e:	ed97 7a07 	vldr	s14, [r7, #28]
 8002672:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8002676:	ee67 7a27 	vmul.f32	s15, s14, s15
 800267a:	edc7 7a07 	vstr	s15, [r7, #28]

	// Normalise magnetometer measurement
	norm = sqrt(mx * mx + my * my + mz * mz);
 800267e:	ed97 7a03 	vldr	s14, [r7, #12]
 8002682:	edd7 7a03 	vldr	s15, [r7, #12]
 8002686:	ee27 7a27 	vmul.f32	s14, s14, s15
 800268a:	edd7 6a02 	vldr	s13, [r7, #8]
 800268e:	edd7 7a02 	vldr	s15, [r7, #8]
 8002692:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002696:	ee37 7a27 	vadd.f32	s14, s14, s15
 800269a:	edd7 6a01 	vldr	s13, [r7, #4]
 800269e:	edd7 7a01 	vldr	s15, [r7, #4]
 80026a2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80026a6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80026aa:	ee17 0a90 	vmov	r0, s15
 80026ae:	f7fd ff4b 	bl	8000548 <__aeabi_f2d>
 80026b2:	4603      	mov	r3, r0
 80026b4:	460c      	mov	r4, r1
 80026b6:	ec44 3b10 	vmov	d0, r3, r4
 80026ba:	f011 fb8f 	bl	8013ddc <sqrt>
 80026be:	ec54 3b10 	vmov	r3, r4, d0
 80026c2:	4618      	mov	r0, r3
 80026c4:	4621      	mov	r1, r4
 80026c6:	f7fe fa8f 	bl	8000be8 <__aeabi_d2f>
 80026ca:	4603      	mov	r3, r0
 80026cc:	677b      	str	r3, [r7, #116]	; 0x74
	if (norm == 0.0f) return; // handle NaN
 80026ce:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 80026d2:	eef5 7a40 	vcmp.f32	s15, #0.0
 80026d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80026da:	f000 85ae 	beq.w	800323a <MadgwickQuaternionUpdate+0xd9e>
 80026de:	e001      	b.n	80026e4 <MadgwickQuaternionUpdate+0x248>
 80026e0:	20000858 	.word	0x20000858
	norm = 1.0f/norm;
 80026e4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80026e8:	ed97 7a1d 	vldr	s14, [r7, #116]	; 0x74
 80026ec:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80026f0:	edc7 7a1d 	vstr	s15, [r7, #116]	; 0x74
	mx *= norm;
 80026f4:	ed97 7a03 	vldr	s14, [r7, #12]
 80026f8:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 80026fc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002700:	edc7 7a03 	vstr	s15, [r7, #12]
	my *= norm;
 8002704:	ed97 7a02 	vldr	s14, [r7, #8]
 8002708:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 800270c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002710:	edc7 7a02 	vstr	s15, [r7, #8]
	mz *= norm;
 8002714:	ed97 7a01 	vldr	s14, [r7, #4]
 8002718:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 800271c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002720:	edc7 7a01 	vstr	s15, [r7, #4]

	// Reference direction of Earth's magnetic field
	_2q1mx = 2.0f * q1 * mx;
 8002724:	edd7 7a31 	vldr	s15, [r7, #196]	; 0xc4
 8002728:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800272c:	ed97 7a03 	vldr	s14, [r7, #12]
 8002730:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002734:	edc7 7a1c 	vstr	s15, [r7, #112]	; 0x70
	_2q1my = 2.0f * q1 * my;
 8002738:	edd7 7a31 	vldr	s15, [r7, #196]	; 0xc4
 800273c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002740:	ed97 7a02 	vldr	s14, [r7, #8]
 8002744:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002748:	edc7 7a1b 	vstr	s15, [r7, #108]	; 0x6c
	_2q1mz = 2.0f * q1 * mz;
 800274c:	edd7 7a31 	vldr	s15, [r7, #196]	; 0xc4
 8002750:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002754:	ed97 7a01 	vldr	s14, [r7, #4]
 8002758:	ee67 7a27 	vmul.f32	s15, s14, s15
 800275c:	edc7 7a1a 	vstr	s15, [r7, #104]	; 0x68
	_2q2mx = 2.0f * q2 * mx;
 8002760:	edd7 7a30 	vldr	s15, [r7, #192]	; 0xc0
 8002764:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002768:	ed97 7a03 	vldr	s14, [r7, #12]
 800276c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002770:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64
	hx = mx * q1q1 - _2q1my * q4 + _2q1mz * q3 + mx * q2q2 + _2q2 * my * q3 + _2q2 * mz * q4 - mx * q3q3 - mx * q4q4;
 8002774:	ed97 7a03 	vldr	s14, [r7, #12]
 8002778:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 800277c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002780:	edd7 6a1b 	vldr	s13, [r7, #108]	; 0x6c
 8002784:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8002788:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800278c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002790:	edd7 6a1a 	vldr	s13, [r7, #104]	; 0x68
 8002794:	edd7 7a2f 	vldr	s15, [r7, #188]	; 0xbc
 8002798:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800279c:	ee37 7a27 	vadd.f32	s14, s14, s15
 80027a0:	edd7 6a03 	vldr	s13, [r7, #12]
 80027a4:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 80027a8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80027ac:	ee37 7a27 	vadd.f32	s14, s14, s15
 80027b0:	edd7 6a2c 	vldr	s13, [r7, #176]	; 0xb0
 80027b4:	edd7 7a02 	vldr	s15, [r7, #8]
 80027b8:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80027bc:	edd7 7a2f 	vldr	s15, [r7, #188]	; 0xbc
 80027c0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80027c4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80027c8:	edd7 6a2c 	vldr	s13, [r7, #176]	; 0xb0
 80027cc:	edd7 7a01 	vldr	s15, [r7, #4]
 80027d0:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80027d4:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 80027d8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80027dc:	ee37 7a27 	vadd.f32	s14, s14, s15
 80027e0:	edd7 6a03 	vldr	s13, [r7, #12]
 80027e4:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 80027e8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80027ec:	ee37 7a67 	vsub.f32	s14, s14, s15
 80027f0:	edd7 6a03 	vldr	s13, [r7, #12]
 80027f4:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 80027f8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80027fc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002800:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
	hy = _2q1mx * q4 + my * q1q1 - _2q1mz * q2 + _2q2mx * q3 - my * q2q2 + my * q3q3 + _2q3 * mz * q4 - my * q4q4;
 8002804:	ed97 7a1c 	vldr	s14, [r7, #112]	; 0x70
 8002808:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 800280c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002810:	edd7 6a02 	vldr	s13, [r7, #8]
 8002814:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8002818:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800281c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002820:	edd7 6a1a 	vldr	s13, [r7, #104]	; 0x68
 8002824:	edd7 7a30 	vldr	s15, [r7, #192]	; 0xc0
 8002828:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800282c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002830:	edd7 6a19 	vldr	s13, [r7, #100]	; 0x64
 8002834:	edd7 7a2f 	vldr	s15, [r7, #188]	; 0xbc
 8002838:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800283c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002840:	edd7 6a02 	vldr	s13, [r7, #8]
 8002844:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8002848:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800284c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002850:	edd7 6a02 	vldr	s13, [r7, #8]
 8002854:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8002858:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800285c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002860:	edd7 6a2b 	vldr	s13, [r7, #172]	; 0xac
 8002864:	edd7 7a01 	vldr	s15, [r7, #4]
 8002868:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800286c:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8002870:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002874:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002878:	edd7 6a02 	vldr	s13, [r7, #8]
 800287c:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 8002880:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002884:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002888:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
	_2bx = sqrt(hx * hx + hy * hy);
 800288c:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 8002890:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8002894:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002898:	edd7 6a17 	vldr	s13, [r7, #92]	; 0x5c
 800289c:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 80028a0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80028a4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80028a8:	ee17 0a90 	vmov	r0, s15
 80028ac:	f7fd fe4c 	bl	8000548 <__aeabi_f2d>
 80028b0:	4603      	mov	r3, r0
 80028b2:	460c      	mov	r4, r1
 80028b4:	ec44 3b10 	vmov	d0, r3, r4
 80028b8:	f011 fa90 	bl	8013ddc <sqrt>
 80028bc:	ec54 3b10 	vmov	r3, r4, d0
 80028c0:	4618      	mov	r0, r3
 80028c2:	4621      	mov	r1, r4
 80028c4:	f7fe f990 	bl	8000be8 <__aeabi_d2f>
 80028c8:	4603      	mov	r3, r0
 80028ca:	65bb      	str	r3, [r7, #88]	; 0x58
	_2bz = -_2q1mx * q3 + _2q1my * q2 + mz * q1q1 + _2q2mx * q4 - mz * q2q2 + _2q3 * my * q4 - mz * q3q3 + mz * q4q4;
 80028cc:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 80028d0:	eeb1 7a67 	vneg.f32	s14, s15
 80028d4:	edd7 7a2f 	vldr	s15, [r7, #188]	; 0xbc
 80028d8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80028dc:	edd7 6a1b 	vldr	s13, [r7, #108]	; 0x6c
 80028e0:	edd7 7a30 	vldr	s15, [r7, #192]	; 0xc0
 80028e4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80028e8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80028ec:	edd7 6a01 	vldr	s13, [r7, #4]
 80028f0:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 80028f4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80028f8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80028fc:	edd7 6a19 	vldr	s13, [r7, #100]	; 0x64
 8002900:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8002904:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002908:	ee37 7a27 	vadd.f32	s14, s14, s15
 800290c:	edd7 6a01 	vldr	s13, [r7, #4]
 8002910:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8002914:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002918:	ee37 7a67 	vsub.f32	s14, s14, s15
 800291c:	edd7 6a2b 	vldr	s13, [r7, #172]	; 0xac
 8002920:	edd7 7a02 	vldr	s15, [r7, #8]
 8002924:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002928:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 800292c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002930:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002934:	edd7 6a01 	vldr	s13, [r7, #4]
 8002938:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 800293c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002940:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002944:	edd7 6a01 	vldr	s13, [r7, #4]
 8002948:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 800294c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002950:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002954:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
	_4bx = 2.0f * _2bx;
 8002958:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 800295c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002960:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
	_4bz = 2.0f * _2bz;
 8002964:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8002968:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800296c:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c

	// Gradient decent algorithm corrective step
	s1 = -_2q3 * (2.0f * q2q4 - _2q1q3 - ax) + _2q2 * (2.0f * q1q2 + _2q3q4 - ay) - _2bz * q3 * (_2bx * (0.5f - q3q3 - q4q4) + _2bz * (q2q4 - q1q3) - mx) + (-_2bx * q4 + _2bz * q2) * (_2bx * (q2q3 - q1q4) + _2bz * (q1q2 + q3q4) - my) + _2bx * q3 * (_2bx * (q1q3 + q2q4) + _2bz * (0.5f - q2q2 - q3q3) - mz);
 8002970:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 8002974:	eeb1 7a67 	vneg.f32	s14, s15
 8002978:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 800297c:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8002980:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8002984:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8002988:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800298c:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8002990:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002994:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 8002998:	ee77 6aa7 	vadd.f32	s13, s15, s15
 800299c:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 80029a0:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80029a4:	edd7 7a08 	vldr	s15, [r7, #32]
 80029a8:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80029ac:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 80029b0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80029b4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80029b8:	edd7 6a15 	vldr	s13, [r7, #84]	; 0x54
 80029bc:	edd7 7a2f 	vldr	s15, [r7, #188]	; 0xbc
 80029c0:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80029c4:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 80029c8:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 80029cc:	ee36 6a67 	vsub.f32	s12, s12, s15
 80029d0:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 80029d4:	ee36 6a67 	vsub.f32	s12, s12, s15
 80029d8:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 80029dc:	ee26 6a27 	vmul.f32	s12, s12, s15
 80029e0:	edd7 5a21 	vldr	s11, [r7, #132]	; 0x84
 80029e4:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 80029e8:	ee75 5ae7 	vsub.f32	s11, s11, s15
 80029ec:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 80029f0:	ee65 7aa7 	vmul.f32	s15, s11, s15
 80029f4:	ee36 6a27 	vadd.f32	s12, s12, s15
 80029f8:	edd7 7a03 	vldr	s15, [r7, #12]
 80029fc:	ee76 7a67 	vsub.f32	s15, s12, s15
 8002a00:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002a04:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002a08:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8002a0c:	eef1 6a67 	vneg.f32	s13, s15
 8002a10:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8002a14:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002a18:	ed97 6a15 	vldr	s12, [r7, #84]	; 0x54
 8002a1c:	edd7 7a30 	vldr	s15, [r7, #192]	; 0xc0
 8002a20:	ee66 7a27 	vmul.f32	s15, s12, s15
 8002a24:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8002a28:	ed97 6a22 	vldr	s12, [r7, #136]	; 0x88
 8002a2c:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 8002a30:	ee36 6a67 	vsub.f32	s12, s12, s15
 8002a34:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8002a38:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002a3c:	edd7 5a26 	vldr	s11, [r7, #152]	; 0x98
 8002a40:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 8002a44:	ee75 5aa7 	vadd.f32	s11, s11, s15
 8002a48:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8002a4c:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8002a50:	ee36 6a27 	vadd.f32	s12, s12, s15
 8002a54:	edd7 7a02 	vldr	s15, [r7, #8]
 8002a58:	ee76 7a67 	vsub.f32	s15, s12, s15
 8002a5c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002a60:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002a64:	edd7 6a16 	vldr	s13, [r7, #88]	; 0x58
 8002a68:	edd7 7a2f 	vldr	s15, [r7, #188]	; 0xbc
 8002a6c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002a70:	ed97 6a25 	vldr	s12, [r7, #148]	; 0x94
 8002a74:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8002a78:	ee36 6a27 	vadd.f32	s12, s12, s15
 8002a7c:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8002a80:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002a84:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 8002a88:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8002a8c:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8002a90:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8002a94:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8002a98:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8002a9c:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8002aa0:	ee36 6a27 	vadd.f32	s12, s12, s15
 8002aa4:	edd7 7a01 	vldr	s15, [r7, #4]
 8002aa8:	ee76 7a67 	vsub.f32	s15, s12, s15
 8002aac:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002ab0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002ab4:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
	s2 = _2q4 * (2.0f * q2q4 - _2q1q3 - ax) + _2q1 * (2.0f * q1q2 + _2q3q4 - ay) - 4.0f * q2 * (1.0f - 2.0f * q2q2 - 2.0f * q3q3 - az) + _2bz * q4 * (_2bx * (0.5f - q3q3 - q4q4) + _2bz * (q2q4 - q1q3) - mx) + (_2bx * q3 + _2bz * q1) * (_2bx * (q2q3 - q1q4) + _2bz * (q1q2 + q3q4) - my) + (_2bx * q4 - _4bz * q2) * (_2bx * (q1q3 + q2q4) + _2bz * (0.5f - q2q2 - q3q3) - mz);
 8002ab8:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8002abc:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8002ac0:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8002ac4:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002ac8:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002acc:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002ad0:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 8002ad4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002ad8:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 8002adc:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8002ae0:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 8002ae4:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8002ae8:	edd7 7a08 	vldr	s15, [r7, #32]
 8002aec:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8002af0:	edd7 7a2d 	vldr	s15, [r7, #180]	; 0xb4
 8002af4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002af8:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002afc:	edd7 7a30 	vldr	s15, [r7, #192]	; 0xc0
 8002b00:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 8002b04:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8002b08:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8002b0c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002b10:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8002b14:	ee36 6a67 	vsub.f32	s12, s12, s15
 8002b18:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8002b1c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002b20:	ee36 6a67 	vsub.f32	s12, s12, s15
 8002b24:	edd7 7a07 	vldr	s15, [r7, #28]
 8002b28:	ee76 7a67 	vsub.f32	s15, s12, s15
 8002b2c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002b30:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002b34:	edd7 6a15 	vldr	s13, [r7, #84]	; 0x54
 8002b38:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8002b3c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002b40:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8002b44:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8002b48:	ee36 6a67 	vsub.f32	s12, s12, s15
 8002b4c:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 8002b50:	ee36 6a67 	vsub.f32	s12, s12, s15
 8002b54:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8002b58:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002b5c:	edd7 5a21 	vldr	s11, [r7, #132]	; 0x84
 8002b60:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 8002b64:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8002b68:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8002b6c:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8002b70:	ee36 6a27 	vadd.f32	s12, s12, s15
 8002b74:	edd7 7a03 	vldr	s15, [r7, #12]
 8002b78:	ee76 7a67 	vsub.f32	s15, s12, s15
 8002b7c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002b80:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002b84:	edd7 6a16 	vldr	s13, [r7, #88]	; 0x58
 8002b88:	edd7 7a2f 	vldr	s15, [r7, #188]	; 0xbc
 8002b8c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002b90:	ed97 6a15 	vldr	s12, [r7, #84]	; 0x54
 8002b94:	edd7 7a31 	vldr	s15, [r7, #196]	; 0xc4
 8002b98:	ee66 7a27 	vmul.f32	s15, s12, s15
 8002b9c:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8002ba0:	ed97 6a22 	vldr	s12, [r7, #136]	; 0x88
 8002ba4:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 8002ba8:	ee36 6a67 	vsub.f32	s12, s12, s15
 8002bac:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8002bb0:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002bb4:	edd7 5a26 	vldr	s11, [r7, #152]	; 0x98
 8002bb8:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 8002bbc:	ee75 5aa7 	vadd.f32	s11, s11, s15
 8002bc0:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8002bc4:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8002bc8:	ee36 6a27 	vadd.f32	s12, s12, s15
 8002bcc:	edd7 7a02 	vldr	s15, [r7, #8]
 8002bd0:	ee76 7a67 	vsub.f32	s15, s12, s15
 8002bd4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002bd8:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002bdc:	edd7 6a16 	vldr	s13, [r7, #88]	; 0x58
 8002be0:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8002be4:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002be8:	ed97 6a13 	vldr	s12, [r7, #76]	; 0x4c
 8002bec:	edd7 7a30 	vldr	s15, [r7, #192]	; 0xc0
 8002bf0:	ee66 7a27 	vmul.f32	s15, s12, s15
 8002bf4:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8002bf8:	ed97 6a25 	vldr	s12, [r7, #148]	; 0x94
 8002bfc:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8002c00:	ee36 6a27 	vadd.f32	s12, s12, s15
 8002c04:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8002c08:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002c0c:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 8002c10:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8002c14:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8002c18:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8002c1c:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8002c20:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8002c24:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8002c28:	ee36 6a27 	vadd.f32	s12, s12, s15
 8002c2c:	edd7 7a01 	vldr	s15, [r7, #4]
 8002c30:	ee76 7a67 	vsub.f32	s15, s12, s15
 8002c34:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002c38:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002c3c:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
	s3 = -_2q1 * (2.0f * q2q4 - _2q1q3 - ax) + _2q4 * (2.0f * q1q2 + _2q3q4 - ay) - 4.0f * q3 * (1.0f - 2.0f * q2q2 - 2.0f * q3q3 - az) + (-_4bx * q3 - _2bz * q1) * (_2bx * (0.5f - q3q3 - q4q4) + _2bz * (q2q4 - q1q3) - mx) + (_2bx * q2 + _2bz * q4) * (_2bx * (q2q3 - q1q4) + _2bz * (q1q2 + q3q4) - my) + (_2bx * q1 - _4bz * q3) * (_2bx * (q1q3 + q2q4) + _2bz * (0.5f - q2q2 - q3q3) - mz);
 8002c40:	edd7 7a2d 	vldr	s15, [r7, #180]	; 0xb4
 8002c44:	eeb1 7a67 	vneg.f32	s14, s15
 8002c48:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8002c4c:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8002c50:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8002c54:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8002c58:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002c5c:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8002c60:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002c64:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 8002c68:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8002c6c:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 8002c70:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8002c74:	edd7 7a08 	vldr	s15, [r7, #32]
 8002c78:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8002c7c:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 8002c80:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002c84:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002c88:	edd7 7a2f 	vldr	s15, [r7, #188]	; 0xbc
 8002c8c:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 8002c90:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8002c94:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8002c98:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002c9c:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8002ca0:	ee36 6a67 	vsub.f32	s12, s12, s15
 8002ca4:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8002ca8:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002cac:	ee36 6a67 	vsub.f32	s12, s12, s15
 8002cb0:	edd7 7a07 	vldr	s15, [r7, #28]
 8002cb4:	ee76 7a67 	vsub.f32	s15, s12, s15
 8002cb8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002cbc:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002cc0:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8002cc4:	eef1 6a67 	vneg.f32	s13, s15
 8002cc8:	edd7 7a2f 	vldr	s15, [r7, #188]	; 0xbc
 8002ccc:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002cd0:	ed97 6a15 	vldr	s12, [r7, #84]	; 0x54
 8002cd4:	edd7 7a31 	vldr	s15, [r7, #196]	; 0xc4
 8002cd8:	ee66 7a27 	vmul.f32	s15, s12, s15
 8002cdc:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8002ce0:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8002ce4:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8002ce8:	ee36 6a67 	vsub.f32	s12, s12, s15
 8002cec:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 8002cf0:	ee36 6a67 	vsub.f32	s12, s12, s15
 8002cf4:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8002cf8:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002cfc:	edd7 5a21 	vldr	s11, [r7, #132]	; 0x84
 8002d00:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 8002d04:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8002d08:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8002d0c:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8002d10:	ee36 6a27 	vadd.f32	s12, s12, s15
 8002d14:	edd7 7a03 	vldr	s15, [r7, #12]
 8002d18:	ee76 7a67 	vsub.f32	s15, s12, s15
 8002d1c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002d20:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002d24:	edd7 6a16 	vldr	s13, [r7, #88]	; 0x58
 8002d28:	edd7 7a30 	vldr	s15, [r7, #192]	; 0xc0
 8002d2c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002d30:	ed97 6a15 	vldr	s12, [r7, #84]	; 0x54
 8002d34:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8002d38:	ee66 7a27 	vmul.f32	s15, s12, s15
 8002d3c:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8002d40:	ed97 6a22 	vldr	s12, [r7, #136]	; 0x88
 8002d44:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 8002d48:	ee36 6a67 	vsub.f32	s12, s12, s15
 8002d4c:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8002d50:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002d54:	edd7 5a26 	vldr	s11, [r7, #152]	; 0x98
 8002d58:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 8002d5c:	ee75 5aa7 	vadd.f32	s11, s11, s15
 8002d60:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8002d64:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8002d68:	ee36 6a27 	vadd.f32	s12, s12, s15
 8002d6c:	edd7 7a02 	vldr	s15, [r7, #8]
 8002d70:	ee76 7a67 	vsub.f32	s15, s12, s15
 8002d74:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002d78:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002d7c:	edd7 6a16 	vldr	s13, [r7, #88]	; 0x58
 8002d80:	edd7 7a31 	vldr	s15, [r7, #196]	; 0xc4
 8002d84:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002d88:	ed97 6a13 	vldr	s12, [r7, #76]	; 0x4c
 8002d8c:	edd7 7a2f 	vldr	s15, [r7, #188]	; 0xbc
 8002d90:	ee66 7a27 	vmul.f32	s15, s12, s15
 8002d94:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8002d98:	ed97 6a25 	vldr	s12, [r7, #148]	; 0x94
 8002d9c:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8002da0:	ee36 6a27 	vadd.f32	s12, s12, s15
 8002da4:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8002da8:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002dac:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 8002db0:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8002db4:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8002db8:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8002dbc:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8002dc0:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8002dc4:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8002dc8:	ee36 6a27 	vadd.f32	s12, s12, s15
 8002dcc:	edd7 7a01 	vldr	s15, [r7, #4]
 8002dd0:	ee76 7a67 	vsub.f32	s15, s12, s15
 8002dd4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002dd8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002ddc:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
	s4 = _2q2 * (2.0f * q2q4 - _2q1q3 - ax) + _2q3 * (2.0f * q1q2 + _2q3q4 - ay) + (-_4bx * q4 + _2bz * q2) * (_2bx * (0.5f - q3q3 - q4q4) + _2bz * (q2q4 - q1q3) - mx) + (-_2bx * q1 + _2bz * q3) * (_2bx * (q2q3 - q1q4) + _2bz * (q1q2 + q3q4) - my) + _2bx * q2 * (_2bx * (q1q3 + q2q4) + _2bz * (0.5f - q2q2 - q3q3) - mz);
 8002de0:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8002de4:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8002de8:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8002dec:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002df0:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002df4:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002df8:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 8002dfc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002e00:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 8002e04:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8002e08:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 8002e0c:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8002e10:	edd7 7a08 	vldr	s15, [r7, #32]
 8002e14:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8002e18:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 8002e1c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002e20:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002e24:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8002e28:	eef1 6a67 	vneg.f32	s13, s15
 8002e2c:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8002e30:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002e34:	ed97 6a15 	vldr	s12, [r7, #84]	; 0x54
 8002e38:	edd7 7a30 	vldr	s15, [r7, #192]	; 0xc0
 8002e3c:	ee66 7a27 	vmul.f32	s15, s12, s15
 8002e40:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8002e44:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8002e48:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8002e4c:	ee36 6a67 	vsub.f32	s12, s12, s15
 8002e50:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 8002e54:	ee36 6a67 	vsub.f32	s12, s12, s15
 8002e58:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8002e5c:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002e60:	edd7 5a21 	vldr	s11, [r7, #132]	; 0x84
 8002e64:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 8002e68:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8002e6c:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8002e70:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8002e74:	ee36 6a27 	vadd.f32	s12, s12, s15
 8002e78:	edd7 7a03 	vldr	s15, [r7, #12]
 8002e7c:	ee76 7a67 	vsub.f32	s15, s12, s15
 8002e80:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002e84:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002e88:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8002e8c:	eef1 6a67 	vneg.f32	s13, s15
 8002e90:	edd7 7a31 	vldr	s15, [r7, #196]	; 0xc4
 8002e94:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002e98:	ed97 6a15 	vldr	s12, [r7, #84]	; 0x54
 8002e9c:	edd7 7a2f 	vldr	s15, [r7, #188]	; 0xbc
 8002ea0:	ee66 7a27 	vmul.f32	s15, s12, s15
 8002ea4:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8002ea8:	ed97 6a22 	vldr	s12, [r7, #136]	; 0x88
 8002eac:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 8002eb0:	ee36 6a67 	vsub.f32	s12, s12, s15
 8002eb4:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8002eb8:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002ebc:	edd7 5a26 	vldr	s11, [r7, #152]	; 0x98
 8002ec0:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 8002ec4:	ee75 5aa7 	vadd.f32	s11, s11, s15
 8002ec8:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8002ecc:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8002ed0:	ee36 6a27 	vadd.f32	s12, s12, s15
 8002ed4:	edd7 7a02 	vldr	s15, [r7, #8]
 8002ed8:	ee76 7a67 	vsub.f32	s15, s12, s15
 8002edc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002ee0:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002ee4:	edd7 6a16 	vldr	s13, [r7, #88]	; 0x58
 8002ee8:	edd7 7a30 	vldr	s15, [r7, #192]	; 0xc0
 8002eec:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002ef0:	ed97 6a25 	vldr	s12, [r7, #148]	; 0x94
 8002ef4:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8002ef8:	ee36 6a27 	vadd.f32	s12, s12, s15
 8002efc:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8002f00:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002f04:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 8002f08:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8002f0c:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8002f10:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8002f14:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8002f18:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8002f1c:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8002f20:	ee36 6a27 	vadd.f32	s12, s12, s15
 8002f24:	edd7 7a01 	vldr	s15, [r7, #4]
 8002f28:	ee76 7a67 	vsub.f32	s15, s12, s15
 8002f2c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002f30:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002f34:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
	norm = sqrt(s1 * s1 + s2 * s2 + s3 * s3 + s4 * s4);    // normalise step magnitude
 8002f38:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8002f3c:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8002f40:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002f44:	edd7 6a11 	vldr	s13, [r7, #68]	; 0x44
 8002f48:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8002f4c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002f50:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002f54:	edd7 6a10 	vldr	s13, [r7, #64]	; 0x40
 8002f58:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8002f5c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002f60:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002f64:	edd7 6a0f 	vldr	s13, [r7, #60]	; 0x3c
 8002f68:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8002f6c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002f70:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002f74:	ee17 0a90 	vmov	r0, s15
 8002f78:	f7fd fae6 	bl	8000548 <__aeabi_f2d>
 8002f7c:	4603      	mov	r3, r0
 8002f7e:	460c      	mov	r4, r1
 8002f80:	ec44 3b10 	vmov	d0, r3, r4
 8002f84:	f010 ff2a 	bl	8013ddc <sqrt>
 8002f88:	ec54 3b10 	vmov	r3, r4, d0
 8002f8c:	4618      	mov	r0, r3
 8002f8e:	4621      	mov	r1, r4
 8002f90:	f7fd fe2a 	bl	8000be8 <__aeabi_d2f>
 8002f94:	4603      	mov	r3, r0
 8002f96:	677b      	str	r3, [r7, #116]	; 0x74
	norm = 1.0f/norm;
 8002f98:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002f9c:	ed97 7a1d 	vldr	s14, [r7, #116]	; 0x74
 8002fa0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002fa4:	edc7 7a1d 	vstr	s15, [r7, #116]	; 0x74
	s1 *= norm;
 8002fa8:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8002fac:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8002fb0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002fb4:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
	s2 *= norm;
 8002fb8:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 8002fbc:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8002fc0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002fc4:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
	s3 *= norm;
 8002fc8:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8002fcc:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8002fd0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002fd4:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
	s4 *= norm;
 8002fd8:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8002fdc:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8002fe0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002fe4:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

	// Compute rate of change of quaternion
	qDot1 = 0.5f * (-q2 * gx - q3 * gy - q4 * gz) - beta * s1;
 8002fe8:	edd7 7a30 	vldr	s15, [r7, #192]	; 0xc0
 8002fec:	eeb1 7a67 	vneg.f32	s14, s15
 8002ff0:	edd7 7a06 	vldr	s15, [r7, #24]
 8002ff4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002ff8:	edd7 6a2f 	vldr	s13, [r7, #188]	; 0xbc
 8002ffc:	edd7 7a05 	vldr	s15, [r7, #20]
 8003000:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003004:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003008:	edd7 6a2e 	vldr	s13, [r7, #184]	; 0xb8
 800300c:	edd7 7a04 	vldr	s15, [r7, #16]
 8003010:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003014:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003018:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800301c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003020:	4b88      	ldr	r3, [pc, #544]	; (8003244 <MadgwickQuaternionUpdate+0xda8>)
 8003022:	edd3 6a00 	vldr	s13, [r3]
 8003026:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 800302a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800302e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003032:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
	qDot2 = 0.5f * (q1 * gx + q3 * gz - q4 * gy) - beta * s2;
 8003036:	ed97 7a31 	vldr	s14, [r7, #196]	; 0xc4
 800303a:	edd7 7a06 	vldr	s15, [r7, #24]
 800303e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003042:	edd7 6a2f 	vldr	s13, [r7, #188]	; 0xbc
 8003046:	edd7 7a04 	vldr	s15, [r7, #16]
 800304a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800304e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003052:	edd7 6a2e 	vldr	s13, [r7, #184]	; 0xb8
 8003056:	edd7 7a05 	vldr	s15, [r7, #20]
 800305a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800305e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003062:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8003066:	ee27 7a87 	vmul.f32	s14, s15, s14
 800306a:	4b76      	ldr	r3, [pc, #472]	; (8003244 <MadgwickQuaternionUpdate+0xda8>)
 800306c:	edd3 6a00 	vldr	s13, [r3]
 8003070:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8003074:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003078:	ee77 7a67 	vsub.f32	s15, s14, s15
 800307c:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
	qDot3 = 0.5f * (q1 * gy - q2 * gz + q4 * gx) - beta * s3;
 8003080:	ed97 7a31 	vldr	s14, [r7, #196]	; 0xc4
 8003084:	edd7 7a05 	vldr	s15, [r7, #20]
 8003088:	ee27 7a27 	vmul.f32	s14, s14, s15
 800308c:	edd7 6a30 	vldr	s13, [r7, #192]	; 0xc0
 8003090:	edd7 7a04 	vldr	s15, [r7, #16]
 8003094:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003098:	ee37 7a67 	vsub.f32	s14, s14, s15
 800309c:	edd7 6a2e 	vldr	s13, [r7, #184]	; 0xb8
 80030a0:	edd7 7a06 	vldr	s15, [r7, #24]
 80030a4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80030a8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80030ac:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80030b0:	ee27 7a87 	vmul.f32	s14, s15, s14
 80030b4:	4b63      	ldr	r3, [pc, #396]	; (8003244 <MadgwickQuaternionUpdate+0xda8>)
 80030b6:	edd3 6a00 	vldr	s13, [r3]
 80030ba:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 80030be:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80030c2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80030c6:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
	qDot4 = 0.5f * (q1 * gz + q2 * gy - q3 * gx) - beta * s4;
 80030ca:	ed97 7a31 	vldr	s14, [r7, #196]	; 0xc4
 80030ce:	edd7 7a04 	vldr	s15, [r7, #16]
 80030d2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80030d6:	edd7 6a30 	vldr	s13, [r7, #192]	; 0xc0
 80030da:	edd7 7a05 	vldr	s15, [r7, #20]
 80030de:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80030e2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80030e6:	edd7 6a2f 	vldr	s13, [r7, #188]	; 0xbc
 80030ea:	edd7 7a06 	vldr	s15, [r7, #24]
 80030ee:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80030f2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80030f6:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80030fa:	ee27 7a87 	vmul.f32	s14, s15, s14
 80030fe:	4b51      	ldr	r3, [pc, #324]	; (8003244 <MadgwickQuaternionUpdate+0xda8>)
 8003100:	edd3 6a00 	vldr	s13, [r3]
 8003104:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8003108:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800310c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003110:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c

	// Integrate to yield quaternion
	q1 += qDot1 * deltat;
 8003114:	4b4c      	ldr	r3, [pc, #304]	; (8003248 <MadgwickQuaternionUpdate+0xdac>)
 8003116:	ed93 7a00 	vldr	s14, [r3]
 800311a:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 800311e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003122:	ed97 7a31 	vldr	s14, [r7, #196]	; 0xc4
 8003126:	ee77 7a27 	vadd.f32	s15, s14, s15
 800312a:	edc7 7a31 	vstr	s15, [r7, #196]	; 0xc4
	q2 += qDot2 * deltat;
 800312e:	4b46      	ldr	r3, [pc, #280]	; (8003248 <MadgwickQuaternionUpdate+0xdac>)
 8003130:	ed93 7a00 	vldr	s14, [r3]
 8003134:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8003138:	ee67 7a27 	vmul.f32	s15, s14, s15
 800313c:	ed97 7a30 	vldr	s14, [r7, #192]	; 0xc0
 8003140:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003144:	edc7 7a30 	vstr	s15, [r7, #192]	; 0xc0
	q3 += qDot3 * deltat;
 8003148:	4b3f      	ldr	r3, [pc, #252]	; (8003248 <MadgwickQuaternionUpdate+0xdac>)
 800314a:	ed93 7a00 	vldr	s14, [r3]
 800314e:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8003152:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003156:	ed97 7a2f 	vldr	s14, [r7, #188]	; 0xbc
 800315a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800315e:	edc7 7a2f 	vstr	s15, [r7, #188]	; 0xbc
	q4 += qDot4 * deltat;
 8003162:	4b39      	ldr	r3, [pc, #228]	; (8003248 <MadgwickQuaternionUpdate+0xdac>)
 8003164:	ed93 7a00 	vldr	s14, [r3]
 8003168:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800316c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003170:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 8003174:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003178:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
	norm = sqrt(q1 * q1 + q2 * q2 + q3 * q3 + q4 * q4);    // normalise quaternion
 800317c:	ed97 7a31 	vldr	s14, [r7, #196]	; 0xc4
 8003180:	edd7 7a31 	vldr	s15, [r7, #196]	; 0xc4
 8003184:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003188:	edd7 6a30 	vldr	s13, [r7, #192]	; 0xc0
 800318c:	edd7 7a30 	vldr	s15, [r7, #192]	; 0xc0
 8003190:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003194:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003198:	edd7 6a2f 	vldr	s13, [r7, #188]	; 0xbc
 800319c:	edd7 7a2f 	vldr	s15, [r7, #188]	; 0xbc
 80031a0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80031a4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80031a8:	edd7 6a2e 	vldr	s13, [r7, #184]	; 0xb8
 80031ac:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 80031b0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80031b4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80031b8:	ee17 0a90 	vmov	r0, s15
 80031bc:	f7fd f9c4 	bl	8000548 <__aeabi_f2d>
 80031c0:	4603      	mov	r3, r0
 80031c2:	460c      	mov	r4, r1
 80031c4:	ec44 3b10 	vmov	d0, r3, r4
 80031c8:	f010 fe08 	bl	8013ddc <sqrt>
 80031cc:	ec54 3b10 	vmov	r3, r4, d0
 80031d0:	4618      	mov	r0, r3
 80031d2:	4621      	mov	r1, r4
 80031d4:	f7fd fd08 	bl	8000be8 <__aeabi_d2f>
 80031d8:	4603      	mov	r3, r0
 80031da:	677b      	str	r3, [r7, #116]	; 0x74
	norm = 1.0f/norm;
 80031dc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80031e0:	ed97 7a1d 	vldr	s14, [r7, #116]	; 0x74
 80031e4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80031e8:	edc7 7a1d 	vstr	s15, [r7, #116]	; 0x74
	q[0] = q1 * norm;
 80031ec:	ed97 7a31 	vldr	s14, [r7, #196]	; 0xc4
 80031f0:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 80031f4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80031f8:	4b14      	ldr	r3, [pc, #80]	; (800324c <MadgwickQuaternionUpdate+0xdb0>)
 80031fa:	edc3 7a00 	vstr	s15, [r3]
	q[1] = q2 * norm;
 80031fe:	ed97 7a30 	vldr	s14, [r7, #192]	; 0xc0
 8003202:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8003206:	ee67 7a27 	vmul.f32	s15, s14, s15
 800320a:	4b10      	ldr	r3, [pc, #64]	; (800324c <MadgwickQuaternionUpdate+0xdb0>)
 800320c:	edc3 7a01 	vstr	s15, [r3, #4]
	q[2] = q3 * norm;
 8003210:	ed97 7a2f 	vldr	s14, [r7, #188]	; 0xbc
 8003214:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8003218:	ee67 7a27 	vmul.f32	s15, s14, s15
 800321c:	4b0b      	ldr	r3, [pc, #44]	; (800324c <MadgwickQuaternionUpdate+0xdb0>)
 800321e:	edc3 7a02 	vstr	s15, [r3, #8]
	q[3] = q4 * norm;
 8003222:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 8003226:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 800322a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800322e:	4b07      	ldr	r3, [pc, #28]	; (800324c <MadgwickQuaternionUpdate+0xdb0>)
 8003230:	edc3 7a03 	vstr	s15, [r3, #12]
 8003234:	e002      	b.n	800323c <MadgwickQuaternionUpdate+0xda0>
	if (norm == 0.0f) return; // handle NaN
 8003236:	bf00      	nop
 8003238:	e000      	b.n	800323c <MadgwickQuaternionUpdate+0xda0>
	if (norm == 0.0f) return; // handle NaN
 800323a:	bf00      	nop

}
 800323c:	37cc      	adds	r7, #204	; 0xcc
 800323e:	46bd      	mov	sp, r7
 8003240:	bd90      	pop	{r4, r7, pc}
 8003242:	bf00      	nop
 8003244:	20000820 	.word	0x20000820
 8003248:	20000840 	.word	0x20000840
 800324c:	20000858 	.word	0x20000858

08003250 <print>:
static void loop(void);

static uint32_t printLen = 0;
static char printBuffer[512];
static inline void print(char* str)
{
 8003250:	b580      	push	{r7, lr}
 8003252:	b082      	sub	sp, #8
 8003254:	af00      	add	r7, sp, #0
 8003256:	6078      	str	r0, [r7, #4]
	#if PRINT_OUT
	HAL_GPIO_WritePin(LEDB_GPIO_Port, LEDB_Pin, GPIO_PIN_SET);
 8003258:	2201      	movs	r2, #1
 800325a:	2140      	movs	r1, #64	; 0x40
 800325c:	480c      	ldr	r0, [pc, #48]	; (8003290 <print+0x40>)
 800325e:	f002 fd49 	bl	8005cf4 <HAL_GPIO_WritePin>

	while (CDC_Transmit_FS((uint8_t*) str, strlen(str)) == USBD_BUSY);
 8003262:	bf00      	nop
 8003264:	6878      	ldr	r0, [r7, #4]
 8003266:	f7fc ffb3 	bl	80001d0 <strlen>
 800326a:	4603      	mov	r3, r0
 800326c:	b29b      	uxth	r3, r3
 800326e:	4619      	mov	r1, r3
 8003270:	6878      	ldr	r0, [r7, #4]
 8003272:	f00c faa3 	bl	800f7bc <CDC_Transmit_FS>
 8003276:	4603      	mov	r3, r0
 8003278:	2b01      	cmp	r3, #1
 800327a:	d0f3      	beq.n	8003264 <print+0x14>

	HAL_GPIO_WritePin(LEDB_GPIO_Port, LEDB_Pin, GPIO_PIN_RESET);
 800327c:	2200      	movs	r2, #0
 800327e:	2140      	movs	r1, #64	; 0x40
 8003280:	4803      	ldr	r0, [pc, #12]	; (8003290 <print+0x40>)
 8003282:	f002 fd37 	bl	8005cf4 <HAL_GPIO_WritePin>
	#endif
};
 8003286:	bf00      	nop
 8003288:	3708      	adds	r7, #8
 800328a:	46bd      	mov	sp, r7
 800328c:	bd80      	pop	{r7, pc}
 800328e:	bf00      	nop
 8003290:	40020800 	.word	0x40020800

08003294 <println>:
static inline void println(char* str)
{
 8003294:	b580      	push	{r7, lr}
 8003296:	b084      	sub	sp, #16
 8003298:	af00      	add	r7, sp, #0
 800329a:	6078      	str	r0, [r7, #4]
	#if PRINT_OUT
	HAL_GPIO_WritePin(LEDB_GPIO_Port, LEDB_Pin, GPIO_PIN_SET);
 800329c:	2201      	movs	r2, #1
 800329e:	2140      	movs	r1, #64	; 0x40
 80032a0:	4820      	ldr	r0, [pc, #128]	; (8003324 <println+0x90>)
 80032a2:	f002 fd27 	bl	8005cf4 <HAL_GPIO_WritePin>

	printLen = strlen(str);
 80032a6:	6878      	ldr	r0, [r7, #4]
 80032a8:	f7fc ff92 	bl	80001d0 <strlen>
 80032ac:	4602      	mov	r2, r0
 80032ae:	4b1e      	ldr	r3, [pc, #120]	; (8003328 <println+0x94>)
 80032b0:	601a      	str	r2, [r3, #0]
	uint8_t i;
	for (i = 0; i < printLen; i++)
 80032b2:	2300      	movs	r3, #0
 80032b4:	73fb      	strb	r3, [r7, #15]
 80032b6:	e009      	b.n	80032cc <println+0x38>
	{
		printBuffer[i] = str[i];
 80032b8:	7bfb      	ldrb	r3, [r7, #15]
 80032ba:	687a      	ldr	r2, [r7, #4]
 80032bc:	441a      	add	r2, r3
 80032be:	7bfb      	ldrb	r3, [r7, #15]
 80032c0:	7811      	ldrb	r1, [r2, #0]
 80032c2:	4a1a      	ldr	r2, [pc, #104]	; (800332c <println+0x98>)
 80032c4:	54d1      	strb	r1, [r2, r3]
	for (i = 0; i < printLen; i++)
 80032c6:	7bfb      	ldrb	r3, [r7, #15]
 80032c8:	3301      	adds	r3, #1
 80032ca:	73fb      	strb	r3, [r7, #15]
 80032cc:	7bfa      	ldrb	r2, [r7, #15]
 80032ce:	4b16      	ldr	r3, [pc, #88]	; (8003328 <println+0x94>)
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	429a      	cmp	r2, r3
 80032d4:	d3f0      	bcc.n	80032b8 <println+0x24>
	}
	printBuffer[printLen] = '\n';
 80032d6:	4b14      	ldr	r3, [pc, #80]	; (8003328 <println+0x94>)
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	4a14      	ldr	r2, [pc, #80]	; (800332c <println+0x98>)
 80032dc:	210a      	movs	r1, #10
 80032de:	54d1      	strb	r1, [r2, r3]
	printBuffer[printLen + 1] = '\r';
 80032e0:	4b11      	ldr	r3, [pc, #68]	; (8003328 <println+0x94>)
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	3301      	adds	r3, #1
 80032e6:	4a11      	ldr	r2, [pc, #68]	; (800332c <println+0x98>)
 80032e8:	210d      	movs	r1, #13
 80032ea:	54d1      	strb	r1, [r2, r3]
	printBuffer[printLen + 2] = '\0';
 80032ec:	4b0e      	ldr	r3, [pc, #56]	; (8003328 <println+0x94>)
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	3302      	adds	r3, #2
 80032f2:	4a0e      	ldr	r2, [pc, #56]	; (800332c <println+0x98>)
 80032f4:	2100      	movs	r1, #0
 80032f6:	54d1      	strb	r1, [r2, r3]
 	while (CDC_Transmit_FS((uint8_t*) printBuffer, printLen + 3) == USBD_BUSY);
 80032f8:	bf00      	nop
 80032fa:	4b0b      	ldr	r3, [pc, #44]	; (8003328 <println+0x94>)
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	b29b      	uxth	r3, r3
 8003300:	3303      	adds	r3, #3
 8003302:	b29b      	uxth	r3, r3
 8003304:	4619      	mov	r1, r3
 8003306:	4809      	ldr	r0, [pc, #36]	; (800332c <println+0x98>)
 8003308:	f00c fa58 	bl	800f7bc <CDC_Transmit_FS>
 800330c:	4603      	mov	r3, r0
 800330e:	2b01      	cmp	r3, #1
 8003310:	d0f3      	beq.n	80032fa <println+0x66>

	HAL_GPIO_WritePin(LEDB_GPIO_Port, LEDB_Pin, GPIO_PIN_RESET);
 8003312:	2200      	movs	r2, #0
 8003314:	2140      	movs	r1, #64	; 0x40
 8003316:	4803      	ldr	r0, [pc, #12]	; (8003324 <println+0x90>)
 8003318:	f002 fcec 	bl	8005cf4 <HAL_GPIO_WritePin>
	#endif
};
 800331c:	bf00      	nop
 800331e:	3710      	adds	r7, #16
 8003320:	46bd      	mov	sp, r7
 8003322:	bd80      	pop	{r7, pc}
 8003324:	40020800 	.word	0x40020800
 8003328:	2000036c 	.word	0x2000036c
 800332c:	20000370 	.word	0x20000370

08003330 <print_int>:

	HAL_GPIO_WritePin(LEDB_GPIO_Port, LEDB_Pin, GPIO_PIN_RESET);
	#endif
}
static inline void print_int(int number)
{
 8003330:	b580      	push	{r7, lr}
 8003332:	b082      	sub	sp, #8
 8003334:	af00      	add	r7, sp, #0
 8003336:	6078      	str	r0, [r7, #4]
	#if PRINT_OUT
	HAL_GPIO_WritePin(LEDB_GPIO_Port, LEDB_Pin, GPIO_PIN_SET);
 8003338:	2201      	movs	r2, #1
 800333a:	2140      	movs	r1, #64	; 0x40
 800333c:	480f      	ldr	r0, [pc, #60]	; (800337c <print_int+0x4c>)
 800333e:	f002 fcd9 	bl	8005cf4 <HAL_GPIO_WritePin>

	printLen = sprintf(printBuffer, "%d", number);
 8003342:	687a      	ldr	r2, [r7, #4]
 8003344:	490e      	ldr	r1, [pc, #56]	; (8003380 <print_int+0x50>)
 8003346:	480f      	ldr	r0, [pc, #60]	; (8003384 <print_int+0x54>)
 8003348:	f00d fdb0 	bl	8010eac <siprintf>
 800334c:	4603      	mov	r3, r0
 800334e:	461a      	mov	r2, r3
 8003350:	4b0d      	ldr	r3, [pc, #52]	; (8003388 <print_int+0x58>)
 8003352:	601a      	str	r2, [r3, #0]
	while (CDC_Transmit_FS((uint8_t*) printBuffer, printLen) == USBD_BUSY);
 8003354:	bf00      	nop
 8003356:	4b0c      	ldr	r3, [pc, #48]	; (8003388 <print_int+0x58>)
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	b29b      	uxth	r3, r3
 800335c:	4619      	mov	r1, r3
 800335e:	4809      	ldr	r0, [pc, #36]	; (8003384 <print_int+0x54>)
 8003360:	f00c fa2c 	bl	800f7bc <CDC_Transmit_FS>
 8003364:	4603      	mov	r3, r0
 8003366:	2b01      	cmp	r3, #1
 8003368:	d0f5      	beq.n	8003356 <print_int+0x26>

	HAL_GPIO_WritePin(LEDB_GPIO_Port, LEDB_Pin, GPIO_PIN_RESET);
 800336a:	2200      	movs	r2, #0
 800336c:	2140      	movs	r1, #64	; 0x40
 800336e:	4803      	ldr	r0, [pc, #12]	; (800337c <print_int+0x4c>)
 8003370:	f002 fcc0 	bl	8005cf4 <HAL_GPIO_WritePin>
	#endif
}
 8003374:	bf00      	nop
 8003376:	3708      	adds	r7, #8
 8003378:	46bd      	mov	sp, r7
 800337a:	bd80      	pop	{r7, pc}
 800337c:	40020800 	.word	0x40020800
 8003380:	08015248 	.word	0x08015248
 8003384:	20000370 	.word	0x20000370
 8003388:	2000036c 	.word	0x2000036c

0800338c <print_float>:
static inline void print_float(float number)
{
 800338c:	b590      	push	{r4, r7, lr}
 800338e:	b083      	sub	sp, #12
 8003390:	af00      	add	r7, sp, #0
 8003392:	ed87 0a01 	vstr	s0, [r7, #4]
	#if PRINT_OUT
	HAL_GPIO_WritePin(LEDB_GPIO_Port, LEDB_Pin, GPIO_PIN_SET);
 8003396:	2201      	movs	r2, #1
 8003398:	2140      	movs	r1, #64	; 0x40
 800339a:	4813      	ldr	r0, [pc, #76]	; (80033e8 <print_float+0x5c>)
 800339c:	f002 fcaa 	bl	8005cf4 <HAL_GPIO_WritePin>

	printLen = sprintf(printBuffer, "%f", number);
 80033a0:	6878      	ldr	r0, [r7, #4]
 80033a2:	f7fd f8d1 	bl	8000548 <__aeabi_f2d>
 80033a6:	4603      	mov	r3, r0
 80033a8:	460c      	mov	r4, r1
 80033aa:	461a      	mov	r2, r3
 80033ac:	4623      	mov	r3, r4
 80033ae:	490f      	ldr	r1, [pc, #60]	; (80033ec <print_float+0x60>)
 80033b0:	480f      	ldr	r0, [pc, #60]	; (80033f0 <print_float+0x64>)
 80033b2:	f00d fd7b 	bl	8010eac <siprintf>
 80033b6:	4603      	mov	r3, r0
 80033b8:	461a      	mov	r2, r3
 80033ba:	4b0e      	ldr	r3, [pc, #56]	; (80033f4 <print_float+0x68>)
 80033bc:	601a      	str	r2, [r3, #0]
	while (CDC_Transmit_FS((uint8_t*) printBuffer, printLen) == USBD_BUSY);
 80033be:	bf00      	nop
 80033c0:	4b0c      	ldr	r3, [pc, #48]	; (80033f4 <print_float+0x68>)
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	b29b      	uxth	r3, r3
 80033c6:	4619      	mov	r1, r3
 80033c8:	4809      	ldr	r0, [pc, #36]	; (80033f0 <print_float+0x64>)
 80033ca:	f00c f9f7 	bl	800f7bc <CDC_Transmit_FS>
 80033ce:	4603      	mov	r3, r0
 80033d0:	2b01      	cmp	r3, #1
 80033d2:	d0f5      	beq.n	80033c0 <print_float+0x34>

	HAL_GPIO_WritePin(LEDB_GPIO_Port, LEDB_Pin, GPIO_PIN_RESET);
 80033d4:	2200      	movs	r2, #0
 80033d6:	2140      	movs	r1, #64	; 0x40
 80033d8:	4803      	ldr	r0, [pc, #12]	; (80033e8 <print_float+0x5c>)
 80033da:	f002 fc8b 	bl	8005cf4 <HAL_GPIO_WritePin>
	#endif
}
 80033de:	bf00      	nop
 80033e0:	370c      	adds	r7, #12
 80033e2:	46bd      	mov	sp, r7
 80033e4:	bd90      	pop	{r4, r7, pc}
 80033e6:	bf00      	nop
 80033e8:	40020800 	.word	0x40020800
 80033ec:	0801524c 	.word	0x0801524c
 80033f0:	20000370 	.word	0x20000370
 80033f4:	2000036c 	.word	0x2000036c

080033f8 <micros>:
#include "stm32f4xx_hal.h"
#include "main.h"
#include "run.h"

// TIM5 has 32-bit counter -> takes longer to overflow
static inline uint32_t micros(void) { return (uint32_t)TIM2->CNT; }
 80033f8:	b480      	push	{r7}
 80033fa:	af00      	add	r7, sp, #0
 80033fc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003400:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003402:	4618      	mov	r0, r3
 8003404:	46bd      	mov	sp, r7
 8003406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800340a:	4770      	bx	lr

0800340c <millis>:
static inline uint32_t millis(void) { return (uint32_t)(TIM2->CNT) / 1000; }
 800340c:	b480      	push	{r7}
 800340e:	af00      	add	r7, sp, #0
 8003410:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003414:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003416:	4a04      	ldr	r2, [pc, #16]	; (8003428 <millis+0x1c>)
 8003418:	fba2 2303 	umull	r2, r3, r2, r3
 800341c:	099b      	lsrs	r3, r3, #6
 800341e:	4618      	mov	r0, r3
 8003420:	46bd      	mov	sp, r7
 8003422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003426:	4770      	bx	lr
 8003428:	10624dd3 	.word	0x10624dd3

0800342c <setup>:
uint32_t lastPrint;

// Servo : TIM3->CCR3 (500;1000)

static void setup(void)
{
 800342c:	b580      	push	{r7, lr}
 800342e:	af00      	add	r7, sp, #0
	setupPins();
 8003430:	f000 fafe 	bl	8003a30 <setupPins>

	//while (HAL_GPIO_ReadPin(BTN_USR_GPIO_Port, BTN_USR_Pin) == GPIO_PIN_SET);

	HAL_GPIO_WritePin(LEDB_GPIO_Port, LEDB_Pin, GPIO_PIN_SET);
 8003434:	2201      	movs	r2, #1
 8003436:	2140      	movs	r1, #64	; 0x40
 8003438:	480c      	ldr	r0, [pc, #48]	; (800346c <setup+0x40>)
 800343a:	f002 fc5b 	bl	8005cf4 <HAL_GPIO_WritePin>
	println("Hello world!!");	HAL_Delay(500);
 800343e:	480c      	ldr	r0, [pc, #48]	; (8003470 <setup+0x44>)
 8003440:	f7ff ff28 	bl	8003294 <println>
 8003444:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003448:	f001 fdd2 	bl	8004ff0 <HAL_Delay>
	HAL_GPIO_WritePin(LEDB_GPIO_Port, LEDB_Pin, GPIO_PIN_RESET);
 800344c:	2200      	movs	r2, #0
 800344e:	2140      	movs	r1, #64	; 0x40
 8003450:	4806      	ldr	r0, [pc, #24]	; (800346c <setup+0x40>)
 8003452:	f002 fc4f 	bl	8005cf4 <HAL_GPIO_WritePin>

	//if (bmp280_begin()) println("[BMP] joined the server!");
	//if (sd_begin()) println("[SD] joined the server!");
	//if (radio_begin()) println("[LoRa] joined the server!");
	//enableMotors(); println("[MOT] joined the server!");
	if (mpu_begin()) println("[MPU] joined the server!");
 8003456:	f000 fb2f 	bl	8003ab8 <mpu_begin>
 800345a:	4603      	mov	r3, r0
 800345c:	2b00      	cmp	r3, #0
 800345e:	d002      	beq.n	8003466 <setup+0x3a>
 8003460:	4804      	ldr	r0, [pc, #16]	; (8003474 <setup+0x48>)
 8003462:	f7ff ff17 	bl	8003294 <println>
	//if (gps_begin()) println("[GPS] joined the server!");

	//ser1.ccr = &(TIM3->CCR3);
}
 8003466:	bf00      	nop
 8003468:	bd80      	pop	{r7, pc}
 800346a:	bf00      	nop
 800346c:	40020800 	.word	0x40020800
 8003470:	08015250 	.word	0x08015250
 8003474:	08015260 	.word	0x08015260

08003478 <loop>:

static void loop(void)
{
 8003478:	b580      	push	{r7, lr}
 800347a:	af00      	add	r7, sp, #0
	mpu_printData();
 800347c:	f000 f804 	bl	8003488 <mpu_printData>
	//if (sd_begin()) println("[SD] joined the server!");
	//gps_printData();
	//radio_receive();
	//radio_transmit();
	//mot_up_down();
}
 8003480:	bf00      	nop
 8003482:	bd80      	pop	{r7, pc}
 8003484:	0000      	movs	r0, r0
	...

08003488 <mpu_printData>:
			print("\r\nSatellites: "); print_int((int)gps.satellites);
		}
	}
}
static void mpu_printData(void)
{
 8003488:	b598      	push	{r3, r4, r7, lr}
 800348a:	af00      	add	r7, sp, #0
	if (MPU_readByte(MPU9250_ADDRESS, INT_STATUS) & 0x01)
 800348c:	213a      	movs	r1, #58	; 0x3a
 800348e:	20d2      	movs	r0, #210	; 0xd2
 8003490:	f7fd fda1 	bl	8000fd6 <MPU_readByte>
 8003494:	4603      	mov	r3, r0
 8003496:	f003 0301 	and.w	r3, r3, #1
 800349a:	2b00      	cmp	r3, #0
 800349c:	f000 80bd 	beq.w	800361a <mpu_printData+0x192>
	{  // check if data ready interrupt
		MPU_readAccelData(accelCount);  // Read the x/y/z adc values
 80034a0:	48d1      	ldr	r0, [pc, #836]	; (80037e8 <mpu_printData+0x360>)
 80034a2:	f7fd fe85 	bl	80011b0 <MPU_readAccelData>

		// Now we'll calculate the accleration value into actual g's
		ax = (float)accelCount[0]*aRes - MPU9250accelBias[0];  // get actual g value, this depends on scale being set
 80034a6:	4bd0      	ldr	r3, [pc, #832]	; (80037e8 <mpu_printData+0x360>)
 80034a8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80034ac:	ee07 3a90 	vmov	s15, r3
 80034b0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80034b4:	4bcd      	ldr	r3, [pc, #820]	; (80037ec <mpu_printData+0x364>)
 80034b6:	edd3 7a00 	vldr	s15, [r3]
 80034ba:	ee27 7a27 	vmul.f32	s14, s14, s15
 80034be:	4bcc      	ldr	r3, [pc, #816]	; (80037f0 <mpu_printData+0x368>)
 80034c0:	edd3 7a00 	vldr	s15, [r3]
 80034c4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80034c8:	4bca      	ldr	r3, [pc, #808]	; (80037f4 <mpu_printData+0x36c>)
 80034ca:	edc3 7a00 	vstr	s15, [r3]
		ay = (float)accelCount[1]*aRes - MPU9250accelBias[1];
 80034ce:	4bc6      	ldr	r3, [pc, #792]	; (80037e8 <mpu_printData+0x360>)
 80034d0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80034d4:	ee07 3a90 	vmov	s15, r3
 80034d8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80034dc:	4bc3      	ldr	r3, [pc, #780]	; (80037ec <mpu_printData+0x364>)
 80034de:	edd3 7a00 	vldr	s15, [r3]
 80034e2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80034e6:	4bc2      	ldr	r3, [pc, #776]	; (80037f0 <mpu_printData+0x368>)
 80034e8:	edd3 7a01 	vldr	s15, [r3, #4]
 80034ec:	ee77 7a67 	vsub.f32	s15, s14, s15
 80034f0:	4bc1      	ldr	r3, [pc, #772]	; (80037f8 <mpu_printData+0x370>)
 80034f2:	edc3 7a00 	vstr	s15, [r3]
		az = (float)accelCount[2]*aRes - MPU9250accelBias[2];
 80034f6:	4bbc      	ldr	r3, [pc, #752]	; (80037e8 <mpu_printData+0x360>)
 80034f8:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80034fc:	ee07 3a90 	vmov	s15, r3
 8003500:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003504:	4bb9      	ldr	r3, [pc, #740]	; (80037ec <mpu_printData+0x364>)
 8003506:	edd3 7a00 	vldr	s15, [r3]
 800350a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800350e:	4bb8      	ldr	r3, [pc, #736]	; (80037f0 <mpu_printData+0x368>)
 8003510:	edd3 7a02 	vldr	s15, [r3, #8]
 8003514:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003518:	4bb8      	ldr	r3, [pc, #736]	; (80037fc <mpu_printData+0x374>)
 800351a:	edc3 7a00 	vstr	s15, [r3]

		MPU_readGyroData(gyroCount);  // Read the x/y/z adc values
 800351e:	48b8      	ldr	r0, [pc, #736]	; (8003800 <mpu_printData+0x378>)
 8003520:	f7fd fe72 	bl	8001208 <MPU_readGyroData>

		// Calculate the gyro value into actual degrees per second
		gx = (float)gyroCount[0]*gRes;  // get actual gyro value, this depends on scale being set
 8003524:	4bb6      	ldr	r3, [pc, #728]	; (8003800 <mpu_printData+0x378>)
 8003526:	f9b3 3000 	ldrsh.w	r3, [r3]
 800352a:	ee07 3a90 	vmov	s15, r3
 800352e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003532:	4bb4      	ldr	r3, [pc, #720]	; (8003804 <mpu_printData+0x37c>)
 8003534:	edd3 7a00 	vldr	s15, [r3]
 8003538:	ee67 7a27 	vmul.f32	s15, s14, s15
 800353c:	4bb2      	ldr	r3, [pc, #712]	; (8003808 <mpu_printData+0x380>)
 800353e:	edc3 7a00 	vstr	s15, [r3]
		gy = (float)gyroCount[1]*gRes;
 8003542:	4baf      	ldr	r3, [pc, #700]	; (8003800 <mpu_printData+0x378>)
 8003544:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8003548:	ee07 3a90 	vmov	s15, r3
 800354c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003550:	4bac      	ldr	r3, [pc, #688]	; (8003804 <mpu_printData+0x37c>)
 8003552:	edd3 7a00 	vldr	s15, [r3]
 8003556:	ee67 7a27 	vmul.f32	s15, s14, s15
 800355a:	4bac      	ldr	r3, [pc, #688]	; (800380c <mpu_printData+0x384>)
 800355c:	edc3 7a00 	vstr	s15, [r3]
		gz = (float)gyroCount[2]*gRes;
 8003560:	4ba7      	ldr	r3, [pc, #668]	; (8003800 <mpu_printData+0x378>)
 8003562:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8003566:	ee07 3a90 	vmov	s15, r3
 800356a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800356e:	4ba5      	ldr	r3, [pc, #660]	; (8003804 <mpu_printData+0x37c>)
 8003570:	edd3 7a00 	vldr	s15, [r3]
 8003574:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003578:	4ba5      	ldr	r3, [pc, #660]	; (8003810 <mpu_printData+0x388>)
 800357a:	edc3 7a00 	vstr	s15, [r3]

		MPU_readMagData(magCount);  // Read the x/y/z adc values
 800357e:	48a5      	ldr	r0, [pc, #660]	; (8003814 <mpu_printData+0x38c>)
 8003580:	f7fd fe6e 	bl	8001260 <MPU_readMagData>

		// Calculate the magnetometer values in milliGauss
		// Include factory calibration per data sheet and user environmental corrections
		mx = (float)magCount[0]*mRes*magCalibration[0] - MPU9250magBias[0];  // get actual magnetometer value, this depends on scale being set
 8003584:	4ba3      	ldr	r3, [pc, #652]	; (8003814 <mpu_printData+0x38c>)
 8003586:	f9b3 3000 	ldrsh.w	r3, [r3]
 800358a:	ee07 3a90 	vmov	s15, r3
 800358e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003592:	4ba1      	ldr	r3, [pc, #644]	; (8003818 <mpu_printData+0x390>)
 8003594:	edd3 7a00 	vldr	s15, [r3]
 8003598:	ee27 7a27 	vmul.f32	s14, s14, s15
 800359c:	4b9f      	ldr	r3, [pc, #636]	; (800381c <mpu_printData+0x394>)
 800359e:	edd3 7a00 	vldr	s15, [r3]
 80035a2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80035a6:	4b9e      	ldr	r3, [pc, #632]	; (8003820 <mpu_printData+0x398>)
 80035a8:	edd3 7a00 	vldr	s15, [r3]
 80035ac:	ee77 7a67 	vsub.f32	s15, s14, s15
 80035b0:	4b9c      	ldr	r3, [pc, #624]	; (8003824 <mpu_printData+0x39c>)
 80035b2:	edc3 7a00 	vstr	s15, [r3]
		my = (float)magCount[1]*mRes*magCalibration[1] - MPU9250magBias[1];
 80035b6:	4b97      	ldr	r3, [pc, #604]	; (8003814 <mpu_printData+0x38c>)
 80035b8:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80035bc:	ee07 3a90 	vmov	s15, r3
 80035c0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80035c4:	4b94      	ldr	r3, [pc, #592]	; (8003818 <mpu_printData+0x390>)
 80035c6:	edd3 7a00 	vldr	s15, [r3]
 80035ca:	ee27 7a27 	vmul.f32	s14, s14, s15
 80035ce:	4b93      	ldr	r3, [pc, #588]	; (800381c <mpu_printData+0x394>)
 80035d0:	edd3 7a01 	vldr	s15, [r3, #4]
 80035d4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80035d8:	4b91      	ldr	r3, [pc, #580]	; (8003820 <mpu_printData+0x398>)
 80035da:	edd3 7a01 	vldr	s15, [r3, #4]
 80035de:	ee77 7a67 	vsub.f32	s15, s14, s15
 80035e2:	4b91      	ldr	r3, [pc, #580]	; (8003828 <mpu_printData+0x3a0>)
 80035e4:	edc3 7a00 	vstr	s15, [r3]
		mz = (float)magCount[2]*mRes*magCalibration[2] - MPU9250magBias[2];
 80035e8:	4b8a      	ldr	r3, [pc, #552]	; (8003814 <mpu_printData+0x38c>)
 80035ea:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80035ee:	ee07 3a90 	vmov	s15, r3
 80035f2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80035f6:	4b88      	ldr	r3, [pc, #544]	; (8003818 <mpu_printData+0x390>)
 80035f8:	edd3 7a00 	vldr	s15, [r3]
 80035fc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003600:	4b86      	ldr	r3, [pc, #536]	; (800381c <mpu_printData+0x394>)
 8003602:	edd3 7a02 	vldr	s15, [r3, #8]
 8003606:	ee27 7a27 	vmul.f32	s14, s14, s15
 800360a:	4b85      	ldr	r3, [pc, #532]	; (8003820 <mpu_printData+0x398>)
 800360c:	edd3 7a02 	vldr	s15, [r3, #8]
 8003610:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003614:	4b85      	ldr	r3, [pc, #532]	; (800382c <mpu_printData+0x3a4>)
 8003616:	edc3 7a00 	vstr	s15, [r3]
	}

	Now = micros();
 800361a:	f7ff feed 	bl	80033f8 <micros>
 800361e:	4603      	mov	r3, r0
 8003620:	461a      	mov	r2, r3
 8003622:	4b83      	ldr	r3, [pc, #524]	; (8003830 <mpu_printData+0x3a8>)
 8003624:	601a      	str	r2, [r3, #0]
	deltat = ((Now - lastUpdate)/1000000.0f); // set integration time by time elapsed since last filter update
 8003626:	4b82      	ldr	r3, [pc, #520]	; (8003830 <mpu_printData+0x3a8>)
 8003628:	681a      	ldr	r2, [r3, #0]
 800362a:	4b82      	ldr	r3, [pc, #520]	; (8003834 <mpu_printData+0x3ac>)
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	1ad3      	subs	r3, r2, r3
 8003630:	ee07 3a90 	vmov	s15, r3
 8003634:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003638:	eddf 6a7f 	vldr	s13, [pc, #508]	; 8003838 <mpu_printData+0x3b0>
 800363c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003640:	4b7e      	ldr	r3, [pc, #504]	; (800383c <mpu_printData+0x3b4>)
 8003642:	edc3 7a00 	vstr	s15, [r3]
	lastUpdate = Now;
 8003646:	4b7a      	ldr	r3, [pc, #488]	; (8003830 <mpu_printData+0x3a8>)
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	4a7a      	ldr	r2, [pc, #488]	; (8003834 <mpu_printData+0x3ac>)
 800364c:	6013      	str	r3, [r2, #0]

	sum += deltat; // sum for averaging filter update rate
 800364e:	4b7c      	ldr	r3, [pc, #496]	; (8003840 <mpu_printData+0x3b8>)
 8003650:	ed93 7a00 	vldr	s14, [r3]
 8003654:	4b79      	ldr	r3, [pc, #484]	; (800383c <mpu_printData+0x3b4>)
 8003656:	edd3 7a00 	vldr	s15, [r3]
 800365a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800365e:	4b78      	ldr	r3, [pc, #480]	; (8003840 <mpu_printData+0x3b8>)
 8003660:	edc3 7a00 	vstr	s15, [r3]
	sumCount++;
 8003664:	4b77      	ldr	r3, [pc, #476]	; (8003844 <mpu_printData+0x3bc>)
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	3301      	adds	r3, #1
 800366a:	4a76      	ldr	r2, [pc, #472]	; (8003844 <mpu_printData+0x3bc>)
 800366c:	6013      	str	r3, [r2, #0]
	// we need to feed into the Madgwick function Ax, -Ay, -Az, Gx, -Gy, -Gz, My, -Mx, and Mz. But because gravity is by convention
	// positive down, we need to invert the accel data, so we pass -Ax, Ay, Az, Gx, -Gy, -Gz, My, -Mx, and Mz into the Madgwick
	// function to get North along the accel +x-axis, East along the accel -y-axis, and Down along the accel -z-axis.
	// This orientation choice can be modified to allow any convenient (non-NED) orientation convention.
	// Pass gyro rate as rad/s
	MadgwickQuaternionUpdate(-ax, ay, az, gx*PI/180.0f, -gy*PI/180.0f, -gz*PI/180.0f,  my,  -mx, mz);
 800366e:	4b61      	ldr	r3, [pc, #388]	; (80037f4 <mpu_printData+0x36c>)
 8003670:	edd3 7a00 	vldr	s15, [r3]
 8003674:	eef1 6a67 	vneg.f32	s13, s15
 8003678:	4b5f      	ldr	r3, [pc, #380]	; (80037f8 <mpu_printData+0x370>)
 800367a:	ed93 6a00 	vldr	s12, [r3]
 800367e:	4b5f      	ldr	r3, [pc, #380]	; (80037fc <mpu_printData+0x374>)
 8003680:	edd3 5a00 	vldr	s11, [r3]
 8003684:	4b60      	ldr	r3, [pc, #384]	; (8003808 <mpu_printData+0x380>)
 8003686:	edd3 7a00 	vldr	s15, [r3]
 800368a:	ed9f 7a6f 	vldr	s14, [pc, #444]	; 8003848 <mpu_printData+0x3c0>
 800368e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003692:	ed9f 7a6e 	vldr	s14, [pc, #440]	; 800384c <mpu_printData+0x3c4>
 8003696:	ee87 5a87 	vdiv.f32	s10, s15, s14
 800369a:	4b5c      	ldr	r3, [pc, #368]	; (800380c <mpu_printData+0x384>)
 800369c:	edd3 7a00 	vldr	s15, [r3]
 80036a0:	eef1 7a67 	vneg.f32	s15, s15
 80036a4:	ed9f 7a68 	vldr	s14, [pc, #416]	; 8003848 <mpu_printData+0x3c0>
 80036a8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80036ac:	ed9f 7a67 	vldr	s14, [pc, #412]	; 800384c <mpu_printData+0x3c4>
 80036b0:	eec7 4a87 	vdiv.f32	s9, s15, s14
 80036b4:	4b56      	ldr	r3, [pc, #344]	; (8003810 <mpu_printData+0x388>)
 80036b6:	edd3 7a00 	vldr	s15, [r3]
 80036ba:	eef1 7a67 	vneg.f32	s15, s15
 80036be:	ed9f 7a62 	vldr	s14, [pc, #392]	; 8003848 <mpu_printData+0x3c0>
 80036c2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80036c6:	ed9f 7a61 	vldr	s14, [pc, #388]	; 800384c <mpu_printData+0x3c4>
 80036ca:	eec7 2a87 	vdiv.f32	s5, s15, s14
 80036ce:	4b56      	ldr	r3, [pc, #344]	; (8003828 <mpu_printData+0x3a0>)
 80036d0:	ed93 7a00 	vldr	s14, [r3]
 80036d4:	4b53      	ldr	r3, [pc, #332]	; (8003824 <mpu_printData+0x39c>)
 80036d6:	edd3 7a00 	vldr	s15, [r3]
 80036da:	eef1 7a67 	vneg.f32	s15, s15
 80036de:	4b53      	ldr	r3, [pc, #332]	; (800382c <mpu_printData+0x3a4>)
 80036e0:	ed93 4a00 	vldr	s8, [r3]
 80036e4:	eef0 3a67 	vmov.f32	s7, s15
 80036e8:	eeb0 3a47 	vmov.f32	s6, s14
 80036ec:	eeb0 2a64 	vmov.f32	s4, s9
 80036f0:	eef0 1a45 	vmov.f32	s3, s10
 80036f4:	eeb0 1a65 	vmov.f32	s2, s11
 80036f8:	eef0 0a46 	vmov.f32	s1, s12
 80036fc:	eeb0 0a66 	vmov.f32	s0, s13
 8003700:	f7fe fecc 	bl	800249c <MadgwickQuaternionUpdate>
	//  MahonyQuaternionUpdate(-ax, ay, az, gx*pi/180.0f, -gy*pi/180.0f, -gz*pi/180.0f,  my,  -mx, mz);

	// Serial print and/or display at 0.5 s rate independent of data rates
	//delt_t = millis() - count;
	//if (delt_t > 1000)
	if (millis() - lastPrint > 10)
 8003704:	f7ff fe82 	bl	800340c <millis>
 8003708:	4602      	mov	r2, r0
 800370a:	4b51      	ldr	r3, [pc, #324]	; (8003850 <mpu_printData+0x3c8>)
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	1ad3      	subs	r3, r2, r3
 8003710:	2b0a      	cmp	r3, #10
 8003712:	f240 8176 	bls.w	8003a02 <mpu_printData+0x57a>
		print("q0 = "); print_float(q[0]);
		print(" qx = "); print_float(q[1]);
		print(" qy = "); print_float(q[2]);
		print(" qz = "); print_float(q[3]); println("");
		*/
		tempCount = MPU_readTempData();  // Read the gyro adc values
 8003716:	f7fd fddf 	bl	80012d8 <MPU_readTempData>
 800371a:	4603      	mov	r3, r0
 800371c:	461a      	mov	r2, r3
 800371e:	4b4d      	ldr	r3, [pc, #308]	; (8003854 <mpu_printData+0x3cc>)
 8003720:	801a      	strh	r2, [r3, #0]
		temperature = ((float) tempCount) / 333.87 + 21.0; // Gyro chip temperature in degrees Centigrade
 8003722:	4b4c      	ldr	r3, [pc, #304]	; (8003854 <mpu_printData+0x3cc>)
 8003724:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003728:	ee07 3a90 	vmov	s15, r3
 800372c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003730:	ee17 0a90 	vmov	r0, s15
 8003734:	f7fc ff08 	bl	8000548 <__aeabi_f2d>
 8003738:	a329      	add	r3, pc, #164	; (adr r3, 80037e0 <mpu_printData+0x358>)
 800373a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800373e:	f7fd f885 	bl	800084c <__aeabi_ddiv>
 8003742:	4603      	mov	r3, r0
 8003744:	460c      	mov	r4, r1
 8003746:	4618      	mov	r0, r3
 8003748:	4621      	mov	r1, r4
 800374a:	f04f 0200 	mov.w	r2, #0
 800374e:	4b42      	ldr	r3, [pc, #264]	; (8003858 <mpu_printData+0x3d0>)
 8003750:	f7fc fd9c 	bl	800028c <__adddf3>
 8003754:	4603      	mov	r3, r0
 8003756:	460c      	mov	r4, r1
 8003758:	4618      	mov	r0, r3
 800375a:	4621      	mov	r1, r4
 800375c:	f7fd fa44 	bl	8000be8 <__aeabi_d2f>
 8003760:	4602      	mov	r2, r0
 8003762:	4b3e      	ldr	r3, [pc, #248]	; (800385c <mpu_printData+0x3d4>)
 8003764:	601a      	str	r2, [r3, #0]
		// Print temperature in degrees Centigrade


		yaw   = atan2f(2.0f * (q[1] * q[2] + q[0] * q[3]), q[0] * q[0] + q[1] * q[1] - q[2] * q[2] - q[3] * q[3]);
 8003766:	4b3e      	ldr	r3, [pc, #248]	; (8003860 <mpu_printData+0x3d8>)
 8003768:	ed93 7a01 	vldr	s14, [r3, #4]
 800376c:	4b3c      	ldr	r3, [pc, #240]	; (8003860 <mpu_printData+0x3d8>)
 800376e:	edd3 7a02 	vldr	s15, [r3, #8]
 8003772:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003776:	4b3a      	ldr	r3, [pc, #232]	; (8003860 <mpu_printData+0x3d8>)
 8003778:	edd3 6a00 	vldr	s13, [r3]
 800377c:	4b38      	ldr	r3, [pc, #224]	; (8003860 <mpu_printData+0x3d8>)
 800377e:	edd3 7a03 	vldr	s15, [r3, #12]
 8003782:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003786:	ee77 7a27 	vadd.f32	s15, s14, s15
 800378a:	ee37 6aa7 	vadd.f32	s12, s15, s15
 800378e:	4b34      	ldr	r3, [pc, #208]	; (8003860 <mpu_printData+0x3d8>)
 8003790:	ed93 7a00 	vldr	s14, [r3]
 8003794:	4b32      	ldr	r3, [pc, #200]	; (8003860 <mpu_printData+0x3d8>)
 8003796:	edd3 7a00 	vldr	s15, [r3]
 800379a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800379e:	4b30      	ldr	r3, [pc, #192]	; (8003860 <mpu_printData+0x3d8>)
 80037a0:	edd3 6a01 	vldr	s13, [r3, #4]
 80037a4:	4b2e      	ldr	r3, [pc, #184]	; (8003860 <mpu_printData+0x3d8>)
 80037a6:	edd3 7a01 	vldr	s15, [r3, #4]
 80037aa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80037ae:	ee37 7a27 	vadd.f32	s14, s14, s15
 80037b2:	4b2b      	ldr	r3, [pc, #172]	; (8003860 <mpu_printData+0x3d8>)
 80037b4:	edd3 6a02 	vldr	s13, [r3, #8]
 80037b8:	4b29      	ldr	r3, [pc, #164]	; (8003860 <mpu_printData+0x3d8>)
 80037ba:	edd3 7a02 	vldr	s15, [r3, #8]
 80037be:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80037c2:	ee37 7a67 	vsub.f32	s14, s14, s15
 80037c6:	4b26      	ldr	r3, [pc, #152]	; (8003860 <mpu_printData+0x3d8>)
 80037c8:	edd3 6a03 	vldr	s13, [r3, #12]
 80037cc:	4b24      	ldr	r3, [pc, #144]	; (8003860 <mpu_printData+0x3d8>)
 80037ce:	edd3 7a03 	vldr	s15, [r3, #12]
 80037d2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80037d6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80037da:	e043      	b.n	8003864 <mpu_printData+0x3dc>
 80037dc:	f3af 8000 	nop.w
 80037e0:	851eb852 	.word	0x851eb852
 80037e4:	4074ddeb 	.word	0x4074ddeb
 80037e8:	20000794 	.word	0x20000794
 80037ec:	20000808 	.word	0x20000808
 80037f0:	20000aa8 	.word	0x20000aa8
 80037f4:	20000804 	.word	0x20000804
 80037f8:	20000878 	.word	0x20000878
 80037fc:	200007cc 	.word	0x200007cc
 8003800:	200007d8 	.word	0x200007d8
 8003804:	20000824 	.word	0x20000824
 8003808:	20000868 	.word	0x20000868
 800380c:	200007c8 	.word	0x200007c8
 8003810:	20000818 	.word	0x20000818
 8003814:	20000830 	.word	0x20000830
 8003818:	20000844 	.word	0x20000844
 800381c:	2000086c 	.word	0x2000086c
 8003820:	20000cf8 	.word	0x20000cf8
 8003824:	2000087c 	.word	0x2000087c
 8003828:	200007e0 	.word	0x200007e0
 800382c:	20000828 	.word	0x20000828
 8003830:	20000800 	.word	0x20000800
 8003834:	200007d0 	.word	0x200007d0
 8003838:	49742400 	.word	0x49742400
 800383c:	20000840 	.word	0x20000840
 8003840:	20000ab4 	.word	0x20000ab4
 8003844:	20000d40 	.word	0x20000d40
 8003848:	40490fdb 	.word	0x40490fdb
 800384c:	43340000 	.word	0x43340000
 8003850:	20000d3c 	.word	0x20000d3c
 8003854:	20000812 	.word	0x20000812
 8003858:	40350000 	.word	0x40350000
 800385c:	200007d4 	.word	0x200007d4
 8003860:	20000858 	.word	0x20000858
 8003864:	eef0 0a67 	vmov.f32	s1, s15
 8003868:	eeb0 0a46 	vmov.f32	s0, s12
 800386c:	f010 fb68 	bl	8013f40 <atan2f>
 8003870:	eef0 7a40 	vmov.f32	s15, s0
 8003874:	4b64      	ldr	r3, [pc, #400]	; (8003a08 <mpu_printData+0x580>)
 8003876:	edc3 7a00 	vstr	s15, [r3]
		pitch = -asinf(2.0f * (q[1] * q[3] - q[0] * q[2]));
 800387a:	4b64      	ldr	r3, [pc, #400]	; (8003a0c <mpu_printData+0x584>)
 800387c:	ed93 7a01 	vldr	s14, [r3, #4]
 8003880:	4b62      	ldr	r3, [pc, #392]	; (8003a0c <mpu_printData+0x584>)
 8003882:	edd3 7a03 	vldr	s15, [r3, #12]
 8003886:	ee27 7a27 	vmul.f32	s14, s14, s15
 800388a:	4b60      	ldr	r3, [pc, #384]	; (8003a0c <mpu_printData+0x584>)
 800388c:	edd3 6a00 	vldr	s13, [r3]
 8003890:	4b5e      	ldr	r3, [pc, #376]	; (8003a0c <mpu_printData+0x584>)
 8003892:	edd3 7a02 	vldr	s15, [r3, #8]
 8003896:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800389a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800389e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80038a2:	eeb0 0a67 	vmov.f32	s0, s15
 80038a6:	f010 faf3 	bl	8013e90 <asinf>
 80038aa:	eef0 7a40 	vmov.f32	s15, s0
 80038ae:	eef1 7a67 	vneg.f32	s15, s15
 80038b2:	4b57      	ldr	r3, [pc, #348]	; (8003a10 <mpu_printData+0x588>)
 80038b4:	edc3 7a00 	vstr	s15, [r3]
		roll  = atan2f(2.0f * (q[0] * q[1] + q[2] * q[3]), q[0] * q[0] - q[1] * q[1] - q[2] * q[2] + q[3] * q[3]);
 80038b8:	4b54      	ldr	r3, [pc, #336]	; (8003a0c <mpu_printData+0x584>)
 80038ba:	ed93 7a00 	vldr	s14, [r3]
 80038be:	4b53      	ldr	r3, [pc, #332]	; (8003a0c <mpu_printData+0x584>)
 80038c0:	edd3 7a01 	vldr	s15, [r3, #4]
 80038c4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80038c8:	4b50      	ldr	r3, [pc, #320]	; (8003a0c <mpu_printData+0x584>)
 80038ca:	edd3 6a02 	vldr	s13, [r3, #8]
 80038ce:	4b4f      	ldr	r3, [pc, #316]	; (8003a0c <mpu_printData+0x584>)
 80038d0:	edd3 7a03 	vldr	s15, [r3, #12]
 80038d4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80038d8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80038dc:	ee37 6aa7 	vadd.f32	s12, s15, s15
 80038e0:	4b4a      	ldr	r3, [pc, #296]	; (8003a0c <mpu_printData+0x584>)
 80038e2:	ed93 7a00 	vldr	s14, [r3]
 80038e6:	4b49      	ldr	r3, [pc, #292]	; (8003a0c <mpu_printData+0x584>)
 80038e8:	edd3 7a00 	vldr	s15, [r3]
 80038ec:	ee27 7a27 	vmul.f32	s14, s14, s15
 80038f0:	4b46      	ldr	r3, [pc, #280]	; (8003a0c <mpu_printData+0x584>)
 80038f2:	edd3 6a01 	vldr	s13, [r3, #4]
 80038f6:	4b45      	ldr	r3, [pc, #276]	; (8003a0c <mpu_printData+0x584>)
 80038f8:	edd3 7a01 	vldr	s15, [r3, #4]
 80038fc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003900:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003904:	4b41      	ldr	r3, [pc, #260]	; (8003a0c <mpu_printData+0x584>)
 8003906:	edd3 6a02 	vldr	s13, [r3, #8]
 800390a:	4b40      	ldr	r3, [pc, #256]	; (8003a0c <mpu_printData+0x584>)
 800390c:	edd3 7a02 	vldr	s15, [r3, #8]
 8003910:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003914:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003918:	4b3c      	ldr	r3, [pc, #240]	; (8003a0c <mpu_printData+0x584>)
 800391a:	edd3 6a03 	vldr	s13, [r3, #12]
 800391e:	4b3b      	ldr	r3, [pc, #236]	; (8003a0c <mpu_printData+0x584>)
 8003920:	edd3 7a03 	vldr	s15, [r3, #12]
 8003924:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003928:	ee77 7a27 	vadd.f32	s15, s14, s15
 800392c:	eef0 0a67 	vmov.f32	s1, s15
 8003930:	eeb0 0a46 	vmov.f32	s0, s12
 8003934:	f010 fb04 	bl	8013f40 <atan2f>
 8003938:	eef0 7a40 	vmov.f32	s15, s0
 800393c:	4b35      	ldr	r3, [pc, #212]	; (8003a14 <mpu_printData+0x58c>)
 800393e:	edc3 7a00 	vstr	s15, [r3]
		pitch *= 180.0f / PI;
 8003942:	4b33      	ldr	r3, [pc, #204]	; (8003a10 <mpu_printData+0x588>)
 8003944:	edd3 7a00 	vldr	s15, [r3]
 8003948:	ed9f 7a33 	vldr	s14, [pc, #204]	; 8003a18 <mpu_printData+0x590>
 800394c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003950:	4b2f      	ldr	r3, [pc, #188]	; (8003a10 <mpu_printData+0x588>)
 8003952:	edc3 7a00 	vstr	s15, [r3]
		yaw   *= 180.0f / PI;
 8003956:	4b2c      	ldr	r3, [pc, #176]	; (8003a08 <mpu_printData+0x580>)
 8003958:	edd3 7a00 	vldr	s15, [r3]
 800395c:	ed9f 7a2e 	vldr	s14, [pc, #184]	; 8003a18 <mpu_printData+0x590>
 8003960:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003964:	4b28      	ldr	r3, [pc, #160]	; (8003a08 <mpu_printData+0x580>)
 8003966:	edc3 7a00 	vstr	s15, [r3]
		//yaw   += 13.8f; // Declination at Danville, California is 13 degrees 48 minutes and 47 seconds on 2014-04-04
		if(yaw < 0) yaw   += 360.0f; // Ensure yaw stays between 0 and 360
 800396a:	4b27      	ldr	r3, [pc, #156]	; (8003a08 <mpu_printData+0x580>)
 800396c:	edd3 7a00 	vldr	s15, [r3]
 8003970:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003974:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003978:	d509      	bpl.n	800398e <mpu_printData+0x506>
 800397a:	4b23      	ldr	r3, [pc, #140]	; (8003a08 <mpu_printData+0x580>)
 800397c:	edd3 7a00 	vldr	s15, [r3]
 8003980:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8003a1c <mpu_printData+0x594>
 8003984:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003988:	4b1f      	ldr	r3, [pc, #124]	; (8003a08 <mpu_printData+0x580>)
 800398a:	edc3 7a00 	vstr	s15, [r3]
		roll  *= 180.0f / PI;
 800398e:	4b21      	ldr	r3, [pc, #132]	; (8003a14 <mpu_printData+0x58c>)
 8003990:	edd3 7a00 	vldr	s15, [r3]
 8003994:	ed9f 7a20 	vldr	s14, [pc, #128]	; 8003a18 <mpu_printData+0x590>
 8003998:	ee67 7a87 	vmul.f32	s15, s15, s14
 800399c:	4b1d      	ldr	r3, [pc, #116]	; (8003a14 <mpu_printData+0x58c>)
 800399e:	edc3 7a00 	vstr	s15, [r3]

		//print("Yaw: "); print_float(yaw); print(" , Pitch: "); print_float(pitch); print(" , Roll: "); print_float(roll); println("");
		print_int(-360); print(" ");
 80039a2:	481f      	ldr	r0, [pc, #124]	; (8003a20 <mpu_printData+0x598>)
 80039a4:	f7ff fcc4 	bl	8003330 <print_int>
 80039a8:	481e      	ldr	r0, [pc, #120]	; (8003a24 <mpu_printData+0x59c>)
 80039aa:	f7ff fc51 	bl	8003250 <print>
		print_float(yaw); print(" "); print_float(pitch); print(" "); print_float(roll); print(" ");
 80039ae:	4b16      	ldr	r3, [pc, #88]	; (8003a08 <mpu_printData+0x580>)
 80039b0:	edd3 7a00 	vldr	s15, [r3]
 80039b4:	eeb0 0a67 	vmov.f32	s0, s15
 80039b8:	f7ff fce8 	bl	800338c <print_float>
 80039bc:	4819      	ldr	r0, [pc, #100]	; (8003a24 <mpu_printData+0x59c>)
 80039be:	f7ff fc47 	bl	8003250 <print>
 80039c2:	4b13      	ldr	r3, [pc, #76]	; (8003a10 <mpu_printData+0x588>)
 80039c4:	edd3 7a00 	vldr	s15, [r3]
 80039c8:	eeb0 0a67 	vmov.f32	s0, s15
 80039cc:	f7ff fcde 	bl	800338c <print_float>
 80039d0:	4814      	ldr	r0, [pc, #80]	; (8003a24 <mpu_printData+0x59c>)
 80039d2:	f7ff fc3d 	bl	8003250 <print>
 80039d6:	4b0f      	ldr	r3, [pc, #60]	; (8003a14 <mpu_printData+0x58c>)
 80039d8:	edd3 7a00 	vldr	s15, [r3]
 80039dc:	eeb0 0a67 	vmov.f32	s0, s15
 80039e0:	f7ff fcd4 	bl	800338c <print_float>
 80039e4:	480f      	ldr	r0, [pc, #60]	; (8003a24 <mpu_printData+0x59c>)
 80039e6:	f7ff fc33 	bl	8003250 <print>
		print_int(360); println("");
 80039ea:	f44f 70b4 	mov.w	r0, #360	; 0x168
 80039ee:	f7ff fc9f 	bl	8003330 <print_int>
 80039f2:	480d      	ldr	r0, [pc, #52]	; (8003a28 <mpu_printData+0x5a0>)
 80039f4:	f7ff fc4e 	bl	8003294 <println>

		//print("MPU9250 Gyro temperature is ");  print_float(temperature);  println(" degrees C"); // Print T values to tenths of s degree C
		lastPrint = millis();
 80039f8:	f7ff fd08 	bl	800340c <millis>
 80039fc:	4602      	mov	r2, r0
 80039fe:	4b0b      	ldr	r3, [pc, #44]	; (8003a2c <mpu_printData+0x5a4>)
 8003a00:	601a      	str	r2, [r3, #0]
	}
}
 8003a02:	bf00      	nop
 8003a04:	bd98      	pop	{r3, r4, r7, pc}
 8003a06:	bf00      	nop
 8003a08:	2000082c 	.word	0x2000082c
 8003a0c:	20000858 	.word	0x20000858
 8003a10:	20000838 	.word	0x20000838
 8003a14:	2000083c 	.word	0x2000083c
 8003a18:	42652ee0 	.word	0x42652ee0
 8003a1c:	43b40000 	.word	0x43b40000
 8003a20:	fffffe98 	.word	0xfffffe98
 8003a24:	08015384 	.word	0x08015384
 8003a28:	080152b8 	.word	0x080152b8
 8003a2c:	20000d3c 	.word	0x20000d3c

08003a30 <setupPins>:
	return true;
}


static void setupPins(void)
{
 8003a30:	b580      	push	{r7, lr}
 8003a32:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LEDA_GPIO_Port, LEDA_Pin, GPIO_PIN_RESET);
 8003a34:	2200      	movs	r2, #0
 8003a36:	2180      	movs	r1, #128	; 0x80
 8003a38:	481c      	ldr	r0, [pc, #112]	; (8003aac <setupPins+0x7c>)
 8003a3a:	f002 f95b 	bl	8005cf4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LEDB_GPIO_Port, LEDB_Pin, GPIO_PIN_RESET);
 8003a3e:	2200      	movs	r2, #0
 8003a40:	2140      	movs	r1, #64	; 0x40
 8003a42:	481a      	ldr	r0, [pc, #104]	; (8003aac <setupPins+0x7c>)
 8003a44:	f002 f956 	bl	8005cf4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LEDC_GPIO_Port, LEDC_Pin, GPIO_PIN_RESET);
 8003a48:	2200      	movs	r2, #0
 8003a4a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003a4e:	4818      	ldr	r0, [pc, #96]	; (8003ab0 <setupPins+0x80>)
 8003a50:	f002 f950 	bl	8005cf4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LEDD_GPIO_Port, LEDD_Pin, GPIO_PIN_RESET);
 8003a54:	2200      	movs	r2, #0
 8003a56:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003a5a:	4815      	ldr	r0, [pc, #84]	; (8003ab0 <setupPins+0x80>)
 8003a5c:	f002 f94a 	bl	8005cf4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PH_L_GPIO_Port, PH_L_Pin, GPIO_PIN_RESET);
 8003a60:	2200      	movs	r2, #0
 8003a62:	2101      	movs	r1, #1
 8003a64:	4813      	ldr	r0, [pc, #76]	; (8003ab4 <setupPins+0x84>)
 8003a66:	f002 f945 	bl	8005cf4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PH_R_GPIO_Port, PH_R_Pin, GPIO_PIN_RESET);
 8003a6a:	2200      	movs	r2, #0
 8003a6c:	2104      	movs	r1, #4
 8003a6e:	4811      	ldr	r0, [pc, #68]	; (8003ab4 <setupPins+0x84>)
 8003a70:	f002 f940 	bl	8005cf4 <HAL_GPIO_WritePin>
	//HAL_GPIO_WritePin(EN_L_GPIO_Port, EN_L_Pin, GPIO_PIN_RESET);
	//HAL_GPIO_WritePin(EN_R_GPIO_Port, EN_R_Pin, GPIO_PIN_RESET);
	HAL_GPIO_WritePin(P1_GPIO_Port, P1_Pin, GPIO_PIN_RESET);
 8003a74:	2200      	movs	r2, #0
 8003a76:	2101      	movs	r1, #1
 8003a78:	480c      	ldr	r0, [pc, #48]	; (8003aac <setupPins+0x7c>)
 8003a7a:	f002 f93b 	bl	8005cf4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(P2_GPIO_Port, P2_Pin, GPIO_PIN_RESET);
 8003a7e:	2200      	movs	r2, #0
 8003a80:	2104      	movs	r1, #4
 8003a82:	480a      	ldr	r0, [pc, #40]	; (8003aac <setupPins+0x7c>)
 8003a84:	f002 f936 	bl	8005cf4 <HAL_GPIO_WritePin>
	//HAL_GPIO_WritePin(P3_GPIO_Port, P3_Pin, GPIO_PIN_RESET);
	HAL_GPIO_WritePin(P4_GPIO_Port, P4_Pin, GPIO_PIN_RESET);
 8003a88:	2200      	movs	r2, #0
 8003a8a:	2102      	movs	r1, #2
 8003a8c:	4807      	ldr	r0, [pc, #28]	; (8003aac <setupPins+0x7c>)
 8003a8e:	f002 f931 	bl	8005cf4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(P5_GPIO_Port, P5_Pin, GPIO_PIN_RESET);
 8003a92:	2200      	movs	r2, #0
 8003a94:	2108      	movs	r1, #8
 8003a96:	4805      	ldr	r0, [pc, #20]	; (8003aac <setupPins+0x7c>)
 8003a98:	f002 f92c 	bl	8005cf4 <HAL_GPIO_WritePin>
	//HAL_GPIO_WritePin(P6_GPIO_Port, P6_Pin, GPIO_PIN_RESET);
	HAL_GPIO_WritePin(P7_GPIO_Port, P7_Pin, GPIO_PIN_RESET);
 8003a9c:	2200      	movs	r2, #0
 8003a9e:	2110      	movs	r1, #16
 8003aa0:	4804      	ldr	r0, [pc, #16]	; (8003ab4 <setupPins+0x84>)
 8003aa2:	f002 f927 	bl	8005cf4 <HAL_GPIO_WritePin>
}
 8003aa6:	bf00      	nop
 8003aa8:	bd80      	pop	{r7, pc}
 8003aaa:	bf00      	nop
 8003aac:	40020800 	.word	0x40020800
 8003ab0:	40020400 	.word	0x40020400
 8003ab4:	40020000 	.word	0x40020000

08003ab8 <mpu_begin>:
	printLen = sprintf(printBuffer, "Space: %lu us\r\n", stop - start);
	printv(printBuffer, printLen);
}

static bool mpu_begin(void)
{
 8003ab8:	b580      	push	{r7, lr}
 8003aba:	b082      	sub	sp, #8
 8003abc:	af00      	add	r7, sp, #0
	if (MPU_present())
 8003abe:	f7fd fc1f 	bl	8001300 <MPU_present>
 8003ac2:	4603      	mov	r3, r0
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	f000 8121 	beq.w	8003d0c <mpu_begin+0x254>
	{
		MPU_SelfTest(SelfTest); // Start by performing self test and reporting values
 8003aca:	4893      	ldr	r0, [pc, #588]	; (8003d18 <mpu_begin+0x260>)
 8003acc:	f7fe f858 	bl	8001b80 <MPU_SelfTest>
		println("MPU9250 Self Test:");
 8003ad0:	4892      	ldr	r0, [pc, #584]	; (8003d1c <mpu_begin+0x264>)
 8003ad2:	f7ff fbdf 	bl	8003294 <println>
		print("x-axis self test: acceleration trim within : "); print_float(SelfTest[0]); println("% of factory value");
 8003ad6:	4892      	ldr	r0, [pc, #584]	; (8003d20 <mpu_begin+0x268>)
 8003ad8:	f7ff fbba 	bl	8003250 <print>
 8003adc:	4b8e      	ldr	r3, [pc, #568]	; (8003d18 <mpu_begin+0x260>)
 8003ade:	edd3 7a00 	vldr	s15, [r3]
 8003ae2:	eeb0 0a67 	vmov.f32	s0, s15
 8003ae6:	f7ff fc51 	bl	800338c <print_float>
 8003aea:	488e      	ldr	r0, [pc, #568]	; (8003d24 <mpu_begin+0x26c>)
 8003aec:	f7ff fbd2 	bl	8003294 <println>
		print("y-axis self test: acceleration trim within : "); print_float(SelfTest[1]); println("% of factory value");
 8003af0:	488d      	ldr	r0, [pc, #564]	; (8003d28 <mpu_begin+0x270>)
 8003af2:	f7ff fbad 	bl	8003250 <print>
 8003af6:	4b88      	ldr	r3, [pc, #544]	; (8003d18 <mpu_begin+0x260>)
 8003af8:	edd3 7a01 	vldr	s15, [r3, #4]
 8003afc:	eeb0 0a67 	vmov.f32	s0, s15
 8003b00:	f7ff fc44 	bl	800338c <print_float>
 8003b04:	4887      	ldr	r0, [pc, #540]	; (8003d24 <mpu_begin+0x26c>)
 8003b06:	f7ff fbc5 	bl	8003294 <println>
		print("z-axis self test: acceleration trim within : "); print_float(SelfTest[2]); println("% of factory value");
 8003b0a:	4888      	ldr	r0, [pc, #544]	; (8003d2c <mpu_begin+0x274>)
 8003b0c:	f7ff fba0 	bl	8003250 <print>
 8003b10:	4b81      	ldr	r3, [pc, #516]	; (8003d18 <mpu_begin+0x260>)
 8003b12:	edd3 7a02 	vldr	s15, [r3, #8]
 8003b16:	eeb0 0a67 	vmov.f32	s0, s15
 8003b1a:	f7ff fc37 	bl	800338c <print_float>
 8003b1e:	4881      	ldr	r0, [pc, #516]	; (8003d24 <mpu_begin+0x26c>)
 8003b20:	f7ff fbb8 	bl	8003294 <println>
		print("x-axis self test: gyration trim within : "); print_float(SelfTest[3]); println("% of factory value");
 8003b24:	4882      	ldr	r0, [pc, #520]	; (8003d30 <mpu_begin+0x278>)
 8003b26:	f7ff fb93 	bl	8003250 <print>
 8003b2a:	4b7b      	ldr	r3, [pc, #492]	; (8003d18 <mpu_begin+0x260>)
 8003b2c:	edd3 7a03 	vldr	s15, [r3, #12]
 8003b30:	eeb0 0a67 	vmov.f32	s0, s15
 8003b34:	f7ff fc2a 	bl	800338c <print_float>
 8003b38:	487a      	ldr	r0, [pc, #488]	; (8003d24 <mpu_begin+0x26c>)
 8003b3a:	f7ff fbab 	bl	8003294 <println>
		print("y-axis self test: gyration trim within : "); print_float(SelfTest[4]); println("% of factory value");
 8003b3e:	487d      	ldr	r0, [pc, #500]	; (8003d34 <mpu_begin+0x27c>)
 8003b40:	f7ff fb86 	bl	8003250 <print>
 8003b44:	4b74      	ldr	r3, [pc, #464]	; (8003d18 <mpu_begin+0x260>)
 8003b46:	edd3 7a04 	vldr	s15, [r3, #16]
 8003b4a:	eeb0 0a67 	vmov.f32	s0, s15
 8003b4e:	f7ff fc1d 	bl	800338c <print_float>
 8003b52:	4874      	ldr	r0, [pc, #464]	; (8003d24 <mpu_begin+0x26c>)
 8003b54:	f7ff fb9e 	bl	8003294 <println>
		print("z-axis self test: gyration trim within : "); print_float(SelfTest[5]); println("% of factory value");
 8003b58:	4877      	ldr	r0, [pc, #476]	; (8003d38 <mpu_begin+0x280>)
 8003b5a:	f7ff fb79 	bl	8003250 <print>
 8003b5e:	4b6e      	ldr	r3, [pc, #440]	; (8003d18 <mpu_begin+0x260>)
 8003b60:	edd3 7a05 	vldr	s15, [r3, #20]
 8003b64:	eeb0 0a67 	vmov.f32	s0, s15
 8003b68:	f7ff fc10 	bl	800338c <print_float>
 8003b6c:	486d      	ldr	r0, [pc, #436]	; (8003d24 <mpu_begin+0x26c>)
 8003b6e:	f7ff fb91 	bl	8003294 <println>
		HAL_Delay(1000);
 8003b72:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003b76:	f001 fa3b 	bl	8004ff0 <HAL_Delay>

		// get sensor resolutions, only need to do this once
		MPU_getAres();
 8003b7a:	f7fd fae9 	bl	8001150 <MPU_getAres>
		MPU_getGres();
 8003b7e:	f7fd fab3 	bl	80010e8 <MPU_getGres>
		MPU_getMres();
 8003b82:	f7fd fa93 	bl	80010ac <MPU_getMres>

		println(" Calibrate MPU9250 gyro and accel");
 8003b86:	486d      	ldr	r0, [pc, #436]	; (8003d3c <mpu_begin+0x284>)
 8003b88:	f7ff fb84 	bl	8003294 <println>
		MPU_calibrate(MPU9250gyroBias, MPU9250accelBias); // Calibrate gyro and accelerometers, load biases in bias registers
 8003b8c:	496c      	ldr	r1, [pc, #432]	; (8003d40 <mpu_begin+0x288>)
 8003b8e:	486d      	ldr	r0, [pc, #436]	; (8003d44 <mpu_begin+0x28c>)
 8003b90:	f7fd fd6a 	bl	8001668 <MPU_calibrate>
		println("accel biases (mg)");
 8003b94:	486c      	ldr	r0, [pc, #432]	; (8003d48 <mpu_begin+0x290>)
 8003b96:	f7ff fb7d 	bl	8003294 <println>
		print_float(1000.0 * MPU9250accelBias[0]); println("");
 8003b9a:	4b69      	ldr	r3, [pc, #420]	; (8003d40 <mpu_begin+0x288>)
 8003b9c:	edd3 7a00 	vldr	s15, [r3]
 8003ba0:	ed9f 7a6a 	vldr	s14, [pc, #424]	; 8003d4c <mpu_begin+0x294>
 8003ba4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003ba8:	eeb0 0a67 	vmov.f32	s0, s15
 8003bac:	f7ff fbee 	bl	800338c <print_float>
 8003bb0:	4867      	ldr	r0, [pc, #412]	; (8003d50 <mpu_begin+0x298>)
 8003bb2:	f7ff fb6f 	bl	8003294 <println>
		print_float(1000.0 * MPU9250accelBias[1]); println("");
 8003bb6:	4b62      	ldr	r3, [pc, #392]	; (8003d40 <mpu_begin+0x288>)
 8003bb8:	edd3 7a01 	vldr	s15, [r3, #4]
 8003bbc:	ed9f 7a63 	vldr	s14, [pc, #396]	; 8003d4c <mpu_begin+0x294>
 8003bc0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003bc4:	eeb0 0a67 	vmov.f32	s0, s15
 8003bc8:	f7ff fbe0 	bl	800338c <print_float>
 8003bcc:	4860      	ldr	r0, [pc, #384]	; (8003d50 <mpu_begin+0x298>)
 8003bce:	f7ff fb61 	bl	8003294 <println>
		print_float(1000.0 * MPU9250accelBias[2]); println("");
 8003bd2:	4b5b      	ldr	r3, [pc, #364]	; (8003d40 <mpu_begin+0x288>)
 8003bd4:	edd3 7a02 	vldr	s15, [r3, #8]
 8003bd8:	ed9f 7a5c 	vldr	s14, [pc, #368]	; 8003d4c <mpu_begin+0x294>
 8003bdc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003be0:	eeb0 0a67 	vmov.f32	s0, s15
 8003be4:	f7ff fbd2 	bl	800338c <print_float>
 8003be8:	4859      	ldr	r0, [pc, #356]	; (8003d50 <mpu_begin+0x298>)
 8003bea:	f7ff fb53 	bl	8003294 <println>
		println("gyro biases (dps)");
 8003bee:	4859      	ldr	r0, [pc, #356]	; (8003d54 <mpu_begin+0x29c>)
 8003bf0:	f7ff fb50 	bl	8003294 <println>
		print_float(MPU9250gyroBias[0]); println("");
 8003bf4:	4b53      	ldr	r3, [pc, #332]	; (8003d44 <mpu_begin+0x28c>)
 8003bf6:	edd3 7a00 	vldr	s15, [r3]
 8003bfa:	eeb0 0a67 	vmov.f32	s0, s15
 8003bfe:	f7ff fbc5 	bl	800338c <print_float>
 8003c02:	4853      	ldr	r0, [pc, #332]	; (8003d50 <mpu_begin+0x298>)
 8003c04:	f7ff fb46 	bl	8003294 <println>
		print_float(MPU9250gyroBias[1]); println("");
 8003c08:	4b4e      	ldr	r3, [pc, #312]	; (8003d44 <mpu_begin+0x28c>)
 8003c0a:	edd3 7a01 	vldr	s15, [r3, #4]
 8003c0e:	eeb0 0a67 	vmov.f32	s0, s15
 8003c12:	f7ff fbbb 	bl	800338c <print_float>
 8003c16:	484e      	ldr	r0, [pc, #312]	; (8003d50 <mpu_begin+0x298>)
 8003c18:	f7ff fb3c 	bl	8003294 <println>
		print_float(MPU9250gyroBias[2]); println("");
 8003c1c:	4b49      	ldr	r3, [pc, #292]	; (8003d44 <mpu_begin+0x28c>)
 8003c1e:	edd3 7a02 	vldr	s15, [r3, #8]
 8003c22:	eeb0 0a67 	vmov.f32	s0, s15
 8003c26:	f7ff fbb1 	bl	800338c <print_float>
 8003c2a:	4849      	ldr	r0, [pc, #292]	; (8003d50 <mpu_begin+0x298>)
 8003c2c:	f7ff fb32 	bl	8003294 <println>

		HAL_Delay(1000);
 8003c30:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003c34:	f001 f9dc 	bl	8004ff0 <HAL_Delay>

		MPU_init();
 8003c38:	f7fd fb82 	bl	8001340 <MPU_init>
		println("MPU9250 initialized for active data mode...."); // Initialize device for active mode read of acclerometer, gyroscope, and temperature
 8003c3c:	4846      	ldr	r0, [pc, #280]	; (8003d58 <mpu_begin+0x2a0>)
 8003c3e:	f7ff fb29 	bl	8003294 <println>

		// Read the WHO_AM_I register of the magnetometer, this is a good test of communication
		char d = MPU_readByte(AK8963_ADDRESS, AK8963_WHO_AM_I);  // Read WHO_AM_I register for AK8963
 8003c42:	2100      	movs	r1, #0
 8003c44:	2018      	movs	r0, #24
 8003c46:	f7fd f9c6 	bl	8000fd6 <MPU_readByte>
 8003c4a:	4603      	mov	r3, r0
 8003c4c:	71fb      	strb	r3, [r7, #7]
		if (d == 0x48) println("[MAG] SUCCESSS!!!!");
 8003c4e:	79fb      	ldrb	r3, [r7, #7]
 8003c50:	2b48      	cmp	r3, #72	; 0x48
 8003c52:	d102      	bne.n	8003c5a <mpu_begin+0x1a2>
 8003c54:	4841      	ldr	r0, [pc, #260]	; (8003d5c <mpu_begin+0x2a4>)
 8003c56:	f7ff fb1d 	bl	8003294 <println>
		HAL_Delay(1000);
 8003c5a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003c5e:	f001 f9c7 	bl	8004ff0 <HAL_Delay>

		// Get magnetometer calibration from AK8963 ROM
		AK8963_init(magCalibration); println("AK8963 initialized for active data mode...."); // Initialize device for active mode read of magnetometer
 8003c62:	483f      	ldr	r0, [pc, #252]	; (8003d60 <mpu_begin+0x2a8>)
 8003c64:	f7fd fc8c 	bl	8001580 <AK8963_init>
 8003c68:	483e      	ldr	r0, [pc, #248]	; (8003d64 <mpu_begin+0x2ac>)
 8003c6a:	f7ff fb13 	bl	8003294 <println>

		MPU_calibrateMag(MPU9250magBias);
 8003c6e:	483e      	ldr	r0, [pc, #248]	; (8003d68 <mpu_begin+0x2b0>)
 8003c70:	f7fe fb2c 	bl	80022cc <MPU_calibrateMag>
		println("AK8963 mag biases (mG)");
 8003c74:	483d      	ldr	r0, [pc, #244]	; (8003d6c <mpu_begin+0x2b4>)
 8003c76:	f7ff fb0d 	bl	8003294 <println>
		print_float(MPU9250magBias[0]); println("");
 8003c7a:	4b3b      	ldr	r3, [pc, #236]	; (8003d68 <mpu_begin+0x2b0>)
 8003c7c:	edd3 7a00 	vldr	s15, [r3]
 8003c80:	eeb0 0a67 	vmov.f32	s0, s15
 8003c84:	f7ff fb82 	bl	800338c <print_float>
 8003c88:	4831      	ldr	r0, [pc, #196]	; (8003d50 <mpu_begin+0x298>)
 8003c8a:	f7ff fb03 	bl	8003294 <println>
		print_float(MPU9250magBias[1]); println("");
 8003c8e:	4b36      	ldr	r3, [pc, #216]	; (8003d68 <mpu_begin+0x2b0>)
 8003c90:	edd3 7a01 	vldr	s15, [r3, #4]
 8003c94:	eeb0 0a67 	vmov.f32	s0, s15
 8003c98:	f7ff fb78 	bl	800338c <print_float>
 8003c9c:	482c      	ldr	r0, [pc, #176]	; (8003d50 <mpu_begin+0x298>)
 8003c9e:	f7ff faf9 	bl	8003294 <println>
		print_float(MPU9250magBias[2]); println("");
 8003ca2:	4b31      	ldr	r3, [pc, #196]	; (8003d68 <mpu_begin+0x2b0>)
 8003ca4:	edd3 7a02 	vldr	s15, [r3, #8]
 8003ca8:	eeb0 0a67 	vmov.f32	s0, s15
 8003cac:	f7ff fb6e 	bl	800338c <print_float>
 8003cb0:	4827      	ldr	r0, [pc, #156]	; (8003d50 <mpu_begin+0x298>)
 8003cb2:	f7ff faef 	bl	8003294 <println>
		HAL_Delay(2000); // add delay to see results before serial spew of data
 8003cb6:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8003cba:	f001 f999 	bl	8004ff0 <HAL_Delay>

		print("[MAG] X-Axis sensitivity adjustment value "); print_float(magCalibration[0]); println("");
 8003cbe:	482c      	ldr	r0, [pc, #176]	; (8003d70 <mpu_begin+0x2b8>)
 8003cc0:	f7ff fac6 	bl	8003250 <print>
 8003cc4:	4b26      	ldr	r3, [pc, #152]	; (8003d60 <mpu_begin+0x2a8>)
 8003cc6:	edd3 7a00 	vldr	s15, [r3]
 8003cca:	eeb0 0a67 	vmov.f32	s0, s15
 8003cce:	f7ff fb5d 	bl	800338c <print_float>
 8003cd2:	481f      	ldr	r0, [pc, #124]	; (8003d50 <mpu_begin+0x298>)
 8003cd4:	f7ff fade 	bl	8003294 <println>
		print("[MAG] Y-Axis sensitivity adjustment value "); print_float(magCalibration[1]); println("");
 8003cd8:	4826      	ldr	r0, [pc, #152]	; (8003d74 <mpu_begin+0x2bc>)
 8003cda:	f7ff fab9 	bl	8003250 <print>
 8003cde:	4b20      	ldr	r3, [pc, #128]	; (8003d60 <mpu_begin+0x2a8>)
 8003ce0:	edd3 7a01 	vldr	s15, [r3, #4]
 8003ce4:	eeb0 0a67 	vmov.f32	s0, s15
 8003ce8:	f7ff fb50 	bl	800338c <print_float>
 8003cec:	4818      	ldr	r0, [pc, #96]	; (8003d50 <mpu_begin+0x298>)
 8003cee:	f7ff fad1 	bl	8003294 <println>
		print("[MAG] Z-Axis sensitivity adjustment value "); print_float(magCalibration[2]); println("");
 8003cf2:	4821      	ldr	r0, [pc, #132]	; (8003d78 <mpu_begin+0x2c0>)
 8003cf4:	f7ff faac 	bl	8003250 <print>
 8003cf8:	4b19      	ldr	r3, [pc, #100]	; (8003d60 <mpu_begin+0x2a8>)
 8003cfa:	edd3 7a02 	vldr	s15, [r3, #8]
 8003cfe:	eeb0 0a67 	vmov.f32	s0, s15
 8003d02:	f7ff fb43 	bl	800338c <print_float>
 8003d06:	4812      	ldr	r0, [pc, #72]	; (8003d50 <mpu_begin+0x298>)
 8003d08:	f7ff fac4 	bl	8003294 <println>
	}
}
 8003d0c:	bf00      	nop
 8003d0e:	4618      	mov	r0, r3
 8003d10:	3708      	adds	r7, #8
 8003d12:	46bd      	mov	sp, r7
 8003d14:	bd80      	pop	{r7, pc}
 8003d16:	bf00      	nop
 8003d18:	200007a0 	.word	0x200007a0
 8003d1c:	08015638 	.word	0x08015638
 8003d20:	0801564c 	.word	0x0801564c
 8003d24:	0801567c 	.word	0x0801567c
 8003d28:	08015690 	.word	0x08015690
 8003d2c:	080156c0 	.word	0x080156c0
 8003d30:	080156f0 	.word	0x080156f0
 8003d34:	0801571c 	.word	0x0801571c
 8003d38:	08015748 	.word	0x08015748
 8003d3c:	08015774 	.word	0x08015774
 8003d40:	20000aa8 	.word	0x20000aa8
 8003d44:	20000d08 	.word	0x20000d08
 8003d48:	08015798 	.word	0x08015798
 8003d4c:	447a0000 	.word	0x447a0000
 8003d50:	080152b8 	.word	0x080152b8
 8003d54:	080157ac 	.word	0x080157ac
 8003d58:	080157c0 	.word	0x080157c0
 8003d5c:	080157f0 	.word	0x080157f0
 8003d60:	2000086c 	.word	0x2000086c
 8003d64:	08015804 	.word	0x08015804
 8003d68:	20000cf8 	.word	0x20000cf8
 8003d6c:	08015830 	.word	0x08015830
 8003d70:	08015848 	.word	0x08015848
 8003d74:	08015874 	.word	0x08015874
 8003d78:	080158a0 	.word	0x080158a0

08003d7c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003d7c:	b580      	push	{r7, lr}
 8003d7e:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003d80:	f001 f8c4 	bl	8004f0c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003d84:	f000 f832 	bl	8003dec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003d88:	f000 fbb0 	bl	80044ec <MX_GPIO_Init>
  MX_DMA_Init();
 8003d8c:	f000 fb76 	bl	800447c <MX_DMA_Init>
  MX_SDIO_SD_Init();
 8003d90:	f000 f902 	bl	8003f98 <MX_SDIO_SD_Init>
  MX_FATFS_Init();
 8003d94:	f009 fdd0 	bl	800d938 <MX_FATFS_Init>
  MX_I2C1_Init();
 8003d98:	f000 f8aa 	bl	8003ef0 <MX_I2C1_Init>
  MX_USB_DEVICE_Init();
 8003d9c:	f00b fc18 	bl	800f5d0 <MX_USB_DEVICE_Init>
  MX_SPI1_Init();
 8003da0:	f000 f91a 	bl	8003fd8 <MX_SPI1_Init>
  MX_USART3_UART_Init();
 8003da4:	f000 fb40 	bl	8004428 <MX_USART3_UART_Init>
  MX_RTC_Init();
 8003da8:	f000 f8d0 	bl	8003f4c <MX_RTC_Init>
  MX_TIM2_Init();
 8003dac:	f000 f99c 	bl	80040e8 <MX_TIM2_Init>
  MX_TIM5_Init();
 8003db0:	f000 fab8 	bl	8004324 <MX_TIM5_Init>
  MX_TIM4_Init();
 8003db4:	f000 fa68 	bl	8004288 <MX_TIM4_Init>
  MX_TIM1_Init();
 8003db8:	f000 f944 	bl	8004044 <MX_TIM1_Init>
  MX_TIM3_Init();
 8003dbc:	f000 f9e2 	bl	8004184 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  // Start millisecond timer
  HAL_TIM_Base_Start(&htim2);
 8003dc0:	4807      	ldr	r0, [pc, #28]	; (8003de0 <main+0x64>)
 8003dc2:	f006 fbea 	bl	800a59a <HAL_TIM_Base_Start>

  // Start servo1 timer
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 8003dc6:	2108      	movs	r1, #8
 8003dc8:	4806      	ldr	r0, [pc, #24]	; (8003de4 <main+0x68>)
 8003dca:	f006 fc63 	bl	800a694 <HAL_TIM_PWM_Start>

  // Execute code
  setup();
 8003dce:	f7ff fb2d 	bl	800342c <setup>


  // Start motor timeout interrupt timer
  HAL_TIM_Base_Start_IT(&htim4);
 8003dd2:	4805      	ldr	r0, [pc, #20]	; (8003de8 <main+0x6c>)
 8003dd4:	f006 fc05 	bl	800a5e2 <HAL_TIM_Base_Start_IT>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	// Execute code
	loop();
 8003dd8:	f7ff fb4e 	bl	8003478 <loop>
 8003ddc:	e7fc      	b.n	8003dd8 <main+0x5c>
 8003dde:	bf00      	nop
 8003de0:	20001094 	.word	0x20001094
 8003de4:	20000eb8 	.word	0x20000eb8
 8003de8:	20000da4 	.word	0x20000da4

08003dec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003dec:	b580      	push	{r7, lr}
 8003dee:	b098      	sub	sp, #96	; 0x60
 8003df0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003df2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003df6:	2230      	movs	r2, #48	; 0x30
 8003df8:	2100      	movs	r1, #0
 8003dfa:	4618      	mov	r0, r3
 8003dfc:	f00c f951 	bl	80100a2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003e00:	f107 031c 	add.w	r3, r7, #28
 8003e04:	2200      	movs	r2, #0
 8003e06:	601a      	str	r2, [r3, #0]
 8003e08:	605a      	str	r2, [r3, #4]
 8003e0a:	609a      	str	r2, [r3, #8]
 8003e0c:	60da      	str	r2, [r3, #12]
 8003e0e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003e10:	f107 030c 	add.w	r3, r7, #12
 8003e14:	2200      	movs	r2, #0
 8003e16:	601a      	str	r2, [r3, #0]
 8003e18:	605a      	str	r2, [r3, #4]
 8003e1a:	609a      	str	r2, [r3, #8]
 8003e1c:	60da      	str	r2, [r3, #12]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8003e1e:	2300      	movs	r3, #0
 8003e20:	60bb      	str	r3, [r7, #8]
 8003e22:	4b31      	ldr	r3, [pc, #196]	; (8003ee8 <SystemClock_Config+0xfc>)
 8003e24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e26:	4a30      	ldr	r2, [pc, #192]	; (8003ee8 <SystemClock_Config+0xfc>)
 8003e28:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e2c:	6413      	str	r3, [r2, #64]	; 0x40
 8003e2e:	4b2e      	ldr	r3, [pc, #184]	; (8003ee8 <SystemClock_Config+0xfc>)
 8003e30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e36:	60bb      	str	r3, [r7, #8]
 8003e38:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003e3a:	2300      	movs	r3, #0
 8003e3c:	607b      	str	r3, [r7, #4]
 8003e3e:	4b2b      	ldr	r3, [pc, #172]	; (8003eec <SystemClock_Config+0x100>)
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	4a2a      	ldr	r2, [pc, #168]	; (8003eec <SystemClock_Config+0x100>)
 8003e44:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003e48:	6013      	str	r3, [r2, #0]
 8003e4a:	4b28      	ldr	r3, [pc, #160]	; (8003eec <SystemClock_Config+0x100>)
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003e52:	607b      	str	r3, [r7, #4]
 8003e54:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 8003e56:	2305      	movs	r3, #5
 8003e58:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003e5a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003e5e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8003e60:	2301      	movs	r3, #1
 8003e62:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003e64:	2302      	movs	r3, #2
 8003e66:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003e68:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003e6c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 6;
 8003e6e:	2306      	movs	r3, #6
 8003e70:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 168;
 8003e72:	23a8      	movs	r3, #168	; 0xa8
 8003e74:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003e76:	2302      	movs	r3, #2
 8003e78:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8003e7a:	2307      	movs	r3, #7
 8003e7c:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003e7e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003e82:	4618      	mov	r0, r3
 8003e84:	f004 f8bc 	bl	8008000 <HAL_RCC_OscConfig>
 8003e88:	4603      	mov	r3, r0
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d001      	beq.n	8003e92 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8003e8e:	f000 fc1d 	bl	80046cc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003e92:	230f      	movs	r3, #15
 8003e94:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003e96:	2302      	movs	r3, #2
 8003e98:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003e9a:	2300      	movs	r3, #0
 8003e9c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8003e9e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8003ea2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8003ea4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003ea8:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8003eaa:	f107 031c 	add.w	r3, r7, #28
 8003eae:	2105      	movs	r1, #5
 8003eb0:	4618      	mov	r0, r3
 8003eb2:	f004 fb15 	bl	80084e0 <HAL_RCC_ClockConfig>
 8003eb6:	4603      	mov	r3, r0
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d001      	beq.n	8003ec0 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8003ebc:	f000 fc06 	bl	80046cc <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8003ec0:	2302      	movs	r3, #2
 8003ec2:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8003ec4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003ec8:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003eca:	f107 030c 	add.w	r3, r7, #12
 8003ece:	4618      	mov	r0, r3
 8003ed0:	f004 fcd2 	bl	8008878 <HAL_RCCEx_PeriphCLKConfig>
 8003ed4:	4603      	mov	r3, r0
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d001      	beq.n	8003ede <SystemClock_Config+0xf2>
  {
    Error_Handler();
 8003eda:	f000 fbf7 	bl	80046cc <Error_Handler>
  }
}
 8003ede:	bf00      	nop
 8003ee0:	3760      	adds	r7, #96	; 0x60
 8003ee2:	46bd      	mov	sp, r7
 8003ee4:	bd80      	pop	{r7, pc}
 8003ee6:	bf00      	nop
 8003ee8:	40023800 	.word	0x40023800
 8003eec:	40007000 	.word	0x40007000

08003ef0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8003ef0:	b580      	push	{r7, lr}
 8003ef2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8003ef4:	4b12      	ldr	r3, [pc, #72]	; (8003f40 <MX_I2C1_Init+0x50>)
 8003ef6:	4a13      	ldr	r2, [pc, #76]	; (8003f44 <MX_I2C1_Init+0x54>)
 8003ef8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8003efa:	4b11      	ldr	r3, [pc, #68]	; (8003f40 <MX_I2C1_Init+0x50>)
 8003efc:	4a12      	ldr	r2, [pc, #72]	; (8003f48 <MX_I2C1_Init+0x58>)
 8003efe:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003f00:	4b0f      	ldr	r3, [pc, #60]	; (8003f40 <MX_I2C1_Init+0x50>)
 8003f02:	2200      	movs	r2, #0
 8003f04:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8003f06:	4b0e      	ldr	r3, [pc, #56]	; (8003f40 <MX_I2C1_Init+0x50>)
 8003f08:	2200      	movs	r2, #0
 8003f0a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003f0c:	4b0c      	ldr	r3, [pc, #48]	; (8003f40 <MX_I2C1_Init+0x50>)
 8003f0e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003f12:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003f14:	4b0a      	ldr	r3, [pc, #40]	; (8003f40 <MX_I2C1_Init+0x50>)
 8003f16:	2200      	movs	r2, #0
 8003f18:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8003f1a:	4b09      	ldr	r3, [pc, #36]	; (8003f40 <MX_I2C1_Init+0x50>)
 8003f1c:	2200      	movs	r2, #0
 8003f1e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003f20:	4b07      	ldr	r3, [pc, #28]	; (8003f40 <MX_I2C1_Init+0x50>)
 8003f22:	2200      	movs	r2, #0
 8003f24:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003f26:	4b06      	ldr	r3, [pc, #24]	; (8003f40 <MX_I2C1_Init+0x50>)
 8003f28:	2200      	movs	r2, #0
 8003f2a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8003f2c:	4804      	ldr	r0, [pc, #16]	; (8003f40 <MX_I2C1_Init+0x50>)
 8003f2e:	f001 ff1f 	bl	8005d70 <HAL_I2C_Init>
 8003f32:	4603      	mov	r3, r0
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d001      	beq.n	8003f3c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8003f38:	f000 fbc8 	bl	80046cc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8003f3c:	bf00      	nop
 8003f3e:	bd80      	pop	{r7, pc}
 8003f40:	20000e24 	.word	0x20000e24
 8003f44:	40005400 	.word	0x40005400
 8003f48:	00061a80 	.word	0x00061a80

08003f4c <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8003f4c:	b580      	push	{r7, lr}
 8003f4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only 
  */
  hrtc.Instance = RTC;
 8003f50:	4b0f      	ldr	r3, [pc, #60]	; (8003f90 <MX_RTC_Init+0x44>)
 8003f52:	4a10      	ldr	r2, [pc, #64]	; (8003f94 <MX_RTC_Init+0x48>)
 8003f54:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8003f56:	4b0e      	ldr	r3, [pc, #56]	; (8003f90 <MX_RTC_Init+0x44>)
 8003f58:	2200      	movs	r2, #0
 8003f5a:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8003f5c:	4b0c      	ldr	r3, [pc, #48]	; (8003f90 <MX_RTC_Init+0x44>)
 8003f5e:	227f      	movs	r2, #127	; 0x7f
 8003f60:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8003f62:	4b0b      	ldr	r3, [pc, #44]	; (8003f90 <MX_RTC_Init+0x44>)
 8003f64:	22ff      	movs	r2, #255	; 0xff
 8003f66:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8003f68:	4b09      	ldr	r3, [pc, #36]	; (8003f90 <MX_RTC_Init+0x44>)
 8003f6a:	2200      	movs	r2, #0
 8003f6c:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8003f6e:	4b08      	ldr	r3, [pc, #32]	; (8003f90 <MX_RTC_Init+0x44>)
 8003f70:	2200      	movs	r2, #0
 8003f72:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8003f74:	4b06      	ldr	r3, [pc, #24]	; (8003f90 <MX_RTC_Init+0x44>)
 8003f76:	2200      	movs	r2, #0
 8003f78:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8003f7a:	4805      	ldr	r0, [pc, #20]	; (8003f90 <MX_RTC_Init+0x44>)
 8003f7c:	f004 fd5e 	bl	8008a3c <HAL_RTC_Init>
 8003f80:	4603      	mov	r3, r0
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d001      	beq.n	8003f8a <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 8003f86:	f000 fba1 	bl	80046cc <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8003f8a:	bf00      	nop
 8003f8c:	bd80      	pop	{r7, pc}
 8003f8e:	bf00      	nop
 8003f90:	20000ef8 	.word	0x20000ef8
 8003f94:	40002800 	.word	0x40002800

08003f98 <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 8003f98:	b480      	push	{r7}
 8003f9a:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 8003f9c:	4b0c      	ldr	r3, [pc, #48]	; (8003fd0 <MX_SDIO_SD_Init+0x38>)
 8003f9e:	4a0d      	ldr	r2, [pc, #52]	; (8003fd4 <MX_SDIO_SD_Init+0x3c>)
 8003fa0:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 8003fa2:	4b0b      	ldr	r3, [pc, #44]	; (8003fd0 <MX_SDIO_SD_Init+0x38>)
 8003fa4:	2200      	movs	r2, #0
 8003fa6:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8003fa8:	4b09      	ldr	r3, [pc, #36]	; (8003fd0 <MX_SDIO_SD_Init+0x38>)
 8003faa:	2200      	movs	r2, #0
 8003fac:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8003fae:	4b08      	ldr	r3, [pc, #32]	; (8003fd0 <MX_SDIO_SD_Init+0x38>)
 8003fb0:	2200      	movs	r2, #0
 8003fb2:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 8003fb4:	4b06      	ldr	r3, [pc, #24]	; (8003fd0 <MX_SDIO_SD_Init+0x38>)
 8003fb6:	2200      	movs	r2, #0
 8003fb8:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8003fba:	4b05      	ldr	r3, [pc, #20]	; (8003fd0 <MX_SDIO_SD_Init+0x38>)
 8003fbc:	2200      	movs	r2, #0
 8003fbe:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 0;
 8003fc0:	4b03      	ldr	r3, [pc, #12]	; (8003fd0 <MX_SDIO_SD_Init+0x38>)
 8003fc2:	2200      	movs	r2, #0
 8003fc4:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 8003fc6:	bf00      	nop
 8003fc8:	46bd      	mov	sp, r7
 8003fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fce:	4770      	bx	lr
 8003fd0:	20000fb8 	.word	0x20000fb8
 8003fd4:	40012c00 	.word	0x40012c00

08003fd8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8003fd8:	b580      	push	{r7, lr}
 8003fda:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8003fdc:	4b17      	ldr	r3, [pc, #92]	; (800403c <MX_SPI1_Init+0x64>)
 8003fde:	4a18      	ldr	r2, [pc, #96]	; (8004040 <MX_SPI1_Init+0x68>)
 8003fe0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8003fe2:	4b16      	ldr	r3, [pc, #88]	; (800403c <MX_SPI1_Init+0x64>)
 8003fe4:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003fe8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8003fea:	4b14      	ldr	r3, [pc, #80]	; (800403c <MX_SPI1_Init+0x64>)
 8003fec:	2200      	movs	r2, #0
 8003fee:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8003ff0:	4b12      	ldr	r3, [pc, #72]	; (800403c <MX_SPI1_Init+0x64>)
 8003ff2:	2200      	movs	r2, #0
 8003ff4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003ff6:	4b11      	ldr	r3, [pc, #68]	; (800403c <MX_SPI1_Init+0x64>)
 8003ff8:	2200      	movs	r2, #0
 8003ffa:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003ffc:	4b0f      	ldr	r3, [pc, #60]	; (800403c <MX_SPI1_Init+0x64>)
 8003ffe:	2200      	movs	r2, #0
 8004000:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8004002:	4b0e      	ldr	r3, [pc, #56]	; (800403c <MX_SPI1_Init+0x64>)
 8004004:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004008:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 800400a:	4b0c      	ldr	r3, [pc, #48]	; (800403c <MX_SPI1_Init+0x64>)
 800400c:	2228      	movs	r2, #40	; 0x28
 800400e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8004010:	4b0a      	ldr	r3, [pc, #40]	; (800403c <MX_SPI1_Init+0x64>)
 8004012:	2200      	movs	r2, #0
 8004014:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8004016:	4b09      	ldr	r3, [pc, #36]	; (800403c <MX_SPI1_Init+0x64>)
 8004018:	2200      	movs	r2, #0
 800401a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800401c:	4b07      	ldr	r3, [pc, #28]	; (800403c <MX_SPI1_Init+0x64>)
 800401e:	2200      	movs	r2, #0
 8004020:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8004022:	4b06      	ldr	r3, [pc, #24]	; (800403c <MX_SPI1_Init+0x64>)
 8004024:	220a      	movs	r2, #10
 8004026:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8004028:	4804      	ldr	r0, [pc, #16]	; (800403c <MX_SPI1_Init+0x64>)
 800402a:	f006 f909 	bl	800a240 <HAL_SPI_Init>
 800402e:	4603      	mov	r3, r0
 8004030:	2b00      	cmp	r3, #0
 8004032:	d001      	beq.n	8004038 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8004034:	f000 fb4a 	bl	80046cc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8004038:	bf00      	nop
 800403a:	bd80      	pop	{r7, pc}
 800403c:	2000103c 	.word	0x2000103c
 8004040:	40013000 	.word	0x40013000

08004044 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8004044:	b580      	push	{r7, lr}
 8004046:	b086      	sub	sp, #24
 8004048:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800404a:	f107 0308 	add.w	r3, r7, #8
 800404e:	2200      	movs	r2, #0
 8004050:	601a      	str	r2, [r3, #0]
 8004052:	605a      	str	r2, [r3, #4]
 8004054:	609a      	str	r2, [r3, #8]
 8004056:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004058:	463b      	mov	r3, r7
 800405a:	2200      	movs	r2, #0
 800405c:	601a      	str	r2, [r3, #0]
 800405e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8004060:	4b1f      	ldr	r3, [pc, #124]	; (80040e0 <MX_TIM1_Init+0x9c>)
 8004062:	4a20      	ldr	r2, [pc, #128]	; (80040e4 <MX_TIM1_Init+0xa0>)
 8004064:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 16799;
 8004066:	4b1e      	ldr	r3, [pc, #120]	; (80040e0 <MX_TIM1_Init+0x9c>)
 8004068:	f244 129f 	movw	r2, #16799	; 0x419f
 800406c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800406e:	4b1c      	ldr	r3, [pc, #112]	; (80040e0 <MX_TIM1_Init+0x9c>)
 8004070:	2200      	movs	r2, #0
 8004072:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8004074:	4b1a      	ldr	r3, [pc, #104]	; (80040e0 <MX_TIM1_Init+0x9c>)
 8004076:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800407a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800407c:	4b18      	ldr	r3, [pc, #96]	; (80040e0 <MX_TIM1_Init+0x9c>)
 800407e:	2200      	movs	r2, #0
 8004080:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8004082:	4b17      	ldr	r3, [pc, #92]	; (80040e0 <MX_TIM1_Init+0x9c>)
 8004084:	2200      	movs	r2, #0
 8004086:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004088:	4b15      	ldr	r3, [pc, #84]	; (80040e0 <MX_TIM1_Init+0x9c>)
 800408a:	2200      	movs	r2, #0
 800408c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800408e:	4814      	ldr	r0, [pc, #80]	; (80040e0 <MX_TIM1_Init+0x9c>)
 8004090:	f006 fa58 	bl	800a544 <HAL_TIM_Base_Init>
 8004094:	4603      	mov	r3, r0
 8004096:	2b00      	cmp	r3, #0
 8004098:	d001      	beq.n	800409e <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 800409a:	f000 fb17 	bl	80046cc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800409e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80040a2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80040a4:	f107 0308 	add.w	r3, r7, #8
 80040a8:	4619      	mov	r1, r3
 80040aa:	480d      	ldr	r0, [pc, #52]	; (80040e0 <MX_TIM1_Init+0x9c>)
 80040ac:	f006 fbf6 	bl	800a89c <HAL_TIM_ConfigClockSource>
 80040b0:	4603      	mov	r3, r0
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d001      	beq.n	80040ba <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 80040b6:	f000 fb09 	bl	80046cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80040ba:	2300      	movs	r3, #0
 80040bc:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80040be:	2300      	movs	r3, #0
 80040c0:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80040c2:	463b      	mov	r3, r7
 80040c4:	4619      	mov	r1, r3
 80040c6:	4806      	ldr	r0, [pc, #24]	; (80040e0 <MX_TIM1_Init+0x9c>)
 80040c8:	f006 ffb0 	bl	800b02c <HAL_TIMEx_MasterConfigSynchronization>
 80040cc:	4603      	mov	r3, r0
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d001      	beq.n	80040d6 <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 80040d2:	f000 fafb 	bl	80046cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80040d6:	bf00      	nop
 80040d8:	3718      	adds	r7, #24
 80040da:	46bd      	mov	sp, r7
 80040dc:	bd80      	pop	{r7, pc}
 80040de:	bf00      	nop
 80040e0:	20000f78 	.word	0x20000f78
 80040e4:	40010000 	.word	0x40010000

080040e8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80040e8:	b580      	push	{r7, lr}
 80040ea:	b086      	sub	sp, #24
 80040ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80040ee:	f107 0308 	add.w	r3, r7, #8
 80040f2:	2200      	movs	r2, #0
 80040f4:	601a      	str	r2, [r3, #0]
 80040f6:	605a      	str	r2, [r3, #4]
 80040f8:	609a      	str	r2, [r3, #8]
 80040fa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80040fc:	463b      	mov	r3, r7
 80040fe:	2200      	movs	r2, #0
 8004100:	601a      	str	r2, [r3, #0]
 8004102:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8004104:	4b1d      	ldr	r3, [pc, #116]	; (800417c <MX_TIM2_Init+0x94>)
 8004106:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800410a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 83;
 800410c:	4b1b      	ldr	r3, [pc, #108]	; (800417c <MX_TIM2_Init+0x94>)
 800410e:	2253      	movs	r2, #83	; 0x53
 8004110:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004112:	4b1a      	ldr	r3, [pc, #104]	; (800417c <MX_TIM2_Init+0x94>)
 8004114:	2200      	movs	r2, #0
 8004116:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4200000000;
 8004118:	4b18      	ldr	r3, [pc, #96]	; (800417c <MX_TIM2_Init+0x94>)
 800411a:	4a19      	ldr	r2, [pc, #100]	; (8004180 <MX_TIM2_Init+0x98>)
 800411c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800411e:	4b17      	ldr	r3, [pc, #92]	; (800417c <MX_TIM2_Init+0x94>)
 8004120:	2200      	movs	r2, #0
 8004122:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004124:	4b15      	ldr	r3, [pc, #84]	; (800417c <MX_TIM2_Init+0x94>)
 8004126:	2200      	movs	r2, #0
 8004128:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800412a:	4814      	ldr	r0, [pc, #80]	; (800417c <MX_TIM2_Init+0x94>)
 800412c:	f006 fa0a 	bl	800a544 <HAL_TIM_Base_Init>
 8004130:	4603      	mov	r3, r0
 8004132:	2b00      	cmp	r3, #0
 8004134:	d001      	beq.n	800413a <MX_TIM2_Init+0x52>
  {
    Error_Handler();
 8004136:	f000 fac9 	bl	80046cc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800413a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800413e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8004140:	f107 0308 	add.w	r3, r7, #8
 8004144:	4619      	mov	r1, r3
 8004146:	480d      	ldr	r0, [pc, #52]	; (800417c <MX_TIM2_Init+0x94>)
 8004148:	f006 fba8 	bl	800a89c <HAL_TIM_ConfigClockSource>
 800414c:	4603      	mov	r3, r0
 800414e:	2b00      	cmp	r3, #0
 8004150:	d001      	beq.n	8004156 <MX_TIM2_Init+0x6e>
  {
    Error_Handler();
 8004152:	f000 fabb 	bl	80046cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004156:	2300      	movs	r3, #0
 8004158:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800415a:	2300      	movs	r3, #0
 800415c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800415e:	463b      	mov	r3, r7
 8004160:	4619      	mov	r1, r3
 8004162:	4806      	ldr	r0, [pc, #24]	; (800417c <MX_TIM2_Init+0x94>)
 8004164:	f006 ff62 	bl	800b02c <HAL_TIMEx_MasterConfigSynchronization>
 8004168:	4603      	mov	r3, r0
 800416a:	2b00      	cmp	r3, #0
 800416c:	d001      	beq.n	8004172 <MX_TIM2_Init+0x8a>
  {
    Error_Handler();
 800416e:	f000 faad 	bl	80046cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8004172:	bf00      	nop
 8004174:	3718      	adds	r7, #24
 8004176:	46bd      	mov	sp, r7
 8004178:	bd80      	pop	{r7, pc}
 800417a:	bf00      	nop
 800417c:	20001094 	.word	0x20001094
 8004180:	fa56ea00 	.word	0xfa56ea00

08004184 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8004184:	b580      	push	{r7, lr}
 8004186:	b08e      	sub	sp, #56	; 0x38
 8004188:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800418a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800418e:	2200      	movs	r2, #0
 8004190:	601a      	str	r2, [r3, #0]
 8004192:	605a      	str	r2, [r3, #4]
 8004194:	609a      	str	r2, [r3, #8]
 8004196:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004198:	f107 0320 	add.w	r3, r7, #32
 800419c:	2200      	movs	r2, #0
 800419e:	601a      	str	r2, [r3, #0]
 80041a0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80041a2:	1d3b      	adds	r3, r7, #4
 80041a4:	2200      	movs	r2, #0
 80041a6:	601a      	str	r2, [r3, #0]
 80041a8:	605a      	str	r2, [r3, #4]
 80041aa:	609a      	str	r2, [r3, #8]
 80041ac:	60da      	str	r2, [r3, #12]
 80041ae:	611a      	str	r2, [r3, #16]
 80041b0:	615a      	str	r2, [r3, #20]
 80041b2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80041b4:	4b32      	ldr	r3, [pc, #200]	; (8004280 <MX_TIM3_Init+0xfc>)
 80041b6:	4a33      	ldr	r2, [pc, #204]	; (8004284 <MX_TIM3_Init+0x100>)
 80041b8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 167;
 80041ba:	4b31      	ldr	r3, [pc, #196]	; (8004280 <MX_TIM3_Init+0xfc>)
 80041bc:	22a7      	movs	r2, #167	; 0xa7
 80041be:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80041c0:	4b2f      	ldr	r3, [pc, #188]	; (8004280 <MX_TIM3_Init+0xfc>)
 80041c2:	2200      	movs	r2, #0
 80041c4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 10000;
 80041c6:	4b2e      	ldr	r3, [pc, #184]	; (8004280 <MX_TIM3_Init+0xfc>)
 80041c8:	f242 7210 	movw	r2, #10000	; 0x2710
 80041cc:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80041ce:	4b2c      	ldr	r3, [pc, #176]	; (8004280 <MX_TIM3_Init+0xfc>)
 80041d0:	2200      	movs	r2, #0
 80041d2:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80041d4:	4b2a      	ldr	r3, [pc, #168]	; (8004280 <MX_TIM3_Init+0xfc>)
 80041d6:	2200      	movs	r2, #0
 80041d8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80041da:	4829      	ldr	r0, [pc, #164]	; (8004280 <MX_TIM3_Init+0xfc>)
 80041dc:	f006 f9b2 	bl	800a544 <HAL_TIM_Base_Init>
 80041e0:	4603      	mov	r3, r0
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d001      	beq.n	80041ea <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 80041e6:	f000 fa71 	bl	80046cc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80041ea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80041ee:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80041f0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80041f4:	4619      	mov	r1, r3
 80041f6:	4822      	ldr	r0, [pc, #136]	; (8004280 <MX_TIM3_Init+0xfc>)
 80041f8:	f006 fb50 	bl	800a89c <HAL_TIM_ConfigClockSource>
 80041fc:	4603      	mov	r3, r0
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d001      	beq.n	8004206 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8004202:	f000 fa63 	bl	80046cc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8004206:	481e      	ldr	r0, [pc, #120]	; (8004280 <MX_TIM3_Init+0xfc>)
 8004208:	f006 fa0f 	bl	800a62a <HAL_TIM_PWM_Init>
 800420c:	4603      	mov	r3, r0
 800420e:	2b00      	cmp	r3, #0
 8004210:	d001      	beq.n	8004216 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8004212:	f000 fa5b 	bl	80046cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004216:	2300      	movs	r3, #0
 8004218:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800421a:	2300      	movs	r3, #0
 800421c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800421e:	f107 0320 	add.w	r3, r7, #32
 8004222:	4619      	mov	r1, r3
 8004224:	4816      	ldr	r0, [pc, #88]	; (8004280 <MX_TIM3_Init+0xfc>)
 8004226:	f006 ff01 	bl	800b02c <HAL_TIMEx_MasterConfigSynchronization>
 800422a:	4603      	mov	r3, r0
 800422c:	2b00      	cmp	r3, #0
 800422e:	d001      	beq.n	8004234 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8004230:	f000 fa4c 	bl	80046cc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004234:	2360      	movs	r3, #96	; 0x60
 8004236:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8004238:	2300      	movs	r3, #0
 800423a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800423c:	2300      	movs	r3, #0
 800423e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004240:	2300      	movs	r3, #0
 8004242:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8004244:	1d3b      	adds	r3, r7, #4
 8004246:	2208      	movs	r2, #8
 8004248:	4619      	mov	r1, r3
 800424a:	480d      	ldr	r0, [pc, #52]	; (8004280 <MX_TIM3_Init+0xfc>)
 800424c:	f006 fa60 	bl	800a710 <HAL_TIM_PWM_ConfigChannel>
 8004250:	4603      	mov	r3, r0
 8004252:	2b00      	cmp	r3, #0
 8004254:	d001      	beq.n	800425a <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8004256:	f000 fa39 	bl	80046cc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800425a:	1d3b      	adds	r3, r7, #4
 800425c:	220c      	movs	r2, #12
 800425e:	4619      	mov	r1, r3
 8004260:	4807      	ldr	r0, [pc, #28]	; (8004280 <MX_TIM3_Init+0xfc>)
 8004262:	f006 fa55 	bl	800a710 <HAL_TIM_PWM_ConfigChannel>
 8004266:	4603      	mov	r3, r0
 8004268:	2b00      	cmp	r3, #0
 800426a:	d001      	beq.n	8004270 <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 800426c:	f000 fa2e 	bl	80046cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8004270:	4803      	ldr	r0, [pc, #12]	; (8004280 <MX_TIM3_Init+0xfc>)
 8004272:	f000 fce5 	bl	8004c40 <HAL_TIM_MspPostInit>

}
 8004276:	bf00      	nop
 8004278:	3738      	adds	r7, #56	; 0x38
 800427a:	46bd      	mov	sp, r7
 800427c:	bd80      	pop	{r7, pc}
 800427e:	bf00      	nop
 8004280:	20000eb8 	.word	0x20000eb8
 8004284:	40000400 	.word	0x40000400

08004288 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8004288:	b580      	push	{r7, lr}
 800428a:	b086      	sub	sp, #24
 800428c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800428e:	f107 0308 	add.w	r3, r7, #8
 8004292:	2200      	movs	r2, #0
 8004294:	601a      	str	r2, [r3, #0]
 8004296:	605a      	str	r2, [r3, #4]
 8004298:	609a      	str	r2, [r3, #8]
 800429a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800429c:	463b      	mov	r3, r7
 800429e:	2200      	movs	r2, #0
 80042a0:	601a      	str	r2, [r3, #0]
 80042a2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80042a4:	4b1d      	ldr	r3, [pc, #116]	; (800431c <MX_TIM4_Init+0x94>)
 80042a6:	4a1e      	ldr	r2, [pc, #120]	; (8004320 <MX_TIM4_Init+0x98>)
 80042a8:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80042aa:	4b1c      	ldr	r3, [pc, #112]	; (800431c <MX_TIM4_Init+0x94>)
 80042ac:	2200      	movs	r2, #0
 80042ae:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80042b0:	4b1a      	ldr	r3, [pc, #104]	; (800431c <MX_TIM4_Init+0x94>)
 80042b2:	2200      	movs	r2, #0
 80042b4:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1024;
 80042b6:	4b19      	ldr	r3, [pc, #100]	; (800431c <MX_TIM4_Init+0x94>)
 80042b8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80042bc:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80042be:	4b17      	ldr	r3, [pc, #92]	; (800431c <MX_TIM4_Init+0x94>)
 80042c0:	2200      	movs	r2, #0
 80042c2:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80042c4:	4b15      	ldr	r3, [pc, #84]	; (800431c <MX_TIM4_Init+0x94>)
 80042c6:	2200      	movs	r2, #0
 80042c8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80042ca:	4814      	ldr	r0, [pc, #80]	; (800431c <MX_TIM4_Init+0x94>)
 80042cc:	f006 f93a 	bl	800a544 <HAL_TIM_Base_Init>
 80042d0:	4603      	mov	r3, r0
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d001      	beq.n	80042da <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 80042d6:	f000 f9f9 	bl	80046cc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80042da:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80042de:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80042e0:	f107 0308 	add.w	r3, r7, #8
 80042e4:	4619      	mov	r1, r3
 80042e6:	480d      	ldr	r0, [pc, #52]	; (800431c <MX_TIM4_Init+0x94>)
 80042e8:	f006 fad8 	bl	800a89c <HAL_TIM_ConfigClockSource>
 80042ec:	4603      	mov	r3, r0
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d001      	beq.n	80042f6 <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 80042f2:	f000 f9eb 	bl	80046cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80042f6:	2300      	movs	r3, #0
 80042f8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80042fa:	2300      	movs	r3, #0
 80042fc:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80042fe:	463b      	mov	r3, r7
 8004300:	4619      	mov	r1, r3
 8004302:	4806      	ldr	r0, [pc, #24]	; (800431c <MX_TIM4_Init+0x94>)
 8004304:	f006 fe92 	bl	800b02c <HAL_TIMEx_MasterConfigSynchronization>
 8004308:	4603      	mov	r3, r0
 800430a:	2b00      	cmp	r3, #0
 800430c:	d001      	beq.n	8004312 <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 800430e:	f000 f9dd 	bl	80046cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8004312:	bf00      	nop
 8004314:	3718      	adds	r7, #24
 8004316:	46bd      	mov	sp, r7
 8004318:	bd80      	pop	{r7, pc}
 800431a:	bf00      	nop
 800431c:	20000da4 	.word	0x20000da4
 8004320:	40000800 	.word	0x40000800

08004324 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8004324:	b580      	push	{r7, lr}
 8004326:	b08e      	sub	sp, #56	; 0x38
 8004328:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800432a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800432e:	2200      	movs	r2, #0
 8004330:	601a      	str	r2, [r3, #0]
 8004332:	605a      	str	r2, [r3, #4]
 8004334:	609a      	str	r2, [r3, #8]
 8004336:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004338:	f107 0320 	add.w	r3, r7, #32
 800433c:	2200      	movs	r2, #0
 800433e:	601a      	str	r2, [r3, #0]
 8004340:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004342:	1d3b      	adds	r3, r7, #4
 8004344:	2200      	movs	r2, #0
 8004346:	601a      	str	r2, [r3, #0]
 8004348:	605a      	str	r2, [r3, #4]
 800434a:	609a      	str	r2, [r3, #8]
 800434c:	60da      	str	r2, [r3, #12]
 800434e:	611a      	str	r2, [r3, #16]
 8004350:	615a      	str	r2, [r3, #20]
 8004352:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8004354:	4b32      	ldr	r3, [pc, #200]	; (8004420 <MX_TIM5_Init+0xfc>)
 8004356:	4a33      	ldr	r2, [pc, #204]	; (8004424 <MX_TIM5_Init+0x100>)
 8004358:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 800435a:	4b31      	ldr	r3, [pc, #196]	; (8004420 <MX_TIM5_Init+0xfc>)
 800435c:	2200      	movs	r2, #0
 800435e:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED2;
 8004360:	4b2f      	ldr	r3, [pc, #188]	; (8004420 <MX_TIM5_Init+0xfc>)
 8004362:	2240      	movs	r2, #64	; 0x40
 8004364:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 1024;
 8004366:	4b2e      	ldr	r3, [pc, #184]	; (8004420 <MX_TIM5_Init+0xfc>)
 8004368:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800436c:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800436e:	4b2c      	ldr	r3, [pc, #176]	; (8004420 <MX_TIM5_Init+0xfc>)
 8004370:	2200      	movs	r2, #0
 8004372:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004374:	4b2a      	ldr	r3, [pc, #168]	; (8004420 <MX_TIM5_Init+0xfc>)
 8004376:	2200      	movs	r2, #0
 8004378:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 800437a:	4829      	ldr	r0, [pc, #164]	; (8004420 <MX_TIM5_Init+0xfc>)
 800437c:	f006 f8e2 	bl	800a544 <HAL_TIM_Base_Init>
 8004380:	4603      	mov	r3, r0
 8004382:	2b00      	cmp	r3, #0
 8004384:	d001      	beq.n	800438a <MX_TIM5_Init+0x66>
  {
    Error_Handler();
 8004386:	f000 f9a1 	bl	80046cc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800438a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800438e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8004390:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004394:	4619      	mov	r1, r3
 8004396:	4822      	ldr	r0, [pc, #136]	; (8004420 <MX_TIM5_Init+0xfc>)
 8004398:	f006 fa80 	bl	800a89c <HAL_TIM_ConfigClockSource>
 800439c:	4603      	mov	r3, r0
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d001      	beq.n	80043a6 <MX_TIM5_Init+0x82>
  {
    Error_Handler();
 80043a2:	f000 f993 	bl	80046cc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 80043a6:	481e      	ldr	r0, [pc, #120]	; (8004420 <MX_TIM5_Init+0xfc>)
 80043a8:	f006 f93f 	bl	800a62a <HAL_TIM_PWM_Init>
 80043ac:	4603      	mov	r3, r0
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d001      	beq.n	80043b6 <MX_TIM5_Init+0x92>
  {
    Error_Handler();
 80043b2:	f000 f98b 	bl	80046cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80043b6:	2300      	movs	r3, #0
 80043b8:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80043ba:	2300      	movs	r3, #0
 80043bc:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80043be:	f107 0320 	add.w	r3, r7, #32
 80043c2:	4619      	mov	r1, r3
 80043c4:	4816      	ldr	r0, [pc, #88]	; (8004420 <MX_TIM5_Init+0xfc>)
 80043c6:	f006 fe31 	bl	800b02c <HAL_TIMEx_MasterConfigSynchronization>
 80043ca:	4603      	mov	r3, r0
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d001      	beq.n	80043d4 <MX_TIM5_Init+0xb0>
  {
    Error_Handler();
 80043d0:	f000 f97c 	bl	80046cc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 80043d4:	2370      	movs	r3, #112	; 0x70
 80043d6:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80043d8:	2300      	movs	r3, #0
 80043da:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80043dc:	2300      	movs	r3, #0
 80043de:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80043e0:	2300      	movs	r3, #0
 80043e2:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80043e4:	1d3b      	adds	r3, r7, #4
 80043e6:	2204      	movs	r2, #4
 80043e8:	4619      	mov	r1, r3
 80043ea:	480d      	ldr	r0, [pc, #52]	; (8004420 <MX_TIM5_Init+0xfc>)
 80043ec:	f006 f990 	bl	800a710 <HAL_TIM_PWM_ConfigChannel>
 80043f0:	4603      	mov	r3, r0
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d001      	beq.n	80043fa <MX_TIM5_Init+0xd6>
  {
    Error_Handler();
 80043f6:	f000 f969 	bl	80046cc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80043fa:	1d3b      	adds	r3, r7, #4
 80043fc:	220c      	movs	r2, #12
 80043fe:	4619      	mov	r1, r3
 8004400:	4807      	ldr	r0, [pc, #28]	; (8004420 <MX_TIM5_Init+0xfc>)
 8004402:	f006 f985 	bl	800a710 <HAL_TIM_PWM_ConfigChannel>
 8004406:	4603      	mov	r3, r0
 8004408:	2b00      	cmp	r3, #0
 800440a:	d001      	beq.n	8004410 <MX_TIM5_Init+0xec>
  {
    Error_Handler();
 800440c:	f000 f95e 	bl	80046cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8004410:	4803      	ldr	r0, [pc, #12]	; (8004420 <MX_TIM5_Init+0xfc>)
 8004412:	f000 fc15 	bl	8004c40 <HAL_TIM_MspPostInit>

}
 8004416:	bf00      	nop
 8004418:	3738      	adds	r7, #56	; 0x38
 800441a:	46bd      	mov	sp, r7
 800441c:	bd80      	pop	{r7, pc}
 800441e:	bf00      	nop
 8004420:	20000e78 	.word	0x20000e78
 8004424:	40000c00 	.word	0x40000c00

08004428 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8004428:	b580      	push	{r7, lr}
 800442a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800442c:	4b11      	ldr	r3, [pc, #68]	; (8004474 <MX_USART3_UART_Init+0x4c>)
 800442e:	4a12      	ldr	r2, [pc, #72]	; (8004478 <MX_USART3_UART_Init+0x50>)
 8004430:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8004432:	4b10      	ldr	r3, [pc, #64]	; (8004474 <MX_USART3_UART_Init+0x4c>)
 8004434:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8004438:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800443a:	4b0e      	ldr	r3, [pc, #56]	; (8004474 <MX_USART3_UART_Init+0x4c>)
 800443c:	2200      	movs	r2, #0
 800443e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8004440:	4b0c      	ldr	r3, [pc, #48]	; (8004474 <MX_USART3_UART_Init+0x4c>)
 8004442:	2200      	movs	r2, #0
 8004444:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8004446:	4b0b      	ldr	r3, [pc, #44]	; (8004474 <MX_USART3_UART_Init+0x4c>)
 8004448:	2200      	movs	r2, #0
 800444a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800444c:	4b09      	ldr	r3, [pc, #36]	; (8004474 <MX_USART3_UART_Init+0x4c>)
 800444e:	220c      	movs	r2, #12
 8004450:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004452:	4b08      	ldr	r3, [pc, #32]	; (8004474 <MX_USART3_UART_Init+0x4c>)
 8004454:	2200      	movs	r2, #0
 8004456:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8004458:	4b06      	ldr	r3, [pc, #24]	; (8004474 <MX_USART3_UART_Init+0x4c>)
 800445a:	2200      	movs	r2, #0
 800445c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800445e:	4805      	ldr	r0, [pc, #20]	; (8004474 <MX_USART3_UART_Init+0x4c>)
 8004460:	f006 fe60 	bl	800b124 <HAL_UART_Init>
 8004464:	4603      	mov	r3, r0
 8004466:	2b00      	cmp	r3, #0
 8004468:	d001      	beq.n	800446e <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800446a:	f000 f92f 	bl	80046cc <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800446e:	bf00      	nop
 8004470:	bd80      	pop	{r7, pc}
 8004472:	bf00      	nop
 8004474:	20000de4 	.word	0x20000de4
 8004478:	40004800 	.word	0x40004800

0800447c <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 800447c:	b580      	push	{r7, lr}
 800447e:	b082      	sub	sp, #8
 8004480:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8004482:	2300      	movs	r3, #0
 8004484:	607b      	str	r3, [r7, #4]
 8004486:	4b18      	ldr	r3, [pc, #96]	; (80044e8 <MX_DMA_Init+0x6c>)
 8004488:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800448a:	4a17      	ldr	r2, [pc, #92]	; (80044e8 <MX_DMA_Init+0x6c>)
 800448c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004490:	6313      	str	r3, [r2, #48]	; 0x30
 8004492:	4b15      	ldr	r3, [pc, #84]	; (80044e8 <MX_DMA_Init+0x6c>)
 8004494:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004496:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800449a:	607b      	str	r3, [r7, #4]
 800449c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 800449e:	2200      	movs	r2, #0
 80044a0:	2100      	movs	r1, #0
 80044a2:	2038      	movs	r0, #56	; 0x38
 80044a4:	f000 fea1 	bl	80051ea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80044a8:	2038      	movs	r0, #56	; 0x38
 80044aa:	f000 feba 	bl	8005222 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 80044ae:	2200      	movs	r2, #0
 80044b0:	2100      	movs	r1, #0
 80044b2:	203b      	movs	r0, #59	; 0x3b
 80044b4:	f000 fe99 	bl	80051ea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 80044b8:	203b      	movs	r0, #59	; 0x3b
 80044ba:	f000 feb2 	bl	8005222 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream5_IRQn, 0, 0);
 80044be:	2200      	movs	r2, #0
 80044c0:	2100      	movs	r1, #0
 80044c2:	2044      	movs	r0, #68	; 0x44
 80044c4:	f000 fe91 	bl	80051ea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream5_IRQn);
 80044c8:	2044      	movs	r0, #68	; 0x44
 80044ca:	f000 feaa 	bl	8005222 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 80044ce:	2200      	movs	r2, #0
 80044d0:	2100      	movs	r1, #0
 80044d2:	2045      	movs	r0, #69	; 0x45
 80044d4:	f000 fe89 	bl	80051ea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 80044d8:	2045      	movs	r0, #69	; 0x45
 80044da:	f000 fea2 	bl	8005222 <HAL_NVIC_EnableIRQ>

}
 80044de:	bf00      	nop
 80044e0:	3708      	adds	r7, #8
 80044e2:	46bd      	mov	sp, r7
 80044e4:	bd80      	pop	{r7, pc}
 80044e6:	bf00      	nop
 80044e8:	40023800 	.word	0x40023800

080044ec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80044ec:	b580      	push	{r7, lr}
 80044ee:	b08a      	sub	sp, #40	; 0x28
 80044f0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80044f2:	f107 0314 	add.w	r3, r7, #20
 80044f6:	2200      	movs	r2, #0
 80044f8:	601a      	str	r2, [r3, #0]
 80044fa:	605a      	str	r2, [r3, #4]
 80044fc:	609a      	str	r2, [r3, #8]
 80044fe:	60da      	str	r2, [r3, #12]
 8004500:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004502:	2300      	movs	r3, #0
 8004504:	613b      	str	r3, [r7, #16]
 8004506:	4b67      	ldr	r3, [pc, #412]	; (80046a4 <MX_GPIO_Init+0x1b8>)
 8004508:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800450a:	4a66      	ldr	r2, [pc, #408]	; (80046a4 <MX_GPIO_Init+0x1b8>)
 800450c:	f043 0304 	orr.w	r3, r3, #4
 8004510:	6313      	str	r3, [r2, #48]	; 0x30
 8004512:	4b64      	ldr	r3, [pc, #400]	; (80046a4 <MX_GPIO_Init+0x1b8>)
 8004514:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004516:	f003 0304 	and.w	r3, r3, #4
 800451a:	613b      	str	r3, [r7, #16]
 800451c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800451e:	2300      	movs	r3, #0
 8004520:	60fb      	str	r3, [r7, #12]
 8004522:	4b60      	ldr	r3, [pc, #384]	; (80046a4 <MX_GPIO_Init+0x1b8>)
 8004524:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004526:	4a5f      	ldr	r2, [pc, #380]	; (80046a4 <MX_GPIO_Init+0x1b8>)
 8004528:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800452c:	6313      	str	r3, [r2, #48]	; 0x30
 800452e:	4b5d      	ldr	r3, [pc, #372]	; (80046a4 <MX_GPIO_Init+0x1b8>)
 8004530:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004532:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004536:	60fb      	str	r3, [r7, #12]
 8004538:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800453a:	2300      	movs	r3, #0
 800453c:	60bb      	str	r3, [r7, #8]
 800453e:	4b59      	ldr	r3, [pc, #356]	; (80046a4 <MX_GPIO_Init+0x1b8>)
 8004540:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004542:	4a58      	ldr	r2, [pc, #352]	; (80046a4 <MX_GPIO_Init+0x1b8>)
 8004544:	f043 0301 	orr.w	r3, r3, #1
 8004548:	6313      	str	r3, [r2, #48]	; 0x30
 800454a:	4b56      	ldr	r3, [pc, #344]	; (80046a4 <MX_GPIO_Init+0x1b8>)
 800454c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800454e:	f003 0301 	and.w	r3, r3, #1
 8004552:	60bb      	str	r3, [r7, #8]
 8004554:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004556:	2300      	movs	r3, #0
 8004558:	607b      	str	r3, [r7, #4]
 800455a:	4b52      	ldr	r3, [pc, #328]	; (80046a4 <MX_GPIO_Init+0x1b8>)
 800455c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800455e:	4a51      	ldr	r2, [pc, #324]	; (80046a4 <MX_GPIO_Init+0x1b8>)
 8004560:	f043 0302 	orr.w	r3, r3, #2
 8004564:	6313      	str	r3, [r2, #48]	; 0x30
 8004566:	4b4f      	ldr	r3, [pc, #316]	; (80046a4 <MX_GPIO_Init+0x1b8>)
 8004568:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800456a:	f003 0302 	and.w	r3, r3, #2
 800456e:	607b      	str	r3, [r7, #4]
 8004570:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8004572:	2300      	movs	r3, #0
 8004574:	603b      	str	r3, [r7, #0]
 8004576:	4b4b      	ldr	r3, [pc, #300]	; (80046a4 <MX_GPIO_Init+0x1b8>)
 8004578:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800457a:	4a4a      	ldr	r2, [pc, #296]	; (80046a4 <MX_GPIO_Init+0x1b8>)
 800457c:	f043 0308 	orr.w	r3, r3, #8
 8004580:	6313      	str	r3, [r2, #48]	; 0x30
 8004582:	4b48      	ldr	r3, [pc, #288]	; (80046a4 <MX_GPIO_Init+0x1b8>)
 8004584:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004586:	f003 0308 	and.w	r3, r3, #8
 800458a:	603b      	str	r3, [r7, #0]
 800458c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, P1_Pin|P4_Pin|P2_Pin|P5_Pin 
 800458e:	2200      	movs	r2, #0
 8004590:	21ef      	movs	r1, #239	; 0xef
 8004592:	4845      	ldr	r0, [pc, #276]	; (80046a8 <MX_GPIO_Init+0x1bc>)
 8004594:	f001 fbae 	bl	8005cf4 <HAL_GPIO_WritePin>
                          |LR_RESET_Pin|LEDB_Pin|LEDA_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, PH_L_Pin|PH_R_Pin|P7_Pin, GPIO_PIN_RESET);
 8004598:	2200      	movs	r2, #0
 800459a:	2115      	movs	r1, #21
 800459c:	4843      	ldr	r0, [pc, #268]	; (80046ac <MX_GPIO_Init+0x1c0>)
 800459e:	f001 fba9 	bl	8005cf4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LEDD_Pin|LEDC_Pin|LR_NSS_Pin, GPIO_PIN_RESET);
 80045a2:	2200      	movs	r2, #0
 80045a4:	f44f 5148 	mov.w	r1, #12800	; 0x3200
 80045a8:	4841      	ldr	r0, [pc, #260]	; (80046b0 <MX_GPIO_Init+0x1c4>)
 80045aa:	f001 fba3 	bl	8005cf4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : P1_Pin P4_Pin P2_Pin P5_Pin 
                           LR_RESET_Pin LEDA_Pin */
  GPIO_InitStruct.Pin = P1_Pin|P4_Pin|P2_Pin|P5_Pin 
 80045ae:	23af      	movs	r3, #175	; 0xaf
 80045b0:	617b      	str	r3, [r7, #20]
                          |LR_RESET_Pin|LEDA_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80045b2:	2301      	movs	r3, #1
 80045b4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80045b6:	2300      	movs	r3, #0
 80045b8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80045ba:	2300      	movs	r3, #0
 80045bc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80045be:	f107 0314 	add.w	r3, r7, #20
 80045c2:	4619      	mov	r1, r3
 80045c4:	4838      	ldr	r0, [pc, #224]	; (80046a8 <MX_GPIO_Init+0x1bc>)
 80045c6:	f001 f9e3 	bl	8005990 <HAL_GPIO_Init>

  /*Configure GPIO pins : PH_L_Pin PH_R_Pin P7_Pin */
  GPIO_InitStruct.Pin = PH_L_Pin|PH_R_Pin|P7_Pin;
 80045ca:	2315      	movs	r3, #21
 80045cc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80045ce:	2301      	movs	r3, #1
 80045d0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80045d2:	2300      	movs	r3, #0
 80045d4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80045d6:	2300      	movs	r3, #0
 80045d8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80045da:	f107 0314 	add.w	r3, r7, #20
 80045de:	4619      	mov	r1, r3
 80045e0:	4832      	ldr	r0, [pc, #200]	; (80046ac <MX_GPIO_Init+0x1c0>)
 80045e2:	f001 f9d5 	bl	8005990 <HAL_GPIO_Init>

  /*Configure GPIO pin : LR_DIO0_Pin */
  GPIO_InitStruct.Pin = LR_DIO0_Pin;
 80045e6:	2340      	movs	r3, #64	; 0x40
 80045e8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80045ea:	4b32      	ldr	r3, [pc, #200]	; (80046b4 <MX_GPIO_Init+0x1c8>)
 80045ec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80045ee:	2302      	movs	r3, #2
 80045f0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LR_DIO0_GPIO_Port, &GPIO_InitStruct);
 80045f2:	f107 0314 	add.w	r3, r7, #20
 80045f6:	4619      	mov	r1, r3
 80045f8:	482c      	ldr	r0, [pc, #176]	; (80046ac <MX_GPIO_Init+0x1c0>)
 80045fa:	f001 f9c9 	bl	8005990 <HAL_GPIO_Init>

  /*Configure GPIO pins : LR_TIM_Pin SDIO_SW_Pin */
  GPIO_InitStruct.Pin = LR_TIM_Pin|SDIO_SW_Pin;
 80045fe:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8004602:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004604:	2300      	movs	r3, #0
 8004606:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004608:	2300      	movs	r3, #0
 800460a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800460c:	f107 0314 	add.w	r3, r7, #20
 8004610:	4619      	mov	r1, r3
 8004612:	4826      	ldr	r0, [pc, #152]	; (80046ac <MX_GPIO_Init+0x1c0>)
 8004614:	f001 f9bc 	bl	8005990 <HAL_GPIO_Init>

  /*Configure GPIO pins : LEDD_Pin LEDC_Pin */
  GPIO_InitStruct.Pin = LEDD_Pin|LEDC_Pin;
 8004618:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800461c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800461e:	2301      	movs	r3, #1
 8004620:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8004622:	2302      	movs	r3, #2
 8004624:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004626:	2300      	movs	r3, #0
 8004628:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800462a:	f107 0314 	add.w	r3, r7, #20
 800462e:	4619      	mov	r1, r3
 8004630:	481f      	ldr	r0, [pc, #124]	; (80046b0 <MX_GPIO_Init+0x1c4>)
 8004632:	f001 f9ad 	bl	8005990 <HAL_GPIO_Init>

  /*Configure GPIO pin : LEDB_Pin */
  GPIO_InitStruct.Pin = LEDB_Pin;
 8004636:	2340      	movs	r3, #64	; 0x40
 8004638:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800463a:	2301      	movs	r3, #1
 800463c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800463e:	2302      	movs	r3, #2
 8004640:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004642:	2300      	movs	r3, #0
 8004644:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LEDB_GPIO_Port, &GPIO_InitStruct);
 8004646:	f107 0314 	add.w	r3, r7, #20
 800464a:	4619      	mov	r1, r3
 800464c:	4816      	ldr	r0, [pc, #88]	; (80046a8 <MX_GPIO_Init+0x1bc>)
 800464e:	f001 f99f 	bl	8005990 <HAL_GPIO_Init>

  /*Configure GPIO pin : BTN_USR_Pin */
  GPIO_InitStruct.Pin = BTN_USR_Pin;
 8004652:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004656:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004658:	2300      	movs	r3, #0
 800465a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800465c:	2301      	movs	r3, #1
 800465e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BTN_USR_GPIO_Port, &GPIO_InitStruct);
 8004660:	f107 0314 	add.w	r3, r7, #20
 8004664:	4619      	mov	r1, r3
 8004666:	4811      	ldr	r0, [pc, #68]	; (80046ac <MX_GPIO_Init+0x1c0>)
 8004668:	f001 f992 	bl	8005990 <HAL_GPIO_Init>

  /*Configure GPIO pin : LR_NSS_Pin */
  GPIO_InitStruct.Pin = LR_NSS_Pin;
 800466c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004670:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004672:	2301      	movs	r3, #1
 8004674:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004676:	2300      	movs	r3, #0
 8004678:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800467a:	2300      	movs	r3, #0
 800467c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LR_NSS_GPIO_Port, &GPIO_InitStruct);
 800467e:	f107 0314 	add.w	r3, r7, #20
 8004682:	4619      	mov	r1, r3
 8004684:	480a      	ldr	r0, [pc, #40]	; (80046b0 <MX_GPIO_Init+0x1c4>)
 8004686:	f001 f983 	bl	8005990 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 800468a:	2200      	movs	r2, #0
 800468c:	2100      	movs	r1, #0
 800468e:	2017      	movs	r0, #23
 8004690:	f000 fdab 	bl	80051ea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8004694:	2017      	movs	r0, #23
 8004696:	f000 fdc4 	bl	8005222 <HAL_NVIC_EnableIRQ>

}
 800469a:	bf00      	nop
 800469c:	3728      	adds	r7, #40	; 0x28
 800469e:	46bd      	mov	sp, r7
 80046a0:	bd80      	pop	{r7, pc}
 80046a2:	bf00      	nop
 80046a4:	40023800 	.word	0x40023800
 80046a8:	40020800 	.word	0x40020800
 80046ac:	40020000 	.word	0x40020000
 80046b0:	40020400 	.word	0x40020400
 80046b4:	10110000 	.word	0x10110000

080046b8 <Get_I2C1_Instance>:

/* USER CODE BEGIN 4 */

I2C_HandleTypeDef* Get_I2C1_Instance(void) { return &hi2c1; }
 80046b8:	b480      	push	{r7}
 80046ba:	af00      	add	r7, sp, #0
 80046bc:	4b02      	ldr	r3, [pc, #8]	; (80046c8 <Get_I2C1_Instance+0x10>)
 80046be:	4618      	mov	r0, r3
 80046c0:	46bd      	mov	sp, r7
 80046c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c6:	4770      	bx	lr
 80046c8:	20000e24 	.word	0x20000e24

080046cc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80046cc:	b480      	push	{r7}
 80046ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80046d0:	bf00      	nop
 80046d2:	46bd      	mov	sp, r7
 80046d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d8:	4770      	bx	lr
	...

080046dc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80046dc:	b480      	push	{r7}
 80046de:	b083      	sub	sp, #12
 80046e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80046e2:	2300      	movs	r3, #0
 80046e4:	607b      	str	r3, [r7, #4]
 80046e6:	4b10      	ldr	r3, [pc, #64]	; (8004728 <HAL_MspInit+0x4c>)
 80046e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046ea:	4a0f      	ldr	r2, [pc, #60]	; (8004728 <HAL_MspInit+0x4c>)
 80046ec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80046f0:	6453      	str	r3, [r2, #68]	; 0x44
 80046f2:	4b0d      	ldr	r3, [pc, #52]	; (8004728 <HAL_MspInit+0x4c>)
 80046f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80046fa:	607b      	str	r3, [r7, #4]
 80046fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80046fe:	2300      	movs	r3, #0
 8004700:	603b      	str	r3, [r7, #0]
 8004702:	4b09      	ldr	r3, [pc, #36]	; (8004728 <HAL_MspInit+0x4c>)
 8004704:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004706:	4a08      	ldr	r2, [pc, #32]	; (8004728 <HAL_MspInit+0x4c>)
 8004708:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800470c:	6413      	str	r3, [r2, #64]	; 0x40
 800470e:	4b06      	ldr	r3, [pc, #24]	; (8004728 <HAL_MspInit+0x4c>)
 8004710:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004712:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004716:	603b      	str	r3, [r7, #0]
 8004718:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800471a:	bf00      	nop
 800471c:	370c      	adds	r7, #12
 800471e:	46bd      	mov	sp, r7
 8004720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004724:	4770      	bx	lr
 8004726:	bf00      	nop
 8004728:	40023800 	.word	0x40023800

0800472c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800472c:	b580      	push	{r7, lr}
 800472e:	b08a      	sub	sp, #40	; 0x28
 8004730:	af00      	add	r7, sp, #0
 8004732:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004734:	f107 0314 	add.w	r3, r7, #20
 8004738:	2200      	movs	r2, #0
 800473a:	601a      	str	r2, [r3, #0]
 800473c:	605a      	str	r2, [r3, #4]
 800473e:	609a      	str	r2, [r3, #8]
 8004740:	60da      	str	r2, [r3, #12]
 8004742:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	4a19      	ldr	r2, [pc, #100]	; (80047b0 <HAL_I2C_MspInit+0x84>)
 800474a:	4293      	cmp	r3, r2
 800474c:	d12b      	bne.n	80047a6 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800474e:	2300      	movs	r3, #0
 8004750:	613b      	str	r3, [r7, #16]
 8004752:	4b18      	ldr	r3, [pc, #96]	; (80047b4 <HAL_I2C_MspInit+0x88>)
 8004754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004756:	4a17      	ldr	r2, [pc, #92]	; (80047b4 <HAL_I2C_MspInit+0x88>)
 8004758:	f043 0302 	orr.w	r3, r3, #2
 800475c:	6313      	str	r3, [r2, #48]	; 0x30
 800475e:	4b15      	ldr	r3, [pc, #84]	; (80047b4 <HAL_I2C_MspInit+0x88>)
 8004760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004762:	f003 0302 	and.w	r3, r3, #2
 8004766:	613b      	str	r3, [r7, #16]
 8004768:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = SCL_Pin|SDA_Pin;
 800476a:	23c0      	movs	r3, #192	; 0xc0
 800476c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800476e:	2312      	movs	r3, #18
 8004770:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004772:	2300      	movs	r3, #0
 8004774:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004776:	2303      	movs	r3, #3
 8004778:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800477a:	2304      	movs	r3, #4
 800477c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800477e:	f107 0314 	add.w	r3, r7, #20
 8004782:	4619      	mov	r1, r3
 8004784:	480c      	ldr	r0, [pc, #48]	; (80047b8 <HAL_I2C_MspInit+0x8c>)
 8004786:	f001 f903 	bl	8005990 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800478a:	2300      	movs	r3, #0
 800478c:	60fb      	str	r3, [r7, #12]
 800478e:	4b09      	ldr	r3, [pc, #36]	; (80047b4 <HAL_I2C_MspInit+0x88>)
 8004790:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004792:	4a08      	ldr	r2, [pc, #32]	; (80047b4 <HAL_I2C_MspInit+0x88>)
 8004794:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004798:	6413      	str	r3, [r2, #64]	; 0x40
 800479a:	4b06      	ldr	r3, [pc, #24]	; (80047b4 <HAL_I2C_MspInit+0x88>)
 800479c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800479e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80047a2:	60fb      	str	r3, [r7, #12]
 80047a4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80047a6:	bf00      	nop
 80047a8:	3728      	adds	r7, #40	; 0x28
 80047aa:	46bd      	mov	sp, r7
 80047ac:	bd80      	pop	{r7, pc}
 80047ae:	bf00      	nop
 80047b0:	40005400 	.word	0x40005400
 80047b4:	40023800 	.word	0x40023800
 80047b8:	40020400 	.word	0x40020400

080047bc <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80047bc:	b480      	push	{r7}
 80047be:	b083      	sub	sp, #12
 80047c0:	af00      	add	r7, sp, #0
 80047c2:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	4a05      	ldr	r2, [pc, #20]	; (80047e0 <HAL_RTC_MspInit+0x24>)
 80047ca:	4293      	cmp	r3, r2
 80047cc:	d102      	bne.n	80047d4 <HAL_RTC_MspInit+0x18>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80047ce:	4b05      	ldr	r3, [pc, #20]	; (80047e4 <HAL_RTC_MspInit+0x28>)
 80047d0:	2201      	movs	r2, #1
 80047d2:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80047d4:	bf00      	nop
 80047d6:	370c      	adds	r7, #12
 80047d8:	46bd      	mov	sp, r7
 80047da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047de:	4770      	bx	lr
 80047e0:	40002800 	.word	0x40002800
 80047e4:	42470e3c 	.word	0x42470e3c

080047e8 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 80047e8:	b580      	push	{r7, lr}
 80047ea:	b08a      	sub	sp, #40	; 0x28
 80047ec:	af00      	add	r7, sp, #0
 80047ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80047f0:	f107 0314 	add.w	r3, r7, #20
 80047f4:	2200      	movs	r2, #0
 80047f6:	601a      	str	r2, [r3, #0]
 80047f8:	605a      	str	r2, [r3, #4]
 80047fa:	609a      	str	r2, [r3, #8]
 80047fc:	60da      	str	r2, [r3, #12]
 80047fe:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	4a70      	ldr	r2, [pc, #448]	; (80049c8 <HAL_SD_MspInit+0x1e0>)
 8004806:	4293      	cmp	r3, r2
 8004808:	f040 80da 	bne.w	80049c0 <HAL_SD_MspInit+0x1d8>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 800480c:	2300      	movs	r3, #0
 800480e:	613b      	str	r3, [r7, #16]
 8004810:	4b6e      	ldr	r3, [pc, #440]	; (80049cc <HAL_SD_MspInit+0x1e4>)
 8004812:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004814:	4a6d      	ldr	r2, [pc, #436]	; (80049cc <HAL_SD_MspInit+0x1e4>)
 8004816:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800481a:	6453      	str	r3, [r2, #68]	; 0x44
 800481c:	4b6b      	ldr	r3, [pc, #428]	; (80049cc <HAL_SD_MspInit+0x1e4>)
 800481e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004820:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004824:	613b      	str	r3, [r7, #16]
 8004826:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004828:	2300      	movs	r3, #0
 800482a:	60fb      	str	r3, [r7, #12]
 800482c:	4b67      	ldr	r3, [pc, #412]	; (80049cc <HAL_SD_MspInit+0x1e4>)
 800482e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004830:	4a66      	ldr	r2, [pc, #408]	; (80049cc <HAL_SD_MspInit+0x1e4>)
 8004832:	f043 0304 	orr.w	r3, r3, #4
 8004836:	6313      	str	r3, [r2, #48]	; 0x30
 8004838:	4b64      	ldr	r3, [pc, #400]	; (80049cc <HAL_SD_MspInit+0x1e4>)
 800483a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800483c:	f003 0304 	and.w	r3, r3, #4
 8004840:	60fb      	str	r3, [r7, #12]
 8004842:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8004844:	2300      	movs	r3, #0
 8004846:	60bb      	str	r3, [r7, #8]
 8004848:	4b60      	ldr	r3, [pc, #384]	; (80049cc <HAL_SD_MspInit+0x1e4>)
 800484a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800484c:	4a5f      	ldr	r2, [pc, #380]	; (80049cc <HAL_SD_MspInit+0x1e4>)
 800484e:	f043 0308 	orr.w	r3, r3, #8
 8004852:	6313      	str	r3, [r2, #48]	; 0x30
 8004854:	4b5d      	ldr	r3, [pc, #372]	; (80049cc <HAL_SD_MspInit+0x1e4>)
 8004856:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004858:	f003 0308 	and.w	r3, r3, #8
 800485c:	60bb      	str	r3, [r7, #8]
 800485e:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDIO_D2
    PC11     ------> SDIO_D3
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8004860:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8004864:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004866:	2302      	movs	r3, #2
 8004868:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800486a:	2301      	movs	r3, #1
 800486c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800486e:	2303      	movs	r3, #3
 8004870:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8004872:	230c      	movs	r3, #12
 8004874:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004876:	f107 0314 	add.w	r3, r7, #20
 800487a:	4619      	mov	r1, r3
 800487c:	4854      	ldr	r0, [pc, #336]	; (80049d0 <HAL_SD_MspInit+0x1e8>)
 800487e:	f001 f887 	bl	8005990 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8004882:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8004886:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004888:	2302      	movs	r3, #2
 800488a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800488c:	2300      	movs	r3, #0
 800488e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004890:	2303      	movs	r3, #3
 8004892:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8004894:	230c      	movs	r3, #12
 8004896:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004898:	f107 0314 	add.w	r3, r7, #20
 800489c:	4619      	mov	r1, r3
 800489e:	484c      	ldr	r0, [pc, #304]	; (80049d0 <HAL_SD_MspInit+0x1e8>)
 80048a0:	f001 f876 	bl	8005990 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80048a4:	2304      	movs	r3, #4
 80048a6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80048a8:	2302      	movs	r3, #2
 80048aa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80048ac:	2301      	movs	r3, #1
 80048ae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80048b0:	2303      	movs	r3, #3
 80048b2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 80048b4:	230c      	movs	r3, #12
 80048b6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80048b8:	f107 0314 	add.w	r3, r7, #20
 80048bc:	4619      	mov	r1, r3
 80048be:	4845      	ldr	r0, [pc, #276]	; (80049d4 <HAL_SD_MspInit+0x1ec>)
 80048c0:	f001 f866 	bl	8005990 <HAL_GPIO_Init>

    /* SDIO DMA Init */
    /* SDIO_RX Init */
    hdma_sdio_rx.Instance = DMA2_Stream3;
 80048c4:	4b44      	ldr	r3, [pc, #272]	; (80049d8 <HAL_SD_MspInit+0x1f0>)
 80048c6:	4a45      	ldr	r2, [pc, #276]	; (80049dc <HAL_SD_MspInit+0x1f4>)
 80048c8:	601a      	str	r2, [r3, #0]
    hdma_sdio_rx.Init.Channel = DMA_CHANNEL_4;
 80048ca:	4b43      	ldr	r3, [pc, #268]	; (80049d8 <HAL_SD_MspInit+0x1f0>)
 80048cc:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80048d0:	605a      	str	r2, [r3, #4]
    hdma_sdio_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80048d2:	4b41      	ldr	r3, [pc, #260]	; (80049d8 <HAL_SD_MspInit+0x1f0>)
 80048d4:	2200      	movs	r2, #0
 80048d6:	609a      	str	r2, [r3, #8]
    hdma_sdio_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80048d8:	4b3f      	ldr	r3, [pc, #252]	; (80049d8 <HAL_SD_MspInit+0x1f0>)
 80048da:	2200      	movs	r2, #0
 80048dc:	60da      	str	r2, [r3, #12]
    hdma_sdio_rx.Init.MemInc = DMA_MINC_ENABLE;
 80048de:	4b3e      	ldr	r3, [pc, #248]	; (80049d8 <HAL_SD_MspInit+0x1f0>)
 80048e0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80048e4:	611a      	str	r2, [r3, #16]
    hdma_sdio_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80048e6:	4b3c      	ldr	r3, [pc, #240]	; (80049d8 <HAL_SD_MspInit+0x1f0>)
 80048e8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80048ec:	615a      	str	r2, [r3, #20]
    hdma_sdio_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80048ee:	4b3a      	ldr	r3, [pc, #232]	; (80049d8 <HAL_SD_MspInit+0x1f0>)
 80048f0:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80048f4:	619a      	str	r2, [r3, #24]
    hdma_sdio_rx.Init.Mode = DMA_PFCTRL;
 80048f6:	4b38      	ldr	r3, [pc, #224]	; (80049d8 <HAL_SD_MspInit+0x1f0>)
 80048f8:	2220      	movs	r2, #32
 80048fa:	61da      	str	r2, [r3, #28]
    hdma_sdio_rx.Init.Priority = DMA_PRIORITY_LOW;
 80048fc:	4b36      	ldr	r3, [pc, #216]	; (80049d8 <HAL_SD_MspInit+0x1f0>)
 80048fe:	2200      	movs	r2, #0
 8004900:	621a      	str	r2, [r3, #32]
    hdma_sdio_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8004902:	4b35      	ldr	r3, [pc, #212]	; (80049d8 <HAL_SD_MspInit+0x1f0>)
 8004904:	2204      	movs	r2, #4
 8004906:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8004908:	4b33      	ldr	r3, [pc, #204]	; (80049d8 <HAL_SD_MspInit+0x1f0>)
 800490a:	2203      	movs	r2, #3
 800490c:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_rx.Init.MemBurst = DMA_MBURST_INC4;
 800490e:	4b32      	ldr	r3, [pc, #200]	; (80049d8 <HAL_SD_MspInit+0x1f0>)
 8004910:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8004914:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 8004916:	4b30      	ldr	r3, [pc, #192]	; (80049d8 <HAL_SD_MspInit+0x1f0>)
 8004918:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800491c:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_rx) != HAL_OK)
 800491e:	482e      	ldr	r0, [pc, #184]	; (80049d8 <HAL_SD_MspInit+0x1f0>)
 8004920:	f000 fc9a 	bl	8005258 <HAL_DMA_Init>
 8004924:	4603      	mov	r3, r0
 8004926:	2b00      	cmp	r3, #0
 8004928:	d001      	beq.n	800492e <HAL_SD_MspInit+0x146>
    {
      Error_Handler();
 800492a:	f7ff fecf 	bl	80046cc <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmarx,hdma_sdio_rx);
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	4a29      	ldr	r2, [pc, #164]	; (80049d8 <HAL_SD_MspInit+0x1f0>)
 8004932:	641a      	str	r2, [r3, #64]	; 0x40
 8004934:	4a28      	ldr	r2, [pc, #160]	; (80049d8 <HAL_SD_MspInit+0x1f0>)
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO_TX Init */
    hdma_sdio_tx.Instance = DMA2_Stream6;
 800493a:	4b29      	ldr	r3, [pc, #164]	; (80049e0 <HAL_SD_MspInit+0x1f8>)
 800493c:	4a29      	ldr	r2, [pc, #164]	; (80049e4 <HAL_SD_MspInit+0x1fc>)
 800493e:	601a      	str	r2, [r3, #0]
    hdma_sdio_tx.Init.Channel = DMA_CHANNEL_4;
 8004940:	4b27      	ldr	r3, [pc, #156]	; (80049e0 <HAL_SD_MspInit+0x1f8>)
 8004942:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004946:	605a      	str	r2, [r3, #4]
    hdma_sdio_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004948:	4b25      	ldr	r3, [pc, #148]	; (80049e0 <HAL_SD_MspInit+0x1f8>)
 800494a:	2240      	movs	r2, #64	; 0x40
 800494c:	609a      	str	r2, [r3, #8]
    hdma_sdio_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800494e:	4b24      	ldr	r3, [pc, #144]	; (80049e0 <HAL_SD_MspInit+0x1f8>)
 8004950:	2200      	movs	r2, #0
 8004952:	60da      	str	r2, [r3, #12]
    hdma_sdio_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004954:	4b22      	ldr	r3, [pc, #136]	; (80049e0 <HAL_SD_MspInit+0x1f8>)
 8004956:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800495a:	611a      	str	r2, [r3, #16]
    hdma_sdio_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800495c:	4b20      	ldr	r3, [pc, #128]	; (80049e0 <HAL_SD_MspInit+0x1f8>)
 800495e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004962:	615a      	str	r2, [r3, #20]
    hdma_sdio_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8004964:	4b1e      	ldr	r3, [pc, #120]	; (80049e0 <HAL_SD_MspInit+0x1f8>)
 8004966:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800496a:	619a      	str	r2, [r3, #24]
    hdma_sdio_tx.Init.Mode = DMA_PFCTRL;
 800496c:	4b1c      	ldr	r3, [pc, #112]	; (80049e0 <HAL_SD_MspInit+0x1f8>)
 800496e:	2220      	movs	r2, #32
 8004970:	61da      	str	r2, [r3, #28]
    hdma_sdio_tx.Init.Priority = DMA_PRIORITY_LOW;
 8004972:	4b1b      	ldr	r3, [pc, #108]	; (80049e0 <HAL_SD_MspInit+0x1f8>)
 8004974:	2200      	movs	r2, #0
 8004976:	621a      	str	r2, [r3, #32]
    hdma_sdio_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8004978:	4b19      	ldr	r3, [pc, #100]	; (80049e0 <HAL_SD_MspInit+0x1f8>)
 800497a:	2204      	movs	r2, #4
 800497c:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 800497e:	4b18      	ldr	r3, [pc, #96]	; (80049e0 <HAL_SD_MspInit+0x1f8>)
 8004980:	2203      	movs	r2, #3
 8004982:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_tx.Init.MemBurst = DMA_MBURST_INC4;
 8004984:	4b16      	ldr	r3, [pc, #88]	; (80049e0 <HAL_SD_MspInit+0x1f8>)
 8004986:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800498a:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 800498c:	4b14      	ldr	r3, [pc, #80]	; (80049e0 <HAL_SD_MspInit+0x1f8>)
 800498e:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8004992:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_tx) != HAL_OK)
 8004994:	4812      	ldr	r0, [pc, #72]	; (80049e0 <HAL_SD_MspInit+0x1f8>)
 8004996:	f000 fc5f 	bl	8005258 <HAL_DMA_Init>
 800499a:	4603      	mov	r3, r0
 800499c:	2b00      	cmp	r3, #0
 800499e:	d001      	beq.n	80049a4 <HAL_SD_MspInit+0x1bc>
    {
      Error_Handler();
 80049a0:	f7ff fe94 	bl	80046cc <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmatx,hdma_sdio_tx);
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	4a0e      	ldr	r2, [pc, #56]	; (80049e0 <HAL_SD_MspInit+0x1f8>)
 80049a8:	63da      	str	r2, [r3, #60]	; 0x3c
 80049aa:	4a0d      	ldr	r2, [pc, #52]	; (80049e0 <HAL_SD_MspInit+0x1f8>)
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO interrupt Init */
    HAL_NVIC_SetPriority(SDIO_IRQn, 0, 0);
 80049b0:	2200      	movs	r2, #0
 80049b2:	2100      	movs	r1, #0
 80049b4:	2031      	movs	r0, #49	; 0x31
 80049b6:	f000 fc18 	bl	80051ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDIO_IRQn);
 80049ba:	2031      	movs	r0, #49	; 0x31
 80049bc:	f000 fc31 	bl	8005222 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 80049c0:	bf00      	nop
 80049c2:	3728      	adds	r7, #40	; 0x28
 80049c4:	46bd      	mov	sp, r7
 80049c6:	bd80      	pop	{r7, pc}
 80049c8:	40012c00 	.word	0x40012c00
 80049cc:	40023800 	.word	0x40023800
 80049d0:	40020800 	.word	0x40020800
 80049d4:	40020c00 	.word	0x40020c00
 80049d8:	20000d44 	.word	0x20000d44
 80049dc:	40026458 	.word	0x40026458
 80049e0:	20000f18 	.word	0x20000f18
 80049e4:	400264a0 	.word	0x400264a0

080049e8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80049e8:	b580      	push	{r7, lr}
 80049ea:	b08a      	sub	sp, #40	; 0x28
 80049ec:	af00      	add	r7, sp, #0
 80049ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80049f0:	f107 0314 	add.w	r3, r7, #20
 80049f4:	2200      	movs	r2, #0
 80049f6:	601a      	str	r2, [r3, #0]
 80049f8:	605a      	str	r2, [r3, #4]
 80049fa:	609a      	str	r2, [r3, #8]
 80049fc:	60da      	str	r2, [r3, #12]
 80049fe:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	4a4b      	ldr	r2, [pc, #300]	; (8004b34 <HAL_SPI_MspInit+0x14c>)
 8004a06:	4293      	cmp	r3, r2
 8004a08:	f040 8090 	bne.w	8004b2c <HAL_SPI_MspInit+0x144>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8004a0c:	2300      	movs	r3, #0
 8004a0e:	613b      	str	r3, [r7, #16]
 8004a10:	4b49      	ldr	r3, [pc, #292]	; (8004b38 <HAL_SPI_MspInit+0x150>)
 8004a12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a14:	4a48      	ldr	r2, [pc, #288]	; (8004b38 <HAL_SPI_MspInit+0x150>)
 8004a16:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004a1a:	6453      	str	r3, [r2, #68]	; 0x44
 8004a1c:	4b46      	ldr	r3, [pc, #280]	; (8004b38 <HAL_SPI_MspInit+0x150>)
 8004a1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a20:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004a24:	613b      	str	r3, [r7, #16]
 8004a26:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004a28:	2300      	movs	r3, #0
 8004a2a:	60fb      	str	r3, [r7, #12]
 8004a2c:	4b42      	ldr	r3, [pc, #264]	; (8004b38 <HAL_SPI_MspInit+0x150>)
 8004a2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a30:	4a41      	ldr	r2, [pc, #260]	; (8004b38 <HAL_SPI_MspInit+0x150>)
 8004a32:	f043 0302 	orr.w	r3, r3, #2
 8004a36:	6313      	str	r3, [r2, #48]	; 0x30
 8004a38:	4b3f      	ldr	r3, [pc, #252]	; (8004b38 <HAL_SPI_MspInit+0x150>)
 8004a3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a3c:	f003 0302 	and.w	r3, r3, #2
 8004a40:	60fb      	str	r3, [r7, #12]
 8004a42:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration    
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = LR_SCK_Pin|LR_MISO_Pin|LR_MOSI_Pin;
 8004a44:	2338      	movs	r3, #56	; 0x38
 8004a46:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004a48:	2302      	movs	r3, #2
 8004a4a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a4c:	2300      	movs	r3, #0
 8004a4e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004a50:	2303      	movs	r3, #3
 8004a52:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8004a54:	2305      	movs	r3, #5
 8004a56:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004a58:	f107 0314 	add.w	r3, r7, #20
 8004a5c:	4619      	mov	r1, r3
 8004a5e:	4837      	ldr	r0, [pc, #220]	; (8004b3c <HAL_SPI_MspInit+0x154>)
 8004a60:	f000 ff96 	bl	8005990 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA2_Stream0;
 8004a64:	4b36      	ldr	r3, [pc, #216]	; (8004b40 <HAL_SPI_MspInit+0x158>)
 8004a66:	4a37      	ldr	r2, [pc, #220]	; (8004b44 <HAL_SPI_MspInit+0x15c>)
 8004a68:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Channel = DMA_CHANNEL_3;
 8004a6a:	4b35      	ldr	r3, [pc, #212]	; (8004b40 <HAL_SPI_MspInit+0x158>)
 8004a6c:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8004a70:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004a72:	4b33      	ldr	r3, [pc, #204]	; (8004b40 <HAL_SPI_MspInit+0x158>)
 8004a74:	2200      	movs	r2, #0
 8004a76:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004a78:	4b31      	ldr	r3, [pc, #196]	; (8004b40 <HAL_SPI_MspInit+0x158>)
 8004a7a:	2200      	movs	r2, #0
 8004a7c:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004a7e:	4b30      	ldr	r3, [pc, #192]	; (8004b40 <HAL_SPI_MspInit+0x158>)
 8004a80:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004a84:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004a86:	4b2e      	ldr	r3, [pc, #184]	; (8004b40 <HAL_SPI_MspInit+0x158>)
 8004a88:	2200      	movs	r2, #0
 8004a8a:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004a8c:	4b2c      	ldr	r3, [pc, #176]	; (8004b40 <HAL_SPI_MspInit+0x158>)
 8004a8e:	2200      	movs	r2, #0
 8004a90:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 8004a92:	4b2b      	ldr	r3, [pc, #172]	; (8004b40 <HAL_SPI_MspInit+0x158>)
 8004a94:	2200      	movs	r2, #0
 8004a96:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8004a98:	4b29      	ldr	r3, [pc, #164]	; (8004b40 <HAL_SPI_MspInit+0x158>)
 8004a9a:	2200      	movs	r2, #0
 8004a9c:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004a9e:	4b28      	ldr	r3, [pc, #160]	; (8004b40 <HAL_SPI_MspInit+0x158>)
 8004aa0:	2200      	movs	r2, #0
 8004aa2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8004aa4:	4826      	ldr	r0, [pc, #152]	; (8004b40 <HAL_SPI_MspInit+0x158>)
 8004aa6:	f000 fbd7 	bl	8005258 <HAL_DMA_Init>
 8004aaa:	4603      	mov	r3, r0
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d001      	beq.n	8004ab4 <HAL_SPI_MspInit+0xcc>
    {
      Error_Handler();
 8004ab0:	f7ff fe0c 	bl	80046cc <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi1_rx);
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	4a22      	ldr	r2, [pc, #136]	; (8004b40 <HAL_SPI_MspInit+0x158>)
 8004ab8:	64da      	str	r2, [r3, #76]	; 0x4c
 8004aba:	4a21      	ldr	r2, [pc, #132]	; (8004b40 <HAL_SPI_MspInit+0x158>)
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream5;
 8004ac0:	4b21      	ldr	r3, [pc, #132]	; (8004b48 <HAL_SPI_MspInit+0x160>)
 8004ac2:	4a22      	ldr	r2, [pc, #136]	; (8004b4c <HAL_SPI_MspInit+0x164>)
 8004ac4:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 8004ac6:	4b20      	ldr	r3, [pc, #128]	; (8004b48 <HAL_SPI_MspInit+0x160>)
 8004ac8:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8004acc:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004ace:	4b1e      	ldr	r3, [pc, #120]	; (8004b48 <HAL_SPI_MspInit+0x160>)
 8004ad0:	2240      	movs	r2, #64	; 0x40
 8004ad2:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004ad4:	4b1c      	ldr	r3, [pc, #112]	; (8004b48 <HAL_SPI_MspInit+0x160>)
 8004ad6:	2200      	movs	r2, #0
 8004ad8:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004ada:	4b1b      	ldr	r3, [pc, #108]	; (8004b48 <HAL_SPI_MspInit+0x160>)
 8004adc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004ae0:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004ae2:	4b19      	ldr	r3, [pc, #100]	; (8004b48 <HAL_SPI_MspInit+0x160>)
 8004ae4:	2200      	movs	r2, #0
 8004ae6:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004ae8:	4b17      	ldr	r3, [pc, #92]	; (8004b48 <HAL_SPI_MspInit+0x160>)
 8004aea:	2200      	movs	r2, #0
 8004aec:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8004aee:	4b16      	ldr	r3, [pc, #88]	; (8004b48 <HAL_SPI_MspInit+0x160>)
 8004af0:	2200      	movs	r2, #0
 8004af2:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8004af4:	4b14      	ldr	r3, [pc, #80]	; (8004b48 <HAL_SPI_MspInit+0x160>)
 8004af6:	2200      	movs	r2, #0
 8004af8:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004afa:	4b13      	ldr	r3, [pc, #76]	; (8004b48 <HAL_SPI_MspInit+0x160>)
 8004afc:	2200      	movs	r2, #0
 8004afe:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8004b00:	4811      	ldr	r0, [pc, #68]	; (8004b48 <HAL_SPI_MspInit+0x160>)
 8004b02:	f000 fba9 	bl	8005258 <HAL_DMA_Init>
 8004b06:	4603      	mov	r3, r0
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d001      	beq.n	8004b10 <HAL_SPI_MspInit+0x128>
    {
      Error_Handler();
 8004b0c:	f7ff fdde 	bl	80046cc <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	4a0d      	ldr	r2, [pc, #52]	; (8004b48 <HAL_SPI_MspInit+0x160>)
 8004b14:	649a      	str	r2, [r3, #72]	; 0x48
 8004b16:	4a0c      	ldr	r2, [pc, #48]	; (8004b48 <HAL_SPI_MspInit+0x160>)
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8004b1c:	2200      	movs	r2, #0
 8004b1e:	2100      	movs	r1, #0
 8004b20:	2023      	movs	r0, #35	; 0x23
 8004b22:	f000 fb62 	bl	80051ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8004b26:	2023      	movs	r0, #35	; 0x23
 8004b28:	f000 fb7b 	bl	8005222 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8004b2c:	bf00      	nop
 8004b2e:	3728      	adds	r7, #40	; 0x28
 8004b30:	46bd      	mov	sp, r7
 8004b32:	bd80      	pop	{r7, pc}
 8004b34:	40013000 	.word	0x40013000
 8004b38:	40023800 	.word	0x40023800
 8004b3c:	40020400 	.word	0x40020400
 8004b40:	200010d4 	.word	0x200010d4
 8004b44:	40026410 	.word	0x40026410
 8004b48:	20001134 	.word	0x20001134
 8004b4c:	40026488 	.word	0x40026488

08004b50 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004b50:	b480      	push	{r7}
 8004b52:	b089      	sub	sp, #36	; 0x24
 8004b54:	af00      	add	r7, sp, #0
 8004b56:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	4a33      	ldr	r2, [pc, #204]	; (8004c2c <HAL_TIM_Base_MspInit+0xdc>)
 8004b5e:	4293      	cmp	r3, r2
 8004b60:	d10e      	bne.n	8004b80 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8004b62:	2300      	movs	r3, #0
 8004b64:	61fb      	str	r3, [r7, #28]
 8004b66:	4b32      	ldr	r3, [pc, #200]	; (8004c30 <HAL_TIM_Base_MspInit+0xe0>)
 8004b68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b6a:	4a31      	ldr	r2, [pc, #196]	; (8004c30 <HAL_TIM_Base_MspInit+0xe0>)
 8004b6c:	f043 0301 	orr.w	r3, r3, #1
 8004b70:	6453      	str	r3, [r2, #68]	; 0x44
 8004b72:	4b2f      	ldr	r3, [pc, #188]	; (8004c30 <HAL_TIM_Base_MspInit+0xe0>)
 8004b74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b76:	f003 0301 	and.w	r3, r3, #1
 8004b7a:	61fb      	str	r3, [r7, #28]
 8004b7c:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8004b7e:	e04e      	b.n	8004c1e <HAL_TIM_Base_MspInit+0xce>
  else if(htim_base->Instance==TIM2)
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b88:	d10e      	bne.n	8004ba8 <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8004b8a:	2300      	movs	r3, #0
 8004b8c:	61bb      	str	r3, [r7, #24]
 8004b8e:	4b28      	ldr	r3, [pc, #160]	; (8004c30 <HAL_TIM_Base_MspInit+0xe0>)
 8004b90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b92:	4a27      	ldr	r2, [pc, #156]	; (8004c30 <HAL_TIM_Base_MspInit+0xe0>)
 8004b94:	f043 0301 	orr.w	r3, r3, #1
 8004b98:	6413      	str	r3, [r2, #64]	; 0x40
 8004b9a:	4b25      	ldr	r3, [pc, #148]	; (8004c30 <HAL_TIM_Base_MspInit+0xe0>)
 8004b9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b9e:	f003 0301 	and.w	r3, r3, #1
 8004ba2:	61bb      	str	r3, [r7, #24]
 8004ba4:	69bb      	ldr	r3, [r7, #24]
}
 8004ba6:	e03a      	b.n	8004c1e <HAL_TIM_Base_MspInit+0xce>
  else if(htim_base->Instance==TIM3)
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	4a21      	ldr	r2, [pc, #132]	; (8004c34 <HAL_TIM_Base_MspInit+0xe4>)
 8004bae:	4293      	cmp	r3, r2
 8004bb0:	d10e      	bne.n	8004bd0 <HAL_TIM_Base_MspInit+0x80>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8004bb2:	2300      	movs	r3, #0
 8004bb4:	617b      	str	r3, [r7, #20]
 8004bb6:	4b1e      	ldr	r3, [pc, #120]	; (8004c30 <HAL_TIM_Base_MspInit+0xe0>)
 8004bb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bba:	4a1d      	ldr	r2, [pc, #116]	; (8004c30 <HAL_TIM_Base_MspInit+0xe0>)
 8004bbc:	f043 0302 	orr.w	r3, r3, #2
 8004bc0:	6413      	str	r3, [r2, #64]	; 0x40
 8004bc2:	4b1b      	ldr	r3, [pc, #108]	; (8004c30 <HAL_TIM_Base_MspInit+0xe0>)
 8004bc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bc6:	f003 0302 	and.w	r3, r3, #2
 8004bca:	617b      	str	r3, [r7, #20]
 8004bcc:	697b      	ldr	r3, [r7, #20]
}
 8004bce:	e026      	b.n	8004c1e <HAL_TIM_Base_MspInit+0xce>
  else if(htim_base->Instance==TIM4)
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	4a18      	ldr	r2, [pc, #96]	; (8004c38 <HAL_TIM_Base_MspInit+0xe8>)
 8004bd6:	4293      	cmp	r3, r2
 8004bd8:	d10e      	bne.n	8004bf8 <HAL_TIM_Base_MspInit+0xa8>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8004bda:	2300      	movs	r3, #0
 8004bdc:	613b      	str	r3, [r7, #16]
 8004bde:	4b14      	ldr	r3, [pc, #80]	; (8004c30 <HAL_TIM_Base_MspInit+0xe0>)
 8004be0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004be2:	4a13      	ldr	r2, [pc, #76]	; (8004c30 <HAL_TIM_Base_MspInit+0xe0>)
 8004be4:	f043 0304 	orr.w	r3, r3, #4
 8004be8:	6413      	str	r3, [r2, #64]	; 0x40
 8004bea:	4b11      	ldr	r3, [pc, #68]	; (8004c30 <HAL_TIM_Base_MspInit+0xe0>)
 8004bec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bee:	f003 0304 	and.w	r3, r3, #4
 8004bf2:	613b      	str	r3, [r7, #16]
 8004bf4:	693b      	ldr	r3, [r7, #16]
}
 8004bf6:	e012      	b.n	8004c1e <HAL_TIM_Base_MspInit+0xce>
  else if(htim_base->Instance==TIM5)
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	4a0f      	ldr	r2, [pc, #60]	; (8004c3c <HAL_TIM_Base_MspInit+0xec>)
 8004bfe:	4293      	cmp	r3, r2
 8004c00:	d10d      	bne.n	8004c1e <HAL_TIM_Base_MspInit+0xce>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8004c02:	2300      	movs	r3, #0
 8004c04:	60fb      	str	r3, [r7, #12]
 8004c06:	4b0a      	ldr	r3, [pc, #40]	; (8004c30 <HAL_TIM_Base_MspInit+0xe0>)
 8004c08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c0a:	4a09      	ldr	r2, [pc, #36]	; (8004c30 <HAL_TIM_Base_MspInit+0xe0>)
 8004c0c:	f043 0308 	orr.w	r3, r3, #8
 8004c10:	6413      	str	r3, [r2, #64]	; 0x40
 8004c12:	4b07      	ldr	r3, [pc, #28]	; (8004c30 <HAL_TIM_Base_MspInit+0xe0>)
 8004c14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c16:	f003 0308 	and.w	r3, r3, #8
 8004c1a:	60fb      	str	r3, [r7, #12]
 8004c1c:	68fb      	ldr	r3, [r7, #12]
}
 8004c1e:	bf00      	nop
 8004c20:	3724      	adds	r7, #36	; 0x24
 8004c22:	46bd      	mov	sp, r7
 8004c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c28:	4770      	bx	lr
 8004c2a:	bf00      	nop
 8004c2c:	40010000 	.word	0x40010000
 8004c30:	40023800 	.word	0x40023800
 8004c34:	40000400 	.word	0x40000400
 8004c38:	40000800 	.word	0x40000800
 8004c3c:	40000c00 	.word	0x40000c00

08004c40 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8004c40:	b580      	push	{r7, lr}
 8004c42:	b08a      	sub	sp, #40	; 0x28
 8004c44:	af00      	add	r7, sp, #0
 8004c46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004c48:	f107 0314 	add.w	r3, r7, #20
 8004c4c:	2200      	movs	r2, #0
 8004c4e:	601a      	str	r2, [r3, #0]
 8004c50:	605a      	str	r2, [r3, #4]
 8004c52:	609a      	str	r2, [r3, #8]
 8004c54:	60da      	str	r2, [r3, #12]
 8004c56:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	4a24      	ldr	r2, [pc, #144]	; (8004cf0 <HAL_TIM_MspPostInit+0xb0>)
 8004c5e:	4293      	cmp	r3, r2
 8004c60:	d11e      	bne.n	8004ca0 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004c62:	2300      	movs	r3, #0
 8004c64:	613b      	str	r3, [r7, #16]
 8004c66:	4b23      	ldr	r3, [pc, #140]	; (8004cf4 <HAL_TIM_MspPostInit+0xb4>)
 8004c68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c6a:	4a22      	ldr	r2, [pc, #136]	; (8004cf4 <HAL_TIM_MspPostInit+0xb4>)
 8004c6c:	f043 0302 	orr.w	r3, r3, #2
 8004c70:	6313      	str	r3, [r2, #48]	; 0x30
 8004c72:	4b20      	ldr	r3, [pc, #128]	; (8004cf4 <HAL_TIM_MspPostInit+0xb4>)
 8004c74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c76:	f003 0302 	and.w	r3, r3, #2
 8004c7a:	613b      	str	r3, [r7, #16]
 8004c7c:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration    
    PB0     ------> TIM3_CH3
    PB1     ------> TIM3_CH4 
    */
    GPIO_InitStruct.Pin = P6_Pin|P3_Pin;
 8004c7e:	2303      	movs	r3, #3
 8004c80:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004c82:	2302      	movs	r3, #2
 8004c84:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c86:	2300      	movs	r3, #0
 8004c88:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004c8a:	2300      	movs	r3, #0
 8004c8c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8004c8e:	2302      	movs	r3, #2
 8004c90:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004c92:	f107 0314 	add.w	r3, r7, #20
 8004c96:	4619      	mov	r1, r3
 8004c98:	4817      	ldr	r0, [pc, #92]	; (8004cf8 <HAL_TIM_MspPostInit+0xb8>)
 8004c9a:	f000 fe79 	bl	8005990 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 8004c9e:	e022      	b.n	8004ce6 <HAL_TIM_MspPostInit+0xa6>
  else if(htim->Instance==TIM5)
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	4a15      	ldr	r2, [pc, #84]	; (8004cfc <HAL_TIM_MspPostInit+0xbc>)
 8004ca6:	4293      	cmp	r3, r2
 8004ca8:	d11d      	bne.n	8004ce6 <HAL_TIM_MspPostInit+0xa6>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004caa:	2300      	movs	r3, #0
 8004cac:	60fb      	str	r3, [r7, #12]
 8004cae:	4b11      	ldr	r3, [pc, #68]	; (8004cf4 <HAL_TIM_MspPostInit+0xb4>)
 8004cb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cb2:	4a10      	ldr	r2, [pc, #64]	; (8004cf4 <HAL_TIM_MspPostInit+0xb4>)
 8004cb4:	f043 0301 	orr.w	r3, r3, #1
 8004cb8:	6313      	str	r3, [r2, #48]	; 0x30
 8004cba:	4b0e      	ldr	r3, [pc, #56]	; (8004cf4 <HAL_TIM_MspPostInit+0xb4>)
 8004cbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cbe:	f003 0301 	and.w	r3, r3, #1
 8004cc2:	60fb      	str	r3, [r7, #12]
 8004cc4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_3;
 8004cc6:	230a      	movs	r3, #10
 8004cc8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004cca:	2302      	movs	r3, #2
 8004ccc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004cce:	2300      	movs	r3, #0
 8004cd0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004cd2:	2300      	movs	r3, #0
 8004cd4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8004cd6:	2302      	movs	r3, #2
 8004cd8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004cda:	f107 0314 	add.w	r3, r7, #20
 8004cde:	4619      	mov	r1, r3
 8004ce0:	4807      	ldr	r0, [pc, #28]	; (8004d00 <HAL_TIM_MspPostInit+0xc0>)
 8004ce2:	f000 fe55 	bl	8005990 <HAL_GPIO_Init>
}
 8004ce6:	bf00      	nop
 8004ce8:	3728      	adds	r7, #40	; 0x28
 8004cea:	46bd      	mov	sp, r7
 8004cec:	bd80      	pop	{r7, pc}
 8004cee:	bf00      	nop
 8004cf0:	40000400 	.word	0x40000400
 8004cf4:	40023800 	.word	0x40023800
 8004cf8:	40020400 	.word	0x40020400
 8004cfc:	40000c00 	.word	0x40000c00
 8004d00:	40020000 	.word	0x40020000

08004d04 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004d04:	b580      	push	{r7, lr}
 8004d06:	b08a      	sub	sp, #40	; 0x28
 8004d08:	af00      	add	r7, sp, #0
 8004d0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004d0c:	f107 0314 	add.w	r3, r7, #20
 8004d10:	2200      	movs	r2, #0
 8004d12:	601a      	str	r2, [r3, #0]
 8004d14:	605a      	str	r2, [r3, #4]
 8004d16:	609a      	str	r2, [r3, #8]
 8004d18:	60da      	str	r2, [r3, #12]
 8004d1a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	4a19      	ldr	r2, [pc, #100]	; (8004d88 <HAL_UART_MspInit+0x84>)
 8004d22:	4293      	cmp	r3, r2
 8004d24:	d12c      	bne.n	8004d80 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8004d26:	2300      	movs	r3, #0
 8004d28:	613b      	str	r3, [r7, #16]
 8004d2a:	4b18      	ldr	r3, [pc, #96]	; (8004d8c <HAL_UART_MspInit+0x88>)
 8004d2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d2e:	4a17      	ldr	r2, [pc, #92]	; (8004d8c <HAL_UART_MspInit+0x88>)
 8004d30:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004d34:	6413      	str	r3, [r2, #64]	; 0x40
 8004d36:	4b15      	ldr	r3, [pc, #84]	; (8004d8c <HAL_UART_MspInit+0x88>)
 8004d38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d3a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004d3e:	613b      	str	r3, [r7, #16]
 8004d40:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004d42:	2300      	movs	r3, #0
 8004d44:	60fb      	str	r3, [r7, #12]
 8004d46:	4b11      	ldr	r3, [pc, #68]	; (8004d8c <HAL_UART_MspInit+0x88>)
 8004d48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d4a:	4a10      	ldr	r2, [pc, #64]	; (8004d8c <HAL_UART_MspInit+0x88>)
 8004d4c:	f043 0302 	orr.w	r3, r3, #2
 8004d50:	6313      	str	r3, [r2, #48]	; 0x30
 8004d52:	4b0e      	ldr	r3, [pc, #56]	; (8004d8c <HAL_UART_MspInit+0x88>)
 8004d54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d56:	f003 0302 	and.w	r3, r3, #2
 8004d5a:	60fb      	str	r3, [r7, #12]
 8004d5c:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration    
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX 
    */
    GPIO_InitStruct.Pin = GPS_RX_Pin|GPS_TX_Pin;
 8004d5e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8004d62:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004d64:	2302      	movs	r3, #2
 8004d66:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d68:	2300      	movs	r3, #0
 8004d6a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004d6c:	2303      	movs	r3, #3
 8004d6e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8004d70:	2307      	movs	r3, #7
 8004d72:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004d74:	f107 0314 	add.w	r3, r7, #20
 8004d78:	4619      	mov	r1, r3
 8004d7a:	4805      	ldr	r0, [pc, #20]	; (8004d90 <HAL_UART_MspInit+0x8c>)
 8004d7c:	f000 fe08 	bl	8005990 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8004d80:	bf00      	nop
 8004d82:	3728      	adds	r7, #40	; 0x28
 8004d84:	46bd      	mov	sp, r7
 8004d86:	bd80      	pop	{r7, pc}
 8004d88:	40004800 	.word	0x40004800
 8004d8c:	40023800 	.word	0x40023800
 8004d90:	40020400 	.word	0x40020400

08004d94 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004d94:	b480      	push	{r7}
 8004d96:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8004d98:	bf00      	nop
 8004d9a:	46bd      	mov	sp, r7
 8004d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da0:	4770      	bx	lr

08004da2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004da2:	b480      	push	{r7}
 8004da4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004da6:	e7fe      	b.n	8004da6 <HardFault_Handler+0x4>

08004da8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004da8:	b480      	push	{r7}
 8004daa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004dac:	e7fe      	b.n	8004dac <MemManage_Handler+0x4>

08004dae <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004dae:	b480      	push	{r7}
 8004db0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004db2:	e7fe      	b.n	8004db2 <BusFault_Handler+0x4>

08004db4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004db4:	b480      	push	{r7}
 8004db6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004db8:	e7fe      	b.n	8004db8 <UsageFault_Handler+0x4>

08004dba <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004dba:	b480      	push	{r7}
 8004dbc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004dbe:	bf00      	nop
 8004dc0:	46bd      	mov	sp, r7
 8004dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc6:	4770      	bx	lr

08004dc8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004dc8:	b480      	push	{r7}
 8004dca:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004dcc:	bf00      	nop
 8004dce:	46bd      	mov	sp, r7
 8004dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd4:	4770      	bx	lr

08004dd6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004dd6:	b480      	push	{r7}
 8004dd8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004dda:	bf00      	nop
 8004ddc:	46bd      	mov	sp, r7
 8004dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de2:	4770      	bx	lr

08004de4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004de4:	b580      	push	{r7, lr}
 8004de6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004de8:	f000 f8e2 	bl	8004fb0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004dec:	bf00      	nop
 8004dee:	bd80      	pop	{r7, pc}

08004df0 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8004df0:	b580      	push	{r7, lr}
 8004df2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8004df4:	2040      	movs	r0, #64	; 0x40
 8004df6:	f000 ff97 	bl	8005d28 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8004dfa:	bf00      	nop
 8004dfc:	bd80      	pop	{r7, pc}
	...

08004e00 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8004e00:	b580      	push	{r7, lr}
 8004e02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8004e04:	4802      	ldr	r0, [pc, #8]	; (8004e10 <SPI1_IRQHandler+0x10>)
 8004e06:	f005 fa7f 	bl	800a308 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8004e0a:	bf00      	nop
 8004e0c:	bd80      	pop	{r7, pc}
 8004e0e:	bf00      	nop
 8004e10:	2000103c 	.word	0x2000103c

08004e14 <SDIO_IRQHandler>:

/**
  * @brief This function handles SDIO global interrupt.
  */
void SDIO_IRQHandler(void)
{
 8004e14:	b580      	push	{r7, lr}
 8004e16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDIO_IRQn 0 */

  /* USER CODE END SDIO_IRQn 0 */
  HAL_SD_IRQHandler(&hsd);
 8004e18:	4802      	ldr	r0, [pc, #8]	; (8004e24 <SDIO_IRQHandler+0x10>)
 8004e1a:	f004 f95f 	bl	80090dc <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDIO_IRQn 1 */

  /* USER CODE END SDIO_IRQn 1 */
}
 8004e1e:	bf00      	nop
 8004e20:	bd80      	pop	{r7, pc}
 8004e22:	bf00      	nop
 8004e24:	20000fb8 	.word	0x20000fb8

08004e28 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8004e28:	b580      	push	{r7, lr}
 8004e2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8004e2c:	4802      	ldr	r0, [pc, #8]	; (8004e38 <DMA2_Stream0_IRQHandler+0x10>)
 8004e2e:	f000 fb3b 	bl	80054a8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8004e32:	bf00      	nop
 8004e34:	bd80      	pop	{r7, pc}
 8004e36:	bf00      	nop
 8004e38:	200010d4 	.word	0x200010d4

08004e3c <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8004e3c:	b580      	push	{r7, lr}
 8004e3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_rx);
 8004e40:	4802      	ldr	r0, [pc, #8]	; (8004e4c <DMA2_Stream3_IRQHandler+0x10>)
 8004e42:	f000 fb31 	bl	80054a8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8004e46:	bf00      	nop
 8004e48:	bd80      	pop	{r7, pc}
 8004e4a:	bf00      	nop
 8004e4c:	20000d44 	.word	0x20000d44

08004e50 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8004e50:	b580      	push	{r7, lr}
 8004e52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8004e54:	4802      	ldr	r0, [pc, #8]	; (8004e60 <OTG_FS_IRQHandler+0x10>)
 8004e56:	f002 f898 	bl	8006f8a <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8004e5a:	bf00      	nop
 8004e5c:	bd80      	pop	{r7, pc}
 8004e5e:	bf00      	nop
 8004e60:	200046a0 	.word	0x200046a0

08004e64 <DMA2_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA2 stream5 global interrupt.
  */
void DMA2_Stream5_IRQHandler(void)
{
 8004e64:	b580      	push	{r7, lr}
 8004e66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream5_IRQn 0 */

  /* USER CODE END DMA2_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8004e68:	4802      	ldr	r0, [pc, #8]	; (8004e74 <DMA2_Stream5_IRQHandler+0x10>)
 8004e6a:	f000 fb1d 	bl	80054a8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream5_IRQn 1 */

  /* USER CODE END DMA2_Stream5_IRQn 1 */
}
 8004e6e:	bf00      	nop
 8004e70:	bd80      	pop	{r7, pc}
 8004e72:	bf00      	nop
 8004e74:	20001134 	.word	0x20001134

08004e78 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8004e78:	b580      	push	{r7, lr}
 8004e7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_tx);
 8004e7c:	4802      	ldr	r0, [pc, #8]	; (8004e88 <DMA2_Stream6_IRQHandler+0x10>)
 8004e7e:	f000 fb13 	bl	80054a8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8004e82:	bf00      	nop
 8004e84:	bd80      	pop	{r7, pc}
 8004e86:	bf00      	nop
 8004e88:	20000f18 	.word	0x20000f18

08004e8c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004e8c:	b480      	push	{r7}
 8004e8e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004e90:	4b08      	ldr	r3, [pc, #32]	; (8004eb4 <SystemInit+0x28>)
 8004e92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e96:	4a07      	ldr	r2, [pc, #28]	; (8004eb4 <SystemInit+0x28>)
 8004e98:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004e9c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8004ea0:	4b04      	ldr	r3, [pc, #16]	; (8004eb4 <SystemInit+0x28>)
 8004ea2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004ea6:	609a      	str	r2, [r3, #8]
#endif
}
 8004ea8:	bf00      	nop
 8004eaa:	46bd      	mov	sp, r7
 8004eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb0:	4770      	bx	lr
 8004eb2:	bf00      	nop
 8004eb4:	e000ed00 	.word	0xe000ed00

08004eb8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8004eb8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004ef0 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8004ebc:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8004ebe:	e003      	b.n	8004ec8 <LoopCopyDataInit>

08004ec0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8004ec0:	4b0c      	ldr	r3, [pc, #48]	; (8004ef4 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8004ec2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8004ec4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8004ec6:	3104      	adds	r1, #4

08004ec8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8004ec8:	480b      	ldr	r0, [pc, #44]	; (8004ef8 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8004eca:	4b0c      	ldr	r3, [pc, #48]	; (8004efc <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8004ecc:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8004ece:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8004ed0:	d3f6      	bcc.n	8004ec0 <CopyDataInit>
  ldr  r2, =_sbss
 8004ed2:	4a0b      	ldr	r2, [pc, #44]	; (8004f00 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8004ed4:	e002      	b.n	8004edc <LoopFillZerobss>

08004ed6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8004ed6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8004ed8:	f842 3b04 	str.w	r3, [r2], #4

08004edc <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8004edc:	4b09      	ldr	r3, [pc, #36]	; (8004f04 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8004ede:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8004ee0:	d3f9      	bcc.n	8004ed6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8004ee2:	f7ff ffd3 	bl	8004e8c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004ee6:	f00b f89d 	bl	8010024 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004eea:	f7fe ff47 	bl	8003d7c <main>
  bx  lr    
 8004eee:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8004ef0:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8004ef4:	08015d30 	.word	0x08015d30
  ldr  r0, =_sdata
 8004ef8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8004efc:	20000350 	.word	0x20000350
  ldr  r2, =_sbss
 8004f00:	20000350 	.word	0x20000350
  ldr  r3, = _ebss
 8004f04:	20004aac 	.word	0x20004aac

08004f08 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004f08:	e7fe      	b.n	8004f08 <ADC_IRQHandler>
	...

08004f0c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004f0c:	b580      	push	{r7, lr}
 8004f0e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004f10:	4b0e      	ldr	r3, [pc, #56]	; (8004f4c <HAL_Init+0x40>)
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	4a0d      	ldr	r2, [pc, #52]	; (8004f4c <HAL_Init+0x40>)
 8004f16:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004f1a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004f1c:	4b0b      	ldr	r3, [pc, #44]	; (8004f4c <HAL_Init+0x40>)
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	4a0a      	ldr	r2, [pc, #40]	; (8004f4c <HAL_Init+0x40>)
 8004f22:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004f26:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004f28:	4b08      	ldr	r3, [pc, #32]	; (8004f4c <HAL_Init+0x40>)
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	4a07      	ldr	r2, [pc, #28]	; (8004f4c <HAL_Init+0x40>)
 8004f2e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004f32:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004f34:	2003      	movs	r0, #3
 8004f36:	f000 f94d 	bl	80051d4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004f3a:	2000      	movs	r0, #0
 8004f3c:	f000 f808 	bl	8004f50 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004f40:	f7ff fbcc 	bl	80046dc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004f44:	2300      	movs	r3, #0
}
 8004f46:	4618      	mov	r0, r3
 8004f48:	bd80      	pop	{r7, pc}
 8004f4a:	bf00      	nop
 8004f4c:	40023c00 	.word	0x40023c00

08004f50 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004f50:	b580      	push	{r7, lr}
 8004f52:	b082      	sub	sp, #8
 8004f54:	af00      	add	r7, sp, #0
 8004f56:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004f58:	4b12      	ldr	r3, [pc, #72]	; (8004fa4 <HAL_InitTick+0x54>)
 8004f5a:	681a      	ldr	r2, [r3, #0]
 8004f5c:	4b12      	ldr	r3, [pc, #72]	; (8004fa8 <HAL_InitTick+0x58>)
 8004f5e:	781b      	ldrb	r3, [r3, #0]
 8004f60:	4619      	mov	r1, r3
 8004f62:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004f66:	fbb3 f3f1 	udiv	r3, r3, r1
 8004f6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f6e:	4618      	mov	r0, r3
 8004f70:	f000 f965 	bl	800523e <HAL_SYSTICK_Config>
 8004f74:	4603      	mov	r3, r0
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d001      	beq.n	8004f7e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004f7a:	2301      	movs	r3, #1
 8004f7c:	e00e      	b.n	8004f9c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	2b0f      	cmp	r3, #15
 8004f82:	d80a      	bhi.n	8004f9a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004f84:	2200      	movs	r2, #0
 8004f86:	6879      	ldr	r1, [r7, #4]
 8004f88:	f04f 30ff 	mov.w	r0, #4294967295
 8004f8c:	f000 f92d 	bl	80051ea <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004f90:	4a06      	ldr	r2, [pc, #24]	; (8004fac <HAL_InitTick+0x5c>)
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004f96:	2300      	movs	r3, #0
 8004f98:	e000      	b.n	8004f9c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004f9a:	2301      	movs	r3, #1
}
 8004f9c:	4618      	mov	r0, r3
 8004f9e:	3708      	adds	r7, #8
 8004fa0:	46bd      	mov	sp, r7
 8004fa2:	bd80      	pop	{r7, pc}
 8004fa4:	20000000 	.word	0x20000000
 8004fa8:	20000008 	.word	0x20000008
 8004fac:	20000004 	.word	0x20000004

08004fb0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004fb0:	b480      	push	{r7}
 8004fb2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004fb4:	4b06      	ldr	r3, [pc, #24]	; (8004fd0 <HAL_IncTick+0x20>)
 8004fb6:	781b      	ldrb	r3, [r3, #0]
 8004fb8:	461a      	mov	r2, r3
 8004fba:	4b06      	ldr	r3, [pc, #24]	; (8004fd4 <HAL_IncTick+0x24>)
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	4413      	add	r3, r2
 8004fc0:	4a04      	ldr	r2, [pc, #16]	; (8004fd4 <HAL_IncTick+0x24>)
 8004fc2:	6013      	str	r3, [r2, #0]
}
 8004fc4:	bf00      	nop
 8004fc6:	46bd      	mov	sp, r7
 8004fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fcc:	4770      	bx	lr
 8004fce:	bf00      	nop
 8004fd0:	20000008 	.word	0x20000008
 8004fd4:	20001194 	.word	0x20001194

08004fd8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004fd8:	b480      	push	{r7}
 8004fda:	af00      	add	r7, sp, #0
  return uwTick;
 8004fdc:	4b03      	ldr	r3, [pc, #12]	; (8004fec <HAL_GetTick+0x14>)
 8004fde:	681b      	ldr	r3, [r3, #0]
}
 8004fe0:	4618      	mov	r0, r3
 8004fe2:	46bd      	mov	sp, r7
 8004fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe8:	4770      	bx	lr
 8004fea:	bf00      	nop
 8004fec:	20001194 	.word	0x20001194

08004ff0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004ff0:	b580      	push	{r7, lr}
 8004ff2:	b084      	sub	sp, #16
 8004ff4:	af00      	add	r7, sp, #0
 8004ff6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004ff8:	f7ff ffee 	bl	8004fd8 <HAL_GetTick>
 8004ffc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005008:	d005      	beq.n	8005016 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800500a:	4b09      	ldr	r3, [pc, #36]	; (8005030 <HAL_Delay+0x40>)
 800500c:	781b      	ldrb	r3, [r3, #0]
 800500e:	461a      	mov	r2, r3
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	4413      	add	r3, r2
 8005014:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8005016:	bf00      	nop
 8005018:	f7ff ffde 	bl	8004fd8 <HAL_GetTick>
 800501c:	4602      	mov	r2, r0
 800501e:	68bb      	ldr	r3, [r7, #8]
 8005020:	1ad3      	subs	r3, r2, r3
 8005022:	68fa      	ldr	r2, [r7, #12]
 8005024:	429a      	cmp	r2, r3
 8005026:	d8f7      	bhi.n	8005018 <HAL_Delay+0x28>
  {
  }
}
 8005028:	bf00      	nop
 800502a:	3710      	adds	r7, #16
 800502c:	46bd      	mov	sp, r7
 800502e:	bd80      	pop	{r7, pc}
 8005030:	20000008 	.word	0x20000008

08005034 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005034:	b480      	push	{r7}
 8005036:	b085      	sub	sp, #20
 8005038:	af00      	add	r7, sp, #0
 800503a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	f003 0307 	and.w	r3, r3, #7
 8005042:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005044:	4b0c      	ldr	r3, [pc, #48]	; (8005078 <__NVIC_SetPriorityGrouping+0x44>)
 8005046:	68db      	ldr	r3, [r3, #12]
 8005048:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800504a:	68ba      	ldr	r2, [r7, #8]
 800504c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005050:	4013      	ands	r3, r2
 8005052:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005058:	68bb      	ldr	r3, [r7, #8]
 800505a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800505c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005060:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005064:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005066:	4a04      	ldr	r2, [pc, #16]	; (8005078 <__NVIC_SetPriorityGrouping+0x44>)
 8005068:	68bb      	ldr	r3, [r7, #8]
 800506a:	60d3      	str	r3, [r2, #12]
}
 800506c:	bf00      	nop
 800506e:	3714      	adds	r7, #20
 8005070:	46bd      	mov	sp, r7
 8005072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005076:	4770      	bx	lr
 8005078:	e000ed00 	.word	0xe000ed00

0800507c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800507c:	b480      	push	{r7}
 800507e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005080:	4b04      	ldr	r3, [pc, #16]	; (8005094 <__NVIC_GetPriorityGrouping+0x18>)
 8005082:	68db      	ldr	r3, [r3, #12]
 8005084:	0a1b      	lsrs	r3, r3, #8
 8005086:	f003 0307 	and.w	r3, r3, #7
}
 800508a:	4618      	mov	r0, r3
 800508c:	46bd      	mov	sp, r7
 800508e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005092:	4770      	bx	lr
 8005094:	e000ed00 	.word	0xe000ed00

08005098 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005098:	b480      	push	{r7}
 800509a:	b083      	sub	sp, #12
 800509c:	af00      	add	r7, sp, #0
 800509e:	4603      	mov	r3, r0
 80050a0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80050a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	db0b      	blt.n	80050c2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80050aa:	79fb      	ldrb	r3, [r7, #7]
 80050ac:	f003 021f 	and.w	r2, r3, #31
 80050b0:	4907      	ldr	r1, [pc, #28]	; (80050d0 <__NVIC_EnableIRQ+0x38>)
 80050b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80050b6:	095b      	lsrs	r3, r3, #5
 80050b8:	2001      	movs	r0, #1
 80050ba:	fa00 f202 	lsl.w	r2, r0, r2
 80050be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80050c2:	bf00      	nop
 80050c4:	370c      	adds	r7, #12
 80050c6:	46bd      	mov	sp, r7
 80050c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050cc:	4770      	bx	lr
 80050ce:	bf00      	nop
 80050d0:	e000e100 	.word	0xe000e100

080050d4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80050d4:	b480      	push	{r7}
 80050d6:	b083      	sub	sp, #12
 80050d8:	af00      	add	r7, sp, #0
 80050da:	4603      	mov	r3, r0
 80050dc:	6039      	str	r1, [r7, #0]
 80050de:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80050e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	db0a      	blt.n	80050fe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80050e8:	683b      	ldr	r3, [r7, #0]
 80050ea:	b2da      	uxtb	r2, r3
 80050ec:	490c      	ldr	r1, [pc, #48]	; (8005120 <__NVIC_SetPriority+0x4c>)
 80050ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80050f2:	0112      	lsls	r2, r2, #4
 80050f4:	b2d2      	uxtb	r2, r2
 80050f6:	440b      	add	r3, r1
 80050f8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80050fc:	e00a      	b.n	8005114 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80050fe:	683b      	ldr	r3, [r7, #0]
 8005100:	b2da      	uxtb	r2, r3
 8005102:	4908      	ldr	r1, [pc, #32]	; (8005124 <__NVIC_SetPriority+0x50>)
 8005104:	79fb      	ldrb	r3, [r7, #7]
 8005106:	f003 030f 	and.w	r3, r3, #15
 800510a:	3b04      	subs	r3, #4
 800510c:	0112      	lsls	r2, r2, #4
 800510e:	b2d2      	uxtb	r2, r2
 8005110:	440b      	add	r3, r1
 8005112:	761a      	strb	r2, [r3, #24]
}
 8005114:	bf00      	nop
 8005116:	370c      	adds	r7, #12
 8005118:	46bd      	mov	sp, r7
 800511a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800511e:	4770      	bx	lr
 8005120:	e000e100 	.word	0xe000e100
 8005124:	e000ed00 	.word	0xe000ed00

08005128 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005128:	b480      	push	{r7}
 800512a:	b089      	sub	sp, #36	; 0x24
 800512c:	af00      	add	r7, sp, #0
 800512e:	60f8      	str	r0, [r7, #12]
 8005130:	60b9      	str	r1, [r7, #8]
 8005132:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	f003 0307 	and.w	r3, r3, #7
 800513a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800513c:	69fb      	ldr	r3, [r7, #28]
 800513e:	f1c3 0307 	rsb	r3, r3, #7
 8005142:	2b04      	cmp	r3, #4
 8005144:	bf28      	it	cs
 8005146:	2304      	movcs	r3, #4
 8005148:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800514a:	69fb      	ldr	r3, [r7, #28]
 800514c:	3304      	adds	r3, #4
 800514e:	2b06      	cmp	r3, #6
 8005150:	d902      	bls.n	8005158 <NVIC_EncodePriority+0x30>
 8005152:	69fb      	ldr	r3, [r7, #28]
 8005154:	3b03      	subs	r3, #3
 8005156:	e000      	b.n	800515a <NVIC_EncodePriority+0x32>
 8005158:	2300      	movs	r3, #0
 800515a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800515c:	f04f 32ff 	mov.w	r2, #4294967295
 8005160:	69bb      	ldr	r3, [r7, #24]
 8005162:	fa02 f303 	lsl.w	r3, r2, r3
 8005166:	43da      	mvns	r2, r3
 8005168:	68bb      	ldr	r3, [r7, #8]
 800516a:	401a      	ands	r2, r3
 800516c:	697b      	ldr	r3, [r7, #20]
 800516e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005170:	f04f 31ff 	mov.w	r1, #4294967295
 8005174:	697b      	ldr	r3, [r7, #20]
 8005176:	fa01 f303 	lsl.w	r3, r1, r3
 800517a:	43d9      	mvns	r1, r3
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005180:	4313      	orrs	r3, r2
         );
}
 8005182:	4618      	mov	r0, r3
 8005184:	3724      	adds	r7, #36	; 0x24
 8005186:	46bd      	mov	sp, r7
 8005188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800518c:	4770      	bx	lr
	...

08005190 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005190:	b580      	push	{r7, lr}
 8005192:	b082      	sub	sp, #8
 8005194:	af00      	add	r7, sp, #0
 8005196:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	3b01      	subs	r3, #1
 800519c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80051a0:	d301      	bcc.n	80051a6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80051a2:	2301      	movs	r3, #1
 80051a4:	e00f      	b.n	80051c6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80051a6:	4a0a      	ldr	r2, [pc, #40]	; (80051d0 <SysTick_Config+0x40>)
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	3b01      	subs	r3, #1
 80051ac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80051ae:	210f      	movs	r1, #15
 80051b0:	f04f 30ff 	mov.w	r0, #4294967295
 80051b4:	f7ff ff8e 	bl	80050d4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80051b8:	4b05      	ldr	r3, [pc, #20]	; (80051d0 <SysTick_Config+0x40>)
 80051ba:	2200      	movs	r2, #0
 80051bc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80051be:	4b04      	ldr	r3, [pc, #16]	; (80051d0 <SysTick_Config+0x40>)
 80051c0:	2207      	movs	r2, #7
 80051c2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80051c4:	2300      	movs	r3, #0
}
 80051c6:	4618      	mov	r0, r3
 80051c8:	3708      	adds	r7, #8
 80051ca:	46bd      	mov	sp, r7
 80051cc:	bd80      	pop	{r7, pc}
 80051ce:	bf00      	nop
 80051d0:	e000e010 	.word	0xe000e010

080051d4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80051d4:	b580      	push	{r7, lr}
 80051d6:	b082      	sub	sp, #8
 80051d8:	af00      	add	r7, sp, #0
 80051da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80051dc:	6878      	ldr	r0, [r7, #4]
 80051de:	f7ff ff29 	bl	8005034 <__NVIC_SetPriorityGrouping>
}
 80051e2:	bf00      	nop
 80051e4:	3708      	adds	r7, #8
 80051e6:	46bd      	mov	sp, r7
 80051e8:	bd80      	pop	{r7, pc}

080051ea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80051ea:	b580      	push	{r7, lr}
 80051ec:	b086      	sub	sp, #24
 80051ee:	af00      	add	r7, sp, #0
 80051f0:	4603      	mov	r3, r0
 80051f2:	60b9      	str	r1, [r7, #8]
 80051f4:	607a      	str	r2, [r7, #4]
 80051f6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80051f8:	2300      	movs	r3, #0
 80051fa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80051fc:	f7ff ff3e 	bl	800507c <__NVIC_GetPriorityGrouping>
 8005200:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005202:	687a      	ldr	r2, [r7, #4]
 8005204:	68b9      	ldr	r1, [r7, #8]
 8005206:	6978      	ldr	r0, [r7, #20]
 8005208:	f7ff ff8e 	bl	8005128 <NVIC_EncodePriority>
 800520c:	4602      	mov	r2, r0
 800520e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005212:	4611      	mov	r1, r2
 8005214:	4618      	mov	r0, r3
 8005216:	f7ff ff5d 	bl	80050d4 <__NVIC_SetPriority>
}
 800521a:	bf00      	nop
 800521c:	3718      	adds	r7, #24
 800521e:	46bd      	mov	sp, r7
 8005220:	bd80      	pop	{r7, pc}

08005222 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005222:	b580      	push	{r7, lr}
 8005224:	b082      	sub	sp, #8
 8005226:	af00      	add	r7, sp, #0
 8005228:	4603      	mov	r3, r0
 800522a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800522c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005230:	4618      	mov	r0, r3
 8005232:	f7ff ff31 	bl	8005098 <__NVIC_EnableIRQ>
}
 8005236:	bf00      	nop
 8005238:	3708      	adds	r7, #8
 800523a:	46bd      	mov	sp, r7
 800523c:	bd80      	pop	{r7, pc}

0800523e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800523e:	b580      	push	{r7, lr}
 8005240:	b082      	sub	sp, #8
 8005242:	af00      	add	r7, sp, #0
 8005244:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005246:	6878      	ldr	r0, [r7, #4]
 8005248:	f7ff ffa2 	bl	8005190 <SysTick_Config>
 800524c:	4603      	mov	r3, r0
}
 800524e:	4618      	mov	r0, r3
 8005250:	3708      	adds	r7, #8
 8005252:	46bd      	mov	sp, r7
 8005254:	bd80      	pop	{r7, pc}
	...

08005258 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005258:	b580      	push	{r7, lr}
 800525a:	b086      	sub	sp, #24
 800525c:	af00      	add	r7, sp, #0
 800525e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8005260:	2300      	movs	r3, #0
 8005262:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8005264:	f7ff feb8 	bl	8004fd8 <HAL_GetTick>
 8005268:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	2b00      	cmp	r3, #0
 800526e:	d101      	bne.n	8005274 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8005270:	2301      	movs	r3, #1
 8005272:	e099      	b.n	80053a8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	2200      	movs	r2, #0
 8005278:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	2202      	movs	r2, #2
 8005280:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	681a      	ldr	r2, [r3, #0]
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	f022 0201 	bic.w	r2, r2, #1
 8005292:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005294:	e00f      	b.n	80052b6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005296:	f7ff fe9f 	bl	8004fd8 <HAL_GetTick>
 800529a:	4602      	mov	r2, r0
 800529c:	693b      	ldr	r3, [r7, #16]
 800529e:	1ad3      	subs	r3, r2, r3
 80052a0:	2b05      	cmp	r3, #5
 80052a2:	d908      	bls.n	80052b6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	2220      	movs	r2, #32
 80052a8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	2203      	movs	r2, #3
 80052ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80052b2:	2303      	movs	r3, #3
 80052b4:	e078      	b.n	80053a8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	f003 0301 	and.w	r3, r3, #1
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d1e8      	bne.n	8005296 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80052cc:	697a      	ldr	r2, [r7, #20]
 80052ce:	4b38      	ldr	r3, [pc, #224]	; (80053b0 <HAL_DMA_Init+0x158>)
 80052d0:	4013      	ands	r3, r2
 80052d2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	685a      	ldr	r2, [r3, #4]
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	689b      	ldr	r3, [r3, #8]
 80052dc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80052e2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	691b      	ldr	r3, [r3, #16]
 80052e8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80052ee:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	699b      	ldr	r3, [r3, #24]
 80052f4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80052fa:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	6a1b      	ldr	r3, [r3, #32]
 8005300:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005302:	697a      	ldr	r2, [r7, #20]
 8005304:	4313      	orrs	r3, r2
 8005306:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800530c:	2b04      	cmp	r3, #4
 800530e:	d107      	bne.n	8005320 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005318:	4313      	orrs	r3, r2
 800531a:	697a      	ldr	r2, [r7, #20]
 800531c:	4313      	orrs	r3, r2
 800531e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	697a      	ldr	r2, [r7, #20]
 8005326:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	695b      	ldr	r3, [r3, #20]
 800532e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005330:	697b      	ldr	r3, [r7, #20]
 8005332:	f023 0307 	bic.w	r3, r3, #7
 8005336:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800533c:	697a      	ldr	r2, [r7, #20]
 800533e:	4313      	orrs	r3, r2
 8005340:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005346:	2b04      	cmp	r3, #4
 8005348:	d117      	bne.n	800537a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800534e:	697a      	ldr	r2, [r7, #20]
 8005350:	4313      	orrs	r3, r2
 8005352:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005358:	2b00      	cmp	r3, #0
 800535a:	d00e      	beq.n	800537a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800535c:	6878      	ldr	r0, [r7, #4]
 800535e:	f000 fa9d 	bl	800589c <DMA_CheckFifoParam>
 8005362:	4603      	mov	r3, r0
 8005364:	2b00      	cmp	r3, #0
 8005366:	d008      	beq.n	800537a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	2240      	movs	r2, #64	; 0x40
 800536c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	2201      	movs	r2, #1
 8005372:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8005376:	2301      	movs	r3, #1
 8005378:	e016      	b.n	80053a8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	697a      	ldr	r2, [r7, #20]
 8005380:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005382:	6878      	ldr	r0, [r7, #4]
 8005384:	f000 fa54 	bl	8005830 <DMA_CalcBaseAndBitshift>
 8005388:	4603      	mov	r3, r0
 800538a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005390:	223f      	movs	r2, #63	; 0x3f
 8005392:	409a      	lsls	r2, r3
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	2200      	movs	r2, #0
 800539c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	2201      	movs	r2, #1
 80053a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80053a6:	2300      	movs	r3, #0
}
 80053a8:	4618      	mov	r0, r3
 80053aa:	3718      	adds	r7, #24
 80053ac:	46bd      	mov	sp, r7
 80053ae:	bd80      	pop	{r7, pc}
 80053b0:	f010803f 	.word	0xf010803f

080053b4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80053b4:	b580      	push	{r7, lr}
 80053b6:	b086      	sub	sp, #24
 80053b8:	af00      	add	r7, sp, #0
 80053ba:	60f8      	str	r0, [r7, #12]
 80053bc:	60b9      	str	r1, [r7, #8]
 80053be:	607a      	str	r2, [r7, #4]
 80053c0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80053c2:	2300      	movs	r3, #0
 80053c4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80053ca:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80053d2:	2b01      	cmp	r3, #1
 80053d4:	d101      	bne.n	80053da <HAL_DMA_Start_IT+0x26>
 80053d6:	2302      	movs	r3, #2
 80053d8:	e040      	b.n	800545c <HAL_DMA_Start_IT+0xa8>
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	2201      	movs	r2, #1
 80053de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80053e8:	b2db      	uxtb	r3, r3
 80053ea:	2b01      	cmp	r3, #1
 80053ec:	d12f      	bne.n	800544e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	2202      	movs	r2, #2
 80053f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	2200      	movs	r2, #0
 80053fa:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80053fc:	683b      	ldr	r3, [r7, #0]
 80053fe:	687a      	ldr	r2, [r7, #4]
 8005400:	68b9      	ldr	r1, [r7, #8]
 8005402:	68f8      	ldr	r0, [r7, #12]
 8005404:	f000 f9e6 	bl	80057d4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800540c:	223f      	movs	r2, #63	; 0x3f
 800540e:	409a      	lsls	r2, r3
 8005410:	693b      	ldr	r3, [r7, #16]
 8005412:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	681a      	ldr	r2, [r3, #0]
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	f042 0216 	orr.w	r2, r2, #22
 8005422:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005428:	2b00      	cmp	r3, #0
 800542a:	d007      	beq.n	800543c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	681a      	ldr	r2, [r3, #0]
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	f042 0208 	orr.w	r2, r2, #8
 800543a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	681a      	ldr	r2, [r3, #0]
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	f042 0201 	orr.w	r2, r2, #1
 800544a:	601a      	str	r2, [r3, #0]
 800544c:	e005      	b.n	800545a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	2200      	movs	r2, #0
 8005452:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8005456:	2302      	movs	r3, #2
 8005458:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800545a:	7dfb      	ldrb	r3, [r7, #23]
}
 800545c:	4618      	mov	r0, r3
 800545e:	3718      	adds	r7, #24
 8005460:	46bd      	mov	sp, r7
 8005462:	bd80      	pop	{r7, pc}

08005464 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005464:	b480      	push	{r7}
 8005466:	b083      	sub	sp, #12
 8005468:	af00      	add	r7, sp, #0
 800546a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005472:	b2db      	uxtb	r3, r3
 8005474:	2b02      	cmp	r3, #2
 8005476:	d004      	beq.n	8005482 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	2280      	movs	r2, #128	; 0x80
 800547c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800547e:	2301      	movs	r3, #1
 8005480:	e00c      	b.n	800549c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	2205      	movs	r2, #5
 8005486:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	681a      	ldr	r2, [r3, #0]
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	f022 0201 	bic.w	r2, r2, #1
 8005498:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800549a:	2300      	movs	r3, #0
}
 800549c:	4618      	mov	r0, r3
 800549e:	370c      	adds	r7, #12
 80054a0:	46bd      	mov	sp, r7
 80054a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a6:	4770      	bx	lr

080054a8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80054a8:	b580      	push	{r7, lr}
 80054aa:	b086      	sub	sp, #24
 80054ac:	af00      	add	r7, sp, #0
 80054ae:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80054b0:	2300      	movs	r3, #0
 80054b2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80054b4:	4b92      	ldr	r3, [pc, #584]	; (8005700 <HAL_DMA_IRQHandler+0x258>)
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	4a92      	ldr	r2, [pc, #584]	; (8005704 <HAL_DMA_IRQHandler+0x25c>)
 80054ba:	fba2 2303 	umull	r2, r3, r2, r3
 80054be:	0a9b      	lsrs	r3, r3, #10
 80054c0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80054c6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80054c8:	693b      	ldr	r3, [r7, #16]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80054d2:	2208      	movs	r2, #8
 80054d4:	409a      	lsls	r2, r3
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	4013      	ands	r3, r2
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d01a      	beq.n	8005514 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	f003 0304 	and.w	r3, r3, #4
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d013      	beq.n	8005514 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	681a      	ldr	r2, [r3, #0]
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	f022 0204 	bic.w	r2, r2, #4
 80054fa:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005500:	2208      	movs	r2, #8
 8005502:	409a      	lsls	r2, r3
 8005504:	693b      	ldr	r3, [r7, #16]
 8005506:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800550c:	f043 0201 	orr.w	r2, r3, #1
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005518:	2201      	movs	r2, #1
 800551a:	409a      	lsls	r2, r3
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	4013      	ands	r3, r2
 8005520:	2b00      	cmp	r3, #0
 8005522:	d012      	beq.n	800554a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	695b      	ldr	r3, [r3, #20]
 800552a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800552e:	2b00      	cmp	r3, #0
 8005530:	d00b      	beq.n	800554a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005536:	2201      	movs	r2, #1
 8005538:	409a      	lsls	r2, r3
 800553a:	693b      	ldr	r3, [r7, #16]
 800553c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005542:	f043 0202 	orr.w	r2, r3, #2
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800554e:	2204      	movs	r2, #4
 8005550:	409a      	lsls	r2, r3
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	4013      	ands	r3, r2
 8005556:	2b00      	cmp	r3, #0
 8005558:	d012      	beq.n	8005580 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	f003 0302 	and.w	r3, r3, #2
 8005564:	2b00      	cmp	r3, #0
 8005566:	d00b      	beq.n	8005580 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800556c:	2204      	movs	r2, #4
 800556e:	409a      	lsls	r2, r3
 8005570:	693b      	ldr	r3, [r7, #16]
 8005572:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005578:	f043 0204 	orr.w	r2, r3, #4
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005584:	2210      	movs	r2, #16
 8005586:	409a      	lsls	r2, r3
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	4013      	ands	r3, r2
 800558c:	2b00      	cmp	r3, #0
 800558e:	d043      	beq.n	8005618 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	f003 0308 	and.w	r3, r3, #8
 800559a:	2b00      	cmp	r3, #0
 800559c:	d03c      	beq.n	8005618 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80055a2:	2210      	movs	r2, #16
 80055a4:	409a      	lsls	r2, r3
 80055a6:	693b      	ldr	r3, [r7, #16]
 80055a8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d018      	beq.n	80055ea <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d108      	bne.n	80055d8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d024      	beq.n	8005618 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055d2:	6878      	ldr	r0, [r7, #4]
 80055d4:	4798      	blx	r3
 80055d6:	e01f      	b.n	8005618 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d01b      	beq.n	8005618 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80055e4:	6878      	ldr	r0, [r7, #4]
 80055e6:	4798      	blx	r3
 80055e8:	e016      	b.n	8005618 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d107      	bne.n	8005608 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	681a      	ldr	r2, [r3, #0]
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	f022 0208 	bic.w	r2, r2, #8
 8005606:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800560c:	2b00      	cmp	r3, #0
 800560e:	d003      	beq.n	8005618 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005614:	6878      	ldr	r0, [r7, #4]
 8005616:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800561c:	2220      	movs	r2, #32
 800561e:	409a      	lsls	r2, r3
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	4013      	ands	r3, r2
 8005624:	2b00      	cmp	r3, #0
 8005626:	f000 808e 	beq.w	8005746 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	f003 0310 	and.w	r3, r3, #16
 8005634:	2b00      	cmp	r3, #0
 8005636:	f000 8086 	beq.w	8005746 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800563e:	2220      	movs	r2, #32
 8005640:	409a      	lsls	r2, r3
 8005642:	693b      	ldr	r3, [r7, #16]
 8005644:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800564c:	b2db      	uxtb	r3, r3
 800564e:	2b05      	cmp	r3, #5
 8005650:	d136      	bne.n	80056c0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	681a      	ldr	r2, [r3, #0]
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	f022 0216 	bic.w	r2, r2, #22
 8005660:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	695a      	ldr	r2, [r3, #20]
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005670:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005676:	2b00      	cmp	r3, #0
 8005678:	d103      	bne.n	8005682 <HAL_DMA_IRQHandler+0x1da>
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800567e:	2b00      	cmp	r3, #0
 8005680:	d007      	beq.n	8005692 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	681a      	ldr	r2, [r3, #0]
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	f022 0208 	bic.w	r2, r2, #8
 8005690:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005696:	223f      	movs	r2, #63	; 0x3f
 8005698:	409a      	lsls	r2, r3
 800569a:	693b      	ldr	r3, [r7, #16]
 800569c:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	2200      	movs	r2, #0
 80056a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	2201      	movs	r2, #1
 80056aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d07d      	beq.n	80057b2 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80056ba:	6878      	ldr	r0, [r7, #4]
 80056bc:	4798      	blx	r3
        }
        return;
 80056be:	e078      	b.n	80057b2 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d01c      	beq.n	8005708 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d108      	bne.n	80056ee <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d030      	beq.n	8005746 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80056e8:	6878      	ldr	r0, [r7, #4]
 80056ea:	4798      	blx	r3
 80056ec:	e02b      	b.n	8005746 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d027      	beq.n	8005746 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80056fa:	6878      	ldr	r0, [r7, #4]
 80056fc:	4798      	blx	r3
 80056fe:	e022      	b.n	8005746 <HAL_DMA_IRQHandler+0x29e>
 8005700:	20000000 	.word	0x20000000
 8005704:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005712:	2b00      	cmp	r3, #0
 8005714:	d10f      	bne.n	8005736 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	681a      	ldr	r2, [r3, #0]
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	f022 0210 	bic.w	r2, r2, #16
 8005724:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	2200      	movs	r2, #0
 800572a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	2201      	movs	r2, #1
 8005732:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800573a:	2b00      	cmp	r3, #0
 800573c:	d003      	beq.n	8005746 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005742:	6878      	ldr	r0, [r7, #4]
 8005744:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800574a:	2b00      	cmp	r3, #0
 800574c:	d032      	beq.n	80057b4 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005752:	f003 0301 	and.w	r3, r3, #1
 8005756:	2b00      	cmp	r3, #0
 8005758:	d022      	beq.n	80057a0 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	2205      	movs	r2, #5
 800575e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	681a      	ldr	r2, [r3, #0]
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	f022 0201 	bic.w	r2, r2, #1
 8005770:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8005772:	68bb      	ldr	r3, [r7, #8]
 8005774:	3301      	adds	r3, #1
 8005776:	60bb      	str	r3, [r7, #8]
 8005778:	697a      	ldr	r2, [r7, #20]
 800577a:	429a      	cmp	r2, r3
 800577c:	d307      	bcc.n	800578e <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	f003 0301 	and.w	r3, r3, #1
 8005788:	2b00      	cmp	r3, #0
 800578a:	d1f2      	bne.n	8005772 <HAL_DMA_IRQHandler+0x2ca>
 800578c:	e000      	b.n	8005790 <HAL_DMA_IRQHandler+0x2e8>
          break;
 800578e:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	2200      	movs	r2, #0
 8005794:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	2201      	movs	r2, #1
 800579c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d005      	beq.n	80057b4 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80057ac:	6878      	ldr	r0, [r7, #4]
 80057ae:	4798      	blx	r3
 80057b0:	e000      	b.n	80057b4 <HAL_DMA_IRQHandler+0x30c>
        return;
 80057b2:	bf00      	nop
    }
  }
}
 80057b4:	3718      	adds	r7, #24
 80057b6:	46bd      	mov	sp, r7
 80057b8:	bd80      	pop	{r7, pc}
 80057ba:	bf00      	nop

080057bc <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 80057bc:	b480      	push	{r7}
 80057be:	b083      	sub	sp, #12
 80057c0:	af00      	add	r7, sp, #0
 80057c2:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 80057c8:	4618      	mov	r0, r3
 80057ca:	370c      	adds	r7, #12
 80057cc:	46bd      	mov	sp, r7
 80057ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d2:	4770      	bx	lr

080057d4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80057d4:	b480      	push	{r7}
 80057d6:	b085      	sub	sp, #20
 80057d8:	af00      	add	r7, sp, #0
 80057da:	60f8      	str	r0, [r7, #12]
 80057dc:	60b9      	str	r1, [r7, #8]
 80057de:	607a      	str	r2, [r7, #4]
 80057e0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	681a      	ldr	r2, [r3, #0]
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80057f0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	683a      	ldr	r2, [r7, #0]
 80057f8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	689b      	ldr	r3, [r3, #8]
 80057fe:	2b40      	cmp	r3, #64	; 0x40
 8005800:	d108      	bne.n	8005814 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	687a      	ldr	r2, [r7, #4]
 8005808:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	68ba      	ldr	r2, [r7, #8]
 8005810:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8005812:	e007      	b.n	8005824 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	68ba      	ldr	r2, [r7, #8]
 800581a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	687a      	ldr	r2, [r7, #4]
 8005822:	60da      	str	r2, [r3, #12]
}
 8005824:	bf00      	nop
 8005826:	3714      	adds	r7, #20
 8005828:	46bd      	mov	sp, r7
 800582a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800582e:	4770      	bx	lr

08005830 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005830:	b480      	push	{r7}
 8005832:	b085      	sub	sp, #20
 8005834:	af00      	add	r7, sp, #0
 8005836:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	b2db      	uxtb	r3, r3
 800583e:	3b10      	subs	r3, #16
 8005840:	4a14      	ldr	r2, [pc, #80]	; (8005894 <DMA_CalcBaseAndBitshift+0x64>)
 8005842:	fba2 2303 	umull	r2, r3, r2, r3
 8005846:	091b      	lsrs	r3, r3, #4
 8005848:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800584a:	4a13      	ldr	r2, [pc, #76]	; (8005898 <DMA_CalcBaseAndBitshift+0x68>)
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	4413      	add	r3, r2
 8005850:	781b      	ldrb	r3, [r3, #0]
 8005852:	461a      	mov	r2, r3
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	2b03      	cmp	r3, #3
 800585c:	d909      	bls.n	8005872 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8005866:	f023 0303 	bic.w	r3, r3, #3
 800586a:	1d1a      	adds	r2, r3, #4
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	659a      	str	r2, [r3, #88]	; 0x58
 8005870:	e007      	b.n	8005882 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800587a:	f023 0303 	bic.w	r3, r3, #3
 800587e:	687a      	ldr	r2, [r7, #4]
 8005880:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8005886:	4618      	mov	r0, r3
 8005888:	3714      	adds	r7, #20
 800588a:	46bd      	mov	sp, r7
 800588c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005890:	4770      	bx	lr
 8005892:	bf00      	nop
 8005894:	aaaaaaab 	.word	0xaaaaaaab
 8005898:	080159e0 	.word	0x080159e0

0800589c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800589c:	b480      	push	{r7}
 800589e:	b085      	sub	sp, #20
 80058a0:	af00      	add	r7, sp, #0
 80058a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80058a4:	2300      	movs	r3, #0
 80058a6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058ac:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	699b      	ldr	r3, [r3, #24]
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d11f      	bne.n	80058f6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80058b6:	68bb      	ldr	r3, [r7, #8]
 80058b8:	2b03      	cmp	r3, #3
 80058ba:	d855      	bhi.n	8005968 <DMA_CheckFifoParam+0xcc>
 80058bc:	a201      	add	r2, pc, #4	; (adr r2, 80058c4 <DMA_CheckFifoParam+0x28>)
 80058be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058c2:	bf00      	nop
 80058c4:	080058d5 	.word	0x080058d5
 80058c8:	080058e7 	.word	0x080058e7
 80058cc:	080058d5 	.word	0x080058d5
 80058d0:	08005969 	.word	0x08005969
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058d8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d045      	beq.n	800596c <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 80058e0:	2301      	movs	r3, #1
 80058e2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80058e4:	e042      	b.n	800596c <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058ea:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80058ee:	d13f      	bne.n	8005970 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 80058f0:	2301      	movs	r3, #1
 80058f2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80058f4:	e03c      	b.n	8005970 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	699b      	ldr	r3, [r3, #24]
 80058fa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80058fe:	d121      	bne.n	8005944 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8005900:	68bb      	ldr	r3, [r7, #8]
 8005902:	2b03      	cmp	r3, #3
 8005904:	d836      	bhi.n	8005974 <DMA_CheckFifoParam+0xd8>
 8005906:	a201      	add	r2, pc, #4	; (adr r2, 800590c <DMA_CheckFifoParam+0x70>)
 8005908:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800590c:	0800591d 	.word	0x0800591d
 8005910:	08005923 	.word	0x08005923
 8005914:	0800591d 	.word	0x0800591d
 8005918:	08005935 	.word	0x08005935
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800591c:	2301      	movs	r3, #1
 800591e:	73fb      	strb	r3, [r7, #15]
      break;
 8005920:	e02f      	b.n	8005982 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005926:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800592a:	2b00      	cmp	r3, #0
 800592c:	d024      	beq.n	8005978 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 800592e:	2301      	movs	r3, #1
 8005930:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005932:	e021      	b.n	8005978 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005938:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800593c:	d11e      	bne.n	800597c <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 800593e:	2301      	movs	r3, #1
 8005940:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8005942:	e01b      	b.n	800597c <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8005944:	68bb      	ldr	r3, [r7, #8]
 8005946:	2b02      	cmp	r3, #2
 8005948:	d902      	bls.n	8005950 <DMA_CheckFifoParam+0xb4>
 800594a:	2b03      	cmp	r3, #3
 800594c:	d003      	beq.n	8005956 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800594e:	e018      	b.n	8005982 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8005950:	2301      	movs	r3, #1
 8005952:	73fb      	strb	r3, [r7, #15]
      break;
 8005954:	e015      	b.n	8005982 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800595a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800595e:	2b00      	cmp	r3, #0
 8005960:	d00e      	beq.n	8005980 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8005962:	2301      	movs	r3, #1
 8005964:	73fb      	strb	r3, [r7, #15]
      break;
 8005966:	e00b      	b.n	8005980 <DMA_CheckFifoParam+0xe4>
      break;
 8005968:	bf00      	nop
 800596a:	e00a      	b.n	8005982 <DMA_CheckFifoParam+0xe6>
      break;
 800596c:	bf00      	nop
 800596e:	e008      	b.n	8005982 <DMA_CheckFifoParam+0xe6>
      break;
 8005970:	bf00      	nop
 8005972:	e006      	b.n	8005982 <DMA_CheckFifoParam+0xe6>
      break;
 8005974:	bf00      	nop
 8005976:	e004      	b.n	8005982 <DMA_CheckFifoParam+0xe6>
      break;
 8005978:	bf00      	nop
 800597a:	e002      	b.n	8005982 <DMA_CheckFifoParam+0xe6>
      break;   
 800597c:	bf00      	nop
 800597e:	e000      	b.n	8005982 <DMA_CheckFifoParam+0xe6>
      break;
 8005980:	bf00      	nop
    }
  } 
  
  return status; 
 8005982:	7bfb      	ldrb	r3, [r7, #15]
}
 8005984:	4618      	mov	r0, r3
 8005986:	3714      	adds	r7, #20
 8005988:	46bd      	mov	sp, r7
 800598a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800598e:	4770      	bx	lr

08005990 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005990:	b480      	push	{r7}
 8005992:	b089      	sub	sp, #36	; 0x24
 8005994:	af00      	add	r7, sp, #0
 8005996:	6078      	str	r0, [r7, #4]
 8005998:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800599a:	2300      	movs	r3, #0
 800599c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800599e:	2300      	movs	r3, #0
 80059a0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80059a2:	2300      	movs	r3, #0
 80059a4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80059a6:	2300      	movs	r3, #0
 80059a8:	61fb      	str	r3, [r7, #28]
 80059aa:	e16b      	b.n	8005c84 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80059ac:	2201      	movs	r2, #1
 80059ae:	69fb      	ldr	r3, [r7, #28]
 80059b0:	fa02 f303 	lsl.w	r3, r2, r3
 80059b4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80059b6:	683b      	ldr	r3, [r7, #0]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	697a      	ldr	r2, [r7, #20]
 80059bc:	4013      	ands	r3, r2
 80059be:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80059c0:	693a      	ldr	r2, [r7, #16]
 80059c2:	697b      	ldr	r3, [r7, #20]
 80059c4:	429a      	cmp	r2, r3
 80059c6:	f040 815a 	bne.w	8005c7e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80059ca:	683b      	ldr	r3, [r7, #0]
 80059cc:	685b      	ldr	r3, [r3, #4]
 80059ce:	2b01      	cmp	r3, #1
 80059d0:	d00b      	beq.n	80059ea <HAL_GPIO_Init+0x5a>
 80059d2:	683b      	ldr	r3, [r7, #0]
 80059d4:	685b      	ldr	r3, [r3, #4]
 80059d6:	2b02      	cmp	r3, #2
 80059d8:	d007      	beq.n	80059ea <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80059da:	683b      	ldr	r3, [r7, #0]
 80059dc:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80059de:	2b11      	cmp	r3, #17
 80059e0:	d003      	beq.n	80059ea <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80059e2:	683b      	ldr	r3, [r7, #0]
 80059e4:	685b      	ldr	r3, [r3, #4]
 80059e6:	2b12      	cmp	r3, #18
 80059e8:	d130      	bne.n	8005a4c <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	689b      	ldr	r3, [r3, #8]
 80059ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80059f0:	69fb      	ldr	r3, [r7, #28]
 80059f2:	005b      	lsls	r3, r3, #1
 80059f4:	2203      	movs	r2, #3
 80059f6:	fa02 f303 	lsl.w	r3, r2, r3
 80059fa:	43db      	mvns	r3, r3
 80059fc:	69ba      	ldr	r2, [r7, #24]
 80059fe:	4013      	ands	r3, r2
 8005a00:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005a02:	683b      	ldr	r3, [r7, #0]
 8005a04:	68da      	ldr	r2, [r3, #12]
 8005a06:	69fb      	ldr	r3, [r7, #28]
 8005a08:	005b      	lsls	r3, r3, #1
 8005a0a:	fa02 f303 	lsl.w	r3, r2, r3
 8005a0e:	69ba      	ldr	r2, [r7, #24]
 8005a10:	4313      	orrs	r3, r2
 8005a12:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	69ba      	ldr	r2, [r7, #24]
 8005a18:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	685b      	ldr	r3, [r3, #4]
 8005a1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005a20:	2201      	movs	r2, #1
 8005a22:	69fb      	ldr	r3, [r7, #28]
 8005a24:	fa02 f303 	lsl.w	r3, r2, r3
 8005a28:	43db      	mvns	r3, r3
 8005a2a:	69ba      	ldr	r2, [r7, #24]
 8005a2c:	4013      	ands	r3, r2
 8005a2e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8005a30:	683b      	ldr	r3, [r7, #0]
 8005a32:	685b      	ldr	r3, [r3, #4]
 8005a34:	091b      	lsrs	r3, r3, #4
 8005a36:	f003 0201 	and.w	r2, r3, #1
 8005a3a:	69fb      	ldr	r3, [r7, #28]
 8005a3c:	fa02 f303 	lsl.w	r3, r2, r3
 8005a40:	69ba      	ldr	r2, [r7, #24]
 8005a42:	4313      	orrs	r3, r2
 8005a44:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	69ba      	ldr	r2, [r7, #24]
 8005a4a:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	68db      	ldr	r3, [r3, #12]
 8005a50:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005a52:	69fb      	ldr	r3, [r7, #28]
 8005a54:	005b      	lsls	r3, r3, #1
 8005a56:	2203      	movs	r2, #3
 8005a58:	fa02 f303 	lsl.w	r3, r2, r3
 8005a5c:	43db      	mvns	r3, r3
 8005a5e:	69ba      	ldr	r2, [r7, #24]
 8005a60:	4013      	ands	r3, r2
 8005a62:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005a64:	683b      	ldr	r3, [r7, #0]
 8005a66:	689a      	ldr	r2, [r3, #8]
 8005a68:	69fb      	ldr	r3, [r7, #28]
 8005a6a:	005b      	lsls	r3, r3, #1
 8005a6c:	fa02 f303 	lsl.w	r3, r2, r3
 8005a70:	69ba      	ldr	r2, [r7, #24]
 8005a72:	4313      	orrs	r3, r2
 8005a74:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	69ba      	ldr	r2, [r7, #24]
 8005a7a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005a7c:	683b      	ldr	r3, [r7, #0]
 8005a7e:	685b      	ldr	r3, [r3, #4]
 8005a80:	2b02      	cmp	r3, #2
 8005a82:	d003      	beq.n	8005a8c <HAL_GPIO_Init+0xfc>
 8005a84:	683b      	ldr	r3, [r7, #0]
 8005a86:	685b      	ldr	r3, [r3, #4]
 8005a88:	2b12      	cmp	r3, #18
 8005a8a:	d123      	bne.n	8005ad4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005a8c:	69fb      	ldr	r3, [r7, #28]
 8005a8e:	08da      	lsrs	r2, r3, #3
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	3208      	adds	r2, #8
 8005a94:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005a98:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005a9a:	69fb      	ldr	r3, [r7, #28]
 8005a9c:	f003 0307 	and.w	r3, r3, #7
 8005aa0:	009b      	lsls	r3, r3, #2
 8005aa2:	220f      	movs	r2, #15
 8005aa4:	fa02 f303 	lsl.w	r3, r2, r3
 8005aa8:	43db      	mvns	r3, r3
 8005aaa:	69ba      	ldr	r2, [r7, #24]
 8005aac:	4013      	ands	r3, r2
 8005aae:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005ab0:	683b      	ldr	r3, [r7, #0]
 8005ab2:	691a      	ldr	r2, [r3, #16]
 8005ab4:	69fb      	ldr	r3, [r7, #28]
 8005ab6:	f003 0307 	and.w	r3, r3, #7
 8005aba:	009b      	lsls	r3, r3, #2
 8005abc:	fa02 f303 	lsl.w	r3, r2, r3
 8005ac0:	69ba      	ldr	r2, [r7, #24]
 8005ac2:	4313      	orrs	r3, r2
 8005ac4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005ac6:	69fb      	ldr	r3, [r7, #28]
 8005ac8:	08da      	lsrs	r2, r3, #3
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	3208      	adds	r2, #8
 8005ace:	69b9      	ldr	r1, [r7, #24]
 8005ad0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005ada:	69fb      	ldr	r3, [r7, #28]
 8005adc:	005b      	lsls	r3, r3, #1
 8005ade:	2203      	movs	r2, #3
 8005ae0:	fa02 f303 	lsl.w	r3, r2, r3
 8005ae4:	43db      	mvns	r3, r3
 8005ae6:	69ba      	ldr	r2, [r7, #24]
 8005ae8:	4013      	ands	r3, r2
 8005aea:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005aec:	683b      	ldr	r3, [r7, #0]
 8005aee:	685b      	ldr	r3, [r3, #4]
 8005af0:	f003 0203 	and.w	r2, r3, #3
 8005af4:	69fb      	ldr	r3, [r7, #28]
 8005af6:	005b      	lsls	r3, r3, #1
 8005af8:	fa02 f303 	lsl.w	r3, r2, r3
 8005afc:	69ba      	ldr	r2, [r7, #24]
 8005afe:	4313      	orrs	r3, r2
 8005b00:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	69ba      	ldr	r2, [r7, #24]
 8005b06:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8005b08:	683b      	ldr	r3, [r7, #0]
 8005b0a:	685b      	ldr	r3, [r3, #4]
 8005b0c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	f000 80b4 	beq.w	8005c7e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005b16:	2300      	movs	r3, #0
 8005b18:	60fb      	str	r3, [r7, #12]
 8005b1a:	4b5f      	ldr	r3, [pc, #380]	; (8005c98 <HAL_GPIO_Init+0x308>)
 8005b1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b1e:	4a5e      	ldr	r2, [pc, #376]	; (8005c98 <HAL_GPIO_Init+0x308>)
 8005b20:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005b24:	6453      	str	r3, [r2, #68]	; 0x44
 8005b26:	4b5c      	ldr	r3, [pc, #368]	; (8005c98 <HAL_GPIO_Init+0x308>)
 8005b28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b2a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005b2e:	60fb      	str	r3, [r7, #12]
 8005b30:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005b32:	4a5a      	ldr	r2, [pc, #360]	; (8005c9c <HAL_GPIO_Init+0x30c>)
 8005b34:	69fb      	ldr	r3, [r7, #28]
 8005b36:	089b      	lsrs	r3, r3, #2
 8005b38:	3302      	adds	r3, #2
 8005b3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005b3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005b40:	69fb      	ldr	r3, [r7, #28]
 8005b42:	f003 0303 	and.w	r3, r3, #3
 8005b46:	009b      	lsls	r3, r3, #2
 8005b48:	220f      	movs	r2, #15
 8005b4a:	fa02 f303 	lsl.w	r3, r2, r3
 8005b4e:	43db      	mvns	r3, r3
 8005b50:	69ba      	ldr	r2, [r7, #24]
 8005b52:	4013      	ands	r3, r2
 8005b54:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	4a51      	ldr	r2, [pc, #324]	; (8005ca0 <HAL_GPIO_Init+0x310>)
 8005b5a:	4293      	cmp	r3, r2
 8005b5c:	d02b      	beq.n	8005bb6 <HAL_GPIO_Init+0x226>
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	4a50      	ldr	r2, [pc, #320]	; (8005ca4 <HAL_GPIO_Init+0x314>)
 8005b62:	4293      	cmp	r3, r2
 8005b64:	d025      	beq.n	8005bb2 <HAL_GPIO_Init+0x222>
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	4a4f      	ldr	r2, [pc, #316]	; (8005ca8 <HAL_GPIO_Init+0x318>)
 8005b6a:	4293      	cmp	r3, r2
 8005b6c:	d01f      	beq.n	8005bae <HAL_GPIO_Init+0x21e>
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	4a4e      	ldr	r2, [pc, #312]	; (8005cac <HAL_GPIO_Init+0x31c>)
 8005b72:	4293      	cmp	r3, r2
 8005b74:	d019      	beq.n	8005baa <HAL_GPIO_Init+0x21a>
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	4a4d      	ldr	r2, [pc, #308]	; (8005cb0 <HAL_GPIO_Init+0x320>)
 8005b7a:	4293      	cmp	r3, r2
 8005b7c:	d013      	beq.n	8005ba6 <HAL_GPIO_Init+0x216>
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	4a4c      	ldr	r2, [pc, #304]	; (8005cb4 <HAL_GPIO_Init+0x324>)
 8005b82:	4293      	cmp	r3, r2
 8005b84:	d00d      	beq.n	8005ba2 <HAL_GPIO_Init+0x212>
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	4a4b      	ldr	r2, [pc, #300]	; (8005cb8 <HAL_GPIO_Init+0x328>)
 8005b8a:	4293      	cmp	r3, r2
 8005b8c:	d007      	beq.n	8005b9e <HAL_GPIO_Init+0x20e>
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	4a4a      	ldr	r2, [pc, #296]	; (8005cbc <HAL_GPIO_Init+0x32c>)
 8005b92:	4293      	cmp	r3, r2
 8005b94:	d101      	bne.n	8005b9a <HAL_GPIO_Init+0x20a>
 8005b96:	2307      	movs	r3, #7
 8005b98:	e00e      	b.n	8005bb8 <HAL_GPIO_Init+0x228>
 8005b9a:	2308      	movs	r3, #8
 8005b9c:	e00c      	b.n	8005bb8 <HAL_GPIO_Init+0x228>
 8005b9e:	2306      	movs	r3, #6
 8005ba0:	e00a      	b.n	8005bb8 <HAL_GPIO_Init+0x228>
 8005ba2:	2305      	movs	r3, #5
 8005ba4:	e008      	b.n	8005bb8 <HAL_GPIO_Init+0x228>
 8005ba6:	2304      	movs	r3, #4
 8005ba8:	e006      	b.n	8005bb8 <HAL_GPIO_Init+0x228>
 8005baa:	2303      	movs	r3, #3
 8005bac:	e004      	b.n	8005bb8 <HAL_GPIO_Init+0x228>
 8005bae:	2302      	movs	r3, #2
 8005bb0:	e002      	b.n	8005bb8 <HAL_GPIO_Init+0x228>
 8005bb2:	2301      	movs	r3, #1
 8005bb4:	e000      	b.n	8005bb8 <HAL_GPIO_Init+0x228>
 8005bb6:	2300      	movs	r3, #0
 8005bb8:	69fa      	ldr	r2, [r7, #28]
 8005bba:	f002 0203 	and.w	r2, r2, #3
 8005bbe:	0092      	lsls	r2, r2, #2
 8005bc0:	4093      	lsls	r3, r2
 8005bc2:	69ba      	ldr	r2, [r7, #24]
 8005bc4:	4313      	orrs	r3, r2
 8005bc6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005bc8:	4934      	ldr	r1, [pc, #208]	; (8005c9c <HAL_GPIO_Init+0x30c>)
 8005bca:	69fb      	ldr	r3, [r7, #28]
 8005bcc:	089b      	lsrs	r3, r3, #2
 8005bce:	3302      	adds	r3, #2
 8005bd0:	69ba      	ldr	r2, [r7, #24]
 8005bd2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005bd6:	4b3a      	ldr	r3, [pc, #232]	; (8005cc0 <HAL_GPIO_Init+0x330>)
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005bdc:	693b      	ldr	r3, [r7, #16]
 8005bde:	43db      	mvns	r3, r3
 8005be0:	69ba      	ldr	r2, [r7, #24]
 8005be2:	4013      	ands	r3, r2
 8005be4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8005be6:	683b      	ldr	r3, [r7, #0]
 8005be8:	685b      	ldr	r3, [r3, #4]
 8005bea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d003      	beq.n	8005bfa <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8005bf2:	69ba      	ldr	r2, [r7, #24]
 8005bf4:	693b      	ldr	r3, [r7, #16]
 8005bf6:	4313      	orrs	r3, r2
 8005bf8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005bfa:	4a31      	ldr	r2, [pc, #196]	; (8005cc0 <HAL_GPIO_Init+0x330>)
 8005bfc:	69bb      	ldr	r3, [r7, #24]
 8005bfe:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8005c00:	4b2f      	ldr	r3, [pc, #188]	; (8005cc0 <HAL_GPIO_Init+0x330>)
 8005c02:	685b      	ldr	r3, [r3, #4]
 8005c04:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005c06:	693b      	ldr	r3, [r7, #16]
 8005c08:	43db      	mvns	r3, r3
 8005c0a:	69ba      	ldr	r2, [r7, #24]
 8005c0c:	4013      	ands	r3, r2
 8005c0e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005c10:	683b      	ldr	r3, [r7, #0]
 8005c12:	685b      	ldr	r3, [r3, #4]
 8005c14:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d003      	beq.n	8005c24 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8005c1c:	69ba      	ldr	r2, [r7, #24]
 8005c1e:	693b      	ldr	r3, [r7, #16]
 8005c20:	4313      	orrs	r3, r2
 8005c22:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005c24:	4a26      	ldr	r2, [pc, #152]	; (8005cc0 <HAL_GPIO_Init+0x330>)
 8005c26:	69bb      	ldr	r3, [r7, #24]
 8005c28:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005c2a:	4b25      	ldr	r3, [pc, #148]	; (8005cc0 <HAL_GPIO_Init+0x330>)
 8005c2c:	689b      	ldr	r3, [r3, #8]
 8005c2e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005c30:	693b      	ldr	r3, [r7, #16]
 8005c32:	43db      	mvns	r3, r3
 8005c34:	69ba      	ldr	r2, [r7, #24]
 8005c36:	4013      	ands	r3, r2
 8005c38:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8005c3a:	683b      	ldr	r3, [r7, #0]
 8005c3c:	685b      	ldr	r3, [r3, #4]
 8005c3e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d003      	beq.n	8005c4e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8005c46:	69ba      	ldr	r2, [r7, #24]
 8005c48:	693b      	ldr	r3, [r7, #16]
 8005c4a:	4313      	orrs	r3, r2
 8005c4c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005c4e:	4a1c      	ldr	r2, [pc, #112]	; (8005cc0 <HAL_GPIO_Init+0x330>)
 8005c50:	69bb      	ldr	r3, [r7, #24]
 8005c52:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005c54:	4b1a      	ldr	r3, [pc, #104]	; (8005cc0 <HAL_GPIO_Init+0x330>)
 8005c56:	68db      	ldr	r3, [r3, #12]
 8005c58:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005c5a:	693b      	ldr	r3, [r7, #16]
 8005c5c:	43db      	mvns	r3, r3
 8005c5e:	69ba      	ldr	r2, [r7, #24]
 8005c60:	4013      	ands	r3, r2
 8005c62:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005c64:	683b      	ldr	r3, [r7, #0]
 8005c66:	685b      	ldr	r3, [r3, #4]
 8005c68:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d003      	beq.n	8005c78 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8005c70:	69ba      	ldr	r2, [r7, #24]
 8005c72:	693b      	ldr	r3, [r7, #16]
 8005c74:	4313      	orrs	r3, r2
 8005c76:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005c78:	4a11      	ldr	r2, [pc, #68]	; (8005cc0 <HAL_GPIO_Init+0x330>)
 8005c7a:	69bb      	ldr	r3, [r7, #24]
 8005c7c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005c7e:	69fb      	ldr	r3, [r7, #28]
 8005c80:	3301      	adds	r3, #1
 8005c82:	61fb      	str	r3, [r7, #28]
 8005c84:	69fb      	ldr	r3, [r7, #28]
 8005c86:	2b0f      	cmp	r3, #15
 8005c88:	f67f ae90 	bls.w	80059ac <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005c8c:	bf00      	nop
 8005c8e:	3724      	adds	r7, #36	; 0x24
 8005c90:	46bd      	mov	sp, r7
 8005c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c96:	4770      	bx	lr
 8005c98:	40023800 	.word	0x40023800
 8005c9c:	40013800 	.word	0x40013800
 8005ca0:	40020000 	.word	0x40020000
 8005ca4:	40020400 	.word	0x40020400
 8005ca8:	40020800 	.word	0x40020800
 8005cac:	40020c00 	.word	0x40020c00
 8005cb0:	40021000 	.word	0x40021000
 8005cb4:	40021400 	.word	0x40021400
 8005cb8:	40021800 	.word	0x40021800
 8005cbc:	40021c00 	.word	0x40021c00
 8005cc0:	40013c00 	.word	0x40013c00

08005cc4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005cc4:	b480      	push	{r7}
 8005cc6:	b085      	sub	sp, #20
 8005cc8:	af00      	add	r7, sp, #0
 8005cca:	6078      	str	r0, [r7, #4]
 8005ccc:	460b      	mov	r3, r1
 8005cce:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	691a      	ldr	r2, [r3, #16]
 8005cd4:	887b      	ldrh	r3, [r7, #2]
 8005cd6:	4013      	ands	r3, r2
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d002      	beq.n	8005ce2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005cdc:	2301      	movs	r3, #1
 8005cde:	73fb      	strb	r3, [r7, #15]
 8005ce0:	e001      	b.n	8005ce6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005ce2:	2300      	movs	r3, #0
 8005ce4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005ce6:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ce8:	4618      	mov	r0, r3
 8005cea:	3714      	adds	r7, #20
 8005cec:	46bd      	mov	sp, r7
 8005cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf2:	4770      	bx	lr

08005cf4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005cf4:	b480      	push	{r7}
 8005cf6:	b083      	sub	sp, #12
 8005cf8:	af00      	add	r7, sp, #0
 8005cfa:	6078      	str	r0, [r7, #4]
 8005cfc:	460b      	mov	r3, r1
 8005cfe:	807b      	strh	r3, [r7, #2]
 8005d00:	4613      	mov	r3, r2
 8005d02:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005d04:	787b      	ldrb	r3, [r7, #1]
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d003      	beq.n	8005d12 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005d0a:	887a      	ldrh	r2, [r7, #2]
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005d10:	e003      	b.n	8005d1a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8005d12:	887b      	ldrh	r3, [r7, #2]
 8005d14:	041a      	lsls	r2, r3, #16
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	619a      	str	r2, [r3, #24]
}
 8005d1a:	bf00      	nop
 8005d1c:	370c      	adds	r7, #12
 8005d1e:	46bd      	mov	sp, r7
 8005d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d24:	4770      	bx	lr
	...

08005d28 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005d28:	b580      	push	{r7, lr}
 8005d2a:	b082      	sub	sp, #8
 8005d2c:	af00      	add	r7, sp, #0
 8005d2e:	4603      	mov	r3, r0
 8005d30:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8005d32:	4b08      	ldr	r3, [pc, #32]	; (8005d54 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005d34:	695a      	ldr	r2, [r3, #20]
 8005d36:	88fb      	ldrh	r3, [r7, #6]
 8005d38:	4013      	ands	r3, r2
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d006      	beq.n	8005d4c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005d3e:	4a05      	ldr	r2, [pc, #20]	; (8005d54 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005d40:	88fb      	ldrh	r3, [r7, #6]
 8005d42:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005d44:	88fb      	ldrh	r3, [r7, #6]
 8005d46:	4618      	mov	r0, r3
 8005d48:	f000 f806 	bl	8005d58 <HAL_GPIO_EXTI_Callback>
  }
}
 8005d4c:	bf00      	nop
 8005d4e:	3708      	adds	r7, #8
 8005d50:	46bd      	mov	sp, r7
 8005d52:	bd80      	pop	{r7, pc}
 8005d54:	40013c00 	.word	0x40013c00

08005d58 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8005d58:	b480      	push	{r7}
 8005d5a:	b083      	sub	sp, #12
 8005d5c:	af00      	add	r7, sp, #0
 8005d5e:	4603      	mov	r3, r0
 8005d60:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8005d62:	bf00      	nop
 8005d64:	370c      	adds	r7, #12
 8005d66:	46bd      	mov	sp, r7
 8005d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d6c:	4770      	bx	lr
	...

08005d70 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005d70:	b580      	push	{r7, lr}
 8005d72:	b084      	sub	sp, #16
 8005d74:	af00      	add	r7, sp, #0
 8005d76:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d101      	bne.n	8005d82 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005d7e:	2301      	movs	r3, #1
 8005d80:	e11f      	b.n	8005fc2 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d88:	b2db      	uxtb	r3, r3
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d106      	bne.n	8005d9c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	2200      	movs	r2, #0
 8005d92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8005d96:	6878      	ldr	r0, [r7, #4]
 8005d98:	f7fe fcc8 	bl	800472c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	2224      	movs	r2, #36	; 0x24
 8005da0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	681a      	ldr	r2, [r3, #0]
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	f022 0201 	bic.w	r2, r2, #1
 8005db2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	681a      	ldr	r2, [r3, #0]
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005dc2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	681a      	ldr	r2, [r3, #0]
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005dd2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005dd4:	f002 fd28 	bl	8008828 <HAL_RCC_GetPCLK1Freq>
 8005dd8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	685b      	ldr	r3, [r3, #4]
 8005dde:	4a7b      	ldr	r2, [pc, #492]	; (8005fcc <HAL_I2C_Init+0x25c>)
 8005de0:	4293      	cmp	r3, r2
 8005de2:	d807      	bhi.n	8005df4 <HAL_I2C_Init+0x84>
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	4a7a      	ldr	r2, [pc, #488]	; (8005fd0 <HAL_I2C_Init+0x260>)
 8005de8:	4293      	cmp	r3, r2
 8005dea:	bf94      	ite	ls
 8005dec:	2301      	movls	r3, #1
 8005dee:	2300      	movhi	r3, #0
 8005df0:	b2db      	uxtb	r3, r3
 8005df2:	e006      	b.n	8005e02 <HAL_I2C_Init+0x92>
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	4a77      	ldr	r2, [pc, #476]	; (8005fd4 <HAL_I2C_Init+0x264>)
 8005df8:	4293      	cmp	r3, r2
 8005dfa:	bf94      	ite	ls
 8005dfc:	2301      	movls	r3, #1
 8005dfe:	2300      	movhi	r3, #0
 8005e00:	b2db      	uxtb	r3, r3
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d001      	beq.n	8005e0a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8005e06:	2301      	movs	r3, #1
 8005e08:	e0db      	b.n	8005fc2 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	4a72      	ldr	r2, [pc, #456]	; (8005fd8 <HAL_I2C_Init+0x268>)
 8005e0e:	fba2 2303 	umull	r2, r3, r2, r3
 8005e12:	0c9b      	lsrs	r3, r3, #18
 8005e14:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	685b      	ldr	r3, [r3, #4]
 8005e1c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	68ba      	ldr	r2, [r7, #8]
 8005e26:	430a      	orrs	r2, r1
 8005e28:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	6a1b      	ldr	r3, [r3, #32]
 8005e30:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	685b      	ldr	r3, [r3, #4]
 8005e38:	4a64      	ldr	r2, [pc, #400]	; (8005fcc <HAL_I2C_Init+0x25c>)
 8005e3a:	4293      	cmp	r3, r2
 8005e3c:	d802      	bhi.n	8005e44 <HAL_I2C_Init+0xd4>
 8005e3e:	68bb      	ldr	r3, [r7, #8]
 8005e40:	3301      	adds	r3, #1
 8005e42:	e009      	b.n	8005e58 <HAL_I2C_Init+0xe8>
 8005e44:	68bb      	ldr	r3, [r7, #8]
 8005e46:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8005e4a:	fb02 f303 	mul.w	r3, r2, r3
 8005e4e:	4a63      	ldr	r2, [pc, #396]	; (8005fdc <HAL_I2C_Init+0x26c>)
 8005e50:	fba2 2303 	umull	r2, r3, r2, r3
 8005e54:	099b      	lsrs	r3, r3, #6
 8005e56:	3301      	adds	r3, #1
 8005e58:	687a      	ldr	r2, [r7, #4]
 8005e5a:	6812      	ldr	r2, [r2, #0]
 8005e5c:	430b      	orrs	r3, r1
 8005e5e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	69db      	ldr	r3, [r3, #28]
 8005e66:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8005e6a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	685b      	ldr	r3, [r3, #4]
 8005e72:	4956      	ldr	r1, [pc, #344]	; (8005fcc <HAL_I2C_Init+0x25c>)
 8005e74:	428b      	cmp	r3, r1
 8005e76:	d80d      	bhi.n	8005e94 <HAL_I2C_Init+0x124>
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	1e59      	subs	r1, r3, #1
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	685b      	ldr	r3, [r3, #4]
 8005e80:	005b      	lsls	r3, r3, #1
 8005e82:	fbb1 f3f3 	udiv	r3, r1, r3
 8005e86:	3301      	adds	r3, #1
 8005e88:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005e8c:	2b04      	cmp	r3, #4
 8005e8e:	bf38      	it	cc
 8005e90:	2304      	movcc	r3, #4
 8005e92:	e04f      	b.n	8005f34 <HAL_I2C_Init+0x1c4>
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	689b      	ldr	r3, [r3, #8]
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d111      	bne.n	8005ec0 <HAL_I2C_Init+0x150>
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	1e58      	subs	r0, r3, #1
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	6859      	ldr	r1, [r3, #4]
 8005ea4:	460b      	mov	r3, r1
 8005ea6:	005b      	lsls	r3, r3, #1
 8005ea8:	440b      	add	r3, r1
 8005eaa:	fbb0 f3f3 	udiv	r3, r0, r3
 8005eae:	3301      	adds	r3, #1
 8005eb0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	bf0c      	ite	eq
 8005eb8:	2301      	moveq	r3, #1
 8005eba:	2300      	movne	r3, #0
 8005ebc:	b2db      	uxtb	r3, r3
 8005ebe:	e012      	b.n	8005ee6 <HAL_I2C_Init+0x176>
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	1e58      	subs	r0, r3, #1
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	6859      	ldr	r1, [r3, #4]
 8005ec8:	460b      	mov	r3, r1
 8005eca:	009b      	lsls	r3, r3, #2
 8005ecc:	440b      	add	r3, r1
 8005ece:	0099      	lsls	r1, r3, #2
 8005ed0:	440b      	add	r3, r1
 8005ed2:	fbb0 f3f3 	udiv	r3, r0, r3
 8005ed6:	3301      	adds	r3, #1
 8005ed8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	bf0c      	ite	eq
 8005ee0:	2301      	moveq	r3, #1
 8005ee2:	2300      	movne	r3, #0
 8005ee4:	b2db      	uxtb	r3, r3
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d001      	beq.n	8005eee <HAL_I2C_Init+0x17e>
 8005eea:	2301      	movs	r3, #1
 8005eec:	e022      	b.n	8005f34 <HAL_I2C_Init+0x1c4>
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	689b      	ldr	r3, [r3, #8]
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d10e      	bne.n	8005f14 <HAL_I2C_Init+0x1a4>
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	1e58      	subs	r0, r3, #1
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	6859      	ldr	r1, [r3, #4]
 8005efe:	460b      	mov	r3, r1
 8005f00:	005b      	lsls	r3, r3, #1
 8005f02:	440b      	add	r3, r1
 8005f04:	fbb0 f3f3 	udiv	r3, r0, r3
 8005f08:	3301      	adds	r3, #1
 8005f0a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005f0e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005f12:	e00f      	b.n	8005f34 <HAL_I2C_Init+0x1c4>
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	1e58      	subs	r0, r3, #1
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	6859      	ldr	r1, [r3, #4]
 8005f1c:	460b      	mov	r3, r1
 8005f1e:	009b      	lsls	r3, r3, #2
 8005f20:	440b      	add	r3, r1
 8005f22:	0099      	lsls	r1, r3, #2
 8005f24:	440b      	add	r3, r1
 8005f26:	fbb0 f3f3 	udiv	r3, r0, r3
 8005f2a:	3301      	adds	r3, #1
 8005f2c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005f30:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005f34:	6879      	ldr	r1, [r7, #4]
 8005f36:	6809      	ldr	r1, [r1, #0]
 8005f38:	4313      	orrs	r3, r2
 8005f3a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	69da      	ldr	r2, [r3, #28]
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	6a1b      	ldr	r3, [r3, #32]
 8005f4e:	431a      	orrs	r2, r3
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	430a      	orrs	r2, r1
 8005f56:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	689b      	ldr	r3, [r3, #8]
 8005f5e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8005f62:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005f66:	687a      	ldr	r2, [r7, #4]
 8005f68:	6911      	ldr	r1, [r2, #16]
 8005f6a:	687a      	ldr	r2, [r7, #4]
 8005f6c:	68d2      	ldr	r2, [r2, #12]
 8005f6e:	4311      	orrs	r1, r2
 8005f70:	687a      	ldr	r2, [r7, #4]
 8005f72:	6812      	ldr	r2, [r2, #0]
 8005f74:	430b      	orrs	r3, r1
 8005f76:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	68db      	ldr	r3, [r3, #12]
 8005f7e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	695a      	ldr	r2, [r3, #20]
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	699b      	ldr	r3, [r3, #24]
 8005f8a:	431a      	orrs	r2, r3
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	430a      	orrs	r2, r1
 8005f92:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	681a      	ldr	r2, [r3, #0]
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	f042 0201 	orr.w	r2, r2, #1
 8005fa2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	2200      	movs	r2, #0
 8005fa8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	2220      	movs	r2, #32
 8005fae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	2200      	movs	r2, #0
 8005fb6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	2200      	movs	r2, #0
 8005fbc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005fc0:	2300      	movs	r3, #0
}
 8005fc2:	4618      	mov	r0, r3
 8005fc4:	3710      	adds	r7, #16
 8005fc6:	46bd      	mov	sp, r7
 8005fc8:	bd80      	pop	{r7, pc}
 8005fca:	bf00      	nop
 8005fcc:	000186a0 	.word	0x000186a0
 8005fd0:	001e847f 	.word	0x001e847f
 8005fd4:	003d08ff 	.word	0x003d08ff
 8005fd8:	431bde83 	.word	0x431bde83
 8005fdc:	10624dd3 	.word	0x10624dd3

08005fe0 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005fe0:	b580      	push	{r7, lr}
 8005fe2:	b088      	sub	sp, #32
 8005fe4:	af02      	add	r7, sp, #8
 8005fe6:	60f8      	str	r0, [r7, #12]
 8005fe8:	4608      	mov	r0, r1
 8005fea:	4611      	mov	r1, r2
 8005fec:	461a      	mov	r2, r3
 8005fee:	4603      	mov	r3, r0
 8005ff0:	817b      	strh	r3, [r7, #10]
 8005ff2:	460b      	mov	r3, r1
 8005ff4:	813b      	strh	r3, [r7, #8]
 8005ff6:	4613      	mov	r3, r2
 8005ff8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005ffa:	f7fe ffed 	bl	8004fd8 <HAL_GetTick>
 8005ffe:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006006:	b2db      	uxtb	r3, r3
 8006008:	2b20      	cmp	r3, #32
 800600a:	f040 80d9 	bne.w	80061c0 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800600e:	697b      	ldr	r3, [r7, #20]
 8006010:	9300      	str	r3, [sp, #0]
 8006012:	2319      	movs	r3, #25
 8006014:	2201      	movs	r2, #1
 8006016:	496d      	ldr	r1, [pc, #436]	; (80061cc <HAL_I2C_Mem_Write+0x1ec>)
 8006018:	68f8      	ldr	r0, [r7, #12]
 800601a:	f000 fc89 	bl	8006930 <I2C_WaitOnFlagUntilTimeout>
 800601e:	4603      	mov	r3, r0
 8006020:	2b00      	cmp	r3, #0
 8006022:	d001      	beq.n	8006028 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8006024:	2302      	movs	r3, #2
 8006026:	e0cc      	b.n	80061c2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800602e:	2b01      	cmp	r3, #1
 8006030:	d101      	bne.n	8006036 <HAL_I2C_Mem_Write+0x56>
 8006032:	2302      	movs	r3, #2
 8006034:	e0c5      	b.n	80061c2 <HAL_I2C_Mem_Write+0x1e2>
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	2201      	movs	r2, #1
 800603a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	f003 0301 	and.w	r3, r3, #1
 8006048:	2b01      	cmp	r3, #1
 800604a:	d007      	beq.n	800605c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	681a      	ldr	r2, [r3, #0]
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	f042 0201 	orr.w	r2, r2, #1
 800605a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	681a      	ldr	r2, [r3, #0]
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800606a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	2221      	movs	r2, #33	; 0x21
 8006070:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	2240      	movs	r2, #64	; 0x40
 8006078:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	2200      	movs	r2, #0
 8006080:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	6a3a      	ldr	r2, [r7, #32]
 8006086:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800608c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006092:	b29a      	uxth	r2, r3
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	4a4d      	ldr	r2, [pc, #308]	; (80061d0 <HAL_I2C_Mem_Write+0x1f0>)
 800609c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800609e:	88f8      	ldrh	r0, [r7, #6]
 80060a0:	893a      	ldrh	r2, [r7, #8]
 80060a2:	8979      	ldrh	r1, [r7, #10]
 80060a4:	697b      	ldr	r3, [r7, #20]
 80060a6:	9301      	str	r3, [sp, #4]
 80060a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060aa:	9300      	str	r3, [sp, #0]
 80060ac:	4603      	mov	r3, r0
 80060ae:	68f8      	ldr	r0, [r7, #12]
 80060b0:	f000 fac4 	bl	800663c <I2C_RequestMemoryWrite>
 80060b4:	4603      	mov	r3, r0
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d052      	beq.n	8006160 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80060ba:	2301      	movs	r3, #1
 80060bc:	e081      	b.n	80061c2 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80060be:	697a      	ldr	r2, [r7, #20]
 80060c0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80060c2:	68f8      	ldr	r0, [r7, #12]
 80060c4:	f000 fd0a 	bl	8006adc <I2C_WaitOnTXEFlagUntilTimeout>
 80060c8:	4603      	mov	r3, r0
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d00d      	beq.n	80060ea <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060d2:	2b04      	cmp	r3, #4
 80060d4:	d107      	bne.n	80060e6 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	681a      	ldr	r2, [r3, #0]
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80060e4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80060e6:	2301      	movs	r3, #1
 80060e8:	e06b      	b.n	80061c2 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060ee:	781a      	ldrb	r2, [r3, #0]
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060fa:	1c5a      	adds	r2, r3, #1
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006104:	3b01      	subs	r3, #1
 8006106:	b29a      	uxth	r2, r3
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006110:	b29b      	uxth	r3, r3
 8006112:	3b01      	subs	r3, #1
 8006114:	b29a      	uxth	r2, r3
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	695b      	ldr	r3, [r3, #20]
 8006120:	f003 0304 	and.w	r3, r3, #4
 8006124:	2b04      	cmp	r3, #4
 8006126:	d11b      	bne.n	8006160 <HAL_I2C_Mem_Write+0x180>
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800612c:	2b00      	cmp	r3, #0
 800612e:	d017      	beq.n	8006160 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006134:	781a      	ldrb	r2, [r3, #0]
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006140:	1c5a      	adds	r2, r3, #1
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800614a:	3b01      	subs	r3, #1
 800614c:	b29a      	uxth	r2, r3
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006156:	b29b      	uxth	r3, r3
 8006158:	3b01      	subs	r3, #1
 800615a:	b29a      	uxth	r2, r3
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006164:	2b00      	cmp	r3, #0
 8006166:	d1aa      	bne.n	80060be <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006168:	697a      	ldr	r2, [r7, #20]
 800616a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800616c:	68f8      	ldr	r0, [r7, #12]
 800616e:	f000 fcf6 	bl	8006b5e <I2C_WaitOnBTFFlagUntilTimeout>
 8006172:	4603      	mov	r3, r0
 8006174:	2b00      	cmp	r3, #0
 8006176:	d00d      	beq.n	8006194 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800617c:	2b04      	cmp	r3, #4
 800617e:	d107      	bne.n	8006190 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	681a      	ldr	r2, [r3, #0]
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800618e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006190:	2301      	movs	r3, #1
 8006192:	e016      	b.n	80061c2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	681a      	ldr	r2, [r3, #0]
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80061a2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	2220      	movs	r2, #32
 80061a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	2200      	movs	r2, #0
 80061b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	2200      	movs	r2, #0
 80061b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80061bc:	2300      	movs	r3, #0
 80061be:	e000      	b.n	80061c2 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80061c0:	2302      	movs	r3, #2
  }
}
 80061c2:	4618      	mov	r0, r3
 80061c4:	3718      	adds	r7, #24
 80061c6:	46bd      	mov	sp, r7
 80061c8:	bd80      	pop	{r7, pc}
 80061ca:	bf00      	nop
 80061cc:	00100002 	.word	0x00100002
 80061d0:	ffff0000 	.word	0xffff0000

080061d4 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80061d4:	b580      	push	{r7, lr}
 80061d6:	b08c      	sub	sp, #48	; 0x30
 80061d8:	af02      	add	r7, sp, #8
 80061da:	60f8      	str	r0, [r7, #12]
 80061dc:	4608      	mov	r0, r1
 80061de:	4611      	mov	r1, r2
 80061e0:	461a      	mov	r2, r3
 80061e2:	4603      	mov	r3, r0
 80061e4:	817b      	strh	r3, [r7, #10]
 80061e6:	460b      	mov	r3, r1
 80061e8:	813b      	strh	r3, [r7, #8]
 80061ea:	4613      	mov	r3, r2
 80061ec:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80061ee:	f7fe fef3 	bl	8004fd8 <HAL_GetTick>
 80061f2:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80061fa:	b2db      	uxtb	r3, r3
 80061fc:	2b20      	cmp	r3, #32
 80061fe:	f040 8208 	bne.w	8006612 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006202:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006204:	9300      	str	r3, [sp, #0]
 8006206:	2319      	movs	r3, #25
 8006208:	2201      	movs	r2, #1
 800620a:	497b      	ldr	r1, [pc, #492]	; (80063f8 <HAL_I2C_Mem_Read+0x224>)
 800620c:	68f8      	ldr	r0, [r7, #12]
 800620e:	f000 fb8f 	bl	8006930 <I2C_WaitOnFlagUntilTimeout>
 8006212:	4603      	mov	r3, r0
 8006214:	2b00      	cmp	r3, #0
 8006216:	d001      	beq.n	800621c <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8006218:	2302      	movs	r3, #2
 800621a:	e1fb      	b.n	8006614 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006222:	2b01      	cmp	r3, #1
 8006224:	d101      	bne.n	800622a <HAL_I2C_Mem_Read+0x56>
 8006226:	2302      	movs	r3, #2
 8006228:	e1f4      	b.n	8006614 <HAL_I2C_Mem_Read+0x440>
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	2201      	movs	r2, #1
 800622e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	f003 0301 	and.w	r3, r3, #1
 800623c:	2b01      	cmp	r3, #1
 800623e:	d007      	beq.n	8006250 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	681a      	ldr	r2, [r3, #0]
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	f042 0201 	orr.w	r2, r2, #1
 800624e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	681a      	ldr	r2, [r3, #0]
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800625e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	2222      	movs	r2, #34	; 0x22
 8006264:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	2240      	movs	r2, #64	; 0x40
 800626c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	2200      	movs	r2, #0
 8006274:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800627a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8006280:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006286:	b29a      	uxth	r2, r3
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	4a5b      	ldr	r2, [pc, #364]	; (80063fc <HAL_I2C_Mem_Read+0x228>)
 8006290:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006292:	88f8      	ldrh	r0, [r7, #6]
 8006294:	893a      	ldrh	r2, [r7, #8]
 8006296:	8979      	ldrh	r1, [r7, #10]
 8006298:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800629a:	9301      	str	r3, [sp, #4]
 800629c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800629e:	9300      	str	r3, [sp, #0]
 80062a0:	4603      	mov	r3, r0
 80062a2:	68f8      	ldr	r0, [r7, #12]
 80062a4:	f000 fa5e 	bl	8006764 <I2C_RequestMemoryRead>
 80062a8:	4603      	mov	r3, r0
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d001      	beq.n	80062b2 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80062ae:	2301      	movs	r3, #1
 80062b0:	e1b0      	b.n	8006614 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d113      	bne.n	80062e2 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80062ba:	2300      	movs	r3, #0
 80062bc:	623b      	str	r3, [r7, #32]
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	695b      	ldr	r3, [r3, #20]
 80062c4:	623b      	str	r3, [r7, #32]
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	699b      	ldr	r3, [r3, #24]
 80062cc:	623b      	str	r3, [r7, #32]
 80062ce:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	681a      	ldr	r2, [r3, #0]
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80062de:	601a      	str	r2, [r3, #0]
 80062e0:	e184      	b.n	80065ec <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80062e6:	2b01      	cmp	r3, #1
 80062e8:	d11b      	bne.n	8006322 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	681a      	ldr	r2, [r3, #0]
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80062f8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80062fa:	2300      	movs	r3, #0
 80062fc:	61fb      	str	r3, [r7, #28]
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	695b      	ldr	r3, [r3, #20]
 8006304:	61fb      	str	r3, [r7, #28]
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	699b      	ldr	r3, [r3, #24]
 800630c:	61fb      	str	r3, [r7, #28]
 800630e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	681a      	ldr	r2, [r3, #0]
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800631e:	601a      	str	r2, [r3, #0]
 8006320:	e164      	b.n	80065ec <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006326:	2b02      	cmp	r3, #2
 8006328:	d11b      	bne.n	8006362 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	681a      	ldr	r2, [r3, #0]
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006338:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	681a      	ldr	r2, [r3, #0]
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006348:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800634a:	2300      	movs	r3, #0
 800634c:	61bb      	str	r3, [r7, #24]
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	695b      	ldr	r3, [r3, #20]
 8006354:	61bb      	str	r3, [r7, #24]
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	699b      	ldr	r3, [r3, #24]
 800635c:	61bb      	str	r3, [r7, #24]
 800635e:	69bb      	ldr	r3, [r7, #24]
 8006360:	e144      	b.n	80065ec <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006362:	2300      	movs	r3, #0
 8006364:	617b      	str	r3, [r7, #20]
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	695b      	ldr	r3, [r3, #20]
 800636c:	617b      	str	r3, [r7, #20]
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	699b      	ldr	r3, [r3, #24]
 8006374:	617b      	str	r3, [r7, #20]
 8006376:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8006378:	e138      	b.n	80065ec <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800637e:	2b03      	cmp	r3, #3
 8006380:	f200 80f1 	bhi.w	8006566 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006388:	2b01      	cmp	r3, #1
 800638a:	d123      	bne.n	80063d4 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800638c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800638e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006390:	68f8      	ldr	r0, [r7, #12]
 8006392:	f000 fc25 	bl	8006be0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8006396:	4603      	mov	r3, r0
 8006398:	2b00      	cmp	r3, #0
 800639a:	d001      	beq.n	80063a0 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 800639c:	2301      	movs	r3, #1
 800639e:	e139      	b.n	8006614 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	691a      	ldr	r2, [r3, #16]
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063aa:	b2d2      	uxtb	r2, r2
 80063ac:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063b2:	1c5a      	adds	r2, r3, #1
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80063bc:	3b01      	subs	r3, #1
 80063be:	b29a      	uxth	r2, r3
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80063c8:	b29b      	uxth	r3, r3
 80063ca:	3b01      	subs	r3, #1
 80063cc:	b29a      	uxth	r2, r3
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	855a      	strh	r2, [r3, #42]	; 0x2a
 80063d2:	e10b      	b.n	80065ec <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80063d8:	2b02      	cmp	r3, #2
 80063da:	d14e      	bne.n	800647a <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80063dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063de:	9300      	str	r3, [sp, #0]
 80063e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063e2:	2200      	movs	r2, #0
 80063e4:	4906      	ldr	r1, [pc, #24]	; (8006400 <HAL_I2C_Mem_Read+0x22c>)
 80063e6:	68f8      	ldr	r0, [r7, #12]
 80063e8:	f000 faa2 	bl	8006930 <I2C_WaitOnFlagUntilTimeout>
 80063ec:	4603      	mov	r3, r0
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d008      	beq.n	8006404 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80063f2:	2301      	movs	r3, #1
 80063f4:	e10e      	b.n	8006614 <HAL_I2C_Mem_Read+0x440>
 80063f6:	bf00      	nop
 80063f8:	00100002 	.word	0x00100002
 80063fc:	ffff0000 	.word	0xffff0000
 8006400:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	681a      	ldr	r2, [r3, #0]
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006412:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	691a      	ldr	r2, [r3, #16]
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800641e:	b2d2      	uxtb	r2, r2
 8006420:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006426:	1c5a      	adds	r2, r3, #1
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006430:	3b01      	subs	r3, #1
 8006432:	b29a      	uxth	r2, r3
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800643c:	b29b      	uxth	r3, r3
 800643e:	3b01      	subs	r3, #1
 8006440:	b29a      	uxth	r2, r3
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	691a      	ldr	r2, [r3, #16]
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006450:	b2d2      	uxtb	r2, r2
 8006452:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006458:	1c5a      	adds	r2, r3, #1
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006462:	3b01      	subs	r3, #1
 8006464:	b29a      	uxth	r2, r3
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800646e:	b29b      	uxth	r3, r3
 8006470:	3b01      	subs	r3, #1
 8006472:	b29a      	uxth	r2, r3
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006478:	e0b8      	b.n	80065ec <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800647a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800647c:	9300      	str	r3, [sp, #0]
 800647e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006480:	2200      	movs	r2, #0
 8006482:	4966      	ldr	r1, [pc, #408]	; (800661c <HAL_I2C_Mem_Read+0x448>)
 8006484:	68f8      	ldr	r0, [r7, #12]
 8006486:	f000 fa53 	bl	8006930 <I2C_WaitOnFlagUntilTimeout>
 800648a:	4603      	mov	r3, r0
 800648c:	2b00      	cmp	r3, #0
 800648e:	d001      	beq.n	8006494 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8006490:	2301      	movs	r3, #1
 8006492:	e0bf      	b.n	8006614 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	681a      	ldr	r2, [r3, #0]
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80064a2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	691a      	ldr	r2, [r3, #16]
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064ae:	b2d2      	uxtb	r2, r2
 80064b0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064b6:	1c5a      	adds	r2, r3, #1
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80064c0:	3b01      	subs	r3, #1
 80064c2:	b29a      	uxth	r2, r3
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80064cc:	b29b      	uxth	r3, r3
 80064ce:	3b01      	subs	r3, #1
 80064d0:	b29a      	uxth	r2, r3
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80064d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064d8:	9300      	str	r3, [sp, #0]
 80064da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064dc:	2200      	movs	r2, #0
 80064de:	494f      	ldr	r1, [pc, #316]	; (800661c <HAL_I2C_Mem_Read+0x448>)
 80064e0:	68f8      	ldr	r0, [r7, #12]
 80064e2:	f000 fa25 	bl	8006930 <I2C_WaitOnFlagUntilTimeout>
 80064e6:	4603      	mov	r3, r0
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d001      	beq.n	80064f0 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80064ec:	2301      	movs	r3, #1
 80064ee:	e091      	b.n	8006614 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	681a      	ldr	r2, [r3, #0]
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80064fe:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	691a      	ldr	r2, [r3, #16]
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800650a:	b2d2      	uxtb	r2, r2
 800650c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006512:	1c5a      	adds	r2, r3, #1
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800651c:	3b01      	subs	r3, #1
 800651e:	b29a      	uxth	r2, r3
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006528:	b29b      	uxth	r3, r3
 800652a:	3b01      	subs	r3, #1
 800652c:	b29a      	uxth	r2, r3
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	691a      	ldr	r2, [r3, #16]
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800653c:	b2d2      	uxtb	r2, r2
 800653e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006544:	1c5a      	adds	r2, r3, #1
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800654e:	3b01      	subs	r3, #1
 8006550:	b29a      	uxth	r2, r3
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800655a:	b29b      	uxth	r3, r3
 800655c:	3b01      	subs	r3, #1
 800655e:	b29a      	uxth	r2, r3
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006564:	e042      	b.n	80065ec <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006566:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006568:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800656a:	68f8      	ldr	r0, [r7, #12]
 800656c:	f000 fb38 	bl	8006be0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8006570:	4603      	mov	r3, r0
 8006572:	2b00      	cmp	r3, #0
 8006574:	d001      	beq.n	800657a <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8006576:	2301      	movs	r3, #1
 8006578:	e04c      	b.n	8006614 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	691a      	ldr	r2, [r3, #16]
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006584:	b2d2      	uxtb	r2, r2
 8006586:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800658c:	1c5a      	adds	r2, r3, #1
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006596:	3b01      	subs	r3, #1
 8006598:	b29a      	uxth	r2, r3
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80065a2:	b29b      	uxth	r3, r3
 80065a4:	3b01      	subs	r3, #1
 80065a6:	b29a      	uxth	r2, r3
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	695b      	ldr	r3, [r3, #20]
 80065b2:	f003 0304 	and.w	r3, r3, #4
 80065b6:	2b04      	cmp	r3, #4
 80065b8:	d118      	bne.n	80065ec <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	691a      	ldr	r2, [r3, #16]
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065c4:	b2d2      	uxtb	r2, r2
 80065c6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065cc:	1c5a      	adds	r2, r3, #1
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80065d6:	3b01      	subs	r3, #1
 80065d8:	b29a      	uxth	r2, r3
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80065e2:	b29b      	uxth	r3, r3
 80065e4:	3b01      	subs	r3, #1
 80065e6:	b29a      	uxth	r2, r3
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	f47f aec2 	bne.w	800637a <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	2220      	movs	r2, #32
 80065fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	2200      	movs	r2, #0
 8006602:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	2200      	movs	r2, #0
 800660a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800660e:	2300      	movs	r3, #0
 8006610:	e000      	b.n	8006614 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8006612:	2302      	movs	r3, #2
  }
}
 8006614:	4618      	mov	r0, r3
 8006616:	3728      	adds	r7, #40	; 0x28
 8006618:	46bd      	mov	sp, r7
 800661a:	bd80      	pop	{r7, pc}
 800661c:	00010004 	.word	0x00010004

08006620 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8006620:	b480      	push	{r7}
 8006622:	b083      	sub	sp, #12
 8006624:	af00      	add	r7, sp, #0
 8006626:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800662e:	b2db      	uxtb	r3, r3
}
 8006630:	4618      	mov	r0, r3
 8006632:	370c      	adds	r7, #12
 8006634:	46bd      	mov	sp, r7
 8006636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800663a:	4770      	bx	lr

0800663c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800663c:	b580      	push	{r7, lr}
 800663e:	b088      	sub	sp, #32
 8006640:	af02      	add	r7, sp, #8
 8006642:	60f8      	str	r0, [r7, #12]
 8006644:	4608      	mov	r0, r1
 8006646:	4611      	mov	r1, r2
 8006648:	461a      	mov	r2, r3
 800664a:	4603      	mov	r3, r0
 800664c:	817b      	strh	r3, [r7, #10]
 800664e:	460b      	mov	r3, r1
 8006650:	813b      	strh	r3, [r7, #8]
 8006652:	4613      	mov	r3, r2
 8006654:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	681a      	ldr	r2, [r3, #0]
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006664:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006666:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006668:	9300      	str	r3, [sp, #0]
 800666a:	6a3b      	ldr	r3, [r7, #32]
 800666c:	2200      	movs	r2, #0
 800666e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006672:	68f8      	ldr	r0, [r7, #12]
 8006674:	f000 f95c 	bl	8006930 <I2C_WaitOnFlagUntilTimeout>
 8006678:	4603      	mov	r3, r0
 800667a:	2b00      	cmp	r3, #0
 800667c:	d00c      	beq.n	8006698 <I2C_RequestMemoryWrite+0x5c>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006688:	2b00      	cmp	r3, #0
 800668a:	d003      	beq.n	8006694 <I2C_RequestMemoryWrite+0x58>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006692:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006694:	2303      	movs	r3, #3
 8006696:	e05f      	b.n	8006758 <I2C_RequestMemoryWrite+0x11c>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006698:	897b      	ldrh	r3, [r7, #10]
 800669a:	b2db      	uxtb	r3, r3
 800669c:	461a      	mov	r2, r3
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80066a6:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80066a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066aa:	6a3a      	ldr	r2, [r7, #32]
 80066ac:	492c      	ldr	r1, [pc, #176]	; (8006760 <I2C_RequestMemoryWrite+0x124>)
 80066ae:	68f8      	ldr	r0, [r7, #12]
 80066b0:	f000 f995 	bl	80069de <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80066b4:	4603      	mov	r3, r0
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d001      	beq.n	80066be <I2C_RequestMemoryWrite+0x82>
  {
    return HAL_ERROR;
 80066ba:	2301      	movs	r3, #1
 80066bc:	e04c      	b.n	8006758 <I2C_RequestMemoryWrite+0x11c>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80066be:	2300      	movs	r3, #0
 80066c0:	617b      	str	r3, [r7, #20]
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	695b      	ldr	r3, [r3, #20]
 80066c8:	617b      	str	r3, [r7, #20]
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	699b      	ldr	r3, [r3, #24]
 80066d0:	617b      	str	r3, [r7, #20]
 80066d2:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80066d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80066d6:	6a39      	ldr	r1, [r7, #32]
 80066d8:	68f8      	ldr	r0, [r7, #12]
 80066da:	f000 f9ff 	bl	8006adc <I2C_WaitOnTXEFlagUntilTimeout>
 80066de:	4603      	mov	r3, r0
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d00d      	beq.n	8006700 <I2C_RequestMemoryWrite+0xc4>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066e8:	2b04      	cmp	r3, #4
 80066ea:	d107      	bne.n	80066fc <I2C_RequestMemoryWrite+0xc0>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	681a      	ldr	r2, [r3, #0]
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80066fa:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80066fc:	2301      	movs	r3, #1
 80066fe:	e02b      	b.n	8006758 <I2C_RequestMemoryWrite+0x11c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006700:	88fb      	ldrh	r3, [r7, #6]
 8006702:	2b01      	cmp	r3, #1
 8006704:	d105      	bne.n	8006712 <I2C_RequestMemoryWrite+0xd6>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006706:	893b      	ldrh	r3, [r7, #8]
 8006708:	b2da      	uxtb	r2, r3
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	611a      	str	r2, [r3, #16]
 8006710:	e021      	b.n	8006756 <I2C_RequestMemoryWrite+0x11a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8006712:	893b      	ldrh	r3, [r7, #8]
 8006714:	0a1b      	lsrs	r3, r3, #8
 8006716:	b29b      	uxth	r3, r3
 8006718:	b2da      	uxtb	r2, r3
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006720:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006722:	6a39      	ldr	r1, [r7, #32]
 8006724:	68f8      	ldr	r0, [r7, #12]
 8006726:	f000 f9d9 	bl	8006adc <I2C_WaitOnTXEFlagUntilTimeout>
 800672a:	4603      	mov	r3, r0
 800672c:	2b00      	cmp	r3, #0
 800672e:	d00d      	beq.n	800674c <I2C_RequestMemoryWrite+0x110>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006734:	2b04      	cmp	r3, #4
 8006736:	d107      	bne.n	8006748 <I2C_RequestMemoryWrite+0x10c>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	681a      	ldr	r2, [r3, #0]
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006746:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006748:	2301      	movs	r3, #1
 800674a:	e005      	b.n	8006758 <I2C_RequestMemoryWrite+0x11c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800674c:	893b      	ldrh	r3, [r7, #8]
 800674e:	b2da      	uxtb	r2, r3
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8006756:	2300      	movs	r3, #0
}
 8006758:	4618      	mov	r0, r3
 800675a:	3718      	adds	r7, #24
 800675c:	46bd      	mov	sp, r7
 800675e:	bd80      	pop	{r7, pc}
 8006760:	00010002 	.word	0x00010002

08006764 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006764:	b580      	push	{r7, lr}
 8006766:	b088      	sub	sp, #32
 8006768:	af02      	add	r7, sp, #8
 800676a:	60f8      	str	r0, [r7, #12]
 800676c:	4608      	mov	r0, r1
 800676e:	4611      	mov	r1, r2
 8006770:	461a      	mov	r2, r3
 8006772:	4603      	mov	r3, r0
 8006774:	817b      	strh	r3, [r7, #10]
 8006776:	460b      	mov	r3, r1
 8006778:	813b      	strh	r3, [r7, #8]
 800677a:	4613      	mov	r3, r2
 800677c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	681a      	ldr	r2, [r3, #0]
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800678c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	681a      	ldr	r2, [r3, #0]
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800679c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800679e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067a0:	9300      	str	r3, [sp, #0]
 80067a2:	6a3b      	ldr	r3, [r7, #32]
 80067a4:	2200      	movs	r2, #0
 80067a6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80067aa:	68f8      	ldr	r0, [r7, #12]
 80067ac:	f000 f8c0 	bl	8006930 <I2C_WaitOnFlagUntilTimeout>
 80067b0:	4603      	mov	r3, r0
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d00c      	beq.n	80067d0 <I2C_RequestMemoryRead+0x6c>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d003      	beq.n	80067cc <I2C_RequestMemoryRead+0x68>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80067ca:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80067cc:	2303      	movs	r3, #3
 80067ce:	e0a9      	b.n	8006924 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80067d0:	897b      	ldrh	r3, [r7, #10]
 80067d2:	b2db      	uxtb	r3, r3
 80067d4:	461a      	mov	r2, r3
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80067de:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80067e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067e2:	6a3a      	ldr	r2, [r7, #32]
 80067e4:	4951      	ldr	r1, [pc, #324]	; (800692c <I2C_RequestMemoryRead+0x1c8>)
 80067e6:	68f8      	ldr	r0, [r7, #12]
 80067e8:	f000 f8f9 	bl	80069de <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80067ec:	4603      	mov	r3, r0
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d001      	beq.n	80067f6 <I2C_RequestMemoryRead+0x92>
  {
    return HAL_ERROR;
 80067f2:	2301      	movs	r3, #1
 80067f4:	e096      	b.n	8006924 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80067f6:	2300      	movs	r3, #0
 80067f8:	617b      	str	r3, [r7, #20]
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	695b      	ldr	r3, [r3, #20]
 8006800:	617b      	str	r3, [r7, #20]
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	699b      	ldr	r3, [r3, #24]
 8006808:	617b      	str	r3, [r7, #20]
 800680a:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800680c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800680e:	6a39      	ldr	r1, [r7, #32]
 8006810:	68f8      	ldr	r0, [r7, #12]
 8006812:	f000 f963 	bl	8006adc <I2C_WaitOnTXEFlagUntilTimeout>
 8006816:	4603      	mov	r3, r0
 8006818:	2b00      	cmp	r3, #0
 800681a:	d00d      	beq.n	8006838 <I2C_RequestMemoryRead+0xd4>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006820:	2b04      	cmp	r3, #4
 8006822:	d107      	bne.n	8006834 <I2C_RequestMemoryRead+0xd0>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	681a      	ldr	r2, [r3, #0]
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006832:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006834:	2301      	movs	r3, #1
 8006836:	e075      	b.n	8006924 <I2C_RequestMemoryRead+0x1c0>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006838:	88fb      	ldrh	r3, [r7, #6]
 800683a:	2b01      	cmp	r3, #1
 800683c:	d105      	bne.n	800684a <I2C_RequestMemoryRead+0xe6>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800683e:	893b      	ldrh	r3, [r7, #8]
 8006840:	b2da      	uxtb	r2, r3
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	611a      	str	r2, [r3, #16]
 8006848:	e021      	b.n	800688e <I2C_RequestMemoryRead+0x12a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800684a:	893b      	ldrh	r3, [r7, #8]
 800684c:	0a1b      	lsrs	r3, r3, #8
 800684e:	b29b      	uxth	r3, r3
 8006850:	b2da      	uxtb	r2, r3
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006858:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800685a:	6a39      	ldr	r1, [r7, #32]
 800685c:	68f8      	ldr	r0, [r7, #12]
 800685e:	f000 f93d 	bl	8006adc <I2C_WaitOnTXEFlagUntilTimeout>
 8006862:	4603      	mov	r3, r0
 8006864:	2b00      	cmp	r3, #0
 8006866:	d00d      	beq.n	8006884 <I2C_RequestMemoryRead+0x120>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800686c:	2b04      	cmp	r3, #4
 800686e:	d107      	bne.n	8006880 <I2C_RequestMemoryRead+0x11c>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	681a      	ldr	r2, [r3, #0]
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800687e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006880:	2301      	movs	r3, #1
 8006882:	e04f      	b.n	8006924 <I2C_RequestMemoryRead+0x1c0>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006884:	893b      	ldrh	r3, [r7, #8]
 8006886:	b2da      	uxtb	r2, r3
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800688e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006890:	6a39      	ldr	r1, [r7, #32]
 8006892:	68f8      	ldr	r0, [r7, #12]
 8006894:	f000 f922 	bl	8006adc <I2C_WaitOnTXEFlagUntilTimeout>
 8006898:	4603      	mov	r3, r0
 800689a:	2b00      	cmp	r3, #0
 800689c:	d00d      	beq.n	80068ba <I2C_RequestMemoryRead+0x156>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068a2:	2b04      	cmp	r3, #4
 80068a4:	d107      	bne.n	80068b6 <I2C_RequestMemoryRead+0x152>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	681a      	ldr	r2, [r3, #0]
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80068b4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80068b6:	2301      	movs	r3, #1
 80068b8:	e034      	b.n	8006924 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	681a      	ldr	r2, [r3, #0]
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80068c8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80068ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068cc:	9300      	str	r3, [sp, #0]
 80068ce:	6a3b      	ldr	r3, [r7, #32]
 80068d0:	2200      	movs	r2, #0
 80068d2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80068d6:	68f8      	ldr	r0, [r7, #12]
 80068d8:	f000 f82a 	bl	8006930 <I2C_WaitOnFlagUntilTimeout>
 80068dc:	4603      	mov	r3, r0
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d00c      	beq.n	80068fc <I2C_RequestMemoryRead+0x198>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d003      	beq.n	80068f8 <I2C_RequestMemoryRead+0x194>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80068f6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80068f8:	2303      	movs	r3, #3
 80068fa:	e013      	b.n	8006924 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80068fc:	897b      	ldrh	r3, [r7, #10]
 80068fe:	b2db      	uxtb	r3, r3
 8006900:	f043 0301 	orr.w	r3, r3, #1
 8006904:	b2da      	uxtb	r2, r3
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800690c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800690e:	6a3a      	ldr	r2, [r7, #32]
 8006910:	4906      	ldr	r1, [pc, #24]	; (800692c <I2C_RequestMemoryRead+0x1c8>)
 8006912:	68f8      	ldr	r0, [r7, #12]
 8006914:	f000 f863 	bl	80069de <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006918:	4603      	mov	r3, r0
 800691a:	2b00      	cmp	r3, #0
 800691c:	d001      	beq.n	8006922 <I2C_RequestMemoryRead+0x1be>
  {
    return HAL_ERROR;
 800691e:	2301      	movs	r3, #1
 8006920:	e000      	b.n	8006924 <I2C_RequestMemoryRead+0x1c0>
  }

  return HAL_OK;
 8006922:	2300      	movs	r3, #0
}
 8006924:	4618      	mov	r0, r3
 8006926:	3718      	adds	r7, #24
 8006928:	46bd      	mov	sp, r7
 800692a:	bd80      	pop	{r7, pc}
 800692c:	00010002 	.word	0x00010002

08006930 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8006930:	b580      	push	{r7, lr}
 8006932:	b084      	sub	sp, #16
 8006934:	af00      	add	r7, sp, #0
 8006936:	60f8      	str	r0, [r7, #12]
 8006938:	60b9      	str	r1, [r7, #8]
 800693a:	603b      	str	r3, [r7, #0]
 800693c:	4613      	mov	r3, r2
 800693e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006940:	e025      	b.n	800698e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006942:	683b      	ldr	r3, [r7, #0]
 8006944:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006948:	d021      	beq.n	800698e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800694a:	f7fe fb45 	bl	8004fd8 <HAL_GetTick>
 800694e:	4602      	mov	r2, r0
 8006950:	69bb      	ldr	r3, [r7, #24]
 8006952:	1ad3      	subs	r3, r2, r3
 8006954:	683a      	ldr	r2, [r7, #0]
 8006956:	429a      	cmp	r2, r3
 8006958:	d302      	bcc.n	8006960 <I2C_WaitOnFlagUntilTimeout+0x30>
 800695a:	683b      	ldr	r3, [r7, #0]
 800695c:	2b00      	cmp	r3, #0
 800695e:	d116      	bne.n	800698e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	2200      	movs	r2, #0
 8006964:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	2220      	movs	r2, #32
 800696a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	2200      	movs	r2, #0
 8006972:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800697a:	f043 0220 	orr.w	r2, r3, #32
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	2200      	movs	r2, #0
 8006986:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800698a:	2301      	movs	r3, #1
 800698c:	e023      	b.n	80069d6 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800698e:	68bb      	ldr	r3, [r7, #8]
 8006990:	0c1b      	lsrs	r3, r3, #16
 8006992:	b2db      	uxtb	r3, r3
 8006994:	2b01      	cmp	r3, #1
 8006996:	d10d      	bne.n	80069b4 <I2C_WaitOnFlagUntilTimeout+0x84>
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	695b      	ldr	r3, [r3, #20]
 800699e:	43da      	mvns	r2, r3
 80069a0:	68bb      	ldr	r3, [r7, #8]
 80069a2:	4013      	ands	r3, r2
 80069a4:	b29b      	uxth	r3, r3
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	bf0c      	ite	eq
 80069aa:	2301      	moveq	r3, #1
 80069ac:	2300      	movne	r3, #0
 80069ae:	b2db      	uxtb	r3, r3
 80069b0:	461a      	mov	r2, r3
 80069b2:	e00c      	b.n	80069ce <I2C_WaitOnFlagUntilTimeout+0x9e>
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	699b      	ldr	r3, [r3, #24]
 80069ba:	43da      	mvns	r2, r3
 80069bc:	68bb      	ldr	r3, [r7, #8]
 80069be:	4013      	ands	r3, r2
 80069c0:	b29b      	uxth	r3, r3
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	bf0c      	ite	eq
 80069c6:	2301      	moveq	r3, #1
 80069c8:	2300      	movne	r3, #0
 80069ca:	b2db      	uxtb	r3, r3
 80069cc:	461a      	mov	r2, r3
 80069ce:	79fb      	ldrb	r3, [r7, #7]
 80069d0:	429a      	cmp	r2, r3
 80069d2:	d0b6      	beq.n	8006942 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80069d4:	2300      	movs	r3, #0
}
 80069d6:	4618      	mov	r0, r3
 80069d8:	3710      	adds	r7, #16
 80069da:	46bd      	mov	sp, r7
 80069dc:	bd80      	pop	{r7, pc}

080069de <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80069de:	b580      	push	{r7, lr}
 80069e0:	b084      	sub	sp, #16
 80069e2:	af00      	add	r7, sp, #0
 80069e4:	60f8      	str	r0, [r7, #12]
 80069e6:	60b9      	str	r1, [r7, #8]
 80069e8:	607a      	str	r2, [r7, #4]
 80069ea:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80069ec:	e051      	b.n	8006a92 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	695b      	ldr	r3, [r3, #20]
 80069f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80069f8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80069fc:	d123      	bne.n	8006a46 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	681a      	ldr	r2, [r3, #0]
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006a0c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006a16:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	2200      	movs	r2, #0
 8006a1c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	2220      	movs	r2, #32
 8006a22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	2200      	movs	r2, #0
 8006a2a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a32:	f043 0204 	orr.w	r2, r3, #4
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	2200      	movs	r2, #0
 8006a3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006a42:	2301      	movs	r3, #1
 8006a44:	e046      	b.n	8006ad4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a4c:	d021      	beq.n	8006a92 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006a4e:	f7fe fac3 	bl	8004fd8 <HAL_GetTick>
 8006a52:	4602      	mov	r2, r0
 8006a54:	683b      	ldr	r3, [r7, #0]
 8006a56:	1ad3      	subs	r3, r2, r3
 8006a58:	687a      	ldr	r2, [r7, #4]
 8006a5a:	429a      	cmp	r2, r3
 8006a5c:	d302      	bcc.n	8006a64 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d116      	bne.n	8006a92 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	2200      	movs	r2, #0
 8006a68:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	2220      	movs	r2, #32
 8006a6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	2200      	movs	r2, #0
 8006a76:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a7e:	f043 0220 	orr.w	r2, r3, #32
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	2200      	movs	r2, #0
 8006a8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006a8e:	2301      	movs	r3, #1
 8006a90:	e020      	b.n	8006ad4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006a92:	68bb      	ldr	r3, [r7, #8]
 8006a94:	0c1b      	lsrs	r3, r3, #16
 8006a96:	b2db      	uxtb	r3, r3
 8006a98:	2b01      	cmp	r3, #1
 8006a9a:	d10c      	bne.n	8006ab6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	695b      	ldr	r3, [r3, #20]
 8006aa2:	43da      	mvns	r2, r3
 8006aa4:	68bb      	ldr	r3, [r7, #8]
 8006aa6:	4013      	ands	r3, r2
 8006aa8:	b29b      	uxth	r3, r3
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	bf14      	ite	ne
 8006aae:	2301      	movne	r3, #1
 8006ab0:	2300      	moveq	r3, #0
 8006ab2:	b2db      	uxtb	r3, r3
 8006ab4:	e00b      	b.n	8006ace <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	699b      	ldr	r3, [r3, #24]
 8006abc:	43da      	mvns	r2, r3
 8006abe:	68bb      	ldr	r3, [r7, #8]
 8006ac0:	4013      	ands	r3, r2
 8006ac2:	b29b      	uxth	r3, r3
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	bf14      	ite	ne
 8006ac8:	2301      	movne	r3, #1
 8006aca:	2300      	moveq	r3, #0
 8006acc:	b2db      	uxtb	r3, r3
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d18d      	bne.n	80069ee <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8006ad2:	2300      	movs	r3, #0
}
 8006ad4:	4618      	mov	r0, r3
 8006ad6:	3710      	adds	r7, #16
 8006ad8:	46bd      	mov	sp, r7
 8006ada:	bd80      	pop	{r7, pc}

08006adc <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006adc:	b580      	push	{r7, lr}
 8006ade:	b084      	sub	sp, #16
 8006ae0:	af00      	add	r7, sp, #0
 8006ae2:	60f8      	str	r0, [r7, #12]
 8006ae4:	60b9      	str	r1, [r7, #8]
 8006ae6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006ae8:	e02d      	b.n	8006b46 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006aea:	68f8      	ldr	r0, [r7, #12]
 8006aec:	f000 f8ce 	bl	8006c8c <I2C_IsAcknowledgeFailed>
 8006af0:	4603      	mov	r3, r0
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d001      	beq.n	8006afa <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006af6:	2301      	movs	r3, #1
 8006af8:	e02d      	b.n	8006b56 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006afa:	68bb      	ldr	r3, [r7, #8]
 8006afc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b00:	d021      	beq.n	8006b46 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006b02:	f7fe fa69 	bl	8004fd8 <HAL_GetTick>
 8006b06:	4602      	mov	r2, r0
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	1ad3      	subs	r3, r2, r3
 8006b0c:	68ba      	ldr	r2, [r7, #8]
 8006b0e:	429a      	cmp	r2, r3
 8006b10:	d302      	bcc.n	8006b18 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8006b12:	68bb      	ldr	r3, [r7, #8]
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d116      	bne.n	8006b46 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	2200      	movs	r2, #0
 8006b1c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	2220      	movs	r2, #32
 8006b22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	2200      	movs	r2, #0
 8006b2a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b32:	f043 0220 	orr.w	r2, r3, #32
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	2200      	movs	r2, #0
 8006b3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006b42:	2301      	movs	r3, #1
 8006b44:	e007      	b.n	8006b56 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	695b      	ldr	r3, [r3, #20]
 8006b4c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006b50:	2b80      	cmp	r3, #128	; 0x80
 8006b52:	d1ca      	bne.n	8006aea <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006b54:	2300      	movs	r3, #0
}
 8006b56:	4618      	mov	r0, r3
 8006b58:	3710      	adds	r7, #16
 8006b5a:	46bd      	mov	sp, r7
 8006b5c:	bd80      	pop	{r7, pc}

08006b5e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006b5e:	b580      	push	{r7, lr}
 8006b60:	b084      	sub	sp, #16
 8006b62:	af00      	add	r7, sp, #0
 8006b64:	60f8      	str	r0, [r7, #12]
 8006b66:	60b9      	str	r1, [r7, #8]
 8006b68:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006b6a:	e02d      	b.n	8006bc8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006b6c:	68f8      	ldr	r0, [r7, #12]
 8006b6e:	f000 f88d 	bl	8006c8c <I2C_IsAcknowledgeFailed>
 8006b72:	4603      	mov	r3, r0
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d001      	beq.n	8006b7c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006b78:	2301      	movs	r3, #1
 8006b7a:	e02d      	b.n	8006bd8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006b7c:	68bb      	ldr	r3, [r7, #8]
 8006b7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b82:	d021      	beq.n	8006bc8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006b84:	f7fe fa28 	bl	8004fd8 <HAL_GetTick>
 8006b88:	4602      	mov	r2, r0
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	1ad3      	subs	r3, r2, r3
 8006b8e:	68ba      	ldr	r2, [r7, #8]
 8006b90:	429a      	cmp	r2, r3
 8006b92:	d302      	bcc.n	8006b9a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8006b94:	68bb      	ldr	r3, [r7, #8]
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d116      	bne.n	8006bc8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	2200      	movs	r2, #0
 8006b9e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	2220      	movs	r2, #32
 8006ba4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	2200      	movs	r2, #0
 8006bac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bb4:	f043 0220 	orr.w	r2, r3, #32
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	2200      	movs	r2, #0
 8006bc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006bc4:	2301      	movs	r3, #1
 8006bc6:	e007      	b.n	8006bd8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	695b      	ldr	r3, [r3, #20]
 8006bce:	f003 0304 	and.w	r3, r3, #4
 8006bd2:	2b04      	cmp	r3, #4
 8006bd4:	d1ca      	bne.n	8006b6c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006bd6:	2300      	movs	r3, #0
}
 8006bd8:	4618      	mov	r0, r3
 8006bda:	3710      	adds	r7, #16
 8006bdc:	46bd      	mov	sp, r7
 8006bde:	bd80      	pop	{r7, pc}

08006be0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006be0:	b580      	push	{r7, lr}
 8006be2:	b084      	sub	sp, #16
 8006be4:	af00      	add	r7, sp, #0
 8006be6:	60f8      	str	r0, [r7, #12]
 8006be8:	60b9      	str	r1, [r7, #8]
 8006bea:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006bec:	e042      	b.n	8006c74 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	695b      	ldr	r3, [r3, #20]
 8006bf4:	f003 0310 	and.w	r3, r3, #16
 8006bf8:	2b10      	cmp	r3, #16
 8006bfa:	d119      	bne.n	8006c30 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	f06f 0210 	mvn.w	r2, #16
 8006c04:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	2200      	movs	r2, #0
 8006c0a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	2220      	movs	r2, #32
 8006c10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	2200      	movs	r2, #0
 8006c18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	2200      	movs	r2, #0
 8006c28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006c2c:	2301      	movs	r3, #1
 8006c2e:	e029      	b.n	8006c84 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006c30:	f7fe f9d2 	bl	8004fd8 <HAL_GetTick>
 8006c34:	4602      	mov	r2, r0
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	1ad3      	subs	r3, r2, r3
 8006c3a:	68ba      	ldr	r2, [r7, #8]
 8006c3c:	429a      	cmp	r2, r3
 8006c3e:	d302      	bcc.n	8006c46 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8006c40:	68bb      	ldr	r3, [r7, #8]
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d116      	bne.n	8006c74 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	2200      	movs	r2, #0
 8006c4a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	2220      	movs	r2, #32
 8006c50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	2200      	movs	r2, #0
 8006c58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c60:	f043 0220 	orr.w	r2, r3, #32
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	2200      	movs	r2, #0
 8006c6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006c70:	2301      	movs	r3, #1
 8006c72:	e007      	b.n	8006c84 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	695b      	ldr	r3, [r3, #20]
 8006c7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c7e:	2b40      	cmp	r3, #64	; 0x40
 8006c80:	d1b5      	bne.n	8006bee <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8006c82:	2300      	movs	r3, #0
}
 8006c84:	4618      	mov	r0, r3
 8006c86:	3710      	adds	r7, #16
 8006c88:	46bd      	mov	sp, r7
 8006c8a:	bd80      	pop	{r7, pc}

08006c8c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8006c8c:	b480      	push	{r7}
 8006c8e:	b083      	sub	sp, #12
 8006c90:	af00      	add	r7, sp, #0
 8006c92:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	695b      	ldr	r3, [r3, #20]
 8006c9a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006c9e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006ca2:	d11b      	bne.n	8006cdc <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006cac:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	2200      	movs	r2, #0
 8006cb2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	2220      	movs	r2, #32
 8006cb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	2200      	movs	r2, #0
 8006cc0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cc8:	f043 0204 	orr.w	r2, r3, #4
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	2200      	movs	r2, #0
 8006cd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8006cd8:	2301      	movs	r3, #1
 8006cda:	e000      	b.n	8006cde <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8006cdc:	2300      	movs	r3, #0
}
 8006cde:	4618      	mov	r0, r3
 8006ce0:	370c      	adds	r7, #12
 8006ce2:	46bd      	mov	sp, r7
 8006ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ce8:	4770      	bx	lr

08006cea <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8006cea:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006cec:	b08f      	sub	sp, #60	; 0x3c
 8006cee:	af0a      	add	r7, sp, #40	; 0x28
 8006cf0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d101      	bne.n	8006cfc <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8006cf8:	2301      	movs	r3, #1
 8006cfa:	e10f      	b.n	8006f1c <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8006d08:	b2db      	uxtb	r3, r3
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d106      	bne.n	8006d1c <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	2200      	movs	r2, #0
 8006d12:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8006d16:	6878      	ldr	r0, [r7, #4]
 8006d18:	f008 fe84 	bl	800fa24 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	2203      	movs	r2, #3
 8006d20:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8006d24:	68bb      	ldr	r3, [r7, #8]
 8006d26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d102      	bne.n	8006d36 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	2200      	movs	r2, #0
 8006d34:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	4618      	mov	r0, r3
 8006d3c:	f005 fc35 	bl	800c5aa <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	603b      	str	r3, [r7, #0]
 8006d46:	687e      	ldr	r6, [r7, #4]
 8006d48:	466d      	mov	r5, sp
 8006d4a:	f106 0410 	add.w	r4, r6, #16
 8006d4e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006d50:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006d52:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006d54:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006d56:	e894 0003 	ldmia.w	r4, {r0, r1}
 8006d5a:	e885 0003 	stmia.w	r5, {r0, r1}
 8006d5e:	1d33      	adds	r3, r6, #4
 8006d60:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006d62:	6838      	ldr	r0, [r7, #0]
 8006d64:	f005 fb0c 	bl	800c380 <USB_CoreInit>
 8006d68:	4603      	mov	r3, r0
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d005      	beq.n	8006d7a <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	2202      	movs	r2, #2
 8006d72:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8006d76:	2301      	movs	r3, #1
 8006d78:	e0d0      	b.n	8006f1c <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	2100      	movs	r1, #0
 8006d80:	4618      	mov	r0, r3
 8006d82:	f005 fc23 	bl	800c5cc <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006d86:	2300      	movs	r3, #0
 8006d88:	73fb      	strb	r3, [r7, #15]
 8006d8a:	e04a      	b.n	8006e22 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8006d8c:	7bfa      	ldrb	r2, [r7, #15]
 8006d8e:	6879      	ldr	r1, [r7, #4]
 8006d90:	4613      	mov	r3, r2
 8006d92:	00db      	lsls	r3, r3, #3
 8006d94:	1a9b      	subs	r3, r3, r2
 8006d96:	009b      	lsls	r3, r3, #2
 8006d98:	440b      	add	r3, r1
 8006d9a:	333d      	adds	r3, #61	; 0x3d
 8006d9c:	2201      	movs	r2, #1
 8006d9e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8006da0:	7bfa      	ldrb	r2, [r7, #15]
 8006da2:	6879      	ldr	r1, [r7, #4]
 8006da4:	4613      	mov	r3, r2
 8006da6:	00db      	lsls	r3, r3, #3
 8006da8:	1a9b      	subs	r3, r3, r2
 8006daa:	009b      	lsls	r3, r3, #2
 8006dac:	440b      	add	r3, r1
 8006dae:	333c      	adds	r3, #60	; 0x3c
 8006db0:	7bfa      	ldrb	r2, [r7, #15]
 8006db2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8006db4:	7bfa      	ldrb	r2, [r7, #15]
 8006db6:	7bfb      	ldrb	r3, [r7, #15]
 8006db8:	b298      	uxth	r0, r3
 8006dba:	6879      	ldr	r1, [r7, #4]
 8006dbc:	4613      	mov	r3, r2
 8006dbe:	00db      	lsls	r3, r3, #3
 8006dc0:	1a9b      	subs	r3, r3, r2
 8006dc2:	009b      	lsls	r3, r3, #2
 8006dc4:	440b      	add	r3, r1
 8006dc6:	3342      	adds	r3, #66	; 0x42
 8006dc8:	4602      	mov	r2, r0
 8006dca:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8006dcc:	7bfa      	ldrb	r2, [r7, #15]
 8006dce:	6879      	ldr	r1, [r7, #4]
 8006dd0:	4613      	mov	r3, r2
 8006dd2:	00db      	lsls	r3, r3, #3
 8006dd4:	1a9b      	subs	r3, r3, r2
 8006dd6:	009b      	lsls	r3, r3, #2
 8006dd8:	440b      	add	r3, r1
 8006dda:	333f      	adds	r3, #63	; 0x3f
 8006ddc:	2200      	movs	r2, #0
 8006dde:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8006de0:	7bfa      	ldrb	r2, [r7, #15]
 8006de2:	6879      	ldr	r1, [r7, #4]
 8006de4:	4613      	mov	r3, r2
 8006de6:	00db      	lsls	r3, r3, #3
 8006de8:	1a9b      	subs	r3, r3, r2
 8006dea:	009b      	lsls	r3, r3, #2
 8006dec:	440b      	add	r3, r1
 8006dee:	3344      	adds	r3, #68	; 0x44
 8006df0:	2200      	movs	r2, #0
 8006df2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8006df4:	7bfa      	ldrb	r2, [r7, #15]
 8006df6:	6879      	ldr	r1, [r7, #4]
 8006df8:	4613      	mov	r3, r2
 8006dfa:	00db      	lsls	r3, r3, #3
 8006dfc:	1a9b      	subs	r3, r3, r2
 8006dfe:	009b      	lsls	r3, r3, #2
 8006e00:	440b      	add	r3, r1
 8006e02:	3348      	adds	r3, #72	; 0x48
 8006e04:	2200      	movs	r2, #0
 8006e06:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8006e08:	7bfa      	ldrb	r2, [r7, #15]
 8006e0a:	6879      	ldr	r1, [r7, #4]
 8006e0c:	4613      	mov	r3, r2
 8006e0e:	00db      	lsls	r3, r3, #3
 8006e10:	1a9b      	subs	r3, r3, r2
 8006e12:	009b      	lsls	r3, r3, #2
 8006e14:	440b      	add	r3, r1
 8006e16:	3350      	adds	r3, #80	; 0x50
 8006e18:	2200      	movs	r2, #0
 8006e1a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006e1c:	7bfb      	ldrb	r3, [r7, #15]
 8006e1e:	3301      	adds	r3, #1
 8006e20:	73fb      	strb	r3, [r7, #15]
 8006e22:	7bfa      	ldrb	r2, [r7, #15]
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	685b      	ldr	r3, [r3, #4]
 8006e28:	429a      	cmp	r2, r3
 8006e2a:	d3af      	bcc.n	8006d8c <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006e2c:	2300      	movs	r3, #0
 8006e2e:	73fb      	strb	r3, [r7, #15]
 8006e30:	e044      	b.n	8006ebc <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8006e32:	7bfa      	ldrb	r2, [r7, #15]
 8006e34:	6879      	ldr	r1, [r7, #4]
 8006e36:	4613      	mov	r3, r2
 8006e38:	00db      	lsls	r3, r3, #3
 8006e3a:	1a9b      	subs	r3, r3, r2
 8006e3c:	009b      	lsls	r3, r3, #2
 8006e3e:	440b      	add	r3, r1
 8006e40:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8006e44:	2200      	movs	r2, #0
 8006e46:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8006e48:	7bfa      	ldrb	r2, [r7, #15]
 8006e4a:	6879      	ldr	r1, [r7, #4]
 8006e4c:	4613      	mov	r3, r2
 8006e4e:	00db      	lsls	r3, r3, #3
 8006e50:	1a9b      	subs	r3, r3, r2
 8006e52:	009b      	lsls	r3, r3, #2
 8006e54:	440b      	add	r3, r1
 8006e56:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8006e5a:	7bfa      	ldrb	r2, [r7, #15]
 8006e5c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8006e5e:	7bfa      	ldrb	r2, [r7, #15]
 8006e60:	6879      	ldr	r1, [r7, #4]
 8006e62:	4613      	mov	r3, r2
 8006e64:	00db      	lsls	r3, r3, #3
 8006e66:	1a9b      	subs	r3, r3, r2
 8006e68:	009b      	lsls	r3, r3, #2
 8006e6a:	440b      	add	r3, r1
 8006e6c:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8006e70:	2200      	movs	r2, #0
 8006e72:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8006e74:	7bfa      	ldrb	r2, [r7, #15]
 8006e76:	6879      	ldr	r1, [r7, #4]
 8006e78:	4613      	mov	r3, r2
 8006e7a:	00db      	lsls	r3, r3, #3
 8006e7c:	1a9b      	subs	r3, r3, r2
 8006e7e:	009b      	lsls	r3, r3, #2
 8006e80:	440b      	add	r3, r1
 8006e82:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8006e86:	2200      	movs	r2, #0
 8006e88:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8006e8a:	7bfa      	ldrb	r2, [r7, #15]
 8006e8c:	6879      	ldr	r1, [r7, #4]
 8006e8e:	4613      	mov	r3, r2
 8006e90:	00db      	lsls	r3, r3, #3
 8006e92:	1a9b      	subs	r3, r3, r2
 8006e94:	009b      	lsls	r3, r3, #2
 8006e96:	440b      	add	r3, r1
 8006e98:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8006e9c:	2200      	movs	r2, #0
 8006e9e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8006ea0:	7bfa      	ldrb	r2, [r7, #15]
 8006ea2:	6879      	ldr	r1, [r7, #4]
 8006ea4:	4613      	mov	r3, r2
 8006ea6:	00db      	lsls	r3, r3, #3
 8006ea8:	1a9b      	subs	r3, r3, r2
 8006eaa:	009b      	lsls	r3, r3, #2
 8006eac:	440b      	add	r3, r1
 8006eae:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8006eb2:	2200      	movs	r2, #0
 8006eb4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006eb6:	7bfb      	ldrb	r3, [r7, #15]
 8006eb8:	3301      	adds	r3, #1
 8006eba:	73fb      	strb	r3, [r7, #15]
 8006ebc:	7bfa      	ldrb	r2, [r7, #15]
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	685b      	ldr	r3, [r3, #4]
 8006ec2:	429a      	cmp	r2, r3
 8006ec4:	d3b5      	bcc.n	8006e32 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	603b      	str	r3, [r7, #0]
 8006ecc:	687e      	ldr	r6, [r7, #4]
 8006ece:	466d      	mov	r5, sp
 8006ed0:	f106 0410 	add.w	r4, r6, #16
 8006ed4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006ed6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006ed8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006eda:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006edc:	e894 0003 	ldmia.w	r4, {r0, r1}
 8006ee0:	e885 0003 	stmia.w	r5, {r0, r1}
 8006ee4:	1d33      	adds	r3, r6, #4
 8006ee6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006ee8:	6838      	ldr	r0, [r7, #0]
 8006eea:	f005 fb99 	bl	800c620 <USB_DevInit>
 8006eee:	4603      	mov	r3, r0
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d005      	beq.n	8006f00 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	2202      	movs	r2, #2
 8006ef8:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8006efc:	2301      	movs	r3, #1
 8006efe:	e00d      	b.n	8006f1c <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	2200      	movs	r2, #0
 8006f04:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	2201      	movs	r2, #1
 8006f0c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
  #endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	4618      	mov	r0, r3
 8006f16:	f006 fb8e 	bl	800d636 <USB_DevDisconnect>

  return HAL_OK;
 8006f1a:	2300      	movs	r3, #0
}
 8006f1c:	4618      	mov	r0, r3
 8006f1e:	3714      	adds	r7, #20
 8006f20:	46bd      	mov	sp, r7
 8006f22:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006f24 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8006f24:	b580      	push	{r7, lr}
 8006f26:	b084      	sub	sp, #16
 8006f28:	af00      	add	r7, sp, #0
 8006f2a:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */

  __HAL_LOCK(hpcd);
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8006f38:	2b01      	cmp	r3, #1
 8006f3a:	d101      	bne.n	8006f40 <HAL_PCD_Start+0x1c>
 8006f3c:	2302      	movs	r3, #2
 8006f3e:	e020      	b.n	8006f82 <HAL_PCD_Start+0x5e>
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	2201      	movs	r2, #1
 8006f44:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f4c:	2b01      	cmp	r3, #1
 8006f4e:	d109      	bne.n	8006f64 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8006f54:	2b01      	cmp	r3, #1
 8006f56:	d005      	beq.n	8006f64 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f5c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */
  (void)USB_DevConnect(hpcd->Instance);
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	4618      	mov	r0, r3
 8006f6a:	f006 fb4c 	bl	800d606 <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	4618      	mov	r0, r3
 8006f74:	f005 fb08 	bl	800c588 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	2200      	movs	r2, #0
 8006f7c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8006f80:	2300      	movs	r3, #0
}
 8006f82:	4618      	mov	r0, r3
 8006f84:	3710      	adds	r7, #16
 8006f86:	46bd      	mov	sp, r7
 8006f88:	bd80      	pop	{r7, pc}

08006f8a <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8006f8a:	b590      	push	{r4, r7, lr}
 8006f8c:	b08d      	sub	sp, #52	; 0x34
 8006f8e:	af00      	add	r7, sp, #0
 8006f90:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f98:	6a3b      	ldr	r3, [r7, #32]
 8006f9a:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	4618      	mov	r0, r3
 8006fa2:	f006 fbf3 	bl	800d78c <USB_GetMode>
 8006fa6:	4603      	mov	r3, r0
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	f040 838e 	bne.w	80076ca <HAL_PCD_IRQHandler+0x740>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	4618      	mov	r0, r3
 8006fb4:	f006 fb57 	bl	800d666 <USB_ReadInterrupts>
 8006fb8:	4603      	mov	r3, r0
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	f000 8384 	beq.w	80076c8 <HAL_PCD_IRQHandler+0x73e>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	4618      	mov	r0, r3
 8006fc6:	f006 fb4e 	bl	800d666 <USB_ReadInterrupts>
 8006fca:	4603      	mov	r3, r0
 8006fcc:	f003 0302 	and.w	r3, r3, #2
 8006fd0:	2b02      	cmp	r3, #2
 8006fd2:	d107      	bne.n	8006fe4 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	695a      	ldr	r2, [r3, #20]
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	f002 0202 	and.w	r2, r2, #2
 8006fe2:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	4618      	mov	r0, r3
 8006fea:	f006 fb3c 	bl	800d666 <USB_ReadInterrupts>
 8006fee:	4603      	mov	r3, r0
 8006ff0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006ff4:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8006ff8:	d17b      	bne.n	80070f2 <HAL_PCD_IRQHandler+0x168>
    {
      epnum = 0U;
 8006ffa:	2300      	movs	r3, #0
 8006ffc:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	4618      	mov	r0, r3
 8007004:	f006 fb42 	bl	800d68c <USB_ReadDevAllOutEpInterrupt>
 8007008:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 800700a:	e06f      	b.n	80070ec <HAL_PCD_IRQHandler+0x162>
      {
        if ((ep_intr & 0x1U) != 0U)
 800700c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800700e:	f003 0301 	and.w	r3, r3, #1
 8007012:	2b00      	cmp	r3, #0
 8007014:	d064      	beq.n	80070e0 <HAL_PCD_IRQHandler+0x156>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800701c:	b2d2      	uxtb	r2, r2
 800701e:	4611      	mov	r1, r2
 8007020:	4618      	mov	r0, r3
 8007022:	f006 fb67 	bl	800d6f4 <USB_ReadDevOutEPInterrupt>
 8007026:	61b8      	str	r0, [r7, #24]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8007028:	69bb      	ldr	r3, [r7, #24]
 800702a:	f003 0301 	and.w	r3, r3, #1
 800702e:	2b00      	cmp	r3, #0
 8007030:	d00c      	beq.n	800704c <HAL_PCD_IRQHandler+0xc2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8007032:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007034:	015a      	lsls	r2, r3, #5
 8007036:	69fb      	ldr	r3, [r7, #28]
 8007038:	4413      	add	r3, r2
 800703a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800703e:	461a      	mov	r2, r3
 8007040:	2301      	movs	r3, #1
 8007042:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8007044:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007046:	6878      	ldr	r0, [r7, #4]
 8007048:	f000 fe0e 	bl	8007c68 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800704c:	69bb      	ldr	r3, [r7, #24]
 800704e:	f003 0308 	and.w	r3, r3, #8
 8007052:	2b00      	cmp	r3, #0
 8007054:	d00c      	beq.n	8007070 <HAL_PCD_IRQHandler+0xe6>
          {
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8007056:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007058:	6878      	ldr	r0, [r7, #4]
 800705a:	f000 ff0d 	bl	8007e78 <PCD_EP_OutSetupPacket_int>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800705e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007060:	015a      	lsls	r2, r3, #5
 8007062:	69fb      	ldr	r3, [r7, #28]
 8007064:	4413      	add	r3, r2
 8007066:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800706a:	461a      	mov	r2, r3
 800706c:	2308      	movs	r3, #8
 800706e:	6093      	str	r3, [r2, #8]
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8007070:	69bb      	ldr	r3, [r7, #24]
 8007072:	f003 0310 	and.w	r3, r3, #16
 8007076:	2b00      	cmp	r3, #0
 8007078:	d008      	beq.n	800708c <HAL_PCD_IRQHandler+0x102>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800707a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800707c:	015a      	lsls	r2, r3, #5
 800707e:	69fb      	ldr	r3, [r7, #28]
 8007080:	4413      	add	r3, r2
 8007082:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007086:	461a      	mov	r2, r3
 8007088:	2310      	movs	r3, #16
 800708a:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800708c:	69bb      	ldr	r3, [r7, #24]
 800708e:	f003 0320 	and.w	r3, r3, #32
 8007092:	2b00      	cmp	r3, #0
 8007094:	d015      	beq.n	80070c2 <HAL_PCD_IRQHandler+0x138>
          {
            if (hpcd->Init.dma_enable == 1U)
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	691b      	ldr	r3, [r3, #16]
 800709a:	2b01      	cmp	r3, #1
 800709c:	d108      	bne.n	80070b0 <HAL_PCD_IRQHandler+0x126>
            {
              (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	6818      	ldr	r0, [r3, #0]
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80070a8:	461a      	mov	r2, r3
 80070aa:	2101      	movs	r1, #1
 80070ac:	f006 fbb2 	bl	800d814 <USB_EP0_OutStart>
            }
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80070b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070b2:	015a      	lsls	r2, r3, #5
 80070b4:	69fb      	ldr	r3, [r7, #28]
 80070b6:	4413      	add	r3, r2
 80070b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80070bc:	461a      	mov	r2, r3
 80070be:	2320      	movs	r3, #32
 80070c0:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80070c2:	69bb      	ldr	r3, [r7, #24]
 80070c4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	d009      	beq.n	80070e0 <HAL_PCD_IRQHandler+0x156>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80070cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070ce:	015a      	lsls	r2, r3, #5
 80070d0:	69fb      	ldr	r3, [r7, #28]
 80070d2:	4413      	add	r3, r2
 80070d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80070d8:	461a      	mov	r2, r3
 80070da:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80070de:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80070e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070e2:	3301      	adds	r3, #1
 80070e4:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80070e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070e8:	085b      	lsrs	r3, r3, #1
 80070ea:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80070ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d18c      	bne.n	800700c <HAL_PCD_IRQHandler+0x82>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	4618      	mov	r0, r3
 80070f8:	f006 fab5 	bl	800d666 <USB_ReadInterrupts>
 80070fc:	4603      	mov	r3, r0
 80070fe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007102:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007106:	f040 80c4 	bne.w	8007292 <HAL_PCD_IRQHandler+0x308>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	4618      	mov	r0, r3
 8007110:	f006 fad6 	bl	800d6c0 <USB_ReadDevAllInEpInterrupt>
 8007114:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8007116:	2300      	movs	r3, #0
 8007118:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 800711a:	e0b6      	b.n	800728a <HAL_PCD_IRQHandler+0x300>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800711c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800711e:	f003 0301 	and.w	r3, r3, #1
 8007122:	2b00      	cmp	r3, #0
 8007124:	f000 80ab 	beq.w	800727e <HAL_PCD_IRQHandler+0x2f4>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800712e:	b2d2      	uxtb	r2, r2
 8007130:	4611      	mov	r1, r2
 8007132:	4618      	mov	r0, r3
 8007134:	f006 fafc 	bl	800d730 <USB_ReadDevInEPInterrupt>
 8007138:	61b8      	str	r0, [r7, #24]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800713a:	69bb      	ldr	r3, [r7, #24]
 800713c:	f003 0301 	and.w	r3, r3, #1
 8007140:	2b00      	cmp	r3, #0
 8007142:	d05b      	beq.n	80071fc <HAL_PCD_IRQHandler+0x272>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8007144:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007146:	f003 030f 	and.w	r3, r3, #15
 800714a:	2201      	movs	r2, #1
 800714c:	fa02 f303 	lsl.w	r3, r2, r3
 8007150:	617b      	str	r3, [r7, #20]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8007152:	69fb      	ldr	r3, [r7, #28]
 8007154:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007158:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800715a:	697b      	ldr	r3, [r7, #20]
 800715c:	43db      	mvns	r3, r3
 800715e:	69f9      	ldr	r1, [r7, #28]
 8007160:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007164:	4013      	ands	r3, r2
 8007166:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8007168:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800716a:	015a      	lsls	r2, r3, #5
 800716c:	69fb      	ldr	r3, [r7, #28]
 800716e:	4413      	add	r3, r2
 8007170:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007174:	461a      	mov	r2, r3
 8007176:	2301      	movs	r3, #1
 8007178:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	691b      	ldr	r3, [r3, #16]
 800717e:	2b01      	cmp	r3, #1
 8007180:	d11b      	bne.n	80071ba <HAL_PCD_IRQHandler+0x230>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8007182:	6879      	ldr	r1, [r7, #4]
 8007184:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007186:	4613      	mov	r3, r2
 8007188:	00db      	lsls	r3, r3, #3
 800718a:	1a9b      	subs	r3, r3, r2
 800718c:	009b      	lsls	r3, r3, #2
 800718e:	440b      	add	r3, r1
 8007190:	3348      	adds	r3, #72	; 0x48
 8007192:	6819      	ldr	r1, [r3, #0]
 8007194:	6878      	ldr	r0, [r7, #4]
 8007196:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007198:	4613      	mov	r3, r2
 800719a:	00db      	lsls	r3, r3, #3
 800719c:	1a9b      	subs	r3, r3, r2
 800719e:	009b      	lsls	r3, r3, #2
 80071a0:	4403      	add	r3, r0
 80071a2:	3344      	adds	r3, #68	; 0x44
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	4419      	add	r1, r3
 80071a8:	6878      	ldr	r0, [r7, #4]
 80071aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80071ac:	4613      	mov	r3, r2
 80071ae:	00db      	lsls	r3, r3, #3
 80071b0:	1a9b      	subs	r3, r3, r2
 80071b2:	009b      	lsls	r3, r3, #2
 80071b4:	4403      	add	r3, r0
 80071b6:	3348      	adds	r3, #72	; 0x48
 80071b8:	6019      	str	r1, [r3, #0]
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80071ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071bc:	b2db      	uxtb	r3, r3
 80071be:	4619      	mov	r1, r3
 80071c0:	6878      	ldr	r0, [r7, #4]
 80071c2:	f008 fcb0 	bl	800fb26 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

            if (hpcd->Init.dma_enable == 1U)
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	691b      	ldr	r3, [r3, #16]
 80071ca:	2b01      	cmp	r3, #1
 80071cc:	d116      	bne.n	80071fc <HAL_PCD_IRQHandler+0x272>
            {
              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80071ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	d113      	bne.n	80071fc <HAL_PCD_IRQHandler+0x272>
 80071d4:	6879      	ldr	r1, [r7, #4]
 80071d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80071d8:	4613      	mov	r3, r2
 80071da:	00db      	lsls	r3, r3, #3
 80071dc:	1a9b      	subs	r3, r3, r2
 80071de:	009b      	lsls	r3, r3, #2
 80071e0:	440b      	add	r3, r1
 80071e2:	3350      	adds	r3, #80	; 0x50
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	d108      	bne.n	80071fc <HAL_PCD_IRQHandler+0x272>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	6818      	ldr	r0, [r3, #0]
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80071f4:	461a      	mov	r2, r3
 80071f6:	2101      	movs	r1, #1
 80071f8:	f006 fb0c 	bl	800d814 <USB_EP0_OutStart>
              }
            }
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80071fc:	69bb      	ldr	r3, [r7, #24]
 80071fe:	f003 0308 	and.w	r3, r3, #8
 8007202:	2b00      	cmp	r3, #0
 8007204:	d008      	beq.n	8007218 <HAL_PCD_IRQHandler+0x28e>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8007206:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007208:	015a      	lsls	r2, r3, #5
 800720a:	69fb      	ldr	r3, [r7, #28]
 800720c:	4413      	add	r3, r2
 800720e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007212:	461a      	mov	r2, r3
 8007214:	2308      	movs	r3, #8
 8007216:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8007218:	69bb      	ldr	r3, [r7, #24]
 800721a:	f003 0310 	and.w	r3, r3, #16
 800721e:	2b00      	cmp	r3, #0
 8007220:	d008      	beq.n	8007234 <HAL_PCD_IRQHandler+0x2aa>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8007222:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007224:	015a      	lsls	r2, r3, #5
 8007226:	69fb      	ldr	r3, [r7, #28]
 8007228:	4413      	add	r3, r2
 800722a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800722e:	461a      	mov	r2, r3
 8007230:	2310      	movs	r3, #16
 8007232:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8007234:	69bb      	ldr	r3, [r7, #24]
 8007236:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800723a:	2b00      	cmp	r3, #0
 800723c:	d008      	beq.n	8007250 <HAL_PCD_IRQHandler+0x2c6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800723e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007240:	015a      	lsls	r2, r3, #5
 8007242:	69fb      	ldr	r3, [r7, #28]
 8007244:	4413      	add	r3, r2
 8007246:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800724a:	461a      	mov	r2, r3
 800724c:	2340      	movs	r3, #64	; 0x40
 800724e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8007250:	69bb      	ldr	r3, [r7, #24]
 8007252:	f003 0302 	and.w	r3, r3, #2
 8007256:	2b00      	cmp	r3, #0
 8007258:	d008      	beq.n	800726c <HAL_PCD_IRQHandler+0x2e2>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800725a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800725c:	015a      	lsls	r2, r3, #5
 800725e:	69fb      	ldr	r3, [r7, #28]
 8007260:	4413      	add	r3, r2
 8007262:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007266:	461a      	mov	r2, r3
 8007268:	2302      	movs	r3, #2
 800726a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800726c:	69bb      	ldr	r3, [r7, #24]
 800726e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007272:	2b00      	cmp	r3, #0
 8007274:	d003      	beq.n	800727e <HAL_PCD_IRQHandler+0x2f4>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8007276:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007278:	6878      	ldr	r0, [r7, #4]
 800727a:	f000 fc67 	bl	8007b4c <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800727e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007280:	3301      	adds	r3, #1
 8007282:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8007284:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007286:	085b      	lsrs	r3, r3, #1
 8007288:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800728a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800728c:	2b00      	cmp	r3, #0
 800728e:	f47f af45 	bne.w	800711c <HAL_PCD_IRQHandler+0x192>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	4618      	mov	r0, r3
 8007298:	f006 f9e5 	bl	800d666 <USB_ReadInterrupts>
 800729c:	4603      	mov	r3, r0
 800729e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80072a2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80072a6:	d122      	bne.n	80072ee <HAL_PCD_IRQHandler+0x364>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80072a8:	69fb      	ldr	r3, [r7, #28]
 80072aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80072ae:	685b      	ldr	r3, [r3, #4]
 80072b0:	69fa      	ldr	r2, [r7, #28]
 80072b2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80072b6:	f023 0301 	bic.w	r3, r3, #1
 80072ba:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 80072c2:	2b01      	cmp	r3, #1
 80072c4:	d108      	bne.n	80072d8 <HAL_PCD_IRQHandler+0x34e>
      {
        hpcd->LPM_State = LPM_L0;
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	2200      	movs	r2, #0
 80072ca:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80072ce:	2100      	movs	r1, #0
 80072d0:	6878      	ldr	r0, [r7, #4]
 80072d2:	f000 fe89 	bl	8007fe8 <HAL_PCDEx_LPM_Callback>
 80072d6:	e002      	b.n	80072de <HAL_PCD_IRQHandler+0x354>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80072d8:	6878      	ldr	r0, [r7, #4]
 80072da:	f008 fc9b 	bl	800fc14 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	695a      	ldr	r2, [r3, #20]
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80072ec:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	4618      	mov	r0, r3
 80072f4:	f006 f9b7 	bl	800d666 <USB_ReadInterrupts>
 80072f8:	4603      	mov	r3, r0
 80072fa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80072fe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007302:	d112      	bne.n	800732a <HAL_PCD_IRQHandler+0x3a0>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8007304:	69fb      	ldr	r3, [r7, #28]
 8007306:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800730a:	689b      	ldr	r3, [r3, #8]
 800730c:	f003 0301 	and.w	r3, r3, #1
 8007310:	2b01      	cmp	r3, #1
 8007312:	d102      	bne.n	800731a <HAL_PCD_IRQHandler+0x390>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8007314:	6878      	ldr	r0, [r7, #4]
 8007316:	f008 fc57 	bl	800fbc8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	695a      	ldr	r2, [r3, #20]
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8007328:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    #endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	4618      	mov	r0, r3
 8007330:	f006 f999 	bl	800d666 <USB_ReadInterrupts>
 8007334:	4603      	mov	r3, r0
 8007336:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800733a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800733e:	f040 80a7 	bne.w	8007490 <HAL_PCD_IRQHandler+0x506>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8007342:	69fb      	ldr	r3, [r7, #28]
 8007344:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007348:	685b      	ldr	r3, [r3, #4]
 800734a:	69fa      	ldr	r2, [r7, #28]
 800734c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007350:	f023 0301 	bic.w	r3, r3, #1
 8007354:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	2110      	movs	r1, #16
 800735c:	4618      	mov	r0, r3
 800735e:	f005 fad1 	bl	800c904 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007362:	2300      	movs	r3, #0
 8007364:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007366:	e036      	b.n	80073d6 <HAL_PCD_IRQHandler+0x44c>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8007368:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800736a:	015a      	lsls	r2, r3, #5
 800736c:	69fb      	ldr	r3, [r7, #28]
 800736e:	4413      	add	r3, r2
 8007370:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007374:	461a      	mov	r2, r3
 8007376:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800737a:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800737c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800737e:	015a      	lsls	r2, r3, #5
 8007380:	69fb      	ldr	r3, [r7, #28]
 8007382:	4413      	add	r3, r2
 8007384:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800738c:	0151      	lsls	r1, r2, #5
 800738e:	69fa      	ldr	r2, [r7, #28]
 8007390:	440a      	add	r2, r1
 8007392:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007396:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800739a:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800739c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800739e:	015a      	lsls	r2, r3, #5
 80073a0:	69fb      	ldr	r3, [r7, #28]
 80073a2:	4413      	add	r3, r2
 80073a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80073a8:	461a      	mov	r2, r3
 80073aa:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80073ae:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80073b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073b2:	015a      	lsls	r2, r3, #5
 80073b4:	69fb      	ldr	r3, [r7, #28]
 80073b6:	4413      	add	r3, r2
 80073b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80073c0:	0151      	lsls	r1, r2, #5
 80073c2:	69fa      	ldr	r2, [r7, #28]
 80073c4:	440a      	add	r2, r1
 80073c6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80073ca:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80073ce:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80073d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073d2:	3301      	adds	r3, #1
 80073d4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	685b      	ldr	r3, [r3, #4]
 80073da:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80073dc:	429a      	cmp	r2, r3
 80073de:	d3c3      	bcc.n	8007368 <HAL_PCD_IRQHandler+0x3de>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80073e0:	69fb      	ldr	r3, [r7, #28]
 80073e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80073e6:	69db      	ldr	r3, [r3, #28]
 80073e8:	69fa      	ldr	r2, [r7, #28]
 80073ea:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80073ee:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80073f2:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	d016      	beq.n	800742a <HAL_PCD_IRQHandler+0x4a0>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80073fc:	69fb      	ldr	r3, [r7, #28]
 80073fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007402:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007406:	69fa      	ldr	r2, [r7, #28]
 8007408:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800740c:	f043 030b 	orr.w	r3, r3, #11
 8007410:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8007414:	69fb      	ldr	r3, [r7, #28]
 8007416:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800741a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800741c:	69fa      	ldr	r2, [r7, #28]
 800741e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007422:	f043 030b 	orr.w	r3, r3, #11
 8007426:	6453      	str	r3, [r2, #68]	; 0x44
 8007428:	e015      	b.n	8007456 <HAL_PCD_IRQHandler+0x4cc>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800742a:	69fb      	ldr	r3, [r7, #28]
 800742c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007430:	695b      	ldr	r3, [r3, #20]
 8007432:	69fa      	ldr	r2, [r7, #28]
 8007434:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007438:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800743c:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8007440:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8007442:	69fb      	ldr	r3, [r7, #28]
 8007444:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007448:	691b      	ldr	r3, [r3, #16]
 800744a:	69fa      	ldr	r2, [r7, #28]
 800744c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007450:	f043 030b 	orr.w	r3, r3, #11
 8007454:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8007456:	69fb      	ldr	r3, [r7, #28]
 8007458:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	69fa      	ldr	r2, [r7, #28]
 8007460:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007464:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8007468:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	6818      	ldr	r0, [r3, #0]
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	691b      	ldr	r3, [r3, #16]
 8007472:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800747a:	461a      	mov	r2, r3
 800747c:	f006 f9ca 	bl	800d814 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	695a      	ldr	r2, [r3, #20]
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800748e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	4618      	mov	r0, r3
 8007496:	f006 f8e6 	bl	800d666 <USB_ReadInterrupts>
 800749a:	4603      	mov	r3, r0
 800749c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80074a0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80074a4:	d124      	bne.n	80074f0 <HAL_PCD_IRQHandler+0x566>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	4618      	mov	r0, r3
 80074ac:	f006 f97c 	bl	800d7a8 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	4618      	mov	r0, r3
 80074b6:	f005 fa86 	bl	800c9c6 <USB_GetDevSpeed>
 80074ba:	4603      	mov	r3, r0
 80074bc:	461a      	mov	r2, r3
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	681c      	ldr	r4, [r3, #0]
 80074c6:	f001 f9a3 	bl	8008810 <HAL_RCC_GetHCLKFreq>
 80074ca:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80074d0:	b2db      	uxtb	r3, r3
 80074d2:	461a      	mov	r2, r3
 80074d4:	4620      	mov	r0, r4
 80074d6:	f004 ffb5 	bl	800c444 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80074da:	6878      	ldr	r0, [r7, #4]
 80074dc:	f008 fb4b 	bl	800fb76 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	695a      	ldr	r2, [r3, #20]
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80074ee:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	4618      	mov	r0, r3
 80074f6:	f006 f8b6 	bl	800d666 <USB_ReadInterrupts>
 80074fa:	4603      	mov	r3, r0
 80074fc:	f003 0310 	and.w	r3, r3, #16
 8007500:	2b10      	cmp	r3, #16
 8007502:	d161      	bne.n	80075c8 <HAL_PCD_IRQHandler+0x63e>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	699a      	ldr	r2, [r3, #24]
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	f022 0210 	bic.w	r2, r2, #16
 8007512:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8007514:	6a3b      	ldr	r3, [r7, #32]
 8007516:	6a1b      	ldr	r3, [r3, #32]
 8007518:	613b      	str	r3, [r7, #16]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 800751a:	693b      	ldr	r3, [r7, #16]
 800751c:	f003 020f 	and.w	r2, r3, #15
 8007520:	4613      	mov	r3, r2
 8007522:	00db      	lsls	r3, r3, #3
 8007524:	1a9b      	subs	r3, r3, r2
 8007526:	009b      	lsls	r3, r3, #2
 8007528:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800752c:	687a      	ldr	r2, [r7, #4]
 800752e:	4413      	add	r3, r2
 8007530:	3304      	adds	r3, #4
 8007532:	60fb      	str	r3, [r7, #12]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8007534:	693b      	ldr	r3, [r7, #16]
 8007536:	0c5b      	lsrs	r3, r3, #17
 8007538:	f003 030f 	and.w	r3, r3, #15
 800753c:	2b02      	cmp	r3, #2
 800753e:	d124      	bne.n	800758a <HAL_PCD_IRQHandler+0x600>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8007540:	693a      	ldr	r2, [r7, #16]
 8007542:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8007546:	4013      	ands	r3, r2
 8007548:	2b00      	cmp	r3, #0
 800754a:	d035      	beq.n	80075b8 <HAL_PCD_IRQHandler+0x62e>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8007550:	693b      	ldr	r3, [r7, #16]
 8007552:	091b      	lsrs	r3, r3, #4
 8007554:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8007556:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800755a:	b29b      	uxth	r3, r3
 800755c:	461a      	mov	r2, r3
 800755e:	6a38      	ldr	r0, [r7, #32]
 8007560:	f005 ff2e 	bl	800d3c0 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	68da      	ldr	r2, [r3, #12]
 8007568:	693b      	ldr	r3, [r7, #16]
 800756a:	091b      	lsrs	r3, r3, #4
 800756c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007570:	441a      	add	r2, r3
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	699a      	ldr	r2, [r3, #24]
 800757a:	693b      	ldr	r3, [r7, #16]
 800757c:	091b      	lsrs	r3, r3, #4
 800757e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007582:	441a      	add	r2, r3
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	619a      	str	r2, [r3, #24]
 8007588:	e016      	b.n	80075b8 <HAL_PCD_IRQHandler+0x62e>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 800758a:	693b      	ldr	r3, [r7, #16]
 800758c:	0c5b      	lsrs	r3, r3, #17
 800758e:	f003 030f 	and.w	r3, r3, #15
 8007592:	2b06      	cmp	r3, #6
 8007594:	d110      	bne.n	80075b8 <HAL_PCD_IRQHandler+0x62e>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800759c:	2208      	movs	r2, #8
 800759e:	4619      	mov	r1, r3
 80075a0:	6a38      	ldr	r0, [r7, #32]
 80075a2:	f005 ff0d 	bl	800d3c0 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	699a      	ldr	r2, [r3, #24]
 80075aa:	693b      	ldr	r3, [r7, #16]
 80075ac:	091b      	lsrs	r3, r3, #4
 80075ae:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80075b2:	441a      	add	r2, r3
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	699a      	ldr	r2, [r3, #24]
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	f042 0210 	orr.w	r2, r2, #16
 80075c6:	619a      	str	r2, [r3, #24]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	4618      	mov	r0, r3
 80075ce:	f006 f84a 	bl	800d666 <USB_ReadInterrupts>
 80075d2:	4603      	mov	r3, r0
 80075d4:	f003 0308 	and.w	r3, r3, #8
 80075d8:	2b08      	cmp	r3, #8
 80075da:	d10a      	bne.n	80075f2 <HAL_PCD_IRQHandler+0x668>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80075dc:	6878      	ldr	r0, [r7, #4]
 80075de:	f008 fabc 	bl	800fb5a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	695a      	ldr	r2, [r3, #20]
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	f002 0208 	and.w	r2, r2, #8
 80075f0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	4618      	mov	r0, r3
 80075f8:	f006 f835 	bl	800d666 <USB_ReadInterrupts>
 80075fc:	4603      	mov	r3, r0
 80075fe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007602:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007606:	d10f      	bne.n	8007628 <HAL_PCD_IRQHandler+0x69e>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8007608:	2300      	movs	r3, #0
 800760a:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800760c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800760e:	b2db      	uxtb	r3, r3
 8007610:	4619      	mov	r1, r3
 8007612:	6878      	ldr	r0, [r7, #4]
 8007614:	f008 fb1e 	bl	800fc54 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	695a      	ldr	r2, [r3, #20]
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8007626:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	4618      	mov	r0, r3
 800762e:	f006 f81a 	bl	800d666 <USB_ReadInterrupts>
 8007632:	4603      	mov	r3, r0
 8007634:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007638:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800763c:	d10f      	bne.n	800765e <HAL_PCD_IRQHandler+0x6d4>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 800763e:	2300      	movs	r3, #0
 8007640:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8007642:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007644:	b2db      	uxtb	r3, r3
 8007646:	4619      	mov	r1, r3
 8007648:	6878      	ldr	r0, [r7, #4]
 800764a:	f008 faf1 	bl	800fc30 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	695a      	ldr	r2, [r3, #20]
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 800765c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	4618      	mov	r0, r3
 8007664:	f005 ffff 	bl	800d666 <USB_ReadInterrupts>
 8007668:	4603      	mov	r3, r0
 800766a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800766e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007672:	d10a      	bne.n	800768a <HAL_PCD_IRQHandler+0x700>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8007674:	6878      	ldr	r0, [r7, #4]
 8007676:	f008 faff 	bl	800fc78 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	695a      	ldr	r2, [r3, #20]
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8007688:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	4618      	mov	r0, r3
 8007690:	f005 ffe9 	bl	800d666 <USB_ReadInterrupts>
 8007694:	4603      	mov	r3, r0
 8007696:	f003 0304 	and.w	r3, r3, #4
 800769a:	2b04      	cmp	r3, #4
 800769c:	d115      	bne.n	80076ca <HAL_PCD_IRQHandler+0x740>
    {
      temp = hpcd->Instance->GOTGINT;
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	685b      	ldr	r3, [r3, #4]
 80076a4:	613b      	str	r3, [r7, #16]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80076a6:	693b      	ldr	r3, [r7, #16]
 80076a8:	f003 0304 	and.w	r3, r3, #4
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	d002      	beq.n	80076b6 <HAL_PCD_IRQHandler+0x72c>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80076b0:	6878      	ldr	r0, [r7, #4]
 80076b2:	f008 faef 	bl	800fc94 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	6859      	ldr	r1, [r3, #4]
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	693a      	ldr	r2, [r7, #16]
 80076c2:	430a      	orrs	r2, r1
 80076c4:	605a      	str	r2, [r3, #4]
 80076c6:	e000      	b.n	80076ca <HAL_PCD_IRQHandler+0x740>
      return;
 80076c8:	bf00      	nop
    }
  }
}
 80076ca:	3734      	adds	r7, #52	; 0x34
 80076cc:	46bd      	mov	sp, r7
 80076ce:	bd90      	pop	{r4, r7, pc}

080076d0 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80076d0:	b580      	push	{r7, lr}
 80076d2:	b082      	sub	sp, #8
 80076d4:	af00      	add	r7, sp, #0
 80076d6:	6078      	str	r0, [r7, #4]
 80076d8:	460b      	mov	r3, r1
 80076da:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80076e2:	2b01      	cmp	r3, #1
 80076e4:	d101      	bne.n	80076ea <HAL_PCD_SetAddress+0x1a>
 80076e6:	2302      	movs	r3, #2
 80076e8:	e013      	b.n	8007712 <HAL_PCD_SetAddress+0x42>
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	2201      	movs	r2, #1
 80076ee:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	78fa      	ldrb	r2, [r7, #3]
 80076f6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	78fa      	ldrb	r2, [r7, #3]
 8007700:	4611      	mov	r1, r2
 8007702:	4618      	mov	r0, r3
 8007704:	f005 ff59 	bl	800d5ba <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	2200      	movs	r2, #0
 800770c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8007710:	2300      	movs	r3, #0
}
 8007712:	4618      	mov	r0, r3
 8007714:	3708      	adds	r7, #8
 8007716:	46bd      	mov	sp, r7
 8007718:	bd80      	pop	{r7, pc}

0800771a <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 800771a:	b580      	push	{r7, lr}
 800771c:	b084      	sub	sp, #16
 800771e:	af00      	add	r7, sp, #0
 8007720:	6078      	str	r0, [r7, #4]
 8007722:	4608      	mov	r0, r1
 8007724:	4611      	mov	r1, r2
 8007726:	461a      	mov	r2, r3
 8007728:	4603      	mov	r3, r0
 800772a:	70fb      	strb	r3, [r7, #3]
 800772c:	460b      	mov	r3, r1
 800772e:	803b      	strh	r3, [r7, #0]
 8007730:	4613      	mov	r3, r2
 8007732:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8007734:	2300      	movs	r3, #0
 8007736:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8007738:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800773c:	2b00      	cmp	r3, #0
 800773e:	da0f      	bge.n	8007760 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007740:	78fb      	ldrb	r3, [r7, #3]
 8007742:	f003 020f 	and.w	r2, r3, #15
 8007746:	4613      	mov	r3, r2
 8007748:	00db      	lsls	r3, r3, #3
 800774a:	1a9b      	subs	r3, r3, r2
 800774c:	009b      	lsls	r3, r3, #2
 800774e:	3338      	adds	r3, #56	; 0x38
 8007750:	687a      	ldr	r2, [r7, #4]
 8007752:	4413      	add	r3, r2
 8007754:	3304      	adds	r3, #4
 8007756:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	2201      	movs	r2, #1
 800775c:	705a      	strb	r2, [r3, #1]
 800775e:	e00f      	b.n	8007780 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007760:	78fb      	ldrb	r3, [r7, #3]
 8007762:	f003 020f 	and.w	r2, r3, #15
 8007766:	4613      	mov	r3, r2
 8007768:	00db      	lsls	r3, r3, #3
 800776a:	1a9b      	subs	r3, r3, r2
 800776c:	009b      	lsls	r3, r3, #2
 800776e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8007772:	687a      	ldr	r2, [r7, #4]
 8007774:	4413      	add	r3, r2
 8007776:	3304      	adds	r3, #4
 8007778:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	2200      	movs	r2, #0
 800777e:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8007780:	78fb      	ldrb	r3, [r7, #3]
 8007782:	f003 030f 	and.w	r3, r3, #15
 8007786:	b2da      	uxtb	r2, r3
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800778c:	883a      	ldrh	r2, [r7, #0]
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	78ba      	ldrb	r2, [r7, #2]
 8007796:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	785b      	ldrb	r3, [r3, #1]
 800779c:	2b00      	cmp	r3, #0
 800779e:	d004      	beq.n	80077aa <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	781b      	ldrb	r3, [r3, #0]
 80077a4:	b29a      	uxth	r2, r3
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80077aa:	78bb      	ldrb	r3, [r7, #2]
 80077ac:	2b02      	cmp	r3, #2
 80077ae:	d102      	bne.n	80077b6 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	2200      	movs	r2, #0
 80077b4:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80077bc:	2b01      	cmp	r3, #1
 80077be:	d101      	bne.n	80077c4 <HAL_PCD_EP_Open+0xaa>
 80077c0:	2302      	movs	r3, #2
 80077c2:	e00e      	b.n	80077e2 <HAL_PCD_EP_Open+0xc8>
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	2201      	movs	r2, #1
 80077c8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	68f9      	ldr	r1, [r7, #12]
 80077d2:	4618      	mov	r0, r3
 80077d4:	f005 f91c 	bl	800ca10 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	2200      	movs	r2, #0
 80077dc:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 80077e0:	7afb      	ldrb	r3, [r7, #11]
}
 80077e2:	4618      	mov	r0, r3
 80077e4:	3710      	adds	r7, #16
 80077e6:	46bd      	mov	sp, r7
 80077e8:	bd80      	pop	{r7, pc}

080077ea <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80077ea:	b580      	push	{r7, lr}
 80077ec:	b084      	sub	sp, #16
 80077ee:	af00      	add	r7, sp, #0
 80077f0:	6078      	str	r0, [r7, #4]
 80077f2:	460b      	mov	r3, r1
 80077f4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80077f6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	da0f      	bge.n	800781e <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80077fe:	78fb      	ldrb	r3, [r7, #3]
 8007800:	f003 020f 	and.w	r2, r3, #15
 8007804:	4613      	mov	r3, r2
 8007806:	00db      	lsls	r3, r3, #3
 8007808:	1a9b      	subs	r3, r3, r2
 800780a:	009b      	lsls	r3, r3, #2
 800780c:	3338      	adds	r3, #56	; 0x38
 800780e:	687a      	ldr	r2, [r7, #4]
 8007810:	4413      	add	r3, r2
 8007812:	3304      	adds	r3, #4
 8007814:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	2201      	movs	r2, #1
 800781a:	705a      	strb	r2, [r3, #1]
 800781c:	e00f      	b.n	800783e <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800781e:	78fb      	ldrb	r3, [r7, #3]
 8007820:	f003 020f 	and.w	r2, r3, #15
 8007824:	4613      	mov	r3, r2
 8007826:	00db      	lsls	r3, r3, #3
 8007828:	1a9b      	subs	r3, r3, r2
 800782a:	009b      	lsls	r3, r3, #2
 800782c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8007830:	687a      	ldr	r2, [r7, #4]
 8007832:	4413      	add	r3, r2
 8007834:	3304      	adds	r3, #4
 8007836:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8007838:	68fb      	ldr	r3, [r7, #12]
 800783a:	2200      	movs	r2, #0
 800783c:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800783e:	78fb      	ldrb	r3, [r7, #3]
 8007840:	f003 030f 	and.w	r3, r3, #15
 8007844:	b2da      	uxtb	r2, r3
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8007850:	2b01      	cmp	r3, #1
 8007852:	d101      	bne.n	8007858 <HAL_PCD_EP_Close+0x6e>
 8007854:	2302      	movs	r3, #2
 8007856:	e00e      	b.n	8007876 <HAL_PCD_EP_Close+0x8c>
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	2201      	movs	r2, #1
 800785c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	68f9      	ldr	r1, [r7, #12]
 8007866:	4618      	mov	r0, r3
 8007868:	f005 f95a 	bl	800cb20 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	2200      	movs	r2, #0
 8007870:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8007874:	2300      	movs	r3, #0
}
 8007876:	4618      	mov	r0, r3
 8007878:	3710      	adds	r7, #16
 800787a:	46bd      	mov	sp, r7
 800787c:	bd80      	pop	{r7, pc}

0800787e <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800787e:	b580      	push	{r7, lr}
 8007880:	b086      	sub	sp, #24
 8007882:	af00      	add	r7, sp, #0
 8007884:	60f8      	str	r0, [r7, #12]
 8007886:	607a      	str	r2, [r7, #4]
 8007888:	603b      	str	r3, [r7, #0]
 800788a:	460b      	mov	r3, r1
 800788c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800788e:	7afb      	ldrb	r3, [r7, #11]
 8007890:	f003 020f 	and.w	r2, r3, #15
 8007894:	4613      	mov	r3, r2
 8007896:	00db      	lsls	r3, r3, #3
 8007898:	1a9b      	subs	r3, r3, r2
 800789a:	009b      	lsls	r3, r3, #2
 800789c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80078a0:	68fa      	ldr	r2, [r7, #12]
 80078a2:	4413      	add	r3, r2
 80078a4:	3304      	adds	r3, #4
 80078a6:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80078a8:	697b      	ldr	r3, [r7, #20]
 80078aa:	687a      	ldr	r2, [r7, #4]
 80078ac:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80078ae:	697b      	ldr	r3, [r7, #20]
 80078b0:	683a      	ldr	r2, [r7, #0]
 80078b2:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 80078b4:	697b      	ldr	r3, [r7, #20]
 80078b6:	2200      	movs	r2, #0
 80078b8:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 80078ba:	697b      	ldr	r3, [r7, #20]
 80078bc:	2200      	movs	r2, #0
 80078be:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80078c0:	7afb      	ldrb	r3, [r7, #11]
 80078c2:	f003 030f 	and.w	r3, r3, #15
 80078c6:	b2da      	uxtb	r2, r3
 80078c8:	697b      	ldr	r3, [r7, #20]
 80078ca:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	691b      	ldr	r3, [r3, #16]
 80078d0:	2b01      	cmp	r3, #1
 80078d2:	d102      	bne.n	80078da <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80078d4:	687a      	ldr	r2, [r7, #4]
 80078d6:	697b      	ldr	r3, [r7, #20]
 80078d8:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80078da:	7afb      	ldrb	r3, [r7, #11]
 80078dc:	f003 030f 	and.w	r3, r3, #15
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	d109      	bne.n	80078f8 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	6818      	ldr	r0, [r3, #0]
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	691b      	ldr	r3, [r3, #16]
 80078ec:	b2db      	uxtb	r3, r3
 80078ee:	461a      	mov	r2, r3
 80078f0:	6979      	ldr	r1, [r7, #20]
 80078f2:	f005 fbdd 	bl	800d0b0 <USB_EP0StartXfer>
 80078f6:	e008      	b.n	800790a <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	6818      	ldr	r0, [r3, #0]
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	691b      	ldr	r3, [r3, #16]
 8007900:	b2db      	uxtb	r3, r3
 8007902:	461a      	mov	r2, r3
 8007904:	6979      	ldr	r1, [r7, #20]
 8007906:	f005 f98f 	bl	800cc28 <USB_EPStartXfer>
  }

  return HAL_OK;
 800790a:	2300      	movs	r3, #0
}
 800790c:	4618      	mov	r0, r3
 800790e:	3718      	adds	r7, #24
 8007910:	46bd      	mov	sp, r7
 8007912:	bd80      	pop	{r7, pc}

08007914 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007914:	b480      	push	{r7}
 8007916:	b083      	sub	sp, #12
 8007918:	af00      	add	r7, sp, #0
 800791a:	6078      	str	r0, [r7, #4]
 800791c:	460b      	mov	r3, r1
 800791e:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8007920:	78fb      	ldrb	r3, [r7, #3]
 8007922:	f003 020f 	and.w	r2, r3, #15
 8007926:	6879      	ldr	r1, [r7, #4]
 8007928:	4613      	mov	r3, r2
 800792a:	00db      	lsls	r3, r3, #3
 800792c:	1a9b      	subs	r3, r3, r2
 800792e:	009b      	lsls	r3, r3, #2
 8007930:	440b      	add	r3, r1
 8007932:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8007936:	681b      	ldr	r3, [r3, #0]
}
 8007938:	4618      	mov	r0, r3
 800793a:	370c      	adds	r7, #12
 800793c:	46bd      	mov	sp, r7
 800793e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007942:	4770      	bx	lr

08007944 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8007944:	b580      	push	{r7, lr}
 8007946:	b086      	sub	sp, #24
 8007948:	af00      	add	r7, sp, #0
 800794a:	60f8      	str	r0, [r7, #12]
 800794c:	607a      	str	r2, [r7, #4]
 800794e:	603b      	str	r3, [r7, #0]
 8007950:	460b      	mov	r3, r1
 8007952:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007954:	7afb      	ldrb	r3, [r7, #11]
 8007956:	f003 020f 	and.w	r2, r3, #15
 800795a:	4613      	mov	r3, r2
 800795c:	00db      	lsls	r3, r3, #3
 800795e:	1a9b      	subs	r3, r3, r2
 8007960:	009b      	lsls	r3, r3, #2
 8007962:	3338      	adds	r3, #56	; 0x38
 8007964:	68fa      	ldr	r2, [r7, #12]
 8007966:	4413      	add	r3, r2
 8007968:	3304      	adds	r3, #4
 800796a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800796c:	697b      	ldr	r3, [r7, #20]
 800796e:	687a      	ldr	r2, [r7, #4]
 8007970:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8007972:	697b      	ldr	r3, [r7, #20]
 8007974:	683a      	ldr	r2, [r7, #0]
 8007976:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8007978:	697b      	ldr	r3, [r7, #20]
 800797a:	2200      	movs	r2, #0
 800797c:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 800797e:	697b      	ldr	r3, [r7, #20]
 8007980:	2201      	movs	r2, #1
 8007982:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007984:	7afb      	ldrb	r3, [r7, #11]
 8007986:	f003 030f 	and.w	r3, r3, #15
 800798a:	b2da      	uxtb	r2, r3
 800798c:	697b      	ldr	r3, [r7, #20]
 800798e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	691b      	ldr	r3, [r3, #16]
 8007994:	2b01      	cmp	r3, #1
 8007996:	d102      	bne.n	800799e <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8007998:	687a      	ldr	r2, [r7, #4]
 800799a:	697b      	ldr	r3, [r7, #20]
 800799c:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800799e:	7afb      	ldrb	r3, [r7, #11]
 80079a0:	f003 030f 	and.w	r3, r3, #15
 80079a4:	2b00      	cmp	r3, #0
 80079a6:	d109      	bne.n	80079bc <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	6818      	ldr	r0, [r3, #0]
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	691b      	ldr	r3, [r3, #16]
 80079b0:	b2db      	uxtb	r3, r3
 80079b2:	461a      	mov	r2, r3
 80079b4:	6979      	ldr	r1, [r7, #20]
 80079b6:	f005 fb7b 	bl	800d0b0 <USB_EP0StartXfer>
 80079ba:	e008      	b.n	80079ce <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	6818      	ldr	r0, [r3, #0]
 80079c0:	68fb      	ldr	r3, [r7, #12]
 80079c2:	691b      	ldr	r3, [r3, #16]
 80079c4:	b2db      	uxtb	r3, r3
 80079c6:	461a      	mov	r2, r3
 80079c8:	6979      	ldr	r1, [r7, #20]
 80079ca:	f005 f92d 	bl	800cc28 <USB_EPStartXfer>
  }

  return HAL_OK;
 80079ce:	2300      	movs	r3, #0
}
 80079d0:	4618      	mov	r0, r3
 80079d2:	3718      	adds	r7, #24
 80079d4:	46bd      	mov	sp, r7
 80079d6:	bd80      	pop	{r7, pc}

080079d8 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80079d8:	b580      	push	{r7, lr}
 80079da:	b084      	sub	sp, #16
 80079dc:	af00      	add	r7, sp, #0
 80079de:	6078      	str	r0, [r7, #4]
 80079e0:	460b      	mov	r3, r1
 80079e2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80079e4:	78fb      	ldrb	r3, [r7, #3]
 80079e6:	f003 020f 	and.w	r2, r3, #15
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	685b      	ldr	r3, [r3, #4]
 80079ee:	429a      	cmp	r2, r3
 80079f0:	d901      	bls.n	80079f6 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80079f2:	2301      	movs	r3, #1
 80079f4:	e050      	b.n	8007a98 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80079f6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	da0f      	bge.n	8007a1e <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80079fe:	78fb      	ldrb	r3, [r7, #3]
 8007a00:	f003 020f 	and.w	r2, r3, #15
 8007a04:	4613      	mov	r3, r2
 8007a06:	00db      	lsls	r3, r3, #3
 8007a08:	1a9b      	subs	r3, r3, r2
 8007a0a:	009b      	lsls	r3, r3, #2
 8007a0c:	3338      	adds	r3, #56	; 0x38
 8007a0e:	687a      	ldr	r2, [r7, #4]
 8007a10:	4413      	add	r3, r2
 8007a12:	3304      	adds	r3, #4
 8007a14:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8007a16:	68fb      	ldr	r3, [r7, #12]
 8007a18:	2201      	movs	r2, #1
 8007a1a:	705a      	strb	r2, [r3, #1]
 8007a1c:	e00d      	b.n	8007a3a <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8007a1e:	78fa      	ldrb	r2, [r7, #3]
 8007a20:	4613      	mov	r3, r2
 8007a22:	00db      	lsls	r3, r3, #3
 8007a24:	1a9b      	subs	r3, r3, r2
 8007a26:	009b      	lsls	r3, r3, #2
 8007a28:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8007a2c:	687a      	ldr	r2, [r7, #4]
 8007a2e:	4413      	add	r3, r2
 8007a30:	3304      	adds	r3, #4
 8007a32:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	2200      	movs	r2, #0
 8007a38:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	2201      	movs	r2, #1
 8007a3e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007a40:	78fb      	ldrb	r3, [r7, #3]
 8007a42:	f003 030f 	and.w	r3, r3, #15
 8007a46:	b2da      	uxtb	r2, r3
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8007a52:	2b01      	cmp	r3, #1
 8007a54:	d101      	bne.n	8007a5a <HAL_PCD_EP_SetStall+0x82>
 8007a56:	2302      	movs	r3, #2
 8007a58:	e01e      	b.n	8007a98 <HAL_PCD_EP_SetStall+0xc0>
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	2201      	movs	r2, #1
 8007a5e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	68f9      	ldr	r1, [r7, #12]
 8007a68:	4618      	mov	r0, r3
 8007a6a:	f005 fcd2 	bl	800d412 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8007a6e:	78fb      	ldrb	r3, [r7, #3]
 8007a70:	f003 030f 	and.w	r3, r3, #15
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	d10a      	bne.n	8007a8e <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	6818      	ldr	r0, [r3, #0]
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	691b      	ldr	r3, [r3, #16]
 8007a80:	b2d9      	uxtb	r1, r3
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8007a88:	461a      	mov	r2, r3
 8007a8a:	f005 fec3 	bl	800d814 <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	2200      	movs	r2, #0
 8007a92:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8007a96:	2300      	movs	r3, #0
}
 8007a98:	4618      	mov	r0, r3
 8007a9a:	3710      	adds	r7, #16
 8007a9c:	46bd      	mov	sp, r7
 8007a9e:	bd80      	pop	{r7, pc}

08007aa0 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007aa0:	b580      	push	{r7, lr}
 8007aa2:	b084      	sub	sp, #16
 8007aa4:	af00      	add	r7, sp, #0
 8007aa6:	6078      	str	r0, [r7, #4]
 8007aa8:	460b      	mov	r3, r1
 8007aaa:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8007aac:	78fb      	ldrb	r3, [r7, #3]
 8007aae:	f003 020f 	and.w	r2, r3, #15
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	685b      	ldr	r3, [r3, #4]
 8007ab6:	429a      	cmp	r2, r3
 8007ab8:	d901      	bls.n	8007abe <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8007aba:	2301      	movs	r3, #1
 8007abc:	e042      	b.n	8007b44 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8007abe:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	da0f      	bge.n	8007ae6 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007ac6:	78fb      	ldrb	r3, [r7, #3]
 8007ac8:	f003 020f 	and.w	r2, r3, #15
 8007acc:	4613      	mov	r3, r2
 8007ace:	00db      	lsls	r3, r3, #3
 8007ad0:	1a9b      	subs	r3, r3, r2
 8007ad2:	009b      	lsls	r3, r3, #2
 8007ad4:	3338      	adds	r3, #56	; 0x38
 8007ad6:	687a      	ldr	r2, [r7, #4]
 8007ad8:	4413      	add	r3, r2
 8007ada:	3304      	adds	r3, #4
 8007adc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8007ade:	68fb      	ldr	r3, [r7, #12]
 8007ae0:	2201      	movs	r2, #1
 8007ae2:	705a      	strb	r2, [r3, #1]
 8007ae4:	e00f      	b.n	8007b06 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007ae6:	78fb      	ldrb	r3, [r7, #3]
 8007ae8:	f003 020f 	and.w	r2, r3, #15
 8007aec:	4613      	mov	r3, r2
 8007aee:	00db      	lsls	r3, r3, #3
 8007af0:	1a9b      	subs	r3, r3, r2
 8007af2:	009b      	lsls	r3, r3, #2
 8007af4:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8007af8:	687a      	ldr	r2, [r7, #4]
 8007afa:	4413      	add	r3, r2
 8007afc:	3304      	adds	r3, #4
 8007afe:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8007b00:	68fb      	ldr	r3, [r7, #12]
 8007b02:	2200      	movs	r2, #0
 8007b04:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	2200      	movs	r2, #0
 8007b0a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007b0c:	78fb      	ldrb	r3, [r7, #3]
 8007b0e:	f003 030f 	and.w	r3, r3, #15
 8007b12:	b2da      	uxtb	r2, r3
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8007b1e:	2b01      	cmp	r3, #1
 8007b20:	d101      	bne.n	8007b26 <HAL_PCD_EP_ClrStall+0x86>
 8007b22:	2302      	movs	r3, #2
 8007b24:	e00e      	b.n	8007b44 <HAL_PCD_EP_ClrStall+0xa4>
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	2201      	movs	r2, #1
 8007b2a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	68f9      	ldr	r1, [r7, #12]
 8007b34:	4618      	mov	r0, r3
 8007b36:	f005 fcda 	bl	800d4ee <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	2200      	movs	r2, #0
 8007b3e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8007b42:	2300      	movs	r3, #0
}
 8007b44:	4618      	mov	r0, r3
 8007b46:	3710      	adds	r7, #16
 8007b48:	46bd      	mov	sp, r7
 8007b4a:	bd80      	pop	{r7, pc}

08007b4c <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8007b4c:	b580      	push	{r7, lr}
 8007b4e:	b08a      	sub	sp, #40	; 0x28
 8007b50:	af02      	add	r7, sp, #8
 8007b52:	6078      	str	r0, [r7, #4]
 8007b54:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007b5c:	697b      	ldr	r3, [r7, #20]
 8007b5e:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8007b60:	683a      	ldr	r2, [r7, #0]
 8007b62:	4613      	mov	r3, r2
 8007b64:	00db      	lsls	r3, r3, #3
 8007b66:	1a9b      	subs	r3, r3, r2
 8007b68:	009b      	lsls	r3, r3, #2
 8007b6a:	3338      	adds	r3, #56	; 0x38
 8007b6c:	687a      	ldr	r2, [r7, #4]
 8007b6e:	4413      	add	r3, r2
 8007b70:	3304      	adds	r3, #4
 8007b72:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8007b74:	68fb      	ldr	r3, [r7, #12]
 8007b76:	699a      	ldr	r2, [r3, #24]
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	695b      	ldr	r3, [r3, #20]
 8007b7c:	429a      	cmp	r2, r3
 8007b7e:	d901      	bls.n	8007b84 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8007b80:	2301      	movs	r3, #1
 8007b82:	e06c      	b.n	8007c5e <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	695a      	ldr	r2, [r3, #20]
 8007b88:	68fb      	ldr	r3, [r7, #12]
 8007b8a:	699b      	ldr	r3, [r3, #24]
 8007b8c:	1ad3      	subs	r3, r2, r3
 8007b8e:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8007b90:	68fb      	ldr	r3, [r7, #12]
 8007b92:	689b      	ldr	r3, [r3, #8]
 8007b94:	69fa      	ldr	r2, [r7, #28]
 8007b96:	429a      	cmp	r2, r3
 8007b98:	d902      	bls.n	8007ba0 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8007b9a:	68fb      	ldr	r3, [r7, #12]
 8007b9c:	689b      	ldr	r3, [r3, #8]
 8007b9e:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8007ba0:	69fb      	ldr	r3, [r7, #28]
 8007ba2:	3303      	adds	r3, #3
 8007ba4:	089b      	lsrs	r3, r3, #2
 8007ba6:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8007ba8:	e02b      	b.n	8007c02 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8007baa:	68fb      	ldr	r3, [r7, #12]
 8007bac:	695a      	ldr	r2, [r3, #20]
 8007bae:	68fb      	ldr	r3, [r7, #12]
 8007bb0:	699b      	ldr	r3, [r3, #24]
 8007bb2:	1ad3      	subs	r3, r2, r3
 8007bb4:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	689b      	ldr	r3, [r3, #8]
 8007bba:	69fa      	ldr	r2, [r7, #28]
 8007bbc:	429a      	cmp	r2, r3
 8007bbe:	d902      	bls.n	8007bc6 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	689b      	ldr	r3, [r3, #8]
 8007bc4:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8007bc6:	69fb      	ldr	r3, [r7, #28]
 8007bc8:	3303      	adds	r3, #3
 8007bca:	089b      	lsrs	r3, r3, #2
 8007bcc:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	68d9      	ldr	r1, [r3, #12]
 8007bd2:	683b      	ldr	r3, [r7, #0]
 8007bd4:	b2da      	uxtb	r2, r3
 8007bd6:	69fb      	ldr	r3, [r7, #28]
 8007bd8:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8007bde:	b2db      	uxtb	r3, r3
 8007be0:	9300      	str	r3, [sp, #0]
 8007be2:	4603      	mov	r3, r0
 8007be4:	6978      	ldr	r0, [r7, #20]
 8007be6:	f005 fbb6 	bl	800d356 <USB_WritePacket>

    ep->xfer_buff  += len;
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	68da      	ldr	r2, [r3, #12]
 8007bee:	69fb      	ldr	r3, [r7, #28]
 8007bf0:	441a      	add	r2, r3
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	699a      	ldr	r2, [r3, #24]
 8007bfa:	69fb      	ldr	r3, [r7, #28]
 8007bfc:	441a      	add	r2, r3
 8007bfe:	68fb      	ldr	r3, [r7, #12]
 8007c00:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8007c02:	683b      	ldr	r3, [r7, #0]
 8007c04:	015a      	lsls	r2, r3, #5
 8007c06:	693b      	ldr	r3, [r7, #16]
 8007c08:	4413      	add	r3, r2
 8007c0a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007c0e:	699b      	ldr	r3, [r3, #24]
 8007c10:	b29b      	uxth	r3, r3
 8007c12:	69ba      	ldr	r2, [r7, #24]
 8007c14:	429a      	cmp	r2, r3
 8007c16:	d809      	bhi.n	8007c2c <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8007c18:	68fb      	ldr	r3, [r7, #12]
 8007c1a:	699a      	ldr	r2, [r3, #24]
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8007c20:	429a      	cmp	r2, r3
 8007c22:	d203      	bcs.n	8007c2c <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	695b      	ldr	r3, [r3, #20]
 8007c28:	2b00      	cmp	r3, #0
 8007c2a:	d1be      	bne.n	8007baa <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8007c2c:	68fb      	ldr	r3, [r7, #12]
 8007c2e:	695a      	ldr	r2, [r3, #20]
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	699b      	ldr	r3, [r3, #24]
 8007c34:	429a      	cmp	r2, r3
 8007c36:	d811      	bhi.n	8007c5c <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8007c38:	683b      	ldr	r3, [r7, #0]
 8007c3a:	f003 030f 	and.w	r3, r3, #15
 8007c3e:	2201      	movs	r2, #1
 8007c40:	fa02 f303 	lsl.w	r3, r2, r3
 8007c44:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8007c46:	693b      	ldr	r3, [r7, #16]
 8007c48:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007c4c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007c4e:	68bb      	ldr	r3, [r7, #8]
 8007c50:	43db      	mvns	r3, r3
 8007c52:	6939      	ldr	r1, [r7, #16]
 8007c54:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007c58:	4013      	ands	r3, r2
 8007c5a:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8007c5c:	2300      	movs	r3, #0
}
 8007c5e:	4618      	mov	r0, r3
 8007c60:	3720      	adds	r7, #32
 8007c62:	46bd      	mov	sp, r7
 8007c64:	bd80      	pop	{r7, pc}
	...

08007c68 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8007c68:	b580      	push	{r7, lr}
 8007c6a:	b086      	sub	sp, #24
 8007c6c:	af00      	add	r7, sp, #0
 8007c6e:	6078      	str	r0, [r7, #4]
 8007c70:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007c78:	697b      	ldr	r3, [r7, #20]
 8007c7a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8007c7c:	697b      	ldr	r3, [r7, #20]
 8007c7e:	333c      	adds	r3, #60	; 0x3c
 8007c80:	3304      	adds	r3, #4
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8007c86:	683b      	ldr	r3, [r7, #0]
 8007c88:	015a      	lsls	r2, r3, #5
 8007c8a:	693b      	ldr	r3, [r7, #16]
 8007c8c:	4413      	add	r3, r2
 8007c8e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c92:	689b      	ldr	r3, [r3, #8]
 8007c94:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	691b      	ldr	r3, [r3, #16]
 8007c9a:	2b01      	cmp	r3, #1
 8007c9c:	f040 80b3 	bne.w	8007e06 <PCD_EP_OutXfrComplete_int+0x19e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8007ca0:	68bb      	ldr	r3, [r7, #8]
 8007ca2:	f003 0308 	and.w	r3, r3, #8
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	d028      	beq.n	8007cfc <PCD_EP_OutXfrComplete_int+0x94>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007caa:	68fb      	ldr	r3, [r7, #12]
 8007cac:	4a70      	ldr	r2, [pc, #448]	; (8007e70 <PCD_EP_OutXfrComplete_int+0x208>)
 8007cae:	4293      	cmp	r3, r2
 8007cb0:	d90e      	bls.n	8007cd0 <PCD_EP_OutXfrComplete_int+0x68>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8007cb2:	68bb      	ldr	r3, [r7, #8]
 8007cb4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	d009      	beq.n	8007cd0 <PCD_EP_OutXfrComplete_int+0x68>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8007cbc:	683b      	ldr	r3, [r7, #0]
 8007cbe:	015a      	lsls	r2, r3, #5
 8007cc0:	693b      	ldr	r3, [r7, #16]
 8007cc2:	4413      	add	r3, r2
 8007cc4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007cc8:	461a      	mov	r2, r3
 8007cca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007cce:	6093      	str	r3, [r2, #8]

      /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SetupStageCallback(hpcd);
#else
      HAL_PCD_SetupStageCallback(hpcd);
 8007cd0:	6878      	ldr	r0, [r7, #4]
 8007cd2:	f007 fefb 	bl	800facc <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	6818      	ldr	r0, [r3, #0]
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8007ce0:	461a      	mov	r2, r3
 8007ce2:	2101      	movs	r1, #1
 8007ce4:	f005 fd96 	bl	800d814 <USB_EP0_OutStart>
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8007ce8:	683b      	ldr	r3, [r7, #0]
 8007cea:	015a      	lsls	r2, r3, #5
 8007cec:	693b      	ldr	r3, [r7, #16]
 8007cee:	4413      	add	r3, r2
 8007cf0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007cf4:	461a      	mov	r2, r3
 8007cf6:	2308      	movs	r3, #8
 8007cf8:	6093      	str	r3, [r2, #8]
 8007cfa:	e0b3      	b.n	8007e64 <PCD_EP_OutXfrComplete_int+0x1fc>
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8007cfc:	68bb      	ldr	r3, [r7, #8]
 8007cfe:	f003 0320 	and.w	r3, r3, #32
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	d009      	beq.n	8007d1a <PCD_EP_OutXfrComplete_int+0xb2>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8007d06:	683b      	ldr	r3, [r7, #0]
 8007d08:	015a      	lsls	r2, r3, #5
 8007d0a:	693b      	ldr	r3, [r7, #16]
 8007d0c:	4413      	add	r3, r2
 8007d0e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007d12:	461a      	mov	r2, r3
 8007d14:	2320      	movs	r3, #32
 8007d16:	6093      	str	r3, [r2, #8]
 8007d18:	e0a4      	b.n	8007e64 <PCD_EP_OutXfrComplete_int+0x1fc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8007d1a:	68bb      	ldr	r3, [r7, #8]
 8007d1c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8007d20:	2b00      	cmp	r3, #0
 8007d22:	f040 809f 	bne.w	8007e64 <PCD_EP_OutXfrComplete_int+0x1fc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007d26:	68fb      	ldr	r3, [r7, #12]
 8007d28:	4a51      	ldr	r2, [pc, #324]	; (8007e70 <PCD_EP_OutXfrComplete_int+0x208>)
 8007d2a:	4293      	cmp	r3, r2
 8007d2c:	d90f      	bls.n	8007d4e <PCD_EP_OutXfrComplete_int+0xe6>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8007d2e:	68bb      	ldr	r3, [r7, #8]
 8007d30:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	d00a      	beq.n	8007d4e <PCD_EP_OutXfrComplete_int+0xe6>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8007d38:	683b      	ldr	r3, [r7, #0]
 8007d3a:	015a      	lsls	r2, r3, #5
 8007d3c:	693b      	ldr	r3, [r7, #16]
 8007d3e:	4413      	add	r3, r2
 8007d40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007d44:	461a      	mov	r2, r3
 8007d46:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007d4a:	6093      	str	r3, [r2, #8]
 8007d4c:	e08a      	b.n	8007e64 <PCD_EP_OutXfrComplete_int+0x1fc>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8007d4e:	6879      	ldr	r1, [r7, #4]
 8007d50:	683a      	ldr	r2, [r7, #0]
 8007d52:	4613      	mov	r3, r2
 8007d54:	00db      	lsls	r3, r3, #3
 8007d56:	1a9b      	subs	r3, r3, r2
 8007d58:	009b      	lsls	r3, r3, #2
 8007d5a:	440b      	add	r3, r1
 8007d5c:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8007d60:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8007d62:	683b      	ldr	r3, [r7, #0]
 8007d64:	0159      	lsls	r1, r3, #5
 8007d66:	693b      	ldr	r3, [r7, #16]
 8007d68:	440b      	add	r3, r1
 8007d6a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007d6e:	691b      	ldr	r3, [r3, #16]
 8007d70:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8007d74:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8007d76:	6878      	ldr	r0, [r7, #4]
 8007d78:	683a      	ldr	r2, [r7, #0]
 8007d7a:	4613      	mov	r3, r2
 8007d7c:	00db      	lsls	r3, r3, #3
 8007d7e:	1a9b      	subs	r3, r3, r2
 8007d80:	009b      	lsls	r3, r3, #2
 8007d82:	4403      	add	r3, r0
 8007d84:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8007d88:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8007d8a:	6879      	ldr	r1, [r7, #4]
 8007d8c:	683a      	ldr	r2, [r7, #0]
 8007d8e:	4613      	mov	r3, r2
 8007d90:	00db      	lsls	r3, r3, #3
 8007d92:	1a9b      	subs	r3, r3, r2
 8007d94:	009b      	lsls	r3, r3, #2
 8007d96:	440b      	add	r3, r1
 8007d98:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8007d9c:	6819      	ldr	r1, [r3, #0]
 8007d9e:	6878      	ldr	r0, [r7, #4]
 8007da0:	683a      	ldr	r2, [r7, #0]
 8007da2:	4613      	mov	r3, r2
 8007da4:	00db      	lsls	r3, r3, #3
 8007da6:	1a9b      	subs	r3, r3, r2
 8007da8:	009b      	lsls	r3, r3, #2
 8007daa:	4403      	add	r3, r0
 8007dac:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	4419      	add	r1, r3
 8007db4:	6878      	ldr	r0, [r7, #4]
 8007db6:	683a      	ldr	r2, [r7, #0]
 8007db8:	4613      	mov	r3, r2
 8007dba:	00db      	lsls	r3, r3, #3
 8007dbc:	1a9b      	subs	r3, r3, r2
 8007dbe:	009b      	lsls	r3, r3, #2
 8007dc0:	4403      	add	r3, r0
 8007dc2:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8007dc6:	6019      	str	r1, [r3, #0]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8007dc8:	683b      	ldr	r3, [r7, #0]
 8007dca:	b2db      	uxtb	r3, r3
 8007dcc:	4619      	mov	r1, r3
 8007dce:	6878      	ldr	r0, [r7, #4]
 8007dd0:	f007 fe8e 	bl	800faf0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8007dd4:	683b      	ldr	r3, [r7, #0]
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	d144      	bne.n	8007e64 <PCD_EP_OutXfrComplete_int+0x1fc>
 8007dda:	6879      	ldr	r1, [r7, #4]
 8007ddc:	683a      	ldr	r2, [r7, #0]
 8007dde:	4613      	mov	r3, r2
 8007de0:	00db      	lsls	r3, r3, #3
 8007de2:	1a9b      	subs	r3, r3, r2
 8007de4:	009b      	lsls	r3, r3, #2
 8007de6:	440b      	add	r3, r1
 8007de8:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	2b00      	cmp	r3, #0
 8007df0:	d138      	bne.n	8007e64 <PCD_EP_OutXfrComplete_int+0x1fc>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	6818      	ldr	r0, [r3, #0]
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8007dfc:	461a      	mov	r2, r3
 8007dfe:	2101      	movs	r1, #1
 8007e00:	f005 fd08 	bl	800d814 <USB_EP0_OutStart>
 8007e04:	e02e      	b.n	8007e64 <PCD_EP_OutXfrComplete_int+0x1fc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	4a1a      	ldr	r2, [pc, #104]	; (8007e74 <PCD_EP_OutXfrComplete_int+0x20c>)
 8007e0a:	4293      	cmp	r3, r2
 8007e0c:	d124      	bne.n	8007e58 <PCD_EP_OutXfrComplete_int+0x1f0>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8007e0e:	68bb      	ldr	r3, [r7, #8]
 8007e10:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007e14:	2b00      	cmp	r3, #0
 8007e16:	d00a      	beq.n	8007e2e <PCD_EP_OutXfrComplete_int+0x1c6>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8007e18:	683b      	ldr	r3, [r7, #0]
 8007e1a:	015a      	lsls	r2, r3, #5
 8007e1c:	693b      	ldr	r3, [r7, #16]
 8007e1e:	4413      	add	r3, r2
 8007e20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007e24:	461a      	mov	r2, r3
 8007e26:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007e2a:	6093      	str	r3, [r2, #8]
 8007e2c:	e01a      	b.n	8007e64 <PCD_EP_OutXfrComplete_int+0x1fc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8007e2e:	68bb      	ldr	r3, [r7, #8]
 8007e30:	f003 0320 	and.w	r3, r3, #32
 8007e34:	2b00      	cmp	r3, #0
 8007e36:	d008      	beq.n	8007e4a <PCD_EP_OutXfrComplete_int+0x1e2>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8007e38:	683b      	ldr	r3, [r7, #0]
 8007e3a:	015a      	lsls	r2, r3, #5
 8007e3c:	693b      	ldr	r3, [r7, #16]
 8007e3e:	4413      	add	r3, r2
 8007e40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007e44:	461a      	mov	r2, r3
 8007e46:	2320      	movs	r3, #32
 8007e48:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8007e4a:	683b      	ldr	r3, [r7, #0]
 8007e4c:	b2db      	uxtb	r3, r3
 8007e4e:	4619      	mov	r1, r3
 8007e50:	6878      	ldr	r0, [r7, #4]
 8007e52:	f007 fe4d 	bl	800faf0 <HAL_PCD_DataOutStageCallback>
 8007e56:	e005      	b.n	8007e64 <PCD_EP_OutXfrComplete_int+0x1fc>
    else
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8007e58:	683b      	ldr	r3, [r7, #0]
 8007e5a:	b2db      	uxtb	r3, r3
 8007e5c:	4619      	mov	r1, r3
 8007e5e:	6878      	ldr	r0, [r7, #4]
 8007e60:	f007 fe46 	bl	800faf0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8007e64:	2300      	movs	r3, #0
}
 8007e66:	4618      	mov	r0, r3
 8007e68:	3718      	adds	r7, #24
 8007e6a:	46bd      	mov	sp, r7
 8007e6c:	bd80      	pop	{r7, pc}
 8007e6e:	bf00      	nop
 8007e70:	4f54300a 	.word	0x4f54300a
 8007e74:	4f54310a 	.word	0x4f54310a

08007e78 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8007e78:	b580      	push	{r7, lr}
 8007e7a:	b086      	sub	sp, #24
 8007e7c:	af00      	add	r7, sp, #0
 8007e7e:	6078      	str	r0, [r7, #4]
 8007e80:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007e88:	697b      	ldr	r3, [r7, #20]
 8007e8a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8007e8c:	697b      	ldr	r3, [r7, #20]
 8007e8e:	333c      	adds	r3, #60	; 0x3c
 8007e90:	3304      	adds	r3, #4
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8007e96:	683b      	ldr	r3, [r7, #0]
 8007e98:	015a      	lsls	r2, r3, #5
 8007e9a:	693b      	ldr	r3, [r7, #16]
 8007e9c:	4413      	add	r3, r2
 8007e9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007ea2:	689b      	ldr	r3, [r3, #8]
 8007ea4:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	691b      	ldr	r3, [r3, #16]
 8007eaa:	2b01      	cmp	r3, #1
 8007eac:	d113      	bne.n	8007ed6 <PCD_EP_OutSetupPacket_int+0x5e>
  {
    /* StupPktRcvd = 1 pending setup packet int */
    if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007eae:	68fb      	ldr	r3, [r7, #12]
 8007eb0:	4a1f      	ldr	r2, [pc, #124]	; (8007f30 <PCD_EP_OutSetupPacket_int+0xb8>)
 8007eb2:	4293      	cmp	r3, r2
 8007eb4:	d922      	bls.n	8007efc <PCD_EP_OutSetupPacket_int+0x84>
        ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8007eb6:	68bb      	ldr	r3, [r7, #8]
 8007eb8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
    if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007ebc:	2b00      	cmp	r3, #0
 8007ebe:	d01d      	beq.n	8007efc <PCD_EP_OutSetupPacket_int+0x84>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8007ec0:	683b      	ldr	r3, [r7, #0]
 8007ec2:	015a      	lsls	r2, r3, #5
 8007ec4:	693b      	ldr	r3, [r7, #16]
 8007ec6:	4413      	add	r3, r2
 8007ec8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007ecc:	461a      	mov	r2, r3
 8007ece:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007ed2:	6093      	str	r3, [r2, #8]
 8007ed4:	e012      	b.n	8007efc <PCD_EP_OutSetupPacket_int+0x84>
    }
  }
  else
  {
    if ((gSNPSiD == USB_OTG_CORE_ID_310A) &&
 8007ed6:	68fb      	ldr	r3, [r7, #12]
 8007ed8:	4a16      	ldr	r2, [pc, #88]	; (8007f34 <PCD_EP_OutSetupPacket_int+0xbc>)
 8007eda:	4293      	cmp	r3, r2
 8007edc:	d10e      	bne.n	8007efc <PCD_EP_OutSetupPacket_int+0x84>
        ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8007ede:	68bb      	ldr	r3, [r7, #8]
 8007ee0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
    if ((gSNPSiD == USB_OTG_CORE_ID_310A) &&
 8007ee4:	2b00      	cmp	r3, #0
 8007ee6:	d009      	beq.n	8007efc <PCD_EP_OutSetupPacket_int+0x84>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8007ee8:	683b      	ldr	r3, [r7, #0]
 8007eea:	015a      	lsls	r2, r3, #5
 8007eec:	693b      	ldr	r3, [r7, #16]
 8007eee:	4413      	add	r3, r2
 8007ef0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007ef4:	461a      	mov	r2, r3
 8007ef6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007efa:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8007efc:	6878      	ldr	r0, [r7, #4]
 8007efe:	f007 fde5 	bl	800facc <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8007f02:	68fb      	ldr	r3, [r7, #12]
 8007f04:	4a0a      	ldr	r2, [pc, #40]	; (8007f30 <PCD_EP_OutSetupPacket_int+0xb8>)
 8007f06:	4293      	cmp	r3, r2
 8007f08:	d90c      	bls.n	8007f24 <PCD_EP_OutSetupPacket_int+0xac>
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	691b      	ldr	r3, [r3, #16]
 8007f0e:	2b01      	cmp	r3, #1
 8007f10:	d108      	bne.n	8007f24 <PCD_EP_OutSetupPacket_int+0xac>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	6818      	ldr	r0, [r3, #0]
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8007f1c:	461a      	mov	r2, r3
 8007f1e:	2101      	movs	r1, #1
 8007f20:	f005 fc78 	bl	800d814 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8007f24:	2300      	movs	r3, #0
}
 8007f26:	4618      	mov	r0, r3
 8007f28:	3718      	adds	r7, #24
 8007f2a:	46bd      	mov	sp, r7
 8007f2c:	bd80      	pop	{r7, pc}
 8007f2e:	bf00      	nop
 8007f30:	4f54300a 	.word	0x4f54300a
 8007f34:	4f54310a 	.word	0x4f54310a

08007f38 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8007f38:	b480      	push	{r7}
 8007f3a:	b085      	sub	sp, #20
 8007f3c:	af00      	add	r7, sp, #0
 8007f3e:	6078      	str	r0, [r7, #4]
 8007f40:	460b      	mov	r3, r1
 8007f42:	70fb      	strb	r3, [r7, #3]
 8007f44:	4613      	mov	r3, r2
 8007f46:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f4e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8007f50:	78fb      	ldrb	r3, [r7, #3]
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	d107      	bne.n	8007f66 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8007f56:	883b      	ldrh	r3, [r7, #0]
 8007f58:	0419      	lsls	r1, r3, #16
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	68ba      	ldr	r2, [r7, #8]
 8007f60:	430a      	orrs	r2, r1
 8007f62:	629a      	str	r2, [r3, #40]	; 0x28
 8007f64:	e028      	b.n	8007fb8 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f6c:	0c1b      	lsrs	r3, r3, #16
 8007f6e:	68ba      	ldr	r2, [r7, #8]
 8007f70:	4413      	add	r3, r2
 8007f72:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8007f74:	2300      	movs	r3, #0
 8007f76:	73fb      	strb	r3, [r7, #15]
 8007f78:	e00d      	b.n	8007f96 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	681a      	ldr	r2, [r3, #0]
 8007f7e:	7bfb      	ldrb	r3, [r7, #15]
 8007f80:	3340      	adds	r3, #64	; 0x40
 8007f82:	009b      	lsls	r3, r3, #2
 8007f84:	4413      	add	r3, r2
 8007f86:	685b      	ldr	r3, [r3, #4]
 8007f88:	0c1b      	lsrs	r3, r3, #16
 8007f8a:	68ba      	ldr	r2, [r7, #8]
 8007f8c:	4413      	add	r3, r2
 8007f8e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8007f90:	7bfb      	ldrb	r3, [r7, #15]
 8007f92:	3301      	adds	r3, #1
 8007f94:	73fb      	strb	r3, [r7, #15]
 8007f96:	7bfa      	ldrb	r2, [r7, #15]
 8007f98:	78fb      	ldrb	r3, [r7, #3]
 8007f9a:	3b01      	subs	r3, #1
 8007f9c:	429a      	cmp	r2, r3
 8007f9e:	d3ec      	bcc.n	8007f7a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8007fa0:	883b      	ldrh	r3, [r7, #0]
 8007fa2:	0418      	lsls	r0, r3, #16
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	6819      	ldr	r1, [r3, #0]
 8007fa8:	78fb      	ldrb	r3, [r7, #3]
 8007faa:	3b01      	subs	r3, #1
 8007fac:	68ba      	ldr	r2, [r7, #8]
 8007fae:	4302      	orrs	r2, r0
 8007fb0:	3340      	adds	r3, #64	; 0x40
 8007fb2:	009b      	lsls	r3, r3, #2
 8007fb4:	440b      	add	r3, r1
 8007fb6:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8007fb8:	2300      	movs	r3, #0
}
 8007fba:	4618      	mov	r0, r3
 8007fbc:	3714      	adds	r7, #20
 8007fbe:	46bd      	mov	sp, r7
 8007fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fc4:	4770      	bx	lr

08007fc6 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8007fc6:	b480      	push	{r7}
 8007fc8:	b083      	sub	sp, #12
 8007fca:	af00      	add	r7, sp, #0
 8007fcc:	6078      	str	r0, [r7, #4]
 8007fce:	460b      	mov	r3, r1
 8007fd0:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	887a      	ldrh	r2, [r7, #2]
 8007fd8:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8007fda:	2300      	movs	r3, #0
}
 8007fdc:	4618      	mov	r0, r3
 8007fde:	370c      	adds	r7, #12
 8007fe0:	46bd      	mov	sp, r7
 8007fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fe6:	4770      	bx	lr

08007fe8 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8007fe8:	b480      	push	{r7}
 8007fea:	b083      	sub	sp, #12
 8007fec:	af00      	add	r7, sp, #0
 8007fee:	6078      	str	r0, [r7, #4]
 8007ff0:	460b      	mov	r3, r1
 8007ff2:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8007ff4:	bf00      	nop
 8007ff6:	370c      	adds	r7, #12
 8007ff8:	46bd      	mov	sp, r7
 8007ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ffe:	4770      	bx	lr

08008000 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008000:	b580      	push	{r7, lr}
 8008002:	b086      	sub	sp, #24
 8008004:	af00      	add	r7, sp, #0
 8008006:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	2b00      	cmp	r3, #0
 800800c:	d101      	bne.n	8008012 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800800e:	2301      	movs	r3, #1
 8008010:	e25b      	b.n	80084ca <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	f003 0301 	and.w	r3, r3, #1
 800801a:	2b00      	cmp	r3, #0
 800801c:	d075      	beq.n	800810a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800801e:	4ba3      	ldr	r3, [pc, #652]	; (80082ac <HAL_RCC_OscConfig+0x2ac>)
 8008020:	689b      	ldr	r3, [r3, #8]
 8008022:	f003 030c 	and.w	r3, r3, #12
 8008026:	2b04      	cmp	r3, #4
 8008028:	d00c      	beq.n	8008044 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800802a:	4ba0      	ldr	r3, [pc, #640]	; (80082ac <HAL_RCC_OscConfig+0x2ac>)
 800802c:	689b      	ldr	r3, [r3, #8]
 800802e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8008032:	2b08      	cmp	r3, #8
 8008034:	d112      	bne.n	800805c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008036:	4b9d      	ldr	r3, [pc, #628]	; (80082ac <HAL_RCC_OscConfig+0x2ac>)
 8008038:	685b      	ldr	r3, [r3, #4]
 800803a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800803e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008042:	d10b      	bne.n	800805c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008044:	4b99      	ldr	r3, [pc, #612]	; (80082ac <HAL_RCC_OscConfig+0x2ac>)
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800804c:	2b00      	cmp	r3, #0
 800804e:	d05b      	beq.n	8008108 <HAL_RCC_OscConfig+0x108>
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	685b      	ldr	r3, [r3, #4]
 8008054:	2b00      	cmp	r3, #0
 8008056:	d157      	bne.n	8008108 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8008058:	2301      	movs	r3, #1
 800805a:	e236      	b.n	80084ca <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	685b      	ldr	r3, [r3, #4]
 8008060:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008064:	d106      	bne.n	8008074 <HAL_RCC_OscConfig+0x74>
 8008066:	4b91      	ldr	r3, [pc, #580]	; (80082ac <HAL_RCC_OscConfig+0x2ac>)
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	4a90      	ldr	r2, [pc, #576]	; (80082ac <HAL_RCC_OscConfig+0x2ac>)
 800806c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008070:	6013      	str	r3, [r2, #0]
 8008072:	e01d      	b.n	80080b0 <HAL_RCC_OscConfig+0xb0>
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	685b      	ldr	r3, [r3, #4]
 8008078:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800807c:	d10c      	bne.n	8008098 <HAL_RCC_OscConfig+0x98>
 800807e:	4b8b      	ldr	r3, [pc, #556]	; (80082ac <HAL_RCC_OscConfig+0x2ac>)
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	4a8a      	ldr	r2, [pc, #552]	; (80082ac <HAL_RCC_OscConfig+0x2ac>)
 8008084:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008088:	6013      	str	r3, [r2, #0]
 800808a:	4b88      	ldr	r3, [pc, #544]	; (80082ac <HAL_RCC_OscConfig+0x2ac>)
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	4a87      	ldr	r2, [pc, #540]	; (80082ac <HAL_RCC_OscConfig+0x2ac>)
 8008090:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008094:	6013      	str	r3, [r2, #0]
 8008096:	e00b      	b.n	80080b0 <HAL_RCC_OscConfig+0xb0>
 8008098:	4b84      	ldr	r3, [pc, #528]	; (80082ac <HAL_RCC_OscConfig+0x2ac>)
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	4a83      	ldr	r2, [pc, #524]	; (80082ac <HAL_RCC_OscConfig+0x2ac>)
 800809e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80080a2:	6013      	str	r3, [r2, #0]
 80080a4:	4b81      	ldr	r3, [pc, #516]	; (80082ac <HAL_RCC_OscConfig+0x2ac>)
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	4a80      	ldr	r2, [pc, #512]	; (80082ac <HAL_RCC_OscConfig+0x2ac>)
 80080aa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80080ae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	685b      	ldr	r3, [r3, #4]
 80080b4:	2b00      	cmp	r3, #0
 80080b6:	d013      	beq.n	80080e0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80080b8:	f7fc ff8e 	bl	8004fd8 <HAL_GetTick>
 80080bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80080be:	e008      	b.n	80080d2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80080c0:	f7fc ff8a 	bl	8004fd8 <HAL_GetTick>
 80080c4:	4602      	mov	r2, r0
 80080c6:	693b      	ldr	r3, [r7, #16]
 80080c8:	1ad3      	subs	r3, r2, r3
 80080ca:	2b64      	cmp	r3, #100	; 0x64
 80080cc:	d901      	bls.n	80080d2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80080ce:	2303      	movs	r3, #3
 80080d0:	e1fb      	b.n	80084ca <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80080d2:	4b76      	ldr	r3, [pc, #472]	; (80082ac <HAL_RCC_OscConfig+0x2ac>)
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80080da:	2b00      	cmp	r3, #0
 80080dc:	d0f0      	beq.n	80080c0 <HAL_RCC_OscConfig+0xc0>
 80080de:	e014      	b.n	800810a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80080e0:	f7fc ff7a 	bl	8004fd8 <HAL_GetTick>
 80080e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80080e6:	e008      	b.n	80080fa <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80080e8:	f7fc ff76 	bl	8004fd8 <HAL_GetTick>
 80080ec:	4602      	mov	r2, r0
 80080ee:	693b      	ldr	r3, [r7, #16]
 80080f0:	1ad3      	subs	r3, r2, r3
 80080f2:	2b64      	cmp	r3, #100	; 0x64
 80080f4:	d901      	bls.n	80080fa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80080f6:	2303      	movs	r3, #3
 80080f8:	e1e7      	b.n	80084ca <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80080fa:	4b6c      	ldr	r3, [pc, #432]	; (80082ac <HAL_RCC_OscConfig+0x2ac>)
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008102:	2b00      	cmp	r3, #0
 8008104:	d1f0      	bne.n	80080e8 <HAL_RCC_OscConfig+0xe8>
 8008106:	e000      	b.n	800810a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008108:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	f003 0302 	and.w	r3, r3, #2
 8008112:	2b00      	cmp	r3, #0
 8008114:	d063      	beq.n	80081de <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8008116:	4b65      	ldr	r3, [pc, #404]	; (80082ac <HAL_RCC_OscConfig+0x2ac>)
 8008118:	689b      	ldr	r3, [r3, #8]
 800811a:	f003 030c 	and.w	r3, r3, #12
 800811e:	2b00      	cmp	r3, #0
 8008120:	d00b      	beq.n	800813a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008122:	4b62      	ldr	r3, [pc, #392]	; (80082ac <HAL_RCC_OscConfig+0x2ac>)
 8008124:	689b      	ldr	r3, [r3, #8]
 8008126:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800812a:	2b08      	cmp	r3, #8
 800812c:	d11c      	bne.n	8008168 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800812e:	4b5f      	ldr	r3, [pc, #380]	; (80082ac <HAL_RCC_OscConfig+0x2ac>)
 8008130:	685b      	ldr	r3, [r3, #4]
 8008132:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008136:	2b00      	cmp	r3, #0
 8008138:	d116      	bne.n	8008168 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800813a:	4b5c      	ldr	r3, [pc, #368]	; (80082ac <HAL_RCC_OscConfig+0x2ac>)
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	f003 0302 	and.w	r3, r3, #2
 8008142:	2b00      	cmp	r3, #0
 8008144:	d005      	beq.n	8008152 <HAL_RCC_OscConfig+0x152>
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	68db      	ldr	r3, [r3, #12]
 800814a:	2b01      	cmp	r3, #1
 800814c:	d001      	beq.n	8008152 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800814e:	2301      	movs	r3, #1
 8008150:	e1bb      	b.n	80084ca <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008152:	4b56      	ldr	r3, [pc, #344]	; (80082ac <HAL_RCC_OscConfig+0x2ac>)
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	691b      	ldr	r3, [r3, #16]
 800815e:	00db      	lsls	r3, r3, #3
 8008160:	4952      	ldr	r1, [pc, #328]	; (80082ac <HAL_RCC_OscConfig+0x2ac>)
 8008162:	4313      	orrs	r3, r2
 8008164:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008166:	e03a      	b.n	80081de <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	68db      	ldr	r3, [r3, #12]
 800816c:	2b00      	cmp	r3, #0
 800816e:	d020      	beq.n	80081b2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008170:	4b4f      	ldr	r3, [pc, #316]	; (80082b0 <HAL_RCC_OscConfig+0x2b0>)
 8008172:	2201      	movs	r2, #1
 8008174:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008176:	f7fc ff2f 	bl	8004fd8 <HAL_GetTick>
 800817a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800817c:	e008      	b.n	8008190 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800817e:	f7fc ff2b 	bl	8004fd8 <HAL_GetTick>
 8008182:	4602      	mov	r2, r0
 8008184:	693b      	ldr	r3, [r7, #16]
 8008186:	1ad3      	subs	r3, r2, r3
 8008188:	2b02      	cmp	r3, #2
 800818a:	d901      	bls.n	8008190 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800818c:	2303      	movs	r3, #3
 800818e:	e19c      	b.n	80084ca <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008190:	4b46      	ldr	r3, [pc, #280]	; (80082ac <HAL_RCC_OscConfig+0x2ac>)
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	f003 0302 	and.w	r3, r3, #2
 8008198:	2b00      	cmp	r3, #0
 800819a:	d0f0      	beq.n	800817e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800819c:	4b43      	ldr	r3, [pc, #268]	; (80082ac <HAL_RCC_OscConfig+0x2ac>)
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	691b      	ldr	r3, [r3, #16]
 80081a8:	00db      	lsls	r3, r3, #3
 80081aa:	4940      	ldr	r1, [pc, #256]	; (80082ac <HAL_RCC_OscConfig+0x2ac>)
 80081ac:	4313      	orrs	r3, r2
 80081ae:	600b      	str	r3, [r1, #0]
 80081b0:	e015      	b.n	80081de <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80081b2:	4b3f      	ldr	r3, [pc, #252]	; (80082b0 <HAL_RCC_OscConfig+0x2b0>)
 80081b4:	2200      	movs	r2, #0
 80081b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80081b8:	f7fc ff0e 	bl	8004fd8 <HAL_GetTick>
 80081bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80081be:	e008      	b.n	80081d2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80081c0:	f7fc ff0a 	bl	8004fd8 <HAL_GetTick>
 80081c4:	4602      	mov	r2, r0
 80081c6:	693b      	ldr	r3, [r7, #16]
 80081c8:	1ad3      	subs	r3, r2, r3
 80081ca:	2b02      	cmp	r3, #2
 80081cc:	d901      	bls.n	80081d2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80081ce:	2303      	movs	r3, #3
 80081d0:	e17b      	b.n	80084ca <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80081d2:	4b36      	ldr	r3, [pc, #216]	; (80082ac <HAL_RCC_OscConfig+0x2ac>)
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	f003 0302 	and.w	r3, r3, #2
 80081da:	2b00      	cmp	r3, #0
 80081dc:	d1f0      	bne.n	80081c0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	f003 0308 	and.w	r3, r3, #8
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	d030      	beq.n	800824c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	695b      	ldr	r3, [r3, #20]
 80081ee:	2b00      	cmp	r3, #0
 80081f0:	d016      	beq.n	8008220 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80081f2:	4b30      	ldr	r3, [pc, #192]	; (80082b4 <HAL_RCC_OscConfig+0x2b4>)
 80081f4:	2201      	movs	r2, #1
 80081f6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80081f8:	f7fc feee 	bl	8004fd8 <HAL_GetTick>
 80081fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80081fe:	e008      	b.n	8008212 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008200:	f7fc feea 	bl	8004fd8 <HAL_GetTick>
 8008204:	4602      	mov	r2, r0
 8008206:	693b      	ldr	r3, [r7, #16]
 8008208:	1ad3      	subs	r3, r2, r3
 800820a:	2b02      	cmp	r3, #2
 800820c:	d901      	bls.n	8008212 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800820e:	2303      	movs	r3, #3
 8008210:	e15b      	b.n	80084ca <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008212:	4b26      	ldr	r3, [pc, #152]	; (80082ac <HAL_RCC_OscConfig+0x2ac>)
 8008214:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008216:	f003 0302 	and.w	r3, r3, #2
 800821a:	2b00      	cmp	r3, #0
 800821c:	d0f0      	beq.n	8008200 <HAL_RCC_OscConfig+0x200>
 800821e:	e015      	b.n	800824c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008220:	4b24      	ldr	r3, [pc, #144]	; (80082b4 <HAL_RCC_OscConfig+0x2b4>)
 8008222:	2200      	movs	r2, #0
 8008224:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008226:	f7fc fed7 	bl	8004fd8 <HAL_GetTick>
 800822a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800822c:	e008      	b.n	8008240 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800822e:	f7fc fed3 	bl	8004fd8 <HAL_GetTick>
 8008232:	4602      	mov	r2, r0
 8008234:	693b      	ldr	r3, [r7, #16]
 8008236:	1ad3      	subs	r3, r2, r3
 8008238:	2b02      	cmp	r3, #2
 800823a:	d901      	bls.n	8008240 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800823c:	2303      	movs	r3, #3
 800823e:	e144      	b.n	80084ca <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008240:	4b1a      	ldr	r3, [pc, #104]	; (80082ac <HAL_RCC_OscConfig+0x2ac>)
 8008242:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008244:	f003 0302 	and.w	r3, r3, #2
 8008248:	2b00      	cmp	r3, #0
 800824a:	d1f0      	bne.n	800822e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	f003 0304 	and.w	r3, r3, #4
 8008254:	2b00      	cmp	r3, #0
 8008256:	f000 80a0 	beq.w	800839a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800825a:	2300      	movs	r3, #0
 800825c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800825e:	4b13      	ldr	r3, [pc, #76]	; (80082ac <HAL_RCC_OscConfig+0x2ac>)
 8008260:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008262:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008266:	2b00      	cmp	r3, #0
 8008268:	d10f      	bne.n	800828a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800826a:	2300      	movs	r3, #0
 800826c:	60bb      	str	r3, [r7, #8]
 800826e:	4b0f      	ldr	r3, [pc, #60]	; (80082ac <HAL_RCC_OscConfig+0x2ac>)
 8008270:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008272:	4a0e      	ldr	r2, [pc, #56]	; (80082ac <HAL_RCC_OscConfig+0x2ac>)
 8008274:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008278:	6413      	str	r3, [r2, #64]	; 0x40
 800827a:	4b0c      	ldr	r3, [pc, #48]	; (80082ac <HAL_RCC_OscConfig+0x2ac>)
 800827c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800827e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008282:	60bb      	str	r3, [r7, #8]
 8008284:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008286:	2301      	movs	r3, #1
 8008288:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800828a:	4b0b      	ldr	r3, [pc, #44]	; (80082b8 <HAL_RCC_OscConfig+0x2b8>)
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008292:	2b00      	cmp	r3, #0
 8008294:	d121      	bne.n	80082da <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8008296:	4b08      	ldr	r3, [pc, #32]	; (80082b8 <HAL_RCC_OscConfig+0x2b8>)
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	4a07      	ldr	r2, [pc, #28]	; (80082b8 <HAL_RCC_OscConfig+0x2b8>)
 800829c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80082a0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80082a2:	f7fc fe99 	bl	8004fd8 <HAL_GetTick>
 80082a6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80082a8:	e011      	b.n	80082ce <HAL_RCC_OscConfig+0x2ce>
 80082aa:	bf00      	nop
 80082ac:	40023800 	.word	0x40023800
 80082b0:	42470000 	.word	0x42470000
 80082b4:	42470e80 	.word	0x42470e80
 80082b8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80082bc:	f7fc fe8c 	bl	8004fd8 <HAL_GetTick>
 80082c0:	4602      	mov	r2, r0
 80082c2:	693b      	ldr	r3, [r7, #16]
 80082c4:	1ad3      	subs	r3, r2, r3
 80082c6:	2b02      	cmp	r3, #2
 80082c8:	d901      	bls.n	80082ce <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80082ca:	2303      	movs	r3, #3
 80082cc:	e0fd      	b.n	80084ca <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80082ce:	4b81      	ldr	r3, [pc, #516]	; (80084d4 <HAL_RCC_OscConfig+0x4d4>)
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80082d6:	2b00      	cmp	r3, #0
 80082d8:	d0f0      	beq.n	80082bc <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	689b      	ldr	r3, [r3, #8]
 80082de:	2b01      	cmp	r3, #1
 80082e0:	d106      	bne.n	80082f0 <HAL_RCC_OscConfig+0x2f0>
 80082e2:	4b7d      	ldr	r3, [pc, #500]	; (80084d8 <HAL_RCC_OscConfig+0x4d8>)
 80082e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80082e6:	4a7c      	ldr	r2, [pc, #496]	; (80084d8 <HAL_RCC_OscConfig+0x4d8>)
 80082e8:	f043 0301 	orr.w	r3, r3, #1
 80082ec:	6713      	str	r3, [r2, #112]	; 0x70
 80082ee:	e01c      	b.n	800832a <HAL_RCC_OscConfig+0x32a>
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	689b      	ldr	r3, [r3, #8]
 80082f4:	2b05      	cmp	r3, #5
 80082f6:	d10c      	bne.n	8008312 <HAL_RCC_OscConfig+0x312>
 80082f8:	4b77      	ldr	r3, [pc, #476]	; (80084d8 <HAL_RCC_OscConfig+0x4d8>)
 80082fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80082fc:	4a76      	ldr	r2, [pc, #472]	; (80084d8 <HAL_RCC_OscConfig+0x4d8>)
 80082fe:	f043 0304 	orr.w	r3, r3, #4
 8008302:	6713      	str	r3, [r2, #112]	; 0x70
 8008304:	4b74      	ldr	r3, [pc, #464]	; (80084d8 <HAL_RCC_OscConfig+0x4d8>)
 8008306:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008308:	4a73      	ldr	r2, [pc, #460]	; (80084d8 <HAL_RCC_OscConfig+0x4d8>)
 800830a:	f043 0301 	orr.w	r3, r3, #1
 800830e:	6713      	str	r3, [r2, #112]	; 0x70
 8008310:	e00b      	b.n	800832a <HAL_RCC_OscConfig+0x32a>
 8008312:	4b71      	ldr	r3, [pc, #452]	; (80084d8 <HAL_RCC_OscConfig+0x4d8>)
 8008314:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008316:	4a70      	ldr	r2, [pc, #448]	; (80084d8 <HAL_RCC_OscConfig+0x4d8>)
 8008318:	f023 0301 	bic.w	r3, r3, #1
 800831c:	6713      	str	r3, [r2, #112]	; 0x70
 800831e:	4b6e      	ldr	r3, [pc, #440]	; (80084d8 <HAL_RCC_OscConfig+0x4d8>)
 8008320:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008322:	4a6d      	ldr	r2, [pc, #436]	; (80084d8 <HAL_RCC_OscConfig+0x4d8>)
 8008324:	f023 0304 	bic.w	r3, r3, #4
 8008328:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	689b      	ldr	r3, [r3, #8]
 800832e:	2b00      	cmp	r3, #0
 8008330:	d015      	beq.n	800835e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008332:	f7fc fe51 	bl	8004fd8 <HAL_GetTick>
 8008336:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008338:	e00a      	b.n	8008350 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800833a:	f7fc fe4d 	bl	8004fd8 <HAL_GetTick>
 800833e:	4602      	mov	r2, r0
 8008340:	693b      	ldr	r3, [r7, #16]
 8008342:	1ad3      	subs	r3, r2, r3
 8008344:	f241 3288 	movw	r2, #5000	; 0x1388
 8008348:	4293      	cmp	r3, r2
 800834a:	d901      	bls.n	8008350 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800834c:	2303      	movs	r3, #3
 800834e:	e0bc      	b.n	80084ca <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008350:	4b61      	ldr	r3, [pc, #388]	; (80084d8 <HAL_RCC_OscConfig+0x4d8>)
 8008352:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008354:	f003 0302 	and.w	r3, r3, #2
 8008358:	2b00      	cmp	r3, #0
 800835a:	d0ee      	beq.n	800833a <HAL_RCC_OscConfig+0x33a>
 800835c:	e014      	b.n	8008388 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800835e:	f7fc fe3b 	bl	8004fd8 <HAL_GetTick>
 8008362:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008364:	e00a      	b.n	800837c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008366:	f7fc fe37 	bl	8004fd8 <HAL_GetTick>
 800836a:	4602      	mov	r2, r0
 800836c:	693b      	ldr	r3, [r7, #16]
 800836e:	1ad3      	subs	r3, r2, r3
 8008370:	f241 3288 	movw	r2, #5000	; 0x1388
 8008374:	4293      	cmp	r3, r2
 8008376:	d901      	bls.n	800837c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8008378:	2303      	movs	r3, #3
 800837a:	e0a6      	b.n	80084ca <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800837c:	4b56      	ldr	r3, [pc, #344]	; (80084d8 <HAL_RCC_OscConfig+0x4d8>)
 800837e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008380:	f003 0302 	and.w	r3, r3, #2
 8008384:	2b00      	cmp	r3, #0
 8008386:	d1ee      	bne.n	8008366 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8008388:	7dfb      	ldrb	r3, [r7, #23]
 800838a:	2b01      	cmp	r3, #1
 800838c:	d105      	bne.n	800839a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800838e:	4b52      	ldr	r3, [pc, #328]	; (80084d8 <HAL_RCC_OscConfig+0x4d8>)
 8008390:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008392:	4a51      	ldr	r2, [pc, #324]	; (80084d8 <HAL_RCC_OscConfig+0x4d8>)
 8008394:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008398:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	699b      	ldr	r3, [r3, #24]
 800839e:	2b00      	cmp	r3, #0
 80083a0:	f000 8092 	beq.w	80084c8 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80083a4:	4b4c      	ldr	r3, [pc, #304]	; (80084d8 <HAL_RCC_OscConfig+0x4d8>)
 80083a6:	689b      	ldr	r3, [r3, #8]
 80083a8:	f003 030c 	and.w	r3, r3, #12
 80083ac:	2b08      	cmp	r3, #8
 80083ae:	d05c      	beq.n	800846a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	699b      	ldr	r3, [r3, #24]
 80083b4:	2b02      	cmp	r3, #2
 80083b6:	d141      	bne.n	800843c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80083b8:	4b48      	ldr	r3, [pc, #288]	; (80084dc <HAL_RCC_OscConfig+0x4dc>)
 80083ba:	2200      	movs	r2, #0
 80083bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80083be:	f7fc fe0b 	bl	8004fd8 <HAL_GetTick>
 80083c2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80083c4:	e008      	b.n	80083d8 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80083c6:	f7fc fe07 	bl	8004fd8 <HAL_GetTick>
 80083ca:	4602      	mov	r2, r0
 80083cc:	693b      	ldr	r3, [r7, #16]
 80083ce:	1ad3      	subs	r3, r2, r3
 80083d0:	2b02      	cmp	r3, #2
 80083d2:	d901      	bls.n	80083d8 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80083d4:	2303      	movs	r3, #3
 80083d6:	e078      	b.n	80084ca <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80083d8:	4b3f      	ldr	r3, [pc, #252]	; (80084d8 <HAL_RCC_OscConfig+0x4d8>)
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80083e0:	2b00      	cmp	r3, #0
 80083e2:	d1f0      	bne.n	80083c6 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	69da      	ldr	r2, [r3, #28]
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	6a1b      	ldr	r3, [r3, #32]
 80083ec:	431a      	orrs	r2, r3
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083f2:	019b      	lsls	r3, r3, #6
 80083f4:	431a      	orrs	r2, r3
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80083fa:	085b      	lsrs	r3, r3, #1
 80083fc:	3b01      	subs	r3, #1
 80083fe:	041b      	lsls	r3, r3, #16
 8008400:	431a      	orrs	r2, r3
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008406:	061b      	lsls	r3, r3, #24
 8008408:	4933      	ldr	r1, [pc, #204]	; (80084d8 <HAL_RCC_OscConfig+0x4d8>)
 800840a:	4313      	orrs	r3, r2
 800840c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800840e:	4b33      	ldr	r3, [pc, #204]	; (80084dc <HAL_RCC_OscConfig+0x4dc>)
 8008410:	2201      	movs	r2, #1
 8008412:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008414:	f7fc fde0 	bl	8004fd8 <HAL_GetTick>
 8008418:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800841a:	e008      	b.n	800842e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800841c:	f7fc fddc 	bl	8004fd8 <HAL_GetTick>
 8008420:	4602      	mov	r2, r0
 8008422:	693b      	ldr	r3, [r7, #16]
 8008424:	1ad3      	subs	r3, r2, r3
 8008426:	2b02      	cmp	r3, #2
 8008428:	d901      	bls.n	800842e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800842a:	2303      	movs	r3, #3
 800842c:	e04d      	b.n	80084ca <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800842e:	4b2a      	ldr	r3, [pc, #168]	; (80084d8 <HAL_RCC_OscConfig+0x4d8>)
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008436:	2b00      	cmp	r3, #0
 8008438:	d0f0      	beq.n	800841c <HAL_RCC_OscConfig+0x41c>
 800843a:	e045      	b.n	80084c8 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800843c:	4b27      	ldr	r3, [pc, #156]	; (80084dc <HAL_RCC_OscConfig+0x4dc>)
 800843e:	2200      	movs	r2, #0
 8008440:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008442:	f7fc fdc9 	bl	8004fd8 <HAL_GetTick>
 8008446:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008448:	e008      	b.n	800845c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800844a:	f7fc fdc5 	bl	8004fd8 <HAL_GetTick>
 800844e:	4602      	mov	r2, r0
 8008450:	693b      	ldr	r3, [r7, #16]
 8008452:	1ad3      	subs	r3, r2, r3
 8008454:	2b02      	cmp	r3, #2
 8008456:	d901      	bls.n	800845c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8008458:	2303      	movs	r3, #3
 800845a:	e036      	b.n	80084ca <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800845c:	4b1e      	ldr	r3, [pc, #120]	; (80084d8 <HAL_RCC_OscConfig+0x4d8>)
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008464:	2b00      	cmp	r3, #0
 8008466:	d1f0      	bne.n	800844a <HAL_RCC_OscConfig+0x44a>
 8008468:	e02e      	b.n	80084c8 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	699b      	ldr	r3, [r3, #24]
 800846e:	2b01      	cmp	r3, #1
 8008470:	d101      	bne.n	8008476 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8008472:	2301      	movs	r3, #1
 8008474:	e029      	b.n	80084ca <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8008476:	4b18      	ldr	r3, [pc, #96]	; (80084d8 <HAL_RCC_OscConfig+0x4d8>)
 8008478:	689b      	ldr	r3, [r3, #8]
 800847a:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800847c:	68fb      	ldr	r3, [r7, #12]
 800847e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	69db      	ldr	r3, [r3, #28]
 8008486:	429a      	cmp	r2, r3
 8008488:	d11c      	bne.n	80084c4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800848a:	68fb      	ldr	r3, [r7, #12]
 800848c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008494:	429a      	cmp	r2, r3
 8008496:	d115      	bne.n	80084c4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8008498:	68fa      	ldr	r2, [r7, #12]
 800849a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800849e:	4013      	ands	r3, r2
 80084a0:	687a      	ldr	r2, [r7, #4]
 80084a2:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80084a4:	4293      	cmp	r3, r2
 80084a6:	d10d      	bne.n	80084c4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80084a8:	68fb      	ldr	r3, [r7, #12]
 80084aa:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80084b2:	429a      	cmp	r2, r3
 80084b4:	d106      	bne.n	80084c4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80084b6:	68fb      	ldr	r3, [r7, #12]
 80084b8:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80084c0:	429a      	cmp	r2, r3
 80084c2:	d001      	beq.n	80084c8 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 80084c4:	2301      	movs	r3, #1
 80084c6:	e000      	b.n	80084ca <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 80084c8:	2300      	movs	r3, #0
}
 80084ca:	4618      	mov	r0, r3
 80084cc:	3718      	adds	r7, #24
 80084ce:	46bd      	mov	sp, r7
 80084d0:	bd80      	pop	{r7, pc}
 80084d2:	bf00      	nop
 80084d4:	40007000 	.word	0x40007000
 80084d8:	40023800 	.word	0x40023800
 80084dc:	42470060 	.word	0x42470060

080084e0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80084e0:	b580      	push	{r7, lr}
 80084e2:	b084      	sub	sp, #16
 80084e4:	af00      	add	r7, sp, #0
 80084e6:	6078      	str	r0, [r7, #4]
 80084e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	2b00      	cmp	r3, #0
 80084ee:	d101      	bne.n	80084f4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80084f0:	2301      	movs	r3, #1
 80084f2:	e0cc      	b.n	800868e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80084f4:	4b68      	ldr	r3, [pc, #416]	; (8008698 <HAL_RCC_ClockConfig+0x1b8>)
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	f003 030f 	and.w	r3, r3, #15
 80084fc:	683a      	ldr	r2, [r7, #0]
 80084fe:	429a      	cmp	r2, r3
 8008500:	d90c      	bls.n	800851c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008502:	4b65      	ldr	r3, [pc, #404]	; (8008698 <HAL_RCC_ClockConfig+0x1b8>)
 8008504:	683a      	ldr	r2, [r7, #0]
 8008506:	b2d2      	uxtb	r2, r2
 8008508:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800850a:	4b63      	ldr	r3, [pc, #396]	; (8008698 <HAL_RCC_ClockConfig+0x1b8>)
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	f003 030f 	and.w	r3, r3, #15
 8008512:	683a      	ldr	r2, [r7, #0]
 8008514:	429a      	cmp	r2, r3
 8008516:	d001      	beq.n	800851c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8008518:	2301      	movs	r3, #1
 800851a:	e0b8      	b.n	800868e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	f003 0302 	and.w	r3, r3, #2
 8008524:	2b00      	cmp	r3, #0
 8008526:	d020      	beq.n	800856a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	f003 0304 	and.w	r3, r3, #4
 8008530:	2b00      	cmp	r3, #0
 8008532:	d005      	beq.n	8008540 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8008534:	4b59      	ldr	r3, [pc, #356]	; (800869c <HAL_RCC_ClockConfig+0x1bc>)
 8008536:	689b      	ldr	r3, [r3, #8]
 8008538:	4a58      	ldr	r2, [pc, #352]	; (800869c <HAL_RCC_ClockConfig+0x1bc>)
 800853a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800853e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	f003 0308 	and.w	r3, r3, #8
 8008548:	2b00      	cmp	r3, #0
 800854a:	d005      	beq.n	8008558 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800854c:	4b53      	ldr	r3, [pc, #332]	; (800869c <HAL_RCC_ClockConfig+0x1bc>)
 800854e:	689b      	ldr	r3, [r3, #8]
 8008550:	4a52      	ldr	r2, [pc, #328]	; (800869c <HAL_RCC_ClockConfig+0x1bc>)
 8008552:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8008556:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008558:	4b50      	ldr	r3, [pc, #320]	; (800869c <HAL_RCC_ClockConfig+0x1bc>)
 800855a:	689b      	ldr	r3, [r3, #8]
 800855c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	689b      	ldr	r3, [r3, #8]
 8008564:	494d      	ldr	r1, [pc, #308]	; (800869c <HAL_RCC_ClockConfig+0x1bc>)
 8008566:	4313      	orrs	r3, r2
 8008568:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	f003 0301 	and.w	r3, r3, #1
 8008572:	2b00      	cmp	r3, #0
 8008574:	d044      	beq.n	8008600 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	685b      	ldr	r3, [r3, #4]
 800857a:	2b01      	cmp	r3, #1
 800857c:	d107      	bne.n	800858e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800857e:	4b47      	ldr	r3, [pc, #284]	; (800869c <HAL_RCC_ClockConfig+0x1bc>)
 8008580:	681b      	ldr	r3, [r3, #0]
 8008582:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008586:	2b00      	cmp	r3, #0
 8008588:	d119      	bne.n	80085be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800858a:	2301      	movs	r3, #1
 800858c:	e07f      	b.n	800868e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	685b      	ldr	r3, [r3, #4]
 8008592:	2b02      	cmp	r3, #2
 8008594:	d003      	beq.n	800859e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800859a:	2b03      	cmp	r3, #3
 800859c:	d107      	bne.n	80085ae <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800859e:	4b3f      	ldr	r3, [pc, #252]	; (800869c <HAL_RCC_ClockConfig+0x1bc>)
 80085a0:	681b      	ldr	r3, [r3, #0]
 80085a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80085a6:	2b00      	cmp	r3, #0
 80085a8:	d109      	bne.n	80085be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80085aa:	2301      	movs	r3, #1
 80085ac:	e06f      	b.n	800868e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80085ae:	4b3b      	ldr	r3, [pc, #236]	; (800869c <HAL_RCC_ClockConfig+0x1bc>)
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	f003 0302 	and.w	r3, r3, #2
 80085b6:	2b00      	cmp	r3, #0
 80085b8:	d101      	bne.n	80085be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80085ba:	2301      	movs	r3, #1
 80085bc:	e067      	b.n	800868e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80085be:	4b37      	ldr	r3, [pc, #220]	; (800869c <HAL_RCC_ClockConfig+0x1bc>)
 80085c0:	689b      	ldr	r3, [r3, #8]
 80085c2:	f023 0203 	bic.w	r2, r3, #3
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	685b      	ldr	r3, [r3, #4]
 80085ca:	4934      	ldr	r1, [pc, #208]	; (800869c <HAL_RCC_ClockConfig+0x1bc>)
 80085cc:	4313      	orrs	r3, r2
 80085ce:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80085d0:	f7fc fd02 	bl	8004fd8 <HAL_GetTick>
 80085d4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80085d6:	e00a      	b.n	80085ee <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80085d8:	f7fc fcfe 	bl	8004fd8 <HAL_GetTick>
 80085dc:	4602      	mov	r2, r0
 80085de:	68fb      	ldr	r3, [r7, #12]
 80085e0:	1ad3      	subs	r3, r2, r3
 80085e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80085e6:	4293      	cmp	r3, r2
 80085e8:	d901      	bls.n	80085ee <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80085ea:	2303      	movs	r3, #3
 80085ec:	e04f      	b.n	800868e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80085ee:	4b2b      	ldr	r3, [pc, #172]	; (800869c <HAL_RCC_ClockConfig+0x1bc>)
 80085f0:	689b      	ldr	r3, [r3, #8]
 80085f2:	f003 020c 	and.w	r2, r3, #12
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	685b      	ldr	r3, [r3, #4]
 80085fa:	009b      	lsls	r3, r3, #2
 80085fc:	429a      	cmp	r2, r3
 80085fe:	d1eb      	bne.n	80085d8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8008600:	4b25      	ldr	r3, [pc, #148]	; (8008698 <HAL_RCC_ClockConfig+0x1b8>)
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	f003 030f 	and.w	r3, r3, #15
 8008608:	683a      	ldr	r2, [r7, #0]
 800860a:	429a      	cmp	r2, r3
 800860c:	d20c      	bcs.n	8008628 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800860e:	4b22      	ldr	r3, [pc, #136]	; (8008698 <HAL_RCC_ClockConfig+0x1b8>)
 8008610:	683a      	ldr	r2, [r7, #0]
 8008612:	b2d2      	uxtb	r2, r2
 8008614:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008616:	4b20      	ldr	r3, [pc, #128]	; (8008698 <HAL_RCC_ClockConfig+0x1b8>)
 8008618:	681b      	ldr	r3, [r3, #0]
 800861a:	f003 030f 	and.w	r3, r3, #15
 800861e:	683a      	ldr	r2, [r7, #0]
 8008620:	429a      	cmp	r2, r3
 8008622:	d001      	beq.n	8008628 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8008624:	2301      	movs	r3, #1
 8008626:	e032      	b.n	800868e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	f003 0304 	and.w	r3, r3, #4
 8008630:	2b00      	cmp	r3, #0
 8008632:	d008      	beq.n	8008646 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008634:	4b19      	ldr	r3, [pc, #100]	; (800869c <HAL_RCC_ClockConfig+0x1bc>)
 8008636:	689b      	ldr	r3, [r3, #8]
 8008638:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	68db      	ldr	r3, [r3, #12]
 8008640:	4916      	ldr	r1, [pc, #88]	; (800869c <HAL_RCC_ClockConfig+0x1bc>)
 8008642:	4313      	orrs	r3, r2
 8008644:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	f003 0308 	and.w	r3, r3, #8
 800864e:	2b00      	cmp	r3, #0
 8008650:	d009      	beq.n	8008666 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8008652:	4b12      	ldr	r3, [pc, #72]	; (800869c <HAL_RCC_ClockConfig+0x1bc>)
 8008654:	689b      	ldr	r3, [r3, #8]
 8008656:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	691b      	ldr	r3, [r3, #16]
 800865e:	00db      	lsls	r3, r3, #3
 8008660:	490e      	ldr	r1, [pc, #56]	; (800869c <HAL_RCC_ClockConfig+0x1bc>)
 8008662:	4313      	orrs	r3, r2
 8008664:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8008666:	f000 f821 	bl	80086ac <HAL_RCC_GetSysClockFreq>
 800866a:	4601      	mov	r1, r0
 800866c:	4b0b      	ldr	r3, [pc, #44]	; (800869c <HAL_RCC_ClockConfig+0x1bc>)
 800866e:	689b      	ldr	r3, [r3, #8]
 8008670:	091b      	lsrs	r3, r3, #4
 8008672:	f003 030f 	and.w	r3, r3, #15
 8008676:	4a0a      	ldr	r2, [pc, #40]	; (80086a0 <HAL_RCC_ClockConfig+0x1c0>)
 8008678:	5cd3      	ldrb	r3, [r2, r3]
 800867a:	fa21 f303 	lsr.w	r3, r1, r3
 800867e:	4a09      	ldr	r2, [pc, #36]	; (80086a4 <HAL_RCC_ClockConfig+0x1c4>)
 8008680:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8008682:	4b09      	ldr	r3, [pc, #36]	; (80086a8 <HAL_RCC_ClockConfig+0x1c8>)
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	4618      	mov	r0, r3
 8008688:	f7fc fc62 	bl	8004f50 <HAL_InitTick>

  return HAL_OK;
 800868c:	2300      	movs	r3, #0
}
 800868e:	4618      	mov	r0, r3
 8008690:	3710      	adds	r7, #16
 8008692:	46bd      	mov	sp, r7
 8008694:	bd80      	pop	{r7, pc}
 8008696:	bf00      	nop
 8008698:	40023c00 	.word	0x40023c00
 800869c:	40023800 	.word	0x40023800
 80086a0:	080159c8 	.word	0x080159c8
 80086a4:	20000000 	.word	0x20000000
 80086a8:	20000004 	.word	0x20000004

080086ac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80086ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80086ae:	b085      	sub	sp, #20
 80086b0:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80086b2:	2300      	movs	r3, #0
 80086b4:	607b      	str	r3, [r7, #4]
 80086b6:	2300      	movs	r3, #0
 80086b8:	60fb      	str	r3, [r7, #12]
 80086ba:	2300      	movs	r3, #0
 80086bc:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80086be:	2300      	movs	r3, #0
 80086c0:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80086c2:	4b50      	ldr	r3, [pc, #320]	; (8008804 <HAL_RCC_GetSysClockFreq+0x158>)
 80086c4:	689b      	ldr	r3, [r3, #8]
 80086c6:	f003 030c 	and.w	r3, r3, #12
 80086ca:	2b04      	cmp	r3, #4
 80086cc:	d007      	beq.n	80086de <HAL_RCC_GetSysClockFreq+0x32>
 80086ce:	2b08      	cmp	r3, #8
 80086d0:	d008      	beq.n	80086e4 <HAL_RCC_GetSysClockFreq+0x38>
 80086d2:	2b00      	cmp	r3, #0
 80086d4:	f040 808d 	bne.w	80087f2 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80086d8:	4b4b      	ldr	r3, [pc, #300]	; (8008808 <HAL_RCC_GetSysClockFreq+0x15c>)
 80086da:	60bb      	str	r3, [r7, #8]
       break;
 80086dc:	e08c      	b.n	80087f8 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80086de:	4b4b      	ldr	r3, [pc, #300]	; (800880c <HAL_RCC_GetSysClockFreq+0x160>)
 80086e0:	60bb      	str	r3, [r7, #8]
      break;
 80086e2:	e089      	b.n	80087f8 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80086e4:	4b47      	ldr	r3, [pc, #284]	; (8008804 <HAL_RCC_GetSysClockFreq+0x158>)
 80086e6:	685b      	ldr	r3, [r3, #4]
 80086e8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80086ec:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80086ee:	4b45      	ldr	r3, [pc, #276]	; (8008804 <HAL_RCC_GetSysClockFreq+0x158>)
 80086f0:	685b      	ldr	r3, [r3, #4]
 80086f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80086f6:	2b00      	cmp	r3, #0
 80086f8:	d023      	beq.n	8008742 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80086fa:	4b42      	ldr	r3, [pc, #264]	; (8008804 <HAL_RCC_GetSysClockFreq+0x158>)
 80086fc:	685b      	ldr	r3, [r3, #4]
 80086fe:	099b      	lsrs	r3, r3, #6
 8008700:	f04f 0400 	mov.w	r4, #0
 8008704:	f240 11ff 	movw	r1, #511	; 0x1ff
 8008708:	f04f 0200 	mov.w	r2, #0
 800870c:	ea03 0501 	and.w	r5, r3, r1
 8008710:	ea04 0602 	and.w	r6, r4, r2
 8008714:	4a3d      	ldr	r2, [pc, #244]	; (800880c <HAL_RCC_GetSysClockFreq+0x160>)
 8008716:	fb02 f106 	mul.w	r1, r2, r6
 800871a:	2200      	movs	r2, #0
 800871c:	fb02 f205 	mul.w	r2, r2, r5
 8008720:	440a      	add	r2, r1
 8008722:	493a      	ldr	r1, [pc, #232]	; (800880c <HAL_RCC_GetSysClockFreq+0x160>)
 8008724:	fba5 0101 	umull	r0, r1, r5, r1
 8008728:	1853      	adds	r3, r2, r1
 800872a:	4619      	mov	r1, r3
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	f04f 0400 	mov.w	r4, #0
 8008732:	461a      	mov	r2, r3
 8008734:	4623      	mov	r3, r4
 8008736:	f7f8 faa7 	bl	8000c88 <__aeabi_uldivmod>
 800873a:	4603      	mov	r3, r0
 800873c:	460c      	mov	r4, r1
 800873e:	60fb      	str	r3, [r7, #12]
 8008740:	e049      	b.n	80087d6 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008742:	4b30      	ldr	r3, [pc, #192]	; (8008804 <HAL_RCC_GetSysClockFreq+0x158>)
 8008744:	685b      	ldr	r3, [r3, #4]
 8008746:	099b      	lsrs	r3, r3, #6
 8008748:	f04f 0400 	mov.w	r4, #0
 800874c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8008750:	f04f 0200 	mov.w	r2, #0
 8008754:	ea03 0501 	and.w	r5, r3, r1
 8008758:	ea04 0602 	and.w	r6, r4, r2
 800875c:	4629      	mov	r1, r5
 800875e:	4632      	mov	r2, r6
 8008760:	f04f 0300 	mov.w	r3, #0
 8008764:	f04f 0400 	mov.w	r4, #0
 8008768:	0154      	lsls	r4, r2, #5
 800876a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800876e:	014b      	lsls	r3, r1, #5
 8008770:	4619      	mov	r1, r3
 8008772:	4622      	mov	r2, r4
 8008774:	1b49      	subs	r1, r1, r5
 8008776:	eb62 0206 	sbc.w	r2, r2, r6
 800877a:	f04f 0300 	mov.w	r3, #0
 800877e:	f04f 0400 	mov.w	r4, #0
 8008782:	0194      	lsls	r4, r2, #6
 8008784:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8008788:	018b      	lsls	r3, r1, #6
 800878a:	1a5b      	subs	r3, r3, r1
 800878c:	eb64 0402 	sbc.w	r4, r4, r2
 8008790:	f04f 0100 	mov.w	r1, #0
 8008794:	f04f 0200 	mov.w	r2, #0
 8008798:	00e2      	lsls	r2, r4, #3
 800879a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800879e:	00d9      	lsls	r1, r3, #3
 80087a0:	460b      	mov	r3, r1
 80087a2:	4614      	mov	r4, r2
 80087a4:	195b      	adds	r3, r3, r5
 80087a6:	eb44 0406 	adc.w	r4, r4, r6
 80087aa:	f04f 0100 	mov.w	r1, #0
 80087ae:	f04f 0200 	mov.w	r2, #0
 80087b2:	02a2      	lsls	r2, r4, #10
 80087b4:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80087b8:	0299      	lsls	r1, r3, #10
 80087ba:	460b      	mov	r3, r1
 80087bc:	4614      	mov	r4, r2
 80087be:	4618      	mov	r0, r3
 80087c0:	4621      	mov	r1, r4
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	f04f 0400 	mov.w	r4, #0
 80087c8:	461a      	mov	r2, r3
 80087ca:	4623      	mov	r3, r4
 80087cc:	f7f8 fa5c 	bl	8000c88 <__aeabi_uldivmod>
 80087d0:	4603      	mov	r3, r0
 80087d2:	460c      	mov	r4, r1
 80087d4:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80087d6:	4b0b      	ldr	r3, [pc, #44]	; (8008804 <HAL_RCC_GetSysClockFreq+0x158>)
 80087d8:	685b      	ldr	r3, [r3, #4]
 80087da:	0c1b      	lsrs	r3, r3, #16
 80087dc:	f003 0303 	and.w	r3, r3, #3
 80087e0:	3301      	adds	r3, #1
 80087e2:	005b      	lsls	r3, r3, #1
 80087e4:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80087e6:	68fa      	ldr	r2, [r7, #12]
 80087e8:	683b      	ldr	r3, [r7, #0]
 80087ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80087ee:	60bb      	str	r3, [r7, #8]
      break;
 80087f0:	e002      	b.n	80087f8 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80087f2:	4b05      	ldr	r3, [pc, #20]	; (8008808 <HAL_RCC_GetSysClockFreq+0x15c>)
 80087f4:	60bb      	str	r3, [r7, #8]
      break;
 80087f6:	bf00      	nop
    }
  }
  return sysclockfreq;
 80087f8:	68bb      	ldr	r3, [r7, #8]
}
 80087fa:	4618      	mov	r0, r3
 80087fc:	3714      	adds	r7, #20
 80087fe:	46bd      	mov	sp, r7
 8008800:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008802:	bf00      	nop
 8008804:	40023800 	.word	0x40023800
 8008808:	00f42400 	.word	0x00f42400
 800880c:	00b71b00 	.word	0x00b71b00

08008810 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008810:	b480      	push	{r7}
 8008812:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008814:	4b03      	ldr	r3, [pc, #12]	; (8008824 <HAL_RCC_GetHCLKFreq+0x14>)
 8008816:	681b      	ldr	r3, [r3, #0]
}
 8008818:	4618      	mov	r0, r3
 800881a:	46bd      	mov	sp, r7
 800881c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008820:	4770      	bx	lr
 8008822:	bf00      	nop
 8008824:	20000000 	.word	0x20000000

08008828 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008828:	b580      	push	{r7, lr}
 800882a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800882c:	f7ff fff0 	bl	8008810 <HAL_RCC_GetHCLKFreq>
 8008830:	4601      	mov	r1, r0
 8008832:	4b05      	ldr	r3, [pc, #20]	; (8008848 <HAL_RCC_GetPCLK1Freq+0x20>)
 8008834:	689b      	ldr	r3, [r3, #8]
 8008836:	0a9b      	lsrs	r3, r3, #10
 8008838:	f003 0307 	and.w	r3, r3, #7
 800883c:	4a03      	ldr	r2, [pc, #12]	; (800884c <HAL_RCC_GetPCLK1Freq+0x24>)
 800883e:	5cd3      	ldrb	r3, [r2, r3]
 8008840:	fa21 f303 	lsr.w	r3, r1, r3
}
 8008844:	4618      	mov	r0, r3
 8008846:	bd80      	pop	{r7, pc}
 8008848:	40023800 	.word	0x40023800
 800884c:	080159d8 	.word	0x080159d8

08008850 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008850:	b580      	push	{r7, lr}
 8008852:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8008854:	f7ff ffdc 	bl	8008810 <HAL_RCC_GetHCLKFreq>
 8008858:	4601      	mov	r1, r0
 800885a:	4b05      	ldr	r3, [pc, #20]	; (8008870 <HAL_RCC_GetPCLK2Freq+0x20>)
 800885c:	689b      	ldr	r3, [r3, #8]
 800885e:	0b5b      	lsrs	r3, r3, #13
 8008860:	f003 0307 	and.w	r3, r3, #7
 8008864:	4a03      	ldr	r2, [pc, #12]	; (8008874 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008866:	5cd3      	ldrb	r3, [r2, r3]
 8008868:	fa21 f303 	lsr.w	r3, r1, r3
}
 800886c:	4618      	mov	r0, r3
 800886e:	bd80      	pop	{r7, pc}
 8008870:	40023800 	.word	0x40023800
 8008874:	080159d8 	.word	0x080159d8

08008878 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008878:	b580      	push	{r7, lr}
 800887a:	b086      	sub	sp, #24
 800887c:	af00      	add	r7, sp, #0
 800887e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8008880:	2300      	movs	r3, #0
 8008882:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8008884:	2300      	movs	r3, #0
 8008886:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	f003 0301 	and.w	r3, r3, #1
 8008890:	2b00      	cmp	r3, #0
 8008892:	d105      	bne.n	80088a0 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	681b      	ldr	r3, [r3, #0]
 8008898:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800889c:	2b00      	cmp	r3, #0
 800889e:	d035      	beq.n	800890c <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80088a0:	4b62      	ldr	r3, [pc, #392]	; (8008a2c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80088a2:	2200      	movs	r2, #0
 80088a4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80088a6:	f7fc fb97 	bl	8004fd8 <HAL_GetTick>
 80088aa:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80088ac:	e008      	b.n	80088c0 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80088ae:	f7fc fb93 	bl	8004fd8 <HAL_GetTick>
 80088b2:	4602      	mov	r2, r0
 80088b4:	697b      	ldr	r3, [r7, #20]
 80088b6:	1ad3      	subs	r3, r2, r3
 80088b8:	2b02      	cmp	r3, #2
 80088ba:	d901      	bls.n	80088c0 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80088bc:	2303      	movs	r3, #3
 80088be:	e0b0      	b.n	8008a22 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80088c0:	4b5b      	ldr	r3, [pc, #364]	; (8008a30 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80088c8:	2b00      	cmp	r3, #0
 80088ca:	d1f0      	bne.n	80088ae <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	685b      	ldr	r3, [r3, #4]
 80088d0:	019a      	lsls	r2, r3, #6
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	689b      	ldr	r3, [r3, #8]
 80088d6:	071b      	lsls	r3, r3, #28
 80088d8:	4955      	ldr	r1, [pc, #340]	; (8008a30 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80088da:	4313      	orrs	r3, r2
 80088dc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80088e0:	4b52      	ldr	r3, [pc, #328]	; (8008a2c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80088e2:	2201      	movs	r2, #1
 80088e4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80088e6:	f7fc fb77 	bl	8004fd8 <HAL_GetTick>
 80088ea:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80088ec:	e008      	b.n	8008900 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80088ee:	f7fc fb73 	bl	8004fd8 <HAL_GetTick>
 80088f2:	4602      	mov	r2, r0
 80088f4:	697b      	ldr	r3, [r7, #20]
 80088f6:	1ad3      	subs	r3, r2, r3
 80088f8:	2b02      	cmp	r3, #2
 80088fa:	d901      	bls.n	8008900 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80088fc:	2303      	movs	r3, #3
 80088fe:	e090      	b.n	8008a22 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8008900:	4b4b      	ldr	r3, [pc, #300]	; (8008a30 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8008902:	681b      	ldr	r3, [r3, #0]
 8008904:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008908:	2b00      	cmp	r3, #0
 800890a:	d0f0      	beq.n	80088ee <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	681b      	ldr	r3, [r3, #0]
 8008910:	f003 0302 	and.w	r3, r3, #2
 8008914:	2b00      	cmp	r3, #0
 8008916:	f000 8083 	beq.w	8008a20 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800891a:	2300      	movs	r3, #0
 800891c:	60fb      	str	r3, [r7, #12]
 800891e:	4b44      	ldr	r3, [pc, #272]	; (8008a30 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8008920:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008922:	4a43      	ldr	r2, [pc, #268]	; (8008a30 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8008924:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008928:	6413      	str	r3, [r2, #64]	; 0x40
 800892a:	4b41      	ldr	r3, [pc, #260]	; (8008a30 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800892c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800892e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008932:	60fb      	str	r3, [r7, #12]
 8008934:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8008936:	4b3f      	ldr	r3, [pc, #252]	; (8008a34 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	4a3e      	ldr	r2, [pc, #248]	; (8008a34 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800893c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008940:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8008942:	f7fc fb49 	bl	8004fd8 <HAL_GetTick>
 8008946:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8008948:	e008      	b.n	800895c <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800894a:	f7fc fb45 	bl	8004fd8 <HAL_GetTick>
 800894e:	4602      	mov	r2, r0
 8008950:	697b      	ldr	r3, [r7, #20]
 8008952:	1ad3      	subs	r3, r2, r3
 8008954:	2b02      	cmp	r3, #2
 8008956:	d901      	bls.n	800895c <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8008958:	2303      	movs	r3, #3
 800895a:	e062      	b.n	8008a22 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800895c:	4b35      	ldr	r3, [pc, #212]	; (8008a34 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008964:	2b00      	cmp	r3, #0
 8008966:	d0f0      	beq.n	800894a <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8008968:	4b31      	ldr	r3, [pc, #196]	; (8008a30 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800896a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800896c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008970:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8008972:	693b      	ldr	r3, [r7, #16]
 8008974:	2b00      	cmp	r3, #0
 8008976:	d02f      	beq.n	80089d8 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	68db      	ldr	r3, [r3, #12]
 800897c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008980:	693a      	ldr	r2, [r7, #16]
 8008982:	429a      	cmp	r2, r3
 8008984:	d028      	beq.n	80089d8 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8008986:	4b2a      	ldr	r3, [pc, #168]	; (8008a30 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8008988:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800898a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800898e:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8008990:	4b29      	ldr	r3, [pc, #164]	; (8008a38 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8008992:	2201      	movs	r2, #1
 8008994:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8008996:	4b28      	ldr	r3, [pc, #160]	; (8008a38 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8008998:	2200      	movs	r2, #0
 800899a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800899c:	4a24      	ldr	r2, [pc, #144]	; (8008a30 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800899e:	693b      	ldr	r3, [r7, #16]
 80089a0:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80089a2:	4b23      	ldr	r3, [pc, #140]	; (8008a30 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80089a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80089a6:	f003 0301 	and.w	r3, r3, #1
 80089aa:	2b01      	cmp	r3, #1
 80089ac:	d114      	bne.n	80089d8 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80089ae:	f7fc fb13 	bl	8004fd8 <HAL_GetTick>
 80089b2:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80089b4:	e00a      	b.n	80089cc <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80089b6:	f7fc fb0f 	bl	8004fd8 <HAL_GetTick>
 80089ba:	4602      	mov	r2, r0
 80089bc:	697b      	ldr	r3, [r7, #20]
 80089be:	1ad3      	subs	r3, r2, r3
 80089c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80089c4:	4293      	cmp	r3, r2
 80089c6:	d901      	bls.n	80089cc <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 80089c8:	2303      	movs	r3, #3
 80089ca:	e02a      	b.n	8008a22 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80089cc:	4b18      	ldr	r3, [pc, #96]	; (8008a30 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80089ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80089d0:	f003 0302 	and.w	r3, r3, #2
 80089d4:	2b00      	cmp	r3, #0
 80089d6:	d0ee      	beq.n	80089b6 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	68db      	ldr	r3, [r3, #12]
 80089dc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80089e0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80089e4:	d10d      	bne.n	8008a02 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 80089e6:	4b12      	ldr	r3, [pc, #72]	; (8008a30 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80089e8:	689b      	ldr	r3, [r3, #8]
 80089ea:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	68db      	ldr	r3, [r3, #12]
 80089f2:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80089f6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80089fa:	490d      	ldr	r1, [pc, #52]	; (8008a30 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80089fc:	4313      	orrs	r3, r2
 80089fe:	608b      	str	r3, [r1, #8]
 8008a00:	e005      	b.n	8008a0e <HAL_RCCEx_PeriphCLKConfig+0x196>
 8008a02:	4b0b      	ldr	r3, [pc, #44]	; (8008a30 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8008a04:	689b      	ldr	r3, [r3, #8]
 8008a06:	4a0a      	ldr	r2, [pc, #40]	; (8008a30 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8008a08:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8008a0c:	6093      	str	r3, [r2, #8]
 8008a0e:	4b08      	ldr	r3, [pc, #32]	; (8008a30 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8008a10:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	68db      	ldr	r3, [r3, #12]
 8008a16:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008a1a:	4905      	ldr	r1, [pc, #20]	; (8008a30 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8008a1c:	4313      	orrs	r3, r2
 8008a1e:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8008a20:	2300      	movs	r3, #0
}
 8008a22:	4618      	mov	r0, r3
 8008a24:	3718      	adds	r7, #24
 8008a26:	46bd      	mov	sp, r7
 8008a28:	bd80      	pop	{r7, pc}
 8008a2a:	bf00      	nop
 8008a2c:	42470068 	.word	0x42470068
 8008a30:	40023800 	.word	0x40023800
 8008a34:	40007000 	.word	0x40007000
 8008a38:	42470e40 	.word	0x42470e40

08008a3c <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8008a3c:	b580      	push	{r7, lr}
 8008a3e:	b082      	sub	sp, #8
 8008a40:	af00      	add	r7, sp, #0
 8008a42:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	2b00      	cmp	r3, #0
 8008a48:	d101      	bne.n	8008a4e <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 8008a4a:	2301      	movs	r3, #1
 8008a4c:	e083      	b.n	8008b56 <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	7f5b      	ldrb	r3, [r3, #29]
 8008a52:	b2db      	uxtb	r3, r3
 8008a54:	2b00      	cmp	r3, #0
 8008a56:	d105      	bne.n	8008a64 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	2200      	movs	r2, #0
 8008a5c:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8008a5e:	6878      	ldr	r0, [r7, #4]
 8008a60:	f7fb feac 	bl	80047bc <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	2202      	movs	r2, #2
 8008a68:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	681b      	ldr	r3, [r3, #0]
 8008a6e:	22ca      	movs	r2, #202	; 0xca
 8008a70:	625a      	str	r2, [r3, #36]	; 0x24
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	2253      	movs	r2, #83	; 0x53
 8008a78:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8008a7a:	6878      	ldr	r0, [r7, #4]
 8008a7c:	f000 f897 	bl	8008bae <RTC_EnterInitMode>
 8008a80:	4603      	mov	r3, r0
 8008a82:	2b00      	cmp	r3, #0
 8008a84:	d008      	beq.n	8008a98 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	22ff      	movs	r2, #255	; 0xff
 8008a8c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	2204      	movs	r2, #4
 8008a92:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8008a94:	2301      	movs	r3, #1
 8008a96:	e05e      	b.n	8008b56 <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	681b      	ldr	r3, [r3, #0]
 8008a9c:	689b      	ldr	r3, [r3, #8]
 8008a9e:	687a      	ldr	r2, [r7, #4]
 8008aa0:	6812      	ldr	r2, [r2, #0]
 8008aa2:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8008aa6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008aaa:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	681b      	ldr	r3, [r3, #0]
 8008ab0:	6899      	ldr	r1, [r3, #8]
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	685a      	ldr	r2, [r3, #4]
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	691b      	ldr	r3, [r3, #16]
 8008aba:	431a      	orrs	r2, r3
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	695b      	ldr	r3, [r3, #20]
 8008ac0:	431a      	orrs	r2, r3
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	681b      	ldr	r3, [r3, #0]
 8008ac6:	430a      	orrs	r2, r1
 8008ac8:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	681b      	ldr	r3, [r3, #0]
 8008ace:	687a      	ldr	r2, [r7, #4]
 8008ad0:	68d2      	ldr	r2, [r2, #12]
 8008ad2:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	681b      	ldr	r3, [r3, #0]
 8008ad8:	6919      	ldr	r1, [r3, #16]
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	689b      	ldr	r3, [r3, #8]
 8008ade:	041a      	lsls	r2, r3, #16
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	681b      	ldr	r3, [r3, #0]
 8008ae4:	430a      	orrs	r2, r1
 8008ae6:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	681b      	ldr	r3, [r3, #0]
 8008aec:	68da      	ldr	r2, [r3, #12]
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	681b      	ldr	r3, [r3, #0]
 8008af2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008af6:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	681b      	ldr	r3, [r3, #0]
 8008afc:	689b      	ldr	r3, [r3, #8]
 8008afe:	f003 0320 	and.w	r3, r3, #32
 8008b02:	2b00      	cmp	r3, #0
 8008b04:	d10e      	bne.n	8008b24 <HAL_RTC_Init+0xe8>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8008b06:	6878      	ldr	r0, [r7, #4]
 8008b08:	f000 f829 	bl	8008b5e <HAL_RTC_WaitForSynchro>
 8008b0c:	4603      	mov	r3, r0
 8008b0e:	2b00      	cmp	r3, #0
 8008b10:	d008      	beq.n	8008b24 <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	681b      	ldr	r3, [r3, #0]
 8008b16:	22ff      	movs	r2, #255	; 0xff
 8008b18:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	2204      	movs	r2, #4
 8008b1e:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 8008b20:	2301      	movs	r3, #1
 8008b22:	e018      	b.n	8008b56 <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	681b      	ldr	r3, [r3, #0]
 8008b28:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	681b      	ldr	r3, [r3, #0]
 8008b2e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8008b32:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	681b      	ldr	r3, [r3, #0]
 8008b38:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	699a      	ldr	r2, [r3, #24]
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	430a      	orrs	r2, r1
 8008b44:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	681b      	ldr	r3, [r3, #0]
 8008b4a:	22ff      	movs	r2, #255	; 0xff
 8008b4c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	2201      	movs	r2, #1
 8008b52:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8008b54:	2300      	movs	r3, #0
  }
}
 8008b56:	4618      	mov	r0, r3
 8008b58:	3708      	adds	r7, #8
 8008b5a:	46bd      	mov	sp, r7
 8008b5c:	bd80      	pop	{r7, pc}

08008b5e <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8008b5e:	b580      	push	{r7, lr}
 8008b60:	b084      	sub	sp, #16
 8008b62:	af00      	add	r7, sp, #0
 8008b64:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8008b66:	2300      	movs	r3, #0
 8008b68:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	681b      	ldr	r3, [r3, #0]
 8008b6e:	68da      	ldr	r2, [r3, #12]
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8008b78:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8008b7a:	f7fc fa2d 	bl	8004fd8 <HAL_GetTick>
 8008b7e:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8008b80:	e009      	b.n	8008b96 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8008b82:	f7fc fa29 	bl	8004fd8 <HAL_GetTick>
 8008b86:	4602      	mov	r2, r0
 8008b88:	68fb      	ldr	r3, [r7, #12]
 8008b8a:	1ad3      	subs	r3, r2, r3
 8008b8c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008b90:	d901      	bls.n	8008b96 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8008b92:	2303      	movs	r3, #3
 8008b94:	e007      	b.n	8008ba6 <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	681b      	ldr	r3, [r3, #0]
 8008b9a:	68db      	ldr	r3, [r3, #12]
 8008b9c:	f003 0320 	and.w	r3, r3, #32
 8008ba0:	2b00      	cmp	r3, #0
 8008ba2:	d0ee      	beq.n	8008b82 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8008ba4:	2300      	movs	r3, #0
}
 8008ba6:	4618      	mov	r0, r3
 8008ba8:	3710      	adds	r7, #16
 8008baa:	46bd      	mov	sp, r7
 8008bac:	bd80      	pop	{r7, pc}

08008bae <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8008bae:	b580      	push	{r7, lr}
 8008bb0:	b084      	sub	sp, #16
 8008bb2:	af00      	add	r7, sp, #0
 8008bb4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8008bb6:	2300      	movs	r3, #0
 8008bb8:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	681b      	ldr	r3, [r3, #0]
 8008bbe:	68db      	ldr	r3, [r3, #12]
 8008bc0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008bc4:	2b00      	cmp	r3, #0
 8008bc6:	d119      	bne.n	8008bfc <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	681b      	ldr	r3, [r3, #0]
 8008bcc:	f04f 32ff 	mov.w	r2, #4294967295
 8008bd0:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8008bd2:	f7fc fa01 	bl	8004fd8 <HAL_GetTick>
 8008bd6:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8008bd8:	e009      	b.n	8008bee <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8008bda:	f7fc f9fd 	bl	8004fd8 <HAL_GetTick>
 8008bde:	4602      	mov	r2, r0
 8008be0:	68fb      	ldr	r3, [r7, #12]
 8008be2:	1ad3      	subs	r3, r2, r3
 8008be4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008be8:	d901      	bls.n	8008bee <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 8008bea:	2303      	movs	r3, #3
 8008bec:	e007      	b.n	8008bfe <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	681b      	ldr	r3, [r3, #0]
 8008bf2:	68db      	ldr	r3, [r3, #12]
 8008bf4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008bf8:	2b00      	cmp	r3, #0
 8008bfa:	d0ee      	beq.n	8008bda <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 8008bfc:	2300      	movs	r3, #0
}
 8008bfe:	4618      	mov	r0, r3
 8008c00:	3710      	adds	r7, #16
 8008c02:	46bd      	mov	sp, r7
 8008c04:	bd80      	pop	{r7, pc}

08008c06 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8008c06:	b580      	push	{r7, lr}
 8008c08:	b082      	sub	sp, #8
 8008c0a:	af00      	add	r7, sp, #0
 8008c0c:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	2b00      	cmp	r3, #0
 8008c12:	d101      	bne.n	8008c18 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8008c14:	2301      	movs	r3, #1
 8008c16:	e022      	b.n	8008c5e <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8008c1e:	b2db      	uxtb	r3, r3
 8008c20:	2b00      	cmp	r3, #0
 8008c22:	d105      	bne.n	8008c30 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	2200      	movs	r2, #0
 8008c28:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8008c2a:	6878      	ldr	r0, [r7, #4]
 8008c2c:	f7fb fddc 	bl	80047e8 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	2203      	movs	r2, #3
 8008c34:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8008c38:	6878      	ldr	r0, [r7, #4]
 8008c3a:	f000 f815 	bl	8008c68 <HAL_SD_InitCard>
 8008c3e:	4603      	mov	r3, r0
 8008c40:	2b00      	cmp	r3, #0
 8008c42:	d001      	beq.n	8008c48 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8008c44:	2301      	movs	r3, #1
 8008c46:	e00a      	b.n	8008c5e <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	2200      	movs	r2, #0
 8008c4c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	2200      	movs	r2, #0
 8008c52:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	2201      	movs	r2, #1
 8008c58:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8008c5c:	2300      	movs	r3, #0
}
 8008c5e:	4618      	mov	r0, r3
 8008c60:	3708      	adds	r7, #8
 8008c62:	46bd      	mov	sp, r7
 8008c64:	bd80      	pop	{r7, pc}
	...

08008c68 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8008c68:	b5b0      	push	{r4, r5, r7, lr}
 8008c6a:	b08e      	sub	sp, #56	; 0x38
 8008c6c:	af04      	add	r7, sp, #16
 8008c6e:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8008c70:	2300      	movs	r3, #0
 8008c72:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 8008c74:	2300      	movs	r3, #0
 8008c76:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8008c78:	2300      	movs	r3, #0
 8008c7a:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 8008c7c:	2300      	movs	r3, #0
 8008c7e:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8008c80:	2300      	movs	r3, #0
 8008c82:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 8008c84:	2376      	movs	r3, #118	; 0x76
 8008c86:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	681d      	ldr	r5, [r3, #0]
 8008c8c:	466c      	mov	r4, sp
 8008c8e:	f107 0314 	add.w	r3, r7, #20
 8008c92:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8008c96:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8008c9a:	f107 0308 	add.w	r3, r7, #8
 8008c9e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008ca0:	4628      	mov	r0, r5
 8008ca2:	f002 fe09 	bl	800b8b8 <SDIO_Init>
 8008ca6:	4603      	mov	r3, r0
 8008ca8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 8008cac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008cb0:	2b00      	cmp	r3, #0
 8008cb2:	d001      	beq.n	8008cb8 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8008cb4:	2301      	movs	r3, #1
 8008cb6:	e031      	b.n	8008d1c <HAL_SD_InitCard+0xb4>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 8008cb8:	4b1a      	ldr	r3, [pc, #104]	; (8008d24 <HAL_SD_InitCard+0xbc>)
 8008cba:	2200      	movs	r2, #0
 8008cbc:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	681b      	ldr	r3, [r3, #0]
 8008cc2:	4618      	mov	r0, r3
 8008cc4:	f002 fe41 	bl	800b94a <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 8008cc8:	4b16      	ldr	r3, [pc, #88]	; (8008d24 <HAL_SD_InitCard+0xbc>)
 8008cca:	2201      	movs	r2, #1
 8008ccc:	601a      	str	r2, [r3, #0]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8008cce:	6878      	ldr	r0, [r7, #4]
 8008cd0:	f000 fffa 	bl	8009cc8 <SD_PowerON>
 8008cd4:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008cd6:	6a3b      	ldr	r3, [r7, #32]
 8008cd8:	2b00      	cmp	r3, #0
 8008cda:	d00b      	beq.n	8008cf4 <HAL_SD_InitCard+0x8c>
  {
    hsd->State = HAL_SD_STATE_READY;
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	2201      	movs	r2, #1
 8008ce0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008ce8:	6a3b      	ldr	r3, [r7, #32]
 8008cea:	431a      	orrs	r2, r3
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8008cf0:	2301      	movs	r3, #1
 8008cf2:	e013      	b.n	8008d1c <HAL_SD_InitCard+0xb4>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8008cf4:	6878      	ldr	r0, [r7, #4]
 8008cf6:	f000 ff19 	bl	8009b2c <SD_InitCard>
 8008cfa:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008cfc:	6a3b      	ldr	r3, [r7, #32]
 8008cfe:	2b00      	cmp	r3, #0
 8008d00:	d00b      	beq.n	8008d1a <HAL_SD_InitCard+0xb2>
  {
    hsd->State = HAL_SD_STATE_READY;
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	2201      	movs	r2, #1
 8008d06:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008d0e:	6a3b      	ldr	r3, [r7, #32]
 8008d10:	431a      	orrs	r2, r3
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8008d16:	2301      	movs	r3, #1
 8008d18:	e000      	b.n	8008d1c <HAL_SD_InitCard+0xb4>
  }

  return HAL_OK;
 8008d1a:	2300      	movs	r3, #0
}
 8008d1c:	4618      	mov	r0, r3
 8008d1e:	3728      	adds	r7, #40	; 0x28
 8008d20:	46bd      	mov	sp, r7
 8008d22:	bdb0      	pop	{r4, r5, r7, pc}
 8008d24:	422580a0 	.word	0x422580a0

08008d28 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8008d28:	b580      	push	{r7, lr}
 8008d2a:	b08c      	sub	sp, #48	; 0x30
 8008d2c:	af00      	add	r7, sp, #0
 8008d2e:	60f8      	str	r0, [r7, #12]
 8008d30:	60b9      	str	r1, [r7, #8]
 8008d32:	607a      	str	r2, [r7, #4]
 8008d34:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 8008d3a:	68bb      	ldr	r3, [r7, #8]
 8008d3c:	2b00      	cmp	r3, #0
 8008d3e:	d107      	bne.n	8008d50 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8008d40:	68fb      	ldr	r3, [r7, #12]
 8008d42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d44:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8008d48:	68fb      	ldr	r3, [r7, #12]
 8008d4a:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8008d4c:	2301      	movs	r3, #1
 8008d4e:	e0c9      	b.n	8008ee4 <HAL_SD_ReadBlocks_DMA+0x1bc>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8008d50:	68fb      	ldr	r3, [r7, #12]
 8008d52:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8008d56:	b2db      	uxtb	r3, r3
 8008d58:	2b01      	cmp	r3, #1
 8008d5a:	f040 80c2 	bne.w	8008ee2 <HAL_SD_ReadBlocks_DMA+0x1ba>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8008d5e:	68fb      	ldr	r3, [r7, #12]
 8008d60:	2200      	movs	r2, #0
 8008d62:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8008d64:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008d66:	683b      	ldr	r3, [r7, #0]
 8008d68:	441a      	add	r2, r3
 8008d6a:	68fb      	ldr	r3, [r7, #12]
 8008d6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008d6e:	429a      	cmp	r2, r3
 8008d70:	d907      	bls.n	8008d82 <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8008d72:	68fb      	ldr	r3, [r7, #12]
 8008d74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d76:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8008d7a:	68fb      	ldr	r3, [r7, #12]
 8008d7c:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8008d7e:	2301      	movs	r3, #1
 8008d80:	e0b0      	b.n	8008ee4 <HAL_SD_ReadBlocks_DMA+0x1bc>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8008d82:	68fb      	ldr	r3, [r7, #12]
 8008d84:	2203      	movs	r2, #3
 8008d86:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8008d8a:	68fb      	ldr	r3, [r7, #12]
 8008d8c:	681b      	ldr	r3, [r3, #0]
 8008d8e:	2200      	movs	r2, #0
 8008d90:	62da      	str	r2, [r3, #44]	; 0x2c

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND | SDIO_IT_STBITERR));
 8008d92:	68fb      	ldr	r3, [r7, #12]
 8008d94:	681b      	ldr	r3, [r3, #0]
 8008d96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008d98:	68fa      	ldr	r2, [r7, #12]
 8008d9a:	6812      	ldr	r2, [r2, #0]
 8008d9c:	f443 734a 	orr.w	r3, r3, #808	; 0x328
 8008da0:	f043 0302 	orr.w	r3, r3, #2
 8008da4:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 8008da6:	68fb      	ldr	r3, [r7, #12]
 8008da8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008daa:	4a50      	ldr	r2, [pc, #320]	; (8008eec <HAL_SD_ReadBlocks_DMA+0x1c4>)
 8008dac:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 8008dae:	68fb      	ldr	r3, [r7, #12]
 8008db0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008db2:	4a4f      	ldr	r2, [pc, #316]	; (8008ef0 <HAL_SD_ReadBlocks_DMA+0x1c8>)
 8008db4:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 8008db6:	68fb      	ldr	r3, [r7, #12]
 8008db8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008dba:	2200      	movs	r2, #0
 8008dbc:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8008dbe:	68fb      	ldr	r3, [r7, #12]
 8008dc0:	6c18      	ldr	r0, [r3, #64]	; 0x40
 8008dc2:	68fb      	ldr	r3, [r7, #12]
 8008dc4:	681b      	ldr	r3, [r3, #0]
 8008dc6:	3380      	adds	r3, #128	; 0x80
 8008dc8:	4619      	mov	r1, r3
 8008dca:	68ba      	ldr	r2, [r7, #8]
 8008dcc:	683b      	ldr	r3, [r7, #0]
 8008dce:	025b      	lsls	r3, r3, #9
 8008dd0:	089b      	lsrs	r3, r3, #2
 8008dd2:	f7fc faef 	bl	80053b4 <HAL_DMA_Start_IT>
 8008dd6:	4603      	mov	r3, r0
 8008dd8:	2b00      	cmp	r3, #0
 8008dda:	d017      	beq.n	8008e0c <HAL_SD_ReadBlocks_DMA+0xe4>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 8008ddc:	68fb      	ldr	r3, [r7, #12]
 8008dde:	681b      	ldr	r3, [r3, #0]
 8008de0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008de2:	68fb      	ldr	r3, [r7, #12]
 8008de4:	681b      	ldr	r3, [r3, #0]
 8008de6:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 8008dea:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008dec:	68fb      	ldr	r3, [r7, #12]
 8008dee:	681b      	ldr	r3, [r3, #0]
 8008df0:	4a40      	ldr	r2, [pc, #256]	; (8008ef4 <HAL_SD_ReadBlocks_DMA+0x1cc>)
 8008df2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8008df4:	68fb      	ldr	r3, [r7, #12]
 8008df6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008df8:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8008dfc:	68fb      	ldr	r3, [r7, #12]
 8008dfe:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8008e00:	68fb      	ldr	r3, [r7, #12]
 8008e02:	2201      	movs	r2, #1
 8008e04:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8008e08:	2301      	movs	r3, #1
 8008e0a:	e06b      	b.n	8008ee4 <HAL_SD_ReadBlocks_DMA+0x1bc>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 8008e0c:	4b3a      	ldr	r3, [pc, #232]	; (8008ef8 <HAL_SD_ReadBlocks_DMA+0x1d0>)
 8008e0e:	2201      	movs	r2, #1
 8008e10:	601a      	str	r2, [r3, #0]

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8008e12:	68fb      	ldr	r3, [r7, #12]
 8008e14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008e16:	2b01      	cmp	r3, #1
 8008e18:	d002      	beq.n	8008e20 <HAL_SD_ReadBlocks_DMA+0xf8>
      {
        add *= 512U;
 8008e1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e1c:	025b      	lsls	r3, r3, #9
 8008e1e:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Set Block Size for Card */
      errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8008e20:	68fb      	ldr	r3, [r7, #12]
 8008e22:	681b      	ldr	r3, [r3, #0]
 8008e24:	f44f 7100 	mov.w	r1, #512	; 0x200
 8008e28:	4618      	mov	r0, r3
 8008e2a:	f002 fe21 	bl	800ba70 <SDMMC_CmdBlockLength>
 8008e2e:	62f8      	str	r0, [r7, #44]	; 0x2c
      if(errorstate != HAL_SD_ERROR_NONE)
 8008e30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e32:	2b00      	cmp	r3, #0
 8008e34:	d00f      	beq.n	8008e56 <HAL_SD_ReadBlocks_DMA+0x12e>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008e36:	68fb      	ldr	r3, [r7, #12]
 8008e38:	681b      	ldr	r3, [r3, #0]
 8008e3a:	4a2e      	ldr	r2, [pc, #184]	; (8008ef4 <HAL_SD_ReadBlocks_DMA+0x1cc>)
 8008e3c:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8008e3e:	68fb      	ldr	r3, [r7, #12]
 8008e40:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008e42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e44:	431a      	orrs	r2, r3
 8008e46:	68fb      	ldr	r3, [r7, #12]
 8008e48:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8008e4a:	68fb      	ldr	r3, [r7, #12]
 8008e4c:	2201      	movs	r2, #1
 8008e4e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        return HAL_ERROR;
 8008e52:	2301      	movs	r3, #1
 8008e54:	e046      	b.n	8008ee4 <HAL_SD_ReadBlocks_DMA+0x1bc>
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8008e56:	f04f 33ff 	mov.w	r3, #4294967295
 8008e5a:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8008e5c:	683b      	ldr	r3, [r7, #0]
 8008e5e:	025b      	lsls	r3, r3, #9
 8008e60:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8008e62:	2390      	movs	r3, #144	; 0x90
 8008e64:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8008e66:	2302      	movs	r3, #2
 8008e68:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8008e6a:	2300      	movs	r3, #0
 8008e6c:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 8008e6e:	2301      	movs	r3, #1
 8008e70:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 8008e72:	68fb      	ldr	r3, [r7, #12]
 8008e74:	681b      	ldr	r3, [r3, #0]
 8008e76:	f107 0210 	add.w	r2, r7, #16
 8008e7a:	4611      	mov	r1, r2
 8008e7c:	4618      	mov	r0, r3
 8008e7e:	f002 fdcb 	bl	800ba18 <SDIO_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 8008e82:	683b      	ldr	r3, [r7, #0]
 8008e84:	2b01      	cmp	r3, #1
 8008e86:	d90a      	bls.n	8008e9e <HAL_SD_ReadBlocks_DMA+0x176>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8008e88:	68fb      	ldr	r3, [r7, #12]
 8008e8a:	2282      	movs	r2, #130	; 0x82
 8008e8c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8008e8e:	68fb      	ldr	r3, [r7, #12]
 8008e90:	681b      	ldr	r3, [r3, #0]
 8008e92:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008e94:	4618      	mov	r0, r3
 8008e96:	f002 fe2f 	bl	800baf8 <SDMMC_CmdReadMultiBlock>
 8008e9a:	62f8      	str	r0, [r7, #44]	; 0x2c
 8008e9c:	e009      	b.n	8008eb2 <HAL_SD_ReadBlocks_DMA+0x18a>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8008e9e:	68fb      	ldr	r3, [r7, #12]
 8008ea0:	2281      	movs	r2, #129	; 0x81
 8008ea2:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8008ea4:	68fb      	ldr	r3, [r7, #12]
 8008ea6:	681b      	ldr	r3, [r3, #0]
 8008ea8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008eaa:	4618      	mov	r0, r3
 8008eac:	f002 fe02 	bl	800bab4 <SDMMC_CmdReadSingleBlock>
 8008eb0:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 8008eb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008eb4:	2b00      	cmp	r3, #0
 8008eb6:	d012      	beq.n	8008ede <HAL_SD_ReadBlocks_DMA+0x1b6>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008eb8:	68fb      	ldr	r3, [r7, #12]
 8008eba:	681b      	ldr	r3, [r3, #0]
 8008ebc:	4a0d      	ldr	r2, [pc, #52]	; (8008ef4 <HAL_SD_ReadBlocks_DMA+0x1cc>)
 8008ebe:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8008ec0:	68fb      	ldr	r3, [r7, #12]
 8008ec2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008ec4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ec6:	431a      	orrs	r2, r3
 8008ec8:	68fb      	ldr	r3, [r7, #12]
 8008eca:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8008ecc:	68fb      	ldr	r3, [r7, #12]
 8008ece:	2201      	movs	r2, #1
 8008ed0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8008ed4:	68fb      	ldr	r3, [r7, #12]
 8008ed6:	2200      	movs	r2, #0
 8008ed8:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 8008eda:	2301      	movs	r3, #1
 8008edc:	e002      	b.n	8008ee4 <HAL_SD_ReadBlocks_DMA+0x1bc>
      }

      return HAL_OK;
 8008ede:	2300      	movs	r3, #0
 8008ee0:	e000      	b.n	8008ee4 <HAL_SD_ReadBlocks_DMA+0x1bc>
    }
  }
  else
  {
    return HAL_BUSY;
 8008ee2:	2302      	movs	r3, #2
  }
}
 8008ee4:	4618      	mov	r0, r3
 8008ee6:	3730      	adds	r7, #48	; 0x30
 8008ee8:	46bd      	mov	sp, r7
 8008eea:	bd80      	pop	{r7, pc}
 8008eec:	0800993b 	.word	0x0800993b
 8008ef0:	080099ad 	.word	0x080099ad
 8008ef4:	004005ff 	.word	0x004005ff
 8008ef8:	4225858c 	.word	0x4225858c

08008efc <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8008efc:	b580      	push	{r7, lr}
 8008efe:	b08c      	sub	sp, #48	; 0x30
 8008f00:	af00      	add	r7, sp, #0
 8008f02:	60f8      	str	r0, [r7, #12]
 8008f04:	60b9      	str	r1, [r7, #8]
 8008f06:	607a      	str	r2, [r7, #4]
 8008f08:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 8008f0e:	68bb      	ldr	r3, [r7, #8]
 8008f10:	2b00      	cmp	r3, #0
 8008f12:	d107      	bne.n	8008f24 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8008f14:	68fb      	ldr	r3, [r7, #12]
 8008f16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f18:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8008f1c:	68fb      	ldr	r3, [r7, #12]
 8008f1e:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8008f20:	2301      	movs	r3, #1
 8008f22:	e0ce      	b.n	80090c2 <HAL_SD_WriteBlocks_DMA+0x1c6>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8008f24:	68fb      	ldr	r3, [r7, #12]
 8008f26:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8008f2a:	b2db      	uxtb	r3, r3
 8008f2c:	2b01      	cmp	r3, #1
 8008f2e:	f040 80c7 	bne.w	80090c0 <HAL_SD_WriteBlocks_DMA+0x1c4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8008f32:	68fb      	ldr	r3, [r7, #12]
 8008f34:	2200      	movs	r2, #0
 8008f36:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8008f38:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008f3a:	683b      	ldr	r3, [r7, #0]
 8008f3c:	441a      	add	r2, r3
 8008f3e:	68fb      	ldr	r3, [r7, #12]
 8008f40:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008f42:	429a      	cmp	r2, r3
 8008f44:	d907      	bls.n	8008f56 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8008f46:	68fb      	ldr	r3, [r7, #12]
 8008f48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f4a:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8008f4e:	68fb      	ldr	r3, [r7, #12]
 8008f50:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8008f52:	2301      	movs	r3, #1
 8008f54:	e0b5      	b.n	80090c2 <HAL_SD_WriteBlocks_DMA+0x1c6>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8008f56:	68fb      	ldr	r3, [r7, #12]
 8008f58:	2203      	movs	r2, #3
 8008f5a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8008f5e:	68fb      	ldr	r3, [r7, #12]
 8008f60:	681b      	ldr	r3, [r3, #0]
 8008f62:	2200      	movs	r2, #0
 8008f64:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable SD Error interrupts */
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 8008f66:	68fb      	ldr	r3, [r7, #12]
 8008f68:	681b      	ldr	r3, [r3, #0]
 8008f6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008f6c:	68fa      	ldr	r2, [r7, #12]
 8008f6e:	6812      	ldr	r2, [r2, #0]
 8008f70:	f443 7306 	orr.w	r3, r3, #536	; 0x218
 8008f74:	f043 0302 	orr.w	r3, r3, #2
 8008f78:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 8008f7a:	68fb      	ldr	r3, [r7, #12]
 8008f7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008f7e:	4a53      	ldr	r2, [pc, #332]	; (80090cc <HAL_SD_WriteBlocks_DMA+0x1d0>)
 8008f80:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 8008f82:	68fb      	ldr	r3, [r7, #12]
 8008f84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008f86:	4a52      	ldr	r2, [pc, #328]	; (80090d0 <HAL_SD_WriteBlocks_DMA+0x1d4>)
 8008f88:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 8008f8a:	68fb      	ldr	r3, [r7, #12]
 8008f8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008f8e:	2200      	movs	r2, #0
 8008f90:	651a      	str	r2, [r3, #80]	; 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8008f92:	68fb      	ldr	r3, [r7, #12]
 8008f94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008f96:	2b01      	cmp	r3, #1
 8008f98:	d002      	beq.n	8008fa0 <HAL_SD_WriteBlocks_DMA+0xa4>
    {
      add *= 512U;
 8008f9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f9c:	025b      	lsls	r3, r3, #9
 8008f9e:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Set Block Size for Card */
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8008fa0:	68fb      	ldr	r3, [r7, #12]
 8008fa2:	681b      	ldr	r3, [r3, #0]
 8008fa4:	f44f 7100 	mov.w	r1, #512	; 0x200
 8008fa8:	4618      	mov	r0, r3
 8008faa:	f002 fd61 	bl	800ba70 <SDMMC_CmdBlockLength>
 8008fae:	62f8      	str	r0, [r7, #44]	; 0x2c
    if(errorstate != HAL_SD_ERROR_NONE)
 8008fb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008fb2:	2b00      	cmp	r3, #0
 8008fb4:	d00f      	beq.n	8008fd6 <HAL_SD_WriteBlocks_DMA+0xda>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008fb6:	68fb      	ldr	r3, [r7, #12]
 8008fb8:	681b      	ldr	r3, [r3, #0]
 8008fba:	4a46      	ldr	r2, [pc, #280]	; (80090d4 <HAL_SD_WriteBlocks_DMA+0x1d8>)
 8008fbc:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8008fbe:	68fb      	ldr	r3, [r7, #12]
 8008fc0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008fc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008fc4:	431a      	orrs	r2, r3
 8008fc6:	68fb      	ldr	r3, [r7, #12]
 8008fc8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8008fca:	68fb      	ldr	r3, [r7, #12]
 8008fcc:	2201      	movs	r2, #1
 8008fce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8008fd2:	2301      	movs	r3, #1
 8008fd4:	e075      	b.n	80090c2 <HAL_SD_WriteBlocks_DMA+0x1c6>
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8008fd6:	683b      	ldr	r3, [r7, #0]
 8008fd8:	2b01      	cmp	r3, #1
 8008fda:	d90a      	bls.n	8008ff2 <HAL_SD_WriteBlocks_DMA+0xf6>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8008fdc:	68fb      	ldr	r3, [r7, #12]
 8008fde:	22a0      	movs	r2, #160	; 0xa0
 8008fe0:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8008fe2:	68fb      	ldr	r3, [r7, #12]
 8008fe4:	681b      	ldr	r3, [r3, #0]
 8008fe6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008fe8:	4618      	mov	r0, r3
 8008fea:	f002 fdc9 	bl	800bb80 <SDMMC_CmdWriteMultiBlock>
 8008fee:	62f8      	str	r0, [r7, #44]	; 0x2c
 8008ff0:	e009      	b.n	8009006 <HAL_SD_WriteBlocks_DMA+0x10a>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8008ff2:	68fb      	ldr	r3, [r7, #12]
 8008ff4:	2290      	movs	r2, #144	; 0x90
 8008ff6:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8008ff8:	68fb      	ldr	r3, [r7, #12]
 8008ffa:	681b      	ldr	r3, [r3, #0]
 8008ffc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008ffe:	4618      	mov	r0, r3
 8009000:	f002 fd9c 	bl	800bb3c <SDMMC_CmdWriteSingleBlock>
 8009004:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8009006:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009008:	2b00      	cmp	r3, #0
 800900a:	d012      	beq.n	8009032 <HAL_SD_WriteBlocks_DMA+0x136>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800900c:	68fb      	ldr	r3, [r7, #12]
 800900e:	681b      	ldr	r3, [r3, #0]
 8009010:	4a30      	ldr	r2, [pc, #192]	; (80090d4 <HAL_SD_WriteBlocks_DMA+0x1d8>)
 8009012:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8009014:	68fb      	ldr	r3, [r7, #12]
 8009016:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009018:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800901a:	431a      	orrs	r2, r3
 800901c:	68fb      	ldr	r3, [r7, #12]
 800901e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8009020:	68fb      	ldr	r3, [r7, #12]
 8009022:	2201      	movs	r2, #1
 8009024:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8009028:	68fb      	ldr	r3, [r7, #12]
 800902a:	2200      	movs	r2, #0
 800902c:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800902e:	2301      	movs	r3, #1
 8009030:	e047      	b.n	80090c2 <HAL_SD_WriteBlocks_DMA+0x1c6>
    }

    /* Enable SDIO DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 8009032:	4b29      	ldr	r3, [pc, #164]	; (80090d8 <HAL_SD_WriteBlocks_DMA+0x1dc>)
 8009034:	2201      	movs	r2, #1
 8009036:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8009038:	68fb      	ldr	r3, [r7, #12]
 800903a:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800903c:	68b9      	ldr	r1, [r7, #8]
 800903e:	68fb      	ldr	r3, [r7, #12]
 8009040:	681b      	ldr	r3, [r3, #0]
 8009042:	3380      	adds	r3, #128	; 0x80
 8009044:	461a      	mov	r2, r3
 8009046:	683b      	ldr	r3, [r7, #0]
 8009048:	025b      	lsls	r3, r3, #9
 800904a:	089b      	lsrs	r3, r3, #2
 800904c:	f7fc f9b2 	bl	80053b4 <HAL_DMA_Start_IT>
 8009050:	4603      	mov	r3, r0
 8009052:	2b00      	cmp	r3, #0
 8009054:	d01c      	beq.n	8009090 <HAL_SD_WriteBlocks_DMA+0x194>
    {
#if defined(SDIO_STA_STBITERR)
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 8009056:	68fb      	ldr	r3, [r7, #12]
 8009058:	681b      	ldr	r3, [r3, #0]
 800905a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800905c:	68fa      	ldr	r2, [r7, #12]
 800905e:	6812      	ldr	r2, [r2, #0]
 8009060:	f423 7306 	bic.w	r3, r3, #536	; 0x218
 8009064:	f023 0302 	bic.w	r3, r3, #2
 8009068:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
#endif /* SDIO_STA_STBITERR */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800906a:	68fb      	ldr	r3, [r7, #12]
 800906c:	681b      	ldr	r3, [r3, #0]
 800906e:	4a19      	ldr	r2, [pc, #100]	; (80090d4 <HAL_SD_WriteBlocks_DMA+0x1d8>)
 8009070:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8009072:	68fb      	ldr	r3, [r7, #12]
 8009074:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009076:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800907a:	68fb      	ldr	r3, [r7, #12]
 800907c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800907e:	68fb      	ldr	r3, [r7, #12]
 8009080:	2201      	movs	r2, #1
 8009082:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8009086:	68fb      	ldr	r3, [r7, #12]
 8009088:	2200      	movs	r2, #0
 800908a:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800908c:	2301      	movs	r3, #1
 800908e:	e018      	b.n	80090c2 <HAL_SD_WriteBlocks_DMA+0x1c6>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8009090:	f04f 33ff 	mov.w	r3, #4294967295
 8009094:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8009096:	683b      	ldr	r3, [r7, #0]
 8009098:	025b      	lsls	r3, r3, #9
 800909a:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800909c:	2390      	movs	r3, #144	; 0x90
 800909e:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 80090a0:	2300      	movs	r3, #0
 80090a2:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 80090a4:	2300      	movs	r3, #0
 80090a6:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 80090a8:	2301      	movs	r3, #1
 80090aa:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 80090ac:	68fb      	ldr	r3, [r7, #12]
 80090ae:	681b      	ldr	r3, [r3, #0]
 80090b0:	f107 0210 	add.w	r2, r7, #16
 80090b4:	4611      	mov	r1, r2
 80090b6:	4618      	mov	r0, r3
 80090b8:	f002 fcae 	bl	800ba18 <SDIO_ConfigData>

      return HAL_OK;
 80090bc:	2300      	movs	r3, #0
 80090be:	e000      	b.n	80090c2 <HAL_SD_WriteBlocks_DMA+0x1c6>
    }
  }
  else
  {
    return HAL_BUSY;
 80090c0:	2302      	movs	r3, #2
  }
}
 80090c2:	4618      	mov	r0, r3
 80090c4:	3730      	adds	r7, #48	; 0x30
 80090c6:	46bd      	mov	sp, r7
 80090c8:	bd80      	pop	{r7, pc}
 80090ca:	bf00      	nop
 80090cc:	08009911 	.word	0x08009911
 80090d0:	080099ad 	.word	0x080099ad
 80090d4:	004005ff 	.word	0x004005ff
 80090d8:	4225858c 	.word	0x4225858c

080090dc <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 80090dc:	b580      	push	{r7, lr}
 80090de:	b084      	sub	sp, #16
 80090e0:	af00      	add	r7, sp, #0
 80090e2:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80090e8:	60fb      	str	r3, [r7, #12]

  /* Check for SDIO interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	681b      	ldr	r3, [r3, #0]
 80090ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80090f0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80090f4:	2b00      	cmp	r3, #0
 80090f6:	d008      	beq.n	800910a <HAL_SD_IRQHandler+0x2e>
 80090f8:	68fb      	ldr	r3, [r7, #12]
 80090fa:	f003 0308 	and.w	r3, r3, #8
 80090fe:	2b00      	cmp	r3, #0
 8009100:	d003      	beq.n	800910a <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 8009102:	6878      	ldr	r0, [r7, #4]
 8009104:	f000 fff6 	bl	800a0f4 <SD_Read_IT>
 8009108:	e165      	b.n	80093d6 <HAL_SD_IRQHandler+0x2fa>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) != RESET)
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	681b      	ldr	r3, [r3, #0]
 800910e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009110:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009114:	2b00      	cmp	r3, #0
 8009116:	f000 808f 	beq.w	8009238 <HAL_SD_IRQHandler+0x15c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DATAEND);
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	681b      	ldr	r3, [r3, #0]
 800911e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009122:	639a      	str	r2, [r3, #56]	; 0x38

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	681b      	ldr	r3, [r3, #0]
 8009128:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800912a:	687a      	ldr	r2, [r7, #4]
 800912c:	6812      	ldr	r2, [r2, #0]
 800912e:	f423 4343 	bic.w	r3, r3, #49920	; 0xc300
 8009132:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 8009136:	63d3      	str	r3, [r2, #60]	; 0x3c
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF);
#endif /* SDIO_STA_STBITERR */

    hsd->Instance->DCTRL &= ~(SDIO_DCTRL_DTEN);
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	681b      	ldr	r3, [r3, #0]
 800913c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	681b      	ldr	r3, [r3, #0]
 8009142:	f022 0201 	bic.w	r2, r2, #1
 8009146:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 8009148:	68fb      	ldr	r3, [r7, #12]
 800914a:	f003 0308 	and.w	r3, r3, #8
 800914e:	2b00      	cmp	r3, #0
 8009150:	d039      	beq.n	80091c6 <HAL_SD_IRQHandler+0xea>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8009152:	68fb      	ldr	r3, [r7, #12]
 8009154:	f003 0302 	and.w	r3, r3, #2
 8009158:	2b00      	cmp	r3, #0
 800915a:	d104      	bne.n	8009166 <HAL_SD_IRQHandler+0x8a>
 800915c:	68fb      	ldr	r3, [r7, #12]
 800915e:	f003 0320 	and.w	r3, r3, #32
 8009162:	2b00      	cmp	r3, #0
 8009164:	d011      	beq.n	800918a <HAL_SD_IRQHandler+0xae>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	681b      	ldr	r3, [r3, #0]
 800916a:	4618      	mov	r0, r3
 800916c:	f002 fd2a 	bl	800bbc4 <SDMMC_CmdStopTransfer>
 8009170:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8009172:	68bb      	ldr	r3, [r7, #8]
 8009174:	2b00      	cmp	r3, #0
 8009176:	d008      	beq.n	800918a <HAL_SD_IRQHandler+0xae>
        {
          hsd->ErrorCode |= errorstate;
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800917c:	68bb      	ldr	r3, [r7, #8]
 800917e:	431a      	orrs	r2, r3
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 8009184:	6878      	ldr	r0, [r7, #4]
 8009186:	f000 f943 	bl	8009410 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	681b      	ldr	r3, [r3, #0]
 800918e:	f240 523a 	movw	r2, #1338	; 0x53a
 8009192:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	2201      	movs	r2, #1
 8009198:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	2200      	movs	r2, #0
 80091a0:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 80091a2:	68fb      	ldr	r3, [r7, #12]
 80091a4:	f003 0301 	and.w	r3, r3, #1
 80091a8:	2b00      	cmp	r3, #0
 80091aa:	d104      	bne.n	80091b6 <HAL_SD_IRQHandler+0xda>
 80091ac:	68fb      	ldr	r3, [r7, #12]
 80091ae:	f003 0302 	and.w	r3, r3, #2
 80091b2:	2b00      	cmp	r3, #0
 80091b4:	d003      	beq.n	80091be <HAL_SD_IRQHandler+0xe2>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 80091b6:	6878      	ldr	r0, [r7, #4]
 80091b8:	f000 f920 	bl	80093fc <HAL_SD_RxCpltCallback>
 80091bc:	e10b      	b.n	80093d6 <HAL_SD_IRQHandler+0x2fa>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 80091be:	6878      	ldr	r0, [r7, #4]
 80091c0:	f000 f912 	bl	80093e8 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 80091c4:	e107      	b.n	80093d6 <HAL_SD_IRQHandler+0x2fa>
    else if((context & SD_CONTEXT_DMA) != 0U)
 80091c6:	68fb      	ldr	r3, [r7, #12]
 80091c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80091cc:	2b00      	cmp	r3, #0
 80091ce:	f000 8102 	beq.w	80093d6 <HAL_SD_IRQHandler+0x2fa>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 80091d2:	68fb      	ldr	r3, [r7, #12]
 80091d4:	f003 0320 	and.w	r3, r3, #32
 80091d8:	2b00      	cmp	r3, #0
 80091da:	d011      	beq.n	8009200 <HAL_SD_IRQHandler+0x124>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	681b      	ldr	r3, [r3, #0]
 80091e0:	4618      	mov	r0, r3
 80091e2:	f002 fcef 	bl	800bbc4 <SDMMC_CmdStopTransfer>
 80091e6:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 80091e8:	68bb      	ldr	r3, [r7, #8]
 80091ea:	2b00      	cmp	r3, #0
 80091ec:	d008      	beq.n	8009200 <HAL_SD_IRQHandler+0x124>
          hsd->ErrorCode |= errorstate;
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80091f2:	68bb      	ldr	r3, [r7, #8]
 80091f4:	431a      	orrs	r2, r3
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 80091fa:	6878      	ldr	r0, [r7, #4]
 80091fc:	f000 f908 	bl	8009410 <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 8009200:	68fb      	ldr	r3, [r7, #12]
 8009202:	f003 0301 	and.w	r3, r3, #1
 8009206:	2b00      	cmp	r3, #0
 8009208:	f040 80e5 	bne.w	80093d6 <HAL_SD_IRQHandler+0x2fa>
 800920c:	68fb      	ldr	r3, [r7, #12]
 800920e:	f003 0302 	and.w	r3, r3, #2
 8009212:	2b00      	cmp	r3, #0
 8009214:	f040 80df 	bne.w	80093d6 <HAL_SD_IRQHandler+0x2fa>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	681b      	ldr	r3, [r3, #0]
 800921c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	681b      	ldr	r3, [r3, #0]
 8009222:	f022 0208 	bic.w	r2, r2, #8
 8009226:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	2201      	movs	r2, #1
 800922c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 8009230:	6878      	ldr	r0, [r7, #4]
 8009232:	f000 f8d9 	bl	80093e8 <HAL_SD_TxCpltCallback>
}
 8009236:	e0ce      	b.n	80093d6 <HAL_SD_IRQHandler+0x2fa>
  else if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	681b      	ldr	r3, [r3, #0]
 800923c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800923e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009242:	2b00      	cmp	r3, #0
 8009244:	d008      	beq.n	8009258 <HAL_SD_IRQHandler+0x17c>
 8009246:	68fb      	ldr	r3, [r7, #12]
 8009248:	f003 0308 	and.w	r3, r3, #8
 800924c:	2b00      	cmp	r3, #0
 800924e:	d003      	beq.n	8009258 <HAL_SD_IRQHandler+0x17c>
    SD_Write_IT(hsd);
 8009250:	6878      	ldr	r0, [r7, #4]
 8009252:	f000 ffa0 	bl	800a196 <SD_Write_IT>
 8009256:	e0be      	b.n	80093d6 <HAL_SD_IRQHandler+0x2fa>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_RXOVERR | SDIO_FLAG_TXUNDERR | SDIO_FLAG_STBITERR) != RESET)
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	681b      	ldr	r3, [r3, #0]
 800925c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800925e:	f240 233a 	movw	r3, #570	; 0x23a
 8009262:	4013      	ands	r3, r2
 8009264:	2b00      	cmp	r3, #0
 8009266:	f000 80b6 	beq.w	80093d6 <HAL_SD_IRQHandler+0x2fa>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL) != RESET)
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	681b      	ldr	r3, [r3, #0]
 800926e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009270:	f003 0302 	and.w	r3, r3, #2
 8009274:	2b00      	cmp	r3, #0
 8009276:	d005      	beq.n	8009284 <HAL_SD_IRQHandler+0x1a8>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800927c:	f043 0202 	orr.w	r2, r3, #2
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) != RESET)
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	681b      	ldr	r3, [r3, #0]
 8009288:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800928a:	f003 0308 	and.w	r3, r3, #8
 800928e:	2b00      	cmp	r3, #0
 8009290:	d005      	beq.n	800929e <HAL_SD_IRQHandler+0x1c2>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009296:	f043 0208 	orr.w	r2, r3, #8
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR) != RESET)
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	681b      	ldr	r3, [r3, #0]
 80092a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80092a4:	f003 0320 	and.w	r3, r3, #32
 80092a8:	2b00      	cmp	r3, #0
 80092aa:	d005      	beq.n	80092b8 <HAL_SD_IRQHandler+0x1dc>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80092b0:	f043 0220 	orr.w	r2, r3, #32
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR) != RESET)
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	681b      	ldr	r3, [r3, #0]
 80092bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80092be:	f003 0310 	and.w	r3, r3, #16
 80092c2:	2b00      	cmp	r3, #0
 80092c4:	d005      	beq.n	80092d2 <HAL_SD_IRQHandler+0x1f6>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80092ca:	f043 0210 	orr.w	r2, r3, #16
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR) != RESET)
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	681b      	ldr	r3, [r3, #0]
 80092d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80092d8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80092dc:	2b00      	cmp	r3, #0
 80092de:	d005      	beq.n	80092ec <HAL_SD_IRQHandler+0x210>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80092e4:	f043 0208 	orr.w	r2, r3, #8
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS | SDIO_FLAG_STBITERR);
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	681b      	ldr	r3, [r3, #0]
 80092f0:	f240 723a 	movw	r2, #1850	; 0x73a
 80092f4:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	681b      	ldr	r3, [r3, #0]
 80092fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80092fc:	687a      	ldr	r2, [r7, #4]
 80092fe:	6812      	ldr	r2, [r2, #0]
 8009300:	f423 734e 	bic.w	r3, r3, #824	; 0x338
 8009304:	f023 0302 	bic.w	r3, r3, #2
 8009308:	63d3      	str	r3, [r2, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	681b      	ldr	r3, [r3, #0]
 800930e:	4618      	mov	r0, r3
 8009310:	f002 fc58 	bl	800bbc4 <SDMMC_CmdStopTransfer>
 8009314:	4602      	mov	r2, r0
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800931a:	431a      	orrs	r2, r3
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 8009320:	68fb      	ldr	r3, [r7, #12]
 8009322:	f003 0308 	and.w	r3, r3, #8
 8009326:	2b00      	cmp	r3, #0
 8009328:	d00a      	beq.n	8009340 <HAL_SD_IRQHandler+0x264>
      hsd->State = HAL_SD_STATE_READY;
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	2201      	movs	r2, #1
 800932e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	2200      	movs	r2, #0
 8009336:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 8009338:	6878      	ldr	r0, [r7, #4]
 800933a:	f000 f869 	bl	8009410 <HAL_SD_ErrorCallback>
}
 800933e:	e04a      	b.n	80093d6 <HAL_SD_IRQHandler+0x2fa>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8009340:	68fb      	ldr	r3, [r7, #12]
 8009342:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009346:	2b00      	cmp	r3, #0
 8009348:	d045      	beq.n	80093d6 <HAL_SD_IRQHandler+0x2fa>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800934a:	68fb      	ldr	r3, [r7, #12]
 800934c:	f003 0310 	and.w	r3, r3, #16
 8009350:	2b00      	cmp	r3, #0
 8009352:	d104      	bne.n	800935e <HAL_SD_IRQHandler+0x282>
 8009354:	68fb      	ldr	r3, [r7, #12]
 8009356:	f003 0320 	and.w	r3, r3, #32
 800935a:	2b00      	cmp	r3, #0
 800935c:	d011      	beq.n	8009382 <HAL_SD_IRQHandler+0x2a6>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009362:	4a1f      	ldr	r2, [pc, #124]	; (80093e0 <HAL_SD_IRQHandler+0x304>)
 8009364:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800936a:	4618      	mov	r0, r3
 800936c:	f7fc f87a 	bl	8005464 <HAL_DMA_Abort_IT>
 8009370:	4603      	mov	r3, r0
 8009372:	2b00      	cmp	r3, #0
 8009374:	d02f      	beq.n	80093d6 <HAL_SD_IRQHandler+0x2fa>
          SD_DMATxAbort(hsd->hdmatx);
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800937a:	4618      	mov	r0, r3
 800937c:	f000 fb68 	bl	8009a50 <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8009380:	e029      	b.n	80093d6 <HAL_SD_IRQHandler+0x2fa>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8009382:	68fb      	ldr	r3, [r7, #12]
 8009384:	f003 0301 	and.w	r3, r3, #1
 8009388:	2b00      	cmp	r3, #0
 800938a:	d104      	bne.n	8009396 <HAL_SD_IRQHandler+0x2ba>
 800938c:	68fb      	ldr	r3, [r7, #12]
 800938e:	f003 0302 	and.w	r3, r3, #2
 8009392:	2b00      	cmp	r3, #0
 8009394:	d011      	beq.n	80093ba <HAL_SD_IRQHandler+0x2de>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800939a:	4a12      	ldr	r2, [pc, #72]	; (80093e4 <HAL_SD_IRQHandler+0x308>)
 800939c:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80093a2:	4618      	mov	r0, r3
 80093a4:	f7fc f85e 	bl	8005464 <HAL_DMA_Abort_IT>
 80093a8:	4603      	mov	r3, r0
 80093aa:	2b00      	cmp	r3, #0
 80093ac:	d013      	beq.n	80093d6 <HAL_SD_IRQHandler+0x2fa>
          SD_DMARxAbort(hsd->hdmarx);
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80093b2:	4618      	mov	r0, r3
 80093b4:	f000 fb83 	bl	8009abe <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 80093b8:	e00d      	b.n	80093d6 <HAL_SD_IRQHandler+0x2fa>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	2200      	movs	r2, #0
 80093be:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	2201      	movs	r2, #1
 80093c4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	2200      	movs	r2, #0
 80093cc:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 80093ce:	6878      	ldr	r0, [r7, #4]
 80093d0:	f000 f828 	bl	8009424 <HAL_SD_AbortCallback>
}
 80093d4:	e7ff      	b.n	80093d6 <HAL_SD_IRQHandler+0x2fa>
 80093d6:	bf00      	nop
 80093d8:	3710      	adds	r7, #16
 80093da:	46bd      	mov	sp, r7
 80093dc:	bd80      	pop	{r7, pc}
 80093de:	bf00      	nop
 80093e0:	08009a51 	.word	0x08009a51
 80093e4:	08009abf 	.word	0x08009abf

080093e8 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: Pointer to SD handle
  * @retval None
  */
__weak void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 80093e8:	b480      	push	{r7}
 80093ea:	b083      	sub	sp, #12
 80093ec:	af00      	add	r7, sp, #0
 80093ee:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_TxCpltCallback can be implemented in the user file
   */
}
 80093f0:	bf00      	nop
 80093f2:	370c      	adds	r7, #12
 80093f4:	46bd      	mov	sp, r7
 80093f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093fa:	4770      	bx	lr

080093fc <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 80093fc:	b480      	push	{r7}
 80093fe:	b083      	sub	sp, #12
 8009400:	af00      	add	r7, sp, #0
 8009402:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_RxCpltCallback can be implemented in the user file
   */
}
 8009404:	bf00      	nop
 8009406:	370c      	adds	r7, #12
 8009408:	46bd      	mov	sp, r7
 800940a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800940e:	4770      	bx	lr

08009410 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8009410:	b480      	push	{r7}
 8009412:	b083      	sub	sp, #12
 8009414:	af00      	add	r7, sp, #0
 8009416:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 8009418:	bf00      	nop
 800941a:	370c      	adds	r7, #12
 800941c:	46bd      	mov	sp, r7
 800941e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009422:	4770      	bx	lr

08009424 <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 8009424:	b480      	push	{r7}
 8009426:	b083      	sub	sp, #12
 8009428:	af00      	add	r7, sp, #0
 800942a:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_AbortCallback can be implemented in the user file
   */
}
 800942c:	bf00      	nop
 800942e:	370c      	adds	r7, #12
 8009430:	46bd      	mov	sp, r7
 8009432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009436:	4770      	bx	lr

08009438 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8009438:	b480      	push	{r7}
 800943a:	b083      	sub	sp, #12
 800943c:	af00      	add	r7, sp, #0
 800943e:	6078      	str	r0, [r7, #4]
 8009440:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009446:	0f9b      	lsrs	r3, r3, #30
 8009448:	b2da      	uxtb	r2, r3
 800944a:	683b      	ldr	r3, [r7, #0]
 800944c:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009452:	0e9b      	lsrs	r3, r3, #26
 8009454:	b2db      	uxtb	r3, r3
 8009456:	f003 030f 	and.w	r3, r3, #15
 800945a:	b2da      	uxtb	r2, r3
 800945c:	683b      	ldr	r3, [r7, #0]
 800945e:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009464:	0e1b      	lsrs	r3, r3, #24
 8009466:	b2db      	uxtb	r3, r3
 8009468:	f003 0303 	and.w	r3, r3, #3
 800946c:	b2da      	uxtb	r2, r3
 800946e:	683b      	ldr	r3, [r7, #0]
 8009470:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009476:	0c1b      	lsrs	r3, r3, #16
 8009478:	b2da      	uxtb	r2, r3
 800947a:	683b      	ldr	r3, [r7, #0]
 800947c:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009482:	0a1b      	lsrs	r3, r3, #8
 8009484:	b2da      	uxtb	r2, r3
 8009486:	683b      	ldr	r3, [r7, #0]
 8009488:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800948e:	b2da      	uxtb	r2, r3
 8009490:	683b      	ldr	r3, [r7, #0]
 8009492:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009498:	0d1b      	lsrs	r3, r3, #20
 800949a:	b29a      	uxth	r2, r3
 800949c:	683b      	ldr	r3, [r7, #0]
 800949e:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80094a4:	0c1b      	lsrs	r3, r3, #16
 80094a6:	b2db      	uxtb	r3, r3
 80094a8:	f003 030f 	and.w	r3, r3, #15
 80094ac:	b2da      	uxtb	r2, r3
 80094ae:	683b      	ldr	r3, [r7, #0]
 80094b0:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80094b6:	0bdb      	lsrs	r3, r3, #15
 80094b8:	b2db      	uxtb	r3, r3
 80094ba:	f003 0301 	and.w	r3, r3, #1
 80094be:	b2da      	uxtb	r2, r3
 80094c0:	683b      	ldr	r3, [r7, #0]
 80094c2:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80094c8:	0b9b      	lsrs	r3, r3, #14
 80094ca:	b2db      	uxtb	r3, r3
 80094cc:	f003 0301 	and.w	r3, r3, #1
 80094d0:	b2da      	uxtb	r2, r3
 80094d2:	683b      	ldr	r3, [r7, #0]
 80094d4:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80094da:	0b5b      	lsrs	r3, r3, #13
 80094dc:	b2db      	uxtb	r3, r3
 80094de:	f003 0301 	and.w	r3, r3, #1
 80094e2:	b2da      	uxtb	r2, r3
 80094e4:	683b      	ldr	r3, [r7, #0]
 80094e6:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80094ec:	0b1b      	lsrs	r3, r3, #12
 80094ee:	b2db      	uxtb	r3, r3
 80094f0:	f003 0301 	and.w	r3, r3, #1
 80094f4:	b2da      	uxtb	r2, r3
 80094f6:	683b      	ldr	r3, [r7, #0]
 80094f8:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 80094fa:	683b      	ldr	r3, [r7, #0]
 80094fc:	2200      	movs	r2, #0
 80094fe:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009504:	2b00      	cmp	r3, #0
 8009506:	d163      	bne.n	80095d0 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800950c:	009a      	lsls	r2, r3, #2
 800950e:	f640 73fc 	movw	r3, #4092	; 0xffc
 8009512:	4013      	ands	r3, r2
 8009514:	687a      	ldr	r2, [r7, #4]
 8009516:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8009518:	0f92      	lsrs	r2, r2, #30
 800951a:	431a      	orrs	r2, r3
 800951c:	683b      	ldr	r3, [r7, #0]
 800951e:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009524:	0edb      	lsrs	r3, r3, #27
 8009526:	b2db      	uxtb	r3, r3
 8009528:	f003 0307 	and.w	r3, r3, #7
 800952c:	b2da      	uxtb	r2, r3
 800952e:	683b      	ldr	r3, [r7, #0]
 8009530:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009536:	0e1b      	lsrs	r3, r3, #24
 8009538:	b2db      	uxtb	r3, r3
 800953a:	f003 0307 	and.w	r3, r3, #7
 800953e:	b2da      	uxtb	r2, r3
 8009540:	683b      	ldr	r3, [r7, #0]
 8009542:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009548:	0d5b      	lsrs	r3, r3, #21
 800954a:	b2db      	uxtb	r3, r3
 800954c:	f003 0307 	and.w	r3, r3, #7
 8009550:	b2da      	uxtb	r2, r3
 8009552:	683b      	ldr	r3, [r7, #0]
 8009554:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800955a:	0c9b      	lsrs	r3, r3, #18
 800955c:	b2db      	uxtb	r3, r3
 800955e:	f003 0307 	and.w	r3, r3, #7
 8009562:	b2da      	uxtb	r2, r3
 8009564:	683b      	ldr	r3, [r7, #0]
 8009566:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800956c:	0bdb      	lsrs	r3, r3, #15
 800956e:	b2db      	uxtb	r3, r3
 8009570:	f003 0307 	and.w	r3, r3, #7
 8009574:	b2da      	uxtb	r2, r3
 8009576:	683b      	ldr	r3, [r7, #0]
 8009578:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800957a:	683b      	ldr	r3, [r7, #0]
 800957c:	691b      	ldr	r3, [r3, #16]
 800957e:	1c5a      	adds	r2, r3, #1
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8009584:	683b      	ldr	r3, [r7, #0]
 8009586:	7e1b      	ldrb	r3, [r3, #24]
 8009588:	b2db      	uxtb	r3, r3
 800958a:	f003 0307 	and.w	r3, r3, #7
 800958e:	3302      	adds	r3, #2
 8009590:	2201      	movs	r2, #1
 8009592:	fa02 f303 	lsl.w	r3, r2, r3
 8009596:	687a      	ldr	r2, [r7, #4]
 8009598:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800959a:	fb02 f203 	mul.w	r2, r2, r3
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 80095a2:	683b      	ldr	r3, [r7, #0]
 80095a4:	7a1b      	ldrb	r3, [r3, #8]
 80095a6:	b2db      	uxtb	r3, r3
 80095a8:	f003 030f 	and.w	r3, r3, #15
 80095ac:	2201      	movs	r2, #1
 80095ae:	409a      	lsls	r2, r3
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80095b8:	687a      	ldr	r2, [r7, #4]
 80095ba:	6d92      	ldr	r2, [r2, #88]	; 0x58
 80095bc:	0a52      	lsrs	r2, r2, #9
 80095be:	fb02 f203 	mul.w	r2, r2, r3
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80095cc:	661a      	str	r2, [r3, #96]	; 0x60
 80095ce:	e031      	b.n	8009634 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80095d4:	2b01      	cmp	r3, #1
 80095d6:	d11d      	bne.n	8009614 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80095dc:	041b      	lsls	r3, r3, #16
 80095de:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80095e6:	0c1b      	lsrs	r3, r3, #16
 80095e8:	431a      	orrs	r2, r3
 80095ea:	683b      	ldr	r3, [r7, #0]
 80095ec:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 80095ee:	683b      	ldr	r3, [r7, #0]
 80095f0:	691b      	ldr	r3, [r3, #16]
 80095f2:	3301      	adds	r3, #1
 80095f4:	029a      	lsls	r2, r3, #10
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009608:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	661a      	str	r2, [r3, #96]	; 0x60
 8009612:	e00f      	b.n	8009634 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	681b      	ldr	r3, [r3, #0]
 8009618:	4a58      	ldr	r2, [pc, #352]	; (800977c <HAL_SD_GetCardCSD+0x344>)
 800961a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009620:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	2201      	movs	r2, #1
 800962c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8009630:	2301      	movs	r3, #1
 8009632:	e09d      	b.n	8009770 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009638:	0b9b      	lsrs	r3, r3, #14
 800963a:	b2db      	uxtb	r3, r3
 800963c:	f003 0301 	and.w	r3, r3, #1
 8009640:	b2da      	uxtb	r2, r3
 8009642:	683b      	ldr	r3, [r7, #0]
 8009644:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800964a:	09db      	lsrs	r3, r3, #7
 800964c:	b2db      	uxtb	r3, r3
 800964e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009652:	b2da      	uxtb	r2, r3
 8009654:	683b      	ldr	r3, [r7, #0]
 8009656:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800965c:	b2db      	uxtb	r3, r3
 800965e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009662:	b2da      	uxtb	r2, r3
 8009664:	683b      	ldr	r3, [r7, #0]
 8009666:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800966c:	0fdb      	lsrs	r3, r3, #31
 800966e:	b2da      	uxtb	r2, r3
 8009670:	683b      	ldr	r3, [r7, #0]
 8009672:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009678:	0f5b      	lsrs	r3, r3, #29
 800967a:	b2db      	uxtb	r3, r3
 800967c:	f003 0303 	and.w	r3, r3, #3
 8009680:	b2da      	uxtb	r2, r3
 8009682:	683b      	ldr	r3, [r7, #0]
 8009684:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800968a:	0e9b      	lsrs	r3, r3, #26
 800968c:	b2db      	uxtb	r3, r3
 800968e:	f003 0307 	and.w	r3, r3, #7
 8009692:	b2da      	uxtb	r2, r3
 8009694:	683b      	ldr	r3, [r7, #0]
 8009696:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800969c:	0d9b      	lsrs	r3, r3, #22
 800969e:	b2db      	uxtb	r3, r3
 80096a0:	f003 030f 	and.w	r3, r3, #15
 80096a4:	b2da      	uxtb	r2, r3
 80096a6:	683b      	ldr	r3, [r7, #0]
 80096a8:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80096ae:	0d5b      	lsrs	r3, r3, #21
 80096b0:	b2db      	uxtb	r3, r3
 80096b2:	f003 0301 	and.w	r3, r3, #1
 80096b6:	b2da      	uxtb	r2, r3
 80096b8:	683b      	ldr	r3, [r7, #0]
 80096ba:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 80096be:	683b      	ldr	r3, [r7, #0]
 80096c0:	2200      	movs	r2, #0
 80096c2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80096ca:	0c1b      	lsrs	r3, r3, #16
 80096cc:	b2db      	uxtb	r3, r3
 80096ce:	f003 0301 	and.w	r3, r3, #1
 80096d2:	b2da      	uxtb	r2, r3
 80096d4:	683b      	ldr	r3, [r7, #0]
 80096d6:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80096de:	0bdb      	lsrs	r3, r3, #15
 80096e0:	b2db      	uxtb	r3, r3
 80096e2:	f003 0301 	and.w	r3, r3, #1
 80096e6:	b2da      	uxtb	r2, r3
 80096e8:	683b      	ldr	r3, [r7, #0]
 80096ea:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80096f2:	0b9b      	lsrs	r3, r3, #14
 80096f4:	b2db      	uxtb	r3, r3
 80096f6:	f003 0301 	and.w	r3, r3, #1
 80096fa:	b2da      	uxtb	r2, r3
 80096fc:	683b      	ldr	r3, [r7, #0]
 80096fe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009706:	0b5b      	lsrs	r3, r3, #13
 8009708:	b2db      	uxtb	r3, r3
 800970a:	f003 0301 	and.w	r3, r3, #1
 800970e:	b2da      	uxtb	r2, r3
 8009710:	683b      	ldr	r3, [r7, #0]
 8009712:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800971a:	0b1b      	lsrs	r3, r3, #12
 800971c:	b2db      	uxtb	r3, r3
 800971e:	f003 0301 	and.w	r3, r3, #1
 8009722:	b2da      	uxtb	r2, r3
 8009724:	683b      	ldr	r3, [r7, #0]
 8009726:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800972e:	0a9b      	lsrs	r3, r3, #10
 8009730:	b2db      	uxtb	r3, r3
 8009732:	f003 0303 	and.w	r3, r3, #3
 8009736:	b2da      	uxtb	r2, r3
 8009738:	683b      	ldr	r3, [r7, #0]
 800973a:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009742:	0a1b      	lsrs	r3, r3, #8
 8009744:	b2db      	uxtb	r3, r3
 8009746:	f003 0303 	and.w	r3, r3, #3
 800974a:	b2da      	uxtb	r2, r3
 800974c:	683b      	ldr	r3, [r7, #0]
 800974e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009756:	085b      	lsrs	r3, r3, #1
 8009758:	b2db      	uxtb	r3, r3
 800975a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800975e:	b2da      	uxtb	r2, r3
 8009760:	683b      	ldr	r3, [r7, #0]
 8009762:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 8009766:	683b      	ldr	r3, [r7, #0]
 8009768:	2201      	movs	r2, #1
 800976a:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800976e:	2300      	movs	r3, #0
}
 8009770:	4618      	mov	r0, r3
 8009772:	370c      	adds	r7, #12
 8009774:	46bd      	mov	sp, r7
 8009776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800977a:	4770      	bx	lr
 800977c:	004005ff 	.word	0x004005ff

08009780 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8009780:	b480      	push	{r7}
 8009782:	b083      	sub	sp, #12
 8009784:	af00      	add	r7, sp, #0
 8009786:	6078      	str	r0, [r7, #4]
 8009788:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800978e:	683b      	ldr	r3, [r7, #0]
 8009790:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8009796:	683b      	ldr	r3, [r7, #0]
 8009798:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800979e:	683b      	ldr	r3, [r7, #0]
 80097a0:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80097a6:	683b      	ldr	r3, [r7, #0]
 80097a8:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80097ae:	683b      	ldr	r3, [r7, #0]
 80097b0:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80097b6:	683b      	ldr	r3, [r7, #0]
 80097b8:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80097be:	683b      	ldr	r3, [r7, #0]
 80097c0:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80097c6:	683b      	ldr	r3, [r7, #0]
 80097c8:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 80097ca:	2300      	movs	r3, #0
}
 80097cc:	4618      	mov	r0, r3
 80097ce:	370c      	adds	r7, #12
 80097d0:	46bd      	mov	sp, r7
 80097d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097d6:	4770      	bx	lr

080097d8 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 80097d8:	b5b0      	push	{r4, r5, r7, lr}
 80097da:	b08e      	sub	sp, #56	; 0x38
 80097dc:	af04      	add	r7, sp, #16
 80097de:	6078      	str	r0, [r7, #4]
 80097e0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	2203      	movs	r2, #3
 80097e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80097ee:	2b03      	cmp	r3, #3
 80097f0:	d02e      	beq.n	8009850 <HAL_SD_ConfigWideBusOperation+0x78>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 80097f2:	683b      	ldr	r3, [r7, #0]
 80097f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80097f8:	d106      	bne.n	8009808 <HAL_SD_ConfigWideBusOperation+0x30>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80097fe:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	639a      	str	r2, [r3, #56]	; 0x38
 8009806:	e029      	b.n	800985c <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 8009808:	683b      	ldr	r3, [r7, #0]
 800980a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800980e:	d10a      	bne.n	8009826 <HAL_SD_ConfigWideBusOperation+0x4e>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8009810:	6878      	ldr	r0, [r7, #4]
 8009812:	f000 fb0f 	bl	8009e34 <SD_WideBus_Enable>
 8009816:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800981c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800981e:	431a      	orrs	r2, r3
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	639a      	str	r2, [r3, #56]	; 0x38
 8009824:	e01a      	b.n	800985c <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 8009826:	683b      	ldr	r3, [r7, #0]
 8009828:	2b00      	cmp	r3, #0
 800982a:	d10a      	bne.n	8009842 <HAL_SD_ConfigWideBusOperation+0x6a>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800982c:	6878      	ldr	r0, [r7, #4]
 800982e:	f000 fb4c 	bl	8009eca <SD_WideBus_Disable>
 8009832:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009838:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800983a:	431a      	orrs	r2, r3
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	639a      	str	r2, [r3, #56]	; 0x38
 8009840:	e00c      	b.n	800985c <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009846:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	639a      	str	r2, [r3, #56]	; 0x38
 800984e:	e005      	b.n	800985c <HAL_SD_ConfigWideBusOperation+0x84>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009854:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009860:	2b00      	cmp	r3, #0
 8009862:	d009      	beq.n	8009878 <HAL_SD_ConfigWideBusOperation+0xa0>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	681b      	ldr	r3, [r3, #0]
 8009868:	4a18      	ldr	r2, [pc, #96]	; (80098cc <HAL_SD_ConfigWideBusOperation+0xf4>)
 800986a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	2201      	movs	r2, #1
 8009870:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8009874:	2301      	movs	r3, #1
 8009876:	e024      	b.n	80098c2 <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	685b      	ldr	r3, [r3, #4]
 800987c:	60fb      	str	r3, [r7, #12]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	689b      	ldr	r3, [r3, #8]
 8009882:	613b      	str	r3, [r7, #16]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	68db      	ldr	r3, [r3, #12]
 8009888:	617b      	str	r3, [r7, #20]
    Init.BusWide             = WideMode;
 800988a:	683b      	ldr	r3, [r7, #0]
 800988c:	61bb      	str	r3, [r7, #24]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	695b      	ldr	r3, [r3, #20]
 8009892:	61fb      	str	r3, [r7, #28]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	699b      	ldr	r3, [r3, #24]
 8009898:	623b      	str	r3, [r7, #32]
    (void)SDIO_Init(hsd->Instance, Init);
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	681d      	ldr	r5, [r3, #0]
 800989e:	466c      	mov	r4, sp
 80098a0:	f107 0318 	add.w	r3, r7, #24
 80098a4:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80098a8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80098ac:	f107 030c 	add.w	r3, r7, #12
 80098b0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80098b2:	4628      	mov	r0, r5
 80098b4:	f002 f800 	bl	800b8b8 <SDIO_Init>
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	2201      	movs	r2, #1
 80098bc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80098c0:	2300      	movs	r3, #0
}
 80098c2:	4618      	mov	r0, r3
 80098c4:	3728      	adds	r7, #40	; 0x28
 80098c6:	46bd      	mov	sp, r7
 80098c8:	bdb0      	pop	{r4, r5, r7, pc}
 80098ca:	bf00      	nop
 80098cc:	004005ff 	.word	0x004005ff

080098d0 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 80098d0:	b580      	push	{r7, lr}
 80098d2:	b086      	sub	sp, #24
 80098d4:	af00      	add	r7, sp, #0
 80098d6:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 80098d8:	2300      	movs	r3, #0
 80098da:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 80098dc:	f107 030c 	add.w	r3, r7, #12
 80098e0:	4619      	mov	r1, r3
 80098e2:	6878      	ldr	r0, [r7, #4]
 80098e4:	f000 fa7e 	bl	8009de4 <SD_SendStatus>
 80098e8:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80098ea:	697b      	ldr	r3, [r7, #20]
 80098ec:	2b00      	cmp	r3, #0
 80098ee:	d005      	beq.n	80098fc <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80098f4:	697b      	ldr	r3, [r7, #20]
 80098f6:	431a      	orrs	r2, r3
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 80098fc:	68fb      	ldr	r3, [r7, #12]
 80098fe:	0a5b      	lsrs	r3, r3, #9
 8009900:	f003 030f 	and.w	r3, r3, #15
 8009904:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8009906:	693b      	ldr	r3, [r7, #16]
}
 8009908:	4618      	mov	r0, r3
 800990a:	3718      	adds	r7, #24
 800990c:	46bd      	mov	sp, r7
 800990e:	bd80      	pop	{r7, pc}

08009910 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8009910:	b480      	push	{r7}
 8009912:	b085      	sub	sp, #20
 8009914:	af00      	add	r7, sp, #0
 8009916:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800991c:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DATAEND));
 800991e:	68fb      	ldr	r3, [r7, #12]
 8009920:	681b      	ldr	r3, [r3, #0]
 8009922:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009924:	68fb      	ldr	r3, [r7, #12]
 8009926:	681b      	ldr	r3, [r3, #0]
 8009928:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800992c:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800992e:	bf00      	nop
 8009930:	3714      	adds	r7, #20
 8009932:	46bd      	mov	sp, r7
 8009934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009938:	4770      	bx	lr

0800993a <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800993a:	b580      	push	{r7, lr}
 800993c:	b084      	sub	sp, #16
 800993e:	af00      	add	r7, sp, #0
 8009940:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009946:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 8009948:	68fb      	ldr	r3, [r7, #12]
 800994a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800994c:	2b82      	cmp	r3, #130	; 0x82
 800994e:	d111      	bne.n	8009974 <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8009950:	68fb      	ldr	r3, [r7, #12]
 8009952:	681b      	ldr	r3, [r3, #0]
 8009954:	4618      	mov	r0, r3
 8009956:	f002 f935 	bl	800bbc4 <SDMMC_CmdStopTransfer>
 800995a:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 800995c:	68bb      	ldr	r3, [r7, #8]
 800995e:	2b00      	cmp	r3, #0
 8009960:	d008      	beq.n	8009974 <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 8009962:	68fb      	ldr	r3, [r7, #12]
 8009964:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009966:	68bb      	ldr	r3, [r7, #8]
 8009968:	431a      	orrs	r2, r3
 800996a:	68fb      	ldr	r3, [r7, #12]
 800996c:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 800996e:	68f8      	ldr	r0, [r7, #12]
 8009970:	f7ff fd4e 	bl	8009410 <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 8009974:	68fb      	ldr	r3, [r7, #12]
 8009976:	681b      	ldr	r3, [r3, #0]
 8009978:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800997a:	68fb      	ldr	r3, [r7, #12]
 800997c:	681b      	ldr	r3, [r3, #0]
 800997e:	f022 0208 	bic.w	r2, r2, #8
 8009982:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8009984:	68fb      	ldr	r3, [r7, #12]
 8009986:	681b      	ldr	r3, [r3, #0]
 8009988:	f240 523a 	movw	r2, #1338	; 0x53a
 800998c:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 800998e:	68fb      	ldr	r3, [r7, #12]
 8009990:	2201      	movs	r2, #1
 8009992:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8009996:	68fb      	ldr	r3, [r7, #12]
 8009998:	2200      	movs	r2, #0
 800999a:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 800999c:	68f8      	ldr	r0, [r7, #12]
 800999e:	f7ff fd2d 	bl	80093fc <HAL_SD_RxCpltCallback>
#endif
}
 80099a2:	bf00      	nop
 80099a4:	3710      	adds	r7, #16
 80099a6:	46bd      	mov	sp, r7
 80099a8:	bd80      	pop	{r7, pc}
	...

080099ac <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 80099ac:	b580      	push	{r7, lr}
 80099ae:	b086      	sub	sp, #24
 80099b0:	af00      	add	r7, sp, #0
 80099b2:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80099b8:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 80099ba:	6878      	ldr	r0, [r7, #4]
 80099bc:	f7fb fefe 	bl	80057bc <HAL_DMA_GetError>
 80099c0:	4603      	mov	r3, r0
 80099c2:	2b02      	cmp	r3, #2
 80099c4:	d03e      	beq.n	8009a44 <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 80099c6:	697b      	ldr	r3, [r7, #20]
 80099c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80099ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80099cc:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 80099ce:	697b      	ldr	r3, [r7, #20]
 80099d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80099d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80099d4:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 80099d6:	693b      	ldr	r3, [r7, #16]
 80099d8:	2b01      	cmp	r3, #1
 80099da:	d002      	beq.n	80099e2 <SD_DMAError+0x36>
 80099dc:	68fb      	ldr	r3, [r7, #12]
 80099de:	2b01      	cmp	r3, #1
 80099e0:	d12d      	bne.n	8009a3e <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80099e2:	697b      	ldr	r3, [r7, #20]
 80099e4:	681b      	ldr	r3, [r3, #0]
 80099e6:	4a19      	ldr	r2, [pc, #100]	; (8009a4c <SD_DMAError+0xa0>)
 80099e8:	639a      	str	r2, [r3, #56]	; 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 80099ea:	697b      	ldr	r3, [r7, #20]
 80099ec:	681b      	ldr	r3, [r3, #0]
 80099ee:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80099f0:	697b      	ldr	r3, [r7, #20]
 80099f2:	681b      	ldr	r3, [r3, #0]
 80099f4:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 80099f8:	63da      	str	r2, [r3, #60]	; 0x3c
        SDIO_IT_TXUNDERR| SDIO_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 80099fa:	697b      	ldr	r3, [r7, #20]
 80099fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80099fe:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8009a02:	697b      	ldr	r3, [r7, #20]
 8009a04:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 8009a06:	6978      	ldr	r0, [r7, #20]
 8009a08:	f7ff ff62 	bl	80098d0 <HAL_SD_GetCardState>
 8009a0c:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8009a0e:	68bb      	ldr	r3, [r7, #8]
 8009a10:	2b06      	cmp	r3, #6
 8009a12:	d002      	beq.n	8009a1a <SD_DMAError+0x6e>
 8009a14:	68bb      	ldr	r3, [r7, #8]
 8009a16:	2b05      	cmp	r3, #5
 8009a18:	d10a      	bne.n	8009a30 <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8009a1a:	697b      	ldr	r3, [r7, #20]
 8009a1c:	681b      	ldr	r3, [r3, #0]
 8009a1e:	4618      	mov	r0, r3
 8009a20:	f002 f8d0 	bl	800bbc4 <SDMMC_CmdStopTransfer>
 8009a24:	4602      	mov	r2, r0
 8009a26:	697b      	ldr	r3, [r7, #20]
 8009a28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a2a:	431a      	orrs	r2, r3
 8009a2c:	697b      	ldr	r3, [r7, #20]
 8009a2e:	639a      	str	r2, [r3, #56]	; 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 8009a30:	697b      	ldr	r3, [r7, #20]
 8009a32:	2201      	movs	r2, #1
 8009a34:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8009a38:	697b      	ldr	r3, [r7, #20]
 8009a3a:	2200      	movs	r2, #0
 8009a3c:	631a      	str	r2, [r3, #48]	; 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 8009a3e:	6978      	ldr	r0, [r7, #20]
 8009a40:	f7ff fce6 	bl	8009410 <HAL_SD_ErrorCallback>
#endif
  }
}
 8009a44:	bf00      	nop
 8009a46:	3718      	adds	r7, #24
 8009a48:	46bd      	mov	sp, r7
 8009a4a:	bd80      	pop	{r7, pc}
 8009a4c:	004005ff 	.word	0x004005ff

08009a50 <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 8009a50:	b580      	push	{r7, lr}
 8009a52:	b084      	sub	sp, #16
 8009a54:	af00      	add	r7, sp, #0
 8009a56:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a5c:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8009a5e:	68fb      	ldr	r3, [r7, #12]
 8009a60:	681b      	ldr	r3, [r3, #0]
 8009a62:	f240 523a 	movw	r2, #1338	; 0x53a
 8009a66:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8009a68:	68f8      	ldr	r0, [r7, #12]
 8009a6a:	f7ff ff31 	bl	80098d0 <HAL_SD_GetCardState>
 8009a6e:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8009a70:	68fb      	ldr	r3, [r7, #12]
 8009a72:	2201      	movs	r2, #1
 8009a74:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8009a78:	68fb      	ldr	r3, [r7, #12]
 8009a7a:	2200      	movs	r2, #0
 8009a7c:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8009a7e:	68bb      	ldr	r3, [r7, #8]
 8009a80:	2b06      	cmp	r3, #6
 8009a82:	d002      	beq.n	8009a8a <SD_DMATxAbort+0x3a>
 8009a84:	68bb      	ldr	r3, [r7, #8]
 8009a86:	2b05      	cmp	r3, #5
 8009a88:	d10a      	bne.n	8009aa0 <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8009a8a:	68fb      	ldr	r3, [r7, #12]
 8009a8c:	681b      	ldr	r3, [r3, #0]
 8009a8e:	4618      	mov	r0, r3
 8009a90:	f002 f898 	bl	800bbc4 <SDMMC_CmdStopTransfer>
 8009a94:	4602      	mov	r2, r0
 8009a96:	68fb      	ldr	r3, [r7, #12]
 8009a98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a9a:	431a      	orrs	r2, r3
 8009a9c:	68fb      	ldr	r3, [r7, #12]
 8009a9e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8009aa0:	68fb      	ldr	r3, [r7, #12]
 8009aa2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009aa4:	2b00      	cmp	r3, #0
 8009aa6:	d103      	bne.n	8009ab0 <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8009aa8:	68f8      	ldr	r0, [r7, #12]
 8009aaa:	f7ff fcbb 	bl	8009424 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8009aae:	e002      	b.n	8009ab6 <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8009ab0:	68f8      	ldr	r0, [r7, #12]
 8009ab2:	f7ff fcad 	bl	8009410 <HAL_SD_ErrorCallback>
}
 8009ab6:	bf00      	nop
 8009ab8:	3710      	adds	r7, #16
 8009aba:	46bd      	mov	sp, r7
 8009abc:	bd80      	pop	{r7, pc}

08009abe <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 8009abe:	b580      	push	{r7, lr}
 8009ac0:	b084      	sub	sp, #16
 8009ac2:	af00      	add	r7, sp, #0
 8009ac4:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009aca:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8009acc:	68fb      	ldr	r3, [r7, #12]
 8009ace:	681b      	ldr	r3, [r3, #0]
 8009ad0:	f240 523a 	movw	r2, #1338	; 0x53a
 8009ad4:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8009ad6:	68f8      	ldr	r0, [r7, #12]
 8009ad8:	f7ff fefa 	bl	80098d0 <HAL_SD_GetCardState>
 8009adc:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8009ade:	68fb      	ldr	r3, [r7, #12]
 8009ae0:	2201      	movs	r2, #1
 8009ae2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8009ae6:	68fb      	ldr	r3, [r7, #12]
 8009ae8:	2200      	movs	r2, #0
 8009aea:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8009aec:	68bb      	ldr	r3, [r7, #8]
 8009aee:	2b06      	cmp	r3, #6
 8009af0:	d002      	beq.n	8009af8 <SD_DMARxAbort+0x3a>
 8009af2:	68bb      	ldr	r3, [r7, #8]
 8009af4:	2b05      	cmp	r3, #5
 8009af6:	d10a      	bne.n	8009b0e <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8009af8:	68fb      	ldr	r3, [r7, #12]
 8009afa:	681b      	ldr	r3, [r3, #0]
 8009afc:	4618      	mov	r0, r3
 8009afe:	f002 f861 	bl	800bbc4 <SDMMC_CmdStopTransfer>
 8009b02:	4602      	mov	r2, r0
 8009b04:	68fb      	ldr	r3, [r7, #12]
 8009b06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b08:	431a      	orrs	r2, r3
 8009b0a:	68fb      	ldr	r3, [r7, #12]
 8009b0c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8009b0e:	68fb      	ldr	r3, [r7, #12]
 8009b10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b12:	2b00      	cmp	r3, #0
 8009b14:	d103      	bne.n	8009b1e <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8009b16:	68f8      	ldr	r0, [r7, #12]
 8009b18:	f7ff fc84 	bl	8009424 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8009b1c:	e002      	b.n	8009b24 <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8009b1e:	68f8      	ldr	r0, [r7, #12]
 8009b20:	f7ff fc76 	bl	8009410 <HAL_SD_ErrorCallback>
}
 8009b24:	bf00      	nop
 8009b26:	3710      	adds	r7, #16
 8009b28:	46bd      	mov	sp, r7
 8009b2a:	bd80      	pop	{r7, pc}

08009b2c <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8009b2c:	b5b0      	push	{r4, r5, r7, lr}
 8009b2e:	b094      	sub	sp, #80	; 0x50
 8009b30:	af04      	add	r7, sp, #16
 8009b32:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8009b34:	2301      	movs	r3, #1
 8009b36:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	681b      	ldr	r3, [r3, #0]
 8009b3c:	4618      	mov	r0, r3
 8009b3e:	f001 ff13 	bl	800b968 <SDIO_GetPowerState>
 8009b42:	4603      	mov	r3, r0
 8009b44:	2b00      	cmp	r3, #0
 8009b46:	d102      	bne.n	8009b4e <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8009b48:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8009b4c:	e0b7      	b.n	8009cbe <SD_InitCard+0x192>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009b52:	2b03      	cmp	r3, #3
 8009b54:	d02f      	beq.n	8009bb6 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	681b      	ldr	r3, [r3, #0]
 8009b5a:	4618      	mov	r0, r3
 8009b5c:	f002 f93c 	bl	800bdd8 <SDMMC_CmdSendCID>
 8009b60:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8009b62:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009b64:	2b00      	cmp	r3, #0
 8009b66:	d001      	beq.n	8009b6c <SD_InitCard+0x40>
    {
      return errorstate;
 8009b68:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009b6a:	e0a8      	b.n	8009cbe <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	681b      	ldr	r3, [r3, #0]
 8009b70:	2100      	movs	r1, #0
 8009b72:	4618      	mov	r0, r3
 8009b74:	f001 ff3d 	bl	800b9f2 <SDIO_GetResponse>
 8009b78:	4602      	mov	r2, r0
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	681b      	ldr	r3, [r3, #0]
 8009b82:	2104      	movs	r1, #4
 8009b84:	4618      	mov	r0, r3
 8009b86:	f001 ff34 	bl	800b9f2 <SDIO_GetResponse>
 8009b8a:	4602      	mov	r2, r0
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	681b      	ldr	r3, [r3, #0]
 8009b94:	2108      	movs	r1, #8
 8009b96:	4618      	mov	r0, r3
 8009b98:	f001 ff2b 	bl	800b9f2 <SDIO_GetResponse>
 8009b9c:	4602      	mov	r2, r0
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	681b      	ldr	r3, [r3, #0]
 8009ba6:	210c      	movs	r1, #12
 8009ba8:	4618      	mov	r0, r3
 8009baa:	f001 ff22 	bl	800b9f2 <SDIO_GetResponse>
 8009bae:	4602      	mov	r2, r0
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009bba:	2b03      	cmp	r3, #3
 8009bbc:	d00d      	beq.n	8009bda <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	681b      	ldr	r3, [r3, #0]
 8009bc2:	f107 020e 	add.w	r2, r7, #14
 8009bc6:	4611      	mov	r1, r2
 8009bc8:	4618      	mov	r0, r3
 8009bca:	f002 f942 	bl	800be52 <SDMMC_CmdSetRelAdd>
 8009bce:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8009bd0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009bd2:	2b00      	cmp	r3, #0
 8009bd4:	d001      	beq.n	8009bda <SD_InitCard+0xae>
    {
      return errorstate;
 8009bd6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009bd8:	e071      	b.n	8009cbe <SD_InitCard+0x192>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009bde:	2b03      	cmp	r3, #3
 8009be0:	d036      	beq.n	8009c50 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8009be2:	89fb      	ldrh	r3, [r7, #14]
 8009be4:	461a      	mov	r2, r3
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	681a      	ldr	r2, [r3, #0]
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009bf2:	041b      	lsls	r3, r3, #16
 8009bf4:	4619      	mov	r1, r3
 8009bf6:	4610      	mov	r0, r2
 8009bf8:	f002 f90c 	bl	800be14 <SDMMC_CmdSendCSD>
 8009bfc:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8009bfe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009c00:	2b00      	cmp	r3, #0
 8009c02:	d001      	beq.n	8009c08 <SD_InitCard+0xdc>
    {
      return errorstate;
 8009c04:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009c06:	e05a      	b.n	8009cbe <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	681b      	ldr	r3, [r3, #0]
 8009c0c:	2100      	movs	r1, #0
 8009c0e:	4618      	mov	r0, r3
 8009c10:	f001 feef 	bl	800b9f2 <SDIO_GetResponse>
 8009c14:	4602      	mov	r2, r0
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	681b      	ldr	r3, [r3, #0]
 8009c1e:	2104      	movs	r1, #4
 8009c20:	4618      	mov	r0, r3
 8009c22:	f001 fee6 	bl	800b9f2 <SDIO_GetResponse>
 8009c26:	4602      	mov	r2, r0
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	681b      	ldr	r3, [r3, #0]
 8009c30:	2108      	movs	r1, #8
 8009c32:	4618      	mov	r0, r3
 8009c34:	f001 fedd 	bl	800b9f2 <SDIO_GetResponse>
 8009c38:	4602      	mov	r2, r0
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	681b      	ldr	r3, [r3, #0]
 8009c42:	210c      	movs	r1, #12
 8009c44:	4618      	mov	r0, r3
 8009c46:	f001 fed4 	bl	800b9f2 <SDIO_GetResponse>
 8009c4a:	4602      	mov	r2, r0
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	681b      	ldr	r3, [r3, #0]
 8009c54:	2104      	movs	r1, #4
 8009c56:	4618      	mov	r0, r3
 8009c58:	f001 fecb 	bl	800b9f2 <SDIO_GetResponse>
 8009c5c:	4603      	mov	r3, r0
 8009c5e:	0d1a      	lsrs	r2, r3, #20
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8009c64:	f107 0310 	add.w	r3, r7, #16
 8009c68:	4619      	mov	r1, r3
 8009c6a:	6878      	ldr	r0, [r7, #4]
 8009c6c:	f7ff fbe4 	bl	8009438 <HAL_SD_GetCardCSD>
 8009c70:	4603      	mov	r3, r0
 8009c72:	2b00      	cmp	r3, #0
 8009c74:	d002      	beq.n	8009c7c <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009c76:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8009c7a:	e020      	b.n	8009cbe <SD_InitCard+0x192>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	6819      	ldr	r1, [r3, #0]
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009c84:	041b      	lsls	r3, r3, #16
 8009c86:	f04f 0400 	mov.w	r4, #0
 8009c8a:	461a      	mov	r2, r3
 8009c8c:	4623      	mov	r3, r4
 8009c8e:	4608      	mov	r0, r1
 8009c90:	f001 ffba 	bl	800bc08 <SDMMC_CmdSelDesel>
 8009c94:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8009c96:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009c98:	2b00      	cmp	r3, #0
 8009c9a:	d001      	beq.n	8009ca0 <SD_InitCard+0x174>
  {
    return errorstate;
 8009c9c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009c9e:	e00e      	b.n	8009cbe <SD_InitCard+0x192>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	681d      	ldr	r5, [r3, #0]
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	466c      	mov	r4, sp
 8009ca8:	f103 0210 	add.w	r2, r3, #16
 8009cac:	ca07      	ldmia	r2, {r0, r1, r2}
 8009cae:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8009cb2:	3304      	adds	r3, #4
 8009cb4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8009cb6:	4628      	mov	r0, r5
 8009cb8:	f001 fdfe 	bl	800b8b8 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8009cbc:	2300      	movs	r3, #0
}
 8009cbe:	4618      	mov	r0, r3
 8009cc0:	3740      	adds	r7, #64	; 0x40
 8009cc2:	46bd      	mov	sp, r7
 8009cc4:	bdb0      	pop	{r4, r5, r7, pc}
	...

08009cc8 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8009cc8:	b580      	push	{r7, lr}
 8009cca:	b086      	sub	sp, #24
 8009ccc:	af00      	add	r7, sp, #0
 8009cce:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009cd0:	2300      	movs	r3, #0
 8009cd2:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8009cd4:	2300      	movs	r3, #0
 8009cd6:	617b      	str	r3, [r7, #20]
 8009cd8:	2300      	movs	r3, #0
 8009cda:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	681b      	ldr	r3, [r3, #0]
 8009ce0:	4618      	mov	r0, r3
 8009ce2:	f001 ffb4 	bl	800bc4e <SDMMC_CmdGoIdleState>
 8009ce6:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009ce8:	68fb      	ldr	r3, [r7, #12]
 8009cea:	2b00      	cmp	r3, #0
 8009cec:	d001      	beq.n	8009cf2 <SD_PowerON+0x2a>
  {
    return errorstate;
 8009cee:	68fb      	ldr	r3, [r7, #12]
 8009cf0:	e072      	b.n	8009dd8 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	681b      	ldr	r3, [r3, #0]
 8009cf6:	4618      	mov	r0, r3
 8009cf8:	f001 ffc7 	bl	800bc8a <SDMMC_CmdOperCond>
 8009cfc:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009cfe:	68fb      	ldr	r3, [r7, #12]
 8009d00:	2b00      	cmp	r3, #0
 8009d02:	d00d      	beq.n	8009d20 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	2200      	movs	r2, #0
 8009d08:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	681b      	ldr	r3, [r3, #0]
 8009d0e:	4618      	mov	r0, r3
 8009d10:	f001 ff9d 	bl	800bc4e <SDMMC_CmdGoIdleState>
 8009d14:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009d16:	68fb      	ldr	r3, [r7, #12]
 8009d18:	2b00      	cmp	r3, #0
 8009d1a:	d004      	beq.n	8009d26 <SD_PowerON+0x5e>
    {
      return errorstate;
 8009d1c:	68fb      	ldr	r3, [r7, #12]
 8009d1e:	e05b      	b.n	8009dd8 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	2201      	movs	r2, #1
 8009d24:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009d2a:	2b01      	cmp	r3, #1
 8009d2c:	d137      	bne.n	8009d9e <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	681b      	ldr	r3, [r3, #0]
 8009d32:	2100      	movs	r1, #0
 8009d34:	4618      	mov	r0, r3
 8009d36:	f001 ffc7 	bl	800bcc8 <SDMMC_CmdAppCommand>
 8009d3a:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009d3c:	68fb      	ldr	r3, [r7, #12]
 8009d3e:	2b00      	cmp	r3, #0
 8009d40:	d02d      	beq.n	8009d9e <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009d42:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8009d46:	e047      	b.n	8009dd8 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	681b      	ldr	r3, [r3, #0]
 8009d4c:	2100      	movs	r1, #0
 8009d4e:	4618      	mov	r0, r3
 8009d50:	f001 ffba 	bl	800bcc8 <SDMMC_CmdAppCommand>
 8009d54:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009d56:	68fb      	ldr	r3, [r7, #12]
 8009d58:	2b00      	cmp	r3, #0
 8009d5a:	d001      	beq.n	8009d60 <SD_PowerON+0x98>
    {
      return errorstate;
 8009d5c:	68fb      	ldr	r3, [r7, #12]
 8009d5e:	e03b      	b.n	8009dd8 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	681b      	ldr	r3, [r3, #0]
 8009d64:	491e      	ldr	r1, [pc, #120]	; (8009de0 <SD_PowerON+0x118>)
 8009d66:	4618      	mov	r0, r3
 8009d68:	f001 ffd0 	bl	800bd0c <SDMMC_CmdAppOperCommand>
 8009d6c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009d6e:	68fb      	ldr	r3, [r7, #12]
 8009d70:	2b00      	cmp	r3, #0
 8009d72:	d002      	beq.n	8009d7a <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009d74:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8009d78:	e02e      	b.n	8009dd8 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	681b      	ldr	r3, [r3, #0]
 8009d7e:	2100      	movs	r1, #0
 8009d80:	4618      	mov	r0, r3
 8009d82:	f001 fe36 	bl	800b9f2 <SDIO_GetResponse>
 8009d86:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8009d88:	697b      	ldr	r3, [r7, #20]
 8009d8a:	0fdb      	lsrs	r3, r3, #31
 8009d8c:	2b01      	cmp	r3, #1
 8009d8e:	d101      	bne.n	8009d94 <SD_PowerON+0xcc>
 8009d90:	2301      	movs	r3, #1
 8009d92:	e000      	b.n	8009d96 <SD_PowerON+0xce>
 8009d94:	2300      	movs	r3, #0
 8009d96:	613b      	str	r3, [r7, #16]

    count++;
 8009d98:	68bb      	ldr	r3, [r7, #8]
 8009d9a:	3301      	adds	r3, #1
 8009d9c:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8009d9e:	68bb      	ldr	r3, [r7, #8]
 8009da0:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8009da4:	4293      	cmp	r3, r2
 8009da6:	d802      	bhi.n	8009dae <SD_PowerON+0xe6>
 8009da8:	693b      	ldr	r3, [r7, #16]
 8009daa:	2b00      	cmp	r3, #0
 8009dac:	d0cc      	beq.n	8009d48 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8009dae:	68bb      	ldr	r3, [r7, #8]
 8009db0:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8009db4:	4293      	cmp	r3, r2
 8009db6:	d902      	bls.n	8009dbe <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8009db8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009dbc:	e00c      	b.n	8009dd8 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8009dbe:	697b      	ldr	r3, [r7, #20]
 8009dc0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8009dc4:	2b00      	cmp	r3, #0
 8009dc6:	d003      	beq.n	8009dd0 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	2201      	movs	r2, #1
 8009dcc:	645a      	str	r2, [r3, #68]	; 0x44
 8009dce:	e002      	b.n	8009dd6 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	2200      	movs	r2, #0
 8009dd4:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 8009dd6:	2300      	movs	r3, #0
}
 8009dd8:	4618      	mov	r0, r3
 8009dda:	3718      	adds	r7, #24
 8009ddc:	46bd      	mov	sp, r7
 8009dde:	bd80      	pop	{r7, pc}
 8009de0:	c1100000 	.word	0xc1100000

08009de4 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8009de4:	b580      	push	{r7, lr}
 8009de6:	b084      	sub	sp, #16
 8009de8:	af00      	add	r7, sp, #0
 8009dea:	6078      	str	r0, [r7, #4]
 8009dec:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8009dee:	683b      	ldr	r3, [r7, #0]
 8009df0:	2b00      	cmp	r3, #0
 8009df2:	d102      	bne.n	8009dfa <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8009df4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8009df8:	e018      	b.n	8009e2c <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	681a      	ldr	r2, [r3, #0]
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009e02:	041b      	lsls	r3, r3, #16
 8009e04:	4619      	mov	r1, r3
 8009e06:	4610      	mov	r0, r2
 8009e08:	f002 f844 	bl	800be94 <SDMMC_CmdSendStatus>
 8009e0c:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009e0e:	68fb      	ldr	r3, [r7, #12]
 8009e10:	2b00      	cmp	r3, #0
 8009e12:	d001      	beq.n	8009e18 <SD_SendStatus+0x34>
  {
    return errorstate;
 8009e14:	68fb      	ldr	r3, [r7, #12]
 8009e16:	e009      	b.n	8009e2c <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	681b      	ldr	r3, [r3, #0]
 8009e1c:	2100      	movs	r1, #0
 8009e1e:	4618      	mov	r0, r3
 8009e20:	f001 fde7 	bl	800b9f2 <SDIO_GetResponse>
 8009e24:	4602      	mov	r2, r0
 8009e26:	683b      	ldr	r3, [r7, #0]
 8009e28:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8009e2a:	2300      	movs	r3, #0
}
 8009e2c:	4618      	mov	r0, r3
 8009e2e:	3710      	adds	r7, #16
 8009e30:	46bd      	mov	sp, r7
 8009e32:	bd80      	pop	{r7, pc}

08009e34 <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8009e34:	b580      	push	{r7, lr}
 8009e36:	b086      	sub	sp, #24
 8009e38:	af00      	add	r7, sp, #0
 8009e3a:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8009e3c:	2300      	movs	r3, #0
 8009e3e:	60fb      	str	r3, [r7, #12]
 8009e40:	2300      	movs	r3, #0
 8009e42:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	681b      	ldr	r3, [r3, #0]
 8009e48:	2100      	movs	r1, #0
 8009e4a:	4618      	mov	r0, r3
 8009e4c:	f001 fdd1 	bl	800b9f2 <SDIO_GetResponse>
 8009e50:	4603      	mov	r3, r0
 8009e52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009e56:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009e5a:	d102      	bne.n	8009e62 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8009e5c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009e60:	e02f      	b.n	8009ec2 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8009e62:	f107 030c 	add.w	r3, r7, #12
 8009e66:	4619      	mov	r1, r3
 8009e68:	6878      	ldr	r0, [r7, #4]
 8009e6a:	f000 f879 	bl	8009f60 <SD_FindSCR>
 8009e6e:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009e70:	697b      	ldr	r3, [r7, #20]
 8009e72:	2b00      	cmp	r3, #0
 8009e74:	d001      	beq.n	8009e7a <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8009e76:	697b      	ldr	r3, [r7, #20]
 8009e78:	e023      	b.n	8009ec2 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8009e7a:	693b      	ldr	r3, [r7, #16]
 8009e7c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009e80:	2b00      	cmp	r3, #0
 8009e82:	d01c      	beq.n	8009ebe <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	681a      	ldr	r2, [r3, #0]
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009e8c:	041b      	lsls	r3, r3, #16
 8009e8e:	4619      	mov	r1, r3
 8009e90:	4610      	mov	r0, r2
 8009e92:	f001 ff19 	bl	800bcc8 <SDMMC_CmdAppCommand>
 8009e96:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009e98:	697b      	ldr	r3, [r7, #20]
 8009e9a:	2b00      	cmp	r3, #0
 8009e9c:	d001      	beq.n	8009ea2 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8009e9e:	697b      	ldr	r3, [r7, #20]
 8009ea0:	e00f      	b.n	8009ec2 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	681b      	ldr	r3, [r3, #0]
 8009ea6:	2102      	movs	r1, #2
 8009ea8:	4618      	mov	r0, r3
 8009eaa:	f001 ff52 	bl	800bd52 <SDMMC_CmdBusWidth>
 8009eae:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009eb0:	697b      	ldr	r3, [r7, #20]
 8009eb2:	2b00      	cmp	r3, #0
 8009eb4:	d001      	beq.n	8009eba <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8009eb6:	697b      	ldr	r3, [r7, #20]
 8009eb8:	e003      	b.n	8009ec2 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8009eba:	2300      	movs	r3, #0
 8009ebc:	e001      	b.n	8009ec2 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8009ebe:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8009ec2:	4618      	mov	r0, r3
 8009ec4:	3718      	adds	r7, #24
 8009ec6:	46bd      	mov	sp, r7
 8009ec8:	bd80      	pop	{r7, pc}

08009eca <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8009eca:	b580      	push	{r7, lr}
 8009ecc:	b086      	sub	sp, #24
 8009ece:	af00      	add	r7, sp, #0
 8009ed0:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8009ed2:	2300      	movs	r3, #0
 8009ed4:	60fb      	str	r3, [r7, #12]
 8009ed6:	2300      	movs	r3, #0
 8009ed8:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	681b      	ldr	r3, [r3, #0]
 8009ede:	2100      	movs	r1, #0
 8009ee0:	4618      	mov	r0, r3
 8009ee2:	f001 fd86 	bl	800b9f2 <SDIO_GetResponse>
 8009ee6:	4603      	mov	r3, r0
 8009ee8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009eec:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009ef0:	d102      	bne.n	8009ef8 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8009ef2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009ef6:	e02f      	b.n	8009f58 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8009ef8:	f107 030c 	add.w	r3, r7, #12
 8009efc:	4619      	mov	r1, r3
 8009efe:	6878      	ldr	r0, [r7, #4]
 8009f00:	f000 f82e 	bl	8009f60 <SD_FindSCR>
 8009f04:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009f06:	697b      	ldr	r3, [r7, #20]
 8009f08:	2b00      	cmp	r3, #0
 8009f0a:	d001      	beq.n	8009f10 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8009f0c:	697b      	ldr	r3, [r7, #20]
 8009f0e:	e023      	b.n	8009f58 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8009f10:	693b      	ldr	r3, [r7, #16]
 8009f12:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009f16:	2b00      	cmp	r3, #0
 8009f18:	d01c      	beq.n	8009f54 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	681a      	ldr	r2, [r3, #0]
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009f22:	041b      	lsls	r3, r3, #16
 8009f24:	4619      	mov	r1, r3
 8009f26:	4610      	mov	r0, r2
 8009f28:	f001 fece 	bl	800bcc8 <SDMMC_CmdAppCommand>
 8009f2c:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009f2e:	697b      	ldr	r3, [r7, #20]
 8009f30:	2b00      	cmp	r3, #0
 8009f32:	d001      	beq.n	8009f38 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8009f34:	697b      	ldr	r3, [r7, #20]
 8009f36:	e00f      	b.n	8009f58 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	681b      	ldr	r3, [r3, #0]
 8009f3c:	2100      	movs	r1, #0
 8009f3e:	4618      	mov	r0, r3
 8009f40:	f001 ff07 	bl	800bd52 <SDMMC_CmdBusWidth>
 8009f44:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009f46:	697b      	ldr	r3, [r7, #20]
 8009f48:	2b00      	cmp	r3, #0
 8009f4a:	d001      	beq.n	8009f50 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8009f4c:	697b      	ldr	r3, [r7, #20]
 8009f4e:	e003      	b.n	8009f58 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8009f50:	2300      	movs	r3, #0
 8009f52:	e001      	b.n	8009f58 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8009f54:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8009f58:	4618      	mov	r0, r3
 8009f5a:	3718      	adds	r7, #24
 8009f5c:	46bd      	mov	sp, r7
 8009f5e:	bd80      	pop	{r7, pc}

08009f60 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8009f60:	b590      	push	{r4, r7, lr}
 8009f62:	b08f      	sub	sp, #60	; 0x3c
 8009f64:	af00      	add	r7, sp, #0
 8009f66:	6078      	str	r0, [r7, #4]
 8009f68:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8009f6a:	f7fb f835 	bl	8004fd8 <HAL_GetTick>
 8009f6e:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 8009f70:	2300      	movs	r3, #0
 8009f72:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 8009f74:	2300      	movs	r3, #0
 8009f76:	60bb      	str	r3, [r7, #8]
 8009f78:	2300      	movs	r3, #0
 8009f7a:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8009f7c:	683b      	ldr	r3, [r7, #0]
 8009f7e:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	681b      	ldr	r3, [r3, #0]
 8009f84:	2108      	movs	r1, #8
 8009f86:	4618      	mov	r0, r3
 8009f88:	f001 fd72 	bl	800ba70 <SDMMC_CmdBlockLength>
 8009f8c:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8009f8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f90:	2b00      	cmp	r3, #0
 8009f92:	d001      	beq.n	8009f98 <SD_FindSCR+0x38>
  {
    return errorstate;
 8009f94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f96:	e0a9      	b.n	800a0ec <SD_FindSCR+0x18c>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	681a      	ldr	r2, [r3, #0]
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009fa0:	041b      	lsls	r3, r3, #16
 8009fa2:	4619      	mov	r1, r3
 8009fa4:	4610      	mov	r0, r2
 8009fa6:	f001 fe8f 	bl	800bcc8 <SDMMC_CmdAppCommand>
 8009faa:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8009fac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009fae:	2b00      	cmp	r3, #0
 8009fb0:	d001      	beq.n	8009fb6 <SD_FindSCR+0x56>
  {
    return errorstate;
 8009fb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009fb4:	e09a      	b.n	800a0ec <SD_FindSCR+0x18c>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8009fb6:	f04f 33ff 	mov.w	r3, #4294967295
 8009fba:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8009fbc:	2308      	movs	r3, #8
 8009fbe:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 8009fc0:	2330      	movs	r3, #48	; 0x30
 8009fc2:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8009fc4:	2302      	movs	r3, #2
 8009fc6:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8009fc8:	2300      	movs	r3, #0
 8009fca:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 8009fcc:	2301      	movs	r3, #1
 8009fce:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	681b      	ldr	r3, [r3, #0]
 8009fd4:	f107 0210 	add.w	r2, r7, #16
 8009fd8:	4611      	mov	r1, r2
 8009fda:	4618      	mov	r0, r3
 8009fdc:	f001 fd1c 	bl	800ba18 <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	681b      	ldr	r3, [r3, #0]
 8009fe4:	4618      	mov	r0, r3
 8009fe6:	f001 fed6 	bl	800bd96 <SDMMC_CmdSendSCR>
 8009fea:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8009fec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009fee:	2b00      	cmp	r3, #0
 8009ff0:	d022      	beq.n	800a038 <SD_FindSCR+0xd8>
  {
    return errorstate;
 8009ff2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ff4:	e07a      	b.n	800a0ec <SD_FindSCR+0x18c>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	681b      	ldr	r3, [r3, #0]
 8009ffa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009ffc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a000:	2b00      	cmp	r3, #0
 800a002:	d00e      	beq.n	800a022 <SD_FindSCR+0xc2>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	6819      	ldr	r1, [r3, #0]
 800a008:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a00a:	009b      	lsls	r3, r3, #2
 800a00c:	f107 0208 	add.w	r2, r7, #8
 800a010:	18d4      	adds	r4, r2, r3
 800a012:	4608      	mov	r0, r1
 800a014:	f001 fc7b 	bl	800b90e <SDIO_ReadFIFO>
 800a018:	4603      	mov	r3, r0
 800a01a:	6023      	str	r3, [r4, #0]
      index++;
 800a01c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a01e:	3301      	adds	r3, #1
 800a020:	637b      	str	r3, [r7, #52]	; 0x34
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800a022:	f7fa ffd9 	bl	8004fd8 <HAL_GetTick>
 800a026:	4602      	mov	r2, r0
 800a028:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a02a:	1ad3      	subs	r3, r2, r3
 800a02c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a030:	d102      	bne.n	800a038 <SD_FindSCR+0xd8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800a032:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a036:	e059      	b.n	800a0ec <SD_FindSCR+0x18c>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	681b      	ldr	r3, [r3, #0]
 800a03c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a03e:	f240 432a 	movw	r3, #1066	; 0x42a
 800a042:	4013      	ands	r3, r2
 800a044:	2b00      	cmp	r3, #0
 800a046:	d0d6      	beq.n	8009ff6 <SD_FindSCR+0x96>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	681b      	ldr	r3, [r3, #0]
 800a04c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a04e:	f003 0308 	and.w	r3, r3, #8
 800a052:	2b00      	cmp	r3, #0
 800a054:	d005      	beq.n	800a062 <SD_FindSCR+0x102>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	681b      	ldr	r3, [r3, #0]
 800a05a:	2208      	movs	r2, #8
 800a05c:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800a05e:	2308      	movs	r3, #8
 800a060:	e044      	b.n	800a0ec <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	681b      	ldr	r3, [r3, #0]
 800a066:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a068:	f003 0302 	and.w	r3, r3, #2
 800a06c:	2b00      	cmp	r3, #0
 800a06e:	d005      	beq.n	800a07c <SD_FindSCR+0x11c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	681b      	ldr	r3, [r3, #0]
 800a074:	2202      	movs	r2, #2
 800a076:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800a078:	2302      	movs	r3, #2
 800a07a:	e037      	b.n	800a0ec <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	681b      	ldr	r3, [r3, #0]
 800a080:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a082:	f003 0320 	and.w	r3, r3, #32
 800a086:	2b00      	cmp	r3, #0
 800a088:	d005      	beq.n	800a096 <SD_FindSCR+0x136>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	681b      	ldr	r3, [r3, #0]
 800a08e:	2220      	movs	r2, #32
 800a090:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800a092:	2320      	movs	r3, #32
 800a094:	e02a      	b.n	800a0ec <SD_FindSCR+0x18c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	681b      	ldr	r3, [r3, #0]
 800a09a:	f240 523a 	movw	r2, #1338	; 0x53a
 800a09e:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800a0a0:	68fb      	ldr	r3, [r7, #12]
 800a0a2:	061a      	lsls	r2, r3, #24
 800a0a4:	68fb      	ldr	r3, [r7, #12]
 800a0a6:	021b      	lsls	r3, r3, #8
 800a0a8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800a0ac:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800a0ae:	68fb      	ldr	r3, [r7, #12]
 800a0b0:	0a1b      	lsrs	r3, r3, #8
 800a0b2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800a0b6:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800a0b8:	68fb      	ldr	r3, [r7, #12]
 800a0ba:	0e1b      	lsrs	r3, r3, #24
 800a0bc:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800a0be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a0c0:	601a      	str	r2, [r3, #0]
    scr++;
 800a0c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a0c4:	3304      	adds	r3, #4
 800a0c6:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800a0c8:	68bb      	ldr	r3, [r7, #8]
 800a0ca:	061a      	lsls	r2, r3, #24
 800a0cc:	68bb      	ldr	r3, [r7, #8]
 800a0ce:	021b      	lsls	r3, r3, #8
 800a0d0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800a0d4:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800a0d6:	68bb      	ldr	r3, [r7, #8]
 800a0d8:	0a1b      	lsrs	r3, r3, #8
 800a0da:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800a0de:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800a0e0:	68bb      	ldr	r3, [r7, #8]
 800a0e2:	0e1b      	lsrs	r3, r3, #24
 800a0e4:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800a0e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a0e8:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800a0ea:	2300      	movs	r3, #0
}
 800a0ec:	4618      	mov	r0, r3
 800a0ee:	373c      	adds	r7, #60	; 0x3c
 800a0f0:	46bd      	mov	sp, r7
 800a0f2:	bd90      	pop	{r4, r7, pc}

0800a0f4 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 800a0f4:	b580      	push	{r7, lr}
 800a0f6:	b086      	sub	sp, #24
 800a0f8:	af00      	add	r7, sp, #0
 800a0fa:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a100:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a106:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800a108:	693b      	ldr	r3, [r7, #16]
 800a10a:	2b00      	cmp	r3, #0
 800a10c:	d03f      	beq.n	800a18e <SD_Read_IT+0x9a>
  {
    /* Read data from SDIO Rx FIFO */
    for(count = 0U; count < 8U; count++)
 800a10e:	2300      	movs	r3, #0
 800a110:	617b      	str	r3, [r7, #20]
 800a112:	e033      	b.n	800a17c <SD_Read_IT+0x88>
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	681b      	ldr	r3, [r3, #0]
 800a118:	4618      	mov	r0, r3
 800a11a:	f001 fbf8 	bl	800b90e <SDIO_ReadFIFO>
 800a11e:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 800a120:	68bb      	ldr	r3, [r7, #8]
 800a122:	b2da      	uxtb	r2, r3
 800a124:	68fb      	ldr	r3, [r7, #12]
 800a126:	701a      	strb	r2, [r3, #0]
      tmp++;
 800a128:	68fb      	ldr	r3, [r7, #12]
 800a12a:	3301      	adds	r3, #1
 800a12c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800a12e:	693b      	ldr	r3, [r7, #16]
 800a130:	3b01      	subs	r3, #1
 800a132:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 800a134:	68bb      	ldr	r3, [r7, #8]
 800a136:	0a1b      	lsrs	r3, r3, #8
 800a138:	b2da      	uxtb	r2, r3
 800a13a:	68fb      	ldr	r3, [r7, #12]
 800a13c:	701a      	strb	r2, [r3, #0]
      tmp++;
 800a13e:	68fb      	ldr	r3, [r7, #12]
 800a140:	3301      	adds	r3, #1
 800a142:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800a144:	693b      	ldr	r3, [r7, #16]
 800a146:	3b01      	subs	r3, #1
 800a148:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 800a14a:	68bb      	ldr	r3, [r7, #8]
 800a14c:	0c1b      	lsrs	r3, r3, #16
 800a14e:	b2da      	uxtb	r2, r3
 800a150:	68fb      	ldr	r3, [r7, #12]
 800a152:	701a      	strb	r2, [r3, #0]
      tmp++;
 800a154:	68fb      	ldr	r3, [r7, #12]
 800a156:	3301      	adds	r3, #1
 800a158:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800a15a:	693b      	ldr	r3, [r7, #16]
 800a15c:	3b01      	subs	r3, #1
 800a15e:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 800a160:	68bb      	ldr	r3, [r7, #8]
 800a162:	0e1b      	lsrs	r3, r3, #24
 800a164:	b2da      	uxtb	r2, r3
 800a166:	68fb      	ldr	r3, [r7, #12]
 800a168:	701a      	strb	r2, [r3, #0]
      tmp++;
 800a16a:	68fb      	ldr	r3, [r7, #12]
 800a16c:	3301      	adds	r3, #1
 800a16e:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800a170:	693b      	ldr	r3, [r7, #16]
 800a172:	3b01      	subs	r3, #1
 800a174:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 800a176:	697b      	ldr	r3, [r7, #20]
 800a178:	3301      	adds	r3, #1
 800a17a:	617b      	str	r3, [r7, #20]
 800a17c:	697b      	ldr	r3, [r7, #20]
 800a17e:	2b07      	cmp	r3, #7
 800a180:	d9c8      	bls.n	800a114 <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	68fa      	ldr	r2, [r7, #12]
 800a186:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	693a      	ldr	r2, [r7, #16]
 800a18c:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 800a18e:	bf00      	nop
 800a190:	3718      	adds	r7, #24
 800a192:	46bd      	mov	sp, r7
 800a194:	bd80      	pop	{r7, pc}

0800a196 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 800a196:	b580      	push	{r7, lr}
 800a198:	b086      	sub	sp, #24
 800a19a:	af00      	add	r7, sp, #0
 800a19c:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	6a1b      	ldr	r3, [r3, #32]
 800a1a2:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1a8:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800a1aa:	693b      	ldr	r3, [r7, #16]
 800a1ac:	2b00      	cmp	r3, #0
 800a1ae:	d043      	beq.n	800a238 <SD_Write_IT+0xa2>
  {
    /* Write data to SDIO Tx FIFO */
    for(count = 0U; count < 8U; count++)
 800a1b0:	2300      	movs	r3, #0
 800a1b2:	617b      	str	r3, [r7, #20]
 800a1b4:	e037      	b.n	800a226 <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 800a1b6:	68fb      	ldr	r3, [r7, #12]
 800a1b8:	781b      	ldrb	r3, [r3, #0]
 800a1ba:	60bb      	str	r3, [r7, #8]
      tmp++;
 800a1bc:	68fb      	ldr	r3, [r7, #12]
 800a1be:	3301      	adds	r3, #1
 800a1c0:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800a1c2:	693b      	ldr	r3, [r7, #16]
 800a1c4:	3b01      	subs	r3, #1
 800a1c6:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 800a1c8:	68fb      	ldr	r3, [r7, #12]
 800a1ca:	781b      	ldrb	r3, [r3, #0]
 800a1cc:	021a      	lsls	r2, r3, #8
 800a1ce:	68bb      	ldr	r3, [r7, #8]
 800a1d0:	4313      	orrs	r3, r2
 800a1d2:	60bb      	str	r3, [r7, #8]
      tmp++;
 800a1d4:	68fb      	ldr	r3, [r7, #12]
 800a1d6:	3301      	adds	r3, #1
 800a1d8:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800a1da:	693b      	ldr	r3, [r7, #16]
 800a1dc:	3b01      	subs	r3, #1
 800a1de:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 800a1e0:	68fb      	ldr	r3, [r7, #12]
 800a1e2:	781b      	ldrb	r3, [r3, #0]
 800a1e4:	041a      	lsls	r2, r3, #16
 800a1e6:	68bb      	ldr	r3, [r7, #8]
 800a1e8:	4313      	orrs	r3, r2
 800a1ea:	60bb      	str	r3, [r7, #8]
      tmp++;
 800a1ec:	68fb      	ldr	r3, [r7, #12]
 800a1ee:	3301      	adds	r3, #1
 800a1f0:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800a1f2:	693b      	ldr	r3, [r7, #16]
 800a1f4:	3b01      	subs	r3, #1
 800a1f6:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 800a1f8:	68fb      	ldr	r3, [r7, #12]
 800a1fa:	781b      	ldrb	r3, [r3, #0]
 800a1fc:	061a      	lsls	r2, r3, #24
 800a1fe:	68bb      	ldr	r3, [r7, #8]
 800a200:	4313      	orrs	r3, r2
 800a202:	60bb      	str	r3, [r7, #8]
      tmp++;
 800a204:	68fb      	ldr	r3, [r7, #12]
 800a206:	3301      	adds	r3, #1
 800a208:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800a20a:	693b      	ldr	r3, [r7, #16]
 800a20c:	3b01      	subs	r3, #1
 800a20e:	613b      	str	r3, [r7, #16]
      (void)SDIO_WriteFIFO(hsd->Instance, &data);
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	681b      	ldr	r3, [r3, #0]
 800a214:	f107 0208 	add.w	r2, r7, #8
 800a218:	4611      	mov	r1, r2
 800a21a:	4618      	mov	r0, r3
 800a21c:	f001 fb84 	bl	800b928 <SDIO_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 800a220:	697b      	ldr	r3, [r7, #20]
 800a222:	3301      	adds	r3, #1
 800a224:	617b      	str	r3, [r7, #20]
 800a226:	697b      	ldr	r3, [r7, #20]
 800a228:	2b07      	cmp	r3, #7
 800a22a:	d9c4      	bls.n	800a1b6 <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	68fa      	ldr	r2, [r7, #12]
 800a230:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	693a      	ldr	r2, [r7, #16]
 800a236:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 800a238:	bf00      	nop
 800a23a:	3718      	adds	r7, #24
 800a23c:	46bd      	mov	sp, r7
 800a23e:	bd80      	pop	{r7, pc}

0800a240 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800a240:	b580      	push	{r7, lr}
 800a242:	b082      	sub	sp, #8
 800a244:	af00      	add	r7, sp, #0
 800a246:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	2b00      	cmp	r3, #0
 800a24c:	d101      	bne.n	800a252 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800a24e:	2301      	movs	r3, #1
 800a250:	e056      	b.n	800a300 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	2200      	movs	r2, #0
 800a256:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800a25e:	b2db      	uxtb	r3, r3
 800a260:	2b00      	cmp	r3, #0
 800a262:	d106      	bne.n	800a272 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	2200      	movs	r2, #0
 800a268:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800a26c:	6878      	ldr	r0, [r7, #4]
 800a26e:	f7fa fbbb 	bl	80049e8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	2202      	movs	r2, #2
 800a276:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	681b      	ldr	r3, [r3, #0]
 800a27e:	681a      	ldr	r2, [r3, #0]
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	681b      	ldr	r3, [r3, #0]
 800a284:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a288:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	685a      	ldr	r2, [r3, #4]
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	689b      	ldr	r3, [r3, #8]
 800a292:	431a      	orrs	r2, r3
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	68db      	ldr	r3, [r3, #12]
 800a298:	431a      	orrs	r2, r3
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	691b      	ldr	r3, [r3, #16]
 800a29e:	431a      	orrs	r2, r3
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	695b      	ldr	r3, [r3, #20]
 800a2a4:	431a      	orrs	r2, r3
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	699b      	ldr	r3, [r3, #24]
 800a2aa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a2ae:	431a      	orrs	r2, r3
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	69db      	ldr	r3, [r3, #28]
 800a2b4:	431a      	orrs	r2, r3
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	6a1b      	ldr	r3, [r3, #32]
 800a2ba:	ea42 0103 	orr.w	r1, r2, r3
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	681b      	ldr	r3, [r3, #0]
 800a2c6:	430a      	orrs	r2, r1
 800a2c8:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	699b      	ldr	r3, [r3, #24]
 800a2ce:	0c1b      	lsrs	r3, r3, #16
 800a2d0:	f003 0104 	and.w	r1, r3, #4
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	681b      	ldr	r3, [r3, #0]
 800a2dc:	430a      	orrs	r2, r1
 800a2de:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	681b      	ldr	r3, [r3, #0]
 800a2e4:	69da      	ldr	r2, [r3, #28]
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	681b      	ldr	r3, [r3, #0]
 800a2ea:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800a2ee:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	2200      	movs	r2, #0
 800a2f4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	2201      	movs	r2, #1
 800a2fa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800a2fe:	2300      	movs	r3, #0
}
 800a300:	4618      	mov	r0, r3
 800a302:	3708      	adds	r7, #8
 800a304:	46bd      	mov	sp, r7
 800a306:	bd80      	pop	{r7, pc}

0800a308 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800a308:	b580      	push	{r7, lr}
 800a30a:	b088      	sub	sp, #32
 800a30c:	af00      	add	r7, sp, #0
 800a30e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	681b      	ldr	r3, [r3, #0]
 800a314:	685b      	ldr	r3, [r3, #4]
 800a316:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	681b      	ldr	r3, [r3, #0]
 800a31c:	689b      	ldr	r3, [r3, #8]
 800a31e:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800a320:	69bb      	ldr	r3, [r7, #24]
 800a322:	099b      	lsrs	r3, r3, #6
 800a324:	f003 0301 	and.w	r3, r3, #1
 800a328:	2b00      	cmp	r3, #0
 800a32a:	d10f      	bne.n	800a34c <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800a32c:	69bb      	ldr	r3, [r7, #24]
 800a32e:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800a332:	2b00      	cmp	r3, #0
 800a334:	d00a      	beq.n	800a34c <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800a336:	69fb      	ldr	r3, [r7, #28]
 800a338:	099b      	lsrs	r3, r3, #6
 800a33a:	f003 0301 	and.w	r3, r3, #1
 800a33e:	2b00      	cmp	r3, #0
 800a340:	d004      	beq.n	800a34c <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a346:	6878      	ldr	r0, [r7, #4]
 800a348:	4798      	blx	r3
    return;
 800a34a:	e0d8      	b.n	800a4fe <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 800a34c:	69bb      	ldr	r3, [r7, #24]
 800a34e:	085b      	lsrs	r3, r3, #1
 800a350:	f003 0301 	and.w	r3, r3, #1
 800a354:	2b00      	cmp	r3, #0
 800a356:	d00a      	beq.n	800a36e <HAL_SPI_IRQHandler+0x66>
 800a358:	69fb      	ldr	r3, [r7, #28]
 800a35a:	09db      	lsrs	r3, r3, #7
 800a35c:	f003 0301 	and.w	r3, r3, #1
 800a360:	2b00      	cmp	r3, #0
 800a362:	d004      	beq.n	800a36e <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a368:	6878      	ldr	r0, [r7, #4]
 800a36a:	4798      	blx	r3
    return;
 800a36c:	e0c7      	b.n	800a4fe <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800a36e:	69bb      	ldr	r3, [r7, #24]
 800a370:	095b      	lsrs	r3, r3, #5
 800a372:	f003 0301 	and.w	r3, r3, #1
 800a376:	2b00      	cmp	r3, #0
 800a378:	d10c      	bne.n	800a394 <HAL_SPI_IRQHandler+0x8c>
 800a37a:	69bb      	ldr	r3, [r7, #24]
 800a37c:	099b      	lsrs	r3, r3, #6
 800a37e:	f003 0301 	and.w	r3, r3, #1
 800a382:	2b00      	cmp	r3, #0
 800a384:	d106      	bne.n	800a394 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800a386:	69bb      	ldr	r3, [r7, #24]
 800a388:	0a1b      	lsrs	r3, r3, #8
 800a38a:	f003 0301 	and.w	r3, r3, #1
 800a38e:	2b00      	cmp	r3, #0
 800a390:	f000 80b5 	beq.w	800a4fe <HAL_SPI_IRQHandler+0x1f6>
 800a394:	69fb      	ldr	r3, [r7, #28]
 800a396:	095b      	lsrs	r3, r3, #5
 800a398:	f003 0301 	and.w	r3, r3, #1
 800a39c:	2b00      	cmp	r3, #0
 800a39e:	f000 80ae 	beq.w	800a4fe <HAL_SPI_IRQHandler+0x1f6>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800a3a2:	69bb      	ldr	r3, [r7, #24]
 800a3a4:	099b      	lsrs	r3, r3, #6
 800a3a6:	f003 0301 	and.w	r3, r3, #1
 800a3aa:	2b00      	cmp	r3, #0
 800a3ac:	d023      	beq.n	800a3f6 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800a3b4:	b2db      	uxtb	r3, r3
 800a3b6:	2b03      	cmp	r3, #3
 800a3b8:	d011      	beq.n	800a3de <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a3be:	f043 0204 	orr.w	r2, r3, #4
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800a3c6:	2300      	movs	r3, #0
 800a3c8:	617b      	str	r3, [r7, #20]
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	681b      	ldr	r3, [r3, #0]
 800a3ce:	68db      	ldr	r3, [r3, #12]
 800a3d0:	617b      	str	r3, [r7, #20]
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	681b      	ldr	r3, [r3, #0]
 800a3d6:	689b      	ldr	r3, [r3, #8]
 800a3d8:	617b      	str	r3, [r7, #20]
 800a3da:	697b      	ldr	r3, [r7, #20]
 800a3dc:	e00b      	b.n	800a3f6 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800a3de:	2300      	movs	r3, #0
 800a3e0:	613b      	str	r3, [r7, #16]
 800a3e2:	687b      	ldr	r3, [r7, #4]
 800a3e4:	681b      	ldr	r3, [r3, #0]
 800a3e6:	68db      	ldr	r3, [r3, #12]
 800a3e8:	613b      	str	r3, [r7, #16]
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	681b      	ldr	r3, [r3, #0]
 800a3ee:	689b      	ldr	r3, [r3, #8]
 800a3f0:	613b      	str	r3, [r7, #16]
 800a3f2:	693b      	ldr	r3, [r7, #16]
        return;
 800a3f4:	e083      	b.n	800a4fe <HAL_SPI_IRQHandler+0x1f6>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800a3f6:	69bb      	ldr	r3, [r7, #24]
 800a3f8:	095b      	lsrs	r3, r3, #5
 800a3fa:	f003 0301 	and.w	r3, r3, #1
 800a3fe:	2b00      	cmp	r3, #0
 800a400:	d014      	beq.n	800a42c <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a406:	f043 0201 	orr.w	r2, r3, #1
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800a40e:	2300      	movs	r3, #0
 800a410:	60fb      	str	r3, [r7, #12]
 800a412:	687b      	ldr	r3, [r7, #4]
 800a414:	681b      	ldr	r3, [r3, #0]
 800a416:	689b      	ldr	r3, [r3, #8]
 800a418:	60fb      	str	r3, [r7, #12]
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	681b      	ldr	r3, [r3, #0]
 800a41e:	681a      	ldr	r2, [r3, #0]
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	681b      	ldr	r3, [r3, #0]
 800a424:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a428:	601a      	str	r2, [r3, #0]
 800a42a:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 800a42c:	69bb      	ldr	r3, [r7, #24]
 800a42e:	0a1b      	lsrs	r3, r3, #8
 800a430:	f003 0301 	and.w	r3, r3, #1
 800a434:	2b00      	cmp	r3, #0
 800a436:	d00c      	beq.n	800a452 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a43c:	f043 0208 	orr.w	r2, r3, #8
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800a444:	2300      	movs	r3, #0
 800a446:	60bb      	str	r3, [r7, #8]
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	681b      	ldr	r3, [r3, #0]
 800a44c:	689b      	ldr	r3, [r3, #8]
 800a44e:	60bb      	str	r3, [r7, #8]
 800a450:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a456:	2b00      	cmp	r3, #0
 800a458:	d050      	beq.n	800a4fc <HAL_SPI_IRQHandler+0x1f4>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	681b      	ldr	r3, [r3, #0]
 800a45e:	685a      	ldr	r2, [r3, #4]
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	681b      	ldr	r3, [r3, #0]
 800a464:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800a468:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	2201      	movs	r2, #1
 800a46e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800a472:	69fb      	ldr	r3, [r7, #28]
 800a474:	f003 0302 	and.w	r3, r3, #2
 800a478:	2b00      	cmp	r3, #0
 800a47a:	d104      	bne.n	800a486 <HAL_SPI_IRQHandler+0x17e>
 800a47c:	69fb      	ldr	r3, [r7, #28]
 800a47e:	f003 0301 	and.w	r3, r3, #1
 800a482:	2b00      	cmp	r3, #0
 800a484:	d034      	beq.n	800a4f0 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	681b      	ldr	r3, [r3, #0]
 800a48a:	685a      	ldr	r2, [r3, #4]
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	681b      	ldr	r3, [r3, #0]
 800a490:	f022 0203 	bic.w	r2, r2, #3
 800a494:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a49a:	2b00      	cmp	r3, #0
 800a49c:	d011      	beq.n	800a4c2 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a4a2:	4a18      	ldr	r2, [pc, #96]	; (800a504 <HAL_SPI_IRQHandler+0x1fc>)
 800a4a4:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a4aa:	4618      	mov	r0, r3
 800a4ac:	f7fa ffda 	bl	8005464 <HAL_DMA_Abort_IT>
 800a4b0:	4603      	mov	r3, r0
 800a4b2:	2b00      	cmp	r3, #0
 800a4b4:	d005      	beq.n	800a4c2 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a4ba:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a4c6:	2b00      	cmp	r3, #0
 800a4c8:	d016      	beq.n	800a4f8 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a4ce:	4a0d      	ldr	r2, [pc, #52]	; (800a504 <HAL_SPI_IRQHandler+0x1fc>)
 800a4d0:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a4d6:	4618      	mov	r0, r3
 800a4d8:	f7fa ffc4 	bl	8005464 <HAL_DMA_Abort_IT>
 800a4dc:	4603      	mov	r3, r0
 800a4de:	2b00      	cmp	r3, #0
 800a4e0:	d00a      	beq.n	800a4f8 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a4e6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 800a4ee:	e003      	b.n	800a4f8 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800a4f0:	6878      	ldr	r0, [r7, #4]
 800a4f2:	f000 f809 	bl	800a508 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800a4f6:	e000      	b.n	800a4fa <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 800a4f8:	bf00      	nop
    return;
 800a4fa:	bf00      	nop
 800a4fc:	bf00      	nop
  }
}
 800a4fe:	3720      	adds	r7, #32
 800a500:	46bd      	mov	sp, r7
 800a502:	bd80      	pop	{r7, pc}
 800a504:	0800a51d 	.word	0x0800a51d

0800a508 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800a508:	b480      	push	{r7}
 800a50a:	b083      	sub	sp, #12
 800a50c:	af00      	add	r7, sp, #0
 800a50e:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800a510:	bf00      	nop
 800a512:	370c      	adds	r7, #12
 800a514:	46bd      	mov	sp, r7
 800a516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a51a:	4770      	bx	lr

0800a51c <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a51c:	b580      	push	{r7, lr}
 800a51e:	b084      	sub	sp, #16
 800a520:	af00      	add	r7, sp, #0
 800a522:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a528:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800a52a:	68fb      	ldr	r3, [r7, #12]
 800a52c:	2200      	movs	r2, #0
 800a52e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 800a530:	68fb      	ldr	r3, [r7, #12]
 800a532:	2200      	movs	r2, #0
 800a534:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800a536:	68f8      	ldr	r0, [r7, #12]
 800a538:	f7ff ffe6 	bl	800a508 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800a53c:	bf00      	nop
 800a53e:	3710      	adds	r7, #16
 800a540:	46bd      	mov	sp, r7
 800a542:	bd80      	pop	{r7, pc}

0800a544 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a544:	b580      	push	{r7, lr}
 800a546:	b082      	sub	sp, #8
 800a548:	af00      	add	r7, sp, #0
 800a54a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	2b00      	cmp	r3, #0
 800a550:	d101      	bne.n	800a556 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a552:	2301      	movs	r3, #1
 800a554:	e01d      	b.n	800a592 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a55c:	b2db      	uxtb	r3, r3
 800a55e:	2b00      	cmp	r3, #0
 800a560:	d106      	bne.n	800a570 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	2200      	movs	r2, #0
 800a566:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a56a:	6878      	ldr	r0, [r7, #4]
 800a56c:	f7fa faf0 	bl	8004b50 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	2202      	movs	r2, #2
 800a574:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	681a      	ldr	r2, [r3, #0]
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	3304      	adds	r3, #4
 800a580:	4619      	mov	r1, r3
 800a582:	4610      	mov	r0, r2
 800a584:	f000 fa42 	bl	800aa0c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	2201      	movs	r2, #1
 800a58c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a590:	2300      	movs	r3, #0
}
 800a592:	4618      	mov	r0, r3
 800a594:	3708      	adds	r7, #8
 800a596:	46bd      	mov	sp, r7
 800a598:	bd80      	pop	{r7, pc}

0800a59a <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800a59a:	b480      	push	{r7}
 800a59c:	b085      	sub	sp, #20
 800a59e:	af00      	add	r7, sp, #0
 800a5a0:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	2202      	movs	r2, #2
 800a5a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	681b      	ldr	r3, [r3, #0]
 800a5ae:	689b      	ldr	r3, [r3, #8]
 800a5b0:	f003 0307 	and.w	r3, r3, #7
 800a5b4:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a5b6:	68fb      	ldr	r3, [r7, #12]
 800a5b8:	2b06      	cmp	r3, #6
 800a5ba:	d007      	beq.n	800a5cc <HAL_TIM_Base_Start+0x32>
  {
    __HAL_TIM_ENABLE(htim);
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	681b      	ldr	r3, [r3, #0]
 800a5c0:	681a      	ldr	r2, [r3, #0]
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	681b      	ldr	r3, [r3, #0]
 800a5c6:	f042 0201 	orr.w	r2, r2, #1
 800a5ca:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	2201      	movs	r2, #1
 800a5d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800a5d4:	2300      	movs	r3, #0
}
 800a5d6:	4618      	mov	r0, r3
 800a5d8:	3714      	adds	r7, #20
 800a5da:	46bd      	mov	sp, r7
 800a5dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5e0:	4770      	bx	lr

0800a5e2 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800a5e2:	b480      	push	{r7}
 800a5e4:	b085      	sub	sp, #20
 800a5e6:	af00      	add	r7, sp, #0
 800a5e8:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	681b      	ldr	r3, [r3, #0]
 800a5ee:	68da      	ldr	r2, [r3, #12]
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	681b      	ldr	r3, [r3, #0]
 800a5f4:	f042 0201 	orr.w	r2, r2, #1
 800a5f8:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	681b      	ldr	r3, [r3, #0]
 800a5fe:	689b      	ldr	r3, [r3, #8]
 800a600:	f003 0307 	and.w	r3, r3, #7
 800a604:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a606:	68fb      	ldr	r3, [r7, #12]
 800a608:	2b06      	cmp	r3, #6
 800a60a:	d007      	beq.n	800a61c <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	681b      	ldr	r3, [r3, #0]
 800a610:	681a      	ldr	r2, [r3, #0]
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	681b      	ldr	r3, [r3, #0]
 800a616:	f042 0201 	orr.w	r2, r2, #1
 800a61a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800a61c:	2300      	movs	r3, #0
}
 800a61e:	4618      	mov	r0, r3
 800a620:	3714      	adds	r7, #20
 800a622:	46bd      	mov	sp, r7
 800a624:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a628:	4770      	bx	lr

0800a62a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800a62a:	b580      	push	{r7, lr}
 800a62c:	b082      	sub	sp, #8
 800a62e:	af00      	add	r7, sp, #0
 800a630:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	2b00      	cmp	r3, #0
 800a636:	d101      	bne.n	800a63c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800a638:	2301      	movs	r3, #1
 800a63a:	e01d      	b.n	800a678 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a642:	b2db      	uxtb	r3, r3
 800a644:	2b00      	cmp	r3, #0
 800a646:	d106      	bne.n	800a656 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	2200      	movs	r2, #0
 800a64c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800a650:	6878      	ldr	r0, [r7, #4]
 800a652:	f000 f815 	bl	800a680 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	2202      	movs	r2, #2
 800a65a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	681a      	ldr	r2, [r3, #0]
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	3304      	adds	r3, #4
 800a666:	4619      	mov	r1, r3
 800a668:	4610      	mov	r0, r2
 800a66a:	f000 f9cf 	bl	800aa0c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	2201      	movs	r2, #1
 800a672:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a676:	2300      	movs	r3, #0
}
 800a678:	4618      	mov	r0, r3
 800a67a:	3708      	adds	r7, #8
 800a67c:	46bd      	mov	sp, r7
 800a67e:	bd80      	pop	{r7, pc}

0800a680 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800a680:	b480      	push	{r7}
 800a682:	b083      	sub	sp, #12
 800a684:	af00      	add	r7, sp, #0
 800a686:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800a688:	bf00      	nop
 800a68a:	370c      	adds	r7, #12
 800a68c:	46bd      	mov	sp, r7
 800a68e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a692:	4770      	bx	lr

0800a694 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800a694:	b580      	push	{r7, lr}
 800a696:	b084      	sub	sp, #16
 800a698:	af00      	add	r7, sp, #0
 800a69a:	6078      	str	r0, [r7, #4]
 800a69c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	681b      	ldr	r3, [r3, #0]
 800a6a2:	2201      	movs	r2, #1
 800a6a4:	6839      	ldr	r1, [r7, #0]
 800a6a6:	4618      	mov	r0, r3
 800a6a8:	f000 fc9a 	bl	800afe0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	681b      	ldr	r3, [r3, #0]
 800a6b0:	4a15      	ldr	r2, [pc, #84]	; (800a708 <HAL_TIM_PWM_Start+0x74>)
 800a6b2:	4293      	cmp	r3, r2
 800a6b4:	d004      	beq.n	800a6c0 <HAL_TIM_PWM_Start+0x2c>
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	681b      	ldr	r3, [r3, #0]
 800a6ba:	4a14      	ldr	r2, [pc, #80]	; (800a70c <HAL_TIM_PWM_Start+0x78>)
 800a6bc:	4293      	cmp	r3, r2
 800a6be:	d101      	bne.n	800a6c4 <HAL_TIM_PWM_Start+0x30>
 800a6c0:	2301      	movs	r3, #1
 800a6c2:	e000      	b.n	800a6c6 <HAL_TIM_PWM_Start+0x32>
 800a6c4:	2300      	movs	r3, #0
 800a6c6:	2b00      	cmp	r3, #0
 800a6c8:	d007      	beq.n	800a6da <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	681b      	ldr	r3, [r3, #0]
 800a6ce:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	681b      	ldr	r3, [r3, #0]
 800a6d4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800a6d8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	681b      	ldr	r3, [r3, #0]
 800a6de:	689b      	ldr	r3, [r3, #8]
 800a6e0:	f003 0307 	and.w	r3, r3, #7
 800a6e4:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a6e6:	68fb      	ldr	r3, [r7, #12]
 800a6e8:	2b06      	cmp	r3, #6
 800a6ea:	d007      	beq.n	800a6fc <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	681b      	ldr	r3, [r3, #0]
 800a6f0:	681a      	ldr	r2, [r3, #0]
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	681b      	ldr	r3, [r3, #0]
 800a6f6:	f042 0201 	orr.w	r2, r2, #1
 800a6fa:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800a6fc:	2300      	movs	r3, #0
}
 800a6fe:	4618      	mov	r0, r3
 800a700:	3710      	adds	r7, #16
 800a702:	46bd      	mov	sp, r7
 800a704:	bd80      	pop	{r7, pc}
 800a706:	bf00      	nop
 800a708:	40010000 	.word	0x40010000
 800a70c:	40010400 	.word	0x40010400

0800a710 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800a710:	b580      	push	{r7, lr}
 800a712:	b084      	sub	sp, #16
 800a714:	af00      	add	r7, sp, #0
 800a716:	60f8      	str	r0, [r7, #12]
 800a718:	60b9      	str	r1, [r7, #8]
 800a71a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800a71c:	68fb      	ldr	r3, [r7, #12]
 800a71e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a722:	2b01      	cmp	r3, #1
 800a724:	d101      	bne.n	800a72a <HAL_TIM_PWM_ConfigChannel+0x1a>
 800a726:	2302      	movs	r3, #2
 800a728:	e0b4      	b.n	800a894 <HAL_TIM_PWM_ConfigChannel+0x184>
 800a72a:	68fb      	ldr	r3, [r7, #12]
 800a72c:	2201      	movs	r2, #1
 800a72e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800a732:	68fb      	ldr	r3, [r7, #12]
 800a734:	2202      	movs	r2, #2
 800a736:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800a73a:	687b      	ldr	r3, [r7, #4]
 800a73c:	2b0c      	cmp	r3, #12
 800a73e:	f200 809f 	bhi.w	800a880 <HAL_TIM_PWM_ConfigChannel+0x170>
 800a742:	a201      	add	r2, pc, #4	; (adr r2, 800a748 <HAL_TIM_PWM_ConfigChannel+0x38>)
 800a744:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a748:	0800a77d 	.word	0x0800a77d
 800a74c:	0800a881 	.word	0x0800a881
 800a750:	0800a881 	.word	0x0800a881
 800a754:	0800a881 	.word	0x0800a881
 800a758:	0800a7bd 	.word	0x0800a7bd
 800a75c:	0800a881 	.word	0x0800a881
 800a760:	0800a881 	.word	0x0800a881
 800a764:	0800a881 	.word	0x0800a881
 800a768:	0800a7ff 	.word	0x0800a7ff
 800a76c:	0800a881 	.word	0x0800a881
 800a770:	0800a881 	.word	0x0800a881
 800a774:	0800a881 	.word	0x0800a881
 800a778:	0800a83f 	.word	0x0800a83f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800a77c:	68fb      	ldr	r3, [r7, #12]
 800a77e:	681b      	ldr	r3, [r3, #0]
 800a780:	68b9      	ldr	r1, [r7, #8]
 800a782:	4618      	mov	r0, r3
 800a784:	f000 f9e2 	bl	800ab4c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800a788:	68fb      	ldr	r3, [r7, #12]
 800a78a:	681b      	ldr	r3, [r3, #0]
 800a78c:	699a      	ldr	r2, [r3, #24]
 800a78e:	68fb      	ldr	r3, [r7, #12]
 800a790:	681b      	ldr	r3, [r3, #0]
 800a792:	f042 0208 	orr.w	r2, r2, #8
 800a796:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800a798:	68fb      	ldr	r3, [r7, #12]
 800a79a:	681b      	ldr	r3, [r3, #0]
 800a79c:	699a      	ldr	r2, [r3, #24]
 800a79e:	68fb      	ldr	r3, [r7, #12]
 800a7a0:	681b      	ldr	r3, [r3, #0]
 800a7a2:	f022 0204 	bic.w	r2, r2, #4
 800a7a6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800a7a8:	68fb      	ldr	r3, [r7, #12]
 800a7aa:	681b      	ldr	r3, [r3, #0]
 800a7ac:	6999      	ldr	r1, [r3, #24]
 800a7ae:	68bb      	ldr	r3, [r7, #8]
 800a7b0:	691a      	ldr	r2, [r3, #16]
 800a7b2:	68fb      	ldr	r3, [r7, #12]
 800a7b4:	681b      	ldr	r3, [r3, #0]
 800a7b6:	430a      	orrs	r2, r1
 800a7b8:	619a      	str	r2, [r3, #24]
      break;
 800a7ba:	e062      	b.n	800a882 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800a7bc:	68fb      	ldr	r3, [r7, #12]
 800a7be:	681b      	ldr	r3, [r3, #0]
 800a7c0:	68b9      	ldr	r1, [r7, #8]
 800a7c2:	4618      	mov	r0, r3
 800a7c4:	f000 fa32 	bl	800ac2c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800a7c8:	68fb      	ldr	r3, [r7, #12]
 800a7ca:	681b      	ldr	r3, [r3, #0]
 800a7cc:	699a      	ldr	r2, [r3, #24]
 800a7ce:	68fb      	ldr	r3, [r7, #12]
 800a7d0:	681b      	ldr	r3, [r3, #0]
 800a7d2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a7d6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800a7d8:	68fb      	ldr	r3, [r7, #12]
 800a7da:	681b      	ldr	r3, [r3, #0]
 800a7dc:	699a      	ldr	r2, [r3, #24]
 800a7de:	68fb      	ldr	r3, [r7, #12]
 800a7e0:	681b      	ldr	r3, [r3, #0]
 800a7e2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a7e6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800a7e8:	68fb      	ldr	r3, [r7, #12]
 800a7ea:	681b      	ldr	r3, [r3, #0]
 800a7ec:	6999      	ldr	r1, [r3, #24]
 800a7ee:	68bb      	ldr	r3, [r7, #8]
 800a7f0:	691b      	ldr	r3, [r3, #16]
 800a7f2:	021a      	lsls	r2, r3, #8
 800a7f4:	68fb      	ldr	r3, [r7, #12]
 800a7f6:	681b      	ldr	r3, [r3, #0]
 800a7f8:	430a      	orrs	r2, r1
 800a7fa:	619a      	str	r2, [r3, #24]
      break;
 800a7fc:	e041      	b.n	800a882 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800a7fe:	68fb      	ldr	r3, [r7, #12]
 800a800:	681b      	ldr	r3, [r3, #0]
 800a802:	68b9      	ldr	r1, [r7, #8]
 800a804:	4618      	mov	r0, r3
 800a806:	f000 fa87 	bl	800ad18 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800a80a:	68fb      	ldr	r3, [r7, #12]
 800a80c:	681b      	ldr	r3, [r3, #0]
 800a80e:	69da      	ldr	r2, [r3, #28]
 800a810:	68fb      	ldr	r3, [r7, #12]
 800a812:	681b      	ldr	r3, [r3, #0]
 800a814:	f042 0208 	orr.w	r2, r2, #8
 800a818:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800a81a:	68fb      	ldr	r3, [r7, #12]
 800a81c:	681b      	ldr	r3, [r3, #0]
 800a81e:	69da      	ldr	r2, [r3, #28]
 800a820:	68fb      	ldr	r3, [r7, #12]
 800a822:	681b      	ldr	r3, [r3, #0]
 800a824:	f022 0204 	bic.w	r2, r2, #4
 800a828:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800a82a:	68fb      	ldr	r3, [r7, #12]
 800a82c:	681b      	ldr	r3, [r3, #0]
 800a82e:	69d9      	ldr	r1, [r3, #28]
 800a830:	68bb      	ldr	r3, [r7, #8]
 800a832:	691a      	ldr	r2, [r3, #16]
 800a834:	68fb      	ldr	r3, [r7, #12]
 800a836:	681b      	ldr	r3, [r3, #0]
 800a838:	430a      	orrs	r2, r1
 800a83a:	61da      	str	r2, [r3, #28]
      break;
 800a83c:	e021      	b.n	800a882 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800a83e:	68fb      	ldr	r3, [r7, #12]
 800a840:	681b      	ldr	r3, [r3, #0]
 800a842:	68b9      	ldr	r1, [r7, #8]
 800a844:	4618      	mov	r0, r3
 800a846:	f000 fadb 	bl	800ae00 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800a84a:	68fb      	ldr	r3, [r7, #12]
 800a84c:	681b      	ldr	r3, [r3, #0]
 800a84e:	69da      	ldr	r2, [r3, #28]
 800a850:	68fb      	ldr	r3, [r7, #12]
 800a852:	681b      	ldr	r3, [r3, #0]
 800a854:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a858:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800a85a:	68fb      	ldr	r3, [r7, #12]
 800a85c:	681b      	ldr	r3, [r3, #0]
 800a85e:	69da      	ldr	r2, [r3, #28]
 800a860:	68fb      	ldr	r3, [r7, #12]
 800a862:	681b      	ldr	r3, [r3, #0]
 800a864:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a868:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800a86a:	68fb      	ldr	r3, [r7, #12]
 800a86c:	681b      	ldr	r3, [r3, #0]
 800a86e:	69d9      	ldr	r1, [r3, #28]
 800a870:	68bb      	ldr	r3, [r7, #8]
 800a872:	691b      	ldr	r3, [r3, #16]
 800a874:	021a      	lsls	r2, r3, #8
 800a876:	68fb      	ldr	r3, [r7, #12]
 800a878:	681b      	ldr	r3, [r3, #0]
 800a87a:	430a      	orrs	r2, r1
 800a87c:	61da      	str	r2, [r3, #28]
      break;
 800a87e:	e000      	b.n	800a882 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 800a880:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800a882:	68fb      	ldr	r3, [r7, #12]
 800a884:	2201      	movs	r2, #1
 800a886:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a88a:	68fb      	ldr	r3, [r7, #12]
 800a88c:	2200      	movs	r2, #0
 800a88e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a892:	2300      	movs	r3, #0
}
 800a894:	4618      	mov	r0, r3
 800a896:	3710      	adds	r7, #16
 800a898:	46bd      	mov	sp, r7
 800a89a:	bd80      	pop	{r7, pc}

0800a89c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800a89c:	b580      	push	{r7, lr}
 800a89e:	b084      	sub	sp, #16
 800a8a0:	af00      	add	r7, sp, #0
 800a8a2:	6078      	str	r0, [r7, #4]
 800a8a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a8ac:	2b01      	cmp	r3, #1
 800a8ae:	d101      	bne.n	800a8b4 <HAL_TIM_ConfigClockSource+0x18>
 800a8b0:	2302      	movs	r3, #2
 800a8b2:	e0a6      	b.n	800aa02 <HAL_TIM_ConfigClockSource+0x166>
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	2201      	movs	r2, #1
 800a8b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	2202      	movs	r2, #2
 800a8c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	681b      	ldr	r3, [r3, #0]
 800a8c8:	689b      	ldr	r3, [r3, #8]
 800a8ca:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800a8cc:	68fb      	ldr	r3, [r7, #12]
 800a8ce:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800a8d2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a8d4:	68fb      	ldr	r3, [r7, #12]
 800a8d6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a8da:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	681b      	ldr	r3, [r3, #0]
 800a8e0:	68fa      	ldr	r2, [r7, #12]
 800a8e2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800a8e4:	683b      	ldr	r3, [r7, #0]
 800a8e6:	681b      	ldr	r3, [r3, #0]
 800a8e8:	2b40      	cmp	r3, #64	; 0x40
 800a8ea:	d067      	beq.n	800a9bc <HAL_TIM_ConfigClockSource+0x120>
 800a8ec:	2b40      	cmp	r3, #64	; 0x40
 800a8ee:	d80b      	bhi.n	800a908 <HAL_TIM_ConfigClockSource+0x6c>
 800a8f0:	2b10      	cmp	r3, #16
 800a8f2:	d073      	beq.n	800a9dc <HAL_TIM_ConfigClockSource+0x140>
 800a8f4:	2b10      	cmp	r3, #16
 800a8f6:	d802      	bhi.n	800a8fe <HAL_TIM_ConfigClockSource+0x62>
 800a8f8:	2b00      	cmp	r3, #0
 800a8fa:	d06f      	beq.n	800a9dc <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 800a8fc:	e078      	b.n	800a9f0 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800a8fe:	2b20      	cmp	r3, #32
 800a900:	d06c      	beq.n	800a9dc <HAL_TIM_ConfigClockSource+0x140>
 800a902:	2b30      	cmp	r3, #48	; 0x30
 800a904:	d06a      	beq.n	800a9dc <HAL_TIM_ConfigClockSource+0x140>
      break;
 800a906:	e073      	b.n	800a9f0 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800a908:	2b70      	cmp	r3, #112	; 0x70
 800a90a:	d00d      	beq.n	800a928 <HAL_TIM_ConfigClockSource+0x8c>
 800a90c:	2b70      	cmp	r3, #112	; 0x70
 800a90e:	d804      	bhi.n	800a91a <HAL_TIM_ConfigClockSource+0x7e>
 800a910:	2b50      	cmp	r3, #80	; 0x50
 800a912:	d033      	beq.n	800a97c <HAL_TIM_ConfigClockSource+0xe0>
 800a914:	2b60      	cmp	r3, #96	; 0x60
 800a916:	d041      	beq.n	800a99c <HAL_TIM_ConfigClockSource+0x100>
      break;
 800a918:	e06a      	b.n	800a9f0 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800a91a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a91e:	d066      	beq.n	800a9ee <HAL_TIM_ConfigClockSource+0x152>
 800a920:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a924:	d017      	beq.n	800a956 <HAL_TIM_ConfigClockSource+0xba>
      break;
 800a926:	e063      	b.n	800a9f0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	6818      	ldr	r0, [r3, #0]
 800a92c:	683b      	ldr	r3, [r7, #0]
 800a92e:	6899      	ldr	r1, [r3, #8]
 800a930:	683b      	ldr	r3, [r7, #0]
 800a932:	685a      	ldr	r2, [r3, #4]
 800a934:	683b      	ldr	r3, [r7, #0]
 800a936:	68db      	ldr	r3, [r3, #12]
 800a938:	f000 fb32 	bl	800afa0 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800a93c:	687b      	ldr	r3, [r7, #4]
 800a93e:	681b      	ldr	r3, [r3, #0]
 800a940:	689b      	ldr	r3, [r3, #8]
 800a942:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800a944:	68fb      	ldr	r3, [r7, #12]
 800a946:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800a94a:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	681b      	ldr	r3, [r3, #0]
 800a950:	68fa      	ldr	r2, [r7, #12]
 800a952:	609a      	str	r2, [r3, #8]
      break;
 800a954:	e04c      	b.n	800a9f0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800a956:	687b      	ldr	r3, [r7, #4]
 800a958:	6818      	ldr	r0, [r3, #0]
 800a95a:	683b      	ldr	r3, [r7, #0]
 800a95c:	6899      	ldr	r1, [r3, #8]
 800a95e:	683b      	ldr	r3, [r7, #0]
 800a960:	685a      	ldr	r2, [r3, #4]
 800a962:	683b      	ldr	r3, [r7, #0]
 800a964:	68db      	ldr	r3, [r3, #12]
 800a966:	f000 fb1b 	bl	800afa0 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	681b      	ldr	r3, [r3, #0]
 800a96e:	689a      	ldr	r2, [r3, #8]
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	681b      	ldr	r3, [r3, #0]
 800a974:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a978:	609a      	str	r2, [r3, #8]
      break;
 800a97a:	e039      	b.n	800a9f0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	6818      	ldr	r0, [r3, #0]
 800a980:	683b      	ldr	r3, [r7, #0]
 800a982:	6859      	ldr	r1, [r3, #4]
 800a984:	683b      	ldr	r3, [r7, #0]
 800a986:	68db      	ldr	r3, [r3, #12]
 800a988:	461a      	mov	r2, r3
 800a98a:	f000 fa8f 	bl	800aeac <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800a98e:	687b      	ldr	r3, [r7, #4]
 800a990:	681b      	ldr	r3, [r3, #0]
 800a992:	2150      	movs	r1, #80	; 0x50
 800a994:	4618      	mov	r0, r3
 800a996:	f000 fae8 	bl	800af6a <TIM_ITRx_SetConfig>
      break;
 800a99a:	e029      	b.n	800a9f0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	6818      	ldr	r0, [r3, #0]
 800a9a0:	683b      	ldr	r3, [r7, #0]
 800a9a2:	6859      	ldr	r1, [r3, #4]
 800a9a4:	683b      	ldr	r3, [r7, #0]
 800a9a6:	68db      	ldr	r3, [r3, #12]
 800a9a8:	461a      	mov	r2, r3
 800a9aa:	f000 faae 	bl	800af0a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800a9ae:	687b      	ldr	r3, [r7, #4]
 800a9b0:	681b      	ldr	r3, [r3, #0]
 800a9b2:	2160      	movs	r1, #96	; 0x60
 800a9b4:	4618      	mov	r0, r3
 800a9b6:	f000 fad8 	bl	800af6a <TIM_ITRx_SetConfig>
      break;
 800a9ba:	e019      	b.n	800a9f0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	6818      	ldr	r0, [r3, #0]
 800a9c0:	683b      	ldr	r3, [r7, #0]
 800a9c2:	6859      	ldr	r1, [r3, #4]
 800a9c4:	683b      	ldr	r3, [r7, #0]
 800a9c6:	68db      	ldr	r3, [r3, #12]
 800a9c8:	461a      	mov	r2, r3
 800a9ca:	f000 fa6f 	bl	800aeac <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800a9ce:	687b      	ldr	r3, [r7, #4]
 800a9d0:	681b      	ldr	r3, [r3, #0]
 800a9d2:	2140      	movs	r1, #64	; 0x40
 800a9d4:	4618      	mov	r0, r3
 800a9d6:	f000 fac8 	bl	800af6a <TIM_ITRx_SetConfig>
      break;
 800a9da:	e009      	b.n	800a9f0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	681a      	ldr	r2, [r3, #0]
 800a9e0:	683b      	ldr	r3, [r7, #0]
 800a9e2:	681b      	ldr	r3, [r3, #0]
 800a9e4:	4619      	mov	r1, r3
 800a9e6:	4610      	mov	r0, r2
 800a9e8:	f000 fabf 	bl	800af6a <TIM_ITRx_SetConfig>
      break;
 800a9ec:	e000      	b.n	800a9f0 <HAL_TIM_ConfigClockSource+0x154>
      break;
 800a9ee:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	2201      	movs	r2, #1
 800a9f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	2200      	movs	r2, #0
 800a9fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800aa00:	2300      	movs	r3, #0
}
 800aa02:	4618      	mov	r0, r3
 800aa04:	3710      	adds	r7, #16
 800aa06:	46bd      	mov	sp, r7
 800aa08:	bd80      	pop	{r7, pc}
	...

0800aa0c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800aa0c:	b480      	push	{r7}
 800aa0e:	b085      	sub	sp, #20
 800aa10:	af00      	add	r7, sp, #0
 800aa12:	6078      	str	r0, [r7, #4]
 800aa14:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	681b      	ldr	r3, [r3, #0]
 800aa1a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	4a40      	ldr	r2, [pc, #256]	; (800ab20 <TIM_Base_SetConfig+0x114>)
 800aa20:	4293      	cmp	r3, r2
 800aa22:	d013      	beq.n	800aa4c <TIM_Base_SetConfig+0x40>
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800aa2a:	d00f      	beq.n	800aa4c <TIM_Base_SetConfig+0x40>
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	4a3d      	ldr	r2, [pc, #244]	; (800ab24 <TIM_Base_SetConfig+0x118>)
 800aa30:	4293      	cmp	r3, r2
 800aa32:	d00b      	beq.n	800aa4c <TIM_Base_SetConfig+0x40>
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	4a3c      	ldr	r2, [pc, #240]	; (800ab28 <TIM_Base_SetConfig+0x11c>)
 800aa38:	4293      	cmp	r3, r2
 800aa3a:	d007      	beq.n	800aa4c <TIM_Base_SetConfig+0x40>
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	4a3b      	ldr	r2, [pc, #236]	; (800ab2c <TIM_Base_SetConfig+0x120>)
 800aa40:	4293      	cmp	r3, r2
 800aa42:	d003      	beq.n	800aa4c <TIM_Base_SetConfig+0x40>
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	4a3a      	ldr	r2, [pc, #232]	; (800ab30 <TIM_Base_SetConfig+0x124>)
 800aa48:	4293      	cmp	r3, r2
 800aa4a:	d108      	bne.n	800aa5e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800aa4c:	68fb      	ldr	r3, [r7, #12]
 800aa4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800aa52:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800aa54:	683b      	ldr	r3, [r7, #0]
 800aa56:	685b      	ldr	r3, [r3, #4]
 800aa58:	68fa      	ldr	r2, [r7, #12]
 800aa5a:	4313      	orrs	r3, r2
 800aa5c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800aa5e:	687b      	ldr	r3, [r7, #4]
 800aa60:	4a2f      	ldr	r2, [pc, #188]	; (800ab20 <TIM_Base_SetConfig+0x114>)
 800aa62:	4293      	cmp	r3, r2
 800aa64:	d02b      	beq.n	800aabe <TIM_Base_SetConfig+0xb2>
 800aa66:	687b      	ldr	r3, [r7, #4]
 800aa68:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800aa6c:	d027      	beq.n	800aabe <TIM_Base_SetConfig+0xb2>
 800aa6e:	687b      	ldr	r3, [r7, #4]
 800aa70:	4a2c      	ldr	r2, [pc, #176]	; (800ab24 <TIM_Base_SetConfig+0x118>)
 800aa72:	4293      	cmp	r3, r2
 800aa74:	d023      	beq.n	800aabe <TIM_Base_SetConfig+0xb2>
 800aa76:	687b      	ldr	r3, [r7, #4]
 800aa78:	4a2b      	ldr	r2, [pc, #172]	; (800ab28 <TIM_Base_SetConfig+0x11c>)
 800aa7a:	4293      	cmp	r3, r2
 800aa7c:	d01f      	beq.n	800aabe <TIM_Base_SetConfig+0xb2>
 800aa7e:	687b      	ldr	r3, [r7, #4]
 800aa80:	4a2a      	ldr	r2, [pc, #168]	; (800ab2c <TIM_Base_SetConfig+0x120>)
 800aa82:	4293      	cmp	r3, r2
 800aa84:	d01b      	beq.n	800aabe <TIM_Base_SetConfig+0xb2>
 800aa86:	687b      	ldr	r3, [r7, #4]
 800aa88:	4a29      	ldr	r2, [pc, #164]	; (800ab30 <TIM_Base_SetConfig+0x124>)
 800aa8a:	4293      	cmp	r3, r2
 800aa8c:	d017      	beq.n	800aabe <TIM_Base_SetConfig+0xb2>
 800aa8e:	687b      	ldr	r3, [r7, #4]
 800aa90:	4a28      	ldr	r2, [pc, #160]	; (800ab34 <TIM_Base_SetConfig+0x128>)
 800aa92:	4293      	cmp	r3, r2
 800aa94:	d013      	beq.n	800aabe <TIM_Base_SetConfig+0xb2>
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	4a27      	ldr	r2, [pc, #156]	; (800ab38 <TIM_Base_SetConfig+0x12c>)
 800aa9a:	4293      	cmp	r3, r2
 800aa9c:	d00f      	beq.n	800aabe <TIM_Base_SetConfig+0xb2>
 800aa9e:	687b      	ldr	r3, [r7, #4]
 800aaa0:	4a26      	ldr	r2, [pc, #152]	; (800ab3c <TIM_Base_SetConfig+0x130>)
 800aaa2:	4293      	cmp	r3, r2
 800aaa4:	d00b      	beq.n	800aabe <TIM_Base_SetConfig+0xb2>
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	4a25      	ldr	r2, [pc, #148]	; (800ab40 <TIM_Base_SetConfig+0x134>)
 800aaaa:	4293      	cmp	r3, r2
 800aaac:	d007      	beq.n	800aabe <TIM_Base_SetConfig+0xb2>
 800aaae:	687b      	ldr	r3, [r7, #4]
 800aab0:	4a24      	ldr	r2, [pc, #144]	; (800ab44 <TIM_Base_SetConfig+0x138>)
 800aab2:	4293      	cmp	r3, r2
 800aab4:	d003      	beq.n	800aabe <TIM_Base_SetConfig+0xb2>
 800aab6:	687b      	ldr	r3, [r7, #4]
 800aab8:	4a23      	ldr	r2, [pc, #140]	; (800ab48 <TIM_Base_SetConfig+0x13c>)
 800aaba:	4293      	cmp	r3, r2
 800aabc:	d108      	bne.n	800aad0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800aabe:	68fb      	ldr	r3, [r7, #12]
 800aac0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800aac4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800aac6:	683b      	ldr	r3, [r7, #0]
 800aac8:	68db      	ldr	r3, [r3, #12]
 800aaca:	68fa      	ldr	r2, [r7, #12]
 800aacc:	4313      	orrs	r3, r2
 800aace:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800aad0:	68fb      	ldr	r3, [r7, #12]
 800aad2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800aad6:	683b      	ldr	r3, [r7, #0]
 800aad8:	695b      	ldr	r3, [r3, #20]
 800aada:	4313      	orrs	r3, r2
 800aadc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	68fa      	ldr	r2, [r7, #12]
 800aae2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800aae4:	683b      	ldr	r3, [r7, #0]
 800aae6:	689a      	ldr	r2, [r3, #8]
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800aaec:	683b      	ldr	r3, [r7, #0]
 800aaee:	681a      	ldr	r2, [r3, #0]
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	4a0a      	ldr	r2, [pc, #40]	; (800ab20 <TIM_Base_SetConfig+0x114>)
 800aaf8:	4293      	cmp	r3, r2
 800aafa:	d003      	beq.n	800ab04 <TIM_Base_SetConfig+0xf8>
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	4a0c      	ldr	r2, [pc, #48]	; (800ab30 <TIM_Base_SetConfig+0x124>)
 800ab00:	4293      	cmp	r3, r2
 800ab02:	d103      	bne.n	800ab0c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800ab04:	683b      	ldr	r3, [r7, #0]
 800ab06:	691a      	ldr	r2, [r3, #16]
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	2201      	movs	r2, #1
 800ab10:	615a      	str	r2, [r3, #20]
}
 800ab12:	bf00      	nop
 800ab14:	3714      	adds	r7, #20
 800ab16:	46bd      	mov	sp, r7
 800ab18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab1c:	4770      	bx	lr
 800ab1e:	bf00      	nop
 800ab20:	40010000 	.word	0x40010000
 800ab24:	40000400 	.word	0x40000400
 800ab28:	40000800 	.word	0x40000800
 800ab2c:	40000c00 	.word	0x40000c00
 800ab30:	40010400 	.word	0x40010400
 800ab34:	40014000 	.word	0x40014000
 800ab38:	40014400 	.word	0x40014400
 800ab3c:	40014800 	.word	0x40014800
 800ab40:	40001800 	.word	0x40001800
 800ab44:	40001c00 	.word	0x40001c00
 800ab48:	40002000 	.word	0x40002000

0800ab4c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800ab4c:	b480      	push	{r7}
 800ab4e:	b087      	sub	sp, #28
 800ab50:	af00      	add	r7, sp, #0
 800ab52:	6078      	str	r0, [r7, #4]
 800ab54:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ab56:	687b      	ldr	r3, [r7, #4]
 800ab58:	6a1b      	ldr	r3, [r3, #32]
 800ab5a:	f023 0201 	bic.w	r2, r3, #1
 800ab5e:	687b      	ldr	r3, [r7, #4]
 800ab60:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ab62:	687b      	ldr	r3, [r7, #4]
 800ab64:	6a1b      	ldr	r3, [r3, #32]
 800ab66:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	685b      	ldr	r3, [r3, #4]
 800ab6c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800ab6e:	687b      	ldr	r3, [r7, #4]
 800ab70:	699b      	ldr	r3, [r3, #24]
 800ab72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800ab74:	68fb      	ldr	r3, [r7, #12]
 800ab76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ab7a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800ab7c:	68fb      	ldr	r3, [r7, #12]
 800ab7e:	f023 0303 	bic.w	r3, r3, #3
 800ab82:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ab84:	683b      	ldr	r3, [r7, #0]
 800ab86:	681b      	ldr	r3, [r3, #0]
 800ab88:	68fa      	ldr	r2, [r7, #12]
 800ab8a:	4313      	orrs	r3, r2
 800ab8c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800ab8e:	697b      	ldr	r3, [r7, #20]
 800ab90:	f023 0302 	bic.w	r3, r3, #2
 800ab94:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800ab96:	683b      	ldr	r3, [r7, #0]
 800ab98:	689b      	ldr	r3, [r3, #8]
 800ab9a:	697a      	ldr	r2, [r7, #20]
 800ab9c:	4313      	orrs	r3, r2
 800ab9e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800aba0:	687b      	ldr	r3, [r7, #4]
 800aba2:	4a20      	ldr	r2, [pc, #128]	; (800ac24 <TIM_OC1_SetConfig+0xd8>)
 800aba4:	4293      	cmp	r3, r2
 800aba6:	d003      	beq.n	800abb0 <TIM_OC1_SetConfig+0x64>
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	4a1f      	ldr	r2, [pc, #124]	; (800ac28 <TIM_OC1_SetConfig+0xdc>)
 800abac:	4293      	cmp	r3, r2
 800abae:	d10c      	bne.n	800abca <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800abb0:	697b      	ldr	r3, [r7, #20]
 800abb2:	f023 0308 	bic.w	r3, r3, #8
 800abb6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800abb8:	683b      	ldr	r3, [r7, #0]
 800abba:	68db      	ldr	r3, [r3, #12]
 800abbc:	697a      	ldr	r2, [r7, #20]
 800abbe:	4313      	orrs	r3, r2
 800abc0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800abc2:	697b      	ldr	r3, [r7, #20]
 800abc4:	f023 0304 	bic.w	r3, r3, #4
 800abc8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	4a15      	ldr	r2, [pc, #84]	; (800ac24 <TIM_OC1_SetConfig+0xd8>)
 800abce:	4293      	cmp	r3, r2
 800abd0:	d003      	beq.n	800abda <TIM_OC1_SetConfig+0x8e>
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	4a14      	ldr	r2, [pc, #80]	; (800ac28 <TIM_OC1_SetConfig+0xdc>)
 800abd6:	4293      	cmp	r3, r2
 800abd8:	d111      	bne.n	800abfe <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800abda:	693b      	ldr	r3, [r7, #16]
 800abdc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800abe0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800abe2:	693b      	ldr	r3, [r7, #16]
 800abe4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800abe8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800abea:	683b      	ldr	r3, [r7, #0]
 800abec:	695b      	ldr	r3, [r3, #20]
 800abee:	693a      	ldr	r2, [r7, #16]
 800abf0:	4313      	orrs	r3, r2
 800abf2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800abf4:	683b      	ldr	r3, [r7, #0]
 800abf6:	699b      	ldr	r3, [r3, #24]
 800abf8:	693a      	ldr	r2, [r7, #16]
 800abfa:	4313      	orrs	r3, r2
 800abfc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	693a      	ldr	r2, [r7, #16]
 800ac02:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	68fa      	ldr	r2, [r7, #12]
 800ac08:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800ac0a:	683b      	ldr	r3, [r7, #0]
 800ac0c:	685a      	ldr	r2, [r3, #4]
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ac12:	687b      	ldr	r3, [r7, #4]
 800ac14:	697a      	ldr	r2, [r7, #20]
 800ac16:	621a      	str	r2, [r3, #32]
}
 800ac18:	bf00      	nop
 800ac1a:	371c      	adds	r7, #28
 800ac1c:	46bd      	mov	sp, r7
 800ac1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac22:	4770      	bx	lr
 800ac24:	40010000 	.word	0x40010000
 800ac28:	40010400 	.word	0x40010400

0800ac2c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800ac2c:	b480      	push	{r7}
 800ac2e:	b087      	sub	sp, #28
 800ac30:	af00      	add	r7, sp, #0
 800ac32:	6078      	str	r0, [r7, #4]
 800ac34:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800ac36:	687b      	ldr	r3, [r7, #4]
 800ac38:	6a1b      	ldr	r3, [r3, #32]
 800ac3a:	f023 0210 	bic.w	r2, r3, #16
 800ac3e:	687b      	ldr	r3, [r7, #4]
 800ac40:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	6a1b      	ldr	r3, [r3, #32]
 800ac46:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	685b      	ldr	r3, [r3, #4]
 800ac4c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800ac4e:	687b      	ldr	r3, [r7, #4]
 800ac50:	699b      	ldr	r3, [r3, #24]
 800ac52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800ac54:	68fb      	ldr	r3, [r7, #12]
 800ac56:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ac5a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800ac5c:	68fb      	ldr	r3, [r7, #12]
 800ac5e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ac62:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ac64:	683b      	ldr	r3, [r7, #0]
 800ac66:	681b      	ldr	r3, [r3, #0]
 800ac68:	021b      	lsls	r3, r3, #8
 800ac6a:	68fa      	ldr	r2, [r7, #12]
 800ac6c:	4313      	orrs	r3, r2
 800ac6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800ac70:	697b      	ldr	r3, [r7, #20]
 800ac72:	f023 0320 	bic.w	r3, r3, #32
 800ac76:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800ac78:	683b      	ldr	r3, [r7, #0]
 800ac7a:	689b      	ldr	r3, [r3, #8]
 800ac7c:	011b      	lsls	r3, r3, #4
 800ac7e:	697a      	ldr	r2, [r7, #20]
 800ac80:	4313      	orrs	r3, r2
 800ac82:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800ac84:	687b      	ldr	r3, [r7, #4]
 800ac86:	4a22      	ldr	r2, [pc, #136]	; (800ad10 <TIM_OC2_SetConfig+0xe4>)
 800ac88:	4293      	cmp	r3, r2
 800ac8a:	d003      	beq.n	800ac94 <TIM_OC2_SetConfig+0x68>
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	4a21      	ldr	r2, [pc, #132]	; (800ad14 <TIM_OC2_SetConfig+0xe8>)
 800ac90:	4293      	cmp	r3, r2
 800ac92:	d10d      	bne.n	800acb0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800ac94:	697b      	ldr	r3, [r7, #20]
 800ac96:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ac9a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800ac9c:	683b      	ldr	r3, [r7, #0]
 800ac9e:	68db      	ldr	r3, [r3, #12]
 800aca0:	011b      	lsls	r3, r3, #4
 800aca2:	697a      	ldr	r2, [r7, #20]
 800aca4:	4313      	orrs	r3, r2
 800aca6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800aca8:	697b      	ldr	r3, [r7, #20]
 800acaa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800acae:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	4a17      	ldr	r2, [pc, #92]	; (800ad10 <TIM_OC2_SetConfig+0xe4>)
 800acb4:	4293      	cmp	r3, r2
 800acb6:	d003      	beq.n	800acc0 <TIM_OC2_SetConfig+0x94>
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	4a16      	ldr	r2, [pc, #88]	; (800ad14 <TIM_OC2_SetConfig+0xe8>)
 800acbc:	4293      	cmp	r3, r2
 800acbe:	d113      	bne.n	800ace8 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800acc0:	693b      	ldr	r3, [r7, #16]
 800acc2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800acc6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800acc8:	693b      	ldr	r3, [r7, #16]
 800acca:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800acce:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800acd0:	683b      	ldr	r3, [r7, #0]
 800acd2:	695b      	ldr	r3, [r3, #20]
 800acd4:	009b      	lsls	r3, r3, #2
 800acd6:	693a      	ldr	r2, [r7, #16]
 800acd8:	4313      	orrs	r3, r2
 800acda:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800acdc:	683b      	ldr	r3, [r7, #0]
 800acde:	699b      	ldr	r3, [r3, #24]
 800ace0:	009b      	lsls	r3, r3, #2
 800ace2:	693a      	ldr	r2, [r7, #16]
 800ace4:	4313      	orrs	r3, r2
 800ace6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	693a      	ldr	r2, [r7, #16]
 800acec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	68fa      	ldr	r2, [r7, #12]
 800acf2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800acf4:	683b      	ldr	r3, [r7, #0]
 800acf6:	685a      	ldr	r2, [r3, #4]
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	697a      	ldr	r2, [r7, #20]
 800ad00:	621a      	str	r2, [r3, #32]
}
 800ad02:	bf00      	nop
 800ad04:	371c      	adds	r7, #28
 800ad06:	46bd      	mov	sp, r7
 800ad08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad0c:	4770      	bx	lr
 800ad0e:	bf00      	nop
 800ad10:	40010000 	.word	0x40010000
 800ad14:	40010400 	.word	0x40010400

0800ad18 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800ad18:	b480      	push	{r7}
 800ad1a:	b087      	sub	sp, #28
 800ad1c:	af00      	add	r7, sp, #0
 800ad1e:	6078      	str	r0, [r7, #4]
 800ad20:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800ad22:	687b      	ldr	r3, [r7, #4]
 800ad24:	6a1b      	ldr	r3, [r3, #32]
 800ad26:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800ad2a:	687b      	ldr	r3, [r7, #4]
 800ad2c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ad2e:	687b      	ldr	r3, [r7, #4]
 800ad30:	6a1b      	ldr	r3, [r3, #32]
 800ad32:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	685b      	ldr	r3, [r3, #4]
 800ad38:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800ad3a:	687b      	ldr	r3, [r7, #4]
 800ad3c:	69db      	ldr	r3, [r3, #28]
 800ad3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800ad40:	68fb      	ldr	r3, [r7, #12]
 800ad42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ad46:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800ad48:	68fb      	ldr	r3, [r7, #12]
 800ad4a:	f023 0303 	bic.w	r3, r3, #3
 800ad4e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ad50:	683b      	ldr	r3, [r7, #0]
 800ad52:	681b      	ldr	r3, [r3, #0]
 800ad54:	68fa      	ldr	r2, [r7, #12]
 800ad56:	4313      	orrs	r3, r2
 800ad58:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800ad5a:	697b      	ldr	r3, [r7, #20]
 800ad5c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800ad60:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800ad62:	683b      	ldr	r3, [r7, #0]
 800ad64:	689b      	ldr	r3, [r3, #8]
 800ad66:	021b      	lsls	r3, r3, #8
 800ad68:	697a      	ldr	r2, [r7, #20]
 800ad6a:	4313      	orrs	r3, r2
 800ad6c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800ad6e:	687b      	ldr	r3, [r7, #4]
 800ad70:	4a21      	ldr	r2, [pc, #132]	; (800adf8 <TIM_OC3_SetConfig+0xe0>)
 800ad72:	4293      	cmp	r3, r2
 800ad74:	d003      	beq.n	800ad7e <TIM_OC3_SetConfig+0x66>
 800ad76:	687b      	ldr	r3, [r7, #4]
 800ad78:	4a20      	ldr	r2, [pc, #128]	; (800adfc <TIM_OC3_SetConfig+0xe4>)
 800ad7a:	4293      	cmp	r3, r2
 800ad7c:	d10d      	bne.n	800ad9a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800ad7e:	697b      	ldr	r3, [r7, #20]
 800ad80:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800ad84:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800ad86:	683b      	ldr	r3, [r7, #0]
 800ad88:	68db      	ldr	r3, [r3, #12]
 800ad8a:	021b      	lsls	r3, r3, #8
 800ad8c:	697a      	ldr	r2, [r7, #20]
 800ad8e:	4313      	orrs	r3, r2
 800ad90:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800ad92:	697b      	ldr	r3, [r7, #20]
 800ad94:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800ad98:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ad9a:	687b      	ldr	r3, [r7, #4]
 800ad9c:	4a16      	ldr	r2, [pc, #88]	; (800adf8 <TIM_OC3_SetConfig+0xe0>)
 800ad9e:	4293      	cmp	r3, r2
 800ada0:	d003      	beq.n	800adaa <TIM_OC3_SetConfig+0x92>
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	4a15      	ldr	r2, [pc, #84]	; (800adfc <TIM_OC3_SetConfig+0xe4>)
 800ada6:	4293      	cmp	r3, r2
 800ada8:	d113      	bne.n	800add2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800adaa:	693b      	ldr	r3, [r7, #16]
 800adac:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800adb0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800adb2:	693b      	ldr	r3, [r7, #16]
 800adb4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800adb8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800adba:	683b      	ldr	r3, [r7, #0]
 800adbc:	695b      	ldr	r3, [r3, #20]
 800adbe:	011b      	lsls	r3, r3, #4
 800adc0:	693a      	ldr	r2, [r7, #16]
 800adc2:	4313      	orrs	r3, r2
 800adc4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800adc6:	683b      	ldr	r3, [r7, #0]
 800adc8:	699b      	ldr	r3, [r3, #24]
 800adca:	011b      	lsls	r3, r3, #4
 800adcc:	693a      	ldr	r2, [r7, #16]
 800adce:	4313      	orrs	r3, r2
 800add0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800add2:	687b      	ldr	r3, [r7, #4]
 800add4:	693a      	ldr	r2, [r7, #16]
 800add6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	68fa      	ldr	r2, [r7, #12]
 800addc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800adde:	683b      	ldr	r3, [r7, #0]
 800ade0:	685a      	ldr	r2, [r3, #4]
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ade6:	687b      	ldr	r3, [r7, #4]
 800ade8:	697a      	ldr	r2, [r7, #20]
 800adea:	621a      	str	r2, [r3, #32]
}
 800adec:	bf00      	nop
 800adee:	371c      	adds	r7, #28
 800adf0:	46bd      	mov	sp, r7
 800adf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adf6:	4770      	bx	lr
 800adf8:	40010000 	.word	0x40010000
 800adfc:	40010400 	.word	0x40010400

0800ae00 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800ae00:	b480      	push	{r7}
 800ae02:	b087      	sub	sp, #28
 800ae04:	af00      	add	r7, sp, #0
 800ae06:	6078      	str	r0, [r7, #4]
 800ae08:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800ae0a:	687b      	ldr	r3, [r7, #4]
 800ae0c:	6a1b      	ldr	r3, [r3, #32]
 800ae0e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800ae12:	687b      	ldr	r3, [r7, #4]
 800ae14:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ae16:	687b      	ldr	r3, [r7, #4]
 800ae18:	6a1b      	ldr	r3, [r3, #32]
 800ae1a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ae1c:	687b      	ldr	r3, [r7, #4]
 800ae1e:	685b      	ldr	r3, [r3, #4]
 800ae20:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800ae22:	687b      	ldr	r3, [r7, #4]
 800ae24:	69db      	ldr	r3, [r3, #28]
 800ae26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800ae28:	68fb      	ldr	r3, [r7, #12]
 800ae2a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ae2e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800ae30:	68fb      	ldr	r3, [r7, #12]
 800ae32:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ae36:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ae38:	683b      	ldr	r3, [r7, #0]
 800ae3a:	681b      	ldr	r3, [r3, #0]
 800ae3c:	021b      	lsls	r3, r3, #8
 800ae3e:	68fa      	ldr	r2, [r7, #12]
 800ae40:	4313      	orrs	r3, r2
 800ae42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800ae44:	693b      	ldr	r3, [r7, #16]
 800ae46:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800ae4a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800ae4c:	683b      	ldr	r3, [r7, #0]
 800ae4e:	689b      	ldr	r3, [r3, #8]
 800ae50:	031b      	lsls	r3, r3, #12
 800ae52:	693a      	ldr	r2, [r7, #16]
 800ae54:	4313      	orrs	r3, r2
 800ae56:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ae58:	687b      	ldr	r3, [r7, #4]
 800ae5a:	4a12      	ldr	r2, [pc, #72]	; (800aea4 <TIM_OC4_SetConfig+0xa4>)
 800ae5c:	4293      	cmp	r3, r2
 800ae5e:	d003      	beq.n	800ae68 <TIM_OC4_SetConfig+0x68>
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	4a11      	ldr	r2, [pc, #68]	; (800aea8 <TIM_OC4_SetConfig+0xa8>)
 800ae64:	4293      	cmp	r3, r2
 800ae66:	d109      	bne.n	800ae7c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800ae68:	697b      	ldr	r3, [r7, #20]
 800ae6a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800ae6e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800ae70:	683b      	ldr	r3, [r7, #0]
 800ae72:	695b      	ldr	r3, [r3, #20]
 800ae74:	019b      	lsls	r3, r3, #6
 800ae76:	697a      	ldr	r2, [r7, #20]
 800ae78:	4313      	orrs	r3, r2
 800ae7a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	697a      	ldr	r2, [r7, #20]
 800ae80:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800ae82:	687b      	ldr	r3, [r7, #4]
 800ae84:	68fa      	ldr	r2, [r7, #12]
 800ae86:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800ae88:	683b      	ldr	r3, [r7, #0]
 800ae8a:	685a      	ldr	r2, [r3, #4]
 800ae8c:	687b      	ldr	r3, [r7, #4]
 800ae8e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	693a      	ldr	r2, [r7, #16]
 800ae94:	621a      	str	r2, [r3, #32]
}
 800ae96:	bf00      	nop
 800ae98:	371c      	adds	r7, #28
 800ae9a:	46bd      	mov	sp, r7
 800ae9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aea0:	4770      	bx	lr
 800aea2:	bf00      	nop
 800aea4:	40010000 	.word	0x40010000
 800aea8:	40010400 	.word	0x40010400

0800aeac <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800aeac:	b480      	push	{r7}
 800aeae:	b087      	sub	sp, #28
 800aeb0:	af00      	add	r7, sp, #0
 800aeb2:	60f8      	str	r0, [r7, #12]
 800aeb4:	60b9      	str	r1, [r7, #8]
 800aeb6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800aeb8:	68fb      	ldr	r3, [r7, #12]
 800aeba:	6a1b      	ldr	r3, [r3, #32]
 800aebc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800aebe:	68fb      	ldr	r3, [r7, #12]
 800aec0:	6a1b      	ldr	r3, [r3, #32]
 800aec2:	f023 0201 	bic.w	r2, r3, #1
 800aec6:	68fb      	ldr	r3, [r7, #12]
 800aec8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800aeca:	68fb      	ldr	r3, [r7, #12]
 800aecc:	699b      	ldr	r3, [r3, #24]
 800aece:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800aed0:	693b      	ldr	r3, [r7, #16]
 800aed2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800aed6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800aed8:	687b      	ldr	r3, [r7, #4]
 800aeda:	011b      	lsls	r3, r3, #4
 800aedc:	693a      	ldr	r2, [r7, #16]
 800aede:	4313      	orrs	r3, r2
 800aee0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800aee2:	697b      	ldr	r3, [r7, #20]
 800aee4:	f023 030a 	bic.w	r3, r3, #10
 800aee8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800aeea:	697a      	ldr	r2, [r7, #20]
 800aeec:	68bb      	ldr	r3, [r7, #8]
 800aeee:	4313      	orrs	r3, r2
 800aef0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800aef2:	68fb      	ldr	r3, [r7, #12]
 800aef4:	693a      	ldr	r2, [r7, #16]
 800aef6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800aef8:	68fb      	ldr	r3, [r7, #12]
 800aefa:	697a      	ldr	r2, [r7, #20]
 800aefc:	621a      	str	r2, [r3, #32]
}
 800aefe:	bf00      	nop
 800af00:	371c      	adds	r7, #28
 800af02:	46bd      	mov	sp, r7
 800af04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af08:	4770      	bx	lr

0800af0a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800af0a:	b480      	push	{r7}
 800af0c:	b087      	sub	sp, #28
 800af0e:	af00      	add	r7, sp, #0
 800af10:	60f8      	str	r0, [r7, #12]
 800af12:	60b9      	str	r1, [r7, #8]
 800af14:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800af16:	68fb      	ldr	r3, [r7, #12]
 800af18:	6a1b      	ldr	r3, [r3, #32]
 800af1a:	f023 0210 	bic.w	r2, r3, #16
 800af1e:	68fb      	ldr	r3, [r7, #12]
 800af20:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800af22:	68fb      	ldr	r3, [r7, #12]
 800af24:	699b      	ldr	r3, [r3, #24]
 800af26:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800af28:	68fb      	ldr	r3, [r7, #12]
 800af2a:	6a1b      	ldr	r3, [r3, #32]
 800af2c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800af2e:	697b      	ldr	r3, [r7, #20]
 800af30:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800af34:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800af36:	687b      	ldr	r3, [r7, #4]
 800af38:	031b      	lsls	r3, r3, #12
 800af3a:	697a      	ldr	r2, [r7, #20]
 800af3c:	4313      	orrs	r3, r2
 800af3e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800af40:	693b      	ldr	r3, [r7, #16]
 800af42:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800af46:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800af48:	68bb      	ldr	r3, [r7, #8]
 800af4a:	011b      	lsls	r3, r3, #4
 800af4c:	693a      	ldr	r2, [r7, #16]
 800af4e:	4313      	orrs	r3, r2
 800af50:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800af52:	68fb      	ldr	r3, [r7, #12]
 800af54:	697a      	ldr	r2, [r7, #20]
 800af56:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800af58:	68fb      	ldr	r3, [r7, #12]
 800af5a:	693a      	ldr	r2, [r7, #16]
 800af5c:	621a      	str	r2, [r3, #32]
}
 800af5e:	bf00      	nop
 800af60:	371c      	adds	r7, #28
 800af62:	46bd      	mov	sp, r7
 800af64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af68:	4770      	bx	lr

0800af6a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800af6a:	b480      	push	{r7}
 800af6c:	b085      	sub	sp, #20
 800af6e:	af00      	add	r7, sp, #0
 800af70:	6078      	str	r0, [r7, #4]
 800af72:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	689b      	ldr	r3, [r3, #8]
 800af78:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800af7a:	68fb      	ldr	r3, [r7, #12]
 800af7c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800af80:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800af82:	683a      	ldr	r2, [r7, #0]
 800af84:	68fb      	ldr	r3, [r7, #12]
 800af86:	4313      	orrs	r3, r2
 800af88:	f043 0307 	orr.w	r3, r3, #7
 800af8c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800af8e:	687b      	ldr	r3, [r7, #4]
 800af90:	68fa      	ldr	r2, [r7, #12]
 800af92:	609a      	str	r2, [r3, #8]
}
 800af94:	bf00      	nop
 800af96:	3714      	adds	r7, #20
 800af98:	46bd      	mov	sp, r7
 800af9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af9e:	4770      	bx	lr

0800afa0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800afa0:	b480      	push	{r7}
 800afa2:	b087      	sub	sp, #28
 800afa4:	af00      	add	r7, sp, #0
 800afa6:	60f8      	str	r0, [r7, #12]
 800afa8:	60b9      	str	r1, [r7, #8]
 800afaa:	607a      	str	r2, [r7, #4]
 800afac:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800afae:	68fb      	ldr	r3, [r7, #12]
 800afb0:	689b      	ldr	r3, [r3, #8]
 800afb2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800afb4:	697b      	ldr	r3, [r7, #20]
 800afb6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800afba:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800afbc:	683b      	ldr	r3, [r7, #0]
 800afbe:	021a      	lsls	r2, r3, #8
 800afc0:	687b      	ldr	r3, [r7, #4]
 800afc2:	431a      	orrs	r2, r3
 800afc4:	68bb      	ldr	r3, [r7, #8]
 800afc6:	4313      	orrs	r3, r2
 800afc8:	697a      	ldr	r2, [r7, #20]
 800afca:	4313      	orrs	r3, r2
 800afcc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800afce:	68fb      	ldr	r3, [r7, #12]
 800afd0:	697a      	ldr	r2, [r7, #20]
 800afd2:	609a      	str	r2, [r3, #8]
}
 800afd4:	bf00      	nop
 800afd6:	371c      	adds	r7, #28
 800afd8:	46bd      	mov	sp, r7
 800afda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afde:	4770      	bx	lr

0800afe0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800afe0:	b480      	push	{r7}
 800afe2:	b087      	sub	sp, #28
 800afe4:	af00      	add	r7, sp, #0
 800afe6:	60f8      	str	r0, [r7, #12]
 800afe8:	60b9      	str	r1, [r7, #8]
 800afea:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800afec:	68bb      	ldr	r3, [r7, #8]
 800afee:	f003 031f 	and.w	r3, r3, #31
 800aff2:	2201      	movs	r2, #1
 800aff4:	fa02 f303 	lsl.w	r3, r2, r3
 800aff8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800affa:	68fb      	ldr	r3, [r7, #12]
 800affc:	6a1a      	ldr	r2, [r3, #32]
 800affe:	697b      	ldr	r3, [r7, #20]
 800b000:	43db      	mvns	r3, r3
 800b002:	401a      	ands	r2, r3
 800b004:	68fb      	ldr	r3, [r7, #12]
 800b006:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800b008:	68fb      	ldr	r3, [r7, #12]
 800b00a:	6a1a      	ldr	r2, [r3, #32]
 800b00c:	68bb      	ldr	r3, [r7, #8]
 800b00e:	f003 031f 	and.w	r3, r3, #31
 800b012:	6879      	ldr	r1, [r7, #4]
 800b014:	fa01 f303 	lsl.w	r3, r1, r3
 800b018:	431a      	orrs	r2, r3
 800b01a:	68fb      	ldr	r3, [r7, #12]
 800b01c:	621a      	str	r2, [r3, #32]
}
 800b01e:	bf00      	nop
 800b020:	371c      	adds	r7, #28
 800b022:	46bd      	mov	sp, r7
 800b024:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b028:	4770      	bx	lr
	...

0800b02c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800b02c:	b480      	push	{r7}
 800b02e:	b085      	sub	sp, #20
 800b030:	af00      	add	r7, sp, #0
 800b032:	6078      	str	r0, [r7, #4]
 800b034:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b036:	687b      	ldr	r3, [r7, #4]
 800b038:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b03c:	2b01      	cmp	r3, #1
 800b03e:	d101      	bne.n	800b044 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800b040:	2302      	movs	r3, #2
 800b042:	e05a      	b.n	800b0fa <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	2201      	movs	r2, #1
 800b048:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	2202      	movs	r2, #2
 800b050:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800b054:	687b      	ldr	r3, [r7, #4]
 800b056:	681b      	ldr	r3, [r3, #0]
 800b058:	685b      	ldr	r3, [r3, #4]
 800b05a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	681b      	ldr	r3, [r3, #0]
 800b060:	689b      	ldr	r3, [r3, #8]
 800b062:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800b064:	68fb      	ldr	r3, [r7, #12]
 800b066:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b06a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800b06c:	683b      	ldr	r3, [r7, #0]
 800b06e:	681b      	ldr	r3, [r3, #0]
 800b070:	68fa      	ldr	r2, [r7, #12]
 800b072:	4313      	orrs	r3, r2
 800b074:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800b076:	687b      	ldr	r3, [r7, #4]
 800b078:	681b      	ldr	r3, [r3, #0]
 800b07a:	68fa      	ldr	r2, [r7, #12]
 800b07c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b07e:	687b      	ldr	r3, [r7, #4]
 800b080:	681b      	ldr	r3, [r3, #0]
 800b082:	4a21      	ldr	r2, [pc, #132]	; (800b108 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800b084:	4293      	cmp	r3, r2
 800b086:	d022      	beq.n	800b0ce <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b088:	687b      	ldr	r3, [r7, #4]
 800b08a:	681b      	ldr	r3, [r3, #0]
 800b08c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b090:	d01d      	beq.n	800b0ce <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b092:	687b      	ldr	r3, [r7, #4]
 800b094:	681b      	ldr	r3, [r3, #0]
 800b096:	4a1d      	ldr	r2, [pc, #116]	; (800b10c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800b098:	4293      	cmp	r3, r2
 800b09a:	d018      	beq.n	800b0ce <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b09c:	687b      	ldr	r3, [r7, #4]
 800b09e:	681b      	ldr	r3, [r3, #0]
 800b0a0:	4a1b      	ldr	r2, [pc, #108]	; (800b110 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800b0a2:	4293      	cmp	r3, r2
 800b0a4:	d013      	beq.n	800b0ce <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b0a6:	687b      	ldr	r3, [r7, #4]
 800b0a8:	681b      	ldr	r3, [r3, #0]
 800b0aa:	4a1a      	ldr	r2, [pc, #104]	; (800b114 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800b0ac:	4293      	cmp	r3, r2
 800b0ae:	d00e      	beq.n	800b0ce <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b0b0:	687b      	ldr	r3, [r7, #4]
 800b0b2:	681b      	ldr	r3, [r3, #0]
 800b0b4:	4a18      	ldr	r2, [pc, #96]	; (800b118 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800b0b6:	4293      	cmp	r3, r2
 800b0b8:	d009      	beq.n	800b0ce <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b0ba:	687b      	ldr	r3, [r7, #4]
 800b0bc:	681b      	ldr	r3, [r3, #0]
 800b0be:	4a17      	ldr	r2, [pc, #92]	; (800b11c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800b0c0:	4293      	cmp	r3, r2
 800b0c2:	d004      	beq.n	800b0ce <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	681b      	ldr	r3, [r3, #0]
 800b0c8:	4a15      	ldr	r2, [pc, #84]	; (800b120 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800b0ca:	4293      	cmp	r3, r2
 800b0cc:	d10c      	bne.n	800b0e8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800b0ce:	68bb      	ldr	r3, [r7, #8]
 800b0d0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b0d4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800b0d6:	683b      	ldr	r3, [r7, #0]
 800b0d8:	685b      	ldr	r3, [r3, #4]
 800b0da:	68ba      	ldr	r2, [r7, #8]
 800b0dc:	4313      	orrs	r3, r2
 800b0de:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800b0e0:	687b      	ldr	r3, [r7, #4]
 800b0e2:	681b      	ldr	r3, [r3, #0]
 800b0e4:	68ba      	ldr	r2, [r7, #8]
 800b0e6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	2201      	movs	r2, #1
 800b0ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	2200      	movs	r2, #0
 800b0f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b0f8:	2300      	movs	r3, #0
}
 800b0fa:	4618      	mov	r0, r3
 800b0fc:	3714      	adds	r7, #20
 800b0fe:	46bd      	mov	sp, r7
 800b100:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b104:	4770      	bx	lr
 800b106:	bf00      	nop
 800b108:	40010000 	.word	0x40010000
 800b10c:	40000400 	.word	0x40000400
 800b110:	40000800 	.word	0x40000800
 800b114:	40000c00 	.word	0x40000c00
 800b118:	40010400 	.word	0x40010400
 800b11c:	40014000 	.word	0x40014000
 800b120:	40001800 	.word	0x40001800

0800b124 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800b124:	b580      	push	{r7, lr}
 800b126:	b082      	sub	sp, #8
 800b128:	af00      	add	r7, sp, #0
 800b12a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	2b00      	cmp	r3, #0
 800b130:	d101      	bne.n	800b136 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800b132:	2301      	movs	r3, #1
 800b134:	e03f      	b.n	800b1b6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800b136:	687b      	ldr	r3, [r7, #4]
 800b138:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800b13c:	b2db      	uxtb	r3, r3
 800b13e:	2b00      	cmp	r3, #0
 800b140:	d106      	bne.n	800b150 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b142:	687b      	ldr	r3, [r7, #4]
 800b144:	2200      	movs	r2, #0
 800b146:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800b14a:	6878      	ldr	r0, [r7, #4]
 800b14c:	f7f9 fdda 	bl	8004d04 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b150:	687b      	ldr	r3, [r7, #4]
 800b152:	2224      	movs	r2, #36	; 0x24
 800b154:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800b158:	687b      	ldr	r3, [r7, #4]
 800b15a:	681b      	ldr	r3, [r3, #0]
 800b15c:	68da      	ldr	r2, [r3, #12]
 800b15e:	687b      	ldr	r3, [r7, #4]
 800b160:	681b      	ldr	r3, [r3, #0]
 800b162:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800b166:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800b168:	6878      	ldr	r0, [r7, #4]
 800b16a:	f000 f829 	bl	800b1c0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b16e:	687b      	ldr	r3, [r7, #4]
 800b170:	681b      	ldr	r3, [r3, #0]
 800b172:	691a      	ldr	r2, [r3, #16]
 800b174:	687b      	ldr	r3, [r7, #4]
 800b176:	681b      	ldr	r3, [r3, #0]
 800b178:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800b17c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b17e:	687b      	ldr	r3, [r7, #4]
 800b180:	681b      	ldr	r3, [r3, #0]
 800b182:	695a      	ldr	r2, [r3, #20]
 800b184:	687b      	ldr	r3, [r7, #4]
 800b186:	681b      	ldr	r3, [r3, #0]
 800b188:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800b18c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800b18e:	687b      	ldr	r3, [r7, #4]
 800b190:	681b      	ldr	r3, [r3, #0]
 800b192:	68da      	ldr	r2, [r3, #12]
 800b194:	687b      	ldr	r3, [r7, #4]
 800b196:	681b      	ldr	r3, [r3, #0]
 800b198:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800b19c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b19e:	687b      	ldr	r3, [r7, #4]
 800b1a0:	2200      	movs	r2, #0
 800b1a2:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800b1a4:	687b      	ldr	r3, [r7, #4]
 800b1a6:	2220      	movs	r2, #32
 800b1a8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800b1ac:	687b      	ldr	r3, [r7, #4]
 800b1ae:	2220      	movs	r2, #32
 800b1b0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800b1b4:	2300      	movs	r3, #0
}
 800b1b6:	4618      	mov	r0, r3
 800b1b8:	3708      	adds	r7, #8
 800b1ba:	46bd      	mov	sp, r7
 800b1bc:	bd80      	pop	{r7, pc}
	...

0800b1c0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b1c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b1c4:	b085      	sub	sp, #20
 800b1c6:	af00      	add	r7, sp, #0
 800b1c8:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b1ca:	687b      	ldr	r3, [r7, #4]
 800b1cc:	681b      	ldr	r3, [r3, #0]
 800b1ce:	691b      	ldr	r3, [r3, #16]
 800b1d0:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800b1d4:	687b      	ldr	r3, [r7, #4]
 800b1d6:	68da      	ldr	r2, [r3, #12]
 800b1d8:	687b      	ldr	r3, [r7, #4]
 800b1da:	681b      	ldr	r3, [r3, #0]
 800b1dc:	430a      	orrs	r2, r1
 800b1de:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800b1e0:	687b      	ldr	r3, [r7, #4]
 800b1e2:	689a      	ldr	r2, [r3, #8]
 800b1e4:	687b      	ldr	r3, [r7, #4]
 800b1e6:	691b      	ldr	r3, [r3, #16]
 800b1e8:	431a      	orrs	r2, r3
 800b1ea:	687b      	ldr	r3, [r7, #4]
 800b1ec:	695b      	ldr	r3, [r3, #20]
 800b1ee:	431a      	orrs	r2, r3
 800b1f0:	687b      	ldr	r3, [r7, #4]
 800b1f2:	69db      	ldr	r3, [r3, #28]
 800b1f4:	4313      	orrs	r3, r2
 800b1f6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 800b1f8:	687b      	ldr	r3, [r7, #4]
 800b1fa:	681b      	ldr	r3, [r3, #0]
 800b1fc:	68db      	ldr	r3, [r3, #12]
 800b1fe:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800b202:	f023 030c 	bic.w	r3, r3, #12
 800b206:	687a      	ldr	r2, [r7, #4]
 800b208:	6812      	ldr	r2, [r2, #0]
 800b20a:	68f9      	ldr	r1, [r7, #12]
 800b20c:	430b      	orrs	r3, r1
 800b20e:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800b210:	687b      	ldr	r3, [r7, #4]
 800b212:	681b      	ldr	r3, [r3, #0]
 800b214:	695b      	ldr	r3, [r3, #20]
 800b216:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800b21a:	687b      	ldr	r3, [r7, #4]
 800b21c:	699a      	ldr	r2, [r3, #24]
 800b21e:	687b      	ldr	r3, [r7, #4]
 800b220:	681b      	ldr	r3, [r3, #0]
 800b222:	430a      	orrs	r2, r1
 800b224:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b226:	687b      	ldr	r3, [r7, #4]
 800b228:	69db      	ldr	r3, [r3, #28]
 800b22a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b22e:	f040 818b 	bne.w	800b548 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800b232:	687b      	ldr	r3, [r7, #4]
 800b234:	681b      	ldr	r3, [r3, #0]
 800b236:	4ac1      	ldr	r2, [pc, #772]	; (800b53c <UART_SetConfig+0x37c>)
 800b238:	4293      	cmp	r3, r2
 800b23a:	d005      	beq.n	800b248 <UART_SetConfig+0x88>
 800b23c:	687b      	ldr	r3, [r7, #4]
 800b23e:	681b      	ldr	r3, [r3, #0]
 800b240:	4abf      	ldr	r2, [pc, #764]	; (800b540 <UART_SetConfig+0x380>)
 800b242:	4293      	cmp	r3, r2
 800b244:	f040 80bd 	bne.w	800b3c2 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800b248:	f7fd fb02 	bl	8008850 <HAL_RCC_GetPCLK2Freq>
 800b24c:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800b24e:	68bb      	ldr	r3, [r7, #8]
 800b250:	461d      	mov	r5, r3
 800b252:	f04f 0600 	mov.w	r6, #0
 800b256:	46a8      	mov	r8, r5
 800b258:	46b1      	mov	r9, r6
 800b25a:	eb18 0308 	adds.w	r3, r8, r8
 800b25e:	eb49 0409 	adc.w	r4, r9, r9
 800b262:	4698      	mov	r8, r3
 800b264:	46a1      	mov	r9, r4
 800b266:	eb18 0805 	adds.w	r8, r8, r5
 800b26a:	eb49 0906 	adc.w	r9, r9, r6
 800b26e:	f04f 0100 	mov.w	r1, #0
 800b272:	f04f 0200 	mov.w	r2, #0
 800b276:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800b27a:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800b27e:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800b282:	4688      	mov	r8, r1
 800b284:	4691      	mov	r9, r2
 800b286:	eb18 0005 	adds.w	r0, r8, r5
 800b28a:	eb49 0106 	adc.w	r1, r9, r6
 800b28e:	687b      	ldr	r3, [r7, #4]
 800b290:	685b      	ldr	r3, [r3, #4]
 800b292:	461d      	mov	r5, r3
 800b294:	f04f 0600 	mov.w	r6, #0
 800b298:	196b      	adds	r3, r5, r5
 800b29a:	eb46 0406 	adc.w	r4, r6, r6
 800b29e:	461a      	mov	r2, r3
 800b2a0:	4623      	mov	r3, r4
 800b2a2:	f7f5 fcf1 	bl	8000c88 <__aeabi_uldivmod>
 800b2a6:	4603      	mov	r3, r0
 800b2a8:	460c      	mov	r4, r1
 800b2aa:	461a      	mov	r2, r3
 800b2ac:	4ba5      	ldr	r3, [pc, #660]	; (800b544 <UART_SetConfig+0x384>)
 800b2ae:	fba3 2302 	umull	r2, r3, r3, r2
 800b2b2:	095b      	lsrs	r3, r3, #5
 800b2b4:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800b2b8:	68bb      	ldr	r3, [r7, #8]
 800b2ba:	461d      	mov	r5, r3
 800b2bc:	f04f 0600 	mov.w	r6, #0
 800b2c0:	46a9      	mov	r9, r5
 800b2c2:	46b2      	mov	sl, r6
 800b2c4:	eb19 0309 	adds.w	r3, r9, r9
 800b2c8:	eb4a 040a 	adc.w	r4, sl, sl
 800b2cc:	4699      	mov	r9, r3
 800b2ce:	46a2      	mov	sl, r4
 800b2d0:	eb19 0905 	adds.w	r9, r9, r5
 800b2d4:	eb4a 0a06 	adc.w	sl, sl, r6
 800b2d8:	f04f 0100 	mov.w	r1, #0
 800b2dc:	f04f 0200 	mov.w	r2, #0
 800b2e0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800b2e4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800b2e8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800b2ec:	4689      	mov	r9, r1
 800b2ee:	4692      	mov	sl, r2
 800b2f0:	eb19 0005 	adds.w	r0, r9, r5
 800b2f4:	eb4a 0106 	adc.w	r1, sl, r6
 800b2f8:	687b      	ldr	r3, [r7, #4]
 800b2fa:	685b      	ldr	r3, [r3, #4]
 800b2fc:	461d      	mov	r5, r3
 800b2fe:	f04f 0600 	mov.w	r6, #0
 800b302:	196b      	adds	r3, r5, r5
 800b304:	eb46 0406 	adc.w	r4, r6, r6
 800b308:	461a      	mov	r2, r3
 800b30a:	4623      	mov	r3, r4
 800b30c:	f7f5 fcbc 	bl	8000c88 <__aeabi_uldivmod>
 800b310:	4603      	mov	r3, r0
 800b312:	460c      	mov	r4, r1
 800b314:	461a      	mov	r2, r3
 800b316:	4b8b      	ldr	r3, [pc, #556]	; (800b544 <UART_SetConfig+0x384>)
 800b318:	fba3 1302 	umull	r1, r3, r3, r2
 800b31c:	095b      	lsrs	r3, r3, #5
 800b31e:	2164      	movs	r1, #100	; 0x64
 800b320:	fb01 f303 	mul.w	r3, r1, r3
 800b324:	1ad3      	subs	r3, r2, r3
 800b326:	00db      	lsls	r3, r3, #3
 800b328:	3332      	adds	r3, #50	; 0x32
 800b32a:	4a86      	ldr	r2, [pc, #536]	; (800b544 <UART_SetConfig+0x384>)
 800b32c:	fba2 2303 	umull	r2, r3, r2, r3
 800b330:	095b      	lsrs	r3, r3, #5
 800b332:	005b      	lsls	r3, r3, #1
 800b334:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800b338:	4498      	add	r8, r3
 800b33a:	68bb      	ldr	r3, [r7, #8]
 800b33c:	461d      	mov	r5, r3
 800b33e:	f04f 0600 	mov.w	r6, #0
 800b342:	46a9      	mov	r9, r5
 800b344:	46b2      	mov	sl, r6
 800b346:	eb19 0309 	adds.w	r3, r9, r9
 800b34a:	eb4a 040a 	adc.w	r4, sl, sl
 800b34e:	4699      	mov	r9, r3
 800b350:	46a2      	mov	sl, r4
 800b352:	eb19 0905 	adds.w	r9, r9, r5
 800b356:	eb4a 0a06 	adc.w	sl, sl, r6
 800b35a:	f04f 0100 	mov.w	r1, #0
 800b35e:	f04f 0200 	mov.w	r2, #0
 800b362:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800b366:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800b36a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800b36e:	4689      	mov	r9, r1
 800b370:	4692      	mov	sl, r2
 800b372:	eb19 0005 	adds.w	r0, r9, r5
 800b376:	eb4a 0106 	adc.w	r1, sl, r6
 800b37a:	687b      	ldr	r3, [r7, #4]
 800b37c:	685b      	ldr	r3, [r3, #4]
 800b37e:	461d      	mov	r5, r3
 800b380:	f04f 0600 	mov.w	r6, #0
 800b384:	196b      	adds	r3, r5, r5
 800b386:	eb46 0406 	adc.w	r4, r6, r6
 800b38a:	461a      	mov	r2, r3
 800b38c:	4623      	mov	r3, r4
 800b38e:	f7f5 fc7b 	bl	8000c88 <__aeabi_uldivmod>
 800b392:	4603      	mov	r3, r0
 800b394:	460c      	mov	r4, r1
 800b396:	461a      	mov	r2, r3
 800b398:	4b6a      	ldr	r3, [pc, #424]	; (800b544 <UART_SetConfig+0x384>)
 800b39a:	fba3 1302 	umull	r1, r3, r3, r2
 800b39e:	095b      	lsrs	r3, r3, #5
 800b3a0:	2164      	movs	r1, #100	; 0x64
 800b3a2:	fb01 f303 	mul.w	r3, r1, r3
 800b3a6:	1ad3      	subs	r3, r2, r3
 800b3a8:	00db      	lsls	r3, r3, #3
 800b3aa:	3332      	adds	r3, #50	; 0x32
 800b3ac:	4a65      	ldr	r2, [pc, #404]	; (800b544 <UART_SetConfig+0x384>)
 800b3ae:	fba2 2303 	umull	r2, r3, r2, r3
 800b3b2:	095b      	lsrs	r3, r3, #5
 800b3b4:	f003 0207 	and.w	r2, r3, #7
 800b3b8:	687b      	ldr	r3, [r7, #4]
 800b3ba:	681b      	ldr	r3, [r3, #0]
 800b3bc:	4442      	add	r2, r8
 800b3be:	609a      	str	r2, [r3, #8]
 800b3c0:	e26f      	b.n	800b8a2 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800b3c2:	f7fd fa31 	bl	8008828 <HAL_RCC_GetPCLK1Freq>
 800b3c6:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800b3c8:	68bb      	ldr	r3, [r7, #8]
 800b3ca:	461d      	mov	r5, r3
 800b3cc:	f04f 0600 	mov.w	r6, #0
 800b3d0:	46a8      	mov	r8, r5
 800b3d2:	46b1      	mov	r9, r6
 800b3d4:	eb18 0308 	adds.w	r3, r8, r8
 800b3d8:	eb49 0409 	adc.w	r4, r9, r9
 800b3dc:	4698      	mov	r8, r3
 800b3de:	46a1      	mov	r9, r4
 800b3e0:	eb18 0805 	adds.w	r8, r8, r5
 800b3e4:	eb49 0906 	adc.w	r9, r9, r6
 800b3e8:	f04f 0100 	mov.w	r1, #0
 800b3ec:	f04f 0200 	mov.w	r2, #0
 800b3f0:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800b3f4:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800b3f8:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800b3fc:	4688      	mov	r8, r1
 800b3fe:	4691      	mov	r9, r2
 800b400:	eb18 0005 	adds.w	r0, r8, r5
 800b404:	eb49 0106 	adc.w	r1, r9, r6
 800b408:	687b      	ldr	r3, [r7, #4]
 800b40a:	685b      	ldr	r3, [r3, #4]
 800b40c:	461d      	mov	r5, r3
 800b40e:	f04f 0600 	mov.w	r6, #0
 800b412:	196b      	adds	r3, r5, r5
 800b414:	eb46 0406 	adc.w	r4, r6, r6
 800b418:	461a      	mov	r2, r3
 800b41a:	4623      	mov	r3, r4
 800b41c:	f7f5 fc34 	bl	8000c88 <__aeabi_uldivmod>
 800b420:	4603      	mov	r3, r0
 800b422:	460c      	mov	r4, r1
 800b424:	461a      	mov	r2, r3
 800b426:	4b47      	ldr	r3, [pc, #284]	; (800b544 <UART_SetConfig+0x384>)
 800b428:	fba3 2302 	umull	r2, r3, r3, r2
 800b42c:	095b      	lsrs	r3, r3, #5
 800b42e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800b432:	68bb      	ldr	r3, [r7, #8]
 800b434:	461d      	mov	r5, r3
 800b436:	f04f 0600 	mov.w	r6, #0
 800b43a:	46a9      	mov	r9, r5
 800b43c:	46b2      	mov	sl, r6
 800b43e:	eb19 0309 	adds.w	r3, r9, r9
 800b442:	eb4a 040a 	adc.w	r4, sl, sl
 800b446:	4699      	mov	r9, r3
 800b448:	46a2      	mov	sl, r4
 800b44a:	eb19 0905 	adds.w	r9, r9, r5
 800b44e:	eb4a 0a06 	adc.w	sl, sl, r6
 800b452:	f04f 0100 	mov.w	r1, #0
 800b456:	f04f 0200 	mov.w	r2, #0
 800b45a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800b45e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800b462:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800b466:	4689      	mov	r9, r1
 800b468:	4692      	mov	sl, r2
 800b46a:	eb19 0005 	adds.w	r0, r9, r5
 800b46e:	eb4a 0106 	adc.w	r1, sl, r6
 800b472:	687b      	ldr	r3, [r7, #4]
 800b474:	685b      	ldr	r3, [r3, #4]
 800b476:	461d      	mov	r5, r3
 800b478:	f04f 0600 	mov.w	r6, #0
 800b47c:	196b      	adds	r3, r5, r5
 800b47e:	eb46 0406 	adc.w	r4, r6, r6
 800b482:	461a      	mov	r2, r3
 800b484:	4623      	mov	r3, r4
 800b486:	f7f5 fbff 	bl	8000c88 <__aeabi_uldivmod>
 800b48a:	4603      	mov	r3, r0
 800b48c:	460c      	mov	r4, r1
 800b48e:	461a      	mov	r2, r3
 800b490:	4b2c      	ldr	r3, [pc, #176]	; (800b544 <UART_SetConfig+0x384>)
 800b492:	fba3 1302 	umull	r1, r3, r3, r2
 800b496:	095b      	lsrs	r3, r3, #5
 800b498:	2164      	movs	r1, #100	; 0x64
 800b49a:	fb01 f303 	mul.w	r3, r1, r3
 800b49e:	1ad3      	subs	r3, r2, r3
 800b4a0:	00db      	lsls	r3, r3, #3
 800b4a2:	3332      	adds	r3, #50	; 0x32
 800b4a4:	4a27      	ldr	r2, [pc, #156]	; (800b544 <UART_SetConfig+0x384>)
 800b4a6:	fba2 2303 	umull	r2, r3, r2, r3
 800b4aa:	095b      	lsrs	r3, r3, #5
 800b4ac:	005b      	lsls	r3, r3, #1
 800b4ae:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800b4b2:	4498      	add	r8, r3
 800b4b4:	68bb      	ldr	r3, [r7, #8]
 800b4b6:	461d      	mov	r5, r3
 800b4b8:	f04f 0600 	mov.w	r6, #0
 800b4bc:	46a9      	mov	r9, r5
 800b4be:	46b2      	mov	sl, r6
 800b4c0:	eb19 0309 	adds.w	r3, r9, r9
 800b4c4:	eb4a 040a 	adc.w	r4, sl, sl
 800b4c8:	4699      	mov	r9, r3
 800b4ca:	46a2      	mov	sl, r4
 800b4cc:	eb19 0905 	adds.w	r9, r9, r5
 800b4d0:	eb4a 0a06 	adc.w	sl, sl, r6
 800b4d4:	f04f 0100 	mov.w	r1, #0
 800b4d8:	f04f 0200 	mov.w	r2, #0
 800b4dc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800b4e0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800b4e4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800b4e8:	4689      	mov	r9, r1
 800b4ea:	4692      	mov	sl, r2
 800b4ec:	eb19 0005 	adds.w	r0, r9, r5
 800b4f0:	eb4a 0106 	adc.w	r1, sl, r6
 800b4f4:	687b      	ldr	r3, [r7, #4]
 800b4f6:	685b      	ldr	r3, [r3, #4]
 800b4f8:	461d      	mov	r5, r3
 800b4fa:	f04f 0600 	mov.w	r6, #0
 800b4fe:	196b      	adds	r3, r5, r5
 800b500:	eb46 0406 	adc.w	r4, r6, r6
 800b504:	461a      	mov	r2, r3
 800b506:	4623      	mov	r3, r4
 800b508:	f7f5 fbbe 	bl	8000c88 <__aeabi_uldivmod>
 800b50c:	4603      	mov	r3, r0
 800b50e:	460c      	mov	r4, r1
 800b510:	461a      	mov	r2, r3
 800b512:	4b0c      	ldr	r3, [pc, #48]	; (800b544 <UART_SetConfig+0x384>)
 800b514:	fba3 1302 	umull	r1, r3, r3, r2
 800b518:	095b      	lsrs	r3, r3, #5
 800b51a:	2164      	movs	r1, #100	; 0x64
 800b51c:	fb01 f303 	mul.w	r3, r1, r3
 800b520:	1ad3      	subs	r3, r2, r3
 800b522:	00db      	lsls	r3, r3, #3
 800b524:	3332      	adds	r3, #50	; 0x32
 800b526:	4a07      	ldr	r2, [pc, #28]	; (800b544 <UART_SetConfig+0x384>)
 800b528:	fba2 2303 	umull	r2, r3, r2, r3
 800b52c:	095b      	lsrs	r3, r3, #5
 800b52e:	f003 0207 	and.w	r2, r3, #7
 800b532:	687b      	ldr	r3, [r7, #4]
 800b534:	681b      	ldr	r3, [r3, #0]
 800b536:	4442      	add	r2, r8
 800b538:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800b53a:	e1b2      	b.n	800b8a2 <UART_SetConfig+0x6e2>
 800b53c:	40011000 	.word	0x40011000
 800b540:	40011400 	.word	0x40011400
 800b544:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800b548:	687b      	ldr	r3, [r7, #4]
 800b54a:	681b      	ldr	r3, [r3, #0]
 800b54c:	4ad7      	ldr	r2, [pc, #860]	; (800b8ac <UART_SetConfig+0x6ec>)
 800b54e:	4293      	cmp	r3, r2
 800b550:	d005      	beq.n	800b55e <UART_SetConfig+0x39e>
 800b552:	687b      	ldr	r3, [r7, #4]
 800b554:	681b      	ldr	r3, [r3, #0]
 800b556:	4ad6      	ldr	r2, [pc, #856]	; (800b8b0 <UART_SetConfig+0x6f0>)
 800b558:	4293      	cmp	r3, r2
 800b55a:	f040 80d1 	bne.w	800b700 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 800b55e:	f7fd f977 	bl	8008850 <HAL_RCC_GetPCLK2Freq>
 800b562:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800b564:	68bb      	ldr	r3, [r7, #8]
 800b566:	469a      	mov	sl, r3
 800b568:	f04f 0b00 	mov.w	fp, #0
 800b56c:	46d0      	mov	r8, sl
 800b56e:	46d9      	mov	r9, fp
 800b570:	eb18 0308 	adds.w	r3, r8, r8
 800b574:	eb49 0409 	adc.w	r4, r9, r9
 800b578:	4698      	mov	r8, r3
 800b57a:	46a1      	mov	r9, r4
 800b57c:	eb18 080a 	adds.w	r8, r8, sl
 800b580:	eb49 090b 	adc.w	r9, r9, fp
 800b584:	f04f 0100 	mov.w	r1, #0
 800b588:	f04f 0200 	mov.w	r2, #0
 800b58c:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800b590:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800b594:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800b598:	4688      	mov	r8, r1
 800b59a:	4691      	mov	r9, r2
 800b59c:	eb1a 0508 	adds.w	r5, sl, r8
 800b5a0:	eb4b 0609 	adc.w	r6, fp, r9
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	685b      	ldr	r3, [r3, #4]
 800b5a8:	4619      	mov	r1, r3
 800b5aa:	f04f 0200 	mov.w	r2, #0
 800b5ae:	f04f 0300 	mov.w	r3, #0
 800b5b2:	f04f 0400 	mov.w	r4, #0
 800b5b6:	0094      	lsls	r4, r2, #2
 800b5b8:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800b5bc:	008b      	lsls	r3, r1, #2
 800b5be:	461a      	mov	r2, r3
 800b5c0:	4623      	mov	r3, r4
 800b5c2:	4628      	mov	r0, r5
 800b5c4:	4631      	mov	r1, r6
 800b5c6:	f7f5 fb5f 	bl	8000c88 <__aeabi_uldivmod>
 800b5ca:	4603      	mov	r3, r0
 800b5cc:	460c      	mov	r4, r1
 800b5ce:	461a      	mov	r2, r3
 800b5d0:	4bb8      	ldr	r3, [pc, #736]	; (800b8b4 <UART_SetConfig+0x6f4>)
 800b5d2:	fba3 2302 	umull	r2, r3, r3, r2
 800b5d6:	095b      	lsrs	r3, r3, #5
 800b5d8:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800b5dc:	68bb      	ldr	r3, [r7, #8]
 800b5de:	469b      	mov	fp, r3
 800b5e0:	f04f 0c00 	mov.w	ip, #0
 800b5e4:	46d9      	mov	r9, fp
 800b5e6:	46e2      	mov	sl, ip
 800b5e8:	eb19 0309 	adds.w	r3, r9, r9
 800b5ec:	eb4a 040a 	adc.w	r4, sl, sl
 800b5f0:	4699      	mov	r9, r3
 800b5f2:	46a2      	mov	sl, r4
 800b5f4:	eb19 090b 	adds.w	r9, r9, fp
 800b5f8:	eb4a 0a0c 	adc.w	sl, sl, ip
 800b5fc:	f04f 0100 	mov.w	r1, #0
 800b600:	f04f 0200 	mov.w	r2, #0
 800b604:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800b608:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800b60c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800b610:	4689      	mov	r9, r1
 800b612:	4692      	mov	sl, r2
 800b614:	eb1b 0509 	adds.w	r5, fp, r9
 800b618:	eb4c 060a 	adc.w	r6, ip, sl
 800b61c:	687b      	ldr	r3, [r7, #4]
 800b61e:	685b      	ldr	r3, [r3, #4]
 800b620:	4619      	mov	r1, r3
 800b622:	f04f 0200 	mov.w	r2, #0
 800b626:	f04f 0300 	mov.w	r3, #0
 800b62a:	f04f 0400 	mov.w	r4, #0
 800b62e:	0094      	lsls	r4, r2, #2
 800b630:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800b634:	008b      	lsls	r3, r1, #2
 800b636:	461a      	mov	r2, r3
 800b638:	4623      	mov	r3, r4
 800b63a:	4628      	mov	r0, r5
 800b63c:	4631      	mov	r1, r6
 800b63e:	f7f5 fb23 	bl	8000c88 <__aeabi_uldivmod>
 800b642:	4603      	mov	r3, r0
 800b644:	460c      	mov	r4, r1
 800b646:	461a      	mov	r2, r3
 800b648:	4b9a      	ldr	r3, [pc, #616]	; (800b8b4 <UART_SetConfig+0x6f4>)
 800b64a:	fba3 1302 	umull	r1, r3, r3, r2
 800b64e:	095b      	lsrs	r3, r3, #5
 800b650:	2164      	movs	r1, #100	; 0x64
 800b652:	fb01 f303 	mul.w	r3, r1, r3
 800b656:	1ad3      	subs	r3, r2, r3
 800b658:	011b      	lsls	r3, r3, #4
 800b65a:	3332      	adds	r3, #50	; 0x32
 800b65c:	4a95      	ldr	r2, [pc, #596]	; (800b8b4 <UART_SetConfig+0x6f4>)
 800b65e:	fba2 2303 	umull	r2, r3, r2, r3
 800b662:	095b      	lsrs	r3, r3, #5
 800b664:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b668:	4498      	add	r8, r3
 800b66a:	68bb      	ldr	r3, [r7, #8]
 800b66c:	469b      	mov	fp, r3
 800b66e:	f04f 0c00 	mov.w	ip, #0
 800b672:	46d9      	mov	r9, fp
 800b674:	46e2      	mov	sl, ip
 800b676:	eb19 0309 	adds.w	r3, r9, r9
 800b67a:	eb4a 040a 	adc.w	r4, sl, sl
 800b67e:	4699      	mov	r9, r3
 800b680:	46a2      	mov	sl, r4
 800b682:	eb19 090b 	adds.w	r9, r9, fp
 800b686:	eb4a 0a0c 	adc.w	sl, sl, ip
 800b68a:	f04f 0100 	mov.w	r1, #0
 800b68e:	f04f 0200 	mov.w	r2, #0
 800b692:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800b696:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800b69a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800b69e:	4689      	mov	r9, r1
 800b6a0:	4692      	mov	sl, r2
 800b6a2:	eb1b 0509 	adds.w	r5, fp, r9
 800b6a6:	eb4c 060a 	adc.w	r6, ip, sl
 800b6aa:	687b      	ldr	r3, [r7, #4]
 800b6ac:	685b      	ldr	r3, [r3, #4]
 800b6ae:	4619      	mov	r1, r3
 800b6b0:	f04f 0200 	mov.w	r2, #0
 800b6b4:	f04f 0300 	mov.w	r3, #0
 800b6b8:	f04f 0400 	mov.w	r4, #0
 800b6bc:	0094      	lsls	r4, r2, #2
 800b6be:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800b6c2:	008b      	lsls	r3, r1, #2
 800b6c4:	461a      	mov	r2, r3
 800b6c6:	4623      	mov	r3, r4
 800b6c8:	4628      	mov	r0, r5
 800b6ca:	4631      	mov	r1, r6
 800b6cc:	f7f5 fadc 	bl	8000c88 <__aeabi_uldivmod>
 800b6d0:	4603      	mov	r3, r0
 800b6d2:	460c      	mov	r4, r1
 800b6d4:	461a      	mov	r2, r3
 800b6d6:	4b77      	ldr	r3, [pc, #476]	; (800b8b4 <UART_SetConfig+0x6f4>)
 800b6d8:	fba3 1302 	umull	r1, r3, r3, r2
 800b6dc:	095b      	lsrs	r3, r3, #5
 800b6de:	2164      	movs	r1, #100	; 0x64
 800b6e0:	fb01 f303 	mul.w	r3, r1, r3
 800b6e4:	1ad3      	subs	r3, r2, r3
 800b6e6:	011b      	lsls	r3, r3, #4
 800b6e8:	3332      	adds	r3, #50	; 0x32
 800b6ea:	4a72      	ldr	r2, [pc, #456]	; (800b8b4 <UART_SetConfig+0x6f4>)
 800b6ec:	fba2 2303 	umull	r2, r3, r2, r3
 800b6f0:	095b      	lsrs	r3, r3, #5
 800b6f2:	f003 020f 	and.w	r2, r3, #15
 800b6f6:	687b      	ldr	r3, [r7, #4]
 800b6f8:	681b      	ldr	r3, [r3, #0]
 800b6fa:	4442      	add	r2, r8
 800b6fc:	609a      	str	r2, [r3, #8]
 800b6fe:	e0d0      	b.n	800b8a2 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 800b700:	f7fd f892 	bl	8008828 <HAL_RCC_GetPCLK1Freq>
 800b704:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800b706:	68bb      	ldr	r3, [r7, #8]
 800b708:	469a      	mov	sl, r3
 800b70a:	f04f 0b00 	mov.w	fp, #0
 800b70e:	46d0      	mov	r8, sl
 800b710:	46d9      	mov	r9, fp
 800b712:	eb18 0308 	adds.w	r3, r8, r8
 800b716:	eb49 0409 	adc.w	r4, r9, r9
 800b71a:	4698      	mov	r8, r3
 800b71c:	46a1      	mov	r9, r4
 800b71e:	eb18 080a 	adds.w	r8, r8, sl
 800b722:	eb49 090b 	adc.w	r9, r9, fp
 800b726:	f04f 0100 	mov.w	r1, #0
 800b72a:	f04f 0200 	mov.w	r2, #0
 800b72e:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800b732:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800b736:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800b73a:	4688      	mov	r8, r1
 800b73c:	4691      	mov	r9, r2
 800b73e:	eb1a 0508 	adds.w	r5, sl, r8
 800b742:	eb4b 0609 	adc.w	r6, fp, r9
 800b746:	687b      	ldr	r3, [r7, #4]
 800b748:	685b      	ldr	r3, [r3, #4]
 800b74a:	4619      	mov	r1, r3
 800b74c:	f04f 0200 	mov.w	r2, #0
 800b750:	f04f 0300 	mov.w	r3, #0
 800b754:	f04f 0400 	mov.w	r4, #0
 800b758:	0094      	lsls	r4, r2, #2
 800b75a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800b75e:	008b      	lsls	r3, r1, #2
 800b760:	461a      	mov	r2, r3
 800b762:	4623      	mov	r3, r4
 800b764:	4628      	mov	r0, r5
 800b766:	4631      	mov	r1, r6
 800b768:	f7f5 fa8e 	bl	8000c88 <__aeabi_uldivmod>
 800b76c:	4603      	mov	r3, r0
 800b76e:	460c      	mov	r4, r1
 800b770:	461a      	mov	r2, r3
 800b772:	4b50      	ldr	r3, [pc, #320]	; (800b8b4 <UART_SetConfig+0x6f4>)
 800b774:	fba3 2302 	umull	r2, r3, r3, r2
 800b778:	095b      	lsrs	r3, r3, #5
 800b77a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800b77e:	68bb      	ldr	r3, [r7, #8]
 800b780:	469b      	mov	fp, r3
 800b782:	f04f 0c00 	mov.w	ip, #0
 800b786:	46d9      	mov	r9, fp
 800b788:	46e2      	mov	sl, ip
 800b78a:	eb19 0309 	adds.w	r3, r9, r9
 800b78e:	eb4a 040a 	adc.w	r4, sl, sl
 800b792:	4699      	mov	r9, r3
 800b794:	46a2      	mov	sl, r4
 800b796:	eb19 090b 	adds.w	r9, r9, fp
 800b79a:	eb4a 0a0c 	adc.w	sl, sl, ip
 800b79e:	f04f 0100 	mov.w	r1, #0
 800b7a2:	f04f 0200 	mov.w	r2, #0
 800b7a6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800b7aa:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800b7ae:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800b7b2:	4689      	mov	r9, r1
 800b7b4:	4692      	mov	sl, r2
 800b7b6:	eb1b 0509 	adds.w	r5, fp, r9
 800b7ba:	eb4c 060a 	adc.w	r6, ip, sl
 800b7be:	687b      	ldr	r3, [r7, #4]
 800b7c0:	685b      	ldr	r3, [r3, #4]
 800b7c2:	4619      	mov	r1, r3
 800b7c4:	f04f 0200 	mov.w	r2, #0
 800b7c8:	f04f 0300 	mov.w	r3, #0
 800b7cc:	f04f 0400 	mov.w	r4, #0
 800b7d0:	0094      	lsls	r4, r2, #2
 800b7d2:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800b7d6:	008b      	lsls	r3, r1, #2
 800b7d8:	461a      	mov	r2, r3
 800b7da:	4623      	mov	r3, r4
 800b7dc:	4628      	mov	r0, r5
 800b7de:	4631      	mov	r1, r6
 800b7e0:	f7f5 fa52 	bl	8000c88 <__aeabi_uldivmod>
 800b7e4:	4603      	mov	r3, r0
 800b7e6:	460c      	mov	r4, r1
 800b7e8:	461a      	mov	r2, r3
 800b7ea:	4b32      	ldr	r3, [pc, #200]	; (800b8b4 <UART_SetConfig+0x6f4>)
 800b7ec:	fba3 1302 	umull	r1, r3, r3, r2
 800b7f0:	095b      	lsrs	r3, r3, #5
 800b7f2:	2164      	movs	r1, #100	; 0x64
 800b7f4:	fb01 f303 	mul.w	r3, r1, r3
 800b7f8:	1ad3      	subs	r3, r2, r3
 800b7fa:	011b      	lsls	r3, r3, #4
 800b7fc:	3332      	adds	r3, #50	; 0x32
 800b7fe:	4a2d      	ldr	r2, [pc, #180]	; (800b8b4 <UART_SetConfig+0x6f4>)
 800b800:	fba2 2303 	umull	r2, r3, r2, r3
 800b804:	095b      	lsrs	r3, r3, #5
 800b806:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b80a:	4498      	add	r8, r3
 800b80c:	68bb      	ldr	r3, [r7, #8]
 800b80e:	469b      	mov	fp, r3
 800b810:	f04f 0c00 	mov.w	ip, #0
 800b814:	46d9      	mov	r9, fp
 800b816:	46e2      	mov	sl, ip
 800b818:	eb19 0309 	adds.w	r3, r9, r9
 800b81c:	eb4a 040a 	adc.w	r4, sl, sl
 800b820:	4699      	mov	r9, r3
 800b822:	46a2      	mov	sl, r4
 800b824:	eb19 090b 	adds.w	r9, r9, fp
 800b828:	eb4a 0a0c 	adc.w	sl, sl, ip
 800b82c:	f04f 0100 	mov.w	r1, #0
 800b830:	f04f 0200 	mov.w	r2, #0
 800b834:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800b838:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800b83c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800b840:	4689      	mov	r9, r1
 800b842:	4692      	mov	sl, r2
 800b844:	eb1b 0509 	adds.w	r5, fp, r9
 800b848:	eb4c 060a 	adc.w	r6, ip, sl
 800b84c:	687b      	ldr	r3, [r7, #4]
 800b84e:	685b      	ldr	r3, [r3, #4]
 800b850:	4619      	mov	r1, r3
 800b852:	f04f 0200 	mov.w	r2, #0
 800b856:	f04f 0300 	mov.w	r3, #0
 800b85a:	f04f 0400 	mov.w	r4, #0
 800b85e:	0094      	lsls	r4, r2, #2
 800b860:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800b864:	008b      	lsls	r3, r1, #2
 800b866:	461a      	mov	r2, r3
 800b868:	4623      	mov	r3, r4
 800b86a:	4628      	mov	r0, r5
 800b86c:	4631      	mov	r1, r6
 800b86e:	f7f5 fa0b 	bl	8000c88 <__aeabi_uldivmod>
 800b872:	4603      	mov	r3, r0
 800b874:	460c      	mov	r4, r1
 800b876:	461a      	mov	r2, r3
 800b878:	4b0e      	ldr	r3, [pc, #56]	; (800b8b4 <UART_SetConfig+0x6f4>)
 800b87a:	fba3 1302 	umull	r1, r3, r3, r2
 800b87e:	095b      	lsrs	r3, r3, #5
 800b880:	2164      	movs	r1, #100	; 0x64
 800b882:	fb01 f303 	mul.w	r3, r1, r3
 800b886:	1ad3      	subs	r3, r2, r3
 800b888:	011b      	lsls	r3, r3, #4
 800b88a:	3332      	adds	r3, #50	; 0x32
 800b88c:	4a09      	ldr	r2, [pc, #36]	; (800b8b4 <UART_SetConfig+0x6f4>)
 800b88e:	fba2 2303 	umull	r2, r3, r2, r3
 800b892:	095b      	lsrs	r3, r3, #5
 800b894:	f003 020f 	and.w	r2, r3, #15
 800b898:	687b      	ldr	r3, [r7, #4]
 800b89a:	681b      	ldr	r3, [r3, #0]
 800b89c:	4442      	add	r2, r8
 800b89e:	609a      	str	r2, [r3, #8]
}
 800b8a0:	e7ff      	b.n	800b8a2 <UART_SetConfig+0x6e2>
 800b8a2:	bf00      	nop
 800b8a4:	3714      	adds	r7, #20
 800b8a6:	46bd      	mov	sp, r7
 800b8a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b8ac:	40011000 	.word	0x40011000
 800b8b0:	40011400 	.word	0x40011400
 800b8b4:	51eb851f 	.word	0x51eb851f

0800b8b8 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 800b8b8:	b084      	sub	sp, #16
 800b8ba:	b480      	push	{r7}
 800b8bc:	b085      	sub	sp, #20
 800b8be:	af00      	add	r7, sp, #0
 800b8c0:	6078      	str	r0, [r7, #4]
 800b8c2:	f107 001c 	add.w	r0, r7, #28
 800b8c6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800b8ca:	2300      	movs	r3, #0
 800b8cc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800b8ce:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 800b8d0:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800b8d2:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 800b8d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 800b8d6:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800b8d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 800b8da:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800b8dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 800b8de:	431a      	orrs	r2, r3
             Init.ClockDiv
 800b8e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 800b8e2:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800b8e4:	68fa      	ldr	r2, [r7, #12]
 800b8e6:	4313      	orrs	r3, r2
 800b8e8:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800b8ea:	687b      	ldr	r3, [r7, #4]
 800b8ec:	685b      	ldr	r3, [r3, #4]
 800b8ee:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 800b8f2:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800b8f6:	68fa      	ldr	r2, [r7, #12]
 800b8f8:	431a      	orrs	r2, r3
 800b8fa:	687b      	ldr	r3, [r7, #4]
 800b8fc:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800b8fe:	2300      	movs	r3, #0
}
 800b900:	4618      	mov	r0, r3
 800b902:	3714      	adds	r7, #20
 800b904:	46bd      	mov	sp, r7
 800b906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b90a:	b004      	add	sp, #16
 800b90c:	4770      	bx	lr

0800b90e <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 800b90e:	b480      	push	{r7}
 800b910:	b083      	sub	sp, #12
 800b912:	af00      	add	r7, sp, #0
 800b914:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 800b916:	687b      	ldr	r3, [r7, #4]
 800b918:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800b91c:	4618      	mov	r0, r3
 800b91e:	370c      	adds	r7, #12
 800b920:	46bd      	mov	sp, r7
 800b922:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b926:	4770      	bx	lr

0800b928 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 800b928:	b480      	push	{r7}
 800b92a:	b083      	sub	sp, #12
 800b92c:	af00      	add	r7, sp, #0
 800b92e:	6078      	str	r0, [r7, #4]
 800b930:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 800b932:	683b      	ldr	r3, [r7, #0]
 800b934:	681a      	ldr	r2, [r3, #0]
 800b936:	687b      	ldr	r3, [r7, #4]
 800b938:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800b93c:	2300      	movs	r3, #0
}
 800b93e:	4618      	mov	r0, r3
 800b940:	370c      	adds	r7, #12
 800b942:	46bd      	mov	sp, r7
 800b944:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b948:	4770      	bx	lr

0800b94a <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 800b94a:	b580      	push	{r7, lr}
 800b94c:	b082      	sub	sp, #8
 800b94e:	af00      	add	r7, sp, #0
 800b950:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 800b952:	687b      	ldr	r3, [r7, #4]
 800b954:	2203      	movs	r2, #3
 800b956:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 800b958:	2002      	movs	r0, #2
 800b95a:	f7f9 fb49 	bl	8004ff0 <HAL_Delay>
  
  return HAL_OK;
 800b95e:	2300      	movs	r3, #0
}
 800b960:	4618      	mov	r0, r3
 800b962:	3708      	adds	r7, #8
 800b964:	46bd      	mov	sp, r7
 800b966:	bd80      	pop	{r7, pc}

0800b968 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 800b968:	b480      	push	{r7}
 800b96a:	b083      	sub	sp, #12
 800b96c:	af00      	add	r7, sp, #0
 800b96e:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 800b970:	687b      	ldr	r3, [r7, #4]
 800b972:	681b      	ldr	r3, [r3, #0]
 800b974:	f003 0303 	and.w	r3, r3, #3
}
 800b978:	4618      	mov	r0, r3
 800b97a:	370c      	adds	r7, #12
 800b97c:	46bd      	mov	sp, r7
 800b97e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b982:	4770      	bx	lr

0800b984 <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 800b984:	b480      	push	{r7}
 800b986:	b085      	sub	sp, #20
 800b988:	af00      	add	r7, sp, #0
 800b98a:	6078      	str	r0, [r7, #4]
 800b98c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800b98e:	2300      	movs	r3, #0
 800b990:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 800b992:	683b      	ldr	r3, [r7, #0]
 800b994:	681a      	ldr	r2, [r3, #0]
 800b996:	687b      	ldr	r3, [r7, #4]
 800b998:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800b99a:	683b      	ldr	r3, [r7, #0]
 800b99c:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800b99e:	683b      	ldr	r3, [r7, #0]
 800b9a0:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800b9a2:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800b9a4:	683b      	ldr	r3, [r7, #0]
 800b9a6:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800b9a8:	431a      	orrs	r2, r3
                       Command->CPSM);
 800b9aa:	683b      	ldr	r3, [r7, #0]
 800b9ac:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800b9ae:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800b9b0:	68fa      	ldr	r2, [r7, #12]
 800b9b2:	4313      	orrs	r3, r2
 800b9b4:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800b9b6:	687b      	ldr	r3, [r7, #4]
 800b9b8:	68db      	ldr	r3, [r3, #12]
 800b9ba:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800b9be:	f023 030f 	bic.w	r3, r3, #15
 800b9c2:	68fa      	ldr	r2, [r7, #12]
 800b9c4:	431a      	orrs	r2, r3
 800b9c6:	687b      	ldr	r3, [r7, #4]
 800b9c8:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800b9ca:	2300      	movs	r3, #0
}
 800b9cc:	4618      	mov	r0, r3
 800b9ce:	3714      	adds	r7, #20
 800b9d0:	46bd      	mov	sp, r7
 800b9d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9d6:	4770      	bx	lr

0800b9d8 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 800b9d8:	b480      	push	{r7}
 800b9da:	b083      	sub	sp, #12
 800b9dc:	af00      	add	r7, sp, #0
 800b9de:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 800b9e0:	687b      	ldr	r3, [r7, #4]
 800b9e2:	691b      	ldr	r3, [r3, #16]
 800b9e4:	b2db      	uxtb	r3, r3
}
 800b9e6:	4618      	mov	r0, r3
 800b9e8:	370c      	adds	r7, #12
 800b9ea:	46bd      	mov	sp, r7
 800b9ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9f0:	4770      	bx	lr

0800b9f2 <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 800b9f2:	b480      	push	{r7}
 800b9f4:	b085      	sub	sp, #20
 800b9f6:	af00      	add	r7, sp, #0
 800b9f8:	6078      	str	r0, [r7, #4]
 800b9fa:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 800b9fc:	687b      	ldr	r3, [r7, #4]
 800b9fe:	3314      	adds	r3, #20
 800ba00:	461a      	mov	r2, r3
 800ba02:	683b      	ldr	r3, [r7, #0]
 800ba04:	4413      	add	r3, r2
 800ba06:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 800ba08:	68fb      	ldr	r3, [r7, #12]
 800ba0a:	681b      	ldr	r3, [r3, #0]
}  
 800ba0c:	4618      	mov	r0, r3
 800ba0e:	3714      	adds	r7, #20
 800ba10:	46bd      	mov	sp, r7
 800ba12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba16:	4770      	bx	lr

0800ba18 <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 800ba18:	b480      	push	{r7}
 800ba1a:	b085      	sub	sp, #20
 800ba1c:	af00      	add	r7, sp, #0
 800ba1e:	6078      	str	r0, [r7, #4]
 800ba20:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800ba22:	2300      	movs	r3, #0
 800ba24:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 800ba26:	683b      	ldr	r3, [r7, #0]
 800ba28:	681a      	ldr	r2, [r3, #0]
 800ba2a:	687b      	ldr	r3, [r7, #4]
 800ba2c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 800ba2e:	683b      	ldr	r3, [r7, #0]
 800ba30:	685a      	ldr	r2, [r3, #4]
 800ba32:	687b      	ldr	r3, [r7, #4]
 800ba34:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800ba36:	683b      	ldr	r3, [r7, #0]
 800ba38:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800ba3a:	683b      	ldr	r3, [r7, #0]
 800ba3c:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800ba3e:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800ba40:	683b      	ldr	r3, [r7, #0]
 800ba42:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800ba44:	431a      	orrs	r2, r3
                       Data->DPSM);
 800ba46:	683b      	ldr	r3, [r7, #0]
 800ba48:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800ba4a:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800ba4c:	68fa      	ldr	r2, [r7, #12]
 800ba4e:	4313      	orrs	r3, r2
 800ba50:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800ba52:	687b      	ldr	r3, [r7, #4]
 800ba54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba56:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 800ba5a:	68fb      	ldr	r3, [r7, #12]
 800ba5c:	431a      	orrs	r2, r3
 800ba5e:	687b      	ldr	r3, [r7, #4]
 800ba60:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800ba62:	2300      	movs	r3, #0

}
 800ba64:	4618      	mov	r0, r3
 800ba66:	3714      	adds	r7, #20
 800ba68:	46bd      	mov	sp, r7
 800ba6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba6e:	4770      	bx	lr

0800ba70 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 800ba70:	b580      	push	{r7, lr}
 800ba72:	b088      	sub	sp, #32
 800ba74:	af00      	add	r7, sp, #0
 800ba76:	6078      	str	r0, [r7, #4]
 800ba78:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800ba7a:	683b      	ldr	r3, [r7, #0]
 800ba7c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800ba7e:	2310      	movs	r3, #16
 800ba80:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800ba82:	2340      	movs	r3, #64	; 0x40
 800ba84:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800ba86:	2300      	movs	r3, #0
 800ba88:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800ba8a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ba8e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800ba90:	f107 0308 	add.w	r3, r7, #8
 800ba94:	4619      	mov	r1, r3
 800ba96:	6878      	ldr	r0, [r7, #4]
 800ba98:	f7ff ff74 	bl	800b984 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 800ba9c:	f241 3288 	movw	r2, #5000	; 0x1388
 800baa0:	2110      	movs	r1, #16
 800baa2:	6878      	ldr	r0, [r7, #4]
 800baa4:	f000 fa40 	bl	800bf28 <SDMMC_GetCmdResp1>
 800baa8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800baaa:	69fb      	ldr	r3, [r7, #28]
}
 800baac:	4618      	mov	r0, r3
 800baae:	3720      	adds	r7, #32
 800bab0:	46bd      	mov	sp, r7
 800bab2:	bd80      	pop	{r7, pc}

0800bab4 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800bab4:	b580      	push	{r7, lr}
 800bab6:	b088      	sub	sp, #32
 800bab8:	af00      	add	r7, sp, #0
 800baba:	6078      	str	r0, [r7, #4]
 800babc:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800babe:	683b      	ldr	r3, [r7, #0]
 800bac0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800bac2:	2311      	movs	r3, #17
 800bac4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800bac6:	2340      	movs	r3, #64	; 0x40
 800bac8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800baca:	2300      	movs	r3, #0
 800bacc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800bace:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bad2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800bad4:	f107 0308 	add.w	r3, r7, #8
 800bad8:	4619      	mov	r1, r3
 800bada:	6878      	ldr	r0, [r7, #4]
 800badc:	f7ff ff52 	bl	800b984 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800bae0:	f241 3288 	movw	r2, #5000	; 0x1388
 800bae4:	2111      	movs	r1, #17
 800bae6:	6878      	ldr	r0, [r7, #4]
 800bae8:	f000 fa1e 	bl	800bf28 <SDMMC_GetCmdResp1>
 800baec:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800baee:	69fb      	ldr	r3, [r7, #28]
}
 800baf0:	4618      	mov	r0, r3
 800baf2:	3720      	adds	r7, #32
 800baf4:	46bd      	mov	sp, r7
 800baf6:	bd80      	pop	{r7, pc}

0800baf8 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800baf8:	b580      	push	{r7, lr}
 800bafa:	b088      	sub	sp, #32
 800bafc:	af00      	add	r7, sp, #0
 800bafe:	6078      	str	r0, [r7, #4]
 800bb00:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800bb02:	683b      	ldr	r3, [r7, #0]
 800bb04:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800bb06:	2312      	movs	r3, #18
 800bb08:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800bb0a:	2340      	movs	r3, #64	; 0x40
 800bb0c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800bb0e:	2300      	movs	r3, #0
 800bb10:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800bb12:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bb16:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800bb18:	f107 0308 	add.w	r3, r7, #8
 800bb1c:	4619      	mov	r1, r3
 800bb1e:	6878      	ldr	r0, [r7, #4]
 800bb20:	f7ff ff30 	bl	800b984 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800bb24:	f241 3288 	movw	r2, #5000	; 0x1388
 800bb28:	2112      	movs	r1, #18
 800bb2a:	6878      	ldr	r0, [r7, #4]
 800bb2c:	f000 f9fc 	bl	800bf28 <SDMMC_GetCmdResp1>
 800bb30:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bb32:	69fb      	ldr	r3, [r7, #28]
}
 800bb34:	4618      	mov	r0, r3
 800bb36:	3720      	adds	r7, #32
 800bb38:	46bd      	mov	sp, r7
 800bb3a:	bd80      	pop	{r7, pc}

0800bb3c <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800bb3c:	b580      	push	{r7, lr}
 800bb3e:	b088      	sub	sp, #32
 800bb40:	af00      	add	r7, sp, #0
 800bb42:	6078      	str	r0, [r7, #4]
 800bb44:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800bb46:	683b      	ldr	r3, [r7, #0]
 800bb48:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800bb4a:	2318      	movs	r3, #24
 800bb4c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800bb4e:	2340      	movs	r3, #64	; 0x40
 800bb50:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800bb52:	2300      	movs	r3, #0
 800bb54:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800bb56:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bb5a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800bb5c:	f107 0308 	add.w	r3, r7, #8
 800bb60:	4619      	mov	r1, r3
 800bb62:	6878      	ldr	r0, [r7, #4]
 800bb64:	f7ff ff0e 	bl	800b984 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800bb68:	f241 3288 	movw	r2, #5000	; 0x1388
 800bb6c:	2118      	movs	r1, #24
 800bb6e:	6878      	ldr	r0, [r7, #4]
 800bb70:	f000 f9da 	bl	800bf28 <SDMMC_GetCmdResp1>
 800bb74:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bb76:	69fb      	ldr	r3, [r7, #28]
}
 800bb78:	4618      	mov	r0, r3
 800bb7a:	3720      	adds	r7, #32
 800bb7c:	46bd      	mov	sp, r7
 800bb7e:	bd80      	pop	{r7, pc}

0800bb80 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800bb80:	b580      	push	{r7, lr}
 800bb82:	b088      	sub	sp, #32
 800bb84:	af00      	add	r7, sp, #0
 800bb86:	6078      	str	r0, [r7, #4]
 800bb88:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800bb8a:	683b      	ldr	r3, [r7, #0]
 800bb8c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800bb8e:	2319      	movs	r3, #25
 800bb90:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800bb92:	2340      	movs	r3, #64	; 0x40
 800bb94:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800bb96:	2300      	movs	r3, #0
 800bb98:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800bb9a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bb9e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800bba0:	f107 0308 	add.w	r3, r7, #8
 800bba4:	4619      	mov	r1, r3
 800bba6:	6878      	ldr	r0, [r7, #4]
 800bba8:	f7ff feec 	bl	800b984 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800bbac:	f241 3288 	movw	r2, #5000	; 0x1388
 800bbb0:	2119      	movs	r1, #25
 800bbb2:	6878      	ldr	r0, [r7, #4]
 800bbb4:	f000 f9b8 	bl	800bf28 <SDMMC_GetCmdResp1>
 800bbb8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bbba:	69fb      	ldr	r3, [r7, #28]
}
 800bbbc:	4618      	mov	r0, r3
 800bbbe:	3720      	adds	r7, #32
 800bbc0:	46bd      	mov	sp, r7
 800bbc2:	bd80      	pop	{r7, pc}

0800bbc4 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 800bbc4:	b580      	push	{r7, lr}
 800bbc6:	b088      	sub	sp, #32
 800bbc8:	af00      	add	r7, sp, #0
 800bbca:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800bbcc:	2300      	movs	r3, #0
 800bbce:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800bbd0:	230c      	movs	r3, #12
 800bbd2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800bbd4:	2340      	movs	r3, #64	; 0x40
 800bbd6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800bbd8:	2300      	movs	r3, #0
 800bbda:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800bbdc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bbe0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800bbe2:	f107 0308 	add.w	r3, r7, #8
 800bbe6:	4619      	mov	r1, r3
 800bbe8:	6878      	ldr	r0, [r7, #4]
 800bbea:	f7ff fecb 	bl	800b984 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 800bbee:	4a05      	ldr	r2, [pc, #20]	; (800bc04 <SDMMC_CmdStopTransfer+0x40>)
 800bbf0:	210c      	movs	r1, #12
 800bbf2:	6878      	ldr	r0, [r7, #4]
 800bbf4:	f000 f998 	bl	800bf28 <SDMMC_GetCmdResp1>
 800bbf8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bbfa:	69fb      	ldr	r3, [r7, #28]
}
 800bbfc:	4618      	mov	r0, r3
 800bbfe:	3720      	adds	r7, #32
 800bc00:	46bd      	mov	sp, r7
 800bc02:	bd80      	pop	{r7, pc}
 800bc04:	05f5e100 	.word	0x05f5e100

0800bc08 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 800bc08:	b580      	push	{r7, lr}
 800bc0a:	b08a      	sub	sp, #40	; 0x28
 800bc0c:	af00      	add	r7, sp, #0
 800bc0e:	60f8      	str	r0, [r7, #12]
 800bc10:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800bc14:	683b      	ldr	r3, [r7, #0]
 800bc16:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800bc18:	2307      	movs	r3, #7
 800bc1a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800bc1c:	2340      	movs	r3, #64	; 0x40
 800bc1e:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800bc20:	2300      	movs	r3, #0
 800bc22:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800bc24:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bc28:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800bc2a:	f107 0310 	add.w	r3, r7, #16
 800bc2e:	4619      	mov	r1, r3
 800bc30:	68f8      	ldr	r0, [r7, #12]
 800bc32:	f7ff fea7 	bl	800b984 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 800bc36:	f241 3288 	movw	r2, #5000	; 0x1388
 800bc3a:	2107      	movs	r1, #7
 800bc3c:	68f8      	ldr	r0, [r7, #12]
 800bc3e:	f000 f973 	bl	800bf28 <SDMMC_GetCmdResp1>
 800bc42:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 800bc44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800bc46:	4618      	mov	r0, r3
 800bc48:	3728      	adds	r7, #40	; 0x28
 800bc4a:	46bd      	mov	sp, r7
 800bc4c:	bd80      	pop	{r7, pc}

0800bc4e <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 800bc4e:	b580      	push	{r7, lr}
 800bc50:	b088      	sub	sp, #32
 800bc52:	af00      	add	r7, sp, #0
 800bc54:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800bc56:	2300      	movs	r3, #0
 800bc58:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800bc5a:	2300      	movs	r3, #0
 800bc5c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 800bc5e:	2300      	movs	r3, #0
 800bc60:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800bc62:	2300      	movs	r3, #0
 800bc64:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800bc66:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bc6a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800bc6c:	f107 0308 	add.w	r3, r7, #8
 800bc70:	4619      	mov	r1, r3
 800bc72:	6878      	ldr	r0, [r7, #4]
 800bc74:	f7ff fe86 	bl	800b984 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 800bc78:	6878      	ldr	r0, [r7, #4]
 800bc7a:	f000 f92d 	bl	800bed8 <SDMMC_GetCmdError>
 800bc7e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bc80:	69fb      	ldr	r3, [r7, #28]
}
 800bc82:	4618      	mov	r0, r3
 800bc84:	3720      	adds	r7, #32
 800bc86:	46bd      	mov	sp, r7
 800bc88:	bd80      	pop	{r7, pc}

0800bc8a <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 800bc8a:	b580      	push	{r7, lr}
 800bc8c:	b088      	sub	sp, #32
 800bc8e:	af00      	add	r7, sp, #0
 800bc90:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800bc92:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800bc96:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800bc98:	2308      	movs	r3, #8
 800bc9a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800bc9c:	2340      	movs	r3, #64	; 0x40
 800bc9e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800bca0:	2300      	movs	r3, #0
 800bca2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800bca4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bca8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800bcaa:	f107 0308 	add.w	r3, r7, #8
 800bcae:	4619      	mov	r1, r3
 800bcb0:	6878      	ldr	r0, [r7, #4]
 800bcb2:	f7ff fe67 	bl	800b984 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 800bcb6:	6878      	ldr	r0, [r7, #4]
 800bcb8:	f000 fb16 	bl	800c2e8 <SDMMC_GetCmdResp7>
 800bcbc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bcbe:	69fb      	ldr	r3, [r7, #28]
}
 800bcc0:	4618      	mov	r0, r3
 800bcc2:	3720      	adds	r7, #32
 800bcc4:	46bd      	mov	sp, r7
 800bcc6:	bd80      	pop	{r7, pc}

0800bcc8 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800bcc8:	b580      	push	{r7, lr}
 800bcca:	b088      	sub	sp, #32
 800bccc:	af00      	add	r7, sp, #0
 800bcce:	6078      	str	r0, [r7, #4]
 800bcd0:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800bcd2:	683b      	ldr	r3, [r7, #0]
 800bcd4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800bcd6:	2337      	movs	r3, #55	; 0x37
 800bcd8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800bcda:	2340      	movs	r3, #64	; 0x40
 800bcdc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800bcde:	2300      	movs	r3, #0
 800bce0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800bce2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bce6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800bce8:	f107 0308 	add.w	r3, r7, #8
 800bcec:	4619      	mov	r1, r3
 800bcee:	6878      	ldr	r0, [r7, #4]
 800bcf0:	f7ff fe48 	bl	800b984 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 800bcf4:	f241 3288 	movw	r2, #5000	; 0x1388
 800bcf8:	2137      	movs	r1, #55	; 0x37
 800bcfa:	6878      	ldr	r0, [r7, #4]
 800bcfc:	f000 f914 	bl	800bf28 <SDMMC_GetCmdResp1>
 800bd00:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bd02:	69fb      	ldr	r3, [r7, #28]
}
 800bd04:	4618      	mov	r0, r3
 800bd06:	3720      	adds	r7, #32
 800bd08:	46bd      	mov	sp, r7
 800bd0a:	bd80      	pop	{r7, pc}

0800bd0c <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800bd0c:	b580      	push	{r7, lr}
 800bd0e:	b088      	sub	sp, #32
 800bd10:	af00      	add	r7, sp, #0
 800bd12:	6078      	str	r0, [r7, #4]
 800bd14:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800bd16:	683b      	ldr	r3, [r7, #0]
 800bd18:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800bd1c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800bd20:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800bd22:	2329      	movs	r3, #41	; 0x29
 800bd24:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800bd26:	2340      	movs	r3, #64	; 0x40
 800bd28:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800bd2a:	2300      	movs	r3, #0
 800bd2c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800bd2e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bd32:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800bd34:	f107 0308 	add.w	r3, r7, #8
 800bd38:	4619      	mov	r1, r3
 800bd3a:	6878      	ldr	r0, [r7, #4]
 800bd3c:	f7ff fe22 	bl	800b984 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 800bd40:	6878      	ldr	r0, [r7, #4]
 800bd42:	f000 fa23 	bl	800c18c <SDMMC_GetCmdResp3>
 800bd46:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bd48:	69fb      	ldr	r3, [r7, #28]
}
 800bd4a:	4618      	mov	r0, r3
 800bd4c:	3720      	adds	r7, #32
 800bd4e:	46bd      	mov	sp, r7
 800bd50:	bd80      	pop	{r7, pc}

0800bd52 <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 800bd52:	b580      	push	{r7, lr}
 800bd54:	b088      	sub	sp, #32
 800bd56:	af00      	add	r7, sp, #0
 800bd58:	6078      	str	r0, [r7, #4]
 800bd5a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800bd5c:	683b      	ldr	r3, [r7, #0]
 800bd5e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800bd60:	2306      	movs	r3, #6
 800bd62:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800bd64:	2340      	movs	r3, #64	; 0x40
 800bd66:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800bd68:	2300      	movs	r3, #0
 800bd6a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800bd6c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bd70:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800bd72:	f107 0308 	add.w	r3, r7, #8
 800bd76:	4619      	mov	r1, r3
 800bd78:	6878      	ldr	r0, [r7, #4]
 800bd7a:	f7ff fe03 	bl	800b984 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 800bd7e:	f241 3288 	movw	r2, #5000	; 0x1388
 800bd82:	2106      	movs	r1, #6
 800bd84:	6878      	ldr	r0, [r7, #4]
 800bd86:	f000 f8cf 	bl	800bf28 <SDMMC_GetCmdResp1>
 800bd8a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bd8c:	69fb      	ldr	r3, [r7, #28]
}
 800bd8e:	4618      	mov	r0, r3
 800bd90:	3720      	adds	r7, #32
 800bd92:	46bd      	mov	sp, r7
 800bd94:	bd80      	pop	{r7, pc}

0800bd96 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 800bd96:	b580      	push	{r7, lr}
 800bd98:	b088      	sub	sp, #32
 800bd9a:	af00      	add	r7, sp, #0
 800bd9c:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800bd9e:	2300      	movs	r3, #0
 800bda0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800bda2:	2333      	movs	r3, #51	; 0x33
 800bda4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800bda6:	2340      	movs	r3, #64	; 0x40
 800bda8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800bdaa:	2300      	movs	r3, #0
 800bdac:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800bdae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bdb2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800bdb4:	f107 0308 	add.w	r3, r7, #8
 800bdb8:	4619      	mov	r1, r3
 800bdba:	6878      	ldr	r0, [r7, #4]
 800bdbc:	f7ff fde2 	bl	800b984 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 800bdc0:	f241 3288 	movw	r2, #5000	; 0x1388
 800bdc4:	2133      	movs	r1, #51	; 0x33
 800bdc6:	6878      	ldr	r0, [r7, #4]
 800bdc8:	f000 f8ae 	bl	800bf28 <SDMMC_GetCmdResp1>
 800bdcc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bdce:	69fb      	ldr	r3, [r7, #28]
}
 800bdd0:	4618      	mov	r0, r3
 800bdd2:	3720      	adds	r7, #32
 800bdd4:	46bd      	mov	sp, r7
 800bdd6:	bd80      	pop	{r7, pc}

0800bdd8 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 800bdd8:	b580      	push	{r7, lr}
 800bdda:	b088      	sub	sp, #32
 800bddc:	af00      	add	r7, sp, #0
 800bdde:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800bde0:	2300      	movs	r3, #0
 800bde2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800bde4:	2302      	movs	r3, #2
 800bde6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800bde8:	23c0      	movs	r3, #192	; 0xc0
 800bdea:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800bdec:	2300      	movs	r3, #0
 800bdee:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800bdf0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bdf4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800bdf6:	f107 0308 	add.w	r3, r7, #8
 800bdfa:	4619      	mov	r1, r3
 800bdfc:	6878      	ldr	r0, [r7, #4]
 800bdfe:	f7ff fdc1 	bl	800b984 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800be02:	6878      	ldr	r0, [r7, #4]
 800be04:	f000 f97c 	bl	800c100 <SDMMC_GetCmdResp2>
 800be08:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800be0a:	69fb      	ldr	r3, [r7, #28]
}
 800be0c:	4618      	mov	r0, r3
 800be0e:	3720      	adds	r7, #32
 800be10:	46bd      	mov	sp, r7
 800be12:	bd80      	pop	{r7, pc}

0800be14 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800be14:	b580      	push	{r7, lr}
 800be16:	b088      	sub	sp, #32
 800be18:	af00      	add	r7, sp, #0
 800be1a:	6078      	str	r0, [r7, #4]
 800be1c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800be1e:	683b      	ldr	r3, [r7, #0]
 800be20:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800be22:	2309      	movs	r3, #9
 800be24:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800be26:	23c0      	movs	r3, #192	; 0xc0
 800be28:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800be2a:	2300      	movs	r3, #0
 800be2c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800be2e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800be32:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800be34:	f107 0308 	add.w	r3, r7, #8
 800be38:	4619      	mov	r1, r3
 800be3a:	6878      	ldr	r0, [r7, #4]
 800be3c:	f7ff fda2 	bl	800b984 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800be40:	6878      	ldr	r0, [r7, #4]
 800be42:	f000 f95d 	bl	800c100 <SDMMC_GetCmdResp2>
 800be46:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800be48:	69fb      	ldr	r3, [r7, #28]
}
 800be4a:	4618      	mov	r0, r3
 800be4c:	3720      	adds	r7, #32
 800be4e:	46bd      	mov	sp, r7
 800be50:	bd80      	pop	{r7, pc}

0800be52 <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 800be52:	b580      	push	{r7, lr}
 800be54:	b088      	sub	sp, #32
 800be56:	af00      	add	r7, sp, #0
 800be58:	6078      	str	r0, [r7, #4]
 800be5a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800be5c:	2300      	movs	r3, #0
 800be5e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800be60:	2303      	movs	r3, #3
 800be62:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800be64:	2340      	movs	r3, #64	; 0x40
 800be66:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800be68:	2300      	movs	r3, #0
 800be6a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800be6c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800be70:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800be72:	f107 0308 	add.w	r3, r7, #8
 800be76:	4619      	mov	r1, r3
 800be78:	6878      	ldr	r0, [r7, #4]
 800be7a:	f7ff fd83 	bl	800b984 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800be7e:	683a      	ldr	r2, [r7, #0]
 800be80:	2103      	movs	r1, #3
 800be82:	6878      	ldr	r0, [r7, #4]
 800be84:	f000 f9bc 	bl	800c200 <SDMMC_GetCmdResp6>
 800be88:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800be8a:	69fb      	ldr	r3, [r7, #28]
}
 800be8c:	4618      	mov	r0, r3
 800be8e:	3720      	adds	r7, #32
 800be90:	46bd      	mov	sp, r7
 800be92:	bd80      	pop	{r7, pc}

0800be94 <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800be94:	b580      	push	{r7, lr}
 800be96:	b088      	sub	sp, #32
 800be98:	af00      	add	r7, sp, #0
 800be9a:	6078      	str	r0, [r7, #4]
 800be9c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 800be9e:	683b      	ldr	r3, [r7, #0]
 800bea0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800bea2:	230d      	movs	r3, #13
 800bea4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800bea6:	2340      	movs	r3, #64	; 0x40
 800bea8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800beaa:	2300      	movs	r3, #0
 800beac:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800beae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800beb2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800beb4:	f107 0308 	add.w	r3, r7, #8
 800beb8:	4619      	mov	r1, r3
 800beba:	6878      	ldr	r0, [r7, #4]
 800bebc:	f7ff fd62 	bl	800b984 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 800bec0:	f241 3288 	movw	r2, #5000	; 0x1388
 800bec4:	210d      	movs	r1, #13
 800bec6:	6878      	ldr	r0, [r7, #4]
 800bec8:	f000 f82e 	bl	800bf28 <SDMMC_GetCmdResp1>
 800becc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bece:	69fb      	ldr	r3, [r7, #28]
}
 800bed0:	4618      	mov	r0, r3
 800bed2:	3720      	adds	r7, #32
 800bed4:	46bd      	mov	sp, r7
 800bed6:	bd80      	pop	{r7, pc}

0800bed8 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 800bed8:	b490      	push	{r4, r7}
 800beda:	b082      	sub	sp, #8
 800bedc:	af00      	add	r7, sp, #0
 800bede:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800bee0:	4b0f      	ldr	r3, [pc, #60]	; (800bf20 <SDMMC_GetCmdError+0x48>)
 800bee2:	681b      	ldr	r3, [r3, #0]
 800bee4:	4a0f      	ldr	r2, [pc, #60]	; (800bf24 <SDMMC_GetCmdError+0x4c>)
 800bee6:	fba2 2303 	umull	r2, r3, r2, r3
 800beea:	0a5b      	lsrs	r3, r3, #9
 800beec:	f241 3288 	movw	r2, #5000	; 0x1388
 800bef0:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800bef4:	4623      	mov	r3, r4
 800bef6:	1e5c      	subs	r4, r3, #1
 800bef8:	2b00      	cmp	r3, #0
 800befa:	d102      	bne.n	800bf02 <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800befc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800bf00:	e009      	b.n	800bf16 <SDMMC_GetCmdError+0x3e>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 800bf02:	687b      	ldr	r3, [r7, #4]
 800bf04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bf06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bf0a:	2b00      	cmp	r3, #0
 800bf0c:	d0f2      	beq.n	800bef4 <SDMMC_GetCmdError+0x1c>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800bf0e:	687b      	ldr	r3, [r7, #4]
 800bf10:	22c5      	movs	r2, #197	; 0xc5
 800bf12:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 800bf14:	2300      	movs	r3, #0
}
 800bf16:	4618      	mov	r0, r3
 800bf18:	3708      	adds	r7, #8
 800bf1a:	46bd      	mov	sp, r7
 800bf1c:	bc90      	pop	{r4, r7}
 800bf1e:	4770      	bx	lr
 800bf20:	20000000 	.word	0x20000000
 800bf24:	10624dd3 	.word	0x10624dd3

0800bf28 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 800bf28:	b590      	push	{r4, r7, lr}
 800bf2a:	b087      	sub	sp, #28
 800bf2c:	af00      	add	r7, sp, #0
 800bf2e:	60f8      	str	r0, [r7, #12]
 800bf30:	460b      	mov	r3, r1
 800bf32:	607a      	str	r2, [r7, #4]
 800bf34:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800bf36:	4b6f      	ldr	r3, [pc, #444]	; (800c0f4 <SDMMC_GetCmdResp1+0x1cc>)
 800bf38:	681b      	ldr	r3, [r3, #0]
 800bf3a:	4a6f      	ldr	r2, [pc, #444]	; (800c0f8 <SDMMC_GetCmdResp1+0x1d0>)
 800bf3c:	fba2 2303 	umull	r2, r3, r2, r3
 800bf40:	0a5b      	lsrs	r3, r3, #9
 800bf42:	687a      	ldr	r2, [r7, #4]
 800bf44:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800bf48:	4623      	mov	r3, r4
 800bf4a:	1e5c      	subs	r4, r3, #1
 800bf4c:	2b00      	cmp	r3, #0
 800bf4e:	d102      	bne.n	800bf56 <SDMMC_GetCmdResp1+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800bf50:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800bf54:	e0c9      	b.n	800c0ea <SDMMC_GetCmdResp1+0x1c2>
    }
    sta_reg = SDIOx->STA;
 800bf56:	68fb      	ldr	r3, [r7, #12]
 800bf58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bf5a:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800bf5c:	697b      	ldr	r3, [r7, #20]
 800bf5e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800bf62:	2b00      	cmp	r3, #0
 800bf64:	d0f0      	beq.n	800bf48 <SDMMC_GetCmdResp1+0x20>
 800bf66:	697b      	ldr	r3, [r7, #20]
 800bf68:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800bf6c:	2b00      	cmp	r3, #0
 800bf6e:	d1eb      	bne.n	800bf48 <SDMMC_GetCmdResp1+0x20>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800bf70:	68fb      	ldr	r3, [r7, #12]
 800bf72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bf74:	f003 0304 	and.w	r3, r3, #4
 800bf78:	2b00      	cmp	r3, #0
 800bf7a:	d004      	beq.n	800bf86 <SDMMC_GetCmdResp1+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800bf7c:	68fb      	ldr	r3, [r7, #12]
 800bf7e:	2204      	movs	r2, #4
 800bf80:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800bf82:	2304      	movs	r3, #4
 800bf84:	e0b1      	b.n	800c0ea <SDMMC_GetCmdResp1+0x1c2>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800bf86:	68fb      	ldr	r3, [r7, #12]
 800bf88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bf8a:	f003 0301 	and.w	r3, r3, #1
 800bf8e:	2b00      	cmp	r3, #0
 800bf90:	d004      	beq.n	800bf9c <SDMMC_GetCmdResp1+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800bf92:	68fb      	ldr	r3, [r7, #12]
 800bf94:	2201      	movs	r2, #1
 800bf96:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800bf98:	2301      	movs	r3, #1
 800bf9a:	e0a6      	b.n	800c0ea <SDMMC_GetCmdResp1+0x1c2>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800bf9c:	68fb      	ldr	r3, [r7, #12]
 800bf9e:	22c5      	movs	r2, #197	; 0xc5
 800bfa0:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800bfa2:	68f8      	ldr	r0, [r7, #12]
 800bfa4:	f7ff fd18 	bl	800b9d8 <SDIO_GetCommandResponse>
 800bfa8:	4603      	mov	r3, r0
 800bfaa:	461a      	mov	r2, r3
 800bfac:	7afb      	ldrb	r3, [r7, #11]
 800bfae:	4293      	cmp	r3, r2
 800bfb0:	d001      	beq.n	800bfb6 <SDMMC_GetCmdResp1+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800bfb2:	2301      	movs	r3, #1
 800bfb4:	e099      	b.n	800c0ea <SDMMC_GetCmdResp1+0x1c2>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800bfb6:	2100      	movs	r1, #0
 800bfb8:	68f8      	ldr	r0, [r7, #12]
 800bfba:	f7ff fd1a 	bl	800b9f2 <SDIO_GetResponse>
 800bfbe:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800bfc0:	693a      	ldr	r2, [r7, #16]
 800bfc2:	4b4e      	ldr	r3, [pc, #312]	; (800c0fc <SDMMC_GetCmdResp1+0x1d4>)
 800bfc4:	4013      	ands	r3, r2
 800bfc6:	2b00      	cmp	r3, #0
 800bfc8:	d101      	bne.n	800bfce <SDMMC_GetCmdResp1+0xa6>
  {
    return SDMMC_ERROR_NONE;
 800bfca:	2300      	movs	r3, #0
 800bfcc:	e08d      	b.n	800c0ea <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800bfce:	693b      	ldr	r3, [r7, #16]
 800bfd0:	2b00      	cmp	r3, #0
 800bfd2:	da02      	bge.n	800bfda <SDMMC_GetCmdResp1+0xb2>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800bfd4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800bfd8:	e087      	b.n	800c0ea <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800bfda:	693b      	ldr	r3, [r7, #16]
 800bfdc:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800bfe0:	2b00      	cmp	r3, #0
 800bfe2:	d001      	beq.n	800bfe8 <SDMMC_GetCmdResp1+0xc0>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800bfe4:	2340      	movs	r3, #64	; 0x40
 800bfe6:	e080      	b.n	800c0ea <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800bfe8:	693b      	ldr	r3, [r7, #16]
 800bfea:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800bfee:	2b00      	cmp	r3, #0
 800bff0:	d001      	beq.n	800bff6 <SDMMC_GetCmdResp1+0xce>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800bff2:	2380      	movs	r3, #128	; 0x80
 800bff4:	e079      	b.n	800c0ea <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800bff6:	693b      	ldr	r3, [r7, #16]
 800bff8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800bffc:	2b00      	cmp	r3, #0
 800bffe:	d002      	beq.n	800c006 <SDMMC_GetCmdResp1+0xde>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800c000:	f44f 7380 	mov.w	r3, #256	; 0x100
 800c004:	e071      	b.n	800c0ea <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800c006:	693b      	ldr	r3, [r7, #16]
 800c008:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c00c:	2b00      	cmp	r3, #0
 800c00e:	d002      	beq.n	800c016 <SDMMC_GetCmdResp1+0xee>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800c010:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c014:	e069      	b.n	800c0ea <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800c016:	693b      	ldr	r3, [r7, #16]
 800c018:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800c01c:	2b00      	cmp	r3, #0
 800c01e:	d002      	beq.n	800c026 <SDMMC_GetCmdResp1+0xfe>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800c020:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c024:	e061      	b.n	800c0ea <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800c026:	693b      	ldr	r3, [r7, #16]
 800c028:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800c02c:	2b00      	cmp	r3, #0
 800c02e:	d002      	beq.n	800c036 <SDMMC_GetCmdResp1+0x10e>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800c030:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800c034:	e059      	b.n	800c0ea <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800c036:	693b      	ldr	r3, [r7, #16]
 800c038:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c03c:	2b00      	cmp	r3, #0
 800c03e:	d002      	beq.n	800c046 <SDMMC_GetCmdResp1+0x11e>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800c040:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c044:	e051      	b.n	800c0ea <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800c046:	693b      	ldr	r3, [r7, #16]
 800c048:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c04c:	2b00      	cmp	r3, #0
 800c04e:	d002      	beq.n	800c056 <SDMMC_GetCmdResp1+0x12e>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800c050:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800c054:	e049      	b.n	800c0ea <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800c056:	693b      	ldr	r3, [r7, #16]
 800c058:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800c05c:	2b00      	cmp	r3, #0
 800c05e:	d002      	beq.n	800c066 <SDMMC_GetCmdResp1+0x13e>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800c060:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800c064:	e041      	b.n	800c0ea <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800c066:	693b      	ldr	r3, [r7, #16]
 800c068:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800c06c:	2b00      	cmp	r3, #0
 800c06e:	d002      	beq.n	800c076 <SDMMC_GetCmdResp1+0x14e>
  {
    return SDMMC_ERROR_CC_ERR;
 800c070:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c074:	e039      	b.n	800c0ea <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800c076:	693b      	ldr	r3, [r7, #16]
 800c078:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800c07c:	2b00      	cmp	r3, #0
 800c07e:	d002      	beq.n	800c086 <SDMMC_GetCmdResp1+0x15e>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800c080:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800c084:	e031      	b.n	800c0ea <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800c086:	693b      	ldr	r3, [r7, #16]
 800c088:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c08c:	2b00      	cmp	r3, #0
 800c08e:	d002      	beq.n	800c096 <SDMMC_GetCmdResp1+0x16e>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800c090:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800c094:	e029      	b.n	800c0ea <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800c096:	693b      	ldr	r3, [r7, #16]
 800c098:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800c09c:	2b00      	cmp	r3, #0
 800c09e:	d002      	beq.n	800c0a6 <SDMMC_GetCmdResp1+0x17e>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800c0a0:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800c0a4:	e021      	b.n	800c0ea <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800c0a6:	693b      	ldr	r3, [r7, #16]
 800c0a8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c0ac:	2b00      	cmp	r3, #0
 800c0ae:	d002      	beq.n	800c0b6 <SDMMC_GetCmdResp1+0x18e>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800c0b0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800c0b4:	e019      	b.n	800c0ea <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800c0b6:	693b      	ldr	r3, [r7, #16]
 800c0b8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c0bc:	2b00      	cmp	r3, #0
 800c0be:	d002      	beq.n	800c0c6 <SDMMC_GetCmdResp1+0x19e>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800c0c0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800c0c4:	e011      	b.n	800c0ea <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800c0c6:	693b      	ldr	r3, [r7, #16]
 800c0c8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800c0cc:	2b00      	cmp	r3, #0
 800c0ce:	d002      	beq.n	800c0d6 <SDMMC_GetCmdResp1+0x1ae>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800c0d0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800c0d4:	e009      	b.n	800c0ea <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800c0d6:	693b      	ldr	r3, [r7, #16]
 800c0d8:	f003 0308 	and.w	r3, r3, #8
 800c0dc:	2b00      	cmp	r3, #0
 800c0de:	d002      	beq.n	800c0e6 <SDMMC_GetCmdResp1+0x1be>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800c0e0:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800c0e4:	e001      	b.n	800c0ea <SDMMC_GetCmdResp1+0x1c2>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800c0e6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800c0ea:	4618      	mov	r0, r3
 800c0ec:	371c      	adds	r7, #28
 800c0ee:	46bd      	mov	sp, r7
 800c0f0:	bd90      	pop	{r4, r7, pc}
 800c0f2:	bf00      	nop
 800c0f4:	20000000 	.word	0x20000000
 800c0f8:	10624dd3 	.word	0x10624dd3
 800c0fc:	fdffe008 	.word	0xfdffe008

0800c100 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 800c100:	b490      	push	{r4, r7}
 800c102:	b084      	sub	sp, #16
 800c104:	af00      	add	r7, sp, #0
 800c106:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800c108:	4b1e      	ldr	r3, [pc, #120]	; (800c184 <SDMMC_GetCmdResp2+0x84>)
 800c10a:	681b      	ldr	r3, [r3, #0]
 800c10c:	4a1e      	ldr	r2, [pc, #120]	; (800c188 <SDMMC_GetCmdResp2+0x88>)
 800c10e:	fba2 2303 	umull	r2, r3, r2, r3
 800c112:	0a5b      	lsrs	r3, r3, #9
 800c114:	f241 3288 	movw	r2, #5000	; 0x1388
 800c118:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800c11c:	4623      	mov	r3, r4
 800c11e:	1e5c      	subs	r4, r3, #1
 800c120:	2b00      	cmp	r3, #0
 800c122:	d102      	bne.n	800c12a <SDMMC_GetCmdResp2+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800c124:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800c128:	e026      	b.n	800c178 <SDMMC_GetCmdResp2+0x78>
    }
    sta_reg = SDIOx->STA;
 800c12a:	687b      	ldr	r3, [r7, #4]
 800c12c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c12e:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800c130:	68fb      	ldr	r3, [r7, #12]
 800c132:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800c136:	2b00      	cmp	r3, #0
 800c138:	d0f0      	beq.n	800c11c <SDMMC_GetCmdResp2+0x1c>
 800c13a:	68fb      	ldr	r3, [r7, #12]
 800c13c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800c140:	2b00      	cmp	r3, #0
 800c142:	d1eb      	bne.n	800c11c <SDMMC_GetCmdResp2+0x1c>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800c144:	687b      	ldr	r3, [r7, #4]
 800c146:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c148:	f003 0304 	and.w	r3, r3, #4
 800c14c:	2b00      	cmp	r3, #0
 800c14e:	d004      	beq.n	800c15a <SDMMC_GetCmdResp2+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800c150:	687b      	ldr	r3, [r7, #4]
 800c152:	2204      	movs	r2, #4
 800c154:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c156:	2304      	movs	r3, #4
 800c158:	e00e      	b.n	800c178 <SDMMC_GetCmdResp2+0x78>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800c15a:	687b      	ldr	r3, [r7, #4]
 800c15c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c15e:	f003 0301 	and.w	r3, r3, #1
 800c162:	2b00      	cmp	r3, #0
 800c164:	d004      	beq.n	800c170 <SDMMC_GetCmdResp2+0x70>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800c166:	687b      	ldr	r3, [r7, #4]
 800c168:	2201      	movs	r2, #1
 800c16a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c16c:	2301      	movs	r3, #1
 800c16e:	e003      	b.n	800c178 <SDMMC_GetCmdResp2+0x78>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800c170:	687b      	ldr	r3, [r7, #4]
 800c172:	22c5      	movs	r2, #197	; 0xc5
 800c174:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800c176:	2300      	movs	r3, #0
}
 800c178:	4618      	mov	r0, r3
 800c17a:	3710      	adds	r7, #16
 800c17c:	46bd      	mov	sp, r7
 800c17e:	bc90      	pop	{r4, r7}
 800c180:	4770      	bx	lr
 800c182:	bf00      	nop
 800c184:	20000000 	.word	0x20000000
 800c188:	10624dd3 	.word	0x10624dd3

0800c18c <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 800c18c:	b490      	push	{r4, r7}
 800c18e:	b084      	sub	sp, #16
 800c190:	af00      	add	r7, sp, #0
 800c192:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800c194:	4b18      	ldr	r3, [pc, #96]	; (800c1f8 <SDMMC_GetCmdResp3+0x6c>)
 800c196:	681b      	ldr	r3, [r3, #0]
 800c198:	4a18      	ldr	r2, [pc, #96]	; (800c1fc <SDMMC_GetCmdResp3+0x70>)
 800c19a:	fba2 2303 	umull	r2, r3, r2, r3
 800c19e:	0a5b      	lsrs	r3, r3, #9
 800c1a0:	f241 3288 	movw	r2, #5000	; 0x1388
 800c1a4:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800c1a8:	4623      	mov	r3, r4
 800c1aa:	1e5c      	subs	r4, r3, #1
 800c1ac:	2b00      	cmp	r3, #0
 800c1ae:	d102      	bne.n	800c1b6 <SDMMC_GetCmdResp3+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800c1b0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800c1b4:	e01b      	b.n	800c1ee <SDMMC_GetCmdResp3+0x62>
    }
    sta_reg = SDIOx->STA;
 800c1b6:	687b      	ldr	r3, [r7, #4]
 800c1b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c1ba:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800c1bc:	68fb      	ldr	r3, [r7, #12]
 800c1be:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800c1c2:	2b00      	cmp	r3, #0
 800c1c4:	d0f0      	beq.n	800c1a8 <SDMMC_GetCmdResp3+0x1c>
 800c1c6:	68fb      	ldr	r3, [r7, #12]
 800c1c8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800c1cc:	2b00      	cmp	r3, #0
 800c1ce:	d1eb      	bne.n	800c1a8 <SDMMC_GetCmdResp3+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800c1d0:	687b      	ldr	r3, [r7, #4]
 800c1d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c1d4:	f003 0304 	and.w	r3, r3, #4
 800c1d8:	2b00      	cmp	r3, #0
 800c1da:	d004      	beq.n	800c1e6 <SDMMC_GetCmdResp3+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800c1dc:	687b      	ldr	r3, [r7, #4]
 800c1de:	2204      	movs	r2, #4
 800c1e0:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c1e2:	2304      	movs	r3, #4
 800c1e4:	e003      	b.n	800c1ee <SDMMC_GetCmdResp3+0x62>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800c1e6:	687b      	ldr	r3, [r7, #4]
 800c1e8:	22c5      	movs	r2, #197	; 0xc5
 800c1ea:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800c1ec:	2300      	movs	r3, #0
}
 800c1ee:	4618      	mov	r0, r3
 800c1f0:	3710      	adds	r7, #16
 800c1f2:	46bd      	mov	sp, r7
 800c1f4:	bc90      	pop	{r4, r7}
 800c1f6:	4770      	bx	lr
 800c1f8:	20000000 	.word	0x20000000
 800c1fc:	10624dd3 	.word	0x10624dd3

0800c200 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800c200:	b590      	push	{r4, r7, lr}
 800c202:	b087      	sub	sp, #28
 800c204:	af00      	add	r7, sp, #0
 800c206:	60f8      	str	r0, [r7, #12]
 800c208:	460b      	mov	r3, r1
 800c20a:	607a      	str	r2, [r7, #4]
 800c20c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800c20e:	4b34      	ldr	r3, [pc, #208]	; (800c2e0 <SDMMC_GetCmdResp6+0xe0>)
 800c210:	681b      	ldr	r3, [r3, #0]
 800c212:	4a34      	ldr	r2, [pc, #208]	; (800c2e4 <SDMMC_GetCmdResp6+0xe4>)
 800c214:	fba2 2303 	umull	r2, r3, r2, r3
 800c218:	0a5b      	lsrs	r3, r3, #9
 800c21a:	f241 3288 	movw	r2, #5000	; 0x1388
 800c21e:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800c222:	4623      	mov	r3, r4
 800c224:	1e5c      	subs	r4, r3, #1
 800c226:	2b00      	cmp	r3, #0
 800c228:	d102      	bne.n	800c230 <SDMMC_GetCmdResp6+0x30>
    {
      return SDMMC_ERROR_TIMEOUT;
 800c22a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800c22e:	e052      	b.n	800c2d6 <SDMMC_GetCmdResp6+0xd6>
    }
    sta_reg = SDIOx->STA;
 800c230:	68fb      	ldr	r3, [r7, #12]
 800c232:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c234:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800c236:	697b      	ldr	r3, [r7, #20]
 800c238:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800c23c:	2b00      	cmp	r3, #0
 800c23e:	d0f0      	beq.n	800c222 <SDMMC_GetCmdResp6+0x22>
 800c240:	697b      	ldr	r3, [r7, #20]
 800c242:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800c246:	2b00      	cmp	r3, #0
 800c248:	d1eb      	bne.n	800c222 <SDMMC_GetCmdResp6+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800c24a:	68fb      	ldr	r3, [r7, #12]
 800c24c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c24e:	f003 0304 	and.w	r3, r3, #4
 800c252:	2b00      	cmp	r3, #0
 800c254:	d004      	beq.n	800c260 <SDMMC_GetCmdResp6+0x60>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800c256:	68fb      	ldr	r3, [r7, #12]
 800c258:	2204      	movs	r2, #4
 800c25a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c25c:	2304      	movs	r3, #4
 800c25e:	e03a      	b.n	800c2d6 <SDMMC_GetCmdResp6+0xd6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800c260:	68fb      	ldr	r3, [r7, #12]
 800c262:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c264:	f003 0301 	and.w	r3, r3, #1
 800c268:	2b00      	cmp	r3, #0
 800c26a:	d004      	beq.n	800c276 <SDMMC_GetCmdResp6+0x76>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800c26c:	68fb      	ldr	r3, [r7, #12]
 800c26e:	2201      	movs	r2, #1
 800c270:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c272:	2301      	movs	r3, #1
 800c274:	e02f      	b.n	800c2d6 <SDMMC_GetCmdResp6+0xd6>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800c276:	68f8      	ldr	r0, [r7, #12]
 800c278:	f7ff fbae 	bl	800b9d8 <SDIO_GetCommandResponse>
 800c27c:	4603      	mov	r3, r0
 800c27e:	461a      	mov	r2, r3
 800c280:	7afb      	ldrb	r3, [r7, #11]
 800c282:	4293      	cmp	r3, r2
 800c284:	d001      	beq.n	800c28a <SDMMC_GetCmdResp6+0x8a>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c286:	2301      	movs	r3, #1
 800c288:	e025      	b.n	800c2d6 <SDMMC_GetCmdResp6+0xd6>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800c28a:	68fb      	ldr	r3, [r7, #12]
 800c28c:	22c5      	movs	r2, #197	; 0xc5
 800c28e:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800c290:	2100      	movs	r1, #0
 800c292:	68f8      	ldr	r0, [r7, #12]
 800c294:	f7ff fbad 	bl	800b9f2 <SDIO_GetResponse>
 800c298:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800c29a:	693b      	ldr	r3, [r7, #16]
 800c29c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800c2a0:	2b00      	cmp	r3, #0
 800c2a2:	d106      	bne.n	800c2b2 <SDMMC_GetCmdResp6+0xb2>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800c2a4:	693b      	ldr	r3, [r7, #16]
 800c2a6:	0c1b      	lsrs	r3, r3, #16
 800c2a8:	b29a      	uxth	r2, r3
 800c2aa:	687b      	ldr	r3, [r7, #4]
 800c2ac:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800c2ae:	2300      	movs	r3, #0
 800c2b0:	e011      	b.n	800c2d6 <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800c2b2:	693b      	ldr	r3, [r7, #16]
 800c2b4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c2b8:	2b00      	cmp	r3, #0
 800c2ba:	d002      	beq.n	800c2c2 <SDMMC_GetCmdResp6+0xc2>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800c2bc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800c2c0:	e009      	b.n	800c2d6 <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800c2c2:	693b      	ldr	r3, [r7, #16]
 800c2c4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c2c8:	2b00      	cmp	r3, #0
 800c2ca:	d002      	beq.n	800c2d2 <SDMMC_GetCmdResp6+0xd2>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800c2cc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c2d0:	e001      	b.n	800c2d6 <SDMMC_GetCmdResp6+0xd6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800c2d2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800c2d6:	4618      	mov	r0, r3
 800c2d8:	371c      	adds	r7, #28
 800c2da:	46bd      	mov	sp, r7
 800c2dc:	bd90      	pop	{r4, r7, pc}
 800c2de:	bf00      	nop
 800c2e0:	20000000 	.word	0x20000000
 800c2e4:	10624dd3 	.word	0x10624dd3

0800c2e8 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 800c2e8:	b490      	push	{r4, r7}
 800c2ea:	b084      	sub	sp, #16
 800c2ec:	af00      	add	r7, sp, #0
 800c2ee:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800c2f0:	4b21      	ldr	r3, [pc, #132]	; (800c378 <SDMMC_GetCmdResp7+0x90>)
 800c2f2:	681b      	ldr	r3, [r3, #0]
 800c2f4:	4a21      	ldr	r2, [pc, #132]	; (800c37c <SDMMC_GetCmdResp7+0x94>)
 800c2f6:	fba2 2303 	umull	r2, r3, r2, r3
 800c2fa:	0a5b      	lsrs	r3, r3, #9
 800c2fc:	f241 3288 	movw	r2, #5000	; 0x1388
 800c300:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800c304:	4623      	mov	r3, r4
 800c306:	1e5c      	subs	r4, r3, #1
 800c308:	2b00      	cmp	r3, #0
 800c30a:	d102      	bne.n	800c312 <SDMMC_GetCmdResp7+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800c30c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800c310:	e02c      	b.n	800c36c <SDMMC_GetCmdResp7+0x84>
    }
    sta_reg = SDIOx->STA;
 800c312:	687b      	ldr	r3, [r7, #4]
 800c314:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c316:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800c318:	68fb      	ldr	r3, [r7, #12]
 800c31a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800c31e:	2b00      	cmp	r3, #0
 800c320:	d0f0      	beq.n	800c304 <SDMMC_GetCmdResp7+0x1c>
 800c322:	68fb      	ldr	r3, [r7, #12]
 800c324:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800c328:	2b00      	cmp	r3, #0
 800c32a:	d1eb      	bne.n	800c304 <SDMMC_GetCmdResp7+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800c32c:	687b      	ldr	r3, [r7, #4]
 800c32e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c330:	f003 0304 	and.w	r3, r3, #4
 800c334:	2b00      	cmp	r3, #0
 800c336:	d004      	beq.n	800c342 <SDMMC_GetCmdResp7+0x5a>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800c338:	687b      	ldr	r3, [r7, #4]
 800c33a:	2204      	movs	r2, #4
 800c33c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c33e:	2304      	movs	r3, #4
 800c340:	e014      	b.n	800c36c <SDMMC_GetCmdResp7+0x84>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800c342:	687b      	ldr	r3, [r7, #4]
 800c344:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c346:	f003 0301 	and.w	r3, r3, #1
 800c34a:	2b00      	cmp	r3, #0
 800c34c:	d004      	beq.n	800c358 <SDMMC_GetCmdResp7+0x70>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800c34e:	687b      	ldr	r3, [r7, #4]
 800c350:	2201      	movs	r2, #1
 800c352:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c354:	2301      	movs	r3, #1
 800c356:	e009      	b.n	800c36c <SDMMC_GetCmdResp7+0x84>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 800c358:	687b      	ldr	r3, [r7, #4]
 800c35a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c35c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c360:	2b00      	cmp	r3, #0
 800c362:	d002      	beq.n	800c36a <SDMMC_GetCmdResp7+0x82>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 800c364:	687b      	ldr	r3, [r7, #4]
 800c366:	2240      	movs	r2, #64	; 0x40
 800c368:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800c36a:	2300      	movs	r3, #0
  
}
 800c36c:	4618      	mov	r0, r3
 800c36e:	3710      	adds	r7, #16
 800c370:	46bd      	mov	sp, r7
 800c372:	bc90      	pop	{r4, r7}
 800c374:	4770      	bx	lr
 800c376:	bf00      	nop
 800c378:	20000000 	.word	0x20000000
 800c37c:	10624dd3 	.word	0x10624dd3

0800c380 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800c380:	b084      	sub	sp, #16
 800c382:	b580      	push	{r7, lr}
 800c384:	b084      	sub	sp, #16
 800c386:	af00      	add	r7, sp, #0
 800c388:	6078      	str	r0, [r7, #4]
 800c38a:	f107 001c 	add.w	r0, r7, #28
 800c38e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800c392:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c394:	2b01      	cmp	r3, #1
 800c396:	d122      	bne.n	800c3de <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800c398:	687b      	ldr	r3, [r7, #4]
 800c39a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c39c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800c3a0:	687b      	ldr	r3, [r7, #4]
 800c3a2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800c3a4:	687b      	ldr	r3, [r7, #4]
 800c3a6:	68db      	ldr	r3, [r3, #12]
 800c3a8:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800c3ac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c3b0:	687a      	ldr	r2, [r7, #4]
 800c3b2:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800c3b4:	687b      	ldr	r3, [r7, #4]
 800c3b6:	68db      	ldr	r3, [r3, #12]
 800c3b8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800c3bc:	687b      	ldr	r3, [r7, #4]
 800c3be:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800c3c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c3c2:	2b01      	cmp	r3, #1
 800c3c4:	d105      	bne.n	800c3d2 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800c3c6:	687b      	ldr	r3, [r7, #4]
 800c3c8:	68db      	ldr	r3, [r3, #12]
 800c3ca:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800c3ce:	687b      	ldr	r3, [r7, #4]
 800c3d0:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 800c3d2:	6878      	ldr	r0, [r7, #4]
 800c3d4:	f001 fa7c 	bl	800d8d0 <USB_CoreReset>
 800c3d8:	4603      	mov	r3, r0
 800c3da:	73fb      	strb	r3, [r7, #15]
 800c3dc:	e01a      	b.n	800c414 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800c3de:	687b      	ldr	r3, [r7, #4]
 800c3e0:	68db      	ldr	r3, [r3, #12]
 800c3e2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800c3e6:	687b      	ldr	r3, [r7, #4]
 800c3e8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 800c3ea:	6878      	ldr	r0, [r7, #4]
 800c3ec:	f001 fa70 	bl	800d8d0 <USB_CoreReset>
 800c3f0:	4603      	mov	r3, r0
 800c3f2:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800c3f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c3f6:	2b00      	cmp	r3, #0
 800c3f8:	d106      	bne.n	800c408 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800c3fa:	687b      	ldr	r3, [r7, #4]
 800c3fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c3fe:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800c402:	687b      	ldr	r3, [r7, #4]
 800c404:	639a      	str	r2, [r3, #56]	; 0x38
 800c406:	e005      	b.n	800c414 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800c408:	687b      	ldr	r3, [r7, #4]
 800c40a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c40c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800c410:	687b      	ldr	r3, [r7, #4]
 800c412:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800c414:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c416:	2b01      	cmp	r3, #1
 800c418:	d10b      	bne.n	800c432 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800c41a:	687b      	ldr	r3, [r7, #4]
 800c41c:	689b      	ldr	r3, [r3, #8]
 800c41e:	f043 0206 	orr.w	r2, r3, #6
 800c422:	687b      	ldr	r3, [r7, #4]
 800c424:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800c426:	687b      	ldr	r3, [r7, #4]
 800c428:	689b      	ldr	r3, [r3, #8]
 800c42a:	f043 0220 	orr.w	r2, r3, #32
 800c42e:	687b      	ldr	r3, [r7, #4]
 800c430:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800c432:	7bfb      	ldrb	r3, [r7, #15]
}
 800c434:	4618      	mov	r0, r3
 800c436:	3710      	adds	r7, #16
 800c438:	46bd      	mov	sp, r7
 800c43a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800c43e:	b004      	add	sp, #16
 800c440:	4770      	bx	lr
	...

0800c444 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800c444:	b480      	push	{r7}
 800c446:	b087      	sub	sp, #28
 800c448:	af00      	add	r7, sp, #0
 800c44a:	60f8      	str	r0, [r7, #12]
 800c44c:	60b9      	str	r1, [r7, #8]
 800c44e:	4613      	mov	r3, r2
 800c450:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800c452:	79fb      	ldrb	r3, [r7, #7]
 800c454:	2b02      	cmp	r3, #2
 800c456:	d165      	bne.n	800c524 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800c458:	68bb      	ldr	r3, [r7, #8]
 800c45a:	4a41      	ldr	r2, [pc, #260]	; (800c560 <USB_SetTurnaroundTime+0x11c>)
 800c45c:	4293      	cmp	r3, r2
 800c45e:	d906      	bls.n	800c46e <USB_SetTurnaroundTime+0x2a>
 800c460:	68bb      	ldr	r3, [r7, #8]
 800c462:	4a40      	ldr	r2, [pc, #256]	; (800c564 <USB_SetTurnaroundTime+0x120>)
 800c464:	4293      	cmp	r3, r2
 800c466:	d802      	bhi.n	800c46e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800c468:	230f      	movs	r3, #15
 800c46a:	617b      	str	r3, [r7, #20]
 800c46c:	e062      	b.n	800c534 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800c46e:	68bb      	ldr	r3, [r7, #8]
 800c470:	4a3c      	ldr	r2, [pc, #240]	; (800c564 <USB_SetTurnaroundTime+0x120>)
 800c472:	4293      	cmp	r3, r2
 800c474:	d906      	bls.n	800c484 <USB_SetTurnaroundTime+0x40>
 800c476:	68bb      	ldr	r3, [r7, #8]
 800c478:	4a3b      	ldr	r2, [pc, #236]	; (800c568 <USB_SetTurnaroundTime+0x124>)
 800c47a:	4293      	cmp	r3, r2
 800c47c:	d802      	bhi.n	800c484 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800c47e:	230e      	movs	r3, #14
 800c480:	617b      	str	r3, [r7, #20]
 800c482:	e057      	b.n	800c534 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800c484:	68bb      	ldr	r3, [r7, #8]
 800c486:	4a38      	ldr	r2, [pc, #224]	; (800c568 <USB_SetTurnaroundTime+0x124>)
 800c488:	4293      	cmp	r3, r2
 800c48a:	d906      	bls.n	800c49a <USB_SetTurnaroundTime+0x56>
 800c48c:	68bb      	ldr	r3, [r7, #8]
 800c48e:	4a37      	ldr	r2, [pc, #220]	; (800c56c <USB_SetTurnaroundTime+0x128>)
 800c490:	4293      	cmp	r3, r2
 800c492:	d802      	bhi.n	800c49a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800c494:	230d      	movs	r3, #13
 800c496:	617b      	str	r3, [r7, #20]
 800c498:	e04c      	b.n	800c534 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800c49a:	68bb      	ldr	r3, [r7, #8]
 800c49c:	4a33      	ldr	r2, [pc, #204]	; (800c56c <USB_SetTurnaroundTime+0x128>)
 800c49e:	4293      	cmp	r3, r2
 800c4a0:	d906      	bls.n	800c4b0 <USB_SetTurnaroundTime+0x6c>
 800c4a2:	68bb      	ldr	r3, [r7, #8]
 800c4a4:	4a32      	ldr	r2, [pc, #200]	; (800c570 <USB_SetTurnaroundTime+0x12c>)
 800c4a6:	4293      	cmp	r3, r2
 800c4a8:	d802      	bhi.n	800c4b0 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800c4aa:	230c      	movs	r3, #12
 800c4ac:	617b      	str	r3, [r7, #20]
 800c4ae:	e041      	b.n	800c534 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800c4b0:	68bb      	ldr	r3, [r7, #8]
 800c4b2:	4a2f      	ldr	r2, [pc, #188]	; (800c570 <USB_SetTurnaroundTime+0x12c>)
 800c4b4:	4293      	cmp	r3, r2
 800c4b6:	d906      	bls.n	800c4c6 <USB_SetTurnaroundTime+0x82>
 800c4b8:	68bb      	ldr	r3, [r7, #8]
 800c4ba:	4a2e      	ldr	r2, [pc, #184]	; (800c574 <USB_SetTurnaroundTime+0x130>)
 800c4bc:	4293      	cmp	r3, r2
 800c4be:	d802      	bhi.n	800c4c6 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800c4c0:	230b      	movs	r3, #11
 800c4c2:	617b      	str	r3, [r7, #20]
 800c4c4:	e036      	b.n	800c534 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800c4c6:	68bb      	ldr	r3, [r7, #8]
 800c4c8:	4a2a      	ldr	r2, [pc, #168]	; (800c574 <USB_SetTurnaroundTime+0x130>)
 800c4ca:	4293      	cmp	r3, r2
 800c4cc:	d906      	bls.n	800c4dc <USB_SetTurnaroundTime+0x98>
 800c4ce:	68bb      	ldr	r3, [r7, #8]
 800c4d0:	4a29      	ldr	r2, [pc, #164]	; (800c578 <USB_SetTurnaroundTime+0x134>)
 800c4d2:	4293      	cmp	r3, r2
 800c4d4:	d802      	bhi.n	800c4dc <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800c4d6:	230a      	movs	r3, #10
 800c4d8:	617b      	str	r3, [r7, #20]
 800c4da:	e02b      	b.n	800c534 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800c4dc:	68bb      	ldr	r3, [r7, #8]
 800c4de:	4a26      	ldr	r2, [pc, #152]	; (800c578 <USB_SetTurnaroundTime+0x134>)
 800c4e0:	4293      	cmp	r3, r2
 800c4e2:	d906      	bls.n	800c4f2 <USB_SetTurnaroundTime+0xae>
 800c4e4:	68bb      	ldr	r3, [r7, #8]
 800c4e6:	4a25      	ldr	r2, [pc, #148]	; (800c57c <USB_SetTurnaroundTime+0x138>)
 800c4e8:	4293      	cmp	r3, r2
 800c4ea:	d802      	bhi.n	800c4f2 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800c4ec:	2309      	movs	r3, #9
 800c4ee:	617b      	str	r3, [r7, #20]
 800c4f0:	e020      	b.n	800c534 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800c4f2:	68bb      	ldr	r3, [r7, #8]
 800c4f4:	4a21      	ldr	r2, [pc, #132]	; (800c57c <USB_SetTurnaroundTime+0x138>)
 800c4f6:	4293      	cmp	r3, r2
 800c4f8:	d906      	bls.n	800c508 <USB_SetTurnaroundTime+0xc4>
 800c4fa:	68bb      	ldr	r3, [r7, #8]
 800c4fc:	4a20      	ldr	r2, [pc, #128]	; (800c580 <USB_SetTurnaroundTime+0x13c>)
 800c4fe:	4293      	cmp	r3, r2
 800c500:	d802      	bhi.n	800c508 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800c502:	2308      	movs	r3, #8
 800c504:	617b      	str	r3, [r7, #20]
 800c506:	e015      	b.n	800c534 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800c508:	68bb      	ldr	r3, [r7, #8]
 800c50a:	4a1d      	ldr	r2, [pc, #116]	; (800c580 <USB_SetTurnaroundTime+0x13c>)
 800c50c:	4293      	cmp	r3, r2
 800c50e:	d906      	bls.n	800c51e <USB_SetTurnaroundTime+0xda>
 800c510:	68bb      	ldr	r3, [r7, #8]
 800c512:	4a1c      	ldr	r2, [pc, #112]	; (800c584 <USB_SetTurnaroundTime+0x140>)
 800c514:	4293      	cmp	r3, r2
 800c516:	d802      	bhi.n	800c51e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800c518:	2307      	movs	r3, #7
 800c51a:	617b      	str	r3, [r7, #20]
 800c51c:	e00a      	b.n	800c534 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800c51e:	2306      	movs	r3, #6
 800c520:	617b      	str	r3, [r7, #20]
 800c522:	e007      	b.n	800c534 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800c524:	79fb      	ldrb	r3, [r7, #7]
 800c526:	2b00      	cmp	r3, #0
 800c528:	d102      	bne.n	800c530 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800c52a:	2309      	movs	r3, #9
 800c52c:	617b      	str	r3, [r7, #20]
 800c52e:	e001      	b.n	800c534 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800c530:	2309      	movs	r3, #9
 800c532:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800c534:	68fb      	ldr	r3, [r7, #12]
 800c536:	68db      	ldr	r3, [r3, #12]
 800c538:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800c53c:	68fb      	ldr	r3, [r7, #12]
 800c53e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800c540:	68fb      	ldr	r3, [r7, #12]
 800c542:	68da      	ldr	r2, [r3, #12]
 800c544:	697b      	ldr	r3, [r7, #20]
 800c546:	029b      	lsls	r3, r3, #10
 800c548:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800c54c:	431a      	orrs	r2, r3
 800c54e:	68fb      	ldr	r3, [r7, #12]
 800c550:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800c552:	2300      	movs	r3, #0
}
 800c554:	4618      	mov	r0, r3
 800c556:	371c      	adds	r7, #28
 800c558:	46bd      	mov	sp, r7
 800c55a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c55e:	4770      	bx	lr
 800c560:	00d8acbf 	.word	0x00d8acbf
 800c564:	00e4e1bf 	.word	0x00e4e1bf
 800c568:	00f423ff 	.word	0x00f423ff
 800c56c:	0106737f 	.word	0x0106737f
 800c570:	011a499f 	.word	0x011a499f
 800c574:	01312cff 	.word	0x01312cff
 800c578:	014ca43f 	.word	0x014ca43f
 800c57c:	016e35ff 	.word	0x016e35ff
 800c580:	01a6ab1f 	.word	0x01a6ab1f
 800c584:	01e847ff 	.word	0x01e847ff

0800c588 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800c588:	b480      	push	{r7}
 800c58a:	b083      	sub	sp, #12
 800c58c:	af00      	add	r7, sp, #0
 800c58e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800c590:	687b      	ldr	r3, [r7, #4]
 800c592:	689b      	ldr	r3, [r3, #8]
 800c594:	f043 0201 	orr.w	r2, r3, #1
 800c598:	687b      	ldr	r3, [r7, #4]
 800c59a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800c59c:	2300      	movs	r3, #0
}
 800c59e:	4618      	mov	r0, r3
 800c5a0:	370c      	adds	r7, #12
 800c5a2:	46bd      	mov	sp, r7
 800c5a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5a8:	4770      	bx	lr

0800c5aa <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800c5aa:	b480      	push	{r7}
 800c5ac:	b083      	sub	sp, #12
 800c5ae:	af00      	add	r7, sp, #0
 800c5b0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800c5b2:	687b      	ldr	r3, [r7, #4]
 800c5b4:	689b      	ldr	r3, [r3, #8]
 800c5b6:	f023 0201 	bic.w	r2, r3, #1
 800c5ba:	687b      	ldr	r3, [r7, #4]
 800c5bc:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800c5be:	2300      	movs	r3, #0
}
 800c5c0:	4618      	mov	r0, r3
 800c5c2:	370c      	adds	r7, #12
 800c5c4:	46bd      	mov	sp, r7
 800c5c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5ca:	4770      	bx	lr

0800c5cc <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800c5cc:	b580      	push	{r7, lr}
 800c5ce:	b082      	sub	sp, #8
 800c5d0:	af00      	add	r7, sp, #0
 800c5d2:	6078      	str	r0, [r7, #4]
 800c5d4:	460b      	mov	r3, r1
 800c5d6:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800c5d8:	687b      	ldr	r3, [r7, #4]
 800c5da:	68db      	ldr	r3, [r3, #12]
 800c5dc:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800c5e0:	687b      	ldr	r3, [r7, #4]
 800c5e2:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800c5e4:	78fb      	ldrb	r3, [r7, #3]
 800c5e6:	2b01      	cmp	r3, #1
 800c5e8:	d106      	bne.n	800c5f8 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800c5ea:	687b      	ldr	r3, [r7, #4]
 800c5ec:	68db      	ldr	r3, [r3, #12]
 800c5ee:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800c5f2:	687b      	ldr	r3, [r7, #4]
 800c5f4:	60da      	str	r2, [r3, #12]
 800c5f6:	e00b      	b.n	800c610 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 800c5f8:	78fb      	ldrb	r3, [r7, #3]
 800c5fa:	2b00      	cmp	r3, #0
 800c5fc:	d106      	bne.n	800c60c <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800c5fe:	687b      	ldr	r3, [r7, #4]
 800c600:	68db      	ldr	r3, [r3, #12]
 800c602:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800c606:	687b      	ldr	r3, [r7, #4]
 800c608:	60da      	str	r2, [r3, #12]
 800c60a:	e001      	b.n	800c610 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800c60c:	2301      	movs	r3, #1
 800c60e:	e003      	b.n	800c618 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800c610:	2032      	movs	r0, #50	; 0x32
 800c612:	f7f8 fced 	bl	8004ff0 <HAL_Delay>

  return HAL_OK;
 800c616:	2300      	movs	r3, #0
}
 800c618:	4618      	mov	r0, r3
 800c61a:	3708      	adds	r7, #8
 800c61c:	46bd      	mov	sp, r7
 800c61e:	bd80      	pop	{r7, pc}

0800c620 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800c620:	b084      	sub	sp, #16
 800c622:	b580      	push	{r7, lr}
 800c624:	b086      	sub	sp, #24
 800c626:	af00      	add	r7, sp, #0
 800c628:	6078      	str	r0, [r7, #4]
 800c62a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800c62e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800c632:	2300      	movs	r3, #0
 800c634:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c636:	687b      	ldr	r3, [r7, #4]
 800c638:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800c63a:	2300      	movs	r3, #0
 800c63c:	613b      	str	r3, [r7, #16]
 800c63e:	e009      	b.n	800c654 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800c640:	687a      	ldr	r2, [r7, #4]
 800c642:	693b      	ldr	r3, [r7, #16]
 800c644:	3340      	adds	r3, #64	; 0x40
 800c646:	009b      	lsls	r3, r3, #2
 800c648:	4413      	add	r3, r2
 800c64a:	2200      	movs	r2, #0
 800c64c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800c64e:	693b      	ldr	r3, [r7, #16]
 800c650:	3301      	adds	r3, #1
 800c652:	613b      	str	r3, [r7, #16]
 800c654:	693b      	ldr	r3, [r7, #16]
 800c656:	2b0e      	cmp	r3, #14
 800c658:	d9f2      	bls.n	800c640 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800c65a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c65c:	2b00      	cmp	r3, #0
 800c65e:	d112      	bne.n	800c686 <USB_DevInit+0x66>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800c660:	687b      	ldr	r3, [r7, #4]
 800c662:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c664:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800c668:	687b      	ldr	r3, [r7, #4]
 800c66a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800c66c:	687b      	ldr	r3, [r7, #4]
 800c66e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c670:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800c674:	687b      	ldr	r3, [r7, #4]
 800c676:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800c678:	687b      	ldr	r3, [r7, #4]
 800c67a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c67c:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800c680:	687b      	ldr	r3, [r7, #4]
 800c682:	639a      	str	r2, [r3, #56]	; 0x38
 800c684:	e00b      	b.n	800c69e <USB_DevInit+0x7e>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GOTGCTL &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800c686:	687b      	ldr	r3, [r7, #4]
 800c688:	681b      	ldr	r3, [r3, #0]
 800c68a:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800c68e:	687b      	ldr	r3, [r7, #4]
 800c690:	601a      	str	r2, [r3, #0]
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800c692:	687b      	ldr	r3, [r7, #4]
 800c694:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c696:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800c69a:	687b      	ldr	r3, [r7, #4]
 800c69c:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800c69e:	68fb      	ldr	r3, [r7, #12]
 800c6a0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800c6a4:	461a      	mov	r2, r3
 800c6a6:	2300      	movs	r3, #0
 800c6a8:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800c6aa:	68fb      	ldr	r3, [r7, #12]
 800c6ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c6b0:	4619      	mov	r1, r3
 800c6b2:	68fb      	ldr	r3, [r7, #12]
 800c6b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c6b8:	461a      	mov	r2, r3
 800c6ba:	680b      	ldr	r3, [r1, #0]
 800c6bc:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800c6be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c6c0:	2b01      	cmp	r3, #1
 800c6c2:	d10c      	bne.n	800c6de <USB_DevInit+0xbe>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800c6c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c6c6:	2b00      	cmp	r3, #0
 800c6c8:	d104      	bne.n	800c6d4 <USB_DevInit+0xb4>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800c6ca:	2100      	movs	r1, #0
 800c6cc:	6878      	ldr	r0, [r7, #4]
 800c6ce:	f000 f961 	bl	800c994 <USB_SetDevSpeed>
 800c6d2:	e008      	b.n	800c6e6 <USB_DevInit+0xc6>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800c6d4:	2101      	movs	r1, #1
 800c6d6:	6878      	ldr	r0, [r7, #4]
 800c6d8:	f000 f95c 	bl	800c994 <USB_SetDevSpeed>
 800c6dc:	e003      	b.n	800c6e6 <USB_DevInit+0xc6>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800c6de:	2103      	movs	r1, #3
 800c6e0:	6878      	ldr	r0, [r7, #4]
 800c6e2:	f000 f957 	bl	800c994 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800c6e6:	2110      	movs	r1, #16
 800c6e8:	6878      	ldr	r0, [r7, #4]
 800c6ea:	f000 f90b 	bl	800c904 <USB_FlushTxFifo>
 800c6ee:	4603      	mov	r3, r0
 800c6f0:	2b00      	cmp	r3, #0
 800c6f2:	d001      	beq.n	800c6f8 <USB_DevInit+0xd8>
  {
    ret = HAL_ERROR;
 800c6f4:	2301      	movs	r3, #1
 800c6f6:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800c6f8:	6878      	ldr	r0, [r7, #4]
 800c6fa:	f000 f929 	bl	800c950 <USB_FlushRxFifo>
 800c6fe:	4603      	mov	r3, r0
 800c700:	2b00      	cmp	r3, #0
 800c702:	d001      	beq.n	800c708 <USB_DevInit+0xe8>
  {
    ret = HAL_ERROR;
 800c704:	2301      	movs	r3, #1
 800c706:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800c708:	68fb      	ldr	r3, [r7, #12]
 800c70a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c70e:	461a      	mov	r2, r3
 800c710:	2300      	movs	r3, #0
 800c712:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800c714:	68fb      	ldr	r3, [r7, #12]
 800c716:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c71a:	461a      	mov	r2, r3
 800c71c:	2300      	movs	r3, #0
 800c71e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800c720:	68fb      	ldr	r3, [r7, #12]
 800c722:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c726:	461a      	mov	r2, r3
 800c728:	2300      	movs	r3, #0
 800c72a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800c72c:	2300      	movs	r3, #0
 800c72e:	613b      	str	r3, [r7, #16]
 800c730:	e043      	b.n	800c7ba <USB_DevInit+0x19a>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800c732:	693b      	ldr	r3, [r7, #16]
 800c734:	015a      	lsls	r2, r3, #5
 800c736:	68fb      	ldr	r3, [r7, #12]
 800c738:	4413      	add	r3, r2
 800c73a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c73e:	681b      	ldr	r3, [r3, #0]
 800c740:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c744:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c748:	d118      	bne.n	800c77c <USB_DevInit+0x15c>
    {
      if (i == 0U)
 800c74a:	693b      	ldr	r3, [r7, #16]
 800c74c:	2b00      	cmp	r3, #0
 800c74e:	d10a      	bne.n	800c766 <USB_DevInit+0x146>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800c750:	693b      	ldr	r3, [r7, #16]
 800c752:	015a      	lsls	r2, r3, #5
 800c754:	68fb      	ldr	r3, [r7, #12]
 800c756:	4413      	add	r3, r2
 800c758:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c75c:	461a      	mov	r2, r3
 800c75e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800c762:	6013      	str	r3, [r2, #0]
 800c764:	e013      	b.n	800c78e <USB_DevInit+0x16e>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800c766:	693b      	ldr	r3, [r7, #16]
 800c768:	015a      	lsls	r2, r3, #5
 800c76a:	68fb      	ldr	r3, [r7, #12]
 800c76c:	4413      	add	r3, r2
 800c76e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c772:	461a      	mov	r2, r3
 800c774:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800c778:	6013      	str	r3, [r2, #0]
 800c77a:	e008      	b.n	800c78e <USB_DevInit+0x16e>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800c77c:	693b      	ldr	r3, [r7, #16]
 800c77e:	015a      	lsls	r2, r3, #5
 800c780:	68fb      	ldr	r3, [r7, #12]
 800c782:	4413      	add	r3, r2
 800c784:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c788:	461a      	mov	r2, r3
 800c78a:	2300      	movs	r3, #0
 800c78c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800c78e:	693b      	ldr	r3, [r7, #16]
 800c790:	015a      	lsls	r2, r3, #5
 800c792:	68fb      	ldr	r3, [r7, #12]
 800c794:	4413      	add	r3, r2
 800c796:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c79a:	461a      	mov	r2, r3
 800c79c:	2300      	movs	r3, #0
 800c79e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800c7a0:	693b      	ldr	r3, [r7, #16]
 800c7a2:	015a      	lsls	r2, r3, #5
 800c7a4:	68fb      	ldr	r3, [r7, #12]
 800c7a6:	4413      	add	r3, r2
 800c7a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c7ac:	461a      	mov	r2, r3
 800c7ae:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800c7b2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800c7b4:	693b      	ldr	r3, [r7, #16]
 800c7b6:	3301      	adds	r3, #1
 800c7b8:	613b      	str	r3, [r7, #16]
 800c7ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c7bc:	693a      	ldr	r2, [r7, #16]
 800c7be:	429a      	cmp	r2, r3
 800c7c0:	d3b7      	bcc.n	800c732 <USB_DevInit+0x112>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800c7c2:	2300      	movs	r3, #0
 800c7c4:	613b      	str	r3, [r7, #16]
 800c7c6:	e043      	b.n	800c850 <USB_DevInit+0x230>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800c7c8:	693b      	ldr	r3, [r7, #16]
 800c7ca:	015a      	lsls	r2, r3, #5
 800c7cc:	68fb      	ldr	r3, [r7, #12]
 800c7ce:	4413      	add	r3, r2
 800c7d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c7d4:	681b      	ldr	r3, [r3, #0]
 800c7d6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c7da:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c7de:	d118      	bne.n	800c812 <USB_DevInit+0x1f2>
    {
      if (i == 0U)
 800c7e0:	693b      	ldr	r3, [r7, #16]
 800c7e2:	2b00      	cmp	r3, #0
 800c7e4:	d10a      	bne.n	800c7fc <USB_DevInit+0x1dc>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800c7e6:	693b      	ldr	r3, [r7, #16]
 800c7e8:	015a      	lsls	r2, r3, #5
 800c7ea:	68fb      	ldr	r3, [r7, #12]
 800c7ec:	4413      	add	r3, r2
 800c7ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c7f2:	461a      	mov	r2, r3
 800c7f4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800c7f8:	6013      	str	r3, [r2, #0]
 800c7fa:	e013      	b.n	800c824 <USB_DevInit+0x204>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800c7fc:	693b      	ldr	r3, [r7, #16]
 800c7fe:	015a      	lsls	r2, r3, #5
 800c800:	68fb      	ldr	r3, [r7, #12]
 800c802:	4413      	add	r3, r2
 800c804:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c808:	461a      	mov	r2, r3
 800c80a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800c80e:	6013      	str	r3, [r2, #0]
 800c810:	e008      	b.n	800c824 <USB_DevInit+0x204>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800c812:	693b      	ldr	r3, [r7, #16]
 800c814:	015a      	lsls	r2, r3, #5
 800c816:	68fb      	ldr	r3, [r7, #12]
 800c818:	4413      	add	r3, r2
 800c81a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c81e:	461a      	mov	r2, r3
 800c820:	2300      	movs	r3, #0
 800c822:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800c824:	693b      	ldr	r3, [r7, #16]
 800c826:	015a      	lsls	r2, r3, #5
 800c828:	68fb      	ldr	r3, [r7, #12]
 800c82a:	4413      	add	r3, r2
 800c82c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c830:	461a      	mov	r2, r3
 800c832:	2300      	movs	r3, #0
 800c834:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800c836:	693b      	ldr	r3, [r7, #16]
 800c838:	015a      	lsls	r2, r3, #5
 800c83a:	68fb      	ldr	r3, [r7, #12]
 800c83c:	4413      	add	r3, r2
 800c83e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c842:	461a      	mov	r2, r3
 800c844:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800c848:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800c84a:	693b      	ldr	r3, [r7, #16]
 800c84c:	3301      	adds	r3, #1
 800c84e:	613b      	str	r3, [r7, #16]
 800c850:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c852:	693a      	ldr	r2, [r7, #16]
 800c854:	429a      	cmp	r2, r3
 800c856:	d3b7      	bcc.n	800c7c8 <USB_DevInit+0x1a8>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800c858:	68fb      	ldr	r3, [r7, #12]
 800c85a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c85e:	691b      	ldr	r3, [r3, #16]
 800c860:	68fa      	ldr	r2, [r7, #12]
 800c862:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c866:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c86a:	6113      	str	r3, [r2, #16]

  if (cfg.dma_enable == 1U)
 800c86c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c86e:	2b01      	cmp	r3, #1
 800c870:	d111      	bne.n	800c896 <USB_DevInit+0x276>
  {
    /*Set threshold parameters */
    USBx_DEVICE->DTHRCTL = USB_OTG_DTHRCTL_TXTHRLEN_6 |
 800c872:	68fb      	ldr	r3, [r7, #12]
 800c874:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c878:	461a      	mov	r2, r3
 800c87a:	4b20      	ldr	r3, [pc, #128]	; (800c8fc <USB_DevInit+0x2dc>)
 800c87c:	6313      	str	r3, [r2, #48]	; 0x30
                           USB_OTG_DTHRCTL_RXTHRLEN_6;

    USBx_DEVICE->DTHRCTL |= USB_OTG_DTHRCTL_RXTHREN |
 800c87e:	68fb      	ldr	r3, [r7, #12]
 800c880:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c886:	68fa      	ldr	r2, [r7, #12]
 800c888:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c88c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c890:	f043 0303 	orr.w	r3, r3, #3
 800c894:	6313      	str	r3, [r2, #48]	; 0x30
                            USB_OTG_DTHRCTL_ISOTHREN |
                            USB_OTG_DTHRCTL_NONISOTHREN;
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800c896:	687b      	ldr	r3, [r7, #4]
 800c898:	2200      	movs	r2, #0
 800c89a:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800c89c:	687b      	ldr	r3, [r7, #4]
 800c89e:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800c8a2:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800c8a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c8a6:	2b00      	cmp	r3, #0
 800c8a8:	d105      	bne.n	800c8b6 <USB_DevInit+0x296>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800c8aa:	687b      	ldr	r3, [r7, #4]
 800c8ac:	699b      	ldr	r3, [r3, #24]
 800c8ae:	f043 0210 	orr.w	r2, r3, #16
 800c8b2:	687b      	ldr	r3, [r7, #4]
 800c8b4:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800c8b6:	687b      	ldr	r3, [r7, #4]
 800c8b8:	699a      	ldr	r2, [r3, #24]
 800c8ba:	4b11      	ldr	r3, [pc, #68]	; (800c900 <USB_DevInit+0x2e0>)
 800c8bc:	4313      	orrs	r3, r2
 800c8be:	687a      	ldr	r2, [r7, #4]
 800c8c0:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800c8c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c8c4:	2b00      	cmp	r3, #0
 800c8c6:	d005      	beq.n	800c8d4 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800c8c8:	687b      	ldr	r3, [r7, #4]
 800c8ca:	699b      	ldr	r3, [r3, #24]
 800c8cc:	f043 0208 	orr.w	r2, r3, #8
 800c8d0:	687b      	ldr	r3, [r7, #4]
 800c8d2:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800c8d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c8d6:	2b01      	cmp	r3, #1
 800c8d8:	d107      	bne.n	800c8ea <USB_DevInit+0x2ca>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800c8da:	687b      	ldr	r3, [r7, #4]
 800c8dc:	699b      	ldr	r3, [r3, #24]
 800c8de:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800c8e2:	f043 0304 	orr.w	r3, r3, #4
 800c8e6:	687a      	ldr	r2, [r7, #4]
 800c8e8:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800c8ea:	7dfb      	ldrb	r3, [r7, #23]
}
 800c8ec:	4618      	mov	r0, r3
 800c8ee:	3718      	adds	r7, #24
 800c8f0:	46bd      	mov	sp, r7
 800c8f2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800c8f6:	b004      	add	sp, #16
 800c8f8:	4770      	bx	lr
 800c8fa:	bf00      	nop
 800c8fc:	00800100 	.word	0x00800100
 800c900:	803c3800 	.word	0x803c3800

0800c904 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800c904:	b480      	push	{r7}
 800c906:	b085      	sub	sp, #20
 800c908:	af00      	add	r7, sp, #0
 800c90a:	6078      	str	r0, [r7, #4]
 800c90c:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800c90e:	2300      	movs	r3, #0
 800c910:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800c912:	683b      	ldr	r3, [r7, #0]
 800c914:	019b      	lsls	r3, r3, #6
 800c916:	f043 0220 	orr.w	r2, r3, #32
 800c91a:	687b      	ldr	r3, [r7, #4]
 800c91c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800c91e:	68fb      	ldr	r3, [r7, #12]
 800c920:	3301      	adds	r3, #1
 800c922:	60fb      	str	r3, [r7, #12]
 800c924:	68fb      	ldr	r3, [r7, #12]
 800c926:	4a09      	ldr	r2, [pc, #36]	; (800c94c <USB_FlushTxFifo+0x48>)
 800c928:	4293      	cmp	r3, r2
 800c92a:	d901      	bls.n	800c930 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 800c92c:	2303      	movs	r3, #3
 800c92e:	e006      	b.n	800c93e <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800c930:	687b      	ldr	r3, [r7, #4]
 800c932:	691b      	ldr	r3, [r3, #16]
 800c934:	f003 0320 	and.w	r3, r3, #32
 800c938:	2b20      	cmp	r3, #32
 800c93a:	d0f0      	beq.n	800c91e <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800c93c:	2300      	movs	r3, #0
}
 800c93e:	4618      	mov	r0, r3
 800c940:	3714      	adds	r7, #20
 800c942:	46bd      	mov	sp, r7
 800c944:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c948:	4770      	bx	lr
 800c94a:	bf00      	nop
 800c94c:	00030d40 	.word	0x00030d40

0800c950 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800c950:	b480      	push	{r7}
 800c952:	b085      	sub	sp, #20
 800c954:	af00      	add	r7, sp, #0
 800c956:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800c958:	2300      	movs	r3, #0
 800c95a:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800c95c:	687b      	ldr	r3, [r7, #4]
 800c95e:	2210      	movs	r2, #16
 800c960:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800c962:	68fb      	ldr	r3, [r7, #12]
 800c964:	3301      	adds	r3, #1
 800c966:	60fb      	str	r3, [r7, #12]
 800c968:	68fb      	ldr	r3, [r7, #12]
 800c96a:	4a09      	ldr	r2, [pc, #36]	; (800c990 <USB_FlushRxFifo+0x40>)
 800c96c:	4293      	cmp	r3, r2
 800c96e:	d901      	bls.n	800c974 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800c970:	2303      	movs	r3, #3
 800c972:	e006      	b.n	800c982 <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800c974:	687b      	ldr	r3, [r7, #4]
 800c976:	691b      	ldr	r3, [r3, #16]
 800c978:	f003 0310 	and.w	r3, r3, #16
 800c97c:	2b10      	cmp	r3, #16
 800c97e:	d0f0      	beq.n	800c962 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800c980:	2300      	movs	r3, #0
}
 800c982:	4618      	mov	r0, r3
 800c984:	3714      	adds	r7, #20
 800c986:	46bd      	mov	sp, r7
 800c988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c98c:	4770      	bx	lr
 800c98e:	bf00      	nop
 800c990:	00030d40 	.word	0x00030d40

0800c994 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800c994:	b480      	push	{r7}
 800c996:	b085      	sub	sp, #20
 800c998:	af00      	add	r7, sp, #0
 800c99a:	6078      	str	r0, [r7, #4]
 800c99c:	460b      	mov	r3, r1
 800c99e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c9a0:	687b      	ldr	r3, [r7, #4]
 800c9a2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800c9a4:	68fb      	ldr	r3, [r7, #12]
 800c9a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c9aa:	681a      	ldr	r2, [r3, #0]
 800c9ac:	78fb      	ldrb	r3, [r7, #3]
 800c9ae:	68f9      	ldr	r1, [r7, #12]
 800c9b0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c9b4:	4313      	orrs	r3, r2
 800c9b6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800c9b8:	2300      	movs	r3, #0
}
 800c9ba:	4618      	mov	r0, r3
 800c9bc:	3714      	adds	r7, #20
 800c9be:	46bd      	mov	sp, r7
 800c9c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9c4:	4770      	bx	lr

0800c9c6 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_HIGH: High speed mode
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800c9c6:	b480      	push	{r7}
 800c9c8:	b087      	sub	sp, #28
 800c9ca:	af00      	add	r7, sp, #0
 800c9cc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c9ce:	687b      	ldr	r3, [r7, #4]
 800c9d0:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800c9d2:	693b      	ldr	r3, [r7, #16]
 800c9d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c9d8:	689b      	ldr	r3, [r3, #8]
 800c9da:	f003 0306 	and.w	r3, r3, #6
 800c9de:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800c9e0:	68fb      	ldr	r3, [r7, #12]
 800c9e2:	2b00      	cmp	r3, #0
 800c9e4:	d102      	bne.n	800c9ec <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800c9e6:	2300      	movs	r3, #0
 800c9e8:	75fb      	strb	r3, [r7, #23]
 800c9ea:	e00a      	b.n	800ca02 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800c9ec:	68fb      	ldr	r3, [r7, #12]
 800c9ee:	2b02      	cmp	r3, #2
 800c9f0:	d002      	beq.n	800c9f8 <USB_GetDevSpeed+0x32>
 800c9f2:	68fb      	ldr	r3, [r7, #12]
 800c9f4:	2b06      	cmp	r3, #6
 800c9f6:	d102      	bne.n	800c9fe <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800c9f8:	2302      	movs	r3, #2
 800c9fa:	75fb      	strb	r3, [r7, #23]
 800c9fc:	e001      	b.n	800ca02 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800c9fe:	230f      	movs	r3, #15
 800ca00:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800ca02:	7dfb      	ldrb	r3, [r7, #23]
}
 800ca04:	4618      	mov	r0, r3
 800ca06:	371c      	adds	r7, #28
 800ca08:	46bd      	mov	sp, r7
 800ca0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca0e:	4770      	bx	lr

0800ca10 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800ca10:	b480      	push	{r7}
 800ca12:	b085      	sub	sp, #20
 800ca14:	af00      	add	r7, sp, #0
 800ca16:	6078      	str	r0, [r7, #4]
 800ca18:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ca1a:	687b      	ldr	r3, [r7, #4]
 800ca1c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800ca1e:	683b      	ldr	r3, [r7, #0]
 800ca20:	781b      	ldrb	r3, [r3, #0]
 800ca22:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800ca24:	683b      	ldr	r3, [r7, #0]
 800ca26:	785b      	ldrb	r3, [r3, #1]
 800ca28:	2b01      	cmp	r3, #1
 800ca2a:	d13a      	bne.n	800caa2 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800ca2c:	68fb      	ldr	r3, [r7, #12]
 800ca2e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ca32:	69da      	ldr	r2, [r3, #28]
 800ca34:	683b      	ldr	r3, [r7, #0]
 800ca36:	781b      	ldrb	r3, [r3, #0]
 800ca38:	f003 030f 	and.w	r3, r3, #15
 800ca3c:	2101      	movs	r1, #1
 800ca3e:	fa01 f303 	lsl.w	r3, r1, r3
 800ca42:	b29b      	uxth	r3, r3
 800ca44:	68f9      	ldr	r1, [r7, #12]
 800ca46:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ca4a:	4313      	orrs	r3, r2
 800ca4c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800ca4e:	68bb      	ldr	r3, [r7, #8]
 800ca50:	015a      	lsls	r2, r3, #5
 800ca52:	68fb      	ldr	r3, [r7, #12]
 800ca54:	4413      	add	r3, r2
 800ca56:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ca5a:	681b      	ldr	r3, [r3, #0]
 800ca5c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800ca60:	2b00      	cmp	r3, #0
 800ca62:	d155      	bne.n	800cb10 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800ca64:	68bb      	ldr	r3, [r7, #8]
 800ca66:	015a      	lsls	r2, r3, #5
 800ca68:	68fb      	ldr	r3, [r7, #12]
 800ca6a:	4413      	add	r3, r2
 800ca6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ca70:	681a      	ldr	r2, [r3, #0]
 800ca72:	683b      	ldr	r3, [r7, #0]
 800ca74:	689b      	ldr	r3, [r3, #8]
 800ca76:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800ca7a:	683b      	ldr	r3, [r7, #0]
 800ca7c:	78db      	ldrb	r3, [r3, #3]
 800ca7e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800ca80:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800ca82:	68bb      	ldr	r3, [r7, #8]
 800ca84:	059b      	lsls	r3, r3, #22
 800ca86:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800ca88:	4313      	orrs	r3, r2
 800ca8a:	68ba      	ldr	r2, [r7, #8]
 800ca8c:	0151      	lsls	r1, r2, #5
 800ca8e:	68fa      	ldr	r2, [r7, #12]
 800ca90:	440a      	add	r2, r1
 800ca92:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ca96:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ca9a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ca9e:	6013      	str	r3, [r2, #0]
 800caa0:	e036      	b.n	800cb10 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800caa2:	68fb      	ldr	r3, [r7, #12]
 800caa4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800caa8:	69da      	ldr	r2, [r3, #28]
 800caaa:	683b      	ldr	r3, [r7, #0]
 800caac:	781b      	ldrb	r3, [r3, #0]
 800caae:	f003 030f 	and.w	r3, r3, #15
 800cab2:	2101      	movs	r1, #1
 800cab4:	fa01 f303 	lsl.w	r3, r1, r3
 800cab8:	041b      	lsls	r3, r3, #16
 800caba:	68f9      	ldr	r1, [r7, #12]
 800cabc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800cac0:	4313      	orrs	r3, r2
 800cac2:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800cac4:	68bb      	ldr	r3, [r7, #8]
 800cac6:	015a      	lsls	r2, r3, #5
 800cac8:	68fb      	ldr	r3, [r7, #12]
 800caca:	4413      	add	r3, r2
 800cacc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cad0:	681b      	ldr	r3, [r3, #0]
 800cad2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800cad6:	2b00      	cmp	r3, #0
 800cad8:	d11a      	bne.n	800cb10 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800cada:	68bb      	ldr	r3, [r7, #8]
 800cadc:	015a      	lsls	r2, r3, #5
 800cade:	68fb      	ldr	r3, [r7, #12]
 800cae0:	4413      	add	r3, r2
 800cae2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cae6:	681a      	ldr	r2, [r3, #0]
 800cae8:	683b      	ldr	r3, [r7, #0]
 800caea:	689b      	ldr	r3, [r3, #8]
 800caec:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800caf0:	683b      	ldr	r3, [r7, #0]
 800caf2:	78db      	ldrb	r3, [r3, #3]
 800caf4:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800caf6:	430b      	orrs	r3, r1
 800caf8:	4313      	orrs	r3, r2
 800cafa:	68ba      	ldr	r2, [r7, #8]
 800cafc:	0151      	lsls	r1, r2, #5
 800cafe:	68fa      	ldr	r2, [r7, #12]
 800cb00:	440a      	add	r2, r1
 800cb02:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800cb06:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800cb0a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800cb0e:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800cb10:	2300      	movs	r3, #0
}
 800cb12:	4618      	mov	r0, r3
 800cb14:	3714      	adds	r7, #20
 800cb16:	46bd      	mov	sp, r7
 800cb18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb1c:	4770      	bx	lr
	...

0800cb20 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800cb20:	b480      	push	{r7}
 800cb22:	b085      	sub	sp, #20
 800cb24:	af00      	add	r7, sp, #0
 800cb26:	6078      	str	r0, [r7, #4]
 800cb28:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cb2a:	687b      	ldr	r3, [r7, #4]
 800cb2c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800cb2e:	683b      	ldr	r3, [r7, #0]
 800cb30:	781b      	ldrb	r3, [r3, #0]
 800cb32:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800cb34:	683b      	ldr	r3, [r7, #0]
 800cb36:	785b      	ldrb	r3, [r3, #1]
 800cb38:	2b01      	cmp	r3, #1
 800cb3a:	d135      	bne.n	800cba8 <USB_DeactivateEndpoint+0x88>
  {
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800cb3c:	68fb      	ldr	r3, [r7, #12]
 800cb3e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cb42:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800cb44:	683b      	ldr	r3, [r7, #0]
 800cb46:	781b      	ldrb	r3, [r3, #0]
 800cb48:	f003 030f 	and.w	r3, r3, #15
 800cb4c:	2101      	movs	r1, #1
 800cb4e:	fa01 f303 	lsl.w	r3, r1, r3
 800cb52:	b29b      	uxth	r3, r3
 800cb54:	43db      	mvns	r3, r3
 800cb56:	68f9      	ldr	r1, [r7, #12]
 800cb58:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800cb5c:	4013      	ands	r3, r2
 800cb5e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800cb60:	68fb      	ldr	r3, [r7, #12]
 800cb62:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cb66:	69da      	ldr	r2, [r3, #28]
 800cb68:	683b      	ldr	r3, [r7, #0]
 800cb6a:	781b      	ldrb	r3, [r3, #0]
 800cb6c:	f003 030f 	and.w	r3, r3, #15
 800cb70:	2101      	movs	r1, #1
 800cb72:	fa01 f303 	lsl.w	r3, r1, r3
 800cb76:	b29b      	uxth	r3, r3
 800cb78:	43db      	mvns	r3, r3
 800cb7a:	68f9      	ldr	r1, [r7, #12]
 800cb7c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800cb80:	4013      	ands	r3, r2
 800cb82:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800cb84:	68bb      	ldr	r3, [r7, #8]
 800cb86:	015a      	lsls	r2, r3, #5
 800cb88:	68fb      	ldr	r3, [r7, #12]
 800cb8a:	4413      	add	r3, r2
 800cb8c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cb90:	681a      	ldr	r2, [r3, #0]
 800cb92:	68bb      	ldr	r3, [r7, #8]
 800cb94:	0159      	lsls	r1, r3, #5
 800cb96:	68fb      	ldr	r3, [r7, #12]
 800cb98:	440b      	add	r3, r1
 800cb9a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cb9e:	4619      	mov	r1, r3
 800cba0:	4b1f      	ldr	r3, [pc, #124]	; (800cc20 <USB_DeactivateEndpoint+0x100>)
 800cba2:	4013      	ands	r3, r2
 800cba4:	600b      	str	r3, [r1, #0]
 800cba6:	e034      	b.n	800cc12 <USB_DeactivateEndpoint+0xf2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800cba8:	68fb      	ldr	r3, [r7, #12]
 800cbaa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cbae:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800cbb0:	683b      	ldr	r3, [r7, #0]
 800cbb2:	781b      	ldrb	r3, [r3, #0]
 800cbb4:	f003 030f 	and.w	r3, r3, #15
 800cbb8:	2101      	movs	r1, #1
 800cbba:	fa01 f303 	lsl.w	r3, r1, r3
 800cbbe:	041b      	lsls	r3, r3, #16
 800cbc0:	43db      	mvns	r3, r3
 800cbc2:	68f9      	ldr	r1, [r7, #12]
 800cbc4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800cbc8:	4013      	ands	r3, r2
 800cbca:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800cbcc:	68fb      	ldr	r3, [r7, #12]
 800cbce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cbd2:	69da      	ldr	r2, [r3, #28]
 800cbd4:	683b      	ldr	r3, [r7, #0]
 800cbd6:	781b      	ldrb	r3, [r3, #0]
 800cbd8:	f003 030f 	and.w	r3, r3, #15
 800cbdc:	2101      	movs	r1, #1
 800cbde:	fa01 f303 	lsl.w	r3, r1, r3
 800cbe2:	041b      	lsls	r3, r3, #16
 800cbe4:	43db      	mvns	r3, r3
 800cbe6:	68f9      	ldr	r1, [r7, #12]
 800cbe8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800cbec:	4013      	ands	r3, r2
 800cbee:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800cbf0:	68bb      	ldr	r3, [r7, #8]
 800cbf2:	015a      	lsls	r2, r3, #5
 800cbf4:	68fb      	ldr	r3, [r7, #12]
 800cbf6:	4413      	add	r3, r2
 800cbf8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cbfc:	681a      	ldr	r2, [r3, #0]
 800cbfe:	68bb      	ldr	r3, [r7, #8]
 800cc00:	0159      	lsls	r1, r3, #5
 800cc02:	68fb      	ldr	r3, [r7, #12]
 800cc04:	440b      	add	r3, r1
 800cc06:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cc0a:	4619      	mov	r1, r3
 800cc0c:	4b05      	ldr	r3, [pc, #20]	; (800cc24 <USB_DeactivateEndpoint+0x104>)
 800cc0e:	4013      	ands	r3, r2
 800cc10:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800cc12:	2300      	movs	r3, #0
}
 800cc14:	4618      	mov	r0, r3
 800cc16:	3714      	adds	r7, #20
 800cc18:	46bd      	mov	sp, r7
 800cc1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc1e:	4770      	bx	lr
 800cc20:	ec337800 	.word	0xec337800
 800cc24:	eff37800 	.word	0xeff37800

0800cc28 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800cc28:	b580      	push	{r7, lr}
 800cc2a:	b08a      	sub	sp, #40	; 0x28
 800cc2c:	af02      	add	r7, sp, #8
 800cc2e:	60f8      	str	r0, [r7, #12]
 800cc30:	60b9      	str	r1, [r7, #8]
 800cc32:	4613      	mov	r3, r2
 800cc34:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cc36:	68fb      	ldr	r3, [r7, #12]
 800cc38:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800cc3a:	68bb      	ldr	r3, [r7, #8]
 800cc3c:	781b      	ldrb	r3, [r3, #0]
 800cc3e:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800cc40:	68bb      	ldr	r3, [r7, #8]
 800cc42:	785b      	ldrb	r3, [r3, #1]
 800cc44:	2b01      	cmp	r3, #1
 800cc46:	f040 815c 	bne.w	800cf02 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800cc4a:	68bb      	ldr	r3, [r7, #8]
 800cc4c:	695b      	ldr	r3, [r3, #20]
 800cc4e:	2b00      	cmp	r3, #0
 800cc50:	d132      	bne.n	800ccb8 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800cc52:	69bb      	ldr	r3, [r7, #24]
 800cc54:	015a      	lsls	r2, r3, #5
 800cc56:	69fb      	ldr	r3, [r7, #28]
 800cc58:	4413      	add	r3, r2
 800cc5a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cc5e:	691b      	ldr	r3, [r3, #16]
 800cc60:	69ba      	ldr	r2, [r7, #24]
 800cc62:	0151      	lsls	r1, r2, #5
 800cc64:	69fa      	ldr	r2, [r7, #28]
 800cc66:	440a      	add	r2, r1
 800cc68:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cc6c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800cc70:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800cc74:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800cc76:	69bb      	ldr	r3, [r7, #24]
 800cc78:	015a      	lsls	r2, r3, #5
 800cc7a:	69fb      	ldr	r3, [r7, #28]
 800cc7c:	4413      	add	r3, r2
 800cc7e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cc82:	691b      	ldr	r3, [r3, #16]
 800cc84:	69ba      	ldr	r2, [r7, #24]
 800cc86:	0151      	lsls	r1, r2, #5
 800cc88:	69fa      	ldr	r2, [r7, #28]
 800cc8a:	440a      	add	r2, r1
 800cc8c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cc90:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800cc94:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800cc96:	69bb      	ldr	r3, [r7, #24]
 800cc98:	015a      	lsls	r2, r3, #5
 800cc9a:	69fb      	ldr	r3, [r7, #28]
 800cc9c:	4413      	add	r3, r2
 800cc9e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cca2:	691b      	ldr	r3, [r3, #16]
 800cca4:	69ba      	ldr	r2, [r7, #24]
 800cca6:	0151      	lsls	r1, r2, #5
 800cca8:	69fa      	ldr	r2, [r7, #28]
 800ccaa:	440a      	add	r2, r1
 800ccac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ccb0:	0cdb      	lsrs	r3, r3, #19
 800ccb2:	04db      	lsls	r3, r3, #19
 800ccb4:	6113      	str	r3, [r2, #16]
 800ccb6:	e074      	b.n	800cda2 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800ccb8:	69bb      	ldr	r3, [r7, #24]
 800ccba:	015a      	lsls	r2, r3, #5
 800ccbc:	69fb      	ldr	r3, [r7, #28]
 800ccbe:	4413      	add	r3, r2
 800ccc0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ccc4:	691b      	ldr	r3, [r3, #16]
 800ccc6:	69ba      	ldr	r2, [r7, #24]
 800ccc8:	0151      	lsls	r1, r2, #5
 800ccca:	69fa      	ldr	r2, [r7, #28]
 800cccc:	440a      	add	r2, r1
 800ccce:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ccd2:	0cdb      	lsrs	r3, r3, #19
 800ccd4:	04db      	lsls	r3, r3, #19
 800ccd6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800ccd8:	69bb      	ldr	r3, [r7, #24]
 800ccda:	015a      	lsls	r2, r3, #5
 800ccdc:	69fb      	ldr	r3, [r7, #28]
 800ccde:	4413      	add	r3, r2
 800cce0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cce4:	691b      	ldr	r3, [r3, #16]
 800cce6:	69ba      	ldr	r2, [r7, #24]
 800cce8:	0151      	lsls	r1, r2, #5
 800ccea:	69fa      	ldr	r2, [r7, #28]
 800ccec:	440a      	add	r2, r1
 800ccee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ccf2:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800ccf6:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800ccfa:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800ccfc:	69bb      	ldr	r3, [r7, #24]
 800ccfe:	015a      	lsls	r2, r3, #5
 800cd00:	69fb      	ldr	r3, [r7, #28]
 800cd02:	4413      	add	r3, r2
 800cd04:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cd08:	691a      	ldr	r2, [r3, #16]
 800cd0a:	68bb      	ldr	r3, [r7, #8]
 800cd0c:	6959      	ldr	r1, [r3, #20]
 800cd0e:	68bb      	ldr	r3, [r7, #8]
 800cd10:	689b      	ldr	r3, [r3, #8]
 800cd12:	440b      	add	r3, r1
 800cd14:	1e59      	subs	r1, r3, #1
 800cd16:	68bb      	ldr	r3, [r7, #8]
 800cd18:	689b      	ldr	r3, [r3, #8]
 800cd1a:	fbb1 f3f3 	udiv	r3, r1, r3
 800cd1e:	04d9      	lsls	r1, r3, #19
 800cd20:	4b9d      	ldr	r3, [pc, #628]	; (800cf98 <USB_EPStartXfer+0x370>)
 800cd22:	400b      	ands	r3, r1
 800cd24:	69b9      	ldr	r1, [r7, #24]
 800cd26:	0148      	lsls	r0, r1, #5
 800cd28:	69f9      	ldr	r1, [r7, #28]
 800cd2a:	4401      	add	r1, r0
 800cd2c:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800cd30:	4313      	orrs	r3, r2
 800cd32:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800cd34:	69bb      	ldr	r3, [r7, #24]
 800cd36:	015a      	lsls	r2, r3, #5
 800cd38:	69fb      	ldr	r3, [r7, #28]
 800cd3a:	4413      	add	r3, r2
 800cd3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cd40:	691a      	ldr	r2, [r3, #16]
 800cd42:	68bb      	ldr	r3, [r7, #8]
 800cd44:	695b      	ldr	r3, [r3, #20]
 800cd46:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800cd4a:	69b9      	ldr	r1, [r7, #24]
 800cd4c:	0148      	lsls	r0, r1, #5
 800cd4e:	69f9      	ldr	r1, [r7, #28]
 800cd50:	4401      	add	r1, r0
 800cd52:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800cd56:	4313      	orrs	r3, r2
 800cd58:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800cd5a:	68bb      	ldr	r3, [r7, #8]
 800cd5c:	78db      	ldrb	r3, [r3, #3]
 800cd5e:	2b01      	cmp	r3, #1
 800cd60:	d11f      	bne.n	800cda2 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800cd62:	69bb      	ldr	r3, [r7, #24]
 800cd64:	015a      	lsls	r2, r3, #5
 800cd66:	69fb      	ldr	r3, [r7, #28]
 800cd68:	4413      	add	r3, r2
 800cd6a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cd6e:	691b      	ldr	r3, [r3, #16]
 800cd70:	69ba      	ldr	r2, [r7, #24]
 800cd72:	0151      	lsls	r1, r2, #5
 800cd74:	69fa      	ldr	r2, [r7, #28]
 800cd76:	440a      	add	r2, r1
 800cd78:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cd7c:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800cd80:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800cd82:	69bb      	ldr	r3, [r7, #24]
 800cd84:	015a      	lsls	r2, r3, #5
 800cd86:	69fb      	ldr	r3, [r7, #28]
 800cd88:	4413      	add	r3, r2
 800cd8a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cd8e:	691b      	ldr	r3, [r3, #16]
 800cd90:	69ba      	ldr	r2, [r7, #24]
 800cd92:	0151      	lsls	r1, r2, #5
 800cd94:	69fa      	ldr	r2, [r7, #28]
 800cd96:	440a      	add	r2, r1
 800cd98:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cd9c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800cda0:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800cda2:	79fb      	ldrb	r3, [r7, #7]
 800cda4:	2b01      	cmp	r3, #1
 800cda6:	d14b      	bne.n	800ce40 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800cda8:	68bb      	ldr	r3, [r7, #8]
 800cdaa:	691b      	ldr	r3, [r3, #16]
 800cdac:	2b00      	cmp	r3, #0
 800cdae:	d009      	beq.n	800cdc4 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800cdb0:	69bb      	ldr	r3, [r7, #24]
 800cdb2:	015a      	lsls	r2, r3, #5
 800cdb4:	69fb      	ldr	r3, [r7, #28]
 800cdb6:	4413      	add	r3, r2
 800cdb8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cdbc:	461a      	mov	r2, r3
 800cdbe:	68bb      	ldr	r3, [r7, #8]
 800cdc0:	691b      	ldr	r3, [r3, #16]
 800cdc2:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800cdc4:	68bb      	ldr	r3, [r7, #8]
 800cdc6:	78db      	ldrb	r3, [r3, #3]
 800cdc8:	2b01      	cmp	r3, #1
 800cdca:	d128      	bne.n	800ce1e <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800cdcc:	69fb      	ldr	r3, [r7, #28]
 800cdce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cdd2:	689b      	ldr	r3, [r3, #8]
 800cdd4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cdd8:	2b00      	cmp	r3, #0
 800cdda:	d110      	bne.n	800cdfe <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800cddc:	69bb      	ldr	r3, [r7, #24]
 800cdde:	015a      	lsls	r2, r3, #5
 800cde0:	69fb      	ldr	r3, [r7, #28]
 800cde2:	4413      	add	r3, r2
 800cde4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cde8:	681b      	ldr	r3, [r3, #0]
 800cdea:	69ba      	ldr	r2, [r7, #24]
 800cdec:	0151      	lsls	r1, r2, #5
 800cdee:	69fa      	ldr	r2, [r7, #28]
 800cdf0:	440a      	add	r2, r1
 800cdf2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cdf6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800cdfa:	6013      	str	r3, [r2, #0]
 800cdfc:	e00f      	b.n	800ce1e <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800cdfe:	69bb      	ldr	r3, [r7, #24]
 800ce00:	015a      	lsls	r2, r3, #5
 800ce02:	69fb      	ldr	r3, [r7, #28]
 800ce04:	4413      	add	r3, r2
 800ce06:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ce0a:	681b      	ldr	r3, [r3, #0]
 800ce0c:	69ba      	ldr	r2, [r7, #24]
 800ce0e:	0151      	lsls	r1, r2, #5
 800ce10:	69fa      	ldr	r2, [r7, #28]
 800ce12:	440a      	add	r2, r1
 800ce14:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ce18:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ce1c:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800ce1e:	69bb      	ldr	r3, [r7, #24]
 800ce20:	015a      	lsls	r2, r3, #5
 800ce22:	69fb      	ldr	r3, [r7, #28]
 800ce24:	4413      	add	r3, r2
 800ce26:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ce2a:	681b      	ldr	r3, [r3, #0]
 800ce2c:	69ba      	ldr	r2, [r7, #24]
 800ce2e:	0151      	lsls	r1, r2, #5
 800ce30:	69fa      	ldr	r2, [r7, #28]
 800ce32:	440a      	add	r2, r1
 800ce34:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ce38:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800ce3c:	6013      	str	r3, [r2, #0]
 800ce3e:	e12f      	b.n	800d0a0 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800ce40:	69bb      	ldr	r3, [r7, #24]
 800ce42:	015a      	lsls	r2, r3, #5
 800ce44:	69fb      	ldr	r3, [r7, #28]
 800ce46:	4413      	add	r3, r2
 800ce48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ce4c:	681b      	ldr	r3, [r3, #0]
 800ce4e:	69ba      	ldr	r2, [r7, #24]
 800ce50:	0151      	lsls	r1, r2, #5
 800ce52:	69fa      	ldr	r2, [r7, #28]
 800ce54:	440a      	add	r2, r1
 800ce56:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ce5a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800ce5e:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800ce60:	68bb      	ldr	r3, [r7, #8]
 800ce62:	78db      	ldrb	r3, [r3, #3]
 800ce64:	2b01      	cmp	r3, #1
 800ce66:	d015      	beq.n	800ce94 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800ce68:	68bb      	ldr	r3, [r7, #8]
 800ce6a:	695b      	ldr	r3, [r3, #20]
 800ce6c:	2b00      	cmp	r3, #0
 800ce6e:	f000 8117 	beq.w	800d0a0 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800ce72:	69fb      	ldr	r3, [r7, #28]
 800ce74:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ce78:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ce7a:	68bb      	ldr	r3, [r7, #8]
 800ce7c:	781b      	ldrb	r3, [r3, #0]
 800ce7e:	f003 030f 	and.w	r3, r3, #15
 800ce82:	2101      	movs	r1, #1
 800ce84:	fa01 f303 	lsl.w	r3, r1, r3
 800ce88:	69f9      	ldr	r1, [r7, #28]
 800ce8a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ce8e:	4313      	orrs	r3, r2
 800ce90:	634b      	str	r3, [r1, #52]	; 0x34
 800ce92:	e105      	b.n	800d0a0 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800ce94:	69fb      	ldr	r3, [r7, #28]
 800ce96:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ce9a:	689b      	ldr	r3, [r3, #8]
 800ce9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cea0:	2b00      	cmp	r3, #0
 800cea2:	d110      	bne.n	800cec6 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800cea4:	69bb      	ldr	r3, [r7, #24]
 800cea6:	015a      	lsls	r2, r3, #5
 800cea8:	69fb      	ldr	r3, [r7, #28]
 800ceaa:	4413      	add	r3, r2
 800ceac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ceb0:	681b      	ldr	r3, [r3, #0]
 800ceb2:	69ba      	ldr	r2, [r7, #24]
 800ceb4:	0151      	lsls	r1, r2, #5
 800ceb6:	69fa      	ldr	r2, [r7, #28]
 800ceb8:	440a      	add	r2, r1
 800ceba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cebe:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800cec2:	6013      	str	r3, [r2, #0]
 800cec4:	e00f      	b.n	800cee6 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800cec6:	69bb      	ldr	r3, [r7, #24]
 800cec8:	015a      	lsls	r2, r3, #5
 800ceca:	69fb      	ldr	r3, [r7, #28]
 800cecc:	4413      	add	r3, r2
 800cece:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ced2:	681b      	ldr	r3, [r3, #0]
 800ced4:	69ba      	ldr	r2, [r7, #24]
 800ced6:	0151      	lsls	r1, r2, #5
 800ced8:	69fa      	ldr	r2, [r7, #28]
 800ceda:	440a      	add	r2, r1
 800cedc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cee0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800cee4:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800cee6:	68bb      	ldr	r3, [r7, #8]
 800cee8:	68d9      	ldr	r1, [r3, #12]
 800ceea:	68bb      	ldr	r3, [r7, #8]
 800ceec:	781a      	ldrb	r2, [r3, #0]
 800ceee:	68bb      	ldr	r3, [r7, #8]
 800cef0:	695b      	ldr	r3, [r3, #20]
 800cef2:	b298      	uxth	r0, r3
 800cef4:	79fb      	ldrb	r3, [r7, #7]
 800cef6:	9300      	str	r3, [sp, #0]
 800cef8:	4603      	mov	r3, r0
 800cefa:	68f8      	ldr	r0, [r7, #12]
 800cefc:	f000 fa2b 	bl	800d356 <USB_WritePacket>
 800cf00:	e0ce      	b.n	800d0a0 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800cf02:	69bb      	ldr	r3, [r7, #24]
 800cf04:	015a      	lsls	r2, r3, #5
 800cf06:	69fb      	ldr	r3, [r7, #28]
 800cf08:	4413      	add	r3, r2
 800cf0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cf0e:	691b      	ldr	r3, [r3, #16]
 800cf10:	69ba      	ldr	r2, [r7, #24]
 800cf12:	0151      	lsls	r1, r2, #5
 800cf14:	69fa      	ldr	r2, [r7, #28]
 800cf16:	440a      	add	r2, r1
 800cf18:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800cf1c:	0cdb      	lsrs	r3, r3, #19
 800cf1e:	04db      	lsls	r3, r3, #19
 800cf20:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800cf22:	69bb      	ldr	r3, [r7, #24]
 800cf24:	015a      	lsls	r2, r3, #5
 800cf26:	69fb      	ldr	r3, [r7, #28]
 800cf28:	4413      	add	r3, r2
 800cf2a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cf2e:	691b      	ldr	r3, [r3, #16]
 800cf30:	69ba      	ldr	r2, [r7, #24]
 800cf32:	0151      	lsls	r1, r2, #5
 800cf34:	69fa      	ldr	r2, [r7, #28]
 800cf36:	440a      	add	r2, r1
 800cf38:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800cf3c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800cf40:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800cf44:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800cf46:	68bb      	ldr	r3, [r7, #8]
 800cf48:	695b      	ldr	r3, [r3, #20]
 800cf4a:	2b00      	cmp	r3, #0
 800cf4c:	d126      	bne.n	800cf9c <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800cf4e:	69bb      	ldr	r3, [r7, #24]
 800cf50:	015a      	lsls	r2, r3, #5
 800cf52:	69fb      	ldr	r3, [r7, #28]
 800cf54:	4413      	add	r3, r2
 800cf56:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cf5a:	691a      	ldr	r2, [r3, #16]
 800cf5c:	68bb      	ldr	r3, [r7, #8]
 800cf5e:	689b      	ldr	r3, [r3, #8]
 800cf60:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800cf64:	69b9      	ldr	r1, [r7, #24]
 800cf66:	0148      	lsls	r0, r1, #5
 800cf68:	69f9      	ldr	r1, [r7, #28]
 800cf6a:	4401      	add	r1, r0
 800cf6c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800cf70:	4313      	orrs	r3, r2
 800cf72:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800cf74:	69bb      	ldr	r3, [r7, #24]
 800cf76:	015a      	lsls	r2, r3, #5
 800cf78:	69fb      	ldr	r3, [r7, #28]
 800cf7a:	4413      	add	r3, r2
 800cf7c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cf80:	691b      	ldr	r3, [r3, #16]
 800cf82:	69ba      	ldr	r2, [r7, #24]
 800cf84:	0151      	lsls	r1, r2, #5
 800cf86:	69fa      	ldr	r2, [r7, #28]
 800cf88:	440a      	add	r2, r1
 800cf8a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800cf8e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800cf92:	6113      	str	r3, [r2, #16]
 800cf94:	e036      	b.n	800d004 <USB_EPStartXfer+0x3dc>
 800cf96:	bf00      	nop
 800cf98:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800cf9c:	68bb      	ldr	r3, [r7, #8]
 800cf9e:	695a      	ldr	r2, [r3, #20]
 800cfa0:	68bb      	ldr	r3, [r7, #8]
 800cfa2:	689b      	ldr	r3, [r3, #8]
 800cfa4:	4413      	add	r3, r2
 800cfa6:	1e5a      	subs	r2, r3, #1
 800cfa8:	68bb      	ldr	r3, [r7, #8]
 800cfaa:	689b      	ldr	r3, [r3, #8]
 800cfac:	fbb2 f3f3 	udiv	r3, r2, r3
 800cfb0:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800cfb2:	69bb      	ldr	r3, [r7, #24]
 800cfb4:	015a      	lsls	r2, r3, #5
 800cfb6:	69fb      	ldr	r3, [r7, #28]
 800cfb8:	4413      	add	r3, r2
 800cfba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cfbe:	691a      	ldr	r2, [r3, #16]
 800cfc0:	8afb      	ldrh	r3, [r7, #22]
 800cfc2:	04d9      	lsls	r1, r3, #19
 800cfc4:	4b39      	ldr	r3, [pc, #228]	; (800d0ac <USB_EPStartXfer+0x484>)
 800cfc6:	400b      	ands	r3, r1
 800cfc8:	69b9      	ldr	r1, [r7, #24]
 800cfca:	0148      	lsls	r0, r1, #5
 800cfcc:	69f9      	ldr	r1, [r7, #28]
 800cfce:	4401      	add	r1, r0
 800cfd0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800cfd4:	4313      	orrs	r3, r2
 800cfd6:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 800cfd8:	69bb      	ldr	r3, [r7, #24]
 800cfda:	015a      	lsls	r2, r3, #5
 800cfdc:	69fb      	ldr	r3, [r7, #28]
 800cfde:	4413      	add	r3, r2
 800cfe0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cfe4:	691a      	ldr	r2, [r3, #16]
 800cfe6:	68bb      	ldr	r3, [r7, #8]
 800cfe8:	689b      	ldr	r3, [r3, #8]
 800cfea:	8af9      	ldrh	r1, [r7, #22]
 800cfec:	fb01 f303 	mul.w	r3, r1, r3
 800cff0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800cff4:	69b9      	ldr	r1, [r7, #24]
 800cff6:	0148      	lsls	r0, r1, #5
 800cff8:	69f9      	ldr	r1, [r7, #28]
 800cffa:	4401      	add	r1, r0
 800cffc:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800d000:	4313      	orrs	r3, r2
 800d002:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800d004:	79fb      	ldrb	r3, [r7, #7]
 800d006:	2b01      	cmp	r3, #1
 800d008:	d10d      	bne.n	800d026 <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800d00a:	68bb      	ldr	r3, [r7, #8]
 800d00c:	68db      	ldr	r3, [r3, #12]
 800d00e:	2b00      	cmp	r3, #0
 800d010:	d009      	beq.n	800d026 <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800d012:	68bb      	ldr	r3, [r7, #8]
 800d014:	68d9      	ldr	r1, [r3, #12]
 800d016:	69bb      	ldr	r3, [r7, #24]
 800d018:	015a      	lsls	r2, r3, #5
 800d01a:	69fb      	ldr	r3, [r7, #28]
 800d01c:	4413      	add	r3, r2
 800d01e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d022:	460a      	mov	r2, r1
 800d024:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800d026:	68bb      	ldr	r3, [r7, #8]
 800d028:	78db      	ldrb	r3, [r3, #3]
 800d02a:	2b01      	cmp	r3, #1
 800d02c:	d128      	bne.n	800d080 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800d02e:	69fb      	ldr	r3, [r7, #28]
 800d030:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d034:	689b      	ldr	r3, [r3, #8]
 800d036:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d03a:	2b00      	cmp	r3, #0
 800d03c:	d110      	bne.n	800d060 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800d03e:	69bb      	ldr	r3, [r7, #24]
 800d040:	015a      	lsls	r2, r3, #5
 800d042:	69fb      	ldr	r3, [r7, #28]
 800d044:	4413      	add	r3, r2
 800d046:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d04a:	681b      	ldr	r3, [r3, #0]
 800d04c:	69ba      	ldr	r2, [r7, #24]
 800d04e:	0151      	lsls	r1, r2, #5
 800d050:	69fa      	ldr	r2, [r7, #28]
 800d052:	440a      	add	r2, r1
 800d054:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d058:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800d05c:	6013      	str	r3, [r2, #0]
 800d05e:	e00f      	b.n	800d080 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800d060:	69bb      	ldr	r3, [r7, #24]
 800d062:	015a      	lsls	r2, r3, #5
 800d064:	69fb      	ldr	r3, [r7, #28]
 800d066:	4413      	add	r3, r2
 800d068:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d06c:	681b      	ldr	r3, [r3, #0]
 800d06e:	69ba      	ldr	r2, [r7, #24]
 800d070:	0151      	lsls	r1, r2, #5
 800d072:	69fa      	ldr	r2, [r7, #28]
 800d074:	440a      	add	r2, r1
 800d076:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d07a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d07e:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800d080:	69bb      	ldr	r3, [r7, #24]
 800d082:	015a      	lsls	r2, r3, #5
 800d084:	69fb      	ldr	r3, [r7, #28]
 800d086:	4413      	add	r3, r2
 800d088:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d08c:	681b      	ldr	r3, [r3, #0]
 800d08e:	69ba      	ldr	r2, [r7, #24]
 800d090:	0151      	lsls	r1, r2, #5
 800d092:	69fa      	ldr	r2, [r7, #28]
 800d094:	440a      	add	r2, r1
 800d096:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d09a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800d09e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800d0a0:	2300      	movs	r3, #0
}
 800d0a2:	4618      	mov	r0, r3
 800d0a4:	3720      	adds	r7, #32
 800d0a6:	46bd      	mov	sp, r7
 800d0a8:	bd80      	pop	{r7, pc}
 800d0aa:	bf00      	nop
 800d0ac:	1ff80000 	.word	0x1ff80000

0800d0b0 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800d0b0:	b480      	push	{r7}
 800d0b2:	b087      	sub	sp, #28
 800d0b4:	af00      	add	r7, sp, #0
 800d0b6:	60f8      	str	r0, [r7, #12]
 800d0b8:	60b9      	str	r1, [r7, #8]
 800d0ba:	4613      	mov	r3, r2
 800d0bc:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d0be:	68fb      	ldr	r3, [r7, #12]
 800d0c0:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800d0c2:	68bb      	ldr	r3, [r7, #8]
 800d0c4:	781b      	ldrb	r3, [r3, #0]
 800d0c6:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800d0c8:	68bb      	ldr	r3, [r7, #8]
 800d0ca:	785b      	ldrb	r3, [r3, #1]
 800d0cc:	2b01      	cmp	r3, #1
 800d0ce:	f040 80cd 	bne.w	800d26c <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800d0d2:	68bb      	ldr	r3, [r7, #8]
 800d0d4:	695b      	ldr	r3, [r3, #20]
 800d0d6:	2b00      	cmp	r3, #0
 800d0d8:	d132      	bne.n	800d140 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800d0da:	693b      	ldr	r3, [r7, #16]
 800d0dc:	015a      	lsls	r2, r3, #5
 800d0de:	697b      	ldr	r3, [r7, #20]
 800d0e0:	4413      	add	r3, r2
 800d0e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d0e6:	691b      	ldr	r3, [r3, #16]
 800d0e8:	693a      	ldr	r2, [r7, #16]
 800d0ea:	0151      	lsls	r1, r2, #5
 800d0ec:	697a      	ldr	r2, [r7, #20]
 800d0ee:	440a      	add	r2, r1
 800d0f0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d0f4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800d0f8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800d0fc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800d0fe:	693b      	ldr	r3, [r7, #16]
 800d100:	015a      	lsls	r2, r3, #5
 800d102:	697b      	ldr	r3, [r7, #20]
 800d104:	4413      	add	r3, r2
 800d106:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d10a:	691b      	ldr	r3, [r3, #16]
 800d10c:	693a      	ldr	r2, [r7, #16]
 800d10e:	0151      	lsls	r1, r2, #5
 800d110:	697a      	ldr	r2, [r7, #20]
 800d112:	440a      	add	r2, r1
 800d114:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d118:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800d11c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800d11e:	693b      	ldr	r3, [r7, #16]
 800d120:	015a      	lsls	r2, r3, #5
 800d122:	697b      	ldr	r3, [r7, #20]
 800d124:	4413      	add	r3, r2
 800d126:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d12a:	691b      	ldr	r3, [r3, #16]
 800d12c:	693a      	ldr	r2, [r7, #16]
 800d12e:	0151      	lsls	r1, r2, #5
 800d130:	697a      	ldr	r2, [r7, #20]
 800d132:	440a      	add	r2, r1
 800d134:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d138:	0cdb      	lsrs	r3, r3, #19
 800d13a:	04db      	lsls	r3, r3, #19
 800d13c:	6113      	str	r3, [r2, #16]
 800d13e:	e04e      	b.n	800d1de <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800d140:	693b      	ldr	r3, [r7, #16]
 800d142:	015a      	lsls	r2, r3, #5
 800d144:	697b      	ldr	r3, [r7, #20]
 800d146:	4413      	add	r3, r2
 800d148:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d14c:	691b      	ldr	r3, [r3, #16]
 800d14e:	693a      	ldr	r2, [r7, #16]
 800d150:	0151      	lsls	r1, r2, #5
 800d152:	697a      	ldr	r2, [r7, #20]
 800d154:	440a      	add	r2, r1
 800d156:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d15a:	0cdb      	lsrs	r3, r3, #19
 800d15c:	04db      	lsls	r3, r3, #19
 800d15e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800d160:	693b      	ldr	r3, [r7, #16]
 800d162:	015a      	lsls	r2, r3, #5
 800d164:	697b      	ldr	r3, [r7, #20]
 800d166:	4413      	add	r3, r2
 800d168:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d16c:	691b      	ldr	r3, [r3, #16]
 800d16e:	693a      	ldr	r2, [r7, #16]
 800d170:	0151      	lsls	r1, r2, #5
 800d172:	697a      	ldr	r2, [r7, #20]
 800d174:	440a      	add	r2, r1
 800d176:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d17a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800d17e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800d182:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 800d184:	68bb      	ldr	r3, [r7, #8]
 800d186:	695a      	ldr	r2, [r3, #20]
 800d188:	68bb      	ldr	r3, [r7, #8]
 800d18a:	689b      	ldr	r3, [r3, #8]
 800d18c:	429a      	cmp	r2, r3
 800d18e:	d903      	bls.n	800d198 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800d190:	68bb      	ldr	r3, [r7, #8]
 800d192:	689a      	ldr	r2, [r3, #8]
 800d194:	68bb      	ldr	r3, [r7, #8]
 800d196:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800d198:	693b      	ldr	r3, [r7, #16]
 800d19a:	015a      	lsls	r2, r3, #5
 800d19c:	697b      	ldr	r3, [r7, #20]
 800d19e:	4413      	add	r3, r2
 800d1a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d1a4:	691b      	ldr	r3, [r3, #16]
 800d1a6:	693a      	ldr	r2, [r7, #16]
 800d1a8:	0151      	lsls	r1, r2, #5
 800d1aa:	697a      	ldr	r2, [r7, #20]
 800d1ac:	440a      	add	r2, r1
 800d1ae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d1b2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800d1b6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800d1b8:	693b      	ldr	r3, [r7, #16]
 800d1ba:	015a      	lsls	r2, r3, #5
 800d1bc:	697b      	ldr	r3, [r7, #20]
 800d1be:	4413      	add	r3, r2
 800d1c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d1c4:	691a      	ldr	r2, [r3, #16]
 800d1c6:	68bb      	ldr	r3, [r7, #8]
 800d1c8:	695b      	ldr	r3, [r3, #20]
 800d1ca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800d1ce:	6939      	ldr	r1, [r7, #16]
 800d1d0:	0148      	lsls	r0, r1, #5
 800d1d2:	6979      	ldr	r1, [r7, #20]
 800d1d4:	4401      	add	r1, r0
 800d1d6:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800d1da:	4313      	orrs	r3, r2
 800d1dc:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800d1de:	79fb      	ldrb	r3, [r7, #7]
 800d1e0:	2b01      	cmp	r3, #1
 800d1e2:	d11e      	bne.n	800d222 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800d1e4:	68bb      	ldr	r3, [r7, #8]
 800d1e6:	691b      	ldr	r3, [r3, #16]
 800d1e8:	2b00      	cmp	r3, #0
 800d1ea:	d009      	beq.n	800d200 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800d1ec:	693b      	ldr	r3, [r7, #16]
 800d1ee:	015a      	lsls	r2, r3, #5
 800d1f0:	697b      	ldr	r3, [r7, #20]
 800d1f2:	4413      	add	r3, r2
 800d1f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d1f8:	461a      	mov	r2, r3
 800d1fa:	68bb      	ldr	r3, [r7, #8]
 800d1fc:	691b      	ldr	r3, [r3, #16]
 800d1fe:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800d200:	693b      	ldr	r3, [r7, #16]
 800d202:	015a      	lsls	r2, r3, #5
 800d204:	697b      	ldr	r3, [r7, #20]
 800d206:	4413      	add	r3, r2
 800d208:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d20c:	681b      	ldr	r3, [r3, #0]
 800d20e:	693a      	ldr	r2, [r7, #16]
 800d210:	0151      	lsls	r1, r2, #5
 800d212:	697a      	ldr	r2, [r7, #20]
 800d214:	440a      	add	r2, r1
 800d216:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d21a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800d21e:	6013      	str	r3, [r2, #0]
 800d220:	e092      	b.n	800d348 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800d222:	693b      	ldr	r3, [r7, #16]
 800d224:	015a      	lsls	r2, r3, #5
 800d226:	697b      	ldr	r3, [r7, #20]
 800d228:	4413      	add	r3, r2
 800d22a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d22e:	681b      	ldr	r3, [r3, #0]
 800d230:	693a      	ldr	r2, [r7, #16]
 800d232:	0151      	lsls	r1, r2, #5
 800d234:	697a      	ldr	r2, [r7, #20]
 800d236:	440a      	add	r2, r1
 800d238:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d23c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800d240:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800d242:	68bb      	ldr	r3, [r7, #8]
 800d244:	695b      	ldr	r3, [r3, #20]
 800d246:	2b00      	cmp	r3, #0
 800d248:	d07e      	beq.n	800d348 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800d24a:	697b      	ldr	r3, [r7, #20]
 800d24c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d250:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d252:	68bb      	ldr	r3, [r7, #8]
 800d254:	781b      	ldrb	r3, [r3, #0]
 800d256:	f003 030f 	and.w	r3, r3, #15
 800d25a:	2101      	movs	r1, #1
 800d25c:	fa01 f303 	lsl.w	r3, r1, r3
 800d260:	6979      	ldr	r1, [r7, #20]
 800d262:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800d266:	4313      	orrs	r3, r2
 800d268:	634b      	str	r3, [r1, #52]	; 0x34
 800d26a:	e06d      	b.n	800d348 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800d26c:	693b      	ldr	r3, [r7, #16]
 800d26e:	015a      	lsls	r2, r3, #5
 800d270:	697b      	ldr	r3, [r7, #20]
 800d272:	4413      	add	r3, r2
 800d274:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d278:	691b      	ldr	r3, [r3, #16]
 800d27a:	693a      	ldr	r2, [r7, #16]
 800d27c:	0151      	lsls	r1, r2, #5
 800d27e:	697a      	ldr	r2, [r7, #20]
 800d280:	440a      	add	r2, r1
 800d282:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d286:	0cdb      	lsrs	r3, r3, #19
 800d288:	04db      	lsls	r3, r3, #19
 800d28a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800d28c:	693b      	ldr	r3, [r7, #16]
 800d28e:	015a      	lsls	r2, r3, #5
 800d290:	697b      	ldr	r3, [r7, #20]
 800d292:	4413      	add	r3, r2
 800d294:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d298:	691b      	ldr	r3, [r3, #16]
 800d29a:	693a      	ldr	r2, [r7, #16]
 800d29c:	0151      	lsls	r1, r2, #5
 800d29e:	697a      	ldr	r2, [r7, #20]
 800d2a0:	440a      	add	r2, r1
 800d2a2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d2a6:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800d2aa:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800d2ae:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800d2b0:	68bb      	ldr	r3, [r7, #8]
 800d2b2:	695b      	ldr	r3, [r3, #20]
 800d2b4:	2b00      	cmp	r3, #0
 800d2b6:	d003      	beq.n	800d2c0 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 800d2b8:	68bb      	ldr	r3, [r7, #8]
 800d2ba:	689a      	ldr	r2, [r3, #8]
 800d2bc:	68bb      	ldr	r3, [r7, #8]
 800d2be:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800d2c0:	693b      	ldr	r3, [r7, #16]
 800d2c2:	015a      	lsls	r2, r3, #5
 800d2c4:	697b      	ldr	r3, [r7, #20]
 800d2c6:	4413      	add	r3, r2
 800d2c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d2cc:	691b      	ldr	r3, [r3, #16]
 800d2ce:	693a      	ldr	r2, [r7, #16]
 800d2d0:	0151      	lsls	r1, r2, #5
 800d2d2:	697a      	ldr	r2, [r7, #20]
 800d2d4:	440a      	add	r2, r1
 800d2d6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d2da:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800d2de:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 800d2e0:	693b      	ldr	r3, [r7, #16]
 800d2e2:	015a      	lsls	r2, r3, #5
 800d2e4:	697b      	ldr	r3, [r7, #20]
 800d2e6:	4413      	add	r3, r2
 800d2e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d2ec:	691a      	ldr	r2, [r3, #16]
 800d2ee:	68bb      	ldr	r3, [r7, #8]
 800d2f0:	689b      	ldr	r3, [r3, #8]
 800d2f2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800d2f6:	6939      	ldr	r1, [r7, #16]
 800d2f8:	0148      	lsls	r0, r1, #5
 800d2fa:	6979      	ldr	r1, [r7, #20]
 800d2fc:	4401      	add	r1, r0
 800d2fe:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800d302:	4313      	orrs	r3, r2
 800d304:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800d306:	79fb      	ldrb	r3, [r7, #7]
 800d308:	2b01      	cmp	r3, #1
 800d30a:	d10d      	bne.n	800d328 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800d30c:	68bb      	ldr	r3, [r7, #8]
 800d30e:	68db      	ldr	r3, [r3, #12]
 800d310:	2b00      	cmp	r3, #0
 800d312:	d009      	beq.n	800d328 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800d314:	68bb      	ldr	r3, [r7, #8]
 800d316:	68d9      	ldr	r1, [r3, #12]
 800d318:	693b      	ldr	r3, [r7, #16]
 800d31a:	015a      	lsls	r2, r3, #5
 800d31c:	697b      	ldr	r3, [r7, #20]
 800d31e:	4413      	add	r3, r2
 800d320:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d324:	460a      	mov	r2, r1
 800d326:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800d328:	693b      	ldr	r3, [r7, #16]
 800d32a:	015a      	lsls	r2, r3, #5
 800d32c:	697b      	ldr	r3, [r7, #20]
 800d32e:	4413      	add	r3, r2
 800d330:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d334:	681b      	ldr	r3, [r3, #0]
 800d336:	693a      	ldr	r2, [r7, #16]
 800d338:	0151      	lsls	r1, r2, #5
 800d33a:	697a      	ldr	r2, [r7, #20]
 800d33c:	440a      	add	r2, r1
 800d33e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d342:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800d346:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800d348:	2300      	movs	r3, #0
}
 800d34a:	4618      	mov	r0, r3
 800d34c:	371c      	adds	r7, #28
 800d34e:	46bd      	mov	sp, r7
 800d350:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d354:	4770      	bx	lr

0800d356 <USB_WritePacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800d356:	b480      	push	{r7}
 800d358:	b089      	sub	sp, #36	; 0x24
 800d35a:	af00      	add	r7, sp, #0
 800d35c:	60f8      	str	r0, [r7, #12]
 800d35e:	60b9      	str	r1, [r7, #8]
 800d360:	4611      	mov	r1, r2
 800d362:	461a      	mov	r2, r3
 800d364:	460b      	mov	r3, r1
 800d366:	71fb      	strb	r3, [r7, #7]
 800d368:	4613      	mov	r3, r2
 800d36a:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d36c:	68fb      	ldr	r3, [r7, #12]
 800d36e:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 800d370:	68bb      	ldr	r3, [r7, #8]
 800d372:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 800d374:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800d378:	2b00      	cmp	r3, #0
 800d37a:	d11a      	bne.n	800d3b2 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800d37c:	88bb      	ldrh	r3, [r7, #4]
 800d37e:	3303      	adds	r3, #3
 800d380:	089b      	lsrs	r3, r3, #2
 800d382:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800d384:	2300      	movs	r3, #0
 800d386:	61bb      	str	r3, [r7, #24]
 800d388:	e00f      	b.n	800d3aa <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800d38a:	79fb      	ldrb	r3, [r7, #7]
 800d38c:	031a      	lsls	r2, r3, #12
 800d38e:	697b      	ldr	r3, [r7, #20]
 800d390:	4413      	add	r3, r2
 800d392:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d396:	461a      	mov	r2, r3
 800d398:	69fb      	ldr	r3, [r7, #28]
 800d39a:	681b      	ldr	r3, [r3, #0]
 800d39c:	6013      	str	r3, [r2, #0]
      pSrc++;
 800d39e:	69fb      	ldr	r3, [r7, #28]
 800d3a0:	3304      	adds	r3, #4
 800d3a2:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800d3a4:	69bb      	ldr	r3, [r7, #24]
 800d3a6:	3301      	adds	r3, #1
 800d3a8:	61bb      	str	r3, [r7, #24]
 800d3aa:	69ba      	ldr	r2, [r7, #24]
 800d3ac:	693b      	ldr	r3, [r7, #16]
 800d3ae:	429a      	cmp	r2, r3
 800d3b0:	d3eb      	bcc.n	800d38a <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800d3b2:	2300      	movs	r3, #0
}
 800d3b4:	4618      	mov	r0, r3
 800d3b6:	3724      	adds	r7, #36	; 0x24
 800d3b8:	46bd      	mov	sp, r7
 800d3ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3be:	4770      	bx	lr

0800d3c0 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800d3c0:	b480      	push	{r7}
 800d3c2:	b089      	sub	sp, #36	; 0x24
 800d3c4:	af00      	add	r7, sp, #0
 800d3c6:	60f8      	str	r0, [r7, #12]
 800d3c8:	60b9      	str	r1, [r7, #8]
 800d3ca:	4613      	mov	r3, r2
 800d3cc:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d3ce:	68fb      	ldr	r3, [r7, #12]
 800d3d0:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 800d3d2:	68bb      	ldr	r3, [r7, #8]
 800d3d4:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 800d3d6:	88fb      	ldrh	r3, [r7, #6]
 800d3d8:	3303      	adds	r3, #3
 800d3da:	089b      	lsrs	r3, r3, #2
 800d3dc:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 800d3de:	2300      	movs	r3, #0
 800d3e0:	61bb      	str	r3, [r7, #24]
 800d3e2:	e00b      	b.n	800d3fc <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800d3e4:	697b      	ldr	r3, [r7, #20]
 800d3e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d3ea:	681a      	ldr	r2, [r3, #0]
 800d3ec:	69fb      	ldr	r3, [r7, #28]
 800d3ee:	601a      	str	r2, [r3, #0]
    pDest++;
 800d3f0:	69fb      	ldr	r3, [r7, #28]
 800d3f2:	3304      	adds	r3, #4
 800d3f4:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800d3f6:	69bb      	ldr	r3, [r7, #24]
 800d3f8:	3301      	adds	r3, #1
 800d3fa:	61bb      	str	r3, [r7, #24]
 800d3fc:	69ba      	ldr	r2, [r7, #24]
 800d3fe:	693b      	ldr	r3, [r7, #16]
 800d400:	429a      	cmp	r2, r3
 800d402:	d3ef      	bcc.n	800d3e4 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 800d404:	69fb      	ldr	r3, [r7, #28]
}
 800d406:	4618      	mov	r0, r3
 800d408:	3724      	adds	r7, #36	; 0x24
 800d40a:	46bd      	mov	sp, r7
 800d40c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d410:	4770      	bx	lr

0800d412 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800d412:	b480      	push	{r7}
 800d414:	b085      	sub	sp, #20
 800d416:	af00      	add	r7, sp, #0
 800d418:	6078      	str	r0, [r7, #4]
 800d41a:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d41c:	687b      	ldr	r3, [r7, #4]
 800d41e:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800d420:	683b      	ldr	r3, [r7, #0]
 800d422:	781b      	ldrb	r3, [r3, #0]
 800d424:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800d426:	683b      	ldr	r3, [r7, #0]
 800d428:	785b      	ldrb	r3, [r3, #1]
 800d42a:	2b01      	cmp	r3, #1
 800d42c:	d12c      	bne.n	800d488 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800d42e:	68bb      	ldr	r3, [r7, #8]
 800d430:	015a      	lsls	r2, r3, #5
 800d432:	68fb      	ldr	r3, [r7, #12]
 800d434:	4413      	add	r3, r2
 800d436:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d43a:	681b      	ldr	r3, [r3, #0]
 800d43c:	2b00      	cmp	r3, #0
 800d43e:	db12      	blt.n	800d466 <USB_EPSetStall+0x54>
 800d440:	68bb      	ldr	r3, [r7, #8]
 800d442:	2b00      	cmp	r3, #0
 800d444:	d00f      	beq.n	800d466 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800d446:	68bb      	ldr	r3, [r7, #8]
 800d448:	015a      	lsls	r2, r3, #5
 800d44a:	68fb      	ldr	r3, [r7, #12]
 800d44c:	4413      	add	r3, r2
 800d44e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d452:	681b      	ldr	r3, [r3, #0]
 800d454:	68ba      	ldr	r2, [r7, #8]
 800d456:	0151      	lsls	r1, r2, #5
 800d458:	68fa      	ldr	r2, [r7, #12]
 800d45a:	440a      	add	r2, r1
 800d45c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d460:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800d464:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800d466:	68bb      	ldr	r3, [r7, #8]
 800d468:	015a      	lsls	r2, r3, #5
 800d46a:	68fb      	ldr	r3, [r7, #12]
 800d46c:	4413      	add	r3, r2
 800d46e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d472:	681b      	ldr	r3, [r3, #0]
 800d474:	68ba      	ldr	r2, [r7, #8]
 800d476:	0151      	lsls	r1, r2, #5
 800d478:	68fa      	ldr	r2, [r7, #12]
 800d47a:	440a      	add	r2, r1
 800d47c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d480:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800d484:	6013      	str	r3, [r2, #0]
 800d486:	e02b      	b.n	800d4e0 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800d488:	68bb      	ldr	r3, [r7, #8]
 800d48a:	015a      	lsls	r2, r3, #5
 800d48c:	68fb      	ldr	r3, [r7, #12]
 800d48e:	4413      	add	r3, r2
 800d490:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d494:	681b      	ldr	r3, [r3, #0]
 800d496:	2b00      	cmp	r3, #0
 800d498:	db12      	blt.n	800d4c0 <USB_EPSetStall+0xae>
 800d49a:	68bb      	ldr	r3, [r7, #8]
 800d49c:	2b00      	cmp	r3, #0
 800d49e:	d00f      	beq.n	800d4c0 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800d4a0:	68bb      	ldr	r3, [r7, #8]
 800d4a2:	015a      	lsls	r2, r3, #5
 800d4a4:	68fb      	ldr	r3, [r7, #12]
 800d4a6:	4413      	add	r3, r2
 800d4a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d4ac:	681b      	ldr	r3, [r3, #0]
 800d4ae:	68ba      	ldr	r2, [r7, #8]
 800d4b0:	0151      	lsls	r1, r2, #5
 800d4b2:	68fa      	ldr	r2, [r7, #12]
 800d4b4:	440a      	add	r2, r1
 800d4b6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d4ba:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800d4be:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800d4c0:	68bb      	ldr	r3, [r7, #8]
 800d4c2:	015a      	lsls	r2, r3, #5
 800d4c4:	68fb      	ldr	r3, [r7, #12]
 800d4c6:	4413      	add	r3, r2
 800d4c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d4cc:	681b      	ldr	r3, [r3, #0]
 800d4ce:	68ba      	ldr	r2, [r7, #8]
 800d4d0:	0151      	lsls	r1, r2, #5
 800d4d2:	68fa      	ldr	r2, [r7, #12]
 800d4d4:	440a      	add	r2, r1
 800d4d6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d4da:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800d4de:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800d4e0:	2300      	movs	r3, #0
}
 800d4e2:	4618      	mov	r0, r3
 800d4e4:	3714      	adds	r7, #20
 800d4e6:	46bd      	mov	sp, r7
 800d4e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4ec:	4770      	bx	lr

0800d4ee <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800d4ee:	b480      	push	{r7}
 800d4f0:	b085      	sub	sp, #20
 800d4f2:	af00      	add	r7, sp, #0
 800d4f4:	6078      	str	r0, [r7, #4]
 800d4f6:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d4f8:	687b      	ldr	r3, [r7, #4]
 800d4fa:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800d4fc:	683b      	ldr	r3, [r7, #0]
 800d4fe:	781b      	ldrb	r3, [r3, #0]
 800d500:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800d502:	683b      	ldr	r3, [r7, #0]
 800d504:	785b      	ldrb	r3, [r3, #1]
 800d506:	2b01      	cmp	r3, #1
 800d508:	d128      	bne.n	800d55c <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800d50a:	68bb      	ldr	r3, [r7, #8]
 800d50c:	015a      	lsls	r2, r3, #5
 800d50e:	68fb      	ldr	r3, [r7, #12]
 800d510:	4413      	add	r3, r2
 800d512:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d516:	681b      	ldr	r3, [r3, #0]
 800d518:	68ba      	ldr	r2, [r7, #8]
 800d51a:	0151      	lsls	r1, r2, #5
 800d51c:	68fa      	ldr	r2, [r7, #12]
 800d51e:	440a      	add	r2, r1
 800d520:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d524:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800d528:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800d52a:	683b      	ldr	r3, [r7, #0]
 800d52c:	78db      	ldrb	r3, [r3, #3]
 800d52e:	2b03      	cmp	r3, #3
 800d530:	d003      	beq.n	800d53a <USB_EPClearStall+0x4c>
 800d532:	683b      	ldr	r3, [r7, #0]
 800d534:	78db      	ldrb	r3, [r3, #3]
 800d536:	2b02      	cmp	r3, #2
 800d538:	d138      	bne.n	800d5ac <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800d53a:	68bb      	ldr	r3, [r7, #8]
 800d53c:	015a      	lsls	r2, r3, #5
 800d53e:	68fb      	ldr	r3, [r7, #12]
 800d540:	4413      	add	r3, r2
 800d542:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d546:	681b      	ldr	r3, [r3, #0]
 800d548:	68ba      	ldr	r2, [r7, #8]
 800d54a:	0151      	lsls	r1, r2, #5
 800d54c:	68fa      	ldr	r2, [r7, #12]
 800d54e:	440a      	add	r2, r1
 800d550:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d554:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d558:	6013      	str	r3, [r2, #0]
 800d55a:	e027      	b.n	800d5ac <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800d55c:	68bb      	ldr	r3, [r7, #8]
 800d55e:	015a      	lsls	r2, r3, #5
 800d560:	68fb      	ldr	r3, [r7, #12]
 800d562:	4413      	add	r3, r2
 800d564:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d568:	681b      	ldr	r3, [r3, #0]
 800d56a:	68ba      	ldr	r2, [r7, #8]
 800d56c:	0151      	lsls	r1, r2, #5
 800d56e:	68fa      	ldr	r2, [r7, #12]
 800d570:	440a      	add	r2, r1
 800d572:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d576:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800d57a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800d57c:	683b      	ldr	r3, [r7, #0]
 800d57e:	78db      	ldrb	r3, [r3, #3]
 800d580:	2b03      	cmp	r3, #3
 800d582:	d003      	beq.n	800d58c <USB_EPClearStall+0x9e>
 800d584:	683b      	ldr	r3, [r7, #0]
 800d586:	78db      	ldrb	r3, [r3, #3]
 800d588:	2b02      	cmp	r3, #2
 800d58a:	d10f      	bne.n	800d5ac <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800d58c:	68bb      	ldr	r3, [r7, #8]
 800d58e:	015a      	lsls	r2, r3, #5
 800d590:	68fb      	ldr	r3, [r7, #12]
 800d592:	4413      	add	r3, r2
 800d594:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d598:	681b      	ldr	r3, [r3, #0]
 800d59a:	68ba      	ldr	r2, [r7, #8]
 800d59c:	0151      	lsls	r1, r2, #5
 800d59e:	68fa      	ldr	r2, [r7, #12]
 800d5a0:	440a      	add	r2, r1
 800d5a2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d5a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d5aa:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800d5ac:	2300      	movs	r3, #0
}
 800d5ae:	4618      	mov	r0, r3
 800d5b0:	3714      	adds	r7, #20
 800d5b2:	46bd      	mov	sp, r7
 800d5b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5b8:	4770      	bx	lr

0800d5ba <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800d5ba:	b480      	push	{r7}
 800d5bc:	b085      	sub	sp, #20
 800d5be:	af00      	add	r7, sp, #0
 800d5c0:	6078      	str	r0, [r7, #4]
 800d5c2:	460b      	mov	r3, r1
 800d5c4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d5c6:	687b      	ldr	r3, [r7, #4]
 800d5c8:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800d5ca:	68fb      	ldr	r3, [r7, #12]
 800d5cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d5d0:	681b      	ldr	r3, [r3, #0]
 800d5d2:	68fa      	ldr	r2, [r7, #12]
 800d5d4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800d5d8:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800d5dc:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800d5de:	68fb      	ldr	r3, [r7, #12]
 800d5e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d5e4:	681a      	ldr	r2, [r3, #0]
 800d5e6:	78fb      	ldrb	r3, [r7, #3]
 800d5e8:	011b      	lsls	r3, r3, #4
 800d5ea:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800d5ee:	68f9      	ldr	r1, [r7, #12]
 800d5f0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800d5f4:	4313      	orrs	r3, r2
 800d5f6:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800d5f8:	2300      	movs	r3, #0
}
 800d5fa:	4618      	mov	r0, r3
 800d5fc:	3714      	adds	r7, #20
 800d5fe:	46bd      	mov	sp, r7
 800d600:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d604:	4770      	bx	lr

0800d606 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800d606:	b580      	push	{r7, lr}
 800d608:	b084      	sub	sp, #16
 800d60a:	af00      	add	r7, sp, #0
 800d60c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d60e:	687b      	ldr	r3, [r7, #4]
 800d610:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800d612:	68fb      	ldr	r3, [r7, #12]
 800d614:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d618:	685b      	ldr	r3, [r3, #4]
 800d61a:	68fa      	ldr	r2, [r7, #12]
 800d61c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800d620:	f023 0302 	bic.w	r3, r3, #2
 800d624:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 800d626:	2003      	movs	r0, #3
 800d628:	f7f7 fce2 	bl	8004ff0 <HAL_Delay>

  return HAL_OK;
 800d62c:	2300      	movs	r3, #0
}
 800d62e:	4618      	mov	r0, r3
 800d630:	3710      	adds	r7, #16
 800d632:	46bd      	mov	sp, r7
 800d634:	bd80      	pop	{r7, pc}

0800d636 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800d636:	b580      	push	{r7, lr}
 800d638:	b084      	sub	sp, #16
 800d63a:	af00      	add	r7, sp, #0
 800d63c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d63e:	687b      	ldr	r3, [r7, #4]
 800d640:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800d642:	68fb      	ldr	r3, [r7, #12]
 800d644:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d648:	685b      	ldr	r3, [r3, #4]
 800d64a:	68fa      	ldr	r2, [r7, #12]
 800d64c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800d650:	f043 0302 	orr.w	r3, r3, #2
 800d654:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 800d656:	2003      	movs	r0, #3
 800d658:	f7f7 fcca 	bl	8004ff0 <HAL_Delay>

  return HAL_OK;
 800d65c:	2300      	movs	r3, #0
}
 800d65e:	4618      	mov	r0, r3
 800d660:	3710      	adds	r7, #16
 800d662:	46bd      	mov	sp, r7
 800d664:	bd80      	pop	{r7, pc}

0800d666 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800d666:	b480      	push	{r7}
 800d668:	b085      	sub	sp, #20
 800d66a:	af00      	add	r7, sp, #0
 800d66c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800d66e:	687b      	ldr	r3, [r7, #4]
 800d670:	695b      	ldr	r3, [r3, #20]
 800d672:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800d674:	687b      	ldr	r3, [r7, #4]
 800d676:	699b      	ldr	r3, [r3, #24]
 800d678:	68fa      	ldr	r2, [r7, #12]
 800d67a:	4013      	ands	r3, r2
 800d67c:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800d67e:	68fb      	ldr	r3, [r7, #12]
}
 800d680:	4618      	mov	r0, r3
 800d682:	3714      	adds	r7, #20
 800d684:	46bd      	mov	sp, r7
 800d686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d68a:	4770      	bx	lr

0800d68c <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800d68c:	b480      	push	{r7}
 800d68e:	b085      	sub	sp, #20
 800d690:	af00      	add	r7, sp, #0
 800d692:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d694:	687b      	ldr	r3, [r7, #4]
 800d696:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800d698:	68fb      	ldr	r3, [r7, #12]
 800d69a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d69e:	699b      	ldr	r3, [r3, #24]
 800d6a0:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800d6a2:	68fb      	ldr	r3, [r7, #12]
 800d6a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d6a8:	69db      	ldr	r3, [r3, #28]
 800d6aa:	68ba      	ldr	r2, [r7, #8]
 800d6ac:	4013      	ands	r3, r2
 800d6ae:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800d6b0:	68bb      	ldr	r3, [r7, #8]
 800d6b2:	0c1b      	lsrs	r3, r3, #16
}
 800d6b4:	4618      	mov	r0, r3
 800d6b6:	3714      	adds	r7, #20
 800d6b8:	46bd      	mov	sp, r7
 800d6ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6be:	4770      	bx	lr

0800d6c0 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800d6c0:	b480      	push	{r7}
 800d6c2:	b085      	sub	sp, #20
 800d6c4:	af00      	add	r7, sp, #0
 800d6c6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d6c8:	687b      	ldr	r3, [r7, #4]
 800d6ca:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800d6cc:	68fb      	ldr	r3, [r7, #12]
 800d6ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d6d2:	699b      	ldr	r3, [r3, #24]
 800d6d4:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800d6d6:	68fb      	ldr	r3, [r7, #12]
 800d6d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d6dc:	69db      	ldr	r3, [r3, #28]
 800d6de:	68ba      	ldr	r2, [r7, #8]
 800d6e0:	4013      	ands	r3, r2
 800d6e2:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800d6e4:	68bb      	ldr	r3, [r7, #8]
 800d6e6:	b29b      	uxth	r3, r3
}
 800d6e8:	4618      	mov	r0, r3
 800d6ea:	3714      	adds	r7, #20
 800d6ec:	46bd      	mov	sp, r7
 800d6ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6f2:	4770      	bx	lr

0800d6f4 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800d6f4:	b480      	push	{r7}
 800d6f6:	b085      	sub	sp, #20
 800d6f8:	af00      	add	r7, sp, #0
 800d6fa:	6078      	str	r0, [r7, #4]
 800d6fc:	460b      	mov	r3, r1
 800d6fe:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d700:	687b      	ldr	r3, [r7, #4]
 800d702:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800d704:	78fb      	ldrb	r3, [r7, #3]
 800d706:	015a      	lsls	r2, r3, #5
 800d708:	68fb      	ldr	r3, [r7, #12]
 800d70a:	4413      	add	r3, r2
 800d70c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d710:	689b      	ldr	r3, [r3, #8]
 800d712:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800d714:	68fb      	ldr	r3, [r7, #12]
 800d716:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d71a:	695b      	ldr	r3, [r3, #20]
 800d71c:	68ba      	ldr	r2, [r7, #8]
 800d71e:	4013      	ands	r3, r2
 800d720:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800d722:	68bb      	ldr	r3, [r7, #8]
}
 800d724:	4618      	mov	r0, r3
 800d726:	3714      	adds	r7, #20
 800d728:	46bd      	mov	sp, r7
 800d72a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d72e:	4770      	bx	lr

0800d730 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800d730:	b480      	push	{r7}
 800d732:	b087      	sub	sp, #28
 800d734:	af00      	add	r7, sp, #0
 800d736:	6078      	str	r0, [r7, #4]
 800d738:	460b      	mov	r3, r1
 800d73a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d73c:	687b      	ldr	r3, [r7, #4]
 800d73e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 800d740:	697b      	ldr	r3, [r7, #20]
 800d742:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d746:	691b      	ldr	r3, [r3, #16]
 800d748:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800d74a:	697b      	ldr	r3, [r7, #20]
 800d74c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d750:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d752:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800d754:	78fb      	ldrb	r3, [r7, #3]
 800d756:	f003 030f 	and.w	r3, r3, #15
 800d75a:	68fa      	ldr	r2, [r7, #12]
 800d75c:	fa22 f303 	lsr.w	r3, r2, r3
 800d760:	01db      	lsls	r3, r3, #7
 800d762:	b2db      	uxtb	r3, r3
 800d764:	693a      	ldr	r2, [r7, #16]
 800d766:	4313      	orrs	r3, r2
 800d768:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800d76a:	78fb      	ldrb	r3, [r7, #3]
 800d76c:	015a      	lsls	r2, r3, #5
 800d76e:	697b      	ldr	r3, [r7, #20]
 800d770:	4413      	add	r3, r2
 800d772:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d776:	689b      	ldr	r3, [r3, #8]
 800d778:	693a      	ldr	r2, [r7, #16]
 800d77a:	4013      	ands	r3, r2
 800d77c:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800d77e:	68bb      	ldr	r3, [r7, #8]
}
 800d780:	4618      	mov	r0, r3
 800d782:	371c      	adds	r7, #28
 800d784:	46bd      	mov	sp, r7
 800d786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d78a:	4770      	bx	lr

0800d78c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800d78c:	b480      	push	{r7}
 800d78e:	b083      	sub	sp, #12
 800d790:	af00      	add	r7, sp, #0
 800d792:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800d794:	687b      	ldr	r3, [r7, #4]
 800d796:	695b      	ldr	r3, [r3, #20]
 800d798:	f003 0301 	and.w	r3, r3, #1
}
 800d79c:	4618      	mov	r0, r3
 800d79e:	370c      	adds	r7, #12
 800d7a0:	46bd      	mov	sp, r7
 800d7a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7a6:	4770      	bx	lr

0800d7a8 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800d7a8:	b480      	push	{r7}
 800d7aa:	b085      	sub	sp, #20
 800d7ac:	af00      	add	r7, sp, #0
 800d7ae:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d7b0:	687b      	ldr	r3, [r7, #4]
 800d7b2:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP based on the enumeration speed */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800d7b4:	68fb      	ldr	r3, [r7, #12]
 800d7b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d7ba:	681b      	ldr	r3, [r3, #0]
 800d7bc:	68fa      	ldr	r2, [r7, #12]
 800d7be:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d7c2:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800d7c6:	f023 0307 	bic.w	r3, r3, #7
 800d7ca:	6013      	str	r3, [r2, #0]

  if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_LS_PHY_6MHZ)
 800d7cc:	68fb      	ldr	r3, [r7, #12]
 800d7ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d7d2:	689b      	ldr	r3, [r3, #8]
 800d7d4:	f003 0306 	and.w	r3, r3, #6
 800d7d8:	2b04      	cmp	r3, #4
 800d7da:	d109      	bne.n	800d7f0 <USB_ActivateSetup+0x48>
  {
    USBx_INEP(0U)->DIEPCTL |= 3U;
 800d7dc:	68fb      	ldr	r3, [r7, #12]
 800d7de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d7e2:	681b      	ldr	r3, [r3, #0]
 800d7e4:	68fa      	ldr	r2, [r7, #12]
 800d7e6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d7ea:	f043 0303 	orr.w	r3, r3, #3
 800d7ee:	6013      	str	r3, [r2, #0]
  }
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800d7f0:	68fb      	ldr	r3, [r7, #12]
 800d7f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d7f6:	685b      	ldr	r3, [r3, #4]
 800d7f8:	68fa      	ldr	r2, [r7, #12]
 800d7fa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800d7fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d802:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800d804:	2300      	movs	r3, #0
}
 800d806:	4618      	mov	r0, r3
 800d808:	3714      	adds	r7, #20
 800d80a:	46bd      	mov	sp, r7
 800d80c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d810:	4770      	bx	lr
	...

0800d814 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800d814:	b480      	push	{r7}
 800d816:	b087      	sub	sp, #28
 800d818:	af00      	add	r7, sp, #0
 800d81a:	60f8      	str	r0, [r7, #12]
 800d81c:	460b      	mov	r3, r1
 800d81e:	607a      	str	r2, [r7, #4]
 800d820:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d822:	68fb      	ldr	r3, [r7, #12]
 800d824:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800d826:	68fb      	ldr	r3, [r7, #12]
 800d828:	333c      	adds	r3, #60	; 0x3c
 800d82a:	3304      	adds	r3, #4
 800d82c:	681b      	ldr	r3, [r3, #0]
 800d82e:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800d830:	693b      	ldr	r3, [r7, #16]
 800d832:	4a26      	ldr	r2, [pc, #152]	; (800d8cc <USB_EP0_OutStart+0xb8>)
 800d834:	4293      	cmp	r3, r2
 800d836:	d90a      	bls.n	800d84e <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800d838:	697b      	ldr	r3, [r7, #20]
 800d83a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d83e:	681b      	ldr	r3, [r3, #0]
 800d840:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800d844:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800d848:	d101      	bne.n	800d84e <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800d84a:	2300      	movs	r3, #0
 800d84c:	e037      	b.n	800d8be <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800d84e:	697b      	ldr	r3, [r7, #20]
 800d850:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d854:	461a      	mov	r2, r3
 800d856:	2300      	movs	r3, #0
 800d858:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800d85a:	697b      	ldr	r3, [r7, #20]
 800d85c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d860:	691b      	ldr	r3, [r3, #16]
 800d862:	697a      	ldr	r2, [r7, #20]
 800d864:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d868:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800d86c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800d86e:	697b      	ldr	r3, [r7, #20]
 800d870:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d874:	691b      	ldr	r3, [r3, #16]
 800d876:	697a      	ldr	r2, [r7, #20]
 800d878:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d87c:	f043 0318 	orr.w	r3, r3, #24
 800d880:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800d882:	697b      	ldr	r3, [r7, #20]
 800d884:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d888:	691b      	ldr	r3, [r3, #16]
 800d88a:	697a      	ldr	r2, [r7, #20]
 800d88c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d890:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800d894:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800d896:	7afb      	ldrb	r3, [r7, #11]
 800d898:	2b01      	cmp	r3, #1
 800d89a:	d10f      	bne.n	800d8bc <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800d89c:	697b      	ldr	r3, [r7, #20]
 800d89e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d8a2:	461a      	mov	r2, r3
 800d8a4:	687b      	ldr	r3, [r7, #4]
 800d8a6:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800d8a8:	697b      	ldr	r3, [r7, #20]
 800d8aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d8ae:	681b      	ldr	r3, [r3, #0]
 800d8b0:	697a      	ldr	r2, [r7, #20]
 800d8b2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d8b6:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800d8ba:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800d8bc:	2300      	movs	r3, #0
}
 800d8be:	4618      	mov	r0, r3
 800d8c0:	371c      	adds	r7, #28
 800d8c2:	46bd      	mov	sp, r7
 800d8c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8c8:	4770      	bx	lr
 800d8ca:	bf00      	nop
 800d8cc:	4f54300a 	.word	0x4f54300a

0800d8d0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800d8d0:	b480      	push	{r7}
 800d8d2:	b085      	sub	sp, #20
 800d8d4:	af00      	add	r7, sp, #0
 800d8d6:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800d8d8:	2300      	movs	r3, #0
 800d8da:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800d8dc:	68fb      	ldr	r3, [r7, #12]
 800d8de:	3301      	adds	r3, #1
 800d8e0:	60fb      	str	r3, [r7, #12]
 800d8e2:	68fb      	ldr	r3, [r7, #12]
 800d8e4:	4a13      	ldr	r2, [pc, #76]	; (800d934 <USB_CoreReset+0x64>)
 800d8e6:	4293      	cmp	r3, r2
 800d8e8:	d901      	bls.n	800d8ee <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800d8ea:	2303      	movs	r3, #3
 800d8ec:	e01b      	b.n	800d926 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800d8ee:	687b      	ldr	r3, [r7, #4]
 800d8f0:	691b      	ldr	r3, [r3, #16]
 800d8f2:	2b00      	cmp	r3, #0
 800d8f4:	daf2      	bge.n	800d8dc <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800d8f6:	2300      	movs	r3, #0
 800d8f8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800d8fa:	687b      	ldr	r3, [r7, #4]
 800d8fc:	691b      	ldr	r3, [r3, #16]
 800d8fe:	f043 0201 	orr.w	r2, r3, #1
 800d902:	687b      	ldr	r3, [r7, #4]
 800d904:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800d906:	68fb      	ldr	r3, [r7, #12]
 800d908:	3301      	adds	r3, #1
 800d90a:	60fb      	str	r3, [r7, #12]
 800d90c:	68fb      	ldr	r3, [r7, #12]
 800d90e:	4a09      	ldr	r2, [pc, #36]	; (800d934 <USB_CoreReset+0x64>)
 800d910:	4293      	cmp	r3, r2
 800d912:	d901      	bls.n	800d918 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800d914:	2303      	movs	r3, #3
 800d916:	e006      	b.n	800d926 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800d918:	687b      	ldr	r3, [r7, #4]
 800d91a:	691b      	ldr	r3, [r3, #16]
 800d91c:	f003 0301 	and.w	r3, r3, #1
 800d920:	2b01      	cmp	r3, #1
 800d922:	d0f0      	beq.n	800d906 <USB_CoreReset+0x36>

  return HAL_OK;
 800d924:	2300      	movs	r3, #0
}
 800d926:	4618      	mov	r0, r3
 800d928:	3714      	adds	r7, #20
 800d92a:	46bd      	mov	sp, r7
 800d92c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d930:	4770      	bx	lr
 800d932:	bf00      	nop
 800d934:	00030d40 	.word	0x00030d40

0800d938 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */    

void MX_FATFS_Init(void) 
{
 800d938:	b580      	push	{r7, lr}
 800d93a:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800d93c:	4904      	ldr	r1, [pc, #16]	; (800d950 <MX_FATFS_Init+0x18>)
 800d93e:	4805      	ldr	r0, [pc, #20]	; (800d954 <MX_FATFS_Init+0x1c>)
 800d940:	f001 fe36 	bl	800f5b0 <FATFS_LinkDriver>
 800d944:	4603      	mov	r3, r0
 800d946:	461a      	mov	r2, r3
 800d948:	4b03      	ldr	r3, [pc, #12]	; (800d958 <MX_FATFS_Init+0x20>)
 800d94a:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */     
  /* USER CODE END Init */
}
 800d94c:	bf00      	nop
 800d94e:	bd80      	pop	{r7, pc}
 800d950:	2000119c 	.word	0x2000119c
 800d954:	080159e8 	.word	0x080159e8
 800d958:	20001198 	.word	0x20001198

0800d95c <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800d95c:	b580      	push	{r7, lr}
 800d95e:	b082      	sub	sp, #8
 800d960:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800d962:	2300      	movs	r3, #0
 800d964:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800d966:	f000 f871 	bl	800da4c <BSP_SD_IsDetected>
 800d96a:	4603      	mov	r3, r0
 800d96c:	2b01      	cmp	r3, #1
 800d96e:	d001      	beq.n	800d974 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 800d970:	2301      	movs	r3, #1
 800d972:	e012      	b.n	800d99a <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 800d974:	480b      	ldr	r0, [pc, #44]	; (800d9a4 <BSP_SD_Init+0x48>)
 800d976:	f7fb f946 	bl	8008c06 <HAL_SD_Init>
 800d97a:	4603      	mov	r3, r0
 800d97c:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800d97e:	79fb      	ldrb	r3, [r7, #7]
 800d980:	2b00      	cmp	r3, #0
 800d982:	d109      	bne.n	800d998 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 800d984:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800d988:	4806      	ldr	r0, [pc, #24]	; (800d9a4 <BSP_SD_Init+0x48>)
 800d98a:	f7fb ff25 	bl	80097d8 <HAL_SD_ConfigWideBusOperation>
 800d98e:	4603      	mov	r3, r0
 800d990:	2b00      	cmp	r3, #0
 800d992:	d001      	beq.n	800d998 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 800d994:	2301      	movs	r3, #1
 800d996:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 800d998:	79fb      	ldrb	r3, [r7, #7]
}
 800d99a:	4618      	mov	r0, r3
 800d99c:	3708      	adds	r7, #8
 800d99e:	46bd      	mov	sp, r7
 800d9a0:	bd80      	pop	{r7, pc}
 800d9a2:	bf00      	nop
 800d9a4:	20000fb8 	.word	0x20000fb8

0800d9a8 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read 
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 800d9a8:	b580      	push	{r7, lr}
 800d9aa:	b086      	sub	sp, #24
 800d9ac:	af00      	add	r7, sp, #0
 800d9ae:	60f8      	str	r0, [r7, #12]
 800d9b0:	60b9      	str	r1, [r7, #8]
 800d9b2:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800d9b4:	2300      	movs	r3, #0
 800d9b6:	75fb      	strb	r3, [r7, #23]
  
  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 800d9b8:	687b      	ldr	r3, [r7, #4]
 800d9ba:	68ba      	ldr	r2, [r7, #8]
 800d9bc:	68f9      	ldr	r1, [r7, #12]
 800d9be:	4806      	ldr	r0, [pc, #24]	; (800d9d8 <BSP_SD_ReadBlocks_DMA+0x30>)
 800d9c0:	f7fb f9b2 	bl	8008d28 <HAL_SD_ReadBlocks_DMA>
 800d9c4:	4603      	mov	r3, r0
 800d9c6:	2b00      	cmp	r3, #0
 800d9c8:	d001      	beq.n	800d9ce <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800d9ca:	2301      	movs	r3, #1
 800d9cc:	75fb      	strb	r3, [r7, #23]
  }
  
  return sd_state; 
 800d9ce:	7dfb      	ldrb	r3, [r7, #23]
}
 800d9d0:	4618      	mov	r0, r3
 800d9d2:	3718      	adds	r7, #24
 800d9d4:	46bd      	mov	sp, r7
 800d9d6:	bd80      	pop	{r7, pc}
 800d9d8:	20000fb8 	.word	0x20000fb8

0800d9dc <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write 
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 800d9dc:	b580      	push	{r7, lr}
 800d9de:	b086      	sub	sp, #24
 800d9e0:	af00      	add	r7, sp, #0
 800d9e2:	60f8      	str	r0, [r7, #12]
 800d9e4:	60b9      	str	r1, [r7, #8]
 800d9e6:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800d9e8:	2300      	movs	r3, #0
 800d9ea:	75fb      	strb	r3, [r7, #23]
  
  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 800d9ec:	687b      	ldr	r3, [r7, #4]
 800d9ee:	68ba      	ldr	r2, [r7, #8]
 800d9f0:	68f9      	ldr	r1, [r7, #12]
 800d9f2:	4806      	ldr	r0, [pc, #24]	; (800da0c <BSP_SD_WriteBlocks_DMA+0x30>)
 800d9f4:	f7fb fa82 	bl	8008efc <HAL_SD_WriteBlocks_DMA>
 800d9f8:	4603      	mov	r3, r0
 800d9fa:	2b00      	cmp	r3, #0
 800d9fc:	d001      	beq.n	800da02 <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800d9fe:	2301      	movs	r3, #1
 800da00:	75fb      	strb	r3, [r7, #23]
  }
  
  return sd_state; 
 800da02:	7dfb      	ldrb	r3, [r7, #23]
}
 800da04:	4618      	mov	r0, r3
 800da06:	3718      	adds	r7, #24
 800da08:	46bd      	mov	sp, r7
 800da0a:	bd80      	pop	{r7, pc}
 800da0c:	20000fb8 	.word	0x20000fb8

0800da10 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800da10:	b580      	push	{r7, lr}
 800da12:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800da14:	4805      	ldr	r0, [pc, #20]	; (800da2c <BSP_SD_GetCardState+0x1c>)
 800da16:	f7fb ff5b 	bl	80098d0 <HAL_SD_GetCardState>
 800da1a:	4603      	mov	r3, r0
 800da1c:	2b04      	cmp	r3, #4
 800da1e:	bf14      	ite	ne
 800da20:	2301      	movne	r3, #1
 800da22:	2300      	moveq	r3, #0
 800da24:	b2db      	uxtb	r3, r3
}
 800da26:	4618      	mov	r0, r3
 800da28:	bd80      	pop	{r7, pc}
 800da2a:	bf00      	nop
 800da2c:	20000fb8 	.word	0x20000fb8

0800da30 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None 
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800da30:	b580      	push	{r7, lr}
 800da32:	b082      	sub	sp, #8
 800da34:	af00      	add	r7, sp, #0
 800da36:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 800da38:	6879      	ldr	r1, [r7, #4]
 800da3a:	4803      	ldr	r0, [pc, #12]	; (800da48 <BSP_SD_GetCardInfo+0x18>)
 800da3c:	f7fb fea0 	bl	8009780 <HAL_SD_GetCardInfo>
}
 800da40:	bf00      	nop
 800da42:	3708      	adds	r7, #8
 800da44:	46bd      	mov	sp, r7
 800da46:	bd80      	pop	{r7, pc}
 800da48:	20000fb8 	.word	0x20000fb8

0800da4c <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800da4c:	b580      	push	{r7, lr}
 800da4e:	b082      	sub	sp, #8
 800da50:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800da52:	2301      	movs	r3, #1
 800da54:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0) 
 800da56:	f000 f80b 	bl	800da70 <BSP_PlatformIsDetected>
 800da5a:	4603      	mov	r3, r0
 800da5c:	2b00      	cmp	r3, #0
 800da5e:	d101      	bne.n	800da64 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800da60:	2300      	movs	r3, #0
 800da62:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800da64:	79fb      	ldrb	r3, [r7, #7]
 800da66:	b2db      	uxtb	r3, r3
}
 800da68:	4618      	mov	r0, r3
 800da6a:	3708      	adds	r7, #8
 800da6c:	46bd      	mov	sp, r7
 800da6e:	bd80      	pop	{r7, pc}

0800da70 <BSP_PlatformIsDetected>:
  *
  ******************************************************************************
*/
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800da70:	b580      	push	{r7, lr}
 800da72:	b082      	sub	sp, #8
 800da74:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800da76:	2301      	movs	r3, #1
 800da78:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800da7a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800da7e:	4806      	ldr	r0, [pc, #24]	; (800da98 <BSP_PlatformIsDetected+0x28>)
 800da80:	f7f8 f920 	bl	8005cc4 <HAL_GPIO_ReadPin>
 800da84:	4603      	mov	r3, r0
 800da86:	2b00      	cmp	r3, #0
 800da88:	d001      	beq.n	800da8e <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 800da8a:	2300      	movs	r3, #0
 800da8c:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */ 
    return status;
 800da8e:	79fb      	ldrb	r3, [r7, #7]
}  
 800da90:	4618      	mov	r0, r3
 800da92:	3708      	adds	r7, #8
 800da94:	46bd      	mov	sp, r7
 800da96:	bd80      	pop	{r7, pc}
 800da98:	40020000 	.word	0x40020000

0800da9c <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 800da9c:	b580      	push	{r7, lr}
 800da9e:	b084      	sub	sp, #16
 800daa0:	af00      	add	r7, sp, #0
 800daa2:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 800daa4:	f7f7 fa98 	bl	8004fd8 <HAL_GetTick>
 800daa8:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 800daaa:	e006      	b.n	800daba <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800daac:	f7ff ffb0 	bl	800da10 <BSP_SD_GetCardState>
 800dab0:	4603      	mov	r3, r0
 800dab2:	2b00      	cmp	r3, #0
 800dab4:	d101      	bne.n	800daba <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 800dab6:	2300      	movs	r3, #0
 800dab8:	e009      	b.n	800dace <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 800daba:	f7f7 fa8d 	bl	8004fd8 <HAL_GetTick>
 800dabe:	4602      	mov	r2, r0
 800dac0:	68fb      	ldr	r3, [r7, #12]
 800dac2:	1ad3      	subs	r3, r2, r3
 800dac4:	687a      	ldr	r2, [r7, #4]
 800dac6:	429a      	cmp	r2, r3
 800dac8:	d8f0      	bhi.n	800daac <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 800daca:	f04f 33ff 	mov.w	r3, #4294967295
}
 800dace:	4618      	mov	r0, r3
 800dad0:	3710      	adds	r7, #16
 800dad2:	46bd      	mov	sp, r7
 800dad4:	bd80      	pop	{r7, pc}
	...

0800dad8 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800dad8:	b580      	push	{r7, lr}
 800dada:	b082      	sub	sp, #8
 800dadc:	af00      	add	r7, sp, #0
 800dade:	4603      	mov	r3, r0
 800dae0:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800dae2:	4b0b      	ldr	r3, [pc, #44]	; (800db10 <SD_CheckStatus+0x38>)
 800dae4:	2201      	movs	r2, #1
 800dae6:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800dae8:	f7ff ff92 	bl	800da10 <BSP_SD_GetCardState>
 800daec:	4603      	mov	r3, r0
 800daee:	2b00      	cmp	r3, #0
 800daf0:	d107      	bne.n	800db02 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800daf2:	4b07      	ldr	r3, [pc, #28]	; (800db10 <SD_CheckStatus+0x38>)
 800daf4:	781b      	ldrb	r3, [r3, #0]
 800daf6:	b2db      	uxtb	r3, r3
 800daf8:	f023 0301 	bic.w	r3, r3, #1
 800dafc:	b2da      	uxtb	r2, r3
 800dafe:	4b04      	ldr	r3, [pc, #16]	; (800db10 <SD_CheckStatus+0x38>)
 800db00:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800db02:	4b03      	ldr	r3, [pc, #12]	; (800db10 <SD_CheckStatus+0x38>)
 800db04:	781b      	ldrb	r3, [r3, #0]
 800db06:	b2db      	uxtb	r3, r3
}
 800db08:	4618      	mov	r0, r3
 800db0a:	3708      	adds	r7, #8
 800db0c:	46bd      	mov	sp, r7
 800db0e:	bd80      	pop	{r7, pc}
 800db10:	20000009 	.word	0x20000009

0800db14 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800db14:	b580      	push	{r7, lr}
 800db16:	b082      	sub	sp, #8
 800db18:	af00      	add	r7, sp, #0
 800db1a:	4603      	mov	r3, r0
 800db1c:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800db1e:	f7ff ff1d 	bl	800d95c <BSP_SD_Init>
 800db22:	4603      	mov	r3, r0
 800db24:	2b00      	cmp	r3, #0
 800db26:	d107      	bne.n	800db38 <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 800db28:	79fb      	ldrb	r3, [r7, #7]
 800db2a:	4618      	mov	r0, r3
 800db2c:	f7ff ffd4 	bl	800dad8 <SD_CheckStatus>
 800db30:	4603      	mov	r3, r0
 800db32:	461a      	mov	r2, r3
 800db34:	4b04      	ldr	r3, [pc, #16]	; (800db48 <SD_initialize+0x34>)
 800db36:	701a      	strb	r2, [r3, #0]
  }

#else
  Stat = SD_CheckStatus(lun);
#endif
  return Stat;
 800db38:	4b03      	ldr	r3, [pc, #12]	; (800db48 <SD_initialize+0x34>)
 800db3a:	781b      	ldrb	r3, [r3, #0]
 800db3c:	b2db      	uxtb	r3, r3
}
 800db3e:	4618      	mov	r0, r3
 800db40:	3708      	adds	r7, #8
 800db42:	46bd      	mov	sp, r7
 800db44:	bd80      	pop	{r7, pc}
 800db46:	bf00      	nop
 800db48:	20000009 	.word	0x20000009

0800db4c <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800db4c:	b580      	push	{r7, lr}
 800db4e:	b082      	sub	sp, #8
 800db50:	af00      	add	r7, sp, #0
 800db52:	4603      	mov	r3, r0
 800db54:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800db56:	79fb      	ldrb	r3, [r7, #7]
 800db58:	4618      	mov	r0, r3
 800db5a:	f7ff ffbd 	bl	800dad8 <SD_CheckStatus>
 800db5e:	4603      	mov	r3, r0
}
 800db60:	4618      	mov	r0, r3
 800db62:	3708      	adds	r7, #8
 800db64:	46bd      	mov	sp, r7
 800db66:	bd80      	pop	{r7, pc}

0800db68 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
              
DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800db68:	b580      	push	{r7, lr}
 800db6a:	b088      	sub	sp, #32
 800db6c:	af00      	add	r7, sp, #0
 800db6e:	60b9      	str	r1, [r7, #8]
 800db70:	607a      	str	r2, [r7, #4]
 800db72:	603b      	str	r3, [r7, #0]
 800db74:	4603      	mov	r3, r0
 800db76:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800db78:	2301      	movs	r3, #1
 800db7a:	77fb      	strb	r3, [r7, #31]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800db7c:	f247 5030 	movw	r0, #30000	; 0x7530
 800db80:	f7ff ff8c 	bl	800da9c <SD_CheckStatusWithTimeout>
 800db84:	4603      	mov	r3, r0
 800db86:	2b00      	cmp	r3, #0
 800db88:	da01      	bge.n	800db8e <SD_read+0x26>
  {
    return res;
 800db8a:	7ffb      	ldrb	r3, [r7, #31]
 800db8c:	e08b      	b.n	800dca6 <SD_read+0x13e>
  }

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
 800db8e:	68bb      	ldr	r3, [r7, #8]
 800db90:	f003 0303 	and.w	r3, r3, #3
 800db94:	2b00      	cmp	r3, #0
 800db96:	f040 8085 	bne.w	800dca4 <SD_read+0x13c>
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 800db9a:	683a      	ldr	r2, [r7, #0]
 800db9c:	6879      	ldr	r1, [r7, #4]
 800db9e:	68b8      	ldr	r0, [r7, #8]
 800dba0:	f7ff ff02 	bl	800d9a8 <BSP_SD_ReadBlocks_DMA>
 800dba4:	4603      	mov	r3, r0
 800dba6:	2b00      	cmp	r3, #0
 800dba8:	d133      	bne.n	800dc12 <SD_read+0xaa>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 800dbaa:	4b41      	ldr	r3, [pc, #260]	; (800dcb0 <SD_read+0x148>)
 800dbac:	2200      	movs	r2, #0
 800dbae:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 800dbb0:	f7f7 fa12 	bl	8004fd8 <HAL_GetTick>
 800dbb4:	6178      	str	r0, [r7, #20]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800dbb6:	bf00      	nop
 800dbb8:	4b3d      	ldr	r3, [pc, #244]	; (800dcb0 <SD_read+0x148>)
 800dbba:	681b      	ldr	r3, [r3, #0]
 800dbbc:	2b00      	cmp	r3, #0
 800dbbe:	d108      	bne.n	800dbd2 <SD_read+0x6a>
 800dbc0:	f7f7 fa0a 	bl	8004fd8 <HAL_GetTick>
 800dbc4:	4602      	mov	r2, r0
 800dbc6:	697b      	ldr	r3, [r7, #20]
 800dbc8:	1ad3      	subs	r3, r2, r3
 800dbca:	f247 522f 	movw	r2, #29999	; 0x752f
 800dbce:	4293      	cmp	r3, r2
 800dbd0:	d9f2      	bls.n	800dbb8 <SD_read+0x50>
      {
      }
      /* incase of a timeout return error */
      if (ReadStatus == 0)
 800dbd2:	4b37      	ldr	r3, [pc, #220]	; (800dcb0 <SD_read+0x148>)
 800dbd4:	681b      	ldr	r3, [r3, #0]
 800dbd6:	2b00      	cmp	r3, #0
 800dbd8:	d102      	bne.n	800dbe0 <SD_read+0x78>
      {
        res = RES_ERROR;
 800dbda:	2301      	movs	r3, #1
 800dbdc:	77fb      	strb	r3, [r7, #31]
 800dbde:	e061      	b.n	800dca4 <SD_read+0x13c>
      }
      else
      {
        ReadStatus = 0;
 800dbe0:	4b33      	ldr	r3, [pc, #204]	; (800dcb0 <SD_read+0x148>)
 800dbe2:	2200      	movs	r2, #0
 800dbe4:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 800dbe6:	f7f7 f9f7 	bl	8004fd8 <HAL_GetTick>
 800dbea:	6178      	str	r0, [r7, #20]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800dbec:	e007      	b.n	800dbfe <SD_read+0x96>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800dbee:	f7ff ff0f 	bl	800da10 <BSP_SD_GetCardState>
 800dbf2:	4603      	mov	r3, r0
 800dbf4:	2b00      	cmp	r3, #0
 800dbf6:	d102      	bne.n	800dbfe <SD_read+0x96>
          {
            res = RES_OK;
 800dbf8:	2300      	movs	r3, #0
 800dbfa:	77fb      	strb	r3, [r7, #31]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 800dbfc:	e052      	b.n	800dca4 <SD_read+0x13c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800dbfe:	f7f7 f9eb 	bl	8004fd8 <HAL_GetTick>
 800dc02:	4602      	mov	r2, r0
 800dc04:	697b      	ldr	r3, [r7, #20]
 800dc06:	1ad3      	subs	r3, r2, r3
 800dc08:	f247 522f 	movw	r2, #29999	; 0x752f
 800dc0c:	4293      	cmp	r3, r2
 800dc0e:	d9ee      	bls.n	800dbee <SD_read+0x86>
 800dc10:	e048      	b.n	800dca4 <SD_read+0x13c>
#if defined(ENABLE_SCRATCH_BUFFER)
    else {
      /* Slow path, fetch each sector a part and memcpy to destination buffer */
      int i;

      for (i = 0; i < count; i++) {
 800dc12:	2300      	movs	r3, #0
 800dc14:	61bb      	str	r3, [r7, #24]
 800dc16:	e034      	b.n	800dc82 <SD_read+0x11a>
        ret = BSP_SD_ReadBlocks_DMA((uint32_t*)scratch, (uint32_t)sector++, 1);
 800dc18:	687b      	ldr	r3, [r7, #4]
 800dc1a:	1c5a      	adds	r2, r3, #1
 800dc1c:	607a      	str	r2, [r7, #4]
 800dc1e:	2201      	movs	r2, #1
 800dc20:	4619      	mov	r1, r3
 800dc22:	4824      	ldr	r0, [pc, #144]	; (800dcb4 <SD_read+0x14c>)
 800dc24:	f7ff fec0 	bl	800d9a8 <BSP_SD_ReadBlocks_DMA>
 800dc28:	4603      	mov	r3, r0
 800dc2a:	77bb      	strb	r3, [r7, #30]
        if (ret == MSD_OK) {
 800dc2c:	7fbb      	ldrb	r3, [r7, #30]
 800dc2e:	2b00      	cmp	r3, #0
 800dc30:	d12c      	bne.n	800dc8c <SD_read+0x124>
          /* wait until the read is successful or a timeout occurs */

          ReadStatus = 0;
 800dc32:	4b1f      	ldr	r3, [pc, #124]	; (800dcb0 <SD_read+0x148>)
 800dc34:	2200      	movs	r2, #0
 800dc36:	601a      	str	r2, [r3, #0]
          timeout = HAL_GetTick();
 800dc38:	f7f7 f9ce 	bl	8004fd8 <HAL_GetTick>
 800dc3c:	6178      	str	r0, [r7, #20]
          while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800dc3e:	bf00      	nop
 800dc40:	4b1b      	ldr	r3, [pc, #108]	; (800dcb0 <SD_read+0x148>)
 800dc42:	681b      	ldr	r3, [r3, #0]
 800dc44:	2b00      	cmp	r3, #0
 800dc46:	d108      	bne.n	800dc5a <SD_read+0xf2>
 800dc48:	f7f7 f9c6 	bl	8004fd8 <HAL_GetTick>
 800dc4c:	4602      	mov	r2, r0
 800dc4e:	697b      	ldr	r3, [r7, #20]
 800dc50:	1ad3      	subs	r3, r2, r3
 800dc52:	f247 522f 	movw	r2, #29999	; 0x752f
 800dc56:	4293      	cmp	r3, r2
 800dc58:	d9f2      	bls.n	800dc40 <SD_read+0xd8>
          {
          }
          if (ReadStatus == 0)
 800dc5a:	4b15      	ldr	r3, [pc, #84]	; (800dcb0 <SD_read+0x148>)
 800dc5c:	681b      	ldr	r3, [r3, #0]
 800dc5e:	2b00      	cmp	r3, #0
 800dc60:	d016      	beq.n	800dc90 <SD_read+0x128>
          *
          * invalidate the scratch buffer before the next read to get the actual data instead of the cached one
          */
          SCB_InvalidateDCache_by_Addr((uint32_t*)scratch, BLOCKSIZE);
#endif
          memcpy(buff, scratch, BLOCKSIZE);
 800dc62:	68bb      	ldr	r3, [r7, #8]
 800dc64:	4a13      	ldr	r2, [pc, #76]	; (800dcb4 <SD_read+0x14c>)
 800dc66:	4618      	mov	r0, r3
 800dc68:	4611      	mov	r1, r2
 800dc6a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800dc6e:	461a      	mov	r2, r3
 800dc70:	f002 fa0c 	bl	801008c <memcpy>
          buff += BLOCKSIZE;
 800dc74:	68bb      	ldr	r3, [r7, #8]
 800dc76:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800dc7a:	60bb      	str	r3, [r7, #8]
      for (i = 0; i < count; i++) {
 800dc7c:	69bb      	ldr	r3, [r7, #24]
 800dc7e:	3301      	adds	r3, #1
 800dc80:	61bb      	str	r3, [r7, #24]
 800dc82:	69bb      	ldr	r3, [r7, #24]
 800dc84:	683a      	ldr	r2, [r7, #0]
 800dc86:	429a      	cmp	r2, r3
 800dc88:	d8c6      	bhi.n	800dc18 <SD_read+0xb0>
 800dc8a:	e002      	b.n	800dc92 <SD_read+0x12a>
        }
        else
        {
          break;
 800dc8c:	bf00      	nop
 800dc8e:	e000      	b.n	800dc92 <SD_read+0x12a>
            break;
 800dc90:	bf00      	nop
        }
      }

      if ((i == count) && (ret == MSD_OK))
 800dc92:	69bb      	ldr	r3, [r7, #24]
 800dc94:	683a      	ldr	r2, [r7, #0]
 800dc96:	429a      	cmp	r2, r3
 800dc98:	d104      	bne.n	800dca4 <SD_read+0x13c>
 800dc9a:	7fbb      	ldrb	r3, [r7, #30]
 800dc9c:	2b00      	cmp	r3, #0
 800dc9e:	d101      	bne.n	800dca4 <SD_read+0x13c>
        res = RES_OK;
 800dca0:	2300      	movs	r3, #0
 800dca2:	77fb      	strb	r3, [r7, #31]
    }
#endif
  }

  return res;
 800dca4:	7ffb      	ldrb	r3, [r7, #31]
}
 800dca6:	4618      	mov	r0, r3
 800dca8:	3720      	adds	r7, #32
 800dcaa:	46bd      	mov	sp, r7
 800dcac:	bd80      	pop	{r7, pc}
 800dcae:	bf00      	nop
 800dcb0:	20000774 	.word	0x20000774
 800dcb4:	20000570 	.word	0x20000570

0800dcb8 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
              
DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800dcb8:	b580      	push	{r7, lr}
 800dcba:	b088      	sub	sp, #32
 800dcbc:	af00      	add	r7, sp, #0
 800dcbe:	60b9      	str	r1, [r7, #8]
 800dcc0:	607a      	str	r2, [r7, #4]
 800dcc2:	603b      	str	r3, [r7, #0]
 800dcc4:	4603      	mov	r3, r0
 800dcc6:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800dcc8:	2301      	movs	r3, #1
 800dcca:	77fb      	strb	r3, [r7, #31]
  uint32_t timeout;
  uint8_t ret;
  int i;

   WriteStatus = 0;
 800dccc:	4b4c      	ldr	r3, [pc, #304]	; (800de00 <SD_write+0x148>)
 800dcce:	2200      	movs	r2, #0
 800dcd0:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)   
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800dcd2:	f247 5030 	movw	r0, #30000	; 0x7530
 800dcd6:	f7ff fee1 	bl	800da9c <SD_CheckStatusWithTimeout>
 800dcda:	4603      	mov	r3, r0
 800dcdc:	2b00      	cmp	r3, #0
 800dcde:	da01      	bge.n	800dce4 <SD_write+0x2c>
  {
    return res;
 800dce0:	7ffb      	ldrb	r3, [r7, #31]
 800dce2:	e088      	b.n	800ddf6 <SD_write+0x13e>
  }

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
 800dce4:	68bb      	ldr	r3, [r7, #8]
 800dce6:	f003 0303 	and.w	r3, r3, #3
 800dcea:	2b00      	cmp	r3, #0
 800dcec:	f040 8082 	bne.w	800ddf4 <SD_write+0x13c>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 800dcf0:	683a      	ldr	r2, [r7, #0]
 800dcf2:	6879      	ldr	r1, [r7, #4]
 800dcf4:	68b8      	ldr	r0, [r7, #8]
 800dcf6:	f7ff fe71 	bl	800d9dc <BSP_SD_WriteBlocks_DMA>
 800dcfa:	4603      	mov	r3, r0
 800dcfc:	2b00      	cmp	r3, #0
 800dcfe:	d130      	bne.n	800dd62 <SD_write+0xaa>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 800dd00:	f7f7 f96a 	bl	8004fd8 <HAL_GetTick>
 800dd04:	6178      	str	r0, [r7, #20]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800dd06:	bf00      	nop
 800dd08:	4b3d      	ldr	r3, [pc, #244]	; (800de00 <SD_write+0x148>)
 800dd0a:	681b      	ldr	r3, [r3, #0]
 800dd0c:	2b00      	cmp	r3, #0
 800dd0e:	d108      	bne.n	800dd22 <SD_write+0x6a>
 800dd10:	f7f7 f962 	bl	8004fd8 <HAL_GetTick>
 800dd14:	4602      	mov	r2, r0
 800dd16:	697b      	ldr	r3, [r7, #20]
 800dd18:	1ad3      	subs	r3, r2, r3
 800dd1a:	f247 522f 	movw	r2, #29999	; 0x752f
 800dd1e:	4293      	cmp	r3, r2
 800dd20:	d9f2      	bls.n	800dd08 <SD_write+0x50>
      {
      }
      /* incase of a timeout return error */
      if (WriteStatus == 0)
 800dd22:	4b37      	ldr	r3, [pc, #220]	; (800de00 <SD_write+0x148>)
 800dd24:	681b      	ldr	r3, [r3, #0]
 800dd26:	2b00      	cmp	r3, #0
 800dd28:	d102      	bne.n	800dd30 <SD_write+0x78>
      {
        res = RES_ERROR;
 800dd2a:	2301      	movs	r3, #1
 800dd2c:	77fb      	strb	r3, [r7, #31]
 800dd2e:	e061      	b.n	800ddf4 <SD_write+0x13c>
      }
      else
      {
        WriteStatus = 0;
 800dd30:	4b33      	ldr	r3, [pc, #204]	; (800de00 <SD_write+0x148>)
 800dd32:	2200      	movs	r2, #0
 800dd34:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 800dd36:	f7f7 f94f 	bl	8004fd8 <HAL_GetTick>
 800dd3a:	6178      	str	r0, [r7, #20]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800dd3c:	e007      	b.n	800dd4e <SD_write+0x96>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800dd3e:	f7ff fe67 	bl	800da10 <BSP_SD_GetCardState>
 800dd42:	4603      	mov	r3, r0
 800dd44:	2b00      	cmp	r3, #0
 800dd46:	d102      	bne.n	800dd4e <SD_write+0x96>
          {
            res = RES_OK;
 800dd48:	2300      	movs	r3, #0
 800dd4a:	77fb      	strb	r3, [r7, #31]
            break;
 800dd4c:	e052      	b.n	800ddf4 <SD_write+0x13c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800dd4e:	f7f7 f943 	bl	8004fd8 <HAL_GetTick>
 800dd52:	4602      	mov	r2, r0
 800dd54:	697b      	ldr	r3, [r7, #20]
 800dd56:	1ad3      	subs	r3, r2, r3
 800dd58:	f247 522f 	movw	r2, #29999	; 0x752f
 800dd5c:	4293      	cmp	r3, r2
 800dd5e:	d9ee      	bls.n	800dd3e <SD_write+0x86>
 800dd60:	e048      	b.n	800ddf4 <SD_write+0x13c>
      * invalidate the scratch buffer before the next write to get the actual data instead of the cached one
      */
      SCB_InvalidateDCache_by_Addr((uint32_t*)scratch, BLOCKSIZE);
#endif

      for (i = 0; i < count; i++)
 800dd62:	2300      	movs	r3, #0
 800dd64:	61bb      	str	r3, [r7, #24]
 800dd66:	e034      	b.n	800ddd2 <SD_write+0x11a>
      {
        WriteStatus = 0;
 800dd68:	4b25      	ldr	r3, [pc, #148]	; (800de00 <SD_write+0x148>)
 800dd6a:	2200      	movs	r2, #0
 800dd6c:	601a      	str	r2, [r3, #0]
        ret = BSP_SD_WriteBlocks_DMA((uint32_t*)scratch, (uint32_t)sector++, 1);
 800dd6e:	687b      	ldr	r3, [r7, #4]
 800dd70:	1c5a      	adds	r2, r3, #1
 800dd72:	607a      	str	r2, [r7, #4]
 800dd74:	2201      	movs	r2, #1
 800dd76:	4619      	mov	r1, r3
 800dd78:	4822      	ldr	r0, [pc, #136]	; (800de04 <SD_write+0x14c>)
 800dd7a:	f7ff fe2f 	bl	800d9dc <BSP_SD_WriteBlocks_DMA>
 800dd7e:	4603      	mov	r3, r0
 800dd80:	77bb      	strb	r3, [r7, #30]
        if (ret == MSD_OK) {
 800dd82:	7fbb      	ldrb	r3, [r7, #30]
 800dd84:	2b00      	cmp	r3, #0
 800dd86:	d129      	bne.n	800dddc <SD_write+0x124>
          /* wait for a message from the queue or a timeout */
          timeout = HAL_GetTick();
 800dd88:	f7f7 f926 	bl	8004fd8 <HAL_GetTick>
 800dd8c:	6178      	str	r0, [r7, #20]
          while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800dd8e:	bf00      	nop
 800dd90:	4b1b      	ldr	r3, [pc, #108]	; (800de00 <SD_write+0x148>)
 800dd92:	681b      	ldr	r3, [r3, #0]
 800dd94:	2b00      	cmp	r3, #0
 800dd96:	d108      	bne.n	800ddaa <SD_write+0xf2>
 800dd98:	f7f7 f91e 	bl	8004fd8 <HAL_GetTick>
 800dd9c:	4602      	mov	r2, r0
 800dd9e:	697b      	ldr	r3, [r7, #20]
 800dda0:	1ad3      	subs	r3, r2, r3
 800dda2:	f247 522f 	movw	r2, #29999	; 0x752f
 800dda6:	4293      	cmp	r3, r2
 800dda8:	d9f2      	bls.n	800dd90 <SD_write+0xd8>
          {
          }
          if (WriteStatus == 0)
 800ddaa:	4b15      	ldr	r3, [pc, #84]	; (800de00 <SD_write+0x148>)
 800ddac:	681b      	ldr	r3, [r3, #0]
 800ddae:	2b00      	cmp	r3, #0
 800ddb0:	d016      	beq.n	800dde0 <SD_write+0x128>
          {
            break;
          }

          memcpy((void *)buff, (void *)scratch, BLOCKSIZE);
 800ddb2:	68bb      	ldr	r3, [r7, #8]
 800ddb4:	4a13      	ldr	r2, [pc, #76]	; (800de04 <SD_write+0x14c>)
 800ddb6:	4618      	mov	r0, r3
 800ddb8:	4611      	mov	r1, r2
 800ddba:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ddbe:	461a      	mov	r2, r3
 800ddc0:	f002 f964 	bl	801008c <memcpy>
          buff += BLOCKSIZE;
 800ddc4:	68bb      	ldr	r3, [r7, #8]
 800ddc6:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800ddca:	60bb      	str	r3, [r7, #8]
      for (i = 0; i < count; i++)
 800ddcc:	69bb      	ldr	r3, [r7, #24]
 800ddce:	3301      	adds	r3, #1
 800ddd0:	61bb      	str	r3, [r7, #24]
 800ddd2:	69bb      	ldr	r3, [r7, #24]
 800ddd4:	683a      	ldr	r2, [r7, #0]
 800ddd6:	429a      	cmp	r2, r3
 800ddd8:	d8c6      	bhi.n	800dd68 <SD_write+0xb0>
 800ddda:	e002      	b.n	800dde2 <SD_write+0x12a>
        }
        else
        {
          break;
 800dddc:	bf00      	nop
 800ddde:	e000      	b.n	800dde2 <SD_write+0x12a>
            break;
 800dde0:	bf00      	nop
        }
      }
      if ((i == count) && (ret == MSD_OK))
 800dde2:	69bb      	ldr	r3, [r7, #24]
 800dde4:	683a      	ldr	r2, [r7, #0]
 800dde6:	429a      	cmp	r2, r3
 800dde8:	d104      	bne.n	800ddf4 <SD_write+0x13c>
 800ddea:	7fbb      	ldrb	r3, [r7, #30]
 800ddec:	2b00      	cmp	r3, #0
 800ddee:	d101      	bne.n	800ddf4 <SD_write+0x13c>
        res = RES_OK;
 800ddf0:	2300      	movs	r3, #0
 800ddf2:	77fb      	strb	r3, [r7, #31]
    }

  }
  return res;
 800ddf4:	7ffb      	ldrb	r3, [r7, #31]
}
 800ddf6:	4618      	mov	r0, r3
 800ddf8:	3720      	adds	r7, #32
 800ddfa:	46bd      	mov	sp, r7
 800ddfc:	bd80      	pop	{r7, pc}
 800ddfe:	bf00      	nop
 800de00:	20000770 	.word	0x20000770
 800de04:	20000570 	.word	0x20000570

0800de08 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800de08:	b580      	push	{r7, lr}
 800de0a:	b08c      	sub	sp, #48	; 0x30
 800de0c:	af00      	add	r7, sp, #0
 800de0e:	4603      	mov	r3, r0
 800de10:	603a      	str	r2, [r7, #0]
 800de12:	71fb      	strb	r3, [r7, #7]
 800de14:	460b      	mov	r3, r1
 800de16:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800de18:	2301      	movs	r3, #1
 800de1a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800de1e:	4b25      	ldr	r3, [pc, #148]	; (800deb4 <SD_ioctl+0xac>)
 800de20:	781b      	ldrb	r3, [r3, #0]
 800de22:	b2db      	uxtb	r3, r3
 800de24:	f003 0301 	and.w	r3, r3, #1
 800de28:	2b00      	cmp	r3, #0
 800de2a:	d001      	beq.n	800de30 <SD_ioctl+0x28>
 800de2c:	2303      	movs	r3, #3
 800de2e:	e03c      	b.n	800deaa <SD_ioctl+0xa2>

  switch (cmd)
 800de30:	79bb      	ldrb	r3, [r7, #6]
 800de32:	2b03      	cmp	r3, #3
 800de34:	d834      	bhi.n	800dea0 <SD_ioctl+0x98>
 800de36:	a201      	add	r2, pc, #4	; (adr r2, 800de3c <SD_ioctl+0x34>)
 800de38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800de3c:	0800de4d 	.word	0x0800de4d
 800de40:	0800de55 	.word	0x0800de55
 800de44:	0800de6d 	.word	0x0800de6d
 800de48:	0800de87 	.word	0x0800de87
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800de4c:	2300      	movs	r3, #0
 800de4e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800de52:	e028      	b.n	800dea6 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800de54:	f107 030c 	add.w	r3, r7, #12
 800de58:	4618      	mov	r0, r3
 800de5a:	f7ff fde9 	bl	800da30 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800de5e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800de60:	683b      	ldr	r3, [r7, #0]
 800de62:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800de64:	2300      	movs	r3, #0
 800de66:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800de6a:	e01c      	b.n	800dea6 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800de6c:	f107 030c 	add.w	r3, r7, #12
 800de70:	4618      	mov	r0, r3
 800de72:	f7ff fddd 	bl	800da30 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800de76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de78:	b29a      	uxth	r2, r3
 800de7a:	683b      	ldr	r3, [r7, #0]
 800de7c:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800de7e:	2300      	movs	r3, #0
 800de80:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800de84:	e00f      	b.n	800dea6 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800de86:	f107 030c 	add.w	r3, r7, #12
 800de8a:	4618      	mov	r0, r3
 800de8c:	f7ff fdd0 	bl	800da30 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800de90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de92:	0a5a      	lsrs	r2, r3, #9
 800de94:	683b      	ldr	r3, [r7, #0]
 800de96:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800de98:	2300      	movs	r3, #0
 800de9a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800de9e:	e002      	b.n	800dea6 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800dea0:	2304      	movs	r3, #4
 800dea2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800dea6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800deaa:	4618      	mov	r0, r3
 800deac:	3730      	adds	r7, #48	; 0x30
 800deae:	46bd      	mov	sp, r7
 800deb0:	bd80      	pop	{r7, pc}
 800deb2:	bf00      	nop
 800deb4:	20000009 	.word	0x20000009

0800deb8 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init (USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800deb8:	b580      	push	{r7, lr}
 800deba:	b084      	sub	sp, #16
 800debc:	af00      	add	r7, sp, #0
 800debe:	6078      	str	r0, [r7, #4]
 800dec0:	460b      	mov	r3, r1
 800dec2:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800dec4:	2300      	movs	r3, #0
 800dec6:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if(pdev->dev_speed == USBD_SPEED_HIGH)
 800dec8:	687b      	ldr	r3, [r7, #4]
 800deca:	7c1b      	ldrb	r3, [r3, #16]
 800decc:	2b00      	cmp	r3, #0
 800dece:	d115      	bne.n	800defc <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800ded0:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ded4:	2202      	movs	r2, #2
 800ded6:	2181      	movs	r1, #129	; 0x81
 800ded8:	6878      	ldr	r0, [r7, #4]
 800deda:	f001 ff50 	bl	800fd7e <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800dede:	687b      	ldr	r3, [r7, #4]
 800dee0:	2201      	movs	r2, #1
 800dee2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800dee4:	f44f 7300 	mov.w	r3, #512	; 0x200
 800dee8:	2202      	movs	r2, #2
 800deea:	2101      	movs	r1, #1
 800deec:	6878      	ldr	r0, [r7, #4]
 800deee:	f001 ff46 	bl	800fd7e <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800def2:	687b      	ldr	r3, [r7, #4]
 800def4:	2201      	movs	r2, #1
 800def6:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
 800defa:	e012      	b.n	800df22 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800defc:	2340      	movs	r3, #64	; 0x40
 800defe:	2202      	movs	r2, #2
 800df00:	2181      	movs	r1, #129	; 0x81
 800df02:	6878      	ldr	r0, [r7, #4]
 800df04:	f001 ff3b 	bl	800fd7e <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800df08:	687b      	ldr	r3, [r7, #4]
 800df0a:	2201      	movs	r2, #1
 800df0c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800df0e:	2340      	movs	r3, #64	; 0x40
 800df10:	2202      	movs	r2, #2
 800df12:	2101      	movs	r1, #1
 800df14:	6878      	ldr	r0, [r7, #4]
 800df16:	f001 ff32 	bl	800fd7e <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800df1a:	687b      	ldr	r3, [r7, #4]
 800df1c:	2201      	movs	r2, #1
 800df1e:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800df22:	2308      	movs	r3, #8
 800df24:	2203      	movs	r2, #3
 800df26:	2182      	movs	r1, #130	; 0x82
 800df28:	6878      	ldr	r0, [r7, #4]
 800df2a:	f001 ff28 	bl	800fd7e <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800df2e:	687b      	ldr	r3, [r7, #4]
 800df30:	2201      	movs	r2, #1
 800df32:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof (USBD_CDC_HandleTypeDef));
 800df34:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800df38:	f002 f898 	bl	801006c <malloc>
 800df3c:	4603      	mov	r3, r0
 800df3e:	461a      	mov	r2, r3
 800df40:	687b      	ldr	r3, [r7, #4]
 800df42:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290

  if(pdev->pClassData == NULL)
 800df46:	687b      	ldr	r3, [r7, #4]
 800df48:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800df4c:	2b00      	cmp	r3, #0
 800df4e:	d102      	bne.n	800df56 <USBD_CDC_Init+0x9e>
  {
    ret = 1U;
 800df50:	2301      	movs	r3, #1
 800df52:	73fb      	strb	r3, [r7, #15]
 800df54:	e026      	b.n	800dfa4 <USBD_CDC_Init+0xec>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800df56:	687b      	ldr	r3, [r7, #4]
 800df58:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800df5c:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800df5e:	687b      	ldr	r3, [r7, #4]
 800df60:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800df64:	681b      	ldr	r3, [r3, #0]
 800df66:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 800df68:	68bb      	ldr	r3, [r7, #8]
 800df6a:	2200      	movs	r2, #0
 800df6c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 800df70:	68bb      	ldr	r3, [r7, #8]
 800df72:	2200      	movs	r2, #0
 800df74:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if(pdev->dev_speed == USBD_SPEED_HIGH)
 800df78:	687b      	ldr	r3, [r7, #4]
 800df7a:	7c1b      	ldrb	r3, [r3, #16]
 800df7c:	2b00      	cmp	r3, #0
 800df7e:	d109      	bne.n	800df94 <USBD_CDC_Init+0xdc>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800df80:	68bb      	ldr	r3, [r7, #8]
 800df82:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800df86:	f44f 7300 	mov.w	r3, #512	; 0x200
 800df8a:	2101      	movs	r1, #1
 800df8c:	6878      	ldr	r0, [r7, #4]
 800df8e:	f001 ffe7 	bl	800ff60 <USBD_LL_PrepareReceive>
 800df92:	e007      	b.n	800dfa4 <USBD_CDC_Init+0xec>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800df94:	68bb      	ldr	r3, [r7, #8]
 800df96:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800df9a:	2340      	movs	r3, #64	; 0x40
 800df9c:	2101      	movs	r1, #1
 800df9e:	6878      	ldr	r0, [r7, #4]
 800dfa0:	f001 ffde 	bl	800ff60 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 800dfa4:	7bfb      	ldrb	r3, [r7, #15]
}
 800dfa6:	4618      	mov	r0, r3
 800dfa8:	3710      	adds	r7, #16
 800dfaa:	46bd      	mov	sp, r7
 800dfac:	bd80      	pop	{r7, pc}

0800dfae <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit (USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800dfae:	b580      	push	{r7, lr}
 800dfb0:	b084      	sub	sp, #16
 800dfb2:	af00      	add	r7, sp, #0
 800dfb4:	6078      	str	r0, [r7, #4]
 800dfb6:	460b      	mov	r3, r1
 800dfb8:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800dfba:	2300      	movs	r3, #0
 800dfbc:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800dfbe:	2181      	movs	r1, #129	; 0x81
 800dfc0:	6878      	ldr	r0, [r7, #4]
 800dfc2:	f001 ff02 	bl	800fdca <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800dfc6:	687b      	ldr	r3, [r7, #4]
 800dfc8:	2200      	movs	r2, #0
 800dfca:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800dfcc:	2101      	movs	r1, #1
 800dfce:	6878      	ldr	r0, [r7, #4]
 800dfd0:	f001 fefb 	bl	800fdca <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800dfd4:	687b      	ldr	r3, [r7, #4]
 800dfd6:	2200      	movs	r2, #0
 800dfd8:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800dfdc:	2182      	movs	r1, #130	; 0x82
 800dfde:	6878      	ldr	r0, [r7, #4]
 800dfe0:	f001 fef3 	bl	800fdca <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800dfe4:	687b      	ldr	r3, [r7, #4]
 800dfe6:	2200      	movs	r2, #0
 800dfe8:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if(pdev->pClassData != NULL)
 800dfea:	687b      	ldr	r3, [r7, #4]
 800dfec:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800dff0:	2b00      	cmp	r3, #0
 800dff2:	d00e      	beq.n	800e012 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800dff4:	687b      	ldr	r3, [r7, #4]
 800dff6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800dffa:	685b      	ldr	r3, [r3, #4]
 800dffc:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 800dffe:	687b      	ldr	r3, [r7, #4]
 800e000:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800e004:	4618      	mov	r0, r3
 800e006:	f002 f839 	bl	801007c <free>
    pdev->pClassData = NULL;
 800e00a:	687b      	ldr	r3, [r7, #4]
 800e00c:	2200      	movs	r2, #0
 800e00e:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290
  }

  return ret;
 800e012:	7bfb      	ldrb	r3, [r7, #15]
}
 800e014:	4618      	mov	r0, r3
 800e016:	3710      	adds	r7, #16
 800e018:	46bd      	mov	sp, r7
 800e01a:	bd80      	pop	{r7, pc}

0800e01c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup (USBD_HandleTypeDef *pdev,
                                USBD_SetupReqTypedef *req)
{
 800e01c:	b580      	push	{r7, lr}
 800e01e:	b086      	sub	sp, #24
 800e020:	af00      	add	r7, sp, #0
 800e022:	6078      	str	r0, [r7, #4]
 800e024:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800e026:	687b      	ldr	r3, [r7, #4]
 800e028:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800e02c:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 800e02e:	2300      	movs	r3, #0
 800e030:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 800e032:	2300      	movs	r3, #0
 800e034:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 800e036:	2300      	movs	r3, #0
 800e038:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800e03a:	683b      	ldr	r3, [r7, #0]
 800e03c:	781b      	ldrb	r3, [r3, #0]
 800e03e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800e042:	2b00      	cmp	r3, #0
 800e044:	d039      	beq.n	800e0ba <USBD_CDC_Setup+0x9e>
 800e046:	2b20      	cmp	r3, #32
 800e048:	d17c      	bne.n	800e144 <USBD_CDC_Setup+0x128>
  {
  case USB_REQ_TYPE_CLASS :
    if (req->wLength)
 800e04a:	683b      	ldr	r3, [r7, #0]
 800e04c:	88db      	ldrh	r3, [r3, #6]
 800e04e:	2b00      	cmp	r3, #0
 800e050:	d029      	beq.n	800e0a6 <USBD_CDC_Setup+0x8a>
    {
      if (req->bmRequest & 0x80U)
 800e052:	683b      	ldr	r3, [r7, #0]
 800e054:	781b      	ldrb	r3, [r3, #0]
 800e056:	b25b      	sxtb	r3, r3
 800e058:	2b00      	cmp	r3, #0
 800e05a:	da11      	bge.n	800e080 <USBD_CDC_Setup+0x64>
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800e05c:	687b      	ldr	r3, [r7, #4]
 800e05e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800e062:	689b      	ldr	r3, [r3, #8]
 800e064:	683a      	ldr	r2, [r7, #0]
 800e066:	7850      	ldrb	r0, [r2, #1]
                                                          (uint8_t *)(void *)hcdc->data,
 800e068:	6939      	ldr	r1, [r7, #16]
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800e06a:	683a      	ldr	r2, [r7, #0]
 800e06c:	88d2      	ldrh	r2, [r2, #6]
 800e06e:	4798      	blx	r3
                                                          req->wLength);

          USBD_CtlSendData (pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800e070:	6939      	ldr	r1, [r7, #16]
 800e072:	683b      	ldr	r3, [r7, #0]
 800e074:	88db      	ldrh	r3, [r3, #6]
 800e076:	461a      	mov	r2, r3
 800e078:	6878      	ldr	r0, [r7, #4]
 800e07a:	f001 f9c9 	bl	800f410 <USBD_CtlSendData>
    else
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                        (uint8_t *)(void *)req, 0U);
    }
    break;
 800e07e:	e068      	b.n	800e152 <USBD_CDC_Setup+0x136>
        hcdc->CmdOpCode = req->bRequest;
 800e080:	683b      	ldr	r3, [r7, #0]
 800e082:	785a      	ldrb	r2, [r3, #1]
 800e084:	693b      	ldr	r3, [r7, #16]
 800e086:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
        hcdc->CmdLength = (uint8_t)req->wLength;
 800e08a:	683b      	ldr	r3, [r7, #0]
 800e08c:	88db      	ldrh	r3, [r3, #6]
 800e08e:	b2da      	uxtb	r2, r3
 800e090:	693b      	ldr	r3, [r7, #16]
 800e092:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
        USBD_CtlPrepareRx (pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800e096:	6939      	ldr	r1, [r7, #16]
 800e098:	683b      	ldr	r3, [r7, #0]
 800e09a:	88db      	ldrh	r3, [r3, #6]
 800e09c:	461a      	mov	r2, r3
 800e09e:	6878      	ldr	r0, [r7, #4]
 800e0a0:	f001 f9e4 	bl	800f46c <USBD_CtlPrepareRx>
    break;
 800e0a4:	e055      	b.n	800e152 <USBD_CDC_Setup+0x136>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800e0a6:	687b      	ldr	r3, [r7, #4]
 800e0a8:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800e0ac:	689b      	ldr	r3, [r3, #8]
 800e0ae:	683a      	ldr	r2, [r7, #0]
 800e0b0:	7850      	ldrb	r0, [r2, #1]
 800e0b2:	2200      	movs	r2, #0
 800e0b4:	6839      	ldr	r1, [r7, #0]
 800e0b6:	4798      	blx	r3
    break;
 800e0b8:	e04b      	b.n	800e152 <USBD_CDC_Setup+0x136>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800e0ba:	683b      	ldr	r3, [r7, #0]
 800e0bc:	785b      	ldrb	r3, [r3, #1]
 800e0be:	2b0a      	cmp	r3, #10
 800e0c0:	d017      	beq.n	800e0f2 <USBD_CDC_Setup+0xd6>
 800e0c2:	2b0b      	cmp	r3, #11
 800e0c4:	d029      	beq.n	800e11a <USBD_CDC_Setup+0xfe>
 800e0c6:	2b00      	cmp	r3, #0
 800e0c8:	d133      	bne.n	800e132 <USBD_CDC_Setup+0x116>
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e0ca:	687b      	ldr	r3, [r7, #4]
 800e0cc:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800e0d0:	2b03      	cmp	r3, #3
 800e0d2:	d107      	bne.n	800e0e4 <USBD_CDC_Setup+0xc8>
      {
        USBD_CtlSendData (pdev, (uint8_t *)(void *)&status_info, 2U);
 800e0d4:	f107 030c 	add.w	r3, r7, #12
 800e0d8:	2202      	movs	r2, #2
 800e0da:	4619      	mov	r1, r3
 800e0dc:	6878      	ldr	r0, [r7, #4]
 800e0de:	f001 f997 	bl	800f410 <USBD_CtlSendData>
      else
      {
        USBD_CtlError (pdev, req);
			  ret = USBD_FAIL;
      }
      break;
 800e0e2:	e02e      	b.n	800e142 <USBD_CDC_Setup+0x126>
        USBD_CtlError (pdev, req);
 800e0e4:	6839      	ldr	r1, [r7, #0]
 800e0e6:	6878      	ldr	r0, [r7, #4]
 800e0e8:	f001 f927 	bl	800f33a <USBD_CtlError>
			  ret = USBD_FAIL;
 800e0ec:	2302      	movs	r3, #2
 800e0ee:	75fb      	strb	r3, [r7, #23]
      break;
 800e0f0:	e027      	b.n	800e142 <USBD_CDC_Setup+0x126>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e0f2:	687b      	ldr	r3, [r7, #4]
 800e0f4:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800e0f8:	2b03      	cmp	r3, #3
 800e0fa:	d107      	bne.n	800e10c <USBD_CDC_Setup+0xf0>
      {
        USBD_CtlSendData (pdev, &ifalt, 1U);
 800e0fc:	f107 030f 	add.w	r3, r7, #15
 800e100:	2201      	movs	r2, #1
 800e102:	4619      	mov	r1, r3
 800e104:	6878      	ldr	r0, [r7, #4]
 800e106:	f001 f983 	bl	800f410 <USBD_CtlSendData>
      else
      {
        USBD_CtlError (pdev, req);
			  ret = USBD_FAIL;
      }
      break;
 800e10a:	e01a      	b.n	800e142 <USBD_CDC_Setup+0x126>
        USBD_CtlError (pdev, req);
 800e10c:	6839      	ldr	r1, [r7, #0]
 800e10e:	6878      	ldr	r0, [r7, #4]
 800e110:	f001 f913 	bl	800f33a <USBD_CtlError>
			  ret = USBD_FAIL;
 800e114:	2302      	movs	r3, #2
 800e116:	75fb      	strb	r3, [r7, #23]
      break;
 800e118:	e013      	b.n	800e142 <USBD_CDC_Setup+0x126>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800e11a:	687b      	ldr	r3, [r7, #4]
 800e11c:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800e120:	2b03      	cmp	r3, #3
 800e122:	d00d      	beq.n	800e140 <USBD_CDC_Setup+0x124>
      {
        USBD_CtlError (pdev, req);
 800e124:	6839      	ldr	r1, [r7, #0]
 800e126:	6878      	ldr	r0, [r7, #4]
 800e128:	f001 f907 	bl	800f33a <USBD_CtlError>
			  ret = USBD_FAIL;
 800e12c:	2302      	movs	r3, #2
 800e12e:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800e130:	e006      	b.n	800e140 <USBD_CDC_Setup+0x124>

    default:
      USBD_CtlError (pdev, req);
 800e132:	6839      	ldr	r1, [r7, #0]
 800e134:	6878      	ldr	r0, [r7, #4]
 800e136:	f001 f900 	bl	800f33a <USBD_CtlError>
      ret = USBD_FAIL;
 800e13a:	2302      	movs	r3, #2
 800e13c:	75fb      	strb	r3, [r7, #23]
      break;
 800e13e:	e000      	b.n	800e142 <USBD_CDC_Setup+0x126>
      break;
 800e140:	bf00      	nop
    }
    break;
 800e142:	e006      	b.n	800e152 <USBD_CDC_Setup+0x136>

  default:
    USBD_CtlError (pdev, req);
 800e144:	6839      	ldr	r1, [r7, #0]
 800e146:	6878      	ldr	r0, [r7, #4]
 800e148:	f001 f8f7 	bl	800f33a <USBD_CtlError>
    ret = USBD_FAIL;
 800e14c:	2302      	movs	r3, #2
 800e14e:	75fb      	strb	r3, [r7, #23]
    break;
 800e150:	bf00      	nop
  }

  return ret;
 800e152:	7dfb      	ldrb	r3, [r7, #23]
}
 800e154:	4618      	mov	r0, r3
 800e156:	3718      	adds	r7, #24
 800e158:	46bd      	mov	sp, r7
 800e15a:	bd80      	pop	{r7, pc}

0800e15c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800e15c:	b580      	push	{r7, lr}
 800e15e:	b084      	sub	sp, #16
 800e160:	af00      	add	r7, sp, #0
 800e162:	6078      	str	r0, [r7, #4]
 800e164:	460b      	mov	r3, r1
 800e166:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)pdev->pClassData;
 800e168:	687b      	ldr	r3, [r7, #4]
 800e16a:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800e16e:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800e170:	687b      	ldr	r3, [r7, #4]
 800e172:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800e176:	60bb      	str	r3, [r7, #8]

  if(pdev->pClassData != NULL)
 800e178:	687b      	ldr	r3, [r7, #4]
 800e17a:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800e17e:	2b00      	cmp	r3, #0
 800e180:	d03a      	beq.n	800e1f8 <USBD_CDC_DataIn+0x9c>
  {
    if((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800e182:	78fa      	ldrb	r2, [r7, #3]
 800e184:	6879      	ldr	r1, [r7, #4]
 800e186:	4613      	mov	r3, r2
 800e188:	009b      	lsls	r3, r3, #2
 800e18a:	4413      	add	r3, r2
 800e18c:	009b      	lsls	r3, r3, #2
 800e18e:	440b      	add	r3, r1
 800e190:	331c      	adds	r3, #28
 800e192:	681b      	ldr	r3, [r3, #0]
 800e194:	2b00      	cmp	r3, #0
 800e196:	d029      	beq.n	800e1ec <USBD_CDC_DataIn+0x90>
 800e198:	78fa      	ldrb	r2, [r7, #3]
 800e19a:	6879      	ldr	r1, [r7, #4]
 800e19c:	4613      	mov	r3, r2
 800e19e:	009b      	lsls	r3, r3, #2
 800e1a0:	4413      	add	r3, r2
 800e1a2:	009b      	lsls	r3, r3, #2
 800e1a4:	440b      	add	r3, r1
 800e1a6:	331c      	adds	r3, #28
 800e1a8:	681a      	ldr	r2, [r3, #0]
 800e1aa:	78f9      	ldrb	r1, [r7, #3]
 800e1ac:	68b8      	ldr	r0, [r7, #8]
 800e1ae:	460b      	mov	r3, r1
 800e1b0:	00db      	lsls	r3, r3, #3
 800e1b2:	1a5b      	subs	r3, r3, r1
 800e1b4:	009b      	lsls	r3, r3, #2
 800e1b6:	4403      	add	r3, r0
 800e1b8:	3344      	adds	r3, #68	; 0x44
 800e1ba:	681b      	ldr	r3, [r3, #0]
 800e1bc:	fbb2 f1f3 	udiv	r1, r2, r3
 800e1c0:	fb03 f301 	mul.w	r3, r3, r1
 800e1c4:	1ad3      	subs	r3, r2, r3
 800e1c6:	2b00      	cmp	r3, #0
 800e1c8:	d110      	bne.n	800e1ec <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 800e1ca:	78fa      	ldrb	r2, [r7, #3]
 800e1cc:	6879      	ldr	r1, [r7, #4]
 800e1ce:	4613      	mov	r3, r2
 800e1d0:	009b      	lsls	r3, r3, #2
 800e1d2:	4413      	add	r3, r2
 800e1d4:	009b      	lsls	r3, r3, #2
 800e1d6:	440b      	add	r3, r1
 800e1d8:	331c      	adds	r3, #28
 800e1da:	2200      	movs	r2, #0
 800e1dc:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit (pdev, epnum, NULL, 0U);
 800e1de:	78f9      	ldrb	r1, [r7, #3]
 800e1e0:	2300      	movs	r3, #0
 800e1e2:	2200      	movs	r2, #0
 800e1e4:	6878      	ldr	r0, [r7, #4]
 800e1e6:	f001 fe98 	bl	800ff1a <USBD_LL_Transmit>
 800e1ea:	e003      	b.n	800e1f4 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 800e1ec:	68fb      	ldr	r3, [r7, #12]
 800e1ee:	2200      	movs	r2, #0
 800e1f0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 800e1f4:	2300      	movs	r3, #0
 800e1f6:	e000      	b.n	800e1fa <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 800e1f8:	2302      	movs	r3, #2
  }
}
 800e1fa:	4618      	mov	r0, r3
 800e1fc:	3710      	adds	r7, #16
 800e1fe:	46bd      	mov	sp, r7
 800e200:	bd80      	pop	{r7, pc}

0800e202 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800e202:	b580      	push	{r7, lr}
 800e204:	b084      	sub	sp, #16
 800e206:	af00      	add	r7, sp, #0
 800e208:	6078      	str	r0, [r7, #4]
 800e20a:	460b      	mov	r3, r1
 800e20c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800e20e:	687b      	ldr	r3, [r7, #4]
 800e210:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800e214:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize (pdev, epnum);
 800e216:	78fb      	ldrb	r3, [r7, #3]
 800e218:	4619      	mov	r1, r3
 800e21a:	6878      	ldr	r0, [r7, #4]
 800e21c:	f001 fec3 	bl	800ffa6 <USBD_LL_GetRxDataSize>
 800e220:	4602      	mov	r2, r0
 800e222:	68fb      	ldr	r3, [r7, #12]
 800e224:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if(pdev->pClassData != NULL)
 800e228:	687b      	ldr	r3, [r7, #4]
 800e22a:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800e22e:	2b00      	cmp	r3, #0
 800e230:	d00d      	beq.n	800e24e <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800e232:	687b      	ldr	r3, [r7, #4]
 800e234:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800e238:	68db      	ldr	r3, [r3, #12]
 800e23a:	68fa      	ldr	r2, [r7, #12]
 800e23c:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800e240:	68fa      	ldr	r2, [r7, #12]
 800e242:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800e246:	4611      	mov	r1, r2
 800e248:	4798      	blx	r3

    return USBD_OK;
 800e24a:	2300      	movs	r3, #0
 800e24c:	e000      	b.n	800e250 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 800e24e:	2302      	movs	r3, #2
  }
}
 800e250:	4618      	mov	r0, r3
 800e252:	3710      	adds	r7, #16
 800e254:	46bd      	mov	sp, r7
 800e256:	bd80      	pop	{r7, pc}

0800e258 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady (USBD_HandleTypeDef *pdev)
{
 800e258:	b580      	push	{r7, lr}
 800e25a:	b084      	sub	sp, #16
 800e25c:	af00      	add	r7, sp, #0
 800e25e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800e260:	687b      	ldr	r3, [r7, #4]
 800e262:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800e266:	60fb      	str	r3, [r7, #12]

  if((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800e268:	687b      	ldr	r3, [r7, #4]
 800e26a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800e26e:	2b00      	cmp	r3, #0
 800e270:	d015      	beq.n	800e29e <USBD_CDC_EP0_RxReady+0x46>
 800e272:	68fb      	ldr	r3, [r7, #12]
 800e274:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800e278:	2bff      	cmp	r3, #255	; 0xff
 800e27a:	d010      	beq.n	800e29e <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800e27c:	687b      	ldr	r3, [r7, #4]
 800e27e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800e282:	689b      	ldr	r3, [r3, #8]
 800e284:	68fa      	ldr	r2, [r7, #12]
 800e286:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 800e28a:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800e28c:	68fa      	ldr	r2, [r7, #12]
 800e28e:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800e292:	b292      	uxth	r2, r2
 800e294:	4798      	blx	r3
      hcdc->CmdOpCode = 0xFFU;
 800e296:	68fb      	ldr	r3, [r7, #12]
 800e298:	22ff      	movs	r2, #255	; 0xff
 800e29a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 800e29e:	2300      	movs	r3, #0
}
 800e2a0:	4618      	mov	r0, r3
 800e2a2:	3710      	adds	r7, #16
 800e2a4:	46bd      	mov	sp, r7
 800e2a6:	bd80      	pop	{r7, pc}

0800e2a8 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc (uint16_t *length)
{
 800e2a8:	b480      	push	{r7}
 800e2aa:	b083      	sub	sp, #12
 800e2ac:	af00      	add	r7, sp, #0
 800e2ae:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_CfgFSDesc);
 800e2b0:	687b      	ldr	r3, [r7, #4]
 800e2b2:	2243      	movs	r2, #67	; 0x43
 800e2b4:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 800e2b6:	4b03      	ldr	r3, [pc, #12]	; (800e2c4 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800e2b8:	4618      	mov	r0, r3
 800e2ba:	370c      	adds	r7, #12
 800e2bc:	46bd      	mov	sp, r7
 800e2be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2c2:	4770      	bx	lr
 800e2c4:	20000094 	.word	0x20000094

0800e2c8 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc (uint16_t *length)
{
 800e2c8:	b480      	push	{r7}
 800e2ca:	b083      	sub	sp, #12
 800e2cc:	af00      	add	r7, sp, #0
 800e2ce:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_CfgHSDesc);
 800e2d0:	687b      	ldr	r3, [r7, #4]
 800e2d2:	2243      	movs	r2, #67	; 0x43
 800e2d4:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 800e2d6:	4b03      	ldr	r3, [pc, #12]	; (800e2e4 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800e2d8:	4618      	mov	r0, r3
 800e2da:	370c      	adds	r7, #12
 800e2dc:	46bd      	mov	sp, r7
 800e2de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2e2:	4770      	bx	lr
 800e2e4:	20000050 	.word	0x20000050

0800e2e8 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc (uint16_t *length)
{
 800e2e8:	b480      	push	{r7}
 800e2ea:	b083      	sub	sp, #12
 800e2ec:	af00      	add	r7, sp, #0
 800e2ee:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_OtherSpeedCfgDesc);
 800e2f0:	687b      	ldr	r3, [r7, #4]
 800e2f2:	2243      	movs	r2, #67	; 0x43
 800e2f4:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 800e2f6:	4b03      	ldr	r3, [pc, #12]	; (800e304 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800e2f8:	4618      	mov	r0, r3
 800e2fa:	370c      	adds	r7, #12
 800e2fc:	46bd      	mov	sp, r7
 800e2fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e302:	4770      	bx	lr
 800e304:	200000d8 	.word	0x200000d8

0800e308 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor (uint16_t *length)
{
 800e308:	b480      	push	{r7}
 800e30a:	b083      	sub	sp, #12
 800e30c:	af00      	add	r7, sp, #0
 800e30e:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_DeviceQualifierDesc);
 800e310:	687b      	ldr	r3, [r7, #4]
 800e312:	220a      	movs	r2, #10
 800e314:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 800e316:	4b03      	ldr	r3, [pc, #12]	; (800e324 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800e318:	4618      	mov	r0, r3
 800e31a:	370c      	adds	r7, #12
 800e31c:	46bd      	mov	sp, r7
 800e31e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e322:	4770      	bx	lr
 800e324:	2000000c 	.word	0x2000000c

0800e328 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface  (USBD_HandleTypeDef   *pdev,
                                      USBD_CDC_ItfTypeDef *fops)
{
 800e328:	b480      	push	{r7}
 800e32a:	b085      	sub	sp, #20
 800e32c:	af00      	add	r7, sp, #0
 800e32e:	6078      	str	r0, [r7, #4]
 800e330:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 800e332:	2302      	movs	r3, #2
 800e334:	73fb      	strb	r3, [r7, #15]

  if(fops != NULL)
 800e336:	683b      	ldr	r3, [r7, #0]
 800e338:	2b00      	cmp	r3, #0
 800e33a:	d005      	beq.n	800e348 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData= fops;
 800e33c:	687b      	ldr	r3, [r7, #4]
 800e33e:	683a      	ldr	r2, [r7, #0]
 800e340:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
    ret = USBD_OK;
 800e344:	2300      	movs	r3, #0
 800e346:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800e348:	7bfb      	ldrb	r3, [r7, #15]
}
 800e34a:	4618      	mov	r0, r3
 800e34c:	3714      	adds	r7, #20
 800e34e:	46bd      	mov	sp, r7
 800e350:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e354:	4770      	bx	lr

0800e356 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer  (USBD_HandleTypeDef   *pdev,
                                uint8_t  *pbuff,
                                uint16_t length)
{
 800e356:	b480      	push	{r7}
 800e358:	b087      	sub	sp, #28
 800e35a:	af00      	add	r7, sp, #0
 800e35c:	60f8      	str	r0, [r7, #12]
 800e35e:	60b9      	str	r1, [r7, #8]
 800e360:	4613      	mov	r3, r2
 800e362:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800e364:	68fb      	ldr	r3, [r7, #12]
 800e366:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800e36a:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800e36c:	697b      	ldr	r3, [r7, #20]
 800e36e:	68ba      	ldr	r2, [r7, #8]
 800e370:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800e374:	88fa      	ldrh	r2, [r7, #6]
 800e376:	697b      	ldr	r3, [r7, #20]
 800e378:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 800e37c:	2300      	movs	r3, #0
}
 800e37e:	4618      	mov	r0, r3
 800e380:	371c      	adds	r7, #28
 800e382:	46bd      	mov	sp, r7
 800e384:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e388:	4770      	bx	lr

0800e38a <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer  (USBD_HandleTypeDef   *pdev,
                                   uint8_t  *pbuff)
{
 800e38a:	b480      	push	{r7}
 800e38c:	b085      	sub	sp, #20
 800e38e:	af00      	add	r7, sp, #0
 800e390:	6078      	str	r0, [r7, #4]
 800e392:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800e394:	687b      	ldr	r3, [r7, #4]
 800e396:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800e39a:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 800e39c:	68fb      	ldr	r3, [r7, #12]
 800e39e:	683a      	ldr	r2, [r7, #0]
 800e3a0:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 800e3a4:	2300      	movs	r3, #0
}
 800e3a6:	4618      	mov	r0, r3
 800e3a8:	3714      	adds	r7, #20
 800e3aa:	46bd      	mov	sp, r7
 800e3ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3b0:	4770      	bx	lr

0800e3b2 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800e3b2:	b580      	push	{r7, lr}
 800e3b4:	b084      	sub	sp, #16
 800e3b6:	af00      	add	r7, sp, #0
 800e3b8:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800e3ba:	687b      	ldr	r3, [r7, #4]
 800e3bc:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800e3c0:	60fb      	str	r3, [r7, #12]

  if(pdev->pClassData != NULL)
 800e3c2:	687b      	ldr	r3, [r7, #4]
 800e3c4:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800e3c8:	2b00      	cmp	r3, #0
 800e3ca:	d01c      	beq.n	800e406 <USBD_CDC_TransmitPacket+0x54>
  {
    if(hcdc->TxState == 0U)
 800e3cc:	68fb      	ldr	r3, [r7, #12]
 800e3ce:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800e3d2:	2b00      	cmp	r3, #0
 800e3d4:	d115      	bne.n	800e402 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 800e3d6:	68fb      	ldr	r3, [r7, #12]
 800e3d8:	2201      	movs	r2, #1
 800e3da:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800e3de:	68fb      	ldr	r3, [r7, #12]
 800e3e0:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800e3e4:	687b      	ldr	r3, [r7, #4]
 800e3e6:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800e3e8:	68fb      	ldr	r3, [r7, #12]
 800e3ea:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 800e3ee:	68fb      	ldr	r3, [r7, #12]
 800e3f0:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800e3f4:	b29b      	uxth	r3, r3
 800e3f6:	2181      	movs	r1, #129	; 0x81
 800e3f8:	6878      	ldr	r0, [r7, #4]
 800e3fa:	f001 fd8e 	bl	800ff1a <USBD_LL_Transmit>

      return USBD_OK;
 800e3fe:	2300      	movs	r3, #0
 800e400:	e002      	b.n	800e408 <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 800e402:	2301      	movs	r3, #1
 800e404:	e000      	b.n	800e408 <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 800e406:	2302      	movs	r3, #2
  }
}
 800e408:	4618      	mov	r0, r3
 800e40a:	3710      	adds	r7, #16
 800e40c:	46bd      	mov	sp, r7
 800e40e:	bd80      	pop	{r7, pc}

0800e410 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800e410:	b580      	push	{r7, lr}
 800e412:	b084      	sub	sp, #16
 800e414:	af00      	add	r7, sp, #0
 800e416:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800e418:	687b      	ldr	r3, [r7, #4]
 800e41a:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800e41e:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if(pdev->pClassData != NULL)
 800e420:	687b      	ldr	r3, [r7, #4]
 800e422:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800e426:	2b00      	cmp	r3, #0
 800e428:	d017      	beq.n	800e45a <USBD_CDC_ReceivePacket+0x4a>
  {
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 800e42a:	687b      	ldr	r3, [r7, #4]
 800e42c:	7c1b      	ldrb	r3, [r3, #16]
 800e42e:	2b00      	cmp	r3, #0
 800e430:	d109      	bne.n	800e446 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800e432:	68fb      	ldr	r3, [r7, #12]
 800e434:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800e438:	f44f 7300 	mov.w	r3, #512	; 0x200
 800e43c:	2101      	movs	r1, #1
 800e43e:	6878      	ldr	r0, [r7, #4]
 800e440:	f001 fd8e 	bl	800ff60 <USBD_LL_PrepareReceive>
 800e444:	e007      	b.n	800e456 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800e446:	68fb      	ldr	r3, [r7, #12]
 800e448:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800e44c:	2340      	movs	r3, #64	; 0x40
 800e44e:	2101      	movs	r1, #1
 800e450:	6878      	ldr	r0, [r7, #4]
 800e452:	f001 fd85 	bl	800ff60 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 800e456:	2300      	movs	r3, #0
 800e458:	e000      	b.n	800e45c <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 800e45a:	2302      	movs	r3, #2
  }
}
 800e45c:	4618      	mov	r0, r3
 800e45e:	3710      	adds	r7, #16
 800e460:	46bd      	mov	sp, r7
 800e462:	bd80      	pop	{r7, pc}

0800e464 <USBD_Init>:
* @param  pdesc: Descriptor structure address
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev, USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800e464:	b580      	push	{r7, lr}
 800e466:	b084      	sub	sp, #16
 800e468:	af00      	add	r7, sp, #0
 800e46a:	60f8      	str	r0, [r7, #12]
 800e46c:	60b9      	str	r1, [r7, #8]
 800e46e:	4613      	mov	r3, r2
 800e470:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if(pdev == NULL)
 800e472:	68fb      	ldr	r3, [r7, #12]
 800e474:	2b00      	cmp	r3, #0
 800e476:	d101      	bne.n	800e47c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800e478:	2302      	movs	r3, #2
 800e47a:	e01a      	b.n	800e4b2 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if(pdev->pClass != NULL)
 800e47c:	68fb      	ldr	r3, [r7, #12]
 800e47e:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800e482:	2b00      	cmp	r3, #0
 800e484:	d003      	beq.n	800e48e <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800e486:	68fb      	ldr	r3, [r7, #12]
 800e488:	2200      	movs	r2, #0
 800e48a:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
  }

  /* Assign USBD Descriptors */
  if(pdesc != NULL)
 800e48e:	68bb      	ldr	r3, [r7, #8]
 800e490:	2b00      	cmp	r3, #0
 800e492:	d003      	beq.n	800e49c <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 800e494:	68fb      	ldr	r3, [r7, #12]
 800e496:	68ba      	ldr	r2, [r7, #8]
 800e498:	f8c3 2288 	str.w	r2, [r3, #648]	; 0x288
  }

  /* Set Device initial State */
  pdev->dev_state  = USBD_STATE_DEFAULT;
 800e49c:	68fb      	ldr	r3, [r7, #12]
 800e49e:	2201      	movs	r2, #1
 800e4a0:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->id = id;
 800e4a4:	68fb      	ldr	r3, [r7, #12]
 800e4a6:	79fa      	ldrb	r2, [r7, #7]
 800e4a8:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800e4aa:	68f8      	ldr	r0, [r7, #12]
 800e4ac:	f001 fc00 	bl	800fcb0 <USBD_LL_Init>

  return USBD_OK;
 800e4b0:	2300      	movs	r3, #0
}
 800e4b2:	4618      	mov	r0, r3
 800e4b4:	3710      	adds	r7, #16
 800e4b6:	46bd      	mov	sp, r7
 800e4b8:	bd80      	pop	{r7, pc}

0800e4ba <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800e4ba:	b480      	push	{r7}
 800e4bc:	b085      	sub	sp, #20
 800e4be:	af00      	add	r7, sp, #0
 800e4c0:	6078      	str	r0, [r7, #4]
 800e4c2:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef   status = USBD_OK;
 800e4c4:	2300      	movs	r3, #0
 800e4c6:	73fb      	strb	r3, [r7, #15]
  if(pclass != 0)
 800e4c8:	683b      	ldr	r3, [r7, #0]
 800e4ca:	2b00      	cmp	r3, #0
 800e4cc:	d006      	beq.n	800e4dc <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 800e4ce:	687b      	ldr	r3, [r7, #4]
 800e4d0:	683a      	ldr	r2, [r7, #0]
 800e4d2:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
    status = USBD_OK;
 800e4d6:	2300      	movs	r3, #0
 800e4d8:	73fb      	strb	r3, [r7, #15]
 800e4da:	e001      	b.n	800e4e0 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 800e4dc:	2302      	movs	r3, #2
 800e4de:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800e4e0:	7bfb      	ldrb	r3, [r7, #15]
}
 800e4e2:	4618      	mov	r0, r3
 800e4e4:	3714      	adds	r7, #20
 800e4e6:	46bd      	mov	sp, r7
 800e4e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4ec:	4770      	bx	lr

0800e4ee <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start  (USBD_HandleTypeDef *pdev)
{
 800e4ee:	b580      	push	{r7, lr}
 800e4f0:	b082      	sub	sp, #8
 800e4f2:	af00      	add	r7, sp, #0
 800e4f4:	6078      	str	r0, [r7, #4]

  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 800e4f6:	6878      	ldr	r0, [r7, #4]
 800e4f8:	f001 fc26 	bl	800fd48 <USBD_LL_Start>

  return USBD_OK;
 800e4fc:	2300      	movs	r3, #0
}
 800e4fe:	4618      	mov	r0, r3
 800e500:	3708      	adds	r7, #8
 800e502:	46bd      	mov	sp, r7
 800e504:	bd80      	pop	{r7, pc}

0800e506 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode (USBD_HandleTypeDef  *pdev)
{
 800e506:	b480      	push	{r7}
 800e508:	b083      	sub	sp, #12
 800e50a:	af00      	add	r7, sp, #0
 800e50c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800e50e:	2300      	movs	r3, #0
}
 800e510:	4618      	mov	r0, r3
 800e512:	370c      	adds	r7, #12
 800e514:	46bd      	mov	sp, r7
 800e516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e51a:	4770      	bx	lr

0800e51c <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800e51c:	b580      	push	{r7, lr}
 800e51e:	b084      	sub	sp, #16
 800e520:	af00      	add	r7, sp, #0
 800e522:	6078      	str	r0, [r7, #4]
 800e524:	460b      	mov	r3, r1
 800e526:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef   ret = USBD_FAIL;
 800e528:	2302      	movs	r3, #2
 800e52a:	73fb      	strb	r3, [r7, #15]

  if(pdev->pClass != NULL)
 800e52c:	687b      	ldr	r3, [r7, #4]
 800e52e:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800e532:	2b00      	cmp	r3, #0
 800e534:	d00c      	beq.n	800e550 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if(pdev->pClass->Init(pdev, cfgidx) == 0U)
 800e536:	687b      	ldr	r3, [r7, #4]
 800e538:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800e53c:	681b      	ldr	r3, [r3, #0]
 800e53e:	78fa      	ldrb	r2, [r7, #3]
 800e540:	4611      	mov	r1, r2
 800e542:	6878      	ldr	r0, [r7, #4]
 800e544:	4798      	blx	r3
 800e546:	4603      	mov	r3, r0
 800e548:	2b00      	cmp	r3, #0
 800e54a:	d101      	bne.n	800e550 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 800e54c:	2300      	movs	r3, #0
 800e54e:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 800e550:	7bfb      	ldrb	r3, [r7, #15]
}
 800e552:	4618      	mov	r0, r3
 800e554:	3710      	adds	r7, #16
 800e556:	46bd      	mov	sp, r7
 800e558:	bd80      	pop	{r7, pc}

0800e55a <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800e55a:	b580      	push	{r7, lr}
 800e55c:	b082      	sub	sp, #8
 800e55e:	af00      	add	r7, sp, #0
 800e560:	6078      	str	r0, [r7, #4]
 800e562:	460b      	mov	r3, r1
 800e564:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 800e566:	687b      	ldr	r3, [r7, #4]
 800e568:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800e56c:	685b      	ldr	r3, [r3, #4]
 800e56e:	78fa      	ldrb	r2, [r7, #3]
 800e570:	4611      	mov	r1, r2
 800e572:	6878      	ldr	r0, [r7, #4]
 800e574:	4798      	blx	r3
  return USBD_OK;
 800e576:	2300      	movs	r3, #0
}
 800e578:	4618      	mov	r0, r3
 800e57a:	3708      	adds	r7, #8
 800e57c:	46bd      	mov	sp, r7
 800e57e:	bd80      	pop	{r7, pc}

0800e580 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800e580:	b580      	push	{r7, lr}
 800e582:	b082      	sub	sp, #8
 800e584:	af00      	add	r7, sp, #0
 800e586:	6078      	str	r0, [r7, #4]
 800e588:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800e58a:	687b      	ldr	r3, [r7, #4]
 800e58c:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800e590:	6839      	ldr	r1, [r7, #0]
 800e592:	4618      	mov	r0, r3
 800e594:	f000 fe94 	bl	800f2c0 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800e598:	687b      	ldr	r3, [r7, #4]
 800e59a:	2201      	movs	r2, #1
 800e59c:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

  pdev->ep0_data_len = pdev->request.wLength;
 800e5a0:	687b      	ldr	r3, [r7, #4]
 800e5a2:	f8b3 3286 	ldrh.w	r3, [r3, #646]	; 0x286
 800e5a6:	461a      	mov	r2, r3
 800e5a8:	687b      	ldr	r3, [r7, #4]
 800e5aa:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

  switch (pdev->request.bmRequest & 0x1FU)
 800e5ae:	687b      	ldr	r3, [r7, #4]
 800e5b0:	f893 3280 	ldrb.w	r3, [r3, #640]	; 0x280
 800e5b4:	f003 031f 	and.w	r3, r3, #31
 800e5b8:	2b01      	cmp	r3, #1
 800e5ba:	d00c      	beq.n	800e5d6 <USBD_LL_SetupStage+0x56>
 800e5bc:	2b01      	cmp	r3, #1
 800e5be:	d302      	bcc.n	800e5c6 <USBD_LL_SetupStage+0x46>
 800e5c0:	2b02      	cmp	r3, #2
 800e5c2:	d010      	beq.n	800e5e6 <USBD_LL_SetupStage+0x66>
 800e5c4:	e017      	b.n	800e5f6 <USBD_LL_SetupStage+0x76>
  {
  case USB_REQ_RECIPIENT_DEVICE:
    USBD_StdDevReq (pdev, &pdev->request);
 800e5c6:	687b      	ldr	r3, [r7, #4]
 800e5c8:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800e5cc:	4619      	mov	r1, r3
 800e5ce:	6878      	ldr	r0, [r7, #4]
 800e5d0:	f000 fa04 	bl	800e9dc <USBD_StdDevReq>
    break;
 800e5d4:	e01a      	b.n	800e60c <USBD_LL_SetupStage+0x8c>

  case USB_REQ_RECIPIENT_INTERFACE:
    USBD_StdItfReq(pdev, &pdev->request);
 800e5d6:	687b      	ldr	r3, [r7, #4]
 800e5d8:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800e5dc:	4619      	mov	r1, r3
 800e5de:	6878      	ldr	r0, [r7, #4]
 800e5e0:	f000 fa66 	bl	800eab0 <USBD_StdItfReq>
    break;
 800e5e4:	e012      	b.n	800e60c <USBD_LL_SetupStage+0x8c>

  case USB_REQ_RECIPIENT_ENDPOINT:
    USBD_StdEPReq(pdev, &pdev->request);
 800e5e6:	687b      	ldr	r3, [r7, #4]
 800e5e8:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800e5ec:	4619      	mov	r1, r3
 800e5ee:	6878      	ldr	r0, [r7, #4]
 800e5f0:	f000 faa4 	bl	800eb3c <USBD_StdEPReq>
    break;
 800e5f4:	e00a      	b.n	800e60c <USBD_LL_SetupStage+0x8c>

  default:
    USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800e5f6:	687b      	ldr	r3, [r7, #4]
 800e5f8:	f893 3280 	ldrb.w	r3, [r3, #640]	; 0x280
 800e5fc:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800e600:	b2db      	uxtb	r3, r3
 800e602:	4619      	mov	r1, r3
 800e604:	6878      	ldr	r0, [r7, #4]
 800e606:	f001 fbff 	bl	800fe08 <USBD_LL_StallEP>
    break;
 800e60a:	bf00      	nop
  }

  return USBD_OK;
 800e60c:	2300      	movs	r3, #0
}
 800e60e:	4618      	mov	r0, r3
 800e610:	3708      	adds	r7, #8
 800e612:	46bd      	mov	sp, r7
 800e614:	bd80      	pop	{r7, pc}

0800e616 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800e616:	b580      	push	{r7, lr}
 800e618:	b086      	sub	sp, #24
 800e61a:	af00      	add	r7, sp, #0
 800e61c:	60f8      	str	r0, [r7, #12]
 800e61e:	460b      	mov	r3, r1
 800e620:	607a      	str	r2, [r7, #4]
 800e622:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef    *pep;

  if(epnum == 0U)
 800e624:	7afb      	ldrb	r3, [r7, #11]
 800e626:	2b00      	cmp	r3, #0
 800e628:	d14b      	bne.n	800e6c2 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 800e62a:	68fb      	ldr	r3, [r7, #12]
 800e62c:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 800e630:	617b      	str	r3, [r7, #20]

    if ( pdev->ep0_state == USBD_EP0_DATA_OUT)
 800e632:	68fb      	ldr	r3, [r7, #12]
 800e634:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 800e638:	2b03      	cmp	r3, #3
 800e63a:	d134      	bne.n	800e6a6 <USBD_LL_DataOutStage+0x90>
    {
      if(pep->rem_length > pep->maxpacket)
 800e63c:	697b      	ldr	r3, [r7, #20]
 800e63e:	68da      	ldr	r2, [r3, #12]
 800e640:	697b      	ldr	r3, [r7, #20]
 800e642:	691b      	ldr	r3, [r3, #16]
 800e644:	429a      	cmp	r2, r3
 800e646:	d919      	bls.n	800e67c <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -=  pep->maxpacket;
 800e648:	697b      	ldr	r3, [r7, #20]
 800e64a:	68da      	ldr	r2, [r3, #12]
 800e64c:	697b      	ldr	r3, [r7, #20]
 800e64e:	691b      	ldr	r3, [r3, #16]
 800e650:	1ad2      	subs	r2, r2, r3
 800e652:	697b      	ldr	r3, [r7, #20]
 800e654:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx (pdev,
                            pdata,
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800e656:	697b      	ldr	r3, [r7, #20]
 800e658:	68da      	ldr	r2, [r3, #12]
 800e65a:	697b      	ldr	r3, [r7, #20]
 800e65c:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx (pdev,
 800e65e:	429a      	cmp	r2, r3
 800e660:	d203      	bcs.n	800e66a <USBD_LL_DataOutStage+0x54>
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800e662:	697b      	ldr	r3, [r7, #20]
 800e664:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx (pdev,
 800e666:	b29b      	uxth	r3, r3
 800e668:	e002      	b.n	800e670 <USBD_LL_DataOutStage+0x5a>
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800e66a:	697b      	ldr	r3, [r7, #20]
 800e66c:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx (pdev,
 800e66e:	b29b      	uxth	r3, r3
 800e670:	461a      	mov	r2, r3
 800e672:	6879      	ldr	r1, [r7, #4]
 800e674:	68f8      	ldr	r0, [r7, #12]
 800e676:	f000 ff17 	bl	800f4a8 <USBD_CtlContinueRx>
 800e67a:	e038      	b.n	800e6ee <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if((pdev->pClass->EP0_RxReady != NULL)&&
 800e67c:	68fb      	ldr	r3, [r7, #12]
 800e67e:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800e682:	691b      	ldr	r3, [r3, #16]
 800e684:	2b00      	cmp	r3, #0
 800e686:	d00a      	beq.n	800e69e <USBD_LL_DataOutStage+0x88>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800e688:	68fb      	ldr	r3, [r7, #12]
 800e68a:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
        if((pdev->pClass->EP0_RxReady != NULL)&&
 800e68e:	2b03      	cmp	r3, #3
 800e690:	d105      	bne.n	800e69e <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800e692:	68fb      	ldr	r3, [r7, #12]
 800e694:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800e698:	691b      	ldr	r3, [r3, #16]
 800e69a:	68f8      	ldr	r0, [r7, #12]
 800e69c:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 800e69e:	68f8      	ldr	r0, [r7, #12]
 800e6a0:	f000 ff14 	bl	800f4cc <USBD_CtlSendStatus>
 800e6a4:	e023      	b.n	800e6ee <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 800e6a6:	68fb      	ldr	r3, [r7, #12]
 800e6a8:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 800e6ac:	2b05      	cmp	r3, #5
 800e6ae:	d11e      	bne.n	800e6ee <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 800e6b0:	68fb      	ldr	r3, [r7, #12]
 800e6b2:	2200      	movs	r2, #0
 800e6b4:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
        USBD_LL_StallEP(pdev, 0U);
 800e6b8:	2100      	movs	r1, #0
 800e6ba:	68f8      	ldr	r0, [r7, #12]
 800e6bc:	f001 fba4 	bl	800fe08 <USBD_LL_StallEP>
 800e6c0:	e015      	b.n	800e6ee <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if((pdev->pClass->DataOut != NULL) &&
 800e6c2:	68fb      	ldr	r3, [r7, #12]
 800e6c4:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800e6c8:	699b      	ldr	r3, [r3, #24]
 800e6ca:	2b00      	cmp	r3, #0
 800e6cc:	d00d      	beq.n	800e6ea <USBD_LL_DataOutStage+0xd4>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 800e6ce:	68fb      	ldr	r3, [r7, #12]
 800e6d0:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
  else if((pdev->pClass->DataOut != NULL) &&
 800e6d4:	2b03      	cmp	r3, #3
 800e6d6:	d108      	bne.n	800e6ea <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 800e6d8:	68fb      	ldr	r3, [r7, #12]
 800e6da:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800e6de:	699b      	ldr	r3, [r3, #24]
 800e6e0:	7afa      	ldrb	r2, [r7, #11]
 800e6e2:	4611      	mov	r1, r2
 800e6e4:	68f8      	ldr	r0, [r7, #12]
 800e6e6:	4798      	blx	r3
 800e6e8:	e001      	b.n	800e6ee <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800e6ea:	2302      	movs	r3, #2
 800e6ec:	e000      	b.n	800e6f0 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 800e6ee:	2300      	movs	r3, #0
}
 800e6f0:	4618      	mov	r0, r3
 800e6f2:	3718      	adds	r7, #24
 800e6f4:	46bd      	mov	sp, r7
 800e6f6:	bd80      	pop	{r7, pc}

0800e6f8 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev, uint8_t epnum,
                                       uint8_t *pdata)
{
 800e6f8:	b580      	push	{r7, lr}
 800e6fa:	b086      	sub	sp, #24
 800e6fc:	af00      	add	r7, sp, #0
 800e6fe:	60f8      	str	r0, [r7, #12]
 800e700:	460b      	mov	r3, r1
 800e702:	607a      	str	r2, [r7, #4]
 800e704:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if(epnum == 0U)
 800e706:	7afb      	ldrb	r3, [r7, #11]
 800e708:	2b00      	cmp	r3, #0
 800e70a:	d17f      	bne.n	800e80c <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 800e70c:	68fb      	ldr	r3, [r7, #12]
 800e70e:	3314      	adds	r3, #20
 800e710:	617b      	str	r3, [r7, #20]

    if ( pdev->ep0_state == USBD_EP0_DATA_IN)
 800e712:	68fb      	ldr	r3, [r7, #12]
 800e714:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 800e718:	2b02      	cmp	r3, #2
 800e71a:	d15c      	bne.n	800e7d6 <USBD_LL_DataInStage+0xde>
    {
      if(pep->rem_length > pep->maxpacket)
 800e71c:	697b      	ldr	r3, [r7, #20]
 800e71e:	68da      	ldr	r2, [r3, #12]
 800e720:	697b      	ldr	r3, [r7, #20]
 800e722:	691b      	ldr	r3, [r3, #16]
 800e724:	429a      	cmp	r2, r3
 800e726:	d915      	bls.n	800e754 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 800e728:	697b      	ldr	r3, [r7, #20]
 800e72a:	68da      	ldr	r2, [r3, #12]
 800e72c:	697b      	ldr	r3, [r7, #20]
 800e72e:	691b      	ldr	r3, [r3, #16]
 800e730:	1ad2      	subs	r2, r2, r3
 800e732:	697b      	ldr	r3, [r7, #20]
 800e734:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData (pdev, pdata, (uint16_t)pep->rem_length);
 800e736:	697b      	ldr	r3, [r7, #20]
 800e738:	68db      	ldr	r3, [r3, #12]
 800e73a:	b29b      	uxth	r3, r3
 800e73c:	461a      	mov	r2, r3
 800e73e:	6879      	ldr	r1, [r7, #4]
 800e740:	68f8      	ldr	r0, [r7, #12]
 800e742:	f000 fe81 	bl	800f448 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 800e746:	2300      	movs	r3, #0
 800e748:	2200      	movs	r2, #0
 800e74a:	2100      	movs	r1, #0
 800e74c:	68f8      	ldr	r0, [r7, #12]
 800e74e:	f001 fc07 	bl	800ff60 <USBD_LL_PrepareReceive>
 800e752:	e04e      	b.n	800e7f2 <USBD_LL_DataInStage+0xfa>
      }
      else
      { /* last packet is MPS multiple, so send ZLP packet */
        if((pep->total_length % pep->maxpacket == 0U) &&
 800e754:	697b      	ldr	r3, [r7, #20]
 800e756:	689b      	ldr	r3, [r3, #8]
 800e758:	697a      	ldr	r2, [r7, #20]
 800e75a:	6912      	ldr	r2, [r2, #16]
 800e75c:	fbb3 f1f2 	udiv	r1, r3, r2
 800e760:	fb02 f201 	mul.w	r2, r2, r1
 800e764:	1a9b      	subs	r3, r3, r2
 800e766:	2b00      	cmp	r3, #0
 800e768:	d11c      	bne.n	800e7a4 <USBD_LL_DataInStage+0xac>
           (pep->total_length >= pep->maxpacket) &&
 800e76a:	697b      	ldr	r3, [r7, #20]
 800e76c:	689a      	ldr	r2, [r3, #8]
 800e76e:	697b      	ldr	r3, [r7, #20]
 800e770:	691b      	ldr	r3, [r3, #16]
        if((pep->total_length % pep->maxpacket == 0U) &&
 800e772:	429a      	cmp	r2, r3
 800e774:	d316      	bcc.n	800e7a4 <USBD_LL_DataInStage+0xac>
           (pep->total_length < pdev->ep0_data_len))
 800e776:	697b      	ldr	r3, [r7, #20]
 800e778:	689a      	ldr	r2, [r3, #8]
 800e77a:	68fb      	ldr	r3, [r7, #12]
 800e77c:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
           (pep->total_length >= pep->maxpacket) &&
 800e780:	429a      	cmp	r2, r3
 800e782:	d20f      	bcs.n	800e7a4 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800e784:	2200      	movs	r2, #0
 800e786:	2100      	movs	r1, #0
 800e788:	68f8      	ldr	r0, [r7, #12]
 800e78a:	f000 fe5d 	bl	800f448 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800e78e:	68fb      	ldr	r3, [r7, #12]
 800e790:	2200      	movs	r2, #0
 800e792:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 800e796:	2300      	movs	r3, #0
 800e798:	2200      	movs	r2, #0
 800e79a:	2100      	movs	r1, #0
 800e79c:	68f8      	ldr	r0, [r7, #12]
 800e79e:	f001 fbdf 	bl	800ff60 <USBD_LL_PrepareReceive>
 800e7a2:	e026      	b.n	800e7f2 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if((pdev->pClass->EP0_TxSent != NULL)&&
 800e7a4:	68fb      	ldr	r3, [r7, #12]
 800e7a6:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800e7aa:	68db      	ldr	r3, [r3, #12]
 800e7ac:	2b00      	cmp	r3, #0
 800e7ae:	d00a      	beq.n	800e7c6 <USBD_LL_DataInStage+0xce>
             (pdev->dev_state == USBD_STATE_CONFIGURED))
 800e7b0:	68fb      	ldr	r3, [r7, #12]
 800e7b2:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
          if((pdev->pClass->EP0_TxSent != NULL)&&
 800e7b6:	2b03      	cmp	r3, #3
 800e7b8:	d105      	bne.n	800e7c6 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800e7ba:	68fb      	ldr	r3, [r7, #12]
 800e7bc:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800e7c0:	68db      	ldr	r3, [r3, #12]
 800e7c2:	68f8      	ldr	r0, [r7, #12]
 800e7c4:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 800e7c6:	2180      	movs	r1, #128	; 0x80
 800e7c8:	68f8      	ldr	r0, [r7, #12]
 800e7ca:	f001 fb1d 	bl	800fe08 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 800e7ce:	68f8      	ldr	r0, [r7, #12]
 800e7d0:	f000 fe8f 	bl	800f4f2 <USBD_CtlReceiveStatus>
 800e7d4:	e00d      	b.n	800e7f2 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800e7d6:	68fb      	ldr	r3, [r7, #12]
 800e7d8:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 800e7dc:	2b04      	cmp	r3, #4
 800e7de:	d004      	beq.n	800e7ea <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 800e7e0:	68fb      	ldr	r3, [r7, #12]
 800e7e2:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800e7e6:	2b00      	cmp	r3, #0
 800e7e8:	d103      	bne.n	800e7f2 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 800e7ea:	2180      	movs	r1, #128	; 0x80
 800e7ec:	68f8      	ldr	r0, [r7, #12]
 800e7ee:	f001 fb0b 	bl	800fe08 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 800e7f2:	68fb      	ldr	r3, [r7, #12]
 800e7f4:	f893 3278 	ldrb.w	r3, [r3, #632]	; 0x278
 800e7f8:	2b01      	cmp	r3, #1
 800e7fa:	d11d      	bne.n	800e838 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 800e7fc:	68f8      	ldr	r0, [r7, #12]
 800e7fe:	f7ff fe82 	bl	800e506 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800e802:	68fb      	ldr	r3, [r7, #12]
 800e804:	2200      	movs	r2, #0
 800e806:	f883 2278 	strb.w	r2, [r3, #632]	; 0x278
 800e80a:	e015      	b.n	800e838 <USBD_LL_DataInStage+0x140>
    }
  }
  else if((pdev->pClass->DataIn != NULL) &&
 800e80c:	68fb      	ldr	r3, [r7, #12]
 800e80e:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800e812:	695b      	ldr	r3, [r3, #20]
 800e814:	2b00      	cmp	r3, #0
 800e816:	d00d      	beq.n	800e834 <USBD_LL_DataInStage+0x13c>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 800e818:	68fb      	ldr	r3, [r7, #12]
 800e81a:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
  else if((pdev->pClass->DataIn != NULL) &&
 800e81e:	2b03      	cmp	r3, #3
 800e820:	d108      	bne.n	800e834 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 800e822:	68fb      	ldr	r3, [r7, #12]
 800e824:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800e828:	695b      	ldr	r3, [r3, #20]
 800e82a:	7afa      	ldrb	r2, [r7, #11]
 800e82c:	4611      	mov	r1, r2
 800e82e:	68f8      	ldr	r0, [r7, #12]
 800e830:	4798      	blx	r3
 800e832:	e001      	b.n	800e838 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800e834:	2302      	movs	r3, #2
 800e836:	e000      	b.n	800e83a <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 800e838:	2300      	movs	r3, #0
}
 800e83a:	4618      	mov	r0, r3
 800e83c:	3718      	adds	r7, #24
 800e83e:	46bd      	mov	sp, r7
 800e840:	bd80      	pop	{r7, pc}

0800e842 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef  *pdev)
{
 800e842:	b580      	push	{r7, lr}
 800e844:	b082      	sub	sp, #8
 800e846:	af00      	add	r7, sp, #0
 800e848:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800e84a:	2340      	movs	r3, #64	; 0x40
 800e84c:	2200      	movs	r2, #0
 800e84e:	2100      	movs	r1, #0
 800e850:	6878      	ldr	r0, [r7, #4]
 800e852:	f001 fa94 	bl	800fd7e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800e856:	687b      	ldr	r3, [r7, #4]
 800e858:	2201      	movs	r2, #1
 800e85a:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800e85e:	687b      	ldr	r3, [r7, #4]
 800e860:	2240      	movs	r2, #64	; 0x40
 800e862:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800e866:	2340      	movs	r3, #64	; 0x40
 800e868:	2200      	movs	r2, #0
 800e86a:	2180      	movs	r1, #128	; 0x80
 800e86c:	6878      	ldr	r0, [r7, #4]
 800e86e:	f001 fa86 	bl	800fd7e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800e872:	687b      	ldr	r3, [r7, #4]
 800e874:	2201      	movs	r2, #1
 800e876:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800e878:	687b      	ldr	r3, [r7, #4]
 800e87a:	2240      	movs	r2, #64	; 0x40
 800e87c:	625a      	str	r2, [r3, #36]	; 0x24
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800e87e:	687b      	ldr	r3, [r7, #4]
 800e880:	2201      	movs	r2, #1
 800e882:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->ep0_state = USBD_EP0_IDLE;
 800e886:	687b      	ldr	r3, [r7, #4]
 800e888:	2200      	movs	r2, #0
 800e88a:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->dev_config= 0U;
 800e88e:	687b      	ldr	r3, [r7, #4]
 800e890:	2200      	movs	r2, #0
 800e892:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800e894:	687b      	ldr	r3, [r7, #4]
 800e896:	2200      	movs	r2, #0
 800e898:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c

  if (pdev->pClassData)
 800e89c:	687b      	ldr	r3, [r7, #4]
 800e89e:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800e8a2:	2b00      	cmp	r3, #0
 800e8a4:	d009      	beq.n	800e8ba <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800e8a6:	687b      	ldr	r3, [r7, #4]
 800e8a8:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800e8ac:	685b      	ldr	r3, [r3, #4]
 800e8ae:	687a      	ldr	r2, [r7, #4]
 800e8b0:	6852      	ldr	r2, [r2, #4]
 800e8b2:	b2d2      	uxtb	r2, r2
 800e8b4:	4611      	mov	r1, r2
 800e8b6:	6878      	ldr	r0, [r7, #4]
 800e8b8:	4798      	blx	r3
  }

  return USBD_OK;
 800e8ba:	2300      	movs	r3, #0
}
 800e8bc:	4618      	mov	r0, r3
 800e8be:	3708      	adds	r7, #8
 800e8c0:	46bd      	mov	sp, r7
 800e8c2:	bd80      	pop	{r7, pc}

0800e8c4 <USBD_LL_SetSpeed>:
*         Handle Reset event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef  *pdev, USBD_SpeedTypeDef speed)
{
 800e8c4:	b480      	push	{r7}
 800e8c6:	b083      	sub	sp, #12
 800e8c8:	af00      	add	r7, sp, #0
 800e8ca:	6078      	str	r0, [r7, #4]
 800e8cc:	460b      	mov	r3, r1
 800e8ce:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800e8d0:	687b      	ldr	r3, [r7, #4]
 800e8d2:	78fa      	ldrb	r2, [r7, #3]
 800e8d4:	741a      	strb	r2, [r3, #16]
  return USBD_OK;
 800e8d6:	2300      	movs	r3, #0
}
 800e8d8:	4618      	mov	r0, r3
 800e8da:	370c      	adds	r7, #12
 800e8dc:	46bd      	mov	sp, r7
 800e8de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8e2:	4770      	bx	lr

0800e8e4 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef  *pdev)
{
 800e8e4:	b480      	push	{r7}
 800e8e6:	b083      	sub	sp, #12
 800e8e8:	af00      	add	r7, sp, #0
 800e8ea:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 800e8ec:	687b      	ldr	r3, [r7, #4]
 800e8ee:	f893 2274 	ldrb.w	r2, [r3, #628]	; 0x274
 800e8f2:	687b      	ldr	r3, [r7, #4]
 800e8f4:	f883 2275 	strb.w	r2, [r3, #629]	; 0x275
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800e8f8:	687b      	ldr	r3, [r7, #4]
 800e8fa:	2204      	movs	r2, #4
 800e8fc:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  return USBD_OK;
 800e900:	2300      	movs	r3, #0
}
 800e902:	4618      	mov	r0, r3
 800e904:	370c      	adds	r7, #12
 800e906:	46bd      	mov	sp, r7
 800e908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e90c:	4770      	bx	lr

0800e90e <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef  *pdev)
{
 800e90e:	b480      	push	{r7}
 800e910:	b083      	sub	sp, #12
 800e912:	af00      	add	r7, sp, #0
 800e914:	6078      	str	r0, [r7, #4]
  pdev->dev_state = pdev->dev_old_state;
 800e916:	687b      	ldr	r3, [r7, #4]
 800e918:	f893 2275 	ldrb.w	r2, [r3, #629]	; 0x275
 800e91c:	687b      	ldr	r3, [r7, #4]
 800e91e:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  return USBD_OK;
 800e922:	2300      	movs	r3, #0
}
 800e924:	4618      	mov	r0, r3
 800e926:	370c      	adds	r7, #12
 800e928:	46bd      	mov	sp, r7
 800e92a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e92e:	4770      	bx	lr

0800e930 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef  *pdev)
{
 800e930:	b580      	push	{r7, lr}
 800e932:	b082      	sub	sp, #8
 800e934:	af00      	add	r7, sp, #0
 800e936:	6078      	str	r0, [r7, #4]
  if(pdev->dev_state == USBD_STATE_CONFIGURED)
 800e938:	687b      	ldr	r3, [r7, #4]
 800e93a:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800e93e:	2b03      	cmp	r3, #3
 800e940:	d10b      	bne.n	800e95a <USBD_LL_SOF+0x2a>
  {
    if(pdev->pClass->SOF != NULL)
 800e942:	687b      	ldr	r3, [r7, #4]
 800e944:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800e948:	69db      	ldr	r3, [r3, #28]
 800e94a:	2b00      	cmp	r3, #0
 800e94c:	d005      	beq.n	800e95a <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800e94e:	687b      	ldr	r3, [r7, #4]
 800e950:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800e954:	69db      	ldr	r3, [r3, #28]
 800e956:	6878      	ldr	r0, [r7, #4]
 800e958:	4798      	blx	r3
    }
  }
  return USBD_OK;
 800e95a:	2300      	movs	r3, #0
}
 800e95c:	4618      	mov	r0, r3
 800e95e:	3708      	adds	r7, #8
 800e960:	46bd      	mov	sp, r7
 800e962:	bd80      	pop	{r7, pc}

0800e964 <USBD_LL_IsoINIncomplete>:
*         Handle iso in incomplete event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef  *pdev, uint8_t epnum)
{
 800e964:	b480      	push	{r7}
 800e966:	b083      	sub	sp, #12
 800e968:	af00      	add	r7, sp, #0
 800e96a:	6078      	str	r0, [r7, #4]
 800e96c:	460b      	mov	r3, r1
 800e96e:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 800e970:	2300      	movs	r3, #0
}
 800e972:	4618      	mov	r0, r3
 800e974:	370c      	adds	r7, #12
 800e976:	46bd      	mov	sp, r7
 800e978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e97c:	4770      	bx	lr

0800e97e <USBD_LL_IsoOUTIncomplete>:
*         Handle iso out incomplete event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef  *pdev, uint8_t epnum)
{
 800e97e:	b480      	push	{r7}
 800e980:	b083      	sub	sp, #12
 800e982:	af00      	add	r7, sp, #0
 800e984:	6078      	str	r0, [r7, #4]
 800e986:	460b      	mov	r3, r1
 800e988:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 800e98a:	2300      	movs	r3, #0
}
 800e98c:	4618      	mov	r0, r3
 800e98e:	370c      	adds	r7, #12
 800e990:	46bd      	mov	sp, r7
 800e992:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e996:	4770      	bx	lr

0800e998 <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef  *pdev)
{
 800e998:	b480      	push	{r7}
 800e99a:	b083      	sub	sp, #12
 800e99c:	af00      	add	r7, sp, #0
 800e99e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800e9a0:	2300      	movs	r3, #0
}
 800e9a2:	4618      	mov	r0, r3
 800e9a4:	370c      	adds	r7, #12
 800e9a6:	46bd      	mov	sp, r7
 800e9a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9ac:	4770      	bx	lr

0800e9ae <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef  *pdev)
{
 800e9ae:	b580      	push	{r7, lr}
 800e9b0:	b082      	sub	sp, #8
 800e9b2:	af00      	add	r7, sp, #0
 800e9b4:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800e9b6:	687b      	ldr	r3, [r7, #4]
 800e9b8:	2201      	movs	r2, #1
 800e9ba:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800e9be:	687b      	ldr	r3, [r7, #4]
 800e9c0:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800e9c4:	685b      	ldr	r3, [r3, #4]
 800e9c6:	687a      	ldr	r2, [r7, #4]
 800e9c8:	6852      	ldr	r2, [r2, #4]
 800e9ca:	b2d2      	uxtb	r2, r2
 800e9cc:	4611      	mov	r1, r2
 800e9ce:	6878      	ldr	r0, [r7, #4]
 800e9d0:	4798      	blx	r3

  return USBD_OK;
 800e9d2:	2300      	movs	r3, #0
}
 800e9d4:	4618      	mov	r0, r3
 800e9d6:	3708      	adds	r7, #8
 800e9d8:	46bd      	mov	sp, r7
 800e9da:	bd80      	pop	{r7, pc}

0800e9dc <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 800e9dc:	b580      	push	{r7, lr}
 800e9de:	b084      	sub	sp, #16
 800e9e0:	af00      	add	r7, sp, #0
 800e9e2:	6078      	str	r0, [r7, #4]
 800e9e4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800e9e6:	2300      	movs	r3, #0
 800e9e8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800e9ea:	683b      	ldr	r3, [r7, #0]
 800e9ec:	781b      	ldrb	r3, [r3, #0]
 800e9ee:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800e9f2:	2b20      	cmp	r3, #32
 800e9f4:	d004      	beq.n	800ea00 <USBD_StdDevReq+0x24>
 800e9f6:	2b40      	cmp	r3, #64	; 0x40
 800e9f8:	d002      	beq.n	800ea00 <USBD_StdDevReq+0x24>
 800e9fa:	2b00      	cmp	r3, #0
 800e9fc:	d008      	beq.n	800ea10 <USBD_StdDevReq+0x34>
 800e9fe:	e04c      	b.n	800ea9a <USBD_StdDevReq+0xbe>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    pdev->pClass->Setup(pdev, req);
 800ea00:	687b      	ldr	r3, [r7, #4]
 800ea02:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800ea06:	689b      	ldr	r3, [r3, #8]
 800ea08:	6839      	ldr	r1, [r7, #0]
 800ea0a:	6878      	ldr	r0, [r7, #4]
 800ea0c:	4798      	blx	r3
    break;
 800ea0e:	e049      	b.n	800eaa4 <USBD_StdDevReq+0xc8>

  case USB_REQ_TYPE_STANDARD:

    switch (req->bRequest)
 800ea10:	683b      	ldr	r3, [r7, #0]
 800ea12:	785b      	ldrb	r3, [r3, #1]
 800ea14:	2b09      	cmp	r3, #9
 800ea16:	d83a      	bhi.n	800ea8e <USBD_StdDevReq+0xb2>
 800ea18:	a201      	add	r2, pc, #4	; (adr r2, 800ea20 <USBD_StdDevReq+0x44>)
 800ea1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ea1e:	bf00      	nop
 800ea20:	0800ea71 	.word	0x0800ea71
 800ea24:	0800ea85 	.word	0x0800ea85
 800ea28:	0800ea8f 	.word	0x0800ea8f
 800ea2c:	0800ea7b 	.word	0x0800ea7b
 800ea30:	0800ea8f 	.word	0x0800ea8f
 800ea34:	0800ea53 	.word	0x0800ea53
 800ea38:	0800ea49 	.word	0x0800ea49
 800ea3c:	0800ea8f 	.word	0x0800ea8f
 800ea40:	0800ea67 	.word	0x0800ea67
 800ea44:	0800ea5d 	.word	0x0800ea5d
    {
    case USB_REQ_GET_DESCRIPTOR:

      USBD_GetDescriptor (pdev, req);
 800ea48:	6839      	ldr	r1, [r7, #0]
 800ea4a:	6878      	ldr	r0, [r7, #4]
 800ea4c:	f000 f9d2 	bl	800edf4 <USBD_GetDescriptor>
      break;
 800ea50:	e022      	b.n	800ea98 <USBD_StdDevReq+0xbc>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress (pdev, req);
 800ea52:	6839      	ldr	r1, [r7, #0]
 800ea54:	6878      	ldr	r0, [r7, #4]
 800ea56:	f000 fac7 	bl	800efe8 <USBD_SetAddress>
      break;
 800ea5a:	e01d      	b.n	800ea98 <USBD_StdDevReq+0xbc>

    case USB_REQ_SET_CONFIGURATION:
      USBD_SetConfig (pdev, req);
 800ea5c:	6839      	ldr	r1, [r7, #0]
 800ea5e:	6878      	ldr	r0, [r7, #4]
 800ea60:	f000 fb04 	bl	800f06c <USBD_SetConfig>
      break;
 800ea64:	e018      	b.n	800ea98 <USBD_StdDevReq+0xbc>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig (pdev, req);
 800ea66:	6839      	ldr	r1, [r7, #0]
 800ea68:	6878      	ldr	r0, [r7, #4]
 800ea6a:	f000 fb8d 	bl	800f188 <USBD_GetConfig>
      break;
 800ea6e:	e013      	b.n	800ea98 <USBD_StdDevReq+0xbc>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus (pdev, req);
 800ea70:	6839      	ldr	r1, [r7, #0]
 800ea72:	6878      	ldr	r0, [r7, #4]
 800ea74:	f000 fbbc 	bl	800f1f0 <USBD_GetStatus>
      break;
 800ea78:	e00e      	b.n	800ea98 <USBD_StdDevReq+0xbc>


    case USB_REQ_SET_FEATURE:
      USBD_SetFeature (pdev, req);
 800ea7a:	6839      	ldr	r1, [r7, #0]
 800ea7c:	6878      	ldr	r0, [r7, #4]
 800ea7e:	f000 fbea 	bl	800f256 <USBD_SetFeature>
      break;
 800ea82:	e009      	b.n	800ea98 <USBD_StdDevReq+0xbc>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature (pdev, req);
 800ea84:	6839      	ldr	r1, [r7, #0]
 800ea86:	6878      	ldr	r0, [r7, #4]
 800ea88:	f000 fbf9 	bl	800f27e <USBD_ClrFeature>
      break;
 800ea8c:	e004      	b.n	800ea98 <USBD_StdDevReq+0xbc>

    default:
      USBD_CtlError(pdev, req);
 800ea8e:	6839      	ldr	r1, [r7, #0]
 800ea90:	6878      	ldr	r0, [r7, #4]
 800ea92:	f000 fc52 	bl	800f33a <USBD_CtlError>
      break;
 800ea96:	bf00      	nop
    }
    break;
 800ea98:	e004      	b.n	800eaa4 <USBD_StdDevReq+0xc8>

  default:
    USBD_CtlError(pdev, req);
 800ea9a:	6839      	ldr	r1, [r7, #0]
 800ea9c:	6878      	ldr	r0, [r7, #4]
 800ea9e:	f000 fc4c 	bl	800f33a <USBD_CtlError>
    break;
 800eaa2:	bf00      	nop
  }

  return ret;
 800eaa4:	7bfb      	ldrb	r3, [r7, #15]
}
 800eaa6:	4618      	mov	r0, r3
 800eaa8:	3710      	adds	r7, #16
 800eaaa:	46bd      	mov	sp, r7
 800eaac:	bd80      	pop	{r7, pc}
 800eaae:	bf00      	nop

0800eab0 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 800eab0:	b580      	push	{r7, lr}
 800eab2:	b084      	sub	sp, #16
 800eab4:	af00      	add	r7, sp, #0
 800eab6:	6078      	str	r0, [r7, #4]
 800eab8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800eaba:	2300      	movs	r3, #0
 800eabc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800eabe:	683b      	ldr	r3, [r7, #0]
 800eac0:	781b      	ldrb	r3, [r3, #0]
 800eac2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800eac6:	2b20      	cmp	r3, #32
 800eac8:	d003      	beq.n	800ead2 <USBD_StdItfReq+0x22>
 800eaca:	2b40      	cmp	r3, #64	; 0x40
 800eacc:	d001      	beq.n	800ead2 <USBD_StdItfReq+0x22>
 800eace:	2b00      	cmp	r3, #0
 800ead0:	d12a      	bne.n	800eb28 <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 800ead2:	687b      	ldr	r3, [r7, #4]
 800ead4:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800ead8:	3b01      	subs	r3, #1
 800eada:	2b02      	cmp	r3, #2
 800eadc:	d81d      	bhi.n	800eb1a <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800eade:	683b      	ldr	r3, [r7, #0]
 800eae0:	889b      	ldrh	r3, [r3, #4]
 800eae2:	b2db      	uxtb	r3, r3
 800eae4:	2b01      	cmp	r3, #1
 800eae6:	d813      	bhi.n	800eb10 <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup (pdev, req);
 800eae8:	687b      	ldr	r3, [r7, #4]
 800eaea:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800eaee:	689b      	ldr	r3, [r3, #8]
 800eaf0:	6839      	ldr	r1, [r7, #0]
 800eaf2:	6878      	ldr	r0, [r7, #4]
 800eaf4:	4798      	blx	r3
 800eaf6:	4603      	mov	r3, r0
 800eaf8:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 800eafa:	683b      	ldr	r3, [r7, #0]
 800eafc:	88db      	ldrh	r3, [r3, #6]
 800eafe:	2b00      	cmp	r3, #0
 800eb00:	d110      	bne.n	800eb24 <USBD_StdItfReq+0x74>
 800eb02:	7bfb      	ldrb	r3, [r7, #15]
 800eb04:	2b00      	cmp	r3, #0
 800eb06:	d10d      	bne.n	800eb24 <USBD_StdItfReq+0x74>
        {
          USBD_CtlSendStatus(pdev);
 800eb08:	6878      	ldr	r0, [r7, #4]
 800eb0a:	f000 fcdf 	bl	800f4cc <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 800eb0e:	e009      	b.n	800eb24 <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 800eb10:	6839      	ldr	r1, [r7, #0]
 800eb12:	6878      	ldr	r0, [r7, #4]
 800eb14:	f000 fc11 	bl	800f33a <USBD_CtlError>
      break;
 800eb18:	e004      	b.n	800eb24 <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 800eb1a:	6839      	ldr	r1, [r7, #0]
 800eb1c:	6878      	ldr	r0, [r7, #4]
 800eb1e:	f000 fc0c 	bl	800f33a <USBD_CtlError>
      break;
 800eb22:	e000      	b.n	800eb26 <USBD_StdItfReq+0x76>
      break;
 800eb24:	bf00      	nop
    }
    break;
 800eb26:	e004      	b.n	800eb32 <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 800eb28:	6839      	ldr	r1, [r7, #0]
 800eb2a:	6878      	ldr	r0, [r7, #4]
 800eb2c:	f000 fc05 	bl	800f33a <USBD_CtlError>
    break;
 800eb30:	bf00      	nop
  }

  return USBD_OK;
 800eb32:	2300      	movs	r3, #0
}
 800eb34:	4618      	mov	r0, r3
 800eb36:	3710      	adds	r7, #16
 800eb38:	46bd      	mov	sp, r7
 800eb3a:	bd80      	pop	{r7, pc}

0800eb3c <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 800eb3c:	b580      	push	{r7, lr}
 800eb3e:	b084      	sub	sp, #16
 800eb40:	af00      	add	r7, sp, #0
 800eb42:	6078      	str	r0, [r7, #4]
 800eb44:	6039      	str	r1, [r7, #0]

  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800eb46:	2300      	movs	r3, #0
 800eb48:	73fb      	strb	r3, [r7, #15]
  USBD_EndpointTypeDef   *pep;
  ep_addr  = LOBYTE(req->wIndex);
 800eb4a:	683b      	ldr	r3, [r7, #0]
 800eb4c:	889b      	ldrh	r3, [r3, #4]
 800eb4e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800eb50:	683b      	ldr	r3, [r7, #0]
 800eb52:	781b      	ldrb	r3, [r3, #0]
 800eb54:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800eb58:	2b20      	cmp	r3, #32
 800eb5a:	d004      	beq.n	800eb66 <USBD_StdEPReq+0x2a>
 800eb5c:	2b40      	cmp	r3, #64	; 0x40
 800eb5e:	d002      	beq.n	800eb66 <USBD_StdEPReq+0x2a>
 800eb60:	2b00      	cmp	r3, #0
 800eb62:	d008      	beq.n	800eb76 <USBD_StdEPReq+0x3a>
 800eb64:	e13b      	b.n	800edde <USBD_StdEPReq+0x2a2>
  {

  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    pdev->pClass->Setup (pdev, req);
 800eb66:	687b      	ldr	r3, [r7, #4]
 800eb68:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800eb6c:	689b      	ldr	r3, [r3, #8]
 800eb6e:	6839      	ldr	r1, [r7, #0]
 800eb70:	6878      	ldr	r0, [r7, #4]
 800eb72:	4798      	blx	r3
    break;
 800eb74:	e138      	b.n	800ede8 <USBD_StdEPReq+0x2ac>

  case USB_REQ_TYPE_STANDARD:
    /* Check if it is a class request */
    if ((req->bmRequest & 0x60U) == 0x20U)
 800eb76:	683b      	ldr	r3, [r7, #0]
 800eb78:	781b      	ldrb	r3, [r3, #0]
 800eb7a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800eb7e:	2b20      	cmp	r3, #32
 800eb80:	d10a      	bne.n	800eb98 <USBD_StdEPReq+0x5c>
    {
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup (pdev, req);
 800eb82:	687b      	ldr	r3, [r7, #4]
 800eb84:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800eb88:	689b      	ldr	r3, [r3, #8]
 800eb8a:	6839      	ldr	r1, [r7, #0]
 800eb8c:	6878      	ldr	r0, [r7, #4]
 800eb8e:	4798      	blx	r3
 800eb90:	4603      	mov	r3, r0
 800eb92:	73fb      	strb	r3, [r7, #15]

      return ret;
 800eb94:	7bfb      	ldrb	r3, [r7, #15]
 800eb96:	e128      	b.n	800edea <USBD_StdEPReq+0x2ae>
    }

    switch (req->bRequest)
 800eb98:	683b      	ldr	r3, [r7, #0]
 800eb9a:	785b      	ldrb	r3, [r3, #1]
 800eb9c:	2b01      	cmp	r3, #1
 800eb9e:	d03e      	beq.n	800ec1e <USBD_StdEPReq+0xe2>
 800eba0:	2b03      	cmp	r3, #3
 800eba2:	d002      	beq.n	800ebaa <USBD_StdEPReq+0x6e>
 800eba4:	2b00      	cmp	r3, #0
 800eba6:	d070      	beq.n	800ec8a <USBD_StdEPReq+0x14e>
 800eba8:	e113      	b.n	800edd2 <USBD_StdEPReq+0x296>
    {

    case USB_REQ_SET_FEATURE :

      switch (pdev->dev_state)
 800ebaa:	687b      	ldr	r3, [r7, #4]
 800ebac:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800ebb0:	2b02      	cmp	r3, #2
 800ebb2:	d002      	beq.n	800ebba <USBD_StdEPReq+0x7e>
 800ebb4:	2b03      	cmp	r3, #3
 800ebb6:	d015      	beq.n	800ebe4 <USBD_StdEPReq+0xa8>
 800ebb8:	e02b      	b.n	800ec12 <USBD_StdEPReq+0xd6>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ebba:	7bbb      	ldrb	r3, [r7, #14]
 800ebbc:	2b00      	cmp	r3, #0
 800ebbe:	d00c      	beq.n	800ebda <USBD_StdEPReq+0x9e>
 800ebc0:	7bbb      	ldrb	r3, [r7, #14]
 800ebc2:	2b80      	cmp	r3, #128	; 0x80
 800ebc4:	d009      	beq.n	800ebda <USBD_StdEPReq+0x9e>
        {
          USBD_LL_StallEP(pdev, ep_addr);
 800ebc6:	7bbb      	ldrb	r3, [r7, #14]
 800ebc8:	4619      	mov	r1, r3
 800ebca:	6878      	ldr	r0, [r7, #4]
 800ebcc:	f001 f91c 	bl	800fe08 <USBD_LL_StallEP>
          USBD_LL_StallEP(pdev, 0x80U);
 800ebd0:	2180      	movs	r1, #128	; 0x80
 800ebd2:	6878      	ldr	r0, [r7, #4]
 800ebd4:	f001 f918 	bl	800fe08 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800ebd8:	e020      	b.n	800ec1c <USBD_StdEPReq+0xe0>
          USBD_CtlError(pdev, req);
 800ebda:	6839      	ldr	r1, [r7, #0]
 800ebdc:	6878      	ldr	r0, [r7, #4]
 800ebde:	f000 fbac 	bl	800f33a <USBD_CtlError>
        break;
 800ebe2:	e01b      	b.n	800ec1c <USBD_StdEPReq+0xe0>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800ebe4:	683b      	ldr	r3, [r7, #0]
 800ebe6:	885b      	ldrh	r3, [r3, #2]
 800ebe8:	2b00      	cmp	r3, #0
 800ebea:	d10e      	bne.n	800ec0a <USBD_StdEPReq+0xce>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800ebec:	7bbb      	ldrb	r3, [r7, #14]
 800ebee:	2b00      	cmp	r3, #0
 800ebf0:	d00b      	beq.n	800ec0a <USBD_StdEPReq+0xce>
 800ebf2:	7bbb      	ldrb	r3, [r7, #14]
 800ebf4:	2b80      	cmp	r3, #128	; 0x80
 800ebf6:	d008      	beq.n	800ec0a <USBD_StdEPReq+0xce>
 800ebf8:	683b      	ldr	r3, [r7, #0]
 800ebfa:	88db      	ldrh	r3, [r3, #6]
 800ebfc:	2b00      	cmp	r3, #0
 800ebfe:	d104      	bne.n	800ec0a <USBD_StdEPReq+0xce>
          {
            USBD_LL_StallEP(pdev, ep_addr);
 800ec00:	7bbb      	ldrb	r3, [r7, #14]
 800ec02:	4619      	mov	r1, r3
 800ec04:	6878      	ldr	r0, [r7, #4]
 800ec06:	f001 f8ff 	bl	800fe08 <USBD_LL_StallEP>
          }
        }
        USBD_CtlSendStatus(pdev);
 800ec0a:	6878      	ldr	r0, [r7, #4]
 800ec0c:	f000 fc5e 	bl	800f4cc <USBD_CtlSendStatus>

        break;
 800ec10:	e004      	b.n	800ec1c <USBD_StdEPReq+0xe0>

      default:
        USBD_CtlError(pdev, req);
 800ec12:	6839      	ldr	r1, [r7, #0]
 800ec14:	6878      	ldr	r0, [r7, #4]
 800ec16:	f000 fb90 	bl	800f33a <USBD_CtlError>
        break;
 800ec1a:	bf00      	nop
      }
      break;
 800ec1c:	e0de      	b.n	800eddc <USBD_StdEPReq+0x2a0>

    case USB_REQ_CLEAR_FEATURE :

      switch (pdev->dev_state)
 800ec1e:	687b      	ldr	r3, [r7, #4]
 800ec20:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800ec24:	2b02      	cmp	r3, #2
 800ec26:	d002      	beq.n	800ec2e <USBD_StdEPReq+0xf2>
 800ec28:	2b03      	cmp	r3, #3
 800ec2a:	d015      	beq.n	800ec58 <USBD_StdEPReq+0x11c>
 800ec2c:	e026      	b.n	800ec7c <USBD_StdEPReq+0x140>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ec2e:	7bbb      	ldrb	r3, [r7, #14]
 800ec30:	2b00      	cmp	r3, #0
 800ec32:	d00c      	beq.n	800ec4e <USBD_StdEPReq+0x112>
 800ec34:	7bbb      	ldrb	r3, [r7, #14]
 800ec36:	2b80      	cmp	r3, #128	; 0x80
 800ec38:	d009      	beq.n	800ec4e <USBD_StdEPReq+0x112>
        {
          USBD_LL_StallEP(pdev, ep_addr);
 800ec3a:	7bbb      	ldrb	r3, [r7, #14]
 800ec3c:	4619      	mov	r1, r3
 800ec3e:	6878      	ldr	r0, [r7, #4]
 800ec40:	f001 f8e2 	bl	800fe08 <USBD_LL_StallEP>
          USBD_LL_StallEP(pdev, 0x80U);
 800ec44:	2180      	movs	r1, #128	; 0x80
 800ec46:	6878      	ldr	r0, [r7, #4]
 800ec48:	f001 f8de 	bl	800fe08 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800ec4c:	e01c      	b.n	800ec88 <USBD_StdEPReq+0x14c>
          USBD_CtlError(pdev, req);
 800ec4e:	6839      	ldr	r1, [r7, #0]
 800ec50:	6878      	ldr	r0, [r7, #4]
 800ec52:	f000 fb72 	bl	800f33a <USBD_CtlError>
        break;
 800ec56:	e017      	b.n	800ec88 <USBD_StdEPReq+0x14c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800ec58:	683b      	ldr	r3, [r7, #0]
 800ec5a:	885b      	ldrh	r3, [r3, #2]
 800ec5c:	2b00      	cmp	r3, #0
 800ec5e:	d112      	bne.n	800ec86 <USBD_StdEPReq+0x14a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 800ec60:	7bbb      	ldrb	r3, [r7, #14]
 800ec62:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ec66:	2b00      	cmp	r3, #0
 800ec68:	d004      	beq.n	800ec74 <USBD_StdEPReq+0x138>
          {
            USBD_LL_ClearStallEP(pdev, ep_addr);
 800ec6a:	7bbb      	ldrb	r3, [r7, #14]
 800ec6c:	4619      	mov	r1, r3
 800ec6e:	6878      	ldr	r0, [r7, #4]
 800ec70:	f001 f8e9 	bl	800fe46 <USBD_LL_ClearStallEP>
          }
          USBD_CtlSendStatus(pdev);
 800ec74:	6878      	ldr	r0, [r7, #4]
 800ec76:	f000 fc29 	bl	800f4cc <USBD_CtlSendStatus>
        }
        break;
 800ec7a:	e004      	b.n	800ec86 <USBD_StdEPReq+0x14a>

      default:
        USBD_CtlError(pdev, req);
 800ec7c:	6839      	ldr	r1, [r7, #0]
 800ec7e:	6878      	ldr	r0, [r7, #4]
 800ec80:	f000 fb5b 	bl	800f33a <USBD_CtlError>
        break;
 800ec84:	e000      	b.n	800ec88 <USBD_StdEPReq+0x14c>
        break;
 800ec86:	bf00      	nop
      }
      break;
 800ec88:	e0a8      	b.n	800eddc <USBD_StdEPReq+0x2a0>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 800ec8a:	687b      	ldr	r3, [r7, #4]
 800ec8c:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800ec90:	2b02      	cmp	r3, #2
 800ec92:	d002      	beq.n	800ec9a <USBD_StdEPReq+0x15e>
 800ec94:	2b03      	cmp	r3, #3
 800ec96:	d031      	beq.n	800ecfc <USBD_StdEPReq+0x1c0>
 800ec98:	e095      	b.n	800edc6 <USBD_StdEPReq+0x28a>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ec9a:	7bbb      	ldrb	r3, [r7, #14]
 800ec9c:	2b00      	cmp	r3, #0
 800ec9e:	d007      	beq.n	800ecb0 <USBD_StdEPReq+0x174>
 800eca0:	7bbb      	ldrb	r3, [r7, #14]
 800eca2:	2b80      	cmp	r3, #128	; 0x80
 800eca4:	d004      	beq.n	800ecb0 <USBD_StdEPReq+0x174>
        {
          USBD_CtlError(pdev, req);
 800eca6:	6839      	ldr	r1, [r7, #0]
 800eca8:	6878      	ldr	r0, [r7, #4]
 800ecaa:	f000 fb46 	bl	800f33a <USBD_CtlError>
          break;
 800ecae:	e08f      	b.n	800edd0 <USBD_StdEPReq+0x294>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 800ecb0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ecb4:	2b00      	cmp	r3, #0
 800ecb6:	da0b      	bge.n	800ecd0 <USBD_StdEPReq+0x194>
 800ecb8:	7bbb      	ldrb	r3, [r7, #14]
 800ecba:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ecbe:	4613      	mov	r3, r2
 800ecc0:	009b      	lsls	r3, r3, #2
 800ecc2:	4413      	add	r3, r2
 800ecc4:	009b      	lsls	r3, r3, #2
 800ecc6:	3310      	adds	r3, #16
 800ecc8:	687a      	ldr	r2, [r7, #4]
 800ecca:	4413      	add	r3, r2
 800eccc:	3304      	adds	r3, #4
 800ecce:	e00a      	b.n	800ece6 <USBD_StdEPReq+0x1aa>
          &pdev->ep_out[ep_addr & 0x7FU];
 800ecd0:	7bbb      	ldrb	r3, [r7, #14]
 800ecd2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 800ecd6:	4613      	mov	r3, r2
 800ecd8:	009b      	lsls	r3, r3, #2
 800ecda:	4413      	add	r3, r2
 800ecdc:	009b      	lsls	r3, r3, #2
 800ecde:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 800ece2:	687a      	ldr	r2, [r7, #4]
 800ece4:	4413      	add	r3, r2
 800ece6:	60bb      	str	r3, [r7, #8]

          pep->status = 0x0000U;
 800ece8:	68bb      	ldr	r3, [r7, #8]
 800ecea:	2200      	movs	r2, #0
 800ecec:	601a      	str	r2, [r3, #0]

          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 800ecee:	68bb      	ldr	r3, [r7, #8]
 800ecf0:	2202      	movs	r2, #2
 800ecf2:	4619      	mov	r1, r3
 800ecf4:	6878      	ldr	r0, [r7, #4]
 800ecf6:	f000 fb8b 	bl	800f410 <USBD_CtlSendData>
          break;
 800ecfa:	e069      	b.n	800edd0 <USBD_StdEPReq+0x294>

      case USBD_STATE_CONFIGURED:
        if((ep_addr & 0x80U) == 0x80U)
 800ecfc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ed00:	2b00      	cmp	r3, #0
 800ed02:	da11      	bge.n	800ed28 <USBD_StdEPReq+0x1ec>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800ed04:	7bbb      	ldrb	r3, [r7, #14]
 800ed06:	f003 020f 	and.w	r2, r3, #15
 800ed0a:	6879      	ldr	r1, [r7, #4]
 800ed0c:	4613      	mov	r3, r2
 800ed0e:	009b      	lsls	r3, r3, #2
 800ed10:	4413      	add	r3, r2
 800ed12:	009b      	lsls	r3, r3, #2
 800ed14:	440b      	add	r3, r1
 800ed16:	3318      	adds	r3, #24
 800ed18:	681b      	ldr	r3, [r3, #0]
 800ed1a:	2b00      	cmp	r3, #0
 800ed1c:	d117      	bne.n	800ed4e <USBD_StdEPReq+0x212>
          {
            USBD_CtlError(pdev, req);
 800ed1e:	6839      	ldr	r1, [r7, #0]
 800ed20:	6878      	ldr	r0, [r7, #4]
 800ed22:	f000 fb0a 	bl	800f33a <USBD_CtlError>
            break;
 800ed26:	e053      	b.n	800edd0 <USBD_StdEPReq+0x294>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800ed28:	7bbb      	ldrb	r3, [r7, #14]
 800ed2a:	f003 020f 	and.w	r2, r3, #15
 800ed2e:	6879      	ldr	r1, [r7, #4]
 800ed30:	4613      	mov	r3, r2
 800ed32:	009b      	lsls	r3, r3, #2
 800ed34:	4413      	add	r3, r2
 800ed36:	009b      	lsls	r3, r3, #2
 800ed38:	440b      	add	r3, r1
 800ed3a:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800ed3e:	681b      	ldr	r3, [r3, #0]
 800ed40:	2b00      	cmp	r3, #0
 800ed42:	d104      	bne.n	800ed4e <USBD_StdEPReq+0x212>
          {
            USBD_CtlError(pdev, req);
 800ed44:	6839      	ldr	r1, [r7, #0]
 800ed46:	6878      	ldr	r0, [r7, #4]
 800ed48:	f000 faf7 	bl	800f33a <USBD_CtlError>
            break;
 800ed4c:	e040      	b.n	800edd0 <USBD_StdEPReq+0x294>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 800ed4e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ed52:	2b00      	cmp	r3, #0
 800ed54:	da0b      	bge.n	800ed6e <USBD_StdEPReq+0x232>
 800ed56:	7bbb      	ldrb	r3, [r7, #14]
 800ed58:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ed5c:	4613      	mov	r3, r2
 800ed5e:	009b      	lsls	r3, r3, #2
 800ed60:	4413      	add	r3, r2
 800ed62:	009b      	lsls	r3, r3, #2
 800ed64:	3310      	adds	r3, #16
 800ed66:	687a      	ldr	r2, [r7, #4]
 800ed68:	4413      	add	r3, r2
 800ed6a:	3304      	adds	r3, #4
 800ed6c:	e00a      	b.n	800ed84 <USBD_StdEPReq+0x248>
          &pdev->ep_out[ep_addr & 0x7FU];
 800ed6e:	7bbb      	ldrb	r3, [r7, #14]
 800ed70:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 800ed74:	4613      	mov	r3, r2
 800ed76:	009b      	lsls	r3, r3, #2
 800ed78:	4413      	add	r3, r2
 800ed7a:	009b      	lsls	r3, r3, #2
 800ed7c:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 800ed80:	687a      	ldr	r2, [r7, #4]
 800ed82:	4413      	add	r3, r2
 800ed84:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800ed86:	7bbb      	ldrb	r3, [r7, #14]
 800ed88:	2b00      	cmp	r3, #0
 800ed8a:	d002      	beq.n	800ed92 <USBD_StdEPReq+0x256>
 800ed8c:	7bbb      	ldrb	r3, [r7, #14]
 800ed8e:	2b80      	cmp	r3, #128	; 0x80
 800ed90:	d103      	bne.n	800ed9a <USBD_StdEPReq+0x25e>
          {
            pep->status = 0x0000U;
 800ed92:	68bb      	ldr	r3, [r7, #8]
 800ed94:	2200      	movs	r2, #0
 800ed96:	601a      	str	r2, [r3, #0]
 800ed98:	e00e      	b.n	800edb8 <USBD_StdEPReq+0x27c>
          }
          else if(USBD_LL_IsStallEP(pdev, ep_addr))
 800ed9a:	7bbb      	ldrb	r3, [r7, #14]
 800ed9c:	4619      	mov	r1, r3
 800ed9e:	6878      	ldr	r0, [r7, #4]
 800eda0:	f001 f870 	bl	800fe84 <USBD_LL_IsStallEP>
 800eda4:	4603      	mov	r3, r0
 800eda6:	2b00      	cmp	r3, #0
 800eda8:	d003      	beq.n	800edb2 <USBD_StdEPReq+0x276>
          {
            pep->status = 0x0001U;
 800edaa:	68bb      	ldr	r3, [r7, #8]
 800edac:	2201      	movs	r2, #1
 800edae:	601a      	str	r2, [r3, #0]
 800edb0:	e002      	b.n	800edb8 <USBD_StdEPReq+0x27c>
          }
          else
          {
            pep->status = 0x0000U;
 800edb2:	68bb      	ldr	r3, [r7, #8]
 800edb4:	2200      	movs	r2, #0
 800edb6:	601a      	str	r2, [r3, #0]
          }

          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 800edb8:	68bb      	ldr	r3, [r7, #8]
 800edba:	2202      	movs	r2, #2
 800edbc:	4619      	mov	r1, r3
 800edbe:	6878      	ldr	r0, [r7, #4]
 800edc0:	f000 fb26 	bl	800f410 <USBD_CtlSendData>
          break;
 800edc4:	e004      	b.n	800edd0 <USBD_StdEPReq+0x294>

      default:
        USBD_CtlError(pdev, req);
 800edc6:	6839      	ldr	r1, [r7, #0]
 800edc8:	6878      	ldr	r0, [r7, #4]
 800edca:	f000 fab6 	bl	800f33a <USBD_CtlError>
        break;
 800edce:	bf00      	nop
      }
      break;
 800edd0:	e004      	b.n	800eddc <USBD_StdEPReq+0x2a0>

    default:
      USBD_CtlError(pdev, req);
 800edd2:	6839      	ldr	r1, [r7, #0]
 800edd4:	6878      	ldr	r0, [r7, #4]
 800edd6:	f000 fab0 	bl	800f33a <USBD_CtlError>
      break;
 800edda:	bf00      	nop
    }
    break;
 800eddc:	e004      	b.n	800ede8 <USBD_StdEPReq+0x2ac>

  default:
    USBD_CtlError(pdev, req);
 800edde:	6839      	ldr	r1, [r7, #0]
 800ede0:	6878      	ldr	r0, [r7, #4]
 800ede2:	f000 faaa 	bl	800f33a <USBD_CtlError>
    break;
 800ede6:	bf00      	nop
  }

  return ret;
 800ede8:	7bfb      	ldrb	r3, [r7, #15]
}
 800edea:	4618      	mov	r0, r3
 800edec:	3710      	adds	r7, #16
 800edee:	46bd      	mov	sp, r7
 800edf0:	bd80      	pop	{r7, pc}
	...

0800edf4 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev ,
                               USBD_SetupReqTypedef *req)
{
 800edf4:	b580      	push	{r7, lr}
 800edf6:	b084      	sub	sp, #16
 800edf8:	af00      	add	r7, sp, #0
 800edfa:	6078      	str	r0, [r7, #4]
 800edfc:	6039      	str	r1, [r7, #0]
  uint16_t len;
  uint8_t *pbuf;


  switch (req->wValue >> 8)
 800edfe:	683b      	ldr	r3, [r7, #0]
 800ee00:	885b      	ldrh	r3, [r3, #2]
 800ee02:	0a1b      	lsrs	r3, r3, #8
 800ee04:	b29b      	uxth	r3, r3
 800ee06:	3b01      	subs	r3, #1
 800ee08:	2b06      	cmp	r3, #6
 800ee0a:	f200 80c9 	bhi.w	800efa0 <USBD_GetDescriptor+0x1ac>
 800ee0e:	a201      	add	r2, pc, #4	; (adr r2, 800ee14 <USBD_GetDescriptor+0x20>)
 800ee10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ee14:	0800ee31 	.word	0x0800ee31
 800ee18:	0800ee49 	.word	0x0800ee49
 800ee1c:	0800ee89 	.word	0x0800ee89
 800ee20:	0800efa1 	.word	0x0800efa1
 800ee24:	0800efa1 	.word	0x0800efa1
 800ee28:	0800ef4d 	.word	0x0800ef4d
 800ee2c:	0800ef73 	.word	0x0800ef73
  case USB_DESC_TYPE_BOS:
    pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
    break;
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800ee30:	687b      	ldr	r3, [r7, #4]
 800ee32:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800ee36:	681b      	ldr	r3, [r3, #0]
 800ee38:	687a      	ldr	r2, [r7, #4]
 800ee3a:	7c12      	ldrb	r2, [r2, #16]
 800ee3c:	f107 010a 	add.w	r1, r7, #10
 800ee40:	4610      	mov	r0, r2
 800ee42:	4798      	blx	r3
 800ee44:	60f8      	str	r0, [r7, #12]
    break;
 800ee46:	e0b0      	b.n	800efaa <USBD_GetDescriptor+0x1b6>

  case USB_DESC_TYPE_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH )
 800ee48:	687b      	ldr	r3, [r7, #4]
 800ee4a:	7c1b      	ldrb	r3, [r3, #16]
 800ee4c:	2b00      	cmp	r3, #0
 800ee4e:	d10d      	bne.n	800ee6c <USBD_GetDescriptor+0x78>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetHSConfigDescriptor(&len);
 800ee50:	687b      	ldr	r3, [r7, #4]
 800ee52:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800ee56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ee58:	f107 020a 	add.w	r2, r7, #10
 800ee5c:	4610      	mov	r0, r2
 800ee5e:	4798      	blx	r3
 800ee60:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800ee62:	68fb      	ldr	r3, [r7, #12]
 800ee64:	3301      	adds	r3, #1
 800ee66:	2202      	movs	r2, #2
 800ee68:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 800ee6a:	e09e      	b.n	800efaa <USBD_GetDescriptor+0x1b6>
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 800ee6c:	687b      	ldr	r3, [r7, #4]
 800ee6e:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800ee72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ee74:	f107 020a 	add.w	r2, r7, #10
 800ee78:	4610      	mov	r0, r2
 800ee7a:	4798      	blx	r3
 800ee7c:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800ee7e:	68fb      	ldr	r3, [r7, #12]
 800ee80:	3301      	adds	r3, #1
 800ee82:	2202      	movs	r2, #2
 800ee84:	701a      	strb	r2, [r3, #0]
    break;
 800ee86:	e090      	b.n	800efaa <USBD_GetDescriptor+0x1b6>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 800ee88:	683b      	ldr	r3, [r7, #0]
 800ee8a:	885b      	ldrh	r3, [r3, #2]
 800ee8c:	b2db      	uxtb	r3, r3
 800ee8e:	2b05      	cmp	r3, #5
 800ee90:	d856      	bhi.n	800ef40 <USBD_GetDescriptor+0x14c>
 800ee92:	a201      	add	r2, pc, #4	; (adr r2, 800ee98 <USBD_GetDescriptor+0xa4>)
 800ee94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ee98:	0800eeb1 	.word	0x0800eeb1
 800ee9c:	0800eec9 	.word	0x0800eec9
 800eea0:	0800eee1 	.word	0x0800eee1
 800eea4:	0800eef9 	.word	0x0800eef9
 800eea8:	0800ef11 	.word	0x0800ef11
 800eeac:	0800ef29 	.word	0x0800ef29
    {
    case USBD_IDX_LANGID_STR:
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800eeb0:	687b      	ldr	r3, [r7, #4]
 800eeb2:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800eeb6:	685b      	ldr	r3, [r3, #4]
 800eeb8:	687a      	ldr	r2, [r7, #4]
 800eeba:	7c12      	ldrb	r2, [r2, #16]
 800eebc:	f107 010a 	add.w	r1, r7, #10
 800eec0:	4610      	mov	r0, r2
 800eec2:	4798      	blx	r3
 800eec4:	60f8      	str	r0, [r7, #12]
      break;
 800eec6:	e040      	b.n	800ef4a <USBD_GetDescriptor+0x156>

    case USBD_IDX_MFC_STR:
      pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800eec8:	687b      	ldr	r3, [r7, #4]
 800eeca:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800eece:	689b      	ldr	r3, [r3, #8]
 800eed0:	687a      	ldr	r2, [r7, #4]
 800eed2:	7c12      	ldrb	r2, [r2, #16]
 800eed4:	f107 010a 	add.w	r1, r7, #10
 800eed8:	4610      	mov	r0, r2
 800eeda:	4798      	blx	r3
 800eedc:	60f8      	str	r0, [r7, #12]
      break;
 800eede:	e034      	b.n	800ef4a <USBD_GetDescriptor+0x156>

    case USBD_IDX_PRODUCT_STR:
      pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800eee0:	687b      	ldr	r3, [r7, #4]
 800eee2:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800eee6:	68db      	ldr	r3, [r3, #12]
 800eee8:	687a      	ldr	r2, [r7, #4]
 800eeea:	7c12      	ldrb	r2, [r2, #16]
 800eeec:	f107 010a 	add.w	r1, r7, #10
 800eef0:	4610      	mov	r0, r2
 800eef2:	4798      	blx	r3
 800eef4:	60f8      	str	r0, [r7, #12]
      break;
 800eef6:	e028      	b.n	800ef4a <USBD_GetDescriptor+0x156>

    case USBD_IDX_SERIAL_STR:
      pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800eef8:	687b      	ldr	r3, [r7, #4]
 800eefa:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800eefe:	691b      	ldr	r3, [r3, #16]
 800ef00:	687a      	ldr	r2, [r7, #4]
 800ef02:	7c12      	ldrb	r2, [r2, #16]
 800ef04:	f107 010a 	add.w	r1, r7, #10
 800ef08:	4610      	mov	r0, r2
 800ef0a:	4798      	blx	r3
 800ef0c:	60f8      	str	r0, [r7, #12]
      break;
 800ef0e:	e01c      	b.n	800ef4a <USBD_GetDescriptor+0x156>

    case USBD_IDX_CONFIG_STR:
      pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800ef10:	687b      	ldr	r3, [r7, #4]
 800ef12:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800ef16:	695b      	ldr	r3, [r3, #20]
 800ef18:	687a      	ldr	r2, [r7, #4]
 800ef1a:	7c12      	ldrb	r2, [r2, #16]
 800ef1c:	f107 010a 	add.w	r1, r7, #10
 800ef20:	4610      	mov	r0, r2
 800ef22:	4798      	blx	r3
 800ef24:	60f8      	str	r0, [r7, #12]
      break;
 800ef26:	e010      	b.n	800ef4a <USBD_GetDescriptor+0x156>

    case USBD_IDX_INTERFACE_STR:
      pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800ef28:	687b      	ldr	r3, [r7, #4]
 800ef2a:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800ef2e:	699b      	ldr	r3, [r3, #24]
 800ef30:	687a      	ldr	r2, [r7, #4]
 800ef32:	7c12      	ldrb	r2, [r2, #16]
 800ef34:	f107 010a 	add.w	r1, r7, #10
 800ef38:	4610      	mov	r0, r2
 800ef3a:	4798      	blx	r3
 800ef3c:	60f8      	str	r0, [r7, #12]
      break;
 800ef3e:	e004      	b.n	800ef4a <USBD_GetDescriptor+0x156>
    default:
#if (USBD_SUPPORT_USER_STRING == 1U)
      pbuf = pdev->pClass->GetUsrStrDescriptor(pdev, (req->wValue) , &len);
      break;
#else
       USBD_CtlError(pdev , req);
 800ef40:	6839      	ldr	r1, [r7, #0]
 800ef42:	6878      	ldr	r0, [r7, #4]
 800ef44:	f000 f9f9 	bl	800f33a <USBD_CtlError>
      return;
 800ef48:	e04b      	b.n	800efe2 <USBD_GetDescriptor+0x1ee>
#endif
    }
    break;
 800ef4a:	e02e      	b.n	800efaa <USBD_GetDescriptor+0x1b6>
  case USB_DESC_TYPE_DEVICE_QUALIFIER:

    if(pdev->dev_speed == USBD_SPEED_HIGH)
 800ef4c:	687b      	ldr	r3, [r7, #4]
 800ef4e:	7c1b      	ldrb	r3, [r3, #16]
 800ef50:	2b00      	cmp	r3, #0
 800ef52:	d109      	bne.n	800ef68 <USBD_GetDescriptor+0x174>
    {
      pbuf = (uint8_t *)pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800ef54:	687b      	ldr	r3, [r7, #4]
 800ef56:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800ef5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ef5c:	f107 020a 	add.w	r2, r7, #10
 800ef60:	4610      	mov	r0, r2
 800ef62:	4798      	blx	r3
 800ef64:	60f8      	str	r0, [r7, #12]
      break;
 800ef66:	e020      	b.n	800efaa <USBD_GetDescriptor+0x1b6>
    }
    else
    {
      USBD_CtlError(pdev , req);
 800ef68:	6839      	ldr	r1, [r7, #0]
 800ef6a:	6878      	ldr	r0, [r7, #4]
 800ef6c:	f000 f9e5 	bl	800f33a <USBD_CtlError>
      return;
 800ef70:	e037      	b.n	800efe2 <USBD_GetDescriptor+0x1ee>
    }

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 800ef72:	687b      	ldr	r3, [r7, #4]
 800ef74:	7c1b      	ldrb	r3, [r3, #16]
 800ef76:	2b00      	cmp	r3, #0
 800ef78:	d10d      	bne.n	800ef96 <USBD_GetDescriptor+0x1a2>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800ef7a:	687b      	ldr	r3, [r7, #4]
 800ef7c:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800ef80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ef82:	f107 020a 	add.w	r2, r7, #10
 800ef86:	4610      	mov	r0, r2
 800ef88:	4798      	blx	r3
 800ef8a:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800ef8c:	68fb      	ldr	r3, [r7, #12]
 800ef8e:	3301      	adds	r3, #1
 800ef90:	2207      	movs	r2, #7
 800ef92:	701a      	strb	r2, [r3, #0]
      break;
 800ef94:	e009      	b.n	800efaa <USBD_GetDescriptor+0x1b6>
    }
    else
    {
      USBD_CtlError(pdev , req);
 800ef96:	6839      	ldr	r1, [r7, #0]
 800ef98:	6878      	ldr	r0, [r7, #4]
 800ef9a:	f000 f9ce 	bl	800f33a <USBD_CtlError>
      return;
 800ef9e:	e020      	b.n	800efe2 <USBD_GetDescriptor+0x1ee>
    }

  default:
     USBD_CtlError(pdev , req);
 800efa0:	6839      	ldr	r1, [r7, #0]
 800efa2:	6878      	ldr	r0, [r7, #4]
 800efa4:	f000 f9c9 	bl	800f33a <USBD_CtlError>
    return;
 800efa8:	e01b      	b.n	800efe2 <USBD_GetDescriptor+0x1ee>
  }

  if((len != 0U) && (req->wLength != 0U))
 800efaa:	897b      	ldrh	r3, [r7, #10]
 800efac:	2b00      	cmp	r3, #0
 800efae:	d011      	beq.n	800efd4 <USBD_GetDescriptor+0x1e0>
 800efb0:	683b      	ldr	r3, [r7, #0]
 800efb2:	88db      	ldrh	r3, [r3, #6]
 800efb4:	2b00      	cmp	r3, #0
 800efb6:	d00d      	beq.n	800efd4 <USBD_GetDescriptor+0x1e0>
  {

    len = MIN(len, req->wLength);
 800efb8:	683b      	ldr	r3, [r7, #0]
 800efba:	88da      	ldrh	r2, [r3, #6]
 800efbc:	897b      	ldrh	r3, [r7, #10]
 800efbe:	4293      	cmp	r3, r2
 800efc0:	bf28      	it	cs
 800efc2:	4613      	movcs	r3, r2
 800efc4:	b29b      	uxth	r3, r3
 800efc6:	817b      	strh	r3, [r7, #10]

    USBD_CtlSendData (pdev, pbuf, len);
 800efc8:	897b      	ldrh	r3, [r7, #10]
 800efca:	461a      	mov	r2, r3
 800efcc:	68f9      	ldr	r1, [r7, #12]
 800efce:	6878      	ldr	r0, [r7, #4]
 800efd0:	f000 fa1e 	bl	800f410 <USBD_CtlSendData>
  }

  if(req->wLength == 0U)
 800efd4:	683b      	ldr	r3, [r7, #0]
 800efd6:	88db      	ldrh	r3, [r3, #6]
 800efd8:	2b00      	cmp	r3, #0
 800efda:	d102      	bne.n	800efe2 <USBD_GetDescriptor+0x1ee>
  {
   USBD_CtlSendStatus(pdev);
 800efdc:	6878      	ldr	r0, [r7, #4]
 800efde:	f000 fa75 	bl	800f4cc <USBD_CtlSendStatus>
  }
}
 800efe2:	3710      	adds	r7, #16
 800efe4:	46bd      	mov	sp, r7
 800efe6:	bd80      	pop	{r7, pc}

0800efe8 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 800efe8:	b580      	push	{r7, lr}
 800efea:	b084      	sub	sp, #16
 800efec:	af00      	add	r7, sp, #0
 800efee:	6078      	str	r0, [r7, #4]
 800eff0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800eff2:	683b      	ldr	r3, [r7, #0]
 800eff4:	889b      	ldrh	r3, [r3, #4]
 800eff6:	2b00      	cmp	r3, #0
 800eff8:	d130      	bne.n	800f05c <USBD_SetAddress+0x74>
 800effa:	683b      	ldr	r3, [r7, #0]
 800effc:	88db      	ldrh	r3, [r3, #6]
 800effe:	2b00      	cmp	r3, #0
 800f000:	d12c      	bne.n	800f05c <USBD_SetAddress+0x74>
 800f002:	683b      	ldr	r3, [r7, #0]
 800f004:	885b      	ldrh	r3, [r3, #2]
 800f006:	2b7f      	cmp	r3, #127	; 0x7f
 800f008:	d828      	bhi.n	800f05c <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800f00a:	683b      	ldr	r3, [r7, #0]
 800f00c:	885b      	ldrh	r3, [r3, #2]
 800f00e:	b2db      	uxtb	r3, r3
 800f010:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f014:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f016:	687b      	ldr	r3, [r7, #4]
 800f018:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800f01c:	2b03      	cmp	r3, #3
 800f01e:	d104      	bne.n	800f02a <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev , req);
 800f020:	6839      	ldr	r1, [r7, #0]
 800f022:	6878      	ldr	r0, [r7, #4]
 800f024:	f000 f989 	bl	800f33a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f028:	e01c      	b.n	800f064 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800f02a:	687b      	ldr	r3, [r7, #4]
 800f02c:	7bfa      	ldrb	r2, [r7, #15]
 800f02e:	f883 2276 	strb.w	r2, [r3, #630]	; 0x276
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800f032:	7bfb      	ldrb	r3, [r7, #15]
 800f034:	4619      	mov	r1, r3
 800f036:	6878      	ldr	r0, [r7, #4]
 800f038:	f000 ff50 	bl	800fedc <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800f03c:	6878      	ldr	r0, [r7, #4]
 800f03e:	f000 fa45 	bl	800f4cc <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800f042:	7bfb      	ldrb	r3, [r7, #15]
 800f044:	2b00      	cmp	r3, #0
 800f046:	d004      	beq.n	800f052 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800f048:	687b      	ldr	r3, [r7, #4]
 800f04a:	2202      	movs	r2, #2
 800f04c:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f050:	e008      	b.n	800f064 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800f052:	687b      	ldr	r3, [r7, #4]
 800f054:	2201      	movs	r2, #1
 800f056:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f05a:	e003      	b.n	800f064 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800f05c:	6839      	ldr	r1, [r7, #0]
 800f05e:	6878      	ldr	r0, [r7, #4]
 800f060:	f000 f96b 	bl	800f33a <USBD_CtlError>
  }
}
 800f064:	bf00      	nop
 800f066:	3710      	adds	r7, #16
 800f068:	46bd      	mov	sp, r7
 800f06a:	bd80      	pop	{r7, pc}

0800f06c <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f06c:	b580      	push	{r7, lr}
 800f06e:	b082      	sub	sp, #8
 800f070:	af00      	add	r7, sp, #0
 800f072:	6078      	str	r0, [r7, #4]
 800f074:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800f076:	683b      	ldr	r3, [r7, #0]
 800f078:	885b      	ldrh	r3, [r3, #2]
 800f07a:	b2da      	uxtb	r2, r3
 800f07c:	4b41      	ldr	r3, [pc, #260]	; (800f184 <USBD_SetConfig+0x118>)
 800f07e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800f080:	4b40      	ldr	r3, [pc, #256]	; (800f184 <USBD_SetConfig+0x118>)
 800f082:	781b      	ldrb	r3, [r3, #0]
 800f084:	2b01      	cmp	r3, #1
 800f086:	d904      	bls.n	800f092 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 800f088:	6839      	ldr	r1, [r7, #0]
 800f08a:	6878      	ldr	r0, [r7, #4]
 800f08c:	f000 f955 	bl	800f33a <USBD_CtlError>
 800f090:	e075      	b.n	800f17e <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 800f092:	687b      	ldr	r3, [r7, #4]
 800f094:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800f098:	2b02      	cmp	r3, #2
 800f09a:	d002      	beq.n	800f0a2 <USBD_SetConfig+0x36>
 800f09c:	2b03      	cmp	r3, #3
 800f09e:	d023      	beq.n	800f0e8 <USBD_SetConfig+0x7c>
 800f0a0:	e062      	b.n	800f168 <USBD_SetConfig+0xfc>
    {
    case USBD_STATE_ADDRESSED:
      if (cfgidx)
 800f0a2:	4b38      	ldr	r3, [pc, #224]	; (800f184 <USBD_SetConfig+0x118>)
 800f0a4:	781b      	ldrb	r3, [r3, #0]
 800f0a6:	2b00      	cmp	r3, #0
 800f0a8:	d01a      	beq.n	800f0e0 <USBD_SetConfig+0x74>
      {
        pdev->dev_config = cfgidx;
 800f0aa:	4b36      	ldr	r3, [pc, #216]	; (800f184 <USBD_SetConfig+0x118>)
 800f0ac:	781b      	ldrb	r3, [r3, #0]
 800f0ae:	461a      	mov	r2, r3
 800f0b0:	687b      	ldr	r3, [r7, #4]
 800f0b2:	605a      	str	r2, [r3, #4]
        pdev->dev_state = USBD_STATE_CONFIGURED;
 800f0b4:	687b      	ldr	r3, [r7, #4]
 800f0b6:	2203      	movs	r2, #3
 800f0b8:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800f0bc:	4b31      	ldr	r3, [pc, #196]	; (800f184 <USBD_SetConfig+0x118>)
 800f0be:	781b      	ldrb	r3, [r3, #0]
 800f0c0:	4619      	mov	r1, r3
 800f0c2:	6878      	ldr	r0, [r7, #4]
 800f0c4:	f7ff fa2a 	bl	800e51c <USBD_SetClassConfig>
 800f0c8:	4603      	mov	r3, r0
 800f0ca:	2b02      	cmp	r3, #2
 800f0cc:	d104      	bne.n	800f0d8 <USBD_SetConfig+0x6c>
        {
          USBD_CtlError(pdev, req);
 800f0ce:	6839      	ldr	r1, [r7, #0]
 800f0d0:	6878      	ldr	r0, [r7, #4]
 800f0d2:	f000 f932 	bl	800f33a <USBD_CtlError>
          return;
 800f0d6:	e052      	b.n	800f17e <USBD_SetConfig+0x112>
        }
        USBD_CtlSendStatus(pdev);
 800f0d8:	6878      	ldr	r0, [r7, #4]
 800f0da:	f000 f9f7 	bl	800f4cc <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlSendStatus(pdev);
      }
      break;
 800f0de:	e04e      	b.n	800f17e <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 800f0e0:	6878      	ldr	r0, [r7, #4]
 800f0e2:	f000 f9f3 	bl	800f4cc <USBD_CtlSendStatus>
      break;
 800f0e6:	e04a      	b.n	800f17e <USBD_SetConfig+0x112>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800f0e8:	4b26      	ldr	r3, [pc, #152]	; (800f184 <USBD_SetConfig+0x118>)
 800f0ea:	781b      	ldrb	r3, [r3, #0]
 800f0ec:	2b00      	cmp	r3, #0
 800f0ee:	d112      	bne.n	800f116 <USBD_SetConfig+0xaa>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800f0f0:	687b      	ldr	r3, [r7, #4]
 800f0f2:	2202      	movs	r2, #2
 800f0f4:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
        pdev->dev_config = cfgidx;
 800f0f8:	4b22      	ldr	r3, [pc, #136]	; (800f184 <USBD_SetConfig+0x118>)
 800f0fa:	781b      	ldrb	r3, [r3, #0]
 800f0fc:	461a      	mov	r2, r3
 800f0fe:	687b      	ldr	r3, [r7, #4]
 800f100:	605a      	str	r2, [r3, #4]
        USBD_ClrClassConfig(pdev, cfgidx);
 800f102:	4b20      	ldr	r3, [pc, #128]	; (800f184 <USBD_SetConfig+0x118>)
 800f104:	781b      	ldrb	r3, [r3, #0]
 800f106:	4619      	mov	r1, r3
 800f108:	6878      	ldr	r0, [r7, #4]
 800f10a:	f7ff fa26 	bl	800e55a <USBD_ClrClassConfig>
        USBD_CtlSendStatus(pdev);
 800f10e:	6878      	ldr	r0, [r7, #4]
 800f110:	f000 f9dc 	bl	800f4cc <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlSendStatus(pdev);
      }
      break;
 800f114:	e033      	b.n	800f17e <USBD_SetConfig+0x112>
      else if (cfgidx != pdev->dev_config)
 800f116:	4b1b      	ldr	r3, [pc, #108]	; (800f184 <USBD_SetConfig+0x118>)
 800f118:	781b      	ldrb	r3, [r3, #0]
 800f11a:	461a      	mov	r2, r3
 800f11c:	687b      	ldr	r3, [r7, #4]
 800f11e:	685b      	ldr	r3, [r3, #4]
 800f120:	429a      	cmp	r2, r3
 800f122:	d01d      	beq.n	800f160 <USBD_SetConfig+0xf4>
        USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800f124:	687b      	ldr	r3, [r7, #4]
 800f126:	685b      	ldr	r3, [r3, #4]
 800f128:	b2db      	uxtb	r3, r3
 800f12a:	4619      	mov	r1, r3
 800f12c:	6878      	ldr	r0, [r7, #4]
 800f12e:	f7ff fa14 	bl	800e55a <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800f132:	4b14      	ldr	r3, [pc, #80]	; (800f184 <USBD_SetConfig+0x118>)
 800f134:	781b      	ldrb	r3, [r3, #0]
 800f136:	461a      	mov	r2, r3
 800f138:	687b      	ldr	r3, [r7, #4]
 800f13a:	605a      	str	r2, [r3, #4]
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800f13c:	4b11      	ldr	r3, [pc, #68]	; (800f184 <USBD_SetConfig+0x118>)
 800f13e:	781b      	ldrb	r3, [r3, #0]
 800f140:	4619      	mov	r1, r3
 800f142:	6878      	ldr	r0, [r7, #4]
 800f144:	f7ff f9ea 	bl	800e51c <USBD_SetClassConfig>
 800f148:	4603      	mov	r3, r0
 800f14a:	2b02      	cmp	r3, #2
 800f14c:	d104      	bne.n	800f158 <USBD_SetConfig+0xec>
          USBD_CtlError(pdev, req);
 800f14e:	6839      	ldr	r1, [r7, #0]
 800f150:	6878      	ldr	r0, [r7, #4]
 800f152:	f000 f8f2 	bl	800f33a <USBD_CtlError>
          return;
 800f156:	e012      	b.n	800f17e <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 800f158:	6878      	ldr	r0, [r7, #4]
 800f15a:	f000 f9b7 	bl	800f4cc <USBD_CtlSendStatus>
      break;
 800f15e:	e00e      	b.n	800f17e <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 800f160:	6878      	ldr	r0, [r7, #4]
 800f162:	f000 f9b3 	bl	800f4cc <USBD_CtlSendStatus>
      break;
 800f166:	e00a      	b.n	800f17e <USBD_SetConfig+0x112>

    default:
      USBD_CtlError(pdev, req);
 800f168:	6839      	ldr	r1, [r7, #0]
 800f16a:	6878      	ldr	r0, [r7, #4]
 800f16c:	f000 f8e5 	bl	800f33a <USBD_CtlError>
      USBD_ClrClassConfig(pdev, cfgidx);
 800f170:	4b04      	ldr	r3, [pc, #16]	; (800f184 <USBD_SetConfig+0x118>)
 800f172:	781b      	ldrb	r3, [r3, #0]
 800f174:	4619      	mov	r1, r3
 800f176:	6878      	ldr	r0, [r7, #4]
 800f178:	f7ff f9ef 	bl	800e55a <USBD_ClrClassConfig>
      break;
 800f17c:	bf00      	nop
    }
  }
}
 800f17e:	3708      	adds	r7, #8
 800f180:	46bd      	mov	sp, r7
 800f182:	bd80      	pop	{r7, pc}
 800f184:	20000778 	.word	0x20000778

0800f188 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f188:	b580      	push	{r7, lr}
 800f18a:	b082      	sub	sp, #8
 800f18c:	af00      	add	r7, sp, #0
 800f18e:	6078      	str	r0, [r7, #4]
 800f190:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800f192:	683b      	ldr	r3, [r7, #0]
 800f194:	88db      	ldrh	r3, [r3, #6]
 800f196:	2b01      	cmp	r3, #1
 800f198:	d004      	beq.n	800f1a4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev , req);
 800f19a:	6839      	ldr	r1, [r7, #0]
 800f19c:	6878      	ldr	r0, [r7, #4]
 800f19e:	f000 f8cc 	bl	800f33a <USBD_CtlError>
    default:
      USBD_CtlError(pdev , req);
      break;
    }
  }
}
 800f1a2:	e021      	b.n	800f1e8 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 800f1a4:	687b      	ldr	r3, [r7, #4]
 800f1a6:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800f1aa:	2b01      	cmp	r3, #1
 800f1ac:	db17      	blt.n	800f1de <USBD_GetConfig+0x56>
 800f1ae:	2b02      	cmp	r3, #2
 800f1b0:	dd02      	ble.n	800f1b8 <USBD_GetConfig+0x30>
 800f1b2:	2b03      	cmp	r3, #3
 800f1b4:	d00b      	beq.n	800f1ce <USBD_GetConfig+0x46>
 800f1b6:	e012      	b.n	800f1de <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 800f1b8:	687b      	ldr	r3, [r7, #4]
 800f1ba:	2200      	movs	r2, #0
 800f1bc:	609a      	str	r2, [r3, #8]
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800f1be:	687b      	ldr	r3, [r7, #4]
 800f1c0:	3308      	adds	r3, #8
 800f1c2:	2201      	movs	r2, #1
 800f1c4:	4619      	mov	r1, r3
 800f1c6:	6878      	ldr	r0, [r7, #4]
 800f1c8:	f000 f922 	bl	800f410 <USBD_CtlSendData>
      break;
 800f1cc:	e00c      	b.n	800f1e8 <USBD_GetConfig+0x60>
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800f1ce:	687b      	ldr	r3, [r7, #4]
 800f1d0:	3304      	adds	r3, #4
 800f1d2:	2201      	movs	r2, #1
 800f1d4:	4619      	mov	r1, r3
 800f1d6:	6878      	ldr	r0, [r7, #4]
 800f1d8:	f000 f91a 	bl	800f410 <USBD_CtlSendData>
      break;
 800f1dc:	e004      	b.n	800f1e8 <USBD_GetConfig+0x60>
      USBD_CtlError(pdev , req);
 800f1de:	6839      	ldr	r1, [r7, #0]
 800f1e0:	6878      	ldr	r0, [r7, #4]
 800f1e2:	f000 f8aa 	bl	800f33a <USBD_CtlError>
      break;
 800f1e6:	bf00      	nop
}
 800f1e8:	bf00      	nop
 800f1ea:	3708      	adds	r7, #8
 800f1ec:	46bd      	mov	sp, r7
 800f1ee:	bd80      	pop	{r7, pc}

0800f1f0 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f1f0:	b580      	push	{r7, lr}
 800f1f2:	b082      	sub	sp, #8
 800f1f4:	af00      	add	r7, sp, #0
 800f1f6:	6078      	str	r0, [r7, #4]
 800f1f8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800f1fa:	687b      	ldr	r3, [r7, #4]
 800f1fc:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800f200:	3b01      	subs	r3, #1
 800f202:	2b02      	cmp	r3, #2
 800f204:	d81e      	bhi.n	800f244 <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if(req->wLength != 0x2U)
 800f206:	683b      	ldr	r3, [r7, #0]
 800f208:	88db      	ldrh	r3, [r3, #6]
 800f20a:	2b02      	cmp	r3, #2
 800f20c:	d004      	beq.n	800f218 <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 800f20e:	6839      	ldr	r1, [r7, #0]
 800f210:	6878      	ldr	r0, [r7, #4]
 800f212:	f000 f892 	bl	800f33a <USBD_CtlError>
      break;
 800f216:	e01a      	b.n	800f24e <USBD_GetStatus+0x5e>
    }

#if ( USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800f218:	687b      	ldr	r3, [r7, #4]
 800f21a:	2201      	movs	r2, #1
 800f21c:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup)
 800f21e:	687b      	ldr	r3, [r7, #4]
 800f220:	f8d3 327c 	ldr.w	r3, [r3, #636]	; 0x27c
 800f224:	2b00      	cmp	r3, #0
 800f226:	d005      	beq.n	800f234 <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800f228:	687b      	ldr	r3, [r7, #4]
 800f22a:	68db      	ldr	r3, [r3, #12]
 800f22c:	f043 0202 	orr.w	r2, r3, #2
 800f230:	687b      	ldr	r3, [r7, #4]
 800f232:	60da      	str	r2, [r3, #12]
    }

    USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800f234:	687b      	ldr	r3, [r7, #4]
 800f236:	330c      	adds	r3, #12
 800f238:	2202      	movs	r2, #2
 800f23a:	4619      	mov	r1, r3
 800f23c:	6878      	ldr	r0, [r7, #4]
 800f23e:	f000 f8e7 	bl	800f410 <USBD_CtlSendData>
    break;
 800f242:	e004      	b.n	800f24e <USBD_GetStatus+0x5e>

  default :
    USBD_CtlError(pdev , req);
 800f244:	6839      	ldr	r1, [r7, #0]
 800f246:	6878      	ldr	r0, [r7, #4]
 800f248:	f000 f877 	bl	800f33a <USBD_CtlError>
    break;
 800f24c:	bf00      	nop
  }
}
 800f24e:	bf00      	nop
 800f250:	3708      	adds	r7, #8
 800f252:	46bd      	mov	sp, r7
 800f254:	bd80      	pop	{r7, pc}

0800f256 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 800f256:	b580      	push	{r7, lr}
 800f258:	b082      	sub	sp, #8
 800f25a:	af00      	add	r7, sp, #0
 800f25c:	6078      	str	r0, [r7, #4]
 800f25e:	6039      	str	r1, [r7, #0]

  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800f260:	683b      	ldr	r3, [r7, #0]
 800f262:	885b      	ldrh	r3, [r3, #2]
 800f264:	2b01      	cmp	r3, #1
 800f266:	d106      	bne.n	800f276 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800f268:	687b      	ldr	r3, [r7, #4]
 800f26a:	2201      	movs	r2, #1
 800f26c:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c
    USBD_CtlSendStatus(pdev);
 800f270:	6878      	ldr	r0, [r7, #4]
 800f272:	f000 f92b 	bl	800f4cc <USBD_CtlSendStatus>
  }

}
 800f276:	bf00      	nop
 800f278:	3708      	adds	r7, #8
 800f27a:	46bd      	mov	sp, r7
 800f27c:	bd80      	pop	{r7, pc}

0800f27e <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 800f27e:	b580      	push	{r7, lr}
 800f280:	b082      	sub	sp, #8
 800f282:	af00      	add	r7, sp, #0
 800f284:	6078      	str	r0, [r7, #4]
 800f286:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800f288:	687b      	ldr	r3, [r7, #4]
 800f28a:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800f28e:	3b01      	subs	r3, #1
 800f290:	2b02      	cmp	r3, #2
 800f292:	d80b      	bhi.n	800f2ac <USBD_ClrFeature+0x2e>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800f294:	683b      	ldr	r3, [r7, #0]
 800f296:	885b      	ldrh	r3, [r3, #2]
 800f298:	2b01      	cmp	r3, #1
 800f29a:	d10c      	bne.n	800f2b6 <USBD_ClrFeature+0x38>
    {
      pdev->dev_remote_wakeup = 0U;
 800f29c:	687b      	ldr	r3, [r7, #4]
 800f29e:	2200      	movs	r2, #0
 800f2a0:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c
      USBD_CtlSendStatus(pdev);
 800f2a4:	6878      	ldr	r0, [r7, #4]
 800f2a6:	f000 f911 	bl	800f4cc <USBD_CtlSendStatus>
    }
    break;
 800f2aa:	e004      	b.n	800f2b6 <USBD_ClrFeature+0x38>

  default :
     USBD_CtlError(pdev , req);
 800f2ac:	6839      	ldr	r1, [r7, #0]
 800f2ae:	6878      	ldr	r0, [r7, #4]
 800f2b0:	f000 f843 	bl	800f33a <USBD_CtlError>
    break;
 800f2b4:	e000      	b.n	800f2b8 <USBD_ClrFeature+0x3a>
    break;
 800f2b6:	bf00      	nop
  }
}
 800f2b8:	bf00      	nop
 800f2ba:	3708      	adds	r7, #8
 800f2bc:	46bd      	mov	sp, r7
 800f2be:	bd80      	pop	{r7, pc}

0800f2c0 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800f2c0:	b480      	push	{r7}
 800f2c2:	b083      	sub	sp, #12
 800f2c4:	af00      	add	r7, sp, #0
 800f2c6:	6078      	str	r0, [r7, #4]
 800f2c8:	6039      	str	r1, [r7, #0]
  req->bmRequest     = *(uint8_t *)  (pdata);
 800f2ca:	683b      	ldr	r3, [r7, #0]
 800f2cc:	781a      	ldrb	r2, [r3, #0]
 800f2ce:	687b      	ldr	r3, [r7, #4]
 800f2d0:	701a      	strb	r2, [r3, #0]
  req->bRequest      = *(uint8_t *)  (pdata +  1);
 800f2d2:	683b      	ldr	r3, [r7, #0]
 800f2d4:	785a      	ldrb	r2, [r3, #1]
 800f2d6:	687b      	ldr	r3, [r7, #4]
 800f2d8:	705a      	strb	r2, [r3, #1]
  req->wValue        = SWAPBYTE      (pdata +  2);
 800f2da:	683b      	ldr	r3, [r7, #0]
 800f2dc:	3302      	adds	r3, #2
 800f2de:	781b      	ldrb	r3, [r3, #0]
 800f2e0:	b29a      	uxth	r2, r3
 800f2e2:	683b      	ldr	r3, [r7, #0]
 800f2e4:	3303      	adds	r3, #3
 800f2e6:	781b      	ldrb	r3, [r3, #0]
 800f2e8:	b29b      	uxth	r3, r3
 800f2ea:	021b      	lsls	r3, r3, #8
 800f2ec:	b29b      	uxth	r3, r3
 800f2ee:	4413      	add	r3, r2
 800f2f0:	b29a      	uxth	r2, r3
 800f2f2:	687b      	ldr	r3, [r7, #4]
 800f2f4:	805a      	strh	r2, [r3, #2]
  req->wIndex        = SWAPBYTE      (pdata +  4);
 800f2f6:	683b      	ldr	r3, [r7, #0]
 800f2f8:	3304      	adds	r3, #4
 800f2fa:	781b      	ldrb	r3, [r3, #0]
 800f2fc:	b29a      	uxth	r2, r3
 800f2fe:	683b      	ldr	r3, [r7, #0]
 800f300:	3305      	adds	r3, #5
 800f302:	781b      	ldrb	r3, [r3, #0]
 800f304:	b29b      	uxth	r3, r3
 800f306:	021b      	lsls	r3, r3, #8
 800f308:	b29b      	uxth	r3, r3
 800f30a:	4413      	add	r3, r2
 800f30c:	b29a      	uxth	r2, r3
 800f30e:	687b      	ldr	r3, [r7, #4]
 800f310:	809a      	strh	r2, [r3, #4]
  req->wLength       = SWAPBYTE      (pdata +  6);
 800f312:	683b      	ldr	r3, [r7, #0]
 800f314:	3306      	adds	r3, #6
 800f316:	781b      	ldrb	r3, [r3, #0]
 800f318:	b29a      	uxth	r2, r3
 800f31a:	683b      	ldr	r3, [r7, #0]
 800f31c:	3307      	adds	r3, #7
 800f31e:	781b      	ldrb	r3, [r3, #0]
 800f320:	b29b      	uxth	r3, r3
 800f322:	021b      	lsls	r3, r3, #8
 800f324:	b29b      	uxth	r3, r3
 800f326:	4413      	add	r3, r2
 800f328:	b29a      	uxth	r2, r3
 800f32a:	687b      	ldr	r3, [r7, #4]
 800f32c:	80da      	strh	r2, [r3, #6]

}
 800f32e:	bf00      	nop
 800f330:	370c      	adds	r7, #12
 800f332:	46bd      	mov	sp, r7
 800f334:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f338:	4770      	bx	lr

0800f33a <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError( USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 800f33a:	b580      	push	{r7, lr}
 800f33c:	b082      	sub	sp, #8
 800f33e:	af00      	add	r7, sp, #0
 800f340:	6078      	str	r0, [r7, #4]
 800f342:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev , 0x80U);
 800f344:	2180      	movs	r1, #128	; 0x80
 800f346:	6878      	ldr	r0, [r7, #4]
 800f348:	f000 fd5e 	bl	800fe08 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0U);
 800f34c:	2100      	movs	r1, #0
 800f34e:	6878      	ldr	r0, [r7, #4]
 800f350:	f000 fd5a 	bl	800fe08 <USBD_LL_StallEP>
}
 800f354:	bf00      	nop
 800f356:	3708      	adds	r7, #8
 800f358:	46bd      	mov	sp, r7
 800f35a:	bd80      	pop	{r7, pc}

0800f35c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800f35c:	b580      	push	{r7, lr}
 800f35e:	b086      	sub	sp, #24
 800f360:	af00      	add	r7, sp, #0
 800f362:	60f8      	str	r0, [r7, #12]
 800f364:	60b9      	str	r1, [r7, #8]
 800f366:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800f368:	2300      	movs	r3, #0
 800f36a:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 800f36c:	68fb      	ldr	r3, [r7, #12]
 800f36e:	2b00      	cmp	r3, #0
 800f370:	d032      	beq.n	800f3d8 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800f372:	68f8      	ldr	r0, [r7, #12]
 800f374:	f000 f834 	bl	800f3e0 <USBD_GetLen>
 800f378:	4603      	mov	r3, r0
 800f37a:	3301      	adds	r3, #1
 800f37c:	b29b      	uxth	r3, r3
 800f37e:	005b      	lsls	r3, r3, #1
 800f380:	b29a      	uxth	r2, r3
 800f382:	687b      	ldr	r3, [r7, #4]
 800f384:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800f386:	7dfb      	ldrb	r3, [r7, #23]
 800f388:	1c5a      	adds	r2, r3, #1
 800f38a:	75fa      	strb	r2, [r7, #23]
 800f38c:	461a      	mov	r2, r3
 800f38e:	68bb      	ldr	r3, [r7, #8]
 800f390:	4413      	add	r3, r2
 800f392:	687a      	ldr	r2, [r7, #4]
 800f394:	7812      	ldrb	r2, [r2, #0]
 800f396:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800f398:	7dfb      	ldrb	r3, [r7, #23]
 800f39a:	1c5a      	adds	r2, r3, #1
 800f39c:	75fa      	strb	r2, [r7, #23]
 800f39e:	461a      	mov	r2, r3
 800f3a0:	68bb      	ldr	r3, [r7, #8]
 800f3a2:	4413      	add	r3, r2
 800f3a4:	2203      	movs	r2, #3
 800f3a6:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800f3a8:	e012      	b.n	800f3d0 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 800f3aa:	68fb      	ldr	r3, [r7, #12]
 800f3ac:	1c5a      	adds	r2, r3, #1
 800f3ae:	60fa      	str	r2, [r7, #12]
 800f3b0:	7dfa      	ldrb	r2, [r7, #23]
 800f3b2:	1c51      	adds	r1, r2, #1
 800f3b4:	75f9      	strb	r1, [r7, #23]
 800f3b6:	4611      	mov	r1, r2
 800f3b8:	68ba      	ldr	r2, [r7, #8]
 800f3ba:	440a      	add	r2, r1
 800f3bc:	781b      	ldrb	r3, [r3, #0]
 800f3be:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800f3c0:	7dfb      	ldrb	r3, [r7, #23]
 800f3c2:	1c5a      	adds	r2, r3, #1
 800f3c4:	75fa      	strb	r2, [r7, #23]
 800f3c6:	461a      	mov	r2, r3
 800f3c8:	68bb      	ldr	r3, [r7, #8]
 800f3ca:	4413      	add	r3, r2
 800f3cc:	2200      	movs	r2, #0
 800f3ce:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800f3d0:	68fb      	ldr	r3, [r7, #12]
 800f3d2:	781b      	ldrb	r3, [r3, #0]
 800f3d4:	2b00      	cmp	r3, #0
 800f3d6:	d1e8      	bne.n	800f3aa <USBD_GetString+0x4e>
    }
  }
}
 800f3d8:	bf00      	nop
 800f3da:	3718      	adds	r7, #24
 800f3dc:	46bd      	mov	sp, r7
 800f3de:	bd80      	pop	{r7, pc}

0800f3e0 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800f3e0:	b480      	push	{r7}
 800f3e2:	b085      	sub	sp, #20
 800f3e4:	af00      	add	r7, sp, #0
 800f3e6:	6078      	str	r0, [r7, #4]
    uint8_t  len = 0U;
 800f3e8:	2300      	movs	r3, #0
 800f3ea:	73fb      	strb	r3, [r7, #15]

    while (*buf != '\0')
 800f3ec:	e005      	b.n	800f3fa <USBD_GetLen+0x1a>
    {
        len++;
 800f3ee:	7bfb      	ldrb	r3, [r7, #15]
 800f3f0:	3301      	adds	r3, #1
 800f3f2:	73fb      	strb	r3, [r7, #15]
        buf++;
 800f3f4:	687b      	ldr	r3, [r7, #4]
 800f3f6:	3301      	adds	r3, #1
 800f3f8:	607b      	str	r3, [r7, #4]
    while (*buf != '\0')
 800f3fa:	687b      	ldr	r3, [r7, #4]
 800f3fc:	781b      	ldrb	r3, [r3, #0]
 800f3fe:	2b00      	cmp	r3, #0
 800f400:	d1f5      	bne.n	800f3ee <USBD_GetLen+0xe>
    }

    return len;
 800f402:	7bfb      	ldrb	r3, [r7, #15]
}
 800f404:	4618      	mov	r0, r3
 800f406:	3714      	adds	r7, #20
 800f408:	46bd      	mov	sp, r7
 800f40a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f40e:	4770      	bx	lr

0800f410 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                     uint16_t len)
{
 800f410:	b580      	push	{r7, lr}
 800f412:	b084      	sub	sp, #16
 800f414:	af00      	add	r7, sp, #0
 800f416:	60f8      	str	r0, [r7, #12]
 800f418:	60b9      	str	r1, [r7, #8]
 800f41a:	4613      	mov	r3, r2
 800f41c:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800f41e:	68fb      	ldr	r3, [r7, #12]
 800f420:	2202      	movs	r2, #2
 800f422:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->ep_in[0].total_length = len;
 800f426:	88fa      	ldrh	r2, [r7, #6]
 800f428:	68fb      	ldr	r3, [r7, #12]
 800f42a:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800f42c:	88fa      	ldrh	r2, [r7, #6]
 800f42e:	68fb      	ldr	r3, [r7, #12]
 800f430:	621a      	str	r2, [r3, #32]

 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 800f432:	88fb      	ldrh	r3, [r7, #6]
 800f434:	68ba      	ldr	r2, [r7, #8]
 800f436:	2100      	movs	r1, #0
 800f438:	68f8      	ldr	r0, [r7, #12]
 800f43a:	f000 fd6e 	bl	800ff1a <USBD_LL_Transmit>

  return USBD_OK;
 800f43e:	2300      	movs	r3, #0
}
 800f440:	4618      	mov	r0, r3
 800f442:	3710      	adds	r7, #16
 800f444:	46bd      	mov	sp, r7
 800f446:	bd80      	pop	{r7, pc}

0800f448 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData (USBD_HandleTypeDef *pdev,
                                             uint8_t *pbuf, uint16_t len)
{
 800f448:	b580      	push	{r7, lr}
 800f44a:	b084      	sub	sp, #16
 800f44c:	af00      	add	r7, sp, #0
 800f44e:	60f8      	str	r0, [r7, #12]
 800f450:	60b9      	str	r1, [r7, #8]
 800f452:	4613      	mov	r3, r2
 800f454:	80fb      	strh	r3, [r7, #6]
 /* Start the next transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 800f456:	88fb      	ldrh	r3, [r7, #6]
 800f458:	68ba      	ldr	r2, [r7, #8]
 800f45a:	2100      	movs	r1, #0
 800f45c:	68f8      	ldr	r0, [r7, #12]
 800f45e:	f000 fd5c 	bl	800ff1a <USBD_LL_Transmit>

  return USBD_OK;
 800f462:	2300      	movs	r3, #0
}
 800f464:	4618      	mov	r0, r3
 800f466:	3710      	adds	r7, #16
 800f468:	46bd      	mov	sp, r7
 800f46a:	bd80      	pop	{r7, pc}

0800f46c <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                      uint16_t len)
{
 800f46c:	b580      	push	{r7, lr}
 800f46e:	b084      	sub	sp, #16
 800f470:	af00      	add	r7, sp, #0
 800f472:	60f8      	str	r0, [r7, #12]
 800f474:	60b9      	str	r1, [r7, #8]
 800f476:	4613      	mov	r3, r2
 800f478:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800f47a:	68fb      	ldr	r3, [r7, #12]
 800f47c:	2203      	movs	r2, #3
 800f47e:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->ep_out[0].total_length = len;
 800f482:	88fa      	ldrh	r2, [r7, #6]
 800f484:	68fb      	ldr	r3, [r7, #12]
 800f486:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
  pdev->ep_out[0].rem_length   = len;
 800f48a:	88fa      	ldrh	r2, [r7, #6]
 800f48c:	68fb      	ldr	r3, [r7, #12]
 800f48e:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c

  /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, pbuf, len);
 800f492:	88fb      	ldrh	r3, [r7, #6]
 800f494:	68ba      	ldr	r2, [r7, #8]
 800f496:	2100      	movs	r1, #0
 800f498:	68f8      	ldr	r0, [r7, #12]
 800f49a:	f000 fd61 	bl	800ff60 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800f49e:	2300      	movs	r3, #0
}
 800f4a0:	4618      	mov	r0, r3
 800f4a2:	3710      	adds	r7, #16
 800f4a4:	46bd      	mov	sp, r7
 800f4a6:	bd80      	pop	{r7, pc}

0800f4a8 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                       uint16_t len)
{
 800f4a8:	b580      	push	{r7, lr}
 800f4aa:	b084      	sub	sp, #16
 800f4ac:	af00      	add	r7, sp, #0
 800f4ae:	60f8      	str	r0, [r7, #12]
 800f4b0:	60b9      	str	r1, [r7, #8]
 800f4b2:	4613      	mov	r3, r2
 800f4b4:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800f4b6:	88fb      	ldrh	r3, [r7, #6]
 800f4b8:	68ba      	ldr	r2, [r7, #8]
 800f4ba:	2100      	movs	r1, #0
 800f4bc:	68f8      	ldr	r0, [r7, #12]
 800f4be:	f000 fd4f 	bl	800ff60 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800f4c2:	2300      	movs	r3, #0
}
 800f4c4:	4618      	mov	r0, r3
 800f4c6:	3710      	adds	r7, #16
 800f4c8:	46bd      	mov	sp, r7
 800f4ca:	bd80      	pop	{r7, pc}

0800f4cc <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus (USBD_HandleTypeDef *pdev)
{
 800f4cc:	b580      	push	{r7, lr}
 800f4ce:	b082      	sub	sp, #8
 800f4d0:	af00      	add	r7, sp, #0
 800f4d2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800f4d4:	687b      	ldr	r3, [r7, #4]
 800f4d6:	2204      	movs	r2, #4
 800f4d8:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800f4dc:	2300      	movs	r3, #0
 800f4de:	2200      	movs	r2, #0
 800f4e0:	2100      	movs	r1, #0
 800f4e2:	6878      	ldr	r0, [r7, #4]
 800f4e4:	f000 fd19 	bl	800ff1a <USBD_LL_Transmit>

  return USBD_OK;
 800f4e8:	2300      	movs	r3, #0
}
 800f4ea:	4618      	mov	r0, r3
 800f4ec:	3708      	adds	r7, #8
 800f4ee:	46bd      	mov	sp, r7
 800f4f0:	bd80      	pop	{r7, pc}

0800f4f2 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus (USBD_HandleTypeDef *pdev)
{
 800f4f2:	b580      	push	{r7, lr}
 800f4f4:	b082      	sub	sp, #8
 800f4f6:	af00      	add	r7, sp, #0
 800f4f8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800f4fa:	687b      	ldr	r3, [r7, #4]
 800f4fc:	2205      	movs	r2, #5
 800f4fe:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

 /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 800f502:	2300      	movs	r3, #0
 800f504:	2200      	movs	r2, #0
 800f506:	2100      	movs	r1, #0
 800f508:	6878      	ldr	r0, [r7, #4]
 800f50a:	f000 fd29 	bl	800ff60 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800f50e:	2300      	movs	r3, #0
}
 800f510:	4618      	mov	r0, r3
 800f512:	3708      	adds	r7, #8
 800f514:	46bd      	mov	sp, r7
 800f516:	bd80      	pop	{r7, pc}

0800f518 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800f518:	b480      	push	{r7}
 800f51a:	b087      	sub	sp, #28
 800f51c:	af00      	add	r7, sp, #0
 800f51e:	60f8      	str	r0, [r7, #12]
 800f520:	60b9      	str	r1, [r7, #8]
 800f522:	4613      	mov	r3, r2
 800f524:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800f526:	2301      	movs	r3, #1
 800f528:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800f52a:	2300      	movs	r3, #0
 800f52c:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800f52e:	4b1f      	ldr	r3, [pc, #124]	; (800f5ac <FATFS_LinkDriverEx+0x94>)
 800f530:	7a5b      	ldrb	r3, [r3, #9]
 800f532:	b2db      	uxtb	r3, r3
 800f534:	2b00      	cmp	r3, #0
 800f536:	d131      	bne.n	800f59c <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800f538:	4b1c      	ldr	r3, [pc, #112]	; (800f5ac <FATFS_LinkDriverEx+0x94>)
 800f53a:	7a5b      	ldrb	r3, [r3, #9]
 800f53c:	b2db      	uxtb	r3, r3
 800f53e:	461a      	mov	r2, r3
 800f540:	4b1a      	ldr	r3, [pc, #104]	; (800f5ac <FATFS_LinkDriverEx+0x94>)
 800f542:	2100      	movs	r1, #0
 800f544:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800f546:	4b19      	ldr	r3, [pc, #100]	; (800f5ac <FATFS_LinkDriverEx+0x94>)
 800f548:	7a5b      	ldrb	r3, [r3, #9]
 800f54a:	b2db      	uxtb	r3, r3
 800f54c:	4a17      	ldr	r2, [pc, #92]	; (800f5ac <FATFS_LinkDriverEx+0x94>)
 800f54e:	009b      	lsls	r3, r3, #2
 800f550:	4413      	add	r3, r2
 800f552:	68fa      	ldr	r2, [r7, #12]
 800f554:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800f556:	4b15      	ldr	r3, [pc, #84]	; (800f5ac <FATFS_LinkDriverEx+0x94>)
 800f558:	7a5b      	ldrb	r3, [r3, #9]
 800f55a:	b2db      	uxtb	r3, r3
 800f55c:	461a      	mov	r2, r3
 800f55e:	4b13      	ldr	r3, [pc, #76]	; (800f5ac <FATFS_LinkDriverEx+0x94>)
 800f560:	4413      	add	r3, r2
 800f562:	79fa      	ldrb	r2, [r7, #7]
 800f564:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800f566:	4b11      	ldr	r3, [pc, #68]	; (800f5ac <FATFS_LinkDriverEx+0x94>)
 800f568:	7a5b      	ldrb	r3, [r3, #9]
 800f56a:	b2db      	uxtb	r3, r3
 800f56c:	1c5a      	adds	r2, r3, #1
 800f56e:	b2d1      	uxtb	r1, r2
 800f570:	4a0e      	ldr	r2, [pc, #56]	; (800f5ac <FATFS_LinkDriverEx+0x94>)
 800f572:	7251      	strb	r1, [r2, #9]
 800f574:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800f576:	7dbb      	ldrb	r3, [r7, #22]
 800f578:	3330      	adds	r3, #48	; 0x30
 800f57a:	b2da      	uxtb	r2, r3
 800f57c:	68bb      	ldr	r3, [r7, #8]
 800f57e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800f580:	68bb      	ldr	r3, [r7, #8]
 800f582:	3301      	adds	r3, #1
 800f584:	223a      	movs	r2, #58	; 0x3a
 800f586:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800f588:	68bb      	ldr	r3, [r7, #8]
 800f58a:	3302      	adds	r3, #2
 800f58c:	222f      	movs	r2, #47	; 0x2f
 800f58e:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800f590:	68bb      	ldr	r3, [r7, #8]
 800f592:	3303      	adds	r3, #3
 800f594:	2200      	movs	r2, #0
 800f596:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800f598:	2300      	movs	r3, #0
 800f59a:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800f59c:	7dfb      	ldrb	r3, [r7, #23]
}
 800f59e:	4618      	mov	r0, r3
 800f5a0:	371c      	adds	r7, #28
 800f5a2:	46bd      	mov	sp, r7
 800f5a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5a8:	4770      	bx	lr
 800f5aa:	bf00      	nop
 800f5ac:	2000077c 	.word	0x2000077c

0800f5b0 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800f5b0:	b580      	push	{r7, lr}
 800f5b2:	b082      	sub	sp, #8
 800f5b4:	af00      	add	r7, sp, #0
 800f5b6:	6078      	str	r0, [r7, #4]
 800f5b8:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800f5ba:	2200      	movs	r2, #0
 800f5bc:	6839      	ldr	r1, [r7, #0]
 800f5be:	6878      	ldr	r0, [r7, #4]
 800f5c0:	f7ff ffaa 	bl	800f518 <FATFS_LinkDriverEx>
 800f5c4:	4603      	mov	r3, r0
}
 800f5c6:	4618      	mov	r0, r3
 800f5c8:	3708      	adds	r7, #8
 800f5ca:	46bd      	mov	sp, r7
 800f5cc:	bd80      	pop	{r7, pc}
	...

0800f5d0 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800f5d0:	b580      	push	{r7, lr}
 800f5d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800f5d4:	2200      	movs	r2, #0
 800f5d6:	4912      	ldr	r1, [pc, #72]	; (800f620 <MX_USB_DEVICE_Init+0x50>)
 800f5d8:	4812      	ldr	r0, [pc, #72]	; (800f624 <MX_USB_DEVICE_Init+0x54>)
 800f5da:	f7fe ff43 	bl	800e464 <USBD_Init>
 800f5de:	4603      	mov	r3, r0
 800f5e0:	2b00      	cmp	r3, #0
 800f5e2:	d001      	beq.n	800f5e8 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800f5e4:	f7f5 f872 	bl	80046cc <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800f5e8:	490f      	ldr	r1, [pc, #60]	; (800f628 <MX_USB_DEVICE_Init+0x58>)
 800f5ea:	480e      	ldr	r0, [pc, #56]	; (800f624 <MX_USB_DEVICE_Init+0x54>)
 800f5ec:	f7fe ff65 	bl	800e4ba <USBD_RegisterClass>
 800f5f0:	4603      	mov	r3, r0
 800f5f2:	2b00      	cmp	r3, #0
 800f5f4:	d001      	beq.n	800f5fa <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800f5f6:	f7f5 f869 	bl	80046cc <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800f5fa:	490c      	ldr	r1, [pc, #48]	; (800f62c <MX_USB_DEVICE_Init+0x5c>)
 800f5fc:	4809      	ldr	r0, [pc, #36]	; (800f624 <MX_USB_DEVICE_Init+0x54>)
 800f5fe:	f7fe fe93 	bl	800e328 <USBD_CDC_RegisterInterface>
 800f602:	4603      	mov	r3, r0
 800f604:	2b00      	cmp	r3, #0
 800f606:	d001      	beq.n	800f60c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800f608:	f7f5 f860 	bl	80046cc <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800f60c:	4805      	ldr	r0, [pc, #20]	; (800f624 <MX_USB_DEVICE_Init+0x54>)
 800f60e:	f7fe ff6e 	bl	800e4ee <USBD_Start>
 800f612:	4603      	mov	r3, r0
 800f614:	2b00      	cmp	r3, #0
 800f616:	d001      	beq.n	800f61c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800f618:	f7f5 f858 	bl	80046cc <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800f61c:	bf00      	nop
 800f61e:	bd80      	pop	{r7, pc}
 800f620:	2000012c 	.word	0x2000012c
 800f624:	20003204 	.word	0x20003204
 800f628:	20000018 	.word	0x20000018
 800f62c:	2000011c 	.word	0x2000011c

0800f630 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800f630:	b580      	push	{r7, lr}
 800f632:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800f634:	2200      	movs	r2, #0
 800f636:	4905      	ldr	r1, [pc, #20]	; (800f64c <CDC_Init_FS+0x1c>)
 800f638:	4805      	ldr	r0, [pc, #20]	; (800f650 <CDC_Init_FS+0x20>)
 800f63a:	f7fe fe8c 	bl	800e356 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800f63e:	4905      	ldr	r1, [pc, #20]	; (800f654 <CDC_Init_FS+0x24>)
 800f640:	4803      	ldr	r0, [pc, #12]	; (800f650 <CDC_Init_FS+0x20>)
 800f642:	f7fe fea2 	bl	800e38a <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800f646:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800f648:	4618      	mov	r0, r3
 800f64a:	bd80      	pop	{r7, pc}
 800f64c:	20003ca0 	.word	0x20003ca0
 800f650:	20003204 	.word	0x20003204
 800f654:	200034a0 	.word	0x200034a0

0800f658 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800f658:	b480      	push	{r7}
 800f65a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800f65c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800f65e:	4618      	mov	r0, r3
 800f660:	46bd      	mov	sp, r7
 800f662:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f666:	4770      	bx	lr

0800f668 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800f668:	b480      	push	{r7}
 800f66a:	b085      	sub	sp, #20
 800f66c:	af00      	add	r7, sp, #0
 800f66e:	4603      	mov	r3, r0
 800f670:	6039      	str	r1, [r7, #0]
 800f672:	71fb      	strb	r3, [r7, #7]
 800f674:	4613      	mov	r3, r2
 800f676:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  uint8_t tempbuf[7] = {0,0,0,0,0,0,0};
 800f678:	f107 0308 	add.w	r3, r7, #8
 800f67c:	2200      	movs	r2, #0
 800f67e:	601a      	str	r2, [r3, #0]
 800f680:	f8c3 2003 	str.w	r2, [r3, #3]
  switch(cmd)
 800f684:	79fb      	ldrb	r3, [r7, #7]
 800f686:	2b23      	cmp	r3, #35	; 0x23
 800f688:	d87c      	bhi.n	800f784 <CDC_Control_FS+0x11c>
 800f68a:	a201      	add	r2, pc, #4	; (adr r2, 800f690 <CDC_Control_FS+0x28>)
 800f68c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f690:	0800f785 	.word	0x0800f785
 800f694:	0800f785 	.word	0x0800f785
 800f698:	0800f785 	.word	0x0800f785
 800f69c:	0800f785 	.word	0x0800f785
 800f6a0:	0800f785 	.word	0x0800f785
 800f6a4:	0800f785 	.word	0x0800f785
 800f6a8:	0800f785 	.word	0x0800f785
 800f6ac:	0800f785 	.word	0x0800f785
 800f6b0:	0800f785 	.word	0x0800f785
 800f6b4:	0800f785 	.word	0x0800f785
 800f6b8:	0800f785 	.word	0x0800f785
 800f6bc:	0800f785 	.word	0x0800f785
 800f6c0:	0800f785 	.word	0x0800f785
 800f6c4:	0800f785 	.word	0x0800f785
 800f6c8:	0800f785 	.word	0x0800f785
 800f6cc:	0800f785 	.word	0x0800f785
 800f6d0:	0800f785 	.word	0x0800f785
 800f6d4:	0800f785 	.word	0x0800f785
 800f6d8:	0800f785 	.word	0x0800f785
 800f6dc:	0800f785 	.word	0x0800f785
 800f6e0:	0800f785 	.word	0x0800f785
 800f6e4:	0800f785 	.word	0x0800f785
 800f6e8:	0800f785 	.word	0x0800f785
 800f6ec:	0800f785 	.word	0x0800f785
 800f6f0:	0800f785 	.word	0x0800f785
 800f6f4:	0800f785 	.word	0x0800f785
 800f6f8:	0800f785 	.word	0x0800f785
 800f6fc:	0800f785 	.word	0x0800f785
 800f700:	0800f785 	.word	0x0800f785
 800f704:	0800f785 	.word	0x0800f785
 800f708:	0800f785 	.word	0x0800f785
 800f70c:	0800f785 	.word	0x0800f785
 800f710:	0800f721 	.word	0x0800f721
 800f714:	0800f74d 	.word	0x0800f74d
 800f718:	0800f785 	.word	0x0800f785
 800f71c:	0800f785 	.word	0x0800f785
  /*                                        3 - Mark                             */
  /*                                        4 - Space                            */
  /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
  /*******************************************************************************/
    case CDC_SET_LINE_CODING:
      	tempbuf[0] = pbuf[0];
 800f720:	683b      	ldr	r3, [r7, #0]
 800f722:	781b      	ldrb	r3, [r3, #0]
 800f724:	723b      	strb	r3, [r7, #8]
      	tempbuf[1] = pbuf[1];
 800f726:	683b      	ldr	r3, [r7, #0]
 800f728:	785b      	ldrb	r3, [r3, #1]
 800f72a:	727b      	strb	r3, [r7, #9]
      	tempbuf[2] = pbuf[2];
 800f72c:	683b      	ldr	r3, [r7, #0]
 800f72e:	789b      	ldrb	r3, [r3, #2]
 800f730:	72bb      	strb	r3, [r7, #10]
      	tempbuf[3] = pbuf[3];
 800f732:	683b      	ldr	r3, [r7, #0]
 800f734:	78db      	ldrb	r3, [r3, #3]
 800f736:	72fb      	strb	r3, [r7, #11]
      	tempbuf[4] = pbuf[4];
 800f738:	683b      	ldr	r3, [r7, #0]
 800f73a:	791b      	ldrb	r3, [r3, #4]
 800f73c:	733b      	strb	r3, [r7, #12]
      	tempbuf[5] = pbuf[5];
 800f73e:	683b      	ldr	r3, [r7, #0]
 800f740:	795b      	ldrb	r3, [r3, #5]
 800f742:	737b      	strb	r3, [r7, #13]
      	tempbuf[6] = pbuf[6];
 800f744:	683b      	ldr	r3, [r7, #0]
 800f746:	799b      	ldrb	r3, [r3, #6]
 800f748:	73bb      	strb	r3, [r7, #14]
      	break;
 800f74a:	e01c      	b.n	800f786 <CDC_Control_FS+0x11e>

    case CDC_GET_LINE_CODING:
      	pbuf[0] = tempbuf[0];
 800f74c:	7a3a      	ldrb	r2, [r7, #8]
 800f74e:	683b      	ldr	r3, [r7, #0]
 800f750:	701a      	strb	r2, [r3, #0]
      	pbuf[1] = tempbuf[1];
 800f752:	683b      	ldr	r3, [r7, #0]
 800f754:	3301      	adds	r3, #1
 800f756:	7a7a      	ldrb	r2, [r7, #9]
 800f758:	701a      	strb	r2, [r3, #0]
      	pbuf[2] = tempbuf[2];
 800f75a:	683b      	ldr	r3, [r7, #0]
 800f75c:	3302      	adds	r3, #2
 800f75e:	7aba      	ldrb	r2, [r7, #10]
 800f760:	701a      	strb	r2, [r3, #0]
      	pbuf[3] = tempbuf[3];
 800f762:	683b      	ldr	r3, [r7, #0]
 800f764:	3303      	adds	r3, #3
 800f766:	7afa      	ldrb	r2, [r7, #11]
 800f768:	701a      	strb	r2, [r3, #0]
      	pbuf[4] = tempbuf[4];
 800f76a:	683b      	ldr	r3, [r7, #0]
 800f76c:	3304      	adds	r3, #4
 800f76e:	7b3a      	ldrb	r2, [r7, #12]
 800f770:	701a      	strb	r2, [r3, #0]
      	pbuf[5] = tempbuf[5];
 800f772:	683b      	ldr	r3, [r7, #0]
 800f774:	3305      	adds	r3, #5
 800f776:	7b7a      	ldrb	r2, [r7, #13]
 800f778:	701a      	strb	r2, [r3, #0]
      	pbuf[6] = tempbuf[6];
 800f77a:	683b      	ldr	r3, [r7, #0]
 800f77c:	3306      	adds	r3, #6
 800f77e:	7bba      	ldrb	r2, [r7, #14]
 800f780:	701a      	strb	r2, [r3, #0]
      	break;
 800f782:	e000      	b.n	800f786 <CDC_Control_FS+0x11e>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800f784:	bf00      	nop
  }

  return (USBD_OK);
 800f786:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800f788:	4618      	mov	r0, r3
 800f78a:	3714      	adds	r7, #20
 800f78c:	46bd      	mov	sp, r7
 800f78e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f792:	4770      	bx	lr

0800f794 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800f794:	b580      	push	{r7, lr}
 800f796:	b082      	sub	sp, #8
 800f798:	af00      	add	r7, sp, #0
 800f79a:	6078      	str	r0, [r7, #4]
 800f79c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800f79e:	6879      	ldr	r1, [r7, #4]
 800f7a0:	4805      	ldr	r0, [pc, #20]	; (800f7b8 <CDC_Receive_FS+0x24>)
 800f7a2:	f7fe fdf2 	bl	800e38a <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800f7a6:	4804      	ldr	r0, [pc, #16]	; (800f7b8 <CDC_Receive_FS+0x24>)
 800f7a8:	f7fe fe32 	bl	800e410 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800f7ac:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800f7ae:	4618      	mov	r0, r3
 800f7b0:	3708      	adds	r7, #8
 800f7b2:	46bd      	mov	sp, r7
 800f7b4:	bd80      	pop	{r7, pc}
 800f7b6:	bf00      	nop
 800f7b8:	20003204 	.word	0x20003204

0800f7bc <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800f7bc:	b580      	push	{r7, lr}
 800f7be:	b084      	sub	sp, #16
 800f7c0:	af00      	add	r7, sp, #0
 800f7c2:	6078      	str	r0, [r7, #4]
 800f7c4:	460b      	mov	r3, r1
 800f7c6:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800f7c8:	2300      	movs	r3, #0
 800f7ca:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800f7cc:	4b0d      	ldr	r3, [pc, #52]	; (800f804 <CDC_Transmit_FS+0x48>)
 800f7ce:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800f7d2:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800f7d4:	68bb      	ldr	r3, [r7, #8]
 800f7d6:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800f7da:	2b00      	cmp	r3, #0
 800f7dc:	d001      	beq.n	800f7e2 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800f7de:	2301      	movs	r3, #1
 800f7e0:	e00b      	b.n	800f7fa <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800f7e2:	887b      	ldrh	r3, [r7, #2]
 800f7e4:	461a      	mov	r2, r3
 800f7e6:	6879      	ldr	r1, [r7, #4]
 800f7e8:	4806      	ldr	r0, [pc, #24]	; (800f804 <CDC_Transmit_FS+0x48>)
 800f7ea:	f7fe fdb4 	bl	800e356 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800f7ee:	4805      	ldr	r0, [pc, #20]	; (800f804 <CDC_Transmit_FS+0x48>)
 800f7f0:	f7fe fddf 	bl	800e3b2 <USBD_CDC_TransmitPacket>
 800f7f4:	4603      	mov	r3, r0
 800f7f6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800f7f8:	7bfb      	ldrb	r3, [r7, #15]
}
 800f7fa:	4618      	mov	r0, r3
 800f7fc:	3710      	adds	r7, #16
 800f7fe:	46bd      	mov	sp, r7
 800f800:	bd80      	pop	{r7, pc}
 800f802:	bf00      	nop
 800f804:	20003204 	.word	0x20003204

0800f808 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f808:	b480      	push	{r7}
 800f80a:	b083      	sub	sp, #12
 800f80c:	af00      	add	r7, sp, #0
 800f80e:	4603      	mov	r3, r0
 800f810:	6039      	str	r1, [r7, #0]
 800f812:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800f814:	683b      	ldr	r3, [r7, #0]
 800f816:	2212      	movs	r2, #18
 800f818:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800f81a:	4b03      	ldr	r3, [pc, #12]	; (800f828 <USBD_FS_DeviceDescriptor+0x20>)
}
 800f81c:	4618      	mov	r0, r3
 800f81e:	370c      	adds	r7, #12
 800f820:	46bd      	mov	sp, r7
 800f822:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f826:	4770      	bx	lr
 800f828:	20000148 	.word	0x20000148

0800f82c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f82c:	b480      	push	{r7}
 800f82e:	b083      	sub	sp, #12
 800f830:	af00      	add	r7, sp, #0
 800f832:	4603      	mov	r3, r0
 800f834:	6039      	str	r1, [r7, #0]
 800f836:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800f838:	683b      	ldr	r3, [r7, #0]
 800f83a:	2204      	movs	r2, #4
 800f83c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800f83e:	4b03      	ldr	r3, [pc, #12]	; (800f84c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800f840:	4618      	mov	r0, r3
 800f842:	370c      	adds	r7, #12
 800f844:	46bd      	mov	sp, r7
 800f846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f84a:	4770      	bx	lr
 800f84c:	2000015c 	.word	0x2000015c

0800f850 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f850:	b580      	push	{r7, lr}
 800f852:	b082      	sub	sp, #8
 800f854:	af00      	add	r7, sp, #0
 800f856:	4603      	mov	r3, r0
 800f858:	6039      	str	r1, [r7, #0]
 800f85a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800f85c:	79fb      	ldrb	r3, [r7, #7]
 800f85e:	2b00      	cmp	r3, #0
 800f860:	d105      	bne.n	800f86e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800f862:	683a      	ldr	r2, [r7, #0]
 800f864:	4907      	ldr	r1, [pc, #28]	; (800f884 <USBD_FS_ProductStrDescriptor+0x34>)
 800f866:	4808      	ldr	r0, [pc, #32]	; (800f888 <USBD_FS_ProductStrDescriptor+0x38>)
 800f868:	f7ff fd78 	bl	800f35c <USBD_GetString>
 800f86c:	e004      	b.n	800f878 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800f86e:	683a      	ldr	r2, [r7, #0]
 800f870:	4904      	ldr	r1, [pc, #16]	; (800f884 <USBD_FS_ProductStrDescriptor+0x34>)
 800f872:	4805      	ldr	r0, [pc, #20]	; (800f888 <USBD_FS_ProductStrDescriptor+0x38>)
 800f874:	f7ff fd72 	bl	800f35c <USBD_GetString>
  }
  return USBD_StrDesc;
 800f878:	4b02      	ldr	r3, [pc, #8]	; (800f884 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800f87a:	4618      	mov	r0, r3
 800f87c:	3708      	adds	r7, #8
 800f87e:	46bd      	mov	sp, r7
 800f880:	bd80      	pop	{r7, pc}
 800f882:	bf00      	nop
 800f884:	200044a0 	.word	0x200044a0
 800f888:	0801598c 	.word	0x0801598c

0800f88c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f88c:	b580      	push	{r7, lr}
 800f88e:	b082      	sub	sp, #8
 800f890:	af00      	add	r7, sp, #0
 800f892:	4603      	mov	r3, r0
 800f894:	6039      	str	r1, [r7, #0]
 800f896:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800f898:	683a      	ldr	r2, [r7, #0]
 800f89a:	4904      	ldr	r1, [pc, #16]	; (800f8ac <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800f89c:	4804      	ldr	r0, [pc, #16]	; (800f8b0 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800f89e:	f7ff fd5d 	bl	800f35c <USBD_GetString>
  return USBD_StrDesc;
 800f8a2:	4b02      	ldr	r3, [pc, #8]	; (800f8ac <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800f8a4:	4618      	mov	r0, r3
 800f8a6:	3708      	adds	r7, #8
 800f8a8:	46bd      	mov	sp, r7
 800f8aa:	bd80      	pop	{r7, pc}
 800f8ac:	200044a0 	.word	0x200044a0
 800f8b0:	08015998 	.word	0x08015998

0800f8b4 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f8b4:	b580      	push	{r7, lr}
 800f8b6:	b082      	sub	sp, #8
 800f8b8:	af00      	add	r7, sp, #0
 800f8ba:	4603      	mov	r3, r0
 800f8bc:	6039      	str	r1, [r7, #0]
 800f8be:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800f8c0:	683b      	ldr	r3, [r7, #0]
 800f8c2:	221a      	movs	r2, #26
 800f8c4:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800f8c6:	f000 f843 	bl	800f950 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */
  
  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800f8ca:	4b02      	ldr	r3, [pc, #8]	; (800f8d4 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800f8cc:	4618      	mov	r0, r3
 800f8ce:	3708      	adds	r7, #8
 800f8d0:	46bd      	mov	sp, r7
 800f8d2:	bd80      	pop	{r7, pc}
 800f8d4:	20000160 	.word	0x20000160

0800f8d8 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f8d8:	b580      	push	{r7, lr}
 800f8da:	b082      	sub	sp, #8
 800f8dc:	af00      	add	r7, sp, #0
 800f8de:	4603      	mov	r3, r0
 800f8e0:	6039      	str	r1, [r7, #0]
 800f8e2:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800f8e4:	79fb      	ldrb	r3, [r7, #7]
 800f8e6:	2b00      	cmp	r3, #0
 800f8e8:	d105      	bne.n	800f8f6 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800f8ea:	683a      	ldr	r2, [r7, #0]
 800f8ec:	4907      	ldr	r1, [pc, #28]	; (800f90c <USBD_FS_ConfigStrDescriptor+0x34>)
 800f8ee:	4808      	ldr	r0, [pc, #32]	; (800f910 <USBD_FS_ConfigStrDescriptor+0x38>)
 800f8f0:	f7ff fd34 	bl	800f35c <USBD_GetString>
 800f8f4:	e004      	b.n	800f900 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800f8f6:	683a      	ldr	r2, [r7, #0]
 800f8f8:	4904      	ldr	r1, [pc, #16]	; (800f90c <USBD_FS_ConfigStrDescriptor+0x34>)
 800f8fa:	4805      	ldr	r0, [pc, #20]	; (800f910 <USBD_FS_ConfigStrDescriptor+0x38>)
 800f8fc:	f7ff fd2e 	bl	800f35c <USBD_GetString>
  }
  return USBD_StrDesc;
 800f900:	4b02      	ldr	r3, [pc, #8]	; (800f90c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800f902:	4618      	mov	r0, r3
 800f904:	3708      	adds	r7, #8
 800f906:	46bd      	mov	sp, r7
 800f908:	bd80      	pop	{r7, pc}
 800f90a:	bf00      	nop
 800f90c:	200044a0 	.word	0x200044a0
 800f910:	080159ac 	.word	0x080159ac

0800f914 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f914:	b580      	push	{r7, lr}
 800f916:	b082      	sub	sp, #8
 800f918:	af00      	add	r7, sp, #0
 800f91a:	4603      	mov	r3, r0
 800f91c:	6039      	str	r1, [r7, #0]
 800f91e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800f920:	79fb      	ldrb	r3, [r7, #7]
 800f922:	2b00      	cmp	r3, #0
 800f924:	d105      	bne.n	800f932 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800f926:	683a      	ldr	r2, [r7, #0]
 800f928:	4907      	ldr	r1, [pc, #28]	; (800f948 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800f92a:	4808      	ldr	r0, [pc, #32]	; (800f94c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800f92c:	f7ff fd16 	bl	800f35c <USBD_GetString>
 800f930:	e004      	b.n	800f93c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800f932:	683a      	ldr	r2, [r7, #0]
 800f934:	4904      	ldr	r1, [pc, #16]	; (800f948 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800f936:	4805      	ldr	r0, [pc, #20]	; (800f94c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800f938:	f7ff fd10 	bl	800f35c <USBD_GetString>
  }
  return USBD_StrDesc;
 800f93c:	4b02      	ldr	r3, [pc, #8]	; (800f948 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800f93e:	4618      	mov	r0, r3
 800f940:	3708      	adds	r7, #8
 800f942:	46bd      	mov	sp, r7
 800f944:	bd80      	pop	{r7, pc}
 800f946:	bf00      	nop
 800f948:	200044a0 	.word	0x200044a0
 800f94c:	080159b8 	.word	0x080159b8

0800f950 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor 
  * @param  None 
  * @retval None
  */
static void Get_SerialNum(void)
{
 800f950:	b580      	push	{r7, lr}
 800f952:	b084      	sub	sp, #16
 800f954:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800f956:	4b0f      	ldr	r3, [pc, #60]	; (800f994 <Get_SerialNum+0x44>)
 800f958:	681b      	ldr	r3, [r3, #0]
 800f95a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800f95c:	4b0e      	ldr	r3, [pc, #56]	; (800f998 <Get_SerialNum+0x48>)
 800f95e:	681b      	ldr	r3, [r3, #0]
 800f960:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800f962:	4b0e      	ldr	r3, [pc, #56]	; (800f99c <Get_SerialNum+0x4c>)
 800f964:	681b      	ldr	r3, [r3, #0]
 800f966:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800f968:	68fa      	ldr	r2, [r7, #12]
 800f96a:	687b      	ldr	r3, [r7, #4]
 800f96c:	4413      	add	r3, r2
 800f96e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800f970:	68fb      	ldr	r3, [r7, #12]
 800f972:	2b00      	cmp	r3, #0
 800f974:	d009      	beq.n	800f98a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800f976:	2208      	movs	r2, #8
 800f978:	4909      	ldr	r1, [pc, #36]	; (800f9a0 <Get_SerialNum+0x50>)
 800f97a:	68f8      	ldr	r0, [r7, #12]
 800f97c:	f000 f814 	bl	800f9a8 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800f980:	2204      	movs	r2, #4
 800f982:	4908      	ldr	r1, [pc, #32]	; (800f9a4 <Get_SerialNum+0x54>)
 800f984:	68b8      	ldr	r0, [r7, #8]
 800f986:	f000 f80f 	bl	800f9a8 <IntToUnicode>
  }
}
 800f98a:	bf00      	nop
 800f98c:	3710      	adds	r7, #16
 800f98e:	46bd      	mov	sp, r7
 800f990:	bd80      	pop	{r7, pc}
 800f992:	bf00      	nop
 800f994:	1fff7a10 	.word	0x1fff7a10
 800f998:	1fff7a14 	.word	0x1fff7a14
 800f99c:	1fff7a18 	.word	0x1fff7a18
 800f9a0:	20000162 	.word	0x20000162
 800f9a4:	20000172 	.word	0x20000172

0800f9a8 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer 
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800f9a8:	b480      	push	{r7}
 800f9aa:	b087      	sub	sp, #28
 800f9ac:	af00      	add	r7, sp, #0
 800f9ae:	60f8      	str	r0, [r7, #12]
 800f9b0:	60b9      	str	r1, [r7, #8]
 800f9b2:	4613      	mov	r3, r2
 800f9b4:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800f9b6:	2300      	movs	r3, #0
 800f9b8:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800f9ba:	2300      	movs	r3, #0
 800f9bc:	75fb      	strb	r3, [r7, #23]
 800f9be:	e027      	b.n	800fa10 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800f9c0:	68fb      	ldr	r3, [r7, #12]
 800f9c2:	0f1b      	lsrs	r3, r3, #28
 800f9c4:	2b09      	cmp	r3, #9
 800f9c6:	d80b      	bhi.n	800f9e0 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800f9c8:	68fb      	ldr	r3, [r7, #12]
 800f9ca:	0f1b      	lsrs	r3, r3, #28
 800f9cc:	b2da      	uxtb	r2, r3
 800f9ce:	7dfb      	ldrb	r3, [r7, #23]
 800f9d0:	005b      	lsls	r3, r3, #1
 800f9d2:	4619      	mov	r1, r3
 800f9d4:	68bb      	ldr	r3, [r7, #8]
 800f9d6:	440b      	add	r3, r1
 800f9d8:	3230      	adds	r2, #48	; 0x30
 800f9da:	b2d2      	uxtb	r2, r2
 800f9dc:	701a      	strb	r2, [r3, #0]
 800f9de:	e00a      	b.n	800f9f6 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800f9e0:	68fb      	ldr	r3, [r7, #12]
 800f9e2:	0f1b      	lsrs	r3, r3, #28
 800f9e4:	b2da      	uxtb	r2, r3
 800f9e6:	7dfb      	ldrb	r3, [r7, #23]
 800f9e8:	005b      	lsls	r3, r3, #1
 800f9ea:	4619      	mov	r1, r3
 800f9ec:	68bb      	ldr	r3, [r7, #8]
 800f9ee:	440b      	add	r3, r1
 800f9f0:	3237      	adds	r2, #55	; 0x37
 800f9f2:	b2d2      	uxtb	r2, r2
 800f9f4:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800f9f6:	68fb      	ldr	r3, [r7, #12]
 800f9f8:	011b      	lsls	r3, r3, #4
 800f9fa:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800f9fc:	7dfb      	ldrb	r3, [r7, #23]
 800f9fe:	005b      	lsls	r3, r3, #1
 800fa00:	3301      	adds	r3, #1
 800fa02:	68ba      	ldr	r2, [r7, #8]
 800fa04:	4413      	add	r3, r2
 800fa06:	2200      	movs	r2, #0
 800fa08:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800fa0a:	7dfb      	ldrb	r3, [r7, #23]
 800fa0c:	3301      	adds	r3, #1
 800fa0e:	75fb      	strb	r3, [r7, #23]
 800fa10:	7dfa      	ldrb	r2, [r7, #23]
 800fa12:	79fb      	ldrb	r3, [r7, #7]
 800fa14:	429a      	cmp	r2, r3
 800fa16:	d3d3      	bcc.n	800f9c0 <IntToUnicode+0x18>
  }
}
 800fa18:	bf00      	nop
 800fa1a:	371c      	adds	r7, #28
 800fa1c:	46bd      	mov	sp, r7
 800fa1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa22:	4770      	bx	lr

0800fa24 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800fa24:	b580      	push	{r7, lr}
 800fa26:	b08a      	sub	sp, #40	; 0x28
 800fa28:	af00      	add	r7, sp, #0
 800fa2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800fa2c:	f107 0314 	add.w	r3, r7, #20
 800fa30:	2200      	movs	r2, #0
 800fa32:	601a      	str	r2, [r3, #0]
 800fa34:	605a      	str	r2, [r3, #4]
 800fa36:	609a      	str	r2, [r3, #8]
 800fa38:	60da      	str	r2, [r3, #12]
 800fa3a:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800fa3c:	687b      	ldr	r3, [r7, #4]
 800fa3e:	681b      	ldr	r3, [r3, #0]
 800fa40:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800fa44:	d13a      	bne.n	800fabc <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800fa46:	2300      	movs	r3, #0
 800fa48:	613b      	str	r3, [r7, #16]
 800fa4a:	4b1e      	ldr	r3, [pc, #120]	; (800fac4 <HAL_PCD_MspInit+0xa0>)
 800fa4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fa4e:	4a1d      	ldr	r2, [pc, #116]	; (800fac4 <HAL_PCD_MspInit+0xa0>)
 800fa50:	f043 0301 	orr.w	r3, r3, #1
 800fa54:	6313      	str	r3, [r2, #48]	; 0x30
 800fa56:	4b1b      	ldr	r3, [pc, #108]	; (800fac4 <HAL_PCD_MspInit+0xa0>)
 800fa58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fa5a:	f003 0301 	and.w	r3, r3, #1
 800fa5e:	613b      	str	r3, [r7, #16]
 800fa60:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration    
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800fa62:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800fa66:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800fa68:	2302      	movs	r3, #2
 800fa6a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800fa6c:	2300      	movs	r3, #0
 800fa6e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800fa70:	2303      	movs	r3, #3
 800fa72:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800fa74:	230a      	movs	r3, #10
 800fa76:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800fa78:	f107 0314 	add.w	r3, r7, #20
 800fa7c:	4619      	mov	r1, r3
 800fa7e:	4812      	ldr	r0, [pc, #72]	; (800fac8 <HAL_PCD_MspInit+0xa4>)
 800fa80:	f7f5 ff86 	bl	8005990 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800fa84:	4b0f      	ldr	r3, [pc, #60]	; (800fac4 <HAL_PCD_MspInit+0xa0>)
 800fa86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fa88:	4a0e      	ldr	r2, [pc, #56]	; (800fac4 <HAL_PCD_MspInit+0xa0>)
 800fa8a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800fa8e:	6353      	str	r3, [r2, #52]	; 0x34
 800fa90:	2300      	movs	r3, #0
 800fa92:	60fb      	str	r3, [r7, #12]
 800fa94:	4b0b      	ldr	r3, [pc, #44]	; (800fac4 <HAL_PCD_MspInit+0xa0>)
 800fa96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fa98:	4a0a      	ldr	r2, [pc, #40]	; (800fac4 <HAL_PCD_MspInit+0xa0>)
 800fa9a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800fa9e:	6453      	str	r3, [r2, #68]	; 0x44
 800faa0:	4b08      	ldr	r3, [pc, #32]	; (800fac4 <HAL_PCD_MspInit+0xa0>)
 800faa2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800faa4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800faa8:	60fb      	str	r3, [r7, #12]
 800faaa:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800faac:	2200      	movs	r2, #0
 800faae:	2100      	movs	r1, #0
 800fab0:	2043      	movs	r0, #67	; 0x43
 800fab2:	f7f5 fb9a 	bl	80051ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800fab6:	2043      	movs	r0, #67	; 0x43
 800fab8:	f7f5 fbb3 	bl	8005222 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800fabc:	bf00      	nop
 800fabe:	3728      	adds	r7, #40	; 0x28
 800fac0:	46bd      	mov	sp, r7
 800fac2:	bd80      	pop	{r7, pc}
 800fac4:	40023800 	.word	0x40023800
 800fac8:	40020000 	.word	0x40020000

0800facc <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800facc:	b580      	push	{r7, lr}
 800face:	b082      	sub	sp, #8
 800fad0:	af00      	add	r7, sp, #0
 800fad2:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800fad4:	687b      	ldr	r3, [r7, #4]
 800fad6:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 800fada:	687b      	ldr	r3, [r7, #4]
 800fadc:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800fae0:	4619      	mov	r1, r3
 800fae2:	4610      	mov	r0, r2
 800fae4:	f7fe fd4c 	bl	800e580 <USBD_LL_SetupStage>
}
 800fae8:	bf00      	nop
 800faea:	3708      	adds	r7, #8
 800faec:	46bd      	mov	sp, r7
 800faee:	bd80      	pop	{r7, pc}

0800faf0 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800faf0:	b580      	push	{r7, lr}
 800faf2:	b082      	sub	sp, #8
 800faf4:	af00      	add	r7, sp, #0
 800faf6:	6078      	str	r0, [r7, #4]
 800faf8:	460b      	mov	r3, r1
 800fafa:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800fafc:	687b      	ldr	r3, [r7, #4]
 800fafe:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800fb02:	78fa      	ldrb	r2, [r7, #3]
 800fb04:	6879      	ldr	r1, [r7, #4]
 800fb06:	4613      	mov	r3, r2
 800fb08:	00db      	lsls	r3, r3, #3
 800fb0a:	1a9b      	subs	r3, r3, r2
 800fb0c:	009b      	lsls	r3, r3, #2
 800fb0e:	440b      	add	r3, r1
 800fb10:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800fb14:	681a      	ldr	r2, [r3, #0]
 800fb16:	78fb      	ldrb	r3, [r7, #3]
 800fb18:	4619      	mov	r1, r3
 800fb1a:	f7fe fd7c 	bl	800e616 <USBD_LL_DataOutStage>
}
 800fb1e:	bf00      	nop
 800fb20:	3708      	adds	r7, #8
 800fb22:	46bd      	mov	sp, r7
 800fb24:	bd80      	pop	{r7, pc}

0800fb26 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fb26:	b580      	push	{r7, lr}
 800fb28:	b082      	sub	sp, #8
 800fb2a:	af00      	add	r7, sp, #0
 800fb2c:	6078      	str	r0, [r7, #4]
 800fb2e:	460b      	mov	r3, r1
 800fb30:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800fb32:	687b      	ldr	r3, [r7, #4]
 800fb34:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800fb38:	78fa      	ldrb	r2, [r7, #3]
 800fb3a:	6879      	ldr	r1, [r7, #4]
 800fb3c:	4613      	mov	r3, r2
 800fb3e:	00db      	lsls	r3, r3, #3
 800fb40:	1a9b      	subs	r3, r3, r2
 800fb42:	009b      	lsls	r3, r3, #2
 800fb44:	440b      	add	r3, r1
 800fb46:	3348      	adds	r3, #72	; 0x48
 800fb48:	681a      	ldr	r2, [r3, #0]
 800fb4a:	78fb      	ldrb	r3, [r7, #3]
 800fb4c:	4619      	mov	r1, r3
 800fb4e:	f7fe fdd3 	bl	800e6f8 <USBD_LL_DataInStage>
}
 800fb52:	bf00      	nop
 800fb54:	3708      	adds	r7, #8
 800fb56:	46bd      	mov	sp, r7
 800fb58:	bd80      	pop	{r7, pc}

0800fb5a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fb5a:	b580      	push	{r7, lr}
 800fb5c:	b082      	sub	sp, #8
 800fb5e:	af00      	add	r7, sp, #0
 800fb60:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800fb62:	687b      	ldr	r3, [r7, #4]
 800fb64:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800fb68:	4618      	mov	r0, r3
 800fb6a:	f7fe fee1 	bl	800e930 <USBD_LL_SOF>
}
 800fb6e:	bf00      	nop
 800fb70:	3708      	adds	r7, #8
 800fb72:	46bd      	mov	sp, r7
 800fb74:	bd80      	pop	{r7, pc}

0800fb76 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{ 
 800fb76:	b580      	push	{r7, lr}
 800fb78:	b084      	sub	sp, #16
 800fb7a:	af00      	add	r7, sp, #0
 800fb7c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800fb7e:	2301      	movs	r3, #1
 800fb80:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800fb82:	687b      	ldr	r3, [r7, #4]
 800fb84:	68db      	ldr	r3, [r3, #12]
 800fb86:	2b00      	cmp	r3, #0
 800fb88:	d102      	bne.n	800fb90 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800fb8a:	2300      	movs	r3, #0
 800fb8c:	73fb      	strb	r3, [r7, #15]
 800fb8e:	e008      	b.n	800fba2 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800fb90:	687b      	ldr	r3, [r7, #4]
 800fb92:	68db      	ldr	r3, [r3, #12]
 800fb94:	2b02      	cmp	r3, #2
 800fb96:	d102      	bne.n	800fb9e <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800fb98:	2301      	movs	r3, #1
 800fb9a:	73fb      	strb	r3, [r7, #15]
 800fb9c:	e001      	b.n	800fba2 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800fb9e:	f7f4 fd95 	bl	80046cc <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800fba2:	687b      	ldr	r3, [r7, #4]
 800fba4:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800fba8:	7bfa      	ldrb	r2, [r7, #15]
 800fbaa:	4611      	mov	r1, r2
 800fbac:	4618      	mov	r0, r3
 800fbae:	f7fe fe89 	bl	800e8c4 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800fbb2:	687b      	ldr	r3, [r7, #4]
 800fbb4:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800fbb8:	4618      	mov	r0, r3
 800fbba:	f7fe fe42 	bl	800e842 <USBD_LL_Reset>
}
 800fbbe:	bf00      	nop
 800fbc0:	3710      	adds	r7, #16
 800fbc2:	46bd      	mov	sp, r7
 800fbc4:	bd80      	pop	{r7, pc}
	...

0800fbc8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fbc8:	b580      	push	{r7, lr}
 800fbca:	b082      	sub	sp, #8
 800fbcc:	af00      	add	r7, sp, #0
 800fbce:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800fbd0:	687b      	ldr	r3, [r7, #4]
 800fbd2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800fbd6:	4618      	mov	r0, r3
 800fbd8:	f7fe fe84 	bl	800e8e4 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800fbdc:	687b      	ldr	r3, [r7, #4]
 800fbde:	681b      	ldr	r3, [r3, #0]
 800fbe0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800fbe4:	681b      	ldr	r3, [r3, #0]
 800fbe6:	687a      	ldr	r2, [r7, #4]
 800fbe8:	6812      	ldr	r2, [r2, #0]
 800fbea:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800fbee:	f043 0301 	orr.w	r3, r3, #1
 800fbf2:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800fbf4:	687b      	ldr	r3, [r7, #4]
 800fbf6:	6a1b      	ldr	r3, [r3, #32]
 800fbf8:	2b00      	cmp	r3, #0
 800fbfa:	d005      	beq.n	800fc08 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800fbfc:	4b04      	ldr	r3, [pc, #16]	; (800fc10 <HAL_PCD_SuspendCallback+0x48>)
 800fbfe:	691b      	ldr	r3, [r3, #16]
 800fc00:	4a03      	ldr	r2, [pc, #12]	; (800fc10 <HAL_PCD_SuspendCallback+0x48>)
 800fc02:	f043 0306 	orr.w	r3, r3, #6
 800fc06:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800fc08:	bf00      	nop
 800fc0a:	3708      	adds	r7, #8
 800fc0c:	46bd      	mov	sp, r7
 800fc0e:	bd80      	pop	{r7, pc}
 800fc10:	e000ed00 	.word	0xe000ed00

0800fc14 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fc14:	b580      	push	{r7, lr}
 800fc16:	b082      	sub	sp, #8
 800fc18:	af00      	add	r7, sp, #0
 800fc1a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800fc1c:	687b      	ldr	r3, [r7, #4]
 800fc1e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800fc22:	4618      	mov	r0, r3
 800fc24:	f7fe fe73 	bl	800e90e <USBD_LL_Resume>
}
 800fc28:	bf00      	nop
 800fc2a:	3708      	adds	r7, #8
 800fc2c:	46bd      	mov	sp, r7
 800fc2e:	bd80      	pop	{r7, pc}

0800fc30 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fc30:	b580      	push	{r7, lr}
 800fc32:	b082      	sub	sp, #8
 800fc34:	af00      	add	r7, sp, #0
 800fc36:	6078      	str	r0, [r7, #4]
 800fc38:	460b      	mov	r3, r1
 800fc3a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800fc3c:	687b      	ldr	r3, [r7, #4]
 800fc3e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800fc42:	78fa      	ldrb	r2, [r7, #3]
 800fc44:	4611      	mov	r1, r2
 800fc46:	4618      	mov	r0, r3
 800fc48:	f7fe fe99 	bl	800e97e <USBD_LL_IsoOUTIncomplete>
}
 800fc4c:	bf00      	nop
 800fc4e:	3708      	adds	r7, #8
 800fc50:	46bd      	mov	sp, r7
 800fc52:	bd80      	pop	{r7, pc}

0800fc54 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fc54:	b580      	push	{r7, lr}
 800fc56:	b082      	sub	sp, #8
 800fc58:	af00      	add	r7, sp, #0
 800fc5a:	6078      	str	r0, [r7, #4]
 800fc5c:	460b      	mov	r3, r1
 800fc5e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800fc60:	687b      	ldr	r3, [r7, #4]
 800fc62:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800fc66:	78fa      	ldrb	r2, [r7, #3]
 800fc68:	4611      	mov	r1, r2
 800fc6a:	4618      	mov	r0, r3
 800fc6c:	f7fe fe7a 	bl	800e964 <USBD_LL_IsoINIncomplete>
}
 800fc70:	bf00      	nop
 800fc72:	3708      	adds	r7, #8
 800fc74:	46bd      	mov	sp, r7
 800fc76:	bd80      	pop	{r7, pc}

0800fc78 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fc78:	b580      	push	{r7, lr}
 800fc7a:	b082      	sub	sp, #8
 800fc7c:	af00      	add	r7, sp, #0
 800fc7e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800fc80:	687b      	ldr	r3, [r7, #4]
 800fc82:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800fc86:	4618      	mov	r0, r3
 800fc88:	f7fe fe86 	bl	800e998 <USBD_LL_DevConnected>
}
 800fc8c:	bf00      	nop
 800fc8e:	3708      	adds	r7, #8
 800fc90:	46bd      	mov	sp, r7
 800fc92:	bd80      	pop	{r7, pc}

0800fc94 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fc94:	b580      	push	{r7, lr}
 800fc96:	b082      	sub	sp, #8
 800fc98:	af00      	add	r7, sp, #0
 800fc9a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800fc9c:	687b      	ldr	r3, [r7, #4]
 800fc9e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800fca2:	4618      	mov	r0, r3
 800fca4:	f7fe fe83 	bl	800e9ae <USBD_LL_DevDisconnected>
}
 800fca8:	bf00      	nop
 800fcaa:	3708      	adds	r7, #8
 800fcac:	46bd      	mov	sp, r7
 800fcae:	bd80      	pop	{r7, pc}

0800fcb0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800fcb0:	b580      	push	{r7, lr}
 800fcb2:	b082      	sub	sp, #8
 800fcb4:	af00      	add	r7, sp, #0
 800fcb6:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800fcb8:	687b      	ldr	r3, [r7, #4]
 800fcba:	781b      	ldrb	r3, [r3, #0]
 800fcbc:	2b00      	cmp	r3, #0
 800fcbe:	d13c      	bne.n	800fd3a <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800fcc0:	4a20      	ldr	r2, [pc, #128]	; (800fd44 <USBD_LL_Init+0x94>)
 800fcc2:	687b      	ldr	r3, [r7, #4]
 800fcc4:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 800fcc8:	687b      	ldr	r3, [r7, #4]
 800fcca:	4a1e      	ldr	r2, [pc, #120]	; (800fd44 <USBD_LL_Init+0x94>)
 800fccc:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298
  
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800fcd0:	4b1c      	ldr	r3, [pc, #112]	; (800fd44 <USBD_LL_Init+0x94>)
 800fcd2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800fcd6:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800fcd8:	4b1a      	ldr	r3, [pc, #104]	; (800fd44 <USBD_LL_Init+0x94>)
 800fcda:	2204      	movs	r2, #4
 800fcdc:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800fcde:	4b19      	ldr	r3, [pc, #100]	; (800fd44 <USBD_LL_Init+0x94>)
 800fce0:	2202      	movs	r2, #2
 800fce2:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800fce4:	4b17      	ldr	r3, [pc, #92]	; (800fd44 <USBD_LL_Init+0x94>)
 800fce6:	2200      	movs	r2, #0
 800fce8:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800fcea:	4b16      	ldr	r3, [pc, #88]	; (800fd44 <USBD_LL_Init+0x94>)
 800fcec:	2202      	movs	r2, #2
 800fcee:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800fcf0:	4b14      	ldr	r3, [pc, #80]	; (800fd44 <USBD_LL_Init+0x94>)
 800fcf2:	2200      	movs	r2, #0
 800fcf4:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800fcf6:	4b13      	ldr	r3, [pc, #76]	; (800fd44 <USBD_LL_Init+0x94>)
 800fcf8:	2200      	movs	r2, #0
 800fcfa:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800fcfc:	4b11      	ldr	r3, [pc, #68]	; (800fd44 <USBD_LL_Init+0x94>)
 800fcfe:	2200      	movs	r2, #0
 800fd00:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800fd02:	4b10      	ldr	r3, [pc, #64]	; (800fd44 <USBD_LL_Init+0x94>)
 800fd04:	2200      	movs	r2, #0
 800fd06:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800fd08:	4b0e      	ldr	r3, [pc, #56]	; (800fd44 <USBD_LL_Init+0x94>)
 800fd0a:	2200      	movs	r2, #0
 800fd0c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800fd0e:	480d      	ldr	r0, [pc, #52]	; (800fd44 <USBD_LL_Init+0x94>)
 800fd10:	f7f6 ffeb 	bl	8006cea <HAL_PCD_Init>
 800fd14:	4603      	mov	r3, r0
 800fd16:	2b00      	cmp	r3, #0
 800fd18:	d001      	beq.n	800fd1e <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800fd1a:	f7f4 fcd7 	bl	80046cc <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800fd1e:	2180      	movs	r1, #128	; 0x80
 800fd20:	4808      	ldr	r0, [pc, #32]	; (800fd44 <USBD_LL_Init+0x94>)
 800fd22:	f7f8 f950 	bl	8007fc6 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800fd26:	2240      	movs	r2, #64	; 0x40
 800fd28:	2100      	movs	r1, #0
 800fd2a:	4806      	ldr	r0, [pc, #24]	; (800fd44 <USBD_LL_Init+0x94>)
 800fd2c:	f7f8 f904 	bl	8007f38 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800fd30:	2280      	movs	r2, #128	; 0x80
 800fd32:	2101      	movs	r1, #1
 800fd34:	4803      	ldr	r0, [pc, #12]	; (800fd44 <USBD_LL_Init+0x94>)
 800fd36:	f7f8 f8ff 	bl	8007f38 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800fd3a:	2300      	movs	r3, #0
}
 800fd3c:	4618      	mov	r0, r3
 800fd3e:	3708      	adds	r7, #8
 800fd40:	46bd      	mov	sp, r7
 800fd42:	bd80      	pop	{r7, pc}
 800fd44:	200046a0 	.word	0x200046a0

0800fd48 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver. 
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800fd48:	b580      	push	{r7, lr}
 800fd4a:	b084      	sub	sp, #16
 800fd4c:	af00      	add	r7, sp, #0
 800fd4e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fd50:	2300      	movs	r3, #0
 800fd52:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800fd54:	2300      	movs	r3, #0
 800fd56:	73bb      	strb	r3, [r7, #14]
 
  hal_status = HAL_PCD_Start(pdev->pData);
 800fd58:	687b      	ldr	r3, [r7, #4]
 800fd5a:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800fd5e:	4618      	mov	r0, r3
 800fd60:	f7f7 f8e0 	bl	8006f24 <HAL_PCD_Start>
 800fd64:	4603      	mov	r3, r0
 800fd66:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);     
 800fd68:	7bfb      	ldrb	r3, [r7, #15]
 800fd6a:	4618      	mov	r0, r3
 800fd6c:	f000 f92e 	bl	800ffcc <USBD_Get_USB_Status>
 800fd70:	4603      	mov	r3, r0
 800fd72:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 800fd74:	7bbb      	ldrb	r3, [r7, #14]
}
 800fd76:	4618      	mov	r0, r3
 800fd78:	3710      	adds	r7, #16
 800fd7a:	46bd      	mov	sp, r7
 800fd7c:	bd80      	pop	{r7, pc}

0800fd7e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800fd7e:	b580      	push	{r7, lr}
 800fd80:	b084      	sub	sp, #16
 800fd82:	af00      	add	r7, sp, #0
 800fd84:	6078      	str	r0, [r7, #4]
 800fd86:	4608      	mov	r0, r1
 800fd88:	4611      	mov	r1, r2
 800fd8a:	461a      	mov	r2, r3
 800fd8c:	4603      	mov	r3, r0
 800fd8e:	70fb      	strb	r3, [r7, #3]
 800fd90:	460b      	mov	r3, r1
 800fd92:	70bb      	strb	r3, [r7, #2]
 800fd94:	4613      	mov	r3, r2
 800fd96:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fd98:	2300      	movs	r3, #0
 800fd9a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800fd9c:	2300      	movs	r3, #0
 800fd9e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800fda0:	687b      	ldr	r3, [r7, #4]
 800fda2:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 800fda6:	78bb      	ldrb	r3, [r7, #2]
 800fda8:	883a      	ldrh	r2, [r7, #0]
 800fdaa:	78f9      	ldrb	r1, [r7, #3]
 800fdac:	f7f7 fcb5 	bl	800771a <HAL_PCD_EP_Open>
 800fdb0:	4603      	mov	r3, r0
 800fdb2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800fdb4:	7bfb      	ldrb	r3, [r7, #15]
 800fdb6:	4618      	mov	r0, r3
 800fdb8:	f000 f908 	bl	800ffcc <USBD_Get_USB_Status>
 800fdbc:	4603      	mov	r3, r0
 800fdbe:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 800fdc0:	7bbb      	ldrb	r3, [r7, #14]
}
 800fdc2:	4618      	mov	r0, r3
 800fdc4:	3710      	adds	r7, #16
 800fdc6:	46bd      	mov	sp, r7
 800fdc8:	bd80      	pop	{r7, pc}

0800fdca <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800fdca:	b580      	push	{r7, lr}
 800fdcc:	b084      	sub	sp, #16
 800fdce:	af00      	add	r7, sp, #0
 800fdd0:	6078      	str	r0, [r7, #4]
 800fdd2:	460b      	mov	r3, r1
 800fdd4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fdd6:	2300      	movs	r3, #0
 800fdd8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800fdda:	2300      	movs	r3, #0
 800fddc:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800fdde:	687b      	ldr	r3, [r7, #4]
 800fde0:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800fde4:	78fa      	ldrb	r2, [r7, #3]
 800fde6:	4611      	mov	r1, r2
 800fde8:	4618      	mov	r0, r3
 800fdea:	f7f7 fcfe 	bl	80077ea <HAL_PCD_EP_Close>
 800fdee:	4603      	mov	r3, r0
 800fdf0:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);    
 800fdf2:	7bfb      	ldrb	r3, [r7, #15]
 800fdf4:	4618      	mov	r0, r3
 800fdf6:	f000 f8e9 	bl	800ffcc <USBD_Get_USB_Status>
 800fdfa:	4603      	mov	r3, r0
 800fdfc:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;  
 800fdfe:	7bbb      	ldrb	r3, [r7, #14]
}
 800fe00:	4618      	mov	r0, r3
 800fe02:	3710      	adds	r7, #16
 800fe04:	46bd      	mov	sp, r7
 800fe06:	bd80      	pop	{r7, pc}

0800fe08 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800fe08:	b580      	push	{r7, lr}
 800fe0a:	b084      	sub	sp, #16
 800fe0c:	af00      	add	r7, sp, #0
 800fe0e:	6078      	str	r0, [r7, #4]
 800fe10:	460b      	mov	r3, r1
 800fe12:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fe14:	2300      	movs	r3, #0
 800fe16:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800fe18:	2300      	movs	r3, #0
 800fe1a:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800fe1c:	687b      	ldr	r3, [r7, #4]
 800fe1e:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800fe22:	78fa      	ldrb	r2, [r7, #3]
 800fe24:	4611      	mov	r1, r2
 800fe26:	4618      	mov	r0, r3
 800fe28:	f7f7 fdd6 	bl	80079d8 <HAL_PCD_EP_SetStall>
 800fe2c:	4603      	mov	r3, r0
 800fe2e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800fe30:	7bfb      	ldrb	r3, [r7, #15]
 800fe32:	4618      	mov	r0, r3
 800fe34:	f000 f8ca 	bl	800ffcc <USBD_Get_USB_Status>
 800fe38:	4603      	mov	r3, r0
 800fe3a:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;  
 800fe3c:	7bbb      	ldrb	r3, [r7, #14]
}
 800fe3e:	4618      	mov	r0, r3
 800fe40:	3710      	adds	r7, #16
 800fe42:	46bd      	mov	sp, r7
 800fe44:	bd80      	pop	{r7, pc}

0800fe46 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800fe46:	b580      	push	{r7, lr}
 800fe48:	b084      	sub	sp, #16
 800fe4a:	af00      	add	r7, sp, #0
 800fe4c:	6078      	str	r0, [r7, #4]
 800fe4e:	460b      	mov	r3, r1
 800fe50:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fe52:	2300      	movs	r3, #0
 800fe54:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800fe56:	2300      	movs	r3, #0
 800fe58:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800fe5a:	687b      	ldr	r3, [r7, #4]
 800fe5c:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800fe60:	78fa      	ldrb	r2, [r7, #3]
 800fe62:	4611      	mov	r1, r2
 800fe64:	4618      	mov	r0, r3
 800fe66:	f7f7 fe1b 	bl	8007aa0 <HAL_PCD_EP_ClrStall>
 800fe6a:	4603      	mov	r3, r0
 800fe6c:	73fb      	strb	r3, [r7, #15]
    
  usb_status =  USBD_Get_USB_Status(hal_status);  
 800fe6e:	7bfb      	ldrb	r3, [r7, #15]
 800fe70:	4618      	mov	r0, r3
 800fe72:	f000 f8ab 	bl	800ffcc <USBD_Get_USB_Status>
 800fe76:	4603      	mov	r3, r0
 800fe78:	73bb      	strb	r3, [r7, #14]
  
  return usb_status; 
 800fe7a:	7bbb      	ldrb	r3, [r7, #14]
}
 800fe7c:	4618      	mov	r0, r3
 800fe7e:	3710      	adds	r7, #16
 800fe80:	46bd      	mov	sp, r7
 800fe82:	bd80      	pop	{r7, pc}

0800fe84 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800fe84:	b480      	push	{r7}
 800fe86:	b085      	sub	sp, #20
 800fe88:	af00      	add	r7, sp, #0
 800fe8a:	6078      	str	r0, [r7, #4]
 800fe8c:	460b      	mov	r3, r1
 800fe8e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800fe90:	687b      	ldr	r3, [r7, #4]
 800fe92:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800fe96:	60fb      	str	r3, [r7, #12]
  
  if((ep_addr & 0x80) == 0x80)
 800fe98:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800fe9c:	2b00      	cmp	r3, #0
 800fe9e:	da0b      	bge.n	800feb8 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 800fea0:	78fb      	ldrb	r3, [r7, #3]
 800fea2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800fea6:	68f9      	ldr	r1, [r7, #12]
 800fea8:	4613      	mov	r3, r2
 800feaa:	00db      	lsls	r3, r3, #3
 800feac:	1a9b      	subs	r3, r3, r2
 800feae:	009b      	lsls	r3, r3, #2
 800feb0:	440b      	add	r3, r1
 800feb2:	333e      	adds	r3, #62	; 0x3e
 800feb4:	781b      	ldrb	r3, [r3, #0]
 800feb6:	e00b      	b.n	800fed0 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 800feb8:	78fb      	ldrb	r3, [r7, #3]
 800feba:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800febe:	68f9      	ldr	r1, [r7, #12]
 800fec0:	4613      	mov	r3, r2
 800fec2:	00db      	lsls	r3, r3, #3
 800fec4:	1a9b      	subs	r3, r3, r2
 800fec6:	009b      	lsls	r3, r3, #2
 800fec8:	440b      	add	r3, r1
 800feca:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800fece:	781b      	ldrb	r3, [r3, #0]
  }
}
 800fed0:	4618      	mov	r0, r3
 800fed2:	3714      	adds	r7, #20
 800fed4:	46bd      	mov	sp, r7
 800fed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800feda:	4770      	bx	lr

0800fedc <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800fedc:	b580      	push	{r7, lr}
 800fede:	b084      	sub	sp, #16
 800fee0:	af00      	add	r7, sp, #0
 800fee2:	6078      	str	r0, [r7, #4]
 800fee4:	460b      	mov	r3, r1
 800fee6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fee8:	2300      	movs	r3, #0
 800feea:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800feec:	2300      	movs	r3, #0
 800feee:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800fef0:	687b      	ldr	r3, [r7, #4]
 800fef2:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800fef6:	78fa      	ldrb	r2, [r7, #3]
 800fef8:	4611      	mov	r1, r2
 800fefa:	4618      	mov	r0, r3
 800fefc:	f7f7 fbe8 	bl	80076d0 <HAL_PCD_SetAddress>
 800ff00:	4603      	mov	r3, r0
 800ff02:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);
 800ff04:	7bfb      	ldrb	r3, [r7, #15]
 800ff06:	4618      	mov	r0, r3
 800ff08:	f000 f860 	bl	800ffcc <USBD_Get_USB_Status>
 800ff0c:	4603      	mov	r3, r0
 800ff0e:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;  
 800ff10:	7bbb      	ldrb	r3, [r7, #14]
}
 800ff12:	4618      	mov	r0, r3
 800ff14:	3710      	adds	r7, #16
 800ff16:	46bd      	mov	sp, r7
 800ff18:	bd80      	pop	{r7, pc}

0800ff1a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800ff1a:	b580      	push	{r7, lr}
 800ff1c:	b086      	sub	sp, #24
 800ff1e:	af00      	add	r7, sp, #0
 800ff20:	60f8      	str	r0, [r7, #12]
 800ff22:	607a      	str	r2, [r7, #4]
 800ff24:	461a      	mov	r2, r3
 800ff26:	460b      	mov	r3, r1
 800ff28:	72fb      	strb	r3, [r7, #11]
 800ff2a:	4613      	mov	r3, r2
 800ff2c:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ff2e:	2300      	movs	r3, #0
 800ff30:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ff32:	2300      	movs	r3, #0
 800ff34:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800ff36:	68fb      	ldr	r3, [r7, #12]
 800ff38:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 800ff3c:	893b      	ldrh	r3, [r7, #8]
 800ff3e:	7af9      	ldrb	r1, [r7, #11]
 800ff40:	687a      	ldr	r2, [r7, #4]
 800ff42:	f7f7 fcff 	bl	8007944 <HAL_PCD_EP_Transmit>
 800ff46:	4603      	mov	r3, r0
 800ff48:	75fb      	strb	r3, [r7, #23]
  
  usb_status =  USBD_Get_USB_Status(hal_status); 
 800ff4a:	7dfb      	ldrb	r3, [r7, #23]
 800ff4c:	4618      	mov	r0, r3
 800ff4e:	f000 f83d 	bl	800ffcc <USBD_Get_USB_Status>
 800ff52:	4603      	mov	r3, r0
 800ff54:	75bb      	strb	r3, [r7, #22]
  
  return usb_status;    
 800ff56:	7dbb      	ldrb	r3, [r7, #22]
}
 800ff58:	4618      	mov	r0, r3
 800ff5a:	3718      	adds	r7, #24
 800ff5c:	46bd      	mov	sp, r7
 800ff5e:	bd80      	pop	{r7, pc}

0800ff60 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800ff60:	b580      	push	{r7, lr}
 800ff62:	b086      	sub	sp, #24
 800ff64:	af00      	add	r7, sp, #0
 800ff66:	60f8      	str	r0, [r7, #12]
 800ff68:	607a      	str	r2, [r7, #4]
 800ff6a:	461a      	mov	r2, r3
 800ff6c:	460b      	mov	r3, r1
 800ff6e:	72fb      	strb	r3, [r7, #11]
 800ff70:	4613      	mov	r3, r2
 800ff72:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ff74:	2300      	movs	r3, #0
 800ff76:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ff78:	2300      	movs	r3, #0
 800ff7a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800ff7c:	68fb      	ldr	r3, [r7, #12]
 800ff7e:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 800ff82:	893b      	ldrh	r3, [r7, #8]
 800ff84:	7af9      	ldrb	r1, [r7, #11]
 800ff86:	687a      	ldr	r2, [r7, #4]
 800ff88:	f7f7 fc79 	bl	800787e <HAL_PCD_EP_Receive>
 800ff8c:	4603      	mov	r3, r0
 800ff8e:	75fb      	strb	r3, [r7, #23]
  
  usb_status =  USBD_Get_USB_Status(hal_status);   
 800ff90:	7dfb      	ldrb	r3, [r7, #23]
 800ff92:	4618      	mov	r0, r3
 800ff94:	f000 f81a 	bl	800ffcc <USBD_Get_USB_Status>
 800ff98:	4603      	mov	r3, r0
 800ff9a:	75bb      	strb	r3, [r7, #22]
  
  return usb_status; 
 800ff9c:	7dbb      	ldrb	r3, [r7, #22]
}
 800ff9e:	4618      	mov	r0, r3
 800ffa0:	3718      	adds	r7, #24
 800ffa2:	46bd      	mov	sp, r7
 800ffa4:	bd80      	pop	{r7, pc}

0800ffa6 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ffa6:	b580      	push	{r7, lr}
 800ffa8:	b082      	sub	sp, #8
 800ffaa:	af00      	add	r7, sp, #0
 800ffac:	6078      	str	r0, [r7, #4]
 800ffae:	460b      	mov	r3, r1
 800ffb0:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800ffb2:	687b      	ldr	r3, [r7, #4]
 800ffb4:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800ffb8:	78fa      	ldrb	r2, [r7, #3]
 800ffba:	4611      	mov	r1, r2
 800ffbc:	4618      	mov	r0, r3
 800ffbe:	f7f7 fca9 	bl	8007914 <HAL_PCD_EP_GetRxCount>
 800ffc2:	4603      	mov	r3, r0
}
 800ffc4:	4618      	mov	r0, r3
 800ffc6:	3708      	adds	r7, #8
 800ffc8:	46bd      	mov	sp, r7
 800ffca:	bd80      	pop	{r7, pc}

0800ffcc <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800ffcc:	b480      	push	{r7}
 800ffce:	b085      	sub	sp, #20
 800ffd0:	af00      	add	r7, sp, #0
 800ffd2:	4603      	mov	r3, r0
 800ffd4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ffd6:	2300      	movs	r3, #0
 800ffd8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800ffda:	79fb      	ldrb	r3, [r7, #7]
 800ffdc:	2b03      	cmp	r3, #3
 800ffde:	d817      	bhi.n	8010010 <USBD_Get_USB_Status+0x44>
 800ffe0:	a201      	add	r2, pc, #4	; (adr r2, 800ffe8 <USBD_Get_USB_Status+0x1c>)
 800ffe2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ffe6:	bf00      	nop
 800ffe8:	0800fff9 	.word	0x0800fff9
 800ffec:	0800ffff 	.word	0x0800ffff
 800fff0:	08010005 	.word	0x08010005
 800fff4:	0801000b 	.word	0x0801000b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800fff8:	2300      	movs	r3, #0
 800fffa:	73fb      	strb	r3, [r7, #15]
    break;
 800fffc:	e00b      	b.n	8010016 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800fffe:	2302      	movs	r3, #2
 8010000:	73fb      	strb	r3, [r7, #15]
    break;
 8010002:	e008      	b.n	8010016 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8010004:	2301      	movs	r3, #1
 8010006:	73fb      	strb	r3, [r7, #15]
    break;
 8010008:	e005      	b.n	8010016 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 801000a:	2302      	movs	r3, #2
 801000c:	73fb      	strb	r3, [r7, #15]
    break;
 801000e:	e002      	b.n	8010016 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8010010:	2302      	movs	r3, #2
 8010012:	73fb      	strb	r3, [r7, #15]
    break;
 8010014:	bf00      	nop
  }
  return usb_status;
 8010016:	7bfb      	ldrb	r3, [r7, #15]
}
 8010018:	4618      	mov	r0, r3
 801001a:	3714      	adds	r7, #20
 801001c:	46bd      	mov	sp, r7
 801001e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010022:	4770      	bx	lr

08010024 <__libc_init_array>:
 8010024:	b570      	push	{r4, r5, r6, lr}
 8010026:	4e0d      	ldr	r6, [pc, #52]	; (801005c <__libc_init_array+0x38>)
 8010028:	4c0d      	ldr	r4, [pc, #52]	; (8010060 <__libc_init_array+0x3c>)
 801002a:	1ba4      	subs	r4, r4, r6
 801002c:	10a4      	asrs	r4, r4, #2
 801002e:	2500      	movs	r5, #0
 8010030:	42a5      	cmp	r5, r4
 8010032:	d109      	bne.n	8010048 <__libc_init_array+0x24>
 8010034:	4e0b      	ldr	r6, [pc, #44]	; (8010064 <__libc_init_array+0x40>)
 8010036:	4c0c      	ldr	r4, [pc, #48]	; (8010068 <__libc_init_array+0x44>)
 8010038:	f005 f8f2 	bl	8015220 <_init>
 801003c:	1ba4      	subs	r4, r4, r6
 801003e:	10a4      	asrs	r4, r4, #2
 8010040:	2500      	movs	r5, #0
 8010042:	42a5      	cmp	r5, r4
 8010044:	d105      	bne.n	8010052 <__libc_init_array+0x2e>
 8010046:	bd70      	pop	{r4, r5, r6, pc}
 8010048:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 801004c:	4798      	blx	r3
 801004e:	3501      	adds	r5, #1
 8010050:	e7ee      	b.n	8010030 <__libc_init_array+0xc>
 8010052:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8010056:	4798      	blx	r3
 8010058:	3501      	adds	r5, #1
 801005a:	e7f2      	b.n	8010042 <__libc_init_array+0x1e>
 801005c:	08015d28 	.word	0x08015d28
 8010060:	08015d28 	.word	0x08015d28
 8010064:	08015d28 	.word	0x08015d28
 8010068:	08015d2c 	.word	0x08015d2c

0801006c <malloc>:
 801006c:	4b02      	ldr	r3, [pc, #8]	; (8010078 <malloc+0xc>)
 801006e:	4601      	mov	r1, r0
 8010070:	6818      	ldr	r0, [r3, #0]
 8010072:	f000 b86d 	b.w	8010150 <_malloc_r>
 8010076:	bf00      	nop
 8010078:	2000017c 	.word	0x2000017c

0801007c <free>:
 801007c:	4b02      	ldr	r3, [pc, #8]	; (8010088 <free+0xc>)
 801007e:	4601      	mov	r1, r0
 8010080:	6818      	ldr	r0, [r3, #0]
 8010082:	f000 b817 	b.w	80100b4 <_free_r>
 8010086:	bf00      	nop
 8010088:	2000017c 	.word	0x2000017c

0801008c <memcpy>:
 801008c:	b510      	push	{r4, lr}
 801008e:	1e43      	subs	r3, r0, #1
 8010090:	440a      	add	r2, r1
 8010092:	4291      	cmp	r1, r2
 8010094:	d100      	bne.n	8010098 <memcpy+0xc>
 8010096:	bd10      	pop	{r4, pc}
 8010098:	f811 4b01 	ldrb.w	r4, [r1], #1
 801009c:	f803 4f01 	strb.w	r4, [r3, #1]!
 80100a0:	e7f7      	b.n	8010092 <memcpy+0x6>

080100a2 <memset>:
 80100a2:	4402      	add	r2, r0
 80100a4:	4603      	mov	r3, r0
 80100a6:	4293      	cmp	r3, r2
 80100a8:	d100      	bne.n	80100ac <memset+0xa>
 80100aa:	4770      	bx	lr
 80100ac:	f803 1b01 	strb.w	r1, [r3], #1
 80100b0:	e7f9      	b.n	80100a6 <memset+0x4>
	...

080100b4 <_free_r>:
 80100b4:	b538      	push	{r3, r4, r5, lr}
 80100b6:	4605      	mov	r5, r0
 80100b8:	2900      	cmp	r1, #0
 80100ba:	d045      	beq.n	8010148 <_free_r+0x94>
 80100bc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80100c0:	1f0c      	subs	r4, r1, #4
 80100c2:	2b00      	cmp	r3, #0
 80100c4:	bfb8      	it	lt
 80100c6:	18e4      	addlt	r4, r4, r3
 80100c8:	f002 ff62 	bl	8012f90 <__malloc_lock>
 80100cc:	4a1f      	ldr	r2, [pc, #124]	; (801014c <_free_r+0x98>)
 80100ce:	6813      	ldr	r3, [r2, #0]
 80100d0:	4610      	mov	r0, r2
 80100d2:	b933      	cbnz	r3, 80100e2 <_free_r+0x2e>
 80100d4:	6063      	str	r3, [r4, #4]
 80100d6:	6014      	str	r4, [r2, #0]
 80100d8:	4628      	mov	r0, r5
 80100da:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80100de:	f002 bf58 	b.w	8012f92 <__malloc_unlock>
 80100e2:	42a3      	cmp	r3, r4
 80100e4:	d90c      	bls.n	8010100 <_free_r+0x4c>
 80100e6:	6821      	ldr	r1, [r4, #0]
 80100e8:	1862      	adds	r2, r4, r1
 80100ea:	4293      	cmp	r3, r2
 80100ec:	bf04      	itt	eq
 80100ee:	681a      	ldreq	r2, [r3, #0]
 80100f0:	685b      	ldreq	r3, [r3, #4]
 80100f2:	6063      	str	r3, [r4, #4]
 80100f4:	bf04      	itt	eq
 80100f6:	1852      	addeq	r2, r2, r1
 80100f8:	6022      	streq	r2, [r4, #0]
 80100fa:	6004      	str	r4, [r0, #0]
 80100fc:	e7ec      	b.n	80100d8 <_free_r+0x24>
 80100fe:	4613      	mov	r3, r2
 8010100:	685a      	ldr	r2, [r3, #4]
 8010102:	b10a      	cbz	r2, 8010108 <_free_r+0x54>
 8010104:	42a2      	cmp	r2, r4
 8010106:	d9fa      	bls.n	80100fe <_free_r+0x4a>
 8010108:	6819      	ldr	r1, [r3, #0]
 801010a:	1858      	adds	r0, r3, r1
 801010c:	42a0      	cmp	r0, r4
 801010e:	d10b      	bne.n	8010128 <_free_r+0x74>
 8010110:	6820      	ldr	r0, [r4, #0]
 8010112:	4401      	add	r1, r0
 8010114:	1858      	adds	r0, r3, r1
 8010116:	4282      	cmp	r2, r0
 8010118:	6019      	str	r1, [r3, #0]
 801011a:	d1dd      	bne.n	80100d8 <_free_r+0x24>
 801011c:	6810      	ldr	r0, [r2, #0]
 801011e:	6852      	ldr	r2, [r2, #4]
 8010120:	605a      	str	r2, [r3, #4]
 8010122:	4401      	add	r1, r0
 8010124:	6019      	str	r1, [r3, #0]
 8010126:	e7d7      	b.n	80100d8 <_free_r+0x24>
 8010128:	d902      	bls.n	8010130 <_free_r+0x7c>
 801012a:	230c      	movs	r3, #12
 801012c:	602b      	str	r3, [r5, #0]
 801012e:	e7d3      	b.n	80100d8 <_free_r+0x24>
 8010130:	6820      	ldr	r0, [r4, #0]
 8010132:	1821      	adds	r1, r4, r0
 8010134:	428a      	cmp	r2, r1
 8010136:	bf04      	itt	eq
 8010138:	6811      	ldreq	r1, [r2, #0]
 801013a:	6852      	ldreq	r2, [r2, #4]
 801013c:	6062      	str	r2, [r4, #4]
 801013e:	bf04      	itt	eq
 8010140:	1809      	addeq	r1, r1, r0
 8010142:	6021      	streq	r1, [r4, #0]
 8010144:	605c      	str	r4, [r3, #4]
 8010146:	e7c7      	b.n	80100d8 <_free_r+0x24>
 8010148:	bd38      	pop	{r3, r4, r5, pc}
 801014a:	bf00      	nop
 801014c:	20000788 	.word	0x20000788

08010150 <_malloc_r>:
 8010150:	b570      	push	{r4, r5, r6, lr}
 8010152:	1ccd      	adds	r5, r1, #3
 8010154:	f025 0503 	bic.w	r5, r5, #3
 8010158:	3508      	adds	r5, #8
 801015a:	2d0c      	cmp	r5, #12
 801015c:	bf38      	it	cc
 801015e:	250c      	movcc	r5, #12
 8010160:	2d00      	cmp	r5, #0
 8010162:	4606      	mov	r6, r0
 8010164:	db01      	blt.n	801016a <_malloc_r+0x1a>
 8010166:	42a9      	cmp	r1, r5
 8010168:	d903      	bls.n	8010172 <_malloc_r+0x22>
 801016a:	230c      	movs	r3, #12
 801016c:	6033      	str	r3, [r6, #0]
 801016e:	2000      	movs	r0, #0
 8010170:	bd70      	pop	{r4, r5, r6, pc}
 8010172:	f002 ff0d 	bl	8012f90 <__malloc_lock>
 8010176:	4a21      	ldr	r2, [pc, #132]	; (80101fc <_malloc_r+0xac>)
 8010178:	6814      	ldr	r4, [r2, #0]
 801017a:	4621      	mov	r1, r4
 801017c:	b991      	cbnz	r1, 80101a4 <_malloc_r+0x54>
 801017e:	4c20      	ldr	r4, [pc, #128]	; (8010200 <_malloc_r+0xb0>)
 8010180:	6823      	ldr	r3, [r4, #0]
 8010182:	b91b      	cbnz	r3, 801018c <_malloc_r+0x3c>
 8010184:	4630      	mov	r0, r6
 8010186:	f000 fe7b 	bl	8010e80 <_sbrk_r>
 801018a:	6020      	str	r0, [r4, #0]
 801018c:	4629      	mov	r1, r5
 801018e:	4630      	mov	r0, r6
 8010190:	f000 fe76 	bl	8010e80 <_sbrk_r>
 8010194:	1c43      	adds	r3, r0, #1
 8010196:	d124      	bne.n	80101e2 <_malloc_r+0x92>
 8010198:	230c      	movs	r3, #12
 801019a:	6033      	str	r3, [r6, #0]
 801019c:	4630      	mov	r0, r6
 801019e:	f002 fef8 	bl	8012f92 <__malloc_unlock>
 80101a2:	e7e4      	b.n	801016e <_malloc_r+0x1e>
 80101a4:	680b      	ldr	r3, [r1, #0]
 80101a6:	1b5b      	subs	r3, r3, r5
 80101a8:	d418      	bmi.n	80101dc <_malloc_r+0x8c>
 80101aa:	2b0b      	cmp	r3, #11
 80101ac:	d90f      	bls.n	80101ce <_malloc_r+0x7e>
 80101ae:	600b      	str	r3, [r1, #0]
 80101b0:	50cd      	str	r5, [r1, r3]
 80101b2:	18cc      	adds	r4, r1, r3
 80101b4:	4630      	mov	r0, r6
 80101b6:	f002 feec 	bl	8012f92 <__malloc_unlock>
 80101ba:	f104 000b 	add.w	r0, r4, #11
 80101be:	1d23      	adds	r3, r4, #4
 80101c0:	f020 0007 	bic.w	r0, r0, #7
 80101c4:	1ac3      	subs	r3, r0, r3
 80101c6:	d0d3      	beq.n	8010170 <_malloc_r+0x20>
 80101c8:	425a      	negs	r2, r3
 80101ca:	50e2      	str	r2, [r4, r3]
 80101cc:	e7d0      	b.n	8010170 <_malloc_r+0x20>
 80101ce:	428c      	cmp	r4, r1
 80101d0:	684b      	ldr	r3, [r1, #4]
 80101d2:	bf16      	itet	ne
 80101d4:	6063      	strne	r3, [r4, #4]
 80101d6:	6013      	streq	r3, [r2, #0]
 80101d8:	460c      	movne	r4, r1
 80101da:	e7eb      	b.n	80101b4 <_malloc_r+0x64>
 80101dc:	460c      	mov	r4, r1
 80101de:	6849      	ldr	r1, [r1, #4]
 80101e0:	e7cc      	b.n	801017c <_malloc_r+0x2c>
 80101e2:	1cc4      	adds	r4, r0, #3
 80101e4:	f024 0403 	bic.w	r4, r4, #3
 80101e8:	42a0      	cmp	r0, r4
 80101ea:	d005      	beq.n	80101f8 <_malloc_r+0xa8>
 80101ec:	1a21      	subs	r1, r4, r0
 80101ee:	4630      	mov	r0, r6
 80101f0:	f000 fe46 	bl	8010e80 <_sbrk_r>
 80101f4:	3001      	adds	r0, #1
 80101f6:	d0cf      	beq.n	8010198 <_malloc_r+0x48>
 80101f8:	6025      	str	r5, [r4, #0]
 80101fa:	e7db      	b.n	80101b4 <_malloc_r+0x64>
 80101fc:	20000788 	.word	0x20000788
 8010200:	2000078c 	.word	0x2000078c

08010204 <__cvt>:
 8010204:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8010208:	ec55 4b10 	vmov	r4, r5, d0
 801020c:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 801020e:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8010212:	2d00      	cmp	r5, #0
 8010214:	460e      	mov	r6, r1
 8010216:	4691      	mov	r9, r2
 8010218:	4619      	mov	r1, r3
 801021a:	bfb8      	it	lt
 801021c:	4622      	movlt	r2, r4
 801021e:	462b      	mov	r3, r5
 8010220:	f027 0720 	bic.w	r7, r7, #32
 8010224:	bfbb      	ittet	lt
 8010226:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 801022a:	461d      	movlt	r5, r3
 801022c:	2300      	movge	r3, #0
 801022e:	232d      	movlt	r3, #45	; 0x2d
 8010230:	bfb8      	it	lt
 8010232:	4614      	movlt	r4, r2
 8010234:	2f46      	cmp	r7, #70	; 0x46
 8010236:	700b      	strb	r3, [r1, #0]
 8010238:	d004      	beq.n	8010244 <__cvt+0x40>
 801023a:	2f45      	cmp	r7, #69	; 0x45
 801023c:	d100      	bne.n	8010240 <__cvt+0x3c>
 801023e:	3601      	adds	r6, #1
 8010240:	2102      	movs	r1, #2
 8010242:	e000      	b.n	8010246 <__cvt+0x42>
 8010244:	2103      	movs	r1, #3
 8010246:	ab03      	add	r3, sp, #12
 8010248:	9301      	str	r3, [sp, #4]
 801024a:	ab02      	add	r3, sp, #8
 801024c:	9300      	str	r3, [sp, #0]
 801024e:	4632      	mov	r2, r6
 8010250:	4653      	mov	r3, sl
 8010252:	ec45 4b10 	vmov	d0, r4, r5
 8010256:	f001 fd97 	bl	8011d88 <_dtoa_r>
 801025a:	2f47      	cmp	r7, #71	; 0x47
 801025c:	4680      	mov	r8, r0
 801025e:	d102      	bne.n	8010266 <__cvt+0x62>
 8010260:	f019 0f01 	tst.w	r9, #1
 8010264:	d026      	beq.n	80102b4 <__cvt+0xb0>
 8010266:	2f46      	cmp	r7, #70	; 0x46
 8010268:	eb08 0906 	add.w	r9, r8, r6
 801026c:	d111      	bne.n	8010292 <__cvt+0x8e>
 801026e:	f898 3000 	ldrb.w	r3, [r8]
 8010272:	2b30      	cmp	r3, #48	; 0x30
 8010274:	d10a      	bne.n	801028c <__cvt+0x88>
 8010276:	2200      	movs	r2, #0
 8010278:	2300      	movs	r3, #0
 801027a:	4620      	mov	r0, r4
 801027c:	4629      	mov	r1, r5
 801027e:	f7f0 fc23 	bl	8000ac8 <__aeabi_dcmpeq>
 8010282:	b918      	cbnz	r0, 801028c <__cvt+0x88>
 8010284:	f1c6 0601 	rsb	r6, r6, #1
 8010288:	f8ca 6000 	str.w	r6, [sl]
 801028c:	f8da 3000 	ldr.w	r3, [sl]
 8010290:	4499      	add	r9, r3
 8010292:	2200      	movs	r2, #0
 8010294:	2300      	movs	r3, #0
 8010296:	4620      	mov	r0, r4
 8010298:	4629      	mov	r1, r5
 801029a:	f7f0 fc15 	bl	8000ac8 <__aeabi_dcmpeq>
 801029e:	b938      	cbnz	r0, 80102b0 <__cvt+0xac>
 80102a0:	2230      	movs	r2, #48	; 0x30
 80102a2:	9b03      	ldr	r3, [sp, #12]
 80102a4:	454b      	cmp	r3, r9
 80102a6:	d205      	bcs.n	80102b4 <__cvt+0xb0>
 80102a8:	1c59      	adds	r1, r3, #1
 80102aa:	9103      	str	r1, [sp, #12]
 80102ac:	701a      	strb	r2, [r3, #0]
 80102ae:	e7f8      	b.n	80102a2 <__cvt+0x9e>
 80102b0:	f8cd 900c 	str.w	r9, [sp, #12]
 80102b4:	9b03      	ldr	r3, [sp, #12]
 80102b6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80102b8:	eba3 0308 	sub.w	r3, r3, r8
 80102bc:	4640      	mov	r0, r8
 80102be:	6013      	str	r3, [r2, #0]
 80102c0:	b004      	add	sp, #16
 80102c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080102c6 <__exponent>:
 80102c6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80102c8:	2900      	cmp	r1, #0
 80102ca:	4604      	mov	r4, r0
 80102cc:	bfba      	itte	lt
 80102ce:	4249      	neglt	r1, r1
 80102d0:	232d      	movlt	r3, #45	; 0x2d
 80102d2:	232b      	movge	r3, #43	; 0x2b
 80102d4:	2909      	cmp	r1, #9
 80102d6:	f804 2b02 	strb.w	r2, [r4], #2
 80102da:	7043      	strb	r3, [r0, #1]
 80102dc:	dd20      	ble.n	8010320 <__exponent+0x5a>
 80102de:	f10d 0307 	add.w	r3, sp, #7
 80102e2:	461f      	mov	r7, r3
 80102e4:	260a      	movs	r6, #10
 80102e6:	fb91 f5f6 	sdiv	r5, r1, r6
 80102ea:	fb06 1115 	mls	r1, r6, r5, r1
 80102ee:	3130      	adds	r1, #48	; 0x30
 80102f0:	2d09      	cmp	r5, #9
 80102f2:	f803 1c01 	strb.w	r1, [r3, #-1]
 80102f6:	f103 32ff 	add.w	r2, r3, #4294967295
 80102fa:	4629      	mov	r1, r5
 80102fc:	dc09      	bgt.n	8010312 <__exponent+0x4c>
 80102fe:	3130      	adds	r1, #48	; 0x30
 8010300:	3b02      	subs	r3, #2
 8010302:	f802 1c01 	strb.w	r1, [r2, #-1]
 8010306:	42bb      	cmp	r3, r7
 8010308:	4622      	mov	r2, r4
 801030a:	d304      	bcc.n	8010316 <__exponent+0x50>
 801030c:	1a10      	subs	r0, r2, r0
 801030e:	b003      	add	sp, #12
 8010310:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010312:	4613      	mov	r3, r2
 8010314:	e7e7      	b.n	80102e6 <__exponent+0x20>
 8010316:	f813 2b01 	ldrb.w	r2, [r3], #1
 801031a:	f804 2b01 	strb.w	r2, [r4], #1
 801031e:	e7f2      	b.n	8010306 <__exponent+0x40>
 8010320:	2330      	movs	r3, #48	; 0x30
 8010322:	4419      	add	r1, r3
 8010324:	7083      	strb	r3, [r0, #2]
 8010326:	1d02      	adds	r2, r0, #4
 8010328:	70c1      	strb	r1, [r0, #3]
 801032a:	e7ef      	b.n	801030c <__exponent+0x46>

0801032c <_printf_float>:
 801032c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010330:	b08d      	sub	sp, #52	; 0x34
 8010332:	460c      	mov	r4, r1
 8010334:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8010338:	4616      	mov	r6, r2
 801033a:	461f      	mov	r7, r3
 801033c:	4605      	mov	r5, r0
 801033e:	f002 fe07 	bl	8012f50 <_localeconv_r>
 8010342:	6803      	ldr	r3, [r0, #0]
 8010344:	9304      	str	r3, [sp, #16]
 8010346:	4618      	mov	r0, r3
 8010348:	f7ef ff42 	bl	80001d0 <strlen>
 801034c:	2300      	movs	r3, #0
 801034e:	930a      	str	r3, [sp, #40]	; 0x28
 8010350:	f8d8 3000 	ldr.w	r3, [r8]
 8010354:	9005      	str	r0, [sp, #20]
 8010356:	3307      	adds	r3, #7
 8010358:	f023 0307 	bic.w	r3, r3, #7
 801035c:	f103 0208 	add.w	r2, r3, #8
 8010360:	f894 a018 	ldrb.w	sl, [r4, #24]
 8010364:	f8d4 b000 	ldr.w	fp, [r4]
 8010368:	f8c8 2000 	str.w	r2, [r8]
 801036c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010370:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8010374:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8010378:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 801037c:	9307      	str	r3, [sp, #28]
 801037e:	f8cd 8018 	str.w	r8, [sp, #24]
 8010382:	f04f 32ff 	mov.w	r2, #4294967295
 8010386:	4ba7      	ldr	r3, [pc, #668]	; (8010624 <_printf_float+0x2f8>)
 8010388:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801038c:	f7f0 fbce 	bl	8000b2c <__aeabi_dcmpun>
 8010390:	bb70      	cbnz	r0, 80103f0 <_printf_float+0xc4>
 8010392:	f04f 32ff 	mov.w	r2, #4294967295
 8010396:	4ba3      	ldr	r3, [pc, #652]	; (8010624 <_printf_float+0x2f8>)
 8010398:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801039c:	f7f0 fba8 	bl	8000af0 <__aeabi_dcmple>
 80103a0:	bb30      	cbnz	r0, 80103f0 <_printf_float+0xc4>
 80103a2:	2200      	movs	r2, #0
 80103a4:	2300      	movs	r3, #0
 80103a6:	4640      	mov	r0, r8
 80103a8:	4649      	mov	r1, r9
 80103aa:	f7f0 fb97 	bl	8000adc <__aeabi_dcmplt>
 80103ae:	b110      	cbz	r0, 80103b6 <_printf_float+0x8a>
 80103b0:	232d      	movs	r3, #45	; 0x2d
 80103b2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80103b6:	4a9c      	ldr	r2, [pc, #624]	; (8010628 <_printf_float+0x2fc>)
 80103b8:	4b9c      	ldr	r3, [pc, #624]	; (801062c <_printf_float+0x300>)
 80103ba:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 80103be:	bf8c      	ite	hi
 80103c0:	4690      	movhi	r8, r2
 80103c2:	4698      	movls	r8, r3
 80103c4:	2303      	movs	r3, #3
 80103c6:	f02b 0204 	bic.w	r2, fp, #4
 80103ca:	6123      	str	r3, [r4, #16]
 80103cc:	6022      	str	r2, [r4, #0]
 80103ce:	f04f 0900 	mov.w	r9, #0
 80103d2:	9700      	str	r7, [sp, #0]
 80103d4:	4633      	mov	r3, r6
 80103d6:	aa0b      	add	r2, sp, #44	; 0x2c
 80103d8:	4621      	mov	r1, r4
 80103da:	4628      	mov	r0, r5
 80103dc:	f000 f9e6 	bl	80107ac <_printf_common>
 80103e0:	3001      	adds	r0, #1
 80103e2:	f040 808d 	bne.w	8010500 <_printf_float+0x1d4>
 80103e6:	f04f 30ff 	mov.w	r0, #4294967295
 80103ea:	b00d      	add	sp, #52	; 0x34
 80103ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80103f0:	4642      	mov	r2, r8
 80103f2:	464b      	mov	r3, r9
 80103f4:	4640      	mov	r0, r8
 80103f6:	4649      	mov	r1, r9
 80103f8:	f7f0 fb98 	bl	8000b2c <__aeabi_dcmpun>
 80103fc:	b110      	cbz	r0, 8010404 <_printf_float+0xd8>
 80103fe:	4a8c      	ldr	r2, [pc, #560]	; (8010630 <_printf_float+0x304>)
 8010400:	4b8c      	ldr	r3, [pc, #560]	; (8010634 <_printf_float+0x308>)
 8010402:	e7da      	b.n	80103ba <_printf_float+0x8e>
 8010404:	6861      	ldr	r1, [r4, #4]
 8010406:	1c4b      	adds	r3, r1, #1
 8010408:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 801040c:	a80a      	add	r0, sp, #40	; 0x28
 801040e:	d13e      	bne.n	801048e <_printf_float+0x162>
 8010410:	2306      	movs	r3, #6
 8010412:	6063      	str	r3, [r4, #4]
 8010414:	2300      	movs	r3, #0
 8010416:	e9cd 0302 	strd	r0, r3, [sp, #8]
 801041a:	ab09      	add	r3, sp, #36	; 0x24
 801041c:	9300      	str	r3, [sp, #0]
 801041e:	ec49 8b10 	vmov	d0, r8, r9
 8010422:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8010426:	6022      	str	r2, [r4, #0]
 8010428:	f8cd a004 	str.w	sl, [sp, #4]
 801042c:	6861      	ldr	r1, [r4, #4]
 801042e:	4628      	mov	r0, r5
 8010430:	f7ff fee8 	bl	8010204 <__cvt>
 8010434:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 8010438:	2b47      	cmp	r3, #71	; 0x47
 801043a:	4680      	mov	r8, r0
 801043c:	d109      	bne.n	8010452 <_printf_float+0x126>
 801043e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010440:	1cd8      	adds	r0, r3, #3
 8010442:	db02      	blt.n	801044a <_printf_float+0x11e>
 8010444:	6862      	ldr	r2, [r4, #4]
 8010446:	4293      	cmp	r3, r2
 8010448:	dd47      	ble.n	80104da <_printf_float+0x1ae>
 801044a:	f1aa 0a02 	sub.w	sl, sl, #2
 801044e:	fa5f fa8a 	uxtb.w	sl, sl
 8010452:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8010456:	9909      	ldr	r1, [sp, #36]	; 0x24
 8010458:	d824      	bhi.n	80104a4 <_printf_float+0x178>
 801045a:	3901      	subs	r1, #1
 801045c:	4652      	mov	r2, sl
 801045e:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8010462:	9109      	str	r1, [sp, #36]	; 0x24
 8010464:	f7ff ff2f 	bl	80102c6 <__exponent>
 8010468:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801046a:	1813      	adds	r3, r2, r0
 801046c:	2a01      	cmp	r2, #1
 801046e:	4681      	mov	r9, r0
 8010470:	6123      	str	r3, [r4, #16]
 8010472:	dc02      	bgt.n	801047a <_printf_float+0x14e>
 8010474:	6822      	ldr	r2, [r4, #0]
 8010476:	07d1      	lsls	r1, r2, #31
 8010478:	d501      	bpl.n	801047e <_printf_float+0x152>
 801047a:	3301      	adds	r3, #1
 801047c:	6123      	str	r3, [r4, #16]
 801047e:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8010482:	2b00      	cmp	r3, #0
 8010484:	d0a5      	beq.n	80103d2 <_printf_float+0xa6>
 8010486:	232d      	movs	r3, #45	; 0x2d
 8010488:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801048c:	e7a1      	b.n	80103d2 <_printf_float+0xa6>
 801048e:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 8010492:	f000 8177 	beq.w	8010784 <_printf_float+0x458>
 8010496:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 801049a:	d1bb      	bne.n	8010414 <_printf_float+0xe8>
 801049c:	2900      	cmp	r1, #0
 801049e:	d1b9      	bne.n	8010414 <_printf_float+0xe8>
 80104a0:	2301      	movs	r3, #1
 80104a2:	e7b6      	b.n	8010412 <_printf_float+0xe6>
 80104a4:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 80104a8:	d119      	bne.n	80104de <_printf_float+0x1b2>
 80104aa:	2900      	cmp	r1, #0
 80104ac:	6863      	ldr	r3, [r4, #4]
 80104ae:	dd0c      	ble.n	80104ca <_printf_float+0x19e>
 80104b0:	6121      	str	r1, [r4, #16]
 80104b2:	b913      	cbnz	r3, 80104ba <_printf_float+0x18e>
 80104b4:	6822      	ldr	r2, [r4, #0]
 80104b6:	07d2      	lsls	r2, r2, #31
 80104b8:	d502      	bpl.n	80104c0 <_printf_float+0x194>
 80104ba:	3301      	adds	r3, #1
 80104bc:	440b      	add	r3, r1
 80104be:	6123      	str	r3, [r4, #16]
 80104c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80104c2:	65a3      	str	r3, [r4, #88]	; 0x58
 80104c4:	f04f 0900 	mov.w	r9, #0
 80104c8:	e7d9      	b.n	801047e <_printf_float+0x152>
 80104ca:	b913      	cbnz	r3, 80104d2 <_printf_float+0x1a6>
 80104cc:	6822      	ldr	r2, [r4, #0]
 80104ce:	07d0      	lsls	r0, r2, #31
 80104d0:	d501      	bpl.n	80104d6 <_printf_float+0x1aa>
 80104d2:	3302      	adds	r3, #2
 80104d4:	e7f3      	b.n	80104be <_printf_float+0x192>
 80104d6:	2301      	movs	r3, #1
 80104d8:	e7f1      	b.n	80104be <_printf_float+0x192>
 80104da:	f04f 0a67 	mov.w	sl, #103	; 0x67
 80104de:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80104e2:	4293      	cmp	r3, r2
 80104e4:	db05      	blt.n	80104f2 <_printf_float+0x1c6>
 80104e6:	6822      	ldr	r2, [r4, #0]
 80104e8:	6123      	str	r3, [r4, #16]
 80104ea:	07d1      	lsls	r1, r2, #31
 80104ec:	d5e8      	bpl.n	80104c0 <_printf_float+0x194>
 80104ee:	3301      	adds	r3, #1
 80104f0:	e7e5      	b.n	80104be <_printf_float+0x192>
 80104f2:	2b00      	cmp	r3, #0
 80104f4:	bfd4      	ite	le
 80104f6:	f1c3 0302 	rsble	r3, r3, #2
 80104fa:	2301      	movgt	r3, #1
 80104fc:	4413      	add	r3, r2
 80104fe:	e7de      	b.n	80104be <_printf_float+0x192>
 8010500:	6823      	ldr	r3, [r4, #0]
 8010502:	055a      	lsls	r2, r3, #21
 8010504:	d407      	bmi.n	8010516 <_printf_float+0x1ea>
 8010506:	6923      	ldr	r3, [r4, #16]
 8010508:	4642      	mov	r2, r8
 801050a:	4631      	mov	r1, r6
 801050c:	4628      	mov	r0, r5
 801050e:	47b8      	blx	r7
 8010510:	3001      	adds	r0, #1
 8010512:	d12b      	bne.n	801056c <_printf_float+0x240>
 8010514:	e767      	b.n	80103e6 <_printf_float+0xba>
 8010516:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 801051a:	f240 80dc 	bls.w	80106d6 <_printf_float+0x3aa>
 801051e:	2200      	movs	r2, #0
 8010520:	2300      	movs	r3, #0
 8010522:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8010526:	f7f0 facf 	bl	8000ac8 <__aeabi_dcmpeq>
 801052a:	2800      	cmp	r0, #0
 801052c:	d033      	beq.n	8010596 <_printf_float+0x26a>
 801052e:	2301      	movs	r3, #1
 8010530:	4a41      	ldr	r2, [pc, #260]	; (8010638 <_printf_float+0x30c>)
 8010532:	4631      	mov	r1, r6
 8010534:	4628      	mov	r0, r5
 8010536:	47b8      	blx	r7
 8010538:	3001      	adds	r0, #1
 801053a:	f43f af54 	beq.w	80103e6 <_printf_float+0xba>
 801053e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8010542:	429a      	cmp	r2, r3
 8010544:	db02      	blt.n	801054c <_printf_float+0x220>
 8010546:	6823      	ldr	r3, [r4, #0]
 8010548:	07d8      	lsls	r0, r3, #31
 801054a:	d50f      	bpl.n	801056c <_printf_float+0x240>
 801054c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8010550:	4631      	mov	r1, r6
 8010552:	4628      	mov	r0, r5
 8010554:	47b8      	blx	r7
 8010556:	3001      	adds	r0, #1
 8010558:	f43f af45 	beq.w	80103e6 <_printf_float+0xba>
 801055c:	f04f 0800 	mov.w	r8, #0
 8010560:	f104 091a 	add.w	r9, r4, #26
 8010564:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010566:	3b01      	subs	r3, #1
 8010568:	4543      	cmp	r3, r8
 801056a:	dc09      	bgt.n	8010580 <_printf_float+0x254>
 801056c:	6823      	ldr	r3, [r4, #0]
 801056e:	079b      	lsls	r3, r3, #30
 8010570:	f100 8103 	bmi.w	801077a <_printf_float+0x44e>
 8010574:	68e0      	ldr	r0, [r4, #12]
 8010576:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010578:	4298      	cmp	r0, r3
 801057a:	bfb8      	it	lt
 801057c:	4618      	movlt	r0, r3
 801057e:	e734      	b.n	80103ea <_printf_float+0xbe>
 8010580:	2301      	movs	r3, #1
 8010582:	464a      	mov	r2, r9
 8010584:	4631      	mov	r1, r6
 8010586:	4628      	mov	r0, r5
 8010588:	47b8      	blx	r7
 801058a:	3001      	adds	r0, #1
 801058c:	f43f af2b 	beq.w	80103e6 <_printf_float+0xba>
 8010590:	f108 0801 	add.w	r8, r8, #1
 8010594:	e7e6      	b.n	8010564 <_printf_float+0x238>
 8010596:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010598:	2b00      	cmp	r3, #0
 801059a:	dc2b      	bgt.n	80105f4 <_printf_float+0x2c8>
 801059c:	2301      	movs	r3, #1
 801059e:	4a26      	ldr	r2, [pc, #152]	; (8010638 <_printf_float+0x30c>)
 80105a0:	4631      	mov	r1, r6
 80105a2:	4628      	mov	r0, r5
 80105a4:	47b8      	blx	r7
 80105a6:	3001      	adds	r0, #1
 80105a8:	f43f af1d 	beq.w	80103e6 <_printf_float+0xba>
 80105ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80105ae:	b923      	cbnz	r3, 80105ba <_printf_float+0x28e>
 80105b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80105b2:	b913      	cbnz	r3, 80105ba <_printf_float+0x28e>
 80105b4:	6823      	ldr	r3, [r4, #0]
 80105b6:	07d9      	lsls	r1, r3, #31
 80105b8:	d5d8      	bpl.n	801056c <_printf_float+0x240>
 80105ba:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80105be:	4631      	mov	r1, r6
 80105c0:	4628      	mov	r0, r5
 80105c2:	47b8      	blx	r7
 80105c4:	3001      	adds	r0, #1
 80105c6:	f43f af0e 	beq.w	80103e6 <_printf_float+0xba>
 80105ca:	f04f 0900 	mov.w	r9, #0
 80105ce:	f104 0a1a 	add.w	sl, r4, #26
 80105d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80105d4:	425b      	negs	r3, r3
 80105d6:	454b      	cmp	r3, r9
 80105d8:	dc01      	bgt.n	80105de <_printf_float+0x2b2>
 80105da:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80105dc:	e794      	b.n	8010508 <_printf_float+0x1dc>
 80105de:	2301      	movs	r3, #1
 80105e0:	4652      	mov	r2, sl
 80105e2:	4631      	mov	r1, r6
 80105e4:	4628      	mov	r0, r5
 80105e6:	47b8      	blx	r7
 80105e8:	3001      	adds	r0, #1
 80105ea:	f43f aefc 	beq.w	80103e6 <_printf_float+0xba>
 80105ee:	f109 0901 	add.w	r9, r9, #1
 80105f2:	e7ee      	b.n	80105d2 <_printf_float+0x2a6>
 80105f4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80105f6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80105f8:	429a      	cmp	r2, r3
 80105fa:	bfa8      	it	ge
 80105fc:	461a      	movge	r2, r3
 80105fe:	2a00      	cmp	r2, #0
 8010600:	4691      	mov	r9, r2
 8010602:	dd07      	ble.n	8010614 <_printf_float+0x2e8>
 8010604:	4613      	mov	r3, r2
 8010606:	4631      	mov	r1, r6
 8010608:	4642      	mov	r2, r8
 801060a:	4628      	mov	r0, r5
 801060c:	47b8      	blx	r7
 801060e:	3001      	adds	r0, #1
 8010610:	f43f aee9 	beq.w	80103e6 <_printf_float+0xba>
 8010614:	f104 031a 	add.w	r3, r4, #26
 8010618:	f04f 0b00 	mov.w	fp, #0
 801061c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8010620:	9306      	str	r3, [sp, #24]
 8010622:	e015      	b.n	8010650 <_printf_float+0x324>
 8010624:	7fefffff 	.word	0x7fefffff
 8010628:	08015cb9 	.word	0x08015cb9
 801062c:	080159fc 	.word	0x080159fc
 8010630:	08015a04 	.word	0x08015a04
 8010634:	08015a00 	.word	0x08015a00
 8010638:	08015a08 	.word	0x08015a08
 801063c:	2301      	movs	r3, #1
 801063e:	9a06      	ldr	r2, [sp, #24]
 8010640:	4631      	mov	r1, r6
 8010642:	4628      	mov	r0, r5
 8010644:	47b8      	blx	r7
 8010646:	3001      	adds	r0, #1
 8010648:	f43f aecd 	beq.w	80103e6 <_printf_float+0xba>
 801064c:	f10b 0b01 	add.w	fp, fp, #1
 8010650:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8010654:	ebaa 0309 	sub.w	r3, sl, r9
 8010658:	455b      	cmp	r3, fp
 801065a:	dcef      	bgt.n	801063c <_printf_float+0x310>
 801065c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8010660:	429a      	cmp	r2, r3
 8010662:	44d0      	add	r8, sl
 8010664:	db15      	blt.n	8010692 <_printf_float+0x366>
 8010666:	6823      	ldr	r3, [r4, #0]
 8010668:	07da      	lsls	r2, r3, #31
 801066a:	d412      	bmi.n	8010692 <_printf_float+0x366>
 801066c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801066e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8010670:	eba3 020a 	sub.w	r2, r3, sl
 8010674:	eba3 0a01 	sub.w	sl, r3, r1
 8010678:	4592      	cmp	sl, r2
 801067a:	bfa8      	it	ge
 801067c:	4692      	movge	sl, r2
 801067e:	f1ba 0f00 	cmp.w	sl, #0
 8010682:	dc0e      	bgt.n	80106a2 <_printf_float+0x376>
 8010684:	f04f 0800 	mov.w	r8, #0
 8010688:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801068c:	f104 091a 	add.w	r9, r4, #26
 8010690:	e019      	b.n	80106c6 <_printf_float+0x39a>
 8010692:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8010696:	4631      	mov	r1, r6
 8010698:	4628      	mov	r0, r5
 801069a:	47b8      	blx	r7
 801069c:	3001      	adds	r0, #1
 801069e:	d1e5      	bne.n	801066c <_printf_float+0x340>
 80106a0:	e6a1      	b.n	80103e6 <_printf_float+0xba>
 80106a2:	4653      	mov	r3, sl
 80106a4:	4642      	mov	r2, r8
 80106a6:	4631      	mov	r1, r6
 80106a8:	4628      	mov	r0, r5
 80106aa:	47b8      	blx	r7
 80106ac:	3001      	adds	r0, #1
 80106ae:	d1e9      	bne.n	8010684 <_printf_float+0x358>
 80106b0:	e699      	b.n	80103e6 <_printf_float+0xba>
 80106b2:	2301      	movs	r3, #1
 80106b4:	464a      	mov	r2, r9
 80106b6:	4631      	mov	r1, r6
 80106b8:	4628      	mov	r0, r5
 80106ba:	47b8      	blx	r7
 80106bc:	3001      	adds	r0, #1
 80106be:	f43f ae92 	beq.w	80103e6 <_printf_float+0xba>
 80106c2:	f108 0801 	add.w	r8, r8, #1
 80106c6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80106ca:	1a9b      	subs	r3, r3, r2
 80106cc:	eba3 030a 	sub.w	r3, r3, sl
 80106d0:	4543      	cmp	r3, r8
 80106d2:	dcee      	bgt.n	80106b2 <_printf_float+0x386>
 80106d4:	e74a      	b.n	801056c <_printf_float+0x240>
 80106d6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80106d8:	2a01      	cmp	r2, #1
 80106da:	dc01      	bgt.n	80106e0 <_printf_float+0x3b4>
 80106dc:	07db      	lsls	r3, r3, #31
 80106de:	d53a      	bpl.n	8010756 <_printf_float+0x42a>
 80106e0:	2301      	movs	r3, #1
 80106e2:	4642      	mov	r2, r8
 80106e4:	4631      	mov	r1, r6
 80106e6:	4628      	mov	r0, r5
 80106e8:	47b8      	blx	r7
 80106ea:	3001      	adds	r0, #1
 80106ec:	f43f ae7b 	beq.w	80103e6 <_printf_float+0xba>
 80106f0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80106f4:	4631      	mov	r1, r6
 80106f6:	4628      	mov	r0, r5
 80106f8:	47b8      	blx	r7
 80106fa:	3001      	adds	r0, #1
 80106fc:	f108 0801 	add.w	r8, r8, #1
 8010700:	f43f ae71 	beq.w	80103e6 <_printf_float+0xba>
 8010704:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010706:	2200      	movs	r2, #0
 8010708:	f103 3aff 	add.w	sl, r3, #4294967295
 801070c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8010710:	2300      	movs	r3, #0
 8010712:	f7f0 f9d9 	bl	8000ac8 <__aeabi_dcmpeq>
 8010716:	b9c8      	cbnz	r0, 801074c <_printf_float+0x420>
 8010718:	4653      	mov	r3, sl
 801071a:	4642      	mov	r2, r8
 801071c:	4631      	mov	r1, r6
 801071e:	4628      	mov	r0, r5
 8010720:	47b8      	blx	r7
 8010722:	3001      	adds	r0, #1
 8010724:	d10e      	bne.n	8010744 <_printf_float+0x418>
 8010726:	e65e      	b.n	80103e6 <_printf_float+0xba>
 8010728:	2301      	movs	r3, #1
 801072a:	4652      	mov	r2, sl
 801072c:	4631      	mov	r1, r6
 801072e:	4628      	mov	r0, r5
 8010730:	47b8      	blx	r7
 8010732:	3001      	adds	r0, #1
 8010734:	f43f ae57 	beq.w	80103e6 <_printf_float+0xba>
 8010738:	f108 0801 	add.w	r8, r8, #1
 801073c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801073e:	3b01      	subs	r3, #1
 8010740:	4543      	cmp	r3, r8
 8010742:	dcf1      	bgt.n	8010728 <_printf_float+0x3fc>
 8010744:	464b      	mov	r3, r9
 8010746:	f104 0250 	add.w	r2, r4, #80	; 0x50
 801074a:	e6de      	b.n	801050a <_printf_float+0x1de>
 801074c:	f04f 0800 	mov.w	r8, #0
 8010750:	f104 0a1a 	add.w	sl, r4, #26
 8010754:	e7f2      	b.n	801073c <_printf_float+0x410>
 8010756:	2301      	movs	r3, #1
 8010758:	e7df      	b.n	801071a <_printf_float+0x3ee>
 801075a:	2301      	movs	r3, #1
 801075c:	464a      	mov	r2, r9
 801075e:	4631      	mov	r1, r6
 8010760:	4628      	mov	r0, r5
 8010762:	47b8      	blx	r7
 8010764:	3001      	adds	r0, #1
 8010766:	f43f ae3e 	beq.w	80103e6 <_printf_float+0xba>
 801076a:	f108 0801 	add.w	r8, r8, #1
 801076e:	68e3      	ldr	r3, [r4, #12]
 8010770:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8010772:	1a9b      	subs	r3, r3, r2
 8010774:	4543      	cmp	r3, r8
 8010776:	dcf0      	bgt.n	801075a <_printf_float+0x42e>
 8010778:	e6fc      	b.n	8010574 <_printf_float+0x248>
 801077a:	f04f 0800 	mov.w	r8, #0
 801077e:	f104 0919 	add.w	r9, r4, #25
 8010782:	e7f4      	b.n	801076e <_printf_float+0x442>
 8010784:	2900      	cmp	r1, #0
 8010786:	f43f ae8b 	beq.w	80104a0 <_printf_float+0x174>
 801078a:	2300      	movs	r3, #0
 801078c:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8010790:	ab09      	add	r3, sp, #36	; 0x24
 8010792:	9300      	str	r3, [sp, #0]
 8010794:	ec49 8b10 	vmov	d0, r8, r9
 8010798:	6022      	str	r2, [r4, #0]
 801079a:	f8cd a004 	str.w	sl, [sp, #4]
 801079e:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80107a2:	4628      	mov	r0, r5
 80107a4:	f7ff fd2e 	bl	8010204 <__cvt>
 80107a8:	4680      	mov	r8, r0
 80107aa:	e648      	b.n	801043e <_printf_float+0x112>

080107ac <_printf_common>:
 80107ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80107b0:	4691      	mov	r9, r2
 80107b2:	461f      	mov	r7, r3
 80107b4:	688a      	ldr	r2, [r1, #8]
 80107b6:	690b      	ldr	r3, [r1, #16]
 80107b8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80107bc:	4293      	cmp	r3, r2
 80107be:	bfb8      	it	lt
 80107c0:	4613      	movlt	r3, r2
 80107c2:	f8c9 3000 	str.w	r3, [r9]
 80107c6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80107ca:	4606      	mov	r6, r0
 80107cc:	460c      	mov	r4, r1
 80107ce:	b112      	cbz	r2, 80107d6 <_printf_common+0x2a>
 80107d0:	3301      	adds	r3, #1
 80107d2:	f8c9 3000 	str.w	r3, [r9]
 80107d6:	6823      	ldr	r3, [r4, #0]
 80107d8:	0699      	lsls	r1, r3, #26
 80107da:	bf42      	ittt	mi
 80107dc:	f8d9 3000 	ldrmi.w	r3, [r9]
 80107e0:	3302      	addmi	r3, #2
 80107e2:	f8c9 3000 	strmi.w	r3, [r9]
 80107e6:	6825      	ldr	r5, [r4, #0]
 80107e8:	f015 0506 	ands.w	r5, r5, #6
 80107ec:	d107      	bne.n	80107fe <_printf_common+0x52>
 80107ee:	f104 0a19 	add.w	sl, r4, #25
 80107f2:	68e3      	ldr	r3, [r4, #12]
 80107f4:	f8d9 2000 	ldr.w	r2, [r9]
 80107f8:	1a9b      	subs	r3, r3, r2
 80107fa:	42ab      	cmp	r3, r5
 80107fc:	dc28      	bgt.n	8010850 <_printf_common+0xa4>
 80107fe:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8010802:	6822      	ldr	r2, [r4, #0]
 8010804:	3300      	adds	r3, #0
 8010806:	bf18      	it	ne
 8010808:	2301      	movne	r3, #1
 801080a:	0692      	lsls	r2, r2, #26
 801080c:	d42d      	bmi.n	801086a <_printf_common+0xbe>
 801080e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8010812:	4639      	mov	r1, r7
 8010814:	4630      	mov	r0, r6
 8010816:	47c0      	blx	r8
 8010818:	3001      	adds	r0, #1
 801081a:	d020      	beq.n	801085e <_printf_common+0xb2>
 801081c:	6823      	ldr	r3, [r4, #0]
 801081e:	68e5      	ldr	r5, [r4, #12]
 8010820:	f8d9 2000 	ldr.w	r2, [r9]
 8010824:	f003 0306 	and.w	r3, r3, #6
 8010828:	2b04      	cmp	r3, #4
 801082a:	bf08      	it	eq
 801082c:	1aad      	subeq	r5, r5, r2
 801082e:	68a3      	ldr	r3, [r4, #8]
 8010830:	6922      	ldr	r2, [r4, #16]
 8010832:	bf0c      	ite	eq
 8010834:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8010838:	2500      	movne	r5, #0
 801083a:	4293      	cmp	r3, r2
 801083c:	bfc4      	itt	gt
 801083e:	1a9b      	subgt	r3, r3, r2
 8010840:	18ed      	addgt	r5, r5, r3
 8010842:	f04f 0900 	mov.w	r9, #0
 8010846:	341a      	adds	r4, #26
 8010848:	454d      	cmp	r5, r9
 801084a:	d11a      	bne.n	8010882 <_printf_common+0xd6>
 801084c:	2000      	movs	r0, #0
 801084e:	e008      	b.n	8010862 <_printf_common+0xb6>
 8010850:	2301      	movs	r3, #1
 8010852:	4652      	mov	r2, sl
 8010854:	4639      	mov	r1, r7
 8010856:	4630      	mov	r0, r6
 8010858:	47c0      	blx	r8
 801085a:	3001      	adds	r0, #1
 801085c:	d103      	bne.n	8010866 <_printf_common+0xba>
 801085e:	f04f 30ff 	mov.w	r0, #4294967295
 8010862:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010866:	3501      	adds	r5, #1
 8010868:	e7c3      	b.n	80107f2 <_printf_common+0x46>
 801086a:	18e1      	adds	r1, r4, r3
 801086c:	1c5a      	adds	r2, r3, #1
 801086e:	2030      	movs	r0, #48	; 0x30
 8010870:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8010874:	4422      	add	r2, r4
 8010876:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801087a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801087e:	3302      	adds	r3, #2
 8010880:	e7c5      	b.n	801080e <_printf_common+0x62>
 8010882:	2301      	movs	r3, #1
 8010884:	4622      	mov	r2, r4
 8010886:	4639      	mov	r1, r7
 8010888:	4630      	mov	r0, r6
 801088a:	47c0      	blx	r8
 801088c:	3001      	adds	r0, #1
 801088e:	d0e6      	beq.n	801085e <_printf_common+0xb2>
 8010890:	f109 0901 	add.w	r9, r9, #1
 8010894:	e7d8      	b.n	8010848 <_printf_common+0x9c>
	...

08010898 <_printf_i>:
 8010898:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801089c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80108a0:	460c      	mov	r4, r1
 80108a2:	7e09      	ldrb	r1, [r1, #24]
 80108a4:	b085      	sub	sp, #20
 80108a6:	296e      	cmp	r1, #110	; 0x6e
 80108a8:	4617      	mov	r7, r2
 80108aa:	4606      	mov	r6, r0
 80108ac:	4698      	mov	r8, r3
 80108ae:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80108b0:	f000 80b3 	beq.w	8010a1a <_printf_i+0x182>
 80108b4:	d822      	bhi.n	80108fc <_printf_i+0x64>
 80108b6:	2963      	cmp	r1, #99	; 0x63
 80108b8:	d036      	beq.n	8010928 <_printf_i+0x90>
 80108ba:	d80a      	bhi.n	80108d2 <_printf_i+0x3a>
 80108bc:	2900      	cmp	r1, #0
 80108be:	f000 80b9 	beq.w	8010a34 <_printf_i+0x19c>
 80108c2:	2958      	cmp	r1, #88	; 0x58
 80108c4:	f000 8083 	beq.w	80109ce <_printf_i+0x136>
 80108c8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80108cc:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80108d0:	e032      	b.n	8010938 <_printf_i+0xa0>
 80108d2:	2964      	cmp	r1, #100	; 0x64
 80108d4:	d001      	beq.n	80108da <_printf_i+0x42>
 80108d6:	2969      	cmp	r1, #105	; 0x69
 80108d8:	d1f6      	bne.n	80108c8 <_printf_i+0x30>
 80108da:	6820      	ldr	r0, [r4, #0]
 80108dc:	6813      	ldr	r3, [r2, #0]
 80108de:	0605      	lsls	r5, r0, #24
 80108e0:	f103 0104 	add.w	r1, r3, #4
 80108e4:	d52a      	bpl.n	801093c <_printf_i+0xa4>
 80108e6:	681b      	ldr	r3, [r3, #0]
 80108e8:	6011      	str	r1, [r2, #0]
 80108ea:	2b00      	cmp	r3, #0
 80108ec:	da03      	bge.n	80108f6 <_printf_i+0x5e>
 80108ee:	222d      	movs	r2, #45	; 0x2d
 80108f0:	425b      	negs	r3, r3
 80108f2:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80108f6:	486f      	ldr	r0, [pc, #444]	; (8010ab4 <_printf_i+0x21c>)
 80108f8:	220a      	movs	r2, #10
 80108fa:	e039      	b.n	8010970 <_printf_i+0xd8>
 80108fc:	2973      	cmp	r1, #115	; 0x73
 80108fe:	f000 809d 	beq.w	8010a3c <_printf_i+0x1a4>
 8010902:	d808      	bhi.n	8010916 <_printf_i+0x7e>
 8010904:	296f      	cmp	r1, #111	; 0x6f
 8010906:	d020      	beq.n	801094a <_printf_i+0xb2>
 8010908:	2970      	cmp	r1, #112	; 0x70
 801090a:	d1dd      	bne.n	80108c8 <_printf_i+0x30>
 801090c:	6823      	ldr	r3, [r4, #0]
 801090e:	f043 0320 	orr.w	r3, r3, #32
 8010912:	6023      	str	r3, [r4, #0]
 8010914:	e003      	b.n	801091e <_printf_i+0x86>
 8010916:	2975      	cmp	r1, #117	; 0x75
 8010918:	d017      	beq.n	801094a <_printf_i+0xb2>
 801091a:	2978      	cmp	r1, #120	; 0x78
 801091c:	d1d4      	bne.n	80108c8 <_printf_i+0x30>
 801091e:	2378      	movs	r3, #120	; 0x78
 8010920:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8010924:	4864      	ldr	r0, [pc, #400]	; (8010ab8 <_printf_i+0x220>)
 8010926:	e055      	b.n	80109d4 <_printf_i+0x13c>
 8010928:	6813      	ldr	r3, [r2, #0]
 801092a:	1d19      	adds	r1, r3, #4
 801092c:	681b      	ldr	r3, [r3, #0]
 801092e:	6011      	str	r1, [r2, #0]
 8010930:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8010934:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8010938:	2301      	movs	r3, #1
 801093a:	e08c      	b.n	8010a56 <_printf_i+0x1be>
 801093c:	681b      	ldr	r3, [r3, #0]
 801093e:	6011      	str	r1, [r2, #0]
 8010940:	f010 0f40 	tst.w	r0, #64	; 0x40
 8010944:	bf18      	it	ne
 8010946:	b21b      	sxthne	r3, r3
 8010948:	e7cf      	b.n	80108ea <_printf_i+0x52>
 801094a:	6813      	ldr	r3, [r2, #0]
 801094c:	6825      	ldr	r5, [r4, #0]
 801094e:	1d18      	adds	r0, r3, #4
 8010950:	6010      	str	r0, [r2, #0]
 8010952:	0628      	lsls	r0, r5, #24
 8010954:	d501      	bpl.n	801095a <_printf_i+0xc2>
 8010956:	681b      	ldr	r3, [r3, #0]
 8010958:	e002      	b.n	8010960 <_printf_i+0xc8>
 801095a:	0668      	lsls	r0, r5, #25
 801095c:	d5fb      	bpl.n	8010956 <_printf_i+0xbe>
 801095e:	881b      	ldrh	r3, [r3, #0]
 8010960:	4854      	ldr	r0, [pc, #336]	; (8010ab4 <_printf_i+0x21c>)
 8010962:	296f      	cmp	r1, #111	; 0x6f
 8010964:	bf14      	ite	ne
 8010966:	220a      	movne	r2, #10
 8010968:	2208      	moveq	r2, #8
 801096a:	2100      	movs	r1, #0
 801096c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8010970:	6865      	ldr	r5, [r4, #4]
 8010972:	60a5      	str	r5, [r4, #8]
 8010974:	2d00      	cmp	r5, #0
 8010976:	f2c0 8095 	blt.w	8010aa4 <_printf_i+0x20c>
 801097a:	6821      	ldr	r1, [r4, #0]
 801097c:	f021 0104 	bic.w	r1, r1, #4
 8010980:	6021      	str	r1, [r4, #0]
 8010982:	2b00      	cmp	r3, #0
 8010984:	d13d      	bne.n	8010a02 <_printf_i+0x16a>
 8010986:	2d00      	cmp	r5, #0
 8010988:	f040 808e 	bne.w	8010aa8 <_printf_i+0x210>
 801098c:	4665      	mov	r5, ip
 801098e:	2a08      	cmp	r2, #8
 8010990:	d10b      	bne.n	80109aa <_printf_i+0x112>
 8010992:	6823      	ldr	r3, [r4, #0]
 8010994:	07db      	lsls	r3, r3, #31
 8010996:	d508      	bpl.n	80109aa <_printf_i+0x112>
 8010998:	6923      	ldr	r3, [r4, #16]
 801099a:	6862      	ldr	r2, [r4, #4]
 801099c:	429a      	cmp	r2, r3
 801099e:	bfde      	ittt	le
 80109a0:	2330      	movle	r3, #48	; 0x30
 80109a2:	f805 3c01 	strble.w	r3, [r5, #-1]
 80109a6:	f105 35ff 	addle.w	r5, r5, #4294967295
 80109aa:	ebac 0305 	sub.w	r3, ip, r5
 80109ae:	6123      	str	r3, [r4, #16]
 80109b0:	f8cd 8000 	str.w	r8, [sp]
 80109b4:	463b      	mov	r3, r7
 80109b6:	aa03      	add	r2, sp, #12
 80109b8:	4621      	mov	r1, r4
 80109ba:	4630      	mov	r0, r6
 80109bc:	f7ff fef6 	bl	80107ac <_printf_common>
 80109c0:	3001      	adds	r0, #1
 80109c2:	d14d      	bne.n	8010a60 <_printf_i+0x1c8>
 80109c4:	f04f 30ff 	mov.w	r0, #4294967295
 80109c8:	b005      	add	sp, #20
 80109ca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80109ce:	4839      	ldr	r0, [pc, #228]	; (8010ab4 <_printf_i+0x21c>)
 80109d0:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80109d4:	6813      	ldr	r3, [r2, #0]
 80109d6:	6821      	ldr	r1, [r4, #0]
 80109d8:	1d1d      	adds	r5, r3, #4
 80109da:	681b      	ldr	r3, [r3, #0]
 80109dc:	6015      	str	r5, [r2, #0]
 80109de:	060a      	lsls	r2, r1, #24
 80109e0:	d50b      	bpl.n	80109fa <_printf_i+0x162>
 80109e2:	07ca      	lsls	r2, r1, #31
 80109e4:	bf44      	itt	mi
 80109e6:	f041 0120 	orrmi.w	r1, r1, #32
 80109ea:	6021      	strmi	r1, [r4, #0]
 80109ec:	b91b      	cbnz	r3, 80109f6 <_printf_i+0x15e>
 80109ee:	6822      	ldr	r2, [r4, #0]
 80109f0:	f022 0220 	bic.w	r2, r2, #32
 80109f4:	6022      	str	r2, [r4, #0]
 80109f6:	2210      	movs	r2, #16
 80109f8:	e7b7      	b.n	801096a <_printf_i+0xd2>
 80109fa:	064d      	lsls	r5, r1, #25
 80109fc:	bf48      	it	mi
 80109fe:	b29b      	uxthmi	r3, r3
 8010a00:	e7ef      	b.n	80109e2 <_printf_i+0x14a>
 8010a02:	4665      	mov	r5, ip
 8010a04:	fbb3 f1f2 	udiv	r1, r3, r2
 8010a08:	fb02 3311 	mls	r3, r2, r1, r3
 8010a0c:	5cc3      	ldrb	r3, [r0, r3]
 8010a0e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8010a12:	460b      	mov	r3, r1
 8010a14:	2900      	cmp	r1, #0
 8010a16:	d1f5      	bne.n	8010a04 <_printf_i+0x16c>
 8010a18:	e7b9      	b.n	801098e <_printf_i+0xf6>
 8010a1a:	6813      	ldr	r3, [r2, #0]
 8010a1c:	6825      	ldr	r5, [r4, #0]
 8010a1e:	6961      	ldr	r1, [r4, #20]
 8010a20:	1d18      	adds	r0, r3, #4
 8010a22:	6010      	str	r0, [r2, #0]
 8010a24:	0628      	lsls	r0, r5, #24
 8010a26:	681b      	ldr	r3, [r3, #0]
 8010a28:	d501      	bpl.n	8010a2e <_printf_i+0x196>
 8010a2a:	6019      	str	r1, [r3, #0]
 8010a2c:	e002      	b.n	8010a34 <_printf_i+0x19c>
 8010a2e:	066a      	lsls	r2, r5, #25
 8010a30:	d5fb      	bpl.n	8010a2a <_printf_i+0x192>
 8010a32:	8019      	strh	r1, [r3, #0]
 8010a34:	2300      	movs	r3, #0
 8010a36:	6123      	str	r3, [r4, #16]
 8010a38:	4665      	mov	r5, ip
 8010a3a:	e7b9      	b.n	80109b0 <_printf_i+0x118>
 8010a3c:	6813      	ldr	r3, [r2, #0]
 8010a3e:	1d19      	adds	r1, r3, #4
 8010a40:	6011      	str	r1, [r2, #0]
 8010a42:	681d      	ldr	r5, [r3, #0]
 8010a44:	6862      	ldr	r2, [r4, #4]
 8010a46:	2100      	movs	r1, #0
 8010a48:	4628      	mov	r0, r5
 8010a4a:	f7ef fbc9 	bl	80001e0 <memchr>
 8010a4e:	b108      	cbz	r0, 8010a54 <_printf_i+0x1bc>
 8010a50:	1b40      	subs	r0, r0, r5
 8010a52:	6060      	str	r0, [r4, #4]
 8010a54:	6863      	ldr	r3, [r4, #4]
 8010a56:	6123      	str	r3, [r4, #16]
 8010a58:	2300      	movs	r3, #0
 8010a5a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010a5e:	e7a7      	b.n	80109b0 <_printf_i+0x118>
 8010a60:	6923      	ldr	r3, [r4, #16]
 8010a62:	462a      	mov	r2, r5
 8010a64:	4639      	mov	r1, r7
 8010a66:	4630      	mov	r0, r6
 8010a68:	47c0      	blx	r8
 8010a6a:	3001      	adds	r0, #1
 8010a6c:	d0aa      	beq.n	80109c4 <_printf_i+0x12c>
 8010a6e:	6823      	ldr	r3, [r4, #0]
 8010a70:	079b      	lsls	r3, r3, #30
 8010a72:	d413      	bmi.n	8010a9c <_printf_i+0x204>
 8010a74:	68e0      	ldr	r0, [r4, #12]
 8010a76:	9b03      	ldr	r3, [sp, #12]
 8010a78:	4298      	cmp	r0, r3
 8010a7a:	bfb8      	it	lt
 8010a7c:	4618      	movlt	r0, r3
 8010a7e:	e7a3      	b.n	80109c8 <_printf_i+0x130>
 8010a80:	2301      	movs	r3, #1
 8010a82:	464a      	mov	r2, r9
 8010a84:	4639      	mov	r1, r7
 8010a86:	4630      	mov	r0, r6
 8010a88:	47c0      	blx	r8
 8010a8a:	3001      	adds	r0, #1
 8010a8c:	d09a      	beq.n	80109c4 <_printf_i+0x12c>
 8010a8e:	3501      	adds	r5, #1
 8010a90:	68e3      	ldr	r3, [r4, #12]
 8010a92:	9a03      	ldr	r2, [sp, #12]
 8010a94:	1a9b      	subs	r3, r3, r2
 8010a96:	42ab      	cmp	r3, r5
 8010a98:	dcf2      	bgt.n	8010a80 <_printf_i+0x1e8>
 8010a9a:	e7eb      	b.n	8010a74 <_printf_i+0x1dc>
 8010a9c:	2500      	movs	r5, #0
 8010a9e:	f104 0919 	add.w	r9, r4, #25
 8010aa2:	e7f5      	b.n	8010a90 <_printf_i+0x1f8>
 8010aa4:	2b00      	cmp	r3, #0
 8010aa6:	d1ac      	bne.n	8010a02 <_printf_i+0x16a>
 8010aa8:	7803      	ldrb	r3, [r0, #0]
 8010aaa:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8010aae:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8010ab2:	e76c      	b.n	801098e <_printf_i+0xf6>
 8010ab4:	08015a0a 	.word	0x08015a0a
 8010ab8:	08015a1b 	.word	0x08015a1b

08010abc <_scanf_float>:
 8010abc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010ac0:	469a      	mov	sl, r3
 8010ac2:	688b      	ldr	r3, [r1, #8]
 8010ac4:	4616      	mov	r6, r2
 8010ac6:	1e5a      	subs	r2, r3, #1
 8010ac8:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8010acc:	b087      	sub	sp, #28
 8010ace:	bf83      	ittte	hi
 8010ad0:	f46f 72ae 	mvnhi.w	r2, #348	; 0x15c
 8010ad4:	189b      	addhi	r3, r3, r2
 8010ad6:	9301      	strhi	r3, [sp, #4]
 8010ad8:	2300      	movls	r3, #0
 8010ada:	bf86      	itte	hi
 8010adc:	f240 135d 	movwhi	r3, #349	; 0x15d
 8010ae0:	608b      	strhi	r3, [r1, #8]
 8010ae2:	9301      	strls	r3, [sp, #4]
 8010ae4:	680b      	ldr	r3, [r1, #0]
 8010ae6:	4688      	mov	r8, r1
 8010ae8:	f04f 0b00 	mov.w	fp, #0
 8010aec:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8010af0:	f848 3b1c 	str.w	r3, [r8], #28
 8010af4:	e9cd bb03 	strd	fp, fp, [sp, #12]
 8010af8:	4607      	mov	r7, r0
 8010afa:	460c      	mov	r4, r1
 8010afc:	4645      	mov	r5, r8
 8010afe:	465a      	mov	r2, fp
 8010b00:	46d9      	mov	r9, fp
 8010b02:	f8cd b008 	str.w	fp, [sp, #8]
 8010b06:	68a1      	ldr	r1, [r4, #8]
 8010b08:	b181      	cbz	r1, 8010b2c <_scanf_float+0x70>
 8010b0a:	6833      	ldr	r3, [r6, #0]
 8010b0c:	781b      	ldrb	r3, [r3, #0]
 8010b0e:	2b49      	cmp	r3, #73	; 0x49
 8010b10:	d071      	beq.n	8010bf6 <_scanf_float+0x13a>
 8010b12:	d84d      	bhi.n	8010bb0 <_scanf_float+0xf4>
 8010b14:	2b39      	cmp	r3, #57	; 0x39
 8010b16:	d840      	bhi.n	8010b9a <_scanf_float+0xde>
 8010b18:	2b31      	cmp	r3, #49	; 0x31
 8010b1a:	f080 8088 	bcs.w	8010c2e <_scanf_float+0x172>
 8010b1e:	2b2d      	cmp	r3, #45	; 0x2d
 8010b20:	f000 8090 	beq.w	8010c44 <_scanf_float+0x188>
 8010b24:	d815      	bhi.n	8010b52 <_scanf_float+0x96>
 8010b26:	2b2b      	cmp	r3, #43	; 0x2b
 8010b28:	f000 808c 	beq.w	8010c44 <_scanf_float+0x188>
 8010b2c:	f1b9 0f00 	cmp.w	r9, #0
 8010b30:	d003      	beq.n	8010b3a <_scanf_float+0x7e>
 8010b32:	6823      	ldr	r3, [r4, #0]
 8010b34:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8010b38:	6023      	str	r3, [r4, #0]
 8010b3a:	3a01      	subs	r2, #1
 8010b3c:	2a01      	cmp	r2, #1
 8010b3e:	f200 80ea 	bhi.w	8010d16 <_scanf_float+0x25a>
 8010b42:	4545      	cmp	r5, r8
 8010b44:	f200 80dc 	bhi.w	8010d00 <_scanf_float+0x244>
 8010b48:	2601      	movs	r6, #1
 8010b4a:	4630      	mov	r0, r6
 8010b4c:	b007      	add	sp, #28
 8010b4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010b52:	2b2e      	cmp	r3, #46	; 0x2e
 8010b54:	f000 809f 	beq.w	8010c96 <_scanf_float+0x1da>
 8010b58:	2b30      	cmp	r3, #48	; 0x30
 8010b5a:	d1e7      	bne.n	8010b2c <_scanf_float+0x70>
 8010b5c:	6820      	ldr	r0, [r4, #0]
 8010b5e:	f410 7f80 	tst.w	r0, #256	; 0x100
 8010b62:	d064      	beq.n	8010c2e <_scanf_float+0x172>
 8010b64:	9b01      	ldr	r3, [sp, #4]
 8010b66:	f020 0080 	bic.w	r0, r0, #128	; 0x80
 8010b6a:	6020      	str	r0, [r4, #0]
 8010b6c:	f109 0901 	add.w	r9, r9, #1
 8010b70:	b11b      	cbz	r3, 8010b7a <_scanf_float+0xbe>
 8010b72:	3b01      	subs	r3, #1
 8010b74:	3101      	adds	r1, #1
 8010b76:	9301      	str	r3, [sp, #4]
 8010b78:	60a1      	str	r1, [r4, #8]
 8010b7a:	68a3      	ldr	r3, [r4, #8]
 8010b7c:	3b01      	subs	r3, #1
 8010b7e:	60a3      	str	r3, [r4, #8]
 8010b80:	6923      	ldr	r3, [r4, #16]
 8010b82:	3301      	adds	r3, #1
 8010b84:	6123      	str	r3, [r4, #16]
 8010b86:	6873      	ldr	r3, [r6, #4]
 8010b88:	3b01      	subs	r3, #1
 8010b8a:	2b00      	cmp	r3, #0
 8010b8c:	6073      	str	r3, [r6, #4]
 8010b8e:	f340 80ac 	ble.w	8010cea <_scanf_float+0x22e>
 8010b92:	6833      	ldr	r3, [r6, #0]
 8010b94:	3301      	adds	r3, #1
 8010b96:	6033      	str	r3, [r6, #0]
 8010b98:	e7b5      	b.n	8010b06 <_scanf_float+0x4a>
 8010b9a:	2b45      	cmp	r3, #69	; 0x45
 8010b9c:	f000 8085 	beq.w	8010caa <_scanf_float+0x1ee>
 8010ba0:	2b46      	cmp	r3, #70	; 0x46
 8010ba2:	d06a      	beq.n	8010c7a <_scanf_float+0x1be>
 8010ba4:	2b41      	cmp	r3, #65	; 0x41
 8010ba6:	d1c1      	bne.n	8010b2c <_scanf_float+0x70>
 8010ba8:	2a01      	cmp	r2, #1
 8010baa:	d1bf      	bne.n	8010b2c <_scanf_float+0x70>
 8010bac:	2202      	movs	r2, #2
 8010bae:	e046      	b.n	8010c3e <_scanf_float+0x182>
 8010bb0:	2b65      	cmp	r3, #101	; 0x65
 8010bb2:	d07a      	beq.n	8010caa <_scanf_float+0x1ee>
 8010bb4:	d818      	bhi.n	8010be8 <_scanf_float+0x12c>
 8010bb6:	2b54      	cmp	r3, #84	; 0x54
 8010bb8:	d066      	beq.n	8010c88 <_scanf_float+0x1cc>
 8010bba:	d811      	bhi.n	8010be0 <_scanf_float+0x124>
 8010bbc:	2b4e      	cmp	r3, #78	; 0x4e
 8010bbe:	d1b5      	bne.n	8010b2c <_scanf_float+0x70>
 8010bc0:	2a00      	cmp	r2, #0
 8010bc2:	d146      	bne.n	8010c52 <_scanf_float+0x196>
 8010bc4:	f1b9 0f00 	cmp.w	r9, #0
 8010bc8:	d145      	bne.n	8010c56 <_scanf_float+0x19a>
 8010bca:	6821      	ldr	r1, [r4, #0]
 8010bcc:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 8010bd0:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8010bd4:	d13f      	bne.n	8010c56 <_scanf_float+0x19a>
 8010bd6:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8010bda:	6021      	str	r1, [r4, #0]
 8010bdc:	2201      	movs	r2, #1
 8010bde:	e02e      	b.n	8010c3e <_scanf_float+0x182>
 8010be0:	2b59      	cmp	r3, #89	; 0x59
 8010be2:	d01e      	beq.n	8010c22 <_scanf_float+0x166>
 8010be4:	2b61      	cmp	r3, #97	; 0x61
 8010be6:	e7de      	b.n	8010ba6 <_scanf_float+0xea>
 8010be8:	2b6e      	cmp	r3, #110	; 0x6e
 8010bea:	d0e9      	beq.n	8010bc0 <_scanf_float+0x104>
 8010bec:	d815      	bhi.n	8010c1a <_scanf_float+0x15e>
 8010bee:	2b66      	cmp	r3, #102	; 0x66
 8010bf0:	d043      	beq.n	8010c7a <_scanf_float+0x1be>
 8010bf2:	2b69      	cmp	r3, #105	; 0x69
 8010bf4:	d19a      	bne.n	8010b2c <_scanf_float+0x70>
 8010bf6:	f1bb 0f00 	cmp.w	fp, #0
 8010bfa:	d138      	bne.n	8010c6e <_scanf_float+0x1b2>
 8010bfc:	f1b9 0f00 	cmp.w	r9, #0
 8010c00:	d197      	bne.n	8010b32 <_scanf_float+0x76>
 8010c02:	6821      	ldr	r1, [r4, #0]
 8010c04:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 8010c08:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8010c0c:	d195      	bne.n	8010b3a <_scanf_float+0x7e>
 8010c0e:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8010c12:	6021      	str	r1, [r4, #0]
 8010c14:	f04f 0b01 	mov.w	fp, #1
 8010c18:	e011      	b.n	8010c3e <_scanf_float+0x182>
 8010c1a:	2b74      	cmp	r3, #116	; 0x74
 8010c1c:	d034      	beq.n	8010c88 <_scanf_float+0x1cc>
 8010c1e:	2b79      	cmp	r3, #121	; 0x79
 8010c20:	d184      	bne.n	8010b2c <_scanf_float+0x70>
 8010c22:	f1bb 0f07 	cmp.w	fp, #7
 8010c26:	d181      	bne.n	8010b2c <_scanf_float+0x70>
 8010c28:	f04f 0b08 	mov.w	fp, #8
 8010c2c:	e007      	b.n	8010c3e <_scanf_float+0x182>
 8010c2e:	eb12 0f0b 	cmn.w	r2, fp
 8010c32:	f47f af7b 	bne.w	8010b2c <_scanf_float+0x70>
 8010c36:	6821      	ldr	r1, [r4, #0]
 8010c38:	f421 71c0 	bic.w	r1, r1, #384	; 0x180
 8010c3c:	6021      	str	r1, [r4, #0]
 8010c3e:	702b      	strb	r3, [r5, #0]
 8010c40:	3501      	adds	r5, #1
 8010c42:	e79a      	b.n	8010b7a <_scanf_float+0xbe>
 8010c44:	6821      	ldr	r1, [r4, #0]
 8010c46:	0608      	lsls	r0, r1, #24
 8010c48:	f57f af70 	bpl.w	8010b2c <_scanf_float+0x70>
 8010c4c:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8010c50:	e7f4      	b.n	8010c3c <_scanf_float+0x180>
 8010c52:	2a02      	cmp	r2, #2
 8010c54:	d047      	beq.n	8010ce6 <_scanf_float+0x22a>
 8010c56:	f1bb 0f01 	cmp.w	fp, #1
 8010c5a:	d003      	beq.n	8010c64 <_scanf_float+0x1a8>
 8010c5c:	f1bb 0f04 	cmp.w	fp, #4
 8010c60:	f47f af64 	bne.w	8010b2c <_scanf_float+0x70>
 8010c64:	f10b 0b01 	add.w	fp, fp, #1
 8010c68:	fa5f fb8b 	uxtb.w	fp, fp
 8010c6c:	e7e7      	b.n	8010c3e <_scanf_float+0x182>
 8010c6e:	f1bb 0f03 	cmp.w	fp, #3
 8010c72:	d0f7      	beq.n	8010c64 <_scanf_float+0x1a8>
 8010c74:	f1bb 0f05 	cmp.w	fp, #5
 8010c78:	e7f2      	b.n	8010c60 <_scanf_float+0x1a4>
 8010c7a:	f1bb 0f02 	cmp.w	fp, #2
 8010c7e:	f47f af55 	bne.w	8010b2c <_scanf_float+0x70>
 8010c82:	f04f 0b03 	mov.w	fp, #3
 8010c86:	e7da      	b.n	8010c3e <_scanf_float+0x182>
 8010c88:	f1bb 0f06 	cmp.w	fp, #6
 8010c8c:	f47f af4e 	bne.w	8010b2c <_scanf_float+0x70>
 8010c90:	f04f 0b07 	mov.w	fp, #7
 8010c94:	e7d3      	b.n	8010c3e <_scanf_float+0x182>
 8010c96:	6821      	ldr	r1, [r4, #0]
 8010c98:	0588      	lsls	r0, r1, #22
 8010c9a:	f57f af47 	bpl.w	8010b2c <_scanf_float+0x70>
 8010c9e:	f421 7120 	bic.w	r1, r1, #640	; 0x280
 8010ca2:	6021      	str	r1, [r4, #0]
 8010ca4:	f8cd 9008 	str.w	r9, [sp, #8]
 8010ca8:	e7c9      	b.n	8010c3e <_scanf_float+0x182>
 8010caa:	6821      	ldr	r1, [r4, #0]
 8010cac:	f401 60a0 	and.w	r0, r1, #1280	; 0x500
 8010cb0:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 8010cb4:	d006      	beq.n	8010cc4 <_scanf_float+0x208>
 8010cb6:	0548      	lsls	r0, r1, #21
 8010cb8:	f57f af38 	bpl.w	8010b2c <_scanf_float+0x70>
 8010cbc:	f1b9 0f00 	cmp.w	r9, #0
 8010cc0:	f43f af3b 	beq.w	8010b3a <_scanf_float+0x7e>
 8010cc4:	0588      	lsls	r0, r1, #22
 8010cc6:	bf58      	it	pl
 8010cc8:	9802      	ldrpl	r0, [sp, #8]
 8010cca:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8010cce:	bf58      	it	pl
 8010cd0:	eba9 0000 	subpl.w	r0, r9, r0
 8010cd4:	f441 71c0 	orr.w	r1, r1, #384	; 0x180
 8010cd8:	bf58      	it	pl
 8010cda:	e9cd 0503 	strdpl	r0, r5, [sp, #12]
 8010cde:	6021      	str	r1, [r4, #0]
 8010ce0:	f04f 0900 	mov.w	r9, #0
 8010ce4:	e7ab      	b.n	8010c3e <_scanf_float+0x182>
 8010ce6:	2203      	movs	r2, #3
 8010ce8:	e7a9      	b.n	8010c3e <_scanf_float+0x182>
 8010cea:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8010cee:	9205      	str	r2, [sp, #20]
 8010cf0:	4631      	mov	r1, r6
 8010cf2:	4638      	mov	r0, r7
 8010cf4:	4798      	blx	r3
 8010cf6:	9a05      	ldr	r2, [sp, #20]
 8010cf8:	2800      	cmp	r0, #0
 8010cfa:	f43f af04 	beq.w	8010b06 <_scanf_float+0x4a>
 8010cfe:	e715      	b.n	8010b2c <_scanf_float+0x70>
 8010d00:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8010d04:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8010d08:	4632      	mov	r2, r6
 8010d0a:	4638      	mov	r0, r7
 8010d0c:	4798      	blx	r3
 8010d0e:	6923      	ldr	r3, [r4, #16]
 8010d10:	3b01      	subs	r3, #1
 8010d12:	6123      	str	r3, [r4, #16]
 8010d14:	e715      	b.n	8010b42 <_scanf_float+0x86>
 8010d16:	f10b 33ff 	add.w	r3, fp, #4294967295
 8010d1a:	2b06      	cmp	r3, #6
 8010d1c:	d80a      	bhi.n	8010d34 <_scanf_float+0x278>
 8010d1e:	f1bb 0f02 	cmp.w	fp, #2
 8010d22:	d968      	bls.n	8010df6 <_scanf_float+0x33a>
 8010d24:	f1ab 0b03 	sub.w	fp, fp, #3
 8010d28:	fa5f fb8b 	uxtb.w	fp, fp
 8010d2c:	eba5 0b0b 	sub.w	fp, r5, fp
 8010d30:	455d      	cmp	r5, fp
 8010d32:	d14b      	bne.n	8010dcc <_scanf_float+0x310>
 8010d34:	6823      	ldr	r3, [r4, #0]
 8010d36:	05da      	lsls	r2, r3, #23
 8010d38:	d51f      	bpl.n	8010d7a <_scanf_float+0x2be>
 8010d3a:	055b      	lsls	r3, r3, #21
 8010d3c:	d468      	bmi.n	8010e10 <_scanf_float+0x354>
 8010d3e:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8010d42:	6923      	ldr	r3, [r4, #16]
 8010d44:	2965      	cmp	r1, #101	; 0x65
 8010d46:	f103 33ff 	add.w	r3, r3, #4294967295
 8010d4a:	f105 3bff 	add.w	fp, r5, #4294967295
 8010d4e:	6123      	str	r3, [r4, #16]
 8010d50:	d00d      	beq.n	8010d6e <_scanf_float+0x2b2>
 8010d52:	2945      	cmp	r1, #69	; 0x45
 8010d54:	d00b      	beq.n	8010d6e <_scanf_float+0x2b2>
 8010d56:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8010d5a:	4632      	mov	r2, r6
 8010d5c:	4638      	mov	r0, r7
 8010d5e:	4798      	blx	r3
 8010d60:	6923      	ldr	r3, [r4, #16]
 8010d62:	f815 1c02 	ldrb.w	r1, [r5, #-2]
 8010d66:	3b01      	subs	r3, #1
 8010d68:	f1a5 0b02 	sub.w	fp, r5, #2
 8010d6c:	6123      	str	r3, [r4, #16]
 8010d6e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8010d72:	4632      	mov	r2, r6
 8010d74:	4638      	mov	r0, r7
 8010d76:	4798      	blx	r3
 8010d78:	465d      	mov	r5, fp
 8010d7a:	6826      	ldr	r6, [r4, #0]
 8010d7c:	f016 0610 	ands.w	r6, r6, #16
 8010d80:	d17a      	bne.n	8010e78 <_scanf_float+0x3bc>
 8010d82:	702e      	strb	r6, [r5, #0]
 8010d84:	6823      	ldr	r3, [r4, #0]
 8010d86:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8010d8a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8010d8e:	d142      	bne.n	8010e16 <_scanf_float+0x35a>
 8010d90:	9b02      	ldr	r3, [sp, #8]
 8010d92:	eba9 0303 	sub.w	r3, r9, r3
 8010d96:	425a      	negs	r2, r3
 8010d98:	2b00      	cmp	r3, #0
 8010d9a:	d149      	bne.n	8010e30 <_scanf_float+0x374>
 8010d9c:	2200      	movs	r2, #0
 8010d9e:	4641      	mov	r1, r8
 8010da0:	4638      	mov	r0, r7
 8010da2:	f000 fec5 	bl	8011b30 <_strtod_r>
 8010da6:	6825      	ldr	r5, [r4, #0]
 8010da8:	f8da 3000 	ldr.w	r3, [sl]
 8010dac:	f015 0f02 	tst.w	r5, #2
 8010db0:	f103 0204 	add.w	r2, r3, #4
 8010db4:	ec59 8b10 	vmov	r8, r9, d0
 8010db8:	f8ca 2000 	str.w	r2, [sl]
 8010dbc:	d043      	beq.n	8010e46 <_scanf_float+0x38a>
 8010dbe:	681b      	ldr	r3, [r3, #0]
 8010dc0:	e9c3 8900 	strd	r8, r9, [r3]
 8010dc4:	68e3      	ldr	r3, [r4, #12]
 8010dc6:	3301      	adds	r3, #1
 8010dc8:	60e3      	str	r3, [r4, #12]
 8010dca:	e6be      	b.n	8010b4a <_scanf_float+0x8e>
 8010dcc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8010dd0:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8010dd4:	4632      	mov	r2, r6
 8010dd6:	4638      	mov	r0, r7
 8010dd8:	4798      	blx	r3
 8010dda:	6923      	ldr	r3, [r4, #16]
 8010ddc:	3b01      	subs	r3, #1
 8010dde:	6123      	str	r3, [r4, #16]
 8010de0:	e7a6      	b.n	8010d30 <_scanf_float+0x274>
 8010de2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8010de6:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8010dea:	4632      	mov	r2, r6
 8010dec:	4638      	mov	r0, r7
 8010dee:	4798      	blx	r3
 8010df0:	6923      	ldr	r3, [r4, #16]
 8010df2:	3b01      	subs	r3, #1
 8010df4:	6123      	str	r3, [r4, #16]
 8010df6:	4545      	cmp	r5, r8
 8010df8:	d8f3      	bhi.n	8010de2 <_scanf_float+0x326>
 8010dfa:	e6a5      	b.n	8010b48 <_scanf_float+0x8c>
 8010dfc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8010e00:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8010e04:	4632      	mov	r2, r6
 8010e06:	4638      	mov	r0, r7
 8010e08:	4798      	blx	r3
 8010e0a:	6923      	ldr	r3, [r4, #16]
 8010e0c:	3b01      	subs	r3, #1
 8010e0e:	6123      	str	r3, [r4, #16]
 8010e10:	4545      	cmp	r5, r8
 8010e12:	d8f3      	bhi.n	8010dfc <_scanf_float+0x340>
 8010e14:	e698      	b.n	8010b48 <_scanf_float+0x8c>
 8010e16:	9b03      	ldr	r3, [sp, #12]
 8010e18:	2b00      	cmp	r3, #0
 8010e1a:	d0bf      	beq.n	8010d9c <_scanf_float+0x2e0>
 8010e1c:	9904      	ldr	r1, [sp, #16]
 8010e1e:	230a      	movs	r3, #10
 8010e20:	4632      	mov	r2, r6
 8010e22:	3101      	adds	r1, #1
 8010e24:	4638      	mov	r0, r7
 8010e26:	f000 ff0f 	bl	8011c48 <_strtol_r>
 8010e2a:	9b03      	ldr	r3, [sp, #12]
 8010e2c:	9d04      	ldr	r5, [sp, #16]
 8010e2e:	1ac2      	subs	r2, r0, r3
 8010e30:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8010e34:	429d      	cmp	r5, r3
 8010e36:	bf28      	it	cs
 8010e38:	f504 75b7 	addcs.w	r5, r4, #366	; 0x16e
 8010e3c:	490f      	ldr	r1, [pc, #60]	; (8010e7c <_scanf_float+0x3c0>)
 8010e3e:	4628      	mov	r0, r5
 8010e40:	f000 f834 	bl	8010eac <siprintf>
 8010e44:	e7aa      	b.n	8010d9c <_scanf_float+0x2e0>
 8010e46:	f015 0504 	ands.w	r5, r5, #4
 8010e4a:	d1b8      	bne.n	8010dbe <_scanf_float+0x302>
 8010e4c:	681f      	ldr	r7, [r3, #0]
 8010e4e:	ee10 2a10 	vmov	r2, s0
 8010e52:	464b      	mov	r3, r9
 8010e54:	ee10 0a10 	vmov	r0, s0
 8010e58:	4649      	mov	r1, r9
 8010e5a:	f7ef fe67 	bl	8000b2c <__aeabi_dcmpun>
 8010e5e:	b128      	cbz	r0, 8010e6c <_scanf_float+0x3b0>
 8010e60:	4628      	mov	r0, r5
 8010e62:	f000 f81d 	bl	8010ea0 <nanf>
 8010e66:	ed87 0a00 	vstr	s0, [r7]
 8010e6a:	e7ab      	b.n	8010dc4 <_scanf_float+0x308>
 8010e6c:	4640      	mov	r0, r8
 8010e6e:	4649      	mov	r1, r9
 8010e70:	f7ef feba 	bl	8000be8 <__aeabi_d2f>
 8010e74:	6038      	str	r0, [r7, #0]
 8010e76:	e7a5      	b.n	8010dc4 <_scanf_float+0x308>
 8010e78:	2600      	movs	r6, #0
 8010e7a:	e666      	b.n	8010b4a <_scanf_float+0x8e>
 8010e7c:	08015a2c 	.word	0x08015a2c

08010e80 <_sbrk_r>:
 8010e80:	b538      	push	{r3, r4, r5, lr}
 8010e82:	4c06      	ldr	r4, [pc, #24]	; (8010e9c <_sbrk_r+0x1c>)
 8010e84:	2300      	movs	r3, #0
 8010e86:	4605      	mov	r5, r0
 8010e88:	4608      	mov	r0, r1
 8010e8a:	6023      	str	r3, [r4, #0]
 8010e8c:	f004 f9ba 	bl	8015204 <_sbrk>
 8010e90:	1c43      	adds	r3, r0, #1
 8010e92:	d102      	bne.n	8010e9a <_sbrk_r+0x1a>
 8010e94:	6823      	ldr	r3, [r4, #0]
 8010e96:	b103      	cbz	r3, 8010e9a <_sbrk_r+0x1a>
 8010e98:	602b      	str	r3, [r5, #0]
 8010e9a:	bd38      	pop	{r3, r4, r5, pc}
 8010e9c:	20004aa8 	.word	0x20004aa8

08010ea0 <nanf>:
 8010ea0:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8010ea8 <nanf+0x8>
 8010ea4:	4770      	bx	lr
 8010ea6:	bf00      	nop
 8010ea8:	7fc00000 	.word	0x7fc00000

08010eac <siprintf>:
 8010eac:	b40e      	push	{r1, r2, r3}
 8010eae:	b500      	push	{lr}
 8010eb0:	b09c      	sub	sp, #112	; 0x70
 8010eb2:	ab1d      	add	r3, sp, #116	; 0x74
 8010eb4:	9002      	str	r0, [sp, #8]
 8010eb6:	9006      	str	r0, [sp, #24]
 8010eb8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8010ebc:	4809      	ldr	r0, [pc, #36]	; (8010ee4 <siprintf+0x38>)
 8010ebe:	9107      	str	r1, [sp, #28]
 8010ec0:	9104      	str	r1, [sp, #16]
 8010ec2:	4909      	ldr	r1, [pc, #36]	; (8010ee8 <siprintf+0x3c>)
 8010ec4:	f853 2b04 	ldr.w	r2, [r3], #4
 8010ec8:	9105      	str	r1, [sp, #20]
 8010eca:	6800      	ldr	r0, [r0, #0]
 8010ecc:	9301      	str	r3, [sp, #4]
 8010ece:	a902      	add	r1, sp, #8
 8010ed0:	f002 fcc8 	bl	8013864 <_svfiprintf_r>
 8010ed4:	9b02      	ldr	r3, [sp, #8]
 8010ed6:	2200      	movs	r2, #0
 8010ed8:	701a      	strb	r2, [r3, #0]
 8010eda:	b01c      	add	sp, #112	; 0x70
 8010edc:	f85d eb04 	ldr.w	lr, [sp], #4
 8010ee0:	b003      	add	sp, #12
 8010ee2:	4770      	bx	lr
 8010ee4:	2000017c 	.word	0x2000017c
 8010ee8:	ffff0208 	.word	0xffff0208

08010eec <strncmp>:
 8010eec:	b510      	push	{r4, lr}
 8010eee:	b16a      	cbz	r2, 8010f0c <strncmp+0x20>
 8010ef0:	3901      	subs	r1, #1
 8010ef2:	1884      	adds	r4, r0, r2
 8010ef4:	f810 3b01 	ldrb.w	r3, [r0], #1
 8010ef8:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8010efc:	4293      	cmp	r3, r2
 8010efe:	d103      	bne.n	8010f08 <strncmp+0x1c>
 8010f00:	42a0      	cmp	r0, r4
 8010f02:	d001      	beq.n	8010f08 <strncmp+0x1c>
 8010f04:	2b00      	cmp	r3, #0
 8010f06:	d1f5      	bne.n	8010ef4 <strncmp+0x8>
 8010f08:	1a98      	subs	r0, r3, r2
 8010f0a:	bd10      	pop	{r4, pc}
 8010f0c:	4610      	mov	r0, r2
 8010f0e:	e7fc      	b.n	8010f0a <strncmp+0x1e>

08010f10 <sulp>:
 8010f10:	b570      	push	{r4, r5, r6, lr}
 8010f12:	4604      	mov	r4, r0
 8010f14:	460d      	mov	r5, r1
 8010f16:	ec45 4b10 	vmov	d0, r4, r5
 8010f1a:	4616      	mov	r6, r2
 8010f1c:	f002 fb06 	bl	801352c <__ulp>
 8010f20:	ec51 0b10 	vmov	r0, r1, d0
 8010f24:	b17e      	cbz	r6, 8010f46 <sulp+0x36>
 8010f26:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8010f2a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8010f2e:	2b00      	cmp	r3, #0
 8010f30:	dd09      	ble.n	8010f46 <sulp+0x36>
 8010f32:	051b      	lsls	r3, r3, #20
 8010f34:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8010f38:	2400      	movs	r4, #0
 8010f3a:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8010f3e:	4622      	mov	r2, r4
 8010f40:	462b      	mov	r3, r5
 8010f42:	f7ef fb59 	bl	80005f8 <__aeabi_dmul>
 8010f46:	bd70      	pop	{r4, r5, r6, pc}

08010f48 <_strtod_l>:
 8010f48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010f4c:	461f      	mov	r7, r3
 8010f4e:	b0a1      	sub	sp, #132	; 0x84
 8010f50:	2300      	movs	r3, #0
 8010f52:	4681      	mov	r9, r0
 8010f54:	4638      	mov	r0, r7
 8010f56:	460e      	mov	r6, r1
 8010f58:	9217      	str	r2, [sp, #92]	; 0x5c
 8010f5a:	931c      	str	r3, [sp, #112]	; 0x70
 8010f5c:	f001 fff5 	bl	8012f4a <__localeconv_l>
 8010f60:	4680      	mov	r8, r0
 8010f62:	6800      	ldr	r0, [r0, #0]
 8010f64:	f7ef f934 	bl	80001d0 <strlen>
 8010f68:	f04f 0a00 	mov.w	sl, #0
 8010f6c:	4604      	mov	r4, r0
 8010f6e:	f04f 0b00 	mov.w	fp, #0
 8010f72:	961b      	str	r6, [sp, #108]	; 0x6c
 8010f74:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8010f76:	781a      	ldrb	r2, [r3, #0]
 8010f78:	2a0d      	cmp	r2, #13
 8010f7a:	d832      	bhi.n	8010fe2 <_strtod_l+0x9a>
 8010f7c:	2a09      	cmp	r2, #9
 8010f7e:	d236      	bcs.n	8010fee <_strtod_l+0xa6>
 8010f80:	2a00      	cmp	r2, #0
 8010f82:	d03e      	beq.n	8011002 <_strtod_l+0xba>
 8010f84:	2300      	movs	r3, #0
 8010f86:	930d      	str	r3, [sp, #52]	; 0x34
 8010f88:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8010f8a:	782b      	ldrb	r3, [r5, #0]
 8010f8c:	2b30      	cmp	r3, #48	; 0x30
 8010f8e:	f040 80ac 	bne.w	80110ea <_strtod_l+0x1a2>
 8010f92:	786b      	ldrb	r3, [r5, #1]
 8010f94:	2b58      	cmp	r3, #88	; 0x58
 8010f96:	d001      	beq.n	8010f9c <_strtod_l+0x54>
 8010f98:	2b78      	cmp	r3, #120	; 0x78
 8010f9a:	d167      	bne.n	801106c <_strtod_l+0x124>
 8010f9c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010f9e:	9301      	str	r3, [sp, #4]
 8010fa0:	ab1c      	add	r3, sp, #112	; 0x70
 8010fa2:	9300      	str	r3, [sp, #0]
 8010fa4:	9702      	str	r7, [sp, #8]
 8010fa6:	ab1d      	add	r3, sp, #116	; 0x74
 8010fa8:	4a88      	ldr	r2, [pc, #544]	; (80111cc <_strtod_l+0x284>)
 8010faa:	a91b      	add	r1, sp, #108	; 0x6c
 8010fac:	4648      	mov	r0, r9
 8010fae:	f001 fcf2 	bl	8012996 <__gethex>
 8010fb2:	f010 0407 	ands.w	r4, r0, #7
 8010fb6:	4606      	mov	r6, r0
 8010fb8:	d005      	beq.n	8010fc6 <_strtod_l+0x7e>
 8010fba:	2c06      	cmp	r4, #6
 8010fbc:	d12b      	bne.n	8011016 <_strtod_l+0xce>
 8010fbe:	3501      	adds	r5, #1
 8010fc0:	2300      	movs	r3, #0
 8010fc2:	951b      	str	r5, [sp, #108]	; 0x6c
 8010fc4:	930d      	str	r3, [sp, #52]	; 0x34
 8010fc6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8010fc8:	2b00      	cmp	r3, #0
 8010fca:	f040 859a 	bne.w	8011b02 <_strtod_l+0xbba>
 8010fce:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010fd0:	b1e3      	cbz	r3, 801100c <_strtod_l+0xc4>
 8010fd2:	4652      	mov	r2, sl
 8010fd4:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8010fd8:	ec43 2b10 	vmov	d0, r2, r3
 8010fdc:	b021      	add	sp, #132	; 0x84
 8010fde:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010fe2:	2a2b      	cmp	r2, #43	; 0x2b
 8010fe4:	d015      	beq.n	8011012 <_strtod_l+0xca>
 8010fe6:	2a2d      	cmp	r2, #45	; 0x2d
 8010fe8:	d004      	beq.n	8010ff4 <_strtod_l+0xac>
 8010fea:	2a20      	cmp	r2, #32
 8010fec:	d1ca      	bne.n	8010f84 <_strtod_l+0x3c>
 8010fee:	3301      	adds	r3, #1
 8010ff0:	931b      	str	r3, [sp, #108]	; 0x6c
 8010ff2:	e7bf      	b.n	8010f74 <_strtod_l+0x2c>
 8010ff4:	2201      	movs	r2, #1
 8010ff6:	920d      	str	r2, [sp, #52]	; 0x34
 8010ff8:	1c5a      	adds	r2, r3, #1
 8010ffa:	921b      	str	r2, [sp, #108]	; 0x6c
 8010ffc:	785b      	ldrb	r3, [r3, #1]
 8010ffe:	2b00      	cmp	r3, #0
 8011000:	d1c2      	bne.n	8010f88 <_strtod_l+0x40>
 8011002:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8011004:	961b      	str	r6, [sp, #108]	; 0x6c
 8011006:	2b00      	cmp	r3, #0
 8011008:	f040 8579 	bne.w	8011afe <_strtod_l+0xbb6>
 801100c:	4652      	mov	r2, sl
 801100e:	465b      	mov	r3, fp
 8011010:	e7e2      	b.n	8010fd8 <_strtod_l+0x90>
 8011012:	2200      	movs	r2, #0
 8011014:	e7ef      	b.n	8010ff6 <_strtod_l+0xae>
 8011016:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8011018:	b13a      	cbz	r2, 801102a <_strtod_l+0xe2>
 801101a:	2135      	movs	r1, #53	; 0x35
 801101c:	a81e      	add	r0, sp, #120	; 0x78
 801101e:	f002 fb7d 	bl	801371c <__copybits>
 8011022:	991c      	ldr	r1, [sp, #112]	; 0x70
 8011024:	4648      	mov	r0, r9
 8011026:	f001 ffe9 	bl	8012ffc <_Bfree>
 801102a:	3c01      	subs	r4, #1
 801102c:	2c04      	cmp	r4, #4
 801102e:	d806      	bhi.n	801103e <_strtod_l+0xf6>
 8011030:	e8df f004 	tbb	[pc, r4]
 8011034:	1714030a 	.word	0x1714030a
 8011038:	0a          	.byte	0x0a
 8011039:	00          	.byte	0x00
 801103a:	e9dd ab1e 	ldrd	sl, fp, [sp, #120]	; 0x78
 801103e:	0730      	lsls	r0, r6, #28
 8011040:	d5c1      	bpl.n	8010fc6 <_strtod_l+0x7e>
 8011042:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8011046:	e7be      	b.n	8010fc6 <_strtod_l+0x7e>
 8011048:	e9dd a31e 	ldrd	sl, r3, [sp, #120]	; 0x78
 801104c:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 801104e:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8011052:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8011056:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 801105a:	e7f0      	b.n	801103e <_strtod_l+0xf6>
 801105c:	f8df b170 	ldr.w	fp, [pc, #368]	; 80111d0 <_strtod_l+0x288>
 8011060:	e7ed      	b.n	801103e <_strtod_l+0xf6>
 8011062:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8011066:	f04f 3aff 	mov.w	sl, #4294967295
 801106a:	e7e8      	b.n	801103e <_strtod_l+0xf6>
 801106c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801106e:	1c5a      	adds	r2, r3, #1
 8011070:	921b      	str	r2, [sp, #108]	; 0x6c
 8011072:	785b      	ldrb	r3, [r3, #1]
 8011074:	2b30      	cmp	r3, #48	; 0x30
 8011076:	d0f9      	beq.n	801106c <_strtod_l+0x124>
 8011078:	2b00      	cmp	r3, #0
 801107a:	d0a4      	beq.n	8010fc6 <_strtod_l+0x7e>
 801107c:	2301      	movs	r3, #1
 801107e:	2500      	movs	r5, #0
 8011080:	9306      	str	r3, [sp, #24]
 8011082:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8011084:	9308      	str	r3, [sp, #32]
 8011086:	9507      	str	r5, [sp, #28]
 8011088:	9505      	str	r5, [sp, #20]
 801108a:	220a      	movs	r2, #10
 801108c:	981b      	ldr	r0, [sp, #108]	; 0x6c
 801108e:	7807      	ldrb	r7, [r0, #0]
 8011090:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 8011094:	b2d9      	uxtb	r1, r3
 8011096:	2909      	cmp	r1, #9
 8011098:	d929      	bls.n	80110ee <_strtod_l+0x1a6>
 801109a:	4622      	mov	r2, r4
 801109c:	f8d8 1000 	ldr.w	r1, [r8]
 80110a0:	f7ff ff24 	bl	8010eec <strncmp>
 80110a4:	2800      	cmp	r0, #0
 80110a6:	d031      	beq.n	801110c <_strtod_l+0x1c4>
 80110a8:	2000      	movs	r0, #0
 80110aa:	9c05      	ldr	r4, [sp, #20]
 80110ac:	9004      	str	r0, [sp, #16]
 80110ae:	463b      	mov	r3, r7
 80110b0:	4602      	mov	r2, r0
 80110b2:	2b65      	cmp	r3, #101	; 0x65
 80110b4:	d001      	beq.n	80110ba <_strtod_l+0x172>
 80110b6:	2b45      	cmp	r3, #69	; 0x45
 80110b8:	d114      	bne.n	80110e4 <_strtod_l+0x19c>
 80110ba:	b924      	cbnz	r4, 80110c6 <_strtod_l+0x17e>
 80110bc:	b910      	cbnz	r0, 80110c4 <_strtod_l+0x17c>
 80110be:	9b06      	ldr	r3, [sp, #24]
 80110c0:	2b00      	cmp	r3, #0
 80110c2:	d09e      	beq.n	8011002 <_strtod_l+0xba>
 80110c4:	2400      	movs	r4, #0
 80110c6:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 80110c8:	1c73      	adds	r3, r6, #1
 80110ca:	931b      	str	r3, [sp, #108]	; 0x6c
 80110cc:	7873      	ldrb	r3, [r6, #1]
 80110ce:	2b2b      	cmp	r3, #43	; 0x2b
 80110d0:	d078      	beq.n	80111c4 <_strtod_l+0x27c>
 80110d2:	2b2d      	cmp	r3, #45	; 0x2d
 80110d4:	d070      	beq.n	80111b8 <_strtod_l+0x270>
 80110d6:	f04f 0c00 	mov.w	ip, #0
 80110da:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 80110de:	2f09      	cmp	r7, #9
 80110e0:	d97c      	bls.n	80111dc <_strtod_l+0x294>
 80110e2:	961b      	str	r6, [sp, #108]	; 0x6c
 80110e4:	f04f 0e00 	mov.w	lr, #0
 80110e8:	e09a      	b.n	8011220 <_strtod_l+0x2d8>
 80110ea:	2300      	movs	r3, #0
 80110ec:	e7c7      	b.n	801107e <_strtod_l+0x136>
 80110ee:	9905      	ldr	r1, [sp, #20]
 80110f0:	2908      	cmp	r1, #8
 80110f2:	bfdd      	ittte	le
 80110f4:	9907      	ldrle	r1, [sp, #28]
 80110f6:	fb02 3301 	mlale	r3, r2, r1, r3
 80110fa:	9307      	strle	r3, [sp, #28]
 80110fc:	fb02 3505 	mlagt	r5, r2, r5, r3
 8011100:	9b05      	ldr	r3, [sp, #20]
 8011102:	3001      	adds	r0, #1
 8011104:	3301      	adds	r3, #1
 8011106:	9305      	str	r3, [sp, #20]
 8011108:	901b      	str	r0, [sp, #108]	; 0x6c
 801110a:	e7bf      	b.n	801108c <_strtod_l+0x144>
 801110c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801110e:	191a      	adds	r2, r3, r4
 8011110:	921b      	str	r2, [sp, #108]	; 0x6c
 8011112:	9a05      	ldr	r2, [sp, #20]
 8011114:	5d1b      	ldrb	r3, [r3, r4]
 8011116:	2a00      	cmp	r2, #0
 8011118:	d037      	beq.n	801118a <_strtod_l+0x242>
 801111a:	9c05      	ldr	r4, [sp, #20]
 801111c:	4602      	mov	r2, r0
 801111e:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8011122:	2909      	cmp	r1, #9
 8011124:	d913      	bls.n	801114e <_strtod_l+0x206>
 8011126:	2101      	movs	r1, #1
 8011128:	9104      	str	r1, [sp, #16]
 801112a:	e7c2      	b.n	80110b2 <_strtod_l+0x16a>
 801112c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801112e:	1c5a      	adds	r2, r3, #1
 8011130:	921b      	str	r2, [sp, #108]	; 0x6c
 8011132:	785b      	ldrb	r3, [r3, #1]
 8011134:	3001      	adds	r0, #1
 8011136:	2b30      	cmp	r3, #48	; 0x30
 8011138:	d0f8      	beq.n	801112c <_strtod_l+0x1e4>
 801113a:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 801113e:	2a08      	cmp	r2, #8
 8011140:	f200 84e4 	bhi.w	8011b0c <_strtod_l+0xbc4>
 8011144:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8011146:	9208      	str	r2, [sp, #32]
 8011148:	4602      	mov	r2, r0
 801114a:	2000      	movs	r0, #0
 801114c:	4604      	mov	r4, r0
 801114e:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 8011152:	f100 0101 	add.w	r1, r0, #1
 8011156:	d012      	beq.n	801117e <_strtod_l+0x236>
 8011158:	440a      	add	r2, r1
 801115a:	eb00 0c04 	add.w	ip, r0, r4
 801115e:	4621      	mov	r1, r4
 8011160:	270a      	movs	r7, #10
 8011162:	458c      	cmp	ip, r1
 8011164:	d113      	bne.n	801118e <_strtod_l+0x246>
 8011166:	1821      	adds	r1, r4, r0
 8011168:	2908      	cmp	r1, #8
 801116a:	f104 0401 	add.w	r4, r4, #1
 801116e:	4404      	add	r4, r0
 8011170:	dc19      	bgt.n	80111a6 <_strtod_l+0x25e>
 8011172:	9b07      	ldr	r3, [sp, #28]
 8011174:	210a      	movs	r1, #10
 8011176:	fb01 e303 	mla	r3, r1, r3, lr
 801117a:	9307      	str	r3, [sp, #28]
 801117c:	2100      	movs	r1, #0
 801117e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8011180:	1c58      	adds	r0, r3, #1
 8011182:	901b      	str	r0, [sp, #108]	; 0x6c
 8011184:	785b      	ldrb	r3, [r3, #1]
 8011186:	4608      	mov	r0, r1
 8011188:	e7c9      	b.n	801111e <_strtod_l+0x1d6>
 801118a:	9805      	ldr	r0, [sp, #20]
 801118c:	e7d3      	b.n	8011136 <_strtod_l+0x1ee>
 801118e:	2908      	cmp	r1, #8
 8011190:	f101 0101 	add.w	r1, r1, #1
 8011194:	dc03      	bgt.n	801119e <_strtod_l+0x256>
 8011196:	9b07      	ldr	r3, [sp, #28]
 8011198:	437b      	muls	r3, r7
 801119a:	9307      	str	r3, [sp, #28]
 801119c:	e7e1      	b.n	8011162 <_strtod_l+0x21a>
 801119e:	2910      	cmp	r1, #16
 80111a0:	bfd8      	it	le
 80111a2:	437d      	mulle	r5, r7
 80111a4:	e7dd      	b.n	8011162 <_strtod_l+0x21a>
 80111a6:	2c10      	cmp	r4, #16
 80111a8:	bfdc      	itt	le
 80111aa:	210a      	movle	r1, #10
 80111ac:	fb01 e505 	mlale	r5, r1, r5, lr
 80111b0:	e7e4      	b.n	801117c <_strtod_l+0x234>
 80111b2:	2301      	movs	r3, #1
 80111b4:	9304      	str	r3, [sp, #16]
 80111b6:	e781      	b.n	80110bc <_strtod_l+0x174>
 80111b8:	f04f 0c01 	mov.w	ip, #1
 80111bc:	1cb3      	adds	r3, r6, #2
 80111be:	931b      	str	r3, [sp, #108]	; 0x6c
 80111c0:	78b3      	ldrb	r3, [r6, #2]
 80111c2:	e78a      	b.n	80110da <_strtod_l+0x192>
 80111c4:	f04f 0c00 	mov.w	ip, #0
 80111c8:	e7f8      	b.n	80111bc <_strtod_l+0x274>
 80111ca:	bf00      	nop
 80111cc:	08015a34 	.word	0x08015a34
 80111d0:	7ff00000 	.word	0x7ff00000
 80111d4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80111d6:	1c5f      	adds	r7, r3, #1
 80111d8:	971b      	str	r7, [sp, #108]	; 0x6c
 80111da:	785b      	ldrb	r3, [r3, #1]
 80111dc:	2b30      	cmp	r3, #48	; 0x30
 80111de:	d0f9      	beq.n	80111d4 <_strtod_l+0x28c>
 80111e0:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 80111e4:	2f08      	cmp	r7, #8
 80111e6:	f63f af7d 	bhi.w	80110e4 <_strtod_l+0x19c>
 80111ea:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 80111ee:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80111f0:	930a      	str	r3, [sp, #40]	; 0x28
 80111f2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80111f4:	1c5f      	adds	r7, r3, #1
 80111f6:	971b      	str	r7, [sp, #108]	; 0x6c
 80111f8:	785b      	ldrb	r3, [r3, #1]
 80111fa:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 80111fe:	f1b8 0f09 	cmp.w	r8, #9
 8011202:	d937      	bls.n	8011274 <_strtod_l+0x32c>
 8011204:	990a      	ldr	r1, [sp, #40]	; 0x28
 8011206:	1a7f      	subs	r7, r7, r1
 8011208:	2f08      	cmp	r7, #8
 801120a:	f644 671f 	movw	r7, #19999	; 0x4e1f
 801120e:	dc37      	bgt.n	8011280 <_strtod_l+0x338>
 8011210:	45be      	cmp	lr, r7
 8011212:	bfa8      	it	ge
 8011214:	46be      	movge	lr, r7
 8011216:	f1bc 0f00 	cmp.w	ip, #0
 801121a:	d001      	beq.n	8011220 <_strtod_l+0x2d8>
 801121c:	f1ce 0e00 	rsb	lr, lr, #0
 8011220:	2c00      	cmp	r4, #0
 8011222:	d151      	bne.n	80112c8 <_strtod_l+0x380>
 8011224:	2800      	cmp	r0, #0
 8011226:	f47f aece 	bne.w	8010fc6 <_strtod_l+0x7e>
 801122a:	9a06      	ldr	r2, [sp, #24]
 801122c:	2a00      	cmp	r2, #0
 801122e:	f47f aeca 	bne.w	8010fc6 <_strtod_l+0x7e>
 8011232:	9a04      	ldr	r2, [sp, #16]
 8011234:	2a00      	cmp	r2, #0
 8011236:	f47f aee4 	bne.w	8011002 <_strtod_l+0xba>
 801123a:	2b4e      	cmp	r3, #78	; 0x4e
 801123c:	d027      	beq.n	801128e <_strtod_l+0x346>
 801123e:	dc21      	bgt.n	8011284 <_strtod_l+0x33c>
 8011240:	2b49      	cmp	r3, #73	; 0x49
 8011242:	f47f aede 	bne.w	8011002 <_strtod_l+0xba>
 8011246:	49a0      	ldr	r1, [pc, #640]	; (80114c8 <_strtod_l+0x580>)
 8011248:	a81b      	add	r0, sp, #108	; 0x6c
 801124a:	f001 fdd7 	bl	8012dfc <__match>
 801124e:	2800      	cmp	r0, #0
 8011250:	f43f aed7 	beq.w	8011002 <_strtod_l+0xba>
 8011254:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8011256:	499d      	ldr	r1, [pc, #628]	; (80114cc <_strtod_l+0x584>)
 8011258:	3b01      	subs	r3, #1
 801125a:	a81b      	add	r0, sp, #108	; 0x6c
 801125c:	931b      	str	r3, [sp, #108]	; 0x6c
 801125e:	f001 fdcd 	bl	8012dfc <__match>
 8011262:	b910      	cbnz	r0, 801126a <_strtod_l+0x322>
 8011264:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8011266:	3301      	adds	r3, #1
 8011268:	931b      	str	r3, [sp, #108]	; 0x6c
 801126a:	f8df b274 	ldr.w	fp, [pc, #628]	; 80114e0 <_strtod_l+0x598>
 801126e:	f04f 0a00 	mov.w	sl, #0
 8011272:	e6a8      	b.n	8010fc6 <_strtod_l+0x7e>
 8011274:	210a      	movs	r1, #10
 8011276:	fb01 3e0e 	mla	lr, r1, lr, r3
 801127a:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 801127e:	e7b8      	b.n	80111f2 <_strtod_l+0x2aa>
 8011280:	46be      	mov	lr, r7
 8011282:	e7c8      	b.n	8011216 <_strtod_l+0x2ce>
 8011284:	2b69      	cmp	r3, #105	; 0x69
 8011286:	d0de      	beq.n	8011246 <_strtod_l+0x2fe>
 8011288:	2b6e      	cmp	r3, #110	; 0x6e
 801128a:	f47f aeba 	bne.w	8011002 <_strtod_l+0xba>
 801128e:	4990      	ldr	r1, [pc, #576]	; (80114d0 <_strtod_l+0x588>)
 8011290:	a81b      	add	r0, sp, #108	; 0x6c
 8011292:	f001 fdb3 	bl	8012dfc <__match>
 8011296:	2800      	cmp	r0, #0
 8011298:	f43f aeb3 	beq.w	8011002 <_strtod_l+0xba>
 801129c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801129e:	781b      	ldrb	r3, [r3, #0]
 80112a0:	2b28      	cmp	r3, #40	; 0x28
 80112a2:	d10e      	bne.n	80112c2 <_strtod_l+0x37a>
 80112a4:	aa1e      	add	r2, sp, #120	; 0x78
 80112a6:	498b      	ldr	r1, [pc, #556]	; (80114d4 <_strtod_l+0x58c>)
 80112a8:	a81b      	add	r0, sp, #108	; 0x6c
 80112aa:	f001 fdbb 	bl	8012e24 <__hexnan>
 80112ae:	2805      	cmp	r0, #5
 80112b0:	d107      	bne.n	80112c2 <_strtod_l+0x37a>
 80112b2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80112b4:	f8dd a078 	ldr.w	sl, [sp, #120]	; 0x78
 80112b8:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 80112bc:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 80112c0:	e681      	b.n	8010fc6 <_strtod_l+0x7e>
 80112c2:	f8df b224 	ldr.w	fp, [pc, #548]	; 80114e8 <_strtod_l+0x5a0>
 80112c6:	e7d2      	b.n	801126e <_strtod_l+0x326>
 80112c8:	ebae 0302 	sub.w	r3, lr, r2
 80112cc:	9306      	str	r3, [sp, #24]
 80112ce:	9b05      	ldr	r3, [sp, #20]
 80112d0:	9807      	ldr	r0, [sp, #28]
 80112d2:	2b00      	cmp	r3, #0
 80112d4:	bf08      	it	eq
 80112d6:	4623      	moveq	r3, r4
 80112d8:	2c10      	cmp	r4, #16
 80112da:	9305      	str	r3, [sp, #20]
 80112dc:	46a0      	mov	r8, r4
 80112de:	bfa8      	it	ge
 80112e0:	f04f 0810 	movge.w	r8, #16
 80112e4:	f7ef f90e 	bl	8000504 <__aeabi_ui2d>
 80112e8:	2c09      	cmp	r4, #9
 80112ea:	4682      	mov	sl, r0
 80112ec:	468b      	mov	fp, r1
 80112ee:	dc13      	bgt.n	8011318 <_strtod_l+0x3d0>
 80112f0:	9b06      	ldr	r3, [sp, #24]
 80112f2:	2b00      	cmp	r3, #0
 80112f4:	f43f ae67 	beq.w	8010fc6 <_strtod_l+0x7e>
 80112f8:	9b06      	ldr	r3, [sp, #24]
 80112fa:	dd7a      	ble.n	80113f2 <_strtod_l+0x4aa>
 80112fc:	2b16      	cmp	r3, #22
 80112fe:	dc61      	bgt.n	80113c4 <_strtod_l+0x47c>
 8011300:	4a75      	ldr	r2, [pc, #468]	; (80114d8 <_strtod_l+0x590>)
 8011302:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 8011306:	e9de 0100 	ldrd	r0, r1, [lr]
 801130a:	4652      	mov	r2, sl
 801130c:	465b      	mov	r3, fp
 801130e:	f7ef f973 	bl	80005f8 <__aeabi_dmul>
 8011312:	4682      	mov	sl, r0
 8011314:	468b      	mov	fp, r1
 8011316:	e656      	b.n	8010fc6 <_strtod_l+0x7e>
 8011318:	4b6f      	ldr	r3, [pc, #444]	; (80114d8 <_strtod_l+0x590>)
 801131a:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 801131e:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8011322:	f7ef f969 	bl	80005f8 <__aeabi_dmul>
 8011326:	4606      	mov	r6, r0
 8011328:	4628      	mov	r0, r5
 801132a:	460f      	mov	r7, r1
 801132c:	f7ef f8ea 	bl	8000504 <__aeabi_ui2d>
 8011330:	4602      	mov	r2, r0
 8011332:	460b      	mov	r3, r1
 8011334:	4630      	mov	r0, r6
 8011336:	4639      	mov	r1, r7
 8011338:	f7ee ffa8 	bl	800028c <__adddf3>
 801133c:	2c0f      	cmp	r4, #15
 801133e:	4682      	mov	sl, r0
 8011340:	468b      	mov	fp, r1
 8011342:	ddd5      	ble.n	80112f0 <_strtod_l+0x3a8>
 8011344:	9b06      	ldr	r3, [sp, #24]
 8011346:	eba4 0808 	sub.w	r8, r4, r8
 801134a:	4498      	add	r8, r3
 801134c:	f1b8 0f00 	cmp.w	r8, #0
 8011350:	f340 8096 	ble.w	8011480 <_strtod_l+0x538>
 8011354:	f018 030f 	ands.w	r3, r8, #15
 8011358:	d00a      	beq.n	8011370 <_strtod_l+0x428>
 801135a:	495f      	ldr	r1, [pc, #380]	; (80114d8 <_strtod_l+0x590>)
 801135c:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8011360:	4652      	mov	r2, sl
 8011362:	465b      	mov	r3, fp
 8011364:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011368:	f7ef f946 	bl	80005f8 <__aeabi_dmul>
 801136c:	4682      	mov	sl, r0
 801136e:	468b      	mov	fp, r1
 8011370:	f038 080f 	bics.w	r8, r8, #15
 8011374:	d073      	beq.n	801145e <_strtod_l+0x516>
 8011376:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 801137a:	dd47      	ble.n	801140c <_strtod_l+0x4c4>
 801137c:	2400      	movs	r4, #0
 801137e:	46a0      	mov	r8, r4
 8011380:	9407      	str	r4, [sp, #28]
 8011382:	9405      	str	r4, [sp, #20]
 8011384:	2322      	movs	r3, #34	; 0x22
 8011386:	f8df b158 	ldr.w	fp, [pc, #344]	; 80114e0 <_strtod_l+0x598>
 801138a:	f8c9 3000 	str.w	r3, [r9]
 801138e:	f04f 0a00 	mov.w	sl, #0
 8011392:	9b07      	ldr	r3, [sp, #28]
 8011394:	2b00      	cmp	r3, #0
 8011396:	f43f ae16 	beq.w	8010fc6 <_strtod_l+0x7e>
 801139a:	991c      	ldr	r1, [sp, #112]	; 0x70
 801139c:	4648      	mov	r0, r9
 801139e:	f001 fe2d 	bl	8012ffc <_Bfree>
 80113a2:	9905      	ldr	r1, [sp, #20]
 80113a4:	4648      	mov	r0, r9
 80113a6:	f001 fe29 	bl	8012ffc <_Bfree>
 80113aa:	4641      	mov	r1, r8
 80113ac:	4648      	mov	r0, r9
 80113ae:	f001 fe25 	bl	8012ffc <_Bfree>
 80113b2:	9907      	ldr	r1, [sp, #28]
 80113b4:	4648      	mov	r0, r9
 80113b6:	f001 fe21 	bl	8012ffc <_Bfree>
 80113ba:	4621      	mov	r1, r4
 80113bc:	4648      	mov	r0, r9
 80113be:	f001 fe1d 	bl	8012ffc <_Bfree>
 80113c2:	e600      	b.n	8010fc6 <_strtod_l+0x7e>
 80113c4:	9a06      	ldr	r2, [sp, #24]
 80113c6:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 80113ca:	4293      	cmp	r3, r2
 80113cc:	dbba      	blt.n	8011344 <_strtod_l+0x3fc>
 80113ce:	4d42      	ldr	r5, [pc, #264]	; (80114d8 <_strtod_l+0x590>)
 80113d0:	f1c4 040f 	rsb	r4, r4, #15
 80113d4:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 80113d8:	4652      	mov	r2, sl
 80113da:	465b      	mov	r3, fp
 80113dc:	e9d1 0100 	ldrd	r0, r1, [r1]
 80113e0:	f7ef f90a 	bl	80005f8 <__aeabi_dmul>
 80113e4:	9b06      	ldr	r3, [sp, #24]
 80113e6:	1b1c      	subs	r4, r3, r4
 80113e8:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 80113ec:	e9d5 2300 	ldrd	r2, r3, [r5]
 80113f0:	e78d      	b.n	801130e <_strtod_l+0x3c6>
 80113f2:	f113 0f16 	cmn.w	r3, #22
 80113f6:	dba5      	blt.n	8011344 <_strtod_l+0x3fc>
 80113f8:	4a37      	ldr	r2, [pc, #220]	; (80114d8 <_strtod_l+0x590>)
 80113fa:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 80113fe:	e9d2 2300 	ldrd	r2, r3, [r2]
 8011402:	4650      	mov	r0, sl
 8011404:	4659      	mov	r1, fp
 8011406:	f7ef fa21 	bl	800084c <__aeabi_ddiv>
 801140a:	e782      	b.n	8011312 <_strtod_l+0x3ca>
 801140c:	2300      	movs	r3, #0
 801140e:	4e33      	ldr	r6, [pc, #204]	; (80114dc <_strtod_l+0x594>)
 8011410:	ea4f 1828 	mov.w	r8, r8, asr #4
 8011414:	4650      	mov	r0, sl
 8011416:	4659      	mov	r1, fp
 8011418:	461d      	mov	r5, r3
 801141a:	f1b8 0f01 	cmp.w	r8, #1
 801141e:	dc21      	bgt.n	8011464 <_strtod_l+0x51c>
 8011420:	b10b      	cbz	r3, 8011426 <_strtod_l+0x4de>
 8011422:	4682      	mov	sl, r0
 8011424:	468b      	mov	fp, r1
 8011426:	4b2d      	ldr	r3, [pc, #180]	; (80114dc <_strtod_l+0x594>)
 8011428:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 801142c:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8011430:	4652      	mov	r2, sl
 8011432:	465b      	mov	r3, fp
 8011434:	e9d5 0100 	ldrd	r0, r1, [r5]
 8011438:	f7ef f8de 	bl	80005f8 <__aeabi_dmul>
 801143c:	4b28      	ldr	r3, [pc, #160]	; (80114e0 <_strtod_l+0x598>)
 801143e:	460a      	mov	r2, r1
 8011440:	400b      	ands	r3, r1
 8011442:	4928      	ldr	r1, [pc, #160]	; (80114e4 <_strtod_l+0x59c>)
 8011444:	428b      	cmp	r3, r1
 8011446:	4682      	mov	sl, r0
 8011448:	d898      	bhi.n	801137c <_strtod_l+0x434>
 801144a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 801144e:	428b      	cmp	r3, r1
 8011450:	bf86      	itte	hi
 8011452:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 80114ec <_strtod_l+0x5a4>
 8011456:	f04f 3aff 	movhi.w	sl, #4294967295
 801145a:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 801145e:	2300      	movs	r3, #0
 8011460:	9304      	str	r3, [sp, #16]
 8011462:	e077      	b.n	8011554 <_strtod_l+0x60c>
 8011464:	f018 0f01 	tst.w	r8, #1
 8011468:	d006      	beq.n	8011478 <_strtod_l+0x530>
 801146a:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 801146e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011472:	f7ef f8c1 	bl	80005f8 <__aeabi_dmul>
 8011476:	2301      	movs	r3, #1
 8011478:	3501      	adds	r5, #1
 801147a:	ea4f 0868 	mov.w	r8, r8, asr #1
 801147e:	e7cc      	b.n	801141a <_strtod_l+0x4d2>
 8011480:	d0ed      	beq.n	801145e <_strtod_l+0x516>
 8011482:	f1c8 0800 	rsb	r8, r8, #0
 8011486:	f018 020f 	ands.w	r2, r8, #15
 801148a:	d00a      	beq.n	80114a2 <_strtod_l+0x55a>
 801148c:	4b12      	ldr	r3, [pc, #72]	; (80114d8 <_strtod_l+0x590>)
 801148e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8011492:	4650      	mov	r0, sl
 8011494:	4659      	mov	r1, fp
 8011496:	e9d3 2300 	ldrd	r2, r3, [r3]
 801149a:	f7ef f9d7 	bl	800084c <__aeabi_ddiv>
 801149e:	4682      	mov	sl, r0
 80114a0:	468b      	mov	fp, r1
 80114a2:	ea5f 1828 	movs.w	r8, r8, asr #4
 80114a6:	d0da      	beq.n	801145e <_strtod_l+0x516>
 80114a8:	f1b8 0f1f 	cmp.w	r8, #31
 80114ac:	dd20      	ble.n	80114f0 <_strtod_l+0x5a8>
 80114ae:	2400      	movs	r4, #0
 80114b0:	46a0      	mov	r8, r4
 80114b2:	9407      	str	r4, [sp, #28]
 80114b4:	9405      	str	r4, [sp, #20]
 80114b6:	2322      	movs	r3, #34	; 0x22
 80114b8:	f04f 0a00 	mov.w	sl, #0
 80114bc:	f04f 0b00 	mov.w	fp, #0
 80114c0:	f8c9 3000 	str.w	r3, [r9]
 80114c4:	e765      	b.n	8011392 <_strtod_l+0x44a>
 80114c6:	bf00      	nop
 80114c8:	08015cba 	.word	0x08015cba
 80114cc:	08015a8b 	.word	0x08015a8b
 80114d0:	08015a05 	.word	0x08015a05
 80114d4:	08015a48 	.word	0x08015a48
 80114d8:	08015ac8 	.word	0x08015ac8
 80114dc:	08015aa0 	.word	0x08015aa0
 80114e0:	7ff00000 	.word	0x7ff00000
 80114e4:	7ca00000 	.word	0x7ca00000
 80114e8:	fff80000 	.word	0xfff80000
 80114ec:	7fefffff 	.word	0x7fefffff
 80114f0:	f018 0310 	ands.w	r3, r8, #16
 80114f4:	bf18      	it	ne
 80114f6:	236a      	movne	r3, #106	; 0x6a
 80114f8:	4da0      	ldr	r5, [pc, #640]	; (801177c <_strtod_l+0x834>)
 80114fa:	9304      	str	r3, [sp, #16]
 80114fc:	4650      	mov	r0, sl
 80114fe:	4659      	mov	r1, fp
 8011500:	2300      	movs	r3, #0
 8011502:	f1b8 0f00 	cmp.w	r8, #0
 8011506:	f300 810a 	bgt.w	801171e <_strtod_l+0x7d6>
 801150a:	b10b      	cbz	r3, 8011510 <_strtod_l+0x5c8>
 801150c:	4682      	mov	sl, r0
 801150e:	468b      	mov	fp, r1
 8011510:	9b04      	ldr	r3, [sp, #16]
 8011512:	b1bb      	cbz	r3, 8011544 <_strtod_l+0x5fc>
 8011514:	f3cb 530a 	ubfx	r3, fp, #20, #11
 8011518:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 801151c:	2b00      	cmp	r3, #0
 801151e:	4659      	mov	r1, fp
 8011520:	dd10      	ble.n	8011544 <_strtod_l+0x5fc>
 8011522:	2b1f      	cmp	r3, #31
 8011524:	f340 8107 	ble.w	8011736 <_strtod_l+0x7ee>
 8011528:	2b34      	cmp	r3, #52	; 0x34
 801152a:	bfde      	ittt	le
 801152c:	3b20      	suble	r3, #32
 801152e:	f04f 32ff 	movle.w	r2, #4294967295
 8011532:	fa02 f303 	lslle.w	r3, r2, r3
 8011536:	f04f 0a00 	mov.w	sl, #0
 801153a:	bfcc      	ite	gt
 801153c:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8011540:	ea03 0b01 	andle.w	fp, r3, r1
 8011544:	2200      	movs	r2, #0
 8011546:	2300      	movs	r3, #0
 8011548:	4650      	mov	r0, sl
 801154a:	4659      	mov	r1, fp
 801154c:	f7ef fabc 	bl	8000ac8 <__aeabi_dcmpeq>
 8011550:	2800      	cmp	r0, #0
 8011552:	d1ac      	bne.n	80114ae <_strtod_l+0x566>
 8011554:	9b07      	ldr	r3, [sp, #28]
 8011556:	9300      	str	r3, [sp, #0]
 8011558:	9a05      	ldr	r2, [sp, #20]
 801155a:	9908      	ldr	r1, [sp, #32]
 801155c:	4623      	mov	r3, r4
 801155e:	4648      	mov	r0, r9
 8011560:	f001 fd9e 	bl	80130a0 <__s2b>
 8011564:	9007      	str	r0, [sp, #28]
 8011566:	2800      	cmp	r0, #0
 8011568:	f43f af08 	beq.w	801137c <_strtod_l+0x434>
 801156c:	9a06      	ldr	r2, [sp, #24]
 801156e:	9b06      	ldr	r3, [sp, #24]
 8011570:	2a00      	cmp	r2, #0
 8011572:	f1c3 0300 	rsb	r3, r3, #0
 8011576:	bfa8      	it	ge
 8011578:	2300      	movge	r3, #0
 801157a:	930e      	str	r3, [sp, #56]	; 0x38
 801157c:	2400      	movs	r4, #0
 801157e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8011582:	9316      	str	r3, [sp, #88]	; 0x58
 8011584:	46a0      	mov	r8, r4
 8011586:	9b07      	ldr	r3, [sp, #28]
 8011588:	4648      	mov	r0, r9
 801158a:	6859      	ldr	r1, [r3, #4]
 801158c:	f001 fd02 	bl	8012f94 <_Balloc>
 8011590:	9005      	str	r0, [sp, #20]
 8011592:	2800      	cmp	r0, #0
 8011594:	f43f aef6 	beq.w	8011384 <_strtod_l+0x43c>
 8011598:	9b07      	ldr	r3, [sp, #28]
 801159a:	691a      	ldr	r2, [r3, #16]
 801159c:	3202      	adds	r2, #2
 801159e:	f103 010c 	add.w	r1, r3, #12
 80115a2:	0092      	lsls	r2, r2, #2
 80115a4:	300c      	adds	r0, #12
 80115a6:	f7fe fd71 	bl	801008c <memcpy>
 80115aa:	aa1e      	add	r2, sp, #120	; 0x78
 80115ac:	a91d      	add	r1, sp, #116	; 0x74
 80115ae:	ec4b ab10 	vmov	d0, sl, fp
 80115b2:	4648      	mov	r0, r9
 80115b4:	e9cd ab08 	strd	sl, fp, [sp, #32]
 80115b8:	f002 f82e 	bl	8013618 <__d2b>
 80115bc:	901c      	str	r0, [sp, #112]	; 0x70
 80115be:	2800      	cmp	r0, #0
 80115c0:	f43f aee0 	beq.w	8011384 <_strtod_l+0x43c>
 80115c4:	2101      	movs	r1, #1
 80115c6:	4648      	mov	r0, r9
 80115c8:	f001 fdf6 	bl	80131b8 <__i2b>
 80115cc:	4680      	mov	r8, r0
 80115ce:	2800      	cmp	r0, #0
 80115d0:	f43f aed8 	beq.w	8011384 <_strtod_l+0x43c>
 80115d4:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 80115d6:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80115d8:	2e00      	cmp	r6, #0
 80115da:	bfab      	itete	ge
 80115dc:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 80115de:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 80115e0:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 80115e2:	9f0e      	ldrlt	r7, [sp, #56]	; 0x38
 80115e4:	bfac      	ite	ge
 80115e6:	18f7      	addge	r7, r6, r3
 80115e8:	1b9d      	sublt	r5, r3, r6
 80115ea:	9b04      	ldr	r3, [sp, #16]
 80115ec:	1af6      	subs	r6, r6, r3
 80115ee:	4416      	add	r6, r2
 80115f0:	4b63      	ldr	r3, [pc, #396]	; (8011780 <_strtod_l+0x838>)
 80115f2:	3e01      	subs	r6, #1
 80115f4:	429e      	cmp	r6, r3
 80115f6:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80115fa:	f280 80af 	bge.w	801175c <_strtod_l+0x814>
 80115fe:	1b9b      	subs	r3, r3, r6
 8011600:	2b1f      	cmp	r3, #31
 8011602:	eba2 0203 	sub.w	r2, r2, r3
 8011606:	f04f 0101 	mov.w	r1, #1
 801160a:	f300 809b 	bgt.w	8011744 <_strtod_l+0x7fc>
 801160e:	fa01 f303 	lsl.w	r3, r1, r3
 8011612:	930f      	str	r3, [sp, #60]	; 0x3c
 8011614:	2300      	movs	r3, #0
 8011616:	930a      	str	r3, [sp, #40]	; 0x28
 8011618:	18be      	adds	r6, r7, r2
 801161a:	9b04      	ldr	r3, [sp, #16]
 801161c:	42b7      	cmp	r7, r6
 801161e:	4415      	add	r5, r2
 8011620:	441d      	add	r5, r3
 8011622:	463b      	mov	r3, r7
 8011624:	bfa8      	it	ge
 8011626:	4633      	movge	r3, r6
 8011628:	42ab      	cmp	r3, r5
 801162a:	bfa8      	it	ge
 801162c:	462b      	movge	r3, r5
 801162e:	2b00      	cmp	r3, #0
 8011630:	bfc2      	ittt	gt
 8011632:	1af6      	subgt	r6, r6, r3
 8011634:	1aed      	subgt	r5, r5, r3
 8011636:	1aff      	subgt	r7, r7, r3
 8011638:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801163a:	b1bb      	cbz	r3, 801166c <_strtod_l+0x724>
 801163c:	4641      	mov	r1, r8
 801163e:	461a      	mov	r2, r3
 8011640:	4648      	mov	r0, r9
 8011642:	f001 fe59 	bl	80132f8 <__pow5mult>
 8011646:	4680      	mov	r8, r0
 8011648:	2800      	cmp	r0, #0
 801164a:	f43f ae9b 	beq.w	8011384 <_strtod_l+0x43c>
 801164e:	4601      	mov	r1, r0
 8011650:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8011652:	4648      	mov	r0, r9
 8011654:	f001 fdb9 	bl	80131ca <__multiply>
 8011658:	900c      	str	r0, [sp, #48]	; 0x30
 801165a:	2800      	cmp	r0, #0
 801165c:	f43f ae92 	beq.w	8011384 <_strtod_l+0x43c>
 8011660:	991c      	ldr	r1, [sp, #112]	; 0x70
 8011662:	4648      	mov	r0, r9
 8011664:	f001 fcca 	bl	8012ffc <_Bfree>
 8011668:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801166a:	931c      	str	r3, [sp, #112]	; 0x70
 801166c:	2e00      	cmp	r6, #0
 801166e:	dc7a      	bgt.n	8011766 <_strtod_l+0x81e>
 8011670:	9b06      	ldr	r3, [sp, #24]
 8011672:	2b00      	cmp	r3, #0
 8011674:	dd08      	ble.n	8011688 <_strtod_l+0x740>
 8011676:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8011678:	9905      	ldr	r1, [sp, #20]
 801167a:	4648      	mov	r0, r9
 801167c:	f001 fe3c 	bl	80132f8 <__pow5mult>
 8011680:	9005      	str	r0, [sp, #20]
 8011682:	2800      	cmp	r0, #0
 8011684:	f43f ae7e 	beq.w	8011384 <_strtod_l+0x43c>
 8011688:	2d00      	cmp	r5, #0
 801168a:	dd08      	ble.n	801169e <_strtod_l+0x756>
 801168c:	462a      	mov	r2, r5
 801168e:	9905      	ldr	r1, [sp, #20]
 8011690:	4648      	mov	r0, r9
 8011692:	f001 fe7f 	bl	8013394 <__lshift>
 8011696:	9005      	str	r0, [sp, #20]
 8011698:	2800      	cmp	r0, #0
 801169a:	f43f ae73 	beq.w	8011384 <_strtod_l+0x43c>
 801169e:	2f00      	cmp	r7, #0
 80116a0:	dd08      	ble.n	80116b4 <_strtod_l+0x76c>
 80116a2:	4641      	mov	r1, r8
 80116a4:	463a      	mov	r2, r7
 80116a6:	4648      	mov	r0, r9
 80116a8:	f001 fe74 	bl	8013394 <__lshift>
 80116ac:	4680      	mov	r8, r0
 80116ae:	2800      	cmp	r0, #0
 80116b0:	f43f ae68 	beq.w	8011384 <_strtod_l+0x43c>
 80116b4:	9a05      	ldr	r2, [sp, #20]
 80116b6:	991c      	ldr	r1, [sp, #112]	; 0x70
 80116b8:	4648      	mov	r0, r9
 80116ba:	f001 fed9 	bl	8013470 <__mdiff>
 80116be:	4604      	mov	r4, r0
 80116c0:	2800      	cmp	r0, #0
 80116c2:	f43f ae5f 	beq.w	8011384 <_strtod_l+0x43c>
 80116c6:	68c3      	ldr	r3, [r0, #12]
 80116c8:	930c      	str	r3, [sp, #48]	; 0x30
 80116ca:	2300      	movs	r3, #0
 80116cc:	60c3      	str	r3, [r0, #12]
 80116ce:	4641      	mov	r1, r8
 80116d0:	f001 feb4 	bl	801343c <__mcmp>
 80116d4:	2800      	cmp	r0, #0
 80116d6:	da55      	bge.n	8011784 <_strtod_l+0x83c>
 80116d8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80116da:	b9e3      	cbnz	r3, 8011716 <_strtod_l+0x7ce>
 80116dc:	f1ba 0f00 	cmp.w	sl, #0
 80116e0:	d119      	bne.n	8011716 <_strtod_l+0x7ce>
 80116e2:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80116e6:	b9b3      	cbnz	r3, 8011716 <_strtod_l+0x7ce>
 80116e8:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80116ec:	0d1b      	lsrs	r3, r3, #20
 80116ee:	051b      	lsls	r3, r3, #20
 80116f0:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80116f4:	d90f      	bls.n	8011716 <_strtod_l+0x7ce>
 80116f6:	6963      	ldr	r3, [r4, #20]
 80116f8:	b913      	cbnz	r3, 8011700 <_strtod_l+0x7b8>
 80116fa:	6923      	ldr	r3, [r4, #16]
 80116fc:	2b01      	cmp	r3, #1
 80116fe:	dd0a      	ble.n	8011716 <_strtod_l+0x7ce>
 8011700:	4621      	mov	r1, r4
 8011702:	2201      	movs	r2, #1
 8011704:	4648      	mov	r0, r9
 8011706:	f001 fe45 	bl	8013394 <__lshift>
 801170a:	4641      	mov	r1, r8
 801170c:	4604      	mov	r4, r0
 801170e:	f001 fe95 	bl	801343c <__mcmp>
 8011712:	2800      	cmp	r0, #0
 8011714:	dc67      	bgt.n	80117e6 <_strtod_l+0x89e>
 8011716:	9b04      	ldr	r3, [sp, #16]
 8011718:	2b00      	cmp	r3, #0
 801171a:	d171      	bne.n	8011800 <_strtod_l+0x8b8>
 801171c:	e63d      	b.n	801139a <_strtod_l+0x452>
 801171e:	f018 0f01 	tst.w	r8, #1
 8011722:	d004      	beq.n	801172e <_strtod_l+0x7e6>
 8011724:	e9d5 2300 	ldrd	r2, r3, [r5]
 8011728:	f7ee ff66 	bl	80005f8 <__aeabi_dmul>
 801172c:	2301      	movs	r3, #1
 801172e:	ea4f 0868 	mov.w	r8, r8, asr #1
 8011732:	3508      	adds	r5, #8
 8011734:	e6e5      	b.n	8011502 <_strtod_l+0x5ba>
 8011736:	f04f 32ff 	mov.w	r2, #4294967295
 801173a:	fa02 f303 	lsl.w	r3, r2, r3
 801173e:	ea03 0a0a 	and.w	sl, r3, sl
 8011742:	e6ff      	b.n	8011544 <_strtod_l+0x5fc>
 8011744:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 8011748:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 801174c:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 8011750:	36e2      	adds	r6, #226	; 0xe2
 8011752:	fa01 f306 	lsl.w	r3, r1, r6
 8011756:	930a      	str	r3, [sp, #40]	; 0x28
 8011758:	910f      	str	r1, [sp, #60]	; 0x3c
 801175a:	e75d      	b.n	8011618 <_strtod_l+0x6d0>
 801175c:	2300      	movs	r3, #0
 801175e:	930a      	str	r3, [sp, #40]	; 0x28
 8011760:	2301      	movs	r3, #1
 8011762:	930f      	str	r3, [sp, #60]	; 0x3c
 8011764:	e758      	b.n	8011618 <_strtod_l+0x6d0>
 8011766:	4632      	mov	r2, r6
 8011768:	991c      	ldr	r1, [sp, #112]	; 0x70
 801176a:	4648      	mov	r0, r9
 801176c:	f001 fe12 	bl	8013394 <__lshift>
 8011770:	901c      	str	r0, [sp, #112]	; 0x70
 8011772:	2800      	cmp	r0, #0
 8011774:	f47f af7c 	bne.w	8011670 <_strtod_l+0x728>
 8011778:	e604      	b.n	8011384 <_strtod_l+0x43c>
 801177a:	bf00      	nop
 801177c:	08015a60 	.word	0x08015a60
 8011780:	fffffc02 	.word	0xfffffc02
 8011784:	465d      	mov	r5, fp
 8011786:	f040 8086 	bne.w	8011896 <_strtod_l+0x94e>
 801178a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801178c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8011790:	b32a      	cbz	r2, 80117de <_strtod_l+0x896>
 8011792:	4aaf      	ldr	r2, [pc, #700]	; (8011a50 <_strtod_l+0xb08>)
 8011794:	4293      	cmp	r3, r2
 8011796:	d153      	bne.n	8011840 <_strtod_l+0x8f8>
 8011798:	9b04      	ldr	r3, [sp, #16]
 801179a:	4650      	mov	r0, sl
 801179c:	b1d3      	cbz	r3, 80117d4 <_strtod_l+0x88c>
 801179e:	4aad      	ldr	r2, [pc, #692]	; (8011a54 <_strtod_l+0xb0c>)
 80117a0:	402a      	ands	r2, r5
 80117a2:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 80117a6:	f04f 31ff 	mov.w	r1, #4294967295
 80117aa:	d816      	bhi.n	80117da <_strtod_l+0x892>
 80117ac:	0d12      	lsrs	r2, r2, #20
 80117ae:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 80117b2:	fa01 f303 	lsl.w	r3, r1, r3
 80117b6:	4298      	cmp	r0, r3
 80117b8:	d142      	bne.n	8011840 <_strtod_l+0x8f8>
 80117ba:	4ba7      	ldr	r3, [pc, #668]	; (8011a58 <_strtod_l+0xb10>)
 80117bc:	429d      	cmp	r5, r3
 80117be:	d102      	bne.n	80117c6 <_strtod_l+0x87e>
 80117c0:	3001      	adds	r0, #1
 80117c2:	f43f addf 	beq.w	8011384 <_strtod_l+0x43c>
 80117c6:	4ba3      	ldr	r3, [pc, #652]	; (8011a54 <_strtod_l+0xb0c>)
 80117c8:	402b      	ands	r3, r5
 80117ca:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 80117ce:	f04f 0a00 	mov.w	sl, #0
 80117d2:	e7a0      	b.n	8011716 <_strtod_l+0x7ce>
 80117d4:	f04f 33ff 	mov.w	r3, #4294967295
 80117d8:	e7ed      	b.n	80117b6 <_strtod_l+0x86e>
 80117da:	460b      	mov	r3, r1
 80117dc:	e7eb      	b.n	80117b6 <_strtod_l+0x86e>
 80117de:	bb7b      	cbnz	r3, 8011840 <_strtod_l+0x8f8>
 80117e0:	f1ba 0f00 	cmp.w	sl, #0
 80117e4:	d12c      	bne.n	8011840 <_strtod_l+0x8f8>
 80117e6:	9904      	ldr	r1, [sp, #16]
 80117e8:	4a9a      	ldr	r2, [pc, #616]	; (8011a54 <_strtod_l+0xb0c>)
 80117ea:	465b      	mov	r3, fp
 80117ec:	b1f1      	cbz	r1, 801182c <_strtod_l+0x8e4>
 80117ee:	ea02 010b 	and.w	r1, r2, fp
 80117f2:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 80117f6:	dc19      	bgt.n	801182c <_strtod_l+0x8e4>
 80117f8:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80117fc:	f77f ae5b 	ble.w	80114b6 <_strtod_l+0x56e>
 8011800:	4a96      	ldr	r2, [pc, #600]	; (8011a5c <_strtod_l+0xb14>)
 8011802:	2300      	movs	r3, #0
 8011804:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 8011808:	4650      	mov	r0, sl
 801180a:	4659      	mov	r1, fp
 801180c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8011810:	f7ee fef2 	bl	80005f8 <__aeabi_dmul>
 8011814:	4682      	mov	sl, r0
 8011816:	468b      	mov	fp, r1
 8011818:	2900      	cmp	r1, #0
 801181a:	f47f adbe 	bne.w	801139a <_strtod_l+0x452>
 801181e:	2800      	cmp	r0, #0
 8011820:	f47f adbb 	bne.w	801139a <_strtod_l+0x452>
 8011824:	2322      	movs	r3, #34	; 0x22
 8011826:	f8c9 3000 	str.w	r3, [r9]
 801182a:	e5b6      	b.n	801139a <_strtod_l+0x452>
 801182c:	4013      	ands	r3, r2
 801182e:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8011832:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8011836:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 801183a:	f04f 3aff 	mov.w	sl, #4294967295
 801183e:	e76a      	b.n	8011716 <_strtod_l+0x7ce>
 8011840:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011842:	b193      	cbz	r3, 801186a <_strtod_l+0x922>
 8011844:	422b      	tst	r3, r5
 8011846:	f43f af66 	beq.w	8011716 <_strtod_l+0x7ce>
 801184a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801184c:	9a04      	ldr	r2, [sp, #16]
 801184e:	4650      	mov	r0, sl
 8011850:	4659      	mov	r1, fp
 8011852:	b173      	cbz	r3, 8011872 <_strtod_l+0x92a>
 8011854:	f7ff fb5c 	bl	8010f10 <sulp>
 8011858:	4602      	mov	r2, r0
 801185a:	460b      	mov	r3, r1
 801185c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8011860:	f7ee fd14 	bl	800028c <__adddf3>
 8011864:	4682      	mov	sl, r0
 8011866:	468b      	mov	fp, r1
 8011868:	e755      	b.n	8011716 <_strtod_l+0x7ce>
 801186a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801186c:	ea13 0f0a 	tst.w	r3, sl
 8011870:	e7e9      	b.n	8011846 <_strtod_l+0x8fe>
 8011872:	f7ff fb4d 	bl	8010f10 <sulp>
 8011876:	4602      	mov	r2, r0
 8011878:	460b      	mov	r3, r1
 801187a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 801187e:	f7ee fd03 	bl	8000288 <__aeabi_dsub>
 8011882:	2200      	movs	r2, #0
 8011884:	2300      	movs	r3, #0
 8011886:	4682      	mov	sl, r0
 8011888:	468b      	mov	fp, r1
 801188a:	f7ef f91d 	bl	8000ac8 <__aeabi_dcmpeq>
 801188e:	2800      	cmp	r0, #0
 8011890:	f47f ae11 	bne.w	80114b6 <_strtod_l+0x56e>
 8011894:	e73f      	b.n	8011716 <_strtod_l+0x7ce>
 8011896:	4641      	mov	r1, r8
 8011898:	4620      	mov	r0, r4
 801189a:	f001 ff0c 	bl	80136b6 <__ratio>
 801189e:	ec57 6b10 	vmov	r6, r7, d0
 80118a2:	2200      	movs	r2, #0
 80118a4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80118a8:	ee10 0a10 	vmov	r0, s0
 80118ac:	4639      	mov	r1, r7
 80118ae:	f7ef f91f 	bl	8000af0 <__aeabi_dcmple>
 80118b2:	2800      	cmp	r0, #0
 80118b4:	d077      	beq.n	80119a6 <_strtod_l+0xa5e>
 80118b6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80118b8:	2b00      	cmp	r3, #0
 80118ba:	d04a      	beq.n	8011952 <_strtod_l+0xa0a>
 80118bc:	4b68      	ldr	r3, [pc, #416]	; (8011a60 <_strtod_l+0xb18>)
 80118be:	2200      	movs	r2, #0
 80118c0:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80118c4:	4f66      	ldr	r7, [pc, #408]	; (8011a60 <_strtod_l+0xb18>)
 80118c6:	2600      	movs	r6, #0
 80118c8:	4b62      	ldr	r3, [pc, #392]	; (8011a54 <_strtod_l+0xb0c>)
 80118ca:	402b      	ands	r3, r5
 80118cc:	930f      	str	r3, [sp, #60]	; 0x3c
 80118ce:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80118d0:	4b64      	ldr	r3, [pc, #400]	; (8011a64 <_strtod_l+0xb1c>)
 80118d2:	429a      	cmp	r2, r3
 80118d4:	f040 80ce 	bne.w	8011a74 <_strtod_l+0xb2c>
 80118d8:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80118dc:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80118e0:	f1a5 7b54 	sub.w	fp, r5, #55574528	; 0x3500000
 80118e4:	ec4b ab10 	vmov	d0, sl, fp
 80118e8:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 80118ec:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80118f0:	f001 fe1c 	bl	801352c <__ulp>
 80118f4:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80118f8:	ec53 2b10 	vmov	r2, r3, d0
 80118fc:	f7ee fe7c 	bl	80005f8 <__aeabi_dmul>
 8011900:	4652      	mov	r2, sl
 8011902:	465b      	mov	r3, fp
 8011904:	f7ee fcc2 	bl	800028c <__adddf3>
 8011908:	460b      	mov	r3, r1
 801190a:	4952      	ldr	r1, [pc, #328]	; (8011a54 <_strtod_l+0xb0c>)
 801190c:	4a56      	ldr	r2, [pc, #344]	; (8011a68 <_strtod_l+0xb20>)
 801190e:	4019      	ands	r1, r3
 8011910:	4291      	cmp	r1, r2
 8011912:	4682      	mov	sl, r0
 8011914:	d95b      	bls.n	80119ce <_strtod_l+0xa86>
 8011916:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011918:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 801191c:	4293      	cmp	r3, r2
 801191e:	d103      	bne.n	8011928 <_strtod_l+0x9e0>
 8011920:	9b08      	ldr	r3, [sp, #32]
 8011922:	3301      	adds	r3, #1
 8011924:	f43f ad2e 	beq.w	8011384 <_strtod_l+0x43c>
 8011928:	f8df b12c 	ldr.w	fp, [pc, #300]	; 8011a58 <_strtod_l+0xb10>
 801192c:	f04f 3aff 	mov.w	sl, #4294967295
 8011930:	991c      	ldr	r1, [sp, #112]	; 0x70
 8011932:	4648      	mov	r0, r9
 8011934:	f001 fb62 	bl	8012ffc <_Bfree>
 8011938:	9905      	ldr	r1, [sp, #20]
 801193a:	4648      	mov	r0, r9
 801193c:	f001 fb5e 	bl	8012ffc <_Bfree>
 8011940:	4641      	mov	r1, r8
 8011942:	4648      	mov	r0, r9
 8011944:	f001 fb5a 	bl	8012ffc <_Bfree>
 8011948:	4621      	mov	r1, r4
 801194a:	4648      	mov	r0, r9
 801194c:	f001 fb56 	bl	8012ffc <_Bfree>
 8011950:	e619      	b.n	8011586 <_strtod_l+0x63e>
 8011952:	f1ba 0f00 	cmp.w	sl, #0
 8011956:	d11a      	bne.n	801198e <_strtod_l+0xa46>
 8011958:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801195c:	b9eb      	cbnz	r3, 801199a <_strtod_l+0xa52>
 801195e:	2200      	movs	r2, #0
 8011960:	4b3f      	ldr	r3, [pc, #252]	; (8011a60 <_strtod_l+0xb18>)
 8011962:	4630      	mov	r0, r6
 8011964:	4639      	mov	r1, r7
 8011966:	f7ef f8b9 	bl	8000adc <__aeabi_dcmplt>
 801196a:	b9c8      	cbnz	r0, 80119a0 <_strtod_l+0xa58>
 801196c:	4630      	mov	r0, r6
 801196e:	4639      	mov	r1, r7
 8011970:	2200      	movs	r2, #0
 8011972:	4b3e      	ldr	r3, [pc, #248]	; (8011a6c <_strtod_l+0xb24>)
 8011974:	f7ee fe40 	bl	80005f8 <__aeabi_dmul>
 8011978:	4606      	mov	r6, r0
 801197a:	460f      	mov	r7, r1
 801197c:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8011980:	9618      	str	r6, [sp, #96]	; 0x60
 8011982:	9319      	str	r3, [sp, #100]	; 0x64
 8011984:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 8011988:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 801198c:	e79c      	b.n	80118c8 <_strtod_l+0x980>
 801198e:	f1ba 0f01 	cmp.w	sl, #1
 8011992:	d102      	bne.n	801199a <_strtod_l+0xa52>
 8011994:	2d00      	cmp	r5, #0
 8011996:	f43f ad8e 	beq.w	80114b6 <_strtod_l+0x56e>
 801199a:	2200      	movs	r2, #0
 801199c:	4b34      	ldr	r3, [pc, #208]	; (8011a70 <_strtod_l+0xb28>)
 801199e:	e78f      	b.n	80118c0 <_strtod_l+0x978>
 80119a0:	2600      	movs	r6, #0
 80119a2:	4f32      	ldr	r7, [pc, #200]	; (8011a6c <_strtod_l+0xb24>)
 80119a4:	e7ea      	b.n	801197c <_strtod_l+0xa34>
 80119a6:	4b31      	ldr	r3, [pc, #196]	; (8011a6c <_strtod_l+0xb24>)
 80119a8:	4630      	mov	r0, r6
 80119aa:	4639      	mov	r1, r7
 80119ac:	2200      	movs	r2, #0
 80119ae:	f7ee fe23 	bl	80005f8 <__aeabi_dmul>
 80119b2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80119b4:	4606      	mov	r6, r0
 80119b6:	460f      	mov	r7, r1
 80119b8:	b933      	cbnz	r3, 80119c8 <_strtod_l+0xa80>
 80119ba:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80119be:	9010      	str	r0, [sp, #64]	; 0x40
 80119c0:	9311      	str	r3, [sp, #68]	; 0x44
 80119c2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80119c6:	e7df      	b.n	8011988 <_strtod_l+0xa40>
 80119c8:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 80119cc:	e7f9      	b.n	80119c2 <_strtod_l+0xa7a>
 80119ce:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 80119d2:	9b04      	ldr	r3, [sp, #16]
 80119d4:	2b00      	cmp	r3, #0
 80119d6:	d1ab      	bne.n	8011930 <_strtod_l+0x9e8>
 80119d8:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80119dc:	0d1b      	lsrs	r3, r3, #20
 80119de:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80119e0:	051b      	lsls	r3, r3, #20
 80119e2:	429a      	cmp	r2, r3
 80119e4:	465d      	mov	r5, fp
 80119e6:	d1a3      	bne.n	8011930 <_strtod_l+0x9e8>
 80119e8:	4639      	mov	r1, r7
 80119ea:	4630      	mov	r0, r6
 80119ec:	f7ef f8b4 	bl	8000b58 <__aeabi_d2iz>
 80119f0:	f7ee fd98 	bl	8000524 <__aeabi_i2d>
 80119f4:	460b      	mov	r3, r1
 80119f6:	4602      	mov	r2, r0
 80119f8:	4639      	mov	r1, r7
 80119fa:	4630      	mov	r0, r6
 80119fc:	f7ee fc44 	bl	8000288 <__aeabi_dsub>
 8011a00:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8011a02:	4606      	mov	r6, r0
 8011a04:	460f      	mov	r7, r1
 8011a06:	b933      	cbnz	r3, 8011a16 <_strtod_l+0xace>
 8011a08:	f1ba 0f00 	cmp.w	sl, #0
 8011a0c:	d103      	bne.n	8011a16 <_strtod_l+0xace>
 8011a0e:	f3cb 0513 	ubfx	r5, fp, #0, #20
 8011a12:	2d00      	cmp	r5, #0
 8011a14:	d06d      	beq.n	8011af2 <_strtod_l+0xbaa>
 8011a16:	a30a      	add	r3, pc, #40	; (adr r3, 8011a40 <_strtod_l+0xaf8>)
 8011a18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011a1c:	4630      	mov	r0, r6
 8011a1e:	4639      	mov	r1, r7
 8011a20:	f7ef f85c 	bl	8000adc <__aeabi_dcmplt>
 8011a24:	2800      	cmp	r0, #0
 8011a26:	f47f acb8 	bne.w	801139a <_strtod_l+0x452>
 8011a2a:	a307      	add	r3, pc, #28	; (adr r3, 8011a48 <_strtod_l+0xb00>)
 8011a2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011a30:	4630      	mov	r0, r6
 8011a32:	4639      	mov	r1, r7
 8011a34:	f7ef f870 	bl	8000b18 <__aeabi_dcmpgt>
 8011a38:	2800      	cmp	r0, #0
 8011a3a:	f43f af79 	beq.w	8011930 <_strtod_l+0x9e8>
 8011a3e:	e4ac      	b.n	801139a <_strtod_l+0x452>
 8011a40:	94a03595 	.word	0x94a03595
 8011a44:	3fdfffff 	.word	0x3fdfffff
 8011a48:	35afe535 	.word	0x35afe535
 8011a4c:	3fe00000 	.word	0x3fe00000
 8011a50:	000fffff 	.word	0x000fffff
 8011a54:	7ff00000 	.word	0x7ff00000
 8011a58:	7fefffff 	.word	0x7fefffff
 8011a5c:	39500000 	.word	0x39500000
 8011a60:	3ff00000 	.word	0x3ff00000
 8011a64:	7fe00000 	.word	0x7fe00000
 8011a68:	7c9fffff 	.word	0x7c9fffff
 8011a6c:	3fe00000 	.word	0x3fe00000
 8011a70:	bff00000 	.word	0xbff00000
 8011a74:	9b04      	ldr	r3, [sp, #16]
 8011a76:	b333      	cbz	r3, 8011ac6 <_strtod_l+0xb7e>
 8011a78:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8011a7a:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8011a7e:	d822      	bhi.n	8011ac6 <_strtod_l+0xb7e>
 8011a80:	a327      	add	r3, pc, #156	; (adr r3, 8011b20 <_strtod_l+0xbd8>)
 8011a82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011a86:	4630      	mov	r0, r6
 8011a88:	4639      	mov	r1, r7
 8011a8a:	f7ef f831 	bl	8000af0 <__aeabi_dcmple>
 8011a8e:	b1a0      	cbz	r0, 8011aba <_strtod_l+0xb72>
 8011a90:	4639      	mov	r1, r7
 8011a92:	4630      	mov	r0, r6
 8011a94:	f7ef f888 	bl	8000ba8 <__aeabi_d2uiz>
 8011a98:	2800      	cmp	r0, #0
 8011a9a:	bf08      	it	eq
 8011a9c:	2001      	moveq	r0, #1
 8011a9e:	f7ee fd31 	bl	8000504 <__aeabi_ui2d>
 8011aa2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8011aa4:	4606      	mov	r6, r0
 8011aa6:	460f      	mov	r7, r1
 8011aa8:	bb03      	cbnz	r3, 8011aec <_strtod_l+0xba4>
 8011aaa:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8011aae:	9012      	str	r0, [sp, #72]	; 0x48
 8011ab0:	9313      	str	r3, [sp, #76]	; 0x4c
 8011ab2:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 8011ab6:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8011aba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011abc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8011abe:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8011ac2:	1a9b      	subs	r3, r3, r2
 8011ac4:	930b      	str	r3, [sp, #44]	; 0x2c
 8011ac6:	ed9d 0b08 	vldr	d0, [sp, #32]
 8011aca:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
 8011ace:	f001 fd2d 	bl	801352c <__ulp>
 8011ad2:	4650      	mov	r0, sl
 8011ad4:	ec53 2b10 	vmov	r2, r3, d0
 8011ad8:	4659      	mov	r1, fp
 8011ada:	f7ee fd8d 	bl	80005f8 <__aeabi_dmul>
 8011ade:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8011ae2:	f7ee fbd3 	bl	800028c <__adddf3>
 8011ae6:	4682      	mov	sl, r0
 8011ae8:	468b      	mov	fp, r1
 8011aea:	e772      	b.n	80119d2 <_strtod_l+0xa8a>
 8011aec:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48
 8011af0:	e7df      	b.n	8011ab2 <_strtod_l+0xb6a>
 8011af2:	a30d      	add	r3, pc, #52	; (adr r3, 8011b28 <_strtod_l+0xbe0>)
 8011af4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011af8:	f7ee fff0 	bl	8000adc <__aeabi_dcmplt>
 8011afc:	e79c      	b.n	8011a38 <_strtod_l+0xaf0>
 8011afe:	2300      	movs	r3, #0
 8011b00:	930d      	str	r3, [sp, #52]	; 0x34
 8011b02:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8011b04:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8011b06:	6013      	str	r3, [r2, #0]
 8011b08:	f7ff ba61 	b.w	8010fce <_strtod_l+0x86>
 8011b0c:	2b65      	cmp	r3, #101	; 0x65
 8011b0e:	f04f 0200 	mov.w	r2, #0
 8011b12:	f43f ab4e 	beq.w	80111b2 <_strtod_l+0x26a>
 8011b16:	2101      	movs	r1, #1
 8011b18:	4614      	mov	r4, r2
 8011b1a:	9104      	str	r1, [sp, #16]
 8011b1c:	f7ff bacb 	b.w	80110b6 <_strtod_l+0x16e>
 8011b20:	ffc00000 	.word	0xffc00000
 8011b24:	41dfffff 	.word	0x41dfffff
 8011b28:	94a03595 	.word	0x94a03595
 8011b2c:	3fcfffff 	.word	0x3fcfffff

08011b30 <_strtod_r>:
 8011b30:	4b05      	ldr	r3, [pc, #20]	; (8011b48 <_strtod_r+0x18>)
 8011b32:	681b      	ldr	r3, [r3, #0]
 8011b34:	b410      	push	{r4}
 8011b36:	6a1b      	ldr	r3, [r3, #32]
 8011b38:	4c04      	ldr	r4, [pc, #16]	; (8011b4c <_strtod_r+0x1c>)
 8011b3a:	2b00      	cmp	r3, #0
 8011b3c:	bf08      	it	eq
 8011b3e:	4623      	moveq	r3, r4
 8011b40:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011b44:	f7ff ba00 	b.w	8010f48 <_strtod_l>
 8011b48:	2000017c 	.word	0x2000017c
 8011b4c:	200001e0 	.word	0x200001e0

08011b50 <_strtol_l.isra.0>:
 8011b50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011b54:	4680      	mov	r8, r0
 8011b56:	4689      	mov	r9, r1
 8011b58:	4692      	mov	sl, r2
 8011b5a:	461e      	mov	r6, r3
 8011b5c:	460f      	mov	r7, r1
 8011b5e:	463d      	mov	r5, r7
 8011b60:	9808      	ldr	r0, [sp, #32]
 8011b62:	f815 4b01 	ldrb.w	r4, [r5], #1
 8011b66:	f001 f9ed 	bl	8012f44 <__locale_ctype_ptr_l>
 8011b6a:	4420      	add	r0, r4
 8011b6c:	7843      	ldrb	r3, [r0, #1]
 8011b6e:	f013 0308 	ands.w	r3, r3, #8
 8011b72:	d132      	bne.n	8011bda <_strtol_l.isra.0+0x8a>
 8011b74:	2c2d      	cmp	r4, #45	; 0x2d
 8011b76:	d132      	bne.n	8011bde <_strtol_l.isra.0+0x8e>
 8011b78:	787c      	ldrb	r4, [r7, #1]
 8011b7a:	1cbd      	adds	r5, r7, #2
 8011b7c:	2201      	movs	r2, #1
 8011b7e:	2e00      	cmp	r6, #0
 8011b80:	d05d      	beq.n	8011c3e <_strtol_l.isra.0+0xee>
 8011b82:	2e10      	cmp	r6, #16
 8011b84:	d109      	bne.n	8011b9a <_strtol_l.isra.0+0x4a>
 8011b86:	2c30      	cmp	r4, #48	; 0x30
 8011b88:	d107      	bne.n	8011b9a <_strtol_l.isra.0+0x4a>
 8011b8a:	782b      	ldrb	r3, [r5, #0]
 8011b8c:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8011b90:	2b58      	cmp	r3, #88	; 0x58
 8011b92:	d14f      	bne.n	8011c34 <_strtol_l.isra.0+0xe4>
 8011b94:	786c      	ldrb	r4, [r5, #1]
 8011b96:	2610      	movs	r6, #16
 8011b98:	3502      	adds	r5, #2
 8011b9a:	2a00      	cmp	r2, #0
 8011b9c:	bf14      	ite	ne
 8011b9e:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 8011ba2:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 8011ba6:	2700      	movs	r7, #0
 8011ba8:	fbb1 fcf6 	udiv	ip, r1, r6
 8011bac:	4638      	mov	r0, r7
 8011bae:	fb06 1e1c 	mls	lr, r6, ip, r1
 8011bb2:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8011bb6:	2b09      	cmp	r3, #9
 8011bb8:	d817      	bhi.n	8011bea <_strtol_l.isra.0+0x9a>
 8011bba:	461c      	mov	r4, r3
 8011bbc:	42a6      	cmp	r6, r4
 8011bbe:	dd23      	ble.n	8011c08 <_strtol_l.isra.0+0xb8>
 8011bc0:	1c7b      	adds	r3, r7, #1
 8011bc2:	d007      	beq.n	8011bd4 <_strtol_l.isra.0+0x84>
 8011bc4:	4584      	cmp	ip, r0
 8011bc6:	d31c      	bcc.n	8011c02 <_strtol_l.isra.0+0xb2>
 8011bc8:	d101      	bne.n	8011bce <_strtol_l.isra.0+0x7e>
 8011bca:	45a6      	cmp	lr, r4
 8011bcc:	db19      	blt.n	8011c02 <_strtol_l.isra.0+0xb2>
 8011bce:	fb00 4006 	mla	r0, r0, r6, r4
 8011bd2:	2701      	movs	r7, #1
 8011bd4:	f815 4b01 	ldrb.w	r4, [r5], #1
 8011bd8:	e7eb      	b.n	8011bb2 <_strtol_l.isra.0+0x62>
 8011bda:	462f      	mov	r7, r5
 8011bdc:	e7bf      	b.n	8011b5e <_strtol_l.isra.0+0xe>
 8011bde:	2c2b      	cmp	r4, #43	; 0x2b
 8011be0:	bf04      	itt	eq
 8011be2:	1cbd      	addeq	r5, r7, #2
 8011be4:	787c      	ldrbeq	r4, [r7, #1]
 8011be6:	461a      	mov	r2, r3
 8011be8:	e7c9      	b.n	8011b7e <_strtol_l.isra.0+0x2e>
 8011bea:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 8011bee:	2b19      	cmp	r3, #25
 8011bf0:	d801      	bhi.n	8011bf6 <_strtol_l.isra.0+0xa6>
 8011bf2:	3c37      	subs	r4, #55	; 0x37
 8011bf4:	e7e2      	b.n	8011bbc <_strtol_l.isra.0+0x6c>
 8011bf6:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8011bfa:	2b19      	cmp	r3, #25
 8011bfc:	d804      	bhi.n	8011c08 <_strtol_l.isra.0+0xb8>
 8011bfe:	3c57      	subs	r4, #87	; 0x57
 8011c00:	e7dc      	b.n	8011bbc <_strtol_l.isra.0+0x6c>
 8011c02:	f04f 37ff 	mov.w	r7, #4294967295
 8011c06:	e7e5      	b.n	8011bd4 <_strtol_l.isra.0+0x84>
 8011c08:	1c7b      	adds	r3, r7, #1
 8011c0a:	d108      	bne.n	8011c1e <_strtol_l.isra.0+0xce>
 8011c0c:	2322      	movs	r3, #34	; 0x22
 8011c0e:	f8c8 3000 	str.w	r3, [r8]
 8011c12:	4608      	mov	r0, r1
 8011c14:	f1ba 0f00 	cmp.w	sl, #0
 8011c18:	d107      	bne.n	8011c2a <_strtol_l.isra.0+0xda>
 8011c1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011c1e:	b102      	cbz	r2, 8011c22 <_strtol_l.isra.0+0xd2>
 8011c20:	4240      	negs	r0, r0
 8011c22:	f1ba 0f00 	cmp.w	sl, #0
 8011c26:	d0f8      	beq.n	8011c1a <_strtol_l.isra.0+0xca>
 8011c28:	b10f      	cbz	r7, 8011c2e <_strtol_l.isra.0+0xde>
 8011c2a:	f105 39ff 	add.w	r9, r5, #4294967295
 8011c2e:	f8ca 9000 	str.w	r9, [sl]
 8011c32:	e7f2      	b.n	8011c1a <_strtol_l.isra.0+0xca>
 8011c34:	2430      	movs	r4, #48	; 0x30
 8011c36:	2e00      	cmp	r6, #0
 8011c38:	d1af      	bne.n	8011b9a <_strtol_l.isra.0+0x4a>
 8011c3a:	2608      	movs	r6, #8
 8011c3c:	e7ad      	b.n	8011b9a <_strtol_l.isra.0+0x4a>
 8011c3e:	2c30      	cmp	r4, #48	; 0x30
 8011c40:	d0a3      	beq.n	8011b8a <_strtol_l.isra.0+0x3a>
 8011c42:	260a      	movs	r6, #10
 8011c44:	e7a9      	b.n	8011b9a <_strtol_l.isra.0+0x4a>
	...

08011c48 <_strtol_r>:
 8011c48:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8011c4a:	4c06      	ldr	r4, [pc, #24]	; (8011c64 <_strtol_r+0x1c>)
 8011c4c:	4d06      	ldr	r5, [pc, #24]	; (8011c68 <_strtol_r+0x20>)
 8011c4e:	6824      	ldr	r4, [r4, #0]
 8011c50:	6a24      	ldr	r4, [r4, #32]
 8011c52:	2c00      	cmp	r4, #0
 8011c54:	bf08      	it	eq
 8011c56:	462c      	moveq	r4, r5
 8011c58:	9400      	str	r4, [sp, #0]
 8011c5a:	f7ff ff79 	bl	8011b50 <_strtol_l.isra.0>
 8011c5e:	b003      	add	sp, #12
 8011c60:	bd30      	pop	{r4, r5, pc}
 8011c62:	bf00      	nop
 8011c64:	2000017c 	.word	0x2000017c
 8011c68:	200001e0 	.word	0x200001e0

08011c6c <quorem>:
 8011c6c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011c70:	6903      	ldr	r3, [r0, #16]
 8011c72:	690c      	ldr	r4, [r1, #16]
 8011c74:	42a3      	cmp	r3, r4
 8011c76:	4680      	mov	r8, r0
 8011c78:	f2c0 8082 	blt.w	8011d80 <quorem+0x114>
 8011c7c:	3c01      	subs	r4, #1
 8011c7e:	f101 0714 	add.w	r7, r1, #20
 8011c82:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8011c86:	f100 0614 	add.w	r6, r0, #20
 8011c8a:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8011c8e:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8011c92:	eb06 030c 	add.w	r3, r6, ip
 8011c96:	3501      	adds	r5, #1
 8011c98:	eb07 090c 	add.w	r9, r7, ip
 8011c9c:	9301      	str	r3, [sp, #4]
 8011c9e:	fbb0 f5f5 	udiv	r5, r0, r5
 8011ca2:	b395      	cbz	r5, 8011d0a <quorem+0x9e>
 8011ca4:	f04f 0a00 	mov.w	sl, #0
 8011ca8:	4638      	mov	r0, r7
 8011caa:	46b6      	mov	lr, r6
 8011cac:	46d3      	mov	fp, sl
 8011cae:	f850 2b04 	ldr.w	r2, [r0], #4
 8011cb2:	b293      	uxth	r3, r2
 8011cb4:	fb05 a303 	mla	r3, r5, r3, sl
 8011cb8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8011cbc:	b29b      	uxth	r3, r3
 8011cbe:	ebab 0303 	sub.w	r3, fp, r3
 8011cc2:	0c12      	lsrs	r2, r2, #16
 8011cc4:	f8de b000 	ldr.w	fp, [lr]
 8011cc8:	fb05 a202 	mla	r2, r5, r2, sl
 8011ccc:	fa13 f38b 	uxtah	r3, r3, fp
 8011cd0:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8011cd4:	fa1f fb82 	uxth.w	fp, r2
 8011cd8:	f8de 2000 	ldr.w	r2, [lr]
 8011cdc:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8011ce0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8011ce4:	b29b      	uxth	r3, r3
 8011ce6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8011cea:	4581      	cmp	r9, r0
 8011cec:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8011cf0:	f84e 3b04 	str.w	r3, [lr], #4
 8011cf4:	d2db      	bcs.n	8011cae <quorem+0x42>
 8011cf6:	f856 300c 	ldr.w	r3, [r6, ip]
 8011cfa:	b933      	cbnz	r3, 8011d0a <quorem+0x9e>
 8011cfc:	9b01      	ldr	r3, [sp, #4]
 8011cfe:	3b04      	subs	r3, #4
 8011d00:	429e      	cmp	r6, r3
 8011d02:	461a      	mov	r2, r3
 8011d04:	d330      	bcc.n	8011d68 <quorem+0xfc>
 8011d06:	f8c8 4010 	str.w	r4, [r8, #16]
 8011d0a:	4640      	mov	r0, r8
 8011d0c:	f001 fb96 	bl	801343c <__mcmp>
 8011d10:	2800      	cmp	r0, #0
 8011d12:	db25      	blt.n	8011d60 <quorem+0xf4>
 8011d14:	3501      	adds	r5, #1
 8011d16:	4630      	mov	r0, r6
 8011d18:	f04f 0c00 	mov.w	ip, #0
 8011d1c:	f857 2b04 	ldr.w	r2, [r7], #4
 8011d20:	f8d0 e000 	ldr.w	lr, [r0]
 8011d24:	b293      	uxth	r3, r2
 8011d26:	ebac 0303 	sub.w	r3, ip, r3
 8011d2a:	0c12      	lsrs	r2, r2, #16
 8011d2c:	fa13 f38e 	uxtah	r3, r3, lr
 8011d30:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8011d34:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8011d38:	b29b      	uxth	r3, r3
 8011d3a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8011d3e:	45b9      	cmp	r9, r7
 8011d40:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8011d44:	f840 3b04 	str.w	r3, [r0], #4
 8011d48:	d2e8      	bcs.n	8011d1c <quorem+0xb0>
 8011d4a:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8011d4e:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8011d52:	b92a      	cbnz	r2, 8011d60 <quorem+0xf4>
 8011d54:	3b04      	subs	r3, #4
 8011d56:	429e      	cmp	r6, r3
 8011d58:	461a      	mov	r2, r3
 8011d5a:	d30b      	bcc.n	8011d74 <quorem+0x108>
 8011d5c:	f8c8 4010 	str.w	r4, [r8, #16]
 8011d60:	4628      	mov	r0, r5
 8011d62:	b003      	add	sp, #12
 8011d64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011d68:	6812      	ldr	r2, [r2, #0]
 8011d6a:	3b04      	subs	r3, #4
 8011d6c:	2a00      	cmp	r2, #0
 8011d6e:	d1ca      	bne.n	8011d06 <quorem+0x9a>
 8011d70:	3c01      	subs	r4, #1
 8011d72:	e7c5      	b.n	8011d00 <quorem+0x94>
 8011d74:	6812      	ldr	r2, [r2, #0]
 8011d76:	3b04      	subs	r3, #4
 8011d78:	2a00      	cmp	r2, #0
 8011d7a:	d1ef      	bne.n	8011d5c <quorem+0xf0>
 8011d7c:	3c01      	subs	r4, #1
 8011d7e:	e7ea      	b.n	8011d56 <quorem+0xea>
 8011d80:	2000      	movs	r0, #0
 8011d82:	e7ee      	b.n	8011d62 <quorem+0xf6>
 8011d84:	0000      	movs	r0, r0
	...

08011d88 <_dtoa_r>:
 8011d88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011d8c:	ec57 6b10 	vmov	r6, r7, d0
 8011d90:	b097      	sub	sp, #92	; 0x5c
 8011d92:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8011d94:	9106      	str	r1, [sp, #24]
 8011d96:	4604      	mov	r4, r0
 8011d98:	920b      	str	r2, [sp, #44]	; 0x2c
 8011d9a:	9312      	str	r3, [sp, #72]	; 0x48
 8011d9c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8011da0:	e9cd 6700 	strd	r6, r7, [sp]
 8011da4:	b93d      	cbnz	r5, 8011db6 <_dtoa_r+0x2e>
 8011da6:	2010      	movs	r0, #16
 8011da8:	f7fe f960 	bl	801006c <malloc>
 8011dac:	6260      	str	r0, [r4, #36]	; 0x24
 8011dae:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8011db2:	6005      	str	r5, [r0, #0]
 8011db4:	60c5      	str	r5, [r0, #12]
 8011db6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011db8:	6819      	ldr	r1, [r3, #0]
 8011dba:	b151      	cbz	r1, 8011dd2 <_dtoa_r+0x4a>
 8011dbc:	685a      	ldr	r2, [r3, #4]
 8011dbe:	604a      	str	r2, [r1, #4]
 8011dc0:	2301      	movs	r3, #1
 8011dc2:	4093      	lsls	r3, r2
 8011dc4:	608b      	str	r3, [r1, #8]
 8011dc6:	4620      	mov	r0, r4
 8011dc8:	f001 f918 	bl	8012ffc <_Bfree>
 8011dcc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011dce:	2200      	movs	r2, #0
 8011dd0:	601a      	str	r2, [r3, #0]
 8011dd2:	1e3b      	subs	r3, r7, #0
 8011dd4:	bfbb      	ittet	lt
 8011dd6:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8011dda:	9301      	strlt	r3, [sp, #4]
 8011ddc:	2300      	movge	r3, #0
 8011dde:	2201      	movlt	r2, #1
 8011de0:	bfac      	ite	ge
 8011de2:	f8c8 3000 	strge.w	r3, [r8]
 8011de6:	f8c8 2000 	strlt.w	r2, [r8]
 8011dea:	4baf      	ldr	r3, [pc, #700]	; (80120a8 <_dtoa_r+0x320>)
 8011dec:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8011df0:	ea33 0308 	bics.w	r3, r3, r8
 8011df4:	d114      	bne.n	8011e20 <_dtoa_r+0x98>
 8011df6:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8011df8:	f242 730f 	movw	r3, #9999	; 0x270f
 8011dfc:	6013      	str	r3, [r2, #0]
 8011dfe:	9b00      	ldr	r3, [sp, #0]
 8011e00:	b923      	cbnz	r3, 8011e0c <_dtoa_r+0x84>
 8011e02:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8011e06:	2800      	cmp	r0, #0
 8011e08:	f000 8542 	beq.w	8012890 <_dtoa_r+0xb08>
 8011e0c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8011e0e:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 80120bc <_dtoa_r+0x334>
 8011e12:	2b00      	cmp	r3, #0
 8011e14:	f000 8544 	beq.w	80128a0 <_dtoa_r+0xb18>
 8011e18:	f10b 0303 	add.w	r3, fp, #3
 8011e1c:	f000 bd3e 	b.w	801289c <_dtoa_r+0xb14>
 8011e20:	e9dd 6700 	ldrd	r6, r7, [sp]
 8011e24:	2200      	movs	r2, #0
 8011e26:	2300      	movs	r3, #0
 8011e28:	4630      	mov	r0, r6
 8011e2a:	4639      	mov	r1, r7
 8011e2c:	f7ee fe4c 	bl	8000ac8 <__aeabi_dcmpeq>
 8011e30:	4681      	mov	r9, r0
 8011e32:	b168      	cbz	r0, 8011e50 <_dtoa_r+0xc8>
 8011e34:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8011e36:	2301      	movs	r3, #1
 8011e38:	6013      	str	r3, [r2, #0]
 8011e3a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8011e3c:	2b00      	cmp	r3, #0
 8011e3e:	f000 8524 	beq.w	801288a <_dtoa_r+0xb02>
 8011e42:	4b9a      	ldr	r3, [pc, #616]	; (80120ac <_dtoa_r+0x324>)
 8011e44:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8011e46:	f103 3bff 	add.w	fp, r3, #4294967295
 8011e4a:	6013      	str	r3, [r2, #0]
 8011e4c:	f000 bd28 	b.w	80128a0 <_dtoa_r+0xb18>
 8011e50:	aa14      	add	r2, sp, #80	; 0x50
 8011e52:	a915      	add	r1, sp, #84	; 0x54
 8011e54:	ec47 6b10 	vmov	d0, r6, r7
 8011e58:	4620      	mov	r0, r4
 8011e5a:	f001 fbdd 	bl	8013618 <__d2b>
 8011e5e:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8011e62:	9004      	str	r0, [sp, #16]
 8011e64:	2d00      	cmp	r5, #0
 8011e66:	d07c      	beq.n	8011f62 <_dtoa_r+0x1da>
 8011e68:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8011e6c:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8011e70:	46b2      	mov	sl, r6
 8011e72:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 8011e76:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8011e7a:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 8011e7e:	2200      	movs	r2, #0
 8011e80:	4b8b      	ldr	r3, [pc, #556]	; (80120b0 <_dtoa_r+0x328>)
 8011e82:	4650      	mov	r0, sl
 8011e84:	4659      	mov	r1, fp
 8011e86:	f7ee f9ff 	bl	8000288 <__aeabi_dsub>
 8011e8a:	a381      	add	r3, pc, #516	; (adr r3, 8012090 <_dtoa_r+0x308>)
 8011e8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011e90:	f7ee fbb2 	bl	80005f8 <__aeabi_dmul>
 8011e94:	a380      	add	r3, pc, #512	; (adr r3, 8012098 <_dtoa_r+0x310>)
 8011e96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011e9a:	f7ee f9f7 	bl	800028c <__adddf3>
 8011e9e:	4606      	mov	r6, r0
 8011ea0:	4628      	mov	r0, r5
 8011ea2:	460f      	mov	r7, r1
 8011ea4:	f7ee fb3e 	bl	8000524 <__aeabi_i2d>
 8011ea8:	a37d      	add	r3, pc, #500	; (adr r3, 80120a0 <_dtoa_r+0x318>)
 8011eaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011eae:	f7ee fba3 	bl	80005f8 <__aeabi_dmul>
 8011eb2:	4602      	mov	r2, r0
 8011eb4:	460b      	mov	r3, r1
 8011eb6:	4630      	mov	r0, r6
 8011eb8:	4639      	mov	r1, r7
 8011eba:	f7ee f9e7 	bl	800028c <__adddf3>
 8011ebe:	4606      	mov	r6, r0
 8011ec0:	460f      	mov	r7, r1
 8011ec2:	f7ee fe49 	bl	8000b58 <__aeabi_d2iz>
 8011ec6:	2200      	movs	r2, #0
 8011ec8:	4682      	mov	sl, r0
 8011eca:	2300      	movs	r3, #0
 8011ecc:	4630      	mov	r0, r6
 8011ece:	4639      	mov	r1, r7
 8011ed0:	f7ee fe04 	bl	8000adc <__aeabi_dcmplt>
 8011ed4:	b148      	cbz	r0, 8011eea <_dtoa_r+0x162>
 8011ed6:	4650      	mov	r0, sl
 8011ed8:	f7ee fb24 	bl	8000524 <__aeabi_i2d>
 8011edc:	4632      	mov	r2, r6
 8011ede:	463b      	mov	r3, r7
 8011ee0:	f7ee fdf2 	bl	8000ac8 <__aeabi_dcmpeq>
 8011ee4:	b908      	cbnz	r0, 8011eea <_dtoa_r+0x162>
 8011ee6:	f10a 3aff 	add.w	sl, sl, #4294967295
 8011eea:	f1ba 0f16 	cmp.w	sl, #22
 8011eee:	d859      	bhi.n	8011fa4 <_dtoa_r+0x21c>
 8011ef0:	4970      	ldr	r1, [pc, #448]	; (80120b4 <_dtoa_r+0x32c>)
 8011ef2:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8011ef6:	e9dd 2300 	ldrd	r2, r3, [sp]
 8011efa:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011efe:	f7ee fe0b 	bl	8000b18 <__aeabi_dcmpgt>
 8011f02:	2800      	cmp	r0, #0
 8011f04:	d050      	beq.n	8011fa8 <_dtoa_r+0x220>
 8011f06:	f10a 3aff 	add.w	sl, sl, #4294967295
 8011f0a:	2300      	movs	r3, #0
 8011f0c:	930f      	str	r3, [sp, #60]	; 0x3c
 8011f0e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8011f10:	1b5d      	subs	r5, r3, r5
 8011f12:	f1b5 0801 	subs.w	r8, r5, #1
 8011f16:	bf49      	itett	mi
 8011f18:	f1c5 0301 	rsbmi	r3, r5, #1
 8011f1c:	2300      	movpl	r3, #0
 8011f1e:	9305      	strmi	r3, [sp, #20]
 8011f20:	f04f 0800 	movmi.w	r8, #0
 8011f24:	bf58      	it	pl
 8011f26:	9305      	strpl	r3, [sp, #20]
 8011f28:	f1ba 0f00 	cmp.w	sl, #0
 8011f2c:	db3e      	blt.n	8011fac <_dtoa_r+0x224>
 8011f2e:	2300      	movs	r3, #0
 8011f30:	44d0      	add	r8, sl
 8011f32:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8011f36:	9307      	str	r3, [sp, #28]
 8011f38:	9b06      	ldr	r3, [sp, #24]
 8011f3a:	2b09      	cmp	r3, #9
 8011f3c:	f200 8090 	bhi.w	8012060 <_dtoa_r+0x2d8>
 8011f40:	2b05      	cmp	r3, #5
 8011f42:	bfc4      	itt	gt
 8011f44:	3b04      	subgt	r3, #4
 8011f46:	9306      	strgt	r3, [sp, #24]
 8011f48:	9b06      	ldr	r3, [sp, #24]
 8011f4a:	f1a3 0302 	sub.w	r3, r3, #2
 8011f4e:	bfcc      	ite	gt
 8011f50:	2500      	movgt	r5, #0
 8011f52:	2501      	movle	r5, #1
 8011f54:	2b03      	cmp	r3, #3
 8011f56:	f200 808f 	bhi.w	8012078 <_dtoa_r+0x2f0>
 8011f5a:	e8df f003 	tbb	[pc, r3]
 8011f5e:	7f7d      	.short	0x7f7d
 8011f60:	7131      	.short	0x7131
 8011f62:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 8011f66:	441d      	add	r5, r3
 8011f68:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8011f6c:	2820      	cmp	r0, #32
 8011f6e:	dd13      	ble.n	8011f98 <_dtoa_r+0x210>
 8011f70:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8011f74:	9b00      	ldr	r3, [sp, #0]
 8011f76:	fa08 f800 	lsl.w	r8, r8, r0
 8011f7a:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8011f7e:	fa23 f000 	lsr.w	r0, r3, r0
 8011f82:	ea48 0000 	orr.w	r0, r8, r0
 8011f86:	f7ee fabd 	bl	8000504 <__aeabi_ui2d>
 8011f8a:	2301      	movs	r3, #1
 8011f8c:	4682      	mov	sl, r0
 8011f8e:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 8011f92:	3d01      	subs	r5, #1
 8011f94:	9313      	str	r3, [sp, #76]	; 0x4c
 8011f96:	e772      	b.n	8011e7e <_dtoa_r+0xf6>
 8011f98:	9b00      	ldr	r3, [sp, #0]
 8011f9a:	f1c0 0020 	rsb	r0, r0, #32
 8011f9e:	fa03 f000 	lsl.w	r0, r3, r0
 8011fa2:	e7f0      	b.n	8011f86 <_dtoa_r+0x1fe>
 8011fa4:	2301      	movs	r3, #1
 8011fa6:	e7b1      	b.n	8011f0c <_dtoa_r+0x184>
 8011fa8:	900f      	str	r0, [sp, #60]	; 0x3c
 8011faa:	e7b0      	b.n	8011f0e <_dtoa_r+0x186>
 8011fac:	9b05      	ldr	r3, [sp, #20]
 8011fae:	eba3 030a 	sub.w	r3, r3, sl
 8011fb2:	9305      	str	r3, [sp, #20]
 8011fb4:	f1ca 0300 	rsb	r3, sl, #0
 8011fb8:	9307      	str	r3, [sp, #28]
 8011fba:	2300      	movs	r3, #0
 8011fbc:	930e      	str	r3, [sp, #56]	; 0x38
 8011fbe:	e7bb      	b.n	8011f38 <_dtoa_r+0x1b0>
 8011fc0:	2301      	movs	r3, #1
 8011fc2:	930a      	str	r3, [sp, #40]	; 0x28
 8011fc4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011fc6:	2b00      	cmp	r3, #0
 8011fc8:	dd59      	ble.n	801207e <_dtoa_r+0x2f6>
 8011fca:	9302      	str	r3, [sp, #8]
 8011fcc:	4699      	mov	r9, r3
 8011fce:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8011fd0:	2200      	movs	r2, #0
 8011fd2:	6072      	str	r2, [r6, #4]
 8011fd4:	2204      	movs	r2, #4
 8011fd6:	f102 0014 	add.w	r0, r2, #20
 8011fda:	4298      	cmp	r0, r3
 8011fdc:	6871      	ldr	r1, [r6, #4]
 8011fde:	d953      	bls.n	8012088 <_dtoa_r+0x300>
 8011fe0:	4620      	mov	r0, r4
 8011fe2:	f000 ffd7 	bl	8012f94 <_Balloc>
 8011fe6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011fe8:	6030      	str	r0, [r6, #0]
 8011fea:	f1b9 0f0e 	cmp.w	r9, #14
 8011fee:	f8d3 b000 	ldr.w	fp, [r3]
 8011ff2:	f200 80e6 	bhi.w	80121c2 <_dtoa_r+0x43a>
 8011ff6:	2d00      	cmp	r5, #0
 8011ff8:	f000 80e3 	beq.w	80121c2 <_dtoa_r+0x43a>
 8011ffc:	ed9d 7b00 	vldr	d7, [sp]
 8012000:	f1ba 0f00 	cmp.w	sl, #0
 8012004:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8012008:	dd74      	ble.n	80120f4 <_dtoa_r+0x36c>
 801200a:	4a2a      	ldr	r2, [pc, #168]	; (80120b4 <_dtoa_r+0x32c>)
 801200c:	f00a 030f 	and.w	r3, sl, #15
 8012010:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8012014:	ed93 7b00 	vldr	d7, [r3]
 8012018:	ea4f 162a 	mov.w	r6, sl, asr #4
 801201c:	06f0      	lsls	r0, r6, #27
 801201e:	ed8d 7b08 	vstr	d7, [sp, #32]
 8012022:	d565      	bpl.n	80120f0 <_dtoa_r+0x368>
 8012024:	4b24      	ldr	r3, [pc, #144]	; (80120b8 <_dtoa_r+0x330>)
 8012026:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 801202a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 801202e:	f7ee fc0d 	bl	800084c <__aeabi_ddiv>
 8012032:	e9cd 0100 	strd	r0, r1, [sp]
 8012036:	f006 060f 	and.w	r6, r6, #15
 801203a:	2503      	movs	r5, #3
 801203c:	4f1e      	ldr	r7, [pc, #120]	; (80120b8 <_dtoa_r+0x330>)
 801203e:	e04c      	b.n	80120da <_dtoa_r+0x352>
 8012040:	2301      	movs	r3, #1
 8012042:	930a      	str	r3, [sp, #40]	; 0x28
 8012044:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012046:	4453      	add	r3, sl
 8012048:	f103 0901 	add.w	r9, r3, #1
 801204c:	9302      	str	r3, [sp, #8]
 801204e:	464b      	mov	r3, r9
 8012050:	2b01      	cmp	r3, #1
 8012052:	bfb8      	it	lt
 8012054:	2301      	movlt	r3, #1
 8012056:	e7ba      	b.n	8011fce <_dtoa_r+0x246>
 8012058:	2300      	movs	r3, #0
 801205a:	e7b2      	b.n	8011fc2 <_dtoa_r+0x23a>
 801205c:	2300      	movs	r3, #0
 801205e:	e7f0      	b.n	8012042 <_dtoa_r+0x2ba>
 8012060:	2501      	movs	r5, #1
 8012062:	2300      	movs	r3, #0
 8012064:	9306      	str	r3, [sp, #24]
 8012066:	950a      	str	r5, [sp, #40]	; 0x28
 8012068:	f04f 33ff 	mov.w	r3, #4294967295
 801206c:	9302      	str	r3, [sp, #8]
 801206e:	4699      	mov	r9, r3
 8012070:	2200      	movs	r2, #0
 8012072:	2312      	movs	r3, #18
 8012074:	920b      	str	r2, [sp, #44]	; 0x2c
 8012076:	e7aa      	b.n	8011fce <_dtoa_r+0x246>
 8012078:	2301      	movs	r3, #1
 801207a:	930a      	str	r3, [sp, #40]	; 0x28
 801207c:	e7f4      	b.n	8012068 <_dtoa_r+0x2e0>
 801207e:	2301      	movs	r3, #1
 8012080:	9302      	str	r3, [sp, #8]
 8012082:	4699      	mov	r9, r3
 8012084:	461a      	mov	r2, r3
 8012086:	e7f5      	b.n	8012074 <_dtoa_r+0x2ec>
 8012088:	3101      	adds	r1, #1
 801208a:	6071      	str	r1, [r6, #4]
 801208c:	0052      	lsls	r2, r2, #1
 801208e:	e7a2      	b.n	8011fd6 <_dtoa_r+0x24e>
 8012090:	636f4361 	.word	0x636f4361
 8012094:	3fd287a7 	.word	0x3fd287a7
 8012098:	8b60c8b3 	.word	0x8b60c8b3
 801209c:	3fc68a28 	.word	0x3fc68a28
 80120a0:	509f79fb 	.word	0x509f79fb
 80120a4:	3fd34413 	.word	0x3fd34413
 80120a8:	7ff00000 	.word	0x7ff00000
 80120ac:	08015a09 	.word	0x08015a09
 80120b0:	3ff80000 	.word	0x3ff80000
 80120b4:	08015ac8 	.word	0x08015ac8
 80120b8:	08015aa0 	.word	0x08015aa0
 80120bc:	08015a91 	.word	0x08015a91
 80120c0:	07f1      	lsls	r1, r6, #31
 80120c2:	d508      	bpl.n	80120d6 <_dtoa_r+0x34e>
 80120c4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80120c8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80120cc:	f7ee fa94 	bl	80005f8 <__aeabi_dmul>
 80120d0:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80120d4:	3501      	adds	r5, #1
 80120d6:	1076      	asrs	r6, r6, #1
 80120d8:	3708      	adds	r7, #8
 80120da:	2e00      	cmp	r6, #0
 80120dc:	d1f0      	bne.n	80120c0 <_dtoa_r+0x338>
 80120de:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80120e2:	e9dd 0100 	ldrd	r0, r1, [sp]
 80120e6:	f7ee fbb1 	bl	800084c <__aeabi_ddiv>
 80120ea:	e9cd 0100 	strd	r0, r1, [sp]
 80120ee:	e01a      	b.n	8012126 <_dtoa_r+0x39e>
 80120f0:	2502      	movs	r5, #2
 80120f2:	e7a3      	b.n	801203c <_dtoa_r+0x2b4>
 80120f4:	f000 80a0 	beq.w	8012238 <_dtoa_r+0x4b0>
 80120f8:	f1ca 0600 	rsb	r6, sl, #0
 80120fc:	4b9f      	ldr	r3, [pc, #636]	; (801237c <_dtoa_r+0x5f4>)
 80120fe:	4fa0      	ldr	r7, [pc, #640]	; (8012380 <_dtoa_r+0x5f8>)
 8012100:	f006 020f 	and.w	r2, r6, #15
 8012104:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8012108:	e9d3 2300 	ldrd	r2, r3, [r3]
 801210c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8012110:	f7ee fa72 	bl	80005f8 <__aeabi_dmul>
 8012114:	e9cd 0100 	strd	r0, r1, [sp]
 8012118:	1136      	asrs	r6, r6, #4
 801211a:	2300      	movs	r3, #0
 801211c:	2502      	movs	r5, #2
 801211e:	2e00      	cmp	r6, #0
 8012120:	d17f      	bne.n	8012222 <_dtoa_r+0x49a>
 8012122:	2b00      	cmp	r3, #0
 8012124:	d1e1      	bne.n	80120ea <_dtoa_r+0x362>
 8012126:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8012128:	2b00      	cmp	r3, #0
 801212a:	f000 8087 	beq.w	801223c <_dtoa_r+0x4b4>
 801212e:	e9dd 6700 	ldrd	r6, r7, [sp]
 8012132:	2200      	movs	r2, #0
 8012134:	4b93      	ldr	r3, [pc, #588]	; (8012384 <_dtoa_r+0x5fc>)
 8012136:	4630      	mov	r0, r6
 8012138:	4639      	mov	r1, r7
 801213a:	f7ee fccf 	bl	8000adc <__aeabi_dcmplt>
 801213e:	2800      	cmp	r0, #0
 8012140:	d07c      	beq.n	801223c <_dtoa_r+0x4b4>
 8012142:	f1b9 0f00 	cmp.w	r9, #0
 8012146:	d079      	beq.n	801223c <_dtoa_r+0x4b4>
 8012148:	9b02      	ldr	r3, [sp, #8]
 801214a:	2b00      	cmp	r3, #0
 801214c:	dd35      	ble.n	80121ba <_dtoa_r+0x432>
 801214e:	f10a 33ff 	add.w	r3, sl, #4294967295
 8012152:	9308      	str	r3, [sp, #32]
 8012154:	4639      	mov	r1, r7
 8012156:	2200      	movs	r2, #0
 8012158:	4b8b      	ldr	r3, [pc, #556]	; (8012388 <_dtoa_r+0x600>)
 801215a:	4630      	mov	r0, r6
 801215c:	f7ee fa4c 	bl	80005f8 <__aeabi_dmul>
 8012160:	e9cd 0100 	strd	r0, r1, [sp]
 8012164:	9f02      	ldr	r7, [sp, #8]
 8012166:	3501      	adds	r5, #1
 8012168:	4628      	mov	r0, r5
 801216a:	f7ee f9db 	bl	8000524 <__aeabi_i2d>
 801216e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8012172:	f7ee fa41 	bl	80005f8 <__aeabi_dmul>
 8012176:	2200      	movs	r2, #0
 8012178:	4b84      	ldr	r3, [pc, #528]	; (801238c <_dtoa_r+0x604>)
 801217a:	f7ee f887 	bl	800028c <__adddf3>
 801217e:	4605      	mov	r5, r0
 8012180:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8012184:	2f00      	cmp	r7, #0
 8012186:	d15d      	bne.n	8012244 <_dtoa_r+0x4bc>
 8012188:	2200      	movs	r2, #0
 801218a:	4b81      	ldr	r3, [pc, #516]	; (8012390 <_dtoa_r+0x608>)
 801218c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8012190:	f7ee f87a 	bl	8000288 <__aeabi_dsub>
 8012194:	462a      	mov	r2, r5
 8012196:	4633      	mov	r3, r6
 8012198:	e9cd 0100 	strd	r0, r1, [sp]
 801219c:	f7ee fcbc 	bl	8000b18 <__aeabi_dcmpgt>
 80121a0:	2800      	cmp	r0, #0
 80121a2:	f040 8288 	bne.w	80126b6 <_dtoa_r+0x92e>
 80121a6:	462a      	mov	r2, r5
 80121a8:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80121ac:	e9dd 0100 	ldrd	r0, r1, [sp]
 80121b0:	f7ee fc94 	bl	8000adc <__aeabi_dcmplt>
 80121b4:	2800      	cmp	r0, #0
 80121b6:	f040 827c 	bne.w	80126b2 <_dtoa_r+0x92a>
 80121ba:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80121be:	e9cd 2300 	strd	r2, r3, [sp]
 80121c2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80121c4:	2b00      	cmp	r3, #0
 80121c6:	f2c0 8150 	blt.w	801246a <_dtoa_r+0x6e2>
 80121ca:	f1ba 0f0e 	cmp.w	sl, #14
 80121ce:	f300 814c 	bgt.w	801246a <_dtoa_r+0x6e2>
 80121d2:	4b6a      	ldr	r3, [pc, #424]	; (801237c <_dtoa_r+0x5f4>)
 80121d4:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80121d8:	ed93 7b00 	vldr	d7, [r3]
 80121dc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80121de:	2b00      	cmp	r3, #0
 80121e0:	ed8d 7b02 	vstr	d7, [sp, #8]
 80121e4:	f280 80d8 	bge.w	8012398 <_dtoa_r+0x610>
 80121e8:	f1b9 0f00 	cmp.w	r9, #0
 80121ec:	f300 80d4 	bgt.w	8012398 <_dtoa_r+0x610>
 80121f0:	f040 825e 	bne.w	80126b0 <_dtoa_r+0x928>
 80121f4:	2200      	movs	r2, #0
 80121f6:	4b66      	ldr	r3, [pc, #408]	; (8012390 <_dtoa_r+0x608>)
 80121f8:	ec51 0b17 	vmov	r0, r1, d7
 80121fc:	f7ee f9fc 	bl	80005f8 <__aeabi_dmul>
 8012200:	e9dd 2300 	ldrd	r2, r3, [sp]
 8012204:	f7ee fc7e 	bl	8000b04 <__aeabi_dcmpge>
 8012208:	464f      	mov	r7, r9
 801220a:	464e      	mov	r6, r9
 801220c:	2800      	cmp	r0, #0
 801220e:	f040 8234 	bne.w	801267a <_dtoa_r+0x8f2>
 8012212:	2331      	movs	r3, #49	; 0x31
 8012214:	f10b 0501 	add.w	r5, fp, #1
 8012218:	f88b 3000 	strb.w	r3, [fp]
 801221c:	f10a 0a01 	add.w	sl, sl, #1
 8012220:	e22f      	b.n	8012682 <_dtoa_r+0x8fa>
 8012222:	07f2      	lsls	r2, r6, #31
 8012224:	d505      	bpl.n	8012232 <_dtoa_r+0x4aa>
 8012226:	e9d7 2300 	ldrd	r2, r3, [r7]
 801222a:	f7ee f9e5 	bl	80005f8 <__aeabi_dmul>
 801222e:	3501      	adds	r5, #1
 8012230:	2301      	movs	r3, #1
 8012232:	1076      	asrs	r6, r6, #1
 8012234:	3708      	adds	r7, #8
 8012236:	e772      	b.n	801211e <_dtoa_r+0x396>
 8012238:	2502      	movs	r5, #2
 801223a:	e774      	b.n	8012126 <_dtoa_r+0x39e>
 801223c:	f8cd a020 	str.w	sl, [sp, #32]
 8012240:	464f      	mov	r7, r9
 8012242:	e791      	b.n	8012168 <_dtoa_r+0x3e0>
 8012244:	4b4d      	ldr	r3, [pc, #308]	; (801237c <_dtoa_r+0x5f4>)
 8012246:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 801224a:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 801224e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012250:	2b00      	cmp	r3, #0
 8012252:	d047      	beq.n	80122e4 <_dtoa_r+0x55c>
 8012254:	4602      	mov	r2, r0
 8012256:	460b      	mov	r3, r1
 8012258:	2000      	movs	r0, #0
 801225a:	494e      	ldr	r1, [pc, #312]	; (8012394 <_dtoa_r+0x60c>)
 801225c:	f7ee faf6 	bl	800084c <__aeabi_ddiv>
 8012260:	462a      	mov	r2, r5
 8012262:	4633      	mov	r3, r6
 8012264:	f7ee f810 	bl	8000288 <__aeabi_dsub>
 8012268:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 801226c:	465d      	mov	r5, fp
 801226e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8012272:	f7ee fc71 	bl	8000b58 <__aeabi_d2iz>
 8012276:	4606      	mov	r6, r0
 8012278:	f7ee f954 	bl	8000524 <__aeabi_i2d>
 801227c:	4602      	mov	r2, r0
 801227e:	460b      	mov	r3, r1
 8012280:	e9dd 0100 	ldrd	r0, r1, [sp]
 8012284:	f7ee f800 	bl	8000288 <__aeabi_dsub>
 8012288:	3630      	adds	r6, #48	; 0x30
 801228a:	f805 6b01 	strb.w	r6, [r5], #1
 801228e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8012292:	e9cd 0100 	strd	r0, r1, [sp]
 8012296:	f7ee fc21 	bl	8000adc <__aeabi_dcmplt>
 801229a:	2800      	cmp	r0, #0
 801229c:	d163      	bne.n	8012366 <_dtoa_r+0x5de>
 801229e:	e9dd 2300 	ldrd	r2, r3, [sp]
 80122a2:	2000      	movs	r0, #0
 80122a4:	4937      	ldr	r1, [pc, #220]	; (8012384 <_dtoa_r+0x5fc>)
 80122a6:	f7ed ffef 	bl	8000288 <__aeabi_dsub>
 80122aa:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80122ae:	f7ee fc15 	bl	8000adc <__aeabi_dcmplt>
 80122b2:	2800      	cmp	r0, #0
 80122b4:	f040 80b7 	bne.w	8012426 <_dtoa_r+0x69e>
 80122b8:	eba5 030b 	sub.w	r3, r5, fp
 80122bc:	429f      	cmp	r7, r3
 80122be:	f77f af7c 	ble.w	80121ba <_dtoa_r+0x432>
 80122c2:	2200      	movs	r2, #0
 80122c4:	4b30      	ldr	r3, [pc, #192]	; (8012388 <_dtoa_r+0x600>)
 80122c6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80122ca:	f7ee f995 	bl	80005f8 <__aeabi_dmul>
 80122ce:	2200      	movs	r2, #0
 80122d0:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80122d4:	4b2c      	ldr	r3, [pc, #176]	; (8012388 <_dtoa_r+0x600>)
 80122d6:	e9dd 0100 	ldrd	r0, r1, [sp]
 80122da:	f7ee f98d 	bl	80005f8 <__aeabi_dmul>
 80122de:	e9cd 0100 	strd	r0, r1, [sp]
 80122e2:	e7c4      	b.n	801226e <_dtoa_r+0x4e6>
 80122e4:	462a      	mov	r2, r5
 80122e6:	4633      	mov	r3, r6
 80122e8:	f7ee f986 	bl	80005f8 <__aeabi_dmul>
 80122ec:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80122f0:	eb0b 0507 	add.w	r5, fp, r7
 80122f4:	465e      	mov	r6, fp
 80122f6:	e9dd 0100 	ldrd	r0, r1, [sp]
 80122fa:	f7ee fc2d 	bl	8000b58 <__aeabi_d2iz>
 80122fe:	4607      	mov	r7, r0
 8012300:	f7ee f910 	bl	8000524 <__aeabi_i2d>
 8012304:	3730      	adds	r7, #48	; 0x30
 8012306:	4602      	mov	r2, r0
 8012308:	460b      	mov	r3, r1
 801230a:	e9dd 0100 	ldrd	r0, r1, [sp]
 801230e:	f7ed ffbb 	bl	8000288 <__aeabi_dsub>
 8012312:	f806 7b01 	strb.w	r7, [r6], #1
 8012316:	42ae      	cmp	r6, r5
 8012318:	e9cd 0100 	strd	r0, r1, [sp]
 801231c:	f04f 0200 	mov.w	r2, #0
 8012320:	d126      	bne.n	8012370 <_dtoa_r+0x5e8>
 8012322:	4b1c      	ldr	r3, [pc, #112]	; (8012394 <_dtoa_r+0x60c>)
 8012324:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8012328:	f7ed ffb0 	bl	800028c <__adddf3>
 801232c:	4602      	mov	r2, r0
 801232e:	460b      	mov	r3, r1
 8012330:	e9dd 0100 	ldrd	r0, r1, [sp]
 8012334:	f7ee fbf0 	bl	8000b18 <__aeabi_dcmpgt>
 8012338:	2800      	cmp	r0, #0
 801233a:	d174      	bne.n	8012426 <_dtoa_r+0x69e>
 801233c:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8012340:	2000      	movs	r0, #0
 8012342:	4914      	ldr	r1, [pc, #80]	; (8012394 <_dtoa_r+0x60c>)
 8012344:	f7ed ffa0 	bl	8000288 <__aeabi_dsub>
 8012348:	4602      	mov	r2, r0
 801234a:	460b      	mov	r3, r1
 801234c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8012350:	f7ee fbc4 	bl	8000adc <__aeabi_dcmplt>
 8012354:	2800      	cmp	r0, #0
 8012356:	f43f af30 	beq.w	80121ba <_dtoa_r+0x432>
 801235a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 801235e:	2b30      	cmp	r3, #48	; 0x30
 8012360:	f105 32ff 	add.w	r2, r5, #4294967295
 8012364:	d002      	beq.n	801236c <_dtoa_r+0x5e4>
 8012366:	f8dd a020 	ldr.w	sl, [sp, #32]
 801236a:	e04a      	b.n	8012402 <_dtoa_r+0x67a>
 801236c:	4615      	mov	r5, r2
 801236e:	e7f4      	b.n	801235a <_dtoa_r+0x5d2>
 8012370:	4b05      	ldr	r3, [pc, #20]	; (8012388 <_dtoa_r+0x600>)
 8012372:	f7ee f941 	bl	80005f8 <__aeabi_dmul>
 8012376:	e9cd 0100 	strd	r0, r1, [sp]
 801237a:	e7bc      	b.n	80122f6 <_dtoa_r+0x56e>
 801237c:	08015ac8 	.word	0x08015ac8
 8012380:	08015aa0 	.word	0x08015aa0
 8012384:	3ff00000 	.word	0x3ff00000
 8012388:	40240000 	.word	0x40240000
 801238c:	401c0000 	.word	0x401c0000
 8012390:	40140000 	.word	0x40140000
 8012394:	3fe00000 	.word	0x3fe00000
 8012398:	e9dd 6700 	ldrd	r6, r7, [sp]
 801239c:	465d      	mov	r5, fp
 801239e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80123a2:	4630      	mov	r0, r6
 80123a4:	4639      	mov	r1, r7
 80123a6:	f7ee fa51 	bl	800084c <__aeabi_ddiv>
 80123aa:	f7ee fbd5 	bl	8000b58 <__aeabi_d2iz>
 80123ae:	4680      	mov	r8, r0
 80123b0:	f7ee f8b8 	bl	8000524 <__aeabi_i2d>
 80123b4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80123b8:	f7ee f91e 	bl	80005f8 <__aeabi_dmul>
 80123bc:	4602      	mov	r2, r0
 80123be:	460b      	mov	r3, r1
 80123c0:	4630      	mov	r0, r6
 80123c2:	4639      	mov	r1, r7
 80123c4:	f108 0630 	add.w	r6, r8, #48	; 0x30
 80123c8:	f7ed ff5e 	bl	8000288 <__aeabi_dsub>
 80123cc:	f805 6b01 	strb.w	r6, [r5], #1
 80123d0:	eba5 060b 	sub.w	r6, r5, fp
 80123d4:	45b1      	cmp	r9, r6
 80123d6:	4602      	mov	r2, r0
 80123d8:	460b      	mov	r3, r1
 80123da:	d139      	bne.n	8012450 <_dtoa_r+0x6c8>
 80123dc:	f7ed ff56 	bl	800028c <__adddf3>
 80123e0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80123e4:	4606      	mov	r6, r0
 80123e6:	460f      	mov	r7, r1
 80123e8:	f7ee fb96 	bl	8000b18 <__aeabi_dcmpgt>
 80123ec:	b9c8      	cbnz	r0, 8012422 <_dtoa_r+0x69a>
 80123ee:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80123f2:	4630      	mov	r0, r6
 80123f4:	4639      	mov	r1, r7
 80123f6:	f7ee fb67 	bl	8000ac8 <__aeabi_dcmpeq>
 80123fa:	b110      	cbz	r0, 8012402 <_dtoa_r+0x67a>
 80123fc:	f018 0f01 	tst.w	r8, #1
 8012400:	d10f      	bne.n	8012422 <_dtoa_r+0x69a>
 8012402:	9904      	ldr	r1, [sp, #16]
 8012404:	4620      	mov	r0, r4
 8012406:	f000 fdf9 	bl	8012ffc <_Bfree>
 801240a:	2300      	movs	r3, #0
 801240c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801240e:	702b      	strb	r3, [r5, #0]
 8012410:	f10a 0301 	add.w	r3, sl, #1
 8012414:	6013      	str	r3, [r2, #0]
 8012416:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8012418:	2b00      	cmp	r3, #0
 801241a:	f000 8241 	beq.w	80128a0 <_dtoa_r+0xb18>
 801241e:	601d      	str	r5, [r3, #0]
 8012420:	e23e      	b.n	80128a0 <_dtoa_r+0xb18>
 8012422:	f8cd a020 	str.w	sl, [sp, #32]
 8012426:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 801242a:	2a39      	cmp	r2, #57	; 0x39
 801242c:	f105 33ff 	add.w	r3, r5, #4294967295
 8012430:	d108      	bne.n	8012444 <_dtoa_r+0x6bc>
 8012432:	459b      	cmp	fp, r3
 8012434:	d10a      	bne.n	801244c <_dtoa_r+0x6c4>
 8012436:	9b08      	ldr	r3, [sp, #32]
 8012438:	3301      	adds	r3, #1
 801243a:	9308      	str	r3, [sp, #32]
 801243c:	2330      	movs	r3, #48	; 0x30
 801243e:	f88b 3000 	strb.w	r3, [fp]
 8012442:	465b      	mov	r3, fp
 8012444:	781a      	ldrb	r2, [r3, #0]
 8012446:	3201      	adds	r2, #1
 8012448:	701a      	strb	r2, [r3, #0]
 801244a:	e78c      	b.n	8012366 <_dtoa_r+0x5de>
 801244c:	461d      	mov	r5, r3
 801244e:	e7ea      	b.n	8012426 <_dtoa_r+0x69e>
 8012450:	2200      	movs	r2, #0
 8012452:	4b9b      	ldr	r3, [pc, #620]	; (80126c0 <_dtoa_r+0x938>)
 8012454:	f7ee f8d0 	bl	80005f8 <__aeabi_dmul>
 8012458:	2200      	movs	r2, #0
 801245a:	2300      	movs	r3, #0
 801245c:	4606      	mov	r6, r0
 801245e:	460f      	mov	r7, r1
 8012460:	f7ee fb32 	bl	8000ac8 <__aeabi_dcmpeq>
 8012464:	2800      	cmp	r0, #0
 8012466:	d09a      	beq.n	801239e <_dtoa_r+0x616>
 8012468:	e7cb      	b.n	8012402 <_dtoa_r+0x67a>
 801246a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801246c:	2a00      	cmp	r2, #0
 801246e:	f000 808b 	beq.w	8012588 <_dtoa_r+0x800>
 8012472:	9a06      	ldr	r2, [sp, #24]
 8012474:	2a01      	cmp	r2, #1
 8012476:	dc6e      	bgt.n	8012556 <_dtoa_r+0x7ce>
 8012478:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801247a:	2a00      	cmp	r2, #0
 801247c:	d067      	beq.n	801254e <_dtoa_r+0x7c6>
 801247e:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8012482:	9f07      	ldr	r7, [sp, #28]
 8012484:	9d05      	ldr	r5, [sp, #20]
 8012486:	9a05      	ldr	r2, [sp, #20]
 8012488:	2101      	movs	r1, #1
 801248a:	441a      	add	r2, r3
 801248c:	4620      	mov	r0, r4
 801248e:	9205      	str	r2, [sp, #20]
 8012490:	4498      	add	r8, r3
 8012492:	f000 fe91 	bl	80131b8 <__i2b>
 8012496:	4606      	mov	r6, r0
 8012498:	2d00      	cmp	r5, #0
 801249a:	dd0c      	ble.n	80124b6 <_dtoa_r+0x72e>
 801249c:	f1b8 0f00 	cmp.w	r8, #0
 80124a0:	dd09      	ble.n	80124b6 <_dtoa_r+0x72e>
 80124a2:	4545      	cmp	r5, r8
 80124a4:	9a05      	ldr	r2, [sp, #20]
 80124a6:	462b      	mov	r3, r5
 80124a8:	bfa8      	it	ge
 80124aa:	4643      	movge	r3, r8
 80124ac:	1ad2      	subs	r2, r2, r3
 80124ae:	9205      	str	r2, [sp, #20]
 80124b0:	1aed      	subs	r5, r5, r3
 80124b2:	eba8 0803 	sub.w	r8, r8, r3
 80124b6:	9b07      	ldr	r3, [sp, #28]
 80124b8:	b1eb      	cbz	r3, 80124f6 <_dtoa_r+0x76e>
 80124ba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80124bc:	2b00      	cmp	r3, #0
 80124be:	d067      	beq.n	8012590 <_dtoa_r+0x808>
 80124c0:	b18f      	cbz	r7, 80124e6 <_dtoa_r+0x75e>
 80124c2:	4631      	mov	r1, r6
 80124c4:	463a      	mov	r2, r7
 80124c6:	4620      	mov	r0, r4
 80124c8:	f000 ff16 	bl	80132f8 <__pow5mult>
 80124cc:	9a04      	ldr	r2, [sp, #16]
 80124ce:	4601      	mov	r1, r0
 80124d0:	4606      	mov	r6, r0
 80124d2:	4620      	mov	r0, r4
 80124d4:	f000 fe79 	bl	80131ca <__multiply>
 80124d8:	9904      	ldr	r1, [sp, #16]
 80124da:	9008      	str	r0, [sp, #32]
 80124dc:	4620      	mov	r0, r4
 80124de:	f000 fd8d 	bl	8012ffc <_Bfree>
 80124e2:	9b08      	ldr	r3, [sp, #32]
 80124e4:	9304      	str	r3, [sp, #16]
 80124e6:	9b07      	ldr	r3, [sp, #28]
 80124e8:	1bda      	subs	r2, r3, r7
 80124ea:	d004      	beq.n	80124f6 <_dtoa_r+0x76e>
 80124ec:	9904      	ldr	r1, [sp, #16]
 80124ee:	4620      	mov	r0, r4
 80124f0:	f000 ff02 	bl	80132f8 <__pow5mult>
 80124f4:	9004      	str	r0, [sp, #16]
 80124f6:	2101      	movs	r1, #1
 80124f8:	4620      	mov	r0, r4
 80124fa:	f000 fe5d 	bl	80131b8 <__i2b>
 80124fe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8012500:	4607      	mov	r7, r0
 8012502:	2b00      	cmp	r3, #0
 8012504:	f000 81d0 	beq.w	80128a8 <_dtoa_r+0xb20>
 8012508:	461a      	mov	r2, r3
 801250a:	4601      	mov	r1, r0
 801250c:	4620      	mov	r0, r4
 801250e:	f000 fef3 	bl	80132f8 <__pow5mult>
 8012512:	9b06      	ldr	r3, [sp, #24]
 8012514:	2b01      	cmp	r3, #1
 8012516:	4607      	mov	r7, r0
 8012518:	dc40      	bgt.n	801259c <_dtoa_r+0x814>
 801251a:	9b00      	ldr	r3, [sp, #0]
 801251c:	2b00      	cmp	r3, #0
 801251e:	d139      	bne.n	8012594 <_dtoa_r+0x80c>
 8012520:	9b01      	ldr	r3, [sp, #4]
 8012522:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8012526:	2b00      	cmp	r3, #0
 8012528:	d136      	bne.n	8012598 <_dtoa_r+0x810>
 801252a:	9b01      	ldr	r3, [sp, #4]
 801252c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8012530:	0d1b      	lsrs	r3, r3, #20
 8012532:	051b      	lsls	r3, r3, #20
 8012534:	b12b      	cbz	r3, 8012542 <_dtoa_r+0x7ba>
 8012536:	9b05      	ldr	r3, [sp, #20]
 8012538:	3301      	adds	r3, #1
 801253a:	9305      	str	r3, [sp, #20]
 801253c:	f108 0801 	add.w	r8, r8, #1
 8012540:	2301      	movs	r3, #1
 8012542:	9307      	str	r3, [sp, #28]
 8012544:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8012546:	2b00      	cmp	r3, #0
 8012548:	d12a      	bne.n	80125a0 <_dtoa_r+0x818>
 801254a:	2001      	movs	r0, #1
 801254c:	e030      	b.n	80125b0 <_dtoa_r+0x828>
 801254e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8012550:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8012554:	e795      	b.n	8012482 <_dtoa_r+0x6fa>
 8012556:	9b07      	ldr	r3, [sp, #28]
 8012558:	f109 37ff 	add.w	r7, r9, #4294967295
 801255c:	42bb      	cmp	r3, r7
 801255e:	bfbf      	itttt	lt
 8012560:	9b07      	ldrlt	r3, [sp, #28]
 8012562:	9707      	strlt	r7, [sp, #28]
 8012564:	1afa      	sublt	r2, r7, r3
 8012566:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8012568:	bfbb      	ittet	lt
 801256a:	189b      	addlt	r3, r3, r2
 801256c:	930e      	strlt	r3, [sp, #56]	; 0x38
 801256e:	1bdf      	subge	r7, r3, r7
 8012570:	2700      	movlt	r7, #0
 8012572:	f1b9 0f00 	cmp.w	r9, #0
 8012576:	bfb5      	itete	lt
 8012578:	9b05      	ldrlt	r3, [sp, #20]
 801257a:	9d05      	ldrge	r5, [sp, #20]
 801257c:	eba3 0509 	sublt.w	r5, r3, r9
 8012580:	464b      	movge	r3, r9
 8012582:	bfb8      	it	lt
 8012584:	2300      	movlt	r3, #0
 8012586:	e77e      	b.n	8012486 <_dtoa_r+0x6fe>
 8012588:	9f07      	ldr	r7, [sp, #28]
 801258a:	9d05      	ldr	r5, [sp, #20]
 801258c:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 801258e:	e783      	b.n	8012498 <_dtoa_r+0x710>
 8012590:	9a07      	ldr	r2, [sp, #28]
 8012592:	e7ab      	b.n	80124ec <_dtoa_r+0x764>
 8012594:	2300      	movs	r3, #0
 8012596:	e7d4      	b.n	8012542 <_dtoa_r+0x7ba>
 8012598:	9b00      	ldr	r3, [sp, #0]
 801259a:	e7d2      	b.n	8012542 <_dtoa_r+0x7ba>
 801259c:	2300      	movs	r3, #0
 801259e:	9307      	str	r3, [sp, #28]
 80125a0:	693b      	ldr	r3, [r7, #16]
 80125a2:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 80125a6:	6918      	ldr	r0, [r3, #16]
 80125a8:	f000 fdb8 	bl	801311c <__hi0bits>
 80125ac:	f1c0 0020 	rsb	r0, r0, #32
 80125b0:	4440      	add	r0, r8
 80125b2:	f010 001f 	ands.w	r0, r0, #31
 80125b6:	d047      	beq.n	8012648 <_dtoa_r+0x8c0>
 80125b8:	f1c0 0320 	rsb	r3, r0, #32
 80125bc:	2b04      	cmp	r3, #4
 80125be:	dd3b      	ble.n	8012638 <_dtoa_r+0x8b0>
 80125c0:	9b05      	ldr	r3, [sp, #20]
 80125c2:	f1c0 001c 	rsb	r0, r0, #28
 80125c6:	4403      	add	r3, r0
 80125c8:	9305      	str	r3, [sp, #20]
 80125ca:	4405      	add	r5, r0
 80125cc:	4480      	add	r8, r0
 80125ce:	9b05      	ldr	r3, [sp, #20]
 80125d0:	2b00      	cmp	r3, #0
 80125d2:	dd05      	ble.n	80125e0 <_dtoa_r+0x858>
 80125d4:	461a      	mov	r2, r3
 80125d6:	9904      	ldr	r1, [sp, #16]
 80125d8:	4620      	mov	r0, r4
 80125da:	f000 fedb 	bl	8013394 <__lshift>
 80125de:	9004      	str	r0, [sp, #16]
 80125e0:	f1b8 0f00 	cmp.w	r8, #0
 80125e4:	dd05      	ble.n	80125f2 <_dtoa_r+0x86a>
 80125e6:	4639      	mov	r1, r7
 80125e8:	4642      	mov	r2, r8
 80125ea:	4620      	mov	r0, r4
 80125ec:	f000 fed2 	bl	8013394 <__lshift>
 80125f0:	4607      	mov	r7, r0
 80125f2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80125f4:	b353      	cbz	r3, 801264c <_dtoa_r+0x8c4>
 80125f6:	4639      	mov	r1, r7
 80125f8:	9804      	ldr	r0, [sp, #16]
 80125fa:	f000 ff1f 	bl	801343c <__mcmp>
 80125fe:	2800      	cmp	r0, #0
 8012600:	da24      	bge.n	801264c <_dtoa_r+0x8c4>
 8012602:	2300      	movs	r3, #0
 8012604:	220a      	movs	r2, #10
 8012606:	9904      	ldr	r1, [sp, #16]
 8012608:	4620      	mov	r0, r4
 801260a:	f000 fd0e 	bl	801302a <__multadd>
 801260e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012610:	9004      	str	r0, [sp, #16]
 8012612:	f10a 3aff 	add.w	sl, sl, #4294967295
 8012616:	2b00      	cmp	r3, #0
 8012618:	f000 814d 	beq.w	80128b6 <_dtoa_r+0xb2e>
 801261c:	2300      	movs	r3, #0
 801261e:	4631      	mov	r1, r6
 8012620:	220a      	movs	r2, #10
 8012622:	4620      	mov	r0, r4
 8012624:	f000 fd01 	bl	801302a <__multadd>
 8012628:	9b02      	ldr	r3, [sp, #8]
 801262a:	2b00      	cmp	r3, #0
 801262c:	4606      	mov	r6, r0
 801262e:	dc4f      	bgt.n	80126d0 <_dtoa_r+0x948>
 8012630:	9b06      	ldr	r3, [sp, #24]
 8012632:	2b02      	cmp	r3, #2
 8012634:	dd4c      	ble.n	80126d0 <_dtoa_r+0x948>
 8012636:	e011      	b.n	801265c <_dtoa_r+0x8d4>
 8012638:	d0c9      	beq.n	80125ce <_dtoa_r+0x846>
 801263a:	9a05      	ldr	r2, [sp, #20]
 801263c:	331c      	adds	r3, #28
 801263e:	441a      	add	r2, r3
 8012640:	9205      	str	r2, [sp, #20]
 8012642:	441d      	add	r5, r3
 8012644:	4498      	add	r8, r3
 8012646:	e7c2      	b.n	80125ce <_dtoa_r+0x846>
 8012648:	4603      	mov	r3, r0
 801264a:	e7f6      	b.n	801263a <_dtoa_r+0x8b2>
 801264c:	f1b9 0f00 	cmp.w	r9, #0
 8012650:	dc38      	bgt.n	80126c4 <_dtoa_r+0x93c>
 8012652:	9b06      	ldr	r3, [sp, #24]
 8012654:	2b02      	cmp	r3, #2
 8012656:	dd35      	ble.n	80126c4 <_dtoa_r+0x93c>
 8012658:	f8cd 9008 	str.w	r9, [sp, #8]
 801265c:	9b02      	ldr	r3, [sp, #8]
 801265e:	b963      	cbnz	r3, 801267a <_dtoa_r+0x8f2>
 8012660:	4639      	mov	r1, r7
 8012662:	2205      	movs	r2, #5
 8012664:	4620      	mov	r0, r4
 8012666:	f000 fce0 	bl	801302a <__multadd>
 801266a:	4601      	mov	r1, r0
 801266c:	4607      	mov	r7, r0
 801266e:	9804      	ldr	r0, [sp, #16]
 8012670:	f000 fee4 	bl	801343c <__mcmp>
 8012674:	2800      	cmp	r0, #0
 8012676:	f73f adcc 	bgt.w	8012212 <_dtoa_r+0x48a>
 801267a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801267c:	465d      	mov	r5, fp
 801267e:	ea6f 0a03 	mvn.w	sl, r3
 8012682:	f04f 0900 	mov.w	r9, #0
 8012686:	4639      	mov	r1, r7
 8012688:	4620      	mov	r0, r4
 801268a:	f000 fcb7 	bl	8012ffc <_Bfree>
 801268e:	2e00      	cmp	r6, #0
 8012690:	f43f aeb7 	beq.w	8012402 <_dtoa_r+0x67a>
 8012694:	f1b9 0f00 	cmp.w	r9, #0
 8012698:	d005      	beq.n	80126a6 <_dtoa_r+0x91e>
 801269a:	45b1      	cmp	r9, r6
 801269c:	d003      	beq.n	80126a6 <_dtoa_r+0x91e>
 801269e:	4649      	mov	r1, r9
 80126a0:	4620      	mov	r0, r4
 80126a2:	f000 fcab 	bl	8012ffc <_Bfree>
 80126a6:	4631      	mov	r1, r6
 80126a8:	4620      	mov	r0, r4
 80126aa:	f000 fca7 	bl	8012ffc <_Bfree>
 80126ae:	e6a8      	b.n	8012402 <_dtoa_r+0x67a>
 80126b0:	2700      	movs	r7, #0
 80126b2:	463e      	mov	r6, r7
 80126b4:	e7e1      	b.n	801267a <_dtoa_r+0x8f2>
 80126b6:	f8dd a020 	ldr.w	sl, [sp, #32]
 80126ba:	463e      	mov	r6, r7
 80126bc:	e5a9      	b.n	8012212 <_dtoa_r+0x48a>
 80126be:	bf00      	nop
 80126c0:	40240000 	.word	0x40240000
 80126c4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80126c6:	f8cd 9008 	str.w	r9, [sp, #8]
 80126ca:	2b00      	cmp	r3, #0
 80126cc:	f000 80fa 	beq.w	80128c4 <_dtoa_r+0xb3c>
 80126d0:	2d00      	cmp	r5, #0
 80126d2:	dd05      	ble.n	80126e0 <_dtoa_r+0x958>
 80126d4:	4631      	mov	r1, r6
 80126d6:	462a      	mov	r2, r5
 80126d8:	4620      	mov	r0, r4
 80126da:	f000 fe5b 	bl	8013394 <__lshift>
 80126de:	4606      	mov	r6, r0
 80126e0:	9b07      	ldr	r3, [sp, #28]
 80126e2:	2b00      	cmp	r3, #0
 80126e4:	d04c      	beq.n	8012780 <_dtoa_r+0x9f8>
 80126e6:	6871      	ldr	r1, [r6, #4]
 80126e8:	4620      	mov	r0, r4
 80126ea:	f000 fc53 	bl	8012f94 <_Balloc>
 80126ee:	6932      	ldr	r2, [r6, #16]
 80126f0:	3202      	adds	r2, #2
 80126f2:	4605      	mov	r5, r0
 80126f4:	0092      	lsls	r2, r2, #2
 80126f6:	f106 010c 	add.w	r1, r6, #12
 80126fa:	300c      	adds	r0, #12
 80126fc:	f7fd fcc6 	bl	801008c <memcpy>
 8012700:	2201      	movs	r2, #1
 8012702:	4629      	mov	r1, r5
 8012704:	4620      	mov	r0, r4
 8012706:	f000 fe45 	bl	8013394 <__lshift>
 801270a:	9b00      	ldr	r3, [sp, #0]
 801270c:	f8cd b014 	str.w	fp, [sp, #20]
 8012710:	f003 0301 	and.w	r3, r3, #1
 8012714:	46b1      	mov	r9, r6
 8012716:	9307      	str	r3, [sp, #28]
 8012718:	4606      	mov	r6, r0
 801271a:	4639      	mov	r1, r7
 801271c:	9804      	ldr	r0, [sp, #16]
 801271e:	f7ff faa5 	bl	8011c6c <quorem>
 8012722:	4649      	mov	r1, r9
 8012724:	4605      	mov	r5, r0
 8012726:	f100 0830 	add.w	r8, r0, #48	; 0x30
 801272a:	9804      	ldr	r0, [sp, #16]
 801272c:	f000 fe86 	bl	801343c <__mcmp>
 8012730:	4632      	mov	r2, r6
 8012732:	9000      	str	r0, [sp, #0]
 8012734:	4639      	mov	r1, r7
 8012736:	4620      	mov	r0, r4
 8012738:	f000 fe9a 	bl	8013470 <__mdiff>
 801273c:	68c3      	ldr	r3, [r0, #12]
 801273e:	4602      	mov	r2, r0
 8012740:	bb03      	cbnz	r3, 8012784 <_dtoa_r+0x9fc>
 8012742:	4601      	mov	r1, r0
 8012744:	9008      	str	r0, [sp, #32]
 8012746:	9804      	ldr	r0, [sp, #16]
 8012748:	f000 fe78 	bl	801343c <__mcmp>
 801274c:	9a08      	ldr	r2, [sp, #32]
 801274e:	4603      	mov	r3, r0
 8012750:	4611      	mov	r1, r2
 8012752:	4620      	mov	r0, r4
 8012754:	9308      	str	r3, [sp, #32]
 8012756:	f000 fc51 	bl	8012ffc <_Bfree>
 801275a:	9b08      	ldr	r3, [sp, #32]
 801275c:	b9a3      	cbnz	r3, 8012788 <_dtoa_r+0xa00>
 801275e:	9a06      	ldr	r2, [sp, #24]
 8012760:	b992      	cbnz	r2, 8012788 <_dtoa_r+0xa00>
 8012762:	9a07      	ldr	r2, [sp, #28]
 8012764:	b982      	cbnz	r2, 8012788 <_dtoa_r+0xa00>
 8012766:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 801276a:	d029      	beq.n	80127c0 <_dtoa_r+0xa38>
 801276c:	9b00      	ldr	r3, [sp, #0]
 801276e:	2b00      	cmp	r3, #0
 8012770:	dd01      	ble.n	8012776 <_dtoa_r+0x9ee>
 8012772:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8012776:	9b05      	ldr	r3, [sp, #20]
 8012778:	1c5d      	adds	r5, r3, #1
 801277a:	f883 8000 	strb.w	r8, [r3]
 801277e:	e782      	b.n	8012686 <_dtoa_r+0x8fe>
 8012780:	4630      	mov	r0, r6
 8012782:	e7c2      	b.n	801270a <_dtoa_r+0x982>
 8012784:	2301      	movs	r3, #1
 8012786:	e7e3      	b.n	8012750 <_dtoa_r+0x9c8>
 8012788:	9a00      	ldr	r2, [sp, #0]
 801278a:	2a00      	cmp	r2, #0
 801278c:	db04      	blt.n	8012798 <_dtoa_r+0xa10>
 801278e:	d125      	bne.n	80127dc <_dtoa_r+0xa54>
 8012790:	9a06      	ldr	r2, [sp, #24]
 8012792:	bb1a      	cbnz	r2, 80127dc <_dtoa_r+0xa54>
 8012794:	9a07      	ldr	r2, [sp, #28]
 8012796:	bb0a      	cbnz	r2, 80127dc <_dtoa_r+0xa54>
 8012798:	2b00      	cmp	r3, #0
 801279a:	ddec      	ble.n	8012776 <_dtoa_r+0x9ee>
 801279c:	2201      	movs	r2, #1
 801279e:	9904      	ldr	r1, [sp, #16]
 80127a0:	4620      	mov	r0, r4
 80127a2:	f000 fdf7 	bl	8013394 <__lshift>
 80127a6:	4639      	mov	r1, r7
 80127a8:	9004      	str	r0, [sp, #16]
 80127aa:	f000 fe47 	bl	801343c <__mcmp>
 80127ae:	2800      	cmp	r0, #0
 80127b0:	dc03      	bgt.n	80127ba <_dtoa_r+0xa32>
 80127b2:	d1e0      	bne.n	8012776 <_dtoa_r+0x9ee>
 80127b4:	f018 0f01 	tst.w	r8, #1
 80127b8:	d0dd      	beq.n	8012776 <_dtoa_r+0x9ee>
 80127ba:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80127be:	d1d8      	bne.n	8012772 <_dtoa_r+0x9ea>
 80127c0:	9b05      	ldr	r3, [sp, #20]
 80127c2:	9a05      	ldr	r2, [sp, #20]
 80127c4:	1c5d      	adds	r5, r3, #1
 80127c6:	2339      	movs	r3, #57	; 0x39
 80127c8:	7013      	strb	r3, [r2, #0]
 80127ca:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80127ce:	2b39      	cmp	r3, #57	; 0x39
 80127d0:	f105 32ff 	add.w	r2, r5, #4294967295
 80127d4:	d04f      	beq.n	8012876 <_dtoa_r+0xaee>
 80127d6:	3301      	adds	r3, #1
 80127d8:	7013      	strb	r3, [r2, #0]
 80127da:	e754      	b.n	8012686 <_dtoa_r+0x8fe>
 80127dc:	9a05      	ldr	r2, [sp, #20]
 80127de:	2b00      	cmp	r3, #0
 80127e0:	f102 0501 	add.w	r5, r2, #1
 80127e4:	dd06      	ble.n	80127f4 <_dtoa_r+0xa6c>
 80127e6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80127ea:	d0e9      	beq.n	80127c0 <_dtoa_r+0xa38>
 80127ec:	f108 0801 	add.w	r8, r8, #1
 80127f0:	9b05      	ldr	r3, [sp, #20]
 80127f2:	e7c2      	b.n	801277a <_dtoa_r+0x9f2>
 80127f4:	9a02      	ldr	r2, [sp, #8]
 80127f6:	f805 8c01 	strb.w	r8, [r5, #-1]
 80127fa:	eba5 030b 	sub.w	r3, r5, fp
 80127fe:	4293      	cmp	r3, r2
 8012800:	d021      	beq.n	8012846 <_dtoa_r+0xabe>
 8012802:	2300      	movs	r3, #0
 8012804:	220a      	movs	r2, #10
 8012806:	9904      	ldr	r1, [sp, #16]
 8012808:	4620      	mov	r0, r4
 801280a:	f000 fc0e 	bl	801302a <__multadd>
 801280e:	45b1      	cmp	r9, r6
 8012810:	9004      	str	r0, [sp, #16]
 8012812:	f04f 0300 	mov.w	r3, #0
 8012816:	f04f 020a 	mov.w	r2, #10
 801281a:	4649      	mov	r1, r9
 801281c:	4620      	mov	r0, r4
 801281e:	d105      	bne.n	801282c <_dtoa_r+0xaa4>
 8012820:	f000 fc03 	bl	801302a <__multadd>
 8012824:	4681      	mov	r9, r0
 8012826:	4606      	mov	r6, r0
 8012828:	9505      	str	r5, [sp, #20]
 801282a:	e776      	b.n	801271a <_dtoa_r+0x992>
 801282c:	f000 fbfd 	bl	801302a <__multadd>
 8012830:	4631      	mov	r1, r6
 8012832:	4681      	mov	r9, r0
 8012834:	2300      	movs	r3, #0
 8012836:	220a      	movs	r2, #10
 8012838:	4620      	mov	r0, r4
 801283a:	f000 fbf6 	bl	801302a <__multadd>
 801283e:	4606      	mov	r6, r0
 8012840:	e7f2      	b.n	8012828 <_dtoa_r+0xaa0>
 8012842:	f04f 0900 	mov.w	r9, #0
 8012846:	2201      	movs	r2, #1
 8012848:	9904      	ldr	r1, [sp, #16]
 801284a:	4620      	mov	r0, r4
 801284c:	f000 fda2 	bl	8013394 <__lshift>
 8012850:	4639      	mov	r1, r7
 8012852:	9004      	str	r0, [sp, #16]
 8012854:	f000 fdf2 	bl	801343c <__mcmp>
 8012858:	2800      	cmp	r0, #0
 801285a:	dcb6      	bgt.n	80127ca <_dtoa_r+0xa42>
 801285c:	d102      	bne.n	8012864 <_dtoa_r+0xadc>
 801285e:	f018 0f01 	tst.w	r8, #1
 8012862:	d1b2      	bne.n	80127ca <_dtoa_r+0xa42>
 8012864:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8012868:	2b30      	cmp	r3, #48	; 0x30
 801286a:	f105 32ff 	add.w	r2, r5, #4294967295
 801286e:	f47f af0a 	bne.w	8012686 <_dtoa_r+0x8fe>
 8012872:	4615      	mov	r5, r2
 8012874:	e7f6      	b.n	8012864 <_dtoa_r+0xadc>
 8012876:	4593      	cmp	fp, r2
 8012878:	d105      	bne.n	8012886 <_dtoa_r+0xafe>
 801287a:	2331      	movs	r3, #49	; 0x31
 801287c:	f10a 0a01 	add.w	sl, sl, #1
 8012880:	f88b 3000 	strb.w	r3, [fp]
 8012884:	e6ff      	b.n	8012686 <_dtoa_r+0x8fe>
 8012886:	4615      	mov	r5, r2
 8012888:	e79f      	b.n	80127ca <_dtoa_r+0xa42>
 801288a:	f8df b064 	ldr.w	fp, [pc, #100]	; 80128f0 <_dtoa_r+0xb68>
 801288e:	e007      	b.n	80128a0 <_dtoa_r+0xb18>
 8012890:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8012892:	f8df b060 	ldr.w	fp, [pc, #96]	; 80128f4 <_dtoa_r+0xb6c>
 8012896:	b11b      	cbz	r3, 80128a0 <_dtoa_r+0xb18>
 8012898:	f10b 0308 	add.w	r3, fp, #8
 801289c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801289e:	6013      	str	r3, [r2, #0]
 80128a0:	4658      	mov	r0, fp
 80128a2:	b017      	add	sp, #92	; 0x5c
 80128a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80128a8:	9b06      	ldr	r3, [sp, #24]
 80128aa:	2b01      	cmp	r3, #1
 80128ac:	f77f ae35 	ble.w	801251a <_dtoa_r+0x792>
 80128b0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80128b2:	9307      	str	r3, [sp, #28]
 80128b4:	e649      	b.n	801254a <_dtoa_r+0x7c2>
 80128b6:	9b02      	ldr	r3, [sp, #8]
 80128b8:	2b00      	cmp	r3, #0
 80128ba:	dc03      	bgt.n	80128c4 <_dtoa_r+0xb3c>
 80128bc:	9b06      	ldr	r3, [sp, #24]
 80128be:	2b02      	cmp	r3, #2
 80128c0:	f73f aecc 	bgt.w	801265c <_dtoa_r+0x8d4>
 80128c4:	465d      	mov	r5, fp
 80128c6:	4639      	mov	r1, r7
 80128c8:	9804      	ldr	r0, [sp, #16]
 80128ca:	f7ff f9cf 	bl	8011c6c <quorem>
 80128ce:	f100 0830 	add.w	r8, r0, #48	; 0x30
 80128d2:	f805 8b01 	strb.w	r8, [r5], #1
 80128d6:	9a02      	ldr	r2, [sp, #8]
 80128d8:	eba5 030b 	sub.w	r3, r5, fp
 80128dc:	429a      	cmp	r2, r3
 80128de:	ddb0      	ble.n	8012842 <_dtoa_r+0xaba>
 80128e0:	2300      	movs	r3, #0
 80128e2:	220a      	movs	r2, #10
 80128e4:	9904      	ldr	r1, [sp, #16]
 80128e6:	4620      	mov	r0, r4
 80128e8:	f000 fb9f 	bl	801302a <__multadd>
 80128ec:	9004      	str	r0, [sp, #16]
 80128ee:	e7ea      	b.n	80128c6 <_dtoa_r+0xb3e>
 80128f0:	08015a08 	.word	0x08015a08
 80128f4:	08015a88 	.word	0x08015a88

080128f8 <rshift>:
 80128f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80128fa:	6906      	ldr	r6, [r0, #16]
 80128fc:	114b      	asrs	r3, r1, #5
 80128fe:	429e      	cmp	r6, r3
 8012900:	f100 0414 	add.w	r4, r0, #20
 8012904:	dd30      	ble.n	8012968 <rshift+0x70>
 8012906:	f011 011f 	ands.w	r1, r1, #31
 801290a:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 801290e:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 8012912:	d108      	bne.n	8012926 <rshift+0x2e>
 8012914:	4621      	mov	r1, r4
 8012916:	42b2      	cmp	r2, r6
 8012918:	460b      	mov	r3, r1
 801291a:	d211      	bcs.n	8012940 <rshift+0x48>
 801291c:	f852 3b04 	ldr.w	r3, [r2], #4
 8012920:	f841 3b04 	str.w	r3, [r1], #4
 8012924:	e7f7      	b.n	8012916 <rshift+0x1e>
 8012926:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 801292a:	f1c1 0c20 	rsb	ip, r1, #32
 801292e:	40cd      	lsrs	r5, r1
 8012930:	3204      	adds	r2, #4
 8012932:	4623      	mov	r3, r4
 8012934:	42b2      	cmp	r2, r6
 8012936:	4617      	mov	r7, r2
 8012938:	d30c      	bcc.n	8012954 <rshift+0x5c>
 801293a:	601d      	str	r5, [r3, #0]
 801293c:	b105      	cbz	r5, 8012940 <rshift+0x48>
 801293e:	3304      	adds	r3, #4
 8012940:	1b1a      	subs	r2, r3, r4
 8012942:	42a3      	cmp	r3, r4
 8012944:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8012948:	bf08      	it	eq
 801294a:	2300      	moveq	r3, #0
 801294c:	6102      	str	r2, [r0, #16]
 801294e:	bf08      	it	eq
 8012950:	6143      	streq	r3, [r0, #20]
 8012952:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012954:	683f      	ldr	r7, [r7, #0]
 8012956:	fa07 f70c 	lsl.w	r7, r7, ip
 801295a:	433d      	orrs	r5, r7
 801295c:	f843 5b04 	str.w	r5, [r3], #4
 8012960:	f852 5b04 	ldr.w	r5, [r2], #4
 8012964:	40cd      	lsrs	r5, r1
 8012966:	e7e5      	b.n	8012934 <rshift+0x3c>
 8012968:	4623      	mov	r3, r4
 801296a:	e7e9      	b.n	8012940 <rshift+0x48>

0801296c <__hexdig_fun>:
 801296c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8012970:	2b09      	cmp	r3, #9
 8012972:	d802      	bhi.n	801297a <__hexdig_fun+0xe>
 8012974:	3820      	subs	r0, #32
 8012976:	b2c0      	uxtb	r0, r0
 8012978:	4770      	bx	lr
 801297a:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 801297e:	2b05      	cmp	r3, #5
 8012980:	d801      	bhi.n	8012986 <__hexdig_fun+0x1a>
 8012982:	3847      	subs	r0, #71	; 0x47
 8012984:	e7f7      	b.n	8012976 <__hexdig_fun+0xa>
 8012986:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 801298a:	2b05      	cmp	r3, #5
 801298c:	d801      	bhi.n	8012992 <__hexdig_fun+0x26>
 801298e:	3827      	subs	r0, #39	; 0x27
 8012990:	e7f1      	b.n	8012976 <__hexdig_fun+0xa>
 8012992:	2000      	movs	r0, #0
 8012994:	4770      	bx	lr

08012996 <__gethex>:
 8012996:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801299a:	b08b      	sub	sp, #44	; 0x2c
 801299c:	468a      	mov	sl, r1
 801299e:	9002      	str	r0, [sp, #8]
 80129a0:	9816      	ldr	r0, [sp, #88]	; 0x58
 80129a2:	9306      	str	r3, [sp, #24]
 80129a4:	4690      	mov	r8, r2
 80129a6:	f000 fad0 	bl	8012f4a <__localeconv_l>
 80129aa:	6803      	ldr	r3, [r0, #0]
 80129ac:	9303      	str	r3, [sp, #12]
 80129ae:	4618      	mov	r0, r3
 80129b0:	f7ed fc0e 	bl	80001d0 <strlen>
 80129b4:	9b03      	ldr	r3, [sp, #12]
 80129b6:	9001      	str	r0, [sp, #4]
 80129b8:	4403      	add	r3, r0
 80129ba:	f04f 0b00 	mov.w	fp, #0
 80129be:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 80129c2:	9307      	str	r3, [sp, #28]
 80129c4:	f8da 3000 	ldr.w	r3, [sl]
 80129c8:	3302      	adds	r3, #2
 80129ca:	461f      	mov	r7, r3
 80129cc:	f813 0b01 	ldrb.w	r0, [r3], #1
 80129d0:	2830      	cmp	r0, #48	; 0x30
 80129d2:	d06c      	beq.n	8012aae <__gethex+0x118>
 80129d4:	f7ff ffca 	bl	801296c <__hexdig_fun>
 80129d8:	4604      	mov	r4, r0
 80129da:	2800      	cmp	r0, #0
 80129dc:	d16a      	bne.n	8012ab4 <__gethex+0x11e>
 80129de:	9a01      	ldr	r2, [sp, #4]
 80129e0:	9903      	ldr	r1, [sp, #12]
 80129e2:	4638      	mov	r0, r7
 80129e4:	f7fe fa82 	bl	8010eec <strncmp>
 80129e8:	2800      	cmp	r0, #0
 80129ea:	d166      	bne.n	8012aba <__gethex+0x124>
 80129ec:	9b01      	ldr	r3, [sp, #4]
 80129ee:	5cf8      	ldrb	r0, [r7, r3]
 80129f0:	18fe      	adds	r6, r7, r3
 80129f2:	f7ff ffbb 	bl	801296c <__hexdig_fun>
 80129f6:	2800      	cmp	r0, #0
 80129f8:	d062      	beq.n	8012ac0 <__gethex+0x12a>
 80129fa:	4633      	mov	r3, r6
 80129fc:	7818      	ldrb	r0, [r3, #0]
 80129fe:	2830      	cmp	r0, #48	; 0x30
 8012a00:	461f      	mov	r7, r3
 8012a02:	f103 0301 	add.w	r3, r3, #1
 8012a06:	d0f9      	beq.n	80129fc <__gethex+0x66>
 8012a08:	f7ff ffb0 	bl	801296c <__hexdig_fun>
 8012a0c:	fab0 f580 	clz	r5, r0
 8012a10:	096d      	lsrs	r5, r5, #5
 8012a12:	4634      	mov	r4, r6
 8012a14:	f04f 0b01 	mov.w	fp, #1
 8012a18:	463a      	mov	r2, r7
 8012a1a:	4616      	mov	r6, r2
 8012a1c:	3201      	adds	r2, #1
 8012a1e:	7830      	ldrb	r0, [r6, #0]
 8012a20:	f7ff ffa4 	bl	801296c <__hexdig_fun>
 8012a24:	2800      	cmp	r0, #0
 8012a26:	d1f8      	bne.n	8012a1a <__gethex+0x84>
 8012a28:	9a01      	ldr	r2, [sp, #4]
 8012a2a:	9903      	ldr	r1, [sp, #12]
 8012a2c:	4630      	mov	r0, r6
 8012a2e:	f7fe fa5d 	bl	8010eec <strncmp>
 8012a32:	b950      	cbnz	r0, 8012a4a <__gethex+0xb4>
 8012a34:	b954      	cbnz	r4, 8012a4c <__gethex+0xb6>
 8012a36:	9b01      	ldr	r3, [sp, #4]
 8012a38:	18f4      	adds	r4, r6, r3
 8012a3a:	4622      	mov	r2, r4
 8012a3c:	4616      	mov	r6, r2
 8012a3e:	3201      	adds	r2, #1
 8012a40:	7830      	ldrb	r0, [r6, #0]
 8012a42:	f7ff ff93 	bl	801296c <__hexdig_fun>
 8012a46:	2800      	cmp	r0, #0
 8012a48:	d1f8      	bne.n	8012a3c <__gethex+0xa6>
 8012a4a:	b10c      	cbz	r4, 8012a50 <__gethex+0xba>
 8012a4c:	1ba4      	subs	r4, r4, r6
 8012a4e:	00a4      	lsls	r4, r4, #2
 8012a50:	7833      	ldrb	r3, [r6, #0]
 8012a52:	2b50      	cmp	r3, #80	; 0x50
 8012a54:	d001      	beq.n	8012a5a <__gethex+0xc4>
 8012a56:	2b70      	cmp	r3, #112	; 0x70
 8012a58:	d140      	bne.n	8012adc <__gethex+0x146>
 8012a5a:	7873      	ldrb	r3, [r6, #1]
 8012a5c:	2b2b      	cmp	r3, #43	; 0x2b
 8012a5e:	d031      	beq.n	8012ac4 <__gethex+0x12e>
 8012a60:	2b2d      	cmp	r3, #45	; 0x2d
 8012a62:	d033      	beq.n	8012acc <__gethex+0x136>
 8012a64:	1c71      	adds	r1, r6, #1
 8012a66:	f04f 0900 	mov.w	r9, #0
 8012a6a:	7808      	ldrb	r0, [r1, #0]
 8012a6c:	f7ff ff7e 	bl	801296c <__hexdig_fun>
 8012a70:	1e43      	subs	r3, r0, #1
 8012a72:	b2db      	uxtb	r3, r3
 8012a74:	2b18      	cmp	r3, #24
 8012a76:	d831      	bhi.n	8012adc <__gethex+0x146>
 8012a78:	f1a0 0210 	sub.w	r2, r0, #16
 8012a7c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8012a80:	f7ff ff74 	bl	801296c <__hexdig_fun>
 8012a84:	1e43      	subs	r3, r0, #1
 8012a86:	b2db      	uxtb	r3, r3
 8012a88:	2b18      	cmp	r3, #24
 8012a8a:	d922      	bls.n	8012ad2 <__gethex+0x13c>
 8012a8c:	f1b9 0f00 	cmp.w	r9, #0
 8012a90:	d000      	beq.n	8012a94 <__gethex+0xfe>
 8012a92:	4252      	negs	r2, r2
 8012a94:	4414      	add	r4, r2
 8012a96:	f8ca 1000 	str.w	r1, [sl]
 8012a9a:	b30d      	cbz	r5, 8012ae0 <__gethex+0x14a>
 8012a9c:	f1bb 0f00 	cmp.w	fp, #0
 8012aa0:	bf0c      	ite	eq
 8012aa2:	2706      	moveq	r7, #6
 8012aa4:	2700      	movne	r7, #0
 8012aa6:	4638      	mov	r0, r7
 8012aa8:	b00b      	add	sp, #44	; 0x2c
 8012aaa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012aae:	f10b 0b01 	add.w	fp, fp, #1
 8012ab2:	e78a      	b.n	80129ca <__gethex+0x34>
 8012ab4:	2500      	movs	r5, #0
 8012ab6:	462c      	mov	r4, r5
 8012ab8:	e7ae      	b.n	8012a18 <__gethex+0x82>
 8012aba:	463e      	mov	r6, r7
 8012abc:	2501      	movs	r5, #1
 8012abe:	e7c7      	b.n	8012a50 <__gethex+0xba>
 8012ac0:	4604      	mov	r4, r0
 8012ac2:	e7fb      	b.n	8012abc <__gethex+0x126>
 8012ac4:	f04f 0900 	mov.w	r9, #0
 8012ac8:	1cb1      	adds	r1, r6, #2
 8012aca:	e7ce      	b.n	8012a6a <__gethex+0xd4>
 8012acc:	f04f 0901 	mov.w	r9, #1
 8012ad0:	e7fa      	b.n	8012ac8 <__gethex+0x132>
 8012ad2:	230a      	movs	r3, #10
 8012ad4:	fb03 0202 	mla	r2, r3, r2, r0
 8012ad8:	3a10      	subs	r2, #16
 8012ada:	e7cf      	b.n	8012a7c <__gethex+0xe6>
 8012adc:	4631      	mov	r1, r6
 8012ade:	e7da      	b.n	8012a96 <__gethex+0x100>
 8012ae0:	1bf3      	subs	r3, r6, r7
 8012ae2:	3b01      	subs	r3, #1
 8012ae4:	4629      	mov	r1, r5
 8012ae6:	2b07      	cmp	r3, #7
 8012ae8:	dc49      	bgt.n	8012b7e <__gethex+0x1e8>
 8012aea:	9802      	ldr	r0, [sp, #8]
 8012aec:	f000 fa52 	bl	8012f94 <_Balloc>
 8012af0:	9b01      	ldr	r3, [sp, #4]
 8012af2:	f100 0914 	add.w	r9, r0, #20
 8012af6:	f04f 0b00 	mov.w	fp, #0
 8012afa:	f1c3 0301 	rsb	r3, r3, #1
 8012afe:	4605      	mov	r5, r0
 8012b00:	f8cd 9010 	str.w	r9, [sp, #16]
 8012b04:	46da      	mov	sl, fp
 8012b06:	9308      	str	r3, [sp, #32]
 8012b08:	42b7      	cmp	r7, r6
 8012b0a:	d33b      	bcc.n	8012b84 <__gethex+0x1ee>
 8012b0c:	9804      	ldr	r0, [sp, #16]
 8012b0e:	f840 ab04 	str.w	sl, [r0], #4
 8012b12:	eba0 0009 	sub.w	r0, r0, r9
 8012b16:	1080      	asrs	r0, r0, #2
 8012b18:	6128      	str	r0, [r5, #16]
 8012b1a:	0147      	lsls	r7, r0, #5
 8012b1c:	4650      	mov	r0, sl
 8012b1e:	f000 fafd 	bl	801311c <__hi0bits>
 8012b22:	f8d8 6000 	ldr.w	r6, [r8]
 8012b26:	1a3f      	subs	r7, r7, r0
 8012b28:	42b7      	cmp	r7, r6
 8012b2a:	dd64      	ble.n	8012bf6 <__gethex+0x260>
 8012b2c:	1bbf      	subs	r7, r7, r6
 8012b2e:	4639      	mov	r1, r7
 8012b30:	4628      	mov	r0, r5
 8012b32:	f000 fe0d 	bl	8013750 <__any_on>
 8012b36:	4682      	mov	sl, r0
 8012b38:	b178      	cbz	r0, 8012b5a <__gethex+0x1c4>
 8012b3a:	1e7b      	subs	r3, r7, #1
 8012b3c:	1159      	asrs	r1, r3, #5
 8012b3e:	f003 021f 	and.w	r2, r3, #31
 8012b42:	f04f 0a01 	mov.w	sl, #1
 8012b46:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8012b4a:	fa0a f202 	lsl.w	r2, sl, r2
 8012b4e:	420a      	tst	r2, r1
 8012b50:	d003      	beq.n	8012b5a <__gethex+0x1c4>
 8012b52:	4553      	cmp	r3, sl
 8012b54:	dc46      	bgt.n	8012be4 <__gethex+0x24e>
 8012b56:	f04f 0a02 	mov.w	sl, #2
 8012b5a:	4639      	mov	r1, r7
 8012b5c:	4628      	mov	r0, r5
 8012b5e:	f7ff fecb 	bl	80128f8 <rshift>
 8012b62:	443c      	add	r4, r7
 8012b64:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8012b68:	42a3      	cmp	r3, r4
 8012b6a:	da52      	bge.n	8012c12 <__gethex+0x27c>
 8012b6c:	4629      	mov	r1, r5
 8012b6e:	9802      	ldr	r0, [sp, #8]
 8012b70:	f000 fa44 	bl	8012ffc <_Bfree>
 8012b74:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8012b76:	2300      	movs	r3, #0
 8012b78:	6013      	str	r3, [r2, #0]
 8012b7a:	27a3      	movs	r7, #163	; 0xa3
 8012b7c:	e793      	b.n	8012aa6 <__gethex+0x110>
 8012b7e:	3101      	adds	r1, #1
 8012b80:	105b      	asrs	r3, r3, #1
 8012b82:	e7b0      	b.n	8012ae6 <__gethex+0x150>
 8012b84:	1e73      	subs	r3, r6, #1
 8012b86:	9305      	str	r3, [sp, #20]
 8012b88:	9a07      	ldr	r2, [sp, #28]
 8012b8a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8012b8e:	4293      	cmp	r3, r2
 8012b90:	d018      	beq.n	8012bc4 <__gethex+0x22e>
 8012b92:	f1bb 0f20 	cmp.w	fp, #32
 8012b96:	d107      	bne.n	8012ba8 <__gethex+0x212>
 8012b98:	9b04      	ldr	r3, [sp, #16]
 8012b9a:	f8c3 a000 	str.w	sl, [r3]
 8012b9e:	3304      	adds	r3, #4
 8012ba0:	f04f 0a00 	mov.w	sl, #0
 8012ba4:	9304      	str	r3, [sp, #16]
 8012ba6:	46d3      	mov	fp, sl
 8012ba8:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8012bac:	f7ff fede 	bl	801296c <__hexdig_fun>
 8012bb0:	f000 000f 	and.w	r0, r0, #15
 8012bb4:	fa00 f00b 	lsl.w	r0, r0, fp
 8012bb8:	ea4a 0a00 	orr.w	sl, sl, r0
 8012bbc:	f10b 0b04 	add.w	fp, fp, #4
 8012bc0:	9b05      	ldr	r3, [sp, #20]
 8012bc2:	e00d      	b.n	8012be0 <__gethex+0x24a>
 8012bc4:	9b05      	ldr	r3, [sp, #20]
 8012bc6:	9a08      	ldr	r2, [sp, #32]
 8012bc8:	4413      	add	r3, r2
 8012bca:	42bb      	cmp	r3, r7
 8012bcc:	d3e1      	bcc.n	8012b92 <__gethex+0x1fc>
 8012bce:	4618      	mov	r0, r3
 8012bd0:	9a01      	ldr	r2, [sp, #4]
 8012bd2:	9903      	ldr	r1, [sp, #12]
 8012bd4:	9309      	str	r3, [sp, #36]	; 0x24
 8012bd6:	f7fe f989 	bl	8010eec <strncmp>
 8012bda:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012bdc:	2800      	cmp	r0, #0
 8012bde:	d1d8      	bne.n	8012b92 <__gethex+0x1fc>
 8012be0:	461e      	mov	r6, r3
 8012be2:	e791      	b.n	8012b08 <__gethex+0x172>
 8012be4:	1eb9      	subs	r1, r7, #2
 8012be6:	4628      	mov	r0, r5
 8012be8:	f000 fdb2 	bl	8013750 <__any_on>
 8012bec:	2800      	cmp	r0, #0
 8012bee:	d0b2      	beq.n	8012b56 <__gethex+0x1c0>
 8012bf0:	f04f 0a03 	mov.w	sl, #3
 8012bf4:	e7b1      	b.n	8012b5a <__gethex+0x1c4>
 8012bf6:	da09      	bge.n	8012c0c <__gethex+0x276>
 8012bf8:	1bf7      	subs	r7, r6, r7
 8012bfa:	4629      	mov	r1, r5
 8012bfc:	463a      	mov	r2, r7
 8012bfe:	9802      	ldr	r0, [sp, #8]
 8012c00:	f000 fbc8 	bl	8013394 <__lshift>
 8012c04:	1be4      	subs	r4, r4, r7
 8012c06:	4605      	mov	r5, r0
 8012c08:	f100 0914 	add.w	r9, r0, #20
 8012c0c:	f04f 0a00 	mov.w	sl, #0
 8012c10:	e7a8      	b.n	8012b64 <__gethex+0x1ce>
 8012c12:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8012c16:	42a0      	cmp	r0, r4
 8012c18:	dd6a      	ble.n	8012cf0 <__gethex+0x35a>
 8012c1a:	1b04      	subs	r4, r0, r4
 8012c1c:	42a6      	cmp	r6, r4
 8012c1e:	dc2e      	bgt.n	8012c7e <__gethex+0x2e8>
 8012c20:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8012c24:	2b02      	cmp	r3, #2
 8012c26:	d022      	beq.n	8012c6e <__gethex+0x2d8>
 8012c28:	2b03      	cmp	r3, #3
 8012c2a:	d024      	beq.n	8012c76 <__gethex+0x2e0>
 8012c2c:	2b01      	cmp	r3, #1
 8012c2e:	d115      	bne.n	8012c5c <__gethex+0x2c6>
 8012c30:	42a6      	cmp	r6, r4
 8012c32:	d113      	bne.n	8012c5c <__gethex+0x2c6>
 8012c34:	2e01      	cmp	r6, #1
 8012c36:	dc0b      	bgt.n	8012c50 <__gethex+0x2ba>
 8012c38:	9a06      	ldr	r2, [sp, #24]
 8012c3a:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8012c3e:	6013      	str	r3, [r2, #0]
 8012c40:	2301      	movs	r3, #1
 8012c42:	612b      	str	r3, [r5, #16]
 8012c44:	f8c9 3000 	str.w	r3, [r9]
 8012c48:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8012c4a:	2762      	movs	r7, #98	; 0x62
 8012c4c:	601d      	str	r5, [r3, #0]
 8012c4e:	e72a      	b.n	8012aa6 <__gethex+0x110>
 8012c50:	1e71      	subs	r1, r6, #1
 8012c52:	4628      	mov	r0, r5
 8012c54:	f000 fd7c 	bl	8013750 <__any_on>
 8012c58:	2800      	cmp	r0, #0
 8012c5a:	d1ed      	bne.n	8012c38 <__gethex+0x2a2>
 8012c5c:	4629      	mov	r1, r5
 8012c5e:	9802      	ldr	r0, [sp, #8]
 8012c60:	f000 f9cc 	bl	8012ffc <_Bfree>
 8012c64:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8012c66:	2300      	movs	r3, #0
 8012c68:	6013      	str	r3, [r2, #0]
 8012c6a:	2750      	movs	r7, #80	; 0x50
 8012c6c:	e71b      	b.n	8012aa6 <__gethex+0x110>
 8012c6e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8012c70:	2b00      	cmp	r3, #0
 8012c72:	d0e1      	beq.n	8012c38 <__gethex+0x2a2>
 8012c74:	e7f2      	b.n	8012c5c <__gethex+0x2c6>
 8012c76:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8012c78:	2b00      	cmp	r3, #0
 8012c7a:	d1dd      	bne.n	8012c38 <__gethex+0x2a2>
 8012c7c:	e7ee      	b.n	8012c5c <__gethex+0x2c6>
 8012c7e:	1e67      	subs	r7, r4, #1
 8012c80:	f1ba 0f00 	cmp.w	sl, #0
 8012c84:	d131      	bne.n	8012cea <__gethex+0x354>
 8012c86:	b127      	cbz	r7, 8012c92 <__gethex+0x2fc>
 8012c88:	4639      	mov	r1, r7
 8012c8a:	4628      	mov	r0, r5
 8012c8c:	f000 fd60 	bl	8013750 <__any_on>
 8012c90:	4682      	mov	sl, r0
 8012c92:	117a      	asrs	r2, r7, #5
 8012c94:	2301      	movs	r3, #1
 8012c96:	f007 071f 	and.w	r7, r7, #31
 8012c9a:	fa03 f707 	lsl.w	r7, r3, r7
 8012c9e:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 8012ca2:	4621      	mov	r1, r4
 8012ca4:	421f      	tst	r7, r3
 8012ca6:	4628      	mov	r0, r5
 8012ca8:	bf18      	it	ne
 8012caa:	f04a 0a02 	orrne.w	sl, sl, #2
 8012cae:	1b36      	subs	r6, r6, r4
 8012cb0:	f7ff fe22 	bl	80128f8 <rshift>
 8012cb4:	f8d8 4004 	ldr.w	r4, [r8, #4]
 8012cb8:	2702      	movs	r7, #2
 8012cba:	f1ba 0f00 	cmp.w	sl, #0
 8012cbe:	d048      	beq.n	8012d52 <__gethex+0x3bc>
 8012cc0:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8012cc4:	2b02      	cmp	r3, #2
 8012cc6:	d015      	beq.n	8012cf4 <__gethex+0x35e>
 8012cc8:	2b03      	cmp	r3, #3
 8012cca:	d017      	beq.n	8012cfc <__gethex+0x366>
 8012ccc:	2b01      	cmp	r3, #1
 8012cce:	d109      	bne.n	8012ce4 <__gethex+0x34e>
 8012cd0:	f01a 0f02 	tst.w	sl, #2
 8012cd4:	d006      	beq.n	8012ce4 <__gethex+0x34e>
 8012cd6:	f8d9 3000 	ldr.w	r3, [r9]
 8012cda:	ea4a 0a03 	orr.w	sl, sl, r3
 8012cde:	f01a 0f01 	tst.w	sl, #1
 8012ce2:	d10e      	bne.n	8012d02 <__gethex+0x36c>
 8012ce4:	f047 0710 	orr.w	r7, r7, #16
 8012ce8:	e033      	b.n	8012d52 <__gethex+0x3bc>
 8012cea:	f04f 0a01 	mov.w	sl, #1
 8012cee:	e7d0      	b.n	8012c92 <__gethex+0x2fc>
 8012cf0:	2701      	movs	r7, #1
 8012cf2:	e7e2      	b.n	8012cba <__gethex+0x324>
 8012cf4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8012cf6:	f1c3 0301 	rsb	r3, r3, #1
 8012cfa:	9315      	str	r3, [sp, #84]	; 0x54
 8012cfc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8012cfe:	2b00      	cmp	r3, #0
 8012d00:	d0f0      	beq.n	8012ce4 <__gethex+0x34e>
 8012d02:	f8d5 9010 	ldr.w	r9, [r5, #16]
 8012d06:	f105 0314 	add.w	r3, r5, #20
 8012d0a:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 8012d0e:	eb03 010a 	add.w	r1, r3, sl
 8012d12:	f04f 0c00 	mov.w	ip, #0
 8012d16:	4618      	mov	r0, r3
 8012d18:	f853 2b04 	ldr.w	r2, [r3], #4
 8012d1c:	f1b2 3fff 	cmp.w	r2, #4294967295
 8012d20:	d01c      	beq.n	8012d5c <__gethex+0x3c6>
 8012d22:	3201      	adds	r2, #1
 8012d24:	6002      	str	r2, [r0, #0]
 8012d26:	2f02      	cmp	r7, #2
 8012d28:	f105 0314 	add.w	r3, r5, #20
 8012d2c:	d138      	bne.n	8012da0 <__gethex+0x40a>
 8012d2e:	f8d8 2000 	ldr.w	r2, [r8]
 8012d32:	3a01      	subs	r2, #1
 8012d34:	42b2      	cmp	r2, r6
 8012d36:	d10a      	bne.n	8012d4e <__gethex+0x3b8>
 8012d38:	1171      	asrs	r1, r6, #5
 8012d3a:	2201      	movs	r2, #1
 8012d3c:	f006 061f 	and.w	r6, r6, #31
 8012d40:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8012d44:	fa02 f606 	lsl.w	r6, r2, r6
 8012d48:	421e      	tst	r6, r3
 8012d4a:	bf18      	it	ne
 8012d4c:	4617      	movne	r7, r2
 8012d4e:	f047 0720 	orr.w	r7, r7, #32
 8012d52:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8012d54:	601d      	str	r5, [r3, #0]
 8012d56:	9b06      	ldr	r3, [sp, #24]
 8012d58:	601c      	str	r4, [r3, #0]
 8012d5a:	e6a4      	b.n	8012aa6 <__gethex+0x110>
 8012d5c:	4299      	cmp	r1, r3
 8012d5e:	f843 cc04 	str.w	ip, [r3, #-4]
 8012d62:	d8d8      	bhi.n	8012d16 <__gethex+0x380>
 8012d64:	68ab      	ldr	r3, [r5, #8]
 8012d66:	4599      	cmp	r9, r3
 8012d68:	db12      	blt.n	8012d90 <__gethex+0x3fa>
 8012d6a:	6869      	ldr	r1, [r5, #4]
 8012d6c:	9802      	ldr	r0, [sp, #8]
 8012d6e:	3101      	adds	r1, #1
 8012d70:	f000 f910 	bl	8012f94 <_Balloc>
 8012d74:	692a      	ldr	r2, [r5, #16]
 8012d76:	3202      	adds	r2, #2
 8012d78:	f105 010c 	add.w	r1, r5, #12
 8012d7c:	4683      	mov	fp, r0
 8012d7e:	0092      	lsls	r2, r2, #2
 8012d80:	300c      	adds	r0, #12
 8012d82:	f7fd f983 	bl	801008c <memcpy>
 8012d86:	4629      	mov	r1, r5
 8012d88:	9802      	ldr	r0, [sp, #8]
 8012d8a:	f000 f937 	bl	8012ffc <_Bfree>
 8012d8e:	465d      	mov	r5, fp
 8012d90:	692b      	ldr	r3, [r5, #16]
 8012d92:	1c5a      	adds	r2, r3, #1
 8012d94:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8012d98:	612a      	str	r2, [r5, #16]
 8012d9a:	2201      	movs	r2, #1
 8012d9c:	615a      	str	r2, [r3, #20]
 8012d9e:	e7c2      	b.n	8012d26 <__gethex+0x390>
 8012da0:	692a      	ldr	r2, [r5, #16]
 8012da2:	454a      	cmp	r2, r9
 8012da4:	dd0b      	ble.n	8012dbe <__gethex+0x428>
 8012da6:	2101      	movs	r1, #1
 8012da8:	4628      	mov	r0, r5
 8012daa:	f7ff fda5 	bl	80128f8 <rshift>
 8012dae:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8012db2:	3401      	adds	r4, #1
 8012db4:	42a3      	cmp	r3, r4
 8012db6:	f6ff aed9 	blt.w	8012b6c <__gethex+0x1d6>
 8012dba:	2701      	movs	r7, #1
 8012dbc:	e7c7      	b.n	8012d4e <__gethex+0x3b8>
 8012dbe:	f016 061f 	ands.w	r6, r6, #31
 8012dc2:	d0fa      	beq.n	8012dba <__gethex+0x424>
 8012dc4:	449a      	add	sl, r3
 8012dc6:	f1c6 0620 	rsb	r6, r6, #32
 8012dca:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 8012dce:	f000 f9a5 	bl	801311c <__hi0bits>
 8012dd2:	42b0      	cmp	r0, r6
 8012dd4:	dbe7      	blt.n	8012da6 <__gethex+0x410>
 8012dd6:	e7f0      	b.n	8012dba <__gethex+0x424>

08012dd8 <L_shift>:
 8012dd8:	f1c2 0208 	rsb	r2, r2, #8
 8012ddc:	0092      	lsls	r2, r2, #2
 8012dde:	b570      	push	{r4, r5, r6, lr}
 8012de0:	f1c2 0620 	rsb	r6, r2, #32
 8012de4:	6843      	ldr	r3, [r0, #4]
 8012de6:	6804      	ldr	r4, [r0, #0]
 8012de8:	fa03 f506 	lsl.w	r5, r3, r6
 8012dec:	432c      	orrs	r4, r5
 8012dee:	40d3      	lsrs	r3, r2
 8012df0:	6004      	str	r4, [r0, #0]
 8012df2:	f840 3f04 	str.w	r3, [r0, #4]!
 8012df6:	4288      	cmp	r0, r1
 8012df8:	d3f4      	bcc.n	8012de4 <L_shift+0xc>
 8012dfa:	bd70      	pop	{r4, r5, r6, pc}

08012dfc <__match>:
 8012dfc:	b530      	push	{r4, r5, lr}
 8012dfe:	6803      	ldr	r3, [r0, #0]
 8012e00:	3301      	adds	r3, #1
 8012e02:	f811 4b01 	ldrb.w	r4, [r1], #1
 8012e06:	b914      	cbnz	r4, 8012e0e <__match+0x12>
 8012e08:	6003      	str	r3, [r0, #0]
 8012e0a:	2001      	movs	r0, #1
 8012e0c:	bd30      	pop	{r4, r5, pc}
 8012e0e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012e12:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8012e16:	2d19      	cmp	r5, #25
 8012e18:	bf98      	it	ls
 8012e1a:	3220      	addls	r2, #32
 8012e1c:	42a2      	cmp	r2, r4
 8012e1e:	d0f0      	beq.n	8012e02 <__match+0x6>
 8012e20:	2000      	movs	r0, #0
 8012e22:	e7f3      	b.n	8012e0c <__match+0x10>

08012e24 <__hexnan>:
 8012e24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012e28:	680b      	ldr	r3, [r1, #0]
 8012e2a:	6801      	ldr	r1, [r0, #0]
 8012e2c:	115f      	asrs	r7, r3, #5
 8012e2e:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 8012e32:	f013 031f 	ands.w	r3, r3, #31
 8012e36:	b087      	sub	sp, #28
 8012e38:	bf18      	it	ne
 8012e3a:	3704      	addne	r7, #4
 8012e3c:	2500      	movs	r5, #0
 8012e3e:	1f3e      	subs	r6, r7, #4
 8012e40:	4682      	mov	sl, r0
 8012e42:	4690      	mov	r8, r2
 8012e44:	9301      	str	r3, [sp, #4]
 8012e46:	f847 5c04 	str.w	r5, [r7, #-4]
 8012e4a:	46b1      	mov	r9, r6
 8012e4c:	4634      	mov	r4, r6
 8012e4e:	9502      	str	r5, [sp, #8]
 8012e50:	46ab      	mov	fp, r5
 8012e52:	784a      	ldrb	r2, [r1, #1]
 8012e54:	1c4b      	adds	r3, r1, #1
 8012e56:	9303      	str	r3, [sp, #12]
 8012e58:	b342      	cbz	r2, 8012eac <__hexnan+0x88>
 8012e5a:	4610      	mov	r0, r2
 8012e5c:	9105      	str	r1, [sp, #20]
 8012e5e:	9204      	str	r2, [sp, #16]
 8012e60:	f7ff fd84 	bl	801296c <__hexdig_fun>
 8012e64:	2800      	cmp	r0, #0
 8012e66:	d143      	bne.n	8012ef0 <__hexnan+0xcc>
 8012e68:	9a04      	ldr	r2, [sp, #16]
 8012e6a:	9905      	ldr	r1, [sp, #20]
 8012e6c:	2a20      	cmp	r2, #32
 8012e6e:	d818      	bhi.n	8012ea2 <__hexnan+0x7e>
 8012e70:	9b02      	ldr	r3, [sp, #8]
 8012e72:	459b      	cmp	fp, r3
 8012e74:	dd13      	ble.n	8012e9e <__hexnan+0x7a>
 8012e76:	454c      	cmp	r4, r9
 8012e78:	d206      	bcs.n	8012e88 <__hexnan+0x64>
 8012e7a:	2d07      	cmp	r5, #7
 8012e7c:	dc04      	bgt.n	8012e88 <__hexnan+0x64>
 8012e7e:	462a      	mov	r2, r5
 8012e80:	4649      	mov	r1, r9
 8012e82:	4620      	mov	r0, r4
 8012e84:	f7ff ffa8 	bl	8012dd8 <L_shift>
 8012e88:	4544      	cmp	r4, r8
 8012e8a:	d944      	bls.n	8012f16 <__hexnan+0xf2>
 8012e8c:	2300      	movs	r3, #0
 8012e8e:	f1a4 0904 	sub.w	r9, r4, #4
 8012e92:	f844 3c04 	str.w	r3, [r4, #-4]
 8012e96:	f8cd b008 	str.w	fp, [sp, #8]
 8012e9a:	464c      	mov	r4, r9
 8012e9c:	461d      	mov	r5, r3
 8012e9e:	9903      	ldr	r1, [sp, #12]
 8012ea0:	e7d7      	b.n	8012e52 <__hexnan+0x2e>
 8012ea2:	2a29      	cmp	r2, #41	; 0x29
 8012ea4:	d14a      	bne.n	8012f3c <__hexnan+0x118>
 8012ea6:	3102      	adds	r1, #2
 8012ea8:	f8ca 1000 	str.w	r1, [sl]
 8012eac:	f1bb 0f00 	cmp.w	fp, #0
 8012eb0:	d044      	beq.n	8012f3c <__hexnan+0x118>
 8012eb2:	454c      	cmp	r4, r9
 8012eb4:	d206      	bcs.n	8012ec4 <__hexnan+0xa0>
 8012eb6:	2d07      	cmp	r5, #7
 8012eb8:	dc04      	bgt.n	8012ec4 <__hexnan+0xa0>
 8012eba:	462a      	mov	r2, r5
 8012ebc:	4649      	mov	r1, r9
 8012ebe:	4620      	mov	r0, r4
 8012ec0:	f7ff ff8a 	bl	8012dd8 <L_shift>
 8012ec4:	4544      	cmp	r4, r8
 8012ec6:	d928      	bls.n	8012f1a <__hexnan+0xf6>
 8012ec8:	4643      	mov	r3, r8
 8012eca:	f854 2b04 	ldr.w	r2, [r4], #4
 8012ece:	f843 2b04 	str.w	r2, [r3], #4
 8012ed2:	42a6      	cmp	r6, r4
 8012ed4:	d2f9      	bcs.n	8012eca <__hexnan+0xa6>
 8012ed6:	2200      	movs	r2, #0
 8012ed8:	f843 2b04 	str.w	r2, [r3], #4
 8012edc:	429e      	cmp	r6, r3
 8012ede:	d2fb      	bcs.n	8012ed8 <__hexnan+0xb4>
 8012ee0:	6833      	ldr	r3, [r6, #0]
 8012ee2:	b91b      	cbnz	r3, 8012eec <__hexnan+0xc8>
 8012ee4:	4546      	cmp	r6, r8
 8012ee6:	d127      	bne.n	8012f38 <__hexnan+0x114>
 8012ee8:	2301      	movs	r3, #1
 8012eea:	6033      	str	r3, [r6, #0]
 8012eec:	2005      	movs	r0, #5
 8012eee:	e026      	b.n	8012f3e <__hexnan+0x11a>
 8012ef0:	3501      	adds	r5, #1
 8012ef2:	2d08      	cmp	r5, #8
 8012ef4:	f10b 0b01 	add.w	fp, fp, #1
 8012ef8:	dd06      	ble.n	8012f08 <__hexnan+0xe4>
 8012efa:	4544      	cmp	r4, r8
 8012efc:	d9cf      	bls.n	8012e9e <__hexnan+0x7a>
 8012efe:	2300      	movs	r3, #0
 8012f00:	f844 3c04 	str.w	r3, [r4, #-4]
 8012f04:	2501      	movs	r5, #1
 8012f06:	3c04      	subs	r4, #4
 8012f08:	6822      	ldr	r2, [r4, #0]
 8012f0a:	f000 000f 	and.w	r0, r0, #15
 8012f0e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8012f12:	6020      	str	r0, [r4, #0]
 8012f14:	e7c3      	b.n	8012e9e <__hexnan+0x7a>
 8012f16:	2508      	movs	r5, #8
 8012f18:	e7c1      	b.n	8012e9e <__hexnan+0x7a>
 8012f1a:	9b01      	ldr	r3, [sp, #4]
 8012f1c:	2b00      	cmp	r3, #0
 8012f1e:	d0df      	beq.n	8012ee0 <__hexnan+0xbc>
 8012f20:	f04f 32ff 	mov.w	r2, #4294967295
 8012f24:	f1c3 0320 	rsb	r3, r3, #32
 8012f28:	fa22 f303 	lsr.w	r3, r2, r3
 8012f2c:	f857 2c04 	ldr.w	r2, [r7, #-4]
 8012f30:	401a      	ands	r2, r3
 8012f32:	f847 2c04 	str.w	r2, [r7, #-4]
 8012f36:	e7d3      	b.n	8012ee0 <__hexnan+0xbc>
 8012f38:	3e04      	subs	r6, #4
 8012f3a:	e7d1      	b.n	8012ee0 <__hexnan+0xbc>
 8012f3c:	2004      	movs	r0, #4
 8012f3e:	b007      	add	sp, #28
 8012f40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08012f44 <__locale_ctype_ptr_l>:
 8012f44:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8012f48:	4770      	bx	lr

08012f4a <__localeconv_l>:
 8012f4a:	30f0      	adds	r0, #240	; 0xf0
 8012f4c:	4770      	bx	lr
	...

08012f50 <_localeconv_r>:
 8012f50:	4b04      	ldr	r3, [pc, #16]	; (8012f64 <_localeconv_r+0x14>)
 8012f52:	681b      	ldr	r3, [r3, #0]
 8012f54:	6a18      	ldr	r0, [r3, #32]
 8012f56:	4b04      	ldr	r3, [pc, #16]	; (8012f68 <_localeconv_r+0x18>)
 8012f58:	2800      	cmp	r0, #0
 8012f5a:	bf08      	it	eq
 8012f5c:	4618      	moveq	r0, r3
 8012f5e:	30f0      	adds	r0, #240	; 0xf0
 8012f60:	4770      	bx	lr
 8012f62:	bf00      	nop
 8012f64:	2000017c 	.word	0x2000017c
 8012f68:	200001e0 	.word	0x200001e0

08012f6c <__ascii_mbtowc>:
 8012f6c:	b082      	sub	sp, #8
 8012f6e:	b901      	cbnz	r1, 8012f72 <__ascii_mbtowc+0x6>
 8012f70:	a901      	add	r1, sp, #4
 8012f72:	b142      	cbz	r2, 8012f86 <__ascii_mbtowc+0x1a>
 8012f74:	b14b      	cbz	r3, 8012f8a <__ascii_mbtowc+0x1e>
 8012f76:	7813      	ldrb	r3, [r2, #0]
 8012f78:	600b      	str	r3, [r1, #0]
 8012f7a:	7812      	ldrb	r2, [r2, #0]
 8012f7c:	1c10      	adds	r0, r2, #0
 8012f7e:	bf18      	it	ne
 8012f80:	2001      	movne	r0, #1
 8012f82:	b002      	add	sp, #8
 8012f84:	4770      	bx	lr
 8012f86:	4610      	mov	r0, r2
 8012f88:	e7fb      	b.n	8012f82 <__ascii_mbtowc+0x16>
 8012f8a:	f06f 0001 	mvn.w	r0, #1
 8012f8e:	e7f8      	b.n	8012f82 <__ascii_mbtowc+0x16>

08012f90 <__malloc_lock>:
 8012f90:	4770      	bx	lr

08012f92 <__malloc_unlock>:
 8012f92:	4770      	bx	lr

08012f94 <_Balloc>:
 8012f94:	b570      	push	{r4, r5, r6, lr}
 8012f96:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8012f98:	4604      	mov	r4, r0
 8012f9a:	460e      	mov	r6, r1
 8012f9c:	b93d      	cbnz	r5, 8012fae <_Balloc+0x1a>
 8012f9e:	2010      	movs	r0, #16
 8012fa0:	f7fd f864 	bl	801006c <malloc>
 8012fa4:	6260      	str	r0, [r4, #36]	; 0x24
 8012fa6:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8012faa:	6005      	str	r5, [r0, #0]
 8012fac:	60c5      	str	r5, [r0, #12]
 8012fae:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8012fb0:	68eb      	ldr	r3, [r5, #12]
 8012fb2:	b183      	cbz	r3, 8012fd6 <_Balloc+0x42>
 8012fb4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8012fb6:	68db      	ldr	r3, [r3, #12]
 8012fb8:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8012fbc:	b9b8      	cbnz	r0, 8012fee <_Balloc+0x5a>
 8012fbe:	2101      	movs	r1, #1
 8012fc0:	fa01 f506 	lsl.w	r5, r1, r6
 8012fc4:	1d6a      	adds	r2, r5, #5
 8012fc6:	0092      	lsls	r2, r2, #2
 8012fc8:	4620      	mov	r0, r4
 8012fca:	f000 fbe2 	bl	8013792 <_calloc_r>
 8012fce:	b160      	cbz	r0, 8012fea <_Balloc+0x56>
 8012fd0:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8012fd4:	e00e      	b.n	8012ff4 <_Balloc+0x60>
 8012fd6:	2221      	movs	r2, #33	; 0x21
 8012fd8:	2104      	movs	r1, #4
 8012fda:	4620      	mov	r0, r4
 8012fdc:	f000 fbd9 	bl	8013792 <_calloc_r>
 8012fe0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8012fe2:	60e8      	str	r0, [r5, #12]
 8012fe4:	68db      	ldr	r3, [r3, #12]
 8012fe6:	2b00      	cmp	r3, #0
 8012fe8:	d1e4      	bne.n	8012fb4 <_Balloc+0x20>
 8012fea:	2000      	movs	r0, #0
 8012fec:	bd70      	pop	{r4, r5, r6, pc}
 8012fee:	6802      	ldr	r2, [r0, #0]
 8012ff0:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8012ff4:	2300      	movs	r3, #0
 8012ff6:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8012ffa:	e7f7      	b.n	8012fec <_Balloc+0x58>

08012ffc <_Bfree>:
 8012ffc:	b570      	push	{r4, r5, r6, lr}
 8012ffe:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8013000:	4606      	mov	r6, r0
 8013002:	460d      	mov	r5, r1
 8013004:	b93c      	cbnz	r4, 8013016 <_Bfree+0x1a>
 8013006:	2010      	movs	r0, #16
 8013008:	f7fd f830 	bl	801006c <malloc>
 801300c:	6270      	str	r0, [r6, #36]	; 0x24
 801300e:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8013012:	6004      	str	r4, [r0, #0]
 8013014:	60c4      	str	r4, [r0, #12]
 8013016:	b13d      	cbz	r5, 8013028 <_Bfree+0x2c>
 8013018:	6a73      	ldr	r3, [r6, #36]	; 0x24
 801301a:	686a      	ldr	r2, [r5, #4]
 801301c:	68db      	ldr	r3, [r3, #12]
 801301e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8013022:	6029      	str	r1, [r5, #0]
 8013024:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8013028:	bd70      	pop	{r4, r5, r6, pc}

0801302a <__multadd>:
 801302a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801302e:	690d      	ldr	r5, [r1, #16]
 8013030:	461f      	mov	r7, r3
 8013032:	4606      	mov	r6, r0
 8013034:	460c      	mov	r4, r1
 8013036:	f101 0c14 	add.w	ip, r1, #20
 801303a:	2300      	movs	r3, #0
 801303c:	f8dc 0000 	ldr.w	r0, [ip]
 8013040:	b281      	uxth	r1, r0
 8013042:	fb02 7101 	mla	r1, r2, r1, r7
 8013046:	0c0f      	lsrs	r7, r1, #16
 8013048:	0c00      	lsrs	r0, r0, #16
 801304a:	fb02 7000 	mla	r0, r2, r0, r7
 801304e:	b289      	uxth	r1, r1
 8013050:	3301      	adds	r3, #1
 8013052:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8013056:	429d      	cmp	r5, r3
 8013058:	ea4f 4710 	mov.w	r7, r0, lsr #16
 801305c:	f84c 1b04 	str.w	r1, [ip], #4
 8013060:	dcec      	bgt.n	801303c <__multadd+0x12>
 8013062:	b1d7      	cbz	r7, 801309a <__multadd+0x70>
 8013064:	68a3      	ldr	r3, [r4, #8]
 8013066:	42ab      	cmp	r3, r5
 8013068:	dc12      	bgt.n	8013090 <__multadd+0x66>
 801306a:	6861      	ldr	r1, [r4, #4]
 801306c:	4630      	mov	r0, r6
 801306e:	3101      	adds	r1, #1
 8013070:	f7ff ff90 	bl	8012f94 <_Balloc>
 8013074:	6922      	ldr	r2, [r4, #16]
 8013076:	3202      	adds	r2, #2
 8013078:	f104 010c 	add.w	r1, r4, #12
 801307c:	4680      	mov	r8, r0
 801307e:	0092      	lsls	r2, r2, #2
 8013080:	300c      	adds	r0, #12
 8013082:	f7fd f803 	bl	801008c <memcpy>
 8013086:	4621      	mov	r1, r4
 8013088:	4630      	mov	r0, r6
 801308a:	f7ff ffb7 	bl	8012ffc <_Bfree>
 801308e:	4644      	mov	r4, r8
 8013090:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8013094:	3501      	adds	r5, #1
 8013096:	615f      	str	r7, [r3, #20]
 8013098:	6125      	str	r5, [r4, #16]
 801309a:	4620      	mov	r0, r4
 801309c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080130a0 <__s2b>:
 80130a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80130a4:	460c      	mov	r4, r1
 80130a6:	4615      	mov	r5, r2
 80130a8:	461f      	mov	r7, r3
 80130aa:	2209      	movs	r2, #9
 80130ac:	3308      	adds	r3, #8
 80130ae:	4606      	mov	r6, r0
 80130b0:	fb93 f3f2 	sdiv	r3, r3, r2
 80130b4:	2100      	movs	r1, #0
 80130b6:	2201      	movs	r2, #1
 80130b8:	429a      	cmp	r2, r3
 80130ba:	db20      	blt.n	80130fe <__s2b+0x5e>
 80130bc:	4630      	mov	r0, r6
 80130be:	f7ff ff69 	bl	8012f94 <_Balloc>
 80130c2:	9b08      	ldr	r3, [sp, #32]
 80130c4:	6143      	str	r3, [r0, #20]
 80130c6:	2d09      	cmp	r5, #9
 80130c8:	f04f 0301 	mov.w	r3, #1
 80130cc:	6103      	str	r3, [r0, #16]
 80130ce:	dd19      	ble.n	8013104 <__s2b+0x64>
 80130d0:	f104 0809 	add.w	r8, r4, #9
 80130d4:	46c1      	mov	r9, r8
 80130d6:	442c      	add	r4, r5
 80130d8:	f819 3b01 	ldrb.w	r3, [r9], #1
 80130dc:	4601      	mov	r1, r0
 80130de:	3b30      	subs	r3, #48	; 0x30
 80130e0:	220a      	movs	r2, #10
 80130e2:	4630      	mov	r0, r6
 80130e4:	f7ff ffa1 	bl	801302a <__multadd>
 80130e8:	45a1      	cmp	r9, r4
 80130ea:	d1f5      	bne.n	80130d8 <__s2b+0x38>
 80130ec:	eb08 0405 	add.w	r4, r8, r5
 80130f0:	3c08      	subs	r4, #8
 80130f2:	1b2d      	subs	r5, r5, r4
 80130f4:	1963      	adds	r3, r4, r5
 80130f6:	42bb      	cmp	r3, r7
 80130f8:	db07      	blt.n	801310a <__s2b+0x6a>
 80130fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80130fe:	0052      	lsls	r2, r2, #1
 8013100:	3101      	adds	r1, #1
 8013102:	e7d9      	b.n	80130b8 <__s2b+0x18>
 8013104:	340a      	adds	r4, #10
 8013106:	2509      	movs	r5, #9
 8013108:	e7f3      	b.n	80130f2 <__s2b+0x52>
 801310a:	f814 3b01 	ldrb.w	r3, [r4], #1
 801310e:	4601      	mov	r1, r0
 8013110:	3b30      	subs	r3, #48	; 0x30
 8013112:	220a      	movs	r2, #10
 8013114:	4630      	mov	r0, r6
 8013116:	f7ff ff88 	bl	801302a <__multadd>
 801311a:	e7eb      	b.n	80130f4 <__s2b+0x54>

0801311c <__hi0bits>:
 801311c:	0c02      	lsrs	r2, r0, #16
 801311e:	0412      	lsls	r2, r2, #16
 8013120:	4603      	mov	r3, r0
 8013122:	b9b2      	cbnz	r2, 8013152 <__hi0bits+0x36>
 8013124:	0403      	lsls	r3, r0, #16
 8013126:	2010      	movs	r0, #16
 8013128:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 801312c:	bf04      	itt	eq
 801312e:	021b      	lsleq	r3, r3, #8
 8013130:	3008      	addeq	r0, #8
 8013132:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8013136:	bf04      	itt	eq
 8013138:	011b      	lsleq	r3, r3, #4
 801313a:	3004      	addeq	r0, #4
 801313c:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8013140:	bf04      	itt	eq
 8013142:	009b      	lsleq	r3, r3, #2
 8013144:	3002      	addeq	r0, #2
 8013146:	2b00      	cmp	r3, #0
 8013148:	db06      	blt.n	8013158 <__hi0bits+0x3c>
 801314a:	005b      	lsls	r3, r3, #1
 801314c:	d503      	bpl.n	8013156 <__hi0bits+0x3a>
 801314e:	3001      	adds	r0, #1
 8013150:	4770      	bx	lr
 8013152:	2000      	movs	r0, #0
 8013154:	e7e8      	b.n	8013128 <__hi0bits+0xc>
 8013156:	2020      	movs	r0, #32
 8013158:	4770      	bx	lr

0801315a <__lo0bits>:
 801315a:	6803      	ldr	r3, [r0, #0]
 801315c:	f013 0207 	ands.w	r2, r3, #7
 8013160:	4601      	mov	r1, r0
 8013162:	d00b      	beq.n	801317c <__lo0bits+0x22>
 8013164:	07da      	lsls	r2, r3, #31
 8013166:	d423      	bmi.n	80131b0 <__lo0bits+0x56>
 8013168:	0798      	lsls	r0, r3, #30
 801316a:	bf49      	itett	mi
 801316c:	085b      	lsrmi	r3, r3, #1
 801316e:	089b      	lsrpl	r3, r3, #2
 8013170:	2001      	movmi	r0, #1
 8013172:	600b      	strmi	r3, [r1, #0]
 8013174:	bf5c      	itt	pl
 8013176:	600b      	strpl	r3, [r1, #0]
 8013178:	2002      	movpl	r0, #2
 801317a:	4770      	bx	lr
 801317c:	b298      	uxth	r0, r3
 801317e:	b9a8      	cbnz	r0, 80131ac <__lo0bits+0x52>
 8013180:	0c1b      	lsrs	r3, r3, #16
 8013182:	2010      	movs	r0, #16
 8013184:	f013 0fff 	tst.w	r3, #255	; 0xff
 8013188:	bf04      	itt	eq
 801318a:	0a1b      	lsreq	r3, r3, #8
 801318c:	3008      	addeq	r0, #8
 801318e:	071a      	lsls	r2, r3, #28
 8013190:	bf04      	itt	eq
 8013192:	091b      	lsreq	r3, r3, #4
 8013194:	3004      	addeq	r0, #4
 8013196:	079a      	lsls	r2, r3, #30
 8013198:	bf04      	itt	eq
 801319a:	089b      	lsreq	r3, r3, #2
 801319c:	3002      	addeq	r0, #2
 801319e:	07da      	lsls	r2, r3, #31
 80131a0:	d402      	bmi.n	80131a8 <__lo0bits+0x4e>
 80131a2:	085b      	lsrs	r3, r3, #1
 80131a4:	d006      	beq.n	80131b4 <__lo0bits+0x5a>
 80131a6:	3001      	adds	r0, #1
 80131a8:	600b      	str	r3, [r1, #0]
 80131aa:	4770      	bx	lr
 80131ac:	4610      	mov	r0, r2
 80131ae:	e7e9      	b.n	8013184 <__lo0bits+0x2a>
 80131b0:	2000      	movs	r0, #0
 80131b2:	4770      	bx	lr
 80131b4:	2020      	movs	r0, #32
 80131b6:	4770      	bx	lr

080131b8 <__i2b>:
 80131b8:	b510      	push	{r4, lr}
 80131ba:	460c      	mov	r4, r1
 80131bc:	2101      	movs	r1, #1
 80131be:	f7ff fee9 	bl	8012f94 <_Balloc>
 80131c2:	2201      	movs	r2, #1
 80131c4:	6144      	str	r4, [r0, #20]
 80131c6:	6102      	str	r2, [r0, #16]
 80131c8:	bd10      	pop	{r4, pc}

080131ca <__multiply>:
 80131ca:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80131ce:	4614      	mov	r4, r2
 80131d0:	690a      	ldr	r2, [r1, #16]
 80131d2:	6923      	ldr	r3, [r4, #16]
 80131d4:	429a      	cmp	r2, r3
 80131d6:	bfb8      	it	lt
 80131d8:	460b      	movlt	r3, r1
 80131da:	4688      	mov	r8, r1
 80131dc:	bfbc      	itt	lt
 80131de:	46a0      	movlt	r8, r4
 80131e0:	461c      	movlt	r4, r3
 80131e2:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80131e6:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80131ea:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80131ee:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80131f2:	eb07 0609 	add.w	r6, r7, r9
 80131f6:	42b3      	cmp	r3, r6
 80131f8:	bfb8      	it	lt
 80131fa:	3101      	addlt	r1, #1
 80131fc:	f7ff feca 	bl	8012f94 <_Balloc>
 8013200:	f100 0514 	add.w	r5, r0, #20
 8013204:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8013208:	462b      	mov	r3, r5
 801320a:	2200      	movs	r2, #0
 801320c:	4573      	cmp	r3, lr
 801320e:	d316      	bcc.n	801323e <__multiply+0x74>
 8013210:	f104 0214 	add.w	r2, r4, #20
 8013214:	f108 0114 	add.w	r1, r8, #20
 8013218:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 801321c:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8013220:	9300      	str	r3, [sp, #0]
 8013222:	9b00      	ldr	r3, [sp, #0]
 8013224:	9201      	str	r2, [sp, #4]
 8013226:	4293      	cmp	r3, r2
 8013228:	d80c      	bhi.n	8013244 <__multiply+0x7a>
 801322a:	2e00      	cmp	r6, #0
 801322c:	dd03      	ble.n	8013236 <__multiply+0x6c>
 801322e:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8013232:	2b00      	cmp	r3, #0
 8013234:	d05d      	beq.n	80132f2 <__multiply+0x128>
 8013236:	6106      	str	r6, [r0, #16]
 8013238:	b003      	add	sp, #12
 801323a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801323e:	f843 2b04 	str.w	r2, [r3], #4
 8013242:	e7e3      	b.n	801320c <__multiply+0x42>
 8013244:	f8b2 b000 	ldrh.w	fp, [r2]
 8013248:	f1bb 0f00 	cmp.w	fp, #0
 801324c:	d023      	beq.n	8013296 <__multiply+0xcc>
 801324e:	4689      	mov	r9, r1
 8013250:	46ac      	mov	ip, r5
 8013252:	f04f 0800 	mov.w	r8, #0
 8013256:	f859 4b04 	ldr.w	r4, [r9], #4
 801325a:	f8dc a000 	ldr.w	sl, [ip]
 801325e:	b2a3      	uxth	r3, r4
 8013260:	fa1f fa8a 	uxth.w	sl, sl
 8013264:	fb0b a303 	mla	r3, fp, r3, sl
 8013268:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 801326c:	f8dc 4000 	ldr.w	r4, [ip]
 8013270:	4443      	add	r3, r8
 8013272:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8013276:	fb0b 840a 	mla	r4, fp, sl, r8
 801327a:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 801327e:	46e2      	mov	sl, ip
 8013280:	b29b      	uxth	r3, r3
 8013282:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8013286:	454f      	cmp	r7, r9
 8013288:	ea4f 4814 	mov.w	r8, r4, lsr #16
 801328c:	f84a 3b04 	str.w	r3, [sl], #4
 8013290:	d82b      	bhi.n	80132ea <__multiply+0x120>
 8013292:	f8cc 8004 	str.w	r8, [ip, #4]
 8013296:	9b01      	ldr	r3, [sp, #4]
 8013298:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 801329c:	3204      	adds	r2, #4
 801329e:	f1ba 0f00 	cmp.w	sl, #0
 80132a2:	d020      	beq.n	80132e6 <__multiply+0x11c>
 80132a4:	682b      	ldr	r3, [r5, #0]
 80132a6:	4689      	mov	r9, r1
 80132a8:	46a8      	mov	r8, r5
 80132aa:	f04f 0b00 	mov.w	fp, #0
 80132ae:	f8b9 c000 	ldrh.w	ip, [r9]
 80132b2:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 80132b6:	fb0a 440c 	mla	r4, sl, ip, r4
 80132ba:	445c      	add	r4, fp
 80132bc:	46c4      	mov	ip, r8
 80132be:	b29b      	uxth	r3, r3
 80132c0:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80132c4:	f84c 3b04 	str.w	r3, [ip], #4
 80132c8:	f859 3b04 	ldr.w	r3, [r9], #4
 80132cc:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 80132d0:	0c1b      	lsrs	r3, r3, #16
 80132d2:	fb0a b303 	mla	r3, sl, r3, fp
 80132d6:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 80132da:	454f      	cmp	r7, r9
 80132dc:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 80132e0:	d805      	bhi.n	80132ee <__multiply+0x124>
 80132e2:	f8c8 3004 	str.w	r3, [r8, #4]
 80132e6:	3504      	adds	r5, #4
 80132e8:	e79b      	b.n	8013222 <__multiply+0x58>
 80132ea:	46d4      	mov	ip, sl
 80132ec:	e7b3      	b.n	8013256 <__multiply+0x8c>
 80132ee:	46e0      	mov	r8, ip
 80132f0:	e7dd      	b.n	80132ae <__multiply+0xe4>
 80132f2:	3e01      	subs	r6, #1
 80132f4:	e799      	b.n	801322a <__multiply+0x60>
	...

080132f8 <__pow5mult>:
 80132f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80132fc:	4615      	mov	r5, r2
 80132fe:	f012 0203 	ands.w	r2, r2, #3
 8013302:	4606      	mov	r6, r0
 8013304:	460f      	mov	r7, r1
 8013306:	d007      	beq.n	8013318 <__pow5mult+0x20>
 8013308:	3a01      	subs	r2, #1
 801330a:	4c21      	ldr	r4, [pc, #132]	; (8013390 <__pow5mult+0x98>)
 801330c:	2300      	movs	r3, #0
 801330e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8013312:	f7ff fe8a 	bl	801302a <__multadd>
 8013316:	4607      	mov	r7, r0
 8013318:	10ad      	asrs	r5, r5, #2
 801331a:	d035      	beq.n	8013388 <__pow5mult+0x90>
 801331c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 801331e:	b93c      	cbnz	r4, 8013330 <__pow5mult+0x38>
 8013320:	2010      	movs	r0, #16
 8013322:	f7fc fea3 	bl	801006c <malloc>
 8013326:	6270      	str	r0, [r6, #36]	; 0x24
 8013328:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801332c:	6004      	str	r4, [r0, #0]
 801332e:	60c4      	str	r4, [r0, #12]
 8013330:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8013334:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8013338:	b94c      	cbnz	r4, 801334e <__pow5mult+0x56>
 801333a:	f240 2171 	movw	r1, #625	; 0x271
 801333e:	4630      	mov	r0, r6
 8013340:	f7ff ff3a 	bl	80131b8 <__i2b>
 8013344:	2300      	movs	r3, #0
 8013346:	f8c8 0008 	str.w	r0, [r8, #8]
 801334a:	4604      	mov	r4, r0
 801334c:	6003      	str	r3, [r0, #0]
 801334e:	f04f 0800 	mov.w	r8, #0
 8013352:	07eb      	lsls	r3, r5, #31
 8013354:	d50a      	bpl.n	801336c <__pow5mult+0x74>
 8013356:	4639      	mov	r1, r7
 8013358:	4622      	mov	r2, r4
 801335a:	4630      	mov	r0, r6
 801335c:	f7ff ff35 	bl	80131ca <__multiply>
 8013360:	4639      	mov	r1, r7
 8013362:	4681      	mov	r9, r0
 8013364:	4630      	mov	r0, r6
 8013366:	f7ff fe49 	bl	8012ffc <_Bfree>
 801336a:	464f      	mov	r7, r9
 801336c:	106d      	asrs	r5, r5, #1
 801336e:	d00b      	beq.n	8013388 <__pow5mult+0x90>
 8013370:	6820      	ldr	r0, [r4, #0]
 8013372:	b938      	cbnz	r0, 8013384 <__pow5mult+0x8c>
 8013374:	4622      	mov	r2, r4
 8013376:	4621      	mov	r1, r4
 8013378:	4630      	mov	r0, r6
 801337a:	f7ff ff26 	bl	80131ca <__multiply>
 801337e:	6020      	str	r0, [r4, #0]
 8013380:	f8c0 8000 	str.w	r8, [r0]
 8013384:	4604      	mov	r4, r0
 8013386:	e7e4      	b.n	8013352 <__pow5mult+0x5a>
 8013388:	4638      	mov	r0, r7
 801338a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801338e:	bf00      	nop
 8013390:	08015b90 	.word	0x08015b90

08013394 <__lshift>:
 8013394:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013398:	460c      	mov	r4, r1
 801339a:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801339e:	6923      	ldr	r3, [r4, #16]
 80133a0:	6849      	ldr	r1, [r1, #4]
 80133a2:	eb0a 0903 	add.w	r9, sl, r3
 80133a6:	68a3      	ldr	r3, [r4, #8]
 80133a8:	4607      	mov	r7, r0
 80133aa:	4616      	mov	r6, r2
 80133ac:	f109 0501 	add.w	r5, r9, #1
 80133b0:	42ab      	cmp	r3, r5
 80133b2:	db32      	blt.n	801341a <__lshift+0x86>
 80133b4:	4638      	mov	r0, r7
 80133b6:	f7ff fded 	bl	8012f94 <_Balloc>
 80133ba:	2300      	movs	r3, #0
 80133bc:	4680      	mov	r8, r0
 80133be:	f100 0114 	add.w	r1, r0, #20
 80133c2:	461a      	mov	r2, r3
 80133c4:	4553      	cmp	r3, sl
 80133c6:	db2b      	blt.n	8013420 <__lshift+0x8c>
 80133c8:	6920      	ldr	r0, [r4, #16]
 80133ca:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80133ce:	f104 0314 	add.w	r3, r4, #20
 80133d2:	f016 021f 	ands.w	r2, r6, #31
 80133d6:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80133da:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80133de:	d025      	beq.n	801342c <__lshift+0x98>
 80133e0:	f1c2 0e20 	rsb	lr, r2, #32
 80133e4:	2000      	movs	r0, #0
 80133e6:	681e      	ldr	r6, [r3, #0]
 80133e8:	468a      	mov	sl, r1
 80133ea:	4096      	lsls	r6, r2
 80133ec:	4330      	orrs	r0, r6
 80133ee:	f84a 0b04 	str.w	r0, [sl], #4
 80133f2:	f853 0b04 	ldr.w	r0, [r3], #4
 80133f6:	459c      	cmp	ip, r3
 80133f8:	fa20 f00e 	lsr.w	r0, r0, lr
 80133fc:	d814      	bhi.n	8013428 <__lshift+0x94>
 80133fe:	6048      	str	r0, [r1, #4]
 8013400:	b108      	cbz	r0, 8013406 <__lshift+0x72>
 8013402:	f109 0502 	add.w	r5, r9, #2
 8013406:	3d01      	subs	r5, #1
 8013408:	4638      	mov	r0, r7
 801340a:	f8c8 5010 	str.w	r5, [r8, #16]
 801340e:	4621      	mov	r1, r4
 8013410:	f7ff fdf4 	bl	8012ffc <_Bfree>
 8013414:	4640      	mov	r0, r8
 8013416:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801341a:	3101      	adds	r1, #1
 801341c:	005b      	lsls	r3, r3, #1
 801341e:	e7c7      	b.n	80133b0 <__lshift+0x1c>
 8013420:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8013424:	3301      	adds	r3, #1
 8013426:	e7cd      	b.n	80133c4 <__lshift+0x30>
 8013428:	4651      	mov	r1, sl
 801342a:	e7dc      	b.n	80133e6 <__lshift+0x52>
 801342c:	3904      	subs	r1, #4
 801342e:	f853 2b04 	ldr.w	r2, [r3], #4
 8013432:	f841 2f04 	str.w	r2, [r1, #4]!
 8013436:	459c      	cmp	ip, r3
 8013438:	d8f9      	bhi.n	801342e <__lshift+0x9a>
 801343a:	e7e4      	b.n	8013406 <__lshift+0x72>

0801343c <__mcmp>:
 801343c:	6903      	ldr	r3, [r0, #16]
 801343e:	690a      	ldr	r2, [r1, #16]
 8013440:	1a9b      	subs	r3, r3, r2
 8013442:	b530      	push	{r4, r5, lr}
 8013444:	d10c      	bne.n	8013460 <__mcmp+0x24>
 8013446:	0092      	lsls	r2, r2, #2
 8013448:	3014      	adds	r0, #20
 801344a:	3114      	adds	r1, #20
 801344c:	1884      	adds	r4, r0, r2
 801344e:	4411      	add	r1, r2
 8013450:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8013454:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8013458:	4295      	cmp	r5, r2
 801345a:	d003      	beq.n	8013464 <__mcmp+0x28>
 801345c:	d305      	bcc.n	801346a <__mcmp+0x2e>
 801345e:	2301      	movs	r3, #1
 8013460:	4618      	mov	r0, r3
 8013462:	bd30      	pop	{r4, r5, pc}
 8013464:	42a0      	cmp	r0, r4
 8013466:	d3f3      	bcc.n	8013450 <__mcmp+0x14>
 8013468:	e7fa      	b.n	8013460 <__mcmp+0x24>
 801346a:	f04f 33ff 	mov.w	r3, #4294967295
 801346e:	e7f7      	b.n	8013460 <__mcmp+0x24>

08013470 <__mdiff>:
 8013470:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013474:	460d      	mov	r5, r1
 8013476:	4607      	mov	r7, r0
 8013478:	4611      	mov	r1, r2
 801347a:	4628      	mov	r0, r5
 801347c:	4614      	mov	r4, r2
 801347e:	f7ff ffdd 	bl	801343c <__mcmp>
 8013482:	1e06      	subs	r6, r0, #0
 8013484:	d108      	bne.n	8013498 <__mdiff+0x28>
 8013486:	4631      	mov	r1, r6
 8013488:	4638      	mov	r0, r7
 801348a:	f7ff fd83 	bl	8012f94 <_Balloc>
 801348e:	2301      	movs	r3, #1
 8013490:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8013494:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013498:	bfa4      	itt	ge
 801349a:	4623      	movge	r3, r4
 801349c:	462c      	movge	r4, r5
 801349e:	4638      	mov	r0, r7
 80134a0:	6861      	ldr	r1, [r4, #4]
 80134a2:	bfa6      	itte	ge
 80134a4:	461d      	movge	r5, r3
 80134a6:	2600      	movge	r6, #0
 80134a8:	2601      	movlt	r6, #1
 80134aa:	f7ff fd73 	bl	8012f94 <_Balloc>
 80134ae:	692b      	ldr	r3, [r5, #16]
 80134b0:	60c6      	str	r6, [r0, #12]
 80134b2:	6926      	ldr	r6, [r4, #16]
 80134b4:	f105 0914 	add.w	r9, r5, #20
 80134b8:	f104 0214 	add.w	r2, r4, #20
 80134bc:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 80134c0:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 80134c4:	f100 0514 	add.w	r5, r0, #20
 80134c8:	f04f 0e00 	mov.w	lr, #0
 80134cc:	f852 ab04 	ldr.w	sl, [r2], #4
 80134d0:	f859 4b04 	ldr.w	r4, [r9], #4
 80134d4:	fa1e f18a 	uxtah	r1, lr, sl
 80134d8:	b2a3      	uxth	r3, r4
 80134da:	1ac9      	subs	r1, r1, r3
 80134dc:	0c23      	lsrs	r3, r4, #16
 80134de:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 80134e2:	eb03 4321 	add.w	r3, r3, r1, asr #16
 80134e6:	b289      	uxth	r1, r1
 80134e8:	ea4f 4e23 	mov.w	lr, r3, asr #16
 80134ec:	45c8      	cmp	r8, r9
 80134ee:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80134f2:	4694      	mov	ip, r2
 80134f4:	f845 3b04 	str.w	r3, [r5], #4
 80134f8:	d8e8      	bhi.n	80134cc <__mdiff+0x5c>
 80134fa:	45bc      	cmp	ip, r7
 80134fc:	d304      	bcc.n	8013508 <__mdiff+0x98>
 80134fe:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8013502:	b183      	cbz	r3, 8013526 <__mdiff+0xb6>
 8013504:	6106      	str	r6, [r0, #16]
 8013506:	e7c5      	b.n	8013494 <__mdiff+0x24>
 8013508:	f85c 1b04 	ldr.w	r1, [ip], #4
 801350c:	fa1e f381 	uxtah	r3, lr, r1
 8013510:	141a      	asrs	r2, r3, #16
 8013512:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8013516:	b29b      	uxth	r3, r3
 8013518:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801351c:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8013520:	f845 3b04 	str.w	r3, [r5], #4
 8013524:	e7e9      	b.n	80134fa <__mdiff+0x8a>
 8013526:	3e01      	subs	r6, #1
 8013528:	e7e9      	b.n	80134fe <__mdiff+0x8e>
	...

0801352c <__ulp>:
 801352c:	4b12      	ldr	r3, [pc, #72]	; (8013578 <__ulp+0x4c>)
 801352e:	ee10 2a90 	vmov	r2, s1
 8013532:	401a      	ands	r2, r3
 8013534:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 8013538:	2b00      	cmp	r3, #0
 801353a:	dd04      	ble.n	8013546 <__ulp+0x1a>
 801353c:	2000      	movs	r0, #0
 801353e:	4619      	mov	r1, r3
 8013540:	ec41 0b10 	vmov	d0, r0, r1
 8013544:	4770      	bx	lr
 8013546:	425b      	negs	r3, r3
 8013548:	151b      	asrs	r3, r3, #20
 801354a:	2b13      	cmp	r3, #19
 801354c:	f04f 0000 	mov.w	r0, #0
 8013550:	f04f 0100 	mov.w	r1, #0
 8013554:	dc04      	bgt.n	8013560 <__ulp+0x34>
 8013556:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 801355a:	fa42 f103 	asr.w	r1, r2, r3
 801355e:	e7ef      	b.n	8013540 <__ulp+0x14>
 8013560:	3b14      	subs	r3, #20
 8013562:	2b1e      	cmp	r3, #30
 8013564:	f04f 0201 	mov.w	r2, #1
 8013568:	bfda      	itte	le
 801356a:	f1c3 031f 	rsble	r3, r3, #31
 801356e:	fa02 f303 	lslle.w	r3, r2, r3
 8013572:	4613      	movgt	r3, r2
 8013574:	4618      	mov	r0, r3
 8013576:	e7e3      	b.n	8013540 <__ulp+0x14>
 8013578:	7ff00000 	.word	0x7ff00000

0801357c <__b2d>:
 801357c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801357e:	6905      	ldr	r5, [r0, #16]
 8013580:	f100 0714 	add.w	r7, r0, #20
 8013584:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8013588:	1f2e      	subs	r6, r5, #4
 801358a:	f855 4c04 	ldr.w	r4, [r5, #-4]
 801358e:	4620      	mov	r0, r4
 8013590:	f7ff fdc4 	bl	801311c <__hi0bits>
 8013594:	f1c0 0320 	rsb	r3, r0, #32
 8013598:	280a      	cmp	r0, #10
 801359a:	600b      	str	r3, [r1, #0]
 801359c:	f8df c074 	ldr.w	ip, [pc, #116]	; 8013614 <__b2d+0x98>
 80135a0:	dc14      	bgt.n	80135cc <__b2d+0x50>
 80135a2:	f1c0 0e0b 	rsb	lr, r0, #11
 80135a6:	fa24 f10e 	lsr.w	r1, r4, lr
 80135aa:	42b7      	cmp	r7, r6
 80135ac:	ea41 030c 	orr.w	r3, r1, ip
 80135b0:	bf34      	ite	cc
 80135b2:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80135b6:	2100      	movcs	r1, #0
 80135b8:	3015      	adds	r0, #21
 80135ba:	fa04 f000 	lsl.w	r0, r4, r0
 80135be:	fa21 f10e 	lsr.w	r1, r1, lr
 80135c2:	ea40 0201 	orr.w	r2, r0, r1
 80135c6:	ec43 2b10 	vmov	d0, r2, r3
 80135ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80135cc:	42b7      	cmp	r7, r6
 80135ce:	bf3a      	itte	cc
 80135d0:	f1a5 0608 	subcc.w	r6, r5, #8
 80135d4:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80135d8:	2100      	movcs	r1, #0
 80135da:	380b      	subs	r0, #11
 80135dc:	d015      	beq.n	801360a <__b2d+0x8e>
 80135de:	4084      	lsls	r4, r0
 80135e0:	f1c0 0520 	rsb	r5, r0, #32
 80135e4:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 80135e8:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 80135ec:	42be      	cmp	r6, r7
 80135ee:	fa21 fc05 	lsr.w	ip, r1, r5
 80135f2:	ea44 030c 	orr.w	r3, r4, ip
 80135f6:	bf8c      	ite	hi
 80135f8:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 80135fc:	2400      	movls	r4, #0
 80135fe:	fa01 f000 	lsl.w	r0, r1, r0
 8013602:	40ec      	lsrs	r4, r5
 8013604:	ea40 0204 	orr.w	r2, r0, r4
 8013608:	e7dd      	b.n	80135c6 <__b2d+0x4a>
 801360a:	ea44 030c 	orr.w	r3, r4, ip
 801360e:	460a      	mov	r2, r1
 8013610:	e7d9      	b.n	80135c6 <__b2d+0x4a>
 8013612:	bf00      	nop
 8013614:	3ff00000 	.word	0x3ff00000

08013618 <__d2b>:
 8013618:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801361c:	460e      	mov	r6, r1
 801361e:	2101      	movs	r1, #1
 8013620:	ec59 8b10 	vmov	r8, r9, d0
 8013624:	4615      	mov	r5, r2
 8013626:	f7ff fcb5 	bl	8012f94 <_Balloc>
 801362a:	f3c9 540a 	ubfx	r4, r9, #20, #11
 801362e:	4607      	mov	r7, r0
 8013630:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8013634:	bb34      	cbnz	r4, 8013684 <__d2b+0x6c>
 8013636:	9301      	str	r3, [sp, #4]
 8013638:	f1b8 0300 	subs.w	r3, r8, #0
 801363c:	d027      	beq.n	801368e <__d2b+0x76>
 801363e:	a802      	add	r0, sp, #8
 8013640:	f840 3d08 	str.w	r3, [r0, #-8]!
 8013644:	f7ff fd89 	bl	801315a <__lo0bits>
 8013648:	9900      	ldr	r1, [sp, #0]
 801364a:	b1f0      	cbz	r0, 801368a <__d2b+0x72>
 801364c:	9a01      	ldr	r2, [sp, #4]
 801364e:	f1c0 0320 	rsb	r3, r0, #32
 8013652:	fa02 f303 	lsl.w	r3, r2, r3
 8013656:	430b      	orrs	r3, r1
 8013658:	40c2      	lsrs	r2, r0
 801365a:	617b      	str	r3, [r7, #20]
 801365c:	9201      	str	r2, [sp, #4]
 801365e:	9b01      	ldr	r3, [sp, #4]
 8013660:	61bb      	str	r3, [r7, #24]
 8013662:	2b00      	cmp	r3, #0
 8013664:	bf14      	ite	ne
 8013666:	2102      	movne	r1, #2
 8013668:	2101      	moveq	r1, #1
 801366a:	6139      	str	r1, [r7, #16]
 801366c:	b1c4      	cbz	r4, 80136a0 <__d2b+0x88>
 801366e:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8013672:	4404      	add	r4, r0
 8013674:	6034      	str	r4, [r6, #0]
 8013676:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 801367a:	6028      	str	r0, [r5, #0]
 801367c:	4638      	mov	r0, r7
 801367e:	b003      	add	sp, #12
 8013680:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013684:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8013688:	e7d5      	b.n	8013636 <__d2b+0x1e>
 801368a:	6179      	str	r1, [r7, #20]
 801368c:	e7e7      	b.n	801365e <__d2b+0x46>
 801368e:	a801      	add	r0, sp, #4
 8013690:	f7ff fd63 	bl	801315a <__lo0bits>
 8013694:	9b01      	ldr	r3, [sp, #4]
 8013696:	617b      	str	r3, [r7, #20]
 8013698:	2101      	movs	r1, #1
 801369a:	6139      	str	r1, [r7, #16]
 801369c:	3020      	adds	r0, #32
 801369e:	e7e5      	b.n	801366c <__d2b+0x54>
 80136a0:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 80136a4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80136a8:	6030      	str	r0, [r6, #0]
 80136aa:	6918      	ldr	r0, [r3, #16]
 80136ac:	f7ff fd36 	bl	801311c <__hi0bits>
 80136b0:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 80136b4:	e7e1      	b.n	801367a <__d2b+0x62>

080136b6 <__ratio>:
 80136b6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80136ba:	4688      	mov	r8, r1
 80136bc:	4669      	mov	r1, sp
 80136be:	4681      	mov	r9, r0
 80136c0:	f7ff ff5c 	bl	801357c <__b2d>
 80136c4:	a901      	add	r1, sp, #4
 80136c6:	4640      	mov	r0, r8
 80136c8:	ec57 6b10 	vmov	r6, r7, d0
 80136cc:	f7ff ff56 	bl	801357c <__b2d>
 80136d0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80136d4:	f8d8 2010 	ldr.w	r2, [r8, #16]
 80136d8:	eba3 0c02 	sub.w	ip, r3, r2
 80136dc:	e9dd 3200 	ldrd	r3, r2, [sp]
 80136e0:	1a9b      	subs	r3, r3, r2
 80136e2:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 80136e6:	ec5b ab10 	vmov	sl, fp, d0
 80136ea:	2b00      	cmp	r3, #0
 80136ec:	bfce      	itee	gt
 80136ee:	463a      	movgt	r2, r7
 80136f0:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80136f4:	465a      	movle	r2, fp
 80136f6:	4659      	mov	r1, fp
 80136f8:	463d      	mov	r5, r7
 80136fa:	bfd4      	ite	le
 80136fc:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
 8013700:	eb02 5503 	addgt.w	r5, r2, r3, lsl #20
 8013704:	4630      	mov	r0, r6
 8013706:	ee10 2a10 	vmov	r2, s0
 801370a:	460b      	mov	r3, r1
 801370c:	4629      	mov	r1, r5
 801370e:	f7ed f89d 	bl	800084c <__aeabi_ddiv>
 8013712:	ec41 0b10 	vmov	d0, r0, r1
 8013716:	b003      	add	sp, #12
 8013718:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801371c <__copybits>:
 801371c:	3901      	subs	r1, #1
 801371e:	b510      	push	{r4, lr}
 8013720:	1149      	asrs	r1, r1, #5
 8013722:	6914      	ldr	r4, [r2, #16]
 8013724:	3101      	adds	r1, #1
 8013726:	f102 0314 	add.w	r3, r2, #20
 801372a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 801372e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8013732:	42a3      	cmp	r3, r4
 8013734:	4602      	mov	r2, r0
 8013736:	d303      	bcc.n	8013740 <__copybits+0x24>
 8013738:	2300      	movs	r3, #0
 801373a:	428a      	cmp	r2, r1
 801373c:	d305      	bcc.n	801374a <__copybits+0x2e>
 801373e:	bd10      	pop	{r4, pc}
 8013740:	f853 2b04 	ldr.w	r2, [r3], #4
 8013744:	f840 2b04 	str.w	r2, [r0], #4
 8013748:	e7f3      	b.n	8013732 <__copybits+0x16>
 801374a:	f842 3b04 	str.w	r3, [r2], #4
 801374e:	e7f4      	b.n	801373a <__copybits+0x1e>

08013750 <__any_on>:
 8013750:	f100 0214 	add.w	r2, r0, #20
 8013754:	6900      	ldr	r0, [r0, #16]
 8013756:	114b      	asrs	r3, r1, #5
 8013758:	4298      	cmp	r0, r3
 801375a:	b510      	push	{r4, lr}
 801375c:	db11      	blt.n	8013782 <__any_on+0x32>
 801375e:	dd0a      	ble.n	8013776 <__any_on+0x26>
 8013760:	f011 011f 	ands.w	r1, r1, #31
 8013764:	d007      	beq.n	8013776 <__any_on+0x26>
 8013766:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 801376a:	fa24 f001 	lsr.w	r0, r4, r1
 801376e:	fa00 f101 	lsl.w	r1, r0, r1
 8013772:	428c      	cmp	r4, r1
 8013774:	d10b      	bne.n	801378e <__any_on+0x3e>
 8013776:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801377a:	4293      	cmp	r3, r2
 801377c:	d803      	bhi.n	8013786 <__any_on+0x36>
 801377e:	2000      	movs	r0, #0
 8013780:	bd10      	pop	{r4, pc}
 8013782:	4603      	mov	r3, r0
 8013784:	e7f7      	b.n	8013776 <__any_on+0x26>
 8013786:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801378a:	2900      	cmp	r1, #0
 801378c:	d0f5      	beq.n	801377a <__any_on+0x2a>
 801378e:	2001      	movs	r0, #1
 8013790:	e7f6      	b.n	8013780 <__any_on+0x30>

08013792 <_calloc_r>:
 8013792:	b538      	push	{r3, r4, r5, lr}
 8013794:	fb02 f401 	mul.w	r4, r2, r1
 8013798:	4621      	mov	r1, r4
 801379a:	f7fc fcd9 	bl	8010150 <_malloc_r>
 801379e:	4605      	mov	r5, r0
 80137a0:	b118      	cbz	r0, 80137aa <_calloc_r+0x18>
 80137a2:	4622      	mov	r2, r4
 80137a4:	2100      	movs	r1, #0
 80137a6:	f7fc fc7c 	bl	80100a2 <memset>
 80137aa:	4628      	mov	r0, r5
 80137ac:	bd38      	pop	{r3, r4, r5, pc}

080137ae <__ssputs_r>:
 80137ae:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80137b2:	688e      	ldr	r6, [r1, #8]
 80137b4:	429e      	cmp	r6, r3
 80137b6:	4682      	mov	sl, r0
 80137b8:	460c      	mov	r4, r1
 80137ba:	4690      	mov	r8, r2
 80137bc:	4699      	mov	r9, r3
 80137be:	d837      	bhi.n	8013830 <__ssputs_r+0x82>
 80137c0:	898a      	ldrh	r2, [r1, #12]
 80137c2:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80137c6:	d031      	beq.n	801382c <__ssputs_r+0x7e>
 80137c8:	6825      	ldr	r5, [r4, #0]
 80137ca:	6909      	ldr	r1, [r1, #16]
 80137cc:	1a6f      	subs	r7, r5, r1
 80137ce:	6965      	ldr	r5, [r4, #20]
 80137d0:	2302      	movs	r3, #2
 80137d2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80137d6:	fb95 f5f3 	sdiv	r5, r5, r3
 80137da:	f109 0301 	add.w	r3, r9, #1
 80137de:	443b      	add	r3, r7
 80137e0:	429d      	cmp	r5, r3
 80137e2:	bf38      	it	cc
 80137e4:	461d      	movcc	r5, r3
 80137e6:	0553      	lsls	r3, r2, #21
 80137e8:	d530      	bpl.n	801384c <__ssputs_r+0x9e>
 80137ea:	4629      	mov	r1, r5
 80137ec:	f7fc fcb0 	bl	8010150 <_malloc_r>
 80137f0:	4606      	mov	r6, r0
 80137f2:	b950      	cbnz	r0, 801380a <__ssputs_r+0x5c>
 80137f4:	230c      	movs	r3, #12
 80137f6:	f8ca 3000 	str.w	r3, [sl]
 80137fa:	89a3      	ldrh	r3, [r4, #12]
 80137fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013800:	81a3      	strh	r3, [r4, #12]
 8013802:	f04f 30ff 	mov.w	r0, #4294967295
 8013806:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801380a:	463a      	mov	r2, r7
 801380c:	6921      	ldr	r1, [r4, #16]
 801380e:	f7fc fc3d 	bl	801008c <memcpy>
 8013812:	89a3      	ldrh	r3, [r4, #12]
 8013814:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8013818:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801381c:	81a3      	strh	r3, [r4, #12]
 801381e:	6126      	str	r6, [r4, #16]
 8013820:	6165      	str	r5, [r4, #20]
 8013822:	443e      	add	r6, r7
 8013824:	1bed      	subs	r5, r5, r7
 8013826:	6026      	str	r6, [r4, #0]
 8013828:	60a5      	str	r5, [r4, #8]
 801382a:	464e      	mov	r6, r9
 801382c:	454e      	cmp	r6, r9
 801382e:	d900      	bls.n	8013832 <__ssputs_r+0x84>
 8013830:	464e      	mov	r6, r9
 8013832:	4632      	mov	r2, r6
 8013834:	4641      	mov	r1, r8
 8013836:	6820      	ldr	r0, [r4, #0]
 8013838:	f000 f919 	bl	8013a6e <memmove>
 801383c:	68a3      	ldr	r3, [r4, #8]
 801383e:	1b9b      	subs	r3, r3, r6
 8013840:	60a3      	str	r3, [r4, #8]
 8013842:	6823      	ldr	r3, [r4, #0]
 8013844:	441e      	add	r6, r3
 8013846:	6026      	str	r6, [r4, #0]
 8013848:	2000      	movs	r0, #0
 801384a:	e7dc      	b.n	8013806 <__ssputs_r+0x58>
 801384c:	462a      	mov	r2, r5
 801384e:	f000 f927 	bl	8013aa0 <_realloc_r>
 8013852:	4606      	mov	r6, r0
 8013854:	2800      	cmp	r0, #0
 8013856:	d1e2      	bne.n	801381e <__ssputs_r+0x70>
 8013858:	6921      	ldr	r1, [r4, #16]
 801385a:	4650      	mov	r0, sl
 801385c:	f7fc fc2a 	bl	80100b4 <_free_r>
 8013860:	e7c8      	b.n	80137f4 <__ssputs_r+0x46>
	...

08013864 <_svfiprintf_r>:
 8013864:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013868:	461d      	mov	r5, r3
 801386a:	898b      	ldrh	r3, [r1, #12]
 801386c:	061f      	lsls	r7, r3, #24
 801386e:	b09d      	sub	sp, #116	; 0x74
 8013870:	4680      	mov	r8, r0
 8013872:	460c      	mov	r4, r1
 8013874:	4616      	mov	r6, r2
 8013876:	d50f      	bpl.n	8013898 <_svfiprintf_r+0x34>
 8013878:	690b      	ldr	r3, [r1, #16]
 801387a:	b96b      	cbnz	r3, 8013898 <_svfiprintf_r+0x34>
 801387c:	2140      	movs	r1, #64	; 0x40
 801387e:	f7fc fc67 	bl	8010150 <_malloc_r>
 8013882:	6020      	str	r0, [r4, #0]
 8013884:	6120      	str	r0, [r4, #16]
 8013886:	b928      	cbnz	r0, 8013894 <_svfiprintf_r+0x30>
 8013888:	230c      	movs	r3, #12
 801388a:	f8c8 3000 	str.w	r3, [r8]
 801388e:	f04f 30ff 	mov.w	r0, #4294967295
 8013892:	e0c8      	b.n	8013a26 <_svfiprintf_r+0x1c2>
 8013894:	2340      	movs	r3, #64	; 0x40
 8013896:	6163      	str	r3, [r4, #20]
 8013898:	2300      	movs	r3, #0
 801389a:	9309      	str	r3, [sp, #36]	; 0x24
 801389c:	2320      	movs	r3, #32
 801389e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80138a2:	2330      	movs	r3, #48	; 0x30
 80138a4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80138a8:	9503      	str	r5, [sp, #12]
 80138aa:	f04f 0b01 	mov.w	fp, #1
 80138ae:	4637      	mov	r7, r6
 80138b0:	463d      	mov	r5, r7
 80138b2:	f815 3b01 	ldrb.w	r3, [r5], #1
 80138b6:	b10b      	cbz	r3, 80138bc <_svfiprintf_r+0x58>
 80138b8:	2b25      	cmp	r3, #37	; 0x25
 80138ba:	d13e      	bne.n	801393a <_svfiprintf_r+0xd6>
 80138bc:	ebb7 0a06 	subs.w	sl, r7, r6
 80138c0:	d00b      	beq.n	80138da <_svfiprintf_r+0x76>
 80138c2:	4653      	mov	r3, sl
 80138c4:	4632      	mov	r2, r6
 80138c6:	4621      	mov	r1, r4
 80138c8:	4640      	mov	r0, r8
 80138ca:	f7ff ff70 	bl	80137ae <__ssputs_r>
 80138ce:	3001      	adds	r0, #1
 80138d0:	f000 80a4 	beq.w	8013a1c <_svfiprintf_r+0x1b8>
 80138d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80138d6:	4453      	add	r3, sl
 80138d8:	9309      	str	r3, [sp, #36]	; 0x24
 80138da:	783b      	ldrb	r3, [r7, #0]
 80138dc:	2b00      	cmp	r3, #0
 80138de:	f000 809d 	beq.w	8013a1c <_svfiprintf_r+0x1b8>
 80138e2:	2300      	movs	r3, #0
 80138e4:	f04f 32ff 	mov.w	r2, #4294967295
 80138e8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80138ec:	9304      	str	r3, [sp, #16]
 80138ee:	9307      	str	r3, [sp, #28]
 80138f0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80138f4:	931a      	str	r3, [sp, #104]	; 0x68
 80138f6:	462f      	mov	r7, r5
 80138f8:	2205      	movs	r2, #5
 80138fa:	f817 1b01 	ldrb.w	r1, [r7], #1
 80138fe:	4850      	ldr	r0, [pc, #320]	; (8013a40 <_svfiprintf_r+0x1dc>)
 8013900:	f7ec fc6e 	bl	80001e0 <memchr>
 8013904:	9b04      	ldr	r3, [sp, #16]
 8013906:	b9d0      	cbnz	r0, 801393e <_svfiprintf_r+0xda>
 8013908:	06d9      	lsls	r1, r3, #27
 801390a:	bf44      	itt	mi
 801390c:	2220      	movmi	r2, #32
 801390e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8013912:	071a      	lsls	r2, r3, #28
 8013914:	bf44      	itt	mi
 8013916:	222b      	movmi	r2, #43	; 0x2b
 8013918:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 801391c:	782a      	ldrb	r2, [r5, #0]
 801391e:	2a2a      	cmp	r2, #42	; 0x2a
 8013920:	d015      	beq.n	801394e <_svfiprintf_r+0xea>
 8013922:	9a07      	ldr	r2, [sp, #28]
 8013924:	462f      	mov	r7, r5
 8013926:	2000      	movs	r0, #0
 8013928:	250a      	movs	r5, #10
 801392a:	4639      	mov	r1, r7
 801392c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8013930:	3b30      	subs	r3, #48	; 0x30
 8013932:	2b09      	cmp	r3, #9
 8013934:	d94d      	bls.n	80139d2 <_svfiprintf_r+0x16e>
 8013936:	b1b8      	cbz	r0, 8013968 <_svfiprintf_r+0x104>
 8013938:	e00f      	b.n	801395a <_svfiprintf_r+0xf6>
 801393a:	462f      	mov	r7, r5
 801393c:	e7b8      	b.n	80138b0 <_svfiprintf_r+0x4c>
 801393e:	4a40      	ldr	r2, [pc, #256]	; (8013a40 <_svfiprintf_r+0x1dc>)
 8013940:	1a80      	subs	r0, r0, r2
 8013942:	fa0b f000 	lsl.w	r0, fp, r0
 8013946:	4318      	orrs	r0, r3
 8013948:	9004      	str	r0, [sp, #16]
 801394a:	463d      	mov	r5, r7
 801394c:	e7d3      	b.n	80138f6 <_svfiprintf_r+0x92>
 801394e:	9a03      	ldr	r2, [sp, #12]
 8013950:	1d11      	adds	r1, r2, #4
 8013952:	6812      	ldr	r2, [r2, #0]
 8013954:	9103      	str	r1, [sp, #12]
 8013956:	2a00      	cmp	r2, #0
 8013958:	db01      	blt.n	801395e <_svfiprintf_r+0xfa>
 801395a:	9207      	str	r2, [sp, #28]
 801395c:	e004      	b.n	8013968 <_svfiprintf_r+0x104>
 801395e:	4252      	negs	r2, r2
 8013960:	f043 0302 	orr.w	r3, r3, #2
 8013964:	9207      	str	r2, [sp, #28]
 8013966:	9304      	str	r3, [sp, #16]
 8013968:	783b      	ldrb	r3, [r7, #0]
 801396a:	2b2e      	cmp	r3, #46	; 0x2e
 801396c:	d10c      	bne.n	8013988 <_svfiprintf_r+0x124>
 801396e:	787b      	ldrb	r3, [r7, #1]
 8013970:	2b2a      	cmp	r3, #42	; 0x2a
 8013972:	d133      	bne.n	80139dc <_svfiprintf_r+0x178>
 8013974:	9b03      	ldr	r3, [sp, #12]
 8013976:	1d1a      	adds	r2, r3, #4
 8013978:	681b      	ldr	r3, [r3, #0]
 801397a:	9203      	str	r2, [sp, #12]
 801397c:	2b00      	cmp	r3, #0
 801397e:	bfb8      	it	lt
 8013980:	f04f 33ff 	movlt.w	r3, #4294967295
 8013984:	3702      	adds	r7, #2
 8013986:	9305      	str	r3, [sp, #20]
 8013988:	4d2e      	ldr	r5, [pc, #184]	; (8013a44 <_svfiprintf_r+0x1e0>)
 801398a:	7839      	ldrb	r1, [r7, #0]
 801398c:	2203      	movs	r2, #3
 801398e:	4628      	mov	r0, r5
 8013990:	f7ec fc26 	bl	80001e0 <memchr>
 8013994:	b138      	cbz	r0, 80139a6 <_svfiprintf_r+0x142>
 8013996:	2340      	movs	r3, #64	; 0x40
 8013998:	1b40      	subs	r0, r0, r5
 801399a:	fa03 f000 	lsl.w	r0, r3, r0
 801399e:	9b04      	ldr	r3, [sp, #16]
 80139a0:	4303      	orrs	r3, r0
 80139a2:	3701      	adds	r7, #1
 80139a4:	9304      	str	r3, [sp, #16]
 80139a6:	7839      	ldrb	r1, [r7, #0]
 80139a8:	4827      	ldr	r0, [pc, #156]	; (8013a48 <_svfiprintf_r+0x1e4>)
 80139aa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80139ae:	2206      	movs	r2, #6
 80139b0:	1c7e      	adds	r6, r7, #1
 80139b2:	f7ec fc15 	bl	80001e0 <memchr>
 80139b6:	2800      	cmp	r0, #0
 80139b8:	d038      	beq.n	8013a2c <_svfiprintf_r+0x1c8>
 80139ba:	4b24      	ldr	r3, [pc, #144]	; (8013a4c <_svfiprintf_r+0x1e8>)
 80139bc:	bb13      	cbnz	r3, 8013a04 <_svfiprintf_r+0x1a0>
 80139be:	9b03      	ldr	r3, [sp, #12]
 80139c0:	3307      	adds	r3, #7
 80139c2:	f023 0307 	bic.w	r3, r3, #7
 80139c6:	3308      	adds	r3, #8
 80139c8:	9303      	str	r3, [sp, #12]
 80139ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80139cc:	444b      	add	r3, r9
 80139ce:	9309      	str	r3, [sp, #36]	; 0x24
 80139d0:	e76d      	b.n	80138ae <_svfiprintf_r+0x4a>
 80139d2:	fb05 3202 	mla	r2, r5, r2, r3
 80139d6:	2001      	movs	r0, #1
 80139d8:	460f      	mov	r7, r1
 80139da:	e7a6      	b.n	801392a <_svfiprintf_r+0xc6>
 80139dc:	2300      	movs	r3, #0
 80139de:	3701      	adds	r7, #1
 80139e0:	9305      	str	r3, [sp, #20]
 80139e2:	4619      	mov	r1, r3
 80139e4:	250a      	movs	r5, #10
 80139e6:	4638      	mov	r0, r7
 80139e8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80139ec:	3a30      	subs	r2, #48	; 0x30
 80139ee:	2a09      	cmp	r2, #9
 80139f0:	d903      	bls.n	80139fa <_svfiprintf_r+0x196>
 80139f2:	2b00      	cmp	r3, #0
 80139f4:	d0c8      	beq.n	8013988 <_svfiprintf_r+0x124>
 80139f6:	9105      	str	r1, [sp, #20]
 80139f8:	e7c6      	b.n	8013988 <_svfiprintf_r+0x124>
 80139fa:	fb05 2101 	mla	r1, r5, r1, r2
 80139fe:	2301      	movs	r3, #1
 8013a00:	4607      	mov	r7, r0
 8013a02:	e7f0      	b.n	80139e6 <_svfiprintf_r+0x182>
 8013a04:	ab03      	add	r3, sp, #12
 8013a06:	9300      	str	r3, [sp, #0]
 8013a08:	4622      	mov	r2, r4
 8013a0a:	4b11      	ldr	r3, [pc, #68]	; (8013a50 <_svfiprintf_r+0x1ec>)
 8013a0c:	a904      	add	r1, sp, #16
 8013a0e:	4640      	mov	r0, r8
 8013a10:	f7fc fc8c 	bl	801032c <_printf_float>
 8013a14:	f1b0 3fff 	cmp.w	r0, #4294967295
 8013a18:	4681      	mov	r9, r0
 8013a1a:	d1d6      	bne.n	80139ca <_svfiprintf_r+0x166>
 8013a1c:	89a3      	ldrh	r3, [r4, #12]
 8013a1e:	065b      	lsls	r3, r3, #25
 8013a20:	f53f af35 	bmi.w	801388e <_svfiprintf_r+0x2a>
 8013a24:	9809      	ldr	r0, [sp, #36]	; 0x24
 8013a26:	b01d      	add	sp, #116	; 0x74
 8013a28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013a2c:	ab03      	add	r3, sp, #12
 8013a2e:	9300      	str	r3, [sp, #0]
 8013a30:	4622      	mov	r2, r4
 8013a32:	4b07      	ldr	r3, [pc, #28]	; (8013a50 <_svfiprintf_r+0x1ec>)
 8013a34:	a904      	add	r1, sp, #16
 8013a36:	4640      	mov	r0, r8
 8013a38:	f7fc ff2e 	bl	8010898 <_printf_i>
 8013a3c:	e7ea      	b.n	8013a14 <_svfiprintf_r+0x1b0>
 8013a3e:	bf00      	nop
 8013a40:	08015b9c 	.word	0x08015b9c
 8013a44:	08015ba2 	.word	0x08015ba2
 8013a48:	08015ba6 	.word	0x08015ba6
 8013a4c:	0801032d 	.word	0x0801032d
 8013a50:	080137af 	.word	0x080137af

08013a54 <__ascii_wctomb>:
 8013a54:	b149      	cbz	r1, 8013a6a <__ascii_wctomb+0x16>
 8013a56:	2aff      	cmp	r2, #255	; 0xff
 8013a58:	bf85      	ittet	hi
 8013a5a:	238a      	movhi	r3, #138	; 0x8a
 8013a5c:	6003      	strhi	r3, [r0, #0]
 8013a5e:	700a      	strbls	r2, [r1, #0]
 8013a60:	f04f 30ff 	movhi.w	r0, #4294967295
 8013a64:	bf98      	it	ls
 8013a66:	2001      	movls	r0, #1
 8013a68:	4770      	bx	lr
 8013a6a:	4608      	mov	r0, r1
 8013a6c:	4770      	bx	lr

08013a6e <memmove>:
 8013a6e:	4288      	cmp	r0, r1
 8013a70:	b510      	push	{r4, lr}
 8013a72:	eb01 0302 	add.w	r3, r1, r2
 8013a76:	d807      	bhi.n	8013a88 <memmove+0x1a>
 8013a78:	1e42      	subs	r2, r0, #1
 8013a7a:	4299      	cmp	r1, r3
 8013a7c:	d00a      	beq.n	8013a94 <memmove+0x26>
 8013a7e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8013a82:	f802 4f01 	strb.w	r4, [r2, #1]!
 8013a86:	e7f8      	b.n	8013a7a <memmove+0xc>
 8013a88:	4283      	cmp	r3, r0
 8013a8a:	d9f5      	bls.n	8013a78 <memmove+0xa>
 8013a8c:	1881      	adds	r1, r0, r2
 8013a8e:	1ad2      	subs	r2, r2, r3
 8013a90:	42d3      	cmn	r3, r2
 8013a92:	d100      	bne.n	8013a96 <memmove+0x28>
 8013a94:	bd10      	pop	{r4, pc}
 8013a96:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8013a9a:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8013a9e:	e7f7      	b.n	8013a90 <memmove+0x22>

08013aa0 <_realloc_r>:
 8013aa0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013aa2:	4607      	mov	r7, r0
 8013aa4:	4614      	mov	r4, r2
 8013aa6:	460e      	mov	r6, r1
 8013aa8:	b921      	cbnz	r1, 8013ab4 <_realloc_r+0x14>
 8013aaa:	4611      	mov	r1, r2
 8013aac:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8013ab0:	f7fc bb4e 	b.w	8010150 <_malloc_r>
 8013ab4:	b922      	cbnz	r2, 8013ac0 <_realloc_r+0x20>
 8013ab6:	f7fc fafd 	bl	80100b4 <_free_r>
 8013aba:	4625      	mov	r5, r4
 8013abc:	4628      	mov	r0, r5
 8013abe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013ac0:	f000 f814 	bl	8013aec <_malloc_usable_size_r>
 8013ac4:	42a0      	cmp	r0, r4
 8013ac6:	d20f      	bcs.n	8013ae8 <_realloc_r+0x48>
 8013ac8:	4621      	mov	r1, r4
 8013aca:	4638      	mov	r0, r7
 8013acc:	f7fc fb40 	bl	8010150 <_malloc_r>
 8013ad0:	4605      	mov	r5, r0
 8013ad2:	2800      	cmp	r0, #0
 8013ad4:	d0f2      	beq.n	8013abc <_realloc_r+0x1c>
 8013ad6:	4631      	mov	r1, r6
 8013ad8:	4622      	mov	r2, r4
 8013ada:	f7fc fad7 	bl	801008c <memcpy>
 8013ade:	4631      	mov	r1, r6
 8013ae0:	4638      	mov	r0, r7
 8013ae2:	f7fc fae7 	bl	80100b4 <_free_r>
 8013ae6:	e7e9      	b.n	8013abc <_realloc_r+0x1c>
 8013ae8:	4635      	mov	r5, r6
 8013aea:	e7e7      	b.n	8013abc <_realloc_r+0x1c>

08013aec <_malloc_usable_size_r>:
 8013aec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8013af0:	1f18      	subs	r0, r3, #4
 8013af2:	2b00      	cmp	r3, #0
 8013af4:	bfbc      	itt	lt
 8013af6:	580b      	ldrlt	r3, [r1, r0]
 8013af8:	18c0      	addlt	r0, r0, r3
 8013afa:	4770      	bx	lr

08013afc <pow>:
 8013afc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013b00:	ed2d 8b04 	vpush	{d8-d9}
 8013b04:	f8df 92d0 	ldr.w	r9, [pc, #720]	; 8013dd8 <pow+0x2dc>
 8013b08:	b08d      	sub	sp, #52	; 0x34
 8013b0a:	ec57 6b10 	vmov	r6, r7, d0
 8013b0e:	ec55 4b11 	vmov	r4, r5, d1
 8013b12:	f000 fa19 	bl	8013f48 <__ieee754_pow>
 8013b16:	f999 3000 	ldrsb.w	r3, [r9]
 8013b1a:	9300      	str	r3, [sp, #0]
 8013b1c:	3301      	adds	r3, #1
 8013b1e:	eeb0 8a40 	vmov.f32	s16, s0
 8013b22:	eef0 8a60 	vmov.f32	s17, s1
 8013b26:	46c8      	mov	r8, r9
 8013b28:	d05f      	beq.n	8013bea <pow+0xee>
 8013b2a:	4622      	mov	r2, r4
 8013b2c:	462b      	mov	r3, r5
 8013b2e:	4620      	mov	r0, r4
 8013b30:	4629      	mov	r1, r5
 8013b32:	f7ec fffb 	bl	8000b2c <__aeabi_dcmpun>
 8013b36:	4683      	mov	fp, r0
 8013b38:	2800      	cmp	r0, #0
 8013b3a:	d156      	bne.n	8013bea <pow+0xee>
 8013b3c:	4632      	mov	r2, r6
 8013b3e:	463b      	mov	r3, r7
 8013b40:	4630      	mov	r0, r6
 8013b42:	4639      	mov	r1, r7
 8013b44:	f7ec fff2 	bl	8000b2c <__aeabi_dcmpun>
 8013b48:	9001      	str	r0, [sp, #4]
 8013b4a:	b1e8      	cbz	r0, 8013b88 <pow+0x8c>
 8013b4c:	2200      	movs	r2, #0
 8013b4e:	2300      	movs	r3, #0
 8013b50:	4620      	mov	r0, r4
 8013b52:	4629      	mov	r1, r5
 8013b54:	f7ec ffb8 	bl	8000ac8 <__aeabi_dcmpeq>
 8013b58:	2800      	cmp	r0, #0
 8013b5a:	d046      	beq.n	8013bea <pow+0xee>
 8013b5c:	2301      	movs	r3, #1
 8013b5e:	9302      	str	r3, [sp, #8]
 8013b60:	4b96      	ldr	r3, [pc, #600]	; (8013dbc <pow+0x2c0>)
 8013b62:	9303      	str	r3, [sp, #12]
 8013b64:	4b96      	ldr	r3, [pc, #600]	; (8013dc0 <pow+0x2c4>)
 8013b66:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 8013b6a:	2200      	movs	r2, #0
 8013b6c:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8013b70:	9b00      	ldr	r3, [sp, #0]
 8013b72:	2b02      	cmp	r3, #2
 8013b74:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8013b78:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8013b7c:	d033      	beq.n	8013be6 <pow+0xea>
 8013b7e:	a802      	add	r0, sp, #8
 8013b80:	f001 f94a 	bl	8014e18 <matherr>
 8013b84:	bb48      	cbnz	r0, 8013bda <pow+0xde>
 8013b86:	e05d      	b.n	8013c44 <pow+0x148>
 8013b88:	f04f 0a00 	mov.w	sl, #0
 8013b8c:	f04f 0b00 	mov.w	fp, #0
 8013b90:	4652      	mov	r2, sl
 8013b92:	465b      	mov	r3, fp
 8013b94:	4630      	mov	r0, r6
 8013b96:	4639      	mov	r1, r7
 8013b98:	f7ec ff96 	bl	8000ac8 <__aeabi_dcmpeq>
 8013b9c:	ec4b ab19 	vmov	d9, sl, fp
 8013ba0:	2800      	cmp	r0, #0
 8013ba2:	d054      	beq.n	8013c4e <pow+0x152>
 8013ba4:	4652      	mov	r2, sl
 8013ba6:	465b      	mov	r3, fp
 8013ba8:	4620      	mov	r0, r4
 8013baa:	4629      	mov	r1, r5
 8013bac:	f7ec ff8c 	bl	8000ac8 <__aeabi_dcmpeq>
 8013bb0:	4680      	mov	r8, r0
 8013bb2:	b318      	cbz	r0, 8013bfc <pow+0x100>
 8013bb4:	2301      	movs	r3, #1
 8013bb6:	9302      	str	r3, [sp, #8]
 8013bb8:	4b80      	ldr	r3, [pc, #512]	; (8013dbc <pow+0x2c0>)
 8013bba:	9303      	str	r3, [sp, #12]
 8013bbc:	9b01      	ldr	r3, [sp, #4]
 8013bbe:	930a      	str	r3, [sp, #40]	; 0x28
 8013bc0:	9b00      	ldr	r3, [sp, #0]
 8013bc2:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8013bc6:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8013bca:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8013bce:	2b00      	cmp	r3, #0
 8013bd0:	d0d5      	beq.n	8013b7e <pow+0x82>
 8013bd2:	4b7b      	ldr	r3, [pc, #492]	; (8013dc0 <pow+0x2c4>)
 8013bd4:	2200      	movs	r2, #0
 8013bd6:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8013bda:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013bdc:	b11b      	cbz	r3, 8013be6 <pow+0xea>
 8013bde:	f001 fb0b 	bl	80151f8 <__errno>
 8013be2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013be4:	6003      	str	r3, [r0, #0]
 8013be6:	ed9d 8b08 	vldr	d8, [sp, #32]
 8013bea:	eeb0 0a48 	vmov.f32	s0, s16
 8013bee:	eef0 0a68 	vmov.f32	s1, s17
 8013bf2:	b00d      	add	sp, #52	; 0x34
 8013bf4:	ecbd 8b04 	vpop	{d8-d9}
 8013bf8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013bfc:	ec45 4b10 	vmov	d0, r4, r5
 8013c00:	f001 f902 	bl	8014e08 <finite>
 8013c04:	2800      	cmp	r0, #0
 8013c06:	d0f0      	beq.n	8013bea <pow+0xee>
 8013c08:	4652      	mov	r2, sl
 8013c0a:	465b      	mov	r3, fp
 8013c0c:	4620      	mov	r0, r4
 8013c0e:	4629      	mov	r1, r5
 8013c10:	f7ec ff64 	bl	8000adc <__aeabi_dcmplt>
 8013c14:	2800      	cmp	r0, #0
 8013c16:	d0e8      	beq.n	8013bea <pow+0xee>
 8013c18:	2301      	movs	r3, #1
 8013c1a:	9302      	str	r3, [sp, #8]
 8013c1c:	4b67      	ldr	r3, [pc, #412]	; (8013dbc <pow+0x2c0>)
 8013c1e:	9303      	str	r3, [sp, #12]
 8013c20:	f999 3000 	ldrsb.w	r3, [r9]
 8013c24:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
 8013c28:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8013c2c:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8013c30:	b913      	cbnz	r3, 8013c38 <pow+0x13c>
 8013c32:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8013c36:	e7a2      	b.n	8013b7e <pow+0x82>
 8013c38:	4962      	ldr	r1, [pc, #392]	; (8013dc4 <pow+0x2c8>)
 8013c3a:	2000      	movs	r0, #0
 8013c3c:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8013c40:	2b02      	cmp	r3, #2
 8013c42:	d19c      	bne.n	8013b7e <pow+0x82>
 8013c44:	f001 fad8 	bl	80151f8 <__errno>
 8013c48:	2321      	movs	r3, #33	; 0x21
 8013c4a:	6003      	str	r3, [r0, #0]
 8013c4c:	e7c5      	b.n	8013bda <pow+0xde>
 8013c4e:	eeb0 0a48 	vmov.f32	s0, s16
 8013c52:	eef0 0a68 	vmov.f32	s1, s17
 8013c56:	f001 f8d7 	bl	8014e08 <finite>
 8013c5a:	9000      	str	r0, [sp, #0]
 8013c5c:	2800      	cmp	r0, #0
 8013c5e:	f040 8081 	bne.w	8013d64 <pow+0x268>
 8013c62:	ec47 6b10 	vmov	d0, r6, r7
 8013c66:	f001 f8cf 	bl	8014e08 <finite>
 8013c6a:	2800      	cmp	r0, #0
 8013c6c:	d07a      	beq.n	8013d64 <pow+0x268>
 8013c6e:	ec45 4b10 	vmov	d0, r4, r5
 8013c72:	f001 f8c9 	bl	8014e08 <finite>
 8013c76:	2800      	cmp	r0, #0
 8013c78:	d074      	beq.n	8013d64 <pow+0x268>
 8013c7a:	ec53 2b18 	vmov	r2, r3, d8
 8013c7e:	ee18 0a10 	vmov	r0, s16
 8013c82:	4619      	mov	r1, r3
 8013c84:	f7ec ff52 	bl	8000b2c <__aeabi_dcmpun>
 8013c88:	f999 9000 	ldrsb.w	r9, [r9]
 8013c8c:	4b4b      	ldr	r3, [pc, #300]	; (8013dbc <pow+0x2c0>)
 8013c8e:	b1b0      	cbz	r0, 8013cbe <pow+0x1c2>
 8013c90:	2201      	movs	r2, #1
 8013c92:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8013c96:	9b00      	ldr	r3, [sp, #0]
 8013c98:	930a      	str	r3, [sp, #40]	; 0x28
 8013c9a:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8013c9e:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8013ca2:	f1b9 0f00 	cmp.w	r9, #0
 8013ca6:	d0c4      	beq.n	8013c32 <pow+0x136>
 8013ca8:	4652      	mov	r2, sl
 8013caa:	465b      	mov	r3, fp
 8013cac:	4650      	mov	r0, sl
 8013cae:	4659      	mov	r1, fp
 8013cb0:	f7ec fdcc 	bl	800084c <__aeabi_ddiv>
 8013cb4:	f1b9 0f02 	cmp.w	r9, #2
 8013cb8:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8013cbc:	e7c1      	b.n	8013c42 <pow+0x146>
 8013cbe:	2203      	movs	r2, #3
 8013cc0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8013cc4:	900a      	str	r0, [sp, #40]	; 0x28
 8013cc6:	4629      	mov	r1, r5
 8013cc8:	4620      	mov	r0, r4
 8013cca:	2200      	movs	r2, #0
 8013ccc:	4b3e      	ldr	r3, [pc, #248]	; (8013dc8 <pow+0x2cc>)
 8013cce:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8013cd2:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8013cd6:	f7ec fc8f 	bl	80005f8 <__aeabi_dmul>
 8013cda:	4604      	mov	r4, r0
 8013cdc:	460d      	mov	r5, r1
 8013cde:	f1b9 0f00 	cmp.w	r9, #0
 8013ce2:	d124      	bne.n	8013d2e <pow+0x232>
 8013ce4:	4b39      	ldr	r3, [pc, #228]	; (8013dcc <pow+0x2d0>)
 8013ce6:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8013cea:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8013cee:	4630      	mov	r0, r6
 8013cf0:	4652      	mov	r2, sl
 8013cf2:	465b      	mov	r3, fp
 8013cf4:	4639      	mov	r1, r7
 8013cf6:	f7ec fef1 	bl	8000adc <__aeabi_dcmplt>
 8013cfa:	2800      	cmp	r0, #0
 8013cfc:	d056      	beq.n	8013dac <pow+0x2b0>
 8013cfe:	ec45 4b10 	vmov	d0, r4, r5
 8013d02:	f001 f895 	bl	8014e30 <rint>
 8013d06:	4622      	mov	r2, r4
 8013d08:	462b      	mov	r3, r5
 8013d0a:	ec51 0b10 	vmov	r0, r1, d0
 8013d0e:	f7ec fedb 	bl	8000ac8 <__aeabi_dcmpeq>
 8013d12:	b920      	cbnz	r0, 8013d1e <pow+0x222>
 8013d14:	4b2e      	ldr	r3, [pc, #184]	; (8013dd0 <pow+0x2d4>)
 8013d16:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8013d1a:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8013d1e:	f998 3000 	ldrsb.w	r3, [r8]
 8013d22:	2b02      	cmp	r3, #2
 8013d24:	d142      	bne.n	8013dac <pow+0x2b0>
 8013d26:	f001 fa67 	bl	80151f8 <__errno>
 8013d2a:	2322      	movs	r3, #34	; 0x22
 8013d2c:	e78d      	b.n	8013c4a <pow+0x14e>
 8013d2e:	4b29      	ldr	r3, [pc, #164]	; (8013dd4 <pow+0x2d8>)
 8013d30:	2200      	movs	r2, #0
 8013d32:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8013d36:	4630      	mov	r0, r6
 8013d38:	4652      	mov	r2, sl
 8013d3a:	465b      	mov	r3, fp
 8013d3c:	4639      	mov	r1, r7
 8013d3e:	f7ec fecd 	bl	8000adc <__aeabi_dcmplt>
 8013d42:	2800      	cmp	r0, #0
 8013d44:	d0eb      	beq.n	8013d1e <pow+0x222>
 8013d46:	ec45 4b10 	vmov	d0, r4, r5
 8013d4a:	f001 f871 	bl	8014e30 <rint>
 8013d4e:	4622      	mov	r2, r4
 8013d50:	462b      	mov	r3, r5
 8013d52:	ec51 0b10 	vmov	r0, r1, d0
 8013d56:	f7ec feb7 	bl	8000ac8 <__aeabi_dcmpeq>
 8013d5a:	2800      	cmp	r0, #0
 8013d5c:	d1df      	bne.n	8013d1e <pow+0x222>
 8013d5e:	2200      	movs	r2, #0
 8013d60:	4b18      	ldr	r3, [pc, #96]	; (8013dc4 <pow+0x2c8>)
 8013d62:	e7da      	b.n	8013d1a <pow+0x21e>
 8013d64:	2200      	movs	r2, #0
 8013d66:	2300      	movs	r3, #0
 8013d68:	ec51 0b18 	vmov	r0, r1, d8
 8013d6c:	f7ec feac 	bl	8000ac8 <__aeabi_dcmpeq>
 8013d70:	2800      	cmp	r0, #0
 8013d72:	f43f af3a 	beq.w	8013bea <pow+0xee>
 8013d76:	ec47 6b10 	vmov	d0, r6, r7
 8013d7a:	f001 f845 	bl	8014e08 <finite>
 8013d7e:	2800      	cmp	r0, #0
 8013d80:	f43f af33 	beq.w	8013bea <pow+0xee>
 8013d84:	ec45 4b10 	vmov	d0, r4, r5
 8013d88:	f001 f83e 	bl	8014e08 <finite>
 8013d8c:	2800      	cmp	r0, #0
 8013d8e:	f43f af2c 	beq.w	8013bea <pow+0xee>
 8013d92:	2304      	movs	r3, #4
 8013d94:	9302      	str	r3, [sp, #8]
 8013d96:	4b09      	ldr	r3, [pc, #36]	; (8013dbc <pow+0x2c0>)
 8013d98:	9303      	str	r3, [sp, #12]
 8013d9a:	2300      	movs	r3, #0
 8013d9c:	930a      	str	r3, [sp, #40]	; 0x28
 8013d9e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8013da2:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8013da6:	ed8d 9b08 	vstr	d9, [sp, #32]
 8013daa:	e7b8      	b.n	8013d1e <pow+0x222>
 8013dac:	a802      	add	r0, sp, #8
 8013dae:	f001 f833 	bl	8014e18 <matherr>
 8013db2:	2800      	cmp	r0, #0
 8013db4:	f47f af11 	bne.w	8013bda <pow+0xde>
 8013db8:	e7b5      	b.n	8013d26 <pow+0x22a>
 8013dba:	bf00      	nop
 8013dbc:	08015cae 	.word	0x08015cae
 8013dc0:	3ff00000 	.word	0x3ff00000
 8013dc4:	fff00000 	.word	0xfff00000
 8013dc8:	3fe00000 	.word	0x3fe00000
 8013dcc:	47efffff 	.word	0x47efffff
 8013dd0:	c7efffff 	.word	0xc7efffff
 8013dd4:	7ff00000 	.word	0x7ff00000
 8013dd8:	2000034c 	.word	0x2000034c

08013ddc <sqrt>:
 8013ddc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8013de0:	ed2d 8b02 	vpush	{d8}
 8013de4:	b08b      	sub	sp, #44	; 0x2c
 8013de6:	ec55 4b10 	vmov	r4, r5, d0
 8013dea:	f000 fdbb 	bl	8014964 <__ieee754_sqrt>
 8013dee:	4b26      	ldr	r3, [pc, #152]	; (8013e88 <sqrt+0xac>)
 8013df0:	eeb0 8a40 	vmov.f32	s16, s0
 8013df4:	eef0 8a60 	vmov.f32	s17, s1
 8013df8:	f993 6000 	ldrsb.w	r6, [r3]
 8013dfc:	1c73      	adds	r3, r6, #1
 8013dfe:	d02a      	beq.n	8013e56 <sqrt+0x7a>
 8013e00:	4622      	mov	r2, r4
 8013e02:	462b      	mov	r3, r5
 8013e04:	4620      	mov	r0, r4
 8013e06:	4629      	mov	r1, r5
 8013e08:	f7ec fe90 	bl	8000b2c <__aeabi_dcmpun>
 8013e0c:	4607      	mov	r7, r0
 8013e0e:	bb10      	cbnz	r0, 8013e56 <sqrt+0x7a>
 8013e10:	f04f 0800 	mov.w	r8, #0
 8013e14:	f04f 0900 	mov.w	r9, #0
 8013e18:	4642      	mov	r2, r8
 8013e1a:	464b      	mov	r3, r9
 8013e1c:	4620      	mov	r0, r4
 8013e1e:	4629      	mov	r1, r5
 8013e20:	f7ec fe5c 	bl	8000adc <__aeabi_dcmplt>
 8013e24:	b1b8      	cbz	r0, 8013e56 <sqrt+0x7a>
 8013e26:	2301      	movs	r3, #1
 8013e28:	9300      	str	r3, [sp, #0]
 8013e2a:	4b18      	ldr	r3, [pc, #96]	; (8013e8c <sqrt+0xb0>)
 8013e2c:	9301      	str	r3, [sp, #4]
 8013e2e:	9708      	str	r7, [sp, #32]
 8013e30:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8013e34:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8013e38:	b9b6      	cbnz	r6, 8013e68 <sqrt+0x8c>
 8013e3a:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8013e3e:	4668      	mov	r0, sp
 8013e40:	f000 ffea 	bl	8014e18 <matherr>
 8013e44:	b1d0      	cbz	r0, 8013e7c <sqrt+0xa0>
 8013e46:	9b08      	ldr	r3, [sp, #32]
 8013e48:	b11b      	cbz	r3, 8013e52 <sqrt+0x76>
 8013e4a:	f001 f9d5 	bl	80151f8 <__errno>
 8013e4e:	9b08      	ldr	r3, [sp, #32]
 8013e50:	6003      	str	r3, [r0, #0]
 8013e52:	ed9d 8b06 	vldr	d8, [sp, #24]
 8013e56:	eeb0 0a48 	vmov.f32	s0, s16
 8013e5a:	eef0 0a68 	vmov.f32	s1, s17
 8013e5e:	b00b      	add	sp, #44	; 0x2c
 8013e60:	ecbd 8b02 	vpop	{d8}
 8013e64:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013e68:	4642      	mov	r2, r8
 8013e6a:	464b      	mov	r3, r9
 8013e6c:	4640      	mov	r0, r8
 8013e6e:	4649      	mov	r1, r9
 8013e70:	f7ec fcec 	bl	800084c <__aeabi_ddiv>
 8013e74:	2e02      	cmp	r6, #2
 8013e76:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8013e7a:	d1e0      	bne.n	8013e3e <sqrt+0x62>
 8013e7c:	f001 f9bc 	bl	80151f8 <__errno>
 8013e80:	2321      	movs	r3, #33	; 0x21
 8013e82:	6003      	str	r3, [r0, #0]
 8013e84:	e7df      	b.n	8013e46 <sqrt+0x6a>
 8013e86:	bf00      	nop
 8013e88:	2000034c 	.word	0x2000034c
 8013e8c:	08015cb2 	.word	0x08015cb2

08013e90 <asinf>:
 8013e90:	b510      	push	{r4, lr}
 8013e92:	ed2d 8b02 	vpush	{d8}
 8013e96:	4c27      	ldr	r4, [pc, #156]	; (8013f34 <asinf+0xa4>)
 8013e98:	b08a      	sub	sp, #40	; 0x28
 8013e9a:	eeb0 8a40 	vmov.f32	s16, s0
 8013e9e:	f000 fe11 	bl	8014ac4 <__ieee754_asinf>
 8013ea2:	f994 3000 	ldrsb.w	r3, [r4]
 8013ea6:	3301      	adds	r3, #1
 8013ea8:	eef0 8a40 	vmov.f32	s17, s0
 8013eac:	d03c      	beq.n	8013f28 <asinf+0x98>
 8013eae:	eeb4 8a48 	vcmp.f32	s16, s16
 8013eb2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013eb6:	d637      	bvs.n	8013f28 <asinf+0x98>
 8013eb8:	eeb0 0a48 	vmov.f32	s0, s16
 8013ebc:	f001 f986 	bl	80151cc <fabsf>
 8013ec0:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8013ec4:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8013ec8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013ecc:	dd2c      	ble.n	8013f28 <asinf+0x98>
 8013ece:	2301      	movs	r3, #1
 8013ed0:	9300      	str	r3, [sp, #0]
 8013ed2:	4b19      	ldr	r3, [pc, #100]	; (8013f38 <asinf+0xa8>)
 8013ed4:	9301      	str	r3, [sp, #4]
 8013ed6:	ee18 0a10 	vmov	r0, s16
 8013eda:	2300      	movs	r3, #0
 8013edc:	9308      	str	r3, [sp, #32]
 8013ede:	f7ec fb33 	bl	8000548 <__aeabi_f2d>
 8013ee2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8013ee6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8013eea:	4814      	ldr	r0, [pc, #80]	; (8013f3c <asinf+0xac>)
 8013eec:	f000 ff98 	bl	8014e20 <nan>
 8013ef0:	f994 3000 	ldrsb.w	r3, [r4]
 8013ef4:	2b02      	cmp	r3, #2
 8013ef6:	ed8d 0b06 	vstr	d0, [sp, #24]
 8013efa:	d104      	bne.n	8013f06 <asinf+0x76>
 8013efc:	f001 f97c 	bl	80151f8 <__errno>
 8013f00:	2321      	movs	r3, #33	; 0x21
 8013f02:	6003      	str	r3, [r0, #0]
 8013f04:	e004      	b.n	8013f10 <asinf+0x80>
 8013f06:	4668      	mov	r0, sp
 8013f08:	f000 ff86 	bl	8014e18 <matherr>
 8013f0c:	2800      	cmp	r0, #0
 8013f0e:	d0f5      	beq.n	8013efc <asinf+0x6c>
 8013f10:	9b08      	ldr	r3, [sp, #32]
 8013f12:	b11b      	cbz	r3, 8013f1c <asinf+0x8c>
 8013f14:	f001 f970 	bl	80151f8 <__errno>
 8013f18:	9b08      	ldr	r3, [sp, #32]
 8013f1a:	6003      	str	r3, [r0, #0]
 8013f1c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8013f20:	f7ec fe62 	bl	8000be8 <__aeabi_d2f>
 8013f24:	ee08 0a90 	vmov	s17, r0
 8013f28:	eeb0 0a68 	vmov.f32	s0, s17
 8013f2c:	b00a      	add	sp, #40	; 0x28
 8013f2e:	ecbd 8b02 	vpop	{d8}
 8013f32:	bd10      	pop	{r4, pc}
 8013f34:	2000034c 	.word	0x2000034c
 8013f38:	08015cb7 	.word	0x08015cb7
 8013f3c:	08015ba1 	.word	0x08015ba1

08013f40 <atan2f>:
 8013f40:	f000 bea8 	b.w	8014c94 <__ieee754_atan2f>
 8013f44:	0000      	movs	r0, r0
	...

08013f48 <__ieee754_pow>:
 8013f48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013f4c:	b091      	sub	sp, #68	; 0x44
 8013f4e:	ed8d 1b00 	vstr	d1, [sp]
 8013f52:	e9dd 2900 	ldrd	r2, r9, [sp]
 8013f56:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 8013f5a:	ea58 0302 	orrs.w	r3, r8, r2
 8013f5e:	ec57 6b10 	vmov	r6, r7, d0
 8013f62:	f000 84be 	beq.w	80148e2 <__ieee754_pow+0x99a>
 8013f66:	4b7a      	ldr	r3, [pc, #488]	; (8014150 <__ieee754_pow+0x208>)
 8013f68:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 8013f6c:	429c      	cmp	r4, r3
 8013f6e:	463d      	mov	r5, r7
 8013f70:	ee10 aa10 	vmov	sl, s0
 8013f74:	dc09      	bgt.n	8013f8a <__ieee754_pow+0x42>
 8013f76:	d103      	bne.n	8013f80 <__ieee754_pow+0x38>
 8013f78:	b93e      	cbnz	r6, 8013f8a <__ieee754_pow+0x42>
 8013f7a:	45a0      	cmp	r8, r4
 8013f7c:	dc0d      	bgt.n	8013f9a <__ieee754_pow+0x52>
 8013f7e:	e001      	b.n	8013f84 <__ieee754_pow+0x3c>
 8013f80:	4598      	cmp	r8, r3
 8013f82:	dc02      	bgt.n	8013f8a <__ieee754_pow+0x42>
 8013f84:	4598      	cmp	r8, r3
 8013f86:	d10e      	bne.n	8013fa6 <__ieee754_pow+0x5e>
 8013f88:	b16a      	cbz	r2, 8013fa6 <__ieee754_pow+0x5e>
 8013f8a:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8013f8e:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8013f92:	ea54 030a 	orrs.w	r3, r4, sl
 8013f96:	f000 84a4 	beq.w	80148e2 <__ieee754_pow+0x99a>
 8013f9a:	486e      	ldr	r0, [pc, #440]	; (8014154 <__ieee754_pow+0x20c>)
 8013f9c:	b011      	add	sp, #68	; 0x44
 8013f9e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013fa2:	f000 bf3d 	b.w	8014e20 <nan>
 8013fa6:	2d00      	cmp	r5, #0
 8013fa8:	da53      	bge.n	8014052 <__ieee754_pow+0x10a>
 8013faa:	4b6b      	ldr	r3, [pc, #428]	; (8014158 <__ieee754_pow+0x210>)
 8013fac:	4598      	cmp	r8, r3
 8013fae:	dc4d      	bgt.n	801404c <__ieee754_pow+0x104>
 8013fb0:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8013fb4:	4598      	cmp	r8, r3
 8013fb6:	dd4c      	ble.n	8014052 <__ieee754_pow+0x10a>
 8013fb8:	ea4f 5328 	mov.w	r3, r8, asr #20
 8013fbc:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8013fc0:	2b14      	cmp	r3, #20
 8013fc2:	dd26      	ble.n	8014012 <__ieee754_pow+0xca>
 8013fc4:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8013fc8:	fa22 f103 	lsr.w	r1, r2, r3
 8013fcc:	fa01 f303 	lsl.w	r3, r1, r3
 8013fd0:	4293      	cmp	r3, r2
 8013fd2:	d13e      	bne.n	8014052 <__ieee754_pow+0x10a>
 8013fd4:	f001 0101 	and.w	r1, r1, #1
 8013fd8:	f1c1 0b02 	rsb	fp, r1, #2
 8013fdc:	2a00      	cmp	r2, #0
 8013fde:	d15b      	bne.n	8014098 <__ieee754_pow+0x150>
 8013fe0:	4b5b      	ldr	r3, [pc, #364]	; (8014150 <__ieee754_pow+0x208>)
 8013fe2:	4598      	cmp	r8, r3
 8013fe4:	d124      	bne.n	8014030 <__ieee754_pow+0xe8>
 8013fe6:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8013fea:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8013fee:	ea53 030a 	orrs.w	r3, r3, sl
 8013ff2:	f000 8476 	beq.w	80148e2 <__ieee754_pow+0x99a>
 8013ff6:	4b59      	ldr	r3, [pc, #356]	; (801415c <__ieee754_pow+0x214>)
 8013ff8:	429c      	cmp	r4, r3
 8013ffa:	dd2d      	ble.n	8014058 <__ieee754_pow+0x110>
 8013ffc:	f1b9 0f00 	cmp.w	r9, #0
 8014000:	f280 8473 	bge.w	80148ea <__ieee754_pow+0x9a2>
 8014004:	2000      	movs	r0, #0
 8014006:	2100      	movs	r1, #0
 8014008:	ec41 0b10 	vmov	d0, r0, r1
 801400c:	b011      	add	sp, #68	; 0x44
 801400e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014012:	2a00      	cmp	r2, #0
 8014014:	d13e      	bne.n	8014094 <__ieee754_pow+0x14c>
 8014016:	f1c3 0314 	rsb	r3, r3, #20
 801401a:	fa48 f103 	asr.w	r1, r8, r3
 801401e:	fa01 f303 	lsl.w	r3, r1, r3
 8014022:	4543      	cmp	r3, r8
 8014024:	f040 8469 	bne.w	80148fa <__ieee754_pow+0x9b2>
 8014028:	f001 0101 	and.w	r1, r1, #1
 801402c:	f1c1 0b02 	rsb	fp, r1, #2
 8014030:	4b4b      	ldr	r3, [pc, #300]	; (8014160 <__ieee754_pow+0x218>)
 8014032:	4598      	cmp	r8, r3
 8014034:	d118      	bne.n	8014068 <__ieee754_pow+0x120>
 8014036:	f1b9 0f00 	cmp.w	r9, #0
 801403a:	f280 845a 	bge.w	80148f2 <__ieee754_pow+0x9aa>
 801403e:	4948      	ldr	r1, [pc, #288]	; (8014160 <__ieee754_pow+0x218>)
 8014040:	4632      	mov	r2, r6
 8014042:	463b      	mov	r3, r7
 8014044:	2000      	movs	r0, #0
 8014046:	f7ec fc01 	bl	800084c <__aeabi_ddiv>
 801404a:	e7dd      	b.n	8014008 <__ieee754_pow+0xc0>
 801404c:	f04f 0b02 	mov.w	fp, #2
 8014050:	e7c4      	b.n	8013fdc <__ieee754_pow+0x94>
 8014052:	f04f 0b00 	mov.w	fp, #0
 8014056:	e7c1      	b.n	8013fdc <__ieee754_pow+0x94>
 8014058:	f1b9 0f00 	cmp.w	r9, #0
 801405c:	dad2      	bge.n	8014004 <__ieee754_pow+0xbc>
 801405e:	e9dd 0300 	ldrd	r0, r3, [sp]
 8014062:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8014066:	e7cf      	b.n	8014008 <__ieee754_pow+0xc0>
 8014068:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 801406c:	d106      	bne.n	801407c <__ieee754_pow+0x134>
 801406e:	4632      	mov	r2, r6
 8014070:	463b      	mov	r3, r7
 8014072:	4610      	mov	r0, r2
 8014074:	4619      	mov	r1, r3
 8014076:	f7ec fabf 	bl	80005f8 <__aeabi_dmul>
 801407a:	e7c5      	b.n	8014008 <__ieee754_pow+0xc0>
 801407c:	4b39      	ldr	r3, [pc, #228]	; (8014164 <__ieee754_pow+0x21c>)
 801407e:	4599      	cmp	r9, r3
 8014080:	d10a      	bne.n	8014098 <__ieee754_pow+0x150>
 8014082:	2d00      	cmp	r5, #0
 8014084:	db08      	blt.n	8014098 <__ieee754_pow+0x150>
 8014086:	ec47 6b10 	vmov	d0, r6, r7
 801408a:	b011      	add	sp, #68	; 0x44
 801408c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014090:	f000 bc68 	b.w	8014964 <__ieee754_sqrt>
 8014094:	f04f 0b00 	mov.w	fp, #0
 8014098:	ec47 6b10 	vmov	d0, r6, r7
 801409c:	f000 feab 	bl	8014df6 <fabs>
 80140a0:	ec51 0b10 	vmov	r0, r1, d0
 80140a4:	f1ba 0f00 	cmp.w	sl, #0
 80140a8:	d127      	bne.n	80140fa <__ieee754_pow+0x1b2>
 80140aa:	b124      	cbz	r4, 80140b6 <__ieee754_pow+0x16e>
 80140ac:	4b2c      	ldr	r3, [pc, #176]	; (8014160 <__ieee754_pow+0x218>)
 80140ae:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 80140b2:	429a      	cmp	r2, r3
 80140b4:	d121      	bne.n	80140fa <__ieee754_pow+0x1b2>
 80140b6:	f1b9 0f00 	cmp.w	r9, #0
 80140ba:	da05      	bge.n	80140c8 <__ieee754_pow+0x180>
 80140bc:	4602      	mov	r2, r0
 80140be:	460b      	mov	r3, r1
 80140c0:	2000      	movs	r0, #0
 80140c2:	4927      	ldr	r1, [pc, #156]	; (8014160 <__ieee754_pow+0x218>)
 80140c4:	f7ec fbc2 	bl	800084c <__aeabi_ddiv>
 80140c8:	2d00      	cmp	r5, #0
 80140ca:	da9d      	bge.n	8014008 <__ieee754_pow+0xc0>
 80140cc:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 80140d0:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80140d4:	ea54 030b 	orrs.w	r3, r4, fp
 80140d8:	d108      	bne.n	80140ec <__ieee754_pow+0x1a4>
 80140da:	4602      	mov	r2, r0
 80140dc:	460b      	mov	r3, r1
 80140de:	4610      	mov	r0, r2
 80140e0:	4619      	mov	r1, r3
 80140e2:	f7ec f8d1 	bl	8000288 <__aeabi_dsub>
 80140e6:	4602      	mov	r2, r0
 80140e8:	460b      	mov	r3, r1
 80140ea:	e7ac      	b.n	8014046 <__ieee754_pow+0xfe>
 80140ec:	f1bb 0f01 	cmp.w	fp, #1
 80140f0:	d18a      	bne.n	8014008 <__ieee754_pow+0xc0>
 80140f2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80140f6:	4619      	mov	r1, r3
 80140f8:	e786      	b.n	8014008 <__ieee754_pow+0xc0>
 80140fa:	0fed      	lsrs	r5, r5, #31
 80140fc:	1e6b      	subs	r3, r5, #1
 80140fe:	930d      	str	r3, [sp, #52]	; 0x34
 8014100:	ea5b 0303 	orrs.w	r3, fp, r3
 8014104:	d102      	bne.n	801410c <__ieee754_pow+0x1c4>
 8014106:	4632      	mov	r2, r6
 8014108:	463b      	mov	r3, r7
 801410a:	e7e8      	b.n	80140de <__ieee754_pow+0x196>
 801410c:	4b16      	ldr	r3, [pc, #88]	; (8014168 <__ieee754_pow+0x220>)
 801410e:	4598      	cmp	r8, r3
 8014110:	f340 80fe 	ble.w	8014310 <__ieee754_pow+0x3c8>
 8014114:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8014118:	4598      	cmp	r8, r3
 801411a:	dd0a      	ble.n	8014132 <__ieee754_pow+0x1ea>
 801411c:	4b0f      	ldr	r3, [pc, #60]	; (801415c <__ieee754_pow+0x214>)
 801411e:	429c      	cmp	r4, r3
 8014120:	dc0d      	bgt.n	801413e <__ieee754_pow+0x1f6>
 8014122:	f1b9 0f00 	cmp.w	r9, #0
 8014126:	f6bf af6d 	bge.w	8014004 <__ieee754_pow+0xbc>
 801412a:	a307      	add	r3, pc, #28	; (adr r3, 8014148 <__ieee754_pow+0x200>)
 801412c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014130:	e79f      	b.n	8014072 <__ieee754_pow+0x12a>
 8014132:	4b0e      	ldr	r3, [pc, #56]	; (801416c <__ieee754_pow+0x224>)
 8014134:	429c      	cmp	r4, r3
 8014136:	ddf4      	ble.n	8014122 <__ieee754_pow+0x1da>
 8014138:	4b09      	ldr	r3, [pc, #36]	; (8014160 <__ieee754_pow+0x218>)
 801413a:	429c      	cmp	r4, r3
 801413c:	dd18      	ble.n	8014170 <__ieee754_pow+0x228>
 801413e:	f1b9 0f00 	cmp.w	r9, #0
 8014142:	dcf2      	bgt.n	801412a <__ieee754_pow+0x1e2>
 8014144:	e75e      	b.n	8014004 <__ieee754_pow+0xbc>
 8014146:	bf00      	nop
 8014148:	8800759c 	.word	0x8800759c
 801414c:	7e37e43c 	.word	0x7e37e43c
 8014150:	7ff00000 	.word	0x7ff00000
 8014154:	08015ba1 	.word	0x08015ba1
 8014158:	433fffff 	.word	0x433fffff
 801415c:	3fefffff 	.word	0x3fefffff
 8014160:	3ff00000 	.word	0x3ff00000
 8014164:	3fe00000 	.word	0x3fe00000
 8014168:	41e00000 	.word	0x41e00000
 801416c:	3feffffe 	.word	0x3feffffe
 8014170:	2200      	movs	r2, #0
 8014172:	4b63      	ldr	r3, [pc, #396]	; (8014300 <__ieee754_pow+0x3b8>)
 8014174:	f7ec f888 	bl	8000288 <__aeabi_dsub>
 8014178:	a355      	add	r3, pc, #340	; (adr r3, 80142d0 <__ieee754_pow+0x388>)
 801417a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801417e:	4604      	mov	r4, r0
 8014180:	460d      	mov	r5, r1
 8014182:	f7ec fa39 	bl	80005f8 <__aeabi_dmul>
 8014186:	a354      	add	r3, pc, #336	; (adr r3, 80142d8 <__ieee754_pow+0x390>)
 8014188:	e9d3 2300 	ldrd	r2, r3, [r3]
 801418c:	4606      	mov	r6, r0
 801418e:	460f      	mov	r7, r1
 8014190:	4620      	mov	r0, r4
 8014192:	4629      	mov	r1, r5
 8014194:	f7ec fa30 	bl	80005f8 <__aeabi_dmul>
 8014198:	2200      	movs	r2, #0
 801419a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801419e:	4b59      	ldr	r3, [pc, #356]	; (8014304 <__ieee754_pow+0x3bc>)
 80141a0:	4620      	mov	r0, r4
 80141a2:	4629      	mov	r1, r5
 80141a4:	f7ec fa28 	bl	80005f8 <__aeabi_dmul>
 80141a8:	4602      	mov	r2, r0
 80141aa:	460b      	mov	r3, r1
 80141ac:	a14c      	add	r1, pc, #304	; (adr r1, 80142e0 <__ieee754_pow+0x398>)
 80141ae:	e9d1 0100 	ldrd	r0, r1, [r1]
 80141b2:	f7ec f869 	bl	8000288 <__aeabi_dsub>
 80141b6:	4622      	mov	r2, r4
 80141b8:	462b      	mov	r3, r5
 80141ba:	f7ec fa1d 	bl	80005f8 <__aeabi_dmul>
 80141be:	4602      	mov	r2, r0
 80141c0:	460b      	mov	r3, r1
 80141c2:	2000      	movs	r0, #0
 80141c4:	4950      	ldr	r1, [pc, #320]	; (8014308 <__ieee754_pow+0x3c0>)
 80141c6:	f7ec f85f 	bl	8000288 <__aeabi_dsub>
 80141ca:	4622      	mov	r2, r4
 80141cc:	462b      	mov	r3, r5
 80141ce:	4680      	mov	r8, r0
 80141d0:	4689      	mov	r9, r1
 80141d2:	4620      	mov	r0, r4
 80141d4:	4629      	mov	r1, r5
 80141d6:	f7ec fa0f 	bl	80005f8 <__aeabi_dmul>
 80141da:	4602      	mov	r2, r0
 80141dc:	460b      	mov	r3, r1
 80141de:	4640      	mov	r0, r8
 80141e0:	4649      	mov	r1, r9
 80141e2:	f7ec fa09 	bl	80005f8 <__aeabi_dmul>
 80141e6:	a340      	add	r3, pc, #256	; (adr r3, 80142e8 <__ieee754_pow+0x3a0>)
 80141e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80141ec:	f7ec fa04 	bl	80005f8 <__aeabi_dmul>
 80141f0:	4602      	mov	r2, r0
 80141f2:	460b      	mov	r3, r1
 80141f4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80141f8:	f7ec f846 	bl	8000288 <__aeabi_dsub>
 80141fc:	4602      	mov	r2, r0
 80141fe:	460b      	mov	r3, r1
 8014200:	4604      	mov	r4, r0
 8014202:	460d      	mov	r5, r1
 8014204:	4630      	mov	r0, r6
 8014206:	4639      	mov	r1, r7
 8014208:	f7ec f840 	bl	800028c <__adddf3>
 801420c:	2000      	movs	r0, #0
 801420e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8014212:	4632      	mov	r2, r6
 8014214:	463b      	mov	r3, r7
 8014216:	f7ec f837 	bl	8000288 <__aeabi_dsub>
 801421a:	4602      	mov	r2, r0
 801421c:	460b      	mov	r3, r1
 801421e:	4620      	mov	r0, r4
 8014220:	4629      	mov	r1, r5
 8014222:	f7ec f831 	bl	8000288 <__aeabi_dsub>
 8014226:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8014228:	f10b 33ff 	add.w	r3, fp, #4294967295
 801422c:	4313      	orrs	r3, r2
 801422e:	4606      	mov	r6, r0
 8014230:	460f      	mov	r7, r1
 8014232:	f040 81eb 	bne.w	801460c <__ieee754_pow+0x6c4>
 8014236:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 80142f0 <__ieee754_pow+0x3a8>
 801423a:	e9dd 4500 	ldrd	r4, r5, [sp]
 801423e:	2400      	movs	r4, #0
 8014240:	4622      	mov	r2, r4
 8014242:	462b      	mov	r3, r5
 8014244:	e9dd 0100 	ldrd	r0, r1, [sp]
 8014248:	ed8d 7b02 	vstr	d7, [sp, #8]
 801424c:	f7ec f81c 	bl	8000288 <__aeabi_dsub>
 8014250:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8014254:	f7ec f9d0 	bl	80005f8 <__aeabi_dmul>
 8014258:	e9dd 2300 	ldrd	r2, r3, [sp]
 801425c:	4680      	mov	r8, r0
 801425e:	4689      	mov	r9, r1
 8014260:	4630      	mov	r0, r6
 8014262:	4639      	mov	r1, r7
 8014264:	f7ec f9c8 	bl	80005f8 <__aeabi_dmul>
 8014268:	4602      	mov	r2, r0
 801426a:	460b      	mov	r3, r1
 801426c:	4640      	mov	r0, r8
 801426e:	4649      	mov	r1, r9
 8014270:	f7ec f80c 	bl	800028c <__adddf3>
 8014274:	4622      	mov	r2, r4
 8014276:	462b      	mov	r3, r5
 8014278:	4680      	mov	r8, r0
 801427a:	4689      	mov	r9, r1
 801427c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8014280:	f7ec f9ba 	bl	80005f8 <__aeabi_dmul>
 8014284:	460b      	mov	r3, r1
 8014286:	4604      	mov	r4, r0
 8014288:	460d      	mov	r5, r1
 801428a:	4602      	mov	r2, r0
 801428c:	4649      	mov	r1, r9
 801428e:	4640      	mov	r0, r8
 8014290:	e9cd 4500 	strd	r4, r5, [sp]
 8014294:	f7eb fffa 	bl	800028c <__adddf3>
 8014298:	4b1c      	ldr	r3, [pc, #112]	; (801430c <__ieee754_pow+0x3c4>)
 801429a:	4299      	cmp	r1, r3
 801429c:	4606      	mov	r6, r0
 801429e:	460f      	mov	r7, r1
 80142a0:	468b      	mov	fp, r1
 80142a2:	f340 82f7 	ble.w	8014894 <__ieee754_pow+0x94c>
 80142a6:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 80142aa:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 80142ae:	4303      	orrs	r3, r0
 80142b0:	f000 81ea 	beq.w	8014688 <__ieee754_pow+0x740>
 80142b4:	a310      	add	r3, pc, #64	; (adr r3, 80142f8 <__ieee754_pow+0x3b0>)
 80142b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80142ba:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80142be:	f7ec f99b 	bl	80005f8 <__aeabi_dmul>
 80142c2:	a30d      	add	r3, pc, #52	; (adr r3, 80142f8 <__ieee754_pow+0x3b0>)
 80142c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80142c8:	e6d5      	b.n	8014076 <__ieee754_pow+0x12e>
 80142ca:	bf00      	nop
 80142cc:	f3af 8000 	nop.w
 80142d0:	60000000 	.word	0x60000000
 80142d4:	3ff71547 	.word	0x3ff71547
 80142d8:	f85ddf44 	.word	0xf85ddf44
 80142dc:	3e54ae0b 	.word	0x3e54ae0b
 80142e0:	55555555 	.word	0x55555555
 80142e4:	3fd55555 	.word	0x3fd55555
 80142e8:	652b82fe 	.word	0x652b82fe
 80142ec:	3ff71547 	.word	0x3ff71547
 80142f0:	00000000 	.word	0x00000000
 80142f4:	bff00000 	.word	0xbff00000
 80142f8:	8800759c 	.word	0x8800759c
 80142fc:	7e37e43c 	.word	0x7e37e43c
 8014300:	3ff00000 	.word	0x3ff00000
 8014304:	3fd00000 	.word	0x3fd00000
 8014308:	3fe00000 	.word	0x3fe00000
 801430c:	408fffff 	.word	0x408fffff
 8014310:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8014314:	f04f 0200 	mov.w	r2, #0
 8014318:	da05      	bge.n	8014326 <__ieee754_pow+0x3de>
 801431a:	4bd3      	ldr	r3, [pc, #844]	; (8014668 <__ieee754_pow+0x720>)
 801431c:	f7ec f96c 	bl	80005f8 <__aeabi_dmul>
 8014320:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8014324:	460c      	mov	r4, r1
 8014326:	1523      	asrs	r3, r4, #20
 8014328:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 801432c:	4413      	add	r3, r2
 801432e:	9309      	str	r3, [sp, #36]	; 0x24
 8014330:	4bce      	ldr	r3, [pc, #824]	; (801466c <__ieee754_pow+0x724>)
 8014332:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8014336:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 801433a:	429c      	cmp	r4, r3
 801433c:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8014340:	dd08      	ble.n	8014354 <__ieee754_pow+0x40c>
 8014342:	4bcb      	ldr	r3, [pc, #812]	; (8014670 <__ieee754_pow+0x728>)
 8014344:	429c      	cmp	r4, r3
 8014346:	f340 815e 	ble.w	8014606 <__ieee754_pow+0x6be>
 801434a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801434c:	3301      	adds	r3, #1
 801434e:	9309      	str	r3, [sp, #36]	; 0x24
 8014350:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8014354:	f04f 0a00 	mov.w	sl, #0
 8014358:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 801435c:	930c      	str	r3, [sp, #48]	; 0x30
 801435e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8014360:	4bc4      	ldr	r3, [pc, #784]	; (8014674 <__ieee754_pow+0x72c>)
 8014362:	4413      	add	r3, r2
 8014364:	ed93 7b00 	vldr	d7, [r3]
 8014368:	4629      	mov	r1, r5
 801436a:	ec53 2b17 	vmov	r2, r3, d7
 801436e:	ed8d 7b06 	vstr	d7, [sp, #24]
 8014372:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8014376:	f7eb ff87 	bl	8000288 <__aeabi_dsub>
 801437a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 801437e:	4606      	mov	r6, r0
 8014380:	460f      	mov	r7, r1
 8014382:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8014386:	f7eb ff81 	bl	800028c <__adddf3>
 801438a:	4602      	mov	r2, r0
 801438c:	460b      	mov	r3, r1
 801438e:	2000      	movs	r0, #0
 8014390:	49b9      	ldr	r1, [pc, #740]	; (8014678 <__ieee754_pow+0x730>)
 8014392:	f7ec fa5b 	bl	800084c <__aeabi_ddiv>
 8014396:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 801439a:	4602      	mov	r2, r0
 801439c:	460b      	mov	r3, r1
 801439e:	4630      	mov	r0, r6
 80143a0:	4639      	mov	r1, r7
 80143a2:	f7ec f929 	bl	80005f8 <__aeabi_dmul>
 80143a6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80143aa:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 80143ae:	e9cd 3402 	strd	r3, r4, [sp, #8]
 80143b2:	2300      	movs	r3, #0
 80143b4:	9302      	str	r3, [sp, #8]
 80143b6:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80143ba:	106d      	asrs	r5, r5, #1
 80143bc:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 80143c0:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 80143c4:	2200      	movs	r2, #0
 80143c6:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 80143ca:	4640      	mov	r0, r8
 80143cc:	4649      	mov	r1, r9
 80143ce:	4614      	mov	r4, r2
 80143d0:	461d      	mov	r5, r3
 80143d2:	f7ec f911 	bl	80005f8 <__aeabi_dmul>
 80143d6:	4602      	mov	r2, r0
 80143d8:	460b      	mov	r3, r1
 80143da:	4630      	mov	r0, r6
 80143dc:	4639      	mov	r1, r7
 80143de:	f7eb ff53 	bl	8000288 <__aeabi_dsub>
 80143e2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80143e6:	4606      	mov	r6, r0
 80143e8:	460f      	mov	r7, r1
 80143ea:	4620      	mov	r0, r4
 80143ec:	4629      	mov	r1, r5
 80143ee:	f7eb ff4b 	bl	8000288 <__aeabi_dsub>
 80143f2:	4602      	mov	r2, r0
 80143f4:	460b      	mov	r3, r1
 80143f6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80143fa:	f7eb ff45 	bl	8000288 <__aeabi_dsub>
 80143fe:	4642      	mov	r2, r8
 8014400:	464b      	mov	r3, r9
 8014402:	f7ec f8f9 	bl	80005f8 <__aeabi_dmul>
 8014406:	4602      	mov	r2, r0
 8014408:	460b      	mov	r3, r1
 801440a:	4630      	mov	r0, r6
 801440c:	4639      	mov	r1, r7
 801440e:	f7eb ff3b 	bl	8000288 <__aeabi_dsub>
 8014412:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8014416:	f7ec f8ef 	bl	80005f8 <__aeabi_dmul>
 801441a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801441e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8014422:	4610      	mov	r0, r2
 8014424:	4619      	mov	r1, r3
 8014426:	f7ec f8e7 	bl	80005f8 <__aeabi_dmul>
 801442a:	a37b      	add	r3, pc, #492	; (adr r3, 8014618 <__ieee754_pow+0x6d0>)
 801442c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014430:	4604      	mov	r4, r0
 8014432:	460d      	mov	r5, r1
 8014434:	f7ec f8e0 	bl	80005f8 <__aeabi_dmul>
 8014438:	a379      	add	r3, pc, #484	; (adr r3, 8014620 <__ieee754_pow+0x6d8>)
 801443a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801443e:	f7eb ff25 	bl	800028c <__adddf3>
 8014442:	4622      	mov	r2, r4
 8014444:	462b      	mov	r3, r5
 8014446:	f7ec f8d7 	bl	80005f8 <__aeabi_dmul>
 801444a:	a377      	add	r3, pc, #476	; (adr r3, 8014628 <__ieee754_pow+0x6e0>)
 801444c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014450:	f7eb ff1c 	bl	800028c <__adddf3>
 8014454:	4622      	mov	r2, r4
 8014456:	462b      	mov	r3, r5
 8014458:	f7ec f8ce 	bl	80005f8 <__aeabi_dmul>
 801445c:	a374      	add	r3, pc, #464	; (adr r3, 8014630 <__ieee754_pow+0x6e8>)
 801445e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014462:	f7eb ff13 	bl	800028c <__adddf3>
 8014466:	4622      	mov	r2, r4
 8014468:	462b      	mov	r3, r5
 801446a:	f7ec f8c5 	bl	80005f8 <__aeabi_dmul>
 801446e:	a372      	add	r3, pc, #456	; (adr r3, 8014638 <__ieee754_pow+0x6f0>)
 8014470:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014474:	f7eb ff0a 	bl	800028c <__adddf3>
 8014478:	4622      	mov	r2, r4
 801447a:	462b      	mov	r3, r5
 801447c:	f7ec f8bc 	bl	80005f8 <__aeabi_dmul>
 8014480:	a36f      	add	r3, pc, #444	; (adr r3, 8014640 <__ieee754_pow+0x6f8>)
 8014482:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014486:	f7eb ff01 	bl	800028c <__adddf3>
 801448a:	4622      	mov	r2, r4
 801448c:	4606      	mov	r6, r0
 801448e:	460f      	mov	r7, r1
 8014490:	462b      	mov	r3, r5
 8014492:	4620      	mov	r0, r4
 8014494:	4629      	mov	r1, r5
 8014496:	f7ec f8af 	bl	80005f8 <__aeabi_dmul>
 801449a:	4602      	mov	r2, r0
 801449c:	460b      	mov	r3, r1
 801449e:	4630      	mov	r0, r6
 80144a0:	4639      	mov	r1, r7
 80144a2:	f7ec f8a9 	bl	80005f8 <__aeabi_dmul>
 80144a6:	4642      	mov	r2, r8
 80144a8:	4604      	mov	r4, r0
 80144aa:	460d      	mov	r5, r1
 80144ac:	464b      	mov	r3, r9
 80144ae:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80144b2:	f7eb feeb 	bl	800028c <__adddf3>
 80144b6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80144ba:	f7ec f89d 	bl	80005f8 <__aeabi_dmul>
 80144be:	4622      	mov	r2, r4
 80144c0:	462b      	mov	r3, r5
 80144c2:	f7eb fee3 	bl	800028c <__adddf3>
 80144c6:	4642      	mov	r2, r8
 80144c8:	4606      	mov	r6, r0
 80144ca:	460f      	mov	r7, r1
 80144cc:	464b      	mov	r3, r9
 80144ce:	4640      	mov	r0, r8
 80144d0:	4649      	mov	r1, r9
 80144d2:	f7ec f891 	bl	80005f8 <__aeabi_dmul>
 80144d6:	2200      	movs	r2, #0
 80144d8:	4b68      	ldr	r3, [pc, #416]	; (801467c <__ieee754_pow+0x734>)
 80144da:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80144de:	f7eb fed5 	bl	800028c <__adddf3>
 80144e2:	4632      	mov	r2, r6
 80144e4:	463b      	mov	r3, r7
 80144e6:	f7eb fed1 	bl	800028c <__adddf3>
 80144ea:	9802      	ldr	r0, [sp, #8]
 80144ec:	460d      	mov	r5, r1
 80144ee:	4604      	mov	r4, r0
 80144f0:	4602      	mov	r2, r0
 80144f2:	460b      	mov	r3, r1
 80144f4:	4640      	mov	r0, r8
 80144f6:	4649      	mov	r1, r9
 80144f8:	f7ec f87e 	bl	80005f8 <__aeabi_dmul>
 80144fc:	2200      	movs	r2, #0
 80144fe:	4680      	mov	r8, r0
 8014500:	4689      	mov	r9, r1
 8014502:	4b5e      	ldr	r3, [pc, #376]	; (801467c <__ieee754_pow+0x734>)
 8014504:	4620      	mov	r0, r4
 8014506:	4629      	mov	r1, r5
 8014508:	f7eb febe 	bl	8000288 <__aeabi_dsub>
 801450c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8014510:	f7eb feba 	bl	8000288 <__aeabi_dsub>
 8014514:	4602      	mov	r2, r0
 8014516:	460b      	mov	r3, r1
 8014518:	4630      	mov	r0, r6
 801451a:	4639      	mov	r1, r7
 801451c:	f7eb feb4 	bl	8000288 <__aeabi_dsub>
 8014520:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8014524:	f7ec f868 	bl	80005f8 <__aeabi_dmul>
 8014528:	4622      	mov	r2, r4
 801452a:	4606      	mov	r6, r0
 801452c:	460f      	mov	r7, r1
 801452e:	462b      	mov	r3, r5
 8014530:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8014534:	f7ec f860 	bl	80005f8 <__aeabi_dmul>
 8014538:	4602      	mov	r2, r0
 801453a:	460b      	mov	r3, r1
 801453c:	4630      	mov	r0, r6
 801453e:	4639      	mov	r1, r7
 8014540:	f7eb fea4 	bl	800028c <__adddf3>
 8014544:	4606      	mov	r6, r0
 8014546:	460f      	mov	r7, r1
 8014548:	4602      	mov	r2, r0
 801454a:	460b      	mov	r3, r1
 801454c:	4640      	mov	r0, r8
 801454e:	4649      	mov	r1, r9
 8014550:	f7eb fe9c 	bl	800028c <__adddf3>
 8014554:	9802      	ldr	r0, [sp, #8]
 8014556:	a33c      	add	r3, pc, #240	; (adr r3, 8014648 <__ieee754_pow+0x700>)
 8014558:	e9d3 2300 	ldrd	r2, r3, [r3]
 801455c:	4604      	mov	r4, r0
 801455e:	460d      	mov	r5, r1
 8014560:	f7ec f84a 	bl	80005f8 <__aeabi_dmul>
 8014564:	4642      	mov	r2, r8
 8014566:	e9cd 0106 	strd	r0, r1, [sp, #24]
 801456a:	464b      	mov	r3, r9
 801456c:	4620      	mov	r0, r4
 801456e:	4629      	mov	r1, r5
 8014570:	f7eb fe8a 	bl	8000288 <__aeabi_dsub>
 8014574:	4602      	mov	r2, r0
 8014576:	460b      	mov	r3, r1
 8014578:	4630      	mov	r0, r6
 801457a:	4639      	mov	r1, r7
 801457c:	f7eb fe84 	bl	8000288 <__aeabi_dsub>
 8014580:	a333      	add	r3, pc, #204	; (adr r3, 8014650 <__ieee754_pow+0x708>)
 8014582:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014586:	f7ec f837 	bl	80005f8 <__aeabi_dmul>
 801458a:	a333      	add	r3, pc, #204	; (adr r3, 8014658 <__ieee754_pow+0x710>)
 801458c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014590:	4606      	mov	r6, r0
 8014592:	460f      	mov	r7, r1
 8014594:	4620      	mov	r0, r4
 8014596:	4629      	mov	r1, r5
 8014598:	f7ec f82e 	bl	80005f8 <__aeabi_dmul>
 801459c:	4602      	mov	r2, r0
 801459e:	460b      	mov	r3, r1
 80145a0:	4630      	mov	r0, r6
 80145a2:	4639      	mov	r1, r7
 80145a4:	f7eb fe72 	bl	800028c <__adddf3>
 80145a8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80145aa:	4b35      	ldr	r3, [pc, #212]	; (8014680 <__ieee754_pow+0x738>)
 80145ac:	4413      	add	r3, r2
 80145ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80145b2:	f7eb fe6b 	bl	800028c <__adddf3>
 80145b6:	4604      	mov	r4, r0
 80145b8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80145ba:	460d      	mov	r5, r1
 80145bc:	f7eb ffb2 	bl	8000524 <__aeabi_i2d>
 80145c0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80145c2:	4b30      	ldr	r3, [pc, #192]	; (8014684 <__ieee754_pow+0x73c>)
 80145c4:	4413      	add	r3, r2
 80145c6:	e9d3 8900 	ldrd	r8, r9, [r3]
 80145ca:	4606      	mov	r6, r0
 80145cc:	460f      	mov	r7, r1
 80145ce:	4622      	mov	r2, r4
 80145d0:	462b      	mov	r3, r5
 80145d2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80145d6:	f7eb fe59 	bl	800028c <__adddf3>
 80145da:	4642      	mov	r2, r8
 80145dc:	464b      	mov	r3, r9
 80145de:	f7eb fe55 	bl	800028c <__adddf3>
 80145e2:	4632      	mov	r2, r6
 80145e4:	463b      	mov	r3, r7
 80145e6:	f7eb fe51 	bl	800028c <__adddf3>
 80145ea:	9802      	ldr	r0, [sp, #8]
 80145ec:	4632      	mov	r2, r6
 80145ee:	463b      	mov	r3, r7
 80145f0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80145f4:	f7eb fe48 	bl	8000288 <__aeabi_dsub>
 80145f8:	4642      	mov	r2, r8
 80145fa:	464b      	mov	r3, r9
 80145fc:	f7eb fe44 	bl	8000288 <__aeabi_dsub>
 8014600:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8014604:	e607      	b.n	8014216 <__ieee754_pow+0x2ce>
 8014606:	f04f 0a01 	mov.w	sl, #1
 801460a:	e6a5      	b.n	8014358 <__ieee754_pow+0x410>
 801460c:	ed9f 7b14 	vldr	d7, [pc, #80]	; 8014660 <__ieee754_pow+0x718>
 8014610:	e613      	b.n	801423a <__ieee754_pow+0x2f2>
 8014612:	bf00      	nop
 8014614:	f3af 8000 	nop.w
 8014618:	4a454eef 	.word	0x4a454eef
 801461c:	3fca7e28 	.word	0x3fca7e28
 8014620:	93c9db65 	.word	0x93c9db65
 8014624:	3fcd864a 	.word	0x3fcd864a
 8014628:	a91d4101 	.word	0xa91d4101
 801462c:	3fd17460 	.word	0x3fd17460
 8014630:	518f264d 	.word	0x518f264d
 8014634:	3fd55555 	.word	0x3fd55555
 8014638:	db6fabff 	.word	0xdb6fabff
 801463c:	3fdb6db6 	.word	0x3fdb6db6
 8014640:	33333303 	.word	0x33333303
 8014644:	3fe33333 	.word	0x3fe33333
 8014648:	e0000000 	.word	0xe0000000
 801464c:	3feec709 	.word	0x3feec709
 8014650:	dc3a03fd 	.word	0xdc3a03fd
 8014654:	3feec709 	.word	0x3feec709
 8014658:	145b01f5 	.word	0x145b01f5
 801465c:	be3e2fe0 	.word	0xbe3e2fe0
 8014660:	00000000 	.word	0x00000000
 8014664:	3ff00000 	.word	0x3ff00000
 8014668:	43400000 	.word	0x43400000
 801466c:	0003988e 	.word	0x0003988e
 8014670:	000bb679 	.word	0x000bb679
 8014674:	08015cc0 	.word	0x08015cc0
 8014678:	3ff00000 	.word	0x3ff00000
 801467c:	40080000 	.word	0x40080000
 8014680:	08015ce0 	.word	0x08015ce0
 8014684:	08015cd0 	.word	0x08015cd0
 8014688:	a3b4      	add	r3, pc, #720	; (adr r3, 801495c <__ieee754_pow+0xa14>)
 801468a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801468e:	4640      	mov	r0, r8
 8014690:	4649      	mov	r1, r9
 8014692:	f7eb fdfb 	bl	800028c <__adddf3>
 8014696:	4622      	mov	r2, r4
 8014698:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801469c:	462b      	mov	r3, r5
 801469e:	4630      	mov	r0, r6
 80146a0:	4639      	mov	r1, r7
 80146a2:	f7eb fdf1 	bl	8000288 <__aeabi_dsub>
 80146a6:	4602      	mov	r2, r0
 80146a8:	460b      	mov	r3, r1
 80146aa:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80146ae:	f7ec fa33 	bl	8000b18 <__aeabi_dcmpgt>
 80146b2:	2800      	cmp	r0, #0
 80146b4:	f47f adfe 	bne.w	80142b4 <__ieee754_pow+0x36c>
 80146b8:	4aa3      	ldr	r2, [pc, #652]	; (8014948 <__ieee754_pow+0xa00>)
 80146ba:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80146be:	4293      	cmp	r3, r2
 80146c0:	f340 810a 	ble.w	80148d8 <__ieee754_pow+0x990>
 80146c4:	151b      	asrs	r3, r3, #20
 80146c6:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 80146ca:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 80146ce:	fa4a f303 	asr.w	r3, sl, r3
 80146d2:	445b      	add	r3, fp
 80146d4:	f3c3 520a 	ubfx	r2, r3, #20, #11
 80146d8:	4e9c      	ldr	r6, [pc, #624]	; (801494c <__ieee754_pow+0xa04>)
 80146da:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 80146de:	4116      	asrs	r6, r2
 80146e0:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 80146e4:	2000      	movs	r0, #0
 80146e6:	ea23 0106 	bic.w	r1, r3, r6
 80146ea:	f1c2 0214 	rsb	r2, r2, #20
 80146ee:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 80146f2:	fa4a fa02 	asr.w	sl, sl, r2
 80146f6:	f1bb 0f00 	cmp.w	fp, #0
 80146fa:	4602      	mov	r2, r0
 80146fc:	460b      	mov	r3, r1
 80146fe:	4620      	mov	r0, r4
 8014700:	4629      	mov	r1, r5
 8014702:	bfb8      	it	lt
 8014704:	f1ca 0a00 	rsblt	sl, sl, #0
 8014708:	f7eb fdbe 	bl	8000288 <__aeabi_dsub>
 801470c:	e9cd 0100 	strd	r0, r1, [sp]
 8014710:	4642      	mov	r2, r8
 8014712:	464b      	mov	r3, r9
 8014714:	e9dd 0100 	ldrd	r0, r1, [sp]
 8014718:	f7eb fdb8 	bl	800028c <__adddf3>
 801471c:	2000      	movs	r0, #0
 801471e:	a378      	add	r3, pc, #480	; (adr r3, 8014900 <__ieee754_pow+0x9b8>)
 8014720:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014724:	4604      	mov	r4, r0
 8014726:	460d      	mov	r5, r1
 8014728:	f7eb ff66 	bl	80005f8 <__aeabi_dmul>
 801472c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8014730:	4606      	mov	r6, r0
 8014732:	460f      	mov	r7, r1
 8014734:	4620      	mov	r0, r4
 8014736:	4629      	mov	r1, r5
 8014738:	f7eb fda6 	bl	8000288 <__aeabi_dsub>
 801473c:	4602      	mov	r2, r0
 801473e:	460b      	mov	r3, r1
 8014740:	4640      	mov	r0, r8
 8014742:	4649      	mov	r1, r9
 8014744:	f7eb fda0 	bl	8000288 <__aeabi_dsub>
 8014748:	a36f      	add	r3, pc, #444	; (adr r3, 8014908 <__ieee754_pow+0x9c0>)
 801474a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801474e:	f7eb ff53 	bl	80005f8 <__aeabi_dmul>
 8014752:	a36f      	add	r3, pc, #444	; (adr r3, 8014910 <__ieee754_pow+0x9c8>)
 8014754:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014758:	4680      	mov	r8, r0
 801475a:	4689      	mov	r9, r1
 801475c:	4620      	mov	r0, r4
 801475e:	4629      	mov	r1, r5
 8014760:	f7eb ff4a 	bl	80005f8 <__aeabi_dmul>
 8014764:	4602      	mov	r2, r0
 8014766:	460b      	mov	r3, r1
 8014768:	4640      	mov	r0, r8
 801476a:	4649      	mov	r1, r9
 801476c:	f7eb fd8e 	bl	800028c <__adddf3>
 8014770:	4604      	mov	r4, r0
 8014772:	460d      	mov	r5, r1
 8014774:	4602      	mov	r2, r0
 8014776:	460b      	mov	r3, r1
 8014778:	4630      	mov	r0, r6
 801477a:	4639      	mov	r1, r7
 801477c:	f7eb fd86 	bl	800028c <__adddf3>
 8014780:	4632      	mov	r2, r6
 8014782:	463b      	mov	r3, r7
 8014784:	4680      	mov	r8, r0
 8014786:	4689      	mov	r9, r1
 8014788:	f7eb fd7e 	bl	8000288 <__aeabi_dsub>
 801478c:	4602      	mov	r2, r0
 801478e:	460b      	mov	r3, r1
 8014790:	4620      	mov	r0, r4
 8014792:	4629      	mov	r1, r5
 8014794:	f7eb fd78 	bl	8000288 <__aeabi_dsub>
 8014798:	4642      	mov	r2, r8
 801479a:	4606      	mov	r6, r0
 801479c:	460f      	mov	r7, r1
 801479e:	464b      	mov	r3, r9
 80147a0:	4640      	mov	r0, r8
 80147a2:	4649      	mov	r1, r9
 80147a4:	f7eb ff28 	bl	80005f8 <__aeabi_dmul>
 80147a8:	a35b      	add	r3, pc, #364	; (adr r3, 8014918 <__ieee754_pow+0x9d0>)
 80147aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80147ae:	4604      	mov	r4, r0
 80147b0:	460d      	mov	r5, r1
 80147b2:	f7eb ff21 	bl	80005f8 <__aeabi_dmul>
 80147b6:	a35a      	add	r3, pc, #360	; (adr r3, 8014920 <__ieee754_pow+0x9d8>)
 80147b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80147bc:	f7eb fd64 	bl	8000288 <__aeabi_dsub>
 80147c0:	4622      	mov	r2, r4
 80147c2:	462b      	mov	r3, r5
 80147c4:	f7eb ff18 	bl	80005f8 <__aeabi_dmul>
 80147c8:	a357      	add	r3, pc, #348	; (adr r3, 8014928 <__ieee754_pow+0x9e0>)
 80147ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80147ce:	f7eb fd5d 	bl	800028c <__adddf3>
 80147d2:	4622      	mov	r2, r4
 80147d4:	462b      	mov	r3, r5
 80147d6:	f7eb ff0f 	bl	80005f8 <__aeabi_dmul>
 80147da:	a355      	add	r3, pc, #340	; (adr r3, 8014930 <__ieee754_pow+0x9e8>)
 80147dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80147e0:	f7eb fd52 	bl	8000288 <__aeabi_dsub>
 80147e4:	4622      	mov	r2, r4
 80147e6:	462b      	mov	r3, r5
 80147e8:	f7eb ff06 	bl	80005f8 <__aeabi_dmul>
 80147ec:	a352      	add	r3, pc, #328	; (adr r3, 8014938 <__ieee754_pow+0x9f0>)
 80147ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80147f2:	f7eb fd4b 	bl	800028c <__adddf3>
 80147f6:	4622      	mov	r2, r4
 80147f8:	462b      	mov	r3, r5
 80147fa:	f7eb fefd 	bl	80005f8 <__aeabi_dmul>
 80147fe:	4602      	mov	r2, r0
 8014800:	460b      	mov	r3, r1
 8014802:	4640      	mov	r0, r8
 8014804:	4649      	mov	r1, r9
 8014806:	f7eb fd3f 	bl	8000288 <__aeabi_dsub>
 801480a:	4604      	mov	r4, r0
 801480c:	460d      	mov	r5, r1
 801480e:	4602      	mov	r2, r0
 8014810:	460b      	mov	r3, r1
 8014812:	4640      	mov	r0, r8
 8014814:	4649      	mov	r1, r9
 8014816:	f7eb feef 	bl	80005f8 <__aeabi_dmul>
 801481a:	2200      	movs	r2, #0
 801481c:	e9cd 0100 	strd	r0, r1, [sp]
 8014820:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8014824:	4620      	mov	r0, r4
 8014826:	4629      	mov	r1, r5
 8014828:	f7eb fd2e 	bl	8000288 <__aeabi_dsub>
 801482c:	4602      	mov	r2, r0
 801482e:	460b      	mov	r3, r1
 8014830:	e9dd 0100 	ldrd	r0, r1, [sp]
 8014834:	f7ec f80a 	bl	800084c <__aeabi_ddiv>
 8014838:	4632      	mov	r2, r6
 801483a:	4604      	mov	r4, r0
 801483c:	460d      	mov	r5, r1
 801483e:	463b      	mov	r3, r7
 8014840:	4640      	mov	r0, r8
 8014842:	4649      	mov	r1, r9
 8014844:	f7eb fed8 	bl	80005f8 <__aeabi_dmul>
 8014848:	4632      	mov	r2, r6
 801484a:	463b      	mov	r3, r7
 801484c:	f7eb fd1e 	bl	800028c <__adddf3>
 8014850:	4602      	mov	r2, r0
 8014852:	460b      	mov	r3, r1
 8014854:	4620      	mov	r0, r4
 8014856:	4629      	mov	r1, r5
 8014858:	f7eb fd16 	bl	8000288 <__aeabi_dsub>
 801485c:	4642      	mov	r2, r8
 801485e:	464b      	mov	r3, r9
 8014860:	f7eb fd12 	bl	8000288 <__aeabi_dsub>
 8014864:	4602      	mov	r2, r0
 8014866:	460b      	mov	r3, r1
 8014868:	2000      	movs	r0, #0
 801486a:	4939      	ldr	r1, [pc, #228]	; (8014950 <__ieee754_pow+0xa08>)
 801486c:	f7eb fd0c 	bl	8000288 <__aeabi_dsub>
 8014870:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 8014874:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8014878:	4602      	mov	r2, r0
 801487a:	460b      	mov	r3, r1
 801487c:	da2f      	bge.n	80148de <__ieee754_pow+0x996>
 801487e:	4650      	mov	r0, sl
 8014880:	ec43 2b10 	vmov	d0, r2, r3
 8014884:	f000 fb58 	bl	8014f38 <scalbn>
 8014888:	ec51 0b10 	vmov	r0, r1, d0
 801488c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8014890:	f7ff bbf1 	b.w	8014076 <__ieee754_pow+0x12e>
 8014894:	4b2f      	ldr	r3, [pc, #188]	; (8014954 <__ieee754_pow+0xa0c>)
 8014896:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 801489a:	429e      	cmp	r6, r3
 801489c:	f77f af0c 	ble.w	80146b8 <__ieee754_pow+0x770>
 80148a0:	4b2d      	ldr	r3, [pc, #180]	; (8014958 <__ieee754_pow+0xa10>)
 80148a2:	440b      	add	r3, r1
 80148a4:	4303      	orrs	r3, r0
 80148a6:	d00b      	beq.n	80148c0 <__ieee754_pow+0x978>
 80148a8:	a325      	add	r3, pc, #148	; (adr r3, 8014940 <__ieee754_pow+0x9f8>)
 80148aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80148ae:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80148b2:	f7eb fea1 	bl	80005f8 <__aeabi_dmul>
 80148b6:	a322      	add	r3, pc, #136	; (adr r3, 8014940 <__ieee754_pow+0x9f8>)
 80148b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80148bc:	f7ff bbdb 	b.w	8014076 <__ieee754_pow+0x12e>
 80148c0:	4622      	mov	r2, r4
 80148c2:	462b      	mov	r3, r5
 80148c4:	f7eb fce0 	bl	8000288 <__aeabi_dsub>
 80148c8:	4642      	mov	r2, r8
 80148ca:	464b      	mov	r3, r9
 80148cc:	f7ec f91a 	bl	8000b04 <__aeabi_dcmpge>
 80148d0:	2800      	cmp	r0, #0
 80148d2:	f43f aef1 	beq.w	80146b8 <__ieee754_pow+0x770>
 80148d6:	e7e7      	b.n	80148a8 <__ieee754_pow+0x960>
 80148d8:	f04f 0a00 	mov.w	sl, #0
 80148dc:	e718      	b.n	8014710 <__ieee754_pow+0x7c8>
 80148de:	4621      	mov	r1, r4
 80148e0:	e7d4      	b.n	801488c <__ieee754_pow+0x944>
 80148e2:	2000      	movs	r0, #0
 80148e4:	491a      	ldr	r1, [pc, #104]	; (8014950 <__ieee754_pow+0xa08>)
 80148e6:	f7ff bb8f 	b.w	8014008 <__ieee754_pow+0xc0>
 80148ea:	e9dd 0100 	ldrd	r0, r1, [sp]
 80148ee:	f7ff bb8b 	b.w	8014008 <__ieee754_pow+0xc0>
 80148f2:	4630      	mov	r0, r6
 80148f4:	4639      	mov	r1, r7
 80148f6:	f7ff bb87 	b.w	8014008 <__ieee754_pow+0xc0>
 80148fa:	4693      	mov	fp, r2
 80148fc:	f7ff bb98 	b.w	8014030 <__ieee754_pow+0xe8>
 8014900:	00000000 	.word	0x00000000
 8014904:	3fe62e43 	.word	0x3fe62e43
 8014908:	fefa39ef 	.word	0xfefa39ef
 801490c:	3fe62e42 	.word	0x3fe62e42
 8014910:	0ca86c39 	.word	0x0ca86c39
 8014914:	be205c61 	.word	0xbe205c61
 8014918:	72bea4d0 	.word	0x72bea4d0
 801491c:	3e663769 	.word	0x3e663769
 8014920:	c5d26bf1 	.word	0xc5d26bf1
 8014924:	3ebbbd41 	.word	0x3ebbbd41
 8014928:	af25de2c 	.word	0xaf25de2c
 801492c:	3f11566a 	.word	0x3f11566a
 8014930:	16bebd93 	.word	0x16bebd93
 8014934:	3f66c16c 	.word	0x3f66c16c
 8014938:	5555553e 	.word	0x5555553e
 801493c:	3fc55555 	.word	0x3fc55555
 8014940:	c2f8f359 	.word	0xc2f8f359
 8014944:	01a56e1f 	.word	0x01a56e1f
 8014948:	3fe00000 	.word	0x3fe00000
 801494c:	000fffff 	.word	0x000fffff
 8014950:	3ff00000 	.word	0x3ff00000
 8014954:	4090cbff 	.word	0x4090cbff
 8014958:	3f6f3400 	.word	0x3f6f3400
 801495c:	652b82fe 	.word	0x652b82fe
 8014960:	3c971547 	.word	0x3c971547

08014964 <__ieee754_sqrt>:
 8014964:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014968:	4955      	ldr	r1, [pc, #340]	; (8014ac0 <__ieee754_sqrt+0x15c>)
 801496a:	ec55 4b10 	vmov	r4, r5, d0
 801496e:	43a9      	bics	r1, r5
 8014970:	462b      	mov	r3, r5
 8014972:	462a      	mov	r2, r5
 8014974:	d112      	bne.n	801499c <__ieee754_sqrt+0x38>
 8014976:	ee10 2a10 	vmov	r2, s0
 801497a:	ee10 0a10 	vmov	r0, s0
 801497e:	4629      	mov	r1, r5
 8014980:	f7eb fe3a 	bl	80005f8 <__aeabi_dmul>
 8014984:	4602      	mov	r2, r0
 8014986:	460b      	mov	r3, r1
 8014988:	4620      	mov	r0, r4
 801498a:	4629      	mov	r1, r5
 801498c:	f7eb fc7e 	bl	800028c <__adddf3>
 8014990:	4604      	mov	r4, r0
 8014992:	460d      	mov	r5, r1
 8014994:	ec45 4b10 	vmov	d0, r4, r5
 8014998:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801499c:	2d00      	cmp	r5, #0
 801499e:	ee10 0a10 	vmov	r0, s0
 80149a2:	4621      	mov	r1, r4
 80149a4:	dc0f      	bgt.n	80149c6 <__ieee754_sqrt+0x62>
 80149a6:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 80149aa:	4330      	orrs	r0, r6
 80149ac:	d0f2      	beq.n	8014994 <__ieee754_sqrt+0x30>
 80149ae:	b155      	cbz	r5, 80149c6 <__ieee754_sqrt+0x62>
 80149b0:	ee10 2a10 	vmov	r2, s0
 80149b4:	4620      	mov	r0, r4
 80149b6:	4629      	mov	r1, r5
 80149b8:	f7eb fc66 	bl	8000288 <__aeabi_dsub>
 80149bc:	4602      	mov	r2, r0
 80149be:	460b      	mov	r3, r1
 80149c0:	f7eb ff44 	bl	800084c <__aeabi_ddiv>
 80149c4:	e7e4      	b.n	8014990 <__ieee754_sqrt+0x2c>
 80149c6:	151b      	asrs	r3, r3, #20
 80149c8:	d073      	beq.n	8014ab2 <__ieee754_sqrt+0x14e>
 80149ca:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80149ce:	07dd      	lsls	r5, r3, #31
 80149d0:	f3c2 0213 	ubfx	r2, r2, #0, #20
 80149d4:	bf48      	it	mi
 80149d6:	0fc8      	lsrmi	r0, r1, #31
 80149d8:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80149dc:	bf44      	itt	mi
 80149de:	0049      	lslmi	r1, r1, #1
 80149e0:	eb00 0242 	addmi.w	r2, r0, r2, lsl #1
 80149e4:	2500      	movs	r5, #0
 80149e6:	1058      	asrs	r0, r3, #1
 80149e8:	0fcb      	lsrs	r3, r1, #31
 80149ea:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 80149ee:	0049      	lsls	r1, r1, #1
 80149f0:	2316      	movs	r3, #22
 80149f2:	462c      	mov	r4, r5
 80149f4:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 80149f8:	19a7      	adds	r7, r4, r6
 80149fa:	4297      	cmp	r7, r2
 80149fc:	bfde      	ittt	le
 80149fe:	19bc      	addle	r4, r7, r6
 8014a00:	1bd2      	suble	r2, r2, r7
 8014a02:	19ad      	addle	r5, r5, r6
 8014a04:	0fcf      	lsrs	r7, r1, #31
 8014a06:	3b01      	subs	r3, #1
 8014a08:	eb07 0242 	add.w	r2, r7, r2, lsl #1
 8014a0c:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8014a10:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8014a14:	d1f0      	bne.n	80149f8 <__ieee754_sqrt+0x94>
 8014a16:	f04f 0c20 	mov.w	ip, #32
 8014a1a:	469e      	mov	lr, r3
 8014a1c:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8014a20:	42a2      	cmp	r2, r4
 8014a22:	eb06 070e 	add.w	r7, r6, lr
 8014a26:	dc02      	bgt.n	8014a2e <__ieee754_sqrt+0xca>
 8014a28:	d112      	bne.n	8014a50 <__ieee754_sqrt+0xec>
 8014a2a:	428f      	cmp	r7, r1
 8014a2c:	d810      	bhi.n	8014a50 <__ieee754_sqrt+0xec>
 8014a2e:	2f00      	cmp	r7, #0
 8014a30:	eb07 0e06 	add.w	lr, r7, r6
 8014a34:	da42      	bge.n	8014abc <__ieee754_sqrt+0x158>
 8014a36:	f1be 0f00 	cmp.w	lr, #0
 8014a3a:	db3f      	blt.n	8014abc <__ieee754_sqrt+0x158>
 8014a3c:	f104 0801 	add.w	r8, r4, #1
 8014a40:	1b12      	subs	r2, r2, r4
 8014a42:	428f      	cmp	r7, r1
 8014a44:	bf88      	it	hi
 8014a46:	f102 32ff 	addhi.w	r2, r2, #4294967295
 8014a4a:	1bc9      	subs	r1, r1, r7
 8014a4c:	4433      	add	r3, r6
 8014a4e:	4644      	mov	r4, r8
 8014a50:	0052      	lsls	r2, r2, #1
 8014a52:	f1bc 0c01 	subs.w	ip, ip, #1
 8014a56:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 8014a5a:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8014a5e:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8014a62:	d1dd      	bne.n	8014a20 <__ieee754_sqrt+0xbc>
 8014a64:	430a      	orrs	r2, r1
 8014a66:	d006      	beq.n	8014a76 <__ieee754_sqrt+0x112>
 8014a68:	1c5c      	adds	r4, r3, #1
 8014a6a:	bf13      	iteet	ne
 8014a6c:	3301      	addne	r3, #1
 8014a6e:	3501      	addeq	r5, #1
 8014a70:	4663      	moveq	r3, ip
 8014a72:	f023 0301 	bicne.w	r3, r3, #1
 8014a76:	106a      	asrs	r2, r5, #1
 8014a78:	085b      	lsrs	r3, r3, #1
 8014a7a:	07e9      	lsls	r1, r5, #31
 8014a7c:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 8014a80:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 8014a84:	bf48      	it	mi
 8014a86:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 8014a8a:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 8014a8e:	461c      	mov	r4, r3
 8014a90:	e780      	b.n	8014994 <__ieee754_sqrt+0x30>
 8014a92:	0aca      	lsrs	r2, r1, #11
 8014a94:	3815      	subs	r0, #21
 8014a96:	0549      	lsls	r1, r1, #21
 8014a98:	2a00      	cmp	r2, #0
 8014a9a:	d0fa      	beq.n	8014a92 <__ieee754_sqrt+0x12e>
 8014a9c:	02d6      	lsls	r6, r2, #11
 8014a9e:	d50a      	bpl.n	8014ab6 <__ieee754_sqrt+0x152>
 8014aa0:	f1c3 0420 	rsb	r4, r3, #32
 8014aa4:	fa21 f404 	lsr.w	r4, r1, r4
 8014aa8:	1e5d      	subs	r5, r3, #1
 8014aaa:	4099      	lsls	r1, r3
 8014aac:	4322      	orrs	r2, r4
 8014aae:	1b43      	subs	r3, r0, r5
 8014ab0:	e78b      	b.n	80149ca <__ieee754_sqrt+0x66>
 8014ab2:	4618      	mov	r0, r3
 8014ab4:	e7f0      	b.n	8014a98 <__ieee754_sqrt+0x134>
 8014ab6:	0052      	lsls	r2, r2, #1
 8014ab8:	3301      	adds	r3, #1
 8014aba:	e7ef      	b.n	8014a9c <__ieee754_sqrt+0x138>
 8014abc:	46a0      	mov	r8, r4
 8014abe:	e7bf      	b.n	8014a40 <__ieee754_sqrt+0xdc>
 8014ac0:	7ff00000 	.word	0x7ff00000

08014ac4 <__ieee754_asinf>:
 8014ac4:	b538      	push	{r3, r4, r5, lr}
 8014ac6:	ee10 5a10 	vmov	r5, s0
 8014aca:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 8014ace:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 8014ad2:	ed2d 8b04 	vpush	{d8-d9}
 8014ad6:	d10c      	bne.n	8014af2 <__ieee754_asinf+0x2e>
 8014ad8:	eddf 7a5e 	vldr	s15, [pc, #376]	; 8014c54 <__ieee754_asinf+0x190>
 8014adc:	ed9f 7a5e 	vldr	s14, [pc, #376]	; 8014c58 <__ieee754_asinf+0x194>
 8014ae0:	ee60 7a27 	vmul.f32	s15, s0, s15
 8014ae4:	eee0 7a07 	vfma.f32	s15, s0, s14
 8014ae8:	eeb0 0a67 	vmov.f32	s0, s15
 8014aec:	ecbd 8b04 	vpop	{d8-d9}
 8014af0:	bd38      	pop	{r3, r4, r5, pc}
 8014af2:	dd04      	ble.n	8014afe <__ieee754_asinf+0x3a>
 8014af4:	ee70 7a40 	vsub.f32	s15, s0, s0
 8014af8:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 8014afc:	e7f6      	b.n	8014aec <__ieee754_asinf+0x28>
 8014afe:	f1b4 5f7c 	cmp.w	r4, #1056964608	; 0x3f000000
 8014b02:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 8014b06:	da0b      	bge.n	8014b20 <__ieee754_asinf+0x5c>
 8014b08:	f1b4 5f48 	cmp.w	r4, #838860800	; 0x32000000
 8014b0c:	da52      	bge.n	8014bb4 <__ieee754_asinf+0xf0>
 8014b0e:	eddf 7a53 	vldr	s15, [pc, #332]	; 8014c5c <__ieee754_asinf+0x198>
 8014b12:	ee70 7a27 	vadd.f32	s15, s0, s15
 8014b16:	eef4 7ae8 	vcmpe.f32	s15, s17
 8014b1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014b1e:	dce5      	bgt.n	8014aec <__ieee754_asinf+0x28>
 8014b20:	f000 fb54 	bl	80151cc <fabsf>
 8014b24:	ee38 0ac0 	vsub.f32	s0, s17, s0
 8014b28:	eeb6 8a00 	vmov.f32	s16, #96	; 0x3f000000  0.5
 8014b2c:	ee20 8a08 	vmul.f32	s16, s0, s16
 8014b30:	eddf 7a4b 	vldr	s15, [pc, #300]	; 8014c60 <__ieee754_asinf+0x19c>
 8014b34:	ed9f 7a4b 	vldr	s14, [pc, #300]	; 8014c64 <__ieee754_asinf+0x1a0>
 8014b38:	ed9f 9a4b 	vldr	s18, [pc, #300]	; 8014c68 <__ieee754_asinf+0x1a4>
 8014b3c:	eea8 7a27 	vfma.f32	s14, s16, s15
 8014b40:	eddf 7a4a 	vldr	s15, [pc, #296]	; 8014c6c <__ieee754_asinf+0x1a8>
 8014b44:	eee7 7a08 	vfma.f32	s15, s14, s16
 8014b48:	ed9f 7a49 	vldr	s14, [pc, #292]	; 8014c70 <__ieee754_asinf+0x1ac>
 8014b4c:	eea7 7a88 	vfma.f32	s14, s15, s16
 8014b50:	eddf 7a48 	vldr	s15, [pc, #288]	; 8014c74 <__ieee754_asinf+0x1b0>
 8014b54:	eee7 7a08 	vfma.f32	s15, s14, s16
 8014b58:	ed9f 7a47 	vldr	s14, [pc, #284]	; 8014c78 <__ieee754_asinf+0x1b4>
 8014b5c:	eea7 9a88 	vfma.f32	s18, s15, s16
 8014b60:	eddf 7a46 	vldr	s15, [pc, #280]	; 8014c7c <__ieee754_asinf+0x1b8>
 8014b64:	eee8 7a07 	vfma.f32	s15, s16, s14
 8014b68:	ed9f 7a45 	vldr	s14, [pc, #276]	; 8014c80 <__ieee754_asinf+0x1bc>
 8014b6c:	eea7 7a88 	vfma.f32	s14, s15, s16
 8014b70:	eddf 7a44 	vldr	s15, [pc, #272]	; 8014c84 <__ieee754_asinf+0x1c0>
 8014b74:	eee7 7a08 	vfma.f32	s15, s14, s16
 8014b78:	eeb0 0a48 	vmov.f32	s0, s16
 8014b7c:	eee7 8a88 	vfma.f32	s17, s15, s16
 8014b80:	f000 f936 	bl	8014df0 <__ieee754_sqrtf>
 8014b84:	4b40      	ldr	r3, [pc, #256]	; (8014c88 <__ieee754_asinf+0x1c4>)
 8014b86:	ee29 9a08 	vmul.f32	s18, s18, s16
 8014b8a:	429c      	cmp	r4, r3
 8014b8c:	ee89 6a28 	vdiv.f32	s12, s18, s17
 8014b90:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8014b94:	dd3d      	ble.n	8014c12 <__ieee754_asinf+0x14e>
 8014b96:	eea0 0a06 	vfma.f32	s0, s0, s12
 8014b9a:	eddf 7a3c 	vldr	s15, [pc, #240]	; 8014c8c <__ieee754_asinf+0x1c8>
 8014b9e:	eee0 7a07 	vfma.f32	s15, s0, s14
 8014ba2:	ed9f 0a2d 	vldr	s0, [pc, #180]	; 8014c58 <__ieee754_asinf+0x194>
 8014ba6:	ee30 0a67 	vsub.f32	s0, s0, s15
 8014baa:	2d00      	cmp	r5, #0
 8014bac:	bfd8      	it	le
 8014bae:	eeb1 0a40 	vnegle.f32	s0, s0
 8014bb2:	e79b      	b.n	8014aec <__ieee754_asinf+0x28>
 8014bb4:	ee60 7a00 	vmul.f32	s15, s0, s0
 8014bb8:	eddf 6a29 	vldr	s13, [pc, #164]	; 8014c60 <__ieee754_asinf+0x19c>
 8014bbc:	ed9f 7a29 	vldr	s14, [pc, #164]	; 8014c64 <__ieee754_asinf+0x1a0>
 8014bc0:	ed9f 6a2d 	vldr	s12, [pc, #180]	; 8014c78 <__ieee754_asinf+0x1b4>
 8014bc4:	eea7 7aa6 	vfma.f32	s14, s15, s13
 8014bc8:	eddf 6a28 	vldr	s13, [pc, #160]	; 8014c6c <__ieee754_asinf+0x1a8>
 8014bcc:	eee7 6a27 	vfma.f32	s13, s14, s15
 8014bd0:	ed9f 7a27 	vldr	s14, [pc, #156]	; 8014c70 <__ieee754_asinf+0x1ac>
 8014bd4:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8014bd8:	eddf 6a26 	vldr	s13, [pc, #152]	; 8014c74 <__ieee754_asinf+0x1b0>
 8014bdc:	eee7 6a27 	vfma.f32	s13, s14, s15
 8014be0:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8014c68 <__ieee754_asinf+0x1a4>
 8014be4:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8014be8:	eddf 6a24 	vldr	s13, [pc, #144]	; 8014c7c <__ieee754_asinf+0x1b8>
 8014bec:	eee7 6a86 	vfma.f32	s13, s15, s12
 8014bf0:	ed9f 6a23 	vldr	s12, [pc, #140]	; 8014c80 <__ieee754_asinf+0x1bc>
 8014bf4:	eea6 6aa7 	vfma.f32	s12, s13, s15
 8014bf8:	eddf 6a22 	vldr	s13, [pc, #136]	; 8014c84 <__ieee754_asinf+0x1c0>
 8014bfc:	eee6 6a27 	vfma.f32	s13, s12, s15
 8014c00:	ee27 7a27 	vmul.f32	s14, s14, s15
 8014c04:	eee6 8aa7 	vfma.f32	s17, s13, s15
 8014c08:	eec7 7a28 	vdiv.f32	s15, s14, s17
 8014c0c:	eea0 0a27 	vfma.f32	s0, s0, s15
 8014c10:	e76c      	b.n	8014aec <__ieee754_asinf+0x28>
 8014c12:	ee10 3a10 	vmov	r3, s0
 8014c16:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8014c1a:	f023 030f 	bic.w	r3, r3, #15
 8014c1e:	ee07 3a90 	vmov	s15, r3
 8014c22:	eef1 6a67 	vneg.f32	s13, s15
 8014c26:	eea6 8aa7 	vfma.f32	s16, s13, s15
 8014c2a:	ee70 5a00 	vadd.f32	s11, s0, s0
 8014c2e:	ee37 0a80 	vadd.f32	s0, s15, s0
 8014c32:	eddf 7a08 	vldr	s15, [pc, #32]	; 8014c54 <__ieee754_asinf+0x190>
 8014c36:	ee88 5a00 	vdiv.f32	s10, s16, s0
 8014c3a:	ed9f 0a15 	vldr	s0, [pc, #84]	; 8014c90 <__ieee754_asinf+0x1cc>
 8014c3e:	eee5 7a47 	vfms.f32	s15, s10, s14
 8014c42:	eed5 7a86 	vfnms.f32	s15, s11, s12
 8014c46:	eeb0 6a40 	vmov.f32	s12, s0
 8014c4a:	eea6 6a87 	vfma.f32	s12, s13, s14
 8014c4e:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8014c52:	e7a8      	b.n	8014ba6 <__ieee754_asinf+0xe2>
 8014c54:	b33bbd2e 	.word	0xb33bbd2e
 8014c58:	3fc90fdb 	.word	0x3fc90fdb
 8014c5c:	7149f2ca 	.word	0x7149f2ca
 8014c60:	3811ef08 	.word	0x3811ef08
 8014c64:	3a4f7f04 	.word	0x3a4f7f04
 8014c68:	3e2aaaab 	.word	0x3e2aaaab
 8014c6c:	bd241146 	.word	0xbd241146
 8014c70:	3e4e0aa8 	.word	0x3e4e0aa8
 8014c74:	bea6b090 	.word	0xbea6b090
 8014c78:	3d9dc62e 	.word	0x3d9dc62e
 8014c7c:	bf303361 	.word	0xbf303361
 8014c80:	4001572d 	.word	0x4001572d
 8014c84:	c019d139 	.word	0xc019d139
 8014c88:	3f799999 	.word	0x3f799999
 8014c8c:	333bbd2e 	.word	0x333bbd2e
 8014c90:	3f490fdb 	.word	0x3f490fdb

08014c94 <__ieee754_atan2f>:
 8014c94:	ee10 2a90 	vmov	r2, s1
 8014c98:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 8014c9c:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8014ca0:	b510      	push	{r4, lr}
 8014ca2:	eef0 7a40 	vmov.f32	s15, s0
 8014ca6:	dc06      	bgt.n	8014cb6 <__ieee754_atan2f+0x22>
 8014ca8:	ee10 0a10 	vmov	r0, s0
 8014cac:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 8014cb0:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8014cb4:	dd04      	ble.n	8014cc0 <__ieee754_atan2f+0x2c>
 8014cb6:	ee77 7aa0 	vadd.f32	s15, s15, s1
 8014cba:	eeb0 0a67 	vmov.f32	s0, s15
 8014cbe:	bd10      	pop	{r4, pc}
 8014cc0:	f1b2 5f7e 	cmp.w	r2, #1065353216	; 0x3f800000
 8014cc4:	d103      	bne.n	8014cce <__ieee754_atan2f+0x3a>
 8014cc6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014cca:	f000 b9ab 	b.w	8015024 <atanf>
 8014cce:	1794      	asrs	r4, r2, #30
 8014cd0:	f004 0402 	and.w	r4, r4, #2
 8014cd4:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 8014cd8:	b943      	cbnz	r3, 8014cec <__ieee754_atan2f+0x58>
 8014cda:	2c02      	cmp	r4, #2
 8014cdc:	d06e      	beq.n	8014dbc <__ieee754_atan2f+0x128>
 8014cde:	ed9f 7a39 	vldr	s14, [pc, #228]	; 8014dc4 <__ieee754_atan2f+0x130>
 8014ce2:	2c03      	cmp	r4, #3
 8014ce4:	bf08      	it	eq
 8014ce6:	eef0 7a47 	vmoveq.f32	s15, s14
 8014cea:	e7e6      	b.n	8014cba <__ieee754_atan2f+0x26>
 8014cec:	b941      	cbnz	r1, 8014d00 <__ieee754_atan2f+0x6c>
 8014cee:	eddf 7a36 	vldr	s15, [pc, #216]	; 8014dc8 <__ieee754_atan2f+0x134>
 8014cf2:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8014dcc <__ieee754_atan2f+0x138>
 8014cf6:	2800      	cmp	r0, #0
 8014cf8:	bfb8      	it	lt
 8014cfa:	eef0 7a47 	vmovlt.f32	s15, s14
 8014cfe:	e7dc      	b.n	8014cba <__ieee754_atan2f+0x26>
 8014d00:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8014d04:	d122      	bne.n	8014d4c <__ieee754_atan2f+0xb8>
 8014d06:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8014d0a:	d112      	bne.n	8014d32 <__ieee754_atan2f+0x9e>
 8014d0c:	2c02      	cmp	r4, #2
 8014d0e:	d00a      	beq.n	8014d26 <__ieee754_atan2f+0x92>
 8014d10:	2c03      	cmp	r4, #3
 8014d12:	d00b      	beq.n	8014d2c <__ieee754_atan2f+0x98>
 8014d14:	eddf 7a2e 	vldr	s15, [pc, #184]	; 8014dd0 <__ieee754_atan2f+0x13c>
 8014d18:	ed9f 7a2e 	vldr	s14, [pc, #184]	; 8014dd4 <__ieee754_atan2f+0x140>
 8014d1c:	2c01      	cmp	r4, #1
 8014d1e:	bf18      	it	ne
 8014d20:	eef0 7a47 	vmovne.f32	s15, s14
 8014d24:	e7c9      	b.n	8014cba <__ieee754_atan2f+0x26>
 8014d26:	eddf 7a2c 	vldr	s15, [pc, #176]	; 8014dd8 <__ieee754_atan2f+0x144>
 8014d2a:	e7c6      	b.n	8014cba <__ieee754_atan2f+0x26>
 8014d2c:	eddf 7a2b 	vldr	s15, [pc, #172]	; 8014ddc <__ieee754_atan2f+0x148>
 8014d30:	e7c3      	b.n	8014cba <__ieee754_atan2f+0x26>
 8014d32:	2c02      	cmp	r4, #2
 8014d34:	d042      	beq.n	8014dbc <__ieee754_atan2f+0x128>
 8014d36:	2c03      	cmp	r4, #3
 8014d38:	d005      	beq.n	8014d46 <__ieee754_atan2f+0xb2>
 8014d3a:	2c01      	cmp	r4, #1
 8014d3c:	eddf 7a28 	vldr	s15, [pc, #160]	; 8014de0 <__ieee754_atan2f+0x14c>
 8014d40:	ed9f 7a28 	vldr	s14, [pc, #160]	; 8014de4 <__ieee754_atan2f+0x150>
 8014d44:	e7eb      	b.n	8014d1e <__ieee754_atan2f+0x8a>
 8014d46:	eddf 7a1f 	vldr	s15, [pc, #124]	; 8014dc4 <__ieee754_atan2f+0x130>
 8014d4a:	e7b6      	b.n	8014cba <__ieee754_atan2f+0x26>
 8014d4c:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8014d50:	d0cd      	beq.n	8014cee <__ieee754_atan2f+0x5a>
 8014d52:	1a5b      	subs	r3, r3, r1
 8014d54:	15db      	asrs	r3, r3, #23
 8014d56:	2b3c      	cmp	r3, #60	; 0x3c
 8014d58:	dc1a      	bgt.n	8014d90 <__ieee754_atan2f+0xfc>
 8014d5a:	2a00      	cmp	r2, #0
 8014d5c:	da01      	bge.n	8014d62 <__ieee754_atan2f+0xce>
 8014d5e:	333c      	adds	r3, #60	; 0x3c
 8014d60:	db19      	blt.n	8014d96 <__ieee754_atan2f+0x102>
 8014d62:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 8014d66:	f000 fa31 	bl	80151cc <fabsf>
 8014d6a:	f000 f95b 	bl	8015024 <atanf>
 8014d6e:	eef0 7a40 	vmov.f32	s15, s0
 8014d72:	2c01      	cmp	r4, #1
 8014d74:	d012      	beq.n	8014d9c <__ieee754_atan2f+0x108>
 8014d76:	2c02      	cmp	r4, #2
 8014d78:	d017      	beq.n	8014daa <__ieee754_atan2f+0x116>
 8014d7a:	2c00      	cmp	r4, #0
 8014d7c:	d09d      	beq.n	8014cba <__ieee754_atan2f+0x26>
 8014d7e:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8014de8 <__ieee754_atan2f+0x154>
 8014d82:	ee77 7a87 	vadd.f32	s15, s15, s14
 8014d86:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8014dec <__ieee754_atan2f+0x158>
 8014d8a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8014d8e:	e794      	b.n	8014cba <__ieee754_atan2f+0x26>
 8014d90:	eddf 7a0d 	vldr	s15, [pc, #52]	; 8014dc8 <__ieee754_atan2f+0x134>
 8014d94:	e7ed      	b.n	8014d72 <__ieee754_atan2f+0xde>
 8014d96:	eddf 7a13 	vldr	s15, [pc, #76]	; 8014de4 <__ieee754_atan2f+0x150>
 8014d9a:	e7ea      	b.n	8014d72 <__ieee754_atan2f+0xde>
 8014d9c:	ee17 3a90 	vmov	r3, s15
 8014da0:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8014da4:	ee07 3a90 	vmov	s15, r3
 8014da8:	e787      	b.n	8014cba <__ieee754_atan2f+0x26>
 8014daa:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8014de8 <__ieee754_atan2f+0x154>
 8014dae:	ee77 7a87 	vadd.f32	s15, s15, s14
 8014db2:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8014dec <__ieee754_atan2f+0x158>
 8014db6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8014dba:	e77e      	b.n	8014cba <__ieee754_atan2f+0x26>
 8014dbc:	eddf 7a0b 	vldr	s15, [pc, #44]	; 8014dec <__ieee754_atan2f+0x158>
 8014dc0:	e77b      	b.n	8014cba <__ieee754_atan2f+0x26>
 8014dc2:	bf00      	nop
 8014dc4:	c0490fdb 	.word	0xc0490fdb
 8014dc8:	3fc90fdb 	.word	0x3fc90fdb
 8014dcc:	bfc90fdb 	.word	0xbfc90fdb
 8014dd0:	bf490fdb 	.word	0xbf490fdb
 8014dd4:	3f490fdb 	.word	0x3f490fdb
 8014dd8:	4016cbe4 	.word	0x4016cbe4
 8014ddc:	c016cbe4 	.word	0xc016cbe4
 8014de0:	80000000 	.word	0x80000000
 8014de4:	00000000 	.word	0x00000000
 8014de8:	33bbbd2e 	.word	0x33bbbd2e
 8014dec:	40490fdb 	.word	0x40490fdb

08014df0 <__ieee754_sqrtf>:
 8014df0:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8014df4:	4770      	bx	lr

08014df6 <fabs>:
 8014df6:	ec51 0b10 	vmov	r0, r1, d0
 8014dfa:	ee10 2a10 	vmov	r2, s0
 8014dfe:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8014e02:	ec43 2b10 	vmov	d0, r2, r3
 8014e06:	4770      	bx	lr

08014e08 <finite>:
 8014e08:	ee10 3a90 	vmov	r3, s1
 8014e0c:	f043 4000 	orr.w	r0, r3, #2147483648	; 0x80000000
 8014e10:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8014e14:	0fc0      	lsrs	r0, r0, #31
 8014e16:	4770      	bx	lr

08014e18 <matherr>:
 8014e18:	2000      	movs	r0, #0
 8014e1a:	4770      	bx	lr
 8014e1c:	0000      	movs	r0, r0
	...

08014e20 <nan>:
 8014e20:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8014e28 <nan+0x8>
 8014e24:	4770      	bx	lr
 8014e26:	bf00      	nop
 8014e28:	00000000 	.word	0x00000000
 8014e2c:	7ff80000 	.word	0x7ff80000

08014e30 <rint>:
 8014e30:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8014e32:	ec51 0b10 	vmov	r0, r1, d0
 8014e36:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8014e3a:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 8014e3e:	2e13      	cmp	r6, #19
 8014e40:	460b      	mov	r3, r1
 8014e42:	ee10 4a10 	vmov	r4, s0
 8014e46:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 8014e4a:	dc56      	bgt.n	8014efa <rint+0xca>
 8014e4c:	2e00      	cmp	r6, #0
 8014e4e:	da2b      	bge.n	8014ea8 <rint+0x78>
 8014e50:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 8014e54:	4302      	orrs	r2, r0
 8014e56:	d023      	beq.n	8014ea0 <rint+0x70>
 8014e58:	f3c1 0213 	ubfx	r2, r1, #0, #20
 8014e5c:	4302      	orrs	r2, r0
 8014e5e:	4254      	negs	r4, r2
 8014e60:	4314      	orrs	r4, r2
 8014e62:	0c4b      	lsrs	r3, r1, #17
 8014e64:	0b24      	lsrs	r4, r4, #12
 8014e66:	045b      	lsls	r3, r3, #17
 8014e68:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 8014e6c:	ea44 0103 	orr.w	r1, r4, r3
 8014e70:	460b      	mov	r3, r1
 8014e72:	492f      	ldr	r1, [pc, #188]	; (8014f30 <rint+0x100>)
 8014e74:	eb01 01c5 	add.w	r1, r1, r5, lsl #3
 8014e78:	e9d1 6700 	ldrd	r6, r7, [r1]
 8014e7c:	4602      	mov	r2, r0
 8014e7e:	4639      	mov	r1, r7
 8014e80:	4630      	mov	r0, r6
 8014e82:	f7eb fa03 	bl	800028c <__adddf3>
 8014e86:	e9cd 0100 	strd	r0, r1, [sp]
 8014e8a:	463b      	mov	r3, r7
 8014e8c:	4632      	mov	r2, r6
 8014e8e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8014e92:	f7eb f9f9 	bl	8000288 <__aeabi_dsub>
 8014e96:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8014e9a:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 8014e9e:	4639      	mov	r1, r7
 8014ea0:	ec41 0b10 	vmov	d0, r0, r1
 8014ea4:	b003      	add	sp, #12
 8014ea6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014ea8:	4a22      	ldr	r2, [pc, #136]	; (8014f34 <rint+0x104>)
 8014eaa:	4132      	asrs	r2, r6
 8014eac:	ea01 0702 	and.w	r7, r1, r2
 8014eb0:	4307      	orrs	r7, r0
 8014eb2:	d0f5      	beq.n	8014ea0 <rint+0x70>
 8014eb4:	0852      	lsrs	r2, r2, #1
 8014eb6:	4011      	ands	r1, r2
 8014eb8:	430c      	orrs	r4, r1
 8014eba:	d00b      	beq.n	8014ed4 <rint+0xa4>
 8014ebc:	ea23 0202 	bic.w	r2, r3, r2
 8014ec0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8014ec4:	2e13      	cmp	r6, #19
 8014ec6:	fa43 f306 	asr.w	r3, r3, r6
 8014eca:	bf0c      	ite	eq
 8014ecc:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 8014ed0:	2400      	movne	r4, #0
 8014ed2:	4313      	orrs	r3, r2
 8014ed4:	4916      	ldr	r1, [pc, #88]	; (8014f30 <rint+0x100>)
 8014ed6:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 8014eda:	4622      	mov	r2, r4
 8014edc:	e9d5 4500 	ldrd	r4, r5, [r5]
 8014ee0:	4620      	mov	r0, r4
 8014ee2:	4629      	mov	r1, r5
 8014ee4:	f7eb f9d2 	bl	800028c <__adddf3>
 8014ee8:	e9cd 0100 	strd	r0, r1, [sp]
 8014eec:	4622      	mov	r2, r4
 8014eee:	462b      	mov	r3, r5
 8014ef0:	e9dd 0100 	ldrd	r0, r1, [sp]
 8014ef4:	f7eb f9c8 	bl	8000288 <__aeabi_dsub>
 8014ef8:	e7d2      	b.n	8014ea0 <rint+0x70>
 8014efa:	2e33      	cmp	r6, #51	; 0x33
 8014efc:	dd07      	ble.n	8014f0e <rint+0xde>
 8014efe:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8014f02:	d1cd      	bne.n	8014ea0 <rint+0x70>
 8014f04:	ee10 2a10 	vmov	r2, s0
 8014f08:	f7eb f9c0 	bl	800028c <__adddf3>
 8014f0c:	e7c8      	b.n	8014ea0 <rint+0x70>
 8014f0e:	f2a2 4613 	subw	r6, r2, #1043	; 0x413
 8014f12:	f04f 32ff 	mov.w	r2, #4294967295
 8014f16:	40f2      	lsrs	r2, r6
 8014f18:	4210      	tst	r0, r2
 8014f1a:	d0c1      	beq.n	8014ea0 <rint+0x70>
 8014f1c:	0852      	lsrs	r2, r2, #1
 8014f1e:	4210      	tst	r0, r2
 8014f20:	bf1f      	itttt	ne
 8014f22:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 8014f26:	ea20 0202 	bicne.w	r2, r0, r2
 8014f2a:	4134      	asrne	r4, r6
 8014f2c:	4314      	orrne	r4, r2
 8014f2e:	e7d1      	b.n	8014ed4 <rint+0xa4>
 8014f30:	08015cf0 	.word	0x08015cf0
 8014f34:	000fffff 	.word	0x000fffff

08014f38 <scalbn>:
 8014f38:	b570      	push	{r4, r5, r6, lr}
 8014f3a:	ec55 4b10 	vmov	r4, r5, d0
 8014f3e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8014f42:	4606      	mov	r6, r0
 8014f44:	462b      	mov	r3, r5
 8014f46:	b9aa      	cbnz	r2, 8014f74 <scalbn+0x3c>
 8014f48:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8014f4c:	4323      	orrs	r3, r4
 8014f4e:	d03b      	beq.n	8014fc8 <scalbn+0x90>
 8014f50:	4b31      	ldr	r3, [pc, #196]	; (8015018 <scalbn+0xe0>)
 8014f52:	4629      	mov	r1, r5
 8014f54:	2200      	movs	r2, #0
 8014f56:	ee10 0a10 	vmov	r0, s0
 8014f5a:	f7eb fb4d 	bl	80005f8 <__aeabi_dmul>
 8014f5e:	4b2f      	ldr	r3, [pc, #188]	; (801501c <scalbn+0xe4>)
 8014f60:	429e      	cmp	r6, r3
 8014f62:	4604      	mov	r4, r0
 8014f64:	460d      	mov	r5, r1
 8014f66:	da12      	bge.n	8014f8e <scalbn+0x56>
 8014f68:	a327      	add	r3, pc, #156	; (adr r3, 8015008 <scalbn+0xd0>)
 8014f6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014f6e:	f7eb fb43 	bl	80005f8 <__aeabi_dmul>
 8014f72:	e009      	b.n	8014f88 <scalbn+0x50>
 8014f74:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8014f78:	428a      	cmp	r2, r1
 8014f7a:	d10c      	bne.n	8014f96 <scalbn+0x5e>
 8014f7c:	ee10 2a10 	vmov	r2, s0
 8014f80:	4620      	mov	r0, r4
 8014f82:	4629      	mov	r1, r5
 8014f84:	f7eb f982 	bl	800028c <__adddf3>
 8014f88:	4604      	mov	r4, r0
 8014f8a:	460d      	mov	r5, r1
 8014f8c:	e01c      	b.n	8014fc8 <scalbn+0x90>
 8014f8e:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8014f92:	460b      	mov	r3, r1
 8014f94:	3a36      	subs	r2, #54	; 0x36
 8014f96:	4432      	add	r2, r6
 8014f98:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8014f9c:	428a      	cmp	r2, r1
 8014f9e:	dd0b      	ble.n	8014fb8 <scalbn+0x80>
 8014fa0:	ec45 4b11 	vmov	d1, r4, r5
 8014fa4:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 8015010 <scalbn+0xd8>
 8014fa8:	f000 f917 	bl	80151da <copysign>
 8014fac:	a318      	add	r3, pc, #96	; (adr r3, 8015010 <scalbn+0xd8>)
 8014fae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014fb2:	ec51 0b10 	vmov	r0, r1, d0
 8014fb6:	e7da      	b.n	8014f6e <scalbn+0x36>
 8014fb8:	2a00      	cmp	r2, #0
 8014fba:	dd08      	ble.n	8014fce <scalbn+0x96>
 8014fbc:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8014fc0:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8014fc4:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8014fc8:	ec45 4b10 	vmov	d0, r4, r5
 8014fcc:	bd70      	pop	{r4, r5, r6, pc}
 8014fce:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8014fd2:	da0d      	bge.n	8014ff0 <scalbn+0xb8>
 8014fd4:	f24c 3350 	movw	r3, #50000	; 0xc350
 8014fd8:	429e      	cmp	r6, r3
 8014fda:	ec45 4b11 	vmov	d1, r4, r5
 8014fde:	dce1      	bgt.n	8014fa4 <scalbn+0x6c>
 8014fe0:	ed9f 0b09 	vldr	d0, [pc, #36]	; 8015008 <scalbn+0xd0>
 8014fe4:	f000 f8f9 	bl	80151da <copysign>
 8014fe8:	a307      	add	r3, pc, #28	; (adr r3, 8015008 <scalbn+0xd0>)
 8014fea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014fee:	e7e0      	b.n	8014fb2 <scalbn+0x7a>
 8014ff0:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8014ff4:	3236      	adds	r2, #54	; 0x36
 8014ff6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8014ffa:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8014ffe:	4620      	mov	r0, r4
 8015000:	4629      	mov	r1, r5
 8015002:	2200      	movs	r2, #0
 8015004:	4b06      	ldr	r3, [pc, #24]	; (8015020 <scalbn+0xe8>)
 8015006:	e7b2      	b.n	8014f6e <scalbn+0x36>
 8015008:	c2f8f359 	.word	0xc2f8f359
 801500c:	01a56e1f 	.word	0x01a56e1f
 8015010:	8800759c 	.word	0x8800759c
 8015014:	7e37e43c 	.word	0x7e37e43c
 8015018:	43500000 	.word	0x43500000
 801501c:	ffff3cb0 	.word	0xffff3cb0
 8015020:	3c900000 	.word	0x3c900000

08015024 <atanf>:
 8015024:	b538      	push	{r3, r4, r5, lr}
 8015026:	ee10 5a10 	vmov	r5, s0
 801502a:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 801502e:	f1b4 4fa1 	cmp.w	r4, #1350565888	; 0x50800000
 8015032:	eef0 7a40 	vmov.f32	s15, s0
 8015036:	db10      	blt.n	801505a <atanf+0x36>
 8015038:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 801503c:	dd04      	ble.n	8015048 <atanf+0x24>
 801503e:	ee70 7a00 	vadd.f32	s15, s0, s0
 8015042:	eeb0 0a67 	vmov.f32	s0, s15
 8015046:	bd38      	pop	{r3, r4, r5, pc}
 8015048:	ed9f 7a4d 	vldr	s14, [pc, #308]	; 8015180 <atanf+0x15c>
 801504c:	eddf 7a4d 	vldr	s15, [pc, #308]	; 8015184 <atanf+0x160>
 8015050:	2d00      	cmp	r5, #0
 8015052:	bfd8      	it	le
 8015054:	eef0 7a47 	vmovle.f32	s15, s14
 8015058:	e7f3      	b.n	8015042 <atanf+0x1e>
 801505a:	4b4b      	ldr	r3, [pc, #300]	; (8015188 <atanf+0x164>)
 801505c:	429c      	cmp	r4, r3
 801505e:	dc10      	bgt.n	8015082 <atanf+0x5e>
 8015060:	f1b4 5f44 	cmp.w	r4, #822083584	; 0x31000000
 8015064:	da0a      	bge.n	801507c <atanf+0x58>
 8015066:	ed9f 7a49 	vldr	s14, [pc, #292]	; 801518c <atanf+0x168>
 801506a:	ee30 7a07 	vadd.f32	s14, s0, s14
 801506e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8015072:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8015076:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801507a:	dce2      	bgt.n	8015042 <atanf+0x1e>
 801507c:	f04f 33ff 	mov.w	r3, #4294967295
 8015080:	e013      	b.n	80150aa <atanf+0x86>
 8015082:	f000 f8a3 	bl	80151cc <fabsf>
 8015086:	4b42      	ldr	r3, [pc, #264]	; (8015190 <atanf+0x16c>)
 8015088:	429c      	cmp	r4, r3
 801508a:	dc4f      	bgt.n	801512c <atanf+0x108>
 801508c:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 8015090:	429c      	cmp	r4, r3
 8015092:	dc41      	bgt.n	8015118 <atanf+0xf4>
 8015094:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 8015098:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 801509c:	eea0 7a27 	vfma.f32	s14, s0, s15
 80150a0:	2300      	movs	r3, #0
 80150a2:	ee30 0a27 	vadd.f32	s0, s0, s15
 80150a6:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80150aa:	1c5a      	adds	r2, r3, #1
 80150ac:	ee27 6aa7 	vmul.f32	s12, s15, s15
 80150b0:	ed9f 7a38 	vldr	s14, [pc, #224]	; 8015194 <atanf+0x170>
 80150b4:	eddf 5a38 	vldr	s11, [pc, #224]	; 8015198 <atanf+0x174>
 80150b8:	ed9f 5a38 	vldr	s10, [pc, #224]	; 801519c <atanf+0x178>
 80150bc:	ee66 6a06 	vmul.f32	s13, s12, s12
 80150c0:	eee6 5a87 	vfma.f32	s11, s13, s14
 80150c4:	ed9f 7a36 	vldr	s14, [pc, #216]	; 80151a0 <atanf+0x17c>
 80150c8:	eea5 7aa6 	vfma.f32	s14, s11, s13
 80150cc:	eddf 5a35 	vldr	s11, [pc, #212]	; 80151a4 <atanf+0x180>
 80150d0:	eee7 5a26 	vfma.f32	s11, s14, s13
 80150d4:	ed9f 7a34 	vldr	s14, [pc, #208]	; 80151a8 <atanf+0x184>
 80150d8:	eea5 7aa6 	vfma.f32	s14, s11, s13
 80150dc:	eddf 5a33 	vldr	s11, [pc, #204]	; 80151ac <atanf+0x188>
 80150e0:	eee7 5a26 	vfma.f32	s11, s14, s13
 80150e4:	ed9f 7a32 	vldr	s14, [pc, #200]	; 80151b0 <atanf+0x18c>
 80150e8:	eea6 5a87 	vfma.f32	s10, s13, s14
 80150ec:	ed9f 7a31 	vldr	s14, [pc, #196]	; 80151b4 <atanf+0x190>
 80150f0:	eea5 7a26 	vfma.f32	s14, s10, s13
 80150f4:	ed9f 5a30 	vldr	s10, [pc, #192]	; 80151b8 <atanf+0x194>
 80150f8:	eea7 5a26 	vfma.f32	s10, s14, s13
 80150fc:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 80151bc <atanf+0x198>
 8015100:	eea5 7a26 	vfma.f32	s14, s10, s13
 8015104:	ee27 7a26 	vmul.f32	s14, s14, s13
 8015108:	eea5 7a86 	vfma.f32	s14, s11, s12
 801510c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8015110:	d121      	bne.n	8015156 <atanf+0x132>
 8015112:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8015116:	e794      	b.n	8015042 <atanf+0x1e>
 8015118:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 801511c:	ee30 7a67 	vsub.f32	s14, s0, s15
 8015120:	ee30 0a27 	vadd.f32	s0, s0, s15
 8015124:	2301      	movs	r3, #1
 8015126:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801512a:	e7be      	b.n	80150aa <atanf+0x86>
 801512c:	4b24      	ldr	r3, [pc, #144]	; (80151c0 <atanf+0x19c>)
 801512e:	429c      	cmp	r4, r3
 8015130:	dc0b      	bgt.n	801514a <atanf+0x126>
 8015132:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 8015136:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801513a:	eea0 7a27 	vfma.f32	s14, s0, s15
 801513e:	2302      	movs	r3, #2
 8015140:	ee70 6a67 	vsub.f32	s13, s0, s15
 8015144:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8015148:	e7af      	b.n	80150aa <atanf+0x86>
 801514a:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 801514e:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8015152:	2303      	movs	r3, #3
 8015154:	e7a9      	b.n	80150aa <atanf+0x86>
 8015156:	4a1b      	ldr	r2, [pc, #108]	; (80151c4 <atanf+0x1a0>)
 8015158:	491b      	ldr	r1, [pc, #108]	; (80151c8 <atanf+0x1a4>)
 801515a:	009b      	lsls	r3, r3, #2
 801515c:	441a      	add	r2, r3
 801515e:	440b      	add	r3, r1
 8015160:	edd3 6a00 	vldr	s13, [r3]
 8015164:	ee37 7a66 	vsub.f32	s14, s14, s13
 8015168:	2d00      	cmp	r5, #0
 801516a:	ee77 7a67 	vsub.f32	s15, s14, s15
 801516e:	ed92 7a00 	vldr	s14, [r2]
 8015172:	ee77 7a67 	vsub.f32	s15, s14, s15
 8015176:	bfb8      	it	lt
 8015178:	eef1 7a67 	vneglt.f32	s15, s15
 801517c:	e761      	b.n	8015042 <atanf+0x1e>
 801517e:	bf00      	nop
 8015180:	bfc90fdb 	.word	0xbfc90fdb
 8015184:	3fc90fdb 	.word	0x3fc90fdb
 8015188:	3edfffff 	.word	0x3edfffff
 801518c:	7149f2ca 	.word	0x7149f2ca
 8015190:	3f97ffff 	.word	0x3f97ffff
 8015194:	3c8569d7 	.word	0x3c8569d7
 8015198:	3d4bda59 	.word	0x3d4bda59
 801519c:	bd6ef16b 	.word	0xbd6ef16b
 80151a0:	3d886b35 	.word	0x3d886b35
 80151a4:	3dba2e6e 	.word	0x3dba2e6e
 80151a8:	3e124925 	.word	0x3e124925
 80151ac:	3eaaaaab 	.word	0x3eaaaaab
 80151b0:	bd15a221 	.word	0xbd15a221
 80151b4:	bd9d8795 	.word	0xbd9d8795
 80151b8:	bde38e38 	.word	0xbde38e38
 80151bc:	be4ccccd 	.word	0xbe4ccccd
 80151c0:	401bffff 	.word	0x401bffff
 80151c4:	08015d00 	.word	0x08015d00
 80151c8:	08015d10 	.word	0x08015d10

080151cc <fabsf>:
 80151cc:	ee10 3a10 	vmov	r3, s0
 80151d0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80151d4:	ee00 3a10 	vmov	s0, r3
 80151d8:	4770      	bx	lr

080151da <copysign>:
 80151da:	ec51 0b10 	vmov	r0, r1, d0
 80151de:	ee11 0a90 	vmov	r0, s3
 80151e2:	ee10 2a10 	vmov	r2, s0
 80151e6:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80151ea:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80151ee:	ea41 0300 	orr.w	r3, r1, r0
 80151f2:	ec43 2b10 	vmov	d0, r2, r3
 80151f6:	4770      	bx	lr

080151f8 <__errno>:
 80151f8:	4b01      	ldr	r3, [pc, #4]	; (8015200 <__errno+0x8>)
 80151fa:	6818      	ldr	r0, [r3, #0]
 80151fc:	4770      	bx	lr
 80151fe:	bf00      	nop
 8015200:	2000017c 	.word	0x2000017c

08015204 <_sbrk>:
 8015204:	4b04      	ldr	r3, [pc, #16]	; (8015218 <_sbrk+0x14>)
 8015206:	6819      	ldr	r1, [r3, #0]
 8015208:	4602      	mov	r2, r0
 801520a:	b909      	cbnz	r1, 8015210 <_sbrk+0xc>
 801520c:	4903      	ldr	r1, [pc, #12]	; (801521c <_sbrk+0x18>)
 801520e:	6019      	str	r1, [r3, #0]
 8015210:	6818      	ldr	r0, [r3, #0]
 8015212:	4402      	add	r2, r0
 8015214:	601a      	str	r2, [r3, #0]
 8015216:	4770      	bx	lr
 8015218:	20000790 	.word	0x20000790
 801521c:	20004ab0 	.word	0x20004ab0

08015220 <_init>:
 8015220:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015222:	bf00      	nop
 8015224:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8015226:	bc08      	pop	{r3}
 8015228:	469e      	mov	lr, r3
 801522a:	4770      	bx	lr

0801522c <_fini>:
 801522c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801522e:	bf00      	nop
 8015230:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8015232:	bc08      	pop	{r3}
 8015234:	469e      	mov	lr, r3
 8015236:	4770      	bx	lr
