
Satellite2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000116bc  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000a78  08011850  08011850  00021850  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080122c8  080122c8  00030354  2**0
                  CONTENTS
  4 .ARM          00000008  080122c8  080122c8  000222c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080122d0  080122d0  00030354  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080122d0  080122d0  000222d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080122d4  080122d4  000222d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000354  20000000  080122d8  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000291c  20000354  0801262c  00030354  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002c70  0801262c  00032c70  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030354  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002923e  00000000  00000000  00030384  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00005007  00000000  00000000  000595c2  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001f00  00000000  00000000  0005e5d0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001cd8  00000000  00000000  000604d0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00007916  00000000  00000000  000621a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001dfe9  00000000  00000000  00069abe  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d443d  00000000  00000000  00087aa7  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0015bee4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008fa8  00000000  00000000  0015bf60  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000354 	.word	0x20000354
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08011834 	.word	0x08011834

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000358 	.word	0x20000358
 80001cc:	08011834 	.word	0x08011834

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003be:	f1a4 0401 	sub.w	r4, r4, #1
 80003c2:	d1e9      	bne.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b972 	b.w	8000f84 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9e08      	ldr	r6, [sp, #32]
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	4688      	mov	r8, r1
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d14b      	bne.n	8000d5e <__udivmoddi4+0xa6>
 8000cc6:	428a      	cmp	r2, r1
 8000cc8:	4615      	mov	r5, r2
 8000cca:	d967      	bls.n	8000d9c <__udivmoddi4+0xe4>
 8000ccc:	fab2 f282 	clz	r2, r2
 8000cd0:	b14a      	cbz	r2, 8000ce6 <__udivmoddi4+0x2e>
 8000cd2:	f1c2 0720 	rsb	r7, r2, #32
 8000cd6:	fa01 f302 	lsl.w	r3, r1, r2
 8000cda:	fa20 f707 	lsr.w	r7, r0, r7
 8000cde:	4095      	lsls	r5, r2
 8000ce0:	ea47 0803 	orr.w	r8, r7, r3
 8000ce4:	4094      	lsls	r4, r2
 8000ce6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000cea:	0c23      	lsrs	r3, r4, #16
 8000cec:	fbb8 f7fe 	udiv	r7, r8, lr
 8000cf0:	fa1f fc85 	uxth.w	ip, r5
 8000cf4:	fb0e 8817 	mls	r8, lr, r7, r8
 8000cf8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cfc:	fb07 f10c 	mul.w	r1, r7, ip
 8000d00:	4299      	cmp	r1, r3
 8000d02:	d909      	bls.n	8000d18 <__udivmoddi4+0x60>
 8000d04:	18eb      	adds	r3, r5, r3
 8000d06:	f107 30ff 	add.w	r0, r7, #4294967295
 8000d0a:	f080 811b 	bcs.w	8000f44 <__udivmoddi4+0x28c>
 8000d0e:	4299      	cmp	r1, r3
 8000d10:	f240 8118 	bls.w	8000f44 <__udivmoddi4+0x28c>
 8000d14:	3f02      	subs	r7, #2
 8000d16:	442b      	add	r3, r5
 8000d18:	1a5b      	subs	r3, r3, r1
 8000d1a:	b2a4      	uxth	r4, r4
 8000d1c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d20:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d24:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d28:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d2c:	45a4      	cmp	ip, r4
 8000d2e:	d909      	bls.n	8000d44 <__udivmoddi4+0x8c>
 8000d30:	192c      	adds	r4, r5, r4
 8000d32:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d36:	f080 8107 	bcs.w	8000f48 <__udivmoddi4+0x290>
 8000d3a:	45a4      	cmp	ip, r4
 8000d3c:	f240 8104 	bls.w	8000f48 <__udivmoddi4+0x290>
 8000d40:	3802      	subs	r0, #2
 8000d42:	442c      	add	r4, r5
 8000d44:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d48:	eba4 040c 	sub.w	r4, r4, ip
 8000d4c:	2700      	movs	r7, #0
 8000d4e:	b11e      	cbz	r6, 8000d58 <__udivmoddi4+0xa0>
 8000d50:	40d4      	lsrs	r4, r2
 8000d52:	2300      	movs	r3, #0
 8000d54:	e9c6 4300 	strd	r4, r3, [r6]
 8000d58:	4639      	mov	r1, r7
 8000d5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d5e:	428b      	cmp	r3, r1
 8000d60:	d909      	bls.n	8000d76 <__udivmoddi4+0xbe>
 8000d62:	2e00      	cmp	r6, #0
 8000d64:	f000 80eb 	beq.w	8000f3e <__udivmoddi4+0x286>
 8000d68:	2700      	movs	r7, #0
 8000d6a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d6e:	4638      	mov	r0, r7
 8000d70:	4639      	mov	r1, r7
 8000d72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d76:	fab3 f783 	clz	r7, r3
 8000d7a:	2f00      	cmp	r7, #0
 8000d7c:	d147      	bne.n	8000e0e <__udivmoddi4+0x156>
 8000d7e:	428b      	cmp	r3, r1
 8000d80:	d302      	bcc.n	8000d88 <__udivmoddi4+0xd0>
 8000d82:	4282      	cmp	r2, r0
 8000d84:	f200 80fa 	bhi.w	8000f7c <__udivmoddi4+0x2c4>
 8000d88:	1a84      	subs	r4, r0, r2
 8000d8a:	eb61 0303 	sbc.w	r3, r1, r3
 8000d8e:	2001      	movs	r0, #1
 8000d90:	4698      	mov	r8, r3
 8000d92:	2e00      	cmp	r6, #0
 8000d94:	d0e0      	beq.n	8000d58 <__udivmoddi4+0xa0>
 8000d96:	e9c6 4800 	strd	r4, r8, [r6]
 8000d9a:	e7dd      	b.n	8000d58 <__udivmoddi4+0xa0>
 8000d9c:	b902      	cbnz	r2, 8000da0 <__udivmoddi4+0xe8>
 8000d9e:	deff      	udf	#255	; 0xff
 8000da0:	fab2 f282 	clz	r2, r2
 8000da4:	2a00      	cmp	r2, #0
 8000da6:	f040 808f 	bne.w	8000ec8 <__udivmoddi4+0x210>
 8000daa:	1b49      	subs	r1, r1, r5
 8000dac:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000db0:	fa1f f885 	uxth.w	r8, r5
 8000db4:	2701      	movs	r7, #1
 8000db6:	fbb1 fcfe 	udiv	ip, r1, lr
 8000dba:	0c23      	lsrs	r3, r4, #16
 8000dbc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000dc0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dc4:	fb08 f10c 	mul.w	r1, r8, ip
 8000dc8:	4299      	cmp	r1, r3
 8000dca:	d907      	bls.n	8000ddc <__udivmoddi4+0x124>
 8000dcc:	18eb      	adds	r3, r5, r3
 8000dce:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000dd2:	d202      	bcs.n	8000dda <__udivmoddi4+0x122>
 8000dd4:	4299      	cmp	r1, r3
 8000dd6:	f200 80cd 	bhi.w	8000f74 <__udivmoddi4+0x2bc>
 8000dda:	4684      	mov	ip, r0
 8000ddc:	1a59      	subs	r1, r3, r1
 8000dde:	b2a3      	uxth	r3, r4
 8000de0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000de4:	fb0e 1410 	mls	r4, lr, r0, r1
 8000de8:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000dec:	fb08 f800 	mul.w	r8, r8, r0
 8000df0:	45a0      	cmp	r8, r4
 8000df2:	d907      	bls.n	8000e04 <__udivmoddi4+0x14c>
 8000df4:	192c      	adds	r4, r5, r4
 8000df6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dfa:	d202      	bcs.n	8000e02 <__udivmoddi4+0x14a>
 8000dfc:	45a0      	cmp	r8, r4
 8000dfe:	f200 80b6 	bhi.w	8000f6e <__udivmoddi4+0x2b6>
 8000e02:	4618      	mov	r0, r3
 8000e04:	eba4 0408 	sub.w	r4, r4, r8
 8000e08:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e0c:	e79f      	b.n	8000d4e <__udivmoddi4+0x96>
 8000e0e:	f1c7 0c20 	rsb	ip, r7, #32
 8000e12:	40bb      	lsls	r3, r7
 8000e14:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000e18:	ea4e 0e03 	orr.w	lr, lr, r3
 8000e1c:	fa01 f407 	lsl.w	r4, r1, r7
 8000e20:	fa20 f50c 	lsr.w	r5, r0, ip
 8000e24:	fa21 f30c 	lsr.w	r3, r1, ip
 8000e28:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000e2c:	4325      	orrs	r5, r4
 8000e2e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000e32:	0c2c      	lsrs	r4, r5, #16
 8000e34:	fb08 3319 	mls	r3, r8, r9, r3
 8000e38:	fa1f fa8e 	uxth.w	sl, lr
 8000e3c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e40:	fb09 f40a 	mul.w	r4, r9, sl
 8000e44:	429c      	cmp	r4, r3
 8000e46:	fa02 f207 	lsl.w	r2, r2, r7
 8000e4a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e4e:	d90b      	bls.n	8000e68 <__udivmoddi4+0x1b0>
 8000e50:	eb1e 0303 	adds.w	r3, lr, r3
 8000e54:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e58:	f080 8087 	bcs.w	8000f6a <__udivmoddi4+0x2b2>
 8000e5c:	429c      	cmp	r4, r3
 8000e5e:	f240 8084 	bls.w	8000f6a <__udivmoddi4+0x2b2>
 8000e62:	f1a9 0902 	sub.w	r9, r9, #2
 8000e66:	4473      	add	r3, lr
 8000e68:	1b1b      	subs	r3, r3, r4
 8000e6a:	b2ad      	uxth	r5, r5
 8000e6c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e70:	fb08 3310 	mls	r3, r8, r0, r3
 8000e74:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000e78:	fb00 fa0a 	mul.w	sl, r0, sl
 8000e7c:	45a2      	cmp	sl, r4
 8000e7e:	d908      	bls.n	8000e92 <__udivmoddi4+0x1da>
 8000e80:	eb1e 0404 	adds.w	r4, lr, r4
 8000e84:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e88:	d26b      	bcs.n	8000f62 <__udivmoddi4+0x2aa>
 8000e8a:	45a2      	cmp	sl, r4
 8000e8c:	d969      	bls.n	8000f62 <__udivmoddi4+0x2aa>
 8000e8e:	3802      	subs	r0, #2
 8000e90:	4474      	add	r4, lr
 8000e92:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e96:	fba0 8902 	umull	r8, r9, r0, r2
 8000e9a:	eba4 040a 	sub.w	r4, r4, sl
 8000e9e:	454c      	cmp	r4, r9
 8000ea0:	46c2      	mov	sl, r8
 8000ea2:	464b      	mov	r3, r9
 8000ea4:	d354      	bcc.n	8000f50 <__udivmoddi4+0x298>
 8000ea6:	d051      	beq.n	8000f4c <__udivmoddi4+0x294>
 8000ea8:	2e00      	cmp	r6, #0
 8000eaa:	d069      	beq.n	8000f80 <__udivmoddi4+0x2c8>
 8000eac:	ebb1 050a 	subs.w	r5, r1, sl
 8000eb0:	eb64 0403 	sbc.w	r4, r4, r3
 8000eb4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000eb8:	40fd      	lsrs	r5, r7
 8000eba:	40fc      	lsrs	r4, r7
 8000ebc:	ea4c 0505 	orr.w	r5, ip, r5
 8000ec0:	e9c6 5400 	strd	r5, r4, [r6]
 8000ec4:	2700      	movs	r7, #0
 8000ec6:	e747      	b.n	8000d58 <__udivmoddi4+0xa0>
 8000ec8:	f1c2 0320 	rsb	r3, r2, #32
 8000ecc:	fa20 f703 	lsr.w	r7, r0, r3
 8000ed0:	4095      	lsls	r5, r2
 8000ed2:	fa01 f002 	lsl.w	r0, r1, r2
 8000ed6:	fa21 f303 	lsr.w	r3, r1, r3
 8000eda:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000ede:	4338      	orrs	r0, r7
 8000ee0:	0c01      	lsrs	r1, r0, #16
 8000ee2:	fbb3 f7fe 	udiv	r7, r3, lr
 8000ee6:	fa1f f885 	uxth.w	r8, r5
 8000eea:	fb0e 3317 	mls	r3, lr, r7, r3
 8000eee:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ef2:	fb07 f308 	mul.w	r3, r7, r8
 8000ef6:	428b      	cmp	r3, r1
 8000ef8:	fa04 f402 	lsl.w	r4, r4, r2
 8000efc:	d907      	bls.n	8000f0e <__udivmoddi4+0x256>
 8000efe:	1869      	adds	r1, r5, r1
 8000f00:	f107 3cff 	add.w	ip, r7, #4294967295
 8000f04:	d22f      	bcs.n	8000f66 <__udivmoddi4+0x2ae>
 8000f06:	428b      	cmp	r3, r1
 8000f08:	d92d      	bls.n	8000f66 <__udivmoddi4+0x2ae>
 8000f0a:	3f02      	subs	r7, #2
 8000f0c:	4429      	add	r1, r5
 8000f0e:	1acb      	subs	r3, r1, r3
 8000f10:	b281      	uxth	r1, r0
 8000f12:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f16:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f1a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f1e:	fb00 f308 	mul.w	r3, r0, r8
 8000f22:	428b      	cmp	r3, r1
 8000f24:	d907      	bls.n	8000f36 <__udivmoddi4+0x27e>
 8000f26:	1869      	adds	r1, r5, r1
 8000f28:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f2c:	d217      	bcs.n	8000f5e <__udivmoddi4+0x2a6>
 8000f2e:	428b      	cmp	r3, r1
 8000f30:	d915      	bls.n	8000f5e <__udivmoddi4+0x2a6>
 8000f32:	3802      	subs	r0, #2
 8000f34:	4429      	add	r1, r5
 8000f36:	1ac9      	subs	r1, r1, r3
 8000f38:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000f3c:	e73b      	b.n	8000db6 <__udivmoddi4+0xfe>
 8000f3e:	4637      	mov	r7, r6
 8000f40:	4630      	mov	r0, r6
 8000f42:	e709      	b.n	8000d58 <__udivmoddi4+0xa0>
 8000f44:	4607      	mov	r7, r0
 8000f46:	e6e7      	b.n	8000d18 <__udivmoddi4+0x60>
 8000f48:	4618      	mov	r0, r3
 8000f4a:	e6fb      	b.n	8000d44 <__udivmoddi4+0x8c>
 8000f4c:	4541      	cmp	r1, r8
 8000f4e:	d2ab      	bcs.n	8000ea8 <__udivmoddi4+0x1f0>
 8000f50:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f54:	eb69 020e 	sbc.w	r2, r9, lr
 8000f58:	3801      	subs	r0, #1
 8000f5a:	4613      	mov	r3, r2
 8000f5c:	e7a4      	b.n	8000ea8 <__udivmoddi4+0x1f0>
 8000f5e:	4660      	mov	r0, ip
 8000f60:	e7e9      	b.n	8000f36 <__udivmoddi4+0x27e>
 8000f62:	4618      	mov	r0, r3
 8000f64:	e795      	b.n	8000e92 <__udivmoddi4+0x1da>
 8000f66:	4667      	mov	r7, ip
 8000f68:	e7d1      	b.n	8000f0e <__udivmoddi4+0x256>
 8000f6a:	4681      	mov	r9, r0
 8000f6c:	e77c      	b.n	8000e68 <__udivmoddi4+0x1b0>
 8000f6e:	3802      	subs	r0, #2
 8000f70:	442c      	add	r4, r5
 8000f72:	e747      	b.n	8000e04 <__udivmoddi4+0x14c>
 8000f74:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f78:	442b      	add	r3, r5
 8000f7a:	e72f      	b.n	8000ddc <__udivmoddi4+0x124>
 8000f7c:	4638      	mov	r0, r7
 8000f7e:	e708      	b.n	8000d92 <__udivmoddi4+0xda>
 8000f80:	4637      	mov	r7, r6
 8000f82:	e6e9      	b.n	8000d58 <__udivmoddi4+0xa0>

08000f84 <__aeabi_idiv0>:
 8000f84:	4770      	bx	lr
 8000f86:	bf00      	nop

08000f88 <println>:
static inline void print(char* str)
{
	while (CDC_Transmit_FS((uint8_t*) str, strlen(str)) == USBD_BUSY);
};
static inline void println(char* str)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b084      	sub	sp, #16
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	6078      	str	r0, [r7, #4]
	printLen = strlen(str);
 8000f90:	6878      	ldr	r0, [r7, #4]
 8000f92:	f7ff f91d 	bl	80001d0 <strlen>
 8000f96:	4602      	mov	r2, r0
 8000f98:	4b1a      	ldr	r3, [pc, #104]	; (8001004 <println+0x7c>)
 8000f9a:	601a      	str	r2, [r3, #0]
	uint8_t i;
	for (i = 0; i < printLen; i++)
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	73fb      	strb	r3, [r7, #15]
 8000fa0:	e009      	b.n	8000fb6 <println+0x2e>
	{
		printBuffer[i] = str[i];
 8000fa2:	7bfb      	ldrb	r3, [r7, #15]
 8000fa4:	687a      	ldr	r2, [r7, #4]
 8000fa6:	441a      	add	r2, r3
 8000fa8:	7bfb      	ldrb	r3, [r7, #15]
 8000faa:	7811      	ldrb	r1, [r2, #0]
 8000fac:	4a16      	ldr	r2, [pc, #88]	; (8001008 <println+0x80>)
 8000fae:	54d1      	strb	r1, [r2, r3]
	for (i = 0; i < printLen; i++)
 8000fb0:	7bfb      	ldrb	r3, [r7, #15]
 8000fb2:	3301      	adds	r3, #1
 8000fb4:	73fb      	strb	r3, [r7, #15]
 8000fb6:	7bfa      	ldrb	r2, [r7, #15]
 8000fb8:	4b12      	ldr	r3, [pc, #72]	; (8001004 <println+0x7c>)
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	429a      	cmp	r2, r3
 8000fbe:	d3f0      	bcc.n	8000fa2 <println+0x1a>
	}
	printBuffer[printLen] = '\n';
 8000fc0:	4b10      	ldr	r3, [pc, #64]	; (8001004 <println+0x7c>)
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	4a10      	ldr	r2, [pc, #64]	; (8001008 <println+0x80>)
 8000fc6:	210a      	movs	r1, #10
 8000fc8:	54d1      	strb	r1, [r2, r3]
	printBuffer[printLen + 1] = '\r';
 8000fca:	4b0e      	ldr	r3, [pc, #56]	; (8001004 <println+0x7c>)
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	3301      	adds	r3, #1
 8000fd0:	4a0d      	ldr	r2, [pc, #52]	; (8001008 <println+0x80>)
 8000fd2:	210d      	movs	r1, #13
 8000fd4:	54d1      	strb	r1, [r2, r3]
	printBuffer[printLen + 2] = '\0';
 8000fd6:	4b0b      	ldr	r3, [pc, #44]	; (8001004 <println+0x7c>)
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	3302      	adds	r3, #2
 8000fdc:	4a0a      	ldr	r2, [pc, #40]	; (8001008 <println+0x80>)
 8000fde:	2100      	movs	r1, #0
 8000fe0:	54d1      	strb	r1, [r2, r3]
 	while (CDC_Transmit_FS((uint8_t*) printBuffer, printLen + 3) == USBD_BUSY);
 8000fe2:	bf00      	nop
 8000fe4:	4b07      	ldr	r3, [pc, #28]	; (8001004 <println+0x7c>)
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	b29b      	uxth	r3, r3
 8000fea:	3303      	adds	r3, #3
 8000fec:	b29b      	uxth	r3, r3
 8000fee:	4619      	mov	r1, r3
 8000ff0:	4805      	ldr	r0, [pc, #20]	; (8001008 <println+0x80>)
 8000ff2:	f00c fa6f 	bl	800d4d4 <CDC_Transmit_FS>
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	2b01      	cmp	r3, #1
 8000ffa:	d0f3      	beq.n	8000fe4 <println+0x5c>
};
 8000ffc:	bf00      	nop
 8000ffe:	3710      	adds	r7, #16
 8001000:	46bd      	mov	sp, r7
 8001002:	bd80      	pop	{r7, pc}
 8001004:	20000370 	.word	0x20000370
 8001008:	20000374 	.word	0x20000374

0800100c <printv>:
static inline void printv(char* str, uint32_t len)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	b082      	sub	sp, #8
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]
 8001014:	6039      	str	r1, [r7, #0]
	while (CDC_Transmit_FS((uint8_t*) str, len) == USBD_BUSY);
 8001016:	bf00      	nop
 8001018:	683b      	ldr	r3, [r7, #0]
 800101a:	b29b      	uxth	r3, r3
 800101c:	4619      	mov	r1, r3
 800101e:	6878      	ldr	r0, [r7, #4]
 8001020:	f00c fa58 	bl	800d4d4 <CDC_Transmit_FS>
 8001024:	4603      	mov	r3, r0
 8001026:	2b01      	cmp	r3, #1
 8001028:	d0f6      	beq.n	8001018 <printv+0xc>
}
 800102a:	bf00      	nop
 800102c:	3708      	adds	r7, #8
 800102e:	46bd      	mov	sp, r7
 8001030:	bd80      	pop	{r7, pc}

08001032 <SX1278_write>:
//#### SPI communication with SX1278 ####
uint64_t frf = 0;
uint8_t frf_bytes[8] = {0};

void SX1278_write(SPI_HandleTypeDef* spi, uint8_t data)
{
 8001032:	b580      	push	{r7, lr}
 8001034:	b082      	sub	sp, #8
 8001036:	af00      	add	r7, sp, #0
 8001038:	6078      	str	r0, [r7, #4]
 800103a:	460b      	mov	r3, r1
 800103c:	70fb      	strb	r3, [r7, #3]
	// writes byte [data] on SPI bus
	HAL_SPI_Transmit(spi, &data, 1, 1000);
 800103e:	1cf9      	adds	r1, r7, #3
 8001040:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001044:	2201      	movs	r2, #1
 8001046:	6878      	ldr	r0, [r7, #4]
 8001048:	f006 fc58 	bl	80078fc <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(spi) != HAL_SPI_STATE_READY);
 800104c:	bf00      	nop
 800104e:	6878      	ldr	r0, [r7, #4]
 8001050:	f006 ff2a 	bl	8007ea8 <HAL_SPI_GetState>
 8001054:	4603      	mov	r3, r0
 8001056:	2b01      	cmp	r3, #1
 8001058:	d1f9      	bne.n	800104e <SX1278_write+0x1c>
}
 800105a:	bf00      	nop
 800105c:	3708      	adds	r7, #8
 800105e:	46bd      	mov	sp, r7
 8001060:	bd80      	pop	{r7, pc}

08001062 <SX1278_command>:
void SX1278_command(SX1278* inst, uint8_t addr, uint8_t cmd)
{
 8001062:	b580      	push	{r7, lr}
 8001064:	b082      	sub	sp, #8
 8001066:	af00      	add	r7, sp, #0
 8001068:	6078      	str	r0, [r7, #4]
 800106a:	460b      	mov	r3, r1
 800106c:	70fb      	strb	r3, [r7, #3]
 800106e:	4613      	mov	r3, r2
 8001070:	70bb      	strb	r3, [r7, #2]
	HAL_GPIO_WritePin(inst->nss_port, inst->nss, GPIO_PIN_RESET);
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	69d8      	ldr	r0, [r3, #28]
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	8a5b      	ldrh	r3, [r3, #18]
 800107a:	2200      	movs	r2, #0
 800107c:	4619      	mov	r1, r3
 800107e:	f002 fe43 	bl	8003d08 <HAL_GPIO_WritePin>

	SX1278_write(inst->spi, addr | 0x80);
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	6a1a      	ldr	r2, [r3, #32]
 8001086:	78fb      	ldrb	r3, [r7, #3]
 8001088:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800108c:	b2db      	uxtb	r3, r3
 800108e:	4619      	mov	r1, r3
 8001090:	4610      	mov	r0, r2
 8001092:	f7ff ffce 	bl	8001032 <SX1278_write>
	SX1278_write(inst->spi, cmd);
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	6a1b      	ldr	r3, [r3, #32]
 800109a:	78ba      	ldrb	r2, [r7, #2]
 800109c:	4611      	mov	r1, r2
 800109e:	4618      	mov	r0, r3
 80010a0:	f7ff ffc7 	bl	8001032 <SX1278_write>

	HAL_GPIO_WritePin(inst->nss_port, inst->nss, GPIO_PIN_SET);
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	69d8      	ldr	r0, [r3, #28]
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	8a5b      	ldrh	r3, [r3, #18]
 80010ac:	2201      	movs	r2, #1
 80010ae:	4619      	mov	r1, r3
 80010b0:	f002 fe2a 	bl	8003d08 <HAL_GPIO_WritePin>
}
 80010b4:	bf00      	nop
 80010b6:	3708      	adds	r7, #8
 80010b8:	46bd      	mov	sp, r7
 80010ba:	bd80      	pop	{r7, pc}

080010bc <SX1278_command_burst>:
void SX1278_command_burst(SX1278* inst, uint8_t addr, uint8_t* buff, uint8_t len)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	b086      	sub	sp, #24
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	60f8      	str	r0, [r7, #12]
 80010c4:	607a      	str	r2, [r7, #4]
 80010c6:	461a      	mov	r2, r3
 80010c8:	460b      	mov	r3, r1
 80010ca:	72fb      	strb	r3, [r7, #11]
 80010cc:	4613      	mov	r3, r2
 80010ce:	72bb      	strb	r3, [r7, #10]
	uint8_t i;

	if (len <= 1) return;
 80010d0:	7abb      	ldrb	r3, [r7, #10]
 80010d2:	2b01      	cmp	r3, #1
 80010d4:	d92d      	bls.n	8001132 <SX1278_command_burst+0x76>

	HAL_GPIO_WritePin(inst->nss_port, inst->nss, GPIO_PIN_RESET);
 80010d6:	68fb      	ldr	r3, [r7, #12]
 80010d8:	69d8      	ldr	r0, [r3, #28]
 80010da:	68fb      	ldr	r3, [r7, #12]
 80010dc:	8a5b      	ldrh	r3, [r3, #18]
 80010de:	2200      	movs	r2, #0
 80010e0:	4619      	mov	r1, r3
 80010e2:	f002 fe11 	bl	8003d08 <HAL_GPIO_WritePin>

	SX1278_write(inst->spi, addr | 0x80);
 80010e6:	68fb      	ldr	r3, [r7, #12]
 80010e8:	6a1a      	ldr	r2, [r3, #32]
 80010ea:	7afb      	ldrb	r3, [r7, #11]
 80010ec:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80010f0:	b2db      	uxtb	r3, r3
 80010f2:	4619      	mov	r1, r3
 80010f4:	4610      	mov	r0, r2
 80010f6:	f7ff ff9c 	bl	8001032 <SX1278_write>
	for (i = 0; i < len; i++)
 80010fa:	2300      	movs	r3, #0
 80010fc:	75fb      	strb	r3, [r7, #23]
 80010fe:	e00b      	b.n	8001118 <SX1278_command_burst+0x5c>
	{
		SX1278_write(inst->spi, *(buff + i));	//explanation: *(buff + i) = buff[i]
 8001100:	68fb      	ldr	r3, [r7, #12]
 8001102:	6a18      	ldr	r0, [r3, #32]
 8001104:	7dfb      	ldrb	r3, [r7, #23]
 8001106:	687a      	ldr	r2, [r7, #4]
 8001108:	4413      	add	r3, r2
 800110a:	781b      	ldrb	r3, [r3, #0]
 800110c:	4619      	mov	r1, r3
 800110e:	f7ff ff90 	bl	8001032 <SX1278_write>
	for (i = 0; i < len; i++)
 8001112:	7dfb      	ldrb	r3, [r7, #23]
 8001114:	3301      	adds	r3, #1
 8001116:	75fb      	strb	r3, [r7, #23]
 8001118:	7dfa      	ldrb	r2, [r7, #23]
 800111a:	7abb      	ldrb	r3, [r7, #10]
 800111c:	429a      	cmp	r2, r3
 800111e:	d3ef      	bcc.n	8001100 <SX1278_command_burst+0x44>
	}

	HAL_GPIO_WritePin(inst->nss_port, inst->nss, GPIO_PIN_SET);
 8001120:	68fb      	ldr	r3, [r7, #12]
 8001122:	69d8      	ldr	r0, [r3, #28]
 8001124:	68fb      	ldr	r3, [r7, #12]
 8001126:	8a5b      	ldrh	r3, [r3, #18]
 8001128:	2201      	movs	r2, #1
 800112a:	4619      	mov	r1, r3
 800112c:	f002 fdec 	bl	8003d08 <HAL_GPIO_WritePin>
 8001130:	e000      	b.n	8001134 <SX1278_command_burst+0x78>
	if (len <= 1) return;
 8001132:	bf00      	nop
}
 8001134:	3718      	adds	r7, #24
 8001136:	46bd      	mov	sp, r7
 8001138:	bd80      	pop	{r7, pc}

0800113a <SX1278_read>:

uint8_t SX1278_read(SPI_HandleTypeDef* spi)
{
 800113a:	b580      	push	{r7, lr}
 800113c:	b086      	sub	sp, #24
 800113e:	af02      	add	r7, sp, #8
 8001140:	6078      	str	r0, [r7, #4]
	// reads byte from SPI bus
	uint8_t txByte = 0x00;
 8001142:	2300      	movs	r3, #0
 8001144:	73fb      	strb	r3, [r7, #15]
	uint8_t rxByte = 0x00;
 8001146:	2300      	movs	r3, #0
 8001148:	73bb      	strb	r3, [r7, #14]

	HAL_SPI_TransmitReceive(spi, &txByte, &rxByte, 1, 1000);
 800114a:	f107 020e 	add.w	r2, r7, #14
 800114e:	f107 010f 	add.w	r1, r7, #15
 8001152:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001156:	9300      	str	r3, [sp, #0]
 8001158:	2301      	movs	r3, #1
 800115a:	6878      	ldr	r0, [r7, #4]
 800115c:	f006 fd02 	bl	8007b64 <HAL_SPI_TransmitReceive>
	while (HAL_SPI_GetState(spi) != HAL_SPI_STATE_READY);
 8001160:	bf00      	nop
 8001162:	6878      	ldr	r0, [r7, #4]
 8001164:	f006 fea0 	bl	8007ea8 <HAL_SPI_GetState>
 8001168:	4603      	mov	r3, r0
 800116a:	2b01      	cmp	r3, #1
 800116c:	d1f9      	bne.n	8001162 <SX1278_read+0x28>

	return rxByte;
 800116e:	7bbb      	ldrb	r3, [r7, #14]
}
 8001170:	4618      	mov	r0, r3
 8001172:	3710      	adds	r7, #16
 8001174:	46bd      	mov	sp, r7
 8001176:	bd80      	pop	{r7, pc}

08001178 <SX1278_read_address>:
uint8_t SX1278_read_address(SX1278* inst, uint8_t addr)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	b084      	sub	sp, #16
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]
 8001180:	460b      	mov	r3, r1
 8001182:	70fb      	strb	r3, [r7, #3]
	uint8_t recv;

	HAL_GPIO_WritePin(inst->nss_port, inst->nss, GPIO_PIN_RESET);
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	69d8      	ldr	r0, [r3, #28]
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	8a5b      	ldrh	r3, [r3, #18]
 800118c:	2200      	movs	r2, #0
 800118e:	4619      	mov	r1, r3
 8001190:	f002 fdba 	bl	8003d08 <HAL_GPIO_WritePin>

	SX1278_write(inst->spi, addr);
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	6a1b      	ldr	r3, [r3, #32]
 8001198:	78fa      	ldrb	r2, [r7, #3]
 800119a:	4611      	mov	r1, r2
 800119c:	4618      	mov	r0, r3
 800119e:	f7ff ff48 	bl	8001032 <SX1278_write>
	recv = SX1278_read(inst->spi);
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	6a1b      	ldr	r3, [r3, #32]
 80011a6:	4618      	mov	r0, r3
 80011a8:	f7ff ffc7 	bl	800113a <SX1278_read>
 80011ac:	4603      	mov	r3, r0
 80011ae:	73fb      	strb	r3, [r7, #15]

	HAL_GPIO_WritePin(inst->nss_port, inst->nss, GPIO_PIN_SET);
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	69d8      	ldr	r0, [r3, #28]
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	8a5b      	ldrh	r3, [r3, #18]
 80011b8:	2201      	movs	r2, #1
 80011ba:	4619      	mov	r1, r3
 80011bc:	f002 fda4 	bl	8003d08 <HAL_GPIO_WritePin>

	return recv;
 80011c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80011c2:	4618      	mov	r0, r3
 80011c4:	3710      	adds	r7, #16
 80011c6:	46bd      	mov	sp, r7
 80011c8:	bd80      	pop	{r7, pc}

080011ca <SX1278_read_burst>:
void SX1278_read_burst(SX1278* inst, uint8_t addr, uint8_t* buff, uint8_t len)
{
 80011ca:	b590      	push	{r4, r7, lr}
 80011cc:	b087      	sub	sp, #28
 80011ce:	af00      	add	r7, sp, #0
 80011d0:	60f8      	str	r0, [r7, #12]
 80011d2:	607a      	str	r2, [r7, #4]
 80011d4:	461a      	mov	r2, r3
 80011d6:	460b      	mov	r3, r1
 80011d8:	72fb      	strb	r3, [r7, #11]
 80011da:	4613      	mov	r3, r2
 80011dc:	72bb      	strb	r3, [r7, #10]
	uint8_t i;

	if (len <= 1) return;
 80011de:	7abb      	ldrb	r3, [r7, #10]
 80011e0:	2b01      	cmp	r3, #1
 80011e2:	d92b      	bls.n	800123c <SX1278_read_burst+0x72>

	HAL_GPIO_WritePin(inst->nss_port, inst->nss, GPIO_PIN_RESET);
 80011e4:	68fb      	ldr	r3, [r7, #12]
 80011e6:	69d8      	ldr	r0, [r3, #28]
 80011e8:	68fb      	ldr	r3, [r7, #12]
 80011ea:	8a5b      	ldrh	r3, [r3, #18]
 80011ec:	2200      	movs	r2, #0
 80011ee:	4619      	mov	r1, r3
 80011f0:	f002 fd8a 	bl	8003d08 <HAL_GPIO_WritePin>

	SX1278_write(inst->spi, addr);
 80011f4:	68fb      	ldr	r3, [r7, #12]
 80011f6:	6a1b      	ldr	r3, [r3, #32]
 80011f8:	7afa      	ldrb	r2, [r7, #11]
 80011fa:	4611      	mov	r1, r2
 80011fc:	4618      	mov	r0, r3
 80011fe:	f7ff ff18 	bl	8001032 <SX1278_write>
	for (i = 0; i < len; i++)
 8001202:	2300      	movs	r3, #0
 8001204:	75fb      	strb	r3, [r7, #23]
 8001206:	e00c      	b.n	8001222 <SX1278_read_burst+0x58>
	{
		*(buff + i) = SX1278_read(inst->spi);	//explanation: *(buff + i) = buff[i]
 8001208:	68fb      	ldr	r3, [r7, #12]
 800120a:	6a19      	ldr	r1, [r3, #32]
 800120c:	7dfb      	ldrb	r3, [r7, #23]
 800120e:	687a      	ldr	r2, [r7, #4]
 8001210:	18d4      	adds	r4, r2, r3
 8001212:	4608      	mov	r0, r1
 8001214:	f7ff ff91 	bl	800113a <SX1278_read>
 8001218:	4603      	mov	r3, r0
 800121a:	7023      	strb	r3, [r4, #0]
	for (i = 0; i < len; i++)
 800121c:	7dfb      	ldrb	r3, [r7, #23]
 800121e:	3301      	adds	r3, #1
 8001220:	75fb      	strb	r3, [r7, #23]
 8001222:	7dfa      	ldrb	r2, [r7, #23]
 8001224:	7abb      	ldrb	r3, [r7, #10]
 8001226:	429a      	cmp	r2, r3
 8001228:	d3ee      	bcc.n	8001208 <SX1278_read_burst+0x3e>
	}

	HAL_GPIO_WritePin(inst->nss_port, inst->nss, GPIO_PIN_SET);
 800122a:	68fb      	ldr	r3, [r7, #12]
 800122c:	69d8      	ldr	r0, [r3, #28]
 800122e:	68fb      	ldr	r3, [r7, #12]
 8001230:	8a5b      	ldrh	r3, [r3, #18]
 8001232:	2201      	movs	r2, #1
 8001234:	4619      	mov	r1, r3
 8001236:	f002 fd67 	bl	8003d08 <HAL_GPIO_WritePin>
 800123a:	e000      	b.n	800123e <SX1278_read_burst+0x74>
	if (len <= 1) return;
 800123c:	bf00      	nop
}
 800123e:	371c      	adds	r7, #28
 8001240:	46bd      	mov	sp, r7
 8001242:	bd90      	pop	{r4, r7, pc}

08001244 <SX1278_transmit>:

	return true;
}

bool SX1278_transmit(SX1278* inst, uint8_t* txBuffer, uint8_t length)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	b084      	sub	sp, #16
 8001248:	af00      	add	r7, sp, #0
 800124a:	60f8      	str	r0, [r7, #12]
 800124c:	60b9      	str	r1, [r7, #8]
 800124e:	4613      	mov	r3, r2
 8001250:	71fb      	strb	r3, [r7, #7]
	// check if the module is ready for the transmission
	if (inst->mode == STANDBY)
 8001252:	68fb      	ldr	r3, [r7, #12]
 8001254:	7b1b      	ldrb	r3, [r3, #12]
 8001256:	2b01      	cmp	r3, #1
 8001258:	d130      	bne.n	80012bc <SX1278_transmit+0x78>
	{
		println("[LoRa] Starting transmission...");
 800125a:	481c      	ldr	r0, [pc, #112]	; (80012cc <SX1278_transmit+0x88>)
 800125c:	f7ff fe94 	bl	8000f88 <println>
		SX1278_tx_mode(inst);
 8001260:	68f8      	ldr	r0, [r7, #12]
 8001262:	f000 f979 	bl	8001558 <SX1278_tx_mode>
		SX1278_tx_input(inst, txBuffer, length);
 8001266:	79fb      	ldrb	r3, [r7, #7]
 8001268:	461a      	mov	r2, r3
 800126a:	68b9      	ldr	r1, [r7, #8]
 800126c:	68f8      	ldr	r0, [r7, #12]
 800126e:	f000 f873 	bl	8001358 <SX1278_tx_input>
		SX1278_tx_push(inst);
 8001272:	68f8      	ldr	r0, [r7, #12]
 8001274:	f000 f88b 	bl	800138e <SX1278_tx_push>

		if (inst->useDio0IRQ)
 8001278:	68fb      	ldr	r3, [r7, #12]
 800127a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800127e:	2b00      	cmp	r3, #0
 8001280:	d008      	beq.n	8001294 <SX1278_transmit+0x50>
		{
			//waiting for interrupt
			println("[LoRa] Transmission pushed! Waiting for an interrupt...");
 8001282:	4813      	ldr	r0, [pc, #76]	; (80012d0 <SX1278_transmit+0x8c>)
 8001284:	f7ff fe80 	bl	8000f88 <println>
			inst->pendingIRQ = true;
 8001288:	68fb      	ldr	r3, [r7, #12]
 800128a:	2201      	movs	r2, #1
 800128c:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
			while (HAL_GPIO_ReadPin(inst->dio0_port, inst->dio0) == GPIO_PIN_RESET);

			return SX1278_tx_finish(inst);
		}

		return true;
 8001290:	2301      	movs	r3, #1
 8001292:	e017      	b.n	80012c4 <SX1278_transmit+0x80>
			println("[LoRa] Transmission pushed!");
 8001294:	480f      	ldr	r0, [pc, #60]	; (80012d4 <SX1278_transmit+0x90>)
 8001296:	f7ff fe77 	bl	8000f88 <println>
			while (HAL_GPIO_ReadPin(inst->dio0_port, inst->dio0) == GPIO_PIN_RESET);
 800129a:	bf00      	nop
 800129c:	68fb      	ldr	r3, [r7, #12]
 800129e:	699a      	ldr	r2, [r3, #24]
 80012a0:	68fb      	ldr	r3, [r7, #12]
 80012a2:	8a1b      	ldrh	r3, [r3, #16]
 80012a4:	4619      	mov	r1, r3
 80012a6:	4610      	mov	r0, r2
 80012a8:	f002 fd16 	bl	8003cd8 <HAL_GPIO_ReadPin>
 80012ac:	4603      	mov	r3, r0
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d0f4      	beq.n	800129c <SX1278_transmit+0x58>
			return SX1278_tx_finish(inst);
 80012b2:	68f8      	ldr	r0, [r7, #12]
 80012b4:	f000 f878 	bl	80013a8 <SX1278_tx_finish>
 80012b8:	4603      	mov	r3, r0
 80012ba:	e003      	b.n	80012c4 <SX1278_transmit+0x80>
	}
	else
	{
		println("[LoRa] Cannot transmit...standby");
 80012bc:	4806      	ldr	r0, [pc, #24]	; (80012d8 <SX1278_transmit+0x94>)
 80012be:	f7ff fe63 	bl	8000f88 <println>
		return false;
 80012c2:	2300      	movs	r3, #0
	}
}
 80012c4:	4618      	mov	r0, r3
 80012c6:	3710      	adds	r7, #16
 80012c8:	46bd      	mov	sp, r7
 80012ca:	bd80      	pop	{r7, pc}
 80012cc:	080118bc 	.word	0x080118bc
 80012d0:	080118dc 	.word	0x080118dc
 80012d4:	08011914 	.word	0x08011914
 80012d8:	08011930 	.word	0x08011930

080012dc <SX1278_receive>:

bool SX1278_receive(SX1278* inst)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	b082      	sub	sp, #8
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	6078      	str	r0, [r7, #4]
	// [!!] writes data to the inst->rxBuffer
	if (inst->mode == STANDBY)
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	7b1b      	ldrb	r3, [r3, #12]
 80012e8:	2b01      	cmp	r3, #1
 80012ea:	d126      	bne.n	800133a <SX1278_receive+0x5e>
	{
		println("[LoRa] Starting receiving...");
 80012ec:	4817      	ldr	r0, [pc, #92]	; (800134c <SX1278_receive+0x70>)
 80012ee:	f7ff fe4b 	bl	8000f88 <println>
		SX1278_rx_mode(inst);
 80012f2:	6878      	ldr	r0, [r7, #4]
 80012f4:	f000 f95e 	bl	80015b4 <SX1278_rx_mode>

		if (inst->useDio0IRQ)
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d008      	beq.n	8001314 <SX1278_receive+0x38>
		{
			//waiting for interrupt
			println("[LoRa] Receiver set! Waiting for an interrupt...");
 8001302:	4813      	ldr	r0, [pc, #76]	; (8001350 <SX1278_receive+0x74>)
 8001304:	f7ff fe40 	bl	8000f88 <println>
			inst->pendingIRQ = true;
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	2201      	movs	r2, #1
 800130c:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32

			SX1278_rx_get_packet(inst);
			return inst->newPacket;
		}

		return true;
 8001310:	2301      	movs	r3, #1
 8001312:	e016      	b.n	8001342 <SX1278_receive+0x66>
			while (HAL_GPIO_ReadPin(inst->dio0_port, inst->dio0) == GPIO_PIN_RESET);
 8001314:	bf00      	nop
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	699a      	ldr	r2, [r3, #24]
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	8a1b      	ldrh	r3, [r3, #16]
 800131e:	4619      	mov	r1, r3
 8001320:	4610      	mov	r0, r2
 8001322:	f002 fcd9 	bl	8003cd8 <HAL_GPIO_ReadPin>
 8001326:	4603      	mov	r3, r0
 8001328:	2b00      	cmp	r3, #0
 800132a:	d0f4      	beq.n	8001316 <SX1278_receive+0x3a>
			SX1278_rx_get_packet(inst);
 800132c:	6878      	ldr	r0, [r7, #4]
 800132e:	f000 f879 	bl	8001424 <SX1278_rx_get_packet>
			return inst->newPacket;
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001338:	e003      	b.n	8001342 <SX1278_receive+0x66>
	}
	else
	{
		println("[LoRa] Cannot receive...standby");
 800133a:	4806      	ldr	r0, [pc, #24]	; (8001354 <SX1278_receive+0x78>)
 800133c:	f7ff fe24 	bl	8000f88 <println>
		return false;
 8001340:	2300      	movs	r3, #0
	}
}
 8001342:	4618      	mov	r0, r3
 8001344:	3708      	adds	r7, #8
 8001346:	46bd      	mov	sp, r7
 8001348:	bd80      	pop	{r7, pc}
 800134a:	bf00      	nop
 800134c:	08011954 	.word	0x08011954
 8001350:	08011974 	.word	0x08011974
 8001354:	080119a8 	.word	0x080119a8

08001358 <SX1278_tx_input>:

//#### Data send / receive routines ####

void SX1278_tx_input(SX1278* inst, uint8_t* txBuffer, uint8_t length)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	b084      	sub	sp, #16
 800135c:	af00      	add	r7, sp, #0
 800135e:	60f8      	str	r0, [r7, #12]
 8001360:	60b9      	str	r1, [r7, #8]
 8001362:	4613      	mov	r3, r2
 8001364:	71fb      	strb	r3, [r7, #7]
	SX1278_command(inst, LR_RegPayloadLength, length);	//(this register must difine when the data long of one byte in SF is 6)
 8001366:	79fb      	ldrb	r3, [r7, #7]
 8001368:	461a      	mov	r2, r3
 800136a:	2122      	movs	r1, #34	; 0x22
 800136c:	68f8      	ldr	r0, [r7, #12]
 800136e:	f7ff fe78 	bl	8001062 <SX1278_command>
	SX1278_command_burst(inst, 0x00, txBuffer, length);
 8001372:	79fb      	ldrb	r3, [r7, #7]
 8001374:	68ba      	ldr	r2, [r7, #8]
 8001376:	2100      	movs	r1, #0
 8001378:	68f8      	ldr	r0, [r7, #12]
 800137a:	f7ff fe9f 	bl	80010bc <SX1278_command_burst>

	inst->txLen = length;
 800137e:	68fb      	ldr	r3, [r7, #12]
 8001380:	79fa      	ldrb	r2, [r7, #7]
 8001382:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
}
 8001386:	bf00      	nop
 8001388:	3710      	adds	r7, #16
 800138a:	46bd      	mov	sp, r7
 800138c:	bd80      	pop	{r7, pc}

0800138e <SX1278_tx_push>:
void SX1278_tx_push(SX1278* inst)
{
 800138e:	b580      	push	{r7, lr}
 8001390:	b082      	sub	sp, #8
 8001392:	af00      	add	r7, sp, #0
 8001394:	6078      	str	r0, [r7, #4]
	//set module to TX mode and transmit
	SX1278_command(inst, LR_RegOpMode, 0x8b);
 8001396:	228b      	movs	r2, #139	; 0x8b
 8001398:	2101      	movs	r1, #1
 800139a:	6878      	ldr	r0, [r7, #4]
 800139c:	f7ff fe61 	bl	8001062 <SX1278_command>
}
 80013a0:	bf00      	nop
 80013a2:	3708      	adds	r7, #8
 80013a4:	46bd      	mov	sp, r7
 80013a6:	bd80      	pop	{r7, pc}

080013a8 <SX1278_tx_finish>:
bool SX1278_tx_finish(SX1278* inst)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b082      	sub	sp, #8
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	6078      	str	r0, [r7, #4]
	inst->irqStatus = SX1278_read_address(inst, LR_RegIrqFlags);
 80013b0:	2112      	movs	r1, #18
 80013b2:	6878      	ldr	r0, [r7, #4]
 80013b4:	f7ff fee0 	bl	8001178 <SX1278_read_address>
 80013b8:	4603      	mov	r3, r0
 80013ba:	461a      	mov	r2, r3
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	inst->txDone = ((inst->irqStatus & IRQ_LR_TXDONE) > 0x00);
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80013c8:	f003 0308 	and.w	r3, r3, #8
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	bfcc      	ite	gt
 80013d0:	2301      	movgt	r3, #1
 80013d2:	2300      	movle	r3, #0
 80013d4:	b2da      	uxtb	r2, r3
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
	SX1278_clearLoRaIrq(inst);
 80013dc:	6878      	ldr	r0, [r7, #4]
 80013de:	f000 f99a 	bl	8001716 <SX1278_clearLoRaIrq>
	SX1278_standby(inst);
 80013e2:	6878      	ldr	r0, [r7, #4]
 80013e4:	f000 f91c 	bl	8001620 <SX1278_standby>

	printLen = sprintf(printBuffer, "[LoRa] Transmission finished! IRQ status: %d (<-should be 8)\r\n", inst->irqStatus);
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80013ee:	461a      	mov	r2, r3
 80013f0:	4909      	ldr	r1, [pc, #36]	; (8001418 <SX1278_tx_finish+0x70>)
 80013f2:	480a      	ldr	r0, [pc, #40]	; (800141c <SX1278_tx_finish+0x74>)
 80013f4:	f00d fbe6 	bl	800ebc4 <siprintf>
 80013f8:	4603      	mov	r3, r0
 80013fa:	461a      	mov	r2, r3
 80013fc:	4b08      	ldr	r3, [pc, #32]	; (8001420 <SX1278_tx_finish+0x78>)
 80013fe:	601a      	str	r2, [r3, #0]
	printv(printBuffer, printLen);
 8001400:	4b07      	ldr	r3, [pc, #28]	; (8001420 <SX1278_tx_finish+0x78>)
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	4619      	mov	r1, r3
 8001406:	4805      	ldr	r0, [pc, #20]	; (800141c <SX1278_tx_finish+0x74>)
 8001408:	f7ff fe00 	bl	800100c <printv>
	return true;
 800140c:	2301      	movs	r3, #1
}
 800140e:	4618      	mov	r0, r3
 8001410:	3708      	adds	r7, #8
 8001412:	46bd      	mov	sp, r7
 8001414:	bd80      	pop	{r7, pc}
 8001416:	bf00      	nop
 8001418:	080119c8 	.word	0x080119c8
 800141c:	20000374 	.word	0x20000374
 8001420:	20000370 	.word	0x20000370

08001424 <SX1278_rx_get_packet>:

bool SX1278_rx_get_packet(SX1278* inst)
{
 8001424:	b5b0      	push	{r4, r5, r7, lr}
 8001426:	b084      	sub	sp, #16
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]
	uint8_t addr;
	uint8_t packet_size;

	SX1278_update_IRQ_status(inst);
 800142c:	6878      	ldr	r0, [r7, #4]
 800142e:	f000 f93a 	bl	80016a6 <SX1278_update_IRQ_status>

	memset(inst->rxBuffer, 0x00, SX1278_MAX_PACKET);	//clear rxBuffer
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	3335      	adds	r3, #53	; 0x35
 8001436:	f44f 7280 	mov.w	r2, #256	; 0x100
 800143a:	2100      	movs	r1, #0
 800143c:	4618      	mov	r0, r3
 800143e:	f00c fcbc 	bl	800ddba <memset>

	addr = SX1278_read_address(inst, LR_RegFifoRxCurrentaddr);	//get last packet address
 8001442:	2110      	movs	r1, #16
 8001444:	6878      	ldr	r0, [r7, #4]
 8001446:	f7ff fe97 	bl	8001178 <SX1278_read_address>
 800144a:	4603      	mov	r3, r0
 800144c:	73bb      	strb	r3, [r7, #14]
	SX1278_command(inst, LR_RegFifoAddrPtr, addr);				//set fifo pointer to this address
 800144e:	7bbb      	ldrb	r3, [r7, #14]
 8001450:	461a      	mov	r2, r3
 8001452:	210d      	movs	r1, #13
 8001454:	6878      	ldr	r0, [r7, #4]
 8001456:	f7ff fe04 	bl	8001062 <SX1278_command>

	//When SpreadingFactor = 6, use Implicit Header mode (Excluding internal packet length)
	if (inst->config.spreadingFactor == SX1278_SF_6)
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	795b      	ldrb	r3, [r3, #5]
 800145e:	2b06      	cmp	r3, #6
 8001460:	d104      	bne.n	800146c <SX1278_rx_get_packet+0x48>
	{
		// ??? not sure what to put here
		packet_size = inst->txLen;
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 8001468:	73fb      	strb	r3, [r7, #15]
 800146a:	e005      	b.n	8001478 <SX1278_rx_get_packet+0x54>
	}
	else
	{
		packet_size = SX1278_read_address(inst, LR_RegRxNbBytes); //get the number of received bytes
 800146c:	2113      	movs	r1, #19
 800146e:	6878      	ldr	r0, [r7, #4]
 8001470:	f7ff fe82 	bl	8001178 <SX1278_read_address>
 8001474:	4603      	mov	r3, r0
 8001476:	73fb      	strb	r3, [r7, #15]
	}

	SX1278_read_burst(inst, 0x00, inst->rxBuffer, packet_size);
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	f103 0235 	add.w	r2, r3, #53	; 0x35
 800147e:	7bfb      	ldrb	r3, [r7, #15]
 8001480:	2100      	movs	r1, #0
 8001482:	6878      	ldr	r0, [r7, #4]
 8001484:	f7ff fea1 	bl	80011ca <SX1278_read_burst>

	inst->newPacket = (inst->rxTimeout || (inst->crcError && LR_VALIDATE_CRCERROR));
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	f893 2026 	ldrb.w	r2, [r3, #38]	; 0x26
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	inst->rssi = SX1278_getRSSI(inst);
 8001494:	6878      	ldr	r0, [r7, #4]
 8001496:	f000 f94b 	bl	8001730 <SX1278_getRSSI>
 800149a:	4602      	mov	r2, r0
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	62da      	str	r2, [r3, #44]	; 0x2c
	inst->rxLen = packet_size;
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	7bfa      	ldrb	r2, [r7, #15]
 80014a4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	SX1278_clearLoRaIrq(inst);
 80014a8:	6878      	ldr	r0, [r7, #4]
 80014aa:	f000 f934 	bl	8001716 <SX1278_clearLoRaIrq>
	SX1278_standby(inst);
 80014ae:	6878      	ldr	r0, [r7, #4]
 80014b0:	f000 f8b6 	bl	8001620 <SX1278_standby>

	if (inst->rxTimeout)
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d010      	beq.n	80014e0 <SX1278_rx_get_packet+0xbc>
	{
		printLen = sprintf(printBuffer, "[LoRa] Receive timeout! Nothing to listen to.\r\n");
 80014be:	4a21      	ldr	r2, [pc, #132]	; (8001544 <SX1278_rx_get_packet+0x120>)
 80014c0:	4b21      	ldr	r3, [pc, #132]	; (8001548 <SX1278_rx_get_packet+0x124>)
 80014c2:	4614      	mov	r4, r2
 80014c4:	461d      	mov	r5, r3
 80014c6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80014c8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80014ca:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80014cc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80014ce:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80014d2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80014d6:	232f      	movs	r3, #47	; 0x2f
 80014d8:	461a      	mov	r2, r3
 80014da:	4b1c      	ldr	r3, [pc, #112]	; (800154c <SX1278_rx_get_packet+0x128>)
 80014dc:	601a      	str	r2, [r3, #0]
 80014de:	e023      	b.n	8001528 <SX1278_rx_get_packet+0x104>
	}
	else if (inst->crcError)
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d010      	beq.n	800150c <SX1278_rx_get_packet+0xe8>
	{
		printLen = sprintf(printBuffer, "[LoRa] CRC error occured. Packet discarded!\r\n");
 80014ea:	4a16      	ldr	r2, [pc, #88]	; (8001544 <SX1278_rx_get_packet+0x120>)
 80014ec:	4b18      	ldr	r3, [pc, #96]	; (8001550 <SX1278_rx_get_packet+0x12c>)
 80014ee:	4614      	mov	r4, r2
 80014f0:	461d      	mov	r5, r3
 80014f2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80014f4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80014f6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80014f8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80014fa:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80014fe:	c407      	stmia	r4!, {r0, r1, r2}
 8001500:	8023      	strh	r3, [r4, #0]
 8001502:	232d      	movs	r3, #45	; 0x2d
 8001504:	461a      	mov	r2, r3
 8001506:	4b11      	ldr	r3, [pc, #68]	; (800154c <SX1278_rx_get_packet+0x128>)
 8001508:	601a      	str	r2, [r3, #0]
 800150a:	e00d      	b.n	8001528 <SX1278_rx_get_packet+0x104>
	}
	else
	{
		printLen = sprintf(printBuffer, "[LoRa] Valid packet received!\r\n");
 800150c:	4a0d      	ldr	r2, [pc, #52]	; (8001544 <SX1278_rx_get_packet+0x120>)
 800150e:	4b11      	ldr	r3, [pc, #68]	; (8001554 <SX1278_rx_get_packet+0x130>)
 8001510:	4614      	mov	r4, r2
 8001512:	461d      	mov	r5, r3
 8001514:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001516:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001518:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800151c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8001520:	231f      	movs	r3, #31
 8001522:	461a      	mov	r2, r3
 8001524:	4b09      	ldr	r3, [pc, #36]	; (800154c <SX1278_rx_get_packet+0x128>)
 8001526:	601a      	str	r2, [r3, #0]
	}
	printv(printBuffer, printLen);
 8001528:	4b08      	ldr	r3, [pc, #32]	; (800154c <SX1278_rx_get_packet+0x128>)
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	4619      	mov	r1, r3
 800152e:	4805      	ldr	r0, [pc, #20]	; (8001544 <SX1278_rx_get_packet+0x120>)
 8001530:	f7ff fd6c 	bl	800100c <printv>

	return inst->newPacket;
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
}
 800153a:	4618      	mov	r0, r3
 800153c:	3710      	adds	r7, #16
 800153e:	46bd      	mov	sp, r7
 8001540:	bdb0      	pop	{r4, r5, r7, pc}
 8001542:	bf00      	nop
 8001544:	20000374 	.word	0x20000374
 8001548:	08011a08 	.word	0x08011a08
 800154c:	20000370 	.word	0x20000370
 8001550:	08011a38 	.word	0x08011a38
 8001554:	08011a68 	.word	0x08011a68

08001558 <SX1278_tx_mode>:

//#### Functions to change SX1278 operation mode ####

void SX1278_tx_mode(SX1278* inst)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	b084      	sub	sp, #16
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]
	println("[LoRa] Goes into Transmit mode.");
 8001560:	4813      	ldr	r0, [pc, #76]	; (80015b0 <SX1278_tx_mode+0x58>)
 8001562:	f7ff fd11 	bl	8000f88 <println>
	uint8_t addr;

	SX1278_clearLoRaIrq(inst);
 8001566:	6878      	ldr	r0, [r7, #4]
 8001568:	f000 f8d5 	bl	8001716 <SX1278_clearLoRaIrq>
	SX1278_command(inst, REG_LR_DIOMAPPING1, 0x41);	//DIO0=01, DIO1=00, DIO2=00, DIO3=01
 800156c:	2241      	movs	r2, #65	; 0x41
 800156e:	2140      	movs	r1, #64	; 0x40
 8001570:	6878      	ldr	r0, [r7, #4]
 8001572:	f7ff fd76 	bl	8001062 <SX1278_command>
	SX1278_command(inst, LR_RegIrqFlagsMask, 0xF7);	//Open TxDone interrupt
 8001576:	22f7      	movs	r2, #247	; 0xf7
 8001578:	2111      	movs	r1, #17
 800157a:	6878      	ldr	r0, [r7, #4]
 800157c:	f7ff fd71 	bl	8001062 <SX1278_command>

	addr = SX1278_read_address(inst, LR_RegFifoTxBaseAddr);	//read tx_fifo beginning adress in memory
 8001580:	210e      	movs	r1, #14
 8001582:	6878      	ldr	r0, [r7, #4]
 8001584:	f7ff fdf8 	bl	8001178 <SX1278_read_address>
 8001588:	4603      	mov	r3, r0
 800158a:	73fb      	strb	r3, [r7, #15]
	SX1278_command(inst, LR_RegFifoAddrPtr, addr);			//set fifo pointer there
 800158c:	7bfb      	ldrb	r3, [r7, #15]
 800158e:	461a      	mov	r2, r3
 8001590:	210d      	movs	r1, #13
 8001592:	6878      	ldr	r0, [r7, #4]
 8001594:	f7ff fd65 	bl	8001062 <SX1278_command>

	inst->txLen = 0;
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	2200      	movs	r2, #0
 800159c:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
	inst->mode = TX;
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	2202      	movs	r2, #2
 80015a4:	731a      	strb	r2, [r3, #12]
}
 80015a6:	bf00      	nop
 80015a8:	3710      	adds	r7, #16
 80015aa:	46bd      	mov	sp, r7
 80015ac:	bd80      	pop	{r7, pc}
 80015ae:	bf00      	nop
 80015b0:	08011a88 	.word	0x08011a88

080015b4 <SX1278_rx_mode>:

void SX1278_rx_mode(SX1278* inst)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b084      	sub	sp, #16
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]
	println("[LoRa] Goes into Receive mode.");
 80015bc:	4817      	ldr	r0, [pc, #92]	; (800161c <SX1278_rx_mode+0x68>)
 80015be:	f7ff fce3 	bl	8000f88 <println>
	uint8_t addr;

	SX1278_clearLoRaIrq(inst);
 80015c2:	6878      	ldr	r0, [r7, #4]
 80015c4:	f000 f8a7 	bl	8001716 <SX1278_clearLoRaIrq>
	SX1278_command(inst, REG_LR_DIOMAPPING1, 0x01);	//DIO=00, DIO1=00,DIO2=00, DIO3=01
 80015c8:	2201      	movs	r2, #1
 80015ca:	2140      	movs	r1, #64	; 0x40
 80015cc:	6878      	ldr	r0, [r7, #4]
 80015ce:	f7ff fd48 	bl	8001062 <SX1278_command>
	SX1278_command(inst, LR_RegIrqFlagsMask, 0x1F);	//Open RxDone, RxTimeout, crcError interrupt
 80015d2:	221f      	movs	r2, #31
 80015d4:	2111      	movs	r1, #17
 80015d6:	6878      	ldr	r0, [r7, #4]
 80015d8:	f7ff fd43 	bl	8001062 <SX1278_command>

	addr = SX1278_read_address(inst, LR_RegFifoRxBaseAddr);	//read rx_fifo beginning adress in memory
 80015dc:	210f      	movs	r1, #15
 80015de:	6878      	ldr	r0, [r7, #4]
 80015e0:	f7ff fdca 	bl	8001178 <SX1278_read_address>
 80015e4:	4603      	mov	r3, r0
 80015e6:	73fb      	strb	r3, [r7, #15]
	SX1278_command(inst, LR_RegFifoAddrPtr, addr);			//set fifo pointer there
 80015e8:	7bfb      	ldrb	r3, [r7, #15]
 80015ea:	461a      	mov	r2, r3
 80015ec:	210d      	movs	r1, #13
 80015ee:	6878      	ldr	r0, [r7, #4]
 80015f0:	f7ff fd37 	bl	8001062 <SX1278_command>

	SX1278_command(inst, LR_RegOpMode, 0x8d);				//0x8d = 1_00_0_1_101 = Lora, FSK, (r), Low Frequency mode, Rx mode
 80015f4:	228d      	movs	r2, #141	; 0x8d
 80015f6:	2101      	movs	r1, #1
 80015f8:	6878      	ldr	r0, [r7, #4]
 80015fa:	f7ff fd32 	bl	8001062 <SX1278_command>

	inst->crcError = false;
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	2200      	movs	r2, #0
 8001602:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	inst->rxLen = 0;
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	2200      	movs	r2, #0
 800160a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	inst->mode = RX;
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	2203      	movs	r2, #3
 8001612:	731a      	strb	r2, [r3, #12]
}
 8001614:	bf00      	nop
 8001616:	3710      	adds	r7, #16
 8001618:	46bd      	mov	sp, r7
 800161a:	bd80      	pop	{r7, pc}
 800161c:	08011aa8 	.word	0x08011aa8

08001620 <SX1278_standby>:
	SX1278_command(inst, LR_RegOpMode, 0x08);
	inst->mode = SLEEP;
}

void SX1278_standby(SX1278* inst)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	b082      	sub	sp, #8
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]
	println("[LoRa] Goes into Standby mode.");
 8001628:	4807      	ldr	r0, [pc, #28]	; (8001648 <SX1278_standby+0x28>)
 800162a:	f7ff fcad 	bl	8000f88 <println>
	SX1278_command(inst, LR_RegOpMode, 0x09);
 800162e:	2209      	movs	r2, #9
 8001630:	2101      	movs	r1, #1
 8001632:	6878      	ldr	r0, [r7, #4]
 8001634:	f7ff fd15 	bl	8001062 <SX1278_command>
	inst->mode = STANDBY;
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	2201      	movs	r2, #1
 800163c:	731a      	strb	r2, [r3, #12]
}
 800163e:	bf00      	nop
 8001640:	3708      	adds	r7, #8
 8001642:	46bd      	mov	sp, r7
 8001644:	bd80      	pop	{r7, pc}
 8001646:	bf00      	nop
 8001648:	08011ae8 	.word	0x08011ae8

0800164c <SX1278_dio0_IRQ>:
}

//#### Interrupt methods ####

bool SX1278_dio0_IRQ(SX1278* inst)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	b082      	sub	sp, #8
 8001650:	af00      	add	r7, sp, #0
 8001652:	6078      	str	r0, [r7, #4]
	//function to call when dio0 rises, used only when waiting for the DIO0 interrupt
	//finishes transmit and receive routines
	if (inst->useDio0IRQ && inst->pendingIRQ)
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800165a:	2b00      	cmp	r3, #0
 800165c:	d01e      	beq.n	800169c <SX1278_dio0_IRQ+0x50>
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8001664:	2b00      	cmp	r3, #0
 8001666:	d019      	beq.n	800169c <SX1278_dio0_IRQ+0x50>
	{
		if (inst->mode == TX)
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	7b1b      	ldrb	r3, [r3, #12]
 800166c:	2b02      	cmp	r3, #2
 800166e:	d104      	bne.n	800167a <SX1278_dio0_IRQ+0x2e>
		{
			return SX1278_tx_finish(inst);
 8001670:	6878      	ldr	r0, [r7, #4]
 8001672:	f7ff fe99 	bl	80013a8 <SX1278_tx_finish>
 8001676:	4603      	mov	r3, r0
 8001678:	e011      	b.n	800169e <SX1278_dio0_IRQ+0x52>
		}
		else if (inst->mode == RX)
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	7b1b      	ldrb	r3, [r3, #12]
 800167e:	2b03      	cmp	r3, #3
 8001680:	d104      	bne.n	800168c <SX1278_dio0_IRQ+0x40>
		{
			return SX1278_rx_get_packet(inst);
 8001682:	6878      	ldr	r0, [r7, #4]
 8001684:	f7ff fece 	bl	8001424 <SX1278_rx_get_packet>
 8001688:	4603      	mov	r3, r0
 800168a:	e008      	b.n	800169e <SX1278_dio0_IRQ+0x52>
		}
		else
		{
			SX1278_clearLoRaIrq(inst);
 800168c:	6878      	ldr	r0, [r7, #4]
 800168e:	f000 f842 	bl	8001716 <SX1278_clearLoRaIrq>
			SX1278_standby(inst);
 8001692:	6878      	ldr	r0, [r7, #4]
 8001694:	f7ff ffc4 	bl	8001620 <SX1278_standby>
			return false;
 8001698:	2300      	movs	r3, #0
 800169a:	e000      	b.n	800169e <SX1278_dio0_IRQ+0x52>
		inst->pendingIRQ = false;
		return true;
	}
	else
	{
		return false;
 800169c:	2300      	movs	r3, #0
	}
}
 800169e:	4618      	mov	r0, r3
 80016a0:	3708      	adds	r7, #8
 80016a2:	46bd      	mov	sp, r7
 80016a4:	bd80      	pop	{r7, pc}

080016a6 <SX1278_update_IRQ_status>:

void SX1278_update_IRQ_status(SX1278* inst)
{
 80016a6:	b580      	push	{r7, lr}
 80016a8:	b082      	sub	sp, #8
 80016aa:	af00      	add	r7, sp, #0
 80016ac:	6078      	str	r0, [r7, #4]
	inst->irqStatus = SX1278_read_address(inst, LR_RegIrqFlags);
 80016ae:	2112      	movs	r1, #18
 80016b0:	6878      	ldr	r0, [r7, #4]
 80016b2:	f7ff fd61 	bl	8001178 <SX1278_read_address>
 80016b6:	4603      	mov	r3, r0
 80016b8:	461a      	mov	r2, r3
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	inst->rxTimeout = ((inst->irqStatus & IRQ_LR_RXTIMEOUT) > 0x00);
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80016c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	bfcc      	ite	gt
 80016ce:	2301      	movgt	r3, #1
 80016d0:	2300      	movle	r3, #0
 80016d2:	b2da      	uxtb	r2, r3
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
	inst->rxDone = 	  ((inst->irqStatus & IRQ_LR_RXDONE) > 0x00);
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80016e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	bfcc      	ite	gt
 80016e8:	2301      	movgt	r3, #1
 80016ea:	2300      	movle	r3, #0
 80016ec:	b2da      	uxtb	r2, r3
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	inst->crcError =  ((inst->irqStatus & IRQ_LR_CRCERROR) > 0x00);
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80016fa:	f003 0320 	and.w	r3, r3, #32
 80016fe:	2b00      	cmp	r3, #0
 8001700:	bfcc      	ite	gt
 8001702:	2301      	movgt	r3, #1
 8001704:	2300      	movle	r3, #0
 8001706:	b2da      	uxtb	r2, r3
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
}
 800170e:	bf00      	nop
 8001710:	3708      	adds	r7, #8
 8001712:	46bd      	mov	sp, r7
 8001714:	bd80      	pop	{r7, pc}

08001716 <SX1278_clearLoRaIrq>:

void SX1278_clearLoRaIrq(SX1278* inst)
{
 8001716:	b580      	push	{r7, lr}
 8001718:	b082      	sub	sp, #8
 800171a:	af00      	add	r7, sp, #0
 800171c:	6078      	str	r0, [r7, #4]
	SX1278_command(inst, LR_RegIrqFlags, 0xFF);
 800171e:	22ff      	movs	r2, #255	; 0xff
 8001720:	2112      	movs	r1, #18
 8001722:	6878      	ldr	r0, [r7, #4]
 8001724:	f7ff fc9d 	bl	8001062 <SX1278_command>
}
 8001728:	bf00      	nop
 800172a:	3708      	adds	r7, #8
 800172c:	46bd      	mov	sp, r7
 800172e:	bd80      	pop	{r7, pc}

08001730 <SX1278_getRSSI>:

int SX1278_getRSSI(SX1278* inst)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	b082      	sub	sp, #8
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]
  return (-164 + SX1278_read_address(inst, LR_RegPktRssiValue));
 8001738:	211a      	movs	r1, #26
 800173a:	6878      	ldr	r0, [r7, #4]
 800173c:	f7ff fd1c 	bl	8001178 <SX1278_read_address>
 8001740:	4603      	mov	r3, r0
 8001742:	3ba4      	subs	r3, #164	; 0xa4
}
 8001744:	4618      	mov	r0, r3
 8001746:	3708      	adds	r7, #8
 8001748:	46bd      	mov	sp, r7
 800174a:	bd80      	pop	{r7, pc}

0800174c <print>:
{
 800174c:	b580      	push	{r7, lr}
 800174e:	b082      	sub	sp, #8
 8001750:	af00      	add	r7, sp, #0
 8001752:	6078      	str	r0, [r7, #4]
	while (CDC_Transmit_FS((uint8_t*) str, strlen(str)) == USBD_BUSY);
 8001754:	bf00      	nop
 8001756:	6878      	ldr	r0, [r7, #4]
 8001758:	f7fe fd3a 	bl	80001d0 <strlen>
 800175c:	4603      	mov	r3, r0
 800175e:	b29b      	uxth	r3, r3
 8001760:	4619      	mov	r1, r3
 8001762:	6878      	ldr	r0, [r7, #4]
 8001764:	f00b feb6 	bl	800d4d4 <CDC_Transmit_FS>
 8001768:	4603      	mov	r3, r0
 800176a:	2b01      	cmp	r3, #1
 800176c:	d0f3      	beq.n	8001756 <print+0xa>
};
 800176e:	bf00      	nop
 8001770:	3708      	adds	r7, #8
 8001772:	46bd      	mov	sp, r7
 8001774:	bd80      	pop	{r7, pc}
	...

08001778 <println>:
{
 8001778:	b580      	push	{r7, lr}
 800177a:	b084      	sub	sp, #16
 800177c:	af00      	add	r7, sp, #0
 800177e:	6078      	str	r0, [r7, #4]
	printLen = strlen(str);
 8001780:	6878      	ldr	r0, [r7, #4]
 8001782:	f7fe fd25 	bl	80001d0 <strlen>
 8001786:	4602      	mov	r2, r0
 8001788:	4b1a      	ldr	r3, [pc, #104]	; (80017f4 <println+0x7c>)
 800178a:	601a      	str	r2, [r3, #0]
	for (i = 0; i < printLen; i++)
 800178c:	2300      	movs	r3, #0
 800178e:	73fb      	strb	r3, [r7, #15]
 8001790:	e009      	b.n	80017a6 <println+0x2e>
		printBuffer[i] = str[i];
 8001792:	7bfb      	ldrb	r3, [r7, #15]
 8001794:	687a      	ldr	r2, [r7, #4]
 8001796:	441a      	add	r2, r3
 8001798:	7bfb      	ldrb	r3, [r7, #15]
 800179a:	7811      	ldrb	r1, [r2, #0]
 800179c:	4a16      	ldr	r2, [pc, #88]	; (80017f8 <println+0x80>)
 800179e:	54d1      	strb	r1, [r2, r3]
	for (i = 0; i < printLen; i++)
 80017a0:	7bfb      	ldrb	r3, [r7, #15]
 80017a2:	3301      	adds	r3, #1
 80017a4:	73fb      	strb	r3, [r7, #15]
 80017a6:	7bfa      	ldrb	r2, [r7, #15]
 80017a8:	4b12      	ldr	r3, [pc, #72]	; (80017f4 <println+0x7c>)
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	429a      	cmp	r2, r3
 80017ae:	d3f0      	bcc.n	8001792 <println+0x1a>
	printBuffer[printLen] = '\n';
 80017b0:	4b10      	ldr	r3, [pc, #64]	; (80017f4 <println+0x7c>)
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	4a10      	ldr	r2, [pc, #64]	; (80017f8 <println+0x80>)
 80017b6:	210a      	movs	r1, #10
 80017b8:	54d1      	strb	r1, [r2, r3]
	printBuffer[printLen + 1] = '\r';
 80017ba:	4b0e      	ldr	r3, [pc, #56]	; (80017f4 <println+0x7c>)
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	3301      	adds	r3, #1
 80017c0:	4a0d      	ldr	r2, [pc, #52]	; (80017f8 <println+0x80>)
 80017c2:	210d      	movs	r1, #13
 80017c4:	54d1      	strb	r1, [r2, r3]
	printBuffer[printLen + 2] = '\0';
 80017c6:	4b0b      	ldr	r3, [pc, #44]	; (80017f4 <println+0x7c>)
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	3302      	adds	r3, #2
 80017cc:	4a0a      	ldr	r2, [pc, #40]	; (80017f8 <println+0x80>)
 80017ce:	2100      	movs	r1, #0
 80017d0:	54d1      	strb	r1, [r2, r3]
 	while (CDC_Transmit_FS((uint8_t*) printBuffer, printLen + 3) == USBD_BUSY);
 80017d2:	bf00      	nop
 80017d4:	4b07      	ldr	r3, [pc, #28]	; (80017f4 <println+0x7c>)
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	b29b      	uxth	r3, r3
 80017da:	3303      	adds	r3, #3
 80017dc:	b29b      	uxth	r3, r3
 80017de:	4619      	mov	r1, r3
 80017e0:	4805      	ldr	r0, [pc, #20]	; (80017f8 <println+0x80>)
 80017e2:	f00b fe77 	bl	800d4d4 <CDC_Transmit_FS>
 80017e6:	4603      	mov	r3, r0
 80017e8:	2b01      	cmp	r3, #1
 80017ea:	d0f3      	beq.n	80017d4 <println+0x5c>
};
 80017ec:	bf00      	nop
 80017ee:	3710      	adds	r7, #16
 80017f0:	46bd      	mov	sp, r7
 80017f2:	bd80      	pop	{r7, pc}
 80017f4:	20000574 	.word	0x20000574
 80017f8:	20000578 	.word	0x20000578

080017fc <printv>:
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b082      	sub	sp, #8
 8001800:	af00      	add	r7, sp, #0
 8001802:	6078      	str	r0, [r7, #4]
 8001804:	6039      	str	r1, [r7, #0]
	while (CDC_Transmit_FS((uint8_t*) str, len) == USBD_BUSY);
 8001806:	bf00      	nop
 8001808:	683b      	ldr	r3, [r7, #0]
 800180a:	b29b      	uxth	r3, r3
 800180c:	4619      	mov	r1, r3
 800180e:	6878      	ldr	r0, [r7, #4]
 8001810:	f00b fe60 	bl	800d4d4 <CDC_Transmit_FS>
 8001814:	4603      	mov	r3, r0
 8001816:	2b01      	cmp	r3, #1
 8001818:	d0f6      	beq.n	8001808 <printv+0xc>
}
 800181a:	bf00      	nop
 800181c:	3708      	adds	r7, #8
 800181e:	46bd      	mov	sp, r7
 8001820:	bd80      	pop	{r7, pc}
	...

08001824 <millis>:
#include <stdbool.h>
#include "stm32f4xx_hal.h"
#include "main.h"

// TIM5 has 32-bit counter -> takes longer to overflow
static inline uint32_t millis() { return (uint32_t)TIM5->CNT; }
 8001824:	b480      	push	{r7}
 8001826:	af00      	add	r7, sp, #0
 8001828:	4b03      	ldr	r3, [pc, #12]	; (8001838 <millis+0x14>)
 800182a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800182c:	4618      	mov	r0, r3
 800182e:	46bd      	mov	sp, r7
 8001830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001834:	4770      	bx	lr
 8001836:	bf00      	nop
 8001838:	40000c00 	.word	0x40000c00

0800183c <setup>:

int i;
uint32_t lastMillis;

static void setup()
{
 800183c:	b580      	push	{r7, lr}
 800183e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LEDA_GPIO_Port, LEDA_Pin, GPIO_PIN_RESET);
 8001840:	2200      	movs	r2, #0
 8001842:	2180      	movs	r1, #128	; 0x80
 8001844:	484a      	ldr	r0, [pc, #296]	; (8001970 <setup+0x134>)
 8001846:	f002 fa5f 	bl	8003d08 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LEDB_GPIO_Port, LEDB_Pin, GPIO_PIN_RESET);
 800184a:	2200      	movs	r2, #0
 800184c:	2140      	movs	r1, #64	; 0x40
 800184e:	4848      	ldr	r0, [pc, #288]	; (8001970 <setup+0x134>)
 8001850:	f002 fa5a 	bl	8003d08 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LEDC_GPIO_Port, LEDC_Pin, GPIO_PIN_RESET);
 8001854:	2200      	movs	r2, #0
 8001856:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800185a:	4846      	ldr	r0, [pc, #280]	; (8001974 <setup+0x138>)
 800185c:	f002 fa54 	bl	8003d08 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LEDD_GPIO_Port, LEDD_Pin, GPIO_PIN_RESET);
 8001860:	2200      	movs	r2, #0
 8001862:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001866:	4843      	ldr	r0, [pc, #268]	; (8001974 <setup+0x138>)
 8001868:	f002 fa4e 	bl	8003d08 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PH_L_GPIO_Port, PH_L_Pin, GPIO_PIN_RESET);
 800186c:	2200      	movs	r2, #0
 800186e:	2101      	movs	r1, #1
 8001870:	4841      	ldr	r0, [pc, #260]	; (8001978 <setup+0x13c>)
 8001872:	f002 fa49 	bl	8003d08 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PH_R_GPIO_Port, PH_R_Pin, GPIO_PIN_RESET);
 8001876:	2200      	movs	r2, #0
 8001878:	2104      	movs	r1, #4
 800187a:	483f      	ldr	r0, [pc, #252]	; (8001978 <setup+0x13c>)
 800187c:	f002 fa44 	bl	8003d08 <HAL_GPIO_WritePin>

	while (HAL_GPIO_ReadPin(BTN_USR_GPIO_Port, BTN_USR_Pin) == GPIO_PIN_SET)
 8001880:	e01f      	b.n	80018c2 <setup+0x86>
	{
		print("Waiting for button press..");
 8001882:	483e      	ldr	r0, [pc, #248]	; (800197c <setup+0x140>)
 8001884:	f7ff ff62 	bl	800174c <print>
		printLen = sprintf(printBuffer, "%d(<-should be ~100)\n\r", (int)(millis() - lastMillis));
 8001888:	f7ff ffcc 	bl	8001824 <millis>
 800188c:	4602      	mov	r2, r0
 800188e:	4b3c      	ldr	r3, [pc, #240]	; (8001980 <setup+0x144>)
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	1ad3      	subs	r3, r2, r3
 8001894:	461a      	mov	r2, r3
 8001896:	493b      	ldr	r1, [pc, #236]	; (8001984 <setup+0x148>)
 8001898:	483b      	ldr	r0, [pc, #236]	; (8001988 <setup+0x14c>)
 800189a:	f00d f993 	bl	800ebc4 <siprintf>
 800189e:	4603      	mov	r3, r0
 80018a0:	461a      	mov	r2, r3
 80018a2:	4b3a      	ldr	r3, [pc, #232]	; (800198c <setup+0x150>)
 80018a4:	601a      	str	r2, [r3, #0]
		printv(printBuffer, printLen);	//should print: 100
 80018a6:	4b39      	ldr	r3, [pc, #228]	; (800198c <setup+0x150>)
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	4619      	mov	r1, r3
 80018ac:	4836      	ldr	r0, [pc, #216]	; (8001988 <setup+0x14c>)
 80018ae:	f7ff ffa5 	bl	80017fc <printv>
		lastMillis = millis();
 80018b2:	f7ff ffb7 	bl	8001824 <millis>
 80018b6:	4602      	mov	r2, r0
 80018b8:	4b31      	ldr	r3, [pc, #196]	; (8001980 <setup+0x144>)
 80018ba:	601a      	str	r2, [r3, #0]
		HAL_Delay(100);
 80018bc:	2064      	movs	r0, #100	; 0x64
 80018be:	f001 fba1 	bl	8003004 <HAL_Delay>
	while (HAL_GPIO_ReadPin(BTN_USR_GPIO_Port, BTN_USR_Pin) == GPIO_PIN_SET)
 80018c2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80018c6:	482c      	ldr	r0, [pc, #176]	; (8001978 <setup+0x13c>)
 80018c8:	f002 fa06 	bl	8003cd8 <HAL_GPIO_ReadPin>
 80018cc:	4603      	mov	r3, r0
 80018ce:	2b01      	cmp	r3, #1
 80018d0:	d0d7      	beq.n	8001882 <setup+0x46>
	}

	HAL_GPIO_WritePin(LEDA_GPIO_Port, LEDA_Pin, GPIO_PIN_SET);
 80018d2:	2201      	movs	r2, #1
 80018d4:	2180      	movs	r1, #128	; 0x80
 80018d6:	4826      	ldr	r0, [pc, #152]	; (8001970 <setup+0x134>)
 80018d8:	f002 fa16 	bl	8003d08 <HAL_GPIO_WritePin>
	println("Hello world!!");
 80018dc:	482c      	ldr	r0, [pc, #176]	; (8001990 <setup+0x154>)
 80018de:	f7ff ff4b 	bl	8001778 <println>
	HAL_Delay(500);
 80018e2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80018e6:	f001 fb8d 	bl	8003004 <HAL_Delay>
	HAL_GPIO_WritePin(LEDA_GPIO_Port, LEDA_Pin, GPIO_PIN_RESET);
 80018ea:	2200      	movs	r2, #0
 80018ec:	2180      	movs	r1, #128	; 0x80
 80018ee:	4820      	ldr	r0, [pc, #128]	; (8001970 <setup+0x134>)
 80018f0:	f002 fa0a 	bl	8003d08 <HAL_GPIO_WritePin>
		//radio_procedure();	//starts radio loop, now radio wokrs dependend on DIO0 interrupt in ping-pong mode
	}

	sd_begin();
	 */
	println("[MOT] WATCH OUT NOW! THERE IS A CHANCE THAT PWM POLARITY IS FLIPPED!");
 80018f4:	4827      	ldr	r0, [pc, #156]	; (8001994 <setup+0x158>)
 80018f6:	f7ff ff3f 	bl	8001778 <println>
	println("[MOT] IN THIS CASE MOTORS WILL TURN ON AND WONT STOP!!!!");
 80018fa:	4827      	ldr	r0, [pc, #156]	; (8001998 <setup+0x15c>)
 80018fc:	f7ff ff3c 	bl	8001778 <println>
	println("[MOT] Starting in 5 seconds!!");
 8001900:	4826      	ldr	r0, [pc, #152]	; (800199c <setup+0x160>)
 8001902:	f7ff ff39 	bl	8001778 <println>
	HAL_Delay(2000);
 8001906:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800190a:	f001 fb7b 	bl	8003004 <HAL_Delay>
	print("[MOT] 3..");
 800190e:	4824      	ldr	r0, [pc, #144]	; (80019a0 <setup+0x164>)
 8001910:	f7ff ff1c 	bl	800174c <print>
	HAL_Delay(1000);
 8001914:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001918:	f001 fb74 	bl	8003004 <HAL_Delay>
	print("2..");
 800191c:	4821      	ldr	r0, [pc, #132]	; (80019a4 <setup+0x168>)
 800191e:	f7ff ff15 	bl	800174c <print>
	HAL_Delay(1000);
 8001922:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001926:	f001 fb6d 	bl	8003004 <HAL_Delay>
	print("1..");
 800192a:	481f      	ldr	r0, [pc, #124]	; (80019a8 <setup+0x16c>)
 800192c:	f7ff ff0e 	bl	800174c <print>
	HAL_Delay(1000);
 8001930:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001934:	f001 fb66 	bl	8003004 <HAL_Delay>
	println("0");
 8001938:	481c      	ldr	r0, [pc, #112]	; (80019ac <setup+0x170>)
 800193a:	f7ff ff1d 	bl	8001778 <println>

	motL = 0;
 800193e:	4b1c      	ldr	r3, [pc, #112]	; (80019b0 <setup+0x174>)
 8001940:	2200      	movs	r2, #0
 8001942:	701a      	strb	r2, [r3, #0]
	motR = 0;
 8001944:	4b1b      	ldr	r3, [pc, #108]	; (80019b4 <setup+0x178>)
 8001946:	2200      	movs	r2, #0
 8001948:	701a      	strb	r2, [r3, #0]
	enableMotors();
 800194a:	f000 f9f3 	bl	8001d34 <enableMotors>
	setPwmFrequency(720);
 800194e:	f44f 7034 	mov.w	r0, #720	; 0x2d0
 8001952:	f000 fa3d 	bl	8001dd0 <setPwmFrequency>
	println("[MOT] Same frequency as in CanSatKit. Sound should be the same.");
 8001956:	4818      	ldr	r0, [pc, #96]	; (80019b8 <setup+0x17c>)
 8001958:	f7ff ff0e 	bl	8001778 <println>
	setMotorTimeout(1000);
 800195c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001960:	f000 fa92 	bl	8001e88 <setMotorTimeout>
	println("[MOT] Left motor: GPIO (copy on P7), Right motor: PWM (copy on P6)");
 8001964:	4815      	ldr	r0, [pc, #84]	; (80019bc <setup+0x180>)
 8001966:	f7ff ff07 	bl	8001778 <println>

}
 800196a:	bf00      	nop
 800196c:	bd80      	pop	{r7, pc}
 800196e:	bf00      	nop
 8001970:	40020800 	.word	0x40020800
 8001974:	40020400 	.word	0x40020400
 8001978:	40020000 	.word	0x40020000
 800197c:	08011b1c 	.word	0x08011b1c
 8001980:	20000be4 	.word	0x20000be4
 8001984:	08011b38 	.word	0x08011b38
 8001988:	20000578 	.word	0x20000578
 800198c:	20000574 	.word	0x20000574
 8001990:	08011b50 	.word	0x08011b50
 8001994:	08011b60 	.word	0x08011b60
 8001998:	08011ba8 	.word	0x08011ba8
 800199c:	08011be4 	.word	0x08011be4
 80019a0:	08011c04 	.word	0x08011c04
 80019a4:	08011c10 	.word	0x08011c10
 80019a8:	08011c14 	.word	0x08011c14
 80019ac:	08011c18 	.word	0x08011c18
 80019b0:	20000778 	.word	0x20000778
 80019b4:	20000779 	.word	0x20000779
 80019b8:	08011c1c 	.word	0x08011c1c
 80019bc:	08011c5c 	.word	0x08011c5c

080019c0 <loop>:

static void loop()
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	af00      	add	r7, sp, #0
	//println("#######################");
	//println("[MOT] Motor test! Press USR.");
	//println("#######################");
	for (i = 0; i < 255; i++)
 80019c4:	4b55      	ldr	r3, [pc, #340]	; (8001b1c <loop+0x15c>)
 80019c6:	2200      	movs	r2, #0
 80019c8:	601a      	str	r2, [r3, #0]
 80019ca:	e04c      	b.n	8001a66 <loop+0xa6>
	{
		if (HAL_GPIO_ReadPin(BTN_USR_GPIO_Port, BTN_USR_Pin) == GPIO_PIN_RESET)
 80019cc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80019d0:	4853      	ldr	r0, [pc, #332]	; (8001b20 <loop+0x160>)
 80019d2:	f002 f981 	bl	8003cd8 <HAL_GPIO_ReadPin>
 80019d6:	4603      	mov	r3, r0
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d12b      	bne.n	8001a34 <loop+0x74>
		{
			setMotors(i, i);
 80019dc:	4b4f      	ldr	r3, [pc, #316]	; (8001b1c <loop+0x15c>)
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	b2da      	uxtb	r2, r3
 80019e2:	4b4e      	ldr	r3, [pc, #312]	; (8001b1c <loop+0x15c>)
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	b2db      	uxtb	r3, r3
 80019e8:	4619      	mov	r1, r3
 80019ea:	4610      	mov	r0, r2
 80019ec:	f000 f8f8 	bl	8001be0 <setMotors>
			HAL_GPIO_WritePin(EN_L_GPIO_Port, EN_L_Pin, (i % 2 == 0) ? GPIO_PIN_RESET : GPIO_PIN_SET);
 80019f0:	4b4a      	ldr	r3, [pc, #296]	; (8001b1c <loop+0x15c>)
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	f003 0301 	and.w	r3, r3, #1
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	bf14      	ite	ne
 80019fc:	2301      	movne	r3, #1
 80019fe:	2300      	moveq	r3, #0
 8001a00:	b2db      	uxtb	r3, r3
 8001a02:	461a      	mov	r2, r3
 8001a04:	2102      	movs	r1, #2
 8001a06:	4846      	ldr	r0, [pc, #280]	; (8001b20 <loop+0x160>)
 8001a08:	f002 f97e 	bl	8003d08 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(P7_GPIO_Port, P7_Pin, (i % 2 == 0) ? GPIO_PIN_RESET : GPIO_PIN_SET);
 8001a0c:	4b43      	ldr	r3, [pc, #268]	; (8001b1c <loop+0x15c>)
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	f003 0301 	and.w	r3, r3, #1
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	bf14      	ite	ne
 8001a18:	2301      	movne	r3, #1
 8001a1a:	2300      	moveq	r3, #0
 8001a1c:	b2db      	uxtb	r3, r3
 8001a1e:	461a      	mov	r2, r3
 8001a20:	2110      	movs	r1, #16
 8001a22:	483f      	ldr	r0, [pc, #252]	; (8001b20 <loop+0x160>)
 8001a24:	f002 f970 	bl	8003d08 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LEDA_GPIO_Port, LEDA_Pin, GPIO_PIN_SET);
 8001a28:	2201      	movs	r2, #1
 8001a2a:	2180      	movs	r1, #128	; 0x80
 8001a2c:	483d      	ldr	r0, [pc, #244]	; (8001b24 <loop+0x164>)
 8001a2e:	f002 f96b 	bl	8003d08 <HAL_GPIO_WritePin>
 8001a32:	e010      	b.n	8001a56 <loop+0x96>
		}
		else
		{
			haltMotors();
 8001a34:	f000 f964 	bl	8001d00 <haltMotors>
			HAL_GPIO_WritePin(EN_L_GPIO_Port, EN_L_Pin, GPIO_PIN_RESET);
 8001a38:	2200      	movs	r2, #0
 8001a3a:	2102      	movs	r1, #2
 8001a3c:	4838      	ldr	r0, [pc, #224]	; (8001b20 <loop+0x160>)
 8001a3e:	f002 f963 	bl	8003d08 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(P7_GPIO_Port, P7_Pin, GPIO_PIN_RESET);
 8001a42:	2200      	movs	r2, #0
 8001a44:	2110      	movs	r1, #16
 8001a46:	4836      	ldr	r0, [pc, #216]	; (8001b20 <loop+0x160>)
 8001a48:	f002 f95e 	bl	8003d08 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LEDA_GPIO_Port, LEDA_Pin, GPIO_PIN_RESET);
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	2180      	movs	r1, #128	; 0x80
 8001a50:	4834      	ldr	r0, [pc, #208]	; (8001b24 <loop+0x164>)
 8001a52:	f002 f959 	bl	8003d08 <HAL_GPIO_WritePin>
		}

		HAL_Delay(10);
 8001a56:	200a      	movs	r0, #10
 8001a58:	f001 fad4 	bl	8003004 <HAL_Delay>
	for (i = 0; i < 255; i++)
 8001a5c:	4b2f      	ldr	r3, [pc, #188]	; (8001b1c <loop+0x15c>)
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	3301      	adds	r3, #1
 8001a62:	4a2e      	ldr	r2, [pc, #184]	; (8001b1c <loop+0x15c>)
 8001a64:	6013      	str	r3, [r2, #0]
 8001a66:	4b2d      	ldr	r3, [pc, #180]	; (8001b1c <loop+0x15c>)
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	2bfe      	cmp	r3, #254	; 0xfe
 8001a6c:	ddae      	ble.n	80019cc <loop+0xc>
	}
	for (i = 255; i >= 0; i--)
 8001a6e:	4b2b      	ldr	r3, [pc, #172]	; (8001b1c <loop+0x15c>)
 8001a70:	22ff      	movs	r2, #255	; 0xff
 8001a72:	601a      	str	r2, [r3, #0]
 8001a74:	e04c      	b.n	8001b10 <loop+0x150>
	{
		if (HAL_GPIO_ReadPin(BTN_USR_GPIO_Port, BTN_USR_Pin) == GPIO_PIN_RESET)
 8001a76:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001a7a:	4829      	ldr	r0, [pc, #164]	; (8001b20 <loop+0x160>)
 8001a7c:	f002 f92c 	bl	8003cd8 <HAL_GPIO_ReadPin>
 8001a80:	4603      	mov	r3, r0
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d12b      	bne.n	8001ade <loop+0x11e>
		{
			setMotors(i, i);
 8001a86:	4b25      	ldr	r3, [pc, #148]	; (8001b1c <loop+0x15c>)
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	b2da      	uxtb	r2, r3
 8001a8c:	4b23      	ldr	r3, [pc, #140]	; (8001b1c <loop+0x15c>)
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	b2db      	uxtb	r3, r3
 8001a92:	4619      	mov	r1, r3
 8001a94:	4610      	mov	r0, r2
 8001a96:	f000 f8a3 	bl	8001be0 <setMotors>
			HAL_GPIO_WritePin(EN_L_GPIO_Port, EN_L_Pin, (i % 2 == 0) ? GPIO_PIN_RESET : GPIO_PIN_SET);
 8001a9a:	4b20      	ldr	r3, [pc, #128]	; (8001b1c <loop+0x15c>)
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	f003 0301 	and.w	r3, r3, #1
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	bf14      	ite	ne
 8001aa6:	2301      	movne	r3, #1
 8001aa8:	2300      	moveq	r3, #0
 8001aaa:	b2db      	uxtb	r3, r3
 8001aac:	461a      	mov	r2, r3
 8001aae:	2102      	movs	r1, #2
 8001ab0:	481b      	ldr	r0, [pc, #108]	; (8001b20 <loop+0x160>)
 8001ab2:	f002 f929 	bl	8003d08 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(P7_GPIO_Port, P7_Pin, (i % 2 == 0) ? GPIO_PIN_RESET : GPIO_PIN_SET);
 8001ab6:	4b19      	ldr	r3, [pc, #100]	; (8001b1c <loop+0x15c>)
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	f003 0301 	and.w	r3, r3, #1
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	bf14      	ite	ne
 8001ac2:	2301      	movne	r3, #1
 8001ac4:	2300      	moveq	r3, #0
 8001ac6:	b2db      	uxtb	r3, r3
 8001ac8:	461a      	mov	r2, r3
 8001aca:	2110      	movs	r1, #16
 8001acc:	4814      	ldr	r0, [pc, #80]	; (8001b20 <loop+0x160>)
 8001ace:	f002 f91b 	bl	8003d08 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LEDA_GPIO_Port, LEDA_Pin, GPIO_PIN_SET);
 8001ad2:	2201      	movs	r2, #1
 8001ad4:	2180      	movs	r1, #128	; 0x80
 8001ad6:	4813      	ldr	r0, [pc, #76]	; (8001b24 <loop+0x164>)
 8001ad8:	f002 f916 	bl	8003d08 <HAL_GPIO_WritePin>
 8001adc:	e010      	b.n	8001b00 <loop+0x140>
		}
		else
		{
			haltMotors();
 8001ade:	f000 f90f 	bl	8001d00 <haltMotors>
			HAL_GPIO_WritePin(EN_L_GPIO_Port, EN_L_Pin, GPIO_PIN_RESET);
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	2102      	movs	r1, #2
 8001ae6:	480e      	ldr	r0, [pc, #56]	; (8001b20 <loop+0x160>)
 8001ae8:	f002 f90e 	bl	8003d08 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(P7_GPIO_Port, P7_Pin, GPIO_PIN_RESET);
 8001aec:	2200      	movs	r2, #0
 8001aee:	2110      	movs	r1, #16
 8001af0:	480b      	ldr	r0, [pc, #44]	; (8001b20 <loop+0x160>)
 8001af2:	f002 f909 	bl	8003d08 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LEDA_GPIO_Port, LEDA_Pin, GPIO_PIN_RESET);
 8001af6:	2200      	movs	r2, #0
 8001af8:	2180      	movs	r1, #128	; 0x80
 8001afa:	480a      	ldr	r0, [pc, #40]	; (8001b24 <loop+0x164>)
 8001afc:	f002 f904 	bl	8003d08 <HAL_GPIO_WritePin>
		}

		HAL_Delay(10);
 8001b00:	200a      	movs	r0, #10
 8001b02:	f001 fa7f 	bl	8003004 <HAL_Delay>
	for (i = 255; i >= 0; i--)
 8001b06:	4b05      	ldr	r3, [pc, #20]	; (8001b1c <loop+0x15c>)
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	3b01      	subs	r3, #1
 8001b0c:	4a03      	ldr	r2, [pc, #12]	; (8001b1c <loop+0x15c>)
 8001b0e:	6013      	str	r3, [r2, #0]
 8001b10:	4b02      	ldr	r3, [pc, #8]	; (8001b1c <loop+0x15c>)
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	daae      	bge.n	8001a76 <loop+0xb6>
			printv(printBuffer, radio.txLen + 23);
			radio.txDone = false;
		}
	}
	*/
}
 8001b18:	bf00      	nop
 8001b1a:	bd80      	pop	{r7, pc}
 8001b1c:	20000adc 	.word	0x20000adc
 8001b20:	40020000 	.word	0x40020000
 8001b24:	40020800 	.word	0x40020800

08001b28 <radio_procedure>:

static void radio_procedure()
{
 8001b28:	b5b0      	push	{r4, r5, r7, lr}
 8001b2a:	af00      	add	r7, sp, #0
	if (nextTX)
 8001b2c:	4b19      	ldr	r3, [pc, #100]	; (8001b94 <radio_procedure+0x6c>)
 8001b2e:	781b      	ldrb	r3, [r3, #0]
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d026      	beq.n	8001b82 <radio_procedure+0x5a>
	{
		memset(sendBuffer, 0x00, SX1278_MAX_PACKET);
 8001b34:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001b38:	2100      	movs	r1, #0
 8001b3a:	4817      	ldr	r0, [pc, #92]	; (8001b98 <radio_procedure+0x70>)
 8001b3c:	f00c f93d 	bl	800ddba <memset>
		message_length = sprintf(sendBuffer, "Cats can have little a salami.");
 8001b40:	4a15      	ldr	r2, [pc, #84]	; (8001b98 <radio_procedure+0x70>)
 8001b42:	4b16      	ldr	r3, [pc, #88]	; (8001b9c <radio_procedure+0x74>)
 8001b44:	4615      	mov	r5, r2
 8001b46:	461c      	mov	r4, r3
 8001b48:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001b4a:	6028      	str	r0, [r5, #0]
 8001b4c:	6069      	str	r1, [r5, #4]
 8001b4e:	60aa      	str	r2, [r5, #8]
 8001b50:	60eb      	str	r3, [r5, #12]
 8001b52:	cc07      	ldmia	r4!, {r0, r1, r2}
 8001b54:	6128      	str	r0, [r5, #16]
 8001b56:	6169      	str	r1, [r5, #20]
 8001b58:	61aa      	str	r2, [r5, #24]
 8001b5a:	8823      	ldrh	r3, [r4, #0]
 8001b5c:	78a2      	ldrb	r2, [r4, #2]
 8001b5e:	83ab      	strh	r3, [r5, #28]
 8001b60:	4613      	mov	r3, r2
 8001b62:	77ab      	strb	r3, [r5, #30]
 8001b64:	231e      	movs	r3, #30
 8001b66:	b2da      	uxtb	r2, r3
 8001b68:	4b0d      	ldr	r3, [pc, #52]	; (8001ba0 <radio_procedure+0x78>)
 8001b6a:	701a      	strb	r2, [r3, #0]
		SX1278_transmit(&radio, sendBuffer, message_length);
 8001b6c:	4b0c      	ldr	r3, [pc, #48]	; (8001ba0 <radio_procedure+0x78>)
 8001b6e:	781b      	ldrb	r3, [r3, #0]
 8001b70:	461a      	mov	r2, r3
 8001b72:	4909      	ldr	r1, [pc, #36]	; (8001b98 <radio_procedure+0x70>)
 8001b74:	480b      	ldr	r0, [pc, #44]	; (8001ba4 <radio_procedure+0x7c>)
 8001b76:	f7ff fb65 	bl	8001244 <SX1278_transmit>

		nextTX = false;
 8001b7a:	4b06      	ldr	r3, [pc, #24]	; (8001b94 <radio_procedure+0x6c>)
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	701a      	strb	r2, [r3, #0]
	{
		SX1278_receive(&radio);

		nextTX = true;
	}
}
 8001b80:	e005      	b.n	8001b8e <radio_procedure+0x66>
		SX1278_receive(&radio);
 8001b82:	4808      	ldr	r0, [pc, #32]	; (8001ba4 <radio_procedure+0x7c>)
 8001b84:	f7ff fbaa 	bl	80012dc <SX1278_receive>
		nextTX = true;
 8001b88:	4b02      	ldr	r3, [pc, #8]	; (8001b94 <radio_procedure+0x6c>)
 8001b8a:	2201      	movs	r2, #1
 8001b8c:	701a      	strb	r2, [r3, #0]
}
 8001b8e:	bf00      	nop
 8001b90:	bdb0      	pop	{r4, r5, r7, pc}
 8001b92:	bf00      	nop
 8001b94:	20000be0 	.word	0x20000be0
 8001b98:	20000ae0 	.word	0x20000ae0
 8001b9c:	08011ca0 	.word	0x08011ca0
 8001ba0:	200009a0 	.word	0x200009a0
 8001ba4:	200009a4 	.word	0x200009a4

08001ba8 <dio0_IRQ>:

	return true;
}

static void dio0_IRQ()
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	af00      	add	r7, sp, #0
	if (radio.pendingIRQ)
 8001bac:	4b09      	ldr	r3, [pc, #36]	; (8001bd4 <dio0_IRQ+0x2c>)
 8001bae:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d008      	beq.n	8001bc8 <dio0_IRQ+0x20>
	{
		println("[LoRa] DIO0 interrupt received.");
 8001bb6:	4808      	ldr	r0, [pc, #32]	; (8001bd8 <dio0_IRQ+0x30>)
 8001bb8:	f7ff fdde 	bl	8001778 <println>
		SX1278_dio0_IRQ(&radio);
 8001bbc:	4805      	ldr	r0, [pc, #20]	; (8001bd4 <dio0_IRQ+0x2c>)
 8001bbe:	f7ff fd45 	bl	800164c <SX1278_dio0_IRQ>
		radio_procedure();
 8001bc2:	f7ff ffb1 	bl	8001b28 <radio_procedure>
	}
	else
	{
		println("[LoRa] DIO0 interrupt received but NOT used!");
	}
}
 8001bc6:	e002      	b.n	8001bce <dio0_IRQ+0x26>
		println("[LoRa] DIO0 interrupt received but NOT used!");
 8001bc8:	4804      	ldr	r0, [pc, #16]	; (8001bdc <dio0_IRQ+0x34>)
 8001bca:	f7ff fdd5 	bl	8001778 <println>
}
 8001bce:	bf00      	nop
 8001bd0:	bd80      	pop	{r7, pc}
 8001bd2:	bf00      	nop
 8001bd4:	200009a4 	.word	0x200009a4
 8001bd8:	08011d8c 	.word	0x08011d8c
 8001bdc:	08011dac 	.word	0x08011dac

08001be0 <setMotors>:
// DRV8838 has max of 250kHz PWM frequency
// Motors will automatically turn off after (TIM4->ARR * 1ms) time, default 100ms
// Any new value applied will reset timeout timer

static void setMotors(uint8_t pwmL, uint8_t pwmR)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	b082      	sub	sp, #8
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	4603      	mov	r3, r0
 8001be8:	460a      	mov	r2, r1
 8001bea:	71fb      	strb	r3, [r7, #7]
 8001bec:	4613      	mov	r3, r2
 8001bee:	71bb      	strb	r3, [r7, #6]
	//							    			some value	 / [0.0:1.0] duty cycle
	if (pwmL != 0) TIM2->CCR2 = (uint32_t)((float)TIM2->ARR / ((float)pwmL / (float)(PWM_RESOLUTION)));
 8001bf0:	79fb      	ldrb	r3, [r7, #7]
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d019      	beq.n	8001c2a <setMotors+0x4a>
 8001bf6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001bfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bfc:	ee07 3a90 	vmov	s15, r3
 8001c00:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001c04:	79fb      	ldrb	r3, [r7, #7]
 8001c06:	ee07 3a90 	vmov	s15, r3
 8001c0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001c0e:	ed9f 6a39 	vldr	s12, [pc, #228]	; 8001cf4 <setMotors+0x114>
 8001c12:	ee87 7a86 	vdiv.f32	s14, s15, s12
 8001c16:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001c1a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001c1e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001c22:	ee17 2a90 	vmov	r2, s15
 8001c26:	639a      	str	r2, [r3, #56]	; 0x38
 8001c28:	e005      	b.n	8001c36 <setMotors+0x56>
	else TIM2->CCR2 = TIM2->ARR;
 8001c2a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001c2e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001c32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c34:	6393      	str	r3, [r2, #56]	; 0x38
	if (pwmR != 0) TIM2->CCR4 = (uint32_t)((float)TIM2->ARR / ((float)pwmR / (float)(PWM_RESOLUTION)));
 8001c36:	79bb      	ldrb	r3, [r7, #6]
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d019      	beq.n	8001c70 <setMotors+0x90>
 8001c3c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001c40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c42:	ee07 3a90 	vmov	s15, r3
 8001c46:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001c4a:	79bb      	ldrb	r3, [r7, #6]
 8001c4c:	ee07 3a90 	vmov	s15, r3
 8001c50:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001c54:	ed9f 6a27 	vldr	s12, [pc, #156]	; 8001cf4 <setMotors+0x114>
 8001c58:	ee87 7a86 	vdiv.f32	s14, s15, s12
 8001c5c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001c60:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001c64:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001c68:	ee17 2a90 	vmov	r2, s15
 8001c6c:	641a      	str	r2, [r3, #64]	; 0x40
 8001c6e:	e005      	b.n	8001c7c <setMotors+0x9c>
	else TIM2->CCR4 = TIM2->ARR;
 8001c70:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001c74:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001c78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c7a:	6413      	str	r3, [r2, #64]	; 0x40

	//todelete
	if (pwmR != 0) TIM3->CCR3 = (uint32_t)((float)TIM3->ARR / ((float)pwmR / (float)(PWM_RESOLUTION)));
 8001c7c:	79bb      	ldrb	r3, [r7, #6]
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d017      	beq.n	8001cb2 <setMotors+0xd2>
 8001c82:	4b1d      	ldr	r3, [pc, #116]	; (8001cf8 <setMotors+0x118>)
 8001c84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c86:	ee07 3a90 	vmov	s15, r3
 8001c8a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001c8e:	79bb      	ldrb	r3, [r7, #6]
 8001c90:	ee07 3a90 	vmov	s15, r3
 8001c94:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001c98:	ed9f 6a16 	vldr	s12, [pc, #88]	; 8001cf4 <setMotors+0x114>
 8001c9c:	ee87 7a86 	vdiv.f32	s14, s15, s12
 8001ca0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001ca4:	4b14      	ldr	r3, [pc, #80]	; (8001cf8 <setMotors+0x118>)
 8001ca6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001caa:	ee17 2a90 	vmov	r2, s15
 8001cae:	63da      	str	r2, [r3, #60]	; 0x3c
 8001cb0:	e003      	b.n	8001cba <setMotors+0xda>
	else TIM3->CCR3 = TIM3->ARR;
 8001cb2:	4b11      	ldr	r3, [pc, #68]	; (8001cf8 <setMotors+0x118>)
 8001cb4:	4a10      	ldr	r2, [pc, #64]	; (8001cf8 <setMotors+0x118>)
 8001cb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cb8:	63d3      	str	r3, [r2, #60]	; 0x3c

	HAL_TIM_PWM_Start(Get_TIM2_Instance(), TIM_CHANNEL_2);
 8001cba:	f000 fd6f 	bl	800279c <Get_TIM2_Instance>
 8001cbe:	4603      	mov	r3, r0
 8001cc0:	2104      	movs	r1, #4
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	f006 fa2e 	bl	8008124 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(Get_TIM2_Instance(), TIM_CHANNEL_4);
 8001cc8:	f000 fd68 	bl	800279c <Get_TIM2_Instance>
 8001ccc:	4603      	mov	r3, r0
 8001cce:	210c      	movs	r1, #12
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	f006 fa27 	bl	8008124 <HAL_TIM_PWM_Start>

	//todelete
	HAL_TIM_PWM_Start(Get_TIM3_Instance(), TIM_CHANNEL_3);
 8001cd6:	f000 fd6b 	bl	80027b0 <Get_TIM3_Instance>
 8001cda:	4603      	mov	r3, r0
 8001cdc:	2108      	movs	r1, #8
 8001cde:	4618      	mov	r0, r3
 8001ce0:	f006 fa20 	bl	8008124 <HAL_TIM_PWM_Start>

	TIM4->CNT = 0;	// reset timer counter -> clears motor timeout
 8001ce4:	4b05      	ldr	r3, [pc, #20]	; (8001cfc <setMotors+0x11c>)
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	625a      	str	r2, [r3, #36]	; 0x24
}
 8001cea:	bf00      	nop
 8001cec:	3708      	adds	r7, #8
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	bd80      	pop	{r7, pc}
 8001cf2:	bf00      	nop
 8001cf4:	43800000 	.word	0x43800000
 8001cf8:	40000400 	.word	0x40000400
 8001cfc:	40000800 	.word	0x40000800

08001d00 <haltMotors>:

static void haltMotors()
{
 8001d00:	b480      	push	{r7}
 8001d02:	af00      	add	r7, sp, #0
	// Function called on TIM4 overflow interrupt
	TIM2->CCR2 = 0;
 8001d04:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001d08:	2200      	movs	r2, #0
 8001d0a:	639a      	str	r2, [r3, #56]	; 0x38
	TIM2->CCR4 = 0;
 8001d0c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001d10:	2200      	movs	r2, #0
 8001d12:	641a      	str	r2, [r3, #64]	; 0x40

	//todelete
	TIM3->CCR3 = 0;
 8001d14:	4b05      	ldr	r3, [pc, #20]	; (8001d2c <haltMotors+0x2c>)
 8001d16:	2200      	movs	r2, #0
 8001d18:	63da      	str	r2, [r3, #60]	; 0x3c

	TIM4->CNT = 0;	// reset timer counter -> clears motor timeout
 8001d1a:	4b05      	ldr	r3, [pc, #20]	; (8001d30 <haltMotors+0x30>)
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	625a      	str	r2, [r3, #36]	; 0x24
}
 8001d20:	bf00      	nop
 8001d22:	46bd      	mov	sp, r7
 8001d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d28:	4770      	bx	lr
 8001d2a:	bf00      	nop
 8001d2c:	40000400 	.word	0x40000400
 8001d30:	40000800 	.word	0x40000800

08001d34 <enableMotors>:

static void enableMotors()
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	af00      	add	r7, sp, #0
	haltMotors();
 8001d38:	f7ff ffe2 	bl	8001d00 <haltMotors>

	MAX_PWM_FREQ = 42000000 / (2 * PWM_RESOLUTION); // 82031 Hz for 256 resolution
 8001d3c:	4b1e      	ldr	r3, [pc, #120]	; (8001db8 <enableMotors+0x84>)
 8001d3e:	4a1f      	ldr	r2, [pc, #124]	; (8001dbc <enableMotors+0x88>)
 8001d40:	601a      	str	r2, [r3, #0]
	setPwmFrequency(MAX_PWM_FREQ);
 8001d42:	4b1d      	ldr	r3, [pc, #116]	; (8001db8 <enableMotors+0x84>)
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	4618      	mov	r0, r3
 8001d48:	f000 f842 	bl	8001dd0 <setPwmFrequency>

	motL_forward = true;
 8001d4c:	4b1c      	ldr	r3, [pc, #112]	; (8001dc0 <enableMotors+0x8c>)
 8001d4e:	2201      	movs	r2, #1
 8001d50:	701a      	strb	r2, [r3, #0]
	motR_forward = true;
 8001d52:	4b1c      	ldr	r3, [pc, #112]	; (8001dc4 <enableMotors+0x90>)
 8001d54:	2201      	movs	r2, #1
 8001d56:	701a      	strb	r2, [r3, #0]

	// flip direction based on config
	HAL_GPIO_WritePin(PH_L_GPIO_Port, PH_L_Pin, motL_forward ^ MOTOR_L_DIR);
 8001d58:	4b19      	ldr	r3, [pc, #100]	; (8001dc0 <enableMotors+0x8c>)
 8001d5a:	781b      	ldrb	r3, [r3, #0]
 8001d5c:	f083 0301 	eor.w	r3, r3, #1
 8001d60:	b2db      	uxtb	r3, r3
 8001d62:	461a      	mov	r2, r3
 8001d64:	2101      	movs	r1, #1
 8001d66:	4818      	ldr	r0, [pc, #96]	; (8001dc8 <enableMotors+0x94>)
 8001d68:	f001 ffce 	bl	8003d08 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PH_R_GPIO_Port, PH_R_Pin, motR_forward ^ MOTOR_R_DIR);
 8001d6c:	4b15      	ldr	r3, [pc, #84]	; (8001dc4 <enableMotors+0x90>)
 8001d6e:	781b      	ldrb	r3, [r3, #0]
 8001d70:	f083 0301 	eor.w	r3, r3, #1
 8001d74:	b2db      	uxtb	r3, r3
 8001d76:	461a      	mov	r2, r3
 8001d78:	2104      	movs	r1, #4
 8001d7a:	4813      	ldr	r0, [pc, #76]	; (8001dc8 <enableMotors+0x94>)
 8001d7c:	f001 ffc4 	bl	8003d08 <HAL_GPIO_WritePin>

	HAL_TIM_PWM_Start(Get_TIM2_Instance(), TIM_CHANNEL_2);
 8001d80:	f000 fd0c 	bl	800279c <Get_TIM2_Instance>
 8001d84:	4603      	mov	r3, r0
 8001d86:	2104      	movs	r1, #4
 8001d88:	4618      	mov	r0, r3
 8001d8a:	f006 f9cb 	bl	8008124 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(Get_TIM2_Instance(), TIM_CHANNEL_4);
 8001d8e:	f000 fd05 	bl	800279c <Get_TIM2_Instance>
 8001d92:	4603      	mov	r3, r0
 8001d94:	210c      	movs	r1, #12
 8001d96:	4618      	mov	r0, r3
 8001d98:	f006 f9c4 	bl	8008124 <HAL_TIM_PWM_Start>

	//todelete
	HAL_TIM_PWM_Start(Get_TIM3_Instance(), TIM_CHANNEL_3);
 8001d9c:	f000 fd08 	bl	80027b0 <Get_TIM3_Instance>
 8001da0:	4603      	mov	r3, r0
 8001da2:	2108      	movs	r1, #8
 8001da4:	4618      	mov	r0, r3
 8001da6:	f006 f9bd 	bl	8008124 <HAL_TIM_PWM_Start>

	haltMotors();
 8001daa:	f7ff ffa9 	bl	8001d00 <haltMotors>
	println("[MOT] MOTORS ENABLED!!");
 8001dae:	4807      	ldr	r0, [pc, #28]	; (8001dcc <enableMotors+0x98>)
 8001db0:	f7ff fce2 	bl	8001778 <println>
}
 8001db4:	bf00      	nop
 8001db6:	bd80      	pop	{r7, pc}
 8001db8:	20000000 	.word	0x20000000
 8001dbc:	0001406f 	.word	0x0001406f
 8001dc0:	20000004 	.word	0x20000004
 8001dc4:	20000005 	.word	0x20000005
 8001dc8:	40020000 	.word	0x40020000
 8001dcc:	08011ef8 	.word	0x08011ef8

08001dd0 <setPwmFrequency>:
	HAL_TIM_PWM_Stop(Get_TIM2_Instance(), TIM_CHANNEL_2);
	HAL_TIM_PWM_Stop(Get_TIM2_Instance(), TIM_CHANNEL_4);
}

static void setPwmFrequency(uint32_t f_hz)
{
 8001dd0:	b590      	push	{r4, r7, lr}
 8001dd2:	b083      	sub	sp, #12
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	6078      	str	r0, [r7, #4]
	// ARR = Clock frequency / (2 * Frequency)
	// Clock frequency (42MHz) = Source frequency (42Mhz) / PSC (1)

	//TIM2->ARR = (uint32_t)(42000000 / TIM2->PSC) / (2 * f_hz);

	if (f_hz > MAX_PWM_FREQ)
 8001dd8:	4b23      	ldr	r3, [pc, #140]	; (8001e68 <setPwmFrequency+0x98>)
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	687a      	ldr	r2, [r7, #4]
 8001dde:	429a      	cmp	r2, r3
 8001de0:	d908      	bls.n	8001df4 <setPwmFrequency+0x24>
	{
		println("[MOT] PWM frequency too high! Setting maximum.");
 8001de2:	4822      	ldr	r0, [pc, #136]	; (8001e6c <setPwmFrequency+0x9c>)
 8001de4:	f7ff fcc8 	bl	8001778 <println>
		setPwmFrequency(MAX_PWM_FREQ);
 8001de8:	4b1f      	ldr	r3, [pc, #124]	; (8001e68 <setPwmFrequency+0x98>)
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	4618      	mov	r0, r3
 8001dee:	f7ff ffef 	bl	8001dd0 <setPwmFrequency>
		//todelete
		TIM3->CNT = 0;
		TIM3->ARR = 42000000 / (2 * f_hz);

	}
}
 8001df2:	e034      	b.n	8001e5e <setPwmFrequency+0x8e>
		TIM2->CNT = 0;
 8001df4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001df8:	2200      	movs	r2, #0
 8001dfa:	625a      	str	r2, [r3, #36]	; 0x24
		TIM2->ARR = 42000000 / (2 * f_hz);
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	005b      	lsls	r3, r3, #1
 8001e00:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001e04:	491a      	ldr	r1, [pc, #104]	; (8001e70 <setPwmFrequency+0xa0>)
 8001e06:	fbb1 f3f3 	udiv	r3, r1, r3
 8001e0a:	62d3      	str	r3, [r2, #44]	; 0x2c
		printLen = sprintf(printBuffer, "[MOT] Frequency set to: %fMhz", (float)(f_hz / 1000000));
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	4a19      	ldr	r2, [pc, #100]	; (8001e74 <setPwmFrequency+0xa4>)
 8001e10:	fba2 2303 	umull	r2, r3, r2, r3
 8001e14:	0c9b      	lsrs	r3, r3, #18
 8001e16:	ee07 3a90 	vmov	s15, r3
 8001e1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001e1e:	ee17 0a90 	vmov	r0, s15
 8001e22:	f7fe fb91 	bl	8000548 <__aeabi_f2d>
 8001e26:	4603      	mov	r3, r0
 8001e28:	460c      	mov	r4, r1
 8001e2a:	461a      	mov	r2, r3
 8001e2c:	4623      	mov	r3, r4
 8001e2e:	4912      	ldr	r1, [pc, #72]	; (8001e78 <setPwmFrequency+0xa8>)
 8001e30:	4812      	ldr	r0, [pc, #72]	; (8001e7c <setPwmFrequency+0xac>)
 8001e32:	f00c fec7 	bl	800ebc4 <siprintf>
 8001e36:	4603      	mov	r3, r0
 8001e38:	461a      	mov	r2, r3
 8001e3a:	4b11      	ldr	r3, [pc, #68]	; (8001e80 <setPwmFrequency+0xb0>)
 8001e3c:	601a      	str	r2, [r3, #0]
		printv(printBuffer, printLen);
 8001e3e:	4b10      	ldr	r3, [pc, #64]	; (8001e80 <setPwmFrequency+0xb0>)
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	4619      	mov	r1, r3
 8001e44:	480d      	ldr	r0, [pc, #52]	; (8001e7c <setPwmFrequency+0xac>)
 8001e46:	f7ff fcd9 	bl	80017fc <printv>
		TIM3->CNT = 0;
 8001e4a:	4b0e      	ldr	r3, [pc, #56]	; (8001e84 <setPwmFrequency+0xb4>)
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	625a      	str	r2, [r3, #36]	; 0x24
		TIM3->ARR = 42000000 / (2 * f_hz);
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	005b      	lsls	r3, r3, #1
 8001e54:	4a0b      	ldr	r2, [pc, #44]	; (8001e84 <setPwmFrequency+0xb4>)
 8001e56:	4906      	ldr	r1, [pc, #24]	; (8001e70 <setPwmFrequency+0xa0>)
 8001e58:	fbb1 f3f3 	udiv	r3, r1, r3
 8001e5c:	62d3      	str	r3, [r2, #44]	; 0x2c
}
 8001e5e:	bf00      	nop
 8001e60:	370c      	adds	r7, #12
 8001e62:	46bd      	mov	sp, r7
 8001e64:	bd90      	pop	{r4, r7, pc}
 8001e66:	bf00      	nop
 8001e68:	20000000 	.word	0x20000000
 8001e6c:	08011f10 	.word	0x08011f10
 8001e70:	0280de80 	.word	0x0280de80
 8001e74:	431bde83 	.word	0x431bde83
 8001e78:	08011f40 	.word	0x08011f40
 8001e7c:	20000578 	.word	0x20000578
 8001e80:	20000574 	.word	0x20000574
 8001e84:	40000400 	.word	0x40000400

08001e88 <setMotorTimeout>:

static void setMotorTimeout(uint32_t timeout_ms)
{
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	b082      	sub	sp, #8
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	6078      	str	r0, [r7, #4]
	TIM4->CNT = 0;
 8001e90:	4b0d      	ldr	r3, [pc, #52]	; (8001ec8 <setMotorTimeout+0x40>)
 8001e92:	2200      	movs	r2, #0
 8001e94:	625a      	str	r2, [r3, #36]	; 0x24
	TIM4->ARR = timeout_ms;
 8001e96:	4a0c      	ldr	r2, [pc, #48]	; (8001ec8 <setMotorTimeout+0x40>)
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	62d3      	str	r3, [r2, #44]	; 0x2c
	printLen = sprintf(printBuffer, "[MOT] Timeout set to: %dms", (uint16_t)timeout_ms);
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	b29b      	uxth	r3, r3
 8001ea0:	461a      	mov	r2, r3
 8001ea2:	490a      	ldr	r1, [pc, #40]	; (8001ecc <setMotorTimeout+0x44>)
 8001ea4:	480a      	ldr	r0, [pc, #40]	; (8001ed0 <setMotorTimeout+0x48>)
 8001ea6:	f00c fe8d 	bl	800ebc4 <siprintf>
 8001eaa:	4603      	mov	r3, r0
 8001eac:	461a      	mov	r2, r3
 8001eae:	4b09      	ldr	r3, [pc, #36]	; (8001ed4 <setMotorTimeout+0x4c>)
 8001eb0:	601a      	str	r2, [r3, #0]
	printv(printBuffer, printLen);
 8001eb2:	4b08      	ldr	r3, [pc, #32]	; (8001ed4 <setMotorTimeout+0x4c>)
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	4619      	mov	r1, r3
 8001eb8:	4805      	ldr	r0, [pc, #20]	; (8001ed0 <setMotorTimeout+0x48>)
 8001eba:	f7ff fc9f 	bl	80017fc <printv>
}
 8001ebe:	bf00      	nop
 8001ec0:	3708      	adds	r7, #8
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	bd80      	pop	{r7, pc}
 8001ec6:	bf00      	nop
 8001ec8:	40000800 	.word	0x40000800
 8001ecc:	08011f60 	.word	0x08011f60
 8001ed0:	20000578 	.word	0x20000578
 8001ed4:	20000574 	.word	0x20000574

08001ed8 <motorTimeout>:

static void motorTimeout()
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	af00      	add	r7, sp, #0
	haltMotors();
 8001edc:	f7ff ff10 	bl	8001d00 <haltMotors>
	println("[MOT] Motors halted due to timeout!");
 8001ee0:	4802      	ldr	r0, [pc, #8]	; (8001eec <motorTimeout+0x14>)
 8001ee2:	f7ff fc49 	bl	8001778 <println>
}
 8001ee6:	bf00      	nop
 8001ee8:	bd80      	pop	{r7, pc}
 8001eea:	bf00      	nop
 8001eec:	08011f7c 	.word	0x08011f7c

08001ef0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001ef4:	f001 f814 	bl	8002f20 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001ef8:	f000 f824 	bl	8001f44 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001efc:	f000 fb5a 	bl	80025b4 <MX_GPIO_Init>
  MX_DMA_Init();
 8001f00:	f000 fb30 	bl	8002564 <MX_DMA_Init>
  MX_SDIO_SD_Init();
 8001f04:	f000 f928 	bl	8002158 <MX_SDIO_SD_Init>
  MX_FATFS_Init();
 8001f08:	f009 fba2 	bl	800b650 <MX_FATFS_Init>
  MX_I2C1_Init();
 8001f0c:	f000 f89c 	bl	8002048 <MX_I2C1_Init>
  MX_USB_DEVICE_Init();
 8001f10:	f00b f9ea 	bl	800d2e8 <MX_USB_DEVICE_Init>
  MX_SPI1_Init();
 8001f14:	f000 f940 	bl	8002198 <MX_SPI1_Init>
  MX_USART3_UART_Init();
 8001f18:	f000 fafa 	bl	8002510 <MX_USART3_UART_Init>
  MX_RTC_Init();
 8001f1c:	f000 f8c2 	bl	80020a4 <MX_RTC_Init>
  MX_TIM2_Init();
 8001f20:	f000 f970 	bl	8002204 <MX_TIM2_Init>
  MX_TIM5_Init();
 8001f24:	f000 faa6 	bl	8002474 <MX_TIM5_Init>
  MX_TIM3_Init();
 8001f28:	f000 f9e0 	bl	80022ec <MX_TIM3_Init>
  MX_TIM4_Init();
 8001f2c:	f000 fa54 	bl	80023d8 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  setup();
 8001f30:	f7ff fc84 	bl	800183c <setup>

  // Start motor timeout interrupt timer
  HAL_TIM_Base_Start(&htim4);
 8001f34:	4802      	ldr	r0, [pc, #8]	; (8001f40 <main+0x50>)
 8001f36:	f006 f89c 	bl	8008072 <HAL_TIM_Base_Start>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	loop();
 8001f3a:	f7ff fd41 	bl	80019c0 <loop>
 8001f3e:	e7fc      	b.n	8001f3a <main+0x4a>
 8001f40:	20000c6c 	.word	0x20000c6c

08001f44 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	b098      	sub	sp, #96	; 0x60
 8001f48:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001f4a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001f4e:	2230      	movs	r2, #48	; 0x30
 8001f50:	2100      	movs	r1, #0
 8001f52:	4618      	mov	r0, r3
 8001f54:	f00b ff31 	bl	800ddba <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001f58:	f107 031c 	add.w	r3, r7, #28
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	601a      	str	r2, [r3, #0]
 8001f60:	605a      	str	r2, [r3, #4]
 8001f62:	609a      	str	r2, [r3, #8]
 8001f64:	60da      	str	r2, [r3, #12]
 8001f66:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001f68:	f107 030c 	add.w	r3, r7, #12
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	601a      	str	r2, [r3, #0]
 8001f70:	605a      	str	r2, [r3, #4]
 8001f72:	609a      	str	r2, [r3, #8]
 8001f74:	60da      	str	r2, [r3, #12]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f76:	2300      	movs	r3, #0
 8001f78:	60bb      	str	r3, [r7, #8]
 8001f7a:	4b31      	ldr	r3, [pc, #196]	; (8002040 <SystemClock_Config+0xfc>)
 8001f7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f7e:	4a30      	ldr	r2, [pc, #192]	; (8002040 <SystemClock_Config+0xfc>)
 8001f80:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f84:	6413      	str	r3, [r2, #64]	; 0x40
 8001f86:	4b2e      	ldr	r3, [pc, #184]	; (8002040 <SystemClock_Config+0xfc>)
 8001f88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f8e:	60bb      	str	r3, [r7, #8]
 8001f90:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001f92:	2300      	movs	r3, #0
 8001f94:	607b      	str	r3, [r7, #4]
 8001f96:	4b2b      	ldr	r3, [pc, #172]	; (8002044 <SystemClock_Config+0x100>)
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	4a2a      	ldr	r2, [pc, #168]	; (8002044 <SystemClock_Config+0x100>)
 8001f9c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001fa0:	6013      	str	r3, [r2, #0]
 8001fa2:	4b28      	ldr	r3, [pc, #160]	; (8002044 <SystemClock_Config+0x100>)
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001faa:	607b      	str	r3, [r7, #4]
 8001fac:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 8001fae:	2305      	movs	r3, #5
 8001fb0:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001fb2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001fb6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001fb8:	2301      	movs	r3, #1
 8001fba:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001fbc:	2302      	movs	r3, #2
 8001fbe:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001fc0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001fc4:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 6;
 8001fc6:	2306      	movs	r3, #6
 8001fc8:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001fca:	23a8      	movs	r3, #168	; 0xa8
 8001fcc:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001fce:	2302      	movs	r3, #2
 8001fd0:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001fd2:	2307      	movs	r3, #7
 8001fd4:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001fd6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001fda:	4618      	mov	r0, r3
 8001fdc:	f003 f988 	bl	80052f0 <HAL_RCC_OscConfig>
 8001fe0:	4603      	mov	r3, r0
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d001      	beq.n	8001fea <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8001fe6:	f000 fc0d 	bl	8002804 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001fea:	230f      	movs	r3, #15
 8001fec:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001fee:	2302      	movs	r3, #2
 8001ff0:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001ff6:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001ffa:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001ffc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002000:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8002002:	f107 031c 	add.w	r3, r7, #28
 8002006:	2105      	movs	r1, #5
 8002008:	4618      	mov	r0, r3
 800200a:	f003 fbe1 	bl	80057d0 <HAL_RCC_ClockConfig>
 800200e:	4603      	mov	r3, r0
 8002010:	2b00      	cmp	r3, #0
 8002012:	d001      	beq.n	8002018 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8002014:	f000 fbf6 	bl	8002804 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8002018:	2302      	movs	r3, #2
 800201a:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 800201c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002020:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002022:	f107 030c 	add.w	r3, r7, #12
 8002026:	4618      	mov	r0, r3
 8002028:	f003 fd9e 	bl	8005b68 <HAL_RCCEx_PeriphCLKConfig>
 800202c:	4603      	mov	r3, r0
 800202e:	2b00      	cmp	r3, #0
 8002030:	d001      	beq.n	8002036 <SystemClock_Config+0xf2>
  {
    Error_Handler();
 8002032:	f000 fbe7 	bl	8002804 <Error_Handler>
  }
}
 8002036:	bf00      	nop
 8002038:	3760      	adds	r7, #96	; 0x60
 800203a:	46bd      	mov	sp, r7
 800203c:	bd80      	pop	{r7, pc}
 800203e:	bf00      	nop
 8002040:	40023800 	.word	0x40023800
 8002044:	40007000 	.word	0x40007000

08002048 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002048:	b580      	push	{r7, lr}
 800204a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800204c:	4b12      	ldr	r3, [pc, #72]	; (8002098 <MX_I2C1_Init+0x50>)
 800204e:	4a13      	ldr	r2, [pc, #76]	; (800209c <MX_I2C1_Init+0x54>)
 8002050:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8002052:	4b11      	ldr	r3, [pc, #68]	; (8002098 <MX_I2C1_Init+0x50>)
 8002054:	4a12      	ldr	r2, [pc, #72]	; (80020a0 <MX_I2C1_Init+0x58>)
 8002056:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002058:	4b0f      	ldr	r3, [pc, #60]	; (8002098 <MX_I2C1_Init+0x50>)
 800205a:	2200      	movs	r2, #0
 800205c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800205e:	4b0e      	ldr	r3, [pc, #56]	; (8002098 <MX_I2C1_Init+0x50>)
 8002060:	2200      	movs	r2, #0
 8002062:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002064:	4b0c      	ldr	r3, [pc, #48]	; (8002098 <MX_I2C1_Init+0x50>)
 8002066:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800206a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800206c:	4b0a      	ldr	r3, [pc, #40]	; (8002098 <MX_I2C1_Init+0x50>)
 800206e:	2200      	movs	r2, #0
 8002070:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8002072:	4b09      	ldr	r3, [pc, #36]	; (8002098 <MX_I2C1_Init+0x50>)
 8002074:	2200      	movs	r2, #0
 8002076:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002078:	4b07      	ldr	r3, [pc, #28]	; (8002098 <MX_I2C1_Init+0x50>)
 800207a:	2200      	movs	r2, #0
 800207c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800207e:	4b06      	ldr	r3, [pc, #24]	; (8002098 <MX_I2C1_Init+0x50>)
 8002080:	2200      	movs	r2, #0
 8002082:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002084:	4804      	ldr	r0, [pc, #16]	; (8002098 <MX_I2C1_Init+0x50>)
 8002086:	f001 fe71 	bl	8003d6c <HAL_I2C_Init>
 800208a:	4603      	mov	r3, r0
 800208c:	2b00      	cmp	r3, #0
 800208e:	d001      	beq.n	8002094 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002090:	f000 fbb8 	bl	8002804 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002094:	bf00      	nop
 8002096:	bd80      	pop	{r7, pc}
 8002098:	20000cec 	.word	0x20000cec
 800209c:	40005400 	.word	0x40005400
 80020a0:	000186a0 	.word	0x000186a0

080020a4 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80020a4:	b580      	push	{r7, lr}
 80020a6:	b086      	sub	sp, #24
 80020a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80020aa:	1d3b      	adds	r3, r7, #4
 80020ac:	2200      	movs	r2, #0
 80020ae:	601a      	str	r2, [r3, #0]
 80020b0:	605a      	str	r2, [r3, #4]
 80020b2:	609a      	str	r2, [r3, #8]
 80020b4:	60da      	str	r2, [r3, #12]
 80020b6:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 80020b8:	2300      	movs	r3, #0
 80020ba:	603b      	str	r3, [r7, #0]
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only 
  */
  hrtc.Instance = RTC;
 80020bc:	4b24      	ldr	r3, [pc, #144]	; (8002150 <MX_RTC_Init+0xac>)
 80020be:	4a25      	ldr	r2, [pc, #148]	; (8002154 <MX_RTC_Init+0xb0>)
 80020c0:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80020c2:	4b23      	ldr	r3, [pc, #140]	; (8002150 <MX_RTC_Init+0xac>)
 80020c4:	2200      	movs	r2, #0
 80020c6:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80020c8:	4b21      	ldr	r3, [pc, #132]	; (8002150 <MX_RTC_Init+0xac>)
 80020ca:	227f      	movs	r2, #127	; 0x7f
 80020cc:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80020ce:	4b20      	ldr	r3, [pc, #128]	; (8002150 <MX_RTC_Init+0xac>)
 80020d0:	22ff      	movs	r2, #255	; 0xff
 80020d2:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80020d4:	4b1e      	ldr	r3, [pc, #120]	; (8002150 <MX_RTC_Init+0xac>)
 80020d6:	2200      	movs	r2, #0
 80020d8:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80020da:	4b1d      	ldr	r3, [pc, #116]	; (8002150 <MX_RTC_Init+0xac>)
 80020dc:	2200      	movs	r2, #0
 80020de:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80020e0:	4b1b      	ldr	r3, [pc, #108]	; (8002150 <MX_RTC_Init+0xac>)
 80020e2:	2200      	movs	r2, #0
 80020e4:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80020e6:	481a      	ldr	r0, [pc, #104]	; (8002150 <MX_RTC_Init+0xac>)
 80020e8:	f003 fe20 	bl	8005d2c <HAL_RTC_Init>
 80020ec:	4603      	mov	r3, r0
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d001      	beq.n	80020f6 <MX_RTC_Init+0x52>
  {
    Error_Handler();
 80020f2:	f000 fb87 	bl	8002804 <Error_Handler>
    
  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date 
  */
  sTime.Hours = 0x0;
 80020f6:	2300      	movs	r3, #0
 80020f8:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 80020fa:	2300      	movs	r3, #0
 80020fc:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 80020fe:	2300      	movs	r3, #0
 8002100:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8002102:	2300      	movs	r3, #0
 8002104:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8002106:	2300      	movs	r3, #0
 8002108:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 800210a:	1d3b      	adds	r3, r7, #4
 800210c:	2201      	movs	r2, #1
 800210e:	4619      	mov	r1, r3
 8002110:	480f      	ldr	r0, [pc, #60]	; (8002150 <MX_RTC_Init+0xac>)
 8002112:	f003 fe9c 	bl	8005e4e <HAL_RTC_SetTime>
 8002116:	4603      	mov	r3, r0
 8002118:	2b00      	cmp	r3, #0
 800211a:	d001      	beq.n	8002120 <MX_RTC_Init+0x7c>
  {
    Error_Handler();
 800211c:	f000 fb72 	bl	8002804 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8002120:	2301      	movs	r3, #1
 8002122:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8002124:	2301      	movs	r3, #1
 8002126:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x1;
 8002128:	2301      	movs	r3, #1
 800212a:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x20;
 800212c:	2320      	movs	r3, #32
 800212e:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8002130:	463b      	mov	r3, r7
 8002132:	2201      	movs	r2, #1
 8002134:	4619      	mov	r1, r3
 8002136:	4806      	ldr	r0, [pc, #24]	; (8002150 <MX_RTC_Init+0xac>)
 8002138:	f003 ff46 	bl	8005fc8 <HAL_RTC_SetDate>
 800213c:	4603      	mov	r3, r0
 800213e:	2b00      	cmp	r3, #0
 8002140:	d001      	beq.n	8002146 <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 8002142:	f000 fb5f 	bl	8002804 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8002146:	bf00      	nop
 8002148:	3718      	adds	r7, #24
 800214a:	46bd      	mov	sp, r7
 800214c:	bd80      	pop	{r7, pc}
 800214e:	bf00      	nop
 8002150:	20000dc0 	.word	0x20000dc0
 8002154:	40002800 	.word	0x40002800

08002158 <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 8002158:	b480      	push	{r7}
 800215a:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 800215c:	4b0c      	ldr	r3, [pc, #48]	; (8002190 <MX_SDIO_SD_Init+0x38>)
 800215e:	4a0d      	ldr	r2, [pc, #52]	; (8002194 <MX_SDIO_SD_Init+0x3c>)
 8002160:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 8002162:	4b0b      	ldr	r3, [pc, #44]	; (8002190 <MX_SDIO_SD_Init+0x38>)
 8002164:	2200      	movs	r2, #0
 8002166:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8002168:	4b09      	ldr	r3, [pc, #36]	; (8002190 <MX_SDIO_SD_Init+0x38>)
 800216a:	2200      	movs	r2, #0
 800216c:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 800216e:	4b08      	ldr	r3, [pc, #32]	; (8002190 <MX_SDIO_SD_Init+0x38>)
 8002170:	2200      	movs	r2, #0
 8002172:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 8002174:	4b06      	ldr	r3, [pc, #24]	; (8002190 <MX_SDIO_SD_Init+0x38>)
 8002176:	2200      	movs	r2, #0
 8002178:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 800217a:	4b05      	ldr	r3, [pc, #20]	; (8002190 <MX_SDIO_SD_Init+0x38>)
 800217c:	2200      	movs	r2, #0
 800217e:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 0;
 8002180:	4b03      	ldr	r3, [pc, #12]	; (8002190 <MX_SDIO_SD_Init+0x38>)
 8002182:	2200      	movs	r2, #0
 8002184:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 8002186:	bf00      	nop
 8002188:	46bd      	mov	sp, r7
 800218a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218e:	4770      	bx	lr
 8002190:	20000e40 	.word	0x20000e40
 8002194:	40012c00 	.word	0x40012c00

08002198 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8002198:	b580      	push	{r7, lr}
 800219a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800219c:	4b17      	ldr	r3, [pc, #92]	; (80021fc <MX_SPI1_Init+0x64>)
 800219e:	4a18      	ldr	r2, [pc, #96]	; (8002200 <MX_SPI1_Init+0x68>)
 80021a0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80021a2:	4b16      	ldr	r3, [pc, #88]	; (80021fc <MX_SPI1_Init+0x64>)
 80021a4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80021a8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80021aa:	4b14      	ldr	r3, [pc, #80]	; (80021fc <MX_SPI1_Init+0x64>)
 80021ac:	2200      	movs	r2, #0
 80021ae:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80021b0:	4b12      	ldr	r3, [pc, #72]	; (80021fc <MX_SPI1_Init+0x64>)
 80021b2:	2200      	movs	r2, #0
 80021b4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80021b6:	4b11      	ldr	r3, [pc, #68]	; (80021fc <MX_SPI1_Init+0x64>)
 80021b8:	2200      	movs	r2, #0
 80021ba:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80021bc:	4b0f      	ldr	r3, [pc, #60]	; (80021fc <MX_SPI1_Init+0x64>)
 80021be:	2200      	movs	r2, #0
 80021c0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80021c2:	4b0e      	ldr	r3, [pc, #56]	; (80021fc <MX_SPI1_Init+0x64>)
 80021c4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80021c8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80021ca:	4b0c      	ldr	r3, [pc, #48]	; (80021fc <MX_SPI1_Init+0x64>)
 80021cc:	2200      	movs	r2, #0
 80021ce:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80021d0:	4b0a      	ldr	r3, [pc, #40]	; (80021fc <MX_SPI1_Init+0x64>)
 80021d2:	2200      	movs	r2, #0
 80021d4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80021d6:	4b09      	ldr	r3, [pc, #36]	; (80021fc <MX_SPI1_Init+0x64>)
 80021d8:	2200      	movs	r2, #0
 80021da:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80021dc:	4b07      	ldr	r3, [pc, #28]	; (80021fc <MX_SPI1_Init+0x64>)
 80021de:	2200      	movs	r2, #0
 80021e0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80021e2:	4b06      	ldr	r3, [pc, #24]	; (80021fc <MX_SPI1_Init+0x64>)
 80021e4:	220a      	movs	r2, #10
 80021e6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80021e8:	4804      	ldr	r0, [pc, #16]	; (80021fc <MX_SPI1_Init+0x64>)
 80021ea:	f005 fb23 	bl	8007834 <HAL_SPI_Init>
 80021ee:	4603      	mov	r3, r0
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d001      	beq.n	80021f8 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80021f4:	f000 fb06 	bl	8002804 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80021f8:	bf00      	nop
 80021fa:	bd80      	pop	{r7, pc}
 80021fc:	20000ec4 	.word	0x20000ec4
 8002200:	40013000 	.word	0x40013000

08002204 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002204:	b580      	push	{r7, lr}
 8002206:	b08e      	sub	sp, #56	; 0x38
 8002208:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800220a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800220e:	2200      	movs	r2, #0
 8002210:	601a      	str	r2, [r3, #0]
 8002212:	605a      	str	r2, [r3, #4]
 8002214:	609a      	str	r2, [r3, #8]
 8002216:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002218:	f107 0320 	add.w	r3, r7, #32
 800221c:	2200      	movs	r2, #0
 800221e:	601a      	str	r2, [r3, #0]
 8002220:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002222:	1d3b      	adds	r3, r7, #4
 8002224:	2200      	movs	r2, #0
 8002226:	601a      	str	r2, [r3, #0]
 8002228:	605a      	str	r2, [r3, #4]
 800222a:	609a      	str	r2, [r3, #8]
 800222c:	60da      	str	r2, [r3, #12]
 800222e:	611a      	str	r2, [r3, #16]
 8002230:	615a      	str	r2, [r3, #20]
 8002232:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002234:	4b2c      	ldr	r3, [pc, #176]	; (80022e8 <MX_TIM2_Init+0xe4>)
 8002236:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800223a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800223c:	4b2a      	ldr	r3, [pc, #168]	; (80022e8 <MX_TIM2_Init+0xe4>)
 800223e:	2200      	movs	r2, #0
 8002240:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED2;
 8002242:	4b29      	ldr	r3, [pc, #164]	; (80022e8 <MX_TIM2_Init+0xe4>)
 8002244:	2240      	movs	r2, #64	; 0x40
 8002246:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0;
 8002248:	4b27      	ldr	r3, [pc, #156]	; (80022e8 <MX_TIM2_Init+0xe4>)
 800224a:	2200      	movs	r2, #0
 800224c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800224e:	4b26      	ldr	r3, [pc, #152]	; (80022e8 <MX_TIM2_Init+0xe4>)
 8002250:	2200      	movs	r2, #0
 8002252:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002254:	4b24      	ldr	r3, [pc, #144]	; (80022e8 <MX_TIM2_Init+0xe4>)
 8002256:	2200      	movs	r2, #0
 8002258:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800225a:	4823      	ldr	r0, [pc, #140]	; (80022e8 <MX_TIM2_Init+0xe4>)
 800225c:	f005 fede 	bl	800801c <HAL_TIM_Base_Init>
 8002260:	4603      	mov	r3, r0
 8002262:	2b00      	cmp	r3, #0
 8002264:	d001      	beq.n	800226a <MX_TIM2_Init+0x66>
  {
    Error_Handler();
 8002266:	f000 facd 	bl	8002804 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800226a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800226e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002270:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002274:	4619      	mov	r1, r3
 8002276:	481c      	ldr	r0, [pc, #112]	; (80022e8 <MX_TIM2_Init+0xe4>)
 8002278:	f006 f960 	bl	800853c <HAL_TIM_ConfigClockSource>
 800227c:	4603      	mov	r3, r0
 800227e:	2b00      	cmp	r3, #0
 8002280:	d001      	beq.n	8002286 <MX_TIM2_Init+0x82>
  {
    Error_Handler();
 8002282:	f000 fabf 	bl	8002804 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8002286:	4818      	ldr	r0, [pc, #96]	; (80022e8 <MX_TIM2_Init+0xe4>)
 8002288:	f005 ff17 	bl	80080ba <HAL_TIM_PWM_Init>
 800228c:	4603      	mov	r3, r0
 800228e:	2b00      	cmp	r3, #0
 8002290:	d001      	beq.n	8002296 <MX_TIM2_Init+0x92>
  {
    Error_Handler();
 8002292:	f000 fab7 	bl	8002804 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002296:	2300      	movs	r3, #0
 8002298:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800229a:	2300      	movs	r3, #0
 800229c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800229e:	f107 0320 	add.w	r3, r7, #32
 80022a2:	4619      	mov	r1, r3
 80022a4:	4810      	ldr	r0, [pc, #64]	; (80022e8 <MX_TIM2_Init+0xe4>)
 80022a6:	f006 fd39 	bl	8008d1c <HAL_TIMEx_MasterConfigSynchronization>
 80022aa:	4603      	mov	r3, r0
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d001      	beq.n	80022b4 <MX_TIM2_Init+0xb0>
  {
    Error_Handler();
 80022b0:	f000 faa8 	bl	8002804 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 80022b4:	2370      	movs	r3, #112	; 0x70
 80022b6:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80022b8:	2300      	movs	r3, #0
 80022ba:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80022bc:	2300      	movs	r3, #0
 80022be:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80022c0:	2300      	movs	r3, #0
 80022c2:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80022c4:	1d3b      	adds	r3, r7, #4
 80022c6:	220c      	movs	r2, #12
 80022c8:	4619      	mov	r1, r3
 80022ca:	4807      	ldr	r0, [pc, #28]	; (80022e8 <MX_TIM2_Init+0xe4>)
 80022cc:	f006 f870 	bl	80083b0 <HAL_TIM_PWM_ConfigChannel>
 80022d0:	4603      	mov	r3, r0
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d001      	beq.n	80022da <MX_TIM2_Init+0xd6>
  {
    Error_Handler();
 80022d6:	f000 fa95 	bl	8002804 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80022da:	4803      	ldr	r0, [pc, #12]	; (80022e8 <MX_TIM2_Init+0xe4>)
 80022dc:	f000 fcd0 	bl	8002c80 <HAL_TIM_MspPostInit>

}
 80022e0:	bf00      	nop
 80022e2:	3738      	adds	r7, #56	; 0x38
 80022e4:	46bd      	mov	sp, r7
 80022e6:	bd80      	pop	{r7, pc}
 80022e8:	20000f1c 	.word	0x20000f1c

080022ec <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80022ec:	b580      	push	{r7, lr}
 80022ee:	b08e      	sub	sp, #56	; 0x38
 80022f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80022f2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80022f6:	2200      	movs	r2, #0
 80022f8:	601a      	str	r2, [r3, #0]
 80022fa:	605a      	str	r2, [r3, #4]
 80022fc:	609a      	str	r2, [r3, #8]
 80022fe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002300:	f107 0320 	add.w	r3, r7, #32
 8002304:	2200      	movs	r2, #0
 8002306:	601a      	str	r2, [r3, #0]
 8002308:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800230a:	1d3b      	adds	r3, r7, #4
 800230c:	2200      	movs	r2, #0
 800230e:	601a      	str	r2, [r3, #0]
 8002310:	605a      	str	r2, [r3, #4]
 8002312:	609a      	str	r2, [r3, #8]
 8002314:	60da      	str	r2, [r3, #12]
 8002316:	611a      	str	r2, [r3, #16]
 8002318:	615a      	str	r2, [r3, #20]
 800231a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800231c:	4b2c      	ldr	r3, [pc, #176]	; (80023d0 <MX_TIM3_Init+0xe4>)
 800231e:	4a2d      	ldr	r2, [pc, #180]	; (80023d4 <MX_TIM3_Init+0xe8>)
 8002320:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8002322:	4b2b      	ldr	r3, [pc, #172]	; (80023d0 <MX_TIM3_Init+0xe4>)
 8002324:	2200      	movs	r2, #0
 8002326:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED2;
 8002328:	4b29      	ldr	r3, [pc, #164]	; (80023d0 <MX_TIM3_Init+0xe4>)
 800232a:	2240      	movs	r2, #64	; 0x40
 800232c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 0;
 800232e:	4b28      	ldr	r3, [pc, #160]	; (80023d0 <MX_TIM3_Init+0xe4>)
 8002330:	2200      	movs	r2, #0
 8002332:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002334:	4b26      	ldr	r3, [pc, #152]	; (80023d0 <MX_TIM3_Init+0xe4>)
 8002336:	2200      	movs	r2, #0
 8002338:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800233a:	4b25      	ldr	r3, [pc, #148]	; (80023d0 <MX_TIM3_Init+0xe4>)
 800233c:	2200      	movs	r2, #0
 800233e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002340:	4823      	ldr	r0, [pc, #140]	; (80023d0 <MX_TIM3_Init+0xe4>)
 8002342:	f005 fe6b 	bl	800801c <HAL_TIM_Base_Init>
 8002346:	4603      	mov	r3, r0
 8002348:	2b00      	cmp	r3, #0
 800234a:	d001      	beq.n	8002350 <MX_TIM3_Init+0x64>
  {
    Error_Handler();
 800234c:	f000 fa5a 	bl	8002804 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002350:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002354:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002356:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800235a:	4619      	mov	r1, r3
 800235c:	481c      	ldr	r0, [pc, #112]	; (80023d0 <MX_TIM3_Init+0xe4>)
 800235e:	f006 f8ed 	bl	800853c <HAL_TIM_ConfigClockSource>
 8002362:	4603      	mov	r3, r0
 8002364:	2b00      	cmp	r3, #0
 8002366:	d001      	beq.n	800236c <MX_TIM3_Init+0x80>
  {
    Error_Handler();
 8002368:	f000 fa4c 	bl	8002804 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800236c:	4818      	ldr	r0, [pc, #96]	; (80023d0 <MX_TIM3_Init+0xe4>)
 800236e:	f005 fea4 	bl	80080ba <HAL_TIM_PWM_Init>
 8002372:	4603      	mov	r3, r0
 8002374:	2b00      	cmp	r3, #0
 8002376:	d001      	beq.n	800237c <MX_TIM3_Init+0x90>
  {
    Error_Handler();
 8002378:	f000 fa44 	bl	8002804 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800237c:	2300      	movs	r3, #0
 800237e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002380:	2300      	movs	r3, #0
 8002382:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002384:	f107 0320 	add.w	r3, r7, #32
 8002388:	4619      	mov	r1, r3
 800238a:	4811      	ldr	r0, [pc, #68]	; (80023d0 <MX_TIM3_Init+0xe4>)
 800238c:	f006 fcc6 	bl	8008d1c <HAL_TIMEx_MasterConfigSynchronization>
 8002390:	4603      	mov	r3, r0
 8002392:	2b00      	cmp	r3, #0
 8002394:	d001      	beq.n	800239a <MX_TIM3_Init+0xae>
  {
    Error_Handler();
 8002396:	f000 fa35 	bl	8002804 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 800239a:	2370      	movs	r3, #112	; 0x70
 800239c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800239e:	2300      	movs	r3, #0
 80023a0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80023a2:	2300      	movs	r3, #0
 80023a4:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80023a6:	2300      	movs	r3, #0
 80023a8:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80023aa:	1d3b      	adds	r3, r7, #4
 80023ac:	2208      	movs	r2, #8
 80023ae:	4619      	mov	r1, r3
 80023b0:	4807      	ldr	r0, [pc, #28]	; (80023d0 <MX_TIM3_Init+0xe4>)
 80023b2:	f005 fffd 	bl	80083b0 <HAL_TIM_PWM_ConfigChannel>
 80023b6:	4603      	mov	r3, r0
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d001      	beq.n	80023c0 <MX_TIM3_Init+0xd4>
  {
    Error_Handler();
 80023bc:	f000 fa22 	bl	8002804 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80023c0:	4803      	ldr	r0, [pc, #12]	; (80023d0 <MX_TIM3_Init+0xe4>)
 80023c2:	f000 fc5d 	bl	8002c80 <HAL_TIM_MspPostInit>

}
 80023c6:	bf00      	nop
 80023c8:	3738      	adds	r7, #56	; 0x38
 80023ca:	46bd      	mov	sp, r7
 80023cc:	bd80      	pop	{r7, pc}
 80023ce:	bf00      	nop
 80023d0:	20000d80 	.word	0x20000d80
 80023d4:	40000400 	.word	0x40000400

080023d8 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80023d8:	b580      	push	{r7, lr}
 80023da:	b086      	sub	sp, #24
 80023dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80023de:	f107 0308 	add.w	r3, r7, #8
 80023e2:	2200      	movs	r2, #0
 80023e4:	601a      	str	r2, [r3, #0]
 80023e6:	605a      	str	r2, [r3, #4]
 80023e8:	609a      	str	r2, [r3, #8]
 80023ea:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80023ec:	463b      	mov	r3, r7
 80023ee:	2200      	movs	r2, #0
 80023f0:	601a      	str	r2, [r3, #0]
 80023f2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80023f4:	4b1d      	ldr	r3, [pc, #116]	; (800246c <MX_TIM4_Init+0x94>)
 80023f6:	4a1e      	ldr	r2, [pc, #120]	; (8002470 <MX_TIM4_Init+0x98>)
 80023f8:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 41999;
 80023fa:	4b1c      	ldr	r3, [pc, #112]	; (800246c <MX_TIM4_Init+0x94>)
 80023fc:	f24a 420f 	movw	r2, #41999	; 0xa40f
 8002400:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002402:	4b1a      	ldr	r3, [pc, #104]	; (800246c <MX_TIM4_Init+0x94>)
 8002404:	2200      	movs	r2, #0
 8002406:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 100;
 8002408:	4b18      	ldr	r3, [pc, #96]	; (800246c <MX_TIM4_Init+0x94>)
 800240a:	2264      	movs	r2, #100	; 0x64
 800240c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800240e:	4b17      	ldr	r3, [pc, #92]	; (800246c <MX_TIM4_Init+0x94>)
 8002410:	2200      	movs	r2, #0
 8002412:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002414:	4b15      	ldr	r3, [pc, #84]	; (800246c <MX_TIM4_Init+0x94>)
 8002416:	2200      	movs	r2, #0
 8002418:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800241a:	4814      	ldr	r0, [pc, #80]	; (800246c <MX_TIM4_Init+0x94>)
 800241c:	f005 fdfe 	bl	800801c <HAL_TIM_Base_Init>
 8002420:	4603      	mov	r3, r0
 8002422:	2b00      	cmp	r3, #0
 8002424:	d001      	beq.n	800242a <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 8002426:	f000 f9ed 	bl	8002804 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800242a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800242e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8002430:	f107 0308 	add.w	r3, r7, #8
 8002434:	4619      	mov	r1, r3
 8002436:	480d      	ldr	r0, [pc, #52]	; (800246c <MX_TIM4_Init+0x94>)
 8002438:	f006 f880 	bl	800853c <HAL_TIM_ConfigClockSource>
 800243c:	4603      	mov	r3, r0
 800243e:	2b00      	cmp	r3, #0
 8002440:	d001      	beq.n	8002446 <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 8002442:	f000 f9df 	bl	8002804 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002446:	2300      	movs	r3, #0
 8002448:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800244a:	2300      	movs	r3, #0
 800244c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800244e:	463b      	mov	r3, r7
 8002450:	4619      	mov	r1, r3
 8002452:	4806      	ldr	r0, [pc, #24]	; (800246c <MX_TIM4_Init+0x94>)
 8002454:	f006 fc62 	bl	8008d1c <HAL_TIMEx_MasterConfigSynchronization>
 8002458:	4603      	mov	r3, r0
 800245a:	2b00      	cmp	r3, #0
 800245c:	d001      	beq.n	8002462 <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 800245e:	f000 f9d1 	bl	8002804 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8002462:	bf00      	nop
 8002464:	3718      	adds	r7, #24
 8002466:	46bd      	mov	sp, r7
 8002468:	bd80      	pop	{r7, pc}
 800246a:	bf00      	nop
 800246c:	20000c6c 	.word	0x20000c6c
 8002470:	40000800 	.word	0x40000800

08002474 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8002474:	b580      	push	{r7, lr}
 8002476:	b086      	sub	sp, #24
 8002478:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800247a:	f107 0308 	add.w	r3, r7, #8
 800247e:	2200      	movs	r2, #0
 8002480:	601a      	str	r2, [r3, #0]
 8002482:	605a      	str	r2, [r3, #4]
 8002484:	609a      	str	r2, [r3, #8]
 8002486:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002488:	463b      	mov	r3, r7
 800248a:	2200      	movs	r2, #0
 800248c:	601a      	str	r2, [r3, #0]
 800248e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8002490:	4b1d      	ldr	r3, [pc, #116]	; (8002508 <MX_TIM5_Init+0x94>)
 8002492:	4a1e      	ldr	r2, [pc, #120]	; (800250c <MX_TIM5_Init+0x98>)
 8002494:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 41999;
 8002496:	4b1c      	ldr	r3, [pc, #112]	; (8002508 <MX_TIM5_Init+0x94>)
 8002498:	f24a 420f 	movw	r2, #41999	; 0xa40f
 800249c:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800249e:	4b1a      	ldr	r3, [pc, #104]	; (8002508 <MX_TIM5_Init+0x94>)
 80024a0:	2200      	movs	r2, #0
 80024a2:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 0;
 80024a4:	4b18      	ldr	r3, [pc, #96]	; (8002508 <MX_TIM5_Init+0x94>)
 80024a6:	2200      	movs	r2, #0
 80024a8:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80024aa:	4b17      	ldr	r3, [pc, #92]	; (8002508 <MX_TIM5_Init+0x94>)
 80024ac:	2200      	movs	r2, #0
 80024ae:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80024b0:	4b15      	ldr	r3, [pc, #84]	; (8002508 <MX_TIM5_Init+0x94>)
 80024b2:	2200      	movs	r2, #0
 80024b4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80024b6:	4814      	ldr	r0, [pc, #80]	; (8002508 <MX_TIM5_Init+0x94>)
 80024b8:	f005 fdb0 	bl	800801c <HAL_TIM_Base_Init>
 80024bc:	4603      	mov	r3, r0
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d001      	beq.n	80024c6 <MX_TIM5_Init+0x52>
  {
    Error_Handler();
 80024c2:	f000 f99f 	bl	8002804 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80024c6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80024ca:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80024cc:	f107 0308 	add.w	r3, r7, #8
 80024d0:	4619      	mov	r1, r3
 80024d2:	480d      	ldr	r0, [pc, #52]	; (8002508 <MX_TIM5_Init+0x94>)
 80024d4:	f006 f832 	bl	800853c <HAL_TIM_ConfigClockSource>
 80024d8:	4603      	mov	r3, r0
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d001      	beq.n	80024e2 <MX_TIM5_Init+0x6e>
  {
    Error_Handler();
 80024de:	f000 f991 	bl	8002804 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80024e2:	2300      	movs	r3, #0
 80024e4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80024e6:	2300      	movs	r3, #0
 80024e8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80024ea:	463b      	mov	r3, r7
 80024ec:	4619      	mov	r1, r3
 80024ee:	4806      	ldr	r0, [pc, #24]	; (8002508 <MX_TIM5_Init+0x94>)
 80024f0:	f006 fc14 	bl	8008d1c <HAL_TIMEx_MasterConfigSynchronization>
 80024f4:	4603      	mov	r3, r0
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d001      	beq.n	80024fe <MX_TIM5_Init+0x8a>
  {
    Error_Handler();
 80024fa:	f000 f983 	bl	8002804 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 80024fe:	bf00      	nop
 8002500:	3718      	adds	r7, #24
 8002502:	46bd      	mov	sp, r7
 8002504:	bd80      	pop	{r7, pc}
 8002506:	bf00      	nop
 8002508:	20000d40 	.word	0x20000d40
 800250c:	40000c00 	.word	0x40000c00

08002510 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8002510:	b580      	push	{r7, lr}
 8002512:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002514:	4b11      	ldr	r3, [pc, #68]	; (800255c <MX_USART3_UART_Init+0x4c>)
 8002516:	4a12      	ldr	r2, [pc, #72]	; (8002560 <MX_USART3_UART_Init+0x50>)
 8002518:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800251a:	4b10      	ldr	r3, [pc, #64]	; (800255c <MX_USART3_UART_Init+0x4c>)
 800251c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002520:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002522:	4b0e      	ldr	r3, [pc, #56]	; (800255c <MX_USART3_UART_Init+0x4c>)
 8002524:	2200      	movs	r2, #0
 8002526:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002528:	4b0c      	ldr	r3, [pc, #48]	; (800255c <MX_USART3_UART_Init+0x4c>)
 800252a:	2200      	movs	r2, #0
 800252c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800252e:	4b0b      	ldr	r3, [pc, #44]	; (800255c <MX_USART3_UART_Init+0x4c>)
 8002530:	2200      	movs	r2, #0
 8002532:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002534:	4b09      	ldr	r3, [pc, #36]	; (800255c <MX_USART3_UART_Init+0x4c>)
 8002536:	220c      	movs	r2, #12
 8002538:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800253a:	4b08      	ldr	r3, [pc, #32]	; (800255c <MX_USART3_UART_Init+0x4c>)
 800253c:	2200      	movs	r2, #0
 800253e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002540:	4b06      	ldr	r3, [pc, #24]	; (800255c <MX_USART3_UART_Init+0x4c>)
 8002542:	2200      	movs	r2, #0
 8002544:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002546:	4805      	ldr	r0, [pc, #20]	; (800255c <MX_USART3_UART_Init+0x4c>)
 8002548:	f006 fc78 	bl	8008e3c <HAL_UART_Init>
 800254c:	4603      	mov	r3, r0
 800254e:	2b00      	cmp	r3, #0
 8002550:	d001      	beq.n	8002556 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8002552:	f000 f957 	bl	8002804 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002556:	bf00      	nop
 8002558:	bd80      	pop	{r7, pc}
 800255a:	bf00      	nop
 800255c:	20000cac 	.word	0x20000cac
 8002560:	40004800 	.word	0x40004800

08002564 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 8002564:	b580      	push	{r7, lr}
 8002566:	b082      	sub	sp, #8
 8002568:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800256a:	2300      	movs	r3, #0
 800256c:	607b      	str	r3, [r7, #4]
 800256e:	4b10      	ldr	r3, [pc, #64]	; (80025b0 <MX_DMA_Init+0x4c>)
 8002570:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002572:	4a0f      	ldr	r2, [pc, #60]	; (80025b0 <MX_DMA_Init+0x4c>)
 8002574:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002578:	6313      	str	r3, [r2, #48]	; 0x30
 800257a:	4b0d      	ldr	r3, [pc, #52]	; (80025b0 <MX_DMA_Init+0x4c>)
 800257c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800257e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002582:	607b      	str	r3, [r7, #4]
 8002584:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 8002586:	2200      	movs	r2, #0
 8002588:	2100      	movs	r1, #0
 800258a:	203b      	movs	r0, #59	; 0x3b
 800258c:	f000 fe37 	bl	80031fe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8002590:	203b      	movs	r0, #59	; 0x3b
 8002592:	f000 fe50 	bl	8003236 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 8002596:	2200      	movs	r2, #0
 8002598:	2100      	movs	r1, #0
 800259a:	2045      	movs	r0, #69	; 0x45
 800259c:	f000 fe2f 	bl	80031fe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 80025a0:	2045      	movs	r0, #69	; 0x45
 80025a2:	f000 fe48 	bl	8003236 <HAL_NVIC_EnableIRQ>

}
 80025a6:	bf00      	nop
 80025a8:	3708      	adds	r7, #8
 80025aa:	46bd      	mov	sp, r7
 80025ac:	bd80      	pop	{r7, pc}
 80025ae:	bf00      	nop
 80025b0:	40023800 	.word	0x40023800

080025b4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80025b4:	b580      	push	{r7, lr}
 80025b6:	b08a      	sub	sp, #40	; 0x28
 80025b8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025ba:	f107 0314 	add.w	r3, r7, #20
 80025be:	2200      	movs	r2, #0
 80025c0:	601a      	str	r2, [r3, #0]
 80025c2:	605a      	str	r2, [r3, #4]
 80025c4:	609a      	str	r2, [r3, #8]
 80025c6:	60da      	str	r2, [r3, #12]
 80025c8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80025ca:	2300      	movs	r3, #0
 80025cc:	613b      	str	r3, [r7, #16]
 80025ce:	4b6e      	ldr	r3, [pc, #440]	; (8002788 <MX_GPIO_Init+0x1d4>)
 80025d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025d2:	4a6d      	ldr	r2, [pc, #436]	; (8002788 <MX_GPIO_Init+0x1d4>)
 80025d4:	f043 0304 	orr.w	r3, r3, #4
 80025d8:	6313      	str	r3, [r2, #48]	; 0x30
 80025da:	4b6b      	ldr	r3, [pc, #428]	; (8002788 <MX_GPIO_Init+0x1d4>)
 80025dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025de:	f003 0304 	and.w	r3, r3, #4
 80025e2:	613b      	str	r3, [r7, #16]
 80025e4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80025e6:	2300      	movs	r3, #0
 80025e8:	60fb      	str	r3, [r7, #12]
 80025ea:	4b67      	ldr	r3, [pc, #412]	; (8002788 <MX_GPIO_Init+0x1d4>)
 80025ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025ee:	4a66      	ldr	r2, [pc, #408]	; (8002788 <MX_GPIO_Init+0x1d4>)
 80025f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80025f4:	6313      	str	r3, [r2, #48]	; 0x30
 80025f6:	4b64      	ldr	r3, [pc, #400]	; (8002788 <MX_GPIO_Init+0x1d4>)
 80025f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025fe:	60fb      	str	r3, [r7, #12]
 8002600:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002602:	2300      	movs	r3, #0
 8002604:	60bb      	str	r3, [r7, #8]
 8002606:	4b60      	ldr	r3, [pc, #384]	; (8002788 <MX_GPIO_Init+0x1d4>)
 8002608:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800260a:	4a5f      	ldr	r2, [pc, #380]	; (8002788 <MX_GPIO_Init+0x1d4>)
 800260c:	f043 0301 	orr.w	r3, r3, #1
 8002610:	6313      	str	r3, [r2, #48]	; 0x30
 8002612:	4b5d      	ldr	r3, [pc, #372]	; (8002788 <MX_GPIO_Init+0x1d4>)
 8002614:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002616:	f003 0301 	and.w	r3, r3, #1
 800261a:	60bb      	str	r3, [r7, #8]
 800261c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800261e:	2300      	movs	r3, #0
 8002620:	607b      	str	r3, [r7, #4]
 8002622:	4b59      	ldr	r3, [pc, #356]	; (8002788 <MX_GPIO_Init+0x1d4>)
 8002624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002626:	4a58      	ldr	r2, [pc, #352]	; (8002788 <MX_GPIO_Init+0x1d4>)
 8002628:	f043 0302 	orr.w	r3, r3, #2
 800262c:	6313      	str	r3, [r2, #48]	; 0x30
 800262e:	4b56      	ldr	r3, [pc, #344]	; (8002788 <MX_GPIO_Init+0x1d4>)
 8002630:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002632:	f003 0302 	and.w	r3, r3, #2
 8002636:	607b      	str	r3, [r7, #4]
 8002638:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800263a:	2300      	movs	r3, #0
 800263c:	603b      	str	r3, [r7, #0]
 800263e:	4b52      	ldr	r3, [pc, #328]	; (8002788 <MX_GPIO_Init+0x1d4>)
 8002640:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002642:	4a51      	ldr	r2, [pc, #324]	; (8002788 <MX_GPIO_Init+0x1d4>)
 8002644:	f043 0308 	orr.w	r3, r3, #8
 8002648:	6313      	str	r3, [r2, #48]	; 0x30
 800264a:	4b4f      	ldr	r3, [pc, #316]	; (8002788 <MX_GPIO_Init+0x1d4>)
 800264c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800264e:	f003 0308 	and.w	r3, r3, #8
 8002652:	603b      	str	r3, [r7, #0]
 8002654:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, P1_Pin|P4_Pin|P2_Pin|P5_Pin 
 8002656:	2200      	movs	r2, #0
 8002658:	21ef      	movs	r1, #239	; 0xef
 800265a:	484c      	ldr	r0, [pc, #304]	; (800278c <MX_GPIO_Init+0x1d8>)
 800265c:	f001 fb54 	bl	8003d08 <HAL_GPIO_WritePin>
                          |LR_RESET_Pin|LEDB_Pin|LEDA_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, PH_L_Pin|EN_L_Pin|PH_R_Pin|P7_Pin, GPIO_PIN_RESET);
 8002660:	2200      	movs	r2, #0
 8002662:	2117      	movs	r1, #23
 8002664:	484a      	ldr	r0, [pc, #296]	; (8002790 <MX_GPIO_Init+0x1dc>)
 8002666:	f001 fb4f 	bl	8003d08 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, P3_Pin|LEDD_Pin|LEDC_Pin|LR_NSS_Pin, GPIO_PIN_RESET);
 800266a:	2200      	movs	r2, #0
 800266c:	f243 2102 	movw	r1, #12802	; 0x3202
 8002670:	4848      	ldr	r0, [pc, #288]	; (8002794 <MX_GPIO_Init+0x1e0>)
 8002672:	f001 fb49 	bl	8003d08 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : P1_Pin P4_Pin P2_Pin P5_Pin 
                           LR_RESET_Pin */
  GPIO_InitStruct.Pin = P1_Pin|P4_Pin|P2_Pin|P5_Pin 
 8002676:	232f      	movs	r3, #47	; 0x2f
 8002678:	617b      	str	r3, [r7, #20]
                          |LR_RESET_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800267a:	2301      	movs	r3, #1
 800267c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800267e:	2300      	movs	r3, #0
 8002680:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002682:	2300      	movs	r3, #0
 8002684:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002686:	f107 0314 	add.w	r3, r7, #20
 800268a:	4619      	mov	r1, r3
 800268c:	483f      	ldr	r0, [pc, #252]	; (800278c <MX_GPIO_Init+0x1d8>)
 800268e:	f001 f989 	bl	80039a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PH_L_Pin EN_L_Pin PH_R_Pin */
  GPIO_InitStruct.Pin = PH_L_Pin|EN_L_Pin|PH_R_Pin;
 8002692:	2307      	movs	r3, #7
 8002694:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002696:	2301      	movs	r3, #1
 8002698:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800269a:	2302      	movs	r3, #2
 800269c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800269e:	2300      	movs	r3, #0
 80026a0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026a2:	f107 0314 	add.w	r3, r7, #20
 80026a6:	4619      	mov	r1, r3
 80026a8:	4839      	ldr	r0, [pc, #228]	; (8002790 <MX_GPIO_Init+0x1dc>)
 80026aa:	f001 f97b 	bl	80039a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : P7_Pin */
  GPIO_InitStruct.Pin = P7_Pin;
 80026ae:	2310      	movs	r3, #16
 80026b0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80026b2:	2301      	movs	r3, #1
 80026b4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026b6:	2300      	movs	r3, #0
 80026b8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026ba:	2300      	movs	r3, #0
 80026bc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(P7_GPIO_Port, &GPIO_InitStruct);
 80026be:	f107 0314 	add.w	r3, r7, #20
 80026c2:	4619      	mov	r1, r3
 80026c4:	4832      	ldr	r0, [pc, #200]	; (8002790 <MX_GPIO_Init+0x1dc>)
 80026c6:	f001 f96d 	bl	80039a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LR_DIO0_Pin */
  GPIO_InitStruct.Pin = LR_DIO0_Pin;
 80026ca:	2340      	movs	r3, #64	; 0x40
 80026cc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80026ce:	4b32      	ldr	r3, [pc, #200]	; (8002798 <MX_GPIO_Init+0x1e4>)
 80026d0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80026d2:	2302      	movs	r3, #2
 80026d4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LR_DIO0_GPIO_Port, &GPIO_InitStruct);
 80026d6:	f107 0314 	add.w	r3, r7, #20
 80026da:	4619      	mov	r1, r3
 80026dc:	482c      	ldr	r0, [pc, #176]	; (8002790 <MX_GPIO_Init+0x1dc>)
 80026de:	f001 f961 	bl	80039a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : P3_Pin LR_NSS_Pin */
  GPIO_InitStruct.Pin = P3_Pin|LR_NSS_Pin;
 80026e2:	f240 2302 	movw	r3, #514	; 0x202
 80026e6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80026e8:	2301      	movs	r3, #1
 80026ea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026ec:	2300      	movs	r3, #0
 80026ee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026f0:	2300      	movs	r3, #0
 80026f2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80026f4:	f107 0314 	add.w	r3, r7, #20
 80026f8:	4619      	mov	r1, r3
 80026fa:	4826      	ldr	r0, [pc, #152]	; (8002794 <MX_GPIO_Init+0x1e0>)
 80026fc:	f001 f952 	bl	80039a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LEDD_Pin LEDC_Pin */
  GPIO_InitStruct.Pin = LEDD_Pin|LEDC_Pin;
 8002700:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8002704:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002706:	2301      	movs	r3, #1
 8002708:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800270a:	2302      	movs	r3, #2
 800270c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800270e:	2300      	movs	r3, #0
 8002710:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002712:	f107 0314 	add.w	r3, r7, #20
 8002716:	4619      	mov	r1, r3
 8002718:	481e      	ldr	r0, [pc, #120]	; (8002794 <MX_GPIO_Init+0x1e0>)
 800271a:	f001 f943 	bl	80039a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LEDB_Pin LEDA_Pin */
  GPIO_InitStruct.Pin = LEDB_Pin|LEDA_Pin;
 800271e:	23c0      	movs	r3, #192	; 0xc0
 8002720:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002722:	2301      	movs	r3, #1
 8002724:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002726:	2302      	movs	r3, #2
 8002728:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800272a:	2300      	movs	r3, #0
 800272c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800272e:	f107 0314 	add.w	r3, r7, #20
 8002732:	4619      	mov	r1, r3
 8002734:	4815      	ldr	r0, [pc, #84]	; (800278c <MX_GPIO_Init+0x1d8>)
 8002736:	f001 f935 	bl	80039a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : SDIO_SW_Pin */
  GPIO_InitStruct.Pin = SDIO_SW_Pin;
 800273a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800273e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002740:	2300      	movs	r3, #0
 8002742:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002744:	2300      	movs	r3, #0
 8002746:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SDIO_SW_GPIO_Port, &GPIO_InitStruct);
 8002748:	f107 0314 	add.w	r3, r7, #20
 800274c:	4619      	mov	r1, r3
 800274e:	4810      	ldr	r0, [pc, #64]	; (8002790 <MX_GPIO_Init+0x1dc>)
 8002750:	f001 f928 	bl	80039a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : BTN_USR_Pin */
  GPIO_InitStruct.Pin = BTN_USR_Pin;
 8002754:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002758:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800275a:	2300      	movs	r3, #0
 800275c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800275e:	2301      	movs	r3, #1
 8002760:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BTN_USR_GPIO_Port, &GPIO_InitStruct);
 8002762:	f107 0314 	add.w	r3, r7, #20
 8002766:	4619      	mov	r1, r3
 8002768:	4809      	ldr	r0, [pc, #36]	; (8002790 <MX_GPIO_Init+0x1dc>)
 800276a:	f001 f91b 	bl	80039a4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 800276e:	2200      	movs	r2, #0
 8002770:	2100      	movs	r1, #0
 8002772:	2017      	movs	r0, #23
 8002774:	f000 fd43 	bl	80031fe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8002778:	2017      	movs	r0, #23
 800277a:	f000 fd5c 	bl	8003236 <HAL_NVIC_EnableIRQ>

}
 800277e:	bf00      	nop
 8002780:	3728      	adds	r7, #40	; 0x28
 8002782:	46bd      	mov	sp, r7
 8002784:	bd80      	pop	{r7, pc}
 8002786:	bf00      	nop
 8002788:	40023800 	.word	0x40023800
 800278c:	40020800 	.word	0x40020800
 8002790:	40020000 	.word	0x40020000
 8002794:	40020400 	.word	0x40020400
 8002798:	10110000 	.word	0x10110000

0800279c <Get_TIM2_Instance>:
/* USER CODE BEGIN 4 */

I2C_HandleTypeDef* Get_I2C1_Instance() { return &hi2c1; }
SPI_HandleTypeDef* Get_SPI1_Instance() { return &hspi1; }
RTC_HandleTypeDef* Get_RTC_Instance() { return &hrtc; }
TIM_HandleTypeDef* Get_TIM2_Instance() { return &htim2; }
 800279c:	b480      	push	{r7}
 800279e:	af00      	add	r7, sp, #0
 80027a0:	4b02      	ldr	r3, [pc, #8]	; (80027ac <Get_TIM2_Instance+0x10>)
 80027a2:	4618      	mov	r0, r3
 80027a4:	46bd      	mov	sp, r7
 80027a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027aa:	4770      	bx	lr
 80027ac:	20000f1c 	.word	0x20000f1c

080027b0 <Get_TIM3_Instance>:

//todelete
TIM_HandleTypeDef* Get_TIM3_Instance() { return &htim3; }
 80027b0:	b480      	push	{r7}
 80027b2:	af00      	add	r7, sp, #0
 80027b4:	4b02      	ldr	r3, [pc, #8]	; (80027c0 <Get_TIM3_Instance+0x10>)
 80027b6:	4618      	mov	r0, r3
 80027b8:	46bd      	mov	sp, r7
 80027ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027be:	4770      	bx	lr
 80027c0:	20000d80 	.word	0x20000d80

080027c4 <HAL_GPIO_EXTI_Callback>:


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80027c4:	b580      	push	{r7, lr}
 80027c6:	b082      	sub	sp, #8
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	4603      	mov	r3, r0
 80027cc:	80fb      	strh	r3, [r7, #6]
	//DIO0 Interrupt function
	if (GPIO_Pin == LR_DIO0_Pin)
 80027ce:	88fb      	ldrh	r3, [r7, #6]
 80027d0:	2b40      	cmp	r3, #64	; 0x40
 80027d2:	d101      	bne.n	80027d8 <HAL_GPIO_EXTI_Callback+0x14>
	{
		dio0_IRQ();
 80027d4:	f7ff f9e8 	bl	8001ba8 <dio0_IRQ>
	}
}
 80027d8:	bf00      	nop
 80027da:	3708      	adds	r7, #8
 80027dc:	46bd      	mov	sp, r7
 80027de:	bd80      	pop	{r7, pc}

080027e0 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
{
 80027e0:	b580      	push	{r7, lr}
 80027e2:	b082      	sub	sp, #8
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	6078      	str	r0, [r7, #4]
	// motor interrupt in on TIM3
	if (htim->Instance == TIM3)
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	4a04      	ldr	r2, [pc, #16]	; (8002800 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80027ee:	4293      	cmp	r3, r2
 80027f0:	d101      	bne.n	80027f6 <HAL_TIM_PeriodElapsedCallback+0x16>
	{
		motorTimeout();
 80027f2:	f7ff fb71 	bl	8001ed8 <motorTimeout>
	}

}
 80027f6:	bf00      	nop
 80027f8:	3708      	adds	r7, #8
 80027fa:	46bd      	mov	sp, r7
 80027fc:	bd80      	pop	{r7, pc}
 80027fe:	bf00      	nop
 8002800:	40000400 	.word	0x40000400

08002804 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002804:	b480      	push	{r7}
 8002806:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8002808:	bf00      	nop
 800280a:	46bd      	mov	sp, r7
 800280c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002810:	4770      	bx	lr
	...

08002814 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002814:	b480      	push	{r7}
 8002816:	b083      	sub	sp, #12
 8002818:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800281a:	2300      	movs	r3, #0
 800281c:	607b      	str	r3, [r7, #4]
 800281e:	4b10      	ldr	r3, [pc, #64]	; (8002860 <HAL_MspInit+0x4c>)
 8002820:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002822:	4a0f      	ldr	r2, [pc, #60]	; (8002860 <HAL_MspInit+0x4c>)
 8002824:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002828:	6453      	str	r3, [r2, #68]	; 0x44
 800282a:	4b0d      	ldr	r3, [pc, #52]	; (8002860 <HAL_MspInit+0x4c>)
 800282c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800282e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002832:	607b      	str	r3, [r7, #4]
 8002834:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002836:	2300      	movs	r3, #0
 8002838:	603b      	str	r3, [r7, #0]
 800283a:	4b09      	ldr	r3, [pc, #36]	; (8002860 <HAL_MspInit+0x4c>)
 800283c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800283e:	4a08      	ldr	r2, [pc, #32]	; (8002860 <HAL_MspInit+0x4c>)
 8002840:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002844:	6413      	str	r3, [r2, #64]	; 0x40
 8002846:	4b06      	ldr	r3, [pc, #24]	; (8002860 <HAL_MspInit+0x4c>)
 8002848:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800284a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800284e:	603b      	str	r3, [r7, #0]
 8002850:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002852:	bf00      	nop
 8002854:	370c      	adds	r7, #12
 8002856:	46bd      	mov	sp, r7
 8002858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800285c:	4770      	bx	lr
 800285e:	bf00      	nop
 8002860:	40023800 	.word	0x40023800

08002864 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002864:	b580      	push	{r7, lr}
 8002866:	b08a      	sub	sp, #40	; 0x28
 8002868:	af00      	add	r7, sp, #0
 800286a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800286c:	f107 0314 	add.w	r3, r7, #20
 8002870:	2200      	movs	r2, #0
 8002872:	601a      	str	r2, [r3, #0]
 8002874:	605a      	str	r2, [r3, #4]
 8002876:	609a      	str	r2, [r3, #8]
 8002878:	60da      	str	r2, [r3, #12]
 800287a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	4a19      	ldr	r2, [pc, #100]	; (80028e8 <HAL_I2C_MspInit+0x84>)
 8002882:	4293      	cmp	r3, r2
 8002884:	d12b      	bne.n	80028de <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002886:	2300      	movs	r3, #0
 8002888:	613b      	str	r3, [r7, #16]
 800288a:	4b18      	ldr	r3, [pc, #96]	; (80028ec <HAL_I2C_MspInit+0x88>)
 800288c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800288e:	4a17      	ldr	r2, [pc, #92]	; (80028ec <HAL_I2C_MspInit+0x88>)
 8002890:	f043 0302 	orr.w	r3, r3, #2
 8002894:	6313      	str	r3, [r2, #48]	; 0x30
 8002896:	4b15      	ldr	r3, [pc, #84]	; (80028ec <HAL_I2C_MspInit+0x88>)
 8002898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800289a:	f003 0302 	and.w	r3, r3, #2
 800289e:	613b      	str	r3, [r7, #16]
 80028a0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = SCL_Pin|SDA_Pin;
 80028a2:	23c0      	movs	r3, #192	; 0xc0
 80028a4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80028a6:	2312      	movs	r3, #18
 80028a8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028aa:	2300      	movs	r3, #0
 80028ac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80028ae:	2303      	movs	r3, #3
 80028b0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80028b2:	2304      	movs	r3, #4
 80028b4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80028b6:	f107 0314 	add.w	r3, r7, #20
 80028ba:	4619      	mov	r1, r3
 80028bc:	480c      	ldr	r0, [pc, #48]	; (80028f0 <HAL_I2C_MspInit+0x8c>)
 80028be:	f001 f871 	bl	80039a4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80028c2:	2300      	movs	r3, #0
 80028c4:	60fb      	str	r3, [r7, #12]
 80028c6:	4b09      	ldr	r3, [pc, #36]	; (80028ec <HAL_I2C_MspInit+0x88>)
 80028c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028ca:	4a08      	ldr	r2, [pc, #32]	; (80028ec <HAL_I2C_MspInit+0x88>)
 80028cc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80028d0:	6413      	str	r3, [r2, #64]	; 0x40
 80028d2:	4b06      	ldr	r3, [pc, #24]	; (80028ec <HAL_I2C_MspInit+0x88>)
 80028d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028d6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80028da:	60fb      	str	r3, [r7, #12]
 80028dc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80028de:	bf00      	nop
 80028e0:	3728      	adds	r7, #40	; 0x28
 80028e2:	46bd      	mov	sp, r7
 80028e4:	bd80      	pop	{r7, pc}
 80028e6:	bf00      	nop
 80028e8:	40005400 	.word	0x40005400
 80028ec:	40023800 	.word	0x40023800
 80028f0:	40020400 	.word	0x40020400

080028f4 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80028f4:	b480      	push	{r7}
 80028f6:	b083      	sub	sp, #12
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	4a05      	ldr	r2, [pc, #20]	; (8002918 <HAL_RTC_MspInit+0x24>)
 8002902:	4293      	cmp	r3, r2
 8002904:	d102      	bne.n	800290c <HAL_RTC_MspInit+0x18>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002906:	4b05      	ldr	r3, [pc, #20]	; (800291c <HAL_RTC_MspInit+0x28>)
 8002908:	2201      	movs	r2, #1
 800290a:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 800290c:	bf00      	nop
 800290e:	370c      	adds	r7, #12
 8002910:	46bd      	mov	sp, r7
 8002912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002916:	4770      	bx	lr
 8002918:	40002800 	.word	0x40002800
 800291c:	42470e3c 	.word	0x42470e3c

08002920 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8002920:	b580      	push	{r7, lr}
 8002922:	b08a      	sub	sp, #40	; 0x28
 8002924:	af00      	add	r7, sp, #0
 8002926:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002928:	f107 0314 	add.w	r3, r7, #20
 800292c:	2200      	movs	r2, #0
 800292e:	601a      	str	r2, [r3, #0]
 8002930:	605a      	str	r2, [r3, #4]
 8002932:	609a      	str	r2, [r3, #8]
 8002934:	60da      	str	r2, [r3, #12]
 8002936:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	4a70      	ldr	r2, [pc, #448]	; (8002b00 <HAL_SD_MspInit+0x1e0>)
 800293e:	4293      	cmp	r3, r2
 8002940:	f040 80da 	bne.w	8002af8 <HAL_SD_MspInit+0x1d8>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 8002944:	2300      	movs	r3, #0
 8002946:	613b      	str	r3, [r7, #16]
 8002948:	4b6e      	ldr	r3, [pc, #440]	; (8002b04 <HAL_SD_MspInit+0x1e4>)
 800294a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800294c:	4a6d      	ldr	r2, [pc, #436]	; (8002b04 <HAL_SD_MspInit+0x1e4>)
 800294e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002952:	6453      	str	r3, [r2, #68]	; 0x44
 8002954:	4b6b      	ldr	r3, [pc, #428]	; (8002b04 <HAL_SD_MspInit+0x1e4>)
 8002956:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002958:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800295c:	613b      	str	r3, [r7, #16]
 800295e:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002960:	2300      	movs	r3, #0
 8002962:	60fb      	str	r3, [r7, #12]
 8002964:	4b67      	ldr	r3, [pc, #412]	; (8002b04 <HAL_SD_MspInit+0x1e4>)
 8002966:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002968:	4a66      	ldr	r2, [pc, #408]	; (8002b04 <HAL_SD_MspInit+0x1e4>)
 800296a:	f043 0304 	orr.w	r3, r3, #4
 800296e:	6313      	str	r3, [r2, #48]	; 0x30
 8002970:	4b64      	ldr	r3, [pc, #400]	; (8002b04 <HAL_SD_MspInit+0x1e4>)
 8002972:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002974:	f003 0304 	and.w	r3, r3, #4
 8002978:	60fb      	str	r3, [r7, #12]
 800297a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800297c:	2300      	movs	r3, #0
 800297e:	60bb      	str	r3, [r7, #8]
 8002980:	4b60      	ldr	r3, [pc, #384]	; (8002b04 <HAL_SD_MspInit+0x1e4>)
 8002982:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002984:	4a5f      	ldr	r2, [pc, #380]	; (8002b04 <HAL_SD_MspInit+0x1e4>)
 8002986:	f043 0308 	orr.w	r3, r3, #8
 800298a:	6313      	str	r3, [r2, #48]	; 0x30
 800298c:	4b5d      	ldr	r3, [pc, #372]	; (8002b04 <HAL_SD_MspInit+0x1e4>)
 800298e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002990:	f003 0308 	and.w	r3, r3, #8
 8002994:	60bb      	str	r3, [r7, #8]
 8002996:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDIO_D2
    PC11     ------> SDIO_D3
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8002998:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 800299c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800299e:	2302      	movs	r3, #2
 80029a0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80029a2:	2301      	movs	r3, #1
 80029a4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029a6:	2303      	movs	r3, #3
 80029a8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 80029aa:	230c      	movs	r3, #12
 80029ac:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80029ae:	f107 0314 	add.w	r3, r7, #20
 80029b2:	4619      	mov	r1, r3
 80029b4:	4854      	ldr	r0, [pc, #336]	; (8002b08 <HAL_SD_MspInit+0x1e8>)
 80029b6:	f000 fff5 	bl	80039a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80029ba:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80029be:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029c0:	2302      	movs	r3, #2
 80029c2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029c4:	2300      	movs	r3, #0
 80029c6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029c8:	2303      	movs	r3, #3
 80029ca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 80029cc:	230c      	movs	r3, #12
 80029ce:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80029d0:	f107 0314 	add.w	r3, r7, #20
 80029d4:	4619      	mov	r1, r3
 80029d6:	484c      	ldr	r0, [pc, #304]	; (8002b08 <HAL_SD_MspInit+0x1e8>)
 80029d8:	f000 ffe4 	bl	80039a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80029dc:	2304      	movs	r3, #4
 80029de:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029e0:	2302      	movs	r3, #2
 80029e2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80029e4:	2301      	movs	r3, #1
 80029e6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029e8:	2303      	movs	r3, #3
 80029ea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 80029ec:	230c      	movs	r3, #12
 80029ee:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80029f0:	f107 0314 	add.w	r3, r7, #20
 80029f4:	4619      	mov	r1, r3
 80029f6:	4845      	ldr	r0, [pc, #276]	; (8002b0c <HAL_SD_MspInit+0x1ec>)
 80029f8:	f000 ffd4 	bl	80039a4 <HAL_GPIO_Init>

    /* SDIO DMA Init */
    /* SDIO_RX Init */
    hdma_sdio_rx.Instance = DMA2_Stream3;
 80029fc:	4b44      	ldr	r3, [pc, #272]	; (8002b10 <HAL_SD_MspInit+0x1f0>)
 80029fe:	4a45      	ldr	r2, [pc, #276]	; (8002b14 <HAL_SD_MspInit+0x1f4>)
 8002a00:	601a      	str	r2, [r3, #0]
    hdma_sdio_rx.Init.Channel = DMA_CHANNEL_4;
 8002a02:	4b43      	ldr	r3, [pc, #268]	; (8002b10 <HAL_SD_MspInit+0x1f0>)
 8002a04:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002a08:	605a      	str	r2, [r3, #4]
    hdma_sdio_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002a0a:	4b41      	ldr	r3, [pc, #260]	; (8002b10 <HAL_SD_MspInit+0x1f0>)
 8002a0c:	2200      	movs	r2, #0
 8002a0e:	609a      	str	r2, [r3, #8]
    hdma_sdio_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002a10:	4b3f      	ldr	r3, [pc, #252]	; (8002b10 <HAL_SD_MspInit+0x1f0>)
 8002a12:	2200      	movs	r2, #0
 8002a14:	60da      	str	r2, [r3, #12]
    hdma_sdio_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002a16:	4b3e      	ldr	r3, [pc, #248]	; (8002b10 <HAL_SD_MspInit+0x1f0>)
 8002a18:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002a1c:	611a      	str	r2, [r3, #16]
    hdma_sdio_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002a1e:	4b3c      	ldr	r3, [pc, #240]	; (8002b10 <HAL_SD_MspInit+0x1f0>)
 8002a20:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002a24:	615a      	str	r2, [r3, #20]
    hdma_sdio_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002a26:	4b3a      	ldr	r3, [pc, #232]	; (8002b10 <HAL_SD_MspInit+0x1f0>)
 8002a28:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002a2c:	619a      	str	r2, [r3, #24]
    hdma_sdio_rx.Init.Mode = DMA_PFCTRL;
 8002a2e:	4b38      	ldr	r3, [pc, #224]	; (8002b10 <HAL_SD_MspInit+0x1f0>)
 8002a30:	2220      	movs	r2, #32
 8002a32:	61da      	str	r2, [r3, #28]
    hdma_sdio_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002a34:	4b36      	ldr	r3, [pc, #216]	; (8002b10 <HAL_SD_MspInit+0x1f0>)
 8002a36:	2200      	movs	r2, #0
 8002a38:	621a      	str	r2, [r3, #32]
    hdma_sdio_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8002a3a:	4b35      	ldr	r3, [pc, #212]	; (8002b10 <HAL_SD_MspInit+0x1f0>)
 8002a3c:	2204      	movs	r2, #4
 8002a3e:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8002a40:	4b33      	ldr	r3, [pc, #204]	; (8002b10 <HAL_SD_MspInit+0x1f0>)
 8002a42:	2203      	movs	r2, #3
 8002a44:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_rx.Init.MemBurst = DMA_MBURST_INC4;
 8002a46:	4b32      	ldr	r3, [pc, #200]	; (8002b10 <HAL_SD_MspInit+0x1f0>)
 8002a48:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8002a4c:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 8002a4e:	4b30      	ldr	r3, [pc, #192]	; (8002b10 <HAL_SD_MspInit+0x1f0>)
 8002a50:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8002a54:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_rx) != HAL_OK)
 8002a56:	482e      	ldr	r0, [pc, #184]	; (8002b10 <HAL_SD_MspInit+0x1f0>)
 8002a58:	f000 fc08 	bl	800326c <HAL_DMA_Init>
 8002a5c:	4603      	mov	r3, r0
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d001      	beq.n	8002a66 <HAL_SD_MspInit+0x146>
    {
      Error_Handler();
 8002a62:	f7ff fecf 	bl	8002804 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmarx,hdma_sdio_rx);
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	4a29      	ldr	r2, [pc, #164]	; (8002b10 <HAL_SD_MspInit+0x1f0>)
 8002a6a:	641a      	str	r2, [r3, #64]	; 0x40
 8002a6c:	4a28      	ldr	r2, [pc, #160]	; (8002b10 <HAL_SD_MspInit+0x1f0>)
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO_TX Init */
    hdma_sdio_tx.Instance = DMA2_Stream6;
 8002a72:	4b29      	ldr	r3, [pc, #164]	; (8002b18 <HAL_SD_MspInit+0x1f8>)
 8002a74:	4a29      	ldr	r2, [pc, #164]	; (8002b1c <HAL_SD_MspInit+0x1fc>)
 8002a76:	601a      	str	r2, [r3, #0]
    hdma_sdio_tx.Init.Channel = DMA_CHANNEL_4;
 8002a78:	4b27      	ldr	r3, [pc, #156]	; (8002b18 <HAL_SD_MspInit+0x1f8>)
 8002a7a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002a7e:	605a      	str	r2, [r3, #4]
    hdma_sdio_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002a80:	4b25      	ldr	r3, [pc, #148]	; (8002b18 <HAL_SD_MspInit+0x1f8>)
 8002a82:	2240      	movs	r2, #64	; 0x40
 8002a84:	609a      	str	r2, [r3, #8]
    hdma_sdio_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002a86:	4b24      	ldr	r3, [pc, #144]	; (8002b18 <HAL_SD_MspInit+0x1f8>)
 8002a88:	2200      	movs	r2, #0
 8002a8a:	60da      	str	r2, [r3, #12]
    hdma_sdio_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002a8c:	4b22      	ldr	r3, [pc, #136]	; (8002b18 <HAL_SD_MspInit+0x1f8>)
 8002a8e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002a92:	611a      	str	r2, [r3, #16]
    hdma_sdio_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002a94:	4b20      	ldr	r3, [pc, #128]	; (8002b18 <HAL_SD_MspInit+0x1f8>)
 8002a96:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002a9a:	615a      	str	r2, [r3, #20]
    hdma_sdio_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002a9c:	4b1e      	ldr	r3, [pc, #120]	; (8002b18 <HAL_SD_MspInit+0x1f8>)
 8002a9e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002aa2:	619a      	str	r2, [r3, #24]
    hdma_sdio_tx.Init.Mode = DMA_PFCTRL;
 8002aa4:	4b1c      	ldr	r3, [pc, #112]	; (8002b18 <HAL_SD_MspInit+0x1f8>)
 8002aa6:	2220      	movs	r2, #32
 8002aa8:	61da      	str	r2, [r3, #28]
    hdma_sdio_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002aaa:	4b1b      	ldr	r3, [pc, #108]	; (8002b18 <HAL_SD_MspInit+0x1f8>)
 8002aac:	2200      	movs	r2, #0
 8002aae:	621a      	str	r2, [r3, #32]
    hdma_sdio_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8002ab0:	4b19      	ldr	r3, [pc, #100]	; (8002b18 <HAL_SD_MspInit+0x1f8>)
 8002ab2:	2204      	movs	r2, #4
 8002ab4:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8002ab6:	4b18      	ldr	r3, [pc, #96]	; (8002b18 <HAL_SD_MspInit+0x1f8>)
 8002ab8:	2203      	movs	r2, #3
 8002aba:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_tx.Init.MemBurst = DMA_MBURST_INC4;
 8002abc:	4b16      	ldr	r3, [pc, #88]	; (8002b18 <HAL_SD_MspInit+0x1f8>)
 8002abe:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8002ac2:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 8002ac4:	4b14      	ldr	r3, [pc, #80]	; (8002b18 <HAL_SD_MspInit+0x1f8>)
 8002ac6:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8002aca:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_tx) != HAL_OK)
 8002acc:	4812      	ldr	r0, [pc, #72]	; (8002b18 <HAL_SD_MspInit+0x1f8>)
 8002ace:	f000 fbcd 	bl	800326c <HAL_DMA_Init>
 8002ad2:	4603      	mov	r3, r0
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d001      	beq.n	8002adc <HAL_SD_MspInit+0x1bc>
    {
      Error_Handler();
 8002ad8:	f7ff fe94 	bl	8002804 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmatx,hdma_sdio_tx);
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	4a0e      	ldr	r2, [pc, #56]	; (8002b18 <HAL_SD_MspInit+0x1f8>)
 8002ae0:	63da      	str	r2, [r3, #60]	; 0x3c
 8002ae2:	4a0d      	ldr	r2, [pc, #52]	; (8002b18 <HAL_SD_MspInit+0x1f8>)
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO interrupt Init */
    HAL_NVIC_SetPriority(SDIO_IRQn, 0, 0);
 8002ae8:	2200      	movs	r2, #0
 8002aea:	2100      	movs	r1, #0
 8002aec:	2031      	movs	r0, #49	; 0x31
 8002aee:	f000 fb86 	bl	80031fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDIO_IRQn);
 8002af2:	2031      	movs	r0, #49	; 0x31
 8002af4:	f000 fb9f 	bl	8003236 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 8002af8:	bf00      	nop
 8002afa:	3728      	adds	r7, #40	; 0x28
 8002afc:	46bd      	mov	sp, r7
 8002afe:	bd80      	pop	{r7, pc}
 8002b00:	40012c00 	.word	0x40012c00
 8002b04:	40023800 	.word	0x40023800
 8002b08:	40020800 	.word	0x40020800
 8002b0c:	40020c00 	.word	0x40020c00
 8002b10:	20000c0c 	.word	0x20000c0c
 8002b14:	40026458 	.word	0x40026458
 8002b18:	20000de0 	.word	0x20000de0
 8002b1c:	400264a0 	.word	0x400264a0

08002b20 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002b20:	b580      	push	{r7, lr}
 8002b22:	b08a      	sub	sp, #40	; 0x28
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b28:	f107 0314 	add.w	r3, r7, #20
 8002b2c:	2200      	movs	r2, #0
 8002b2e:	601a      	str	r2, [r3, #0]
 8002b30:	605a      	str	r2, [r3, #4]
 8002b32:	609a      	str	r2, [r3, #8]
 8002b34:	60da      	str	r2, [r3, #12]
 8002b36:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	4a19      	ldr	r2, [pc, #100]	; (8002ba4 <HAL_SPI_MspInit+0x84>)
 8002b3e:	4293      	cmp	r3, r2
 8002b40:	d12b      	bne.n	8002b9a <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002b42:	2300      	movs	r3, #0
 8002b44:	613b      	str	r3, [r7, #16]
 8002b46:	4b18      	ldr	r3, [pc, #96]	; (8002ba8 <HAL_SPI_MspInit+0x88>)
 8002b48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b4a:	4a17      	ldr	r2, [pc, #92]	; (8002ba8 <HAL_SPI_MspInit+0x88>)
 8002b4c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002b50:	6453      	str	r3, [r2, #68]	; 0x44
 8002b52:	4b15      	ldr	r3, [pc, #84]	; (8002ba8 <HAL_SPI_MspInit+0x88>)
 8002b54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b56:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002b5a:	613b      	str	r3, [r7, #16]
 8002b5c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b5e:	2300      	movs	r3, #0
 8002b60:	60fb      	str	r3, [r7, #12]
 8002b62:	4b11      	ldr	r3, [pc, #68]	; (8002ba8 <HAL_SPI_MspInit+0x88>)
 8002b64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b66:	4a10      	ldr	r2, [pc, #64]	; (8002ba8 <HAL_SPI_MspInit+0x88>)
 8002b68:	f043 0302 	orr.w	r3, r3, #2
 8002b6c:	6313      	str	r3, [r2, #48]	; 0x30
 8002b6e:	4b0e      	ldr	r3, [pc, #56]	; (8002ba8 <HAL_SPI_MspInit+0x88>)
 8002b70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b72:	f003 0302 	and.w	r3, r3, #2
 8002b76:	60fb      	str	r3, [r7, #12]
 8002b78:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration    
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = LR_SCK_Pin|LR_MISO_Pin|LR_MOSI_Pin;
 8002b7a:	2338      	movs	r3, #56	; 0x38
 8002b7c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b7e:	2302      	movs	r3, #2
 8002b80:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b82:	2300      	movs	r3, #0
 8002b84:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b86:	2303      	movs	r3, #3
 8002b88:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002b8a:	2305      	movs	r3, #5
 8002b8c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b8e:	f107 0314 	add.w	r3, r7, #20
 8002b92:	4619      	mov	r1, r3
 8002b94:	4805      	ldr	r0, [pc, #20]	; (8002bac <HAL_SPI_MspInit+0x8c>)
 8002b96:	f000 ff05 	bl	80039a4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8002b9a:	bf00      	nop
 8002b9c:	3728      	adds	r7, #40	; 0x28
 8002b9e:	46bd      	mov	sp, r7
 8002ba0:	bd80      	pop	{r7, pc}
 8002ba2:	bf00      	nop
 8002ba4:	40013000 	.word	0x40013000
 8002ba8:	40023800 	.word	0x40023800
 8002bac:	40020400 	.word	0x40020400

08002bb0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002bb0:	b580      	push	{r7, lr}
 8002bb2:	b086      	sub	sp, #24
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002bc0:	d10e      	bne.n	8002be0 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002bc2:	2300      	movs	r3, #0
 8002bc4:	617b      	str	r3, [r7, #20]
 8002bc6:	4b2a      	ldr	r3, [pc, #168]	; (8002c70 <HAL_TIM_Base_MspInit+0xc0>)
 8002bc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bca:	4a29      	ldr	r2, [pc, #164]	; (8002c70 <HAL_TIM_Base_MspInit+0xc0>)
 8002bcc:	f043 0301 	orr.w	r3, r3, #1
 8002bd0:	6413      	str	r3, [r2, #64]	; 0x40
 8002bd2:	4b27      	ldr	r3, [pc, #156]	; (8002c70 <HAL_TIM_Base_MspInit+0xc0>)
 8002bd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bd6:	f003 0301 	and.w	r3, r3, #1
 8002bda:	617b      	str	r3, [r7, #20]
 8002bdc:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8002bde:	e042      	b.n	8002c66 <HAL_TIM_Base_MspInit+0xb6>
  else if(htim_base->Instance==TIM3)
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	4a23      	ldr	r2, [pc, #140]	; (8002c74 <HAL_TIM_Base_MspInit+0xc4>)
 8002be6:	4293      	cmp	r3, r2
 8002be8:	d116      	bne.n	8002c18 <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002bea:	2300      	movs	r3, #0
 8002bec:	613b      	str	r3, [r7, #16]
 8002bee:	4b20      	ldr	r3, [pc, #128]	; (8002c70 <HAL_TIM_Base_MspInit+0xc0>)
 8002bf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bf2:	4a1f      	ldr	r2, [pc, #124]	; (8002c70 <HAL_TIM_Base_MspInit+0xc0>)
 8002bf4:	f043 0302 	orr.w	r3, r3, #2
 8002bf8:	6413      	str	r3, [r2, #64]	; 0x40
 8002bfa:	4b1d      	ldr	r3, [pc, #116]	; (8002c70 <HAL_TIM_Base_MspInit+0xc0>)
 8002bfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bfe:	f003 0302 	and.w	r3, r3, #2
 8002c02:	613b      	str	r3, [r7, #16]
 8002c04:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8002c06:	2200      	movs	r2, #0
 8002c08:	2100      	movs	r1, #0
 8002c0a:	201d      	movs	r0, #29
 8002c0c:	f000 faf7 	bl	80031fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002c10:	201d      	movs	r0, #29
 8002c12:	f000 fb10 	bl	8003236 <HAL_NVIC_EnableIRQ>
}
 8002c16:	e026      	b.n	8002c66 <HAL_TIM_Base_MspInit+0xb6>
  else if(htim_base->Instance==TIM4)
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	4a16      	ldr	r2, [pc, #88]	; (8002c78 <HAL_TIM_Base_MspInit+0xc8>)
 8002c1e:	4293      	cmp	r3, r2
 8002c20:	d10e      	bne.n	8002c40 <HAL_TIM_Base_MspInit+0x90>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002c22:	2300      	movs	r3, #0
 8002c24:	60fb      	str	r3, [r7, #12]
 8002c26:	4b12      	ldr	r3, [pc, #72]	; (8002c70 <HAL_TIM_Base_MspInit+0xc0>)
 8002c28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c2a:	4a11      	ldr	r2, [pc, #68]	; (8002c70 <HAL_TIM_Base_MspInit+0xc0>)
 8002c2c:	f043 0304 	orr.w	r3, r3, #4
 8002c30:	6413      	str	r3, [r2, #64]	; 0x40
 8002c32:	4b0f      	ldr	r3, [pc, #60]	; (8002c70 <HAL_TIM_Base_MspInit+0xc0>)
 8002c34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c36:	f003 0304 	and.w	r3, r3, #4
 8002c3a:	60fb      	str	r3, [r7, #12]
 8002c3c:	68fb      	ldr	r3, [r7, #12]
}
 8002c3e:	e012      	b.n	8002c66 <HAL_TIM_Base_MspInit+0xb6>
  else if(htim_base->Instance==TIM5)
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	4a0d      	ldr	r2, [pc, #52]	; (8002c7c <HAL_TIM_Base_MspInit+0xcc>)
 8002c46:	4293      	cmp	r3, r2
 8002c48:	d10d      	bne.n	8002c66 <HAL_TIM_Base_MspInit+0xb6>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8002c4a:	2300      	movs	r3, #0
 8002c4c:	60bb      	str	r3, [r7, #8]
 8002c4e:	4b08      	ldr	r3, [pc, #32]	; (8002c70 <HAL_TIM_Base_MspInit+0xc0>)
 8002c50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c52:	4a07      	ldr	r2, [pc, #28]	; (8002c70 <HAL_TIM_Base_MspInit+0xc0>)
 8002c54:	f043 0308 	orr.w	r3, r3, #8
 8002c58:	6413      	str	r3, [r2, #64]	; 0x40
 8002c5a:	4b05      	ldr	r3, [pc, #20]	; (8002c70 <HAL_TIM_Base_MspInit+0xc0>)
 8002c5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c5e:	f003 0308 	and.w	r3, r3, #8
 8002c62:	60bb      	str	r3, [r7, #8]
 8002c64:	68bb      	ldr	r3, [r7, #8]
}
 8002c66:	bf00      	nop
 8002c68:	3718      	adds	r7, #24
 8002c6a:	46bd      	mov	sp, r7
 8002c6c:	bd80      	pop	{r7, pc}
 8002c6e:	bf00      	nop
 8002c70:	40023800 	.word	0x40023800
 8002c74:	40000400 	.word	0x40000400
 8002c78:	40000800 	.word	0x40000800
 8002c7c:	40000c00 	.word	0x40000c00

08002c80 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002c80:	b580      	push	{r7, lr}
 8002c82:	b08a      	sub	sp, #40	; 0x28
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c88:	f107 0314 	add.w	r3, r7, #20
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	601a      	str	r2, [r3, #0]
 8002c90:	605a      	str	r2, [r3, #4]
 8002c92:	609a      	str	r2, [r3, #8]
 8002c94:	60da      	str	r2, [r3, #12]
 8002c96:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ca0:	d11e      	bne.n	8002ce0 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ca2:	2300      	movs	r3, #0
 8002ca4:	613b      	str	r3, [r7, #16]
 8002ca6:	4b22      	ldr	r3, [pc, #136]	; (8002d30 <HAL_TIM_MspPostInit+0xb0>)
 8002ca8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002caa:	4a21      	ldr	r2, [pc, #132]	; (8002d30 <HAL_TIM_MspPostInit+0xb0>)
 8002cac:	f043 0301 	orr.w	r3, r3, #1
 8002cb0:	6313      	str	r3, [r2, #48]	; 0x30
 8002cb2:	4b1f      	ldr	r3, [pc, #124]	; (8002d30 <HAL_TIM_MspPostInit+0xb0>)
 8002cb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cb6:	f003 0301 	and.w	r3, r3, #1
 8002cba:	613b      	str	r3, [r7, #16]
 8002cbc:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration    
    PA3     ------> TIM2_CH4 
    */
    GPIO_InitStruct.Pin = EN_R_Pin;
 8002cbe:	2308      	movs	r3, #8
 8002cc0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cc2:	2302      	movs	r3, #2
 8002cc4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cc6:	2300      	movs	r3, #0
 8002cc8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002cca:	2300      	movs	r3, #0
 8002ccc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002cce:	2301      	movs	r3, #1
 8002cd0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(EN_R_GPIO_Port, &GPIO_InitStruct);
 8002cd2:	f107 0314 	add.w	r3, r7, #20
 8002cd6:	4619      	mov	r1, r3
 8002cd8:	4816      	ldr	r0, [pc, #88]	; (8002d34 <HAL_TIM_MspPostInit+0xb4>)
 8002cda:	f000 fe63 	bl	80039a4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8002cde:	e022      	b.n	8002d26 <HAL_TIM_MspPostInit+0xa6>
  else if(htim->Instance==TIM3)
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	4a14      	ldr	r2, [pc, #80]	; (8002d38 <HAL_TIM_MspPostInit+0xb8>)
 8002ce6:	4293      	cmp	r3, r2
 8002ce8:	d11d      	bne.n	8002d26 <HAL_TIM_MspPostInit+0xa6>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002cea:	2300      	movs	r3, #0
 8002cec:	60fb      	str	r3, [r7, #12]
 8002cee:	4b10      	ldr	r3, [pc, #64]	; (8002d30 <HAL_TIM_MspPostInit+0xb0>)
 8002cf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cf2:	4a0f      	ldr	r2, [pc, #60]	; (8002d30 <HAL_TIM_MspPostInit+0xb0>)
 8002cf4:	f043 0302 	orr.w	r3, r3, #2
 8002cf8:	6313      	str	r3, [r2, #48]	; 0x30
 8002cfa:	4b0d      	ldr	r3, [pc, #52]	; (8002d30 <HAL_TIM_MspPostInit+0xb0>)
 8002cfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cfe:	f003 0302 	and.w	r3, r3, #2
 8002d02:	60fb      	str	r3, [r7, #12]
 8002d04:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = P6_Pin;
 8002d06:	2301      	movs	r3, #1
 8002d08:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d0a:	2302      	movs	r3, #2
 8002d0c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d0e:	2300      	movs	r3, #0
 8002d10:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d12:	2300      	movs	r3, #0
 8002d14:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002d16:	2302      	movs	r3, #2
 8002d18:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(P6_GPIO_Port, &GPIO_InitStruct);
 8002d1a:	f107 0314 	add.w	r3, r7, #20
 8002d1e:	4619      	mov	r1, r3
 8002d20:	4806      	ldr	r0, [pc, #24]	; (8002d3c <HAL_TIM_MspPostInit+0xbc>)
 8002d22:	f000 fe3f 	bl	80039a4 <HAL_GPIO_Init>
}
 8002d26:	bf00      	nop
 8002d28:	3728      	adds	r7, #40	; 0x28
 8002d2a:	46bd      	mov	sp, r7
 8002d2c:	bd80      	pop	{r7, pc}
 8002d2e:	bf00      	nop
 8002d30:	40023800 	.word	0x40023800
 8002d34:	40020000 	.word	0x40020000
 8002d38:	40000400 	.word	0x40000400
 8002d3c:	40020400 	.word	0x40020400

08002d40 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002d40:	b580      	push	{r7, lr}
 8002d42:	b08a      	sub	sp, #40	; 0x28
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d48:	f107 0314 	add.w	r3, r7, #20
 8002d4c:	2200      	movs	r2, #0
 8002d4e:	601a      	str	r2, [r3, #0]
 8002d50:	605a      	str	r2, [r3, #4]
 8002d52:	609a      	str	r2, [r3, #8]
 8002d54:	60da      	str	r2, [r3, #12]
 8002d56:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	4a19      	ldr	r2, [pc, #100]	; (8002dc4 <HAL_UART_MspInit+0x84>)
 8002d5e:	4293      	cmp	r3, r2
 8002d60:	d12c      	bne.n	8002dbc <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8002d62:	2300      	movs	r3, #0
 8002d64:	613b      	str	r3, [r7, #16]
 8002d66:	4b18      	ldr	r3, [pc, #96]	; (8002dc8 <HAL_UART_MspInit+0x88>)
 8002d68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d6a:	4a17      	ldr	r2, [pc, #92]	; (8002dc8 <HAL_UART_MspInit+0x88>)
 8002d6c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002d70:	6413      	str	r3, [r2, #64]	; 0x40
 8002d72:	4b15      	ldr	r3, [pc, #84]	; (8002dc8 <HAL_UART_MspInit+0x88>)
 8002d74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d76:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002d7a:	613b      	str	r3, [r7, #16]
 8002d7c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d7e:	2300      	movs	r3, #0
 8002d80:	60fb      	str	r3, [r7, #12]
 8002d82:	4b11      	ldr	r3, [pc, #68]	; (8002dc8 <HAL_UART_MspInit+0x88>)
 8002d84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d86:	4a10      	ldr	r2, [pc, #64]	; (8002dc8 <HAL_UART_MspInit+0x88>)
 8002d88:	f043 0302 	orr.w	r3, r3, #2
 8002d8c:	6313      	str	r3, [r2, #48]	; 0x30
 8002d8e:	4b0e      	ldr	r3, [pc, #56]	; (8002dc8 <HAL_UART_MspInit+0x88>)
 8002d90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d92:	f003 0302 	and.w	r3, r3, #2
 8002d96:	60fb      	str	r3, [r7, #12]
 8002d98:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration    
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX 
    */
    GPIO_InitStruct.Pin = GPS_RX_Pin|GPS_TX_Pin;
 8002d9a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002d9e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002da0:	2302      	movs	r3, #2
 8002da2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002da4:	2300      	movs	r3, #0
 8002da6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002da8:	2303      	movs	r3, #3
 8002daa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002dac:	2307      	movs	r3, #7
 8002dae:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002db0:	f107 0314 	add.w	r3, r7, #20
 8002db4:	4619      	mov	r1, r3
 8002db6:	4805      	ldr	r0, [pc, #20]	; (8002dcc <HAL_UART_MspInit+0x8c>)
 8002db8:	f000 fdf4 	bl	80039a4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002dbc:	bf00      	nop
 8002dbe:	3728      	adds	r7, #40	; 0x28
 8002dc0:	46bd      	mov	sp, r7
 8002dc2:	bd80      	pop	{r7, pc}
 8002dc4:	40004800 	.word	0x40004800
 8002dc8:	40023800 	.word	0x40023800
 8002dcc:	40020400 	.word	0x40020400

08002dd0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002dd0:	b480      	push	{r7}
 8002dd2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002dd4:	bf00      	nop
 8002dd6:	46bd      	mov	sp, r7
 8002dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ddc:	4770      	bx	lr

08002dde <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002dde:	b480      	push	{r7}
 8002de0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002de2:	e7fe      	b.n	8002de2 <HardFault_Handler+0x4>

08002de4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002de4:	b480      	push	{r7}
 8002de6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002de8:	e7fe      	b.n	8002de8 <MemManage_Handler+0x4>

08002dea <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002dea:	b480      	push	{r7}
 8002dec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002dee:	e7fe      	b.n	8002dee <BusFault_Handler+0x4>

08002df0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002df0:	b480      	push	{r7}
 8002df2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002df4:	e7fe      	b.n	8002df4 <UsageFault_Handler+0x4>

08002df6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002df6:	b480      	push	{r7}
 8002df8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002dfa:	bf00      	nop
 8002dfc:	46bd      	mov	sp, r7
 8002dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e02:	4770      	bx	lr

08002e04 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002e04:	b480      	push	{r7}
 8002e06:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002e08:	bf00      	nop
 8002e0a:	46bd      	mov	sp, r7
 8002e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e10:	4770      	bx	lr

08002e12 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002e12:	b480      	push	{r7}
 8002e14:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002e16:	bf00      	nop
 8002e18:	46bd      	mov	sp, r7
 8002e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e1e:	4770      	bx	lr

08002e20 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002e20:	b580      	push	{r7, lr}
 8002e22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002e24:	f000 f8ce 	bl	8002fc4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002e28:	bf00      	nop
 8002e2a:	bd80      	pop	{r7, pc}

08002e2c <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8002e2c:	b580      	push	{r7, lr}
 8002e2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8002e30:	2040      	movs	r0, #64	; 0x40
 8002e32:	f000 ff83 	bl	8003d3c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8002e36:	bf00      	nop
 8002e38:	bd80      	pop	{r7, pc}
	...

08002e3c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002e3c:	b580      	push	{r7, lr}
 8002e3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002e40:	4802      	ldr	r0, [pc, #8]	; (8002e4c <TIM3_IRQHandler+0x10>)
 8002e42:	f005 f9ad 	bl	80081a0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002e46:	bf00      	nop
 8002e48:	bd80      	pop	{r7, pc}
 8002e4a:	bf00      	nop
 8002e4c:	20000d80 	.word	0x20000d80

08002e50 <SDIO_IRQHandler>:

/**
  * @brief This function handles SDIO global interrupt.
  */
void SDIO_IRQHandler(void)
{
 8002e50:	b580      	push	{r7, lr}
 8002e52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDIO_IRQn 0 */

  /* USER CODE END SDIO_IRQn 0 */
  HAL_SD_IRQHandler(&hsd);
 8002e54:	4802      	ldr	r0, [pc, #8]	; (8002e60 <SDIO_IRQHandler+0x10>)
 8002e56:	f003 fc3b 	bl	80066d0 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDIO_IRQn 1 */

  /* USER CODE END SDIO_IRQn 1 */
}
 8002e5a:	bf00      	nop
 8002e5c:	bd80      	pop	{r7, pc}
 8002e5e:	bf00      	nop
 8002e60:	20000e40 	.word	0x20000e40

08002e64 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8002e64:	b580      	push	{r7, lr}
 8002e66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_rx);
 8002e68:	4802      	ldr	r0, [pc, #8]	; (8002e74 <DMA2_Stream3_IRQHandler+0x10>)
 8002e6a:	f000 fb27 	bl	80034bc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8002e6e:	bf00      	nop
 8002e70:	bd80      	pop	{r7, pc}
 8002e72:	bf00      	nop
 8002e74:	20000c0c 	.word	0x20000c0c

08002e78 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8002e78:	b580      	push	{r7, lr}
 8002e7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8002e7c:	4802      	ldr	r0, [pc, #8]	; (8002e88 <OTG_FS_IRQHandler+0x10>)
 8002e7e:	f001 f9fd 	bl	800427c <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8002e82:	bf00      	nop
 8002e84:	bd80      	pop	{r7, pc}
 8002e86:	bf00      	nop
 8002e88:	20002864 	.word	0x20002864

08002e8c <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8002e8c:	b580      	push	{r7, lr}
 8002e8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_tx);
 8002e90:	4802      	ldr	r0, [pc, #8]	; (8002e9c <DMA2_Stream6_IRQHandler+0x10>)
 8002e92:	f000 fb13 	bl	80034bc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8002e96:	bf00      	nop
 8002e98:	bd80      	pop	{r7, pc}
 8002e9a:	bf00      	nop
 8002e9c:	20000de0 	.word	0x20000de0

08002ea0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002ea0:	b480      	push	{r7}
 8002ea2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002ea4:	4b08      	ldr	r3, [pc, #32]	; (8002ec8 <SystemInit+0x28>)
 8002ea6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002eaa:	4a07      	ldr	r2, [pc, #28]	; (8002ec8 <SystemInit+0x28>)
 8002eac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002eb0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002eb4:	4b04      	ldr	r3, [pc, #16]	; (8002ec8 <SystemInit+0x28>)
 8002eb6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002eba:	609a      	str	r2, [r3, #8]
#endif
}
 8002ebc:	bf00      	nop
 8002ebe:	46bd      	mov	sp, r7
 8002ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec4:	4770      	bx	lr
 8002ec6:	bf00      	nop
 8002ec8:	e000ed00 	.word	0xe000ed00

08002ecc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002ecc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002f04 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002ed0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002ed2:	e003      	b.n	8002edc <LoopCopyDataInit>

08002ed4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002ed4:	4b0c      	ldr	r3, [pc, #48]	; (8002f08 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8002ed6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002ed8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002eda:	3104      	adds	r1, #4

08002edc <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002edc:	480b      	ldr	r0, [pc, #44]	; (8002f0c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8002ede:	4b0c      	ldr	r3, [pc, #48]	; (8002f10 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002ee0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002ee2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002ee4:	d3f6      	bcc.n	8002ed4 <CopyDataInit>
  ldr  r2, =_sbss
 8002ee6:	4a0b      	ldr	r2, [pc, #44]	; (8002f14 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002ee8:	e002      	b.n	8002ef0 <LoopFillZerobss>

08002eea <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002eea:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002eec:	f842 3b04 	str.w	r3, [r2], #4

08002ef0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002ef0:	4b09      	ldr	r3, [pc, #36]	; (8002f18 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002ef2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002ef4:	d3f9      	bcc.n	8002eea <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002ef6:	f7ff ffd3 	bl	8002ea0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002efa:	f00a ff1f 	bl	800dd3c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002efe:	f7fe fff7 	bl	8001ef0 <main>
  bx  lr    
 8002f02:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002f04:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8002f08:	080122d8 	.word	0x080122d8
  ldr  r0, =_sdata
 8002f0c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002f10:	20000354 	.word	0x20000354
  ldr  r2, =_sbss
 8002f14:	20000354 	.word	0x20000354
  ldr  r3, = _ebss
 8002f18:	20002c70 	.word	0x20002c70

08002f1c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002f1c:	e7fe      	b.n	8002f1c <ADC_IRQHandler>
	...

08002f20 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002f20:	b580      	push	{r7, lr}
 8002f22:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002f24:	4b0e      	ldr	r3, [pc, #56]	; (8002f60 <HAL_Init+0x40>)
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	4a0d      	ldr	r2, [pc, #52]	; (8002f60 <HAL_Init+0x40>)
 8002f2a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002f2e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002f30:	4b0b      	ldr	r3, [pc, #44]	; (8002f60 <HAL_Init+0x40>)
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	4a0a      	ldr	r2, [pc, #40]	; (8002f60 <HAL_Init+0x40>)
 8002f36:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002f3a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002f3c:	4b08      	ldr	r3, [pc, #32]	; (8002f60 <HAL_Init+0x40>)
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	4a07      	ldr	r2, [pc, #28]	; (8002f60 <HAL_Init+0x40>)
 8002f42:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f46:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002f48:	2003      	movs	r0, #3
 8002f4a:	f000 f94d 	bl	80031e8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002f4e:	2000      	movs	r0, #0
 8002f50:	f000 f808 	bl	8002f64 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002f54:	f7ff fc5e 	bl	8002814 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002f58:	2300      	movs	r3, #0
}
 8002f5a:	4618      	mov	r0, r3
 8002f5c:	bd80      	pop	{r7, pc}
 8002f5e:	bf00      	nop
 8002f60:	40023c00 	.word	0x40023c00

08002f64 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002f64:	b580      	push	{r7, lr}
 8002f66:	b082      	sub	sp, #8
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002f6c:	4b12      	ldr	r3, [pc, #72]	; (8002fb8 <HAL_InitTick+0x54>)
 8002f6e:	681a      	ldr	r2, [r3, #0]
 8002f70:	4b12      	ldr	r3, [pc, #72]	; (8002fbc <HAL_InitTick+0x58>)
 8002f72:	781b      	ldrb	r3, [r3, #0]
 8002f74:	4619      	mov	r1, r3
 8002f76:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002f7a:	fbb3 f3f1 	udiv	r3, r3, r1
 8002f7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f82:	4618      	mov	r0, r3
 8002f84:	f000 f965 	bl	8003252 <HAL_SYSTICK_Config>
 8002f88:	4603      	mov	r3, r0
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d001      	beq.n	8002f92 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002f8e:	2301      	movs	r3, #1
 8002f90:	e00e      	b.n	8002fb0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	2b0f      	cmp	r3, #15
 8002f96:	d80a      	bhi.n	8002fae <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002f98:	2200      	movs	r2, #0
 8002f9a:	6879      	ldr	r1, [r7, #4]
 8002f9c:	f04f 30ff 	mov.w	r0, #4294967295
 8002fa0:	f000 f92d 	bl	80031fe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002fa4:	4a06      	ldr	r2, [pc, #24]	; (8002fc0 <HAL_InitTick+0x5c>)
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002faa:	2300      	movs	r3, #0
 8002fac:	e000      	b.n	8002fb0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002fae:	2301      	movs	r3, #1
}
 8002fb0:	4618      	mov	r0, r3
 8002fb2:	3708      	adds	r7, #8
 8002fb4:	46bd      	mov	sp, r7
 8002fb6:	bd80      	pop	{r7, pc}
 8002fb8:	20000008 	.word	0x20000008
 8002fbc:	20000010 	.word	0x20000010
 8002fc0:	2000000c 	.word	0x2000000c

08002fc4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002fc4:	b480      	push	{r7}
 8002fc6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002fc8:	4b06      	ldr	r3, [pc, #24]	; (8002fe4 <HAL_IncTick+0x20>)
 8002fca:	781b      	ldrb	r3, [r3, #0]
 8002fcc:	461a      	mov	r2, r3
 8002fce:	4b06      	ldr	r3, [pc, #24]	; (8002fe8 <HAL_IncTick+0x24>)
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	4413      	add	r3, r2
 8002fd4:	4a04      	ldr	r2, [pc, #16]	; (8002fe8 <HAL_IncTick+0x24>)
 8002fd6:	6013      	str	r3, [r2, #0]
}
 8002fd8:	bf00      	nop
 8002fda:	46bd      	mov	sp, r7
 8002fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe0:	4770      	bx	lr
 8002fe2:	bf00      	nop
 8002fe4:	20000010 	.word	0x20000010
 8002fe8:	20000f5c 	.word	0x20000f5c

08002fec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002fec:	b480      	push	{r7}
 8002fee:	af00      	add	r7, sp, #0
  return uwTick;
 8002ff0:	4b03      	ldr	r3, [pc, #12]	; (8003000 <HAL_GetTick+0x14>)
 8002ff2:	681b      	ldr	r3, [r3, #0]
}
 8002ff4:	4618      	mov	r0, r3
 8002ff6:	46bd      	mov	sp, r7
 8002ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ffc:	4770      	bx	lr
 8002ffe:	bf00      	nop
 8003000:	20000f5c 	.word	0x20000f5c

08003004 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003004:	b580      	push	{r7, lr}
 8003006:	b084      	sub	sp, #16
 8003008:	af00      	add	r7, sp, #0
 800300a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800300c:	f7ff ffee 	bl	8002fec <HAL_GetTick>
 8003010:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	f1b3 3fff 	cmp.w	r3, #4294967295
 800301c:	d005      	beq.n	800302a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800301e:	4b09      	ldr	r3, [pc, #36]	; (8003044 <HAL_Delay+0x40>)
 8003020:	781b      	ldrb	r3, [r3, #0]
 8003022:	461a      	mov	r2, r3
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	4413      	add	r3, r2
 8003028:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800302a:	bf00      	nop
 800302c:	f7ff ffde 	bl	8002fec <HAL_GetTick>
 8003030:	4602      	mov	r2, r0
 8003032:	68bb      	ldr	r3, [r7, #8]
 8003034:	1ad3      	subs	r3, r2, r3
 8003036:	68fa      	ldr	r2, [r7, #12]
 8003038:	429a      	cmp	r2, r3
 800303a:	d8f7      	bhi.n	800302c <HAL_Delay+0x28>
  {
  }
}
 800303c:	bf00      	nop
 800303e:	3710      	adds	r7, #16
 8003040:	46bd      	mov	sp, r7
 8003042:	bd80      	pop	{r7, pc}
 8003044:	20000010 	.word	0x20000010

08003048 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003048:	b480      	push	{r7}
 800304a:	b085      	sub	sp, #20
 800304c:	af00      	add	r7, sp, #0
 800304e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	f003 0307 	and.w	r3, r3, #7
 8003056:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003058:	4b0c      	ldr	r3, [pc, #48]	; (800308c <__NVIC_SetPriorityGrouping+0x44>)
 800305a:	68db      	ldr	r3, [r3, #12]
 800305c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800305e:	68ba      	ldr	r2, [r7, #8]
 8003060:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003064:	4013      	ands	r3, r2
 8003066:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800306c:	68bb      	ldr	r3, [r7, #8]
 800306e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003070:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003074:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003078:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800307a:	4a04      	ldr	r2, [pc, #16]	; (800308c <__NVIC_SetPriorityGrouping+0x44>)
 800307c:	68bb      	ldr	r3, [r7, #8]
 800307e:	60d3      	str	r3, [r2, #12]
}
 8003080:	bf00      	nop
 8003082:	3714      	adds	r7, #20
 8003084:	46bd      	mov	sp, r7
 8003086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800308a:	4770      	bx	lr
 800308c:	e000ed00 	.word	0xe000ed00

08003090 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003090:	b480      	push	{r7}
 8003092:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003094:	4b04      	ldr	r3, [pc, #16]	; (80030a8 <__NVIC_GetPriorityGrouping+0x18>)
 8003096:	68db      	ldr	r3, [r3, #12]
 8003098:	0a1b      	lsrs	r3, r3, #8
 800309a:	f003 0307 	and.w	r3, r3, #7
}
 800309e:	4618      	mov	r0, r3
 80030a0:	46bd      	mov	sp, r7
 80030a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a6:	4770      	bx	lr
 80030a8:	e000ed00 	.word	0xe000ed00

080030ac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80030ac:	b480      	push	{r7}
 80030ae:	b083      	sub	sp, #12
 80030b0:	af00      	add	r7, sp, #0
 80030b2:	4603      	mov	r3, r0
 80030b4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80030b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	db0b      	blt.n	80030d6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80030be:	79fb      	ldrb	r3, [r7, #7]
 80030c0:	f003 021f 	and.w	r2, r3, #31
 80030c4:	4907      	ldr	r1, [pc, #28]	; (80030e4 <__NVIC_EnableIRQ+0x38>)
 80030c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030ca:	095b      	lsrs	r3, r3, #5
 80030cc:	2001      	movs	r0, #1
 80030ce:	fa00 f202 	lsl.w	r2, r0, r2
 80030d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80030d6:	bf00      	nop
 80030d8:	370c      	adds	r7, #12
 80030da:	46bd      	mov	sp, r7
 80030dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e0:	4770      	bx	lr
 80030e2:	bf00      	nop
 80030e4:	e000e100 	.word	0xe000e100

080030e8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80030e8:	b480      	push	{r7}
 80030ea:	b083      	sub	sp, #12
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	4603      	mov	r3, r0
 80030f0:	6039      	str	r1, [r7, #0]
 80030f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80030f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	db0a      	blt.n	8003112 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80030fc:	683b      	ldr	r3, [r7, #0]
 80030fe:	b2da      	uxtb	r2, r3
 8003100:	490c      	ldr	r1, [pc, #48]	; (8003134 <__NVIC_SetPriority+0x4c>)
 8003102:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003106:	0112      	lsls	r2, r2, #4
 8003108:	b2d2      	uxtb	r2, r2
 800310a:	440b      	add	r3, r1
 800310c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003110:	e00a      	b.n	8003128 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003112:	683b      	ldr	r3, [r7, #0]
 8003114:	b2da      	uxtb	r2, r3
 8003116:	4908      	ldr	r1, [pc, #32]	; (8003138 <__NVIC_SetPriority+0x50>)
 8003118:	79fb      	ldrb	r3, [r7, #7]
 800311a:	f003 030f 	and.w	r3, r3, #15
 800311e:	3b04      	subs	r3, #4
 8003120:	0112      	lsls	r2, r2, #4
 8003122:	b2d2      	uxtb	r2, r2
 8003124:	440b      	add	r3, r1
 8003126:	761a      	strb	r2, [r3, #24]
}
 8003128:	bf00      	nop
 800312a:	370c      	adds	r7, #12
 800312c:	46bd      	mov	sp, r7
 800312e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003132:	4770      	bx	lr
 8003134:	e000e100 	.word	0xe000e100
 8003138:	e000ed00 	.word	0xe000ed00

0800313c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800313c:	b480      	push	{r7}
 800313e:	b089      	sub	sp, #36	; 0x24
 8003140:	af00      	add	r7, sp, #0
 8003142:	60f8      	str	r0, [r7, #12]
 8003144:	60b9      	str	r1, [r7, #8]
 8003146:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	f003 0307 	and.w	r3, r3, #7
 800314e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003150:	69fb      	ldr	r3, [r7, #28]
 8003152:	f1c3 0307 	rsb	r3, r3, #7
 8003156:	2b04      	cmp	r3, #4
 8003158:	bf28      	it	cs
 800315a:	2304      	movcs	r3, #4
 800315c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800315e:	69fb      	ldr	r3, [r7, #28]
 8003160:	3304      	adds	r3, #4
 8003162:	2b06      	cmp	r3, #6
 8003164:	d902      	bls.n	800316c <NVIC_EncodePriority+0x30>
 8003166:	69fb      	ldr	r3, [r7, #28]
 8003168:	3b03      	subs	r3, #3
 800316a:	e000      	b.n	800316e <NVIC_EncodePriority+0x32>
 800316c:	2300      	movs	r3, #0
 800316e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003170:	f04f 32ff 	mov.w	r2, #4294967295
 8003174:	69bb      	ldr	r3, [r7, #24]
 8003176:	fa02 f303 	lsl.w	r3, r2, r3
 800317a:	43da      	mvns	r2, r3
 800317c:	68bb      	ldr	r3, [r7, #8]
 800317e:	401a      	ands	r2, r3
 8003180:	697b      	ldr	r3, [r7, #20]
 8003182:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003184:	f04f 31ff 	mov.w	r1, #4294967295
 8003188:	697b      	ldr	r3, [r7, #20]
 800318a:	fa01 f303 	lsl.w	r3, r1, r3
 800318e:	43d9      	mvns	r1, r3
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003194:	4313      	orrs	r3, r2
         );
}
 8003196:	4618      	mov	r0, r3
 8003198:	3724      	adds	r7, #36	; 0x24
 800319a:	46bd      	mov	sp, r7
 800319c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a0:	4770      	bx	lr
	...

080031a4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80031a4:	b580      	push	{r7, lr}
 80031a6:	b082      	sub	sp, #8
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	3b01      	subs	r3, #1
 80031b0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80031b4:	d301      	bcc.n	80031ba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80031b6:	2301      	movs	r3, #1
 80031b8:	e00f      	b.n	80031da <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80031ba:	4a0a      	ldr	r2, [pc, #40]	; (80031e4 <SysTick_Config+0x40>)
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	3b01      	subs	r3, #1
 80031c0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80031c2:	210f      	movs	r1, #15
 80031c4:	f04f 30ff 	mov.w	r0, #4294967295
 80031c8:	f7ff ff8e 	bl	80030e8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80031cc:	4b05      	ldr	r3, [pc, #20]	; (80031e4 <SysTick_Config+0x40>)
 80031ce:	2200      	movs	r2, #0
 80031d0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80031d2:	4b04      	ldr	r3, [pc, #16]	; (80031e4 <SysTick_Config+0x40>)
 80031d4:	2207      	movs	r2, #7
 80031d6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80031d8:	2300      	movs	r3, #0
}
 80031da:	4618      	mov	r0, r3
 80031dc:	3708      	adds	r7, #8
 80031de:	46bd      	mov	sp, r7
 80031e0:	bd80      	pop	{r7, pc}
 80031e2:	bf00      	nop
 80031e4:	e000e010 	.word	0xe000e010

080031e8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80031e8:	b580      	push	{r7, lr}
 80031ea:	b082      	sub	sp, #8
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80031f0:	6878      	ldr	r0, [r7, #4]
 80031f2:	f7ff ff29 	bl	8003048 <__NVIC_SetPriorityGrouping>
}
 80031f6:	bf00      	nop
 80031f8:	3708      	adds	r7, #8
 80031fa:	46bd      	mov	sp, r7
 80031fc:	bd80      	pop	{r7, pc}

080031fe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80031fe:	b580      	push	{r7, lr}
 8003200:	b086      	sub	sp, #24
 8003202:	af00      	add	r7, sp, #0
 8003204:	4603      	mov	r3, r0
 8003206:	60b9      	str	r1, [r7, #8]
 8003208:	607a      	str	r2, [r7, #4]
 800320a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800320c:	2300      	movs	r3, #0
 800320e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003210:	f7ff ff3e 	bl	8003090 <__NVIC_GetPriorityGrouping>
 8003214:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003216:	687a      	ldr	r2, [r7, #4]
 8003218:	68b9      	ldr	r1, [r7, #8]
 800321a:	6978      	ldr	r0, [r7, #20]
 800321c:	f7ff ff8e 	bl	800313c <NVIC_EncodePriority>
 8003220:	4602      	mov	r2, r0
 8003222:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003226:	4611      	mov	r1, r2
 8003228:	4618      	mov	r0, r3
 800322a:	f7ff ff5d 	bl	80030e8 <__NVIC_SetPriority>
}
 800322e:	bf00      	nop
 8003230:	3718      	adds	r7, #24
 8003232:	46bd      	mov	sp, r7
 8003234:	bd80      	pop	{r7, pc}

08003236 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003236:	b580      	push	{r7, lr}
 8003238:	b082      	sub	sp, #8
 800323a:	af00      	add	r7, sp, #0
 800323c:	4603      	mov	r3, r0
 800323e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003240:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003244:	4618      	mov	r0, r3
 8003246:	f7ff ff31 	bl	80030ac <__NVIC_EnableIRQ>
}
 800324a:	bf00      	nop
 800324c:	3708      	adds	r7, #8
 800324e:	46bd      	mov	sp, r7
 8003250:	bd80      	pop	{r7, pc}

08003252 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003252:	b580      	push	{r7, lr}
 8003254:	b082      	sub	sp, #8
 8003256:	af00      	add	r7, sp, #0
 8003258:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800325a:	6878      	ldr	r0, [r7, #4]
 800325c:	f7ff ffa2 	bl	80031a4 <SysTick_Config>
 8003260:	4603      	mov	r3, r0
}
 8003262:	4618      	mov	r0, r3
 8003264:	3708      	adds	r7, #8
 8003266:	46bd      	mov	sp, r7
 8003268:	bd80      	pop	{r7, pc}
	...

0800326c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800326c:	b580      	push	{r7, lr}
 800326e:	b086      	sub	sp, #24
 8003270:	af00      	add	r7, sp, #0
 8003272:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003274:	2300      	movs	r3, #0
 8003276:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003278:	f7ff feb8 	bl	8002fec <HAL_GetTick>
 800327c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	2b00      	cmp	r3, #0
 8003282:	d101      	bne.n	8003288 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003284:	2301      	movs	r3, #1
 8003286:	e099      	b.n	80033bc <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	2200      	movs	r2, #0
 800328c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	2202      	movs	r2, #2
 8003294:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	681a      	ldr	r2, [r3, #0]
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f022 0201 	bic.w	r2, r2, #1
 80032a6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80032a8:	e00f      	b.n	80032ca <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80032aa:	f7ff fe9f 	bl	8002fec <HAL_GetTick>
 80032ae:	4602      	mov	r2, r0
 80032b0:	693b      	ldr	r3, [r7, #16]
 80032b2:	1ad3      	subs	r3, r2, r3
 80032b4:	2b05      	cmp	r3, #5
 80032b6:	d908      	bls.n	80032ca <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	2220      	movs	r2, #32
 80032bc:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	2203      	movs	r2, #3
 80032c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80032c6:	2303      	movs	r3, #3
 80032c8:	e078      	b.n	80033bc <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	f003 0301 	and.w	r3, r3, #1
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d1e8      	bne.n	80032aa <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80032e0:	697a      	ldr	r2, [r7, #20]
 80032e2:	4b38      	ldr	r3, [pc, #224]	; (80033c4 <HAL_DMA_Init+0x158>)
 80032e4:	4013      	ands	r3, r2
 80032e6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	685a      	ldr	r2, [r3, #4]
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	689b      	ldr	r3, [r3, #8]
 80032f0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80032f6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	691b      	ldr	r3, [r3, #16]
 80032fc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003302:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	699b      	ldr	r3, [r3, #24]
 8003308:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800330e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	6a1b      	ldr	r3, [r3, #32]
 8003314:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003316:	697a      	ldr	r2, [r7, #20]
 8003318:	4313      	orrs	r3, r2
 800331a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003320:	2b04      	cmp	r3, #4
 8003322:	d107      	bne.n	8003334 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800332c:	4313      	orrs	r3, r2
 800332e:	697a      	ldr	r2, [r7, #20]
 8003330:	4313      	orrs	r3, r2
 8003332:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	697a      	ldr	r2, [r7, #20]
 800333a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	695b      	ldr	r3, [r3, #20]
 8003342:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003344:	697b      	ldr	r3, [r7, #20]
 8003346:	f023 0307 	bic.w	r3, r3, #7
 800334a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003350:	697a      	ldr	r2, [r7, #20]
 8003352:	4313      	orrs	r3, r2
 8003354:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800335a:	2b04      	cmp	r3, #4
 800335c:	d117      	bne.n	800338e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003362:	697a      	ldr	r2, [r7, #20]
 8003364:	4313      	orrs	r3, r2
 8003366:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800336c:	2b00      	cmp	r3, #0
 800336e:	d00e      	beq.n	800338e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003370:	6878      	ldr	r0, [r7, #4]
 8003372:	f000 fa9d 	bl	80038b0 <DMA_CheckFifoParam>
 8003376:	4603      	mov	r3, r0
 8003378:	2b00      	cmp	r3, #0
 800337a:	d008      	beq.n	800338e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	2240      	movs	r2, #64	; 0x40
 8003380:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	2201      	movs	r2, #1
 8003386:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800338a:	2301      	movs	r3, #1
 800338c:	e016      	b.n	80033bc <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	697a      	ldr	r2, [r7, #20]
 8003394:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003396:	6878      	ldr	r0, [r7, #4]
 8003398:	f000 fa54 	bl	8003844 <DMA_CalcBaseAndBitshift>
 800339c:	4603      	mov	r3, r0
 800339e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033a4:	223f      	movs	r2, #63	; 0x3f
 80033a6:	409a      	lsls	r2, r3
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	2200      	movs	r2, #0
 80033b0:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	2201      	movs	r2, #1
 80033b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80033ba:	2300      	movs	r3, #0
}
 80033bc:	4618      	mov	r0, r3
 80033be:	3718      	adds	r7, #24
 80033c0:	46bd      	mov	sp, r7
 80033c2:	bd80      	pop	{r7, pc}
 80033c4:	f010803f 	.word	0xf010803f

080033c8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80033c8:	b580      	push	{r7, lr}
 80033ca:	b086      	sub	sp, #24
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	60f8      	str	r0, [r7, #12]
 80033d0:	60b9      	str	r1, [r7, #8]
 80033d2:	607a      	str	r2, [r7, #4]
 80033d4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80033d6:	2300      	movs	r3, #0
 80033d8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033de:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80033e6:	2b01      	cmp	r3, #1
 80033e8:	d101      	bne.n	80033ee <HAL_DMA_Start_IT+0x26>
 80033ea:	2302      	movs	r3, #2
 80033ec:	e040      	b.n	8003470 <HAL_DMA_Start_IT+0xa8>
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	2201      	movs	r2, #1
 80033f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80033fc:	b2db      	uxtb	r3, r3
 80033fe:	2b01      	cmp	r3, #1
 8003400:	d12f      	bne.n	8003462 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	2202      	movs	r2, #2
 8003406:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	2200      	movs	r2, #0
 800340e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003410:	683b      	ldr	r3, [r7, #0]
 8003412:	687a      	ldr	r2, [r7, #4]
 8003414:	68b9      	ldr	r1, [r7, #8]
 8003416:	68f8      	ldr	r0, [r7, #12]
 8003418:	f000 f9e6 	bl	80037e8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003420:	223f      	movs	r2, #63	; 0x3f
 8003422:	409a      	lsls	r2, r3
 8003424:	693b      	ldr	r3, [r7, #16]
 8003426:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	681a      	ldr	r2, [r3, #0]
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	f042 0216 	orr.w	r2, r2, #22
 8003436:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800343c:	2b00      	cmp	r3, #0
 800343e:	d007      	beq.n	8003450 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	681a      	ldr	r2, [r3, #0]
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f042 0208 	orr.w	r2, r2, #8
 800344e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	681a      	ldr	r2, [r3, #0]
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	f042 0201 	orr.w	r2, r2, #1
 800345e:	601a      	str	r2, [r3, #0]
 8003460:	e005      	b.n	800346e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	2200      	movs	r2, #0
 8003466:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800346a:	2302      	movs	r3, #2
 800346c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800346e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003470:	4618      	mov	r0, r3
 8003472:	3718      	adds	r7, #24
 8003474:	46bd      	mov	sp, r7
 8003476:	bd80      	pop	{r7, pc}

08003478 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003478:	b480      	push	{r7}
 800347a:	b083      	sub	sp, #12
 800347c:	af00      	add	r7, sp, #0
 800347e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003486:	b2db      	uxtb	r3, r3
 8003488:	2b02      	cmp	r3, #2
 800348a:	d004      	beq.n	8003496 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	2280      	movs	r2, #128	; 0x80
 8003490:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003492:	2301      	movs	r3, #1
 8003494:	e00c      	b.n	80034b0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	2205      	movs	r2, #5
 800349a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	681a      	ldr	r2, [r3, #0]
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	f022 0201 	bic.w	r2, r2, #1
 80034ac:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80034ae:	2300      	movs	r3, #0
}
 80034b0:	4618      	mov	r0, r3
 80034b2:	370c      	adds	r7, #12
 80034b4:	46bd      	mov	sp, r7
 80034b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ba:	4770      	bx	lr

080034bc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80034bc:	b580      	push	{r7, lr}
 80034be:	b086      	sub	sp, #24
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80034c4:	2300      	movs	r3, #0
 80034c6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80034c8:	4b92      	ldr	r3, [pc, #584]	; (8003714 <HAL_DMA_IRQHandler+0x258>)
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	4a92      	ldr	r2, [pc, #584]	; (8003718 <HAL_DMA_IRQHandler+0x25c>)
 80034ce:	fba2 2303 	umull	r2, r3, r2, r3
 80034d2:	0a9b      	lsrs	r3, r3, #10
 80034d4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034da:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80034dc:	693b      	ldr	r3, [r7, #16]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034e6:	2208      	movs	r2, #8
 80034e8:	409a      	lsls	r2, r3
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	4013      	ands	r3, r2
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d01a      	beq.n	8003528 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	f003 0304 	and.w	r3, r3, #4
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d013      	beq.n	8003528 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	681a      	ldr	r2, [r3, #0]
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	f022 0204 	bic.w	r2, r2, #4
 800350e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003514:	2208      	movs	r2, #8
 8003516:	409a      	lsls	r2, r3
 8003518:	693b      	ldr	r3, [r7, #16]
 800351a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003520:	f043 0201 	orr.w	r2, r3, #1
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800352c:	2201      	movs	r2, #1
 800352e:	409a      	lsls	r2, r3
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	4013      	ands	r3, r2
 8003534:	2b00      	cmp	r3, #0
 8003536:	d012      	beq.n	800355e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	695b      	ldr	r3, [r3, #20]
 800353e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003542:	2b00      	cmp	r3, #0
 8003544:	d00b      	beq.n	800355e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800354a:	2201      	movs	r2, #1
 800354c:	409a      	lsls	r2, r3
 800354e:	693b      	ldr	r3, [r7, #16]
 8003550:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003556:	f043 0202 	orr.w	r2, r3, #2
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003562:	2204      	movs	r2, #4
 8003564:	409a      	lsls	r2, r3
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	4013      	ands	r3, r2
 800356a:	2b00      	cmp	r3, #0
 800356c:	d012      	beq.n	8003594 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f003 0302 	and.w	r3, r3, #2
 8003578:	2b00      	cmp	r3, #0
 800357a:	d00b      	beq.n	8003594 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003580:	2204      	movs	r2, #4
 8003582:	409a      	lsls	r2, r3
 8003584:	693b      	ldr	r3, [r7, #16]
 8003586:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800358c:	f043 0204 	orr.w	r2, r3, #4
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003598:	2210      	movs	r2, #16
 800359a:	409a      	lsls	r2, r3
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	4013      	ands	r3, r2
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d043      	beq.n	800362c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	f003 0308 	and.w	r3, r3, #8
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d03c      	beq.n	800362c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035b6:	2210      	movs	r2, #16
 80035b8:	409a      	lsls	r2, r3
 80035ba:	693b      	ldr	r3, [r7, #16]
 80035bc:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d018      	beq.n	80035fe <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d108      	bne.n	80035ec <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d024      	beq.n	800362c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035e6:	6878      	ldr	r0, [r7, #4]
 80035e8:	4798      	blx	r3
 80035ea:	e01f      	b.n	800362c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d01b      	beq.n	800362c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80035f8:	6878      	ldr	r0, [r7, #4]
 80035fa:	4798      	blx	r3
 80035fc:	e016      	b.n	800362c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003608:	2b00      	cmp	r3, #0
 800360a:	d107      	bne.n	800361c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	681a      	ldr	r2, [r3, #0]
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	f022 0208 	bic.w	r2, r2, #8
 800361a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003620:	2b00      	cmp	r3, #0
 8003622:	d003      	beq.n	800362c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003628:	6878      	ldr	r0, [r7, #4]
 800362a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003630:	2220      	movs	r2, #32
 8003632:	409a      	lsls	r2, r3
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	4013      	ands	r3, r2
 8003638:	2b00      	cmp	r3, #0
 800363a:	f000 808e 	beq.w	800375a <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	f003 0310 	and.w	r3, r3, #16
 8003648:	2b00      	cmp	r3, #0
 800364a:	f000 8086 	beq.w	800375a <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003652:	2220      	movs	r2, #32
 8003654:	409a      	lsls	r2, r3
 8003656:	693b      	ldr	r3, [r7, #16]
 8003658:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003660:	b2db      	uxtb	r3, r3
 8003662:	2b05      	cmp	r3, #5
 8003664:	d136      	bne.n	80036d4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	681a      	ldr	r2, [r3, #0]
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	f022 0216 	bic.w	r2, r2, #22
 8003674:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	695a      	ldr	r2, [r3, #20]
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003684:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800368a:	2b00      	cmp	r3, #0
 800368c:	d103      	bne.n	8003696 <HAL_DMA_IRQHandler+0x1da>
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003692:	2b00      	cmp	r3, #0
 8003694:	d007      	beq.n	80036a6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	681a      	ldr	r2, [r3, #0]
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	f022 0208 	bic.w	r2, r2, #8
 80036a4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036aa:	223f      	movs	r2, #63	; 0x3f
 80036ac:	409a      	lsls	r2, r3
 80036ae:	693b      	ldr	r3, [r7, #16]
 80036b0:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	2200      	movs	r2, #0
 80036b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	2201      	movs	r2, #1
 80036be:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d07d      	beq.n	80037c6 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80036ce:	6878      	ldr	r0, [r7, #4]
 80036d0:	4798      	blx	r3
        }
        return;
 80036d2:	e078      	b.n	80037c6 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d01c      	beq.n	800371c <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d108      	bne.n	8003702 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d030      	beq.n	800375a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036fc:	6878      	ldr	r0, [r7, #4]
 80036fe:	4798      	blx	r3
 8003700:	e02b      	b.n	800375a <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003706:	2b00      	cmp	r3, #0
 8003708:	d027      	beq.n	800375a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800370e:	6878      	ldr	r0, [r7, #4]
 8003710:	4798      	blx	r3
 8003712:	e022      	b.n	800375a <HAL_DMA_IRQHandler+0x29e>
 8003714:	20000008 	.word	0x20000008
 8003718:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003726:	2b00      	cmp	r3, #0
 8003728:	d10f      	bne.n	800374a <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	681a      	ldr	r2, [r3, #0]
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	f022 0210 	bic.w	r2, r2, #16
 8003738:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	2200      	movs	r2, #0
 800373e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	2201      	movs	r2, #1
 8003746:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800374e:	2b00      	cmp	r3, #0
 8003750:	d003      	beq.n	800375a <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003756:	6878      	ldr	r0, [r7, #4]
 8003758:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800375e:	2b00      	cmp	r3, #0
 8003760:	d032      	beq.n	80037c8 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003766:	f003 0301 	and.w	r3, r3, #1
 800376a:	2b00      	cmp	r3, #0
 800376c:	d022      	beq.n	80037b4 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	2205      	movs	r2, #5
 8003772:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	681a      	ldr	r2, [r3, #0]
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	f022 0201 	bic.w	r2, r2, #1
 8003784:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003786:	68bb      	ldr	r3, [r7, #8]
 8003788:	3301      	adds	r3, #1
 800378a:	60bb      	str	r3, [r7, #8]
 800378c:	697a      	ldr	r2, [r7, #20]
 800378e:	429a      	cmp	r2, r3
 8003790:	d307      	bcc.n	80037a2 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	f003 0301 	and.w	r3, r3, #1
 800379c:	2b00      	cmp	r3, #0
 800379e:	d1f2      	bne.n	8003786 <HAL_DMA_IRQHandler+0x2ca>
 80037a0:	e000      	b.n	80037a4 <HAL_DMA_IRQHandler+0x2e8>
          break;
 80037a2:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	2200      	movs	r2, #0
 80037a8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	2201      	movs	r2, #1
 80037b0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d005      	beq.n	80037c8 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80037c0:	6878      	ldr	r0, [r7, #4]
 80037c2:	4798      	blx	r3
 80037c4:	e000      	b.n	80037c8 <HAL_DMA_IRQHandler+0x30c>
        return;
 80037c6:	bf00      	nop
    }
  }
}
 80037c8:	3718      	adds	r7, #24
 80037ca:	46bd      	mov	sp, r7
 80037cc:	bd80      	pop	{r7, pc}
 80037ce:	bf00      	nop

080037d0 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 80037d0:	b480      	push	{r7}
 80037d2:	b083      	sub	sp, #12
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 80037dc:	4618      	mov	r0, r3
 80037de:	370c      	adds	r7, #12
 80037e0:	46bd      	mov	sp, r7
 80037e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e6:	4770      	bx	lr

080037e8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80037e8:	b480      	push	{r7}
 80037ea:	b085      	sub	sp, #20
 80037ec:	af00      	add	r7, sp, #0
 80037ee:	60f8      	str	r0, [r7, #12]
 80037f0:	60b9      	str	r1, [r7, #8]
 80037f2:	607a      	str	r2, [r7, #4]
 80037f4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	681a      	ldr	r2, [r3, #0]
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003804:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	683a      	ldr	r2, [r7, #0]
 800380c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	689b      	ldr	r3, [r3, #8]
 8003812:	2b40      	cmp	r3, #64	; 0x40
 8003814:	d108      	bne.n	8003828 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	687a      	ldr	r2, [r7, #4]
 800381c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	68ba      	ldr	r2, [r7, #8]
 8003824:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003826:	e007      	b.n	8003838 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	68ba      	ldr	r2, [r7, #8]
 800382e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	687a      	ldr	r2, [r7, #4]
 8003836:	60da      	str	r2, [r3, #12]
}
 8003838:	bf00      	nop
 800383a:	3714      	adds	r7, #20
 800383c:	46bd      	mov	sp, r7
 800383e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003842:	4770      	bx	lr

08003844 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003844:	b480      	push	{r7}
 8003846:	b085      	sub	sp, #20
 8003848:	af00      	add	r7, sp, #0
 800384a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	b2db      	uxtb	r3, r3
 8003852:	3b10      	subs	r3, #16
 8003854:	4a14      	ldr	r2, [pc, #80]	; (80038a8 <DMA_CalcBaseAndBitshift+0x64>)
 8003856:	fba2 2303 	umull	r2, r3, r2, r3
 800385a:	091b      	lsrs	r3, r3, #4
 800385c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800385e:	4a13      	ldr	r2, [pc, #76]	; (80038ac <DMA_CalcBaseAndBitshift+0x68>)
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	4413      	add	r3, r2
 8003864:	781b      	ldrb	r3, [r3, #0]
 8003866:	461a      	mov	r2, r3
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	2b03      	cmp	r3, #3
 8003870:	d909      	bls.n	8003886 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800387a:	f023 0303 	bic.w	r3, r3, #3
 800387e:	1d1a      	adds	r2, r3, #4
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	659a      	str	r2, [r3, #88]	; 0x58
 8003884:	e007      	b.n	8003896 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800388e:	f023 0303 	bic.w	r3, r3, #3
 8003892:	687a      	ldr	r2, [r7, #4]
 8003894:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800389a:	4618      	mov	r0, r3
 800389c:	3714      	adds	r7, #20
 800389e:	46bd      	mov	sp, r7
 80038a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a4:	4770      	bx	lr
 80038a6:	bf00      	nop
 80038a8:	aaaaaaab 	.word	0xaaaaaaab
 80038ac:	08011ff4 	.word	0x08011ff4

080038b0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80038b0:	b480      	push	{r7}
 80038b2:	b085      	sub	sp, #20
 80038b4:	af00      	add	r7, sp, #0
 80038b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80038b8:	2300      	movs	r3, #0
 80038ba:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038c0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	699b      	ldr	r3, [r3, #24]
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d11f      	bne.n	800390a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80038ca:	68bb      	ldr	r3, [r7, #8]
 80038cc:	2b03      	cmp	r3, #3
 80038ce:	d855      	bhi.n	800397c <DMA_CheckFifoParam+0xcc>
 80038d0:	a201      	add	r2, pc, #4	; (adr r2, 80038d8 <DMA_CheckFifoParam+0x28>)
 80038d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038d6:	bf00      	nop
 80038d8:	080038e9 	.word	0x080038e9
 80038dc:	080038fb 	.word	0x080038fb
 80038e0:	080038e9 	.word	0x080038e9
 80038e4:	0800397d 	.word	0x0800397d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038ec:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d045      	beq.n	8003980 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 80038f4:	2301      	movs	r3, #1
 80038f6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80038f8:	e042      	b.n	8003980 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038fe:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003902:	d13f      	bne.n	8003984 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8003904:	2301      	movs	r3, #1
 8003906:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003908:	e03c      	b.n	8003984 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	699b      	ldr	r3, [r3, #24]
 800390e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003912:	d121      	bne.n	8003958 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003914:	68bb      	ldr	r3, [r7, #8]
 8003916:	2b03      	cmp	r3, #3
 8003918:	d836      	bhi.n	8003988 <DMA_CheckFifoParam+0xd8>
 800391a:	a201      	add	r2, pc, #4	; (adr r2, 8003920 <DMA_CheckFifoParam+0x70>)
 800391c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003920:	08003931 	.word	0x08003931
 8003924:	08003937 	.word	0x08003937
 8003928:	08003931 	.word	0x08003931
 800392c:	08003949 	.word	0x08003949
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003930:	2301      	movs	r3, #1
 8003932:	73fb      	strb	r3, [r7, #15]
      break;
 8003934:	e02f      	b.n	8003996 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800393a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800393e:	2b00      	cmp	r3, #0
 8003940:	d024      	beq.n	800398c <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8003942:	2301      	movs	r3, #1
 8003944:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003946:	e021      	b.n	800398c <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800394c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003950:	d11e      	bne.n	8003990 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8003952:	2301      	movs	r3, #1
 8003954:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003956:	e01b      	b.n	8003990 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003958:	68bb      	ldr	r3, [r7, #8]
 800395a:	2b02      	cmp	r3, #2
 800395c:	d902      	bls.n	8003964 <DMA_CheckFifoParam+0xb4>
 800395e:	2b03      	cmp	r3, #3
 8003960:	d003      	beq.n	800396a <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003962:	e018      	b.n	8003996 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8003964:	2301      	movs	r3, #1
 8003966:	73fb      	strb	r3, [r7, #15]
      break;
 8003968:	e015      	b.n	8003996 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800396e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003972:	2b00      	cmp	r3, #0
 8003974:	d00e      	beq.n	8003994 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8003976:	2301      	movs	r3, #1
 8003978:	73fb      	strb	r3, [r7, #15]
      break;
 800397a:	e00b      	b.n	8003994 <DMA_CheckFifoParam+0xe4>
      break;
 800397c:	bf00      	nop
 800397e:	e00a      	b.n	8003996 <DMA_CheckFifoParam+0xe6>
      break;
 8003980:	bf00      	nop
 8003982:	e008      	b.n	8003996 <DMA_CheckFifoParam+0xe6>
      break;
 8003984:	bf00      	nop
 8003986:	e006      	b.n	8003996 <DMA_CheckFifoParam+0xe6>
      break;
 8003988:	bf00      	nop
 800398a:	e004      	b.n	8003996 <DMA_CheckFifoParam+0xe6>
      break;
 800398c:	bf00      	nop
 800398e:	e002      	b.n	8003996 <DMA_CheckFifoParam+0xe6>
      break;   
 8003990:	bf00      	nop
 8003992:	e000      	b.n	8003996 <DMA_CheckFifoParam+0xe6>
      break;
 8003994:	bf00      	nop
    }
  } 
  
  return status; 
 8003996:	7bfb      	ldrb	r3, [r7, #15]
}
 8003998:	4618      	mov	r0, r3
 800399a:	3714      	adds	r7, #20
 800399c:	46bd      	mov	sp, r7
 800399e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a2:	4770      	bx	lr

080039a4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80039a4:	b480      	push	{r7}
 80039a6:	b089      	sub	sp, #36	; 0x24
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	6078      	str	r0, [r7, #4]
 80039ac:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80039ae:	2300      	movs	r3, #0
 80039b0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80039b2:	2300      	movs	r3, #0
 80039b4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80039b6:	2300      	movs	r3, #0
 80039b8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80039ba:	2300      	movs	r3, #0
 80039bc:	61fb      	str	r3, [r7, #28]
 80039be:	e16b      	b.n	8003c98 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80039c0:	2201      	movs	r2, #1
 80039c2:	69fb      	ldr	r3, [r7, #28]
 80039c4:	fa02 f303 	lsl.w	r3, r2, r3
 80039c8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80039ca:	683b      	ldr	r3, [r7, #0]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	697a      	ldr	r2, [r7, #20]
 80039d0:	4013      	ands	r3, r2
 80039d2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80039d4:	693a      	ldr	r2, [r7, #16]
 80039d6:	697b      	ldr	r3, [r7, #20]
 80039d8:	429a      	cmp	r2, r3
 80039da:	f040 815a 	bne.w	8003c92 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80039de:	683b      	ldr	r3, [r7, #0]
 80039e0:	685b      	ldr	r3, [r3, #4]
 80039e2:	2b01      	cmp	r3, #1
 80039e4:	d00b      	beq.n	80039fe <HAL_GPIO_Init+0x5a>
 80039e6:	683b      	ldr	r3, [r7, #0]
 80039e8:	685b      	ldr	r3, [r3, #4]
 80039ea:	2b02      	cmp	r3, #2
 80039ec:	d007      	beq.n	80039fe <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80039ee:	683b      	ldr	r3, [r7, #0]
 80039f0:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80039f2:	2b11      	cmp	r3, #17
 80039f4:	d003      	beq.n	80039fe <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80039f6:	683b      	ldr	r3, [r7, #0]
 80039f8:	685b      	ldr	r3, [r3, #4]
 80039fa:	2b12      	cmp	r3, #18
 80039fc:	d130      	bne.n	8003a60 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	689b      	ldr	r3, [r3, #8]
 8003a02:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003a04:	69fb      	ldr	r3, [r7, #28]
 8003a06:	005b      	lsls	r3, r3, #1
 8003a08:	2203      	movs	r2, #3
 8003a0a:	fa02 f303 	lsl.w	r3, r2, r3
 8003a0e:	43db      	mvns	r3, r3
 8003a10:	69ba      	ldr	r2, [r7, #24]
 8003a12:	4013      	ands	r3, r2
 8003a14:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003a16:	683b      	ldr	r3, [r7, #0]
 8003a18:	68da      	ldr	r2, [r3, #12]
 8003a1a:	69fb      	ldr	r3, [r7, #28]
 8003a1c:	005b      	lsls	r3, r3, #1
 8003a1e:	fa02 f303 	lsl.w	r3, r2, r3
 8003a22:	69ba      	ldr	r2, [r7, #24]
 8003a24:	4313      	orrs	r3, r2
 8003a26:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	69ba      	ldr	r2, [r7, #24]
 8003a2c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	685b      	ldr	r3, [r3, #4]
 8003a32:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003a34:	2201      	movs	r2, #1
 8003a36:	69fb      	ldr	r3, [r7, #28]
 8003a38:	fa02 f303 	lsl.w	r3, r2, r3
 8003a3c:	43db      	mvns	r3, r3
 8003a3e:	69ba      	ldr	r2, [r7, #24]
 8003a40:	4013      	ands	r3, r2
 8003a42:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003a44:	683b      	ldr	r3, [r7, #0]
 8003a46:	685b      	ldr	r3, [r3, #4]
 8003a48:	091b      	lsrs	r3, r3, #4
 8003a4a:	f003 0201 	and.w	r2, r3, #1
 8003a4e:	69fb      	ldr	r3, [r7, #28]
 8003a50:	fa02 f303 	lsl.w	r3, r2, r3
 8003a54:	69ba      	ldr	r2, [r7, #24]
 8003a56:	4313      	orrs	r3, r2
 8003a58:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	69ba      	ldr	r2, [r7, #24]
 8003a5e:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	68db      	ldr	r3, [r3, #12]
 8003a64:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003a66:	69fb      	ldr	r3, [r7, #28]
 8003a68:	005b      	lsls	r3, r3, #1
 8003a6a:	2203      	movs	r2, #3
 8003a6c:	fa02 f303 	lsl.w	r3, r2, r3
 8003a70:	43db      	mvns	r3, r3
 8003a72:	69ba      	ldr	r2, [r7, #24]
 8003a74:	4013      	ands	r3, r2
 8003a76:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003a78:	683b      	ldr	r3, [r7, #0]
 8003a7a:	689a      	ldr	r2, [r3, #8]
 8003a7c:	69fb      	ldr	r3, [r7, #28]
 8003a7e:	005b      	lsls	r3, r3, #1
 8003a80:	fa02 f303 	lsl.w	r3, r2, r3
 8003a84:	69ba      	ldr	r2, [r7, #24]
 8003a86:	4313      	orrs	r3, r2
 8003a88:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	69ba      	ldr	r2, [r7, #24]
 8003a8e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003a90:	683b      	ldr	r3, [r7, #0]
 8003a92:	685b      	ldr	r3, [r3, #4]
 8003a94:	2b02      	cmp	r3, #2
 8003a96:	d003      	beq.n	8003aa0 <HAL_GPIO_Init+0xfc>
 8003a98:	683b      	ldr	r3, [r7, #0]
 8003a9a:	685b      	ldr	r3, [r3, #4]
 8003a9c:	2b12      	cmp	r3, #18
 8003a9e:	d123      	bne.n	8003ae8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003aa0:	69fb      	ldr	r3, [r7, #28]
 8003aa2:	08da      	lsrs	r2, r3, #3
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	3208      	adds	r2, #8
 8003aa8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003aac:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003aae:	69fb      	ldr	r3, [r7, #28]
 8003ab0:	f003 0307 	and.w	r3, r3, #7
 8003ab4:	009b      	lsls	r3, r3, #2
 8003ab6:	220f      	movs	r2, #15
 8003ab8:	fa02 f303 	lsl.w	r3, r2, r3
 8003abc:	43db      	mvns	r3, r3
 8003abe:	69ba      	ldr	r2, [r7, #24]
 8003ac0:	4013      	ands	r3, r2
 8003ac2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003ac4:	683b      	ldr	r3, [r7, #0]
 8003ac6:	691a      	ldr	r2, [r3, #16]
 8003ac8:	69fb      	ldr	r3, [r7, #28]
 8003aca:	f003 0307 	and.w	r3, r3, #7
 8003ace:	009b      	lsls	r3, r3, #2
 8003ad0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ad4:	69ba      	ldr	r2, [r7, #24]
 8003ad6:	4313      	orrs	r3, r2
 8003ad8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003ada:	69fb      	ldr	r3, [r7, #28]
 8003adc:	08da      	lsrs	r2, r3, #3
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	3208      	adds	r2, #8
 8003ae2:	69b9      	ldr	r1, [r7, #24]
 8003ae4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003aee:	69fb      	ldr	r3, [r7, #28]
 8003af0:	005b      	lsls	r3, r3, #1
 8003af2:	2203      	movs	r2, #3
 8003af4:	fa02 f303 	lsl.w	r3, r2, r3
 8003af8:	43db      	mvns	r3, r3
 8003afa:	69ba      	ldr	r2, [r7, #24]
 8003afc:	4013      	ands	r3, r2
 8003afe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003b00:	683b      	ldr	r3, [r7, #0]
 8003b02:	685b      	ldr	r3, [r3, #4]
 8003b04:	f003 0203 	and.w	r2, r3, #3
 8003b08:	69fb      	ldr	r3, [r7, #28]
 8003b0a:	005b      	lsls	r3, r3, #1
 8003b0c:	fa02 f303 	lsl.w	r3, r2, r3
 8003b10:	69ba      	ldr	r2, [r7, #24]
 8003b12:	4313      	orrs	r3, r2
 8003b14:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	69ba      	ldr	r2, [r7, #24]
 8003b1a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003b1c:	683b      	ldr	r3, [r7, #0]
 8003b1e:	685b      	ldr	r3, [r3, #4]
 8003b20:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	f000 80b4 	beq.w	8003c92 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003b2a:	2300      	movs	r3, #0
 8003b2c:	60fb      	str	r3, [r7, #12]
 8003b2e:	4b5f      	ldr	r3, [pc, #380]	; (8003cac <HAL_GPIO_Init+0x308>)
 8003b30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b32:	4a5e      	ldr	r2, [pc, #376]	; (8003cac <HAL_GPIO_Init+0x308>)
 8003b34:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003b38:	6453      	str	r3, [r2, #68]	; 0x44
 8003b3a:	4b5c      	ldr	r3, [pc, #368]	; (8003cac <HAL_GPIO_Init+0x308>)
 8003b3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b3e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003b42:	60fb      	str	r3, [r7, #12]
 8003b44:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003b46:	4a5a      	ldr	r2, [pc, #360]	; (8003cb0 <HAL_GPIO_Init+0x30c>)
 8003b48:	69fb      	ldr	r3, [r7, #28]
 8003b4a:	089b      	lsrs	r3, r3, #2
 8003b4c:	3302      	adds	r3, #2
 8003b4e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b52:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003b54:	69fb      	ldr	r3, [r7, #28]
 8003b56:	f003 0303 	and.w	r3, r3, #3
 8003b5a:	009b      	lsls	r3, r3, #2
 8003b5c:	220f      	movs	r2, #15
 8003b5e:	fa02 f303 	lsl.w	r3, r2, r3
 8003b62:	43db      	mvns	r3, r3
 8003b64:	69ba      	ldr	r2, [r7, #24]
 8003b66:	4013      	ands	r3, r2
 8003b68:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	4a51      	ldr	r2, [pc, #324]	; (8003cb4 <HAL_GPIO_Init+0x310>)
 8003b6e:	4293      	cmp	r3, r2
 8003b70:	d02b      	beq.n	8003bca <HAL_GPIO_Init+0x226>
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	4a50      	ldr	r2, [pc, #320]	; (8003cb8 <HAL_GPIO_Init+0x314>)
 8003b76:	4293      	cmp	r3, r2
 8003b78:	d025      	beq.n	8003bc6 <HAL_GPIO_Init+0x222>
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	4a4f      	ldr	r2, [pc, #316]	; (8003cbc <HAL_GPIO_Init+0x318>)
 8003b7e:	4293      	cmp	r3, r2
 8003b80:	d01f      	beq.n	8003bc2 <HAL_GPIO_Init+0x21e>
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	4a4e      	ldr	r2, [pc, #312]	; (8003cc0 <HAL_GPIO_Init+0x31c>)
 8003b86:	4293      	cmp	r3, r2
 8003b88:	d019      	beq.n	8003bbe <HAL_GPIO_Init+0x21a>
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	4a4d      	ldr	r2, [pc, #308]	; (8003cc4 <HAL_GPIO_Init+0x320>)
 8003b8e:	4293      	cmp	r3, r2
 8003b90:	d013      	beq.n	8003bba <HAL_GPIO_Init+0x216>
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	4a4c      	ldr	r2, [pc, #304]	; (8003cc8 <HAL_GPIO_Init+0x324>)
 8003b96:	4293      	cmp	r3, r2
 8003b98:	d00d      	beq.n	8003bb6 <HAL_GPIO_Init+0x212>
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	4a4b      	ldr	r2, [pc, #300]	; (8003ccc <HAL_GPIO_Init+0x328>)
 8003b9e:	4293      	cmp	r3, r2
 8003ba0:	d007      	beq.n	8003bb2 <HAL_GPIO_Init+0x20e>
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	4a4a      	ldr	r2, [pc, #296]	; (8003cd0 <HAL_GPIO_Init+0x32c>)
 8003ba6:	4293      	cmp	r3, r2
 8003ba8:	d101      	bne.n	8003bae <HAL_GPIO_Init+0x20a>
 8003baa:	2307      	movs	r3, #7
 8003bac:	e00e      	b.n	8003bcc <HAL_GPIO_Init+0x228>
 8003bae:	2308      	movs	r3, #8
 8003bb0:	e00c      	b.n	8003bcc <HAL_GPIO_Init+0x228>
 8003bb2:	2306      	movs	r3, #6
 8003bb4:	e00a      	b.n	8003bcc <HAL_GPIO_Init+0x228>
 8003bb6:	2305      	movs	r3, #5
 8003bb8:	e008      	b.n	8003bcc <HAL_GPIO_Init+0x228>
 8003bba:	2304      	movs	r3, #4
 8003bbc:	e006      	b.n	8003bcc <HAL_GPIO_Init+0x228>
 8003bbe:	2303      	movs	r3, #3
 8003bc0:	e004      	b.n	8003bcc <HAL_GPIO_Init+0x228>
 8003bc2:	2302      	movs	r3, #2
 8003bc4:	e002      	b.n	8003bcc <HAL_GPIO_Init+0x228>
 8003bc6:	2301      	movs	r3, #1
 8003bc8:	e000      	b.n	8003bcc <HAL_GPIO_Init+0x228>
 8003bca:	2300      	movs	r3, #0
 8003bcc:	69fa      	ldr	r2, [r7, #28]
 8003bce:	f002 0203 	and.w	r2, r2, #3
 8003bd2:	0092      	lsls	r2, r2, #2
 8003bd4:	4093      	lsls	r3, r2
 8003bd6:	69ba      	ldr	r2, [r7, #24]
 8003bd8:	4313      	orrs	r3, r2
 8003bda:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003bdc:	4934      	ldr	r1, [pc, #208]	; (8003cb0 <HAL_GPIO_Init+0x30c>)
 8003bde:	69fb      	ldr	r3, [r7, #28]
 8003be0:	089b      	lsrs	r3, r3, #2
 8003be2:	3302      	adds	r3, #2
 8003be4:	69ba      	ldr	r2, [r7, #24]
 8003be6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003bea:	4b3a      	ldr	r3, [pc, #232]	; (8003cd4 <HAL_GPIO_Init+0x330>)
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003bf0:	693b      	ldr	r3, [r7, #16]
 8003bf2:	43db      	mvns	r3, r3
 8003bf4:	69ba      	ldr	r2, [r7, #24]
 8003bf6:	4013      	ands	r3, r2
 8003bf8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003bfa:	683b      	ldr	r3, [r7, #0]
 8003bfc:	685b      	ldr	r3, [r3, #4]
 8003bfe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d003      	beq.n	8003c0e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003c06:	69ba      	ldr	r2, [r7, #24]
 8003c08:	693b      	ldr	r3, [r7, #16]
 8003c0a:	4313      	orrs	r3, r2
 8003c0c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003c0e:	4a31      	ldr	r2, [pc, #196]	; (8003cd4 <HAL_GPIO_Init+0x330>)
 8003c10:	69bb      	ldr	r3, [r7, #24]
 8003c12:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003c14:	4b2f      	ldr	r3, [pc, #188]	; (8003cd4 <HAL_GPIO_Init+0x330>)
 8003c16:	685b      	ldr	r3, [r3, #4]
 8003c18:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003c1a:	693b      	ldr	r3, [r7, #16]
 8003c1c:	43db      	mvns	r3, r3
 8003c1e:	69ba      	ldr	r2, [r7, #24]
 8003c20:	4013      	ands	r3, r2
 8003c22:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003c24:	683b      	ldr	r3, [r7, #0]
 8003c26:	685b      	ldr	r3, [r3, #4]
 8003c28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d003      	beq.n	8003c38 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003c30:	69ba      	ldr	r2, [r7, #24]
 8003c32:	693b      	ldr	r3, [r7, #16]
 8003c34:	4313      	orrs	r3, r2
 8003c36:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003c38:	4a26      	ldr	r2, [pc, #152]	; (8003cd4 <HAL_GPIO_Init+0x330>)
 8003c3a:	69bb      	ldr	r3, [r7, #24]
 8003c3c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003c3e:	4b25      	ldr	r3, [pc, #148]	; (8003cd4 <HAL_GPIO_Init+0x330>)
 8003c40:	689b      	ldr	r3, [r3, #8]
 8003c42:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003c44:	693b      	ldr	r3, [r7, #16]
 8003c46:	43db      	mvns	r3, r3
 8003c48:	69ba      	ldr	r2, [r7, #24]
 8003c4a:	4013      	ands	r3, r2
 8003c4c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003c4e:	683b      	ldr	r3, [r7, #0]
 8003c50:	685b      	ldr	r3, [r3, #4]
 8003c52:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d003      	beq.n	8003c62 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8003c5a:	69ba      	ldr	r2, [r7, #24]
 8003c5c:	693b      	ldr	r3, [r7, #16]
 8003c5e:	4313      	orrs	r3, r2
 8003c60:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003c62:	4a1c      	ldr	r2, [pc, #112]	; (8003cd4 <HAL_GPIO_Init+0x330>)
 8003c64:	69bb      	ldr	r3, [r7, #24]
 8003c66:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003c68:	4b1a      	ldr	r3, [pc, #104]	; (8003cd4 <HAL_GPIO_Init+0x330>)
 8003c6a:	68db      	ldr	r3, [r3, #12]
 8003c6c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003c6e:	693b      	ldr	r3, [r7, #16]
 8003c70:	43db      	mvns	r3, r3
 8003c72:	69ba      	ldr	r2, [r7, #24]
 8003c74:	4013      	ands	r3, r2
 8003c76:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003c78:	683b      	ldr	r3, [r7, #0]
 8003c7a:	685b      	ldr	r3, [r3, #4]
 8003c7c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d003      	beq.n	8003c8c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003c84:	69ba      	ldr	r2, [r7, #24]
 8003c86:	693b      	ldr	r3, [r7, #16]
 8003c88:	4313      	orrs	r3, r2
 8003c8a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003c8c:	4a11      	ldr	r2, [pc, #68]	; (8003cd4 <HAL_GPIO_Init+0x330>)
 8003c8e:	69bb      	ldr	r3, [r7, #24]
 8003c90:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003c92:	69fb      	ldr	r3, [r7, #28]
 8003c94:	3301      	adds	r3, #1
 8003c96:	61fb      	str	r3, [r7, #28]
 8003c98:	69fb      	ldr	r3, [r7, #28]
 8003c9a:	2b0f      	cmp	r3, #15
 8003c9c:	f67f ae90 	bls.w	80039c0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003ca0:	bf00      	nop
 8003ca2:	3724      	adds	r7, #36	; 0x24
 8003ca4:	46bd      	mov	sp, r7
 8003ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003caa:	4770      	bx	lr
 8003cac:	40023800 	.word	0x40023800
 8003cb0:	40013800 	.word	0x40013800
 8003cb4:	40020000 	.word	0x40020000
 8003cb8:	40020400 	.word	0x40020400
 8003cbc:	40020800 	.word	0x40020800
 8003cc0:	40020c00 	.word	0x40020c00
 8003cc4:	40021000 	.word	0x40021000
 8003cc8:	40021400 	.word	0x40021400
 8003ccc:	40021800 	.word	0x40021800
 8003cd0:	40021c00 	.word	0x40021c00
 8003cd4:	40013c00 	.word	0x40013c00

08003cd8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003cd8:	b480      	push	{r7}
 8003cda:	b085      	sub	sp, #20
 8003cdc:	af00      	add	r7, sp, #0
 8003cde:	6078      	str	r0, [r7, #4]
 8003ce0:	460b      	mov	r3, r1
 8003ce2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	691a      	ldr	r2, [r3, #16]
 8003ce8:	887b      	ldrh	r3, [r7, #2]
 8003cea:	4013      	ands	r3, r2
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d002      	beq.n	8003cf6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003cf0:	2301      	movs	r3, #1
 8003cf2:	73fb      	strb	r3, [r7, #15]
 8003cf4:	e001      	b.n	8003cfa <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003cf6:	2300      	movs	r3, #0
 8003cf8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003cfa:	7bfb      	ldrb	r3, [r7, #15]
}
 8003cfc:	4618      	mov	r0, r3
 8003cfe:	3714      	adds	r7, #20
 8003d00:	46bd      	mov	sp, r7
 8003d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d06:	4770      	bx	lr

08003d08 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003d08:	b480      	push	{r7}
 8003d0a:	b083      	sub	sp, #12
 8003d0c:	af00      	add	r7, sp, #0
 8003d0e:	6078      	str	r0, [r7, #4]
 8003d10:	460b      	mov	r3, r1
 8003d12:	807b      	strh	r3, [r7, #2]
 8003d14:	4613      	mov	r3, r2
 8003d16:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003d18:	787b      	ldrb	r3, [r7, #1]
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d003      	beq.n	8003d26 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003d1e:	887a      	ldrh	r2, [r7, #2]
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003d24:	e003      	b.n	8003d2e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003d26:	887b      	ldrh	r3, [r7, #2]
 8003d28:	041a      	lsls	r2, r3, #16
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	619a      	str	r2, [r3, #24]
}
 8003d2e:	bf00      	nop
 8003d30:	370c      	adds	r7, #12
 8003d32:	46bd      	mov	sp, r7
 8003d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d38:	4770      	bx	lr
	...

08003d3c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003d3c:	b580      	push	{r7, lr}
 8003d3e:	b082      	sub	sp, #8
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	4603      	mov	r3, r0
 8003d44:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003d46:	4b08      	ldr	r3, [pc, #32]	; (8003d68 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003d48:	695a      	ldr	r2, [r3, #20]
 8003d4a:	88fb      	ldrh	r3, [r7, #6]
 8003d4c:	4013      	ands	r3, r2
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d006      	beq.n	8003d60 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003d52:	4a05      	ldr	r2, [pc, #20]	; (8003d68 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003d54:	88fb      	ldrh	r3, [r7, #6]
 8003d56:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003d58:	88fb      	ldrh	r3, [r7, #6]
 8003d5a:	4618      	mov	r0, r3
 8003d5c:	f7fe fd32 	bl	80027c4 <HAL_GPIO_EXTI_Callback>
  }
}
 8003d60:	bf00      	nop
 8003d62:	3708      	adds	r7, #8
 8003d64:	46bd      	mov	sp, r7
 8003d66:	bd80      	pop	{r7, pc}
 8003d68:	40013c00 	.word	0x40013c00

08003d6c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003d6c:	b580      	push	{r7, lr}
 8003d6e:	b084      	sub	sp, #16
 8003d70:	af00      	add	r7, sp, #0
 8003d72:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d101      	bne.n	8003d7e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003d7a:	2301      	movs	r3, #1
 8003d7c:	e11f      	b.n	8003fbe <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d84:	b2db      	uxtb	r3, r3
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d106      	bne.n	8003d98 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	2200      	movs	r2, #0
 8003d8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003d92:	6878      	ldr	r0, [r7, #4]
 8003d94:	f7fe fd66 	bl	8002864 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	2224      	movs	r2, #36	; 0x24
 8003d9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	681a      	ldr	r2, [r3, #0]
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	f022 0201 	bic.w	r2, r2, #1
 8003dae:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	681a      	ldr	r2, [r3, #0]
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003dbe:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	681a      	ldr	r2, [r3, #0]
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003dce:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003dd0:	f001 fea2 	bl	8005b18 <HAL_RCC_GetPCLK1Freq>
 8003dd4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	685b      	ldr	r3, [r3, #4]
 8003dda:	4a7b      	ldr	r2, [pc, #492]	; (8003fc8 <HAL_I2C_Init+0x25c>)
 8003ddc:	4293      	cmp	r3, r2
 8003dde:	d807      	bhi.n	8003df0 <HAL_I2C_Init+0x84>
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	4a7a      	ldr	r2, [pc, #488]	; (8003fcc <HAL_I2C_Init+0x260>)
 8003de4:	4293      	cmp	r3, r2
 8003de6:	bf94      	ite	ls
 8003de8:	2301      	movls	r3, #1
 8003dea:	2300      	movhi	r3, #0
 8003dec:	b2db      	uxtb	r3, r3
 8003dee:	e006      	b.n	8003dfe <HAL_I2C_Init+0x92>
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	4a77      	ldr	r2, [pc, #476]	; (8003fd0 <HAL_I2C_Init+0x264>)
 8003df4:	4293      	cmp	r3, r2
 8003df6:	bf94      	ite	ls
 8003df8:	2301      	movls	r3, #1
 8003dfa:	2300      	movhi	r3, #0
 8003dfc:	b2db      	uxtb	r3, r3
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d001      	beq.n	8003e06 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003e02:	2301      	movs	r3, #1
 8003e04:	e0db      	b.n	8003fbe <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	4a72      	ldr	r2, [pc, #456]	; (8003fd4 <HAL_I2C_Init+0x268>)
 8003e0a:	fba2 2303 	umull	r2, r3, r2, r3
 8003e0e:	0c9b      	lsrs	r3, r3, #18
 8003e10:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	685b      	ldr	r3, [r3, #4]
 8003e18:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	68ba      	ldr	r2, [r7, #8]
 8003e22:	430a      	orrs	r2, r1
 8003e24:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	6a1b      	ldr	r3, [r3, #32]
 8003e2c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	685b      	ldr	r3, [r3, #4]
 8003e34:	4a64      	ldr	r2, [pc, #400]	; (8003fc8 <HAL_I2C_Init+0x25c>)
 8003e36:	4293      	cmp	r3, r2
 8003e38:	d802      	bhi.n	8003e40 <HAL_I2C_Init+0xd4>
 8003e3a:	68bb      	ldr	r3, [r7, #8]
 8003e3c:	3301      	adds	r3, #1
 8003e3e:	e009      	b.n	8003e54 <HAL_I2C_Init+0xe8>
 8003e40:	68bb      	ldr	r3, [r7, #8]
 8003e42:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003e46:	fb02 f303 	mul.w	r3, r2, r3
 8003e4a:	4a63      	ldr	r2, [pc, #396]	; (8003fd8 <HAL_I2C_Init+0x26c>)
 8003e4c:	fba2 2303 	umull	r2, r3, r2, r3
 8003e50:	099b      	lsrs	r3, r3, #6
 8003e52:	3301      	adds	r3, #1
 8003e54:	687a      	ldr	r2, [r7, #4]
 8003e56:	6812      	ldr	r2, [r2, #0]
 8003e58:	430b      	orrs	r3, r1
 8003e5a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	69db      	ldr	r3, [r3, #28]
 8003e62:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003e66:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	685b      	ldr	r3, [r3, #4]
 8003e6e:	4956      	ldr	r1, [pc, #344]	; (8003fc8 <HAL_I2C_Init+0x25c>)
 8003e70:	428b      	cmp	r3, r1
 8003e72:	d80d      	bhi.n	8003e90 <HAL_I2C_Init+0x124>
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	1e59      	subs	r1, r3, #1
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	685b      	ldr	r3, [r3, #4]
 8003e7c:	005b      	lsls	r3, r3, #1
 8003e7e:	fbb1 f3f3 	udiv	r3, r1, r3
 8003e82:	3301      	adds	r3, #1
 8003e84:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003e88:	2b04      	cmp	r3, #4
 8003e8a:	bf38      	it	cc
 8003e8c:	2304      	movcc	r3, #4
 8003e8e:	e04f      	b.n	8003f30 <HAL_I2C_Init+0x1c4>
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	689b      	ldr	r3, [r3, #8]
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d111      	bne.n	8003ebc <HAL_I2C_Init+0x150>
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	1e58      	subs	r0, r3, #1
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	6859      	ldr	r1, [r3, #4]
 8003ea0:	460b      	mov	r3, r1
 8003ea2:	005b      	lsls	r3, r3, #1
 8003ea4:	440b      	add	r3, r1
 8003ea6:	fbb0 f3f3 	udiv	r3, r0, r3
 8003eaa:	3301      	adds	r3, #1
 8003eac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	bf0c      	ite	eq
 8003eb4:	2301      	moveq	r3, #1
 8003eb6:	2300      	movne	r3, #0
 8003eb8:	b2db      	uxtb	r3, r3
 8003eba:	e012      	b.n	8003ee2 <HAL_I2C_Init+0x176>
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	1e58      	subs	r0, r3, #1
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	6859      	ldr	r1, [r3, #4]
 8003ec4:	460b      	mov	r3, r1
 8003ec6:	009b      	lsls	r3, r3, #2
 8003ec8:	440b      	add	r3, r1
 8003eca:	0099      	lsls	r1, r3, #2
 8003ecc:	440b      	add	r3, r1
 8003ece:	fbb0 f3f3 	udiv	r3, r0, r3
 8003ed2:	3301      	adds	r3, #1
 8003ed4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	bf0c      	ite	eq
 8003edc:	2301      	moveq	r3, #1
 8003ede:	2300      	movne	r3, #0
 8003ee0:	b2db      	uxtb	r3, r3
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d001      	beq.n	8003eea <HAL_I2C_Init+0x17e>
 8003ee6:	2301      	movs	r3, #1
 8003ee8:	e022      	b.n	8003f30 <HAL_I2C_Init+0x1c4>
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	689b      	ldr	r3, [r3, #8]
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d10e      	bne.n	8003f10 <HAL_I2C_Init+0x1a4>
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	1e58      	subs	r0, r3, #1
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	6859      	ldr	r1, [r3, #4]
 8003efa:	460b      	mov	r3, r1
 8003efc:	005b      	lsls	r3, r3, #1
 8003efe:	440b      	add	r3, r1
 8003f00:	fbb0 f3f3 	udiv	r3, r0, r3
 8003f04:	3301      	adds	r3, #1
 8003f06:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003f0a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003f0e:	e00f      	b.n	8003f30 <HAL_I2C_Init+0x1c4>
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	1e58      	subs	r0, r3, #1
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	6859      	ldr	r1, [r3, #4]
 8003f18:	460b      	mov	r3, r1
 8003f1a:	009b      	lsls	r3, r3, #2
 8003f1c:	440b      	add	r3, r1
 8003f1e:	0099      	lsls	r1, r3, #2
 8003f20:	440b      	add	r3, r1
 8003f22:	fbb0 f3f3 	udiv	r3, r0, r3
 8003f26:	3301      	adds	r3, #1
 8003f28:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003f2c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003f30:	6879      	ldr	r1, [r7, #4]
 8003f32:	6809      	ldr	r1, [r1, #0]
 8003f34:	4313      	orrs	r3, r2
 8003f36:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	69da      	ldr	r2, [r3, #28]
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	6a1b      	ldr	r3, [r3, #32]
 8003f4a:	431a      	orrs	r2, r3
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	430a      	orrs	r2, r1
 8003f52:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	689b      	ldr	r3, [r3, #8]
 8003f5a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003f5e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003f62:	687a      	ldr	r2, [r7, #4]
 8003f64:	6911      	ldr	r1, [r2, #16]
 8003f66:	687a      	ldr	r2, [r7, #4]
 8003f68:	68d2      	ldr	r2, [r2, #12]
 8003f6a:	4311      	orrs	r1, r2
 8003f6c:	687a      	ldr	r2, [r7, #4]
 8003f6e:	6812      	ldr	r2, [r2, #0]
 8003f70:	430b      	orrs	r3, r1
 8003f72:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	68db      	ldr	r3, [r3, #12]
 8003f7a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	695a      	ldr	r2, [r3, #20]
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	699b      	ldr	r3, [r3, #24]
 8003f86:	431a      	orrs	r2, r3
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	430a      	orrs	r2, r1
 8003f8e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	681a      	ldr	r2, [r3, #0]
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	f042 0201 	orr.w	r2, r2, #1
 8003f9e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	2200      	movs	r2, #0
 8003fa4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	2220      	movs	r2, #32
 8003faa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	2200      	movs	r2, #0
 8003fb2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	2200      	movs	r2, #0
 8003fb8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003fbc:	2300      	movs	r3, #0
}
 8003fbe:	4618      	mov	r0, r3
 8003fc0:	3710      	adds	r7, #16
 8003fc2:	46bd      	mov	sp, r7
 8003fc4:	bd80      	pop	{r7, pc}
 8003fc6:	bf00      	nop
 8003fc8:	000186a0 	.word	0x000186a0
 8003fcc:	001e847f 	.word	0x001e847f
 8003fd0:	003d08ff 	.word	0x003d08ff
 8003fd4:	431bde83 	.word	0x431bde83
 8003fd8:	10624dd3 	.word	0x10624dd3

08003fdc <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003fdc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003fde:	b08f      	sub	sp, #60	; 0x3c
 8003fe0:	af0a      	add	r7, sp, #40	; 0x28
 8003fe2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d101      	bne.n	8003fee <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003fea:	2301      	movs	r3, #1
 8003fec:	e10f      	b.n	800420e <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8003ffa:	b2db      	uxtb	r3, r3
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d106      	bne.n	800400e <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	2200      	movs	r2, #0
 8004004:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004008:	6878      	ldr	r0, [r7, #4]
 800400a:	f009 fb97 	bl	800d73c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	2203      	movs	r2, #3
 8004012:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8004016:	68bb      	ldr	r3, [r7, #8]
 8004018:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800401a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800401e:	2b00      	cmp	r3, #0
 8004020:	d102      	bne.n	8004028 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	2200      	movs	r2, #0
 8004026:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	4618      	mov	r0, r3
 800402e:	f006 f948 	bl	800a2c2 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	603b      	str	r3, [r7, #0]
 8004038:	687e      	ldr	r6, [r7, #4]
 800403a:	466d      	mov	r5, sp
 800403c:	f106 0410 	add.w	r4, r6, #16
 8004040:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004042:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004044:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004046:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004048:	e894 0003 	ldmia.w	r4, {r0, r1}
 800404c:	e885 0003 	stmia.w	r5, {r0, r1}
 8004050:	1d33      	adds	r3, r6, #4
 8004052:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004054:	6838      	ldr	r0, [r7, #0]
 8004056:	f006 f81f 	bl	800a098 <USB_CoreInit>
 800405a:	4603      	mov	r3, r0
 800405c:	2b00      	cmp	r3, #0
 800405e:	d005      	beq.n	800406c <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	2202      	movs	r2, #2
 8004064:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8004068:	2301      	movs	r3, #1
 800406a:	e0d0      	b.n	800420e <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	2100      	movs	r1, #0
 8004072:	4618      	mov	r0, r3
 8004074:	f006 f936 	bl	800a2e4 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004078:	2300      	movs	r3, #0
 800407a:	73fb      	strb	r3, [r7, #15]
 800407c:	e04a      	b.n	8004114 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800407e:	7bfa      	ldrb	r2, [r7, #15]
 8004080:	6879      	ldr	r1, [r7, #4]
 8004082:	4613      	mov	r3, r2
 8004084:	00db      	lsls	r3, r3, #3
 8004086:	1a9b      	subs	r3, r3, r2
 8004088:	009b      	lsls	r3, r3, #2
 800408a:	440b      	add	r3, r1
 800408c:	333d      	adds	r3, #61	; 0x3d
 800408e:	2201      	movs	r2, #1
 8004090:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004092:	7bfa      	ldrb	r2, [r7, #15]
 8004094:	6879      	ldr	r1, [r7, #4]
 8004096:	4613      	mov	r3, r2
 8004098:	00db      	lsls	r3, r3, #3
 800409a:	1a9b      	subs	r3, r3, r2
 800409c:	009b      	lsls	r3, r3, #2
 800409e:	440b      	add	r3, r1
 80040a0:	333c      	adds	r3, #60	; 0x3c
 80040a2:	7bfa      	ldrb	r2, [r7, #15]
 80040a4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80040a6:	7bfa      	ldrb	r2, [r7, #15]
 80040a8:	7bfb      	ldrb	r3, [r7, #15]
 80040aa:	b298      	uxth	r0, r3
 80040ac:	6879      	ldr	r1, [r7, #4]
 80040ae:	4613      	mov	r3, r2
 80040b0:	00db      	lsls	r3, r3, #3
 80040b2:	1a9b      	subs	r3, r3, r2
 80040b4:	009b      	lsls	r3, r3, #2
 80040b6:	440b      	add	r3, r1
 80040b8:	3342      	adds	r3, #66	; 0x42
 80040ba:	4602      	mov	r2, r0
 80040bc:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80040be:	7bfa      	ldrb	r2, [r7, #15]
 80040c0:	6879      	ldr	r1, [r7, #4]
 80040c2:	4613      	mov	r3, r2
 80040c4:	00db      	lsls	r3, r3, #3
 80040c6:	1a9b      	subs	r3, r3, r2
 80040c8:	009b      	lsls	r3, r3, #2
 80040ca:	440b      	add	r3, r1
 80040cc:	333f      	adds	r3, #63	; 0x3f
 80040ce:	2200      	movs	r2, #0
 80040d0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80040d2:	7bfa      	ldrb	r2, [r7, #15]
 80040d4:	6879      	ldr	r1, [r7, #4]
 80040d6:	4613      	mov	r3, r2
 80040d8:	00db      	lsls	r3, r3, #3
 80040da:	1a9b      	subs	r3, r3, r2
 80040dc:	009b      	lsls	r3, r3, #2
 80040de:	440b      	add	r3, r1
 80040e0:	3344      	adds	r3, #68	; 0x44
 80040e2:	2200      	movs	r2, #0
 80040e4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80040e6:	7bfa      	ldrb	r2, [r7, #15]
 80040e8:	6879      	ldr	r1, [r7, #4]
 80040ea:	4613      	mov	r3, r2
 80040ec:	00db      	lsls	r3, r3, #3
 80040ee:	1a9b      	subs	r3, r3, r2
 80040f0:	009b      	lsls	r3, r3, #2
 80040f2:	440b      	add	r3, r1
 80040f4:	3348      	adds	r3, #72	; 0x48
 80040f6:	2200      	movs	r2, #0
 80040f8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80040fa:	7bfa      	ldrb	r2, [r7, #15]
 80040fc:	6879      	ldr	r1, [r7, #4]
 80040fe:	4613      	mov	r3, r2
 8004100:	00db      	lsls	r3, r3, #3
 8004102:	1a9b      	subs	r3, r3, r2
 8004104:	009b      	lsls	r3, r3, #2
 8004106:	440b      	add	r3, r1
 8004108:	3350      	adds	r3, #80	; 0x50
 800410a:	2200      	movs	r2, #0
 800410c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800410e:	7bfb      	ldrb	r3, [r7, #15]
 8004110:	3301      	adds	r3, #1
 8004112:	73fb      	strb	r3, [r7, #15]
 8004114:	7bfa      	ldrb	r2, [r7, #15]
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	685b      	ldr	r3, [r3, #4]
 800411a:	429a      	cmp	r2, r3
 800411c:	d3af      	bcc.n	800407e <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800411e:	2300      	movs	r3, #0
 8004120:	73fb      	strb	r3, [r7, #15]
 8004122:	e044      	b.n	80041ae <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004124:	7bfa      	ldrb	r2, [r7, #15]
 8004126:	6879      	ldr	r1, [r7, #4]
 8004128:	4613      	mov	r3, r2
 800412a:	00db      	lsls	r3, r3, #3
 800412c:	1a9b      	subs	r3, r3, r2
 800412e:	009b      	lsls	r3, r3, #2
 8004130:	440b      	add	r3, r1
 8004132:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8004136:	2200      	movs	r2, #0
 8004138:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800413a:	7bfa      	ldrb	r2, [r7, #15]
 800413c:	6879      	ldr	r1, [r7, #4]
 800413e:	4613      	mov	r3, r2
 8004140:	00db      	lsls	r3, r3, #3
 8004142:	1a9b      	subs	r3, r3, r2
 8004144:	009b      	lsls	r3, r3, #2
 8004146:	440b      	add	r3, r1
 8004148:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 800414c:	7bfa      	ldrb	r2, [r7, #15]
 800414e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004150:	7bfa      	ldrb	r2, [r7, #15]
 8004152:	6879      	ldr	r1, [r7, #4]
 8004154:	4613      	mov	r3, r2
 8004156:	00db      	lsls	r3, r3, #3
 8004158:	1a9b      	subs	r3, r3, r2
 800415a:	009b      	lsls	r3, r3, #2
 800415c:	440b      	add	r3, r1
 800415e:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8004162:	2200      	movs	r2, #0
 8004164:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004166:	7bfa      	ldrb	r2, [r7, #15]
 8004168:	6879      	ldr	r1, [r7, #4]
 800416a:	4613      	mov	r3, r2
 800416c:	00db      	lsls	r3, r3, #3
 800416e:	1a9b      	subs	r3, r3, r2
 8004170:	009b      	lsls	r3, r3, #2
 8004172:	440b      	add	r3, r1
 8004174:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8004178:	2200      	movs	r2, #0
 800417a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800417c:	7bfa      	ldrb	r2, [r7, #15]
 800417e:	6879      	ldr	r1, [r7, #4]
 8004180:	4613      	mov	r3, r2
 8004182:	00db      	lsls	r3, r3, #3
 8004184:	1a9b      	subs	r3, r3, r2
 8004186:	009b      	lsls	r3, r3, #2
 8004188:	440b      	add	r3, r1
 800418a:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800418e:	2200      	movs	r2, #0
 8004190:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004192:	7bfa      	ldrb	r2, [r7, #15]
 8004194:	6879      	ldr	r1, [r7, #4]
 8004196:	4613      	mov	r3, r2
 8004198:	00db      	lsls	r3, r3, #3
 800419a:	1a9b      	subs	r3, r3, r2
 800419c:	009b      	lsls	r3, r3, #2
 800419e:	440b      	add	r3, r1
 80041a0:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80041a4:	2200      	movs	r2, #0
 80041a6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80041a8:	7bfb      	ldrb	r3, [r7, #15]
 80041aa:	3301      	adds	r3, #1
 80041ac:	73fb      	strb	r3, [r7, #15]
 80041ae:	7bfa      	ldrb	r2, [r7, #15]
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	685b      	ldr	r3, [r3, #4]
 80041b4:	429a      	cmp	r2, r3
 80041b6:	d3b5      	bcc.n	8004124 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	603b      	str	r3, [r7, #0]
 80041be:	687e      	ldr	r6, [r7, #4]
 80041c0:	466d      	mov	r5, sp
 80041c2:	f106 0410 	add.w	r4, r6, #16
 80041c6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80041c8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80041ca:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80041cc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80041ce:	e894 0003 	ldmia.w	r4, {r0, r1}
 80041d2:	e885 0003 	stmia.w	r5, {r0, r1}
 80041d6:	1d33      	adds	r3, r6, #4
 80041d8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80041da:	6838      	ldr	r0, [r7, #0]
 80041dc:	f006 f8ac 	bl	800a338 <USB_DevInit>
 80041e0:	4603      	mov	r3, r0
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d005      	beq.n	80041f2 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	2202      	movs	r2, #2
 80041ea:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80041ee:	2301      	movs	r3, #1
 80041f0:	e00d      	b.n	800420e <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	2200      	movs	r2, #0
 80041f6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	2201      	movs	r2, #1
 80041fe:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
  #endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	4618      	mov	r0, r3
 8004208:	f007 f8a1 	bl	800b34e <USB_DevDisconnect>

  return HAL_OK;
 800420c:	2300      	movs	r3, #0
}
 800420e:	4618      	mov	r0, r3
 8004210:	3714      	adds	r7, #20
 8004212:	46bd      	mov	sp, r7
 8004214:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004216 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8004216:	b580      	push	{r7, lr}
 8004218:	b084      	sub	sp, #16
 800421a:	af00      	add	r7, sp, #0
 800421c:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */

  __HAL_LOCK(hpcd);
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800422a:	2b01      	cmp	r3, #1
 800422c:	d101      	bne.n	8004232 <HAL_PCD_Start+0x1c>
 800422e:	2302      	movs	r3, #2
 8004230:	e020      	b.n	8004274 <HAL_PCD_Start+0x5e>
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	2201      	movs	r2, #1
 8004236:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800423e:	2b01      	cmp	r3, #1
 8004240:	d109      	bne.n	8004256 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8004246:	2b01      	cmp	r3, #1
 8004248:	d005      	beq.n	8004256 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800424e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */
  (void)USB_DevConnect(hpcd->Instance);
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	4618      	mov	r0, r3
 800425c:	f007 f85f 	bl	800b31e <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	4618      	mov	r0, r3
 8004266:	f006 f81b 	bl	800a2a0 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	2200      	movs	r2, #0
 800426e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8004272:	2300      	movs	r3, #0
}
 8004274:	4618      	mov	r0, r3
 8004276:	3710      	adds	r7, #16
 8004278:	46bd      	mov	sp, r7
 800427a:	bd80      	pop	{r7, pc}

0800427c <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800427c:	b590      	push	{r4, r7, lr}
 800427e:	b08d      	sub	sp, #52	; 0x34
 8004280:	af00      	add	r7, sp, #0
 8004282:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800428a:	6a3b      	ldr	r3, [r7, #32]
 800428c:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	4618      	mov	r0, r3
 8004294:	f007 f906 	bl	800b4a4 <USB_GetMode>
 8004298:	4603      	mov	r3, r0
 800429a:	2b00      	cmp	r3, #0
 800429c:	f040 838e 	bne.w	80049bc <HAL_PCD_IRQHandler+0x740>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	4618      	mov	r0, r3
 80042a6:	f007 f86a 	bl	800b37e <USB_ReadInterrupts>
 80042aa:	4603      	mov	r3, r0
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	f000 8384 	beq.w	80049ba <HAL_PCD_IRQHandler+0x73e>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	4618      	mov	r0, r3
 80042b8:	f007 f861 	bl	800b37e <USB_ReadInterrupts>
 80042bc:	4603      	mov	r3, r0
 80042be:	f003 0302 	and.w	r3, r3, #2
 80042c2:	2b02      	cmp	r3, #2
 80042c4:	d107      	bne.n	80042d6 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	695a      	ldr	r2, [r3, #20]
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	f002 0202 	and.w	r2, r2, #2
 80042d4:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	4618      	mov	r0, r3
 80042dc:	f007 f84f 	bl	800b37e <USB_ReadInterrupts>
 80042e0:	4603      	mov	r3, r0
 80042e2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80042e6:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80042ea:	d17b      	bne.n	80043e4 <HAL_PCD_IRQHandler+0x168>
    {
      epnum = 0U;
 80042ec:	2300      	movs	r3, #0
 80042ee:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	4618      	mov	r0, r3
 80042f6:	f007 f855 	bl	800b3a4 <USB_ReadDevAllOutEpInterrupt>
 80042fa:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80042fc:	e06f      	b.n	80043de <HAL_PCD_IRQHandler+0x162>
      {
        if ((ep_intr & 0x1U) != 0U)
 80042fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004300:	f003 0301 	and.w	r3, r3, #1
 8004304:	2b00      	cmp	r3, #0
 8004306:	d064      	beq.n	80043d2 <HAL_PCD_IRQHandler+0x156>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800430e:	b2d2      	uxtb	r2, r2
 8004310:	4611      	mov	r1, r2
 8004312:	4618      	mov	r0, r3
 8004314:	f007 f87a 	bl	800b40c <USB_ReadDevOutEPInterrupt>
 8004318:	61b8      	str	r0, [r7, #24]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800431a:	69bb      	ldr	r3, [r7, #24]
 800431c:	f003 0301 	and.w	r3, r3, #1
 8004320:	2b00      	cmp	r3, #0
 8004322:	d00c      	beq.n	800433e <HAL_PCD_IRQHandler+0xc2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8004324:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004326:	015a      	lsls	r2, r3, #5
 8004328:	69fb      	ldr	r3, [r7, #28]
 800432a:	4413      	add	r3, r2
 800432c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004330:	461a      	mov	r2, r3
 8004332:	2301      	movs	r3, #1
 8004334:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8004336:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004338:	6878      	ldr	r0, [r7, #4]
 800433a:	f000 fe0d 	bl	8004f58 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800433e:	69bb      	ldr	r3, [r7, #24]
 8004340:	f003 0308 	and.w	r3, r3, #8
 8004344:	2b00      	cmp	r3, #0
 8004346:	d00c      	beq.n	8004362 <HAL_PCD_IRQHandler+0xe6>
          {
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8004348:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800434a:	6878      	ldr	r0, [r7, #4]
 800434c:	f000 ff0c 	bl	8005168 <PCD_EP_OutSetupPacket_int>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8004350:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004352:	015a      	lsls	r2, r3, #5
 8004354:	69fb      	ldr	r3, [r7, #28]
 8004356:	4413      	add	r3, r2
 8004358:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800435c:	461a      	mov	r2, r3
 800435e:	2308      	movs	r3, #8
 8004360:	6093      	str	r3, [r2, #8]
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8004362:	69bb      	ldr	r3, [r7, #24]
 8004364:	f003 0310 	and.w	r3, r3, #16
 8004368:	2b00      	cmp	r3, #0
 800436a:	d008      	beq.n	800437e <HAL_PCD_IRQHandler+0x102>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800436c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800436e:	015a      	lsls	r2, r3, #5
 8004370:	69fb      	ldr	r3, [r7, #28]
 8004372:	4413      	add	r3, r2
 8004374:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004378:	461a      	mov	r2, r3
 800437a:	2310      	movs	r3, #16
 800437c:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800437e:	69bb      	ldr	r3, [r7, #24]
 8004380:	f003 0320 	and.w	r3, r3, #32
 8004384:	2b00      	cmp	r3, #0
 8004386:	d015      	beq.n	80043b4 <HAL_PCD_IRQHandler+0x138>
          {
            if (hpcd->Init.dma_enable == 1U)
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	691b      	ldr	r3, [r3, #16]
 800438c:	2b01      	cmp	r3, #1
 800438e:	d108      	bne.n	80043a2 <HAL_PCD_IRQHandler+0x126>
            {
              (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	6818      	ldr	r0, [r3, #0]
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800439a:	461a      	mov	r2, r3
 800439c:	2101      	movs	r1, #1
 800439e:	f007 f8c5 	bl	800b52c <USB_EP0_OutStart>
            }
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80043a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043a4:	015a      	lsls	r2, r3, #5
 80043a6:	69fb      	ldr	r3, [r7, #28]
 80043a8:	4413      	add	r3, r2
 80043aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043ae:	461a      	mov	r2, r3
 80043b0:	2320      	movs	r3, #32
 80043b2:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80043b4:	69bb      	ldr	r3, [r7, #24]
 80043b6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d009      	beq.n	80043d2 <HAL_PCD_IRQHandler+0x156>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80043be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043c0:	015a      	lsls	r2, r3, #5
 80043c2:	69fb      	ldr	r3, [r7, #28]
 80043c4:	4413      	add	r3, r2
 80043c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043ca:	461a      	mov	r2, r3
 80043cc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80043d0:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80043d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043d4:	3301      	adds	r3, #1
 80043d6:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80043d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043da:	085b      	lsrs	r3, r3, #1
 80043dc:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80043de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d18c      	bne.n	80042fe <HAL_PCD_IRQHandler+0x82>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	4618      	mov	r0, r3
 80043ea:	f006 ffc8 	bl	800b37e <USB_ReadInterrupts>
 80043ee:	4603      	mov	r3, r0
 80043f0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80043f4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80043f8:	f040 80c4 	bne.w	8004584 <HAL_PCD_IRQHandler+0x308>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	4618      	mov	r0, r3
 8004402:	f006 ffe9 	bl	800b3d8 <USB_ReadDevAllInEpInterrupt>
 8004406:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8004408:	2300      	movs	r3, #0
 800440a:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 800440c:	e0b6      	b.n	800457c <HAL_PCD_IRQHandler+0x300>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800440e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004410:	f003 0301 	and.w	r3, r3, #1
 8004414:	2b00      	cmp	r3, #0
 8004416:	f000 80ab 	beq.w	8004570 <HAL_PCD_IRQHandler+0x2f4>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004420:	b2d2      	uxtb	r2, r2
 8004422:	4611      	mov	r1, r2
 8004424:	4618      	mov	r0, r3
 8004426:	f007 f80f 	bl	800b448 <USB_ReadDevInEPInterrupt>
 800442a:	61b8      	str	r0, [r7, #24]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800442c:	69bb      	ldr	r3, [r7, #24]
 800442e:	f003 0301 	and.w	r3, r3, #1
 8004432:	2b00      	cmp	r3, #0
 8004434:	d05b      	beq.n	80044ee <HAL_PCD_IRQHandler+0x272>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004436:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004438:	f003 030f 	and.w	r3, r3, #15
 800443c:	2201      	movs	r2, #1
 800443e:	fa02 f303 	lsl.w	r3, r2, r3
 8004442:	617b      	str	r3, [r7, #20]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004444:	69fb      	ldr	r3, [r7, #28]
 8004446:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800444a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800444c:	697b      	ldr	r3, [r7, #20]
 800444e:	43db      	mvns	r3, r3
 8004450:	69f9      	ldr	r1, [r7, #28]
 8004452:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004456:	4013      	ands	r3, r2
 8004458:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800445a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800445c:	015a      	lsls	r2, r3, #5
 800445e:	69fb      	ldr	r3, [r7, #28]
 8004460:	4413      	add	r3, r2
 8004462:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004466:	461a      	mov	r2, r3
 8004468:	2301      	movs	r3, #1
 800446a:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	691b      	ldr	r3, [r3, #16]
 8004470:	2b01      	cmp	r3, #1
 8004472:	d11b      	bne.n	80044ac <HAL_PCD_IRQHandler+0x230>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8004474:	6879      	ldr	r1, [r7, #4]
 8004476:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004478:	4613      	mov	r3, r2
 800447a:	00db      	lsls	r3, r3, #3
 800447c:	1a9b      	subs	r3, r3, r2
 800447e:	009b      	lsls	r3, r3, #2
 8004480:	440b      	add	r3, r1
 8004482:	3348      	adds	r3, #72	; 0x48
 8004484:	6819      	ldr	r1, [r3, #0]
 8004486:	6878      	ldr	r0, [r7, #4]
 8004488:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800448a:	4613      	mov	r3, r2
 800448c:	00db      	lsls	r3, r3, #3
 800448e:	1a9b      	subs	r3, r3, r2
 8004490:	009b      	lsls	r3, r3, #2
 8004492:	4403      	add	r3, r0
 8004494:	3344      	adds	r3, #68	; 0x44
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	4419      	add	r1, r3
 800449a:	6878      	ldr	r0, [r7, #4]
 800449c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800449e:	4613      	mov	r3, r2
 80044a0:	00db      	lsls	r3, r3, #3
 80044a2:	1a9b      	subs	r3, r3, r2
 80044a4:	009b      	lsls	r3, r3, #2
 80044a6:	4403      	add	r3, r0
 80044a8:	3348      	adds	r3, #72	; 0x48
 80044aa:	6019      	str	r1, [r3, #0]
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80044ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044ae:	b2db      	uxtb	r3, r3
 80044b0:	4619      	mov	r1, r3
 80044b2:	6878      	ldr	r0, [r7, #4]
 80044b4:	f009 f9c3 	bl	800d83e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

            if (hpcd->Init.dma_enable == 1U)
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	691b      	ldr	r3, [r3, #16]
 80044bc:	2b01      	cmp	r3, #1
 80044be:	d116      	bne.n	80044ee <HAL_PCD_IRQHandler+0x272>
            {
              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80044c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d113      	bne.n	80044ee <HAL_PCD_IRQHandler+0x272>
 80044c6:	6879      	ldr	r1, [r7, #4]
 80044c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80044ca:	4613      	mov	r3, r2
 80044cc:	00db      	lsls	r3, r3, #3
 80044ce:	1a9b      	subs	r3, r3, r2
 80044d0:	009b      	lsls	r3, r3, #2
 80044d2:	440b      	add	r3, r1
 80044d4:	3350      	adds	r3, #80	; 0x50
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d108      	bne.n	80044ee <HAL_PCD_IRQHandler+0x272>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	6818      	ldr	r0, [r3, #0]
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80044e6:	461a      	mov	r2, r3
 80044e8:	2101      	movs	r1, #1
 80044ea:	f007 f81f 	bl	800b52c <USB_EP0_OutStart>
              }
            }
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80044ee:	69bb      	ldr	r3, [r7, #24]
 80044f0:	f003 0308 	and.w	r3, r3, #8
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d008      	beq.n	800450a <HAL_PCD_IRQHandler+0x28e>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80044f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044fa:	015a      	lsls	r2, r3, #5
 80044fc:	69fb      	ldr	r3, [r7, #28]
 80044fe:	4413      	add	r3, r2
 8004500:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004504:	461a      	mov	r2, r3
 8004506:	2308      	movs	r3, #8
 8004508:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800450a:	69bb      	ldr	r3, [r7, #24]
 800450c:	f003 0310 	and.w	r3, r3, #16
 8004510:	2b00      	cmp	r3, #0
 8004512:	d008      	beq.n	8004526 <HAL_PCD_IRQHandler+0x2aa>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8004514:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004516:	015a      	lsls	r2, r3, #5
 8004518:	69fb      	ldr	r3, [r7, #28]
 800451a:	4413      	add	r3, r2
 800451c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004520:	461a      	mov	r2, r3
 8004522:	2310      	movs	r3, #16
 8004524:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8004526:	69bb      	ldr	r3, [r7, #24]
 8004528:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800452c:	2b00      	cmp	r3, #0
 800452e:	d008      	beq.n	8004542 <HAL_PCD_IRQHandler+0x2c6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8004530:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004532:	015a      	lsls	r2, r3, #5
 8004534:	69fb      	ldr	r3, [r7, #28]
 8004536:	4413      	add	r3, r2
 8004538:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800453c:	461a      	mov	r2, r3
 800453e:	2340      	movs	r3, #64	; 0x40
 8004540:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8004542:	69bb      	ldr	r3, [r7, #24]
 8004544:	f003 0302 	and.w	r3, r3, #2
 8004548:	2b00      	cmp	r3, #0
 800454a:	d008      	beq.n	800455e <HAL_PCD_IRQHandler+0x2e2>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800454c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800454e:	015a      	lsls	r2, r3, #5
 8004550:	69fb      	ldr	r3, [r7, #28]
 8004552:	4413      	add	r3, r2
 8004554:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004558:	461a      	mov	r2, r3
 800455a:	2302      	movs	r3, #2
 800455c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800455e:	69bb      	ldr	r3, [r7, #24]
 8004560:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004564:	2b00      	cmp	r3, #0
 8004566:	d003      	beq.n	8004570 <HAL_PCD_IRQHandler+0x2f4>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8004568:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800456a:	6878      	ldr	r0, [r7, #4]
 800456c:	f000 fc67 	bl	8004e3e <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8004570:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004572:	3301      	adds	r3, #1
 8004574:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8004576:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004578:	085b      	lsrs	r3, r3, #1
 800457a:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800457c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800457e:	2b00      	cmp	r3, #0
 8004580:	f47f af45 	bne.w	800440e <HAL_PCD_IRQHandler+0x192>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	4618      	mov	r0, r3
 800458a:	f006 fef8 	bl	800b37e <USB_ReadInterrupts>
 800458e:	4603      	mov	r3, r0
 8004590:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004594:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004598:	d122      	bne.n	80045e0 <HAL_PCD_IRQHandler+0x364>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800459a:	69fb      	ldr	r3, [r7, #28]
 800459c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80045a0:	685b      	ldr	r3, [r3, #4]
 80045a2:	69fa      	ldr	r2, [r7, #28]
 80045a4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80045a8:	f023 0301 	bic.w	r3, r3, #1
 80045ac:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 80045b4:	2b01      	cmp	r3, #1
 80045b6:	d108      	bne.n	80045ca <HAL_PCD_IRQHandler+0x34e>
      {
        hpcd->LPM_State = LPM_L0;
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	2200      	movs	r2, #0
 80045bc:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80045c0:	2100      	movs	r1, #0
 80045c2:	6878      	ldr	r0, [r7, #4]
 80045c4:	f000 fe88 	bl	80052d8 <HAL_PCDEx_LPM_Callback>
 80045c8:	e002      	b.n	80045d0 <HAL_PCD_IRQHandler+0x354>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80045ca:	6878      	ldr	r0, [r7, #4]
 80045cc:	f009 f9ae 	bl	800d92c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	695a      	ldr	r2, [r3, #20]
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80045de:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	4618      	mov	r0, r3
 80045e6:	f006 feca 	bl	800b37e <USB_ReadInterrupts>
 80045ea:	4603      	mov	r3, r0
 80045ec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80045f0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80045f4:	d112      	bne.n	800461c <HAL_PCD_IRQHandler+0x3a0>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80045f6:	69fb      	ldr	r3, [r7, #28]
 80045f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80045fc:	689b      	ldr	r3, [r3, #8]
 80045fe:	f003 0301 	and.w	r3, r3, #1
 8004602:	2b01      	cmp	r3, #1
 8004604:	d102      	bne.n	800460c <HAL_PCD_IRQHandler+0x390>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8004606:	6878      	ldr	r0, [r7, #4]
 8004608:	f009 f96a 	bl	800d8e0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	695a      	ldr	r2, [r3, #20]
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800461a:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    #endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	4618      	mov	r0, r3
 8004622:	f006 feac 	bl	800b37e <USB_ReadInterrupts>
 8004626:	4603      	mov	r3, r0
 8004628:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800462c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004630:	f040 80a7 	bne.w	8004782 <HAL_PCD_IRQHandler+0x506>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8004634:	69fb      	ldr	r3, [r7, #28]
 8004636:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800463a:	685b      	ldr	r3, [r3, #4]
 800463c:	69fa      	ldr	r2, [r7, #28]
 800463e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004642:	f023 0301 	bic.w	r3, r3, #1
 8004646:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	2110      	movs	r1, #16
 800464e:	4618      	mov	r0, r3
 8004650:	f005 ffe4 	bl	800a61c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004654:	2300      	movs	r3, #0
 8004656:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004658:	e036      	b.n	80046c8 <HAL_PCD_IRQHandler+0x44c>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800465a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800465c:	015a      	lsls	r2, r3, #5
 800465e:	69fb      	ldr	r3, [r7, #28]
 8004660:	4413      	add	r3, r2
 8004662:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004666:	461a      	mov	r2, r3
 8004668:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800466c:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800466e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004670:	015a      	lsls	r2, r3, #5
 8004672:	69fb      	ldr	r3, [r7, #28]
 8004674:	4413      	add	r3, r2
 8004676:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800467e:	0151      	lsls	r1, r2, #5
 8004680:	69fa      	ldr	r2, [r7, #28]
 8004682:	440a      	add	r2, r1
 8004684:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004688:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800468c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800468e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004690:	015a      	lsls	r2, r3, #5
 8004692:	69fb      	ldr	r3, [r7, #28]
 8004694:	4413      	add	r3, r2
 8004696:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800469a:	461a      	mov	r2, r3
 800469c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80046a0:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80046a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046a4:	015a      	lsls	r2, r3, #5
 80046a6:	69fb      	ldr	r3, [r7, #28]
 80046a8:	4413      	add	r3, r2
 80046aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80046b2:	0151      	lsls	r1, r2, #5
 80046b4:	69fa      	ldr	r2, [r7, #28]
 80046b6:	440a      	add	r2, r1
 80046b8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80046bc:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80046c0:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80046c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046c4:	3301      	adds	r3, #1
 80046c6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	685b      	ldr	r3, [r3, #4]
 80046cc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80046ce:	429a      	cmp	r2, r3
 80046d0:	d3c3      	bcc.n	800465a <HAL_PCD_IRQHandler+0x3de>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80046d2:	69fb      	ldr	r3, [r7, #28]
 80046d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80046d8:	69db      	ldr	r3, [r3, #28]
 80046da:	69fa      	ldr	r2, [r7, #28]
 80046dc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80046e0:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80046e4:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d016      	beq.n	800471c <HAL_PCD_IRQHandler+0x4a0>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80046ee:	69fb      	ldr	r3, [r7, #28]
 80046f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80046f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80046f8:	69fa      	ldr	r2, [r7, #28]
 80046fa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80046fe:	f043 030b 	orr.w	r3, r3, #11
 8004702:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8004706:	69fb      	ldr	r3, [r7, #28]
 8004708:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800470c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800470e:	69fa      	ldr	r2, [r7, #28]
 8004710:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004714:	f043 030b 	orr.w	r3, r3, #11
 8004718:	6453      	str	r3, [r2, #68]	; 0x44
 800471a:	e015      	b.n	8004748 <HAL_PCD_IRQHandler+0x4cc>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800471c:	69fb      	ldr	r3, [r7, #28]
 800471e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004722:	695b      	ldr	r3, [r3, #20]
 8004724:	69fa      	ldr	r2, [r7, #28]
 8004726:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800472a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800472e:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8004732:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8004734:	69fb      	ldr	r3, [r7, #28]
 8004736:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800473a:	691b      	ldr	r3, [r3, #16]
 800473c:	69fa      	ldr	r2, [r7, #28]
 800473e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004742:	f043 030b 	orr.w	r3, r3, #11
 8004746:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8004748:	69fb      	ldr	r3, [r7, #28]
 800474a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	69fa      	ldr	r2, [r7, #28]
 8004752:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004756:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800475a:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	6818      	ldr	r0, [r3, #0]
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	691b      	ldr	r3, [r3, #16]
 8004764:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800476c:	461a      	mov	r2, r3
 800476e:	f006 fedd 	bl	800b52c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	695a      	ldr	r2, [r3, #20]
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8004780:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	4618      	mov	r0, r3
 8004788:	f006 fdf9 	bl	800b37e <USB_ReadInterrupts>
 800478c:	4603      	mov	r3, r0
 800478e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004792:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004796:	d124      	bne.n	80047e2 <HAL_PCD_IRQHandler+0x566>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	4618      	mov	r0, r3
 800479e:	f006 fe8f 	bl	800b4c0 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	4618      	mov	r0, r3
 80047a8:	f005 ff99 	bl	800a6de <USB_GetDevSpeed>
 80047ac:	4603      	mov	r3, r0
 80047ae:	461a      	mov	r2, r3
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681c      	ldr	r4, [r3, #0]
 80047b8:	f001 f9a2 	bl	8005b00 <HAL_RCC_GetHCLKFreq>
 80047bc:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80047c2:	b2db      	uxtb	r3, r3
 80047c4:	461a      	mov	r2, r3
 80047c6:	4620      	mov	r0, r4
 80047c8:	f005 fcc8 	bl	800a15c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80047cc:	6878      	ldr	r0, [r7, #4]
 80047ce:	f009 f85e 	bl	800d88e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	695a      	ldr	r2, [r3, #20]
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80047e0:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	4618      	mov	r0, r3
 80047e8:	f006 fdc9 	bl	800b37e <USB_ReadInterrupts>
 80047ec:	4603      	mov	r3, r0
 80047ee:	f003 0310 	and.w	r3, r3, #16
 80047f2:	2b10      	cmp	r3, #16
 80047f4:	d161      	bne.n	80048ba <HAL_PCD_IRQHandler+0x63e>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	699a      	ldr	r2, [r3, #24]
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	f022 0210 	bic.w	r2, r2, #16
 8004804:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8004806:	6a3b      	ldr	r3, [r7, #32]
 8004808:	6a1b      	ldr	r3, [r3, #32]
 800480a:	613b      	str	r3, [r7, #16]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 800480c:	693b      	ldr	r3, [r7, #16]
 800480e:	f003 020f 	and.w	r2, r3, #15
 8004812:	4613      	mov	r3, r2
 8004814:	00db      	lsls	r3, r3, #3
 8004816:	1a9b      	subs	r3, r3, r2
 8004818:	009b      	lsls	r3, r3, #2
 800481a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800481e:	687a      	ldr	r2, [r7, #4]
 8004820:	4413      	add	r3, r2
 8004822:	3304      	adds	r3, #4
 8004824:	60fb      	str	r3, [r7, #12]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8004826:	693b      	ldr	r3, [r7, #16]
 8004828:	0c5b      	lsrs	r3, r3, #17
 800482a:	f003 030f 	and.w	r3, r3, #15
 800482e:	2b02      	cmp	r3, #2
 8004830:	d124      	bne.n	800487c <HAL_PCD_IRQHandler+0x600>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8004832:	693a      	ldr	r2, [r7, #16]
 8004834:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8004838:	4013      	ands	r3, r2
 800483a:	2b00      	cmp	r3, #0
 800483c:	d035      	beq.n	80048aa <HAL_PCD_IRQHandler+0x62e>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8004842:	693b      	ldr	r3, [r7, #16]
 8004844:	091b      	lsrs	r3, r3, #4
 8004846:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8004848:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800484c:	b29b      	uxth	r3, r3
 800484e:	461a      	mov	r2, r3
 8004850:	6a38      	ldr	r0, [r7, #32]
 8004852:	f006 fc41 	bl	800b0d8 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	68da      	ldr	r2, [r3, #12]
 800485a:	693b      	ldr	r3, [r7, #16]
 800485c:	091b      	lsrs	r3, r3, #4
 800485e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004862:	441a      	add	r2, r3
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	699a      	ldr	r2, [r3, #24]
 800486c:	693b      	ldr	r3, [r7, #16]
 800486e:	091b      	lsrs	r3, r3, #4
 8004870:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004874:	441a      	add	r2, r3
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	619a      	str	r2, [r3, #24]
 800487a:	e016      	b.n	80048aa <HAL_PCD_IRQHandler+0x62e>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 800487c:	693b      	ldr	r3, [r7, #16]
 800487e:	0c5b      	lsrs	r3, r3, #17
 8004880:	f003 030f 	and.w	r3, r3, #15
 8004884:	2b06      	cmp	r3, #6
 8004886:	d110      	bne.n	80048aa <HAL_PCD_IRQHandler+0x62e>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800488e:	2208      	movs	r2, #8
 8004890:	4619      	mov	r1, r3
 8004892:	6a38      	ldr	r0, [r7, #32]
 8004894:	f006 fc20 	bl	800b0d8 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	699a      	ldr	r2, [r3, #24]
 800489c:	693b      	ldr	r3, [r7, #16]
 800489e:	091b      	lsrs	r3, r3, #4
 80048a0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80048a4:	441a      	add	r2, r3
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	699a      	ldr	r2, [r3, #24]
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	f042 0210 	orr.w	r2, r2, #16
 80048b8:	619a      	str	r2, [r3, #24]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	4618      	mov	r0, r3
 80048c0:	f006 fd5d 	bl	800b37e <USB_ReadInterrupts>
 80048c4:	4603      	mov	r3, r0
 80048c6:	f003 0308 	and.w	r3, r3, #8
 80048ca:	2b08      	cmp	r3, #8
 80048cc:	d10a      	bne.n	80048e4 <HAL_PCD_IRQHandler+0x668>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80048ce:	6878      	ldr	r0, [r7, #4]
 80048d0:	f008 ffcf 	bl	800d872 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	695a      	ldr	r2, [r3, #20]
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	f002 0208 	and.w	r2, r2, #8
 80048e2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	4618      	mov	r0, r3
 80048ea:	f006 fd48 	bl	800b37e <USB_ReadInterrupts>
 80048ee:	4603      	mov	r3, r0
 80048f0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80048f4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80048f8:	d10f      	bne.n	800491a <HAL_PCD_IRQHandler+0x69e>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 80048fa:	2300      	movs	r3, #0
 80048fc:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80048fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004900:	b2db      	uxtb	r3, r3
 8004902:	4619      	mov	r1, r3
 8004904:	6878      	ldr	r0, [r7, #4]
 8004906:	f009 f831 	bl	800d96c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	695a      	ldr	r2, [r3, #20]
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8004918:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	4618      	mov	r0, r3
 8004920:	f006 fd2d 	bl	800b37e <USB_ReadInterrupts>
 8004924:	4603      	mov	r3, r0
 8004926:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800492a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800492e:	d10f      	bne.n	8004950 <HAL_PCD_IRQHandler+0x6d4>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8004930:	2300      	movs	r3, #0
 8004932:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8004934:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004936:	b2db      	uxtb	r3, r3
 8004938:	4619      	mov	r1, r3
 800493a:	6878      	ldr	r0, [r7, #4]
 800493c:	f009 f804 	bl	800d948 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	695a      	ldr	r2, [r3, #20]
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 800494e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	4618      	mov	r0, r3
 8004956:	f006 fd12 	bl	800b37e <USB_ReadInterrupts>
 800495a:	4603      	mov	r3, r0
 800495c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004960:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004964:	d10a      	bne.n	800497c <HAL_PCD_IRQHandler+0x700>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8004966:	6878      	ldr	r0, [r7, #4]
 8004968:	f009 f812 	bl	800d990 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	695a      	ldr	r2, [r3, #20]
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800497a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	4618      	mov	r0, r3
 8004982:	f006 fcfc 	bl	800b37e <USB_ReadInterrupts>
 8004986:	4603      	mov	r3, r0
 8004988:	f003 0304 	and.w	r3, r3, #4
 800498c:	2b04      	cmp	r3, #4
 800498e:	d115      	bne.n	80049bc <HAL_PCD_IRQHandler+0x740>
    {
      temp = hpcd->Instance->GOTGINT;
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	685b      	ldr	r3, [r3, #4]
 8004996:	613b      	str	r3, [r7, #16]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8004998:	693b      	ldr	r3, [r7, #16]
 800499a:	f003 0304 	and.w	r3, r3, #4
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d002      	beq.n	80049a8 <HAL_PCD_IRQHandler+0x72c>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80049a2:	6878      	ldr	r0, [r7, #4]
 80049a4:	f009 f802 	bl	800d9ac <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	6859      	ldr	r1, [r3, #4]
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	693a      	ldr	r2, [r7, #16]
 80049b4:	430a      	orrs	r2, r1
 80049b6:	605a      	str	r2, [r3, #4]
 80049b8:	e000      	b.n	80049bc <HAL_PCD_IRQHandler+0x740>
      return;
 80049ba:	bf00      	nop
    }
  }
}
 80049bc:	3734      	adds	r7, #52	; 0x34
 80049be:	46bd      	mov	sp, r7
 80049c0:	bd90      	pop	{r4, r7, pc}

080049c2 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80049c2:	b580      	push	{r7, lr}
 80049c4:	b082      	sub	sp, #8
 80049c6:	af00      	add	r7, sp, #0
 80049c8:	6078      	str	r0, [r7, #4]
 80049ca:	460b      	mov	r3, r1
 80049cc:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80049d4:	2b01      	cmp	r3, #1
 80049d6:	d101      	bne.n	80049dc <HAL_PCD_SetAddress+0x1a>
 80049d8:	2302      	movs	r3, #2
 80049da:	e013      	b.n	8004a04 <HAL_PCD_SetAddress+0x42>
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	2201      	movs	r2, #1
 80049e0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	78fa      	ldrb	r2, [r7, #3]
 80049e8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	78fa      	ldrb	r2, [r7, #3]
 80049f2:	4611      	mov	r1, r2
 80049f4:	4618      	mov	r0, r3
 80049f6:	f006 fc6c 	bl	800b2d2 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	2200      	movs	r2, #0
 80049fe:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8004a02:	2300      	movs	r3, #0
}
 8004a04:	4618      	mov	r0, r3
 8004a06:	3708      	adds	r7, #8
 8004a08:	46bd      	mov	sp, r7
 8004a0a:	bd80      	pop	{r7, pc}

08004a0c <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 8004a0c:	b580      	push	{r7, lr}
 8004a0e:	b084      	sub	sp, #16
 8004a10:	af00      	add	r7, sp, #0
 8004a12:	6078      	str	r0, [r7, #4]
 8004a14:	4608      	mov	r0, r1
 8004a16:	4611      	mov	r1, r2
 8004a18:	461a      	mov	r2, r3
 8004a1a:	4603      	mov	r3, r0
 8004a1c:	70fb      	strb	r3, [r7, #3]
 8004a1e:	460b      	mov	r3, r1
 8004a20:	803b      	strh	r3, [r7, #0]
 8004a22:	4613      	mov	r3, r2
 8004a24:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8004a26:	2300      	movs	r3, #0
 8004a28:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004a2a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	da0f      	bge.n	8004a52 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004a32:	78fb      	ldrb	r3, [r7, #3]
 8004a34:	f003 020f 	and.w	r2, r3, #15
 8004a38:	4613      	mov	r3, r2
 8004a3a:	00db      	lsls	r3, r3, #3
 8004a3c:	1a9b      	subs	r3, r3, r2
 8004a3e:	009b      	lsls	r3, r3, #2
 8004a40:	3338      	adds	r3, #56	; 0x38
 8004a42:	687a      	ldr	r2, [r7, #4]
 8004a44:	4413      	add	r3, r2
 8004a46:	3304      	adds	r3, #4
 8004a48:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	2201      	movs	r2, #1
 8004a4e:	705a      	strb	r2, [r3, #1]
 8004a50:	e00f      	b.n	8004a72 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004a52:	78fb      	ldrb	r3, [r7, #3]
 8004a54:	f003 020f 	and.w	r2, r3, #15
 8004a58:	4613      	mov	r3, r2
 8004a5a:	00db      	lsls	r3, r3, #3
 8004a5c:	1a9b      	subs	r3, r3, r2
 8004a5e:	009b      	lsls	r3, r3, #2
 8004a60:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8004a64:	687a      	ldr	r2, [r7, #4]
 8004a66:	4413      	add	r3, r2
 8004a68:	3304      	adds	r3, #4
 8004a6a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	2200      	movs	r2, #0
 8004a70:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8004a72:	78fb      	ldrb	r3, [r7, #3]
 8004a74:	f003 030f 	and.w	r3, r3, #15
 8004a78:	b2da      	uxtb	r2, r3
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8004a7e:	883a      	ldrh	r2, [r7, #0]
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	78ba      	ldrb	r2, [r7, #2]
 8004a88:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	785b      	ldrb	r3, [r3, #1]
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d004      	beq.n	8004a9c <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	781b      	ldrb	r3, [r3, #0]
 8004a96:	b29a      	uxth	r2, r3
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8004a9c:	78bb      	ldrb	r3, [r7, #2]
 8004a9e:	2b02      	cmp	r3, #2
 8004aa0:	d102      	bne.n	8004aa8 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	2200      	movs	r2, #0
 8004aa6:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8004aae:	2b01      	cmp	r3, #1
 8004ab0:	d101      	bne.n	8004ab6 <HAL_PCD_EP_Open+0xaa>
 8004ab2:	2302      	movs	r3, #2
 8004ab4:	e00e      	b.n	8004ad4 <HAL_PCD_EP_Open+0xc8>
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	2201      	movs	r2, #1
 8004aba:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	68f9      	ldr	r1, [r7, #12]
 8004ac4:	4618      	mov	r0, r3
 8004ac6:	f005 fe2f 	bl	800a728 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	2200      	movs	r2, #0
 8004ace:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8004ad2:	7afb      	ldrb	r3, [r7, #11]
}
 8004ad4:	4618      	mov	r0, r3
 8004ad6:	3710      	adds	r7, #16
 8004ad8:	46bd      	mov	sp, r7
 8004ada:	bd80      	pop	{r7, pc}

08004adc <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004adc:	b580      	push	{r7, lr}
 8004ade:	b084      	sub	sp, #16
 8004ae0:	af00      	add	r7, sp, #0
 8004ae2:	6078      	str	r0, [r7, #4]
 8004ae4:	460b      	mov	r3, r1
 8004ae6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004ae8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	da0f      	bge.n	8004b10 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004af0:	78fb      	ldrb	r3, [r7, #3]
 8004af2:	f003 020f 	and.w	r2, r3, #15
 8004af6:	4613      	mov	r3, r2
 8004af8:	00db      	lsls	r3, r3, #3
 8004afa:	1a9b      	subs	r3, r3, r2
 8004afc:	009b      	lsls	r3, r3, #2
 8004afe:	3338      	adds	r3, #56	; 0x38
 8004b00:	687a      	ldr	r2, [r7, #4]
 8004b02:	4413      	add	r3, r2
 8004b04:	3304      	adds	r3, #4
 8004b06:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	2201      	movs	r2, #1
 8004b0c:	705a      	strb	r2, [r3, #1]
 8004b0e:	e00f      	b.n	8004b30 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004b10:	78fb      	ldrb	r3, [r7, #3]
 8004b12:	f003 020f 	and.w	r2, r3, #15
 8004b16:	4613      	mov	r3, r2
 8004b18:	00db      	lsls	r3, r3, #3
 8004b1a:	1a9b      	subs	r3, r3, r2
 8004b1c:	009b      	lsls	r3, r3, #2
 8004b1e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8004b22:	687a      	ldr	r2, [r7, #4]
 8004b24:	4413      	add	r3, r2
 8004b26:	3304      	adds	r3, #4
 8004b28:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	2200      	movs	r2, #0
 8004b2e:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8004b30:	78fb      	ldrb	r3, [r7, #3]
 8004b32:	f003 030f 	and.w	r3, r3, #15
 8004b36:	b2da      	uxtb	r2, r3
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8004b42:	2b01      	cmp	r3, #1
 8004b44:	d101      	bne.n	8004b4a <HAL_PCD_EP_Close+0x6e>
 8004b46:	2302      	movs	r3, #2
 8004b48:	e00e      	b.n	8004b68 <HAL_PCD_EP_Close+0x8c>
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	2201      	movs	r2, #1
 8004b4e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	68f9      	ldr	r1, [r7, #12]
 8004b58:	4618      	mov	r0, r3
 8004b5a:	f005 fe6d 	bl	800a838 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	2200      	movs	r2, #0
 8004b62:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8004b66:	2300      	movs	r3, #0
}
 8004b68:	4618      	mov	r0, r3
 8004b6a:	3710      	adds	r7, #16
 8004b6c:	46bd      	mov	sp, r7
 8004b6e:	bd80      	pop	{r7, pc}

08004b70 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004b70:	b580      	push	{r7, lr}
 8004b72:	b086      	sub	sp, #24
 8004b74:	af00      	add	r7, sp, #0
 8004b76:	60f8      	str	r0, [r7, #12]
 8004b78:	607a      	str	r2, [r7, #4]
 8004b7a:	603b      	str	r3, [r7, #0]
 8004b7c:	460b      	mov	r3, r1
 8004b7e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004b80:	7afb      	ldrb	r3, [r7, #11]
 8004b82:	f003 020f 	and.w	r2, r3, #15
 8004b86:	4613      	mov	r3, r2
 8004b88:	00db      	lsls	r3, r3, #3
 8004b8a:	1a9b      	subs	r3, r3, r2
 8004b8c:	009b      	lsls	r3, r3, #2
 8004b8e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8004b92:	68fa      	ldr	r2, [r7, #12]
 8004b94:	4413      	add	r3, r2
 8004b96:	3304      	adds	r3, #4
 8004b98:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004b9a:	697b      	ldr	r3, [r7, #20]
 8004b9c:	687a      	ldr	r2, [r7, #4]
 8004b9e:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8004ba0:	697b      	ldr	r3, [r7, #20]
 8004ba2:	683a      	ldr	r2, [r7, #0]
 8004ba4:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8004ba6:	697b      	ldr	r3, [r7, #20]
 8004ba8:	2200      	movs	r2, #0
 8004baa:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8004bac:	697b      	ldr	r3, [r7, #20]
 8004bae:	2200      	movs	r2, #0
 8004bb0:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004bb2:	7afb      	ldrb	r3, [r7, #11]
 8004bb4:	f003 030f 	and.w	r3, r3, #15
 8004bb8:	b2da      	uxtb	r2, r3
 8004bba:	697b      	ldr	r3, [r7, #20]
 8004bbc:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	691b      	ldr	r3, [r3, #16]
 8004bc2:	2b01      	cmp	r3, #1
 8004bc4:	d102      	bne.n	8004bcc <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8004bc6:	687a      	ldr	r2, [r7, #4]
 8004bc8:	697b      	ldr	r3, [r7, #20]
 8004bca:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004bcc:	7afb      	ldrb	r3, [r7, #11]
 8004bce:	f003 030f 	and.w	r3, r3, #15
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d109      	bne.n	8004bea <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	6818      	ldr	r0, [r3, #0]
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	691b      	ldr	r3, [r3, #16]
 8004bde:	b2db      	uxtb	r3, r3
 8004be0:	461a      	mov	r2, r3
 8004be2:	6979      	ldr	r1, [r7, #20]
 8004be4:	f006 f8f0 	bl	800adc8 <USB_EP0StartXfer>
 8004be8:	e008      	b.n	8004bfc <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	6818      	ldr	r0, [r3, #0]
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	691b      	ldr	r3, [r3, #16]
 8004bf2:	b2db      	uxtb	r3, r3
 8004bf4:	461a      	mov	r2, r3
 8004bf6:	6979      	ldr	r1, [r7, #20]
 8004bf8:	f005 fea2 	bl	800a940 <USB_EPStartXfer>
  }

  return HAL_OK;
 8004bfc:	2300      	movs	r3, #0
}
 8004bfe:	4618      	mov	r0, r3
 8004c00:	3718      	adds	r7, #24
 8004c02:	46bd      	mov	sp, r7
 8004c04:	bd80      	pop	{r7, pc}

08004c06 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004c06:	b480      	push	{r7}
 8004c08:	b083      	sub	sp, #12
 8004c0a:	af00      	add	r7, sp, #0
 8004c0c:	6078      	str	r0, [r7, #4]
 8004c0e:	460b      	mov	r3, r1
 8004c10:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8004c12:	78fb      	ldrb	r3, [r7, #3]
 8004c14:	f003 020f 	and.w	r2, r3, #15
 8004c18:	6879      	ldr	r1, [r7, #4]
 8004c1a:	4613      	mov	r3, r2
 8004c1c:	00db      	lsls	r3, r3, #3
 8004c1e:	1a9b      	subs	r3, r3, r2
 8004c20:	009b      	lsls	r3, r3, #2
 8004c22:	440b      	add	r3, r1
 8004c24:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8004c28:	681b      	ldr	r3, [r3, #0]
}
 8004c2a:	4618      	mov	r0, r3
 8004c2c:	370c      	adds	r7, #12
 8004c2e:	46bd      	mov	sp, r7
 8004c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c34:	4770      	bx	lr

08004c36 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004c36:	b580      	push	{r7, lr}
 8004c38:	b086      	sub	sp, #24
 8004c3a:	af00      	add	r7, sp, #0
 8004c3c:	60f8      	str	r0, [r7, #12]
 8004c3e:	607a      	str	r2, [r7, #4]
 8004c40:	603b      	str	r3, [r7, #0]
 8004c42:	460b      	mov	r3, r1
 8004c44:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004c46:	7afb      	ldrb	r3, [r7, #11]
 8004c48:	f003 020f 	and.w	r2, r3, #15
 8004c4c:	4613      	mov	r3, r2
 8004c4e:	00db      	lsls	r3, r3, #3
 8004c50:	1a9b      	subs	r3, r3, r2
 8004c52:	009b      	lsls	r3, r3, #2
 8004c54:	3338      	adds	r3, #56	; 0x38
 8004c56:	68fa      	ldr	r2, [r7, #12]
 8004c58:	4413      	add	r3, r2
 8004c5a:	3304      	adds	r3, #4
 8004c5c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004c5e:	697b      	ldr	r3, [r7, #20]
 8004c60:	687a      	ldr	r2, [r7, #4]
 8004c62:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8004c64:	697b      	ldr	r3, [r7, #20]
 8004c66:	683a      	ldr	r2, [r7, #0]
 8004c68:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8004c6a:	697b      	ldr	r3, [r7, #20]
 8004c6c:	2200      	movs	r2, #0
 8004c6e:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8004c70:	697b      	ldr	r3, [r7, #20]
 8004c72:	2201      	movs	r2, #1
 8004c74:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004c76:	7afb      	ldrb	r3, [r7, #11]
 8004c78:	f003 030f 	and.w	r3, r3, #15
 8004c7c:	b2da      	uxtb	r2, r3
 8004c7e:	697b      	ldr	r3, [r7, #20]
 8004c80:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	691b      	ldr	r3, [r3, #16]
 8004c86:	2b01      	cmp	r3, #1
 8004c88:	d102      	bne.n	8004c90 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8004c8a:	687a      	ldr	r2, [r7, #4]
 8004c8c:	697b      	ldr	r3, [r7, #20]
 8004c8e:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004c90:	7afb      	ldrb	r3, [r7, #11]
 8004c92:	f003 030f 	and.w	r3, r3, #15
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d109      	bne.n	8004cae <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	6818      	ldr	r0, [r3, #0]
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	691b      	ldr	r3, [r3, #16]
 8004ca2:	b2db      	uxtb	r3, r3
 8004ca4:	461a      	mov	r2, r3
 8004ca6:	6979      	ldr	r1, [r7, #20]
 8004ca8:	f006 f88e 	bl	800adc8 <USB_EP0StartXfer>
 8004cac:	e008      	b.n	8004cc0 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	6818      	ldr	r0, [r3, #0]
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	691b      	ldr	r3, [r3, #16]
 8004cb6:	b2db      	uxtb	r3, r3
 8004cb8:	461a      	mov	r2, r3
 8004cba:	6979      	ldr	r1, [r7, #20]
 8004cbc:	f005 fe40 	bl	800a940 <USB_EPStartXfer>
  }

  return HAL_OK;
 8004cc0:	2300      	movs	r3, #0
}
 8004cc2:	4618      	mov	r0, r3
 8004cc4:	3718      	adds	r7, #24
 8004cc6:	46bd      	mov	sp, r7
 8004cc8:	bd80      	pop	{r7, pc}

08004cca <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004cca:	b580      	push	{r7, lr}
 8004ccc:	b084      	sub	sp, #16
 8004cce:	af00      	add	r7, sp, #0
 8004cd0:	6078      	str	r0, [r7, #4]
 8004cd2:	460b      	mov	r3, r1
 8004cd4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8004cd6:	78fb      	ldrb	r3, [r7, #3]
 8004cd8:	f003 020f 	and.w	r2, r3, #15
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	685b      	ldr	r3, [r3, #4]
 8004ce0:	429a      	cmp	r2, r3
 8004ce2:	d901      	bls.n	8004ce8 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8004ce4:	2301      	movs	r3, #1
 8004ce6:	e050      	b.n	8004d8a <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004ce8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	da0f      	bge.n	8004d10 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004cf0:	78fb      	ldrb	r3, [r7, #3]
 8004cf2:	f003 020f 	and.w	r2, r3, #15
 8004cf6:	4613      	mov	r3, r2
 8004cf8:	00db      	lsls	r3, r3, #3
 8004cfa:	1a9b      	subs	r3, r3, r2
 8004cfc:	009b      	lsls	r3, r3, #2
 8004cfe:	3338      	adds	r3, #56	; 0x38
 8004d00:	687a      	ldr	r2, [r7, #4]
 8004d02:	4413      	add	r3, r2
 8004d04:	3304      	adds	r3, #4
 8004d06:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	2201      	movs	r2, #1
 8004d0c:	705a      	strb	r2, [r3, #1]
 8004d0e:	e00d      	b.n	8004d2c <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004d10:	78fa      	ldrb	r2, [r7, #3]
 8004d12:	4613      	mov	r3, r2
 8004d14:	00db      	lsls	r3, r3, #3
 8004d16:	1a9b      	subs	r3, r3, r2
 8004d18:	009b      	lsls	r3, r3, #2
 8004d1a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8004d1e:	687a      	ldr	r2, [r7, #4]
 8004d20:	4413      	add	r3, r2
 8004d22:	3304      	adds	r3, #4
 8004d24:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	2200      	movs	r2, #0
 8004d2a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	2201      	movs	r2, #1
 8004d30:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004d32:	78fb      	ldrb	r3, [r7, #3]
 8004d34:	f003 030f 	and.w	r3, r3, #15
 8004d38:	b2da      	uxtb	r2, r3
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8004d44:	2b01      	cmp	r3, #1
 8004d46:	d101      	bne.n	8004d4c <HAL_PCD_EP_SetStall+0x82>
 8004d48:	2302      	movs	r3, #2
 8004d4a:	e01e      	b.n	8004d8a <HAL_PCD_EP_SetStall+0xc0>
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	2201      	movs	r2, #1
 8004d50:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	68f9      	ldr	r1, [r7, #12]
 8004d5a:	4618      	mov	r0, r3
 8004d5c:	f006 f9e5 	bl	800b12a <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004d60:	78fb      	ldrb	r3, [r7, #3]
 8004d62:	f003 030f 	and.w	r3, r3, #15
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d10a      	bne.n	8004d80 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	6818      	ldr	r0, [r3, #0]
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	691b      	ldr	r3, [r3, #16]
 8004d72:	b2d9      	uxtb	r1, r3
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8004d7a:	461a      	mov	r2, r3
 8004d7c:	f006 fbd6 	bl	800b52c <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	2200      	movs	r2, #0
 8004d84:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8004d88:	2300      	movs	r3, #0
}
 8004d8a:	4618      	mov	r0, r3
 8004d8c:	3710      	adds	r7, #16
 8004d8e:	46bd      	mov	sp, r7
 8004d90:	bd80      	pop	{r7, pc}

08004d92 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004d92:	b580      	push	{r7, lr}
 8004d94:	b084      	sub	sp, #16
 8004d96:	af00      	add	r7, sp, #0
 8004d98:	6078      	str	r0, [r7, #4]
 8004d9a:	460b      	mov	r3, r1
 8004d9c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8004d9e:	78fb      	ldrb	r3, [r7, #3]
 8004da0:	f003 020f 	and.w	r2, r3, #15
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	685b      	ldr	r3, [r3, #4]
 8004da8:	429a      	cmp	r2, r3
 8004daa:	d901      	bls.n	8004db0 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8004dac:	2301      	movs	r3, #1
 8004dae:	e042      	b.n	8004e36 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004db0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	da0f      	bge.n	8004dd8 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004db8:	78fb      	ldrb	r3, [r7, #3]
 8004dba:	f003 020f 	and.w	r2, r3, #15
 8004dbe:	4613      	mov	r3, r2
 8004dc0:	00db      	lsls	r3, r3, #3
 8004dc2:	1a9b      	subs	r3, r3, r2
 8004dc4:	009b      	lsls	r3, r3, #2
 8004dc6:	3338      	adds	r3, #56	; 0x38
 8004dc8:	687a      	ldr	r2, [r7, #4]
 8004dca:	4413      	add	r3, r2
 8004dcc:	3304      	adds	r3, #4
 8004dce:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	2201      	movs	r2, #1
 8004dd4:	705a      	strb	r2, [r3, #1]
 8004dd6:	e00f      	b.n	8004df8 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004dd8:	78fb      	ldrb	r3, [r7, #3]
 8004dda:	f003 020f 	and.w	r2, r3, #15
 8004dde:	4613      	mov	r3, r2
 8004de0:	00db      	lsls	r3, r3, #3
 8004de2:	1a9b      	subs	r3, r3, r2
 8004de4:	009b      	lsls	r3, r3, #2
 8004de6:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8004dea:	687a      	ldr	r2, [r7, #4]
 8004dec:	4413      	add	r3, r2
 8004dee:	3304      	adds	r3, #4
 8004df0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	2200      	movs	r2, #0
 8004df6:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	2200      	movs	r2, #0
 8004dfc:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004dfe:	78fb      	ldrb	r3, [r7, #3]
 8004e00:	f003 030f 	and.w	r3, r3, #15
 8004e04:	b2da      	uxtb	r2, r3
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8004e10:	2b01      	cmp	r3, #1
 8004e12:	d101      	bne.n	8004e18 <HAL_PCD_EP_ClrStall+0x86>
 8004e14:	2302      	movs	r3, #2
 8004e16:	e00e      	b.n	8004e36 <HAL_PCD_EP_ClrStall+0xa4>
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	2201      	movs	r2, #1
 8004e1c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	68f9      	ldr	r1, [r7, #12]
 8004e26:	4618      	mov	r0, r3
 8004e28:	f006 f9ed 	bl	800b206 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	2200      	movs	r2, #0
 8004e30:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8004e34:	2300      	movs	r3, #0
}
 8004e36:	4618      	mov	r0, r3
 8004e38:	3710      	adds	r7, #16
 8004e3a:	46bd      	mov	sp, r7
 8004e3c:	bd80      	pop	{r7, pc}

08004e3e <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004e3e:	b580      	push	{r7, lr}
 8004e40:	b08a      	sub	sp, #40	; 0x28
 8004e42:	af02      	add	r7, sp, #8
 8004e44:	6078      	str	r0, [r7, #4]
 8004e46:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e4e:	697b      	ldr	r3, [r7, #20]
 8004e50:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8004e52:	683a      	ldr	r2, [r7, #0]
 8004e54:	4613      	mov	r3, r2
 8004e56:	00db      	lsls	r3, r3, #3
 8004e58:	1a9b      	subs	r3, r3, r2
 8004e5a:	009b      	lsls	r3, r3, #2
 8004e5c:	3338      	adds	r3, #56	; 0x38
 8004e5e:	687a      	ldr	r2, [r7, #4]
 8004e60:	4413      	add	r3, r2
 8004e62:	3304      	adds	r3, #4
 8004e64:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	699a      	ldr	r2, [r3, #24]
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	695b      	ldr	r3, [r3, #20]
 8004e6e:	429a      	cmp	r2, r3
 8004e70:	d901      	bls.n	8004e76 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8004e72:	2301      	movs	r3, #1
 8004e74:	e06c      	b.n	8004f50 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	695a      	ldr	r2, [r3, #20]
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	699b      	ldr	r3, [r3, #24]
 8004e7e:	1ad3      	subs	r3, r2, r3
 8004e80:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	689b      	ldr	r3, [r3, #8]
 8004e86:	69fa      	ldr	r2, [r7, #28]
 8004e88:	429a      	cmp	r2, r3
 8004e8a:	d902      	bls.n	8004e92 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	689b      	ldr	r3, [r3, #8]
 8004e90:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8004e92:	69fb      	ldr	r3, [r7, #28]
 8004e94:	3303      	adds	r3, #3
 8004e96:	089b      	lsrs	r3, r3, #2
 8004e98:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004e9a:	e02b      	b.n	8004ef4 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	695a      	ldr	r2, [r3, #20]
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	699b      	ldr	r3, [r3, #24]
 8004ea4:	1ad3      	subs	r3, r2, r3
 8004ea6:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	689b      	ldr	r3, [r3, #8]
 8004eac:	69fa      	ldr	r2, [r7, #28]
 8004eae:	429a      	cmp	r2, r3
 8004eb0:	d902      	bls.n	8004eb8 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	689b      	ldr	r3, [r3, #8]
 8004eb6:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8004eb8:	69fb      	ldr	r3, [r7, #28]
 8004eba:	3303      	adds	r3, #3
 8004ebc:	089b      	lsrs	r3, r3, #2
 8004ebe:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	68d9      	ldr	r1, [r3, #12]
 8004ec4:	683b      	ldr	r3, [r7, #0]
 8004ec6:	b2da      	uxtb	r2, r3
 8004ec8:	69fb      	ldr	r3, [r7, #28]
 8004eca:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004ed0:	b2db      	uxtb	r3, r3
 8004ed2:	9300      	str	r3, [sp, #0]
 8004ed4:	4603      	mov	r3, r0
 8004ed6:	6978      	ldr	r0, [r7, #20]
 8004ed8:	f006 f8c9 	bl	800b06e <USB_WritePacket>

    ep->xfer_buff  += len;
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	68da      	ldr	r2, [r3, #12]
 8004ee0:	69fb      	ldr	r3, [r7, #28]
 8004ee2:	441a      	add	r2, r3
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	699a      	ldr	r2, [r3, #24]
 8004eec:	69fb      	ldr	r3, [r7, #28]
 8004eee:	441a      	add	r2, r3
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004ef4:	683b      	ldr	r3, [r7, #0]
 8004ef6:	015a      	lsls	r2, r3, #5
 8004ef8:	693b      	ldr	r3, [r7, #16]
 8004efa:	4413      	add	r3, r2
 8004efc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f00:	699b      	ldr	r3, [r3, #24]
 8004f02:	b29b      	uxth	r3, r3
 8004f04:	69ba      	ldr	r2, [r7, #24]
 8004f06:	429a      	cmp	r2, r3
 8004f08:	d809      	bhi.n	8004f1e <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	699a      	ldr	r2, [r3, #24]
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004f12:	429a      	cmp	r2, r3
 8004f14:	d203      	bcs.n	8004f1e <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	695b      	ldr	r3, [r3, #20]
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d1be      	bne.n	8004e9c <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	695a      	ldr	r2, [r3, #20]
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	699b      	ldr	r3, [r3, #24]
 8004f26:	429a      	cmp	r2, r3
 8004f28:	d811      	bhi.n	8004f4e <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004f2a:	683b      	ldr	r3, [r7, #0]
 8004f2c:	f003 030f 	and.w	r3, r3, #15
 8004f30:	2201      	movs	r2, #1
 8004f32:	fa02 f303 	lsl.w	r3, r2, r3
 8004f36:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004f38:	693b      	ldr	r3, [r7, #16]
 8004f3a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f3e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004f40:	68bb      	ldr	r3, [r7, #8]
 8004f42:	43db      	mvns	r3, r3
 8004f44:	6939      	ldr	r1, [r7, #16]
 8004f46:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004f4a:	4013      	ands	r3, r2
 8004f4c:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8004f4e:	2300      	movs	r3, #0
}
 8004f50:	4618      	mov	r0, r3
 8004f52:	3720      	adds	r7, #32
 8004f54:	46bd      	mov	sp, r7
 8004f56:	bd80      	pop	{r7, pc}

08004f58 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004f58:	b580      	push	{r7, lr}
 8004f5a:	b086      	sub	sp, #24
 8004f5c:	af00      	add	r7, sp, #0
 8004f5e:	6078      	str	r0, [r7, #4]
 8004f60:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f68:	697b      	ldr	r3, [r7, #20]
 8004f6a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004f6c:	697b      	ldr	r3, [r7, #20]
 8004f6e:	333c      	adds	r3, #60	; 0x3c
 8004f70:	3304      	adds	r3, #4
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004f76:	683b      	ldr	r3, [r7, #0]
 8004f78:	015a      	lsls	r2, r3, #5
 8004f7a:	693b      	ldr	r3, [r7, #16]
 8004f7c:	4413      	add	r3, r2
 8004f7e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f82:	689b      	ldr	r3, [r3, #8]
 8004f84:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	691b      	ldr	r3, [r3, #16]
 8004f8a:	2b01      	cmp	r3, #1
 8004f8c:	f040 80b3 	bne.w	80050f6 <PCD_EP_OutXfrComplete_int+0x19e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8004f90:	68bb      	ldr	r3, [r7, #8]
 8004f92:	f003 0308 	and.w	r3, r3, #8
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d028      	beq.n	8004fec <PCD_EP_OutXfrComplete_int+0x94>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	4a70      	ldr	r2, [pc, #448]	; (8005160 <PCD_EP_OutXfrComplete_int+0x208>)
 8004f9e:	4293      	cmp	r3, r2
 8004fa0:	d90e      	bls.n	8004fc0 <PCD_EP_OutXfrComplete_int+0x68>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004fa2:	68bb      	ldr	r3, [r7, #8]
 8004fa4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d009      	beq.n	8004fc0 <PCD_EP_OutXfrComplete_int+0x68>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004fac:	683b      	ldr	r3, [r7, #0]
 8004fae:	015a      	lsls	r2, r3, #5
 8004fb0:	693b      	ldr	r3, [r7, #16]
 8004fb2:	4413      	add	r3, r2
 8004fb4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004fb8:	461a      	mov	r2, r3
 8004fba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004fbe:	6093      	str	r3, [r2, #8]

      /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SetupStageCallback(hpcd);
#else
      HAL_PCD_SetupStageCallback(hpcd);
 8004fc0:	6878      	ldr	r0, [r7, #4]
 8004fc2:	f008 fc0f 	bl	800d7e4 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	6818      	ldr	r0, [r3, #0]
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8004fd0:	461a      	mov	r2, r3
 8004fd2:	2101      	movs	r1, #1
 8004fd4:	f006 faaa 	bl	800b52c <USB_EP0_OutStart>
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8004fd8:	683b      	ldr	r3, [r7, #0]
 8004fda:	015a      	lsls	r2, r3, #5
 8004fdc:	693b      	ldr	r3, [r7, #16]
 8004fde:	4413      	add	r3, r2
 8004fe0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004fe4:	461a      	mov	r2, r3
 8004fe6:	2308      	movs	r3, #8
 8004fe8:	6093      	str	r3, [r2, #8]
 8004fea:	e0b3      	b.n	8005154 <PCD_EP_OutXfrComplete_int+0x1fc>
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8004fec:	68bb      	ldr	r3, [r7, #8]
 8004fee:	f003 0320 	and.w	r3, r3, #32
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d009      	beq.n	800500a <PCD_EP_OutXfrComplete_int+0xb2>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004ff6:	683b      	ldr	r3, [r7, #0]
 8004ff8:	015a      	lsls	r2, r3, #5
 8004ffa:	693b      	ldr	r3, [r7, #16]
 8004ffc:	4413      	add	r3, r2
 8004ffe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005002:	461a      	mov	r2, r3
 8005004:	2320      	movs	r3, #32
 8005006:	6093      	str	r3, [r2, #8]
 8005008:	e0a4      	b.n	8005154 <PCD_EP_OutXfrComplete_int+0x1fc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800500a:	68bb      	ldr	r3, [r7, #8]
 800500c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005010:	2b00      	cmp	r3, #0
 8005012:	f040 809f 	bne.w	8005154 <PCD_EP_OutXfrComplete_int+0x1fc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	4a51      	ldr	r2, [pc, #324]	; (8005160 <PCD_EP_OutXfrComplete_int+0x208>)
 800501a:	4293      	cmp	r3, r2
 800501c:	d90f      	bls.n	800503e <PCD_EP_OutXfrComplete_int+0xe6>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800501e:	68bb      	ldr	r3, [r7, #8]
 8005020:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005024:	2b00      	cmp	r3, #0
 8005026:	d00a      	beq.n	800503e <PCD_EP_OutXfrComplete_int+0xe6>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005028:	683b      	ldr	r3, [r7, #0]
 800502a:	015a      	lsls	r2, r3, #5
 800502c:	693b      	ldr	r3, [r7, #16]
 800502e:	4413      	add	r3, r2
 8005030:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005034:	461a      	mov	r2, r3
 8005036:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800503a:	6093      	str	r3, [r2, #8]
 800503c:	e08a      	b.n	8005154 <PCD_EP_OutXfrComplete_int+0x1fc>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 800503e:	6879      	ldr	r1, [r7, #4]
 8005040:	683a      	ldr	r2, [r7, #0]
 8005042:	4613      	mov	r3, r2
 8005044:	00db      	lsls	r3, r3, #3
 8005046:	1a9b      	subs	r3, r3, r2
 8005048:	009b      	lsls	r3, r3, #2
 800504a:	440b      	add	r3, r1
 800504c:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8005050:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8005052:	683b      	ldr	r3, [r7, #0]
 8005054:	0159      	lsls	r1, r3, #5
 8005056:	693b      	ldr	r3, [r7, #16]
 8005058:	440b      	add	r3, r1
 800505a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800505e:	691b      	ldr	r3, [r3, #16]
 8005060:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8005064:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8005066:	6878      	ldr	r0, [r7, #4]
 8005068:	683a      	ldr	r2, [r7, #0]
 800506a:	4613      	mov	r3, r2
 800506c:	00db      	lsls	r3, r3, #3
 800506e:	1a9b      	subs	r3, r3, r2
 8005070:	009b      	lsls	r3, r3, #2
 8005072:	4403      	add	r3, r0
 8005074:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8005078:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 800507a:	6879      	ldr	r1, [r7, #4]
 800507c:	683a      	ldr	r2, [r7, #0]
 800507e:	4613      	mov	r3, r2
 8005080:	00db      	lsls	r3, r3, #3
 8005082:	1a9b      	subs	r3, r3, r2
 8005084:	009b      	lsls	r3, r3, #2
 8005086:	440b      	add	r3, r1
 8005088:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800508c:	6819      	ldr	r1, [r3, #0]
 800508e:	6878      	ldr	r0, [r7, #4]
 8005090:	683a      	ldr	r2, [r7, #0]
 8005092:	4613      	mov	r3, r2
 8005094:	00db      	lsls	r3, r3, #3
 8005096:	1a9b      	subs	r3, r3, r2
 8005098:	009b      	lsls	r3, r3, #2
 800509a:	4403      	add	r3, r0
 800509c:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	4419      	add	r1, r3
 80050a4:	6878      	ldr	r0, [r7, #4]
 80050a6:	683a      	ldr	r2, [r7, #0]
 80050a8:	4613      	mov	r3, r2
 80050aa:	00db      	lsls	r3, r3, #3
 80050ac:	1a9b      	subs	r3, r3, r2
 80050ae:	009b      	lsls	r3, r3, #2
 80050b0:	4403      	add	r3, r0
 80050b2:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80050b6:	6019      	str	r1, [r3, #0]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80050b8:	683b      	ldr	r3, [r7, #0]
 80050ba:	b2db      	uxtb	r3, r3
 80050bc:	4619      	mov	r1, r3
 80050be:	6878      	ldr	r0, [r7, #4]
 80050c0:	f008 fba2 	bl	800d808 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80050c4:	683b      	ldr	r3, [r7, #0]
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d144      	bne.n	8005154 <PCD_EP_OutXfrComplete_int+0x1fc>
 80050ca:	6879      	ldr	r1, [r7, #4]
 80050cc:	683a      	ldr	r2, [r7, #0]
 80050ce:	4613      	mov	r3, r2
 80050d0:	00db      	lsls	r3, r3, #3
 80050d2:	1a9b      	subs	r3, r3, r2
 80050d4:	009b      	lsls	r3, r3, #2
 80050d6:	440b      	add	r3, r1
 80050d8:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d138      	bne.n	8005154 <PCD_EP_OutXfrComplete_int+0x1fc>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	6818      	ldr	r0, [r3, #0]
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80050ec:	461a      	mov	r2, r3
 80050ee:	2101      	movs	r1, #1
 80050f0:	f006 fa1c 	bl	800b52c <USB_EP0_OutStart>
 80050f4:	e02e      	b.n	8005154 <PCD_EP_OutXfrComplete_int+0x1fc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	4a1a      	ldr	r2, [pc, #104]	; (8005164 <PCD_EP_OutXfrComplete_int+0x20c>)
 80050fa:	4293      	cmp	r3, r2
 80050fc:	d124      	bne.n	8005148 <PCD_EP_OutXfrComplete_int+0x1f0>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80050fe:	68bb      	ldr	r3, [r7, #8]
 8005100:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005104:	2b00      	cmp	r3, #0
 8005106:	d00a      	beq.n	800511e <PCD_EP_OutXfrComplete_int+0x1c6>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005108:	683b      	ldr	r3, [r7, #0]
 800510a:	015a      	lsls	r2, r3, #5
 800510c:	693b      	ldr	r3, [r7, #16]
 800510e:	4413      	add	r3, r2
 8005110:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005114:	461a      	mov	r2, r3
 8005116:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800511a:	6093      	str	r3, [r2, #8]
 800511c:	e01a      	b.n	8005154 <PCD_EP_OutXfrComplete_int+0x1fc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800511e:	68bb      	ldr	r3, [r7, #8]
 8005120:	f003 0320 	and.w	r3, r3, #32
 8005124:	2b00      	cmp	r3, #0
 8005126:	d008      	beq.n	800513a <PCD_EP_OutXfrComplete_int+0x1e2>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005128:	683b      	ldr	r3, [r7, #0]
 800512a:	015a      	lsls	r2, r3, #5
 800512c:	693b      	ldr	r3, [r7, #16]
 800512e:	4413      	add	r3, r2
 8005130:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005134:	461a      	mov	r2, r3
 8005136:	2320      	movs	r3, #32
 8005138:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800513a:	683b      	ldr	r3, [r7, #0]
 800513c:	b2db      	uxtb	r3, r3
 800513e:	4619      	mov	r1, r3
 8005140:	6878      	ldr	r0, [r7, #4]
 8005142:	f008 fb61 	bl	800d808 <HAL_PCD_DataOutStageCallback>
 8005146:	e005      	b.n	8005154 <PCD_EP_OutXfrComplete_int+0x1fc>
    else
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005148:	683b      	ldr	r3, [r7, #0]
 800514a:	b2db      	uxtb	r3, r3
 800514c:	4619      	mov	r1, r3
 800514e:	6878      	ldr	r0, [r7, #4]
 8005150:	f008 fb5a 	bl	800d808 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8005154:	2300      	movs	r3, #0
}
 8005156:	4618      	mov	r0, r3
 8005158:	3718      	adds	r7, #24
 800515a:	46bd      	mov	sp, r7
 800515c:	bd80      	pop	{r7, pc}
 800515e:	bf00      	nop
 8005160:	4f54300a 	.word	0x4f54300a
 8005164:	4f54310a 	.word	0x4f54310a

08005168 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005168:	b580      	push	{r7, lr}
 800516a:	b086      	sub	sp, #24
 800516c:	af00      	add	r7, sp, #0
 800516e:	6078      	str	r0, [r7, #4]
 8005170:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005178:	697b      	ldr	r3, [r7, #20]
 800517a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800517c:	697b      	ldr	r3, [r7, #20]
 800517e:	333c      	adds	r3, #60	; 0x3c
 8005180:	3304      	adds	r3, #4
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8005186:	683b      	ldr	r3, [r7, #0]
 8005188:	015a      	lsls	r2, r3, #5
 800518a:	693b      	ldr	r3, [r7, #16]
 800518c:	4413      	add	r3, r2
 800518e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005192:	689b      	ldr	r3, [r3, #8]
 8005194:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	691b      	ldr	r3, [r3, #16]
 800519a:	2b01      	cmp	r3, #1
 800519c:	d113      	bne.n	80051c6 <PCD_EP_OutSetupPacket_int+0x5e>
  {
    /* StupPktRcvd = 1 pending setup packet int */
    if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	4a1f      	ldr	r2, [pc, #124]	; (8005220 <PCD_EP_OutSetupPacket_int+0xb8>)
 80051a2:	4293      	cmp	r3, r2
 80051a4:	d922      	bls.n	80051ec <PCD_EP_OutSetupPacket_int+0x84>
        ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80051a6:	68bb      	ldr	r3, [r7, #8]
 80051a8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
    if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d01d      	beq.n	80051ec <PCD_EP_OutSetupPacket_int+0x84>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80051b0:	683b      	ldr	r3, [r7, #0]
 80051b2:	015a      	lsls	r2, r3, #5
 80051b4:	693b      	ldr	r3, [r7, #16]
 80051b6:	4413      	add	r3, r2
 80051b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051bc:	461a      	mov	r2, r3
 80051be:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80051c2:	6093      	str	r3, [r2, #8]
 80051c4:	e012      	b.n	80051ec <PCD_EP_OutSetupPacket_int+0x84>
    }
  }
  else
  {
    if ((gSNPSiD == USB_OTG_CORE_ID_310A) &&
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	4a16      	ldr	r2, [pc, #88]	; (8005224 <PCD_EP_OutSetupPacket_int+0xbc>)
 80051ca:	4293      	cmp	r3, r2
 80051cc:	d10e      	bne.n	80051ec <PCD_EP_OutSetupPacket_int+0x84>
        ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80051ce:	68bb      	ldr	r3, [r7, #8]
 80051d0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
    if ((gSNPSiD == USB_OTG_CORE_ID_310A) &&
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d009      	beq.n	80051ec <PCD_EP_OutSetupPacket_int+0x84>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80051d8:	683b      	ldr	r3, [r7, #0]
 80051da:	015a      	lsls	r2, r3, #5
 80051dc:	693b      	ldr	r3, [r7, #16]
 80051de:	4413      	add	r3, r2
 80051e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051e4:	461a      	mov	r2, r3
 80051e6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80051ea:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80051ec:	6878      	ldr	r0, [r7, #4]
 80051ee:	f008 faf9 	bl	800d7e4 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	4a0a      	ldr	r2, [pc, #40]	; (8005220 <PCD_EP_OutSetupPacket_int+0xb8>)
 80051f6:	4293      	cmp	r3, r2
 80051f8:	d90c      	bls.n	8005214 <PCD_EP_OutSetupPacket_int+0xac>
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	691b      	ldr	r3, [r3, #16]
 80051fe:	2b01      	cmp	r3, #1
 8005200:	d108      	bne.n	8005214 <PCD_EP_OutSetupPacket_int+0xac>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	6818      	ldr	r0, [r3, #0]
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800520c:	461a      	mov	r2, r3
 800520e:	2101      	movs	r1, #1
 8005210:	f006 f98c 	bl	800b52c <USB_EP0_OutStart>
  }

  return HAL_OK;
 8005214:	2300      	movs	r3, #0
}
 8005216:	4618      	mov	r0, r3
 8005218:	3718      	adds	r7, #24
 800521a:	46bd      	mov	sp, r7
 800521c:	bd80      	pop	{r7, pc}
 800521e:	bf00      	nop
 8005220:	4f54300a 	.word	0x4f54300a
 8005224:	4f54310a 	.word	0x4f54310a

08005228 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8005228:	b480      	push	{r7}
 800522a:	b085      	sub	sp, #20
 800522c:	af00      	add	r7, sp, #0
 800522e:	6078      	str	r0, [r7, #4]
 8005230:	460b      	mov	r3, r1
 8005232:	70fb      	strb	r3, [r7, #3]
 8005234:	4613      	mov	r3, r2
 8005236:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800523e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8005240:	78fb      	ldrb	r3, [r7, #3]
 8005242:	2b00      	cmp	r3, #0
 8005244:	d107      	bne.n	8005256 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8005246:	883b      	ldrh	r3, [r7, #0]
 8005248:	0419      	lsls	r1, r3, #16
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	68ba      	ldr	r2, [r7, #8]
 8005250:	430a      	orrs	r2, r1
 8005252:	629a      	str	r2, [r3, #40]	; 0x28
 8005254:	e028      	b.n	80052a8 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800525c:	0c1b      	lsrs	r3, r3, #16
 800525e:	68ba      	ldr	r2, [r7, #8]
 8005260:	4413      	add	r3, r2
 8005262:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8005264:	2300      	movs	r3, #0
 8005266:	73fb      	strb	r3, [r7, #15]
 8005268:	e00d      	b.n	8005286 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681a      	ldr	r2, [r3, #0]
 800526e:	7bfb      	ldrb	r3, [r7, #15]
 8005270:	3340      	adds	r3, #64	; 0x40
 8005272:	009b      	lsls	r3, r3, #2
 8005274:	4413      	add	r3, r2
 8005276:	685b      	ldr	r3, [r3, #4]
 8005278:	0c1b      	lsrs	r3, r3, #16
 800527a:	68ba      	ldr	r2, [r7, #8]
 800527c:	4413      	add	r3, r2
 800527e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8005280:	7bfb      	ldrb	r3, [r7, #15]
 8005282:	3301      	adds	r3, #1
 8005284:	73fb      	strb	r3, [r7, #15]
 8005286:	7bfa      	ldrb	r2, [r7, #15]
 8005288:	78fb      	ldrb	r3, [r7, #3]
 800528a:	3b01      	subs	r3, #1
 800528c:	429a      	cmp	r2, r3
 800528e:	d3ec      	bcc.n	800526a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8005290:	883b      	ldrh	r3, [r7, #0]
 8005292:	0418      	lsls	r0, r3, #16
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	6819      	ldr	r1, [r3, #0]
 8005298:	78fb      	ldrb	r3, [r7, #3]
 800529a:	3b01      	subs	r3, #1
 800529c:	68ba      	ldr	r2, [r7, #8]
 800529e:	4302      	orrs	r2, r0
 80052a0:	3340      	adds	r3, #64	; 0x40
 80052a2:	009b      	lsls	r3, r3, #2
 80052a4:	440b      	add	r3, r1
 80052a6:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80052a8:	2300      	movs	r3, #0
}
 80052aa:	4618      	mov	r0, r3
 80052ac:	3714      	adds	r7, #20
 80052ae:	46bd      	mov	sp, r7
 80052b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b4:	4770      	bx	lr

080052b6 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80052b6:	b480      	push	{r7}
 80052b8:	b083      	sub	sp, #12
 80052ba:	af00      	add	r7, sp, #0
 80052bc:	6078      	str	r0, [r7, #4]
 80052be:	460b      	mov	r3, r1
 80052c0:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	887a      	ldrh	r2, [r7, #2]
 80052c8:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80052ca:	2300      	movs	r3, #0
}
 80052cc:	4618      	mov	r0, r3
 80052ce:	370c      	adds	r7, #12
 80052d0:	46bd      	mov	sp, r7
 80052d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d6:	4770      	bx	lr

080052d8 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80052d8:	b480      	push	{r7}
 80052da:	b083      	sub	sp, #12
 80052dc:	af00      	add	r7, sp, #0
 80052de:	6078      	str	r0, [r7, #4]
 80052e0:	460b      	mov	r3, r1
 80052e2:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80052e4:	bf00      	nop
 80052e6:	370c      	adds	r7, #12
 80052e8:	46bd      	mov	sp, r7
 80052ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ee:	4770      	bx	lr

080052f0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80052f0:	b580      	push	{r7, lr}
 80052f2:	b086      	sub	sp, #24
 80052f4:	af00      	add	r7, sp, #0
 80052f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d101      	bne.n	8005302 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80052fe:	2301      	movs	r3, #1
 8005300:	e25b      	b.n	80057ba <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	f003 0301 	and.w	r3, r3, #1
 800530a:	2b00      	cmp	r3, #0
 800530c:	d075      	beq.n	80053fa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800530e:	4ba3      	ldr	r3, [pc, #652]	; (800559c <HAL_RCC_OscConfig+0x2ac>)
 8005310:	689b      	ldr	r3, [r3, #8]
 8005312:	f003 030c 	and.w	r3, r3, #12
 8005316:	2b04      	cmp	r3, #4
 8005318:	d00c      	beq.n	8005334 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800531a:	4ba0      	ldr	r3, [pc, #640]	; (800559c <HAL_RCC_OscConfig+0x2ac>)
 800531c:	689b      	ldr	r3, [r3, #8]
 800531e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005322:	2b08      	cmp	r3, #8
 8005324:	d112      	bne.n	800534c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005326:	4b9d      	ldr	r3, [pc, #628]	; (800559c <HAL_RCC_OscConfig+0x2ac>)
 8005328:	685b      	ldr	r3, [r3, #4]
 800532a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800532e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005332:	d10b      	bne.n	800534c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005334:	4b99      	ldr	r3, [pc, #612]	; (800559c <HAL_RCC_OscConfig+0x2ac>)
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800533c:	2b00      	cmp	r3, #0
 800533e:	d05b      	beq.n	80053f8 <HAL_RCC_OscConfig+0x108>
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	685b      	ldr	r3, [r3, #4]
 8005344:	2b00      	cmp	r3, #0
 8005346:	d157      	bne.n	80053f8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005348:	2301      	movs	r3, #1
 800534a:	e236      	b.n	80057ba <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	685b      	ldr	r3, [r3, #4]
 8005350:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005354:	d106      	bne.n	8005364 <HAL_RCC_OscConfig+0x74>
 8005356:	4b91      	ldr	r3, [pc, #580]	; (800559c <HAL_RCC_OscConfig+0x2ac>)
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	4a90      	ldr	r2, [pc, #576]	; (800559c <HAL_RCC_OscConfig+0x2ac>)
 800535c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005360:	6013      	str	r3, [r2, #0]
 8005362:	e01d      	b.n	80053a0 <HAL_RCC_OscConfig+0xb0>
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	685b      	ldr	r3, [r3, #4]
 8005368:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800536c:	d10c      	bne.n	8005388 <HAL_RCC_OscConfig+0x98>
 800536e:	4b8b      	ldr	r3, [pc, #556]	; (800559c <HAL_RCC_OscConfig+0x2ac>)
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	4a8a      	ldr	r2, [pc, #552]	; (800559c <HAL_RCC_OscConfig+0x2ac>)
 8005374:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005378:	6013      	str	r3, [r2, #0]
 800537a:	4b88      	ldr	r3, [pc, #544]	; (800559c <HAL_RCC_OscConfig+0x2ac>)
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	4a87      	ldr	r2, [pc, #540]	; (800559c <HAL_RCC_OscConfig+0x2ac>)
 8005380:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005384:	6013      	str	r3, [r2, #0]
 8005386:	e00b      	b.n	80053a0 <HAL_RCC_OscConfig+0xb0>
 8005388:	4b84      	ldr	r3, [pc, #528]	; (800559c <HAL_RCC_OscConfig+0x2ac>)
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	4a83      	ldr	r2, [pc, #524]	; (800559c <HAL_RCC_OscConfig+0x2ac>)
 800538e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005392:	6013      	str	r3, [r2, #0]
 8005394:	4b81      	ldr	r3, [pc, #516]	; (800559c <HAL_RCC_OscConfig+0x2ac>)
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	4a80      	ldr	r2, [pc, #512]	; (800559c <HAL_RCC_OscConfig+0x2ac>)
 800539a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800539e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	685b      	ldr	r3, [r3, #4]
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d013      	beq.n	80053d0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80053a8:	f7fd fe20 	bl	8002fec <HAL_GetTick>
 80053ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80053ae:	e008      	b.n	80053c2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80053b0:	f7fd fe1c 	bl	8002fec <HAL_GetTick>
 80053b4:	4602      	mov	r2, r0
 80053b6:	693b      	ldr	r3, [r7, #16]
 80053b8:	1ad3      	subs	r3, r2, r3
 80053ba:	2b64      	cmp	r3, #100	; 0x64
 80053bc:	d901      	bls.n	80053c2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80053be:	2303      	movs	r3, #3
 80053c0:	e1fb      	b.n	80057ba <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80053c2:	4b76      	ldr	r3, [pc, #472]	; (800559c <HAL_RCC_OscConfig+0x2ac>)
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d0f0      	beq.n	80053b0 <HAL_RCC_OscConfig+0xc0>
 80053ce:	e014      	b.n	80053fa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80053d0:	f7fd fe0c 	bl	8002fec <HAL_GetTick>
 80053d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80053d6:	e008      	b.n	80053ea <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80053d8:	f7fd fe08 	bl	8002fec <HAL_GetTick>
 80053dc:	4602      	mov	r2, r0
 80053de:	693b      	ldr	r3, [r7, #16]
 80053e0:	1ad3      	subs	r3, r2, r3
 80053e2:	2b64      	cmp	r3, #100	; 0x64
 80053e4:	d901      	bls.n	80053ea <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80053e6:	2303      	movs	r3, #3
 80053e8:	e1e7      	b.n	80057ba <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80053ea:	4b6c      	ldr	r3, [pc, #432]	; (800559c <HAL_RCC_OscConfig+0x2ac>)
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d1f0      	bne.n	80053d8 <HAL_RCC_OscConfig+0xe8>
 80053f6:	e000      	b.n	80053fa <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80053f8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	f003 0302 	and.w	r3, r3, #2
 8005402:	2b00      	cmp	r3, #0
 8005404:	d063      	beq.n	80054ce <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005406:	4b65      	ldr	r3, [pc, #404]	; (800559c <HAL_RCC_OscConfig+0x2ac>)
 8005408:	689b      	ldr	r3, [r3, #8]
 800540a:	f003 030c 	and.w	r3, r3, #12
 800540e:	2b00      	cmp	r3, #0
 8005410:	d00b      	beq.n	800542a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005412:	4b62      	ldr	r3, [pc, #392]	; (800559c <HAL_RCC_OscConfig+0x2ac>)
 8005414:	689b      	ldr	r3, [r3, #8]
 8005416:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800541a:	2b08      	cmp	r3, #8
 800541c:	d11c      	bne.n	8005458 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800541e:	4b5f      	ldr	r3, [pc, #380]	; (800559c <HAL_RCC_OscConfig+0x2ac>)
 8005420:	685b      	ldr	r3, [r3, #4]
 8005422:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005426:	2b00      	cmp	r3, #0
 8005428:	d116      	bne.n	8005458 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800542a:	4b5c      	ldr	r3, [pc, #368]	; (800559c <HAL_RCC_OscConfig+0x2ac>)
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	f003 0302 	and.w	r3, r3, #2
 8005432:	2b00      	cmp	r3, #0
 8005434:	d005      	beq.n	8005442 <HAL_RCC_OscConfig+0x152>
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	68db      	ldr	r3, [r3, #12]
 800543a:	2b01      	cmp	r3, #1
 800543c:	d001      	beq.n	8005442 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800543e:	2301      	movs	r3, #1
 8005440:	e1bb      	b.n	80057ba <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005442:	4b56      	ldr	r3, [pc, #344]	; (800559c <HAL_RCC_OscConfig+0x2ac>)
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	691b      	ldr	r3, [r3, #16]
 800544e:	00db      	lsls	r3, r3, #3
 8005450:	4952      	ldr	r1, [pc, #328]	; (800559c <HAL_RCC_OscConfig+0x2ac>)
 8005452:	4313      	orrs	r3, r2
 8005454:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005456:	e03a      	b.n	80054ce <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	68db      	ldr	r3, [r3, #12]
 800545c:	2b00      	cmp	r3, #0
 800545e:	d020      	beq.n	80054a2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005460:	4b4f      	ldr	r3, [pc, #316]	; (80055a0 <HAL_RCC_OscConfig+0x2b0>)
 8005462:	2201      	movs	r2, #1
 8005464:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005466:	f7fd fdc1 	bl	8002fec <HAL_GetTick>
 800546a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800546c:	e008      	b.n	8005480 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800546e:	f7fd fdbd 	bl	8002fec <HAL_GetTick>
 8005472:	4602      	mov	r2, r0
 8005474:	693b      	ldr	r3, [r7, #16]
 8005476:	1ad3      	subs	r3, r2, r3
 8005478:	2b02      	cmp	r3, #2
 800547a:	d901      	bls.n	8005480 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800547c:	2303      	movs	r3, #3
 800547e:	e19c      	b.n	80057ba <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005480:	4b46      	ldr	r3, [pc, #280]	; (800559c <HAL_RCC_OscConfig+0x2ac>)
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	f003 0302 	and.w	r3, r3, #2
 8005488:	2b00      	cmp	r3, #0
 800548a:	d0f0      	beq.n	800546e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800548c:	4b43      	ldr	r3, [pc, #268]	; (800559c <HAL_RCC_OscConfig+0x2ac>)
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	691b      	ldr	r3, [r3, #16]
 8005498:	00db      	lsls	r3, r3, #3
 800549a:	4940      	ldr	r1, [pc, #256]	; (800559c <HAL_RCC_OscConfig+0x2ac>)
 800549c:	4313      	orrs	r3, r2
 800549e:	600b      	str	r3, [r1, #0]
 80054a0:	e015      	b.n	80054ce <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80054a2:	4b3f      	ldr	r3, [pc, #252]	; (80055a0 <HAL_RCC_OscConfig+0x2b0>)
 80054a4:	2200      	movs	r2, #0
 80054a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80054a8:	f7fd fda0 	bl	8002fec <HAL_GetTick>
 80054ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80054ae:	e008      	b.n	80054c2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80054b0:	f7fd fd9c 	bl	8002fec <HAL_GetTick>
 80054b4:	4602      	mov	r2, r0
 80054b6:	693b      	ldr	r3, [r7, #16]
 80054b8:	1ad3      	subs	r3, r2, r3
 80054ba:	2b02      	cmp	r3, #2
 80054bc:	d901      	bls.n	80054c2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80054be:	2303      	movs	r3, #3
 80054c0:	e17b      	b.n	80057ba <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80054c2:	4b36      	ldr	r3, [pc, #216]	; (800559c <HAL_RCC_OscConfig+0x2ac>)
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	f003 0302 	and.w	r3, r3, #2
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d1f0      	bne.n	80054b0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	f003 0308 	and.w	r3, r3, #8
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d030      	beq.n	800553c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	695b      	ldr	r3, [r3, #20]
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d016      	beq.n	8005510 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80054e2:	4b30      	ldr	r3, [pc, #192]	; (80055a4 <HAL_RCC_OscConfig+0x2b4>)
 80054e4:	2201      	movs	r2, #1
 80054e6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80054e8:	f7fd fd80 	bl	8002fec <HAL_GetTick>
 80054ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80054ee:	e008      	b.n	8005502 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80054f0:	f7fd fd7c 	bl	8002fec <HAL_GetTick>
 80054f4:	4602      	mov	r2, r0
 80054f6:	693b      	ldr	r3, [r7, #16]
 80054f8:	1ad3      	subs	r3, r2, r3
 80054fa:	2b02      	cmp	r3, #2
 80054fc:	d901      	bls.n	8005502 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80054fe:	2303      	movs	r3, #3
 8005500:	e15b      	b.n	80057ba <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005502:	4b26      	ldr	r3, [pc, #152]	; (800559c <HAL_RCC_OscConfig+0x2ac>)
 8005504:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005506:	f003 0302 	and.w	r3, r3, #2
 800550a:	2b00      	cmp	r3, #0
 800550c:	d0f0      	beq.n	80054f0 <HAL_RCC_OscConfig+0x200>
 800550e:	e015      	b.n	800553c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005510:	4b24      	ldr	r3, [pc, #144]	; (80055a4 <HAL_RCC_OscConfig+0x2b4>)
 8005512:	2200      	movs	r2, #0
 8005514:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005516:	f7fd fd69 	bl	8002fec <HAL_GetTick>
 800551a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800551c:	e008      	b.n	8005530 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800551e:	f7fd fd65 	bl	8002fec <HAL_GetTick>
 8005522:	4602      	mov	r2, r0
 8005524:	693b      	ldr	r3, [r7, #16]
 8005526:	1ad3      	subs	r3, r2, r3
 8005528:	2b02      	cmp	r3, #2
 800552a:	d901      	bls.n	8005530 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800552c:	2303      	movs	r3, #3
 800552e:	e144      	b.n	80057ba <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005530:	4b1a      	ldr	r3, [pc, #104]	; (800559c <HAL_RCC_OscConfig+0x2ac>)
 8005532:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005534:	f003 0302 	and.w	r3, r3, #2
 8005538:	2b00      	cmp	r3, #0
 800553a:	d1f0      	bne.n	800551e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	f003 0304 	and.w	r3, r3, #4
 8005544:	2b00      	cmp	r3, #0
 8005546:	f000 80a0 	beq.w	800568a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800554a:	2300      	movs	r3, #0
 800554c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800554e:	4b13      	ldr	r3, [pc, #76]	; (800559c <HAL_RCC_OscConfig+0x2ac>)
 8005550:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005552:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005556:	2b00      	cmp	r3, #0
 8005558:	d10f      	bne.n	800557a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800555a:	2300      	movs	r3, #0
 800555c:	60bb      	str	r3, [r7, #8]
 800555e:	4b0f      	ldr	r3, [pc, #60]	; (800559c <HAL_RCC_OscConfig+0x2ac>)
 8005560:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005562:	4a0e      	ldr	r2, [pc, #56]	; (800559c <HAL_RCC_OscConfig+0x2ac>)
 8005564:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005568:	6413      	str	r3, [r2, #64]	; 0x40
 800556a:	4b0c      	ldr	r3, [pc, #48]	; (800559c <HAL_RCC_OscConfig+0x2ac>)
 800556c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800556e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005572:	60bb      	str	r3, [r7, #8]
 8005574:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005576:	2301      	movs	r3, #1
 8005578:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800557a:	4b0b      	ldr	r3, [pc, #44]	; (80055a8 <HAL_RCC_OscConfig+0x2b8>)
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005582:	2b00      	cmp	r3, #0
 8005584:	d121      	bne.n	80055ca <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005586:	4b08      	ldr	r3, [pc, #32]	; (80055a8 <HAL_RCC_OscConfig+0x2b8>)
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	4a07      	ldr	r2, [pc, #28]	; (80055a8 <HAL_RCC_OscConfig+0x2b8>)
 800558c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005590:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005592:	f7fd fd2b 	bl	8002fec <HAL_GetTick>
 8005596:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005598:	e011      	b.n	80055be <HAL_RCC_OscConfig+0x2ce>
 800559a:	bf00      	nop
 800559c:	40023800 	.word	0x40023800
 80055a0:	42470000 	.word	0x42470000
 80055a4:	42470e80 	.word	0x42470e80
 80055a8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80055ac:	f7fd fd1e 	bl	8002fec <HAL_GetTick>
 80055b0:	4602      	mov	r2, r0
 80055b2:	693b      	ldr	r3, [r7, #16]
 80055b4:	1ad3      	subs	r3, r2, r3
 80055b6:	2b02      	cmp	r3, #2
 80055b8:	d901      	bls.n	80055be <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80055ba:	2303      	movs	r3, #3
 80055bc:	e0fd      	b.n	80057ba <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80055be:	4b81      	ldr	r3, [pc, #516]	; (80057c4 <HAL_RCC_OscConfig+0x4d4>)
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d0f0      	beq.n	80055ac <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	689b      	ldr	r3, [r3, #8]
 80055ce:	2b01      	cmp	r3, #1
 80055d0:	d106      	bne.n	80055e0 <HAL_RCC_OscConfig+0x2f0>
 80055d2:	4b7d      	ldr	r3, [pc, #500]	; (80057c8 <HAL_RCC_OscConfig+0x4d8>)
 80055d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055d6:	4a7c      	ldr	r2, [pc, #496]	; (80057c8 <HAL_RCC_OscConfig+0x4d8>)
 80055d8:	f043 0301 	orr.w	r3, r3, #1
 80055dc:	6713      	str	r3, [r2, #112]	; 0x70
 80055de:	e01c      	b.n	800561a <HAL_RCC_OscConfig+0x32a>
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	689b      	ldr	r3, [r3, #8]
 80055e4:	2b05      	cmp	r3, #5
 80055e6:	d10c      	bne.n	8005602 <HAL_RCC_OscConfig+0x312>
 80055e8:	4b77      	ldr	r3, [pc, #476]	; (80057c8 <HAL_RCC_OscConfig+0x4d8>)
 80055ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055ec:	4a76      	ldr	r2, [pc, #472]	; (80057c8 <HAL_RCC_OscConfig+0x4d8>)
 80055ee:	f043 0304 	orr.w	r3, r3, #4
 80055f2:	6713      	str	r3, [r2, #112]	; 0x70
 80055f4:	4b74      	ldr	r3, [pc, #464]	; (80057c8 <HAL_RCC_OscConfig+0x4d8>)
 80055f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055f8:	4a73      	ldr	r2, [pc, #460]	; (80057c8 <HAL_RCC_OscConfig+0x4d8>)
 80055fa:	f043 0301 	orr.w	r3, r3, #1
 80055fe:	6713      	str	r3, [r2, #112]	; 0x70
 8005600:	e00b      	b.n	800561a <HAL_RCC_OscConfig+0x32a>
 8005602:	4b71      	ldr	r3, [pc, #452]	; (80057c8 <HAL_RCC_OscConfig+0x4d8>)
 8005604:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005606:	4a70      	ldr	r2, [pc, #448]	; (80057c8 <HAL_RCC_OscConfig+0x4d8>)
 8005608:	f023 0301 	bic.w	r3, r3, #1
 800560c:	6713      	str	r3, [r2, #112]	; 0x70
 800560e:	4b6e      	ldr	r3, [pc, #440]	; (80057c8 <HAL_RCC_OscConfig+0x4d8>)
 8005610:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005612:	4a6d      	ldr	r2, [pc, #436]	; (80057c8 <HAL_RCC_OscConfig+0x4d8>)
 8005614:	f023 0304 	bic.w	r3, r3, #4
 8005618:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	689b      	ldr	r3, [r3, #8]
 800561e:	2b00      	cmp	r3, #0
 8005620:	d015      	beq.n	800564e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005622:	f7fd fce3 	bl	8002fec <HAL_GetTick>
 8005626:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005628:	e00a      	b.n	8005640 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800562a:	f7fd fcdf 	bl	8002fec <HAL_GetTick>
 800562e:	4602      	mov	r2, r0
 8005630:	693b      	ldr	r3, [r7, #16]
 8005632:	1ad3      	subs	r3, r2, r3
 8005634:	f241 3288 	movw	r2, #5000	; 0x1388
 8005638:	4293      	cmp	r3, r2
 800563a:	d901      	bls.n	8005640 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800563c:	2303      	movs	r3, #3
 800563e:	e0bc      	b.n	80057ba <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005640:	4b61      	ldr	r3, [pc, #388]	; (80057c8 <HAL_RCC_OscConfig+0x4d8>)
 8005642:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005644:	f003 0302 	and.w	r3, r3, #2
 8005648:	2b00      	cmp	r3, #0
 800564a:	d0ee      	beq.n	800562a <HAL_RCC_OscConfig+0x33a>
 800564c:	e014      	b.n	8005678 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800564e:	f7fd fccd 	bl	8002fec <HAL_GetTick>
 8005652:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005654:	e00a      	b.n	800566c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005656:	f7fd fcc9 	bl	8002fec <HAL_GetTick>
 800565a:	4602      	mov	r2, r0
 800565c:	693b      	ldr	r3, [r7, #16]
 800565e:	1ad3      	subs	r3, r2, r3
 8005660:	f241 3288 	movw	r2, #5000	; 0x1388
 8005664:	4293      	cmp	r3, r2
 8005666:	d901      	bls.n	800566c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8005668:	2303      	movs	r3, #3
 800566a:	e0a6      	b.n	80057ba <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800566c:	4b56      	ldr	r3, [pc, #344]	; (80057c8 <HAL_RCC_OscConfig+0x4d8>)
 800566e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005670:	f003 0302 	and.w	r3, r3, #2
 8005674:	2b00      	cmp	r3, #0
 8005676:	d1ee      	bne.n	8005656 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005678:	7dfb      	ldrb	r3, [r7, #23]
 800567a:	2b01      	cmp	r3, #1
 800567c:	d105      	bne.n	800568a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800567e:	4b52      	ldr	r3, [pc, #328]	; (80057c8 <HAL_RCC_OscConfig+0x4d8>)
 8005680:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005682:	4a51      	ldr	r2, [pc, #324]	; (80057c8 <HAL_RCC_OscConfig+0x4d8>)
 8005684:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005688:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	699b      	ldr	r3, [r3, #24]
 800568e:	2b00      	cmp	r3, #0
 8005690:	f000 8092 	beq.w	80057b8 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005694:	4b4c      	ldr	r3, [pc, #304]	; (80057c8 <HAL_RCC_OscConfig+0x4d8>)
 8005696:	689b      	ldr	r3, [r3, #8]
 8005698:	f003 030c 	and.w	r3, r3, #12
 800569c:	2b08      	cmp	r3, #8
 800569e:	d05c      	beq.n	800575a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	699b      	ldr	r3, [r3, #24]
 80056a4:	2b02      	cmp	r3, #2
 80056a6:	d141      	bne.n	800572c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80056a8:	4b48      	ldr	r3, [pc, #288]	; (80057cc <HAL_RCC_OscConfig+0x4dc>)
 80056aa:	2200      	movs	r2, #0
 80056ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80056ae:	f7fd fc9d 	bl	8002fec <HAL_GetTick>
 80056b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80056b4:	e008      	b.n	80056c8 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80056b6:	f7fd fc99 	bl	8002fec <HAL_GetTick>
 80056ba:	4602      	mov	r2, r0
 80056bc:	693b      	ldr	r3, [r7, #16]
 80056be:	1ad3      	subs	r3, r2, r3
 80056c0:	2b02      	cmp	r3, #2
 80056c2:	d901      	bls.n	80056c8 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80056c4:	2303      	movs	r3, #3
 80056c6:	e078      	b.n	80057ba <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80056c8:	4b3f      	ldr	r3, [pc, #252]	; (80057c8 <HAL_RCC_OscConfig+0x4d8>)
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d1f0      	bne.n	80056b6 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	69da      	ldr	r2, [r3, #28]
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	6a1b      	ldr	r3, [r3, #32]
 80056dc:	431a      	orrs	r2, r3
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056e2:	019b      	lsls	r3, r3, #6
 80056e4:	431a      	orrs	r2, r3
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056ea:	085b      	lsrs	r3, r3, #1
 80056ec:	3b01      	subs	r3, #1
 80056ee:	041b      	lsls	r3, r3, #16
 80056f0:	431a      	orrs	r2, r3
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056f6:	061b      	lsls	r3, r3, #24
 80056f8:	4933      	ldr	r1, [pc, #204]	; (80057c8 <HAL_RCC_OscConfig+0x4d8>)
 80056fa:	4313      	orrs	r3, r2
 80056fc:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80056fe:	4b33      	ldr	r3, [pc, #204]	; (80057cc <HAL_RCC_OscConfig+0x4dc>)
 8005700:	2201      	movs	r2, #1
 8005702:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005704:	f7fd fc72 	bl	8002fec <HAL_GetTick>
 8005708:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800570a:	e008      	b.n	800571e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800570c:	f7fd fc6e 	bl	8002fec <HAL_GetTick>
 8005710:	4602      	mov	r2, r0
 8005712:	693b      	ldr	r3, [r7, #16]
 8005714:	1ad3      	subs	r3, r2, r3
 8005716:	2b02      	cmp	r3, #2
 8005718:	d901      	bls.n	800571e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800571a:	2303      	movs	r3, #3
 800571c:	e04d      	b.n	80057ba <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800571e:	4b2a      	ldr	r3, [pc, #168]	; (80057c8 <HAL_RCC_OscConfig+0x4d8>)
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005726:	2b00      	cmp	r3, #0
 8005728:	d0f0      	beq.n	800570c <HAL_RCC_OscConfig+0x41c>
 800572a:	e045      	b.n	80057b8 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800572c:	4b27      	ldr	r3, [pc, #156]	; (80057cc <HAL_RCC_OscConfig+0x4dc>)
 800572e:	2200      	movs	r2, #0
 8005730:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005732:	f7fd fc5b 	bl	8002fec <HAL_GetTick>
 8005736:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005738:	e008      	b.n	800574c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800573a:	f7fd fc57 	bl	8002fec <HAL_GetTick>
 800573e:	4602      	mov	r2, r0
 8005740:	693b      	ldr	r3, [r7, #16]
 8005742:	1ad3      	subs	r3, r2, r3
 8005744:	2b02      	cmp	r3, #2
 8005746:	d901      	bls.n	800574c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8005748:	2303      	movs	r3, #3
 800574a:	e036      	b.n	80057ba <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800574c:	4b1e      	ldr	r3, [pc, #120]	; (80057c8 <HAL_RCC_OscConfig+0x4d8>)
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005754:	2b00      	cmp	r3, #0
 8005756:	d1f0      	bne.n	800573a <HAL_RCC_OscConfig+0x44a>
 8005758:	e02e      	b.n	80057b8 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	699b      	ldr	r3, [r3, #24]
 800575e:	2b01      	cmp	r3, #1
 8005760:	d101      	bne.n	8005766 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8005762:	2301      	movs	r3, #1
 8005764:	e029      	b.n	80057ba <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005766:	4b18      	ldr	r3, [pc, #96]	; (80057c8 <HAL_RCC_OscConfig+0x4d8>)
 8005768:	689b      	ldr	r3, [r3, #8]
 800576a:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	69db      	ldr	r3, [r3, #28]
 8005776:	429a      	cmp	r2, r3
 8005778:	d11c      	bne.n	80057b4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005784:	429a      	cmp	r2, r3
 8005786:	d115      	bne.n	80057b4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8005788:	68fa      	ldr	r2, [r7, #12]
 800578a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800578e:	4013      	ands	r3, r2
 8005790:	687a      	ldr	r2, [r7, #4]
 8005792:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005794:	4293      	cmp	r3, r2
 8005796:	d10d      	bne.n	80057b4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80057a2:	429a      	cmp	r2, r3
 80057a4:	d106      	bne.n	80057b4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80057b0:	429a      	cmp	r2, r3
 80057b2:	d001      	beq.n	80057b8 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 80057b4:	2301      	movs	r3, #1
 80057b6:	e000      	b.n	80057ba <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 80057b8:	2300      	movs	r3, #0
}
 80057ba:	4618      	mov	r0, r3
 80057bc:	3718      	adds	r7, #24
 80057be:	46bd      	mov	sp, r7
 80057c0:	bd80      	pop	{r7, pc}
 80057c2:	bf00      	nop
 80057c4:	40007000 	.word	0x40007000
 80057c8:	40023800 	.word	0x40023800
 80057cc:	42470060 	.word	0x42470060

080057d0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80057d0:	b580      	push	{r7, lr}
 80057d2:	b084      	sub	sp, #16
 80057d4:	af00      	add	r7, sp, #0
 80057d6:	6078      	str	r0, [r7, #4]
 80057d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d101      	bne.n	80057e4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80057e0:	2301      	movs	r3, #1
 80057e2:	e0cc      	b.n	800597e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80057e4:	4b68      	ldr	r3, [pc, #416]	; (8005988 <HAL_RCC_ClockConfig+0x1b8>)
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	f003 030f 	and.w	r3, r3, #15
 80057ec:	683a      	ldr	r2, [r7, #0]
 80057ee:	429a      	cmp	r2, r3
 80057f0:	d90c      	bls.n	800580c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80057f2:	4b65      	ldr	r3, [pc, #404]	; (8005988 <HAL_RCC_ClockConfig+0x1b8>)
 80057f4:	683a      	ldr	r2, [r7, #0]
 80057f6:	b2d2      	uxtb	r2, r2
 80057f8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80057fa:	4b63      	ldr	r3, [pc, #396]	; (8005988 <HAL_RCC_ClockConfig+0x1b8>)
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	f003 030f 	and.w	r3, r3, #15
 8005802:	683a      	ldr	r2, [r7, #0]
 8005804:	429a      	cmp	r2, r3
 8005806:	d001      	beq.n	800580c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005808:	2301      	movs	r3, #1
 800580a:	e0b8      	b.n	800597e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	f003 0302 	and.w	r3, r3, #2
 8005814:	2b00      	cmp	r3, #0
 8005816:	d020      	beq.n	800585a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	f003 0304 	and.w	r3, r3, #4
 8005820:	2b00      	cmp	r3, #0
 8005822:	d005      	beq.n	8005830 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005824:	4b59      	ldr	r3, [pc, #356]	; (800598c <HAL_RCC_ClockConfig+0x1bc>)
 8005826:	689b      	ldr	r3, [r3, #8]
 8005828:	4a58      	ldr	r2, [pc, #352]	; (800598c <HAL_RCC_ClockConfig+0x1bc>)
 800582a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800582e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	f003 0308 	and.w	r3, r3, #8
 8005838:	2b00      	cmp	r3, #0
 800583a:	d005      	beq.n	8005848 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800583c:	4b53      	ldr	r3, [pc, #332]	; (800598c <HAL_RCC_ClockConfig+0x1bc>)
 800583e:	689b      	ldr	r3, [r3, #8]
 8005840:	4a52      	ldr	r2, [pc, #328]	; (800598c <HAL_RCC_ClockConfig+0x1bc>)
 8005842:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005846:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005848:	4b50      	ldr	r3, [pc, #320]	; (800598c <HAL_RCC_ClockConfig+0x1bc>)
 800584a:	689b      	ldr	r3, [r3, #8]
 800584c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	689b      	ldr	r3, [r3, #8]
 8005854:	494d      	ldr	r1, [pc, #308]	; (800598c <HAL_RCC_ClockConfig+0x1bc>)
 8005856:	4313      	orrs	r3, r2
 8005858:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	f003 0301 	and.w	r3, r3, #1
 8005862:	2b00      	cmp	r3, #0
 8005864:	d044      	beq.n	80058f0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	685b      	ldr	r3, [r3, #4]
 800586a:	2b01      	cmp	r3, #1
 800586c:	d107      	bne.n	800587e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800586e:	4b47      	ldr	r3, [pc, #284]	; (800598c <HAL_RCC_ClockConfig+0x1bc>)
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005876:	2b00      	cmp	r3, #0
 8005878:	d119      	bne.n	80058ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800587a:	2301      	movs	r3, #1
 800587c:	e07f      	b.n	800597e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	685b      	ldr	r3, [r3, #4]
 8005882:	2b02      	cmp	r3, #2
 8005884:	d003      	beq.n	800588e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800588a:	2b03      	cmp	r3, #3
 800588c:	d107      	bne.n	800589e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800588e:	4b3f      	ldr	r3, [pc, #252]	; (800598c <HAL_RCC_ClockConfig+0x1bc>)
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005896:	2b00      	cmp	r3, #0
 8005898:	d109      	bne.n	80058ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800589a:	2301      	movs	r3, #1
 800589c:	e06f      	b.n	800597e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800589e:	4b3b      	ldr	r3, [pc, #236]	; (800598c <HAL_RCC_ClockConfig+0x1bc>)
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	f003 0302 	and.w	r3, r3, #2
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d101      	bne.n	80058ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80058aa:	2301      	movs	r3, #1
 80058ac:	e067      	b.n	800597e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80058ae:	4b37      	ldr	r3, [pc, #220]	; (800598c <HAL_RCC_ClockConfig+0x1bc>)
 80058b0:	689b      	ldr	r3, [r3, #8]
 80058b2:	f023 0203 	bic.w	r2, r3, #3
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	685b      	ldr	r3, [r3, #4]
 80058ba:	4934      	ldr	r1, [pc, #208]	; (800598c <HAL_RCC_ClockConfig+0x1bc>)
 80058bc:	4313      	orrs	r3, r2
 80058be:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80058c0:	f7fd fb94 	bl	8002fec <HAL_GetTick>
 80058c4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80058c6:	e00a      	b.n	80058de <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80058c8:	f7fd fb90 	bl	8002fec <HAL_GetTick>
 80058cc:	4602      	mov	r2, r0
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	1ad3      	subs	r3, r2, r3
 80058d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80058d6:	4293      	cmp	r3, r2
 80058d8:	d901      	bls.n	80058de <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80058da:	2303      	movs	r3, #3
 80058dc:	e04f      	b.n	800597e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80058de:	4b2b      	ldr	r3, [pc, #172]	; (800598c <HAL_RCC_ClockConfig+0x1bc>)
 80058e0:	689b      	ldr	r3, [r3, #8]
 80058e2:	f003 020c 	and.w	r2, r3, #12
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	685b      	ldr	r3, [r3, #4]
 80058ea:	009b      	lsls	r3, r3, #2
 80058ec:	429a      	cmp	r2, r3
 80058ee:	d1eb      	bne.n	80058c8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80058f0:	4b25      	ldr	r3, [pc, #148]	; (8005988 <HAL_RCC_ClockConfig+0x1b8>)
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	f003 030f 	and.w	r3, r3, #15
 80058f8:	683a      	ldr	r2, [r7, #0]
 80058fa:	429a      	cmp	r2, r3
 80058fc:	d20c      	bcs.n	8005918 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80058fe:	4b22      	ldr	r3, [pc, #136]	; (8005988 <HAL_RCC_ClockConfig+0x1b8>)
 8005900:	683a      	ldr	r2, [r7, #0]
 8005902:	b2d2      	uxtb	r2, r2
 8005904:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005906:	4b20      	ldr	r3, [pc, #128]	; (8005988 <HAL_RCC_ClockConfig+0x1b8>)
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	f003 030f 	and.w	r3, r3, #15
 800590e:	683a      	ldr	r2, [r7, #0]
 8005910:	429a      	cmp	r2, r3
 8005912:	d001      	beq.n	8005918 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005914:	2301      	movs	r3, #1
 8005916:	e032      	b.n	800597e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	f003 0304 	and.w	r3, r3, #4
 8005920:	2b00      	cmp	r3, #0
 8005922:	d008      	beq.n	8005936 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005924:	4b19      	ldr	r3, [pc, #100]	; (800598c <HAL_RCC_ClockConfig+0x1bc>)
 8005926:	689b      	ldr	r3, [r3, #8]
 8005928:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	68db      	ldr	r3, [r3, #12]
 8005930:	4916      	ldr	r1, [pc, #88]	; (800598c <HAL_RCC_ClockConfig+0x1bc>)
 8005932:	4313      	orrs	r3, r2
 8005934:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	f003 0308 	and.w	r3, r3, #8
 800593e:	2b00      	cmp	r3, #0
 8005940:	d009      	beq.n	8005956 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005942:	4b12      	ldr	r3, [pc, #72]	; (800598c <HAL_RCC_ClockConfig+0x1bc>)
 8005944:	689b      	ldr	r3, [r3, #8]
 8005946:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	691b      	ldr	r3, [r3, #16]
 800594e:	00db      	lsls	r3, r3, #3
 8005950:	490e      	ldr	r1, [pc, #56]	; (800598c <HAL_RCC_ClockConfig+0x1bc>)
 8005952:	4313      	orrs	r3, r2
 8005954:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005956:	f000 f821 	bl	800599c <HAL_RCC_GetSysClockFreq>
 800595a:	4601      	mov	r1, r0
 800595c:	4b0b      	ldr	r3, [pc, #44]	; (800598c <HAL_RCC_ClockConfig+0x1bc>)
 800595e:	689b      	ldr	r3, [r3, #8]
 8005960:	091b      	lsrs	r3, r3, #4
 8005962:	f003 030f 	and.w	r3, r3, #15
 8005966:	4a0a      	ldr	r2, [pc, #40]	; (8005990 <HAL_RCC_ClockConfig+0x1c0>)
 8005968:	5cd3      	ldrb	r3, [r2, r3]
 800596a:	fa21 f303 	lsr.w	r3, r1, r3
 800596e:	4a09      	ldr	r2, [pc, #36]	; (8005994 <HAL_RCC_ClockConfig+0x1c4>)
 8005970:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005972:	4b09      	ldr	r3, [pc, #36]	; (8005998 <HAL_RCC_ClockConfig+0x1c8>)
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	4618      	mov	r0, r3
 8005978:	f7fd faf4 	bl	8002f64 <HAL_InitTick>

  return HAL_OK;
 800597c:	2300      	movs	r3, #0
}
 800597e:	4618      	mov	r0, r3
 8005980:	3710      	adds	r7, #16
 8005982:	46bd      	mov	sp, r7
 8005984:	bd80      	pop	{r7, pc}
 8005986:	bf00      	nop
 8005988:	40023c00 	.word	0x40023c00
 800598c:	40023800 	.word	0x40023800
 8005990:	08011fdc 	.word	0x08011fdc
 8005994:	20000008 	.word	0x20000008
 8005998:	2000000c 	.word	0x2000000c

0800599c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800599c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800599e:	b085      	sub	sp, #20
 80059a0:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80059a2:	2300      	movs	r3, #0
 80059a4:	607b      	str	r3, [r7, #4]
 80059a6:	2300      	movs	r3, #0
 80059a8:	60fb      	str	r3, [r7, #12]
 80059aa:	2300      	movs	r3, #0
 80059ac:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80059ae:	2300      	movs	r3, #0
 80059b0:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80059b2:	4b50      	ldr	r3, [pc, #320]	; (8005af4 <HAL_RCC_GetSysClockFreq+0x158>)
 80059b4:	689b      	ldr	r3, [r3, #8]
 80059b6:	f003 030c 	and.w	r3, r3, #12
 80059ba:	2b04      	cmp	r3, #4
 80059bc:	d007      	beq.n	80059ce <HAL_RCC_GetSysClockFreq+0x32>
 80059be:	2b08      	cmp	r3, #8
 80059c0:	d008      	beq.n	80059d4 <HAL_RCC_GetSysClockFreq+0x38>
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	f040 808d 	bne.w	8005ae2 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80059c8:	4b4b      	ldr	r3, [pc, #300]	; (8005af8 <HAL_RCC_GetSysClockFreq+0x15c>)
 80059ca:	60bb      	str	r3, [r7, #8]
       break;
 80059cc:	e08c      	b.n	8005ae8 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80059ce:	4b4b      	ldr	r3, [pc, #300]	; (8005afc <HAL_RCC_GetSysClockFreq+0x160>)
 80059d0:	60bb      	str	r3, [r7, #8]
      break;
 80059d2:	e089      	b.n	8005ae8 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80059d4:	4b47      	ldr	r3, [pc, #284]	; (8005af4 <HAL_RCC_GetSysClockFreq+0x158>)
 80059d6:	685b      	ldr	r3, [r3, #4]
 80059d8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80059dc:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80059de:	4b45      	ldr	r3, [pc, #276]	; (8005af4 <HAL_RCC_GetSysClockFreq+0x158>)
 80059e0:	685b      	ldr	r3, [r3, #4]
 80059e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d023      	beq.n	8005a32 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80059ea:	4b42      	ldr	r3, [pc, #264]	; (8005af4 <HAL_RCC_GetSysClockFreq+0x158>)
 80059ec:	685b      	ldr	r3, [r3, #4]
 80059ee:	099b      	lsrs	r3, r3, #6
 80059f0:	f04f 0400 	mov.w	r4, #0
 80059f4:	f240 11ff 	movw	r1, #511	; 0x1ff
 80059f8:	f04f 0200 	mov.w	r2, #0
 80059fc:	ea03 0501 	and.w	r5, r3, r1
 8005a00:	ea04 0602 	and.w	r6, r4, r2
 8005a04:	4a3d      	ldr	r2, [pc, #244]	; (8005afc <HAL_RCC_GetSysClockFreq+0x160>)
 8005a06:	fb02 f106 	mul.w	r1, r2, r6
 8005a0a:	2200      	movs	r2, #0
 8005a0c:	fb02 f205 	mul.w	r2, r2, r5
 8005a10:	440a      	add	r2, r1
 8005a12:	493a      	ldr	r1, [pc, #232]	; (8005afc <HAL_RCC_GetSysClockFreq+0x160>)
 8005a14:	fba5 0101 	umull	r0, r1, r5, r1
 8005a18:	1853      	adds	r3, r2, r1
 8005a1a:	4619      	mov	r1, r3
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	f04f 0400 	mov.w	r4, #0
 8005a22:	461a      	mov	r2, r3
 8005a24:	4623      	mov	r3, r4
 8005a26:	f7fb f92f 	bl	8000c88 <__aeabi_uldivmod>
 8005a2a:	4603      	mov	r3, r0
 8005a2c:	460c      	mov	r4, r1
 8005a2e:	60fb      	str	r3, [r7, #12]
 8005a30:	e049      	b.n	8005ac6 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005a32:	4b30      	ldr	r3, [pc, #192]	; (8005af4 <HAL_RCC_GetSysClockFreq+0x158>)
 8005a34:	685b      	ldr	r3, [r3, #4]
 8005a36:	099b      	lsrs	r3, r3, #6
 8005a38:	f04f 0400 	mov.w	r4, #0
 8005a3c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8005a40:	f04f 0200 	mov.w	r2, #0
 8005a44:	ea03 0501 	and.w	r5, r3, r1
 8005a48:	ea04 0602 	and.w	r6, r4, r2
 8005a4c:	4629      	mov	r1, r5
 8005a4e:	4632      	mov	r2, r6
 8005a50:	f04f 0300 	mov.w	r3, #0
 8005a54:	f04f 0400 	mov.w	r4, #0
 8005a58:	0154      	lsls	r4, r2, #5
 8005a5a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8005a5e:	014b      	lsls	r3, r1, #5
 8005a60:	4619      	mov	r1, r3
 8005a62:	4622      	mov	r2, r4
 8005a64:	1b49      	subs	r1, r1, r5
 8005a66:	eb62 0206 	sbc.w	r2, r2, r6
 8005a6a:	f04f 0300 	mov.w	r3, #0
 8005a6e:	f04f 0400 	mov.w	r4, #0
 8005a72:	0194      	lsls	r4, r2, #6
 8005a74:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8005a78:	018b      	lsls	r3, r1, #6
 8005a7a:	1a5b      	subs	r3, r3, r1
 8005a7c:	eb64 0402 	sbc.w	r4, r4, r2
 8005a80:	f04f 0100 	mov.w	r1, #0
 8005a84:	f04f 0200 	mov.w	r2, #0
 8005a88:	00e2      	lsls	r2, r4, #3
 8005a8a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8005a8e:	00d9      	lsls	r1, r3, #3
 8005a90:	460b      	mov	r3, r1
 8005a92:	4614      	mov	r4, r2
 8005a94:	195b      	adds	r3, r3, r5
 8005a96:	eb44 0406 	adc.w	r4, r4, r6
 8005a9a:	f04f 0100 	mov.w	r1, #0
 8005a9e:	f04f 0200 	mov.w	r2, #0
 8005aa2:	02a2      	lsls	r2, r4, #10
 8005aa4:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8005aa8:	0299      	lsls	r1, r3, #10
 8005aaa:	460b      	mov	r3, r1
 8005aac:	4614      	mov	r4, r2
 8005aae:	4618      	mov	r0, r3
 8005ab0:	4621      	mov	r1, r4
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	f04f 0400 	mov.w	r4, #0
 8005ab8:	461a      	mov	r2, r3
 8005aba:	4623      	mov	r3, r4
 8005abc:	f7fb f8e4 	bl	8000c88 <__aeabi_uldivmod>
 8005ac0:	4603      	mov	r3, r0
 8005ac2:	460c      	mov	r4, r1
 8005ac4:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005ac6:	4b0b      	ldr	r3, [pc, #44]	; (8005af4 <HAL_RCC_GetSysClockFreq+0x158>)
 8005ac8:	685b      	ldr	r3, [r3, #4]
 8005aca:	0c1b      	lsrs	r3, r3, #16
 8005acc:	f003 0303 	and.w	r3, r3, #3
 8005ad0:	3301      	adds	r3, #1
 8005ad2:	005b      	lsls	r3, r3, #1
 8005ad4:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8005ad6:	68fa      	ldr	r2, [r7, #12]
 8005ad8:	683b      	ldr	r3, [r7, #0]
 8005ada:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ade:	60bb      	str	r3, [r7, #8]
      break;
 8005ae0:	e002      	b.n	8005ae8 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005ae2:	4b05      	ldr	r3, [pc, #20]	; (8005af8 <HAL_RCC_GetSysClockFreq+0x15c>)
 8005ae4:	60bb      	str	r3, [r7, #8]
      break;
 8005ae6:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005ae8:	68bb      	ldr	r3, [r7, #8]
}
 8005aea:	4618      	mov	r0, r3
 8005aec:	3714      	adds	r7, #20
 8005aee:	46bd      	mov	sp, r7
 8005af0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005af2:	bf00      	nop
 8005af4:	40023800 	.word	0x40023800
 8005af8:	00f42400 	.word	0x00f42400
 8005afc:	00b71b00 	.word	0x00b71b00

08005b00 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005b00:	b480      	push	{r7}
 8005b02:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005b04:	4b03      	ldr	r3, [pc, #12]	; (8005b14 <HAL_RCC_GetHCLKFreq+0x14>)
 8005b06:	681b      	ldr	r3, [r3, #0]
}
 8005b08:	4618      	mov	r0, r3
 8005b0a:	46bd      	mov	sp, r7
 8005b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b10:	4770      	bx	lr
 8005b12:	bf00      	nop
 8005b14:	20000008 	.word	0x20000008

08005b18 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005b18:	b580      	push	{r7, lr}
 8005b1a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005b1c:	f7ff fff0 	bl	8005b00 <HAL_RCC_GetHCLKFreq>
 8005b20:	4601      	mov	r1, r0
 8005b22:	4b05      	ldr	r3, [pc, #20]	; (8005b38 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005b24:	689b      	ldr	r3, [r3, #8]
 8005b26:	0a9b      	lsrs	r3, r3, #10
 8005b28:	f003 0307 	and.w	r3, r3, #7
 8005b2c:	4a03      	ldr	r2, [pc, #12]	; (8005b3c <HAL_RCC_GetPCLK1Freq+0x24>)
 8005b2e:	5cd3      	ldrb	r3, [r2, r3]
 8005b30:	fa21 f303 	lsr.w	r3, r1, r3
}
 8005b34:	4618      	mov	r0, r3
 8005b36:	bd80      	pop	{r7, pc}
 8005b38:	40023800 	.word	0x40023800
 8005b3c:	08011fec 	.word	0x08011fec

08005b40 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005b40:	b580      	push	{r7, lr}
 8005b42:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005b44:	f7ff ffdc 	bl	8005b00 <HAL_RCC_GetHCLKFreq>
 8005b48:	4601      	mov	r1, r0
 8005b4a:	4b05      	ldr	r3, [pc, #20]	; (8005b60 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005b4c:	689b      	ldr	r3, [r3, #8]
 8005b4e:	0b5b      	lsrs	r3, r3, #13
 8005b50:	f003 0307 	and.w	r3, r3, #7
 8005b54:	4a03      	ldr	r2, [pc, #12]	; (8005b64 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005b56:	5cd3      	ldrb	r3, [r2, r3]
 8005b58:	fa21 f303 	lsr.w	r3, r1, r3
}
 8005b5c:	4618      	mov	r0, r3
 8005b5e:	bd80      	pop	{r7, pc}
 8005b60:	40023800 	.word	0x40023800
 8005b64:	08011fec 	.word	0x08011fec

08005b68 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005b68:	b580      	push	{r7, lr}
 8005b6a:	b086      	sub	sp, #24
 8005b6c:	af00      	add	r7, sp, #0
 8005b6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005b70:	2300      	movs	r3, #0
 8005b72:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8005b74:	2300      	movs	r3, #0
 8005b76:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	f003 0301 	and.w	r3, r3, #1
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d105      	bne.n	8005b90 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d035      	beq.n	8005bfc <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005b90:	4b62      	ldr	r3, [pc, #392]	; (8005d1c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8005b92:	2200      	movs	r2, #0
 8005b94:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005b96:	f7fd fa29 	bl	8002fec <HAL_GetTick>
 8005b9a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005b9c:	e008      	b.n	8005bb0 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005b9e:	f7fd fa25 	bl	8002fec <HAL_GetTick>
 8005ba2:	4602      	mov	r2, r0
 8005ba4:	697b      	ldr	r3, [r7, #20]
 8005ba6:	1ad3      	subs	r3, r2, r3
 8005ba8:	2b02      	cmp	r3, #2
 8005baa:	d901      	bls.n	8005bb0 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005bac:	2303      	movs	r3, #3
 8005bae:	e0b0      	b.n	8005d12 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005bb0:	4b5b      	ldr	r3, [pc, #364]	; (8005d20 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d1f0      	bne.n	8005b9e <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	685b      	ldr	r3, [r3, #4]
 8005bc0:	019a      	lsls	r2, r3, #6
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	689b      	ldr	r3, [r3, #8]
 8005bc6:	071b      	lsls	r3, r3, #28
 8005bc8:	4955      	ldr	r1, [pc, #340]	; (8005d20 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005bca:	4313      	orrs	r3, r2
 8005bcc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005bd0:	4b52      	ldr	r3, [pc, #328]	; (8005d1c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8005bd2:	2201      	movs	r2, #1
 8005bd4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005bd6:	f7fd fa09 	bl	8002fec <HAL_GetTick>
 8005bda:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005bdc:	e008      	b.n	8005bf0 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005bde:	f7fd fa05 	bl	8002fec <HAL_GetTick>
 8005be2:	4602      	mov	r2, r0
 8005be4:	697b      	ldr	r3, [r7, #20]
 8005be6:	1ad3      	subs	r3, r2, r3
 8005be8:	2b02      	cmp	r3, #2
 8005bea:	d901      	bls.n	8005bf0 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005bec:	2303      	movs	r3, #3
 8005bee:	e090      	b.n	8005d12 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005bf0:	4b4b      	ldr	r3, [pc, #300]	; (8005d20 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d0f0      	beq.n	8005bde <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	f003 0302 	and.w	r3, r3, #2
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	f000 8083 	beq.w	8005d10 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005c0a:	2300      	movs	r3, #0
 8005c0c:	60fb      	str	r3, [r7, #12]
 8005c0e:	4b44      	ldr	r3, [pc, #272]	; (8005d20 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005c10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c12:	4a43      	ldr	r2, [pc, #268]	; (8005d20 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005c14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005c18:	6413      	str	r3, [r2, #64]	; 0x40
 8005c1a:	4b41      	ldr	r3, [pc, #260]	; (8005d20 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005c1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005c22:	60fb      	str	r3, [r7, #12]
 8005c24:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8005c26:	4b3f      	ldr	r3, [pc, #252]	; (8005d24 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	4a3e      	ldr	r2, [pc, #248]	; (8005d24 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005c2c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005c30:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005c32:	f7fd f9db 	bl	8002fec <HAL_GetTick>
 8005c36:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005c38:	e008      	b.n	8005c4c <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8005c3a:	f7fd f9d7 	bl	8002fec <HAL_GetTick>
 8005c3e:	4602      	mov	r2, r0
 8005c40:	697b      	ldr	r3, [r7, #20]
 8005c42:	1ad3      	subs	r3, r2, r3
 8005c44:	2b02      	cmp	r3, #2
 8005c46:	d901      	bls.n	8005c4c <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8005c48:	2303      	movs	r3, #3
 8005c4a:	e062      	b.n	8005d12 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005c4c:	4b35      	ldr	r3, [pc, #212]	; (8005d24 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d0f0      	beq.n	8005c3a <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005c58:	4b31      	ldr	r3, [pc, #196]	; (8005d20 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005c5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c5c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005c60:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005c62:	693b      	ldr	r3, [r7, #16]
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d02f      	beq.n	8005cc8 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	68db      	ldr	r3, [r3, #12]
 8005c6c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005c70:	693a      	ldr	r2, [r7, #16]
 8005c72:	429a      	cmp	r2, r3
 8005c74:	d028      	beq.n	8005cc8 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005c76:	4b2a      	ldr	r3, [pc, #168]	; (8005d20 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005c78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c7a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005c7e:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005c80:	4b29      	ldr	r3, [pc, #164]	; (8005d28 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8005c82:	2201      	movs	r2, #1
 8005c84:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005c86:	4b28      	ldr	r3, [pc, #160]	; (8005d28 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8005c88:	2200      	movs	r2, #0
 8005c8a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8005c8c:	4a24      	ldr	r2, [pc, #144]	; (8005d20 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005c8e:	693b      	ldr	r3, [r7, #16]
 8005c90:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005c92:	4b23      	ldr	r3, [pc, #140]	; (8005d20 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005c94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c96:	f003 0301 	and.w	r3, r3, #1
 8005c9a:	2b01      	cmp	r3, #1
 8005c9c:	d114      	bne.n	8005cc8 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8005c9e:	f7fd f9a5 	bl	8002fec <HAL_GetTick>
 8005ca2:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005ca4:	e00a      	b.n	8005cbc <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005ca6:	f7fd f9a1 	bl	8002fec <HAL_GetTick>
 8005caa:	4602      	mov	r2, r0
 8005cac:	697b      	ldr	r3, [r7, #20]
 8005cae:	1ad3      	subs	r3, r2, r3
 8005cb0:	f241 3288 	movw	r2, #5000	; 0x1388
 8005cb4:	4293      	cmp	r3, r2
 8005cb6:	d901      	bls.n	8005cbc <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8005cb8:	2303      	movs	r3, #3
 8005cba:	e02a      	b.n	8005d12 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005cbc:	4b18      	ldr	r3, [pc, #96]	; (8005d20 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005cbe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005cc0:	f003 0302 	and.w	r3, r3, #2
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d0ee      	beq.n	8005ca6 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	68db      	ldr	r3, [r3, #12]
 8005ccc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005cd0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005cd4:	d10d      	bne.n	8005cf2 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8005cd6:	4b12      	ldr	r3, [pc, #72]	; (8005d20 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005cd8:	689b      	ldr	r3, [r3, #8]
 8005cda:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	68db      	ldr	r3, [r3, #12]
 8005ce2:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8005ce6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005cea:	490d      	ldr	r1, [pc, #52]	; (8005d20 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005cec:	4313      	orrs	r3, r2
 8005cee:	608b      	str	r3, [r1, #8]
 8005cf0:	e005      	b.n	8005cfe <HAL_RCCEx_PeriphCLKConfig+0x196>
 8005cf2:	4b0b      	ldr	r3, [pc, #44]	; (8005d20 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005cf4:	689b      	ldr	r3, [r3, #8]
 8005cf6:	4a0a      	ldr	r2, [pc, #40]	; (8005d20 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005cf8:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8005cfc:	6093      	str	r3, [r2, #8]
 8005cfe:	4b08      	ldr	r3, [pc, #32]	; (8005d20 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005d00:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	68db      	ldr	r3, [r3, #12]
 8005d06:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005d0a:	4905      	ldr	r1, [pc, #20]	; (8005d20 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005d0c:	4313      	orrs	r3, r2
 8005d0e:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8005d10:	2300      	movs	r3, #0
}
 8005d12:	4618      	mov	r0, r3
 8005d14:	3718      	adds	r7, #24
 8005d16:	46bd      	mov	sp, r7
 8005d18:	bd80      	pop	{r7, pc}
 8005d1a:	bf00      	nop
 8005d1c:	42470068 	.word	0x42470068
 8005d20:	40023800 	.word	0x40023800
 8005d24:	40007000 	.word	0x40007000
 8005d28:	42470e40 	.word	0x42470e40

08005d2c <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8005d2c:	b580      	push	{r7, lr}
 8005d2e:	b082      	sub	sp, #8
 8005d30:	af00      	add	r7, sp, #0
 8005d32:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d101      	bne.n	8005d3e <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 8005d3a:	2301      	movs	r3, #1
 8005d3c:	e083      	b.n	8005e46 <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	7f5b      	ldrb	r3, [r3, #29]
 8005d42:	b2db      	uxtb	r3, r3
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d105      	bne.n	8005d54 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	2200      	movs	r2, #0
 8005d4c:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8005d4e:	6878      	ldr	r0, [r7, #4]
 8005d50:	f7fc fdd0 	bl	80028f4 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	2202      	movs	r2, #2
 8005d58:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	22ca      	movs	r2, #202	; 0xca
 8005d60:	625a      	str	r2, [r3, #36]	; 0x24
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	2253      	movs	r2, #83	; 0x53
 8005d68:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8005d6a:	6878      	ldr	r0, [r7, #4]
 8005d6c:	f000 f9fb 	bl	8006166 <RTC_EnterInitMode>
 8005d70:	4603      	mov	r3, r0
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d008      	beq.n	8005d88 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	22ff      	movs	r2, #255	; 0xff
 8005d7c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	2204      	movs	r2, #4
 8005d82:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8005d84:	2301      	movs	r3, #1
 8005d86:	e05e      	b.n	8005e46 <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	689b      	ldr	r3, [r3, #8]
 8005d8e:	687a      	ldr	r2, [r7, #4]
 8005d90:	6812      	ldr	r2, [r2, #0]
 8005d92:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8005d96:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005d9a:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	6899      	ldr	r1, [r3, #8]
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	685a      	ldr	r2, [r3, #4]
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	691b      	ldr	r3, [r3, #16]
 8005daa:	431a      	orrs	r2, r3
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	695b      	ldr	r3, [r3, #20]
 8005db0:	431a      	orrs	r2, r3
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	430a      	orrs	r2, r1
 8005db8:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	687a      	ldr	r2, [r7, #4]
 8005dc0:	68d2      	ldr	r2, [r2, #12]
 8005dc2:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	6919      	ldr	r1, [r3, #16]
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	689b      	ldr	r3, [r3, #8]
 8005dce:	041a      	lsls	r2, r3, #16
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	430a      	orrs	r2, r1
 8005dd6:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	68da      	ldr	r2, [r3, #12]
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005de6:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	689b      	ldr	r3, [r3, #8]
 8005dee:	f003 0320 	and.w	r3, r3, #32
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d10e      	bne.n	8005e14 <HAL_RTC_Init+0xe8>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005df6:	6878      	ldr	r0, [r7, #4]
 8005df8:	f000 f98d 	bl	8006116 <HAL_RTC_WaitForSynchro>
 8005dfc:	4603      	mov	r3, r0
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d008      	beq.n	8005e14 <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	22ff      	movs	r2, #255	; 0xff
 8005e08:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	2204      	movs	r2, #4
 8005e0e:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 8005e10:	2301      	movs	r3, #1
 8005e12:	e018      	b.n	8005e46 <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005e22:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	699a      	ldr	r2, [r3, #24]
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	430a      	orrs	r2, r1
 8005e34:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	22ff      	movs	r2, #255	; 0xff
 8005e3c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	2201      	movs	r2, #1
 8005e42:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8005e44:	2300      	movs	r3, #0
  }
}
 8005e46:	4618      	mov	r0, r3
 8005e48:	3708      	adds	r7, #8
 8005e4a:	46bd      	mov	sp, r7
 8005e4c:	bd80      	pop	{r7, pc}

08005e4e <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8005e4e:	b590      	push	{r4, r7, lr}
 8005e50:	b087      	sub	sp, #28
 8005e52:	af00      	add	r7, sp, #0
 8005e54:	60f8      	str	r0, [r7, #12]
 8005e56:	60b9      	str	r1, [r7, #8]
 8005e58:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8005e5a:	2300      	movs	r3, #0
 8005e5c:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	7f1b      	ldrb	r3, [r3, #28]
 8005e62:	2b01      	cmp	r3, #1
 8005e64:	d101      	bne.n	8005e6a <HAL_RTC_SetTime+0x1c>
 8005e66:	2302      	movs	r3, #2
 8005e68:	e0aa      	b.n	8005fc0 <HAL_RTC_SetTime+0x172>
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	2201      	movs	r2, #1
 8005e6e:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	2202      	movs	r2, #2
 8005e74:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d126      	bne.n	8005eca <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	689b      	ldr	r3, [r3, #8]
 8005e82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d102      	bne.n	8005e90 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8005e8a:	68bb      	ldr	r3, [r7, #8]
 8005e8c:	2200      	movs	r2, #0
 8005e8e:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8005e90:	68bb      	ldr	r3, [r7, #8]
 8005e92:	781b      	ldrb	r3, [r3, #0]
 8005e94:	4618      	mov	r0, r3
 8005e96:	f000 f992 	bl	80061be <RTC_ByteToBcd2>
 8005e9a:	4603      	mov	r3, r0
 8005e9c:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8005e9e:	68bb      	ldr	r3, [r7, #8]
 8005ea0:	785b      	ldrb	r3, [r3, #1]
 8005ea2:	4618      	mov	r0, r3
 8005ea4:	f000 f98b 	bl	80061be <RTC_ByteToBcd2>
 8005ea8:	4603      	mov	r3, r0
 8005eaa:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8005eac:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8005eae:	68bb      	ldr	r3, [r7, #8]
 8005eb0:	789b      	ldrb	r3, [r3, #2]
 8005eb2:	4618      	mov	r0, r3
 8005eb4:	f000 f983 	bl	80061be <RTC_ByteToBcd2>
 8005eb8:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8005eba:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 8005ebe:	68bb      	ldr	r3, [r7, #8]
 8005ec0:	78db      	ldrb	r3, [r3, #3]
 8005ec2:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8005ec4:	4313      	orrs	r3, r2
 8005ec6:	617b      	str	r3, [r7, #20]
 8005ec8:	e018      	b.n	8005efc <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	689b      	ldr	r3, [r3, #8]
 8005ed0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d102      	bne.n	8005ede <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8005ed8:	68bb      	ldr	r3, [r7, #8]
 8005eda:	2200      	movs	r2, #0
 8005edc:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8005ede:	68bb      	ldr	r3, [r7, #8]
 8005ee0:	781b      	ldrb	r3, [r3, #0]
 8005ee2:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8005ee4:	68bb      	ldr	r3, [r7, #8]
 8005ee6:	785b      	ldrb	r3, [r3, #1]
 8005ee8:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8005eea:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 8005eec:	68ba      	ldr	r2, [r7, #8]
 8005eee:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8005ef0:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 8005ef2:	68bb      	ldr	r3, [r7, #8]
 8005ef4:	78db      	ldrb	r3, [r3, #3]
 8005ef6:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8005ef8:	4313      	orrs	r3, r2
 8005efa:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	22ca      	movs	r2, #202	; 0xca
 8005f02:	625a      	str	r2, [r3, #36]	; 0x24
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	2253      	movs	r2, #83	; 0x53
 8005f0a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8005f0c:	68f8      	ldr	r0, [r7, #12]
 8005f0e:	f000 f92a 	bl	8006166 <RTC_EnterInitMode>
 8005f12:	4603      	mov	r3, r0
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d00b      	beq.n	8005f30 <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	22ff      	movs	r2, #255	; 0xff
 8005f1e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	2204      	movs	r2, #4
 8005f24:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	2200      	movs	r2, #0
 8005f2a:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8005f2c:	2301      	movs	r3, #1
 8005f2e:	e047      	b.n	8005fc0 <HAL_RTC_SetTime+0x172>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	681a      	ldr	r2, [r3, #0]
 8005f34:	697b      	ldr	r3, [r7, #20]
 8005f36:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8005f3a:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8005f3e:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BCK;
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	689a      	ldr	r2, [r3, #8]
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005f4e:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	6899      	ldr	r1, [r3, #8]
 8005f56:	68bb      	ldr	r3, [r7, #8]
 8005f58:	68da      	ldr	r2, [r3, #12]
 8005f5a:	68bb      	ldr	r3, [r7, #8]
 8005f5c:	691b      	ldr	r3, [r3, #16]
 8005f5e:	431a      	orrs	r2, r3
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	430a      	orrs	r2, r1
 8005f66:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	68da      	ldr	r2, [r3, #12]
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005f76:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	689b      	ldr	r3, [r3, #8]
 8005f7e:	f003 0320 	and.w	r3, r3, #32
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d111      	bne.n	8005faa <HAL_RTC_SetTime+0x15c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005f86:	68f8      	ldr	r0, [r7, #12]
 8005f88:	f000 f8c5 	bl	8006116 <HAL_RTC_WaitForSynchro>
 8005f8c:	4603      	mov	r3, r0
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d00b      	beq.n	8005faa <HAL_RTC_SetTime+0x15c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	22ff      	movs	r2, #255	; 0xff
 8005f98:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	2204      	movs	r2, #4
 8005f9e:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	2200      	movs	r2, #0
 8005fa4:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8005fa6:	2301      	movs	r3, #1
 8005fa8:	e00a      	b.n	8005fc0 <HAL_RTC_SetTime+0x172>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	22ff      	movs	r2, #255	; 0xff
 8005fb0:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	2201      	movs	r2, #1
 8005fb6:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	2200      	movs	r2, #0
 8005fbc:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 8005fbe:	2300      	movs	r3, #0
  }
}
 8005fc0:	4618      	mov	r0, r3
 8005fc2:	371c      	adds	r7, #28
 8005fc4:	46bd      	mov	sp, r7
 8005fc6:	bd90      	pop	{r4, r7, pc}

08005fc8 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8005fc8:	b590      	push	{r4, r7, lr}
 8005fca:	b087      	sub	sp, #28
 8005fcc:	af00      	add	r7, sp, #0
 8005fce:	60f8      	str	r0, [r7, #12]
 8005fd0:	60b9      	str	r1, [r7, #8]
 8005fd2:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8005fd4:	2300      	movs	r3, #0
 8005fd6:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	7f1b      	ldrb	r3, [r3, #28]
 8005fdc:	2b01      	cmp	r3, #1
 8005fde:	d101      	bne.n	8005fe4 <HAL_RTC_SetDate+0x1c>
 8005fe0:	2302      	movs	r3, #2
 8005fe2:	e094      	b.n	800610e <HAL_RTC_SetDate+0x146>
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	2201      	movs	r2, #1
 8005fe8:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	2202      	movs	r2, #2
 8005fee:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d10e      	bne.n	8006014 <HAL_RTC_SetDate+0x4c>
 8005ff6:	68bb      	ldr	r3, [r7, #8]
 8005ff8:	785b      	ldrb	r3, [r3, #1]
 8005ffa:	f003 0310 	and.w	r3, r3, #16
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d008      	beq.n	8006014 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8006002:	68bb      	ldr	r3, [r7, #8]
 8006004:	785b      	ldrb	r3, [r3, #1]
 8006006:	f023 0310 	bic.w	r3, r3, #16
 800600a:	b2db      	uxtb	r3, r3
 800600c:	330a      	adds	r3, #10
 800600e:	b2da      	uxtb	r2, r3
 8006010:	68bb      	ldr	r3, [r7, #8]
 8006012:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	2b00      	cmp	r3, #0
 8006018:	d11c      	bne.n	8006054 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800601a:	68bb      	ldr	r3, [r7, #8]
 800601c:	78db      	ldrb	r3, [r3, #3]
 800601e:	4618      	mov	r0, r3
 8006020:	f000 f8cd 	bl	80061be <RTC_ByteToBcd2>
 8006024:	4603      	mov	r3, r0
 8006026:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8006028:	68bb      	ldr	r3, [r7, #8]
 800602a:	785b      	ldrb	r3, [r3, #1]
 800602c:	4618      	mov	r0, r3
 800602e:	f000 f8c6 	bl	80061be <RTC_ByteToBcd2>
 8006032:	4603      	mov	r3, r0
 8006034:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8006036:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8006038:	68bb      	ldr	r3, [r7, #8]
 800603a:	789b      	ldrb	r3, [r3, #2]
 800603c:	4618      	mov	r0, r3
 800603e:	f000 f8be 	bl	80061be <RTC_ByteToBcd2>
 8006042:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8006044:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13U));
 8006048:	68bb      	ldr	r3, [r7, #8]
 800604a:	781b      	ldrb	r3, [r3, #0]
 800604c:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800604e:	4313      	orrs	r3, r2
 8006050:	617b      	str	r3, [r7, #20]
 8006052:	e00e      	b.n	8006072 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8006054:	68bb      	ldr	r3, [r7, #8]
 8006056:	78db      	ldrb	r3, [r3, #3]
 8006058:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 800605a:	68bb      	ldr	r3, [r7, #8]
 800605c:	785b      	ldrb	r3, [r3, #1]
 800605e:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8006060:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 8006062:	68ba      	ldr	r2, [r7, #8]
 8006064:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 8006066:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 8006068:	68bb      	ldr	r3, [r7, #8]
 800606a:	781b      	ldrb	r3, [r3, #0]
 800606c:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 800606e:	4313      	orrs	r3, r2
 8006070:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	22ca      	movs	r2, #202	; 0xca
 8006078:	625a      	str	r2, [r3, #36]	; 0x24
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	2253      	movs	r2, #83	; 0x53
 8006080:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8006082:	68f8      	ldr	r0, [r7, #12]
 8006084:	f000 f86f 	bl	8006166 <RTC_EnterInitMode>
 8006088:	4603      	mov	r3, r0
 800608a:	2b00      	cmp	r3, #0
 800608c:	d00b      	beq.n	80060a6 <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	22ff      	movs	r2, #255	; 0xff
 8006094:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	2204      	movs	r2, #4
 800609a:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	2200      	movs	r2, #0
 80060a0:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 80060a2:	2301      	movs	r3, #1
 80060a4:	e033      	b.n	800610e <HAL_RTC_SetDate+0x146>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	681a      	ldr	r2, [r3, #0]
 80060aa:	697b      	ldr	r3, [r7, #20]
 80060ac:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80060b0:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80060b4:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	68da      	ldr	r2, [r3, #12]
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80060c4:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	689b      	ldr	r3, [r3, #8]
 80060cc:	f003 0320 	and.w	r3, r3, #32
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d111      	bne.n	80060f8 <HAL_RTC_SetDate+0x130>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80060d4:	68f8      	ldr	r0, [r7, #12]
 80060d6:	f000 f81e 	bl	8006116 <HAL_RTC_WaitForSynchro>
 80060da:	4603      	mov	r3, r0
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d00b      	beq.n	80060f8 <HAL_RTC_SetDate+0x130>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	22ff      	movs	r2, #255	; 0xff
 80060e6:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	2204      	movs	r2, #4
 80060ec:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	2200      	movs	r2, #0
 80060f2:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 80060f4:	2301      	movs	r3, #1
 80060f6:	e00a      	b.n	800610e <HAL_RTC_SetDate+0x146>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	22ff      	movs	r2, #255	; 0xff
 80060fe:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	2201      	movs	r2, #1
 8006104:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	2200      	movs	r2, #0
 800610a:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 800610c:	2300      	movs	r3, #0
  }
}
 800610e:	4618      	mov	r0, r3
 8006110:	371c      	adds	r7, #28
 8006112:	46bd      	mov	sp, r7
 8006114:	bd90      	pop	{r4, r7, pc}

08006116 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8006116:	b580      	push	{r7, lr}
 8006118:	b084      	sub	sp, #16
 800611a:	af00      	add	r7, sp, #0
 800611c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800611e:	2300      	movs	r3, #0
 8006120:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	68da      	ldr	r2, [r3, #12]
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006130:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006132:	f7fc ff5b 	bl	8002fec <HAL_GetTick>
 8006136:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8006138:	e009      	b.n	800614e <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800613a:	f7fc ff57 	bl	8002fec <HAL_GetTick>
 800613e:	4602      	mov	r2, r0
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	1ad3      	subs	r3, r2, r3
 8006144:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006148:	d901      	bls.n	800614e <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 800614a:	2303      	movs	r3, #3
 800614c:	e007      	b.n	800615e <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	68db      	ldr	r3, [r3, #12]
 8006154:	f003 0320 	and.w	r3, r3, #32
 8006158:	2b00      	cmp	r3, #0
 800615a:	d0ee      	beq.n	800613a <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 800615c:	2300      	movs	r3, #0
}
 800615e:	4618      	mov	r0, r3
 8006160:	3710      	adds	r7, #16
 8006162:	46bd      	mov	sp, r7
 8006164:	bd80      	pop	{r7, pc}

08006166 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8006166:	b580      	push	{r7, lr}
 8006168:	b084      	sub	sp, #16
 800616a:	af00      	add	r7, sp, #0
 800616c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800616e:	2300      	movs	r3, #0
 8006170:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	68db      	ldr	r3, [r3, #12]
 8006178:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800617c:	2b00      	cmp	r3, #0
 800617e:	d119      	bne.n	80061b4 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	f04f 32ff 	mov.w	r2, #4294967295
 8006188:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800618a:	f7fc ff2f 	bl	8002fec <HAL_GetTick>
 800618e:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8006190:	e009      	b.n	80061a6 <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8006192:	f7fc ff2b 	bl	8002fec <HAL_GetTick>
 8006196:	4602      	mov	r2, r0
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	1ad3      	subs	r3, r2, r3
 800619c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80061a0:	d901      	bls.n	80061a6 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 80061a2:	2303      	movs	r3, #3
 80061a4:	e007      	b.n	80061b6 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	68db      	ldr	r3, [r3, #12]
 80061ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d0ee      	beq.n	8006192 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 80061b4:	2300      	movs	r3, #0
}
 80061b6:	4618      	mov	r0, r3
 80061b8:	3710      	adds	r7, #16
 80061ba:	46bd      	mov	sp, r7
 80061bc:	bd80      	pop	{r7, pc}

080061be <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 80061be:	b480      	push	{r7}
 80061c0:	b085      	sub	sp, #20
 80061c2:	af00      	add	r7, sp, #0
 80061c4:	4603      	mov	r3, r0
 80061c6:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 80061c8:	2300      	movs	r3, #0
 80061ca:	60fb      	str	r3, [r7, #12]

  while(Value >= 10U)
 80061cc:	e005      	b.n	80061da <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	3301      	adds	r3, #1
 80061d2:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 80061d4:	79fb      	ldrb	r3, [r7, #7]
 80061d6:	3b0a      	subs	r3, #10
 80061d8:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10U)
 80061da:	79fb      	ldrb	r3, [r7, #7]
 80061dc:	2b09      	cmp	r3, #9
 80061de:	d8f6      	bhi.n	80061ce <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Value);
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	b2db      	uxtb	r3, r3
 80061e4:	011b      	lsls	r3, r3, #4
 80061e6:	b2da      	uxtb	r2, r3
 80061e8:	79fb      	ldrb	r3, [r7, #7]
 80061ea:	4313      	orrs	r3, r2
 80061ec:	b2db      	uxtb	r3, r3
}
 80061ee:	4618      	mov	r0, r3
 80061f0:	3714      	adds	r7, #20
 80061f2:	46bd      	mov	sp, r7
 80061f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061f8:	4770      	bx	lr

080061fa <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 80061fa:	b580      	push	{r7, lr}
 80061fc:	b082      	sub	sp, #8
 80061fe:	af00      	add	r7, sp, #0
 8006200:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	2b00      	cmp	r3, #0
 8006206:	d101      	bne.n	800620c <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8006208:	2301      	movs	r3, #1
 800620a:	e022      	b.n	8006252 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006212:	b2db      	uxtb	r3, r3
 8006214:	2b00      	cmp	r3, #0
 8006216:	d105      	bne.n	8006224 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	2200      	movs	r2, #0
 800621c:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800621e:	6878      	ldr	r0, [r7, #4]
 8006220:	f7fc fb7e 	bl	8002920 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	2203      	movs	r2, #3
 8006228:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800622c:	6878      	ldr	r0, [r7, #4]
 800622e:	f000 f815 	bl	800625c <HAL_SD_InitCard>
 8006232:	4603      	mov	r3, r0
 8006234:	2b00      	cmp	r3, #0
 8006236:	d001      	beq.n	800623c <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8006238:	2301      	movs	r3, #1
 800623a:	e00a      	b.n	8006252 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	2200      	movs	r2, #0
 8006240:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	2200      	movs	r2, #0
 8006246:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	2201      	movs	r2, #1
 800624c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8006250:	2300      	movs	r3, #0
}
 8006252:	4618      	mov	r0, r3
 8006254:	3708      	adds	r7, #8
 8006256:	46bd      	mov	sp, r7
 8006258:	bd80      	pop	{r7, pc}
	...

0800625c <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800625c:	b5b0      	push	{r4, r5, r7, lr}
 800625e:	b08e      	sub	sp, #56	; 0x38
 8006260:	af04      	add	r7, sp, #16
 8006262:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8006264:	2300      	movs	r3, #0
 8006266:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 8006268:	2300      	movs	r3, #0
 800626a:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 800626c:	2300      	movs	r3, #0
 800626e:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 8006270:	2300      	movs	r3, #0
 8006272:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8006274:	2300      	movs	r3, #0
 8006276:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 8006278:	2376      	movs	r3, #118	; 0x76
 800627a:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	681d      	ldr	r5, [r3, #0]
 8006280:	466c      	mov	r4, sp
 8006282:	f107 0314 	add.w	r3, r7, #20
 8006286:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800628a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800628e:	f107 0308 	add.w	r3, r7, #8
 8006292:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006294:	4628      	mov	r0, r5
 8006296:	f003 f99b 	bl	80095d0 <SDIO_Init>
 800629a:	4603      	mov	r3, r0
 800629c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 80062a0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d001      	beq.n	80062ac <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 80062a8:	2301      	movs	r3, #1
 80062aa:	e031      	b.n	8006310 <HAL_SD_InitCard+0xb4>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 80062ac:	4b1a      	ldr	r3, [pc, #104]	; (8006318 <HAL_SD_InitCard+0xbc>)
 80062ae:	2200      	movs	r2, #0
 80062b0:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	4618      	mov	r0, r3
 80062b8:	f003 f9d3 	bl	8009662 <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 80062bc:	4b16      	ldr	r3, [pc, #88]	; (8006318 <HAL_SD_InitCard+0xbc>)
 80062be:	2201      	movs	r2, #1
 80062c0:	601a      	str	r2, [r3, #0]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 80062c2:	6878      	ldr	r0, [r7, #4]
 80062c4:	f000 fffa 	bl	80072bc <SD_PowerON>
 80062c8:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80062ca:	6a3b      	ldr	r3, [r7, #32]
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d00b      	beq.n	80062e8 <HAL_SD_InitCard+0x8c>
  {
    hsd->State = HAL_SD_STATE_READY;
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	2201      	movs	r2, #1
 80062d4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80062dc:	6a3b      	ldr	r3, [r7, #32]
 80062de:	431a      	orrs	r2, r3
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80062e4:	2301      	movs	r3, #1
 80062e6:	e013      	b.n	8006310 <HAL_SD_InitCard+0xb4>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 80062e8:	6878      	ldr	r0, [r7, #4]
 80062ea:	f000 ff19 	bl	8007120 <SD_InitCard>
 80062ee:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80062f0:	6a3b      	ldr	r3, [r7, #32]
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d00b      	beq.n	800630e <HAL_SD_InitCard+0xb2>
  {
    hsd->State = HAL_SD_STATE_READY;
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	2201      	movs	r2, #1
 80062fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006302:	6a3b      	ldr	r3, [r7, #32]
 8006304:	431a      	orrs	r2, r3
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800630a:	2301      	movs	r3, #1
 800630c:	e000      	b.n	8006310 <HAL_SD_InitCard+0xb4>
  }

  return HAL_OK;
 800630e:	2300      	movs	r3, #0
}
 8006310:	4618      	mov	r0, r3
 8006312:	3728      	adds	r7, #40	; 0x28
 8006314:	46bd      	mov	sp, r7
 8006316:	bdb0      	pop	{r4, r5, r7, pc}
 8006318:	422580a0 	.word	0x422580a0

0800631c <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800631c:	b580      	push	{r7, lr}
 800631e:	b08c      	sub	sp, #48	; 0x30
 8006320:	af00      	add	r7, sp, #0
 8006322:	60f8      	str	r0, [r7, #12]
 8006324:	60b9      	str	r1, [r7, #8]
 8006326:	607a      	str	r2, [r7, #4]
 8006328:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800632e:	68bb      	ldr	r3, [r7, #8]
 8006330:	2b00      	cmp	r3, #0
 8006332:	d107      	bne.n	8006344 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006338:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8006340:	2301      	movs	r3, #1
 8006342:	e0c9      	b.n	80064d8 <HAL_SD_ReadBlocks_DMA+0x1bc>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800634a:	b2db      	uxtb	r3, r3
 800634c:	2b01      	cmp	r3, #1
 800634e:	f040 80c2 	bne.w	80064d6 <HAL_SD_ReadBlocks_DMA+0x1ba>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	2200      	movs	r2, #0
 8006356:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8006358:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800635a:	683b      	ldr	r3, [r7, #0]
 800635c:	441a      	add	r2, r3
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006362:	429a      	cmp	r2, r3
 8006364:	d907      	bls.n	8006376 <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800636a:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8006372:	2301      	movs	r3, #1
 8006374:	e0b0      	b.n	80064d8 <HAL_SD_ReadBlocks_DMA+0x1bc>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	2203      	movs	r2, #3
 800637a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	2200      	movs	r2, #0
 8006384:	62da      	str	r2, [r3, #44]	; 0x2c

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND | SDIO_IT_STBITERR));
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800638c:	68fa      	ldr	r2, [r7, #12]
 800638e:	6812      	ldr	r2, [r2, #0]
 8006390:	f443 734a 	orr.w	r3, r3, #808	; 0x328
 8006394:	f043 0302 	orr.w	r3, r3, #2
 8006398:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800639e:	4a50      	ldr	r2, [pc, #320]	; (80064e0 <HAL_SD_ReadBlocks_DMA+0x1c4>)
 80063a0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063a6:	4a4f      	ldr	r2, [pc, #316]	; (80064e4 <HAL_SD_ReadBlocks_DMA+0x1c8>)
 80063a8:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063ae:	2200      	movs	r2, #0
 80063b0:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	6c18      	ldr	r0, [r3, #64]	; 0x40
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	3380      	adds	r3, #128	; 0x80
 80063bc:	4619      	mov	r1, r3
 80063be:	68ba      	ldr	r2, [r7, #8]
 80063c0:	683b      	ldr	r3, [r7, #0]
 80063c2:	025b      	lsls	r3, r3, #9
 80063c4:	089b      	lsrs	r3, r3, #2
 80063c6:	f7fc ffff 	bl	80033c8 <HAL_DMA_Start_IT>
 80063ca:	4603      	mov	r3, r0
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d017      	beq.n	8006400 <HAL_SD_ReadBlocks_DMA+0xe4>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 80063de:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	4a40      	ldr	r2, [pc, #256]	; (80064e8 <HAL_SD_ReadBlocks_DMA+0x1cc>)
 80063e6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063ec:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	2201      	movs	r2, #1
 80063f8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 80063fc:	2301      	movs	r3, #1
 80063fe:	e06b      	b.n	80064d8 <HAL_SD_ReadBlocks_DMA+0x1bc>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 8006400:	4b3a      	ldr	r3, [pc, #232]	; (80064ec <HAL_SD_ReadBlocks_DMA+0x1d0>)
 8006402:	2201      	movs	r2, #1
 8006404:	601a      	str	r2, [r3, #0]

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800640a:	2b01      	cmp	r3, #1
 800640c:	d002      	beq.n	8006414 <HAL_SD_ReadBlocks_DMA+0xf8>
      {
        add *= 512U;
 800640e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006410:	025b      	lsls	r3, r3, #9
 8006412:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Set Block Size for Card */
      errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	f44f 7100 	mov.w	r1, #512	; 0x200
 800641c:	4618      	mov	r0, r3
 800641e:	f003 f9b3 	bl	8009788 <SDMMC_CmdBlockLength>
 8006422:	62f8      	str	r0, [r7, #44]	; 0x2c
      if(errorstate != HAL_SD_ERROR_NONE)
 8006424:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006426:	2b00      	cmp	r3, #0
 8006428:	d00f      	beq.n	800644a <HAL_SD_ReadBlocks_DMA+0x12e>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	4a2e      	ldr	r2, [pc, #184]	; (80064e8 <HAL_SD_ReadBlocks_DMA+0x1cc>)
 8006430:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006436:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006438:	431a      	orrs	r2, r3
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	2201      	movs	r2, #1
 8006442:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        return HAL_ERROR;
 8006446:	2301      	movs	r3, #1
 8006448:	e046      	b.n	80064d8 <HAL_SD_ReadBlocks_DMA+0x1bc>
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800644a:	f04f 33ff 	mov.w	r3, #4294967295
 800644e:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8006450:	683b      	ldr	r3, [r7, #0]
 8006452:	025b      	lsls	r3, r3, #9
 8006454:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8006456:	2390      	movs	r3, #144	; 0x90
 8006458:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 800645a:	2302      	movs	r3, #2
 800645c:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800645e:	2300      	movs	r3, #0
 8006460:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 8006462:	2301      	movs	r3, #1
 8006464:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	f107 0210 	add.w	r2, r7, #16
 800646e:	4611      	mov	r1, r2
 8006470:	4618      	mov	r0, r3
 8006472:	f003 f95d 	bl	8009730 <SDIO_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 8006476:	683b      	ldr	r3, [r7, #0]
 8006478:	2b01      	cmp	r3, #1
 800647a:	d90a      	bls.n	8006492 <HAL_SD_ReadBlocks_DMA+0x176>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	2282      	movs	r2, #130	; 0x82
 8006480:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006488:	4618      	mov	r0, r3
 800648a:	f003 f9c1 	bl	8009810 <SDMMC_CmdReadMultiBlock>
 800648e:	62f8      	str	r0, [r7, #44]	; 0x2c
 8006490:	e009      	b.n	80064a6 <HAL_SD_ReadBlocks_DMA+0x18a>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	2281      	movs	r2, #129	; 0x81
 8006496:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800649e:	4618      	mov	r0, r3
 80064a0:	f003 f994 	bl	80097cc <SDMMC_CmdReadSingleBlock>
 80064a4:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 80064a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d012      	beq.n	80064d2 <HAL_SD_ReadBlocks_DMA+0x1b6>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	4a0d      	ldr	r2, [pc, #52]	; (80064e8 <HAL_SD_ReadBlocks_DMA+0x1cc>)
 80064b2:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80064b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064ba:	431a      	orrs	r2, r3
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	2201      	movs	r2, #1
 80064c4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	2200      	movs	r2, #0
 80064cc:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 80064ce:	2301      	movs	r3, #1
 80064d0:	e002      	b.n	80064d8 <HAL_SD_ReadBlocks_DMA+0x1bc>
      }

      return HAL_OK;
 80064d2:	2300      	movs	r3, #0
 80064d4:	e000      	b.n	80064d8 <HAL_SD_ReadBlocks_DMA+0x1bc>
    }
  }
  else
  {
    return HAL_BUSY;
 80064d6:	2302      	movs	r3, #2
  }
}
 80064d8:	4618      	mov	r0, r3
 80064da:	3730      	adds	r7, #48	; 0x30
 80064dc:	46bd      	mov	sp, r7
 80064de:	bd80      	pop	{r7, pc}
 80064e0:	08006f2f 	.word	0x08006f2f
 80064e4:	08006fa1 	.word	0x08006fa1
 80064e8:	004005ff 	.word	0x004005ff
 80064ec:	4225858c 	.word	0x4225858c

080064f0 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 80064f0:	b580      	push	{r7, lr}
 80064f2:	b08c      	sub	sp, #48	; 0x30
 80064f4:	af00      	add	r7, sp, #0
 80064f6:	60f8      	str	r0, [r7, #12]
 80064f8:	60b9      	str	r1, [r7, #8]
 80064fa:	607a      	str	r2, [r7, #4]
 80064fc:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 8006502:	68bb      	ldr	r3, [r7, #8]
 8006504:	2b00      	cmp	r3, #0
 8006506:	d107      	bne.n	8006518 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800650c:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8006514:	2301      	movs	r3, #1
 8006516:	e0ce      	b.n	80066b6 <HAL_SD_WriteBlocks_DMA+0x1c6>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800651e:	b2db      	uxtb	r3, r3
 8006520:	2b01      	cmp	r3, #1
 8006522:	f040 80c7 	bne.w	80066b4 <HAL_SD_WriteBlocks_DMA+0x1c4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	2200      	movs	r2, #0
 800652a:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800652c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800652e:	683b      	ldr	r3, [r7, #0]
 8006530:	441a      	add	r2, r3
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006536:	429a      	cmp	r2, r3
 8006538:	d907      	bls.n	800654a <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800653e:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8006546:	2301      	movs	r3, #1
 8006548:	e0b5      	b.n	80066b6 <HAL_SD_WriteBlocks_DMA+0x1c6>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	2203      	movs	r2, #3
 800654e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	2200      	movs	r2, #0
 8006558:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable SD Error interrupts */
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006560:	68fa      	ldr	r2, [r7, #12]
 8006562:	6812      	ldr	r2, [r2, #0]
 8006564:	f443 7306 	orr.w	r3, r3, #536	; 0x218
 8006568:	f043 0302 	orr.w	r3, r3, #2
 800656c:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006572:	4a53      	ldr	r2, [pc, #332]	; (80066c0 <HAL_SD_WriteBlocks_DMA+0x1d0>)
 8006574:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800657a:	4a52      	ldr	r2, [pc, #328]	; (80066c4 <HAL_SD_WriteBlocks_DMA+0x1d4>)
 800657c:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006582:	2200      	movs	r2, #0
 8006584:	651a      	str	r2, [r3, #80]	; 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800658a:	2b01      	cmp	r3, #1
 800658c:	d002      	beq.n	8006594 <HAL_SD_WriteBlocks_DMA+0xa4>
    {
      add *= 512U;
 800658e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006590:	025b      	lsls	r3, r3, #9
 8006592:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Set Block Size for Card */
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	f44f 7100 	mov.w	r1, #512	; 0x200
 800659c:	4618      	mov	r0, r3
 800659e:	f003 f8f3 	bl	8009788 <SDMMC_CmdBlockLength>
 80065a2:	62f8      	str	r0, [r7, #44]	; 0x2c
    if(errorstate != HAL_SD_ERROR_NONE)
 80065a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d00f      	beq.n	80065ca <HAL_SD_WriteBlocks_DMA+0xda>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	4a46      	ldr	r2, [pc, #280]	; (80066c8 <HAL_SD_WriteBlocks_DMA+0x1d8>)
 80065b0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80065b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065b8:	431a      	orrs	r2, r3
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	2201      	movs	r2, #1
 80065c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 80065c6:	2301      	movs	r3, #1
 80065c8:	e075      	b.n	80066b6 <HAL_SD_WriteBlocks_DMA+0x1c6>
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 80065ca:	683b      	ldr	r3, [r7, #0]
 80065cc:	2b01      	cmp	r3, #1
 80065ce:	d90a      	bls.n	80065e6 <HAL_SD_WriteBlocks_DMA+0xf6>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	22a0      	movs	r2, #160	; 0xa0
 80065d4:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80065dc:	4618      	mov	r0, r3
 80065de:	f003 f95b 	bl	8009898 <SDMMC_CmdWriteMultiBlock>
 80065e2:	62f8      	str	r0, [r7, #44]	; 0x2c
 80065e4:	e009      	b.n	80065fa <HAL_SD_WriteBlocks_DMA+0x10a>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	2290      	movs	r2, #144	; 0x90
 80065ea:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80065f2:	4618      	mov	r0, r3
 80065f4:	f003 f92e 	bl	8009854 <SDMMC_CmdWriteSingleBlock>
 80065f8:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 80065fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d012      	beq.n	8006626 <HAL_SD_WriteBlocks_DMA+0x136>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	4a30      	ldr	r2, [pc, #192]	; (80066c8 <HAL_SD_WriteBlocks_DMA+0x1d8>)
 8006606:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800660c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800660e:	431a      	orrs	r2, r3
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	2201      	movs	r2, #1
 8006618:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	2200      	movs	r2, #0
 8006620:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8006622:	2301      	movs	r3, #1
 8006624:	e047      	b.n	80066b6 <HAL_SD_WriteBlocks_DMA+0x1c6>
    }

    /* Enable SDIO DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 8006626:	4b29      	ldr	r3, [pc, #164]	; (80066cc <HAL_SD_WriteBlocks_DMA+0x1dc>)
 8006628:	2201      	movs	r2, #1
 800662a:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8006630:	68b9      	ldr	r1, [r7, #8]
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	3380      	adds	r3, #128	; 0x80
 8006638:	461a      	mov	r2, r3
 800663a:	683b      	ldr	r3, [r7, #0]
 800663c:	025b      	lsls	r3, r3, #9
 800663e:	089b      	lsrs	r3, r3, #2
 8006640:	f7fc fec2 	bl	80033c8 <HAL_DMA_Start_IT>
 8006644:	4603      	mov	r3, r0
 8006646:	2b00      	cmp	r3, #0
 8006648:	d01c      	beq.n	8006684 <HAL_SD_WriteBlocks_DMA+0x194>
    {
#if defined(SDIO_STA_STBITERR)
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006650:	68fa      	ldr	r2, [r7, #12]
 8006652:	6812      	ldr	r2, [r2, #0]
 8006654:	f423 7306 	bic.w	r3, r3, #536	; 0x218
 8006658:	f023 0302 	bic.w	r3, r3, #2
 800665c:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
#endif /* SDIO_STA_STBITERR */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	4a19      	ldr	r2, [pc, #100]	; (80066c8 <HAL_SD_WriteBlocks_DMA+0x1d8>)
 8006664:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800666a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	2201      	movs	r2, #1
 8006676:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	2200      	movs	r2, #0
 800667e:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8006680:	2301      	movs	r3, #1
 8006682:	e018      	b.n	80066b6 <HAL_SD_WriteBlocks_DMA+0x1c6>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8006684:	f04f 33ff 	mov.w	r3, #4294967295
 8006688:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800668a:	683b      	ldr	r3, [r7, #0]
 800668c:	025b      	lsls	r3, r3, #9
 800668e:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8006690:	2390      	movs	r3, #144	; 0x90
 8006692:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 8006694:	2300      	movs	r3, #0
 8006696:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8006698:	2300      	movs	r3, #0
 800669a:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 800669c:	2301      	movs	r3, #1
 800669e:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	f107 0210 	add.w	r2, r7, #16
 80066a8:	4611      	mov	r1, r2
 80066aa:	4618      	mov	r0, r3
 80066ac:	f003 f840 	bl	8009730 <SDIO_ConfigData>

      return HAL_OK;
 80066b0:	2300      	movs	r3, #0
 80066b2:	e000      	b.n	80066b6 <HAL_SD_WriteBlocks_DMA+0x1c6>
    }
  }
  else
  {
    return HAL_BUSY;
 80066b4:	2302      	movs	r3, #2
  }
}
 80066b6:	4618      	mov	r0, r3
 80066b8:	3730      	adds	r7, #48	; 0x30
 80066ba:	46bd      	mov	sp, r7
 80066bc:	bd80      	pop	{r7, pc}
 80066be:	bf00      	nop
 80066c0:	08006f05 	.word	0x08006f05
 80066c4:	08006fa1 	.word	0x08006fa1
 80066c8:	004005ff 	.word	0x004005ff
 80066cc:	4225858c 	.word	0x4225858c

080066d0 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 80066d0:	b580      	push	{r7, lr}
 80066d2:	b084      	sub	sp, #16
 80066d4:	af00      	add	r7, sp, #0
 80066d6:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066dc:	60fb      	str	r3, [r7, #12]

  /* Check for SDIO interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80066e4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d008      	beq.n	80066fe <HAL_SD_IRQHandler+0x2e>
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	f003 0308 	and.w	r3, r3, #8
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d003      	beq.n	80066fe <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 80066f6:	6878      	ldr	r0, [r7, #4]
 80066f8:	f000 fff6 	bl	80076e8 <SD_Read_IT>
 80066fc:	e165      	b.n	80069ca <HAL_SD_IRQHandler+0x2fa>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) != RESET)
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006704:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006708:	2b00      	cmp	r3, #0
 800670a:	f000 808f 	beq.w	800682c <HAL_SD_IRQHandler+0x15c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DATAEND);
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006716:	639a      	str	r2, [r3, #56]	; 0x38

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800671e:	687a      	ldr	r2, [r7, #4]
 8006720:	6812      	ldr	r2, [r2, #0]
 8006722:	f423 4343 	bic.w	r3, r3, #49920	; 0xc300
 8006726:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 800672a:	63d3      	str	r3, [r2, #60]	; 0x3c
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF);
#endif /* SDIO_STA_STBITERR */

    hsd->Instance->DCTRL &= ~(SDIO_DCTRL_DTEN);
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	f022 0201 	bic.w	r2, r2, #1
 800673a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	f003 0308 	and.w	r3, r3, #8
 8006742:	2b00      	cmp	r3, #0
 8006744:	d039      	beq.n	80067ba <HAL_SD_IRQHandler+0xea>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	f003 0302 	and.w	r3, r3, #2
 800674c:	2b00      	cmp	r3, #0
 800674e:	d104      	bne.n	800675a <HAL_SD_IRQHandler+0x8a>
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	f003 0320 	and.w	r3, r3, #32
 8006756:	2b00      	cmp	r3, #0
 8006758:	d011      	beq.n	800677e <HAL_SD_IRQHandler+0xae>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	4618      	mov	r0, r3
 8006760:	f003 f8bc 	bl	80098dc <SDMMC_CmdStopTransfer>
 8006764:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8006766:	68bb      	ldr	r3, [r7, #8]
 8006768:	2b00      	cmp	r3, #0
 800676a:	d008      	beq.n	800677e <HAL_SD_IRQHandler+0xae>
        {
          hsd->ErrorCode |= errorstate;
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006770:	68bb      	ldr	r3, [r7, #8]
 8006772:	431a      	orrs	r2, r3
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 8006778:	6878      	ldr	r0, [r7, #4]
 800677a:	f000 f943 	bl	8006a04 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	f240 523a 	movw	r2, #1338	; 0x53a
 8006786:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	2201      	movs	r2, #1
 800678c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	2200      	movs	r2, #0
 8006794:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	f003 0301 	and.w	r3, r3, #1
 800679c:	2b00      	cmp	r3, #0
 800679e:	d104      	bne.n	80067aa <HAL_SD_IRQHandler+0xda>
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	f003 0302 	and.w	r3, r3, #2
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d003      	beq.n	80067b2 <HAL_SD_IRQHandler+0xe2>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 80067aa:	6878      	ldr	r0, [r7, #4]
 80067ac:	f000 f920 	bl	80069f0 <HAL_SD_RxCpltCallback>
 80067b0:	e10b      	b.n	80069ca <HAL_SD_IRQHandler+0x2fa>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 80067b2:	6878      	ldr	r0, [r7, #4]
 80067b4:	f000 f912 	bl	80069dc <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 80067b8:	e107      	b.n	80069ca <HAL_SD_IRQHandler+0x2fa>
    else if((context & SD_CONTEXT_DMA) != 0U)
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	f000 8102 	beq.w	80069ca <HAL_SD_IRQHandler+0x2fa>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	f003 0320 	and.w	r3, r3, #32
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d011      	beq.n	80067f4 <HAL_SD_IRQHandler+0x124>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	4618      	mov	r0, r3
 80067d6:	f003 f881 	bl	80098dc <SDMMC_CmdStopTransfer>
 80067da:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 80067dc:	68bb      	ldr	r3, [r7, #8]
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d008      	beq.n	80067f4 <HAL_SD_IRQHandler+0x124>
          hsd->ErrorCode |= errorstate;
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80067e6:	68bb      	ldr	r3, [r7, #8]
 80067e8:	431a      	orrs	r2, r3
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 80067ee:	6878      	ldr	r0, [r7, #4]
 80067f0:	f000 f908 	bl	8006a04 <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	f003 0301 	and.w	r3, r3, #1
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	f040 80e5 	bne.w	80069ca <HAL_SD_IRQHandler+0x2fa>
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	f003 0302 	and.w	r3, r3, #2
 8006806:	2b00      	cmp	r3, #0
 8006808:	f040 80df 	bne.w	80069ca <HAL_SD_IRQHandler+0x2fa>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	f022 0208 	bic.w	r2, r2, #8
 800681a:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	2201      	movs	r2, #1
 8006820:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 8006824:	6878      	ldr	r0, [r7, #4]
 8006826:	f000 f8d9 	bl	80069dc <HAL_SD_TxCpltCallback>
}
 800682a:	e0ce      	b.n	80069ca <HAL_SD_IRQHandler+0x2fa>
  else if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006832:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006836:	2b00      	cmp	r3, #0
 8006838:	d008      	beq.n	800684c <HAL_SD_IRQHandler+0x17c>
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	f003 0308 	and.w	r3, r3, #8
 8006840:	2b00      	cmp	r3, #0
 8006842:	d003      	beq.n	800684c <HAL_SD_IRQHandler+0x17c>
    SD_Write_IT(hsd);
 8006844:	6878      	ldr	r0, [r7, #4]
 8006846:	f000 ffa0 	bl	800778a <SD_Write_IT>
 800684a:	e0be      	b.n	80069ca <HAL_SD_IRQHandler+0x2fa>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_RXOVERR | SDIO_FLAG_TXUNDERR | SDIO_FLAG_STBITERR) != RESET)
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006852:	f240 233a 	movw	r3, #570	; 0x23a
 8006856:	4013      	ands	r3, r2
 8006858:	2b00      	cmp	r3, #0
 800685a:	f000 80b6 	beq.w	80069ca <HAL_SD_IRQHandler+0x2fa>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL) != RESET)
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006864:	f003 0302 	and.w	r3, r3, #2
 8006868:	2b00      	cmp	r3, #0
 800686a:	d005      	beq.n	8006878 <HAL_SD_IRQHandler+0x1a8>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006870:	f043 0202 	orr.w	r2, r3, #2
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) != RESET)
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800687e:	f003 0308 	and.w	r3, r3, #8
 8006882:	2b00      	cmp	r3, #0
 8006884:	d005      	beq.n	8006892 <HAL_SD_IRQHandler+0x1c2>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800688a:	f043 0208 	orr.w	r2, r3, #8
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR) != RESET)
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006898:	f003 0320 	and.w	r3, r3, #32
 800689c:	2b00      	cmp	r3, #0
 800689e:	d005      	beq.n	80068ac <HAL_SD_IRQHandler+0x1dc>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068a4:	f043 0220 	orr.w	r2, r3, #32
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR) != RESET)
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80068b2:	f003 0310 	and.w	r3, r3, #16
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d005      	beq.n	80068c6 <HAL_SD_IRQHandler+0x1f6>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068be:	f043 0210 	orr.w	r2, r3, #16
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR) != RESET)
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80068cc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d005      	beq.n	80068e0 <HAL_SD_IRQHandler+0x210>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068d8:	f043 0208 	orr.w	r2, r3, #8
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS | SDIO_FLAG_STBITERR);
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	f240 723a 	movw	r2, #1850	; 0x73a
 80068e8:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80068f0:	687a      	ldr	r2, [r7, #4]
 80068f2:	6812      	ldr	r2, [r2, #0]
 80068f4:	f423 734e 	bic.w	r3, r3, #824	; 0x338
 80068f8:	f023 0302 	bic.w	r3, r3, #2
 80068fc:	63d3      	str	r3, [r2, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	4618      	mov	r0, r3
 8006904:	f002 ffea 	bl	80098dc <SDMMC_CmdStopTransfer>
 8006908:	4602      	mov	r2, r0
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800690e:	431a      	orrs	r2, r3
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	f003 0308 	and.w	r3, r3, #8
 800691a:	2b00      	cmp	r3, #0
 800691c:	d00a      	beq.n	8006934 <HAL_SD_IRQHandler+0x264>
      hsd->State = HAL_SD_STATE_READY;
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	2201      	movs	r2, #1
 8006922:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	2200      	movs	r2, #0
 800692a:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 800692c:	6878      	ldr	r0, [r7, #4]
 800692e:	f000 f869 	bl	8006a04 <HAL_SD_ErrorCallback>
}
 8006932:	e04a      	b.n	80069ca <HAL_SD_IRQHandler+0x2fa>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800693a:	2b00      	cmp	r3, #0
 800693c:	d045      	beq.n	80069ca <HAL_SD_IRQHandler+0x2fa>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	f003 0310 	and.w	r3, r3, #16
 8006944:	2b00      	cmp	r3, #0
 8006946:	d104      	bne.n	8006952 <HAL_SD_IRQHandler+0x282>
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	f003 0320 	and.w	r3, r3, #32
 800694e:	2b00      	cmp	r3, #0
 8006950:	d011      	beq.n	8006976 <HAL_SD_IRQHandler+0x2a6>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006956:	4a1f      	ldr	r2, [pc, #124]	; (80069d4 <HAL_SD_IRQHandler+0x304>)
 8006958:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800695e:	4618      	mov	r0, r3
 8006960:	f7fc fd8a 	bl	8003478 <HAL_DMA_Abort_IT>
 8006964:	4603      	mov	r3, r0
 8006966:	2b00      	cmp	r3, #0
 8006968:	d02f      	beq.n	80069ca <HAL_SD_IRQHandler+0x2fa>
          SD_DMATxAbort(hsd->hdmatx);
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800696e:	4618      	mov	r0, r3
 8006970:	f000 fb68 	bl	8007044 <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8006974:	e029      	b.n	80069ca <HAL_SD_IRQHandler+0x2fa>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	f003 0301 	and.w	r3, r3, #1
 800697c:	2b00      	cmp	r3, #0
 800697e:	d104      	bne.n	800698a <HAL_SD_IRQHandler+0x2ba>
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	f003 0302 	and.w	r3, r3, #2
 8006986:	2b00      	cmp	r3, #0
 8006988:	d011      	beq.n	80069ae <HAL_SD_IRQHandler+0x2de>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800698e:	4a12      	ldr	r2, [pc, #72]	; (80069d8 <HAL_SD_IRQHandler+0x308>)
 8006990:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006996:	4618      	mov	r0, r3
 8006998:	f7fc fd6e 	bl	8003478 <HAL_DMA_Abort_IT>
 800699c:	4603      	mov	r3, r0
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d013      	beq.n	80069ca <HAL_SD_IRQHandler+0x2fa>
          SD_DMARxAbort(hsd->hdmarx);
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069a6:	4618      	mov	r0, r3
 80069a8:	f000 fb83 	bl	80070b2 <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 80069ac:	e00d      	b.n	80069ca <HAL_SD_IRQHandler+0x2fa>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	2200      	movs	r2, #0
 80069b2:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	2201      	movs	r2, #1
 80069b8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	2200      	movs	r2, #0
 80069c0:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 80069c2:	6878      	ldr	r0, [r7, #4]
 80069c4:	f000 f828 	bl	8006a18 <HAL_SD_AbortCallback>
}
 80069c8:	e7ff      	b.n	80069ca <HAL_SD_IRQHandler+0x2fa>
 80069ca:	bf00      	nop
 80069cc:	3710      	adds	r7, #16
 80069ce:	46bd      	mov	sp, r7
 80069d0:	bd80      	pop	{r7, pc}
 80069d2:	bf00      	nop
 80069d4:	08007045 	.word	0x08007045
 80069d8:	080070b3 	.word	0x080070b3

080069dc <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: Pointer to SD handle
  * @retval None
  */
__weak void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 80069dc:	b480      	push	{r7}
 80069de:	b083      	sub	sp, #12
 80069e0:	af00      	add	r7, sp, #0
 80069e2:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_TxCpltCallback can be implemented in the user file
   */
}
 80069e4:	bf00      	nop
 80069e6:	370c      	adds	r7, #12
 80069e8:	46bd      	mov	sp, r7
 80069ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ee:	4770      	bx	lr

080069f0 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 80069f0:	b480      	push	{r7}
 80069f2:	b083      	sub	sp, #12
 80069f4:	af00      	add	r7, sp, #0
 80069f6:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_RxCpltCallback can be implemented in the user file
   */
}
 80069f8:	bf00      	nop
 80069fa:	370c      	adds	r7, #12
 80069fc:	46bd      	mov	sp, r7
 80069fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a02:	4770      	bx	lr

08006a04 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8006a04:	b480      	push	{r7}
 8006a06:	b083      	sub	sp, #12
 8006a08:	af00      	add	r7, sp, #0
 8006a0a:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 8006a0c:	bf00      	nop
 8006a0e:	370c      	adds	r7, #12
 8006a10:	46bd      	mov	sp, r7
 8006a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a16:	4770      	bx	lr

08006a18 <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 8006a18:	b480      	push	{r7}
 8006a1a:	b083      	sub	sp, #12
 8006a1c:	af00      	add	r7, sp, #0
 8006a1e:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_AbortCallback can be implemented in the user file
   */
}
 8006a20:	bf00      	nop
 8006a22:	370c      	adds	r7, #12
 8006a24:	46bd      	mov	sp, r7
 8006a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a2a:	4770      	bx	lr

08006a2c <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8006a2c:	b480      	push	{r7}
 8006a2e:	b083      	sub	sp, #12
 8006a30:	af00      	add	r7, sp, #0
 8006a32:	6078      	str	r0, [r7, #4]
 8006a34:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006a3a:	0f9b      	lsrs	r3, r3, #30
 8006a3c:	b2da      	uxtb	r2, r3
 8006a3e:	683b      	ldr	r3, [r7, #0]
 8006a40:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006a46:	0e9b      	lsrs	r3, r3, #26
 8006a48:	b2db      	uxtb	r3, r3
 8006a4a:	f003 030f 	and.w	r3, r3, #15
 8006a4e:	b2da      	uxtb	r2, r3
 8006a50:	683b      	ldr	r3, [r7, #0]
 8006a52:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006a58:	0e1b      	lsrs	r3, r3, #24
 8006a5a:	b2db      	uxtb	r3, r3
 8006a5c:	f003 0303 	and.w	r3, r3, #3
 8006a60:	b2da      	uxtb	r2, r3
 8006a62:	683b      	ldr	r3, [r7, #0]
 8006a64:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006a6a:	0c1b      	lsrs	r3, r3, #16
 8006a6c:	b2da      	uxtb	r2, r3
 8006a6e:	683b      	ldr	r3, [r7, #0]
 8006a70:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006a76:	0a1b      	lsrs	r3, r3, #8
 8006a78:	b2da      	uxtb	r2, r3
 8006a7a:	683b      	ldr	r3, [r7, #0]
 8006a7c:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006a82:	b2da      	uxtb	r2, r3
 8006a84:	683b      	ldr	r3, [r7, #0]
 8006a86:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006a8c:	0d1b      	lsrs	r3, r3, #20
 8006a8e:	b29a      	uxth	r2, r3
 8006a90:	683b      	ldr	r3, [r7, #0]
 8006a92:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006a98:	0c1b      	lsrs	r3, r3, #16
 8006a9a:	b2db      	uxtb	r3, r3
 8006a9c:	f003 030f 	and.w	r3, r3, #15
 8006aa0:	b2da      	uxtb	r2, r3
 8006aa2:	683b      	ldr	r3, [r7, #0]
 8006aa4:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006aaa:	0bdb      	lsrs	r3, r3, #15
 8006aac:	b2db      	uxtb	r3, r3
 8006aae:	f003 0301 	and.w	r3, r3, #1
 8006ab2:	b2da      	uxtb	r2, r3
 8006ab4:	683b      	ldr	r3, [r7, #0]
 8006ab6:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006abc:	0b9b      	lsrs	r3, r3, #14
 8006abe:	b2db      	uxtb	r3, r3
 8006ac0:	f003 0301 	and.w	r3, r3, #1
 8006ac4:	b2da      	uxtb	r2, r3
 8006ac6:	683b      	ldr	r3, [r7, #0]
 8006ac8:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006ace:	0b5b      	lsrs	r3, r3, #13
 8006ad0:	b2db      	uxtb	r3, r3
 8006ad2:	f003 0301 	and.w	r3, r3, #1
 8006ad6:	b2da      	uxtb	r2, r3
 8006ad8:	683b      	ldr	r3, [r7, #0]
 8006ada:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006ae0:	0b1b      	lsrs	r3, r3, #12
 8006ae2:	b2db      	uxtb	r3, r3
 8006ae4:	f003 0301 	and.w	r3, r3, #1
 8006ae8:	b2da      	uxtb	r2, r3
 8006aea:	683b      	ldr	r3, [r7, #0]
 8006aec:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8006aee:	683b      	ldr	r3, [r7, #0]
 8006af0:	2200      	movs	r2, #0
 8006af2:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d163      	bne.n	8006bc4 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006b00:	009a      	lsls	r2, r3, #2
 8006b02:	f640 73fc 	movw	r3, #4092	; 0xffc
 8006b06:	4013      	ands	r3, r2
 8006b08:	687a      	ldr	r2, [r7, #4]
 8006b0a:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8006b0c:	0f92      	lsrs	r2, r2, #30
 8006b0e:	431a      	orrs	r2, r3
 8006b10:	683b      	ldr	r3, [r7, #0]
 8006b12:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006b18:	0edb      	lsrs	r3, r3, #27
 8006b1a:	b2db      	uxtb	r3, r3
 8006b1c:	f003 0307 	and.w	r3, r3, #7
 8006b20:	b2da      	uxtb	r2, r3
 8006b22:	683b      	ldr	r3, [r7, #0]
 8006b24:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006b2a:	0e1b      	lsrs	r3, r3, #24
 8006b2c:	b2db      	uxtb	r3, r3
 8006b2e:	f003 0307 	and.w	r3, r3, #7
 8006b32:	b2da      	uxtb	r2, r3
 8006b34:	683b      	ldr	r3, [r7, #0]
 8006b36:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006b3c:	0d5b      	lsrs	r3, r3, #21
 8006b3e:	b2db      	uxtb	r3, r3
 8006b40:	f003 0307 	and.w	r3, r3, #7
 8006b44:	b2da      	uxtb	r2, r3
 8006b46:	683b      	ldr	r3, [r7, #0]
 8006b48:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006b4e:	0c9b      	lsrs	r3, r3, #18
 8006b50:	b2db      	uxtb	r3, r3
 8006b52:	f003 0307 	and.w	r3, r3, #7
 8006b56:	b2da      	uxtb	r2, r3
 8006b58:	683b      	ldr	r3, [r7, #0]
 8006b5a:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006b60:	0bdb      	lsrs	r3, r3, #15
 8006b62:	b2db      	uxtb	r3, r3
 8006b64:	f003 0307 	and.w	r3, r3, #7
 8006b68:	b2da      	uxtb	r2, r3
 8006b6a:	683b      	ldr	r3, [r7, #0]
 8006b6c:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8006b6e:	683b      	ldr	r3, [r7, #0]
 8006b70:	691b      	ldr	r3, [r3, #16]
 8006b72:	1c5a      	adds	r2, r3, #1
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8006b78:	683b      	ldr	r3, [r7, #0]
 8006b7a:	7e1b      	ldrb	r3, [r3, #24]
 8006b7c:	b2db      	uxtb	r3, r3
 8006b7e:	f003 0307 	and.w	r3, r3, #7
 8006b82:	3302      	adds	r3, #2
 8006b84:	2201      	movs	r2, #1
 8006b86:	fa02 f303 	lsl.w	r3, r2, r3
 8006b8a:	687a      	ldr	r2, [r7, #4]
 8006b8c:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8006b8e:	fb02 f203 	mul.w	r2, r2, r3
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8006b96:	683b      	ldr	r3, [r7, #0]
 8006b98:	7a1b      	ldrb	r3, [r3, #8]
 8006b9a:	b2db      	uxtb	r3, r3
 8006b9c:	f003 030f 	and.w	r3, r3, #15
 8006ba0:	2201      	movs	r2, #1
 8006ba2:	409a      	lsls	r2, r3
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006bac:	687a      	ldr	r2, [r7, #4]
 8006bae:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8006bb0:	0a52      	lsrs	r2, r2, #9
 8006bb2:	fb02 f203 	mul.w	r2, r2, r3
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006bc0:	661a      	str	r2, [r3, #96]	; 0x60
 8006bc2:	e031      	b.n	8006c28 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006bc8:	2b01      	cmp	r3, #1
 8006bca:	d11d      	bne.n	8006c08 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006bd0:	041b      	lsls	r3, r3, #16
 8006bd2:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006bda:	0c1b      	lsrs	r3, r3, #16
 8006bdc:	431a      	orrs	r2, r3
 8006bde:	683b      	ldr	r3, [r7, #0]
 8006be0:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8006be2:	683b      	ldr	r3, [r7, #0]
 8006be4:	691b      	ldr	r3, [r3, #16]
 8006be6:	3301      	adds	r3, #1
 8006be8:	029a      	lsls	r2, r3, #10
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006bfc:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	661a      	str	r2, [r3, #96]	; 0x60
 8006c06:	e00f      	b.n	8006c28 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	4a58      	ldr	r2, [pc, #352]	; (8006d70 <HAL_SD_GetCardCSD+0x344>)
 8006c0e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c14:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	2201      	movs	r2, #1
 8006c20:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8006c24:	2301      	movs	r3, #1
 8006c26:	e09d      	b.n	8006d64 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006c2c:	0b9b      	lsrs	r3, r3, #14
 8006c2e:	b2db      	uxtb	r3, r3
 8006c30:	f003 0301 	and.w	r3, r3, #1
 8006c34:	b2da      	uxtb	r2, r3
 8006c36:	683b      	ldr	r3, [r7, #0]
 8006c38:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006c3e:	09db      	lsrs	r3, r3, #7
 8006c40:	b2db      	uxtb	r3, r3
 8006c42:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006c46:	b2da      	uxtb	r2, r3
 8006c48:	683b      	ldr	r3, [r7, #0]
 8006c4a:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006c50:	b2db      	uxtb	r3, r3
 8006c52:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006c56:	b2da      	uxtb	r2, r3
 8006c58:	683b      	ldr	r3, [r7, #0]
 8006c5a:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c60:	0fdb      	lsrs	r3, r3, #31
 8006c62:	b2da      	uxtb	r2, r3
 8006c64:	683b      	ldr	r3, [r7, #0]
 8006c66:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c6c:	0f5b      	lsrs	r3, r3, #29
 8006c6e:	b2db      	uxtb	r3, r3
 8006c70:	f003 0303 	and.w	r3, r3, #3
 8006c74:	b2da      	uxtb	r2, r3
 8006c76:	683b      	ldr	r3, [r7, #0]
 8006c78:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c7e:	0e9b      	lsrs	r3, r3, #26
 8006c80:	b2db      	uxtb	r3, r3
 8006c82:	f003 0307 	and.w	r3, r3, #7
 8006c86:	b2da      	uxtb	r2, r3
 8006c88:	683b      	ldr	r3, [r7, #0]
 8006c8a:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c90:	0d9b      	lsrs	r3, r3, #22
 8006c92:	b2db      	uxtb	r3, r3
 8006c94:	f003 030f 	and.w	r3, r3, #15
 8006c98:	b2da      	uxtb	r2, r3
 8006c9a:	683b      	ldr	r3, [r7, #0]
 8006c9c:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ca2:	0d5b      	lsrs	r3, r3, #21
 8006ca4:	b2db      	uxtb	r3, r3
 8006ca6:	f003 0301 	and.w	r3, r3, #1
 8006caa:	b2da      	uxtb	r2, r3
 8006cac:	683b      	ldr	r3, [r7, #0]
 8006cae:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8006cb2:	683b      	ldr	r3, [r7, #0]
 8006cb4:	2200      	movs	r2, #0
 8006cb6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006cbe:	0c1b      	lsrs	r3, r3, #16
 8006cc0:	b2db      	uxtb	r3, r3
 8006cc2:	f003 0301 	and.w	r3, r3, #1
 8006cc6:	b2da      	uxtb	r2, r3
 8006cc8:	683b      	ldr	r3, [r7, #0]
 8006cca:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006cd2:	0bdb      	lsrs	r3, r3, #15
 8006cd4:	b2db      	uxtb	r3, r3
 8006cd6:	f003 0301 	and.w	r3, r3, #1
 8006cda:	b2da      	uxtb	r2, r3
 8006cdc:	683b      	ldr	r3, [r7, #0]
 8006cde:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ce6:	0b9b      	lsrs	r3, r3, #14
 8006ce8:	b2db      	uxtb	r3, r3
 8006cea:	f003 0301 	and.w	r3, r3, #1
 8006cee:	b2da      	uxtb	r2, r3
 8006cf0:	683b      	ldr	r3, [r7, #0]
 8006cf2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006cfa:	0b5b      	lsrs	r3, r3, #13
 8006cfc:	b2db      	uxtb	r3, r3
 8006cfe:	f003 0301 	and.w	r3, r3, #1
 8006d02:	b2da      	uxtb	r2, r3
 8006d04:	683b      	ldr	r3, [r7, #0]
 8006d06:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d0e:	0b1b      	lsrs	r3, r3, #12
 8006d10:	b2db      	uxtb	r3, r3
 8006d12:	f003 0301 	and.w	r3, r3, #1
 8006d16:	b2da      	uxtb	r2, r3
 8006d18:	683b      	ldr	r3, [r7, #0]
 8006d1a:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d22:	0a9b      	lsrs	r3, r3, #10
 8006d24:	b2db      	uxtb	r3, r3
 8006d26:	f003 0303 	and.w	r3, r3, #3
 8006d2a:	b2da      	uxtb	r2, r3
 8006d2c:	683b      	ldr	r3, [r7, #0]
 8006d2e:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d36:	0a1b      	lsrs	r3, r3, #8
 8006d38:	b2db      	uxtb	r3, r3
 8006d3a:	f003 0303 	and.w	r3, r3, #3
 8006d3e:	b2da      	uxtb	r2, r3
 8006d40:	683b      	ldr	r3, [r7, #0]
 8006d42:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d4a:	085b      	lsrs	r3, r3, #1
 8006d4c:	b2db      	uxtb	r3, r3
 8006d4e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006d52:	b2da      	uxtb	r2, r3
 8006d54:	683b      	ldr	r3, [r7, #0]
 8006d56:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 8006d5a:	683b      	ldr	r3, [r7, #0]
 8006d5c:	2201      	movs	r2, #1
 8006d5e:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8006d62:	2300      	movs	r3, #0
}
 8006d64:	4618      	mov	r0, r3
 8006d66:	370c      	adds	r7, #12
 8006d68:	46bd      	mov	sp, r7
 8006d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d6e:	4770      	bx	lr
 8006d70:	004005ff 	.word	0x004005ff

08006d74 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8006d74:	b480      	push	{r7}
 8006d76:	b083      	sub	sp, #12
 8006d78:	af00      	add	r7, sp, #0
 8006d7a:	6078      	str	r0, [r7, #4]
 8006d7c:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006d82:	683b      	ldr	r3, [r7, #0]
 8006d84:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006d8a:	683b      	ldr	r3, [r7, #0]
 8006d8c:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006d92:	683b      	ldr	r3, [r7, #0]
 8006d94:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006d9a:	683b      	ldr	r3, [r7, #0]
 8006d9c:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006da2:	683b      	ldr	r3, [r7, #0]
 8006da4:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8006daa:	683b      	ldr	r3, [r7, #0]
 8006dac:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8006db2:	683b      	ldr	r3, [r7, #0]
 8006db4:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8006dba:	683b      	ldr	r3, [r7, #0]
 8006dbc:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8006dbe:	2300      	movs	r3, #0
}
 8006dc0:	4618      	mov	r0, r3
 8006dc2:	370c      	adds	r7, #12
 8006dc4:	46bd      	mov	sp, r7
 8006dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dca:	4770      	bx	lr

08006dcc <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8006dcc:	b5b0      	push	{r4, r5, r7, lr}
 8006dce:	b08e      	sub	sp, #56	; 0x38
 8006dd0:	af04      	add	r7, sp, #16
 8006dd2:	6078      	str	r0, [r7, #4]
 8006dd4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	2203      	movs	r2, #3
 8006dda:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006de2:	2b03      	cmp	r3, #3
 8006de4:	d02e      	beq.n	8006e44 <HAL_SD_ConfigWideBusOperation+0x78>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 8006de6:	683b      	ldr	r3, [r7, #0]
 8006de8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006dec:	d106      	bne.n	8006dfc <HAL_SD_ConfigWideBusOperation+0x30>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006df2:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	639a      	str	r2, [r3, #56]	; 0x38
 8006dfa:	e029      	b.n	8006e50 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 8006dfc:	683b      	ldr	r3, [r7, #0]
 8006dfe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006e02:	d10a      	bne.n	8006e1a <HAL_SD_ConfigWideBusOperation+0x4e>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8006e04:	6878      	ldr	r0, [r7, #4]
 8006e06:	f000 fb0f 	bl	8007428 <SD_WideBus_Enable>
 8006e0a:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006e10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e12:	431a      	orrs	r2, r3
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	639a      	str	r2, [r3, #56]	; 0x38
 8006e18:	e01a      	b.n	8006e50 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 8006e1a:	683b      	ldr	r3, [r7, #0]
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d10a      	bne.n	8006e36 <HAL_SD_ConfigWideBusOperation+0x6a>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8006e20:	6878      	ldr	r0, [r7, #4]
 8006e22:	f000 fb4c 	bl	80074be <SD_WideBus_Disable>
 8006e26:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006e2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e2e:	431a      	orrs	r2, r3
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	639a      	str	r2, [r3, #56]	; 0x38
 8006e34:	e00c      	b.n	8006e50 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e3a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	639a      	str	r2, [r3, #56]	; 0x38
 8006e42:	e005      	b.n	8006e50 <HAL_SD_ConfigWideBusOperation+0x84>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e48:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	d009      	beq.n	8006e6c <HAL_SD_ConfigWideBusOperation+0xa0>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	4a18      	ldr	r2, [pc, #96]	; (8006ec0 <HAL_SD_ConfigWideBusOperation+0xf4>)
 8006e5e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	2201      	movs	r2, #1
 8006e64:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8006e68:	2301      	movs	r3, #1
 8006e6a:	e024      	b.n	8006eb6 <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	685b      	ldr	r3, [r3, #4]
 8006e70:	60fb      	str	r3, [r7, #12]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	689b      	ldr	r3, [r3, #8]
 8006e76:	613b      	str	r3, [r7, #16]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	68db      	ldr	r3, [r3, #12]
 8006e7c:	617b      	str	r3, [r7, #20]
    Init.BusWide             = WideMode;
 8006e7e:	683b      	ldr	r3, [r7, #0]
 8006e80:	61bb      	str	r3, [r7, #24]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	695b      	ldr	r3, [r3, #20]
 8006e86:	61fb      	str	r3, [r7, #28]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	699b      	ldr	r3, [r3, #24]
 8006e8c:	623b      	str	r3, [r7, #32]
    (void)SDIO_Init(hsd->Instance, Init);
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	681d      	ldr	r5, [r3, #0]
 8006e92:	466c      	mov	r4, sp
 8006e94:	f107 0318 	add.w	r3, r7, #24
 8006e98:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8006e9c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8006ea0:	f107 030c 	add.w	r3, r7, #12
 8006ea4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006ea6:	4628      	mov	r0, r5
 8006ea8:	f002 fb92 	bl	80095d0 <SDIO_Init>
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	2201      	movs	r2, #1
 8006eb0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8006eb4:	2300      	movs	r3, #0
}
 8006eb6:	4618      	mov	r0, r3
 8006eb8:	3728      	adds	r7, #40	; 0x28
 8006eba:	46bd      	mov	sp, r7
 8006ebc:	bdb0      	pop	{r4, r5, r7, pc}
 8006ebe:	bf00      	nop
 8006ec0:	004005ff 	.word	0x004005ff

08006ec4 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8006ec4:	b580      	push	{r7, lr}
 8006ec6:	b086      	sub	sp, #24
 8006ec8:	af00      	add	r7, sp, #0
 8006eca:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8006ecc:	2300      	movs	r3, #0
 8006ece:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8006ed0:	f107 030c 	add.w	r3, r7, #12
 8006ed4:	4619      	mov	r1, r3
 8006ed6:	6878      	ldr	r0, [r7, #4]
 8006ed8:	f000 fa7e 	bl	80073d8 <SD_SendStatus>
 8006edc:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006ede:	697b      	ldr	r3, [r7, #20]
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d005      	beq.n	8006ef0 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006ee8:	697b      	ldr	r3, [r7, #20]
 8006eea:	431a      	orrs	r2, r3
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	0a5b      	lsrs	r3, r3, #9
 8006ef4:	f003 030f 	and.w	r3, r3, #15
 8006ef8:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8006efa:	693b      	ldr	r3, [r7, #16]
}
 8006efc:	4618      	mov	r0, r3
 8006efe:	3718      	adds	r7, #24
 8006f00:	46bd      	mov	sp, r7
 8006f02:	bd80      	pop	{r7, pc}

08006f04 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8006f04:	b480      	push	{r7}
 8006f06:	b085      	sub	sp, #20
 8006f08:	af00      	add	r7, sp, #0
 8006f0a:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f10:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DATAEND));
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006f20:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8006f22:	bf00      	nop
 8006f24:	3714      	adds	r7, #20
 8006f26:	46bd      	mov	sp, r7
 8006f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f2c:	4770      	bx	lr

08006f2e <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006f2e:	b580      	push	{r7, lr}
 8006f30:	b084      	sub	sp, #16
 8006f32:	af00      	add	r7, sp, #0
 8006f34:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f3a:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f40:	2b82      	cmp	r3, #130	; 0x82
 8006f42:	d111      	bne.n	8006f68 <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	4618      	mov	r0, r3
 8006f4a:	f002 fcc7 	bl	80098dc <SDMMC_CmdStopTransfer>
 8006f4e:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006f50:	68bb      	ldr	r3, [r7, #8]
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d008      	beq.n	8006f68 <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006f5a:	68bb      	ldr	r3, [r7, #8]
 8006f5c:	431a      	orrs	r2, r3
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 8006f62:	68f8      	ldr	r0, [r7, #12]
 8006f64:	f7ff fd4e 	bl	8006a04 <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	f022 0208 	bic.w	r2, r2, #8
 8006f76:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	f240 523a 	movw	r2, #1338	; 0x53a
 8006f80:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	2201      	movs	r2, #1
 8006f86:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	2200      	movs	r2, #0
 8006f8e:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 8006f90:	68f8      	ldr	r0, [r7, #12]
 8006f92:	f7ff fd2d 	bl	80069f0 <HAL_SD_RxCpltCallback>
#endif
}
 8006f96:	bf00      	nop
 8006f98:	3710      	adds	r7, #16
 8006f9a:	46bd      	mov	sp, r7
 8006f9c:	bd80      	pop	{r7, pc}
	...

08006fa0 <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 8006fa0:	b580      	push	{r7, lr}
 8006fa2:	b086      	sub	sp, #24
 8006fa4:	af00      	add	r7, sp, #0
 8006fa6:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fac:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8006fae:	6878      	ldr	r0, [r7, #4]
 8006fb0:	f7fc fc0e 	bl	80037d0 <HAL_DMA_GetError>
 8006fb4:	4603      	mov	r3, r0
 8006fb6:	2b02      	cmp	r3, #2
 8006fb8:	d03e      	beq.n	8007038 <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 8006fba:	697b      	ldr	r3, [r7, #20]
 8006fbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fbe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006fc0:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 8006fc2:	697b      	ldr	r3, [r7, #20]
 8006fc4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006fc6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006fc8:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 8006fca:	693b      	ldr	r3, [r7, #16]
 8006fcc:	2b01      	cmp	r3, #1
 8006fce:	d002      	beq.n	8006fd6 <SD_DMAError+0x36>
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	2b01      	cmp	r3, #1
 8006fd4:	d12d      	bne.n	8007032 <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006fd6:	697b      	ldr	r3, [r7, #20]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	4a19      	ldr	r2, [pc, #100]	; (8007040 <SD_DMAError+0xa0>)
 8006fdc:	639a      	str	r2, [r3, #56]	; 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8006fde:	697b      	ldr	r3, [r7, #20]
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006fe4:	697b      	ldr	r3, [r7, #20]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8006fec:	63da      	str	r2, [r3, #60]	; 0x3c
        SDIO_IT_TXUNDERR| SDIO_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8006fee:	697b      	ldr	r3, [r7, #20]
 8006ff0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ff2:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006ff6:	697b      	ldr	r3, [r7, #20]
 8006ff8:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 8006ffa:	6978      	ldr	r0, [r7, #20]
 8006ffc:	f7ff ff62 	bl	8006ec4 <HAL_SD_GetCardState>
 8007000:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8007002:	68bb      	ldr	r3, [r7, #8]
 8007004:	2b06      	cmp	r3, #6
 8007006:	d002      	beq.n	800700e <SD_DMAError+0x6e>
 8007008:	68bb      	ldr	r3, [r7, #8]
 800700a:	2b05      	cmp	r3, #5
 800700c:	d10a      	bne.n	8007024 <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800700e:	697b      	ldr	r3, [r7, #20]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	4618      	mov	r0, r3
 8007014:	f002 fc62 	bl	80098dc <SDMMC_CmdStopTransfer>
 8007018:	4602      	mov	r2, r0
 800701a:	697b      	ldr	r3, [r7, #20]
 800701c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800701e:	431a      	orrs	r2, r3
 8007020:	697b      	ldr	r3, [r7, #20]
 8007022:	639a      	str	r2, [r3, #56]	; 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 8007024:	697b      	ldr	r3, [r7, #20]
 8007026:	2201      	movs	r2, #1
 8007028:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800702c:	697b      	ldr	r3, [r7, #20]
 800702e:	2200      	movs	r2, #0
 8007030:	631a      	str	r2, [r3, #48]	; 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 8007032:	6978      	ldr	r0, [r7, #20]
 8007034:	f7ff fce6 	bl	8006a04 <HAL_SD_ErrorCallback>
#endif
  }
}
 8007038:	bf00      	nop
 800703a:	3718      	adds	r7, #24
 800703c:	46bd      	mov	sp, r7
 800703e:	bd80      	pop	{r7, pc}
 8007040:	004005ff 	.word	0x004005ff

08007044 <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 8007044:	b580      	push	{r7, lr}
 8007046:	b084      	sub	sp, #16
 8007048:	af00      	add	r7, sp, #0
 800704a:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007050:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	f240 523a 	movw	r2, #1338	; 0x53a
 800705a:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 800705c:	68f8      	ldr	r0, [r7, #12]
 800705e:	f7ff ff31 	bl	8006ec4 <HAL_SD_GetCardState>
 8007062:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	2201      	movs	r2, #1
 8007068:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	2200      	movs	r2, #0
 8007070:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8007072:	68bb      	ldr	r3, [r7, #8]
 8007074:	2b06      	cmp	r3, #6
 8007076:	d002      	beq.n	800707e <SD_DMATxAbort+0x3a>
 8007078:	68bb      	ldr	r3, [r7, #8]
 800707a:	2b05      	cmp	r3, #5
 800707c:	d10a      	bne.n	8007094 <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	4618      	mov	r0, r3
 8007084:	f002 fc2a 	bl	80098dc <SDMMC_CmdStopTransfer>
 8007088:	4602      	mov	r2, r0
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800708e:	431a      	orrs	r2, r3
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007098:	2b00      	cmp	r3, #0
 800709a:	d103      	bne.n	80070a4 <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 800709c:	68f8      	ldr	r0, [r7, #12]
 800709e:	f7ff fcbb 	bl	8006a18 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 80070a2:	e002      	b.n	80070aa <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 80070a4:	68f8      	ldr	r0, [r7, #12]
 80070a6:	f7ff fcad 	bl	8006a04 <HAL_SD_ErrorCallback>
}
 80070aa:	bf00      	nop
 80070ac:	3710      	adds	r7, #16
 80070ae:	46bd      	mov	sp, r7
 80070b0:	bd80      	pop	{r7, pc}

080070b2 <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 80070b2:	b580      	push	{r7, lr}
 80070b4:	b084      	sub	sp, #16
 80070b6:	af00      	add	r7, sp, #0
 80070b8:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070be:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	f240 523a 	movw	r2, #1338	; 0x53a
 80070c8:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 80070ca:	68f8      	ldr	r0, [r7, #12]
 80070cc:	f7ff fefa 	bl	8006ec4 <HAL_SD_GetCardState>
 80070d0:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	2201      	movs	r2, #1
 80070d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	2200      	movs	r2, #0
 80070de:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 80070e0:	68bb      	ldr	r3, [r7, #8]
 80070e2:	2b06      	cmp	r3, #6
 80070e4:	d002      	beq.n	80070ec <SD_DMARxAbort+0x3a>
 80070e6:	68bb      	ldr	r3, [r7, #8]
 80070e8:	2b05      	cmp	r3, #5
 80070ea:	d10a      	bne.n	8007102 <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	4618      	mov	r0, r3
 80070f2:	f002 fbf3 	bl	80098dc <SDMMC_CmdStopTransfer>
 80070f6:	4602      	mov	r2, r0
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070fc:	431a      	orrs	r2, r3
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007106:	2b00      	cmp	r3, #0
 8007108:	d103      	bne.n	8007112 <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 800710a:	68f8      	ldr	r0, [r7, #12]
 800710c:	f7ff fc84 	bl	8006a18 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8007110:	e002      	b.n	8007118 <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8007112:	68f8      	ldr	r0, [r7, #12]
 8007114:	f7ff fc76 	bl	8006a04 <HAL_SD_ErrorCallback>
}
 8007118:	bf00      	nop
 800711a:	3710      	adds	r7, #16
 800711c:	46bd      	mov	sp, r7
 800711e:	bd80      	pop	{r7, pc}

08007120 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8007120:	b5b0      	push	{r4, r5, r7, lr}
 8007122:	b094      	sub	sp, #80	; 0x50
 8007124:	af04      	add	r7, sp, #16
 8007126:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8007128:	2301      	movs	r3, #1
 800712a:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	4618      	mov	r0, r3
 8007132:	f002 faa5 	bl	8009680 <SDIO_GetPowerState>
 8007136:	4603      	mov	r3, r0
 8007138:	2b00      	cmp	r3, #0
 800713a:	d102      	bne.n	8007142 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800713c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8007140:	e0b7      	b.n	80072b2 <SD_InitCard+0x192>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007146:	2b03      	cmp	r3, #3
 8007148:	d02f      	beq.n	80071aa <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	4618      	mov	r0, r3
 8007150:	f002 fcce 	bl	8009af0 <SDMMC_CmdSendCID>
 8007154:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8007156:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007158:	2b00      	cmp	r3, #0
 800715a:	d001      	beq.n	8007160 <SD_InitCard+0x40>
    {
      return errorstate;
 800715c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800715e:	e0a8      	b.n	80072b2 <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	2100      	movs	r1, #0
 8007166:	4618      	mov	r0, r3
 8007168:	f002 facf 	bl	800970a <SDIO_GetResponse>
 800716c:	4602      	mov	r2, r0
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	2104      	movs	r1, #4
 8007178:	4618      	mov	r0, r3
 800717a:	f002 fac6 	bl	800970a <SDIO_GetResponse>
 800717e:	4602      	mov	r2, r0
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	2108      	movs	r1, #8
 800718a:	4618      	mov	r0, r3
 800718c:	f002 fabd 	bl	800970a <SDIO_GetResponse>
 8007190:	4602      	mov	r2, r0
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	210c      	movs	r1, #12
 800719c:	4618      	mov	r0, r3
 800719e:	f002 fab4 	bl	800970a <SDIO_GetResponse>
 80071a2:	4602      	mov	r2, r0
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80071ae:	2b03      	cmp	r3, #3
 80071b0:	d00d      	beq.n	80071ce <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	f107 020e 	add.w	r2, r7, #14
 80071ba:	4611      	mov	r1, r2
 80071bc:	4618      	mov	r0, r3
 80071be:	f002 fcd4 	bl	8009b6a <SDMMC_CmdSetRelAdd>
 80071c2:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80071c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d001      	beq.n	80071ce <SD_InitCard+0xae>
    {
      return errorstate;
 80071ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80071cc:	e071      	b.n	80072b2 <SD_InitCard+0x192>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80071d2:	2b03      	cmp	r3, #3
 80071d4:	d036      	beq.n	8007244 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 80071d6:	89fb      	ldrh	r3, [r7, #14]
 80071d8:	461a      	mov	r2, r3
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	681a      	ldr	r2, [r3, #0]
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80071e6:	041b      	lsls	r3, r3, #16
 80071e8:	4619      	mov	r1, r3
 80071ea:	4610      	mov	r0, r2
 80071ec:	f002 fc9e 	bl	8009b2c <SDMMC_CmdSendCSD>
 80071f0:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80071f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d001      	beq.n	80071fc <SD_InitCard+0xdc>
    {
      return errorstate;
 80071f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80071fa:	e05a      	b.n	80072b2 <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	2100      	movs	r1, #0
 8007202:	4618      	mov	r0, r3
 8007204:	f002 fa81 	bl	800970a <SDIO_GetResponse>
 8007208:	4602      	mov	r2, r0
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	2104      	movs	r1, #4
 8007214:	4618      	mov	r0, r3
 8007216:	f002 fa78 	bl	800970a <SDIO_GetResponse>
 800721a:	4602      	mov	r2, r0
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	2108      	movs	r1, #8
 8007226:	4618      	mov	r0, r3
 8007228:	f002 fa6f 	bl	800970a <SDIO_GetResponse>
 800722c:	4602      	mov	r2, r0
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	210c      	movs	r1, #12
 8007238:	4618      	mov	r0, r3
 800723a:	f002 fa66 	bl	800970a <SDIO_GetResponse>
 800723e:	4602      	mov	r2, r0
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	2104      	movs	r1, #4
 800724a:	4618      	mov	r0, r3
 800724c:	f002 fa5d 	bl	800970a <SDIO_GetResponse>
 8007250:	4603      	mov	r3, r0
 8007252:	0d1a      	lsrs	r2, r3, #20
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8007258:	f107 0310 	add.w	r3, r7, #16
 800725c:	4619      	mov	r1, r3
 800725e:	6878      	ldr	r0, [r7, #4]
 8007260:	f7ff fbe4 	bl	8006a2c <HAL_SD_GetCardCSD>
 8007264:	4603      	mov	r3, r0
 8007266:	2b00      	cmp	r3, #0
 8007268:	d002      	beq.n	8007270 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800726a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800726e:	e020      	b.n	80072b2 <SD_InitCard+0x192>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	6819      	ldr	r1, [r3, #0]
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007278:	041b      	lsls	r3, r3, #16
 800727a:	f04f 0400 	mov.w	r4, #0
 800727e:	461a      	mov	r2, r3
 8007280:	4623      	mov	r3, r4
 8007282:	4608      	mov	r0, r1
 8007284:	f002 fb4c 	bl	8009920 <SDMMC_CmdSelDesel>
 8007288:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 800728a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800728c:	2b00      	cmp	r3, #0
 800728e:	d001      	beq.n	8007294 <SD_InitCard+0x174>
  {
    return errorstate;
 8007290:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007292:	e00e      	b.n	80072b2 <SD_InitCard+0x192>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	681d      	ldr	r5, [r3, #0]
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	466c      	mov	r4, sp
 800729c:	f103 0210 	add.w	r2, r3, #16
 80072a0:	ca07      	ldmia	r2, {r0, r1, r2}
 80072a2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80072a6:	3304      	adds	r3, #4
 80072a8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80072aa:	4628      	mov	r0, r5
 80072ac:	f002 f990 	bl	80095d0 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 80072b0:	2300      	movs	r3, #0
}
 80072b2:	4618      	mov	r0, r3
 80072b4:	3740      	adds	r7, #64	; 0x40
 80072b6:	46bd      	mov	sp, r7
 80072b8:	bdb0      	pop	{r4, r5, r7, pc}
	...

080072bc <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 80072bc:	b580      	push	{r7, lr}
 80072be:	b086      	sub	sp, #24
 80072c0:	af00      	add	r7, sp, #0
 80072c2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80072c4:	2300      	movs	r3, #0
 80072c6:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 80072c8:	2300      	movs	r3, #0
 80072ca:	617b      	str	r3, [r7, #20]
 80072cc:	2300      	movs	r3, #0
 80072ce:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	4618      	mov	r0, r3
 80072d6:	f002 fb46 	bl	8009966 <SDMMC_CmdGoIdleState>
 80072da:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d001      	beq.n	80072e6 <SD_PowerON+0x2a>
  {
    return errorstate;
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	e072      	b.n	80073cc <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	4618      	mov	r0, r3
 80072ec:	f002 fb59 	bl	80099a2 <SDMMC_CmdOperCond>
 80072f0:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	d00d      	beq.n	8007314 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	2200      	movs	r2, #0
 80072fc:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	4618      	mov	r0, r3
 8007304:	f002 fb2f 	bl	8009966 <SDMMC_CmdGoIdleState>
 8007308:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	2b00      	cmp	r3, #0
 800730e:	d004      	beq.n	800731a <SD_PowerON+0x5e>
    {
      return errorstate;
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	e05b      	b.n	80073cc <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	2201      	movs	r2, #1
 8007318:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800731e:	2b01      	cmp	r3, #1
 8007320:	d137      	bne.n	8007392 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	2100      	movs	r1, #0
 8007328:	4618      	mov	r0, r3
 800732a:	f002 fb59 	bl	80099e0 <SDMMC_CmdAppCommand>
 800732e:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	2b00      	cmp	r3, #0
 8007334:	d02d      	beq.n	8007392 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007336:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800733a:	e047      	b.n	80073cc <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	2100      	movs	r1, #0
 8007342:	4618      	mov	r0, r3
 8007344:	f002 fb4c 	bl	80099e0 <SDMMC_CmdAppCommand>
 8007348:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	2b00      	cmp	r3, #0
 800734e:	d001      	beq.n	8007354 <SD_PowerON+0x98>
    {
      return errorstate;
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	e03b      	b.n	80073cc <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	491e      	ldr	r1, [pc, #120]	; (80073d4 <SD_PowerON+0x118>)
 800735a:	4618      	mov	r0, r3
 800735c:	f002 fb62 	bl	8009a24 <SDMMC_CmdAppOperCommand>
 8007360:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	2b00      	cmp	r3, #0
 8007366:	d002      	beq.n	800736e <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007368:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800736c:	e02e      	b.n	80073cc <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	2100      	movs	r1, #0
 8007374:	4618      	mov	r0, r3
 8007376:	f002 f9c8 	bl	800970a <SDIO_GetResponse>
 800737a:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800737c:	697b      	ldr	r3, [r7, #20]
 800737e:	0fdb      	lsrs	r3, r3, #31
 8007380:	2b01      	cmp	r3, #1
 8007382:	d101      	bne.n	8007388 <SD_PowerON+0xcc>
 8007384:	2301      	movs	r3, #1
 8007386:	e000      	b.n	800738a <SD_PowerON+0xce>
 8007388:	2300      	movs	r3, #0
 800738a:	613b      	str	r3, [r7, #16]

    count++;
 800738c:	68bb      	ldr	r3, [r7, #8]
 800738e:	3301      	adds	r3, #1
 8007390:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8007392:	68bb      	ldr	r3, [r7, #8]
 8007394:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8007398:	4293      	cmp	r3, r2
 800739a:	d802      	bhi.n	80073a2 <SD_PowerON+0xe6>
 800739c:	693b      	ldr	r3, [r7, #16]
 800739e:	2b00      	cmp	r3, #0
 80073a0:	d0cc      	beq.n	800733c <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 80073a2:	68bb      	ldr	r3, [r7, #8]
 80073a4:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80073a8:	4293      	cmp	r3, r2
 80073aa:	d902      	bls.n	80073b2 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 80073ac:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80073b0:	e00c      	b.n	80073cc <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 80073b2:	697b      	ldr	r3, [r7, #20]
 80073b4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	d003      	beq.n	80073c4 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	2201      	movs	r2, #1
 80073c0:	645a      	str	r2, [r3, #68]	; 0x44
 80073c2:	e002      	b.n	80073ca <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	2200      	movs	r2, #0
 80073c8:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 80073ca:	2300      	movs	r3, #0
}
 80073cc:	4618      	mov	r0, r3
 80073ce:	3718      	adds	r7, #24
 80073d0:	46bd      	mov	sp, r7
 80073d2:	bd80      	pop	{r7, pc}
 80073d4:	c1100000 	.word	0xc1100000

080073d8 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 80073d8:	b580      	push	{r7, lr}
 80073da:	b084      	sub	sp, #16
 80073dc:	af00      	add	r7, sp, #0
 80073de:	6078      	str	r0, [r7, #4]
 80073e0:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 80073e2:	683b      	ldr	r3, [r7, #0]
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	d102      	bne.n	80073ee <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 80073e8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80073ec:	e018      	b.n	8007420 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	681a      	ldr	r2, [r3, #0]
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80073f6:	041b      	lsls	r3, r3, #16
 80073f8:	4619      	mov	r1, r3
 80073fa:	4610      	mov	r0, r2
 80073fc:	f002 fbd6 	bl	8009bac <SDMMC_CmdSendStatus>
 8007400:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	2b00      	cmp	r3, #0
 8007406:	d001      	beq.n	800740c <SD_SendStatus+0x34>
  {
    return errorstate;
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	e009      	b.n	8007420 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	2100      	movs	r1, #0
 8007412:	4618      	mov	r0, r3
 8007414:	f002 f979 	bl	800970a <SDIO_GetResponse>
 8007418:	4602      	mov	r2, r0
 800741a:	683b      	ldr	r3, [r7, #0]
 800741c:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800741e:	2300      	movs	r3, #0
}
 8007420:	4618      	mov	r0, r3
 8007422:	3710      	adds	r7, #16
 8007424:	46bd      	mov	sp, r7
 8007426:	bd80      	pop	{r7, pc}

08007428 <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8007428:	b580      	push	{r7, lr}
 800742a:	b086      	sub	sp, #24
 800742c:	af00      	add	r7, sp, #0
 800742e:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8007430:	2300      	movs	r3, #0
 8007432:	60fb      	str	r3, [r7, #12]
 8007434:	2300      	movs	r3, #0
 8007436:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	2100      	movs	r1, #0
 800743e:	4618      	mov	r0, r3
 8007440:	f002 f963 	bl	800970a <SDIO_GetResponse>
 8007444:	4603      	mov	r3, r0
 8007446:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800744a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800744e:	d102      	bne.n	8007456 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8007450:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007454:	e02f      	b.n	80074b6 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8007456:	f107 030c 	add.w	r3, r7, #12
 800745a:	4619      	mov	r1, r3
 800745c:	6878      	ldr	r0, [r7, #4]
 800745e:	f000 f879 	bl	8007554 <SD_FindSCR>
 8007462:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007464:	697b      	ldr	r3, [r7, #20]
 8007466:	2b00      	cmp	r3, #0
 8007468:	d001      	beq.n	800746e <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800746a:	697b      	ldr	r3, [r7, #20]
 800746c:	e023      	b.n	80074b6 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800746e:	693b      	ldr	r3, [r7, #16]
 8007470:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007474:	2b00      	cmp	r3, #0
 8007476:	d01c      	beq.n	80074b2 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	681a      	ldr	r2, [r3, #0]
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007480:	041b      	lsls	r3, r3, #16
 8007482:	4619      	mov	r1, r3
 8007484:	4610      	mov	r0, r2
 8007486:	f002 faab 	bl	80099e0 <SDMMC_CmdAppCommand>
 800748a:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800748c:	697b      	ldr	r3, [r7, #20]
 800748e:	2b00      	cmp	r3, #0
 8007490:	d001      	beq.n	8007496 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8007492:	697b      	ldr	r3, [r7, #20]
 8007494:	e00f      	b.n	80074b6 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	2102      	movs	r1, #2
 800749c:	4618      	mov	r0, r3
 800749e:	f002 fae4 	bl	8009a6a <SDMMC_CmdBusWidth>
 80074a2:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80074a4:	697b      	ldr	r3, [r7, #20]
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d001      	beq.n	80074ae <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 80074aa:	697b      	ldr	r3, [r7, #20]
 80074ac:	e003      	b.n	80074b6 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 80074ae:	2300      	movs	r3, #0
 80074b0:	e001      	b.n	80074b6 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80074b2:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 80074b6:	4618      	mov	r0, r3
 80074b8:	3718      	adds	r7, #24
 80074ba:	46bd      	mov	sp, r7
 80074bc:	bd80      	pop	{r7, pc}

080074be <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 80074be:	b580      	push	{r7, lr}
 80074c0:	b086      	sub	sp, #24
 80074c2:	af00      	add	r7, sp, #0
 80074c4:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 80074c6:	2300      	movs	r3, #0
 80074c8:	60fb      	str	r3, [r7, #12]
 80074ca:	2300      	movs	r3, #0
 80074cc:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	2100      	movs	r1, #0
 80074d4:	4618      	mov	r0, r3
 80074d6:	f002 f918 	bl	800970a <SDIO_GetResponse>
 80074da:	4603      	mov	r3, r0
 80074dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80074e0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80074e4:	d102      	bne.n	80074ec <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80074e6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80074ea:	e02f      	b.n	800754c <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 80074ec:	f107 030c 	add.w	r3, r7, #12
 80074f0:	4619      	mov	r1, r3
 80074f2:	6878      	ldr	r0, [r7, #4]
 80074f4:	f000 f82e 	bl	8007554 <SD_FindSCR>
 80074f8:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80074fa:	697b      	ldr	r3, [r7, #20]
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	d001      	beq.n	8007504 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8007500:	697b      	ldr	r3, [r7, #20]
 8007502:	e023      	b.n	800754c <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8007504:	693b      	ldr	r3, [r7, #16]
 8007506:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800750a:	2b00      	cmp	r3, #0
 800750c:	d01c      	beq.n	8007548 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	681a      	ldr	r2, [r3, #0]
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007516:	041b      	lsls	r3, r3, #16
 8007518:	4619      	mov	r1, r3
 800751a:	4610      	mov	r0, r2
 800751c:	f002 fa60 	bl	80099e0 <SDMMC_CmdAppCommand>
 8007520:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007522:	697b      	ldr	r3, [r7, #20]
 8007524:	2b00      	cmp	r3, #0
 8007526:	d001      	beq.n	800752c <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8007528:	697b      	ldr	r3, [r7, #20]
 800752a:	e00f      	b.n	800754c <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	2100      	movs	r1, #0
 8007532:	4618      	mov	r0, r3
 8007534:	f002 fa99 	bl	8009a6a <SDMMC_CmdBusWidth>
 8007538:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800753a:	697b      	ldr	r3, [r7, #20]
 800753c:	2b00      	cmp	r3, #0
 800753e:	d001      	beq.n	8007544 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8007540:	697b      	ldr	r3, [r7, #20]
 8007542:	e003      	b.n	800754c <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8007544:	2300      	movs	r3, #0
 8007546:	e001      	b.n	800754c <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8007548:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800754c:	4618      	mov	r0, r3
 800754e:	3718      	adds	r7, #24
 8007550:	46bd      	mov	sp, r7
 8007552:	bd80      	pop	{r7, pc}

08007554 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8007554:	b590      	push	{r4, r7, lr}
 8007556:	b08f      	sub	sp, #60	; 0x3c
 8007558:	af00      	add	r7, sp, #0
 800755a:	6078      	str	r0, [r7, #4]
 800755c:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800755e:	f7fb fd45 	bl	8002fec <HAL_GetTick>
 8007562:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 8007564:	2300      	movs	r3, #0
 8007566:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 8007568:	2300      	movs	r3, #0
 800756a:	60bb      	str	r3, [r7, #8]
 800756c:	2300      	movs	r3, #0
 800756e:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8007570:	683b      	ldr	r3, [r7, #0]
 8007572:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	2108      	movs	r1, #8
 800757a:	4618      	mov	r0, r3
 800757c:	f002 f904 	bl	8009788 <SDMMC_CmdBlockLength>
 8007580:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8007582:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007584:	2b00      	cmp	r3, #0
 8007586:	d001      	beq.n	800758c <SD_FindSCR+0x38>
  {
    return errorstate;
 8007588:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800758a:	e0a9      	b.n	80076e0 <SD_FindSCR+0x18c>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	681a      	ldr	r2, [r3, #0]
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007594:	041b      	lsls	r3, r3, #16
 8007596:	4619      	mov	r1, r3
 8007598:	4610      	mov	r0, r2
 800759a:	f002 fa21 	bl	80099e0 <SDMMC_CmdAppCommand>
 800759e:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 80075a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d001      	beq.n	80075aa <SD_FindSCR+0x56>
  {
    return errorstate;
 80075a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075a8:	e09a      	b.n	80076e0 <SD_FindSCR+0x18c>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80075aa:	f04f 33ff 	mov.w	r3, #4294967295
 80075ae:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 80075b0:	2308      	movs	r3, #8
 80075b2:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 80075b4:	2330      	movs	r3, #48	; 0x30
 80075b6:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 80075b8:	2302      	movs	r3, #2
 80075ba:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 80075bc:	2300      	movs	r3, #0
 80075be:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 80075c0:	2301      	movs	r3, #1
 80075c2:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	f107 0210 	add.w	r2, r7, #16
 80075cc:	4611      	mov	r1, r2
 80075ce:	4618      	mov	r0, r3
 80075d0:	f002 f8ae 	bl	8009730 <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	4618      	mov	r0, r3
 80075da:	f002 fa68 	bl	8009aae <SDMMC_CmdSendSCR>
 80075de:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 80075e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	d022      	beq.n	800762c <SD_FindSCR+0xd8>
  {
    return errorstate;
 80075e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075e8:	e07a      	b.n	80076e0 <SD_FindSCR+0x18c>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80075f0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	d00e      	beq.n	8007616 <SD_FindSCR+0xc2>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	6819      	ldr	r1, [r3, #0]
 80075fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80075fe:	009b      	lsls	r3, r3, #2
 8007600:	f107 0208 	add.w	r2, r7, #8
 8007604:	18d4      	adds	r4, r2, r3
 8007606:	4608      	mov	r0, r1
 8007608:	f002 f80d 	bl	8009626 <SDIO_ReadFIFO>
 800760c:	4603      	mov	r3, r0
 800760e:	6023      	str	r3, [r4, #0]
      index++;
 8007610:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007612:	3301      	adds	r3, #1
 8007614:	637b      	str	r3, [r7, #52]	; 0x34
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8007616:	f7fb fce9 	bl	8002fec <HAL_GetTick>
 800761a:	4602      	mov	r2, r0
 800761c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800761e:	1ad3      	subs	r3, r2, r3
 8007620:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007624:	d102      	bne.n	800762c <SD_FindSCR+0xd8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8007626:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800762a:	e059      	b.n	80076e0 <SD_FindSCR+0x18c>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007632:	f240 432a 	movw	r3, #1066	; 0x42a
 8007636:	4013      	ands	r3, r2
 8007638:	2b00      	cmp	r3, #0
 800763a:	d0d6      	beq.n	80075ea <SD_FindSCR+0x96>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007642:	f003 0308 	and.w	r3, r3, #8
 8007646:	2b00      	cmp	r3, #0
 8007648:	d005      	beq.n	8007656 <SD_FindSCR+0x102>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	2208      	movs	r2, #8
 8007650:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8007652:	2308      	movs	r3, #8
 8007654:	e044      	b.n	80076e0 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800765c:	f003 0302 	and.w	r3, r3, #2
 8007660:	2b00      	cmp	r3, #0
 8007662:	d005      	beq.n	8007670 <SD_FindSCR+0x11c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	2202      	movs	r2, #2
 800766a:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800766c:	2302      	movs	r3, #2
 800766e:	e037      	b.n	80076e0 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007676:	f003 0320 	and.w	r3, r3, #32
 800767a:	2b00      	cmp	r3, #0
 800767c:	d005      	beq.n	800768a <SD_FindSCR+0x136>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	2220      	movs	r2, #32
 8007684:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8007686:	2320      	movs	r3, #32
 8007688:	e02a      	b.n	80076e0 <SD_FindSCR+0x18c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	f240 523a 	movw	r2, #1338	; 0x53a
 8007692:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	061a      	lsls	r2, r3, #24
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	021b      	lsls	r3, r3, #8
 800769c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80076a0:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	0a1b      	lsrs	r3, r3, #8
 80076a6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80076aa:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	0e1b      	lsrs	r3, r3, #24
 80076b0:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80076b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076b4:	601a      	str	r2, [r3, #0]
    scr++;
 80076b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076b8:	3304      	adds	r3, #4
 80076ba:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80076bc:	68bb      	ldr	r3, [r7, #8]
 80076be:	061a      	lsls	r2, r3, #24
 80076c0:	68bb      	ldr	r3, [r7, #8]
 80076c2:	021b      	lsls	r3, r3, #8
 80076c4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80076c8:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 80076ca:	68bb      	ldr	r3, [r7, #8]
 80076cc:	0a1b      	lsrs	r3, r3, #8
 80076ce:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80076d2:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 80076d4:	68bb      	ldr	r3, [r7, #8]
 80076d6:	0e1b      	lsrs	r3, r3, #24
 80076d8:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80076da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076dc:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 80076de:	2300      	movs	r3, #0
}
 80076e0:	4618      	mov	r0, r3
 80076e2:	373c      	adds	r7, #60	; 0x3c
 80076e4:	46bd      	mov	sp, r7
 80076e6:	bd90      	pop	{r4, r7, pc}

080076e8 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 80076e8:	b580      	push	{r7, lr}
 80076ea:	b086      	sub	sp, #24
 80076ec:	af00      	add	r7, sp, #0
 80076ee:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076f4:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076fa:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 80076fc:	693b      	ldr	r3, [r7, #16]
 80076fe:	2b00      	cmp	r3, #0
 8007700:	d03f      	beq.n	8007782 <SD_Read_IT+0x9a>
  {
    /* Read data from SDIO Rx FIFO */
    for(count = 0U; count < 8U; count++)
 8007702:	2300      	movs	r3, #0
 8007704:	617b      	str	r3, [r7, #20]
 8007706:	e033      	b.n	8007770 <SD_Read_IT+0x88>
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	4618      	mov	r0, r3
 800770e:	f001 ff8a 	bl	8009626 <SDIO_ReadFIFO>
 8007712:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 8007714:	68bb      	ldr	r3, [r7, #8]
 8007716:	b2da      	uxtb	r2, r3
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	701a      	strb	r2, [r3, #0]
      tmp++;
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	3301      	adds	r3, #1
 8007720:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8007722:	693b      	ldr	r3, [r7, #16]
 8007724:	3b01      	subs	r3, #1
 8007726:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 8007728:	68bb      	ldr	r3, [r7, #8]
 800772a:	0a1b      	lsrs	r3, r3, #8
 800772c:	b2da      	uxtb	r2, r3
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	701a      	strb	r2, [r3, #0]
      tmp++;
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	3301      	adds	r3, #1
 8007736:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8007738:	693b      	ldr	r3, [r7, #16]
 800773a:	3b01      	subs	r3, #1
 800773c:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 800773e:	68bb      	ldr	r3, [r7, #8]
 8007740:	0c1b      	lsrs	r3, r3, #16
 8007742:	b2da      	uxtb	r2, r3
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	701a      	strb	r2, [r3, #0]
      tmp++;
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	3301      	adds	r3, #1
 800774c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800774e:	693b      	ldr	r3, [r7, #16]
 8007750:	3b01      	subs	r3, #1
 8007752:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 8007754:	68bb      	ldr	r3, [r7, #8]
 8007756:	0e1b      	lsrs	r3, r3, #24
 8007758:	b2da      	uxtb	r2, r3
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	701a      	strb	r2, [r3, #0]
      tmp++;
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	3301      	adds	r3, #1
 8007762:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8007764:	693b      	ldr	r3, [r7, #16]
 8007766:	3b01      	subs	r3, #1
 8007768:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 800776a:	697b      	ldr	r3, [r7, #20]
 800776c:	3301      	adds	r3, #1
 800776e:	617b      	str	r3, [r7, #20]
 8007770:	697b      	ldr	r3, [r7, #20]
 8007772:	2b07      	cmp	r3, #7
 8007774:	d9c8      	bls.n	8007708 <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	68fa      	ldr	r2, [r7, #12]
 800777a:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	693a      	ldr	r2, [r7, #16]
 8007780:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 8007782:	bf00      	nop
 8007784:	3718      	adds	r7, #24
 8007786:	46bd      	mov	sp, r7
 8007788:	bd80      	pop	{r7, pc}

0800778a <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 800778a:	b580      	push	{r7, lr}
 800778c:	b086      	sub	sp, #24
 800778e:	af00      	add	r7, sp, #0
 8007790:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	6a1b      	ldr	r3, [r3, #32]
 8007796:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800779c:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800779e:	693b      	ldr	r3, [r7, #16]
 80077a0:	2b00      	cmp	r3, #0
 80077a2:	d043      	beq.n	800782c <SD_Write_IT+0xa2>
  {
    /* Write data to SDIO Tx FIFO */
    for(count = 0U; count < 8U; count++)
 80077a4:	2300      	movs	r3, #0
 80077a6:	617b      	str	r3, [r7, #20]
 80077a8:	e037      	b.n	800781a <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	781b      	ldrb	r3, [r3, #0]
 80077ae:	60bb      	str	r3, [r7, #8]
      tmp++;
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	3301      	adds	r3, #1
 80077b4:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80077b6:	693b      	ldr	r3, [r7, #16]
 80077b8:	3b01      	subs	r3, #1
 80077ba:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	781b      	ldrb	r3, [r3, #0]
 80077c0:	021a      	lsls	r2, r3, #8
 80077c2:	68bb      	ldr	r3, [r7, #8]
 80077c4:	4313      	orrs	r3, r2
 80077c6:	60bb      	str	r3, [r7, #8]
      tmp++;
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	3301      	adds	r3, #1
 80077cc:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80077ce:	693b      	ldr	r3, [r7, #16]
 80077d0:	3b01      	subs	r3, #1
 80077d2:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	781b      	ldrb	r3, [r3, #0]
 80077d8:	041a      	lsls	r2, r3, #16
 80077da:	68bb      	ldr	r3, [r7, #8]
 80077dc:	4313      	orrs	r3, r2
 80077de:	60bb      	str	r3, [r7, #8]
      tmp++;
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	3301      	adds	r3, #1
 80077e4:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80077e6:	693b      	ldr	r3, [r7, #16]
 80077e8:	3b01      	subs	r3, #1
 80077ea:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	781b      	ldrb	r3, [r3, #0]
 80077f0:	061a      	lsls	r2, r3, #24
 80077f2:	68bb      	ldr	r3, [r7, #8]
 80077f4:	4313      	orrs	r3, r2
 80077f6:	60bb      	str	r3, [r7, #8]
      tmp++;
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	3301      	adds	r3, #1
 80077fc:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80077fe:	693b      	ldr	r3, [r7, #16]
 8007800:	3b01      	subs	r3, #1
 8007802:	613b      	str	r3, [r7, #16]
      (void)SDIO_WriteFIFO(hsd->Instance, &data);
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	f107 0208 	add.w	r2, r7, #8
 800780c:	4611      	mov	r1, r2
 800780e:	4618      	mov	r0, r3
 8007810:	f001 ff16 	bl	8009640 <SDIO_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 8007814:	697b      	ldr	r3, [r7, #20]
 8007816:	3301      	adds	r3, #1
 8007818:	617b      	str	r3, [r7, #20]
 800781a:	697b      	ldr	r3, [r7, #20]
 800781c:	2b07      	cmp	r3, #7
 800781e:	d9c4      	bls.n	80077aa <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	68fa      	ldr	r2, [r7, #12]
 8007824:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	693a      	ldr	r2, [r7, #16]
 800782a:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 800782c:	bf00      	nop
 800782e:	3718      	adds	r7, #24
 8007830:	46bd      	mov	sp, r7
 8007832:	bd80      	pop	{r7, pc}

08007834 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007834:	b580      	push	{r7, lr}
 8007836:	b082      	sub	sp, #8
 8007838:	af00      	add	r7, sp, #0
 800783a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	2b00      	cmp	r3, #0
 8007840:	d101      	bne.n	8007846 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007842:	2301      	movs	r3, #1
 8007844:	e056      	b.n	80078f4 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	2200      	movs	r2, #0
 800784a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007852:	b2db      	uxtb	r3, r3
 8007854:	2b00      	cmp	r3, #0
 8007856:	d106      	bne.n	8007866 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	2200      	movs	r2, #0
 800785c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007860:	6878      	ldr	r0, [r7, #4]
 8007862:	f7fb f95d 	bl	8002b20 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	2202      	movs	r2, #2
 800786a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	681a      	ldr	r2, [r3, #0]
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800787c:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	685a      	ldr	r2, [r3, #4]
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	689b      	ldr	r3, [r3, #8]
 8007886:	431a      	orrs	r2, r3
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	68db      	ldr	r3, [r3, #12]
 800788c:	431a      	orrs	r2, r3
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	691b      	ldr	r3, [r3, #16]
 8007892:	431a      	orrs	r2, r3
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	695b      	ldr	r3, [r3, #20]
 8007898:	431a      	orrs	r2, r3
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	699b      	ldr	r3, [r3, #24]
 800789e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80078a2:	431a      	orrs	r2, r3
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	69db      	ldr	r3, [r3, #28]
 80078a8:	431a      	orrs	r2, r3
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	6a1b      	ldr	r3, [r3, #32]
 80078ae:	ea42 0103 	orr.w	r1, r2, r3
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	430a      	orrs	r2, r1
 80078bc:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	699b      	ldr	r3, [r3, #24]
 80078c2:	0c1b      	lsrs	r3, r3, #16
 80078c4:	f003 0104 	and.w	r1, r3, #4
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	430a      	orrs	r2, r1
 80078d2:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	69da      	ldr	r2, [r3, #28]
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80078e2:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	2200      	movs	r2, #0
 80078e8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	2201      	movs	r2, #1
 80078ee:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80078f2:	2300      	movs	r3, #0
}
 80078f4:	4618      	mov	r0, r3
 80078f6:	3708      	adds	r7, #8
 80078f8:	46bd      	mov	sp, r7
 80078fa:	bd80      	pop	{r7, pc}

080078fc <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80078fc:	b580      	push	{r7, lr}
 80078fe:	b088      	sub	sp, #32
 8007900:	af00      	add	r7, sp, #0
 8007902:	60f8      	str	r0, [r7, #12]
 8007904:	60b9      	str	r1, [r7, #8]
 8007906:	603b      	str	r3, [r7, #0]
 8007908:	4613      	mov	r3, r2
 800790a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800790c:	2300      	movs	r3, #0
 800790e:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007916:	2b01      	cmp	r3, #1
 8007918:	d101      	bne.n	800791e <HAL_SPI_Transmit+0x22>
 800791a:	2302      	movs	r3, #2
 800791c:	e11e      	b.n	8007b5c <HAL_SPI_Transmit+0x260>
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	2201      	movs	r2, #1
 8007922:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007926:	f7fb fb61 	bl	8002fec <HAL_GetTick>
 800792a:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800792c:	88fb      	ldrh	r3, [r7, #6]
 800792e:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007936:	b2db      	uxtb	r3, r3
 8007938:	2b01      	cmp	r3, #1
 800793a:	d002      	beq.n	8007942 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800793c:	2302      	movs	r3, #2
 800793e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8007940:	e103      	b.n	8007b4a <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 8007942:	68bb      	ldr	r3, [r7, #8]
 8007944:	2b00      	cmp	r3, #0
 8007946:	d002      	beq.n	800794e <HAL_SPI_Transmit+0x52>
 8007948:	88fb      	ldrh	r3, [r7, #6]
 800794a:	2b00      	cmp	r3, #0
 800794c:	d102      	bne.n	8007954 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800794e:	2301      	movs	r3, #1
 8007950:	77fb      	strb	r3, [r7, #31]
    goto error;
 8007952:	e0fa      	b.n	8007b4a <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	2203      	movs	r2, #3
 8007958:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	2200      	movs	r2, #0
 8007960:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8007962:	68fb      	ldr	r3, [r7, #12]
 8007964:	68ba      	ldr	r2, [r7, #8]
 8007966:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	88fa      	ldrh	r2, [r7, #6]
 800796c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	88fa      	ldrh	r2, [r7, #6]
 8007972:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8007974:	68fb      	ldr	r3, [r7, #12]
 8007976:	2200      	movs	r2, #0
 8007978:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	2200      	movs	r2, #0
 800797e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	2200      	movs	r2, #0
 8007984:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	2200      	movs	r2, #0
 800798a:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	2200      	movs	r2, #0
 8007990:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	689b      	ldr	r3, [r3, #8]
 8007996:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800799a:	d107      	bne.n	80079ac <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	681a      	ldr	r2, [r3, #0]
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80079aa:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80079b6:	2b40      	cmp	r3, #64	; 0x40
 80079b8:	d007      	beq.n	80079ca <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80079ba:	68fb      	ldr	r3, [r7, #12]
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	681a      	ldr	r2, [r3, #0]
 80079c0:	68fb      	ldr	r3, [r7, #12]
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80079c8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	68db      	ldr	r3, [r3, #12]
 80079ce:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80079d2:	d14b      	bne.n	8007a6c <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	685b      	ldr	r3, [r3, #4]
 80079d8:	2b00      	cmp	r3, #0
 80079da:	d002      	beq.n	80079e2 <HAL_SPI_Transmit+0xe6>
 80079dc:	8afb      	ldrh	r3, [r7, #22]
 80079de:	2b01      	cmp	r3, #1
 80079e0:	d13e      	bne.n	8007a60 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079e6:	881a      	ldrh	r2, [r3, #0]
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80079ee:	68fb      	ldr	r3, [r7, #12]
 80079f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079f2:	1c9a      	adds	r2, r3, #2
 80079f4:	68fb      	ldr	r3, [r7, #12]
 80079f6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80079fc:	b29b      	uxth	r3, r3
 80079fe:	3b01      	subs	r3, #1
 8007a00:	b29a      	uxth	r2, r3
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8007a06:	e02b      	b.n	8007a60 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	689b      	ldr	r3, [r3, #8]
 8007a0e:	f003 0302 	and.w	r3, r3, #2
 8007a12:	2b02      	cmp	r3, #2
 8007a14:	d112      	bne.n	8007a3c <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007a16:	68fb      	ldr	r3, [r7, #12]
 8007a18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a1a:	881a      	ldrh	r2, [r3, #0]
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a26:	1c9a      	adds	r2, r3, #2
 8007a28:	68fb      	ldr	r3, [r7, #12]
 8007a2a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007a30:	b29b      	uxth	r3, r3
 8007a32:	3b01      	subs	r3, #1
 8007a34:	b29a      	uxth	r2, r3
 8007a36:	68fb      	ldr	r3, [r7, #12]
 8007a38:	86da      	strh	r2, [r3, #54]	; 0x36
 8007a3a:	e011      	b.n	8007a60 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007a3c:	f7fb fad6 	bl	8002fec <HAL_GetTick>
 8007a40:	4602      	mov	r2, r0
 8007a42:	69bb      	ldr	r3, [r7, #24]
 8007a44:	1ad3      	subs	r3, r2, r3
 8007a46:	683a      	ldr	r2, [r7, #0]
 8007a48:	429a      	cmp	r2, r3
 8007a4a:	d803      	bhi.n	8007a54 <HAL_SPI_Transmit+0x158>
 8007a4c:	683b      	ldr	r3, [r7, #0]
 8007a4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a52:	d102      	bne.n	8007a5a <HAL_SPI_Transmit+0x15e>
 8007a54:	683b      	ldr	r3, [r7, #0]
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	d102      	bne.n	8007a60 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 8007a5a:	2303      	movs	r3, #3
 8007a5c:	77fb      	strb	r3, [r7, #31]
          goto error;
 8007a5e:	e074      	b.n	8007b4a <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8007a60:	68fb      	ldr	r3, [r7, #12]
 8007a62:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007a64:	b29b      	uxth	r3, r3
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	d1ce      	bne.n	8007a08 <HAL_SPI_Transmit+0x10c>
 8007a6a:	e04c      	b.n	8007b06 <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	685b      	ldr	r3, [r3, #4]
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	d002      	beq.n	8007a7a <HAL_SPI_Transmit+0x17e>
 8007a74:	8afb      	ldrh	r3, [r7, #22]
 8007a76:	2b01      	cmp	r3, #1
 8007a78:	d140      	bne.n	8007afc <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007a7a:	68fb      	ldr	r3, [r7, #12]
 8007a7c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	330c      	adds	r3, #12
 8007a84:	7812      	ldrb	r2, [r2, #0]
 8007a86:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007a88:	68fb      	ldr	r3, [r7, #12]
 8007a8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a8c:	1c5a      	adds	r2, r3, #1
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007a96:	b29b      	uxth	r3, r3
 8007a98:	3b01      	subs	r3, #1
 8007a9a:	b29a      	uxth	r2, r3
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8007aa0:	e02c      	b.n	8007afc <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	689b      	ldr	r3, [r3, #8]
 8007aa8:	f003 0302 	and.w	r3, r3, #2
 8007aac:	2b02      	cmp	r3, #2
 8007aae:	d113      	bne.n	8007ad8 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	330c      	adds	r3, #12
 8007aba:	7812      	ldrb	r2, [r2, #0]
 8007abc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8007abe:	68fb      	ldr	r3, [r7, #12]
 8007ac0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ac2:	1c5a      	adds	r2, r3, #1
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007ac8:	68fb      	ldr	r3, [r7, #12]
 8007aca:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007acc:	b29b      	uxth	r3, r3
 8007ace:	3b01      	subs	r3, #1
 8007ad0:	b29a      	uxth	r2, r3
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	86da      	strh	r2, [r3, #54]	; 0x36
 8007ad6:	e011      	b.n	8007afc <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007ad8:	f7fb fa88 	bl	8002fec <HAL_GetTick>
 8007adc:	4602      	mov	r2, r0
 8007ade:	69bb      	ldr	r3, [r7, #24]
 8007ae0:	1ad3      	subs	r3, r2, r3
 8007ae2:	683a      	ldr	r2, [r7, #0]
 8007ae4:	429a      	cmp	r2, r3
 8007ae6:	d803      	bhi.n	8007af0 <HAL_SPI_Transmit+0x1f4>
 8007ae8:	683b      	ldr	r3, [r7, #0]
 8007aea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007aee:	d102      	bne.n	8007af6 <HAL_SPI_Transmit+0x1fa>
 8007af0:	683b      	ldr	r3, [r7, #0]
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	d102      	bne.n	8007afc <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 8007af6:	2303      	movs	r3, #3
 8007af8:	77fb      	strb	r3, [r7, #31]
          goto error;
 8007afa:	e026      	b.n	8007b4a <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8007afc:	68fb      	ldr	r3, [r7, #12]
 8007afe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007b00:	b29b      	uxth	r3, r3
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	d1cd      	bne.n	8007aa2 <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007b06:	69ba      	ldr	r2, [r7, #24]
 8007b08:	6839      	ldr	r1, [r7, #0]
 8007b0a:	68f8      	ldr	r0, [r7, #12]
 8007b0c:	f000 fa44 	bl	8007f98 <SPI_EndRxTxTransaction>
 8007b10:	4603      	mov	r3, r0
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	d002      	beq.n	8007b1c <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007b16:	68fb      	ldr	r3, [r7, #12]
 8007b18:	2220      	movs	r2, #32
 8007b1a:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	689b      	ldr	r3, [r3, #8]
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	d10a      	bne.n	8007b3a <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007b24:	2300      	movs	r3, #0
 8007b26:	613b      	str	r3, [r7, #16]
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	68db      	ldr	r3, [r3, #12]
 8007b2e:	613b      	str	r3, [r7, #16]
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	689b      	ldr	r3, [r3, #8]
 8007b36:	613b      	str	r3, [r7, #16]
 8007b38:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007b3a:	68fb      	ldr	r3, [r7, #12]
 8007b3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	d002      	beq.n	8007b48 <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 8007b42:	2301      	movs	r3, #1
 8007b44:	77fb      	strb	r3, [r7, #31]
 8007b46:	e000      	b.n	8007b4a <HAL_SPI_Transmit+0x24e>
  }

error:
 8007b48:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007b4a:	68fb      	ldr	r3, [r7, #12]
 8007b4c:	2201      	movs	r2, #1
 8007b4e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	2200      	movs	r2, #0
 8007b56:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8007b5a:	7ffb      	ldrb	r3, [r7, #31]
}
 8007b5c:	4618      	mov	r0, r3
 8007b5e:	3720      	adds	r7, #32
 8007b60:	46bd      	mov	sp, r7
 8007b62:	bd80      	pop	{r7, pc}

08007b64 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8007b64:	b580      	push	{r7, lr}
 8007b66:	b08c      	sub	sp, #48	; 0x30
 8007b68:	af00      	add	r7, sp, #0
 8007b6a:	60f8      	str	r0, [r7, #12]
 8007b6c:	60b9      	str	r1, [r7, #8]
 8007b6e:	607a      	str	r2, [r7, #4]
 8007b70:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8007b72:	2301      	movs	r3, #1
 8007b74:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8007b76:	2300      	movs	r3, #0
 8007b78:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007b7c:	68fb      	ldr	r3, [r7, #12]
 8007b7e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007b82:	2b01      	cmp	r3, #1
 8007b84:	d101      	bne.n	8007b8a <HAL_SPI_TransmitReceive+0x26>
 8007b86:	2302      	movs	r3, #2
 8007b88:	e18a      	b.n	8007ea0 <HAL_SPI_TransmitReceive+0x33c>
 8007b8a:	68fb      	ldr	r3, [r7, #12]
 8007b8c:	2201      	movs	r2, #1
 8007b8e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007b92:	f7fb fa2b 	bl	8002fec <HAL_GetTick>
 8007b96:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007b9e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	685b      	ldr	r3, [r3, #4]
 8007ba6:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8007ba8:	887b      	ldrh	r3, [r7, #2]
 8007baa:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8007bac:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007bb0:	2b01      	cmp	r3, #1
 8007bb2:	d00f      	beq.n	8007bd4 <HAL_SPI_TransmitReceive+0x70>
 8007bb4:	69fb      	ldr	r3, [r7, #28]
 8007bb6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007bba:	d107      	bne.n	8007bcc <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	689b      	ldr	r3, [r3, #8]
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	d103      	bne.n	8007bcc <HAL_SPI_TransmitReceive+0x68>
 8007bc4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007bc8:	2b04      	cmp	r3, #4
 8007bca:	d003      	beq.n	8007bd4 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8007bcc:	2302      	movs	r3, #2
 8007bce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8007bd2:	e15b      	b.n	8007e8c <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8007bd4:	68bb      	ldr	r3, [r7, #8]
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	d005      	beq.n	8007be6 <HAL_SPI_TransmitReceive+0x82>
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	d002      	beq.n	8007be6 <HAL_SPI_TransmitReceive+0x82>
 8007be0:	887b      	ldrh	r3, [r7, #2]
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	d103      	bne.n	8007bee <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8007be6:	2301      	movs	r3, #1
 8007be8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8007bec:	e14e      	b.n	8007e8c <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007bee:	68fb      	ldr	r3, [r7, #12]
 8007bf0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007bf4:	b2db      	uxtb	r3, r3
 8007bf6:	2b04      	cmp	r3, #4
 8007bf8:	d003      	beq.n	8007c02 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	2205      	movs	r2, #5
 8007bfe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007c02:	68fb      	ldr	r3, [r7, #12]
 8007c04:	2200      	movs	r2, #0
 8007c06:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	687a      	ldr	r2, [r7, #4]
 8007c0c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8007c0e:	68fb      	ldr	r3, [r7, #12]
 8007c10:	887a      	ldrh	r2, [r7, #2]
 8007c12:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8007c14:	68fb      	ldr	r3, [r7, #12]
 8007c16:	887a      	ldrh	r2, [r7, #2]
 8007c18:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	68ba      	ldr	r2, [r7, #8]
 8007c1e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	887a      	ldrh	r2, [r7, #2]
 8007c24:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8007c26:	68fb      	ldr	r3, [r7, #12]
 8007c28:	887a      	ldrh	r2, [r7, #2]
 8007c2a:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8007c2c:	68fb      	ldr	r3, [r7, #12]
 8007c2e:	2200      	movs	r2, #0
 8007c30:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	2200      	movs	r2, #0
 8007c36:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c42:	2b40      	cmp	r3, #64	; 0x40
 8007c44:	d007      	beq.n	8007c56 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	681a      	ldr	r2, [r3, #0]
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007c54:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007c56:	68fb      	ldr	r3, [r7, #12]
 8007c58:	68db      	ldr	r3, [r3, #12]
 8007c5a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007c5e:	d178      	bne.n	8007d52 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	685b      	ldr	r3, [r3, #4]
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	d002      	beq.n	8007c6e <HAL_SPI_TransmitReceive+0x10a>
 8007c68:	8b7b      	ldrh	r3, [r7, #26]
 8007c6a:	2b01      	cmp	r3, #1
 8007c6c:	d166      	bne.n	8007d3c <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c72:	881a      	ldrh	r2, [r3, #0]
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007c7a:	68fb      	ldr	r3, [r7, #12]
 8007c7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c7e:	1c9a      	adds	r2, r3, #2
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007c84:	68fb      	ldr	r3, [r7, #12]
 8007c86:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007c88:	b29b      	uxth	r3, r3
 8007c8a:	3b01      	subs	r3, #1
 8007c8c:	b29a      	uxth	r2, r3
 8007c8e:	68fb      	ldr	r3, [r7, #12]
 8007c90:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007c92:	e053      	b.n	8007d3c <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	689b      	ldr	r3, [r3, #8]
 8007c9a:	f003 0302 	and.w	r3, r3, #2
 8007c9e:	2b02      	cmp	r3, #2
 8007ca0:	d11b      	bne.n	8007cda <HAL_SPI_TransmitReceive+0x176>
 8007ca2:	68fb      	ldr	r3, [r7, #12]
 8007ca4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007ca6:	b29b      	uxth	r3, r3
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	d016      	beq.n	8007cda <HAL_SPI_TransmitReceive+0x176>
 8007cac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007cae:	2b01      	cmp	r3, #1
 8007cb0:	d113      	bne.n	8007cda <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007cb2:	68fb      	ldr	r3, [r7, #12]
 8007cb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007cb6:	881a      	ldrh	r2, [r3, #0]
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007cbe:	68fb      	ldr	r3, [r7, #12]
 8007cc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007cc2:	1c9a      	adds	r2, r3, #2
 8007cc4:	68fb      	ldr	r3, [r7, #12]
 8007cc6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007ccc:	b29b      	uxth	r3, r3
 8007cce:	3b01      	subs	r3, #1
 8007cd0:	b29a      	uxth	r2, r3
 8007cd2:	68fb      	ldr	r3, [r7, #12]
 8007cd4:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007cd6:	2300      	movs	r3, #0
 8007cd8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007cda:	68fb      	ldr	r3, [r7, #12]
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	689b      	ldr	r3, [r3, #8]
 8007ce0:	f003 0301 	and.w	r3, r3, #1
 8007ce4:	2b01      	cmp	r3, #1
 8007ce6:	d119      	bne.n	8007d1c <HAL_SPI_TransmitReceive+0x1b8>
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007cec:	b29b      	uxth	r3, r3
 8007cee:	2b00      	cmp	r3, #0
 8007cf0:	d014      	beq.n	8007d1c <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007cf2:	68fb      	ldr	r3, [r7, #12]
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	68da      	ldr	r2, [r3, #12]
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007cfc:	b292      	uxth	r2, r2
 8007cfe:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d04:	1c9a      	adds	r2, r3, #2
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007d0a:	68fb      	ldr	r3, [r7, #12]
 8007d0c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007d0e:	b29b      	uxth	r3, r3
 8007d10:	3b01      	subs	r3, #1
 8007d12:	b29a      	uxth	r2, r3
 8007d14:	68fb      	ldr	r3, [r7, #12]
 8007d16:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007d18:	2301      	movs	r3, #1
 8007d1a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8007d1c:	f7fb f966 	bl	8002fec <HAL_GetTick>
 8007d20:	4602      	mov	r2, r0
 8007d22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d24:	1ad3      	subs	r3, r2, r3
 8007d26:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007d28:	429a      	cmp	r2, r3
 8007d2a:	d807      	bhi.n	8007d3c <HAL_SPI_TransmitReceive+0x1d8>
 8007d2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d32:	d003      	beq.n	8007d3c <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8007d34:	2303      	movs	r3, #3
 8007d36:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8007d3a:	e0a7      	b.n	8007e8c <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007d3c:	68fb      	ldr	r3, [r7, #12]
 8007d3e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007d40:	b29b      	uxth	r3, r3
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	d1a6      	bne.n	8007c94 <HAL_SPI_TransmitReceive+0x130>
 8007d46:	68fb      	ldr	r3, [r7, #12]
 8007d48:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007d4a:	b29b      	uxth	r3, r3
 8007d4c:	2b00      	cmp	r3, #0
 8007d4e:	d1a1      	bne.n	8007c94 <HAL_SPI_TransmitReceive+0x130>
 8007d50:	e07c      	b.n	8007e4c <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007d52:	68fb      	ldr	r3, [r7, #12]
 8007d54:	685b      	ldr	r3, [r3, #4]
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	d002      	beq.n	8007d60 <HAL_SPI_TransmitReceive+0x1fc>
 8007d5a:	8b7b      	ldrh	r3, [r7, #26]
 8007d5c:	2b01      	cmp	r3, #1
 8007d5e:	d16b      	bne.n	8007e38 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007d60:	68fb      	ldr	r3, [r7, #12]
 8007d62:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	330c      	adds	r3, #12
 8007d6a:	7812      	ldrb	r2, [r2, #0]
 8007d6c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007d6e:	68fb      	ldr	r3, [r7, #12]
 8007d70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d72:	1c5a      	adds	r2, r3, #1
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007d78:	68fb      	ldr	r3, [r7, #12]
 8007d7a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007d7c:	b29b      	uxth	r3, r3
 8007d7e:	3b01      	subs	r3, #1
 8007d80:	b29a      	uxth	r2, r3
 8007d82:	68fb      	ldr	r3, [r7, #12]
 8007d84:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007d86:	e057      	b.n	8007e38 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	689b      	ldr	r3, [r3, #8]
 8007d8e:	f003 0302 	and.w	r3, r3, #2
 8007d92:	2b02      	cmp	r3, #2
 8007d94:	d11c      	bne.n	8007dd0 <HAL_SPI_TransmitReceive+0x26c>
 8007d96:	68fb      	ldr	r3, [r7, #12]
 8007d98:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007d9a:	b29b      	uxth	r3, r3
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	d017      	beq.n	8007dd0 <HAL_SPI_TransmitReceive+0x26c>
 8007da0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007da2:	2b01      	cmp	r3, #1
 8007da4:	d114      	bne.n	8007dd0 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8007da6:	68fb      	ldr	r3, [r7, #12]
 8007da8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007daa:	68fb      	ldr	r3, [r7, #12]
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	330c      	adds	r3, #12
 8007db0:	7812      	ldrb	r2, [r2, #0]
 8007db2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8007db4:	68fb      	ldr	r3, [r7, #12]
 8007db6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007db8:	1c5a      	adds	r2, r3, #1
 8007dba:	68fb      	ldr	r3, [r7, #12]
 8007dbc:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007dbe:	68fb      	ldr	r3, [r7, #12]
 8007dc0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007dc2:	b29b      	uxth	r3, r3
 8007dc4:	3b01      	subs	r3, #1
 8007dc6:	b29a      	uxth	r2, r3
 8007dc8:	68fb      	ldr	r3, [r7, #12]
 8007dca:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007dcc:	2300      	movs	r3, #0
 8007dce:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	689b      	ldr	r3, [r3, #8]
 8007dd6:	f003 0301 	and.w	r3, r3, #1
 8007dda:	2b01      	cmp	r3, #1
 8007ddc:	d119      	bne.n	8007e12 <HAL_SPI_TransmitReceive+0x2ae>
 8007dde:	68fb      	ldr	r3, [r7, #12]
 8007de0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007de2:	b29b      	uxth	r3, r3
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	d014      	beq.n	8007e12 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	68da      	ldr	r2, [r3, #12]
 8007dee:	68fb      	ldr	r3, [r7, #12]
 8007df0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007df2:	b2d2      	uxtb	r2, r2
 8007df4:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8007df6:	68fb      	ldr	r3, [r7, #12]
 8007df8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007dfa:	1c5a      	adds	r2, r3, #1
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007e04:	b29b      	uxth	r3, r3
 8007e06:	3b01      	subs	r3, #1
 8007e08:	b29a      	uxth	r2, r3
 8007e0a:	68fb      	ldr	r3, [r7, #12]
 8007e0c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007e0e:	2301      	movs	r3, #1
 8007e10:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8007e12:	f7fb f8eb 	bl	8002fec <HAL_GetTick>
 8007e16:	4602      	mov	r2, r0
 8007e18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e1a:	1ad3      	subs	r3, r2, r3
 8007e1c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007e1e:	429a      	cmp	r2, r3
 8007e20:	d803      	bhi.n	8007e2a <HAL_SPI_TransmitReceive+0x2c6>
 8007e22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e28:	d102      	bne.n	8007e30 <HAL_SPI_TransmitReceive+0x2cc>
 8007e2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	d103      	bne.n	8007e38 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8007e30:	2303      	movs	r3, #3
 8007e32:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8007e36:	e029      	b.n	8007e8c <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007e38:	68fb      	ldr	r3, [r7, #12]
 8007e3a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007e3c:	b29b      	uxth	r3, r3
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	d1a2      	bne.n	8007d88 <HAL_SPI_TransmitReceive+0x224>
 8007e42:	68fb      	ldr	r3, [r7, #12]
 8007e44:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007e46:	b29b      	uxth	r3, r3
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	d19d      	bne.n	8007d88 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007e4c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007e4e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007e50:	68f8      	ldr	r0, [r7, #12]
 8007e52:	f000 f8a1 	bl	8007f98 <SPI_EndRxTxTransaction>
 8007e56:	4603      	mov	r3, r0
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	d006      	beq.n	8007e6a <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8007e5c:	2301      	movs	r3, #1
 8007e5e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	2220      	movs	r2, #32
 8007e66:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8007e68:	e010      	b.n	8007e8c <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007e6a:	68fb      	ldr	r3, [r7, #12]
 8007e6c:	689b      	ldr	r3, [r3, #8]
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	d10b      	bne.n	8007e8a <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007e72:	2300      	movs	r3, #0
 8007e74:	617b      	str	r3, [r7, #20]
 8007e76:	68fb      	ldr	r3, [r7, #12]
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	68db      	ldr	r3, [r3, #12]
 8007e7c:	617b      	str	r3, [r7, #20]
 8007e7e:	68fb      	ldr	r3, [r7, #12]
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	689b      	ldr	r3, [r3, #8]
 8007e84:	617b      	str	r3, [r7, #20]
 8007e86:	697b      	ldr	r3, [r7, #20]
 8007e88:	e000      	b.n	8007e8c <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8007e8a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	2201      	movs	r2, #1
 8007e90:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	2200      	movs	r2, #0
 8007e98:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8007e9c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8007ea0:	4618      	mov	r0, r3
 8007ea2:	3730      	adds	r7, #48	; 0x30
 8007ea4:	46bd      	mov	sp, r7
 8007ea6:	bd80      	pop	{r7, pc}

08007ea8 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8007ea8:	b480      	push	{r7}
 8007eaa:	b083      	sub	sp, #12
 8007eac:	af00      	add	r7, sp, #0
 8007eae:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007eb6:	b2db      	uxtb	r3, r3
}
 8007eb8:	4618      	mov	r0, r3
 8007eba:	370c      	adds	r7, #12
 8007ebc:	46bd      	mov	sp, r7
 8007ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ec2:	4770      	bx	lr

08007ec4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007ec4:	b580      	push	{r7, lr}
 8007ec6:	b084      	sub	sp, #16
 8007ec8:	af00      	add	r7, sp, #0
 8007eca:	60f8      	str	r0, [r7, #12]
 8007ecc:	60b9      	str	r1, [r7, #8]
 8007ece:	603b      	str	r3, [r7, #0]
 8007ed0:	4613      	mov	r3, r2
 8007ed2:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007ed4:	e04c      	b.n	8007f70 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007ed6:	683b      	ldr	r3, [r7, #0]
 8007ed8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007edc:	d048      	beq.n	8007f70 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8007ede:	f7fb f885 	bl	8002fec <HAL_GetTick>
 8007ee2:	4602      	mov	r2, r0
 8007ee4:	69bb      	ldr	r3, [r7, #24]
 8007ee6:	1ad3      	subs	r3, r2, r3
 8007ee8:	683a      	ldr	r2, [r7, #0]
 8007eea:	429a      	cmp	r2, r3
 8007eec:	d902      	bls.n	8007ef4 <SPI_WaitFlagStateUntilTimeout+0x30>
 8007eee:	683b      	ldr	r3, [r7, #0]
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	d13d      	bne.n	8007f70 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007ef4:	68fb      	ldr	r3, [r7, #12]
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	685a      	ldr	r2, [r3, #4]
 8007efa:	68fb      	ldr	r3, [r7, #12]
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007f02:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007f04:	68fb      	ldr	r3, [r7, #12]
 8007f06:	685b      	ldr	r3, [r3, #4]
 8007f08:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007f0c:	d111      	bne.n	8007f32 <SPI_WaitFlagStateUntilTimeout+0x6e>
 8007f0e:	68fb      	ldr	r3, [r7, #12]
 8007f10:	689b      	ldr	r3, [r3, #8]
 8007f12:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007f16:	d004      	beq.n	8007f22 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007f18:	68fb      	ldr	r3, [r7, #12]
 8007f1a:	689b      	ldr	r3, [r3, #8]
 8007f1c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007f20:	d107      	bne.n	8007f32 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007f22:	68fb      	ldr	r3, [r7, #12]
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	681a      	ldr	r2, [r3, #0]
 8007f28:	68fb      	ldr	r3, [r7, #12]
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007f30:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007f32:	68fb      	ldr	r3, [r7, #12]
 8007f34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f36:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007f3a:	d10f      	bne.n	8007f5c <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8007f3c:	68fb      	ldr	r3, [r7, #12]
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	681a      	ldr	r2, [r3, #0]
 8007f42:	68fb      	ldr	r3, [r7, #12]
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007f4a:	601a      	str	r2, [r3, #0]
 8007f4c:	68fb      	ldr	r3, [r7, #12]
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	681a      	ldr	r2, [r3, #0]
 8007f52:	68fb      	ldr	r3, [r7, #12]
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007f5a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	2201      	movs	r2, #1
 8007f60:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	2200      	movs	r2, #0
 8007f68:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8007f6c:	2303      	movs	r3, #3
 8007f6e:	e00f      	b.n	8007f90 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007f70:	68fb      	ldr	r3, [r7, #12]
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	689a      	ldr	r2, [r3, #8]
 8007f76:	68bb      	ldr	r3, [r7, #8]
 8007f78:	4013      	ands	r3, r2
 8007f7a:	68ba      	ldr	r2, [r7, #8]
 8007f7c:	429a      	cmp	r2, r3
 8007f7e:	bf0c      	ite	eq
 8007f80:	2301      	moveq	r3, #1
 8007f82:	2300      	movne	r3, #0
 8007f84:	b2db      	uxtb	r3, r3
 8007f86:	461a      	mov	r2, r3
 8007f88:	79fb      	ldrb	r3, [r7, #7]
 8007f8a:	429a      	cmp	r2, r3
 8007f8c:	d1a3      	bne.n	8007ed6 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8007f8e:	2300      	movs	r3, #0
}
 8007f90:	4618      	mov	r0, r3
 8007f92:	3710      	adds	r7, #16
 8007f94:	46bd      	mov	sp, r7
 8007f96:	bd80      	pop	{r7, pc}

08007f98 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007f98:	b580      	push	{r7, lr}
 8007f9a:	b088      	sub	sp, #32
 8007f9c:	af02      	add	r7, sp, #8
 8007f9e:	60f8      	str	r0, [r7, #12]
 8007fa0:	60b9      	str	r1, [r7, #8]
 8007fa2:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8007fa4:	4b1b      	ldr	r3, [pc, #108]	; (8008014 <SPI_EndRxTxTransaction+0x7c>)
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	4a1b      	ldr	r2, [pc, #108]	; (8008018 <SPI_EndRxTxTransaction+0x80>)
 8007faa:	fba2 2303 	umull	r2, r3, r2, r3
 8007fae:	0d5b      	lsrs	r3, r3, #21
 8007fb0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007fb4:	fb02 f303 	mul.w	r3, r2, r3
 8007fb8:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007fba:	68fb      	ldr	r3, [r7, #12]
 8007fbc:	685b      	ldr	r3, [r3, #4]
 8007fbe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007fc2:	d112      	bne.n	8007fea <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	9300      	str	r3, [sp, #0]
 8007fc8:	68bb      	ldr	r3, [r7, #8]
 8007fca:	2200      	movs	r2, #0
 8007fcc:	2180      	movs	r1, #128	; 0x80
 8007fce:	68f8      	ldr	r0, [r7, #12]
 8007fd0:	f7ff ff78 	bl	8007ec4 <SPI_WaitFlagStateUntilTimeout>
 8007fd4:	4603      	mov	r3, r0
 8007fd6:	2b00      	cmp	r3, #0
 8007fd8:	d016      	beq.n	8008008 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007fda:	68fb      	ldr	r3, [r7, #12]
 8007fdc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007fde:	f043 0220 	orr.w	r2, r3, #32
 8007fe2:	68fb      	ldr	r3, [r7, #12]
 8007fe4:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8007fe6:	2303      	movs	r3, #3
 8007fe8:	e00f      	b.n	800800a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8007fea:	697b      	ldr	r3, [r7, #20]
 8007fec:	2b00      	cmp	r3, #0
 8007fee:	d00a      	beq.n	8008006 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8007ff0:	697b      	ldr	r3, [r7, #20]
 8007ff2:	3b01      	subs	r3, #1
 8007ff4:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8007ff6:	68fb      	ldr	r3, [r7, #12]
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	689b      	ldr	r3, [r3, #8]
 8007ffc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008000:	2b80      	cmp	r3, #128	; 0x80
 8008002:	d0f2      	beq.n	8007fea <SPI_EndRxTxTransaction+0x52>
 8008004:	e000      	b.n	8008008 <SPI_EndRxTxTransaction+0x70>
        break;
 8008006:	bf00      	nop
  }

  return HAL_OK;
 8008008:	2300      	movs	r3, #0
}
 800800a:	4618      	mov	r0, r3
 800800c:	3718      	adds	r7, #24
 800800e:	46bd      	mov	sp, r7
 8008010:	bd80      	pop	{r7, pc}
 8008012:	bf00      	nop
 8008014:	20000008 	.word	0x20000008
 8008018:	165e9f81 	.word	0x165e9f81

0800801c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800801c:	b580      	push	{r7, lr}
 800801e:	b082      	sub	sp, #8
 8008020:	af00      	add	r7, sp, #0
 8008022:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	2b00      	cmp	r3, #0
 8008028:	d101      	bne.n	800802e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800802a:	2301      	movs	r3, #1
 800802c:	e01d      	b.n	800806a <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008034:	b2db      	uxtb	r3, r3
 8008036:	2b00      	cmp	r3, #0
 8008038:	d106      	bne.n	8008048 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	2200      	movs	r2, #0
 800803e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008042:	6878      	ldr	r0, [r7, #4]
 8008044:	f7fa fdb4 	bl	8002bb0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	2202      	movs	r2, #2
 800804c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	681a      	ldr	r2, [r3, #0]
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	3304      	adds	r3, #4
 8008058:	4619      	mov	r1, r3
 800805a:	4610      	mov	r0, r2
 800805c:	f000 fb4e 	bl	80086fc <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	2201      	movs	r2, #1
 8008064:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008068:	2300      	movs	r3, #0
}
 800806a:	4618      	mov	r0, r3
 800806c:	3708      	adds	r7, #8
 800806e:	46bd      	mov	sp, r7
 8008070:	bd80      	pop	{r7, pc}

08008072 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8008072:	b480      	push	{r7}
 8008074:	b085      	sub	sp, #20
 8008076:	af00      	add	r7, sp, #0
 8008078:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	2202      	movs	r2, #2
 800807e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	689b      	ldr	r3, [r3, #8]
 8008088:	f003 0307 	and.w	r3, r3, #7
 800808c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800808e:	68fb      	ldr	r3, [r7, #12]
 8008090:	2b06      	cmp	r3, #6
 8008092:	d007      	beq.n	80080a4 <HAL_TIM_Base_Start+0x32>
  {
    __HAL_TIM_ENABLE(htim);
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	681a      	ldr	r2, [r3, #0]
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	f042 0201 	orr.w	r2, r2, #1
 80080a2:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	2201      	movs	r2, #1
 80080a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80080ac:	2300      	movs	r3, #0
}
 80080ae:	4618      	mov	r0, r3
 80080b0:	3714      	adds	r7, #20
 80080b2:	46bd      	mov	sp, r7
 80080b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080b8:	4770      	bx	lr

080080ba <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80080ba:	b580      	push	{r7, lr}
 80080bc:	b082      	sub	sp, #8
 80080be:	af00      	add	r7, sp, #0
 80080c0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	d101      	bne.n	80080cc <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80080c8:	2301      	movs	r3, #1
 80080ca:	e01d      	b.n	8008108 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80080d2:	b2db      	uxtb	r3, r3
 80080d4:	2b00      	cmp	r3, #0
 80080d6:	d106      	bne.n	80080e6 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	2200      	movs	r2, #0
 80080dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80080e0:	6878      	ldr	r0, [r7, #4]
 80080e2:	f000 f815 	bl	8008110 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	2202      	movs	r2, #2
 80080ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	681a      	ldr	r2, [r3, #0]
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	3304      	adds	r3, #4
 80080f6:	4619      	mov	r1, r3
 80080f8:	4610      	mov	r0, r2
 80080fa:	f000 faff 	bl	80086fc <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	2201      	movs	r2, #1
 8008102:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008106:	2300      	movs	r3, #0
}
 8008108:	4618      	mov	r0, r3
 800810a:	3708      	adds	r7, #8
 800810c:	46bd      	mov	sp, r7
 800810e:	bd80      	pop	{r7, pc}

08008110 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8008110:	b480      	push	{r7}
 8008112:	b083      	sub	sp, #12
 8008114:	af00      	add	r7, sp, #0
 8008116:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8008118:	bf00      	nop
 800811a:	370c      	adds	r7, #12
 800811c:	46bd      	mov	sp, r7
 800811e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008122:	4770      	bx	lr

08008124 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008124:	b580      	push	{r7, lr}
 8008126:	b084      	sub	sp, #16
 8008128:	af00      	add	r7, sp, #0
 800812a:	6078      	str	r0, [r7, #4]
 800812c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	2201      	movs	r2, #1
 8008134:	6839      	ldr	r1, [r7, #0]
 8008136:	4618      	mov	r0, r3
 8008138:	f000 fdca 	bl	8008cd0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	4a15      	ldr	r2, [pc, #84]	; (8008198 <HAL_TIM_PWM_Start+0x74>)
 8008142:	4293      	cmp	r3, r2
 8008144:	d004      	beq.n	8008150 <HAL_TIM_PWM_Start+0x2c>
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	4a14      	ldr	r2, [pc, #80]	; (800819c <HAL_TIM_PWM_Start+0x78>)
 800814c:	4293      	cmp	r3, r2
 800814e:	d101      	bne.n	8008154 <HAL_TIM_PWM_Start+0x30>
 8008150:	2301      	movs	r3, #1
 8008152:	e000      	b.n	8008156 <HAL_TIM_PWM_Start+0x32>
 8008154:	2300      	movs	r3, #0
 8008156:	2b00      	cmp	r3, #0
 8008158:	d007      	beq.n	800816a <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008168:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	689b      	ldr	r3, [r3, #8]
 8008170:	f003 0307 	and.w	r3, r3, #7
 8008174:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008176:	68fb      	ldr	r3, [r7, #12]
 8008178:	2b06      	cmp	r3, #6
 800817a:	d007      	beq.n	800818c <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	681a      	ldr	r2, [r3, #0]
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	f042 0201 	orr.w	r2, r2, #1
 800818a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800818c:	2300      	movs	r3, #0
}
 800818e:	4618      	mov	r0, r3
 8008190:	3710      	adds	r7, #16
 8008192:	46bd      	mov	sp, r7
 8008194:	bd80      	pop	{r7, pc}
 8008196:	bf00      	nop
 8008198:	40010000 	.word	0x40010000
 800819c:	40010400 	.word	0x40010400

080081a0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80081a0:	b580      	push	{r7, lr}
 80081a2:	b082      	sub	sp, #8
 80081a4:	af00      	add	r7, sp, #0
 80081a6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	691b      	ldr	r3, [r3, #16]
 80081ae:	f003 0302 	and.w	r3, r3, #2
 80081b2:	2b02      	cmp	r3, #2
 80081b4:	d122      	bne.n	80081fc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	68db      	ldr	r3, [r3, #12]
 80081bc:	f003 0302 	and.w	r3, r3, #2
 80081c0:	2b02      	cmp	r3, #2
 80081c2:	d11b      	bne.n	80081fc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	f06f 0202 	mvn.w	r2, #2
 80081cc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	2201      	movs	r2, #1
 80081d2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	699b      	ldr	r3, [r3, #24]
 80081da:	f003 0303 	and.w	r3, r3, #3
 80081de:	2b00      	cmp	r3, #0
 80081e0:	d003      	beq.n	80081ea <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80081e2:	6878      	ldr	r0, [r7, #4]
 80081e4:	f000 fa6b 	bl	80086be <HAL_TIM_IC_CaptureCallback>
 80081e8:	e005      	b.n	80081f6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80081ea:	6878      	ldr	r0, [r7, #4]
 80081ec:	f000 fa5d 	bl	80086aa <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80081f0:	6878      	ldr	r0, [r7, #4]
 80081f2:	f000 fa6e 	bl	80086d2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	2200      	movs	r2, #0
 80081fa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	691b      	ldr	r3, [r3, #16]
 8008202:	f003 0304 	and.w	r3, r3, #4
 8008206:	2b04      	cmp	r3, #4
 8008208:	d122      	bne.n	8008250 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	68db      	ldr	r3, [r3, #12]
 8008210:	f003 0304 	and.w	r3, r3, #4
 8008214:	2b04      	cmp	r3, #4
 8008216:	d11b      	bne.n	8008250 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	f06f 0204 	mvn.w	r2, #4
 8008220:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	2202      	movs	r2, #2
 8008226:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	699b      	ldr	r3, [r3, #24]
 800822e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008232:	2b00      	cmp	r3, #0
 8008234:	d003      	beq.n	800823e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008236:	6878      	ldr	r0, [r7, #4]
 8008238:	f000 fa41 	bl	80086be <HAL_TIM_IC_CaptureCallback>
 800823c:	e005      	b.n	800824a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800823e:	6878      	ldr	r0, [r7, #4]
 8008240:	f000 fa33 	bl	80086aa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008244:	6878      	ldr	r0, [r7, #4]
 8008246:	f000 fa44 	bl	80086d2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	2200      	movs	r2, #0
 800824e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	691b      	ldr	r3, [r3, #16]
 8008256:	f003 0308 	and.w	r3, r3, #8
 800825a:	2b08      	cmp	r3, #8
 800825c:	d122      	bne.n	80082a4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	68db      	ldr	r3, [r3, #12]
 8008264:	f003 0308 	and.w	r3, r3, #8
 8008268:	2b08      	cmp	r3, #8
 800826a:	d11b      	bne.n	80082a4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	f06f 0208 	mvn.w	r2, #8
 8008274:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	2204      	movs	r2, #4
 800827a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	69db      	ldr	r3, [r3, #28]
 8008282:	f003 0303 	and.w	r3, r3, #3
 8008286:	2b00      	cmp	r3, #0
 8008288:	d003      	beq.n	8008292 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800828a:	6878      	ldr	r0, [r7, #4]
 800828c:	f000 fa17 	bl	80086be <HAL_TIM_IC_CaptureCallback>
 8008290:	e005      	b.n	800829e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008292:	6878      	ldr	r0, [r7, #4]
 8008294:	f000 fa09 	bl	80086aa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008298:	6878      	ldr	r0, [r7, #4]
 800829a:	f000 fa1a 	bl	80086d2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	2200      	movs	r2, #0
 80082a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	691b      	ldr	r3, [r3, #16]
 80082aa:	f003 0310 	and.w	r3, r3, #16
 80082ae:	2b10      	cmp	r3, #16
 80082b0:	d122      	bne.n	80082f8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	68db      	ldr	r3, [r3, #12]
 80082b8:	f003 0310 	and.w	r3, r3, #16
 80082bc:	2b10      	cmp	r3, #16
 80082be:	d11b      	bne.n	80082f8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	f06f 0210 	mvn.w	r2, #16
 80082c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	2208      	movs	r2, #8
 80082ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	69db      	ldr	r3, [r3, #28]
 80082d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80082da:	2b00      	cmp	r3, #0
 80082dc:	d003      	beq.n	80082e6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80082de:	6878      	ldr	r0, [r7, #4]
 80082e0:	f000 f9ed 	bl	80086be <HAL_TIM_IC_CaptureCallback>
 80082e4:	e005      	b.n	80082f2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80082e6:	6878      	ldr	r0, [r7, #4]
 80082e8:	f000 f9df 	bl	80086aa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80082ec:	6878      	ldr	r0, [r7, #4]
 80082ee:	f000 f9f0 	bl	80086d2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	2200      	movs	r2, #0
 80082f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	691b      	ldr	r3, [r3, #16]
 80082fe:	f003 0301 	and.w	r3, r3, #1
 8008302:	2b01      	cmp	r3, #1
 8008304:	d10e      	bne.n	8008324 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	68db      	ldr	r3, [r3, #12]
 800830c:	f003 0301 	and.w	r3, r3, #1
 8008310:	2b01      	cmp	r3, #1
 8008312:	d107      	bne.n	8008324 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	f06f 0201 	mvn.w	r2, #1
 800831c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800831e:	6878      	ldr	r0, [r7, #4]
 8008320:	f7fa fa5e 	bl	80027e0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	691b      	ldr	r3, [r3, #16]
 800832a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800832e:	2b80      	cmp	r3, #128	; 0x80
 8008330:	d10e      	bne.n	8008350 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	68db      	ldr	r3, [r3, #12]
 8008338:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800833c:	2b80      	cmp	r3, #128	; 0x80
 800833e:	d107      	bne.n	8008350 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008348:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800834a:	6878      	ldr	r0, [r7, #4]
 800834c:	f000 fd6c 	bl	8008e28 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	691b      	ldr	r3, [r3, #16]
 8008356:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800835a:	2b40      	cmp	r3, #64	; 0x40
 800835c:	d10e      	bne.n	800837c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	68db      	ldr	r3, [r3, #12]
 8008364:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008368:	2b40      	cmp	r3, #64	; 0x40
 800836a:	d107      	bne.n	800837c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008374:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008376:	6878      	ldr	r0, [r7, #4]
 8008378:	f000 f9b5 	bl	80086e6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	691b      	ldr	r3, [r3, #16]
 8008382:	f003 0320 	and.w	r3, r3, #32
 8008386:	2b20      	cmp	r3, #32
 8008388:	d10e      	bne.n	80083a8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	68db      	ldr	r3, [r3, #12]
 8008390:	f003 0320 	and.w	r3, r3, #32
 8008394:	2b20      	cmp	r3, #32
 8008396:	d107      	bne.n	80083a8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	f06f 0220 	mvn.w	r2, #32
 80083a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80083a2:	6878      	ldr	r0, [r7, #4]
 80083a4:	f000 fd36 	bl	8008e14 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80083a8:	bf00      	nop
 80083aa:	3708      	adds	r7, #8
 80083ac:	46bd      	mov	sp, r7
 80083ae:	bd80      	pop	{r7, pc}

080083b0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80083b0:	b580      	push	{r7, lr}
 80083b2:	b084      	sub	sp, #16
 80083b4:	af00      	add	r7, sp, #0
 80083b6:	60f8      	str	r0, [r7, #12]
 80083b8:	60b9      	str	r1, [r7, #8]
 80083ba:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80083bc:	68fb      	ldr	r3, [r7, #12]
 80083be:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80083c2:	2b01      	cmp	r3, #1
 80083c4:	d101      	bne.n	80083ca <HAL_TIM_PWM_ConfigChannel+0x1a>
 80083c6:	2302      	movs	r3, #2
 80083c8:	e0b4      	b.n	8008534 <HAL_TIM_PWM_ConfigChannel+0x184>
 80083ca:	68fb      	ldr	r3, [r7, #12]
 80083cc:	2201      	movs	r2, #1
 80083ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80083d2:	68fb      	ldr	r3, [r7, #12]
 80083d4:	2202      	movs	r2, #2
 80083d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	2b0c      	cmp	r3, #12
 80083de:	f200 809f 	bhi.w	8008520 <HAL_TIM_PWM_ConfigChannel+0x170>
 80083e2:	a201      	add	r2, pc, #4	; (adr r2, 80083e8 <HAL_TIM_PWM_ConfigChannel+0x38>)
 80083e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083e8:	0800841d 	.word	0x0800841d
 80083ec:	08008521 	.word	0x08008521
 80083f0:	08008521 	.word	0x08008521
 80083f4:	08008521 	.word	0x08008521
 80083f8:	0800845d 	.word	0x0800845d
 80083fc:	08008521 	.word	0x08008521
 8008400:	08008521 	.word	0x08008521
 8008404:	08008521 	.word	0x08008521
 8008408:	0800849f 	.word	0x0800849f
 800840c:	08008521 	.word	0x08008521
 8008410:	08008521 	.word	0x08008521
 8008414:	08008521 	.word	0x08008521
 8008418:	080084df 	.word	0x080084df
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800841c:	68fb      	ldr	r3, [r7, #12]
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	68b9      	ldr	r1, [r7, #8]
 8008422:	4618      	mov	r0, r3
 8008424:	f000 fa0a 	bl	800883c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	699a      	ldr	r2, [r3, #24]
 800842e:	68fb      	ldr	r3, [r7, #12]
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	f042 0208 	orr.w	r2, r2, #8
 8008436:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008438:	68fb      	ldr	r3, [r7, #12]
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	699a      	ldr	r2, [r3, #24]
 800843e:	68fb      	ldr	r3, [r7, #12]
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	f022 0204 	bic.w	r2, r2, #4
 8008446:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008448:	68fb      	ldr	r3, [r7, #12]
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	6999      	ldr	r1, [r3, #24]
 800844e:	68bb      	ldr	r3, [r7, #8]
 8008450:	691a      	ldr	r2, [r3, #16]
 8008452:	68fb      	ldr	r3, [r7, #12]
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	430a      	orrs	r2, r1
 8008458:	619a      	str	r2, [r3, #24]
      break;
 800845a:	e062      	b.n	8008522 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800845c:	68fb      	ldr	r3, [r7, #12]
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	68b9      	ldr	r1, [r7, #8]
 8008462:	4618      	mov	r0, r3
 8008464:	f000 fa5a 	bl	800891c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008468:	68fb      	ldr	r3, [r7, #12]
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	699a      	ldr	r2, [r3, #24]
 800846e:	68fb      	ldr	r3, [r7, #12]
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008476:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008478:	68fb      	ldr	r3, [r7, #12]
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	699a      	ldr	r2, [r3, #24]
 800847e:	68fb      	ldr	r3, [r7, #12]
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008486:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008488:	68fb      	ldr	r3, [r7, #12]
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	6999      	ldr	r1, [r3, #24]
 800848e:	68bb      	ldr	r3, [r7, #8]
 8008490:	691b      	ldr	r3, [r3, #16]
 8008492:	021a      	lsls	r2, r3, #8
 8008494:	68fb      	ldr	r3, [r7, #12]
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	430a      	orrs	r2, r1
 800849a:	619a      	str	r2, [r3, #24]
      break;
 800849c:	e041      	b.n	8008522 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800849e:	68fb      	ldr	r3, [r7, #12]
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	68b9      	ldr	r1, [r7, #8]
 80084a4:	4618      	mov	r0, r3
 80084a6:	f000 faaf 	bl	8008a08 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80084aa:	68fb      	ldr	r3, [r7, #12]
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	69da      	ldr	r2, [r3, #28]
 80084b0:	68fb      	ldr	r3, [r7, #12]
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	f042 0208 	orr.w	r2, r2, #8
 80084b8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80084ba:	68fb      	ldr	r3, [r7, #12]
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	69da      	ldr	r2, [r3, #28]
 80084c0:	68fb      	ldr	r3, [r7, #12]
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	f022 0204 	bic.w	r2, r2, #4
 80084c8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80084ca:	68fb      	ldr	r3, [r7, #12]
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	69d9      	ldr	r1, [r3, #28]
 80084d0:	68bb      	ldr	r3, [r7, #8]
 80084d2:	691a      	ldr	r2, [r3, #16]
 80084d4:	68fb      	ldr	r3, [r7, #12]
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	430a      	orrs	r2, r1
 80084da:	61da      	str	r2, [r3, #28]
      break;
 80084dc:	e021      	b.n	8008522 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80084de:	68fb      	ldr	r3, [r7, #12]
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	68b9      	ldr	r1, [r7, #8]
 80084e4:	4618      	mov	r0, r3
 80084e6:	f000 fb03 	bl	8008af0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80084ea:	68fb      	ldr	r3, [r7, #12]
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	69da      	ldr	r2, [r3, #28]
 80084f0:	68fb      	ldr	r3, [r7, #12]
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80084f8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80084fa:	68fb      	ldr	r3, [r7, #12]
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	69da      	ldr	r2, [r3, #28]
 8008500:	68fb      	ldr	r3, [r7, #12]
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008508:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800850a:	68fb      	ldr	r3, [r7, #12]
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	69d9      	ldr	r1, [r3, #28]
 8008510:	68bb      	ldr	r3, [r7, #8]
 8008512:	691b      	ldr	r3, [r3, #16]
 8008514:	021a      	lsls	r2, r3, #8
 8008516:	68fb      	ldr	r3, [r7, #12]
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	430a      	orrs	r2, r1
 800851c:	61da      	str	r2, [r3, #28]
      break;
 800851e:	e000      	b.n	8008522 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8008520:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8008522:	68fb      	ldr	r3, [r7, #12]
 8008524:	2201      	movs	r2, #1
 8008526:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800852a:	68fb      	ldr	r3, [r7, #12]
 800852c:	2200      	movs	r2, #0
 800852e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008532:	2300      	movs	r3, #0
}
 8008534:	4618      	mov	r0, r3
 8008536:	3710      	adds	r7, #16
 8008538:	46bd      	mov	sp, r7
 800853a:	bd80      	pop	{r7, pc}

0800853c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800853c:	b580      	push	{r7, lr}
 800853e:	b084      	sub	sp, #16
 8008540:	af00      	add	r7, sp, #0
 8008542:	6078      	str	r0, [r7, #4]
 8008544:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800854c:	2b01      	cmp	r3, #1
 800854e:	d101      	bne.n	8008554 <HAL_TIM_ConfigClockSource+0x18>
 8008550:	2302      	movs	r3, #2
 8008552:	e0a6      	b.n	80086a2 <HAL_TIM_ConfigClockSource+0x166>
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	2201      	movs	r2, #1
 8008558:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	2202      	movs	r2, #2
 8008560:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	689b      	ldr	r3, [r3, #8]
 800856a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800856c:	68fb      	ldr	r3, [r7, #12]
 800856e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8008572:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008574:	68fb      	ldr	r3, [r7, #12]
 8008576:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800857a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	68fa      	ldr	r2, [r7, #12]
 8008582:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008584:	683b      	ldr	r3, [r7, #0]
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	2b40      	cmp	r3, #64	; 0x40
 800858a:	d067      	beq.n	800865c <HAL_TIM_ConfigClockSource+0x120>
 800858c:	2b40      	cmp	r3, #64	; 0x40
 800858e:	d80b      	bhi.n	80085a8 <HAL_TIM_ConfigClockSource+0x6c>
 8008590:	2b10      	cmp	r3, #16
 8008592:	d073      	beq.n	800867c <HAL_TIM_ConfigClockSource+0x140>
 8008594:	2b10      	cmp	r3, #16
 8008596:	d802      	bhi.n	800859e <HAL_TIM_ConfigClockSource+0x62>
 8008598:	2b00      	cmp	r3, #0
 800859a:	d06f      	beq.n	800867c <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 800859c:	e078      	b.n	8008690 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800859e:	2b20      	cmp	r3, #32
 80085a0:	d06c      	beq.n	800867c <HAL_TIM_ConfigClockSource+0x140>
 80085a2:	2b30      	cmp	r3, #48	; 0x30
 80085a4:	d06a      	beq.n	800867c <HAL_TIM_ConfigClockSource+0x140>
      break;
 80085a6:	e073      	b.n	8008690 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80085a8:	2b70      	cmp	r3, #112	; 0x70
 80085aa:	d00d      	beq.n	80085c8 <HAL_TIM_ConfigClockSource+0x8c>
 80085ac:	2b70      	cmp	r3, #112	; 0x70
 80085ae:	d804      	bhi.n	80085ba <HAL_TIM_ConfigClockSource+0x7e>
 80085b0:	2b50      	cmp	r3, #80	; 0x50
 80085b2:	d033      	beq.n	800861c <HAL_TIM_ConfigClockSource+0xe0>
 80085b4:	2b60      	cmp	r3, #96	; 0x60
 80085b6:	d041      	beq.n	800863c <HAL_TIM_ConfigClockSource+0x100>
      break;
 80085b8:	e06a      	b.n	8008690 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80085ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80085be:	d066      	beq.n	800868e <HAL_TIM_ConfigClockSource+0x152>
 80085c0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80085c4:	d017      	beq.n	80085f6 <HAL_TIM_ConfigClockSource+0xba>
      break;
 80085c6:	e063      	b.n	8008690 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	6818      	ldr	r0, [r3, #0]
 80085cc:	683b      	ldr	r3, [r7, #0]
 80085ce:	6899      	ldr	r1, [r3, #8]
 80085d0:	683b      	ldr	r3, [r7, #0]
 80085d2:	685a      	ldr	r2, [r3, #4]
 80085d4:	683b      	ldr	r3, [r7, #0]
 80085d6:	68db      	ldr	r3, [r3, #12]
 80085d8:	f000 fb5a 	bl	8008c90 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	689b      	ldr	r3, [r3, #8]
 80085e2:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80085e4:	68fb      	ldr	r3, [r7, #12]
 80085e6:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80085ea:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	68fa      	ldr	r2, [r7, #12]
 80085f2:	609a      	str	r2, [r3, #8]
      break;
 80085f4:	e04c      	b.n	8008690 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	6818      	ldr	r0, [r3, #0]
 80085fa:	683b      	ldr	r3, [r7, #0]
 80085fc:	6899      	ldr	r1, [r3, #8]
 80085fe:	683b      	ldr	r3, [r7, #0]
 8008600:	685a      	ldr	r2, [r3, #4]
 8008602:	683b      	ldr	r3, [r7, #0]
 8008604:	68db      	ldr	r3, [r3, #12]
 8008606:	f000 fb43 	bl	8008c90 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	689a      	ldr	r2, [r3, #8]
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008618:	609a      	str	r2, [r3, #8]
      break;
 800861a:	e039      	b.n	8008690 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	6818      	ldr	r0, [r3, #0]
 8008620:	683b      	ldr	r3, [r7, #0]
 8008622:	6859      	ldr	r1, [r3, #4]
 8008624:	683b      	ldr	r3, [r7, #0]
 8008626:	68db      	ldr	r3, [r3, #12]
 8008628:	461a      	mov	r2, r3
 800862a:	f000 fab7 	bl	8008b9c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	2150      	movs	r1, #80	; 0x50
 8008634:	4618      	mov	r0, r3
 8008636:	f000 fb10 	bl	8008c5a <TIM_ITRx_SetConfig>
      break;
 800863a:	e029      	b.n	8008690 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	6818      	ldr	r0, [r3, #0]
 8008640:	683b      	ldr	r3, [r7, #0]
 8008642:	6859      	ldr	r1, [r3, #4]
 8008644:	683b      	ldr	r3, [r7, #0]
 8008646:	68db      	ldr	r3, [r3, #12]
 8008648:	461a      	mov	r2, r3
 800864a:	f000 fad6 	bl	8008bfa <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	2160      	movs	r1, #96	; 0x60
 8008654:	4618      	mov	r0, r3
 8008656:	f000 fb00 	bl	8008c5a <TIM_ITRx_SetConfig>
      break;
 800865a:	e019      	b.n	8008690 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	6818      	ldr	r0, [r3, #0]
 8008660:	683b      	ldr	r3, [r7, #0]
 8008662:	6859      	ldr	r1, [r3, #4]
 8008664:	683b      	ldr	r3, [r7, #0]
 8008666:	68db      	ldr	r3, [r3, #12]
 8008668:	461a      	mov	r2, r3
 800866a:	f000 fa97 	bl	8008b9c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	2140      	movs	r1, #64	; 0x40
 8008674:	4618      	mov	r0, r3
 8008676:	f000 faf0 	bl	8008c5a <TIM_ITRx_SetConfig>
      break;
 800867a:	e009      	b.n	8008690 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	681a      	ldr	r2, [r3, #0]
 8008680:	683b      	ldr	r3, [r7, #0]
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	4619      	mov	r1, r3
 8008686:	4610      	mov	r0, r2
 8008688:	f000 fae7 	bl	8008c5a <TIM_ITRx_SetConfig>
      break;
 800868c:	e000      	b.n	8008690 <HAL_TIM_ConfigClockSource+0x154>
      break;
 800868e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	2201      	movs	r2, #1
 8008694:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	2200      	movs	r2, #0
 800869c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80086a0:	2300      	movs	r3, #0
}
 80086a2:	4618      	mov	r0, r3
 80086a4:	3710      	adds	r7, #16
 80086a6:	46bd      	mov	sp, r7
 80086a8:	bd80      	pop	{r7, pc}

080086aa <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80086aa:	b480      	push	{r7}
 80086ac:	b083      	sub	sp, #12
 80086ae:	af00      	add	r7, sp, #0
 80086b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80086b2:	bf00      	nop
 80086b4:	370c      	adds	r7, #12
 80086b6:	46bd      	mov	sp, r7
 80086b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086bc:	4770      	bx	lr

080086be <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80086be:	b480      	push	{r7}
 80086c0:	b083      	sub	sp, #12
 80086c2:	af00      	add	r7, sp, #0
 80086c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80086c6:	bf00      	nop
 80086c8:	370c      	adds	r7, #12
 80086ca:	46bd      	mov	sp, r7
 80086cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086d0:	4770      	bx	lr

080086d2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80086d2:	b480      	push	{r7}
 80086d4:	b083      	sub	sp, #12
 80086d6:	af00      	add	r7, sp, #0
 80086d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80086da:	bf00      	nop
 80086dc:	370c      	adds	r7, #12
 80086de:	46bd      	mov	sp, r7
 80086e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086e4:	4770      	bx	lr

080086e6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80086e6:	b480      	push	{r7}
 80086e8:	b083      	sub	sp, #12
 80086ea:	af00      	add	r7, sp, #0
 80086ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80086ee:	bf00      	nop
 80086f0:	370c      	adds	r7, #12
 80086f2:	46bd      	mov	sp, r7
 80086f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086f8:	4770      	bx	lr
	...

080086fc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80086fc:	b480      	push	{r7}
 80086fe:	b085      	sub	sp, #20
 8008700:	af00      	add	r7, sp, #0
 8008702:	6078      	str	r0, [r7, #4]
 8008704:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	681b      	ldr	r3, [r3, #0]
 800870a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	4a40      	ldr	r2, [pc, #256]	; (8008810 <TIM_Base_SetConfig+0x114>)
 8008710:	4293      	cmp	r3, r2
 8008712:	d013      	beq.n	800873c <TIM_Base_SetConfig+0x40>
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800871a:	d00f      	beq.n	800873c <TIM_Base_SetConfig+0x40>
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	4a3d      	ldr	r2, [pc, #244]	; (8008814 <TIM_Base_SetConfig+0x118>)
 8008720:	4293      	cmp	r3, r2
 8008722:	d00b      	beq.n	800873c <TIM_Base_SetConfig+0x40>
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	4a3c      	ldr	r2, [pc, #240]	; (8008818 <TIM_Base_SetConfig+0x11c>)
 8008728:	4293      	cmp	r3, r2
 800872a:	d007      	beq.n	800873c <TIM_Base_SetConfig+0x40>
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	4a3b      	ldr	r2, [pc, #236]	; (800881c <TIM_Base_SetConfig+0x120>)
 8008730:	4293      	cmp	r3, r2
 8008732:	d003      	beq.n	800873c <TIM_Base_SetConfig+0x40>
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	4a3a      	ldr	r2, [pc, #232]	; (8008820 <TIM_Base_SetConfig+0x124>)
 8008738:	4293      	cmp	r3, r2
 800873a:	d108      	bne.n	800874e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800873c:	68fb      	ldr	r3, [r7, #12]
 800873e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008742:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008744:	683b      	ldr	r3, [r7, #0]
 8008746:	685b      	ldr	r3, [r3, #4]
 8008748:	68fa      	ldr	r2, [r7, #12]
 800874a:	4313      	orrs	r3, r2
 800874c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	4a2f      	ldr	r2, [pc, #188]	; (8008810 <TIM_Base_SetConfig+0x114>)
 8008752:	4293      	cmp	r3, r2
 8008754:	d02b      	beq.n	80087ae <TIM_Base_SetConfig+0xb2>
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800875c:	d027      	beq.n	80087ae <TIM_Base_SetConfig+0xb2>
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	4a2c      	ldr	r2, [pc, #176]	; (8008814 <TIM_Base_SetConfig+0x118>)
 8008762:	4293      	cmp	r3, r2
 8008764:	d023      	beq.n	80087ae <TIM_Base_SetConfig+0xb2>
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	4a2b      	ldr	r2, [pc, #172]	; (8008818 <TIM_Base_SetConfig+0x11c>)
 800876a:	4293      	cmp	r3, r2
 800876c:	d01f      	beq.n	80087ae <TIM_Base_SetConfig+0xb2>
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	4a2a      	ldr	r2, [pc, #168]	; (800881c <TIM_Base_SetConfig+0x120>)
 8008772:	4293      	cmp	r3, r2
 8008774:	d01b      	beq.n	80087ae <TIM_Base_SetConfig+0xb2>
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	4a29      	ldr	r2, [pc, #164]	; (8008820 <TIM_Base_SetConfig+0x124>)
 800877a:	4293      	cmp	r3, r2
 800877c:	d017      	beq.n	80087ae <TIM_Base_SetConfig+0xb2>
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	4a28      	ldr	r2, [pc, #160]	; (8008824 <TIM_Base_SetConfig+0x128>)
 8008782:	4293      	cmp	r3, r2
 8008784:	d013      	beq.n	80087ae <TIM_Base_SetConfig+0xb2>
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	4a27      	ldr	r2, [pc, #156]	; (8008828 <TIM_Base_SetConfig+0x12c>)
 800878a:	4293      	cmp	r3, r2
 800878c:	d00f      	beq.n	80087ae <TIM_Base_SetConfig+0xb2>
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	4a26      	ldr	r2, [pc, #152]	; (800882c <TIM_Base_SetConfig+0x130>)
 8008792:	4293      	cmp	r3, r2
 8008794:	d00b      	beq.n	80087ae <TIM_Base_SetConfig+0xb2>
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	4a25      	ldr	r2, [pc, #148]	; (8008830 <TIM_Base_SetConfig+0x134>)
 800879a:	4293      	cmp	r3, r2
 800879c:	d007      	beq.n	80087ae <TIM_Base_SetConfig+0xb2>
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	4a24      	ldr	r2, [pc, #144]	; (8008834 <TIM_Base_SetConfig+0x138>)
 80087a2:	4293      	cmp	r3, r2
 80087a4:	d003      	beq.n	80087ae <TIM_Base_SetConfig+0xb2>
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	4a23      	ldr	r2, [pc, #140]	; (8008838 <TIM_Base_SetConfig+0x13c>)
 80087aa:	4293      	cmp	r3, r2
 80087ac:	d108      	bne.n	80087c0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80087ae:	68fb      	ldr	r3, [r7, #12]
 80087b0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80087b4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80087b6:	683b      	ldr	r3, [r7, #0]
 80087b8:	68db      	ldr	r3, [r3, #12]
 80087ba:	68fa      	ldr	r2, [r7, #12]
 80087bc:	4313      	orrs	r3, r2
 80087be:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80087c0:	68fb      	ldr	r3, [r7, #12]
 80087c2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80087c6:	683b      	ldr	r3, [r7, #0]
 80087c8:	695b      	ldr	r3, [r3, #20]
 80087ca:	4313      	orrs	r3, r2
 80087cc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	68fa      	ldr	r2, [r7, #12]
 80087d2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80087d4:	683b      	ldr	r3, [r7, #0]
 80087d6:	689a      	ldr	r2, [r3, #8]
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80087dc:	683b      	ldr	r3, [r7, #0]
 80087de:	681a      	ldr	r2, [r3, #0]
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	4a0a      	ldr	r2, [pc, #40]	; (8008810 <TIM_Base_SetConfig+0x114>)
 80087e8:	4293      	cmp	r3, r2
 80087ea:	d003      	beq.n	80087f4 <TIM_Base_SetConfig+0xf8>
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	4a0c      	ldr	r2, [pc, #48]	; (8008820 <TIM_Base_SetConfig+0x124>)
 80087f0:	4293      	cmp	r3, r2
 80087f2:	d103      	bne.n	80087fc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80087f4:	683b      	ldr	r3, [r7, #0]
 80087f6:	691a      	ldr	r2, [r3, #16]
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	2201      	movs	r2, #1
 8008800:	615a      	str	r2, [r3, #20]
}
 8008802:	bf00      	nop
 8008804:	3714      	adds	r7, #20
 8008806:	46bd      	mov	sp, r7
 8008808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800880c:	4770      	bx	lr
 800880e:	bf00      	nop
 8008810:	40010000 	.word	0x40010000
 8008814:	40000400 	.word	0x40000400
 8008818:	40000800 	.word	0x40000800
 800881c:	40000c00 	.word	0x40000c00
 8008820:	40010400 	.word	0x40010400
 8008824:	40014000 	.word	0x40014000
 8008828:	40014400 	.word	0x40014400
 800882c:	40014800 	.word	0x40014800
 8008830:	40001800 	.word	0x40001800
 8008834:	40001c00 	.word	0x40001c00
 8008838:	40002000 	.word	0x40002000

0800883c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800883c:	b480      	push	{r7}
 800883e:	b087      	sub	sp, #28
 8008840:	af00      	add	r7, sp, #0
 8008842:	6078      	str	r0, [r7, #4]
 8008844:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	6a1b      	ldr	r3, [r3, #32]
 800884a:	f023 0201 	bic.w	r2, r3, #1
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	6a1b      	ldr	r3, [r3, #32]
 8008856:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	685b      	ldr	r3, [r3, #4]
 800885c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	699b      	ldr	r3, [r3, #24]
 8008862:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008864:	68fb      	ldr	r3, [r7, #12]
 8008866:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800886a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800886c:	68fb      	ldr	r3, [r7, #12]
 800886e:	f023 0303 	bic.w	r3, r3, #3
 8008872:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008874:	683b      	ldr	r3, [r7, #0]
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	68fa      	ldr	r2, [r7, #12]
 800887a:	4313      	orrs	r3, r2
 800887c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800887e:	697b      	ldr	r3, [r7, #20]
 8008880:	f023 0302 	bic.w	r3, r3, #2
 8008884:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008886:	683b      	ldr	r3, [r7, #0]
 8008888:	689b      	ldr	r3, [r3, #8]
 800888a:	697a      	ldr	r2, [r7, #20]
 800888c:	4313      	orrs	r3, r2
 800888e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	4a20      	ldr	r2, [pc, #128]	; (8008914 <TIM_OC1_SetConfig+0xd8>)
 8008894:	4293      	cmp	r3, r2
 8008896:	d003      	beq.n	80088a0 <TIM_OC1_SetConfig+0x64>
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	4a1f      	ldr	r2, [pc, #124]	; (8008918 <TIM_OC1_SetConfig+0xdc>)
 800889c:	4293      	cmp	r3, r2
 800889e:	d10c      	bne.n	80088ba <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80088a0:	697b      	ldr	r3, [r7, #20]
 80088a2:	f023 0308 	bic.w	r3, r3, #8
 80088a6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80088a8:	683b      	ldr	r3, [r7, #0]
 80088aa:	68db      	ldr	r3, [r3, #12]
 80088ac:	697a      	ldr	r2, [r7, #20]
 80088ae:	4313      	orrs	r3, r2
 80088b0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80088b2:	697b      	ldr	r3, [r7, #20]
 80088b4:	f023 0304 	bic.w	r3, r3, #4
 80088b8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	4a15      	ldr	r2, [pc, #84]	; (8008914 <TIM_OC1_SetConfig+0xd8>)
 80088be:	4293      	cmp	r3, r2
 80088c0:	d003      	beq.n	80088ca <TIM_OC1_SetConfig+0x8e>
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	4a14      	ldr	r2, [pc, #80]	; (8008918 <TIM_OC1_SetConfig+0xdc>)
 80088c6:	4293      	cmp	r3, r2
 80088c8:	d111      	bne.n	80088ee <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80088ca:	693b      	ldr	r3, [r7, #16]
 80088cc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80088d0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80088d2:	693b      	ldr	r3, [r7, #16]
 80088d4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80088d8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80088da:	683b      	ldr	r3, [r7, #0]
 80088dc:	695b      	ldr	r3, [r3, #20]
 80088de:	693a      	ldr	r2, [r7, #16]
 80088e0:	4313      	orrs	r3, r2
 80088e2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80088e4:	683b      	ldr	r3, [r7, #0]
 80088e6:	699b      	ldr	r3, [r3, #24]
 80088e8:	693a      	ldr	r2, [r7, #16]
 80088ea:	4313      	orrs	r3, r2
 80088ec:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	693a      	ldr	r2, [r7, #16]
 80088f2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	68fa      	ldr	r2, [r7, #12]
 80088f8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80088fa:	683b      	ldr	r3, [r7, #0]
 80088fc:	685a      	ldr	r2, [r3, #4]
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	697a      	ldr	r2, [r7, #20]
 8008906:	621a      	str	r2, [r3, #32]
}
 8008908:	bf00      	nop
 800890a:	371c      	adds	r7, #28
 800890c:	46bd      	mov	sp, r7
 800890e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008912:	4770      	bx	lr
 8008914:	40010000 	.word	0x40010000
 8008918:	40010400 	.word	0x40010400

0800891c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800891c:	b480      	push	{r7}
 800891e:	b087      	sub	sp, #28
 8008920:	af00      	add	r7, sp, #0
 8008922:	6078      	str	r0, [r7, #4]
 8008924:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	6a1b      	ldr	r3, [r3, #32]
 800892a:	f023 0210 	bic.w	r2, r3, #16
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	6a1b      	ldr	r3, [r3, #32]
 8008936:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	685b      	ldr	r3, [r3, #4]
 800893c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	699b      	ldr	r3, [r3, #24]
 8008942:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008944:	68fb      	ldr	r3, [r7, #12]
 8008946:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800894a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800894c:	68fb      	ldr	r3, [r7, #12]
 800894e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008952:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008954:	683b      	ldr	r3, [r7, #0]
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	021b      	lsls	r3, r3, #8
 800895a:	68fa      	ldr	r2, [r7, #12]
 800895c:	4313      	orrs	r3, r2
 800895e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008960:	697b      	ldr	r3, [r7, #20]
 8008962:	f023 0320 	bic.w	r3, r3, #32
 8008966:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008968:	683b      	ldr	r3, [r7, #0]
 800896a:	689b      	ldr	r3, [r3, #8]
 800896c:	011b      	lsls	r3, r3, #4
 800896e:	697a      	ldr	r2, [r7, #20]
 8008970:	4313      	orrs	r3, r2
 8008972:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	4a22      	ldr	r2, [pc, #136]	; (8008a00 <TIM_OC2_SetConfig+0xe4>)
 8008978:	4293      	cmp	r3, r2
 800897a:	d003      	beq.n	8008984 <TIM_OC2_SetConfig+0x68>
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	4a21      	ldr	r2, [pc, #132]	; (8008a04 <TIM_OC2_SetConfig+0xe8>)
 8008980:	4293      	cmp	r3, r2
 8008982:	d10d      	bne.n	80089a0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008984:	697b      	ldr	r3, [r7, #20]
 8008986:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800898a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800898c:	683b      	ldr	r3, [r7, #0]
 800898e:	68db      	ldr	r3, [r3, #12]
 8008990:	011b      	lsls	r3, r3, #4
 8008992:	697a      	ldr	r2, [r7, #20]
 8008994:	4313      	orrs	r3, r2
 8008996:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008998:	697b      	ldr	r3, [r7, #20]
 800899a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800899e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	4a17      	ldr	r2, [pc, #92]	; (8008a00 <TIM_OC2_SetConfig+0xe4>)
 80089a4:	4293      	cmp	r3, r2
 80089a6:	d003      	beq.n	80089b0 <TIM_OC2_SetConfig+0x94>
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	4a16      	ldr	r2, [pc, #88]	; (8008a04 <TIM_OC2_SetConfig+0xe8>)
 80089ac:	4293      	cmp	r3, r2
 80089ae:	d113      	bne.n	80089d8 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80089b0:	693b      	ldr	r3, [r7, #16]
 80089b2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80089b6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80089b8:	693b      	ldr	r3, [r7, #16]
 80089ba:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80089be:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80089c0:	683b      	ldr	r3, [r7, #0]
 80089c2:	695b      	ldr	r3, [r3, #20]
 80089c4:	009b      	lsls	r3, r3, #2
 80089c6:	693a      	ldr	r2, [r7, #16]
 80089c8:	4313      	orrs	r3, r2
 80089ca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80089cc:	683b      	ldr	r3, [r7, #0]
 80089ce:	699b      	ldr	r3, [r3, #24]
 80089d0:	009b      	lsls	r3, r3, #2
 80089d2:	693a      	ldr	r2, [r7, #16]
 80089d4:	4313      	orrs	r3, r2
 80089d6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	693a      	ldr	r2, [r7, #16]
 80089dc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	68fa      	ldr	r2, [r7, #12]
 80089e2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80089e4:	683b      	ldr	r3, [r7, #0]
 80089e6:	685a      	ldr	r2, [r3, #4]
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	697a      	ldr	r2, [r7, #20]
 80089f0:	621a      	str	r2, [r3, #32]
}
 80089f2:	bf00      	nop
 80089f4:	371c      	adds	r7, #28
 80089f6:	46bd      	mov	sp, r7
 80089f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089fc:	4770      	bx	lr
 80089fe:	bf00      	nop
 8008a00:	40010000 	.word	0x40010000
 8008a04:	40010400 	.word	0x40010400

08008a08 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008a08:	b480      	push	{r7}
 8008a0a:	b087      	sub	sp, #28
 8008a0c:	af00      	add	r7, sp, #0
 8008a0e:	6078      	str	r0, [r7, #4]
 8008a10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	6a1b      	ldr	r3, [r3, #32]
 8008a16:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	6a1b      	ldr	r3, [r3, #32]
 8008a22:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	685b      	ldr	r3, [r3, #4]
 8008a28:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	69db      	ldr	r3, [r3, #28]
 8008a2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008a30:	68fb      	ldr	r3, [r7, #12]
 8008a32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008a36:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008a38:	68fb      	ldr	r3, [r7, #12]
 8008a3a:	f023 0303 	bic.w	r3, r3, #3
 8008a3e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008a40:	683b      	ldr	r3, [r7, #0]
 8008a42:	681b      	ldr	r3, [r3, #0]
 8008a44:	68fa      	ldr	r2, [r7, #12]
 8008a46:	4313      	orrs	r3, r2
 8008a48:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008a4a:	697b      	ldr	r3, [r7, #20]
 8008a4c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008a50:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008a52:	683b      	ldr	r3, [r7, #0]
 8008a54:	689b      	ldr	r3, [r3, #8]
 8008a56:	021b      	lsls	r3, r3, #8
 8008a58:	697a      	ldr	r2, [r7, #20]
 8008a5a:	4313      	orrs	r3, r2
 8008a5c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	4a21      	ldr	r2, [pc, #132]	; (8008ae8 <TIM_OC3_SetConfig+0xe0>)
 8008a62:	4293      	cmp	r3, r2
 8008a64:	d003      	beq.n	8008a6e <TIM_OC3_SetConfig+0x66>
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	4a20      	ldr	r2, [pc, #128]	; (8008aec <TIM_OC3_SetConfig+0xe4>)
 8008a6a:	4293      	cmp	r3, r2
 8008a6c:	d10d      	bne.n	8008a8a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008a6e:	697b      	ldr	r3, [r7, #20]
 8008a70:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008a74:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008a76:	683b      	ldr	r3, [r7, #0]
 8008a78:	68db      	ldr	r3, [r3, #12]
 8008a7a:	021b      	lsls	r3, r3, #8
 8008a7c:	697a      	ldr	r2, [r7, #20]
 8008a7e:	4313      	orrs	r3, r2
 8008a80:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008a82:	697b      	ldr	r3, [r7, #20]
 8008a84:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008a88:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	4a16      	ldr	r2, [pc, #88]	; (8008ae8 <TIM_OC3_SetConfig+0xe0>)
 8008a8e:	4293      	cmp	r3, r2
 8008a90:	d003      	beq.n	8008a9a <TIM_OC3_SetConfig+0x92>
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	4a15      	ldr	r2, [pc, #84]	; (8008aec <TIM_OC3_SetConfig+0xe4>)
 8008a96:	4293      	cmp	r3, r2
 8008a98:	d113      	bne.n	8008ac2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008a9a:	693b      	ldr	r3, [r7, #16]
 8008a9c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008aa0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008aa2:	693b      	ldr	r3, [r7, #16]
 8008aa4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008aa8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008aaa:	683b      	ldr	r3, [r7, #0]
 8008aac:	695b      	ldr	r3, [r3, #20]
 8008aae:	011b      	lsls	r3, r3, #4
 8008ab0:	693a      	ldr	r2, [r7, #16]
 8008ab2:	4313      	orrs	r3, r2
 8008ab4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008ab6:	683b      	ldr	r3, [r7, #0]
 8008ab8:	699b      	ldr	r3, [r3, #24]
 8008aba:	011b      	lsls	r3, r3, #4
 8008abc:	693a      	ldr	r2, [r7, #16]
 8008abe:	4313      	orrs	r3, r2
 8008ac0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	693a      	ldr	r2, [r7, #16]
 8008ac6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	68fa      	ldr	r2, [r7, #12]
 8008acc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008ace:	683b      	ldr	r3, [r7, #0]
 8008ad0:	685a      	ldr	r2, [r3, #4]
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	697a      	ldr	r2, [r7, #20]
 8008ada:	621a      	str	r2, [r3, #32]
}
 8008adc:	bf00      	nop
 8008ade:	371c      	adds	r7, #28
 8008ae0:	46bd      	mov	sp, r7
 8008ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ae6:	4770      	bx	lr
 8008ae8:	40010000 	.word	0x40010000
 8008aec:	40010400 	.word	0x40010400

08008af0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008af0:	b480      	push	{r7}
 8008af2:	b087      	sub	sp, #28
 8008af4:	af00      	add	r7, sp, #0
 8008af6:	6078      	str	r0, [r7, #4]
 8008af8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	6a1b      	ldr	r3, [r3, #32]
 8008afe:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	6a1b      	ldr	r3, [r3, #32]
 8008b0a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	685b      	ldr	r3, [r3, #4]
 8008b10:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	69db      	ldr	r3, [r3, #28]
 8008b16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008b18:	68fb      	ldr	r3, [r7, #12]
 8008b1a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008b1e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008b20:	68fb      	ldr	r3, [r7, #12]
 8008b22:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008b26:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008b28:	683b      	ldr	r3, [r7, #0]
 8008b2a:	681b      	ldr	r3, [r3, #0]
 8008b2c:	021b      	lsls	r3, r3, #8
 8008b2e:	68fa      	ldr	r2, [r7, #12]
 8008b30:	4313      	orrs	r3, r2
 8008b32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008b34:	693b      	ldr	r3, [r7, #16]
 8008b36:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008b3a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008b3c:	683b      	ldr	r3, [r7, #0]
 8008b3e:	689b      	ldr	r3, [r3, #8]
 8008b40:	031b      	lsls	r3, r3, #12
 8008b42:	693a      	ldr	r2, [r7, #16]
 8008b44:	4313      	orrs	r3, r2
 8008b46:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	4a12      	ldr	r2, [pc, #72]	; (8008b94 <TIM_OC4_SetConfig+0xa4>)
 8008b4c:	4293      	cmp	r3, r2
 8008b4e:	d003      	beq.n	8008b58 <TIM_OC4_SetConfig+0x68>
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	4a11      	ldr	r2, [pc, #68]	; (8008b98 <TIM_OC4_SetConfig+0xa8>)
 8008b54:	4293      	cmp	r3, r2
 8008b56:	d109      	bne.n	8008b6c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008b58:	697b      	ldr	r3, [r7, #20]
 8008b5a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008b5e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008b60:	683b      	ldr	r3, [r7, #0]
 8008b62:	695b      	ldr	r3, [r3, #20]
 8008b64:	019b      	lsls	r3, r3, #6
 8008b66:	697a      	ldr	r2, [r7, #20]
 8008b68:	4313      	orrs	r3, r2
 8008b6a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	697a      	ldr	r2, [r7, #20]
 8008b70:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	68fa      	ldr	r2, [r7, #12]
 8008b76:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008b78:	683b      	ldr	r3, [r7, #0]
 8008b7a:	685a      	ldr	r2, [r3, #4]
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	693a      	ldr	r2, [r7, #16]
 8008b84:	621a      	str	r2, [r3, #32]
}
 8008b86:	bf00      	nop
 8008b88:	371c      	adds	r7, #28
 8008b8a:	46bd      	mov	sp, r7
 8008b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b90:	4770      	bx	lr
 8008b92:	bf00      	nop
 8008b94:	40010000 	.word	0x40010000
 8008b98:	40010400 	.word	0x40010400

08008b9c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008b9c:	b480      	push	{r7}
 8008b9e:	b087      	sub	sp, #28
 8008ba0:	af00      	add	r7, sp, #0
 8008ba2:	60f8      	str	r0, [r7, #12]
 8008ba4:	60b9      	str	r1, [r7, #8]
 8008ba6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008ba8:	68fb      	ldr	r3, [r7, #12]
 8008baa:	6a1b      	ldr	r3, [r3, #32]
 8008bac:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008bae:	68fb      	ldr	r3, [r7, #12]
 8008bb0:	6a1b      	ldr	r3, [r3, #32]
 8008bb2:	f023 0201 	bic.w	r2, r3, #1
 8008bb6:	68fb      	ldr	r3, [r7, #12]
 8008bb8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008bba:	68fb      	ldr	r3, [r7, #12]
 8008bbc:	699b      	ldr	r3, [r3, #24]
 8008bbe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008bc0:	693b      	ldr	r3, [r7, #16]
 8008bc2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008bc6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	011b      	lsls	r3, r3, #4
 8008bcc:	693a      	ldr	r2, [r7, #16]
 8008bce:	4313      	orrs	r3, r2
 8008bd0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008bd2:	697b      	ldr	r3, [r7, #20]
 8008bd4:	f023 030a 	bic.w	r3, r3, #10
 8008bd8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008bda:	697a      	ldr	r2, [r7, #20]
 8008bdc:	68bb      	ldr	r3, [r7, #8]
 8008bde:	4313      	orrs	r3, r2
 8008be0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008be2:	68fb      	ldr	r3, [r7, #12]
 8008be4:	693a      	ldr	r2, [r7, #16]
 8008be6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008be8:	68fb      	ldr	r3, [r7, #12]
 8008bea:	697a      	ldr	r2, [r7, #20]
 8008bec:	621a      	str	r2, [r3, #32]
}
 8008bee:	bf00      	nop
 8008bf0:	371c      	adds	r7, #28
 8008bf2:	46bd      	mov	sp, r7
 8008bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bf8:	4770      	bx	lr

08008bfa <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008bfa:	b480      	push	{r7}
 8008bfc:	b087      	sub	sp, #28
 8008bfe:	af00      	add	r7, sp, #0
 8008c00:	60f8      	str	r0, [r7, #12]
 8008c02:	60b9      	str	r1, [r7, #8]
 8008c04:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008c06:	68fb      	ldr	r3, [r7, #12]
 8008c08:	6a1b      	ldr	r3, [r3, #32]
 8008c0a:	f023 0210 	bic.w	r2, r3, #16
 8008c0e:	68fb      	ldr	r3, [r7, #12]
 8008c10:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008c12:	68fb      	ldr	r3, [r7, #12]
 8008c14:	699b      	ldr	r3, [r3, #24]
 8008c16:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008c18:	68fb      	ldr	r3, [r7, #12]
 8008c1a:	6a1b      	ldr	r3, [r3, #32]
 8008c1c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008c1e:	697b      	ldr	r3, [r7, #20]
 8008c20:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008c24:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	031b      	lsls	r3, r3, #12
 8008c2a:	697a      	ldr	r2, [r7, #20]
 8008c2c:	4313      	orrs	r3, r2
 8008c2e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008c30:	693b      	ldr	r3, [r7, #16]
 8008c32:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008c36:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008c38:	68bb      	ldr	r3, [r7, #8]
 8008c3a:	011b      	lsls	r3, r3, #4
 8008c3c:	693a      	ldr	r2, [r7, #16]
 8008c3e:	4313      	orrs	r3, r2
 8008c40:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008c42:	68fb      	ldr	r3, [r7, #12]
 8008c44:	697a      	ldr	r2, [r7, #20]
 8008c46:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008c48:	68fb      	ldr	r3, [r7, #12]
 8008c4a:	693a      	ldr	r2, [r7, #16]
 8008c4c:	621a      	str	r2, [r3, #32]
}
 8008c4e:	bf00      	nop
 8008c50:	371c      	adds	r7, #28
 8008c52:	46bd      	mov	sp, r7
 8008c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c58:	4770      	bx	lr

08008c5a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008c5a:	b480      	push	{r7}
 8008c5c:	b085      	sub	sp, #20
 8008c5e:	af00      	add	r7, sp, #0
 8008c60:	6078      	str	r0, [r7, #4]
 8008c62:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	689b      	ldr	r3, [r3, #8]
 8008c68:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008c6a:	68fb      	ldr	r3, [r7, #12]
 8008c6c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008c70:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008c72:	683a      	ldr	r2, [r7, #0]
 8008c74:	68fb      	ldr	r3, [r7, #12]
 8008c76:	4313      	orrs	r3, r2
 8008c78:	f043 0307 	orr.w	r3, r3, #7
 8008c7c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	68fa      	ldr	r2, [r7, #12]
 8008c82:	609a      	str	r2, [r3, #8]
}
 8008c84:	bf00      	nop
 8008c86:	3714      	adds	r7, #20
 8008c88:	46bd      	mov	sp, r7
 8008c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c8e:	4770      	bx	lr

08008c90 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008c90:	b480      	push	{r7}
 8008c92:	b087      	sub	sp, #28
 8008c94:	af00      	add	r7, sp, #0
 8008c96:	60f8      	str	r0, [r7, #12]
 8008c98:	60b9      	str	r1, [r7, #8]
 8008c9a:	607a      	str	r2, [r7, #4]
 8008c9c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008c9e:	68fb      	ldr	r3, [r7, #12]
 8008ca0:	689b      	ldr	r3, [r3, #8]
 8008ca2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008ca4:	697b      	ldr	r3, [r7, #20]
 8008ca6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008caa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008cac:	683b      	ldr	r3, [r7, #0]
 8008cae:	021a      	lsls	r2, r3, #8
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	431a      	orrs	r2, r3
 8008cb4:	68bb      	ldr	r3, [r7, #8]
 8008cb6:	4313      	orrs	r3, r2
 8008cb8:	697a      	ldr	r2, [r7, #20]
 8008cba:	4313      	orrs	r3, r2
 8008cbc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008cbe:	68fb      	ldr	r3, [r7, #12]
 8008cc0:	697a      	ldr	r2, [r7, #20]
 8008cc2:	609a      	str	r2, [r3, #8]
}
 8008cc4:	bf00      	nop
 8008cc6:	371c      	adds	r7, #28
 8008cc8:	46bd      	mov	sp, r7
 8008cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cce:	4770      	bx	lr

08008cd0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008cd0:	b480      	push	{r7}
 8008cd2:	b087      	sub	sp, #28
 8008cd4:	af00      	add	r7, sp, #0
 8008cd6:	60f8      	str	r0, [r7, #12]
 8008cd8:	60b9      	str	r1, [r7, #8]
 8008cda:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008cdc:	68bb      	ldr	r3, [r7, #8]
 8008cde:	f003 031f 	and.w	r3, r3, #31
 8008ce2:	2201      	movs	r2, #1
 8008ce4:	fa02 f303 	lsl.w	r3, r2, r3
 8008ce8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008cea:	68fb      	ldr	r3, [r7, #12]
 8008cec:	6a1a      	ldr	r2, [r3, #32]
 8008cee:	697b      	ldr	r3, [r7, #20]
 8008cf0:	43db      	mvns	r3, r3
 8008cf2:	401a      	ands	r2, r3
 8008cf4:	68fb      	ldr	r3, [r7, #12]
 8008cf6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008cf8:	68fb      	ldr	r3, [r7, #12]
 8008cfa:	6a1a      	ldr	r2, [r3, #32]
 8008cfc:	68bb      	ldr	r3, [r7, #8]
 8008cfe:	f003 031f 	and.w	r3, r3, #31
 8008d02:	6879      	ldr	r1, [r7, #4]
 8008d04:	fa01 f303 	lsl.w	r3, r1, r3
 8008d08:	431a      	orrs	r2, r3
 8008d0a:	68fb      	ldr	r3, [r7, #12]
 8008d0c:	621a      	str	r2, [r3, #32]
}
 8008d0e:	bf00      	nop
 8008d10:	371c      	adds	r7, #28
 8008d12:	46bd      	mov	sp, r7
 8008d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d18:	4770      	bx	lr
	...

08008d1c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008d1c:	b480      	push	{r7}
 8008d1e:	b085      	sub	sp, #20
 8008d20:	af00      	add	r7, sp, #0
 8008d22:	6078      	str	r0, [r7, #4]
 8008d24:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008d2c:	2b01      	cmp	r3, #1
 8008d2e:	d101      	bne.n	8008d34 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008d30:	2302      	movs	r3, #2
 8008d32:	e05a      	b.n	8008dea <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	2201      	movs	r2, #1
 8008d38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	2202      	movs	r2, #2
 8008d40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	681b      	ldr	r3, [r3, #0]
 8008d48:	685b      	ldr	r3, [r3, #4]
 8008d4a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	681b      	ldr	r3, [r3, #0]
 8008d50:	689b      	ldr	r3, [r3, #8]
 8008d52:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008d54:	68fb      	ldr	r3, [r7, #12]
 8008d56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008d5a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008d5c:	683b      	ldr	r3, [r7, #0]
 8008d5e:	681b      	ldr	r3, [r3, #0]
 8008d60:	68fa      	ldr	r2, [r7, #12]
 8008d62:	4313      	orrs	r3, r2
 8008d64:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	681b      	ldr	r3, [r3, #0]
 8008d6a:	68fa      	ldr	r2, [r7, #12]
 8008d6c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	681b      	ldr	r3, [r3, #0]
 8008d72:	4a21      	ldr	r2, [pc, #132]	; (8008df8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8008d74:	4293      	cmp	r3, r2
 8008d76:	d022      	beq.n	8008dbe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	681b      	ldr	r3, [r3, #0]
 8008d7c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008d80:	d01d      	beq.n	8008dbe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	681b      	ldr	r3, [r3, #0]
 8008d86:	4a1d      	ldr	r2, [pc, #116]	; (8008dfc <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8008d88:	4293      	cmp	r3, r2
 8008d8a:	d018      	beq.n	8008dbe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	681b      	ldr	r3, [r3, #0]
 8008d90:	4a1b      	ldr	r2, [pc, #108]	; (8008e00 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8008d92:	4293      	cmp	r3, r2
 8008d94:	d013      	beq.n	8008dbe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	681b      	ldr	r3, [r3, #0]
 8008d9a:	4a1a      	ldr	r2, [pc, #104]	; (8008e04 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8008d9c:	4293      	cmp	r3, r2
 8008d9e:	d00e      	beq.n	8008dbe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	681b      	ldr	r3, [r3, #0]
 8008da4:	4a18      	ldr	r2, [pc, #96]	; (8008e08 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8008da6:	4293      	cmp	r3, r2
 8008da8:	d009      	beq.n	8008dbe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	681b      	ldr	r3, [r3, #0]
 8008dae:	4a17      	ldr	r2, [pc, #92]	; (8008e0c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8008db0:	4293      	cmp	r3, r2
 8008db2:	d004      	beq.n	8008dbe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	681b      	ldr	r3, [r3, #0]
 8008db8:	4a15      	ldr	r2, [pc, #84]	; (8008e10 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8008dba:	4293      	cmp	r3, r2
 8008dbc:	d10c      	bne.n	8008dd8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008dbe:	68bb      	ldr	r3, [r7, #8]
 8008dc0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008dc4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008dc6:	683b      	ldr	r3, [r7, #0]
 8008dc8:	685b      	ldr	r3, [r3, #4]
 8008dca:	68ba      	ldr	r2, [r7, #8]
 8008dcc:	4313      	orrs	r3, r2
 8008dce:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	681b      	ldr	r3, [r3, #0]
 8008dd4:	68ba      	ldr	r2, [r7, #8]
 8008dd6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	2201      	movs	r2, #1
 8008ddc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	2200      	movs	r2, #0
 8008de4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008de8:	2300      	movs	r3, #0
}
 8008dea:	4618      	mov	r0, r3
 8008dec:	3714      	adds	r7, #20
 8008dee:	46bd      	mov	sp, r7
 8008df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008df4:	4770      	bx	lr
 8008df6:	bf00      	nop
 8008df8:	40010000 	.word	0x40010000
 8008dfc:	40000400 	.word	0x40000400
 8008e00:	40000800 	.word	0x40000800
 8008e04:	40000c00 	.word	0x40000c00
 8008e08:	40010400 	.word	0x40010400
 8008e0c:	40014000 	.word	0x40014000
 8008e10:	40001800 	.word	0x40001800

08008e14 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008e14:	b480      	push	{r7}
 8008e16:	b083      	sub	sp, #12
 8008e18:	af00      	add	r7, sp, #0
 8008e1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008e1c:	bf00      	nop
 8008e1e:	370c      	adds	r7, #12
 8008e20:	46bd      	mov	sp, r7
 8008e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e26:	4770      	bx	lr

08008e28 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008e28:	b480      	push	{r7}
 8008e2a:	b083      	sub	sp, #12
 8008e2c:	af00      	add	r7, sp, #0
 8008e2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008e30:	bf00      	nop
 8008e32:	370c      	adds	r7, #12
 8008e34:	46bd      	mov	sp, r7
 8008e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e3a:	4770      	bx	lr

08008e3c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008e3c:	b580      	push	{r7, lr}
 8008e3e:	b082      	sub	sp, #8
 8008e40:	af00      	add	r7, sp, #0
 8008e42:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	2b00      	cmp	r3, #0
 8008e48:	d101      	bne.n	8008e4e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008e4a:	2301      	movs	r3, #1
 8008e4c:	e03f      	b.n	8008ece <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8008e54:	b2db      	uxtb	r3, r3
 8008e56:	2b00      	cmp	r3, #0
 8008e58:	d106      	bne.n	8008e68 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	2200      	movs	r2, #0
 8008e5e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008e62:	6878      	ldr	r0, [r7, #4]
 8008e64:	f7f9 ff6c 	bl	8002d40 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	2224      	movs	r2, #36	; 0x24
 8008e6c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	681b      	ldr	r3, [r3, #0]
 8008e74:	68da      	ldr	r2, [r3, #12]
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	681b      	ldr	r3, [r3, #0]
 8008e7a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008e7e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008e80:	6878      	ldr	r0, [r7, #4]
 8008e82:	f000 f829 	bl	8008ed8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	681b      	ldr	r3, [r3, #0]
 8008e8a:	691a      	ldr	r2, [r3, #16]
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	681b      	ldr	r3, [r3, #0]
 8008e90:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008e94:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	681b      	ldr	r3, [r3, #0]
 8008e9a:	695a      	ldr	r2, [r3, #20]
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	681b      	ldr	r3, [r3, #0]
 8008ea0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008ea4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	681b      	ldr	r3, [r3, #0]
 8008eaa:	68da      	ldr	r2, [r3, #12]
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	681b      	ldr	r3, [r3, #0]
 8008eb0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008eb4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	2200      	movs	r2, #0
 8008eba:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	2220      	movs	r2, #32
 8008ec0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	2220      	movs	r2, #32
 8008ec8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8008ecc:	2300      	movs	r3, #0
}
 8008ece:	4618      	mov	r0, r3
 8008ed0:	3708      	adds	r7, #8
 8008ed2:	46bd      	mov	sp, r7
 8008ed4:	bd80      	pop	{r7, pc}
	...

08008ed8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008ed8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008edc:	b085      	sub	sp, #20
 8008ede:	af00      	add	r7, sp, #0
 8008ee0:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	681b      	ldr	r3, [r3, #0]
 8008ee6:	691b      	ldr	r3, [r3, #16]
 8008ee8:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	68da      	ldr	r2, [r3, #12]
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	681b      	ldr	r3, [r3, #0]
 8008ef4:	430a      	orrs	r2, r1
 8008ef6:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	689a      	ldr	r2, [r3, #8]
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	691b      	ldr	r3, [r3, #16]
 8008f00:	431a      	orrs	r2, r3
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	695b      	ldr	r3, [r3, #20]
 8008f06:	431a      	orrs	r2, r3
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	69db      	ldr	r3, [r3, #28]
 8008f0c:	4313      	orrs	r3, r2
 8008f0e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	681b      	ldr	r3, [r3, #0]
 8008f14:	68db      	ldr	r3, [r3, #12]
 8008f16:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8008f1a:	f023 030c 	bic.w	r3, r3, #12
 8008f1e:	687a      	ldr	r2, [r7, #4]
 8008f20:	6812      	ldr	r2, [r2, #0]
 8008f22:	68f9      	ldr	r1, [r7, #12]
 8008f24:	430b      	orrs	r3, r1
 8008f26:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	681b      	ldr	r3, [r3, #0]
 8008f2c:	695b      	ldr	r3, [r3, #20]
 8008f2e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	699a      	ldr	r2, [r3, #24]
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	681b      	ldr	r3, [r3, #0]
 8008f3a:	430a      	orrs	r2, r1
 8008f3c:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	69db      	ldr	r3, [r3, #28]
 8008f42:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008f46:	f040 818b 	bne.w	8009260 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	681b      	ldr	r3, [r3, #0]
 8008f4e:	4ac1      	ldr	r2, [pc, #772]	; (8009254 <UART_SetConfig+0x37c>)
 8008f50:	4293      	cmp	r3, r2
 8008f52:	d005      	beq.n	8008f60 <UART_SetConfig+0x88>
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	681b      	ldr	r3, [r3, #0]
 8008f58:	4abf      	ldr	r2, [pc, #764]	; (8009258 <UART_SetConfig+0x380>)
 8008f5a:	4293      	cmp	r3, r2
 8008f5c:	f040 80bd 	bne.w	80090da <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8008f60:	f7fc fdee 	bl	8005b40 <HAL_RCC_GetPCLK2Freq>
 8008f64:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008f66:	68bb      	ldr	r3, [r7, #8]
 8008f68:	461d      	mov	r5, r3
 8008f6a:	f04f 0600 	mov.w	r6, #0
 8008f6e:	46a8      	mov	r8, r5
 8008f70:	46b1      	mov	r9, r6
 8008f72:	eb18 0308 	adds.w	r3, r8, r8
 8008f76:	eb49 0409 	adc.w	r4, r9, r9
 8008f7a:	4698      	mov	r8, r3
 8008f7c:	46a1      	mov	r9, r4
 8008f7e:	eb18 0805 	adds.w	r8, r8, r5
 8008f82:	eb49 0906 	adc.w	r9, r9, r6
 8008f86:	f04f 0100 	mov.w	r1, #0
 8008f8a:	f04f 0200 	mov.w	r2, #0
 8008f8e:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8008f92:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8008f96:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8008f9a:	4688      	mov	r8, r1
 8008f9c:	4691      	mov	r9, r2
 8008f9e:	eb18 0005 	adds.w	r0, r8, r5
 8008fa2:	eb49 0106 	adc.w	r1, r9, r6
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	685b      	ldr	r3, [r3, #4]
 8008faa:	461d      	mov	r5, r3
 8008fac:	f04f 0600 	mov.w	r6, #0
 8008fb0:	196b      	adds	r3, r5, r5
 8008fb2:	eb46 0406 	adc.w	r4, r6, r6
 8008fb6:	461a      	mov	r2, r3
 8008fb8:	4623      	mov	r3, r4
 8008fba:	f7f7 fe65 	bl	8000c88 <__aeabi_uldivmod>
 8008fbe:	4603      	mov	r3, r0
 8008fc0:	460c      	mov	r4, r1
 8008fc2:	461a      	mov	r2, r3
 8008fc4:	4ba5      	ldr	r3, [pc, #660]	; (800925c <UART_SetConfig+0x384>)
 8008fc6:	fba3 2302 	umull	r2, r3, r3, r2
 8008fca:	095b      	lsrs	r3, r3, #5
 8008fcc:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8008fd0:	68bb      	ldr	r3, [r7, #8]
 8008fd2:	461d      	mov	r5, r3
 8008fd4:	f04f 0600 	mov.w	r6, #0
 8008fd8:	46a9      	mov	r9, r5
 8008fda:	46b2      	mov	sl, r6
 8008fdc:	eb19 0309 	adds.w	r3, r9, r9
 8008fe0:	eb4a 040a 	adc.w	r4, sl, sl
 8008fe4:	4699      	mov	r9, r3
 8008fe6:	46a2      	mov	sl, r4
 8008fe8:	eb19 0905 	adds.w	r9, r9, r5
 8008fec:	eb4a 0a06 	adc.w	sl, sl, r6
 8008ff0:	f04f 0100 	mov.w	r1, #0
 8008ff4:	f04f 0200 	mov.w	r2, #0
 8008ff8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008ffc:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8009000:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8009004:	4689      	mov	r9, r1
 8009006:	4692      	mov	sl, r2
 8009008:	eb19 0005 	adds.w	r0, r9, r5
 800900c:	eb4a 0106 	adc.w	r1, sl, r6
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	685b      	ldr	r3, [r3, #4]
 8009014:	461d      	mov	r5, r3
 8009016:	f04f 0600 	mov.w	r6, #0
 800901a:	196b      	adds	r3, r5, r5
 800901c:	eb46 0406 	adc.w	r4, r6, r6
 8009020:	461a      	mov	r2, r3
 8009022:	4623      	mov	r3, r4
 8009024:	f7f7 fe30 	bl	8000c88 <__aeabi_uldivmod>
 8009028:	4603      	mov	r3, r0
 800902a:	460c      	mov	r4, r1
 800902c:	461a      	mov	r2, r3
 800902e:	4b8b      	ldr	r3, [pc, #556]	; (800925c <UART_SetConfig+0x384>)
 8009030:	fba3 1302 	umull	r1, r3, r3, r2
 8009034:	095b      	lsrs	r3, r3, #5
 8009036:	2164      	movs	r1, #100	; 0x64
 8009038:	fb01 f303 	mul.w	r3, r1, r3
 800903c:	1ad3      	subs	r3, r2, r3
 800903e:	00db      	lsls	r3, r3, #3
 8009040:	3332      	adds	r3, #50	; 0x32
 8009042:	4a86      	ldr	r2, [pc, #536]	; (800925c <UART_SetConfig+0x384>)
 8009044:	fba2 2303 	umull	r2, r3, r2, r3
 8009048:	095b      	lsrs	r3, r3, #5
 800904a:	005b      	lsls	r3, r3, #1
 800904c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8009050:	4498      	add	r8, r3
 8009052:	68bb      	ldr	r3, [r7, #8]
 8009054:	461d      	mov	r5, r3
 8009056:	f04f 0600 	mov.w	r6, #0
 800905a:	46a9      	mov	r9, r5
 800905c:	46b2      	mov	sl, r6
 800905e:	eb19 0309 	adds.w	r3, r9, r9
 8009062:	eb4a 040a 	adc.w	r4, sl, sl
 8009066:	4699      	mov	r9, r3
 8009068:	46a2      	mov	sl, r4
 800906a:	eb19 0905 	adds.w	r9, r9, r5
 800906e:	eb4a 0a06 	adc.w	sl, sl, r6
 8009072:	f04f 0100 	mov.w	r1, #0
 8009076:	f04f 0200 	mov.w	r2, #0
 800907a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800907e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8009082:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8009086:	4689      	mov	r9, r1
 8009088:	4692      	mov	sl, r2
 800908a:	eb19 0005 	adds.w	r0, r9, r5
 800908e:	eb4a 0106 	adc.w	r1, sl, r6
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	685b      	ldr	r3, [r3, #4]
 8009096:	461d      	mov	r5, r3
 8009098:	f04f 0600 	mov.w	r6, #0
 800909c:	196b      	adds	r3, r5, r5
 800909e:	eb46 0406 	adc.w	r4, r6, r6
 80090a2:	461a      	mov	r2, r3
 80090a4:	4623      	mov	r3, r4
 80090a6:	f7f7 fdef 	bl	8000c88 <__aeabi_uldivmod>
 80090aa:	4603      	mov	r3, r0
 80090ac:	460c      	mov	r4, r1
 80090ae:	461a      	mov	r2, r3
 80090b0:	4b6a      	ldr	r3, [pc, #424]	; (800925c <UART_SetConfig+0x384>)
 80090b2:	fba3 1302 	umull	r1, r3, r3, r2
 80090b6:	095b      	lsrs	r3, r3, #5
 80090b8:	2164      	movs	r1, #100	; 0x64
 80090ba:	fb01 f303 	mul.w	r3, r1, r3
 80090be:	1ad3      	subs	r3, r2, r3
 80090c0:	00db      	lsls	r3, r3, #3
 80090c2:	3332      	adds	r3, #50	; 0x32
 80090c4:	4a65      	ldr	r2, [pc, #404]	; (800925c <UART_SetConfig+0x384>)
 80090c6:	fba2 2303 	umull	r2, r3, r2, r3
 80090ca:	095b      	lsrs	r3, r3, #5
 80090cc:	f003 0207 	and.w	r2, r3, #7
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	681b      	ldr	r3, [r3, #0]
 80090d4:	4442      	add	r2, r8
 80090d6:	609a      	str	r2, [r3, #8]
 80090d8:	e26f      	b.n	80095ba <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80090da:	f7fc fd1d 	bl	8005b18 <HAL_RCC_GetPCLK1Freq>
 80090de:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80090e0:	68bb      	ldr	r3, [r7, #8]
 80090e2:	461d      	mov	r5, r3
 80090e4:	f04f 0600 	mov.w	r6, #0
 80090e8:	46a8      	mov	r8, r5
 80090ea:	46b1      	mov	r9, r6
 80090ec:	eb18 0308 	adds.w	r3, r8, r8
 80090f0:	eb49 0409 	adc.w	r4, r9, r9
 80090f4:	4698      	mov	r8, r3
 80090f6:	46a1      	mov	r9, r4
 80090f8:	eb18 0805 	adds.w	r8, r8, r5
 80090fc:	eb49 0906 	adc.w	r9, r9, r6
 8009100:	f04f 0100 	mov.w	r1, #0
 8009104:	f04f 0200 	mov.w	r2, #0
 8009108:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800910c:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8009110:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8009114:	4688      	mov	r8, r1
 8009116:	4691      	mov	r9, r2
 8009118:	eb18 0005 	adds.w	r0, r8, r5
 800911c:	eb49 0106 	adc.w	r1, r9, r6
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	685b      	ldr	r3, [r3, #4]
 8009124:	461d      	mov	r5, r3
 8009126:	f04f 0600 	mov.w	r6, #0
 800912a:	196b      	adds	r3, r5, r5
 800912c:	eb46 0406 	adc.w	r4, r6, r6
 8009130:	461a      	mov	r2, r3
 8009132:	4623      	mov	r3, r4
 8009134:	f7f7 fda8 	bl	8000c88 <__aeabi_uldivmod>
 8009138:	4603      	mov	r3, r0
 800913a:	460c      	mov	r4, r1
 800913c:	461a      	mov	r2, r3
 800913e:	4b47      	ldr	r3, [pc, #284]	; (800925c <UART_SetConfig+0x384>)
 8009140:	fba3 2302 	umull	r2, r3, r3, r2
 8009144:	095b      	lsrs	r3, r3, #5
 8009146:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800914a:	68bb      	ldr	r3, [r7, #8]
 800914c:	461d      	mov	r5, r3
 800914e:	f04f 0600 	mov.w	r6, #0
 8009152:	46a9      	mov	r9, r5
 8009154:	46b2      	mov	sl, r6
 8009156:	eb19 0309 	adds.w	r3, r9, r9
 800915a:	eb4a 040a 	adc.w	r4, sl, sl
 800915e:	4699      	mov	r9, r3
 8009160:	46a2      	mov	sl, r4
 8009162:	eb19 0905 	adds.w	r9, r9, r5
 8009166:	eb4a 0a06 	adc.w	sl, sl, r6
 800916a:	f04f 0100 	mov.w	r1, #0
 800916e:	f04f 0200 	mov.w	r2, #0
 8009172:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009176:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800917a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800917e:	4689      	mov	r9, r1
 8009180:	4692      	mov	sl, r2
 8009182:	eb19 0005 	adds.w	r0, r9, r5
 8009186:	eb4a 0106 	adc.w	r1, sl, r6
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	685b      	ldr	r3, [r3, #4]
 800918e:	461d      	mov	r5, r3
 8009190:	f04f 0600 	mov.w	r6, #0
 8009194:	196b      	adds	r3, r5, r5
 8009196:	eb46 0406 	adc.w	r4, r6, r6
 800919a:	461a      	mov	r2, r3
 800919c:	4623      	mov	r3, r4
 800919e:	f7f7 fd73 	bl	8000c88 <__aeabi_uldivmod>
 80091a2:	4603      	mov	r3, r0
 80091a4:	460c      	mov	r4, r1
 80091a6:	461a      	mov	r2, r3
 80091a8:	4b2c      	ldr	r3, [pc, #176]	; (800925c <UART_SetConfig+0x384>)
 80091aa:	fba3 1302 	umull	r1, r3, r3, r2
 80091ae:	095b      	lsrs	r3, r3, #5
 80091b0:	2164      	movs	r1, #100	; 0x64
 80091b2:	fb01 f303 	mul.w	r3, r1, r3
 80091b6:	1ad3      	subs	r3, r2, r3
 80091b8:	00db      	lsls	r3, r3, #3
 80091ba:	3332      	adds	r3, #50	; 0x32
 80091bc:	4a27      	ldr	r2, [pc, #156]	; (800925c <UART_SetConfig+0x384>)
 80091be:	fba2 2303 	umull	r2, r3, r2, r3
 80091c2:	095b      	lsrs	r3, r3, #5
 80091c4:	005b      	lsls	r3, r3, #1
 80091c6:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80091ca:	4498      	add	r8, r3
 80091cc:	68bb      	ldr	r3, [r7, #8]
 80091ce:	461d      	mov	r5, r3
 80091d0:	f04f 0600 	mov.w	r6, #0
 80091d4:	46a9      	mov	r9, r5
 80091d6:	46b2      	mov	sl, r6
 80091d8:	eb19 0309 	adds.w	r3, r9, r9
 80091dc:	eb4a 040a 	adc.w	r4, sl, sl
 80091e0:	4699      	mov	r9, r3
 80091e2:	46a2      	mov	sl, r4
 80091e4:	eb19 0905 	adds.w	r9, r9, r5
 80091e8:	eb4a 0a06 	adc.w	sl, sl, r6
 80091ec:	f04f 0100 	mov.w	r1, #0
 80091f0:	f04f 0200 	mov.w	r2, #0
 80091f4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80091f8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80091fc:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8009200:	4689      	mov	r9, r1
 8009202:	4692      	mov	sl, r2
 8009204:	eb19 0005 	adds.w	r0, r9, r5
 8009208:	eb4a 0106 	adc.w	r1, sl, r6
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	685b      	ldr	r3, [r3, #4]
 8009210:	461d      	mov	r5, r3
 8009212:	f04f 0600 	mov.w	r6, #0
 8009216:	196b      	adds	r3, r5, r5
 8009218:	eb46 0406 	adc.w	r4, r6, r6
 800921c:	461a      	mov	r2, r3
 800921e:	4623      	mov	r3, r4
 8009220:	f7f7 fd32 	bl	8000c88 <__aeabi_uldivmod>
 8009224:	4603      	mov	r3, r0
 8009226:	460c      	mov	r4, r1
 8009228:	461a      	mov	r2, r3
 800922a:	4b0c      	ldr	r3, [pc, #48]	; (800925c <UART_SetConfig+0x384>)
 800922c:	fba3 1302 	umull	r1, r3, r3, r2
 8009230:	095b      	lsrs	r3, r3, #5
 8009232:	2164      	movs	r1, #100	; 0x64
 8009234:	fb01 f303 	mul.w	r3, r1, r3
 8009238:	1ad3      	subs	r3, r2, r3
 800923a:	00db      	lsls	r3, r3, #3
 800923c:	3332      	adds	r3, #50	; 0x32
 800923e:	4a07      	ldr	r2, [pc, #28]	; (800925c <UART_SetConfig+0x384>)
 8009240:	fba2 2303 	umull	r2, r3, r2, r3
 8009244:	095b      	lsrs	r3, r3, #5
 8009246:	f003 0207 	and.w	r2, r3, #7
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	681b      	ldr	r3, [r3, #0]
 800924e:	4442      	add	r2, r8
 8009250:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8009252:	e1b2      	b.n	80095ba <UART_SetConfig+0x6e2>
 8009254:	40011000 	.word	0x40011000
 8009258:	40011400 	.word	0x40011400
 800925c:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	681b      	ldr	r3, [r3, #0]
 8009264:	4ad7      	ldr	r2, [pc, #860]	; (80095c4 <UART_SetConfig+0x6ec>)
 8009266:	4293      	cmp	r3, r2
 8009268:	d005      	beq.n	8009276 <UART_SetConfig+0x39e>
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	681b      	ldr	r3, [r3, #0]
 800926e:	4ad6      	ldr	r2, [pc, #856]	; (80095c8 <UART_SetConfig+0x6f0>)
 8009270:	4293      	cmp	r3, r2
 8009272:	f040 80d1 	bne.w	8009418 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8009276:	f7fc fc63 	bl	8005b40 <HAL_RCC_GetPCLK2Freq>
 800927a:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800927c:	68bb      	ldr	r3, [r7, #8]
 800927e:	469a      	mov	sl, r3
 8009280:	f04f 0b00 	mov.w	fp, #0
 8009284:	46d0      	mov	r8, sl
 8009286:	46d9      	mov	r9, fp
 8009288:	eb18 0308 	adds.w	r3, r8, r8
 800928c:	eb49 0409 	adc.w	r4, r9, r9
 8009290:	4698      	mov	r8, r3
 8009292:	46a1      	mov	r9, r4
 8009294:	eb18 080a 	adds.w	r8, r8, sl
 8009298:	eb49 090b 	adc.w	r9, r9, fp
 800929c:	f04f 0100 	mov.w	r1, #0
 80092a0:	f04f 0200 	mov.w	r2, #0
 80092a4:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80092a8:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80092ac:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80092b0:	4688      	mov	r8, r1
 80092b2:	4691      	mov	r9, r2
 80092b4:	eb1a 0508 	adds.w	r5, sl, r8
 80092b8:	eb4b 0609 	adc.w	r6, fp, r9
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	685b      	ldr	r3, [r3, #4]
 80092c0:	4619      	mov	r1, r3
 80092c2:	f04f 0200 	mov.w	r2, #0
 80092c6:	f04f 0300 	mov.w	r3, #0
 80092ca:	f04f 0400 	mov.w	r4, #0
 80092ce:	0094      	lsls	r4, r2, #2
 80092d0:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80092d4:	008b      	lsls	r3, r1, #2
 80092d6:	461a      	mov	r2, r3
 80092d8:	4623      	mov	r3, r4
 80092da:	4628      	mov	r0, r5
 80092dc:	4631      	mov	r1, r6
 80092de:	f7f7 fcd3 	bl	8000c88 <__aeabi_uldivmod>
 80092e2:	4603      	mov	r3, r0
 80092e4:	460c      	mov	r4, r1
 80092e6:	461a      	mov	r2, r3
 80092e8:	4bb8      	ldr	r3, [pc, #736]	; (80095cc <UART_SetConfig+0x6f4>)
 80092ea:	fba3 2302 	umull	r2, r3, r3, r2
 80092ee:	095b      	lsrs	r3, r3, #5
 80092f0:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80092f4:	68bb      	ldr	r3, [r7, #8]
 80092f6:	469b      	mov	fp, r3
 80092f8:	f04f 0c00 	mov.w	ip, #0
 80092fc:	46d9      	mov	r9, fp
 80092fe:	46e2      	mov	sl, ip
 8009300:	eb19 0309 	adds.w	r3, r9, r9
 8009304:	eb4a 040a 	adc.w	r4, sl, sl
 8009308:	4699      	mov	r9, r3
 800930a:	46a2      	mov	sl, r4
 800930c:	eb19 090b 	adds.w	r9, r9, fp
 8009310:	eb4a 0a0c 	adc.w	sl, sl, ip
 8009314:	f04f 0100 	mov.w	r1, #0
 8009318:	f04f 0200 	mov.w	r2, #0
 800931c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009320:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8009324:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8009328:	4689      	mov	r9, r1
 800932a:	4692      	mov	sl, r2
 800932c:	eb1b 0509 	adds.w	r5, fp, r9
 8009330:	eb4c 060a 	adc.w	r6, ip, sl
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	685b      	ldr	r3, [r3, #4]
 8009338:	4619      	mov	r1, r3
 800933a:	f04f 0200 	mov.w	r2, #0
 800933e:	f04f 0300 	mov.w	r3, #0
 8009342:	f04f 0400 	mov.w	r4, #0
 8009346:	0094      	lsls	r4, r2, #2
 8009348:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800934c:	008b      	lsls	r3, r1, #2
 800934e:	461a      	mov	r2, r3
 8009350:	4623      	mov	r3, r4
 8009352:	4628      	mov	r0, r5
 8009354:	4631      	mov	r1, r6
 8009356:	f7f7 fc97 	bl	8000c88 <__aeabi_uldivmod>
 800935a:	4603      	mov	r3, r0
 800935c:	460c      	mov	r4, r1
 800935e:	461a      	mov	r2, r3
 8009360:	4b9a      	ldr	r3, [pc, #616]	; (80095cc <UART_SetConfig+0x6f4>)
 8009362:	fba3 1302 	umull	r1, r3, r3, r2
 8009366:	095b      	lsrs	r3, r3, #5
 8009368:	2164      	movs	r1, #100	; 0x64
 800936a:	fb01 f303 	mul.w	r3, r1, r3
 800936e:	1ad3      	subs	r3, r2, r3
 8009370:	011b      	lsls	r3, r3, #4
 8009372:	3332      	adds	r3, #50	; 0x32
 8009374:	4a95      	ldr	r2, [pc, #596]	; (80095cc <UART_SetConfig+0x6f4>)
 8009376:	fba2 2303 	umull	r2, r3, r2, r3
 800937a:	095b      	lsrs	r3, r3, #5
 800937c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009380:	4498      	add	r8, r3
 8009382:	68bb      	ldr	r3, [r7, #8]
 8009384:	469b      	mov	fp, r3
 8009386:	f04f 0c00 	mov.w	ip, #0
 800938a:	46d9      	mov	r9, fp
 800938c:	46e2      	mov	sl, ip
 800938e:	eb19 0309 	adds.w	r3, r9, r9
 8009392:	eb4a 040a 	adc.w	r4, sl, sl
 8009396:	4699      	mov	r9, r3
 8009398:	46a2      	mov	sl, r4
 800939a:	eb19 090b 	adds.w	r9, r9, fp
 800939e:	eb4a 0a0c 	adc.w	sl, sl, ip
 80093a2:	f04f 0100 	mov.w	r1, #0
 80093a6:	f04f 0200 	mov.w	r2, #0
 80093aa:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80093ae:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80093b2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80093b6:	4689      	mov	r9, r1
 80093b8:	4692      	mov	sl, r2
 80093ba:	eb1b 0509 	adds.w	r5, fp, r9
 80093be:	eb4c 060a 	adc.w	r6, ip, sl
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	685b      	ldr	r3, [r3, #4]
 80093c6:	4619      	mov	r1, r3
 80093c8:	f04f 0200 	mov.w	r2, #0
 80093cc:	f04f 0300 	mov.w	r3, #0
 80093d0:	f04f 0400 	mov.w	r4, #0
 80093d4:	0094      	lsls	r4, r2, #2
 80093d6:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80093da:	008b      	lsls	r3, r1, #2
 80093dc:	461a      	mov	r2, r3
 80093de:	4623      	mov	r3, r4
 80093e0:	4628      	mov	r0, r5
 80093e2:	4631      	mov	r1, r6
 80093e4:	f7f7 fc50 	bl	8000c88 <__aeabi_uldivmod>
 80093e8:	4603      	mov	r3, r0
 80093ea:	460c      	mov	r4, r1
 80093ec:	461a      	mov	r2, r3
 80093ee:	4b77      	ldr	r3, [pc, #476]	; (80095cc <UART_SetConfig+0x6f4>)
 80093f0:	fba3 1302 	umull	r1, r3, r3, r2
 80093f4:	095b      	lsrs	r3, r3, #5
 80093f6:	2164      	movs	r1, #100	; 0x64
 80093f8:	fb01 f303 	mul.w	r3, r1, r3
 80093fc:	1ad3      	subs	r3, r2, r3
 80093fe:	011b      	lsls	r3, r3, #4
 8009400:	3332      	adds	r3, #50	; 0x32
 8009402:	4a72      	ldr	r2, [pc, #456]	; (80095cc <UART_SetConfig+0x6f4>)
 8009404:	fba2 2303 	umull	r2, r3, r2, r3
 8009408:	095b      	lsrs	r3, r3, #5
 800940a:	f003 020f 	and.w	r2, r3, #15
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	681b      	ldr	r3, [r3, #0]
 8009412:	4442      	add	r2, r8
 8009414:	609a      	str	r2, [r3, #8]
 8009416:	e0d0      	b.n	80095ba <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8009418:	f7fc fb7e 	bl	8005b18 <HAL_RCC_GetPCLK1Freq>
 800941c:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800941e:	68bb      	ldr	r3, [r7, #8]
 8009420:	469a      	mov	sl, r3
 8009422:	f04f 0b00 	mov.w	fp, #0
 8009426:	46d0      	mov	r8, sl
 8009428:	46d9      	mov	r9, fp
 800942a:	eb18 0308 	adds.w	r3, r8, r8
 800942e:	eb49 0409 	adc.w	r4, r9, r9
 8009432:	4698      	mov	r8, r3
 8009434:	46a1      	mov	r9, r4
 8009436:	eb18 080a 	adds.w	r8, r8, sl
 800943a:	eb49 090b 	adc.w	r9, r9, fp
 800943e:	f04f 0100 	mov.w	r1, #0
 8009442:	f04f 0200 	mov.w	r2, #0
 8009446:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800944a:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800944e:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8009452:	4688      	mov	r8, r1
 8009454:	4691      	mov	r9, r2
 8009456:	eb1a 0508 	adds.w	r5, sl, r8
 800945a:	eb4b 0609 	adc.w	r6, fp, r9
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	685b      	ldr	r3, [r3, #4]
 8009462:	4619      	mov	r1, r3
 8009464:	f04f 0200 	mov.w	r2, #0
 8009468:	f04f 0300 	mov.w	r3, #0
 800946c:	f04f 0400 	mov.w	r4, #0
 8009470:	0094      	lsls	r4, r2, #2
 8009472:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8009476:	008b      	lsls	r3, r1, #2
 8009478:	461a      	mov	r2, r3
 800947a:	4623      	mov	r3, r4
 800947c:	4628      	mov	r0, r5
 800947e:	4631      	mov	r1, r6
 8009480:	f7f7 fc02 	bl	8000c88 <__aeabi_uldivmod>
 8009484:	4603      	mov	r3, r0
 8009486:	460c      	mov	r4, r1
 8009488:	461a      	mov	r2, r3
 800948a:	4b50      	ldr	r3, [pc, #320]	; (80095cc <UART_SetConfig+0x6f4>)
 800948c:	fba3 2302 	umull	r2, r3, r3, r2
 8009490:	095b      	lsrs	r3, r3, #5
 8009492:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8009496:	68bb      	ldr	r3, [r7, #8]
 8009498:	469b      	mov	fp, r3
 800949a:	f04f 0c00 	mov.w	ip, #0
 800949e:	46d9      	mov	r9, fp
 80094a0:	46e2      	mov	sl, ip
 80094a2:	eb19 0309 	adds.w	r3, r9, r9
 80094a6:	eb4a 040a 	adc.w	r4, sl, sl
 80094aa:	4699      	mov	r9, r3
 80094ac:	46a2      	mov	sl, r4
 80094ae:	eb19 090b 	adds.w	r9, r9, fp
 80094b2:	eb4a 0a0c 	adc.w	sl, sl, ip
 80094b6:	f04f 0100 	mov.w	r1, #0
 80094ba:	f04f 0200 	mov.w	r2, #0
 80094be:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80094c2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80094c6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80094ca:	4689      	mov	r9, r1
 80094cc:	4692      	mov	sl, r2
 80094ce:	eb1b 0509 	adds.w	r5, fp, r9
 80094d2:	eb4c 060a 	adc.w	r6, ip, sl
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	685b      	ldr	r3, [r3, #4]
 80094da:	4619      	mov	r1, r3
 80094dc:	f04f 0200 	mov.w	r2, #0
 80094e0:	f04f 0300 	mov.w	r3, #0
 80094e4:	f04f 0400 	mov.w	r4, #0
 80094e8:	0094      	lsls	r4, r2, #2
 80094ea:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80094ee:	008b      	lsls	r3, r1, #2
 80094f0:	461a      	mov	r2, r3
 80094f2:	4623      	mov	r3, r4
 80094f4:	4628      	mov	r0, r5
 80094f6:	4631      	mov	r1, r6
 80094f8:	f7f7 fbc6 	bl	8000c88 <__aeabi_uldivmod>
 80094fc:	4603      	mov	r3, r0
 80094fe:	460c      	mov	r4, r1
 8009500:	461a      	mov	r2, r3
 8009502:	4b32      	ldr	r3, [pc, #200]	; (80095cc <UART_SetConfig+0x6f4>)
 8009504:	fba3 1302 	umull	r1, r3, r3, r2
 8009508:	095b      	lsrs	r3, r3, #5
 800950a:	2164      	movs	r1, #100	; 0x64
 800950c:	fb01 f303 	mul.w	r3, r1, r3
 8009510:	1ad3      	subs	r3, r2, r3
 8009512:	011b      	lsls	r3, r3, #4
 8009514:	3332      	adds	r3, #50	; 0x32
 8009516:	4a2d      	ldr	r2, [pc, #180]	; (80095cc <UART_SetConfig+0x6f4>)
 8009518:	fba2 2303 	umull	r2, r3, r2, r3
 800951c:	095b      	lsrs	r3, r3, #5
 800951e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009522:	4498      	add	r8, r3
 8009524:	68bb      	ldr	r3, [r7, #8]
 8009526:	469b      	mov	fp, r3
 8009528:	f04f 0c00 	mov.w	ip, #0
 800952c:	46d9      	mov	r9, fp
 800952e:	46e2      	mov	sl, ip
 8009530:	eb19 0309 	adds.w	r3, r9, r9
 8009534:	eb4a 040a 	adc.w	r4, sl, sl
 8009538:	4699      	mov	r9, r3
 800953a:	46a2      	mov	sl, r4
 800953c:	eb19 090b 	adds.w	r9, r9, fp
 8009540:	eb4a 0a0c 	adc.w	sl, sl, ip
 8009544:	f04f 0100 	mov.w	r1, #0
 8009548:	f04f 0200 	mov.w	r2, #0
 800954c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009550:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8009554:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8009558:	4689      	mov	r9, r1
 800955a:	4692      	mov	sl, r2
 800955c:	eb1b 0509 	adds.w	r5, fp, r9
 8009560:	eb4c 060a 	adc.w	r6, ip, sl
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	685b      	ldr	r3, [r3, #4]
 8009568:	4619      	mov	r1, r3
 800956a:	f04f 0200 	mov.w	r2, #0
 800956e:	f04f 0300 	mov.w	r3, #0
 8009572:	f04f 0400 	mov.w	r4, #0
 8009576:	0094      	lsls	r4, r2, #2
 8009578:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800957c:	008b      	lsls	r3, r1, #2
 800957e:	461a      	mov	r2, r3
 8009580:	4623      	mov	r3, r4
 8009582:	4628      	mov	r0, r5
 8009584:	4631      	mov	r1, r6
 8009586:	f7f7 fb7f 	bl	8000c88 <__aeabi_uldivmod>
 800958a:	4603      	mov	r3, r0
 800958c:	460c      	mov	r4, r1
 800958e:	461a      	mov	r2, r3
 8009590:	4b0e      	ldr	r3, [pc, #56]	; (80095cc <UART_SetConfig+0x6f4>)
 8009592:	fba3 1302 	umull	r1, r3, r3, r2
 8009596:	095b      	lsrs	r3, r3, #5
 8009598:	2164      	movs	r1, #100	; 0x64
 800959a:	fb01 f303 	mul.w	r3, r1, r3
 800959e:	1ad3      	subs	r3, r2, r3
 80095a0:	011b      	lsls	r3, r3, #4
 80095a2:	3332      	adds	r3, #50	; 0x32
 80095a4:	4a09      	ldr	r2, [pc, #36]	; (80095cc <UART_SetConfig+0x6f4>)
 80095a6:	fba2 2303 	umull	r2, r3, r2, r3
 80095aa:	095b      	lsrs	r3, r3, #5
 80095ac:	f003 020f 	and.w	r2, r3, #15
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	681b      	ldr	r3, [r3, #0]
 80095b4:	4442      	add	r2, r8
 80095b6:	609a      	str	r2, [r3, #8]
}
 80095b8:	e7ff      	b.n	80095ba <UART_SetConfig+0x6e2>
 80095ba:	bf00      	nop
 80095bc:	3714      	adds	r7, #20
 80095be:	46bd      	mov	sp, r7
 80095c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80095c4:	40011000 	.word	0x40011000
 80095c8:	40011400 	.word	0x40011400
 80095cc:	51eb851f 	.word	0x51eb851f

080095d0 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 80095d0:	b084      	sub	sp, #16
 80095d2:	b480      	push	{r7}
 80095d4:	b085      	sub	sp, #20
 80095d6:	af00      	add	r7, sp, #0
 80095d8:	6078      	str	r0, [r7, #4]
 80095da:	f107 001c 	add.w	r0, r7, #28
 80095de:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 80095e2:	2300      	movs	r3, #0
 80095e4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 80095e6:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 80095e8:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 80095ea:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 80095ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 80095ee:	431a      	orrs	r2, r3
             Init.BusWide             |\
 80095f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 80095f2:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 80095f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 80095f6:	431a      	orrs	r2, r3
             Init.ClockDiv
 80095f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 80095fa:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 80095fc:	68fa      	ldr	r2, [r7, #12]
 80095fe:	4313      	orrs	r3, r2
 8009600:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	685b      	ldr	r3, [r3, #4]
 8009606:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 800960a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800960e:	68fa      	ldr	r2, [r7, #12]
 8009610:	431a      	orrs	r2, r3
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8009616:	2300      	movs	r3, #0
}
 8009618:	4618      	mov	r0, r3
 800961a:	3714      	adds	r7, #20
 800961c:	46bd      	mov	sp, r7
 800961e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009622:	b004      	add	sp, #16
 8009624:	4770      	bx	lr

08009626 <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 8009626:	b480      	push	{r7}
 8009628:	b083      	sub	sp, #12
 800962a:	af00      	add	r7, sp, #0
 800962c:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8009634:	4618      	mov	r0, r3
 8009636:	370c      	adds	r7, #12
 8009638:	46bd      	mov	sp, r7
 800963a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800963e:	4770      	bx	lr

08009640 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 8009640:	b480      	push	{r7}
 8009642:	b083      	sub	sp, #12
 8009644:	af00      	add	r7, sp, #0
 8009646:	6078      	str	r0, [r7, #4]
 8009648:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 800964a:	683b      	ldr	r3, [r7, #0]
 800964c:	681a      	ldr	r2, [r3, #0]
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009654:	2300      	movs	r3, #0
}
 8009656:	4618      	mov	r0, r3
 8009658:	370c      	adds	r7, #12
 800965a:	46bd      	mov	sp, r7
 800965c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009660:	4770      	bx	lr

08009662 <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 8009662:	b580      	push	{r7, lr}
 8009664:	b082      	sub	sp, #8
 8009666:	af00      	add	r7, sp, #0
 8009668:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	2203      	movs	r2, #3
 800966e:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 8009670:	2002      	movs	r0, #2
 8009672:	f7f9 fcc7 	bl	8003004 <HAL_Delay>
  
  return HAL_OK;
 8009676:	2300      	movs	r3, #0
}
 8009678:	4618      	mov	r0, r3
 800967a:	3708      	adds	r7, #8
 800967c:	46bd      	mov	sp, r7
 800967e:	bd80      	pop	{r7, pc}

08009680 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 8009680:	b480      	push	{r7}
 8009682:	b083      	sub	sp, #12
 8009684:	af00      	add	r7, sp, #0
 8009686:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	681b      	ldr	r3, [r3, #0]
 800968c:	f003 0303 	and.w	r3, r3, #3
}
 8009690:	4618      	mov	r0, r3
 8009692:	370c      	adds	r7, #12
 8009694:	46bd      	mov	sp, r7
 8009696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800969a:	4770      	bx	lr

0800969c <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 800969c:	b480      	push	{r7}
 800969e:	b085      	sub	sp, #20
 80096a0:	af00      	add	r7, sp, #0
 80096a2:	6078      	str	r0, [r7, #4]
 80096a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80096a6:	2300      	movs	r3, #0
 80096a8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 80096aa:	683b      	ldr	r3, [r7, #0]
 80096ac:	681a      	ldr	r2, [r3, #0]
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80096b2:	683b      	ldr	r3, [r7, #0]
 80096b4:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 80096b6:	683b      	ldr	r3, [r7, #0]
 80096b8:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80096ba:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 80096bc:	683b      	ldr	r3, [r7, #0]
 80096be:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 80096c0:	431a      	orrs	r2, r3
                       Command->CPSM);
 80096c2:	683b      	ldr	r3, [r7, #0]
 80096c4:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 80096c6:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80096c8:	68fa      	ldr	r2, [r7, #12]
 80096ca:	4313      	orrs	r3, r2
 80096cc:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	68db      	ldr	r3, [r3, #12]
 80096d2:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80096d6:	f023 030f 	bic.w	r3, r3, #15
 80096da:	68fa      	ldr	r2, [r7, #12]
 80096dc:	431a      	orrs	r2, r3
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 80096e2:	2300      	movs	r3, #0
}
 80096e4:	4618      	mov	r0, r3
 80096e6:	3714      	adds	r7, #20
 80096e8:	46bd      	mov	sp, r7
 80096ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096ee:	4770      	bx	lr

080096f0 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 80096f0:	b480      	push	{r7}
 80096f2:	b083      	sub	sp, #12
 80096f4:	af00      	add	r7, sp, #0
 80096f6:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	691b      	ldr	r3, [r3, #16]
 80096fc:	b2db      	uxtb	r3, r3
}
 80096fe:	4618      	mov	r0, r3
 8009700:	370c      	adds	r7, #12
 8009702:	46bd      	mov	sp, r7
 8009704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009708:	4770      	bx	lr

0800970a <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 800970a:	b480      	push	{r7}
 800970c:	b085      	sub	sp, #20
 800970e:	af00      	add	r7, sp, #0
 8009710:	6078      	str	r0, [r7, #4]
 8009712:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	3314      	adds	r3, #20
 8009718:	461a      	mov	r2, r3
 800971a:	683b      	ldr	r3, [r7, #0]
 800971c:	4413      	add	r3, r2
 800971e:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8009720:	68fb      	ldr	r3, [r7, #12]
 8009722:	681b      	ldr	r3, [r3, #0]
}  
 8009724:	4618      	mov	r0, r3
 8009726:	3714      	adds	r7, #20
 8009728:	46bd      	mov	sp, r7
 800972a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800972e:	4770      	bx	lr

08009730 <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 8009730:	b480      	push	{r7}
 8009732:	b085      	sub	sp, #20
 8009734:	af00      	add	r7, sp, #0
 8009736:	6078      	str	r0, [r7, #4]
 8009738:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800973a:	2300      	movs	r3, #0
 800973c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 800973e:	683b      	ldr	r3, [r7, #0]
 8009740:	681a      	ldr	r2, [r3, #0]
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 8009746:	683b      	ldr	r3, [r7, #0]
 8009748:	685a      	ldr	r2, [r3, #4]
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800974e:	683b      	ldr	r3, [r7, #0]
 8009750:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8009752:	683b      	ldr	r3, [r7, #0]
 8009754:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8009756:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8009758:	683b      	ldr	r3, [r7, #0]
 800975a:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800975c:	431a      	orrs	r2, r3
                       Data->DPSM);
 800975e:	683b      	ldr	r3, [r7, #0]
 8009760:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8009762:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8009764:	68fa      	ldr	r2, [r7, #12]
 8009766:	4313      	orrs	r3, r2
 8009768:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800976e:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 8009772:	68fb      	ldr	r3, [r7, #12]
 8009774:	431a      	orrs	r2, r3
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800977a:	2300      	movs	r3, #0

}
 800977c:	4618      	mov	r0, r3
 800977e:	3714      	adds	r7, #20
 8009780:	46bd      	mov	sp, r7
 8009782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009786:	4770      	bx	lr

08009788 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 8009788:	b580      	push	{r7, lr}
 800978a:	b088      	sub	sp, #32
 800978c:	af00      	add	r7, sp, #0
 800978e:	6078      	str	r0, [r7, #4]
 8009790:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8009792:	683b      	ldr	r3, [r7, #0]
 8009794:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8009796:	2310      	movs	r3, #16
 8009798:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800979a:	2340      	movs	r3, #64	; 0x40
 800979c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800979e:	2300      	movs	r3, #0
 80097a0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80097a2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80097a6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80097a8:	f107 0308 	add.w	r3, r7, #8
 80097ac:	4619      	mov	r1, r3
 80097ae:	6878      	ldr	r0, [r7, #4]
 80097b0:	f7ff ff74 	bl	800969c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 80097b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80097b8:	2110      	movs	r1, #16
 80097ba:	6878      	ldr	r0, [r7, #4]
 80097bc:	f000 fa40 	bl	8009c40 <SDMMC_GetCmdResp1>
 80097c0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80097c2:	69fb      	ldr	r3, [r7, #28]
}
 80097c4:	4618      	mov	r0, r3
 80097c6:	3720      	adds	r7, #32
 80097c8:	46bd      	mov	sp, r7
 80097ca:	bd80      	pop	{r7, pc}

080097cc <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 80097cc:	b580      	push	{r7, lr}
 80097ce:	b088      	sub	sp, #32
 80097d0:	af00      	add	r7, sp, #0
 80097d2:	6078      	str	r0, [r7, #4]
 80097d4:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 80097d6:	683b      	ldr	r3, [r7, #0]
 80097d8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 80097da:	2311      	movs	r3, #17
 80097dc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80097de:	2340      	movs	r3, #64	; 0x40
 80097e0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80097e2:	2300      	movs	r3, #0
 80097e4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80097e6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80097ea:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80097ec:	f107 0308 	add.w	r3, r7, #8
 80097f0:	4619      	mov	r1, r3
 80097f2:	6878      	ldr	r0, [r7, #4]
 80097f4:	f7ff ff52 	bl	800969c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 80097f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80097fc:	2111      	movs	r1, #17
 80097fe:	6878      	ldr	r0, [r7, #4]
 8009800:	f000 fa1e 	bl	8009c40 <SDMMC_GetCmdResp1>
 8009804:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009806:	69fb      	ldr	r3, [r7, #28]
}
 8009808:	4618      	mov	r0, r3
 800980a:	3720      	adds	r7, #32
 800980c:	46bd      	mov	sp, r7
 800980e:	bd80      	pop	{r7, pc}

08009810 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8009810:	b580      	push	{r7, lr}
 8009812:	b088      	sub	sp, #32
 8009814:	af00      	add	r7, sp, #0
 8009816:	6078      	str	r0, [r7, #4]
 8009818:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800981a:	683b      	ldr	r3, [r7, #0]
 800981c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800981e:	2312      	movs	r3, #18
 8009820:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009822:	2340      	movs	r3, #64	; 0x40
 8009824:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009826:	2300      	movs	r3, #0
 8009828:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800982a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800982e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009830:	f107 0308 	add.w	r3, r7, #8
 8009834:	4619      	mov	r1, r3
 8009836:	6878      	ldr	r0, [r7, #4]
 8009838:	f7ff ff30 	bl	800969c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800983c:	f241 3288 	movw	r2, #5000	; 0x1388
 8009840:	2112      	movs	r1, #18
 8009842:	6878      	ldr	r0, [r7, #4]
 8009844:	f000 f9fc 	bl	8009c40 <SDMMC_GetCmdResp1>
 8009848:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800984a:	69fb      	ldr	r3, [r7, #28]
}
 800984c:	4618      	mov	r0, r3
 800984e:	3720      	adds	r7, #32
 8009850:	46bd      	mov	sp, r7
 8009852:	bd80      	pop	{r7, pc}

08009854 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8009854:	b580      	push	{r7, lr}
 8009856:	b088      	sub	sp, #32
 8009858:	af00      	add	r7, sp, #0
 800985a:	6078      	str	r0, [r7, #4]
 800985c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800985e:	683b      	ldr	r3, [r7, #0]
 8009860:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8009862:	2318      	movs	r3, #24
 8009864:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009866:	2340      	movs	r3, #64	; 0x40
 8009868:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800986a:	2300      	movs	r3, #0
 800986c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800986e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009872:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009874:	f107 0308 	add.w	r3, r7, #8
 8009878:	4619      	mov	r1, r3
 800987a:	6878      	ldr	r0, [r7, #4]
 800987c:	f7ff ff0e 	bl	800969c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8009880:	f241 3288 	movw	r2, #5000	; 0x1388
 8009884:	2118      	movs	r1, #24
 8009886:	6878      	ldr	r0, [r7, #4]
 8009888:	f000 f9da 	bl	8009c40 <SDMMC_GetCmdResp1>
 800988c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800988e:	69fb      	ldr	r3, [r7, #28]
}
 8009890:	4618      	mov	r0, r3
 8009892:	3720      	adds	r7, #32
 8009894:	46bd      	mov	sp, r7
 8009896:	bd80      	pop	{r7, pc}

08009898 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8009898:	b580      	push	{r7, lr}
 800989a:	b088      	sub	sp, #32
 800989c:	af00      	add	r7, sp, #0
 800989e:	6078      	str	r0, [r7, #4]
 80098a0:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 80098a2:	683b      	ldr	r3, [r7, #0]
 80098a4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 80098a6:	2319      	movs	r3, #25
 80098a8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80098aa:	2340      	movs	r3, #64	; 0x40
 80098ac:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80098ae:	2300      	movs	r3, #0
 80098b0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80098b2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80098b6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80098b8:	f107 0308 	add.w	r3, r7, #8
 80098bc:	4619      	mov	r1, r3
 80098be:	6878      	ldr	r0, [r7, #4]
 80098c0:	f7ff feec 	bl	800969c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 80098c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80098c8:	2119      	movs	r1, #25
 80098ca:	6878      	ldr	r0, [r7, #4]
 80098cc:	f000 f9b8 	bl	8009c40 <SDMMC_GetCmdResp1>
 80098d0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80098d2:	69fb      	ldr	r3, [r7, #28]
}
 80098d4:	4618      	mov	r0, r3
 80098d6:	3720      	adds	r7, #32
 80098d8:	46bd      	mov	sp, r7
 80098da:	bd80      	pop	{r7, pc}

080098dc <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 80098dc:	b580      	push	{r7, lr}
 80098de:	b088      	sub	sp, #32
 80098e0:	af00      	add	r7, sp, #0
 80098e2:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 80098e4:	2300      	movs	r3, #0
 80098e6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 80098e8:	230c      	movs	r3, #12
 80098ea:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80098ec:	2340      	movs	r3, #64	; 0x40
 80098ee:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80098f0:	2300      	movs	r3, #0
 80098f2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80098f4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80098f8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80098fa:	f107 0308 	add.w	r3, r7, #8
 80098fe:	4619      	mov	r1, r3
 8009900:	6878      	ldr	r0, [r7, #4]
 8009902:	f7ff fecb 	bl	800969c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 8009906:	4a05      	ldr	r2, [pc, #20]	; (800991c <SDMMC_CmdStopTransfer+0x40>)
 8009908:	210c      	movs	r1, #12
 800990a:	6878      	ldr	r0, [r7, #4]
 800990c:	f000 f998 	bl	8009c40 <SDMMC_GetCmdResp1>
 8009910:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009912:	69fb      	ldr	r3, [r7, #28]
}
 8009914:	4618      	mov	r0, r3
 8009916:	3720      	adds	r7, #32
 8009918:	46bd      	mov	sp, r7
 800991a:	bd80      	pop	{r7, pc}
 800991c:	05f5e100 	.word	0x05f5e100

08009920 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 8009920:	b580      	push	{r7, lr}
 8009922:	b08a      	sub	sp, #40	; 0x28
 8009924:	af00      	add	r7, sp, #0
 8009926:	60f8      	str	r0, [r7, #12]
 8009928:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800992c:	683b      	ldr	r3, [r7, #0]
 800992e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8009930:	2307      	movs	r3, #7
 8009932:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009934:	2340      	movs	r3, #64	; 0x40
 8009936:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009938:	2300      	movs	r3, #0
 800993a:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800993c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009940:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009942:	f107 0310 	add.w	r3, r7, #16
 8009946:	4619      	mov	r1, r3
 8009948:	68f8      	ldr	r0, [r7, #12]
 800994a:	f7ff fea7 	bl	800969c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 800994e:	f241 3288 	movw	r2, #5000	; 0x1388
 8009952:	2107      	movs	r1, #7
 8009954:	68f8      	ldr	r0, [r7, #12]
 8009956:	f000 f973 	bl	8009c40 <SDMMC_GetCmdResp1>
 800995a:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 800995c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800995e:	4618      	mov	r0, r3
 8009960:	3728      	adds	r7, #40	; 0x28
 8009962:	46bd      	mov	sp, r7
 8009964:	bd80      	pop	{r7, pc}

08009966 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 8009966:	b580      	push	{r7, lr}
 8009968:	b088      	sub	sp, #32
 800996a:	af00      	add	r7, sp, #0
 800996c:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800996e:	2300      	movs	r3, #0
 8009970:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8009972:	2300      	movs	r3, #0
 8009974:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 8009976:	2300      	movs	r3, #0
 8009978:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800997a:	2300      	movs	r3, #0
 800997c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800997e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009982:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009984:	f107 0308 	add.w	r3, r7, #8
 8009988:	4619      	mov	r1, r3
 800998a:	6878      	ldr	r0, [r7, #4]
 800998c:	f7ff fe86 	bl	800969c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 8009990:	6878      	ldr	r0, [r7, #4]
 8009992:	f000 f92d 	bl	8009bf0 <SDMMC_GetCmdError>
 8009996:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009998:	69fb      	ldr	r3, [r7, #28]
}
 800999a:	4618      	mov	r0, r3
 800999c:	3720      	adds	r7, #32
 800999e:	46bd      	mov	sp, r7
 80099a0:	bd80      	pop	{r7, pc}

080099a2 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 80099a2:	b580      	push	{r7, lr}
 80099a4:	b088      	sub	sp, #32
 80099a6:	af00      	add	r7, sp, #0
 80099a8:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 80099aa:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 80099ae:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 80099b0:	2308      	movs	r3, #8
 80099b2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80099b4:	2340      	movs	r3, #64	; 0x40
 80099b6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80099b8:	2300      	movs	r3, #0
 80099ba:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80099bc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80099c0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80099c2:	f107 0308 	add.w	r3, r7, #8
 80099c6:	4619      	mov	r1, r3
 80099c8:	6878      	ldr	r0, [r7, #4]
 80099ca:	f7ff fe67 	bl	800969c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 80099ce:	6878      	ldr	r0, [r7, #4]
 80099d0:	f000 fb16 	bl	800a000 <SDMMC_GetCmdResp7>
 80099d4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80099d6:	69fb      	ldr	r3, [r7, #28]
}
 80099d8:	4618      	mov	r0, r3
 80099da:	3720      	adds	r7, #32
 80099dc:	46bd      	mov	sp, r7
 80099de:	bd80      	pop	{r7, pc}

080099e0 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 80099e0:	b580      	push	{r7, lr}
 80099e2:	b088      	sub	sp, #32
 80099e4:	af00      	add	r7, sp, #0
 80099e6:	6078      	str	r0, [r7, #4]
 80099e8:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 80099ea:	683b      	ldr	r3, [r7, #0]
 80099ec:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 80099ee:	2337      	movs	r3, #55	; 0x37
 80099f0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80099f2:	2340      	movs	r3, #64	; 0x40
 80099f4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80099f6:	2300      	movs	r3, #0
 80099f8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80099fa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80099fe:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009a00:	f107 0308 	add.w	r3, r7, #8
 8009a04:	4619      	mov	r1, r3
 8009a06:	6878      	ldr	r0, [r7, #4]
 8009a08:	f7ff fe48 	bl	800969c <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 8009a0c:	f241 3288 	movw	r2, #5000	; 0x1388
 8009a10:	2137      	movs	r1, #55	; 0x37
 8009a12:	6878      	ldr	r0, [r7, #4]
 8009a14:	f000 f914 	bl	8009c40 <SDMMC_GetCmdResp1>
 8009a18:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009a1a:	69fb      	ldr	r3, [r7, #28]
}
 8009a1c:	4618      	mov	r0, r3
 8009a1e:	3720      	adds	r7, #32
 8009a20:	46bd      	mov	sp, r7
 8009a22:	bd80      	pop	{r7, pc}

08009a24 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8009a24:	b580      	push	{r7, lr}
 8009a26:	b088      	sub	sp, #32
 8009a28:	af00      	add	r7, sp, #0
 8009a2a:	6078      	str	r0, [r7, #4]
 8009a2c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8009a2e:	683b      	ldr	r3, [r7, #0]
 8009a30:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009a34:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009a38:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8009a3a:	2329      	movs	r3, #41	; 0x29
 8009a3c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009a3e:	2340      	movs	r3, #64	; 0x40
 8009a40:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009a42:	2300      	movs	r3, #0
 8009a44:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009a46:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009a4a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009a4c:	f107 0308 	add.w	r3, r7, #8
 8009a50:	4619      	mov	r1, r3
 8009a52:	6878      	ldr	r0, [r7, #4]
 8009a54:	f7ff fe22 	bl	800969c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 8009a58:	6878      	ldr	r0, [r7, #4]
 8009a5a:	f000 fa23 	bl	8009ea4 <SDMMC_GetCmdResp3>
 8009a5e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009a60:	69fb      	ldr	r3, [r7, #28]
}
 8009a62:	4618      	mov	r0, r3
 8009a64:	3720      	adds	r7, #32
 8009a66:	46bd      	mov	sp, r7
 8009a68:	bd80      	pop	{r7, pc}

08009a6a <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 8009a6a:	b580      	push	{r7, lr}
 8009a6c:	b088      	sub	sp, #32
 8009a6e:	af00      	add	r7, sp, #0
 8009a70:	6078      	str	r0, [r7, #4]
 8009a72:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8009a74:	683b      	ldr	r3, [r7, #0]
 8009a76:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8009a78:	2306      	movs	r3, #6
 8009a7a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009a7c:	2340      	movs	r3, #64	; 0x40
 8009a7e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009a80:	2300      	movs	r3, #0
 8009a82:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009a84:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009a88:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009a8a:	f107 0308 	add.w	r3, r7, #8
 8009a8e:	4619      	mov	r1, r3
 8009a90:	6878      	ldr	r0, [r7, #4]
 8009a92:	f7ff fe03 	bl	800969c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 8009a96:	f241 3288 	movw	r2, #5000	; 0x1388
 8009a9a:	2106      	movs	r1, #6
 8009a9c:	6878      	ldr	r0, [r7, #4]
 8009a9e:	f000 f8cf 	bl	8009c40 <SDMMC_GetCmdResp1>
 8009aa2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009aa4:	69fb      	ldr	r3, [r7, #28]
}
 8009aa6:	4618      	mov	r0, r3
 8009aa8:	3720      	adds	r7, #32
 8009aaa:	46bd      	mov	sp, r7
 8009aac:	bd80      	pop	{r7, pc}

08009aae <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 8009aae:	b580      	push	{r7, lr}
 8009ab0:	b088      	sub	sp, #32
 8009ab2:	af00      	add	r7, sp, #0
 8009ab4:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8009ab6:	2300      	movs	r3, #0
 8009ab8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8009aba:	2333      	movs	r3, #51	; 0x33
 8009abc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009abe:	2340      	movs	r3, #64	; 0x40
 8009ac0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009ac2:	2300      	movs	r3, #0
 8009ac4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009ac6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009aca:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009acc:	f107 0308 	add.w	r3, r7, #8
 8009ad0:	4619      	mov	r1, r3
 8009ad2:	6878      	ldr	r0, [r7, #4]
 8009ad4:	f7ff fde2 	bl	800969c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 8009ad8:	f241 3288 	movw	r2, #5000	; 0x1388
 8009adc:	2133      	movs	r1, #51	; 0x33
 8009ade:	6878      	ldr	r0, [r7, #4]
 8009ae0:	f000 f8ae 	bl	8009c40 <SDMMC_GetCmdResp1>
 8009ae4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009ae6:	69fb      	ldr	r3, [r7, #28]
}
 8009ae8:	4618      	mov	r0, r3
 8009aea:	3720      	adds	r7, #32
 8009aec:	46bd      	mov	sp, r7
 8009aee:	bd80      	pop	{r7, pc}

08009af0 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 8009af0:	b580      	push	{r7, lr}
 8009af2:	b088      	sub	sp, #32
 8009af4:	af00      	add	r7, sp, #0
 8009af6:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8009af8:	2300      	movs	r3, #0
 8009afa:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8009afc:	2302      	movs	r3, #2
 8009afe:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8009b00:	23c0      	movs	r3, #192	; 0xc0
 8009b02:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009b04:	2300      	movs	r3, #0
 8009b06:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009b08:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009b0c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009b0e:	f107 0308 	add.w	r3, r7, #8
 8009b12:	4619      	mov	r1, r3
 8009b14:	6878      	ldr	r0, [r7, #4]
 8009b16:	f7ff fdc1 	bl	800969c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8009b1a:	6878      	ldr	r0, [r7, #4]
 8009b1c:	f000 f97c 	bl	8009e18 <SDMMC_GetCmdResp2>
 8009b20:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009b22:	69fb      	ldr	r3, [r7, #28]
}
 8009b24:	4618      	mov	r0, r3
 8009b26:	3720      	adds	r7, #32
 8009b28:	46bd      	mov	sp, r7
 8009b2a:	bd80      	pop	{r7, pc}

08009b2c <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8009b2c:	b580      	push	{r7, lr}
 8009b2e:	b088      	sub	sp, #32
 8009b30:	af00      	add	r7, sp, #0
 8009b32:	6078      	str	r0, [r7, #4]
 8009b34:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8009b36:	683b      	ldr	r3, [r7, #0]
 8009b38:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8009b3a:	2309      	movs	r3, #9
 8009b3c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8009b3e:	23c0      	movs	r3, #192	; 0xc0
 8009b40:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009b42:	2300      	movs	r3, #0
 8009b44:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009b46:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009b4a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009b4c:	f107 0308 	add.w	r3, r7, #8
 8009b50:	4619      	mov	r1, r3
 8009b52:	6878      	ldr	r0, [r7, #4]
 8009b54:	f7ff fda2 	bl	800969c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8009b58:	6878      	ldr	r0, [r7, #4]
 8009b5a:	f000 f95d 	bl	8009e18 <SDMMC_GetCmdResp2>
 8009b5e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009b60:	69fb      	ldr	r3, [r7, #28]
}
 8009b62:	4618      	mov	r0, r3
 8009b64:	3720      	adds	r7, #32
 8009b66:	46bd      	mov	sp, r7
 8009b68:	bd80      	pop	{r7, pc}

08009b6a <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 8009b6a:	b580      	push	{r7, lr}
 8009b6c:	b088      	sub	sp, #32
 8009b6e:	af00      	add	r7, sp, #0
 8009b70:	6078      	str	r0, [r7, #4]
 8009b72:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8009b74:	2300      	movs	r3, #0
 8009b76:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8009b78:	2303      	movs	r3, #3
 8009b7a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009b7c:	2340      	movs	r3, #64	; 0x40
 8009b7e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009b80:	2300      	movs	r3, #0
 8009b82:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009b84:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009b88:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009b8a:	f107 0308 	add.w	r3, r7, #8
 8009b8e:	4619      	mov	r1, r3
 8009b90:	6878      	ldr	r0, [r7, #4]
 8009b92:	f7ff fd83 	bl	800969c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8009b96:	683a      	ldr	r2, [r7, #0]
 8009b98:	2103      	movs	r1, #3
 8009b9a:	6878      	ldr	r0, [r7, #4]
 8009b9c:	f000 f9bc 	bl	8009f18 <SDMMC_GetCmdResp6>
 8009ba0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009ba2:	69fb      	ldr	r3, [r7, #28]
}
 8009ba4:	4618      	mov	r0, r3
 8009ba6:	3720      	adds	r7, #32
 8009ba8:	46bd      	mov	sp, r7
 8009baa:	bd80      	pop	{r7, pc}

08009bac <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8009bac:	b580      	push	{r7, lr}
 8009bae:	b088      	sub	sp, #32
 8009bb0:	af00      	add	r7, sp, #0
 8009bb2:	6078      	str	r0, [r7, #4]
 8009bb4:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 8009bb6:	683b      	ldr	r3, [r7, #0]
 8009bb8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8009bba:	230d      	movs	r3, #13
 8009bbc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009bbe:	2340      	movs	r3, #64	; 0x40
 8009bc0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009bc2:	2300      	movs	r3, #0
 8009bc4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009bc6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009bca:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009bcc:	f107 0308 	add.w	r3, r7, #8
 8009bd0:	4619      	mov	r1, r3
 8009bd2:	6878      	ldr	r0, [r7, #4]
 8009bd4:	f7ff fd62 	bl	800969c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 8009bd8:	f241 3288 	movw	r2, #5000	; 0x1388
 8009bdc:	210d      	movs	r1, #13
 8009bde:	6878      	ldr	r0, [r7, #4]
 8009be0:	f000 f82e 	bl	8009c40 <SDMMC_GetCmdResp1>
 8009be4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009be6:	69fb      	ldr	r3, [r7, #28]
}
 8009be8:	4618      	mov	r0, r3
 8009bea:	3720      	adds	r7, #32
 8009bec:	46bd      	mov	sp, r7
 8009bee:	bd80      	pop	{r7, pc}

08009bf0 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 8009bf0:	b490      	push	{r4, r7}
 8009bf2:	b082      	sub	sp, #8
 8009bf4:	af00      	add	r7, sp, #0
 8009bf6:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8009bf8:	4b0f      	ldr	r3, [pc, #60]	; (8009c38 <SDMMC_GetCmdError+0x48>)
 8009bfa:	681b      	ldr	r3, [r3, #0]
 8009bfc:	4a0f      	ldr	r2, [pc, #60]	; (8009c3c <SDMMC_GetCmdError+0x4c>)
 8009bfe:	fba2 2303 	umull	r2, r3, r2, r3
 8009c02:	0a5b      	lsrs	r3, r3, #9
 8009c04:	f241 3288 	movw	r2, #5000	; 0x1388
 8009c08:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8009c0c:	4623      	mov	r3, r4
 8009c0e:	1e5c      	subs	r4, r3, #1
 8009c10:	2b00      	cmp	r3, #0
 8009c12:	d102      	bne.n	8009c1a <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009c14:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009c18:	e009      	b.n	8009c2e <SDMMC_GetCmdError+0x3e>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009c1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009c22:	2b00      	cmp	r3, #0
 8009c24:	d0f2      	beq.n	8009c0c <SDMMC_GetCmdError+0x1c>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	22c5      	movs	r2, #197	; 0xc5
 8009c2a:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 8009c2c:	2300      	movs	r3, #0
}
 8009c2e:	4618      	mov	r0, r3
 8009c30:	3708      	adds	r7, #8
 8009c32:	46bd      	mov	sp, r7
 8009c34:	bc90      	pop	{r4, r7}
 8009c36:	4770      	bx	lr
 8009c38:	20000008 	.word	0x20000008
 8009c3c:	10624dd3 	.word	0x10624dd3

08009c40 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 8009c40:	b590      	push	{r4, r7, lr}
 8009c42:	b087      	sub	sp, #28
 8009c44:	af00      	add	r7, sp, #0
 8009c46:	60f8      	str	r0, [r7, #12]
 8009c48:	460b      	mov	r3, r1
 8009c4a:	607a      	str	r2, [r7, #4]
 8009c4c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8009c4e:	4b6f      	ldr	r3, [pc, #444]	; (8009e0c <SDMMC_GetCmdResp1+0x1cc>)
 8009c50:	681b      	ldr	r3, [r3, #0]
 8009c52:	4a6f      	ldr	r2, [pc, #444]	; (8009e10 <SDMMC_GetCmdResp1+0x1d0>)
 8009c54:	fba2 2303 	umull	r2, r3, r2, r3
 8009c58:	0a5b      	lsrs	r3, r3, #9
 8009c5a:	687a      	ldr	r2, [r7, #4]
 8009c5c:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8009c60:	4623      	mov	r3, r4
 8009c62:	1e5c      	subs	r4, r3, #1
 8009c64:	2b00      	cmp	r3, #0
 8009c66:	d102      	bne.n	8009c6e <SDMMC_GetCmdResp1+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009c68:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009c6c:	e0c9      	b.n	8009e02 <SDMMC_GetCmdResp1+0x1c2>
    }
    sta_reg = SDIOx->STA;
 8009c6e:	68fb      	ldr	r3, [r7, #12]
 8009c70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009c72:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8009c74:	697b      	ldr	r3, [r7, #20]
 8009c76:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8009c7a:	2b00      	cmp	r3, #0
 8009c7c:	d0f0      	beq.n	8009c60 <SDMMC_GetCmdResp1+0x20>
 8009c7e:	697b      	ldr	r3, [r7, #20]
 8009c80:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8009c84:	2b00      	cmp	r3, #0
 8009c86:	d1eb      	bne.n	8009c60 <SDMMC_GetCmdResp1+0x20>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8009c88:	68fb      	ldr	r3, [r7, #12]
 8009c8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009c8c:	f003 0304 	and.w	r3, r3, #4
 8009c90:	2b00      	cmp	r3, #0
 8009c92:	d004      	beq.n	8009c9e <SDMMC_GetCmdResp1+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8009c94:	68fb      	ldr	r3, [r7, #12]
 8009c96:	2204      	movs	r2, #4
 8009c98:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009c9a:	2304      	movs	r3, #4
 8009c9c:	e0b1      	b.n	8009e02 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8009c9e:	68fb      	ldr	r3, [r7, #12]
 8009ca0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009ca2:	f003 0301 	and.w	r3, r3, #1
 8009ca6:	2b00      	cmp	r3, #0
 8009ca8:	d004      	beq.n	8009cb4 <SDMMC_GetCmdResp1+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8009caa:	68fb      	ldr	r3, [r7, #12]
 8009cac:	2201      	movs	r2, #1
 8009cae:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009cb0:	2301      	movs	r3, #1
 8009cb2:	e0a6      	b.n	8009e02 <SDMMC_GetCmdResp1+0x1c2>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8009cb4:	68fb      	ldr	r3, [r7, #12]
 8009cb6:	22c5      	movs	r2, #197	; 0xc5
 8009cb8:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8009cba:	68f8      	ldr	r0, [r7, #12]
 8009cbc:	f7ff fd18 	bl	80096f0 <SDIO_GetCommandResponse>
 8009cc0:	4603      	mov	r3, r0
 8009cc2:	461a      	mov	r2, r3
 8009cc4:	7afb      	ldrb	r3, [r7, #11]
 8009cc6:	4293      	cmp	r3, r2
 8009cc8:	d001      	beq.n	8009cce <SDMMC_GetCmdResp1+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009cca:	2301      	movs	r3, #1
 8009ccc:	e099      	b.n	8009e02 <SDMMC_GetCmdResp1+0x1c2>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8009cce:	2100      	movs	r1, #0
 8009cd0:	68f8      	ldr	r0, [r7, #12]
 8009cd2:	f7ff fd1a 	bl	800970a <SDIO_GetResponse>
 8009cd6:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8009cd8:	693a      	ldr	r2, [r7, #16]
 8009cda:	4b4e      	ldr	r3, [pc, #312]	; (8009e14 <SDMMC_GetCmdResp1+0x1d4>)
 8009cdc:	4013      	ands	r3, r2
 8009cde:	2b00      	cmp	r3, #0
 8009ce0:	d101      	bne.n	8009ce6 <SDMMC_GetCmdResp1+0xa6>
  {
    return SDMMC_ERROR_NONE;
 8009ce2:	2300      	movs	r3, #0
 8009ce4:	e08d      	b.n	8009e02 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8009ce6:	693b      	ldr	r3, [r7, #16]
 8009ce8:	2b00      	cmp	r3, #0
 8009cea:	da02      	bge.n	8009cf2 <SDMMC_GetCmdResp1+0xb2>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8009cec:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009cf0:	e087      	b.n	8009e02 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8009cf2:	693b      	ldr	r3, [r7, #16]
 8009cf4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8009cf8:	2b00      	cmp	r3, #0
 8009cfa:	d001      	beq.n	8009d00 <SDMMC_GetCmdResp1+0xc0>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8009cfc:	2340      	movs	r3, #64	; 0x40
 8009cfe:	e080      	b.n	8009e02 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8009d00:	693b      	ldr	r3, [r7, #16]
 8009d02:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009d06:	2b00      	cmp	r3, #0
 8009d08:	d001      	beq.n	8009d0e <SDMMC_GetCmdResp1+0xce>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8009d0a:	2380      	movs	r3, #128	; 0x80
 8009d0c:	e079      	b.n	8009e02 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8009d0e:	693b      	ldr	r3, [r7, #16]
 8009d10:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009d14:	2b00      	cmp	r3, #0
 8009d16:	d002      	beq.n	8009d1e <SDMMC_GetCmdResp1+0xde>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8009d18:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009d1c:	e071      	b.n	8009e02 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8009d1e:	693b      	ldr	r3, [r7, #16]
 8009d20:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009d24:	2b00      	cmp	r3, #0
 8009d26:	d002      	beq.n	8009d2e <SDMMC_GetCmdResp1+0xee>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8009d28:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009d2c:	e069      	b.n	8009e02 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8009d2e:	693b      	ldr	r3, [r7, #16]
 8009d30:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8009d34:	2b00      	cmp	r3, #0
 8009d36:	d002      	beq.n	8009d3e <SDMMC_GetCmdResp1+0xfe>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8009d38:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009d3c:	e061      	b.n	8009e02 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8009d3e:	693b      	ldr	r3, [r7, #16]
 8009d40:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009d44:	2b00      	cmp	r3, #0
 8009d46:	d002      	beq.n	8009d4e <SDMMC_GetCmdResp1+0x10e>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8009d48:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009d4c:	e059      	b.n	8009e02 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8009d4e:	693b      	ldr	r3, [r7, #16]
 8009d50:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009d54:	2b00      	cmp	r3, #0
 8009d56:	d002      	beq.n	8009d5e <SDMMC_GetCmdResp1+0x11e>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8009d58:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009d5c:	e051      	b.n	8009e02 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8009d5e:	693b      	ldr	r3, [r7, #16]
 8009d60:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009d64:	2b00      	cmp	r3, #0
 8009d66:	d002      	beq.n	8009d6e <SDMMC_GetCmdResp1+0x12e>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8009d68:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8009d6c:	e049      	b.n	8009e02 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8009d6e:	693b      	ldr	r3, [r7, #16]
 8009d70:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009d74:	2b00      	cmp	r3, #0
 8009d76:	d002      	beq.n	8009d7e <SDMMC_GetCmdResp1+0x13e>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8009d78:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8009d7c:	e041      	b.n	8009e02 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8009d7e:	693b      	ldr	r3, [r7, #16]
 8009d80:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009d84:	2b00      	cmp	r3, #0
 8009d86:	d002      	beq.n	8009d8e <SDMMC_GetCmdResp1+0x14e>
  {
    return SDMMC_ERROR_CC_ERR;
 8009d88:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009d8c:	e039      	b.n	8009e02 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8009d8e:	693b      	ldr	r3, [r7, #16]
 8009d90:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009d94:	2b00      	cmp	r3, #0
 8009d96:	d002      	beq.n	8009d9e <SDMMC_GetCmdResp1+0x15e>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8009d98:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8009d9c:	e031      	b.n	8009e02 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8009d9e:	693b      	ldr	r3, [r7, #16]
 8009da0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009da4:	2b00      	cmp	r3, #0
 8009da6:	d002      	beq.n	8009dae <SDMMC_GetCmdResp1+0x16e>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8009da8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8009dac:	e029      	b.n	8009e02 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8009dae:	693b      	ldr	r3, [r7, #16]
 8009db0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009db4:	2b00      	cmp	r3, #0
 8009db6:	d002      	beq.n	8009dbe <SDMMC_GetCmdResp1+0x17e>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8009db8:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8009dbc:	e021      	b.n	8009e02 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8009dbe:	693b      	ldr	r3, [r7, #16]
 8009dc0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009dc4:	2b00      	cmp	r3, #0
 8009dc6:	d002      	beq.n	8009dce <SDMMC_GetCmdResp1+0x18e>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8009dc8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8009dcc:	e019      	b.n	8009e02 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8009dce:	693b      	ldr	r3, [r7, #16]
 8009dd0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009dd4:	2b00      	cmp	r3, #0
 8009dd6:	d002      	beq.n	8009dde <SDMMC_GetCmdResp1+0x19e>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8009dd8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8009ddc:	e011      	b.n	8009e02 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8009dde:	693b      	ldr	r3, [r7, #16]
 8009de0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009de4:	2b00      	cmp	r3, #0
 8009de6:	d002      	beq.n	8009dee <SDMMC_GetCmdResp1+0x1ae>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8009de8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8009dec:	e009      	b.n	8009e02 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8009dee:	693b      	ldr	r3, [r7, #16]
 8009df0:	f003 0308 	and.w	r3, r3, #8
 8009df4:	2b00      	cmp	r3, #0
 8009df6:	d002      	beq.n	8009dfe <SDMMC_GetCmdResp1+0x1be>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8009df8:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8009dfc:	e001      	b.n	8009e02 <SDMMC_GetCmdResp1+0x1c2>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8009dfe:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8009e02:	4618      	mov	r0, r3
 8009e04:	371c      	adds	r7, #28
 8009e06:	46bd      	mov	sp, r7
 8009e08:	bd90      	pop	{r4, r7, pc}
 8009e0a:	bf00      	nop
 8009e0c:	20000008 	.word	0x20000008
 8009e10:	10624dd3 	.word	0x10624dd3
 8009e14:	fdffe008 	.word	0xfdffe008

08009e18 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 8009e18:	b490      	push	{r4, r7}
 8009e1a:	b084      	sub	sp, #16
 8009e1c:	af00      	add	r7, sp, #0
 8009e1e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8009e20:	4b1e      	ldr	r3, [pc, #120]	; (8009e9c <SDMMC_GetCmdResp2+0x84>)
 8009e22:	681b      	ldr	r3, [r3, #0]
 8009e24:	4a1e      	ldr	r2, [pc, #120]	; (8009ea0 <SDMMC_GetCmdResp2+0x88>)
 8009e26:	fba2 2303 	umull	r2, r3, r2, r3
 8009e2a:	0a5b      	lsrs	r3, r3, #9
 8009e2c:	f241 3288 	movw	r2, #5000	; 0x1388
 8009e30:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8009e34:	4623      	mov	r3, r4
 8009e36:	1e5c      	subs	r4, r3, #1
 8009e38:	2b00      	cmp	r3, #0
 8009e3a:	d102      	bne.n	8009e42 <SDMMC_GetCmdResp2+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009e3c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009e40:	e026      	b.n	8009e90 <SDMMC_GetCmdResp2+0x78>
    }
    sta_reg = SDIOx->STA;
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009e46:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8009e48:	68fb      	ldr	r3, [r7, #12]
 8009e4a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8009e4e:	2b00      	cmp	r3, #0
 8009e50:	d0f0      	beq.n	8009e34 <SDMMC_GetCmdResp2+0x1c>
 8009e52:	68fb      	ldr	r3, [r7, #12]
 8009e54:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8009e58:	2b00      	cmp	r3, #0
 8009e5a:	d1eb      	bne.n	8009e34 <SDMMC_GetCmdResp2+0x1c>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009e60:	f003 0304 	and.w	r3, r3, #4
 8009e64:	2b00      	cmp	r3, #0
 8009e66:	d004      	beq.n	8009e72 <SDMMC_GetCmdResp2+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	2204      	movs	r2, #4
 8009e6c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009e6e:	2304      	movs	r3, #4
 8009e70:	e00e      	b.n	8009e90 <SDMMC_GetCmdResp2+0x78>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009e76:	f003 0301 	and.w	r3, r3, #1
 8009e7a:	2b00      	cmp	r3, #0
 8009e7c:	d004      	beq.n	8009e88 <SDMMC_GetCmdResp2+0x70>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	2201      	movs	r2, #1
 8009e82:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009e84:	2301      	movs	r3, #1
 8009e86:	e003      	b.n	8009e90 <SDMMC_GetCmdResp2+0x78>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	22c5      	movs	r2, #197	; 0xc5
 8009e8c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8009e8e:	2300      	movs	r3, #0
}
 8009e90:	4618      	mov	r0, r3
 8009e92:	3710      	adds	r7, #16
 8009e94:	46bd      	mov	sp, r7
 8009e96:	bc90      	pop	{r4, r7}
 8009e98:	4770      	bx	lr
 8009e9a:	bf00      	nop
 8009e9c:	20000008 	.word	0x20000008
 8009ea0:	10624dd3 	.word	0x10624dd3

08009ea4 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 8009ea4:	b490      	push	{r4, r7}
 8009ea6:	b084      	sub	sp, #16
 8009ea8:	af00      	add	r7, sp, #0
 8009eaa:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8009eac:	4b18      	ldr	r3, [pc, #96]	; (8009f10 <SDMMC_GetCmdResp3+0x6c>)
 8009eae:	681b      	ldr	r3, [r3, #0]
 8009eb0:	4a18      	ldr	r2, [pc, #96]	; (8009f14 <SDMMC_GetCmdResp3+0x70>)
 8009eb2:	fba2 2303 	umull	r2, r3, r2, r3
 8009eb6:	0a5b      	lsrs	r3, r3, #9
 8009eb8:	f241 3288 	movw	r2, #5000	; 0x1388
 8009ebc:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8009ec0:	4623      	mov	r3, r4
 8009ec2:	1e5c      	subs	r4, r3, #1
 8009ec4:	2b00      	cmp	r3, #0
 8009ec6:	d102      	bne.n	8009ece <SDMMC_GetCmdResp3+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009ec8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009ecc:	e01b      	b.n	8009f06 <SDMMC_GetCmdResp3+0x62>
    }
    sta_reg = SDIOx->STA;
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009ed2:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8009ed4:	68fb      	ldr	r3, [r7, #12]
 8009ed6:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8009eda:	2b00      	cmp	r3, #0
 8009edc:	d0f0      	beq.n	8009ec0 <SDMMC_GetCmdResp3+0x1c>
 8009ede:	68fb      	ldr	r3, [r7, #12]
 8009ee0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8009ee4:	2b00      	cmp	r3, #0
 8009ee6:	d1eb      	bne.n	8009ec0 <SDMMC_GetCmdResp3+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009eec:	f003 0304 	and.w	r3, r3, #4
 8009ef0:	2b00      	cmp	r3, #0
 8009ef2:	d004      	beq.n	8009efe <SDMMC_GetCmdResp3+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	2204      	movs	r2, #4
 8009ef8:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009efa:	2304      	movs	r3, #4
 8009efc:	e003      	b.n	8009f06 <SDMMC_GetCmdResp3+0x62>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	22c5      	movs	r2, #197	; 0xc5
 8009f02:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8009f04:	2300      	movs	r3, #0
}
 8009f06:	4618      	mov	r0, r3
 8009f08:	3710      	adds	r7, #16
 8009f0a:	46bd      	mov	sp, r7
 8009f0c:	bc90      	pop	{r4, r7}
 8009f0e:	4770      	bx	lr
 8009f10:	20000008 	.word	0x20000008
 8009f14:	10624dd3 	.word	0x10624dd3

08009f18 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8009f18:	b590      	push	{r4, r7, lr}
 8009f1a:	b087      	sub	sp, #28
 8009f1c:	af00      	add	r7, sp, #0
 8009f1e:	60f8      	str	r0, [r7, #12]
 8009f20:	460b      	mov	r3, r1
 8009f22:	607a      	str	r2, [r7, #4]
 8009f24:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8009f26:	4b34      	ldr	r3, [pc, #208]	; (8009ff8 <SDMMC_GetCmdResp6+0xe0>)
 8009f28:	681b      	ldr	r3, [r3, #0]
 8009f2a:	4a34      	ldr	r2, [pc, #208]	; (8009ffc <SDMMC_GetCmdResp6+0xe4>)
 8009f2c:	fba2 2303 	umull	r2, r3, r2, r3
 8009f30:	0a5b      	lsrs	r3, r3, #9
 8009f32:	f241 3288 	movw	r2, #5000	; 0x1388
 8009f36:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8009f3a:	4623      	mov	r3, r4
 8009f3c:	1e5c      	subs	r4, r3, #1
 8009f3e:	2b00      	cmp	r3, #0
 8009f40:	d102      	bne.n	8009f48 <SDMMC_GetCmdResp6+0x30>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009f42:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009f46:	e052      	b.n	8009fee <SDMMC_GetCmdResp6+0xd6>
    }
    sta_reg = SDIOx->STA;
 8009f48:	68fb      	ldr	r3, [r7, #12]
 8009f4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009f4c:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8009f4e:	697b      	ldr	r3, [r7, #20]
 8009f50:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8009f54:	2b00      	cmp	r3, #0
 8009f56:	d0f0      	beq.n	8009f3a <SDMMC_GetCmdResp6+0x22>
 8009f58:	697b      	ldr	r3, [r7, #20]
 8009f5a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8009f5e:	2b00      	cmp	r3, #0
 8009f60:	d1eb      	bne.n	8009f3a <SDMMC_GetCmdResp6+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8009f62:	68fb      	ldr	r3, [r7, #12]
 8009f64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009f66:	f003 0304 	and.w	r3, r3, #4
 8009f6a:	2b00      	cmp	r3, #0
 8009f6c:	d004      	beq.n	8009f78 <SDMMC_GetCmdResp6+0x60>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8009f6e:	68fb      	ldr	r3, [r7, #12]
 8009f70:	2204      	movs	r2, #4
 8009f72:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009f74:	2304      	movs	r3, #4
 8009f76:	e03a      	b.n	8009fee <SDMMC_GetCmdResp6+0xd6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8009f78:	68fb      	ldr	r3, [r7, #12]
 8009f7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009f7c:	f003 0301 	and.w	r3, r3, #1
 8009f80:	2b00      	cmp	r3, #0
 8009f82:	d004      	beq.n	8009f8e <SDMMC_GetCmdResp6+0x76>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8009f84:	68fb      	ldr	r3, [r7, #12]
 8009f86:	2201      	movs	r2, #1
 8009f88:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009f8a:	2301      	movs	r3, #1
 8009f8c:	e02f      	b.n	8009fee <SDMMC_GetCmdResp6+0xd6>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8009f8e:	68f8      	ldr	r0, [r7, #12]
 8009f90:	f7ff fbae 	bl	80096f0 <SDIO_GetCommandResponse>
 8009f94:	4603      	mov	r3, r0
 8009f96:	461a      	mov	r2, r3
 8009f98:	7afb      	ldrb	r3, [r7, #11]
 8009f9a:	4293      	cmp	r3, r2
 8009f9c:	d001      	beq.n	8009fa2 <SDMMC_GetCmdResp6+0x8a>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009f9e:	2301      	movs	r3, #1
 8009fa0:	e025      	b.n	8009fee <SDMMC_GetCmdResp6+0xd6>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8009fa2:	68fb      	ldr	r3, [r7, #12]
 8009fa4:	22c5      	movs	r2, #197	; 0xc5
 8009fa6:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8009fa8:	2100      	movs	r1, #0
 8009faa:	68f8      	ldr	r0, [r7, #12]
 8009fac:	f7ff fbad 	bl	800970a <SDIO_GetResponse>
 8009fb0:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8009fb2:	693b      	ldr	r3, [r7, #16]
 8009fb4:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8009fb8:	2b00      	cmp	r3, #0
 8009fba:	d106      	bne.n	8009fca <SDMMC_GetCmdResp6+0xb2>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8009fbc:	693b      	ldr	r3, [r7, #16]
 8009fbe:	0c1b      	lsrs	r3, r3, #16
 8009fc0:	b29a      	uxth	r2, r3
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 8009fc6:	2300      	movs	r3, #0
 8009fc8:	e011      	b.n	8009fee <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8009fca:	693b      	ldr	r3, [r7, #16]
 8009fcc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009fd0:	2b00      	cmp	r3, #0
 8009fd2:	d002      	beq.n	8009fda <SDMMC_GetCmdResp6+0xc2>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8009fd4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8009fd8:	e009      	b.n	8009fee <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8009fda:	693b      	ldr	r3, [r7, #16]
 8009fdc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009fe0:	2b00      	cmp	r3, #0
 8009fe2:	d002      	beq.n	8009fea <SDMMC_GetCmdResp6+0xd2>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8009fe4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009fe8:	e001      	b.n	8009fee <SDMMC_GetCmdResp6+0xd6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8009fea:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8009fee:	4618      	mov	r0, r3
 8009ff0:	371c      	adds	r7, #28
 8009ff2:	46bd      	mov	sp, r7
 8009ff4:	bd90      	pop	{r4, r7, pc}
 8009ff6:	bf00      	nop
 8009ff8:	20000008 	.word	0x20000008
 8009ffc:	10624dd3 	.word	0x10624dd3

0800a000 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 800a000:	b490      	push	{r4, r7}
 800a002:	b084      	sub	sp, #16
 800a004:	af00      	add	r7, sp, #0
 800a006:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800a008:	4b21      	ldr	r3, [pc, #132]	; (800a090 <SDMMC_GetCmdResp7+0x90>)
 800a00a:	681b      	ldr	r3, [r3, #0]
 800a00c:	4a21      	ldr	r2, [pc, #132]	; (800a094 <SDMMC_GetCmdResp7+0x94>)
 800a00e:	fba2 2303 	umull	r2, r3, r2, r3
 800a012:	0a5b      	lsrs	r3, r3, #9
 800a014:	f241 3288 	movw	r2, #5000	; 0x1388
 800a018:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800a01c:	4623      	mov	r3, r4
 800a01e:	1e5c      	subs	r4, r3, #1
 800a020:	2b00      	cmp	r3, #0
 800a022:	d102      	bne.n	800a02a <SDMMC_GetCmdResp7+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a024:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a028:	e02c      	b.n	800a084 <SDMMC_GetCmdResp7+0x84>
    }
    sta_reg = SDIOx->STA;
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a02e:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800a030:	68fb      	ldr	r3, [r7, #12]
 800a032:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800a036:	2b00      	cmp	r3, #0
 800a038:	d0f0      	beq.n	800a01c <SDMMC_GetCmdResp7+0x1c>
 800a03a:	68fb      	ldr	r3, [r7, #12]
 800a03c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800a040:	2b00      	cmp	r3, #0
 800a042:	d1eb      	bne.n	800a01c <SDMMC_GetCmdResp7+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a048:	f003 0304 	and.w	r3, r3, #4
 800a04c:	2b00      	cmp	r3, #0
 800a04e:	d004      	beq.n	800a05a <SDMMC_GetCmdResp7+0x5a>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	2204      	movs	r2, #4
 800a054:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a056:	2304      	movs	r3, #4
 800a058:	e014      	b.n	800a084 <SDMMC_GetCmdResp7+0x84>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a05e:	f003 0301 	and.w	r3, r3, #1
 800a062:	2b00      	cmp	r3, #0
 800a064:	d004      	beq.n	800a070 <SDMMC_GetCmdResp7+0x70>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	2201      	movs	r2, #1
 800a06a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a06c:	2301      	movs	r3, #1
 800a06e:	e009      	b.n	800a084 <SDMMC_GetCmdResp7+0x84>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a074:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a078:	2b00      	cmp	r3, #0
 800a07a:	d002      	beq.n	800a082 <SDMMC_GetCmdResp7+0x82>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	2240      	movs	r2, #64	; 0x40
 800a080:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800a082:	2300      	movs	r3, #0
  
}
 800a084:	4618      	mov	r0, r3
 800a086:	3710      	adds	r7, #16
 800a088:	46bd      	mov	sp, r7
 800a08a:	bc90      	pop	{r4, r7}
 800a08c:	4770      	bx	lr
 800a08e:	bf00      	nop
 800a090:	20000008 	.word	0x20000008
 800a094:	10624dd3 	.word	0x10624dd3

0800a098 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800a098:	b084      	sub	sp, #16
 800a09a:	b580      	push	{r7, lr}
 800a09c:	b084      	sub	sp, #16
 800a09e:	af00      	add	r7, sp, #0
 800a0a0:	6078      	str	r0, [r7, #4]
 800a0a2:	f107 001c 	add.w	r0, r7, #28
 800a0a6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800a0aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0ac:	2b01      	cmp	r3, #1
 800a0ae:	d122      	bne.n	800a0f6 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a0b4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	68db      	ldr	r3, [r3, #12]
 800a0c0:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800a0c4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a0c8:	687a      	ldr	r2, [r7, #4]
 800a0ca:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	68db      	ldr	r3, [r3, #12]
 800a0d0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800a0d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a0da:	2b01      	cmp	r3, #1
 800a0dc:	d105      	bne.n	800a0ea <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	68db      	ldr	r3, [r3, #12]
 800a0e2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 800a0ea:	6878      	ldr	r0, [r7, #4]
 800a0ec:	f001 fa7c 	bl	800b5e8 <USB_CoreReset>
 800a0f0:	4603      	mov	r3, r0
 800a0f2:	73fb      	strb	r3, [r7, #15]
 800a0f4:	e01a      	b.n	800a12c <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	68db      	ldr	r3, [r3, #12]
 800a0fa:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 800a102:	6878      	ldr	r0, [r7, #4]
 800a104:	f001 fa70 	bl	800b5e8 <USB_CoreReset>
 800a108:	4603      	mov	r3, r0
 800a10a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800a10c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a10e:	2b00      	cmp	r3, #0
 800a110:	d106      	bne.n	800a120 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a116:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	639a      	str	r2, [r3, #56]	; 0x38
 800a11e:	e005      	b.n	800a12c <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a124:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800a12c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a12e:	2b01      	cmp	r3, #1
 800a130:	d10b      	bne.n	800a14a <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	689b      	ldr	r3, [r3, #8]
 800a136:	f043 0206 	orr.w	r2, r3, #6
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	689b      	ldr	r3, [r3, #8]
 800a142:	f043 0220 	orr.w	r2, r3, #32
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800a14a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a14c:	4618      	mov	r0, r3
 800a14e:	3710      	adds	r7, #16
 800a150:	46bd      	mov	sp, r7
 800a152:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a156:	b004      	add	sp, #16
 800a158:	4770      	bx	lr
	...

0800a15c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800a15c:	b480      	push	{r7}
 800a15e:	b087      	sub	sp, #28
 800a160:	af00      	add	r7, sp, #0
 800a162:	60f8      	str	r0, [r7, #12]
 800a164:	60b9      	str	r1, [r7, #8]
 800a166:	4613      	mov	r3, r2
 800a168:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800a16a:	79fb      	ldrb	r3, [r7, #7]
 800a16c:	2b02      	cmp	r3, #2
 800a16e:	d165      	bne.n	800a23c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800a170:	68bb      	ldr	r3, [r7, #8]
 800a172:	4a41      	ldr	r2, [pc, #260]	; (800a278 <USB_SetTurnaroundTime+0x11c>)
 800a174:	4293      	cmp	r3, r2
 800a176:	d906      	bls.n	800a186 <USB_SetTurnaroundTime+0x2a>
 800a178:	68bb      	ldr	r3, [r7, #8]
 800a17a:	4a40      	ldr	r2, [pc, #256]	; (800a27c <USB_SetTurnaroundTime+0x120>)
 800a17c:	4293      	cmp	r3, r2
 800a17e:	d802      	bhi.n	800a186 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800a180:	230f      	movs	r3, #15
 800a182:	617b      	str	r3, [r7, #20]
 800a184:	e062      	b.n	800a24c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800a186:	68bb      	ldr	r3, [r7, #8]
 800a188:	4a3c      	ldr	r2, [pc, #240]	; (800a27c <USB_SetTurnaroundTime+0x120>)
 800a18a:	4293      	cmp	r3, r2
 800a18c:	d906      	bls.n	800a19c <USB_SetTurnaroundTime+0x40>
 800a18e:	68bb      	ldr	r3, [r7, #8]
 800a190:	4a3b      	ldr	r2, [pc, #236]	; (800a280 <USB_SetTurnaroundTime+0x124>)
 800a192:	4293      	cmp	r3, r2
 800a194:	d802      	bhi.n	800a19c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800a196:	230e      	movs	r3, #14
 800a198:	617b      	str	r3, [r7, #20]
 800a19a:	e057      	b.n	800a24c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800a19c:	68bb      	ldr	r3, [r7, #8]
 800a19e:	4a38      	ldr	r2, [pc, #224]	; (800a280 <USB_SetTurnaroundTime+0x124>)
 800a1a0:	4293      	cmp	r3, r2
 800a1a2:	d906      	bls.n	800a1b2 <USB_SetTurnaroundTime+0x56>
 800a1a4:	68bb      	ldr	r3, [r7, #8]
 800a1a6:	4a37      	ldr	r2, [pc, #220]	; (800a284 <USB_SetTurnaroundTime+0x128>)
 800a1a8:	4293      	cmp	r3, r2
 800a1aa:	d802      	bhi.n	800a1b2 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800a1ac:	230d      	movs	r3, #13
 800a1ae:	617b      	str	r3, [r7, #20]
 800a1b0:	e04c      	b.n	800a24c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800a1b2:	68bb      	ldr	r3, [r7, #8]
 800a1b4:	4a33      	ldr	r2, [pc, #204]	; (800a284 <USB_SetTurnaroundTime+0x128>)
 800a1b6:	4293      	cmp	r3, r2
 800a1b8:	d906      	bls.n	800a1c8 <USB_SetTurnaroundTime+0x6c>
 800a1ba:	68bb      	ldr	r3, [r7, #8]
 800a1bc:	4a32      	ldr	r2, [pc, #200]	; (800a288 <USB_SetTurnaroundTime+0x12c>)
 800a1be:	4293      	cmp	r3, r2
 800a1c0:	d802      	bhi.n	800a1c8 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800a1c2:	230c      	movs	r3, #12
 800a1c4:	617b      	str	r3, [r7, #20]
 800a1c6:	e041      	b.n	800a24c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800a1c8:	68bb      	ldr	r3, [r7, #8]
 800a1ca:	4a2f      	ldr	r2, [pc, #188]	; (800a288 <USB_SetTurnaroundTime+0x12c>)
 800a1cc:	4293      	cmp	r3, r2
 800a1ce:	d906      	bls.n	800a1de <USB_SetTurnaroundTime+0x82>
 800a1d0:	68bb      	ldr	r3, [r7, #8]
 800a1d2:	4a2e      	ldr	r2, [pc, #184]	; (800a28c <USB_SetTurnaroundTime+0x130>)
 800a1d4:	4293      	cmp	r3, r2
 800a1d6:	d802      	bhi.n	800a1de <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800a1d8:	230b      	movs	r3, #11
 800a1da:	617b      	str	r3, [r7, #20]
 800a1dc:	e036      	b.n	800a24c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800a1de:	68bb      	ldr	r3, [r7, #8]
 800a1e0:	4a2a      	ldr	r2, [pc, #168]	; (800a28c <USB_SetTurnaroundTime+0x130>)
 800a1e2:	4293      	cmp	r3, r2
 800a1e4:	d906      	bls.n	800a1f4 <USB_SetTurnaroundTime+0x98>
 800a1e6:	68bb      	ldr	r3, [r7, #8]
 800a1e8:	4a29      	ldr	r2, [pc, #164]	; (800a290 <USB_SetTurnaroundTime+0x134>)
 800a1ea:	4293      	cmp	r3, r2
 800a1ec:	d802      	bhi.n	800a1f4 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800a1ee:	230a      	movs	r3, #10
 800a1f0:	617b      	str	r3, [r7, #20]
 800a1f2:	e02b      	b.n	800a24c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800a1f4:	68bb      	ldr	r3, [r7, #8]
 800a1f6:	4a26      	ldr	r2, [pc, #152]	; (800a290 <USB_SetTurnaroundTime+0x134>)
 800a1f8:	4293      	cmp	r3, r2
 800a1fa:	d906      	bls.n	800a20a <USB_SetTurnaroundTime+0xae>
 800a1fc:	68bb      	ldr	r3, [r7, #8]
 800a1fe:	4a25      	ldr	r2, [pc, #148]	; (800a294 <USB_SetTurnaroundTime+0x138>)
 800a200:	4293      	cmp	r3, r2
 800a202:	d802      	bhi.n	800a20a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800a204:	2309      	movs	r3, #9
 800a206:	617b      	str	r3, [r7, #20]
 800a208:	e020      	b.n	800a24c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800a20a:	68bb      	ldr	r3, [r7, #8]
 800a20c:	4a21      	ldr	r2, [pc, #132]	; (800a294 <USB_SetTurnaroundTime+0x138>)
 800a20e:	4293      	cmp	r3, r2
 800a210:	d906      	bls.n	800a220 <USB_SetTurnaroundTime+0xc4>
 800a212:	68bb      	ldr	r3, [r7, #8]
 800a214:	4a20      	ldr	r2, [pc, #128]	; (800a298 <USB_SetTurnaroundTime+0x13c>)
 800a216:	4293      	cmp	r3, r2
 800a218:	d802      	bhi.n	800a220 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800a21a:	2308      	movs	r3, #8
 800a21c:	617b      	str	r3, [r7, #20]
 800a21e:	e015      	b.n	800a24c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800a220:	68bb      	ldr	r3, [r7, #8]
 800a222:	4a1d      	ldr	r2, [pc, #116]	; (800a298 <USB_SetTurnaroundTime+0x13c>)
 800a224:	4293      	cmp	r3, r2
 800a226:	d906      	bls.n	800a236 <USB_SetTurnaroundTime+0xda>
 800a228:	68bb      	ldr	r3, [r7, #8]
 800a22a:	4a1c      	ldr	r2, [pc, #112]	; (800a29c <USB_SetTurnaroundTime+0x140>)
 800a22c:	4293      	cmp	r3, r2
 800a22e:	d802      	bhi.n	800a236 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800a230:	2307      	movs	r3, #7
 800a232:	617b      	str	r3, [r7, #20]
 800a234:	e00a      	b.n	800a24c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800a236:	2306      	movs	r3, #6
 800a238:	617b      	str	r3, [r7, #20]
 800a23a:	e007      	b.n	800a24c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800a23c:	79fb      	ldrb	r3, [r7, #7]
 800a23e:	2b00      	cmp	r3, #0
 800a240:	d102      	bne.n	800a248 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800a242:	2309      	movs	r3, #9
 800a244:	617b      	str	r3, [r7, #20]
 800a246:	e001      	b.n	800a24c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800a248:	2309      	movs	r3, #9
 800a24a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800a24c:	68fb      	ldr	r3, [r7, #12]
 800a24e:	68db      	ldr	r3, [r3, #12]
 800a250:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800a254:	68fb      	ldr	r3, [r7, #12]
 800a256:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800a258:	68fb      	ldr	r3, [r7, #12]
 800a25a:	68da      	ldr	r2, [r3, #12]
 800a25c:	697b      	ldr	r3, [r7, #20]
 800a25e:	029b      	lsls	r3, r3, #10
 800a260:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800a264:	431a      	orrs	r2, r3
 800a266:	68fb      	ldr	r3, [r7, #12]
 800a268:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800a26a:	2300      	movs	r3, #0
}
 800a26c:	4618      	mov	r0, r3
 800a26e:	371c      	adds	r7, #28
 800a270:	46bd      	mov	sp, r7
 800a272:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a276:	4770      	bx	lr
 800a278:	00d8acbf 	.word	0x00d8acbf
 800a27c:	00e4e1bf 	.word	0x00e4e1bf
 800a280:	00f423ff 	.word	0x00f423ff
 800a284:	0106737f 	.word	0x0106737f
 800a288:	011a499f 	.word	0x011a499f
 800a28c:	01312cff 	.word	0x01312cff
 800a290:	014ca43f 	.word	0x014ca43f
 800a294:	016e35ff 	.word	0x016e35ff
 800a298:	01a6ab1f 	.word	0x01a6ab1f
 800a29c:	01e847ff 	.word	0x01e847ff

0800a2a0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800a2a0:	b480      	push	{r7}
 800a2a2:	b083      	sub	sp, #12
 800a2a4:	af00      	add	r7, sp, #0
 800a2a6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	689b      	ldr	r3, [r3, #8]
 800a2ac:	f043 0201 	orr.w	r2, r3, #1
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800a2b4:	2300      	movs	r3, #0
}
 800a2b6:	4618      	mov	r0, r3
 800a2b8:	370c      	adds	r7, #12
 800a2ba:	46bd      	mov	sp, r7
 800a2bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2c0:	4770      	bx	lr

0800a2c2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800a2c2:	b480      	push	{r7}
 800a2c4:	b083      	sub	sp, #12
 800a2c6:	af00      	add	r7, sp, #0
 800a2c8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	689b      	ldr	r3, [r3, #8]
 800a2ce:	f023 0201 	bic.w	r2, r3, #1
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800a2d6:	2300      	movs	r3, #0
}
 800a2d8:	4618      	mov	r0, r3
 800a2da:	370c      	adds	r7, #12
 800a2dc:	46bd      	mov	sp, r7
 800a2de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2e2:	4770      	bx	lr

0800a2e4 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800a2e4:	b580      	push	{r7, lr}
 800a2e6:	b082      	sub	sp, #8
 800a2e8:	af00      	add	r7, sp, #0
 800a2ea:	6078      	str	r0, [r7, #4]
 800a2ec:	460b      	mov	r3, r1
 800a2ee:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	68db      	ldr	r3, [r3, #12]
 800a2f4:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800a2fc:	78fb      	ldrb	r3, [r7, #3]
 800a2fe:	2b01      	cmp	r3, #1
 800a300:	d106      	bne.n	800a310 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	68db      	ldr	r3, [r3, #12]
 800a306:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	60da      	str	r2, [r3, #12]
 800a30e:	e00b      	b.n	800a328 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 800a310:	78fb      	ldrb	r3, [r7, #3]
 800a312:	2b00      	cmp	r3, #0
 800a314:	d106      	bne.n	800a324 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	68db      	ldr	r3, [r3, #12]
 800a31a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	60da      	str	r2, [r3, #12]
 800a322:	e001      	b.n	800a328 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800a324:	2301      	movs	r3, #1
 800a326:	e003      	b.n	800a330 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800a328:	2032      	movs	r0, #50	; 0x32
 800a32a:	f7f8 fe6b 	bl	8003004 <HAL_Delay>

  return HAL_OK;
 800a32e:	2300      	movs	r3, #0
}
 800a330:	4618      	mov	r0, r3
 800a332:	3708      	adds	r7, #8
 800a334:	46bd      	mov	sp, r7
 800a336:	bd80      	pop	{r7, pc}

0800a338 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800a338:	b084      	sub	sp, #16
 800a33a:	b580      	push	{r7, lr}
 800a33c:	b086      	sub	sp, #24
 800a33e:	af00      	add	r7, sp, #0
 800a340:	6078      	str	r0, [r7, #4]
 800a342:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800a346:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800a34a:	2300      	movs	r3, #0
 800a34c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800a352:	2300      	movs	r3, #0
 800a354:	613b      	str	r3, [r7, #16]
 800a356:	e009      	b.n	800a36c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800a358:	687a      	ldr	r2, [r7, #4]
 800a35a:	693b      	ldr	r3, [r7, #16]
 800a35c:	3340      	adds	r3, #64	; 0x40
 800a35e:	009b      	lsls	r3, r3, #2
 800a360:	4413      	add	r3, r2
 800a362:	2200      	movs	r2, #0
 800a364:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800a366:	693b      	ldr	r3, [r7, #16]
 800a368:	3301      	adds	r3, #1
 800a36a:	613b      	str	r3, [r7, #16]
 800a36c:	693b      	ldr	r3, [r7, #16]
 800a36e:	2b0e      	cmp	r3, #14
 800a370:	d9f2      	bls.n	800a358 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800a372:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a374:	2b00      	cmp	r3, #0
 800a376:	d112      	bne.n	800a39e <USB_DevInit+0x66>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a37c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a388:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a394:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	639a      	str	r2, [r3, #56]	; 0x38
 800a39c:	e00b      	b.n	800a3b6 <USB_DevInit+0x7e>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GOTGCTL &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	681b      	ldr	r3, [r3, #0]
 800a3a2:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	601a      	str	r2, [r3, #0]
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a3ae:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800a3b6:	68fb      	ldr	r3, [r7, #12]
 800a3b8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a3bc:	461a      	mov	r2, r3
 800a3be:	2300      	movs	r3, #0
 800a3c0:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800a3c2:	68fb      	ldr	r3, [r7, #12]
 800a3c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a3c8:	4619      	mov	r1, r3
 800a3ca:	68fb      	ldr	r3, [r7, #12]
 800a3cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a3d0:	461a      	mov	r2, r3
 800a3d2:	680b      	ldr	r3, [r1, #0]
 800a3d4:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800a3d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a3d8:	2b01      	cmp	r3, #1
 800a3da:	d10c      	bne.n	800a3f6 <USB_DevInit+0xbe>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800a3dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a3de:	2b00      	cmp	r3, #0
 800a3e0:	d104      	bne.n	800a3ec <USB_DevInit+0xb4>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800a3e2:	2100      	movs	r1, #0
 800a3e4:	6878      	ldr	r0, [r7, #4]
 800a3e6:	f000 f961 	bl	800a6ac <USB_SetDevSpeed>
 800a3ea:	e008      	b.n	800a3fe <USB_DevInit+0xc6>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800a3ec:	2101      	movs	r1, #1
 800a3ee:	6878      	ldr	r0, [r7, #4]
 800a3f0:	f000 f95c 	bl	800a6ac <USB_SetDevSpeed>
 800a3f4:	e003      	b.n	800a3fe <USB_DevInit+0xc6>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800a3f6:	2103      	movs	r1, #3
 800a3f8:	6878      	ldr	r0, [r7, #4]
 800a3fa:	f000 f957 	bl	800a6ac <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800a3fe:	2110      	movs	r1, #16
 800a400:	6878      	ldr	r0, [r7, #4]
 800a402:	f000 f90b 	bl	800a61c <USB_FlushTxFifo>
 800a406:	4603      	mov	r3, r0
 800a408:	2b00      	cmp	r3, #0
 800a40a:	d001      	beq.n	800a410 <USB_DevInit+0xd8>
  {
    ret = HAL_ERROR;
 800a40c:	2301      	movs	r3, #1
 800a40e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800a410:	6878      	ldr	r0, [r7, #4]
 800a412:	f000 f929 	bl	800a668 <USB_FlushRxFifo>
 800a416:	4603      	mov	r3, r0
 800a418:	2b00      	cmp	r3, #0
 800a41a:	d001      	beq.n	800a420 <USB_DevInit+0xe8>
  {
    ret = HAL_ERROR;
 800a41c:	2301      	movs	r3, #1
 800a41e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800a420:	68fb      	ldr	r3, [r7, #12]
 800a422:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a426:	461a      	mov	r2, r3
 800a428:	2300      	movs	r3, #0
 800a42a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800a42c:	68fb      	ldr	r3, [r7, #12]
 800a42e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a432:	461a      	mov	r2, r3
 800a434:	2300      	movs	r3, #0
 800a436:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800a438:	68fb      	ldr	r3, [r7, #12]
 800a43a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a43e:	461a      	mov	r2, r3
 800a440:	2300      	movs	r3, #0
 800a442:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a444:	2300      	movs	r3, #0
 800a446:	613b      	str	r3, [r7, #16]
 800a448:	e043      	b.n	800a4d2 <USB_DevInit+0x19a>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800a44a:	693b      	ldr	r3, [r7, #16]
 800a44c:	015a      	lsls	r2, r3, #5
 800a44e:	68fb      	ldr	r3, [r7, #12]
 800a450:	4413      	add	r3, r2
 800a452:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a456:	681b      	ldr	r3, [r3, #0]
 800a458:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a45c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a460:	d118      	bne.n	800a494 <USB_DevInit+0x15c>
    {
      if (i == 0U)
 800a462:	693b      	ldr	r3, [r7, #16]
 800a464:	2b00      	cmp	r3, #0
 800a466:	d10a      	bne.n	800a47e <USB_DevInit+0x146>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800a468:	693b      	ldr	r3, [r7, #16]
 800a46a:	015a      	lsls	r2, r3, #5
 800a46c:	68fb      	ldr	r3, [r7, #12]
 800a46e:	4413      	add	r3, r2
 800a470:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a474:	461a      	mov	r2, r3
 800a476:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800a47a:	6013      	str	r3, [r2, #0]
 800a47c:	e013      	b.n	800a4a6 <USB_DevInit+0x16e>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800a47e:	693b      	ldr	r3, [r7, #16]
 800a480:	015a      	lsls	r2, r3, #5
 800a482:	68fb      	ldr	r3, [r7, #12]
 800a484:	4413      	add	r3, r2
 800a486:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a48a:	461a      	mov	r2, r3
 800a48c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800a490:	6013      	str	r3, [r2, #0]
 800a492:	e008      	b.n	800a4a6 <USB_DevInit+0x16e>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800a494:	693b      	ldr	r3, [r7, #16]
 800a496:	015a      	lsls	r2, r3, #5
 800a498:	68fb      	ldr	r3, [r7, #12]
 800a49a:	4413      	add	r3, r2
 800a49c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a4a0:	461a      	mov	r2, r3
 800a4a2:	2300      	movs	r3, #0
 800a4a4:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800a4a6:	693b      	ldr	r3, [r7, #16]
 800a4a8:	015a      	lsls	r2, r3, #5
 800a4aa:	68fb      	ldr	r3, [r7, #12]
 800a4ac:	4413      	add	r3, r2
 800a4ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a4b2:	461a      	mov	r2, r3
 800a4b4:	2300      	movs	r3, #0
 800a4b6:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800a4b8:	693b      	ldr	r3, [r7, #16]
 800a4ba:	015a      	lsls	r2, r3, #5
 800a4bc:	68fb      	ldr	r3, [r7, #12]
 800a4be:	4413      	add	r3, r2
 800a4c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a4c4:	461a      	mov	r2, r3
 800a4c6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800a4ca:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a4cc:	693b      	ldr	r3, [r7, #16]
 800a4ce:	3301      	adds	r3, #1
 800a4d0:	613b      	str	r3, [r7, #16]
 800a4d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4d4:	693a      	ldr	r2, [r7, #16]
 800a4d6:	429a      	cmp	r2, r3
 800a4d8:	d3b7      	bcc.n	800a44a <USB_DevInit+0x112>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a4da:	2300      	movs	r3, #0
 800a4dc:	613b      	str	r3, [r7, #16]
 800a4de:	e043      	b.n	800a568 <USB_DevInit+0x230>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a4e0:	693b      	ldr	r3, [r7, #16]
 800a4e2:	015a      	lsls	r2, r3, #5
 800a4e4:	68fb      	ldr	r3, [r7, #12]
 800a4e6:	4413      	add	r3, r2
 800a4e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a4ec:	681b      	ldr	r3, [r3, #0]
 800a4ee:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a4f2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a4f6:	d118      	bne.n	800a52a <USB_DevInit+0x1f2>
    {
      if (i == 0U)
 800a4f8:	693b      	ldr	r3, [r7, #16]
 800a4fa:	2b00      	cmp	r3, #0
 800a4fc:	d10a      	bne.n	800a514 <USB_DevInit+0x1dc>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800a4fe:	693b      	ldr	r3, [r7, #16]
 800a500:	015a      	lsls	r2, r3, #5
 800a502:	68fb      	ldr	r3, [r7, #12]
 800a504:	4413      	add	r3, r2
 800a506:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a50a:	461a      	mov	r2, r3
 800a50c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800a510:	6013      	str	r3, [r2, #0]
 800a512:	e013      	b.n	800a53c <USB_DevInit+0x204>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800a514:	693b      	ldr	r3, [r7, #16]
 800a516:	015a      	lsls	r2, r3, #5
 800a518:	68fb      	ldr	r3, [r7, #12]
 800a51a:	4413      	add	r3, r2
 800a51c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a520:	461a      	mov	r2, r3
 800a522:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800a526:	6013      	str	r3, [r2, #0]
 800a528:	e008      	b.n	800a53c <USB_DevInit+0x204>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800a52a:	693b      	ldr	r3, [r7, #16]
 800a52c:	015a      	lsls	r2, r3, #5
 800a52e:	68fb      	ldr	r3, [r7, #12]
 800a530:	4413      	add	r3, r2
 800a532:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a536:	461a      	mov	r2, r3
 800a538:	2300      	movs	r3, #0
 800a53a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800a53c:	693b      	ldr	r3, [r7, #16]
 800a53e:	015a      	lsls	r2, r3, #5
 800a540:	68fb      	ldr	r3, [r7, #12]
 800a542:	4413      	add	r3, r2
 800a544:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a548:	461a      	mov	r2, r3
 800a54a:	2300      	movs	r3, #0
 800a54c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800a54e:	693b      	ldr	r3, [r7, #16]
 800a550:	015a      	lsls	r2, r3, #5
 800a552:	68fb      	ldr	r3, [r7, #12]
 800a554:	4413      	add	r3, r2
 800a556:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a55a:	461a      	mov	r2, r3
 800a55c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800a560:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a562:	693b      	ldr	r3, [r7, #16]
 800a564:	3301      	adds	r3, #1
 800a566:	613b      	str	r3, [r7, #16]
 800a568:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a56a:	693a      	ldr	r2, [r7, #16]
 800a56c:	429a      	cmp	r2, r3
 800a56e:	d3b7      	bcc.n	800a4e0 <USB_DevInit+0x1a8>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800a570:	68fb      	ldr	r3, [r7, #12]
 800a572:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a576:	691b      	ldr	r3, [r3, #16]
 800a578:	68fa      	ldr	r2, [r7, #12]
 800a57a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a57e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a582:	6113      	str	r3, [r2, #16]

  if (cfg.dma_enable == 1U)
 800a584:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a586:	2b01      	cmp	r3, #1
 800a588:	d111      	bne.n	800a5ae <USB_DevInit+0x276>
  {
    /*Set threshold parameters */
    USBx_DEVICE->DTHRCTL = USB_OTG_DTHRCTL_TXTHRLEN_6 |
 800a58a:	68fb      	ldr	r3, [r7, #12]
 800a58c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a590:	461a      	mov	r2, r3
 800a592:	4b20      	ldr	r3, [pc, #128]	; (800a614 <USB_DevInit+0x2dc>)
 800a594:	6313      	str	r3, [r2, #48]	; 0x30
                           USB_OTG_DTHRCTL_RXTHRLEN_6;

    USBx_DEVICE->DTHRCTL |= USB_OTG_DTHRCTL_RXTHREN |
 800a596:	68fb      	ldr	r3, [r7, #12]
 800a598:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a59c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a59e:	68fa      	ldr	r2, [r7, #12]
 800a5a0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a5a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a5a8:	f043 0303 	orr.w	r3, r3, #3
 800a5ac:	6313      	str	r3, [r2, #48]	; 0x30
                            USB_OTG_DTHRCTL_ISOTHREN |
                            USB_OTG_DTHRCTL_NONISOTHREN;
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	2200      	movs	r2, #0
 800a5b2:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800a5ba:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800a5bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5be:	2b00      	cmp	r3, #0
 800a5c0:	d105      	bne.n	800a5ce <USB_DevInit+0x296>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	699b      	ldr	r3, [r3, #24]
 800a5c6:	f043 0210 	orr.w	r2, r3, #16
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	699a      	ldr	r2, [r3, #24]
 800a5d2:	4b11      	ldr	r3, [pc, #68]	; (800a618 <USB_DevInit+0x2e0>)
 800a5d4:	4313      	orrs	r3, r2
 800a5d6:	687a      	ldr	r2, [r7, #4]
 800a5d8:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800a5da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a5dc:	2b00      	cmp	r3, #0
 800a5de:	d005      	beq.n	800a5ec <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	699b      	ldr	r3, [r3, #24]
 800a5e4:	f043 0208 	orr.w	r2, r3, #8
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800a5ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a5ee:	2b01      	cmp	r3, #1
 800a5f0:	d107      	bne.n	800a602 <USB_DevInit+0x2ca>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	699b      	ldr	r3, [r3, #24]
 800a5f6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a5fa:	f043 0304 	orr.w	r3, r3, #4
 800a5fe:	687a      	ldr	r2, [r7, #4]
 800a600:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800a602:	7dfb      	ldrb	r3, [r7, #23]
}
 800a604:	4618      	mov	r0, r3
 800a606:	3718      	adds	r7, #24
 800a608:	46bd      	mov	sp, r7
 800a60a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a60e:	b004      	add	sp, #16
 800a610:	4770      	bx	lr
 800a612:	bf00      	nop
 800a614:	00800100 	.word	0x00800100
 800a618:	803c3800 	.word	0x803c3800

0800a61c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800a61c:	b480      	push	{r7}
 800a61e:	b085      	sub	sp, #20
 800a620:	af00      	add	r7, sp, #0
 800a622:	6078      	str	r0, [r7, #4]
 800a624:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800a626:	2300      	movs	r3, #0
 800a628:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800a62a:	683b      	ldr	r3, [r7, #0]
 800a62c:	019b      	lsls	r3, r3, #6
 800a62e:	f043 0220 	orr.w	r2, r3, #32
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800a636:	68fb      	ldr	r3, [r7, #12]
 800a638:	3301      	adds	r3, #1
 800a63a:	60fb      	str	r3, [r7, #12]
 800a63c:	68fb      	ldr	r3, [r7, #12]
 800a63e:	4a09      	ldr	r2, [pc, #36]	; (800a664 <USB_FlushTxFifo+0x48>)
 800a640:	4293      	cmp	r3, r2
 800a642:	d901      	bls.n	800a648 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 800a644:	2303      	movs	r3, #3
 800a646:	e006      	b.n	800a656 <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	691b      	ldr	r3, [r3, #16]
 800a64c:	f003 0320 	and.w	r3, r3, #32
 800a650:	2b20      	cmp	r3, #32
 800a652:	d0f0      	beq.n	800a636 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800a654:	2300      	movs	r3, #0
}
 800a656:	4618      	mov	r0, r3
 800a658:	3714      	adds	r7, #20
 800a65a:	46bd      	mov	sp, r7
 800a65c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a660:	4770      	bx	lr
 800a662:	bf00      	nop
 800a664:	00030d40 	.word	0x00030d40

0800a668 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800a668:	b480      	push	{r7}
 800a66a:	b085      	sub	sp, #20
 800a66c:	af00      	add	r7, sp, #0
 800a66e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800a670:	2300      	movs	r3, #0
 800a672:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	2210      	movs	r2, #16
 800a678:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800a67a:	68fb      	ldr	r3, [r7, #12]
 800a67c:	3301      	adds	r3, #1
 800a67e:	60fb      	str	r3, [r7, #12]
 800a680:	68fb      	ldr	r3, [r7, #12]
 800a682:	4a09      	ldr	r2, [pc, #36]	; (800a6a8 <USB_FlushRxFifo+0x40>)
 800a684:	4293      	cmp	r3, r2
 800a686:	d901      	bls.n	800a68c <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800a688:	2303      	movs	r3, #3
 800a68a:	e006      	b.n	800a69a <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	691b      	ldr	r3, [r3, #16]
 800a690:	f003 0310 	and.w	r3, r3, #16
 800a694:	2b10      	cmp	r3, #16
 800a696:	d0f0      	beq.n	800a67a <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800a698:	2300      	movs	r3, #0
}
 800a69a:	4618      	mov	r0, r3
 800a69c:	3714      	adds	r7, #20
 800a69e:	46bd      	mov	sp, r7
 800a6a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6a4:	4770      	bx	lr
 800a6a6:	bf00      	nop
 800a6a8:	00030d40 	.word	0x00030d40

0800a6ac <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800a6ac:	b480      	push	{r7}
 800a6ae:	b085      	sub	sp, #20
 800a6b0:	af00      	add	r7, sp, #0
 800a6b2:	6078      	str	r0, [r7, #4]
 800a6b4:	460b      	mov	r3, r1
 800a6b6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800a6bc:	68fb      	ldr	r3, [r7, #12]
 800a6be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a6c2:	681a      	ldr	r2, [r3, #0]
 800a6c4:	78fb      	ldrb	r3, [r7, #3]
 800a6c6:	68f9      	ldr	r1, [r7, #12]
 800a6c8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a6cc:	4313      	orrs	r3, r2
 800a6ce:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800a6d0:	2300      	movs	r3, #0
}
 800a6d2:	4618      	mov	r0, r3
 800a6d4:	3714      	adds	r7, #20
 800a6d6:	46bd      	mov	sp, r7
 800a6d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6dc:	4770      	bx	lr

0800a6de <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_HIGH: High speed mode
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800a6de:	b480      	push	{r7}
 800a6e0:	b087      	sub	sp, #28
 800a6e2:	af00      	add	r7, sp, #0
 800a6e4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a6e6:	687b      	ldr	r3, [r7, #4]
 800a6e8:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800a6ea:	693b      	ldr	r3, [r7, #16]
 800a6ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a6f0:	689b      	ldr	r3, [r3, #8]
 800a6f2:	f003 0306 	and.w	r3, r3, #6
 800a6f6:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800a6f8:	68fb      	ldr	r3, [r7, #12]
 800a6fa:	2b00      	cmp	r3, #0
 800a6fc:	d102      	bne.n	800a704 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800a6fe:	2300      	movs	r3, #0
 800a700:	75fb      	strb	r3, [r7, #23]
 800a702:	e00a      	b.n	800a71a <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800a704:	68fb      	ldr	r3, [r7, #12]
 800a706:	2b02      	cmp	r3, #2
 800a708:	d002      	beq.n	800a710 <USB_GetDevSpeed+0x32>
 800a70a:	68fb      	ldr	r3, [r7, #12]
 800a70c:	2b06      	cmp	r3, #6
 800a70e:	d102      	bne.n	800a716 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800a710:	2302      	movs	r3, #2
 800a712:	75fb      	strb	r3, [r7, #23]
 800a714:	e001      	b.n	800a71a <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800a716:	230f      	movs	r3, #15
 800a718:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800a71a:	7dfb      	ldrb	r3, [r7, #23]
}
 800a71c:	4618      	mov	r0, r3
 800a71e:	371c      	adds	r7, #28
 800a720:	46bd      	mov	sp, r7
 800a722:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a726:	4770      	bx	lr

0800a728 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800a728:	b480      	push	{r7}
 800a72a:	b085      	sub	sp, #20
 800a72c:	af00      	add	r7, sp, #0
 800a72e:	6078      	str	r0, [r7, #4]
 800a730:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a732:	687b      	ldr	r3, [r7, #4]
 800a734:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a736:	683b      	ldr	r3, [r7, #0]
 800a738:	781b      	ldrb	r3, [r3, #0]
 800a73a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800a73c:	683b      	ldr	r3, [r7, #0]
 800a73e:	785b      	ldrb	r3, [r3, #1]
 800a740:	2b01      	cmp	r3, #1
 800a742:	d13a      	bne.n	800a7ba <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800a744:	68fb      	ldr	r3, [r7, #12]
 800a746:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a74a:	69da      	ldr	r2, [r3, #28]
 800a74c:	683b      	ldr	r3, [r7, #0]
 800a74e:	781b      	ldrb	r3, [r3, #0]
 800a750:	f003 030f 	and.w	r3, r3, #15
 800a754:	2101      	movs	r1, #1
 800a756:	fa01 f303 	lsl.w	r3, r1, r3
 800a75a:	b29b      	uxth	r3, r3
 800a75c:	68f9      	ldr	r1, [r7, #12]
 800a75e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a762:	4313      	orrs	r3, r2
 800a764:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800a766:	68bb      	ldr	r3, [r7, #8]
 800a768:	015a      	lsls	r2, r3, #5
 800a76a:	68fb      	ldr	r3, [r7, #12]
 800a76c:	4413      	add	r3, r2
 800a76e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a772:	681b      	ldr	r3, [r3, #0]
 800a774:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a778:	2b00      	cmp	r3, #0
 800a77a:	d155      	bne.n	800a828 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800a77c:	68bb      	ldr	r3, [r7, #8]
 800a77e:	015a      	lsls	r2, r3, #5
 800a780:	68fb      	ldr	r3, [r7, #12]
 800a782:	4413      	add	r3, r2
 800a784:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a788:	681a      	ldr	r2, [r3, #0]
 800a78a:	683b      	ldr	r3, [r7, #0]
 800a78c:	689b      	ldr	r3, [r3, #8]
 800a78e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800a792:	683b      	ldr	r3, [r7, #0]
 800a794:	78db      	ldrb	r3, [r3, #3]
 800a796:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800a798:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800a79a:	68bb      	ldr	r3, [r7, #8]
 800a79c:	059b      	lsls	r3, r3, #22
 800a79e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800a7a0:	4313      	orrs	r3, r2
 800a7a2:	68ba      	ldr	r2, [r7, #8]
 800a7a4:	0151      	lsls	r1, r2, #5
 800a7a6:	68fa      	ldr	r2, [r7, #12]
 800a7a8:	440a      	add	r2, r1
 800a7aa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a7ae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a7b2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a7b6:	6013      	str	r3, [r2, #0]
 800a7b8:	e036      	b.n	800a828 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800a7ba:	68fb      	ldr	r3, [r7, #12]
 800a7bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a7c0:	69da      	ldr	r2, [r3, #28]
 800a7c2:	683b      	ldr	r3, [r7, #0]
 800a7c4:	781b      	ldrb	r3, [r3, #0]
 800a7c6:	f003 030f 	and.w	r3, r3, #15
 800a7ca:	2101      	movs	r1, #1
 800a7cc:	fa01 f303 	lsl.w	r3, r1, r3
 800a7d0:	041b      	lsls	r3, r3, #16
 800a7d2:	68f9      	ldr	r1, [r7, #12]
 800a7d4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a7d8:	4313      	orrs	r3, r2
 800a7da:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800a7dc:	68bb      	ldr	r3, [r7, #8]
 800a7de:	015a      	lsls	r2, r3, #5
 800a7e0:	68fb      	ldr	r3, [r7, #12]
 800a7e2:	4413      	add	r3, r2
 800a7e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a7e8:	681b      	ldr	r3, [r3, #0]
 800a7ea:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a7ee:	2b00      	cmp	r3, #0
 800a7f0:	d11a      	bne.n	800a828 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800a7f2:	68bb      	ldr	r3, [r7, #8]
 800a7f4:	015a      	lsls	r2, r3, #5
 800a7f6:	68fb      	ldr	r3, [r7, #12]
 800a7f8:	4413      	add	r3, r2
 800a7fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a7fe:	681a      	ldr	r2, [r3, #0]
 800a800:	683b      	ldr	r3, [r7, #0]
 800a802:	689b      	ldr	r3, [r3, #8]
 800a804:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800a808:	683b      	ldr	r3, [r7, #0]
 800a80a:	78db      	ldrb	r3, [r3, #3]
 800a80c:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800a80e:	430b      	orrs	r3, r1
 800a810:	4313      	orrs	r3, r2
 800a812:	68ba      	ldr	r2, [r7, #8]
 800a814:	0151      	lsls	r1, r2, #5
 800a816:	68fa      	ldr	r2, [r7, #12]
 800a818:	440a      	add	r2, r1
 800a81a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a81e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a822:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a826:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800a828:	2300      	movs	r3, #0
}
 800a82a:	4618      	mov	r0, r3
 800a82c:	3714      	adds	r7, #20
 800a82e:	46bd      	mov	sp, r7
 800a830:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a834:	4770      	bx	lr
	...

0800a838 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800a838:	b480      	push	{r7}
 800a83a:	b085      	sub	sp, #20
 800a83c:	af00      	add	r7, sp, #0
 800a83e:	6078      	str	r0, [r7, #4]
 800a840:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a846:	683b      	ldr	r3, [r7, #0]
 800a848:	781b      	ldrb	r3, [r3, #0]
 800a84a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800a84c:	683b      	ldr	r3, [r7, #0]
 800a84e:	785b      	ldrb	r3, [r3, #1]
 800a850:	2b01      	cmp	r3, #1
 800a852:	d135      	bne.n	800a8c0 <USB_DeactivateEndpoint+0x88>
  {
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800a854:	68fb      	ldr	r3, [r7, #12]
 800a856:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a85a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a85c:	683b      	ldr	r3, [r7, #0]
 800a85e:	781b      	ldrb	r3, [r3, #0]
 800a860:	f003 030f 	and.w	r3, r3, #15
 800a864:	2101      	movs	r1, #1
 800a866:	fa01 f303 	lsl.w	r3, r1, r3
 800a86a:	b29b      	uxth	r3, r3
 800a86c:	43db      	mvns	r3, r3
 800a86e:	68f9      	ldr	r1, [r7, #12]
 800a870:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a874:	4013      	ands	r3, r2
 800a876:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800a878:	68fb      	ldr	r3, [r7, #12]
 800a87a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a87e:	69da      	ldr	r2, [r3, #28]
 800a880:	683b      	ldr	r3, [r7, #0]
 800a882:	781b      	ldrb	r3, [r3, #0]
 800a884:	f003 030f 	and.w	r3, r3, #15
 800a888:	2101      	movs	r1, #1
 800a88a:	fa01 f303 	lsl.w	r3, r1, r3
 800a88e:	b29b      	uxth	r3, r3
 800a890:	43db      	mvns	r3, r3
 800a892:	68f9      	ldr	r1, [r7, #12]
 800a894:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a898:	4013      	ands	r3, r2
 800a89a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800a89c:	68bb      	ldr	r3, [r7, #8]
 800a89e:	015a      	lsls	r2, r3, #5
 800a8a0:	68fb      	ldr	r3, [r7, #12]
 800a8a2:	4413      	add	r3, r2
 800a8a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a8a8:	681a      	ldr	r2, [r3, #0]
 800a8aa:	68bb      	ldr	r3, [r7, #8]
 800a8ac:	0159      	lsls	r1, r3, #5
 800a8ae:	68fb      	ldr	r3, [r7, #12]
 800a8b0:	440b      	add	r3, r1
 800a8b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a8b6:	4619      	mov	r1, r3
 800a8b8:	4b1f      	ldr	r3, [pc, #124]	; (800a938 <USB_DeactivateEndpoint+0x100>)
 800a8ba:	4013      	ands	r3, r2
 800a8bc:	600b      	str	r3, [r1, #0]
 800a8be:	e034      	b.n	800a92a <USB_DeactivateEndpoint+0xf2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800a8c0:	68fb      	ldr	r3, [r7, #12]
 800a8c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a8c6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a8c8:	683b      	ldr	r3, [r7, #0]
 800a8ca:	781b      	ldrb	r3, [r3, #0]
 800a8cc:	f003 030f 	and.w	r3, r3, #15
 800a8d0:	2101      	movs	r1, #1
 800a8d2:	fa01 f303 	lsl.w	r3, r1, r3
 800a8d6:	041b      	lsls	r3, r3, #16
 800a8d8:	43db      	mvns	r3, r3
 800a8da:	68f9      	ldr	r1, [r7, #12]
 800a8dc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a8e0:	4013      	ands	r3, r2
 800a8e2:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800a8e4:	68fb      	ldr	r3, [r7, #12]
 800a8e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a8ea:	69da      	ldr	r2, [r3, #28]
 800a8ec:	683b      	ldr	r3, [r7, #0]
 800a8ee:	781b      	ldrb	r3, [r3, #0]
 800a8f0:	f003 030f 	and.w	r3, r3, #15
 800a8f4:	2101      	movs	r1, #1
 800a8f6:	fa01 f303 	lsl.w	r3, r1, r3
 800a8fa:	041b      	lsls	r3, r3, #16
 800a8fc:	43db      	mvns	r3, r3
 800a8fe:	68f9      	ldr	r1, [r7, #12]
 800a900:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a904:	4013      	ands	r3, r2
 800a906:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800a908:	68bb      	ldr	r3, [r7, #8]
 800a90a:	015a      	lsls	r2, r3, #5
 800a90c:	68fb      	ldr	r3, [r7, #12]
 800a90e:	4413      	add	r3, r2
 800a910:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a914:	681a      	ldr	r2, [r3, #0]
 800a916:	68bb      	ldr	r3, [r7, #8]
 800a918:	0159      	lsls	r1, r3, #5
 800a91a:	68fb      	ldr	r3, [r7, #12]
 800a91c:	440b      	add	r3, r1
 800a91e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a922:	4619      	mov	r1, r3
 800a924:	4b05      	ldr	r3, [pc, #20]	; (800a93c <USB_DeactivateEndpoint+0x104>)
 800a926:	4013      	ands	r3, r2
 800a928:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800a92a:	2300      	movs	r3, #0
}
 800a92c:	4618      	mov	r0, r3
 800a92e:	3714      	adds	r7, #20
 800a930:	46bd      	mov	sp, r7
 800a932:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a936:	4770      	bx	lr
 800a938:	ec337800 	.word	0xec337800
 800a93c:	eff37800 	.word	0xeff37800

0800a940 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800a940:	b580      	push	{r7, lr}
 800a942:	b08a      	sub	sp, #40	; 0x28
 800a944:	af02      	add	r7, sp, #8
 800a946:	60f8      	str	r0, [r7, #12]
 800a948:	60b9      	str	r1, [r7, #8]
 800a94a:	4613      	mov	r3, r2
 800a94c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a94e:	68fb      	ldr	r3, [r7, #12]
 800a950:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800a952:	68bb      	ldr	r3, [r7, #8]
 800a954:	781b      	ldrb	r3, [r3, #0]
 800a956:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800a958:	68bb      	ldr	r3, [r7, #8]
 800a95a:	785b      	ldrb	r3, [r3, #1]
 800a95c:	2b01      	cmp	r3, #1
 800a95e:	f040 815c 	bne.w	800ac1a <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800a962:	68bb      	ldr	r3, [r7, #8]
 800a964:	695b      	ldr	r3, [r3, #20]
 800a966:	2b00      	cmp	r3, #0
 800a968:	d132      	bne.n	800a9d0 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800a96a:	69bb      	ldr	r3, [r7, #24]
 800a96c:	015a      	lsls	r2, r3, #5
 800a96e:	69fb      	ldr	r3, [r7, #28]
 800a970:	4413      	add	r3, r2
 800a972:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a976:	691b      	ldr	r3, [r3, #16]
 800a978:	69ba      	ldr	r2, [r7, #24]
 800a97a:	0151      	lsls	r1, r2, #5
 800a97c:	69fa      	ldr	r2, [r7, #28]
 800a97e:	440a      	add	r2, r1
 800a980:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a984:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800a988:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800a98c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800a98e:	69bb      	ldr	r3, [r7, #24]
 800a990:	015a      	lsls	r2, r3, #5
 800a992:	69fb      	ldr	r3, [r7, #28]
 800a994:	4413      	add	r3, r2
 800a996:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a99a:	691b      	ldr	r3, [r3, #16]
 800a99c:	69ba      	ldr	r2, [r7, #24]
 800a99e:	0151      	lsls	r1, r2, #5
 800a9a0:	69fa      	ldr	r2, [r7, #28]
 800a9a2:	440a      	add	r2, r1
 800a9a4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a9a8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a9ac:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800a9ae:	69bb      	ldr	r3, [r7, #24]
 800a9b0:	015a      	lsls	r2, r3, #5
 800a9b2:	69fb      	ldr	r3, [r7, #28]
 800a9b4:	4413      	add	r3, r2
 800a9b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a9ba:	691b      	ldr	r3, [r3, #16]
 800a9bc:	69ba      	ldr	r2, [r7, #24]
 800a9be:	0151      	lsls	r1, r2, #5
 800a9c0:	69fa      	ldr	r2, [r7, #28]
 800a9c2:	440a      	add	r2, r1
 800a9c4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a9c8:	0cdb      	lsrs	r3, r3, #19
 800a9ca:	04db      	lsls	r3, r3, #19
 800a9cc:	6113      	str	r3, [r2, #16]
 800a9ce:	e074      	b.n	800aaba <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800a9d0:	69bb      	ldr	r3, [r7, #24]
 800a9d2:	015a      	lsls	r2, r3, #5
 800a9d4:	69fb      	ldr	r3, [r7, #28]
 800a9d6:	4413      	add	r3, r2
 800a9d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a9dc:	691b      	ldr	r3, [r3, #16]
 800a9de:	69ba      	ldr	r2, [r7, #24]
 800a9e0:	0151      	lsls	r1, r2, #5
 800a9e2:	69fa      	ldr	r2, [r7, #28]
 800a9e4:	440a      	add	r2, r1
 800a9e6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a9ea:	0cdb      	lsrs	r3, r3, #19
 800a9ec:	04db      	lsls	r3, r3, #19
 800a9ee:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800a9f0:	69bb      	ldr	r3, [r7, #24]
 800a9f2:	015a      	lsls	r2, r3, #5
 800a9f4:	69fb      	ldr	r3, [r7, #28]
 800a9f6:	4413      	add	r3, r2
 800a9f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a9fc:	691b      	ldr	r3, [r3, #16]
 800a9fe:	69ba      	ldr	r2, [r7, #24]
 800aa00:	0151      	lsls	r1, r2, #5
 800aa02:	69fa      	ldr	r2, [r7, #28]
 800aa04:	440a      	add	r2, r1
 800aa06:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800aa0a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800aa0e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800aa12:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800aa14:	69bb      	ldr	r3, [r7, #24]
 800aa16:	015a      	lsls	r2, r3, #5
 800aa18:	69fb      	ldr	r3, [r7, #28]
 800aa1a:	4413      	add	r3, r2
 800aa1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aa20:	691a      	ldr	r2, [r3, #16]
 800aa22:	68bb      	ldr	r3, [r7, #8]
 800aa24:	6959      	ldr	r1, [r3, #20]
 800aa26:	68bb      	ldr	r3, [r7, #8]
 800aa28:	689b      	ldr	r3, [r3, #8]
 800aa2a:	440b      	add	r3, r1
 800aa2c:	1e59      	subs	r1, r3, #1
 800aa2e:	68bb      	ldr	r3, [r7, #8]
 800aa30:	689b      	ldr	r3, [r3, #8]
 800aa32:	fbb1 f3f3 	udiv	r3, r1, r3
 800aa36:	04d9      	lsls	r1, r3, #19
 800aa38:	4b9d      	ldr	r3, [pc, #628]	; (800acb0 <USB_EPStartXfer+0x370>)
 800aa3a:	400b      	ands	r3, r1
 800aa3c:	69b9      	ldr	r1, [r7, #24]
 800aa3e:	0148      	lsls	r0, r1, #5
 800aa40:	69f9      	ldr	r1, [r7, #28]
 800aa42:	4401      	add	r1, r0
 800aa44:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800aa48:	4313      	orrs	r3, r2
 800aa4a:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800aa4c:	69bb      	ldr	r3, [r7, #24]
 800aa4e:	015a      	lsls	r2, r3, #5
 800aa50:	69fb      	ldr	r3, [r7, #28]
 800aa52:	4413      	add	r3, r2
 800aa54:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aa58:	691a      	ldr	r2, [r3, #16]
 800aa5a:	68bb      	ldr	r3, [r7, #8]
 800aa5c:	695b      	ldr	r3, [r3, #20]
 800aa5e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800aa62:	69b9      	ldr	r1, [r7, #24]
 800aa64:	0148      	lsls	r0, r1, #5
 800aa66:	69f9      	ldr	r1, [r7, #28]
 800aa68:	4401      	add	r1, r0
 800aa6a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800aa6e:	4313      	orrs	r3, r2
 800aa70:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800aa72:	68bb      	ldr	r3, [r7, #8]
 800aa74:	78db      	ldrb	r3, [r3, #3]
 800aa76:	2b01      	cmp	r3, #1
 800aa78:	d11f      	bne.n	800aaba <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800aa7a:	69bb      	ldr	r3, [r7, #24]
 800aa7c:	015a      	lsls	r2, r3, #5
 800aa7e:	69fb      	ldr	r3, [r7, #28]
 800aa80:	4413      	add	r3, r2
 800aa82:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aa86:	691b      	ldr	r3, [r3, #16]
 800aa88:	69ba      	ldr	r2, [r7, #24]
 800aa8a:	0151      	lsls	r1, r2, #5
 800aa8c:	69fa      	ldr	r2, [r7, #28]
 800aa8e:	440a      	add	r2, r1
 800aa90:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800aa94:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800aa98:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800aa9a:	69bb      	ldr	r3, [r7, #24]
 800aa9c:	015a      	lsls	r2, r3, #5
 800aa9e:	69fb      	ldr	r3, [r7, #28]
 800aaa0:	4413      	add	r3, r2
 800aaa2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aaa6:	691b      	ldr	r3, [r3, #16]
 800aaa8:	69ba      	ldr	r2, [r7, #24]
 800aaaa:	0151      	lsls	r1, r2, #5
 800aaac:	69fa      	ldr	r2, [r7, #28]
 800aaae:	440a      	add	r2, r1
 800aab0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800aab4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800aab8:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800aaba:	79fb      	ldrb	r3, [r7, #7]
 800aabc:	2b01      	cmp	r3, #1
 800aabe:	d14b      	bne.n	800ab58 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800aac0:	68bb      	ldr	r3, [r7, #8]
 800aac2:	691b      	ldr	r3, [r3, #16]
 800aac4:	2b00      	cmp	r3, #0
 800aac6:	d009      	beq.n	800aadc <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800aac8:	69bb      	ldr	r3, [r7, #24]
 800aaca:	015a      	lsls	r2, r3, #5
 800aacc:	69fb      	ldr	r3, [r7, #28]
 800aace:	4413      	add	r3, r2
 800aad0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aad4:	461a      	mov	r2, r3
 800aad6:	68bb      	ldr	r3, [r7, #8]
 800aad8:	691b      	ldr	r3, [r3, #16]
 800aada:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800aadc:	68bb      	ldr	r3, [r7, #8]
 800aade:	78db      	ldrb	r3, [r3, #3]
 800aae0:	2b01      	cmp	r3, #1
 800aae2:	d128      	bne.n	800ab36 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800aae4:	69fb      	ldr	r3, [r7, #28]
 800aae6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800aaea:	689b      	ldr	r3, [r3, #8]
 800aaec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800aaf0:	2b00      	cmp	r3, #0
 800aaf2:	d110      	bne.n	800ab16 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800aaf4:	69bb      	ldr	r3, [r7, #24]
 800aaf6:	015a      	lsls	r2, r3, #5
 800aaf8:	69fb      	ldr	r3, [r7, #28]
 800aafa:	4413      	add	r3, r2
 800aafc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ab00:	681b      	ldr	r3, [r3, #0]
 800ab02:	69ba      	ldr	r2, [r7, #24]
 800ab04:	0151      	lsls	r1, r2, #5
 800ab06:	69fa      	ldr	r2, [r7, #28]
 800ab08:	440a      	add	r2, r1
 800ab0a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ab0e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800ab12:	6013      	str	r3, [r2, #0]
 800ab14:	e00f      	b.n	800ab36 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800ab16:	69bb      	ldr	r3, [r7, #24]
 800ab18:	015a      	lsls	r2, r3, #5
 800ab1a:	69fb      	ldr	r3, [r7, #28]
 800ab1c:	4413      	add	r3, r2
 800ab1e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ab22:	681b      	ldr	r3, [r3, #0]
 800ab24:	69ba      	ldr	r2, [r7, #24]
 800ab26:	0151      	lsls	r1, r2, #5
 800ab28:	69fa      	ldr	r2, [r7, #28]
 800ab2a:	440a      	add	r2, r1
 800ab2c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ab30:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ab34:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800ab36:	69bb      	ldr	r3, [r7, #24]
 800ab38:	015a      	lsls	r2, r3, #5
 800ab3a:	69fb      	ldr	r3, [r7, #28]
 800ab3c:	4413      	add	r3, r2
 800ab3e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ab42:	681b      	ldr	r3, [r3, #0]
 800ab44:	69ba      	ldr	r2, [r7, #24]
 800ab46:	0151      	lsls	r1, r2, #5
 800ab48:	69fa      	ldr	r2, [r7, #28]
 800ab4a:	440a      	add	r2, r1
 800ab4c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ab50:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800ab54:	6013      	str	r3, [r2, #0]
 800ab56:	e12f      	b.n	800adb8 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800ab58:	69bb      	ldr	r3, [r7, #24]
 800ab5a:	015a      	lsls	r2, r3, #5
 800ab5c:	69fb      	ldr	r3, [r7, #28]
 800ab5e:	4413      	add	r3, r2
 800ab60:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ab64:	681b      	ldr	r3, [r3, #0]
 800ab66:	69ba      	ldr	r2, [r7, #24]
 800ab68:	0151      	lsls	r1, r2, #5
 800ab6a:	69fa      	ldr	r2, [r7, #28]
 800ab6c:	440a      	add	r2, r1
 800ab6e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ab72:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800ab76:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800ab78:	68bb      	ldr	r3, [r7, #8]
 800ab7a:	78db      	ldrb	r3, [r3, #3]
 800ab7c:	2b01      	cmp	r3, #1
 800ab7e:	d015      	beq.n	800abac <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800ab80:	68bb      	ldr	r3, [r7, #8]
 800ab82:	695b      	ldr	r3, [r3, #20]
 800ab84:	2b00      	cmp	r3, #0
 800ab86:	f000 8117 	beq.w	800adb8 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800ab8a:	69fb      	ldr	r3, [r7, #28]
 800ab8c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ab90:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ab92:	68bb      	ldr	r3, [r7, #8]
 800ab94:	781b      	ldrb	r3, [r3, #0]
 800ab96:	f003 030f 	and.w	r3, r3, #15
 800ab9a:	2101      	movs	r1, #1
 800ab9c:	fa01 f303 	lsl.w	r3, r1, r3
 800aba0:	69f9      	ldr	r1, [r7, #28]
 800aba2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800aba6:	4313      	orrs	r3, r2
 800aba8:	634b      	str	r3, [r1, #52]	; 0x34
 800abaa:	e105      	b.n	800adb8 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800abac:	69fb      	ldr	r3, [r7, #28]
 800abae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800abb2:	689b      	ldr	r3, [r3, #8]
 800abb4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800abb8:	2b00      	cmp	r3, #0
 800abba:	d110      	bne.n	800abde <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800abbc:	69bb      	ldr	r3, [r7, #24]
 800abbe:	015a      	lsls	r2, r3, #5
 800abc0:	69fb      	ldr	r3, [r7, #28]
 800abc2:	4413      	add	r3, r2
 800abc4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800abc8:	681b      	ldr	r3, [r3, #0]
 800abca:	69ba      	ldr	r2, [r7, #24]
 800abcc:	0151      	lsls	r1, r2, #5
 800abce:	69fa      	ldr	r2, [r7, #28]
 800abd0:	440a      	add	r2, r1
 800abd2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800abd6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800abda:	6013      	str	r3, [r2, #0]
 800abdc:	e00f      	b.n	800abfe <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800abde:	69bb      	ldr	r3, [r7, #24]
 800abe0:	015a      	lsls	r2, r3, #5
 800abe2:	69fb      	ldr	r3, [r7, #28]
 800abe4:	4413      	add	r3, r2
 800abe6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800abea:	681b      	ldr	r3, [r3, #0]
 800abec:	69ba      	ldr	r2, [r7, #24]
 800abee:	0151      	lsls	r1, r2, #5
 800abf0:	69fa      	ldr	r2, [r7, #28]
 800abf2:	440a      	add	r2, r1
 800abf4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800abf8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800abfc:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800abfe:	68bb      	ldr	r3, [r7, #8]
 800ac00:	68d9      	ldr	r1, [r3, #12]
 800ac02:	68bb      	ldr	r3, [r7, #8]
 800ac04:	781a      	ldrb	r2, [r3, #0]
 800ac06:	68bb      	ldr	r3, [r7, #8]
 800ac08:	695b      	ldr	r3, [r3, #20]
 800ac0a:	b298      	uxth	r0, r3
 800ac0c:	79fb      	ldrb	r3, [r7, #7]
 800ac0e:	9300      	str	r3, [sp, #0]
 800ac10:	4603      	mov	r3, r0
 800ac12:	68f8      	ldr	r0, [r7, #12]
 800ac14:	f000 fa2b 	bl	800b06e <USB_WritePacket>
 800ac18:	e0ce      	b.n	800adb8 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800ac1a:	69bb      	ldr	r3, [r7, #24]
 800ac1c:	015a      	lsls	r2, r3, #5
 800ac1e:	69fb      	ldr	r3, [r7, #28]
 800ac20:	4413      	add	r3, r2
 800ac22:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ac26:	691b      	ldr	r3, [r3, #16]
 800ac28:	69ba      	ldr	r2, [r7, #24]
 800ac2a:	0151      	lsls	r1, r2, #5
 800ac2c:	69fa      	ldr	r2, [r7, #28]
 800ac2e:	440a      	add	r2, r1
 800ac30:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ac34:	0cdb      	lsrs	r3, r3, #19
 800ac36:	04db      	lsls	r3, r3, #19
 800ac38:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800ac3a:	69bb      	ldr	r3, [r7, #24]
 800ac3c:	015a      	lsls	r2, r3, #5
 800ac3e:	69fb      	ldr	r3, [r7, #28]
 800ac40:	4413      	add	r3, r2
 800ac42:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ac46:	691b      	ldr	r3, [r3, #16]
 800ac48:	69ba      	ldr	r2, [r7, #24]
 800ac4a:	0151      	lsls	r1, r2, #5
 800ac4c:	69fa      	ldr	r2, [r7, #28]
 800ac4e:	440a      	add	r2, r1
 800ac50:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ac54:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800ac58:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800ac5c:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800ac5e:	68bb      	ldr	r3, [r7, #8]
 800ac60:	695b      	ldr	r3, [r3, #20]
 800ac62:	2b00      	cmp	r3, #0
 800ac64:	d126      	bne.n	800acb4 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800ac66:	69bb      	ldr	r3, [r7, #24]
 800ac68:	015a      	lsls	r2, r3, #5
 800ac6a:	69fb      	ldr	r3, [r7, #28]
 800ac6c:	4413      	add	r3, r2
 800ac6e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ac72:	691a      	ldr	r2, [r3, #16]
 800ac74:	68bb      	ldr	r3, [r7, #8]
 800ac76:	689b      	ldr	r3, [r3, #8]
 800ac78:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800ac7c:	69b9      	ldr	r1, [r7, #24]
 800ac7e:	0148      	lsls	r0, r1, #5
 800ac80:	69f9      	ldr	r1, [r7, #28]
 800ac82:	4401      	add	r1, r0
 800ac84:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800ac88:	4313      	orrs	r3, r2
 800ac8a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800ac8c:	69bb      	ldr	r3, [r7, #24]
 800ac8e:	015a      	lsls	r2, r3, #5
 800ac90:	69fb      	ldr	r3, [r7, #28]
 800ac92:	4413      	add	r3, r2
 800ac94:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ac98:	691b      	ldr	r3, [r3, #16]
 800ac9a:	69ba      	ldr	r2, [r7, #24]
 800ac9c:	0151      	lsls	r1, r2, #5
 800ac9e:	69fa      	ldr	r2, [r7, #28]
 800aca0:	440a      	add	r2, r1
 800aca2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800aca6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800acaa:	6113      	str	r3, [r2, #16]
 800acac:	e036      	b.n	800ad1c <USB_EPStartXfer+0x3dc>
 800acae:	bf00      	nop
 800acb0:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800acb4:	68bb      	ldr	r3, [r7, #8]
 800acb6:	695a      	ldr	r2, [r3, #20]
 800acb8:	68bb      	ldr	r3, [r7, #8]
 800acba:	689b      	ldr	r3, [r3, #8]
 800acbc:	4413      	add	r3, r2
 800acbe:	1e5a      	subs	r2, r3, #1
 800acc0:	68bb      	ldr	r3, [r7, #8]
 800acc2:	689b      	ldr	r3, [r3, #8]
 800acc4:	fbb2 f3f3 	udiv	r3, r2, r3
 800acc8:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800acca:	69bb      	ldr	r3, [r7, #24]
 800accc:	015a      	lsls	r2, r3, #5
 800acce:	69fb      	ldr	r3, [r7, #28]
 800acd0:	4413      	add	r3, r2
 800acd2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800acd6:	691a      	ldr	r2, [r3, #16]
 800acd8:	8afb      	ldrh	r3, [r7, #22]
 800acda:	04d9      	lsls	r1, r3, #19
 800acdc:	4b39      	ldr	r3, [pc, #228]	; (800adc4 <USB_EPStartXfer+0x484>)
 800acde:	400b      	ands	r3, r1
 800ace0:	69b9      	ldr	r1, [r7, #24]
 800ace2:	0148      	lsls	r0, r1, #5
 800ace4:	69f9      	ldr	r1, [r7, #28]
 800ace6:	4401      	add	r1, r0
 800ace8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800acec:	4313      	orrs	r3, r2
 800acee:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 800acf0:	69bb      	ldr	r3, [r7, #24]
 800acf2:	015a      	lsls	r2, r3, #5
 800acf4:	69fb      	ldr	r3, [r7, #28]
 800acf6:	4413      	add	r3, r2
 800acf8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800acfc:	691a      	ldr	r2, [r3, #16]
 800acfe:	68bb      	ldr	r3, [r7, #8]
 800ad00:	689b      	ldr	r3, [r3, #8]
 800ad02:	8af9      	ldrh	r1, [r7, #22]
 800ad04:	fb01 f303 	mul.w	r3, r1, r3
 800ad08:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800ad0c:	69b9      	ldr	r1, [r7, #24]
 800ad0e:	0148      	lsls	r0, r1, #5
 800ad10:	69f9      	ldr	r1, [r7, #28]
 800ad12:	4401      	add	r1, r0
 800ad14:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800ad18:	4313      	orrs	r3, r2
 800ad1a:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800ad1c:	79fb      	ldrb	r3, [r7, #7]
 800ad1e:	2b01      	cmp	r3, #1
 800ad20:	d10d      	bne.n	800ad3e <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800ad22:	68bb      	ldr	r3, [r7, #8]
 800ad24:	68db      	ldr	r3, [r3, #12]
 800ad26:	2b00      	cmp	r3, #0
 800ad28:	d009      	beq.n	800ad3e <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800ad2a:	68bb      	ldr	r3, [r7, #8]
 800ad2c:	68d9      	ldr	r1, [r3, #12]
 800ad2e:	69bb      	ldr	r3, [r7, #24]
 800ad30:	015a      	lsls	r2, r3, #5
 800ad32:	69fb      	ldr	r3, [r7, #28]
 800ad34:	4413      	add	r3, r2
 800ad36:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ad3a:	460a      	mov	r2, r1
 800ad3c:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800ad3e:	68bb      	ldr	r3, [r7, #8]
 800ad40:	78db      	ldrb	r3, [r3, #3]
 800ad42:	2b01      	cmp	r3, #1
 800ad44:	d128      	bne.n	800ad98 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800ad46:	69fb      	ldr	r3, [r7, #28]
 800ad48:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ad4c:	689b      	ldr	r3, [r3, #8]
 800ad4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ad52:	2b00      	cmp	r3, #0
 800ad54:	d110      	bne.n	800ad78 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800ad56:	69bb      	ldr	r3, [r7, #24]
 800ad58:	015a      	lsls	r2, r3, #5
 800ad5a:	69fb      	ldr	r3, [r7, #28]
 800ad5c:	4413      	add	r3, r2
 800ad5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ad62:	681b      	ldr	r3, [r3, #0]
 800ad64:	69ba      	ldr	r2, [r7, #24]
 800ad66:	0151      	lsls	r1, r2, #5
 800ad68:	69fa      	ldr	r2, [r7, #28]
 800ad6a:	440a      	add	r2, r1
 800ad6c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ad70:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800ad74:	6013      	str	r3, [r2, #0]
 800ad76:	e00f      	b.n	800ad98 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800ad78:	69bb      	ldr	r3, [r7, #24]
 800ad7a:	015a      	lsls	r2, r3, #5
 800ad7c:	69fb      	ldr	r3, [r7, #28]
 800ad7e:	4413      	add	r3, r2
 800ad80:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ad84:	681b      	ldr	r3, [r3, #0]
 800ad86:	69ba      	ldr	r2, [r7, #24]
 800ad88:	0151      	lsls	r1, r2, #5
 800ad8a:	69fa      	ldr	r2, [r7, #28]
 800ad8c:	440a      	add	r2, r1
 800ad8e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ad92:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ad96:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800ad98:	69bb      	ldr	r3, [r7, #24]
 800ad9a:	015a      	lsls	r2, r3, #5
 800ad9c:	69fb      	ldr	r3, [r7, #28]
 800ad9e:	4413      	add	r3, r2
 800ada0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ada4:	681b      	ldr	r3, [r3, #0]
 800ada6:	69ba      	ldr	r2, [r7, #24]
 800ada8:	0151      	lsls	r1, r2, #5
 800adaa:	69fa      	ldr	r2, [r7, #28]
 800adac:	440a      	add	r2, r1
 800adae:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800adb2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800adb6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800adb8:	2300      	movs	r3, #0
}
 800adba:	4618      	mov	r0, r3
 800adbc:	3720      	adds	r7, #32
 800adbe:	46bd      	mov	sp, r7
 800adc0:	bd80      	pop	{r7, pc}
 800adc2:	bf00      	nop
 800adc4:	1ff80000 	.word	0x1ff80000

0800adc8 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800adc8:	b480      	push	{r7}
 800adca:	b087      	sub	sp, #28
 800adcc:	af00      	add	r7, sp, #0
 800adce:	60f8      	str	r0, [r7, #12]
 800add0:	60b9      	str	r1, [r7, #8]
 800add2:	4613      	mov	r3, r2
 800add4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800add6:	68fb      	ldr	r3, [r7, #12]
 800add8:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800adda:	68bb      	ldr	r3, [r7, #8]
 800addc:	781b      	ldrb	r3, [r3, #0]
 800adde:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800ade0:	68bb      	ldr	r3, [r7, #8]
 800ade2:	785b      	ldrb	r3, [r3, #1]
 800ade4:	2b01      	cmp	r3, #1
 800ade6:	f040 80cd 	bne.w	800af84 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800adea:	68bb      	ldr	r3, [r7, #8]
 800adec:	695b      	ldr	r3, [r3, #20]
 800adee:	2b00      	cmp	r3, #0
 800adf0:	d132      	bne.n	800ae58 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800adf2:	693b      	ldr	r3, [r7, #16]
 800adf4:	015a      	lsls	r2, r3, #5
 800adf6:	697b      	ldr	r3, [r7, #20]
 800adf8:	4413      	add	r3, r2
 800adfa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800adfe:	691b      	ldr	r3, [r3, #16]
 800ae00:	693a      	ldr	r2, [r7, #16]
 800ae02:	0151      	lsls	r1, r2, #5
 800ae04:	697a      	ldr	r2, [r7, #20]
 800ae06:	440a      	add	r2, r1
 800ae08:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ae0c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800ae10:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800ae14:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800ae16:	693b      	ldr	r3, [r7, #16]
 800ae18:	015a      	lsls	r2, r3, #5
 800ae1a:	697b      	ldr	r3, [r7, #20]
 800ae1c:	4413      	add	r3, r2
 800ae1e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ae22:	691b      	ldr	r3, [r3, #16]
 800ae24:	693a      	ldr	r2, [r7, #16]
 800ae26:	0151      	lsls	r1, r2, #5
 800ae28:	697a      	ldr	r2, [r7, #20]
 800ae2a:	440a      	add	r2, r1
 800ae2c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ae30:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800ae34:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800ae36:	693b      	ldr	r3, [r7, #16]
 800ae38:	015a      	lsls	r2, r3, #5
 800ae3a:	697b      	ldr	r3, [r7, #20]
 800ae3c:	4413      	add	r3, r2
 800ae3e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ae42:	691b      	ldr	r3, [r3, #16]
 800ae44:	693a      	ldr	r2, [r7, #16]
 800ae46:	0151      	lsls	r1, r2, #5
 800ae48:	697a      	ldr	r2, [r7, #20]
 800ae4a:	440a      	add	r2, r1
 800ae4c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ae50:	0cdb      	lsrs	r3, r3, #19
 800ae52:	04db      	lsls	r3, r3, #19
 800ae54:	6113      	str	r3, [r2, #16]
 800ae56:	e04e      	b.n	800aef6 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800ae58:	693b      	ldr	r3, [r7, #16]
 800ae5a:	015a      	lsls	r2, r3, #5
 800ae5c:	697b      	ldr	r3, [r7, #20]
 800ae5e:	4413      	add	r3, r2
 800ae60:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ae64:	691b      	ldr	r3, [r3, #16]
 800ae66:	693a      	ldr	r2, [r7, #16]
 800ae68:	0151      	lsls	r1, r2, #5
 800ae6a:	697a      	ldr	r2, [r7, #20]
 800ae6c:	440a      	add	r2, r1
 800ae6e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ae72:	0cdb      	lsrs	r3, r3, #19
 800ae74:	04db      	lsls	r3, r3, #19
 800ae76:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800ae78:	693b      	ldr	r3, [r7, #16]
 800ae7a:	015a      	lsls	r2, r3, #5
 800ae7c:	697b      	ldr	r3, [r7, #20]
 800ae7e:	4413      	add	r3, r2
 800ae80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ae84:	691b      	ldr	r3, [r3, #16]
 800ae86:	693a      	ldr	r2, [r7, #16]
 800ae88:	0151      	lsls	r1, r2, #5
 800ae8a:	697a      	ldr	r2, [r7, #20]
 800ae8c:	440a      	add	r2, r1
 800ae8e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ae92:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800ae96:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800ae9a:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 800ae9c:	68bb      	ldr	r3, [r7, #8]
 800ae9e:	695a      	ldr	r2, [r3, #20]
 800aea0:	68bb      	ldr	r3, [r7, #8]
 800aea2:	689b      	ldr	r3, [r3, #8]
 800aea4:	429a      	cmp	r2, r3
 800aea6:	d903      	bls.n	800aeb0 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800aea8:	68bb      	ldr	r3, [r7, #8]
 800aeaa:	689a      	ldr	r2, [r3, #8]
 800aeac:	68bb      	ldr	r3, [r7, #8]
 800aeae:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800aeb0:	693b      	ldr	r3, [r7, #16]
 800aeb2:	015a      	lsls	r2, r3, #5
 800aeb4:	697b      	ldr	r3, [r7, #20]
 800aeb6:	4413      	add	r3, r2
 800aeb8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aebc:	691b      	ldr	r3, [r3, #16]
 800aebe:	693a      	ldr	r2, [r7, #16]
 800aec0:	0151      	lsls	r1, r2, #5
 800aec2:	697a      	ldr	r2, [r7, #20]
 800aec4:	440a      	add	r2, r1
 800aec6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800aeca:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800aece:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800aed0:	693b      	ldr	r3, [r7, #16]
 800aed2:	015a      	lsls	r2, r3, #5
 800aed4:	697b      	ldr	r3, [r7, #20]
 800aed6:	4413      	add	r3, r2
 800aed8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aedc:	691a      	ldr	r2, [r3, #16]
 800aede:	68bb      	ldr	r3, [r7, #8]
 800aee0:	695b      	ldr	r3, [r3, #20]
 800aee2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800aee6:	6939      	ldr	r1, [r7, #16]
 800aee8:	0148      	lsls	r0, r1, #5
 800aeea:	6979      	ldr	r1, [r7, #20]
 800aeec:	4401      	add	r1, r0
 800aeee:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800aef2:	4313      	orrs	r3, r2
 800aef4:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800aef6:	79fb      	ldrb	r3, [r7, #7]
 800aef8:	2b01      	cmp	r3, #1
 800aefa:	d11e      	bne.n	800af3a <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800aefc:	68bb      	ldr	r3, [r7, #8]
 800aefe:	691b      	ldr	r3, [r3, #16]
 800af00:	2b00      	cmp	r3, #0
 800af02:	d009      	beq.n	800af18 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800af04:	693b      	ldr	r3, [r7, #16]
 800af06:	015a      	lsls	r2, r3, #5
 800af08:	697b      	ldr	r3, [r7, #20]
 800af0a:	4413      	add	r3, r2
 800af0c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800af10:	461a      	mov	r2, r3
 800af12:	68bb      	ldr	r3, [r7, #8]
 800af14:	691b      	ldr	r3, [r3, #16]
 800af16:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800af18:	693b      	ldr	r3, [r7, #16]
 800af1a:	015a      	lsls	r2, r3, #5
 800af1c:	697b      	ldr	r3, [r7, #20]
 800af1e:	4413      	add	r3, r2
 800af20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800af24:	681b      	ldr	r3, [r3, #0]
 800af26:	693a      	ldr	r2, [r7, #16]
 800af28:	0151      	lsls	r1, r2, #5
 800af2a:	697a      	ldr	r2, [r7, #20]
 800af2c:	440a      	add	r2, r1
 800af2e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800af32:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800af36:	6013      	str	r3, [r2, #0]
 800af38:	e092      	b.n	800b060 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800af3a:	693b      	ldr	r3, [r7, #16]
 800af3c:	015a      	lsls	r2, r3, #5
 800af3e:	697b      	ldr	r3, [r7, #20]
 800af40:	4413      	add	r3, r2
 800af42:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800af46:	681b      	ldr	r3, [r3, #0]
 800af48:	693a      	ldr	r2, [r7, #16]
 800af4a:	0151      	lsls	r1, r2, #5
 800af4c:	697a      	ldr	r2, [r7, #20]
 800af4e:	440a      	add	r2, r1
 800af50:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800af54:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800af58:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800af5a:	68bb      	ldr	r3, [r7, #8]
 800af5c:	695b      	ldr	r3, [r3, #20]
 800af5e:	2b00      	cmp	r3, #0
 800af60:	d07e      	beq.n	800b060 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800af62:	697b      	ldr	r3, [r7, #20]
 800af64:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800af68:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800af6a:	68bb      	ldr	r3, [r7, #8]
 800af6c:	781b      	ldrb	r3, [r3, #0]
 800af6e:	f003 030f 	and.w	r3, r3, #15
 800af72:	2101      	movs	r1, #1
 800af74:	fa01 f303 	lsl.w	r3, r1, r3
 800af78:	6979      	ldr	r1, [r7, #20]
 800af7a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800af7e:	4313      	orrs	r3, r2
 800af80:	634b      	str	r3, [r1, #52]	; 0x34
 800af82:	e06d      	b.n	800b060 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800af84:	693b      	ldr	r3, [r7, #16]
 800af86:	015a      	lsls	r2, r3, #5
 800af88:	697b      	ldr	r3, [r7, #20]
 800af8a:	4413      	add	r3, r2
 800af8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800af90:	691b      	ldr	r3, [r3, #16]
 800af92:	693a      	ldr	r2, [r7, #16]
 800af94:	0151      	lsls	r1, r2, #5
 800af96:	697a      	ldr	r2, [r7, #20]
 800af98:	440a      	add	r2, r1
 800af9a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800af9e:	0cdb      	lsrs	r3, r3, #19
 800afa0:	04db      	lsls	r3, r3, #19
 800afa2:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800afa4:	693b      	ldr	r3, [r7, #16]
 800afa6:	015a      	lsls	r2, r3, #5
 800afa8:	697b      	ldr	r3, [r7, #20]
 800afaa:	4413      	add	r3, r2
 800afac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800afb0:	691b      	ldr	r3, [r3, #16]
 800afb2:	693a      	ldr	r2, [r7, #16]
 800afb4:	0151      	lsls	r1, r2, #5
 800afb6:	697a      	ldr	r2, [r7, #20]
 800afb8:	440a      	add	r2, r1
 800afba:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800afbe:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800afc2:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800afc6:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800afc8:	68bb      	ldr	r3, [r7, #8]
 800afca:	695b      	ldr	r3, [r3, #20]
 800afcc:	2b00      	cmp	r3, #0
 800afce:	d003      	beq.n	800afd8 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 800afd0:	68bb      	ldr	r3, [r7, #8]
 800afd2:	689a      	ldr	r2, [r3, #8]
 800afd4:	68bb      	ldr	r3, [r7, #8]
 800afd6:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800afd8:	693b      	ldr	r3, [r7, #16]
 800afda:	015a      	lsls	r2, r3, #5
 800afdc:	697b      	ldr	r3, [r7, #20]
 800afde:	4413      	add	r3, r2
 800afe0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800afe4:	691b      	ldr	r3, [r3, #16]
 800afe6:	693a      	ldr	r2, [r7, #16]
 800afe8:	0151      	lsls	r1, r2, #5
 800afea:	697a      	ldr	r2, [r7, #20]
 800afec:	440a      	add	r2, r1
 800afee:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800aff2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800aff6:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 800aff8:	693b      	ldr	r3, [r7, #16]
 800affa:	015a      	lsls	r2, r3, #5
 800affc:	697b      	ldr	r3, [r7, #20]
 800affe:	4413      	add	r3, r2
 800b000:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b004:	691a      	ldr	r2, [r3, #16]
 800b006:	68bb      	ldr	r3, [r7, #8]
 800b008:	689b      	ldr	r3, [r3, #8]
 800b00a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b00e:	6939      	ldr	r1, [r7, #16]
 800b010:	0148      	lsls	r0, r1, #5
 800b012:	6979      	ldr	r1, [r7, #20]
 800b014:	4401      	add	r1, r0
 800b016:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800b01a:	4313      	orrs	r3, r2
 800b01c:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800b01e:	79fb      	ldrb	r3, [r7, #7]
 800b020:	2b01      	cmp	r3, #1
 800b022:	d10d      	bne.n	800b040 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800b024:	68bb      	ldr	r3, [r7, #8]
 800b026:	68db      	ldr	r3, [r3, #12]
 800b028:	2b00      	cmp	r3, #0
 800b02a:	d009      	beq.n	800b040 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800b02c:	68bb      	ldr	r3, [r7, #8]
 800b02e:	68d9      	ldr	r1, [r3, #12]
 800b030:	693b      	ldr	r3, [r7, #16]
 800b032:	015a      	lsls	r2, r3, #5
 800b034:	697b      	ldr	r3, [r7, #20]
 800b036:	4413      	add	r3, r2
 800b038:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b03c:	460a      	mov	r2, r1
 800b03e:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800b040:	693b      	ldr	r3, [r7, #16]
 800b042:	015a      	lsls	r2, r3, #5
 800b044:	697b      	ldr	r3, [r7, #20]
 800b046:	4413      	add	r3, r2
 800b048:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b04c:	681b      	ldr	r3, [r3, #0]
 800b04e:	693a      	ldr	r2, [r7, #16]
 800b050:	0151      	lsls	r1, r2, #5
 800b052:	697a      	ldr	r2, [r7, #20]
 800b054:	440a      	add	r2, r1
 800b056:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b05a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800b05e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800b060:	2300      	movs	r3, #0
}
 800b062:	4618      	mov	r0, r3
 800b064:	371c      	adds	r7, #28
 800b066:	46bd      	mov	sp, r7
 800b068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b06c:	4770      	bx	lr

0800b06e <USB_WritePacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800b06e:	b480      	push	{r7}
 800b070:	b089      	sub	sp, #36	; 0x24
 800b072:	af00      	add	r7, sp, #0
 800b074:	60f8      	str	r0, [r7, #12]
 800b076:	60b9      	str	r1, [r7, #8]
 800b078:	4611      	mov	r1, r2
 800b07a:	461a      	mov	r2, r3
 800b07c:	460b      	mov	r3, r1
 800b07e:	71fb      	strb	r3, [r7, #7]
 800b080:	4613      	mov	r3, r2
 800b082:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b084:	68fb      	ldr	r3, [r7, #12]
 800b086:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 800b088:	68bb      	ldr	r3, [r7, #8]
 800b08a:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 800b08c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800b090:	2b00      	cmp	r3, #0
 800b092:	d11a      	bne.n	800b0ca <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800b094:	88bb      	ldrh	r3, [r7, #4]
 800b096:	3303      	adds	r3, #3
 800b098:	089b      	lsrs	r3, r3, #2
 800b09a:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800b09c:	2300      	movs	r3, #0
 800b09e:	61bb      	str	r3, [r7, #24]
 800b0a0:	e00f      	b.n	800b0c2 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800b0a2:	79fb      	ldrb	r3, [r7, #7]
 800b0a4:	031a      	lsls	r2, r3, #12
 800b0a6:	697b      	ldr	r3, [r7, #20]
 800b0a8:	4413      	add	r3, r2
 800b0aa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b0ae:	461a      	mov	r2, r3
 800b0b0:	69fb      	ldr	r3, [r7, #28]
 800b0b2:	681b      	ldr	r3, [r3, #0]
 800b0b4:	6013      	str	r3, [r2, #0]
      pSrc++;
 800b0b6:	69fb      	ldr	r3, [r7, #28]
 800b0b8:	3304      	adds	r3, #4
 800b0ba:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800b0bc:	69bb      	ldr	r3, [r7, #24]
 800b0be:	3301      	adds	r3, #1
 800b0c0:	61bb      	str	r3, [r7, #24]
 800b0c2:	69ba      	ldr	r2, [r7, #24]
 800b0c4:	693b      	ldr	r3, [r7, #16]
 800b0c6:	429a      	cmp	r2, r3
 800b0c8:	d3eb      	bcc.n	800b0a2 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800b0ca:	2300      	movs	r3, #0
}
 800b0cc:	4618      	mov	r0, r3
 800b0ce:	3724      	adds	r7, #36	; 0x24
 800b0d0:	46bd      	mov	sp, r7
 800b0d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0d6:	4770      	bx	lr

0800b0d8 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800b0d8:	b480      	push	{r7}
 800b0da:	b089      	sub	sp, #36	; 0x24
 800b0dc:	af00      	add	r7, sp, #0
 800b0de:	60f8      	str	r0, [r7, #12]
 800b0e0:	60b9      	str	r1, [r7, #8]
 800b0e2:	4613      	mov	r3, r2
 800b0e4:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b0e6:	68fb      	ldr	r3, [r7, #12]
 800b0e8:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 800b0ea:	68bb      	ldr	r3, [r7, #8]
 800b0ec:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 800b0ee:	88fb      	ldrh	r3, [r7, #6]
 800b0f0:	3303      	adds	r3, #3
 800b0f2:	089b      	lsrs	r3, r3, #2
 800b0f4:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 800b0f6:	2300      	movs	r3, #0
 800b0f8:	61bb      	str	r3, [r7, #24]
 800b0fa:	e00b      	b.n	800b114 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800b0fc:	697b      	ldr	r3, [r7, #20]
 800b0fe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b102:	681a      	ldr	r2, [r3, #0]
 800b104:	69fb      	ldr	r3, [r7, #28]
 800b106:	601a      	str	r2, [r3, #0]
    pDest++;
 800b108:	69fb      	ldr	r3, [r7, #28]
 800b10a:	3304      	adds	r3, #4
 800b10c:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800b10e:	69bb      	ldr	r3, [r7, #24]
 800b110:	3301      	adds	r3, #1
 800b112:	61bb      	str	r3, [r7, #24]
 800b114:	69ba      	ldr	r2, [r7, #24]
 800b116:	693b      	ldr	r3, [r7, #16]
 800b118:	429a      	cmp	r2, r3
 800b11a:	d3ef      	bcc.n	800b0fc <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 800b11c:	69fb      	ldr	r3, [r7, #28]
}
 800b11e:	4618      	mov	r0, r3
 800b120:	3724      	adds	r7, #36	; 0x24
 800b122:	46bd      	mov	sp, r7
 800b124:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b128:	4770      	bx	lr

0800b12a <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800b12a:	b480      	push	{r7}
 800b12c:	b085      	sub	sp, #20
 800b12e:	af00      	add	r7, sp, #0
 800b130:	6078      	str	r0, [r7, #4]
 800b132:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b134:	687b      	ldr	r3, [r7, #4]
 800b136:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800b138:	683b      	ldr	r3, [r7, #0]
 800b13a:	781b      	ldrb	r3, [r3, #0]
 800b13c:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800b13e:	683b      	ldr	r3, [r7, #0]
 800b140:	785b      	ldrb	r3, [r3, #1]
 800b142:	2b01      	cmp	r3, #1
 800b144:	d12c      	bne.n	800b1a0 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800b146:	68bb      	ldr	r3, [r7, #8]
 800b148:	015a      	lsls	r2, r3, #5
 800b14a:	68fb      	ldr	r3, [r7, #12]
 800b14c:	4413      	add	r3, r2
 800b14e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b152:	681b      	ldr	r3, [r3, #0]
 800b154:	2b00      	cmp	r3, #0
 800b156:	db12      	blt.n	800b17e <USB_EPSetStall+0x54>
 800b158:	68bb      	ldr	r3, [r7, #8]
 800b15a:	2b00      	cmp	r3, #0
 800b15c:	d00f      	beq.n	800b17e <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800b15e:	68bb      	ldr	r3, [r7, #8]
 800b160:	015a      	lsls	r2, r3, #5
 800b162:	68fb      	ldr	r3, [r7, #12]
 800b164:	4413      	add	r3, r2
 800b166:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b16a:	681b      	ldr	r3, [r3, #0]
 800b16c:	68ba      	ldr	r2, [r7, #8]
 800b16e:	0151      	lsls	r1, r2, #5
 800b170:	68fa      	ldr	r2, [r7, #12]
 800b172:	440a      	add	r2, r1
 800b174:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b178:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800b17c:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800b17e:	68bb      	ldr	r3, [r7, #8]
 800b180:	015a      	lsls	r2, r3, #5
 800b182:	68fb      	ldr	r3, [r7, #12]
 800b184:	4413      	add	r3, r2
 800b186:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b18a:	681b      	ldr	r3, [r3, #0]
 800b18c:	68ba      	ldr	r2, [r7, #8]
 800b18e:	0151      	lsls	r1, r2, #5
 800b190:	68fa      	ldr	r2, [r7, #12]
 800b192:	440a      	add	r2, r1
 800b194:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b198:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800b19c:	6013      	str	r3, [r2, #0]
 800b19e:	e02b      	b.n	800b1f8 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800b1a0:	68bb      	ldr	r3, [r7, #8]
 800b1a2:	015a      	lsls	r2, r3, #5
 800b1a4:	68fb      	ldr	r3, [r7, #12]
 800b1a6:	4413      	add	r3, r2
 800b1a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b1ac:	681b      	ldr	r3, [r3, #0]
 800b1ae:	2b00      	cmp	r3, #0
 800b1b0:	db12      	blt.n	800b1d8 <USB_EPSetStall+0xae>
 800b1b2:	68bb      	ldr	r3, [r7, #8]
 800b1b4:	2b00      	cmp	r3, #0
 800b1b6:	d00f      	beq.n	800b1d8 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800b1b8:	68bb      	ldr	r3, [r7, #8]
 800b1ba:	015a      	lsls	r2, r3, #5
 800b1bc:	68fb      	ldr	r3, [r7, #12]
 800b1be:	4413      	add	r3, r2
 800b1c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b1c4:	681b      	ldr	r3, [r3, #0]
 800b1c6:	68ba      	ldr	r2, [r7, #8]
 800b1c8:	0151      	lsls	r1, r2, #5
 800b1ca:	68fa      	ldr	r2, [r7, #12]
 800b1cc:	440a      	add	r2, r1
 800b1ce:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b1d2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800b1d6:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800b1d8:	68bb      	ldr	r3, [r7, #8]
 800b1da:	015a      	lsls	r2, r3, #5
 800b1dc:	68fb      	ldr	r3, [r7, #12]
 800b1de:	4413      	add	r3, r2
 800b1e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b1e4:	681b      	ldr	r3, [r3, #0]
 800b1e6:	68ba      	ldr	r2, [r7, #8]
 800b1e8:	0151      	lsls	r1, r2, #5
 800b1ea:	68fa      	ldr	r2, [r7, #12]
 800b1ec:	440a      	add	r2, r1
 800b1ee:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b1f2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800b1f6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800b1f8:	2300      	movs	r3, #0
}
 800b1fa:	4618      	mov	r0, r3
 800b1fc:	3714      	adds	r7, #20
 800b1fe:	46bd      	mov	sp, r7
 800b200:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b204:	4770      	bx	lr

0800b206 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800b206:	b480      	push	{r7}
 800b208:	b085      	sub	sp, #20
 800b20a:	af00      	add	r7, sp, #0
 800b20c:	6078      	str	r0, [r7, #4]
 800b20e:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b210:	687b      	ldr	r3, [r7, #4]
 800b212:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800b214:	683b      	ldr	r3, [r7, #0]
 800b216:	781b      	ldrb	r3, [r3, #0]
 800b218:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800b21a:	683b      	ldr	r3, [r7, #0]
 800b21c:	785b      	ldrb	r3, [r3, #1]
 800b21e:	2b01      	cmp	r3, #1
 800b220:	d128      	bne.n	800b274 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800b222:	68bb      	ldr	r3, [r7, #8]
 800b224:	015a      	lsls	r2, r3, #5
 800b226:	68fb      	ldr	r3, [r7, #12]
 800b228:	4413      	add	r3, r2
 800b22a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b22e:	681b      	ldr	r3, [r3, #0]
 800b230:	68ba      	ldr	r2, [r7, #8]
 800b232:	0151      	lsls	r1, r2, #5
 800b234:	68fa      	ldr	r2, [r7, #12]
 800b236:	440a      	add	r2, r1
 800b238:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b23c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800b240:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800b242:	683b      	ldr	r3, [r7, #0]
 800b244:	78db      	ldrb	r3, [r3, #3]
 800b246:	2b03      	cmp	r3, #3
 800b248:	d003      	beq.n	800b252 <USB_EPClearStall+0x4c>
 800b24a:	683b      	ldr	r3, [r7, #0]
 800b24c:	78db      	ldrb	r3, [r3, #3]
 800b24e:	2b02      	cmp	r3, #2
 800b250:	d138      	bne.n	800b2c4 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800b252:	68bb      	ldr	r3, [r7, #8]
 800b254:	015a      	lsls	r2, r3, #5
 800b256:	68fb      	ldr	r3, [r7, #12]
 800b258:	4413      	add	r3, r2
 800b25a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b25e:	681b      	ldr	r3, [r3, #0]
 800b260:	68ba      	ldr	r2, [r7, #8]
 800b262:	0151      	lsls	r1, r2, #5
 800b264:	68fa      	ldr	r2, [r7, #12]
 800b266:	440a      	add	r2, r1
 800b268:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b26c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b270:	6013      	str	r3, [r2, #0]
 800b272:	e027      	b.n	800b2c4 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800b274:	68bb      	ldr	r3, [r7, #8]
 800b276:	015a      	lsls	r2, r3, #5
 800b278:	68fb      	ldr	r3, [r7, #12]
 800b27a:	4413      	add	r3, r2
 800b27c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b280:	681b      	ldr	r3, [r3, #0]
 800b282:	68ba      	ldr	r2, [r7, #8]
 800b284:	0151      	lsls	r1, r2, #5
 800b286:	68fa      	ldr	r2, [r7, #12]
 800b288:	440a      	add	r2, r1
 800b28a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b28e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800b292:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800b294:	683b      	ldr	r3, [r7, #0]
 800b296:	78db      	ldrb	r3, [r3, #3]
 800b298:	2b03      	cmp	r3, #3
 800b29a:	d003      	beq.n	800b2a4 <USB_EPClearStall+0x9e>
 800b29c:	683b      	ldr	r3, [r7, #0]
 800b29e:	78db      	ldrb	r3, [r3, #3]
 800b2a0:	2b02      	cmp	r3, #2
 800b2a2:	d10f      	bne.n	800b2c4 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800b2a4:	68bb      	ldr	r3, [r7, #8]
 800b2a6:	015a      	lsls	r2, r3, #5
 800b2a8:	68fb      	ldr	r3, [r7, #12]
 800b2aa:	4413      	add	r3, r2
 800b2ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b2b0:	681b      	ldr	r3, [r3, #0]
 800b2b2:	68ba      	ldr	r2, [r7, #8]
 800b2b4:	0151      	lsls	r1, r2, #5
 800b2b6:	68fa      	ldr	r2, [r7, #12]
 800b2b8:	440a      	add	r2, r1
 800b2ba:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b2be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b2c2:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800b2c4:	2300      	movs	r3, #0
}
 800b2c6:	4618      	mov	r0, r3
 800b2c8:	3714      	adds	r7, #20
 800b2ca:	46bd      	mov	sp, r7
 800b2cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2d0:	4770      	bx	lr

0800b2d2 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800b2d2:	b480      	push	{r7}
 800b2d4:	b085      	sub	sp, #20
 800b2d6:	af00      	add	r7, sp, #0
 800b2d8:	6078      	str	r0, [r7, #4]
 800b2da:	460b      	mov	r3, r1
 800b2dc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b2de:	687b      	ldr	r3, [r7, #4]
 800b2e0:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800b2e2:	68fb      	ldr	r3, [r7, #12]
 800b2e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b2e8:	681b      	ldr	r3, [r3, #0]
 800b2ea:	68fa      	ldr	r2, [r7, #12]
 800b2ec:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b2f0:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800b2f4:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800b2f6:	68fb      	ldr	r3, [r7, #12]
 800b2f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b2fc:	681a      	ldr	r2, [r3, #0]
 800b2fe:	78fb      	ldrb	r3, [r7, #3]
 800b300:	011b      	lsls	r3, r3, #4
 800b302:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800b306:	68f9      	ldr	r1, [r7, #12]
 800b308:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b30c:	4313      	orrs	r3, r2
 800b30e:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800b310:	2300      	movs	r3, #0
}
 800b312:	4618      	mov	r0, r3
 800b314:	3714      	adds	r7, #20
 800b316:	46bd      	mov	sp, r7
 800b318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b31c:	4770      	bx	lr

0800b31e <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800b31e:	b580      	push	{r7, lr}
 800b320:	b084      	sub	sp, #16
 800b322:	af00      	add	r7, sp, #0
 800b324:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b326:	687b      	ldr	r3, [r7, #4]
 800b328:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800b32a:	68fb      	ldr	r3, [r7, #12]
 800b32c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b330:	685b      	ldr	r3, [r3, #4]
 800b332:	68fa      	ldr	r2, [r7, #12]
 800b334:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b338:	f023 0302 	bic.w	r3, r3, #2
 800b33c:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 800b33e:	2003      	movs	r0, #3
 800b340:	f7f7 fe60 	bl	8003004 <HAL_Delay>

  return HAL_OK;
 800b344:	2300      	movs	r3, #0
}
 800b346:	4618      	mov	r0, r3
 800b348:	3710      	adds	r7, #16
 800b34a:	46bd      	mov	sp, r7
 800b34c:	bd80      	pop	{r7, pc}

0800b34e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800b34e:	b580      	push	{r7, lr}
 800b350:	b084      	sub	sp, #16
 800b352:	af00      	add	r7, sp, #0
 800b354:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b356:	687b      	ldr	r3, [r7, #4]
 800b358:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800b35a:	68fb      	ldr	r3, [r7, #12]
 800b35c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b360:	685b      	ldr	r3, [r3, #4]
 800b362:	68fa      	ldr	r2, [r7, #12]
 800b364:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b368:	f043 0302 	orr.w	r3, r3, #2
 800b36c:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 800b36e:	2003      	movs	r0, #3
 800b370:	f7f7 fe48 	bl	8003004 <HAL_Delay>

  return HAL_OK;
 800b374:	2300      	movs	r3, #0
}
 800b376:	4618      	mov	r0, r3
 800b378:	3710      	adds	r7, #16
 800b37a:	46bd      	mov	sp, r7
 800b37c:	bd80      	pop	{r7, pc}

0800b37e <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800b37e:	b480      	push	{r7}
 800b380:	b085      	sub	sp, #20
 800b382:	af00      	add	r7, sp, #0
 800b384:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800b386:	687b      	ldr	r3, [r7, #4]
 800b388:	695b      	ldr	r3, [r3, #20]
 800b38a:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800b38c:	687b      	ldr	r3, [r7, #4]
 800b38e:	699b      	ldr	r3, [r3, #24]
 800b390:	68fa      	ldr	r2, [r7, #12]
 800b392:	4013      	ands	r3, r2
 800b394:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800b396:	68fb      	ldr	r3, [r7, #12]
}
 800b398:	4618      	mov	r0, r3
 800b39a:	3714      	adds	r7, #20
 800b39c:	46bd      	mov	sp, r7
 800b39e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3a2:	4770      	bx	lr

0800b3a4 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800b3a4:	b480      	push	{r7}
 800b3a6:	b085      	sub	sp, #20
 800b3a8:	af00      	add	r7, sp, #0
 800b3aa:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b3ac:	687b      	ldr	r3, [r7, #4]
 800b3ae:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800b3b0:	68fb      	ldr	r3, [r7, #12]
 800b3b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b3b6:	699b      	ldr	r3, [r3, #24]
 800b3b8:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800b3ba:	68fb      	ldr	r3, [r7, #12]
 800b3bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b3c0:	69db      	ldr	r3, [r3, #28]
 800b3c2:	68ba      	ldr	r2, [r7, #8]
 800b3c4:	4013      	ands	r3, r2
 800b3c6:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800b3c8:	68bb      	ldr	r3, [r7, #8]
 800b3ca:	0c1b      	lsrs	r3, r3, #16
}
 800b3cc:	4618      	mov	r0, r3
 800b3ce:	3714      	adds	r7, #20
 800b3d0:	46bd      	mov	sp, r7
 800b3d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3d6:	4770      	bx	lr

0800b3d8 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800b3d8:	b480      	push	{r7}
 800b3da:	b085      	sub	sp, #20
 800b3dc:	af00      	add	r7, sp, #0
 800b3de:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b3e0:	687b      	ldr	r3, [r7, #4]
 800b3e2:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800b3e4:	68fb      	ldr	r3, [r7, #12]
 800b3e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b3ea:	699b      	ldr	r3, [r3, #24]
 800b3ec:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800b3ee:	68fb      	ldr	r3, [r7, #12]
 800b3f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b3f4:	69db      	ldr	r3, [r3, #28]
 800b3f6:	68ba      	ldr	r2, [r7, #8]
 800b3f8:	4013      	ands	r3, r2
 800b3fa:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800b3fc:	68bb      	ldr	r3, [r7, #8]
 800b3fe:	b29b      	uxth	r3, r3
}
 800b400:	4618      	mov	r0, r3
 800b402:	3714      	adds	r7, #20
 800b404:	46bd      	mov	sp, r7
 800b406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b40a:	4770      	bx	lr

0800b40c <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800b40c:	b480      	push	{r7}
 800b40e:	b085      	sub	sp, #20
 800b410:	af00      	add	r7, sp, #0
 800b412:	6078      	str	r0, [r7, #4]
 800b414:	460b      	mov	r3, r1
 800b416:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b418:	687b      	ldr	r3, [r7, #4]
 800b41a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800b41c:	78fb      	ldrb	r3, [r7, #3]
 800b41e:	015a      	lsls	r2, r3, #5
 800b420:	68fb      	ldr	r3, [r7, #12]
 800b422:	4413      	add	r3, r2
 800b424:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b428:	689b      	ldr	r3, [r3, #8]
 800b42a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800b42c:	68fb      	ldr	r3, [r7, #12]
 800b42e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b432:	695b      	ldr	r3, [r3, #20]
 800b434:	68ba      	ldr	r2, [r7, #8]
 800b436:	4013      	ands	r3, r2
 800b438:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800b43a:	68bb      	ldr	r3, [r7, #8]
}
 800b43c:	4618      	mov	r0, r3
 800b43e:	3714      	adds	r7, #20
 800b440:	46bd      	mov	sp, r7
 800b442:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b446:	4770      	bx	lr

0800b448 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800b448:	b480      	push	{r7}
 800b44a:	b087      	sub	sp, #28
 800b44c:	af00      	add	r7, sp, #0
 800b44e:	6078      	str	r0, [r7, #4]
 800b450:	460b      	mov	r3, r1
 800b452:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b454:	687b      	ldr	r3, [r7, #4]
 800b456:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 800b458:	697b      	ldr	r3, [r7, #20]
 800b45a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b45e:	691b      	ldr	r3, [r3, #16]
 800b460:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800b462:	697b      	ldr	r3, [r7, #20]
 800b464:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b468:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b46a:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800b46c:	78fb      	ldrb	r3, [r7, #3]
 800b46e:	f003 030f 	and.w	r3, r3, #15
 800b472:	68fa      	ldr	r2, [r7, #12]
 800b474:	fa22 f303 	lsr.w	r3, r2, r3
 800b478:	01db      	lsls	r3, r3, #7
 800b47a:	b2db      	uxtb	r3, r3
 800b47c:	693a      	ldr	r2, [r7, #16]
 800b47e:	4313      	orrs	r3, r2
 800b480:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800b482:	78fb      	ldrb	r3, [r7, #3]
 800b484:	015a      	lsls	r2, r3, #5
 800b486:	697b      	ldr	r3, [r7, #20]
 800b488:	4413      	add	r3, r2
 800b48a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b48e:	689b      	ldr	r3, [r3, #8]
 800b490:	693a      	ldr	r2, [r7, #16]
 800b492:	4013      	ands	r3, r2
 800b494:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800b496:	68bb      	ldr	r3, [r7, #8]
}
 800b498:	4618      	mov	r0, r3
 800b49a:	371c      	adds	r7, #28
 800b49c:	46bd      	mov	sp, r7
 800b49e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4a2:	4770      	bx	lr

0800b4a4 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800b4a4:	b480      	push	{r7}
 800b4a6:	b083      	sub	sp, #12
 800b4a8:	af00      	add	r7, sp, #0
 800b4aa:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800b4ac:	687b      	ldr	r3, [r7, #4]
 800b4ae:	695b      	ldr	r3, [r3, #20]
 800b4b0:	f003 0301 	and.w	r3, r3, #1
}
 800b4b4:	4618      	mov	r0, r3
 800b4b6:	370c      	adds	r7, #12
 800b4b8:	46bd      	mov	sp, r7
 800b4ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4be:	4770      	bx	lr

0800b4c0 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800b4c0:	b480      	push	{r7}
 800b4c2:	b085      	sub	sp, #20
 800b4c4:	af00      	add	r7, sp, #0
 800b4c6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b4c8:	687b      	ldr	r3, [r7, #4]
 800b4ca:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP based on the enumeration speed */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800b4cc:	68fb      	ldr	r3, [r7, #12]
 800b4ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b4d2:	681b      	ldr	r3, [r3, #0]
 800b4d4:	68fa      	ldr	r2, [r7, #12]
 800b4d6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b4da:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800b4de:	f023 0307 	bic.w	r3, r3, #7
 800b4e2:	6013      	str	r3, [r2, #0]

  if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_LS_PHY_6MHZ)
 800b4e4:	68fb      	ldr	r3, [r7, #12]
 800b4e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b4ea:	689b      	ldr	r3, [r3, #8]
 800b4ec:	f003 0306 	and.w	r3, r3, #6
 800b4f0:	2b04      	cmp	r3, #4
 800b4f2:	d109      	bne.n	800b508 <USB_ActivateSetup+0x48>
  {
    USBx_INEP(0U)->DIEPCTL |= 3U;
 800b4f4:	68fb      	ldr	r3, [r7, #12]
 800b4f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b4fa:	681b      	ldr	r3, [r3, #0]
 800b4fc:	68fa      	ldr	r2, [r7, #12]
 800b4fe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b502:	f043 0303 	orr.w	r3, r3, #3
 800b506:	6013      	str	r3, [r2, #0]
  }
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800b508:	68fb      	ldr	r3, [r7, #12]
 800b50a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b50e:	685b      	ldr	r3, [r3, #4]
 800b510:	68fa      	ldr	r2, [r7, #12]
 800b512:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b516:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b51a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800b51c:	2300      	movs	r3, #0
}
 800b51e:	4618      	mov	r0, r3
 800b520:	3714      	adds	r7, #20
 800b522:	46bd      	mov	sp, r7
 800b524:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b528:	4770      	bx	lr
	...

0800b52c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800b52c:	b480      	push	{r7}
 800b52e:	b087      	sub	sp, #28
 800b530:	af00      	add	r7, sp, #0
 800b532:	60f8      	str	r0, [r7, #12]
 800b534:	460b      	mov	r3, r1
 800b536:	607a      	str	r2, [r7, #4]
 800b538:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b53a:	68fb      	ldr	r3, [r7, #12]
 800b53c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800b53e:	68fb      	ldr	r3, [r7, #12]
 800b540:	333c      	adds	r3, #60	; 0x3c
 800b542:	3304      	adds	r3, #4
 800b544:	681b      	ldr	r3, [r3, #0]
 800b546:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800b548:	693b      	ldr	r3, [r7, #16]
 800b54a:	4a26      	ldr	r2, [pc, #152]	; (800b5e4 <USB_EP0_OutStart+0xb8>)
 800b54c:	4293      	cmp	r3, r2
 800b54e:	d90a      	bls.n	800b566 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800b550:	697b      	ldr	r3, [r7, #20]
 800b552:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b556:	681b      	ldr	r3, [r3, #0]
 800b558:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b55c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b560:	d101      	bne.n	800b566 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800b562:	2300      	movs	r3, #0
 800b564:	e037      	b.n	800b5d6 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800b566:	697b      	ldr	r3, [r7, #20]
 800b568:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b56c:	461a      	mov	r2, r3
 800b56e:	2300      	movs	r3, #0
 800b570:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800b572:	697b      	ldr	r3, [r7, #20]
 800b574:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b578:	691b      	ldr	r3, [r3, #16]
 800b57a:	697a      	ldr	r2, [r7, #20]
 800b57c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b580:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b584:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800b586:	697b      	ldr	r3, [r7, #20]
 800b588:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b58c:	691b      	ldr	r3, [r3, #16]
 800b58e:	697a      	ldr	r2, [r7, #20]
 800b590:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b594:	f043 0318 	orr.w	r3, r3, #24
 800b598:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800b59a:	697b      	ldr	r3, [r7, #20]
 800b59c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b5a0:	691b      	ldr	r3, [r3, #16]
 800b5a2:	697a      	ldr	r2, [r7, #20]
 800b5a4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b5a8:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800b5ac:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800b5ae:	7afb      	ldrb	r3, [r7, #11]
 800b5b0:	2b01      	cmp	r3, #1
 800b5b2:	d10f      	bne.n	800b5d4 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800b5b4:	697b      	ldr	r3, [r7, #20]
 800b5b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b5ba:	461a      	mov	r2, r3
 800b5bc:	687b      	ldr	r3, [r7, #4]
 800b5be:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800b5c0:	697b      	ldr	r3, [r7, #20]
 800b5c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b5c6:	681b      	ldr	r3, [r3, #0]
 800b5c8:	697a      	ldr	r2, [r7, #20]
 800b5ca:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b5ce:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800b5d2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800b5d4:	2300      	movs	r3, #0
}
 800b5d6:	4618      	mov	r0, r3
 800b5d8:	371c      	adds	r7, #28
 800b5da:	46bd      	mov	sp, r7
 800b5dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5e0:	4770      	bx	lr
 800b5e2:	bf00      	nop
 800b5e4:	4f54300a 	.word	0x4f54300a

0800b5e8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800b5e8:	b480      	push	{r7}
 800b5ea:	b085      	sub	sp, #20
 800b5ec:	af00      	add	r7, sp, #0
 800b5ee:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800b5f0:	2300      	movs	r3, #0
 800b5f2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800b5f4:	68fb      	ldr	r3, [r7, #12]
 800b5f6:	3301      	adds	r3, #1
 800b5f8:	60fb      	str	r3, [r7, #12]
 800b5fa:	68fb      	ldr	r3, [r7, #12]
 800b5fc:	4a13      	ldr	r2, [pc, #76]	; (800b64c <USB_CoreReset+0x64>)
 800b5fe:	4293      	cmp	r3, r2
 800b600:	d901      	bls.n	800b606 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800b602:	2303      	movs	r3, #3
 800b604:	e01b      	b.n	800b63e <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800b606:	687b      	ldr	r3, [r7, #4]
 800b608:	691b      	ldr	r3, [r3, #16]
 800b60a:	2b00      	cmp	r3, #0
 800b60c:	daf2      	bge.n	800b5f4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800b60e:	2300      	movs	r3, #0
 800b610:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800b612:	687b      	ldr	r3, [r7, #4]
 800b614:	691b      	ldr	r3, [r3, #16]
 800b616:	f043 0201 	orr.w	r2, r3, #1
 800b61a:	687b      	ldr	r3, [r7, #4]
 800b61c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800b61e:	68fb      	ldr	r3, [r7, #12]
 800b620:	3301      	adds	r3, #1
 800b622:	60fb      	str	r3, [r7, #12]
 800b624:	68fb      	ldr	r3, [r7, #12]
 800b626:	4a09      	ldr	r2, [pc, #36]	; (800b64c <USB_CoreReset+0x64>)
 800b628:	4293      	cmp	r3, r2
 800b62a:	d901      	bls.n	800b630 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800b62c:	2303      	movs	r3, #3
 800b62e:	e006      	b.n	800b63e <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800b630:	687b      	ldr	r3, [r7, #4]
 800b632:	691b      	ldr	r3, [r3, #16]
 800b634:	f003 0301 	and.w	r3, r3, #1
 800b638:	2b01      	cmp	r3, #1
 800b63a:	d0f0      	beq.n	800b61e <USB_CoreReset+0x36>

  return HAL_OK;
 800b63c:	2300      	movs	r3, #0
}
 800b63e:	4618      	mov	r0, r3
 800b640:	3714      	adds	r7, #20
 800b642:	46bd      	mov	sp, r7
 800b644:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b648:	4770      	bx	lr
 800b64a:	bf00      	nop
 800b64c:	00030d40 	.word	0x00030d40

0800b650 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */    

void MX_FATFS_Init(void) 
{
 800b650:	b580      	push	{r7, lr}
 800b652:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800b654:	4904      	ldr	r1, [pc, #16]	; (800b668 <MX_FATFS_Init+0x18>)
 800b656:	4805      	ldr	r0, [pc, #20]	; (800b66c <MX_FATFS_Init+0x1c>)
 800b658:	f001 fe36 	bl	800d2c8 <FATFS_LinkDriver>
 800b65c:	4603      	mov	r3, r0
 800b65e:	461a      	mov	r2, r3
 800b660:	4b03      	ldr	r3, [pc, #12]	; (800b670 <MX_FATFS_Init+0x20>)
 800b662:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */     
  /* USER CODE END Init */
}
 800b664:	bf00      	nop
 800b666:	bd80      	pop	{r7, pc}
 800b668:	20000f64 	.word	0x20000f64
 800b66c:	08011ffc 	.word	0x08011ffc
 800b670:	20000f60 	.word	0x20000f60

0800b674 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800b674:	b580      	push	{r7, lr}
 800b676:	b082      	sub	sp, #8
 800b678:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800b67a:	2300      	movs	r3, #0
 800b67c:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800b67e:	f000 f871 	bl	800b764 <BSP_SD_IsDetected>
 800b682:	4603      	mov	r3, r0
 800b684:	2b01      	cmp	r3, #1
 800b686:	d001      	beq.n	800b68c <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 800b688:	2301      	movs	r3, #1
 800b68a:	e012      	b.n	800b6b2 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 800b68c:	480b      	ldr	r0, [pc, #44]	; (800b6bc <BSP_SD_Init+0x48>)
 800b68e:	f7fa fdb4 	bl	80061fa <HAL_SD_Init>
 800b692:	4603      	mov	r3, r0
 800b694:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800b696:	79fb      	ldrb	r3, [r7, #7]
 800b698:	2b00      	cmp	r3, #0
 800b69a:	d109      	bne.n	800b6b0 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 800b69c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800b6a0:	4806      	ldr	r0, [pc, #24]	; (800b6bc <BSP_SD_Init+0x48>)
 800b6a2:	f7fb fb93 	bl	8006dcc <HAL_SD_ConfigWideBusOperation>
 800b6a6:	4603      	mov	r3, r0
 800b6a8:	2b00      	cmp	r3, #0
 800b6aa:	d001      	beq.n	800b6b0 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 800b6ac:	2301      	movs	r3, #1
 800b6ae:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 800b6b0:	79fb      	ldrb	r3, [r7, #7]
}
 800b6b2:	4618      	mov	r0, r3
 800b6b4:	3708      	adds	r7, #8
 800b6b6:	46bd      	mov	sp, r7
 800b6b8:	bd80      	pop	{r7, pc}
 800b6ba:	bf00      	nop
 800b6bc:	20000e40 	.word	0x20000e40

0800b6c0 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read 
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 800b6c0:	b580      	push	{r7, lr}
 800b6c2:	b086      	sub	sp, #24
 800b6c4:	af00      	add	r7, sp, #0
 800b6c6:	60f8      	str	r0, [r7, #12]
 800b6c8:	60b9      	str	r1, [r7, #8]
 800b6ca:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800b6cc:	2300      	movs	r3, #0
 800b6ce:	75fb      	strb	r3, [r7, #23]
  
  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 800b6d0:	687b      	ldr	r3, [r7, #4]
 800b6d2:	68ba      	ldr	r2, [r7, #8]
 800b6d4:	68f9      	ldr	r1, [r7, #12]
 800b6d6:	4806      	ldr	r0, [pc, #24]	; (800b6f0 <BSP_SD_ReadBlocks_DMA+0x30>)
 800b6d8:	f7fa fe20 	bl	800631c <HAL_SD_ReadBlocks_DMA>
 800b6dc:	4603      	mov	r3, r0
 800b6de:	2b00      	cmp	r3, #0
 800b6e0:	d001      	beq.n	800b6e6 <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800b6e2:	2301      	movs	r3, #1
 800b6e4:	75fb      	strb	r3, [r7, #23]
  }
  
  return sd_state; 
 800b6e6:	7dfb      	ldrb	r3, [r7, #23]
}
 800b6e8:	4618      	mov	r0, r3
 800b6ea:	3718      	adds	r7, #24
 800b6ec:	46bd      	mov	sp, r7
 800b6ee:	bd80      	pop	{r7, pc}
 800b6f0:	20000e40 	.word	0x20000e40

0800b6f4 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write 
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 800b6f4:	b580      	push	{r7, lr}
 800b6f6:	b086      	sub	sp, #24
 800b6f8:	af00      	add	r7, sp, #0
 800b6fa:	60f8      	str	r0, [r7, #12]
 800b6fc:	60b9      	str	r1, [r7, #8]
 800b6fe:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800b700:	2300      	movs	r3, #0
 800b702:	75fb      	strb	r3, [r7, #23]
  
  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 800b704:	687b      	ldr	r3, [r7, #4]
 800b706:	68ba      	ldr	r2, [r7, #8]
 800b708:	68f9      	ldr	r1, [r7, #12]
 800b70a:	4806      	ldr	r0, [pc, #24]	; (800b724 <BSP_SD_WriteBlocks_DMA+0x30>)
 800b70c:	f7fa fef0 	bl	80064f0 <HAL_SD_WriteBlocks_DMA>
 800b710:	4603      	mov	r3, r0
 800b712:	2b00      	cmp	r3, #0
 800b714:	d001      	beq.n	800b71a <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800b716:	2301      	movs	r3, #1
 800b718:	75fb      	strb	r3, [r7, #23]
  }
  
  return sd_state; 
 800b71a:	7dfb      	ldrb	r3, [r7, #23]
}
 800b71c:	4618      	mov	r0, r3
 800b71e:	3718      	adds	r7, #24
 800b720:	46bd      	mov	sp, r7
 800b722:	bd80      	pop	{r7, pc}
 800b724:	20000e40 	.word	0x20000e40

0800b728 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800b728:	b580      	push	{r7, lr}
 800b72a:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800b72c:	4805      	ldr	r0, [pc, #20]	; (800b744 <BSP_SD_GetCardState+0x1c>)
 800b72e:	f7fb fbc9 	bl	8006ec4 <HAL_SD_GetCardState>
 800b732:	4603      	mov	r3, r0
 800b734:	2b04      	cmp	r3, #4
 800b736:	bf14      	ite	ne
 800b738:	2301      	movne	r3, #1
 800b73a:	2300      	moveq	r3, #0
 800b73c:	b2db      	uxtb	r3, r3
}
 800b73e:	4618      	mov	r0, r3
 800b740:	bd80      	pop	{r7, pc}
 800b742:	bf00      	nop
 800b744:	20000e40 	.word	0x20000e40

0800b748 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None 
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800b748:	b580      	push	{r7, lr}
 800b74a:	b082      	sub	sp, #8
 800b74c:	af00      	add	r7, sp, #0
 800b74e:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 800b750:	6879      	ldr	r1, [r7, #4]
 800b752:	4803      	ldr	r0, [pc, #12]	; (800b760 <BSP_SD_GetCardInfo+0x18>)
 800b754:	f7fb fb0e 	bl	8006d74 <HAL_SD_GetCardInfo>
}
 800b758:	bf00      	nop
 800b75a:	3708      	adds	r7, #8
 800b75c:	46bd      	mov	sp, r7
 800b75e:	bd80      	pop	{r7, pc}
 800b760:	20000e40 	.word	0x20000e40

0800b764 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800b764:	b580      	push	{r7, lr}
 800b766:	b082      	sub	sp, #8
 800b768:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800b76a:	2301      	movs	r3, #1
 800b76c:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0) 
 800b76e:	f000 f80b 	bl	800b788 <BSP_PlatformIsDetected>
 800b772:	4603      	mov	r3, r0
 800b774:	2b00      	cmp	r3, #0
 800b776:	d101      	bne.n	800b77c <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800b778:	2300      	movs	r3, #0
 800b77a:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800b77c:	79fb      	ldrb	r3, [r7, #7]
 800b77e:	b2db      	uxtb	r3, r3
}
 800b780:	4618      	mov	r0, r3
 800b782:	3708      	adds	r7, #8
 800b784:	46bd      	mov	sp, r7
 800b786:	bd80      	pop	{r7, pc}

0800b788 <BSP_PlatformIsDetected>:
  *
  ******************************************************************************
*/
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800b788:	b580      	push	{r7, lr}
 800b78a:	b082      	sub	sp, #8
 800b78c:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800b78e:	2301      	movs	r3, #1
 800b790:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800b792:	f44f 7180 	mov.w	r1, #256	; 0x100
 800b796:	4806      	ldr	r0, [pc, #24]	; (800b7b0 <BSP_PlatformIsDetected+0x28>)
 800b798:	f7f8 fa9e 	bl	8003cd8 <HAL_GPIO_ReadPin>
 800b79c:	4603      	mov	r3, r0
 800b79e:	2b00      	cmp	r3, #0
 800b7a0:	d001      	beq.n	800b7a6 <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 800b7a2:	2300      	movs	r3, #0
 800b7a4:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */ 
    return status;
 800b7a6:	79fb      	ldrb	r3, [r7, #7]
}  
 800b7a8:	4618      	mov	r0, r3
 800b7aa:	3708      	adds	r7, #8
 800b7ac:	46bd      	mov	sp, r7
 800b7ae:	bd80      	pop	{r7, pc}
 800b7b0:	40020000 	.word	0x40020000

0800b7b4 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 800b7b4:	b580      	push	{r7, lr}
 800b7b6:	b084      	sub	sp, #16
 800b7b8:	af00      	add	r7, sp, #0
 800b7ba:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 800b7bc:	f7f7 fc16 	bl	8002fec <HAL_GetTick>
 800b7c0:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 800b7c2:	e006      	b.n	800b7d2 <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800b7c4:	f7ff ffb0 	bl	800b728 <BSP_SD_GetCardState>
 800b7c8:	4603      	mov	r3, r0
 800b7ca:	2b00      	cmp	r3, #0
 800b7cc:	d101      	bne.n	800b7d2 <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 800b7ce:	2300      	movs	r3, #0
 800b7d0:	e009      	b.n	800b7e6 <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 800b7d2:	f7f7 fc0b 	bl	8002fec <HAL_GetTick>
 800b7d6:	4602      	mov	r2, r0
 800b7d8:	68fb      	ldr	r3, [r7, #12]
 800b7da:	1ad3      	subs	r3, r2, r3
 800b7dc:	687a      	ldr	r2, [r7, #4]
 800b7de:	429a      	cmp	r2, r3
 800b7e0:	d8f0      	bhi.n	800b7c4 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 800b7e2:	f04f 33ff 	mov.w	r3, #4294967295
}
 800b7e6:	4618      	mov	r0, r3
 800b7e8:	3710      	adds	r7, #16
 800b7ea:	46bd      	mov	sp, r7
 800b7ec:	bd80      	pop	{r7, pc}
	...

0800b7f0 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800b7f0:	b580      	push	{r7, lr}
 800b7f2:	b082      	sub	sp, #8
 800b7f4:	af00      	add	r7, sp, #0
 800b7f6:	4603      	mov	r3, r0
 800b7f8:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800b7fa:	4b0b      	ldr	r3, [pc, #44]	; (800b828 <SD_CheckStatus+0x38>)
 800b7fc:	2201      	movs	r2, #1
 800b7fe:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800b800:	f7ff ff92 	bl	800b728 <BSP_SD_GetCardState>
 800b804:	4603      	mov	r3, r0
 800b806:	2b00      	cmp	r3, #0
 800b808:	d107      	bne.n	800b81a <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800b80a:	4b07      	ldr	r3, [pc, #28]	; (800b828 <SD_CheckStatus+0x38>)
 800b80c:	781b      	ldrb	r3, [r3, #0]
 800b80e:	b2db      	uxtb	r3, r3
 800b810:	f023 0301 	bic.w	r3, r3, #1
 800b814:	b2da      	uxtb	r2, r3
 800b816:	4b04      	ldr	r3, [pc, #16]	; (800b828 <SD_CheckStatus+0x38>)
 800b818:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800b81a:	4b03      	ldr	r3, [pc, #12]	; (800b828 <SD_CheckStatus+0x38>)
 800b81c:	781b      	ldrb	r3, [r3, #0]
 800b81e:	b2db      	uxtb	r3, r3
}
 800b820:	4618      	mov	r0, r3
 800b822:	3708      	adds	r7, #8
 800b824:	46bd      	mov	sp, r7
 800b826:	bd80      	pop	{r7, pc}
 800b828:	20000011 	.word	0x20000011

0800b82c <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800b82c:	b580      	push	{r7, lr}
 800b82e:	b082      	sub	sp, #8
 800b830:	af00      	add	r7, sp, #0
 800b832:	4603      	mov	r3, r0
 800b834:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800b836:	f7ff ff1d 	bl	800b674 <BSP_SD_Init>
 800b83a:	4603      	mov	r3, r0
 800b83c:	2b00      	cmp	r3, #0
 800b83e:	d107      	bne.n	800b850 <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 800b840:	79fb      	ldrb	r3, [r7, #7]
 800b842:	4618      	mov	r0, r3
 800b844:	f7ff ffd4 	bl	800b7f0 <SD_CheckStatus>
 800b848:	4603      	mov	r3, r0
 800b84a:	461a      	mov	r2, r3
 800b84c:	4b04      	ldr	r3, [pc, #16]	; (800b860 <SD_initialize+0x34>)
 800b84e:	701a      	strb	r2, [r3, #0]
  }

#else
  Stat = SD_CheckStatus(lun);
#endif
  return Stat;
 800b850:	4b03      	ldr	r3, [pc, #12]	; (800b860 <SD_initialize+0x34>)
 800b852:	781b      	ldrb	r3, [r3, #0]
 800b854:	b2db      	uxtb	r3, r3
}
 800b856:	4618      	mov	r0, r3
 800b858:	3708      	adds	r7, #8
 800b85a:	46bd      	mov	sp, r7
 800b85c:	bd80      	pop	{r7, pc}
 800b85e:	bf00      	nop
 800b860:	20000011 	.word	0x20000011

0800b864 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800b864:	b580      	push	{r7, lr}
 800b866:	b082      	sub	sp, #8
 800b868:	af00      	add	r7, sp, #0
 800b86a:	4603      	mov	r3, r0
 800b86c:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800b86e:	79fb      	ldrb	r3, [r7, #7]
 800b870:	4618      	mov	r0, r3
 800b872:	f7ff ffbd 	bl	800b7f0 <SD_CheckStatus>
 800b876:	4603      	mov	r3, r0
}
 800b878:	4618      	mov	r0, r3
 800b87a:	3708      	adds	r7, #8
 800b87c:	46bd      	mov	sp, r7
 800b87e:	bd80      	pop	{r7, pc}

0800b880 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
              
DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800b880:	b580      	push	{r7, lr}
 800b882:	b088      	sub	sp, #32
 800b884:	af00      	add	r7, sp, #0
 800b886:	60b9      	str	r1, [r7, #8]
 800b888:	607a      	str	r2, [r7, #4]
 800b88a:	603b      	str	r3, [r7, #0]
 800b88c:	4603      	mov	r3, r0
 800b88e:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800b890:	2301      	movs	r3, #1
 800b892:	77fb      	strb	r3, [r7, #31]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800b894:	f247 5030 	movw	r0, #30000	; 0x7530
 800b898:	f7ff ff8c 	bl	800b7b4 <SD_CheckStatusWithTimeout>
 800b89c:	4603      	mov	r3, r0
 800b89e:	2b00      	cmp	r3, #0
 800b8a0:	da01      	bge.n	800b8a6 <SD_read+0x26>
  {
    return res;
 800b8a2:	7ffb      	ldrb	r3, [r7, #31]
 800b8a4:	e08b      	b.n	800b9be <SD_read+0x13e>
  }

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
 800b8a6:	68bb      	ldr	r3, [r7, #8]
 800b8a8:	f003 0303 	and.w	r3, r3, #3
 800b8ac:	2b00      	cmp	r3, #0
 800b8ae:	f040 8085 	bne.w	800b9bc <SD_read+0x13c>
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 800b8b2:	683a      	ldr	r2, [r7, #0]
 800b8b4:	6879      	ldr	r1, [r7, #4]
 800b8b6:	68b8      	ldr	r0, [r7, #8]
 800b8b8:	f7ff ff02 	bl	800b6c0 <BSP_SD_ReadBlocks_DMA>
 800b8bc:	4603      	mov	r3, r0
 800b8be:	2b00      	cmp	r3, #0
 800b8c0:	d133      	bne.n	800b92a <SD_read+0xaa>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 800b8c2:	4b41      	ldr	r3, [pc, #260]	; (800b9c8 <SD_read+0x148>)
 800b8c4:	2200      	movs	r2, #0
 800b8c6:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 800b8c8:	f7f7 fb90 	bl	8002fec <HAL_GetTick>
 800b8cc:	6178      	str	r0, [r7, #20]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800b8ce:	bf00      	nop
 800b8d0:	4b3d      	ldr	r3, [pc, #244]	; (800b9c8 <SD_read+0x148>)
 800b8d2:	681b      	ldr	r3, [r3, #0]
 800b8d4:	2b00      	cmp	r3, #0
 800b8d6:	d108      	bne.n	800b8ea <SD_read+0x6a>
 800b8d8:	f7f7 fb88 	bl	8002fec <HAL_GetTick>
 800b8dc:	4602      	mov	r2, r0
 800b8de:	697b      	ldr	r3, [r7, #20]
 800b8e0:	1ad3      	subs	r3, r2, r3
 800b8e2:	f247 522f 	movw	r2, #29999	; 0x752f
 800b8e6:	4293      	cmp	r3, r2
 800b8e8:	d9f2      	bls.n	800b8d0 <SD_read+0x50>
      {
      }
      /* incase of a timeout return error */
      if (ReadStatus == 0)
 800b8ea:	4b37      	ldr	r3, [pc, #220]	; (800b9c8 <SD_read+0x148>)
 800b8ec:	681b      	ldr	r3, [r3, #0]
 800b8ee:	2b00      	cmp	r3, #0
 800b8f0:	d102      	bne.n	800b8f8 <SD_read+0x78>
      {
        res = RES_ERROR;
 800b8f2:	2301      	movs	r3, #1
 800b8f4:	77fb      	strb	r3, [r7, #31]
 800b8f6:	e061      	b.n	800b9bc <SD_read+0x13c>
      }
      else
      {
        ReadStatus = 0;
 800b8f8:	4b33      	ldr	r3, [pc, #204]	; (800b9c8 <SD_read+0x148>)
 800b8fa:	2200      	movs	r2, #0
 800b8fc:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 800b8fe:	f7f7 fb75 	bl	8002fec <HAL_GetTick>
 800b902:	6178      	str	r0, [r7, #20]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800b904:	e007      	b.n	800b916 <SD_read+0x96>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800b906:	f7ff ff0f 	bl	800b728 <BSP_SD_GetCardState>
 800b90a:	4603      	mov	r3, r0
 800b90c:	2b00      	cmp	r3, #0
 800b90e:	d102      	bne.n	800b916 <SD_read+0x96>
          {
            res = RES_OK;
 800b910:	2300      	movs	r3, #0
 800b912:	77fb      	strb	r3, [r7, #31]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 800b914:	e052      	b.n	800b9bc <SD_read+0x13c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800b916:	f7f7 fb69 	bl	8002fec <HAL_GetTick>
 800b91a:	4602      	mov	r2, r0
 800b91c:	697b      	ldr	r3, [r7, #20]
 800b91e:	1ad3      	subs	r3, r2, r3
 800b920:	f247 522f 	movw	r2, #29999	; 0x752f
 800b924:	4293      	cmp	r3, r2
 800b926:	d9ee      	bls.n	800b906 <SD_read+0x86>
 800b928:	e048      	b.n	800b9bc <SD_read+0x13c>
#if defined(ENABLE_SCRATCH_BUFFER)
    else {
      /* Slow path, fetch each sector a part and memcpy to destination buffer */
      int i;

      for (i = 0; i < count; i++) {
 800b92a:	2300      	movs	r3, #0
 800b92c:	61bb      	str	r3, [r7, #24]
 800b92e:	e034      	b.n	800b99a <SD_read+0x11a>
        ret = BSP_SD_ReadBlocks_DMA((uint32_t*)scratch, (uint32_t)sector++, 1);
 800b930:	687b      	ldr	r3, [r7, #4]
 800b932:	1c5a      	adds	r2, r3, #1
 800b934:	607a      	str	r2, [r7, #4]
 800b936:	2201      	movs	r2, #1
 800b938:	4619      	mov	r1, r3
 800b93a:	4824      	ldr	r0, [pc, #144]	; (800b9cc <SD_read+0x14c>)
 800b93c:	f7ff fec0 	bl	800b6c0 <BSP_SD_ReadBlocks_DMA>
 800b940:	4603      	mov	r3, r0
 800b942:	77bb      	strb	r3, [r7, #30]
        if (ret == MSD_OK) {
 800b944:	7fbb      	ldrb	r3, [r7, #30]
 800b946:	2b00      	cmp	r3, #0
 800b948:	d12c      	bne.n	800b9a4 <SD_read+0x124>
          /* wait until the read is successful or a timeout occurs */

          ReadStatus = 0;
 800b94a:	4b1f      	ldr	r3, [pc, #124]	; (800b9c8 <SD_read+0x148>)
 800b94c:	2200      	movs	r2, #0
 800b94e:	601a      	str	r2, [r3, #0]
          timeout = HAL_GetTick();
 800b950:	f7f7 fb4c 	bl	8002fec <HAL_GetTick>
 800b954:	6178      	str	r0, [r7, #20]
          while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800b956:	bf00      	nop
 800b958:	4b1b      	ldr	r3, [pc, #108]	; (800b9c8 <SD_read+0x148>)
 800b95a:	681b      	ldr	r3, [r3, #0]
 800b95c:	2b00      	cmp	r3, #0
 800b95e:	d108      	bne.n	800b972 <SD_read+0xf2>
 800b960:	f7f7 fb44 	bl	8002fec <HAL_GetTick>
 800b964:	4602      	mov	r2, r0
 800b966:	697b      	ldr	r3, [r7, #20]
 800b968:	1ad3      	subs	r3, r2, r3
 800b96a:	f247 522f 	movw	r2, #29999	; 0x752f
 800b96e:	4293      	cmp	r3, r2
 800b970:	d9f2      	bls.n	800b958 <SD_read+0xd8>
          {
          }
          if (ReadStatus == 0)
 800b972:	4b15      	ldr	r3, [pc, #84]	; (800b9c8 <SD_read+0x148>)
 800b974:	681b      	ldr	r3, [r3, #0]
 800b976:	2b00      	cmp	r3, #0
 800b978:	d016      	beq.n	800b9a8 <SD_read+0x128>
          *
          * invalidate the scratch buffer before the next read to get the actual data instead of the cached one
          */
          SCB_InvalidateDCache_by_Addr((uint32_t*)scratch, BLOCKSIZE);
#endif
          memcpy(buff, scratch, BLOCKSIZE);
 800b97a:	68bb      	ldr	r3, [r7, #8]
 800b97c:	4a13      	ldr	r2, [pc, #76]	; (800b9cc <SD_read+0x14c>)
 800b97e:	4618      	mov	r0, r3
 800b980:	4611      	mov	r1, r2
 800b982:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b986:	461a      	mov	r2, r3
 800b988:	f002 fa0c 	bl	800dda4 <memcpy>
          buff += BLOCKSIZE;
 800b98c:	68bb      	ldr	r3, [r7, #8]
 800b98e:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800b992:	60bb      	str	r3, [r7, #8]
      for (i = 0; i < count; i++) {
 800b994:	69bb      	ldr	r3, [r7, #24]
 800b996:	3301      	adds	r3, #1
 800b998:	61bb      	str	r3, [r7, #24]
 800b99a:	69bb      	ldr	r3, [r7, #24]
 800b99c:	683a      	ldr	r2, [r7, #0]
 800b99e:	429a      	cmp	r2, r3
 800b9a0:	d8c6      	bhi.n	800b930 <SD_read+0xb0>
 800b9a2:	e002      	b.n	800b9aa <SD_read+0x12a>
        }
        else
        {
          break;
 800b9a4:	bf00      	nop
 800b9a6:	e000      	b.n	800b9aa <SD_read+0x12a>
            break;
 800b9a8:	bf00      	nop
        }
      }

      if ((i == count) && (ret == MSD_OK))
 800b9aa:	69bb      	ldr	r3, [r7, #24]
 800b9ac:	683a      	ldr	r2, [r7, #0]
 800b9ae:	429a      	cmp	r2, r3
 800b9b0:	d104      	bne.n	800b9bc <SD_read+0x13c>
 800b9b2:	7fbb      	ldrb	r3, [r7, #30]
 800b9b4:	2b00      	cmp	r3, #0
 800b9b6:	d101      	bne.n	800b9bc <SD_read+0x13c>
        res = RES_OK;
 800b9b8:	2300      	movs	r3, #0
 800b9ba:	77fb      	strb	r3, [r7, #31]
    }
#endif
  }

  return res;
 800b9bc:	7ffb      	ldrb	r3, [r7, #31]
}
 800b9be:	4618      	mov	r0, r3
 800b9c0:	3720      	adds	r7, #32
 800b9c2:	46bd      	mov	sp, r7
 800b9c4:	bd80      	pop	{r7, pc}
 800b9c6:	bf00      	nop
 800b9c8:	20000980 	.word	0x20000980
 800b9cc:	2000077c 	.word	0x2000077c

0800b9d0 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
              
DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800b9d0:	b580      	push	{r7, lr}
 800b9d2:	b088      	sub	sp, #32
 800b9d4:	af00      	add	r7, sp, #0
 800b9d6:	60b9      	str	r1, [r7, #8]
 800b9d8:	607a      	str	r2, [r7, #4]
 800b9da:	603b      	str	r3, [r7, #0]
 800b9dc:	4603      	mov	r3, r0
 800b9de:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800b9e0:	2301      	movs	r3, #1
 800b9e2:	77fb      	strb	r3, [r7, #31]
  uint32_t timeout;
  uint8_t ret;
  int i;

   WriteStatus = 0;
 800b9e4:	4b4c      	ldr	r3, [pc, #304]	; (800bb18 <SD_write+0x148>)
 800b9e6:	2200      	movs	r2, #0
 800b9e8:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)   
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800b9ea:	f247 5030 	movw	r0, #30000	; 0x7530
 800b9ee:	f7ff fee1 	bl	800b7b4 <SD_CheckStatusWithTimeout>
 800b9f2:	4603      	mov	r3, r0
 800b9f4:	2b00      	cmp	r3, #0
 800b9f6:	da01      	bge.n	800b9fc <SD_write+0x2c>
  {
    return res;
 800b9f8:	7ffb      	ldrb	r3, [r7, #31]
 800b9fa:	e088      	b.n	800bb0e <SD_write+0x13e>
  }

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
 800b9fc:	68bb      	ldr	r3, [r7, #8]
 800b9fe:	f003 0303 	and.w	r3, r3, #3
 800ba02:	2b00      	cmp	r3, #0
 800ba04:	f040 8082 	bne.w	800bb0c <SD_write+0x13c>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 800ba08:	683a      	ldr	r2, [r7, #0]
 800ba0a:	6879      	ldr	r1, [r7, #4]
 800ba0c:	68b8      	ldr	r0, [r7, #8]
 800ba0e:	f7ff fe71 	bl	800b6f4 <BSP_SD_WriteBlocks_DMA>
 800ba12:	4603      	mov	r3, r0
 800ba14:	2b00      	cmp	r3, #0
 800ba16:	d130      	bne.n	800ba7a <SD_write+0xaa>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 800ba18:	f7f7 fae8 	bl	8002fec <HAL_GetTick>
 800ba1c:	6178      	str	r0, [r7, #20]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800ba1e:	bf00      	nop
 800ba20:	4b3d      	ldr	r3, [pc, #244]	; (800bb18 <SD_write+0x148>)
 800ba22:	681b      	ldr	r3, [r3, #0]
 800ba24:	2b00      	cmp	r3, #0
 800ba26:	d108      	bne.n	800ba3a <SD_write+0x6a>
 800ba28:	f7f7 fae0 	bl	8002fec <HAL_GetTick>
 800ba2c:	4602      	mov	r2, r0
 800ba2e:	697b      	ldr	r3, [r7, #20]
 800ba30:	1ad3      	subs	r3, r2, r3
 800ba32:	f247 522f 	movw	r2, #29999	; 0x752f
 800ba36:	4293      	cmp	r3, r2
 800ba38:	d9f2      	bls.n	800ba20 <SD_write+0x50>
      {
      }
      /* incase of a timeout return error */
      if (WriteStatus == 0)
 800ba3a:	4b37      	ldr	r3, [pc, #220]	; (800bb18 <SD_write+0x148>)
 800ba3c:	681b      	ldr	r3, [r3, #0]
 800ba3e:	2b00      	cmp	r3, #0
 800ba40:	d102      	bne.n	800ba48 <SD_write+0x78>
      {
        res = RES_ERROR;
 800ba42:	2301      	movs	r3, #1
 800ba44:	77fb      	strb	r3, [r7, #31]
 800ba46:	e061      	b.n	800bb0c <SD_write+0x13c>
      }
      else
      {
        WriteStatus = 0;
 800ba48:	4b33      	ldr	r3, [pc, #204]	; (800bb18 <SD_write+0x148>)
 800ba4a:	2200      	movs	r2, #0
 800ba4c:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 800ba4e:	f7f7 facd 	bl	8002fec <HAL_GetTick>
 800ba52:	6178      	str	r0, [r7, #20]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800ba54:	e007      	b.n	800ba66 <SD_write+0x96>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800ba56:	f7ff fe67 	bl	800b728 <BSP_SD_GetCardState>
 800ba5a:	4603      	mov	r3, r0
 800ba5c:	2b00      	cmp	r3, #0
 800ba5e:	d102      	bne.n	800ba66 <SD_write+0x96>
          {
            res = RES_OK;
 800ba60:	2300      	movs	r3, #0
 800ba62:	77fb      	strb	r3, [r7, #31]
            break;
 800ba64:	e052      	b.n	800bb0c <SD_write+0x13c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800ba66:	f7f7 fac1 	bl	8002fec <HAL_GetTick>
 800ba6a:	4602      	mov	r2, r0
 800ba6c:	697b      	ldr	r3, [r7, #20]
 800ba6e:	1ad3      	subs	r3, r2, r3
 800ba70:	f247 522f 	movw	r2, #29999	; 0x752f
 800ba74:	4293      	cmp	r3, r2
 800ba76:	d9ee      	bls.n	800ba56 <SD_write+0x86>
 800ba78:	e048      	b.n	800bb0c <SD_write+0x13c>
      * invalidate the scratch buffer before the next write to get the actual data instead of the cached one
      */
      SCB_InvalidateDCache_by_Addr((uint32_t*)scratch, BLOCKSIZE);
#endif

      for (i = 0; i < count; i++)
 800ba7a:	2300      	movs	r3, #0
 800ba7c:	61bb      	str	r3, [r7, #24]
 800ba7e:	e034      	b.n	800baea <SD_write+0x11a>
      {
        WriteStatus = 0;
 800ba80:	4b25      	ldr	r3, [pc, #148]	; (800bb18 <SD_write+0x148>)
 800ba82:	2200      	movs	r2, #0
 800ba84:	601a      	str	r2, [r3, #0]
        ret = BSP_SD_WriteBlocks_DMA((uint32_t*)scratch, (uint32_t)sector++, 1);
 800ba86:	687b      	ldr	r3, [r7, #4]
 800ba88:	1c5a      	adds	r2, r3, #1
 800ba8a:	607a      	str	r2, [r7, #4]
 800ba8c:	2201      	movs	r2, #1
 800ba8e:	4619      	mov	r1, r3
 800ba90:	4822      	ldr	r0, [pc, #136]	; (800bb1c <SD_write+0x14c>)
 800ba92:	f7ff fe2f 	bl	800b6f4 <BSP_SD_WriteBlocks_DMA>
 800ba96:	4603      	mov	r3, r0
 800ba98:	77bb      	strb	r3, [r7, #30]
        if (ret == MSD_OK) {
 800ba9a:	7fbb      	ldrb	r3, [r7, #30]
 800ba9c:	2b00      	cmp	r3, #0
 800ba9e:	d129      	bne.n	800baf4 <SD_write+0x124>
          /* wait for a message from the queue or a timeout */
          timeout = HAL_GetTick();
 800baa0:	f7f7 faa4 	bl	8002fec <HAL_GetTick>
 800baa4:	6178      	str	r0, [r7, #20]
          while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800baa6:	bf00      	nop
 800baa8:	4b1b      	ldr	r3, [pc, #108]	; (800bb18 <SD_write+0x148>)
 800baaa:	681b      	ldr	r3, [r3, #0]
 800baac:	2b00      	cmp	r3, #0
 800baae:	d108      	bne.n	800bac2 <SD_write+0xf2>
 800bab0:	f7f7 fa9c 	bl	8002fec <HAL_GetTick>
 800bab4:	4602      	mov	r2, r0
 800bab6:	697b      	ldr	r3, [r7, #20]
 800bab8:	1ad3      	subs	r3, r2, r3
 800baba:	f247 522f 	movw	r2, #29999	; 0x752f
 800babe:	4293      	cmp	r3, r2
 800bac0:	d9f2      	bls.n	800baa8 <SD_write+0xd8>
          {
          }
          if (WriteStatus == 0)
 800bac2:	4b15      	ldr	r3, [pc, #84]	; (800bb18 <SD_write+0x148>)
 800bac4:	681b      	ldr	r3, [r3, #0]
 800bac6:	2b00      	cmp	r3, #0
 800bac8:	d016      	beq.n	800baf8 <SD_write+0x128>
          {
            break;
          }

          memcpy((void *)buff, (void *)scratch, BLOCKSIZE);
 800baca:	68bb      	ldr	r3, [r7, #8]
 800bacc:	4a13      	ldr	r2, [pc, #76]	; (800bb1c <SD_write+0x14c>)
 800bace:	4618      	mov	r0, r3
 800bad0:	4611      	mov	r1, r2
 800bad2:	f44f 7300 	mov.w	r3, #512	; 0x200
 800bad6:	461a      	mov	r2, r3
 800bad8:	f002 f964 	bl	800dda4 <memcpy>
          buff += BLOCKSIZE;
 800badc:	68bb      	ldr	r3, [r7, #8]
 800bade:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800bae2:	60bb      	str	r3, [r7, #8]
      for (i = 0; i < count; i++)
 800bae4:	69bb      	ldr	r3, [r7, #24]
 800bae6:	3301      	adds	r3, #1
 800bae8:	61bb      	str	r3, [r7, #24]
 800baea:	69bb      	ldr	r3, [r7, #24]
 800baec:	683a      	ldr	r2, [r7, #0]
 800baee:	429a      	cmp	r2, r3
 800baf0:	d8c6      	bhi.n	800ba80 <SD_write+0xb0>
 800baf2:	e002      	b.n	800bafa <SD_write+0x12a>
        }
        else
        {
          break;
 800baf4:	bf00      	nop
 800baf6:	e000      	b.n	800bafa <SD_write+0x12a>
            break;
 800baf8:	bf00      	nop
        }
      }
      if ((i == count) && (ret == MSD_OK))
 800bafa:	69bb      	ldr	r3, [r7, #24]
 800bafc:	683a      	ldr	r2, [r7, #0]
 800bafe:	429a      	cmp	r2, r3
 800bb00:	d104      	bne.n	800bb0c <SD_write+0x13c>
 800bb02:	7fbb      	ldrb	r3, [r7, #30]
 800bb04:	2b00      	cmp	r3, #0
 800bb06:	d101      	bne.n	800bb0c <SD_write+0x13c>
        res = RES_OK;
 800bb08:	2300      	movs	r3, #0
 800bb0a:	77fb      	strb	r3, [r7, #31]
    }

  }
  return res;
 800bb0c:	7ffb      	ldrb	r3, [r7, #31]
}
 800bb0e:	4618      	mov	r0, r3
 800bb10:	3720      	adds	r7, #32
 800bb12:	46bd      	mov	sp, r7
 800bb14:	bd80      	pop	{r7, pc}
 800bb16:	bf00      	nop
 800bb18:	2000097c 	.word	0x2000097c
 800bb1c:	2000077c 	.word	0x2000077c

0800bb20 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800bb20:	b580      	push	{r7, lr}
 800bb22:	b08c      	sub	sp, #48	; 0x30
 800bb24:	af00      	add	r7, sp, #0
 800bb26:	4603      	mov	r3, r0
 800bb28:	603a      	str	r2, [r7, #0]
 800bb2a:	71fb      	strb	r3, [r7, #7]
 800bb2c:	460b      	mov	r3, r1
 800bb2e:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800bb30:	2301      	movs	r3, #1
 800bb32:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800bb36:	4b25      	ldr	r3, [pc, #148]	; (800bbcc <SD_ioctl+0xac>)
 800bb38:	781b      	ldrb	r3, [r3, #0]
 800bb3a:	b2db      	uxtb	r3, r3
 800bb3c:	f003 0301 	and.w	r3, r3, #1
 800bb40:	2b00      	cmp	r3, #0
 800bb42:	d001      	beq.n	800bb48 <SD_ioctl+0x28>
 800bb44:	2303      	movs	r3, #3
 800bb46:	e03c      	b.n	800bbc2 <SD_ioctl+0xa2>

  switch (cmd)
 800bb48:	79bb      	ldrb	r3, [r7, #6]
 800bb4a:	2b03      	cmp	r3, #3
 800bb4c:	d834      	bhi.n	800bbb8 <SD_ioctl+0x98>
 800bb4e:	a201      	add	r2, pc, #4	; (adr r2, 800bb54 <SD_ioctl+0x34>)
 800bb50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bb54:	0800bb65 	.word	0x0800bb65
 800bb58:	0800bb6d 	.word	0x0800bb6d
 800bb5c:	0800bb85 	.word	0x0800bb85
 800bb60:	0800bb9f 	.word	0x0800bb9f
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800bb64:	2300      	movs	r3, #0
 800bb66:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800bb6a:	e028      	b.n	800bbbe <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800bb6c:	f107 030c 	add.w	r3, r7, #12
 800bb70:	4618      	mov	r0, r3
 800bb72:	f7ff fde9 	bl	800b748 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800bb76:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bb78:	683b      	ldr	r3, [r7, #0]
 800bb7a:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800bb7c:	2300      	movs	r3, #0
 800bb7e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800bb82:	e01c      	b.n	800bbbe <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800bb84:	f107 030c 	add.w	r3, r7, #12
 800bb88:	4618      	mov	r0, r3
 800bb8a:	f7ff fddd 	bl	800b748 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800bb8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb90:	b29a      	uxth	r2, r3
 800bb92:	683b      	ldr	r3, [r7, #0]
 800bb94:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800bb96:	2300      	movs	r3, #0
 800bb98:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800bb9c:	e00f      	b.n	800bbbe <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800bb9e:	f107 030c 	add.w	r3, r7, #12
 800bba2:	4618      	mov	r0, r3
 800bba4:	f7ff fdd0 	bl	800b748 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800bba8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bbaa:	0a5a      	lsrs	r2, r3, #9
 800bbac:	683b      	ldr	r3, [r7, #0]
 800bbae:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800bbb0:	2300      	movs	r3, #0
 800bbb2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800bbb6:	e002      	b.n	800bbbe <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800bbb8:	2304      	movs	r3, #4
 800bbba:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800bbbe:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800bbc2:	4618      	mov	r0, r3
 800bbc4:	3730      	adds	r7, #48	; 0x30
 800bbc6:	46bd      	mov	sp, r7
 800bbc8:	bd80      	pop	{r7, pc}
 800bbca:	bf00      	nop
 800bbcc:	20000011 	.word	0x20000011

0800bbd0 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init (USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800bbd0:	b580      	push	{r7, lr}
 800bbd2:	b084      	sub	sp, #16
 800bbd4:	af00      	add	r7, sp, #0
 800bbd6:	6078      	str	r0, [r7, #4]
 800bbd8:	460b      	mov	r3, r1
 800bbda:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800bbdc:	2300      	movs	r3, #0
 800bbde:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if(pdev->dev_speed == USBD_SPEED_HIGH)
 800bbe0:	687b      	ldr	r3, [r7, #4]
 800bbe2:	7c1b      	ldrb	r3, [r3, #16]
 800bbe4:	2b00      	cmp	r3, #0
 800bbe6:	d115      	bne.n	800bc14 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800bbe8:	f44f 7300 	mov.w	r3, #512	; 0x200
 800bbec:	2202      	movs	r2, #2
 800bbee:	2181      	movs	r1, #129	; 0x81
 800bbf0:	6878      	ldr	r0, [r7, #4]
 800bbf2:	f001 ff50 	bl	800da96 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800bbf6:	687b      	ldr	r3, [r7, #4]
 800bbf8:	2201      	movs	r2, #1
 800bbfa:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800bbfc:	f44f 7300 	mov.w	r3, #512	; 0x200
 800bc00:	2202      	movs	r2, #2
 800bc02:	2101      	movs	r1, #1
 800bc04:	6878      	ldr	r0, [r7, #4]
 800bc06:	f001 ff46 	bl	800da96 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800bc0a:	687b      	ldr	r3, [r7, #4]
 800bc0c:	2201      	movs	r2, #1
 800bc0e:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
 800bc12:	e012      	b.n	800bc3a <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800bc14:	2340      	movs	r3, #64	; 0x40
 800bc16:	2202      	movs	r2, #2
 800bc18:	2181      	movs	r1, #129	; 0x81
 800bc1a:	6878      	ldr	r0, [r7, #4]
 800bc1c:	f001 ff3b 	bl	800da96 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800bc20:	687b      	ldr	r3, [r7, #4]
 800bc22:	2201      	movs	r2, #1
 800bc24:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800bc26:	2340      	movs	r3, #64	; 0x40
 800bc28:	2202      	movs	r2, #2
 800bc2a:	2101      	movs	r1, #1
 800bc2c:	6878      	ldr	r0, [r7, #4]
 800bc2e:	f001 ff32 	bl	800da96 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800bc32:	687b      	ldr	r3, [r7, #4]
 800bc34:	2201      	movs	r2, #1
 800bc36:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800bc3a:	2308      	movs	r3, #8
 800bc3c:	2203      	movs	r2, #3
 800bc3e:	2182      	movs	r1, #130	; 0x82
 800bc40:	6878      	ldr	r0, [r7, #4]
 800bc42:	f001 ff28 	bl	800da96 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800bc46:	687b      	ldr	r3, [r7, #4]
 800bc48:	2201      	movs	r2, #1
 800bc4a:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof (USBD_CDC_HandleTypeDef));
 800bc4c:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800bc50:	f002 f898 	bl	800dd84 <malloc>
 800bc54:	4603      	mov	r3, r0
 800bc56:	461a      	mov	r2, r3
 800bc58:	687b      	ldr	r3, [r7, #4]
 800bc5a:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290

  if(pdev->pClassData == NULL)
 800bc5e:	687b      	ldr	r3, [r7, #4]
 800bc60:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800bc64:	2b00      	cmp	r3, #0
 800bc66:	d102      	bne.n	800bc6e <USBD_CDC_Init+0x9e>
  {
    ret = 1U;
 800bc68:	2301      	movs	r3, #1
 800bc6a:	73fb      	strb	r3, [r7, #15]
 800bc6c:	e026      	b.n	800bcbc <USBD_CDC_Init+0xec>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800bc6e:	687b      	ldr	r3, [r7, #4]
 800bc70:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800bc74:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800bc76:	687b      	ldr	r3, [r7, #4]
 800bc78:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800bc7c:	681b      	ldr	r3, [r3, #0]
 800bc7e:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 800bc80:	68bb      	ldr	r3, [r7, #8]
 800bc82:	2200      	movs	r2, #0
 800bc84:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 800bc88:	68bb      	ldr	r3, [r7, #8]
 800bc8a:	2200      	movs	r2, #0
 800bc8c:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if(pdev->dev_speed == USBD_SPEED_HIGH)
 800bc90:	687b      	ldr	r3, [r7, #4]
 800bc92:	7c1b      	ldrb	r3, [r3, #16]
 800bc94:	2b00      	cmp	r3, #0
 800bc96:	d109      	bne.n	800bcac <USBD_CDC_Init+0xdc>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800bc98:	68bb      	ldr	r3, [r7, #8]
 800bc9a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800bc9e:	f44f 7300 	mov.w	r3, #512	; 0x200
 800bca2:	2101      	movs	r1, #1
 800bca4:	6878      	ldr	r0, [r7, #4]
 800bca6:	f001 ffe7 	bl	800dc78 <USBD_LL_PrepareReceive>
 800bcaa:	e007      	b.n	800bcbc <USBD_CDC_Init+0xec>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800bcac:	68bb      	ldr	r3, [r7, #8]
 800bcae:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800bcb2:	2340      	movs	r3, #64	; 0x40
 800bcb4:	2101      	movs	r1, #1
 800bcb6:	6878      	ldr	r0, [r7, #4]
 800bcb8:	f001 ffde 	bl	800dc78 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 800bcbc:	7bfb      	ldrb	r3, [r7, #15]
}
 800bcbe:	4618      	mov	r0, r3
 800bcc0:	3710      	adds	r7, #16
 800bcc2:	46bd      	mov	sp, r7
 800bcc4:	bd80      	pop	{r7, pc}

0800bcc6 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit (USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800bcc6:	b580      	push	{r7, lr}
 800bcc8:	b084      	sub	sp, #16
 800bcca:	af00      	add	r7, sp, #0
 800bccc:	6078      	str	r0, [r7, #4]
 800bcce:	460b      	mov	r3, r1
 800bcd0:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800bcd2:	2300      	movs	r3, #0
 800bcd4:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800bcd6:	2181      	movs	r1, #129	; 0x81
 800bcd8:	6878      	ldr	r0, [r7, #4]
 800bcda:	f001 ff02 	bl	800dae2 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800bcde:	687b      	ldr	r3, [r7, #4]
 800bce0:	2200      	movs	r2, #0
 800bce2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800bce4:	2101      	movs	r1, #1
 800bce6:	6878      	ldr	r0, [r7, #4]
 800bce8:	f001 fefb 	bl	800dae2 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800bcec:	687b      	ldr	r3, [r7, #4]
 800bcee:	2200      	movs	r2, #0
 800bcf0:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800bcf4:	2182      	movs	r1, #130	; 0x82
 800bcf6:	6878      	ldr	r0, [r7, #4]
 800bcf8:	f001 fef3 	bl	800dae2 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800bcfc:	687b      	ldr	r3, [r7, #4]
 800bcfe:	2200      	movs	r2, #0
 800bd00:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if(pdev->pClassData != NULL)
 800bd02:	687b      	ldr	r3, [r7, #4]
 800bd04:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800bd08:	2b00      	cmp	r3, #0
 800bd0a:	d00e      	beq.n	800bd2a <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800bd0c:	687b      	ldr	r3, [r7, #4]
 800bd0e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800bd12:	685b      	ldr	r3, [r3, #4]
 800bd14:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 800bd16:	687b      	ldr	r3, [r7, #4]
 800bd18:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800bd1c:	4618      	mov	r0, r3
 800bd1e:	f002 f839 	bl	800dd94 <free>
    pdev->pClassData = NULL;
 800bd22:	687b      	ldr	r3, [r7, #4]
 800bd24:	2200      	movs	r2, #0
 800bd26:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290
  }

  return ret;
 800bd2a:	7bfb      	ldrb	r3, [r7, #15]
}
 800bd2c:	4618      	mov	r0, r3
 800bd2e:	3710      	adds	r7, #16
 800bd30:	46bd      	mov	sp, r7
 800bd32:	bd80      	pop	{r7, pc}

0800bd34 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup (USBD_HandleTypeDef *pdev,
                                USBD_SetupReqTypedef *req)
{
 800bd34:	b580      	push	{r7, lr}
 800bd36:	b086      	sub	sp, #24
 800bd38:	af00      	add	r7, sp, #0
 800bd3a:	6078      	str	r0, [r7, #4]
 800bd3c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800bd3e:	687b      	ldr	r3, [r7, #4]
 800bd40:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800bd44:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 800bd46:	2300      	movs	r3, #0
 800bd48:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 800bd4a:	2300      	movs	r3, #0
 800bd4c:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 800bd4e:	2300      	movs	r3, #0
 800bd50:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800bd52:	683b      	ldr	r3, [r7, #0]
 800bd54:	781b      	ldrb	r3, [r3, #0]
 800bd56:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800bd5a:	2b00      	cmp	r3, #0
 800bd5c:	d039      	beq.n	800bdd2 <USBD_CDC_Setup+0x9e>
 800bd5e:	2b20      	cmp	r3, #32
 800bd60:	d17c      	bne.n	800be5c <USBD_CDC_Setup+0x128>
  {
  case USB_REQ_TYPE_CLASS :
    if (req->wLength)
 800bd62:	683b      	ldr	r3, [r7, #0]
 800bd64:	88db      	ldrh	r3, [r3, #6]
 800bd66:	2b00      	cmp	r3, #0
 800bd68:	d029      	beq.n	800bdbe <USBD_CDC_Setup+0x8a>
    {
      if (req->bmRequest & 0x80U)
 800bd6a:	683b      	ldr	r3, [r7, #0]
 800bd6c:	781b      	ldrb	r3, [r3, #0]
 800bd6e:	b25b      	sxtb	r3, r3
 800bd70:	2b00      	cmp	r3, #0
 800bd72:	da11      	bge.n	800bd98 <USBD_CDC_Setup+0x64>
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800bd74:	687b      	ldr	r3, [r7, #4]
 800bd76:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800bd7a:	689b      	ldr	r3, [r3, #8]
 800bd7c:	683a      	ldr	r2, [r7, #0]
 800bd7e:	7850      	ldrb	r0, [r2, #1]
                                                          (uint8_t *)(void *)hcdc->data,
 800bd80:	6939      	ldr	r1, [r7, #16]
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800bd82:	683a      	ldr	r2, [r7, #0]
 800bd84:	88d2      	ldrh	r2, [r2, #6]
 800bd86:	4798      	blx	r3
                                                          req->wLength);

          USBD_CtlSendData (pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800bd88:	6939      	ldr	r1, [r7, #16]
 800bd8a:	683b      	ldr	r3, [r7, #0]
 800bd8c:	88db      	ldrh	r3, [r3, #6]
 800bd8e:	461a      	mov	r2, r3
 800bd90:	6878      	ldr	r0, [r7, #4]
 800bd92:	f001 f9c9 	bl	800d128 <USBD_CtlSendData>
    else
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                        (uint8_t *)(void *)req, 0U);
    }
    break;
 800bd96:	e068      	b.n	800be6a <USBD_CDC_Setup+0x136>
        hcdc->CmdOpCode = req->bRequest;
 800bd98:	683b      	ldr	r3, [r7, #0]
 800bd9a:	785a      	ldrb	r2, [r3, #1]
 800bd9c:	693b      	ldr	r3, [r7, #16]
 800bd9e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
        hcdc->CmdLength = (uint8_t)req->wLength;
 800bda2:	683b      	ldr	r3, [r7, #0]
 800bda4:	88db      	ldrh	r3, [r3, #6]
 800bda6:	b2da      	uxtb	r2, r3
 800bda8:	693b      	ldr	r3, [r7, #16]
 800bdaa:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
        USBD_CtlPrepareRx (pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800bdae:	6939      	ldr	r1, [r7, #16]
 800bdb0:	683b      	ldr	r3, [r7, #0]
 800bdb2:	88db      	ldrh	r3, [r3, #6]
 800bdb4:	461a      	mov	r2, r3
 800bdb6:	6878      	ldr	r0, [r7, #4]
 800bdb8:	f001 f9e4 	bl	800d184 <USBD_CtlPrepareRx>
    break;
 800bdbc:	e055      	b.n	800be6a <USBD_CDC_Setup+0x136>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800bdbe:	687b      	ldr	r3, [r7, #4]
 800bdc0:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800bdc4:	689b      	ldr	r3, [r3, #8]
 800bdc6:	683a      	ldr	r2, [r7, #0]
 800bdc8:	7850      	ldrb	r0, [r2, #1]
 800bdca:	2200      	movs	r2, #0
 800bdcc:	6839      	ldr	r1, [r7, #0]
 800bdce:	4798      	blx	r3
    break;
 800bdd0:	e04b      	b.n	800be6a <USBD_CDC_Setup+0x136>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800bdd2:	683b      	ldr	r3, [r7, #0]
 800bdd4:	785b      	ldrb	r3, [r3, #1]
 800bdd6:	2b0a      	cmp	r3, #10
 800bdd8:	d017      	beq.n	800be0a <USBD_CDC_Setup+0xd6>
 800bdda:	2b0b      	cmp	r3, #11
 800bddc:	d029      	beq.n	800be32 <USBD_CDC_Setup+0xfe>
 800bdde:	2b00      	cmp	r3, #0
 800bde0:	d133      	bne.n	800be4a <USBD_CDC_Setup+0x116>
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bde2:	687b      	ldr	r3, [r7, #4]
 800bde4:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800bde8:	2b03      	cmp	r3, #3
 800bdea:	d107      	bne.n	800bdfc <USBD_CDC_Setup+0xc8>
      {
        USBD_CtlSendData (pdev, (uint8_t *)(void *)&status_info, 2U);
 800bdec:	f107 030c 	add.w	r3, r7, #12
 800bdf0:	2202      	movs	r2, #2
 800bdf2:	4619      	mov	r1, r3
 800bdf4:	6878      	ldr	r0, [r7, #4]
 800bdf6:	f001 f997 	bl	800d128 <USBD_CtlSendData>
      else
      {
        USBD_CtlError (pdev, req);
			  ret = USBD_FAIL;
      }
      break;
 800bdfa:	e02e      	b.n	800be5a <USBD_CDC_Setup+0x126>
        USBD_CtlError (pdev, req);
 800bdfc:	6839      	ldr	r1, [r7, #0]
 800bdfe:	6878      	ldr	r0, [r7, #4]
 800be00:	f001 f927 	bl	800d052 <USBD_CtlError>
			  ret = USBD_FAIL;
 800be04:	2302      	movs	r3, #2
 800be06:	75fb      	strb	r3, [r7, #23]
      break;
 800be08:	e027      	b.n	800be5a <USBD_CDC_Setup+0x126>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800be0a:	687b      	ldr	r3, [r7, #4]
 800be0c:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800be10:	2b03      	cmp	r3, #3
 800be12:	d107      	bne.n	800be24 <USBD_CDC_Setup+0xf0>
      {
        USBD_CtlSendData (pdev, &ifalt, 1U);
 800be14:	f107 030f 	add.w	r3, r7, #15
 800be18:	2201      	movs	r2, #1
 800be1a:	4619      	mov	r1, r3
 800be1c:	6878      	ldr	r0, [r7, #4]
 800be1e:	f001 f983 	bl	800d128 <USBD_CtlSendData>
      else
      {
        USBD_CtlError (pdev, req);
			  ret = USBD_FAIL;
      }
      break;
 800be22:	e01a      	b.n	800be5a <USBD_CDC_Setup+0x126>
        USBD_CtlError (pdev, req);
 800be24:	6839      	ldr	r1, [r7, #0]
 800be26:	6878      	ldr	r0, [r7, #4]
 800be28:	f001 f913 	bl	800d052 <USBD_CtlError>
			  ret = USBD_FAIL;
 800be2c:	2302      	movs	r3, #2
 800be2e:	75fb      	strb	r3, [r7, #23]
      break;
 800be30:	e013      	b.n	800be5a <USBD_CDC_Setup+0x126>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800be32:	687b      	ldr	r3, [r7, #4]
 800be34:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800be38:	2b03      	cmp	r3, #3
 800be3a:	d00d      	beq.n	800be58 <USBD_CDC_Setup+0x124>
      {
        USBD_CtlError (pdev, req);
 800be3c:	6839      	ldr	r1, [r7, #0]
 800be3e:	6878      	ldr	r0, [r7, #4]
 800be40:	f001 f907 	bl	800d052 <USBD_CtlError>
			  ret = USBD_FAIL;
 800be44:	2302      	movs	r3, #2
 800be46:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800be48:	e006      	b.n	800be58 <USBD_CDC_Setup+0x124>

    default:
      USBD_CtlError (pdev, req);
 800be4a:	6839      	ldr	r1, [r7, #0]
 800be4c:	6878      	ldr	r0, [r7, #4]
 800be4e:	f001 f900 	bl	800d052 <USBD_CtlError>
      ret = USBD_FAIL;
 800be52:	2302      	movs	r3, #2
 800be54:	75fb      	strb	r3, [r7, #23]
      break;
 800be56:	e000      	b.n	800be5a <USBD_CDC_Setup+0x126>
      break;
 800be58:	bf00      	nop
    }
    break;
 800be5a:	e006      	b.n	800be6a <USBD_CDC_Setup+0x136>

  default:
    USBD_CtlError (pdev, req);
 800be5c:	6839      	ldr	r1, [r7, #0]
 800be5e:	6878      	ldr	r0, [r7, #4]
 800be60:	f001 f8f7 	bl	800d052 <USBD_CtlError>
    ret = USBD_FAIL;
 800be64:	2302      	movs	r3, #2
 800be66:	75fb      	strb	r3, [r7, #23]
    break;
 800be68:	bf00      	nop
  }

  return ret;
 800be6a:	7dfb      	ldrb	r3, [r7, #23]
}
 800be6c:	4618      	mov	r0, r3
 800be6e:	3718      	adds	r7, #24
 800be70:	46bd      	mov	sp, r7
 800be72:	bd80      	pop	{r7, pc}

0800be74 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800be74:	b580      	push	{r7, lr}
 800be76:	b084      	sub	sp, #16
 800be78:	af00      	add	r7, sp, #0
 800be7a:	6078      	str	r0, [r7, #4]
 800be7c:	460b      	mov	r3, r1
 800be7e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)pdev->pClassData;
 800be80:	687b      	ldr	r3, [r7, #4]
 800be82:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800be86:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800be88:	687b      	ldr	r3, [r7, #4]
 800be8a:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800be8e:	60bb      	str	r3, [r7, #8]

  if(pdev->pClassData != NULL)
 800be90:	687b      	ldr	r3, [r7, #4]
 800be92:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800be96:	2b00      	cmp	r3, #0
 800be98:	d03a      	beq.n	800bf10 <USBD_CDC_DataIn+0x9c>
  {
    if((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800be9a:	78fa      	ldrb	r2, [r7, #3]
 800be9c:	6879      	ldr	r1, [r7, #4]
 800be9e:	4613      	mov	r3, r2
 800bea0:	009b      	lsls	r3, r3, #2
 800bea2:	4413      	add	r3, r2
 800bea4:	009b      	lsls	r3, r3, #2
 800bea6:	440b      	add	r3, r1
 800bea8:	331c      	adds	r3, #28
 800beaa:	681b      	ldr	r3, [r3, #0]
 800beac:	2b00      	cmp	r3, #0
 800beae:	d029      	beq.n	800bf04 <USBD_CDC_DataIn+0x90>
 800beb0:	78fa      	ldrb	r2, [r7, #3]
 800beb2:	6879      	ldr	r1, [r7, #4]
 800beb4:	4613      	mov	r3, r2
 800beb6:	009b      	lsls	r3, r3, #2
 800beb8:	4413      	add	r3, r2
 800beba:	009b      	lsls	r3, r3, #2
 800bebc:	440b      	add	r3, r1
 800bebe:	331c      	adds	r3, #28
 800bec0:	681a      	ldr	r2, [r3, #0]
 800bec2:	78f9      	ldrb	r1, [r7, #3]
 800bec4:	68b8      	ldr	r0, [r7, #8]
 800bec6:	460b      	mov	r3, r1
 800bec8:	00db      	lsls	r3, r3, #3
 800beca:	1a5b      	subs	r3, r3, r1
 800becc:	009b      	lsls	r3, r3, #2
 800bece:	4403      	add	r3, r0
 800bed0:	3344      	adds	r3, #68	; 0x44
 800bed2:	681b      	ldr	r3, [r3, #0]
 800bed4:	fbb2 f1f3 	udiv	r1, r2, r3
 800bed8:	fb03 f301 	mul.w	r3, r3, r1
 800bedc:	1ad3      	subs	r3, r2, r3
 800bede:	2b00      	cmp	r3, #0
 800bee0:	d110      	bne.n	800bf04 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 800bee2:	78fa      	ldrb	r2, [r7, #3]
 800bee4:	6879      	ldr	r1, [r7, #4]
 800bee6:	4613      	mov	r3, r2
 800bee8:	009b      	lsls	r3, r3, #2
 800beea:	4413      	add	r3, r2
 800beec:	009b      	lsls	r3, r3, #2
 800beee:	440b      	add	r3, r1
 800bef0:	331c      	adds	r3, #28
 800bef2:	2200      	movs	r2, #0
 800bef4:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit (pdev, epnum, NULL, 0U);
 800bef6:	78f9      	ldrb	r1, [r7, #3]
 800bef8:	2300      	movs	r3, #0
 800befa:	2200      	movs	r2, #0
 800befc:	6878      	ldr	r0, [r7, #4]
 800befe:	f001 fe98 	bl	800dc32 <USBD_LL_Transmit>
 800bf02:	e003      	b.n	800bf0c <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 800bf04:	68fb      	ldr	r3, [r7, #12]
 800bf06:	2200      	movs	r2, #0
 800bf08:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 800bf0c:	2300      	movs	r3, #0
 800bf0e:	e000      	b.n	800bf12 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 800bf10:	2302      	movs	r3, #2
  }
}
 800bf12:	4618      	mov	r0, r3
 800bf14:	3710      	adds	r7, #16
 800bf16:	46bd      	mov	sp, r7
 800bf18:	bd80      	pop	{r7, pc}

0800bf1a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800bf1a:	b580      	push	{r7, lr}
 800bf1c:	b084      	sub	sp, #16
 800bf1e:	af00      	add	r7, sp, #0
 800bf20:	6078      	str	r0, [r7, #4]
 800bf22:	460b      	mov	r3, r1
 800bf24:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800bf26:	687b      	ldr	r3, [r7, #4]
 800bf28:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800bf2c:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize (pdev, epnum);
 800bf2e:	78fb      	ldrb	r3, [r7, #3]
 800bf30:	4619      	mov	r1, r3
 800bf32:	6878      	ldr	r0, [r7, #4]
 800bf34:	f001 fec3 	bl	800dcbe <USBD_LL_GetRxDataSize>
 800bf38:	4602      	mov	r2, r0
 800bf3a:	68fb      	ldr	r3, [r7, #12]
 800bf3c:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if(pdev->pClassData != NULL)
 800bf40:	687b      	ldr	r3, [r7, #4]
 800bf42:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800bf46:	2b00      	cmp	r3, #0
 800bf48:	d00d      	beq.n	800bf66 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800bf4a:	687b      	ldr	r3, [r7, #4]
 800bf4c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800bf50:	68db      	ldr	r3, [r3, #12]
 800bf52:	68fa      	ldr	r2, [r7, #12]
 800bf54:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800bf58:	68fa      	ldr	r2, [r7, #12]
 800bf5a:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800bf5e:	4611      	mov	r1, r2
 800bf60:	4798      	blx	r3

    return USBD_OK;
 800bf62:	2300      	movs	r3, #0
 800bf64:	e000      	b.n	800bf68 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 800bf66:	2302      	movs	r3, #2
  }
}
 800bf68:	4618      	mov	r0, r3
 800bf6a:	3710      	adds	r7, #16
 800bf6c:	46bd      	mov	sp, r7
 800bf6e:	bd80      	pop	{r7, pc}

0800bf70 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady (USBD_HandleTypeDef *pdev)
{
 800bf70:	b580      	push	{r7, lr}
 800bf72:	b084      	sub	sp, #16
 800bf74:	af00      	add	r7, sp, #0
 800bf76:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800bf78:	687b      	ldr	r3, [r7, #4]
 800bf7a:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800bf7e:	60fb      	str	r3, [r7, #12]

  if((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800bf80:	687b      	ldr	r3, [r7, #4]
 800bf82:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800bf86:	2b00      	cmp	r3, #0
 800bf88:	d015      	beq.n	800bfb6 <USBD_CDC_EP0_RxReady+0x46>
 800bf8a:	68fb      	ldr	r3, [r7, #12]
 800bf8c:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800bf90:	2bff      	cmp	r3, #255	; 0xff
 800bf92:	d010      	beq.n	800bfb6 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800bf94:	687b      	ldr	r3, [r7, #4]
 800bf96:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800bf9a:	689b      	ldr	r3, [r3, #8]
 800bf9c:	68fa      	ldr	r2, [r7, #12]
 800bf9e:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 800bfa2:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800bfa4:	68fa      	ldr	r2, [r7, #12]
 800bfa6:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800bfaa:	b292      	uxth	r2, r2
 800bfac:	4798      	blx	r3
      hcdc->CmdOpCode = 0xFFU;
 800bfae:	68fb      	ldr	r3, [r7, #12]
 800bfb0:	22ff      	movs	r2, #255	; 0xff
 800bfb2:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 800bfb6:	2300      	movs	r3, #0
}
 800bfb8:	4618      	mov	r0, r3
 800bfba:	3710      	adds	r7, #16
 800bfbc:	46bd      	mov	sp, r7
 800bfbe:	bd80      	pop	{r7, pc}

0800bfc0 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc (uint16_t *length)
{
 800bfc0:	b480      	push	{r7}
 800bfc2:	b083      	sub	sp, #12
 800bfc4:	af00      	add	r7, sp, #0
 800bfc6:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_CfgFSDesc);
 800bfc8:	687b      	ldr	r3, [r7, #4]
 800bfca:	2243      	movs	r2, #67	; 0x43
 800bfcc:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 800bfce:	4b03      	ldr	r3, [pc, #12]	; (800bfdc <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800bfd0:	4618      	mov	r0, r3
 800bfd2:	370c      	adds	r7, #12
 800bfd4:	46bd      	mov	sp, r7
 800bfd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfda:	4770      	bx	lr
 800bfdc:	2000009c 	.word	0x2000009c

0800bfe0 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc (uint16_t *length)
{
 800bfe0:	b480      	push	{r7}
 800bfe2:	b083      	sub	sp, #12
 800bfe4:	af00      	add	r7, sp, #0
 800bfe6:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_CfgHSDesc);
 800bfe8:	687b      	ldr	r3, [r7, #4]
 800bfea:	2243      	movs	r2, #67	; 0x43
 800bfec:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 800bfee:	4b03      	ldr	r3, [pc, #12]	; (800bffc <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800bff0:	4618      	mov	r0, r3
 800bff2:	370c      	adds	r7, #12
 800bff4:	46bd      	mov	sp, r7
 800bff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bffa:	4770      	bx	lr
 800bffc:	20000058 	.word	0x20000058

0800c000 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc (uint16_t *length)
{
 800c000:	b480      	push	{r7}
 800c002:	b083      	sub	sp, #12
 800c004:	af00      	add	r7, sp, #0
 800c006:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_OtherSpeedCfgDesc);
 800c008:	687b      	ldr	r3, [r7, #4]
 800c00a:	2243      	movs	r2, #67	; 0x43
 800c00c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 800c00e:	4b03      	ldr	r3, [pc, #12]	; (800c01c <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800c010:	4618      	mov	r0, r3
 800c012:	370c      	adds	r7, #12
 800c014:	46bd      	mov	sp, r7
 800c016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c01a:	4770      	bx	lr
 800c01c:	200000e0 	.word	0x200000e0

0800c020 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor (uint16_t *length)
{
 800c020:	b480      	push	{r7}
 800c022:	b083      	sub	sp, #12
 800c024:	af00      	add	r7, sp, #0
 800c026:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_DeviceQualifierDesc);
 800c028:	687b      	ldr	r3, [r7, #4]
 800c02a:	220a      	movs	r2, #10
 800c02c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 800c02e:	4b03      	ldr	r3, [pc, #12]	; (800c03c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800c030:	4618      	mov	r0, r3
 800c032:	370c      	adds	r7, #12
 800c034:	46bd      	mov	sp, r7
 800c036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c03a:	4770      	bx	lr
 800c03c:	20000014 	.word	0x20000014

0800c040 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface  (USBD_HandleTypeDef   *pdev,
                                      USBD_CDC_ItfTypeDef *fops)
{
 800c040:	b480      	push	{r7}
 800c042:	b085      	sub	sp, #20
 800c044:	af00      	add	r7, sp, #0
 800c046:	6078      	str	r0, [r7, #4]
 800c048:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 800c04a:	2302      	movs	r3, #2
 800c04c:	73fb      	strb	r3, [r7, #15]

  if(fops != NULL)
 800c04e:	683b      	ldr	r3, [r7, #0]
 800c050:	2b00      	cmp	r3, #0
 800c052:	d005      	beq.n	800c060 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData= fops;
 800c054:	687b      	ldr	r3, [r7, #4]
 800c056:	683a      	ldr	r2, [r7, #0]
 800c058:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
    ret = USBD_OK;
 800c05c:	2300      	movs	r3, #0
 800c05e:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800c060:	7bfb      	ldrb	r3, [r7, #15]
}
 800c062:	4618      	mov	r0, r3
 800c064:	3714      	adds	r7, #20
 800c066:	46bd      	mov	sp, r7
 800c068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c06c:	4770      	bx	lr

0800c06e <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer  (USBD_HandleTypeDef   *pdev,
                                uint8_t  *pbuff,
                                uint16_t length)
{
 800c06e:	b480      	push	{r7}
 800c070:	b087      	sub	sp, #28
 800c072:	af00      	add	r7, sp, #0
 800c074:	60f8      	str	r0, [r7, #12]
 800c076:	60b9      	str	r1, [r7, #8]
 800c078:	4613      	mov	r3, r2
 800c07a:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800c07c:	68fb      	ldr	r3, [r7, #12]
 800c07e:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800c082:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800c084:	697b      	ldr	r3, [r7, #20]
 800c086:	68ba      	ldr	r2, [r7, #8]
 800c088:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800c08c:	88fa      	ldrh	r2, [r7, #6]
 800c08e:	697b      	ldr	r3, [r7, #20]
 800c090:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 800c094:	2300      	movs	r3, #0
}
 800c096:	4618      	mov	r0, r3
 800c098:	371c      	adds	r7, #28
 800c09a:	46bd      	mov	sp, r7
 800c09c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0a0:	4770      	bx	lr

0800c0a2 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer  (USBD_HandleTypeDef   *pdev,
                                   uint8_t  *pbuff)
{
 800c0a2:	b480      	push	{r7}
 800c0a4:	b085      	sub	sp, #20
 800c0a6:	af00      	add	r7, sp, #0
 800c0a8:	6078      	str	r0, [r7, #4]
 800c0aa:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800c0ac:	687b      	ldr	r3, [r7, #4]
 800c0ae:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800c0b2:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 800c0b4:	68fb      	ldr	r3, [r7, #12]
 800c0b6:	683a      	ldr	r2, [r7, #0]
 800c0b8:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 800c0bc:	2300      	movs	r3, #0
}
 800c0be:	4618      	mov	r0, r3
 800c0c0:	3714      	adds	r7, #20
 800c0c2:	46bd      	mov	sp, r7
 800c0c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0c8:	4770      	bx	lr

0800c0ca <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800c0ca:	b580      	push	{r7, lr}
 800c0cc:	b084      	sub	sp, #16
 800c0ce:	af00      	add	r7, sp, #0
 800c0d0:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800c0d2:	687b      	ldr	r3, [r7, #4]
 800c0d4:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800c0d8:	60fb      	str	r3, [r7, #12]

  if(pdev->pClassData != NULL)
 800c0da:	687b      	ldr	r3, [r7, #4]
 800c0dc:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800c0e0:	2b00      	cmp	r3, #0
 800c0e2:	d01c      	beq.n	800c11e <USBD_CDC_TransmitPacket+0x54>
  {
    if(hcdc->TxState == 0U)
 800c0e4:	68fb      	ldr	r3, [r7, #12]
 800c0e6:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800c0ea:	2b00      	cmp	r3, #0
 800c0ec:	d115      	bne.n	800c11a <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 800c0ee:	68fb      	ldr	r3, [r7, #12]
 800c0f0:	2201      	movs	r2, #1
 800c0f2:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800c0f6:	68fb      	ldr	r3, [r7, #12]
 800c0f8:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800c0fc:	687b      	ldr	r3, [r7, #4]
 800c0fe:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800c100:	68fb      	ldr	r3, [r7, #12]
 800c102:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 800c106:	68fb      	ldr	r3, [r7, #12]
 800c108:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800c10c:	b29b      	uxth	r3, r3
 800c10e:	2181      	movs	r1, #129	; 0x81
 800c110:	6878      	ldr	r0, [r7, #4]
 800c112:	f001 fd8e 	bl	800dc32 <USBD_LL_Transmit>

      return USBD_OK;
 800c116:	2300      	movs	r3, #0
 800c118:	e002      	b.n	800c120 <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 800c11a:	2301      	movs	r3, #1
 800c11c:	e000      	b.n	800c120 <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 800c11e:	2302      	movs	r3, #2
  }
}
 800c120:	4618      	mov	r0, r3
 800c122:	3710      	adds	r7, #16
 800c124:	46bd      	mov	sp, r7
 800c126:	bd80      	pop	{r7, pc}

0800c128 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800c128:	b580      	push	{r7, lr}
 800c12a:	b084      	sub	sp, #16
 800c12c:	af00      	add	r7, sp, #0
 800c12e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800c130:	687b      	ldr	r3, [r7, #4]
 800c132:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800c136:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if(pdev->pClassData != NULL)
 800c138:	687b      	ldr	r3, [r7, #4]
 800c13a:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800c13e:	2b00      	cmp	r3, #0
 800c140:	d017      	beq.n	800c172 <USBD_CDC_ReceivePacket+0x4a>
  {
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 800c142:	687b      	ldr	r3, [r7, #4]
 800c144:	7c1b      	ldrb	r3, [r3, #16]
 800c146:	2b00      	cmp	r3, #0
 800c148:	d109      	bne.n	800c15e <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800c14a:	68fb      	ldr	r3, [r7, #12]
 800c14c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800c150:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c154:	2101      	movs	r1, #1
 800c156:	6878      	ldr	r0, [r7, #4]
 800c158:	f001 fd8e 	bl	800dc78 <USBD_LL_PrepareReceive>
 800c15c:	e007      	b.n	800c16e <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800c15e:	68fb      	ldr	r3, [r7, #12]
 800c160:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800c164:	2340      	movs	r3, #64	; 0x40
 800c166:	2101      	movs	r1, #1
 800c168:	6878      	ldr	r0, [r7, #4]
 800c16a:	f001 fd85 	bl	800dc78 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 800c16e:	2300      	movs	r3, #0
 800c170:	e000      	b.n	800c174 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 800c172:	2302      	movs	r3, #2
  }
}
 800c174:	4618      	mov	r0, r3
 800c176:	3710      	adds	r7, #16
 800c178:	46bd      	mov	sp, r7
 800c17a:	bd80      	pop	{r7, pc}

0800c17c <USBD_Init>:
* @param  pdesc: Descriptor structure address
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev, USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800c17c:	b580      	push	{r7, lr}
 800c17e:	b084      	sub	sp, #16
 800c180:	af00      	add	r7, sp, #0
 800c182:	60f8      	str	r0, [r7, #12]
 800c184:	60b9      	str	r1, [r7, #8]
 800c186:	4613      	mov	r3, r2
 800c188:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if(pdev == NULL)
 800c18a:	68fb      	ldr	r3, [r7, #12]
 800c18c:	2b00      	cmp	r3, #0
 800c18e:	d101      	bne.n	800c194 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800c190:	2302      	movs	r3, #2
 800c192:	e01a      	b.n	800c1ca <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if(pdev->pClass != NULL)
 800c194:	68fb      	ldr	r3, [r7, #12]
 800c196:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800c19a:	2b00      	cmp	r3, #0
 800c19c:	d003      	beq.n	800c1a6 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800c19e:	68fb      	ldr	r3, [r7, #12]
 800c1a0:	2200      	movs	r2, #0
 800c1a2:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
  }

  /* Assign USBD Descriptors */
  if(pdesc != NULL)
 800c1a6:	68bb      	ldr	r3, [r7, #8]
 800c1a8:	2b00      	cmp	r3, #0
 800c1aa:	d003      	beq.n	800c1b4 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 800c1ac:	68fb      	ldr	r3, [r7, #12]
 800c1ae:	68ba      	ldr	r2, [r7, #8]
 800c1b0:	f8c3 2288 	str.w	r2, [r3, #648]	; 0x288
  }

  /* Set Device initial State */
  pdev->dev_state  = USBD_STATE_DEFAULT;
 800c1b4:	68fb      	ldr	r3, [r7, #12]
 800c1b6:	2201      	movs	r2, #1
 800c1b8:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->id = id;
 800c1bc:	68fb      	ldr	r3, [r7, #12]
 800c1be:	79fa      	ldrb	r2, [r7, #7]
 800c1c0:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800c1c2:	68f8      	ldr	r0, [r7, #12]
 800c1c4:	f001 fc00 	bl	800d9c8 <USBD_LL_Init>

  return USBD_OK;
 800c1c8:	2300      	movs	r3, #0
}
 800c1ca:	4618      	mov	r0, r3
 800c1cc:	3710      	adds	r7, #16
 800c1ce:	46bd      	mov	sp, r7
 800c1d0:	bd80      	pop	{r7, pc}

0800c1d2 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800c1d2:	b480      	push	{r7}
 800c1d4:	b085      	sub	sp, #20
 800c1d6:	af00      	add	r7, sp, #0
 800c1d8:	6078      	str	r0, [r7, #4]
 800c1da:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef   status = USBD_OK;
 800c1dc:	2300      	movs	r3, #0
 800c1de:	73fb      	strb	r3, [r7, #15]
  if(pclass != 0)
 800c1e0:	683b      	ldr	r3, [r7, #0]
 800c1e2:	2b00      	cmp	r3, #0
 800c1e4:	d006      	beq.n	800c1f4 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 800c1e6:	687b      	ldr	r3, [r7, #4]
 800c1e8:	683a      	ldr	r2, [r7, #0]
 800c1ea:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
    status = USBD_OK;
 800c1ee:	2300      	movs	r3, #0
 800c1f0:	73fb      	strb	r3, [r7, #15]
 800c1f2:	e001      	b.n	800c1f8 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 800c1f4:	2302      	movs	r3, #2
 800c1f6:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800c1f8:	7bfb      	ldrb	r3, [r7, #15]
}
 800c1fa:	4618      	mov	r0, r3
 800c1fc:	3714      	adds	r7, #20
 800c1fe:	46bd      	mov	sp, r7
 800c200:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c204:	4770      	bx	lr

0800c206 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start  (USBD_HandleTypeDef *pdev)
{
 800c206:	b580      	push	{r7, lr}
 800c208:	b082      	sub	sp, #8
 800c20a:	af00      	add	r7, sp, #0
 800c20c:	6078      	str	r0, [r7, #4]

  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 800c20e:	6878      	ldr	r0, [r7, #4]
 800c210:	f001 fc26 	bl	800da60 <USBD_LL_Start>

  return USBD_OK;
 800c214:	2300      	movs	r3, #0
}
 800c216:	4618      	mov	r0, r3
 800c218:	3708      	adds	r7, #8
 800c21a:	46bd      	mov	sp, r7
 800c21c:	bd80      	pop	{r7, pc}

0800c21e <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode (USBD_HandleTypeDef  *pdev)
{
 800c21e:	b480      	push	{r7}
 800c220:	b083      	sub	sp, #12
 800c222:	af00      	add	r7, sp, #0
 800c224:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800c226:	2300      	movs	r3, #0
}
 800c228:	4618      	mov	r0, r3
 800c22a:	370c      	adds	r7, #12
 800c22c:	46bd      	mov	sp, r7
 800c22e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c232:	4770      	bx	lr

0800c234 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800c234:	b580      	push	{r7, lr}
 800c236:	b084      	sub	sp, #16
 800c238:	af00      	add	r7, sp, #0
 800c23a:	6078      	str	r0, [r7, #4]
 800c23c:	460b      	mov	r3, r1
 800c23e:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef   ret = USBD_FAIL;
 800c240:	2302      	movs	r3, #2
 800c242:	73fb      	strb	r3, [r7, #15]

  if(pdev->pClass != NULL)
 800c244:	687b      	ldr	r3, [r7, #4]
 800c246:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800c24a:	2b00      	cmp	r3, #0
 800c24c:	d00c      	beq.n	800c268 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if(pdev->pClass->Init(pdev, cfgidx) == 0U)
 800c24e:	687b      	ldr	r3, [r7, #4]
 800c250:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800c254:	681b      	ldr	r3, [r3, #0]
 800c256:	78fa      	ldrb	r2, [r7, #3]
 800c258:	4611      	mov	r1, r2
 800c25a:	6878      	ldr	r0, [r7, #4]
 800c25c:	4798      	blx	r3
 800c25e:	4603      	mov	r3, r0
 800c260:	2b00      	cmp	r3, #0
 800c262:	d101      	bne.n	800c268 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 800c264:	2300      	movs	r3, #0
 800c266:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 800c268:	7bfb      	ldrb	r3, [r7, #15]
}
 800c26a:	4618      	mov	r0, r3
 800c26c:	3710      	adds	r7, #16
 800c26e:	46bd      	mov	sp, r7
 800c270:	bd80      	pop	{r7, pc}

0800c272 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800c272:	b580      	push	{r7, lr}
 800c274:	b082      	sub	sp, #8
 800c276:	af00      	add	r7, sp, #0
 800c278:	6078      	str	r0, [r7, #4]
 800c27a:	460b      	mov	r3, r1
 800c27c:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 800c27e:	687b      	ldr	r3, [r7, #4]
 800c280:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800c284:	685b      	ldr	r3, [r3, #4]
 800c286:	78fa      	ldrb	r2, [r7, #3]
 800c288:	4611      	mov	r1, r2
 800c28a:	6878      	ldr	r0, [r7, #4]
 800c28c:	4798      	blx	r3
  return USBD_OK;
 800c28e:	2300      	movs	r3, #0
}
 800c290:	4618      	mov	r0, r3
 800c292:	3708      	adds	r7, #8
 800c294:	46bd      	mov	sp, r7
 800c296:	bd80      	pop	{r7, pc}

0800c298 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800c298:	b580      	push	{r7, lr}
 800c29a:	b082      	sub	sp, #8
 800c29c:	af00      	add	r7, sp, #0
 800c29e:	6078      	str	r0, [r7, #4]
 800c2a0:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800c2a2:	687b      	ldr	r3, [r7, #4]
 800c2a4:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800c2a8:	6839      	ldr	r1, [r7, #0]
 800c2aa:	4618      	mov	r0, r3
 800c2ac:	f000 fe94 	bl	800cfd8 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800c2b0:	687b      	ldr	r3, [r7, #4]
 800c2b2:	2201      	movs	r2, #1
 800c2b4:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

  pdev->ep0_data_len = pdev->request.wLength;
 800c2b8:	687b      	ldr	r3, [r7, #4]
 800c2ba:	f8b3 3286 	ldrh.w	r3, [r3, #646]	; 0x286
 800c2be:	461a      	mov	r2, r3
 800c2c0:	687b      	ldr	r3, [r7, #4]
 800c2c2:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

  switch (pdev->request.bmRequest & 0x1FU)
 800c2c6:	687b      	ldr	r3, [r7, #4]
 800c2c8:	f893 3280 	ldrb.w	r3, [r3, #640]	; 0x280
 800c2cc:	f003 031f 	and.w	r3, r3, #31
 800c2d0:	2b01      	cmp	r3, #1
 800c2d2:	d00c      	beq.n	800c2ee <USBD_LL_SetupStage+0x56>
 800c2d4:	2b01      	cmp	r3, #1
 800c2d6:	d302      	bcc.n	800c2de <USBD_LL_SetupStage+0x46>
 800c2d8:	2b02      	cmp	r3, #2
 800c2da:	d010      	beq.n	800c2fe <USBD_LL_SetupStage+0x66>
 800c2dc:	e017      	b.n	800c30e <USBD_LL_SetupStage+0x76>
  {
  case USB_REQ_RECIPIENT_DEVICE:
    USBD_StdDevReq (pdev, &pdev->request);
 800c2de:	687b      	ldr	r3, [r7, #4]
 800c2e0:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800c2e4:	4619      	mov	r1, r3
 800c2e6:	6878      	ldr	r0, [r7, #4]
 800c2e8:	f000 fa04 	bl	800c6f4 <USBD_StdDevReq>
    break;
 800c2ec:	e01a      	b.n	800c324 <USBD_LL_SetupStage+0x8c>

  case USB_REQ_RECIPIENT_INTERFACE:
    USBD_StdItfReq(pdev, &pdev->request);
 800c2ee:	687b      	ldr	r3, [r7, #4]
 800c2f0:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800c2f4:	4619      	mov	r1, r3
 800c2f6:	6878      	ldr	r0, [r7, #4]
 800c2f8:	f000 fa66 	bl	800c7c8 <USBD_StdItfReq>
    break;
 800c2fc:	e012      	b.n	800c324 <USBD_LL_SetupStage+0x8c>

  case USB_REQ_RECIPIENT_ENDPOINT:
    USBD_StdEPReq(pdev, &pdev->request);
 800c2fe:	687b      	ldr	r3, [r7, #4]
 800c300:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800c304:	4619      	mov	r1, r3
 800c306:	6878      	ldr	r0, [r7, #4]
 800c308:	f000 faa4 	bl	800c854 <USBD_StdEPReq>
    break;
 800c30c:	e00a      	b.n	800c324 <USBD_LL_SetupStage+0x8c>

  default:
    USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800c30e:	687b      	ldr	r3, [r7, #4]
 800c310:	f893 3280 	ldrb.w	r3, [r3, #640]	; 0x280
 800c314:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800c318:	b2db      	uxtb	r3, r3
 800c31a:	4619      	mov	r1, r3
 800c31c:	6878      	ldr	r0, [r7, #4]
 800c31e:	f001 fbff 	bl	800db20 <USBD_LL_StallEP>
    break;
 800c322:	bf00      	nop
  }

  return USBD_OK;
 800c324:	2300      	movs	r3, #0
}
 800c326:	4618      	mov	r0, r3
 800c328:	3708      	adds	r7, #8
 800c32a:	46bd      	mov	sp, r7
 800c32c:	bd80      	pop	{r7, pc}

0800c32e <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800c32e:	b580      	push	{r7, lr}
 800c330:	b086      	sub	sp, #24
 800c332:	af00      	add	r7, sp, #0
 800c334:	60f8      	str	r0, [r7, #12]
 800c336:	460b      	mov	r3, r1
 800c338:	607a      	str	r2, [r7, #4]
 800c33a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef    *pep;

  if(epnum == 0U)
 800c33c:	7afb      	ldrb	r3, [r7, #11]
 800c33e:	2b00      	cmp	r3, #0
 800c340:	d14b      	bne.n	800c3da <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 800c342:	68fb      	ldr	r3, [r7, #12]
 800c344:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 800c348:	617b      	str	r3, [r7, #20]

    if ( pdev->ep0_state == USBD_EP0_DATA_OUT)
 800c34a:	68fb      	ldr	r3, [r7, #12]
 800c34c:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 800c350:	2b03      	cmp	r3, #3
 800c352:	d134      	bne.n	800c3be <USBD_LL_DataOutStage+0x90>
    {
      if(pep->rem_length > pep->maxpacket)
 800c354:	697b      	ldr	r3, [r7, #20]
 800c356:	68da      	ldr	r2, [r3, #12]
 800c358:	697b      	ldr	r3, [r7, #20]
 800c35a:	691b      	ldr	r3, [r3, #16]
 800c35c:	429a      	cmp	r2, r3
 800c35e:	d919      	bls.n	800c394 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -=  pep->maxpacket;
 800c360:	697b      	ldr	r3, [r7, #20]
 800c362:	68da      	ldr	r2, [r3, #12]
 800c364:	697b      	ldr	r3, [r7, #20]
 800c366:	691b      	ldr	r3, [r3, #16]
 800c368:	1ad2      	subs	r2, r2, r3
 800c36a:	697b      	ldr	r3, [r7, #20]
 800c36c:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx (pdev,
                            pdata,
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800c36e:	697b      	ldr	r3, [r7, #20]
 800c370:	68da      	ldr	r2, [r3, #12]
 800c372:	697b      	ldr	r3, [r7, #20]
 800c374:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx (pdev,
 800c376:	429a      	cmp	r2, r3
 800c378:	d203      	bcs.n	800c382 <USBD_LL_DataOutStage+0x54>
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800c37a:	697b      	ldr	r3, [r7, #20]
 800c37c:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx (pdev,
 800c37e:	b29b      	uxth	r3, r3
 800c380:	e002      	b.n	800c388 <USBD_LL_DataOutStage+0x5a>
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800c382:	697b      	ldr	r3, [r7, #20]
 800c384:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx (pdev,
 800c386:	b29b      	uxth	r3, r3
 800c388:	461a      	mov	r2, r3
 800c38a:	6879      	ldr	r1, [r7, #4]
 800c38c:	68f8      	ldr	r0, [r7, #12]
 800c38e:	f000 ff17 	bl	800d1c0 <USBD_CtlContinueRx>
 800c392:	e038      	b.n	800c406 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if((pdev->pClass->EP0_RxReady != NULL)&&
 800c394:	68fb      	ldr	r3, [r7, #12]
 800c396:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800c39a:	691b      	ldr	r3, [r3, #16]
 800c39c:	2b00      	cmp	r3, #0
 800c39e:	d00a      	beq.n	800c3b6 <USBD_LL_DataOutStage+0x88>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800c3a0:	68fb      	ldr	r3, [r7, #12]
 800c3a2:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
        if((pdev->pClass->EP0_RxReady != NULL)&&
 800c3a6:	2b03      	cmp	r3, #3
 800c3a8:	d105      	bne.n	800c3b6 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800c3aa:	68fb      	ldr	r3, [r7, #12]
 800c3ac:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800c3b0:	691b      	ldr	r3, [r3, #16]
 800c3b2:	68f8      	ldr	r0, [r7, #12]
 800c3b4:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 800c3b6:	68f8      	ldr	r0, [r7, #12]
 800c3b8:	f000 ff14 	bl	800d1e4 <USBD_CtlSendStatus>
 800c3bc:	e023      	b.n	800c406 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 800c3be:	68fb      	ldr	r3, [r7, #12]
 800c3c0:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 800c3c4:	2b05      	cmp	r3, #5
 800c3c6:	d11e      	bne.n	800c406 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 800c3c8:	68fb      	ldr	r3, [r7, #12]
 800c3ca:	2200      	movs	r2, #0
 800c3cc:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
        USBD_LL_StallEP(pdev, 0U);
 800c3d0:	2100      	movs	r1, #0
 800c3d2:	68f8      	ldr	r0, [r7, #12]
 800c3d4:	f001 fba4 	bl	800db20 <USBD_LL_StallEP>
 800c3d8:	e015      	b.n	800c406 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if((pdev->pClass->DataOut != NULL) &&
 800c3da:	68fb      	ldr	r3, [r7, #12]
 800c3dc:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800c3e0:	699b      	ldr	r3, [r3, #24]
 800c3e2:	2b00      	cmp	r3, #0
 800c3e4:	d00d      	beq.n	800c402 <USBD_LL_DataOutStage+0xd4>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 800c3e6:	68fb      	ldr	r3, [r7, #12]
 800c3e8:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
  else if((pdev->pClass->DataOut != NULL) &&
 800c3ec:	2b03      	cmp	r3, #3
 800c3ee:	d108      	bne.n	800c402 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 800c3f0:	68fb      	ldr	r3, [r7, #12]
 800c3f2:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800c3f6:	699b      	ldr	r3, [r3, #24]
 800c3f8:	7afa      	ldrb	r2, [r7, #11]
 800c3fa:	4611      	mov	r1, r2
 800c3fc:	68f8      	ldr	r0, [r7, #12]
 800c3fe:	4798      	blx	r3
 800c400:	e001      	b.n	800c406 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800c402:	2302      	movs	r3, #2
 800c404:	e000      	b.n	800c408 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 800c406:	2300      	movs	r3, #0
}
 800c408:	4618      	mov	r0, r3
 800c40a:	3718      	adds	r7, #24
 800c40c:	46bd      	mov	sp, r7
 800c40e:	bd80      	pop	{r7, pc}

0800c410 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev, uint8_t epnum,
                                       uint8_t *pdata)
{
 800c410:	b580      	push	{r7, lr}
 800c412:	b086      	sub	sp, #24
 800c414:	af00      	add	r7, sp, #0
 800c416:	60f8      	str	r0, [r7, #12]
 800c418:	460b      	mov	r3, r1
 800c41a:	607a      	str	r2, [r7, #4]
 800c41c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if(epnum == 0U)
 800c41e:	7afb      	ldrb	r3, [r7, #11]
 800c420:	2b00      	cmp	r3, #0
 800c422:	d17f      	bne.n	800c524 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 800c424:	68fb      	ldr	r3, [r7, #12]
 800c426:	3314      	adds	r3, #20
 800c428:	617b      	str	r3, [r7, #20]

    if ( pdev->ep0_state == USBD_EP0_DATA_IN)
 800c42a:	68fb      	ldr	r3, [r7, #12]
 800c42c:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 800c430:	2b02      	cmp	r3, #2
 800c432:	d15c      	bne.n	800c4ee <USBD_LL_DataInStage+0xde>
    {
      if(pep->rem_length > pep->maxpacket)
 800c434:	697b      	ldr	r3, [r7, #20]
 800c436:	68da      	ldr	r2, [r3, #12]
 800c438:	697b      	ldr	r3, [r7, #20]
 800c43a:	691b      	ldr	r3, [r3, #16]
 800c43c:	429a      	cmp	r2, r3
 800c43e:	d915      	bls.n	800c46c <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 800c440:	697b      	ldr	r3, [r7, #20]
 800c442:	68da      	ldr	r2, [r3, #12]
 800c444:	697b      	ldr	r3, [r7, #20]
 800c446:	691b      	ldr	r3, [r3, #16]
 800c448:	1ad2      	subs	r2, r2, r3
 800c44a:	697b      	ldr	r3, [r7, #20]
 800c44c:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData (pdev, pdata, (uint16_t)pep->rem_length);
 800c44e:	697b      	ldr	r3, [r7, #20]
 800c450:	68db      	ldr	r3, [r3, #12]
 800c452:	b29b      	uxth	r3, r3
 800c454:	461a      	mov	r2, r3
 800c456:	6879      	ldr	r1, [r7, #4]
 800c458:	68f8      	ldr	r0, [r7, #12]
 800c45a:	f000 fe81 	bl	800d160 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 800c45e:	2300      	movs	r3, #0
 800c460:	2200      	movs	r2, #0
 800c462:	2100      	movs	r1, #0
 800c464:	68f8      	ldr	r0, [r7, #12]
 800c466:	f001 fc07 	bl	800dc78 <USBD_LL_PrepareReceive>
 800c46a:	e04e      	b.n	800c50a <USBD_LL_DataInStage+0xfa>
      }
      else
      { /* last packet is MPS multiple, so send ZLP packet */
        if((pep->total_length % pep->maxpacket == 0U) &&
 800c46c:	697b      	ldr	r3, [r7, #20]
 800c46e:	689b      	ldr	r3, [r3, #8]
 800c470:	697a      	ldr	r2, [r7, #20]
 800c472:	6912      	ldr	r2, [r2, #16]
 800c474:	fbb3 f1f2 	udiv	r1, r3, r2
 800c478:	fb02 f201 	mul.w	r2, r2, r1
 800c47c:	1a9b      	subs	r3, r3, r2
 800c47e:	2b00      	cmp	r3, #0
 800c480:	d11c      	bne.n	800c4bc <USBD_LL_DataInStage+0xac>
           (pep->total_length >= pep->maxpacket) &&
 800c482:	697b      	ldr	r3, [r7, #20]
 800c484:	689a      	ldr	r2, [r3, #8]
 800c486:	697b      	ldr	r3, [r7, #20]
 800c488:	691b      	ldr	r3, [r3, #16]
        if((pep->total_length % pep->maxpacket == 0U) &&
 800c48a:	429a      	cmp	r2, r3
 800c48c:	d316      	bcc.n	800c4bc <USBD_LL_DataInStage+0xac>
           (pep->total_length < pdev->ep0_data_len))
 800c48e:	697b      	ldr	r3, [r7, #20]
 800c490:	689a      	ldr	r2, [r3, #8]
 800c492:	68fb      	ldr	r3, [r7, #12]
 800c494:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
           (pep->total_length >= pep->maxpacket) &&
 800c498:	429a      	cmp	r2, r3
 800c49a:	d20f      	bcs.n	800c4bc <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800c49c:	2200      	movs	r2, #0
 800c49e:	2100      	movs	r1, #0
 800c4a0:	68f8      	ldr	r0, [r7, #12]
 800c4a2:	f000 fe5d 	bl	800d160 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800c4a6:	68fb      	ldr	r3, [r7, #12]
 800c4a8:	2200      	movs	r2, #0
 800c4aa:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 800c4ae:	2300      	movs	r3, #0
 800c4b0:	2200      	movs	r2, #0
 800c4b2:	2100      	movs	r1, #0
 800c4b4:	68f8      	ldr	r0, [r7, #12]
 800c4b6:	f001 fbdf 	bl	800dc78 <USBD_LL_PrepareReceive>
 800c4ba:	e026      	b.n	800c50a <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if((pdev->pClass->EP0_TxSent != NULL)&&
 800c4bc:	68fb      	ldr	r3, [r7, #12]
 800c4be:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800c4c2:	68db      	ldr	r3, [r3, #12]
 800c4c4:	2b00      	cmp	r3, #0
 800c4c6:	d00a      	beq.n	800c4de <USBD_LL_DataInStage+0xce>
             (pdev->dev_state == USBD_STATE_CONFIGURED))
 800c4c8:	68fb      	ldr	r3, [r7, #12]
 800c4ca:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
          if((pdev->pClass->EP0_TxSent != NULL)&&
 800c4ce:	2b03      	cmp	r3, #3
 800c4d0:	d105      	bne.n	800c4de <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800c4d2:	68fb      	ldr	r3, [r7, #12]
 800c4d4:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800c4d8:	68db      	ldr	r3, [r3, #12]
 800c4da:	68f8      	ldr	r0, [r7, #12]
 800c4dc:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 800c4de:	2180      	movs	r1, #128	; 0x80
 800c4e0:	68f8      	ldr	r0, [r7, #12]
 800c4e2:	f001 fb1d 	bl	800db20 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 800c4e6:	68f8      	ldr	r0, [r7, #12]
 800c4e8:	f000 fe8f 	bl	800d20a <USBD_CtlReceiveStatus>
 800c4ec:	e00d      	b.n	800c50a <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800c4ee:	68fb      	ldr	r3, [r7, #12]
 800c4f0:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 800c4f4:	2b04      	cmp	r3, #4
 800c4f6:	d004      	beq.n	800c502 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 800c4f8:	68fb      	ldr	r3, [r7, #12]
 800c4fa:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800c4fe:	2b00      	cmp	r3, #0
 800c500:	d103      	bne.n	800c50a <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 800c502:	2180      	movs	r1, #128	; 0x80
 800c504:	68f8      	ldr	r0, [r7, #12]
 800c506:	f001 fb0b 	bl	800db20 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 800c50a:	68fb      	ldr	r3, [r7, #12]
 800c50c:	f893 3278 	ldrb.w	r3, [r3, #632]	; 0x278
 800c510:	2b01      	cmp	r3, #1
 800c512:	d11d      	bne.n	800c550 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 800c514:	68f8      	ldr	r0, [r7, #12]
 800c516:	f7ff fe82 	bl	800c21e <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800c51a:	68fb      	ldr	r3, [r7, #12]
 800c51c:	2200      	movs	r2, #0
 800c51e:	f883 2278 	strb.w	r2, [r3, #632]	; 0x278
 800c522:	e015      	b.n	800c550 <USBD_LL_DataInStage+0x140>
    }
  }
  else if((pdev->pClass->DataIn != NULL) &&
 800c524:	68fb      	ldr	r3, [r7, #12]
 800c526:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800c52a:	695b      	ldr	r3, [r3, #20]
 800c52c:	2b00      	cmp	r3, #0
 800c52e:	d00d      	beq.n	800c54c <USBD_LL_DataInStage+0x13c>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 800c530:	68fb      	ldr	r3, [r7, #12]
 800c532:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
  else if((pdev->pClass->DataIn != NULL) &&
 800c536:	2b03      	cmp	r3, #3
 800c538:	d108      	bne.n	800c54c <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 800c53a:	68fb      	ldr	r3, [r7, #12]
 800c53c:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800c540:	695b      	ldr	r3, [r3, #20]
 800c542:	7afa      	ldrb	r2, [r7, #11]
 800c544:	4611      	mov	r1, r2
 800c546:	68f8      	ldr	r0, [r7, #12]
 800c548:	4798      	blx	r3
 800c54a:	e001      	b.n	800c550 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800c54c:	2302      	movs	r3, #2
 800c54e:	e000      	b.n	800c552 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 800c550:	2300      	movs	r3, #0
}
 800c552:	4618      	mov	r0, r3
 800c554:	3718      	adds	r7, #24
 800c556:	46bd      	mov	sp, r7
 800c558:	bd80      	pop	{r7, pc}

0800c55a <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef  *pdev)
{
 800c55a:	b580      	push	{r7, lr}
 800c55c:	b082      	sub	sp, #8
 800c55e:	af00      	add	r7, sp, #0
 800c560:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800c562:	2340      	movs	r3, #64	; 0x40
 800c564:	2200      	movs	r2, #0
 800c566:	2100      	movs	r1, #0
 800c568:	6878      	ldr	r0, [r7, #4]
 800c56a:	f001 fa94 	bl	800da96 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800c56e:	687b      	ldr	r3, [r7, #4]
 800c570:	2201      	movs	r2, #1
 800c572:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800c576:	687b      	ldr	r3, [r7, #4]
 800c578:	2240      	movs	r2, #64	; 0x40
 800c57a:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800c57e:	2340      	movs	r3, #64	; 0x40
 800c580:	2200      	movs	r2, #0
 800c582:	2180      	movs	r1, #128	; 0x80
 800c584:	6878      	ldr	r0, [r7, #4]
 800c586:	f001 fa86 	bl	800da96 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800c58a:	687b      	ldr	r3, [r7, #4]
 800c58c:	2201      	movs	r2, #1
 800c58e:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800c590:	687b      	ldr	r3, [r7, #4]
 800c592:	2240      	movs	r2, #64	; 0x40
 800c594:	625a      	str	r2, [r3, #36]	; 0x24
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800c596:	687b      	ldr	r3, [r7, #4]
 800c598:	2201      	movs	r2, #1
 800c59a:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->ep0_state = USBD_EP0_IDLE;
 800c59e:	687b      	ldr	r3, [r7, #4]
 800c5a0:	2200      	movs	r2, #0
 800c5a2:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->dev_config= 0U;
 800c5a6:	687b      	ldr	r3, [r7, #4]
 800c5a8:	2200      	movs	r2, #0
 800c5aa:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800c5ac:	687b      	ldr	r3, [r7, #4]
 800c5ae:	2200      	movs	r2, #0
 800c5b0:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c

  if (pdev->pClassData)
 800c5b4:	687b      	ldr	r3, [r7, #4]
 800c5b6:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800c5ba:	2b00      	cmp	r3, #0
 800c5bc:	d009      	beq.n	800c5d2 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800c5be:	687b      	ldr	r3, [r7, #4]
 800c5c0:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800c5c4:	685b      	ldr	r3, [r3, #4]
 800c5c6:	687a      	ldr	r2, [r7, #4]
 800c5c8:	6852      	ldr	r2, [r2, #4]
 800c5ca:	b2d2      	uxtb	r2, r2
 800c5cc:	4611      	mov	r1, r2
 800c5ce:	6878      	ldr	r0, [r7, #4]
 800c5d0:	4798      	blx	r3
  }

  return USBD_OK;
 800c5d2:	2300      	movs	r3, #0
}
 800c5d4:	4618      	mov	r0, r3
 800c5d6:	3708      	adds	r7, #8
 800c5d8:	46bd      	mov	sp, r7
 800c5da:	bd80      	pop	{r7, pc}

0800c5dc <USBD_LL_SetSpeed>:
*         Handle Reset event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef  *pdev, USBD_SpeedTypeDef speed)
{
 800c5dc:	b480      	push	{r7}
 800c5de:	b083      	sub	sp, #12
 800c5e0:	af00      	add	r7, sp, #0
 800c5e2:	6078      	str	r0, [r7, #4]
 800c5e4:	460b      	mov	r3, r1
 800c5e6:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800c5e8:	687b      	ldr	r3, [r7, #4]
 800c5ea:	78fa      	ldrb	r2, [r7, #3]
 800c5ec:	741a      	strb	r2, [r3, #16]
  return USBD_OK;
 800c5ee:	2300      	movs	r3, #0
}
 800c5f0:	4618      	mov	r0, r3
 800c5f2:	370c      	adds	r7, #12
 800c5f4:	46bd      	mov	sp, r7
 800c5f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5fa:	4770      	bx	lr

0800c5fc <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef  *pdev)
{
 800c5fc:	b480      	push	{r7}
 800c5fe:	b083      	sub	sp, #12
 800c600:	af00      	add	r7, sp, #0
 800c602:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 800c604:	687b      	ldr	r3, [r7, #4]
 800c606:	f893 2274 	ldrb.w	r2, [r3, #628]	; 0x274
 800c60a:	687b      	ldr	r3, [r7, #4]
 800c60c:	f883 2275 	strb.w	r2, [r3, #629]	; 0x275
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800c610:	687b      	ldr	r3, [r7, #4]
 800c612:	2204      	movs	r2, #4
 800c614:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  return USBD_OK;
 800c618:	2300      	movs	r3, #0
}
 800c61a:	4618      	mov	r0, r3
 800c61c:	370c      	adds	r7, #12
 800c61e:	46bd      	mov	sp, r7
 800c620:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c624:	4770      	bx	lr

0800c626 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef  *pdev)
{
 800c626:	b480      	push	{r7}
 800c628:	b083      	sub	sp, #12
 800c62a:	af00      	add	r7, sp, #0
 800c62c:	6078      	str	r0, [r7, #4]
  pdev->dev_state = pdev->dev_old_state;
 800c62e:	687b      	ldr	r3, [r7, #4]
 800c630:	f893 2275 	ldrb.w	r2, [r3, #629]	; 0x275
 800c634:	687b      	ldr	r3, [r7, #4]
 800c636:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  return USBD_OK;
 800c63a:	2300      	movs	r3, #0
}
 800c63c:	4618      	mov	r0, r3
 800c63e:	370c      	adds	r7, #12
 800c640:	46bd      	mov	sp, r7
 800c642:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c646:	4770      	bx	lr

0800c648 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef  *pdev)
{
 800c648:	b580      	push	{r7, lr}
 800c64a:	b082      	sub	sp, #8
 800c64c:	af00      	add	r7, sp, #0
 800c64e:	6078      	str	r0, [r7, #4]
  if(pdev->dev_state == USBD_STATE_CONFIGURED)
 800c650:	687b      	ldr	r3, [r7, #4]
 800c652:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800c656:	2b03      	cmp	r3, #3
 800c658:	d10b      	bne.n	800c672 <USBD_LL_SOF+0x2a>
  {
    if(pdev->pClass->SOF != NULL)
 800c65a:	687b      	ldr	r3, [r7, #4]
 800c65c:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800c660:	69db      	ldr	r3, [r3, #28]
 800c662:	2b00      	cmp	r3, #0
 800c664:	d005      	beq.n	800c672 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800c666:	687b      	ldr	r3, [r7, #4]
 800c668:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800c66c:	69db      	ldr	r3, [r3, #28]
 800c66e:	6878      	ldr	r0, [r7, #4]
 800c670:	4798      	blx	r3
    }
  }
  return USBD_OK;
 800c672:	2300      	movs	r3, #0
}
 800c674:	4618      	mov	r0, r3
 800c676:	3708      	adds	r7, #8
 800c678:	46bd      	mov	sp, r7
 800c67a:	bd80      	pop	{r7, pc}

0800c67c <USBD_LL_IsoINIncomplete>:
*         Handle iso in incomplete event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef  *pdev, uint8_t epnum)
{
 800c67c:	b480      	push	{r7}
 800c67e:	b083      	sub	sp, #12
 800c680:	af00      	add	r7, sp, #0
 800c682:	6078      	str	r0, [r7, #4]
 800c684:	460b      	mov	r3, r1
 800c686:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 800c688:	2300      	movs	r3, #0
}
 800c68a:	4618      	mov	r0, r3
 800c68c:	370c      	adds	r7, #12
 800c68e:	46bd      	mov	sp, r7
 800c690:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c694:	4770      	bx	lr

0800c696 <USBD_LL_IsoOUTIncomplete>:
*         Handle iso out incomplete event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef  *pdev, uint8_t epnum)
{
 800c696:	b480      	push	{r7}
 800c698:	b083      	sub	sp, #12
 800c69a:	af00      	add	r7, sp, #0
 800c69c:	6078      	str	r0, [r7, #4]
 800c69e:	460b      	mov	r3, r1
 800c6a0:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 800c6a2:	2300      	movs	r3, #0
}
 800c6a4:	4618      	mov	r0, r3
 800c6a6:	370c      	adds	r7, #12
 800c6a8:	46bd      	mov	sp, r7
 800c6aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6ae:	4770      	bx	lr

0800c6b0 <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef  *pdev)
{
 800c6b0:	b480      	push	{r7}
 800c6b2:	b083      	sub	sp, #12
 800c6b4:	af00      	add	r7, sp, #0
 800c6b6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800c6b8:	2300      	movs	r3, #0
}
 800c6ba:	4618      	mov	r0, r3
 800c6bc:	370c      	adds	r7, #12
 800c6be:	46bd      	mov	sp, r7
 800c6c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6c4:	4770      	bx	lr

0800c6c6 <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef  *pdev)
{
 800c6c6:	b580      	push	{r7, lr}
 800c6c8:	b082      	sub	sp, #8
 800c6ca:	af00      	add	r7, sp, #0
 800c6cc:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800c6ce:	687b      	ldr	r3, [r7, #4]
 800c6d0:	2201      	movs	r2, #1
 800c6d2:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800c6d6:	687b      	ldr	r3, [r7, #4]
 800c6d8:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800c6dc:	685b      	ldr	r3, [r3, #4]
 800c6de:	687a      	ldr	r2, [r7, #4]
 800c6e0:	6852      	ldr	r2, [r2, #4]
 800c6e2:	b2d2      	uxtb	r2, r2
 800c6e4:	4611      	mov	r1, r2
 800c6e6:	6878      	ldr	r0, [r7, #4]
 800c6e8:	4798      	blx	r3

  return USBD_OK;
 800c6ea:	2300      	movs	r3, #0
}
 800c6ec:	4618      	mov	r0, r3
 800c6ee:	3708      	adds	r7, #8
 800c6f0:	46bd      	mov	sp, r7
 800c6f2:	bd80      	pop	{r7, pc}

0800c6f4 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 800c6f4:	b580      	push	{r7, lr}
 800c6f6:	b084      	sub	sp, #16
 800c6f8:	af00      	add	r7, sp, #0
 800c6fa:	6078      	str	r0, [r7, #4]
 800c6fc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c6fe:	2300      	movs	r3, #0
 800c700:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c702:	683b      	ldr	r3, [r7, #0]
 800c704:	781b      	ldrb	r3, [r3, #0]
 800c706:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800c70a:	2b20      	cmp	r3, #32
 800c70c:	d004      	beq.n	800c718 <USBD_StdDevReq+0x24>
 800c70e:	2b40      	cmp	r3, #64	; 0x40
 800c710:	d002      	beq.n	800c718 <USBD_StdDevReq+0x24>
 800c712:	2b00      	cmp	r3, #0
 800c714:	d008      	beq.n	800c728 <USBD_StdDevReq+0x34>
 800c716:	e04c      	b.n	800c7b2 <USBD_StdDevReq+0xbe>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    pdev->pClass->Setup(pdev, req);
 800c718:	687b      	ldr	r3, [r7, #4]
 800c71a:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800c71e:	689b      	ldr	r3, [r3, #8]
 800c720:	6839      	ldr	r1, [r7, #0]
 800c722:	6878      	ldr	r0, [r7, #4]
 800c724:	4798      	blx	r3
    break;
 800c726:	e049      	b.n	800c7bc <USBD_StdDevReq+0xc8>

  case USB_REQ_TYPE_STANDARD:

    switch (req->bRequest)
 800c728:	683b      	ldr	r3, [r7, #0]
 800c72a:	785b      	ldrb	r3, [r3, #1]
 800c72c:	2b09      	cmp	r3, #9
 800c72e:	d83a      	bhi.n	800c7a6 <USBD_StdDevReq+0xb2>
 800c730:	a201      	add	r2, pc, #4	; (adr r2, 800c738 <USBD_StdDevReq+0x44>)
 800c732:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c736:	bf00      	nop
 800c738:	0800c789 	.word	0x0800c789
 800c73c:	0800c79d 	.word	0x0800c79d
 800c740:	0800c7a7 	.word	0x0800c7a7
 800c744:	0800c793 	.word	0x0800c793
 800c748:	0800c7a7 	.word	0x0800c7a7
 800c74c:	0800c76b 	.word	0x0800c76b
 800c750:	0800c761 	.word	0x0800c761
 800c754:	0800c7a7 	.word	0x0800c7a7
 800c758:	0800c77f 	.word	0x0800c77f
 800c75c:	0800c775 	.word	0x0800c775
    {
    case USB_REQ_GET_DESCRIPTOR:

      USBD_GetDescriptor (pdev, req);
 800c760:	6839      	ldr	r1, [r7, #0]
 800c762:	6878      	ldr	r0, [r7, #4]
 800c764:	f000 f9d2 	bl	800cb0c <USBD_GetDescriptor>
      break;
 800c768:	e022      	b.n	800c7b0 <USBD_StdDevReq+0xbc>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress (pdev, req);
 800c76a:	6839      	ldr	r1, [r7, #0]
 800c76c:	6878      	ldr	r0, [r7, #4]
 800c76e:	f000 fac7 	bl	800cd00 <USBD_SetAddress>
      break;
 800c772:	e01d      	b.n	800c7b0 <USBD_StdDevReq+0xbc>

    case USB_REQ_SET_CONFIGURATION:
      USBD_SetConfig (pdev, req);
 800c774:	6839      	ldr	r1, [r7, #0]
 800c776:	6878      	ldr	r0, [r7, #4]
 800c778:	f000 fb04 	bl	800cd84 <USBD_SetConfig>
      break;
 800c77c:	e018      	b.n	800c7b0 <USBD_StdDevReq+0xbc>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig (pdev, req);
 800c77e:	6839      	ldr	r1, [r7, #0]
 800c780:	6878      	ldr	r0, [r7, #4]
 800c782:	f000 fb8d 	bl	800cea0 <USBD_GetConfig>
      break;
 800c786:	e013      	b.n	800c7b0 <USBD_StdDevReq+0xbc>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus (pdev, req);
 800c788:	6839      	ldr	r1, [r7, #0]
 800c78a:	6878      	ldr	r0, [r7, #4]
 800c78c:	f000 fbbc 	bl	800cf08 <USBD_GetStatus>
      break;
 800c790:	e00e      	b.n	800c7b0 <USBD_StdDevReq+0xbc>


    case USB_REQ_SET_FEATURE:
      USBD_SetFeature (pdev, req);
 800c792:	6839      	ldr	r1, [r7, #0]
 800c794:	6878      	ldr	r0, [r7, #4]
 800c796:	f000 fbea 	bl	800cf6e <USBD_SetFeature>
      break;
 800c79a:	e009      	b.n	800c7b0 <USBD_StdDevReq+0xbc>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature (pdev, req);
 800c79c:	6839      	ldr	r1, [r7, #0]
 800c79e:	6878      	ldr	r0, [r7, #4]
 800c7a0:	f000 fbf9 	bl	800cf96 <USBD_ClrFeature>
      break;
 800c7a4:	e004      	b.n	800c7b0 <USBD_StdDevReq+0xbc>

    default:
      USBD_CtlError(pdev, req);
 800c7a6:	6839      	ldr	r1, [r7, #0]
 800c7a8:	6878      	ldr	r0, [r7, #4]
 800c7aa:	f000 fc52 	bl	800d052 <USBD_CtlError>
      break;
 800c7ae:	bf00      	nop
    }
    break;
 800c7b0:	e004      	b.n	800c7bc <USBD_StdDevReq+0xc8>

  default:
    USBD_CtlError(pdev, req);
 800c7b2:	6839      	ldr	r1, [r7, #0]
 800c7b4:	6878      	ldr	r0, [r7, #4]
 800c7b6:	f000 fc4c 	bl	800d052 <USBD_CtlError>
    break;
 800c7ba:	bf00      	nop
  }

  return ret;
 800c7bc:	7bfb      	ldrb	r3, [r7, #15]
}
 800c7be:	4618      	mov	r0, r3
 800c7c0:	3710      	adds	r7, #16
 800c7c2:	46bd      	mov	sp, r7
 800c7c4:	bd80      	pop	{r7, pc}
 800c7c6:	bf00      	nop

0800c7c8 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 800c7c8:	b580      	push	{r7, lr}
 800c7ca:	b084      	sub	sp, #16
 800c7cc:	af00      	add	r7, sp, #0
 800c7ce:	6078      	str	r0, [r7, #4]
 800c7d0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c7d2:	2300      	movs	r3, #0
 800c7d4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c7d6:	683b      	ldr	r3, [r7, #0]
 800c7d8:	781b      	ldrb	r3, [r3, #0]
 800c7da:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800c7de:	2b20      	cmp	r3, #32
 800c7e0:	d003      	beq.n	800c7ea <USBD_StdItfReq+0x22>
 800c7e2:	2b40      	cmp	r3, #64	; 0x40
 800c7e4:	d001      	beq.n	800c7ea <USBD_StdItfReq+0x22>
 800c7e6:	2b00      	cmp	r3, #0
 800c7e8:	d12a      	bne.n	800c840 <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 800c7ea:	687b      	ldr	r3, [r7, #4]
 800c7ec:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800c7f0:	3b01      	subs	r3, #1
 800c7f2:	2b02      	cmp	r3, #2
 800c7f4:	d81d      	bhi.n	800c832 <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800c7f6:	683b      	ldr	r3, [r7, #0]
 800c7f8:	889b      	ldrh	r3, [r3, #4]
 800c7fa:	b2db      	uxtb	r3, r3
 800c7fc:	2b01      	cmp	r3, #1
 800c7fe:	d813      	bhi.n	800c828 <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup (pdev, req);
 800c800:	687b      	ldr	r3, [r7, #4]
 800c802:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800c806:	689b      	ldr	r3, [r3, #8]
 800c808:	6839      	ldr	r1, [r7, #0]
 800c80a:	6878      	ldr	r0, [r7, #4]
 800c80c:	4798      	blx	r3
 800c80e:	4603      	mov	r3, r0
 800c810:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 800c812:	683b      	ldr	r3, [r7, #0]
 800c814:	88db      	ldrh	r3, [r3, #6]
 800c816:	2b00      	cmp	r3, #0
 800c818:	d110      	bne.n	800c83c <USBD_StdItfReq+0x74>
 800c81a:	7bfb      	ldrb	r3, [r7, #15]
 800c81c:	2b00      	cmp	r3, #0
 800c81e:	d10d      	bne.n	800c83c <USBD_StdItfReq+0x74>
        {
          USBD_CtlSendStatus(pdev);
 800c820:	6878      	ldr	r0, [r7, #4]
 800c822:	f000 fcdf 	bl	800d1e4 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 800c826:	e009      	b.n	800c83c <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 800c828:	6839      	ldr	r1, [r7, #0]
 800c82a:	6878      	ldr	r0, [r7, #4]
 800c82c:	f000 fc11 	bl	800d052 <USBD_CtlError>
      break;
 800c830:	e004      	b.n	800c83c <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 800c832:	6839      	ldr	r1, [r7, #0]
 800c834:	6878      	ldr	r0, [r7, #4]
 800c836:	f000 fc0c 	bl	800d052 <USBD_CtlError>
      break;
 800c83a:	e000      	b.n	800c83e <USBD_StdItfReq+0x76>
      break;
 800c83c:	bf00      	nop
    }
    break;
 800c83e:	e004      	b.n	800c84a <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 800c840:	6839      	ldr	r1, [r7, #0]
 800c842:	6878      	ldr	r0, [r7, #4]
 800c844:	f000 fc05 	bl	800d052 <USBD_CtlError>
    break;
 800c848:	bf00      	nop
  }

  return USBD_OK;
 800c84a:	2300      	movs	r3, #0
}
 800c84c:	4618      	mov	r0, r3
 800c84e:	3710      	adds	r7, #16
 800c850:	46bd      	mov	sp, r7
 800c852:	bd80      	pop	{r7, pc}

0800c854 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 800c854:	b580      	push	{r7, lr}
 800c856:	b084      	sub	sp, #16
 800c858:	af00      	add	r7, sp, #0
 800c85a:	6078      	str	r0, [r7, #4]
 800c85c:	6039      	str	r1, [r7, #0]

  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800c85e:	2300      	movs	r3, #0
 800c860:	73fb      	strb	r3, [r7, #15]
  USBD_EndpointTypeDef   *pep;
  ep_addr  = LOBYTE(req->wIndex);
 800c862:	683b      	ldr	r3, [r7, #0]
 800c864:	889b      	ldrh	r3, [r3, #4]
 800c866:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c868:	683b      	ldr	r3, [r7, #0]
 800c86a:	781b      	ldrb	r3, [r3, #0]
 800c86c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800c870:	2b20      	cmp	r3, #32
 800c872:	d004      	beq.n	800c87e <USBD_StdEPReq+0x2a>
 800c874:	2b40      	cmp	r3, #64	; 0x40
 800c876:	d002      	beq.n	800c87e <USBD_StdEPReq+0x2a>
 800c878:	2b00      	cmp	r3, #0
 800c87a:	d008      	beq.n	800c88e <USBD_StdEPReq+0x3a>
 800c87c:	e13b      	b.n	800caf6 <USBD_StdEPReq+0x2a2>
  {

  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    pdev->pClass->Setup (pdev, req);
 800c87e:	687b      	ldr	r3, [r7, #4]
 800c880:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800c884:	689b      	ldr	r3, [r3, #8]
 800c886:	6839      	ldr	r1, [r7, #0]
 800c888:	6878      	ldr	r0, [r7, #4]
 800c88a:	4798      	blx	r3
    break;
 800c88c:	e138      	b.n	800cb00 <USBD_StdEPReq+0x2ac>

  case USB_REQ_TYPE_STANDARD:
    /* Check if it is a class request */
    if ((req->bmRequest & 0x60U) == 0x20U)
 800c88e:	683b      	ldr	r3, [r7, #0]
 800c890:	781b      	ldrb	r3, [r3, #0]
 800c892:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800c896:	2b20      	cmp	r3, #32
 800c898:	d10a      	bne.n	800c8b0 <USBD_StdEPReq+0x5c>
    {
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup (pdev, req);
 800c89a:	687b      	ldr	r3, [r7, #4]
 800c89c:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800c8a0:	689b      	ldr	r3, [r3, #8]
 800c8a2:	6839      	ldr	r1, [r7, #0]
 800c8a4:	6878      	ldr	r0, [r7, #4]
 800c8a6:	4798      	blx	r3
 800c8a8:	4603      	mov	r3, r0
 800c8aa:	73fb      	strb	r3, [r7, #15]

      return ret;
 800c8ac:	7bfb      	ldrb	r3, [r7, #15]
 800c8ae:	e128      	b.n	800cb02 <USBD_StdEPReq+0x2ae>
    }

    switch (req->bRequest)
 800c8b0:	683b      	ldr	r3, [r7, #0]
 800c8b2:	785b      	ldrb	r3, [r3, #1]
 800c8b4:	2b01      	cmp	r3, #1
 800c8b6:	d03e      	beq.n	800c936 <USBD_StdEPReq+0xe2>
 800c8b8:	2b03      	cmp	r3, #3
 800c8ba:	d002      	beq.n	800c8c2 <USBD_StdEPReq+0x6e>
 800c8bc:	2b00      	cmp	r3, #0
 800c8be:	d070      	beq.n	800c9a2 <USBD_StdEPReq+0x14e>
 800c8c0:	e113      	b.n	800caea <USBD_StdEPReq+0x296>
    {

    case USB_REQ_SET_FEATURE :

      switch (pdev->dev_state)
 800c8c2:	687b      	ldr	r3, [r7, #4]
 800c8c4:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800c8c8:	2b02      	cmp	r3, #2
 800c8ca:	d002      	beq.n	800c8d2 <USBD_StdEPReq+0x7e>
 800c8cc:	2b03      	cmp	r3, #3
 800c8ce:	d015      	beq.n	800c8fc <USBD_StdEPReq+0xa8>
 800c8d0:	e02b      	b.n	800c92a <USBD_StdEPReq+0xd6>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c8d2:	7bbb      	ldrb	r3, [r7, #14]
 800c8d4:	2b00      	cmp	r3, #0
 800c8d6:	d00c      	beq.n	800c8f2 <USBD_StdEPReq+0x9e>
 800c8d8:	7bbb      	ldrb	r3, [r7, #14]
 800c8da:	2b80      	cmp	r3, #128	; 0x80
 800c8dc:	d009      	beq.n	800c8f2 <USBD_StdEPReq+0x9e>
        {
          USBD_LL_StallEP(pdev, ep_addr);
 800c8de:	7bbb      	ldrb	r3, [r7, #14]
 800c8e0:	4619      	mov	r1, r3
 800c8e2:	6878      	ldr	r0, [r7, #4]
 800c8e4:	f001 f91c 	bl	800db20 <USBD_LL_StallEP>
          USBD_LL_StallEP(pdev, 0x80U);
 800c8e8:	2180      	movs	r1, #128	; 0x80
 800c8ea:	6878      	ldr	r0, [r7, #4]
 800c8ec:	f001 f918 	bl	800db20 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800c8f0:	e020      	b.n	800c934 <USBD_StdEPReq+0xe0>
          USBD_CtlError(pdev, req);
 800c8f2:	6839      	ldr	r1, [r7, #0]
 800c8f4:	6878      	ldr	r0, [r7, #4]
 800c8f6:	f000 fbac 	bl	800d052 <USBD_CtlError>
        break;
 800c8fa:	e01b      	b.n	800c934 <USBD_StdEPReq+0xe0>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800c8fc:	683b      	ldr	r3, [r7, #0]
 800c8fe:	885b      	ldrh	r3, [r3, #2]
 800c900:	2b00      	cmp	r3, #0
 800c902:	d10e      	bne.n	800c922 <USBD_StdEPReq+0xce>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800c904:	7bbb      	ldrb	r3, [r7, #14]
 800c906:	2b00      	cmp	r3, #0
 800c908:	d00b      	beq.n	800c922 <USBD_StdEPReq+0xce>
 800c90a:	7bbb      	ldrb	r3, [r7, #14]
 800c90c:	2b80      	cmp	r3, #128	; 0x80
 800c90e:	d008      	beq.n	800c922 <USBD_StdEPReq+0xce>
 800c910:	683b      	ldr	r3, [r7, #0]
 800c912:	88db      	ldrh	r3, [r3, #6]
 800c914:	2b00      	cmp	r3, #0
 800c916:	d104      	bne.n	800c922 <USBD_StdEPReq+0xce>
          {
            USBD_LL_StallEP(pdev, ep_addr);
 800c918:	7bbb      	ldrb	r3, [r7, #14]
 800c91a:	4619      	mov	r1, r3
 800c91c:	6878      	ldr	r0, [r7, #4]
 800c91e:	f001 f8ff 	bl	800db20 <USBD_LL_StallEP>
          }
        }
        USBD_CtlSendStatus(pdev);
 800c922:	6878      	ldr	r0, [r7, #4]
 800c924:	f000 fc5e 	bl	800d1e4 <USBD_CtlSendStatus>

        break;
 800c928:	e004      	b.n	800c934 <USBD_StdEPReq+0xe0>

      default:
        USBD_CtlError(pdev, req);
 800c92a:	6839      	ldr	r1, [r7, #0]
 800c92c:	6878      	ldr	r0, [r7, #4]
 800c92e:	f000 fb90 	bl	800d052 <USBD_CtlError>
        break;
 800c932:	bf00      	nop
      }
      break;
 800c934:	e0de      	b.n	800caf4 <USBD_StdEPReq+0x2a0>

    case USB_REQ_CLEAR_FEATURE :

      switch (pdev->dev_state)
 800c936:	687b      	ldr	r3, [r7, #4]
 800c938:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800c93c:	2b02      	cmp	r3, #2
 800c93e:	d002      	beq.n	800c946 <USBD_StdEPReq+0xf2>
 800c940:	2b03      	cmp	r3, #3
 800c942:	d015      	beq.n	800c970 <USBD_StdEPReq+0x11c>
 800c944:	e026      	b.n	800c994 <USBD_StdEPReq+0x140>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c946:	7bbb      	ldrb	r3, [r7, #14]
 800c948:	2b00      	cmp	r3, #0
 800c94a:	d00c      	beq.n	800c966 <USBD_StdEPReq+0x112>
 800c94c:	7bbb      	ldrb	r3, [r7, #14]
 800c94e:	2b80      	cmp	r3, #128	; 0x80
 800c950:	d009      	beq.n	800c966 <USBD_StdEPReq+0x112>
        {
          USBD_LL_StallEP(pdev, ep_addr);
 800c952:	7bbb      	ldrb	r3, [r7, #14]
 800c954:	4619      	mov	r1, r3
 800c956:	6878      	ldr	r0, [r7, #4]
 800c958:	f001 f8e2 	bl	800db20 <USBD_LL_StallEP>
          USBD_LL_StallEP(pdev, 0x80U);
 800c95c:	2180      	movs	r1, #128	; 0x80
 800c95e:	6878      	ldr	r0, [r7, #4]
 800c960:	f001 f8de 	bl	800db20 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800c964:	e01c      	b.n	800c9a0 <USBD_StdEPReq+0x14c>
          USBD_CtlError(pdev, req);
 800c966:	6839      	ldr	r1, [r7, #0]
 800c968:	6878      	ldr	r0, [r7, #4]
 800c96a:	f000 fb72 	bl	800d052 <USBD_CtlError>
        break;
 800c96e:	e017      	b.n	800c9a0 <USBD_StdEPReq+0x14c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800c970:	683b      	ldr	r3, [r7, #0]
 800c972:	885b      	ldrh	r3, [r3, #2]
 800c974:	2b00      	cmp	r3, #0
 800c976:	d112      	bne.n	800c99e <USBD_StdEPReq+0x14a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 800c978:	7bbb      	ldrb	r3, [r7, #14]
 800c97a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c97e:	2b00      	cmp	r3, #0
 800c980:	d004      	beq.n	800c98c <USBD_StdEPReq+0x138>
          {
            USBD_LL_ClearStallEP(pdev, ep_addr);
 800c982:	7bbb      	ldrb	r3, [r7, #14]
 800c984:	4619      	mov	r1, r3
 800c986:	6878      	ldr	r0, [r7, #4]
 800c988:	f001 f8e9 	bl	800db5e <USBD_LL_ClearStallEP>
          }
          USBD_CtlSendStatus(pdev);
 800c98c:	6878      	ldr	r0, [r7, #4]
 800c98e:	f000 fc29 	bl	800d1e4 <USBD_CtlSendStatus>
        }
        break;
 800c992:	e004      	b.n	800c99e <USBD_StdEPReq+0x14a>

      default:
        USBD_CtlError(pdev, req);
 800c994:	6839      	ldr	r1, [r7, #0]
 800c996:	6878      	ldr	r0, [r7, #4]
 800c998:	f000 fb5b 	bl	800d052 <USBD_CtlError>
        break;
 800c99c:	e000      	b.n	800c9a0 <USBD_StdEPReq+0x14c>
        break;
 800c99e:	bf00      	nop
      }
      break;
 800c9a0:	e0a8      	b.n	800caf4 <USBD_StdEPReq+0x2a0>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 800c9a2:	687b      	ldr	r3, [r7, #4]
 800c9a4:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800c9a8:	2b02      	cmp	r3, #2
 800c9aa:	d002      	beq.n	800c9b2 <USBD_StdEPReq+0x15e>
 800c9ac:	2b03      	cmp	r3, #3
 800c9ae:	d031      	beq.n	800ca14 <USBD_StdEPReq+0x1c0>
 800c9b0:	e095      	b.n	800cade <USBD_StdEPReq+0x28a>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c9b2:	7bbb      	ldrb	r3, [r7, #14]
 800c9b4:	2b00      	cmp	r3, #0
 800c9b6:	d007      	beq.n	800c9c8 <USBD_StdEPReq+0x174>
 800c9b8:	7bbb      	ldrb	r3, [r7, #14]
 800c9ba:	2b80      	cmp	r3, #128	; 0x80
 800c9bc:	d004      	beq.n	800c9c8 <USBD_StdEPReq+0x174>
        {
          USBD_CtlError(pdev, req);
 800c9be:	6839      	ldr	r1, [r7, #0]
 800c9c0:	6878      	ldr	r0, [r7, #4]
 800c9c2:	f000 fb46 	bl	800d052 <USBD_CtlError>
          break;
 800c9c6:	e08f      	b.n	800cae8 <USBD_StdEPReq+0x294>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 800c9c8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c9cc:	2b00      	cmp	r3, #0
 800c9ce:	da0b      	bge.n	800c9e8 <USBD_StdEPReq+0x194>
 800c9d0:	7bbb      	ldrb	r3, [r7, #14]
 800c9d2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c9d6:	4613      	mov	r3, r2
 800c9d8:	009b      	lsls	r3, r3, #2
 800c9da:	4413      	add	r3, r2
 800c9dc:	009b      	lsls	r3, r3, #2
 800c9de:	3310      	adds	r3, #16
 800c9e0:	687a      	ldr	r2, [r7, #4]
 800c9e2:	4413      	add	r3, r2
 800c9e4:	3304      	adds	r3, #4
 800c9e6:	e00a      	b.n	800c9fe <USBD_StdEPReq+0x1aa>
          &pdev->ep_out[ep_addr & 0x7FU];
 800c9e8:	7bbb      	ldrb	r3, [r7, #14]
 800c9ea:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 800c9ee:	4613      	mov	r3, r2
 800c9f0:	009b      	lsls	r3, r3, #2
 800c9f2:	4413      	add	r3, r2
 800c9f4:	009b      	lsls	r3, r3, #2
 800c9f6:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 800c9fa:	687a      	ldr	r2, [r7, #4]
 800c9fc:	4413      	add	r3, r2
 800c9fe:	60bb      	str	r3, [r7, #8]

          pep->status = 0x0000U;
 800ca00:	68bb      	ldr	r3, [r7, #8]
 800ca02:	2200      	movs	r2, #0
 800ca04:	601a      	str	r2, [r3, #0]

          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 800ca06:	68bb      	ldr	r3, [r7, #8]
 800ca08:	2202      	movs	r2, #2
 800ca0a:	4619      	mov	r1, r3
 800ca0c:	6878      	ldr	r0, [r7, #4]
 800ca0e:	f000 fb8b 	bl	800d128 <USBD_CtlSendData>
          break;
 800ca12:	e069      	b.n	800cae8 <USBD_StdEPReq+0x294>

      case USBD_STATE_CONFIGURED:
        if((ep_addr & 0x80U) == 0x80U)
 800ca14:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ca18:	2b00      	cmp	r3, #0
 800ca1a:	da11      	bge.n	800ca40 <USBD_StdEPReq+0x1ec>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800ca1c:	7bbb      	ldrb	r3, [r7, #14]
 800ca1e:	f003 020f 	and.w	r2, r3, #15
 800ca22:	6879      	ldr	r1, [r7, #4]
 800ca24:	4613      	mov	r3, r2
 800ca26:	009b      	lsls	r3, r3, #2
 800ca28:	4413      	add	r3, r2
 800ca2a:	009b      	lsls	r3, r3, #2
 800ca2c:	440b      	add	r3, r1
 800ca2e:	3318      	adds	r3, #24
 800ca30:	681b      	ldr	r3, [r3, #0]
 800ca32:	2b00      	cmp	r3, #0
 800ca34:	d117      	bne.n	800ca66 <USBD_StdEPReq+0x212>
          {
            USBD_CtlError(pdev, req);
 800ca36:	6839      	ldr	r1, [r7, #0]
 800ca38:	6878      	ldr	r0, [r7, #4]
 800ca3a:	f000 fb0a 	bl	800d052 <USBD_CtlError>
            break;
 800ca3e:	e053      	b.n	800cae8 <USBD_StdEPReq+0x294>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800ca40:	7bbb      	ldrb	r3, [r7, #14]
 800ca42:	f003 020f 	and.w	r2, r3, #15
 800ca46:	6879      	ldr	r1, [r7, #4]
 800ca48:	4613      	mov	r3, r2
 800ca4a:	009b      	lsls	r3, r3, #2
 800ca4c:	4413      	add	r3, r2
 800ca4e:	009b      	lsls	r3, r3, #2
 800ca50:	440b      	add	r3, r1
 800ca52:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800ca56:	681b      	ldr	r3, [r3, #0]
 800ca58:	2b00      	cmp	r3, #0
 800ca5a:	d104      	bne.n	800ca66 <USBD_StdEPReq+0x212>
          {
            USBD_CtlError(pdev, req);
 800ca5c:	6839      	ldr	r1, [r7, #0]
 800ca5e:	6878      	ldr	r0, [r7, #4]
 800ca60:	f000 faf7 	bl	800d052 <USBD_CtlError>
            break;
 800ca64:	e040      	b.n	800cae8 <USBD_StdEPReq+0x294>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 800ca66:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ca6a:	2b00      	cmp	r3, #0
 800ca6c:	da0b      	bge.n	800ca86 <USBD_StdEPReq+0x232>
 800ca6e:	7bbb      	ldrb	r3, [r7, #14]
 800ca70:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ca74:	4613      	mov	r3, r2
 800ca76:	009b      	lsls	r3, r3, #2
 800ca78:	4413      	add	r3, r2
 800ca7a:	009b      	lsls	r3, r3, #2
 800ca7c:	3310      	adds	r3, #16
 800ca7e:	687a      	ldr	r2, [r7, #4]
 800ca80:	4413      	add	r3, r2
 800ca82:	3304      	adds	r3, #4
 800ca84:	e00a      	b.n	800ca9c <USBD_StdEPReq+0x248>
          &pdev->ep_out[ep_addr & 0x7FU];
 800ca86:	7bbb      	ldrb	r3, [r7, #14]
 800ca88:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 800ca8c:	4613      	mov	r3, r2
 800ca8e:	009b      	lsls	r3, r3, #2
 800ca90:	4413      	add	r3, r2
 800ca92:	009b      	lsls	r3, r3, #2
 800ca94:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 800ca98:	687a      	ldr	r2, [r7, #4]
 800ca9a:	4413      	add	r3, r2
 800ca9c:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800ca9e:	7bbb      	ldrb	r3, [r7, #14]
 800caa0:	2b00      	cmp	r3, #0
 800caa2:	d002      	beq.n	800caaa <USBD_StdEPReq+0x256>
 800caa4:	7bbb      	ldrb	r3, [r7, #14]
 800caa6:	2b80      	cmp	r3, #128	; 0x80
 800caa8:	d103      	bne.n	800cab2 <USBD_StdEPReq+0x25e>
          {
            pep->status = 0x0000U;
 800caaa:	68bb      	ldr	r3, [r7, #8]
 800caac:	2200      	movs	r2, #0
 800caae:	601a      	str	r2, [r3, #0]
 800cab0:	e00e      	b.n	800cad0 <USBD_StdEPReq+0x27c>
          }
          else if(USBD_LL_IsStallEP(pdev, ep_addr))
 800cab2:	7bbb      	ldrb	r3, [r7, #14]
 800cab4:	4619      	mov	r1, r3
 800cab6:	6878      	ldr	r0, [r7, #4]
 800cab8:	f001 f870 	bl	800db9c <USBD_LL_IsStallEP>
 800cabc:	4603      	mov	r3, r0
 800cabe:	2b00      	cmp	r3, #0
 800cac0:	d003      	beq.n	800caca <USBD_StdEPReq+0x276>
          {
            pep->status = 0x0001U;
 800cac2:	68bb      	ldr	r3, [r7, #8]
 800cac4:	2201      	movs	r2, #1
 800cac6:	601a      	str	r2, [r3, #0]
 800cac8:	e002      	b.n	800cad0 <USBD_StdEPReq+0x27c>
          }
          else
          {
            pep->status = 0x0000U;
 800caca:	68bb      	ldr	r3, [r7, #8]
 800cacc:	2200      	movs	r2, #0
 800cace:	601a      	str	r2, [r3, #0]
          }

          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 800cad0:	68bb      	ldr	r3, [r7, #8]
 800cad2:	2202      	movs	r2, #2
 800cad4:	4619      	mov	r1, r3
 800cad6:	6878      	ldr	r0, [r7, #4]
 800cad8:	f000 fb26 	bl	800d128 <USBD_CtlSendData>
          break;
 800cadc:	e004      	b.n	800cae8 <USBD_StdEPReq+0x294>

      default:
        USBD_CtlError(pdev, req);
 800cade:	6839      	ldr	r1, [r7, #0]
 800cae0:	6878      	ldr	r0, [r7, #4]
 800cae2:	f000 fab6 	bl	800d052 <USBD_CtlError>
        break;
 800cae6:	bf00      	nop
      }
      break;
 800cae8:	e004      	b.n	800caf4 <USBD_StdEPReq+0x2a0>

    default:
      USBD_CtlError(pdev, req);
 800caea:	6839      	ldr	r1, [r7, #0]
 800caec:	6878      	ldr	r0, [r7, #4]
 800caee:	f000 fab0 	bl	800d052 <USBD_CtlError>
      break;
 800caf2:	bf00      	nop
    }
    break;
 800caf4:	e004      	b.n	800cb00 <USBD_StdEPReq+0x2ac>

  default:
    USBD_CtlError(pdev, req);
 800caf6:	6839      	ldr	r1, [r7, #0]
 800caf8:	6878      	ldr	r0, [r7, #4]
 800cafa:	f000 faaa 	bl	800d052 <USBD_CtlError>
    break;
 800cafe:	bf00      	nop
  }

  return ret;
 800cb00:	7bfb      	ldrb	r3, [r7, #15]
}
 800cb02:	4618      	mov	r0, r3
 800cb04:	3710      	adds	r7, #16
 800cb06:	46bd      	mov	sp, r7
 800cb08:	bd80      	pop	{r7, pc}
	...

0800cb0c <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev ,
                               USBD_SetupReqTypedef *req)
{
 800cb0c:	b580      	push	{r7, lr}
 800cb0e:	b084      	sub	sp, #16
 800cb10:	af00      	add	r7, sp, #0
 800cb12:	6078      	str	r0, [r7, #4]
 800cb14:	6039      	str	r1, [r7, #0]
  uint16_t len;
  uint8_t *pbuf;


  switch (req->wValue >> 8)
 800cb16:	683b      	ldr	r3, [r7, #0]
 800cb18:	885b      	ldrh	r3, [r3, #2]
 800cb1a:	0a1b      	lsrs	r3, r3, #8
 800cb1c:	b29b      	uxth	r3, r3
 800cb1e:	3b01      	subs	r3, #1
 800cb20:	2b06      	cmp	r3, #6
 800cb22:	f200 80c9 	bhi.w	800ccb8 <USBD_GetDescriptor+0x1ac>
 800cb26:	a201      	add	r2, pc, #4	; (adr r2, 800cb2c <USBD_GetDescriptor+0x20>)
 800cb28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cb2c:	0800cb49 	.word	0x0800cb49
 800cb30:	0800cb61 	.word	0x0800cb61
 800cb34:	0800cba1 	.word	0x0800cba1
 800cb38:	0800ccb9 	.word	0x0800ccb9
 800cb3c:	0800ccb9 	.word	0x0800ccb9
 800cb40:	0800cc65 	.word	0x0800cc65
 800cb44:	0800cc8b 	.word	0x0800cc8b
  case USB_DESC_TYPE_BOS:
    pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
    break;
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800cb48:	687b      	ldr	r3, [r7, #4]
 800cb4a:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800cb4e:	681b      	ldr	r3, [r3, #0]
 800cb50:	687a      	ldr	r2, [r7, #4]
 800cb52:	7c12      	ldrb	r2, [r2, #16]
 800cb54:	f107 010a 	add.w	r1, r7, #10
 800cb58:	4610      	mov	r0, r2
 800cb5a:	4798      	blx	r3
 800cb5c:	60f8      	str	r0, [r7, #12]
    break;
 800cb5e:	e0b0      	b.n	800ccc2 <USBD_GetDescriptor+0x1b6>

  case USB_DESC_TYPE_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH )
 800cb60:	687b      	ldr	r3, [r7, #4]
 800cb62:	7c1b      	ldrb	r3, [r3, #16]
 800cb64:	2b00      	cmp	r3, #0
 800cb66:	d10d      	bne.n	800cb84 <USBD_GetDescriptor+0x78>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetHSConfigDescriptor(&len);
 800cb68:	687b      	ldr	r3, [r7, #4]
 800cb6a:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800cb6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cb70:	f107 020a 	add.w	r2, r7, #10
 800cb74:	4610      	mov	r0, r2
 800cb76:	4798      	blx	r3
 800cb78:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800cb7a:	68fb      	ldr	r3, [r7, #12]
 800cb7c:	3301      	adds	r3, #1
 800cb7e:	2202      	movs	r2, #2
 800cb80:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 800cb82:	e09e      	b.n	800ccc2 <USBD_GetDescriptor+0x1b6>
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 800cb84:	687b      	ldr	r3, [r7, #4]
 800cb86:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800cb8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cb8c:	f107 020a 	add.w	r2, r7, #10
 800cb90:	4610      	mov	r0, r2
 800cb92:	4798      	blx	r3
 800cb94:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800cb96:	68fb      	ldr	r3, [r7, #12]
 800cb98:	3301      	adds	r3, #1
 800cb9a:	2202      	movs	r2, #2
 800cb9c:	701a      	strb	r2, [r3, #0]
    break;
 800cb9e:	e090      	b.n	800ccc2 <USBD_GetDescriptor+0x1b6>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 800cba0:	683b      	ldr	r3, [r7, #0]
 800cba2:	885b      	ldrh	r3, [r3, #2]
 800cba4:	b2db      	uxtb	r3, r3
 800cba6:	2b05      	cmp	r3, #5
 800cba8:	d856      	bhi.n	800cc58 <USBD_GetDescriptor+0x14c>
 800cbaa:	a201      	add	r2, pc, #4	; (adr r2, 800cbb0 <USBD_GetDescriptor+0xa4>)
 800cbac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cbb0:	0800cbc9 	.word	0x0800cbc9
 800cbb4:	0800cbe1 	.word	0x0800cbe1
 800cbb8:	0800cbf9 	.word	0x0800cbf9
 800cbbc:	0800cc11 	.word	0x0800cc11
 800cbc0:	0800cc29 	.word	0x0800cc29
 800cbc4:	0800cc41 	.word	0x0800cc41
    {
    case USBD_IDX_LANGID_STR:
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800cbc8:	687b      	ldr	r3, [r7, #4]
 800cbca:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800cbce:	685b      	ldr	r3, [r3, #4]
 800cbd0:	687a      	ldr	r2, [r7, #4]
 800cbd2:	7c12      	ldrb	r2, [r2, #16]
 800cbd4:	f107 010a 	add.w	r1, r7, #10
 800cbd8:	4610      	mov	r0, r2
 800cbda:	4798      	blx	r3
 800cbdc:	60f8      	str	r0, [r7, #12]
      break;
 800cbde:	e040      	b.n	800cc62 <USBD_GetDescriptor+0x156>

    case USBD_IDX_MFC_STR:
      pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800cbe0:	687b      	ldr	r3, [r7, #4]
 800cbe2:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800cbe6:	689b      	ldr	r3, [r3, #8]
 800cbe8:	687a      	ldr	r2, [r7, #4]
 800cbea:	7c12      	ldrb	r2, [r2, #16]
 800cbec:	f107 010a 	add.w	r1, r7, #10
 800cbf0:	4610      	mov	r0, r2
 800cbf2:	4798      	blx	r3
 800cbf4:	60f8      	str	r0, [r7, #12]
      break;
 800cbf6:	e034      	b.n	800cc62 <USBD_GetDescriptor+0x156>

    case USBD_IDX_PRODUCT_STR:
      pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800cbf8:	687b      	ldr	r3, [r7, #4]
 800cbfa:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800cbfe:	68db      	ldr	r3, [r3, #12]
 800cc00:	687a      	ldr	r2, [r7, #4]
 800cc02:	7c12      	ldrb	r2, [r2, #16]
 800cc04:	f107 010a 	add.w	r1, r7, #10
 800cc08:	4610      	mov	r0, r2
 800cc0a:	4798      	blx	r3
 800cc0c:	60f8      	str	r0, [r7, #12]
      break;
 800cc0e:	e028      	b.n	800cc62 <USBD_GetDescriptor+0x156>

    case USBD_IDX_SERIAL_STR:
      pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800cc10:	687b      	ldr	r3, [r7, #4]
 800cc12:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800cc16:	691b      	ldr	r3, [r3, #16]
 800cc18:	687a      	ldr	r2, [r7, #4]
 800cc1a:	7c12      	ldrb	r2, [r2, #16]
 800cc1c:	f107 010a 	add.w	r1, r7, #10
 800cc20:	4610      	mov	r0, r2
 800cc22:	4798      	blx	r3
 800cc24:	60f8      	str	r0, [r7, #12]
      break;
 800cc26:	e01c      	b.n	800cc62 <USBD_GetDescriptor+0x156>

    case USBD_IDX_CONFIG_STR:
      pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800cc28:	687b      	ldr	r3, [r7, #4]
 800cc2a:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800cc2e:	695b      	ldr	r3, [r3, #20]
 800cc30:	687a      	ldr	r2, [r7, #4]
 800cc32:	7c12      	ldrb	r2, [r2, #16]
 800cc34:	f107 010a 	add.w	r1, r7, #10
 800cc38:	4610      	mov	r0, r2
 800cc3a:	4798      	blx	r3
 800cc3c:	60f8      	str	r0, [r7, #12]
      break;
 800cc3e:	e010      	b.n	800cc62 <USBD_GetDescriptor+0x156>

    case USBD_IDX_INTERFACE_STR:
      pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800cc40:	687b      	ldr	r3, [r7, #4]
 800cc42:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800cc46:	699b      	ldr	r3, [r3, #24]
 800cc48:	687a      	ldr	r2, [r7, #4]
 800cc4a:	7c12      	ldrb	r2, [r2, #16]
 800cc4c:	f107 010a 	add.w	r1, r7, #10
 800cc50:	4610      	mov	r0, r2
 800cc52:	4798      	blx	r3
 800cc54:	60f8      	str	r0, [r7, #12]
      break;
 800cc56:	e004      	b.n	800cc62 <USBD_GetDescriptor+0x156>
    default:
#if (USBD_SUPPORT_USER_STRING == 1U)
      pbuf = pdev->pClass->GetUsrStrDescriptor(pdev, (req->wValue) , &len);
      break;
#else
       USBD_CtlError(pdev , req);
 800cc58:	6839      	ldr	r1, [r7, #0]
 800cc5a:	6878      	ldr	r0, [r7, #4]
 800cc5c:	f000 f9f9 	bl	800d052 <USBD_CtlError>
      return;
 800cc60:	e04b      	b.n	800ccfa <USBD_GetDescriptor+0x1ee>
#endif
    }
    break;
 800cc62:	e02e      	b.n	800ccc2 <USBD_GetDescriptor+0x1b6>
  case USB_DESC_TYPE_DEVICE_QUALIFIER:

    if(pdev->dev_speed == USBD_SPEED_HIGH)
 800cc64:	687b      	ldr	r3, [r7, #4]
 800cc66:	7c1b      	ldrb	r3, [r3, #16]
 800cc68:	2b00      	cmp	r3, #0
 800cc6a:	d109      	bne.n	800cc80 <USBD_GetDescriptor+0x174>
    {
      pbuf = (uint8_t *)pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800cc6c:	687b      	ldr	r3, [r7, #4]
 800cc6e:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800cc72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cc74:	f107 020a 	add.w	r2, r7, #10
 800cc78:	4610      	mov	r0, r2
 800cc7a:	4798      	blx	r3
 800cc7c:	60f8      	str	r0, [r7, #12]
      break;
 800cc7e:	e020      	b.n	800ccc2 <USBD_GetDescriptor+0x1b6>
    }
    else
    {
      USBD_CtlError(pdev , req);
 800cc80:	6839      	ldr	r1, [r7, #0]
 800cc82:	6878      	ldr	r0, [r7, #4]
 800cc84:	f000 f9e5 	bl	800d052 <USBD_CtlError>
      return;
 800cc88:	e037      	b.n	800ccfa <USBD_GetDescriptor+0x1ee>
    }

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 800cc8a:	687b      	ldr	r3, [r7, #4]
 800cc8c:	7c1b      	ldrb	r3, [r3, #16]
 800cc8e:	2b00      	cmp	r3, #0
 800cc90:	d10d      	bne.n	800ccae <USBD_GetDescriptor+0x1a2>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800cc92:	687b      	ldr	r3, [r7, #4]
 800cc94:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800cc98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cc9a:	f107 020a 	add.w	r2, r7, #10
 800cc9e:	4610      	mov	r0, r2
 800cca0:	4798      	blx	r3
 800cca2:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800cca4:	68fb      	ldr	r3, [r7, #12]
 800cca6:	3301      	adds	r3, #1
 800cca8:	2207      	movs	r2, #7
 800ccaa:	701a      	strb	r2, [r3, #0]
      break;
 800ccac:	e009      	b.n	800ccc2 <USBD_GetDescriptor+0x1b6>
    }
    else
    {
      USBD_CtlError(pdev , req);
 800ccae:	6839      	ldr	r1, [r7, #0]
 800ccb0:	6878      	ldr	r0, [r7, #4]
 800ccb2:	f000 f9ce 	bl	800d052 <USBD_CtlError>
      return;
 800ccb6:	e020      	b.n	800ccfa <USBD_GetDescriptor+0x1ee>
    }

  default:
     USBD_CtlError(pdev , req);
 800ccb8:	6839      	ldr	r1, [r7, #0]
 800ccba:	6878      	ldr	r0, [r7, #4]
 800ccbc:	f000 f9c9 	bl	800d052 <USBD_CtlError>
    return;
 800ccc0:	e01b      	b.n	800ccfa <USBD_GetDescriptor+0x1ee>
  }

  if((len != 0U) && (req->wLength != 0U))
 800ccc2:	897b      	ldrh	r3, [r7, #10]
 800ccc4:	2b00      	cmp	r3, #0
 800ccc6:	d011      	beq.n	800ccec <USBD_GetDescriptor+0x1e0>
 800ccc8:	683b      	ldr	r3, [r7, #0]
 800ccca:	88db      	ldrh	r3, [r3, #6]
 800cccc:	2b00      	cmp	r3, #0
 800ccce:	d00d      	beq.n	800ccec <USBD_GetDescriptor+0x1e0>
  {

    len = MIN(len, req->wLength);
 800ccd0:	683b      	ldr	r3, [r7, #0]
 800ccd2:	88da      	ldrh	r2, [r3, #6]
 800ccd4:	897b      	ldrh	r3, [r7, #10]
 800ccd6:	4293      	cmp	r3, r2
 800ccd8:	bf28      	it	cs
 800ccda:	4613      	movcs	r3, r2
 800ccdc:	b29b      	uxth	r3, r3
 800ccde:	817b      	strh	r3, [r7, #10]

    USBD_CtlSendData (pdev, pbuf, len);
 800cce0:	897b      	ldrh	r3, [r7, #10]
 800cce2:	461a      	mov	r2, r3
 800cce4:	68f9      	ldr	r1, [r7, #12]
 800cce6:	6878      	ldr	r0, [r7, #4]
 800cce8:	f000 fa1e 	bl	800d128 <USBD_CtlSendData>
  }

  if(req->wLength == 0U)
 800ccec:	683b      	ldr	r3, [r7, #0]
 800ccee:	88db      	ldrh	r3, [r3, #6]
 800ccf0:	2b00      	cmp	r3, #0
 800ccf2:	d102      	bne.n	800ccfa <USBD_GetDescriptor+0x1ee>
  {
   USBD_CtlSendStatus(pdev);
 800ccf4:	6878      	ldr	r0, [r7, #4]
 800ccf6:	f000 fa75 	bl	800d1e4 <USBD_CtlSendStatus>
  }
}
 800ccfa:	3710      	adds	r7, #16
 800ccfc:	46bd      	mov	sp, r7
 800ccfe:	bd80      	pop	{r7, pc}

0800cd00 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 800cd00:	b580      	push	{r7, lr}
 800cd02:	b084      	sub	sp, #16
 800cd04:	af00      	add	r7, sp, #0
 800cd06:	6078      	str	r0, [r7, #4]
 800cd08:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800cd0a:	683b      	ldr	r3, [r7, #0]
 800cd0c:	889b      	ldrh	r3, [r3, #4]
 800cd0e:	2b00      	cmp	r3, #0
 800cd10:	d130      	bne.n	800cd74 <USBD_SetAddress+0x74>
 800cd12:	683b      	ldr	r3, [r7, #0]
 800cd14:	88db      	ldrh	r3, [r3, #6]
 800cd16:	2b00      	cmp	r3, #0
 800cd18:	d12c      	bne.n	800cd74 <USBD_SetAddress+0x74>
 800cd1a:	683b      	ldr	r3, [r7, #0]
 800cd1c:	885b      	ldrh	r3, [r3, #2]
 800cd1e:	2b7f      	cmp	r3, #127	; 0x7f
 800cd20:	d828      	bhi.n	800cd74 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800cd22:	683b      	ldr	r3, [r7, #0]
 800cd24:	885b      	ldrh	r3, [r3, #2]
 800cd26:	b2db      	uxtb	r3, r3
 800cd28:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cd2c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cd2e:	687b      	ldr	r3, [r7, #4]
 800cd30:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800cd34:	2b03      	cmp	r3, #3
 800cd36:	d104      	bne.n	800cd42 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev , req);
 800cd38:	6839      	ldr	r1, [r7, #0]
 800cd3a:	6878      	ldr	r0, [r7, #4]
 800cd3c:	f000 f989 	bl	800d052 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cd40:	e01c      	b.n	800cd7c <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800cd42:	687b      	ldr	r3, [r7, #4]
 800cd44:	7bfa      	ldrb	r2, [r7, #15]
 800cd46:	f883 2276 	strb.w	r2, [r3, #630]	; 0x276
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800cd4a:	7bfb      	ldrb	r3, [r7, #15]
 800cd4c:	4619      	mov	r1, r3
 800cd4e:	6878      	ldr	r0, [r7, #4]
 800cd50:	f000 ff50 	bl	800dbf4 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800cd54:	6878      	ldr	r0, [r7, #4]
 800cd56:	f000 fa45 	bl	800d1e4 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800cd5a:	7bfb      	ldrb	r3, [r7, #15]
 800cd5c:	2b00      	cmp	r3, #0
 800cd5e:	d004      	beq.n	800cd6a <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800cd60:	687b      	ldr	r3, [r7, #4]
 800cd62:	2202      	movs	r2, #2
 800cd64:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cd68:	e008      	b.n	800cd7c <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800cd6a:	687b      	ldr	r3, [r7, #4]
 800cd6c:	2201      	movs	r2, #1
 800cd6e:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cd72:	e003      	b.n	800cd7c <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800cd74:	6839      	ldr	r1, [r7, #0]
 800cd76:	6878      	ldr	r0, [r7, #4]
 800cd78:	f000 f96b 	bl	800d052 <USBD_CtlError>
  }
}
 800cd7c:	bf00      	nop
 800cd7e:	3710      	adds	r7, #16
 800cd80:	46bd      	mov	sp, r7
 800cd82:	bd80      	pop	{r7, pc}

0800cd84 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cd84:	b580      	push	{r7, lr}
 800cd86:	b082      	sub	sp, #8
 800cd88:	af00      	add	r7, sp, #0
 800cd8a:	6078      	str	r0, [r7, #4]
 800cd8c:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800cd8e:	683b      	ldr	r3, [r7, #0]
 800cd90:	885b      	ldrh	r3, [r3, #2]
 800cd92:	b2da      	uxtb	r2, r3
 800cd94:	4b41      	ldr	r3, [pc, #260]	; (800ce9c <USBD_SetConfig+0x118>)
 800cd96:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800cd98:	4b40      	ldr	r3, [pc, #256]	; (800ce9c <USBD_SetConfig+0x118>)
 800cd9a:	781b      	ldrb	r3, [r3, #0]
 800cd9c:	2b01      	cmp	r3, #1
 800cd9e:	d904      	bls.n	800cdaa <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 800cda0:	6839      	ldr	r1, [r7, #0]
 800cda2:	6878      	ldr	r0, [r7, #4]
 800cda4:	f000 f955 	bl	800d052 <USBD_CtlError>
 800cda8:	e075      	b.n	800ce96 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 800cdaa:	687b      	ldr	r3, [r7, #4]
 800cdac:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800cdb0:	2b02      	cmp	r3, #2
 800cdb2:	d002      	beq.n	800cdba <USBD_SetConfig+0x36>
 800cdb4:	2b03      	cmp	r3, #3
 800cdb6:	d023      	beq.n	800ce00 <USBD_SetConfig+0x7c>
 800cdb8:	e062      	b.n	800ce80 <USBD_SetConfig+0xfc>
    {
    case USBD_STATE_ADDRESSED:
      if (cfgidx)
 800cdba:	4b38      	ldr	r3, [pc, #224]	; (800ce9c <USBD_SetConfig+0x118>)
 800cdbc:	781b      	ldrb	r3, [r3, #0]
 800cdbe:	2b00      	cmp	r3, #0
 800cdc0:	d01a      	beq.n	800cdf8 <USBD_SetConfig+0x74>
      {
        pdev->dev_config = cfgidx;
 800cdc2:	4b36      	ldr	r3, [pc, #216]	; (800ce9c <USBD_SetConfig+0x118>)
 800cdc4:	781b      	ldrb	r3, [r3, #0]
 800cdc6:	461a      	mov	r2, r3
 800cdc8:	687b      	ldr	r3, [r7, #4]
 800cdca:	605a      	str	r2, [r3, #4]
        pdev->dev_state = USBD_STATE_CONFIGURED;
 800cdcc:	687b      	ldr	r3, [r7, #4]
 800cdce:	2203      	movs	r2, #3
 800cdd0:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800cdd4:	4b31      	ldr	r3, [pc, #196]	; (800ce9c <USBD_SetConfig+0x118>)
 800cdd6:	781b      	ldrb	r3, [r3, #0]
 800cdd8:	4619      	mov	r1, r3
 800cdda:	6878      	ldr	r0, [r7, #4]
 800cddc:	f7ff fa2a 	bl	800c234 <USBD_SetClassConfig>
 800cde0:	4603      	mov	r3, r0
 800cde2:	2b02      	cmp	r3, #2
 800cde4:	d104      	bne.n	800cdf0 <USBD_SetConfig+0x6c>
        {
          USBD_CtlError(pdev, req);
 800cde6:	6839      	ldr	r1, [r7, #0]
 800cde8:	6878      	ldr	r0, [r7, #4]
 800cdea:	f000 f932 	bl	800d052 <USBD_CtlError>
          return;
 800cdee:	e052      	b.n	800ce96 <USBD_SetConfig+0x112>
        }
        USBD_CtlSendStatus(pdev);
 800cdf0:	6878      	ldr	r0, [r7, #4]
 800cdf2:	f000 f9f7 	bl	800d1e4 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlSendStatus(pdev);
      }
      break;
 800cdf6:	e04e      	b.n	800ce96 <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 800cdf8:	6878      	ldr	r0, [r7, #4]
 800cdfa:	f000 f9f3 	bl	800d1e4 <USBD_CtlSendStatus>
      break;
 800cdfe:	e04a      	b.n	800ce96 <USBD_SetConfig+0x112>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800ce00:	4b26      	ldr	r3, [pc, #152]	; (800ce9c <USBD_SetConfig+0x118>)
 800ce02:	781b      	ldrb	r3, [r3, #0]
 800ce04:	2b00      	cmp	r3, #0
 800ce06:	d112      	bne.n	800ce2e <USBD_SetConfig+0xaa>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800ce08:	687b      	ldr	r3, [r7, #4]
 800ce0a:	2202      	movs	r2, #2
 800ce0c:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
        pdev->dev_config = cfgidx;
 800ce10:	4b22      	ldr	r3, [pc, #136]	; (800ce9c <USBD_SetConfig+0x118>)
 800ce12:	781b      	ldrb	r3, [r3, #0]
 800ce14:	461a      	mov	r2, r3
 800ce16:	687b      	ldr	r3, [r7, #4]
 800ce18:	605a      	str	r2, [r3, #4]
        USBD_ClrClassConfig(pdev, cfgidx);
 800ce1a:	4b20      	ldr	r3, [pc, #128]	; (800ce9c <USBD_SetConfig+0x118>)
 800ce1c:	781b      	ldrb	r3, [r3, #0]
 800ce1e:	4619      	mov	r1, r3
 800ce20:	6878      	ldr	r0, [r7, #4]
 800ce22:	f7ff fa26 	bl	800c272 <USBD_ClrClassConfig>
        USBD_CtlSendStatus(pdev);
 800ce26:	6878      	ldr	r0, [r7, #4]
 800ce28:	f000 f9dc 	bl	800d1e4 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlSendStatus(pdev);
      }
      break;
 800ce2c:	e033      	b.n	800ce96 <USBD_SetConfig+0x112>
      else if (cfgidx != pdev->dev_config)
 800ce2e:	4b1b      	ldr	r3, [pc, #108]	; (800ce9c <USBD_SetConfig+0x118>)
 800ce30:	781b      	ldrb	r3, [r3, #0]
 800ce32:	461a      	mov	r2, r3
 800ce34:	687b      	ldr	r3, [r7, #4]
 800ce36:	685b      	ldr	r3, [r3, #4]
 800ce38:	429a      	cmp	r2, r3
 800ce3a:	d01d      	beq.n	800ce78 <USBD_SetConfig+0xf4>
        USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800ce3c:	687b      	ldr	r3, [r7, #4]
 800ce3e:	685b      	ldr	r3, [r3, #4]
 800ce40:	b2db      	uxtb	r3, r3
 800ce42:	4619      	mov	r1, r3
 800ce44:	6878      	ldr	r0, [r7, #4]
 800ce46:	f7ff fa14 	bl	800c272 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800ce4a:	4b14      	ldr	r3, [pc, #80]	; (800ce9c <USBD_SetConfig+0x118>)
 800ce4c:	781b      	ldrb	r3, [r3, #0]
 800ce4e:	461a      	mov	r2, r3
 800ce50:	687b      	ldr	r3, [r7, #4]
 800ce52:	605a      	str	r2, [r3, #4]
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800ce54:	4b11      	ldr	r3, [pc, #68]	; (800ce9c <USBD_SetConfig+0x118>)
 800ce56:	781b      	ldrb	r3, [r3, #0]
 800ce58:	4619      	mov	r1, r3
 800ce5a:	6878      	ldr	r0, [r7, #4]
 800ce5c:	f7ff f9ea 	bl	800c234 <USBD_SetClassConfig>
 800ce60:	4603      	mov	r3, r0
 800ce62:	2b02      	cmp	r3, #2
 800ce64:	d104      	bne.n	800ce70 <USBD_SetConfig+0xec>
          USBD_CtlError(pdev, req);
 800ce66:	6839      	ldr	r1, [r7, #0]
 800ce68:	6878      	ldr	r0, [r7, #4]
 800ce6a:	f000 f8f2 	bl	800d052 <USBD_CtlError>
          return;
 800ce6e:	e012      	b.n	800ce96 <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 800ce70:	6878      	ldr	r0, [r7, #4]
 800ce72:	f000 f9b7 	bl	800d1e4 <USBD_CtlSendStatus>
      break;
 800ce76:	e00e      	b.n	800ce96 <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 800ce78:	6878      	ldr	r0, [r7, #4]
 800ce7a:	f000 f9b3 	bl	800d1e4 <USBD_CtlSendStatus>
      break;
 800ce7e:	e00a      	b.n	800ce96 <USBD_SetConfig+0x112>

    default:
      USBD_CtlError(pdev, req);
 800ce80:	6839      	ldr	r1, [r7, #0]
 800ce82:	6878      	ldr	r0, [r7, #4]
 800ce84:	f000 f8e5 	bl	800d052 <USBD_CtlError>
      USBD_ClrClassConfig(pdev, cfgidx);
 800ce88:	4b04      	ldr	r3, [pc, #16]	; (800ce9c <USBD_SetConfig+0x118>)
 800ce8a:	781b      	ldrb	r3, [r3, #0]
 800ce8c:	4619      	mov	r1, r3
 800ce8e:	6878      	ldr	r0, [r7, #4]
 800ce90:	f7ff f9ef 	bl	800c272 <USBD_ClrClassConfig>
      break;
 800ce94:	bf00      	nop
    }
  }
}
 800ce96:	3708      	adds	r7, #8
 800ce98:	46bd      	mov	sp, r7
 800ce9a:	bd80      	pop	{r7, pc}
 800ce9c:	20000984 	.word	0x20000984

0800cea0 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cea0:	b580      	push	{r7, lr}
 800cea2:	b082      	sub	sp, #8
 800cea4:	af00      	add	r7, sp, #0
 800cea6:	6078      	str	r0, [r7, #4]
 800cea8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800ceaa:	683b      	ldr	r3, [r7, #0]
 800ceac:	88db      	ldrh	r3, [r3, #6]
 800ceae:	2b01      	cmp	r3, #1
 800ceb0:	d004      	beq.n	800cebc <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev , req);
 800ceb2:	6839      	ldr	r1, [r7, #0]
 800ceb4:	6878      	ldr	r0, [r7, #4]
 800ceb6:	f000 f8cc 	bl	800d052 <USBD_CtlError>
    default:
      USBD_CtlError(pdev , req);
      break;
    }
  }
}
 800ceba:	e021      	b.n	800cf00 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 800cebc:	687b      	ldr	r3, [r7, #4]
 800cebe:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800cec2:	2b01      	cmp	r3, #1
 800cec4:	db17      	blt.n	800cef6 <USBD_GetConfig+0x56>
 800cec6:	2b02      	cmp	r3, #2
 800cec8:	dd02      	ble.n	800ced0 <USBD_GetConfig+0x30>
 800ceca:	2b03      	cmp	r3, #3
 800cecc:	d00b      	beq.n	800cee6 <USBD_GetConfig+0x46>
 800cece:	e012      	b.n	800cef6 <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 800ced0:	687b      	ldr	r3, [r7, #4]
 800ced2:	2200      	movs	r2, #0
 800ced4:	609a      	str	r2, [r3, #8]
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800ced6:	687b      	ldr	r3, [r7, #4]
 800ced8:	3308      	adds	r3, #8
 800ceda:	2201      	movs	r2, #1
 800cedc:	4619      	mov	r1, r3
 800cede:	6878      	ldr	r0, [r7, #4]
 800cee0:	f000 f922 	bl	800d128 <USBD_CtlSendData>
      break;
 800cee4:	e00c      	b.n	800cf00 <USBD_GetConfig+0x60>
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800cee6:	687b      	ldr	r3, [r7, #4]
 800cee8:	3304      	adds	r3, #4
 800ceea:	2201      	movs	r2, #1
 800ceec:	4619      	mov	r1, r3
 800ceee:	6878      	ldr	r0, [r7, #4]
 800cef0:	f000 f91a 	bl	800d128 <USBD_CtlSendData>
      break;
 800cef4:	e004      	b.n	800cf00 <USBD_GetConfig+0x60>
      USBD_CtlError(pdev , req);
 800cef6:	6839      	ldr	r1, [r7, #0]
 800cef8:	6878      	ldr	r0, [r7, #4]
 800cefa:	f000 f8aa 	bl	800d052 <USBD_CtlError>
      break;
 800cefe:	bf00      	nop
}
 800cf00:	bf00      	nop
 800cf02:	3708      	adds	r7, #8
 800cf04:	46bd      	mov	sp, r7
 800cf06:	bd80      	pop	{r7, pc}

0800cf08 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cf08:	b580      	push	{r7, lr}
 800cf0a:	b082      	sub	sp, #8
 800cf0c:	af00      	add	r7, sp, #0
 800cf0e:	6078      	str	r0, [r7, #4]
 800cf10:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800cf12:	687b      	ldr	r3, [r7, #4]
 800cf14:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800cf18:	3b01      	subs	r3, #1
 800cf1a:	2b02      	cmp	r3, #2
 800cf1c:	d81e      	bhi.n	800cf5c <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if(req->wLength != 0x2U)
 800cf1e:	683b      	ldr	r3, [r7, #0]
 800cf20:	88db      	ldrh	r3, [r3, #6]
 800cf22:	2b02      	cmp	r3, #2
 800cf24:	d004      	beq.n	800cf30 <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 800cf26:	6839      	ldr	r1, [r7, #0]
 800cf28:	6878      	ldr	r0, [r7, #4]
 800cf2a:	f000 f892 	bl	800d052 <USBD_CtlError>
      break;
 800cf2e:	e01a      	b.n	800cf66 <USBD_GetStatus+0x5e>
    }

#if ( USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800cf30:	687b      	ldr	r3, [r7, #4]
 800cf32:	2201      	movs	r2, #1
 800cf34:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup)
 800cf36:	687b      	ldr	r3, [r7, #4]
 800cf38:	f8d3 327c 	ldr.w	r3, [r3, #636]	; 0x27c
 800cf3c:	2b00      	cmp	r3, #0
 800cf3e:	d005      	beq.n	800cf4c <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800cf40:	687b      	ldr	r3, [r7, #4]
 800cf42:	68db      	ldr	r3, [r3, #12]
 800cf44:	f043 0202 	orr.w	r2, r3, #2
 800cf48:	687b      	ldr	r3, [r7, #4]
 800cf4a:	60da      	str	r2, [r3, #12]
    }

    USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800cf4c:	687b      	ldr	r3, [r7, #4]
 800cf4e:	330c      	adds	r3, #12
 800cf50:	2202      	movs	r2, #2
 800cf52:	4619      	mov	r1, r3
 800cf54:	6878      	ldr	r0, [r7, #4]
 800cf56:	f000 f8e7 	bl	800d128 <USBD_CtlSendData>
    break;
 800cf5a:	e004      	b.n	800cf66 <USBD_GetStatus+0x5e>

  default :
    USBD_CtlError(pdev , req);
 800cf5c:	6839      	ldr	r1, [r7, #0]
 800cf5e:	6878      	ldr	r0, [r7, #4]
 800cf60:	f000 f877 	bl	800d052 <USBD_CtlError>
    break;
 800cf64:	bf00      	nop
  }
}
 800cf66:	bf00      	nop
 800cf68:	3708      	adds	r7, #8
 800cf6a:	46bd      	mov	sp, r7
 800cf6c:	bd80      	pop	{r7, pc}

0800cf6e <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 800cf6e:	b580      	push	{r7, lr}
 800cf70:	b082      	sub	sp, #8
 800cf72:	af00      	add	r7, sp, #0
 800cf74:	6078      	str	r0, [r7, #4]
 800cf76:	6039      	str	r1, [r7, #0]

  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800cf78:	683b      	ldr	r3, [r7, #0]
 800cf7a:	885b      	ldrh	r3, [r3, #2]
 800cf7c:	2b01      	cmp	r3, #1
 800cf7e:	d106      	bne.n	800cf8e <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800cf80:	687b      	ldr	r3, [r7, #4]
 800cf82:	2201      	movs	r2, #1
 800cf84:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c
    USBD_CtlSendStatus(pdev);
 800cf88:	6878      	ldr	r0, [r7, #4]
 800cf8a:	f000 f92b 	bl	800d1e4 <USBD_CtlSendStatus>
  }

}
 800cf8e:	bf00      	nop
 800cf90:	3708      	adds	r7, #8
 800cf92:	46bd      	mov	sp, r7
 800cf94:	bd80      	pop	{r7, pc}

0800cf96 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 800cf96:	b580      	push	{r7, lr}
 800cf98:	b082      	sub	sp, #8
 800cf9a:	af00      	add	r7, sp, #0
 800cf9c:	6078      	str	r0, [r7, #4]
 800cf9e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800cfa0:	687b      	ldr	r3, [r7, #4]
 800cfa2:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800cfa6:	3b01      	subs	r3, #1
 800cfa8:	2b02      	cmp	r3, #2
 800cfaa:	d80b      	bhi.n	800cfc4 <USBD_ClrFeature+0x2e>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800cfac:	683b      	ldr	r3, [r7, #0]
 800cfae:	885b      	ldrh	r3, [r3, #2]
 800cfb0:	2b01      	cmp	r3, #1
 800cfb2:	d10c      	bne.n	800cfce <USBD_ClrFeature+0x38>
    {
      pdev->dev_remote_wakeup = 0U;
 800cfb4:	687b      	ldr	r3, [r7, #4]
 800cfb6:	2200      	movs	r2, #0
 800cfb8:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c
      USBD_CtlSendStatus(pdev);
 800cfbc:	6878      	ldr	r0, [r7, #4]
 800cfbe:	f000 f911 	bl	800d1e4 <USBD_CtlSendStatus>
    }
    break;
 800cfc2:	e004      	b.n	800cfce <USBD_ClrFeature+0x38>

  default :
     USBD_CtlError(pdev , req);
 800cfc4:	6839      	ldr	r1, [r7, #0]
 800cfc6:	6878      	ldr	r0, [r7, #4]
 800cfc8:	f000 f843 	bl	800d052 <USBD_CtlError>
    break;
 800cfcc:	e000      	b.n	800cfd0 <USBD_ClrFeature+0x3a>
    break;
 800cfce:	bf00      	nop
  }
}
 800cfd0:	bf00      	nop
 800cfd2:	3708      	adds	r7, #8
 800cfd4:	46bd      	mov	sp, r7
 800cfd6:	bd80      	pop	{r7, pc}

0800cfd8 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800cfd8:	b480      	push	{r7}
 800cfda:	b083      	sub	sp, #12
 800cfdc:	af00      	add	r7, sp, #0
 800cfde:	6078      	str	r0, [r7, #4]
 800cfe0:	6039      	str	r1, [r7, #0]
  req->bmRequest     = *(uint8_t *)  (pdata);
 800cfe2:	683b      	ldr	r3, [r7, #0]
 800cfe4:	781a      	ldrb	r2, [r3, #0]
 800cfe6:	687b      	ldr	r3, [r7, #4]
 800cfe8:	701a      	strb	r2, [r3, #0]
  req->bRequest      = *(uint8_t *)  (pdata +  1);
 800cfea:	683b      	ldr	r3, [r7, #0]
 800cfec:	785a      	ldrb	r2, [r3, #1]
 800cfee:	687b      	ldr	r3, [r7, #4]
 800cff0:	705a      	strb	r2, [r3, #1]
  req->wValue        = SWAPBYTE      (pdata +  2);
 800cff2:	683b      	ldr	r3, [r7, #0]
 800cff4:	3302      	adds	r3, #2
 800cff6:	781b      	ldrb	r3, [r3, #0]
 800cff8:	b29a      	uxth	r2, r3
 800cffa:	683b      	ldr	r3, [r7, #0]
 800cffc:	3303      	adds	r3, #3
 800cffe:	781b      	ldrb	r3, [r3, #0]
 800d000:	b29b      	uxth	r3, r3
 800d002:	021b      	lsls	r3, r3, #8
 800d004:	b29b      	uxth	r3, r3
 800d006:	4413      	add	r3, r2
 800d008:	b29a      	uxth	r2, r3
 800d00a:	687b      	ldr	r3, [r7, #4]
 800d00c:	805a      	strh	r2, [r3, #2]
  req->wIndex        = SWAPBYTE      (pdata +  4);
 800d00e:	683b      	ldr	r3, [r7, #0]
 800d010:	3304      	adds	r3, #4
 800d012:	781b      	ldrb	r3, [r3, #0]
 800d014:	b29a      	uxth	r2, r3
 800d016:	683b      	ldr	r3, [r7, #0]
 800d018:	3305      	adds	r3, #5
 800d01a:	781b      	ldrb	r3, [r3, #0]
 800d01c:	b29b      	uxth	r3, r3
 800d01e:	021b      	lsls	r3, r3, #8
 800d020:	b29b      	uxth	r3, r3
 800d022:	4413      	add	r3, r2
 800d024:	b29a      	uxth	r2, r3
 800d026:	687b      	ldr	r3, [r7, #4]
 800d028:	809a      	strh	r2, [r3, #4]
  req->wLength       = SWAPBYTE      (pdata +  6);
 800d02a:	683b      	ldr	r3, [r7, #0]
 800d02c:	3306      	adds	r3, #6
 800d02e:	781b      	ldrb	r3, [r3, #0]
 800d030:	b29a      	uxth	r2, r3
 800d032:	683b      	ldr	r3, [r7, #0]
 800d034:	3307      	adds	r3, #7
 800d036:	781b      	ldrb	r3, [r3, #0]
 800d038:	b29b      	uxth	r3, r3
 800d03a:	021b      	lsls	r3, r3, #8
 800d03c:	b29b      	uxth	r3, r3
 800d03e:	4413      	add	r3, r2
 800d040:	b29a      	uxth	r2, r3
 800d042:	687b      	ldr	r3, [r7, #4]
 800d044:	80da      	strh	r2, [r3, #6]

}
 800d046:	bf00      	nop
 800d048:	370c      	adds	r7, #12
 800d04a:	46bd      	mov	sp, r7
 800d04c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d050:	4770      	bx	lr

0800d052 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError( USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 800d052:	b580      	push	{r7, lr}
 800d054:	b082      	sub	sp, #8
 800d056:	af00      	add	r7, sp, #0
 800d058:	6078      	str	r0, [r7, #4]
 800d05a:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev , 0x80U);
 800d05c:	2180      	movs	r1, #128	; 0x80
 800d05e:	6878      	ldr	r0, [r7, #4]
 800d060:	f000 fd5e 	bl	800db20 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0U);
 800d064:	2100      	movs	r1, #0
 800d066:	6878      	ldr	r0, [r7, #4]
 800d068:	f000 fd5a 	bl	800db20 <USBD_LL_StallEP>
}
 800d06c:	bf00      	nop
 800d06e:	3708      	adds	r7, #8
 800d070:	46bd      	mov	sp, r7
 800d072:	bd80      	pop	{r7, pc}

0800d074 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800d074:	b580      	push	{r7, lr}
 800d076:	b086      	sub	sp, #24
 800d078:	af00      	add	r7, sp, #0
 800d07a:	60f8      	str	r0, [r7, #12]
 800d07c:	60b9      	str	r1, [r7, #8]
 800d07e:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800d080:	2300      	movs	r3, #0
 800d082:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 800d084:	68fb      	ldr	r3, [r7, #12]
 800d086:	2b00      	cmp	r3, #0
 800d088:	d032      	beq.n	800d0f0 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800d08a:	68f8      	ldr	r0, [r7, #12]
 800d08c:	f000 f834 	bl	800d0f8 <USBD_GetLen>
 800d090:	4603      	mov	r3, r0
 800d092:	3301      	adds	r3, #1
 800d094:	b29b      	uxth	r3, r3
 800d096:	005b      	lsls	r3, r3, #1
 800d098:	b29a      	uxth	r2, r3
 800d09a:	687b      	ldr	r3, [r7, #4]
 800d09c:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800d09e:	7dfb      	ldrb	r3, [r7, #23]
 800d0a0:	1c5a      	adds	r2, r3, #1
 800d0a2:	75fa      	strb	r2, [r7, #23]
 800d0a4:	461a      	mov	r2, r3
 800d0a6:	68bb      	ldr	r3, [r7, #8]
 800d0a8:	4413      	add	r3, r2
 800d0aa:	687a      	ldr	r2, [r7, #4]
 800d0ac:	7812      	ldrb	r2, [r2, #0]
 800d0ae:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800d0b0:	7dfb      	ldrb	r3, [r7, #23]
 800d0b2:	1c5a      	adds	r2, r3, #1
 800d0b4:	75fa      	strb	r2, [r7, #23]
 800d0b6:	461a      	mov	r2, r3
 800d0b8:	68bb      	ldr	r3, [r7, #8]
 800d0ba:	4413      	add	r3, r2
 800d0bc:	2203      	movs	r2, #3
 800d0be:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800d0c0:	e012      	b.n	800d0e8 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 800d0c2:	68fb      	ldr	r3, [r7, #12]
 800d0c4:	1c5a      	adds	r2, r3, #1
 800d0c6:	60fa      	str	r2, [r7, #12]
 800d0c8:	7dfa      	ldrb	r2, [r7, #23]
 800d0ca:	1c51      	adds	r1, r2, #1
 800d0cc:	75f9      	strb	r1, [r7, #23]
 800d0ce:	4611      	mov	r1, r2
 800d0d0:	68ba      	ldr	r2, [r7, #8]
 800d0d2:	440a      	add	r2, r1
 800d0d4:	781b      	ldrb	r3, [r3, #0]
 800d0d6:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800d0d8:	7dfb      	ldrb	r3, [r7, #23]
 800d0da:	1c5a      	adds	r2, r3, #1
 800d0dc:	75fa      	strb	r2, [r7, #23]
 800d0de:	461a      	mov	r2, r3
 800d0e0:	68bb      	ldr	r3, [r7, #8]
 800d0e2:	4413      	add	r3, r2
 800d0e4:	2200      	movs	r2, #0
 800d0e6:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800d0e8:	68fb      	ldr	r3, [r7, #12]
 800d0ea:	781b      	ldrb	r3, [r3, #0]
 800d0ec:	2b00      	cmp	r3, #0
 800d0ee:	d1e8      	bne.n	800d0c2 <USBD_GetString+0x4e>
    }
  }
}
 800d0f0:	bf00      	nop
 800d0f2:	3718      	adds	r7, #24
 800d0f4:	46bd      	mov	sp, r7
 800d0f6:	bd80      	pop	{r7, pc}

0800d0f8 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800d0f8:	b480      	push	{r7}
 800d0fa:	b085      	sub	sp, #20
 800d0fc:	af00      	add	r7, sp, #0
 800d0fe:	6078      	str	r0, [r7, #4]
    uint8_t  len = 0U;
 800d100:	2300      	movs	r3, #0
 800d102:	73fb      	strb	r3, [r7, #15]

    while (*buf != '\0')
 800d104:	e005      	b.n	800d112 <USBD_GetLen+0x1a>
    {
        len++;
 800d106:	7bfb      	ldrb	r3, [r7, #15]
 800d108:	3301      	adds	r3, #1
 800d10a:	73fb      	strb	r3, [r7, #15]
        buf++;
 800d10c:	687b      	ldr	r3, [r7, #4]
 800d10e:	3301      	adds	r3, #1
 800d110:	607b      	str	r3, [r7, #4]
    while (*buf != '\0')
 800d112:	687b      	ldr	r3, [r7, #4]
 800d114:	781b      	ldrb	r3, [r3, #0]
 800d116:	2b00      	cmp	r3, #0
 800d118:	d1f5      	bne.n	800d106 <USBD_GetLen+0xe>
    }

    return len;
 800d11a:	7bfb      	ldrb	r3, [r7, #15]
}
 800d11c:	4618      	mov	r0, r3
 800d11e:	3714      	adds	r7, #20
 800d120:	46bd      	mov	sp, r7
 800d122:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d126:	4770      	bx	lr

0800d128 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                     uint16_t len)
{
 800d128:	b580      	push	{r7, lr}
 800d12a:	b084      	sub	sp, #16
 800d12c:	af00      	add	r7, sp, #0
 800d12e:	60f8      	str	r0, [r7, #12]
 800d130:	60b9      	str	r1, [r7, #8]
 800d132:	4613      	mov	r3, r2
 800d134:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800d136:	68fb      	ldr	r3, [r7, #12]
 800d138:	2202      	movs	r2, #2
 800d13a:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->ep_in[0].total_length = len;
 800d13e:	88fa      	ldrh	r2, [r7, #6]
 800d140:	68fb      	ldr	r3, [r7, #12]
 800d142:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800d144:	88fa      	ldrh	r2, [r7, #6]
 800d146:	68fb      	ldr	r3, [r7, #12]
 800d148:	621a      	str	r2, [r3, #32]

 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 800d14a:	88fb      	ldrh	r3, [r7, #6]
 800d14c:	68ba      	ldr	r2, [r7, #8]
 800d14e:	2100      	movs	r1, #0
 800d150:	68f8      	ldr	r0, [r7, #12]
 800d152:	f000 fd6e 	bl	800dc32 <USBD_LL_Transmit>

  return USBD_OK;
 800d156:	2300      	movs	r3, #0
}
 800d158:	4618      	mov	r0, r3
 800d15a:	3710      	adds	r7, #16
 800d15c:	46bd      	mov	sp, r7
 800d15e:	bd80      	pop	{r7, pc}

0800d160 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData (USBD_HandleTypeDef *pdev,
                                             uint8_t *pbuf, uint16_t len)
{
 800d160:	b580      	push	{r7, lr}
 800d162:	b084      	sub	sp, #16
 800d164:	af00      	add	r7, sp, #0
 800d166:	60f8      	str	r0, [r7, #12]
 800d168:	60b9      	str	r1, [r7, #8]
 800d16a:	4613      	mov	r3, r2
 800d16c:	80fb      	strh	r3, [r7, #6]
 /* Start the next transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 800d16e:	88fb      	ldrh	r3, [r7, #6]
 800d170:	68ba      	ldr	r2, [r7, #8]
 800d172:	2100      	movs	r1, #0
 800d174:	68f8      	ldr	r0, [r7, #12]
 800d176:	f000 fd5c 	bl	800dc32 <USBD_LL_Transmit>

  return USBD_OK;
 800d17a:	2300      	movs	r3, #0
}
 800d17c:	4618      	mov	r0, r3
 800d17e:	3710      	adds	r7, #16
 800d180:	46bd      	mov	sp, r7
 800d182:	bd80      	pop	{r7, pc}

0800d184 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                      uint16_t len)
{
 800d184:	b580      	push	{r7, lr}
 800d186:	b084      	sub	sp, #16
 800d188:	af00      	add	r7, sp, #0
 800d18a:	60f8      	str	r0, [r7, #12]
 800d18c:	60b9      	str	r1, [r7, #8]
 800d18e:	4613      	mov	r3, r2
 800d190:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800d192:	68fb      	ldr	r3, [r7, #12]
 800d194:	2203      	movs	r2, #3
 800d196:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->ep_out[0].total_length = len;
 800d19a:	88fa      	ldrh	r2, [r7, #6]
 800d19c:	68fb      	ldr	r3, [r7, #12]
 800d19e:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
  pdev->ep_out[0].rem_length   = len;
 800d1a2:	88fa      	ldrh	r2, [r7, #6]
 800d1a4:	68fb      	ldr	r3, [r7, #12]
 800d1a6:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c

  /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, pbuf, len);
 800d1aa:	88fb      	ldrh	r3, [r7, #6]
 800d1ac:	68ba      	ldr	r2, [r7, #8]
 800d1ae:	2100      	movs	r1, #0
 800d1b0:	68f8      	ldr	r0, [r7, #12]
 800d1b2:	f000 fd61 	bl	800dc78 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800d1b6:	2300      	movs	r3, #0
}
 800d1b8:	4618      	mov	r0, r3
 800d1ba:	3710      	adds	r7, #16
 800d1bc:	46bd      	mov	sp, r7
 800d1be:	bd80      	pop	{r7, pc}

0800d1c0 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                       uint16_t len)
{
 800d1c0:	b580      	push	{r7, lr}
 800d1c2:	b084      	sub	sp, #16
 800d1c4:	af00      	add	r7, sp, #0
 800d1c6:	60f8      	str	r0, [r7, #12]
 800d1c8:	60b9      	str	r1, [r7, #8]
 800d1ca:	4613      	mov	r3, r2
 800d1cc:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800d1ce:	88fb      	ldrh	r3, [r7, #6]
 800d1d0:	68ba      	ldr	r2, [r7, #8]
 800d1d2:	2100      	movs	r1, #0
 800d1d4:	68f8      	ldr	r0, [r7, #12]
 800d1d6:	f000 fd4f 	bl	800dc78 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800d1da:	2300      	movs	r3, #0
}
 800d1dc:	4618      	mov	r0, r3
 800d1de:	3710      	adds	r7, #16
 800d1e0:	46bd      	mov	sp, r7
 800d1e2:	bd80      	pop	{r7, pc}

0800d1e4 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus (USBD_HandleTypeDef *pdev)
{
 800d1e4:	b580      	push	{r7, lr}
 800d1e6:	b082      	sub	sp, #8
 800d1e8:	af00      	add	r7, sp, #0
 800d1ea:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800d1ec:	687b      	ldr	r3, [r7, #4]
 800d1ee:	2204      	movs	r2, #4
 800d1f0:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800d1f4:	2300      	movs	r3, #0
 800d1f6:	2200      	movs	r2, #0
 800d1f8:	2100      	movs	r1, #0
 800d1fa:	6878      	ldr	r0, [r7, #4]
 800d1fc:	f000 fd19 	bl	800dc32 <USBD_LL_Transmit>

  return USBD_OK;
 800d200:	2300      	movs	r3, #0
}
 800d202:	4618      	mov	r0, r3
 800d204:	3708      	adds	r7, #8
 800d206:	46bd      	mov	sp, r7
 800d208:	bd80      	pop	{r7, pc}

0800d20a <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus (USBD_HandleTypeDef *pdev)
{
 800d20a:	b580      	push	{r7, lr}
 800d20c:	b082      	sub	sp, #8
 800d20e:	af00      	add	r7, sp, #0
 800d210:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800d212:	687b      	ldr	r3, [r7, #4]
 800d214:	2205      	movs	r2, #5
 800d216:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

 /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 800d21a:	2300      	movs	r3, #0
 800d21c:	2200      	movs	r2, #0
 800d21e:	2100      	movs	r1, #0
 800d220:	6878      	ldr	r0, [r7, #4]
 800d222:	f000 fd29 	bl	800dc78 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800d226:	2300      	movs	r3, #0
}
 800d228:	4618      	mov	r0, r3
 800d22a:	3708      	adds	r7, #8
 800d22c:	46bd      	mov	sp, r7
 800d22e:	bd80      	pop	{r7, pc}

0800d230 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800d230:	b480      	push	{r7}
 800d232:	b087      	sub	sp, #28
 800d234:	af00      	add	r7, sp, #0
 800d236:	60f8      	str	r0, [r7, #12]
 800d238:	60b9      	str	r1, [r7, #8]
 800d23a:	4613      	mov	r3, r2
 800d23c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800d23e:	2301      	movs	r3, #1
 800d240:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800d242:	2300      	movs	r3, #0
 800d244:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800d246:	4b1f      	ldr	r3, [pc, #124]	; (800d2c4 <FATFS_LinkDriverEx+0x94>)
 800d248:	7a5b      	ldrb	r3, [r3, #9]
 800d24a:	b2db      	uxtb	r3, r3
 800d24c:	2b00      	cmp	r3, #0
 800d24e:	d131      	bne.n	800d2b4 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800d250:	4b1c      	ldr	r3, [pc, #112]	; (800d2c4 <FATFS_LinkDriverEx+0x94>)
 800d252:	7a5b      	ldrb	r3, [r3, #9]
 800d254:	b2db      	uxtb	r3, r3
 800d256:	461a      	mov	r2, r3
 800d258:	4b1a      	ldr	r3, [pc, #104]	; (800d2c4 <FATFS_LinkDriverEx+0x94>)
 800d25a:	2100      	movs	r1, #0
 800d25c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800d25e:	4b19      	ldr	r3, [pc, #100]	; (800d2c4 <FATFS_LinkDriverEx+0x94>)
 800d260:	7a5b      	ldrb	r3, [r3, #9]
 800d262:	b2db      	uxtb	r3, r3
 800d264:	4a17      	ldr	r2, [pc, #92]	; (800d2c4 <FATFS_LinkDriverEx+0x94>)
 800d266:	009b      	lsls	r3, r3, #2
 800d268:	4413      	add	r3, r2
 800d26a:	68fa      	ldr	r2, [r7, #12]
 800d26c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800d26e:	4b15      	ldr	r3, [pc, #84]	; (800d2c4 <FATFS_LinkDriverEx+0x94>)
 800d270:	7a5b      	ldrb	r3, [r3, #9]
 800d272:	b2db      	uxtb	r3, r3
 800d274:	461a      	mov	r2, r3
 800d276:	4b13      	ldr	r3, [pc, #76]	; (800d2c4 <FATFS_LinkDriverEx+0x94>)
 800d278:	4413      	add	r3, r2
 800d27a:	79fa      	ldrb	r2, [r7, #7]
 800d27c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800d27e:	4b11      	ldr	r3, [pc, #68]	; (800d2c4 <FATFS_LinkDriverEx+0x94>)
 800d280:	7a5b      	ldrb	r3, [r3, #9]
 800d282:	b2db      	uxtb	r3, r3
 800d284:	1c5a      	adds	r2, r3, #1
 800d286:	b2d1      	uxtb	r1, r2
 800d288:	4a0e      	ldr	r2, [pc, #56]	; (800d2c4 <FATFS_LinkDriverEx+0x94>)
 800d28a:	7251      	strb	r1, [r2, #9]
 800d28c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800d28e:	7dbb      	ldrb	r3, [r7, #22]
 800d290:	3330      	adds	r3, #48	; 0x30
 800d292:	b2da      	uxtb	r2, r3
 800d294:	68bb      	ldr	r3, [r7, #8]
 800d296:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800d298:	68bb      	ldr	r3, [r7, #8]
 800d29a:	3301      	adds	r3, #1
 800d29c:	223a      	movs	r2, #58	; 0x3a
 800d29e:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800d2a0:	68bb      	ldr	r3, [r7, #8]
 800d2a2:	3302      	adds	r3, #2
 800d2a4:	222f      	movs	r2, #47	; 0x2f
 800d2a6:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800d2a8:	68bb      	ldr	r3, [r7, #8]
 800d2aa:	3303      	adds	r3, #3
 800d2ac:	2200      	movs	r2, #0
 800d2ae:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800d2b0:	2300      	movs	r3, #0
 800d2b2:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800d2b4:	7dfb      	ldrb	r3, [r7, #23]
}
 800d2b6:	4618      	mov	r0, r3
 800d2b8:	371c      	adds	r7, #28
 800d2ba:	46bd      	mov	sp, r7
 800d2bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2c0:	4770      	bx	lr
 800d2c2:	bf00      	nop
 800d2c4:	20000988 	.word	0x20000988

0800d2c8 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800d2c8:	b580      	push	{r7, lr}
 800d2ca:	b082      	sub	sp, #8
 800d2cc:	af00      	add	r7, sp, #0
 800d2ce:	6078      	str	r0, [r7, #4]
 800d2d0:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800d2d2:	2200      	movs	r2, #0
 800d2d4:	6839      	ldr	r1, [r7, #0]
 800d2d6:	6878      	ldr	r0, [r7, #4]
 800d2d8:	f7ff ffaa 	bl	800d230 <FATFS_LinkDriverEx>
 800d2dc:	4603      	mov	r3, r0
}
 800d2de:	4618      	mov	r0, r3
 800d2e0:	3708      	adds	r7, #8
 800d2e2:	46bd      	mov	sp, r7
 800d2e4:	bd80      	pop	{r7, pc}
	...

0800d2e8 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800d2e8:	b580      	push	{r7, lr}
 800d2ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800d2ec:	2200      	movs	r2, #0
 800d2ee:	4912      	ldr	r1, [pc, #72]	; (800d338 <MX_USB_DEVICE_Init+0x50>)
 800d2f0:	4812      	ldr	r0, [pc, #72]	; (800d33c <MX_USB_DEVICE_Init+0x54>)
 800d2f2:	f7fe ff43 	bl	800c17c <USBD_Init>
 800d2f6:	4603      	mov	r3, r0
 800d2f8:	2b00      	cmp	r3, #0
 800d2fa:	d001      	beq.n	800d300 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800d2fc:	f7f5 fa82 	bl	8002804 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800d300:	490f      	ldr	r1, [pc, #60]	; (800d340 <MX_USB_DEVICE_Init+0x58>)
 800d302:	480e      	ldr	r0, [pc, #56]	; (800d33c <MX_USB_DEVICE_Init+0x54>)
 800d304:	f7fe ff65 	bl	800c1d2 <USBD_RegisterClass>
 800d308:	4603      	mov	r3, r0
 800d30a:	2b00      	cmp	r3, #0
 800d30c:	d001      	beq.n	800d312 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800d30e:	f7f5 fa79 	bl	8002804 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800d312:	490c      	ldr	r1, [pc, #48]	; (800d344 <MX_USB_DEVICE_Init+0x5c>)
 800d314:	4809      	ldr	r0, [pc, #36]	; (800d33c <MX_USB_DEVICE_Init+0x54>)
 800d316:	f7fe fe93 	bl	800c040 <USBD_CDC_RegisterInterface>
 800d31a:	4603      	mov	r3, r0
 800d31c:	2b00      	cmp	r3, #0
 800d31e:	d001      	beq.n	800d324 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800d320:	f7f5 fa70 	bl	8002804 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800d324:	4805      	ldr	r0, [pc, #20]	; (800d33c <MX_USB_DEVICE_Init+0x54>)
 800d326:	f7fe ff6e 	bl	800c206 <USBD_Start>
 800d32a:	4603      	mov	r3, r0
 800d32c:	2b00      	cmp	r3, #0
 800d32e:	d001      	beq.n	800d334 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800d330:	f7f5 fa68 	bl	8002804 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800d334:	bf00      	nop
 800d336:	bd80      	pop	{r7, pc}
 800d338:	20000134 	.word	0x20000134
 800d33c:	200013c8 	.word	0x200013c8
 800d340:	20000020 	.word	0x20000020
 800d344:	20000124 	.word	0x20000124

0800d348 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800d348:	b580      	push	{r7, lr}
 800d34a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800d34c:	2200      	movs	r2, #0
 800d34e:	4905      	ldr	r1, [pc, #20]	; (800d364 <CDC_Init_FS+0x1c>)
 800d350:	4805      	ldr	r0, [pc, #20]	; (800d368 <CDC_Init_FS+0x20>)
 800d352:	f7fe fe8c 	bl	800c06e <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800d356:	4905      	ldr	r1, [pc, #20]	; (800d36c <CDC_Init_FS+0x24>)
 800d358:	4803      	ldr	r0, [pc, #12]	; (800d368 <CDC_Init_FS+0x20>)
 800d35a:	f7fe fea2 	bl	800c0a2 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800d35e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800d360:	4618      	mov	r0, r3
 800d362:	bd80      	pop	{r7, pc}
 800d364:	20001e64 	.word	0x20001e64
 800d368:	200013c8 	.word	0x200013c8
 800d36c:	20001664 	.word	0x20001664

0800d370 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800d370:	b480      	push	{r7}
 800d372:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800d374:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800d376:	4618      	mov	r0, r3
 800d378:	46bd      	mov	sp, r7
 800d37a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d37e:	4770      	bx	lr

0800d380 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800d380:	b480      	push	{r7}
 800d382:	b085      	sub	sp, #20
 800d384:	af00      	add	r7, sp, #0
 800d386:	4603      	mov	r3, r0
 800d388:	6039      	str	r1, [r7, #0]
 800d38a:	71fb      	strb	r3, [r7, #7]
 800d38c:	4613      	mov	r3, r2
 800d38e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  uint8_t tempbuf[7] = {0,0,0,0,0,0,0};
 800d390:	f107 0308 	add.w	r3, r7, #8
 800d394:	2200      	movs	r2, #0
 800d396:	601a      	str	r2, [r3, #0]
 800d398:	f8c3 2003 	str.w	r2, [r3, #3]
  switch(cmd)
 800d39c:	79fb      	ldrb	r3, [r7, #7]
 800d39e:	2b23      	cmp	r3, #35	; 0x23
 800d3a0:	d87c      	bhi.n	800d49c <CDC_Control_FS+0x11c>
 800d3a2:	a201      	add	r2, pc, #4	; (adr r2, 800d3a8 <CDC_Control_FS+0x28>)
 800d3a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d3a8:	0800d49d 	.word	0x0800d49d
 800d3ac:	0800d49d 	.word	0x0800d49d
 800d3b0:	0800d49d 	.word	0x0800d49d
 800d3b4:	0800d49d 	.word	0x0800d49d
 800d3b8:	0800d49d 	.word	0x0800d49d
 800d3bc:	0800d49d 	.word	0x0800d49d
 800d3c0:	0800d49d 	.word	0x0800d49d
 800d3c4:	0800d49d 	.word	0x0800d49d
 800d3c8:	0800d49d 	.word	0x0800d49d
 800d3cc:	0800d49d 	.word	0x0800d49d
 800d3d0:	0800d49d 	.word	0x0800d49d
 800d3d4:	0800d49d 	.word	0x0800d49d
 800d3d8:	0800d49d 	.word	0x0800d49d
 800d3dc:	0800d49d 	.word	0x0800d49d
 800d3e0:	0800d49d 	.word	0x0800d49d
 800d3e4:	0800d49d 	.word	0x0800d49d
 800d3e8:	0800d49d 	.word	0x0800d49d
 800d3ec:	0800d49d 	.word	0x0800d49d
 800d3f0:	0800d49d 	.word	0x0800d49d
 800d3f4:	0800d49d 	.word	0x0800d49d
 800d3f8:	0800d49d 	.word	0x0800d49d
 800d3fc:	0800d49d 	.word	0x0800d49d
 800d400:	0800d49d 	.word	0x0800d49d
 800d404:	0800d49d 	.word	0x0800d49d
 800d408:	0800d49d 	.word	0x0800d49d
 800d40c:	0800d49d 	.word	0x0800d49d
 800d410:	0800d49d 	.word	0x0800d49d
 800d414:	0800d49d 	.word	0x0800d49d
 800d418:	0800d49d 	.word	0x0800d49d
 800d41c:	0800d49d 	.word	0x0800d49d
 800d420:	0800d49d 	.word	0x0800d49d
 800d424:	0800d49d 	.word	0x0800d49d
 800d428:	0800d439 	.word	0x0800d439
 800d42c:	0800d465 	.word	0x0800d465
 800d430:	0800d49d 	.word	0x0800d49d
 800d434:	0800d49d 	.word	0x0800d49d
  /*                                        3 - Mark                             */
  /*                                        4 - Space                            */
  /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
  /*******************************************************************************/
    case CDC_SET_LINE_CODING:
      	tempbuf[0] = pbuf[0];
 800d438:	683b      	ldr	r3, [r7, #0]
 800d43a:	781b      	ldrb	r3, [r3, #0]
 800d43c:	723b      	strb	r3, [r7, #8]
      	tempbuf[1] = pbuf[1];
 800d43e:	683b      	ldr	r3, [r7, #0]
 800d440:	785b      	ldrb	r3, [r3, #1]
 800d442:	727b      	strb	r3, [r7, #9]
      	tempbuf[2] = pbuf[2];
 800d444:	683b      	ldr	r3, [r7, #0]
 800d446:	789b      	ldrb	r3, [r3, #2]
 800d448:	72bb      	strb	r3, [r7, #10]
      	tempbuf[3] = pbuf[3];
 800d44a:	683b      	ldr	r3, [r7, #0]
 800d44c:	78db      	ldrb	r3, [r3, #3]
 800d44e:	72fb      	strb	r3, [r7, #11]
      	tempbuf[4] = pbuf[4];
 800d450:	683b      	ldr	r3, [r7, #0]
 800d452:	791b      	ldrb	r3, [r3, #4]
 800d454:	733b      	strb	r3, [r7, #12]
      	tempbuf[5] = pbuf[5];
 800d456:	683b      	ldr	r3, [r7, #0]
 800d458:	795b      	ldrb	r3, [r3, #5]
 800d45a:	737b      	strb	r3, [r7, #13]
      	tempbuf[6] = pbuf[6];
 800d45c:	683b      	ldr	r3, [r7, #0]
 800d45e:	799b      	ldrb	r3, [r3, #6]
 800d460:	73bb      	strb	r3, [r7, #14]
      	break;
 800d462:	e01c      	b.n	800d49e <CDC_Control_FS+0x11e>

    case CDC_GET_LINE_CODING:
      	pbuf[0] = tempbuf[0];
 800d464:	7a3a      	ldrb	r2, [r7, #8]
 800d466:	683b      	ldr	r3, [r7, #0]
 800d468:	701a      	strb	r2, [r3, #0]
      	pbuf[1] = tempbuf[1];
 800d46a:	683b      	ldr	r3, [r7, #0]
 800d46c:	3301      	adds	r3, #1
 800d46e:	7a7a      	ldrb	r2, [r7, #9]
 800d470:	701a      	strb	r2, [r3, #0]
      	pbuf[2] = tempbuf[2];
 800d472:	683b      	ldr	r3, [r7, #0]
 800d474:	3302      	adds	r3, #2
 800d476:	7aba      	ldrb	r2, [r7, #10]
 800d478:	701a      	strb	r2, [r3, #0]
      	pbuf[3] = tempbuf[3];
 800d47a:	683b      	ldr	r3, [r7, #0]
 800d47c:	3303      	adds	r3, #3
 800d47e:	7afa      	ldrb	r2, [r7, #11]
 800d480:	701a      	strb	r2, [r3, #0]
      	pbuf[4] = tempbuf[4];
 800d482:	683b      	ldr	r3, [r7, #0]
 800d484:	3304      	adds	r3, #4
 800d486:	7b3a      	ldrb	r2, [r7, #12]
 800d488:	701a      	strb	r2, [r3, #0]
      	pbuf[5] = tempbuf[5];
 800d48a:	683b      	ldr	r3, [r7, #0]
 800d48c:	3305      	adds	r3, #5
 800d48e:	7b7a      	ldrb	r2, [r7, #13]
 800d490:	701a      	strb	r2, [r3, #0]
      	pbuf[6] = tempbuf[6];
 800d492:	683b      	ldr	r3, [r7, #0]
 800d494:	3306      	adds	r3, #6
 800d496:	7bba      	ldrb	r2, [r7, #14]
 800d498:	701a      	strb	r2, [r3, #0]
      	break;
 800d49a:	e000      	b.n	800d49e <CDC_Control_FS+0x11e>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800d49c:	bf00      	nop
  }

  return (USBD_OK);
 800d49e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800d4a0:	4618      	mov	r0, r3
 800d4a2:	3714      	adds	r7, #20
 800d4a4:	46bd      	mov	sp, r7
 800d4a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4aa:	4770      	bx	lr

0800d4ac <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800d4ac:	b580      	push	{r7, lr}
 800d4ae:	b082      	sub	sp, #8
 800d4b0:	af00      	add	r7, sp, #0
 800d4b2:	6078      	str	r0, [r7, #4]
 800d4b4:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800d4b6:	6879      	ldr	r1, [r7, #4]
 800d4b8:	4805      	ldr	r0, [pc, #20]	; (800d4d0 <CDC_Receive_FS+0x24>)
 800d4ba:	f7fe fdf2 	bl	800c0a2 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800d4be:	4804      	ldr	r0, [pc, #16]	; (800d4d0 <CDC_Receive_FS+0x24>)
 800d4c0:	f7fe fe32 	bl	800c128 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800d4c4:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800d4c6:	4618      	mov	r0, r3
 800d4c8:	3708      	adds	r7, #8
 800d4ca:	46bd      	mov	sp, r7
 800d4cc:	bd80      	pop	{r7, pc}
 800d4ce:	bf00      	nop
 800d4d0:	200013c8 	.word	0x200013c8

0800d4d4 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800d4d4:	b580      	push	{r7, lr}
 800d4d6:	b084      	sub	sp, #16
 800d4d8:	af00      	add	r7, sp, #0
 800d4da:	6078      	str	r0, [r7, #4]
 800d4dc:	460b      	mov	r3, r1
 800d4de:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800d4e0:	2300      	movs	r3, #0
 800d4e2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800d4e4:	4b0d      	ldr	r3, [pc, #52]	; (800d51c <CDC_Transmit_FS+0x48>)
 800d4e6:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800d4ea:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800d4ec:	68bb      	ldr	r3, [r7, #8]
 800d4ee:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800d4f2:	2b00      	cmp	r3, #0
 800d4f4:	d001      	beq.n	800d4fa <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800d4f6:	2301      	movs	r3, #1
 800d4f8:	e00b      	b.n	800d512 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800d4fa:	887b      	ldrh	r3, [r7, #2]
 800d4fc:	461a      	mov	r2, r3
 800d4fe:	6879      	ldr	r1, [r7, #4]
 800d500:	4806      	ldr	r0, [pc, #24]	; (800d51c <CDC_Transmit_FS+0x48>)
 800d502:	f7fe fdb4 	bl	800c06e <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800d506:	4805      	ldr	r0, [pc, #20]	; (800d51c <CDC_Transmit_FS+0x48>)
 800d508:	f7fe fddf 	bl	800c0ca <USBD_CDC_TransmitPacket>
 800d50c:	4603      	mov	r3, r0
 800d50e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800d510:	7bfb      	ldrb	r3, [r7, #15]
}
 800d512:	4618      	mov	r0, r3
 800d514:	3710      	adds	r7, #16
 800d516:	46bd      	mov	sp, r7
 800d518:	bd80      	pop	{r7, pc}
 800d51a:	bf00      	nop
 800d51c:	200013c8 	.word	0x200013c8

0800d520 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d520:	b480      	push	{r7}
 800d522:	b083      	sub	sp, #12
 800d524:	af00      	add	r7, sp, #0
 800d526:	4603      	mov	r3, r0
 800d528:	6039      	str	r1, [r7, #0]
 800d52a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800d52c:	683b      	ldr	r3, [r7, #0]
 800d52e:	2212      	movs	r2, #18
 800d530:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800d532:	4b03      	ldr	r3, [pc, #12]	; (800d540 <USBD_FS_DeviceDescriptor+0x20>)
}
 800d534:	4618      	mov	r0, r3
 800d536:	370c      	adds	r7, #12
 800d538:	46bd      	mov	sp, r7
 800d53a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d53e:	4770      	bx	lr
 800d540:	20000150 	.word	0x20000150

0800d544 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d544:	b480      	push	{r7}
 800d546:	b083      	sub	sp, #12
 800d548:	af00      	add	r7, sp, #0
 800d54a:	4603      	mov	r3, r0
 800d54c:	6039      	str	r1, [r7, #0]
 800d54e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800d550:	683b      	ldr	r3, [r7, #0]
 800d552:	2204      	movs	r2, #4
 800d554:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800d556:	4b03      	ldr	r3, [pc, #12]	; (800d564 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800d558:	4618      	mov	r0, r3
 800d55a:	370c      	adds	r7, #12
 800d55c:	46bd      	mov	sp, r7
 800d55e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d562:	4770      	bx	lr
 800d564:	20000164 	.word	0x20000164

0800d568 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d568:	b580      	push	{r7, lr}
 800d56a:	b082      	sub	sp, #8
 800d56c:	af00      	add	r7, sp, #0
 800d56e:	4603      	mov	r3, r0
 800d570:	6039      	str	r1, [r7, #0]
 800d572:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800d574:	79fb      	ldrb	r3, [r7, #7]
 800d576:	2b00      	cmp	r3, #0
 800d578:	d105      	bne.n	800d586 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800d57a:	683a      	ldr	r2, [r7, #0]
 800d57c:	4907      	ldr	r1, [pc, #28]	; (800d59c <USBD_FS_ProductStrDescriptor+0x34>)
 800d57e:	4808      	ldr	r0, [pc, #32]	; (800d5a0 <USBD_FS_ProductStrDescriptor+0x38>)
 800d580:	f7ff fd78 	bl	800d074 <USBD_GetString>
 800d584:	e004      	b.n	800d590 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800d586:	683a      	ldr	r2, [r7, #0]
 800d588:	4904      	ldr	r1, [pc, #16]	; (800d59c <USBD_FS_ProductStrDescriptor+0x34>)
 800d58a:	4805      	ldr	r0, [pc, #20]	; (800d5a0 <USBD_FS_ProductStrDescriptor+0x38>)
 800d58c:	f7ff fd72 	bl	800d074 <USBD_GetString>
  }
  return USBD_StrDesc;
 800d590:	4b02      	ldr	r3, [pc, #8]	; (800d59c <USBD_FS_ProductStrDescriptor+0x34>)
}
 800d592:	4618      	mov	r0, r3
 800d594:	3708      	adds	r7, #8
 800d596:	46bd      	mov	sp, r7
 800d598:	bd80      	pop	{r7, pc}
 800d59a:	bf00      	nop
 800d59c:	20002664 	.word	0x20002664
 800d5a0:	08011fa0 	.word	0x08011fa0

0800d5a4 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d5a4:	b580      	push	{r7, lr}
 800d5a6:	b082      	sub	sp, #8
 800d5a8:	af00      	add	r7, sp, #0
 800d5aa:	4603      	mov	r3, r0
 800d5ac:	6039      	str	r1, [r7, #0]
 800d5ae:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800d5b0:	683a      	ldr	r2, [r7, #0]
 800d5b2:	4904      	ldr	r1, [pc, #16]	; (800d5c4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800d5b4:	4804      	ldr	r0, [pc, #16]	; (800d5c8 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800d5b6:	f7ff fd5d 	bl	800d074 <USBD_GetString>
  return USBD_StrDesc;
 800d5ba:	4b02      	ldr	r3, [pc, #8]	; (800d5c4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800d5bc:	4618      	mov	r0, r3
 800d5be:	3708      	adds	r7, #8
 800d5c0:	46bd      	mov	sp, r7
 800d5c2:	bd80      	pop	{r7, pc}
 800d5c4:	20002664 	.word	0x20002664
 800d5c8:	08011fac 	.word	0x08011fac

0800d5cc <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d5cc:	b580      	push	{r7, lr}
 800d5ce:	b082      	sub	sp, #8
 800d5d0:	af00      	add	r7, sp, #0
 800d5d2:	4603      	mov	r3, r0
 800d5d4:	6039      	str	r1, [r7, #0]
 800d5d6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800d5d8:	683b      	ldr	r3, [r7, #0]
 800d5da:	221a      	movs	r2, #26
 800d5dc:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800d5de:	f000 f843 	bl	800d668 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */
  
  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800d5e2:	4b02      	ldr	r3, [pc, #8]	; (800d5ec <USBD_FS_SerialStrDescriptor+0x20>)
}
 800d5e4:	4618      	mov	r0, r3
 800d5e6:	3708      	adds	r7, #8
 800d5e8:	46bd      	mov	sp, r7
 800d5ea:	bd80      	pop	{r7, pc}
 800d5ec:	20000168 	.word	0x20000168

0800d5f0 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d5f0:	b580      	push	{r7, lr}
 800d5f2:	b082      	sub	sp, #8
 800d5f4:	af00      	add	r7, sp, #0
 800d5f6:	4603      	mov	r3, r0
 800d5f8:	6039      	str	r1, [r7, #0]
 800d5fa:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800d5fc:	79fb      	ldrb	r3, [r7, #7]
 800d5fe:	2b00      	cmp	r3, #0
 800d600:	d105      	bne.n	800d60e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800d602:	683a      	ldr	r2, [r7, #0]
 800d604:	4907      	ldr	r1, [pc, #28]	; (800d624 <USBD_FS_ConfigStrDescriptor+0x34>)
 800d606:	4808      	ldr	r0, [pc, #32]	; (800d628 <USBD_FS_ConfigStrDescriptor+0x38>)
 800d608:	f7ff fd34 	bl	800d074 <USBD_GetString>
 800d60c:	e004      	b.n	800d618 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800d60e:	683a      	ldr	r2, [r7, #0]
 800d610:	4904      	ldr	r1, [pc, #16]	; (800d624 <USBD_FS_ConfigStrDescriptor+0x34>)
 800d612:	4805      	ldr	r0, [pc, #20]	; (800d628 <USBD_FS_ConfigStrDescriptor+0x38>)
 800d614:	f7ff fd2e 	bl	800d074 <USBD_GetString>
  }
  return USBD_StrDesc;
 800d618:	4b02      	ldr	r3, [pc, #8]	; (800d624 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800d61a:	4618      	mov	r0, r3
 800d61c:	3708      	adds	r7, #8
 800d61e:	46bd      	mov	sp, r7
 800d620:	bd80      	pop	{r7, pc}
 800d622:	bf00      	nop
 800d624:	20002664 	.word	0x20002664
 800d628:	08011fc0 	.word	0x08011fc0

0800d62c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d62c:	b580      	push	{r7, lr}
 800d62e:	b082      	sub	sp, #8
 800d630:	af00      	add	r7, sp, #0
 800d632:	4603      	mov	r3, r0
 800d634:	6039      	str	r1, [r7, #0]
 800d636:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800d638:	79fb      	ldrb	r3, [r7, #7]
 800d63a:	2b00      	cmp	r3, #0
 800d63c:	d105      	bne.n	800d64a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800d63e:	683a      	ldr	r2, [r7, #0]
 800d640:	4907      	ldr	r1, [pc, #28]	; (800d660 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800d642:	4808      	ldr	r0, [pc, #32]	; (800d664 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800d644:	f7ff fd16 	bl	800d074 <USBD_GetString>
 800d648:	e004      	b.n	800d654 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800d64a:	683a      	ldr	r2, [r7, #0]
 800d64c:	4904      	ldr	r1, [pc, #16]	; (800d660 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800d64e:	4805      	ldr	r0, [pc, #20]	; (800d664 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800d650:	f7ff fd10 	bl	800d074 <USBD_GetString>
  }
  return USBD_StrDesc;
 800d654:	4b02      	ldr	r3, [pc, #8]	; (800d660 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800d656:	4618      	mov	r0, r3
 800d658:	3708      	adds	r7, #8
 800d65a:	46bd      	mov	sp, r7
 800d65c:	bd80      	pop	{r7, pc}
 800d65e:	bf00      	nop
 800d660:	20002664 	.word	0x20002664
 800d664:	08011fcc 	.word	0x08011fcc

0800d668 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor 
  * @param  None 
  * @retval None
  */
static void Get_SerialNum(void)
{
 800d668:	b580      	push	{r7, lr}
 800d66a:	b084      	sub	sp, #16
 800d66c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800d66e:	4b0f      	ldr	r3, [pc, #60]	; (800d6ac <Get_SerialNum+0x44>)
 800d670:	681b      	ldr	r3, [r3, #0]
 800d672:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800d674:	4b0e      	ldr	r3, [pc, #56]	; (800d6b0 <Get_SerialNum+0x48>)
 800d676:	681b      	ldr	r3, [r3, #0]
 800d678:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800d67a:	4b0e      	ldr	r3, [pc, #56]	; (800d6b4 <Get_SerialNum+0x4c>)
 800d67c:	681b      	ldr	r3, [r3, #0]
 800d67e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800d680:	68fa      	ldr	r2, [r7, #12]
 800d682:	687b      	ldr	r3, [r7, #4]
 800d684:	4413      	add	r3, r2
 800d686:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800d688:	68fb      	ldr	r3, [r7, #12]
 800d68a:	2b00      	cmp	r3, #0
 800d68c:	d009      	beq.n	800d6a2 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800d68e:	2208      	movs	r2, #8
 800d690:	4909      	ldr	r1, [pc, #36]	; (800d6b8 <Get_SerialNum+0x50>)
 800d692:	68f8      	ldr	r0, [r7, #12]
 800d694:	f000 f814 	bl	800d6c0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800d698:	2204      	movs	r2, #4
 800d69a:	4908      	ldr	r1, [pc, #32]	; (800d6bc <Get_SerialNum+0x54>)
 800d69c:	68b8      	ldr	r0, [r7, #8]
 800d69e:	f000 f80f 	bl	800d6c0 <IntToUnicode>
  }
}
 800d6a2:	bf00      	nop
 800d6a4:	3710      	adds	r7, #16
 800d6a6:	46bd      	mov	sp, r7
 800d6a8:	bd80      	pop	{r7, pc}
 800d6aa:	bf00      	nop
 800d6ac:	1fff7a10 	.word	0x1fff7a10
 800d6b0:	1fff7a14 	.word	0x1fff7a14
 800d6b4:	1fff7a18 	.word	0x1fff7a18
 800d6b8:	2000016a 	.word	0x2000016a
 800d6bc:	2000017a 	.word	0x2000017a

0800d6c0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer 
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800d6c0:	b480      	push	{r7}
 800d6c2:	b087      	sub	sp, #28
 800d6c4:	af00      	add	r7, sp, #0
 800d6c6:	60f8      	str	r0, [r7, #12]
 800d6c8:	60b9      	str	r1, [r7, #8]
 800d6ca:	4613      	mov	r3, r2
 800d6cc:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800d6ce:	2300      	movs	r3, #0
 800d6d0:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800d6d2:	2300      	movs	r3, #0
 800d6d4:	75fb      	strb	r3, [r7, #23]
 800d6d6:	e027      	b.n	800d728 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800d6d8:	68fb      	ldr	r3, [r7, #12]
 800d6da:	0f1b      	lsrs	r3, r3, #28
 800d6dc:	2b09      	cmp	r3, #9
 800d6de:	d80b      	bhi.n	800d6f8 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800d6e0:	68fb      	ldr	r3, [r7, #12]
 800d6e2:	0f1b      	lsrs	r3, r3, #28
 800d6e4:	b2da      	uxtb	r2, r3
 800d6e6:	7dfb      	ldrb	r3, [r7, #23]
 800d6e8:	005b      	lsls	r3, r3, #1
 800d6ea:	4619      	mov	r1, r3
 800d6ec:	68bb      	ldr	r3, [r7, #8]
 800d6ee:	440b      	add	r3, r1
 800d6f0:	3230      	adds	r2, #48	; 0x30
 800d6f2:	b2d2      	uxtb	r2, r2
 800d6f4:	701a      	strb	r2, [r3, #0]
 800d6f6:	e00a      	b.n	800d70e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800d6f8:	68fb      	ldr	r3, [r7, #12]
 800d6fa:	0f1b      	lsrs	r3, r3, #28
 800d6fc:	b2da      	uxtb	r2, r3
 800d6fe:	7dfb      	ldrb	r3, [r7, #23]
 800d700:	005b      	lsls	r3, r3, #1
 800d702:	4619      	mov	r1, r3
 800d704:	68bb      	ldr	r3, [r7, #8]
 800d706:	440b      	add	r3, r1
 800d708:	3237      	adds	r2, #55	; 0x37
 800d70a:	b2d2      	uxtb	r2, r2
 800d70c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800d70e:	68fb      	ldr	r3, [r7, #12]
 800d710:	011b      	lsls	r3, r3, #4
 800d712:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800d714:	7dfb      	ldrb	r3, [r7, #23]
 800d716:	005b      	lsls	r3, r3, #1
 800d718:	3301      	adds	r3, #1
 800d71a:	68ba      	ldr	r2, [r7, #8]
 800d71c:	4413      	add	r3, r2
 800d71e:	2200      	movs	r2, #0
 800d720:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800d722:	7dfb      	ldrb	r3, [r7, #23]
 800d724:	3301      	adds	r3, #1
 800d726:	75fb      	strb	r3, [r7, #23]
 800d728:	7dfa      	ldrb	r2, [r7, #23]
 800d72a:	79fb      	ldrb	r3, [r7, #7]
 800d72c:	429a      	cmp	r2, r3
 800d72e:	d3d3      	bcc.n	800d6d8 <IntToUnicode+0x18>
  }
}
 800d730:	bf00      	nop
 800d732:	371c      	adds	r7, #28
 800d734:	46bd      	mov	sp, r7
 800d736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d73a:	4770      	bx	lr

0800d73c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800d73c:	b580      	push	{r7, lr}
 800d73e:	b08a      	sub	sp, #40	; 0x28
 800d740:	af00      	add	r7, sp, #0
 800d742:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800d744:	f107 0314 	add.w	r3, r7, #20
 800d748:	2200      	movs	r2, #0
 800d74a:	601a      	str	r2, [r3, #0]
 800d74c:	605a      	str	r2, [r3, #4]
 800d74e:	609a      	str	r2, [r3, #8]
 800d750:	60da      	str	r2, [r3, #12]
 800d752:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800d754:	687b      	ldr	r3, [r7, #4]
 800d756:	681b      	ldr	r3, [r3, #0]
 800d758:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800d75c:	d13a      	bne.n	800d7d4 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800d75e:	2300      	movs	r3, #0
 800d760:	613b      	str	r3, [r7, #16]
 800d762:	4b1e      	ldr	r3, [pc, #120]	; (800d7dc <HAL_PCD_MspInit+0xa0>)
 800d764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d766:	4a1d      	ldr	r2, [pc, #116]	; (800d7dc <HAL_PCD_MspInit+0xa0>)
 800d768:	f043 0301 	orr.w	r3, r3, #1
 800d76c:	6313      	str	r3, [r2, #48]	; 0x30
 800d76e:	4b1b      	ldr	r3, [pc, #108]	; (800d7dc <HAL_PCD_MspInit+0xa0>)
 800d770:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d772:	f003 0301 	and.w	r3, r3, #1
 800d776:	613b      	str	r3, [r7, #16]
 800d778:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration    
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800d77a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800d77e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d780:	2302      	movs	r3, #2
 800d782:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d784:	2300      	movs	r3, #0
 800d786:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800d788:	2303      	movs	r3, #3
 800d78a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800d78c:	230a      	movs	r3, #10
 800d78e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800d790:	f107 0314 	add.w	r3, r7, #20
 800d794:	4619      	mov	r1, r3
 800d796:	4812      	ldr	r0, [pc, #72]	; (800d7e0 <HAL_PCD_MspInit+0xa4>)
 800d798:	f7f6 f904 	bl	80039a4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800d79c:	4b0f      	ldr	r3, [pc, #60]	; (800d7dc <HAL_PCD_MspInit+0xa0>)
 800d79e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d7a0:	4a0e      	ldr	r2, [pc, #56]	; (800d7dc <HAL_PCD_MspInit+0xa0>)
 800d7a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d7a6:	6353      	str	r3, [r2, #52]	; 0x34
 800d7a8:	2300      	movs	r3, #0
 800d7aa:	60fb      	str	r3, [r7, #12]
 800d7ac:	4b0b      	ldr	r3, [pc, #44]	; (800d7dc <HAL_PCD_MspInit+0xa0>)
 800d7ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d7b0:	4a0a      	ldr	r2, [pc, #40]	; (800d7dc <HAL_PCD_MspInit+0xa0>)
 800d7b2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800d7b6:	6453      	str	r3, [r2, #68]	; 0x44
 800d7b8:	4b08      	ldr	r3, [pc, #32]	; (800d7dc <HAL_PCD_MspInit+0xa0>)
 800d7ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d7bc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d7c0:	60fb      	str	r3, [r7, #12]
 800d7c2:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800d7c4:	2200      	movs	r2, #0
 800d7c6:	2100      	movs	r1, #0
 800d7c8:	2043      	movs	r0, #67	; 0x43
 800d7ca:	f7f5 fd18 	bl	80031fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800d7ce:	2043      	movs	r0, #67	; 0x43
 800d7d0:	f7f5 fd31 	bl	8003236 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800d7d4:	bf00      	nop
 800d7d6:	3728      	adds	r7, #40	; 0x28
 800d7d8:	46bd      	mov	sp, r7
 800d7da:	bd80      	pop	{r7, pc}
 800d7dc:	40023800 	.word	0x40023800
 800d7e0:	40020000 	.word	0x40020000

0800d7e4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d7e4:	b580      	push	{r7, lr}
 800d7e6:	b082      	sub	sp, #8
 800d7e8:	af00      	add	r7, sp, #0
 800d7ea:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800d7ec:	687b      	ldr	r3, [r7, #4]
 800d7ee:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 800d7f2:	687b      	ldr	r3, [r7, #4]
 800d7f4:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800d7f8:	4619      	mov	r1, r3
 800d7fa:	4610      	mov	r0, r2
 800d7fc:	f7fe fd4c 	bl	800c298 <USBD_LL_SetupStage>
}
 800d800:	bf00      	nop
 800d802:	3708      	adds	r7, #8
 800d804:	46bd      	mov	sp, r7
 800d806:	bd80      	pop	{r7, pc}

0800d808 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d808:	b580      	push	{r7, lr}
 800d80a:	b082      	sub	sp, #8
 800d80c:	af00      	add	r7, sp, #0
 800d80e:	6078      	str	r0, [r7, #4]
 800d810:	460b      	mov	r3, r1
 800d812:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800d814:	687b      	ldr	r3, [r7, #4]
 800d816:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800d81a:	78fa      	ldrb	r2, [r7, #3]
 800d81c:	6879      	ldr	r1, [r7, #4]
 800d81e:	4613      	mov	r3, r2
 800d820:	00db      	lsls	r3, r3, #3
 800d822:	1a9b      	subs	r3, r3, r2
 800d824:	009b      	lsls	r3, r3, #2
 800d826:	440b      	add	r3, r1
 800d828:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800d82c:	681a      	ldr	r2, [r3, #0]
 800d82e:	78fb      	ldrb	r3, [r7, #3]
 800d830:	4619      	mov	r1, r3
 800d832:	f7fe fd7c 	bl	800c32e <USBD_LL_DataOutStage>
}
 800d836:	bf00      	nop
 800d838:	3708      	adds	r7, #8
 800d83a:	46bd      	mov	sp, r7
 800d83c:	bd80      	pop	{r7, pc}

0800d83e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d83e:	b580      	push	{r7, lr}
 800d840:	b082      	sub	sp, #8
 800d842:	af00      	add	r7, sp, #0
 800d844:	6078      	str	r0, [r7, #4]
 800d846:	460b      	mov	r3, r1
 800d848:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800d84a:	687b      	ldr	r3, [r7, #4]
 800d84c:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800d850:	78fa      	ldrb	r2, [r7, #3]
 800d852:	6879      	ldr	r1, [r7, #4]
 800d854:	4613      	mov	r3, r2
 800d856:	00db      	lsls	r3, r3, #3
 800d858:	1a9b      	subs	r3, r3, r2
 800d85a:	009b      	lsls	r3, r3, #2
 800d85c:	440b      	add	r3, r1
 800d85e:	3348      	adds	r3, #72	; 0x48
 800d860:	681a      	ldr	r2, [r3, #0]
 800d862:	78fb      	ldrb	r3, [r7, #3]
 800d864:	4619      	mov	r1, r3
 800d866:	f7fe fdd3 	bl	800c410 <USBD_LL_DataInStage>
}
 800d86a:	bf00      	nop
 800d86c:	3708      	adds	r7, #8
 800d86e:	46bd      	mov	sp, r7
 800d870:	bd80      	pop	{r7, pc}

0800d872 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d872:	b580      	push	{r7, lr}
 800d874:	b082      	sub	sp, #8
 800d876:	af00      	add	r7, sp, #0
 800d878:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800d87a:	687b      	ldr	r3, [r7, #4]
 800d87c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800d880:	4618      	mov	r0, r3
 800d882:	f7fe fee1 	bl	800c648 <USBD_LL_SOF>
}
 800d886:	bf00      	nop
 800d888:	3708      	adds	r7, #8
 800d88a:	46bd      	mov	sp, r7
 800d88c:	bd80      	pop	{r7, pc}

0800d88e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{ 
 800d88e:	b580      	push	{r7, lr}
 800d890:	b084      	sub	sp, #16
 800d892:	af00      	add	r7, sp, #0
 800d894:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800d896:	2301      	movs	r3, #1
 800d898:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800d89a:	687b      	ldr	r3, [r7, #4]
 800d89c:	68db      	ldr	r3, [r3, #12]
 800d89e:	2b00      	cmp	r3, #0
 800d8a0:	d102      	bne.n	800d8a8 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800d8a2:	2300      	movs	r3, #0
 800d8a4:	73fb      	strb	r3, [r7, #15]
 800d8a6:	e008      	b.n	800d8ba <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800d8a8:	687b      	ldr	r3, [r7, #4]
 800d8aa:	68db      	ldr	r3, [r3, #12]
 800d8ac:	2b02      	cmp	r3, #2
 800d8ae:	d102      	bne.n	800d8b6 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800d8b0:	2301      	movs	r3, #1
 800d8b2:	73fb      	strb	r3, [r7, #15]
 800d8b4:	e001      	b.n	800d8ba <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800d8b6:	f7f4 ffa5 	bl	8002804 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800d8ba:	687b      	ldr	r3, [r7, #4]
 800d8bc:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800d8c0:	7bfa      	ldrb	r2, [r7, #15]
 800d8c2:	4611      	mov	r1, r2
 800d8c4:	4618      	mov	r0, r3
 800d8c6:	f7fe fe89 	bl	800c5dc <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800d8ca:	687b      	ldr	r3, [r7, #4]
 800d8cc:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800d8d0:	4618      	mov	r0, r3
 800d8d2:	f7fe fe42 	bl	800c55a <USBD_LL_Reset>
}
 800d8d6:	bf00      	nop
 800d8d8:	3710      	adds	r7, #16
 800d8da:	46bd      	mov	sp, r7
 800d8dc:	bd80      	pop	{r7, pc}
	...

0800d8e0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d8e0:	b580      	push	{r7, lr}
 800d8e2:	b082      	sub	sp, #8
 800d8e4:	af00      	add	r7, sp, #0
 800d8e6:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800d8e8:	687b      	ldr	r3, [r7, #4]
 800d8ea:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800d8ee:	4618      	mov	r0, r3
 800d8f0:	f7fe fe84 	bl	800c5fc <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800d8f4:	687b      	ldr	r3, [r7, #4]
 800d8f6:	681b      	ldr	r3, [r3, #0]
 800d8f8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800d8fc:	681b      	ldr	r3, [r3, #0]
 800d8fe:	687a      	ldr	r2, [r7, #4]
 800d900:	6812      	ldr	r2, [r2, #0]
 800d902:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800d906:	f043 0301 	orr.w	r3, r3, #1
 800d90a:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800d90c:	687b      	ldr	r3, [r7, #4]
 800d90e:	6a1b      	ldr	r3, [r3, #32]
 800d910:	2b00      	cmp	r3, #0
 800d912:	d005      	beq.n	800d920 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800d914:	4b04      	ldr	r3, [pc, #16]	; (800d928 <HAL_PCD_SuspendCallback+0x48>)
 800d916:	691b      	ldr	r3, [r3, #16]
 800d918:	4a03      	ldr	r2, [pc, #12]	; (800d928 <HAL_PCD_SuspendCallback+0x48>)
 800d91a:	f043 0306 	orr.w	r3, r3, #6
 800d91e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800d920:	bf00      	nop
 800d922:	3708      	adds	r7, #8
 800d924:	46bd      	mov	sp, r7
 800d926:	bd80      	pop	{r7, pc}
 800d928:	e000ed00 	.word	0xe000ed00

0800d92c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d92c:	b580      	push	{r7, lr}
 800d92e:	b082      	sub	sp, #8
 800d930:	af00      	add	r7, sp, #0
 800d932:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800d934:	687b      	ldr	r3, [r7, #4]
 800d936:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800d93a:	4618      	mov	r0, r3
 800d93c:	f7fe fe73 	bl	800c626 <USBD_LL_Resume>
}
 800d940:	bf00      	nop
 800d942:	3708      	adds	r7, #8
 800d944:	46bd      	mov	sp, r7
 800d946:	bd80      	pop	{r7, pc}

0800d948 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d948:	b580      	push	{r7, lr}
 800d94a:	b082      	sub	sp, #8
 800d94c:	af00      	add	r7, sp, #0
 800d94e:	6078      	str	r0, [r7, #4]
 800d950:	460b      	mov	r3, r1
 800d952:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800d954:	687b      	ldr	r3, [r7, #4]
 800d956:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800d95a:	78fa      	ldrb	r2, [r7, #3]
 800d95c:	4611      	mov	r1, r2
 800d95e:	4618      	mov	r0, r3
 800d960:	f7fe fe99 	bl	800c696 <USBD_LL_IsoOUTIncomplete>
}
 800d964:	bf00      	nop
 800d966:	3708      	adds	r7, #8
 800d968:	46bd      	mov	sp, r7
 800d96a:	bd80      	pop	{r7, pc}

0800d96c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d96c:	b580      	push	{r7, lr}
 800d96e:	b082      	sub	sp, #8
 800d970:	af00      	add	r7, sp, #0
 800d972:	6078      	str	r0, [r7, #4]
 800d974:	460b      	mov	r3, r1
 800d976:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800d978:	687b      	ldr	r3, [r7, #4]
 800d97a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800d97e:	78fa      	ldrb	r2, [r7, #3]
 800d980:	4611      	mov	r1, r2
 800d982:	4618      	mov	r0, r3
 800d984:	f7fe fe7a 	bl	800c67c <USBD_LL_IsoINIncomplete>
}
 800d988:	bf00      	nop
 800d98a:	3708      	adds	r7, #8
 800d98c:	46bd      	mov	sp, r7
 800d98e:	bd80      	pop	{r7, pc}

0800d990 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d990:	b580      	push	{r7, lr}
 800d992:	b082      	sub	sp, #8
 800d994:	af00      	add	r7, sp, #0
 800d996:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800d998:	687b      	ldr	r3, [r7, #4]
 800d99a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800d99e:	4618      	mov	r0, r3
 800d9a0:	f7fe fe86 	bl	800c6b0 <USBD_LL_DevConnected>
}
 800d9a4:	bf00      	nop
 800d9a6:	3708      	adds	r7, #8
 800d9a8:	46bd      	mov	sp, r7
 800d9aa:	bd80      	pop	{r7, pc}

0800d9ac <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d9ac:	b580      	push	{r7, lr}
 800d9ae:	b082      	sub	sp, #8
 800d9b0:	af00      	add	r7, sp, #0
 800d9b2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800d9b4:	687b      	ldr	r3, [r7, #4]
 800d9b6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800d9ba:	4618      	mov	r0, r3
 800d9bc:	f7fe fe83 	bl	800c6c6 <USBD_LL_DevDisconnected>
}
 800d9c0:	bf00      	nop
 800d9c2:	3708      	adds	r7, #8
 800d9c4:	46bd      	mov	sp, r7
 800d9c6:	bd80      	pop	{r7, pc}

0800d9c8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800d9c8:	b580      	push	{r7, lr}
 800d9ca:	b082      	sub	sp, #8
 800d9cc:	af00      	add	r7, sp, #0
 800d9ce:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800d9d0:	687b      	ldr	r3, [r7, #4]
 800d9d2:	781b      	ldrb	r3, [r3, #0]
 800d9d4:	2b00      	cmp	r3, #0
 800d9d6:	d13c      	bne.n	800da52 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800d9d8:	4a20      	ldr	r2, [pc, #128]	; (800da5c <USBD_LL_Init+0x94>)
 800d9da:	687b      	ldr	r3, [r7, #4]
 800d9dc:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 800d9e0:	687b      	ldr	r3, [r7, #4]
 800d9e2:	4a1e      	ldr	r2, [pc, #120]	; (800da5c <USBD_LL_Init+0x94>)
 800d9e4:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298
  
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800d9e8:	4b1c      	ldr	r3, [pc, #112]	; (800da5c <USBD_LL_Init+0x94>)
 800d9ea:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800d9ee:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800d9f0:	4b1a      	ldr	r3, [pc, #104]	; (800da5c <USBD_LL_Init+0x94>)
 800d9f2:	2204      	movs	r2, #4
 800d9f4:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800d9f6:	4b19      	ldr	r3, [pc, #100]	; (800da5c <USBD_LL_Init+0x94>)
 800d9f8:	2202      	movs	r2, #2
 800d9fa:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800d9fc:	4b17      	ldr	r3, [pc, #92]	; (800da5c <USBD_LL_Init+0x94>)
 800d9fe:	2200      	movs	r2, #0
 800da00:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800da02:	4b16      	ldr	r3, [pc, #88]	; (800da5c <USBD_LL_Init+0x94>)
 800da04:	2202      	movs	r2, #2
 800da06:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800da08:	4b14      	ldr	r3, [pc, #80]	; (800da5c <USBD_LL_Init+0x94>)
 800da0a:	2200      	movs	r2, #0
 800da0c:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800da0e:	4b13      	ldr	r3, [pc, #76]	; (800da5c <USBD_LL_Init+0x94>)
 800da10:	2200      	movs	r2, #0
 800da12:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800da14:	4b11      	ldr	r3, [pc, #68]	; (800da5c <USBD_LL_Init+0x94>)
 800da16:	2200      	movs	r2, #0
 800da18:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800da1a:	4b10      	ldr	r3, [pc, #64]	; (800da5c <USBD_LL_Init+0x94>)
 800da1c:	2200      	movs	r2, #0
 800da1e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800da20:	4b0e      	ldr	r3, [pc, #56]	; (800da5c <USBD_LL_Init+0x94>)
 800da22:	2200      	movs	r2, #0
 800da24:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800da26:	480d      	ldr	r0, [pc, #52]	; (800da5c <USBD_LL_Init+0x94>)
 800da28:	f7f6 fad8 	bl	8003fdc <HAL_PCD_Init>
 800da2c:	4603      	mov	r3, r0
 800da2e:	2b00      	cmp	r3, #0
 800da30:	d001      	beq.n	800da36 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800da32:	f7f4 fee7 	bl	8002804 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800da36:	2180      	movs	r1, #128	; 0x80
 800da38:	4808      	ldr	r0, [pc, #32]	; (800da5c <USBD_LL_Init+0x94>)
 800da3a:	f7f7 fc3c 	bl	80052b6 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800da3e:	2240      	movs	r2, #64	; 0x40
 800da40:	2100      	movs	r1, #0
 800da42:	4806      	ldr	r0, [pc, #24]	; (800da5c <USBD_LL_Init+0x94>)
 800da44:	f7f7 fbf0 	bl	8005228 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800da48:	2280      	movs	r2, #128	; 0x80
 800da4a:	2101      	movs	r1, #1
 800da4c:	4803      	ldr	r0, [pc, #12]	; (800da5c <USBD_LL_Init+0x94>)
 800da4e:	f7f7 fbeb 	bl	8005228 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800da52:	2300      	movs	r3, #0
}
 800da54:	4618      	mov	r0, r3
 800da56:	3708      	adds	r7, #8
 800da58:	46bd      	mov	sp, r7
 800da5a:	bd80      	pop	{r7, pc}
 800da5c:	20002864 	.word	0x20002864

0800da60 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver. 
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800da60:	b580      	push	{r7, lr}
 800da62:	b084      	sub	sp, #16
 800da64:	af00      	add	r7, sp, #0
 800da66:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800da68:	2300      	movs	r3, #0
 800da6a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800da6c:	2300      	movs	r3, #0
 800da6e:	73bb      	strb	r3, [r7, #14]
 
  hal_status = HAL_PCD_Start(pdev->pData);
 800da70:	687b      	ldr	r3, [r7, #4]
 800da72:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800da76:	4618      	mov	r0, r3
 800da78:	f7f6 fbcd 	bl	8004216 <HAL_PCD_Start>
 800da7c:	4603      	mov	r3, r0
 800da7e:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);     
 800da80:	7bfb      	ldrb	r3, [r7, #15]
 800da82:	4618      	mov	r0, r3
 800da84:	f000 f92e 	bl	800dce4 <USBD_Get_USB_Status>
 800da88:	4603      	mov	r3, r0
 800da8a:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 800da8c:	7bbb      	ldrb	r3, [r7, #14]
}
 800da8e:	4618      	mov	r0, r3
 800da90:	3710      	adds	r7, #16
 800da92:	46bd      	mov	sp, r7
 800da94:	bd80      	pop	{r7, pc}

0800da96 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800da96:	b580      	push	{r7, lr}
 800da98:	b084      	sub	sp, #16
 800da9a:	af00      	add	r7, sp, #0
 800da9c:	6078      	str	r0, [r7, #4]
 800da9e:	4608      	mov	r0, r1
 800daa0:	4611      	mov	r1, r2
 800daa2:	461a      	mov	r2, r3
 800daa4:	4603      	mov	r3, r0
 800daa6:	70fb      	strb	r3, [r7, #3]
 800daa8:	460b      	mov	r3, r1
 800daaa:	70bb      	strb	r3, [r7, #2]
 800daac:	4613      	mov	r3, r2
 800daae:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800dab0:	2300      	movs	r3, #0
 800dab2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800dab4:	2300      	movs	r3, #0
 800dab6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800dab8:	687b      	ldr	r3, [r7, #4]
 800daba:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 800dabe:	78bb      	ldrb	r3, [r7, #2]
 800dac0:	883a      	ldrh	r2, [r7, #0]
 800dac2:	78f9      	ldrb	r1, [r7, #3]
 800dac4:	f7f6 ffa2 	bl	8004a0c <HAL_PCD_EP_Open>
 800dac8:	4603      	mov	r3, r0
 800daca:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800dacc:	7bfb      	ldrb	r3, [r7, #15]
 800dace:	4618      	mov	r0, r3
 800dad0:	f000 f908 	bl	800dce4 <USBD_Get_USB_Status>
 800dad4:	4603      	mov	r3, r0
 800dad6:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 800dad8:	7bbb      	ldrb	r3, [r7, #14]
}
 800dada:	4618      	mov	r0, r3
 800dadc:	3710      	adds	r7, #16
 800dade:	46bd      	mov	sp, r7
 800dae0:	bd80      	pop	{r7, pc}

0800dae2 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800dae2:	b580      	push	{r7, lr}
 800dae4:	b084      	sub	sp, #16
 800dae6:	af00      	add	r7, sp, #0
 800dae8:	6078      	str	r0, [r7, #4]
 800daea:	460b      	mov	r3, r1
 800daec:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800daee:	2300      	movs	r3, #0
 800daf0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800daf2:	2300      	movs	r3, #0
 800daf4:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800daf6:	687b      	ldr	r3, [r7, #4]
 800daf8:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800dafc:	78fa      	ldrb	r2, [r7, #3]
 800dafe:	4611      	mov	r1, r2
 800db00:	4618      	mov	r0, r3
 800db02:	f7f6 ffeb 	bl	8004adc <HAL_PCD_EP_Close>
 800db06:	4603      	mov	r3, r0
 800db08:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);    
 800db0a:	7bfb      	ldrb	r3, [r7, #15]
 800db0c:	4618      	mov	r0, r3
 800db0e:	f000 f8e9 	bl	800dce4 <USBD_Get_USB_Status>
 800db12:	4603      	mov	r3, r0
 800db14:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;  
 800db16:	7bbb      	ldrb	r3, [r7, #14]
}
 800db18:	4618      	mov	r0, r3
 800db1a:	3710      	adds	r7, #16
 800db1c:	46bd      	mov	sp, r7
 800db1e:	bd80      	pop	{r7, pc}

0800db20 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800db20:	b580      	push	{r7, lr}
 800db22:	b084      	sub	sp, #16
 800db24:	af00      	add	r7, sp, #0
 800db26:	6078      	str	r0, [r7, #4]
 800db28:	460b      	mov	r3, r1
 800db2a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800db2c:	2300      	movs	r3, #0
 800db2e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800db30:	2300      	movs	r3, #0
 800db32:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800db34:	687b      	ldr	r3, [r7, #4]
 800db36:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800db3a:	78fa      	ldrb	r2, [r7, #3]
 800db3c:	4611      	mov	r1, r2
 800db3e:	4618      	mov	r0, r3
 800db40:	f7f7 f8c3 	bl	8004cca <HAL_PCD_EP_SetStall>
 800db44:	4603      	mov	r3, r0
 800db46:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800db48:	7bfb      	ldrb	r3, [r7, #15]
 800db4a:	4618      	mov	r0, r3
 800db4c:	f000 f8ca 	bl	800dce4 <USBD_Get_USB_Status>
 800db50:	4603      	mov	r3, r0
 800db52:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;  
 800db54:	7bbb      	ldrb	r3, [r7, #14]
}
 800db56:	4618      	mov	r0, r3
 800db58:	3710      	adds	r7, #16
 800db5a:	46bd      	mov	sp, r7
 800db5c:	bd80      	pop	{r7, pc}

0800db5e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800db5e:	b580      	push	{r7, lr}
 800db60:	b084      	sub	sp, #16
 800db62:	af00      	add	r7, sp, #0
 800db64:	6078      	str	r0, [r7, #4]
 800db66:	460b      	mov	r3, r1
 800db68:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800db6a:	2300      	movs	r3, #0
 800db6c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800db6e:	2300      	movs	r3, #0
 800db70:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800db72:	687b      	ldr	r3, [r7, #4]
 800db74:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800db78:	78fa      	ldrb	r2, [r7, #3]
 800db7a:	4611      	mov	r1, r2
 800db7c:	4618      	mov	r0, r3
 800db7e:	f7f7 f908 	bl	8004d92 <HAL_PCD_EP_ClrStall>
 800db82:	4603      	mov	r3, r0
 800db84:	73fb      	strb	r3, [r7, #15]
    
  usb_status =  USBD_Get_USB_Status(hal_status);  
 800db86:	7bfb      	ldrb	r3, [r7, #15]
 800db88:	4618      	mov	r0, r3
 800db8a:	f000 f8ab 	bl	800dce4 <USBD_Get_USB_Status>
 800db8e:	4603      	mov	r3, r0
 800db90:	73bb      	strb	r3, [r7, #14]
  
  return usb_status; 
 800db92:	7bbb      	ldrb	r3, [r7, #14]
}
 800db94:	4618      	mov	r0, r3
 800db96:	3710      	adds	r7, #16
 800db98:	46bd      	mov	sp, r7
 800db9a:	bd80      	pop	{r7, pc}

0800db9c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800db9c:	b480      	push	{r7}
 800db9e:	b085      	sub	sp, #20
 800dba0:	af00      	add	r7, sp, #0
 800dba2:	6078      	str	r0, [r7, #4]
 800dba4:	460b      	mov	r3, r1
 800dba6:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800dba8:	687b      	ldr	r3, [r7, #4]
 800dbaa:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800dbae:	60fb      	str	r3, [r7, #12]
  
  if((ep_addr & 0x80) == 0x80)
 800dbb0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800dbb4:	2b00      	cmp	r3, #0
 800dbb6:	da0b      	bge.n	800dbd0 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 800dbb8:	78fb      	ldrb	r3, [r7, #3]
 800dbba:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800dbbe:	68f9      	ldr	r1, [r7, #12]
 800dbc0:	4613      	mov	r3, r2
 800dbc2:	00db      	lsls	r3, r3, #3
 800dbc4:	1a9b      	subs	r3, r3, r2
 800dbc6:	009b      	lsls	r3, r3, #2
 800dbc8:	440b      	add	r3, r1
 800dbca:	333e      	adds	r3, #62	; 0x3e
 800dbcc:	781b      	ldrb	r3, [r3, #0]
 800dbce:	e00b      	b.n	800dbe8 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 800dbd0:	78fb      	ldrb	r3, [r7, #3]
 800dbd2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800dbd6:	68f9      	ldr	r1, [r7, #12]
 800dbd8:	4613      	mov	r3, r2
 800dbda:	00db      	lsls	r3, r3, #3
 800dbdc:	1a9b      	subs	r3, r3, r2
 800dbde:	009b      	lsls	r3, r3, #2
 800dbe0:	440b      	add	r3, r1
 800dbe2:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800dbe6:	781b      	ldrb	r3, [r3, #0]
  }
}
 800dbe8:	4618      	mov	r0, r3
 800dbea:	3714      	adds	r7, #20
 800dbec:	46bd      	mov	sp, r7
 800dbee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbf2:	4770      	bx	lr

0800dbf4 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800dbf4:	b580      	push	{r7, lr}
 800dbf6:	b084      	sub	sp, #16
 800dbf8:	af00      	add	r7, sp, #0
 800dbfa:	6078      	str	r0, [r7, #4]
 800dbfc:	460b      	mov	r3, r1
 800dbfe:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800dc00:	2300      	movs	r3, #0
 800dc02:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800dc04:	2300      	movs	r3, #0
 800dc06:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800dc08:	687b      	ldr	r3, [r7, #4]
 800dc0a:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800dc0e:	78fa      	ldrb	r2, [r7, #3]
 800dc10:	4611      	mov	r1, r2
 800dc12:	4618      	mov	r0, r3
 800dc14:	f7f6 fed5 	bl	80049c2 <HAL_PCD_SetAddress>
 800dc18:	4603      	mov	r3, r0
 800dc1a:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);
 800dc1c:	7bfb      	ldrb	r3, [r7, #15]
 800dc1e:	4618      	mov	r0, r3
 800dc20:	f000 f860 	bl	800dce4 <USBD_Get_USB_Status>
 800dc24:	4603      	mov	r3, r0
 800dc26:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;  
 800dc28:	7bbb      	ldrb	r3, [r7, #14]
}
 800dc2a:	4618      	mov	r0, r3
 800dc2c:	3710      	adds	r7, #16
 800dc2e:	46bd      	mov	sp, r7
 800dc30:	bd80      	pop	{r7, pc}

0800dc32 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800dc32:	b580      	push	{r7, lr}
 800dc34:	b086      	sub	sp, #24
 800dc36:	af00      	add	r7, sp, #0
 800dc38:	60f8      	str	r0, [r7, #12]
 800dc3a:	607a      	str	r2, [r7, #4]
 800dc3c:	461a      	mov	r2, r3
 800dc3e:	460b      	mov	r3, r1
 800dc40:	72fb      	strb	r3, [r7, #11]
 800dc42:	4613      	mov	r3, r2
 800dc44:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800dc46:	2300      	movs	r3, #0
 800dc48:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800dc4a:	2300      	movs	r3, #0
 800dc4c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800dc4e:	68fb      	ldr	r3, [r7, #12]
 800dc50:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 800dc54:	893b      	ldrh	r3, [r7, #8]
 800dc56:	7af9      	ldrb	r1, [r7, #11]
 800dc58:	687a      	ldr	r2, [r7, #4]
 800dc5a:	f7f6 ffec 	bl	8004c36 <HAL_PCD_EP_Transmit>
 800dc5e:	4603      	mov	r3, r0
 800dc60:	75fb      	strb	r3, [r7, #23]
  
  usb_status =  USBD_Get_USB_Status(hal_status); 
 800dc62:	7dfb      	ldrb	r3, [r7, #23]
 800dc64:	4618      	mov	r0, r3
 800dc66:	f000 f83d 	bl	800dce4 <USBD_Get_USB_Status>
 800dc6a:	4603      	mov	r3, r0
 800dc6c:	75bb      	strb	r3, [r7, #22]
  
  return usb_status;    
 800dc6e:	7dbb      	ldrb	r3, [r7, #22]
}
 800dc70:	4618      	mov	r0, r3
 800dc72:	3718      	adds	r7, #24
 800dc74:	46bd      	mov	sp, r7
 800dc76:	bd80      	pop	{r7, pc}

0800dc78 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800dc78:	b580      	push	{r7, lr}
 800dc7a:	b086      	sub	sp, #24
 800dc7c:	af00      	add	r7, sp, #0
 800dc7e:	60f8      	str	r0, [r7, #12]
 800dc80:	607a      	str	r2, [r7, #4]
 800dc82:	461a      	mov	r2, r3
 800dc84:	460b      	mov	r3, r1
 800dc86:	72fb      	strb	r3, [r7, #11]
 800dc88:	4613      	mov	r3, r2
 800dc8a:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800dc8c:	2300      	movs	r3, #0
 800dc8e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800dc90:	2300      	movs	r3, #0
 800dc92:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800dc94:	68fb      	ldr	r3, [r7, #12]
 800dc96:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 800dc9a:	893b      	ldrh	r3, [r7, #8]
 800dc9c:	7af9      	ldrb	r1, [r7, #11]
 800dc9e:	687a      	ldr	r2, [r7, #4]
 800dca0:	f7f6 ff66 	bl	8004b70 <HAL_PCD_EP_Receive>
 800dca4:	4603      	mov	r3, r0
 800dca6:	75fb      	strb	r3, [r7, #23]
  
  usb_status =  USBD_Get_USB_Status(hal_status);   
 800dca8:	7dfb      	ldrb	r3, [r7, #23]
 800dcaa:	4618      	mov	r0, r3
 800dcac:	f000 f81a 	bl	800dce4 <USBD_Get_USB_Status>
 800dcb0:	4603      	mov	r3, r0
 800dcb2:	75bb      	strb	r3, [r7, #22]
  
  return usb_status; 
 800dcb4:	7dbb      	ldrb	r3, [r7, #22]
}
 800dcb6:	4618      	mov	r0, r3
 800dcb8:	3718      	adds	r7, #24
 800dcba:	46bd      	mov	sp, r7
 800dcbc:	bd80      	pop	{r7, pc}

0800dcbe <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800dcbe:	b580      	push	{r7, lr}
 800dcc0:	b082      	sub	sp, #8
 800dcc2:	af00      	add	r7, sp, #0
 800dcc4:	6078      	str	r0, [r7, #4]
 800dcc6:	460b      	mov	r3, r1
 800dcc8:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800dcca:	687b      	ldr	r3, [r7, #4]
 800dccc:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800dcd0:	78fa      	ldrb	r2, [r7, #3]
 800dcd2:	4611      	mov	r1, r2
 800dcd4:	4618      	mov	r0, r3
 800dcd6:	f7f6 ff96 	bl	8004c06 <HAL_PCD_EP_GetRxCount>
 800dcda:	4603      	mov	r3, r0
}
 800dcdc:	4618      	mov	r0, r3
 800dcde:	3708      	adds	r7, #8
 800dce0:	46bd      	mov	sp, r7
 800dce2:	bd80      	pop	{r7, pc}

0800dce4 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800dce4:	b480      	push	{r7}
 800dce6:	b085      	sub	sp, #20
 800dce8:	af00      	add	r7, sp, #0
 800dcea:	4603      	mov	r3, r0
 800dcec:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800dcee:	2300      	movs	r3, #0
 800dcf0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800dcf2:	79fb      	ldrb	r3, [r7, #7]
 800dcf4:	2b03      	cmp	r3, #3
 800dcf6:	d817      	bhi.n	800dd28 <USBD_Get_USB_Status+0x44>
 800dcf8:	a201      	add	r2, pc, #4	; (adr r2, 800dd00 <USBD_Get_USB_Status+0x1c>)
 800dcfa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dcfe:	bf00      	nop
 800dd00:	0800dd11 	.word	0x0800dd11
 800dd04:	0800dd17 	.word	0x0800dd17
 800dd08:	0800dd1d 	.word	0x0800dd1d
 800dd0c:	0800dd23 	.word	0x0800dd23
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800dd10:	2300      	movs	r3, #0
 800dd12:	73fb      	strb	r3, [r7, #15]
    break;
 800dd14:	e00b      	b.n	800dd2e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800dd16:	2302      	movs	r3, #2
 800dd18:	73fb      	strb	r3, [r7, #15]
    break;
 800dd1a:	e008      	b.n	800dd2e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800dd1c:	2301      	movs	r3, #1
 800dd1e:	73fb      	strb	r3, [r7, #15]
    break;
 800dd20:	e005      	b.n	800dd2e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800dd22:	2302      	movs	r3, #2
 800dd24:	73fb      	strb	r3, [r7, #15]
    break;
 800dd26:	e002      	b.n	800dd2e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800dd28:	2302      	movs	r3, #2
 800dd2a:	73fb      	strb	r3, [r7, #15]
    break;
 800dd2c:	bf00      	nop
  }
  return usb_status;
 800dd2e:	7bfb      	ldrb	r3, [r7, #15]
}
 800dd30:	4618      	mov	r0, r3
 800dd32:	3714      	adds	r7, #20
 800dd34:	46bd      	mov	sp, r7
 800dd36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd3a:	4770      	bx	lr

0800dd3c <__libc_init_array>:
 800dd3c:	b570      	push	{r4, r5, r6, lr}
 800dd3e:	4e0d      	ldr	r6, [pc, #52]	; (800dd74 <__libc_init_array+0x38>)
 800dd40:	4c0d      	ldr	r4, [pc, #52]	; (800dd78 <__libc_init_array+0x3c>)
 800dd42:	1ba4      	subs	r4, r4, r6
 800dd44:	10a4      	asrs	r4, r4, #2
 800dd46:	2500      	movs	r5, #0
 800dd48:	42a5      	cmp	r5, r4
 800dd4a:	d109      	bne.n	800dd60 <__libc_init_array+0x24>
 800dd4c:	4e0b      	ldr	r6, [pc, #44]	; (800dd7c <__libc_init_array+0x40>)
 800dd4e:	4c0c      	ldr	r4, [pc, #48]	; (800dd80 <__libc_init_array+0x44>)
 800dd50:	f003 fd70 	bl	8011834 <_init>
 800dd54:	1ba4      	subs	r4, r4, r6
 800dd56:	10a4      	asrs	r4, r4, #2
 800dd58:	2500      	movs	r5, #0
 800dd5a:	42a5      	cmp	r5, r4
 800dd5c:	d105      	bne.n	800dd6a <__libc_init_array+0x2e>
 800dd5e:	bd70      	pop	{r4, r5, r6, pc}
 800dd60:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800dd64:	4798      	blx	r3
 800dd66:	3501      	adds	r5, #1
 800dd68:	e7ee      	b.n	800dd48 <__libc_init_array+0xc>
 800dd6a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800dd6e:	4798      	blx	r3
 800dd70:	3501      	adds	r5, #1
 800dd72:	e7f2      	b.n	800dd5a <__libc_init_array+0x1e>
 800dd74:	080122d0 	.word	0x080122d0
 800dd78:	080122d0 	.word	0x080122d0
 800dd7c:	080122d0 	.word	0x080122d0
 800dd80:	080122d4 	.word	0x080122d4

0800dd84 <malloc>:
 800dd84:	4b02      	ldr	r3, [pc, #8]	; (800dd90 <malloc+0xc>)
 800dd86:	4601      	mov	r1, r0
 800dd88:	6818      	ldr	r0, [r3, #0]
 800dd8a:	f000 b86d 	b.w	800de68 <_malloc_r>
 800dd8e:	bf00      	nop
 800dd90:	20000184 	.word	0x20000184

0800dd94 <free>:
 800dd94:	4b02      	ldr	r3, [pc, #8]	; (800dda0 <free+0xc>)
 800dd96:	4601      	mov	r1, r0
 800dd98:	6818      	ldr	r0, [r3, #0]
 800dd9a:	f000 b817 	b.w	800ddcc <_free_r>
 800dd9e:	bf00      	nop
 800dda0:	20000184 	.word	0x20000184

0800dda4 <memcpy>:
 800dda4:	b510      	push	{r4, lr}
 800dda6:	1e43      	subs	r3, r0, #1
 800dda8:	440a      	add	r2, r1
 800ddaa:	4291      	cmp	r1, r2
 800ddac:	d100      	bne.n	800ddb0 <memcpy+0xc>
 800ddae:	bd10      	pop	{r4, pc}
 800ddb0:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ddb4:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ddb8:	e7f7      	b.n	800ddaa <memcpy+0x6>

0800ddba <memset>:
 800ddba:	4402      	add	r2, r0
 800ddbc:	4603      	mov	r3, r0
 800ddbe:	4293      	cmp	r3, r2
 800ddc0:	d100      	bne.n	800ddc4 <memset+0xa>
 800ddc2:	4770      	bx	lr
 800ddc4:	f803 1b01 	strb.w	r1, [r3], #1
 800ddc8:	e7f9      	b.n	800ddbe <memset+0x4>
	...

0800ddcc <_free_r>:
 800ddcc:	b538      	push	{r3, r4, r5, lr}
 800ddce:	4605      	mov	r5, r0
 800ddd0:	2900      	cmp	r1, #0
 800ddd2:	d045      	beq.n	800de60 <_free_r+0x94>
 800ddd4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ddd8:	1f0c      	subs	r4, r1, #4
 800ddda:	2b00      	cmp	r3, #0
 800dddc:	bfb8      	it	lt
 800ddde:	18e4      	addlt	r4, r4, r3
 800dde0:	f002 ff52 	bl	8010c88 <__malloc_lock>
 800dde4:	4a1f      	ldr	r2, [pc, #124]	; (800de64 <_free_r+0x98>)
 800dde6:	6813      	ldr	r3, [r2, #0]
 800dde8:	4610      	mov	r0, r2
 800ddea:	b933      	cbnz	r3, 800ddfa <_free_r+0x2e>
 800ddec:	6063      	str	r3, [r4, #4]
 800ddee:	6014      	str	r4, [r2, #0]
 800ddf0:	4628      	mov	r0, r5
 800ddf2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ddf6:	f002 bf48 	b.w	8010c8a <__malloc_unlock>
 800ddfa:	42a3      	cmp	r3, r4
 800ddfc:	d90c      	bls.n	800de18 <_free_r+0x4c>
 800ddfe:	6821      	ldr	r1, [r4, #0]
 800de00:	1862      	adds	r2, r4, r1
 800de02:	4293      	cmp	r3, r2
 800de04:	bf04      	itt	eq
 800de06:	681a      	ldreq	r2, [r3, #0]
 800de08:	685b      	ldreq	r3, [r3, #4]
 800de0a:	6063      	str	r3, [r4, #4]
 800de0c:	bf04      	itt	eq
 800de0e:	1852      	addeq	r2, r2, r1
 800de10:	6022      	streq	r2, [r4, #0]
 800de12:	6004      	str	r4, [r0, #0]
 800de14:	e7ec      	b.n	800ddf0 <_free_r+0x24>
 800de16:	4613      	mov	r3, r2
 800de18:	685a      	ldr	r2, [r3, #4]
 800de1a:	b10a      	cbz	r2, 800de20 <_free_r+0x54>
 800de1c:	42a2      	cmp	r2, r4
 800de1e:	d9fa      	bls.n	800de16 <_free_r+0x4a>
 800de20:	6819      	ldr	r1, [r3, #0]
 800de22:	1858      	adds	r0, r3, r1
 800de24:	42a0      	cmp	r0, r4
 800de26:	d10b      	bne.n	800de40 <_free_r+0x74>
 800de28:	6820      	ldr	r0, [r4, #0]
 800de2a:	4401      	add	r1, r0
 800de2c:	1858      	adds	r0, r3, r1
 800de2e:	4282      	cmp	r2, r0
 800de30:	6019      	str	r1, [r3, #0]
 800de32:	d1dd      	bne.n	800ddf0 <_free_r+0x24>
 800de34:	6810      	ldr	r0, [r2, #0]
 800de36:	6852      	ldr	r2, [r2, #4]
 800de38:	605a      	str	r2, [r3, #4]
 800de3a:	4401      	add	r1, r0
 800de3c:	6019      	str	r1, [r3, #0]
 800de3e:	e7d7      	b.n	800ddf0 <_free_r+0x24>
 800de40:	d902      	bls.n	800de48 <_free_r+0x7c>
 800de42:	230c      	movs	r3, #12
 800de44:	602b      	str	r3, [r5, #0]
 800de46:	e7d3      	b.n	800ddf0 <_free_r+0x24>
 800de48:	6820      	ldr	r0, [r4, #0]
 800de4a:	1821      	adds	r1, r4, r0
 800de4c:	428a      	cmp	r2, r1
 800de4e:	bf04      	itt	eq
 800de50:	6811      	ldreq	r1, [r2, #0]
 800de52:	6852      	ldreq	r2, [r2, #4]
 800de54:	6062      	str	r2, [r4, #4]
 800de56:	bf04      	itt	eq
 800de58:	1809      	addeq	r1, r1, r0
 800de5a:	6021      	streq	r1, [r4, #0]
 800de5c:	605c      	str	r4, [r3, #4]
 800de5e:	e7c7      	b.n	800ddf0 <_free_r+0x24>
 800de60:	bd38      	pop	{r3, r4, r5, pc}
 800de62:	bf00      	nop
 800de64:	20000994 	.word	0x20000994

0800de68 <_malloc_r>:
 800de68:	b570      	push	{r4, r5, r6, lr}
 800de6a:	1ccd      	adds	r5, r1, #3
 800de6c:	f025 0503 	bic.w	r5, r5, #3
 800de70:	3508      	adds	r5, #8
 800de72:	2d0c      	cmp	r5, #12
 800de74:	bf38      	it	cc
 800de76:	250c      	movcc	r5, #12
 800de78:	2d00      	cmp	r5, #0
 800de7a:	4606      	mov	r6, r0
 800de7c:	db01      	blt.n	800de82 <_malloc_r+0x1a>
 800de7e:	42a9      	cmp	r1, r5
 800de80:	d903      	bls.n	800de8a <_malloc_r+0x22>
 800de82:	230c      	movs	r3, #12
 800de84:	6033      	str	r3, [r6, #0]
 800de86:	2000      	movs	r0, #0
 800de88:	bd70      	pop	{r4, r5, r6, pc}
 800de8a:	f002 fefd 	bl	8010c88 <__malloc_lock>
 800de8e:	4a21      	ldr	r2, [pc, #132]	; (800df14 <_malloc_r+0xac>)
 800de90:	6814      	ldr	r4, [r2, #0]
 800de92:	4621      	mov	r1, r4
 800de94:	b991      	cbnz	r1, 800debc <_malloc_r+0x54>
 800de96:	4c20      	ldr	r4, [pc, #128]	; (800df18 <_malloc_r+0xb0>)
 800de98:	6823      	ldr	r3, [r4, #0]
 800de9a:	b91b      	cbnz	r3, 800dea4 <_malloc_r+0x3c>
 800de9c:	4630      	mov	r0, r6
 800de9e:	f000 fe7b 	bl	800eb98 <_sbrk_r>
 800dea2:	6020      	str	r0, [r4, #0]
 800dea4:	4629      	mov	r1, r5
 800dea6:	4630      	mov	r0, r6
 800dea8:	f000 fe76 	bl	800eb98 <_sbrk_r>
 800deac:	1c43      	adds	r3, r0, #1
 800deae:	d124      	bne.n	800defa <_malloc_r+0x92>
 800deb0:	230c      	movs	r3, #12
 800deb2:	6033      	str	r3, [r6, #0]
 800deb4:	4630      	mov	r0, r6
 800deb6:	f002 fee8 	bl	8010c8a <__malloc_unlock>
 800deba:	e7e4      	b.n	800de86 <_malloc_r+0x1e>
 800debc:	680b      	ldr	r3, [r1, #0]
 800debe:	1b5b      	subs	r3, r3, r5
 800dec0:	d418      	bmi.n	800def4 <_malloc_r+0x8c>
 800dec2:	2b0b      	cmp	r3, #11
 800dec4:	d90f      	bls.n	800dee6 <_malloc_r+0x7e>
 800dec6:	600b      	str	r3, [r1, #0]
 800dec8:	50cd      	str	r5, [r1, r3]
 800deca:	18cc      	adds	r4, r1, r3
 800decc:	4630      	mov	r0, r6
 800dece:	f002 fedc 	bl	8010c8a <__malloc_unlock>
 800ded2:	f104 000b 	add.w	r0, r4, #11
 800ded6:	1d23      	adds	r3, r4, #4
 800ded8:	f020 0007 	bic.w	r0, r0, #7
 800dedc:	1ac3      	subs	r3, r0, r3
 800dede:	d0d3      	beq.n	800de88 <_malloc_r+0x20>
 800dee0:	425a      	negs	r2, r3
 800dee2:	50e2      	str	r2, [r4, r3]
 800dee4:	e7d0      	b.n	800de88 <_malloc_r+0x20>
 800dee6:	428c      	cmp	r4, r1
 800dee8:	684b      	ldr	r3, [r1, #4]
 800deea:	bf16      	itet	ne
 800deec:	6063      	strne	r3, [r4, #4]
 800deee:	6013      	streq	r3, [r2, #0]
 800def0:	460c      	movne	r4, r1
 800def2:	e7eb      	b.n	800decc <_malloc_r+0x64>
 800def4:	460c      	mov	r4, r1
 800def6:	6849      	ldr	r1, [r1, #4]
 800def8:	e7cc      	b.n	800de94 <_malloc_r+0x2c>
 800defa:	1cc4      	adds	r4, r0, #3
 800defc:	f024 0403 	bic.w	r4, r4, #3
 800df00:	42a0      	cmp	r0, r4
 800df02:	d005      	beq.n	800df10 <_malloc_r+0xa8>
 800df04:	1a21      	subs	r1, r4, r0
 800df06:	4630      	mov	r0, r6
 800df08:	f000 fe46 	bl	800eb98 <_sbrk_r>
 800df0c:	3001      	adds	r0, #1
 800df0e:	d0cf      	beq.n	800deb0 <_malloc_r+0x48>
 800df10:	6025      	str	r5, [r4, #0]
 800df12:	e7db      	b.n	800decc <_malloc_r+0x64>
 800df14:	20000994 	.word	0x20000994
 800df18:	20000998 	.word	0x20000998

0800df1c <__cvt>:
 800df1c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800df20:	ec55 4b10 	vmov	r4, r5, d0
 800df24:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 800df26:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800df2a:	2d00      	cmp	r5, #0
 800df2c:	460e      	mov	r6, r1
 800df2e:	4691      	mov	r9, r2
 800df30:	4619      	mov	r1, r3
 800df32:	bfb8      	it	lt
 800df34:	4622      	movlt	r2, r4
 800df36:	462b      	mov	r3, r5
 800df38:	f027 0720 	bic.w	r7, r7, #32
 800df3c:	bfbb      	ittet	lt
 800df3e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800df42:	461d      	movlt	r5, r3
 800df44:	2300      	movge	r3, #0
 800df46:	232d      	movlt	r3, #45	; 0x2d
 800df48:	bfb8      	it	lt
 800df4a:	4614      	movlt	r4, r2
 800df4c:	2f46      	cmp	r7, #70	; 0x46
 800df4e:	700b      	strb	r3, [r1, #0]
 800df50:	d004      	beq.n	800df5c <__cvt+0x40>
 800df52:	2f45      	cmp	r7, #69	; 0x45
 800df54:	d100      	bne.n	800df58 <__cvt+0x3c>
 800df56:	3601      	adds	r6, #1
 800df58:	2102      	movs	r1, #2
 800df5a:	e000      	b.n	800df5e <__cvt+0x42>
 800df5c:	2103      	movs	r1, #3
 800df5e:	ab03      	add	r3, sp, #12
 800df60:	9301      	str	r3, [sp, #4]
 800df62:	ab02      	add	r3, sp, #8
 800df64:	9300      	str	r3, [sp, #0]
 800df66:	4632      	mov	r2, r6
 800df68:	4653      	mov	r3, sl
 800df6a:	ec45 4b10 	vmov	d0, r4, r5
 800df6e:	f001 fd87 	bl	800fa80 <_dtoa_r>
 800df72:	2f47      	cmp	r7, #71	; 0x47
 800df74:	4680      	mov	r8, r0
 800df76:	d102      	bne.n	800df7e <__cvt+0x62>
 800df78:	f019 0f01 	tst.w	r9, #1
 800df7c:	d026      	beq.n	800dfcc <__cvt+0xb0>
 800df7e:	2f46      	cmp	r7, #70	; 0x46
 800df80:	eb08 0906 	add.w	r9, r8, r6
 800df84:	d111      	bne.n	800dfaa <__cvt+0x8e>
 800df86:	f898 3000 	ldrb.w	r3, [r8]
 800df8a:	2b30      	cmp	r3, #48	; 0x30
 800df8c:	d10a      	bne.n	800dfa4 <__cvt+0x88>
 800df8e:	2200      	movs	r2, #0
 800df90:	2300      	movs	r3, #0
 800df92:	4620      	mov	r0, r4
 800df94:	4629      	mov	r1, r5
 800df96:	f7f2 fd97 	bl	8000ac8 <__aeabi_dcmpeq>
 800df9a:	b918      	cbnz	r0, 800dfa4 <__cvt+0x88>
 800df9c:	f1c6 0601 	rsb	r6, r6, #1
 800dfa0:	f8ca 6000 	str.w	r6, [sl]
 800dfa4:	f8da 3000 	ldr.w	r3, [sl]
 800dfa8:	4499      	add	r9, r3
 800dfaa:	2200      	movs	r2, #0
 800dfac:	2300      	movs	r3, #0
 800dfae:	4620      	mov	r0, r4
 800dfb0:	4629      	mov	r1, r5
 800dfb2:	f7f2 fd89 	bl	8000ac8 <__aeabi_dcmpeq>
 800dfb6:	b938      	cbnz	r0, 800dfc8 <__cvt+0xac>
 800dfb8:	2230      	movs	r2, #48	; 0x30
 800dfba:	9b03      	ldr	r3, [sp, #12]
 800dfbc:	454b      	cmp	r3, r9
 800dfbe:	d205      	bcs.n	800dfcc <__cvt+0xb0>
 800dfc0:	1c59      	adds	r1, r3, #1
 800dfc2:	9103      	str	r1, [sp, #12]
 800dfc4:	701a      	strb	r2, [r3, #0]
 800dfc6:	e7f8      	b.n	800dfba <__cvt+0x9e>
 800dfc8:	f8cd 900c 	str.w	r9, [sp, #12]
 800dfcc:	9b03      	ldr	r3, [sp, #12]
 800dfce:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800dfd0:	eba3 0308 	sub.w	r3, r3, r8
 800dfd4:	4640      	mov	r0, r8
 800dfd6:	6013      	str	r3, [r2, #0]
 800dfd8:	b004      	add	sp, #16
 800dfda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800dfde <__exponent>:
 800dfde:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800dfe0:	2900      	cmp	r1, #0
 800dfe2:	4604      	mov	r4, r0
 800dfe4:	bfba      	itte	lt
 800dfe6:	4249      	neglt	r1, r1
 800dfe8:	232d      	movlt	r3, #45	; 0x2d
 800dfea:	232b      	movge	r3, #43	; 0x2b
 800dfec:	2909      	cmp	r1, #9
 800dfee:	f804 2b02 	strb.w	r2, [r4], #2
 800dff2:	7043      	strb	r3, [r0, #1]
 800dff4:	dd20      	ble.n	800e038 <__exponent+0x5a>
 800dff6:	f10d 0307 	add.w	r3, sp, #7
 800dffa:	461f      	mov	r7, r3
 800dffc:	260a      	movs	r6, #10
 800dffe:	fb91 f5f6 	sdiv	r5, r1, r6
 800e002:	fb06 1115 	mls	r1, r6, r5, r1
 800e006:	3130      	adds	r1, #48	; 0x30
 800e008:	2d09      	cmp	r5, #9
 800e00a:	f803 1c01 	strb.w	r1, [r3, #-1]
 800e00e:	f103 32ff 	add.w	r2, r3, #4294967295
 800e012:	4629      	mov	r1, r5
 800e014:	dc09      	bgt.n	800e02a <__exponent+0x4c>
 800e016:	3130      	adds	r1, #48	; 0x30
 800e018:	3b02      	subs	r3, #2
 800e01a:	f802 1c01 	strb.w	r1, [r2, #-1]
 800e01e:	42bb      	cmp	r3, r7
 800e020:	4622      	mov	r2, r4
 800e022:	d304      	bcc.n	800e02e <__exponent+0x50>
 800e024:	1a10      	subs	r0, r2, r0
 800e026:	b003      	add	sp, #12
 800e028:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e02a:	4613      	mov	r3, r2
 800e02c:	e7e7      	b.n	800dffe <__exponent+0x20>
 800e02e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e032:	f804 2b01 	strb.w	r2, [r4], #1
 800e036:	e7f2      	b.n	800e01e <__exponent+0x40>
 800e038:	2330      	movs	r3, #48	; 0x30
 800e03a:	4419      	add	r1, r3
 800e03c:	7083      	strb	r3, [r0, #2]
 800e03e:	1d02      	adds	r2, r0, #4
 800e040:	70c1      	strb	r1, [r0, #3]
 800e042:	e7ef      	b.n	800e024 <__exponent+0x46>

0800e044 <_printf_float>:
 800e044:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e048:	b08d      	sub	sp, #52	; 0x34
 800e04a:	460c      	mov	r4, r1
 800e04c:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 800e050:	4616      	mov	r6, r2
 800e052:	461f      	mov	r7, r3
 800e054:	4605      	mov	r5, r0
 800e056:	f002 fdf7 	bl	8010c48 <_localeconv_r>
 800e05a:	6803      	ldr	r3, [r0, #0]
 800e05c:	9304      	str	r3, [sp, #16]
 800e05e:	4618      	mov	r0, r3
 800e060:	f7f2 f8b6 	bl	80001d0 <strlen>
 800e064:	2300      	movs	r3, #0
 800e066:	930a      	str	r3, [sp, #40]	; 0x28
 800e068:	f8d8 3000 	ldr.w	r3, [r8]
 800e06c:	9005      	str	r0, [sp, #20]
 800e06e:	3307      	adds	r3, #7
 800e070:	f023 0307 	bic.w	r3, r3, #7
 800e074:	f103 0208 	add.w	r2, r3, #8
 800e078:	f894 a018 	ldrb.w	sl, [r4, #24]
 800e07c:	f8d4 b000 	ldr.w	fp, [r4]
 800e080:	f8c8 2000 	str.w	r2, [r8]
 800e084:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e088:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800e08c:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800e090:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800e094:	9307      	str	r3, [sp, #28]
 800e096:	f8cd 8018 	str.w	r8, [sp, #24]
 800e09a:	f04f 32ff 	mov.w	r2, #4294967295
 800e09e:	4ba7      	ldr	r3, [pc, #668]	; (800e33c <_printf_float+0x2f8>)
 800e0a0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e0a4:	f7f2 fd42 	bl	8000b2c <__aeabi_dcmpun>
 800e0a8:	bb70      	cbnz	r0, 800e108 <_printf_float+0xc4>
 800e0aa:	f04f 32ff 	mov.w	r2, #4294967295
 800e0ae:	4ba3      	ldr	r3, [pc, #652]	; (800e33c <_printf_float+0x2f8>)
 800e0b0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e0b4:	f7f2 fd1c 	bl	8000af0 <__aeabi_dcmple>
 800e0b8:	bb30      	cbnz	r0, 800e108 <_printf_float+0xc4>
 800e0ba:	2200      	movs	r2, #0
 800e0bc:	2300      	movs	r3, #0
 800e0be:	4640      	mov	r0, r8
 800e0c0:	4649      	mov	r1, r9
 800e0c2:	f7f2 fd0b 	bl	8000adc <__aeabi_dcmplt>
 800e0c6:	b110      	cbz	r0, 800e0ce <_printf_float+0x8a>
 800e0c8:	232d      	movs	r3, #45	; 0x2d
 800e0ca:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e0ce:	4a9c      	ldr	r2, [pc, #624]	; (800e340 <_printf_float+0x2fc>)
 800e0d0:	4b9c      	ldr	r3, [pc, #624]	; (800e344 <_printf_float+0x300>)
 800e0d2:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800e0d6:	bf8c      	ite	hi
 800e0d8:	4690      	movhi	r8, r2
 800e0da:	4698      	movls	r8, r3
 800e0dc:	2303      	movs	r3, #3
 800e0de:	f02b 0204 	bic.w	r2, fp, #4
 800e0e2:	6123      	str	r3, [r4, #16]
 800e0e4:	6022      	str	r2, [r4, #0]
 800e0e6:	f04f 0900 	mov.w	r9, #0
 800e0ea:	9700      	str	r7, [sp, #0]
 800e0ec:	4633      	mov	r3, r6
 800e0ee:	aa0b      	add	r2, sp, #44	; 0x2c
 800e0f0:	4621      	mov	r1, r4
 800e0f2:	4628      	mov	r0, r5
 800e0f4:	f000 f9e6 	bl	800e4c4 <_printf_common>
 800e0f8:	3001      	adds	r0, #1
 800e0fa:	f040 808d 	bne.w	800e218 <_printf_float+0x1d4>
 800e0fe:	f04f 30ff 	mov.w	r0, #4294967295
 800e102:	b00d      	add	sp, #52	; 0x34
 800e104:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e108:	4642      	mov	r2, r8
 800e10a:	464b      	mov	r3, r9
 800e10c:	4640      	mov	r0, r8
 800e10e:	4649      	mov	r1, r9
 800e110:	f7f2 fd0c 	bl	8000b2c <__aeabi_dcmpun>
 800e114:	b110      	cbz	r0, 800e11c <_printf_float+0xd8>
 800e116:	4a8c      	ldr	r2, [pc, #560]	; (800e348 <_printf_float+0x304>)
 800e118:	4b8c      	ldr	r3, [pc, #560]	; (800e34c <_printf_float+0x308>)
 800e11a:	e7da      	b.n	800e0d2 <_printf_float+0x8e>
 800e11c:	6861      	ldr	r1, [r4, #4]
 800e11e:	1c4b      	adds	r3, r1, #1
 800e120:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 800e124:	a80a      	add	r0, sp, #40	; 0x28
 800e126:	d13e      	bne.n	800e1a6 <_printf_float+0x162>
 800e128:	2306      	movs	r3, #6
 800e12a:	6063      	str	r3, [r4, #4]
 800e12c:	2300      	movs	r3, #0
 800e12e:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800e132:	ab09      	add	r3, sp, #36	; 0x24
 800e134:	9300      	str	r3, [sp, #0]
 800e136:	ec49 8b10 	vmov	d0, r8, r9
 800e13a:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800e13e:	6022      	str	r2, [r4, #0]
 800e140:	f8cd a004 	str.w	sl, [sp, #4]
 800e144:	6861      	ldr	r1, [r4, #4]
 800e146:	4628      	mov	r0, r5
 800e148:	f7ff fee8 	bl	800df1c <__cvt>
 800e14c:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 800e150:	2b47      	cmp	r3, #71	; 0x47
 800e152:	4680      	mov	r8, r0
 800e154:	d109      	bne.n	800e16a <_printf_float+0x126>
 800e156:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e158:	1cd8      	adds	r0, r3, #3
 800e15a:	db02      	blt.n	800e162 <_printf_float+0x11e>
 800e15c:	6862      	ldr	r2, [r4, #4]
 800e15e:	4293      	cmp	r3, r2
 800e160:	dd47      	ble.n	800e1f2 <_printf_float+0x1ae>
 800e162:	f1aa 0a02 	sub.w	sl, sl, #2
 800e166:	fa5f fa8a 	uxtb.w	sl, sl
 800e16a:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800e16e:	9909      	ldr	r1, [sp, #36]	; 0x24
 800e170:	d824      	bhi.n	800e1bc <_printf_float+0x178>
 800e172:	3901      	subs	r1, #1
 800e174:	4652      	mov	r2, sl
 800e176:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800e17a:	9109      	str	r1, [sp, #36]	; 0x24
 800e17c:	f7ff ff2f 	bl	800dfde <__exponent>
 800e180:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e182:	1813      	adds	r3, r2, r0
 800e184:	2a01      	cmp	r2, #1
 800e186:	4681      	mov	r9, r0
 800e188:	6123      	str	r3, [r4, #16]
 800e18a:	dc02      	bgt.n	800e192 <_printf_float+0x14e>
 800e18c:	6822      	ldr	r2, [r4, #0]
 800e18e:	07d1      	lsls	r1, r2, #31
 800e190:	d501      	bpl.n	800e196 <_printf_float+0x152>
 800e192:	3301      	adds	r3, #1
 800e194:	6123      	str	r3, [r4, #16]
 800e196:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800e19a:	2b00      	cmp	r3, #0
 800e19c:	d0a5      	beq.n	800e0ea <_printf_float+0xa6>
 800e19e:	232d      	movs	r3, #45	; 0x2d
 800e1a0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e1a4:	e7a1      	b.n	800e0ea <_printf_float+0xa6>
 800e1a6:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 800e1aa:	f000 8177 	beq.w	800e49c <_printf_float+0x458>
 800e1ae:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800e1b2:	d1bb      	bne.n	800e12c <_printf_float+0xe8>
 800e1b4:	2900      	cmp	r1, #0
 800e1b6:	d1b9      	bne.n	800e12c <_printf_float+0xe8>
 800e1b8:	2301      	movs	r3, #1
 800e1ba:	e7b6      	b.n	800e12a <_printf_float+0xe6>
 800e1bc:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 800e1c0:	d119      	bne.n	800e1f6 <_printf_float+0x1b2>
 800e1c2:	2900      	cmp	r1, #0
 800e1c4:	6863      	ldr	r3, [r4, #4]
 800e1c6:	dd0c      	ble.n	800e1e2 <_printf_float+0x19e>
 800e1c8:	6121      	str	r1, [r4, #16]
 800e1ca:	b913      	cbnz	r3, 800e1d2 <_printf_float+0x18e>
 800e1cc:	6822      	ldr	r2, [r4, #0]
 800e1ce:	07d2      	lsls	r2, r2, #31
 800e1d0:	d502      	bpl.n	800e1d8 <_printf_float+0x194>
 800e1d2:	3301      	adds	r3, #1
 800e1d4:	440b      	add	r3, r1
 800e1d6:	6123      	str	r3, [r4, #16]
 800e1d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e1da:	65a3      	str	r3, [r4, #88]	; 0x58
 800e1dc:	f04f 0900 	mov.w	r9, #0
 800e1e0:	e7d9      	b.n	800e196 <_printf_float+0x152>
 800e1e2:	b913      	cbnz	r3, 800e1ea <_printf_float+0x1a6>
 800e1e4:	6822      	ldr	r2, [r4, #0]
 800e1e6:	07d0      	lsls	r0, r2, #31
 800e1e8:	d501      	bpl.n	800e1ee <_printf_float+0x1aa>
 800e1ea:	3302      	adds	r3, #2
 800e1ec:	e7f3      	b.n	800e1d6 <_printf_float+0x192>
 800e1ee:	2301      	movs	r3, #1
 800e1f0:	e7f1      	b.n	800e1d6 <_printf_float+0x192>
 800e1f2:	f04f 0a67 	mov.w	sl, #103	; 0x67
 800e1f6:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800e1fa:	4293      	cmp	r3, r2
 800e1fc:	db05      	blt.n	800e20a <_printf_float+0x1c6>
 800e1fe:	6822      	ldr	r2, [r4, #0]
 800e200:	6123      	str	r3, [r4, #16]
 800e202:	07d1      	lsls	r1, r2, #31
 800e204:	d5e8      	bpl.n	800e1d8 <_printf_float+0x194>
 800e206:	3301      	adds	r3, #1
 800e208:	e7e5      	b.n	800e1d6 <_printf_float+0x192>
 800e20a:	2b00      	cmp	r3, #0
 800e20c:	bfd4      	ite	le
 800e20e:	f1c3 0302 	rsble	r3, r3, #2
 800e212:	2301      	movgt	r3, #1
 800e214:	4413      	add	r3, r2
 800e216:	e7de      	b.n	800e1d6 <_printf_float+0x192>
 800e218:	6823      	ldr	r3, [r4, #0]
 800e21a:	055a      	lsls	r2, r3, #21
 800e21c:	d407      	bmi.n	800e22e <_printf_float+0x1ea>
 800e21e:	6923      	ldr	r3, [r4, #16]
 800e220:	4642      	mov	r2, r8
 800e222:	4631      	mov	r1, r6
 800e224:	4628      	mov	r0, r5
 800e226:	47b8      	blx	r7
 800e228:	3001      	adds	r0, #1
 800e22a:	d12b      	bne.n	800e284 <_printf_float+0x240>
 800e22c:	e767      	b.n	800e0fe <_printf_float+0xba>
 800e22e:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800e232:	f240 80dc 	bls.w	800e3ee <_printf_float+0x3aa>
 800e236:	2200      	movs	r2, #0
 800e238:	2300      	movs	r3, #0
 800e23a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800e23e:	f7f2 fc43 	bl	8000ac8 <__aeabi_dcmpeq>
 800e242:	2800      	cmp	r0, #0
 800e244:	d033      	beq.n	800e2ae <_printf_float+0x26a>
 800e246:	2301      	movs	r3, #1
 800e248:	4a41      	ldr	r2, [pc, #260]	; (800e350 <_printf_float+0x30c>)
 800e24a:	4631      	mov	r1, r6
 800e24c:	4628      	mov	r0, r5
 800e24e:	47b8      	blx	r7
 800e250:	3001      	adds	r0, #1
 800e252:	f43f af54 	beq.w	800e0fe <_printf_float+0xba>
 800e256:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800e25a:	429a      	cmp	r2, r3
 800e25c:	db02      	blt.n	800e264 <_printf_float+0x220>
 800e25e:	6823      	ldr	r3, [r4, #0]
 800e260:	07d8      	lsls	r0, r3, #31
 800e262:	d50f      	bpl.n	800e284 <_printf_float+0x240>
 800e264:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e268:	4631      	mov	r1, r6
 800e26a:	4628      	mov	r0, r5
 800e26c:	47b8      	blx	r7
 800e26e:	3001      	adds	r0, #1
 800e270:	f43f af45 	beq.w	800e0fe <_printf_float+0xba>
 800e274:	f04f 0800 	mov.w	r8, #0
 800e278:	f104 091a 	add.w	r9, r4, #26
 800e27c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e27e:	3b01      	subs	r3, #1
 800e280:	4543      	cmp	r3, r8
 800e282:	dc09      	bgt.n	800e298 <_printf_float+0x254>
 800e284:	6823      	ldr	r3, [r4, #0]
 800e286:	079b      	lsls	r3, r3, #30
 800e288:	f100 8103 	bmi.w	800e492 <_printf_float+0x44e>
 800e28c:	68e0      	ldr	r0, [r4, #12]
 800e28e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e290:	4298      	cmp	r0, r3
 800e292:	bfb8      	it	lt
 800e294:	4618      	movlt	r0, r3
 800e296:	e734      	b.n	800e102 <_printf_float+0xbe>
 800e298:	2301      	movs	r3, #1
 800e29a:	464a      	mov	r2, r9
 800e29c:	4631      	mov	r1, r6
 800e29e:	4628      	mov	r0, r5
 800e2a0:	47b8      	blx	r7
 800e2a2:	3001      	adds	r0, #1
 800e2a4:	f43f af2b 	beq.w	800e0fe <_printf_float+0xba>
 800e2a8:	f108 0801 	add.w	r8, r8, #1
 800e2ac:	e7e6      	b.n	800e27c <_printf_float+0x238>
 800e2ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e2b0:	2b00      	cmp	r3, #0
 800e2b2:	dc2b      	bgt.n	800e30c <_printf_float+0x2c8>
 800e2b4:	2301      	movs	r3, #1
 800e2b6:	4a26      	ldr	r2, [pc, #152]	; (800e350 <_printf_float+0x30c>)
 800e2b8:	4631      	mov	r1, r6
 800e2ba:	4628      	mov	r0, r5
 800e2bc:	47b8      	blx	r7
 800e2be:	3001      	adds	r0, #1
 800e2c0:	f43f af1d 	beq.w	800e0fe <_printf_float+0xba>
 800e2c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e2c6:	b923      	cbnz	r3, 800e2d2 <_printf_float+0x28e>
 800e2c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e2ca:	b913      	cbnz	r3, 800e2d2 <_printf_float+0x28e>
 800e2cc:	6823      	ldr	r3, [r4, #0]
 800e2ce:	07d9      	lsls	r1, r3, #31
 800e2d0:	d5d8      	bpl.n	800e284 <_printf_float+0x240>
 800e2d2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e2d6:	4631      	mov	r1, r6
 800e2d8:	4628      	mov	r0, r5
 800e2da:	47b8      	blx	r7
 800e2dc:	3001      	adds	r0, #1
 800e2de:	f43f af0e 	beq.w	800e0fe <_printf_float+0xba>
 800e2e2:	f04f 0900 	mov.w	r9, #0
 800e2e6:	f104 0a1a 	add.w	sl, r4, #26
 800e2ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e2ec:	425b      	negs	r3, r3
 800e2ee:	454b      	cmp	r3, r9
 800e2f0:	dc01      	bgt.n	800e2f6 <_printf_float+0x2b2>
 800e2f2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e2f4:	e794      	b.n	800e220 <_printf_float+0x1dc>
 800e2f6:	2301      	movs	r3, #1
 800e2f8:	4652      	mov	r2, sl
 800e2fa:	4631      	mov	r1, r6
 800e2fc:	4628      	mov	r0, r5
 800e2fe:	47b8      	blx	r7
 800e300:	3001      	adds	r0, #1
 800e302:	f43f aefc 	beq.w	800e0fe <_printf_float+0xba>
 800e306:	f109 0901 	add.w	r9, r9, #1
 800e30a:	e7ee      	b.n	800e2ea <_printf_float+0x2a6>
 800e30c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e30e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800e310:	429a      	cmp	r2, r3
 800e312:	bfa8      	it	ge
 800e314:	461a      	movge	r2, r3
 800e316:	2a00      	cmp	r2, #0
 800e318:	4691      	mov	r9, r2
 800e31a:	dd07      	ble.n	800e32c <_printf_float+0x2e8>
 800e31c:	4613      	mov	r3, r2
 800e31e:	4631      	mov	r1, r6
 800e320:	4642      	mov	r2, r8
 800e322:	4628      	mov	r0, r5
 800e324:	47b8      	blx	r7
 800e326:	3001      	adds	r0, #1
 800e328:	f43f aee9 	beq.w	800e0fe <_printf_float+0xba>
 800e32c:	f104 031a 	add.w	r3, r4, #26
 800e330:	f04f 0b00 	mov.w	fp, #0
 800e334:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800e338:	9306      	str	r3, [sp, #24]
 800e33a:	e015      	b.n	800e368 <_printf_float+0x324>
 800e33c:	7fefffff 	.word	0x7fefffff
 800e340:	08012014 	.word	0x08012014
 800e344:	08012010 	.word	0x08012010
 800e348:	0801201c 	.word	0x0801201c
 800e34c:	08012018 	.word	0x08012018
 800e350:	08012020 	.word	0x08012020
 800e354:	2301      	movs	r3, #1
 800e356:	9a06      	ldr	r2, [sp, #24]
 800e358:	4631      	mov	r1, r6
 800e35a:	4628      	mov	r0, r5
 800e35c:	47b8      	blx	r7
 800e35e:	3001      	adds	r0, #1
 800e360:	f43f aecd 	beq.w	800e0fe <_printf_float+0xba>
 800e364:	f10b 0b01 	add.w	fp, fp, #1
 800e368:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 800e36c:	ebaa 0309 	sub.w	r3, sl, r9
 800e370:	455b      	cmp	r3, fp
 800e372:	dcef      	bgt.n	800e354 <_printf_float+0x310>
 800e374:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800e378:	429a      	cmp	r2, r3
 800e37a:	44d0      	add	r8, sl
 800e37c:	db15      	blt.n	800e3aa <_printf_float+0x366>
 800e37e:	6823      	ldr	r3, [r4, #0]
 800e380:	07da      	lsls	r2, r3, #31
 800e382:	d412      	bmi.n	800e3aa <_printf_float+0x366>
 800e384:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e386:	9909      	ldr	r1, [sp, #36]	; 0x24
 800e388:	eba3 020a 	sub.w	r2, r3, sl
 800e38c:	eba3 0a01 	sub.w	sl, r3, r1
 800e390:	4592      	cmp	sl, r2
 800e392:	bfa8      	it	ge
 800e394:	4692      	movge	sl, r2
 800e396:	f1ba 0f00 	cmp.w	sl, #0
 800e39a:	dc0e      	bgt.n	800e3ba <_printf_float+0x376>
 800e39c:	f04f 0800 	mov.w	r8, #0
 800e3a0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800e3a4:	f104 091a 	add.w	r9, r4, #26
 800e3a8:	e019      	b.n	800e3de <_printf_float+0x39a>
 800e3aa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e3ae:	4631      	mov	r1, r6
 800e3b0:	4628      	mov	r0, r5
 800e3b2:	47b8      	blx	r7
 800e3b4:	3001      	adds	r0, #1
 800e3b6:	d1e5      	bne.n	800e384 <_printf_float+0x340>
 800e3b8:	e6a1      	b.n	800e0fe <_printf_float+0xba>
 800e3ba:	4653      	mov	r3, sl
 800e3bc:	4642      	mov	r2, r8
 800e3be:	4631      	mov	r1, r6
 800e3c0:	4628      	mov	r0, r5
 800e3c2:	47b8      	blx	r7
 800e3c4:	3001      	adds	r0, #1
 800e3c6:	d1e9      	bne.n	800e39c <_printf_float+0x358>
 800e3c8:	e699      	b.n	800e0fe <_printf_float+0xba>
 800e3ca:	2301      	movs	r3, #1
 800e3cc:	464a      	mov	r2, r9
 800e3ce:	4631      	mov	r1, r6
 800e3d0:	4628      	mov	r0, r5
 800e3d2:	47b8      	blx	r7
 800e3d4:	3001      	adds	r0, #1
 800e3d6:	f43f ae92 	beq.w	800e0fe <_printf_float+0xba>
 800e3da:	f108 0801 	add.w	r8, r8, #1
 800e3de:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800e3e2:	1a9b      	subs	r3, r3, r2
 800e3e4:	eba3 030a 	sub.w	r3, r3, sl
 800e3e8:	4543      	cmp	r3, r8
 800e3ea:	dcee      	bgt.n	800e3ca <_printf_float+0x386>
 800e3ec:	e74a      	b.n	800e284 <_printf_float+0x240>
 800e3ee:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e3f0:	2a01      	cmp	r2, #1
 800e3f2:	dc01      	bgt.n	800e3f8 <_printf_float+0x3b4>
 800e3f4:	07db      	lsls	r3, r3, #31
 800e3f6:	d53a      	bpl.n	800e46e <_printf_float+0x42a>
 800e3f8:	2301      	movs	r3, #1
 800e3fa:	4642      	mov	r2, r8
 800e3fc:	4631      	mov	r1, r6
 800e3fe:	4628      	mov	r0, r5
 800e400:	47b8      	blx	r7
 800e402:	3001      	adds	r0, #1
 800e404:	f43f ae7b 	beq.w	800e0fe <_printf_float+0xba>
 800e408:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e40c:	4631      	mov	r1, r6
 800e40e:	4628      	mov	r0, r5
 800e410:	47b8      	blx	r7
 800e412:	3001      	adds	r0, #1
 800e414:	f108 0801 	add.w	r8, r8, #1
 800e418:	f43f ae71 	beq.w	800e0fe <_printf_float+0xba>
 800e41c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e41e:	2200      	movs	r2, #0
 800e420:	f103 3aff 	add.w	sl, r3, #4294967295
 800e424:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800e428:	2300      	movs	r3, #0
 800e42a:	f7f2 fb4d 	bl	8000ac8 <__aeabi_dcmpeq>
 800e42e:	b9c8      	cbnz	r0, 800e464 <_printf_float+0x420>
 800e430:	4653      	mov	r3, sl
 800e432:	4642      	mov	r2, r8
 800e434:	4631      	mov	r1, r6
 800e436:	4628      	mov	r0, r5
 800e438:	47b8      	blx	r7
 800e43a:	3001      	adds	r0, #1
 800e43c:	d10e      	bne.n	800e45c <_printf_float+0x418>
 800e43e:	e65e      	b.n	800e0fe <_printf_float+0xba>
 800e440:	2301      	movs	r3, #1
 800e442:	4652      	mov	r2, sl
 800e444:	4631      	mov	r1, r6
 800e446:	4628      	mov	r0, r5
 800e448:	47b8      	blx	r7
 800e44a:	3001      	adds	r0, #1
 800e44c:	f43f ae57 	beq.w	800e0fe <_printf_float+0xba>
 800e450:	f108 0801 	add.w	r8, r8, #1
 800e454:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e456:	3b01      	subs	r3, #1
 800e458:	4543      	cmp	r3, r8
 800e45a:	dcf1      	bgt.n	800e440 <_printf_float+0x3fc>
 800e45c:	464b      	mov	r3, r9
 800e45e:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800e462:	e6de      	b.n	800e222 <_printf_float+0x1de>
 800e464:	f04f 0800 	mov.w	r8, #0
 800e468:	f104 0a1a 	add.w	sl, r4, #26
 800e46c:	e7f2      	b.n	800e454 <_printf_float+0x410>
 800e46e:	2301      	movs	r3, #1
 800e470:	e7df      	b.n	800e432 <_printf_float+0x3ee>
 800e472:	2301      	movs	r3, #1
 800e474:	464a      	mov	r2, r9
 800e476:	4631      	mov	r1, r6
 800e478:	4628      	mov	r0, r5
 800e47a:	47b8      	blx	r7
 800e47c:	3001      	adds	r0, #1
 800e47e:	f43f ae3e 	beq.w	800e0fe <_printf_float+0xba>
 800e482:	f108 0801 	add.w	r8, r8, #1
 800e486:	68e3      	ldr	r3, [r4, #12]
 800e488:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800e48a:	1a9b      	subs	r3, r3, r2
 800e48c:	4543      	cmp	r3, r8
 800e48e:	dcf0      	bgt.n	800e472 <_printf_float+0x42e>
 800e490:	e6fc      	b.n	800e28c <_printf_float+0x248>
 800e492:	f04f 0800 	mov.w	r8, #0
 800e496:	f104 0919 	add.w	r9, r4, #25
 800e49a:	e7f4      	b.n	800e486 <_printf_float+0x442>
 800e49c:	2900      	cmp	r1, #0
 800e49e:	f43f ae8b 	beq.w	800e1b8 <_printf_float+0x174>
 800e4a2:	2300      	movs	r3, #0
 800e4a4:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800e4a8:	ab09      	add	r3, sp, #36	; 0x24
 800e4aa:	9300      	str	r3, [sp, #0]
 800e4ac:	ec49 8b10 	vmov	d0, r8, r9
 800e4b0:	6022      	str	r2, [r4, #0]
 800e4b2:	f8cd a004 	str.w	sl, [sp, #4]
 800e4b6:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800e4ba:	4628      	mov	r0, r5
 800e4bc:	f7ff fd2e 	bl	800df1c <__cvt>
 800e4c0:	4680      	mov	r8, r0
 800e4c2:	e648      	b.n	800e156 <_printf_float+0x112>

0800e4c4 <_printf_common>:
 800e4c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e4c8:	4691      	mov	r9, r2
 800e4ca:	461f      	mov	r7, r3
 800e4cc:	688a      	ldr	r2, [r1, #8]
 800e4ce:	690b      	ldr	r3, [r1, #16]
 800e4d0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800e4d4:	4293      	cmp	r3, r2
 800e4d6:	bfb8      	it	lt
 800e4d8:	4613      	movlt	r3, r2
 800e4da:	f8c9 3000 	str.w	r3, [r9]
 800e4de:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800e4e2:	4606      	mov	r6, r0
 800e4e4:	460c      	mov	r4, r1
 800e4e6:	b112      	cbz	r2, 800e4ee <_printf_common+0x2a>
 800e4e8:	3301      	adds	r3, #1
 800e4ea:	f8c9 3000 	str.w	r3, [r9]
 800e4ee:	6823      	ldr	r3, [r4, #0]
 800e4f0:	0699      	lsls	r1, r3, #26
 800e4f2:	bf42      	ittt	mi
 800e4f4:	f8d9 3000 	ldrmi.w	r3, [r9]
 800e4f8:	3302      	addmi	r3, #2
 800e4fa:	f8c9 3000 	strmi.w	r3, [r9]
 800e4fe:	6825      	ldr	r5, [r4, #0]
 800e500:	f015 0506 	ands.w	r5, r5, #6
 800e504:	d107      	bne.n	800e516 <_printf_common+0x52>
 800e506:	f104 0a19 	add.w	sl, r4, #25
 800e50a:	68e3      	ldr	r3, [r4, #12]
 800e50c:	f8d9 2000 	ldr.w	r2, [r9]
 800e510:	1a9b      	subs	r3, r3, r2
 800e512:	42ab      	cmp	r3, r5
 800e514:	dc28      	bgt.n	800e568 <_printf_common+0xa4>
 800e516:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800e51a:	6822      	ldr	r2, [r4, #0]
 800e51c:	3300      	adds	r3, #0
 800e51e:	bf18      	it	ne
 800e520:	2301      	movne	r3, #1
 800e522:	0692      	lsls	r2, r2, #26
 800e524:	d42d      	bmi.n	800e582 <_printf_common+0xbe>
 800e526:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800e52a:	4639      	mov	r1, r7
 800e52c:	4630      	mov	r0, r6
 800e52e:	47c0      	blx	r8
 800e530:	3001      	adds	r0, #1
 800e532:	d020      	beq.n	800e576 <_printf_common+0xb2>
 800e534:	6823      	ldr	r3, [r4, #0]
 800e536:	68e5      	ldr	r5, [r4, #12]
 800e538:	f8d9 2000 	ldr.w	r2, [r9]
 800e53c:	f003 0306 	and.w	r3, r3, #6
 800e540:	2b04      	cmp	r3, #4
 800e542:	bf08      	it	eq
 800e544:	1aad      	subeq	r5, r5, r2
 800e546:	68a3      	ldr	r3, [r4, #8]
 800e548:	6922      	ldr	r2, [r4, #16]
 800e54a:	bf0c      	ite	eq
 800e54c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800e550:	2500      	movne	r5, #0
 800e552:	4293      	cmp	r3, r2
 800e554:	bfc4      	itt	gt
 800e556:	1a9b      	subgt	r3, r3, r2
 800e558:	18ed      	addgt	r5, r5, r3
 800e55a:	f04f 0900 	mov.w	r9, #0
 800e55e:	341a      	adds	r4, #26
 800e560:	454d      	cmp	r5, r9
 800e562:	d11a      	bne.n	800e59a <_printf_common+0xd6>
 800e564:	2000      	movs	r0, #0
 800e566:	e008      	b.n	800e57a <_printf_common+0xb6>
 800e568:	2301      	movs	r3, #1
 800e56a:	4652      	mov	r2, sl
 800e56c:	4639      	mov	r1, r7
 800e56e:	4630      	mov	r0, r6
 800e570:	47c0      	blx	r8
 800e572:	3001      	adds	r0, #1
 800e574:	d103      	bne.n	800e57e <_printf_common+0xba>
 800e576:	f04f 30ff 	mov.w	r0, #4294967295
 800e57a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e57e:	3501      	adds	r5, #1
 800e580:	e7c3      	b.n	800e50a <_printf_common+0x46>
 800e582:	18e1      	adds	r1, r4, r3
 800e584:	1c5a      	adds	r2, r3, #1
 800e586:	2030      	movs	r0, #48	; 0x30
 800e588:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800e58c:	4422      	add	r2, r4
 800e58e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800e592:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800e596:	3302      	adds	r3, #2
 800e598:	e7c5      	b.n	800e526 <_printf_common+0x62>
 800e59a:	2301      	movs	r3, #1
 800e59c:	4622      	mov	r2, r4
 800e59e:	4639      	mov	r1, r7
 800e5a0:	4630      	mov	r0, r6
 800e5a2:	47c0      	blx	r8
 800e5a4:	3001      	adds	r0, #1
 800e5a6:	d0e6      	beq.n	800e576 <_printf_common+0xb2>
 800e5a8:	f109 0901 	add.w	r9, r9, #1
 800e5ac:	e7d8      	b.n	800e560 <_printf_common+0x9c>
	...

0800e5b0 <_printf_i>:
 800e5b0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e5b4:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800e5b8:	460c      	mov	r4, r1
 800e5ba:	7e09      	ldrb	r1, [r1, #24]
 800e5bc:	b085      	sub	sp, #20
 800e5be:	296e      	cmp	r1, #110	; 0x6e
 800e5c0:	4617      	mov	r7, r2
 800e5c2:	4606      	mov	r6, r0
 800e5c4:	4698      	mov	r8, r3
 800e5c6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800e5c8:	f000 80b3 	beq.w	800e732 <_printf_i+0x182>
 800e5cc:	d822      	bhi.n	800e614 <_printf_i+0x64>
 800e5ce:	2963      	cmp	r1, #99	; 0x63
 800e5d0:	d036      	beq.n	800e640 <_printf_i+0x90>
 800e5d2:	d80a      	bhi.n	800e5ea <_printf_i+0x3a>
 800e5d4:	2900      	cmp	r1, #0
 800e5d6:	f000 80b9 	beq.w	800e74c <_printf_i+0x19c>
 800e5da:	2958      	cmp	r1, #88	; 0x58
 800e5dc:	f000 8083 	beq.w	800e6e6 <_printf_i+0x136>
 800e5e0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800e5e4:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800e5e8:	e032      	b.n	800e650 <_printf_i+0xa0>
 800e5ea:	2964      	cmp	r1, #100	; 0x64
 800e5ec:	d001      	beq.n	800e5f2 <_printf_i+0x42>
 800e5ee:	2969      	cmp	r1, #105	; 0x69
 800e5f0:	d1f6      	bne.n	800e5e0 <_printf_i+0x30>
 800e5f2:	6820      	ldr	r0, [r4, #0]
 800e5f4:	6813      	ldr	r3, [r2, #0]
 800e5f6:	0605      	lsls	r5, r0, #24
 800e5f8:	f103 0104 	add.w	r1, r3, #4
 800e5fc:	d52a      	bpl.n	800e654 <_printf_i+0xa4>
 800e5fe:	681b      	ldr	r3, [r3, #0]
 800e600:	6011      	str	r1, [r2, #0]
 800e602:	2b00      	cmp	r3, #0
 800e604:	da03      	bge.n	800e60e <_printf_i+0x5e>
 800e606:	222d      	movs	r2, #45	; 0x2d
 800e608:	425b      	negs	r3, r3
 800e60a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800e60e:	486f      	ldr	r0, [pc, #444]	; (800e7cc <_printf_i+0x21c>)
 800e610:	220a      	movs	r2, #10
 800e612:	e039      	b.n	800e688 <_printf_i+0xd8>
 800e614:	2973      	cmp	r1, #115	; 0x73
 800e616:	f000 809d 	beq.w	800e754 <_printf_i+0x1a4>
 800e61a:	d808      	bhi.n	800e62e <_printf_i+0x7e>
 800e61c:	296f      	cmp	r1, #111	; 0x6f
 800e61e:	d020      	beq.n	800e662 <_printf_i+0xb2>
 800e620:	2970      	cmp	r1, #112	; 0x70
 800e622:	d1dd      	bne.n	800e5e0 <_printf_i+0x30>
 800e624:	6823      	ldr	r3, [r4, #0]
 800e626:	f043 0320 	orr.w	r3, r3, #32
 800e62a:	6023      	str	r3, [r4, #0]
 800e62c:	e003      	b.n	800e636 <_printf_i+0x86>
 800e62e:	2975      	cmp	r1, #117	; 0x75
 800e630:	d017      	beq.n	800e662 <_printf_i+0xb2>
 800e632:	2978      	cmp	r1, #120	; 0x78
 800e634:	d1d4      	bne.n	800e5e0 <_printf_i+0x30>
 800e636:	2378      	movs	r3, #120	; 0x78
 800e638:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800e63c:	4864      	ldr	r0, [pc, #400]	; (800e7d0 <_printf_i+0x220>)
 800e63e:	e055      	b.n	800e6ec <_printf_i+0x13c>
 800e640:	6813      	ldr	r3, [r2, #0]
 800e642:	1d19      	adds	r1, r3, #4
 800e644:	681b      	ldr	r3, [r3, #0]
 800e646:	6011      	str	r1, [r2, #0]
 800e648:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800e64c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800e650:	2301      	movs	r3, #1
 800e652:	e08c      	b.n	800e76e <_printf_i+0x1be>
 800e654:	681b      	ldr	r3, [r3, #0]
 800e656:	6011      	str	r1, [r2, #0]
 800e658:	f010 0f40 	tst.w	r0, #64	; 0x40
 800e65c:	bf18      	it	ne
 800e65e:	b21b      	sxthne	r3, r3
 800e660:	e7cf      	b.n	800e602 <_printf_i+0x52>
 800e662:	6813      	ldr	r3, [r2, #0]
 800e664:	6825      	ldr	r5, [r4, #0]
 800e666:	1d18      	adds	r0, r3, #4
 800e668:	6010      	str	r0, [r2, #0]
 800e66a:	0628      	lsls	r0, r5, #24
 800e66c:	d501      	bpl.n	800e672 <_printf_i+0xc2>
 800e66e:	681b      	ldr	r3, [r3, #0]
 800e670:	e002      	b.n	800e678 <_printf_i+0xc8>
 800e672:	0668      	lsls	r0, r5, #25
 800e674:	d5fb      	bpl.n	800e66e <_printf_i+0xbe>
 800e676:	881b      	ldrh	r3, [r3, #0]
 800e678:	4854      	ldr	r0, [pc, #336]	; (800e7cc <_printf_i+0x21c>)
 800e67a:	296f      	cmp	r1, #111	; 0x6f
 800e67c:	bf14      	ite	ne
 800e67e:	220a      	movne	r2, #10
 800e680:	2208      	moveq	r2, #8
 800e682:	2100      	movs	r1, #0
 800e684:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800e688:	6865      	ldr	r5, [r4, #4]
 800e68a:	60a5      	str	r5, [r4, #8]
 800e68c:	2d00      	cmp	r5, #0
 800e68e:	f2c0 8095 	blt.w	800e7bc <_printf_i+0x20c>
 800e692:	6821      	ldr	r1, [r4, #0]
 800e694:	f021 0104 	bic.w	r1, r1, #4
 800e698:	6021      	str	r1, [r4, #0]
 800e69a:	2b00      	cmp	r3, #0
 800e69c:	d13d      	bne.n	800e71a <_printf_i+0x16a>
 800e69e:	2d00      	cmp	r5, #0
 800e6a0:	f040 808e 	bne.w	800e7c0 <_printf_i+0x210>
 800e6a4:	4665      	mov	r5, ip
 800e6a6:	2a08      	cmp	r2, #8
 800e6a8:	d10b      	bne.n	800e6c2 <_printf_i+0x112>
 800e6aa:	6823      	ldr	r3, [r4, #0]
 800e6ac:	07db      	lsls	r3, r3, #31
 800e6ae:	d508      	bpl.n	800e6c2 <_printf_i+0x112>
 800e6b0:	6923      	ldr	r3, [r4, #16]
 800e6b2:	6862      	ldr	r2, [r4, #4]
 800e6b4:	429a      	cmp	r2, r3
 800e6b6:	bfde      	ittt	le
 800e6b8:	2330      	movle	r3, #48	; 0x30
 800e6ba:	f805 3c01 	strble.w	r3, [r5, #-1]
 800e6be:	f105 35ff 	addle.w	r5, r5, #4294967295
 800e6c2:	ebac 0305 	sub.w	r3, ip, r5
 800e6c6:	6123      	str	r3, [r4, #16]
 800e6c8:	f8cd 8000 	str.w	r8, [sp]
 800e6cc:	463b      	mov	r3, r7
 800e6ce:	aa03      	add	r2, sp, #12
 800e6d0:	4621      	mov	r1, r4
 800e6d2:	4630      	mov	r0, r6
 800e6d4:	f7ff fef6 	bl	800e4c4 <_printf_common>
 800e6d8:	3001      	adds	r0, #1
 800e6da:	d14d      	bne.n	800e778 <_printf_i+0x1c8>
 800e6dc:	f04f 30ff 	mov.w	r0, #4294967295
 800e6e0:	b005      	add	sp, #20
 800e6e2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e6e6:	4839      	ldr	r0, [pc, #228]	; (800e7cc <_printf_i+0x21c>)
 800e6e8:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800e6ec:	6813      	ldr	r3, [r2, #0]
 800e6ee:	6821      	ldr	r1, [r4, #0]
 800e6f0:	1d1d      	adds	r5, r3, #4
 800e6f2:	681b      	ldr	r3, [r3, #0]
 800e6f4:	6015      	str	r5, [r2, #0]
 800e6f6:	060a      	lsls	r2, r1, #24
 800e6f8:	d50b      	bpl.n	800e712 <_printf_i+0x162>
 800e6fa:	07ca      	lsls	r2, r1, #31
 800e6fc:	bf44      	itt	mi
 800e6fe:	f041 0120 	orrmi.w	r1, r1, #32
 800e702:	6021      	strmi	r1, [r4, #0]
 800e704:	b91b      	cbnz	r3, 800e70e <_printf_i+0x15e>
 800e706:	6822      	ldr	r2, [r4, #0]
 800e708:	f022 0220 	bic.w	r2, r2, #32
 800e70c:	6022      	str	r2, [r4, #0]
 800e70e:	2210      	movs	r2, #16
 800e710:	e7b7      	b.n	800e682 <_printf_i+0xd2>
 800e712:	064d      	lsls	r5, r1, #25
 800e714:	bf48      	it	mi
 800e716:	b29b      	uxthmi	r3, r3
 800e718:	e7ef      	b.n	800e6fa <_printf_i+0x14a>
 800e71a:	4665      	mov	r5, ip
 800e71c:	fbb3 f1f2 	udiv	r1, r3, r2
 800e720:	fb02 3311 	mls	r3, r2, r1, r3
 800e724:	5cc3      	ldrb	r3, [r0, r3]
 800e726:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800e72a:	460b      	mov	r3, r1
 800e72c:	2900      	cmp	r1, #0
 800e72e:	d1f5      	bne.n	800e71c <_printf_i+0x16c>
 800e730:	e7b9      	b.n	800e6a6 <_printf_i+0xf6>
 800e732:	6813      	ldr	r3, [r2, #0]
 800e734:	6825      	ldr	r5, [r4, #0]
 800e736:	6961      	ldr	r1, [r4, #20]
 800e738:	1d18      	adds	r0, r3, #4
 800e73a:	6010      	str	r0, [r2, #0]
 800e73c:	0628      	lsls	r0, r5, #24
 800e73e:	681b      	ldr	r3, [r3, #0]
 800e740:	d501      	bpl.n	800e746 <_printf_i+0x196>
 800e742:	6019      	str	r1, [r3, #0]
 800e744:	e002      	b.n	800e74c <_printf_i+0x19c>
 800e746:	066a      	lsls	r2, r5, #25
 800e748:	d5fb      	bpl.n	800e742 <_printf_i+0x192>
 800e74a:	8019      	strh	r1, [r3, #0]
 800e74c:	2300      	movs	r3, #0
 800e74e:	6123      	str	r3, [r4, #16]
 800e750:	4665      	mov	r5, ip
 800e752:	e7b9      	b.n	800e6c8 <_printf_i+0x118>
 800e754:	6813      	ldr	r3, [r2, #0]
 800e756:	1d19      	adds	r1, r3, #4
 800e758:	6011      	str	r1, [r2, #0]
 800e75a:	681d      	ldr	r5, [r3, #0]
 800e75c:	6862      	ldr	r2, [r4, #4]
 800e75e:	2100      	movs	r1, #0
 800e760:	4628      	mov	r0, r5
 800e762:	f7f1 fd3d 	bl	80001e0 <memchr>
 800e766:	b108      	cbz	r0, 800e76c <_printf_i+0x1bc>
 800e768:	1b40      	subs	r0, r0, r5
 800e76a:	6060      	str	r0, [r4, #4]
 800e76c:	6863      	ldr	r3, [r4, #4]
 800e76e:	6123      	str	r3, [r4, #16]
 800e770:	2300      	movs	r3, #0
 800e772:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e776:	e7a7      	b.n	800e6c8 <_printf_i+0x118>
 800e778:	6923      	ldr	r3, [r4, #16]
 800e77a:	462a      	mov	r2, r5
 800e77c:	4639      	mov	r1, r7
 800e77e:	4630      	mov	r0, r6
 800e780:	47c0      	blx	r8
 800e782:	3001      	adds	r0, #1
 800e784:	d0aa      	beq.n	800e6dc <_printf_i+0x12c>
 800e786:	6823      	ldr	r3, [r4, #0]
 800e788:	079b      	lsls	r3, r3, #30
 800e78a:	d413      	bmi.n	800e7b4 <_printf_i+0x204>
 800e78c:	68e0      	ldr	r0, [r4, #12]
 800e78e:	9b03      	ldr	r3, [sp, #12]
 800e790:	4298      	cmp	r0, r3
 800e792:	bfb8      	it	lt
 800e794:	4618      	movlt	r0, r3
 800e796:	e7a3      	b.n	800e6e0 <_printf_i+0x130>
 800e798:	2301      	movs	r3, #1
 800e79a:	464a      	mov	r2, r9
 800e79c:	4639      	mov	r1, r7
 800e79e:	4630      	mov	r0, r6
 800e7a0:	47c0      	blx	r8
 800e7a2:	3001      	adds	r0, #1
 800e7a4:	d09a      	beq.n	800e6dc <_printf_i+0x12c>
 800e7a6:	3501      	adds	r5, #1
 800e7a8:	68e3      	ldr	r3, [r4, #12]
 800e7aa:	9a03      	ldr	r2, [sp, #12]
 800e7ac:	1a9b      	subs	r3, r3, r2
 800e7ae:	42ab      	cmp	r3, r5
 800e7b0:	dcf2      	bgt.n	800e798 <_printf_i+0x1e8>
 800e7b2:	e7eb      	b.n	800e78c <_printf_i+0x1dc>
 800e7b4:	2500      	movs	r5, #0
 800e7b6:	f104 0919 	add.w	r9, r4, #25
 800e7ba:	e7f5      	b.n	800e7a8 <_printf_i+0x1f8>
 800e7bc:	2b00      	cmp	r3, #0
 800e7be:	d1ac      	bne.n	800e71a <_printf_i+0x16a>
 800e7c0:	7803      	ldrb	r3, [r0, #0]
 800e7c2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800e7c6:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800e7ca:	e76c      	b.n	800e6a6 <_printf_i+0xf6>
 800e7cc:	08012022 	.word	0x08012022
 800e7d0:	08012033 	.word	0x08012033

0800e7d4 <_scanf_float>:
 800e7d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e7d8:	469a      	mov	sl, r3
 800e7da:	688b      	ldr	r3, [r1, #8]
 800e7dc:	4616      	mov	r6, r2
 800e7de:	1e5a      	subs	r2, r3, #1
 800e7e0:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800e7e4:	b087      	sub	sp, #28
 800e7e6:	bf83      	ittte	hi
 800e7e8:	f46f 72ae 	mvnhi.w	r2, #348	; 0x15c
 800e7ec:	189b      	addhi	r3, r3, r2
 800e7ee:	9301      	strhi	r3, [sp, #4]
 800e7f0:	2300      	movls	r3, #0
 800e7f2:	bf86      	itte	hi
 800e7f4:	f240 135d 	movwhi	r3, #349	; 0x15d
 800e7f8:	608b      	strhi	r3, [r1, #8]
 800e7fa:	9301      	strls	r3, [sp, #4]
 800e7fc:	680b      	ldr	r3, [r1, #0]
 800e7fe:	4688      	mov	r8, r1
 800e800:	f04f 0b00 	mov.w	fp, #0
 800e804:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800e808:	f848 3b1c 	str.w	r3, [r8], #28
 800e80c:	e9cd bb03 	strd	fp, fp, [sp, #12]
 800e810:	4607      	mov	r7, r0
 800e812:	460c      	mov	r4, r1
 800e814:	4645      	mov	r5, r8
 800e816:	465a      	mov	r2, fp
 800e818:	46d9      	mov	r9, fp
 800e81a:	f8cd b008 	str.w	fp, [sp, #8]
 800e81e:	68a1      	ldr	r1, [r4, #8]
 800e820:	b181      	cbz	r1, 800e844 <_scanf_float+0x70>
 800e822:	6833      	ldr	r3, [r6, #0]
 800e824:	781b      	ldrb	r3, [r3, #0]
 800e826:	2b49      	cmp	r3, #73	; 0x49
 800e828:	d071      	beq.n	800e90e <_scanf_float+0x13a>
 800e82a:	d84d      	bhi.n	800e8c8 <_scanf_float+0xf4>
 800e82c:	2b39      	cmp	r3, #57	; 0x39
 800e82e:	d840      	bhi.n	800e8b2 <_scanf_float+0xde>
 800e830:	2b31      	cmp	r3, #49	; 0x31
 800e832:	f080 8088 	bcs.w	800e946 <_scanf_float+0x172>
 800e836:	2b2d      	cmp	r3, #45	; 0x2d
 800e838:	f000 8090 	beq.w	800e95c <_scanf_float+0x188>
 800e83c:	d815      	bhi.n	800e86a <_scanf_float+0x96>
 800e83e:	2b2b      	cmp	r3, #43	; 0x2b
 800e840:	f000 808c 	beq.w	800e95c <_scanf_float+0x188>
 800e844:	f1b9 0f00 	cmp.w	r9, #0
 800e848:	d003      	beq.n	800e852 <_scanf_float+0x7e>
 800e84a:	6823      	ldr	r3, [r4, #0]
 800e84c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800e850:	6023      	str	r3, [r4, #0]
 800e852:	3a01      	subs	r2, #1
 800e854:	2a01      	cmp	r2, #1
 800e856:	f200 80ea 	bhi.w	800ea2e <_scanf_float+0x25a>
 800e85a:	4545      	cmp	r5, r8
 800e85c:	f200 80dc 	bhi.w	800ea18 <_scanf_float+0x244>
 800e860:	2601      	movs	r6, #1
 800e862:	4630      	mov	r0, r6
 800e864:	b007      	add	sp, #28
 800e866:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e86a:	2b2e      	cmp	r3, #46	; 0x2e
 800e86c:	f000 809f 	beq.w	800e9ae <_scanf_float+0x1da>
 800e870:	2b30      	cmp	r3, #48	; 0x30
 800e872:	d1e7      	bne.n	800e844 <_scanf_float+0x70>
 800e874:	6820      	ldr	r0, [r4, #0]
 800e876:	f410 7f80 	tst.w	r0, #256	; 0x100
 800e87a:	d064      	beq.n	800e946 <_scanf_float+0x172>
 800e87c:	9b01      	ldr	r3, [sp, #4]
 800e87e:	f020 0080 	bic.w	r0, r0, #128	; 0x80
 800e882:	6020      	str	r0, [r4, #0]
 800e884:	f109 0901 	add.w	r9, r9, #1
 800e888:	b11b      	cbz	r3, 800e892 <_scanf_float+0xbe>
 800e88a:	3b01      	subs	r3, #1
 800e88c:	3101      	adds	r1, #1
 800e88e:	9301      	str	r3, [sp, #4]
 800e890:	60a1      	str	r1, [r4, #8]
 800e892:	68a3      	ldr	r3, [r4, #8]
 800e894:	3b01      	subs	r3, #1
 800e896:	60a3      	str	r3, [r4, #8]
 800e898:	6923      	ldr	r3, [r4, #16]
 800e89a:	3301      	adds	r3, #1
 800e89c:	6123      	str	r3, [r4, #16]
 800e89e:	6873      	ldr	r3, [r6, #4]
 800e8a0:	3b01      	subs	r3, #1
 800e8a2:	2b00      	cmp	r3, #0
 800e8a4:	6073      	str	r3, [r6, #4]
 800e8a6:	f340 80ac 	ble.w	800ea02 <_scanf_float+0x22e>
 800e8aa:	6833      	ldr	r3, [r6, #0]
 800e8ac:	3301      	adds	r3, #1
 800e8ae:	6033      	str	r3, [r6, #0]
 800e8b0:	e7b5      	b.n	800e81e <_scanf_float+0x4a>
 800e8b2:	2b45      	cmp	r3, #69	; 0x45
 800e8b4:	f000 8085 	beq.w	800e9c2 <_scanf_float+0x1ee>
 800e8b8:	2b46      	cmp	r3, #70	; 0x46
 800e8ba:	d06a      	beq.n	800e992 <_scanf_float+0x1be>
 800e8bc:	2b41      	cmp	r3, #65	; 0x41
 800e8be:	d1c1      	bne.n	800e844 <_scanf_float+0x70>
 800e8c0:	2a01      	cmp	r2, #1
 800e8c2:	d1bf      	bne.n	800e844 <_scanf_float+0x70>
 800e8c4:	2202      	movs	r2, #2
 800e8c6:	e046      	b.n	800e956 <_scanf_float+0x182>
 800e8c8:	2b65      	cmp	r3, #101	; 0x65
 800e8ca:	d07a      	beq.n	800e9c2 <_scanf_float+0x1ee>
 800e8cc:	d818      	bhi.n	800e900 <_scanf_float+0x12c>
 800e8ce:	2b54      	cmp	r3, #84	; 0x54
 800e8d0:	d066      	beq.n	800e9a0 <_scanf_float+0x1cc>
 800e8d2:	d811      	bhi.n	800e8f8 <_scanf_float+0x124>
 800e8d4:	2b4e      	cmp	r3, #78	; 0x4e
 800e8d6:	d1b5      	bne.n	800e844 <_scanf_float+0x70>
 800e8d8:	2a00      	cmp	r2, #0
 800e8da:	d146      	bne.n	800e96a <_scanf_float+0x196>
 800e8dc:	f1b9 0f00 	cmp.w	r9, #0
 800e8e0:	d145      	bne.n	800e96e <_scanf_float+0x19a>
 800e8e2:	6821      	ldr	r1, [r4, #0]
 800e8e4:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 800e8e8:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 800e8ec:	d13f      	bne.n	800e96e <_scanf_float+0x19a>
 800e8ee:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 800e8f2:	6021      	str	r1, [r4, #0]
 800e8f4:	2201      	movs	r2, #1
 800e8f6:	e02e      	b.n	800e956 <_scanf_float+0x182>
 800e8f8:	2b59      	cmp	r3, #89	; 0x59
 800e8fa:	d01e      	beq.n	800e93a <_scanf_float+0x166>
 800e8fc:	2b61      	cmp	r3, #97	; 0x61
 800e8fe:	e7de      	b.n	800e8be <_scanf_float+0xea>
 800e900:	2b6e      	cmp	r3, #110	; 0x6e
 800e902:	d0e9      	beq.n	800e8d8 <_scanf_float+0x104>
 800e904:	d815      	bhi.n	800e932 <_scanf_float+0x15e>
 800e906:	2b66      	cmp	r3, #102	; 0x66
 800e908:	d043      	beq.n	800e992 <_scanf_float+0x1be>
 800e90a:	2b69      	cmp	r3, #105	; 0x69
 800e90c:	d19a      	bne.n	800e844 <_scanf_float+0x70>
 800e90e:	f1bb 0f00 	cmp.w	fp, #0
 800e912:	d138      	bne.n	800e986 <_scanf_float+0x1b2>
 800e914:	f1b9 0f00 	cmp.w	r9, #0
 800e918:	d197      	bne.n	800e84a <_scanf_float+0x76>
 800e91a:	6821      	ldr	r1, [r4, #0]
 800e91c:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 800e920:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 800e924:	d195      	bne.n	800e852 <_scanf_float+0x7e>
 800e926:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 800e92a:	6021      	str	r1, [r4, #0]
 800e92c:	f04f 0b01 	mov.w	fp, #1
 800e930:	e011      	b.n	800e956 <_scanf_float+0x182>
 800e932:	2b74      	cmp	r3, #116	; 0x74
 800e934:	d034      	beq.n	800e9a0 <_scanf_float+0x1cc>
 800e936:	2b79      	cmp	r3, #121	; 0x79
 800e938:	d184      	bne.n	800e844 <_scanf_float+0x70>
 800e93a:	f1bb 0f07 	cmp.w	fp, #7
 800e93e:	d181      	bne.n	800e844 <_scanf_float+0x70>
 800e940:	f04f 0b08 	mov.w	fp, #8
 800e944:	e007      	b.n	800e956 <_scanf_float+0x182>
 800e946:	eb12 0f0b 	cmn.w	r2, fp
 800e94a:	f47f af7b 	bne.w	800e844 <_scanf_float+0x70>
 800e94e:	6821      	ldr	r1, [r4, #0]
 800e950:	f421 71c0 	bic.w	r1, r1, #384	; 0x180
 800e954:	6021      	str	r1, [r4, #0]
 800e956:	702b      	strb	r3, [r5, #0]
 800e958:	3501      	adds	r5, #1
 800e95a:	e79a      	b.n	800e892 <_scanf_float+0xbe>
 800e95c:	6821      	ldr	r1, [r4, #0]
 800e95e:	0608      	lsls	r0, r1, #24
 800e960:	f57f af70 	bpl.w	800e844 <_scanf_float+0x70>
 800e964:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800e968:	e7f4      	b.n	800e954 <_scanf_float+0x180>
 800e96a:	2a02      	cmp	r2, #2
 800e96c:	d047      	beq.n	800e9fe <_scanf_float+0x22a>
 800e96e:	f1bb 0f01 	cmp.w	fp, #1
 800e972:	d003      	beq.n	800e97c <_scanf_float+0x1a8>
 800e974:	f1bb 0f04 	cmp.w	fp, #4
 800e978:	f47f af64 	bne.w	800e844 <_scanf_float+0x70>
 800e97c:	f10b 0b01 	add.w	fp, fp, #1
 800e980:	fa5f fb8b 	uxtb.w	fp, fp
 800e984:	e7e7      	b.n	800e956 <_scanf_float+0x182>
 800e986:	f1bb 0f03 	cmp.w	fp, #3
 800e98a:	d0f7      	beq.n	800e97c <_scanf_float+0x1a8>
 800e98c:	f1bb 0f05 	cmp.w	fp, #5
 800e990:	e7f2      	b.n	800e978 <_scanf_float+0x1a4>
 800e992:	f1bb 0f02 	cmp.w	fp, #2
 800e996:	f47f af55 	bne.w	800e844 <_scanf_float+0x70>
 800e99a:	f04f 0b03 	mov.w	fp, #3
 800e99e:	e7da      	b.n	800e956 <_scanf_float+0x182>
 800e9a0:	f1bb 0f06 	cmp.w	fp, #6
 800e9a4:	f47f af4e 	bne.w	800e844 <_scanf_float+0x70>
 800e9a8:	f04f 0b07 	mov.w	fp, #7
 800e9ac:	e7d3      	b.n	800e956 <_scanf_float+0x182>
 800e9ae:	6821      	ldr	r1, [r4, #0]
 800e9b0:	0588      	lsls	r0, r1, #22
 800e9b2:	f57f af47 	bpl.w	800e844 <_scanf_float+0x70>
 800e9b6:	f421 7120 	bic.w	r1, r1, #640	; 0x280
 800e9ba:	6021      	str	r1, [r4, #0]
 800e9bc:	f8cd 9008 	str.w	r9, [sp, #8]
 800e9c0:	e7c9      	b.n	800e956 <_scanf_float+0x182>
 800e9c2:	6821      	ldr	r1, [r4, #0]
 800e9c4:	f401 60a0 	and.w	r0, r1, #1280	; 0x500
 800e9c8:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 800e9cc:	d006      	beq.n	800e9dc <_scanf_float+0x208>
 800e9ce:	0548      	lsls	r0, r1, #21
 800e9d0:	f57f af38 	bpl.w	800e844 <_scanf_float+0x70>
 800e9d4:	f1b9 0f00 	cmp.w	r9, #0
 800e9d8:	f43f af3b 	beq.w	800e852 <_scanf_float+0x7e>
 800e9dc:	0588      	lsls	r0, r1, #22
 800e9de:	bf58      	it	pl
 800e9e0:	9802      	ldrpl	r0, [sp, #8]
 800e9e2:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 800e9e6:	bf58      	it	pl
 800e9e8:	eba9 0000 	subpl.w	r0, r9, r0
 800e9ec:	f441 71c0 	orr.w	r1, r1, #384	; 0x180
 800e9f0:	bf58      	it	pl
 800e9f2:	e9cd 0503 	strdpl	r0, r5, [sp, #12]
 800e9f6:	6021      	str	r1, [r4, #0]
 800e9f8:	f04f 0900 	mov.w	r9, #0
 800e9fc:	e7ab      	b.n	800e956 <_scanf_float+0x182>
 800e9fe:	2203      	movs	r2, #3
 800ea00:	e7a9      	b.n	800e956 <_scanf_float+0x182>
 800ea02:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800ea06:	9205      	str	r2, [sp, #20]
 800ea08:	4631      	mov	r1, r6
 800ea0a:	4638      	mov	r0, r7
 800ea0c:	4798      	blx	r3
 800ea0e:	9a05      	ldr	r2, [sp, #20]
 800ea10:	2800      	cmp	r0, #0
 800ea12:	f43f af04 	beq.w	800e81e <_scanf_float+0x4a>
 800ea16:	e715      	b.n	800e844 <_scanf_float+0x70>
 800ea18:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800ea1c:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 800ea20:	4632      	mov	r2, r6
 800ea22:	4638      	mov	r0, r7
 800ea24:	4798      	blx	r3
 800ea26:	6923      	ldr	r3, [r4, #16]
 800ea28:	3b01      	subs	r3, #1
 800ea2a:	6123      	str	r3, [r4, #16]
 800ea2c:	e715      	b.n	800e85a <_scanf_float+0x86>
 800ea2e:	f10b 33ff 	add.w	r3, fp, #4294967295
 800ea32:	2b06      	cmp	r3, #6
 800ea34:	d80a      	bhi.n	800ea4c <_scanf_float+0x278>
 800ea36:	f1bb 0f02 	cmp.w	fp, #2
 800ea3a:	d968      	bls.n	800eb0e <_scanf_float+0x33a>
 800ea3c:	f1ab 0b03 	sub.w	fp, fp, #3
 800ea40:	fa5f fb8b 	uxtb.w	fp, fp
 800ea44:	eba5 0b0b 	sub.w	fp, r5, fp
 800ea48:	455d      	cmp	r5, fp
 800ea4a:	d14b      	bne.n	800eae4 <_scanf_float+0x310>
 800ea4c:	6823      	ldr	r3, [r4, #0]
 800ea4e:	05da      	lsls	r2, r3, #23
 800ea50:	d51f      	bpl.n	800ea92 <_scanf_float+0x2be>
 800ea52:	055b      	lsls	r3, r3, #21
 800ea54:	d468      	bmi.n	800eb28 <_scanf_float+0x354>
 800ea56:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800ea5a:	6923      	ldr	r3, [r4, #16]
 800ea5c:	2965      	cmp	r1, #101	; 0x65
 800ea5e:	f103 33ff 	add.w	r3, r3, #4294967295
 800ea62:	f105 3bff 	add.w	fp, r5, #4294967295
 800ea66:	6123      	str	r3, [r4, #16]
 800ea68:	d00d      	beq.n	800ea86 <_scanf_float+0x2b2>
 800ea6a:	2945      	cmp	r1, #69	; 0x45
 800ea6c:	d00b      	beq.n	800ea86 <_scanf_float+0x2b2>
 800ea6e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800ea72:	4632      	mov	r2, r6
 800ea74:	4638      	mov	r0, r7
 800ea76:	4798      	blx	r3
 800ea78:	6923      	ldr	r3, [r4, #16]
 800ea7a:	f815 1c02 	ldrb.w	r1, [r5, #-2]
 800ea7e:	3b01      	subs	r3, #1
 800ea80:	f1a5 0b02 	sub.w	fp, r5, #2
 800ea84:	6123      	str	r3, [r4, #16]
 800ea86:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800ea8a:	4632      	mov	r2, r6
 800ea8c:	4638      	mov	r0, r7
 800ea8e:	4798      	blx	r3
 800ea90:	465d      	mov	r5, fp
 800ea92:	6826      	ldr	r6, [r4, #0]
 800ea94:	f016 0610 	ands.w	r6, r6, #16
 800ea98:	d17a      	bne.n	800eb90 <_scanf_float+0x3bc>
 800ea9a:	702e      	strb	r6, [r5, #0]
 800ea9c:	6823      	ldr	r3, [r4, #0]
 800ea9e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800eaa2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800eaa6:	d142      	bne.n	800eb2e <_scanf_float+0x35a>
 800eaa8:	9b02      	ldr	r3, [sp, #8]
 800eaaa:	eba9 0303 	sub.w	r3, r9, r3
 800eaae:	425a      	negs	r2, r3
 800eab0:	2b00      	cmp	r3, #0
 800eab2:	d149      	bne.n	800eb48 <_scanf_float+0x374>
 800eab4:	2200      	movs	r2, #0
 800eab6:	4641      	mov	r1, r8
 800eab8:	4638      	mov	r0, r7
 800eaba:	f000 feb5 	bl	800f828 <_strtod_r>
 800eabe:	6825      	ldr	r5, [r4, #0]
 800eac0:	f8da 3000 	ldr.w	r3, [sl]
 800eac4:	f015 0f02 	tst.w	r5, #2
 800eac8:	f103 0204 	add.w	r2, r3, #4
 800eacc:	ec59 8b10 	vmov	r8, r9, d0
 800ead0:	f8ca 2000 	str.w	r2, [sl]
 800ead4:	d043      	beq.n	800eb5e <_scanf_float+0x38a>
 800ead6:	681b      	ldr	r3, [r3, #0]
 800ead8:	e9c3 8900 	strd	r8, r9, [r3]
 800eadc:	68e3      	ldr	r3, [r4, #12]
 800eade:	3301      	adds	r3, #1
 800eae0:	60e3      	str	r3, [r4, #12]
 800eae2:	e6be      	b.n	800e862 <_scanf_float+0x8e>
 800eae4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800eae8:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 800eaec:	4632      	mov	r2, r6
 800eaee:	4638      	mov	r0, r7
 800eaf0:	4798      	blx	r3
 800eaf2:	6923      	ldr	r3, [r4, #16]
 800eaf4:	3b01      	subs	r3, #1
 800eaf6:	6123      	str	r3, [r4, #16]
 800eaf8:	e7a6      	b.n	800ea48 <_scanf_float+0x274>
 800eafa:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800eafe:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 800eb02:	4632      	mov	r2, r6
 800eb04:	4638      	mov	r0, r7
 800eb06:	4798      	blx	r3
 800eb08:	6923      	ldr	r3, [r4, #16]
 800eb0a:	3b01      	subs	r3, #1
 800eb0c:	6123      	str	r3, [r4, #16]
 800eb0e:	4545      	cmp	r5, r8
 800eb10:	d8f3      	bhi.n	800eafa <_scanf_float+0x326>
 800eb12:	e6a5      	b.n	800e860 <_scanf_float+0x8c>
 800eb14:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800eb18:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 800eb1c:	4632      	mov	r2, r6
 800eb1e:	4638      	mov	r0, r7
 800eb20:	4798      	blx	r3
 800eb22:	6923      	ldr	r3, [r4, #16]
 800eb24:	3b01      	subs	r3, #1
 800eb26:	6123      	str	r3, [r4, #16]
 800eb28:	4545      	cmp	r5, r8
 800eb2a:	d8f3      	bhi.n	800eb14 <_scanf_float+0x340>
 800eb2c:	e698      	b.n	800e860 <_scanf_float+0x8c>
 800eb2e:	9b03      	ldr	r3, [sp, #12]
 800eb30:	2b00      	cmp	r3, #0
 800eb32:	d0bf      	beq.n	800eab4 <_scanf_float+0x2e0>
 800eb34:	9904      	ldr	r1, [sp, #16]
 800eb36:	230a      	movs	r3, #10
 800eb38:	4632      	mov	r2, r6
 800eb3a:	3101      	adds	r1, #1
 800eb3c:	4638      	mov	r0, r7
 800eb3e:	f000 feff 	bl	800f940 <_strtol_r>
 800eb42:	9b03      	ldr	r3, [sp, #12]
 800eb44:	9d04      	ldr	r5, [sp, #16]
 800eb46:	1ac2      	subs	r2, r0, r3
 800eb48:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800eb4c:	429d      	cmp	r5, r3
 800eb4e:	bf28      	it	cs
 800eb50:	f504 75b7 	addcs.w	r5, r4, #366	; 0x16e
 800eb54:	490f      	ldr	r1, [pc, #60]	; (800eb94 <_scanf_float+0x3c0>)
 800eb56:	4628      	mov	r0, r5
 800eb58:	f000 f834 	bl	800ebc4 <siprintf>
 800eb5c:	e7aa      	b.n	800eab4 <_scanf_float+0x2e0>
 800eb5e:	f015 0504 	ands.w	r5, r5, #4
 800eb62:	d1b8      	bne.n	800ead6 <_scanf_float+0x302>
 800eb64:	681f      	ldr	r7, [r3, #0]
 800eb66:	ee10 2a10 	vmov	r2, s0
 800eb6a:	464b      	mov	r3, r9
 800eb6c:	ee10 0a10 	vmov	r0, s0
 800eb70:	4649      	mov	r1, r9
 800eb72:	f7f1 ffdb 	bl	8000b2c <__aeabi_dcmpun>
 800eb76:	b128      	cbz	r0, 800eb84 <_scanf_float+0x3b0>
 800eb78:	4628      	mov	r0, r5
 800eb7a:	f000 f81d 	bl	800ebb8 <nanf>
 800eb7e:	ed87 0a00 	vstr	s0, [r7]
 800eb82:	e7ab      	b.n	800eadc <_scanf_float+0x308>
 800eb84:	4640      	mov	r0, r8
 800eb86:	4649      	mov	r1, r9
 800eb88:	f7f2 f82e 	bl	8000be8 <__aeabi_d2f>
 800eb8c:	6038      	str	r0, [r7, #0]
 800eb8e:	e7a5      	b.n	800eadc <_scanf_float+0x308>
 800eb90:	2600      	movs	r6, #0
 800eb92:	e666      	b.n	800e862 <_scanf_float+0x8e>
 800eb94:	08012044 	.word	0x08012044

0800eb98 <_sbrk_r>:
 800eb98:	b538      	push	{r3, r4, r5, lr}
 800eb9a:	4c06      	ldr	r4, [pc, #24]	; (800ebb4 <_sbrk_r+0x1c>)
 800eb9c:	2300      	movs	r3, #0
 800eb9e:	4605      	mov	r5, r0
 800eba0:	4608      	mov	r0, r1
 800eba2:	6023      	str	r3, [r4, #0]
 800eba4:	f002 fe38 	bl	8011818 <_sbrk>
 800eba8:	1c43      	adds	r3, r0, #1
 800ebaa:	d102      	bne.n	800ebb2 <_sbrk_r+0x1a>
 800ebac:	6823      	ldr	r3, [r4, #0]
 800ebae:	b103      	cbz	r3, 800ebb2 <_sbrk_r+0x1a>
 800ebb0:	602b      	str	r3, [r5, #0]
 800ebb2:	bd38      	pop	{r3, r4, r5, pc}
 800ebb4:	20002c6c 	.word	0x20002c6c

0800ebb8 <nanf>:
 800ebb8:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800ebc0 <nanf+0x8>
 800ebbc:	4770      	bx	lr
 800ebbe:	bf00      	nop
 800ebc0:	7fc00000 	.word	0x7fc00000

0800ebc4 <siprintf>:
 800ebc4:	b40e      	push	{r1, r2, r3}
 800ebc6:	b500      	push	{lr}
 800ebc8:	b09c      	sub	sp, #112	; 0x70
 800ebca:	ab1d      	add	r3, sp, #116	; 0x74
 800ebcc:	9002      	str	r0, [sp, #8]
 800ebce:	9006      	str	r0, [sp, #24]
 800ebd0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800ebd4:	4809      	ldr	r0, [pc, #36]	; (800ebfc <siprintf+0x38>)
 800ebd6:	9107      	str	r1, [sp, #28]
 800ebd8:	9104      	str	r1, [sp, #16]
 800ebda:	4909      	ldr	r1, [pc, #36]	; (800ec00 <siprintf+0x3c>)
 800ebdc:	f853 2b04 	ldr.w	r2, [r3], #4
 800ebe0:	9105      	str	r1, [sp, #20]
 800ebe2:	6800      	ldr	r0, [r0, #0]
 800ebe4:	9301      	str	r3, [sp, #4]
 800ebe6:	a902      	add	r1, sp, #8
 800ebe8:	f002 fcb8 	bl	801155c <_svfiprintf_r>
 800ebec:	9b02      	ldr	r3, [sp, #8]
 800ebee:	2200      	movs	r2, #0
 800ebf0:	701a      	strb	r2, [r3, #0]
 800ebf2:	b01c      	add	sp, #112	; 0x70
 800ebf4:	f85d eb04 	ldr.w	lr, [sp], #4
 800ebf8:	b003      	add	sp, #12
 800ebfa:	4770      	bx	lr
 800ebfc:	20000184 	.word	0x20000184
 800ec00:	ffff0208 	.word	0xffff0208

0800ec04 <sulp>:
 800ec04:	b570      	push	{r4, r5, r6, lr}
 800ec06:	4604      	mov	r4, r0
 800ec08:	460d      	mov	r5, r1
 800ec0a:	ec45 4b10 	vmov	d0, r4, r5
 800ec0e:	4616      	mov	r6, r2
 800ec10:	f002 fb08 	bl	8011224 <__ulp>
 800ec14:	ec51 0b10 	vmov	r0, r1, d0
 800ec18:	b17e      	cbz	r6, 800ec3a <sulp+0x36>
 800ec1a:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800ec1e:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800ec22:	2b00      	cmp	r3, #0
 800ec24:	dd09      	ble.n	800ec3a <sulp+0x36>
 800ec26:	051b      	lsls	r3, r3, #20
 800ec28:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800ec2c:	2400      	movs	r4, #0
 800ec2e:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800ec32:	4622      	mov	r2, r4
 800ec34:	462b      	mov	r3, r5
 800ec36:	f7f1 fcdf 	bl	80005f8 <__aeabi_dmul>
 800ec3a:	bd70      	pop	{r4, r5, r6, pc}
 800ec3c:	0000      	movs	r0, r0
	...

0800ec40 <_strtod_l>:
 800ec40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ec44:	461f      	mov	r7, r3
 800ec46:	b0a1      	sub	sp, #132	; 0x84
 800ec48:	2300      	movs	r3, #0
 800ec4a:	4681      	mov	r9, r0
 800ec4c:	4638      	mov	r0, r7
 800ec4e:	460e      	mov	r6, r1
 800ec50:	9217      	str	r2, [sp, #92]	; 0x5c
 800ec52:	931c      	str	r3, [sp, #112]	; 0x70
 800ec54:	f001 fff5 	bl	8010c42 <__localeconv_l>
 800ec58:	4680      	mov	r8, r0
 800ec5a:	6800      	ldr	r0, [r0, #0]
 800ec5c:	f7f1 fab8 	bl	80001d0 <strlen>
 800ec60:	f04f 0a00 	mov.w	sl, #0
 800ec64:	4604      	mov	r4, r0
 800ec66:	f04f 0b00 	mov.w	fp, #0
 800ec6a:	961b      	str	r6, [sp, #108]	; 0x6c
 800ec6c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800ec6e:	781a      	ldrb	r2, [r3, #0]
 800ec70:	2a0d      	cmp	r2, #13
 800ec72:	d832      	bhi.n	800ecda <_strtod_l+0x9a>
 800ec74:	2a09      	cmp	r2, #9
 800ec76:	d236      	bcs.n	800ece6 <_strtod_l+0xa6>
 800ec78:	2a00      	cmp	r2, #0
 800ec7a:	d03e      	beq.n	800ecfa <_strtod_l+0xba>
 800ec7c:	2300      	movs	r3, #0
 800ec7e:	930d      	str	r3, [sp, #52]	; 0x34
 800ec80:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 800ec82:	782b      	ldrb	r3, [r5, #0]
 800ec84:	2b30      	cmp	r3, #48	; 0x30
 800ec86:	f040 80ac 	bne.w	800ede2 <_strtod_l+0x1a2>
 800ec8a:	786b      	ldrb	r3, [r5, #1]
 800ec8c:	2b58      	cmp	r3, #88	; 0x58
 800ec8e:	d001      	beq.n	800ec94 <_strtod_l+0x54>
 800ec90:	2b78      	cmp	r3, #120	; 0x78
 800ec92:	d167      	bne.n	800ed64 <_strtod_l+0x124>
 800ec94:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ec96:	9301      	str	r3, [sp, #4]
 800ec98:	ab1c      	add	r3, sp, #112	; 0x70
 800ec9a:	9300      	str	r3, [sp, #0]
 800ec9c:	9702      	str	r7, [sp, #8]
 800ec9e:	ab1d      	add	r3, sp, #116	; 0x74
 800eca0:	4a88      	ldr	r2, [pc, #544]	; (800eec4 <_strtod_l+0x284>)
 800eca2:	a91b      	add	r1, sp, #108	; 0x6c
 800eca4:	4648      	mov	r0, r9
 800eca6:	f001 fcf2 	bl	801068e <__gethex>
 800ecaa:	f010 0407 	ands.w	r4, r0, #7
 800ecae:	4606      	mov	r6, r0
 800ecb0:	d005      	beq.n	800ecbe <_strtod_l+0x7e>
 800ecb2:	2c06      	cmp	r4, #6
 800ecb4:	d12b      	bne.n	800ed0e <_strtod_l+0xce>
 800ecb6:	3501      	adds	r5, #1
 800ecb8:	2300      	movs	r3, #0
 800ecba:	951b      	str	r5, [sp, #108]	; 0x6c
 800ecbc:	930d      	str	r3, [sp, #52]	; 0x34
 800ecbe:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800ecc0:	2b00      	cmp	r3, #0
 800ecc2:	f040 859a 	bne.w	800f7fa <_strtod_l+0xbba>
 800ecc6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ecc8:	b1e3      	cbz	r3, 800ed04 <_strtod_l+0xc4>
 800ecca:	4652      	mov	r2, sl
 800eccc:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800ecd0:	ec43 2b10 	vmov	d0, r2, r3
 800ecd4:	b021      	add	sp, #132	; 0x84
 800ecd6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ecda:	2a2b      	cmp	r2, #43	; 0x2b
 800ecdc:	d015      	beq.n	800ed0a <_strtod_l+0xca>
 800ecde:	2a2d      	cmp	r2, #45	; 0x2d
 800ece0:	d004      	beq.n	800ecec <_strtod_l+0xac>
 800ece2:	2a20      	cmp	r2, #32
 800ece4:	d1ca      	bne.n	800ec7c <_strtod_l+0x3c>
 800ece6:	3301      	adds	r3, #1
 800ece8:	931b      	str	r3, [sp, #108]	; 0x6c
 800ecea:	e7bf      	b.n	800ec6c <_strtod_l+0x2c>
 800ecec:	2201      	movs	r2, #1
 800ecee:	920d      	str	r2, [sp, #52]	; 0x34
 800ecf0:	1c5a      	adds	r2, r3, #1
 800ecf2:	921b      	str	r2, [sp, #108]	; 0x6c
 800ecf4:	785b      	ldrb	r3, [r3, #1]
 800ecf6:	2b00      	cmp	r3, #0
 800ecf8:	d1c2      	bne.n	800ec80 <_strtod_l+0x40>
 800ecfa:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800ecfc:	961b      	str	r6, [sp, #108]	; 0x6c
 800ecfe:	2b00      	cmp	r3, #0
 800ed00:	f040 8579 	bne.w	800f7f6 <_strtod_l+0xbb6>
 800ed04:	4652      	mov	r2, sl
 800ed06:	465b      	mov	r3, fp
 800ed08:	e7e2      	b.n	800ecd0 <_strtod_l+0x90>
 800ed0a:	2200      	movs	r2, #0
 800ed0c:	e7ef      	b.n	800ecee <_strtod_l+0xae>
 800ed0e:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800ed10:	b13a      	cbz	r2, 800ed22 <_strtod_l+0xe2>
 800ed12:	2135      	movs	r1, #53	; 0x35
 800ed14:	a81e      	add	r0, sp, #120	; 0x78
 800ed16:	f002 fb7d 	bl	8011414 <__copybits>
 800ed1a:	991c      	ldr	r1, [sp, #112]	; 0x70
 800ed1c:	4648      	mov	r0, r9
 800ed1e:	f001 ffe9 	bl	8010cf4 <_Bfree>
 800ed22:	3c01      	subs	r4, #1
 800ed24:	2c04      	cmp	r4, #4
 800ed26:	d806      	bhi.n	800ed36 <_strtod_l+0xf6>
 800ed28:	e8df f004 	tbb	[pc, r4]
 800ed2c:	1714030a 	.word	0x1714030a
 800ed30:	0a          	.byte	0x0a
 800ed31:	00          	.byte	0x00
 800ed32:	e9dd ab1e 	ldrd	sl, fp, [sp, #120]	; 0x78
 800ed36:	0730      	lsls	r0, r6, #28
 800ed38:	d5c1      	bpl.n	800ecbe <_strtod_l+0x7e>
 800ed3a:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800ed3e:	e7be      	b.n	800ecbe <_strtod_l+0x7e>
 800ed40:	e9dd a31e 	ldrd	sl, r3, [sp, #120]	; 0x78
 800ed44:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800ed46:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800ed4a:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800ed4e:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800ed52:	e7f0      	b.n	800ed36 <_strtod_l+0xf6>
 800ed54:	f8df b170 	ldr.w	fp, [pc, #368]	; 800eec8 <_strtod_l+0x288>
 800ed58:	e7ed      	b.n	800ed36 <_strtod_l+0xf6>
 800ed5a:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800ed5e:	f04f 3aff 	mov.w	sl, #4294967295
 800ed62:	e7e8      	b.n	800ed36 <_strtod_l+0xf6>
 800ed64:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800ed66:	1c5a      	adds	r2, r3, #1
 800ed68:	921b      	str	r2, [sp, #108]	; 0x6c
 800ed6a:	785b      	ldrb	r3, [r3, #1]
 800ed6c:	2b30      	cmp	r3, #48	; 0x30
 800ed6e:	d0f9      	beq.n	800ed64 <_strtod_l+0x124>
 800ed70:	2b00      	cmp	r3, #0
 800ed72:	d0a4      	beq.n	800ecbe <_strtod_l+0x7e>
 800ed74:	2301      	movs	r3, #1
 800ed76:	2500      	movs	r5, #0
 800ed78:	9306      	str	r3, [sp, #24]
 800ed7a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800ed7c:	9308      	str	r3, [sp, #32]
 800ed7e:	9507      	str	r5, [sp, #28]
 800ed80:	9505      	str	r5, [sp, #20]
 800ed82:	220a      	movs	r2, #10
 800ed84:	981b      	ldr	r0, [sp, #108]	; 0x6c
 800ed86:	7807      	ldrb	r7, [r0, #0]
 800ed88:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 800ed8c:	b2d9      	uxtb	r1, r3
 800ed8e:	2909      	cmp	r1, #9
 800ed90:	d929      	bls.n	800ede6 <_strtod_l+0x1a6>
 800ed92:	4622      	mov	r2, r4
 800ed94:	f8d8 1000 	ldr.w	r1, [r8]
 800ed98:	f002 fcd8 	bl	801174c <strncmp>
 800ed9c:	2800      	cmp	r0, #0
 800ed9e:	d031      	beq.n	800ee04 <_strtod_l+0x1c4>
 800eda0:	2000      	movs	r0, #0
 800eda2:	9c05      	ldr	r4, [sp, #20]
 800eda4:	9004      	str	r0, [sp, #16]
 800eda6:	463b      	mov	r3, r7
 800eda8:	4602      	mov	r2, r0
 800edaa:	2b65      	cmp	r3, #101	; 0x65
 800edac:	d001      	beq.n	800edb2 <_strtod_l+0x172>
 800edae:	2b45      	cmp	r3, #69	; 0x45
 800edb0:	d114      	bne.n	800eddc <_strtod_l+0x19c>
 800edb2:	b924      	cbnz	r4, 800edbe <_strtod_l+0x17e>
 800edb4:	b910      	cbnz	r0, 800edbc <_strtod_l+0x17c>
 800edb6:	9b06      	ldr	r3, [sp, #24]
 800edb8:	2b00      	cmp	r3, #0
 800edba:	d09e      	beq.n	800ecfa <_strtod_l+0xba>
 800edbc:	2400      	movs	r4, #0
 800edbe:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 800edc0:	1c73      	adds	r3, r6, #1
 800edc2:	931b      	str	r3, [sp, #108]	; 0x6c
 800edc4:	7873      	ldrb	r3, [r6, #1]
 800edc6:	2b2b      	cmp	r3, #43	; 0x2b
 800edc8:	d078      	beq.n	800eebc <_strtod_l+0x27c>
 800edca:	2b2d      	cmp	r3, #45	; 0x2d
 800edcc:	d070      	beq.n	800eeb0 <_strtod_l+0x270>
 800edce:	f04f 0c00 	mov.w	ip, #0
 800edd2:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 800edd6:	2f09      	cmp	r7, #9
 800edd8:	d97c      	bls.n	800eed4 <_strtod_l+0x294>
 800edda:	961b      	str	r6, [sp, #108]	; 0x6c
 800eddc:	f04f 0e00 	mov.w	lr, #0
 800ede0:	e09a      	b.n	800ef18 <_strtod_l+0x2d8>
 800ede2:	2300      	movs	r3, #0
 800ede4:	e7c7      	b.n	800ed76 <_strtod_l+0x136>
 800ede6:	9905      	ldr	r1, [sp, #20]
 800ede8:	2908      	cmp	r1, #8
 800edea:	bfdd      	ittte	le
 800edec:	9907      	ldrle	r1, [sp, #28]
 800edee:	fb02 3301 	mlale	r3, r2, r1, r3
 800edf2:	9307      	strle	r3, [sp, #28]
 800edf4:	fb02 3505 	mlagt	r5, r2, r5, r3
 800edf8:	9b05      	ldr	r3, [sp, #20]
 800edfa:	3001      	adds	r0, #1
 800edfc:	3301      	adds	r3, #1
 800edfe:	9305      	str	r3, [sp, #20]
 800ee00:	901b      	str	r0, [sp, #108]	; 0x6c
 800ee02:	e7bf      	b.n	800ed84 <_strtod_l+0x144>
 800ee04:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800ee06:	191a      	adds	r2, r3, r4
 800ee08:	921b      	str	r2, [sp, #108]	; 0x6c
 800ee0a:	9a05      	ldr	r2, [sp, #20]
 800ee0c:	5d1b      	ldrb	r3, [r3, r4]
 800ee0e:	2a00      	cmp	r2, #0
 800ee10:	d037      	beq.n	800ee82 <_strtod_l+0x242>
 800ee12:	9c05      	ldr	r4, [sp, #20]
 800ee14:	4602      	mov	r2, r0
 800ee16:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800ee1a:	2909      	cmp	r1, #9
 800ee1c:	d913      	bls.n	800ee46 <_strtod_l+0x206>
 800ee1e:	2101      	movs	r1, #1
 800ee20:	9104      	str	r1, [sp, #16]
 800ee22:	e7c2      	b.n	800edaa <_strtod_l+0x16a>
 800ee24:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800ee26:	1c5a      	adds	r2, r3, #1
 800ee28:	921b      	str	r2, [sp, #108]	; 0x6c
 800ee2a:	785b      	ldrb	r3, [r3, #1]
 800ee2c:	3001      	adds	r0, #1
 800ee2e:	2b30      	cmp	r3, #48	; 0x30
 800ee30:	d0f8      	beq.n	800ee24 <_strtod_l+0x1e4>
 800ee32:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 800ee36:	2a08      	cmp	r2, #8
 800ee38:	f200 84e4 	bhi.w	800f804 <_strtod_l+0xbc4>
 800ee3c:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800ee3e:	9208      	str	r2, [sp, #32]
 800ee40:	4602      	mov	r2, r0
 800ee42:	2000      	movs	r0, #0
 800ee44:	4604      	mov	r4, r0
 800ee46:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 800ee4a:	f100 0101 	add.w	r1, r0, #1
 800ee4e:	d012      	beq.n	800ee76 <_strtod_l+0x236>
 800ee50:	440a      	add	r2, r1
 800ee52:	eb00 0c04 	add.w	ip, r0, r4
 800ee56:	4621      	mov	r1, r4
 800ee58:	270a      	movs	r7, #10
 800ee5a:	458c      	cmp	ip, r1
 800ee5c:	d113      	bne.n	800ee86 <_strtod_l+0x246>
 800ee5e:	1821      	adds	r1, r4, r0
 800ee60:	2908      	cmp	r1, #8
 800ee62:	f104 0401 	add.w	r4, r4, #1
 800ee66:	4404      	add	r4, r0
 800ee68:	dc19      	bgt.n	800ee9e <_strtod_l+0x25e>
 800ee6a:	9b07      	ldr	r3, [sp, #28]
 800ee6c:	210a      	movs	r1, #10
 800ee6e:	fb01 e303 	mla	r3, r1, r3, lr
 800ee72:	9307      	str	r3, [sp, #28]
 800ee74:	2100      	movs	r1, #0
 800ee76:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800ee78:	1c58      	adds	r0, r3, #1
 800ee7a:	901b      	str	r0, [sp, #108]	; 0x6c
 800ee7c:	785b      	ldrb	r3, [r3, #1]
 800ee7e:	4608      	mov	r0, r1
 800ee80:	e7c9      	b.n	800ee16 <_strtod_l+0x1d6>
 800ee82:	9805      	ldr	r0, [sp, #20]
 800ee84:	e7d3      	b.n	800ee2e <_strtod_l+0x1ee>
 800ee86:	2908      	cmp	r1, #8
 800ee88:	f101 0101 	add.w	r1, r1, #1
 800ee8c:	dc03      	bgt.n	800ee96 <_strtod_l+0x256>
 800ee8e:	9b07      	ldr	r3, [sp, #28]
 800ee90:	437b      	muls	r3, r7
 800ee92:	9307      	str	r3, [sp, #28]
 800ee94:	e7e1      	b.n	800ee5a <_strtod_l+0x21a>
 800ee96:	2910      	cmp	r1, #16
 800ee98:	bfd8      	it	le
 800ee9a:	437d      	mulle	r5, r7
 800ee9c:	e7dd      	b.n	800ee5a <_strtod_l+0x21a>
 800ee9e:	2c10      	cmp	r4, #16
 800eea0:	bfdc      	itt	le
 800eea2:	210a      	movle	r1, #10
 800eea4:	fb01 e505 	mlale	r5, r1, r5, lr
 800eea8:	e7e4      	b.n	800ee74 <_strtod_l+0x234>
 800eeaa:	2301      	movs	r3, #1
 800eeac:	9304      	str	r3, [sp, #16]
 800eeae:	e781      	b.n	800edb4 <_strtod_l+0x174>
 800eeb0:	f04f 0c01 	mov.w	ip, #1
 800eeb4:	1cb3      	adds	r3, r6, #2
 800eeb6:	931b      	str	r3, [sp, #108]	; 0x6c
 800eeb8:	78b3      	ldrb	r3, [r6, #2]
 800eeba:	e78a      	b.n	800edd2 <_strtod_l+0x192>
 800eebc:	f04f 0c00 	mov.w	ip, #0
 800eec0:	e7f8      	b.n	800eeb4 <_strtod_l+0x274>
 800eec2:	bf00      	nop
 800eec4:	0801204c 	.word	0x0801204c
 800eec8:	7ff00000 	.word	0x7ff00000
 800eecc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800eece:	1c5f      	adds	r7, r3, #1
 800eed0:	971b      	str	r7, [sp, #108]	; 0x6c
 800eed2:	785b      	ldrb	r3, [r3, #1]
 800eed4:	2b30      	cmp	r3, #48	; 0x30
 800eed6:	d0f9      	beq.n	800eecc <_strtod_l+0x28c>
 800eed8:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 800eedc:	2f08      	cmp	r7, #8
 800eede:	f63f af7d 	bhi.w	800eddc <_strtod_l+0x19c>
 800eee2:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 800eee6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800eee8:	930a      	str	r3, [sp, #40]	; 0x28
 800eeea:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800eeec:	1c5f      	adds	r7, r3, #1
 800eeee:	971b      	str	r7, [sp, #108]	; 0x6c
 800eef0:	785b      	ldrb	r3, [r3, #1]
 800eef2:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 800eef6:	f1b8 0f09 	cmp.w	r8, #9
 800eefa:	d937      	bls.n	800ef6c <_strtod_l+0x32c>
 800eefc:	990a      	ldr	r1, [sp, #40]	; 0x28
 800eefe:	1a7f      	subs	r7, r7, r1
 800ef00:	2f08      	cmp	r7, #8
 800ef02:	f644 671f 	movw	r7, #19999	; 0x4e1f
 800ef06:	dc37      	bgt.n	800ef78 <_strtod_l+0x338>
 800ef08:	45be      	cmp	lr, r7
 800ef0a:	bfa8      	it	ge
 800ef0c:	46be      	movge	lr, r7
 800ef0e:	f1bc 0f00 	cmp.w	ip, #0
 800ef12:	d001      	beq.n	800ef18 <_strtod_l+0x2d8>
 800ef14:	f1ce 0e00 	rsb	lr, lr, #0
 800ef18:	2c00      	cmp	r4, #0
 800ef1a:	d151      	bne.n	800efc0 <_strtod_l+0x380>
 800ef1c:	2800      	cmp	r0, #0
 800ef1e:	f47f aece 	bne.w	800ecbe <_strtod_l+0x7e>
 800ef22:	9a06      	ldr	r2, [sp, #24]
 800ef24:	2a00      	cmp	r2, #0
 800ef26:	f47f aeca 	bne.w	800ecbe <_strtod_l+0x7e>
 800ef2a:	9a04      	ldr	r2, [sp, #16]
 800ef2c:	2a00      	cmp	r2, #0
 800ef2e:	f47f aee4 	bne.w	800ecfa <_strtod_l+0xba>
 800ef32:	2b4e      	cmp	r3, #78	; 0x4e
 800ef34:	d027      	beq.n	800ef86 <_strtod_l+0x346>
 800ef36:	dc21      	bgt.n	800ef7c <_strtod_l+0x33c>
 800ef38:	2b49      	cmp	r3, #73	; 0x49
 800ef3a:	f47f aede 	bne.w	800ecfa <_strtod_l+0xba>
 800ef3e:	49a0      	ldr	r1, [pc, #640]	; (800f1c0 <_strtod_l+0x580>)
 800ef40:	a81b      	add	r0, sp, #108	; 0x6c
 800ef42:	f001 fdd7 	bl	8010af4 <__match>
 800ef46:	2800      	cmp	r0, #0
 800ef48:	f43f aed7 	beq.w	800ecfa <_strtod_l+0xba>
 800ef4c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800ef4e:	499d      	ldr	r1, [pc, #628]	; (800f1c4 <_strtod_l+0x584>)
 800ef50:	3b01      	subs	r3, #1
 800ef52:	a81b      	add	r0, sp, #108	; 0x6c
 800ef54:	931b      	str	r3, [sp, #108]	; 0x6c
 800ef56:	f001 fdcd 	bl	8010af4 <__match>
 800ef5a:	b910      	cbnz	r0, 800ef62 <_strtod_l+0x322>
 800ef5c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800ef5e:	3301      	adds	r3, #1
 800ef60:	931b      	str	r3, [sp, #108]	; 0x6c
 800ef62:	f8df b274 	ldr.w	fp, [pc, #628]	; 800f1d8 <_strtod_l+0x598>
 800ef66:	f04f 0a00 	mov.w	sl, #0
 800ef6a:	e6a8      	b.n	800ecbe <_strtod_l+0x7e>
 800ef6c:	210a      	movs	r1, #10
 800ef6e:	fb01 3e0e 	mla	lr, r1, lr, r3
 800ef72:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800ef76:	e7b8      	b.n	800eeea <_strtod_l+0x2aa>
 800ef78:	46be      	mov	lr, r7
 800ef7a:	e7c8      	b.n	800ef0e <_strtod_l+0x2ce>
 800ef7c:	2b69      	cmp	r3, #105	; 0x69
 800ef7e:	d0de      	beq.n	800ef3e <_strtod_l+0x2fe>
 800ef80:	2b6e      	cmp	r3, #110	; 0x6e
 800ef82:	f47f aeba 	bne.w	800ecfa <_strtod_l+0xba>
 800ef86:	4990      	ldr	r1, [pc, #576]	; (800f1c8 <_strtod_l+0x588>)
 800ef88:	a81b      	add	r0, sp, #108	; 0x6c
 800ef8a:	f001 fdb3 	bl	8010af4 <__match>
 800ef8e:	2800      	cmp	r0, #0
 800ef90:	f43f aeb3 	beq.w	800ecfa <_strtod_l+0xba>
 800ef94:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800ef96:	781b      	ldrb	r3, [r3, #0]
 800ef98:	2b28      	cmp	r3, #40	; 0x28
 800ef9a:	d10e      	bne.n	800efba <_strtod_l+0x37a>
 800ef9c:	aa1e      	add	r2, sp, #120	; 0x78
 800ef9e:	498b      	ldr	r1, [pc, #556]	; (800f1cc <_strtod_l+0x58c>)
 800efa0:	a81b      	add	r0, sp, #108	; 0x6c
 800efa2:	f001 fdbb 	bl	8010b1c <__hexnan>
 800efa6:	2805      	cmp	r0, #5
 800efa8:	d107      	bne.n	800efba <_strtod_l+0x37a>
 800efaa:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800efac:	f8dd a078 	ldr.w	sl, [sp, #120]	; 0x78
 800efb0:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800efb4:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800efb8:	e681      	b.n	800ecbe <_strtod_l+0x7e>
 800efba:	f8df b224 	ldr.w	fp, [pc, #548]	; 800f1e0 <_strtod_l+0x5a0>
 800efbe:	e7d2      	b.n	800ef66 <_strtod_l+0x326>
 800efc0:	ebae 0302 	sub.w	r3, lr, r2
 800efc4:	9306      	str	r3, [sp, #24]
 800efc6:	9b05      	ldr	r3, [sp, #20]
 800efc8:	9807      	ldr	r0, [sp, #28]
 800efca:	2b00      	cmp	r3, #0
 800efcc:	bf08      	it	eq
 800efce:	4623      	moveq	r3, r4
 800efd0:	2c10      	cmp	r4, #16
 800efd2:	9305      	str	r3, [sp, #20]
 800efd4:	46a0      	mov	r8, r4
 800efd6:	bfa8      	it	ge
 800efd8:	f04f 0810 	movge.w	r8, #16
 800efdc:	f7f1 fa92 	bl	8000504 <__aeabi_ui2d>
 800efe0:	2c09      	cmp	r4, #9
 800efe2:	4682      	mov	sl, r0
 800efe4:	468b      	mov	fp, r1
 800efe6:	dc13      	bgt.n	800f010 <_strtod_l+0x3d0>
 800efe8:	9b06      	ldr	r3, [sp, #24]
 800efea:	2b00      	cmp	r3, #0
 800efec:	f43f ae67 	beq.w	800ecbe <_strtod_l+0x7e>
 800eff0:	9b06      	ldr	r3, [sp, #24]
 800eff2:	dd7a      	ble.n	800f0ea <_strtod_l+0x4aa>
 800eff4:	2b16      	cmp	r3, #22
 800eff6:	dc61      	bgt.n	800f0bc <_strtod_l+0x47c>
 800eff8:	4a75      	ldr	r2, [pc, #468]	; (800f1d0 <_strtod_l+0x590>)
 800effa:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 800effe:	e9de 0100 	ldrd	r0, r1, [lr]
 800f002:	4652      	mov	r2, sl
 800f004:	465b      	mov	r3, fp
 800f006:	f7f1 faf7 	bl	80005f8 <__aeabi_dmul>
 800f00a:	4682      	mov	sl, r0
 800f00c:	468b      	mov	fp, r1
 800f00e:	e656      	b.n	800ecbe <_strtod_l+0x7e>
 800f010:	4b6f      	ldr	r3, [pc, #444]	; (800f1d0 <_strtod_l+0x590>)
 800f012:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800f016:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800f01a:	f7f1 faed 	bl	80005f8 <__aeabi_dmul>
 800f01e:	4606      	mov	r6, r0
 800f020:	4628      	mov	r0, r5
 800f022:	460f      	mov	r7, r1
 800f024:	f7f1 fa6e 	bl	8000504 <__aeabi_ui2d>
 800f028:	4602      	mov	r2, r0
 800f02a:	460b      	mov	r3, r1
 800f02c:	4630      	mov	r0, r6
 800f02e:	4639      	mov	r1, r7
 800f030:	f7f1 f92c 	bl	800028c <__adddf3>
 800f034:	2c0f      	cmp	r4, #15
 800f036:	4682      	mov	sl, r0
 800f038:	468b      	mov	fp, r1
 800f03a:	ddd5      	ble.n	800efe8 <_strtod_l+0x3a8>
 800f03c:	9b06      	ldr	r3, [sp, #24]
 800f03e:	eba4 0808 	sub.w	r8, r4, r8
 800f042:	4498      	add	r8, r3
 800f044:	f1b8 0f00 	cmp.w	r8, #0
 800f048:	f340 8096 	ble.w	800f178 <_strtod_l+0x538>
 800f04c:	f018 030f 	ands.w	r3, r8, #15
 800f050:	d00a      	beq.n	800f068 <_strtod_l+0x428>
 800f052:	495f      	ldr	r1, [pc, #380]	; (800f1d0 <_strtod_l+0x590>)
 800f054:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800f058:	4652      	mov	r2, sl
 800f05a:	465b      	mov	r3, fp
 800f05c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f060:	f7f1 faca 	bl	80005f8 <__aeabi_dmul>
 800f064:	4682      	mov	sl, r0
 800f066:	468b      	mov	fp, r1
 800f068:	f038 080f 	bics.w	r8, r8, #15
 800f06c:	d073      	beq.n	800f156 <_strtod_l+0x516>
 800f06e:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800f072:	dd47      	ble.n	800f104 <_strtod_l+0x4c4>
 800f074:	2400      	movs	r4, #0
 800f076:	46a0      	mov	r8, r4
 800f078:	9407      	str	r4, [sp, #28]
 800f07a:	9405      	str	r4, [sp, #20]
 800f07c:	2322      	movs	r3, #34	; 0x22
 800f07e:	f8df b158 	ldr.w	fp, [pc, #344]	; 800f1d8 <_strtod_l+0x598>
 800f082:	f8c9 3000 	str.w	r3, [r9]
 800f086:	f04f 0a00 	mov.w	sl, #0
 800f08a:	9b07      	ldr	r3, [sp, #28]
 800f08c:	2b00      	cmp	r3, #0
 800f08e:	f43f ae16 	beq.w	800ecbe <_strtod_l+0x7e>
 800f092:	991c      	ldr	r1, [sp, #112]	; 0x70
 800f094:	4648      	mov	r0, r9
 800f096:	f001 fe2d 	bl	8010cf4 <_Bfree>
 800f09a:	9905      	ldr	r1, [sp, #20]
 800f09c:	4648      	mov	r0, r9
 800f09e:	f001 fe29 	bl	8010cf4 <_Bfree>
 800f0a2:	4641      	mov	r1, r8
 800f0a4:	4648      	mov	r0, r9
 800f0a6:	f001 fe25 	bl	8010cf4 <_Bfree>
 800f0aa:	9907      	ldr	r1, [sp, #28]
 800f0ac:	4648      	mov	r0, r9
 800f0ae:	f001 fe21 	bl	8010cf4 <_Bfree>
 800f0b2:	4621      	mov	r1, r4
 800f0b4:	4648      	mov	r0, r9
 800f0b6:	f001 fe1d 	bl	8010cf4 <_Bfree>
 800f0ba:	e600      	b.n	800ecbe <_strtod_l+0x7e>
 800f0bc:	9a06      	ldr	r2, [sp, #24]
 800f0be:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 800f0c2:	4293      	cmp	r3, r2
 800f0c4:	dbba      	blt.n	800f03c <_strtod_l+0x3fc>
 800f0c6:	4d42      	ldr	r5, [pc, #264]	; (800f1d0 <_strtod_l+0x590>)
 800f0c8:	f1c4 040f 	rsb	r4, r4, #15
 800f0cc:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 800f0d0:	4652      	mov	r2, sl
 800f0d2:	465b      	mov	r3, fp
 800f0d4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f0d8:	f7f1 fa8e 	bl	80005f8 <__aeabi_dmul>
 800f0dc:	9b06      	ldr	r3, [sp, #24]
 800f0de:	1b1c      	subs	r4, r3, r4
 800f0e0:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 800f0e4:	e9d5 2300 	ldrd	r2, r3, [r5]
 800f0e8:	e78d      	b.n	800f006 <_strtod_l+0x3c6>
 800f0ea:	f113 0f16 	cmn.w	r3, #22
 800f0ee:	dba5      	blt.n	800f03c <_strtod_l+0x3fc>
 800f0f0:	4a37      	ldr	r2, [pc, #220]	; (800f1d0 <_strtod_l+0x590>)
 800f0f2:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 800f0f6:	e9d2 2300 	ldrd	r2, r3, [r2]
 800f0fa:	4650      	mov	r0, sl
 800f0fc:	4659      	mov	r1, fp
 800f0fe:	f7f1 fba5 	bl	800084c <__aeabi_ddiv>
 800f102:	e782      	b.n	800f00a <_strtod_l+0x3ca>
 800f104:	2300      	movs	r3, #0
 800f106:	4e33      	ldr	r6, [pc, #204]	; (800f1d4 <_strtod_l+0x594>)
 800f108:	ea4f 1828 	mov.w	r8, r8, asr #4
 800f10c:	4650      	mov	r0, sl
 800f10e:	4659      	mov	r1, fp
 800f110:	461d      	mov	r5, r3
 800f112:	f1b8 0f01 	cmp.w	r8, #1
 800f116:	dc21      	bgt.n	800f15c <_strtod_l+0x51c>
 800f118:	b10b      	cbz	r3, 800f11e <_strtod_l+0x4de>
 800f11a:	4682      	mov	sl, r0
 800f11c:	468b      	mov	fp, r1
 800f11e:	4b2d      	ldr	r3, [pc, #180]	; (800f1d4 <_strtod_l+0x594>)
 800f120:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800f124:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800f128:	4652      	mov	r2, sl
 800f12a:	465b      	mov	r3, fp
 800f12c:	e9d5 0100 	ldrd	r0, r1, [r5]
 800f130:	f7f1 fa62 	bl	80005f8 <__aeabi_dmul>
 800f134:	4b28      	ldr	r3, [pc, #160]	; (800f1d8 <_strtod_l+0x598>)
 800f136:	460a      	mov	r2, r1
 800f138:	400b      	ands	r3, r1
 800f13a:	4928      	ldr	r1, [pc, #160]	; (800f1dc <_strtod_l+0x59c>)
 800f13c:	428b      	cmp	r3, r1
 800f13e:	4682      	mov	sl, r0
 800f140:	d898      	bhi.n	800f074 <_strtod_l+0x434>
 800f142:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800f146:	428b      	cmp	r3, r1
 800f148:	bf86      	itte	hi
 800f14a:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 800f1e4 <_strtod_l+0x5a4>
 800f14e:	f04f 3aff 	movhi.w	sl, #4294967295
 800f152:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800f156:	2300      	movs	r3, #0
 800f158:	9304      	str	r3, [sp, #16]
 800f15a:	e077      	b.n	800f24c <_strtod_l+0x60c>
 800f15c:	f018 0f01 	tst.w	r8, #1
 800f160:	d006      	beq.n	800f170 <_strtod_l+0x530>
 800f162:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 800f166:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f16a:	f7f1 fa45 	bl	80005f8 <__aeabi_dmul>
 800f16e:	2301      	movs	r3, #1
 800f170:	3501      	adds	r5, #1
 800f172:	ea4f 0868 	mov.w	r8, r8, asr #1
 800f176:	e7cc      	b.n	800f112 <_strtod_l+0x4d2>
 800f178:	d0ed      	beq.n	800f156 <_strtod_l+0x516>
 800f17a:	f1c8 0800 	rsb	r8, r8, #0
 800f17e:	f018 020f 	ands.w	r2, r8, #15
 800f182:	d00a      	beq.n	800f19a <_strtod_l+0x55a>
 800f184:	4b12      	ldr	r3, [pc, #72]	; (800f1d0 <_strtod_l+0x590>)
 800f186:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800f18a:	4650      	mov	r0, sl
 800f18c:	4659      	mov	r1, fp
 800f18e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f192:	f7f1 fb5b 	bl	800084c <__aeabi_ddiv>
 800f196:	4682      	mov	sl, r0
 800f198:	468b      	mov	fp, r1
 800f19a:	ea5f 1828 	movs.w	r8, r8, asr #4
 800f19e:	d0da      	beq.n	800f156 <_strtod_l+0x516>
 800f1a0:	f1b8 0f1f 	cmp.w	r8, #31
 800f1a4:	dd20      	ble.n	800f1e8 <_strtod_l+0x5a8>
 800f1a6:	2400      	movs	r4, #0
 800f1a8:	46a0      	mov	r8, r4
 800f1aa:	9407      	str	r4, [sp, #28]
 800f1ac:	9405      	str	r4, [sp, #20]
 800f1ae:	2322      	movs	r3, #34	; 0x22
 800f1b0:	f04f 0a00 	mov.w	sl, #0
 800f1b4:	f04f 0b00 	mov.w	fp, #0
 800f1b8:	f8c9 3000 	str.w	r3, [r9]
 800f1bc:	e765      	b.n	800f08a <_strtod_l+0x44a>
 800f1be:	bf00      	nop
 800f1c0:	08012015 	.word	0x08012015
 800f1c4:	080120a3 	.word	0x080120a3
 800f1c8:	0801201d 	.word	0x0801201d
 800f1cc:	08012060 	.word	0x08012060
 800f1d0:	080120e0 	.word	0x080120e0
 800f1d4:	080120b8 	.word	0x080120b8
 800f1d8:	7ff00000 	.word	0x7ff00000
 800f1dc:	7ca00000 	.word	0x7ca00000
 800f1e0:	fff80000 	.word	0xfff80000
 800f1e4:	7fefffff 	.word	0x7fefffff
 800f1e8:	f018 0310 	ands.w	r3, r8, #16
 800f1ec:	bf18      	it	ne
 800f1ee:	236a      	movne	r3, #106	; 0x6a
 800f1f0:	4da0      	ldr	r5, [pc, #640]	; (800f474 <_strtod_l+0x834>)
 800f1f2:	9304      	str	r3, [sp, #16]
 800f1f4:	4650      	mov	r0, sl
 800f1f6:	4659      	mov	r1, fp
 800f1f8:	2300      	movs	r3, #0
 800f1fa:	f1b8 0f00 	cmp.w	r8, #0
 800f1fe:	f300 810a 	bgt.w	800f416 <_strtod_l+0x7d6>
 800f202:	b10b      	cbz	r3, 800f208 <_strtod_l+0x5c8>
 800f204:	4682      	mov	sl, r0
 800f206:	468b      	mov	fp, r1
 800f208:	9b04      	ldr	r3, [sp, #16]
 800f20a:	b1bb      	cbz	r3, 800f23c <_strtod_l+0x5fc>
 800f20c:	f3cb 530a 	ubfx	r3, fp, #20, #11
 800f210:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800f214:	2b00      	cmp	r3, #0
 800f216:	4659      	mov	r1, fp
 800f218:	dd10      	ble.n	800f23c <_strtod_l+0x5fc>
 800f21a:	2b1f      	cmp	r3, #31
 800f21c:	f340 8107 	ble.w	800f42e <_strtod_l+0x7ee>
 800f220:	2b34      	cmp	r3, #52	; 0x34
 800f222:	bfde      	ittt	le
 800f224:	3b20      	suble	r3, #32
 800f226:	f04f 32ff 	movle.w	r2, #4294967295
 800f22a:	fa02 f303 	lslle.w	r3, r2, r3
 800f22e:	f04f 0a00 	mov.w	sl, #0
 800f232:	bfcc      	ite	gt
 800f234:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800f238:	ea03 0b01 	andle.w	fp, r3, r1
 800f23c:	2200      	movs	r2, #0
 800f23e:	2300      	movs	r3, #0
 800f240:	4650      	mov	r0, sl
 800f242:	4659      	mov	r1, fp
 800f244:	f7f1 fc40 	bl	8000ac8 <__aeabi_dcmpeq>
 800f248:	2800      	cmp	r0, #0
 800f24a:	d1ac      	bne.n	800f1a6 <_strtod_l+0x566>
 800f24c:	9b07      	ldr	r3, [sp, #28]
 800f24e:	9300      	str	r3, [sp, #0]
 800f250:	9a05      	ldr	r2, [sp, #20]
 800f252:	9908      	ldr	r1, [sp, #32]
 800f254:	4623      	mov	r3, r4
 800f256:	4648      	mov	r0, r9
 800f258:	f001 fd9e 	bl	8010d98 <__s2b>
 800f25c:	9007      	str	r0, [sp, #28]
 800f25e:	2800      	cmp	r0, #0
 800f260:	f43f af08 	beq.w	800f074 <_strtod_l+0x434>
 800f264:	9a06      	ldr	r2, [sp, #24]
 800f266:	9b06      	ldr	r3, [sp, #24]
 800f268:	2a00      	cmp	r2, #0
 800f26a:	f1c3 0300 	rsb	r3, r3, #0
 800f26e:	bfa8      	it	ge
 800f270:	2300      	movge	r3, #0
 800f272:	930e      	str	r3, [sp, #56]	; 0x38
 800f274:	2400      	movs	r4, #0
 800f276:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800f27a:	9316      	str	r3, [sp, #88]	; 0x58
 800f27c:	46a0      	mov	r8, r4
 800f27e:	9b07      	ldr	r3, [sp, #28]
 800f280:	4648      	mov	r0, r9
 800f282:	6859      	ldr	r1, [r3, #4]
 800f284:	f001 fd02 	bl	8010c8c <_Balloc>
 800f288:	9005      	str	r0, [sp, #20]
 800f28a:	2800      	cmp	r0, #0
 800f28c:	f43f aef6 	beq.w	800f07c <_strtod_l+0x43c>
 800f290:	9b07      	ldr	r3, [sp, #28]
 800f292:	691a      	ldr	r2, [r3, #16]
 800f294:	3202      	adds	r2, #2
 800f296:	f103 010c 	add.w	r1, r3, #12
 800f29a:	0092      	lsls	r2, r2, #2
 800f29c:	300c      	adds	r0, #12
 800f29e:	f7fe fd81 	bl	800dda4 <memcpy>
 800f2a2:	aa1e      	add	r2, sp, #120	; 0x78
 800f2a4:	a91d      	add	r1, sp, #116	; 0x74
 800f2a6:	ec4b ab10 	vmov	d0, sl, fp
 800f2aa:	4648      	mov	r0, r9
 800f2ac:	e9cd ab08 	strd	sl, fp, [sp, #32]
 800f2b0:	f002 f82e 	bl	8011310 <__d2b>
 800f2b4:	901c      	str	r0, [sp, #112]	; 0x70
 800f2b6:	2800      	cmp	r0, #0
 800f2b8:	f43f aee0 	beq.w	800f07c <_strtod_l+0x43c>
 800f2bc:	2101      	movs	r1, #1
 800f2be:	4648      	mov	r0, r9
 800f2c0:	f001 fdf6 	bl	8010eb0 <__i2b>
 800f2c4:	4680      	mov	r8, r0
 800f2c6:	2800      	cmp	r0, #0
 800f2c8:	f43f aed8 	beq.w	800f07c <_strtod_l+0x43c>
 800f2cc:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 800f2ce:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800f2d0:	2e00      	cmp	r6, #0
 800f2d2:	bfab      	itete	ge
 800f2d4:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 800f2d6:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 800f2d8:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 800f2da:	9f0e      	ldrlt	r7, [sp, #56]	; 0x38
 800f2dc:	bfac      	ite	ge
 800f2de:	18f7      	addge	r7, r6, r3
 800f2e0:	1b9d      	sublt	r5, r3, r6
 800f2e2:	9b04      	ldr	r3, [sp, #16]
 800f2e4:	1af6      	subs	r6, r6, r3
 800f2e6:	4416      	add	r6, r2
 800f2e8:	4b63      	ldr	r3, [pc, #396]	; (800f478 <_strtod_l+0x838>)
 800f2ea:	3e01      	subs	r6, #1
 800f2ec:	429e      	cmp	r6, r3
 800f2ee:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800f2f2:	f280 80af 	bge.w	800f454 <_strtod_l+0x814>
 800f2f6:	1b9b      	subs	r3, r3, r6
 800f2f8:	2b1f      	cmp	r3, #31
 800f2fa:	eba2 0203 	sub.w	r2, r2, r3
 800f2fe:	f04f 0101 	mov.w	r1, #1
 800f302:	f300 809b 	bgt.w	800f43c <_strtod_l+0x7fc>
 800f306:	fa01 f303 	lsl.w	r3, r1, r3
 800f30a:	930f      	str	r3, [sp, #60]	; 0x3c
 800f30c:	2300      	movs	r3, #0
 800f30e:	930a      	str	r3, [sp, #40]	; 0x28
 800f310:	18be      	adds	r6, r7, r2
 800f312:	9b04      	ldr	r3, [sp, #16]
 800f314:	42b7      	cmp	r7, r6
 800f316:	4415      	add	r5, r2
 800f318:	441d      	add	r5, r3
 800f31a:	463b      	mov	r3, r7
 800f31c:	bfa8      	it	ge
 800f31e:	4633      	movge	r3, r6
 800f320:	42ab      	cmp	r3, r5
 800f322:	bfa8      	it	ge
 800f324:	462b      	movge	r3, r5
 800f326:	2b00      	cmp	r3, #0
 800f328:	bfc2      	ittt	gt
 800f32a:	1af6      	subgt	r6, r6, r3
 800f32c:	1aed      	subgt	r5, r5, r3
 800f32e:	1aff      	subgt	r7, r7, r3
 800f330:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f332:	b1bb      	cbz	r3, 800f364 <_strtod_l+0x724>
 800f334:	4641      	mov	r1, r8
 800f336:	461a      	mov	r2, r3
 800f338:	4648      	mov	r0, r9
 800f33a:	f001 fe59 	bl	8010ff0 <__pow5mult>
 800f33e:	4680      	mov	r8, r0
 800f340:	2800      	cmp	r0, #0
 800f342:	f43f ae9b 	beq.w	800f07c <_strtod_l+0x43c>
 800f346:	4601      	mov	r1, r0
 800f348:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800f34a:	4648      	mov	r0, r9
 800f34c:	f001 fdb9 	bl	8010ec2 <__multiply>
 800f350:	900c      	str	r0, [sp, #48]	; 0x30
 800f352:	2800      	cmp	r0, #0
 800f354:	f43f ae92 	beq.w	800f07c <_strtod_l+0x43c>
 800f358:	991c      	ldr	r1, [sp, #112]	; 0x70
 800f35a:	4648      	mov	r0, r9
 800f35c:	f001 fcca 	bl	8010cf4 <_Bfree>
 800f360:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f362:	931c      	str	r3, [sp, #112]	; 0x70
 800f364:	2e00      	cmp	r6, #0
 800f366:	dc7a      	bgt.n	800f45e <_strtod_l+0x81e>
 800f368:	9b06      	ldr	r3, [sp, #24]
 800f36a:	2b00      	cmp	r3, #0
 800f36c:	dd08      	ble.n	800f380 <_strtod_l+0x740>
 800f36e:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800f370:	9905      	ldr	r1, [sp, #20]
 800f372:	4648      	mov	r0, r9
 800f374:	f001 fe3c 	bl	8010ff0 <__pow5mult>
 800f378:	9005      	str	r0, [sp, #20]
 800f37a:	2800      	cmp	r0, #0
 800f37c:	f43f ae7e 	beq.w	800f07c <_strtod_l+0x43c>
 800f380:	2d00      	cmp	r5, #0
 800f382:	dd08      	ble.n	800f396 <_strtod_l+0x756>
 800f384:	462a      	mov	r2, r5
 800f386:	9905      	ldr	r1, [sp, #20]
 800f388:	4648      	mov	r0, r9
 800f38a:	f001 fe7f 	bl	801108c <__lshift>
 800f38e:	9005      	str	r0, [sp, #20]
 800f390:	2800      	cmp	r0, #0
 800f392:	f43f ae73 	beq.w	800f07c <_strtod_l+0x43c>
 800f396:	2f00      	cmp	r7, #0
 800f398:	dd08      	ble.n	800f3ac <_strtod_l+0x76c>
 800f39a:	4641      	mov	r1, r8
 800f39c:	463a      	mov	r2, r7
 800f39e:	4648      	mov	r0, r9
 800f3a0:	f001 fe74 	bl	801108c <__lshift>
 800f3a4:	4680      	mov	r8, r0
 800f3a6:	2800      	cmp	r0, #0
 800f3a8:	f43f ae68 	beq.w	800f07c <_strtod_l+0x43c>
 800f3ac:	9a05      	ldr	r2, [sp, #20]
 800f3ae:	991c      	ldr	r1, [sp, #112]	; 0x70
 800f3b0:	4648      	mov	r0, r9
 800f3b2:	f001 fed9 	bl	8011168 <__mdiff>
 800f3b6:	4604      	mov	r4, r0
 800f3b8:	2800      	cmp	r0, #0
 800f3ba:	f43f ae5f 	beq.w	800f07c <_strtod_l+0x43c>
 800f3be:	68c3      	ldr	r3, [r0, #12]
 800f3c0:	930c      	str	r3, [sp, #48]	; 0x30
 800f3c2:	2300      	movs	r3, #0
 800f3c4:	60c3      	str	r3, [r0, #12]
 800f3c6:	4641      	mov	r1, r8
 800f3c8:	f001 feb4 	bl	8011134 <__mcmp>
 800f3cc:	2800      	cmp	r0, #0
 800f3ce:	da55      	bge.n	800f47c <_strtod_l+0x83c>
 800f3d0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f3d2:	b9e3      	cbnz	r3, 800f40e <_strtod_l+0x7ce>
 800f3d4:	f1ba 0f00 	cmp.w	sl, #0
 800f3d8:	d119      	bne.n	800f40e <_strtod_l+0x7ce>
 800f3da:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800f3de:	b9b3      	cbnz	r3, 800f40e <_strtod_l+0x7ce>
 800f3e0:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800f3e4:	0d1b      	lsrs	r3, r3, #20
 800f3e6:	051b      	lsls	r3, r3, #20
 800f3e8:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800f3ec:	d90f      	bls.n	800f40e <_strtod_l+0x7ce>
 800f3ee:	6963      	ldr	r3, [r4, #20]
 800f3f0:	b913      	cbnz	r3, 800f3f8 <_strtod_l+0x7b8>
 800f3f2:	6923      	ldr	r3, [r4, #16]
 800f3f4:	2b01      	cmp	r3, #1
 800f3f6:	dd0a      	ble.n	800f40e <_strtod_l+0x7ce>
 800f3f8:	4621      	mov	r1, r4
 800f3fa:	2201      	movs	r2, #1
 800f3fc:	4648      	mov	r0, r9
 800f3fe:	f001 fe45 	bl	801108c <__lshift>
 800f402:	4641      	mov	r1, r8
 800f404:	4604      	mov	r4, r0
 800f406:	f001 fe95 	bl	8011134 <__mcmp>
 800f40a:	2800      	cmp	r0, #0
 800f40c:	dc67      	bgt.n	800f4de <_strtod_l+0x89e>
 800f40e:	9b04      	ldr	r3, [sp, #16]
 800f410:	2b00      	cmp	r3, #0
 800f412:	d171      	bne.n	800f4f8 <_strtod_l+0x8b8>
 800f414:	e63d      	b.n	800f092 <_strtod_l+0x452>
 800f416:	f018 0f01 	tst.w	r8, #1
 800f41a:	d004      	beq.n	800f426 <_strtod_l+0x7e6>
 800f41c:	e9d5 2300 	ldrd	r2, r3, [r5]
 800f420:	f7f1 f8ea 	bl	80005f8 <__aeabi_dmul>
 800f424:	2301      	movs	r3, #1
 800f426:	ea4f 0868 	mov.w	r8, r8, asr #1
 800f42a:	3508      	adds	r5, #8
 800f42c:	e6e5      	b.n	800f1fa <_strtod_l+0x5ba>
 800f42e:	f04f 32ff 	mov.w	r2, #4294967295
 800f432:	fa02 f303 	lsl.w	r3, r2, r3
 800f436:	ea03 0a0a 	and.w	sl, r3, sl
 800f43a:	e6ff      	b.n	800f23c <_strtod_l+0x5fc>
 800f43c:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 800f440:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 800f444:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 800f448:	36e2      	adds	r6, #226	; 0xe2
 800f44a:	fa01 f306 	lsl.w	r3, r1, r6
 800f44e:	930a      	str	r3, [sp, #40]	; 0x28
 800f450:	910f      	str	r1, [sp, #60]	; 0x3c
 800f452:	e75d      	b.n	800f310 <_strtod_l+0x6d0>
 800f454:	2300      	movs	r3, #0
 800f456:	930a      	str	r3, [sp, #40]	; 0x28
 800f458:	2301      	movs	r3, #1
 800f45a:	930f      	str	r3, [sp, #60]	; 0x3c
 800f45c:	e758      	b.n	800f310 <_strtod_l+0x6d0>
 800f45e:	4632      	mov	r2, r6
 800f460:	991c      	ldr	r1, [sp, #112]	; 0x70
 800f462:	4648      	mov	r0, r9
 800f464:	f001 fe12 	bl	801108c <__lshift>
 800f468:	901c      	str	r0, [sp, #112]	; 0x70
 800f46a:	2800      	cmp	r0, #0
 800f46c:	f47f af7c 	bne.w	800f368 <_strtod_l+0x728>
 800f470:	e604      	b.n	800f07c <_strtod_l+0x43c>
 800f472:	bf00      	nop
 800f474:	08012078 	.word	0x08012078
 800f478:	fffffc02 	.word	0xfffffc02
 800f47c:	465d      	mov	r5, fp
 800f47e:	f040 8086 	bne.w	800f58e <_strtod_l+0x94e>
 800f482:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800f484:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800f488:	b32a      	cbz	r2, 800f4d6 <_strtod_l+0x896>
 800f48a:	4aaf      	ldr	r2, [pc, #700]	; (800f748 <_strtod_l+0xb08>)
 800f48c:	4293      	cmp	r3, r2
 800f48e:	d153      	bne.n	800f538 <_strtod_l+0x8f8>
 800f490:	9b04      	ldr	r3, [sp, #16]
 800f492:	4650      	mov	r0, sl
 800f494:	b1d3      	cbz	r3, 800f4cc <_strtod_l+0x88c>
 800f496:	4aad      	ldr	r2, [pc, #692]	; (800f74c <_strtod_l+0xb0c>)
 800f498:	402a      	ands	r2, r5
 800f49a:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 800f49e:	f04f 31ff 	mov.w	r1, #4294967295
 800f4a2:	d816      	bhi.n	800f4d2 <_strtod_l+0x892>
 800f4a4:	0d12      	lsrs	r2, r2, #20
 800f4a6:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800f4aa:	fa01 f303 	lsl.w	r3, r1, r3
 800f4ae:	4298      	cmp	r0, r3
 800f4b0:	d142      	bne.n	800f538 <_strtod_l+0x8f8>
 800f4b2:	4ba7      	ldr	r3, [pc, #668]	; (800f750 <_strtod_l+0xb10>)
 800f4b4:	429d      	cmp	r5, r3
 800f4b6:	d102      	bne.n	800f4be <_strtod_l+0x87e>
 800f4b8:	3001      	adds	r0, #1
 800f4ba:	f43f addf 	beq.w	800f07c <_strtod_l+0x43c>
 800f4be:	4ba3      	ldr	r3, [pc, #652]	; (800f74c <_strtod_l+0xb0c>)
 800f4c0:	402b      	ands	r3, r5
 800f4c2:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800f4c6:	f04f 0a00 	mov.w	sl, #0
 800f4ca:	e7a0      	b.n	800f40e <_strtod_l+0x7ce>
 800f4cc:	f04f 33ff 	mov.w	r3, #4294967295
 800f4d0:	e7ed      	b.n	800f4ae <_strtod_l+0x86e>
 800f4d2:	460b      	mov	r3, r1
 800f4d4:	e7eb      	b.n	800f4ae <_strtod_l+0x86e>
 800f4d6:	bb7b      	cbnz	r3, 800f538 <_strtod_l+0x8f8>
 800f4d8:	f1ba 0f00 	cmp.w	sl, #0
 800f4dc:	d12c      	bne.n	800f538 <_strtod_l+0x8f8>
 800f4de:	9904      	ldr	r1, [sp, #16]
 800f4e0:	4a9a      	ldr	r2, [pc, #616]	; (800f74c <_strtod_l+0xb0c>)
 800f4e2:	465b      	mov	r3, fp
 800f4e4:	b1f1      	cbz	r1, 800f524 <_strtod_l+0x8e4>
 800f4e6:	ea02 010b 	and.w	r1, r2, fp
 800f4ea:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800f4ee:	dc19      	bgt.n	800f524 <_strtod_l+0x8e4>
 800f4f0:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800f4f4:	f77f ae5b 	ble.w	800f1ae <_strtod_l+0x56e>
 800f4f8:	4a96      	ldr	r2, [pc, #600]	; (800f754 <_strtod_l+0xb14>)
 800f4fa:	2300      	movs	r3, #0
 800f4fc:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 800f500:	4650      	mov	r0, sl
 800f502:	4659      	mov	r1, fp
 800f504:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800f508:	f7f1 f876 	bl	80005f8 <__aeabi_dmul>
 800f50c:	4682      	mov	sl, r0
 800f50e:	468b      	mov	fp, r1
 800f510:	2900      	cmp	r1, #0
 800f512:	f47f adbe 	bne.w	800f092 <_strtod_l+0x452>
 800f516:	2800      	cmp	r0, #0
 800f518:	f47f adbb 	bne.w	800f092 <_strtod_l+0x452>
 800f51c:	2322      	movs	r3, #34	; 0x22
 800f51e:	f8c9 3000 	str.w	r3, [r9]
 800f522:	e5b6      	b.n	800f092 <_strtod_l+0x452>
 800f524:	4013      	ands	r3, r2
 800f526:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800f52a:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800f52e:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800f532:	f04f 3aff 	mov.w	sl, #4294967295
 800f536:	e76a      	b.n	800f40e <_strtod_l+0x7ce>
 800f538:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f53a:	b193      	cbz	r3, 800f562 <_strtod_l+0x922>
 800f53c:	422b      	tst	r3, r5
 800f53e:	f43f af66 	beq.w	800f40e <_strtod_l+0x7ce>
 800f542:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f544:	9a04      	ldr	r2, [sp, #16]
 800f546:	4650      	mov	r0, sl
 800f548:	4659      	mov	r1, fp
 800f54a:	b173      	cbz	r3, 800f56a <_strtod_l+0x92a>
 800f54c:	f7ff fb5a 	bl	800ec04 <sulp>
 800f550:	4602      	mov	r2, r0
 800f552:	460b      	mov	r3, r1
 800f554:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800f558:	f7f0 fe98 	bl	800028c <__adddf3>
 800f55c:	4682      	mov	sl, r0
 800f55e:	468b      	mov	fp, r1
 800f560:	e755      	b.n	800f40e <_strtod_l+0x7ce>
 800f562:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800f564:	ea13 0f0a 	tst.w	r3, sl
 800f568:	e7e9      	b.n	800f53e <_strtod_l+0x8fe>
 800f56a:	f7ff fb4b 	bl	800ec04 <sulp>
 800f56e:	4602      	mov	r2, r0
 800f570:	460b      	mov	r3, r1
 800f572:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800f576:	f7f0 fe87 	bl	8000288 <__aeabi_dsub>
 800f57a:	2200      	movs	r2, #0
 800f57c:	2300      	movs	r3, #0
 800f57e:	4682      	mov	sl, r0
 800f580:	468b      	mov	fp, r1
 800f582:	f7f1 faa1 	bl	8000ac8 <__aeabi_dcmpeq>
 800f586:	2800      	cmp	r0, #0
 800f588:	f47f ae11 	bne.w	800f1ae <_strtod_l+0x56e>
 800f58c:	e73f      	b.n	800f40e <_strtod_l+0x7ce>
 800f58e:	4641      	mov	r1, r8
 800f590:	4620      	mov	r0, r4
 800f592:	f001 ff0c 	bl	80113ae <__ratio>
 800f596:	ec57 6b10 	vmov	r6, r7, d0
 800f59a:	2200      	movs	r2, #0
 800f59c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800f5a0:	ee10 0a10 	vmov	r0, s0
 800f5a4:	4639      	mov	r1, r7
 800f5a6:	f7f1 faa3 	bl	8000af0 <__aeabi_dcmple>
 800f5aa:	2800      	cmp	r0, #0
 800f5ac:	d077      	beq.n	800f69e <_strtod_l+0xa5e>
 800f5ae:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f5b0:	2b00      	cmp	r3, #0
 800f5b2:	d04a      	beq.n	800f64a <_strtod_l+0xa0a>
 800f5b4:	4b68      	ldr	r3, [pc, #416]	; (800f758 <_strtod_l+0xb18>)
 800f5b6:	2200      	movs	r2, #0
 800f5b8:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800f5bc:	4f66      	ldr	r7, [pc, #408]	; (800f758 <_strtod_l+0xb18>)
 800f5be:	2600      	movs	r6, #0
 800f5c0:	4b62      	ldr	r3, [pc, #392]	; (800f74c <_strtod_l+0xb0c>)
 800f5c2:	402b      	ands	r3, r5
 800f5c4:	930f      	str	r3, [sp, #60]	; 0x3c
 800f5c6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800f5c8:	4b64      	ldr	r3, [pc, #400]	; (800f75c <_strtod_l+0xb1c>)
 800f5ca:	429a      	cmp	r2, r3
 800f5cc:	f040 80ce 	bne.w	800f76c <_strtod_l+0xb2c>
 800f5d0:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800f5d4:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800f5d8:	f1a5 7b54 	sub.w	fp, r5, #55574528	; 0x3500000
 800f5dc:	ec4b ab10 	vmov	d0, sl, fp
 800f5e0:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 800f5e4:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800f5e8:	f001 fe1c 	bl	8011224 <__ulp>
 800f5ec:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800f5f0:	ec53 2b10 	vmov	r2, r3, d0
 800f5f4:	f7f1 f800 	bl	80005f8 <__aeabi_dmul>
 800f5f8:	4652      	mov	r2, sl
 800f5fa:	465b      	mov	r3, fp
 800f5fc:	f7f0 fe46 	bl	800028c <__adddf3>
 800f600:	460b      	mov	r3, r1
 800f602:	4952      	ldr	r1, [pc, #328]	; (800f74c <_strtod_l+0xb0c>)
 800f604:	4a56      	ldr	r2, [pc, #344]	; (800f760 <_strtod_l+0xb20>)
 800f606:	4019      	ands	r1, r3
 800f608:	4291      	cmp	r1, r2
 800f60a:	4682      	mov	sl, r0
 800f60c:	d95b      	bls.n	800f6c6 <_strtod_l+0xa86>
 800f60e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f610:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800f614:	4293      	cmp	r3, r2
 800f616:	d103      	bne.n	800f620 <_strtod_l+0x9e0>
 800f618:	9b08      	ldr	r3, [sp, #32]
 800f61a:	3301      	adds	r3, #1
 800f61c:	f43f ad2e 	beq.w	800f07c <_strtod_l+0x43c>
 800f620:	f8df b12c 	ldr.w	fp, [pc, #300]	; 800f750 <_strtod_l+0xb10>
 800f624:	f04f 3aff 	mov.w	sl, #4294967295
 800f628:	991c      	ldr	r1, [sp, #112]	; 0x70
 800f62a:	4648      	mov	r0, r9
 800f62c:	f001 fb62 	bl	8010cf4 <_Bfree>
 800f630:	9905      	ldr	r1, [sp, #20]
 800f632:	4648      	mov	r0, r9
 800f634:	f001 fb5e 	bl	8010cf4 <_Bfree>
 800f638:	4641      	mov	r1, r8
 800f63a:	4648      	mov	r0, r9
 800f63c:	f001 fb5a 	bl	8010cf4 <_Bfree>
 800f640:	4621      	mov	r1, r4
 800f642:	4648      	mov	r0, r9
 800f644:	f001 fb56 	bl	8010cf4 <_Bfree>
 800f648:	e619      	b.n	800f27e <_strtod_l+0x63e>
 800f64a:	f1ba 0f00 	cmp.w	sl, #0
 800f64e:	d11a      	bne.n	800f686 <_strtod_l+0xa46>
 800f650:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800f654:	b9eb      	cbnz	r3, 800f692 <_strtod_l+0xa52>
 800f656:	2200      	movs	r2, #0
 800f658:	4b3f      	ldr	r3, [pc, #252]	; (800f758 <_strtod_l+0xb18>)
 800f65a:	4630      	mov	r0, r6
 800f65c:	4639      	mov	r1, r7
 800f65e:	f7f1 fa3d 	bl	8000adc <__aeabi_dcmplt>
 800f662:	b9c8      	cbnz	r0, 800f698 <_strtod_l+0xa58>
 800f664:	4630      	mov	r0, r6
 800f666:	4639      	mov	r1, r7
 800f668:	2200      	movs	r2, #0
 800f66a:	4b3e      	ldr	r3, [pc, #248]	; (800f764 <_strtod_l+0xb24>)
 800f66c:	f7f0 ffc4 	bl	80005f8 <__aeabi_dmul>
 800f670:	4606      	mov	r6, r0
 800f672:	460f      	mov	r7, r1
 800f674:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 800f678:	9618      	str	r6, [sp, #96]	; 0x60
 800f67a:	9319      	str	r3, [sp, #100]	; 0x64
 800f67c:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 800f680:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800f684:	e79c      	b.n	800f5c0 <_strtod_l+0x980>
 800f686:	f1ba 0f01 	cmp.w	sl, #1
 800f68a:	d102      	bne.n	800f692 <_strtod_l+0xa52>
 800f68c:	2d00      	cmp	r5, #0
 800f68e:	f43f ad8e 	beq.w	800f1ae <_strtod_l+0x56e>
 800f692:	2200      	movs	r2, #0
 800f694:	4b34      	ldr	r3, [pc, #208]	; (800f768 <_strtod_l+0xb28>)
 800f696:	e78f      	b.n	800f5b8 <_strtod_l+0x978>
 800f698:	2600      	movs	r6, #0
 800f69a:	4f32      	ldr	r7, [pc, #200]	; (800f764 <_strtod_l+0xb24>)
 800f69c:	e7ea      	b.n	800f674 <_strtod_l+0xa34>
 800f69e:	4b31      	ldr	r3, [pc, #196]	; (800f764 <_strtod_l+0xb24>)
 800f6a0:	4630      	mov	r0, r6
 800f6a2:	4639      	mov	r1, r7
 800f6a4:	2200      	movs	r2, #0
 800f6a6:	f7f0 ffa7 	bl	80005f8 <__aeabi_dmul>
 800f6aa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f6ac:	4606      	mov	r6, r0
 800f6ae:	460f      	mov	r7, r1
 800f6b0:	b933      	cbnz	r3, 800f6c0 <_strtod_l+0xa80>
 800f6b2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800f6b6:	9010      	str	r0, [sp, #64]	; 0x40
 800f6b8:	9311      	str	r3, [sp, #68]	; 0x44
 800f6ba:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800f6be:	e7df      	b.n	800f680 <_strtod_l+0xa40>
 800f6c0:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 800f6c4:	e7f9      	b.n	800f6ba <_strtod_l+0xa7a>
 800f6c6:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800f6ca:	9b04      	ldr	r3, [sp, #16]
 800f6cc:	2b00      	cmp	r3, #0
 800f6ce:	d1ab      	bne.n	800f628 <_strtod_l+0x9e8>
 800f6d0:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800f6d4:	0d1b      	lsrs	r3, r3, #20
 800f6d6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800f6d8:	051b      	lsls	r3, r3, #20
 800f6da:	429a      	cmp	r2, r3
 800f6dc:	465d      	mov	r5, fp
 800f6de:	d1a3      	bne.n	800f628 <_strtod_l+0x9e8>
 800f6e0:	4639      	mov	r1, r7
 800f6e2:	4630      	mov	r0, r6
 800f6e4:	f7f1 fa38 	bl	8000b58 <__aeabi_d2iz>
 800f6e8:	f7f0 ff1c 	bl	8000524 <__aeabi_i2d>
 800f6ec:	460b      	mov	r3, r1
 800f6ee:	4602      	mov	r2, r0
 800f6f0:	4639      	mov	r1, r7
 800f6f2:	4630      	mov	r0, r6
 800f6f4:	f7f0 fdc8 	bl	8000288 <__aeabi_dsub>
 800f6f8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f6fa:	4606      	mov	r6, r0
 800f6fc:	460f      	mov	r7, r1
 800f6fe:	b933      	cbnz	r3, 800f70e <_strtod_l+0xace>
 800f700:	f1ba 0f00 	cmp.w	sl, #0
 800f704:	d103      	bne.n	800f70e <_strtod_l+0xace>
 800f706:	f3cb 0513 	ubfx	r5, fp, #0, #20
 800f70a:	2d00      	cmp	r5, #0
 800f70c:	d06d      	beq.n	800f7ea <_strtod_l+0xbaa>
 800f70e:	a30a      	add	r3, pc, #40	; (adr r3, 800f738 <_strtod_l+0xaf8>)
 800f710:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f714:	4630      	mov	r0, r6
 800f716:	4639      	mov	r1, r7
 800f718:	f7f1 f9e0 	bl	8000adc <__aeabi_dcmplt>
 800f71c:	2800      	cmp	r0, #0
 800f71e:	f47f acb8 	bne.w	800f092 <_strtod_l+0x452>
 800f722:	a307      	add	r3, pc, #28	; (adr r3, 800f740 <_strtod_l+0xb00>)
 800f724:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f728:	4630      	mov	r0, r6
 800f72a:	4639      	mov	r1, r7
 800f72c:	f7f1 f9f4 	bl	8000b18 <__aeabi_dcmpgt>
 800f730:	2800      	cmp	r0, #0
 800f732:	f43f af79 	beq.w	800f628 <_strtod_l+0x9e8>
 800f736:	e4ac      	b.n	800f092 <_strtod_l+0x452>
 800f738:	94a03595 	.word	0x94a03595
 800f73c:	3fdfffff 	.word	0x3fdfffff
 800f740:	35afe535 	.word	0x35afe535
 800f744:	3fe00000 	.word	0x3fe00000
 800f748:	000fffff 	.word	0x000fffff
 800f74c:	7ff00000 	.word	0x7ff00000
 800f750:	7fefffff 	.word	0x7fefffff
 800f754:	39500000 	.word	0x39500000
 800f758:	3ff00000 	.word	0x3ff00000
 800f75c:	7fe00000 	.word	0x7fe00000
 800f760:	7c9fffff 	.word	0x7c9fffff
 800f764:	3fe00000 	.word	0x3fe00000
 800f768:	bff00000 	.word	0xbff00000
 800f76c:	9b04      	ldr	r3, [sp, #16]
 800f76e:	b333      	cbz	r3, 800f7be <_strtod_l+0xb7e>
 800f770:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800f772:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800f776:	d822      	bhi.n	800f7be <_strtod_l+0xb7e>
 800f778:	a327      	add	r3, pc, #156	; (adr r3, 800f818 <_strtod_l+0xbd8>)
 800f77a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f77e:	4630      	mov	r0, r6
 800f780:	4639      	mov	r1, r7
 800f782:	f7f1 f9b5 	bl	8000af0 <__aeabi_dcmple>
 800f786:	b1a0      	cbz	r0, 800f7b2 <_strtod_l+0xb72>
 800f788:	4639      	mov	r1, r7
 800f78a:	4630      	mov	r0, r6
 800f78c:	f7f1 fa0c 	bl	8000ba8 <__aeabi_d2uiz>
 800f790:	2800      	cmp	r0, #0
 800f792:	bf08      	it	eq
 800f794:	2001      	moveq	r0, #1
 800f796:	f7f0 feb5 	bl	8000504 <__aeabi_ui2d>
 800f79a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f79c:	4606      	mov	r6, r0
 800f79e:	460f      	mov	r7, r1
 800f7a0:	bb03      	cbnz	r3, 800f7e4 <_strtod_l+0xba4>
 800f7a2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800f7a6:	9012      	str	r0, [sp, #72]	; 0x48
 800f7a8:	9313      	str	r3, [sp, #76]	; 0x4c
 800f7aa:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 800f7ae:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800f7b2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f7b4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800f7b6:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800f7ba:	1a9b      	subs	r3, r3, r2
 800f7bc:	930b      	str	r3, [sp, #44]	; 0x2c
 800f7be:	ed9d 0b08 	vldr	d0, [sp, #32]
 800f7c2:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
 800f7c6:	f001 fd2d 	bl	8011224 <__ulp>
 800f7ca:	4650      	mov	r0, sl
 800f7cc:	ec53 2b10 	vmov	r2, r3, d0
 800f7d0:	4659      	mov	r1, fp
 800f7d2:	f7f0 ff11 	bl	80005f8 <__aeabi_dmul>
 800f7d6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800f7da:	f7f0 fd57 	bl	800028c <__adddf3>
 800f7de:	4682      	mov	sl, r0
 800f7e0:	468b      	mov	fp, r1
 800f7e2:	e772      	b.n	800f6ca <_strtod_l+0xa8a>
 800f7e4:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48
 800f7e8:	e7df      	b.n	800f7aa <_strtod_l+0xb6a>
 800f7ea:	a30d      	add	r3, pc, #52	; (adr r3, 800f820 <_strtod_l+0xbe0>)
 800f7ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f7f0:	f7f1 f974 	bl	8000adc <__aeabi_dcmplt>
 800f7f4:	e79c      	b.n	800f730 <_strtod_l+0xaf0>
 800f7f6:	2300      	movs	r3, #0
 800f7f8:	930d      	str	r3, [sp, #52]	; 0x34
 800f7fa:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800f7fc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800f7fe:	6013      	str	r3, [r2, #0]
 800f800:	f7ff ba61 	b.w	800ecc6 <_strtod_l+0x86>
 800f804:	2b65      	cmp	r3, #101	; 0x65
 800f806:	f04f 0200 	mov.w	r2, #0
 800f80a:	f43f ab4e 	beq.w	800eeaa <_strtod_l+0x26a>
 800f80e:	2101      	movs	r1, #1
 800f810:	4614      	mov	r4, r2
 800f812:	9104      	str	r1, [sp, #16]
 800f814:	f7ff bacb 	b.w	800edae <_strtod_l+0x16e>
 800f818:	ffc00000 	.word	0xffc00000
 800f81c:	41dfffff 	.word	0x41dfffff
 800f820:	94a03595 	.word	0x94a03595
 800f824:	3fcfffff 	.word	0x3fcfffff

0800f828 <_strtod_r>:
 800f828:	4b05      	ldr	r3, [pc, #20]	; (800f840 <_strtod_r+0x18>)
 800f82a:	681b      	ldr	r3, [r3, #0]
 800f82c:	b410      	push	{r4}
 800f82e:	6a1b      	ldr	r3, [r3, #32]
 800f830:	4c04      	ldr	r4, [pc, #16]	; (800f844 <_strtod_r+0x1c>)
 800f832:	2b00      	cmp	r3, #0
 800f834:	bf08      	it	eq
 800f836:	4623      	moveq	r3, r4
 800f838:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f83c:	f7ff ba00 	b.w	800ec40 <_strtod_l>
 800f840:	20000184 	.word	0x20000184
 800f844:	200001e8 	.word	0x200001e8

0800f848 <_strtol_l.isra.0>:
 800f848:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f84c:	4680      	mov	r8, r0
 800f84e:	4689      	mov	r9, r1
 800f850:	4692      	mov	sl, r2
 800f852:	461e      	mov	r6, r3
 800f854:	460f      	mov	r7, r1
 800f856:	463d      	mov	r5, r7
 800f858:	9808      	ldr	r0, [sp, #32]
 800f85a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800f85e:	f001 f9ed 	bl	8010c3c <__locale_ctype_ptr_l>
 800f862:	4420      	add	r0, r4
 800f864:	7843      	ldrb	r3, [r0, #1]
 800f866:	f013 0308 	ands.w	r3, r3, #8
 800f86a:	d132      	bne.n	800f8d2 <_strtol_l.isra.0+0x8a>
 800f86c:	2c2d      	cmp	r4, #45	; 0x2d
 800f86e:	d132      	bne.n	800f8d6 <_strtol_l.isra.0+0x8e>
 800f870:	787c      	ldrb	r4, [r7, #1]
 800f872:	1cbd      	adds	r5, r7, #2
 800f874:	2201      	movs	r2, #1
 800f876:	2e00      	cmp	r6, #0
 800f878:	d05d      	beq.n	800f936 <_strtol_l.isra.0+0xee>
 800f87a:	2e10      	cmp	r6, #16
 800f87c:	d109      	bne.n	800f892 <_strtol_l.isra.0+0x4a>
 800f87e:	2c30      	cmp	r4, #48	; 0x30
 800f880:	d107      	bne.n	800f892 <_strtol_l.isra.0+0x4a>
 800f882:	782b      	ldrb	r3, [r5, #0]
 800f884:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800f888:	2b58      	cmp	r3, #88	; 0x58
 800f88a:	d14f      	bne.n	800f92c <_strtol_l.isra.0+0xe4>
 800f88c:	786c      	ldrb	r4, [r5, #1]
 800f88e:	2610      	movs	r6, #16
 800f890:	3502      	adds	r5, #2
 800f892:	2a00      	cmp	r2, #0
 800f894:	bf14      	ite	ne
 800f896:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 800f89a:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 800f89e:	2700      	movs	r7, #0
 800f8a0:	fbb1 fcf6 	udiv	ip, r1, r6
 800f8a4:	4638      	mov	r0, r7
 800f8a6:	fb06 1e1c 	mls	lr, r6, ip, r1
 800f8aa:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 800f8ae:	2b09      	cmp	r3, #9
 800f8b0:	d817      	bhi.n	800f8e2 <_strtol_l.isra.0+0x9a>
 800f8b2:	461c      	mov	r4, r3
 800f8b4:	42a6      	cmp	r6, r4
 800f8b6:	dd23      	ble.n	800f900 <_strtol_l.isra.0+0xb8>
 800f8b8:	1c7b      	adds	r3, r7, #1
 800f8ba:	d007      	beq.n	800f8cc <_strtol_l.isra.0+0x84>
 800f8bc:	4584      	cmp	ip, r0
 800f8be:	d31c      	bcc.n	800f8fa <_strtol_l.isra.0+0xb2>
 800f8c0:	d101      	bne.n	800f8c6 <_strtol_l.isra.0+0x7e>
 800f8c2:	45a6      	cmp	lr, r4
 800f8c4:	db19      	blt.n	800f8fa <_strtol_l.isra.0+0xb2>
 800f8c6:	fb00 4006 	mla	r0, r0, r6, r4
 800f8ca:	2701      	movs	r7, #1
 800f8cc:	f815 4b01 	ldrb.w	r4, [r5], #1
 800f8d0:	e7eb      	b.n	800f8aa <_strtol_l.isra.0+0x62>
 800f8d2:	462f      	mov	r7, r5
 800f8d4:	e7bf      	b.n	800f856 <_strtol_l.isra.0+0xe>
 800f8d6:	2c2b      	cmp	r4, #43	; 0x2b
 800f8d8:	bf04      	itt	eq
 800f8da:	1cbd      	addeq	r5, r7, #2
 800f8dc:	787c      	ldrbeq	r4, [r7, #1]
 800f8de:	461a      	mov	r2, r3
 800f8e0:	e7c9      	b.n	800f876 <_strtol_l.isra.0+0x2e>
 800f8e2:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 800f8e6:	2b19      	cmp	r3, #25
 800f8e8:	d801      	bhi.n	800f8ee <_strtol_l.isra.0+0xa6>
 800f8ea:	3c37      	subs	r4, #55	; 0x37
 800f8ec:	e7e2      	b.n	800f8b4 <_strtol_l.isra.0+0x6c>
 800f8ee:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 800f8f2:	2b19      	cmp	r3, #25
 800f8f4:	d804      	bhi.n	800f900 <_strtol_l.isra.0+0xb8>
 800f8f6:	3c57      	subs	r4, #87	; 0x57
 800f8f8:	e7dc      	b.n	800f8b4 <_strtol_l.isra.0+0x6c>
 800f8fa:	f04f 37ff 	mov.w	r7, #4294967295
 800f8fe:	e7e5      	b.n	800f8cc <_strtol_l.isra.0+0x84>
 800f900:	1c7b      	adds	r3, r7, #1
 800f902:	d108      	bne.n	800f916 <_strtol_l.isra.0+0xce>
 800f904:	2322      	movs	r3, #34	; 0x22
 800f906:	f8c8 3000 	str.w	r3, [r8]
 800f90a:	4608      	mov	r0, r1
 800f90c:	f1ba 0f00 	cmp.w	sl, #0
 800f910:	d107      	bne.n	800f922 <_strtol_l.isra.0+0xda>
 800f912:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f916:	b102      	cbz	r2, 800f91a <_strtol_l.isra.0+0xd2>
 800f918:	4240      	negs	r0, r0
 800f91a:	f1ba 0f00 	cmp.w	sl, #0
 800f91e:	d0f8      	beq.n	800f912 <_strtol_l.isra.0+0xca>
 800f920:	b10f      	cbz	r7, 800f926 <_strtol_l.isra.0+0xde>
 800f922:	f105 39ff 	add.w	r9, r5, #4294967295
 800f926:	f8ca 9000 	str.w	r9, [sl]
 800f92a:	e7f2      	b.n	800f912 <_strtol_l.isra.0+0xca>
 800f92c:	2430      	movs	r4, #48	; 0x30
 800f92e:	2e00      	cmp	r6, #0
 800f930:	d1af      	bne.n	800f892 <_strtol_l.isra.0+0x4a>
 800f932:	2608      	movs	r6, #8
 800f934:	e7ad      	b.n	800f892 <_strtol_l.isra.0+0x4a>
 800f936:	2c30      	cmp	r4, #48	; 0x30
 800f938:	d0a3      	beq.n	800f882 <_strtol_l.isra.0+0x3a>
 800f93a:	260a      	movs	r6, #10
 800f93c:	e7a9      	b.n	800f892 <_strtol_l.isra.0+0x4a>
	...

0800f940 <_strtol_r>:
 800f940:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f942:	4c06      	ldr	r4, [pc, #24]	; (800f95c <_strtol_r+0x1c>)
 800f944:	4d06      	ldr	r5, [pc, #24]	; (800f960 <_strtol_r+0x20>)
 800f946:	6824      	ldr	r4, [r4, #0]
 800f948:	6a24      	ldr	r4, [r4, #32]
 800f94a:	2c00      	cmp	r4, #0
 800f94c:	bf08      	it	eq
 800f94e:	462c      	moveq	r4, r5
 800f950:	9400      	str	r4, [sp, #0]
 800f952:	f7ff ff79 	bl	800f848 <_strtol_l.isra.0>
 800f956:	b003      	add	sp, #12
 800f958:	bd30      	pop	{r4, r5, pc}
 800f95a:	bf00      	nop
 800f95c:	20000184 	.word	0x20000184
 800f960:	200001e8 	.word	0x200001e8

0800f964 <quorem>:
 800f964:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f968:	6903      	ldr	r3, [r0, #16]
 800f96a:	690c      	ldr	r4, [r1, #16]
 800f96c:	42a3      	cmp	r3, r4
 800f96e:	4680      	mov	r8, r0
 800f970:	f2c0 8082 	blt.w	800fa78 <quorem+0x114>
 800f974:	3c01      	subs	r4, #1
 800f976:	f101 0714 	add.w	r7, r1, #20
 800f97a:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 800f97e:	f100 0614 	add.w	r6, r0, #20
 800f982:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800f986:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 800f98a:	eb06 030c 	add.w	r3, r6, ip
 800f98e:	3501      	adds	r5, #1
 800f990:	eb07 090c 	add.w	r9, r7, ip
 800f994:	9301      	str	r3, [sp, #4]
 800f996:	fbb0 f5f5 	udiv	r5, r0, r5
 800f99a:	b395      	cbz	r5, 800fa02 <quorem+0x9e>
 800f99c:	f04f 0a00 	mov.w	sl, #0
 800f9a0:	4638      	mov	r0, r7
 800f9a2:	46b6      	mov	lr, r6
 800f9a4:	46d3      	mov	fp, sl
 800f9a6:	f850 2b04 	ldr.w	r2, [r0], #4
 800f9aa:	b293      	uxth	r3, r2
 800f9ac:	fb05 a303 	mla	r3, r5, r3, sl
 800f9b0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800f9b4:	b29b      	uxth	r3, r3
 800f9b6:	ebab 0303 	sub.w	r3, fp, r3
 800f9ba:	0c12      	lsrs	r2, r2, #16
 800f9bc:	f8de b000 	ldr.w	fp, [lr]
 800f9c0:	fb05 a202 	mla	r2, r5, r2, sl
 800f9c4:	fa13 f38b 	uxtah	r3, r3, fp
 800f9c8:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 800f9cc:	fa1f fb82 	uxth.w	fp, r2
 800f9d0:	f8de 2000 	ldr.w	r2, [lr]
 800f9d4:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 800f9d8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800f9dc:	b29b      	uxth	r3, r3
 800f9de:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800f9e2:	4581      	cmp	r9, r0
 800f9e4:	ea4f 4b22 	mov.w	fp, r2, asr #16
 800f9e8:	f84e 3b04 	str.w	r3, [lr], #4
 800f9ec:	d2db      	bcs.n	800f9a6 <quorem+0x42>
 800f9ee:	f856 300c 	ldr.w	r3, [r6, ip]
 800f9f2:	b933      	cbnz	r3, 800fa02 <quorem+0x9e>
 800f9f4:	9b01      	ldr	r3, [sp, #4]
 800f9f6:	3b04      	subs	r3, #4
 800f9f8:	429e      	cmp	r6, r3
 800f9fa:	461a      	mov	r2, r3
 800f9fc:	d330      	bcc.n	800fa60 <quorem+0xfc>
 800f9fe:	f8c8 4010 	str.w	r4, [r8, #16]
 800fa02:	4640      	mov	r0, r8
 800fa04:	f001 fb96 	bl	8011134 <__mcmp>
 800fa08:	2800      	cmp	r0, #0
 800fa0a:	db25      	blt.n	800fa58 <quorem+0xf4>
 800fa0c:	3501      	adds	r5, #1
 800fa0e:	4630      	mov	r0, r6
 800fa10:	f04f 0c00 	mov.w	ip, #0
 800fa14:	f857 2b04 	ldr.w	r2, [r7], #4
 800fa18:	f8d0 e000 	ldr.w	lr, [r0]
 800fa1c:	b293      	uxth	r3, r2
 800fa1e:	ebac 0303 	sub.w	r3, ip, r3
 800fa22:	0c12      	lsrs	r2, r2, #16
 800fa24:	fa13 f38e 	uxtah	r3, r3, lr
 800fa28:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800fa2c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800fa30:	b29b      	uxth	r3, r3
 800fa32:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800fa36:	45b9      	cmp	r9, r7
 800fa38:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800fa3c:	f840 3b04 	str.w	r3, [r0], #4
 800fa40:	d2e8      	bcs.n	800fa14 <quorem+0xb0>
 800fa42:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800fa46:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800fa4a:	b92a      	cbnz	r2, 800fa58 <quorem+0xf4>
 800fa4c:	3b04      	subs	r3, #4
 800fa4e:	429e      	cmp	r6, r3
 800fa50:	461a      	mov	r2, r3
 800fa52:	d30b      	bcc.n	800fa6c <quorem+0x108>
 800fa54:	f8c8 4010 	str.w	r4, [r8, #16]
 800fa58:	4628      	mov	r0, r5
 800fa5a:	b003      	add	sp, #12
 800fa5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fa60:	6812      	ldr	r2, [r2, #0]
 800fa62:	3b04      	subs	r3, #4
 800fa64:	2a00      	cmp	r2, #0
 800fa66:	d1ca      	bne.n	800f9fe <quorem+0x9a>
 800fa68:	3c01      	subs	r4, #1
 800fa6a:	e7c5      	b.n	800f9f8 <quorem+0x94>
 800fa6c:	6812      	ldr	r2, [r2, #0]
 800fa6e:	3b04      	subs	r3, #4
 800fa70:	2a00      	cmp	r2, #0
 800fa72:	d1ef      	bne.n	800fa54 <quorem+0xf0>
 800fa74:	3c01      	subs	r4, #1
 800fa76:	e7ea      	b.n	800fa4e <quorem+0xea>
 800fa78:	2000      	movs	r0, #0
 800fa7a:	e7ee      	b.n	800fa5a <quorem+0xf6>
 800fa7c:	0000      	movs	r0, r0
	...

0800fa80 <_dtoa_r>:
 800fa80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fa84:	ec57 6b10 	vmov	r6, r7, d0
 800fa88:	b097      	sub	sp, #92	; 0x5c
 800fa8a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800fa8c:	9106      	str	r1, [sp, #24]
 800fa8e:	4604      	mov	r4, r0
 800fa90:	920b      	str	r2, [sp, #44]	; 0x2c
 800fa92:	9312      	str	r3, [sp, #72]	; 0x48
 800fa94:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800fa98:	e9cd 6700 	strd	r6, r7, [sp]
 800fa9c:	b93d      	cbnz	r5, 800faae <_dtoa_r+0x2e>
 800fa9e:	2010      	movs	r0, #16
 800faa0:	f7fe f970 	bl	800dd84 <malloc>
 800faa4:	6260      	str	r0, [r4, #36]	; 0x24
 800faa6:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800faaa:	6005      	str	r5, [r0, #0]
 800faac:	60c5      	str	r5, [r0, #12]
 800faae:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800fab0:	6819      	ldr	r1, [r3, #0]
 800fab2:	b151      	cbz	r1, 800faca <_dtoa_r+0x4a>
 800fab4:	685a      	ldr	r2, [r3, #4]
 800fab6:	604a      	str	r2, [r1, #4]
 800fab8:	2301      	movs	r3, #1
 800faba:	4093      	lsls	r3, r2
 800fabc:	608b      	str	r3, [r1, #8]
 800fabe:	4620      	mov	r0, r4
 800fac0:	f001 f918 	bl	8010cf4 <_Bfree>
 800fac4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800fac6:	2200      	movs	r2, #0
 800fac8:	601a      	str	r2, [r3, #0]
 800faca:	1e3b      	subs	r3, r7, #0
 800facc:	bfbb      	ittet	lt
 800face:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800fad2:	9301      	strlt	r3, [sp, #4]
 800fad4:	2300      	movge	r3, #0
 800fad6:	2201      	movlt	r2, #1
 800fad8:	bfac      	ite	ge
 800fada:	f8c8 3000 	strge.w	r3, [r8]
 800fade:	f8c8 2000 	strlt.w	r2, [r8]
 800fae2:	4baf      	ldr	r3, [pc, #700]	; (800fda0 <_dtoa_r+0x320>)
 800fae4:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800fae8:	ea33 0308 	bics.w	r3, r3, r8
 800faec:	d114      	bne.n	800fb18 <_dtoa_r+0x98>
 800faee:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800faf0:	f242 730f 	movw	r3, #9999	; 0x270f
 800faf4:	6013      	str	r3, [r2, #0]
 800faf6:	9b00      	ldr	r3, [sp, #0]
 800faf8:	b923      	cbnz	r3, 800fb04 <_dtoa_r+0x84>
 800fafa:	f3c8 0013 	ubfx	r0, r8, #0, #20
 800fafe:	2800      	cmp	r0, #0
 800fb00:	f000 8542 	beq.w	8010588 <_dtoa_r+0xb08>
 800fb04:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800fb06:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 800fdb4 <_dtoa_r+0x334>
 800fb0a:	2b00      	cmp	r3, #0
 800fb0c:	f000 8544 	beq.w	8010598 <_dtoa_r+0xb18>
 800fb10:	f10b 0303 	add.w	r3, fp, #3
 800fb14:	f000 bd3e 	b.w	8010594 <_dtoa_r+0xb14>
 800fb18:	e9dd 6700 	ldrd	r6, r7, [sp]
 800fb1c:	2200      	movs	r2, #0
 800fb1e:	2300      	movs	r3, #0
 800fb20:	4630      	mov	r0, r6
 800fb22:	4639      	mov	r1, r7
 800fb24:	f7f0 ffd0 	bl	8000ac8 <__aeabi_dcmpeq>
 800fb28:	4681      	mov	r9, r0
 800fb2a:	b168      	cbz	r0, 800fb48 <_dtoa_r+0xc8>
 800fb2c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800fb2e:	2301      	movs	r3, #1
 800fb30:	6013      	str	r3, [r2, #0]
 800fb32:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800fb34:	2b00      	cmp	r3, #0
 800fb36:	f000 8524 	beq.w	8010582 <_dtoa_r+0xb02>
 800fb3a:	4b9a      	ldr	r3, [pc, #616]	; (800fda4 <_dtoa_r+0x324>)
 800fb3c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800fb3e:	f103 3bff 	add.w	fp, r3, #4294967295
 800fb42:	6013      	str	r3, [r2, #0]
 800fb44:	f000 bd28 	b.w	8010598 <_dtoa_r+0xb18>
 800fb48:	aa14      	add	r2, sp, #80	; 0x50
 800fb4a:	a915      	add	r1, sp, #84	; 0x54
 800fb4c:	ec47 6b10 	vmov	d0, r6, r7
 800fb50:	4620      	mov	r0, r4
 800fb52:	f001 fbdd 	bl	8011310 <__d2b>
 800fb56:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800fb5a:	9004      	str	r0, [sp, #16]
 800fb5c:	2d00      	cmp	r5, #0
 800fb5e:	d07c      	beq.n	800fc5a <_dtoa_r+0x1da>
 800fb60:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800fb64:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 800fb68:	46b2      	mov	sl, r6
 800fb6a:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 800fb6e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800fb72:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 800fb76:	2200      	movs	r2, #0
 800fb78:	4b8b      	ldr	r3, [pc, #556]	; (800fda8 <_dtoa_r+0x328>)
 800fb7a:	4650      	mov	r0, sl
 800fb7c:	4659      	mov	r1, fp
 800fb7e:	f7f0 fb83 	bl	8000288 <__aeabi_dsub>
 800fb82:	a381      	add	r3, pc, #516	; (adr r3, 800fd88 <_dtoa_r+0x308>)
 800fb84:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fb88:	f7f0 fd36 	bl	80005f8 <__aeabi_dmul>
 800fb8c:	a380      	add	r3, pc, #512	; (adr r3, 800fd90 <_dtoa_r+0x310>)
 800fb8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fb92:	f7f0 fb7b 	bl	800028c <__adddf3>
 800fb96:	4606      	mov	r6, r0
 800fb98:	4628      	mov	r0, r5
 800fb9a:	460f      	mov	r7, r1
 800fb9c:	f7f0 fcc2 	bl	8000524 <__aeabi_i2d>
 800fba0:	a37d      	add	r3, pc, #500	; (adr r3, 800fd98 <_dtoa_r+0x318>)
 800fba2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fba6:	f7f0 fd27 	bl	80005f8 <__aeabi_dmul>
 800fbaa:	4602      	mov	r2, r0
 800fbac:	460b      	mov	r3, r1
 800fbae:	4630      	mov	r0, r6
 800fbb0:	4639      	mov	r1, r7
 800fbb2:	f7f0 fb6b 	bl	800028c <__adddf3>
 800fbb6:	4606      	mov	r6, r0
 800fbb8:	460f      	mov	r7, r1
 800fbba:	f7f0 ffcd 	bl	8000b58 <__aeabi_d2iz>
 800fbbe:	2200      	movs	r2, #0
 800fbc0:	4682      	mov	sl, r0
 800fbc2:	2300      	movs	r3, #0
 800fbc4:	4630      	mov	r0, r6
 800fbc6:	4639      	mov	r1, r7
 800fbc8:	f7f0 ff88 	bl	8000adc <__aeabi_dcmplt>
 800fbcc:	b148      	cbz	r0, 800fbe2 <_dtoa_r+0x162>
 800fbce:	4650      	mov	r0, sl
 800fbd0:	f7f0 fca8 	bl	8000524 <__aeabi_i2d>
 800fbd4:	4632      	mov	r2, r6
 800fbd6:	463b      	mov	r3, r7
 800fbd8:	f7f0 ff76 	bl	8000ac8 <__aeabi_dcmpeq>
 800fbdc:	b908      	cbnz	r0, 800fbe2 <_dtoa_r+0x162>
 800fbde:	f10a 3aff 	add.w	sl, sl, #4294967295
 800fbe2:	f1ba 0f16 	cmp.w	sl, #22
 800fbe6:	d859      	bhi.n	800fc9c <_dtoa_r+0x21c>
 800fbe8:	4970      	ldr	r1, [pc, #448]	; (800fdac <_dtoa_r+0x32c>)
 800fbea:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800fbee:	e9dd 2300 	ldrd	r2, r3, [sp]
 800fbf2:	e9d1 0100 	ldrd	r0, r1, [r1]
 800fbf6:	f7f0 ff8f 	bl	8000b18 <__aeabi_dcmpgt>
 800fbfa:	2800      	cmp	r0, #0
 800fbfc:	d050      	beq.n	800fca0 <_dtoa_r+0x220>
 800fbfe:	f10a 3aff 	add.w	sl, sl, #4294967295
 800fc02:	2300      	movs	r3, #0
 800fc04:	930f      	str	r3, [sp, #60]	; 0x3c
 800fc06:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800fc08:	1b5d      	subs	r5, r3, r5
 800fc0a:	f1b5 0801 	subs.w	r8, r5, #1
 800fc0e:	bf49      	itett	mi
 800fc10:	f1c5 0301 	rsbmi	r3, r5, #1
 800fc14:	2300      	movpl	r3, #0
 800fc16:	9305      	strmi	r3, [sp, #20]
 800fc18:	f04f 0800 	movmi.w	r8, #0
 800fc1c:	bf58      	it	pl
 800fc1e:	9305      	strpl	r3, [sp, #20]
 800fc20:	f1ba 0f00 	cmp.w	sl, #0
 800fc24:	db3e      	blt.n	800fca4 <_dtoa_r+0x224>
 800fc26:	2300      	movs	r3, #0
 800fc28:	44d0      	add	r8, sl
 800fc2a:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800fc2e:	9307      	str	r3, [sp, #28]
 800fc30:	9b06      	ldr	r3, [sp, #24]
 800fc32:	2b09      	cmp	r3, #9
 800fc34:	f200 8090 	bhi.w	800fd58 <_dtoa_r+0x2d8>
 800fc38:	2b05      	cmp	r3, #5
 800fc3a:	bfc4      	itt	gt
 800fc3c:	3b04      	subgt	r3, #4
 800fc3e:	9306      	strgt	r3, [sp, #24]
 800fc40:	9b06      	ldr	r3, [sp, #24]
 800fc42:	f1a3 0302 	sub.w	r3, r3, #2
 800fc46:	bfcc      	ite	gt
 800fc48:	2500      	movgt	r5, #0
 800fc4a:	2501      	movle	r5, #1
 800fc4c:	2b03      	cmp	r3, #3
 800fc4e:	f200 808f 	bhi.w	800fd70 <_dtoa_r+0x2f0>
 800fc52:	e8df f003 	tbb	[pc, r3]
 800fc56:	7f7d      	.short	0x7f7d
 800fc58:	7131      	.short	0x7131
 800fc5a:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 800fc5e:	441d      	add	r5, r3
 800fc60:	f205 4032 	addw	r0, r5, #1074	; 0x432
 800fc64:	2820      	cmp	r0, #32
 800fc66:	dd13      	ble.n	800fc90 <_dtoa_r+0x210>
 800fc68:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 800fc6c:	9b00      	ldr	r3, [sp, #0]
 800fc6e:	fa08 f800 	lsl.w	r8, r8, r0
 800fc72:	f205 4012 	addw	r0, r5, #1042	; 0x412
 800fc76:	fa23 f000 	lsr.w	r0, r3, r0
 800fc7a:	ea48 0000 	orr.w	r0, r8, r0
 800fc7e:	f7f0 fc41 	bl	8000504 <__aeabi_ui2d>
 800fc82:	2301      	movs	r3, #1
 800fc84:	4682      	mov	sl, r0
 800fc86:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 800fc8a:	3d01      	subs	r5, #1
 800fc8c:	9313      	str	r3, [sp, #76]	; 0x4c
 800fc8e:	e772      	b.n	800fb76 <_dtoa_r+0xf6>
 800fc90:	9b00      	ldr	r3, [sp, #0]
 800fc92:	f1c0 0020 	rsb	r0, r0, #32
 800fc96:	fa03 f000 	lsl.w	r0, r3, r0
 800fc9a:	e7f0      	b.n	800fc7e <_dtoa_r+0x1fe>
 800fc9c:	2301      	movs	r3, #1
 800fc9e:	e7b1      	b.n	800fc04 <_dtoa_r+0x184>
 800fca0:	900f      	str	r0, [sp, #60]	; 0x3c
 800fca2:	e7b0      	b.n	800fc06 <_dtoa_r+0x186>
 800fca4:	9b05      	ldr	r3, [sp, #20]
 800fca6:	eba3 030a 	sub.w	r3, r3, sl
 800fcaa:	9305      	str	r3, [sp, #20]
 800fcac:	f1ca 0300 	rsb	r3, sl, #0
 800fcb0:	9307      	str	r3, [sp, #28]
 800fcb2:	2300      	movs	r3, #0
 800fcb4:	930e      	str	r3, [sp, #56]	; 0x38
 800fcb6:	e7bb      	b.n	800fc30 <_dtoa_r+0x1b0>
 800fcb8:	2301      	movs	r3, #1
 800fcba:	930a      	str	r3, [sp, #40]	; 0x28
 800fcbc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800fcbe:	2b00      	cmp	r3, #0
 800fcc0:	dd59      	ble.n	800fd76 <_dtoa_r+0x2f6>
 800fcc2:	9302      	str	r3, [sp, #8]
 800fcc4:	4699      	mov	r9, r3
 800fcc6:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800fcc8:	2200      	movs	r2, #0
 800fcca:	6072      	str	r2, [r6, #4]
 800fccc:	2204      	movs	r2, #4
 800fcce:	f102 0014 	add.w	r0, r2, #20
 800fcd2:	4298      	cmp	r0, r3
 800fcd4:	6871      	ldr	r1, [r6, #4]
 800fcd6:	d953      	bls.n	800fd80 <_dtoa_r+0x300>
 800fcd8:	4620      	mov	r0, r4
 800fcda:	f000 ffd7 	bl	8010c8c <_Balloc>
 800fcde:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800fce0:	6030      	str	r0, [r6, #0]
 800fce2:	f1b9 0f0e 	cmp.w	r9, #14
 800fce6:	f8d3 b000 	ldr.w	fp, [r3]
 800fcea:	f200 80e6 	bhi.w	800feba <_dtoa_r+0x43a>
 800fcee:	2d00      	cmp	r5, #0
 800fcf0:	f000 80e3 	beq.w	800feba <_dtoa_r+0x43a>
 800fcf4:	ed9d 7b00 	vldr	d7, [sp]
 800fcf8:	f1ba 0f00 	cmp.w	sl, #0
 800fcfc:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 800fd00:	dd74      	ble.n	800fdec <_dtoa_r+0x36c>
 800fd02:	4a2a      	ldr	r2, [pc, #168]	; (800fdac <_dtoa_r+0x32c>)
 800fd04:	f00a 030f 	and.w	r3, sl, #15
 800fd08:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800fd0c:	ed93 7b00 	vldr	d7, [r3]
 800fd10:	ea4f 162a 	mov.w	r6, sl, asr #4
 800fd14:	06f0      	lsls	r0, r6, #27
 800fd16:	ed8d 7b08 	vstr	d7, [sp, #32]
 800fd1a:	d565      	bpl.n	800fde8 <_dtoa_r+0x368>
 800fd1c:	4b24      	ldr	r3, [pc, #144]	; (800fdb0 <_dtoa_r+0x330>)
 800fd1e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800fd22:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800fd26:	f7f0 fd91 	bl	800084c <__aeabi_ddiv>
 800fd2a:	e9cd 0100 	strd	r0, r1, [sp]
 800fd2e:	f006 060f 	and.w	r6, r6, #15
 800fd32:	2503      	movs	r5, #3
 800fd34:	4f1e      	ldr	r7, [pc, #120]	; (800fdb0 <_dtoa_r+0x330>)
 800fd36:	e04c      	b.n	800fdd2 <_dtoa_r+0x352>
 800fd38:	2301      	movs	r3, #1
 800fd3a:	930a      	str	r3, [sp, #40]	; 0x28
 800fd3c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800fd3e:	4453      	add	r3, sl
 800fd40:	f103 0901 	add.w	r9, r3, #1
 800fd44:	9302      	str	r3, [sp, #8]
 800fd46:	464b      	mov	r3, r9
 800fd48:	2b01      	cmp	r3, #1
 800fd4a:	bfb8      	it	lt
 800fd4c:	2301      	movlt	r3, #1
 800fd4e:	e7ba      	b.n	800fcc6 <_dtoa_r+0x246>
 800fd50:	2300      	movs	r3, #0
 800fd52:	e7b2      	b.n	800fcba <_dtoa_r+0x23a>
 800fd54:	2300      	movs	r3, #0
 800fd56:	e7f0      	b.n	800fd3a <_dtoa_r+0x2ba>
 800fd58:	2501      	movs	r5, #1
 800fd5a:	2300      	movs	r3, #0
 800fd5c:	9306      	str	r3, [sp, #24]
 800fd5e:	950a      	str	r5, [sp, #40]	; 0x28
 800fd60:	f04f 33ff 	mov.w	r3, #4294967295
 800fd64:	9302      	str	r3, [sp, #8]
 800fd66:	4699      	mov	r9, r3
 800fd68:	2200      	movs	r2, #0
 800fd6a:	2312      	movs	r3, #18
 800fd6c:	920b      	str	r2, [sp, #44]	; 0x2c
 800fd6e:	e7aa      	b.n	800fcc6 <_dtoa_r+0x246>
 800fd70:	2301      	movs	r3, #1
 800fd72:	930a      	str	r3, [sp, #40]	; 0x28
 800fd74:	e7f4      	b.n	800fd60 <_dtoa_r+0x2e0>
 800fd76:	2301      	movs	r3, #1
 800fd78:	9302      	str	r3, [sp, #8]
 800fd7a:	4699      	mov	r9, r3
 800fd7c:	461a      	mov	r2, r3
 800fd7e:	e7f5      	b.n	800fd6c <_dtoa_r+0x2ec>
 800fd80:	3101      	adds	r1, #1
 800fd82:	6071      	str	r1, [r6, #4]
 800fd84:	0052      	lsls	r2, r2, #1
 800fd86:	e7a2      	b.n	800fcce <_dtoa_r+0x24e>
 800fd88:	636f4361 	.word	0x636f4361
 800fd8c:	3fd287a7 	.word	0x3fd287a7
 800fd90:	8b60c8b3 	.word	0x8b60c8b3
 800fd94:	3fc68a28 	.word	0x3fc68a28
 800fd98:	509f79fb 	.word	0x509f79fb
 800fd9c:	3fd34413 	.word	0x3fd34413
 800fda0:	7ff00000 	.word	0x7ff00000
 800fda4:	08012021 	.word	0x08012021
 800fda8:	3ff80000 	.word	0x3ff80000
 800fdac:	080120e0 	.word	0x080120e0
 800fdb0:	080120b8 	.word	0x080120b8
 800fdb4:	080120a9 	.word	0x080120a9
 800fdb8:	07f1      	lsls	r1, r6, #31
 800fdba:	d508      	bpl.n	800fdce <_dtoa_r+0x34e>
 800fdbc:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800fdc0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800fdc4:	f7f0 fc18 	bl	80005f8 <__aeabi_dmul>
 800fdc8:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800fdcc:	3501      	adds	r5, #1
 800fdce:	1076      	asrs	r6, r6, #1
 800fdd0:	3708      	adds	r7, #8
 800fdd2:	2e00      	cmp	r6, #0
 800fdd4:	d1f0      	bne.n	800fdb8 <_dtoa_r+0x338>
 800fdd6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800fdda:	e9dd 0100 	ldrd	r0, r1, [sp]
 800fdde:	f7f0 fd35 	bl	800084c <__aeabi_ddiv>
 800fde2:	e9cd 0100 	strd	r0, r1, [sp]
 800fde6:	e01a      	b.n	800fe1e <_dtoa_r+0x39e>
 800fde8:	2502      	movs	r5, #2
 800fdea:	e7a3      	b.n	800fd34 <_dtoa_r+0x2b4>
 800fdec:	f000 80a0 	beq.w	800ff30 <_dtoa_r+0x4b0>
 800fdf0:	f1ca 0600 	rsb	r6, sl, #0
 800fdf4:	4b9f      	ldr	r3, [pc, #636]	; (8010074 <_dtoa_r+0x5f4>)
 800fdf6:	4fa0      	ldr	r7, [pc, #640]	; (8010078 <_dtoa_r+0x5f8>)
 800fdf8:	f006 020f 	and.w	r2, r6, #15
 800fdfc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800fe00:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fe04:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800fe08:	f7f0 fbf6 	bl	80005f8 <__aeabi_dmul>
 800fe0c:	e9cd 0100 	strd	r0, r1, [sp]
 800fe10:	1136      	asrs	r6, r6, #4
 800fe12:	2300      	movs	r3, #0
 800fe14:	2502      	movs	r5, #2
 800fe16:	2e00      	cmp	r6, #0
 800fe18:	d17f      	bne.n	800ff1a <_dtoa_r+0x49a>
 800fe1a:	2b00      	cmp	r3, #0
 800fe1c:	d1e1      	bne.n	800fde2 <_dtoa_r+0x362>
 800fe1e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800fe20:	2b00      	cmp	r3, #0
 800fe22:	f000 8087 	beq.w	800ff34 <_dtoa_r+0x4b4>
 800fe26:	e9dd 6700 	ldrd	r6, r7, [sp]
 800fe2a:	2200      	movs	r2, #0
 800fe2c:	4b93      	ldr	r3, [pc, #588]	; (801007c <_dtoa_r+0x5fc>)
 800fe2e:	4630      	mov	r0, r6
 800fe30:	4639      	mov	r1, r7
 800fe32:	f7f0 fe53 	bl	8000adc <__aeabi_dcmplt>
 800fe36:	2800      	cmp	r0, #0
 800fe38:	d07c      	beq.n	800ff34 <_dtoa_r+0x4b4>
 800fe3a:	f1b9 0f00 	cmp.w	r9, #0
 800fe3e:	d079      	beq.n	800ff34 <_dtoa_r+0x4b4>
 800fe40:	9b02      	ldr	r3, [sp, #8]
 800fe42:	2b00      	cmp	r3, #0
 800fe44:	dd35      	ble.n	800feb2 <_dtoa_r+0x432>
 800fe46:	f10a 33ff 	add.w	r3, sl, #4294967295
 800fe4a:	9308      	str	r3, [sp, #32]
 800fe4c:	4639      	mov	r1, r7
 800fe4e:	2200      	movs	r2, #0
 800fe50:	4b8b      	ldr	r3, [pc, #556]	; (8010080 <_dtoa_r+0x600>)
 800fe52:	4630      	mov	r0, r6
 800fe54:	f7f0 fbd0 	bl	80005f8 <__aeabi_dmul>
 800fe58:	e9cd 0100 	strd	r0, r1, [sp]
 800fe5c:	9f02      	ldr	r7, [sp, #8]
 800fe5e:	3501      	adds	r5, #1
 800fe60:	4628      	mov	r0, r5
 800fe62:	f7f0 fb5f 	bl	8000524 <__aeabi_i2d>
 800fe66:	e9dd 2300 	ldrd	r2, r3, [sp]
 800fe6a:	f7f0 fbc5 	bl	80005f8 <__aeabi_dmul>
 800fe6e:	2200      	movs	r2, #0
 800fe70:	4b84      	ldr	r3, [pc, #528]	; (8010084 <_dtoa_r+0x604>)
 800fe72:	f7f0 fa0b 	bl	800028c <__adddf3>
 800fe76:	4605      	mov	r5, r0
 800fe78:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800fe7c:	2f00      	cmp	r7, #0
 800fe7e:	d15d      	bne.n	800ff3c <_dtoa_r+0x4bc>
 800fe80:	2200      	movs	r2, #0
 800fe82:	4b81      	ldr	r3, [pc, #516]	; (8010088 <_dtoa_r+0x608>)
 800fe84:	e9dd 0100 	ldrd	r0, r1, [sp]
 800fe88:	f7f0 f9fe 	bl	8000288 <__aeabi_dsub>
 800fe8c:	462a      	mov	r2, r5
 800fe8e:	4633      	mov	r3, r6
 800fe90:	e9cd 0100 	strd	r0, r1, [sp]
 800fe94:	f7f0 fe40 	bl	8000b18 <__aeabi_dcmpgt>
 800fe98:	2800      	cmp	r0, #0
 800fe9a:	f040 8288 	bne.w	80103ae <_dtoa_r+0x92e>
 800fe9e:	462a      	mov	r2, r5
 800fea0:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800fea4:	e9dd 0100 	ldrd	r0, r1, [sp]
 800fea8:	f7f0 fe18 	bl	8000adc <__aeabi_dcmplt>
 800feac:	2800      	cmp	r0, #0
 800feae:	f040 827c 	bne.w	80103aa <_dtoa_r+0x92a>
 800feb2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800feb6:	e9cd 2300 	strd	r2, r3, [sp]
 800feba:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800febc:	2b00      	cmp	r3, #0
 800febe:	f2c0 8150 	blt.w	8010162 <_dtoa_r+0x6e2>
 800fec2:	f1ba 0f0e 	cmp.w	sl, #14
 800fec6:	f300 814c 	bgt.w	8010162 <_dtoa_r+0x6e2>
 800feca:	4b6a      	ldr	r3, [pc, #424]	; (8010074 <_dtoa_r+0x5f4>)
 800fecc:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800fed0:	ed93 7b00 	vldr	d7, [r3]
 800fed4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800fed6:	2b00      	cmp	r3, #0
 800fed8:	ed8d 7b02 	vstr	d7, [sp, #8]
 800fedc:	f280 80d8 	bge.w	8010090 <_dtoa_r+0x610>
 800fee0:	f1b9 0f00 	cmp.w	r9, #0
 800fee4:	f300 80d4 	bgt.w	8010090 <_dtoa_r+0x610>
 800fee8:	f040 825e 	bne.w	80103a8 <_dtoa_r+0x928>
 800feec:	2200      	movs	r2, #0
 800feee:	4b66      	ldr	r3, [pc, #408]	; (8010088 <_dtoa_r+0x608>)
 800fef0:	ec51 0b17 	vmov	r0, r1, d7
 800fef4:	f7f0 fb80 	bl	80005f8 <__aeabi_dmul>
 800fef8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800fefc:	f7f0 fe02 	bl	8000b04 <__aeabi_dcmpge>
 800ff00:	464f      	mov	r7, r9
 800ff02:	464e      	mov	r6, r9
 800ff04:	2800      	cmp	r0, #0
 800ff06:	f040 8234 	bne.w	8010372 <_dtoa_r+0x8f2>
 800ff0a:	2331      	movs	r3, #49	; 0x31
 800ff0c:	f10b 0501 	add.w	r5, fp, #1
 800ff10:	f88b 3000 	strb.w	r3, [fp]
 800ff14:	f10a 0a01 	add.w	sl, sl, #1
 800ff18:	e22f      	b.n	801037a <_dtoa_r+0x8fa>
 800ff1a:	07f2      	lsls	r2, r6, #31
 800ff1c:	d505      	bpl.n	800ff2a <_dtoa_r+0x4aa>
 800ff1e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ff22:	f7f0 fb69 	bl	80005f8 <__aeabi_dmul>
 800ff26:	3501      	adds	r5, #1
 800ff28:	2301      	movs	r3, #1
 800ff2a:	1076      	asrs	r6, r6, #1
 800ff2c:	3708      	adds	r7, #8
 800ff2e:	e772      	b.n	800fe16 <_dtoa_r+0x396>
 800ff30:	2502      	movs	r5, #2
 800ff32:	e774      	b.n	800fe1e <_dtoa_r+0x39e>
 800ff34:	f8cd a020 	str.w	sl, [sp, #32]
 800ff38:	464f      	mov	r7, r9
 800ff3a:	e791      	b.n	800fe60 <_dtoa_r+0x3e0>
 800ff3c:	4b4d      	ldr	r3, [pc, #308]	; (8010074 <_dtoa_r+0x5f4>)
 800ff3e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800ff42:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 800ff46:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ff48:	2b00      	cmp	r3, #0
 800ff4a:	d047      	beq.n	800ffdc <_dtoa_r+0x55c>
 800ff4c:	4602      	mov	r2, r0
 800ff4e:	460b      	mov	r3, r1
 800ff50:	2000      	movs	r0, #0
 800ff52:	494e      	ldr	r1, [pc, #312]	; (801008c <_dtoa_r+0x60c>)
 800ff54:	f7f0 fc7a 	bl	800084c <__aeabi_ddiv>
 800ff58:	462a      	mov	r2, r5
 800ff5a:	4633      	mov	r3, r6
 800ff5c:	f7f0 f994 	bl	8000288 <__aeabi_dsub>
 800ff60:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800ff64:	465d      	mov	r5, fp
 800ff66:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ff6a:	f7f0 fdf5 	bl	8000b58 <__aeabi_d2iz>
 800ff6e:	4606      	mov	r6, r0
 800ff70:	f7f0 fad8 	bl	8000524 <__aeabi_i2d>
 800ff74:	4602      	mov	r2, r0
 800ff76:	460b      	mov	r3, r1
 800ff78:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ff7c:	f7f0 f984 	bl	8000288 <__aeabi_dsub>
 800ff80:	3630      	adds	r6, #48	; 0x30
 800ff82:	f805 6b01 	strb.w	r6, [r5], #1
 800ff86:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800ff8a:	e9cd 0100 	strd	r0, r1, [sp]
 800ff8e:	f7f0 fda5 	bl	8000adc <__aeabi_dcmplt>
 800ff92:	2800      	cmp	r0, #0
 800ff94:	d163      	bne.n	801005e <_dtoa_r+0x5de>
 800ff96:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ff9a:	2000      	movs	r0, #0
 800ff9c:	4937      	ldr	r1, [pc, #220]	; (801007c <_dtoa_r+0x5fc>)
 800ff9e:	f7f0 f973 	bl	8000288 <__aeabi_dsub>
 800ffa2:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800ffa6:	f7f0 fd99 	bl	8000adc <__aeabi_dcmplt>
 800ffaa:	2800      	cmp	r0, #0
 800ffac:	f040 80b7 	bne.w	801011e <_dtoa_r+0x69e>
 800ffb0:	eba5 030b 	sub.w	r3, r5, fp
 800ffb4:	429f      	cmp	r7, r3
 800ffb6:	f77f af7c 	ble.w	800feb2 <_dtoa_r+0x432>
 800ffba:	2200      	movs	r2, #0
 800ffbc:	4b30      	ldr	r3, [pc, #192]	; (8010080 <_dtoa_r+0x600>)
 800ffbe:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800ffc2:	f7f0 fb19 	bl	80005f8 <__aeabi_dmul>
 800ffc6:	2200      	movs	r2, #0
 800ffc8:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800ffcc:	4b2c      	ldr	r3, [pc, #176]	; (8010080 <_dtoa_r+0x600>)
 800ffce:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ffd2:	f7f0 fb11 	bl	80005f8 <__aeabi_dmul>
 800ffd6:	e9cd 0100 	strd	r0, r1, [sp]
 800ffda:	e7c4      	b.n	800ff66 <_dtoa_r+0x4e6>
 800ffdc:	462a      	mov	r2, r5
 800ffde:	4633      	mov	r3, r6
 800ffe0:	f7f0 fb0a 	bl	80005f8 <__aeabi_dmul>
 800ffe4:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800ffe8:	eb0b 0507 	add.w	r5, fp, r7
 800ffec:	465e      	mov	r6, fp
 800ffee:	e9dd 0100 	ldrd	r0, r1, [sp]
 800fff2:	f7f0 fdb1 	bl	8000b58 <__aeabi_d2iz>
 800fff6:	4607      	mov	r7, r0
 800fff8:	f7f0 fa94 	bl	8000524 <__aeabi_i2d>
 800fffc:	3730      	adds	r7, #48	; 0x30
 800fffe:	4602      	mov	r2, r0
 8010000:	460b      	mov	r3, r1
 8010002:	e9dd 0100 	ldrd	r0, r1, [sp]
 8010006:	f7f0 f93f 	bl	8000288 <__aeabi_dsub>
 801000a:	f806 7b01 	strb.w	r7, [r6], #1
 801000e:	42ae      	cmp	r6, r5
 8010010:	e9cd 0100 	strd	r0, r1, [sp]
 8010014:	f04f 0200 	mov.w	r2, #0
 8010018:	d126      	bne.n	8010068 <_dtoa_r+0x5e8>
 801001a:	4b1c      	ldr	r3, [pc, #112]	; (801008c <_dtoa_r+0x60c>)
 801001c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8010020:	f7f0 f934 	bl	800028c <__adddf3>
 8010024:	4602      	mov	r2, r0
 8010026:	460b      	mov	r3, r1
 8010028:	e9dd 0100 	ldrd	r0, r1, [sp]
 801002c:	f7f0 fd74 	bl	8000b18 <__aeabi_dcmpgt>
 8010030:	2800      	cmp	r0, #0
 8010032:	d174      	bne.n	801011e <_dtoa_r+0x69e>
 8010034:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8010038:	2000      	movs	r0, #0
 801003a:	4914      	ldr	r1, [pc, #80]	; (801008c <_dtoa_r+0x60c>)
 801003c:	f7f0 f924 	bl	8000288 <__aeabi_dsub>
 8010040:	4602      	mov	r2, r0
 8010042:	460b      	mov	r3, r1
 8010044:	e9dd 0100 	ldrd	r0, r1, [sp]
 8010048:	f7f0 fd48 	bl	8000adc <__aeabi_dcmplt>
 801004c:	2800      	cmp	r0, #0
 801004e:	f43f af30 	beq.w	800feb2 <_dtoa_r+0x432>
 8010052:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8010056:	2b30      	cmp	r3, #48	; 0x30
 8010058:	f105 32ff 	add.w	r2, r5, #4294967295
 801005c:	d002      	beq.n	8010064 <_dtoa_r+0x5e4>
 801005e:	f8dd a020 	ldr.w	sl, [sp, #32]
 8010062:	e04a      	b.n	80100fa <_dtoa_r+0x67a>
 8010064:	4615      	mov	r5, r2
 8010066:	e7f4      	b.n	8010052 <_dtoa_r+0x5d2>
 8010068:	4b05      	ldr	r3, [pc, #20]	; (8010080 <_dtoa_r+0x600>)
 801006a:	f7f0 fac5 	bl	80005f8 <__aeabi_dmul>
 801006e:	e9cd 0100 	strd	r0, r1, [sp]
 8010072:	e7bc      	b.n	800ffee <_dtoa_r+0x56e>
 8010074:	080120e0 	.word	0x080120e0
 8010078:	080120b8 	.word	0x080120b8
 801007c:	3ff00000 	.word	0x3ff00000
 8010080:	40240000 	.word	0x40240000
 8010084:	401c0000 	.word	0x401c0000
 8010088:	40140000 	.word	0x40140000
 801008c:	3fe00000 	.word	0x3fe00000
 8010090:	e9dd 6700 	ldrd	r6, r7, [sp]
 8010094:	465d      	mov	r5, fp
 8010096:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801009a:	4630      	mov	r0, r6
 801009c:	4639      	mov	r1, r7
 801009e:	f7f0 fbd5 	bl	800084c <__aeabi_ddiv>
 80100a2:	f7f0 fd59 	bl	8000b58 <__aeabi_d2iz>
 80100a6:	4680      	mov	r8, r0
 80100a8:	f7f0 fa3c 	bl	8000524 <__aeabi_i2d>
 80100ac:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80100b0:	f7f0 faa2 	bl	80005f8 <__aeabi_dmul>
 80100b4:	4602      	mov	r2, r0
 80100b6:	460b      	mov	r3, r1
 80100b8:	4630      	mov	r0, r6
 80100ba:	4639      	mov	r1, r7
 80100bc:	f108 0630 	add.w	r6, r8, #48	; 0x30
 80100c0:	f7f0 f8e2 	bl	8000288 <__aeabi_dsub>
 80100c4:	f805 6b01 	strb.w	r6, [r5], #1
 80100c8:	eba5 060b 	sub.w	r6, r5, fp
 80100cc:	45b1      	cmp	r9, r6
 80100ce:	4602      	mov	r2, r0
 80100d0:	460b      	mov	r3, r1
 80100d2:	d139      	bne.n	8010148 <_dtoa_r+0x6c8>
 80100d4:	f7f0 f8da 	bl	800028c <__adddf3>
 80100d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80100dc:	4606      	mov	r6, r0
 80100de:	460f      	mov	r7, r1
 80100e0:	f7f0 fd1a 	bl	8000b18 <__aeabi_dcmpgt>
 80100e4:	b9c8      	cbnz	r0, 801011a <_dtoa_r+0x69a>
 80100e6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80100ea:	4630      	mov	r0, r6
 80100ec:	4639      	mov	r1, r7
 80100ee:	f7f0 fceb 	bl	8000ac8 <__aeabi_dcmpeq>
 80100f2:	b110      	cbz	r0, 80100fa <_dtoa_r+0x67a>
 80100f4:	f018 0f01 	tst.w	r8, #1
 80100f8:	d10f      	bne.n	801011a <_dtoa_r+0x69a>
 80100fa:	9904      	ldr	r1, [sp, #16]
 80100fc:	4620      	mov	r0, r4
 80100fe:	f000 fdf9 	bl	8010cf4 <_Bfree>
 8010102:	2300      	movs	r3, #0
 8010104:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8010106:	702b      	strb	r3, [r5, #0]
 8010108:	f10a 0301 	add.w	r3, sl, #1
 801010c:	6013      	str	r3, [r2, #0]
 801010e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8010110:	2b00      	cmp	r3, #0
 8010112:	f000 8241 	beq.w	8010598 <_dtoa_r+0xb18>
 8010116:	601d      	str	r5, [r3, #0]
 8010118:	e23e      	b.n	8010598 <_dtoa_r+0xb18>
 801011a:	f8cd a020 	str.w	sl, [sp, #32]
 801011e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8010122:	2a39      	cmp	r2, #57	; 0x39
 8010124:	f105 33ff 	add.w	r3, r5, #4294967295
 8010128:	d108      	bne.n	801013c <_dtoa_r+0x6bc>
 801012a:	459b      	cmp	fp, r3
 801012c:	d10a      	bne.n	8010144 <_dtoa_r+0x6c4>
 801012e:	9b08      	ldr	r3, [sp, #32]
 8010130:	3301      	adds	r3, #1
 8010132:	9308      	str	r3, [sp, #32]
 8010134:	2330      	movs	r3, #48	; 0x30
 8010136:	f88b 3000 	strb.w	r3, [fp]
 801013a:	465b      	mov	r3, fp
 801013c:	781a      	ldrb	r2, [r3, #0]
 801013e:	3201      	adds	r2, #1
 8010140:	701a      	strb	r2, [r3, #0]
 8010142:	e78c      	b.n	801005e <_dtoa_r+0x5de>
 8010144:	461d      	mov	r5, r3
 8010146:	e7ea      	b.n	801011e <_dtoa_r+0x69e>
 8010148:	2200      	movs	r2, #0
 801014a:	4b9b      	ldr	r3, [pc, #620]	; (80103b8 <_dtoa_r+0x938>)
 801014c:	f7f0 fa54 	bl	80005f8 <__aeabi_dmul>
 8010150:	2200      	movs	r2, #0
 8010152:	2300      	movs	r3, #0
 8010154:	4606      	mov	r6, r0
 8010156:	460f      	mov	r7, r1
 8010158:	f7f0 fcb6 	bl	8000ac8 <__aeabi_dcmpeq>
 801015c:	2800      	cmp	r0, #0
 801015e:	d09a      	beq.n	8010096 <_dtoa_r+0x616>
 8010160:	e7cb      	b.n	80100fa <_dtoa_r+0x67a>
 8010162:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010164:	2a00      	cmp	r2, #0
 8010166:	f000 808b 	beq.w	8010280 <_dtoa_r+0x800>
 801016a:	9a06      	ldr	r2, [sp, #24]
 801016c:	2a01      	cmp	r2, #1
 801016e:	dc6e      	bgt.n	801024e <_dtoa_r+0x7ce>
 8010170:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8010172:	2a00      	cmp	r2, #0
 8010174:	d067      	beq.n	8010246 <_dtoa_r+0x7c6>
 8010176:	f203 4333 	addw	r3, r3, #1075	; 0x433
 801017a:	9f07      	ldr	r7, [sp, #28]
 801017c:	9d05      	ldr	r5, [sp, #20]
 801017e:	9a05      	ldr	r2, [sp, #20]
 8010180:	2101      	movs	r1, #1
 8010182:	441a      	add	r2, r3
 8010184:	4620      	mov	r0, r4
 8010186:	9205      	str	r2, [sp, #20]
 8010188:	4498      	add	r8, r3
 801018a:	f000 fe91 	bl	8010eb0 <__i2b>
 801018e:	4606      	mov	r6, r0
 8010190:	2d00      	cmp	r5, #0
 8010192:	dd0c      	ble.n	80101ae <_dtoa_r+0x72e>
 8010194:	f1b8 0f00 	cmp.w	r8, #0
 8010198:	dd09      	ble.n	80101ae <_dtoa_r+0x72e>
 801019a:	4545      	cmp	r5, r8
 801019c:	9a05      	ldr	r2, [sp, #20]
 801019e:	462b      	mov	r3, r5
 80101a0:	bfa8      	it	ge
 80101a2:	4643      	movge	r3, r8
 80101a4:	1ad2      	subs	r2, r2, r3
 80101a6:	9205      	str	r2, [sp, #20]
 80101a8:	1aed      	subs	r5, r5, r3
 80101aa:	eba8 0803 	sub.w	r8, r8, r3
 80101ae:	9b07      	ldr	r3, [sp, #28]
 80101b0:	b1eb      	cbz	r3, 80101ee <_dtoa_r+0x76e>
 80101b2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80101b4:	2b00      	cmp	r3, #0
 80101b6:	d067      	beq.n	8010288 <_dtoa_r+0x808>
 80101b8:	b18f      	cbz	r7, 80101de <_dtoa_r+0x75e>
 80101ba:	4631      	mov	r1, r6
 80101bc:	463a      	mov	r2, r7
 80101be:	4620      	mov	r0, r4
 80101c0:	f000 ff16 	bl	8010ff0 <__pow5mult>
 80101c4:	9a04      	ldr	r2, [sp, #16]
 80101c6:	4601      	mov	r1, r0
 80101c8:	4606      	mov	r6, r0
 80101ca:	4620      	mov	r0, r4
 80101cc:	f000 fe79 	bl	8010ec2 <__multiply>
 80101d0:	9904      	ldr	r1, [sp, #16]
 80101d2:	9008      	str	r0, [sp, #32]
 80101d4:	4620      	mov	r0, r4
 80101d6:	f000 fd8d 	bl	8010cf4 <_Bfree>
 80101da:	9b08      	ldr	r3, [sp, #32]
 80101dc:	9304      	str	r3, [sp, #16]
 80101de:	9b07      	ldr	r3, [sp, #28]
 80101e0:	1bda      	subs	r2, r3, r7
 80101e2:	d004      	beq.n	80101ee <_dtoa_r+0x76e>
 80101e4:	9904      	ldr	r1, [sp, #16]
 80101e6:	4620      	mov	r0, r4
 80101e8:	f000 ff02 	bl	8010ff0 <__pow5mult>
 80101ec:	9004      	str	r0, [sp, #16]
 80101ee:	2101      	movs	r1, #1
 80101f0:	4620      	mov	r0, r4
 80101f2:	f000 fe5d 	bl	8010eb0 <__i2b>
 80101f6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80101f8:	4607      	mov	r7, r0
 80101fa:	2b00      	cmp	r3, #0
 80101fc:	f000 81d0 	beq.w	80105a0 <_dtoa_r+0xb20>
 8010200:	461a      	mov	r2, r3
 8010202:	4601      	mov	r1, r0
 8010204:	4620      	mov	r0, r4
 8010206:	f000 fef3 	bl	8010ff0 <__pow5mult>
 801020a:	9b06      	ldr	r3, [sp, #24]
 801020c:	2b01      	cmp	r3, #1
 801020e:	4607      	mov	r7, r0
 8010210:	dc40      	bgt.n	8010294 <_dtoa_r+0x814>
 8010212:	9b00      	ldr	r3, [sp, #0]
 8010214:	2b00      	cmp	r3, #0
 8010216:	d139      	bne.n	801028c <_dtoa_r+0x80c>
 8010218:	9b01      	ldr	r3, [sp, #4]
 801021a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801021e:	2b00      	cmp	r3, #0
 8010220:	d136      	bne.n	8010290 <_dtoa_r+0x810>
 8010222:	9b01      	ldr	r3, [sp, #4]
 8010224:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8010228:	0d1b      	lsrs	r3, r3, #20
 801022a:	051b      	lsls	r3, r3, #20
 801022c:	b12b      	cbz	r3, 801023a <_dtoa_r+0x7ba>
 801022e:	9b05      	ldr	r3, [sp, #20]
 8010230:	3301      	adds	r3, #1
 8010232:	9305      	str	r3, [sp, #20]
 8010234:	f108 0801 	add.w	r8, r8, #1
 8010238:	2301      	movs	r3, #1
 801023a:	9307      	str	r3, [sp, #28]
 801023c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801023e:	2b00      	cmp	r3, #0
 8010240:	d12a      	bne.n	8010298 <_dtoa_r+0x818>
 8010242:	2001      	movs	r0, #1
 8010244:	e030      	b.n	80102a8 <_dtoa_r+0x828>
 8010246:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8010248:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 801024c:	e795      	b.n	801017a <_dtoa_r+0x6fa>
 801024e:	9b07      	ldr	r3, [sp, #28]
 8010250:	f109 37ff 	add.w	r7, r9, #4294967295
 8010254:	42bb      	cmp	r3, r7
 8010256:	bfbf      	itttt	lt
 8010258:	9b07      	ldrlt	r3, [sp, #28]
 801025a:	9707      	strlt	r7, [sp, #28]
 801025c:	1afa      	sublt	r2, r7, r3
 801025e:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8010260:	bfbb      	ittet	lt
 8010262:	189b      	addlt	r3, r3, r2
 8010264:	930e      	strlt	r3, [sp, #56]	; 0x38
 8010266:	1bdf      	subge	r7, r3, r7
 8010268:	2700      	movlt	r7, #0
 801026a:	f1b9 0f00 	cmp.w	r9, #0
 801026e:	bfb5      	itete	lt
 8010270:	9b05      	ldrlt	r3, [sp, #20]
 8010272:	9d05      	ldrge	r5, [sp, #20]
 8010274:	eba3 0509 	sublt.w	r5, r3, r9
 8010278:	464b      	movge	r3, r9
 801027a:	bfb8      	it	lt
 801027c:	2300      	movlt	r3, #0
 801027e:	e77e      	b.n	801017e <_dtoa_r+0x6fe>
 8010280:	9f07      	ldr	r7, [sp, #28]
 8010282:	9d05      	ldr	r5, [sp, #20]
 8010284:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8010286:	e783      	b.n	8010190 <_dtoa_r+0x710>
 8010288:	9a07      	ldr	r2, [sp, #28]
 801028a:	e7ab      	b.n	80101e4 <_dtoa_r+0x764>
 801028c:	2300      	movs	r3, #0
 801028e:	e7d4      	b.n	801023a <_dtoa_r+0x7ba>
 8010290:	9b00      	ldr	r3, [sp, #0]
 8010292:	e7d2      	b.n	801023a <_dtoa_r+0x7ba>
 8010294:	2300      	movs	r3, #0
 8010296:	9307      	str	r3, [sp, #28]
 8010298:	693b      	ldr	r3, [r7, #16]
 801029a:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 801029e:	6918      	ldr	r0, [r3, #16]
 80102a0:	f000 fdb8 	bl	8010e14 <__hi0bits>
 80102a4:	f1c0 0020 	rsb	r0, r0, #32
 80102a8:	4440      	add	r0, r8
 80102aa:	f010 001f 	ands.w	r0, r0, #31
 80102ae:	d047      	beq.n	8010340 <_dtoa_r+0x8c0>
 80102b0:	f1c0 0320 	rsb	r3, r0, #32
 80102b4:	2b04      	cmp	r3, #4
 80102b6:	dd3b      	ble.n	8010330 <_dtoa_r+0x8b0>
 80102b8:	9b05      	ldr	r3, [sp, #20]
 80102ba:	f1c0 001c 	rsb	r0, r0, #28
 80102be:	4403      	add	r3, r0
 80102c0:	9305      	str	r3, [sp, #20]
 80102c2:	4405      	add	r5, r0
 80102c4:	4480      	add	r8, r0
 80102c6:	9b05      	ldr	r3, [sp, #20]
 80102c8:	2b00      	cmp	r3, #0
 80102ca:	dd05      	ble.n	80102d8 <_dtoa_r+0x858>
 80102cc:	461a      	mov	r2, r3
 80102ce:	9904      	ldr	r1, [sp, #16]
 80102d0:	4620      	mov	r0, r4
 80102d2:	f000 fedb 	bl	801108c <__lshift>
 80102d6:	9004      	str	r0, [sp, #16]
 80102d8:	f1b8 0f00 	cmp.w	r8, #0
 80102dc:	dd05      	ble.n	80102ea <_dtoa_r+0x86a>
 80102de:	4639      	mov	r1, r7
 80102e0:	4642      	mov	r2, r8
 80102e2:	4620      	mov	r0, r4
 80102e4:	f000 fed2 	bl	801108c <__lshift>
 80102e8:	4607      	mov	r7, r0
 80102ea:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80102ec:	b353      	cbz	r3, 8010344 <_dtoa_r+0x8c4>
 80102ee:	4639      	mov	r1, r7
 80102f0:	9804      	ldr	r0, [sp, #16]
 80102f2:	f000 ff1f 	bl	8011134 <__mcmp>
 80102f6:	2800      	cmp	r0, #0
 80102f8:	da24      	bge.n	8010344 <_dtoa_r+0x8c4>
 80102fa:	2300      	movs	r3, #0
 80102fc:	220a      	movs	r2, #10
 80102fe:	9904      	ldr	r1, [sp, #16]
 8010300:	4620      	mov	r0, r4
 8010302:	f000 fd0e 	bl	8010d22 <__multadd>
 8010306:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010308:	9004      	str	r0, [sp, #16]
 801030a:	f10a 3aff 	add.w	sl, sl, #4294967295
 801030e:	2b00      	cmp	r3, #0
 8010310:	f000 814d 	beq.w	80105ae <_dtoa_r+0xb2e>
 8010314:	2300      	movs	r3, #0
 8010316:	4631      	mov	r1, r6
 8010318:	220a      	movs	r2, #10
 801031a:	4620      	mov	r0, r4
 801031c:	f000 fd01 	bl	8010d22 <__multadd>
 8010320:	9b02      	ldr	r3, [sp, #8]
 8010322:	2b00      	cmp	r3, #0
 8010324:	4606      	mov	r6, r0
 8010326:	dc4f      	bgt.n	80103c8 <_dtoa_r+0x948>
 8010328:	9b06      	ldr	r3, [sp, #24]
 801032a:	2b02      	cmp	r3, #2
 801032c:	dd4c      	ble.n	80103c8 <_dtoa_r+0x948>
 801032e:	e011      	b.n	8010354 <_dtoa_r+0x8d4>
 8010330:	d0c9      	beq.n	80102c6 <_dtoa_r+0x846>
 8010332:	9a05      	ldr	r2, [sp, #20]
 8010334:	331c      	adds	r3, #28
 8010336:	441a      	add	r2, r3
 8010338:	9205      	str	r2, [sp, #20]
 801033a:	441d      	add	r5, r3
 801033c:	4498      	add	r8, r3
 801033e:	e7c2      	b.n	80102c6 <_dtoa_r+0x846>
 8010340:	4603      	mov	r3, r0
 8010342:	e7f6      	b.n	8010332 <_dtoa_r+0x8b2>
 8010344:	f1b9 0f00 	cmp.w	r9, #0
 8010348:	dc38      	bgt.n	80103bc <_dtoa_r+0x93c>
 801034a:	9b06      	ldr	r3, [sp, #24]
 801034c:	2b02      	cmp	r3, #2
 801034e:	dd35      	ble.n	80103bc <_dtoa_r+0x93c>
 8010350:	f8cd 9008 	str.w	r9, [sp, #8]
 8010354:	9b02      	ldr	r3, [sp, #8]
 8010356:	b963      	cbnz	r3, 8010372 <_dtoa_r+0x8f2>
 8010358:	4639      	mov	r1, r7
 801035a:	2205      	movs	r2, #5
 801035c:	4620      	mov	r0, r4
 801035e:	f000 fce0 	bl	8010d22 <__multadd>
 8010362:	4601      	mov	r1, r0
 8010364:	4607      	mov	r7, r0
 8010366:	9804      	ldr	r0, [sp, #16]
 8010368:	f000 fee4 	bl	8011134 <__mcmp>
 801036c:	2800      	cmp	r0, #0
 801036e:	f73f adcc 	bgt.w	800ff0a <_dtoa_r+0x48a>
 8010372:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010374:	465d      	mov	r5, fp
 8010376:	ea6f 0a03 	mvn.w	sl, r3
 801037a:	f04f 0900 	mov.w	r9, #0
 801037e:	4639      	mov	r1, r7
 8010380:	4620      	mov	r0, r4
 8010382:	f000 fcb7 	bl	8010cf4 <_Bfree>
 8010386:	2e00      	cmp	r6, #0
 8010388:	f43f aeb7 	beq.w	80100fa <_dtoa_r+0x67a>
 801038c:	f1b9 0f00 	cmp.w	r9, #0
 8010390:	d005      	beq.n	801039e <_dtoa_r+0x91e>
 8010392:	45b1      	cmp	r9, r6
 8010394:	d003      	beq.n	801039e <_dtoa_r+0x91e>
 8010396:	4649      	mov	r1, r9
 8010398:	4620      	mov	r0, r4
 801039a:	f000 fcab 	bl	8010cf4 <_Bfree>
 801039e:	4631      	mov	r1, r6
 80103a0:	4620      	mov	r0, r4
 80103a2:	f000 fca7 	bl	8010cf4 <_Bfree>
 80103a6:	e6a8      	b.n	80100fa <_dtoa_r+0x67a>
 80103a8:	2700      	movs	r7, #0
 80103aa:	463e      	mov	r6, r7
 80103ac:	e7e1      	b.n	8010372 <_dtoa_r+0x8f2>
 80103ae:	f8dd a020 	ldr.w	sl, [sp, #32]
 80103b2:	463e      	mov	r6, r7
 80103b4:	e5a9      	b.n	800ff0a <_dtoa_r+0x48a>
 80103b6:	bf00      	nop
 80103b8:	40240000 	.word	0x40240000
 80103bc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80103be:	f8cd 9008 	str.w	r9, [sp, #8]
 80103c2:	2b00      	cmp	r3, #0
 80103c4:	f000 80fa 	beq.w	80105bc <_dtoa_r+0xb3c>
 80103c8:	2d00      	cmp	r5, #0
 80103ca:	dd05      	ble.n	80103d8 <_dtoa_r+0x958>
 80103cc:	4631      	mov	r1, r6
 80103ce:	462a      	mov	r2, r5
 80103d0:	4620      	mov	r0, r4
 80103d2:	f000 fe5b 	bl	801108c <__lshift>
 80103d6:	4606      	mov	r6, r0
 80103d8:	9b07      	ldr	r3, [sp, #28]
 80103da:	2b00      	cmp	r3, #0
 80103dc:	d04c      	beq.n	8010478 <_dtoa_r+0x9f8>
 80103de:	6871      	ldr	r1, [r6, #4]
 80103e0:	4620      	mov	r0, r4
 80103e2:	f000 fc53 	bl	8010c8c <_Balloc>
 80103e6:	6932      	ldr	r2, [r6, #16]
 80103e8:	3202      	adds	r2, #2
 80103ea:	4605      	mov	r5, r0
 80103ec:	0092      	lsls	r2, r2, #2
 80103ee:	f106 010c 	add.w	r1, r6, #12
 80103f2:	300c      	adds	r0, #12
 80103f4:	f7fd fcd6 	bl	800dda4 <memcpy>
 80103f8:	2201      	movs	r2, #1
 80103fa:	4629      	mov	r1, r5
 80103fc:	4620      	mov	r0, r4
 80103fe:	f000 fe45 	bl	801108c <__lshift>
 8010402:	9b00      	ldr	r3, [sp, #0]
 8010404:	f8cd b014 	str.w	fp, [sp, #20]
 8010408:	f003 0301 	and.w	r3, r3, #1
 801040c:	46b1      	mov	r9, r6
 801040e:	9307      	str	r3, [sp, #28]
 8010410:	4606      	mov	r6, r0
 8010412:	4639      	mov	r1, r7
 8010414:	9804      	ldr	r0, [sp, #16]
 8010416:	f7ff faa5 	bl	800f964 <quorem>
 801041a:	4649      	mov	r1, r9
 801041c:	4605      	mov	r5, r0
 801041e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8010422:	9804      	ldr	r0, [sp, #16]
 8010424:	f000 fe86 	bl	8011134 <__mcmp>
 8010428:	4632      	mov	r2, r6
 801042a:	9000      	str	r0, [sp, #0]
 801042c:	4639      	mov	r1, r7
 801042e:	4620      	mov	r0, r4
 8010430:	f000 fe9a 	bl	8011168 <__mdiff>
 8010434:	68c3      	ldr	r3, [r0, #12]
 8010436:	4602      	mov	r2, r0
 8010438:	bb03      	cbnz	r3, 801047c <_dtoa_r+0x9fc>
 801043a:	4601      	mov	r1, r0
 801043c:	9008      	str	r0, [sp, #32]
 801043e:	9804      	ldr	r0, [sp, #16]
 8010440:	f000 fe78 	bl	8011134 <__mcmp>
 8010444:	9a08      	ldr	r2, [sp, #32]
 8010446:	4603      	mov	r3, r0
 8010448:	4611      	mov	r1, r2
 801044a:	4620      	mov	r0, r4
 801044c:	9308      	str	r3, [sp, #32]
 801044e:	f000 fc51 	bl	8010cf4 <_Bfree>
 8010452:	9b08      	ldr	r3, [sp, #32]
 8010454:	b9a3      	cbnz	r3, 8010480 <_dtoa_r+0xa00>
 8010456:	9a06      	ldr	r2, [sp, #24]
 8010458:	b992      	cbnz	r2, 8010480 <_dtoa_r+0xa00>
 801045a:	9a07      	ldr	r2, [sp, #28]
 801045c:	b982      	cbnz	r2, 8010480 <_dtoa_r+0xa00>
 801045e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8010462:	d029      	beq.n	80104b8 <_dtoa_r+0xa38>
 8010464:	9b00      	ldr	r3, [sp, #0]
 8010466:	2b00      	cmp	r3, #0
 8010468:	dd01      	ble.n	801046e <_dtoa_r+0x9ee>
 801046a:	f105 0831 	add.w	r8, r5, #49	; 0x31
 801046e:	9b05      	ldr	r3, [sp, #20]
 8010470:	1c5d      	adds	r5, r3, #1
 8010472:	f883 8000 	strb.w	r8, [r3]
 8010476:	e782      	b.n	801037e <_dtoa_r+0x8fe>
 8010478:	4630      	mov	r0, r6
 801047a:	e7c2      	b.n	8010402 <_dtoa_r+0x982>
 801047c:	2301      	movs	r3, #1
 801047e:	e7e3      	b.n	8010448 <_dtoa_r+0x9c8>
 8010480:	9a00      	ldr	r2, [sp, #0]
 8010482:	2a00      	cmp	r2, #0
 8010484:	db04      	blt.n	8010490 <_dtoa_r+0xa10>
 8010486:	d125      	bne.n	80104d4 <_dtoa_r+0xa54>
 8010488:	9a06      	ldr	r2, [sp, #24]
 801048a:	bb1a      	cbnz	r2, 80104d4 <_dtoa_r+0xa54>
 801048c:	9a07      	ldr	r2, [sp, #28]
 801048e:	bb0a      	cbnz	r2, 80104d4 <_dtoa_r+0xa54>
 8010490:	2b00      	cmp	r3, #0
 8010492:	ddec      	ble.n	801046e <_dtoa_r+0x9ee>
 8010494:	2201      	movs	r2, #1
 8010496:	9904      	ldr	r1, [sp, #16]
 8010498:	4620      	mov	r0, r4
 801049a:	f000 fdf7 	bl	801108c <__lshift>
 801049e:	4639      	mov	r1, r7
 80104a0:	9004      	str	r0, [sp, #16]
 80104a2:	f000 fe47 	bl	8011134 <__mcmp>
 80104a6:	2800      	cmp	r0, #0
 80104a8:	dc03      	bgt.n	80104b2 <_dtoa_r+0xa32>
 80104aa:	d1e0      	bne.n	801046e <_dtoa_r+0x9ee>
 80104ac:	f018 0f01 	tst.w	r8, #1
 80104b0:	d0dd      	beq.n	801046e <_dtoa_r+0x9ee>
 80104b2:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80104b6:	d1d8      	bne.n	801046a <_dtoa_r+0x9ea>
 80104b8:	9b05      	ldr	r3, [sp, #20]
 80104ba:	9a05      	ldr	r2, [sp, #20]
 80104bc:	1c5d      	adds	r5, r3, #1
 80104be:	2339      	movs	r3, #57	; 0x39
 80104c0:	7013      	strb	r3, [r2, #0]
 80104c2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80104c6:	2b39      	cmp	r3, #57	; 0x39
 80104c8:	f105 32ff 	add.w	r2, r5, #4294967295
 80104cc:	d04f      	beq.n	801056e <_dtoa_r+0xaee>
 80104ce:	3301      	adds	r3, #1
 80104d0:	7013      	strb	r3, [r2, #0]
 80104d2:	e754      	b.n	801037e <_dtoa_r+0x8fe>
 80104d4:	9a05      	ldr	r2, [sp, #20]
 80104d6:	2b00      	cmp	r3, #0
 80104d8:	f102 0501 	add.w	r5, r2, #1
 80104dc:	dd06      	ble.n	80104ec <_dtoa_r+0xa6c>
 80104de:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80104e2:	d0e9      	beq.n	80104b8 <_dtoa_r+0xa38>
 80104e4:	f108 0801 	add.w	r8, r8, #1
 80104e8:	9b05      	ldr	r3, [sp, #20]
 80104ea:	e7c2      	b.n	8010472 <_dtoa_r+0x9f2>
 80104ec:	9a02      	ldr	r2, [sp, #8]
 80104ee:	f805 8c01 	strb.w	r8, [r5, #-1]
 80104f2:	eba5 030b 	sub.w	r3, r5, fp
 80104f6:	4293      	cmp	r3, r2
 80104f8:	d021      	beq.n	801053e <_dtoa_r+0xabe>
 80104fa:	2300      	movs	r3, #0
 80104fc:	220a      	movs	r2, #10
 80104fe:	9904      	ldr	r1, [sp, #16]
 8010500:	4620      	mov	r0, r4
 8010502:	f000 fc0e 	bl	8010d22 <__multadd>
 8010506:	45b1      	cmp	r9, r6
 8010508:	9004      	str	r0, [sp, #16]
 801050a:	f04f 0300 	mov.w	r3, #0
 801050e:	f04f 020a 	mov.w	r2, #10
 8010512:	4649      	mov	r1, r9
 8010514:	4620      	mov	r0, r4
 8010516:	d105      	bne.n	8010524 <_dtoa_r+0xaa4>
 8010518:	f000 fc03 	bl	8010d22 <__multadd>
 801051c:	4681      	mov	r9, r0
 801051e:	4606      	mov	r6, r0
 8010520:	9505      	str	r5, [sp, #20]
 8010522:	e776      	b.n	8010412 <_dtoa_r+0x992>
 8010524:	f000 fbfd 	bl	8010d22 <__multadd>
 8010528:	4631      	mov	r1, r6
 801052a:	4681      	mov	r9, r0
 801052c:	2300      	movs	r3, #0
 801052e:	220a      	movs	r2, #10
 8010530:	4620      	mov	r0, r4
 8010532:	f000 fbf6 	bl	8010d22 <__multadd>
 8010536:	4606      	mov	r6, r0
 8010538:	e7f2      	b.n	8010520 <_dtoa_r+0xaa0>
 801053a:	f04f 0900 	mov.w	r9, #0
 801053e:	2201      	movs	r2, #1
 8010540:	9904      	ldr	r1, [sp, #16]
 8010542:	4620      	mov	r0, r4
 8010544:	f000 fda2 	bl	801108c <__lshift>
 8010548:	4639      	mov	r1, r7
 801054a:	9004      	str	r0, [sp, #16]
 801054c:	f000 fdf2 	bl	8011134 <__mcmp>
 8010550:	2800      	cmp	r0, #0
 8010552:	dcb6      	bgt.n	80104c2 <_dtoa_r+0xa42>
 8010554:	d102      	bne.n	801055c <_dtoa_r+0xadc>
 8010556:	f018 0f01 	tst.w	r8, #1
 801055a:	d1b2      	bne.n	80104c2 <_dtoa_r+0xa42>
 801055c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8010560:	2b30      	cmp	r3, #48	; 0x30
 8010562:	f105 32ff 	add.w	r2, r5, #4294967295
 8010566:	f47f af0a 	bne.w	801037e <_dtoa_r+0x8fe>
 801056a:	4615      	mov	r5, r2
 801056c:	e7f6      	b.n	801055c <_dtoa_r+0xadc>
 801056e:	4593      	cmp	fp, r2
 8010570:	d105      	bne.n	801057e <_dtoa_r+0xafe>
 8010572:	2331      	movs	r3, #49	; 0x31
 8010574:	f10a 0a01 	add.w	sl, sl, #1
 8010578:	f88b 3000 	strb.w	r3, [fp]
 801057c:	e6ff      	b.n	801037e <_dtoa_r+0x8fe>
 801057e:	4615      	mov	r5, r2
 8010580:	e79f      	b.n	80104c2 <_dtoa_r+0xa42>
 8010582:	f8df b064 	ldr.w	fp, [pc, #100]	; 80105e8 <_dtoa_r+0xb68>
 8010586:	e007      	b.n	8010598 <_dtoa_r+0xb18>
 8010588:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801058a:	f8df b060 	ldr.w	fp, [pc, #96]	; 80105ec <_dtoa_r+0xb6c>
 801058e:	b11b      	cbz	r3, 8010598 <_dtoa_r+0xb18>
 8010590:	f10b 0308 	add.w	r3, fp, #8
 8010594:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8010596:	6013      	str	r3, [r2, #0]
 8010598:	4658      	mov	r0, fp
 801059a:	b017      	add	sp, #92	; 0x5c
 801059c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80105a0:	9b06      	ldr	r3, [sp, #24]
 80105a2:	2b01      	cmp	r3, #1
 80105a4:	f77f ae35 	ble.w	8010212 <_dtoa_r+0x792>
 80105a8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80105aa:	9307      	str	r3, [sp, #28]
 80105ac:	e649      	b.n	8010242 <_dtoa_r+0x7c2>
 80105ae:	9b02      	ldr	r3, [sp, #8]
 80105b0:	2b00      	cmp	r3, #0
 80105b2:	dc03      	bgt.n	80105bc <_dtoa_r+0xb3c>
 80105b4:	9b06      	ldr	r3, [sp, #24]
 80105b6:	2b02      	cmp	r3, #2
 80105b8:	f73f aecc 	bgt.w	8010354 <_dtoa_r+0x8d4>
 80105bc:	465d      	mov	r5, fp
 80105be:	4639      	mov	r1, r7
 80105c0:	9804      	ldr	r0, [sp, #16]
 80105c2:	f7ff f9cf 	bl	800f964 <quorem>
 80105c6:	f100 0830 	add.w	r8, r0, #48	; 0x30
 80105ca:	f805 8b01 	strb.w	r8, [r5], #1
 80105ce:	9a02      	ldr	r2, [sp, #8]
 80105d0:	eba5 030b 	sub.w	r3, r5, fp
 80105d4:	429a      	cmp	r2, r3
 80105d6:	ddb0      	ble.n	801053a <_dtoa_r+0xaba>
 80105d8:	2300      	movs	r3, #0
 80105da:	220a      	movs	r2, #10
 80105dc:	9904      	ldr	r1, [sp, #16]
 80105de:	4620      	mov	r0, r4
 80105e0:	f000 fb9f 	bl	8010d22 <__multadd>
 80105e4:	9004      	str	r0, [sp, #16]
 80105e6:	e7ea      	b.n	80105be <_dtoa_r+0xb3e>
 80105e8:	08012020 	.word	0x08012020
 80105ec:	080120a0 	.word	0x080120a0

080105f0 <rshift>:
 80105f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80105f2:	6906      	ldr	r6, [r0, #16]
 80105f4:	114b      	asrs	r3, r1, #5
 80105f6:	429e      	cmp	r6, r3
 80105f8:	f100 0414 	add.w	r4, r0, #20
 80105fc:	dd30      	ble.n	8010660 <rshift+0x70>
 80105fe:	f011 011f 	ands.w	r1, r1, #31
 8010602:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 8010606:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 801060a:	d108      	bne.n	801061e <rshift+0x2e>
 801060c:	4621      	mov	r1, r4
 801060e:	42b2      	cmp	r2, r6
 8010610:	460b      	mov	r3, r1
 8010612:	d211      	bcs.n	8010638 <rshift+0x48>
 8010614:	f852 3b04 	ldr.w	r3, [r2], #4
 8010618:	f841 3b04 	str.w	r3, [r1], #4
 801061c:	e7f7      	b.n	801060e <rshift+0x1e>
 801061e:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 8010622:	f1c1 0c20 	rsb	ip, r1, #32
 8010626:	40cd      	lsrs	r5, r1
 8010628:	3204      	adds	r2, #4
 801062a:	4623      	mov	r3, r4
 801062c:	42b2      	cmp	r2, r6
 801062e:	4617      	mov	r7, r2
 8010630:	d30c      	bcc.n	801064c <rshift+0x5c>
 8010632:	601d      	str	r5, [r3, #0]
 8010634:	b105      	cbz	r5, 8010638 <rshift+0x48>
 8010636:	3304      	adds	r3, #4
 8010638:	1b1a      	subs	r2, r3, r4
 801063a:	42a3      	cmp	r3, r4
 801063c:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8010640:	bf08      	it	eq
 8010642:	2300      	moveq	r3, #0
 8010644:	6102      	str	r2, [r0, #16]
 8010646:	bf08      	it	eq
 8010648:	6143      	streq	r3, [r0, #20]
 801064a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801064c:	683f      	ldr	r7, [r7, #0]
 801064e:	fa07 f70c 	lsl.w	r7, r7, ip
 8010652:	433d      	orrs	r5, r7
 8010654:	f843 5b04 	str.w	r5, [r3], #4
 8010658:	f852 5b04 	ldr.w	r5, [r2], #4
 801065c:	40cd      	lsrs	r5, r1
 801065e:	e7e5      	b.n	801062c <rshift+0x3c>
 8010660:	4623      	mov	r3, r4
 8010662:	e7e9      	b.n	8010638 <rshift+0x48>

08010664 <__hexdig_fun>:
 8010664:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8010668:	2b09      	cmp	r3, #9
 801066a:	d802      	bhi.n	8010672 <__hexdig_fun+0xe>
 801066c:	3820      	subs	r0, #32
 801066e:	b2c0      	uxtb	r0, r0
 8010670:	4770      	bx	lr
 8010672:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8010676:	2b05      	cmp	r3, #5
 8010678:	d801      	bhi.n	801067e <__hexdig_fun+0x1a>
 801067a:	3847      	subs	r0, #71	; 0x47
 801067c:	e7f7      	b.n	801066e <__hexdig_fun+0xa>
 801067e:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8010682:	2b05      	cmp	r3, #5
 8010684:	d801      	bhi.n	801068a <__hexdig_fun+0x26>
 8010686:	3827      	subs	r0, #39	; 0x27
 8010688:	e7f1      	b.n	801066e <__hexdig_fun+0xa>
 801068a:	2000      	movs	r0, #0
 801068c:	4770      	bx	lr

0801068e <__gethex>:
 801068e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010692:	b08b      	sub	sp, #44	; 0x2c
 8010694:	468a      	mov	sl, r1
 8010696:	9002      	str	r0, [sp, #8]
 8010698:	9816      	ldr	r0, [sp, #88]	; 0x58
 801069a:	9306      	str	r3, [sp, #24]
 801069c:	4690      	mov	r8, r2
 801069e:	f000 fad0 	bl	8010c42 <__localeconv_l>
 80106a2:	6803      	ldr	r3, [r0, #0]
 80106a4:	9303      	str	r3, [sp, #12]
 80106a6:	4618      	mov	r0, r3
 80106a8:	f7ef fd92 	bl	80001d0 <strlen>
 80106ac:	9b03      	ldr	r3, [sp, #12]
 80106ae:	9001      	str	r0, [sp, #4]
 80106b0:	4403      	add	r3, r0
 80106b2:	f04f 0b00 	mov.w	fp, #0
 80106b6:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 80106ba:	9307      	str	r3, [sp, #28]
 80106bc:	f8da 3000 	ldr.w	r3, [sl]
 80106c0:	3302      	adds	r3, #2
 80106c2:	461f      	mov	r7, r3
 80106c4:	f813 0b01 	ldrb.w	r0, [r3], #1
 80106c8:	2830      	cmp	r0, #48	; 0x30
 80106ca:	d06c      	beq.n	80107a6 <__gethex+0x118>
 80106cc:	f7ff ffca 	bl	8010664 <__hexdig_fun>
 80106d0:	4604      	mov	r4, r0
 80106d2:	2800      	cmp	r0, #0
 80106d4:	d16a      	bne.n	80107ac <__gethex+0x11e>
 80106d6:	9a01      	ldr	r2, [sp, #4]
 80106d8:	9903      	ldr	r1, [sp, #12]
 80106da:	4638      	mov	r0, r7
 80106dc:	f001 f836 	bl	801174c <strncmp>
 80106e0:	2800      	cmp	r0, #0
 80106e2:	d166      	bne.n	80107b2 <__gethex+0x124>
 80106e4:	9b01      	ldr	r3, [sp, #4]
 80106e6:	5cf8      	ldrb	r0, [r7, r3]
 80106e8:	18fe      	adds	r6, r7, r3
 80106ea:	f7ff ffbb 	bl	8010664 <__hexdig_fun>
 80106ee:	2800      	cmp	r0, #0
 80106f0:	d062      	beq.n	80107b8 <__gethex+0x12a>
 80106f2:	4633      	mov	r3, r6
 80106f4:	7818      	ldrb	r0, [r3, #0]
 80106f6:	2830      	cmp	r0, #48	; 0x30
 80106f8:	461f      	mov	r7, r3
 80106fa:	f103 0301 	add.w	r3, r3, #1
 80106fe:	d0f9      	beq.n	80106f4 <__gethex+0x66>
 8010700:	f7ff ffb0 	bl	8010664 <__hexdig_fun>
 8010704:	fab0 f580 	clz	r5, r0
 8010708:	096d      	lsrs	r5, r5, #5
 801070a:	4634      	mov	r4, r6
 801070c:	f04f 0b01 	mov.w	fp, #1
 8010710:	463a      	mov	r2, r7
 8010712:	4616      	mov	r6, r2
 8010714:	3201      	adds	r2, #1
 8010716:	7830      	ldrb	r0, [r6, #0]
 8010718:	f7ff ffa4 	bl	8010664 <__hexdig_fun>
 801071c:	2800      	cmp	r0, #0
 801071e:	d1f8      	bne.n	8010712 <__gethex+0x84>
 8010720:	9a01      	ldr	r2, [sp, #4]
 8010722:	9903      	ldr	r1, [sp, #12]
 8010724:	4630      	mov	r0, r6
 8010726:	f001 f811 	bl	801174c <strncmp>
 801072a:	b950      	cbnz	r0, 8010742 <__gethex+0xb4>
 801072c:	b954      	cbnz	r4, 8010744 <__gethex+0xb6>
 801072e:	9b01      	ldr	r3, [sp, #4]
 8010730:	18f4      	adds	r4, r6, r3
 8010732:	4622      	mov	r2, r4
 8010734:	4616      	mov	r6, r2
 8010736:	3201      	adds	r2, #1
 8010738:	7830      	ldrb	r0, [r6, #0]
 801073a:	f7ff ff93 	bl	8010664 <__hexdig_fun>
 801073e:	2800      	cmp	r0, #0
 8010740:	d1f8      	bne.n	8010734 <__gethex+0xa6>
 8010742:	b10c      	cbz	r4, 8010748 <__gethex+0xba>
 8010744:	1ba4      	subs	r4, r4, r6
 8010746:	00a4      	lsls	r4, r4, #2
 8010748:	7833      	ldrb	r3, [r6, #0]
 801074a:	2b50      	cmp	r3, #80	; 0x50
 801074c:	d001      	beq.n	8010752 <__gethex+0xc4>
 801074e:	2b70      	cmp	r3, #112	; 0x70
 8010750:	d140      	bne.n	80107d4 <__gethex+0x146>
 8010752:	7873      	ldrb	r3, [r6, #1]
 8010754:	2b2b      	cmp	r3, #43	; 0x2b
 8010756:	d031      	beq.n	80107bc <__gethex+0x12e>
 8010758:	2b2d      	cmp	r3, #45	; 0x2d
 801075a:	d033      	beq.n	80107c4 <__gethex+0x136>
 801075c:	1c71      	adds	r1, r6, #1
 801075e:	f04f 0900 	mov.w	r9, #0
 8010762:	7808      	ldrb	r0, [r1, #0]
 8010764:	f7ff ff7e 	bl	8010664 <__hexdig_fun>
 8010768:	1e43      	subs	r3, r0, #1
 801076a:	b2db      	uxtb	r3, r3
 801076c:	2b18      	cmp	r3, #24
 801076e:	d831      	bhi.n	80107d4 <__gethex+0x146>
 8010770:	f1a0 0210 	sub.w	r2, r0, #16
 8010774:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8010778:	f7ff ff74 	bl	8010664 <__hexdig_fun>
 801077c:	1e43      	subs	r3, r0, #1
 801077e:	b2db      	uxtb	r3, r3
 8010780:	2b18      	cmp	r3, #24
 8010782:	d922      	bls.n	80107ca <__gethex+0x13c>
 8010784:	f1b9 0f00 	cmp.w	r9, #0
 8010788:	d000      	beq.n	801078c <__gethex+0xfe>
 801078a:	4252      	negs	r2, r2
 801078c:	4414      	add	r4, r2
 801078e:	f8ca 1000 	str.w	r1, [sl]
 8010792:	b30d      	cbz	r5, 80107d8 <__gethex+0x14a>
 8010794:	f1bb 0f00 	cmp.w	fp, #0
 8010798:	bf0c      	ite	eq
 801079a:	2706      	moveq	r7, #6
 801079c:	2700      	movne	r7, #0
 801079e:	4638      	mov	r0, r7
 80107a0:	b00b      	add	sp, #44	; 0x2c
 80107a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80107a6:	f10b 0b01 	add.w	fp, fp, #1
 80107aa:	e78a      	b.n	80106c2 <__gethex+0x34>
 80107ac:	2500      	movs	r5, #0
 80107ae:	462c      	mov	r4, r5
 80107b0:	e7ae      	b.n	8010710 <__gethex+0x82>
 80107b2:	463e      	mov	r6, r7
 80107b4:	2501      	movs	r5, #1
 80107b6:	e7c7      	b.n	8010748 <__gethex+0xba>
 80107b8:	4604      	mov	r4, r0
 80107ba:	e7fb      	b.n	80107b4 <__gethex+0x126>
 80107bc:	f04f 0900 	mov.w	r9, #0
 80107c0:	1cb1      	adds	r1, r6, #2
 80107c2:	e7ce      	b.n	8010762 <__gethex+0xd4>
 80107c4:	f04f 0901 	mov.w	r9, #1
 80107c8:	e7fa      	b.n	80107c0 <__gethex+0x132>
 80107ca:	230a      	movs	r3, #10
 80107cc:	fb03 0202 	mla	r2, r3, r2, r0
 80107d0:	3a10      	subs	r2, #16
 80107d2:	e7cf      	b.n	8010774 <__gethex+0xe6>
 80107d4:	4631      	mov	r1, r6
 80107d6:	e7da      	b.n	801078e <__gethex+0x100>
 80107d8:	1bf3      	subs	r3, r6, r7
 80107da:	3b01      	subs	r3, #1
 80107dc:	4629      	mov	r1, r5
 80107de:	2b07      	cmp	r3, #7
 80107e0:	dc49      	bgt.n	8010876 <__gethex+0x1e8>
 80107e2:	9802      	ldr	r0, [sp, #8]
 80107e4:	f000 fa52 	bl	8010c8c <_Balloc>
 80107e8:	9b01      	ldr	r3, [sp, #4]
 80107ea:	f100 0914 	add.w	r9, r0, #20
 80107ee:	f04f 0b00 	mov.w	fp, #0
 80107f2:	f1c3 0301 	rsb	r3, r3, #1
 80107f6:	4605      	mov	r5, r0
 80107f8:	f8cd 9010 	str.w	r9, [sp, #16]
 80107fc:	46da      	mov	sl, fp
 80107fe:	9308      	str	r3, [sp, #32]
 8010800:	42b7      	cmp	r7, r6
 8010802:	d33b      	bcc.n	801087c <__gethex+0x1ee>
 8010804:	9804      	ldr	r0, [sp, #16]
 8010806:	f840 ab04 	str.w	sl, [r0], #4
 801080a:	eba0 0009 	sub.w	r0, r0, r9
 801080e:	1080      	asrs	r0, r0, #2
 8010810:	6128      	str	r0, [r5, #16]
 8010812:	0147      	lsls	r7, r0, #5
 8010814:	4650      	mov	r0, sl
 8010816:	f000 fafd 	bl	8010e14 <__hi0bits>
 801081a:	f8d8 6000 	ldr.w	r6, [r8]
 801081e:	1a3f      	subs	r7, r7, r0
 8010820:	42b7      	cmp	r7, r6
 8010822:	dd64      	ble.n	80108ee <__gethex+0x260>
 8010824:	1bbf      	subs	r7, r7, r6
 8010826:	4639      	mov	r1, r7
 8010828:	4628      	mov	r0, r5
 801082a:	f000 fe0d 	bl	8011448 <__any_on>
 801082e:	4682      	mov	sl, r0
 8010830:	b178      	cbz	r0, 8010852 <__gethex+0x1c4>
 8010832:	1e7b      	subs	r3, r7, #1
 8010834:	1159      	asrs	r1, r3, #5
 8010836:	f003 021f 	and.w	r2, r3, #31
 801083a:	f04f 0a01 	mov.w	sl, #1
 801083e:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8010842:	fa0a f202 	lsl.w	r2, sl, r2
 8010846:	420a      	tst	r2, r1
 8010848:	d003      	beq.n	8010852 <__gethex+0x1c4>
 801084a:	4553      	cmp	r3, sl
 801084c:	dc46      	bgt.n	80108dc <__gethex+0x24e>
 801084e:	f04f 0a02 	mov.w	sl, #2
 8010852:	4639      	mov	r1, r7
 8010854:	4628      	mov	r0, r5
 8010856:	f7ff fecb 	bl	80105f0 <rshift>
 801085a:	443c      	add	r4, r7
 801085c:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8010860:	42a3      	cmp	r3, r4
 8010862:	da52      	bge.n	801090a <__gethex+0x27c>
 8010864:	4629      	mov	r1, r5
 8010866:	9802      	ldr	r0, [sp, #8]
 8010868:	f000 fa44 	bl	8010cf4 <_Bfree>
 801086c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801086e:	2300      	movs	r3, #0
 8010870:	6013      	str	r3, [r2, #0]
 8010872:	27a3      	movs	r7, #163	; 0xa3
 8010874:	e793      	b.n	801079e <__gethex+0x110>
 8010876:	3101      	adds	r1, #1
 8010878:	105b      	asrs	r3, r3, #1
 801087a:	e7b0      	b.n	80107de <__gethex+0x150>
 801087c:	1e73      	subs	r3, r6, #1
 801087e:	9305      	str	r3, [sp, #20]
 8010880:	9a07      	ldr	r2, [sp, #28]
 8010882:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8010886:	4293      	cmp	r3, r2
 8010888:	d018      	beq.n	80108bc <__gethex+0x22e>
 801088a:	f1bb 0f20 	cmp.w	fp, #32
 801088e:	d107      	bne.n	80108a0 <__gethex+0x212>
 8010890:	9b04      	ldr	r3, [sp, #16]
 8010892:	f8c3 a000 	str.w	sl, [r3]
 8010896:	3304      	adds	r3, #4
 8010898:	f04f 0a00 	mov.w	sl, #0
 801089c:	9304      	str	r3, [sp, #16]
 801089e:	46d3      	mov	fp, sl
 80108a0:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 80108a4:	f7ff fede 	bl	8010664 <__hexdig_fun>
 80108a8:	f000 000f 	and.w	r0, r0, #15
 80108ac:	fa00 f00b 	lsl.w	r0, r0, fp
 80108b0:	ea4a 0a00 	orr.w	sl, sl, r0
 80108b4:	f10b 0b04 	add.w	fp, fp, #4
 80108b8:	9b05      	ldr	r3, [sp, #20]
 80108ba:	e00d      	b.n	80108d8 <__gethex+0x24a>
 80108bc:	9b05      	ldr	r3, [sp, #20]
 80108be:	9a08      	ldr	r2, [sp, #32]
 80108c0:	4413      	add	r3, r2
 80108c2:	42bb      	cmp	r3, r7
 80108c4:	d3e1      	bcc.n	801088a <__gethex+0x1fc>
 80108c6:	4618      	mov	r0, r3
 80108c8:	9a01      	ldr	r2, [sp, #4]
 80108ca:	9903      	ldr	r1, [sp, #12]
 80108cc:	9309      	str	r3, [sp, #36]	; 0x24
 80108ce:	f000 ff3d 	bl	801174c <strncmp>
 80108d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80108d4:	2800      	cmp	r0, #0
 80108d6:	d1d8      	bne.n	801088a <__gethex+0x1fc>
 80108d8:	461e      	mov	r6, r3
 80108da:	e791      	b.n	8010800 <__gethex+0x172>
 80108dc:	1eb9      	subs	r1, r7, #2
 80108de:	4628      	mov	r0, r5
 80108e0:	f000 fdb2 	bl	8011448 <__any_on>
 80108e4:	2800      	cmp	r0, #0
 80108e6:	d0b2      	beq.n	801084e <__gethex+0x1c0>
 80108e8:	f04f 0a03 	mov.w	sl, #3
 80108ec:	e7b1      	b.n	8010852 <__gethex+0x1c4>
 80108ee:	da09      	bge.n	8010904 <__gethex+0x276>
 80108f0:	1bf7      	subs	r7, r6, r7
 80108f2:	4629      	mov	r1, r5
 80108f4:	463a      	mov	r2, r7
 80108f6:	9802      	ldr	r0, [sp, #8]
 80108f8:	f000 fbc8 	bl	801108c <__lshift>
 80108fc:	1be4      	subs	r4, r4, r7
 80108fe:	4605      	mov	r5, r0
 8010900:	f100 0914 	add.w	r9, r0, #20
 8010904:	f04f 0a00 	mov.w	sl, #0
 8010908:	e7a8      	b.n	801085c <__gethex+0x1ce>
 801090a:	f8d8 0004 	ldr.w	r0, [r8, #4]
 801090e:	42a0      	cmp	r0, r4
 8010910:	dd6a      	ble.n	80109e8 <__gethex+0x35a>
 8010912:	1b04      	subs	r4, r0, r4
 8010914:	42a6      	cmp	r6, r4
 8010916:	dc2e      	bgt.n	8010976 <__gethex+0x2e8>
 8010918:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801091c:	2b02      	cmp	r3, #2
 801091e:	d022      	beq.n	8010966 <__gethex+0x2d8>
 8010920:	2b03      	cmp	r3, #3
 8010922:	d024      	beq.n	801096e <__gethex+0x2e0>
 8010924:	2b01      	cmp	r3, #1
 8010926:	d115      	bne.n	8010954 <__gethex+0x2c6>
 8010928:	42a6      	cmp	r6, r4
 801092a:	d113      	bne.n	8010954 <__gethex+0x2c6>
 801092c:	2e01      	cmp	r6, #1
 801092e:	dc0b      	bgt.n	8010948 <__gethex+0x2ba>
 8010930:	9a06      	ldr	r2, [sp, #24]
 8010932:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8010936:	6013      	str	r3, [r2, #0]
 8010938:	2301      	movs	r3, #1
 801093a:	612b      	str	r3, [r5, #16]
 801093c:	f8c9 3000 	str.w	r3, [r9]
 8010940:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8010942:	2762      	movs	r7, #98	; 0x62
 8010944:	601d      	str	r5, [r3, #0]
 8010946:	e72a      	b.n	801079e <__gethex+0x110>
 8010948:	1e71      	subs	r1, r6, #1
 801094a:	4628      	mov	r0, r5
 801094c:	f000 fd7c 	bl	8011448 <__any_on>
 8010950:	2800      	cmp	r0, #0
 8010952:	d1ed      	bne.n	8010930 <__gethex+0x2a2>
 8010954:	4629      	mov	r1, r5
 8010956:	9802      	ldr	r0, [sp, #8]
 8010958:	f000 f9cc 	bl	8010cf4 <_Bfree>
 801095c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801095e:	2300      	movs	r3, #0
 8010960:	6013      	str	r3, [r2, #0]
 8010962:	2750      	movs	r7, #80	; 0x50
 8010964:	e71b      	b.n	801079e <__gethex+0x110>
 8010966:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8010968:	2b00      	cmp	r3, #0
 801096a:	d0e1      	beq.n	8010930 <__gethex+0x2a2>
 801096c:	e7f2      	b.n	8010954 <__gethex+0x2c6>
 801096e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8010970:	2b00      	cmp	r3, #0
 8010972:	d1dd      	bne.n	8010930 <__gethex+0x2a2>
 8010974:	e7ee      	b.n	8010954 <__gethex+0x2c6>
 8010976:	1e67      	subs	r7, r4, #1
 8010978:	f1ba 0f00 	cmp.w	sl, #0
 801097c:	d131      	bne.n	80109e2 <__gethex+0x354>
 801097e:	b127      	cbz	r7, 801098a <__gethex+0x2fc>
 8010980:	4639      	mov	r1, r7
 8010982:	4628      	mov	r0, r5
 8010984:	f000 fd60 	bl	8011448 <__any_on>
 8010988:	4682      	mov	sl, r0
 801098a:	117a      	asrs	r2, r7, #5
 801098c:	2301      	movs	r3, #1
 801098e:	f007 071f 	and.w	r7, r7, #31
 8010992:	fa03 f707 	lsl.w	r7, r3, r7
 8010996:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 801099a:	4621      	mov	r1, r4
 801099c:	421f      	tst	r7, r3
 801099e:	4628      	mov	r0, r5
 80109a0:	bf18      	it	ne
 80109a2:	f04a 0a02 	orrne.w	sl, sl, #2
 80109a6:	1b36      	subs	r6, r6, r4
 80109a8:	f7ff fe22 	bl	80105f0 <rshift>
 80109ac:	f8d8 4004 	ldr.w	r4, [r8, #4]
 80109b0:	2702      	movs	r7, #2
 80109b2:	f1ba 0f00 	cmp.w	sl, #0
 80109b6:	d048      	beq.n	8010a4a <__gethex+0x3bc>
 80109b8:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80109bc:	2b02      	cmp	r3, #2
 80109be:	d015      	beq.n	80109ec <__gethex+0x35e>
 80109c0:	2b03      	cmp	r3, #3
 80109c2:	d017      	beq.n	80109f4 <__gethex+0x366>
 80109c4:	2b01      	cmp	r3, #1
 80109c6:	d109      	bne.n	80109dc <__gethex+0x34e>
 80109c8:	f01a 0f02 	tst.w	sl, #2
 80109cc:	d006      	beq.n	80109dc <__gethex+0x34e>
 80109ce:	f8d9 3000 	ldr.w	r3, [r9]
 80109d2:	ea4a 0a03 	orr.w	sl, sl, r3
 80109d6:	f01a 0f01 	tst.w	sl, #1
 80109da:	d10e      	bne.n	80109fa <__gethex+0x36c>
 80109dc:	f047 0710 	orr.w	r7, r7, #16
 80109e0:	e033      	b.n	8010a4a <__gethex+0x3bc>
 80109e2:	f04f 0a01 	mov.w	sl, #1
 80109e6:	e7d0      	b.n	801098a <__gethex+0x2fc>
 80109e8:	2701      	movs	r7, #1
 80109ea:	e7e2      	b.n	80109b2 <__gethex+0x324>
 80109ec:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80109ee:	f1c3 0301 	rsb	r3, r3, #1
 80109f2:	9315      	str	r3, [sp, #84]	; 0x54
 80109f4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80109f6:	2b00      	cmp	r3, #0
 80109f8:	d0f0      	beq.n	80109dc <__gethex+0x34e>
 80109fa:	f8d5 9010 	ldr.w	r9, [r5, #16]
 80109fe:	f105 0314 	add.w	r3, r5, #20
 8010a02:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 8010a06:	eb03 010a 	add.w	r1, r3, sl
 8010a0a:	f04f 0c00 	mov.w	ip, #0
 8010a0e:	4618      	mov	r0, r3
 8010a10:	f853 2b04 	ldr.w	r2, [r3], #4
 8010a14:	f1b2 3fff 	cmp.w	r2, #4294967295
 8010a18:	d01c      	beq.n	8010a54 <__gethex+0x3c6>
 8010a1a:	3201      	adds	r2, #1
 8010a1c:	6002      	str	r2, [r0, #0]
 8010a1e:	2f02      	cmp	r7, #2
 8010a20:	f105 0314 	add.w	r3, r5, #20
 8010a24:	d138      	bne.n	8010a98 <__gethex+0x40a>
 8010a26:	f8d8 2000 	ldr.w	r2, [r8]
 8010a2a:	3a01      	subs	r2, #1
 8010a2c:	42b2      	cmp	r2, r6
 8010a2e:	d10a      	bne.n	8010a46 <__gethex+0x3b8>
 8010a30:	1171      	asrs	r1, r6, #5
 8010a32:	2201      	movs	r2, #1
 8010a34:	f006 061f 	and.w	r6, r6, #31
 8010a38:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8010a3c:	fa02 f606 	lsl.w	r6, r2, r6
 8010a40:	421e      	tst	r6, r3
 8010a42:	bf18      	it	ne
 8010a44:	4617      	movne	r7, r2
 8010a46:	f047 0720 	orr.w	r7, r7, #32
 8010a4a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8010a4c:	601d      	str	r5, [r3, #0]
 8010a4e:	9b06      	ldr	r3, [sp, #24]
 8010a50:	601c      	str	r4, [r3, #0]
 8010a52:	e6a4      	b.n	801079e <__gethex+0x110>
 8010a54:	4299      	cmp	r1, r3
 8010a56:	f843 cc04 	str.w	ip, [r3, #-4]
 8010a5a:	d8d8      	bhi.n	8010a0e <__gethex+0x380>
 8010a5c:	68ab      	ldr	r3, [r5, #8]
 8010a5e:	4599      	cmp	r9, r3
 8010a60:	db12      	blt.n	8010a88 <__gethex+0x3fa>
 8010a62:	6869      	ldr	r1, [r5, #4]
 8010a64:	9802      	ldr	r0, [sp, #8]
 8010a66:	3101      	adds	r1, #1
 8010a68:	f000 f910 	bl	8010c8c <_Balloc>
 8010a6c:	692a      	ldr	r2, [r5, #16]
 8010a6e:	3202      	adds	r2, #2
 8010a70:	f105 010c 	add.w	r1, r5, #12
 8010a74:	4683      	mov	fp, r0
 8010a76:	0092      	lsls	r2, r2, #2
 8010a78:	300c      	adds	r0, #12
 8010a7a:	f7fd f993 	bl	800dda4 <memcpy>
 8010a7e:	4629      	mov	r1, r5
 8010a80:	9802      	ldr	r0, [sp, #8]
 8010a82:	f000 f937 	bl	8010cf4 <_Bfree>
 8010a86:	465d      	mov	r5, fp
 8010a88:	692b      	ldr	r3, [r5, #16]
 8010a8a:	1c5a      	adds	r2, r3, #1
 8010a8c:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8010a90:	612a      	str	r2, [r5, #16]
 8010a92:	2201      	movs	r2, #1
 8010a94:	615a      	str	r2, [r3, #20]
 8010a96:	e7c2      	b.n	8010a1e <__gethex+0x390>
 8010a98:	692a      	ldr	r2, [r5, #16]
 8010a9a:	454a      	cmp	r2, r9
 8010a9c:	dd0b      	ble.n	8010ab6 <__gethex+0x428>
 8010a9e:	2101      	movs	r1, #1
 8010aa0:	4628      	mov	r0, r5
 8010aa2:	f7ff fda5 	bl	80105f0 <rshift>
 8010aa6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8010aaa:	3401      	adds	r4, #1
 8010aac:	42a3      	cmp	r3, r4
 8010aae:	f6ff aed9 	blt.w	8010864 <__gethex+0x1d6>
 8010ab2:	2701      	movs	r7, #1
 8010ab4:	e7c7      	b.n	8010a46 <__gethex+0x3b8>
 8010ab6:	f016 061f 	ands.w	r6, r6, #31
 8010aba:	d0fa      	beq.n	8010ab2 <__gethex+0x424>
 8010abc:	449a      	add	sl, r3
 8010abe:	f1c6 0620 	rsb	r6, r6, #32
 8010ac2:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 8010ac6:	f000 f9a5 	bl	8010e14 <__hi0bits>
 8010aca:	42b0      	cmp	r0, r6
 8010acc:	dbe7      	blt.n	8010a9e <__gethex+0x410>
 8010ace:	e7f0      	b.n	8010ab2 <__gethex+0x424>

08010ad0 <L_shift>:
 8010ad0:	f1c2 0208 	rsb	r2, r2, #8
 8010ad4:	0092      	lsls	r2, r2, #2
 8010ad6:	b570      	push	{r4, r5, r6, lr}
 8010ad8:	f1c2 0620 	rsb	r6, r2, #32
 8010adc:	6843      	ldr	r3, [r0, #4]
 8010ade:	6804      	ldr	r4, [r0, #0]
 8010ae0:	fa03 f506 	lsl.w	r5, r3, r6
 8010ae4:	432c      	orrs	r4, r5
 8010ae6:	40d3      	lsrs	r3, r2
 8010ae8:	6004      	str	r4, [r0, #0]
 8010aea:	f840 3f04 	str.w	r3, [r0, #4]!
 8010aee:	4288      	cmp	r0, r1
 8010af0:	d3f4      	bcc.n	8010adc <L_shift+0xc>
 8010af2:	bd70      	pop	{r4, r5, r6, pc}

08010af4 <__match>:
 8010af4:	b530      	push	{r4, r5, lr}
 8010af6:	6803      	ldr	r3, [r0, #0]
 8010af8:	3301      	adds	r3, #1
 8010afa:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010afe:	b914      	cbnz	r4, 8010b06 <__match+0x12>
 8010b00:	6003      	str	r3, [r0, #0]
 8010b02:	2001      	movs	r0, #1
 8010b04:	bd30      	pop	{r4, r5, pc}
 8010b06:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010b0a:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8010b0e:	2d19      	cmp	r5, #25
 8010b10:	bf98      	it	ls
 8010b12:	3220      	addls	r2, #32
 8010b14:	42a2      	cmp	r2, r4
 8010b16:	d0f0      	beq.n	8010afa <__match+0x6>
 8010b18:	2000      	movs	r0, #0
 8010b1a:	e7f3      	b.n	8010b04 <__match+0x10>

08010b1c <__hexnan>:
 8010b1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010b20:	680b      	ldr	r3, [r1, #0]
 8010b22:	6801      	ldr	r1, [r0, #0]
 8010b24:	115f      	asrs	r7, r3, #5
 8010b26:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 8010b2a:	f013 031f 	ands.w	r3, r3, #31
 8010b2e:	b087      	sub	sp, #28
 8010b30:	bf18      	it	ne
 8010b32:	3704      	addne	r7, #4
 8010b34:	2500      	movs	r5, #0
 8010b36:	1f3e      	subs	r6, r7, #4
 8010b38:	4682      	mov	sl, r0
 8010b3a:	4690      	mov	r8, r2
 8010b3c:	9301      	str	r3, [sp, #4]
 8010b3e:	f847 5c04 	str.w	r5, [r7, #-4]
 8010b42:	46b1      	mov	r9, r6
 8010b44:	4634      	mov	r4, r6
 8010b46:	9502      	str	r5, [sp, #8]
 8010b48:	46ab      	mov	fp, r5
 8010b4a:	784a      	ldrb	r2, [r1, #1]
 8010b4c:	1c4b      	adds	r3, r1, #1
 8010b4e:	9303      	str	r3, [sp, #12]
 8010b50:	b342      	cbz	r2, 8010ba4 <__hexnan+0x88>
 8010b52:	4610      	mov	r0, r2
 8010b54:	9105      	str	r1, [sp, #20]
 8010b56:	9204      	str	r2, [sp, #16]
 8010b58:	f7ff fd84 	bl	8010664 <__hexdig_fun>
 8010b5c:	2800      	cmp	r0, #0
 8010b5e:	d143      	bne.n	8010be8 <__hexnan+0xcc>
 8010b60:	9a04      	ldr	r2, [sp, #16]
 8010b62:	9905      	ldr	r1, [sp, #20]
 8010b64:	2a20      	cmp	r2, #32
 8010b66:	d818      	bhi.n	8010b9a <__hexnan+0x7e>
 8010b68:	9b02      	ldr	r3, [sp, #8]
 8010b6a:	459b      	cmp	fp, r3
 8010b6c:	dd13      	ble.n	8010b96 <__hexnan+0x7a>
 8010b6e:	454c      	cmp	r4, r9
 8010b70:	d206      	bcs.n	8010b80 <__hexnan+0x64>
 8010b72:	2d07      	cmp	r5, #7
 8010b74:	dc04      	bgt.n	8010b80 <__hexnan+0x64>
 8010b76:	462a      	mov	r2, r5
 8010b78:	4649      	mov	r1, r9
 8010b7a:	4620      	mov	r0, r4
 8010b7c:	f7ff ffa8 	bl	8010ad0 <L_shift>
 8010b80:	4544      	cmp	r4, r8
 8010b82:	d944      	bls.n	8010c0e <__hexnan+0xf2>
 8010b84:	2300      	movs	r3, #0
 8010b86:	f1a4 0904 	sub.w	r9, r4, #4
 8010b8a:	f844 3c04 	str.w	r3, [r4, #-4]
 8010b8e:	f8cd b008 	str.w	fp, [sp, #8]
 8010b92:	464c      	mov	r4, r9
 8010b94:	461d      	mov	r5, r3
 8010b96:	9903      	ldr	r1, [sp, #12]
 8010b98:	e7d7      	b.n	8010b4a <__hexnan+0x2e>
 8010b9a:	2a29      	cmp	r2, #41	; 0x29
 8010b9c:	d14a      	bne.n	8010c34 <__hexnan+0x118>
 8010b9e:	3102      	adds	r1, #2
 8010ba0:	f8ca 1000 	str.w	r1, [sl]
 8010ba4:	f1bb 0f00 	cmp.w	fp, #0
 8010ba8:	d044      	beq.n	8010c34 <__hexnan+0x118>
 8010baa:	454c      	cmp	r4, r9
 8010bac:	d206      	bcs.n	8010bbc <__hexnan+0xa0>
 8010bae:	2d07      	cmp	r5, #7
 8010bb0:	dc04      	bgt.n	8010bbc <__hexnan+0xa0>
 8010bb2:	462a      	mov	r2, r5
 8010bb4:	4649      	mov	r1, r9
 8010bb6:	4620      	mov	r0, r4
 8010bb8:	f7ff ff8a 	bl	8010ad0 <L_shift>
 8010bbc:	4544      	cmp	r4, r8
 8010bbe:	d928      	bls.n	8010c12 <__hexnan+0xf6>
 8010bc0:	4643      	mov	r3, r8
 8010bc2:	f854 2b04 	ldr.w	r2, [r4], #4
 8010bc6:	f843 2b04 	str.w	r2, [r3], #4
 8010bca:	42a6      	cmp	r6, r4
 8010bcc:	d2f9      	bcs.n	8010bc2 <__hexnan+0xa6>
 8010bce:	2200      	movs	r2, #0
 8010bd0:	f843 2b04 	str.w	r2, [r3], #4
 8010bd4:	429e      	cmp	r6, r3
 8010bd6:	d2fb      	bcs.n	8010bd0 <__hexnan+0xb4>
 8010bd8:	6833      	ldr	r3, [r6, #0]
 8010bda:	b91b      	cbnz	r3, 8010be4 <__hexnan+0xc8>
 8010bdc:	4546      	cmp	r6, r8
 8010bde:	d127      	bne.n	8010c30 <__hexnan+0x114>
 8010be0:	2301      	movs	r3, #1
 8010be2:	6033      	str	r3, [r6, #0]
 8010be4:	2005      	movs	r0, #5
 8010be6:	e026      	b.n	8010c36 <__hexnan+0x11a>
 8010be8:	3501      	adds	r5, #1
 8010bea:	2d08      	cmp	r5, #8
 8010bec:	f10b 0b01 	add.w	fp, fp, #1
 8010bf0:	dd06      	ble.n	8010c00 <__hexnan+0xe4>
 8010bf2:	4544      	cmp	r4, r8
 8010bf4:	d9cf      	bls.n	8010b96 <__hexnan+0x7a>
 8010bf6:	2300      	movs	r3, #0
 8010bf8:	f844 3c04 	str.w	r3, [r4, #-4]
 8010bfc:	2501      	movs	r5, #1
 8010bfe:	3c04      	subs	r4, #4
 8010c00:	6822      	ldr	r2, [r4, #0]
 8010c02:	f000 000f 	and.w	r0, r0, #15
 8010c06:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8010c0a:	6020      	str	r0, [r4, #0]
 8010c0c:	e7c3      	b.n	8010b96 <__hexnan+0x7a>
 8010c0e:	2508      	movs	r5, #8
 8010c10:	e7c1      	b.n	8010b96 <__hexnan+0x7a>
 8010c12:	9b01      	ldr	r3, [sp, #4]
 8010c14:	2b00      	cmp	r3, #0
 8010c16:	d0df      	beq.n	8010bd8 <__hexnan+0xbc>
 8010c18:	f04f 32ff 	mov.w	r2, #4294967295
 8010c1c:	f1c3 0320 	rsb	r3, r3, #32
 8010c20:	fa22 f303 	lsr.w	r3, r2, r3
 8010c24:	f857 2c04 	ldr.w	r2, [r7, #-4]
 8010c28:	401a      	ands	r2, r3
 8010c2a:	f847 2c04 	str.w	r2, [r7, #-4]
 8010c2e:	e7d3      	b.n	8010bd8 <__hexnan+0xbc>
 8010c30:	3e04      	subs	r6, #4
 8010c32:	e7d1      	b.n	8010bd8 <__hexnan+0xbc>
 8010c34:	2004      	movs	r0, #4
 8010c36:	b007      	add	sp, #28
 8010c38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08010c3c <__locale_ctype_ptr_l>:
 8010c3c:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8010c40:	4770      	bx	lr

08010c42 <__localeconv_l>:
 8010c42:	30f0      	adds	r0, #240	; 0xf0
 8010c44:	4770      	bx	lr
	...

08010c48 <_localeconv_r>:
 8010c48:	4b04      	ldr	r3, [pc, #16]	; (8010c5c <_localeconv_r+0x14>)
 8010c4a:	681b      	ldr	r3, [r3, #0]
 8010c4c:	6a18      	ldr	r0, [r3, #32]
 8010c4e:	4b04      	ldr	r3, [pc, #16]	; (8010c60 <_localeconv_r+0x18>)
 8010c50:	2800      	cmp	r0, #0
 8010c52:	bf08      	it	eq
 8010c54:	4618      	moveq	r0, r3
 8010c56:	30f0      	adds	r0, #240	; 0xf0
 8010c58:	4770      	bx	lr
 8010c5a:	bf00      	nop
 8010c5c:	20000184 	.word	0x20000184
 8010c60:	200001e8 	.word	0x200001e8

08010c64 <__ascii_mbtowc>:
 8010c64:	b082      	sub	sp, #8
 8010c66:	b901      	cbnz	r1, 8010c6a <__ascii_mbtowc+0x6>
 8010c68:	a901      	add	r1, sp, #4
 8010c6a:	b142      	cbz	r2, 8010c7e <__ascii_mbtowc+0x1a>
 8010c6c:	b14b      	cbz	r3, 8010c82 <__ascii_mbtowc+0x1e>
 8010c6e:	7813      	ldrb	r3, [r2, #0]
 8010c70:	600b      	str	r3, [r1, #0]
 8010c72:	7812      	ldrb	r2, [r2, #0]
 8010c74:	1c10      	adds	r0, r2, #0
 8010c76:	bf18      	it	ne
 8010c78:	2001      	movne	r0, #1
 8010c7a:	b002      	add	sp, #8
 8010c7c:	4770      	bx	lr
 8010c7e:	4610      	mov	r0, r2
 8010c80:	e7fb      	b.n	8010c7a <__ascii_mbtowc+0x16>
 8010c82:	f06f 0001 	mvn.w	r0, #1
 8010c86:	e7f8      	b.n	8010c7a <__ascii_mbtowc+0x16>

08010c88 <__malloc_lock>:
 8010c88:	4770      	bx	lr

08010c8a <__malloc_unlock>:
 8010c8a:	4770      	bx	lr

08010c8c <_Balloc>:
 8010c8c:	b570      	push	{r4, r5, r6, lr}
 8010c8e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8010c90:	4604      	mov	r4, r0
 8010c92:	460e      	mov	r6, r1
 8010c94:	b93d      	cbnz	r5, 8010ca6 <_Balloc+0x1a>
 8010c96:	2010      	movs	r0, #16
 8010c98:	f7fd f874 	bl	800dd84 <malloc>
 8010c9c:	6260      	str	r0, [r4, #36]	; 0x24
 8010c9e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8010ca2:	6005      	str	r5, [r0, #0]
 8010ca4:	60c5      	str	r5, [r0, #12]
 8010ca6:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8010ca8:	68eb      	ldr	r3, [r5, #12]
 8010caa:	b183      	cbz	r3, 8010cce <_Balloc+0x42>
 8010cac:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010cae:	68db      	ldr	r3, [r3, #12]
 8010cb0:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8010cb4:	b9b8      	cbnz	r0, 8010ce6 <_Balloc+0x5a>
 8010cb6:	2101      	movs	r1, #1
 8010cb8:	fa01 f506 	lsl.w	r5, r1, r6
 8010cbc:	1d6a      	adds	r2, r5, #5
 8010cbe:	0092      	lsls	r2, r2, #2
 8010cc0:	4620      	mov	r0, r4
 8010cc2:	f000 fbe2 	bl	801148a <_calloc_r>
 8010cc6:	b160      	cbz	r0, 8010ce2 <_Balloc+0x56>
 8010cc8:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8010ccc:	e00e      	b.n	8010cec <_Balloc+0x60>
 8010cce:	2221      	movs	r2, #33	; 0x21
 8010cd0:	2104      	movs	r1, #4
 8010cd2:	4620      	mov	r0, r4
 8010cd4:	f000 fbd9 	bl	801148a <_calloc_r>
 8010cd8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010cda:	60e8      	str	r0, [r5, #12]
 8010cdc:	68db      	ldr	r3, [r3, #12]
 8010cde:	2b00      	cmp	r3, #0
 8010ce0:	d1e4      	bne.n	8010cac <_Balloc+0x20>
 8010ce2:	2000      	movs	r0, #0
 8010ce4:	bd70      	pop	{r4, r5, r6, pc}
 8010ce6:	6802      	ldr	r2, [r0, #0]
 8010ce8:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8010cec:	2300      	movs	r3, #0
 8010cee:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8010cf2:	e7f7      	b.n	8010ce4 <_Balloc+0x58>

08010cf4 <_Bfree>:
 8010cf4:	b570      	push	{r4, r5, r6, lr}
 8010cf6:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8010cf8:	4606      	mov	r6, r0
 8010cfa:	460d      	mov	r5, r1
 8010cfc:	b93c      	cbnz	r4, 8010d0e <_Bfree+0x1a>
 8010cfe:	2010      	movs	r0, #16
 8010d00:	f7fd f840 	bl	800dd84 <malloc>
 8010d04:	6270      	str	r0, [r6, #36]	; 0x24
 8010d06:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8010d0a:	6004      	str	r4, [r0, #0]
 8010d0c:	60c4      	str	r4, [r0, #12]
 8010d0e:	b13d      	cbz	r5, 8010d20 <_Bfree+0x2c>
 8010d10:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8010d12:	686a      	ldr	r2, [r5, #4]
 8010d14:	68db      	ldr	r3, [r3, #12]
 8010d16:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8010d1a:	6029      	str	r1, [r5, #0]
 8010d1c:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8010d20:	bd70      	pop	{r4, r5, r6, pc}

08010d22 <__multadd>:
 8010d22:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010d26:	690d      	ldr	r5, [r1, #16]
 8010d28:	461f      	mov	r7, r3
 8010d2a:	4606      	mov	r6, r0
 8010d2c:	460c      	mov	r4, r1
 8010d2e:	f101 0c14 	add.w	ip, r1, #20
 8010d32:	2300      	movs	r3, #0
 8010d34:	f8dc 0000 	ldr.w	r0, [ip]
 8010d38:	b281      	uxth	r1, r0
 8010d3a:	fb02 7101 	mla	r1, r2, r1, r7
 8010d3e:	0c0f      	lsrs	r7, r1, #16
 8010d40:	0c00      	lsrs	r0, r0, #16
 8010d42:	fb02 7000 	mla	r0, r2, r0, r7
 8010d46:	b289      	uxth	r1, r1
 8010d48:	3301      	adds	r3, #1
 8010d4a:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8010d4e:	429d      	cmp	r5, r3
 8010d50:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8010d54:	f84c 1b04 	str.w	r1, [ip], #4
 8010d58:	dcec      	bgt.n	8010d34 <__multadd+0x12>
 8010d5a:	b1d7      	cbz	r7, 8010d92 <__multadd+0x70>
 8010d5c:	68a3      	ldr	r3, [r4, #8]
 8010d5e:	42ab      	cmp	r3, r5
 8010d60:	dc12      	bgt.n	8010d88 <__multadd+0x66>
 8010d62:	6861      	ldr	r1, [r4, #4]
 8010d64:	4630      	mov	r0, r6
 8010d66:	3101      	adds	r1, #1
 8010d68:	f7ff ff90 	bl	8010c8c <_Balloc>
 8010d6c:	6922      	ldr	r2, [r4, #16]
 8010d6e:	3202      	adds	r2, #2
 8010d70:	f104 010c 	add.w	r1, r4, #12
 8010d74:	4680      	mov	r8, r0
 8010d76:	0092      	lsls	r2, r2, #2
 8010d78:	300c      	adds	r0, #12
 8010d7a:	f7fd f813 	bl	800dda4 <memcpy>
 8010d7e:	4621      	mov	r1, r4
 8010d80:	4630      	mov	r0, r6
 8010d82:	f7ff ffb7 	bl	8010cf4 <_Bfree>
 8010d86:	4644      	mov	r4, r8
 8010d88:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8010d8c:	3501      	adds	r5, #1
 8010d8e:	615f      	str	r7, [r3, #20]
 8010d90:	6125      	str	r5, [r4, #16]
 8010d92:	4620      	mov	r0, r4
 8010d94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08010d98 <__s2b>:
 8010d98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010d9c:	460c      	mov	r4, r1
 8010d9e:	4615      	mov	r5, r2
 8010da0:	461f      	mov	r7, r3
 8010da2:	2209      	movs	r2, #9
 8010da4:	3308      	adds	r3, #8
 8010da6:	4606      	mov	r6, r0
 8010da8:	fb93 f3f2 	sdiv	r3, r3, r2
 8010dac:	2100      	movs	r1, #0
 8010dae:	2201      	movs	r2, #1
 8010db0:	429a      	cmp	r2, r3
 8010db2:	db20      	blt.n	8010df6 <__s2b+0x5e>
 8010db4:	4630      	mov	r0, r6
 8010db6:	f7ff ff69 	bl	8010c8c <_Balloc>
 8010dba:	9b08      	ldr	r3, [sp, #32]
 8010dbc:	6143      	str	r3, [r0, #20]
 8010dbe:	2d09      	cmp	r5, #9
 8010dc0:	f04f 0301 	mov.w	r3, #1
 8010dc4:	6103      	str	r3, [r0, #16]
 8010dc6:	dd19      	ble.n	8010dfc <__s2b+0x64>
 8010dc8:	f104 0809 	add.w	r8, r4, #9
 8010dcc:	46c1      	mov	r9, r8
 8010dce:	442c      	add	r4, r5
 8010dd0:	f819 3b01 	ldrb.w	r3, [r9], #1
 8010dd4:	4601      	mov	r1, r0
 8010dd6:	3b30      	subs	r3, #48	; 0x30
 8010dd8:	220a      	movs	r2, #10
 8010dda:	4630      	mov	r0, r6
 8010ddc:	f7ff ffa1 	bl	8010d22 <__multadd>
 8010de0:	45a1      	cmp	r9, r4
 8010de2:	d1f5      	bne.n	8010dd0 <__s2b+0x38>
 8010de4:	eb08 0405 	add.w	r4, r8, r5
 8010de8:	3c08      	subs	r4, #8
 8010dea:	1b2d      	subs	r5, r5, r4
 8010dec:	1963      	adds	r3, r4, r5
 8010dee:	42bb      	cmp	r3, r7
 8010df0:	db07      	blt.n	8010e02 <__s2b+0x6a>
 8010df2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010df6:	0052      	lsls	r2, r2, #1
 8010df8:	3101      	adds	r1, #1
 8010dfa:	e7d9      	b.n	8010db0 <__s2b+0x18>
 8010dfc:	340a      	adds	r4, #10
 8010dfe:	2509      	movs	r5, #9
 8010e00:	e7f3      	b.n	8010dea <__s2b+0x52>
 8010e02:	f814 3b01 	ldrb.w	r3, [r4], #1
 8010e06:	4601      	mov	r1, r0
 8010e08:	3b30      	subs	r3, #48	; 0x30
 8010e0a:	220a      	movs	r2, #10
 8010e0c:	4630      	mov	r0, r6
 8010e0e:	f7ff ff88 	bl	8010d22 <__multadd>
 8010e12:	e7eb      	b.n	8010dec <__s2b+0x54>

08010e14 <__hi0bits>:
 8010e14:	0c02      	lsrs	r2, r0, #16
 8010e16:	0412      	lsls	r2, r2, #16
 8010e18:	4603      	mov	r3, r0
 8010e1a:	b9b2      	cbnz	r2, 8010e4a <__hi0bits+0x36>
 8010e1c:	0403      	lsls	r3, r0, #16
 8010e1e:	2010      	movs	r0, #16
 8010e20:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8010e24:	bf04      	itt	eq
 8010e26:	021b      	lsleq	r3, r3, #8
 8010e28:	3008      	addeq	r0, #8
 8010e2a:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8010e2e:	bf04      	itt	eq
 8010e30:	011b      	lsleq	r3, r3, #4
 8010e32:	3004      	addeq	r0, #4
 8010e34:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8010e38:	bf04      	itt	eq
 8010e3a:	009b      	lsleq	r3, r3, #2
 8010e3c:	3002      	addeq	r0, #2
 8010e3e:	2b00      	cmp	r3, #0
 8010e40:	db06      	blt.n	8010e50 <__hi0bits+0x3c>
 8010e42:	005b      	lsls	r3, r3, #1
 8010e44:	d503      	bpl.n	8010e4e <__hi0bits+0x3a>
 8010e46:	3001      	adds	r0, #1
 8010e48:	4770      	bx	lr
 8010e4a:	2000      	movs	r0, #0
 8010e4c:	e7e8      	b.n	8010e20 <__hi0bits+0xc>
 8010e4e:	2020      	movs	r0, #32
 8010e50:	4770      	bx	lr

08010e52 <__lo0bits>:
 8010e52:	6803      	ldr	r3, [r0, #0]
 8010e54:	f013 0207 	ands.w	r2, r3, #7
 8010e58:	4601      	mov	r1, r0
 8010e5a:	d00b      	beq.n	8010e74 <__lo0bits+0x22>
 8010e5c:	07da      	lsls	r2, r3, #31
 8010e5e:	d423      	bmi.n	8010ea8 <__lo0bits+0x56>
 8010e60:	0798      	lsls	r0, r3, #30
 8010e62:	bf49      	itett	mi
 8010e64:	085b      	lsrmi	r3, r3, #1
 8010e66:	089b      	lsrpl	r3, r3, #2
 8010e68:	2001      	movmi	r0, #1
 8010e6a:	600b      	strmi	r3, [r1, #0]
 8010e6c:	bf5c      	itt	pl
 8010e6e:	600b      	strpl	r3, [r1, #0]
 8010e70:	2002      	movpl	r0, #2
 8010e72:	4770      	bx	lr
 8010e74:	b298      	uxth	r0, r3
 8010e76:	b9a8      	cbnz	r0, 8010ea4 <__lo0bits+0x52>
 8010e78:	0c1b      	lsrs	r3, r3, #16
 8010e7a:	2010      	movs	r0, #16
 8010e7c:	f013 0fff 	tst.w	r3, #255	; 0xff
 8010e80:	bf04      	itt	eq
 8010e82:	0a1b      	lsreq	r3, r3, #8
 8010e84:	3008      	addeq	r0, #8
 8010e86:	071a      	lsls	r2, r3, #28
 8010e88:	bf04      	itt	eq
 8010e8a:	091b      	lsreq	r3, r3, #4
 8010e8c:	3004      	addeq	r0, #4
 8010e8e:	079a      	lsls	r2, r3, #30
 8010e90:	bf04      	itt	eq
 8010e92:	089b      	lsreq	r3, r3, #2
 8010e94:	3002      	addeq	r0, #2
 8010e96:	07da      	lsls	r2, r3, #31
 8010e98:	d402      	bmi.n	8010ea0 <__lo0bits+0x4e>
 8010e9a:	085b      	lsrs	r3, r3, #1
 8010e9c:	d006      	beq.n	8010eac <__lo0bits+0x5a>
 8010e9e:	3001      	adds	r0, #1
 8010ea0:	600b      	str	r3, [r1, #0]
 8010ea2:	4770      	bx	lr
 8010ea4:	4610      	mov	r0, r2
 8010ea6:	e7e9      	b.n	8010e7c <__lo0bits+0x2a>
 8010ea8:	2000      	movs	r0, #0
 8010eaa:	4770      	bx	lr
 8010eac:	2020      	movs	r0, #32
 8010eae:	4770      	bx	lr

08010eb0 <__i2b>:
 8010eb0:	b510      	push	{r4, lr}
 8010eb2:	460c      	mov	r4, r1
 8010eb4:	2101      	movs	r1, #1
 8010eb6:	f7ff fee9 	bl	8010c8c <_Balloc>
 8010eba:	2201      	movs	r2, #1
 8010ebc:	6144      	str	r4, [r0, #20]
 8010ebe:	6102      	str	r2, [r0, #16]
 8010ec0:	bd10      	pop	{r4, pc}

08010ec2 <__multiply>:
 8010ec2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010ec6:	4614      	mov	r4, r2
 8010ec8:	690a      	ldr	r2, [r1, #16]
 8010eca:	6923      	ldr	r3, [r4, #16]
 8010ecc:	429a      	cmp	r2, r3
 8010ece:	bfb8      	it	lt
 8010ed0:	460b      	movlt	r3, r1
 8010ed2:	4688      	mov	r8, r1
 8010ed4:	bfbc      	itt	lt
 8010ed6:	46a0      	movlt	r8, r4
 8010ed8:	461c      	movlt	r4, r3
 8010eda:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8010ede:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8010ee2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8010ee6:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8010eea:	eb07 0609 	add.w	r6, r7, r9
 8010eee:	42b3      	cmp	r3, r6
 8010ef0:	bfb8      	it	lt
 8010ef2:	3101      	addlt	r1, #1
 8010ef4:	f7ff feca 	bl	8010c8c <_Balloc>
 8010ef8:	f100 0514 	add.w	r5, r0, #20
 8010efc:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8010f00:	462b      	mov	r3, r5
 8010f02:	2200      	movs	r2, #0
 8010f04:	4573      	cmp	r3, lr
 8010f06:	d316      	bcc.n	8010f36 <__multiply+0x74>
 8010f08:	f104 0214 	add.w	r2, r4, #20
 8010f0c:	f108 0114 	add.w	r1, r8, #20
 8010f10:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8010f14:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8010f18:	9300      	str	r3, [sp, #0]
 8010f1a:	9b00      	ldr	r3, [sp, #0]
 8010f1c:	9201      	str	r2, [sp, #4]
 8010f1e:	4293      	cmp	r3, r2
 8010f20:	d80c      	bhi.n	8010f3c <__multiply+0x7a>
 8010f22:	2e00      	cmp	r6, #0
 8010f24:	dd03      	ble.n	8010f2e <__multiply+0x6c>
 8010f26:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8010f2a:	2b00      	cmp	r3, #0
 8010f2c:	d05d      	beq.n	8010fea <__multiply+0x128>
 8010f2e:	6106      	str	r6, [r0, #16]
 8010f30:	b003      	add	sp, #12
 8010f32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010f36:	f843 2b04 	str.w	r2, [r3], #4
 8010f3a:	e7e3      	b.n	8010f04 <__multiply+0x42>
 8010f3c:	f8b2 b000 	ldrh.w	fp, [r2]
 8010f40:	f1bb 0f00 	cmp.w	fp, #0
 8010f44:	d023      	beq.n	8010f8e <__multiply+0xcc>
 8010f46:	4689      	mov	r9, r1
 8010f48:	46ac      	mov	ip, r5
 8010f4a:	f04f 0800 	mov.w	r8, #0
 8010f4e:	f859 4b04 	ldr.w	r4, [r9], #4
 8010f52:	f8dc a000 	ldr.w	sl, [ip]
 8010f56:	b2a3      	uxth	r3, r4
 8010f58:	fa1f fa8a 	uxth.w	sl, sl
 8010f5c:	fb0b a303 	mla	r3, fp, r3, sl
 8010f60:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8010f64:	f8dc 4000 	ldr.w	r4, [ip]
 8010f68:	4443      	add	r3, r8
 8010f6a:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8010f6e:	fb0b 840a 	mla	r4, fp, sl, r8
 8010f72:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8010f76:	46e2      	mov	sl, ip
 8010f78:	b29b      	uxth	r3, r3
 8010f7a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8010f7e:	454f      	cmp	r7, r9
 8010f80:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8010f84:	f84a 3b04 	str.w	r3, [sl], #4
 8010f88:	d82b      	bhi.n	8010fe2 <__multiply+0x120>
 8010f8a:	f8cc 8004 	str.w	r8, [ip, #4]
 8010f8e:	9b01      	ldr	r3, [sp, #4]
 8010f90:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8010f94:	3204      	adds	r2, #4
 8010f96:	f1ba 0f00 	cmp.w	sl, #0
 8010f9a:	d020      	beq.n	8010fde <__multiply+0x11c>
 8010f9c:	682b      	ldr	r3, [r5, #0]
 8010f9e:	4689      	mov	r9, r1
 8010fa0:	46a8      	mov	r8, r5
 8010fa2:	f04f 0b00 	mov.w	fp, #0
 8010fa6:	f8b9 c000 	ldrh.w	ip, [r9]
 8010faa:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8010fae:	fb0a 440c 	mla	r4, sl, ip, r4
 8010fb2:	445c      	add	r4, fp
 8010fb4:	46c4      	mov	ip, r8
 8010fb6:	b29b      	uxth	r3, r3
 8010fb8:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8010fbc:	f84c 3b04 	str.w	r3, [ip], #4
 8010fc0:	f859 3b04 	ldr.w	r3, [r9], #4
 8010fc4:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8010fc8:	0c1b      	lsrs	r3, r3, #16
 8010fca:	fb0a b303 	mla	r3, sl, r3, fp
 8010fce:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8010fd2:	454f      	cmp	r7, r9
 8010fd4:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8010fd8:	d805      	bhi.n	8010fe6 <__multiply+0x124>
 8010fda:	f8c8 3004 	str.w	r3, [r8, #4]
 8010fde:	3504      	adds	r5, #4
 8010fe0:	e79b      	b.n	8010f1a <__multiply+0x58>
 8010fe2:	46d4      	mov	ip, sl
 8010fe4:	e7b3      	b.n	8010f4e <__multiply+0x8c>
 8010fe6:	46e0      	mov	r8, ip
 8010fe8:	e7dd      	b.n	8010fa6 <__multiply+0xe4>
 8010fea:	3e01      	subs	r6, #1
 8010fec:	e799      	b.n	8010f22 <__multiply+0x60>
	...

08010ff0 <__pow5mult>:
 8010ff0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010ff4:	4615      	mov	r5, r2
 8010ff6:	f012 0203 	ands.w	r2, r2, #3
 8010ffa:	4606      	mov	r6, r0
 8010ffc:	460f      	mov	r7, r1
 8010ffe:	d007      	beq.n	8011010 <__pow5mult+0x20>
 8011000:	3a01      	subs	r2, #1
 8011002:	4c21      	ldr	r4, [pc, #132]	; (8011088 <__pow5mult+0x98>)
 8011004:	2300      	movs	r3, #0
 8011006:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801100a:	f7ff fe8a 	bl	8010d22 <__multadd>
 801100e:	4607      	mov	r7, r0
 8011010:	10ad      	asrs	r5, r5, #2
 8011012:	d035      	beq.n	8011080 <__pow5mult+0x90>
 8011014:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8011016:	b93c      	cbnz	r4, 8011028 <__pow5mult+0x38>
 8011018:	2010      	movs	r0, #16
 801101a:	f7fc feb3 	bl	800dd84 <malloc>
 801101e:	6270      	str	r0, [r6, #36]	; 0x24
 8011020:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8011024:	6004      	str	r4, [r0, #0]
 8011026:	60c4      	str	r4, [r0, #12]
 8011028:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 801102c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8011030:	b94c      	cbnz	r4, 8011046 <__pow5mult+0x56>
 8011032:	f240 2171 	movw	r1, #625	; 0x271
 8011036:	4630      	mov	r0, r6
 8011038:	f7ff ff3a 	bl	8010eb0 <__i2b>
 801103c:	2300      	movs	r3, #0
 801103e:	f8c8 0008 	str.w	r0, [r8, #8]
 8011042:	4604      	mov	r4, r0
 8011044:	6003      	str	r3, [r0, #0]
 8011046:	f04f 0800 	mov.w	r8, #0
 801104a:	07eb      	lsls	r3, r5, #31
 801104c:	d50a      	bpl.n	8011064 <__pow5mult+0x74>
 801104e:	4639      	mov	r1, r7
 8011050:	4622      	mov	r2, r4
 8011052:	4630      	mov	r0, r6
 8011054:	f7ff ff35 	bl	8010ec2 <__multiply>
 8011058:	4639      	mov	r1, r7
 801105a:	4681      	mov	r9, r0
 801105c:	4630      	mov	r0, r6
 801105e:	f7ff fe49 	bl	8010cf4 <_Bfree>
 8011062:	464f      	mov	r7, r9
 8011064:	106d      	asrs	r5, r5, #1
 8011066:	d00b      	beq.n	8011080 <__pow5mult+0x90>
 8011068:	6820      	ldr	r0, [r4, #0]
 801106a:	b938      	cbnz	r0, 801107c <__pow5mult+0x8c>
 801106c:	4622      	mov	r2, r4
 801106e:	4621      	mov	r1, r4
 8011070:	4630      	mov	r0, r6
 8011072:	f7ff ff26 	bl	8010ec2 <__multiply>
 8011076:	6020      	str	r0, [r4, #0]
 8011078:	f8c0 8000 	str.w	r8, [r0]
 801107c:	4604      	mov	r4, r0
 801107e:	e7e4      	b.n	801104a <__pow5mult+0x5a>
 8011080:	4638      	mov	r0, r7
 8011082:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011086:	bf00      	nop
 8011088:	080121a8 	.word	0x080121a8

0801108c <__lshift>:
 801108c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011090:	460c      	mov	r4, r1
 8011092:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8011096:	6923      	ldr	r3, [r4, #16]
 8011098:	6849      	ldr	r1, [r1, #4]
 801109a:	eb0a 0903 	add.w	r9, sl, r3
 801109e:	68a3      	ldr	r3, [r4, #8]
 80110a0:	4607      	mov	r7, r0
 80110a2:	4616      	mov	r6, r2
 80110a4:	f109 0501 	add.w	r5, r9, #1
 80110a8:	42ab      	cmp	r3, r5
 80110aa:	db32      	blt.n	8011112 <__lshift+0x86>
 80110ac:	4638      	mov	r0, r7
 80110ae:	f7ff fded 	bl	8010c8c <_Balloc>
 80110b2:	2300      	movs	r3, #0
 80110b4:	4680      	mov	r8, r0
 80110b6:	f100 0114 	add.w	r1, r0, #20
 80110ba:	461a      	mov	r2, r3
 80110bc:	4553      	cmp	r3, sl
 80110be:	db2b      	blt.n	8011118 <__lshift+0x8c>
 80110c0:	6920      	ldr	r0, [r4, #16]
 80110c2:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80110c6:	f104 0314 	add.w	r3, r4, #20
 80110ca:	f016 021f 	ands.w	r2, r6, #31
 80110ce:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80110d2:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80110d6:	d025      	beq.n	8011124 <__lshift+0x98>
 80110d8:	f1c2 0e20 	rsb	lr, r2, #32
 80110dc:	2000      	movs	r0, #0
 80110de:	681e      	ldr	r6, [r3, #0]
 80110e0:	468a      	mov	sl, r1
 80110e2:	4096      	lsls	r6, r2
 80110e4:	4330      	orrs	r0, r6
 80110e6:	f84a 0b04 	str.w	r0, [sl], #4
 80110ea:	f853 0b04 	ldr.w	r0, [r3], #4
 80110ee:	459c      	cmp	ip, r3
 80110f0:	fa20 f00e 	lsr.w	r0, r0, lr
 80110f4:	d814      	bhi.n	8011120 <__lshift+0x94>
 80110f6:	6048      	str	r0, [r1, #4]
 80110f8:	b108      	cbz	r0, 80110fe <__lshift+0x72>
 80110fa:	f109 0502 	add.w	r5, r9, #2
 80110fe:	3d01      	subs	r5, #1
 8011100:	4638      	mov	r0, r7
 8011102:	f8c8 5010 	str.w	r5, [r8, #16]
 8011106:	4621      	mov	r1, r4
 8011108:	f7ff fdf4 	bl	8010cf4 <_Bfree>
 801110c:	4640      	mov	r0, r8
 801110e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011112:	3101      	adds	r1, #1
 8011114:	005b      	lsls	r3, r3, #1
 8011116:	e7c7      	b.n	80110a8 <__lshift+0x1c>
 8011118:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 801111c:	3301      	adds	r3, #1
 801111e:	e7cd      	b.n	80110bc <__lshift+0x30>
 8011120:	4651      	mov	r1, sl
 8011122:	e7dc      	b.n	80110de <__lshift+0x52>
 8011124:	3904      	subs	r1, #4
 8011126:	f853 2b04 	ldr.w	r2, [r3], #4
 801112a:	f841 2f04 	str.w	r2, [r1, #4]!
 801112e:	459c      	cmp	ip, r3
 8011130:	d8f9      	bhi.n	8011126 <__lshift+0x9a>
 8011132:	e7e4      	b.n	80110fe <__lshift+0x72>

08011134 <__mcmp>:
 8011134:	6903      	ldr	r3, [r0, #16]
 8011136:	690a      	ldr	r2, [r1, #16]
 8011138:	1a9b      	subs	r3, r3, r2
 801113a:	b530      	push	{r4, r5, lr}
 801113c:	d10c      	bne.n	8011158 <__mcmp+0x24>
 801113e:	0092      	lsls	r2, r2, #2
 8011140:	3014      	adds	r0, #20
 8011142:	3114      	adds	r1, #20
 8011144:	1884      	adds	r4, r0, r2
 8011146:	4411      	add	r1, r2
 8011148:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 801114c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8011150:	4295      	cmp	r5, r2
 8011152:	d003      	beq.n	801115c <__mcmp+0x28>
 8011154:	d305      	bcc.n	8011162 <__mcmp+0x2e>
 8011156:	2301      	movs	r3, #1
 8011158:	4618      	mov	r0, r3
 801115a:	bd30      	pop	{r4, r5, pc}
 801115c:	42a0      	cmp	r0, r4
 801115e:	d3f3      	bcc.n	8011148 <__mcmp+0x14>
 8011160:	e7fa      	b.n	8011158 <__mcmp+0x24>
 8011162:	f04f 33ff 	mov.w	r3, #4294967295
 8011166:	e7f7      	b.n	8011158 <__mcmp+0x24>

08011168 <__mdiff>:
 8011168:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801116c:	460d      	mov	r5, r1
 801116e:	4607      	mov	r7, r0
 8011170:	4611      	mov	r1, r2
 8011172:	4628      	mov	r0, r5
 8011174:	4614      	mov	r4, r2
 8011176:	f7ff ffdd 	bl	8011134 <__mcmp>
 801117a:	1e06      	subs	r6, r0, #0
 801117c:	d108      	bne.n	8011190 <__mdiff+0x28>
 801117e:	4631      	mov	r1, r6
 8011180:	4638      	mov	r0, r7
 8011182:	f7ff fd83 	bl	8010c8c <_Balloc>
 8011186:	2301      	movs	r3, #1
 8011188:	e9c0 3604 	strd	r3, r6, [r0, #16]
 801118c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011190:	bfa4      	itt	ge
 8011192:	4623      	movge	r3, r4
 8011194:	462c      	movge	r4, r5
 8011196:	4638      	mov	r0, r7
 8011198:	6861      	ldr	r1, [r4, #4]
 801119a:	bfa6      	itte	ge
 801119c:	461d      	movge	r5, r3
 801119e:	2600      	movge	r6, #0
 80111a0:	2601      	movlt	r6, #1
 80111a2:	f7ff fd73 	bl	8010c8c <_Balloc>
 80111a6:	692b      	ldr	r3, [r5, #16]
 80111a8:	60c6      	str	r6, [r0, #12]
 80111aa:	6926      	ldr	r6, [r4, #16]
 80111ac:	f105 0914 	add.w	r9, r5, #20
 80111b0:	f104 0214 	add.w	r2, r4, #20
 80111b4:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 80111b8:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 80111bc:	f100 0514 	add.w	r5, r0, #20
 80111c0:	f04f 0e00 	mov.w	lr, #0
 80111c4:	f852 ab04 	ldr.w	sl, [r2], #4
 80111c8:	f859 4b04 	ldr.w	r4, [r9], #4
 80111cc:	fa1e f18a 	uxtah	r1, lr, sl
 80111d0:	b2a3      	uxth	r3, r4
 80111d2:	1ac9      	subs	r1, r1, r3
 80111d4:	0c23      	lsrs	r3, r4, #16
 80111d6:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 80111da:	eb03 4321 	add.w	r3, r3, r1, asr #16
 80111de:	b289      	uxth	r1, r1
 80111e0:	ea4f 4e23 	mov.w	lr, r3, asr #16
 80111e4:	45c8      	cmp	r8, r9
 80111e6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80111ea:	4694      	mov	ip, r2
 80111ec:	f845 3b04 	str.w	r3, [r5], #4
 80111f0:	d8e8      	bhi.n	80111c4 <__mdiff+0x5c>
 80111f2:	45bc      	cmp	ip, r7
 80111f4:	d304      	bcc.n	8011200 <__mdiff+0x98>
 80111f6:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 80111fa:	b183      	cbz	r3, 801121e <__mdiff+0xb6>
 80111fc:	6106      	str	r6, [r0, #16]
 80111fe:	e7c5      	b.n	801118c <__mdiff+0x24>
 8011200:	f85c 1b04 	ldr.w	r1, [ip], #4
 8011204:	fa1e f381 	uxtah	r3, lr, r1
 8011208:	141a      	asrs	r2, r3, #16
 801120a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 801120e:	b29b      	uxth	r3, r3
 8011210:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8011214:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8011218:	f845 3b04 	str.w	r3, [r5], #4
 801121c:	e7e9      	b.n	80111f2 <__mdiff+0x8a>
 801121e:	3e01      	subs	r6, #1
 8011220:	e7e9      	b.n	80111f6 <__mdiff+0x8e>
	...

08011224 <__ulp>:
 8011224:	4b12      	ldr	r3, [pc, #72]	; (8011270 <__ulp+0x4c>)
 8011226:	ee10 2a90 	vmov	r2, s1
 801122a:	401a      	ands	r2, r3
 801122c:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 8011230:	2b00      	cmp	r3, #0
 8011232:	dd04      	ble.n	801123e <__ulp+0x1a>
 8011234:	2000      	movs	r0, #0
 8011236:	4619      	mov	r1, r3
 8011238:	ec41 0b10 	vmov	d0, r0, r1
 801123c:	4770      	bx	lr
 801123e:	425b      	negs	r3, r3
 8011240:	151b      	asrs	r3, r3, #20
 8011242:	2b13      	cmp	r3, #19
 8011244:	f04f 0000 	mov.w	r0, #0
 8011248:	f04f 0100 	mov.w	r1, #0
 801124c:	dc04      	bgt.n	8011258 <__ulp+0x34>
 801124e:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8011252:	fa42 f103 	asr.w	r1, r2, r3
 8011256:	e7ef      	b.n	8011238 <__ulp+0x14>
 8011258:	3b14      	subs	r3, #20
 801125a:	2b1e      	cmp	r3, #30
 801125c:	f04f 0201 	mov.w	r2, #1
 8011260:	bfda      	itte	le
 8011262:	f1c3 031f 	rsble	r3, r3, #31
 8011266:	fa02 f303 	lslle.w	r3, r2, r3
 801126a:	4613      	movgt	r3, r2
 801126c:	4618      	mov	r0, r3
 801126e:	e7e3      	b.n	8011238 <__ulp+0x14>
 8011270:	7ff00000 	.word	0x7ff00000

08011274 <__b2d>:
 8011274:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011276:	6905      	ldr	r5, [r0, #16]
 8011278:	f100 0714 	add.w	r7, r0, #20
 801127c:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8011280:	1f2e      	subs	r6, r5, #4
 8011282:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8011286:	4620      	mov	r0, r4
 8011288:	f7ff fdc4 	bl	8010e14 <__hi0bits>
 801128c:	f1c0 0320 	rsb	r3, r0, #32
 8011290:	280a      	cmp	r0, #10
 8011292:	600b      	str	r3, [r1, #0]
 8011294:	f8df c074 	ldr.w	ip, [pc, #116]	; 801130c <__b2d+0x98>
 8011298:	dc14      	bgt.n	80112c4 <__b2d+0x50>
 801129a:	f1c0 0e0b 	rsb	lr, r0, #11
 801129e:	fa24 f10e 	lsr.w	r1, r4, lr
 80112a2:	42b7      	cmp	r7, r6
 80112a4:	ea41 030c 	orr.w	r3, r1, ip
 80112a8:	bf34      	ite	cc
 80112aa:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80112ae:	2100      	movcs	r1, #0
 80112b0:	3015      	adds	r0, #21
 80112b2:	fa04 f000 	lsl.w	r0, r4, r0
 80112b6:	fa21 f10e 	lsr.w	r1, r1, lr
 80112ba:	ea40 0201 	orr.w	r2, r0, r1
 80112be:	ec43 2b10 	vmov	d0, r2, r3
 80112c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80112c4:	42b7      	cmp	r7, r6
 80112c6:	bf3a      	itte	cc
 80112c8:	f1a5 0608 	subcc.w	r6, r5, #8
 80112cc:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80112d0:	2100      	movcs	r1, #0
 80112d2:	380b      	subs	r0, #11
 80112d4:	d015      	beq.n	8011302 <__b2d+0x8e>
 80112d6:	4084      	lsls	r4, r0
 80112d8:	f1c0 0520 	rsb	r5, r0, #32
 80112dc:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 80112e0:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 80112e4:	42be      	cmp	r6, r7
 80112e6:	fa21 fc05 	lsr.w	ip, r1, r5
 80112ea:	ea44 030c 	orr.w	r3, r4, ip
 80112ee:	bf8c      	ite	hi
 80112f0:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 80112f4:	2400      	movls	r4, #0
 80112f6:	fa01 f000 	lsl.w	r0, r1, r0
 80112fa:	40ec      	lsrs	r4, r5
 80112fc:	ea40 0204 	orr.w	r2, r0, r4
 8011300:	e7dd      	b.n	80112be <__b2d+0x4a>
 8011302:	ea44 030c 	orr.w	r3, r4, ip
 8011306:	460a      	mov	r2, r1
 8011308:	e7d9      	b.n	80112be <__b2d+0x4a>
 801130a:	bf00      	nop
 801130c:	3ff00000 	.word	0x3ff00000

08011310 <__d2b>:
 8011310:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8011314:	460e      	mov	r6, r1
 8011316:	2101      	movs	r1, #1
 8011318:	ec59 8b10 	vmov	r8, r9, d0
 801131c:	4615      	mov	r5, r2
 801131e:	f7ff fcb5 	bl	8010c8c <_Balloc>
 8011322:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8011326:	4607      	mov	r7, r0
 8011328:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801132c:	bb34      	cbnz	r4, 801137c <__d2b+0x6c>
 801132e:	9301      	str	r3, [sp, #4]
 8011330:	f1b8 0300 	subs.w	r3, r8, #0
 8011334:	d027      	beq.n	8011386 <__d2b+0x76>
 8011336:	a802      	add	r0, sp, #8
 8011338:	f840 3d08 	str.w	r3, [r0, #-8]!
 801133c:	f7ff fd89 	bl	8010e52 <__lo0bits>
 8011340:	9900      	ldr	r1, [sp, #0]
 8011342:	b1f0      	cbz	r0, 8011382 <__d2b+0x72>
 8011344:	9a01      	ldr	r2, [sp, #4]
 8011346:	f1c0 0320 	rsb	r3, r0, #32
 801134a:	fa02 f303 	lsl.w	r3, r2, r3
 801134e:	430b      	orrs	r3, r1
 8011350:	40c2      	lsrs	r2, r0
 8011352:	617b      	str	r3, [r7, #20]
 8011354:	9201      	str	r2, [sp, #4]
 8011356:	9b01      	ldr	r3, [sp, #4]
 8011358:	61bb      	str	r3, [r7, #24]
 801135a:	2b00      	cmp	r3, #0
 801135c:	bf14      	ite	ne
 801135e:	2102      	movne	r1, #2
 8011360:	2101      	moveq	r1, #1
 8011362:	6139      	str	r1, [r7, #16]
 8011364:	b1c4      	cbz	r4, 8011398 <__d2b+0x88>
 8011366:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 801136a:	4404      	add	r4, r0
 801136c:	6034      	str	r4, [r6, #0]
 801136e:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8011372:	6028      	str	r0, [r5, #0]
 8011374:	4638      	mov	r0, r7
 8011376:	b003      	add	sp, #12
 8011378:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801137c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8011380:	e7d5      	b.n	801132e <__d2b+0x1e>
 8011382:	6179      	str	r1, [r7, #20]
 8011384:	e7e7      	b.n	8011356 <__d2b+0x46>
 8011386:	a801      	add	r0, sp, #4
 8011388:	f7ff fd63 	bl	8010e52 <__lo0bits>
 801138c:	9b01      	ldr	r3, [sp, #4]
 801138e:	617b      	str	r3, [r7, #20]
 8011390:	2101      	movs	r1, #1
 8011392:	6139      	str	r1, [r7, #16]
 8011394:	3020      	adds	r0, #32
 8011396:	e7e5      	b.n	8011364 <__d2b+0x54>
 8011398:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 801139c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80113a0:	6030      	str	r0, [r6, #0]
 80113a2:	6918      	ldr	r0, [r3, #16]
 80113a4:	f7ff fd36 	bl	8010e14 <__hi0bits>
 80113a8:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 80113ac:	e7e1      	b.n	8011372 <__d2b+0x62>

080113ae <__ratio>:
 80113ae:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80113b2:	4688      	mov	r8, r1
 80113b4:	4669      	mov	r1, sp
 80113b6:	4681      	mov	r9, r0
 80113b8:	f7ff ff5c 	bl	8011274 <__b2d>
 80113bc:	a901      	add	r1, sp, #4
 80113be:	4640      	mov	r0, r8
 80113c0:	ec57 6b10 	vmov	r6, r7, d0
 80113c4:	f7ff ff56 	bl	8011274 <__b2d>
 80113c8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80113cc:	f8d8 2010 	ldr.w	r2, [r8, #16]
 80113d0:	eba3 0c02 	sub.w	ip, r3, r2
 80113d4:	e9dd 3200 	ldrd	r3, r2, [sp]
 80113d8:	1a9b      	subs	r3, r3, r2
 80113da:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 80113de:	ec5b ab10 	vmov	sl, fp, d0
 80113e2:	2b00      	cmp	r3, #0
 80113e4:	bfce      	itee	gt
 80113e6:	463a      	movgt	r2, r7
 80113e8:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80113ec:	465a      	movle	r2, fp
 80113ee:	4659      	mov	r1, fp
 80113f0:	463d      	mov	r5, r7
 80113f2:	bfd4      	ite	le
 80113f4:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
 80113f8:	eb02 5503 	addgt.w	r5, r2, r3, lsl #20
 80113fc:	4630      	mov	r0, r6
 80113fe:	ee10 2a10 	vmov	r2, s0
 8011402:	460b      	mov	r3, r1
 8011404:	4629      	mov	r1, r5
 8011406:	f7ef fa21 	bl	800084c <__aeabi_ddiv>
 801140a:	ec41 0b10 	vmov	d0, r0, r1
 801140e:	b003      	add	sp, #12
 8011410:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08011414 <__copybits>:
 8011414:	3901      	subs	r1, #1
 8011416:	b510      	push	{r4, lr}
 8011418:	1149      	asrs	r1, r1, #5
 801141a:	6914      	ldr	r4, [r2, #16]
 801141c:	3101      	adds	r1, #1
 801141e:	f102 0314 	add.w	r3, r2, #20
 8011422:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8011426:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 801142a:	42a3      	cmp	r3, r4
 801142c:	4602      	mov	r2, r0
 801142e:	d303      	bcc.n	8011438 <__copybits+0x24>
 8011430:	2300      	movs	r3, #0
 8011432:	428a      	cmp	r2, r1
 8011434:	d305      	bcc.n	8011442 <__copybits+0x2e>
 8011436:	bd10      	pop	{r4, pc}
 8011438:	f853 2b04 	ldr.w	r2, [r3], #4
 801143c:	f840 2b04 	str.w	r2, [r0], #4
 8011440:	e7f3      	b.n	801142a <__copybits+0x16>
 8011442:	f842 3b04 	str.w	r3, [r2], #4
 8011446:	e7f4      	b.n	8011432 <__copybits+0x1e>

08011448 <__any_on>:
 8011448:	f100 0214 	add.w	r2, r0, #20
 801144c:	6900      	ldr	r0, [r0, #16]
 801144e:	114b      	asrs	r3, r1, #5
 8011450:	4298      	cmp	r0, r3
 8011452:	b510      	push	{r4, lr}
 8011454:	db11      	blt.n	801147a <__any_on+0x32>
 8011456:	dd0a      	ble.n	801146e <__any_on+0x26>
 8011458:	f011 011f 	ands.w	r1, r1, #31
 801145c:	d007      	beq.n	801146e <__any_on+0x26>
 801145e:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8011462:	fa24 f001 	lsr.w	r0, r4, r1
 8011466:	fa00 f101 	lsl.w	r1, r0, r1
 801146a:	428c      	cmp	r4, r1
 801146c:	d10b      	bne.n	8011486 <__any_on+0x3e>
 801146e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8011472:	4293      	cmp	r3, r2
 8011474:	d803      	bhi.n	801147e <__any_on+0x36>
 8011476:	2000      	movs	r0, #0
 8011478:	bd10      	pop	{r4, pc}
 801147a:	4603      	mov	r3, r0
 801147c:	e7f7      	b.n	801146e <__any_on+0x26>
 801147e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8011482:	2900      	cmp	r1, #0
 8011484:	d0f5      	beq.n	8011472 <__any_on+0x2a>
 8011486:	2001      	movs	r0, #1
 8011488:	e7f6      	b.n	8011478 <__any_on+0x30>

0801148a <_calloc_r>:
 801148a:	b538      	push	{r3, r4, r5, lr}
 801148c:	fb02 f401 	mul.w	r4, r2, r1
 8011490:	4621      	mov	r1, r4
 8011492:	f7fc fce9 	bl	800de68 <_malloc_r>
 8011496:	4605      	mov	r5, r0
 8011498:	b118      	cbz	r0, 80114a2 <_calloc_r+0x18>
 801149a:	4622      	mov	r2, r4
 801149c:	2100      	movs	r1, #0
 801149e:	f7fc fc8c 	bl	800ddba <memset>
 80114a2:	4628      	mov	r0, r5
 80114a4:	bd38      	pop	{r3, r4, r5, pc}

080114a6 <__ssputs_r>:
 80114a6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80114aa:	688e      	ldr	r6, [r1, #8]
 80114ac:	429e      	cmp	r6, r3
 80114ae:	4682      	mov	sl, r0
 80114b0:	460c      	mov	r4, r1
 80114b2:	4690      	mov	r8, r2
 80114b4:	4699      	mov	r9, r3
 80114b6:	d837      	bhi.n	8011528 <__ssputs_r+0x82>
 80114b8:	898a      	ldrh	r2, [r1, #12]
 80114ba:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80114be:	d031      	beq.n	8011524 <__ssputs_r+0x7e>
 80114c0:	6825      	ldr	r5, [r4, #0]
 80114c2:	6909      	ldr	r1, [r1, #16]
 80114c4:	1a6f      	subs	r7, r5, r1
 80114c6:	6965      	ldr	r5, [r4, #20]
 80114c8:	2302      	movs	r3, #2
 80114ca:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80114ce:	fb95 f5f3 	sdiv	r5, r5, r3
 80114d2:	f109 0301 	add.w	r3, r9, #1
 80114d6:	443b      	add	r3, r7
 80114d8:	429d      	cmp	r5, r3
 80114da:	bf38      	it	cc
 80114dc:	461d      	movcc	r5, r3
 80114de:	0553      	lsls	r3, r2, #21
 80114e0:	d530      	bpl.n	8011544 <__ssputs_r+0x9e>
 80114e2:	4629      	mov	r1, r5
 80114e4:	f7fc fcc0 	bl	800de68 <_malloc_r>
 80114e8:	4606      	mov	r6, r0
 80114ea:	b950      	cbnz	r0, 8011502 <__ssputs_r+0x5c>
 80114ec:	230c      	movs	r3, #12
 80114ee:	f8ca 3000 	str.w	r3, [sl]
 80114f2:	89a3      	ldrh	r3, [r4, #12]
 80114f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80114f8:	81a3      	strh	r3, [r4, #12]
 80114fa:	f04f 30ff 	mov.w	r0, #4294967295
 80114fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011502:	463a      	mov	r2, r7
 8011504:	6921      	ldr	r1, [r4, #16]
 8011506:	f7fc fc4d 	bl	800dda4 <memcpy>
 801150a:	89a3      	ldrh	r3, [r4, #12]
 801150c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8011510:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011514:	81a3      	strh	r3, [r4, #12]
 8011516:	6126      	str	r6, [r4, #16]
 8011518:	6165      	str	r5, [r4, #20]
 801151a:	443e      	add	r6, r7
 801151c:	1bed      	subs	r5, r5, r7
 801151e:	6026      	str	r6, [r4, #0]
 8011520:	60a5      	str	r5, [r4, #8]
 8011522:	464e      	mov	r6, r9
 8011524:	454e      	cmp	r6, r9
 8011526:	d900      	bls.n	801152a <__ssputs_r+0x84>
 8011528:	464e      	mov	r6, r9
 801152a:	4632      	mov	r2, r6
 801152c:	4641      	mov	r1, r8
 801152e:	6820      	ldr	r0, [r4, #0]
 8011530:	f000 f92b 	bl	801178a <memmove>
 8011534:	68a3      	ldr	r3, [r4, #8]
 8011536:	1b9b      	subs	r3, r3, r6
 8011538:	60a3      	str	r3, [r4, #8]
 801153a:	6823      	ldr	r3, [r4, #0]
 801153c:	441e      	add	r6, r3
 801153e:	6026      	str	r6, [r4, #0]
 8011540:	2000      	movs	r0, #0
 8011542:	e7dc      	b.n	80114fe <__ssputs_r+0x58>
 8011544:	462a      	mov	r2, r5
 8011546:	f000 f939 	bl	80117bc <_realloc_r>
 801154a:	4606      	mov	r6, r0
 801154c:	2800      	cmp	r0, #0
 801154e:	d1e2      	bne.n	8011516 <__ssputs_r+0x70>
 8011550:	6921      	ldr	r1, [r4, #16]
 8011552:	4650      	mov	r0, sl
 8011554:	f7fc fc3a 	bl	800ddcc <_free_r>
 8011558:	e7c8      	b.n	80114ec <__ssputs_r+0x46>
	...

0801155c <_svfiprintf_r>:
 801155c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011560:	461d      	mov	r5, r3
 8011562:	898b      	ldrh	r3, [r1, #12]
 8011564:	061f      	lsls	r7, r3, #24
 8011566:	b09d      	sub	sp, #116	; 0x74
 8011568:	4680      	mov	r8, r0
 801156a:	460c      	mov	r4, r1
 801156c:	4616      	mov	r6, r2
 801156e:	d50f      	bpl.n	8011590 <_svfiprintf_r+0x34>
 8011570:	690b      	ldr	r3, [r1, #16]
 8011572:	b96b      	cbnz	r3, 8011590 <_svfiprintf_r+0x34>
 8011574:	2140      	movs	r1, #64	; 0x40
 8011576:	f7fc fc77 	bl	800de68 <_malloc_r>
 801157a:	6020      	str	r0, [r4, #0]
 801157c:	6120      	str	r0, [r4, #16]
 801157e:	b928      	cbnz	r0, 801158c <_svfiprintf_r+0x30>
 8011580:	230c      	movs	r3, #12
 8011582:	f8c8 3000 	str.w	r3, [r8]
 8011586:	f04f 30ff 	mov.w	r0, #4294967295
 801158a:	e0c8      	b.n	801171e <_svfiprintf_r+0x1c2>
 801158c:	2340      	movs	r3, #64	; 0x40
 801158e:	6163      	str	r3, [r4, #20]
 8011590:	2300      	movs	r3, #0
 8011592:	9309      	str	r3, [sp, #36]	; 0x24
 8011594:	2320      	movs	r3, #32
 8011596:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801159a:	2330      	movs	r3, #48	; 0x30
 801159c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80115a0:	9503      	str	r5, [sp, #12]
 80115a2:	f04f 0b01 	mov.w	fp, #1
 80115a6:	4637      	mov	r7, r6
 80115a8:	463d      	mov	r5, r7
 80115aa:	f815 3b01 	ldrb.w	r3, [r5], #1
 80115ae:	b10b      	cbz	r3, 80115b4 <_svfiprintf_r+0x58>
 80115b0:	2b25      	cmp	r3, #37	; 0x25
 80115b2:	d13e      	bne.n	8011632 <_svfiprintf_r+0xd6>
 80115b4:	ebb7 0a06 	subs.w	sl, r7, r6
 80115b8:	d00b      	beq.n	80115d2 <_svfiprintf_r+0x76>
 80115ba:	4653      	mov	r3, sl
 80115bc:	4632      	mov	r2, r6
 80115be:	4621      	mov	r1, r4
 80115c0:	4640      	mov	r0, r8
 80115c2:	f7ff ff70 	bl	80114a6 <__ssputs_r>
 80115c6:	3001      	adds	r0, #1
 80115c8:	f000 80a4 	beq.w	8011714 <_svfiprintf_r+0x1b8>
 80115cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80115ce:	4453      	add	r3, sl
 80115d0:	9309      	str	r3, [sp, #36]	; 0x24
 80115d2:	783b      	ldrb	r3, [r7, #0]
 80115d4:	2b00      	cmp	r3, #0
 80115d6:	f000 809d 	beq.w	8011714 <_svfiprintf_r+0x1b8>
 80115da:	2300      	movs	r3, #0
 80115dc:	f04f 32ff 	mov.w	r2, #4294967295
 80115e0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80115e4:	9304      	str	r3, [sp, #16]
 80115e6:	9307      	str	r3, [sp, #28]
 80115e8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80115ec:	931a      	str	r3, [sp, #104]	; 0x68
 80115ee:	462f      	mov	r7, r5
 80115f0:	2205      	movs	r2, #5
 80115f2:	f817 1b01 	ldrb.w	r1, [r7], #1
 80115f6:	4850      	ldr	r0, [pc, #320]	; (8011738 <_svfiprintf_r+0x1dc>)
 80115f8:	f7ee fdf2 	bl	80001e0 <memchr>
 80115fc:	9b04      	ldr	r3, [sp, #16]
 80115fe:	b9d0      	cbnz	r0, 8011636 <_svfiprintf_r+0xda>
 8011600:	06d9      	lsls	r1, r3, #27
 8011602:	bf44      	itt	mi
 8011604:	2220      	movmi	r2, #32
 8011606:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 801160a:	071a      	lsls	r2, r3, #28
 801160c:	bf44      	itt	mi
 801160e:	222b      	movmi	r2, #43	; 0x2b
 8011610:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8011614:	782a      	ldrb	r2, [r5, #0]
 8011616:	2a2a      	cmp	r2, #42	; 0x2a
 8011618:	d015      	beq.n	8011646 <_svfiprintf_r+0xea>
 801161a:	9a07      	ldr	r2, [sp, #28]
 801161c:	462f      	mov	r7, r5
 801161e:	2000      	movs	r0, #0
 8011620:	250a      	movs	r5, #10
 8011622:	4639      	mov	r1, r7
 8011624:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011628:	3b30      	subs	r3, #48	; 0x30
 801162a:	2b09      	cmp	r3, #9
 801162c:	d94d      	bls.n	80116ca <_svfiprintf_r+0x16e>
 801162e:	b1b8      	cbz	r0, 8011660 <_svfiprintf_r+0x104>
 8011630:	e00f      	b.n	8011652 <_svfiprintf_r+0xf6>
 8011632:	462f      	mov	r7, r5
 8011634:	e7b8      	b.n	80115a8 <_svfiprintf_r+0x4c>
 8011636:	4a40      	ldr	r2, [pc, #256]	; (8011738 <_svfiprintf_r+0x1dc>)
 8011638:	1a80      	subs	r0, r0, r2
 801163a:	fa0b f000 	lsl.w	r0, fp, r0
 801163e:	4318      	orrs	r0, r3
 8011640:	9004      	str	r0, [sp, #16]
 8011642:	463d      	mov	r5, r7
 8011644:	e7d3      	b.n	80115ee <_svfiprintf_r+0x92>
 8011646:	9a03      	ldr	r2, [sp, #12]
 8011648:	1d11      	adds	r1, r2, #4
 801164a:	6812      	ldr	r2, [r2, #0]
 801164c:	9103      	str	r1, [sp, #12]
 801164e:	2a00      	cmp	r2, #0
 8011650:	db01      	blt.n	8011656 <_svfiprintf_r+0xfa>
 8011652:	9207      	str	r2, [sp, #28]
 8011654:	e004      	b.n	8011660 <_svfiprintf_r+0x104>
 8011656:	4252      	negs	r2, r2
 8011658:	f043 0302 	orr.w	r3, r3, #2
 801165c:	9207      	str	r2, [sp, #28]
 801165e:	9304      	str	r3, [sp, #16]
 8011660:	783b      	ldrb	r3, [r7, #0]
 8011662:	2b2e      	cmp	r3, #46	; 0x2e
 8011664:	d10c      	bne.n	8011680 <_svfiprintf_r+0x124>
 8011666:	787b      	ldrb	r3, [r7, #1]
 8011668:	2b2a      	cmp	r3, #42	; 0x2a
 801166a:	d133      	bne.n	80116d4 <_svfiprintf_r+0x178>
 801166c:	9b03      	ldr	r3, [sp, #12]
 801166e:	1d1a      	adds	r2, r3, #4
 8011670:	681b      	ldr	r3, [r3, #0]
 8011672:	9203      	str	r2, [sp, #12]
 8011674:	2b00      	cmp	r3, #0
 8011676:	bfb8      	it	lt
 8011678:	f04f 33ff 	movlt.w	r3, #4294967295
 801167c:	3702      	adds	r7, #2
 801167e:	9305      	str	r3, [sp, #20]
 8011680:	4d2e      	ldr	r5, [pc, #184]	; (801173c <_svfiprintf_r+0x1e0>)
 8011682:	7839      	ldrb	r1, [r7, #0]
 8011684:	2203      	movs	r2, #3
 8011686:	4628      	mov	r0, r5
 8011688:	f7ee fdaa 	bl	80001e0 <memchr>
 801168c:	b138      	cbz	r0, 801169e <_svfiprintf_r+0x142>
 801168e:	2340      	movs	r3, #64	; 0x40
 8011690:	1b40      	subs	r0, r0, r5
 8011692:	fa03 f000 	lsl.w	r0, r3, r0
 8011696:	9b04      	ldr	r3, [sp, #16]
 8011698:	4303      	orrs	r3, r0
 801169a:	3701      	adds	r7, #1
 801169c:	9304      	str	r3, [sp, #16]
 801169e:	7839      	ldrb	r1, [r7, #0]
 80116a0:	4827      	ldr	r0, [pc, #156]	; (8011740 <_svfiprintf_r+0x1e4>)
 80116a2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80116a6:	2206      	movs	r2, #6
 80116a8:	1c7e      	adds	r6, r7, #1
 80116aa:	f7ee fd99 	bl	80001e0 <memchr>
 80116ae:	2800      	cmp	r0, #0
 80116b0:	d038      	beq.n	8011724 <_svfiprintf_r+0x1c8>
 80116b2:	4b24      	ldr	r3, [pc, #144]	; (8011744 <_svfiprintf_r+0x1e8>)
 80116b4:	bb13      	cbnz	r3, 80116fc <_svfiprintf_r+0x1a0>
 80116b6:	9b03      	ldr	r3, [sp, #12]
 80116b8:	3307      	adds	r3, #7
 80116ba:	f023 0307 	bic.w	r3, r3, #7
 80116be:	3308      	adds	r3, #8
 80116c0:	9303      	str	r3, [sp, #12]
 80116c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80116c4:	444b      	add	r3, r9
 80116c6:	9309      	str	r3, [sp, #36]	; 0x24
 80116c8:	e76d      	b.n	80115a6 <_svfiprintf_r+0x4a>
 80116ca:	fb05 3202 	mla	r2, r5, r2, r3
 80116ce:	2001      	movs	r0, #1
 80116d0:	460f      	mov	r7, r1
 80116d2:	e7a6      	b.n	8011622 <_svfiprintf_r+0xc6>
 80116d4:	2300      	movs	r3, #0
 80116d6:	3701      	adds	r7, #1
 80116d8:	9305      	str	r3, [sp, #20]
 80116da:	4619      	mov	r1, r3
 80116dc:	250a      	movs	r5, #10
 80116de:	4638      	mov	r0, r7
 80116e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80116e4:	3a30      	subs	r2, #48	; 0x30
 80116e6:	2a09      	cmp	r2, #9
 80116e8:	d903      	bls.n	80116f2 <_svfiprintf_r+0x196>
 80116ea:	2b00      	cmp	r3, #0
 80116ec:	d0c8      	beq.n	8011680 <_svfiprintf_r+0x124>
 80116ee:	9105      	str	r1, [sp, #20]
 80116f0:	e7c6      	b.n	8011680 <_svfiprintf_r+0x124>
 80116f2:	fb05 2101 	mla	r1, r5, r1, r2
 80116f6:	2301      	movs	r3, #1
 80116f8:	4607      	mov	r7, r0
 80116fa:	e7f0      	b.n	80116de <_svfiprintf_r+0x182>
 80116fc:	ab03      	add	r3, sp, #12
 80116fe:	9300      	str	r3, [sp, #0]
 8011700:	4622      	mov	r2, r4
 8011702:	4b11      	ldr	r3, [pc, #68]	; (8011748 <_svfiprintf_r+0x1ec>)
 8011704:	a904      	add	r1, sp, #16
 8011706:	4640      	mov	r0, r8
 8011708:	f7fc fc9c 	bl	800e044 <_printf_float>
 801170c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8011710:	4681      	mov	r9, r0
 8011712:	d1d6      	bne.n	80116c2 <_svfiprintf_r+0x166>
 8011714:	89a3      	ldrh	r3, [r4, #12]
 8011716:	065b      	lsls	r3, r3, #25
 8011718:	f53f af35 	bmi.w	8011586 <_svfiprintf_r+0x2a>
 801171c:	9809      	ldr	r0, [sp, #36]	; 0x24
 801171e:	b01d      	add	sp, #116	; 0x74
 8011720:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011724:	ab03      	add	r3, sp, #12
 8011726:	9300      	str	r3, [sp, #0]
 8011728:	4622      	mov	r2, r4
 801172a:	4b07      	ldr	r3, [pc, #28]	; (8011748 <_svfiprintf_r+0x1ec>)
 801172c:	a904      	add	r1, sp, #16
 801172e:	4640      	mov	r0, r8
 8011730:	f7fc ff3e 	bl	800e5b0 <_printf_i>
 8011734:	e7ea      	b.n	801170c <_svfiprintf_r+0x1b0>
 8011736:	bf00      	nop
 8011738:	080121b4 	.word	0x080121b4
 801173c:	080121ba 	.word	0x080121ba
 8011740:	080121be 	.word	0x080121be
 8011744:	0800e045 	.word	0x0800e045
 8011748:	080114a7 	.word	0x080114a7

0801174c <strncmp>:
 801174c:	b510      	push	{r4, lr}
 801174e:	b16a      	cbz	r2, 801176c <strncmp+0x20>
 8011750:	3901      	subs	r1, #1
 8011752:	1884      	adds	r4, r0, r2
 8011754:	f810 3b01 	ldrb.w	r3, [r0], #1
 8011758:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 801175c:	4293      	cmp	r3, r2
 801175e:	d103      	bne.n	8011768 <strncmp+0x1c>
 8011760:	42a0      	cmp	r0, r4
 8011762:	d001      	beq.n	8011768 <strncmp+0x1c>
 8011764:	2b00      	cmp	r3, #0
 8011766:	d1f5      	bne.n	8011754 <strncmp+0x8>
 8011768:	1a98      	subs	r0, r3, r2
 801176a:	bd10      	pop	{r4, pc}
 801176c:	4610      	mov	r0, r2
 801176e:	e7fc      	b.n	801176a <strncmp+0x1e>

08011770 <__ascii_wctomb>:
 8011770:	b149      	cbz	r1, 8011786 <__ascii_wctomb+0x16>
 8011772:	2aff      	cmp	r2, #255	; 0xff
 8011774:	bf85      	ittet	hi
 8011776:	238a      	movhi	r3, #138	; 0x8a
 8011778:	6003      	strhi	r3, [r0, #0]
 801177a:	700a      	strbls	r2, [r1, #0]
 801177c:	f04f 30ff 	movhi.w	r0, #4294967295
 8011780:	bf98      	it	ls
 8011782:	2001      	movls	r0, #1
 8011784:	4770      	bx	lr
 8011786:	4608      	mov	r0, r1
 8011788:	4770      	bx	lr

0801178a <memmove>:
 801178a:	4288      	cmp	r0, r1
 801178c:	b510      	push	{r4, lr}
 801178e:	eb01 0302 	add.w	r3, r1, r2
 8011792:	d807      	bhi.n	80117a4 <memmove+0x1a>
 8011794:	1e42      	subs	r2, r0, #1
 8011796:	4299      	cmp	r1, r3
 8011798:	d00a      	beq.n	80117b0 <memmove+0x26>
 801179a:	f811 4b01 	ldrb.w	r4, [r1], #1
 801179e:	f802 4f01 	strb.w	r4, [r2, #1]!
 80117a2:	e7f8      	b.n	8011796 <memmove+0xc>
 80117a4:	4283      	cmp	r3, r0
 80117a6:	d9f5      	bls.n	8011794 <memmove+0xa>
 80117a8:	1881      	adds	r1, r0, r2
 80117aa:	1ad2      	subs	r2, r2, r3
 80117ac:	42d3      	cmn	r3, r2
 80117ae:	d100      	bne.n	80117b2 <memmove+0x28>
 80117b0:	bd10      	pop	{r4, pc}
 80117b2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80117b6:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80117ba:	e7f7      	b.n	80117ac <memmove+0x22>

080117bc <_realloc_r>:
 80117bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80117be:	4607      	mov	r7, r0
 80117c0:	4614      	mov	r4, r2
 80117c2:	460e      	mov	r6, r1
 80117c4:	b921      	cbnz	r1, 80117d0 <_realloc_r+0x14>
 80117c6:	4611      	mov	r1, r2
 80117c8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80117cc:	f7fc bb4c 	b.w	800de68 <_malloc_r>
 80117d0:	b922      	cbnz	r2, 80117dc <_realloc_r+0x20>
 80117d2:	f7fc fafb 	bl	800ddcc <_free_r>
 80117d6:	4625      	mov	r5, r4
 80117d8:	4628      	mov	r0, r5
 80117da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80117dc:	f000 f814 	bl	8011808 <_malloc_usable_size_r>
 80117e0:	42a0      	cmp	r0, r4
 80117e2:	d20f      	bcs.n	8011804 <_realloc_r+0x48>
 80117e4:	4621      	mov	r1, r4
 80117e6:	4638      	mov	r0, r7
 80117e8:	f7fc fb3e 	bl	800de68 <_malloc_r>
 80117ec:	4605      	mov	r5, r0
 80117ee:	2800      	cmp	r0, #0
 80117f0:	d0f2      	beq.n	80117d8 <_realloc_r+0x1c>
 80117f2:	4631      	mov	r1, r6
 80117f4:	4622      	mov	r2, r4
 80117f6:	f7fc fad5 	bl	800dda4 <memcpy>
 80117fa:	4631      	mov	r1, r6
 80117fc:	4638      	mov	r0, r7
 80117fe:	f7fc fae5 	bl	800ddcc <_free_r>
 8011802:	e7e9      	b.n	80117d8 <_realloc_r+0x1c>
 8011804:	4635      	mov	r5, r6
 8011806:	e7e7      	b.n	80117d8 <_realloc_r+0x1c>

08011808 <_malloc_usable_size_r>:
 8011808:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801180c:	1f18      	subs	r0, r3, #4
 801180e:	2b00      	cmp	r3, #0
 8011810:	bfbc      	itt	lt
 8011812:	580b      	ldrlt	r3, [r1, r0]
 8011814:	18c0      	addlt	r0, r0, r3
 8011816:	4770      	bx	lr

08011818 <_sbrk>:
 8011818:	4b04      	ldr	r3, [pc, #16]	; (801182c <_sbrk+0x14>)
 801181a:	6819      	ldr	r1, [r3, #0]
 801181c:	4602      	mov	r2, r0
 801181e:	b909      	cbnz	r1, 8011824 <_sbrk+0xc>
 8011820:	4903      	ldr	r1, [pc, #12]	; (8011830 <_sbrk+0x18>)
 8011822:	6019      	str	r1, [r3, #0]
 8011824:	6818      	ldr	r0, [r3, #0]
 8011826:	4402      	add	r2, r0
 8011828:	601a      	str	r2, [r3, #0]
 801182a:	4770      	bx	lr
 801182c:	2000099c 	.word	0x2000099c
 8011830:	20002c70 	.word	0x20002c70

08011834 <_init>:
 8011834:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011836:	bf00      	nop
 8011838:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801183a:	bc08      	pop	{r3}
 801183c:	469e      	mov	lr, r3
 801183e:	4770      	bx	lr

08011840 <_fini>:
 8011840:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011842:	bf00      	nop
 8011844:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011846:	bc08      	pop	{r3}
 8011848:	469e      	mov	lr, r3
 801184a:	4770      	bx	lr
