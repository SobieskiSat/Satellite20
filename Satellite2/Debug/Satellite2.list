
Satellite2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00011ca8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000b70  08011e38  08011e38  00021e38  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080129a8  080129a8  0003034c  2**0
                  CONTENTS
  4 .ARM          00000008  080129a8  080129a8  000229a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080129b0  080129b0  0003034c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080129b0  080129b0  000229b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080129b4  080129b4  000229b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000034c  20000000  080129b8  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000484c  2000034c  08012d04  0003034c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004b98  08012d04  00034b98  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0003034c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002b1d2  00000000  00000000  0003037c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00005165  00000000  00000000  0005b54e  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00002030  00000000  00000000  000606b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001e08  00000000  00000000  000626e8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000077a2  00000000  00000000  000644f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001e8f2  00000000  00000000  0006bc92  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d5c4f  00000000  00000000  0008a584  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001601d3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000962c  00000000  00000000  00160250  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000034c 	.word	0x2000034c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08011e20 	.word	0x08011e20

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000350 	.word	0x20000350
 80001cc:	08011e20 	.word	0x08011e20

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003de:	f1a4 0401 	sub.w	r4, r4, #1
 80003e2:	d1e9      	bne.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2uiz>:
 8000bc8:	004a      	lsls	r2, r1, #1
 8000bca:	d211      	bcs.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bd0:	d211      	bcs.n	8000bf6 <__aeabi_d2uiz+0x2e>
 8000bd2:	d50d      	bpl.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d40e      	bmi.n	8000bfc <__aeabi_d2uiz+0x34>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	fa23 f002 	lsr.w	r0, r3, r2
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bfa:	d102      	bne.n	8000c02 <__aeabi_d2uiz+0x3a>
 8000bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8000c00:	4770      	bx	lr
 8000c02:	f04f 0000 	mov.w	r0, #0
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_d2f>:
 8000c08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c0c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c10:	bf24      	itt	cs
 8000c12:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c16:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c1a:	d90d      	bls.n	8000c38 <__aeabi_d2f+0x30>
 8000c1c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c20:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c24:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c28:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c2c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c30:	bf08      	it	eq
 8000c32:	f020 0001 	biceq.w	r0, r0, #1
 8000c36:	4770      	bx	lr
 8000c38:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c3c:	d121      	bne.n	8000c82 <__aeabi_d2f+0x7a>
 8000c3e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c42:	bfbc      	itt	lt
 8000c44:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c48:	4770      	bxlt	lr
 8000c4a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c4e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c52:	f1c2 0218 	rsb	r2, r2, #24
 8000c56:	f1c2 0c20 	rsb	ip, r2, #32
 8000c5a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c5e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c62:	bf18      	it	ne
 8000c64:	f040 0001 	orrne.w	r0, r0, #1
 8000c68:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c6c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c70:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c74:	ea40 000c 	orr.w	r0, r0, ip
 8000c78:	fa23 f302 	lsr.w	r3, r3, r2
 8000c7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c80:	e7cc      	b.n	8000c1c <__aeabi_d2f+0x14>
 8000c82:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c86:	d107      	bne.n	8000c98 <__aeabi_d2f+0x90>
 8000c88:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c8c:	bf1e      	ittt	ne
 8000c8e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c92:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c96:	4770      	bxne	lr
 8000c98:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c9c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ca0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_uldivmod>:
 8000ca8:	b953      	cbnz	r3, 8000cc0 <__aeabi_uldivmod+0x18>
 8000caa:	b94a      	cbnz	r2, 8000cc0 <__aeabi_uldivmod+0x18>
 8000cac:	2900      	cmp	r1, #0
 8000cae:	bf08      	it	eq
 8000cb0:	2800      	cmpeq	r0, #0
 8000cb2:	bf1c      	itt	ne
 8000cb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cbc:	f000 b972 	b.w	8000fa4 <__aeabi_idiv0>
 8000cc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cc8:	f000 f806 	bl	8000cd8 <__udivmoddi4>
 8000ccc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cd4:	b004      	add	sp, #16
 8000cd6:	4770      	bx	lr

08000cd8 <__udivmoddi4>:
 8000cd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cdc:	9e08      	ldr	r6, [sp, #32]
 8000cde:	4604      	mov	r4, r0
 8000ce0:	4688      	mov	r8, r1
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d14b      	bne.n	8000d7e <__udivmoddi4+0xa6>
 8000ce6:	428a      	cmp	r2, r1
 8000ce8:	4615      	mov	r5, r2
 8000cea:	d967      	bls.n	8000dbc <__udivmoddi4+0xe4>
 8000cec:	fab2 f282 	clz	r2, r2
 8000cf0:	b14a      	cbz	r2, 8000d06 <__udivmoddi4+0x2e>
 8000cf2:	f1c2 0720 	rsb	r7, r2, #32
 8000cf6:	fa01 f302 	lsl.w	r3, r1, r2
 8000cfa:	fa20 f707 	lsr.w	r7, r0, r7
 8000cfe:	4095      	lsls	r5, r2
 8000d00:	ea47 0803 	orr.w	r8, r7, r3
 8000d04:	4094      	lsls	r4, r2
 8000d06:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d0a:	0c23      	lsrs	r3, r4, #16
 8000d0c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000d10:	fa1f fc85 	uxth.w	ip, r5
 8000d14:	fb0e 8817 	mls	r8, lr, r7, r8
 8000d18:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d1c:	fb07 f10c 	mul.w	r1, r7, ip
 8000d20:	4299      	cmp	r1, r3
 8000d22:	d909      	bls.n	8000d38 <__udivmoddi4+0x60>
 8000d24:	18eb      	adds	r3, r5, r3
 8000d26:	f107 30ff 	add.w	r0, r7, #4294967295
 8000d2a:	f080 811b 	bcs.w	8000f64 <__udivmoddi4+0x28c>
 8000d2e:	4299      	cmp	r1, r3
 8000d30:	f240 8118 	bls.w	8000f64 <__udivmoddi4+0x28c>
 8000d34:	3f02      	subs	r7, #2
 8000d36:	442b      	add	r3, r5
 8000d38:	1a5b      	subs	r3, r3, r1
 8000d3a:	b2a4      	uxth	r4, r4
 8000d3c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d40:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d44:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d48:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d4c:	45a4      	cmp	ip, r4
 8000d4e:	d909      	bls.n	8000d64 <__udivmoddi4+0x8c>
 8000d50:	192c      	adds	r4, r5, r4
 8000d52:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d56:	f080 8107 	bcs.w	8000f68 <__udivmoddi4+0x290>
 8000d5a:	45a4      	cmp	ip, r4
 8000d5c:	f240 8104 	bls.w	8000f68 <__udivmoddi4+0x290>
 8000d60:	3802      	subs	r0, #2
 8000d62:	442c      	add	r4, r5
 8000d64:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d68:	eba4 040c 	sub.w	r4, r4, ip
 8000d6c:	2700      	movs	r7, #0
 8000d6e:	b11e      	cbz	r6, 8000d78 <__udivmoddi4+0xa0>
 8000d70:	40d4      	lsrs	r4, r2
 8000d72:	2300      	movs	r3, #0
 8000d74:	e9c6 4300 	strd	r4, r3, [r6]
 8000d78:	4639      	mov	r1, r7
 8000d7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d7e:	428b      	cmp	r3, r1
 8000d80:	d909      	bls.n	8000d96 <__udivmoddi4+0xbe>
 8000d82:	2e00      	cmp	r6, #0
 8000d84:	f000 80eb 	beq.w	8000f5e <__udivmoddi4+0x286>
 8000d88:	2700      	movs	r7, #0
 8000d8a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d8e:	4638      	mov	r0, r7
 8000d90:	4639      	mov	r1, r7
 8000d92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d96:	fab3 f783 	clz	r7, r3
 8000d9a:	2f00      	cmp	r7, #0
 8000d9c:	d147      	bne.n	8000e2e <__udivmoddi4+0x156>
 8000d9e:	428b      	cmp	r3, r1
 8000da0:	d302      	bcc.n	8000da8 <__udivmoddi4+0xd0>
 8000da2:	4282      	cmp	r2, r0
 8000da4:	f200 80fa 	bhi.w	8000f9c <__udivmoddi4+0x2c4>
 8000da8:	1a84      	subs	r4, r0, r2
 8000daa:	eb61 0303 	sbc.w	r3, r1, r3
 8000dae:	2001      	movs	r0, #1
 8000db0:	4698      	mov	r8, r3
 8000db2:	2e00      	cmp	r6, #0
 8000db4:	d0e0      	beq.n	8000d78 <__udivmoddi4+0xa0>
 8000db6:	e9c6 4800 	strd	r4, r8, [r6]
 8000dba:	e7dd      	b.n	8000d78 <__udivmoddi4+0xa0>
 8000dbc:	b902      	cbnz	r2, 8000dc0 <__udivmoddi4+0xe8>
 8000dbe:	deff      	udf	#255	; 0xff
 8000dc0:	fab2 f282 	clz	r2, r2
 8000dc4:	2a00      	cmp	r2, #0
 8000dc6:	f040 808f 	bne.w	8000ee8 <__udivmoddi4+0x210>
 8000dca:	1b49      	subs	r1, r1, r5
 8000dcc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000dd0:	fa1f f885 	uxth.w	r8, r5
 8000dd4:	2701      	movs	r7, #1
 8000dd6:	fbb1 fcfe 	udiv	ip, r1, lr
 8000dda:	0c23      	lsrs	r3, r4, #16
 8000ddc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000de0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000de4:	fb08 f10c 	mul.w	r1, r8, ip
 8000de8:	4299      	cmp	r1, r3
 8000dea:	d907      	bls.n	8000dfc <__udivmoddi4+0x124>
 8000dec:	18eb      	adds	r3, r5, r3
 8000dee:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000df2:	d202      	bcs.n	8000dfa <__udivmoddi4+0x122>
 8000df4:	4299      	cmp	r1, r3
 8000df6:	f200 80cd 	bhi.w	8000f94 <__udivmoddi4+0x2bc>
 8000dfa:	4684      	mov	ip, r0
 8000dfc:	1a59      	subs	r1, r3, r1
 8000dfe:	b2a3      	uxth	r3, r4
 8000e00:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e04:	fb0e 1410 	mls	r4, lr, r0, r1
 8000e08:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000e0c:	fb08 f800 	mul.w	r8, r8, r0
 8000e10:	45a0      	cmp	r8, r4
 8000e12:	d907      	bls.n	8000e24 <__udivmoddi4+0x14c>
 8000e14:	192c      	adds	r4, r5, r4
 8000e16:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e1a:	d202      	bcs.n	8000e22 <__udivmoddi4+0x14a>
 8000e1c:	45a0      	cmp	r8, r4
 8000e1e:	f200 80b6 	bhi.w	8000f8e <__udivmoddi4+0x2b6>
 8000e22:	4618      	mov	r0, r3
 8000e24:	eba4 0408 	sub.w	r4, r4, r8
 8000e28:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e2c:	e79f      	b.n	8000d6e <__udivmoddi4+0x96>
 8000e2e:	f1c7 0c20 	rsb	ip, r7, #32
 8000e32:	40bb      	lsls	r3, r7
 8000e34:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000e38:	ea4e 0e03 	orr.w	lr, lr, r3
 8000e3c:	fa01 f407 	lsl.w	r4, r1, r7
 8000e40:	fa20 f50c 	lsr.w	r5, r0, ip
 8000e44:	fa21 f30c 	lsr.w	r3, r1, ip
 8000e48:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000e4c:	4325      	orrs	r5, r4
 8000e4e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000e52:	0c2c      	lsrs	r4, r5, #16
 8000e54:	fb08 3319 	mls	r3, r8, r9, r3
 8000e58:	fa1f fa8e 	uxth.w	sl, lr
 8000e5c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e60:	fb09 f40a 	mul.w	r4, r9, sl
 8000e64:	429c      	cmp	r4, r3
 8000e66:	fa02 f207 	lsl.w	r2, r2, r7
 8000e6a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e6e:	d90b      	bls.n	8000e88 <__udivmoddi4+0x1b0>
 8000e70:	eb1e 0303 	adds.w	r3, lr, r3
 8000e74:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e78:	f080 8087 	bcs.w	8000f8a <__udivmoddi4+0x2b2>
 8000e7c:	429c      	cmp	r4, r3
 8000e7e:	f240 8084 	bls.w	8000f8a <__udivmoddi4+0x2b2>
 8000e82:	f1a9 0902 	sub.w	r9, r9, #2
 8000e86:	4473      	add	r3, lr
 8000e88:	1b1b      	subs	r3, r3, r4
 8000e8a:	b2ad      	uxth	r5, r5
 8000e8c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e90:	fb08 3310 	mls	r3, r8, r0, r3
 8000e94:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000e98:	fb00 fa0a 	mul.w	sl, r0, sl
 8000e9c:	45a2      	cmp	sl, r4
 8000e9e:	d908      	bls.n	8000eb2 <__udivmoddi4+0x1da>
 8000ea0:	eb1e 0404 	adds.w	r4, lr, r4
 8000ea4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000ea8:	d26b      	bcs.n	8000f82 <__udivmoddi4+0x2aa>
 8000eaa:	45a2      	cmp	sl, r4
 8000eac:	d969      	bls.n	8000f82 <__udivmoddi4+0x2aa>
 8000eae:	3802      	subs	r0, #2
 8000eb0:	4474      	add	r4, lr
 8000eb2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000eb6:	fba0 8902 	umull	r8, r9, r0, r2
 8000eba:	eba4 040a 	sub.w	r4, r4, sl
 8000ebe:	454c      	cmp	r4, r9
 8000ec0:	46c2      	mov	sl, r8
 8000ec2:	464b      	mov	r3, r9
 8000ec4:	d354      	bcc.n	8000f70 <__udivmoddi4+0x298>
 8000ec6:	d051      	beq.n	8000f6c <__udivmoddi4+0x294>
 8000ec8:	2e00      	cmp	r6, #0
 8000eca:	d069      	beq.n	8000fa0 <__udivmoddi4+0x2c8>
 8000ecc:	ebb1 050a 	subs.w	r5, r1, sl
 8000ed0:	eb64 0403 	sbc.w	r4, r4, r3
 8000ed4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000ed8:	40fd      	lsrs	r5, r7
 8000eda:	40fc      	lsrs	r4, r7
 8000edc:	ea4c 0505 	orr.w	r5, ip, r5
 8000ee0:	e9c6 5400 	strd	r5, r4, [r6]
 8000ee4:	2700      	movs	r7, #0
 8000ee6:	e747      	b.n	8000d78 <__udivmoddi4+0xa0>
 8000ee8:	f1c2 0320 	rsb	r3, r2, #32
 8000eec:	fa20 f703 	lsr.w	r7, r0, r3
 8000ef0:	4095      	lsls	r5, r2
 8000ef2:	fa01 f002 	lsl.w	r0, r1, r2
 8000ef6:	fa21 f303 	lsr.w	r3, r1, r3
 8000efa:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000efe:	4338      	orrs	r0, r7
 8000f00:	0c01      	lsrs	r1, r0, #16
 8000f02:	fbb3 f7fe 	udiv	r7, r3, lr
 8000f06:	fa1f f885 	uxth.w	r8, r5
 8000f0a:	fb0e 3317 	mls	r3, lr, r7, r3
 8000f0e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f12:	fb07 f308 	mul.w	r3, r7, r8
 8000f16:	428b      	cmp	r3, r1
 8000f18:	fa04 f402 	lsl.w	r4, r4, r2
 8000f1c:	d907      	bls.n	8000f2e <__udivmoddi4+0x256>
 8000f1e:	1869      	adds	r1, r5, r1
 8000f20:	f107 3cff 	add.w	ip, r7, #4294967295
 8000f24:	d22f      	bcs.n	8000f86 <__udivmoddi4+0x2ae>
 8000f26:	428b      	cmp	r3, r1
 8000f28:	d92d      	bls.n	8000f86 <__udivmoddi4+0x2ae>
 8000f2a:	3f02      	subs	r7, #2
 8000f2c:	4429      	add	r1, r5
 8000f2e:	1acb      	subs	r3, r1, r3
 8000f30:	b281      	uxth	r1, r0
 8000f32:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f36:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f3a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f3e:	fb00 f308 	mul.w	r3, r0, r8
 8000f42:	428b      	cmp	r3, r1
 8000f44:	d907      	bls.n	8000f56 <__udivmoddi4+0x27e>
 8000f46:	1869      	adds	r1, r5, r1
 8000f48:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f4c:	d217      	bcs.n	8000f7e <__udivmoddi4+0x2a6>
 8000f4e:	428b      	cmp	r3, r1
 8000f50:	d915      	bls.n	8000f7e <__udivmoddi4+0x2a6>
 8000f52:	3802      	subs	r0, #2
 8000f54:	4429      	add	r1, r5
 8000f56:	1ac9      	subs	r1, r1, r3
 8000f58:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000f5c:	e73b      	b.n	8000dd6 <__udivmoddi4+0xfe>
 8000f5e:	4637      	mov	r7, r6
 8000f60:	4630      	mov	r0, r6
 8000f62:	e709      	b.n	8000d78 <__udivmoddi4+0xa0>
 8000f64:	4607      	mov	r7, r0
 8000f66:	e6e7      	b.n	8000d38 <__udivmoddi4+0x60>
 8000f68:	4618      	mov	r0, r3
 8000f6a:	e6fb      	b.n	8000d64 <__udivmoddi4+0x8c>
 8000f6c:	4541      	cmp	r1, r8
 8000f6e:	d2ab      	bcs.n	8000ec8 <__udivmoddi4+0x1f0>
 8000f70:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f74:	eb69 020e 	sbc.w	r2, r9, lr
 8000f78:	3801      	subs	r0, #1
 8000f7a:	4613      	mov	r3, r2
 8000f7c:	e7a4      	b.n	8000ec8 <__udivmoddi4+0x1f0>
 8000f7e:	4660      	mov	r0, ip
 8000f80:	e7e9      	b.n	8000f56 <__udivmoddi4+0x27e>
 8000f82:	4618      	mov	r0, r3
 8000f84:	e795      	b.n	8000eb2 <__udivmoddi4+0x1da>
 8000f86:	4667      	mov	r7, ip
 8000f88:	e7d1      	b.n	8000f2e <__udivmoddi4+0x256>
 8000f8a:	4681      	mov	r9, r0
 8000f8c:	e77c      	b.n	8000e88 <__udivmoddi4+0x1b0>
 8000f8e:	3802      	subs	r0, #2
 8000f90:	442c      	add	r4, r5
 8000f92:	e747      	b.n	8000e24 <__udivmoddi4+0x14c>
 8000f94:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f98:	442b      	add	r3, r5
 8000f9a:	e72f      	b.n	8000dfc <__udivmoddi4+0x124>
 8000f9c:	4638      	mov	r0, r7
 8000f9e:	e708      	b.n	8000db2 <__udivmoddi4+0xda>
 8000fa0:	4637      	mov	r7, r6
 8000fa2:	e6e9      	b.n	8000d78 <__udivmoddi4+0xa0>

08000fa4 <__aeabi_idiv0>:
 8000fa4:	4770      	bx	lr
 8000fa6:	bf00      	nop

08000fa8 <println>:

	HAL_GPIO_WritePin(LEDB_GPIO_Port, LEDB_Pin, GPIO_PIN_RESET);
	#endif
};
static inline void println(char* str)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b084      	sub	sp, #16
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	6078      	str	r0, [r7, #4]
	#if PRINT_OUT
	HAL_GPIO_WritePin(LEDB_GPIO_Port, LEDB_Pin, GPIO_PIN_SET);
 8000fb0:	2201      	movs	r2, #1
 8000fb2:	2140      	movs	r1, #64	; 0x40
 8000fb4:	4820      	ldr	r0, [pc, #128]	; (8001038 <println+0x90>)
 8000fb6:	f003 fca1 	bl	80048fc <HAL_GPIO_WritePin>

	printLen = strlen(str);
 8000fba:	6878      	ldr	r0, [r7, #4]
 8000fbc:	f7ff f912 	bl	80001e4 <strlen>
 8000fc0:	4602      	mov	r2, r0
 8000fc2:	4b1e      	ldr	r3, [pc, #120]	; (800103c <println+0x94>)
 8000fc4:	601a      	str	r2, [r3, #0]
	uint8_t i;
	for (i = 0; i < printLen; i++)
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	73fb      	strb	r3, [r7, #15]
 8000fca:	e009      	b.n	8000fe0 <println+0x38>
	{
		printBuffer[i] = str[i];
 8000fcc:	7bfb      	ldrb	r3, [r7, #15]
 8000fce:	687a      	ldr	r2, [r7, #4]
 8000fd0:	441a      	add	r2, r3
 8000fd2:	7bfb      	ldrb	r3, [r7, #15]
 8000fd4:	7811      	ldrb	r1, [r2, #0]
 8000fd6:	4a1a      	ldr	r2, [pc, #104]	; (8001040 <println+0x98>)
 8000fd8:	54d1      	strb	r1, [r2, r3]
	for (i = 0; i < printLen; i++)
 8000fda:	7bfb      	ldrb	r3, [r7, #15]
 8000fdc:	3301      	adds	r3, #1
 8000fde:	73fb      	strb	r3, [r7, #15]
 8000fe0:	7bfa      	ldrb	r2, [r7, #15]
 8000fe2:	4b16      	ldr	r3, [pc, #88]	; (800103c <println+0x94>)
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	429a      	cmp	r2, r3
 8000fe8:	d3f0      	bcc.n	8000fcc <println+0x24>
	}
	printBuffer[printLen] = '\n';
 8000fea:	4b14      	ldr	r3, [pc, #80]	; (800103c <println+0x94>)
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	4a14      	ldr	r2, [pc, #80]	; (8001040 <println+0x98>)
 8000ff0:	210a      	movs	r1, #10
 8000ff2:	54d1      	strb	r1, [r2, r3]
	printBuffer[printLen + 1] = '\r';
 8000ff4:	4b11      	ldr	r3, [pc, #68]	; (800103c <println+0x94>)
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	3301      	adds	r3, #1
 8000ffa:	4a11      	ldr	r2, [pc, #68]	; (8001040 <println+0x98>)
 8000ffc:	210d      	movs	r1, #13
 8000ffe:	54d1      	strb	r1, [r2, r3]
	printBuffer[printLen + 2] = '\0';
 8001000:	4b0e      	ldr	r3, [pc, #56]	; (800103c <println+0x94>)
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	3302      	adds	r3, #2
 8001006:	4a0e      	ldr	r2, [pc, #56]	; (8001040 <println+0x98>)
 8001008:	2100      	movs	r1, #0
 800100a:	54d1      	strb	r1, [r2, r3]
 	while (CDC_Transmit_FS((uint8_t*) printBuffer, printLen + 3) == USBD_BUSY);
 800100c:	bf00      	nop
 800100e:	4b0b      	ldr	r3, [pc, #44]	; (800103c <println+0x94>)
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	b29b      	uxth	r3, r3
 8001014:	3303      	adds	r3, #3
 8001016:	b29b      	uxth	r3, r3
 8001018:	4619      	mov	r1, r3
 800101a:	4809      	ldr	r0, [pc, #36]	; (8001040 <println+0x98>)
 800101c:	f00c fcf2 	bl	800da04 <CDC_Transmit_FS>
 8001020:	4603      	mov	r3, r0
 8001022:	2b01      	cmp	r3, #1
 8001024:	d0f3      	beq.n	800100e <println+0x66>

	HAL_GPIO_WritePin(LEDB_GPIO_Port, LEDB_Pin, GPIO_PIN_RESET);
 8001026:	2200      	movs	r2, #0
 8001028:	2140      	movs	r1, #64	; 0x40
 800102a:	4803      	ldr	r0, [pc, #12]	; (8001038 <println+0x90>)
 800102c:	f003 fc66 	bl	80048fc <HAL_GPIO_WritePin>
	#endif
};
 8001030:	bf00      	nop
 8001032:	3710      	adds	r7, #16
 8001034:	46bd      	mov	sp, r7
 8001036:	bd80      	pop	{r7, pc}
 8001038:	40020800 	.word	0x40020800
 800103c:	20000368 	.word	0x20000368
 8001040:	2000036c 	.word	0x2000036c

08001044 <millis>:
#include "main.h"
#include "run.h"

// TIM5 has 32-bit counter -> takes longer to overflow
//static inline uint32_t micros(void) { return (uint32_t)TIM1->CNT; }
static inline uint32_t millis(void) { return (uint32_t)(TIM1->CNT) / 10; }
 8001044:	b480      	push	{r7}
 8001046:	af00      	add	r7, sp, #0
 8001048:	4b05      	ldr	r3, [pc, #20]	; (8001060 <millis+0x1c>)
 800104a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800104c:	4a05      	ldr	r2, [pc, #20]	; (8001064 <millis+0x20>)
 800104e:	fba2 2303 	umull	r2, r3, r2, r3
 8001052:	08db      	lsrs	r3, r3, #3
 8001054:	4618      	mov	r0, r3
 8001056:	46bd      	mov	sp, r7
 8001058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105c:	4770      	bx	lr
 800105e:	bf00      	nop
 8001060:	40010000 	.word	0x40010000
 8001064:	cccccccd 	.word	0xcccccccd

08001068 <GPS_read>:
		@brief Read one character from the GPS device
		@return The character that we received, or 0 if nothing was available
*/
/**************************************************************************/
char GPS_read(GPS* inst)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	b084      	sub	sp, #16
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]
	//println("[GPS] read()");
	static uint32_t firstChar = 0; // first character received in current sentence
	uint32_t tStart = millis();		// as close as we can get to time char was sent
 8001070:	f7ff ffe8 	bl	8001044 <millis>
 8001074:	60f8      	str	r0, [r7, #12]
	char c = 0;
 8001076:	2300      	movs	r3, #0
 8001078:	72fb      	strb	r3, [r7, #11]
	uint8_t ca[1] = {0};
 800107a:	2300      	movs	r3, #0
 800107c:	723b      	strb	r3, [r7, #8]

	if (inst->paused) return c;
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 8001084:	2b00      	cmp	r3, #0
 8001086:	d001      	beq.n	800108c <GPS_read+0x24>
 8001088:	7afb      	ldrb	r3, [r7, #11]
 800108a:	e07b      	b.n	8001184 <GPS_read+0x11c>

	// code ~!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!@@@@@@@@@@@$$$$$$$$$$$$$$$$$$$$#################3
	//println("[GPS] starting receiving");
	HAL_UART_Receive(inst->uart, ca, 1, 500);
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	f8d3 00d4 	ldr.w	r0, [r3, #212]	; 0xd4
 8001092:	f107 0108 	add.w	r1, r7, #8
 8001096:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800109a:	2201      	movs	r2, #1
 800109c:	f008 f8a6 	bl	80091ec <HAL_UART_Receive>
	//println("[GPS] finished receiving");
	c = (char)ca[0];
 80010a0:	7a3b      	ldrb	r3, [r7, #8]
 80010a2:	72fb      	strb	r3, [r7, #11]

	inst->currentline[inst->lineidx++] = c;
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	f8d3 21cc 	ldr.w	r2, [r3, #460]	; 0x1cc
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	f893 31c8 	ldrb.w	r3, [r3, #456]	; 0x1c8
 80010b0:	b2db      	uxtb	r3, r3
 80010b2:	1c59      	adds	r1, r3, #1
 80010b4:	b2c8      	uxtb	r0, r1
 80010b6:	6879      	ldr	r1, [r7, #4]
 80010b8:	f881 01c8 	strb.w	r0, [r1, #456]	; 0x1c8
 80010bc:	4413      	add	r3, r2
 80010be:	7afa      	ldrb	r2, [r7, #11]
 80010c0:	701a      	strb	r2, [r3, #0]
	if (inst->lineidx >= MAXLINELENGTH) inst->lineidx = MAXLINELENGTH - 1; // ensure there is someplace to put the next received character
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	f893 31c8 	ldrb.w	r3, [r3, #456]	; 0x1c8
 80010c8:	b2db      	uxtb	r3, r3
 80010ca:	2b77      	cmp	r3, #119	; 0x77
 80010cc:	d903      	bls.n	80010d6 <GPS_read+0x6e>
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	2277      	movs	r2, #119	; 0x77
 80010d2:	f883 21c8 	strb.w	r2, [r3, #456]	; 0x1c8

	if (c == '\n')
 80010d6:	7afb      	ldrb	r3, [r7, #11]
 80010d8:	2b0a      	cmp	r3, #10
 80010da:	d141      	bne.n	8001160 <GPS_read+0xf8>
	{
		inst->currentline[inst->lineidx] = 0;
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 80010e2:	687a      	ldr	r2, [r7, #4]
 80010e4:	f892 21c8 	ldrb.w	r2, [r2, #456]	; 0x1c8
 80010e8:	b2d2      	uxtb	r2, r2
 80010ea:	4413      	add	r3, r2
 80010ec:	2200      	movs	r2, #0
 80010ee:	701a      	strb	r2, [r3, #0]

		if (inst->currentline == inst->line1)
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	f8d3 21cc 	ldr.w	r2, [r3, #460]	; 0x1cc
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	33d8      	adds	r3, #216	; 0xd8
 80010fa:	429a      	cmp	r2, r3
 80010fc:	d10c      	bne.n	8001118 <GPS_read+0xb0>
		{
			inst->currentline = inst->line2;
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	f503 72a8 	add.w	r2, r3, #336	; 0x150
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	f8c3 21cc 	str.w	r2, [r3, #460]	; 0x1cc
			inst->lastline = inst->line1;
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	f103 02d8 	add.w	r2, r3, #216	; 0xd8
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	f8c3 21d0 	str.w	r2, [r3, #464]	; 0x1d0
 8001116:	e00b      	b.n	8001130 <GPS_read+0xc8>
		}
		else
		{
			inst->currentline = inst->line1;
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	f103 02d8 	add.w	r2, r3, #216	; 0xd8
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	f8c3 21cc 	str.w	r2, [r3, #460]	; 0x1cc
			inst->lastline = inst->line2;
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	f503 72a8 	add.w	r2, r3, #336	; 0x150
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	f8c3 21d0 	str.w	r2, [r3, #464]	; 0x1d0
		}

		// Serial.println("----");
		// Serial.println((char* )lastline);
		// Serial.println("----");
		inst->lineidx = 0;
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	2200      	movs	r2, #0
 8001134:	f883 21c8 	strb.w	r2, [r3, #456]	; 0x1c8
		inst->recvdflag = true;
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	2201      	movs	r2, #1
 800113c:	f883 21d4 	strb.w	r2, [r3, #468]	; 0x1d4
		inst->recvdTime = millis(); // time we got the end of the string
 8001140:	f7ff ff80 	bl	8001044 <millis>
 8001144:	4602      	mov	r2, r0
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
		inst->sentTime = firstChar;
 800114c:	4b0f      	ldr	r3, [pc, #60]	; (800118c <GPS_read+0x124>)
 800114e:	681a      	ldr	r2, [r3, #0]
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
		firstChar = 0; // there are no characters yet
 8001156:	4b0d      	ldr	r3, [pc, #52]	; (800118c <GPS_read+0x124>)
 8001158:	2200      	movs	r2, #0
 800115a:	601a      	str	r2, [r3, #0]
		return c;			// wait until next character to set time
 800115c:	7afb      	ldrb	r3, [r7, #11]
 800115e:	e011      	b.n	8001184 <GPS_read+0x11c>
	}

	if (firstChar == 0) firstChar = tStart;
 8001160:	4b0a      	ldr	r3, [pc, #40]	; (800118c <GPS_read+0x124>)
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	2b00      	cmp	r3, #0
 8001166:	d102      	bne.n	800116e <GPS_read+0x106>
 8001168:	4a08      	ldr	r2, [pc, #32]	; (800118c <GPS_read+0x124>)
 800116a:	68fb      	ldr	r3, [r7, #12]
 800116c:	6013      	str	r3, [r2, #0]

	//wait for finished transmission
	//println("[GPS] read() ... waiting");
	while (HAL_UART_GetState(inst->uart) != HAL_UART_STATE_READY);
 800116e:	bf00      	nop
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8001176:	4618      	mov	r0, r3
 8001178:	f008 f8de 	bl	8009338 <HAL_UART_GetState>
 800117c:	4603      	mov	r3, r0
 800117e:	2b20      	cmp	r3, #32
 8001180:	d1f6      	bne.n	8001170 <GPS_read+0x108>
	//println("[GPS] finished");
	return c;
 8001182:	7afb      	ldrb	r3, [r7, #11]
}
 8001184:	4618      	mov	r0, r3
 8001186:	3710      	adds	r7, #16
 8001188:	46bd      	mov	sp, r7
 800118a:	bd80      	pop	{r7, pc}
 800118c:	2000056c 	.word	0x2000056c

08001190 <GPS_init>:
/*!
		@brief Initialization code used by all constructor types
*/
/**************************************************************************/
void GPS_init(GPS* inst)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	b082      	sub	sp, #8
 8001194:	af00      	add	r7, sp, #0
 8001196:	6078      	str	r0, [r7, #4]
	// UART instance, code ##########################$$$$$$$$$$$$$$$$$$$$$$$$$$$$$@@@@@@@@@@@@@@
	println("[GPS] init()");
 8001198:	4883      	ldr	r0, [pc, #524]	; (80013a8 <GPS_init+0x218>)
 800119a:	f7ff ff05 	bl	8000fa8 <println>
	inst->recvdflag = false;
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	2200      	movs	r2, #0
 80011a2:	f883 21d4 	strb.w	r2, [r3, #468]	; 0x1d4
	inst->inStandbyMode = false;
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	2200      	movs	r2, #0
 80011aa:	f883 21d5 	strb.w	r2, [r3, #469]	; 0x1d5
	inst->paused = false;
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	2200      	movs	r2, #0
 80011b2:	f883 221c 	strb.w	r2, [r3, #540]	; 0x21c
	inst->lineidx = 0;
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	2200      	movs	r2, #0
 80011ba:	f883 21c8 	strb.w	r2, [r3, #456]	; 0x1c8
	inst->currentline = inst->line1;
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	f103 02d8 	add.w	r2, r3, #216	; 0xd8
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	f8c3 21cc 	str.w	r2, [r3, #460]	; 0x1cc
	inst->lastline = inst->line2;
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	f503 72a8 	add.w	r2, r3, #336	; 0x150
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	f8c3 21d0 	str.w	r2, [r3, #464]	; 0x1d0

	// uint8_t
	inst->gpsTime.hour = 0;
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	2200      	movs	r2, #0
 80011da:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
	inst->gpsTime.minute = 0;
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	2200      	movs	r2, #0
 80011e2:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
	inst->gpsTime.second = 0;
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	2200      	movs	r2, #0
 80011ea:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	inst->gpsTime.year = 0;
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	2200      	movs	r2, #0
 80011f2:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
	inst->gpsTime.month = 0;
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	2200      	movs	r2, #0
 80011fa:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
	inst->gpsTime.dayM = 0;
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	2200      	movs	r2, #0
 8001202:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	inst->fixquality = 0;
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	2200      	movs	r2, #0
 800120a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
	inst->fixquality_3d = 0;
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	2200      	movs	r2, #0
 8001212:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79
	inst->satellites = 0;
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	2200      	movs	r2, #0
 800121a:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a
	// bool
	inst->fix = false;
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	2200      	movs	r2, #0
 8001222:	f883 2077 	strb.w	r2, [r3, #119]	; 0x77
	// char
	inst->lat = 0;
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	2200      	movs	r2, #0
 800122a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
	inst->lon = 0;
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	2200      	movs	r2, #0
 8001232:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
	inst->mag = 0;
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	2200      	movs	r2, #0
 800123a:	f883 2076 	strb.w	r2, [r3, #118]	; 0x76
	// uint16_t
	inst->gpsTime.msecond = 0;
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	2200      	movs	r2, #0
 8001242:	875a      	strh	r2, [r3, #58]	; 0x3a
	// float
	inst->latitude = 0.0;
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	f04f 0200 	mov.w	r2, #0
 800124a:	63da      	str	r2, [r3, #60]	; 0x3c
	inst->longitude = 0.0;
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	f04f 0200 	mov.w	r2, #0
 8001252:	641a      	str	r2, [r3, #64]	; 0x40
	inst->geoidheight = 0.0;
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	f04f 0200 	mov.w	r2, #0
 800125a:	655a      	str	r2, [r3, #84]	; 0x54
	inst->altitude = 0.0;
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	f04f 0200 	mov.w	r2, #0
 8001262:	659a      	str	r2, [r3, #88]	; 0x58
	inst->speed = 0.0;
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	f04f 0200 	mov.w	r2, #0
 800126a:	65da      	str	r2, [r3, #92]	; 0x5c
	inst->angle = 0.0;
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	f04f 0200 	mov.w	r2, #0
 8001272:	661a      	str	r2, [r3, #96]	; 0x60
	inst->magvariation = 0.0;
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	f04f 0200 	mov.w	r2, #0
 800127a:	665a      	str	r2, [r3, #100]	; 0x64
	inst->HDOP = 0.0;
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	f04f 0200 	mov.w	r2, #0
 8001282:	669a      	str	r2, [r3, #104]	; 0x68
	inst->VDOP = 0.0;
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	f04f 0200 	mov.w	r2, #0
 800128a:	66da      	str	r2, [r3, #108]	; 0x6c
	inst->PDOP = 0.0;
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	f04f 0200 	mov.w	r2, #0
 8001292:	671a      	str	r2, [r3, #112]	; 0x70

	inst->lastUpdate = 0; // millis() when last full sentence successfully parsed
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	2200      	movs	r2, #0
 8001298:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
	inst->lastFix = 0;  // millis() when last fix received
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	2200      	movs	r2, #0
 80012a0:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
	inst->lastTime = 0; // millis() when last time received
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	2200      	movs	r2, #0
 80012a8:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
	inst->lastDate = 0; // millis() when last date received
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	2200      	movs	r2, #0
 80012b0:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
	inst->recvdTime = 0; // millis() when last full sentence received
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	2200      	movs	r2, #0
 80012b8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
	inst->sentTime = 0; // millis() when first character of last full sentence received
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	2200      	movs	r2, #0
 80012c0:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

	inst->lat = 'X';
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	2258      	movs	r2, #88	; 0x58
 80012c8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
	inst->lon = 'X';
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	2258      	movs	r2, #88	; 0x58
 80012d0:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
	inst->mag = 'X';
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	2258      	movs	r2, #88	; 0x58
 80012d8:	f883 2076 	strb.w	r2, [r3, #118]	; 0x76

	inst->thisCheck = 0;
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	2200      	movs	r2, #0
 80012e0:	601a      	str	r2, [r3, #0]
	memset(inst->thisSource, 0x00, NMEA_MAX_SOURCE_ID);
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	3304      	adds	r3, #4
 80012e6:	2203      	movs	r2, #3
 80012e8:	2100      	movs	r1, #0
 80012ea:	4618      	mov	r0, r3
 80012ec:	f00d f809 	bl	800e302 <memset>
	memset(inst->thisSentence, 0x00, NMEA_MAX_SENTENCE_ID);
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	3307      	adds	r3, #7
 80012f4:	2214      	movs	r2, #20
 80012f6:	2100      	movs	r1, #0
 80012f8:	4618      	mov	r0, r3
 80012fa:	f00d f802 	bl	800e302 <memset>
	memset(inst->lastSource, 0x00, NMEA_MAX_SOURCE_ID);
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	331b      	adds	r3, #27
 8001302:	2203      	movs	r2, #3
 8001304:	2100      	movs	r1, #0
 8001306:	4618      	mov	r0, r3
 8001308:	f00c fffb 	bl	800e302 <memset>
	memset(inst->lastSentence, 0x00, NMEA_MAX_SENTENCE_ID);
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	331e      	adds	r3, #30
 8001310:	2214      	movs	r2, #20
 8001312:	2100      	movs	r1, #0
 8001314:	4618      	mov	r0, r3
 8001316:	f00c fff4 	bl	800e302 <memset>

	memset(inst->txtTXT, 0x00, 63);
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	3388      	adds	r3, #136	; 0x88
 800131e:	223f      	movs	r2, #63	; 0x3f
 8001320:	2100      	movs	r1, #0
 8001322:	4618      	mov	r0, r3
 8001324:	f00c ffed 	bl	800e302 <memset>
	inst->txtTot = 0;
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	2200      	movs	r2, #0
 800132c:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
	inst->txtID = 0;
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	2200      	movs	r2, #0
 8001334:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
	inst->txtN = 0;
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	2200      	movs	r2, #0
 800133c:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0

	inst->sources[0] = "II";
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	4a1a      	ldr	r2, [pc, #104]	; (80013ac <GPS_init+0x21c>)
 8001344:	f8c3 21d8 	str.w	r2, [r3, #472]	; 0x1d8
	inst->sources[1] = "WI";
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	4a19      	ldr	r2, [pc, #100]	; (80013b0 <GPS_init+0x220>)
 800134c:	f8c3 21dc 	str.w	r2, [r3, #476]	; 0x1dc
	inst->sources[2] = "GP";
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	4a18      	ldr	r2, [pc, #96]	; (80013b4 <GPS_init+0x224>)
 8001354:	f8c3 21e0 	str.w	r2, [r3, #480]	; 0x1e0
	inst->sources[3] = "GN";
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	4a17      	ldr	r2, [pc, #92]	; (80013b8 <GPS_init+0x228>)
 800135c:	f8c3 21e4 	str.w	r2, [r3, #484]	; 0x1e4
	inst->sources[4] = "ZZZ";
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	4a16      	ldr	r2, [pc, #88]	; (80013bc <GPS_init+0x22c>)
 8001364:	f8c3 21e8 	str.w	r2, [r3, #488]	; 0x1e8
	inst->sentences_parsed[0] = "GGA";
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	4a15      	ldr	r2, [pc, #84]	; (80013c0 <GPS_init+0x230>)
 800136c:	f8c3 21ec 	str.w	r2, [r3, #492]	; 0x1ec
	inst->sentences_parsed[1] = "GLL";
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	4a14      	ldr	r2, [pc, #80]	; (80013c4 <GPS_init+0x234>)
 8001374:	f8c3 21f0 	str.w	r2, [r3, #496]	; 0x1f0
	inst->sentences_parsed[2] = "GSA";
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	4a13      	ldr	r2, [pc, #76]	; (80013c8 <GPS_init+0x238>)
 800137c:	f8c3 21f4 	str.w	r2, [r3, #500]	; 0x1f4
	inst->sentences_parsed[3] = "RMC";
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	4a12      	ldr	r2, [pc, #72]	; (80013cc <GPS_init+0x23c>)
 8001384:	f8c3 21f8 	str.w	r2, [r3, #504]	; 0x1f8
	inst->sentences_parsed[4] = "ZZZ";
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	4a0c      	ldr	r2, [pc, #48]	; (80013bc <GPS_init+0x22c>)
 800138c:	f8c3 21fc 	str.w	r2, [r3, #508]	; 0x1fc
	inst->sentences_known[0] = "ZZZ";
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	4a0a      	ldr	r2, [pc, #40]	; (80013bc <GPS_init+0x22c>)
 8001394:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

	//GPS_standby(inst);
	//GPS_wakeup(inst);

	println("[GPS] End init()");
 8001398:	480d      	ldr	r0, [pc, #52]	; (80013d0 <GPS_init+0x240>)
 800139a:	f7ff fe05 	bl	8000fa8 <println>
}
 800139e:	bf00      	nop
 80013a0:	3708      	adds	r7, #8
 80013a2:	46bd      	mov	sp, r7
 80013a4:	bd80      	pop	{r7, pc}
 80013a6:	bf00      	nop
 80013a8:	08011e38 	.word	0x08011e38
 80013ac:	08011e48 	.word	0x08011e48
 80013b0:	08011e4c 	.word	0x08011e4c
 80013b4:	08011e50 	.word	0x08011e50
 80013b8:	08011e54 	.word	0x08011e54
 80013bc:	08011e58 	.word	0x08011e58
 80013c0:	08011e5c 	.word	0x08011e5c
 80013c4:	08011e60 	.word	0x08011e60
 80013c8:	08011e64 	.word	0x08011e64
 80013cc:	08011e68 	.word	0x08011e68
 80013d0:	08011e6c 	.word	0x08011e6c

080013d4 <GPS_sendCommand>:
		@brief Send a command to the GPS device
		@param str Pointer to a string holding the command to send
*/
/**************************************************************************/
void GPS_sendCommand(GPS* inst, char* str)
{
 80013d4:	b590      	push	{r4, r7, lr}
 80013d6:	b083      	sub	sp, #12
 80013d8:	af00      	add	r7, sp, #0
 80013da:	6078      	str	r0, [r7, #4]
 80013dc:	6039      	str	r1, [r7, #0]
	println("[GPS] sendCommand()");
 80013de:	4812      	ldr	r0, [pc, #72]	; (8001428 <GPS_sendCommand+0x54>)
 80013e0:	f7ff fde2 	bl	8000fa8 <println>
	// NOT THIS PRINTLN, code !!!!!!!!!!!!!!@@@@@@@@@@@@@@@@@@@#################$$$$$$$$$$$$$$$$$$$$$$$$$$
	HAL_UART_Transmit(inst->uart, (uint8_t*)str, strlen(str), HAL_MAX_DELAY);
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	f8d3 40d4 	ldr.w	r4, [r3, #212]	; 0xd4
 80013ea:	6838      	ldr	r0, [r7, #0]
 80013ec:	f7fe fefa 	bl	80001e4 <strlen>
 80013f0:	4603      	mov	r3, r0
 80013f2:	b29a      	uxth	r2, r3
 80013f4:	f04f 33ff 	mov.w	r3, #4294967295
 80013f8:	6839      	ldr	r1, [r7, #0]
 80013fa:	4620      	mov	r0, r4
 80013fc:	f007 fe5d 	bl	80090ba <HAL_UART_Transmit>
	println("[GPS] sendCommand()... waiting");
 8001400:	480a      	ldr	r0, [pc, #40]	; (800142c <GPS_sendCommand+0x58>)
 8001402:	f7ff fdd1 	bl	8000fa8 <println>
	// wait for finished transmission
	while (HAL_UART_GetState(inst->uart) != HAL_UART_STATE_READY);
 8001406:	bf00      	nop
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800140e:	4618      	mov	r0, r3
 8001410:	f007 ff92 	bl	8009338 <HAL_UART_GetState>
 8001414:	4603      	mov	r3, r0
 8001416:	2b20      	cmp	r3, #32
 8001418:	d1f6      	bne.n	8001408 <GPS_sendCommand+0x34>
	println("[GPS] finished");
 800141a:	4805      	ldr	r0, [pc, #20]	; (8001430 <GPS_sendCommand+0x5c>)
 800141c:	f7ff fdc4 	bl	8000fa8 <println>
}
 8001420:	bf00      	nop
 8001422:	370c      	adds	r7, #12
 8001424:	46bd      	mov	sp, r7
 8001426:	bd90      	pop	{r4, r7, pc}
 8001428:	08011e80 	.word	0x08011e80
 800142c:	08011e94 	.word	0x08011e94
 8001430:	08011eb4 	.word	0x08011eb4

08001434 <GPS_parse>:
		@return True if we parsed it, false if it has an invalid checksum or invalid
	 data
*/
/**************************************************************************/
bool GPS_parse(GPS* inst, char* nmea)
{
 8001434:	b590      	push	{r4, r7, lr}
 8001436:	b087      	sub	sp, #28
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]
 800143c:	6039      	str	r1, [r7, #0]
	// do checksum check
	if (!GPS_check(inst, nmea)) return false;
 800143e:	6839      	ldr	r1, [r7, #0]
 8001440:	6878      	ldr	r0, [r7, #4]
 8001442:	f000 fb65 	bl	8001b10 <GPS_check>
 8001446:	4603      	mov	r3, r0
 8001448:	f083 0301 	eor.w	r3, r3, #1
 800144c:	b2db      	uxtb	r3, r3
 800144e:	2b00      	cmp	r3, #0
 8001450:	d001      	beq.n	8001456 <GPS_parse+0x22>
 8001452:	2300      	movs	r3, #0
 8001454:	e355      	b.n	8001b02 <GPS_parse+0x6ce>
	// passed the check, so there's a valid source in thisSource and a valid
	// sentence in thisSentence

	// look for a few common sentences
	char* p = nmea; // Pointer to move through the sentence -- good parsers are
 8001456:	683b      	ldr	r3, [r7, #0]
 8001458:	617b      	str	r3, [r7, #20]
									// non-destructive
	p = strchr(p, ',') + 1; // Skip to the character after the next comma, then check sentence.
 800145a:	212c      	movs	r1, #44	; 0x2c
 800145c:	6978      	ldr	r0, [r7, #20]
 800145e:	f00d fe75 	bl	800f14c <strchr>
 8001462:	4603      	mov	r3, r0
 8001464:	3301      	adds	r3, #1
 8001466:	617b      	str	r3, [r7, #20]

	if (!strcmp(inst->thisSentence, "GGA"))
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	3307      	adds	r3, #7
 800146c:	49a5      	ldr	r1, [pc, #660]	; (8001704 <GPS_parse+0x2d0>)
 800146e:	4618      	mov	r0, r3
 8001470:	f7fe feae 	bl	80001d0 <strcmp>
 8001474:	4603      	mov	r3, r0
 8001476:	2b00      	cmp	r3, #0
 8001478:	f040 80e6 	bne.w	8001648 <GPS_parse+0x214>
	{
		// found GGA
		// get time
		GPS_parseTime(inst, p);
 800147c:	6979      	ldr	r1, [r7, #20]
 800147e:	6878      	ldr	r0, [r7, #4]
 8001480:	f000 fcc6 	bl	8001e10 <GPS_parseTime>

		// parse out latitude
		p = strchr(p, ',') + 1;
 8001484:	212c      	movs	r1, #44	; 0x2c
 8001486:	6978      	ldr	r0, [r7, #20]
 8001488:	f00d fe60 	bl	800f14c <strchr>
 800148c:	4603      	mov	r3, r0
 800148e:	3301      	adds	r3, #1
 8001490:	617b      	str	r3, [r7, #20]
		GPS_parseLat(inst, p);
 8001492:	6979      	ldr	r1, [r7, #20]
 8001494:	6878      	ldr	r0, [r7, #4]
 8001496:	f000 fd0b 	bl	8001eb0 <GPS_parseLat>
		p = strchr(p, ',') + 1;
 800149a:	212c      	movs	r1, #44	; 0x2c
 800149c:	6978      	ldr	r0, [r7, #20]
 800149e:	f00d fe55 	bl	800f14c <strchr>
 80014a2:	4603      	mov	r3, r0
 80014a4:	3301      	adds	r3, #1
 80014a6:	617b      	str	r3, [r7, #20]
		if (!GPS_parseLatDir(inst, p)) return false;
 80014a8:	6979      	ldr	r1, [r7, #20]
 80014aa:	6878      	ldr	r0, [r7, #4]
 80014ac:	f000 fdb6 	bl	800201c <GPS_parseLatDir>
 80014b0:	4603      	mov	r3, r0
 80014b2:	f083 0301 	eor.w	r3, r3, #1
 80014b6:	b2db      	uxtb	r3, r3
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d001      	beq.n	80014c0 <GPS_parse+0x8c>
 80014bc:	2300      	movs	r3, #0
 80014be:	e320      	b.n	8001b02 <GPS_parse+0x6ce>

		// parse out longitude
		p = strchr(p, ',') + 1;
 80014c0:	212c      	movs	r1, #44	; 0x2c
 80014c2:	6978      	ldr	r0, [r7, #20]
 80014c4:	f00d fe42 	bl	800f14c <strchr>
 80014c8:	4603      	mov	r3, r0
 80014ca:	3301      	adds	r3, #1
 80014cc:	617b      	str	r3, [r7, #20]
		GPS_parseLon(inst, p);
 80014ce:	6979      	ldr	r1, [r7, #20]
 80014d0:	6878      	ldr	r0, [r7, #4]
 80014d2:	f000 fde3 	bl	800209c <GPS_parseLon>
		p = strchr(p, ',') + 1;
 80014d6:	212c      	movs	r1, #44	; 0x2c
 80014d8:	6978      	ldr	r0, [r7, #20]
 80014da:	f00d fe37 	bl	800f14c <strchr>
 80014de:	4603      	mov	r3, r0
 80014e0:	3301      	adds	r3, #1
 80014e2:	617b      	str	r3, [r7, #20]
		if (!GPS_parseLonDir(inst, p)) return false;
 80014e4:	6979      	ldr	r1, [r7, #20]
 80014e6:	6878      	ldr	r0, [r7, #4]
 80014e8:	f000 fe80 	bl	80021ec <GPS_parseLonDir>
 80014ec:	4603      	mov	r3, r0
 80014ee:	f083 0301 	eor.w	r3, r3, #1
 80014f2:	b2db      	uxtb	r3, r3
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d001      	beq.n	80014fc <GPS_parse+0xc8>
 80014f8:	2300      	movs	r3, #0
 80014fa:	e302      	b.n	8001b02 <GPS_parse+0x6ce>

		p = strchr(p, ',') + 1;
 80014fc:	212c      	movs	r1, #44	; 0x2c
 80014fe:	6978      	ldr	r0, [r7, #20]
 8001500:	f00d fe24 	bl	800f14c <strchr>
 8001504:	4603      	mov	r3, r0
 8001506:	3301      	adds	r3, #1
 8001508:	617b      	str	r3, [r7, #20]
		if (!GPS_isEmpty(inst, p))
 800150a:	6979      	ldr	r1, [r7, #20]
 800150c:	6878      	ldr	r0, [r7, #4]
 800150e:	f000 fc66 	bl	8001dde <GPS_isEmpty>
 8001512:	4603      	mov	r3, r0
 8001514:	f083 0301 	eor.w	r3, r3, #1
 8001518:	b2db      	uxtb	r3, r3
 800151a:	2b00      	cmp	r3, #0
 800151c:	d01b      	beq.n	8001556 <GPS_parse+0x122>
		{
			inst->fixquality = atoi(p);
 800151e:	6978      	ldr	r0, [r7, #20]
 8001520:	f00c fea7 	bl	800e272 <atoi>
 8001524:	4603      	mov	r3, r0
 8001526:	b2da      	uxtb	r2, r3
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
			if (inst->fixquality > 0)
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 8001534:	2b00      	cmp	r3, #0
 8001536:	d00a      	beq.n	800154e <GPS_parse+0x11a>
			{
				inst->fix = true;
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	2201      	movs	r2, #1
 800153c:	f883 2077 	strb.w	r2, [r3, #119]	; 0x77
				inst->lastFix = inst->sentTime;
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
 800154c:	e003      	b.n	8001556 <GPS_parse+0x122>
			}
			else inst->fix = false;
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	2200      	movs	r2, #0
 8001552:	f883 2077 	strb.w	r2, [r3, #119]	; 0x77
		}

		p = strchr(p, ',') + 1;
 8001556:	212c      	movs	r1, #44	; 0x2c
 8001558:	6978      	ldr	r0, [r7, #20]
 800155a:	f00d fdf7 	bl	800f14c <strchr>
 800155e:	4603      	mov	r3, r0
 8001560:	3301      	adds	r3, #1
 8001562:	617b      	str	r3, [r7, #20]
		if (!GPS_isEmpty(inst, p)) inst->satellites = atoi(p);
 8001564:	6979      	ldr	r1, [r7, #20]
 8001566:	6878      	ldr	r0, [r7, #4]
 8001568:	f000 fc39 	bl	8001dde <GPS_isEmpty>
 800156c:	4603      	mov	r3, r0
 800156e:	f083 0301 	eor.w	r3, r3, #1
 8001572:	b2db      	uxtb	r3, r3
 8001574:	2b00      	cmp	r3, #0
 8001576:	d007      	beq.n	8001588 <GPS_parse+0x154>
 8001578:	6978      	ldr	r0, [r7, #20]
 800157a:	f00c fe7a 	bl	800e272 <atoi>
 800157e:	4603      	mov	r3, r0
 8001580:	b2da      	uxtb	r2, r3
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a

		p = strchr(p, ',') + 1;
 8001588:	212c      	movs	r1, #44	; 0x2c
 800158a:	6978      	ldr	r0, [r7, #20]
 800158c:	f00d fdde 	bl	800f14c <strchr>
 8001590:	4603      	mov	r3, r0
 8001592:	3301      	adds	r3, #1
 8001594:	617b      	str	r3, [r7, #20]
		if (!GPS_isEmpty(inst, p)) inst->HDOP = (float)atof(p);
 8001596:	6979      	ldr	r1, [r7, #20]
 8001598:	6878      	ldr	r0, [r7, #4]
 800159a:	f000 fc20 	bl	8001dde <GPS_isEmpty>
 800159e:	4603      	mov	r3, r0
 80015a0:	f083 0301 	eor.w	r3, r3, #1
 80015a4:	b2db      	uxtb	r3, r3
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d00b      	beq.n	80015c2 <GPS_parse+0x18e>
 80015aa:	6978      	ldr	r0, [r7, #20]
 80015ac:	f00c fe5e 	bl	800e26c <atof>
 80015b0:	ec54 3b10 	vmov	r3, r4, d0
 80015b4:	4618      	mov	r0, r3
 80015b6:	4621      	mov	r1, r4
 80015b8:	f7ff fb26 	bl	8000c08 <__aeabi_d2f>
 80015bc:	4602      	mov	r2, r0
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	669a      	str	r2, [r3, #104]	; 0x68

		p = strchr(p, ',') + 1;
 80015c2:	212c      	movs	r1, #44	; 0x2c
 80015c4:	6978      	ldr	r0, [r7, #20]
 80015c6:	f00d fdc1 	bl	800f14c <strchr>
 80015ca:	4603      	mov	r3, r0
 80015cc:	3301      	adds	r3, #1
 80015ce:	617b      	str	r3, [r7, #20]
		if (!GPS_isEmpty(inst, p)) inst->altitude = (float)atof(p);
 80015d0:	6979      	ldr	r1, [r7, #20]
 80015d2:	6878      	ldr	r0, [r7, #4]
 80015d4:	f000 fc03 	bl	8001dde <GPS_isEmpty>
 80015d8:	4603      	mov	r3, r0
 80015da:	f083 0301 	eor.w	r3, r3, #1
 80015de:	b2db      	uxtb	r3, r3
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d00b      	beq.n	80015fc <GPS_parse+0x1c8>
 80015e4:	6978      	ldr	r0, [r7, #20]
 80015e6:	f00c fe41 	bl	800e26c <atof>
 80015ea:	ec54 3b10 	vmov	r3, r4, d0
 80015ee:	4618      	mov	r0, r3
 80015f0:	4621      	mov	r1, r4
 80015f2:	f7ff fb09 	bl	8000c08 <__aeabi_d2f>
 80015f6:	4602      	mov	r2, r0
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	659a      	str	r2, [r3, #88]	; 0x58

		p = strchr(p, ',') + 1;
 80015fc:	212c      	movs	r1, #44	; 0x2c
 80015fe:	6978      	ldr	r0, [r7, #20]
 8001600:	f00d fda4 	bl	800f14c <strchr>
 8001604:	4603      	mov	r3, r0
 8001606:	3301      	adds	r3, #1
 8001608:	617b      	str	r3, [r7, #20]
		p = strchr(p, ',') + 1;
 800160a:	212c      	movs	r1, #44	; 0x2c
 800160c:	6978      	ldr	r0, [r7, #20]
 800160e:	f00d fd9d 	bl	800f14c <strchr>
 8001612:	4603      	mov	r3, r0
 8001614:	3301      	adds	r3, #1
 8001616:	617b      	str	r3, [r7, #20]
		if (!GPS_isEmpty(inst, p)) inst->geoidheight = (float)atof(p);
 8001618:	6979      	ldr	r1, [r7, #20]
 800161a:	6878      	ldr	r0, [r7, #4]
 800161c:	f000 fbdf 	bl	8001dde <GPS_isEmpty>
 8001620:	4603      	mov	r3, r0
 8001622:	f083 0301 	eor.w	r3, r3, #1
 8001626:	b2db      	uxtb	r3, r3
 8001628:	2b00      	cmp	r3, #0
 800162a:	f000 8251 	beq.w	8001ad0 <GPS_parse+0x69c>
 800162e:	6978      	ldr	r0, [r7, #20]
 8001630:	f00c fe1c 	bl	800e26c <atof>
 8001634:	ec54 3b10 	vmov	r3, r4, d0
 8001638:	4618      	mov	r0, r3
 800163a:	4621      	mov	r1, r4
 800163c:	f7ff fae4 	bl	8000c08 <__aeabi_d2f>
 8001640:	4602      	mov	r2, r0
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	655a      	str	r2, [r3, #84]	; 0x54
 8001646:	e243      	b.n	8001ad0 <GPS_parse+0x69c>
	}

	else if (!strcmp(inst->thisSentence, "RMC"))
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	3307      	adds	r3, #7
 800164c:	492e      	ldr	r1, [pc, #184]	; (8001708 <GPS_parse+0x2d4>)
 800164e:	4618      	mov	r0, r3
 8001650:	f7fe fdbe 	bl	80001d0 <strcmp>
 8001654:	4603      	mov	r3, r0
 8001656:	2b00      	cmp	r3, #0
 8001658:	f040 80e3 	bne.w	8001822 <GPS_parse+0x3ee>
	{
		// found RMC
		// get time
		GPS_parseTime(inst, p);
 800165c:	6979      	ldr	r1, [r7, #20]
 800165e:	6878      	ldr	r0, [r7, #4]
 8001660:	f000 fbd6 	bl	8001e10 <GPS_parseTime>

		// fix or no fix
		p = strchr(p, ',') + 1;
 8001664:	212c      	movs	r1, #44	; 0x2c
 8001666:	6978      	ldr	r0, [r7, #20]
 8001668:	f00d fd70 	bl	800f14c <strchr>
 800166c:	4603      	mov	r3, r0
 800166e:	3301      	adds	r3, #1
 8001670:	617b      	str	r3, [r7, #20]
		if (!GPS_parseFix(inst, p)) return false;
 8001672:	6979      	ldr	r1, [r7, #20]
 8001674:	6878      	ldr	r0, [r7, #4]
 8001676:	f000 fe02 	bl	800227e <GPS_parseFix>
 800167a:	4603      	mov	r3, r0
 800167c:	f083 0301 	eor.w	r3, r3, #1
 8001680:	b2db      	uxtb	r3, r3
 8001682:	2b00      	cmp	r3, #0
 8001684:	d001      	beq.n	800168a <GPS_parse+0x256>
 8001686:	2300      	movs	r3, #0
 8001688:	e23b      	b.n	8001b02 <GPS_parse+0x6ce>

		// parse out latitude
		p = strchr(p, ',') + 1;
 800168a:	212c      	movs	r1, #44	; 0x2c
 800168c:	6978      	ldr	r0, [r7, #20]
 800168e:	f00d fd5d 	bl	800f14c <strchr>
 8001692:	4603      	mov	r3, r0
 8001694:	3301      	adds	r3, #1
 8001696:	617b      	str	r3, [r7, #20]
		GPS_parseLat(inst, p);
 8001698:	6979      	ldr	r1, [r7, #20]
 800169a:	6878      	ldr	r0, [r7, #4]
 800169c:	f000 fc08 	bl	8001eb0 <GPS_parseLat>
		p = strchr(p, ',') + 1;
 80016a0:	212c      	movs	r1, #44	; 0x2c
 80016a2:	6978      	ldr	r0, [r7, #20]
 80016a4:	f00d fd52 	bl	800f14c <strchr>
 80016a8:	4603      	mov	r3, r0
 80016aa:	3301      	adds	r3, #1
 80016ac:	617b      	str	r3, [r7, #20]
		if (!GPS_parseLatDir(inst, p)) return false;
 80016ae:	6979      	ldr	r1, [r7, #20]
 80016b0:	6878      	ldr	r0, [r7, #4]
 80016b2:	f000 fcb3 	bl	800201c <GPS_parseLatDir>
 80016b6:	4603      	mov	r3, r0
 80016b8:	f083 0301 	eor.w	r3, r3, #1
 80016bc:	b2db      	uxtb	r3, r3
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d001      	beq.n	80016c6 <GPS_parse+0x292>
 80016c2:	2300      	movs	r3, #0
 80016c4:	e21d      	b.n	8001b02 <GPS_parse+0x6ce>

		// parse out longitude
		p = strchr(p, ',') + 1;
 80016c6:	212c      	movs	r1, #44	; 0x2c
 80016c8:	6978      	ldr	r0, [r7, #20]
 80016ca:	f00d fd3f 	bl	800f14c <strchr>
 80016ce:	4603      	mov	r3, r0
 80016d0:	3301      	adds	r3, #1
 80016d2:	617b      	str	r3, [r7, #20]
		GPS_parseLon(inst, p);
 80016d4:	6979      	ldr	r1, [r7, #20]
 80016d6:	6878      	ldr	r0, [r7, #4]
 80016d8:	f000 fce0 	bl	800209c <GPS_parseLon>
		p = strchr(p, ',') + 1;
 80016dc:	212c      	movs	r1, #44	; 0x2c
 80016de:	6978      	ldr	r0, [r7, #20]
 80016e0:	f00d fd34 	bl	800f14c <strchr>
 80016e4:	4603      	mov	r3, r0
 80016e6:	3301      	adds	r3, #1
 80016e8:	617b      	str	r3, [r7, #20]
		if (!GPS_parseLonDir(inst, p)) return false;
 80016ea:	6979      	ldr	r1, [r7, #20]
 80016ec:	6878      	ldr	r0, [r7, #4]
 80016ee:	f000 fd7d 	bl	80021ec <GPS_parseLonDir>
 80016f2:	4603      	mov	r3, r0
 80016f4:	f083 0301 	eor.w	r3, r3, #1
 80016f8:	b2db      	uxtb	r3, r3
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d006      	beq.n	800170c <GPS_parse+0x2d8>
 80016fe:	2300      	movs	r3, #0
 8001700:	e1ff      	b.n	8001b02 <GPS_parse+0x6ce>
 8001702:	bf00      	nop
 8001704:	08011e5c 	.word	0x08011e5c
 8001708:	08011e68 	.word	0x08011e68

		// speed
		p = strchr(p, ',') + 1;
 800170c:	212c      	movs	r1, #44	; 0x2c
 800170e:	6978      	ldr	r0, [r7, #20]
 8001710:	f00d fd1c 	bl	800f14c <strchr>
 8001714:	4603      	mov	r3, r0
 8001716:	3301      	adds	r3, #1
 8001718:	617b      	str	r3, [r7, #20]
		if (!GPS_isEmpty(inst, p)) inst->speed = (float)atof(p);
 800171a:	6979      	ldr	r1, [r7, #20]
 800171c:	6878      	ldr	r0, [r7, #4]
 800171e:	f000 fb5e 	bl	8001dde <GPS_isEmpty>
 8001722:	4603      	mov	r3, r0
 8001724:	f083 0301 	eor.w	r3, r3, #1
 8001728:	b2db      	uxtb	r3, r3
 800172a:	2b00      	cmp	r3, #0
 800172c:	d00b      	beq.n	8001746 <GPS_parse+0x312>
 800172e:	6978      	ldr	r0, [r7, #20]
 8001730:	f00c fd9c 	bl	800e26c <atof>
 8001734:	ec54 3b10 	vmov	r3, r4, d0
 8001738:	4618      	mov	r0, r3
 800173a:	4621      	mov	r1, r4
 800173c:	f7ff fa64 	bl	8000c08 <__aeabi_d2f>
 8001740:	4602      	mov	r2, r0
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	65da      	str	r2, [r3, #92]	; 0x5c

		// angle
		p = strchr(p, ',') + 1;
 8001746:	212c      	movs	r1, #44	; 0x2c
 8001748:	6978      	ldr	r0, [r7, #20]
 800174a:	f00d fcff 	bl	800f14c <strchr>
 800174e:	4603      	mov	r3, r0
 8001750:	3301      	adds	r3, #1
 8001752:	617b      	str	r3, [r7, #20]
		if (!GPS_isEmpty(inst, p)) inst->angle = (float)atof(p);
 8001754:	6979      	ldr	r1, [r7, #20]
 8001756:	6878      	ldr	r0, [r7, #4]
 8001758:	f000 fb41 	bl	8001dde <GPS_isEmpty>
 800175c:	4603      	mov	r3, r0
 800175e:	f083 0301 	eor.w	r3, r3, #1
 8001762:	b2db      	uxtb	r3, r3
 8001764:	2b00      	cmp	r3, #0
 8001766:	d00b      	beq.n	8001780 <GPS_parse+0x34c>
 8001768:	6978      	ldr	r0, [r7, #20]
 800176a:	f00c fd7f 	bl	800e26c <atof>
 800176e:	ec54 3b10 	vmov	r3, r4, d0
 8001772:	4618      	mov	r0, r3
 8001774:	4621      	mov	r1, r4
 8001776:	f7ff fa47 	bl	8000c08 <__aeabi_d2f>
 800177a:	4602      	mov	r2, r0
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	661a      	str	r2, [r3, #96]	; 0x60

		p = strchr(p, ',') + 1;
 8001780:	212c      	movs	r1, #44	; 0x2c
 8001782:	6978      	ldr	r0, [r7, #20]
 8001784:	f00d fce2 	bl	800f14c <strchr>
 8001788:	4603      	mov	r3, r0
 800178a:	3301      	adds	r3, #1
 800178c:	617b      	str	r3, [r7, #20]
		if (!GPS_isEmpty(inst, p))
 800178e:	6979      	ldr	r1, [r7, #20]
 8001790:	6878      	ldr	r0, [r7, #4]
 8001792:	f000 fb24 	bl	8001dde <GPS_isEmpty>
 8001796:	4603      	mov	r3, r0
 8001798:	f083 0301 	eor.w	r3, r3, #1
 800179c:	b2db      	uxtb	r3, r3
 800179e:	2b00      	cmp	r3, #0
 80017a0:	f000 8196 	beq.w	8001ad0 <GPS_parse+0x69c>
		{
			uint32_t fulldate = (float)atof(p);
 80017a4:	6978      	ldr	r0, [r7, #20]
 80017a6:	f00c fd61 	bl	800e26c <atof>
 80017aa:	ec54 3b10 	vmov	r3, r4, d0
 80017ae:	4618      	mov	r0, r3
 80017b0:	4621      	mov	r1, r4
 80017b2:	f7ff fa29 	bl	8000c08 <__aeabi_d2f>
 80017b6:	ee07 0a90 	vmov	s15, r0
 80017ba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80017be:	ee17 3a90 	vmov	r3, s15
 80017c2:	60fb      	str	r3, [r7, #12]
			inst->gpsTime.dayM = fulldate / 10000;
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	4a8b      	ldr	r2, [pc, #556]	; (80019f4 <GPS_parse+0x5c0>)
 80017c8:	fba2 2303 	umull	r2, r3, r2, r3
 80017cc:	0b5b      	lsrs	r3, r3, #13
 80017ce:	b2da      	uxtb	r2, r3
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
			inst->gpsTime.month = (fulldate % 10000) / 100;
 80017d6:	68fa      	ldr	r2, [r7, #12]
 80017d8:	4b86      	ldr	r3, [pc, #536]	; (80019f4 <GPS_parse+0x5c0>)
 80017da:	fba3 1302 	umull	r1, r3, r3, r2
 80017de:	0b5b      	lsrs	r3, r3, #13
 80017e0:	f242 7110 	movw	r1, #10000	; 0x2710
 80017e4:	fb01 f303 	mul.w	r3, r1, r3
 80017e8:	1ad3      	subs	r3, r2, r3
 80017ea:	4a83      	ldr	r2, [pc, #524]	; (80019f8 <GPS_parse+0x5c4>)
 80017ec:	fba2 2303 	umull	r2, r3, r2, r3
 80017f0:	095b      	lsrs	r3, r3, #5
 80017f2:	b2da      	uxtb	r2, r3
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
			inst->gpsTime.year = (fulldate % 100);
 80017fa:	68fa      	ldr	r2, [r7, #12]
 80017fc:	4b7e      	ldr	r3, [pc, #504]	; (80019f8 <GPS_parse+0x5c4>)
 80017fe:	fba3 1302 	umull	r1, r3, r3, r2
 8001802:	095b      	lsrs	r3, r3, #5
 8001804:	2164      	movs	r1, #100	; 0x64
 8001806:	fb01 f303 	mul.w	r3, r1, r3
 800180a:	1ad3      	subs	r3, r2, r3
 800180c:	b2da      	uxtb	r2, r3
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
			inst->lastDate = inst->sentTime;
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
 8001820:	e156      	b.n	8001ad0 <GPS_parse+0x69c>
		}
	}

	else if (!strcmp(inst->thisSentence, "GLL"))
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	3307      	adds	r3, #7
 8001826:	4975      	ldr	r1, [pc, #468]	; (80019fc <GPS_parse+0x5c8>)
 8001828:	4618      	mov	r0, r3
 800182a:	f7fe fcd1 	bl	80001d0 <strcmp>
 800182e:	4603      	mov	r3, r0
 8001830:	2b00      	cmp	r3, #0
 8001832:	d153      	bne.n	80018dc <GPS_parse+0x4a8>
	{
		// found GLL
		// parse out latitude
		GPS_parseLat(inst, p);
 8001834:	6979      	ldr	r1, [r7, #20]
 8001836:	6878      	ldr	r0, [r7, #4]
 8001838:	f000 fb3a 	bl	8001eb0 <GPS_parseLat>
		p = strchr(p, ',') + 1;
 800183c:	212c      	movs	r1, #44	; 0x2c
 800183e:	6978      	ldr	r0, [r7, #20]
 8001840:	f00d fc84 	bl	800f14c <strchr>
 8001844:	4603      	mov	r3, r0
 8001846:	3301      	adds	r3, #1
 8001848:	617b      	str	r3, [r7, #20]
		if (!GPS_parseLatDir(inst, p)) return false;
 800184a:	6979      	ldr	r1, [r7, #20]
 800184c:	6878      	ldr	r0, [r7, #4]
 800184e:	f000 fbe5 	bl	800201c <GPS_parseLatDir>
 8001852:	4603      	mov	r3, r0
 8001854:	f083 0301 	eor.w	r3, r3, #1
 8001858:	b2db      	uxtb	r3, r3
 800185a:	2b00      	cmp	r3, #0
 800185c:	d001      	beq.n	8001862 <GPS_parse+0x42e>
 800185e:	2300      	movs	r3, #0
 8001860:	e14f      	b.n	8001b02 <GPS_parse+0x6ce>

		// parse out longitude
		p = strchr(p, ',') + 1;
 8001862:	212c      	movs	r1, #44	; 0x2c
 8001864:	6978      	ldr	r0, [r7, #20]
 8001866:	f00d fc71 	bl	800f14c <strchr>
 800186a:	4603      	mov	r3, r0
 800186c:	3301      	adds	r3, #1
 800186e:	617b      	str	r3, [r7, #20]
		GPS_parseLon(inst, p);
 8001870:	6979      	ldr	r1, [r7, #20]
 8001872:	6878      	ldr	r0, [r7, #4]
 8001874:	f000 fc12 	bl	800209c <GPS_parseLon>
		p = strchr(p, ',') + 1;
 8001878:	212c      	movs	r1, #44	; 0x2c
 800187a:	6978      	ldr	r0, [r7, #20]
 800187c:	f00d fc66 	bl	800f14c <strchr>
 8001880:	4603      	mov	r3, r0
 8001882:	3301      	adds	r3, #1
 8001884:	617b      	str	r3, [r7, #20]
		if (!GPS_parseLonDir(inst, p)) return false;
 8001886:	6979      	ldr	r1, [r7, #20]
 8001888:	6878      	ldr	r0, [r7, #4]
 800188a:	f000 fcaf 	bl	80021ec <GPS_parseLonDir>
 800188e:	4603      	mov	r3, r0
 8001890:	f083 0301 	eor.w	r3, r3, #1
 8001894:	b2db      	uxtb	r3, r3
 8001896:	2b00      	cmp	r3, #0
 8001898:	d001      	beq.n	800189e <GPS_parse+0x46a>
 800189a:	2300      	movs	r3, #0
 800189c:	e131      	b.n	8001b02 <GPS_parse+0x6ce>

		// get time
		p = strchr(p, ',') + 1;
 800189e:	212c      	movs	r1, #44	; 0x2c
 80018a0:	6978      	ldr	r0, [r7, #20]
 80018a2:	f00d fc53 	bl	800f14c <strchr>
 80018a6:	4603      	mov	r3, r0
 80018a8:	3301      	adds	r3, #1
 80018aa:	617b      	str	r3, [r7, #20]
		GPS_parseTime(inst, p);
 80018ac:	6979      	ldr	r1, [r7, #20]
 80018ae:	6878      	ldr	r0, [r7, #4]
 80018b0:	f000 faae 	bl	8001e10 <GPS_parseTime>

		// fix or no fix
		p = strchr(p, ',') + 1;
 80018b4:	212c      	movs	r1, #44	; 0x2c
 80018b6:	6978      	ldr	r0, [r7, #20]
 80018b8:	f00d fc48 	bl	800f14c <strchr>
 80018bc:	4603      	mov	r3, r0
 80018be:	3301      	adds	r3, #1
 80018c0:	617b      	str	r3, [r7, #20]
		if (!GPS_parseFix(inst, p)) return false;
 80018c2:	6979      	ldr	r1, [r7, #20]
 80018c4:	6878      	ldr	r0, [r7, #4]
 80018c6:	f000 fcda 	bl	800227e <GPS_parseFix>
 80018ca:	4603      	mov	r3, r0
 80018cc:	f083 0301 	eor.w	r3, r3, #1
 80018d0:	b2db      	uxtb	r3, r3
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	f000 80fc 	beq.w	8001ad0 <GPS_parse+0x69c>
 80018d8:	2300      	movs	r3, #0
 80018da:	e112      	b.n	8001b02 <GPS_parse+0x6ce>
	}

	else if (!strcmp(inst->thisSentence, "GSA"))
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	3307      	adds	r3, #7
 80018e0:	4947      	ldr	r1, [pc, #284]	; (8001a00 <GPS_parse+0x5cc>)
 80018e2:	4618      	mov	r0, r3
 80018e4:	f7fe fc74 	bl	80001d0 <strcmp>
 80018e8:	4603      	mov	r3, r0
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	f040 808a 	bne.w	8001a04 <GPS_parse+0x5d0>
	{
		// found GSA
		// parse out Auto selection, but ignore them
		// parse out 3d fixquality
		p = strchr(p, ',') + 1;
 80018f0:	212c      	movs	r1, #44	; 0x2c
 80018f2:	6978      	ldr	r0, [r7, #20]
 80018f4:	f00d fc2a 	bl	800f14c <strchr>
 80018f8:	4603      	mov	r3, r0
 80018fa:	3301      	adds	r3, #1
 80018fc:	617b      	str	r3, [r7, #20]
		if (!GPS_isEmpty(inst, p)) inst->fixquality_3d = atoi(p);
 80018fe:	6979      	ldr	r1, [r7, #20]
 8001900:	6878      	ldr	r0, [r7, #4]
 8001902:	f000 fa6c 	bl	8001dde <GPS_isEmpty>
 8001906:	4603      	mov	r3, r0
 8001908:	f083 0301 	eor.w	r3, r3, #1
 800190c:	b2db      	uxtb	r3, r3
 800190e:	2b00      	cmp	r3, #0
 8001910:	d007      	beq.n	8001922 <GPS_parse+0x4ee>
 8001912:	6978      	ldr	r0, [r7, #20]
 8001914:	f00c fcad 	bl	800e272 <atoi>
 8001918:	4603      	mov	r3, r0
 800191a:	b2da      	uxtb	r2, r3
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79
		// skip 12 Satellite PDNs without interpreting them
		for (int i = 0; i < 12; i++)
 8001922:	2300      	movs	r3, #0
 8001924:	613b      	str	r3, [r7, #16]
 8001926:	e009      	b.n	800193c <GPS_parse+0x508>
		{
			p = strchr(p, ',') + 1;
 8001928:	212c      	movs	r1, #44	; 0x2c
 800192a:	6978      	ldr	r0, [r7, #20]
 800192c:	f00d fc0e 	bl	800f14c <strchr>
 8001930:	4603      	mov	r3, r0
 8001932:	3301      	adds	r3, #1
 8001934:	617b      	str	r3, [r7, #20]
		for (int i = 0; i < 12; i++)
 8001936:	693b      	ldr	r3, [r7, #16]
 8001938:	3301      	adds	r3, #1
 800193a:	613b      	str	r3, [r7, #16]
 800193c:	693b      	ldr	r3, [r7, #16]
 800193e:	2b0b      	cmp	r3, #11
 8001940:	ddf2      	ble.n	8001928 <GPS_parse+0x4f4>
		}
		
		// parse out PDOP
		p = strchr(p, ',') + 1;
 8001942:	212c      	movs	r1, #44	; 0x2c
 8001944:	6978      	ldr	r0, [r7, #20]
 8001946:	f00d fc01 	bl	800f14c <strchr>
 800194a:	4603      	mov	r3, r0
 800194c:	3301      	adds	r3, #1
 800194e:	617b      	str	r3, [r7, #20]
		if (!GPS_isEmpty(inst, p)) inst->PDOP = (float)atof(p);
 8001950:	6979      	ldr	r1, [r7, #20]
 8001952:	6878      	ldr	r0, [r7, #4]
 8001954:	f000 fa43 	bl	8001dde <GPS_isEmpty>
 8001958:	4603      	mov	r3, r0
 800195a:	f083 0301 	eor.w	r3, r3, #1
 800195e:	b2db      	uxtb	r3, r3
 8001960:	2b00      	cmp	r3, #0
 8001962:	d00b      	beq.n	800197c <GPS_parse+0x548>
 8001964:	6978      	ldr	r0, [r7, #20]
 8001966:	f00c fc81 	bl	800e26c <atof>
 800196a:	ec54 3b10 	vmov	r3, r4, d0
 800196e:	4618      	mov	r0, r3
 8001970:	4621      	mov	r1, r4
 8001972:	f7ff f949 	bl	8000c08 <__aeabi_d2f>
 8001976:	4602      	mov	r2, r0
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	671a      	str	r2, [r3, #112]	; 0x70
		
		// parse out HDOP, we also parse this from the GGA sentence. Chipset should
		// report the same for both
		p = strchr(p, ',') + 1;
 800197c:	212c      	movs	r1, #44	; 0x2c
 800197e:	6978      	ldr	r0, [r7, #20]
 8001980:	f00d fbe4 	bl	800f14c <strchr>
 8001984:	4603      	mov	r3, r0
 8001986:	3301      	adds	r3, #1
 8001988:	617b      	str	r3, [r7, #20]
		if (!GPS_isEmpty(inst, p)) inst->HDOP = (float)atof(p);
 800198a:	6979      	ldr	r1, [r7, #20]
 800198c:	6878      	ldr	r0, [r7, #4]
 800198e:	f000 fa26 	bl	8001dde <GPS_isEmpty>
 8001992:	4603      	mov	r3, r0
 8001994:	f083 0301 	eor.w	r3, r3, #1
 8001998:	b2db      	uxtb	r3, r3
 800199a:	2b00      	cmp	r3, #0
 800199c:	d00b      	beq.n	80019b6 <GPS_parse+0x582>
 800199e:	6978      	ldr	r0, [r7, #20]
 80019a0:	f00c fc64 	bl	800e26c <atof>
 80019a4:	ec54 3b10 	vmov	r3, r4, d0
 80019a8:	4618      	mov	r0, r3
 80019aa:	4621      	mov	r1, r4
 80019ac:	f7ff f92c 	bl	8000c08 <__aeabi_d2f>
 80019b0:	4602      	mov	r2, r0
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	669a      	str	r2, [r3, #104]	; 0x68
		
		// parse out VDOP
		p = strchr(p, ',') + 1;
 80019b6:	212c      	movs	r1, #44	; 0x2c
 80019b8:	6978      	ldr	r0, [r7, #20]
 80019ba:	f00d fbc7 	bl	800f14c <strchr>
 80019be:	4603      	mov	r3, r0
 80019c0:	3301      	adds	r3, #1
 80019c2:	617b      	str	r3, [r7, #20]
		if (!GPS_isEmpty(inst, p)) inst->VDOP = (float)atof(p);
 80019c4:	6979      	ldr	r1, [r7, #20]
 80019c6:	6878      	ldr	r0, [r7, #4]
 80019c8:	f000 fa09 	bl	8001dde <GPS_isEmpty>
 80019cc:	4603      	mov	r3, r0
 80019ce:	f083 0301 	eor.w	r3, r3, #1
 80019d2:	b2db      	uxtb	r3, r3
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d07b      	beq.n	8001ad0 <GPS_parse+0x69c>
 80019d8:	6978      	ldr	r0, [r7, #20]
 80019da:	f00c fc47 	bl	800e26c <atof>
 80019de:	ec54 3b10 	vmov	r3, r4, d0
 80019e2:	4618      	mov	r0, r3
 80019e4:	4621      	mov	r1, r4
 80019e6:	f7ff f90f 	bl	8000c08 <__aeabi_d2f>
 80019ea:	4602      	mov	r2, r0
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	66da      	str	r2, [r3, #108]	; 0x6c
 80019f0:	e06e      	b.n	8001ad0 <GPS_parse+0x69c>
 80019f2:	bf00      	nop
 80019f4:	d1b71759 	.word	0xd1b71759
 80019f8:	51eb851f 	.word	0x51eb851f
 80019fc:	08011e60 	.word	0x08011e60
 8001a00:	08011e64 	.word	0x08011e64
	}

#ifdef NMEA_EXTENSIONS // Sentences not required for basic GPS functionality
	else if (!strcmp(inst->thisSentence, "TXT"))
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	3307      	adds	r3, #7
 8001a08:	4940      	ldr	r1, [pc, #256]	; (8001b0c <GPS_parse+0x6d8>)
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	f7fe fbe0 	bl	80001d0 <strcmp>
 8001a10:	4603      	mov	r3, r0
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d15a      	bne.n	8001acc <GPS_parse+0x698>
	{ //*******************************TXT
		if (!GPS_isEmpty(inst, p)) inst->txtTot = atoi(p);
 8001a16:	6979      	ldr	r1, [r7, #20]
 8001a18:	6878      	ldr	r0, [r7, #4]
 8001a1a:	f000 f9e0 	bl	8001dde <GPS_isEmpty>
 8001a1e:	4603      	mov	r3, r0
 8001a20:	f083 0301 	eor.w	r3, r3, #1
 8001a24:	b2db      	uxtb	r3, r3
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d006      	beq.n	8001a38 <GPS_parse+0x604>
 8001a2a:	6978      	ldr	r0, [r7, #20]
 8001a2c:	f00c fc21 	bl	800e272 <atoi>
 8001a30:	4602      	mov	r2, r0
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
		p = strchr(p, ',') + 1;
 8001a38:	212c      	movs	r1, #44	; 0x2c
 8001a3a:	6978      	ldr	r0, [r7, #20]
 8001a3c:	f00d fb86 	bl	800f14c <strchr>
 8001a40:	4603      	mov	r3, r0
 8001a42:	3301      	adds	r3, #1
 8001a44:	617b      	str	r3, [r7, #20]
		if (!GPS_isEmpty(inst, p)) inst->txtN = atoi(p);
 8001a46:	6979      	ldr	r1, [r7, #20]
 8001a48:	6878      	ldr	r0, [r7, #4]
 8001a4a:	f000 f9c8 	bl	8001dde <GPS_isEmpty>
 8001a4e:	4603      	mov	r3, r0
 8001a50:	f083 0301 	eor.w	r3, r3, #1
 8001a54:	b2db      	uxtb	r3, r3
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d006      	beq.n	8001a68 <GPS_parse+0x634>
 8001a5a:	6978      	ldr	r0, [r7, #20]
 8001a5c:	f00c fc09 	bl	800e272 <atoi>
 8001a60:	4602      	mov	r2, r0
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
		p = strchr(p, ',') + 1;
 8001a68:	212c      	movs	r1, #44	; 0x2c
 8001a6a:	6978      	ldr	r0, [r7, #20]
 8001a6c:	f00d fb6e 	bl	800f14c <strchr>
 8001a70:	4603      	mov	r3, r0
 8001a72:	3301      	adds	r3, #1
 8001a74:	617b      	str	r3, [r7, #20]
		if (!GPS_isEmpty(inst, p)) inst->txtID = atoi(p);
 8001a76:	6979      	ldr	r1, [r7, #20]
 8001a78:	6878      	ldr	r0, [r7, #4]
 8001a7a:	f000 f9b0 	bl	8001dde <GPS_isEmpty>
 8001a7e:	4603      	mov	r3, r0
 8001a80:	f083 0301 	eor.w	r3, r3, #1
 8001a84:	b2db      	uxtb	r3, r3
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d006      	beq.n	8001a98 <GPS_parse+0x664>
 8001a8a:	6978      	ldr	r0, [r7, #20]
 8001a8c:	f00c fbf1 	bl	800e272 <atoi>
 8001a90:	4602      	mov	r2, r0
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
		p = strchr(p, ',') + 1;
 8001a98:	212c      	movs	r1, #44	; 0x2c
 8001a9a:	6978      	ldr	r0, [r7, #20]
 8001a9c:	f00d fb56 	bl	800f14c <strchr>
 8001aa0:	4603      	mov	r3, r0
 8001aa2:	3301      	adds	r3, #1
 8001aa4:	617b      	str	r3, [r7, #20]
		if (!GPS_isEmpty(inst, p)) GPS_parseStr(inst, inst->txtTXT, p, 61); // copy the text to NMEA TXT max of 61 characters
 8001aa6:	6979      	ldr	r1, [r7, #20]
 8001aa8:	6878      	ldr	r0, [r7, #4]
 8001aaa:	f000 f998 	bl	8001dde <GPS_isEmpty>
 8001aae:	4603      	mov	r3, r0
 8001ab0:	f083 0301 	eor.w	r3, r3, #1
 8001ab4:	b2db      	uxtb	r3, r3
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d00a      	beq.n	8001ad0 <GPS_parse+0x69c>
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	f103 0188 	add.w	r1, r3, #136	; 0x88
 8001ac0:	233d      	movs	r3, #61	; 0x3d
 8001ac2:	697a      	ldr	r2, [r7, #20]
 8001ac4:	6878      	ldr	r0, [r7, #4]
 8001ac6:	f000 f923 	bl	8001d10 <GPS_parseStr>
 8001aca:	e001      	b.n	8001ad0 <GPS_parse+0x69c>
	}
#endif // NMEA_EXTENSIONS

	// we dont parse the remaining, yet!
	else return false;
 8001acc:	2300      	movs	r3, #0
 8001ace:	e018      	b.n	8001b02 <GPS_parse+0x6ce>

	// Record the successful parsing of where the last data came from and when
	strcpy(inst->lastSource, inst->thisSource);
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	f103 021b 	add.w	r2, r3, #27
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	3304      	adds	r3, #4
 8001ada:	4619      	mov	r1, r3
 8001adc:	4610      	mov	r0, r2
 8001ade:	f00d fb42 	bl	800f166 <strcpy>
	strcpy(inst->lastSentence, inst->thisSentence);
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	f103 021e 	add.w	r2, r3, #30
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	3307      	adds	r3, #7
 8001aec:	4619      	mov	r1, r3
 8001aee:	4610      	mov	r0, r2
 8001af0:	f00d fb39 	bl	800f166 <strcpy>
	inst->lastUpdate = millis();
 8001af4:	f7ff faa6 	bl	8001044 <millis>
 8001af8:	4602      	mov	r2, r0
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
	return true;
 8001b00:	2301      	movs	r3, #1
}
 8001b02:	4618      	mov	r0, r3
 8001b04:	371c      	adds	r7, #28
 8001b06:	46bd      	mov	sp, r7
 8001b08:	bd90      	pop	{r4, r7, pc}
 8001b0a:	bf00      	nop
 8001b0c:	08011ec4 	.word	0x08011ec4

08001b10 <GPS_check>:
		@param nmea Pointer to the NMEA string
		@return True if well formed, false if it has problems
*/
/**************************************************************************/
bool GPS_check(GPS* inst, char* nmea)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	b08a      	sub	sp, #40	; 0x28
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	6078      	str	r0, [r7, #4]
 8001b18:	6039      	str	r1, [r7, #0]
	inst->thisCheck = 0; // new check
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	601a      	str	r2, [r3, #0]
	if (*nmea != '$') return false; // doesn't start with $
 8001b20:	683b      	ldr	r3, [r7, #0]
 8001b22:	781b      	ldrb	r3, [r3, #0]
 8001b24:	2b24      	cmp	r3, #36	; 0x24
 8001b26:	d001      	beq.n	8001b2c <GPS_check+0x1c>
 8001b28:	2300      	movs	r3, #0
 8001b2a:	e0ad      	b.n	8001c88 <GPS_check+0x178>
	else inst->thisCheck += NMEA_HAS_DOLLAR;
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	1c5a      	adds	r2, r3, #1
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	601a      	str	r2, [r3, #0]
	// do checksum check -- first look if we even have one -- ignore all but last
	//* 
	char* ast = nmea; // not strchr(nmea,'*'); for first* 
 8001b36:	683b      	ldr	r3, [r7, #0]
 8001b38:	627b      	str	r3, [r7, #36]	; 0x24
	while (*ast) ast++; // go to the end
 8001b3a:	e002      	b.n	8001b42 <GPS_check+0x32>
 8001b3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b3e:	3301      	adds	r3, #1
 8001b40:	627b      	str	r3, [r7, #36]	; 0x24
 8001b42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b44:	781b      	ldrb	r3, [r3, #0]
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d1f8      	bne.n	8001b3c <GPS_check+0x2c>
	while (*ast != '*' && ast > nmea) ast--; // then back to*	if it's there
 8001b4a:	e002      	b.n	8001b52 <GPS_check+0x42>
 8001b4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b4e:	3b01      	subs	r3, #1
 8001b50:	627b      	str	r3, [r7, #36]	; 0x24
 8001b52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b54:	781b      	ldrb	r3, [r3, #0]
 8001b56:	2b2a      	cmp	r3, #42	; 0x2a
 8001b58:	d003      	beq.n	8001b62 <GPS_check+0x52>
 8001b5a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b5c:	683b      	ldr	r3, [r7, #0]
 8001b5e:	429a      	cmp	r2, r3
 8001b60:	d8f4      	bhi.n	8001b4c <GPS_check+0x3c>
	if (*ast != '*') return false; // there is no asterisk
 8001b62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b64:	781b      	ldrb	r3, [r3, #0]
 8001b66:	2b2a      	cmp	r3, #42	; 0x2a
 8001b68:	d001      	beq.n	8001b6e <GPS_check+0x5e>
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	e08c      	b.n	8001c88 <GPS_check+0x178>
	else
	{
		uint16_t sum = GPS_parseHex(inst, *(ast + 1)) * 16; // extract checksum
 8001b6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b70:	3301      	adds	r3, #1
 8001b72:	781b      	ldrb	r3, [r3, #0]
 8001b74:	4619      	mov	r1, r3
 8001b76:	6878      	ldr	r0, [r7, #4]
 8001b78:	f000 fbc6 	bl	8002308 <GPS_parseHex>
 8001b7c:	4603      	mov	r3, r0
 8001b7e:	b29b      	uxth	r3, r3
 8001b80:	011b      	lsls	r3, r3, #4
 8001b82:	847b      	strh	r3, [r7, #34]	; 0x22
		sum += GPS_parseHex(inst, *(ast + 2));
 8001b84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b86:	3302      	adds	r3, #2
 8001b88:	781b      	ldrb	r3, [r3, #0]
 8001b8a:	4619      	mov	r1, r3
 8001b8c:	6878      	ldr	r0, [r7, #4]
 8001b8e:	f000 fbbb 	bl	8002308 <GPS_parseHex>
 8001b92:	4603      	mov	r3, r0
 8001b94:	b29a      	uxth	r2, r3
 8001b96:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001b98:	4413      	add	r3, r2
 8001b9a:	847b      	strh	r3, [r7, #34]	; 0x22
		char* p = nmea; // check checksum
 8001b9c:	683b      	ldr	r3, [r7, #0]
 8001b9e:	61bb      	str	r3, [r7, #24]
		for (char* p1 = p + 1; p1 < ast; p1++)
 8001ba0:	69bb      	ldr	r3, [r7, #24]
 8001ba2:	3301      	adds	r3, #1
 8001ba4:	61fb      	str	r3, [r7, #28]
 8001ba6:	e008      	b.n	8001bba <GPS_check+0xaa>
		{
			sum ^=* p1;
 8001ba8:	69fb      	ldr	r3, [r7, #28]
 8001baa:	781b      	ldrb	r3, [r3, #0]
 8001bac:	b29a      	uxth	r2, r3
 8001bae:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001bb0:	4053      	eors	r3, r2
 8001bb2:	847b      	strh	r3, [r7, #34]	; 0x22
		for (char* p1 = p + 1; p1 < ast; p1++)
 8001bb4:	69fb      	ldr	r3, [r7, #28]
 8001bb6:	3301      	adds	r3, #1
 8001bb8:	61fb      	str	r3, [r7, #28]
 8001bba:	69fa      	ldr	r2, [r7, #28]
 8001bbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bbe:	429a      	cmp	r2, r3
 8001bc0:	d3f2      	bcc.n	8001ba8 <GPS_check+0x98>
		}
		if (sum != 0) return false; // bad checksum :(
 8001bc2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d001      	beq.n	8001bcc <GPS_check+0xbc>
 8001bc8:	2300      	movs	r3, #0
 8001bca:	e05d      	b.n	8001c88 <GPS_check+0x178>
		else inst->thisCheck += NMEA_HAS_CHECKSUM;
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	1c9a      	adds	r2, r3, #2
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	601a      	str	r2, [r3, #0]
	}
	// extract source of variable length
	char* p = nmea + 1;
 8001bd6:	683b      	ldr	r3, [r7, #0]
 8001bd8:	3301      	adds	r3, #1
 8001bda:	617b      	str	r3, [r7, #20]
	const char* src = GPS_tokenOnList(inst, p, inst->sources);
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	f503 73ec 	add.w	r3, r3, #472	; 0x1d8
 8001be2:	461a      	mov	r2, r3
 8001be4:	6979      	ldr	r1, [r7, #20]
 8001be6:	6878      	ldr	r0, [r7, #4]
 8001be8:	f000 f852 	bl	8001c90 <GPS_tokenOnList>
 8001bec:	6138      	str	r0, [r7, #16]
	if (src)
 8001bee:	693b      	ldr	r3, [r7, #16]
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d01f      	beq.n	8001c34 <GPS_check+0x124>
	{
		strcpy(inst->thisSource, src);
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	3304      	adds	r3, #4
 8001bf8:	6939      	ldr	r1, [r7, #16]
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	f00d fab3 	bl	800f166 <strcpy>
		inst->thisCheck += NMEA_HAS_SOURCE;
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	f103 020a 	add.w	r2, r3, #10
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	601a      	str	r2, [r3, #0]
	}
	else return false;
	p += strlen(src);
 8001c0c:	6938      	ldr	r0, [r7, #16]
 8001c0e:	f7fe fae9 	bl	80001e4 <strlen>
 8001c12:	4602      	mov	r2, r0
 8001c14:	697b      	ldr	r3, [r7, #20]
 8001c16:	4413      	add	r3, r2
 8001c18:	617b      	str	r3, [r7, #20]
	// extract sentence id and check if parsed
	const char* snc = GPS_tokenOnList(inst, p, inst->sentences_parsed);
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8001c20:	461a      	mov	r2, r3
 8001c22:	6979      	ldr	r1, [r7, #20]
 8001c24:	6878      	ldr	r0, [r7, #4]
 8001c26:	f000 f833 	bl	8001c90 <GPS_tokenOnList>
 8001c2a:	60f8      	str	r0, [r7, #12]
	if (snc)
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d00f      	beq.n	8001c52 <GPS_check+0x142>
 8001c32:	e001      	b.n	8001c38 <GPS_check+0x128>
	else return false;
 8001c34:	2300      	movs	r3, #0
 8001c36:	e027      	b.n	8001c88 <GPS_check+0x178>
	{
		strcpy(inst->thisSentence, snc);
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	3307      	adds	r3, #7
 8001c3c:	68f9      	ldr	r1, [r7, #12]
 8001c3e:	4618      	mov	r0, r3
 8001c40:	f00d fa91 	bl	800f166 <strcpy>
		inst->thisCheck += NMEA_HAS_SENTENCE_P + NMEA_HAS_SENTENCE;
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	601a      	str	r2, [r3, #0]
 8001c50:	e019      	b.n	8001c86 <GPS_check+0x176>
	}
	else
	{ // check if known
		snc = GPS_tokenOnList(inst, p, inst->sentences_known);
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8001c58:	461a      	mov	r2, r3
 8001c5a:	6979      	ldr	r1, [r7, #20]
 8001c5c:	6878      	ldr	r0, [r7, #4]
 8001c5e:	f000 f817 	bl	8001c90 <GPS_tokenOnList>
 8001c62:	60f8      	str	r0, [r7, #12]
		if (snc)
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d00d      	beq.n	8001c86 <GPS_check+0x176>
		{
			strcpy(inst->thisSentence, snc);
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	3307      	adds	r3, #7
 8001c6e:	68f9      	ldr	r1, [r7, #12]
 8001c70:	4618      	mov	r0, r3
 8001c72:	f00d fa78 	bl	800f166 <strcpy>
			inst->thisCheck += NMEA_HAS_SENTENCE;
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	f103 0214 	add.w	r2, r3, #20
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	601a      	str	r2, [r3, #0]
			return false;
 8001c82:	2300      	movs	r3, #0
 8001c84:	e000      	b.n	8001c88 <GPS_check+0x178>
		}
	}
	return true; // passed all the tests
 8001c86:	2301      	movs	r3, #1
}
 8001c88:	4618      	mov	r0, r3
 8001c8a:	3728      	adds	r7, #40	; 0x28
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	bd80      	pop	{r7, pc}

08001c90 <GPS_tokenOnList>:
		@param list A list of strings, with the final entry starting "ZZ"
		@return Pointer to the found token, or NULL if it fails
*/
/**************************************************************************/
const char* GPS_tokenOnList(GPS* inst, char* token, const char* *list)
{
 8001c90:	b590      	push	{r4, r7, lr}
 8001c92:	b087      	sub	sp, #28
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	60f8      	str	r0, [r7, #12]
 8001c98:	60b9      	str	r1, [r7, #8]
 8001c9a:	607a      	str	r2, [r7, #4]
	int i = 0; // index in the list
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	617b      	str	r3, [r7, #20]
	while (strncmp(list[i], "ZZ", 2) && i < 1000)
 8001ca0:	e01e      	b.n	8001ce0 <GPS_tokenOnList+0x50>
	{ // stop at terminator and don't crash without it
		// test for a match on the sentence name
		if (!strncmp((const char* )list[i], (const char* )token, strlen(list[i]))) return list[i];
 8001ca2:	697b      	ldr	r3, [r7, #20]
 8001ca4:	009b      	lsls	r3, r3, #2
 8001ca6:	687a      	ldr	r2, [r7, #4]
 8001ca8:	4413      	add	r3, r2
 8001caa:	681c      	ldr	r4, [r3, #0]
 8001cac:	697b      	ldr	r3, [r7, #20]
 8001cae:	009b      	lsls	r3, r3, #2
 8001cb0:	687a      	ldr	r2, [r7, #4]
 8001cb2:	4413      	add	r3, r2
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	4618      	mov	r0, r3
 8001cb8:	f7fe fa94 	bl	80001e4 <strlen>
 8001cbc:	4603      	mov	r3, r0
 8001cbe:	461a      	mov	r2, r3
 8001cc0:	68b9      	ldr	r1, [r7, #8]
 8001cc2:	4620      	mov	r0, r4
 8001cc4:	f00d fa57 	bl	800f176 <strncmp>
 8001cc8:	4603      	mov	r3, r0
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d105      	bne.n	8001cda <GPS_tokenOnList+0x4a>
 8001cce:	697b      	ldr	r3, [r7, #20]
 8001cd0:	009b      	lsls	r3, r3, #2
 8001cd2:	687a      	ldr	r2, [r7, #4]
 8001cd4:	4413      	add	r3, r2
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	e014      	b.n	8001d04 <GPS_tokenOnList+0x74>
		i++;
 8001cda:	697b      	ldr	r3, [r7, #20]
 8001cdc:	3301      	adds	r3, #1
 8001cde:	617b      	str	r3, [r7, #20]
	while (strncmp(list[i], "ZZ", 2) && i < 1000)
 8001ce0:	697b      	ldr	r3, [r7, #20]
 8001ce2:	009b      	lsls	r3, r3, #2
 8001ce4:	687a      	ldr	r2, [r7, #4]
 8001ce6:	4413      	add	r3, r2
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	2202      	movs	r2, #2
 8001cec:	4907      	ldr	r1, [pc, #28]	; (8001d0c <GPS_tokenOnList+0x7c>)
 8001cee:	4618      	mov	r0, r3
 8001cf0:	f00d fa41 	bl	800f176 <strncmp>
 8001cf4:	4603      	mov	r3, r0
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d003      	beq.n	8001d02 <GPS_tokenOnList+0x72>
 8001cfa:	697b      	ldr	r3, [r7, #20]
 8001cfc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001d00:	dbcf      	blt.n	8001ca2 <GPS_tokenOnList+0x12>
	}
	return NULL; // couldn't find a match
 8001d02:	2300      	movs	r3, #0
}
 8001d04:	4618      	mov	r0, r3
 8001d06:	371c      	adds	r7, #28
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	bd90      	pop	{r4, r7, pc}
 8001d0c:	08011ec8 	.word	0x08011ec8

08001d10 <GPS_parseStr>:
		@param n Max permitted size of string including terminating 0
		@return Pointer to the string buffer
*/
/**************************************************************************/
char* GPS_parseStr(GPS* inst, char* buff, char* p, int n)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	b08c      	sub	sp, #48	; 0x30
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	60f8      	str	r0, [r7, #12]
 8001d18:	60b9      	str	r1, [r7, #8]
 8001d1a:	607a      	str	r2, [r7, #4]
 8001d1c:	603b      	str	r3, [r7, #0]
	char* e = strchr(p, ',');
 8001d1e:	212c      	movs	r1, #44	; 0x2c
 8001d20:	6878      	ldr	r0, [r7, #4]
 8001d22:	f00d fa13 	bl	800f14c <strchr>
 8001d26:	62f8      	str	r0, [r7, #44]	; 0x2c
	int len = 0;
 8001d28:	2300      	movs	r3, #0
 8001d2a:	62bb      	str	r3, [r7, #40]	; 0x28
	if (e) 
 8001d2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d018      	beq.n	8001d64 <GPS_parseStr+0x54>
	{
		len = min(e - p, n - 1);
 8001d32:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	1ad3      	subs	r3, r2, r3
 8001d38:	617b      	str	r3, [r7, #20]
 8001d3a:	683b      	ldr	r3, [r7, #0]
 8001d3c:	3b01      	subs	r3, #1
 8001d3e:	613b      	str	r3, [r7, #16]
 8001d40:	693a      	ldr	r2, [r7, #16]
 8001d42:	697b      	ldr	r3, [r7, #20]
 8001d44:	4293      	cmp	r3, r2
 8001d46:	bfa8      	it	ge
 8001d48:	4613      	movge	r3, r2
 8001d4a:	62bb      	str	r3, [r7, #40]	; 0x28
		strncpy(buff, p, len); // copy up to the comma
 8001d4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d4e:	461a      	mov	r2, r3
 8001d50:	6879      	ldr	r1, [r7, #4]
 8001d52:	68b8      	ldr	r0, [r7, #8]
 8001d54:	f00d fa21 	bl	800f19a <strncpy>
		buff[len] = 0;
 8001d58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d5a:	68ba      	ldr	r2, [r7, #8]
 8001d5c:	4413      	add	r3, r2
 8001d5e:	2200      	movs	r2, #0
 8001d60:	701a      	strb	r2, [r3, #0]
 8001d62:	e037      	b.n	8001dd4 <GPS_parseStr+0xc4>
	}
	else
	{
		e = strchr(p, '*');
 8001d64:	212a      	movs	r1, #42	; 0x2a
 8001d66:	6878      	ldr	r0, [r7, #4]
 8001d68:	f00d f9f0 	bl	800f14c <strchr>
 8001d6c:	62f8      	str	r0, [r7, #44]	; 0x2c
		if (e)
 8001d6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d01b      	beq.n	8001dac <GPS_parseStr+0x9c>
		{
			len = min(e - p, n - 1);
 8001d74:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	1ad3      	subs	r3, r2, r3
 8001d7a:	61fb      	str	r3, [r7, #28]
 8001d7c:	683b      	ldr	r3, [r7, #0]
 8001d7e:	3b01      	subs	r3, #1
 8001d80:	61bb      	str	r3, [r7, #24]
 8001d82:	69ba      	ldr	r2, [r7, #24]
 8001d84:	69fb      	ldr	r3, [r7, #28]
 8001d86:	4293      	cmp	r3, r2
 8001d88:	bfa8      	it	ge
 8001d8a:	4613      	movge	r3, r2
 8001d8c:	62bb      	str	r3, [r7, #40]	; 0x28
			strncpy(buff, p, len); // or up to the* 
 8001d8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d90:	461a      	mov	r2, r3
 8001d92:	6879      	ldr	r1, [r7, #4]
 8001d94:	68b8      	ldr	r0, [r7, #8]
 8001d96:	f00d fa00 	bl	800f19a <strncpy>
			buff[e - p] = 0;
 8001d9a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	1ad3      	subs	r3, r2, r3
 8001da0:	461a      	mov	r2, r3
 8001da2:	68bb      	ldr	r3, [r7, #8]
 8001da4:	4413      	add	r3, r2
 8001da6:	2200      	movs	r2, #0
 8001da8:	701a      	strb	r2, [r3, #0]
 8001daa:	e013      	b.n	8001dd4 <GPS_parseStr+0xc4>
		}
		else
		{
			len = min((int)strlen(p), n - 1);
 8001dac:	6878      	ldr	r0, [r7, #4]
 8001dae:	f7fe fa19 	bl	80001e4 <strlen>
 8001db2:	4603      	mov	r3, r0
 8001db4:	627b      	str	r3, [r7, #36]	; 0x24
 8001db6:	683b      	ldr	r3, [r7, #0]
 8001db8:	3b01      	subs	r3, #1
 8001dba:	623b      	str	r3, [r7, #32]
 8001dbc:	6a3a      	ldr	r2, [r7, #32]
 8001dbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dc0:	4293      	cmp	r3, r2
 8001dc2:	bfa8      	it	ge
 8001dc4:	4613      	movge	r3, r2
 8001dc6:	62bb      	str	r3, [r7, #40]	; 0x28
			strncpy(buff, p, len); // or to the end or max capacity
 8001dc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001dca:	461a      	mov	r2, r3
 8001dcc:	6879      	ldr	r1, [r7, #4]
 8001dce:	68b8      	ldr	r0, [r7, #8]
 8001dd0:	f00d f9e3 	bl	800f19a <strncpy>
		}
	}
	return buff;
 8001dd4:	68bb      	ldr	r3, [r7, #8]
}
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	3730      	adds	r7, #48	; 0x30
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	bd80      	pop	{r7, pc}

08001dde <GPS_isEmpty>:
		@param pStart Pointer to the location of the token in the NMEA string
		@return true if empty field, false if something there
*/
/**************************************************************************/
bool GPS_isEmpty(GPS* inst, char* pStart)
{
 8001dde:	b480      	push	{r7}
 8001de0:	b083      	sub	sp, #12
 8001de2:	af00      	add	r7, sp, #0
 8001de4:	6078      	str	r0, [r7, #4]
 8001de6:	6039      	str	r1, [r7, #0]
	if (',' !=* pStart && '*' !=* pStart && pStart != NULL) return false;
 8001de8:	683b      	ldr	r3, [r7, #0]
 8001dea:	781b      	ldrb	r3, [r3, #0]
 8001dec:	2b2c      	cmp	r3, #44	; 0x2c
 8001dee:	d008      	beq.n	8001e02 <GPS_isEmpty+0x24>
 8001df0:	683b      	ldr	r3, [r7, #0]
 8001df2:	781b      	ldrb	r3, [r3, #0]
 8001df4:	2b2a      	cmp	r3, #42	; 0x2a
 8001df6:	d004      	beq.n	8001e02 <GPS_isEmpty+0x24>
 8001df8:	683b      	ldr	r3, [r7, #0]
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d001      	beq.n	8001e02 <GPS_isEmpty+0x24>
 8001dfe:	2300      	movs	r3, #0
 8001e00:	e000      	b.n	8001e04 <GPS_isEmpty+0x26>
	else return true;
 8001e02:	2301      	movs	r3, #1
}
 8001e04:	4618      	mov	r0, r3
 8001e06:	370c      	adds	r7, #12
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0e:	4770      	bx	lr

08001e10 <GPS_parseTime>:
		@brief Parse a part of an NMEA string for time
		@param p Pointer to the location of the token in the NMEA string
*/
/**************************************************************************/
void GPS_parseTime(GPS* inst, char* p)
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	b084      	sub	sp, #16
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	6078      	str	r0, [r7, #4]
 8001e18:	6039      	str	r1, [r7, #0]
	// get time
	uint32_t time = atol(p);
 8001e1a:	6838      	ldr	r0, [r7, #0]
 8001e1c:	f00c fa2d 	bl	800e27a <atol>
 8001e20:	4603      	mov	r3, r0
 8001e22:	60fb      	str	r3, [r7, #12]
	inst->gpsTime.hour = time / 10000;
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	4a1f      	ldr	r2, [pc, #124]	; (8001ea4 <GPS_parseTime+0x94>)
 8001e28:	fba2 2303 	umull	r2, r3, r2, r3
 8001e2c:	0b5b      	lsrs	r3, r3, #13
 8001e2e:	b2da      	uxtb	r2, r3
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
	inst->gpsTime.minute = (time % 10000) / 100;
 8001e36:	68fa      	ldr	r2, [r7, #12]
 8001e38:	4b1a      	ldr	r3, [pc, #104]	; (8001ea4 <GPS_parseTime+0x94>)
 8001e3a:	fba3 1302 	umull	r1, r3, r3, r2
 8001e3e:	0b5b      	lsrs	r3, r3, #13
 8001e40:	f242 7110 	movw	r1, #10000	; 0x2710
 8001e44:	fb01 f303 	mul.w	r3, r1, r3
 8001e48:	1ad3      	subs	r3, r2, r3
 8001e4a:	4a17      	ldr	r2, [pc, #92]	; (8001ea8 <GPS_parseTime+0x98>)
 8001e4c:	fba2 2303 	umull	r2, r3, r2, r3
 8001e50:	095b      	lsrs	r3, r3, #5
 8001e52:	b2da      	uxtb	r2, r3
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
	inst->gpsTime.second = (time % 100);
 8001e5a:	68fa      	ldr	r2, [r7, #12]
 8001e5c:	4b12      	ldr	r3, [pc, #72]	; (8001ea8 <GPS_parseTime+0x98>)
 8001e5e:	fba3 1302 	umull	r1, r3, r3, r2
 8001e62:	095b      	lsrs	r3, r3, #5
 8001e64:	2164      	movs	r1, #100	; 0x64
 8001e66:	fb01 f303 	mul.w	r3, r1, r3
 8001e6a:	1ad3      	subs	r3, r2, r3
 8001e6c:	b2da      	uxtb	r2, r3
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

	p = strchr(p, '.') + 1;
 8001e74:	212e      	movs	r1, #46	; 0x2e
 8001e76:	6838      	ldr	r0, [r7, #0]
 8001e78:	f00d f968 	bl	800f14c <strchr>
 8001e7c:	4603      	mov	r3, r0
 8001e7e:	3301      	adds	r3, #1
 8001e80:	603b      	str	r3, [r7, #0]
	inst->gpsTime.msecond = (uint32_t)atoi(p);
 8001e82:	6838      	ldr	r0, [r7, #0]
 8001e84:	f00c f9f5 	bl	800e272 <atoi>
 8001e88:	4603      	mov	r3, r0
 8001e8a:	b29a      	uxth	r2, r3
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	875a      	strh	r2, [r3, #58]	; 0x3a
	inst->lastTime = inst->sentTime;
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
}
 8001e9c:	bf00      	nop
 8001e9e:	3710      	adds	r7, #16
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	bd80      	pop	{r7, pc}
 8001ea4:	d1b71759 	.word	0xd1b71759
 8001ea8:	51eb851f 	.word	0x51eb851f
 8001eac:	00000000 	.word	0x00000000

08001eb0 <GPS_parseLat>:
		@brief Parse a part of an NMEA string for latitude angle
		@param p Pointer to the location of the token in the NMEA string
*/
/**************************************************************************/
void GPS_parseLat(GPS* inst, char* p)
{
 8001eb0:	b5b0      	push	{r4, r5, r7, lr}
 8001eb2:	b088      	sub	sp, #32
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]
 8001eb8:	6039      	str	r1, [r7, #0]
	//int32_t degree;
	//long minutes;
	char degreebuff[10];
	if (!GPS_isEmpty(inst, p))
 8001eba:	6839      	ldr	r1, [r7, #0]
 8001ebc:	6878      	ldr	r0, [r7, #4]
 8001ebe:	f7ff ff8e 	bl	8001dde <GPS_isEmpty>
 8001ec2:	4603      	mov	r3, r0
 8001ec4:	f083 0301 	eor.w	r3, r3, #1
 8001ec8:	b2db      	uxtb	r3, r3
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	f000 8092 	beq.w	8001ff4 <GPS_parseLat+0x144>
	{
		strncpy(degreebuff, p, 2);
 8001ed0:	f107 030c 	add.w	r3, r7, #12
 8001ed4:	2202      	movs	r2, #2
 8001ed6:	6839      	ldr	r1, [r7, #0]
 8001ed8:	4618      	mov	r0, r3
 8001eda:	f00d f95e 	bl	800f19a <strncpy>
		p += 2;
 8001ede:	683b      	ldr	r3, [r7, #0]
 8001ee0:	3302      	adds	r3, #2
 8001ee2:	603b      	str	r3, [r7, #0]
		degreebuff[2] = '\0';
 8001ee4:	2300      	movs	r3, #0
 8001ee6:	73bb      	strb	r3, [r7, #14]
		long degree = atol(degreebuff) * 10000000;
 8001ee8:	f107 030c 	add.w	r3, r7, #12
 8001eec:	4618      	mov	r0, r3
 8001eee:	f00c f9c4 	bl	800e27a <atol>
 8001ef2:	4602      	mov	r2, r0
 8001ef4:	4b44      	ldr	r3, [pc, #272]	; (8002008 <GPS_parseLat+0x158>)
 8001ef6:	fb03 f302 	mul.w	r3, r3, r2
 8001efa:	61fb      	str	r3, [r7, #28]
		strncpy(degreebuff, p, 2); // minutes
 8001efc:	f107 030c 	add.w	r3, r7, #12
 8001f00:	2202      	movs	r2, #2
 8001f02:	6839      	ldr	r1, [r7, #0]
 8001f04:	4618      	mov	r0, r3
 8001f06:	f00d f948 	bl	800f19a <strncpy>
		p += 3;										// skip decimal point
 8001f0a:	683b      	ldr	r3, [r7, #0]
 8001f0c:	3303      	adds	r3, #3
 8001f0e:	603b      	str	r3, [r7, #0]
		strncpy(degreebuff + 2, p, 4);
 8001f10:	f107 030c 	add.w	r3, r7, #12
 8001f14:	3302      	adds	r3, #2
 8001f16:	2204      	movs	r2, #4
 8001f18:	6839      	ldr	r1, [r7, #0]
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	f00d f93d 	bl	800f19a <strncpy>
		degreebuff[6] = '\0';
 8001f20:	2300      	movs	r3, #0
 8001f22:	74bb      	strb	r3, [r7, #18]
		long minutes = 50*	atol(degreebuff) / 3;
 8001f24:	f107 030c 	add.w	r3, r7, #12
 8001f28:	4618      	mov	r0, r3
 8001f2a:	f00c f9a6 	bl	800e27a <atol>
 8001f2e:	4602      	mov	r2, r0
 8001f30:	2332      	movs	r3, #50	; 0x32
 8001f32:	fb03 f302 	mul.w	r3, r3, r2
 8001f36:	4a35      	ldr	r2, [pc, #212]	; (800200c <GPS_parseLat+0x15c>)
 8001f38:	fb82 1203 	smull	r1, r2, r2, r3
 8001f3c:	17db      	asrs	r3, r3, #31
 8001f3e:	1ad3      	subs	r3, r2, r3
 8001f40:	61bb      	str	r3, [r7, #24]
		inst->latitude_fixed = degree + minutes;
 8001f42:	69fa      	ldr	r2, [r7, #28]
 8001f44:	69bb      	ldr	r3, [r7, #24]
 8001f46:	441a      	add	r2, r3
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	645a      	str	r2, [r3, #68]	; 0x44
		inst->latitude = degree / 100000 + minutes * 0.000006;
 8001f4c:	69fb      	ldr	r3, [r7, #28]
 8001f4e:	4a30      	ldr	r2, [pc, #192]	; (8002010 <GPS_parseLat+0x160>)
 8001f50:	fb82 1203 	smull	r1, r2, r2, r3
 8001f54:	1352      	asrs	r2, r2, #13
 8001f56:	17db      	asrs	r3, r3, #31
 8001f58:	1ad3      	subs	r3, r2, r3
 8001f5a:	4618      	mov	r0, r3
 8001f5c:	f7fe faf2 	bl	8000544 <__aeabi_i2d>
 8001f60:	4604      	mov	r4, r0
 8001f62:	460d      	mov	r5, r1
 8001f64:	69b8      	ldr	r0, [r7, #24]
 8001f66:	f7fe faed 	bl	8000544 <__aeabi_i2d>
 8001f6a:	a325      	add	r3, pc, #148	; (adr r3, 8002000 <GPS_parseLat+0x150>)
 8001f6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f70:	f7fe fb52 	bl	8000618 <__aeabi_dmul>
 8001f74:	4602      	mov	r2, r0
 8001f76:	460b      	mov	r3, r1
 8001f78:	4620      	mov	r0, r4
 8001f7a:	4629      	mov	r1, r5
 8001f7c:	f7fe f996 	bl	80002ac <__adddf3>
 8001f80:	4603      	mov	r3, r0
 8001f82:	460c      	mov	r4, r1
 8001f84:	4618      	mov	r0, r3
 8001f86:	4621      	mov	r1, r4
 8001f88:	f7fe fe3e 	bl	8000c08 <__aeabi_d2f>
 8001f8c:	4602      	mov	r2, r0
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	63da      	str	r2, [r3, #60]	; 0x3c
		inst->latitudeDegrees = (inst->latitude - 100 * (int)(inst->latitude / 100)) / 60.0;
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	ed93 7a0f 	vldr	s14, [r3, #60]	; 0x3c
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	edd3 6a0f 	vldr	s13, [r3, #60]	; 0x3c
 8001f9e:	ed9f 6a1d 	vldr	s12, [pc, #116]	; 8002014 <GPS_parseLat+0x164>
 8001fa2:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8001fa6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001faa:	ee17 2a90 	vmov	r2, s15
 8001fae:	2364      	movs	r3, #100	; 0x64
 8001fb0:	fb03 f302 	mul.w	r3, r3, r2
 8001fb4:	ee07 3a90 	vmov	s15, r3
 8001fb8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001fbc:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001fc0:	eddf 6a15 	vldr	s13, [pc, #84]	; 8002018 <GPS_parseLat+0x168>
 8001fc4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	edc3 7a13 	vstr	s15, [r3, #76]	; 0x4c
		inst->latitudeDegrees += (int)(inst->latitude / 100);
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	ed93 7a13 	vldr	s14, [r3, #76]	; 0x4c
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	edd3 6a0f 	vldr	s13, [r3, #60]	; 0x3c
 8001fda:	ed9f 6a0e 	vldr	s12, [pc, #56]	; 8002014 <GPS_parseLat+0x164>
 8001fde:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8001fe2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001fe6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001fea:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	edc3 7a13 	vstr	s15, [r3, #76]	; 0x4c
	}
}
 8001ff4:	bf00      	nop
 8001ff6:	3720      	adds	r7, #32
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	bdb0      	pop	{r4, r5, r7, pc}
 8001ffc:	f3af 8000 	nop.w
 8002000:	7110e454 	.word	0x7110e454
 8002004:	3ed92a73 	.word	0x3ed92a73
 8002008:	00989680 	.word	0x00989680
 800200c:	55555556 	.word	0x55555556
 8002010:	14f8b589 	.word	0x14f8b589
 8002014:	42c80000 	.word	0x42c80000
 8002018:	42700000 	.word	0x42700000

0800201c <GPS_parseLatDir>:
		@param p Pointer to the location of the token in the NMEA string
		@return True if we parsed it, false if it has invalid data
*/
/**************************************************************************/
bool GPS_parseLatDir(GPS* inst, char* p)
{
 800201c:	b590      	push	{r4, r7, lr}
 800201e:	b083      	sub	sp, #12
 8002020:	af00      	add	r7, sp, #0
 8002022:	6078      	str	r0, [r7, #4]
 8002024:	6039      	str	r1, [r7, #0]
	if (p[0] == 'S')
 8002026:	683b      	ldr	r3, [r7, #0]
 8002028:	781b      	ldrb	r3, [r3, #0]
 800202a:	2b53      	cmp	r3, #83	; 0x53
 800202c:	d11c      	bne.n	8002068 <GPS_parseLatDir+0x4c>
	{
		inst->lat = 'S';
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	2253      	movs	r2, #83	; 0x53
 8002032:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
		inst->latitudeDegrees *= -1.0;
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800203a:	4618      	mov	r0, r3
 800203c:	f7fe fa94 	bl	8000568 <__aeabi_f2d>
 8002040:	4603      	mov	r3, r0
 8002042:	460c      	mov	r4, r1
 8002044:	4618      	mov	r0, r3
 8002046:	4621      	mov	r1, r4
 8002048:	f7fe fdde 	bl	8000c08 <__aeabi_d2f>
 800204c:	4603      	mov	r3, r0
 800204e:	ee07 3a90 	vmov	s15, r3
 8002052:	eef1 7a67 	vneg.f32	s15, s15
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	edc3 7a13 	vstr	s15, [r3, #76]	; 0x4c
		inst->latitude_fixed *= -1;
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002060:	425a      	negs	r2, r3
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	645a      	str	r2, [r3, #68]	; 0x44
 8002066:	e013      	b.n	8002090 <GPS_parseLatDir+0x74>
	}
	else if (p[0] == 'N') inst->lat = 'N';
 8002068:	683b      	ldr	r3, [r7, #0]
 800206a:	781b      	ldrb	r3, [r3, #0]
 800206c:	2b4e      	cmp	r3, #78	; 0x4e
 800206e:	d104      	bne.n	800207a <GPS_parseLatDir+0x5e>
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	224e      	movs	r2, #78	; 0x4e
 8002074:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
 8002078:	e00a      	b.n	8002090 <GPS_parseLatDir+0x74>
	else if (p[0] == ',') inst->lat = 0;
 800207a:	683b      	ldr	r3, [r7, #0]
 800207c:	781b      	ldrb	r3, [r3, #0]
 800207e:	2b2c      	cmp	r3, #44	; 0x2c
 8002080:	d104      	bne.n	800208c <GPS_parseLatDir+0x70>
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	2200      	movs	r2, #0
 8002086:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
 800208a:	e001      	b.n	8002090 <GPS_parseLatDir+0x74>
	else return false;
 800208c:	2300      	movs	r3, #0
 800208e:	e000      	b.n	8002092 <GPS_parseLatDir+0x76>
	
	return true;
 8002090:	2301      	movs	r3, #1
}
 8002092:	4618      	mov	r0, r3
 8002094:	370c      	adds	r7, #12
 8002096:	46bd      	mov	sp, r7
 8002098:	bd90      	pop	{r4, r7, pc}
	...

0800209c <GPS_parseLon>:
		@brief Parse a part of an NMEA string for longitude angle
		@param p Pointer to the location of the token in the NMEA string
*/
/**************************************************************************/
void GPS_parseLon(GPS* inst, char* p)
{
 800209c:	b580      	push	{r7, lr}
 800209e:	b088      	sub	sp, #32
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	6078      	str	r0, [r7, #4]
 80020a4:	6039      	str	r1, [r7, #0]
	int32_t degree;
	long minutes;
	char degreebuff[10];
	if (!GPS_isEmpty(inst, p))
 80020a6:	6839      	ldr	r1, [r7, #0]
 80020a8:	6878      	ldr	r0, [r7, #4]
 80020aa:	f7ff fe98 	bl	8001dde <GPS_isEmpty>
 80020ae:	4603      	mov	r3, r0
 80020b0:	f083 0301 	eor.w	r3, r3, #1
 80020b4:	b2db      	uxtb	r3, r3
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	f000 8088 	beq.w	80021cc <GPS_parseLon+0x130>
	{
		strncpy(degreebuff, p, 3);
 80020bc:	f107 030c 	add.w	r3, r7, #12
 80020c0:	2203      	movs	r2, #3
 80020c2:	6839      	ldr	r1, [r7, #0]
 80020c4:	4618      	mov	r0, r3
 80020c6:	f00d f868 	bl	800f19a <strncpy>
		p += 3;
 80020ca:	683b      	ldr	r3, [r7, #0]
 80020cc:	3303      	adds	r3, #3
 80020ce:	603b      	str	r3, [r7, #0]
		degreebuff[3] = '\0';
 80020d0:	2300      	movs	r3, #0
 80020d2:	73fb      	strb	r3, [r7, #15]
		degree = atol(degreebuff)*	10000000;
 80020d4:	f107 030c 	add.w	r3, r7, #12
 80020d8:	4618      	mov	r0, r3
 80020da:	f00c f8ce 	bl	800e27a <atol>
 80020de:	4602      	mov	r2, r0
 80020e0:	4b3c      	ldr	r3, [pc, #240]	; (80021d4 <GPS_parseLon+0x138>)
 80020e2:	fb03 f302 	mul.w	r3, r3, r2
 80020e6:	61fb      	str	r3, [r7, #28]
		strncpy(degreebuff, p, 2); // minutes
 80020e8:	f107 030c 	add.w	r3, r7, #12
 80020ec:	2202      	movs	r2, #2
 80020ee:	6839      	ldr	r1, [r7, #0]
 80020f0:	4618      	mov	r0, r3
 80020f2:	f00d f852 	bl	800f19a <strncpy>
		p += 3;										// skip decimal point
 80020f6:	683b      	ldr	r3, [r7, #0]
 80020f8:	3303      	adds	r3, #3
 80020fa:	603b      	str	r3, [r7, #0]
		strncpy(degreebuff + 2, p, 4);
 80020fc:	f107 030c 	add.w	r3, r7, #12
 8002100:	3302      	adds	r3, #2
 8002102:	2204      	movs	r2, #4
 8002104:	6839      	ldr	r1, [r7, #0]
 8002106:	4618      	mov	r0, r3
 8002108:	f00d f847 	bl	800f19a <strncpy>
		degreebuff[6] = '\0';
 800210c:	2300      	movs	r3, #0
 800210e:	74bb      	strb	r3, [r7, #18]
		minutes = 50 * atol(degreebuff) / 3;
 8002110:	f107 030c 	add.w	r3, r7, #12
 8002114:	4618      	mov	r0, r3
 8002116:	f00c f8b0 	bl	800e27a <atol>
 800211a:	4602      	mov	r2, r0
 800211c:	2332      	movs	r3, #50	; 0x32
 800211e:	fb03 f302 	mul.w	r3, r3, r2
 8002122:	4a2d      	ldr	r2, [pc, #180]	; (80021d8 <GPS_parseLon+0x13c>)
 8002124:	fb82 1203 	smull	r1, r2, r2, r3
 8002128:	17db      	asrs	r3, r3, #31
 800212a:	1ad3      	subs	r3, r2, r3
 800212c:	61bb      	str	r3, [r7, #24]
		inst->longitude_fixed = degree + minutes;
 800212e:	69fa      	ldr	r2, [r7, #28]
 8002130:	69bb      	ldr	r3, [r7, #24]
 8002132:	441a      	add	r2, r3
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	649a      	str	r2, [r3, #72]	; 0x48
		inst->longitude = degree / 100000 + minutes * 0.000006f;
 8002138:	69fb      	ldr	r3, [r7, #28]
 800213a:	4a28      	ldr	r2, [pc, #160]	; (80021dc <GPS_parseLon+0x140>)
 800213c:	fb82 1203 	smull	r1, r2, r2, r3
 8002140:	1352      	asrs	r2, r2, #13
 8002142:	17db      	asrs	r3, r3, #31
 8002144:	1ad3      	subs	r3, r2, r3
 8002146:	ee07 3a90 	vmov	s15, r3
 800214a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800214e:	69bb      	ldr	r3, [r7, #24]
 8002150:	ee07 3a90 	vmov	s15, r3
 8002154:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002158:	eddf 6a21 	vldr	s13, [pc, #132]	; 80021e0 <GPS_parseLon+0x144>
 800215c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002160:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40
		inst->longitudeDegrees = (inst->longitude - 100 * (int)(inst->longitude / 100)) / 60.0;
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	ed93 7a10 	vldr	s14, [r3, #64]	; 0x40
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	edd3 6a10 	vldr	s13, [r3, #64]	; 0x40
 8002176:	ed9f 6a1b 	vldr	s12, [pc, #108]	; 80021e4 <GPS_parseLon+0x148>
 800217a:	eec6 7a86 	vdiv.f32	s15, s13, s12
 800217e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002182:	ee17 2a90 	vmov	r2, s15
 8002186:	2364      	movs	r3, #100	; 0x64
 8002188:	fb03 f302 	mul.w	r3, r3, r2
 800218c:	ee07 3a90 	vmov	s15, r3
 8002190:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002194:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002198:	eddf 6a13 	vldr	s13, [pc, #76]	; 80021e8 <GPS_parseLon+0x14c>
 800219c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	edc3 7a14 	vstr	s15, [r3, #80]	; 0x50
		inst->longitudeDegrees += (int)(inst->longitude / 100);
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	ed93 7a14 	vldr	s14, [r3, #80]	; 0x50
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	edd3 6a10 	vldr	s13, [r3, #64]	; 0x40
 80021b2:	ed9f 6a0c 	vldr	s12, [pc, #48]	; 80021e4 <GPS_parseLon+0x148>
 80021b6:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80021ba:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80021be:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80021c2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	edc3 7a14 	vstr	s15, [r3, #80]	; 0x50
	}
}
 80021cc:	bf00      	nop
 80021ce:	3720      	adds	r7, #32
 80021d0:	46bd      	mov	sp, r7
 80021d2:	bd80      	pop	{r7, pc}
 80021d4:	00989680 	.word	0x00989680
 80021d8:	55555556 	.word	0x55555556
 80021dc:	14f8b589 	.word	0x14f8b589
 80021e0:	36c9539c 	.word	0x36c9539c
 80021e4:	42c80000 	.word	0x42c80000
 80021e8:	42700000 	.word	0x42700000

080021ec <GPS_parseLonDir>:
		@param p Pointer to the location of the token in the NMEA string
		@return True if we parsed it, false if it has invalid data
*/
/**************************************************************************/
bool GPS_parseLonDir(GPS* inst, char* p)
{
 80021ec:	b590      	push	{r4, r7, lr}
 80021ee:	b083      	sub	sp, #12
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	6078      	str	r0, [r7, #4]
 80021f4:	6039      	str	r1, [r7, #0]
	if (!GPS_isEmpty(inst, p))
 80021f6:	6839      	ldr	r1, [r7, #0]
 80021f8:	6878      	ldr	r0, [r7, #4]
 80021fa:	f7ff fdf0 	bl	8001dde <GPS_isEmpty>
 80021fe:	4603      	mov	r3, r0
 8002200:	f083 0301 	eor.w	r3, r3, #1
 8002204:	b2db      	uxtb	r3, r3
 8002206:	2b00      	cmp	r3, #0
 8002208:	d034      	beq.n	8002274 <GPS_parseLonDir+0x88>
	{
		if (p[0] == 'W')
 800220a:	683b      	ldr	r3, [r7, #0]
 800220c:	781b      	ldrb	r3, [r3, #0]
 800220e:	2b57      	cmp	r3, #87	; 0x57
 8002210:	d11c      	bne.n	800224c <GPS_parseLonDir+0x60>
		{
			inst->lon = 'W';
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	2257      	movs	r2, #87	; 0x57
 8002216:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
			inst->longitudeDegrees *= -1.0;
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800221e:	4618      	mov	r0, r3
 8002220:	f7fe f9a2 	bl	8000568 <__aeabi_f2d>
 8002224:	4603      	mov	r3, r0
 8002226:	460c      	mov	r4, r1
 8002228:	4618      	mov	r0, r3
 800222a:	4621      	mov	r1, r4
 800222c:	f7fe fcec 	bl	8000c08 <__aeabi_d2f>
 8002230:	4603      	mov	r3, r0
 8002232:	ee07 3a90 	vmov	s15, r3
 8002236:	eef1 7a67 	vneg.f32	s15, s15
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	edc3 7a14 	vstr	s15, [r3, #80]	; 0x50
			inst->longitude_fixed *= -1;
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002244:	425a      	negs	r2, r3
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	649a      	str	r2, [r3, #72]	; 0x48
 800224a:	e013      	b.n	8002274 <GPS_parseLonDir+0x88>
		}
		else if (p[0] == 'E') inst->lon = 'E';
 800224c:	683b      	ldr	r3, [r7, #0]
 800224e:	781b      	ldrb	r3, [r3, #0]
 8002250:	2b45      	cmp	r3, #69	; 0x45
 8002252:	d104      	bne.n	800225e <GPS_parseLonDir+0x72>
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	2245      	movs	r2, #69	; 0x45
 8002258:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
 800225c:	e00a      	b.n	8002274 <GPS_parseLonDir+0x88>
		else if (p[0] == ',') inst->lon = 0;
 800225e:	683b      	ldr	r3, [r7, #0]
 8002260:	781b      	ldrb	r3, [r3, #0]
 8002262:	2b2c      	cmp	r3, #44	; 0x2c
 8002264:	d104      	bne.n	8002270 <GPS_parseLonDir+0x84>
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	2200      	movs	r2, #0
 800226a:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
 800226e:	e001      	b.n	8002274 <GPS_parseLonDir+0x88>
		else return false;
 8002270:	2300      	movs	r3, #0
 8002272:	e000      	b.n	8002276 <GPS_parseLonDir+0x8a>
	}
	return true;
 8002274:	2301      	movs	r3, #1
}
 8002276:	4618      	mov	r0, r3
 8002278:	370c      	adds	r7, #12
 800227a:	46bd      	mov	sp, r7
 800227c:	bd90      	pop	{r4, r7, pc}

0800227e <GPS_parseFix>:
		@param p Pointer to the location of the token in the NMEA string
		@return True if we parsed it, false if it has invalid data
*/
/**************************************************************************/
bool GPS_parseFix(GPS* inst, char* p)
{
 800227e:	b480      	push	{r7}
 8002280:	b083      	sub	sp, #12
 8002282:	af00      	add	r7, sp, #0
 8002284:	6078      	str	r0, [r7, #4]
 8002286:	6039      	str	r1, [r7, #0]
	if (p[0] == 'A')
 8002288:	683b      	ldr	r3, [r7, #0]
 800228a:	781b      	ldrb	r3, [r3, #0]
 800228c:	2b41      	cmp	r3, #65	; 0x41
 800228e:	d10a      	bne.n	80022a6 <GPS_parseFix+0x28>
	{
		inst->fix = true;
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	2201      	movs	r2, #1
 8002294:	f883 2077 	strb.w	r2, [r3, #119]	; 0x77
		inst->lastFix = inst->sentTime;
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
 80022a4:	e00a      	b.n	80022bc <GPS_parseFix+0x3e>
	}
	else if (p[0] == 'V') inst->fix = false;
 80022a6:	683b      	ldr	r3, [r7, #0]
 80022a8:	781b      	ldrb	r3, [r3, #0]
 80022aa:	2b56      	cmp	r3, #86	; 0x56
 80022ac:	d104      	bne.n	80022b8 <GPS_parseFix+0x3a>
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	2200      	movs	r2, #0
 80022b2:	f883 2077 	strb.w	r2, [r3, #119]	; 0x77
 80022b6:	e001      	b.n	80022bc <GPS_parseFix+0x3e>
	else return false;
 80022b8:	2300      	movs	r3, #0
 80022ba:	e000      	b.n	80022be <GPS_parseFix+0x40>
	return true;
 80022bc:	2301      	movs	r3, #1
}
 80022be:	4618      	mov	r0, r3
 80022c0:	370c      	adds	r7, #12
 80022c2:	46bd      	mov	sp, r7
 80022c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c8:	4770      	bx	lr

080022ca <GPS_newNMEAreceived>:
/*!
		@brief Check to see if a new NMEA line has been received
		@return True if received, false if not
*/
/**************************************************************************/
bool GPS_newNMEAreceived(GPS* inst) { return inst->recvdflag; }
 80022ca:	b480      	push	{r7}
 80022cc:	b083      	sub	sp, #12
 80022ce:	af00      	add	r7, sp, #0
 80022d0:	6078      	str	r0, [r7, #4]
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	f893 31d4 	ldrb.w	r3, [r3, #468]	; 0x1d4
 80022d8:	b2db      	uxtb	r3, r3
 80022da:	4618      	mov	r0, r3
 80022dc:	370c      	adds	r7, #12
 80022de:	46bd      	mov	sp, r7
 80022e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e4:	4770      	bx	lr

080022e6 <GPS_lastNMEA>:
		@brief Returns the last NMEA line received and unsets the received flag
		@return Pointer to the last line string
*/
/**************************************************************************/
char* GPS_lastNMEA(GPS* inst)
{
 80022e6:	b480      	push	{r7}
 80022e8:	b083      	sub	sp, #12
 80022ea:	af00      	add	r7, sp, #0
 80022ec:	6078      	str	r0, [r7, #4]
	inst->recvdflag = false;
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	2200      	movs	r2, #0
 80022f2:	f883 21d4 	strb.w	r2, [r3, #468]	; 0x1d4
	return (char*)inst->lastline;
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	f8d3 31d0 	ldr.w	r3, [r3, #464]	; 0x1d0
}
 80022fc:	4618      	mov	r0, r3
 80022fe:	370c      	adds	r7, #12
 8002300:	46bd      	mov	sp, r7
 8002302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002306:	4770      	bx	lr

08002308 <GPS_parseHex>:
	 character
*/
/**************************************************************************/
// read a Hex value and return the decimal equivalent
uint8_t GPS_parseHex(GPS* inst, char c)
{
 8002308:	b480      	push	{r7}
 800230a:	b083      	sub	sp, #12
 800230c:	af00      	add	r7, sp, #0
 800230e:	6078      	str	r0, [r7, #4]
 8002310:	460b      	mov	r3, r1
 8002312:	70fb      	strb	r3, [r7, #3]
	if (c < '0') return 0;
 8002314:	78fb      	ldrb	r3, [r7, #3]
 8002316:	2b2f      	cmp	r3, #47	; 0x2f
 8002318:	d801      	bhi.n	800231e <GPS_parseHex+0x16>
 800231a:	2300      	movs	r3, #0
 800231c:	e013      	b.n	8002346 <GPS_parseHex+0x3e>
	if (c <= '9') return c - '0';
 800231e:	78fb      	ldrb	r3, [r7, #3]
 8002320:	2b39      	cmp	r3, #57	; 0x39
 8002322:	d803      	bhi.n	800232c <GPS_parseHex+0x24>
 8002324:	78fb      	ldrb	r3, [r7, #3]
 8002326:	3b30      	subs	r3, #48	; 0x30
 8002328:	b2db      	uxtb	r3, r3
 800232a:	e00c      	b.n	8002346 <GPS_parseHex+0x3e>
	if (c < 'A') return 0;
 800232c:	78fb      	ldrb	r3, [r7, #3]
 800232e:	2b40      	cmp	r3, #64	; 0x40
 8002330:	d801      	bhi.n	8002336 <GPS_parseHex+0x2e>
 8002332:	2300      	movs	r3, #0
 8002334:	e007      	b.n	8002346 <GPS_parseHex+0x3e>
	if (c <= 'F') return (c - 'A') + 10;
 8002336:	78fb      	ldrb	r3, [r7, #3]
 8002338:	2b46      	cmp	r3, #70	; 0x46
 800233a:	d803      	bhi.n	8002344 <GPS_parseHex+0x3c>
 800233c:	78fb      	ldrb	r3, [r7, #3]
 800233e:	3b37      	subs	r3, #55	; 0x37
 8002340:	b2db      	uxtb	r3, r3
 8002342:	e000      	b.n	8002346 <GPS_parseHex+0x3e>
	// if (c > 'F')
	return 0;
 8002344:	2300      	movs	r3, #0
}
 8002346:	4618      	mov	r0, r3
 8002348:	370c      	adds	r7, #12
 800234a:	46bd      	mov	sp, r7
 800234c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002350:	4770      	bx	lr
	...

08002354 <print>:
{
 8002354:	b580      	push	{r7, lr}
 8002356:	b082      	sub	sp, #8
 8002358:	af00      	add	r7, sp, #0
 800235a:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(LEDB_GPIO_Port, LEDB_Pin, GPIO_PIN_SET);
 800235c:	2201      	movs	r2, #1
 800235e:	2140      	movs	r1, #64	; 0x40
 8002360:	480c      	ldr	r0, [pc, #48]	; (8002394 <print+0x40>)
 8002362:	f002 facb 	bl	80048fc <HAL_GPIO_WritePin>
	while (CDC_Transmit_FS((uint8_t*) str, strlen(str)) == USBD_BUSY);
 8002366:	bf00      	nop
 8002368:	6878      	ldr	r0, [r7, #4]
 800236a:	f7fd ff3b 	bl	80001e4 <strlen>
 800236e:	4603      	mov	r3, r0
 8002370:	b29b      	uxth	r3, r3
 8002372:	4619      	mov	r1, r3
 8002374:	6878      	ldr	r0, [r7, #4]
 8002376:	f00b fb45 	bl	800da04 <CDC_Transmit_FS>
 800237a:	4603      	mov	r3, r0
 800237c:	2b01      	cmp	r3, #1
 800237e:	d0f3      	beq.n	8002368 <print+0x14>
	HAL_GPIO_WritePin(LEDB_GPIO_Port, LEDB_Pin, GPIO_PIN_RESET);
 8002380:	2200      	movs	r2, #0
 8002382:	2140      	movs	r1, #64	; 0x40
 8002384:	4803      	ldr	r0, [pc, #12]	; (8002394 <print+0x40>)
 8002386:	f002 fab9 	bl	80048fc <HAL_GPIO_WritePin>
};
 800238a:	bf00      	nop
 800238c:	3708      	adds	r7, #8
 800238e:	46bd      	mov	sp, r7
 8002390:	bd80      	pop	{r7, pc}
 8002392:	bf00      	nop
 8002394:	40020800 	.word	0x40020800

08002398 <println>:
{
 8002398:	b580      	push	{r7, lr}
 800239a:	b084      	sub	sp, #16
 800239c:	af00      	add	r7, sp, #0
 800239e:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(LEDB_GPIO_Port, LEDB_Pin, GPIO_PIN_SET);
 80023a0:	2201      	movs	r2, #1
 80023a2:	2140      	movs	r1, #64	; 0x40
 80023a4:	4820      	ldr	r0, [pc, #128]	; (8002428 <println+0x90>)
 80023a6:	f002 faa9 	bl	80048fc <HAL_GPIO_WritePin>
	printLen = strlen(str);
 80023aa:	6878      	ldr	r0, [r7, #4]
 80023ac:	f7fd ff1a 	bl	80001e4 <strlen>
 80023b0:	4602      	mov	r2, r0
 80023b2:	4b1e      	ldr	r3, [pc, #120]	; (800242c <println+0x94>)
 80023b4:	601a      	str	r2, [r3, #0]
	for (i = 0; i < printLen; i++)
 80023b6:	2300      	movs	r3, #0
 80023b8:	73fb      	strb	r3, [r7, #15]
 80023ba:	e009      	b.n	80023d0 <println+0x38>
		printBuffer[i] = str[i];
 80023bc:	7bfb      	ldrb	r3, [r7, #15]
 80023be:	687a      	ldr	r2, [r7, #4]
 80023c0:	441a      	add	r2, r3
 80023c2:	7bfb      	ldrb	r3, [r7, #15]
 80023c4:	7811      	ldrb	r1, [r2, #0]
 80023c6:	4a1a      	ldr	r2, [pc, #104]	; (8002430 <println+0x98>)
 80023c8:	54d1      	strb	r1, [r2, r3]
	for (i = 0; i < printLen; i++)
 80023ca:	7bfb      	ldrb	r3, [r7, #15]
 80023cc:	3301      	adds	r3, #1
 80023ce:	73fb      	strb	r3, [r7, #15]
 80023d0:	7bfa      	ldrb	r2, [r7, #15]
 80023d2:	4b16      	ldr	r3, [pc, #88]	; (800242c <println+0x94>)
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	429a      	cmp	r2, r3
 80023d8:	d3f0      	bcc.n	80023bc <println+0x24>
	printBuffer[printLen] = '\n';
 80023da:	4b14      	ldr	r3, [pc, #80]	; (800242c <println+0x94>)
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	4a14      	ldr	r2, [pc, #80]	; (8002430 <println+0x98>)
 80023e0:	210a      	movs	r1, #10
 80023e2:	54d1      	strb	r1, [r2, r3]
	printBuffer[printLen + 1] = '\r';
 80023e4:	4b11      	ldr	r3, [pc, #68]	; (800242c <println+0x94>)
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	3301      	adds	r3, #1
 80023ea:	4a11      	ldr	r2, [pc, #68]	; (8002430 <println+0x98>)
 80023ec:	210d      	movs	r1, #13
 80023ee:	54d1      	strb	r1, [r2, r3]
	printBuffer[printLen + 2] = '\0';
 80023f0:	4b0e      	ldr	r3, [pc, #56]	; (800242c <println+0x94>)
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	3302      	adds	r3, #2
 80023f6:	4a0e      	ldr	r2, [pc, #56]	; (8002430 <println+0x98>)
 80023f8:	2100      	movs	r1, #0
 80023fa:	54d1      	strb	r1, [r2, r3]
 	while (CDC_Transmit_FS((uint8_t*) printBuffer, printLen + 3) == USBD_BUSY);
 80023fc:	bf00      	nop
 80023fe:	4b0b      	ldr	r3, [pc, #44]	; (800242c <println+0x94>)
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	b29b      	uxth	r3, r3
 8002404:	3303      	adds	r3, #3
 8002406:	b29b      	uxth	r3, r3
 8002408:	4619      	mov	r1, r3
 800240a:	4809      	ldr	r0, [pc, #36]	; (8002430 <println+0x98>)
 800240c:	f00b fafa 	bl	800da04 <CDC_Transmit_FS>
 8002410:	4603      	mov	r3, r0
 8002412:	2b01      	cmp	r3, #1
 8002414:	d0f3      	beq.n	80023fe <println+0x66>
	HAL_GPIO_WritePin(LEDB_GPIO_Port, LEDB_Pin, GPIO_PIN_RESET);
 8002416:	2200      	movs	r2, #0
 8002418:	2140      	movs	r1, #64	; 0x40
 800241a:	4803      	ldr	r0, [pc, #12]	; (8002428 <println+0x90>)
 800241c:	f002 fa6e 	bl	80048fc <HAL_GPIO_WritePin>
};
 8002420:	bf00      	nop
 8002422:	3710      	adds	r7, #16
 8002424:	46bd      	mov	sp, r7
 8002426:	bd80      	pop	{r7, pc}
 8002428:	40020800 	.word	0x40020800
 800242c:	20000570 	.word	0x20000570
 8002430:	20000574 	.word	0x20000574

08002434 <printv>:
static inline void printv(char* str, uint32_t len)
{
 8002434:	b580      	push	{r7, lr}
 8002436:	b082      	sub	sp, #8
 8002438:	af00      	add	r7, sp, #0
 800243a:	6078      	str	r0, [r7, #4]
 800243c:	6039      	str	r1, [r7, #0]
	#if PRINT_OUT
	HAL_GPIO_WritePin(LEDB_GPIO_Port, LEDB_Pin, GPIO_PIN_SET);
 800243e:	2201      	movs	r2, #1
 8002440:	2140      	movs	r1, #64	; 0x40
 8002442:	480b      	ldr	r0, [pc, #44]	; (8002470 <printv+0x3c>)
 8002444:	f002 fa5a 	bl	80048fc <HAL_GPIO_WritePin>

	while (CDC_Transmit_FS((uint8_t*) str, len) == USBD_BUSY);
 8002448:	bf00      	nop
 800244a:	683b      	ldr	r3, [r7, #0]
 800244c:	b29b      	uxth	r3, r3
 800244e:	4619      	mov	r1, r3
 8002450:	6878      	ldr	r0, [r7, #4]
 8002452:	f00b fad7 	bl	800da04 <CDC_Transmit_FS>
 8002456:	4603      	mov	r3, r0
 8002458:	2b01      	cmp	r3, #1
 800245a:	d0f6      	beq.n	800244a <printv+0x16>

	HAL_GPIO_WritePin(LEDB_GPIO_Port, LEDB_Pin, GPIO_PIN_RESET);
 800245c:	2200      	movs	r2, #0
 800245e:	2140      	movs	r1, #64	; 0x40
 8002460:	4803      	ldr	r0, [pc, #12]	; (8002470 <printv+0x3c>)
 8002462:	f002 fa4b 	bl	80048fc <HAL_GPIO_WritePin>
	#endif
}
 8002466:	bf00      	nop
 8002468:	3708      	adds	r7, #8
 800246a:	46bd      	mov	sp, r7
 800246c:	bd80      	pop	{r7, pc}
 800246e:	bf00      	nop
 8002470:	40020800 	.word	0x40020800

08002474 <print_int>:
static inline void print_int(int number)
{
 8002474:	b580      	push	{r7, lr}
 8002476:	b082      	sub	sp, #8
 8002478:	af00      	add	r7, sp, #0
 800247a:	6078      	str	r0, [r7, #4]
	#if PRINT_OUT
	HAL_GPIO_WritePin(LEDB_GPIO_Port, LEDB_Pin, GPIO_PIN_SET);
 800247c:	2201      	movs	r2, #1
 800247e:	2140      	movs	r1, #64	; 0x40
 8002480:	480f      	ldr	r0, [pc, #60]	; (80024c0 <print_int+0x4c>)
 8002482:	f002 fa3b 	bl	80048fc <HAL_GPIO_WritePin>

	printLen = sprintf(printBuffer, "%d", number);
 8002486:	687a      	ldr	r2, [r7, #4]
 8002488:	490e      	ldr	r1, [pc, #56]	; (80024c4 <print_int+0x50>)
 800248a:	480f      	ldr	r0, [pc, #60]	; (80024c8 <print_int+0x54>)
 800248c:	f00c fe3e 	bl	800f10c <siprintf>
 8002490:	4603      	mov	r3, r0
 8002492:	461a      	mov	r2, r3
 8002494:	4b0d      	ldr	r3, [pc, #52]	; (80024cc <print_int+0x58>)
 8002496:	601a      	str	r2, [r3, #0]
	while (CDC_Transmit_FS((uint8_t*) printBuffer, printLen) == USBD_BUSY);
 8002498:	bf00      	nop
 800249a:	4b0c      	ldr	r3, [pc, #48]	; (80024cc <print_int+0x58>)
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	b29b      	uxth	r3, r3
 80024a0:	4619      	mov	r1, r3
 80024a2:	4809      	ldr	r0, [pc, #36]	; (80024c8 <print_int+0x54>)
 80024a4:	f00b faae 	bl	800da04 <CDC_Transmit_FS>
 80024a8:	4603      	mov	r3, r0
 80024aa:	2b01      	cmp	r3, #1
 80024ac:	d0f5      	beq.n	800249a <print_int+0x26>

	HAL_GPIO_WritePin(LEDB_GPIO_Port, LEDB_Pin, GPIO_PIN_RESET);
 80024ae:	2200      	movs	r2, #0
 80024b0:	2140      	movs	r1, #64	; 0x40
 80024b2:	4803      	ldr	r0, [pc, #12]	; (80024c0 <print_int+0x4c>)
 80024b4:	f002 fa22 	bl	80048fc <HAL_GPIO_WritePin>
	#endif
}
 80024b8:	bf00      	nop
 80024ba:	3708      	adds	r7, #8
 80024bc:	46bd      	mov	sp, r7
 80024be:	bd80      	pop	{r7, pc}
 80024c0:	40020800 	.word	0x40020800
 80024c4:	08012010 	.word	0x08012010
 80024c8:	20000574 	.word	0x20000574
 80024cc:	20000570 	.word	0x20000570

080024d0 <print_float>:
static inline void print_float(float number)
{
 80024d0:	b590      	push	{r4, r7, lr}
 80024d2:	b083      	sub	sp, #12
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	ed87 0a01 	vstr	s0, [r7, #4]
	#if PRINT_OUT
	HAL_GPIO_WritePin(LEDB_GPIO_Port, LEDB_Pin, GPIO_PIN_SET);
 80024da:	2201      	movs	r2, #1
 80024dc:	2140      	movs	r1, #64	; 0x40
 80024de:	4813      	ldr	r0, [pc, #76]	; (800252c <print_float+0x5c>)
 80024e0:	f002 fa0c 	bl	80048fc <HAL_GPIO_WritePin>

	printLen = sprintf(printBuffer, "%f", number);
 80024e4:	6878      	ldr	r0, [r7, #4]
 80024e6:	f7fe f83f 	bl	8000568 <__aeabi_f2d>
 80024ea:	4603      	mov	r3, r0
 80024ec:	460c      	mov	r4, r1
 80024ee:	461a      	mov	r2, r3
 80024f0:	4623      	mov	r3, r4
 80024f2:	490f      	ldr	r1, [pc, #60]	; (8002530 <print_float+0x60>)
 80024f4:	480f      	ldr	r0, [pc, #60]	; (8002534 <print_float+0x64>)
 80024f6:	f00c fe09 	bl	800f10c <siprintf>
 80024fa:	4603      	mov	r3, r0
 80024fc:	461a      	mov	r2, r3
 80024fe:	4b0e      	ldr	r3, [pc, #56]	; (8002538 <print_float+0x68>)
 8002500:	601a      	str	r2, [r3, #0]
	while (CDC_Transmit_FS((uint8_t*) printBuffer, printLen) == USBD_BUSY);
 8002502:	bf00      	nop
 8002504:	4b0c      	ldr	r3, [pc, #48]	; (8002538 <print_float+0x68>)
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	b29b      	uxth	r3, r3
 800250a:	4619      	mov	r1, r3
 800250c:	4809      	ldr	r0, [pc, #36]	; (8002534 <print_float+0x64>)
 800250e:	f00b fa79 	bl	800da04 <CDC_Transmit_FS>
 8002512:	4603      	mov	r3, r0
 8002514:	2b01      	cmp	r3, #1
 8002516:	d0f5      	beq.n	8002504 <print_float+0x34>

	HAL_GPIO_WritePin(LEDB_GPIO_Port, LEDB_Pin, GPIO_PIN_RESET);
 8002518:	2200      	movs	r2, #0
 800251a:	2140      	movs	r1, #64	; 0x40
 800251c:	4803      	ldr	r0, [pc, #12]	; (800252c <print_float+0x5c>)
 800251e:	f002 f9ed 	bl	80048fc <HAL_GPIO_WritePin>
	#endif
}
 8002522:	bf00      	nop
 8002524:	370c      	adds	r7, #12
 8002526:	46bd      	mov	sp, r7
 8002528:	bd90      	pop	{r4, r7, pc}
 800252a:	bf00      	nop
 800252c:	40020800 	.word	0x40020800
 8002530:	08012014 	.word	0x08012014
 8002534:	20000574 	.word	0x20000574
 8002538:	20000570 	.word	0x20000570

0800253c <print_char>:
static inline void print_char(char ch)
{
 800253c:	b580      	push	{r7, lr}
 800253e:	b084      	sub	sp, #16
 8002540:	af00      	add	r7, sp, #0
 8002542:	4603      	mov	r3, r0
 8002544:	71fb      	strb	r3, [r7, #7]
	#if PRINT_OUT
	HAL_GPIO_WritePin(LEDB_GPIO_Port, LEDB_Pin, GPIO_PIN_SET);
 8002546:	2201      	movs	r2, #1
 8002548:	2140      	movs	r1, #64	; 0x40
 800254a:	480c      	ldr	r0, [pc, #48]	; (800257c <print_char+0x40>)
 800254c:	f002 f9d6 	bl	80048fc <HAL_GPIO_WritePin>

	char cha[1] = {ch};
 8002550:	79fb      	ldrb	r3, [r7, #7]
 8002552:	733b      	strb	r3, [r7, #12]
	while (CDC_Transmit_FS((uint8_t*) cha, 1) == USBD_BUSY);
 8002554:	bf00      	nop
 8002556:	f107 030c 	add.w	r3, r7, #12
 800255a:	2101      	movs	r1, #1
 800255c:	4618      	mov	r0, r3
 800255e:	f00b fa51 	bl	800da04 <CDC_Transmit_FS>
 8002562:	4603      	mov	r3, r0
 8002564:	2b01      	cmp	r3, #1
 8002566:	d0f6      	beq.n	8002556 <print_char+0x1a>

	HAL_GPIO_WritePin(LEDB_GPIO_Port, LEDB_Pin, GPIO_PIN_RESET);
 8002568:	2200      	movs	r2, #0
 800256a:	2140      	movs	r1, #64	; 0x40
 800256c:	4803      	ldr	r0, [pc, #12]	; (800257c <print_char+0x40>)
 800256e:	f002 f9c5 	bl	80048fc <HAL_GPIO_WritePin>
	#endif
}
 8002572:	bf00      	nop
 8002574:	3710      	adds	r7, #16
 8002576:	46bd      	mov	sp, r7
 8002578:	bd80      	pop	{r7, pc}
 800257a:	bf00      	nop
 800257c:	40020800 	.word	0x40020800

08002580 <millis>:
 8002580:	b480      	push	{r7}
 8002582:	af00      	add	r7, sp, #0
 8002584:	4b05      	ldr	r3, [pc, #20]	; (800259c <millis+0x1c>)
 8002586:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002588:	4a05      	ldr	r2, [pc, #20]	; (80025a0 <millis+0x20>)
 800258a:	fba2 2303 	umull	r2, r3, r2, r3
 800258e:	08db      	lsrs	r3, r3, #3
 8002590:	4618      	mov	r0, r3
 8002592:	46bd      	mov	sp, r7
 8002594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002598:	4770      	bx	lr
 800259a:	bf00      	nop
 800259c:	40010000 	.word	0x40010000
 80025a0:	cccccccd 	.word	0xcccccccd

080025a4 <setup>:
uint32_t timenow;

Servo ser1;

static void setup(void)
{
 80025a4:	b580      	push	{r7, lr}
 80025a6:	af00      	add	r7, sp, #0
	setupPins();
 80025a8:	f000 f9aa 	bl	8002900 <setupPins>

	//while (HAL_GPIO_ReadPin(BTN_USR_GPIO_Port, BTN_USR_Pin) == GPIO_PIN_SET);

	HAL_GPIO_WritePin(LEDB_GPIO_Port, LEDB_Pin, GPIO_PIN_SET);
 80025ac:	2201      	movs	r2, #1
 80025ae:	2140      	movs	r1, #64	; 0x40
 80025b0:	481c      	ldr	r0, [pc, #112]	; (8002624 <setup+0x80>)
 80025b2:	f002 f9a3 	bl	80048fc <HAL_GPIO_WritePin>
	println("Hello world!!");	HAL_Delay(500);
 80025b6:	481c      	ldr	r0, [pc, #112]	; (8002628 <setup+0x84>)
 80025b8:	f7ff feee 	bl	8002398 <println>
 80025bc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80025c0:	f001 fb1a 	bl	8003bf8 <HAL_Delay>
	HAL_GPIO_WritePin(LEDB_GPIO_Port, LEDB_Pin, GPIO_PIN_RESET);
 80025c4:	2200      	movs	r2, #0
 80025c6:	2140      	movs	r1, #64	; 0x40
 80025c8:	4816      	ldr	r0, [pc, #88]	; (8002624 <setup+0x80>)
 80025ca:	f002 f997 	bl	80048fc <HAL_GPIO_WritePin>
	//if (sd_begin()) println("[SD] joined the server!");
	//if (radio_begin()) println("[LoRa] joined the server!");
	//enableMotors(); println("[MOT] joined the server!");
	//if (mpu_begin()) println("[MPU] joined the server!");

	printLen = sprintf(printBuffer, "Time: %lu ms\r\n", millis());
 80025ce:	f7ff ffd7 	bl	8002580 <millis>
 80025d2:	4603      	mov	r3, r0
 80025d4:	461a      	mov	r2, r3
 80025d6:	4915      	ldr	r1, [pc, #84]	; (800262c <setup+0x88>)
 80025d8:	4815      	ldr	r0, [pc, #84]	; (8002630 <setup+0x8c>)
 80025da:	f00c fd97 	bl	800f10c <siprintf>
 80025de:	4603      	mov	r3, r0
 80025e0:	461a      	mov	r2, r3
 80025e2:	4b14      	ldr	r3, [pc, #80]	; (8002634 <setup+0x90>)
 80025e4:	601a      	str	r2, [r3, #0]
	printv(printBuffer, printLen);
 80025e6:	4b13      	ldr	r3, [pc, #76]	; (8002634 <setup+0x90>)
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	4619      	mov	r1, r3
 80025ec:	4810      	ldr	r0, [pc, #64]	; (8002630 <setup+0x8c>)
 80025ee:	f7ff ff21 	bl	8002434 <printv>
	HAL_Delay(100);
 80025f2:	2064      	movs	r0, #100	; 0x64
 80025f4:	f001 fb00 	bl	8003bf8 <HAL_Delay>
	printLen = sprintf(printBuffer, "Time: %lu ms\r\n", millis());
 80025f8:	f7ff ffc2 	bl	8002580 <millis>
 80025fc:	4603      	mov	r3, r0
 80025fe:	461a      	mov	r2, r3
 8002600:	490a      	ldr	r1, [pc, #40]	; (800262c <setup+0x88>)
 8002602:	480b      	ldr	r0, [pc, #44]	; (8002630 <setup+0x8c>)
 8002604:	f00c fd82 	bl	800f10c <siprintf>
 8002608:	4603      	mov	r3, r0
 800260a:	461a      	mov	r2, r3
 800260c:	4b09      	ldr	r3, [pc, #36]	; (8002634 <setup+0x90>)
 800260e:	601a      	str	r2, [r3, #0]
	printv(printBuffer, printLen);
 8002610:	4b08      	ldr	r3, [pc, #32]	; (8002634 <setup+0x90>)
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	4619      	mov	r1, r3
 8002616:	4806      	ldr	r0, [pc, #24]	; (8002630 <setup+0x8c>)
 8002618:	f7ff ff0c 	bl	8002434 <printv>

	gps_begin();
 800261c:	f000 f93e 	bl	800289c <gps_begin>

	//ser1.ccr = &(TIM3->CCR3);
}
 8002620:	bf00      	nop
 8002622:	bd80      	pop	{r7, pc}
 8002624:	40020800 	.word	0x40020800
 8002628:	08012018 	.word	0x08012018
 800262c:	08012028 	.word	0x08012028
 8002630:	20000574 	.word	0x20000574
 8002634:	20000570 	.word	0x20000570

08002638 <loop>:

static void loop(void)
{
 8002638:	b580      	push	{r7, lr}
 800263a:	af00      	add	r7, sp, #0
	//if (sd_begin()) println("[SD] joined the server!");
	//HAL_Delay(1000);
	//mpu_printData();
	gps_printData();
 800263c:	f000 f802 	bl	8002644 <gps_printData>
	HAL_Delay(1000);
	TIM3->CCR3 = 1000;
	println("1000");
	HAL_Delay(1000);
*/
}
 8002640:	bf00      	nop
 8002642:	bd80      	pop	{r7, pc}

08002644 <gps_printData>:
 		println("[LoRa] PACKET SENT!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!");
	}
}

static void gps_printData(void)
{
 8002644:	b580      	push	{r7, lr}
 8002646:	b082      	sub	sp, #8
 8002648:	af00      	add	r7, sp, #0
	// read data from the GPS in the 'main loop'
	char c = GPS_read(&gps);
 800264a:	4884      	ldr	r0, [pc, #528]	; (800285c <gps_printData+0x218>)
 800264c:	f7fe fd0c 	bl	8001068 <GPS_read>
 8002650:	4603      	mov	r3, r0
 8002652:	71fb      	strb	r3, [r7, #7]
	// if you want to debug, this is a good time to do it!
	char* ca[1] = {c};
 8002654:	79fb      	ldrb	r3, [r7, #7]
 8002656:	603b      	str	r3, [r7, #0]
	if (GPSECHO && c) print(ca);
	// if a sentence is received, we can check the checksum, parse it...
	if (GPS_newNMEAreceived(&gps))
 8002658:	4880      	ldr	r0, [pc, #512]	; (800285c <gps_printData+0x218>)
 800265a:	f7ff fe36 	bl	80022ca <GPS_newNMEAreceived>
 800265e:	4603      	mov	r3, r0
 8002660:	2b00      	cmp	r3, #0
 8002662:	d00e      	beq.n	8002682 <gps_printData+0x3e>
	{
		// a tricky thing here is if we print the NMEA sentence, or data
		// we end up not listening and catching other sentences!
		// so be very wary if using OUTPUT_ALLDATA and trying to print out data
		//println(GPS_lastNMEA(&gps)); // this also sets the newNMEAreceived() flag to false
		if (!GPS_parse(&gps, GPS_lastNMEA(&gps))) // this also sets the newNMEAreceived() flag to false
 8002664:	487d      	ldr	r0, [pc, #500]	; (800285c <gps_printData+0x218>)
 8002666:	f7ff fe3e 	bl	80022e6 <GPS_lastNMEA>
 800266a:	4603      	mov	r3, r0
 800266c:	4619      	mov	r1, r3
 800266e:	487b      	ldr	r0, [pc, #492]	; (800285c <gps_printData+0x218>)
 8002670:	f7fe fee0 	bl	8001434 <GPS_parse>
 8002674:	4603      	mov	r3, r0
 8002676:	f083 0301 	eor.w	r3, r3, #1
 800267a:	b2db      	uxtb	r3, r3
 800267c:	2b00      	cmp	r3, #0
 800267e:	f040 80e9 	bne.w	8002854 <gps_printData+0x210>
		  return; // we can fail to parse a sentence in which case we should just wait for another
	}
	// if millis() or timenow wraps around, we'll just reset it
	if (timenow > millis()) timenow = millis();
 8002682:	f7ff ff7d 	bl	8002580 <millis>
 8002686:	4602      	mov	r2, r0
 8002688:	4b75      	ldr	r3, [pc, #468]	; (8002860 <gps_printData+0x21c>)
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	429a      	cmp	r2, r3
 800268e:	d204      	bcs.n	800269a <gps_printData+0x56>
 8002690:	f7ff ff76 	bl	8002580 <millis>
 8002694:	4602      	mov	r2, r0
 8002696:	4b72      	ldr	r3, [pc, #456]	; (8002860 <gps_printData+0x21c>)
 8002698:	601a      	str	r2, [r3, #0]

	// approximately every 2 seconds or so, print out the current stats
	if (millis() - timenow > 2000)
 800269a:	f7ff ff71 	bl	8002580 <millis>
 800269e:	4602      	mov	r2, r0
 80026a0:	4b6f      	ldr	r3, [pc, #444]	; (8002860 <gps_printData+0x21c>)
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	1ad3      	subs	r3, r2, r3
 80026a6:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80026aa:	f240 80d4 	bls.w	8002856 <gps_printData+0x212>
	{
		timenow = millis(); // reset the timenow
 80026ae:	f7ff ff67 	bl	8002580 <millis>
 80026b2:	4602      	mov	r2, r0
 80026b4:	4b6a      	ldr	r3, [pc, #424]	; (8002860 <gps_printData+0x21c>)
 80026b6:	601a      	str	r2, [r3, #0]
		print("\r\nTime: ");
 80026b8:	486a      	ldr	r0, [pc, #424]	; (8002864 <gps_printData+0x220>)
 80026ba:	f7ff fe4b 	bl	8002354 <print>
		if (gps.gpsTime.hour < 10) { print_char('0'); }
 80026be:	4b67      	ldr	r3, [pc, #412]	; (800285c <gps_printData+0x218>)
 80026c0:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 80026c4:	2b09      	cmp	r3, #9
 80026c6:	d802      	bhi.n	80026ce <gps_printData+0x8a>
 80026c8:	2030      	movs	r0, #48	; 0x30
 80026ca:	f7ff ff37 	bl	800253c <print_char>
		print_int(gps.gpsTime.hour); print_char(':');
 80026ce:	4b63      	ldr	r3, [pc, #396]	; (800285c <gps_printData+0x218>)
 80026d0:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 80026d4:	4618      	mov	r0, r3
 80026d6:	f7ff fecd 	bl	8002474 <print_int>
 80026da:	203a      	movs	r0, #58	; 0x3a
 80026dc:	f7ff ff2e 	bl	800253c <print_char>
		if (gps.gpsTime.minute < 10) { print_char('0'); }
 80026e0:	4b5e      	ldr	r3, [pc, #376]	; (800285c <gps_printData+0x218>)
 80026e2:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 80026e6:	2b09      	cmp	r3, #9
 80026e8:	d802      	bhi.n	80026f0 <gps_printData+0xac>
 80026ea:	2030      	movs	r0, #48	; 0x30
 80026ec:	f7ff ff26 	bl	800253c <print_char>
		print_int(gps.gpsTime.minute); print_char(':');
 80026f0:	4b5a      	ldr	r3, [pc, #360]	; (800285c <gps_printData+0x218>)
 80026f2:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 80026f6:	4618      	mov	r0, r3
 80026f8:	f7ff febc 	bl	8002474 <print_int>
 80026fc:	203a      	movs	r0, #58	; 0x3a
 80026fe:	f7ff ff1d 	bl	800253c <print_char>
		if (gps.gpsTime.second < 10) { print_char('0'); }
 8002702:	4b56      	ldr	r3, [pc, #344]	; (800285c <gps_printData+0x218>)
 8002704:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002708:	2b09      	cmp	r3, #9
 800270a:	d802      	bhi.n	8002712 <gps_printData+0xce>
 800270c:	2030      	movs	r0, #48	; 0x30
 800270e:	f7ff ff15 	bl	800253c <print_char>
		print_int(gps.gpsTime.second); print_char('.');
 8002712:	4b52      	ldr	r3, [pc, #328]	; (800285c <gps_printData+0x218>)
 8002714:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002718:	4618      	mov	r0, r3
 800271a:	f7ff feab 	bl	8002474 <print_int>
 800271e:	202e      	movs	r0, #46	; 0x2e
 8002720:	f7ff ff0c 	bl	800253c <print_char>
		if (gps.gpsTime.msecond < 10)
 8002724:	4b4d      	ldr	r3, [pc, #308]	; (800285c <gps_printData+0x218>)
 8002726:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 8002728:	2b09      	cmp	r3, #9
 800272a:	d803      	bhi.n	8002734 <gps_printData+0xf0>
		{
			print("00");
 800272c:	484e      	ldr	r0, [pc, #312]	; (8002868 <gps_printData+0x224>)
 800272e:	f7ff fe11 	bl	8002354 <print>
 8002732:	e00a      	b.n	800274a <gps_printData+0x106>
		}
		else if (gps.gpsTime.msecond > 9 && gps.gpsTime.msecond < 100)
 8002734:	4b49      	ldr	r3, [pc, #292]	; (800285c <gps_printData+0x218>)
 8002736:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 8002738:	2b09      	cmp	r3, #9
 800273a:	d906      	bls.n	800274a <gps_printData+0x106>
 800273c:	4b47      	ldr	r3, [pc, #284]	; (800285c <gps_printData+0x218>)
 800273e:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 8002740:	2b63      	cmp	r3, #99	; 0x63
 8002742:	d802      	bhi.n	800274a <gps_printData+0x106>
		{
			print("0");
 8002744:	4849      	ldr	r0, [pc, #292]	; (800286c <gps_printData+0x228>)
 8002746:	f7ff fe05 	bl	8002354 <print>
		}
		print_int(gps.gpsTime.msecond);
 800274a:	4b44      	ldr	r3, [pc, #272]	; (800285c <gps_printData+0x218>)
 800274c:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 800274e:	4618      	mov	r0, r3
 8002750:	f7ff fe90 	bl	8002474 <print_int>
		print("\r\nDate: ");
 8002754:	4846      	ldr	r0, [pc, #280]	; (8002870 <gps_printData+0x22c>)
 8002756:	f7ff fdfd 	bl	8002354 <print>
		print_int(gps.gpsTime.dayM); print_char('/');
 800275a:	4b40      	ldr	r3, [pc, #256]	; (800285c <gps_printData+0x218>)
 800275c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002760:	4618      	mov	r0, r3
 8002762:	f7ff fe87 	bl	8002474 <print_int>
 8002766:	202f      	movs	r0, #47	; 0x2f
 8002768:	f7ff fee8 	bl	800253c <print_char>
		print_int(gps.gpsTime.month); print("/20");
 800276c:	4b3b      	ldr	r3, [pc, #236]	; (800285c <gps_printData+0x218>)
 800276e:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 8002772:	4618      	mov	r0, r3
 8002774:	f7ff fe7e 	bl	8002474 <print_int>
 8002778:	483e      	ldr	r0, [pc, #248]	; (8002874 <gps_printData+0x230>)
 800277a:	f7ff fdeb 	bl	8002354 <print>
		print_int(gps.gpsTime.year); println("");
 800277e:	4b37      	ldr	r3, [pc, #220]	; (800285c <gps_printData+0x218>)
 8002780:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8002784:	4618      	mov	r0, r3
 8002786:	f7ff fe75 	bl	8002474 <print_int>
 800278a:	483b      	ldr	r0, [pc, #236]	; (8002878 <gps_printData+0x234>)
 800278c:	f7ff fe04 	bl	8002398 <println>
		print("\r\nFix: "); print_int((int)gps.fix);
 8002790:	483a      	ldr	r0, [pc, #232]	; (800287c <gps_printData+0x238>)
 8002792:	f7ff fddf 	bl	8002354 <print>
 8002796:	4b31      	ldr	r3, [pc, #196]	; (800285c <gps_printData+0x218>)
 8002798:	f893 3077 	ldrb.w	r3, [r3, #119]	; 0x77
 800279c:	4618      	mov	r0, r3
 800279e:	f7ff fe69 	bl	8002474 <print_int>
		print(" quality: "); print_int((int)gps.fixquality); println("");
 80027a2:	4837      	ldr	r0, [pc, #220]	; (8002880 <gps_printData+0x23c>)
 80027a4:	f7ff fdd6 	bl	8002354 <print>
 80027a8:	4b2c      	ldr	r3, [pc, #176]	; (800285c <gps_printData+0x218>)
 80027aa:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 80027ae:	4618      	mov	r0, r3
 80027b0:	f7ff fe60 	bl	8002474 <print_int>
 80027b4:	4830      	ldr	r0, [pc, #192]	; (8002878 <gps_printData+0x234>)
 80027b6:	f7ff fdef 	bl	8002398 <println>
		if (gps.fix)
 80027ba:	4b28      	ldr	r3, [pc, #160]	; (800285c <gps_printData+0x218>)
 80027bc:	f893 3077 	ldrb.w	r3, [r3, #119]	; 0x77
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d048      	beq.n	8002856 <gps_printData+0x212>
		{
			print("Location: ");
 80027c4:	482f      	ldr	r0, [pc, #188]	; (8002884 <gps_printData+0x240>)
 80027c6:	f7ff fdc5 	bl	8002354 <print>
			print_float(gps.latitudeDegrees); print_char(gps.lat);
 80027ca:	4b24      	ldr	r3, [pc, #144]	; (800285c <gps_printData+0x218>)
 80027cc:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 80027d0:	eeb0 0a67 	vmov.f32	s0, s15
 80027d4:	f7ff fe7c 	bl	80024d0 <print_float>
 80027d8:	4b20      	ldr	r3, [pc, #128]	; (800285c <gps_printData+0x218>)
 80027da:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80027de:	4618      	mov	r0, r3
 80027e0:	f7ff feac 	bl	800253c <print_char>
			print(", ");
 80027e4:	4828      	ldr	r0, [pc, #160]	; (8002888 <gps_printData+0x244>)
 80027e6:	f7ff fdb5 	bl	8002354 <print>
			print_float(gps.longitudeDegrees); print_char(gps.lon);
 80027ea:	4b1c      	ldr	r3, [pc, #112]	; (800285c <gps_printData+0x218>)
 80027ec:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 80027f0:	eeb0 0a67 	vmov.f32	s0, s15
 80027f4:	f7ff fe6c 	bl	80024d0 <print_float>
 80027f8:	4b18      	ldr	r3, [pc, #96]	; (800285c <gps_printData+0x218>)
 80027fa:	f893 3075 	ldrb.w	r3, [r3, #117]	; 0x75
 80027fe:	4618      	mov	r0, r3
 8002800:	f7ff fe9c 	bl	800253c <print_char>
			print("Speed (knots): "); print_float(gps.speed);
 8002804:	4821      	ldr	r0, [pc, #132]	; (800288c <gps_printData+0x248>)
 8002806:	f7ff fda5 	bl	8002354 <print>
 800280a:	4b14      	ldr	r3, [pc, #80]	; (800285c <gps_printData+0x218>)
 800280c:	edd3 7a17 	vldr	s15, [r3, #92]	; 0x5c
 8002810:	eeb0 0a67 	vmov.f32	s0, s15
 8002814:	f7ff fe5c 	bl	80024d0 <print_float>
			print("\r\nAngle: "); print_float(gps.angle);
 8002818:	481d      	ldr	r0, [pc, #116]	; (8002890 <gps_printData+0x24c>)
 800281a:	f7ff fd9b 	bl	8002354 <print>
 800281e:	4b0f      	ldr	r3, [pc, #60]	; (800285c <gps_printData+0x218>)
 8002820:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 8002824:	eeb0 0a67 	vmov.f32	s0, s15
 8002828:	f7ff fe52 	bl	80024d0 <print_float>
			print("\r\nAltitude: "); print_float(gps.altitude);
 800282c:	4819      	ldr	r0, [pc, #100]	; (8002894 <gps_printData+0x250>)
 800282e:	f7ff fd91 	bl	8002354 <print>
 8002832:	4b0a      	ldr	r3, [pc, #40]	; (800285c <gps_printData+0x218>)
 8002834:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 8002838:	eeb0 0a67 	vmov.f32	s0, s15
 800283c:	f7ff fe48 	bl	80024d0 <print_float>
			print("\r\nSatellites: "); print_int((int)gps.satellites);
 8002840:	4815      	ldr	r0, [pc, #84]	; (8002898 <gps_printData+0x254>)
 8002842:	f7ff fd87 	bl	8002354 <print>
 8002846:	4b05      	ldr	r3, [pc, #20]	; (800285c <gps_printData+0x218>)
 8002848:	f893 307a 	ldrb.w	r3, [r3, #122]	; 0x7a
 800284c:	4618      	mov	r0, r3
 800284e:	f7ff fe11 	bl	8002474 <print_int>
 8002852:	e000      	b.n	8002856 <gps_printData+0x212>
		  return; // we can fail to parse a sentence in which case we should just wait for another
 8002854:	bf00      	nop
		}
	}
}
 8002856:	3708      	adds	r7, #8
 8002858:	46bd      	mov	sp, r7
 800285a:	bd80      	pop	{r7, pc}
 800285c:	20000998 	.word	0x20000998
 8002860:	20000e2c 	.word	0x20000e2c
 8002864:	080120d4 	.word	0x080120d4
 8002868:	080120e0 	.word	0x080120e0
 800286c:	080120e4 	.word	0x080120e4
 8002870:	080120e8 	.word	0x080120e8
 8002874:	080120f4 	.word	0x080120f4
 8002878:	0801208c 	.word	0x0801208c
 800287c:	080120f8 	.word	0x080120f8
 8002880:	08012100 	.word	0x08012100
 8002884:	0801210c 	.word	0x0801210c
 8002888:	08012118 	.word	0x08012118
 800288c:	0801211c 	.word	0x0801211c
 8002890:	0801212c 	.word	0x0801212c
 8002894:	08012138 	.word	0x08012138
 8002898:	08012148 	.word	0x08012148

0800289c <gps_begin>:
	}

	return true;
}
static bool gps_begin(void)
{
 800289c:	b580      	push	{r7, lr}
 800289e:	af00      	add	r7, sp, #0
	println("[GPS] Begin...");
 80028a0:	4811      	ldr	r0, [pc, #68]	; (80028e8 <gps_begin+0x4c>)
 80028a2:	f7ff fd79 	bl	8002398 <println>
	gps.uart = Get_UART3_Instance();
 80028a6:	f000 fd0b 	bl	80032c0 <Get_UART3_Instance>
 80028aa:	4602      	mov	r2, r0
 80028ac:	4b0f      	ldr	r3, [pc, #60]	; (80028ec <gps_begin+0x50>)
 80028ae:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
	// 9600 NMEA is the default baud rate for Adafruit MTK GPS's- some use 4800
	GPS_init(&gps);
 80028b2:	480e      	ldr	r0, [pc, #56]	; (80028ec <gps_begin+0x50>)
 80028b4:	f7fe fc6c 	bl	8001190 <GPS_init>
	// uncomment this line to turn on RMC (recommended minimum) and GGA (fix data) including altitude
	GPS_sendCommand(&gps, PMTK_SET_NMEA_OUTPUT_ALLDATA);
 80028b8:	490d      	ldr	r1, [pc, #52]	; (80028f0 <gps_begin+0x54>)
 80028ba:	480c      	ldr	r0, [pc, #48]	; (80028ec <gps_begin+0x50>)
 80028bc:	f7fe fd8a 	bl	80013d4 <GPS_sendCommand>
	// uncomment this line to turn on only the "minimum recommended" data
	//GPS.sendCommand(PMTK_SET_NMEA_OUTPUT_RMCONLY);
	// For parsing data, we don't suggest using anything but either RMC only or RMC+GGA since
	// the parser doesn't care about other sentences at this time
	// Set the update rate
	GPS_sendCommand(&gps, PMTK_SET_NMEA_UPDATE_1HZ); // 1 Hz update rate
 80028c0:	490c      	ldr	r1, [pc, #48]	; (80028f4 <gps_begin+0x58>)
 80028c2:	480a      	ldr	r0, [pc, #40]	; (80028ec <gps_begin+0x50>)
 80028c4:	f7fe fd86 	bl	80013d4 <GPS_sendCommand>
	// For the parsing code to work nicely and have time to sort thru the data, and
	// print it out we don't suggest using anything higher than 1 Hz

	// Request updates on antenna status, comment out to keep quiet
	GPS_sendCommand(&gps, PGCMD_ANTENNA);
 80028c8:	490b      	ldr	r1, [pc, #44]	; (80028f8 <gps_begin+0x5c>)
 80028ca:	4808      	ldr	r0, [pc, #32]	; (80028ec <gps_begin+0x50>)
 80028cc:	f7fe fd82 	bl	80013d4 <GPS_sendCommand>

	HAL_Delay(1000);
 80028d0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80028d4:	f001 f990 	bl	8003bf8 <HAL_Delay>

	// Ask for firmware version
	GPS_sendCommand(&gps, PMTK_Q_RELEASE);
 80028d8:	4908      	ldr	r1, [pc, #32]	; (80028fc <gps_begin+0x60>)
 80028da:	4804      	ldr	r0, [pc, #16]	; (80028ec <gps_begin+0x50>)
 80028dc:	f7fe fd7a 	bl	80013d4 <GPS_sendCommand>
}
 80028e0:	bf00      	nop
 80028e2:	4618      	mov	r0, r3
 80028e4:	bd80      	pop	{r7, pc}
 80028e6:	bf00      	nop
 80028e8:	08012368 	.word	0x08012368
 80028ec:	20000998 	.word	0x20000998
 80028f0:	08012378 	.word	0x08012378
 80028f4:	080123ac 	.word	0x080123ac
 80028f8:	080123c0 	.word	0x080123c0
 80028fc:	080123d0 	.word	0x080123d0

08002900 <setupPins>:


static void setupPins(void)
{
 8002900:	b580      	push	{r7, lr}
 8002902:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LEDA_GPIO_Port, LEDA_Pin, GPIO_PIN_RESET);
 8002904:	2200      	movs	r2, #0
 8002906:	2180      	movs	r1, #128	; 0x80
 8002908:	481c      	ldr	r0, [pc, #112]	; (800297c <setupPins+0x7c>)
 800290a:	f001 fff7 	bl	80048fc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LEDB_GPIO_Port, LEDB_Pin, GPIO_PIN_RESET);
 800290e:	2200      	movs	r2, #0
 8002910:	2140      	movs	r1, #64	; 0x40
 8002912:	481a      	ldr	r0, [pc, #104]	; (800297c <setupPins+0x7c>)
 8002914:	f001 fff2 	bl	80048fc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LEDC_GPIO_Port, LEDC_Pin, GPIO_PIN_RESET);
 8002918:	2200      	movs	r2, #0
 800291a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800291e:	4818      	ldr	r0, [pc, #96]	; (8002980 <setupPins+0x80>)
 8002920:	f001 ffec 	bl	80048fc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LEDD_GPIO_Port, LEDD_Pin, GPIO_PIN_RESET);
 8002924:	2200      	movs	r2, #0
 8002926:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800292a:	4815      	ldr	r0, [pc, #84]	; (8002980 <setupPins+0x80>)
 800292c:	f001 ffe6 	bl	80048fc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PH_L_GPIO_Port, PH_L_Pin, GPIO_PIN_RESET);
 8002930:	2200      	movs	r2, #0
 8002932:	2101      	movs	r1, #1
 8002934:	4813      	ldr	r0, [pc, #76]	; (8002984 <setupPins+0x84>)
 8002936:	f001 ffe1 	bl	80048fc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PH_R_GPIO_Port, PH_R_Pin, GPIO_PIN_RESET);
 800293a:	2200      	movs	r2, #0
 800293c:	2104      	movs	r1, #4
 800293e:	4811      	ldr	r0, [pc, #68]	; (8002984 <setupPins+0x84>)
 8002940:	f001 ffdc 	bl	80048fc <HAL_GPIO_WritePin>
	//HAL_GPIO_WritePin(EN_L_GPIO_Port, EN_L_Pin, GPIO_PIN_RESET);
	//HAL_GPIO_WritePin(EN_R_GPIO_Port, EN_R_Pin, GPIO_PIN_RESET);
	HAL_GPIO_WritePin(P1_GPIO_Port, P1_Pin, GPIO_PIN_RESET);
 8002944:	2200      	movs	r2, #0
 8002946:	2101      	movs	r1, #1
 8002948:	480c      	ldr	r0, [pc, #48]	; (800297c <setupPins+0x7c>)
 800294a:	f001 ffd7 	bl	80048fc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(P2_GPIO_Port, P2_Pin, GPIO_PIN_RESET);
 800294e:	2200      	movs	r2, #0
 8002950:	2104      	movs	r1, #4
 8002952:	480a      	ldr	r0, [pc, #40]	; (800297c <setupPins+0x7c>)
 8002954:	f001 ffd2 	bl	80048fc <HAL_GPIO_WritePin>
	//HAL_GPIO_WritePin(P3_GPIO_Port, P3_Pin, GPIO_PIN_RESET);
	HAL_GPIO_WritePin(P4_GPIO_Port, P4_Pin, GPIO_PIN_RESET);
 8002958:	2200      	movs	r2, #0
 800295a:	2102      	movs	r1, #2
 800295c:	4807      	ldr	r0, [pc, #28]	; (800297c <setupPins+0x7c>)
 800295e:	f001 ffcd 	bl	80048fc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(P5_GPIO_Port, P5_Pin, GPIO_PIN_RESET);
 8002962:	2200      	movs	r2, #0
 8002964:	2108      	movs	r1, #8
 8002966:	4805      	ldr	r0, [pc, #20]	; (800297c <setupPins+0x7c>)
 8002968:	f001 ffc8 	bl	80048fc <HAL_GPIO_WritePin>
	//HAL_GPIO_WritePin(P6_GPIO_Port, P6_Pin, GPIO_PIN_RESET);
	HAL_GPIO_WritePin(P7_GPIO_Port, P7_Pin, GPIO_PIN_RESET);
 800296c:	2200      	movs	r2, #0
 800296e:	2110      	movs	r1, #16
 8002970:	4804      	ldr	r0, [pc, #16]	; (8002984 <setupPins+0x84>)
 8002972:	f001 ffc3 	bl	80048fc <HAL_GPIO_WritePin>
}
 8002976:	bf00      	nop
 8002978:	bd80      	pop	{r7, pc}
 800297a:	bf00      	nop
 800297c:	40020800 	.word	0x40020800
 8002980:	40020400 	.word	0x40020400
 8002984:	40020000 	.word	0x40020000

08002988 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002988:	b580      	push	{r7, lr}
 800298a:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800298c:	f001 f8c2 	bl	8003b14 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002990:	f000 f832 	bl	80029f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002994:	f000 fbae 	bl	80030f4 <MX_GPIO_Init>
  MX_DMA_Init();
 8002998:	f000 fb74 	bl	8003084 <MX_DMA_Init>
  MX_SDIO_SD_Init();
 800299c:	f000 f902 	bl	8002ba4 <MX_SDIO_SD_Init>
  MX_FATFS_Init();
 80029a0:	f009 f8ee 	bl	800bb80 <MX_FATFS_Init>
  MX_I2C1_Init();
 80029a4:	f000 f8aa 	bl	8002afc <MX_I2C1_Init>
  MX_USB_DEVICE_Init();
 80029a8:	f00a ff36 	bl	800d818 <MX_USB_DEVICE_Init>
  MX_SPI1_Init();
 80029ac:	f000 f91a 	bl	8002be4 <MX_SPI1_Init>
  MX_USART3_UART_Init();
 80029b0:	f000 fb3e 	bl	8003030 <MX_USART3_UART_Init>
  MX_RTC_Init();
 80029b4:	f000 f8d0 	bl	8002b58 <MX_RTC_Init>
  MX_TIM2_Init();
 80029b8:	f000 f99c 	bl	8002cf4 <MX_TIM2_Init>
  MX_TIM5_Init();
 80029bc:	f000 fab6 	bl	8002f2c <MX_TIM5_Init>
  MX_TIM4_Init();
 80029c0:	f000 fa66 	bl	8002e90 <MX_TIM4_Init>
  MX_TIM1_Init();
 80029c4:	f000 f944 	bl	8002c50 <MX_TIM1_Init>
  MX_TIM3_Init();
 80029c8:	f000 f9e0 	bl	8002d8c <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  // Start millisecond timer
  HAL_TIM_Base_Start(&htim1);
 80029cc:	4807      	ldr	r0, [pc, #28]	; (80029ec <main+0x64>)
 80029ce:	f005 fd62 	bl	8008496 <HAL_TIM_Base_Start>

  // Start servo1 timer
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 80029d2:	2108      	movs	r1, #8
 80029d4:	4806      	ldr	r0, [pc, #24]	; (80029f0 <main+0x68>)
 80029d6:	f005 fddb 	bl	8008590 <HAL_TIM_PWM_Start>

  // Execute code
  setup();
 80029da:	f7ff fde3 	bl	80025a4 <setup>


  // Start motor timeout interrupt timer
  HAL_TIM_Base_Start_IT(&htim4);
 80029de:	4805      	ldr	r0, [pc, #20]	; (80029f4 <main+0x6c>)
 80029e0:	f005 fd7d 	bl	80084de <HAL_TIM_Base_Start_IT>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	// Execute code
	loop();
 80029e4:	f7ff fe28 	bl	8002638 <loop>
 80029e8:	e7fc      	b.n	80029e4 <main+0x5c>
 80029ea:	bf00      	nop
 80029ec:	20001064 	.word	0x20001064
 80029f0:	20000fa4 	.word	0x20000fa4
 80029f4:	20000e90 	.word	0x20000e90

080029f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80029f8:	b580      	push	{r7, lr}
 80029fa:	b098      	sub	sp, #96	; 0x60
 80029fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80029fe:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002a02:	2230      	movs	r2, #48	; 0x30
 8002a04:	2100      	movs	r1, #0
 8002a06:	4618      	mov	r0, r3
 8002a08:	f00b fc7b 	bl	800e302 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002a0c:	f107 031c 	add.w	r3, r7, #28
 8002a10:	2200      	movs	r2, #0
 8002a12:	601a      	str	r2, [r3, #0]
 8002a14:	605a      	str	r2, [r3, #4]
 8002a16:	609a      	str	r2, [r3, #8]
 8002a18:	60da      	str	r2, [r3, #12]
 8002a1a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002a1c:	f107 030c 	add.w	r3, r7, #12
 8002a20:	2200      	movs	r2, #0
 8002a22:	601a      	str	r2, [r3, #0]
 8002a24:	605a      	str	r2, [r3, #4]
 8002a26:	609a      	str	r2, [r3, #8]
 8002a28:	60da      	str	r2, [r3, #12]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002a2a:	2300      	movs	r3, #0
 8002a2c:	60bb      	str	r3, [r7, #8]
 8002a2e:	4b31      	ldr	r3, [pc, #196]	; (8002af4 <SystemClock_Config+0xfc>)
 8002a30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a32:	4a30      	ldr	r2, [pc, #192]	; (8002af4 <SystemClock_Config+0xfc>)
 8002a34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a38:	6413      	str	r3, [r2, #64]	; 0x40
 8002a3a:	4b2e      	ldr	r3, [pc, #184]	; (8002af4 <SystemClock_Config+0xfc>)
 8002a3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a42:	60bb      	str	r3, [r7, #8]
 8002a44:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002a46:	2300      	movs	r3, #0
 8002a48:	607b      	str	r3, [r7, #4]
 8002a4a:	4b2b      	ldr	r3, [pc, #172]	; (8002af8 <SystemClock_Config+0x100>)
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	4a2a      	ldr	r2, [pc, #168]	; (8002af8 <SystemClock_Config+0x100>)
 8002a50:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002a54:	6013      	str	r3, [r2, #0]
 8002a56:	4b28      	ldr	r3, [pc, #160]	; (8002af8 <SystemClock_Config+0x100>)
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a5e:	607b      	str	r3, [r7, #4]
 8002a60:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 8002a62:	2305      	movs	r3, #5
 8002a64:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002a66:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002a6a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8002a6c:	2301      	movs	r3, #1
 8002a6e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002a70:	2302      	movs	r3, #2
 8002a72:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002a74:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002a78:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 6;
 8002a7a:	2306      	movs	r3, #6
 8002a7c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 168;
 8002a7e:	23a8      	movs	r3, #168	; 0xa8
 8002a80:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002a82:	2302      	movs	r3, #2
 8002a84:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8002a86:	2307      	movs	r3, #7
 8002a88:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002a8a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002a8e:	4618      	mov	r0, r3
 8002a90:	f003 fa34 	bl	8005efc <HAL_RCC_OscConfig>
 8002a94:	4603      	mov	r3, r0
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d001      	beq.n	8002a9e <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8002a9a:	f000 fc1b 	bl	80032d4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002a9e:	230f      	movs	r3, #15
 8002aa0:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002aa2:	2302      	movs	r3, #2
 8002aa4:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002aa6:	2300      	movs	r3, #0
 8002aa8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002aaa:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002aae:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002ab0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002ab4:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8002ab6:	f107 031c 	add.w	r3, r7, #28
 8002aba:	2105      	movs	r1, #5
 8002abc:	4618      	mov	r0, r3
 8002abe:	f003 fc8d 	bl	80063dc <HAL_RCC_ClockConfig>
 8002ac2:	4603      	mov	r3, r0
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d001      	beq.n	8002acc <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8002ac8:	f000 fc04 	bl	80032d4 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8002acc:	2302      	movs	r3, #2
 8002ace:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8002ad0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002ad4:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002ad6:	f107 030c 	add.w	r3, r7, #12
 8002ada:	4618      	mov	r0, r3
 8002adc:	f003 fe4a 	bl	8006774 <HAL_RCCEx_PeriphCLKConfig>
 8002ae0:	4603      	mov	r3, r0
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d001      	beq.n	8002aea <SystemClock_Config+0xf2>
  {
    Error_Handler();
 8002ae6:	f000 fbf5 	bl	80032d4 <Error_Handler>
  }
}
 8002aea:	bf00      	nop
 8002aec:	3760      	adds	r7, #96	; 0x60
 8002aee:	46bd      	mov	sp, r7
 8002af0:	bd80      	pop	{r7, pc}
 8002af2:	bf00      	nop
 8002af4:	40023800 	.word	0x40023800
 8002af8:	40007000 	.word	0x40007000

08002afc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002afc:	b580      	push	{r7, lr}
 8002afe:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002b00:	4b12      	ldr	r3, [pc, #72]	; (8002b4c <MX_I2C1_Init+0x50>)
 8002b02:	4a13      	ldr	r2, [pc, #76]	; (8002b50 <MX_I2C1_Init+0x54>)
 8002b04:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8002b06:	4b11      	ldr	r3, [pc, #68]	; (8002b4c <MX_I2C1_Init+0x50>)
 8002b08:	4a12      	ldr	r2, [pc, #72]	; (8002b54 <MX_I2C1_Init+0x58>)
 8002b0a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002b0c:	4b0f      	ldr	r3, [pc, #60]	; (8002b4c <MX_I2C1_Init+0x50>)
 8002b0e:	2200      	movs	r2, #0
 8002b10:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8002b12:	4b0e      	ldr	r3, [pc, #56]	; (8002b4c <MX_I2C1_Init+0x50>)
 8002b14:	2200      	movs	r2, #0
 8002b16:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002b18:	4b0c      	ldr	r3, [pc, #48]	; (8002b4c <MX_I2C1_Init+0x50>)
 8002b1a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002b1e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002b20:	4b0a      	ldr	r3, [pc, #40]	; (8002b4c <MX_I2C1_Init+0x50>)
 8002b22:	2200      	movs	r2, #0
 8002b24:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8002b26:	4b09      	ldr	r3, [pc, #36]	; (8002b4c <MX_I2C1_Init+0x50>)
 8002b28:	2200      	movs	r2, #0
 8002b2a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002b2c:	4b07      	ldr	r3, [pc, #28]	; (8002b4c <MX_I2C1_Init+0x50>)
 8002b2e:	2200      	movs	r2, #0
 8002b30:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002b32:	4b06      	ldr	r3, [pc, #24]	; (8002b4c <MX_I2C1_Init+0x50>)
 8002b34:	2200      	movs	r2, #0
 8002b36:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002b38:	4804      	ldr	r0, [pc, #16]	; (8002b4c <MX_I2C1_Init+0x50>)
 8002b3a:	f001 ff1d 	bl	8004978 <HAL_I2C_Init>
 8002b3e:	4603      	mov	r3, r0
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d001      	beq.n	8002b48 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002b44:	f000 fbc6 	bl	80032d4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002b48:	bf00      	nop
 8002b4a:	bd80      	pop	{r7, pc}
 8002b4c:	20000f10 	.word	0x20000f10
 8002b50:	40005400 	.word	0x40005400
 8002b54:	00061a80 	.word	0x00061a80

08002b58 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8002b58:	b580      	push	{r7, lr}
 8002b5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only 
  */
  hrtc.Instance = RTC;
 8002b5c:	4b0f      	ldr	r3, [pc, #60]	; (8002b9c <MX_RTC_Init+0x44>)
 8002b5e:	4a10      	ldr	r2, [pc, #64]	; (8002ba0 <MX_RTC_Init+0x48>)
 8002b60:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8002b62:	4b0e      	ldr	r3, [pc, #56]	; (8002b9c <MX_RTC_Init+0x44>)
 8002b64:	2200      	movs	r2, #0
 8002b66:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8002b68:	4b0c      	ldr	r3, [pc, #48]	; (8002b9c <MX_RTC_Init+0x44>)
 8002b6a:	227f      	movs	r2, #127	; 0x7f
 8002b6c:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8002b6e:	4b0b      	ldr	r3, [pc, #44]	; (8002b9c <MX_RTC_Init+0x44>)
 8002b70:	22ff      	movs	r2, #255	; 0xff
 8002b72:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8002b74:	4b09      	ldr	r3, [pc, #36]	; (8002b9c <MX_RTC_Init+0x44>)
 8002b76:	2200      	movs	r2, #0
 8002b78:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8002b7a:	4b08      	ldr	r3, [pc, #32]	; (8002b9c <MX_RTC_Init+0x44>)
 8002b7c:	2200      	movs	r2, #0
 8002b7e:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8002b80:	4b06      	ldr	r3, [pc, #24]	; (8002b9c <MX_RTC_Init+0x44>)
 8002b82:	2200      	movs	r2, #0
 8002b84:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8002b86:	4805      	ldr	r0, [pc, #20]	; (8002b9c <MX_RTC_Init+0x44>)
 8002b88:	f003 fed6 	bl	8006938 <HAL_RTC_Init>
 8002b8c:	4603      	mov	r3, r0
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d001      	beq.n	8002b96 <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 8002b92:	f000 fb9f 	bl	80032d4 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8002b96:	bf00      	nop
 8002b98:	bd80      	pop	{r7, pc}
 8002b9a:	bf00      	nop
 8002b9c:	20000fe4 	.word	0x20000fe4
 8002ba0:	40002800 	.word	0x40002800

08002ba4 <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 8002ba4:	b480      	push	{r7}
 8002ba6:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 8002ba8:	4b0c      	ldr	r3, [pc, #48]	; (8002bdc <MX_SDIO_SD_Init+0x38>)
 8002baa:	4a0d      	ldr	r2, [pc, #52]	; (8002be0 <MX_SDIO_SD_Init+0x3c>)
 8002bac:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 8002bae:	4b0b      	ldr	r3, [pc, #44]	; (8002bdc <MX_SDIO_SD_Init+0x38>)
 8002bb0:	2200      	movs	r2, #0
 8002bb2:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8002bb4:	4b09      	ldr	r3, [pc, #36]	; (8002bdc <MX_SDIO_SD_Init+0x38>)
 8002bb6:	2200      	movs	r2, #0
 8002bb8:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8002bba:	4b08      	ldr	r3, [pc, #32]	; (8002bdc <MX_SDIO_SD_Init+0x38>)
 8002bbc:	2200      	movs	r2, #0
 8002bbe:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 8002bc0:	4b06      	ldr	r3, [pc, #24]	; (8002bdc <MX_SDIO_SD_Init+0x38>)
 8002bc2:	2200      	movs	r2, #0
 8002bc4:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8002bc6:	4b05      	ldr	r3, [pc, #20]	; (8002bdc <MX_SDIO_SD_Init+0x38>)
 8002bc8:	2200      	movs	r2, #0
 8002bca:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 0;
 8002bcc:	4b03      	ldr	r3, [pc, #12]	; (8002bdc <MX_SDIO_SD_Init+0x38>)
 8002bce:	2200      	movs	r2, #0
 8002bd0:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 8002bd2:	bf00      	nop
 8002bd4:	46bd      	mov	sp, r7
 8002bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bda:	4770      	bx	lr
 8002bdc:	200010a4 	.word	0x200010a4
 8002be0:	40012c00 	.word	0x40012c00

08002be4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8002be4:	b580      	push	{r7, lr}
 8002be6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8002be8:	4b17      	ldr	r3, [pc, #92]	; (8002c48 <MX_SPI1_Init+0x64>)
 8002bea:	4a18      	ldr	r2, [pc, #96]	; (8002c4c <MX_SPI1_Init+0x68>)
 8002bec:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002bee:	4b16      	ldr	r3, [pc, #88]	; (8002c48 <MX_SPI1_Init+0x64>)
 8002bf0:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002bf4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002bf6:	4b14      	ldr	r3, [pc, #80]	; (8002c48 <MX_SPI1_Init+0x64>)
 8002bf8:	2200      	movs	r2, #0
 8002bfa:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002bfc:	4b12      	ldr	r3, [pc, #72]	; (8002c48 <MX_SPI1_Init+0x64>)
 8002bfe:	2200      	movs	r2, #0
 8002c00:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002c02:	4b11      	ldr	r3, [pc, #68]	; (8002c48 <MX_SPI1_Init+0x64>)
 8002c04:	2200      	movs	r2, #0
 8002c06:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002c08:	4b0f      	ldr	r3, [pc, #60]	; (8002c48 <MX_SPI1_Init+0x64>)
 8002c0a:	2200      	movs	r2, #0
 8002c0c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002c0e:	4b0e      	ldr	r3, [pc, #56]	; (8002c48 <MX_SPI1_Init+0x64>)
 8002c10:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002c14:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8002c16:	4b0c      	ldr	r3, [pc, #48]	; (8002c48 <MX_SPI1_Init+0x64>)
 8002c18:	2228      	movs	r2, #40	; 0x28
 8002c1a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002c1c:	4b0a      	ldr	r3, [pc, #40]	; (8002c48 <MX_SPI1_Init+0x64>)
 8002c1e:	2200      	movs	r2, #0
 8002c20:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002c22:	4b09      	ldr	r3, [pc, #36]	; (8002c48 <MX_SPI1_Init+0x64>)
 8002c24:	2200      	movs	r2, #0
 8002c26:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002c28:	4b07      	ldr	r3, [pc, #28]	; (8002c48 <MX_SPI1_Init+0x64>)
 8002c2a:	2200      	movs	r2, #0
 8002c2c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8002c2e:	4b06      	ldr	r3, [pc, #24]	; (8002c48 <MX_SPI1_Init+0x64>)
 8002c30:	220a      	movs	r2, #10
 8002c32:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002c34:	4804      	ldr	r0, [pc, #16]	; (8002c48 <MX_SPI1_Init+0x64>)
 8002c36:	f005 fa81 	bl	800813c <HAL_SPI_Init>
 8002c3a:	4603      	mov	r3, r0
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d001      	beq.n	8002c44 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8002c40:	f000 fb48 	bl	80032d4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002c44:	bf00      	nop
 8002c46:	bd80      	pop	{r7, pc}
 8002c48:	20001128 	.word	0x20001128
 8002c4c:	40013000 	.word	0x40013000

08002c50 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002c50:	b580      	push	{r7, lr}
 8002c52:	b086      	sub	sp, #24
 8002c54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002c56:	f107 0308 	add.w	r3, r7, #8
 8002c5a:	2200      	movs	r2, #0
 8002c5c:	601a      	str	r2, [r3, #0]
 8002c5e:	605a      	str	r2, [r3, #4]
 8002c60:	609a      	str	r2, [r3, #8]
 8002c62:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002c64:	463b      	mov	r3, r7
 8002c66:	2200      	movs	r2, #0
 8002c68:	601a      	str	r2, [r3, #0]
 8002c6a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002c6c:	4b1f      	ldr	r3, [pc, #124]	; (8002cec <MX_TIM1_Init+0x9c>)
 8002c6e:	4a20      	ldr	r2, [pc, #128]	; (8002cf0 <MX_TIM1_Init+0xa0>)
 8002c70:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 16799;
 8002c72:	4b1e      	ldr	r3, [pc, #120]	; (8002cec <MX_TIM1_Init+0x9c>)
 8002c74:	f244 129f 	movw	r2, #16799	; 0x419f
 8002c78:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002c7a:	4b1c      	ldr	r3, [pc, #112]	; (8002cec <MX_TIM1_Init+0x9c>)
 8002c7c:	2200      	movs	r2, #0
 8002c7e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8002c80:	4b1a      	ldr	r3, [pc, #104]	; (8002cec <MX_TIM1_Init+0x9c>)
 8002c82:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002c86:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002c88:	4b18      	ldr	r3, [pc, #96]	; (8002cec <MX_TIM1_Init+0x9c>)
 8002c8a:	2200      	movs	r2, #0
 8002c8c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002c8e:	4b17      	ldr	r3, [pc, #92]	; (8002cec <MX_TIM1_Init+0x9c>)
 8002c90:	2200      	movs	r2, #0
 8002c92:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002c94:	4b15      	ldr	r3, [pc, #84]	; (8002cec <MX_TIM1_Init+0x9c>)
 8002c96:	2200      	movs	r2, #0
 8002c98:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002c9a:	4814      	ldr	r0, [pc, #80]	; (8002cec <MX_TIM1_Init+0x9c>)
 8002c9c:	f005 fbd0 	bl	8008440 <HAL_TIM_Base_Init>
 8002ca0:	4603      	mov	r3, r0
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d001      	beq.n	8002caa <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8002ca6:	f000 fb15 	bl	80032d4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002caa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002cae:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002cb0:	f107 0308 	add.w	r3, r7, #8
 8002cb4:	4619      	mov	r1, r3
 8002cb6:	480d      	ldr	r0, [pc, #52]	; (8002cec <MX_TIM1_Init+0x9c>)
 8002cb8:	f005 fd6e 	bl	8008798 <HAL_TIM_ConfigClockSource>
 8002cbc:	4603      	mov	r3, r0
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d001      	beq.n	8002cc6 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8002cc2:	f000 fb07 	bl	80032d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002cc6:	2300      	movs	r3, #0
 8002cc8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002cca:	2300      	movs	r3, #0
 8002ccc:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002cce:	463b      	mov	r3, r7
 8002cd0:	4619      	mov	r1, r3
 8002cd2:	4806      	ldr	r0, [pc, #24]	; (8002cec <MX_TIM1_Init+0x9c>)
 8002cd4:	f006 f928 	bl	8008f28 <HAL_TIMEx_MasterConfigSynchronization>
 8002cd8:	4603      	mov	r3, r0
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d001      	beq.n	8002ce2 <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 8002cde:	f000 faf9 	bl	80032d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8002ce2:	bf00      	nop
 8002ce4:	3718      	adds	r7, #24
 8002ce6:	46bd      	mov	sp, r7
 8002ce8:	bd80      	pop	{r7, pc}
 8002cea:	bf00      	nop
 8002cec:	20001064 	.word	0x20001064
 8002cf0:	40010000 	.word	0x40010000

08002cf4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002cf4:	b580      	push	{r7, lr}
 8002cf6:	b086      	sub	sp, #24
 8002cf8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002cfa:	f107 0308 	add.w	r3, r7, #8
 8002cfe:	2200      	movs	r2, #0
 8002d00:	601a      	str	r2, [r3, #0]
 8002d02:	605a      	str	r2, [r3, #4]
 8002d04:	609a      	str	r2, [r3, #8]
 8002d06:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002d08:	463b      	mov	r3, r7
 8002d0a:	2200      	movs	r2, #0
 8002d0c:	601a      	str	r2, [r3, #0]
 8002d0e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002d10:	4b1d      	ldr	r3, [pc, #116]	; (8002d88 <MX_TIM2_Init+0x94>)
 8002d12:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002d16:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 167;
 8002d18:	4b1b      	ldr	r3, [pc, #108]	; (8002d88 <MX_TIM2_Init+0x94>)
 8002d1a:	22a7      	movs	r2, #167	; 0xa7
 8002d1c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED2;
 8002d1e:	4b1a      	ldr	r3, [pc, #104]	; (8002d88 <MX_TIM2_Init+0x94>)
 8002d20:	2240      	movs	r2, #64	; 0x40
 8002d22:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10000;
 8002d24:	4b18      	ldr	r3, [pc, #96]	; (8002d88 <MX_TIM2_Init+0x94>)
 8002d26:	f242 7210 	movw	r2, #10000	; 0x2710
 8002d2a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002d2c:	4b16      	ldr	r3, [pc, #88]	; (8002d88 <MX_TIM2_Init+0x94>)
 8002d2e:	2200      	movs	r2, #0
 8002d30:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002d32:	4b15      	ldr	r3, [pc, #84]	; (8002d88 <MX_TIM2_Init+0x94>)
 8002d34:	2200      	movs	r2, #0
 8002d36:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002d38:	4813      	ldr	r0, [pc, #76]	; (8002d88 <MX_TIM2_Init+0x94>)
 8002d3a:	f005 fb81 	bl	8008440 <HAL_TIM_Base_Init>
 8002d3e:	4603      	mov	r3, r0
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d001      	beq.n	8002d48 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8002d44:	f000 fac6 	bl	80032d4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002d48:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002d4c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002d4e:	f107 0308 	add.w	r3, r7, #8
 8002d52:	4619      	mov	r1, r3
 8002d54:	480c      	ldr	r0, [pc, #48]	; (8002d88 <MX_TIM2_Init+0x94>)
 8002d56:	f005 fd1f 	bl	8008798 <HAL_TIM_ConfigClockSource>
 8002d5a:	4603      	mov	r3, r0
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d001      	beq.n	8002d64 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8002d60:	f000 fab8 	bl	80032d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002d64:	2300      	movs	r3, #0
 8002d66:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002d68:	2300      	movs	r3, #0
 8002d6a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002d6c:	463b      	mov	r3, r7
 8002d6e:	4619      	mov	r1, r3
 8002d70:	4805      	ldr	r0, [pc, #20]	; (8002d88 <MX_TIM2_Init+0x94>)
 8002d72:	f006 f8d9 	bl	8008f28 <HAL_TIMEx_MasterConfigSynchronization>
 8002d76:	4603      	mov	r3, r0
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d001      	beq.n	8002d80 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8002d7c:	f000 faaa 	bl	80032d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002d80:	bf00      	nop
 8002d82:	3718      	adds	r7, #24
 8002d84:	46bd      	mov	sp, r7
 8002d86:	bd80      	pop	{r7, pc}
 8002d88:	20001180 	.word	0x20001180

08002d8c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002d8c:	b580      	push	{r7, lr}
 8002d8e:	b08e      	sub	sp, #56	; 0x38
 8002d90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002d92:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002d96:	2200      	movs	r2, #0
 8002d98:	601a      	str	r2, [r3, #0]
 8002d9a:	605a      	str	r2, [r3, #4]
 8002d9c:	609a      	str	r2, [r3, #8]
 8002d9e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002da0:	f107 0320 	add.w	r3, r7, #32
 8002da4:	2200      	movs	r2, #0
 8002da6:	601a      	str	r2, [r3, #0]
 8002da8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002daa:	1d3b      	adds	r3, r7, #4
 8002dac:	2200      	movs	r2, #0
 8002dae:	601a      	str	r2, [r3, #0]
 8002db0:	605a      	str	r2, [r3, #4]
 8002db2:	609a      	str	r2, [r3, #8]
 8002db4:	60da      	str	r2, [r3, #12]
 8002db6:	611a      	str	r2, [r3, #16]
 8002db8:	615a      	str	r2, [r3, #20]
 8002dba:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002dbc:	4b32      	ldr	r3, [pc, #200]	; (8002e88 <MX_TIM3_Init+0xfc>)
 8002dbe:	4a33      	ldr	r2, [pc, #204]	; (8002e8c <MX_TIM3_Init+0x100>)
 8002dc0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 167;
 8002dc2:	4b31      	ldr	r3, [pc, #196]	; (8002e88 <MX_TIM3_Init+0xfc>)
 8002dc4:	22a7      	movs	r2, #167	; 0xa7
 8002dc6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002dc8:	4b2f      	ldr	r3, [pc, #188]	; (8002e88 <MX_TIM3_Init+0xfc>)
 8002dca:	2200      	movs	r2, #0
 8002dcc:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 10000;
 8002dce:	4b2e      	ldr	r3, [pc, #184]	; (8002e88 <MX_TIM3_Init+0xfc>)
 8002dd0:	f242 7210 	movw	r2, #10000	; 0x2710
 8002dd4:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002dd6:	4b2c      	ldr	r3, [pc, #176]	; (8002e88 <MX_TIM3_Init+0xfc>)
 8002dd8:	2200      	movs	r2, #0
 8002dda:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002ddc:	4b2a      	ldr	r3, [pc, #168]	; (8002e88 <MX_TIM3_Init+0xfc>)
 8002dde:	2200      	movs	r2, #0
 8002de0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002de2:	4829      	ldr	r0, [pc, #164]	; (8002e88 <MX_TIM3_Init+0xfc>)
 8002de4:	f005 fb2c 	bl	8008440 <HAL_TIM_Base_Init>
 8002de8:	4603      	mov	r3, r0
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d001      	beq.n	8002df2 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8002dee:	f000 fa71 	bl	80032d4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002df2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002df6:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002df8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002dfc:	4619      	mov	r1, r3
 8002dfe:	4822      	ldr	r0, [pc, #136]	; (8002e88 <MX_TIM3_Init+0xfc>)
 8002e00:	f005 fcca 	bl	8008798 <HAL_TIM_ConfigClockSource>
 8002e04:	4603      	mov	r3, r0
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d001      	beq.n	8002e0e <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8002e0a:	f000 fa63 	bl	80032d4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002e0e:	481e      	ldr	r0, [pc, #120]	; (8002e88 <MX_TIM3_Init+0xfc>)
 8002e10:	f005 fb89 	bl	8008526 <HAL_TIM_PWM_Init>
 8002e14:	4603      	mov	r3, r0
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d001      	beq.n	8002e1e <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8002e1a:	f000 fa5b 	bl	80032d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002e1e:	2300      	movs	r3, #0
 8002e20:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002e22:	2300      	movs	r3, #0
 8002e24:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002e26:	f107 0320 	add.w	r3, r7, #32
 8002e2a:	4619      	mov	r1, r3
 8002e2c:	4816      	ldr	r0, [pc, #88]	; (8002e88 <MX_TIM3_Init+0xfc>)
 8002e2e:	f006 f87b 	bl	8008f28 <HAL_TIMEx_MasterConfigSynchronization>
 8002e32:	4603      	mov	r3, r0
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d001      	beq.n	8002e3c <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8002e38:	f000 fa4c 	bl	80032d4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002e3c:	2360      	movs	r3, #96	; 0x60
 8002e3e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002e40:	2300      	movs	r3, #0
 8002e42:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002e44:	2300      	movs	r3, #0
 8002e46:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002e48:	2300      	movs	r3, #0
 8002e4a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002e4c:	1d3b      	adds	r3, r7, #4
 8002e4e:	2208      	movs	r2, #8
 8002e50:	4619      	mov	r1, r3
 8002e52:	480d      	ldr	r0, [pc, #52]	; (8002e88 <MX_TIM3_Init+0xfc>)
 8002e54:	f005 fbda 	bl	800860c <HAL_TIM_PWM_ConfigChannel>
 8002e58:	4603      	mov	r3, r0
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d001      	beq.n	8002e62 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8002e5e:	f000 fa39 	bl	80032d4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002e62:	1d3b      	adds	r3, r7, #4
 8002e64:	220c      	movs	r2, #12
 8002e66:	4619      	mov	r1, r3
 8002e68:	4807      	ldr	r0, [pc, #28]	; (8002e88 <MX_TIM3_Init+0xfc>)
 8002e6a:	f005 fbcf 	bl	800860c <HAL_TIM_PWM_ConfigChannel>
 8002e6e:	4603      	mov	r3, r0
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d001      	beq.n	8002e78 <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 8002e74:	f000 fa2e 	bl	80032d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8002e78:	4803      	ldr	r0, [pc, #12]	; (8002e88 <MX_TIM3_Init+0xfc>)
 8002e7a:	f000 fce5 	bl	8003848 <HAL_TIM_MspPostInit>

}
 8002e7e:	bf00      	nop
 8002e80:	3738      	adds	r7, #56	; 0x38
 8002e82:	46bd      	mov	sp, r7
 8002e84:	bd80      	pop	{r7, pc}
 8002e86:	bf00      	nop
 8002e88:	20000fa4 	.word	0x20000fa4
 8002e8c:	40000400 	.word	0x40000400

08002e90 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8002e90:	b580      	push	{r7, lr}
 8002e92:	b086      	sub	sp, #24
 8002e94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002e96:	f107 0308 	add.w	r3, r7, #8
 8002e9a:	2200      	movs	r2, #0
 8002e9c:	601a      	str	r2, [r3, #0]
 8002e9e:	605a      	str	r2, [r3, #4]
 8002ea0:	609a      	str	r2, [r3, #8]
 8002ea2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002ea4:	463b      	mov	r3, r7
 8002ea6:	2200      	movs	r2, #0
 8002ea8:	601a      	str	r2, [r3, #0]
 8002eaa:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002eac:	4b1d      	ldr	r3, [pc, #116]	; (8002f24 <MX_TIM4_Init+0x94>)
 8002eae:	4a1e      	ldr	r2, [pc, #120]	; (8002f28 <MX_TIM4_Init+0x98>)
 8002eb0:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8002eb2:	4b1c      	ldr	r3, [pc, #112]	; (8002f24 <MX_TIM4_Init+0x94>)
 8002eb4:	2200      	movs	r2, #0
 8002eb6:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002eb8:	4b1a      	ldr	r3, [pc, #104]	; (8002f24 <MX_TIM4_Init+0x94>)
 8002eba:	2200      	movs	r2, #0
 8002ebc:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1024;
 8002ebe:	4b19      	ldr	r3, [pc, #100]	; (8002f24 <MX_TIM4_Init+0x94>)
 8002ec0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002ec4:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002ec6:	4b17      	ldr	r3, [pc, #92]	; (8002f24 <MX_TIM4_Init+0x94>)
 8002ec8:	2200      	movs	r2, #0
 8002eca:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002ecc:	4b15      	ldr	r3, [pc, #84]	; (8002f24 <MX_TIM4_Init+0x94>)
 8002ece:	2200      	movs	r2, #0
 8002ed0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8002ed2:	4814      	ldr	r0, [pc, #80]	; (8002f24 <MX_TIM4_Init+0x94>)
 8002ed4:	f005 fab4 	bl	8008440 <HAL_TIM_Base_Init>
 8002ed8:	4603      	mov	r3, r0
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d001      	beq.n	8002ee2 <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 8002ede:	f000 f9f9 	bl	80032d4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002ee2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002ee6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8002ee8:	f107 0308 	add.w	r3, r7, #8
 8002eec:	4619      	mov	r1, r3
 8002eee:	480d      	ldr	r0, [pc, #52]	; (8002f24 <MX_TIM4_Init+0x94>)
 8002ef0:	f005 fc52 	bl	8008798 <HAL_TIM_ConfigClockSource>
 8002ef4:	4603      	mov	r3, r0
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d001      	beq.n	8002efe <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 8002efa:	f000 f9eb 	bl	80032d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002efe:	2300      	movs	r3, #0
 8002f00:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002f02:	2300      	movs	r3, #0
 8002f04:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002f06:	463b      	mov	r3, r7
 8002f08:	4619      	mov	r1, r3
 8002f0a:	4806      	ldr	r0, [pc, #24]	; (8002f24 <MX_TIM4_Init+0x94>)
 8002f0c:	f006 f80c 	bl	8008f28 <HAL_TIMEx_MasterConfigSynchronization>
 8002f10:	4603      	mov	r3, r0
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d001      	beq.n	8002f1a <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 8002f16:	f000 f9dd 	bl	80032d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8002f1a:	bf00      	nop
 8002f1c:	3718      	adds	r7, #24
 8002f1e:	46bd      	mov	sp, r7
 8002f20:	bd80      	pop	{r7, pc}
 8002f22:	bf00      	nop
 8002f24:	20000e90 	.word	0x20000e90
 8002f28:	40000800 	.word	0x40000800

08002f2c <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8002f2c:	b580      	push	{r7, lr}
 8002f2e:	b08e      	sub	sp, #56	; 0x38
 8002f30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002f32:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002f36:	2200      	movs	r2, #0
 8002f38:	601a      	str	r2, [r3, #0]
 8002f3a:	605a      	str	r2, [r3, #4]
 8002f3c:	609a      	str	r2, [r3, #8]
 8002f3e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002f40:	f107 0320 	add.w	r3, r7, #32
 8002f44:	2200      	movs	r2, #0
 8002f46:	601a      	str	r2, [r3, #0]
 8002f48:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002f4a:	1d3b      	adds	r3, r7, #4
 8002f4c:	2200      	movs	r2, #0
 8002f4e:	601a      	str	r2, [r3, #0]
 8002f50:	605a      	str	r2, [r3, #4]
 8002f52:	609a      	str	r2, [r3, #8]
 8002f54:	60da      	str	r2, [r3, #12]
 8002f56:	611a      	str	r2, [r3, #16]
 8002f58:	615a      	str	r2, [r3, #20]
 8002f5a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8002f5c:	4b32      	ldr	r3, [pc, #200]	; (8003028 <MX_TIM5_Init+0xfc>)
 8002f5e:	4a33      	ldr	r2, [pc, #204]	; (800302c <MX_TIM5_Init+0x100>)
 8002f60:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8002f62:	4b31      	ldr	r3, [pc, #196]	; (8003028 <MX_TIM5_Init+0xfc>)
 8002f64:	2200      	movs	r2, #0
 8002f66:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED2;
 8002f68:	4b2f      	ldr	r3, [pc, #188]	; (8003028 <MX_TIM5_Init+0xfc>)
 8002f6a:	2240      	movs	r2, #64	; 0x40
 8002f6c:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 1024;
 8002f6e:	4b2e      	ldr	r3, [pc, #184]	; (8003028 <MX_TIM5_Init+0xfc>)
 8002f70:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002f74:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002f76:	4b2c      	ldr	r3, [pc, #176]	; (8003028 <MX_TIM5_Init+0xfc>)
 8002f78:	2200      	movs	r2, #0
 8002f7a:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002f7c:	4b2a      	ldr	r3, [pc, #168]	; (8003028 <MX_TIM5_Init+0xfc>)
 8002f7e:	2200      	movs	r2, #0
 8002f80:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8002f82:	4829      	ldr	r0, [pc, #164]	; (8003028 <MX_TIM5_Init+0xfc>)
 8002f84:	f005 fa5c 	bl	8008440 <HAL_TIM_Base_Init>
 8002f88:	4603      	mov	r3, r0
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d001      	beq.n	8002f92 <MX_TIM5_Init+0x66>
  {
    Error_Handler();
 8002f8e:	f000 f9a1 	bl	80032d4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002f92:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002f96:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8002f98:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002f9c:	4619      	mov	r1, r3
 8002f9e:	4822      	ldr	r0, [pc, #136]	; (8003028 <MX_TIM5_Init+0xfc>)
 8002fa0:	f005 fbfa 	bl	8008798 <HAL_TIM_ConfigClockSource>
 8002fa4:	4603      	mov	r3, r0
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d001      	beq.n	8002fae <MX_TIM5_Init+0x82>
  {
    Error_Handler();
 8002faa:	f000 f993 	bl	80032d4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8002fae:	481e      	ldr	r0, [pc, #120]	; (8003028 <MX_TIM5_Init+0xfc>)
 8002fb0:	f005 fab9 	bl	8008526 <HAL_TIM_PWM_Init>
 8002fb4:	4603      	mov	r3, r0
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d001      	beq.n	8002fbe <MX_TIM5_Init+0x92>
  {
    Error_Handler();
 8002fba:	f000 f98b 	bl	80032d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002fbe:	2300      	movs	r3, #0
 8002fc0:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002fc2:	2300      	movs	r3, #0
 8002fc4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8002fc6:	f107 0320 	add.w	r3, r7, #32
 8002fca:	4619      	mov	r1, r3
 8002fcc:	4816      	ldr	r0, [pc, #88]	; (8003028 <MX_TIM5_Init+0xfc>)
 8002fce:	f005 ffab 	bl	8008f28 <HAL_TIMEx_MasterConfigSynchronization>
 8002fd2:	4603      	mov	r3, r0
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d001      	beq.n	8002fdc <MX_TIM5_Init+0xb0>
  {
    Error_Handler();
 8002fd8:	f000 f97c 	bl	80032d4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 8002fdc:	2370      	movs	r3, #112	; 0x70
 8002fde:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002fe0:	2300      	movs	r3, #0
 8002fe2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002fe4:	2300      	movs	r3, #0
 8002fe6:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002fe8:	2300      	movs	r3, #0
 8002fea:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002fec:	1d3b      	adds	r3, r7, #4
 8002fee:	2204      	movs	r2, #4
 8002ff0:	4619      	mov	r1, r3
 8002ff2:	480d      	ldr	r0, [pc, #52]	; (8003028 <MX_TIM5_Init+0xfc>)
 8002ff4:	f005 fb0a 	bl	800860c <HAL_TIM_PWM_ConfigChannel>
 8002ff8:	4603      	mov	r3, r0
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d001      	beq.n	8003002 <MX_TIM5_Init+0xd6>
  {
    Error_Handler();
 8002ffe:	f000 f969 	bl	80032d4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8003002:	1d3b      	adds	r3, r7, #4
 8003004:	220c      	movs	r2, #12
 8003006:	4619      	mov	r1, r3
 8003008:	4807      	ldr	r0, [pc, #28]	; (8003028 <MX_TIM5_Init+0xfc>)
 800300a:	f005 faff 	bl	800860c <HAL_TIM_PWM_ConfigChannel>
 800300e:	4603      	mov	r3, r0
 8003010:	2b00      	cmp	r3, #0
 8003012:	d001      	beq.n	8003018 <MX_TIM5_Init+0xec>
  {
    Error_Handler();
 8003014:	f000 f95e 	bl	80032d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8003018:	4803      	ldr	r0, [pc, #12]	; (8003028 <MX_TIM5_Init+0xfc>)
 800301a:	f000 fc15 	bl	8003848 <HAL_TIM_MspPostInit>

}
 800301e:	bf00      	nop
 8003020:	3738      	adds	r7, #56	; 0x38
 8003022:	46bd      	mov	sp, r7
 8003024:	bd80      	pop	{r7, pc}
 8003026:	bf00      	nop
 8003028:	20000f64 	.word	0x20000f64
 800302c:	40000c00 	.word	0x40000c00

08003030 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8003030:	b580      	push	{r7, lr}
 8003032:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8003034:	4b11      	ldr	r3, [pc, #68]	; (800307c <MX_USART3_UART_Init+0x4c>)
 8003036:	4a12      	ldr	r2, [pc, #72]	; (8003080 <MX_USART3_UART_Init+0x50>)
 8003038:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 800303a:	4b10      	ldr	r3, [pc, #64]	; (800307c <MX_USART3_UART_Init+0x4c>)
 800303c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8003040:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8003042:	4b0e      	ldr	r3, [pc, #56]	; (800307c <MX_USART3_UART_Init+0x4c>)
 8003044:	2200      	movs	r2, #0
 8003046:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8003048:	4b0c      	ldr	r3, [pc, #48]	; (800307c <MX_USART3_UART_Init+0x4c>)
 800304a:	2200      	movs	r2, #0
 800304c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800304e:	4b0b      	ldr	r3, [pc, #44]	; (800307c <MX_USART3_UART_Init+0x4c>)
 8003050:	2200      	movs	r2, #0
 8003052:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8003054:	4b09      	ldr	r3, [pc, #36]	; (800307c <MX_USART3_UART_Init+0x4c>)
 8003056:	220c      	movs	r2, #12
 8003058:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800305a:	4b08      	ldr	r3, [pc, #32]	; (800307c <MX_USART3_UART_Init+0x4c>)
 800305c:	2200      	movs	r2, #0
 800305e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8003060:	4b06      	ldr	r3, [pc, #24]	; (800307c <MX_USART3_UART_Init+0x4c>)
 8003062:	2200      	movs	r2, #0
 8003064:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8003066:	4805      	ldr	r0, [pc, #20]	; (800307c <MX_USART3_UART_Init+0x4c>)
 8003068:	f005 ffda 	bl	8009020 <HAL_UART_Init>
 800306c:	4603      	mov	r3, r0
 800306e:	2b00      	cmp	r3, #0
 8003070:	d001      	beq.n	8003076 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8003072:	f000 f92f 	bl	80032d4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8003076:	bf00      	nop
 8003078:	bd80      	pop	{r7, pc}
 800307a:	bf00      	nop
 800307c:	20000ed0 	.word	0x20000ed0
 8003080:	40004800 	.word	0x40004800

08003084 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 8003084:	b580      	push	{r7, lr}
 8003086:	b082      	sub	sp, #8
 8003088:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800308a:	2300      	movs	r3, #0
 800308c:	607b      	str	r3, [r7, #4]
 800308e:	4b18      	ldr	r3, [pc, #96]	; (80030f0 <MX_DMA_Init+0x6c>)
 8003090:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003092:	4a17      	ldr	r2, [pc, #92]	; (80030f0 <MX_DMA_Init+0x6c>)
 8003094:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003098:	6313      	str	r3, [r2, #48]	; 0x30
 800309a:	4b15      	ldr	r3, [pc, #84]	; (80030f0 <MX_DMA_Init+0x6c>)
 800309c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800309e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80030a2:	607b      	str	r3, [r7, #4]
 80030a4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80030a6:	2200      	movs	r2, #0
 80030a8:	2100      	movs	r1, #0
 80030aa:	2038      	movs	r0, #56	; 0x38
 80030ac:	f000 fea1 	bl	8003df2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80030b0:	2038      	movs	r0, #56	; 0x38
 80030b2:	f000 feba 	bl	8003e2a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 80030b6:	2200      	movs	r2, #0
 80030b8:	2100      	movs	r1, #0
 80030ba:	203b      	movs	r0, #59	; 0x3b
 80030bc:	f000 fe99 	bl	8003df2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 80030c0:	203b      	movs	r0, #59	; 0x3b
 80030c2:	f000 feb2 	bl	8003e2a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream5_IRQn, 0, 0);
 80030c6:	2200      	movs	r2, #0
 80030c8:	2100      	movs	r1, #0
 80030ca:	2044      	movs	r0, #68	; 0x44
 80030cc:	f000 fe91 	bl	8003df2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream5_IRQn);
 80030d0:	2044      	movs	r0, #68	; 0x44
 80030d2:	f000 feaa 	bl	8003e2a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 80030d6:	2200      	movs	r2, #0
 80030d8:	2100      	movs	r1, #0
 80030da:	2045      	movs	r0, #69	; 0x45
 80030dc:	f000 fe89 	bl	8003df2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 80030e0:	2045      	movs	r0, #69	; 0x45
 80030e2:	f000 fea2 	bl	8003e2a <HAL_NVIC_EnableIRQ>

}
 80030e6:	bf00      	nop
 80030e8:	3708      	adds	r7, #8
 80030ea:	46bd      	mov	sp, r7
 80030ec:	bd80      	pop	{r7, pc}
 80030ee:	bf00      	nop
 80030f0:	40023800 	.word	0x40023800

080030f4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80030f4:	b580      	push	{r7, lr}
 80030f6:	b08a      	sub	sp, #40	; 0x28
 80030f8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80030fa:	f107 0314 	add.w	r3, r7, #20
 80030fe:	2200      	movs	r2, #0
 8003100:	601a      	str	r2, [r3, #0]
 8003102:	605a      	str	r2, [r3, #4]
 8003104:	609a      	str	r2, [r3, #8]
 8003106:	60da      	str	r2, [r3, #12]
 8003108:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800310a:	2300      	movs	r3, #0
 800310c:	613b      	str	r3, [r7, #16]
 800310e:	4b67      	ldr	r3, [pc, #412]	; (80032ac <MX_GPIO_Init+0x1b8>)
 8003110:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003112:	4a66      	ldr	r2, [pc, #408]	; (80032ac <MX_GPIO_Init+0x1b8>)
 8003114:	f043 0304 	orr.w	r3, r3, #4
 8003118:	6313      	str	r3, [r2, #48]	; 0x30
 800311a:	4b64      	ldr	r3, [pc, #400]	; (80032ac <MX_GPIO_Init+0x1b8>)
 800311c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800311e:	f003 0304 	and.w	r3, r3, #4
 8003122:	613b      	str	r3, [r7, #16]
 8003124:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003126:	2300      	movs	r3, #0
 8003128:	60fb      	str	r3, [r7, #12]
 800312a:	4b60      	ldr	r3, [pc, #384]	; (80032ac <MX_GPIO_Init+0x1b8>)
 800312c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800312e:	4a5f      	ldr	r2, [pc, #380]	; (80032ac <MX_GPIO_Init+0x1b8>)
 8003130:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003134:	6313      	str	r3, [r2, #48]	; 0x30
 8003136:	4b5d      	ldr	r3, [pc, #372]	; (80032ac <MX_GPIO_Init+0x1b8>)
 8003138:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800313a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800313e:	60fb      	str	r3, [r7, #12]
 8003140:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003142:	2300      	movs	r3, #0
 8003144:	60bb      	str	r3, [r7, #8]
 8003146:	4b59      	ldr	r3, [pc, #356]	; (80032ac <MX_GPIO_Init+0x1b8>)
 8003148:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800314a:	4a58      	ldr	r2, [pc, #352]	; (80032ac <MX_GPIO_Init+0x1b8>)
 800314c:	f043 0301 	orr.w	r3, r3, #1
 8003150:	6313      	str	r3, [r2, #48]	; 0x30
 8003152:	4b56      	ldr	r3, [pc, #344]	; (80032ac <MX_GPIO_Init+0x1b8>)
 8003154:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003156:	f003 0301 	and.w	r3, r3, #1
 800315a:	60bb      	str	r3, [r7, #8]
 800315c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800315e:	2300      	movs	r3, #0
 8003160:	607b      	str	r3, [r7, #4]
 8003162:	4b52      	ldr	r3, [pc, #328]	; (80032ac <MX_GPIO_Init+0x1b8>)
 8003164:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003166:	4a51      	ldr	r2, [pc, #324]	; (80032ac <MX_GPIO_Init+0x1b8>)
 8003168:	f043 0302 	orr.w	r3, r3, #2
 800316c:	6313      	str	r3, [r2, #48]	; 0x30
 800316e:	4b4f      	ldr	r3, [pc, #316]	; (80032ac <MX_GPIO_Init+0x1b8>)
 8003170:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003172:	f003 0302 	and.w	r3, r3, #2
 8003176:	607b      	str	r3, [r7, #4]
 8003178:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800317a:	2300      	movs	r3, #0
 800317c:	603b      	str	r3, [r7, #0]
 800317e:	4b4b      	ldr	r3, [pc, #300]	; (80032ac <MX_GPIO_Init+0x1b8>)
 8003180:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003182:	4a4a      	ldr	r2, [pc, #296]	; (80032ac <MX_GPIO_Init+0x1b8>)
 8003184:	f043 0308 	orr.w	r3, r3, #8
 8003188:	6313      	str	r3, [r2, #48]	; 0x30
 800318a:	4b48      	ldr	r3, [pc, #288]	; (80032ac <MX_GPIO_Init+0x1b8>)
 800318c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800318e:	f003 0308 	and.w	r3, r3, #8
 8003192:	603b      	str	r3, [r7, #0]
 8003194:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, P1_Pin|P4_Pin|P2_Pin|P5_Pin 
 8003196:	2200      	movs	r2, #0
 8003198:	21ef      	movs	r1, #239	; 0xef
 800319a:	4845      	ldr	r0, [pc, #276]	; (80032b0 <MX_GPIO_Init+0x1bc>)
 800319c:	f001 fbae 	bl	80048fc <HAL_GPIO_WritePin>
                          |LR_RESET_Pin|LEDB_Pin|LEDA_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, PH_L_Pin|PH_R_Pin|P7_Pin, GPIO_PIN_RESET);
 80031a0:	2200      	movs	r2, #0
 80031a2:	2115      	movs	r1, #21
 80031a4:	4843      	ldr	r0, [pc, #268]	; (80032b4 <MX_GPIO_Init+0x1c0>)
 80031a6:	f001 fba9 	bl	80048fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LEDD_Pin|LEDC_Pin|LR_NSS_Pin, GPIO_PIN_RESET);
 80031aa:	2200      	movs	r2, #0
 80031ac:	f44f 5148 	mov.w	r1, #12800	; 0x3200
 80031b0:	4841      	ldr	r0, [pc, #260]	; (80032b8 <MX_GPIO_Init+0x1c4>)
 80031b2:	f001 fba3 	bl	80048fc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : P1_Pin P4_Pin P2_Pin P5_Pin 
                           LR_RESET_Pin LEDA_Pin */
  GPIO_InitStruct.Pin = P1_Pin|P4_Pin|P2_Pin|P5_Pin 
 80031b6:	23af      	movs	r3, #175	; 0xaf
 80031b8:	617b      	str	r3, [r7, #20]
                          |LR_RESET_Pin|LEDA_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80031ba:	2301      	movs	r3, #1
 80031bc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031be:	2300      	movs	r3, #0
 80031c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80031c2:	2300      	movs	r3, #0
 80031c4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80031c6:	f107 0314 	add.w	r3, r7, #20
 80031ca:	4619      	mov	r1, r3
 80031cc:	4838      	ldr	r0, [pc, #224]	; (80032b0 <MX_GPIO_Init+0x1bc>)
 80031ce:	f001 f9e3 	bl	8004598 <HAL_GPIO_Init>

  /*Configure GPIO pins : PH_L_Pin PH_R_Pin P7_Pin */
  GPIO_InitStruct.Pin = PH_L_Pin|PH_R_Pin|P7_Pin;
 80031d2:	2315      	movs	r3, #21
 80031d4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80031d6:	2301      	movs	r3, #1
 80031d8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031da:	2300      	movs	r3, #0
 80031dc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80031de:	2300      	movs	r3, #0
 80031e0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80031e2:	f107 0314 	add.w	r3, r7, #20
 80031e6:	4619      	mov	r1, r3
 80031e8:	4832      	ldr	r0, [pc, #200]	; (80032b4 <MX_GPIO_Init+0x1c0>)
 80031ea:	f001 f9d5 	bl	8004598 <HAL_GPIO_Init>

  /*Configure GPIO pin : LR_DIO0_Pin */
  GPIO_InitStruct.Pin = LR_DIO0_Pin;
 80031ee:	2340      	movs	r3, #64	; 0x40
 80031f0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80031f2:	4b32      	ldr	r3, [pc, #200]	; (80032bc <MX_GPIO_Init+0x1c8>)
 80031f4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80031f6:	2302      	movs	r3, #2
 80031f8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LR_DIO0_GPIO_Port, &GPIO_InitStruct);
 80031fa:	f107 0314 	add.w	r3, r7, #20
 80031fe:	4619      	mov	r1, r3
 8003200:	482c      	ldr	r0, [pc, #176]	; (80032b4 <MX_GPIO_Init+0x1c0>)
 8003202:	f001 f9c9 	bl	8004598 <HAL_GPIO_Init>

  /*Configure GPIO pins : LR_TIM_Pin SDIO_SW_Pin */
  GPIO_InitStruct.Pin = LR_TIM_Pin|SDIO_SW_Pin;
 8003206:	f44f 73c0 	mov.w	r3, #384	; 0x180
 800320a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800320c:	2300      	movs	r3, #0
 800320e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003210:	2300      	movs	r3, #0
 8003212:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003214:	f107 0314 	add.w	r3, r7, #20
 8003218:	4619      	mov	r1, r3
 800321a:	4826      	ldr	r0, [pc, #152]	; (80032b4 <MX_GPIO_Init+0x1c0>)
 800321c:	f001 f9bc 	bl	8004598 <HAL_GPIO_Init>

  /*Configure GPIO pins : LEDD_Pin LEDC_Pin */
  GPIO_InitStruct.Pin = LEDD_Pin|LEDC_Pin;
 8003220:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8003224:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003226:	2301      	movs	r3, #1
 8003228:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800322a:	2302      	movs	r3, #2
 800322c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800322e:	2300      	movs	r3, #0
 8003230:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003232:	f107 0314 	add.w	r3, r7, #20
 8003236:	4619      	mov	r1, r3
 8003238:	481f      	ldr	r0, [pc, #124]	; (80032b8 <MX_GPIO_Init+0x1c4>)
 800323a:	f001 f9ad 	bl	8004598 <HAL_GPIO_Init>

  /*Configure GPIO pin : LEDB_Pin */
  GPIO_InitStruct.Pin = LEDB_Pin;
 800323e:	2340      	movs	r3, #64	; 0x40
 8003240:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003242:	2301      	movs	r3, #1
 8003244:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8003246:	2302      	movs	r3, #2
 8003248:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800324a:	2300      	movs	r3, #0
 800324c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LEDB_GPIO_Port, &GPIO_InitStruct);
 800324e:	f107 0314 	add.w	r3, r7, #20
 8003252:	4619      	mov	r1, r3
 8003254:	4816      	ldr	r0, [pc, #88]	; (80032b0 <MX_GPIO_Init+0x1bc>)
 8003256:	f001 f99f 	bl	8004598 <HAL_GPIO_Init>

  /*Configure GPIO pin : BTN_USR_Pin */
  GPIO_InitStruct.Pin = BTN_USR_Pin;
 800325a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800325e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003260:	2300      	movs	r3, #0
 8003262:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003264:	2301      	movs	r3, #1
 8003266:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BTN_USR_GPIO_Port, &GPIO_InitStruct);
 8003268:	f107 0314 	add.w	r3, r7, #20
 800326c:	4619      	mov	r1, r3
 800326e:	4811      	ldr	r0, [pc, #68]	; (80032b4 <MX_GPIO_Init+0x1c0>)
 8003270:	f001 f992 	bl	8004598 <HAL_GPIO_Init>

  /*Configure GPIO pin : LR_NSS_Pin */
  GPIO_InitStruct.Pin = LR_NSS_Pin;
 8003274:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003278:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800327a:	2301      	movs	r3, #1
 800327c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800327e:	2300      	movs	r3, #0
 8003280:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003282:	2300      	movs	r3, #0
 8003284:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LR_NSS_GPIO_Port, &GPIO_InitStruct);
 8003286:	f107 0314 	add.w	r3, r7, #20
 800328a:	4619      	mov	r1, r3
 800328c:	480a      	ldr	r0, [pc, #40]	; (80032b8 <MX_GPIO_Init+0x1c4>)
 800328e:	f001 f983 	bl	8004598 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8003292:	2200      	movs	r2, #0
 8003294:	2100      	movs	r1, #0
 8003296:	2017      	movs	r0, #23
 8003298:	f000 fdab 	bl	8003df2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800329c:	2017      	movs	r0, #23
 800329e:	f000 fdc4 	bl	8003e2a <HAL_NVIC_EnableIRQ>

}
 80032a2:	bf00      	nop
 80032a4:	3728      	adds	r7, #40	; 0x28
 80032a6:	46bd      	mov	sp, r7
 80032a8:	bd80      	pop	{r7, pc}
 80032aa:	bf00      	nop
 80032ac:	40023800 	.word	0x40023800
 80032b0:	40020800 	.word	0x40020800
 80032b4:	40020000 	.word	0x40020000
 80032b8:	40020400 	.word	0x40020400
 80032bc:	10110000 	.word	0x10110000

080032c0 <Get_UART3_Instance>:

/* USER CODE BEGIN 4 */

I2C_HandleTypeDef* Get_I2C1_Instance(void) { return &hi2c1; }
SPI_HandleTypeDef* Get_SPI1_Instance(void) { return &hspi1; }
UART_HandleTypeDef* Get_UART3_Instance(void) { return &huart3; }
 80032c0:	b480      	push	{r7}
 80032c2:	af00      	add	r7, sp, #0
 80032c4:	4b02      	ldr	r3, [pc, #8]	; (80032d0 <Get_UART3_Instance+0x10>)
 80032c6:	4618      	mov	r0, r3
 80032c8:	46bd      	mov	sp, r7
 80032ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ce:	4770      	bx	lr
 80032d0:	20000ed0 	.word	0x20000ed0

080032d4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80032d4:	b480      	push	{r7}
 80032d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80032d8:	bf00      	nop
 80032da:	46bd      	mov	sp, r7
 80032dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e0:	4770      	bx	lr
	...

080032e4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80032e4:	b480      	push	{r7}
 80032e6:	b083      	sub	sp, #12
 80032e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80032ea:	2300      	movs	r3, #0
 80032ec:	607b      	str	r3, [r7, #4]
 80032ee:	4b10      	ldr	r3, [pc, #64]	; (8003330 <HAL_MspInit+0x4c>)
 80032f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032f2:	4a0f      	ldr	r2, [pc, #60]	; (8003330 <HAL_MspInit+0x4c>)
 80032f4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80032f8:	6453      	str	r3, [r2, #68]	; 0x44
 80032fa:	4b0d      	ldr	r3, [pc, #52]	; (8003330 <HAL_MspInit+0x4c>)
 80032fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003302:	607b      	str	r3, [r7, #4]
 8003304:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003306:	2300      	movs	r3, #0
 8003308:	603b      	str	r3, [r7, #0]
 800330a:	4b09      	ldr	r3, [pc, #36]	; (8003330 <HAL_MspInit+0x4c>)
 800330c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800330e:	4a08      	ldr	r2, [pc, #32]	; (8003330 <HAL_MspInit+0x4c>)
 8003310:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003314:	6413      	str	r3, [r2, #64]	; 0x40
 8003316:	4b06      	ldr	r3, [pc, #24]	; (8003330 <HAL_MspInit+0x4c>)
 8003318:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800331a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800331e:	603b      	str	r3, [r7, #0]
 8003320:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003322:	bf00      	nop
 8003324:	370c      	adds	r7, #12
 8003326:	46bd      	mov	sp, r7
 8003328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800332c:	4770      	bx	lr
 800332e:	bf00      	nop
 8003330:	40023800 	.word	0x40023800

08003334 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003334:	b580      	push	{r7, lr}
 8003336:	b08a      	sub	sp, #40	; 0x28
 8003338:	af00      	add	r7, sp, #0
 800333a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800333c:	f107 0314 	add.w	r3, r7, #20
 8003340:	2200      	movs	r2, #0
 8003342:	601a      	str	r2, [r3, #0]
 8003344:	605a      	str	r2, [r3, #4]
 8003346:	609a      	str	r2, [r3, #8]
 8003348:	60da      	str	r2, [r3, #12]
 800334a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	4a19      	ldr	r2, [pc, #100]	; (80033b8 <HAL_I2C_MspInit+0x84>)
 8003352:	4293      	cmp	r3, r2
 8003354:	d12b      	bne.n	80033ae <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003356:	2300      	movs	r3, #0
 8003358:	613b      	str	r3, [r7, #16]
 800335a:	4b18      	ldr	r3, [pc, #96]	; (80033bc <HAL_I2C_MspInit+0x88>)
 800335c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800335e:	4a17      	ldr	r2, [pc, #92]	; (80033bc <HAL_I2C_MspInit+0x88>)
 8003360:	f043 0302 	orr.w	r3, r3, #2
 8003364:	6313      	str	r3, [r2, #48]	; 0x30
 8003366:	4b15      	ldr	r3, [pc, #84]	; (80033bc <HAL_I2C_MspInit+0x88>)
 8003368:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800336a:	f003 0302 	and.w	r3, r3, #2
 800336e:	613b      	str	r3, [r7, #16]
 8003370:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = SCL_Pin|SDA_Pin;
 8003372:	23c0      	movs	r3, #192	; 0xc0
 8003374:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003376:	2312      	movs	r3, #18
 8003378:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800337a:	2300      	movs	r3, #0
 800337c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800337e:	2303      	movs	r3, #3
 8003380:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003382:	2304      	movs	r3, #4
 8003384:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003386:	f107 0314 	add.w	r3, r7, #20
 800338a:	4619      	mov	r1, r3
 800338c:	480c      	ldr	r0, [pc, #48]	; (80033c0 <HAL_I2C_MspInit+0x8c>)
 800338e:	f001 f903 	bl	8004598 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003392:	2300      	movs	r3, #0
 8003394:	60fb      	str	r3, [r7, #12]
 8003396:	4b09      	ldr	r3, [pc, #36]	; (80033bc <HAL_I2C_MspInit+0x88>)
 8003398:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800339a:	4a08      	ldr	r2, [pc, #32]	; (80033bc <HAL_I2C_MspInit+0x88>)
 800339c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80033a0:	6413      	str	r3, [r2, #64]	; 0x40
 80033a2:	4b06      	ldr	r3, [pc, #24]	; (80033bc <HAL_I2C_MspInit+0x88>)
 80033a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033a6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80033aa:	60fb      	str	r3, [r7, #12]
 80033ac:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80033ae:	bf00      	nop
 80033b0:	3728      	adds	r7, #40	; 0x28
 80033b2:	46bd      	mov	sp, r7
 80033b4:	bd80      	pop	{r7, pc}
 80033b6:	bf00      	nop
 80033b8:	40005400 	.word	0x40005400
 80033bc:	40023800 	.word	0x40023800
 80033c0:	40020400 	.word	0x40020400

080033c4 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80033c4:	b480      	push	{r7}
 80033c6:	b083      	sub	sp, #12
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	4a05      	ldr	r2, [pc, #20]	; (80033e8 <HAL_RTC_MspInit+0x24>)
 80033d2:	4293      	cmp	r3, r2
 80033d4:	d102      	bne.n	80033dc <HAL_RTC_MspInit+0x18>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80033d6:	4b05      	ldr	r3, [pc, #20]	; (80033ec <HAL_RTC_MspInit+0x28>)
 80033d8:	2201      	movs	r2, #1
 80033da:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80033dc:	bf00      	nop
 80033de:	370c      	adds	r7, #12
 80033e0:	46bd      	mov	sp, r7
 80033e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e6:	4770      	bx	lr
 80033e8:	40002800 	.word	0x40002800
 80033ec:	42470e3c 	.word	0x42470e3c

080033f0 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 80033f0:	b580      	push	{r7, lr}
 80033f2:	b08a      	sub	sp, #40	; 0x28
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80033f8:	f107 0314 	add.w	r3, r7, #20
 80033fc:	2200      	movs	r2, #0
 80033fe:	601a      	str	r2, [r3, #0]
 8003400:	605a      	str	r2, [r3, #4]
 8003402:	609a      	str	r2, [r3, #8]
 8003404:	60da      	str	r2, [r3, #12]
 8003406:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	4a70      	ldr	r2, [pc, #448]	; (80035d0 <HAL_SD_MspInit+0x1e0>)
 800340e:	4293      	cmp	r3, r2
 8003410:	f040 80da 	bne.w	80035c8 <HAL_SD_MspInit+0x1d8>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 8003414:	2300      	movs	r3, #0
 8003416:	613b      	str	r3, [r7, #16]
 8003418:	4b6e      	ldr	r3, [pc, #440]	; (80035d4 <HAL_SD_MspInit+0x1e4>)
 800341a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800341c:	4a6d      	ldr	r2, [pc, #436]	; (80035d4 <HAL_SD_MspInit+0x1e4>)
 800341e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003422:	6453      	str	r3, [r2, #68]	; 0x44
 8003424:	4b6b      	ldr	r3, [pc, #428]	; (80035d4 <HAL_SD_MspInit+0x1e4>)
 8003426:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003428:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800342c:	613b      	str	r3, [r7, #16]
 800342e:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003430:	2300      	movs	r3, #0
 8003432:	60fb      	str	r3, [r7, #12]
 8003434:	4b67      	ldr	r3, [pc, #412]	; (80035d4 <HAL_SD_MspInit+0x1e4>)
 8003436:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003438:	4a66      	ldr	r2, [pc, #408]	; (80035d4 <HAL_SD_MspInit+0x1e4>)
 800343a:	f043 0304 	orr.w	r3, r3, #4
 800343e:	6313      	str	r3, [r2, #48]	; 0x30
 8003440:	4b64      	ldr	r3, [pc, #400]	; (80035d4 <HAL_SD_MspInit+0x1e4>)
 8003442:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003444:	f003 0304 	and.w	r3, r3, #4
 8003448:	60fb      	str	r3, [r7, #12]
 800344a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800344c:	2300      	movs	r3, #0
 800344e:	60bb      	str	r3, [r7, #8]
 8003450:	4b60      	ldr	r3, [pc, #384]	; (80035d4 <HAL_SD_MspInit+0x1e4>)
 8003452:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003454:	4a5f      	ldr	r2, [pc, #380]	; (80035d4 <HAL_SD_MspInit+0x1e4>)
 8003456:	f043 0308 	orr.w	r3, r3, #8
 800345a:	6313      	str	r3, [r2, #48]	; 0x30
 800345c:	4b5d      	ldr	r3, [pc, #372]	; (80035d4 <HAL_SD_MspInit+0x1e4>)
 800345e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003460:	f003 0308 	and.w	r3, r3, #8
 8003464:	60bb      	str	r3, [r7, #8]
 8003466:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDIO_D2
    PC11     ------> SDIO_D3
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8003468:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 800346c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800346e:	2302      	movs	r3, #2
 8003470:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003472:	2301      	movs	r3, #1
 8003474:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003476:	2303      	movs	r3, #3
 8003478:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 800347a:	230c      	movs	r3, #12
 800347c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800347e:	f107 0314 	add.w	r3, r7, #20
 8003482:	4619      	mov	r1, r3
 8003484:	4854      	ldr	r0, [pc, #336]	; (80035d8 <HAL_SD_MspInit+0x1e8>)
 8003486:	f001 f887 	bl	8004598 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800348a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800348e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003490:	2302      	movs	r3, #2
 8003492:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003494:	2300      	movs	r3, #0
 8003496:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003498:	2303      	movs	r3, #3
 800349a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 800349c:	230c      	movs	r3, #12
 800349e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80034a0:	f107 0314 	add.w	r3, r7, #20
 80034a4:	4619      	mov	r1, r3
 80034a6:	484c      	ldr	r0, [pc, #304]	; (80035d8 <HAL_SD_MspInit+0x1e8>)
 80034a8:	f001 f876 	bl	8004598 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80034ac:	2304      	movs	r3, #4
 80034ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034b0:	2302      	movs	r3, #2
 80034b2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80034b4:	2301      	movs	r3, #1
 80034b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80034b8:	2303      	movs	r3, #3
 80034ba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 80034bc:	230c      	movs	r3, #12
 80034be:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80034c0:	f107 0314 	add.w	r3, r7, #20
 80034c4:	4619      	mov	r1, r3
 80034c6:	4845      	ldr	r0, [pc, #276]	; (80035dc <HAL_SD_MspInit+0x1ec>)
 80034c8:	f001 f866 	bl	8004598 <HAL_GPIO_Init>

    /* SDIO DMA Init */
    /* SDIO_RX Init */
    hdma_sdio_rx.Instance = DMA2_Stream3;
 80034cc:	4b44      	ldr	r3, [pc, #272]	; (80035e0 <HAL_SD_MspInit+0x1f0>)
 80034ce:	4a45      	ldr	r2, [pc, #276]	; (80035e4 <HAL_SD_MspInit+0x1f4>)
 80034d0:	601a      	str	r2, [r3, #0]
    hdma_sdio_rx.Init.Channel = DMA_CHANNEL_4;
 80034d2:	4b43      	ldr	r3, [pc, #268]	; (80035e0 <HAL_SD_MspInit+0x1f0>)
 80034d4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80034d8:	605a      	str	r2, [r3, #4]
    hdma_sdio_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80034da:	4b41      	ldr	r3, [pc, #260]	; (80035e0 <HAL_SD_MspInit+0x1f0>)
 80034dc:	2200      	movs	r2, #0
 80034de:	609a      	str	r2, [r3, #8]
    hdma_sdio_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80034e0:	4b3f      	ldr	r3, [pc, #252]	; (80035e0 <HAL_SD_MspInit+0x1f0>)
 80034e2:	2200      	movs	r2, #0
 80034e4:	60da      	str	r2, [r3, #12]
    hdma_sdio_rx.Init.MemInc = DMA_MINC_ENABLE;
 80034e6:	4b3e      	ldr	r3, [pc, #248]	; (80035e0 <HAL_SD_MspInit+0x1f0>)
 80034e8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80034ec:	611a      	str	r2, [r3, #16]
    hdma_sdio_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80034ee:	4b3c      	ldr	r3, [pc, #240]	; (80035e0 <HAL_SD_MspInit+0x1f0>)
 80034f0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80034f4:	615a      	str	r2, [r3, #20]
    hdma_sdio_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80034f6:	4b3a      	ldr	r3, [pc, #232]	; (80035e0 <HAL_SD_MspInit+0x1f0>)
 80034f8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80034fc:	619a      	str	r2, [r3, #24]
    hdma_sdio_rx.Init.Mode = DMA_PFCTRL;
 80034fe:	4b38      	ldr	r3, [pc, #224]	; (80035e0 <HAL_SD_MspInit+0x1f0>)
 8003500:	2220      	movs	r2, #32
 8003502:	61da      	str	r2, [r3, #28]
    hdma_sdio_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003504:	4b36      	ldr	r3, [pc, #216]	; (80035e0 <HAL_SD_MspInit+0x1f0>)
 8003506:	2200      	movs	r2, #0
 8003508:	621a      	str	r2, [r3, #32]
    hdma_sdio_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800350a:	4b35      	ldr	r3, [pc, #212]	; (80035e0 <HAL_SD_MspInit+0x1f0>)
 800350c:	2204      	movs	r2, #4
 800350e:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8003510:	4b33      	ldr	r3, [pc, #204]	; (80035e0 <HAL_SD_MspInit+0x1f0>)
 8003512:	2203      	movs	r2, #3
 8003514:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_rx.Init.MemBurst = DMA_MBURST_INC4;
 8003516:	4b32      	ldr	r3, [pc, #200]	; (80035e0 <HAL_SD_MspInit+0x1f0>)
 8003518:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800351c:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 800351e:	4b30      	ldr	r3, [pc, #192]	; (80035e0 <HAL_SD_MspInit+0x1f0>)
 8003520:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8003524:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_rx) != HAL_OK)
 8003526:	482e      	ldr	r0, [pc, #184]	; (80035e0 <HAL_SD_MspInit+0x1f0>)
 8003528:	f000 fc9a 	bl	8003e60 <HAL_DMA_Init>
 800352c:	4603      	mov	r3, r0
 800352e:	2b00      	cmp	r3, #0
 8003530:	d001      	beq.n	8003536 <HAL_SD_MspInit+0x146>
    {
      Error_Handler();
 8003532:	f7ff fecf 	bl	80032d4 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmarx,hdma_sdio_rx);
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	4a29      	ldr	r2, [pc, #164]	; (80035e0 <HAL_SD_MspInit+0x1f0>)
 800353a:	641a      	str	r2, [r3, #64]	; 0x40
 800353c:	4a28      	ldr	r2, [pc, #160]	; (80035e0 <HAL_SD_MspInit+0x1f0>)
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO_TX Init */
    hdma_sdio_tx.Instance = DMA2_Stream6;
 8003542:	4b29      	ldr	r3, [pc, #164]	; (80035e8 <HAL_SD_MspInit+0x1f8>)
 8003544:	4a29      	ldr	r2, [pc, #164]	; (80035ec <HAL_SD_MspInit+0x1fc>)
 8003546:	601a      	str	r2, [r3, #0]
    hdma_sdio_tx.Init.Channel = DMA_CHANNEL_4;
 8003548:	4b27      	ldr	r3, [pc, #156]	; (80035e8 <HAL_SD_MspInit+0x1f8>)
 800354a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800354e:	605a      	str	r2, [r3, #4]
    hdma_sdio_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003550:	4b25      	ldr	r3, [pc, #148]	; (80035e8 <HAL_SD_MspInit+0x1f8>)
 8003552:	2240      	movs	r2, #64	; 0x40
 8003554:	609a      	str	r2, [r3, #8]
    hdma_sdio_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003556:	4b24      	ldr	r3, [pc, #144]	; (80035e8 <HAL_SD_MspInit+0x1f8>)
 8003558:	2200      	movs	r2, #0
 800355a:	60da      	str	r2, [r3, #12]
    hdma_sdio_tx.Init.MemInc = DMA_MINC_ENABLE;
 800355c:	4b22      	ldr	r3, [pc, #136]	; (80035e8 <HAL_SD_MspInit+0x1f8>)
 800355e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003562:	611a      	str	r2, [r3, #16]
    hdma_sdio_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003564:	4b20      	ldr	r3, [pc, #128]	; (80035e8 <HAL_SD_MspInit+0x1f8>)
 8003566:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800356a:	615a      	str	r2, [r3, #20]
    hdma_sdio_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800356c:	4b1e      	ldr	r3, [pc, #120]	; (80035e8 <HAL_SD_MspInit+0x1f8>)
 800356e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003572:	619a      	str	r2, [r3, #24]
    hdma_sdio_tx.Init.Mode = DMA_PFCTRL;
 8003574:	4b1c      	ldr	r3, [pc, #112]	; (80035e8 <HAL_SD_MspInit+0x1f8>)
 8003576:	2220      	movs	r2, #32
 8003578:	61da      	str	r2, [r3, #28]
    hdma_sdio_tx.Init.Priority = DMA_PRIORITY_LOW;
 800357a:	4b1b      	ldr	r3, [pc, #108]	; (80035e8 <HAL_SD_MspInit+0x1f8>)
 800357c:	2200      	movs	r2, #0
 800357e:	621a      	str	r2, [r3, #32]
    hdma_sdio_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8003580:	4b19      	ldr	r3, [pc, #100]	; (80035e8 <HAL_SD_MspInit+0x1f8>)
 8003582:	2204      	movs	r2, #4
 8003584:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8003586:	4b18      	ldr	r3, [pc, #96]	; (80035e8 <HAL_SD_MspInit+0x1f8>)
 8003588:	2203      	movs	r2, #3
 800358a:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_tx.Init.MemBurst = DMA_MBURST_INC4;
 800358c:	4b16      	ldr	r3, [pc, #88]	; (80035e8 <HAL_SD_MspInit+0x1f8>)
 800358e:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8003592:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 8003594:	4b14      	ldr	r3, [pc, #80]	; (80035e8 <HAL_SD_MspInit+0x1f8>)
 8003596:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800359a:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_tx) != HAL_OK)
 800359c:	4812      	ldr	r0, [pc, #72]	; (80035e8 <HAL_SD_MspInit+0x1f8>)
 800359e:	f000 fc5f 	bl	8003e60 <HAL_DMA_Init>
 80035a2:	4603      	mov	r3, r0
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d001      	beq.n	80035ac <HAL_SD_MspInit+0x1bc>
    {
      Error_Handler();
 80035a8:	f7ff fe94 	bl	80032d4 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmatx,hdma_sdio_tx);
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	4a0e      	ldr	r2, [pc, #56]	; (80035e8 <HAL_SD_MspInit+0x1f8>)
 80035b0:	63da      	str	r2, [r3, #60]	; 0x3c
 80035b2:	4a0d      	ldr	r2, [pc, #52]	; (80035e8 <HAL_SD_MspInit+0x1f8>)
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO interrupt Init */
    HAL_NVIC_SetPriority(SDIO_IRQn, 0, 0);
 80035b8:	2200      	movs	r2, #0
 80035ba:	2100      	movs	r1, #0
 80035bc:	2031      	movs	r0, #49	; 0x31
 80035be:	f000 fc18 	bl	8003df2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDIO_IRQn);
 80035c2:	2031      	movs	r0, #49	; 0x31
 80035c4:	f000 fc31 	bl	8003e2a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 80035c8:	bf00      	nop
 80035ca:	3728      	adds	r7, #40	; 0x28
 80035cc:	46bd      	mov	sp, r7
 80035ce:	bd80      	pop	{r7, pc}
 80035d0:	40012c00 	.word	0x40012c00
 80035d4:	40023800 	.word	0x40023800
 80035d8:	40020800 	.word	0x40020800
 80035dc:	40020c00 	.word	0x40020c00
 80035e0:	20000e30 	.word	0x20000e30
 80035e4:	40026458 	.word	0x40026458
 80035e8:	20001004 	.word	0x20001004
 80035ec:	400264a0 	.word	0x400264a0

080035f0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80035f0:	b580      	push	{r7, lr}
 80035f2:	b08a      	sub	sp, #40	; 0x28
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80035f8:	f107 0314 	add.w	r3, r7, #20
 80035fc:	2200      	movs	r2, #0
 80035fe:	601a      	str	r2, [r3, #0]
 8003600:	605a      	str	r2, [r3, #4]
 8003602:	609a      	str	r2, [r3, #8]
 8003604:	60da      	str	r2, [r3, #12]
 8003606:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	4a4b      	ldr	r2, [pc, #300]	; (800373c <HAL_SPI_MspInit+0x14c>)
 800360e:	4293      	cmp	r3, r2
 8003610:	f040 8090 	bne.w	8003734 <HAL_SPI_MspInit+0x144>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003614:	2300      	movs	r3, #0
 8003616:	613b      	str	r3, [r7, #16]
 8003618:	4b49      	ldr	r3, [pc, #292]	; (8003740 <HAL_SPI_MspInit+0x150>)
 800361a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800361c:	4a48      	ldr	r2, [pc, #288]	; (8003740 <HAL_SPI_MspInit+0x150>)
 800361e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003622:	6453      	str	r3, [r2, #68]	; 0x44
 8003624:	4b46      	ldr	r3, [pc, #280]	; (8003740 <HAL_SPI_MspInit+0x150>)
 8003626:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003628:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800362c:	613b      	str	r3, [r7, #16]
 800362e:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003630:	2300      	movs	r3, #0
 8003632:	60fb      	str	r3, [r7, #12]
 8003634:	4b42      	ldr	r3, [pc, #264]	; (8003740 <HAL_SPI_MspInit+0x150>)
 8003636:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003638:	4a41      	ldr	r2, [pc, #260]	; (8003740 <HAL_SPI_MspInit+0x150>)
 800363a:	f043 0302 	orr.w	r3, r3, #2
 800363e:	6313      	str	r3, [r2, #48]	; 0x30
 8003640:	4b3f      	ldr	r3, [pc, #252]	; (8003740 <HAL_SPI_MspInit+0x150>)
 8003642:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003644:	f003 0302 	and.w	r3, r3, #2
 8003648:	60fb      	str	r3, [r7, #12]
 800364a:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration    
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = LR_SCK_Pin|LR_MISO_Pin|LR_MOSI_Pin;
 800364c:	2338      	movs	r3, #56	; 0x38
 800364e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003650:	2302      	movs	r3, #2
 8003652:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003654:	2300      	movs	r3, #0
 8003656:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003658:	2303      	movs	r3, #3
 800365a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800365c:	2305      	movs	r3, #5
 800365e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003660:	f107 0314 	add.w	r3, r7, #20
 8003664:	4619      	mov	r1, r3
 8003666:	4837      	ldr	r0, [pc, #220]	; (8003744 <HAL_SPI_MspInit+0x154>)
 8003668:	f000 ff96 	bl	8004598 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA2_Stream0;
 800366c:	4b36      	ldr	r3, [pc, #216]	; (8003748 <HAL_SPI_MspInit+0x158>)
 800366e:	4a37      	ldr	r2, [pc, #220]	; (800374c <HAL_SPI_MspInit+0x15c>)
 8003670:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Channel = DMA_CHANNEL_3;
 8003672:	4b35      	ldr	r3, [pc, #212]	; (8003748 <HAL_SPI_MspInit+0x158>)
 8003674:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8003678:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800367a:	4b33      	ldr	r3, [pc, #204]	; (8003748 <HAL_SPI_MspInit+0x158>)
 800367c:	2200      	movs	r2, #0
 800367e:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003680:	4b31      	ldr	r3, [pc, #196]	; (8003748 <HAL_SPI_MspInit+0x158>)
 8003682:	2200      	movs	r2, #0
 8003684:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003686:	4b30      	ldr	r3, [pc, #192]	; (8003748 <HAL_SPI_MspInit+0x158>)
 8003688:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800368c:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800368e:	4b2e      	ldr	r3, [pc, #184]	; (8003748 <HAL_SPI_MspInit+0x158>)
 8003690:	2200      	movs	r2, #0
 8003692:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003694:	4b2c      	ldr	r3, [pc, #176]	; (8003748 <HAL_SPI_MspInit+0x158>)
 8003696:	2200      	movs	r2, #0
 8003698:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 800369a:	4b2b      	ldr	r3, [pc, #172]	; (8003748 <HAL_SPI_MspInit+0x158>)
 800369c:	2200      	movs	r2, #0
 800369e:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80036a0:	4b29      	ldr	r3, [pc, #164]	; (8003748 <HAL_SPI_MspInit+0x158>)
 80036a2:	2200      	movs	r2, #0
 80036a4:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80036a6:	4b28      	ldr	r3, [pc, #160]	; (8003748 <HAL_SPI_MspInit+0x158>)
 80036a8:	2200      	movs	r2, #0
 80036aa:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 80036ac:	4826      	ldr	r0, [pc, #152]	; (8003748 <HAL_SPI_MspInit+0x158>)
 80036ae:	f000 fbd7 	bl	8003e60 <HAL_DMA_Init>
 80036b2:	4603      	mov	r3, r0
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d001      	beq.n	80036bc <HAL_SPI_MspInit+0xcc>
    {
      Error_Handler();
 80036b8:	f7ff fe0c 	bl	80032d4 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi1_rx);
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	4a22      	ldr	r2, [pc, #136]	; (8003748 <HAL_SPI_MspInit+0x158>)
 80036c0:	64da      	str	r2, [r3, #76]	; 0x4c
 80036c2:	4a21      	ldr	r2, [pc, #132]	; (8003748 <HAL_SPI_MspInit+0x158>)
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream5;
 80036c8:	4b21      	ldr	r3, [pc, #132]	; (8003750 <HAL_SPI_MspInit+0x160>)
 80036ca:	4a22      	ldr	r2, [pc, #136]	; (8003754 <HAL_SPI_MspInit+0x164>)
 80036cc:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 80036ce:	4b20      	ldr	r3, [pc, #128]	; (8003750 <HAL_SPI_MspInit+0x160>)
 80036d0:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 80036d4:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80036d6:	4b1e      	ldr	r3, [pc, #120]	; (8003750 <HAL_SPI_MspInit+0x160>)
 80036d8:	2240      	movs	r2, #64	; 0x40
 80036da:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80036dc:	4b1c      	ldr	r3, [pc, #112]	; (8003750 <HAL_SPI_MspInit+0x160>)
 80036de:	2200      	movs	r2, #0
 80036e0:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80036e2:	4b1b      	ldr	r3, [pc, #108]	; (8003750 <HAL_SPI_MspInit+0x160>)
 80036e4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80036e8:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80036ea:	4b19      	ldr	r3, [pc, #100]	; (8003750 <HAL_SPI_MspInit+0x160>)
 80036ec:	2200      	movs	r2, #0
 80036ee:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80036f0:	4b17      	ldr	r3, [pc, #92]	; (8003750 <HAL_SPI_MspInit+0x160>)
 80036f2:	2200      	movs	r2, #0
 80036f4:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 80036f6:	4b16      	ldr	r3, [pc, #88]	; (8003750 <HAL_SPI_MspInit+0x160>)
 80036f8:	2200      	movs	r2, #0
 80036fa:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80036fc:	4b14      	ldr	r3, [pc, #80]	; (8003750 <HAL_SPI_MspInit+0x160>)
 80036fe:	2200      	movs	r2, #0
 8003700:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003702:	4b13      	ldr	r3, [pc, #76]	; (8003750 <HAL_SPI_MspInit+0x160>)
 8003704:	2200      	movs	r2, #0
 8003706:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8003708:	4811      	ldr	r0, [pc, #68]	; (8003750 <HAL_SPI_MspInit+0x160>)
 800370a:	f000 fba9 	bl	8003e60 <HAL_DMA_Init>
 800370e:	4603      	mov	r3, r0
 8003710:	2b00      	cmp	r3, #0
 8003712:	d001      	beq.n	8003718 <HAL_SPI_MspInit+0x128>
    {
      Error_Handler();
 8003714:	f7ff fdde 	bl	80032d4 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	4a0d      	ldr	r2, [pc, #52]	; (8003750 <HAL_SPI_MspInit+0x160>)
 800371c:	649a      	str	r2, [r3, #72]	; 0x48
 800371e:	4a0c      	ldr	r2, [pc, #48]	; (8003750 <HAL_SPI_MspInit+0x160>)
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8003724:	2200      	movs	r2, #0
 8003726:	2100      	movs	r1, #0
 8003728:	2023      	movs	r0, #35	; 0x23
 800372a:	f000 fb62 	bl	8003df2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 800372e:	2023      	movs	r0, #35	; 0x23
 8003730:	f000 fb7b 	bl	8003e2a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8003734:	bf00      	nop
 8003736:	3728      	adds	r7, #40	; 0x28
 8003738:	46bd      	mov	sp, r7
 800373a:	bd80      	pop	{r7, pc}
 800373c:	40013000 	.word	0x40013000
 8003740:	40023800 	.word	0x40023800
 8003744:	40020400 	.word	0x40020400
 8003748:	200011c0 	.word	0x200011c0
 800374c:	40026410 	.word	0x40026410
 8003750:	20001220 	.word	0x20001220
 8003754:	40026488 	.word	0x40026488

08003758 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003758:	b480      	push	{r7}
 800375a:	b089      	sub	sp, #36	; 0x24
 800375c:	af00      	add	r7, sp, #0
 800375e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	4a33      	ldr	r2, [pc, #204]	; (8003834 <HAL_TIM_Base_MspInit+0xdc>)
 8003766:	4293      	cmp	r3, r2
 8003768:	d10e      	bne.n	8003788 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800376a:	2300      	movs	r3, #0
 800376c:	61fb      	str	r3, [r7, #28]
 800376e:	4b32      	ldr	r3, [pc, #200]	; (8003838 <HAL_TIM_Base_MspInit+0xe0>)
 8003770:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003772:	4a31      	ldr	r2, [pc, #196]	; (8003838 <HAL_TIM_Base_MspInit+0xe0>)
 8003774:	f043 0301 	orr.w	r3, r3, #1
 8003778:	6453      	str	r3, [r2, #68]	; 0x44
 800377a:	4b2f      	ldr	r3, [pc, #188]	; (8003838 <HAL_TIM_Base_MspInit+0xe0>)
 800377c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800377e:	f003 0301 	and.w	r3, r3, #1
 8003782:	61fb      	str	r3, [r7, #28]
 8003784:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8003786:	e04e      	b.n	8003826 <HAL_TIM_Base_MspInit+0xce>
  else if(htim_base->Instance==TIM2)
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003790:	d10e      	bne.n	80037b0 <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003792:	2300      	movs	r3, #0
 8003794:	61bb      	str	r3, [r7, #24]
 8003796:	4b28      	ldr	r3, [pc, #160]	; (8003838 <HAL_TIM_Base_MspInit+0xe0>)
 8003798:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800379a:	4a27      	ldr	r2, [pc, #156]	; (8003838 <HAL_TIM_Base_MspInit+0xe0>)
 800379c:	f043 0301 	orr.w	r3, r3, #1
 80037a0:	6413      	str	r3, [r2, #64]	; 0x40
 80037a2:	4b25      	ldr	r3, [pc, #148]	; (8003838 <HAL_TIM_Base_MspInit+0xe0>)
 80037a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037a6:	f003 0301 	and.w	r3, r3, #1
 80037aa:	61bb      	str	r3, [r7, #24]
 80037ac:	69bb      	ldr	r3, [r7, #24]
}
 80037ae:	e03a      	b.n	8003826 <HAL_TIM_Base_MspInit+0xce>
  else if(htim_base->Instance==TIM3)
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	4a21      	ldr	r2, [pc, #132]	; (800383c <HAL_TIM_Base_MspInit+0xe4>)
 80037b6:	4293      	cmp	r3, r2
 80037b8:	d10e      	bne.n	80037d8 <HAL_TIM_Base_MspInit+0x80>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80037ba:	2300      	movs	r3, #0
 80037bc:	617b      	str	r3, [r7, #20]
 80037be:	4b1e      	ldr	r3, [pc, #120]	; (8003838 <HAL_TIM_Base_MspInit+0xe0>)
 80037c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037c2:	4a1d      	ldr	r2, [pc, #116]	; (8003838 <HAL_TIM_Base_MspInit+0xe0>)
 80037c4:	f043 0302 	orr.w	r3, r3, #2
 80037c8:	6413      	str	r3, [r2, #64]	; 0x40
 80037ca:	4b1b      	ldr	r3, [pc, #108]	; (8003838 <HAL_TIM_Base_MspInit+0xe0>)
 80037cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037ce:	f003 0302 	and.w	r3, r3, #2
 80037d2:	617b      	str	r3, [r7, #20]
 80037d4:	697b      	ldr	r3, [r7, #20]
}
 80037d6:	e026      	b.n	8003826 <HAL_TIM_Base_MspInit+0xce>
  else if(htim_base->Instance==TIM4)
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	4a18      	ldr	r2, [pc, #96]	; (8003840 <HAL_TIM_Base_MspInit+0xe8>)
 80037de:	4293      	cmp	r3, r2
 80037e0:	d10e      	bne.n	8003800 <HAL_TIM_Base_MspInit+0xa8>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80037e2:	2300      	movs	r3, #0
 80037e4:	613b      	str	r3, [r7, #16]
 80037e6:	4b14      	ldr	r3, [pc, #80]	; (8003838 <HAL_TIM_Base_MspInit+0xe0>)
 80037e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037ea:	4a13      	ldr	r2, [pc, #76]	; (8003838 <HAL_TIM_Base_MspInit+0xe0>)
 80037ec:	f043 0304 	orr.w	r3, r3, #4
 80037f0:	6413      	str	r3, [r2, #64]	; 0x40
 80037f2:	4b11      	ldr	r3, [pc, #68]	; (8003838 <HAL_TIM_Base_MspInit+0xe0>)
 80037f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037f6:	f003 0304 	and.w	r3, r3, #4
 80037fa:	613b      	str	r3, [r7, #16]
 80037fc:	693b      	ldr	r3, [r7, #16]
}
 80037fe:	e012      	b.n	8003826 <HAL_TIM_Base_MspInit+0xce>
  else if(htim_base->Instance==TIM5)
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	4a0f      	ldr	r2, [pc, #60]	; (8003844 <HAL_TIM_Base_MspInit+0xec>)
 8003806:	4293      	cmp	r3, r2
 8003808:	d10d      	bne.n	8003826 <HAL_TIM_Base_MspInit+0xce>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800380a:	2300      	movs	r3, #0
 800380c:	60fb      	str	r3, [r7, #12]
 800380e:	4b0a      	ldr	r3, [pc, #40]	; (8003838 <HAL_TIM_Base_MspInit+0xe0>)
 8003810:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003812:	4a09      	ldr	r2, [pc, #36]	; (8003838 <HAL_TIM_Base_MspInit+0xe0>)
 8003814:	f043 0308 	orr.w	r3, r3, #8
 8003818:	6413      	str	r3, [r2, #64]	; 0x40
 800381a:	4b07      	ldr	r3, [pc, #28]	; (8003838 <HAL_TIM_Base_MspInit+0xe0>)
 800381c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800381e:	f003 0308 	and.w	r3, r3, #8
 8003822:	60fb      	str	r3, [r7, #12]
 8003824:	68fb      	ldr	r3, [r7, #12]
}
 8003826:	bf00      	nop
 8003828:	3724      	adds	r7, #36	; 0x24
 800382a:	46bd      	mov	sp, r7
 800382c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003830:	4770      	bx	lr
 8003832:	bf00      	nop
 8003834:	40010000 	.word	0x40010000
 8003838:	40023800 	.word	0x40023800
 800383c:	40000400 	.word	0x40000400
 8003840:	40000800 	.word	0x40000800
 8003844:	40000c00 	.word	0x40000c00

08003848 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003848:	b580      	push	{r7, lr}
 800384a:	b08a      	sub	sp, #40	; 0x28
 800384c:	af00      	add	r7, sp, #0
 800384e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003850:	f107 0314 	add.w	r3, r7, #20
 8003854:	2200      	movs	r2, #0
 8003856:	601a      	str	r2, [r3, #0]
 8003858:	605a      	str	r2, [r3, #4]
 800385a:	609a      	str	r2, [r3, #8]
 800385c:	60da      	str	r2, [r3, #12]
 800385e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	4a24      	ldr	r2, [pc, #144]	; (80038f8 <HAL_TIM_MspPostInit+0xb0>)
 8003866:	4293      	cmp	r3, r2
 8003868:	d11e      	bne.n	80038a8 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800386a:	2300      	movs	r3, #0
 800386c:	613b      	str	r3, [r7, #16]
 800386e:	4b23      	ldr	r3, [pc, #140]	; (80038fc <HAL_TIM_MspPostInit+0xb4>)
 8003870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003872:	4a22      	ldr	r2, [pc, #136]	; (80038fc <HAL_TIM_MspPostInit+0xb4>)
 8003874:	f043 0302 	orr.w	r3, r3, #2
 8003878:	6313      	str	r3, [r2, #48]	; 0x30
 800387a:	4b20      	ldr	r3, [pc, #128]	; (80038fc <HAL_TIM_MspPostInit+0xb4>)
 800387c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800387e:	f003 0302 	and.w	r3, r3, #2
 8003882:	613b      	str	r3, [r7, #16]
 8003884:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration    
    PB0     ------> TIM3_CH3
    PB1     ------> TIM3_CH4 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8003886:	2303      	movs	r3, #3
 8003888:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800388a:	2302      	movs	r3, #2
 800388c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800388e:	2300      	movs	r3, #0
 8003890:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003892:	2300      	movs	r3, #0
 8003894:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003896:	2302      	movs	r3, #2
 8003898:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800389a:	f107 0314 	add.w	r3, r7, #20
 800389e:	4619      	mov	r1, r3
 80038a0:	4817      	ldr	r0, [pc, #92]	; (8003900 <HAL_TIM_MspPostInit+0xb8>)
 80038a2:	f000 fe79 	bl	8004598 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 80038a6:	e022      	b.n	80038ee <HAL_TIM_MspPostInit+0xa6>
  else if(htim->Instance==TIM5)
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	4a15      	ldr	r2, [pc, #84]	; (8003904 <HAL_TIM_MspPostInit+0xbc>)
 80038ae:	4293      	cmp	r3, r2
 80038b0:	d11d      	bne.n	80038ee <HAL_TIM_MspPostInit+0xa6>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80038b2:	2300      	movs	r3, #0
 80038b4:	60fb      	str	r3, [r7, #12]
 80038b6:	4b11      	ldr	r3, [pc, #68]	; (80038fc <HAL_TIM_MspPostInit+0xb4>)
 80038b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038ba:	4a10      	ldr	r2, [pc, #64]	; (80038fc <HAL_TIM_MspPostInit+0xb4>)
 80038bc:	f043 0301 	orr.w	r3, r3, #1
 80038c0:	6313      	str	r3, [r2, #48]	; 0x30
 80038c2:	4b0e      	ldr	r3, [pc, #56]	; (80038fc <HAL_TIM_MspPostInit+0xb4>)
 80038c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038c6:	f003 0301 	and.w	r3, r3, #1
 80038ca:	60fb      	str	r3, [r7, #12]
 80038cc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_3;
 80038ce:	230a      	movs	r3, #10
 80038d0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80038d2:	2302      	movs	r3, #2
 80038d4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038d6:	2300      	movs	r3, #0
 80038d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80038da:	2300      	movs	r3, #0
 80038dc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80038de:	2302      	movs	r3, #2
 80038e0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80038e2:	f107 0314 	add.w	r3, r7, #20
 80038e6:	4619      	mov	r1, r3
 80038e8:	4807      	ldr	r0, [pc, #28]	; (8003908 <HAL_TIM_MspPostInit+0xc0>)
 80038ea:	f000 fe55 	bl	8004598 <HAL_GPIO_Init>
}
 80038ee:	bf00      	nop
 80038f0:	3728      	adds	r7, #40	; 0x28
 80038f2:	46bd      	mov	sp, r7
 80038f4:	bd80      	pop	{r7, pc}
 80038f6:	bf00      	nop
 80038f8:	40000400 	.word	0x40000400
 80038fc:	40023800 	.word	0x40023800
 8003900:	40020400 	.word	0x40020400
 8003904:	40000c00 	.word	0x40000c00
 8003908:	40020000 	.word	0x40020000

0800390c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800390c:	b580      	push	{r7, lr}
 800390e:	b08a      	sub	sp, #40	; 0x28
 8003910:	af00      	add	r7, sp, #0
 8003912:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003914:	f107 0314 	add.w	r3, r7, #20
 8003918:	2200      	movs	r2, #0
 800391a:	601a      	str	r2, [r3, #0]
 800391c:	605a      	str	r2, [r3, #4]
 800391e:	609a      	str	r2, [r3, #8]
 8003920:	60da      	str	r2, [r3, #12]
 8003922:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	4a19      	ldr	r2, [pc, #100]	; (8003990 <HAL_UART_MspInit+0x84>)
 800392a:	4293      	cmp	r3, r2
 800392c:	d12c      	bne.n	8003988 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800392e:	2300      	movs	r3, #0
 8003930:	613b      	str	r3, [r7, #16]
 8003932:	4b18      	ldr	r3, [pc, #96]	; (8003994 <HAL_UART_MspInit+0x88>)
 8003934:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003936:	4a17      	ldr	r2, [pc, #92]	; (8003994 <HAL_UART_MspInit+0x88>)
 8003938:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800393c:	6413      	str	r3, [r2, #64]	; 0x40
 800393e:	4b15      	ldr	r3, [pc, #84]	; (8003994 <HAL_UART_MspInit+0x88>)
 8003940:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003942:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003946:	613b      	str	r3, [r7, #16]
 8003948:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800394a:	2300      	movs	r3, #0
 800394c:	60fb      	str	r3, [r7, #12]
 800394e:	4b11      	ldr	r3, [pc, #68]	; (8003994 <HAL_UART_MspInit+0x88>)
 8003950:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003952:	4a10      	ldr	r2, [pc, #64]	; (8003994 <HAL_UART_MspInit+0x88>)
 8003954:	f043 0302 	orr.w	r3, r3, #2
 8003958:	6313      	str	r3, [r2, #48]	; 0x30
 800395a:	4b0e      	ldr	r3, [pc, #56]	; (8003994 <HAL_UART_MspInit+0x88>)
 800395c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800395e:	f003 0302 	and.w	r3, r3, #2
 8003962:	60fb      	str	r3, [r7, #12]
 8003964:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration    
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX 
    */
    GPIO_InitStruct.Pin = GPS_RX_Pin|GPS_TX_Pin;
 8003966:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800396a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800396c:	2302      	movs	r3, #2
 800396e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003970:	2300      	movs	r3, #0
 8003972:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003974:	2303      	movs	r3, #3
 8003976:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8003978:	2307      	movs	r3, #7
 800397a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800397c:	f107 0314 	add.w	r3, r7, #20
 8003980:	4619      	mov	r1, r3
 8003982:	4805      	ldr	r0, [pc, #20]	; (8003998 <HAL_UART_MspInit+0x8c>)
 8003984:	f000 fe08 	bl	8004598 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8003988:	bf00      	nop
 800398a:	3728      	adds	r7, #40	; 0x28
 800398c:	46bd      	mov	sp, r7
 800398e:	bd80      	pop	{r7, pc}
 8003990:	40004800 	.word	0x40004800
 8003994:	40023800 	.word	0x40023800
 8003998:	40020400 	.word	0x40020400

0800399c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800399c:	b480      	push	{r7}
 800399e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80039a0:	bf00      	nop
 80039a2:	46bd      	mov	sp, r7
 80039a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a8:	4770      	bx	lr

080039aa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80039aa:	b480      	push	{r7}
 80039ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80039ae:	e7fe      	b.n	80039ae <HardFault_Handler+0x4>

080039b0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80039b0:	b480      	push	{r7}
 80039b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80039b4:	e7fe      	b.n	80039b4 <MemManage_Handler+0x4>

080039b6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80039b6:	b480      	push	{r7}
 80039b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80039ba:	e7fe      	b.n	80039ba <BusFault_Handler+0x4>

080039bc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80039bc:	b480      	push	{r7}
 80039be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80039c0:	e7fe      	b.n	80039c0 <UsageFault_Handler+0x4>

080039c2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80039c2:	b480      	push	{r7}
 80039c4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80039c6:	bf00      	nop
 80039c8:	46bd      	mov	sp, r7
 80039ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ce:	4770      	bx	lr

080039d0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80039d0:	b480      	push	{r7}
 80039d2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80039d4:	bf00      	nop
 80039d6:	46bd      	mov	sp, r7
 80039d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039dc:	4770      	bx	lr

080039de <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80039de:	b480      	push	{r7}
 80039e0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80039e2:	bf00      	nop
 80039e4:	46bd      	mov	sp, r7
 80039e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ea:	4770      	bx	lr

080039ec <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80039ec:	b580      	push	{r7, lr}
 80039ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80039f0:	f000 f8e2 	bl	8003bb8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80039f4:	bf00      	nop
 80039f6:	bd80      	pop	{r7, pc}

080039f8 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80039f8:	b580      	push	{r7, lr}
 80039fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 80039fc:	2040      	movs	r0, #64	; 0x40
 80039fe:	f000 ff97 	bl	8004930 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8003a02:	bf00      	nop
 8003a04:	bd80      	pop	{r7, pc}
	...

08003a08 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8003a08:	b580      	push	{r7, lr}
 8003a0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8003a0c:	4802      	ldr	r0, [pc, #8]	; (8003a18 <SPI1_IRQHandler+0x10>)
 8003a0e:	f004 fbf9 	bl	8008204 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8003a12:	bf00      	nop
 8003a14:	bd80      	pop	{r7, pc}
 8003a16:	bf00      	nop
 8003a18:	20001128 	.word	0x20001128

08003a1c <SDIO_IRQHandler>:

/**
  * @brief This function handles SDIO global interrupt.
  */
void SDIO_IRQHandler(void)
{
 8003a1c:	b580      	push	{r7, lr}
 8003a1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDIO_IRQn 0 */

  /* USER CODE END SDIO_IRQn 0 */
  HAL_SD_IRQHandler(&hsd);
 8003a20:	4802      	ldr	r0, [pc, #8]	; (8003a2c <SDIO_IRQHandler+0x10>)
 8003a22:	f003 fad9 	bl	8006fd8 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDIO_IRQn 1 */

  /* USER CODE END SDIO_IRQn 1 */
}
 8003a26:	bf00      	nop
 8003a28:	bd80      	pop	{r7, pc}
 8003a2a:	bf00      	nop
 8003a2c:	200010a4 	.word	0x200010a4

08003a30 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8003a30:	b580      	push	{r7, lr}
 8003a32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8003a34:	4802      	ldr	r0, [pc, #8]	; (8003a40 <DMA2_Stream0_IRQHandler+0x10>)
 8003a36:	f000 fb3b 	bl	80040b0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8003a3a:	bf00      	nop
 8003a3c:	bd80      	pop	{r7, pc}
 8003a3e:	bf00      	nop
 8003a40:	200011c0 	.word	0x200011c0

08003a44 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8003a44:	b580      	push	{r7, lr}
 8003a46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_rx);
 8003a48:	4802      	ldr	r0, [pc, #8]	; (8003a54 <DMA2_Stream3_IRQHandler+0x10>)
 8003a4a:	f000 fb31 	bl	80040b0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8003a4e:	bf00      	nop
 8003a50:	bd80      	pop	{r7, pc}
 8003a52:	bf00      	nop
 8003a54:	20000e30 	.word	0x20000e30

08003a58 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8003a58:	b580      	push	{r7, lr}
 8003a5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8003a5c:	4802      	ldr	r0, [pc, #8]	; (8003a68 <OTG_FS_IRQHandler+0x10>)
 8003a5e:	f001 fa13 	bl	8004e88 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8003a62:	bf00      	nop
 8003a64:	bd80      	pop	{r7, pc}
 8003a66:	bf00      	nop
 8003a68:	2000478c 	.word	0x2000478c

08003a6c <DMA2_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA2 stream5 global interrupt.
  */
void DMA2_Stream5_IRQHandler(void)
{
 8003a6c:	b580      	push	{r7, lr}
 8003a6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream5_IRQn 0 */

  /* USER CODE END DMA2_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8003a70:	4802      	ldr	r0, [pc, #8]	; (8003a7c <DMA2_Stream5_IRQHandler+0x10>)
 8003a72:	f000 fb1d 	bl	80040b0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream5_IRQn 1 */

  /* USER CODE END DMA2_Stream5_IRQn 1 */
}
 8003a76:	bf00      	nop
 8003a78:	bd80      	pop	{r7, pc}
 8003a7a:	bf00      	nop
 8003a7c:	20001220 	.word	0x20001220

08003a80 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8003a80:	b580      	push	{r7, lr}
 8003a82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_tx);
 8003a84:	4802      	ldr	r0, [pc, #8]	; (8003a90 <DMA2_Stream6_IRQHandler+0x10>)
 8003a86:	f000 fb13 	bl	80040b0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8003a8a:	bf00      	nop
 8003a8c:	bd80      	pop	{r7, pc}
 8003a8e:	bf00      	nop
 8003a90:	20001004 	.word	0x20001004

08003a94 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003a94:	b480      	push	{r7}
 8003a96:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003a98:	4b08      	ldr	r3, [pc, #32]	; (8003abc <SystemInit+0x28>)
 8003a9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a9e:	4a07      	ldr	r2, [pc, #28]	; (8003abc <SystemInit+0x28>)
 8003aa0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003aa4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003aa8:	4b04      	ldr	r3, [pc, #16]	; (8003abc <SystemInit+0x28>)
 8003aaa:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003aae:	609a      	str	r2, [r3, #8]
#endif
}
 8003ab0:	bf00      	nop
 8003ab2:	46bd      	mov	sp, r7
 8003ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab8:	4770      	bx	lr
 8003aba:	bf00      	nop
 8003abc:	e000ed00 	.word	0xe000ed00

08003ac0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8003ac0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003af8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8003ac4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8003ac6:	e003      	b.n	8003ad0 <LoopCopyDataInit>

08003ac8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8003ac8:	4b0c      	ldr	r3, [pc, #48]	; (8003afc <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8003aca:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8003acc:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8003ace:	3104      	adds	r1, #4

08003ad0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8003ad0:	480b      	ldr	r0, [pc, #44]	; (8003b00 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8003ad2:	4b0c      	ldr	r3, [pc, #48]	; (8003b04 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8003ad4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8003ad6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8003ad8:	d3f6      	bcc.n	8003ac8 <CopyDataInit>
  ldr  r2, =_sbss
 8003ada:	4a0b      	ldr	r2, [pc, #44]	; (8003b08 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8003adc:	e002      	b.n	8003ae4 <LoopFillZerobss>

08003ade <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8003ade:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8003ae0:	f842 3b04 	str.w	r3, [r2], #4

08003ae4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8003ae4:	4b09      	ldr	r3, [pc, #36]	; (8003b0c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8003ae6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8003ae8:	d3f9      	bcc.n	8003ade <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8003aea:	f7ff ffd3 	bl	8003a94 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003aee:	f00a fbc9 	bl	800e284 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003af2:	f7fe ff49 	bl	8002988 <main>
  bx  lr    
 8003af6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8003af8:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8003afc:	080129b8 	.word	0x080129b8
  ldr  r0, =_sdata
 8003b00:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8003b04:	2000034c 	.word	0x2000034c
  ldr  r2, =_sbss
 8003b08:	2000034c 	.word	0x2000034c
  ldr  r3, = _ebss
 8003b0c:	20004b98 	.word	0x20004b98

08003b10 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003b10:	e7fe      	b.n	8003b10 <ADC_IRQHandler>
	...

08003b14 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003b14:	b580      	push	{r7, lr}
 8003b16:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003b18:	4b0e      	ldr	r3, [pc, #56]	; (8003b54 <HAL_Init+0x40>)
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	4a0d      	ldr	r2, [pc, #52]	; (8003b54 <HAL_Init+0x40>)
 8003b1e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003b22:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003b24:	4b0b      	ldr	r3, [pc, #44]	; (8003b54 <HAL_Init+0x40>)
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	4a0a      	ldr	r2, [pc, #40]	; (8003b54 <HAL_Init+0x40>)
 8003b2a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003b2e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003b30:	4b08      	ldr	r3, [pc, #32]	; (8003b54 <HAL_Init+0x40>)
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	4a07      	ldr	r2, [pc, #28]	; (8003b54 <HAL_Init+0x40>)
 8003b36:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b3a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003b3c:	2003      	movs	r0, #3
 8003b3e:	f000 f94d 	bl	8003ddc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003b42:	2000      	movs	r0, #0
 8003b44:	f000 f808 	bl	8003b58 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003b48:	f7ff fbcc 	bl	80032e4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003b4c:	2300      	movs	r3, #0
}
 8003b4e:	4618      	mov	r0, r3
 8003b50:	bd80      	pop	{r7, pc}
 8003b52:	bf00      	nop
 8003b54:	40023c00 	.word	0x40023c00

08003b58 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003b58:	b580      	push	{r7, lr}
 8003b5a:	b082      	sub	sp, #8
 8003b5c:	af00      	add	r7, sp, #0
 8003b5e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003b60:	4b12      	ldr	r3, [pc, #72]	; (8003bac <HAL_InitTick+0x54>)
 8003b62:	681a      	ldr	r2, [r3, #0]
 8003b64:	4b12      	ldr	r3, [pc, #72]	; (8003bb0 <HAL_InitTick+0x58>)
 8003b66:	781b      	ldrb	r3, [r3, #0]
 8003b68:	4619      	mov	r1, r3
 8003b6a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003b6e:	fbb3 f3f1 	udiv	r3, r3, r1
 8003b72:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b76:	4618      	mov	r0, r3
 8003b78:	f000 f965 	bl	8003e46 <HAL_SYSTICK_Config>
 8003b7c:	4603      	mov	r3, r0
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d001      	beq.n	8003b86 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003b82:	2301      	movs	r3, #1
 8003b84:	e00e      	b.n	8003ba4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	2b0f      	cmp	r3, #15
 8003b8a:	d80a      	bhi.n	8003ba2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003b8c:	2200      	movs	r2, #0
 8003b8e:	6879      	ldr	r1, [r7, #4]
 8003b90:	f04f 30ff 	mov.w	r0, #4294967295
 8003b94:	f000 f92d 	bl	8003df2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003b98:	4a06      	ldr	r2, [pc, #24]	; (8003bb4 <HAL_InitTick+0x5c>)
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003b9e:	2300      	movs	r3, #0
 8003ba0:	e000      	b.n	8003ba4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003ba2:	2301      	movs	r3, #1
}
 8003ba4:	4618      	mov	r0, r3
 8003ba6:	3708      	adds	r7, #8
 8003ba8:	46bd      	mov	sp, r7
 8003baa:	bd80      	pop	{r7, pc}
 8003bac:	20000000 	.word	0x20000000
 8003bb0:	20000008 	.word	0x20000008
 8003bb4:	20000004 	.word	0x20000004

08003bb8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003bb8:	b480      	push	{r7}
 8003bba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003bbc:	4b06      	ldr	r3, [pc, #24]	; (8003bd8 <HAL_IncTick+0x20>)
 8003bbe:	781b      	ldrb	r3, [r3, #0]
 8003bc0:	461a      	mov	r2, r3
 8003bc2:	4b06      	ldr	r3, [pc, #24]	; (8003bdc <HAL_IncTick+0x24>)
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	4413      	add	r3, r2
 8003bc8:	4a04      	ldr	r2, [pc, #16]	; (8003bdc <HAL_IncTick+0x24>)
 8003bca:	6013      	str	r3, [r2, #0]
}
 8003bcc:	bf00      	nop
 8003bce:	46bd      	mov	sp, r7
 8003bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd4:	4770      	bx	lr
 8003bd6:	bf00      	nop
 8003bd8:	20000008 	.word	0x20000008
 8003bdc:	20001280 	.word	0x20001280

08003be0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003be0:	b480      	push	{r7}
 8003be2:	af00      	add	r7, sp, #0
  return uwTick;
 8003be4:	4b03      	ldr	r3, [pc, #12]	; (8003bf4 <HAL_GetTick+0x14>)
 8003be6:	681b      	ldr	r3, [r3, #0]
}
 8003be8:	4618      	mov	r0, r3
 8003bea:	46bd      	mov	sp, r7
 8003bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf0:	4770      	bx	lr
 8003bf2:	bf00      	nop
 8003bf4:	20001280 	.word	0x20001280

08003bf8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003bf8:	b580      	push	{r7, lr}
 8003bfa:	b084      	sub	sp, #16
 8003bfc:	af00      	add	r7, sp, #0
 8003bfe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003c00:	f7ff ffee 	bl	8003be0 <HAL_GetTick>
 8003c04:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c10:	d005      	beq.n	8003c1e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003c12:	4b09      	ldr	r3, [pc, #36]	; (8003c38 <HAL_Delay+0x40>)
 8003c14:	781b      	ldrb	r3, [r3, #0]
 8003c16:	461a      	mov	r2, r3
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	4413      	add	r3, r2
 8003c1c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003c1e:	bf00      	nop
 8003c20:	f7ff ffde 	bl	8003be0 <HAL_GetTick>
 8003c24:	4602      	mov	r2, r0
 8003c26:	68bb      	ldr	r3, [r7, #8]
 8003c28:	1ad3      	subs	r3, r2, r3
 8003c2a:	68fa      	ldr	r2, [r7, #12]
 8003c2c:	429a      	cmp	r2, r3
 8003c2e:	d8f7      	bhi.n	8003c20 <HAL_Delay+0x28>
  {
  }
}
 8003c30:	bf00      	nop
 8003c32:	3710      	adds	r7, #16
 8003c34:	46bd      	mov	sp, r7
 8003c36:	bd80      	pop	{r7, pc}
 8003c38:	20000008 	.word	0x20000008

08003c3c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003c3c:	b480      	push	{r7}
 8003c3e:	b085      	sub	sp, #20
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	f003 0307 	and.w	r3, r3, #7
 8003c4a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003c4c:	4b0c      	ldr	r3, [pc, #48]	; (8003c80 <__NVIC_SetPriorityGrouping+0x44>)
 8003c4e:	68db      	ldr	r3, [r3, #12]
 8003c50:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003c52:	68ba      	ldr	r2, [r7, #8]
 8003c54:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003c58:	4013      	ands	r3, r2
 8003c5a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003c60:	68bb      	ldr	r3, [r7, #8]
 8003c62:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003c64:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003c68:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003c6c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003c6e:	4a04      	ldr	r2, [pc, #16]	; (8003c80 <__NVIC_SetPriorityGrouping+0x44>)
 8003c70:	68bb      	ldr	r3, [r7, #8]
 8003c72:	60d3      	str	r3, [r2, #12]
}
 8003c74:	bf00      	nop
 8003c76:	3714      	adds	r7, #20
 8003c78:	46bd      	mov	sp, r7
 8003c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c7e:	4770      	bx	lr
 8003c80:	e000ed00 	.word	0xe000ed00

08003c84 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003c84:	b480      	push	{r7}
 8003c86:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003c88:	4b04      	ldr	r3, [pc, #16]	; (8003c9c <__NVIC_GetPriorityGrouping+0x18>)
 8003c8a:	68db      	ldr	r3, [r3, #12]
 8003c8c:	0a1b      	lsrs	r3, r3, #8
 8003c8e:	f003 0307 	and.w	r3, r3, #7
}
 8003c92:	4618      	mov	r0, r3
 8003c94:	46bd      	mov	sp, r7
 8003c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c9a:	4770      	bx	lr
 8003c9c:	e000ed00 	.word	0xe000ed00

08003ca0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003ca0:	b480      	push	{r7}
 8003ca2:	b083      	sub	sp, #12
 8003ca4:	af00      	add	r7, sp, #0
 8003ca6:	4603      	mov	r3, r0
 8003ca8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003caa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	db0b      	blt.n	8003cca <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003cb2:	79fb      	ldrb	r3, [r7, #7]
 8003cb4:	f003 021f 	and.w	r2, r3, #31
 8003cb8:	4907      	ldr	r1, [pc, #28]	; (8003cd8 <__NVIC_EnableIRQ+0x38>)
 8003cba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003cbe:	095b      	lsrs	r3, r3, #5
 8003cc0:	2001      	movs	r0, #1
 8003cc2:	fa00 f202 	lsl.w	r2, r0, r2
 8003cc6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003cca:	bf00      	nop
 8003ccc:	370c      	adds	r7, #12
 8003cce:	46bd      	mov	sp, r7
 8003cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd4:	4770      	bx	lr
 8003cd6:	bf00      	nop
 8003cd8:	e000e100 	.word	0xe000e100

08003cdc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003cdc:	b480      	push	{r7}
 8003cde:	b083      	sub	sp, #12
 8003ce0:	af00      	add	r7, sp, #0
 8003ce2:	4603      	mov	r3, r0
 8003ce4:	6039      	str	r1, [r7, #0]
 8003ce6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003ce8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	db0a      	blt.n	8003d06 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003cf0:	683b      	ldr	r3, [r7, #0]
 8003cf2:	b2da      	uxtb	r2, r3
 8003cf4:	490c      	ldr	r1, [pc, #48]	; (8003d28 <__NVIC_SetPriority+0x4c>)
 8003cf6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003cfa:	0112      	lsls	r2, r2, #4
 8003cfc:	b2d2      	uxtb	r2, r2
 8003cfe:	440b      	add	r3, r1
 8003d00:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003d04:	e00a      	b.n	8003d1c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003d06:	683b      	ldr	r3, [r7, #0]
 8003d08:	b2da      	uxtb	r2, r3
 8003d0a:	4908      	ldr	r1, [pc, #32]	; (8003d2c <__NVIC_SetPriority+0x50>)
 8003d0c:	79fb      	ldrb	r3, [r7, #7]
 8003d0e:	f003 030f 	and.w	r3, r3, #15
 8003d12:	3b04      	subs	r3, #4
 8003d14:	0112      	lsls	r2, r2, #4
 8003d16:	b2d2      	uxtb	r2, r2
 8003d18:	440b      	add	r3, r1
 8003d1a:	761a      	strb	r2, [r3, #24]
}
 8003d1c:	bf00      	nop
 8003d1e:	370c      	adds	r7, #12
 8003d20:	46bd      	mov	sp, r7
 8003d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d26:	4770      	bx	lr
 8003d28:	e000e100 	.word	0xe000e100
 8003d2c:	e000ed00 	.word	0xe000ed00

08003d30 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003d30:	b480      	push	{r7}
 8003d32:	b089      	sub	sp, #36	; 0x24
 8003d34:	af00      	add	r7, sp, #0
 8003d36:	60f8      	str	r0, [r7, #12]
 8003d38:	60b9      	str	r1, [r7, #8]
 8003d3a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	f003 0307 	and.w	r3, r3, #7
 8003d42:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003d44:	69fb      	ldr	r3, [r7, #28]
 8003d46:	f1c3 0307 	rsb	r3, r3, #7
 8003d4a:	2b04      	cmp	r3, #4
 8003d4c:	bf28      	it	cs
 8003d4e:	2304      	movcs	r3, #4
 8003d50:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003d52:	69fb      	ldr	r3, [r7, #28]
 8003d54:	3304      	adds	r3, #4
 8003d56:	2b06      	cmp	r3, #6
 8003d58:	d902      	bls.n	8003d60 <NVIC_EncodePriority+0x30>
 8003d5a:	69fb      	ldr	r3, [r7, #28]
 8003d5c:	3b03      	subs	r3, #3
 8003d5e:	e000      	b.n	8003d62 <NVIC_EncodePriority+0x32>
 8003d60:	2300      	movs	r3, #0
 8003d62:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003d64:	f04f 32ff 	mov.w	r2, #4294967295
 8003d68:	69bb      	ldr	r3, [r7, #24]
 8003d6a:	fa02 f303 	lsl.w	r3, r2, r3
 8003d6e:	43da      	mvns	r2, r3
 8003d70:	68bb      	ldr	r3, [r7, #8]
 8003d72:	401a      	ands	r2, r3
 8003d74:	697b      	ldr	r3, [r7, #20]
 8003d76:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003d78:	f04f 31ff 	mov.w	r1, #4294967295
 8003d7c:	697b      	ldr	r3, [r7, #20]
 8003d7e:	fa01 f303 	lsl.w	r3, r1, r3
 8003d82:	43d9      	mvns	r1, r3
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003d88:	4313      	orrs	r3, r2
         );
}
 8003d8a:	4618      	mov	r0, r3
 8003d8c:	3724      	adds	r7, #36	; 0x24
 8003d8e:	46bd      	mov	sp, r7
 8003d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d94:	4770      	bx	lr
	...

08003d98 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003d98:	b580      	push	{r7, lr}
 8003d9a:	b082      	sub	sp, #8
 8003d9c:	af00      	add	r7, sp, #0
 8003d9e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	3b01      	subs	r3, #1
 8003da4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003da8:	d301      	bcc.n	8003dae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003daa:	2301      	movs	r3, #1
 8003dac:	e00f      	b.n	8003dce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003dae:	4a0a      	ldr	r2, [pc, #40]	; (8003dd8 <SysTick_Config+0x40>)
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	3b01      	subs	r3, #1
 8003db4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003db6:	210f      	movs	r1, #15
 8003db8:	f04f 30ff 	mov.w	r0, #4294967295
 8003dbc:	f7ff ff8e 	bl	8003cdc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003dc0:	4b05      	ldr	r3, [pc, #20]	; (8003dd8 <SysTick_Config+0x40>)
 8003dc2:	2200      	movs	r2, #0
 8003dc4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003dc6:	4b04      	ldr	r3, [pc, #16]	; (8003dd8 <SysTick_Config+0x40>)
 8003dc8:	2207      	movs	r2, #7
 8003dca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003dcc:	2300      	movs	r3, #0
}
 8003dce:	4618      	mov	r0, r3
 8003dd0:	3708      	adds	r7, #8
 8003dd2:	46bd      	mov	sp, r7
 8003dd4:	bd80      	pop	{r7, pc}
 8003dd6:	bf00      	nop
 8003dd8:	e000e010 	.word	0xe000e010

08003ddc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003ddc:	b580      	push	{r7, lr}
 8003dde:	b082      	sub	sp, #8
 8003de0:	af00      	add	r7, sp, #0
 8003de2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003de4:	6878      	ldr	r0, [r7, #4]
 8003de6:	f7ff ff29 	bl	8003c3c <__NVIC_SetPriorityGrouping>
}
 8003dea:	bf00      	nop
 8003dec:	3708      	adds	r7, #8
 8003dee:	46bd      	mov	sp, r7
 8003df0:	bd80      	pop	{r7, pc}

08003df2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003df2:	b580      	push	{r7, lr}
 8003df4:	b086      	sub	sp, #24
 8003df6:	af00      	add	r7, sp, #0
 8003df8:	4603      	mov	r3, r0
 8003dfa:	60b9      	str	r1, [r7, #8]
 8003dfc:	607a      	str	r2, [r7, #4]
 8003dfe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003e00:	2300      	movs	r3, #0
 8003e02:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003e04:	f7ff ff3e 	bl	8003c84 <__NVIC_GetPriorityGrouping>
 8003e08:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003e0a:	687a      	ldr	r2, [r7, #4]
 8003e0c:	68b9      	ldr	r1, [r7, #8]
 8003e0e:	6978      	ldr	r0, [r7, #20]
 8003e10:	f7ff ff8e 	bl	8003d30 <NVIC_EncodePriority>
 8003e14:	4602      	mov	r2, r0
 8003e16:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003e1a:	4611      	mov	r1, r2
 8003e1c:	4618      	mov	r0, r3
 8003e1e:	f7ff ff5d 	bl	8003cdc <__NVIC_SetPriority>
}
 8003e22:	bf00      	nop
 8003e24:	3718      	adds	r7, #24
 8003e26:	46bd      	mov	sp, r7
 8003e28:	bd80      	pop	{r7, pc}

08003e2a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003e2a:	b580      	push	{r7, lr}
 8003e2c:	b082      	sub	sp, #8
 8003e2e:	af00      	add	r7, sp, #0
 8003e30:	4603      	mov	r3, r0
 8003e32:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003e34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e38:	4618      	mov	r0, r3
 8003e3a:	f7ff ff31 	bl	8003ca0 <__NVIC_EnableIRQ>
}
 8003e3e:	bf00      	nop
 8003e40:	3708      	adds	r7, #8
 8003e42:	46bd      	mov	sp, r7
 8003e44:	bd80      	pop	{r7, pc}

08003e46 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003e46:	b580      	push	{r7, lr}
 8003e48:	b082      	sub	sp, #8
 8003e4a:	af00      	add	r7, sp, #0
 8003e4c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003e4e:	6878      	ldr	r0, [r7, #4]
 8003e50:	f7ff ffa2 	bl	8003d98 <SysTick_Config>
 8003e54:	4603      	mov	r3, r0
}
 8003e56:	4618      	mov	r0, r3
 8003e58:	3708      	adds	r7, #8
 8003e5a:	46bd      	mov	sp, r7
 8003e5c:	bd80      	pop	{r7, pc}
	...

08003e60 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003e60:	b580      	push	{r7, lr}
 8003e62:	b086      	sub	sp, #24
 8003e64:	af00      	add	r7, sp, #0
 8003e66:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003e68:	2300      	movs	r3, #0
 8003e6a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003e6c:	f7ff feb8 	bl	8003be0 <HAL_GetTick>
 8003e70:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d101      	bne.n	8003e7c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003e78:	2301      	movs	r3, #1
 8003e7a:	e099      	b.n	8003fb0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	2200      	movs	r2, #0
 8003e80:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	2202      	movs	r2, #2
 8003e88:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	681a      	ldr	r2, [r3, #0]
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	f022 0201 	bic.w	r2, r2, #1
 8003e9a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003e9c:	e00f      	b.n	8003ebe <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003e9e:	f7ff fe9f 	bl	8003be0 <HAL_GetTick>
 8003ea2:	4602      	mov	r2, r0
 8003ea4:	693b      	ldr	r3, [r7, #16]
 8003ea6:	1ad3      	subs	r3, r2, r3
 8003ea8:	2b05      	cmp	r3, #5
 8003eaa:	d908      	bls.n	8003ebe <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	2220      	movs	r2, #32
 8003eb0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	2203      	movs	r2, #3
 8003eb6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003eba:	2303      	movs	r3, #3
 8003ebc:	e078      	b.n	8003fb0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	f003 0301 	and.w	r3, r3, #1
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d1e8      	bne.n	8003e9e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003ed4:	697a      	ldr	r2, [r7, #20]
 8003ed6:	4b38      	ldr	r3, [pc, #224]	; (8003fb8 <HAL_DMA_Init+0x158>)
 8003ed8:	4013      	ands	r3, r2
 8003eda:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	685a      	ldr	r2, [r3, #4]
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	689b      	ldr	r3, [r3, #8]
 8003ee4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003eea:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	691b      	ldr	r3, [r3, #16]
 8003ef0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003ef6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	699b      	ldr	r3, [r3, #24]
 8003efc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003f02:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	6a1b      	ldr	r3, [r3, #32]
 8003f08:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003f0a:	697a      	ldr	r2, [r7, #20]
 8003f0c:	4313      	orrs	r3, r2
 8003f0e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f14:	2b04      	cmp	r3, #4
 8003f16:	d107      	bne.n	8003f28 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f20:	4313      	orrs	r3, r2
 8003f22:	697a      	ldr	r2, [r7, #20]
 8003f24:	4313      	orrs	r3, r2
 8003f26:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	697a      	ldr	r2, [r7, #20]
 8003f2e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	695b      	ldr	r3, [r3, #20]
 8003f36:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003f38:	697b      	ldr	r3, [r7, #20]
 8003f3a:	f023 0307 	bic.w	r3, r3, #7
 8003f3e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f44:	697a      	ldr	r2, [r7, #20]
 8003f46:	4313      	orrs	r3, r2
 8003f48:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f4e:	2b04      	cmp	r3, #4
 8003f50:	d117      	bne.n	8003f82 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f56:	697a      	ldr	r2, [r7, #20]
 8003f58:	4313      	orrs	r3, r2
 8003f5a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d00e      	beq.n	8003f82 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003f64:	6878      	ldr	r0, [r7, #4]
 8003f66:	f000 fa9d 	bl	80044a4 <DMA_CheckFifoParam>
 8003f6a:	4603      	mov	r3, r0
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d008      	beq.n	8003f82 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	2240      	movs	r2, #64	; 0x40
 8003f74:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	2201      	movs	r2, #1
 8003f7a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003f7e:	2301      	movs	r3, #1
 8003f80:	e016      	b.n	8003fb0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	697a      	ldr	r2, [r7, #20]
 8003f88:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003f8a:	6878      	ldr	r0, [r7, #4]
 8003f8c:	f000 fa54 	bl	8004438 <DMA_CalcBaseAndBitshift>
 8003f90:	4603      	mov	r3, r0
 8003f92:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f98:	223f      	movs	r2, #63	; 0x3f
 8003f9a:	409a      	lsls	r2, r3
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	2200      	movs	r2, #0
 8003fa4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	2201      	movs	r2, #1
 8003faa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003fae:	2300      	movs	r3, #0
}
 8003fb0:	4618      	mov	r0, r3
 8003fb2:	3718      	adds	r7, #24
 8003fb4:	46bd      	mov	sp, r7
 8003fb6:	bd80      	pop	{r7, pc}
 8003fb8:	f010803f 	.word	0xf010803f

08003fbc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003fbc:	b580      	push	{r7, lr}
 8003fbe:	b086      	sub	sp, #24
 8003fc0:	af00      	add	r7, sp, #0
 8003fc2:	60f8      	str	r0, [r7, #12]
 8003fc4:	60b9      	str	r1, [r7, #8]
 8003fc6:	607a      	str	r2, [r7, #4]
 8003fc8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003fca:	2300      	movs	r3, #0
 8003fcc:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fd2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003fda:	2b01      	cmp	r3, #1
 8003fdc:	d101      	bne.n	8003fe2 <HAL_DMA_Start_IT+0x26>
 8003fde:	2302      	movs	r3, #2
 8003fe0:	e040      	b.n	8004064 <HAL_DMA_Start_IT+0xa8>
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	2201      	movs	r2, #1
 8003fe6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003ff0:	b2db      	uxtb	r3, r3
 8003ff2:	2b01      	cmp	r3, #1
 8003ff4:	d12f      	bne.n	8004056 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	2202      	movs	r2, #2
 8003ffa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	2200      	movs	r2, #0
 8004002:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004004:	683b      	ldr	r3, [r7, #0]
 8004006:	687a      	ldr	r2, [r7, #4]
 8004008:	68b9      	ldr	r1, [r7, #8]
 800400a:	68f8      	ldr	r0, [r7, #12]
 800400c:	f000 f9e6 	bl	80043dc <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004014:	223f      	movs	r2, #63	; 0x3f
 8004016:	409a      	lsls	r2, r3
 8004018:	693b      	ldr	r3, [r7, #16]
 800401a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	681a      	ldr	r2, [r3, #0]
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	f042 0216 	orr.w	r2, r2, #22
 800402a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004030:	2b00      	cmp	r3, #0
 8004032:	d007      	beq.n	8004044 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	681a      	ldr	r2, [r3, #0]
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	f042 0208 	orr.w	r2, r2, #8
 8004042:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	681a      	ldr	r2, [r3, #0]
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	f042 0201 	orr.w	r2, r2, #1
 8004052:	601a      	str	r2, [r3, #0]
 8004054:	e005      	b.n	8004062 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	2200      	movs	r2, #0
 800405a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800405e:	2302      	movs	r3, #2
 8004060:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8004062:	7dfb      	ldrb	r3, [r7, #23]
}
 8004064:	4618      	mov	r0, r3
 8004066:	3718      	adds	r7, #24
 8004068:	46bd      	mov	sp, r7
 800406a:	bd80      	pop	{r7, pc}

0800406c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800406c:	b480      	push	{r7}
 800406e:	b083      	sub	sp, #12
 8004070:	af00      	add	r7, sp, #0
 8004072:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800407a:	b2db      	uxtb	r3, r3
 800407c:	2b02      	cmp	r3, #2
 800407e:	d004      	beq.n	800408a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	2280      	movs	r2, #128	; 0x80
 8004084:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8004086:	2301      	movs	r3, #1
 8004088:	e00c      	b.n	80040a4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	2205      	movs	r2, #5
 800408e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	681a      	ldr	r2, [r3, #0]
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	f022 0201 	bic.w	r2, r2, #1
 80040a0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80040a2:	2300      	movs	r3, #0
}
 80040a4:	4618      	mov	r0, r3
 80040a6:	370c      	adds	r7, #12
 80040a8:	46bd      	mov	sp, r7
 80040aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ae:	4770      	bx	lr

080040b0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80040b0:	b580      	push	{r7, lr}
 80040b2:	b086      	sub	sp, #24
 80040b4:	af00      	add	r7, sp, #0
 80040b6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80040b8:	2300      	movs	r3, #0
 80040ba:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80040bc:	4b92      	ldr	r3, [pc, #584]	; (8004308 <HAL_DMA_IRQHandler+0x258>)
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	4a92      	ldr	r2, [pc, #584]	; (800430c <HAL_DMA_IRQHandler+0x25c>)
 80040c2:	fba2 2303 	umull	r2, r3, r2, r3
 80040c6:	0a9b      	lsrs	r3, r3, #10
 80040c8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040ce:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80040d0:	693b      	ldr	r3, [r7, #16]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040da:	2208      	movs	r2, #8
 80040dc:	409a      	lsls	r2, r3
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	4013      	ands	r3, r2
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d01a      	beq.n	800411c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	f003 0304 	and.w	r3, r3, #4
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d013      	beq.n	800411c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	681a      	ldr	r2, [r3, #0]
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	f022 0204 	bic.w	r2, r2, #4
 8004102:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004108:	2208      	movs	r2, #8
 800410a:	409a      	lsls	r2, r3
 800410c:	693b      	ldr	r3, [r7, #16]
 800410e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004114:	f043 0201 	orr.w	r2, r3, #1
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004120:	2201      	movs	r2, #1
 8004122:	409a      	lsls	r2, r3
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	4013      	ands	r3, r2
 8004128:	2b00      	cmp	r3, #0
 800412a:	d012      	beq.n	8004152 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	695b      	ldr	r3, [r3, #20]
 8004132:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004136:	2b00      	cmp	r3, #0
 8004138:	d00b      	beq.n	8004152 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800413e:	2201      	movs	r2, #1
 8004140:	409a      	lsls	r2, r3
 8004142:	693b      	ldr	r3, [r7, #16]
 8004144:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800414a:	f043 0202 	orr.w	r2, r3, #2
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004156:	2204      	movs	r2, #4
 8004158:	409a      	lsls	r2, r3
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	4013      	ands	r3, r2
 800415e:	2b00      	cmp	r3, #0
 8004160:	d012      	beq.n	8004188 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	f003 0302 	and.w	r3, r3, #2
 800416c:	2b00      	cmp	r3, #0
 800416e:	d00b      	beq.n	8004188 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004174:	2204      	movs	r2, #4
 8004176:	409a      	lsls	r2, r3
 8004178:	693b      	ldr	r3, [r7, #16]
 800417a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004180:	f043 0204 	orr.w	r2, r3, #4
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800418c:	2210      	movs	r2, #16
 800418e:	409a      	lsls	r2, r3
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	4013      	ands	r3, r2
 8004194:	2b00      	cmp	r3, #0
 8004196:	d043      	beq.n	8004220 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	f003 0308 	and.w	r3, r3, #8
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d03c      	beq.n	8004220 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041aa:	2210      	movs	r2, #16
 80041ac:	409a      	lsls	r2, r3
 80041ae:	693b      	ldr	r3, [r7, #16]
 80041b0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d018      	beq.n	80041f2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d108      	bne.n	80041e0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d024      	beq.n	8004220 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041da:	6878      	ldr	r0, [r7, #4]
 80041dc:	4798      	blx	r3
 80041de:	e01f      	b.n	8004220 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d01b      	beq.n	8004220 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80041ec:	6878      	ldr	r0, [r7, #4]
 80041ee:	4798      	blx	r3
 80041f0:	e016      	b.n	8004220 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d107      	bne.n	8004210 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	681a      	ldr	r2, [r3, #0]
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	f022 0208 	bic.w	r2, r2, #8
 800420e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004214:	2b00      	cmp	r3, #0
 8004216:	d003      	beq.n	8004220 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800421c:	6878      	ldr	r0, [r7, #4]
 800421e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004224:	2220      	movs	r2, #32
 8004226:	409a      	lsls	r2, r3
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	4013      	ands	r3, r2
 800422c:	2b00      	cmp	r3, #0
 800422e:	f000 808e 	beq.w	800434e <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	f003 0310 	and.w	r3, r3, #16
 800423c:	2b00      	cmp	r3, #0
 800423e:	f000 8086 	beq.w	800434e <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004246:	2220      	movs	r2, #32
 8004248:	409a      	lsls	r2, r3
 800424a:	693b      	ldr	r3, [r7, #16]
 800424c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004254:	b2db      	uxtb	r3, r3
 8004256:	2b05      	cmp	r3, #5
 8004258:	d136      	bne.n	80042c8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	681a      	ldr	r2, [r3, #0]
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	f022 0216 	bic.w	r2, r2, #22
 8004268:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	695a      	ldr	r2, [r3, #20]
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004278:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800427e:	2b00      	cmp	r3, #0
 8004280:	d103      	bne.n	800428a <HAL_DMA_IRQHandler+0x1da>
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004286:	2b00      	cmp	r3, #0
 8004288:	d007      	beq.n	800429a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	681a      	ldr	r2, [r3, #0]
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	f022 0208 	bic.w	r2, r2, #8
 8004298:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800429e:	223f      	movs	r2, #63	; 0x3f
 80042a0:	409a      	lsls	r2, r3
 80042a2:	693b      	ldr	r3, [r7, #16]
 80042a4:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	2200      	movs	r2, #0
 80042aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	2201      	movs	r2, #1
 80042b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d07d      	beq.n	80043ba <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80042c2:	6878      	ldr	r0, [r7, #4]
 80042c4:	4798      	blx	r3
        }
        return;
 80042c6:	e078      	b.n	80043ba <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d01c      	beq.n	8004310 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d108      	bne.n	80042f6 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d030      	beq.n	800434e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042f0:	6878      	ldr	r0, [r7, #4]
 80042f2:	4798      	blx	r3
 80042f4:	e02b      	b.n	800434e <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d027      	beq.n	800434e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004302:	6878      	ldr	r0, [r7, #4]
 8004304:	4798      	blx	r3
 8004306:	e022      	b.n	800434e <HAL_DMA_IRQHandler+0x29e>
 8004308:	20000000 	.word	0x20000000
 800430c:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800431a:	2b00      	cmp	r3, #0
 800431c:	d10f      	bne.n	800433e <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	681a      	ldr	r2, [r3, #0]
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	f022 0210 	bic.w	r2, r2, #16
 800432c:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	2200      	movs	r2, #0
 8004332:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	2201      	movs	r2, #1
 800433a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004342:	2b00      	cmp	r3, #0
 8004344:	d003      	beq.n	800434e <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800434a:	6878      	ldr	r0, [r7, #4]
 800434c:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004352:	2b00      	cmp	r3, #0
 8004354:	d032      	beq.n	80043bc <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800435a:	f003 0301 	and.w	r3, r3, #1
 800435e:	2b00      	cmp	r3, #0
 8004360:	d022      	beq.n	80043a8 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	2205      	movs	r2, #5
 8004366:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	681a      	ldr	r2, [r3, #0]
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	f022 0201 	bic.w	r2, r2, #1
 8004378:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800437a:	68bb      	ldr	r3, [r7, #8]
 800437c:	3301      	adds	r3, #1
 800437e:	60bb      	str	r3, [r7, #8]
 8004380:	697a      	ldr	r2, [r7, #20]
 8004382:	429a      	cmp	r2, r3
 8004384:	d307      	bcc.n	8004396 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	f003 0301 	and.w	r3, r3, #1
 8004390:	2b00      	cmp	r3, #0
 8004392:	d1f2      	bne.n	800437a <HAL_DMA_IRQHandler+0x2ca>
 8004394:	e000      	b.n	8004398 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8004396:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	2200      	movs	r2, #0
 800439c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	2201      	movs	r2, #1
 80043a4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d005      	beq.n	80043bc <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80043b4:	6878      	ldr	r0, [r7, #4]
 80043b6:	4798      	blx	r3
 80043b8:	e000      	b.n	80043bc <HAL_DMA_IRQHandler+0x30c>
        return;
 80043ba:	bf00      	nop
    }
  }
}
 80043bc:	3718      	adds	r7, #24
 80043be:	46bd      	mov	sp, r7
 80043c0:	bd80      	pop	{r7, pc}
 80043c2:	bf00      	nop

080043c4 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 80043c4:	b480      	push	{r7}
 80043c6:	b083      	sub	sp, #12
 80043c8:	af00      	add	r7, sp, #0
 80043ca:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 80043d0:	4618      	mov	r0, r3
 80043d2:	370c      	adds	r7, #12
 80043d4:	46bd      	mov	sp, r7
 80043d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043da:	4770      	bx	lr

080043dc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80043dc:	b480      	push	{r7}
 80043de:	b085      	sub	sp, #20
 80043e0:	af00      	add	r7, sp, #0
 80043e2:	60f8      	str	r0, [r7, #12]
 80043e4:	60b9      	str	r1, [r7, #8]
 80043e6:	607a      	str	r2, [r7, #4]
 80043e8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	681a      	ldr	r2, [r3, #0]
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80043f8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	683a      	ldr	r2, [r7, #0]
 8004400:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	689b      	ldr	r3, [r3, #8]
 8004406:	2b40      	cmp	r3, #64	; 0x40
 8004408:	d108      	bne.n	800441c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	687a      	ldr	r2, [r7, #4]
 8004410:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	68ba      	ldr	r2, [r7, #8]
 8004418:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800441a:	e007      	b.n	800442c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	68ba      	ldr	r2, [r7, #8]
 8004422:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	687a      	ldr	r2, [r7, #4]
 800442a:	60da      	str	r2, [r3, #12]
}
 800442c:	bf00      	nop
 800442e:	3714      	adds	r7, #20
 8004430:	46bd      	mov	sp, r7
 8004432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004436:	4770      	bx	lr

08004438 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004438:	b480      	push	{r7}
 800443a:	b085      	sub	sp, #20
 800443c:	af00      	add	r7, sp, #0
 800443e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	b2db      	uxtb	r3, r3
 8004446:	3b10      	subs	r3, #16
 8004448:	4a14      	ldr	r2, [pc, #80]	; (800449c <DMA_CalcBaseAndBitshift+0x64>)
 800444a:	fba2 2303 	umull	r2, r3, r2, r3
 800444e:	091b      	lsrs	r3, r3, #4
 8004450:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004452:	4a13      	ldr	r2, [pc, #76]	; (80044a0 <DMA_CalcBaseAndBitshift+0x68>)
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	4413      	add	r3, r2
 8004458:	781b      	ldrb	r3, [r3, #0]
 800445a:	461a      	mov	r2, r3
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	2b03      	cmp	r3, #3
 8004464:	d909      	bls.n	800447a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800446e:	f023 0303 	bic.w	r3, r3, #3
 8004472:	1d1a      	adds	r2, r3, #4
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	659a      	str	r2, [r3, #88]	; 0x58
 8004478:	e007      	b.n	800448a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004482:	f023 0303 	bic.w	r3, r3, #3
 8004486:	687a      	ldr	r2, [r7, #4]
 8004488:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800448e:	4618      	mov	r0, r3
 8004490:	3714      	adds	r7, #20
 8004492:	46bd      	mov	sp, r7
 8004494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004498:	4770      	bx	lr
 800449a:	bf00      	nop
 800449c:	aaaaaaab 	.word	0xaaaaaaab
 80044a0:	080126d4 	.word	0x080126d4

080044a4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80044a4:	b480      	push	{r7}
 80044a6:	b085      	sub	sp, #20
 80044a8:	af00      	add	r7, sp, #0
 80044aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80044ac:	2300      	movs	r3, #0
 80044ae:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044b4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	699b      	ldr	r3, [r3, #24]
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d11f      	bne.n	80044fe <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80044be:	68bb      	ldr	r3, [r7, #8]
 80044c0:	2b03      	cmp	r3, #3
 80044c2:	d855      	bhi.n	8004570 <DMA_CheckFifoParam+0xcc>
 80044c4:	a201      	add	r2, pc, #4	; (adr r2, 80044cc <DMA_CheckFifoParam+0x28>)
 80044c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044ca:	bf00      	nop
 80044cc:	080044dd 	.word	0x080044dd
 80044d0:	080044ef 	.word	0x080044ef
 80044d4:	080044dd 	.word	0x080044dd
 80044d8:	08004571 	.word	0x08004571
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044e0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d045      	beq.n	8004574 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 80044e8:	2301      	movs	r3, #1
 80044ea:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80044ec:	e042      	b.n	8004574 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044f2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80044f6:	d13f      	bne.n	8004578 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 80044f8:	2301      	movs	r3, #1
 80044fa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80044fc:	e03c      	b.n	8004578 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	699b      	ldr	r3, [r3, #24]
 8004502:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004506:	d121      	bne.n	800454c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004508:	68bb      	ldr	r3, [r7, #8]
 800450a:	2b03      	cmp	r3, #3
 800450c:	d836      	bhi.n	800457c <DMA_CheckFifoParam+0xd8>
 800450e:	a201      	add	r2, pc, #4	; (adr r2, 8004514 <DMA_CheckFifoParam+0x70>)
 8004510:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004514:	08004525 	.word	0x08004525
 8004518:	0800452b 	.word	0x0800452b
 800451c:	08004525 	.word	0x08004525
 8004520:	0800453d 	.word	0x0800453d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004524:	2301      	movs	r3, #1
 8004526:	73fb      	strb	r3, [r7, #15]
      break;
 8004528:	e02f      	b.n	800458a <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800452e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004532:	2b00      	cmp	r3, #0
 8004534:	d024      	beq.n	8004580 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8004536:	2301      	movs	r3, #1
 8004538:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800453a:	e021      	b.n	8004580 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004540:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004544:	d11e      	bne.n	8004584 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8004546:	2301      	movs	r3, #1
 8004548:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800454a:	e01b      	b.n	8004584 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800454c:	68bb      	ldr	r3, [r7, #8]
 800454e:	2b02      	cmp	r3, #2
 8004550:	d902      	bls.n	8004558 <DMA_CheckFifoParam+0xb4>
 8004552:	2b03      	cmp	r3, #3
 8004554:	d003      	beq.n	800455e <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004556:	e018      	b.n	800458a <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8004558:	2301      	movs	r3, #1
 800455a:	73fb      	strb	r3, [r7, #15]
      break;
 800455c:	e015      	b.n	800458a <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004562:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004566:	2b00      	cmp	r3, #0
 8004568:	d00e      	beq.n	8004588 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 800456a:	2301      	movs	r3, #1
 800456c:	73fb      	strb	r3, [r7, #15]
      break;
 800456e:	e00b      	b.n	8004588 <DMA_CheckFifoParam+0xe4>
      break;
 8004570:	bf00      	nop
 8004572:	e00a      	b.n	800458a <DMA_CheckFifoParam+0xe6>
      break;
 8004574:	bf00      	nop
 8004576:	e008      	b.n	800458a <DMA_CheckFifoParam+0xe6>
      break;
 8004578:	bf00      	nop
 800457a:	e006      	b.n	800458a <DMA_CheckFifoParam+0xe6>
      break;
 800457c:	bf00      	nop
 800457e:	e004      	b.n	800458a <DMA_CheckFifoParam+0xe6>
      break;
 8004580:	bf00      	nop
 8004582:	e002      	b.n	800458a <DMA_CheckFifoParam+0xe6>
      break;   
 8004584:	bf00      	nop
 8004586:	e000      	b.n	800458a <DMA_CheckFifoParam+0xe6>
      break;
 8004588:	bf00      	nop
    }
  } 
  
  return status; 
 800458a:	7bfb      	ldrb	r3, [r7, #15]
}
 800458c:	4618      	mov	r0, r3
 800458e:	3714      	adds	r7, #20
 8004590:	46bd      	mov	sp, r7
 8004592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004596:	4770      	bx	lr

08004598 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004598:	b480      	push	{r7}
 800459a:	b089      	sub	sp, #36	; 0x24
 800459c:	af00      	add	r7, sp, #0
 800459e:	6078      	str	r0, [r7, #4]
 80045a0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80045a2:	2300      	movs	r3, #0
 80045a4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80045a6:	2300      	movs	r3, #0
 80045a8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80045aa:	2300      	movs	r3, #0
 80045ac:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80045ae:	2300      	movs	r3, #0
 80045b0:	61fb      	str	r3, [r7, #28]
 80045b2:	e16b      	b.n	800488c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80045b4:	2201      	movs	r2, #1
 80045b6:	69fb      	ldr	r3, [r7, #28]
 80045b8:	fa02 f303 	lsl.w	r3, r2, r3
 80045bc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80045be:	683b      	ldr	r3, [r7, #0]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	697a      	ldr	r2, [r7, #20]
 80045c4:	4013      	ands	r3, r2
 80045c6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80045c8:	693a      	ldr	r2, [r7, #16]
 80045ca:	697b      	ldr	r3, [r7, #20]
 80045cc:	429a      	cmp	r2, r3
 80045ce:	f040 815a 	bne.w	8004886 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80045d2:	683b      	ldr	r3, [r7, #0]
 80045d4:	685b      	ldr	r3, [r3, #4]
 80045d6:	2b01      	cmp	r3, #1
 80045d8:	d00b      	beq.n	80045f2 <HAL_GPIO_Init+0x5a>
 80045da:	683b      	ldr	r3, [r7, #0]
 80045dc:	685b      	ldr	r3, [r3, #4]
 80045de:	2b02      	cmp	r3, #2
 80045e0:	d007      	beq.n	80045f2 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80045e2:	683b      	ldr	r3, [r7, #0]
 80045e4:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80045e6:	2b11      	cmp	r3, #17
 80045e8:	d003      	beq.n	80045f2 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80045ea:	683b      	ldr	r3, [r7, #0]
 80045ec:	685b      	ldr	r3, [r3, #4]
 80045ee:	2b12      	cmp	r3, #18
 80045f0:	d130      	bne.n	8004654 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	689b      	ldr	r3, [r3, #8]
 80045f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80045f8:	69fb      	ldr	r3, [r7, #28]
 80045fa:	005b      	lsls	r3, r3, #1
 80045fc:	2203      	movs	r2, #3
 80045fe:	fa02 f303 	lsl.w	r3, r2, r3
 8004602:	43db      	mvns	r3, r3
 8004604:	69ba      	ldr	r2, [r7, #24]
 8004606:	4013      	ands	r3, r2
 8004608:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800460a:	683b      	ldr	r3, [r7, #0]
 800460c:	68da      	ldr	r2, [r3, #12]
 800460e:	69fb      	ldr	r3, [r7, #28]
 8004610:	005b      	lsls	r3, r3, #1
 8004612:	fa02 f303 	lsl.w	r3, r2, r3
 8004616:	69ba      	ldr	r2, [r7, #24]
 8004618:	4313      	orrs	r3, r2
 800461a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	69ba      	ldr	r2, [r7, #24]
 8004620:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	685b      	ldr	r3, [r3, #4]
 8004626:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004628:	2201      	movs	r2, #1
 800462a:	69fb      	ldr	r3, [r7, #28]
 800462c:	fa02 f303 	lsl.w	r3, r2, r3
 8004630:	43db      	mvns	r3, r3
 8004632:	69ba      	ldr	r2, [r7, #24]
 8004634:	4013      	ands	r3, r2
 8004636:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8004638:	683b      	ldr	r3, [r7, #0]
 800463a:	685b      	ldr	r3, [r3, #4]
 800463c:	091b      	lsrs	r3, r3, #4
 800463e:	f003 0201 	and.w	r2, r3, #1
 8004642:	69fb      	ldr	r3, [r7, #28]
 8004644:	fa02 f303 	lsl.w	r3, r2, r3
 8004648:	69ba      	ldr	r2, [r7, #24]
 800464a:	4313      	orrs	r3, r2
 800464c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	69ba      	ldr	r2, [r7, #24]
 8004652:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	68db      	ldr	r3, [r3, #12]
 8004658:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800465a:	69fb      	ldr	r3, [r7, #28]
 800465c:	005b      	lsls	r3, r3, #1
 800465e:	2203      	movs	r2, #3
 8004660:	fa02 f303 	lsl.w	r3, r2, r3
 8004664:	43db      	mvns	r3, r3
 8004666:	69ba      	ldr	r2, [r7, #24]
 8004668:	4013      	ands	r3, r2
 800466a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800466c:	683b      	ldr	r3, [r7, #0]
 800466e:	689a      	ldr	r2, [r3, #8]
 8004670:	69fb      	ldr	r3, [r7, #28]
 8004672:	005b      	lsls	r3, r3, #1
 8004674:	fa02 f303 	lsl.w	r3, r2, r3
 8004678:	69ba      	ldr	r2, [r7, #24]
 800467a:	4313      	orrs	r3, r2
 800467c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	69ba      	ldr	r2, [r7, #24]
 8004682:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004684:	683b      	ldr	r3, [r7, #0]
 8004686:	685b      	ldr	r3, [r3, #4]
 8004688:	2b02      	cmp	r3, #2
 800468a:	d003      	beq.n	8004694 <HAL_GPIO_Init+0xfc>
 800468c:	683b      	ldr	r3, [r7, #0]
 800468e:	685b      	ldr	r3, [r3, #4]
 8004690:	2b12      	cmp	r3, #18
 8004692:	d123      	bne.n	80046dc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004694:	69fb      	ldr	r3, [r7, #28]
 8004696:	08da      	lsrs	r2, r3, #3
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	3208      	adds	r2, #8
 800469c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80046a0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80046a2:	69fb      	ldr	r3, [r7, #28]
 80046a4:	f003 0307 	and.w	r3, r3, #7
 80046a8:	009b      	lsls	r3, r3, #2
 80046aa:	220f      	movs	r2, #15
 80046ac:	fa02 f303 	lsl.w	r3, r2, r3
 80046b0:	43db      	mvns	r3, r3
 80046b2:	69ba      	ldr	r2, [r7, #24]
 80046b4:	4013      	ands	r3, r2
 80046b6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80046b8:	683b      	ldr	r3, [r7, #0]
 80046ba:	691a      	ldr	r2, [r3, #16]
 80046bc:	69fb      	ldr	r3, [r7, #28]
 80046be:	f003 0307 	and.w	r3, r3, #7
 80046c2:	009b      	lsls	r3, r3, #2
 80046c4:	fa02 f303 	lsl.w	r3, r2, r3
 80046c8:	69ba      	ldr	r2, [r7, #24]
 80046ca:	4313      	orrs	r3, r2
 80046cc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80046ce:	69fb      	ldr	r3, [r7, #28]
 80046d0:	08da      	lsrs	r2, r3, #3
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	3208      	adds	r2, #8
 80046d6:	69b9      	ldr	r1, [r7, #24]
 80046d8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80046e2:	69fb      	ldr	r3, [r7, #28]
 80046e4:	005b      	lsls	r3, r3, #1
 80046e6:	2203      	movs	r2, #3
 80046e8:	fa02 f303 	lsl.w	r3, r2, r3
 80046ec:	43db      	mvns	r3, r3
 80046ee:	69ba      	ldr	r2, [r7, #24]
 80046f0:	4013      	ands	r3, r2
 80046f2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80046f4:	683b      	ldr	r3, [r7, #0]
 80046f6:	685b      	ldr	r3, [r3, #4]
 80046f8:	f003 0203 	and.w	r2, r3, #3
 80046fc:	69fb      	ldr	r3, [r7, #28]
 80046fe:	005b      	lsls	r3, r3, #1
 8004700:	fa02 f303 	lsl.w	r3, r2, r3
 8004704:	69ba      	ldr	r2, [r7, #24]
 8004706:	4313      	orrs	r3, r2
 8004708:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	69ba      	ldr	r2, [r7, #24]
 800470e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004710:	683b      	ldr	r3, [r7, #0]
 8004712:	685b      	ldr	r3, [r3, #4]
 8004714:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004718:	2b00      	cmp	r3, #0
 800471a:	f000 80b4 	beq.w	8004886 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800471e:	2300      	movs	r3, #0
 8004720:	60fb      	str	r3, [r7, #12]
 8004722:	4b5f      	ldr	r3, [pc, #380]	; (80048a0 <HAL_GPIO_Init+0x308>)
 8004724:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004726:	4a5e      	ldr	r2, [pc, #376]	; (80048a0 <HAL_GPIO_Init+0x308>)
 8004728:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800472c:	6453      	str	r3, [r2, #68]	; 0x44
 800472e:	4b5c      	ldr	r3, [pc, #368]	; (80048a0 <HAL_GPIO_Init+0x308>)
 8004730:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004732:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004736:	60fb      	str	r3, [r7, #12]
 8004738:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800473a:	4a5a      	ldr	r2, [pc, #360]	; (80048a4 <HAL_GPIO_Init+0x30c>)
 800473c:	69fb      	ldr	r3, [r7, #28]
 800473e:	089b      	lsrs	r3, r3, #2
 8004740:	3302      	adds	r3, #2
 8004742:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004746:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004748:	69fb      	ldr	r3, [r7, #28]
 800474a:	f003 0303 	and.w	r3, r3, #3
 800474e:	009b      	lsls	r3, r3, #2
 8004750:	220f      	movs	r2, #15
 8004752:	fa02 f303 	lsl.w	r3, r2, r3
 8004756:	43db      	mvns	r3, r3
 8004758:	69ba      	ldr	r2, [r7, #24]
 800475a:	4013      	ands	r3, r2
 800475c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	4a51      	ldr	r2, [pc, #324]	; (80048a8 <HAL_GPIO_Init+0x310>)
 8004762:	4293      	cmp	r3, r2
 8004764:	d02b      	beq.n	80047be <HAL_GPIO_Init+0x226>
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	4a50      	ldr	r2, [pc, #320]	; (80048ac <HAL_GPIO_Init+0x314>)
 800476a:	4293      	cmp	r3, r2
 800476c:	d025      	beq.n	80047ba <HAL_GPIO_Init+0x222>
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	4a4f      	ldr	r2, [pc, #316]	; (80048b0 <HAL_GPIO_Init+0x318>)
 8004772:	4293      	cmp	r3, r2
 8004774:	d01f      	beq.n	80047b6 <HAL_GPIO_Init+0x21e>
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	4a4e      	ldr	r2, [pc, #312]	; (80048b4 <HAL_GPIO_Init+0x31c>)
 800477a:	4293      	cmp	r3, r2
 800477c:	d019      	beq.n	80047b2 <HAL_GPIO_Init+0x21a>
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	4a4d      	ldr	r2, [pc, #308]	; (80048b8 <HAL_GPIO_Init+0x320>)
 8004782:	4293      	cmp	r3, r2
 8004784:	d013      	beq.n	80047ae <HAL_GPIO_Init+0x216>
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	4a4c      	ldr	r2, [pc, #304]	; (80048bc <HAL_GPIO_Init+0x324>)
 800478a:	4293      	cmp	r3, r2
 800478c:	d00d      	beq.n	80047aa <HAL_GPIO_Init+0x212>
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	4a4b      	ldr	r2, [pc, #300]	; (80048c0 <HAL_GPIO_Init+0x328>)
 8004792:	4293      	cmp	r3, r2
 8004794:	d007      	beq.n	80047a6 <HAL_GPIO_Init+0x20e>
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	4a4a      	ldr	r2, [pc, #296]	; (80048c4 <HAL_GPIO_Init+0x32c>)
 800479a:	4293      	cmp	r3, r2
 800479c:	d101      	bne.n	80047a2 <HAL_GPIO_Init+0x20a>
 800479e:	2307      	movs	r3, #7
 80047a0:	e00e      	b.n	80047c0 <HAL_GPIO_Init+0x228>
 80047a2:	2308      	movs	r3, #8
 80047a4:	e00c      	b.n	80047c0 <HAL_GPIO_Init+0x228>
 80047a6:	2306      	movs	r3, #6
 80047a8:	e00a      	b.n	80047c0 <HAL_GPIO_Init+0x228>
 80047aa:	2305      	movs	r3, #5
 80047ac:	e008      	b.n	80047c0 <HAL_GPIO_Init+0x228>
 80047ae:	2304      	movs	r3, #4
 80047b0:	e006      	b.n	80047c0 <HAL_GPIO_Init+0x228>
 80047b2:	2303      	movs	r3, #3
 80047b4:	e004      	b.n	80047c0 <HAL_GPIO_Init+0x228>
 80047b6:	2302      	movs	r3, #2
 80047b8:	e002      	b.n	80047c0 <HAL_GPIO_Init+0x228>
 80047ba:	2301      	movs	r3, #1
 80047bc:	e000      	b.n	80047c0 <HAL_GPIO_Init+0x228>
 80047be:	2300      	movs	r3, #0
 80047c0:	69fa      	ldr	r2, [r7, #28]
 80047c2:	f002 0203 	and.w	r2, r2, #3
 80047c6:	0092      	lsls	r2, r2, #2
 80047c8:	4093      	lsls	r3, r2
 80047ca:	69ba      	ldr	r2, [r7, #24]
 80047cc:	4313      	orrs	r3, r2
 80047ce:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80047d0:	4934      	ldr	r1, [pc, #208]	; (80048a4 <HAL_GPIO_Init+0x30c>)
 80047d2:	69fb      	ldr	r3, [r7, #28]
 80047d4:	089b      	lsrs	r3, r3, #2
 80047d6:	3302      	adds	r3, #2
 80047d8:	69ba      	ldr	r2, [r7, #24]
 80047da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80047de:	4b3a      	ldr	r3, [pc, #232]	; (80048c8 <HAL_GPIO_Init+0x330>)
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80047e4:	693b      	ldr	r3, [r7, #16]
 80047e6:	43db      	mvns	r3, r3
 80047e8:	69ba      	ldr	r2, [r7, #24]
 80047ea:	4013      	ands	r3, r2
 80047ec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80047ee:	683b      	ldr	r3, [r7, #0]
 80047f0:	685b      	ldr	r3, [r3, #4]
 80047f2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d003      	beq.n	8004802 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80047fa:	69ba      	ldr	r2, [r7, #24]
 80047fc:	693b      	ldr	r3, [r7, #16]
 80047fe:	4313      	orrs	r3, r2
 8004800:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004802:	4a31      	ldr	r2, [pc, #196]	; (80048c8 <HAL_GPIO_Init+0x330>)
 8004804:	69bb      	ldr	r3, [r7, #24]
 8004806:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8004808:	4b2f      	ldr	r3, [pc, #188]	; (80048c8 <HAL_GPIO_Init+0x330>)
 800480a:	685b      	ldr	r3, [r3, #4]
 800480c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800480e:	693b      	ldr	r3, [r7, #16]
 8004810:	43db      	mvns	r3, r3
 8004812:	69ba      	ldr	r2, [r7, #24]
 8004814:	4013      	ands	r3, r2
 8004816:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004818:	683b      	ldr	r3, [r7, #0]
 800481a:	685b      	ldr	r3, [r3, #4]
 800481c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004820:	2b00      	cmp	r3, #0
 8004822:	d003      	beq.n	800482c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8004824:	69ba      	ldr	r2, [r7, #24]
 8004826:	693b      	ldr	r3, [r7, #16]
 8004828:	4313      	orrs	r3, r2
 800482a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800482c:	4a26      	ldr	r2, [pc, #152]	; (80048c8 <HAL_GPIO_Init+0x330>)
 800482e:	69bb      	ldr	r3, [r7, #24]
 8004830:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004832:	4b25      	ldr	r3, [pc, #148]	; (80048c8 <HAL_GPIO_Init+0x330>)
 8004834:	689b      	ldr	r3, [r3, #8]
 8004836:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004838:	693b      	ldr	r3, [r7, #16]
 800483a:	43db      	mvns	r3, r3
 800483c:	69ba      	ldr	r2, [r7, #24]
 800483e:	4013      	ands	r3, r2
 8004840:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004842:	683b      	ldr	r3, [r7, #0]
 8004844:	685b      	ldr	r3, [r3, #4]
 8004846:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800484a:	2b00      	cmp	r3, #0
 800484c:	d003      	beq.n	8004856 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800484e:	69ba      	ldr	r2, [r7, #24]
 8004850:	693b      	ldr	r3, [r7, #16]
 8004852:	4313      	orrs	r3, r2
 8004854:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004856:	4a1c      	ldr	r2, [pc, #112]	; (80048c8 <HAL_GPIO_Init+0x330>)
 8004858:	69bb      	ldr	r3, [r7, #24]
 800485a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800485c:	4b1a      	ldr	r3, [pc, #104]	; (80048c8 <HAL_GPIO_Init+0x330>)
 800485e:	68db      	ldr	r3, [r3, #12]
 8004860:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004862:	693b      	ldr	r3, [r7, #16]
 8004864:	43db      	mvns	r3, r3
 8004866:	69ba      	ldr	r2, [r7, #24]
 8004868:	4013      	ands	r3, r2
 800486a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800486c:	683b      	ldr	r3, [r7, #0]
 800486e:	685b      	ldr	r3, [r3, #4]
 8004870:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004874:	2b00      	cmp	r3, #0
 8004876:	d003      	beq.n	8004880 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8004878:	69ba      	ldr	r2, [r7, #24]
 800487a:	693b      	ldr	r3, [r7, #16]
 800487c:	4313      	orrs	r3, r2
 800487e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004880:	4a11      	ldr	r2, [pc, #68]	; (80048c8 <HAL_GPIO_Init+0x330>)
 8004882:	69bb      	ldr	r3, [r7, #24]
 8004884:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004886:	69fb      	ldr	r3, [r7, #28]
 8004888:	3301      	adds	r3, #1
 800488a:	61fb      	str	r3, [r7, #28]
 800488c:	69fb      	ldr	r3, [r7, #28]
 800488e:	2b0f      	cmp	r3, #15
 8004890:	f67f ae90 	bls.w	80045b4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004894:	bf00      	nop
 8004896:	3724      	adds	r7, #36	; 0x24
 8004898:	46bd      	mov	sp, r7
 800489a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800489e:	4770      	bx	lr
 80048a0:	40023800 	.word	0x40023800
 80048a4:	40013800 	.word	0x40013800
 80048a8:	40020000 	.word	0x40020000
 80048ac:	40020400 	.word	0x40020400
 80048b0:	40020800 	.word	0x40020800
 80048b4:	40020c00 	.word	0x40020c00
 80048b8:	40021000 	.word	0x40021000
 80048bc:	40021400 	.word	0x40021400
 80048c0:	40021800 	.word	0x40021800
 80048c4:	40021c00 	.word	0x40021c00
 80048c8:	40013c00 	.word	0x40013c00

080048cc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80048cc:	b480      	push	{r7}
 80048ce:	b085      	sub	sp, #20
 80048d0:	af00      	add	r7, sp, #0
 80048d2:	6078      	str	r0, [r7, #4]
 80048d4:	460b      	mov	r3, r1
 80048d6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	691a      	ldr	r2, [r3, #16]
 80048dc:	887b      	ldrh	r3, [r7, #2]
 80048de:	4013      	ands	r3, r2
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d002      	beq.n	80048ea <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80048e4:	2301      	movs	r3, #1
 80048e6:	73fb      	strb	r3, [r7, #15]
 80048e8:	e001      	b.n	80048ee <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80048ea:	2300      	movs	r3, #0
 80048ec:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80048ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80048f0:	4618      	mov	r0, r3
 80048f2:	3714      	adds	r7, #20
 80048f4:	46bd      	mov	sp, r7
 80048f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048fa:	4770      	bx	lr

080048fc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80048fc:	b480      	push	{r7}
 80048fe:	b083      	sub	sp, #12
 8004900:	af00      	add	r7, sp, #0
 8004902:	6078      	str	r0, [r7, #4]
 8004904:	460b      	mov	r3, r1
 8004906:	807b      	strh	r3, [r7, #2]
 8004908:	4613      	mov	r3, r2
 800490a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800490c:	787b      	ldrb	r3, [r7, #1]
 800490e:	2b00      	cmp	r3, #0
 8004910:	d003      	beq.n	800491a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004912:	887a      	ldrh	r2, [r7, #2]
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004918:	e003      	b.n	8004922 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800491a:	887b      	ldrh	r3, [r7, #2]
 800491c:	041a      	lsls	r2, r3, #16
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	619a      	str	r2, [r3, #24]
}
 8004922:	bf00      	nop
 8004924:	370c      	adds	r7, #12
 8004926:	46bd      	mov	sp, r7
 8004928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800492c:	4770      	bx	lr
	...

08004930 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004930:	b580      	push	{r7, lr}
 8004932:	b082      	sub	sp, #8
 8004934:	af00      	add	r7, sp, #0
 8004936:	4603      	mov	r3, r0
 8004938:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800493a:	4b08      	ldr	r3, [pc, #32]	; (800495c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800493c:	695a      	ldr	r2, [r3, #20]
 800493e:	88fb      	ldrh	r3, [r7, #6]
 8004940:	4013      	ands	r3, r2
 8004942:	2b00      	cmp	r3, #0
 8004944:	d006      	beq.n	8004954 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004946:	4a05      	ldr	r2, [pc, #20]	; (800495c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004948:	88fb      	ldrh	r3, [r7, #6]
 800494a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800494c:	88fb      	ldrh	r3, [r7, #6]
 800494e:	4618      	mov	r0, r3
 8004950:	f000 f806 	bl	8004960 <HAL_GPIO_EXTI_Callback>
  }
}
 8004954:	bf00      	nop
 8004956:	3708      	adds	r7, #8
 8004958:	46bd      	mov	sp, r7
 800495a:	bd80      	pop	{r7, pc}
 800495c:	40013c00 	.word	0x40013c00

08004960 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8004960:	b480      	push	{r7}
 8004962:	b083      	sub	sp, #12
 8004964:	af00      	add	r7, sp, #0
 8004966:	4603      	mov	r3, r0
 8004968:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800496a:	bf00      	nop
 800496c:	370c      	adds	r7, #12
 800496e:	46bd      	mov	sp, r7
 8004970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004974:	4770      	bx	lr
	...

08004978 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004978:	b580      	push	{r7, lr}
 800497a:	b084      	sub	sp, #16
 800497c:	af00      	add	r7, sp, #0
 800497e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	2b00      	cmp	r3, #0
 8004984:	d101      	bne.n	800498a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004986:	2301      	movs	r3, #1
 8004988:	e11f      	b.n	8004bca <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004990:	b2db      	uxtb	r3, r3
 8004992:	2b00      	cmp	r3, #0
 8004994:	d106      	bne.n	80049a4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	2200      	movs	r2, #0
 800499a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800499e:	6878      	ldr	r0, [r7, #4]
 80049a0:	f7fe fcc8 	bl	8003334 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	2224      	movs	r2, #36	; 0x24
 80049a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	681a      	ldr	r2, [r3, #0]
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	f022 0201 	bic.w	r2, r2, #1
 80049ba:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	681a      	ldr	r2, [r3, #0]
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80049ca:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	681a      	ldr	r2, [r3, #0]
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80049da:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80049dc:	f001 fea2 	bl	8006724 <HAL_RCC_GetPCLK1Freq>
 80049e0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	685b      	ldr	r3, [r3, #4]
 80049e6:	4a7b      	ldr	r2, [pc, #492]	; (8004bd4 <HAL_I2C_Init+0x25c>)
 80049e8:	4293      	cmp	r3, r2
 80049ea:	d807      	bhi.n	80049fc <HAL_I2C_Init+0x84>
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	4a7a      	ldr	r2, [pc, #488]	; (8004bd8 <HAL_I2C_Init+0x260>)
 80049f0:	4293      	cmp	r3, r2
 80049f2:	bf94      	ite	ls
 80049f4:	2301      	movls	r3, #1
 80049f6:	2300      	movhi	r3, #0
 80049f8:	b2db      	uxtb	r3, r3
 80049fa:	e006      	b.n	8004a0a <HAL_I2C_Init+0x92>
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	4a77      	ldr	r2, [pc, #476]	; (8004bdc <HAL_I2C_Init+0x264>)
 8004a00:	4293      	cmp	r3, r2
 8004a02:	bf94      	ite	ls
 8004a04:	2301      	movls	r3, #1
 8004a06:	2300      	movhi	r3, #0
 8004a08:	b2db      	uxtb	r3, r3
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d001      	beq.n	8004a12 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004a0e:	2301      	movs	r3, #1
 8004a10:	e0db      	b.n	8004bca <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	4a72      	ldr	r2, [pc, #456]	; (8004be0 <HAL_I2C_Init+0x268>)
 8004a16:	fba2 2303 	umull	r2, r3, r2, r3
 8004a1a:	0c9b      	lsrs	r3, r3, #18
 8004a1c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	685b      	ldr	r3, [r3, #4]
 8004a24:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	68ba      	ldr	r2, [r7, #8]
 8004a2e:	430a      	orrs	r2, r1
 8004a30:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	6a1b      	ldr	r3, [r3, #32]
 8004a38:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	685b      	ldr	r3, [r3, #4]
 8004a40:	4a64      	ldr	r2, [pc, #400]	; (8004bd4 <HAL_I2C_Init+0x25c>)
 8004a42:	4293      	cmp	r3, r2
 8004a44:	d802      	bhi.n	8004a4c <HAL_I2C_Init+0xd4>
 8004a46:	68bb      	ldr	r3, [r7, #8]
 8004a48:	3301      	adds	r3, #1
 8004a4a:	e009      	b.n	8004a60 <HAL_I2C_Init+0xe8>
 8004a4c:	68bb      	ldr	r3, [r7, #8]
 8004a4e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004a52:	fb02 f303 	mul.w	r3, r2, r3
 8004a56:	4a63      	ldr	r2, [pc, #396]	; (8004be4 <HAL_I2C_Init+0x26c>)
 8004a58:	fba2 2303 	umull	r2, r3, r2, r3
 8004a5c:	099b      	lsrs	r3, r3, #6
 8004a5e:	3301      	adds	r3, #1
 8004a60:	687a      	ldr	r2, [r7, #4]
 8004a62:	6812      	ldr	r2, [r2, #0]
 8004a64:	430b      	orrs	r3, r1
 8004a66:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	69db      	ldr	r3, [r3, #28]
 8004a6e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004a72:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	685b      	ldr	r3, [r3, #4]
 8004a7a:	4956      	ldr	r1, [pc, #344]	; (8004bd4 <HAL_I2C_Init+0x25c>)
 8004a7c:	428b      	cmp	r3, r1
 8004a7e:	d80d      	bhi.n	8004a9c <HAL_I2C_Init+0x124>
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	1e59      	subs	r1, r3, #1
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	685b      	ldr	r3, [r3, #4]
 8004a88:	005b      	lsls	r3, r3, #1
 8004a8a:	fbb1 f3f3 	udiv	r3, r1, r3
 8004a8e:	3301      	adds	r3, #1
 8004a90:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004a94:	2b04      	cmp	r3, #4
 8004a96:	bf38      	it	cc
 8004a98:	2304      	movcc	r3, #4
 8004a9a:	e04f      	b.n	8004b3c <HAL_I2C_Init+0x1c4>
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	689b      	ldr	r3, [r3, #8]
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d111      	bne.n	8004ac8 <HAL_I2C_Init+0x150>
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	1e58      	subs	r0, r3, #1
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	6859      	ldr	r1, [r3, #4]
 8004aac:	460b      	mov	r3, r1
 8004aae:	005b      	lsls	r3, r3, #1
 8004ab0:	440b      	add	r3, r1
 8004ab2:	fbb0 f3f3 	udiv	r3, r0, r3
 8004ab6:	3301      	adds	r3, #1
 8004ab8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	bf0c      	ite	eq
 8004ac0:	2301      	moveq	r3, #1
 8004ac2:	2300      	movne	r3, #0
 8004ac4:	b2db      	uxtb	r3, r3
 8004ac6:	e012      	b.n	8004aee <HAL_I2C_Init+0x176>
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	1e58      	subs	r0, r3, #1
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	6859      	ldr	r1, [r3, #4]
 8004ad0:	460b      	mov	r3, r1
 8004ad2:	009b      	lsls	r3, r3, #2
 8004ad4:	440b      	add	r3, r1
 8004ad6:	0099      	lsls	r1, r3, #2
 8004ad8:	440b      	add	r3, r1
 8004ada:	fbb0 f3f3 	udiv	r3, r0, r3
 8004ade:	3301      	adds	r3, #1
 8004ae0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	bf0c      	ite	eq
 8004ae8:	2301      	moveq	r3, #1
 8004aea:	2300      	movne	r3, #0
 8004aec:	b2db      	uxtb	r3, r3
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d001      	beq.n	8004af6 <HAL_I2C_Init+0x17e>
 8004af2:	2301      	movs	r3, #1
 8004af4:	e022      	b.n	8004b3c <HAL_I2C_Init+0x1c4>
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	689b      	ldr	r3, [r3, #8]
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d10e      	bne.n	8004b1c <HAL_I2C_Init+0x1a4>
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	1e58      	subs	r0, r3, #1
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	6859      	ldr	r1, [r3, #4]
 8004b06:	460b      	mov	r3, r1
 8004b08:	005b      	lsls	r3, r3, #1
 8004b0a:	440b      	add	r3, r1
 8004b0c:	fbb0 f3f3 	udiv	r3, r0, r3
 8004b10:	3301      	adds	r3, #1
 8004b12:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004b16:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004b1a:	e00f      	b.n	8004b3c <HAL_I2C_Init+0x1c4>
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	1e58      	subs	r0, r3, #1
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	6859      	ldr	r1, [r3, #4]
 8004b24:	460b      	mov	r3, r1
 8004b26:	009b      	lsls	r3, r3, #2
 8004b28:	440b      	add	r3, r1
 8004b2a:	0099      	lsls	r1, r3, #2
 8004b2c:	440b      	add	r3, r1
 8004b2e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004b32:	3301      	adds	r3, #1
 8004b34:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004b38:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004b3c:	6879      	ldr	r1, [r7, #4]
 8004b3e:	6809      	ldr	r1, [r1, #0]
 8004b40:	4313      	orrs	r3, r2
 8004b42:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	69da      	ldr	r2, [r3, #28]
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	6a1b      	ldr	r3, [r3, #32]
 8004b56:	431a      	orrs	r2, r3
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	430a      	orrs	r2, r1
 8004b5e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	689b      	ldr	r3, [r3, #8]
 8004b66:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004b6a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004b6e:	687a      	ldr	r2, [r7, #4]
 8004b70:	6911      	ldr	r1, [r2, #16]
 8004b72:	687a      	ldr	r2, [r7, #4]
 8004b74:	68d2      	ldr	r2, [r2, #12]
 8004b76:	4311      	orrs	r1, r2
 8004b78:	687a      	ldr	r2, [r7, #4]
 8004b7a:	6812      	ldr	r2, [r2, #0]
 8004b7c:	430b      	orrs	r3, r1
 8004b7e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	68db      	ldr	r3, [r3, #12]
 8004b86:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	695a      	ldr	r2, [r3, #20]
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	699b      	ldr	r3, [r3, #24]
 8004b92:	431a      	orrs	r2, r3
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	430a      	orrs	r2, r1
 8004b9a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	681a      	ldr	r2, [r3, #0]
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	f042 0201 	orr.w	r2, r2, #1
 8004baa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	2200      	movs	r2, #0
 8004bb0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	2220      	movs	r2, #32
 8004bb6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	2200      	movs	r2, #0
 8004bbe:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	2200      	movs	r2, #0
 8004bc4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004bc8:	2300      	movs	r3, #0
}
 8004bca:	4618      	mov	r0, r3
 8004bcc:	3710      	adds	r7, #16
 8004bce:	46bd      	mov	sp, r7
 8004bd0:	bd80      	pop	{r7, pc}
 8004bd2:	bf00      	nop
 8004bd4:	000186a0 	.word	0x000186a0
 8004bd8:	001e847f 	.word	0x001e847f
 8004bdc:	003d08ff 	.word	0x003d08ff
 8004be0:	431bde83 	.word	0x431bde83
 8004be4:	10624dd3 	.word	0x10624dd3

08004be8 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004be8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004bea:	b08f      	sub	sp, #60	; 0x3c
 8004bec:	af0a      	add	r7, sp, #40	; 0x28
 8004bee:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d101      	bne.n	8004bfa <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004bf6:	2301      	movs	r3, #1
 8004bf8:	e10f      	b.n	8004e1a <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8004c06:	b2db      	uxtb	r3, r3
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d106      	bne.n	8004c1a <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	2200      	movs	r2, #0
 8004c10:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004c14:	6878      	ldr	r0, [r7, #4]
 8004c16:	f009 f829 	bl	800dc6c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	2203      	movs	r2, #3
 8004c1e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8004c22:	68bb      	ldr	r3, [r7, #8]
 8004c24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d102      	bne.n	8004c34 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	2200      	movs	r2, #0
 8004c32:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	4618      	mov	r0, r3
 8004c3a:	f005 fdda 	bl	800a7f2 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	603b      	str	r3, [r7, #0]
 8004c44:	687e      	ldr	r6, [r7, #4]
 8004c46:	466d      	mov	r5, sp
 8004c48:	f106 0410 	add.w	r4, r6, #16
 8004c4c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004c4e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004c50:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004c52:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004c54:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004c58:	e885 0003 	stmia.w	r5, {r0, r1}
 8004c5c:	1d33      	adds	r3, r6, #4
 8004c5e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004c60:	6838      	ldr	r0, [r7, #0]
 8004c62:	f005 fcb1 	bl	800a5c8 <USB_CoreInit>
 8004c66:	4603      	mov	r3, r0
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d005      	beq.n	8004c78 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	2202      	movs	r2, #2
 8004c70:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8004c74:	2301      	movs	r3, #1
 8004c76:	e0d0      	b.n	8004e1a <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	2100      	movs	r1, #0
 8004c7e:	4618      	mov	r0, r3
 8004c80:	f005 fdc8 	bl	800a814 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004c84:	2300      	movs	r3, #0
 8004c86:	73fb      	strb	r3, [r7, #15]
 8004c88:	e04a      	b.n	8004d20 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004c8a:	7bfa      	ldrb	r2, [r7, #15]
 8004c8c:	6879      	ldr	r1, [r7, #4]
 8004c8e:	4613      	mov	r3, r2
 8004c90:	00db      	lsls	r3, r3, #3
 8004c92:	1a9b      	subs	r3, r3, r2
 8004c94:	009b      	lsls	r3, r3, #2
 8004c96:	440b      	add	r3, r1
 8004c98:	333d      	adds	r3, #61	; 0x3d
 8004c9a:	2201      	movs	r2, #1
 8004c9c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004c9e:	7bfa      	ldrb	r2, [r7, #15]
 8004ca0:	6879      	ldr	r1, [r7, #4]
 8004ca2:	4613      	mov	r3, r2
 8004ca4:	00db      	lsls	r3, r3, #3
 8004ca6:	1a9b      	subs	r3, r3, r2
 8004ca8:	009b      	lsls	r3, r3, #2
 8004caa:	440b      	add	r3, r1
 8004cac:	333c      	adds	r3, #60	; 0x3c
 8004cae:	7bfa      	ldrb	r2, [r7, #15]
 8004cb0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8004cb2:	7bfa      	ldrb	r2, [r7, #15]
 8004cb4:	7bfb      	ldrb	r3, [r7, #15]
 8004cb6:	b298      	uxth	r0, r3
 8004cb8:	6879      	ldr	r1, [r7, #4]
 8004cba:	4613      	mov	r3, r2
 8004cbc:	00db      	lsls	r3, r3, #3
 8004cbe:	1a9b      	subs	r3, r3, r2
 8004cc0:	009b      	lsls	r3, r3, #2
 8004cc2:	440b      	add	r3, r1
 8004cc4:	3342      	adds	r3, #66	; 0x42
 8004cc6:	4602      	mov	r2, r0
 8004cc8:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004cca:	7bfa      	ldrb	r2, [r7, #15]
 8004ccc:	6879      	ldr	r1, [r7, #4]
 8004cce:	4613      	mov	r3, r2
 8004cd0:	00db      	lsls	r3, r3, #3
 8004cd2:	1a9b      	subs	r3, r3, r2
 8004cd4:	009b      	lsls	r3, r3, #2
 8004cd6:	440b      	add	r3, r1
 8004cd8:	333f      	adds	r3, #63	; 0x3f
 8004cda:	2200      	movs	r2, #0
 8004cdc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004cde:	7bfa      	ldrb	r2, [r7, #15]
 8004ce0:	6879      	ldr	r1, [r7, #4]
 8004ce2:	4613      	mov	r3, r2
 8004ce4:	00db      	lsls	r3, r3, #3
 8004ce6:	1a9b      	subs	r3, r3, r2
 8004ce8:	009b      	lsls	r3, r3, #2
 8004cea:	440b      	add	r3, r1
 8004cec:	3344      	adds	r3, #68	; 0x44
 8004cee:	2200      	movs	r2, #0
 8004cf0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004cf2:	7bfa      	ldrb	r2, [r7, #15]
 8004cf4:	6879      	ldr	r1, [r7, #4]
 8004cf6:	4613      	mov	r3, r2
 8004cf8:	00db      	lsls	r3, r3, #3
 8004cfa:	1a9b      	subs	r3, r3, r2
 8004cfc:	009b      	lsls	r3, r3, #2
 8004cfe:	440b      	add	r3, r1
 8004d00:	3348      	adds	r3, #72	; 0x48
 8004d02:	2200      	movs	r2, #0
 8004d04:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004d06:	7bfa      	ldrb	r2, [r7, #15]
 8004d08:	6879      	ldr	r1, [r7, #4]
 8004d0a:	4613      	mov	r3, r2
 8004d0c:	00db      	lsls	r3, r3, #3
 8004d0e:	1a9b      	subs	r3, r3, r2
 8004d10:	009b      	lsls	r3, r3, #2
 8004d12:	440b      	add	r3, r1
 8004d14:	3350      	adds	r3, #80	; 0x50
 8004d16:	2200      	movs	r2, #0
 8004d18:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004d1a:	7bfb      	ldrb	r3, [r7, #15]
 8004d1c:	3301      	adds	r3, #1
 8004d1e:	73fb      	strb	r3, [r7, #15]
 8004d20:	7bfa      	ldrb	r2, [r7, #15]
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	685b      	ldr	r3, [r3, #4]
 8004d26:	429a      	cmp	r2, r3
 8004d28:	d3af      	bcc.n	8004c8a <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004d2a:	2300      	movs	r3, #0
 8004d2c:	73fb      	strb	r3, [r7, #15]
 8004d2e:	e044      	b.n	8004dba <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004d30:	7bfa      	ldrb	r2, [r7, #15]
 8004d32:	6879      	ldr	r1, [r7, #4]
 8004d34:	4613      	mov	r3, r2
 8004d36:	00db      	lsls	r3, r3, #3
 8004d38:	1a9b      	subs	r3, r3, r2
 8004d3a:	009b      	lsls	r3, r3, #2
 8004d3c:	440b      	add	r3, r1
 8004d3e:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8004d42:	2200      	movs	r2, #0
 8004d44:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004d46:	7bfa      	ldrb	r2, [r7, #15]
 8004d48:	6879      	ldr	r1, [r7, #4]
 8004d4a:	4613      	mov	r3, r2
 8004d4c:	00db      	lsls	r3, r3, #3
 8004d4e:	1a9b      	subs	r3, r3, r2
 8004d50:	009b      	lsls	r3, r3, #2
 8004d52:	440b      	add	r3, r1
 8004d54:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8004d58:	7bfa      	ldrb	r2, [r7, #15]
 8004d5a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004d5c:	7bfa      	ldrb	r2, [r7, #15]
 8004d5e:	6879      	ldr	r1, [r7, #4]
 8004d60:	4613      	mov	r3, r2
 8004d62:	00db      	lsls	r3, r3, #3
 8004d64:	1a9b      	subs	r3, r3, r2
 8004d66:	009b      	lsls	r3, r3, #2
 8004d68:	440b      	add	r3, r1
 8004d6a:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8004d6e:	2200      	movs	r2, #0
 8004d70:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004d72:	7bfa      	ldrb	r2, [r7, #15]
 8004d74:	6879      	ldr	r1, [r7, #4]
 8004d76:	4613      	mov	r3, r2
 8004d78:	00db      	lsls	r3, r3, #3
 8004d7a:	1a9b      	subs	r3, r3, r2
 8004d7c:	009b      	lsls	r3, r3, #2
 8004d7e:	440b      	add	r3, r1
 8004d80:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8004d84:	2200      	movs	r2, #0
 8004d86:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004d88:	7bfa      	ldrb	r2, [r7, #15]
 8004d8a:	6879      	ldr	r1, [r7, #4]
 8004d8c:	4613      	mov	r3, r2
 8004d8e:	00db      	lsls	r3, r3, #3
 8004d90:	1a9b      	subs	r3, r3, r2
 8004d92:	009b      	lsls	r3, r3, #2
 8004d94:	440b      	add	r3, r1
 8004d96:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8004d9a:	2200      	movs	r2, #0
 8004d9c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004d9e:	7bfa      	ldrb	r2, [r7, #15]
 8004da0:	6879      	ldr	r1, [r7, #4]
 8004da2:	4613      	mov	r3, r2
 8004da4:	00db      	lsls	r3, r3, #3
 8004da6:	1a9b      	subs	r3, r3, r2
 8004da8:	009b      	lsls	r3, r3, #2
 8004daa:	440b      	add	r3, r1
 8004dac:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8004db0:	2200      	movs	r2, #0
 8004db2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004db4:	7bfb      	ldrb	r3, [r7, #15]
 8004db6:	3301      	adds	r3, #1
 8004db8:	73fb      	strb	r3, [r7, #15]
 8004dba:	7bfa      	ldrb	r2, [r7, #15]
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	685b      	ldr	r3, [r3, #4]
 8004dc0:	429a      	cmp	r2, r3
 8004dc2:	d3b5      	bcc.n	8004d30 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	603b      	str	r3, [r7, #0]
 8004dca:	687e      	ldr	r6, [r7, #4]
 8004dcc:	466d      	mov	r5, sp
 8004dce:	f106 0410 	add.w	r4, r6, #16
 8004dd2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004dd4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004dd6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004dd8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004dda:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004dde:	e885 0003 	stmia.w	r5, {r0, r1}
 8004de2:	1d33      	adds	r3, r6, #4
 8004de4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004de6:	6838      	ldr	r0, [r7, #0]
 8004de8:	f005 fd3e 	bl	800a868 <USB_DevInit>
 8004dec:	4603      	mov	r3, r0
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d005      	beq.n	8004dfe <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	2202      	movs	r2, #2
 8004df6:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8004dfa:	2301      	movs	r3, #1
 8004dfc:	e00d      	b.n	8004e1a <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	2200      	movs	r2, #0
 8004e02:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	2201      	movs	r2, #1
 8004e0a:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
  #endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	4618      	mov	r0, r3
 8004e14:	f006 fd33 	bl	800b87e <USB_DevDisconnect>

  return HAL_OK;
 8004e18:	2300      	movs	r3, #0
}
 8004e1a:	4618      	mov	r0, r3
 8004e1c:	3714      	adds	r7, #20
 8004e1e:	46bd      	mov	sp, r7
 8004e20:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004e22 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8004e22:	b580      	push	{r7, lr}
 8004e24:	b084      	sub	sp, #16
 8004e26:	af00      	add	r7, sp, #0
 8004e28:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */

  __HAL_LOCK(hpcd);
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8004e36:	2b01      	cmp	r3, #1
 8004e38:	d101      	bne.n	8004e3e <HAL_PCD_Start+0x1c>
 8004e3a:	2302      	movs	r3, #2
 8004e3c:	e020      	b.n	8004e80 <HAL_PCD_Start+0x5e>
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	2201      	movs	r2, #1
 8004e42:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e4a:	2b01      	cmp	r3, #1
 8004e4c:	d109      	bne.n	8004e62 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8004e52:	2b01      	cmp	r3, #1
 8004e54:	d005      	beq.n	8004e62 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e5a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */
  (void)USB_DevConnect(hpcd->Instance);
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	4618      	mov	r0, r3
 8004e68:	f006 fcf1 	bl	800b84e <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	4618      	mov	r0, r3
 8004e72:	f005 fcad 	bl	800a7d0 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	2200      	movs	r2, #0
 8004e7a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8004e7e:	2300      	movs	r3, #0
}
 8004e80:	4618      	mov	r0, r3
 8004e82:	3710      	adds	r7, #16
 8004e84:	46bd      	mov	sp, r7
 8004e86:	bd80      	pop	{r7, pc}

08004e88 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8004e88:	b590      	push	{r4, r7, lr}
 8004e8a:	b08d      	sub	sp, #52	; 0x34
 8004e8c:	af00      	add	r7, sp, #0
 8004e8e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e96:	6a3b      	ldr	r3, [r7, #32]
 8004e98:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	4618      	mov	r0, r3
 8004ea0:	f006 fd98 	bl	800b9d4 <USB_GetMode>
 8004ea4:	4603      	mov	r3, r0
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	f040 838e 	bne.w	80055c8 <HAL_PCD_IRQHandler+0x740>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	4618      	mov	r0, r3
 8004eb2:	f006 fcfc 	bl	800b8ae <USB_ReadInterrupts>
 8004eb6:	4603      	mov	r3, r0
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	f000 8384 	beq.w	80055c6 <HAL_PCD_IRQHandler+0x73e>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	4618      	mov	r0, r3
 8004ec4:	f006 fcf3 	bl	800b8ae <USB_ReadInterrupts>
 8004ec8:	4603      	mov	r3, r0
 8004eca:	f003 0302 	and.w	r3, r3, #2
 8004ece:	2b02      	cmp	r3, #2
 8004ed0:	d107      	bne.n	8004ee2 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	695a      	ldr	r2, [r3, #20]
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	f002 0202 	and.w	r2, r2, #2
 8004ee0:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	4618      	mov	r0, r3
 8004ee8:	f006 fce1 	bl	800b8ae <USB_ReadInterrupts>
 8004eec:	4603      	mov	r3, r0
 8004eee:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004ef2:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004ef6:	d17b      	bne.n	8004ff0 <HAL_PCD_IRQHandler+0x168>
    {
      epnum = 0U;
 8004ef8:	2300      	movs	r3, #0
 8004efa:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	4618      	mov	r0, r3
 8004f02:	f006 fce7 	bl	800b8d4 <USB_ReadDevAllOutEpInterrupt>
 8004f06:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8004f08:	e06f      	b.n	8004fea <HAL_PCD_IRQHandler+0x162>
      {
        if ((ep_intr & 0x1U) != 0U)
 8004f0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f0c:	f003 0301 	and.w	r3, r3, #1
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d064      	beq.n	8004fde <HAL_PCD_IRQHandler+0x156>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f1a:	b2d2      	uxtb	r2, r2
 8004f1c:	4611      	mov	r1, r2
 8004f1e:	4618      	mov	r0, r3
 8004f20:	f006 fd0c 	bl	800b93c <USB_ReadDevOutEPInterrupt>
 8004f24:	61b8      	str	r0, [r7, #24]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8004f26:	69bb      	ldr	r3, [r7, #24]
 8004f28:	f003 0301 	and.w	r3, r3, #1
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d00c      	beq.n	8004f4a <HAL_PCD_IRQHandler+0xc2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8004f30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f32:	015a      	lsls	r2, r3, #5
 8004f34:	69fb      	ldr	r3, [r7, #28]
 8004f36:	4413      	add	r3, r2
 8004f38:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f3c:	461a      	mov	r2, r3
 8004f3e:	2301      	movs	r3, #1
 8004f40:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8004f42:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004f44:	6878      	ldr	r0, [r7, #4]
 8004f46:	f000 fe0d 	bl	8005b64 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8004f4a:	69bb      	ldr	r3, [r7, #24]
 8004f4c:	f003 0308 	and.w	r3, r3, #8
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d00c      	beq.n	8004f6e <HAL_PCD_IRQHandler+0xe6>
          {
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8004f54:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004f56:	6878      	ldr	r0, [r7, #4]
 8004f58:	f000 ff0c 	bl	8005d74 <PCD_EP_OutSetupPacket_int>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8004f5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f5e:	015a      	lsls	r2, r3, #5
 8004f60:	69fb      	ldr	r3, [r7, #28]
 8004f62:	4413      	add	r3, r2
 8004f64:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f68:	461a      	mov	r2, r3
 8004f6a:	2308      	movs	r3, #8
 8004f6c:	6093      	str	r3, [r2, #8]
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8004f6e:	69bb      	ldr	r3, [r7, #24]
 8004f70:	f003 0310 	and.w	r3, r3, #16
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d008      	beq.n	8004f8a <HAL_PCD_IRQHandler+0x102>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8004f78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f7a:	015a      	lsls	r2, r3, #5
 8004f7c:	69fb      	ldr	r3, [r7, #28]
 8004f7e:	4413      	add	r3, r2
 8004f80:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f84:	461a      	mov	r2, r3
 8004f86:	2310      	movs	r3, #16
 8004f88:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004f8a:	69bb      	ldr	r3, [r7, #24]
 8004f8c:	f003 0320 	and.w	r3, r3, #32
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d015      	beq.n	8004fc0 <HAL_PCD_IRQHandler+0x138>
          {
            if (hpcd->Init.dma_enable == 1U)
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	691b      	ldr	r3, [r3, #16]
 8004f98:	2b01      	cmp	r3, #1
 8004f9a:	d108      	bne.n	8004fae <HAL_PCD_IRQHandler+0x126>
            {
              (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	6818      	ldr	r0, [r3, #0]
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8004fa6:	461a      	mov	r2, r3
 8004fa8:	2101      	movs	r1, #1
 8004faa:	f006 fd57 	bl	800ba5c <USB_EP0_OutStart>
            }
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004fae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fb0:	015a      	lsls	r2, r3, #5
 8004fb2:	69fb      	ldr	r3, [r7, #28]
 8004fb4:	4413      	add	r3, r2
 8004fb6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004fba:	461a      	mov	r2, r3
 8004fbc:	2320      	movs	r3, #32
 8004fbe:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8004fc0:	69bb      	ldr	r3, [r7, #24]
 8004fc2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d009      	beq.n	8004fde <HAL_PCD_IRQHandler+0x156>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8004fca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fcc:	015a      	lsls	r2, r3, #5
 8004fce:	69fb      	ldr	r3, [r7, #28]
 8004fd0:	4413      	add	r3, r2
 8004fd2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004fd6:	461a      	mov	r2, r3
 8004fd8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004fdc:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8004fde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fe0:	3301      	adds	r3, #1
 8004fe2:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8004fe4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fe6:	085b      	lsrs	r3, r3, #1
 8004fe8:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8004fea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d18c      	bne.n	8004f0a <HAL_PCD_IRQHandler+0x82>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	4618      	mov	r0, r3
 8004ff6:	f006 fc5a 	bl	800b8ae <USB_ReadInterrupts>
 8004ffa:	4603      	mov	r3, r0
 8004ffc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005000:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005004:	f040 80c4 	bne.w	8005190 <HAL_PCD_IRQHandler+0x308>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	4618      	mov	r0, r3
 800500e:	f006 fc7b 	bl	800b908 <USB_ReadDevAllInEpInterrupt>
 8005012:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8005014:	2300      	movs	r3, #0
 8005016:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8005018:	e0b6      	b.n	8005188 <HAL_PCD_IRQHandler+0x300>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800501a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800501c:	f003 0301 	and.w	r3, r3, #1
 8005020:	2b00      	cmp	r3, #0
 8005022:	f000 80ab 	beq.w	800517c <HAL_PCD_IRQHandler+0x2f4>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800502c:	b2d2      	uxtb	r2, r2
 800502e:	4611      	mov	r1, r2
 8005030:	4618      	mov	r0, r3
 8005032:	f006 fca1 	bl	800b978 <USB_ReadDevInEPInterrupt>
 8005036:	61b8      	str	r0, [r7, #24]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8005038:	69bb      	ldr	r3, [r7, #24]
 800503a:	f003 0301 	and.w	r3, r3, #1
 800503e:	2b00      	cmp	r3, #0
 8005040:	d05b      	beq.n	80050fa <HAL_PCD_IRQHandler+0x272>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8005042:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005044:	f003 030f 	and.w	r3, r3, #15
 8005048:	2201      	movs	r2, #1
 800504a:	fa02 f303 	lsl.w	r3, r2, r3
 800504e:	617b      	str	r3, [r7, #20]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8005050:	69fb      	ldr	r3, [r7, #28]
 8005052:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005056:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005058:	697b      	ldr	r3, [r7, #20]
 800505a:	43db      	mvns	r3, r3
 800505c:	69f9      	ldr	r1, [r7, #28]
 800505e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005062:	4013      	ands	r3, r2
 8005064:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8005066:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005068:	015a      	lsls	r2, r3, #5
 800506a:	69fb      	ldr	r3, [r7, #28]
 800506c:	4413      	add	r3, r2
 800506e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005072:	461a      	mov	r2, r3
 8005074:	2301      	movs	r3, #1
 8005076:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	691b      	ldr	r3, [r3, #16]
 800507c:	2b01      	cmp	r3, #1
 800507e:	d11b      	bne.n	80050b8 <HAL_PCD_IRQHandler+0x230>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8005080:	6879      	ldr	r1, [r7, #4]
 8005082:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005084:	4613      	mov	r3, r2
 8005086:	00db      	lsls	r3, r3, #3
 8005088:	1a9b      	subs	r3, r3, r2
 800508a:	009b      	lsls	r3, r3, #2
 800508c:	440b      	add	r3, r1
 800508e:	3348      	adds	r3, #72	; 0x48
 8005090:	6819      	ldr	r1, [r3, #0]
 8005092:	6878      	ldr	r0, [r7, #4]
 8005094:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005096:	4613      	mov	r3, r2
 8005098:	00db      	lsls	r3, r3, #3
 800509a:	1a9b      	subs	r3, r3, r2
 800509c:	009b      	lsls	r3, r3, #2
 800509e:	4403      	add	r3, r0
 80050a0:	3344      	adds	r3, #68	; 0x44
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	4419      	add	r1, r3
 80050a6:	6878      	ldr	r0, [r7, #4]
 80050a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80050aa:	4613      	mov	r3, r2
 80050ac:	00db      	lsls	r3, r3, #3
 80050ae:	1a9b      	subs	r3, r3, r2
 80050b0:	009b      	lsls	r3, r3, #2
 80050b2:	4403      	add	r3, r0
 80050b4:	3348      	adds	r3, #72	; 0x48
 80050b6:	6019      	str	r1, [r3, #0]
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80050b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050ba:	b2db      	uxtb	r3, r3
 80050bc:	4619      	mov	r1, r3
 80050be:	6878      	ldr	r0, [r7, #4]
 80050c0:	f008 fe55 	bl	800dd6e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

            if (hpcd->Init.dma_enable == 1U)
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	691b      	ldr	r3, [r3, #16]
 80050c8:	2b01      	cmp	r3, #1
 80050ca:	d116      	bne.n	80050fa <HAL_PCD_IRQHandler+0x272>
            {
              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80050cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d113      	bne.n	80050fa <HAL_PCD_IRQHandler+0x272>
 80050d2:	6879      	ldr	r1, [r7, #4]
 80050d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80050d6:	4613      	mov	r3, r2
 80050d8:	00db      	lsls	r3, r3, #3
 80050da:	1a9b      	subs	r3, r3, r2
 80050dc:	009b      	lsls	r3, r3, #2
 80050de:	440b      	add	r3, r1
 80050e0:	3350      	adds	r3, #80	; 0x50
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d108      	bne.n	80050fa <HAL_PCD_IRQHandler+0x272>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	6818      	ldr	r0, [r3, #0]
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80050f2:	461a      	mov	r2, r3
 80050f4:	2101      	movs	r1, #1
 80050f6:	f006 fcb1 	bl	800ba5c <USB_EP0_OutStart>
              }
            }
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80050fa:	69bb      	ldr	r3, [r7, #24]
 80050fc:	f003 0308 	and.w	r3, r3, #8
 8005100:	2b00      	cmp	r3, #0
 8005102:	d008      	beq.n	8005116 <HAL_PCD_IRQHandler+0x28e>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8005104:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005106:	015a      	lsls	r2, r3, #5
 8005108:	69fb      	ldr	r3, [r7, #28]
 800510a:	4413      	add	r3, r2
 800510c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005110:	461a      	mov	r2, r3
 8005112:	2308      	movs	r3, #8
 8005114:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8005116:	69bb      	ldr	r3, [r7, #24]
 8005118:	f003 0310 	and.w	r3, r3, #16
 800511c:	2b00      	cmp	r3, #0
 800511e:	d008      	beq.n	8005132 <HAL_PCD_IRQHandler+0x2aa>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8005120:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005122:	015a      	lsls	r2, r3, #5
 8005124:	69fb      	ldr	r3, [r7, #28]
 8005126:	4413      	add	r3, r2
 8005128:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800512c:	461a      	mov	r2, r3
 800512e:	2310      	movs	r3, #16
 8005130:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8005132:	69bb      	ldr	r3, [r7, #24]
 8005134:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005138:	2b00      	cmp	r3, #0
 800513a:	d008      	beq.n	800514e <HAL_PCD_IRQHandler+0x2c6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800513c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800513e:	015a      	lsls	r2, r3, #5
 8005140:	69fb      	ldr	r3, [r7, #28]
 8005142:	4413      	add	r3, r2
 8005144:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005148:	461a      	mov	r2, r3
 800514a:	2340      	movs	r3, #64	; 0x40
 800514c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800514e:	69bb      	ldr	r3, [r7, #24]
 8005150:	f003 0302 	and.w	r3, r3, #2
 8005154:	2b00      	cmp	r3, #0
 8005156:	d008      	beq.n	800516a <HAL_PCD_IRQHandler+0x2e2>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8005158:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800515a:	015a      	lsls	r2, r3, #5
 800515c:	69fb      	ldr	r3, [r7, #28]
 800515e:	4413      	add	r3, r2
 8005160:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005164:	461a      	mov	r2, r3
 8005166:	2302      	movs	r3, #2
 8005168:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800516a:	69bb      	ldr	r3, [r7, #24]
 800516c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005170:	2b00      	cmp	r3, #0
 8005172:	d003      	beq.n	800517c <HAL_PCD_IRQHandler+0x2f4>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8005174:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005176:	6878      	ldr	r0, [r7, #4]
 8005178:	f000 fc67 	bl	8005a4a <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800517c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800517e:	3301      	adds	r3, #1
 8005180:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8005182:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005184:	085b      	lsrs	r3, r3, #1
 8005186:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8005188:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800518a:	2b00      	cmp	r3, #0
 800518c:	f47f af45 	bne.w	800501a <HAL_PCD_IRQHandler+0x192>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	4618      	mov	r0, r3
 8005196:	f006 fb8a 	bl	800b8ae <USB_ReadInterrupts>
 800519a:	4603      	mov	r3, r0
 800519c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80051a0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80051a4:	d122      	bne.n	80051ec <HAL_PCD_IRQHandler+0x364>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80051a6:	69fb      	ldr	r3, [r7, #28]
 80051a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80051ac:	685b      	ldr	r3, [r3, #4]
 80051ae:	69fa      	ldr	r2, [r7, #28]
 80051b0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80051b4:	f023 0301 	bic.w	r3, r3, #1
 80051b8:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 80051c0:	2b01      	cmp	r3, #1
 80051c2:	d108      	bne.n	80051d6 <HAL_PCD_IRQHandler+0x34e>
      {
        hpcd->LPM_State = LPM_L0;
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	2200      	movs	r2, #0
 80051c8:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80051cc:	2100      	movs	r1, #0
 80051ce:	6878      	ldr	r0, [r7, #4]
 80051d0:	f000 fe88 	bl	8005ee4 <HAL_PCDEx_LPM_Callback>
 80051d4:	e002      	b.n	80051dc <HAL_PCD_IRQHandler+0x354>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80051d6:	6878      	ldr	r0, [r7, #4]
 80051d8:	f008 fe40 	bl	800de5c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	695a      	ldr	r2, [r3, #20]
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80051ea:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	4618      	mov	r0, r3
 80051f2:	f006 fb5c 	bl	800b8ae <USB_ReadInterrupts>
 80051f6:	4603      	mov	r3, r0
 80051f8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80051fc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005200:	d112      	bne.n	8005228 <HAL_PCD_IRQHandler+0x3a0>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8005202:	69fb      	ldr	r3, [r7, #28]
 8005204:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005208:	689b      	ldr	r3, [r3, #8]
 800520a:	f003 0301 	and.w	r3, r3, #1
 800520e:	2b01      	cmp	r3, #1
 8005210:	d102      	bne.n	8005218 <HAL_PCD_IRQHandler+0x390>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8005212:	6878      	ldr	r0, [r7, #4]
 8005214:	f008 fdfc 	bl	800de10 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	695a      	ldr	r2, [r3, #20]
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8005226:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    #endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	4618      	mov	r0, r3
 800522e:	f006 fb3e 	bl	800b8ae <USB_ReadInterrupts>
 8005232:	4603      	mov	r3, r0
 8005234:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005238:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800523c:	f040 80a7 	bne.w	800538e <HAL_PCD_IRQHandler+0x506>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8005240:	69fb      	ldr	r3, [r7, #28]
 8005242:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005246:	685b      	ldr	r3, [r3, #4]
 8005248:	69fa      	ldr	r2, [r7, #28]
 800524a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800524e:	f023 0301 	bic.w	r3, r3, #1
 8005252:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	2110      	movs	r1, #16
 800525a:	4618      	mov	r0, r3
 800525c:	f005 fc76 	bl	800ab4c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005260:	2300      	movs	r3, #0
 8005262:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005264:	e036      	b.n	80052d4 <HAL_PCD_IRQHandler+0x44c>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8005266:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005268:	015a      	lsls	r2, r3, #5
 800526a:	69fb      	ldr	r3, [r7, #28]
 800526c:	4413      	add	r3, r2
 800526e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005272:	461a      	mov	r2, r3
 8005274:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005278:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800527a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800527c:	015a      	lsls	r2, r3, #5
 800527e:	69fb      	ldr	r3, [r7, #28]
 8005280:	4413      	add	r3, r2
 8005282:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800528a:	0151      	lsls	r1, r2, #5
 800528c:	69fa      	ldr	r2, [r7, #28]
 800528e:	440a      	add	r2, r1
 8005290:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005294:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005298:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800529a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800529c:	015a      	lsls	r2, r3, #5
 800529e:	69fb      	ldr	r3, [r7, #28]
 80052a0:	4413      	add	r3, r2
 80052a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052a6:	461a      	mov	r2, r3
 80052a8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80052ac:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80052ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052b0:	015a      	lsls	r2, r3, #5
 80052b2:	69fb      	ldr	r3, [r7, #28]
 80052b4:	4413      	add	r3, r2
 80052b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80052be:	0151      	lsls	r1, r2, #5
 80052c0:	69fa      	ldr	r2, [r7, #28]
 80052c2:	440a      	add	r2, r1
 80052c4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80052c8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80052cc:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80052ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052d0:	3301      	adds	r3, #1
 80052d2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	685b      	ldr	r3, [r3, #4]
 80052d8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80052da:	429a      	cmp	r2, r3
 80052dc:	d3c3      	bcc.n	8005266 <HAL_PCD_IRQHandler+0x3de>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80052de:	69fb      	ldr	r3, [r7, #28]
 80052e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80052e4:	69db      	ldr	r3, [r3, #28]
 80052e6:	69fa      	ldr	r2, [r7, #28]
 80052e8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80052ec:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80052f0:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d016      	beq.n	8005328 <HAL_PCD_IRQHandler+0x4a0>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80052fa:	69fb      	ldr	r3, [r7, #28]
 80052fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005300:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005304:	69fa      	ldr	r2, [r7, #28]
 8005306:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800530a:	f043 030b 	orr.w	r3, r3, #11
 800530e:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8005312:	69fb      	ldr	r3, [r7, #28]
 8005314:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005318:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800531a:	69fa      	ldr	r2, [r7, #28]
 800531c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005320:	f043 030b 	orr.w	r3, r3, #11
 8005324:	6453      	str	r3, [r2, #68]	; 0x44
 8005326:	e015      	b.n	8005354 <HAL_PCD_IRQHandler+0x4cc>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8005328:	69fb      	ldr	r3, [r7, #28]
 800532a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800532e:	695b      	ldr	r3, [r3, #20]
 8005330:	69fa      	ldr	r2, [r7, #28]
 8005332:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005336:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800533a:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 800533e:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8005340:	69fb      	ldr	r3, [r7, #28]
 8005342:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005346:	691b      	ldr	r3, [r3, #16]
 8005348:	69fa      	ldr	r2, [r7, #28]
 800534a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800534e:	f043 030b 	orr.w	r3, r3, #11
 8005352:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8005354:	69fb      	ldr	r3, [r7, #28]
 8005356:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	69fa      	ldr	r2, [r7, #28]
 800535e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005362:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8005366:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	6818      	ldr	r0, [r3, #0]
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	691b      	ldr	r3, [r3, #16]
 8005370:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8005378:	461a      	mov	r2, r3
 800537a:	f006 fb6f 	bl	800ba5c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	695a      	ldr	r2, [r3, #20]
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800538c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	4618      	mov	r0, r3
 8005394:	f006 fa8b 	bl	800b8ae <USB_ReadInterrupts>
 8005398:	4603      	mov	r3, r0
 800539a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800539e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80053a2:	d124      	bne.n	80053ee <HAL_PCD_IRQHandler+0x566>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	4618      	mov	r0, r3
 80053aa:	f006 fb21 	bl	800b9f0 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	4618      	mov	r0, r3
 80053b4:	f005 fc2b 	bl	800ac0e <USB_GetDevSpeed>
 80053b8:	4603      	mov	r3, r0
 80053ba:	461a      	mov	r2, r3
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681c      	ldr	r4, [r3, #0]
 80053c4:	f001 f9a2 	bl	800670c <HAL_RCC_GetHCLKFreq>
 80053c8:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80053ce:	b2db      	uxtb	r3, r3
 80053d0:	461a      	mov	r2, r3
 80053d2:	4620      	mov	r0, r4
 80053d4:	f005 f95a 	bl	800a68c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80053d8:	6878      	ldr	r0, [r7, #4]
 80053da:	f008 fcf0 	bl	800ddbe <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	695a      	ldr	r2, [r3, #20]
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80053ec:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	4618      	mov	r0, r3
 80053f4:	f006 fa5b 	bl	800b8ae <USB_ReadInterrupts>
 80053f8:	4603      	mov	r3, r0
 80053fa:	f003 0310 	and.w	r3, r3, #16
 80053fe:	2b10      	cmp	r3, #16
 8005400:	d161      	bne.n	80054c6 <HAL_PCD_IRQHandler+0x63e>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	699a      	ldr	r2, [r3, #24]
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	f022 0210 	bic.w	r2, r2, #16
 8005410:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8005412:	6a3b      	ldr	r3, [r7, #32]
 8005414:	6a1b      	ldr	r3, [r3, #32]
 8005416:	613b      	str	r3, [r7, #16]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8005418:	693b      	ldr	r3, [r7, #16]
 800541a:	f003 020f 	and.w	r2, r3, #15
 800541e:	4613      	mov	r3, r2
 8005420:	00db      	lsls	r3, r3, #3
 8005422:	1a9b      	subs	r3, r3, r2
 8005424:	009b      	lsls	r3, r3, #2
 8005426:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800542a:	687a      	ldr	r2, [r7, #4]
 800542c:	4413      	add	r3, r2
 800542e:	3304      	adds	r3, #4
 8005430:	60fb      	str	r3, [r7, #12]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8005432:	693b      	ldr	r3, [r7, #16]
 8005434:	0c5b      	lsrs	r3, r3, #17
 8005436:	f003 030f 	and.w	r3, r3, #15
 800543a:	2b02      	cmp	r3, #2
 800543c:	d124      	bne.n	8005488 <HAL_PCD_IRQHandler+0x600>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 800543e:	693a      	ldr	r2, [r7, #16]
 8005440:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8005444:	4013      	ands	r3, r2
 8005446:	2b00      	cmp	r3, #0
 8005448:	d035      	beq.n	80054b6 <HAL_PCD_IRQHandler+0x62e>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 800544e:	693b      	ldr	r3, [r7, #16]
 8005450:	091b      	lsrs	r3, r3, #4
 8005452:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8005454:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005458:	b29b      	uxth	r3, r3
 800545a:	461a      	mov	r2, r3
 800545c:	6a38      	ldr	r0, [r7, #32]
 800545e:	f006 f8d3 	bl	800b608 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	68da      	ldr	r2, [r3, #12]
 8005466:	693b      	ldr	r3, [r7, #16]
 8005468:	091b      	lsrs	r3, r3, #4
 800546a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800546e:	441a      	add	r2, r3
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	699a      	ldr	r2, [r3, #24]
 8005478:	693b      	ldr	r3, [r7, #16]
 800547a:	091b      	lsrs	r3, r3, #4
 800547c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005480:	441a      	add	r2, r3
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	619a      	str	r2, [r3, #24]
 8005486:	e016      	b.n	80054b6 <HAL_PCD_IRQHandler+0x62e>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8005488:	693b      	ldr	r3, [r7, #16]
 800548a:	0c5b      	lsrs	r3, r3, #17
 800548c:	f003 030f 	and.w	r3, r3, #15
 8005490:	2b06      	cmp	r3, #6
 8005492:	d110      	bne.n	80054b6 <HAL_PCD_IRQHandler+0x62e>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800549a:	2208      	movs	r2, #8
 800549c:	4619      	mov	r1, r3
 800549e:	6a38      	ldr	r0, [r7, #32]
 80054a0:	f006 f8b2 	bl	800b608 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	699a      	ldr	r2, [r3, #24]
 80054a8:	693b      	ldr	r3, [r7, #16]
 80054aa:	091b      	lsrs	r3, r3, #4
 80054ac:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80054b0:	441a      	add	r2, r3
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	699a      	ldr	r2, [r3, #24]
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	f042 0210 	orr.w	r2, r2, #16
 80054c4:	619a      	str	r2, [r3, #24]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	4618      	mov	r0, r3
 80054cc:	f006 f9ef 	bl	800b8ae <USB_ReadInterrupts>
 80054d0:	4603      	mov	r3, r0
 80054d2:	f003 0308 	and.w	r3, r3, #8
 80054d6:	2b08      	cmp	r3, #8
 80054d8:	d10a      	bne.n	80054f0 <HAL_PCD_IRQHandler+0x668>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80054da:	6878      	ldr	r0, [r7, #4]
 80054dc:	f008 fc61 	bl	800dda2 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	695a      	ldr	r2, [r3, #20]
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	f002 0208 	and.w	r2, r2, #8
 80054ee:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	4618      	mov	r0, r3
 80054f6:	f006 f9da 	bl	800b8ae <USB_ReadInterrupts>
 80054fa:	4603      	mov	r3, r0
 80054fc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005500:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005504:	d10f      	bne.n	8005526 <HAL_PCD_IRQHandler+0x69e>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8005506:	2300      	movs	r3, #0
 8005508:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800550a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800550c:	b2db      	uxtb	r3, r3
 800550e:	4619      	mov	r1, r3
 8005510:	6878      	ldr	r0, [r7, #4]
 8005512:	f008 fcc3 	bl	800de9c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	695a      	ldr	r2, [r3, #20]
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8005524:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	4618      	mov	r0, r3
 800552c:	f006 f9bf 	bl	800b8ae <USB_ReadInterrupts>
 8005530:	4603      	mov	r3, r0
 8005532:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005536:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800553a:	d10f      	bne.n	800555c <HAL_PCD_IRQHandler+0x6d4>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 800553c:	2300      	movs	r3, #0
 800553e:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8005540:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005542:	b2db      	uxtb	r3, r3
 8005544:	4619      	mov	r1, r3
 8005546:	6878      	ldr	r0, [r7, #4]
 8005548:	f008 fc96 	bl	800de78 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	695a      	ldr	r2, [r3, #20]
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 800555a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	4618      	mov	r0, r3
 8005562:	f006 f9a4 	bl	800b8ae <USB_ReadInterrupts>
 8005566:	4603      	mov	r3, r0
 8005568:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800556c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005570:	d10a      	bne.n	8005588 <HAL_PCD_IRQHandler+0x700>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8005572:	6878      	ldr	r0, [r7, #4]
 8005574:	f008 fca4 	bl	800dec0 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	695a      	ldr	r2, [r3, #20]
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8005586:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	4618      	mov	r0, r3
 800558e:	f006 f98e 	bl	800b8ae <USB_ReadInterrupts>
 8005592:	4603      	mov	r3, r0
 8005594:	f003 0304 	and.w	r3, r3, #4
 8005598:	2b04      	cmp	r3, #4
 800559a:	d115      	bne.n	80055c8 <HAL_PCD_IRQHandler+0x740>
    {
      temp = hpcd->Instance->GOTGINT;
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	685b      	ldr	r3, [r3, #4]
 80055a2:	613b      	str	r3, [r7, #16]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80055a4:	693b      	ldr	r3, [r7, #16]
 80055a6:	f003 0304 	and.w	r3, r3, #4
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d002      	beq.n	80055b4 <HAL_PCD_IRQHandler+0x72c>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80055ae:	6878      	ldr	r0, [r7, #4]
 80055b0:	f008 fc94 	bl	800dedc <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	6859      	ldr	r1, [r3, #4]
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	693a      	ldr	r2, [r7, #16]
 80055c0:	430a      	orrs	r2, r1
 80055c2:	605a      	str	r2, [r3, #4]
 80055c4:	e000      	b.n	80055c8 <HAL_PCD_IRQHandler+0x740>
      return;
 80055c6:	bf00      	nop
    }
  }
}
 80055c8:	3734      	adds	r7, #52	; 0x34
 80055ca:	46bd      	mov	sp, r7
 80055cc:	bd90      	pop	{r4, r7, pc}

080055ce <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80055ce:	b580      	push	{r7, lr}
 80055d0:	b082      	sub	sp, #8
 80055d2:	af00      	add	r7, sp, #0
 80055d4:	6078      	str	r0, [r7, #4]
 80055d6:	460b      	mov	r3, r1
 80055d8:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80055e0:	2b01      	cmp	r3, #1
 80055e2:	d101      	bne.n	80055e8 <HAL_PCD_SetAddress+0x1a>
 80055e4:	2302      	movs	r3, #2
 80055e6:	e013      	b.n	8005610 <HAL_PCD_SetAddress+0x42>
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	2201      	movs	r2, #1
 80055ec:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	78fa      	ldrb	r2, [r7, #3]
 80055f4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	78fa      	ldrb	r2, [r7, #3]
 80055fe:	4611      	mov	r1, r2
 8005600:	4618      	mov	r0, r3
 8005602:	f006 f8fe 	bl	800b802 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	2200      	movs	r2, #0
 800560a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 800560e:	2300      	movs	r3, #0
}
 8005610:	4618      	mov	r0, r3
 8005612:	3708      	adds	r7, #8
 8005614:	46bd      	mov	sp, r7
 8005616:	bd80      	pop	{r7, pc}

08005618 <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 8005618:	b580      	push	{r7, lr}
 800561a:	b084      	sub	sp, #16
 800561c:	af00      	add	r7, sp, #0
 800561e:	6078      	str	r0, [r7, #4]
 8005620:	4608      	mov	r0, r1
 8005622:	4611      	mov	r1, r2
 8005624:	461a      	mov	r2, r3
 8005626:	4603      	mov	r3, r0
 8005628:	70fb      	strb	r3, [r7, #3]
 800562a:	460b      	mov	r3, r1
 800562c:	803b      	strh	r3, [r7, #0]
 800562e:	4613      	mov	r3, r2
 8005630:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8005632:	2300      	movs	r3, #0
 8005634:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005636:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800563a:	2b00      	cmp	r3, #0
 800563c:	da0f      	bge.n	800565e <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800563e:	78fb      	ldrb	r3, [r7, #3]
 8005640:	f003 020f 	and.w	r2, r3, #15
 8005644:	4613      	mov	r3, r2
 8005646:	00db      	lsls	r3, r3, #3
 8005648:	1a9b      	subs	r3, r3, r2
 800564a:	009b      	lsls	r3, r3, #2
 800564c:	3338      	adds	r3, #56	; 0x38
 800564e:	687a      	ldr	r2, [r7, #4]
 8005650:	4413      	add	r3, r2
 8005652:	3304      	adds	r3, #4
 8005654:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	2201      	movs	r2, #1
 800565a:	705a      	strb	r2, [r3, #1]
 800565c:	e00f      	b.n	800567e <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800565e:	78fb      	ldrb	r3, [r7, #3]
 8005660:	f003 020f 	and.w	r2, r3, #15
 8005664:	4613      	mov	r3, r2
 8005666:	00db      	lsls	r3, r3, #3
 8005668:	1a9b      	subs	r3, r3, r2
 800566a:	009b      	lsls	r3, r3, #2
 800566c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8005670:	687a      	ldr	r2, [r7, #4]
 8005672:	4413      	add	r3, r2
 8005674:	3304      	adds	r3, #4
 8005676:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	2200      	movs	r2, #0
 800567c:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800567e:	78fb      	ldrb	r3, [r7, #3]
 8005680:	f003 030f 	and.w	r3, r3, #15
 8005684:	b2da      	uxtb	r2, r3
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800568a:	883a      	ldrh	r2, [r7, #0]
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	78ba      	ldrb	r2, [r7, #2]
 8005694:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	785b      	ldrb	r3, [r3, #1]
 800569a:	2b00      	cmp	r3, #0
 800569c:	d004      	beq.n	80056a8 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	781b      	ldrb	r3, [r3, #0]
 80056a2:	b29a      	uxth	r2, r3
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80056a8:	78bb      	ldrb	r3, [r7, #2]
 80056aa:	2b02      	cmp	r3, #2
 80056ac:	d102      	bne.n	80056b4 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	2200      	movs	r2, #0
 80056b2:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80056ba:	2b01      	cmp	r3, #1
 80056bc:	d101      	bne.n	80056c2 <HAL_PCD_EP_Open+0xaa>
 80056be:	2302      	movs	r3, #2
 80056c0:	e00e      	b.n	80056e0 <HAL_PCD_EP_Open+0xc8>
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	2201      	movs	r2, #1
 80056c6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	68f9      	ldr	r1, [r7, #12]
 80056d0:	4618      	mov	r0, r3
 80056d2:	f005 fac1 	bl	800ac58 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	2200      	movs	r2, #0
 80056da:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 80056de:	7afb      	ldrb	r3, [r7, #11]
}
 80056e0:	4618      	mov	r0, r3
 80056e2:	3710      	adds	r7, #16
 80056e4:	46bd      	mov	sp, r7
 80056e6:	bd80      	pop	{r7, pc}

080056e8 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80056e8:	b580      	push	{r7, lr}
 80056ea:	b084      	sub	sp, #16
 80056ec:	af00      	add	r7, sp, #0
 80056ee:	6078      	str	r0, [r7, #4]
 80056f0:	460b      	mov	r3, r1
 80056f2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80056f4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	da0f      	bge.n	800571c <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80056fc:	78fb      	ldrb	r3, [r7, #3]
 80056fe:	f003 020f 	and.w	r2, r3, #15
 8005702:	4613      	mov	r3, r2
 8005704:	00db      	lsls	r3, r3, #3
 8005706:	1a9b      	subs	r3, r3, r2
 8005708:	009b      	lsls	r3, r3, #2
 800570a:	3338      	adds	r3, #56	; 0x38
 800570c:	687a      	ldr	r2, [r7, #4]
 800570e:	4413      	add	r3, r2
 8005710:	3304      	adds	r3, #4
 8005712:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	2201      	movs	r2, #1
 8005718:	705a      	strb	r2, [r3, #1]
 800571a:	e00f      	b.n	800573c <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800571c:	78fb      	ldrb	r3, [r7, #3]
 800571e:	f003 020f 	and.w	r2, r3, #15
 8005722:	4613      	mov	r3, r2
 8005724:	00db      	lsls	r3, r3, #3
 8005726:	1a9b      	subs	r3, r3, r2
 8005728:	009b      	lsls	r3, r3, #2
 800572a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800572e:	687a      	ldr	r2, [r7, #4]
 8005730:	4413      	add	r3, r2
 8005732:	3304      	adds	r3, #4
 8005734:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	2200      	movs	r2, #0
 800573a:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800573c:	78fb      	ldrb	r3, [r7, #3]
 800573e:	f003 030f 	and.w	r3, r3, #15
 8005742:	b2da      	uxtb	r2, r3
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800574e:	2b01      	cmp	r3, #1
 8005750:	d101      	bne.n	8005756 <HAL_PCD_EP_Close+0x6e>
 8005752:	2302      	movs	r3, #2
 8005754:	e00e      	b.n	8005774 <HAL_PCD_EP_Close+0x8c>
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	2201      	movs	r2, #1
 800575a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	68f9      	ldr	r1, [r7, #12]
 8005764:	4618      	mov	r0, r3
 8005766:	f005 faff 	bl	800ad68 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	2200      	movs	r2, #0
 800576e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8005772:	2300      	movs	r3, #0
}
 8005774:	4618      	mov	r0, r3
 8005776:	3710      	adds	r7, #16
 8005778:	46bd      	mov	sp, r7
 800577a:	bd80      	pop	{r7, pc}

0800577c <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800577c:	b580      	push	{r7, lr}
 800577e:	b086      	sub	sp, #24
 8005780:	af00      	add	r7, sp, #0
 8005782:	60f8      	str	r0, [r7, #12]
 8005784:	607a      	str	r2, [r7, #4]
 8005786:	603b      	str	r3, [r7, #0]
 8005788:	460b      	mov	r3, r1
 800578a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800578c:	7afb      	ldrb	r3, [r7, #11]
 800578e:	f003 020f 	and.w	r2, r3, #15
 8005792:	4613      	mov	r3, r2
 8005794:	00db      	lsls	r3, r3, #3
 8005796:	1a9b      	subs	r3, r3, r2
 8005798:	009b      	lsls	r3, r3, #2
 800579a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800579e:	68fa      	ldr	r2, [r7, #12]
 80057a0:	4413      	add	r3, r2
 80057a2:	3304      	adds	r3, #4
 80057a4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80057a6:	697b      	ldr	r3, [r7, #20]
 80057a8:	687a      	ldr	r2, [r7, #4]
 80057aa:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80057ac:	697b      	ldr	r3, [r7, #20]
 80057ae:	683a      	ldr	r2, [r7, #0]
 80057b0:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 80057b2:	697b      	ldr	r3, [r7, #20]
 80057b4:	2200      	movs	r2, #0
 80057b6:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 80057b8:	697b      	ldr	r3, [r7, #20]
 80057ba:	2200      	movs	r2, #0
 80057bc:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80057be:	7afb      	ldrb	r3, [r7, #11]
 80057c0:	f003 030f 	and.w	r3, r3, #15
 80057c4:	b2da      	uxtb	r2, r3
 80057c6:	697b      	ldr	r3, [r7, #20]
 80057c8:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	691b      	ldr	r3, [r3, #16]
 80057ce:	2b01      	cmp	r3, #1
 80057d0:	d102      	bne.n	80057d8 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80057d2:	687a      	ldr	r2, [r7, #4]
 80057d4:	697b      	ldr	r3, [r7, #20]
 80057d6:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80057d8:	7afb      	ldrb	r3, [r7, #11]
 80057da:	f003 030f 	and.w	r3, r3, #15
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d109      	bne.n	80057f6 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	6818      	ldr	r0, [r3, #0]
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	691b      	ldr	r3, [r3, #16]
 80057ea:	b2db      	uxtb	r3, r3
 80057ec:	461a      	mov	r2, r3
 80057ee:	6979      	ldr	r1, [r7, #20]
 80057f0:	f005 fd82 	bl	800b2f8 <USB_EP0StartXfer>
 80057f4:	e008      	b.n	8005808 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	6818      	ldr	r0, [r3, #0]
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	691b      	ldr	r3, [r3, #16]
 80057fe:	b2db      	uxtb	r3, r3
 8005800:	461a      	mov	r2, r3
 8005802:	6979      	ldr	r1, [r7, #20]
 8005804:	f005 fb34 	bl	800ae70 <USB_EPStartXfer>
  }

  return HAL_OK;
 8005808:	2300      	movs	r3, #0
}
 800580a:	4618      	mov	r0, r3
 800580c:	3718      	adds	r7, #24
 800580e:	46bd      	mov	sp, r7
 8005810:	bd80      	pop	{r7, pc}

08005812 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005812:	b480      	push	{r7}
 8005814:	b083      	sub	sp, #12
 8005816:	af00      	add	r7, sp, #0
 8005818:	6078      	str	r0, [r7, #4]
 800581a:	460b      	mov	r3, r1
 800581c:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800581e:	78fb      	ldrb	r3, [r7, #3]
 8005820:	f003 020f 	and.w	r2, r3, #15
 8005824:	6879      	ldr	r1, [r7, #4]
 8005826:	4613      	mov	r3, r2
 8005828:	00db      	lsls	r3, r3, #3
 800582a:	1a9b      	subs	r3, r3, r2
 800582c:	009b      	lsls	r3, r3, #2
 800582e:	440b      	add	r3, r1
 8005830:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8005834:	681b      	ldr	r3, [r3, #0]
}
 8005836:	4618      	mov	r0, r3
 8005838:	370c      	adds	r7, #12
 800583a:	46bd      	mov	sp, r7
 800583c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005840:	4770      	bx	lr

08005842 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005842:	b580      	push	{r7, lr}
 8005844:	b086      	sub	sp, #24
 8005846:	af00      	add	r7, sp, #0
 8005848:	60f8      	str	r0, [r7, #12]
 800584a:	607a      	str	r2, [r7, #4]
 800584c:	603b      	str	r3, [r7, #0]
 800584e:	460b      	mov	r3, r1
 8005850:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005852:	7afb      	ldrb	r3, [r7, #11]
 8005854:	f003 020f 	and.w	r2, r3, #15
 8005858:	4613      	mov	r3, r2
 800585a:	00db      	lsls	r3, r3, #3
 800585c:	1a9b      	subs	r3, r3, r2
 800585e:	009b      	lsls	r3, r3, #2
 8005860:	3338      	adds	r3, #56	; 0x38
 8005862:	68fa      	ldr	r2, [r7, #12]
 8005864:	4413      	add	r3, r2
 8005866:	3304      	adds	r3, #4
 8005868:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800586a:	697b      	ldr	r3, [r7, #20]
 800586c:	687a      	ldr	r2, [r7, #4]
 800586e:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8005870:	697b      	ldr	r3, [r7, #20]
 8005872:	683a      	ldr	r2, [r7, #0]
 8005874:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8005876:	697b      	ldr	r3, [r7, #20]
 8005878:	2200      	movs	r2, #0
 800587a:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 800587c:	697b      	ldr	r3, [r7, #20]
 800587e:	2201      	movs	r2, #1
 8005880:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005882:	7afb      	ldrb	r3, [r7, #11]
 8005884:	f003 030f 	and.w	r3, r3, #15
 8005888:	b2da      	uxtb	r2, r3
 800588a:	697b      	ldr	r3, [r7, #20]
 800588c:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	691b      	ldr	r3, [r3, #16]
 8005892:	2b01      	cmp	r3, #1
 8005894:	d102      	bne.n	800589c <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8005896:	687a      	ldr	r2, [r7, #4]
 8005898:	697b      	ldr	r3, [r7, #20]
 800589a:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800589c:	7afb      	ldrb	r3, [r7, #11]
 800589e:	f003 030f 	and.w	r3, r3, #15
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d109      	bne.n	80058ba <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	6818      	ldr	r0, [r3, #0]
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	691b      	ldr	r3, [r3, #16]
 80058ae:	b2db      	uxtb	r3, r3
 80058b0:	461a      	mov	r2, r3
 80058b2:	6979      	ldr	r1, [r7, #20]
 80058b4:	f005 fd20 	bl	800b2f8 <USB_EP0StartXfer>
 80058b8:	e008      	b.n	80058cc <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	6818      	ldr	r0, [r3, #0]
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	691b      	ldr	r3, [r3, #16]
 80058c2:	b2db      	uxtb	r3, r3
 80058c4:	461a      	mov	r2, r3
 80058c6:	6979      	ldr	r1, [r7, #20]
 80058c8:	f005 fad2 	bl	800ae70 <USB_EPStartXfer>
  }

  return HAL_OK;
 80058cc:	2300      	movs	r3, #0
}
 80058ce:	4618      	mov	r0, r3
 80058d0:	3718      	adds	r7, #24
 80058d2:	46bd      	mov	sp, r7
 80058d4:	bd80      	pop	{r7, pc}

080058d6 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80058d6:	b580      	push	{r7, lr}
 80058d8:	b084      	sub	sp, #16
 80058da:	af00      	add	r7, sp, #0
 80058dc:	6078      	str	r0, [r7, #4]
 80058de:	460b      	mov	r3, r1
 80058e0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80058e2:	78fb      	ldrb	r3, [r7, #3]
 80058e4:	f003 020f 	and.w	r2, r3, #15
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	685b      	ldr	r3, [r3, #4]
 80058ec:	429a      	cmp	r2, r3
 80058ee:	d901      	bls.n	80058f4 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80058f0:	2301      	movs	r3, #1
 80058f2:	e050      	b.n	8005996 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80058f4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	da0f      	bge.n	800591c <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80058fc:	78fb      	ldrb	r3, [r7, #3]
 80058fe:	f003 020f 	and.w	r2, r3, #15
 8005902:	4613      	mov	r3, r2
 8005904:	00db      	lsls	r3, r3, #3
 8005906:	1a9b      	subs	r3, r3, r2
 8005908:	009b      	lsls	r3, r3, #2
 800590a:	3338      	adds	r3, #56	; 0x38
 800590c:	687a      	ldr	r2, [r7, #4]
 800590e:	4413      	add	r3, r2
 8005910:	3304      	adds	r3, #4
 8005912:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	2201      	movs	r2, #1
 8005918:	705a      	strb	r2, [r3, #1]
 800591a:	e00d      	b.n	8005938 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800591c:	78fa      	ldrb	r2, [r7, #3]
 800591e:	4613      	mov	r3, r2
 8005920:	00db      	lsls	r3, r3, #3
 8005922:	1a9b      	subs	r3, r3, r2
 8005924:	009b      	lsls	r3, r3, #2
 8005926:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800592a:	687a      	ldr	r2, [r7, #4]
 800592c:	4413      	add	r3, r2
 800592e:	3304      	adds	r3, #4
 8005930:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	2200      	movs	r2, #0
 8005936:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	2201      	movs	r2, #1
 800593c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800593e:	78fb      	ldrb	r3, [r7, #3]
 8005940:	f003 030f 	and.w	r3, r3, #15
 8005944:	b2da      	uxtb	r2, r3
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8005950:	2b01      	cmp	r3, #1
 8005952:	d101      	bne.n	8005958 <HAL_PCD_EP_SetStall+0x82>
 8005954:	2302      	movs	r3, #2
 8005956:	e01e      	b.n	8005996 <HAL_PCD_EP_SetStall+0xc0>
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	2201      	movs	r2, #1
 800595c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	68f9      	ldr	r1, [r7, #12]
 8005966:	4618      	mov	r0, r3
 8005968:	f005 fe77 	bl	800b65a <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800596c:	78fb      	ldrb	r3, [r7, #3]
 800596e:	f003 030f 	and.w	r3, r3, #15
 8005972:	2b00      	cmp	r3, #0
 8005974:	d10a      	bne.n	800598c <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	6818      	ldr	r0, [r3, #0]
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	691b      	ldr	r3, [r3, #16]
 800597e:	b2d9      	uxtb	r1, r3
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8005986:	461a      	mov	r2, r3
 8005988:	f006 f868 	bl	800ba5c <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	2200      	movs	r2, #0
 8005990:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8005994:	2300      	movs	r3, #0
}
 8005996:	4618      	mov	r0, r3
 8005998:	3710      	adds	r7, #16
 800599a:	46bd      	mov	sp, r7
 800599c:	bd80      	pop	{r7, pc}

0800599e <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800599e:	b580      	push	{r7, lr}
 80059a0:	b084      	sub	sp, #16
 80059a2:	af00      	add	r7, sp, #0
 80059a4:	6078      	str	r0, [r7, #4]
 80059a6:	460b      	mov	r3, r1
 80059a8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80059aa:	78fb      	ldrb	r3, [r7, #3]
 80059ac:	f003 020f 	and.w	r2, r3, #15
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	685b      	ldr	r3, [r3, #4]
 80059b4:	429a      	cmp	r2, r3
 80059b6:	d901      	bls.n	80059bc <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80059b8:	2301      	movs	r3, #1
 80059ba:	e042      	b.n	8005a42 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80059bc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	da0f      	bge.n	80059e4 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80059c4:	78fb      	ldrb	r3, [r7, #3]
 80059c6:	f003 020f 	and.w	r2, r3, #15
 80059ca:	4613      	mov	r3, r2
 80059cc:	00db      	lsls	r3, r3, #3
 80059ce:	1a9b      	subs	r3, r3, r2
 80059d0:	009b      	lsls	r3, r3, #2
 80059d2:	3338      	adds	r3, #56	; 0x38
 80059d4:	687a      	ldr	r2, [r7, #4]
 80059d6:	4413      	add	r3, r2
 80059d8:	3304      	adds	r3, #4
 80059da:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	2201      	movs	r2, #1
 80059e0:	705a      	strb	r2, [r3, #1]
 80059e2:	e00f      	b.n	8005a04 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80059e4:	78fb      	ldrb	r3, [r7, #3]
 80059e6:	f003 020f 	and.w	r2, r3, #15
 80059ea:	4613      	mov	r3, r2
 80059ec:	00db      	lsls	r3, r3, #3
 80059ee:	1a9b      	subs	r3, r3, r2
 80059f0:	009b      	lsls	r3, r3, #2
 80059f2:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80059f6:	687a      	ldr	r2, [r7, #4]
 80059f8:	4413      	add	r3, r2
 80059fa:	3304      	adds	r3, #4
 80059fc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	2200      	movs	r2, #0
 8005a02:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	2200      	movs	r2, #0
 8005a08:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005a0a:	78fb      	ldrb	r3, [r7, #3]
 8005a0c:	f003 030f 	and.w	r3, r3, #15
 8005a10:	b2da      	uxtb	r2, r3
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8005a1c:	2b01      	cmp	r3, #1
 8005a1e:	d101      	bne.n	8005a24 <HAL_PCD_EP_ClrStall+0x86>
 8005a20:	2302      	movs	r3, #2
 8005a22:	e00e      	b.n	8005a42 <HAL_PCD_EP_ClrStall+0xa4>
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	2201      	movs	r2, #1
 8005a28:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	68f9      	ldr	r1, [r7, #12]
 8005a32:	4618      	mov	r0, r3
 8005a34:	f005 fe7f 	bl	800b736 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	2200      	movs	r2, #0
 8005a3c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8005a40:	2300      	movs	r3, #0
}
 8005a42:	4618      	mov	r0, r3
 8005a44:	3710      	adds	r7, #16
 8005a46:	46bd      	mov	sp, r7
 8005a48:	bd80      	pop	{r7, pc}

08005a4a <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005a4a:	b580      	push	{r7, lr}
 8005a4c:	b08a      	sub	sp, #40	; 0x28
 8005a4e:	af02      	add	r7, sp, #8
 8005a50:	6078      	str	r0, [r7, #4]
 8005a52:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a5a:	697b      	ldr	r3, [r7, #20]
 8005a5c:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8005a5e:	683a      	ldr	r2, [r7, #0]
 8005a60:	4613      	mov	r3, r2
 8005a62:	00db      	lsls	r3, r3, #3
 8005a64:	1a9b      	subs	r3, r3, r2
 8005a66:	009b      	lsls	r3, r3, #2
 8005a68:	3338      	adds	r3, #56	; 0x38
 8005a6a:	687a      	ldr	r2, [r7, #4]
 8005a6c:	4413      	add	r3, r2
 8005a6e:	3304      	adds	r3, #4
 8005a70:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	699a      	ldr	r2, [r3, #24]
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	695b      	ldr	r3, [r3, #20]
 8005a7a:	429a      	cmp	r2, r3
 8005a7c:	d901      	bls.n	8005a82 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8005a7e:	2301      	movs	r3, #1
 8005a80:	e06c      	b.n	8005b5c <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	695a      	ldr	r2, [r3, #20]
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	699b      	ldr	r3, [r3, #24]
 8005a8a:	1ad3      	subs	r3, r2, r3
 8005a8c:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	689b      	ldr	r3, [r3, #8]
 8005a92:	69fa      	ldr	r2, [r7, #28]
 8005a94:	429a      	cmp	r2, r3
 8005a96:	d902      	bls.n	8005a9e <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	689b      	ldr	r3, [r3, #8]
 8005a9c:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8005a9e:	69fb      	ldr	r3, [r7, #28]
 8005aa0:	3303      	adds	r3, #3
 8005aa2:	089b      	lsrs	r3, r3, #2
 8005aa4:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005aa6:	e02b      	b.n	8005b00 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	695a      	ldr	r2, [r3, #20]
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	699b      	ldr	r3, [r3, #24]
 8005ab0:	1ad3      	subs	r3, r2, r3
 8005ab2:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	689b      	ldr	r3, [r3, #8]
 8005ab8:	69fa      	ldr	r2, [r7, #28]
 8005aba:	429a      	cmp	r2, r3
 8005abc:	d902      	bls.n	8005ac4 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	689b      	ldr	r3, [r3, #8]
 8005ac2:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8005ac4:	69fb      	ldr	r3, [r7, #28]
 8005ac6:	3303      	adds	r3, #3
 8005ac8:	089b      	lsrs	r3, r3, #2
 8005aca:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	68d9      	ldr	r1, [r3, #12]
 8005ad0:	683b      	ldr	r3, [r7, #0]
 8005ad2:	b2da      	uxtb	r2, r3
 8005ad4:	69fb      	ldr	r3, [r7, #28]
 8005ad6:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8005adc:	b2db      	uxtb	r3, r3
 8005ade:	9300      	str	r3, [sp, #0]
 8005ae0:	4603      	mov	r3, r0
 8005ae2:	6978      	ldr	r0, [r7, #20]
 8005ae4:	f005 fd5b 	bl	800b59e <USB_WritePacket>

    ep->xfer_buff  += len;
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	68da      	ldr	r2, [r3, #12]
 8005aec:	69fb      	ldr	r3, [r7, #28]
 8005aee:	441a      	add	r2, r3
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	699a      	ldr	r2, [r3, #24]
 8005af8:	69fb      	ldr	r3, [r7, #28]
 8005afa:	441a      	add	r2, r3
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005b00:	683b      	ldr	r3, [r7, #0]
 8005b02:	015a      	lsls	r2, r3, #5
 8005b04:	693b      	ldr	r3, [r7, #16]
 8005b06:	4413      	add	r3, r2
 8005b08:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b0c:	699b      	ldr	r3, [r3, #24]
 8005b0e:	b29b      	uxth	r3, r3
 8005b10:	69ba      	ldr	r2, [r7, #24]
 8005b12:	429a      	cmp	r2, r3
 8005b14:	d809      	bhi.n	8005b2a <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	699a      	ldr	r2, [r3, #24]
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005b1e:	429a      	cmp	r2, r3
 8005b20:	d203      	bcs.n	8005b2a <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	695b      	ldr	r3, [r3, #20]
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d1be      	bne.n	8005aa8 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	695a      	ldr	r2, [r3, #20]
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	699b      	ldr	r3, [r3, #24]
 8005b32:	429a      	cmp	r2, r3
 8005b34:	d811      	bhi.n	8005b5a <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8005b36:	683b      	ldr	r3, [r7, #0]
 8005b38:	f003 030f 	and.w	r3, r3, #15
 8005b3c:	2201      	movs	r2, #1
 8005b3e:	fa02 f303 	lsl.w	r3, r2, r3
 8005b42:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8005b44:	693b      	ldr	r3, [r7, #16]
 8005b46:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b4a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005b4c:	68bb      	ldr	r3, [r7, #8]
 8005b4e:	43db      	mvns	r3, r3
 8005b50:	6939      	ldr	r1, [r7, #16]
 8005b52:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005b56:	4013      	ands	r3, r2
 8005b58:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8005b5a:	2300      	movs	r3, #0
}
 8005b5c:	4618      	mov	r0, r3
 8005b5e:	3720      	adds	r7, #32
 8005b60:	46bd      	mov	sp, r7
 8005b62:	bd80      	pop	{r7, pc}

08005b64 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005b64:	b580      	push	{r7, lr}
 8005b66:	b086      	sub	sp, #24
 8005b68:	af00      	add	r7, sp, #0
 8005b6a:	6078      	str	r0, [r7, #4]
 8005b6c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b74:	697b      	ldr	r3, [r7, #20]
 8005b76:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005b78:	697b      	ldr	r3, [r7, #20]
 8005b7a:	333c      	adds	r3, #60	; 0x3c
 8005b7c:	3304      	adds	r3, #4
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8005b82:	683b      	ldr	r3, [r7, #0]
 8005b84:	015a      	lsls	r2, r3, #5
 8005b86:	693b      	ldr	r3, [r7, #16]
 8005b88:	4413      	add	r3, r2
 8005b8a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b8e:	689b      	ldr	r3, [r3, #8]
 8005b90:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	691b      	ldr	r3, [r3, #16]
 8005b96:	2b01      	cmp	r3, #1
 8005b98:	f040 80b3 	bne.w	8005d02 <PCD_EP_OutXfrComplete_int+0x19e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8005b9c:	68bb      	ldr	r3, [r7, #8]
 8005b9e:	f003 0308 	and.w	r3, r3, #8
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d028      	beq.n	8005bf8 <PCD_EP_OutXfrComplete_int+0x94>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	4a70      	ldr	r2, [pc, #448]	; (8005d6c <PCD_EP_OutXfrComplete_int+0x208>)
 8005baa:	4293      	cmp	r3, r2
 8005bac:	d90e      	bls.n	8005bcc <PCD_EP_OutXfrComplete_int+0x68>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005bae:	68bb      	ldr	r3, [r7, #8]
 8005bb0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d009      	beq.n	8005bcc <PCD_EP_OutXfrComplete_int+0x68>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005bb8:	683b      	ldr	r3, [r7, #0]
 8005bba:	015a      	lsls	r2, r3, #5
 8005bbc:	693b      	ldr	r3, [r7, #16]
 8005bbe:	4413      	add	r3, r2
 8005bc0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005bc4:	461a      	mov	r2, r3
 8005bc6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005bca:	6093      	str	r3, [r2, #8]

      /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SetupStageCallback(hpcd);
#else
      HAL_PCD_SetupStageCallback(hpcd);
 8005bcc:	6878      	ldr	r0, [r7, #4]
 8005bce:	f008 f8a1 	bl	800dd14 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	6818      	ldr	r0, [r3, #0]
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8005bdc:	461a      	mov	r2, r3
 8005bde:	2101      	movs	r1, #1
 8005be0:	f005 ff3c 	bl	800ba5c <USB_EP0_OutStart>
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8005be4:	683b      	ldr	r3, [r7, #0]
 8005be6:	015a      	lsls	r2, r3, #5
 8005be8:	693b      	ldr	r3, [r7, #16]
 8005bea:	4413      	add	r3, r2
 8005bec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005bf0:	461a      	mov	r2, r3
 8005bf2:	2308      	movs	r3, #8
 8005bf4:	6093      	str	r3, [r2, #8]
 8005bf6:	e0b3      	b.n	8005d60 <PCD_EP_OutXfrComplete_int+0x1fc>
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8005bf8:	68bb      	ldr	r3, [r7, #8]
 8005bfa:	f003 0320 	and.w	r3, r3, #32
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d009      	beq.n	8005c16 <PCD_EP_OutXfrComplete_int+0xb2>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005c02:	683b      	ldr	r3, [r7, #0]
 8005c04:	015a      	lsls	r2, r3, #5
 8005c06:	693b      	ldr	r3, [r7, #16]
 8005c08:	4413      	add	r3, r2
 8005c0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c0e:	461a      	mov	r2, r3
 8005c10:	2320      	movs	r3, #32
 8005c12:	6093      	str	r3, [r2, #8]
 8005c14:	e0a4      	b.n	8005d60 <PCD_EP_OutXfrComplete_int+0x1fc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8005c16:	68bb      	ldr	r3, [r7, #8]
 8005c18:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	f040 809f 	bne.w	8005d60 <PCD_EP_OutXfrComplete_int+0x1fc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	4a51      	ldr	r2, [pc, #324]	; (8005d6c <PCD_EP_OutXfrComplete_int+0x208>)
 8005c26:	4293      	cmp	r3, r2
 8005c28:	d90f      	bls.n	8005c4a <PCD_EP_OutXfrComplete_int+0xe6>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005c2a:	68bb      	ldr	r3, [r7, #8]
 8005c2c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d00a      	beq.n	8005c4a <PCD_EP_OutXfrComplete_int+0xe6>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005c34:	683b      	ldr	r3, [r7, #0]
 8005c36:	015a      	lsls	r2, r3, #5
 8005c38:	693b      	ldr	r3, [r7, #16]
 8005c3a:	4413      	add	r3, r2
 8005c3c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c40:	461a      	mov	r2, r3
 8005c42:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005c46:	6093      	str	r3, [r2, #8]
 8005c48:	e08a      	b.n	8005d60 <PCD_EP_OutXfrComplete_int+0x1fc>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8005c4a:	6879      	ldr	r1, [r7, #4]
 8005c4c:	683a      	ldr	r2, [r7, #0]
 8005c4e:	4613      	mov	r3, r2
 8005c50:	00db      	lsls	r3, r3, #3
 8005c52:	1a9b      	subs	r3, r3, r2
 8005c54:	009b      	lsls	r3, r3, #2
 8005c56:	440b      	add	r3, r1
 8005c58:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8005c5c:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8005c5e:	683b      	ldr	r3, [r7, #0]
 8005c60:	0159      	lsls	r1, r3, #5
 8005c62:	693b      	ldr	r3, [r7, #16]
 8005c64:	440b      	add	r3, r1
 8005c66:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c6a:	691b      	ldr	r3, [r3, #16]
 8005c6c:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8005c70:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8005c72:	6878      	ldr	r0, [r7, #4]
 8005c74:	683a      	ldr	r2, [r7, #0]
 8005c76:	4613      	mov	r3, r2
 8005c78:	00db      	lsls	r3, r3, #3
 8005c7a:	1a9b      	subs	r3, r3, r2
 8005c7c:	009b      	lsls	r3, r3, #2
 8005c7e:	4403      	add	r3, r0
 8005c80:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8005c84:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8005c86:	6879      	ldr	r1, [r7, #4]
 8005c88:	683a      	ldr	r2, [r7, #0]
 8005c8a:	4613      	mov	r3, r2
 8005c8c:	00db      	lsls	r3, r3, #3
 8005c8e:	1a9b      	subs	r3, r3, r2
 8005c90:	009b      	lsls	r3, r3, #2
 8005c92:	440b      	add	r3, r1
 8005c94:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8005c98:	6819      	ldr	r1, [r3, #0]
 8005c9a:	6878      	ldr	r0, [r7, #4]
 8005c9c:	683a      	ldr	r2, [r7, #0]
 8005c9e:	4613      	mov	r3, r2
 8005ca0:	00db      	lsls	r3, r3, #3
 8005ca2:	1a9b      	subs	r3, r3, r2
 8005ca4:	009b      	lsls	r3, r3, #2
 8005ca6:	4403      	add	r3, r0
 8005ca8:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	4419      	add	r1, r3
 8005cb0:	6878      	ldr	r0, [r7, #4]
 8005cb2:	683a      	ldr	r2, [r7, #0]
 8005cb4:	4613      	mov	r3, r2
 8005cb6:	00db      	lsls	r3, r3, #3
 8005cb8:	1a9b      	subs	r3, r3, r2
 8005cba:	009b      	lsls	r3, r3, #2
 8005cbc:	4403      	add	r3, r0
 8005cbe:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8005cc2:	6019      	str	r1, [r3, #0]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005cc4:	683b      	ldr	r3, [r7, #0]
 8005cc6:	b2db      	uxtb	r3, r3
 8005cc8:	4619      	mov	r1, r3
 8005cca:	6878      	ldr	r0, [r7, #4]
 8005ccc:	f008 f834 	bl	800dd38 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8005cd0:	683b      	ldr	r3, [r7, #0]
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d144      	bne.n	8005d60 <PCD_EP_OutXfrComplete_int+0x1fc>
 8005cd6:	6879      	ldr	r1, [r7, #4]
 8005cd8:	683a      	ldr	r2, [r7, #0]
 8005cda:	4613      	mov	r3, r2
 8005cdc:	00db      	lsls	r3, r3, #3
 8005cde:	1a9b      	subs	r3, r3, r2
 8005ce0:	009b      	lsls	r3, r3, #2
 8005ce2:	440b      	add	r3, r1
 8005ce4:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d138      	bne.n	8005d60 <PCD_EP_OutXfrComplete_int+0x1fc>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	6818      	ldr	r0, [r3, #0]
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8005cf8:	461a      	mov	r2, r3
 8005cfa:	2101      	movs	r1, #1
 8005cfc:	f005 feae 	bl	800ba5c <USB_EP0_OutStart>
 8005d00:	e02e      	b.n	8005d60 <PCD_EP_OutXfrComplete_int+0x1fc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	4a1a      	ldr	r2, [pc, #104]	; (8005d70 <PCD_EP_OutXfrComplete_int+0x20c>)
 8005d06:	4293      	cmp	r3, r2
 8005d08:	d124      	bne.n	8005d54 <PCD_EP_OutXfrComplete_int+0x1f0>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8005d0a:	68bb      	ldr	r3, [r7, #8]
 8005d0c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d00a      	beq.n	8005d2a <PCD_EP_OutXfrComplete_int+0x1c6>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005d14:	683b      	ldr	r3, [r7, #0]
 8005d16:	015a      	lsls	r2, r3, #5
 8005d18:	693b      	ldr	r3, [r7, #16]
 8005d1a:	4413      	add	r3, r2
 8005d1c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d20:	461a      	mov	r2, r3
 8005d22:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005d26:	6093      	str	r3, [r2, #8]
 8005d28:	e01a      	b.n	8005d60 <PCD_EP_OutXfrComplete_int+0x1fc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8005d2a:	68bb      	ldr	r3, [r7, #8]
 8005d2c:	f003 0320 	and.w	r3, r3, #32
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d008      	beq.n	8005d46 <PCD_EP_OutXfrComplete_int+0x1e2>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005d34:	683b      	ldr	r3, [r7, #0]
 8005d36:	015a      	lsls	r2, r3, #5
 8005d38:	693b      	ldr	r3, [r7, #16]
 8005d3a:	4413      	add	r3, r2
 8005d3c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d40:	461a      	mov	r2, r3
 8005d42:	2320      	movs	r3, #32
 8005d44:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005d46:	683b      	ldr	r3, [r7, #0]
 8005d48:	b2db      	uxtb	r3, r3
 8005d4a:	4619      	mov	r1, r3
 8005d4c:	6878      	ldr	r0, [r7, #4]
 8005d4e:	f007 fff3 	bl	800dd38 <HAL_PCD_DataOutStageCallback>
 8005d52:	e005      	b.n	8005d60 <PCD_EP_OutXfrComplete_int+0x1fc>
    else
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005d54:	683b      	ldr	r3, [r7, #0]
 8005d56:	b2db      	uxtb	r3, r3
 8005d58:	4619      	mov	r1, r3
 8005d5a:	6878      	ldr	r0, [r7, #4]
 8005d5c:	f007 ffec 	bl	800dd38 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8005d60:	2300      	movs	r3, #0
}
 8005d62:	4618      	mov	r0, r3
 8005d64:	3718      	adds	r7, #24
 8005d66:	46bd      	mov	sp, r7
 8005d68:	bd80      	pop	{r7, pc}
 8005d6a:	bf00      	nop
 8005d6c:	4f54300a 	.word	0x4f54300a
 8005d70:	4f54310a 	.word	0x4f54310a

08005d74 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005d74:	b580      	push	{r7, lr}
 8005d76:	b086      	sub	sp, #24
 8005d78:	af00      	add	r7, sp, #0
 8005d7a:	6078      	str	r0, [r7, #4]
 8005d7c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d84:	697b      	ldr	r3, [r7, #20]
 8005d86:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005d88:	697b      	ldr	r3, [r7, #20]
 8005d8a:	333c      	adds	r3, #60	; 0x3c
 8005d8c:	3304      	adds	r3, #4
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8005d92:	683b      	ldr	r3, [r7, #0]
 8005d94:	015a      	lsls	r2, r3, #5
 8005d96:	693b      	ldr	r3, [r7, #16]
 8005d98:	4413      	add	r3, r2
 8005d9a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d9e:	689b      	ldr	r3, [r3, #8]
 8005da0:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	691b      	ldr	r3, [r3, #16]
 8005da6:	2b01      	cmp	r3, #1
 8005da8:	d113      	bne.n	8005dd2 <PCD_EP_OutSetupPacket_int+0x5e>
  {
    /* StupPktRcvd = 1 pending setup packet int */
    if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	4a1f      	ldr	r2, [pc, #124]	; (8005e2c <PCD_EP_OutSetupPacket_int+0xb8>)
 8005dae:	4293      	cmp	r3, r2
 8005db0:	d922      	bls.n	8005df8 <PCD_EP_OutSetupPacket_int+0x84>
        ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005db2:	68bb      	ldr	r3, [r7, #8]
 8005db4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
    if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d01d      	beq.n	8005df8 <PCD_EP_OutSetupPacket_int+0x84>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005dbc:	683b      	ldr	r3, [r7, #0]
 8005dbe:	015a      	lsls	r2, r3, #5
 8005dc0:	693b      	ldr	r3, [r7, #16]
 8005dc2:	4413      	add	r3, r2
 8005dc4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005dc8:	461a      	mov	r2, r3
 8005dca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005dce:	6093      	str	r3, [r2, #8]
 8005dd0:	e012      	b.n	8005df8 <PCD_EP_OutSetupPacket_int+0x84>
    }
  }
  else
  {
    if ((gSNPSiD == USB_OTG_CORE_ID_310A) &&
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	4a16      	ldr	r2, [pc, #88]	; (8005e30 <PCD_EP_OutSetupPacket_int+0xbc>)
 8005dd6:	4293      	cmp	r3, r2
 8005dd8:	d10e      	bne.n	8005df8 <PCD_EP_OutSetupPacket_int+0x84>
        ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005dda:	68bb      	ldr	r3, [r7, #8]
 8005ddc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
    if ((gSNPSiD == USB_OTG_CORE_ID_310A) &&
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d009      	beq.n	8005df8 <PCD_EP_OutSetupPacket_int+0x84>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005de4:	683b      	ldr	r3, [r7, #0]
 8005de6:	015a      	lsls	r2, r3, #5
 8005de8:	693b      	ldr	r3, [r7, #16]
 8005dea:	4413      	add	r3, r2
 8005dec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005df0:	461a      	mov	r2, r3
 8005df2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005df6:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8005df8:	6878      	ldr	r0, [r7, #4]
 8005dfa:	f007 ff8b 	bl	800dd14 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	4a0a      	ldr	r2, [pc, #40]	; (8005e2c <PCD_EP_OutSetupPacket_int+0xb8>)
 8005e02:	4293      	cmp	r3, r2
 8005e04:	d90c      	bls.n	8005e20 <PCD_EP_OutSetupPacket_int+0xac>
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	691b      	ldr	r3, [r3, #16]
 8005e0a:	2b01      	cmp	r3, #1
 8005e0c:	d108      	bne.n	8005e20 <PCD_EP_OutSetupPacket_int+0xac>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	6818      	ldr	r0, [r3, #0]
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8005e18:	461a      	mov	r2, r3
 8005e1a:	2101      	movs	r1, #1
 8005e1c:	f005 fe1e 	bl	800ba5c <USB_EP0_OutStart>
  }

  return HAL_OK;
 8005e20:	2300      	movs	r3, #0
}
 8005e22:	4618      	mov	r0, r3
 8005e24:	3718      	adds	r7, #24
 8005e26:	46bd      	mov	sp, r7
 8005e28:	bd80      	pop	{r7, pc}
 8005e2a:	bf00      	nop
 8005e2c:	4f54300a 	.word	0x4f54300a
 8005e30:	4f54310a 	.word	0x4f54310a

08005e34 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8005e34:	b480      	push	{r7}
 8005e36:	b085      	sub	sp, #20
 8005e38:	af00      	add	r7, sp, #0
 8005e3a:	6078      	str	r0, [r7, #4]
 8005e3c:	460b      	mov	r3, r1
 8005e3e:	70fb      	strb	r3, [r7, #3]
 8005e40:	4613      	mov	r3, r2
 8005e42:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e4a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8005e4c:	78fb      	ldrb	r3, [r7, #3]
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d107      	bne.n	8005e62 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8005e52:	883b      	ldrh	r3, [r7, #0]
 8005e54:	0419      	lsls	r1, r3, #16
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	68ba      	ldr	r2, [r7, #8]
 8005e5c:	430a      	orrs	r2, r1
 8005e5e:	629a      	str	r2, [r3, #40]	; 0x28
 8005e60:	e028      	b.n	8005eb4 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e68:	0c1b      	lsrs	r3, r3, #16
 8005e6a:	68ba      	ldr	r2, [r7, #8]
 8005e6c:	4413      	add	r3, r2
 8005e6e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8005e70:	2300      	movs	r3, #0
 8005e72:	73fb      	strb	r3, [r7, #15]
 8005e74:	e00d      	b.n	8005e92 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	681a      	ldr	r2, [r3, #0]
 8005e7a:	7bfb      	ldrb	r3, [r7, #15]
 8005e7c:	3340      	adds	r3, #64	; 0x40
 8005e7e:	009b      	lsls	r3, r3, #2
 8005e80:	4413      	add	r3, r2
 8005e82:	685b      	ldr	r3, [r3, #4]
 8005e84:	0c1b      	lsrs	r3, r3, #16
 8005e86:	68ba      	ldr	r2, [r7, #8]
 8005e88:	4413      	add	r3, r2
 8005e8a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8005e8c:	7bfb      	ldrb	r3, [r7, #15]
 8005e8e:	3301      	adds	r3, #1
 8005e90:	73fb      	strb	r3, [r7, #15]
 8005e92:	7bfa      	ldrb	r2, [r7, #15]
 8005e94:	78fb      	ldrb	r3, [r7, #3]
 8005e96:	3b01      	subs	r3, #1
 8005e98:	429a      	cmp	r2, r3
 8005e9a:	d3ec      	bcc.n	8005e76 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8005e9c:	883b      	ldrh	r3, [r7, #0]
 8005e9e:	0418      	lsls	r0, r3, #16
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	6819      	ldr	r1, [r3, #0]
 8005ea4:	78fb      	ldrb	r3, [r7, #3]
 8005ea6:	3b01      	subs	r3, #1
 8005ea8:	68ba      	ldr	r2, [r7, #8]
 8005eaa:	4302      	orrs	r2, r0
 8005eac:	3340      	adds	r3, #64	; 0x40
 8005eae:	009b      	lsls	r3, r3, #2
 8005eb0:	440b      	add	r3, r1
 8005eb2:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8005eb4:	2300      	movs	r3, #0
}
 8005eb6:	4618      	mov	r0, r3
 8005eb8:	3714      	adds	r7, #20
 8005eba:	46bd      	mov	sp, r7
 8005ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec0:	4770      	bx	lr

08005ec2 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8005ec2:	b480      	push	{r7}
 8005ec4:	b083      	sub	sp, #12
 8005ec6:	af00      	add	r7, sp, #0
 8005ec8:	6078      	str	r0, [r7, #4]
 8005eca:	460b      	mov	r3, r1
 8005ecc:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	887a      	ldrh	r2, [r7, #2]
 8005ed4:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8005ed6:	2300      	movs	r3, #0
}
 8005ed8:	4618      	mov	r0, r3
 8005eda:	370c      	adds	r7, #12
 8005edc:	46bd      	mov	sp, r7
 8005ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ee2:	4770      	bx	lr

08005ee4 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8005ee4:	b480      	push	{r7}
 8005ee6:	b083      	sub	sp, #12
 8005ee8:	af00      	add	r7, sp, #0
 8005eea:	6078      	str	r0, [r7, #4]
 8005eec:	460b      	mov	r3, r1
 8005eee:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8005ef0:	bf00      	nop
 8005ef2:	370c      	adds	r7, #12
 8005ef4:	46bd      	mov	sp, r7
 8005ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005efa:	4770      	bx	lr

08005efc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005efc:	b580      	push	{r7, lr}
 8005efe:	b086      	sub	sp, #24
 8005f00:	af00      	add	r7, sp, #0
 8005f02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d101      	bne.n	8005f0e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005f0a:	2301      	movs	r3, #1
 8005f0c:	e25b      	b.n	80063c6 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	f003 0301 	and.w	r3, r3, #1
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d075      	beq.n	8006006 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005f1a:	4ba3      	ldr	r3, [pc, #652]	; (80061a8 <HAL_RCC_OscConfig+0x2ac>)
 8005f1c:	689b      	ldr	r3, [r3, #8]
 8005f1e:	f003 030c 	and.w	r3, r3, #12
 8005f22:	2b04      	cmp	r3, #4
 8005f24:	d00c      	beq.n	8005f40 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005f26:	4ba0      	ldr	r3, [pc, #640]	; (80061a8 <HAL_RCC_OscConfig+0x2ac>)
 8005f28:	689b      	ldr	r3, [r3, #8]
 8005f2a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005f2e:	2b08      	cmp	r3, #8
 8005f30:	d112      	bne.n	8005f58 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005f32:	4b9d      	ldr	r3, [pc, #628]	; (80061a8 <HAL_RCC_OscConfig+0x2ac>)
 8005f34:	685b      	ldr	r3, [r3, #4]
 8005f36:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005f3a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005f3e:	d10b      	bne.n	8005f58 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005f40:	4b99      	ldr	r3, [pc, #612]	; (80061a8 <HAL_RCC_OscConfig+0x2ac>)
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d05b      	beq.n	8006004 <HAL_RCC_OscConfig+0x108>
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	685b      	ldr	r3, [r3, #4]
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d157      	bne.n	8006004 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005f54:	2301      	movs	r3, #1
 8005f56:	e236      	b.n	80063c6 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	685b      	ldr	r3, [r3, #4]
 8005f5c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005f60:	d106      	bne.n	8005f70 <HAL_RCC_OscConfig+0x74>
 8005f62:	4b91      	ldr	r3, [pc, #580]	; (80061a8 <HAL_RCC_OscConfig+0x2ac>)
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	4a90      	ldr	r2, [pc, #576]	; (80061a8 <HAL_RCC_OscConfig+0x2ac>)
 8005f68:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005f6c:	6013      	str	r3, [r2, #0]
 8005f6e:	e01d      	b.n	8005fac <HAL_RCC_OscConfig+0xb0>
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	685b      	ldr	r3, [r3, #4]
 8005f74:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005f78:	d10c      	bne.n	8005f94 <HAL_RCC_OscConfig+0x98>
 8005f7a:	4b8b      	ldr	r3, [pc, #556]	; (80061a8 <HAL_RCC_OscConfig+0x2ac>)
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	4a8a      	ldr	r2, [pc, #552]	; (80061a8 <HAL_RCC_OscConfig+0x2ac>)
 8005f80:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005f84:	6013      	str	r3, [r2, #0]
 8005f86:	4b88      	ldr	r3, [pc, #544]	; (80061a8 <HAL_RCC_OscConfig+0x2ac>)
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	4a87      	ldr	r2, [pc, #540]	; (80061a8 <HAL_RCC_OscConfig+0x2ac>)
 8005f8c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005f90:	6013      	str	r3, [r2, #0]
 8005f92:	e00b      	b.n	8005fac <HAL_RCC_OscConfig+0xb0>
 8005f94:	4b84      	ldr	r3, [pc, #528]	; (80061a8 <HAL_RCC_OscConfig+0x2ac>)
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	4a83      	ldr	r2, [pc, #524]	; (80061a8 <HAL_RCC_OscConfig+0x2ac>)
 8005f9a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005f9e:	6013      	str	r3, [r2, #0]
 8005fa0:	4b81      	ldr	r3, [pc, #516]	; (80061a8 <HAL_RCC_OscConfig+0x2ac>)
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	4a80      	ldr	r2, [pc, #512]	; (80061a8 <HAL_RCC_OscConfig+0x2ac>)
 8005fa6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005faa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	685b      	ldr	r3, [r3, #4]
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d013      	beq.n	8005fdc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005fb4:	f7fd fe14 	bl	8003be0 <HAL_GetTick>
 8005fb8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005fba:	e008      	b.n	8005fce <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005fbc:	f7fd fe10 	bl	8003be0 <HAL_GetTick>
 8005fc0:	4602      	mov	r2, r0
 8005fc2:	693b      	ldr	r3, [r7, #16]
 8005fc4:	1ad3      	subs	r3, r2, r3
 8005fc6:	2b64      	cmp	r3, #100	; 0x64
 8005fc8:	d901      	bls.n	8005fce <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005fca:	2303      	movs	r3, #3
 8005fcc:	e1fb      	b.n	80063c6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005fce:	4b76      	ldr	r3, [pc, #472]	; (80061a8 <HAL_RCC_OscConfig+0x2ac>)
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d0f0      	beq.n	8005fbc <HAL_RCC_OscConfig+0xc0>
 8005fda:	e014      	b.n	8006006 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005fdc:	f7fd fe00 	bl	8003be0 <HAL_GetTick>
 8005fe0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005fe2:	e008      	b.n	8005ff6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005fe4:	f7fd fdfc 	bl	8003be0 <HAL_GetTick>
 8005fe8:	4602      	mov	r2, r0
 8005fea:	693b      	ldr	r3, [r7, #16]
 8005fec:	1ad3      	subs	r3, r2, r3
 8005fee:	2b64      	cmp	r3, #100	; 0x64
 8005ff0:	d901      	bls.n	8005ff6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005ff2:	2303      	movs	r3, #3
 8005ff4:	e1e7      	b.n	80063c6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005ff6:	4b6c      	ldr	r3, [pc, #432]	; (80061a8 <HAL_RCC_OscConfig+0x2ac>)
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d1f0      	bne.n	8005fe4 <HAL_RCC_OscConfig+0xe8>
 8006002:	e000      	b.n	8006006 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006004:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	f003 0302 	and.w	r3, r3, #2
 800600e:	2b00      	cmp	r3, #0
 8006010:	d063      	beq.n	80060da <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006012:	4b65      	ldr	r3, [pc, #404]	; (80061a8 <HAL_RCC_OscConfig+0x2ac>)
 8006014:	689b      	ldr	r3, [r3, #8]
 8006016:	f003 030c 	and.w	r3, r3, #12
 800601a:	2b00      	cmp	r3, #0
 800601c:	d00b      	beq.n	8006036 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800601e:	4b62      	ldr	r3, [pc, #392]	; (80061a8 <HAL_RCC_OscConfig+0x2ac>)
 8006020:	689b      	ldr	r3, [r3, #8]
 8006022:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006026:	2b08      	cmp	r3, #8
 8006028:	d11c      	bne.n	8006064 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800602a:	4b5f      	ldr	r3, [pc, #380]	; (80061a8 <HAL_RCC_OscConfig+0x2ac>)
 800602c:	685b      	ldr	r3, [r3, #4]
 800602e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006032:	2b00      	cmp	r3, #0
 8006034:	d116      	bne.n	8006064 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006036:	4b5c      	ldr	r3, [pc, #368]	; (80061a8 <HAL_RCC_OscConfig+0x2ac>)
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	f003 0302 	and.w	r3, r3, #2
 800603e:	2b00      	cmp	r3, #0
 8006040:	d005      	beq.n	800604e <HAL_RCC_OscConfig+0x152>
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	68db      	ldr	r3, [r3, #12]
 8006046:	2b01      	cmp	r3, #1
 8006048:	d001      	beq.n	800604e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800604a:	2301      	movs	r3, #1
 800604c:	e1bb      	b.n	80063c6 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800604e:	4b56      	ldr	r3, [pc, #344]	; (80061a8 <HAL_RCC_OscConfig+0x2ac>)
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	691b      	ldr	r3, [r3, #16]
 800605a:	00db      	lsls	r3, r3, #3
 800605c:	4952      	ldr	r1, [pc, #328]	; (80061a8 <HAL_RCC_OscConfig+0x2ac>)
 800605e:	4313      	orrs	r3, r2
 8006060:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006062:	e03a      	b.n	80060da <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	68db      	ldr	r3, [r3, #12]
 8006068:	2b00      	cmp	r3, #0
 800606a:	d020      	beq.n	80060ae <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800606c:	4b4f      	ldr	r3, [pc, #316]	; (80061ac <HAL_RCC_OscConfig+0x2b0>)
 800606e:	2201      	movs	r2, #1
 8006070:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006072:	f7fd fdb5 	bl	8003be0 <HAL_GetTick>
 8006076:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006078:	e008      	b.n	800608c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800607a:	f7fd fdb1 	bl	8003be0 <HAL_GetTick>
 800607e:	4602      	mov	r2, r0
 8006080:	693b      	ldr	r3, [r7, #16]
 8006082:	1ad3      	subs	r3, r2, r3
 8006084:	2b02      	cmp	r3, #2
 8006086:	d901      	bls.n	800608c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006088:	2303      	movs	r3, #3
 800608a:	e19c      	b.n	80063c6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800608c:	4b46      	ldr	r3, [pc, #280]	; (80061a8 <HAL_RCC_OscConfig+0x2ac>)
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	f003 0302 	and.w	r3, r3, #2
 8006094:	2b00      	cmp	r3, #0
 8006096:	d0f0      	beq.n	800607a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006098:	4b43      	ldr	r3, [pc, #268]	; (80061a8 <HAL_RCC_OscConfig+0x2ac>)
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	691b      	ldr	r3, [r3, #16]
 80060a4:	00db      	lsls	r3, r3, #3
 80060a6:	4940      	ldr	r1, [pc, #256]	; (80061a8 <HAL_RCC_OscConfig+0x2ac>)
 80060a8:	4313      	orrs	r3, r2
 80060aa:	600b      	str	r3, [r1, #0]
 80060ac:	e015      	b.n	80060da <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80060ae:	4b3f      	ldr	r3, [pc, #252]	; (80061ac <HAL_RCC_OscConfig+0x2b0>)
 80060b0:	2200      	movs	r2, #0
 80060b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80060b4:	f7fd fd94 	bl	8003be0 <HAL_GetTick>
 80060b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80060ba:	e008      	b.n	80060ce <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80060bc:	f7fd fd90 	bl	8003be0 <HAL_GetTick>
 80060c0:	4602      	mov	r2, r0
 80060c2:	693b      	ldr	r3, [r7, #16]
 80060c4:	1ad3      	subs	r3, r2, r3
 80060c6:	2b02      	cmp	r3, #2
 80060c8:	d901      	bls.n	80060ce <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80060ca:	2303      	movs	r3, #3
 80060cc:	e17b      	b.n	80063c6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80060ce:	4b36      	ldr	r3, [pc, #216]	; (80061a8 <HAL_RCC_OscConfig+0x2ac>)
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	f003 0302 	and.w	r3, r3, #2
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d1f0      	bne.n	80060bc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	f003 0308 	and.w	r3, r3, #8
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d030      	beq.n	8006148 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	695b      	ldr	r3, [r3, #20]
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d016      	beq.n	800611c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80060ee:	4b30      	ldr	r3, [pc, #192]	; (80061b0 <HAL_RCC_OscConfig+0x2b4>)
 80060f0:	2201      	movs	r2, #1
 80060f2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80060f4:	f7fd fd74 	bl	8003be0 <HAL_GetTick>
 80060f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80060fa:	e008      	b.n	800610e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80060fc:	f7fd fd70 	bl	8003be0 <HAL_GetTick>
 8006100:	4602      	mov	r2, r0
 8006102:	693b      	ldr	r3, [r7, #16]
 8006104:	1ad3      	subs	r3, r2, r3
 8006106:	2b02      	cmp	r3, #2
 8006108:	d901      	bls.n	800610e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800610a:	2303      	movs	r3, #3
 800610c:	e15b      	b.n	80063c6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800610e:	4b26      	ldr	r3, [pc, #152]	; (80061a8 <HAL_RCC_OscConfig+0x2ac>)
 8006110:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006112:	f003 0302 	and.w	r3, r3, #2
 8006116:	2b00      	cmp	r3, #0
 8006118:	d0f0      	beq.n	80060fc <HAL_RCC_OscConfig+0x200>
 800611a:	e015      	b.n	8006148 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800611c:	4b24      	ldr	r3, [pc, #144]	; (80061b0 <HAL_RCC_OscConfig+0x2b4>)
 800611e:	2200      	movs	r2, #0
 8006120:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006122:	f7fd fd5d 	bl	8003be0 <HAL_GetTick>
 8006126:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006128:	e008      	b.n	800613c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800612a:	f7fd fd59 	bl	8003be0 <HAL_GetTick>
 800612e:	4602      	mov	r2, r0
 8006130:	693b      	ldr	r3, [r7, #16]
 8006132:	1ad3      	subs	r3, r2, r3
 8006134:	2b02      	cmp	r3, #2
 8006136:	d901      	bls.n	800613c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8006138:	2303      	movs	r3, #3
 800613a:	e144      	b.n	80063c6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800613c:	4b1a      	ldr	r3, [pc, #104]	; (80061a8 <HAL_RCC_OscConfig+0x2ac>)
 800613e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006140:	f003 0302 	and.w	r3, r3, #2
 8006144:	2b00      	cmp	r3, #0
 8006146:	d1f0      	bne.n	800612a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	f003 0304 	and.w	r3, r3, #4
 8006150:	2b00      	cmp	r3, #0
 8006152:	f000 80a0 	beq.w	8006296 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006156:	2300      	movs	r3, #0
 8006158:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800615a:	4b13      	ldr	r3, [pc, #76]	; (80061a8 <HAL_RCC_OscConfig+0x2ac>)
 800615c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800615e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006162:	2b00      	cmp	r3, #0
 8006164:	d10f      	bne.n	8006186 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006166:	2300      	movs	r3, #0
 8006168:	60bb      	str	r3, [r7, #8]
 800616a:	4b0f      	ldr	r3, [pc, #60]	; (80061a8 <HAL_RCC_OscConfig+0x2ac>)
 800616c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800616e:	4a0e      	ldr	r2, [pc, #56]	; (80061a8 <HAL_RCC_OscConfig+0x2ac>)
 8006170:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006174:	6413      	str	r3, [r2, #64]	; 0x40
 8006176:	4b0c      	ldr	r3, [pc, #48]	; (80061a8 <HAL_RCC_OscConfig+0x2ac>)
 8006178:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800617a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800617e:	60bb      	str	r3, [r7, #8]
 8006180:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006182:	2301      	movs	r3, #1
 8006184:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006186:	4b0b      	ldr	r3, [pc, #44]	; (80061b4 <HAL_RCC_OscConfig+0x2b8>)
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800618e:	2b00      	cmp	r3, #0
 8006190:	d121      	bne.n	80061d6 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006192:	4b08      	ldr	r3, [pc, #32]	; (80061b4 <HAL_RCC_OscConfig+0x2b8>)
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	4a07      	ldr	r2, [pc, #28]	; (80061b4 <HAL_RCC_OscConfig+0x2b8>)
 8006198:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800619c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800619e:	f7fd fd1f 	bl	8003be0 <HAL_GetTick>
 80061a2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80061a4:	e011      	b.n	80061ca <HAL_RCC_OscConfig+0x2ce>
 80061a6:	bf00      	nop
 80061a8:	40023800 	.word	0x40023800
 80061ac:	42470000 	.word	0x42470000
 80061b0:	42470e80 	.word	0x42470e80
 80061b4:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80061b8:	f7fd fd12 	bl	8003be0 <HAL_GetTick>
 80061bc:	4602      	mov	r2, r0
 80061be:	693b      	ldr	r3, [r7, #16]
 80061c0:	1ad3      	subs	r3, r2, r3
 80061c2:	2b02      	cmp	r3, #2
 80061c4:	d901      	bls.n	80061ca <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80061c6:	2303      	movs	r3, #3
 80061c8:	e0fd      	b.n	80063c6 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80061ca:	4b81      	ldr	r3, [pc, #516]	; (80063d0 <HAL_RCC_OscConfig+0x4d4>)
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d0f0      	beq.n	80061b8 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	689b      	ldr	r3, [r3, #8]
 80061da:	2b01      	cmp	r3, #1
 80061dc:	d106      	bne.n	80061ec <HAL_RCC_OscConfig+0x2f0>
 80061de:	4b7d      	ldr	r3, [pc, #500]	; (80063d4 <HAL_RCC_OscConfig+0x4d8>)
 80061e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80061e2:	4a7c      	ldr	r2, [pc, #496]	; (80063d4 <HAL_RCC_OscConfig+0x4d8>)
 80061e4:	f043 0301 	orr.w	r3, r3, #1
 80061e8:	6713      	str	r3, [r2, #112]	; 0x70
 80061ea:	e01c      	b.n	8006226 <HAL_RCC_OscConfig+0x32a>
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	689b      	ldr	r3, [r3, #8]
 80061f0:	2b05      	cmp	r3, #5
 80061f2:	d10c      	bne.n	800620e <HAL_RCC_OscConfig+0x312>
 80061f4:	4b77      	ldr	r3, [pc, #476]	; (80063d4 <HAL_RCC_OscConfig+0x4d8>)
 80061f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80061f8:	4a76      	ldr	r2, [pc, #472]	; (80063d4 <HAL_RCC_OscConfig+0x4d8>)
 80061fa:	f043 0304 	orr.w	r3, r3, #4
 80061fe:	6713      	str	r3, [r2, #112]	; 0x70
 8006200:	4b74      	ldr	r3, [pc, #464]	; (80063d4 <HAL_RCC_OscConfig+0x4d8>)
 8006202:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006204:	4a73      	ldr	r2, [pc, #460]	; (80063d4 <HAL_RCC_OscConfig+0x4d8>)
 8006206:	f043 0301 	orr.w	r3, r3, #1
 800620a:	6713      	str	r3, [r2, #112]	; 0x70
 800620c:	e00b      	b.n	8006226 <HAL_RCC_OscConfig+0x32a>
 800620e:	4b71      	ldr	r3, [pc, #452]	; (80063d4 <HAL_RCC_OscConfig+0x4d8>)
 8006210:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006212:	4a70      	ldr	r2, [pc, #448]	; (80063d4 <HAL_RCC_OscConfig+0x4d8>)
 8006214:	f023 0301 	bic.w	r3, r3, #1
 8006218:	6713      	str	r3, [r2, #112]	; 0x70
 800621a:	4b6e      	ldr	r3, [pc, #440]	; (80063d4 <HAL_RCC_OscConfig+0x4d8>)
 800621c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800621e:	4a6d      	ldr	r2, [pc, #436]	; (80063d4 <HAL_RCC_OscConfig+0x4d8>)
 8006220:	f023 0304 	bic.w	r3, r3, #4
 8006224:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	689b      	ldr	r3, [r3, #8]
 800622a:	2b00      	cmp	r3, #0
 800622c:	d015      	beq.n	800625a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800622e:	f7fd fcd7 	bl	8003be0 <HAL_GetTick>
 8006232:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006234:	e00a      	b.n	800624c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006236:	f7fd fcd3 	bl	8003be0 <HAL_GetTick>
 800623a:	4602      	mov	r2, r0
 800623c:	693b      	ldr	r3, [r7, #16]
 800623e:	1ad3      	subs	r3, r2, r3
 8006240:	f241 3288 	movw	r2, #5000	; 0x1388
 8006244:	4293      	cmp	r3, r2
 8006246:	d901      	bls.n	800624c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8006248:	2303      	movs	r3, #3
 800624a:	e0bc      	b.n	80063c6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800624c:	4b61      	ldr	r3, [pc, #388]	; (80063d4 <HAL_RCC_OscConfig+0x4d8>)
 800624e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006250:	f003 0302 	and.w	r3, r3, #2
 8006254:	2b00      	cmp	r3, #0
 8006256:	d0ee      	beq.n	8006236 <HAL_RCC_OscConfig+0x33a>
 8006258:	e014      	b.n	8006284 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800625a:	f7fd fcc1 	bl	8003be0 <HAL_GetTick>
 800625e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006260:	e00a      	b.n	8006278 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006262:	f7fd fcbd 	bl	8003be0 <HAL_GetTick>
 8006266:	4602      	mov	r2, r0
 8006268:	693b      	ldr	r3, [r7, #16]
 800626a:	1ad3      	subs	r3, r2, r3
 800626c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006270:	4293      	cmp	r3, r2
 8006272:	d901      	bls.n	8006278 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8006274:	2303      	movs	r3, #3
 8006276:	e0a6      	b.n	80063c6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006278:	4b56      	ldr	r3, [pc, #344]	; (80063d4 <HAL_RCC_OscConfig+0x4d8>)
 800627a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800627c:	f003 0302 	and.w	r3, r3, #2
 8006280:	2b00      	cmp	r3, #0
 8006282:	d1ee      	bne.n	8006262 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006284:	7dfb      	ldrb	r3, [r7, #23]
 8006286:	2b01      	cmp	r3, #1
 8006288:	d105      	bne.n	8006296 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800628a:	4b52      	ldr	r3, [pc, #328]	; (80063d4 <HAL_RCC_OscConfig+0x4d8>)
 800628c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800628e:	4a51      	ldr	r2, [pc, #324]	; (80063d4 <HAL_RCC_OscConfig+0x4d8>)
 8006290:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006294:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	699b      	ldr	r3, [r3, #24]
 800629a:	2b00      	cmp	r3, #0
 800629c:	f000 8092 	beq.w	80063c4 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80062a0:	4b4c      	ldr	r3, [pc, #304]	; (80063d4 <HAL_RCC_OscConfig+0x4d8>)
 80062a2:	689b      	ldr	r3, [r3, #8]
 80062a4:	f003 030c 	and.w	r3, r3, #12
 80062a8:	2b08      	cmp	r3, #8
 80062aa:	d05c      	beq.n	8006366 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	699b      	ldr	r3, [r3, #24]
 80062b0:	2b02      	cmp	r3, #2
 80062b2:	d141      	bne.n	8006338 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80062b4:	4b48      	ldr	r3, [pc, #288]	; (80063d8 <HAL_RCC_OscConfig+0x4dc>)
 80062b6:	2200      	movs	r2, #0
 80062b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80062ba:	f7fd fc91 	bl	8003be0 <HAL_GetTick>
 80062be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80062c0:	e008      	b.n	80062d4 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80062c2:	f7fd fc8d 	bl	8003be0 <HAL_GetTick>
 80062c6:	4602      	mov	r2, r0
 80062c8:	693b      	ldr	r3, [r7, #16]
 80062ca:	1ad3      	subs	r3, r2, r3
 80062cc:	2b02      	cmp	r3, #2
 80062ce:	d901      	bls.n	80062d4 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80062d0:	2303      	movs	r3, #3
 80062d2:	e078      	b.n	80063c6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80062d4:	4b3f      	ldr	r3, [pc, #252]	; (80063d4 <HAL_RCC_OscConfig+0x4d8>)
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d1f0      	bne.n	80062c2 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	69da      	ldr	r2, [r3, #28]
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	6a1b      	ldr	r3, [r3, #32]
 80062e8:	431a      	orrs	r2, r3
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062ee:	019b      	lsls	r3, r3, #6
 80062f0:	431a      	orrs	r2, r3
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062f6:	085b      	lsrs	r3, r3, #1
 80062f8:	3b01      	subs	r3, #1
 80062fa:	041b      	lsls	r3, r3, #16
 80062fc:	431a      	orrs	r2, r3
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006302:	061b      	lsls	r3, r3, #24
 8006304:	4933      	ldr	r1, [pc, #204]	; (80063d4 <HAL_RCC_OscConfig+0x4d8>)
 8006306:	4313      	orrs	r3, r2
 8006308:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800630a:	4b33      	ldr	r3, [pc, #204]	; (80063d8 <HAL_RCC_OscConfig+0x4dc>)
 800630c:	2201      	movs	r2, #1
 800630e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006310:	f7fd fc66 	bl	8003be0 <HAL_GetTick>
 8006314:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006316:	e008      	b.n	800632a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006318:	f7fd fc62 	bl	8003be0 <HAL_GetTick>
 800631c:	4602      	mov	r2, r0
 800631e:	693b      	ldr	r3, [r7, #16]
 8006320:	1ad3      	subs	r3, r2, r3
 8006322:	2b02      	cmp	r3, #2
 8006324:	d901      	bls.n	800632a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8006326:	2303      	movs	r3, #3
 8006328:	e04d      	b.n	80063c6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800632a:	4b2a      	ldr	r3, [pc, #168]	; (80063d4 <HAL_RCC_OscConfig+0x4d8>)
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006332:	2b00      	cmp	r3, #0
 8006334:	d0f0      	beq.n	8006318 <HAL_RCC_OscConfig+0x41c>
 8006336:	e045      	b.n	80063c4 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006338:	4b27      	ldr	r3, [pc, #156]	; (80063d8 <HAL_RCC_OscConfig+0x4dc>)
 800633a:	2200      	movs	r2, #0
 800633c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800633e:	f7fd fc4f 	bl	8003be0 <HAL_GetTick>
 8006342:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006344:	e008      	b.n	8006358 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006346:	f7fd fc4b 	bl	8003be0 <HAL_GetTick>
 800634a:	4602      	mov	r2, r0
 800634c:	693b      	ldr	r3, [r7, #16]
 800634e:	1ad3      	subs	r3, r2, r3
 8006350:	2b02      	cmp	r3, #2
 8006352:	d901      	bls.n	8006358 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8006354:	2303      	movs	r3, #3
 8006356:	e036      	b.n	80063c6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006358:	4b1e      	ldr	r3, [pc, #120]	; (80063d4 <HAL_RCC_OscConfig+0x4d8>)
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006360:	2b00      	cmp	r3, #0
 8006362:	d1f0      	bne.n	8006346 <HAL_RCC_OscConfig+0x44a>
 8006364:	e02e      	b.n	80063c4 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	699b      	ldr	r3, [r3, #24]
 800636a:	2b01      	cmp	r3, #1
 800636c:	d101      	bne.n	8006372 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800636e:	2301      	movs	r3, #1
 8006370:	e029      	b.n	80063c6 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8006372:	4b18      	ldr	r3, [pc, #96]	; (80063d4 <HAL_RCC_OscConfig+0x4d8>)
 8006374:	689b      	ldr	r3, [r3, #8]
 8006376:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	69db      	ldr	r3, [r3, #28]
 8006382:	429a      	cmp	r2, r3
 8006384:	d11c      	bne.n	80063c0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006390:	429a      	cmp	r2, r3
 8006392:	d115      	bne.n	80063c0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8006394:	68fa      	ldr	r2, [r7, #12]
 8006396:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800639a:	4013      	ands	r3, r2
 800639c:	687a      	ldr	r2, [r7, #4]
 800639e:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80063a0:	4293      	cmp	r3, r2
 80063a2:	d10d      	bne.n	80063c0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80063ae:	429a      	cmp	r2, r3
 80063b0:	d106      	bne.n	80063c0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80063bc:	429a      	cmp	r2, r3
 80063be:	d001      	beq.n	80063c4 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 80063c0:	2301      	movs	r3, #1
 80063c2:	e000      	b.n	80063c6 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 80063c4:	2300      	movs	r3, #0
}
 80063c6:	4618      	mov	r0, r3
 80063c8:	3718      	adds	r7, #24
 80063ca:	46bd      	mov	sp, r7
 80063cc:	bd80      	pop	{r7, pc}
 80063ce:	bf00      	nop
 80063d0:	40007000 	.word	0x40007000
 80063d4:	40023800 	.word	0x40023800
 80063d8:	42470060 	.word	0x42470060

080063dc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80063dc:	b580      	push	{r7, lr}
 80063de:	b084      	sub	sp, #16
 80063e0:	af00      	add	r7, sp, #0
 80063e2:	6078      	str	r0, [r7, #4]
 80063e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d101      	bne.n	80063f0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80063ec:	2301      	movs	r3, #1
 80063ee:	e0cc      	b.n	800658a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80063f0:	4b68      	ldr	r3, [pc, #416]	; (8006594 <HAL_RCC_ClockConfig+0x1b8>)
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	f003 030f 	and.w	r3, r3, #15
 80063f8:	683a      	ldr	r2, [r7, #0]
 80063fa:	429a      	cmp	r2, r3
 80063fc:	d90c      	bls.n	8006418 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80063fe:	4b65      	ldr	r3, [pc, #404]	; (8006594 <HAL_RCC_ClockConfig+0x1b8>)
 8006400:	683a      	ldr	r2, [r7, #0]
 8006402:	b2d2      	uxtb	r2, r2
 8006404:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006406:	4b63      	ldr	r3, [pc, #396]	; (8006594 <HAL_RCC_ClockConfig+0x1b8>)
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	f003 030f 	and.w	r3, r3, #15
 800640e:	683a      	ldr	r2, [r7, #0]
 8006410:	429a      	cmp	r2, r3
 8006412:	d001      	beq.n	8006418 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006414:	2301      	movs	r3, #1
 8006416:	e0b8      	b.n	800658a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	f003 0302 	and.w	r3, r3, #2
 8006420:	2b00      	cmp	r3, #0
 8006422:	d020      	beq.n	8006466 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	f003 0304 	and.w	r3, r3, #4
 800642c:	2b00      	cmp	r3, #0
 800642e:	d005      	beq.n	800643c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006430:	4b59      	ldr	r3, [pc, #356]	; (8006598 <HAL_RCC_ClockConfig+0x1bc>)
 8006432:	689b      	ldr	r3, [r3, #8]
 8006434:	4a58      	ldr	r2, [pc, #352]	; (8006598 <HAL_RCC_ClockConfig+0x1bc>)
 8006436:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800643a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	f003 0308 	and.w	r3, r3, #8
 8006444:	2b00      	cmp	r3, #0
 8006446:	d005      	beq.n	8006454 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006448:	4b53      	ldr	r3, [pc, #332]	; (8006598 <HAL_RCC_ClockConfig+0x1bc>)
 800644a:	689b      	ldr	r3, [r3, #8]
 800644c:	4a52      	ldr	r2, [pc, #328]	; (8006598 <HAL_RCC_ClockConfig+0x1bc>)
 800644e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006452:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006454:	4b50      	ldr	r3, [pc, #320]	; (8006598 <HAL_RCC_ClockConfig+0x1bc>)
 8006456:	689b      	ldr	r3, [r3, #8]
 8006458:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	689b      	ldr	r3, [r3, #8]
 8006460:	494d      	ldr	r1, [pc, #308]	; (8006598 <HAL_RCC_ClockConfig+0x1bc>)
 8006462:	4313      	orrs	r3, r2
 8006464:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	f003 0301 	and.w	r3, r3, #1
 800646e:	2b00      	cmp	r3, #0
 8006470:	d044      	beq.n	80064fc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	685b      	ldr	r3, [r3, #4]
 8006476:	2b01      	cmp	r3, #1
 8006478:	d107      	bne.n	800648a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800647a:	4b47      	ldr	r3, [pc, #284]	; (8006598 <HAL_RCC_ClockConfig+0x1bc>)
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006482:	2b00      	cmp	r3, #0
 8006484:	d119      	bne.n	80064ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006486:	2301      	movs	r3, #1
 8006488:	e07f      	b.n	800658a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	685b      	ldr	r3, [r3, #4]
 800648e:	2b02      	cmp	r3, #2
 8006490:	d003      	beq.n	800649a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006496:	2b03      	cmp	r3, #3
 8006498:	d107      	bne.n	80064aa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800649a:	4b3f      	ldr	r3, [pc, #252]	; (8006598 <HAL_RCC_ClockConfig+0x1bc>)
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d109      	bne.n	80064ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80064a6:	2301      	movs	r3, #1
 80064a8:	e06f      	b.n	800658a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80064aa:	4b3b      	ldr	r3, [pc, #236]	; (8006598 <HAL_RCC_ClockConfig+0x1bc>)
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	f003 0302 	and.w	r3, r3, #2
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d101      	bne.n	80064ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80064b6:	2301      	movs	r3, #1
 80064b8:	e067      	b.n	800658a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80064ba:	4b37      	ldr	r3, [pc, #220]	; (8006598 <HAL_RCC_ClockConfig+0x1bc>)
 80064bc:	689b      	ldr	r3, [r3, #8]
 80064be:	f023 0203 	bic.w	r2, r3, #3
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	685b      	ldr	r3, [r3, #4]
 80064c6:	4934      	ldr	r1, [pc, #208]	; (8006598 <HAL_RCC_ClockConfig+0x1bc>)
 80064c8:	4313      	orrs	r3, r2
 80064ca:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80064cc:	f7fd fb88 	bl	8003be0 <HAL_GetTick>
 80064d0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80064d2:	e00a      	b.n	80064ea <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80064d4:	f7fd fb84 	bl	8003be0 <HAL_GetTick>
 80064d8:	4602      	mov	r2, r0
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	1ad3      	subs	r3, r2, r3
 80064de:	f241 3288 	movw	r2, #5000	; 0x1388
 80064e2:	4293      	cmp	r3, r2
 80064e4:	d901      	bls.n	80064ea <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80064e6:	2303      	movs	r3, #3
 80064e8:	e04f      	b.n	800658a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80064ea:	4b2b      	ldr	r3, [pc, #172]	; (8006598 <HAL_RCC_ClockConfig+0x1bc>)
 80064ec:	689b      	ldr	r3, [r3, #8]
 80064ee:	f003 020c 	and.w	r2, r3, #12
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	685b      	ldr	r3, [r3, #4]
 80064f6:	009b      	lsls	r3, r3, #2
 80064f8:	429a      	cmp	r2, r3
 80064fa:	d1eb      	bne.n	80064d4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80064fc:	4b25      	ldr	r3, [pc, #148]	; (8006594 <HAL_RCC_ClockConfig+0x1b8>)
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	f003 030f 	and.w	r3, r3, #15
 8006504:	683a      	ldr	r2, [r7, #0]
 8006506:	429a      	cmp	r2, r3
 8006508:	d20c      	bcs.n	8006524 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800650a:	4b22      	ldr	r3, [pc, #136]	; (8006594 <HAL_RCC_ClockConfig+0x1b8>)
 800650c:	683a      	ldr	r2, [r7, #0]
 800650e:	b2d2      	uxtb	r2, r2
 8006510:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006512:	4b20      	ldr	r3, [pc, #128]	; (8006594 <HAL_RCC_ClockConfig+0x1b8>)
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	f003 030f 	and.w	r3, r3, #15
 800651a:	683a      	ldr	r2, [r7, #0]
 800651c:	429a      	cmp	r2, r3
 800651e:	d001      	beq.n	8006524 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006520:	2301      	movs	r3, #1
 8006522:	e032      	b.n	800658a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	f003 0304 	and.w	r3, r3, #4
 800652c:	2b00      	cmp	r3, #0
 800652e:	d008      	beq.n	8006542 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006530:	4b19      	ldr	r3, [pc, #100]	; (8006598 <HAL_RCC_ClockConfig+0x1bc>)
 8006532:	689b      	ldr	r3, [r3, #8]
 8006534:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	68db      	ldr	r3, [r3, #12]
 800653c:	4916      	ldr	r1, [pc, #88]	; (8006598 <HAL_RCC_ClockConfig+0x1bc>)
 800653e:	4313      	orrs	r3, r2
 8006540:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	f003 0308 	and.w	r3, r3, #8
 800654a:	2b00      	cmp	r3, #0
 800654c:	d009      	beq.n	8006562 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800654e:	4b12      	ldr	r3, [pc, #72]	; (8006598 <HAL_RCC_ClockConfig+0x1bc>)
 8006550:	689b      	ldr	r3, [r3, #8]
 8006552:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	691b      	ldr	r3, [r3, #16]
 800655a:	00db      	lsls	r3, r3, #3
 800655c:	490e      	ldr	r1, [pc, #56]	; (8006598 <HAL_RCC_ClockConfig+0x1bc>)
 800655e:	4313      	orrs	r3, r2
 8006560:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006562:	f000 f821 	bl	80065a8 <HAL_RCC_GetSysClockFreq>
 8006566:	4601      	mov	r1, r0
 8006568:	4b0b      	ldr	r3, [pc, #44]	; (8006598 <HAL_RCC_ClockConfig+0x1bc>)
 800656a:	689b      	ldr	r3, [r3, #8]
 800656c:	091b      	lsrs	r3, r3, #4
 800656e:	f003 030f 	and.w	r3, r3, #15
 8006572:	4a0a      	ldr	r2, [pc, #40]	; (800659c <HAL_RCC_ClockConfig+0x1c0>)
 8006574:	5cd3      	ldrb	r3, [r2, r3]
 8006576:	fa21 f303 	lsr.w	r3, r1, r3
 800657a:	4a09      	ldr	r2, [pc, #36]	; (80065a0 <HAL_RCC_ClockConfig+0x1c4>)
 800657c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800657e:	4b09      	ldr	r3, [pc, #36]	; (80065a4 <HAL_RCC_ClockConfig+0x1c8>)
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	4618      	mov	r0, r3
 8006584:	f7fd fae8 	bl	8003b58 <HAL_InitTick>

  return HAL_OK;
 8006588:	2300      	movs	r3, #0
}
 800658a:	4618      	mov	r0, r3
 800658c:	3710      	adds	r7, #16
 800658e:	46bd      	mov	sp, r7
 8006590:	bd80      	pop	{r7, pc}
 8006592:	bf00      	nop
 8006594:	40023c00 	.word	0x40023c00
 8006598:	40023800 	.word	0x40023800
 800659c:	080126bc 	.word	0x080126bc
 80065a0:	20000000 	.word	0x20000000
 80065a4:	20000004 	.word	0x20000004

080065a8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80065a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80065aa:	b085      	sub	sp, #20
 80065ac:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80065ae:	2300      	movs	r3, #0
 80065b0:	607b      	str	r3, [r7, #4]
 80065b2:	2300      	movs	r3, #0
 80065b4:	60fb      	str	r3, [r7, #12]
 80065b6:	2300      	movs	r3, #0
 80065b8:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80065ba:	2300      	movs	r3, #0
 80065bc:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80065be:	4b50      	ldr	r3, [pc, #320]	; (8006700 <HAL_RCC_GetSysClockFreq+0x158>)
 80065c0:	689b      	ldr	r3, [r3, #8]
 80065c2:	f003 030c 	and.w	r3, r3, #12
 80065c6:	2b04      	cmp	r3, #4
 80065c8:	d007      	beq.n	80065da <HAL_RCC_GetSysClockFreq+0x32>
 80065ca:	2b08      	cmp	r3, #8
 80065cc:	d008      	beq.n	80065e0 <HAL_RCC_GetSysClockFreq+0x38>
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	f040 808d 	bne.w	80066ee <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80065d4:	4b4b      	ldr	r3, [pc, #300]	; (8006704 <HAL_RCC_GetSysClockFreq+0x15c>)
 80065d6:	60bb      	str	r3, [r7, #8]
       break;
 80065d8:	e08c      	b.n	80066f4 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80065da:	4b4b      	ldr	r3, [pc, #300]	; (8006708 <HAL_RCC_GetSysClockFreq+0x160>)
 80065dc:	60bb      	str	r3, [r7, #8]
      break;
 80065de:	e089      	b.n	80066f4 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80065e0:	4b47      	ldr	r3, [pc, #284]	; (8006700 <HAL_RCC_GetSysClockFreq+0x158>)
 80065e2:	685b      	ldr	r3, [r3, #4]
 80065e4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80065e8:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80065ea:	4b45      	ldr	r3, [pc, #276]	; (8006700 <HAL_RCC_GetSysClockFreq+0x158>)
 80065ec:	685b      	ldr	r3, [r3, #4]
 80065ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d023      	beq.n	800663e <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80065f6:	4b42      	ldr	r3, [pc, #264]	; (8006700 <HAL_RCC_GetSysClockFreq+0x158>)
 80065f8:	685b      	ldr	r3, [r3, #4]
 80065fa:	099b      	lsrs	r3, r3, #6
 80065fc:	f04f 0400 	mov.w	r4, #0
 8006600:	f240 11ff 	movw	r1, #511	; 0x1ff
 8006604:	f04f 0200 	mov.w	r2, #0
 8006608:	ea03 0501 	and.w	r5, r3, r1
 800660c:	ea04 0602 	and.w	r6, r4, r2
 8006610:	4a3d      	ldr	r2, [pc, #244]	; (8006708 <HAL_RCC_GetSysClockFreq+0x160>)
 8006612:	fb02 f106 	mul.w	r1, r2, r6
 8006616:	2200      	movs	r2, #0
 8006618:	fb02 f205 	mul.w	r2, r2, r5
 800661c:	440a      	add	r2, r1
 800661e:	493a      	ldr	r1, [pc, #232]	; (8006708 <HAL_RCC_GetSysClockFreq+0x160>)
 8006620:	fba5 0101 	umull	r0, r1, r5, r1
 8006624:	1853      	adds	r3, r2, r1
 8006626:	4619      	mov	r1, r3
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	f04f 0400 	mov.w	r4, #0
 800662e:	461a      	mov	r2, r3
 8006630:	4623      	mov	r3, r4
 8006632:	f7fa fb39 	bl	8000ca8 <__aeabi_uldivmod>
 8006636:	4603      	mov	r3, r0
 8006638:	460c      	mov	r4, r1
 800663a:	60fb      	str	r3, [r7, #12]
 800663c:	e049      	b.n	80066d2 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800663e:	4b30      	ldr	r3, [pc, #192]	; (8006700 <HAL_RCC_GetSysClockFreq+0x158>)
 8006640:	685b      	ldr	r3, [r3, #4]
 8006642:	099b      	lsrs	r3, r3, #6
 8006644:	f04f 0400 	mov.w	r4, #0
 8006648:	f240 11ff 	movw	r1, #511	; 0x1ff
 800664c:	f04f 0200 	mov.w	r2, #0
 8006650:	ea03 0501 	and.w	r5, r3, r1
 8006654:	ea04 0602 	and.w	r6, r4, r2
 8006658:	4629      	mov	r1, r5
 800665a:	4632      	mov	r2, r6
 800665c:	f04f 0300 	mov.w	r3, #0
 8006660:	f04f 0400 	mov.w	r4, #0
 8006664:	0154      	lsls	r4, r2, #5
 8006666:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800666a:	014b      	lsls	r3, r1, #5
 800666c:	4619      	mov	r1, r3
 800666e:	4622      	mov	r2, r4
 8006670:	1b49      	subs	r1, r1, r5
 8006672:	eb62 0206 	sbc.w	r2, r2, r6
 8006676:	f04f 0300 	mov.w	r3, #0
 800667a:	f04f 0400 	mov.w	r4, #0
 800667e:	0194      	lsls	r4, r2, #6
 8006680:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8006684:	018b      	lsls	r3, r1, #6
 8006686:	1a5b      	subs	r3, r3, r1
 8006688:	eb64 0402 	sbc.w	r4, r4, r2
 800668c:	f04f 0100 	mov.w	r1, #0
 8006690:	f04f 0200 	mov.w	r2, #0
 8006694:	00e2      	lsls	r2, r4, #3
 8006696:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800669a:	00d9      	lsls	r1, r3, #3
 800669c:	460b      	mov	r3, r1
 800669e:	4614      	mov	r4, r2
 80066a0:	195b      	adds	r3, r3, r5
 80066a2:	eb44 0406 	adc.w	r4, r4, r6
 80066a6:	f04f 0100 	mov.w	r1, #0
 80066aa:	f04f 0200 	mov.w	r2, #0
 80066ae:	02a2      	lsls	r2, r4, #10
 80066b0:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80066b4:	0299      	lsls	r1, r3, #10
 80066b6:	460b      	mov	r3, r1
 80066b8:	4614      	mov	r4, r2
 80066ba:	4618      	mov	r0, r3
 80066bc:	4621      	mov	r1, r4
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	f04f 0400 	mov.w	r4, #0
 80066c4:	461a      	mov	r2, r3
 80066c6:	4623      	mov	r3, r4
 80066c8:	f7fa faee 	bl	8000ca8 <__aeabi_uldivmod>
 80066cc:	4603      	mov	r3, r0
 80066ce:	460c      	mov	r4, r1
 80066d0:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80066d2:	4b0b      	ldr	r3, [pc, #44]	; (8006700 <HAL_RCC_GetSysClockFreq+0x158>)
 80066d4:	685b      	ldr	r3, [r3, #4]
 80066d6:	0c1b      	lsrs	r3, r3, #16
 80066d8:	f003 0303 	and.w	r3, r3, #3
 80066dc:	3301      	adds	r3, #1
 80066de:	005b      	lsls	r3, r3, #1
 80066e0:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80066e2:	68fa      	ldr	r2, [r7, #12]
 80066e4:	683b      	ldr	r3, [r7, #0]
 80066e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80066ea:	60bb      	str	r3, [r7, #8]
      break;
 80066ec:	e002      	b.n	80066f4 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80066ee:	4b05      	ldr	r3, [pc, #20]	; (8006704 <HAL_RCC_GetSysClockFreq+0x15c>)
 80066f0:	60bb      	str	r3, [r7, #8]
      break;
 80066f2:	bf00      	nop
    }
  }
  return sysclockfreq;
 80066f4:	68bb      	ldr	r3, [r7, #8]
}
 80066f6:	4618      	mov	r0, r3
 80066f8:	3714      	adds	r7, #20
 80066fa:	46bd      	mov	sp, r7
 80066fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80066fe:	bf00      	nop
 8006700:	40023800 	.word	0x40023800
 8006704:	00f42400 	.word	0x00f42400
 8006708:	00b71b00 	.word	0x00b71b00

0800670c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800670c:	b480      	push	{r7}
 800670e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006710:	4b03      	ldr	r3, [pc, #12]	; (8006720 <HAL_RCC_GetHCLKFreq+0x14>)
 8006712:	681b      	ldr	r3, [r3, #0]
}
 8006714:	4618      	mov	r0, r3
 8006716:	46bd      	mov	sp, r7
 8006718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800671c:	4770      	bx	lr
 800671e:	bf00      	nop
 8006720:	20000000 	.word	0x20000000

08006724 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006724:	b580      	push	{r7, lr}
 8006726:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006728:	f7ff fff0 	bl	800670c <HAL_RCC_GetHCLKFreq>
 800672c:	4601      	mov	r1, r0
 800672e:	4b05      	ldr	r3, [pc, #20]	; (8006744 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006730:	689b      	ldr	r3, [r3, #8]
 8006732:	0a9b      	lsrs	r3, r3, #10
 8006734:	f003 0307 	and.w	r3, r3, #7
 8006738:	4a03      	ldr	r2, [pc, #12]	; (8006748 <HAL_RCC_GetPCLK1Freq+0x24>)
 800673a:	5cd3      	ldrb	r3, [r2, r3]
 800673c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8006740:	4618      	mov	r0, r3
 8006742:	bd80      	pop	{r7, pc}
 8006744:	40023800 	.word	0x40023800
 8006748:	080126cc 	.word	0x080126cc

0800674c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800674c:	b580      	push	{r7, lr}
 800674e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8006750:	f7ff ffdc 	bl	800670c <HAL_RCC_GetHCLKFreq>
 8006754:	4601      	mov	r1, r0
 8006756:	4b05      	ldr	r3, [pc, #20]	; (800676c <HAL_RCC_GetPCLK2Freq+0x20>)
 8006758:	689b      	ldr	r3, [r3, #8]
 800675a:	0b5b      	lsrs	r3, r3, #13
 800675c:	f003 0307 	and.w	r3, r3, #7
 8006760:	4a03      	ldr	r2, [pc, #12]	; (8006770 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006762:	5cd3      	ldrb	r3, [r2, r3]
 8006764:	fa21 f303 	lsr.w	r3, r1, r3
}
 8006768:	4618      	mov	r0, r3
 800676a:	bd80      	pop	{r7, pc}
 800676c:	40023800 	.word	0x40023800
 8006770:	080126cc 	.word	0x080126cc

08006774 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006774:	b580      	push	{r7, lr}
 8006776:	b086      	sub	sp, #24
 8006778:	af00      	add	r7, sp, #0
 800677a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800677c:	2300      	movs	r3, #0
 800677e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8006780:	2300      	movs	r3, #0
 8006782:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	f003 0301 	and.w	r3, r3, #1
 800678c:	2b00      	cmp	r3, #0
 800678e:	d105      	bne.n	800679c <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006798:	2b00      	cmp	r3, #0
 800679a:	d035      	beq.n	8006808 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800679c:	4b62      	ldr	r3, [pc, #392]	; (8006928 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800679e:	2200      	movs	r2, #0
 80067a0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80067a2:	f7fd fa1d 	bl	8003be0 <HAL_GetTick>
 80067a6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80067a8:	e008      	b.n	80067bc <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80067aa:	f7fd fa19 	bl	8003be0 <HAL_GetTick>
 80067ae:	4602      	mov	r2, r0
 80067b0:	697b      	ldr	r3, [r7, #20]
 80067b2:	1ad3      	subs	r3, r2, r3
 80067b4:	2b02      	cmp	r3, #2
 80067b6:	d901      	bls.n	80067bc <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80067b8:	2303      	movs	r3, #3
 80067ba:	e0b0      	b.n	800691e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80067bc:	4b5b      	ldr	r3, [pc, #364]	; (800692c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d1f0      	bne.n	80067aa <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	685b      	ldr	r3, [r3, #4]
 80067cc:	019a      	lsls	r2, r3, #6
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	689b      	ldr	r3, [r3, #8]
 80067d2:	071b      	lsls	r3, r3, #28
 80067d4:	4955      	ldr	r1, [pc, #340]	; (800692c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80067d6:	4313      	orrs	r3, r2
 80067d8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80067dc:	4b52      	ldr	r3, [pc, #328]	; (8006928 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80067de:	2201      	movs	r2, #1
 80067e0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80067e2:	f7fd f9fd 	bl	8003be0 <HAL_GetTick>
 80067e6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80067e8:	e008      	b.n	80067fc <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80067ea:	f7fd f9f9 	bl	8003be0 <HAL_GetTick>
 80067ee:	4602      	mov	r2, r0
 80067f0:	697b      	ldr	r3, [r7, #20]
 80067f2:	1ad3      	subs	r3, r2, r3
 80067f4:	2b02      	cmp	r3, #2
 80067f6:	d901      	bls.n	80067fc <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80067f8:	2303      	movs	r3, #3
 80067fa:	e090      	b.n	800691e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80067fc:	4b4b      	ldr	r3, [pc, #300]	; (800692c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006804:	2b00      	cmp	r3, #0
 8006806:	d0f0      	beq.n	80067ea <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	f003 0302 	and.w	r3, r3, #2
 8006810:	2b00      	cmp	r3, #0
 8006812:	f000 8083 	beq.w	800691c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8006816:	2300      	movs	r3, #0
 8006818:	60fb      	str	r3, [r7, #12]
 800681a:	4b44      	ldr	r3, [pc, #272]	; (800692c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800681c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800681e:	4a43      	ldr	r2, [pc, #268]	; (800692c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006820:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006824:	6413      	str	r3, [r2, #64]	; 0x40
 8006826:	4b41      	ldr	r3, [pc, #260]	; (800692c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006828:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800682a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800682e:	60fb      	str	r3, [r7, #12]
 8006830:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8006832:	4b3f      	ldr	r3, [pc, #252]	; (8006930 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	4a3e      	ldr	r2, [pc, #248]	; (8006930 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8006838:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800683c:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800683e:	f7fd f9cf 	bl	8003be0 <HAL_GetTick>
 8006842:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8006844:	e008      	b.n	8006858 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8006846:	f7fd f9cb 	bl	8003be0 <HAL_GetTick>
 800684a:	4602      	mov	r2, r0
 800684c:	697b      	ldr	r3, [r7, #20]
 800684e:	1ad3      	subs	r3, r2, r3
 8006850:	2b02      	cmp	r3, #2
 8006852:	d901      	bls.n	8006858 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8006854:	2303      	movs	r3, #3
 8006856:	e062      	b.n	800691e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8006858:	4b35      	ldr	r3, [pc, #212]	; (8006930 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006860:	2b00      	cmp	r3, #0
 8006862:	d0f0      	beq.n	8006846 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006864:	4b31      	ldr	r3, [pc, #196]	; (800692c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006866:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006868:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800686c:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800686e:	693b      	ldr	r3, [r7, #16]
 8006870:	2b00      	cmp	r3, #0
 8006872:	d02f      	beq.n	80068d4 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	68db      	ldr	r3, [r3, #12]
 8006878:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800687c:	693a      	ldr	r2, [r7, #16]
 800687e:	429a      	cmp	r2, r3
 8006880:	d028      	beq.n	80068d4 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006882:	4b2a      	ldr	r3, [pc, #168]	; (800692c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006884:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006886:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800688a:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800688c:	4b29      	ldr	r3, [pc, #164]	; (8006934 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800688e:	2201      	movs	r2, #1
 8006890:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006892:	4b28      	ldr	r3, [pc, #160]	; (8006934 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8006894:	2200      	movs	r2, #0
 8006896:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8006898:	4a24      	ldr	r2, [pc, #144]	; (800692c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800689a:	693b      	ldr	r3, [r7, #16]
 800689c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800689e:	4b23      	ldr	r3, [pc, #140]	; (800692c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80068a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80068a2:	f003 0301 	and.w	r3, r3, #1
 80068a6:	2b01      	cmp	r3, #1
 80068a8:	d114      	bne.n	80068d4 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80068aa:	f7fd f999 	bl	8003be0 <HAL_GetTick>
 80068ae:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80068b0:	e00a      	b.n	80068c8 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80068b2:	f7fd f995 	bl	8003be0 <HAL_GetTick>
 80068b6:	4602      	mov	r2, r0
 80068b8:	697b      	ldr	r3, [r7, #20]
 80068ba:	1ad3      	subs	r3, r2, r3
 80068bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80068c0:	4293      	cmp	r3, r2
 80068c2:	d901      	bls.n	80068c8 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 80068c4:	2303      	movs	r3, #3
 80068c6:	e02a      	b.n	800691e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80068c8:	4b18      	ldr	r3, [pc, #96]	; (800692c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80068ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80068cc:	f003 0302 	and.w	r3, r3, #2
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d0ee      	beq.n	80068b2 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	68db      	ldr	r3, [r3, #12]
 80068d8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80068dc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80068e0:	d10d      	bne.n	80068fe <HAL_RCCEx_PeriphCLKConfig+0x18a>
 80068e2:	4b12      	ldr	r3, [pc, #72]	; (800692c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80068e4:	689b      	ldr	r3, [r3, #8]
 80068e6:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	68db      	ldr	r3, [r3, #12]
 80068ee:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80068f2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80068f6:	490d      	ldr	r1, [pc, #52]	; (800692c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80068f8:	4313      	orrs	r3, r2
 80068fa:	608b      	str	r3, [r1, #8]
 80068fc:	e005      	b.n	800690a <HAL_RCCEx_PeriphCLKConfig+0x196>
 80068fe:	4b0b      	ldr	r3, [pc, #44]	; (800692c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006900:	689b      	ldr	r3, [r3, #8]
 8006902:	4a0a      	ldr	r2, [pc, #40]	; (800692c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006904:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8006908:	6093      	str	r3, [r2, #8]
 800690a:	4b08      	ldr	r3, [pc, #32]	; (800692c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800690c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	68db      	ldr	r3, [r3, #12]
 8006912:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006916:	4905      	ldr	r1, [pc, #20]	; (800692c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006918:	4313      	orrs	r3, r2
 800691a:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 800691c:	2300      	movs	r3, #0
}
 800691e:	4618      	mov	r0, r3
 8006920:	3718      	adds	r7, #24
 8006922:	46bd      	mov	sp, r7
 8006924:	bd80      	pop	{r7, pc}
 8006926:	bf00      	nop
 8006928:	42470068 	.word	0x42470068
 800692c:	40023800 	.word	0x40023800
 8006930:	40007000 	.word	0x40007000
 8006934:	42470e40 	.word	0x42470e40

08006938 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8006938:	b580      	push	{r7, lr}
 800693a:	b082      	sub	sp, #8
 800693c:	af00      	add	r7, sp, #0
 800693e:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	2b00      	cmp	r3, #0
 8006944:	d101      	bne.n	800694a <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 8006946:	2301      	movs	r3, #1
 8006948:	e083      	b.n	8006a52 <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	7f5b      	ldrb	r3, [r3, #29]
 800694e:	b2db      	uxtb	r3, r3
 8006950:	2b00      	cmp	r3, #0
 8006952:	d105      	bne.n	8006960 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	2200      	movs	r2, #0
 8006958:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800695a:	6878      	ldr	r0, [r7, #4]
 800695c:	f7fc fd32 	bl	80033c4 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	2202      	movs	r2, #2
 8006964:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	22ca      	movs	r2, #202	; 0xca
 800696c:	625a      	str	r2, [r3, #36]	; 0x24
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	2253      	movs	r2, #83	; 0x53
 8006974:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8006976:	6878      	ldr	r0, [r7, #4]
 8006978:	f000 f897 	bl	8006aaa <RTC_EnterInitMode>
 800697c:	4603      	mov	r3, r0
 800697e:	2b00      	cmp	r3, #0
 8006980:	d008      	beq.n	8006994 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	22ff      	movs	r2, #255	; 0xff
 8006988:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	2204      	movs	r2, #4
 800698e:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8006990:	2301      	movs	r3, #1
 8006992:	e05e      	b.n	8006a52 <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	689b      	ldr	r3, [r3, #8]
 800699a:	687a      	ldr	r2, [r7, #4]
 800699c:	6812      	ldr	r2, [r2, #0]
 800699e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80069a2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80069a6:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	6899      	ldr	r1, [r3, #8]
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	685a      	ldr	r2, [r3, #4]
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	691b      	ldr	r3, [r3, #16]
 80069b6:	431a      	orrs	r2, r3
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	695b      	ldr	r3, [r3, #20]
 80069bc:	431a      	orrs	r2, r3
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	430a      	orrs	r2, r1
 80069c4:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	687a      	ldr	r2, [r7, #4]
 80069cc:	68d2      	ldr	r2, [r2, #12]
 80069ce:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	6919      	ldr	r1, [r3, #16]
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	689b      	ldr	r3, [r3, #8]
 80069da:	041a      	lsls	r2, r3, #16
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	430a      	orrs	r2, r1
 80069e2:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	68da      	ldr	r2, [r3, #12]
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80069f2:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	689b      	ldr	r3, [r3, #8]
 80069fa:	f003 0320 	and.w	r3, r3, #32
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d10e      	bne.n	8006a20 <HAL_RTC_Init+0xe8>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006a02:	6878      	ldr	r0, [r7, #4]
 8006a04:	f000 f829 	bl	8006a5a <HAL_RTC_WaitForSynchro>
 8006a08:	4603      	mov	r3, r0
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d008      	beq.n	8006a20 <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	22ff      	movs	r2, #255	; 0xff
 8006a14:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	2204      	movs	r2, #4
 8006a1a:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 8006a1c:	2301      	movs	r3, #1
 8006a1e:	e018      	b.n	8006a52 <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006a2e:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	699a      	ldr	r2, [r3, #24]
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	430a      	orrs	r2, r1
 8006a40:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	22ff      	movs	r2, #255	; 0xff
 8006a48:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	2201      	movs	r2, #1
 8006a4e:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8006a50:	2300      	movs	r3, #0
  }
}
 8006a52:	4618      	mov	r0, r3
 8006a54:	3708      	adds	r7, #8
 8006a56:	46bd      	mov	sp, r7
 8006a58:	bd80      	pop	{r7, pc}

08006a5a <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8006a5a:	b580      	push	{r7, lr}
 8006a5c:	b084      	sub	sp, #16
 8006a5e:	af00      	add	r7, sp, #0
 8006a60:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006a62:	2300      	movs	r3, #0
 8006a64:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	68da      	ldr	r2, [r3, #12]
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006a74:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006a76:	f7fd f8b3 	bl	8003be0 <HAL_GetTick>
 8006a7a:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8006a7c:	e009      	b.n	8006a92 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8006a7e:	f7fd f8af 	bl	8003be0 <HAL_GetTick>
 8006a82:	4602      	mov	r2, r0
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	1ad3      	subs	r3, r2, r3
 8006a88:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006a8c:	d901      	bls.n	8006a92 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8006a8e:	2303      	movs	r3, #3
 8006a90:	e007      	b.n	8006aa2 <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	68db      	ldr	r3, [r3, #12]
 8006a98:	f003 0320 	and.w	r3, r3, #32
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d0ee      	beq.n	8006a7e <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8006aa0:	2300      	movs	r3, #0
}
 8006aa2:	4618      	mov	r0, r3
 8006aa4:	3710      	adds	r7, #16
 8006aa6:	46bd      	mov	sp, r7
 8006aa8:	bd80      	pop	{r7, pc}

08006aaa <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8006aaa:	b580      	push	{r7, lr}
 8006aac:	b084      	sub	sp, #16
 8006aae:	af00      	add	r7, sp, #0
 8006ab0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006ab2:	2300      	movs	r3, #0
 8006ab4:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	68db      	ldr	r3, [r3, #12]
 8006abc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d119      	bne.n	8006af8 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	f04f 32ff 	mov.w	r2, #4294967295
 8006acc:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006ace:	f7fd f887 	bl	8003be0 <HAL_GetTick>
 8006ad2:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8006ad4:	e009      	b.n	8006aea <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8006ad6:	f7fd f883 	bl	8003be0 <HAL_GetTick>
 8006ada:	4602      	mov	r2, r0
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	1ad3      	subs	r3, r2, r3
 8006ae0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006ae4:	d901      	bls.n	8006aea <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 8006ae6:	2303      	movs	r3, #3
 8006ae8:	e007      	b.n	8006afa <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	68db      	ldr	r3, [r3, #12]
 8006af0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d0ee      	beq.n	8006ad6 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 8006af8:	2300      	movs	r3, #0
}
 8006afa:	4618      	mov	r0, r3
 8006afc:	3710      	adds	r7, #16
 8006afe:	46bd      	mov	sp, r7
 8006b00:	bd80      	pop	{r7, pc}

08006b02 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8006b02:	b580      	push	{r7, lr}
 8006b04:	b082      	sub	sp, #8
 8006b06:	af00      	add	r7, sp, #0
 8006b08:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d101      	bne.n	8006b14 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8006b10:	2301      	movs	r3, #1
 8006b12:	e022      	b.n	8006b5a <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006b1a:	b2db      	uxtb	r3, r3
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d105      	bne.n	8006b2c <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	2200      	movs	r2, #0
 8006b24:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8006b26:	6878      	ldr	r0, [r7, #4]
 8006b28:	f7fc fc62 	bl	80033f0 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	2203      	movs	r2, #3
 8006b30:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8006b34:	6878      	ldr	r0, [r7, #4]
 8006b36:	f000 f815 	bl	8006b64 <HAL_SD_InitCard>
 8006b3a:	4603      	mov	r3, r0
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d001      	beq.n	8006b44 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8006b40:	2301      	movs	r3, #1
 8006b42:	e00a      	b.n	8006b5a <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	2200      	movs	r2, #0
 8006b48:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	2200      	movs	r2, #0
 8006b4e:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	2201      	movs	r2, #1
 8006b54:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8006b58:	2300      	movs	r3, #0
}
 8006b5a:	4618      	mov	r0, r3
 8006b5c:	3708      	adds	r7, #8
 8006b5e:	46bd      	mov	sp, r7
 8006b60:	bd80      	pop	{r7, pc}
	...

08006b64 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8006b64:	b5b0      	push	{r4, r5, r7, lr}
 8006b66:	b08e      	sub	sp, #56	; 0x38
 8006b68:	af04      	add	r7, sp, #16
 8006b6a:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8006b6c:	2300      	movs	r3, #0
 8006b6e:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 8006b70:	2300      	movs	r3, #0
 8006b72:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8006b74:	2300      	movs	r3, #0
 8006b76:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 8006b78:	2300      	movs	r3, #0
 8006b7a:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8006b7c:	2300      	movs	r3, #0
 8006b7e:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 8006b80:	2376      	movs	r3, #118	; 0x76
 8006b82:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	681d      	ldr	r5, [r3, #0]
 8006b88:	466c      	mov	r4, sp
 8006b8a:	f107 0314 	add.w	r3, r7, #20
 8006b8e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8006b92:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8006b96:	f107 0308 	add.w	r3, r7, #8
 8006b9a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006b9c:	4628      	mov	r0, r5
 8006b9e:	f002 ffaf 	bl	8009b00 <SDIO_Init>
 8006ba2:	4603      	mov	r3, r0
 8006ba4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 8006ba8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d001      	beq.n	8006bb4 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8006bb0:	2301      	movs	r3, #1
 8006bb2:	e031      	b.n	8006c18 <HAL_SD_InitCard+0xb4>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 8006bb4:	4b1a      	ldr	r3, [pc, #104]	; (8006c20 <HAL_SD_InitCard+0xbc>)
 8006bb6:	2200      	movs	r2, #0
 8006bb8:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	4618      	mov	r0, r3
 8006bc0:	f002 ffe7 	bl	8009b92 <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 8006bc4:	4b16      	ldr	r3, [pc, #88]	; (8006c20 <HAL_SD_InitCard+0xbc>)
 8006bc6:	2201      	movs	r2, #1
 8006bc8:	601a      	str	r2, [r3, #0]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8006bca:	6878      	ldr	r0, [r7, #4]
 8006bcc:	f000 fffa 	bl	8007bc4 <SD_PowerON>
 8006bd0:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006bd2:	6a3b      	ldr	r3, [r7, #32]
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d00b      	beq.n	8006bf0 <HAL_SD_InitCard+0x8c>
  {
    hsd->State = HAL_SD_STATE_READY;
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	2201      	movs	r2, #1
 8006bdc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006be4:	6a3b      	ldr	r3, [r7, #32]
 8006be6:	431a      	orrs	r2, r3
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8006bec:	2301      	movs	r3, #1
 8006bee:	e013      	b.n	8006c18 <HAL_SD_InitCard+0xb4>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8006bf0:	6878      	ldr	r0, [r7, #4]
 8006bf2:	f000 ff19 	bl	8007a28 <SD_InitCard>
 8006bf6:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006bf8:	6a3b      	ldr	r3, [r7, #32]
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d00b      	beq.n	8006c16 <HAL_SD_InitCard+0xb2>
  {
    hsd->State = HAL_SD_STATE_READY;
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	2201      	movs	r2, #1
 8006c02:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006c0a:	6a3b      	ldr	r3, [r7, #32]
 8006c0c:	431a      	orrs	r2, r3
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8006c12:	2301      	movs	r3, #1
 8006c14:	e000      	b.n	8006c18 <HAL_SD_InitCard+0xb4>
  }

  return HAL_OK;
 8006c16:	2300      	movs	r3, #0
}
 8006c18:	4618      	mov	r0, r3
 8006c1a:	3728      	adds	r7, #40	; 0x28
 8006c1c:	46bd      	mov	sp, r7
 8006c1e:	bdb0      	pop	{r4, r5, r7, pc}
 8006c20:	422580a0 	.word	0x422580a0

08006c24 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8006c24:	b580      	push	{r7, lr}
 8006c26:	b08c      	sub	sp, #48	; 0x30
 8006c28:	af00      	add	r7, sp, #0
 8006c2a:	60f8      	str	r0, [r7, #12]
 8006c2c:	60b9      	str	r1, [r7, #8]
 8006c2e:	607a      	str	r2, [r7, #4]
 8006c30:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 8006c36:	68bb      	ldr	r3, [r7, #8]
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	d107      	bne.n	8006c4c <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c40:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8006c48:	2301      	movs	r3, #1
 8006c4a:	e0c9      	b.n	8006de0 <HAL_SD_ReadBlocks_DMA+0x1bc>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006c52:	b2db      	uxtb	r3, r3
 8006c54:	2b01      	cmp	r3, #1
 8006c56:	f040 80c2 	bne.w	8006dde <HAL_SD_ReadBlocks_DMA+0x1ba>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	2200      	movs	r2, #0
 8006c5e:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8006c60:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006c62:	683b      	ldr	r3, [r7, #0]
 8006c64:	441a      	add	r2, r3
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006c6a:	429a      	cmp	r2, r3
 8006c6c:	d907      	bls.n	8006c7e <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c72:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8006c7a:	2301      	movs	r3, #1
 8006c7c:	e0b0      	b.n	8006de0 <HAL_SD_ReadBlocks_DMA+0x1bc>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	2203      	movs	r2, #3
 8006c82:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	2200      	movs	r2, #0
 8006c8c:	62da      	str	r2, [r3, #44]	; 0x2c

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND | SDIO_IT_STBITERR));
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c94:	68fa      	ldr	r2, [r7, #12]
 8006c96:	6812      	ldr	r2, [r2, #0]
 8006c98:	f443 734a 	orr.w	r3, r3, #808	; 0x328
 8006c9c:	f043 0302 	orr.w	r3, r3, #2
 8006ca0:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ca6:	4a50      	ldr	r2, [pc, #320]	; (8006de8 <HAL_SD_ReadBlocks_DMA+0x1c4>)
 8006ca8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cae:	4a4f      	ldr	r2, [pc, #316]	; (8006dec <HAL_SD_ReadBlocks_DMA+0x1c8>)
 8006cb0:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cb6:	2200      	movs	r2, #0
 8006cb8:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	6c18      	ldr	r0, [r3, #64]	; 0x40
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	3380      	adds	r3, #128	; 0x80
 8006cc4:	4619      	mov	r1, r3
 8006cc6:	68ba      	ldr	r2, [r7, #8]
 8006cc8:	683b      	ldr	r3, [r7, #0]
 8006cca:	025b      	lsls	r3, r3, #9
 8006ccc:	089b      	lsrs	r3, r3, #2
 8006cce:	f7fd f975 	bl	8003fbc <HAL_DMA_Start_IT>
 8006cd2:	4603      	mov	r3, r0
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d017      	beq.n	8006d08 <HAL_SD_ReadBlocks_DMA+0xe4>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 8006ce6:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	4a40      	ldr	r2, [pc, #256]	; (8006df0 <HAL_SD_ReadBlocks_DMA+0x1cc>)
 8006cee:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cf4:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	2201      	movs	r2, #1
 8006d00:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8006d04:	2301      	movs	r3, #1
 8006d06:	e06b      	b.n	8006de0 <HAL_SD_ReadBlocks_DMA+0x1bc>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 8006d08:	4b3a      	ldr	r3, [pc, #232]	; (8006df4 <HAL_SD_ReadBlocks_DMA+0x1d0>)
 8006d0a:	2201      	movs	r2, #1
 8006d0c:	601a      	str	r2, [r3, #0]

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d12:	2b01      	cmp	r3, #1
 8006d14:	d002      	beq.n	8006d1c <HAL_SD_ReadBlocks_DMA+0xf8>
      {
        add *= 512U;
 8006d16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d18:	025b      	lsls	r3, r3, #9
 8006d1a:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Set Block Size for Card */
      errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006d24:	4618      	mov	r0, r3
 8006d26:	f002 ffc7 	bl	8009cb8 <SDMMC_CmdBlockLength>
 8006d2a:	62f8      	str	r0, [r7, #44]	; 0x2c
      if(errorstate != HAL_SD_ERROR_NONE)
 8006d2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d00f      	beq.n	8006d52 <HAL_SD_ReadBlocks_DMA+0x12e>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	4a2e      	ldr	r2, [pc, #184]	; (8006df0 <HAL_SD_ReadBlocks_DMA+0x1cc>)
 8006d38:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006d3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d40:	431a      	orrs	r2, r3
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	2201      	movs	r2, #1
 8006d4a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        return HAL_ERROR;
 8006d4e:	2301      	movs	r3, #1
 8006d50:	e046      	b.n	8006de0 <HAL_SD_ReadBlocks_DMA+0x1bc>
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8006d52:	f04f 33ff 	mov.w	r3, #4294967295
 8006d56:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8006d58:	683b      	ldr	r3, [r7, #0]
 8006d5a:	025b      	lsls	r3, r3, #9
 8006d5c:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8006d5e:	2390      	movs	r3, #144	; 0x90
 8006d60:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8006d62:	2302      	movs	r3, #2
 8006d64:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8006d66:	2300      	movs	r3, #0
 8006d68:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 8006d6a:	2301      	movs	r3, #1
 8006d6c:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	f107 0210 	add.w	r2, r7, #16
 8006d76:	4611      	mov	r1, r2
 8006d78:	4618      	mov	r0, r3
 8006d7a:	f002 ff71 	bl	8009c60 <SDIO_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 8006d7e:	683b      	ldr	r3, [r7, #0]
 8006d80:	2b01      	cmp	r3, #1
 8006d82:	d90a      	bls.n	8006d9a <HAL_SD_ReadBlocks_DMA+0x176>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	2282      	movs	r2, #130	; 0x82
 8006d88:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006d90:	4618      	mov	r0, r3
 8006d92:	f002 ffd5 	bl	8009d40 <SDMMC_CmdReadMultiBlock>
 8006d96:	62f8      	str	r0, [r7, #44]	; 0x2c
 8006d98:	e009      	b.n	8006dae <HAL_SD_ReadBlocks_DMA+0x18a>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	2281      	movs	r2, #129	; 0x81
 8006d9e:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006da6:	4618      	mov	r0, r3
 8006da8:	f002 ffa8 	bl	8009cfc <SDMMC_CmdReadSingleBlock>
 8006dac:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 8006dae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	d012      	beq.n	8006dda <HAL_SD_ReadBlocks_DMA+0x1b6>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	4a0d      	ldr	r2, [pc, #52]	; (8006df0 <HAL_SD_ReadBlocks_DMA+0x1cc>)
 8006dba:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006dc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006dc2:	431a      	orrs	r2, r3
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	2201      	movs	r2, #1
 8006dcc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	2200      	movs	r2, #0
 8006dd4:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 8006dd6:	2301      	movs	r3, #1
 8006dd8:	e002      	b.n	8006de0 <HAL_SD_ReadBlocks_DMA+0x1bc>
      }

      return HAL_OK;
 8006dda:	2300      	movs	r3, #0
 8006ddc:	e000      	b.n	8006de0 <HAL_SD_ReadBlocks_DMA+0x1bc>
    }
  }
  else
  {
    return HAL_BUSY;
 8006dde:	2302      	movs	r3, #2
  }
}
 8006de0:	4618      	mov	r0, r3
 8006de2:	3730      	adds	r7, #48	; 0x30
 8006de4:	46bd      	mov	sp, r7
 8006de6:	bd80      	pop	{r7, pc}
 8006de8:	08007837 	.word	0x08007837
 8006dec:	080078a9 	.word	0x080078a9
 8006df0:	004005ff 	.word	0x004005ff
 8006df4:	4225858c 	.word	0x4225858c

08006df8 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8006df8:	b580      	push	{r7, lr}
 8006dfa:	b08c      	sub	sp, #48	; 0x30
 8006dfc:	af00      	add	r7, sp, #0
 8006dfe:	60f8      	str	r0, [r7, #12]
 8006e00:	60b9      	str	r1, [r7, #8]
 8006e02:	607a      	str	r2, [r7, #4]
 8006e04:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 8006e0a:	68bb      	ldr	r3, [r7, #8]
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	d107      	bne.n	8006e20 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e14:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8006e1c:	2301      	movs	r3, #1
 8006e1e:	e0ce      	b.n	8006fbe <HAL_SD_WriteBlocks_DMA+0x1c6>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006e26:	b2db      	uxtb	r3, r3
 8006e28:	2b01      	cmp	r3, #1
 8006e2a:	f040 80c7 	bne.w	8006fbc <HAL_SD_WriteBlocks_DMA+0x1c4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	2200      	movs	r2, #0
 8006e32:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8006e34:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006e36:	683b      	ldr	r3, [r7, #0]
 8006e38:	441a      	add	r2, r3
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006e3e:	429a      	cmp	r2, r3
 8006e40:	d907      	bls.n	8006e52 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e46:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8006e4e:	2301      	movs	r3, #1
 8006e50:	e0b5      	b.n	8006fbe <HAL_SD_WriteBlocks_DMA+0x1c6>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	2203      	movs	r2, #3
 8006e56:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	2200      	movs	r2, #0
 8006e60:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable SD Error interrupts */
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e68:	68fa      	ldr	r2, [r7, #12]
 8006e6a:	6812      	ldr	r2, [r2, #0]
 8006e6c:	f443 7306 	orr.w	r3, r3, #536	; 0x218
 8006e70:	f043 0302 	orr.w	r3, r3, #2
 8006e74:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e7a:	4a53      	ldr	r2, [pc, #332]	; (8006fc8 <HAL_SD_WriteBlocks_DMA+0x1d0>)
 8006e7c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e82:	4a52      	ldr	r2, [pc, #328]	; (8006fcc <HAL_SD_WriteBlocks_DMA+0x1d4>)
 8006e84:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e8a:	2200      	movs	r2, #0
 8006e8c:	651a      	str	r2, [r3, #80]	; 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e92:	2b01      	cmp	r3, #1
 8006e94:	d002      	beq.n	8006e9c <HAL_SD_WriteBlocks_DMA+0xa4>
    {
      add *= 512U;
 8006e96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e98:	025b      	lsls	r3, r3, #9
 8006e9a:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Set Block Size for Card */
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006ea4:	4618      	mov	r0, r3
 8006ea6:	f002 ff07 	bl	8009cb8 <SDMMC_CmdBlockLength>
 8006eaa:	62f8      	str	r0, [r7, #44]	; 0x2c
    if(errorstate != HAL_SD_ERROR_NONE)
 8006eac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d00f      	beq.n	8006ed2 <HAL_SD_WriteBlocks_DMA+0xda>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	4a46      	ldr	r2, [pc, #280]	; (8006fd0 <HAL_SD_WriteBlocks_DMA+0x1d8>)
 8006eb8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006ebe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ec0:	431a      	orrs	r2, r3
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	2201      	movs	r2, #1
 8006eca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8006ece:	2301      	movs	r3, #1
 8006ed0:	e075      	b.n	8006fbe <HAL_SD_WriteBlocks_DMA+0x1c6>
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8006ed2:	683b      	ldr	r3, [r7, #0]
 8006ed4:	2b01      	cmp	r3, #1
 8006ed6:	d90a      	bls.n	8006eee <HAL_SD_WriteBlocks_DMA+0xf6>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	22a0      	movs	r2, #160	; 0xa0
 8006edc:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006ee4:	4618      	mov	r0, r3
 8006ee6:	f002 ff6f 	bl	8009dc8 <SDMMC_CmdWriteMultiBlock>
 8006eea:	62f8      	str	r0, [r7, #44]	; 0x2c
 8006eec:	e009      	b.n	8006f02 <HAL_SD_WriteBlocks_DMA+0x10a>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	2290      	movs	r2, #144	; 0x90
 8006ef2:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006efa:	4618      	mov	r0, r3
 8006efc:	f002 ff42 	bl	8009d84 <SDMMC_CmdWriteSingleBlock>
 8006f00:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8006f02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d012      	beq.n	8006f2e <HAL_SD_WriteBlocks_DMA+0x136>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	4a30      	ldr	r2, [pc, #192]	; (8006fd0 <HAL_SD_WriteBlocks_DMA+0x1d8>)
 8006f0e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006f14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f16:	431a      	orrs	r2, r3
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	2201      	movs	r2, #1
 8006f20:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	2200      	movs	r2, #0
 8006f28:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8006f2a:	2301      	movs	r3, #1
 8006f2c:	e047      	b.n	8006fbe <HAL_SD_WriteBlocks_DMA+0x1c6>
    }

    /* Enable SDIO DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 8006f2e:	4b29      	ldr	r3, [pc, #164]	; (8006fd4 <HAL_SD_WriteBlocks_DMA+0x1dc>)
 8006f30:	2201      	movs	r2, #1
 8006f32:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8006f38:	68b9      	ldr	r1, [r7, #8]
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	3380      	adds	r3, #128	; 0x80
 8006f40:	461a      	mov	r2, r3
 8006f42:	683b      	ldr	r3, [r7, #0]
 8006f44:	025b      	lsls	r3, r3, #9
 8006f46:	089b      	lsrs	r3, r3, #2
 8006f48:	f7fd f838 	bl	8003fbc <HAL_DMA_Start_IT>
 8006f4c:	4603      	mov	r3, r0
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d01c      	beq.n	8006f8c <HAL_SD_WriteBlocks_DMA+0x194>
    {
#if defined(SDIO_STA_STBITERR)
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f58:	68fa      	ldr	r2, [r7, #12]
 8006f5a:	6812      	ldr	r2, [r2, #0]
 8006f5c:	f423 7306 	bic.w	r3, r3, #536	; 0x218
 8006f60:	f023 0302 	bic.w	r3, r3, #2
 8006f64:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
#endif /* SDIO_STA_STBITERR */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	4a19      	ldr	r2, [pc, #100]	; (8006fd0 <HAL_SD_WriteBlocks_DMA+0x1d8>)
 8006f6c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f72:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	2201      	movs	r2, #1
 8006f7e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	2200      	movs	r2, #0
 8006f86:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8006f88:	2301      	movs	r3, #1
 8006f8a:	e018      	b.n	8006fbe <HAL_SD_WriteBlocks_DMA+0x1c6>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8006f8c:	f04f 33ff 	mov.w	r3, #4294967295
 8006f90:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8006f92:	683b      	ldr	r3, [r7, #0]
 8006f94:	025b      	lsls	r3, r3, #9
 8006f96:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8006f98:	2390      	movs	r3, #144	; 0x90
 8006f9a:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 8006f9c:	2300      	movs	r3, #0
 8006f9e:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8006fa0:	2300      	movs	r3, #0
 8006fa2:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 8006fa4:	2301      	movs	r3, #1
 8006fa6:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	f107 0210 	add.w	r2, r7, #16
 8006fb0:	4611      	mov	r1, r2
 8006fb2:	4618      	mov	r0, r3
 8006fb4:	f002 fe54 	bl	8009c60 <SDIO_ConfigData>

      return HAL_OK;
 8006fb8:	2300      	movs	r3, #0
 8006fba:	e000      	b.n	8006fbe <HAL_SD_WriteBlocks_DMA+0x1c6>
    }
  }
  else
  {
    return HAL_BUSY;
 8006fbc:	2302      	movs	r3, #2
  }
}
 8006fbe:	4618      	mov	r0, r3
 8006fc0:	3730      	adds	r7, #48	; 0x30
 8006fc2:	46bd      	mov	sp, r7
 8006fc4:	bd80      	pop	{r7, pc}
 8006fc6:	bf00      	nop
 8006fc8:	0800780d 	.word	0x0800780d
 8006fcc:	080078a9 	.word	0x080078a9
 8006fd0:	004005ff 	.word	0x004005ff
 8006fd4:	4225858c 	.word	0x4225858c

08006fd8 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 8006fd8:	b580      	push	{r7, lr}
 8006fda:	b084      	sub	sp, #16
 8006fdc:	af00      	add	r7, sp, #0
 8006fde:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006fe4:	60fb      	str	r3, [r7, #12]

  /* Check for SDIO interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006fec:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d008      	beq.n	8007006 <HAL_SD_IRQHandler+0x2e>
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	f003 0308 	and.w	r3, r3, #8
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d003      	beq.n	8007006 <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 8006ffe:	6878      	ldr	r0, [r7, #4]
 8007000:	f000 fff6 	bl	8007ff0 <SD_Read_IT>
 8007004:	e165      	b.n	80072d2 <HAL_SD_IRQHandler+0x2fa>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) != RESET)
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800700c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007010:	2b00      	cmp	r3, #0
 8007012:	f000 808f 	beq.w	8007134 <HAL_SD_IRQHandler+0x15c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DATAEND);
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800701e:	639a      	str	r2, [r3, #56]	; 0x38

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007026:	687a      	ldr	r2, [r7, #4]
 8007028:	6812      	ldr	r2, [r2, #0]
 800702a:	f423 4343 	bic.w	r3, r3, #49920	; 0xc300
 800702e:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 8007032:	63d3      	str	r3, [r2, #60]	; 0x3c
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF);
#endif /* SDIO_STA_STBITERR */

    hsd->Instance->DCTRL &= ~(SDIO_DCTRL_DTEN);
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	f022 0201 	bic.w	r2, r2, #1
 8007042:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	f003 0308 	and.w	r3, r3, #8
 800704a:	2b00      	cmp	r3, #0
 800704c:	d039      	beq.n	80070c2 <HAL_SD_IRQHandler+0xea>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	f003 0302 	and.w	r3, r3, #2
 8007054:	2b00      	cmp	r3, #0
 8007056:	d104      	bne.n	8007062 <HAL_SD_IRQHandler+0x8a>
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	f003 0320 	and.w	r3, r3, #32
 800705e:	2b00      	cmp	r3, #0
 8007060:	d011      	beq.n	8007086 <HAL_SD_IRQHandler+0xae>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	4618      	mov	r0, r3
 8007068:	f002 fed0 	bl	8009e0c <SDMMC_CmdStopTransfer>
 800706c:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800706e:	68bb      	ldr	r3, [r7, #8]
 8007070:	2b00      	cmp	r3, #0
 8007072:	d008      	beq.n	8007086 <HAL_SD_IRQHandler+0xae>
        {
          hsd->ErrorCode |= errorstate;
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007078:	68bb      	ldr	r3, [r7, #8]
 800707a:	431a      	orrs	r2, r3
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 8007080:	6878      	ldr	r0, [r7, #4]
 8007082:	f000 f943 	bl	800730c <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	f240 523a 	movw	r2, #1338	; 0x53a
 800708e:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	2201      	movs	r2, #1
 8007094:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	2200      	movs	r2, #0
 800709c:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	f003 0301 	and.w	r3, r3, #1
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d104      	bne.n	80070b2 <HAL_SD_IRQHandler+0xda>
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	f003 0302 	and.w	r3, r3, #2
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d003      	beq.n	80070ba <HAL_SD_IRQHandler+0xe2>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 80070b2:	6878      	ldr	r0, [r7, #4]
 80070b4:	f000 f920 	bl	80072f8 <HAL_SD_RxCpltCallback>
 80070b8:	e10b      	b.n	80072d2 <HAL_SD_IRQHandler+0x2fa>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 80070ba:	6878      	ldr	r0, [r7, #4]
 80070bc:	f000 f912 	bl	80072e4 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 80070c0:	e107      	b.n	80072d2 <HAL_SD_IRQHandler+0x2fa>
    else if((context & SD_CONTEXT_DMA) != 0U)
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	f000 8102 	beq.w	80072d2 <HAL_SD_IRQHandler+0x2fa>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	f003 0320 	and.w	r3, r3, #32
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d011      	beq.n	80070fc <HAL_SD_IRQHandler+0x124>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	4618      	mov	r0, r3
 80070de:	f002 fe95 	bl	8009e0c <SDMMC_CmdStopTransfer>
 80070e2:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 80070e4:	68bb      	ldr	r3, [r7, #8]
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	d008      	beq.n	80070fc <HAL_SD_IRQHandler+0x124>
          hsd->ErrorCode |= errorstate;
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80070ee:	68bb      	ldr	r3, [r7, #8]
 80070f0:	431a      	orrs	r2, r3
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 80070f6:	6878      	ldr	r0, [r7, #4]
 80070f8:	f000 f908 	bl	800730c <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	f003 0301 	and.w	r3, r3, #1
 8007102:	2b00      	cmp	r3, #0
 8007104:	f040 80e5 	bne.w	80072d2 <HAL_SD_IRQHandler+0x2fa>
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	f003 0302 	and.w	r3, r3, #2
 800710e:	2b00      	cmp	r3, #0
 8007110:	f040 80df 	bne.w	80072d2 <HAL_SD_IRQHandler+0x2fa>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	f022 0208 	bic.w	r2, r2, #8
 8007122:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	2201      	movs	r2, #1
 8007128:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 800712c:	6878      	ldr	r0, [r7, #4]
 800712e:	f000 f8d9 	bl	80072e4 <HAL_SD_TxCpltCallback>
}
 8007132:	e0ce      	b.n	80072d2 <HAL_SD_IRQHandler+0x2fa>
  else if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800713a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800713e:	2b00      	cmp	r3, #0
 8007140:	d008      	beq.n	8007154 <HAL_SD_IRQHandler+0x17c>
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	f003 0308 	and.w	r3, r3, #8
 8007148:	2b00      	cmp	r3, #0
 800714a:	d003      	beq.n	8007154 <HAL_SD_IRQHandler+0x17c>
    SD_Write_IT(hsd);
 800714c:	6878      	ldr	r0, [r7, #4]
 800714e:	f000 ffa0 	bl	8008092 <SD_Write_IT>
 8007152:	e0be      	b.n	80072d2 <HAL_SD_IRQHandler+0x2fa>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_RXOVERR | SDIO_FLAG_TXUNDERR | SDIO_FLAG_STBITERR) != RESET)
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800715a:	f240 233a 	movw	r3, #570	; 0x23a
 800715e:	4013      	ands	r3, r2
 8007160:	2b00      	cmp	r3, #0
 8007162:	f000 80b6 	beq.w	80072d2 <HAL_SD_IRQHandler+0x2fa>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL) != RESET)
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800716c:	f003 0302 	and.w	r3, r3, #2
 8007170:	2b00      	cmp	r3, #0
 8007172:	d005      	beq.n	8007180 <HAL_SD_IRQHandler+0x1a8>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007178:	f043 0202 	orr.w	r2, r3, #2
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) != RESET)
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007186:	f003 0308 	and.w	r3, r3, #8
 800718a:	2b00      	cmp	r3, #0
 800718c:	d005      	beq.n	800719a <HAL_SD_IRQHandler+0x1c2>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007192:	f043 0208 	orr.w	r2, r3, #8
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR) != RESET)
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80071a0:	f003 0320 	and.w	r3, r3, #32
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	d005      	beq.n	80071b4 <HAL_SD_IRQHandler+0x1dc>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071ac:	f043 0220 	orr.w	r2, r3, #32
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR) != RESET)
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80071ba:	f003 0310 	and.w	r3, r3, #16
 80071be:	2b00      	cmp	r3, #0
 80071c0:	d005      	beq.n	80071ce <HAL_SD_IRQHandler+0x1f6>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071c6:	f043 0210 	orr.w	r2, r3, #16
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR) != RESET)
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80071d4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d005      	beq.n	80071e8 <HAL_SD_IRQHandler+0x210>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071e0:	f043 0208 	orr.w	r2, r3, #8
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS | SDIO_FLAG_STBITERR);
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	f240 723a 	movw	r2, #1850	; 0x73a
 80071f0:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80071f8:	687a      	ldr	r2, [r7, #4]
 80071fa:	6812      	ldr	r2, [r2, #0]
 80071fc:	f423 734e 	bic.w	r3, r3, #824	; 0x338
 8007200:	f023 0302 	bic.w	r3, r3, #2
 8007204:	63d3      	str	r3, [r2, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	4618      	mov	r0, r3
 800720c:	f002 fdfe 	bl	8009e0c <SDMMC_CmdStopTransfer>
 8007210:	4602      	mov	r2, r0
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007216:	431a      	orrs	r2, r3
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	f003 0308 	and.w	r3, r3, #8
 8007222:	2b00      	cmp	r3, #0
 8007224:	d00a      	beq.n	800723c <HAL_SD_IRQHandler+0x264>
      hsd->State = HAL_SD_STATE_READY;
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	2201      	movs	r2, #1
 800722a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	2200      	movs	r2, #0
 8007232:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 8007234:	6878      	ldr	r0, [r7, #4]
 8007236:	f000 f869 	bl	800730c <HAL_SD_ErrorCallback>
}
 800723a:	e04a      	b.n	80072d2 <HAL_SD_IRQHandler+0x2fa>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007242:	2b00      	cmp	r3, #0
 8007244:	d045      	beq.n	80072d2 <HAL_SD_IRQHandler+0x2fa>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	f003 0310 	and.w	r3, r3, #16
 800724c:	2b00      	cmp	r3, #0
 800724e:	d104      	bne.n	800725a <HAL_SD_IRQHandler+0x282>
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	f003 0320 	and.w	r3, r3, #32
 8007256:	2b00      	cmp	r3, #0
 8007258:	d011      	beq.n	800727e <HAL_SD_IRQHandler+0x2a6>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800725e:	4a1f      	ldr	r2, [pc, #124]	; (80072dc <HAL_SD_IRQHandler+0x304>)
 8007260:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007266:	4618      	mov	r0, r3
 8007268:	f7fc ff00 	bl	800406c <HAL_DMA_Abort_IT>
 800726c:	4603      	mov	r3, r0
 800726e:	2b00      	cmp	r3, #0
 8007270:	d02f      	beq.n	80072d2 <HAL_SD_IRQHandler+0x2fa>
          SD_DMATxAbort(hsd->hdmatx);
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007276:	4618      	mov	r0, r3
 8007278:	f000 fb68 	bl	800794c <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 800727c:	e029      	b.n	80072d2 <HAL_SD_IRQHandler+0x2fa>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	f003 0301 	and.w	r3, r3, #1
 8007284:	2b00      	cmp	r3, #0
 8007286:	d104      	bne.n	8007292 <HAL_SD_IRQHandler+0x2ba>
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	f003 0302 	and.w	r3, r3, #2
 800728e:	2b00      	cmp	r3, #0
 8007290:	d011      	beq.n	80072b6 <HAL_SD_IRQHandler+0x2de>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007296:	4a12      	ldr	r2, [pc, #72]	; (80072e0 <HAL_SD_IRQHandler+0x308>)
 8007298:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800729e:	4618      	mov	r0, r3
 80072a0:	f7fc fee4 	bl	800406c <HAL_DMA_Abort_IT>
 80072a4:	4603      	mov	r3, r0
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	d013      	beq.n	80072d2 <HAL_SD_IRQHandler+0x2fa>
          SD_DMARxAbort(hsd->hdmarx);
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072ae:	4618      	mov	r0, r3
 80072b0:	f000 fb83 	bl	80079ba <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 80072b4:	e00d      	b.n	80072d2 <HAL_SD_IRQHandler+0x2fa>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	2200      	movs	r2, #0
 80072ba:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	2201      	movs	r2, #1
 80072c0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	2200      	movs	r2, #0
 80072c8:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 80072ca:	6878      	ldr	r0, [r7, #4]
 80072cc:	f000 f828 	bl	8007320 <HAL_SD_AbortCallback>
}
 80072d0:	e7ff      	b.n	80072d2 <HAL_SD_IRQHandler+0x2fa>
 80072d2:	bf00      	nop
 80072d4:	3710      	adds	r7, #16
 80072d6:	46bd      	mov	sp, r7
 80072d8:	bd80      	pop	{r7, pc}
 80072da:	bf00      	nop
 80072dc:	0800794d 	.word	0x0800794d
 80072e0:	080079bb 	.word	0x080079bb

080072e4 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: Pointer to SD handle
  * @retval None
  */
__weak void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 80072e4:	b480      	push	{r7}
 80072e6:	b083      	sub	sp, #12
 80072e8:	af00      	add	r7, sp, #0
 80072ea:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_TxCpltCallback can be implemented in the user file
   */
}
 80072ec:	bf00      	nop
 80072ee:	370c      	adds	r7, #12
 80072f0:	46bd      	mov	sp, r7
 80072f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072f6:	4770      	bx	lr

080072f8 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 80072f8:	b480      	push	{r7}
 80072fa:	b083      	sub	sp, #12
 80072fc:	af00      	add	r7, sp, #0
 80072fe:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_RxCpltCallback can be implemented in the user file
   */
}
 8007300:	bf00      	nop
 8007302:	370c      	adds	r7, #12
 8007304:	46bd      	mov	sp, r7
 8007306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800730a:	4770      	bx	lr

0800730c <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 800730c:	b480      	push	{r7}
 800730e:	b083      	sub	sp, #12
 8007310:	af00      	add	r7, sp, #0
 8007312:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 8007314:	bf00      	nop
 8007316:	370c      	adds	r7, #12
 8007318:	46bd      	mov	sp, r7
 800731a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800731e:	4770      	bx	lr

08007320 <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 8007320:	b480      	push	{r7}
 8007322:	b083      	sub	sp, #12
 8007324:	af00      	add	r7, sp, #0
 8007326:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_AbortCallback can be implemented in the user file
   */
}
 8007328:	bf00      	nop
 800732a:	370c      	adds	r7, #12
 800732c:	46bd      	mov	sp, r7
 800732e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007332:	4770      	bx	lr

08007334 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8007334:	b480      	push	{r7}
 8007336:	b083      	sub	sp, #12
 8007338:	af00      	add	r7, sp, #0
 800733a:	6078      	str	r0, [r7, #4]
 800733c:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007342:	0f9b      	lsrs	r3, r3, #30
 8007344:	b2da      	uxtb	r2, r3
 8007346:	683b      	ldr	r3, [r7, #0]
 8007348:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800734e:	0e9b      	lsrs	r3, r3, #26
 8007350:	b2db      	uxtb	r3, r3
 8007352:	f003 030f 	and.w	r3, r3, #15
 8007356:	b2da      	uxtb	r2, r3
 8007358:	683b      	ldr	r3, [r7, #0]
 800735a:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007360:	0e1b      	lsrs	r3, r3, #24
 8007362:	b2db      	uxtb	r3, r3
 8007364:	f003 0303 	and.w	r3, r3, #3
 8007368:	b2da      	uxtb	r2, r3
 800736a:	683b      	ldr	r3, [r7, #0]
 800736c:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007372:	0c1b      	lsrs	r3, r3, #16
 8007374:	b2da      	uxtb	r2, r3
 8007376:	683b      	ldr	r3, [r7, #0]
 8007378:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800737e:	0a1b      	lsrs	r3, r3, #8
 8007380:	b2da      	uxtb	r2, r3
 8007382:	683b      	ldr	r3, [r7, #0]
 8007384:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800738a:	b2da      	uxtb	r2, r3
 800738c:	683b      	ldr	r3, [r7, #0]
 800738e:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007394:	0d1b      	lsrs	r3, r3, #20
 8007396:	b29a      	uxth	r2, r3
 8007398:	683b      	ldr	r3, [r7, #0]
 800739a:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80073a0:	0c1b      	lsrs	r3, r3, #16
 80073a2:	b2db      	uxtb	r3, r3
 80073a4:	f003 030f 	and.w	r3, r3, #15
 80073a8:	b2da      	uxtb	r2, r3
 80073aa:	683b      	ldr	r3, [r7, #0]
 80073ac:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80073b2:	0bdb      	lsrs	r3, r3, #15
 80073b4:	b2db      	uxtb	r3, r3
 80073b6:	f003 0301 	and.w	r3, r3, #1
 80073ba:	b2da      	uxtb	r2, r3
 80073bc:	683b      	ldr	r3, [r7, #0]
 80073be:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80073c4:	0b9b      	lsrs	r3, r3, #14
 80073c6:	b2db      	uxtb	r3, r3
 80073c8:	f003 0301 	and.w	r3, r3, #1
 80073cc:	b2da      	uxtb	r2, r3
 80073ce:	683b      	ldr	r3, [r7, #0]
 80073d0:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80073d6:	0b5b      	lsrs	r3, r3, #13
 80073d8:	b2db      	uxtb	r3, r3
 80073da:	f003 0301 	and.w	r3, r3, #1
 80073de:	b2da      	uxtb	r2, r3
 80073e0:	683b      	ldr	r3, [r7, #0]
 80073e2:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80073e8:	0b1b      	lsrs	r3, r3, #12
 80073ea:	b2db      	uxtb	r3, r3
 80073ec:	f003 0301 	and.w	r3, r3, #1
 80073f0:	b2da      	uxtb	r2, r3
 80073f2:	683b      	ldr	r3, [r7, #0]
 80073f4:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 80073f6:	683b      	ldr	r3, [r7, #0]
 80073f8:	2200      	movs	r2, #0
 80073fa:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007400:	2b00      	cmp	r3, #0
 8007402:	d163      	bne.n	80074cc <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007408:	009a      	lsls	r2, r3, #2
 800740a:	f640 73fc 	movw	r3, #4092	; 0xffc
 800740e:	4013      	ands	r3, r2
 8007410:	687a      	ldr	r2, [r7, #4]
 8007412:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8007414:	0f92      	lsrs	r2, r2, #30
 8007416:	431a      	orrs	r2, r3
 8007418:	683b      	ldr	r3, [r7, #0]
 800741a:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007420:	0edb      	lsrs	r3, r3, #27
 8007422:	b2db      	uxtb	r3, r3
 8007424:	f003 0307 	and.w	r3, r3, #7
 8007428:	b2da      	uxtb	r2, r3
 800742a:	683b      	ldr	r3, [r7, #0]
 800742c:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007432:	0e1b      	lsrs	r3, r3, #24
 8007434:	b2db      	uxtb	r3, r3
 8007436:	f003 0307 	and.w	r3, r3, #7
 800743a:	b2da      	uxtb	r2, r3
 800743c:	683b      	ldr	r3, [r7, #0]
 800743e:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007444:	0d5b      	lsrs	r3, r3, #21
 8007446:	b2db      	uxtb	r3, r3
 8007448:	f003 0307 	and.w	r3, r3, #7
 800744c:	b2da      	uxtb	r2, r3
 800744e:	683b      	ldr	r3, [r7, #0]
 8007450:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007456:	0c9b      	lsrs	r3, r3, #18
 8007458:	b2db      	uxtb	r3, r3
 800745a:	f003 0307 	and.w	r3, r3, #7
 800745e:	b2da      	uxtb	r2, r3
 8007460:	683b      	ldr	r3, [r7, #0]
 8007462:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007468:	0bdb      	lsrs	r3, r3, #15
 800746a:	b2db      	uxtb	r3, r3
 800746c:	f003 0307 	and.w	r3, r3, #7
 8007470:	b2da      	uxtb	r2, r3
 8007472:	683b      	ldr	r3, [r7, #0]
 8007474:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8007476:	683b      	ldr	r3, [r7, #0]
 8007478:	691b      	ldr	r3, [r3, #16]
 800747a:	1c5a      	adds	r2, r3, #1
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8007480:	683b      	ldr	r3, [r7, #0]
 8007482:	7e1b      	ldrb	r3, [r3, #24]
 8007484:	b2db      	uxtb	r3, r3
 8007486:	f003 0307 	and.w	r3, r3, #7
 800748a:	3302      	adds	r3, #2
 800748c:	2201      	movs	r2, #1
 800748e:	fa02 f303 	lsl.w	r3, r2, r3
 8007492:	687a      	ldr	r2, [r7, #4]
 8007494:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8007496:	fb02 f203 	mul.w	r2, r2, r3
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800749e:	683b      	ldr	r3, [r7, #0]
 80074a0:	7a1b      	ldrb	r3, [r3, #8]
 80074a2:	b2db      	uxtb	r3, r3
 80074a4:	f003 030f 	and.w	r3, r3, #15
 80074a8:	2201      	movs	r2, #1
 80074aa:	409a      	lsls	r2, r3
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80074b4:	687a      	ldr	r2, [r7, #4]
 80074b6:	6d92      	ldr	r2, [r2, #88]	; 0x58
 80074b8:	0a52      	lsrs	r2, r2, #9
 80074ba:	fb02 f203 	mul.w	r2, r2, r3
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80074c8:	661a      	str	r2, [r3, #96]	; 0x60
 80074ca:	e031      	b.n	8007530 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80074d0:	2b01      	cmp	r3, #1
 80074d2:	d11d      	bne.n	8007510 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80074d8:	041b      	lsls	r3, r3, #16
 80074da:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80074e2:	0c1b      	lsrs	r3, r3, #16
 80074e4:	431a      	orrs	r2, r3
 80074e6:	683b      	ldr	r3, [r7, #0]
 80074e8:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 80074ea:	683b      	ldr	r3, [r7, #0]
 80074ec:	691b      	ldr	r3, [r3, #16]
 80074ee:	3301      	adds	r3, #1
 80074f0:	029a      	lsls	r2, r3, #10
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007504:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	661a      	str	r2, [r3, #96]	; 0x60
 800750e:	e00f      	b.n	8007530 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	4a58      	ldr	r2, [pc, #352]	; (8007678 <HAL_SD_GetCardCSD+0x344>)
 8007516:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800751c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	2201      	movs	r2, #1
 8007528:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800752c:	2301      	movs	r3, #1
 800752e:	e09d      	b.n	800766c <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007534:	0b9b      	lsrs	r3, r3, #14
 8007536:	b2db      	uxtb	r3, r3
 8007538:	f003 0301 	and.w	r3, r3, #1
 800753c:	b2da      	uxtb	r2, r3
 800753e:	683b      	ldr	r3, [r7, #0]
 8007540:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007546:	09db      	lsrs	r3, r3, #7
 8007548:	b2db      	uxtb	r3, r3
 800754a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800754e:	b2da      	uxtb	r2, r3
 8007550:	683b      	ldr	r3, [r7, #0]
 8007552:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007558:	b2db      	uxtb	r3, r3
 800755a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800755e:	b2da      	uxtb	r2, r3
 8007560:	683b      	ldr	r3, [r7, #0]
 8007562:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007568:	0fdb      	lsrs	r3, r3, #31
 800756a:	b2da      	uxtb	r2, r3
 800756c:	683b      	ldr	r3, [r7, #0]
 800756e:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007574:	0f5b      	lsrs	r3, r3, #29
 8007576:	b2db      	uxtb	r3, r3
 8007578:	f003 0303 	and.w	r3, r3, #3
 800757c:	b2da      	uxtb	r2, r3
 800757e:	683b      	ldr	r3, [r7, #0]
 8007580:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007586:	0e9b      	lsrs	r3, r3, #26
 8007588:	b2db      	uxtb	r3, r3
 800758a:	f003 0307 	and.w	r3, r3, #7
 800758e:	b2da      	uxtb	r2, r3
 8007590:	683b      	ldr	r3, [r7, #0]
 8007592:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007598:	0d9b      	lsrs	r3, r3, #22
 800759a:	b2db      	uxtb	r3, r3
 800759c:	f003 030f 	and.w	r3, r3, #15
 80075a0:	b2da      	uxtb	r2, r3
 80075a2:	683b      	ldr	r3, [r7, #0]
 80075a4:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80075aa:	0d5b      	lsrs	r3, r3, #21
 80075ac:	b2db      	uxtb	r3, r3
 80075ae:	f003 0301 	and.w	r3, r3, #1
 80075b2:	b2da      	uxtb	r2, r3
 80075b4:	683b      	ldr	r3, [r7, #0]
 80075b6:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 80075ba:	683b      	ldr	r3, [r7, #0]
 80075bc:	2200      	movs	r2, #0
 80075be:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80075c6:	0c1b      	lsrs	r3, r3, #16
 80075c8:	b2db      	uxtb	r3, r3
 80075ca:	f003 0301 	and.w	r3, r3, #1
 80075ce:	b2da      	uxtb	r2, r3
 80075d0:	683b      	ldr	r3, [r7, #0]
 80075d2:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80075da:	0bdb      	lsrs	r3, r3, #15
 80075dc:	b2db      	uxtb	r3, r3
 80075de:	f003 0301 	and.w	r3, r3, #1
 80075e2:	b2da      	uxtb	r2, r3
 80075e4:	683b      	ldr	r3, [r7, #0]
 80075e6:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80075ee:	0b9b      	lsrs	r3, r3, #14
 80075f0:	b2db      	uxtb	r3, r3
 80075f2:	f003 0301 	and.w	r3, r3, #1
 80075f6:	b2da      	uxtb	r2, r3
 80075f8:	683b      	ldr	r3, [r7, #0]
 80075fa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007602:	0b5b      	lsrs	r3, r3, #13
 8007604:	b2db      	uxtb	r3, r3
 8007606:	f003 0301 	and.w	r3, r3, #1
 800760a:	b2da      	uxtb	r2, r3
 800760c:	683b      	ldr	r3, [r7, #0]
 800760e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007616:	0b1b      	lsrs	r3, r3, #12
 8007618:	b2db      	uxtb	r3, r3
 800761a:	f003 0301 	and.w	r3, r3, #1
 800761e:	b2da      	uxtb	r2, r3
 8007620:	683b      	ldr	r3, [r7, #0]
 8007622:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800762a:	0a9b      	lsrs	r3, r3, #10
 800762c:	b2db      	uxtb	r3, r3
 800762e:	f003 0303 	and.w	r3, r3, #3
 8007632:	b2da      	uxtb	r2, r3
 8007634:	683b      	ldr	r3, [r7, #0]
 8007636:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800763e:	0a1b      	lsrs	r3, r3, #8
 8007640:	b2db      	uxtb	r3, r3
 8007642:	f003 0303 	and.w	r3, r3, #3
 8007646:	b2da      	uxtb	r2, r3
 8007648:	683b      	ldr	r3, [r7, #0]
 800764a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007652:	085b      	lsrs	r3, r3, #1
 8007654:	b2db      	uxtb	r3, r3
 8007656:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800765a:	b2da      	uxtb	r2, r3
 800765c:	683b      	ldr	r3, [r7, #0]
 800765e:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 8007662:	683b      	ldr	r3, [r7, #0]
 8007664:	2201      	movs	r2, #1
 8007666:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800766a:	2300      	movs	r3, #0
}
 800766c:	4618      	mov	r0, r3
 800766e:	370c      	adds	r7, #12
 8007670:	46bd      	mov	sp, r7
 8007672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007676:	4770      	bx	lr
 8007678:	004005ff 	.word	0x004005ff

0800767c <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800767c:	b480      	push	{r7}
 800767e:	b083      	sub	sp, #12
 8007680:	af00      	add	r7, sp, #0
 8007682:	6078      	str	r0, [r7, #4]
 8007684:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800768a:	683b      	ldr	r3, [r7, #0]
 800768c:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007692:	683b      	ldr	r3, [r7, #0]
 8007694:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800769a:	683b      	ldr	r3, [r7, #0]
 800769c:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80076a2:	683b      	ldr	r3, [r7, #0]
 80076a4:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80076aa:	683b      	ldr	r3, [r7, #0]
 80076ac:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80076b2:	683b      	ldr	r3, [r7, #0]
 80076b4:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80076ba:	683b      	ldr	r3, [r7, #0]
 80076bc:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80076c2:	683b      	ldr	r3, [r7, #0]
 80076c4:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 80076c6:	2300      	movs	r3, #0
}
 80076c8:	4618      	mov	r0, r3
 80076ca:	370c      	adds	r7, #12
 80076cc:	46bd      	mov	sp, r7
 80076ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076d2:	4770      	bx	lr

080076d4 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 80076d4:	b5b0      	push	{r4, r5, r7, lr}
 80076d6:	b08e      	sub	sp, #56	; 0x38
 80076d8:	af04      	add	r7, sp, #16
 80076da:	6078      	str	r0, [r7, #4]
 80076dc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	2203      	movs	r2, #3
 80076e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80076ea:	2b03      	cmp	r3, #3
 80076ec:	d02e      	beq.n	800774c <HAL_SD_ConfigWideBusOperation+0x78>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 80076ee:	683b      	ldr	r3, [r7, #0]
 80076f0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80076f4:	d106      	bne.n	8007704 <HAL_SD_ConfigWideBusOperation+0x30>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076fa:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	639a      	str	r2, [r3, #56]	; 0x38
 8007702:	e029      	b.n	8007758 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 8007704:	683b      	ldr	r3, [r7, #0]
 8007706:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800770a:	d10a      	bne.n	8007722 <HAL_SD_ConfigWideBusOperation+0x4e>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800770c:	6878      	ldr	r0, [r7, #4]
 800770e:	f000 fb0f 	bl	8007d30 <SD_WideBus_Enable>
 8007712:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007718:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800771a:	431a      	orrs	r2, r3
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	639a      	str	r2, [r3, #56]	; 0x38
 8007720:	e01a      	b.n	8007758 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 8007722:	683b      	ldr	r3, [r7, #0]
 8007724:	2b00      	cmp	r3, #0
 8007726:	d10a      	bne.n	800773e <HAL_SD_ConfigWideBusOperation+0x6a>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8007728:	6878      	ldr	r0, [r7, #4]
 800772a:	f000 fb4c 	bl	8007dc6 <SD_WideBus_Disable>
 800772e:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007734:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007736:	431a      	orrs	r2, r3
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	639a      	str	r2, [r3, #56]	; 0x38
 800773c:	e00c      	b.n	8007758 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007742:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	639a      	str	r2, [r3, #56]	; 0x38
 800774a:	e005      	b.n	8007758 <HAL_SD_ConfigWideBusOperation+0x84>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007750:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800775c:	2b00      	cmp	r3, #0
 800775e:	d009      	beq.n	8007774 <HAL_SD_ConfigWideBusOperation+0xa0>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	4a18      	ldr	r2, [pc, #96]	; (80077c8 <HAL_SD_ConfigWideBusOperation+0xf4>)
 8007766:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	2201      	movs	r2, #1
 800776c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8007770:	2301      	movs	r3, #1
 8007772:	e024      	b.n	80077be <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	685b      	ldr	r3, [r3, #4]
 8007778:	60fb      	str	r3, [r7, #12]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	689b      	ldr	r3, [r3, #8]
 800777e:	613b      	str	r3, [r7, #16]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	68db      	ldr	r3, [r3, #12]
 8007784:	617b      	str	r3, [r7, #20]
    Init.BusWide             = WideMode;
 8007786:	683b      	ldr	r3, [r7, #0]
 8007788:	61bb      	str	r3, [r7, #24]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	695b      	ldr	r3, [r3, #20]
 800778e:	61fb      	str	r3, [r7, #28]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	699b      	ldr	r3, [r3, #24]
 8007794:	623b      	str	r3, [r7, #32]
    (void)SDIO_Init(hsd->Instance, Init);
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	681d      	ldr	r5, [r3, #0]
 800779a:	466c      	mov	r4, sp
 800779c:	f107 0318 	add.w	r3, r7, #24
 80077a0:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80077a4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80077a8:	f107 030c 	add.w	r3, r7, #12
 80077ac:	cb0e      	ldmia	r3, {r1, r2, r3}
 80077ae:	4628      	mov	r0, r5
 80077b0:	f002 f9a6 	bl	8009b00 <SDIO_Init>
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	2201      	movs	r2, #1
 80077b8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80077bc:	2300      	movs	r3, #0
}
 80077be:	4618      	mov	r0, r3
 80077c0:	3728      	adds	r7, #40	; 0x28
 80077c2:	46bd      	mov	sp, r7
 80077c4:	bdb0      	pop	{r4, r5, r7, pc}
 80077c6:	bf00      	nop
 80077c8:	004005ff 	.word	0x004005ff

080077cc <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 80077cc:	b580      	push	{r7, lr}
 80077ce:	b086      	sub	sp, #24
 80077d0:	af00      	add	r7, sp, #0
 80077d2:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 80077d4:	2300      	movs	r3, #0
 80077d6:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 80077d8:	f107 030c 	add.w	r3, r7, #12
 80077dc:	4619      	mov	r1, r3
 80077de:	6878      	ldr	r0, [r7, #4]
 80077e0:	f000 fa7e 	bl	8007ce0 <SD_SendStatus>
 80077e4:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80077e6:	697b      	ldr	r3, [r7, #20]
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	d005      	beq.n	80077f8 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80077f0:	697b      	ldr	r3, [r7, #20]
 80077f2:	431a      	orrs	r2, r3
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	0a5b      	lsrs	r3, r3, #9
 80077fc:	f003 030f 	and.w	r3, r3, #15
 8007800:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8007802:	693b      	ldr	r3, [r7, #16]
}
 8007804:	4618      	mov	r0, r3
 8007806:	3718      	adds	r7, #24
 8007808:	46bd      	mov	sp, r7
 800780a:	bd80      	pop	{r7, pc}

0800780c <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800780c:	b480      	push	{r7}
 800780e:	b085      	sub	sp, #20
 8007810:	af00      	add	r7, sp, #0
 8007812:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007818:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DATAEND));
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007828:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800782a:	bf00      	nop
 800782c:	3714      	adds	r7, #20
 800782e:	46bd      	mov	sp, r7
 8007830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007834:	4770      	bx	lr

08007836 <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8007836:	b580      	push	{r7, lr}
 8007838:	b084      	sub	sp, #16
 800783a:	af00      	add	r7, sp, #0
 800783c:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007842:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007848:	2b82      	cmp	r3, #130	; 0x82
 800784a:	d111      	bne.n	8007870 <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	4618      	mov	r0, r3
 8007852:	f002 fadb 	bl	8009e0c <SDMMC_CmdStopTransfer>
 8007856:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007858:	68bb      	ldr	r3, [r7, #8]
 800785a:	2b00      	cmp	r3, #0
 800785c:	d008      	beq.n	8007870 <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007862:	68bb      	ldr	r3, [r7, #8]
 8007864:	431a      	orrs	r2, r3
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 800786a:	68f8      	ldr	r0, [r7, #12]
 800786c:	f7ff fd4e 	bl	800730c <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	f022 0208 	bic.w	r2, r2, #8
 800787e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	f240 523a 	movw	r2, #1338	; 0x53a
 8007888:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 800788a:	68fb      	ldr	r3, [r7, #12]
 800788c:	2201      	movs	r2, #1
 800788e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	2200      	movs	r2, #0
 8007896:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 8007898:	68f8      	ldr	r0, [r7, #12]
 800789a:	f7ff fd2d 	bl	80072f8 <HAL_SD_RxCpltCallback>
#endif
}
 800789e:	bf00      	nop
 80078a0:	3710      	adds	r7, #16
 80078a2:	46bd      	mov	sp, r7
 80078a4:	bd80      	pop	{r7, pc}
	...

080078a8 <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 80078a8:	b580      	push	{r7, lr}
 80078aa:	b086      	sub	sp, #24
 80078ac:	af00      	add	r7, sp, #0
 80078ae:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078b4:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 80078b6:	6878      	ldr	r0, [r7, #4]
 80078b8:	f7fc fd84 	bl	80043c4 <HAL_DMA_GetError>
 80078bc:	4603      	mov	r3, r0
 80078be:	2b02      	cmp	r3, #2
 80078c0:	d03e      	beq.n	8007940 <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 80078c2:	697b      	ldr	r3, [r7, #20]
 80078c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80078c8:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 80078ca:	697b      	ldr	r3, [r7, #20]
 80078cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80078ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80078d0:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 80078d2:	693b      	ldr	r3, [r7, #16]
 80078d4:	2b01      	cmp	r3, #1
 80078d6:	d002      	beq.n	80078de <SD_DMAError+0x36>
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	2b01      	cmp	r3, #1
 80078dc:	d12d      	bne.n	800793a <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80078de:	697b      	ldr	r3, [r7, #20]
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	4a19      	ldr	r2, [pc, #100]	; (8007948 <SD_DMAError+0xa0>)
 80078e4:	639a      	str	r2, [r3, #56]	; 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 80078e6:	697b      	ldr	r3, [r7, #20]
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80078ec:	697b      	ldr	r3, [r7, #20]
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 80078f4:	63da      	str	r2, [r3, #60]	; 0x3c
        SDIO_IT_TXUNDERR| SDIO_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 80078f6:	697b      	ldr	r3, [r7, #20]
 80078f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078fa:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80078fe:	697b      	ldr	r3, [r7, #20]
 8007900:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 8007902:	6978      	ldr	r0, [r7, #20]
 8007904:	f7ff ff62 	bl	80077cc <HAL_SD_GetCardState>
 8007908:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800790a:	68bb      	ldr	r3, [r7, #8]
 800790c:	2b06      	cmp	r3, #6
 800790e:	d002      	beq.n	8007916 <SD_DMAError+0x6e>
 8007910:	68bb      	ldr	r3, [r7, #8]
 8007912:	2b05      	cmp	r3, #5
 8007914:	d10a      	bne.n	800792c <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8007916:	697b      	ldr	r3, [r7, #20]
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	4618      	mov	r0, r3
 800791c:	f002 fa76 	bl	8009e0c <SDMMC_CmdStopTransfer>
 8007920:	4602      	mov	r2, r0
 8007922:	697b      	ldr	r3, [r7, #20]
 8007924:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007926:	431a      	orrs	r2, r3
 8007928:	697b      	ldr	r3, [r7, #20]
 800792a:	639a      	str	r2, [r3, #56]	; 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 800792c:	697b      	ldr	r3, [r7, #20]
 800792e:	2201      	movs	r2, #1
 8007930:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8007934:	697b      	ldr	r3, [r7, #20]
 8007936:	2200      	movs	r2, #0
 8007938:	631a      	str	r2, [r3, #48]	; 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 800793a:	6978      	ldr	r0, [r7, #20]
 800793c:	f7ff fce6 	bl	800730c <HAL_SD_ErrorCallback>
#endif
  }
}
 8007940:	bf00      	nop
 8007942:	3718      	adds	r7, #24
 8007944:	46bd      	mov	sp, r7
 8007946:	bd80      	pop	{r7, pc}
 8007948:	004005ff 	.word	0x004005ff

0800794c <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 800794c:	b580      	push	{r7, lr}
 800794e:	b084      	sub	sp, #16
 8007950:	af00      	add	r7, sp, #0
 8007952:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007958:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	f240 523a 	movw	r2, #1338	; 0x53a
 8007962:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8007964:	68f8      	ldr	r0, [r7, #12]
 8007966:	f7ff ff31 	bl	80077cc <HAL_SD_GetCardState>
 800796a:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	2201      	movs	r2, #1
 8007970:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8007974:	68fb      	ldr	r3, [r7, #12]
 8007976:	2200      	movs	r2, #0
 8007978:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800797a:	68bb      	ldr	r3, [r7, #8]
 800797c:	2b06      	cmp	r3, #6
 800797e:	d002      	beq.n	8007986 <SD_DMATxAbort+0x3a>
 8007980:	68bb      	ldr	r3, [r7, #8]
 8007982:	2b05      	cmp	r3, #5
 8007984:	d10a      	bne.n	800799c <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	4618      	mov	r0, r3
 800798c:	f002 fa3e 	bl	8009e0c <SDMMC_CmdStopTransfer>
 8007990:	4602      	mov	r2, r0
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007996:	431a      	orrs	r2, r3
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	d103      	bne.n	80079ac <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 80079a4:	68f8      	ldr	r0, [r7, #12]
 80079a6:	f7ff fcbb 	bl	8007320 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 80079aa:	e002      	b.n	80079b2 <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 80079ac:	68f8      	ldr	r0, [r7, #12]
 80079ae:	f7ff fcad 	bl	800730c <HAL_SD_ErrorCallback>
}
 80079b2:	bf00      	nop
 80079b4:	3710      	adds	r7, #16
 80079b6:	46bd      	mov	sp, r7
 80079b8:	bd80      	pop	{r7, pc}

080079ba <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 80079ba:	b580      	push	{r7, lr}
 80079bc:	b084      	sub	sp, #16
 80079be:	af00      	add	r7, sp, #0
 80079c0:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079c6:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	f240 523a 	movw	r2, #1338	; 0x53a
 80079d0:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 80079d2:	68f8      	ldr	r0, [r7, #12]
 80079d4:	f7ff fefa 	bl	80077cc <HAL_SD_GetCardState>
 80079d8:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	2201      	movs	r2, #1
 80079de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	2200      	movs	r2, #0
 80079e6:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 80079e8:	68bb      	ldr	r3, [r7, #8]
 80079ea:	2b06      	cmp	r3, #6
 80079ec:	d002      	beq.n	80079f4 <SD_DMARxAbort+0x3a>
 80079ee:	68bb      	ldr	r3, [r7, #8]
 80079f0:	2b05      	cmp	r3, #5
 80079f2:	d10a      	bne.n	8007a0a <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 80079f4:	68fb      	ldr	r3, [r7, #12]
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	4618      	mov	r0, r3
 80079fa:	f002 fa07 	bl	8009e0c <SDMMC_CmdStopTransfer>
 80079fe:	4602      	mov	r2, r0
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a04:	431a      	orrs	r2, r3
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8007a0a:	68fb      	ldr	r3, [r7, #12]
 8007a0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	d103      	bne.n	8007a1a <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8007a12:	68f8      	ldr	r0, [r7, #12]
 8007a14:	f7ff fc84 	bl	8007320 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8007a18:	e002      	b.n	8007a20 <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8007a1a:	68f8      	ldr	r0, [r7, #12]
 8007a1c:	f7ff fc76 	bl	800730c <HAL_SD_ErrorCallback>
}
 8007a20:	bf00      	nop
 8007a22:	3710      	adds	r7, #16
 8007a24:	46bd      	mov	sp, r7
 8007a26:	bd80      	pop	{r7, pc}

08007a28 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8007a28:	b5b0      	push	{r4, r5, r7, lr}
 8007a2a:	b094      	sub	sp, #80	; 0x50
 8007a2c:	af04      	add	r7, sp, #16
 8007a2e:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8007a30:	2301      	movs	r3, #1
 8007a32:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	4618      	mov	r0, r3
 8007a3a:	f002 f8b9 	bl	8009bb0 <SDIO_GetPowerState>
 8007a3e:	4603      	mov	r3, r0
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	d102      	bne.n	8007a4a <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8007a44:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8007a48:	e0b7      	b.n	8007bba <SD_InitCard+0x192>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007a4e:	2b03      	cmp	r3, #3
 8007a50:	d02f      	beq.n	8007ab2 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	4618      	mov	r0, r3
 8007a58:	f002 fae2 	bl	800a020 <SDMMC_CmdSendCID>
 8007a5c:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8007a5e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	d001      	beq.n	8007a68 <SD_InitCard+0x40>
    {
      return errorstate;
 8007a64:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007a66:	e0a8      	b.n	8007bba <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	2100      	movs	r1, #0
 8007a6e:	4618      	mov	r0, r3
 8007a70:	f002 f8e3 	bl	8009c3a <SDIO_GetResponse>
 8007a74:	4602      	mov	r2, r0
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	2104      	movs	r1, #4
 8007a80:	4618      	mov	r0, r3
 8007a82:	f002 f8da 	bl	8009c3a <SDIO_GetResponse>
 8007a86:	4602      	mov	r2, r0
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	2108      	movs	r1, #8
 8007a92:	4618      	mov	r0, r3
 8007a94:	f002 f8d1 	bl	8009c3a <SDIO_GetResponse>
 8007a98:	4602      	mov	r2, r0
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	210c      	movs	r1, #12
 8007aa4:	4618      	mov	r0, r3
 8007aa6:	f002 f8c8 	bl	8009c3a <SDIO_GetResponse>
 8007aaa:	4602      	mov	r2, r0
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007ab6:	2b03      	cmp	r3, #3
 8007ab8:	d00d      	beq.n	8007ad6 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	f107 020e 	add.w	r2, r7, #14
 8007ac2:	4611      	mov	r1, r2
 8007ac4:	4618      	mov	r0, r3
 8007ac6:	f002 fae8 	bl	800a09a <SDMMC_CmdSetRelAdd>
 8007aca:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8007acc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	d001      	beq.n	8007ad6 <SD_InitCard+0xae>
    {
      return errorstate;
 8007ad2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007ad4:	e071      	b.n	8007bba <SD_InitCard+0x192>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007ada:	2b03      	cmp	r3, #3
 8007adc:	d036      	beq.n	8007b4c <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8007ade:	89fb      	ldrh	r3, [r7, #14]
 8007ae0:	461a      	mov	r2, r3
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	681a      	ldr	r2, [r3, #0]
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007aee:	041b      	lsls	r3, r3, #16
 8007af0:	4619      	mov	r1, r3
 8007af2:	4610      	mov	r0, r2
 8007af4:	f002 fab2 	bl	800a05c <SDMMC_CmdSendCSD>
 8007af8:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8007afa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	d001      	beq.n	8007b04 <SD_InitCard+0xdc>
    {
      return errorstate;
 8007b00:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007b02:	e05a      	b.n	8007bba <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	2100      	movs	r1, #0
 8007b0a:	4618      	mov	r0, r3
 8007b0c:	f002 f895 	bl	8009c3a <SDIO_GetResponse>
 8007b10:	4602      	mov	r2, r0
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	2104      	movs	r1, #4
 8007b1c:	4618      	mov	r0, r3
 8007b1e:	f002 f88c 	bl	8009c3a <SDIO_GetResponse>
 8007b22:	4602      	mov	r2, r0
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	2108      	movs	r1, #8
 8007b2e:	4618      	mov	r0, r3
 8007b30:	f002 f883 	bl	8009c3a <SDIO_GetResponse>
 8007b34:	4602      	mov	r2, r0
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	210c      	movs	r1, #12
 8007b40:	4618      	mov	r0, r3
 8007b42:	f002 f87a 	bl	8009c3a <SDIO_GetResponse>
 8007b46:	4602      	mov	r2, r0
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	2104      	movs	r1, #4
 8007b52:	4618      	mov	r0, r3
 8007b54:	f002 f871 	bl	8009c3a <SDIO_GetResponse>
 8007b58:	4603      	mov	r3, r0
 8007b5a:	0d1a      	lsrs	r2, r3, #20
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8007b60:	f107 0310 	add.w	r3, r7, #16
 8007b64:	4619      	mov	r1, r3
 8007b66:	6878      	ldr	r0, [r7, #4]
 8007b68:	f7ff fbe4 	bl	8007334 <HAL_SD_GetCardCSD>
 8007b6c:	4603      	mov	r3, r0
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	d002      	beq.n	8007b78 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007b72:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8007b76:	e020      	b.n	8007bba <SD_InitCard+0x192>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	6819      	ldr	r1, [r3, #0]
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007b80:	041b      	lsls	r3, r3, #16
 8007b82:	f04f 0400 	mov.w	r4, #0
 8007b86:	461a      	mov	r2, r3
 8007b88:	4623      	mov	r3, r4
 8007b8a:	4608      	mov	r0, r1
 8007b8c:	f002 f960 	bl	8009e50 <SDMMC_CmdSelDesel>
 8007b90:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8007b92:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	d001      	beq.n	8007b9c <SD_InitCard+0x174>
  {
    return errorstate;
 8007b98:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007b9a:	e00e      	b.n	8007bba <SD_InitCard+0x192>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	681d      	ldr	r5, [r3, #0]
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	466c      	mov	r4, sp
 8007ba4:	f103 0210 	add.w	r2, r3, #16
 8007ba8:	ca07      	ldmia	r2, {r0, r1, r2}
 8007baa:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8007bae:	3304      	adds	r3, #4
 8007bb0:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007bb2:	4628      	mov	r0, r5
 8007bb4:	f001 ffa4 	bl	8009b00 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8007bb8:	2300      	movs	r3, #0
}
 8007bba:	4618      	mov	r0, r3
 8007bbc:	3740      	adds	r7, #64	; 0x40
 8007bbe:	46bd      	mov	sp, r7
 8007bc0:	bdb0      	pop	{r4, r5, r7, pc}
	...

08007bc4 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8007bc4:	b580      	push	{r7, lr}
 8007bc6:	b086      	sub	sp, #24
 8007bc8:	af00      	add	r7, sp, #0
 8007bca:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007bcc:	2300      	movs	r3, #0
 8007bce:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8007bd0:	2300      	movs	r3, #0
 8007bd2:	617b      	str	r3, [r7, #20]
 8007bd4:	2300      	movs	r3, #0
 8007bd6:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	4618      	mov	r0, r3
 8007bde:	f002 f95a 	bl	8009e96 <SDMMC_CmdGoIdleState>
 8007be2:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007be4:	68fb      	ldr	r3, [r7, #12]
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	d001      	beq.n	8007bee <SD_PowerON+0x2a>
  {
    return errorstate;
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	e072      	b.n	8007cd4 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	4618      	mov	r0, r3
 8007bf4:	f002 f96d 	bl	8009ed2 <SDMMC_CmdOperCond>
 8007bf8:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	2b00      	cmp	r3, #0
 8007bfe:	d00d      	beq.n	8007c1c <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	2200      	movs	r2, #0
 8007c04:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	4618      	mov	r0, r3
 8007c0c:	f002 f943 	bl	8009e96 <SDMMC_CmdGoIdleState>
 8007c10:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007c12:	68fb      	ldr	r3, [r7, #12]
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	d004      	beq.n	8007c22 <SD_PowerON+0x5e>
    {
      return errorstate;
 8007c18:	68fb      	ldr	r3, [r7, #12]
 8007c1a:	e05b      	b.n	8007cd4 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	2201      	movs	r2, #1
 8007c20:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007c26:	2b01      	cmp	r3, #1
 8007c28:	d137      	bne.n	8007c9a <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	2100      	movs	r1, #0
 8007c30:	4618      	mov	r0, r3
 8007c32:	f002 f96d 	bl	8009f10 <SDMMC_CmdAppCommand>
 8007c36:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	d02d      	beq.n	8007c9a <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007c3e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8007c42:	e047      	b.n	8007cd4 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	2100      	movs	r1, #0
 8007c4a:	4618      	mov	r0, r3
 8007c4c:	f002 f960 	bl	8009f10 <SDMMC_CmdAppCommand>
 8007c50:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007c52:	68fb      	ldr	r3, [r7, #12]
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	d001      	beq.n	8007c5c <SD_PowerON+0x98>
    {
      return errorstate;
 8007c58:	68fb      	ldr	r3, [r7, #12]
 8007c5a:	e03b      	b.n	8007cd4 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	491e      	ldr	r1, [pc, #120]	; (8007cdc <SD_PowerON+0x118>)
 8007c62:	4618      	mov	r0, r3
 8007c64:	f002 f976 	bl	8009f54 <SDMMC_CmdAppOperCommand>
 8007c68:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	2b00      	cmp	r3, #0
 8007c6e:	d002      	beq.n	8007c76 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007c70:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8007c74:	e02e      	b.n	8007cd4 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	2100      	movs	r1, #0
 8007c7c:	4618      	mov	r0, r3
 8007c7e:	f001 ffdc 	bl	8009c3a <SDIO_GetResponse>
 8007c82:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8007c84:	697b      	ldr	r3, [r7, #20]
 8007c86:	0fdb      	lsrs	r3, r3, #31
 8007c88:	2b01      	cmp	r3, #1
 8007c8a:	d101      	bne.n	8007c90 <SD_PowerON+0xcc>
 8007c8c:	2301      	movs	r3, #1
 8007c8e:	e000      	b.n	8007c92 <SD_PowerON+0xce>
 8007c90:	2300      	movs	r3, #0
 8007c92:	613b      	str	r3, [r7, #16]

    count++;
 8007c94:	68bb      	ldr	r3, [r7, #8]
 8007c96:	3301      	adds	r3, #1
 8007c98:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8007c9a:	68bb      	ldr	r3, [r7, #8]
 8007c9c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8007ca0:	4293      	cmp	r3, r2
 8007ca2:	d802      	bhi.n	8007caa <SD_PowerON+0xe6>
 8007ca4:	693b      	ldr	r3, [r7, #16]
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	d0cc      	beq.n	8007c44 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8007caa:	68bb      	ldr	r3, [r7, #8]
 8007cac:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8007cb0:	4293      	cmp	r3, r2
 8007cb2:	d902      	bls.n	8007cba <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8007cb4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007cb8:	e00c      	b.n	8007cd4 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8007cba:	697b      	ldr	r3, [r7, #20]
 8007cbc:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	d003      	beq.n	8007ccc <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	2201      	movs	r2, #1
 8007cc8:	645a      	str	r2, [r3, #68]	; 0x44
 8007cca:	e002      	b.n	8007cd2 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	2200      	movs	r2, #0
 8007cd0:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 8007cd2:	2300      	movs	r3, #0
}
 8007cd4:	4618      	mov	r0, r3
 8007cd6:	3718      	adds	r7, #24
 8007cd8:	46bd      	mov	sp, r7
 8007cda:	bd80      	pop	{r7, pc}
 8007cdc:	c1100000 	.word	0xc1100000

08007ce0 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8007ce0:	b580      	push	{r7, lr}
 8007ce2:	b084      	sub	sp, #16
 8007ce4:	af00      	add	r7, sp, #0
 8007ce6:	6078      	str	r0, [r7, #4]
 8007ce8:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8007cea:	683b      	ldr	r3, [r7, #0]
 8007cec:	2b00      	cmp	r3, #0
 8007cee:	d102      	bne.n	8007cf6 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8007cf0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007cf4:	e018      	b.n	8007d28 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	681a      	ldr	r2, [r3, #0]
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007cfe:	041b      	lsls	r3, r3, #16
 8007d00:	4619      	mov	r1, r3
 8007d02:	4610      	mov	r0, r2
 8007d04:	f002 f9ea 	bl	800a0dc <SDMMC_CmdSendStatus>
 8007d08:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007d0a:	68fb      	ldr	r3, [r7, #12]
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	d001      	beq.n	8007d14 <SD_SendStatus+0x34>
  {
    return errorstate;
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	e009      	b.n	8007d28 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	2100      	movs	r1, #0
 8007d1a:	4618      	mov	r0, r3
 8007d1c:	f001 ff8d 	bl	8009c3a <SDIO_GetResponse>
 8007d20:	4602      	mov	r2, r0
 8007d22:	683b      	ldr	r3, [r7, #0]
 8007d24:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8007d26:	2300      	movs	r3, #0
}
 8007d28:	4618      	mov	r0, r3
 8007d2a:	3710      	adds	r7, #16
 8007d2c:	46bd      	mov	sp, r7
 8007d2e:	bd80      	pop	{r7, pc}

08007d30 <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8007d30:	b580      	push	{r7, lr}
 8007d32:	b086      	sub	sp, #24
 8007d34:	af00      	add	r7, sp, #0
 8007d36:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8007d38:	2300      	movs	r3, #0
 8007d3a:	60fb      	str	r3, [r7, #12]
 8007d3c:	2300      	movs	r3, #0
 8007d3e:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	2100      	movs	r1, #0
 8007d46:	4618      	mov	r0, r3
 8007d48:	f001 ff77 	bl	8009c3a <SDIO_GetResponse>
 8007d4c:	4603      	mov	r3, r0
 8007d4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007d52:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007d56:	d102      	bne.n	8007d5e <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8007d58:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007d5c:	e02f      	b.n	8007dbe <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8007d5e:	f107 030c 	add.w	r3, r7, #12
 8007d62:	4619      	mov	r1, r3
 8007d64:	6878      	ldr	r0, [r7, #4]
 8007d66:	f000 f879 	bl	8007e5c <SD_FindSCR>
 8007d6a:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007d6c:	697b      	ldr	r3, [r7, #20]
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	d001      	beq.n	8007d76 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8007d72:	697b      	ldr	r3, [r7, #20]
 8007d74:	e023      	b.n	8007dbe <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8007d76:	693b      	ldr	r3, [r7, #16]
 8007d78:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	d01c      	beq.n	8007dba <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	681a      	ldr	r2, [r3, #0]
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007d88:	041b      	lsls	r3, r3, #16
 8007d8a:	4619      	mov	r1, r3
 8007d8c:	4610      	mov	r0, r2
 8007d8e:	f002 f8bf 	bl	8009f10 <SDMMC_CmdAppCommand>
 8007d92:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007d94:	697b      	ldr	r3, [r7, #20]
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	d001      	beq.n	8007d9e <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8007d9a:	697b      	ldr	r3, [r7, #20]
 8007d9c:	e00f      	b.n	8007dbe <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	2102      	movs	r1, #2
 8007da4:	4618      	mov	r0, r3
 8007da6:	f002 f8f8 	bl	8009f9a <SDMMC_CmdBusWidth>
 8007daa:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007dac:	697b      	ldr	r3, [r7, #20]
 8007dae:	2b00      	cmp	r3, #0
 8007db0:	d001      	beq.n	8007db6 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8007db2:	697b      	ldr	r3, [r7, #20]
 8007db4:	e003      	b.n	8007dbe <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8007db6:	2300      	movs	r3, #0
 8007db8:	e001      	b.n	8007dbe <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8007dba:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8007dbe:	4618      	mov	r0, r3
 8007dc0:	3718      	adds	r7, #24
 8007dc2:	46bd      	mov	sp, r7
 8007dc4:	bd80      	pop	{r7, pc}

08007dc6 <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8007dc6:	b580      	push	{r7, lr}
 8007dc8:	b086      	sub	sp, #24
 8007dca:	af00      	add	r7, sp, #0
 8007dcc:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8007dce:	2300      	movs	r3, #0
 8007dd0:	60fb      	str	r3, [r7, #12]
 8007dd2:	2300      	movs	r3, #0
 8007dd4:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	2100      	movs	r1, #0
 8007ddc:	4618      	mov	r0, r3
 8007dde:	f001 ff2c 	bl	8009c3a <SDIO_GetResponse>
 8007de2:	4603      	mov	r3, r0
 8007de4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007de8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007dec:	d102      	bne.n	8007df4 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8007dee:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007df2:	e02f      	b.n	8007e54 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8007df4:	f107 030c 	add.w	r3, r7, #12
 8007df8:	4619      	mov	r1, r3
 8007dfa:	6878      	ldr	r0, [r7, #4]
 8007dfc:	f000 f82e 	bl	8007e5c <SD_FindSCR>
 8007e00:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007e02:	697b      	ldr	r3, [r7, #20]
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	d001      	beq.n	8007e0c <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8007e08:	697b      	ldr	r3, [r7, #20]
 8007e0a:	e023      	b.n	8007e54 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8007e0c:	693b      	ldr	r3, [r7, #16]
 8007e0e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	d01c      	beq.n	8007e50 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	681a      	ldr	r2, [r3, #0]
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007e1e:	041b      	lsls	r3, r3, #16
 8007e20:	4619      	mov	r1, r3
 8007e22:	4610      	mov	r0, r2
 8007e24:	f002 f874 	bl	8009f10 <SDMMC_CmdAppCommand>
 8007e28:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007e2a:	697b      	ldr	r3, [r7, #20]
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	d001      	beq.n	8007e34 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8007e30:	697b      	ldr	r3, [r7, #20]
 8007e32:	e00f      	b.n	8007e54 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	2100      	movs	r1, #0
 8007e3a:	4618      	mov	r0, r3
 8007e3c:	f002 f8ad 	bl	8009f9a <SDMMC_CmdBusWidth>
 8007e40:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007e42:	697b      	ldr	r3, [r7, #20]
 8007e44:	2b00      	cmp	r3, #0
 8007e46:	d001      	beq.n	8007e4c <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8007e48:	697b      	ldr	r3, [r7, #20]
 8007e4a:	e003      	b.n	8007e54 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8007e4c:	2300      	movs	r3, #0
 8007e4e:	e001      	b.n	8007e54 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8007e50:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8007e54:	4618      	mov	r0, r3
 8007e56:	3718      	adds	r7, #24
 8007e58:	46bd      	mov	sp, r7
 8007e5a:	bd80      	pop	{r7, pc}

08007e5c <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8007e5c:	b590      	push	{r4, r7, lr}
 8007e5e:	b08f      	sub	sp, #60	; 0x3c
 8007e60:	af00      	add	r7, sp, #0
 8007e62:	6078      	str	r0, [r7, #4]
 8007e64:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8007e66:	f7fb febb 	bl	8003be0 <HAL_GetTick>
 8007e6a:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 8007e6c:	2300      	movs	r3, #0
 8007e6e:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 8007e70:	2300      	movs	r3, #0
 8007e72:	60bb      	str	r3, [r7, #8]
 8007e74:	2300      	movs	r3, #0
 8007e76:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8007e78:	683b      	ldr	r3, [r7, #0]
 8007e7a:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	2108      	movs	r1, #8
 8007e82:	4618      	mov	r0, r3
 8007e84:	f001 ff18 	bl	8009cb8 <SDMMC_CmdBlockLength>
 8007e88:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8007e8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e8c:	2b00      	cmp	r3, #0
 8007e8e:	d001      	beq.n	8007e94 <SD_FindSCR+0x38>
  {
    return errorstate;
 8007e90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e92:	e0a9      	b.n	8007fe8 <SD_FindSCR+0x18c>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	681a      	ldr	r2, [r3, #0]
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007e9c:	041b      	lsls	r3, r3, #16
 8007e9e:	4619      	mov	r1, r3
 8007ea0:	4610      	mov	r0, r2
 8007ea2:	f002 f835 	bl	8009f10 <SDMMC_CmdAppCommand>
 8007ea6:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8007ea8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	d001      	beq.n	8007eb2 <SD_FindSCR+0x56>
  {
    return errorstate;
 8007eae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007eb0:	e09a      	b.n	8007fe8 <SD_FindSCR+0x18c>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8007eb2:	f04f 33ff 	mov.w	r3, #4294967295
 8007eb6:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8007eb8:	2308      	movs	r3, #8
 8007eba:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 8007ebc:	2330      	movs	r3, #48	; 0x30
 8007ebe:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8007ec0:	2302      	movs	r3, #2
 8007ec2:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8007ec4:	2300      	movs	r3, #0
 8007ec6:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 8007ec8:	2301      	movs	r3, #1
 8007eca:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	f107 0210 	add.w	r2, r7, #16
 8007ed4:	4611      	mov	r1, r2
 8007ed6:	4618      	mov	r0, r3
 8007ed8:	f001 fec2 	bl	8009c60 <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	4618      	mov	r0, r3
 8007ee2:	f002 f87c 	bl	8009fde <SDMMC_CmdSendSCR>
 8007ee6:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8007ee8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	d022      	beq.n	8007f34 <SD_FindSCR+0xd8>
  {
    return errorstate;
 8007eee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ef0:	e07a      	b.n	8007fe8 <SD_FindSCR+0x18c>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007ef8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	d00e      	beq.n	8007f1e <SD_FindSCR+0xc2>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	6819      	ldr	r1, [r3, #0]
 8007f04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007f06:	009b      	lsls	r3, r3, #2
 8007f08:	f107 0208 	add.w	r2, r7, #8
 8007f0c:	18d4      	adds	r4, r2, r3
 8007f0e:	4608      	mov	r0, r1
 8007f10:	f001 fe21 	bl	8009b56 <SDIO_ReadFIFO>
 8007f14:	4603      	mov	r3, r0
 8007f16:	6023      	str	r3, [r4, #0]
      index++;
 8007f18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007f1a:	3301      	adds	r3, #1
 8007f1c:	637b      	str	r3, [r7, #52]	; 0x34
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8007f1e:	f7fb fe5f 	bl	8003be0 <HAL_GetTick>
 8007f22:	4602      	mov	r2, r0
 8007f24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f26:	1ad3      	subs	r3, r2, r3
 8007f28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f2c:	d102      	bne.n	8007f34 <SD_FindSCR+0xd8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8007f2e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007f32:	e059      	b.n	8007fe8 <SD_FindSCR+0x18c>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007f3a:	f240 432a 	movw	r3, #1066	; 0x42a
 8007f3e:	4013      	ands	r3, r2
 8007f40:	2b00      	cmp	r3, #0
 8007f42:	d0d6      	beq.n	8007ef2 <SD_FindSCR+0x96>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007f4a:	f003 0308 	and.w	r3, r3, #8
 8007f4e:	2b00      	cmp	r3, #0
 8007f50:	d005      	beq.n	8007f5e <SD_FindSCR+0x102>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	2208      	movs	r2, #8
 8007f58:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8007f5a:	2308      	movs	r3, #8
 8007f5c:	e044      	b.n	8007fe8 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007f64:	f003 0302 	and.w	r3, r3, #2
 8007f68:	2b00      	cmp	r3, #0
 8007f6a:	d005      	beq.n	8007f78 <SD_FindSCR+0x11c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	2202      	movs	r2, #2
 8007f72:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8007f74:	2302      	movs	r3, #2
 8007f76:	e037      	b.n	8007fe8 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007f7e:	f003 0320 	and.w	r3, r3, #32
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	d005      	beq.n	8007f92 <SD_FindSCR+0x136>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	2220      	movs	r2, #32
 8007f8c:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8007f8e:	2320      	movs	r3, #32
 8007f90:	e02a      	b.n	8007fe8 <SD_FindSCR+0x18c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	f240 523a 	movw	r2, #1338	; 0x53a
 8007f9a:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8007f9c:	68fb      	ldr	r3, [r7, #12]
 8007f9e:	061a      	lsls	r2, r3, #24
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	021b      	lsls	r3, r3, #8
 8007fa4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007fa8:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	0a1b      	lsrs	r3, r3, #8
 8007fae:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8007fb2:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8007fb4:	68fb      	ldr	r3, [r7, #12]
 8007fb6:	0e1b      	lsrs	r3, r3, #24
 8007fb8:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8007fba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007fbc:	601a      	str	r2, [r3, #0]
    scr++;
 8007fbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007fc0:	3304      	adds	r3, #4
 8007fc2:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8007fc4:	68bb      	ldr	r3, [r7, #8]
 8007fc6:	061a      	lsls	r2, r3, #24
 8007fc8:	68bb      	ldr	r3, [r7, #8]
 8007fca:	021b      	lsls	r3, r3, #8
 8007fcc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007fd0:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8007fd2:	68bb      	ldr	r3, [r7, #8]
 8007fd4:	0a1b      	lsrs	r3, r3, #8
 8007fd6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8007fda:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8007fdc:	68bb      	ldr	r3, [r7, #8]
 8007fde:	0e1b      	lsrs	r3, r3, #24
 8007fe0:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8007fe2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007fe4:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8007fe6:	2300      	movs	r3, #0
}
 8007fe8:	4618      	mov	r0, r3
 8007fea:	373c      	adds	r7, #60	; 0x3c
 8007fec:	46bd      	mov	sp, r7
 8007fee:	bd90      	pop	{r4, r7, pc}

08007ff0 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 8007ff0:	b580      	push	{r7, lr}
 8007ff2:	b086      	sub	sp, #24
 8007ff4:	af00      	add	r7, sp, #0
 8007ff6:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ffc:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008002:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8008004:	693b      	ldr	r3, [r7, #16]
 8008006:	2b00      	cmp	r3, #0
 8008008:	d03f      	beq.n	800808a <SD_Read_IT+0x9a>
  {
    /* Read data from SDIO Rx FIFO */
    for(count = 0U; count < 8U; count++)
 800800a:	2300      	movs	r3, #0
 800800c:	617b      	str	r3, [r7, #20]
 800800e:	e033      	b.n	8008078 <SD_Read_IT+0x88>
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	4618      	mov	r0, r3
 8008016:	f001 fd9e 	bl	8009b56 <SDIO_ReadFIFO>
 800801a:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 800801c:	68bb      	ldr	r3, [r7, #8]
 800801e:	b2da      	uxtb	r2, r3
 8008020:	68fb      	ldr	r3, [r7, #12]
 8008022:	701a      	strb	r2, [r3, #0]
      tmp++;
 8008024:	68fb      	ldr	r3, [r7, #12]
 8008026:	3301      	adds	r3, #1
 8008028:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800802a:	693b      	ldr	r3, [r7, #16]
 800802c:	3b01      	subs	r3, #1
 800802e:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 8008030:	68bb      	ldr	r3, [r7, #8]
 8008032:	0a1b      	lsrs	r3, r3, #8
 8008034:	b2da      	uxtb	r2, r3
 8008036:	68fb      	ldr	r3, [r7, #12]
 8008038:	701a      	strb	r2, [r3, #0]
      tmp++;
 800803a:	68fb      	ldr	r3, [r7, #12]
 800803c:	3301      	adds	r3, #1
 800803e:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8008040:	693b      	ldr	r3, [r7, #16]
 8008042:	3b01      	subs	r3, #1
 8008044:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 8008046:	68bb      	ldr	r3, [r7, #8]
 8008048:	0c1b      	lsrs	r3, r3, #16
 800804a:	b2da      	uxtb	r2, r3
 800804c:	68fb      	ldr	r3, [r7, #12]
 800804e:	701a      	strb	r2, [r3, #0]
      tmp++;
 8008050:	68fb      	ldr	r3, [r7, #12]
 8008052:	3301      	adds	r3, #1
 8008054:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8008056:	693b      	ldr	r3, [r7, #16]
 8008058:	3b01      	subs	r3, #1
 800805a:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 800805c:	68bb      	ldr	r3, [r7, #8]
 800805e:	0e1b      	lsrs	r3, r3, #24
 8008060:	b2da      	uxtb	r2, r3
 8008062:	68fb      	ldr	r3, [r7, #12]
 8008064:	701a      	strb	r2, [r3, #0]
      tmp++;
 8008066:	68fb      	ldr	r3, [r7, #12]
 8008068:	3301      	adds	r3, #1
 800806a:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800806c:	693b      	ldr	r3, [r7, #16]
 800806e:	3b01      	subs	r3, #1
 8008070:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 8008072:	697b      	ldr	r3, [r7, #20]
 8008074:	3301      	adds	r3, #1
 8008076:	617b      	str	r3, [r7, #20]
 8008078:	697b      	ldr	r3, [r7, #20]
 800807a:	2b07      	cmp	r3, #7
 800807c:	d9c8      	bls.n	8008010 <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	68fa      	ldr	r2, [r7, #12]
 8008082:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	693a      	ldr	r2, [r7, #16]
 8008088:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 800808a:	bf00      	nop
 800808c:	3718      	adds	r7, #24
 800808e:	46bd      	mov	sp, r7
 8008090:	bd80      	pop	{r7, pc}

08008092 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 8008092:	b580      	push	{r7, lr}
 8008094:	b086      	sub	sp, #24
 8008096:	af00      	add	r7, sp, #0
 8008098:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	6a1b      	ldr	r3, [r3, #32]
 800809e:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080a4:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 80080a6:	693b      	ldr	r3, [r7, #16]
 80080a8:	2b00      	cmp	r3, #0
 80080aa:	d043      	beq.n	8008134 <SD_Write_IT+0xa2>
  {
    /* Write data to SDIO Tx FIFO */
    for(count = 0U; count < 8U; count++)
 80080ac:	2300      	movs	r3, #0
 80080ae:	617b      	str	r3, [r7, #20]
 80080b0:	e037      	b.n	8008122 <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 80080b2:	68fb      	ldr	r3, [r7, #12]
 80080b4:	781b      	ldrb	r3, [r3, #0]
 80080b6:	60bb      	str	r3, [r7, #8]
      tmp++;
 80080b8:	68fb      	ldr	r3, [r7, #12]
 80080ba:	3301      	adds	r3, #1
 80080bc:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80080be:	693b      	ldr	r3, [r7, #16]
 80080c0:	3b01      	subs	r3, #1
 80080c2:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 80080c4:	68fb      	ldr	r3, [r7, #12]
 80080c6:	781b      	ldrb	r3, [r3, #0]
 80080c8:	021a      	lsls	r2, r3, #8
 80080ca:	68bb      	ldr	r3, [r7, #8]
 80080cc:	4313      	orrs	r3, r2
 80080ce:	60bb      	str	r3, [r7, #8]
      tmp++;
 80080d0:	68fb      	ldr	r3, [r7, #12]
 80080d2:	3301      	adds	r3, #1
 80080d4:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80080d6:	693b      	ldr	r3, [r7, #16]
 80080d8:	3b01      	subs	r3, #1
 80080da:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 80080dc:	68fb      	ldr	r3, [r7, #12]
 80080de:	781b      	ldrb	r3, [r3, #0]
 80080e0:	041a      	lsls	r2, r3, #16
 80080e2:	68bb      	ldr	r3, [r7, #8]
 80080e4:	4313      	orrs	r3, r2
 80080e6:	60bb      	str	r3, [r7, #8]
      tmp++;
 80080e8:	68fb      	ldr	r3, [r7, #12]
 80080ea:	3301      	adds	r3, #1
 80080ec:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80080ee:	693b      	ldr	r3, [r7, #16]
 80080f0:	3b01      	subs	r3, #1
 80080f2:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 80080f4:	68fb      	ldr	r3, [r7, #12]
 80080f6:	781b      	ldrb	r3, [r3, #0]
 80080f8:	061a      	lsls	r2, r3, #24
 80080fa:	68bb      	ldr	r3, [r7, #8]
 80080fc:	4313      	orrs	r3, r2
 80080fe:	60bb      	str	r3, [r7, #8]
      tmp++;
 8008100:	68fb      	ldr	r3, [r7, #12]
 8008102:	3301      	adds	r3, #1
 8008104:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8008106:	693b      	ldr	r3, [r7, #16]
 8008108:	3b01      	subs	r3, #1
 800810a:	613b      	str	r3, [r7, #16]
      (void)SDIO_WriteFIFO(hsd->Instance, &data);
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	f107 0208 	add.w	r2, r7, #8
 8008114:	4611      	mov	r1, r2
 8008116:	4618      	mov	r0, r3
 8008118:	f001 fd2a 	bl	8009b70 <SDIO_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 800811c:	697b      	ldr	r3, [r7, #20]
 800811e:	3301      	adds	r3, #1
 8008120:	617b      	str	r3, [r7, #20]
 8008122:	697b      	ldr	r3, [r7, #20]
 8008124:	2b07      	cmp	r3, #7
 8008126:	d9c4      	bls.n	80080b2 <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	68fa      	ldr	r2, [r7, #12]
 800812c:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	693a      	ldr	r2, [r7, #16]
 8008132:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 8008134:	bf00      	nop
 8008136:	3718      	adds	r7, #24
 8008138:	46bd      	mov	sp, r7
 800813a:	bd80      	pop	{r7, pc}

0800813c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800813c:	b580      	push	{r7, lr}
 800813e:	b082      	sub	sp, #8
 8008140:	af00      	add	r7, sp, #0
 8008142:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	2b00      	cmp	r3, #0
 8008148:	d101      	bne.n	800814e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800814a:	2301      	movs	r3, #1
 800814c:	e056      	b.n	80081fc <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	2200      	movs	r2, #0
 8008152:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800815a:	b2db      	uxtb	r3, r3
 800815c:	2b00      	cmp	r3, #0
 800815e:	d106      	bne.n	800816e <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	2200      	movs	r2, #0
 8008164:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8008168:	6878      	ldr	r0, [r7, #4]
 800816a:	f7fb fa41 	bl	80035f0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	2202      	movs	r2, #2
 8008172:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	681a      	ldr	r2, [r3, #0]
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008184:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	685a      	ldr	r2, [r3, #4]
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	689b      	ldr	r3, [r3, #8]
 800818e:	431a      	orrs	r2, r3
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	68db      	ldr	r3, [r3, #12]
 8008194:	431a      	orrs	r2, r3
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	691b      	ldr	r3, [r3, #16]
 800819a:	431a      	orrs	r2, r3
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	695b      	ldr	r3, [r3, #20]
 80081a0:	431a      	orrs	r2, r3
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	699b      	ldr	r3, [r3, #24]
 80081a6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80081aa:	431a      	orrs	r2, r3
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	69db      	ldr	r3, [r3, #28]
 80081b0:	431a      	orrs	r2, r3
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	6a1b      	ldr	r3, [r3, #32]
 80081b6:	ea42 0103 	orr.w	r1, r2, r3
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	430a      	orrs	r2, r1
 80081c4:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	699b      	ldr	r3, [r3, #24]
 80081ca:	0c1b      	lsrs	r3, r3, #16
 80081cc:	f003 0104 	and.w	r1, r3, #4
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	430a      	orrs	r2, r1
 80081da:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	69da      	ldr	r2, [r3, #28]
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80081ea:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	2200      	movs	r2, #0
 80081f0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	2201      	movs	r2, #1
 80081f6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80081fa:	2300      	movs	r3, #0
}
 80081fc:	4618      	mov	r0, r3
 80081fe:	3708      	adds	r7, #8
 8008200:	46bd      	mov	sp, r7
 8008202:	bd80      	pop	{r7, pc}

08008204 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8008204:	b580      	push	{r7, lr}
 8008206:	b088      	sub	sp, #32
 8008208:	af00      	add	r7, sp, #0
 800820a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	685b      	ldr	r3, [r3, #4]
 8008212:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	689b      	ldr	r3, [r3, #8]
 800821a:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800821c:	69bb      	ldr	r3, [r7, #24]
 800821e:	099b      	lsrs	r3, r3, #6
 8008220:	f003 0301 	and.w	r3, r3, #1
 8008224:	2b00      	cmp	r3, #0
 8008226:	d10f      	bne.n	8008248 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8008228:	69bb      	ldr	r3, [r7, #24]
 800822a:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800822e:	2b00      	cmp	r3, #0
 8008230:	d00a      	beq.n	8008248 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8008232:	69fb      	ldr	r3, [r7, #28]
 8008234:	099b      	lsrs	r3, r3, #6
 8008236:	f003 0301 	and.w	r3, r3, #1
 800823a:	2b00      	cmp	r3, #0
 800823c:	d004      	beq.n	8008248 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008242:	6878      	ldr	r0, [r7, #4]
 8008244:	4798      	blx	r3
    return;
 8008246:	e0d8      	b.n	80083fa <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8008248:	69bb      	ldr	r3, [r7, #24]
 800824a:	085b      	lsrs	r3, r3, #1
 800824c:	f003 0301 	and.w	r3, r3, #1
 8008250:	2b00      	cmp	r3, #0
 8008252:	d00a      	beq.n	800826a <HAL_SPI_IRQHandler+0x66>
 8008254:	69fb      	ldr	r3, [r7, #28]
 8008256:	09db      	lsrs	r3, r3, #7
 8008258:	f003 0301 	and.w	r3, r3, #1
 800825c:	2b00      	cmp	r3, #0
 800825e:	d004      	beq.n	800826a <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008264:	6878      	ldr	r0, [r7, #4]
 8008266:	4798      	blx	r3
    return;
 8008268:	e0c7      	b.n	80083fa <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800826a:	69bb      	ldr	r3, [r7, #24]
 800826c:	095b      	lsrs	r3, r3, #5
 800826e:	f003 0301 	and.w	r3, r3, #1
 8008272:	2b00      	cmp	r3, #0
 8008274:	d10c      	bne.n	8008290 <HAL_SPI_IRQHandler+0x8c>
 8008276:	69bb      	ldr	r3, [r7, #24]
 8008278:	099b      	lsrs	r3, r3, #6
 800827a:	f003 0301 	and.w	r3, r3, #1
 800827e:	2b00      	cmp	r3, #0
 8008280:	d106      	bne.n	8008290 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8008282:	69bb      	ldr	r3, [r7, #24]
 8008284:	0a1b      	lsrs	r3, r3, #8
 8008286:	f003 0301 	and.w	r3, r3, #1
 800828a:	2b00      	cmp	r3, #0
 800828c:	f000 80b5 	beq.w	80083fa <HAL_SPI_IRQHandler+0x1f6>
 8008290:	69fb      	ldr	r3, [r7, #28]
 8008292:	095b      	lsrs	r3, r3, #5
 8008294:	f003 0301 	and.w	r3, r3, #1
 8008298:	2b00      	cmp	r3, #0
 800829a:	f000 80ae 	beq.w	80083fa <HAL_SPI_IRQHandler+0x1f6>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800829e:	69bb      	ldr	r3, [r7, #24]
 80082a0:	099b      	lsrs	r3, r3, #6
 80082a2:	f003 0301 	and.w	r3, r3, #1
 80082a6:	2b00      	cmp	r3, #0
 80082a8:	d023      	beq.n	80082f2 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80082b0:	b2db      	uxtb	r3, r3
 80082b2:	2b03      	cmp	r3, #3
 80082b4:	d011      	beq.n	80082da <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80082ba:	f043 0204 	orr.w	r2, r3, #4
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80082c2:	2300      	movs	r3, #0
 80082c4:	617b      	str	r3, [r7, #20]
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	68db      	ldr	r3, [r3, #12]
 80082cc:	617b      	str	r3, [r7, #20]
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	689b      	ldr	r3, [r3, #8]
 80082d4:	617b      	str	r3, [r7, #20]
 80082d6:	697b      	ldr	r3, [r7, #20]
 80082d8:	e00b      	b.n	80082f2 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80082da:	2300      	movs	r3, #0
 80082dc:	613b      	str	r3, [r7, #16]
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	68db      	ldr	r3, [r3, #12]
 80082e4:	613b      	str	r3, [r7, #16]
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	689b      	ldr	r3, [r3, #8]
 80082ec:	613b      	str	r3, [r7, #16]
 80082ee:	693b      	ldr	r3, [r7, #16]
        return;
 80082f0:	e083      	b.n	80083fa <HAL_SPI_IRQHandler+0x1f6>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 80082f2:	69bb      	ldr	r3, [r7, #24]
 80082f4:	095b      	lsrs	r3, r3, #5
 80082f6:	f003 0301 	and.w	r3, r3, #1
 80082fa:	2b00      	cmp	r3, #0
 80082fc:	d014      	beq.n	8008328 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008302:	f043 0201 	orr.w	r2, r3, #1
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800830a:	2300      	movs	r3, #0
 800830c:	60fb      	str	r3, [r7, #12]
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	689b      	ldr	r3, [r3, #8]
 8008314:	60fb      	str	r3, [r7, #12]
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	681a      	ldr	r2, [r3, #0]
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008324:	601a      	str	r2, [r3, #0]
 8008326:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8008328:	69bb      	ldr	r3, [r7, #24]
 800832a:	0a1b      	lsrs	r3, r3, #8
 800832c:	f003 0301 	and.w	r3, r3, #1
 8008330:	2b00      	cmp	r3, #0
 8008332:	d00c      	beq.n	800834e <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008338:	f043 0208 	orr.w	r2, r3, #8
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8008340:	2300      	movs	r3, #0
 8008342:	60bb      	str	r3, [r7, #8]
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	689b      	ldr	r3, [r3, #8]
 800834a:	60bb      	str	r3, [r7, #8]
 800834c:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008352:	2b00      	cmp	r3, #0
 8008354:	d050      	beq.n	80083f8 <HAL_SPI_IRQHandler+0x1f4>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	685a      	ldr	r2, [r3, #4]
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8008364:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	2201      	movs	r2, #1
 800836a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800836e:	69fb      	ldr	r3, [r7, #28]
 8008370:	f003 0302 	and.w	r3, r3, #2
 8008374:	2b00      	cmp	r3, #0
 8008376:	d104      	bne.n	8008382 <HAL_SPI_IRQHandler+0x17e>
 8008378:	69fb      	ldr	r3, [r7, #28]
 800837a:	f003 0301 	and.w	r3, r3, #1
 800837e:	2b00      	cmp	r3, #0
 8008380:	d034      	beq.n	80083ec <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	685a      	ldr	r2, [r3, #4]
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	f022 0203 	bic.w	r2, r2, #3
 8008390:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008396:	2b00      	cmp	r3, #0
 8008398:	d011      	beq.n	80083be <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800839e:	4a18      	ldr	r2, [pc, #96]	; (8008400 <HAL_SPI_IRQHandler+0x1fc>)
 80083a0:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80083a6:	4618      	mov	r0, r3
 80083a8:	f7fb fe60 	bl	800406c <HAL_DMA_Abort_IT>
 80083ac:	4603      	mov	r3, r0
 80083ae:	2b00      	cmp	r3, #0
 80083b0:	d005      	beq.n	80083be <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80083b6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80083c2:	2b00      	cmp	r3, #0
 80083c4:	d016      	beq.n	80083f4 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80083ca:	4a0d      	ldr	r2, [pc, #52]	; (8008400 <HAL_SPI_IRQHandler+0x1fc>)
 80083cc:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80083d2:	4618      	mov	r0, r3
 80083d4:	f7fb fe4a 	bl	800406c <HAL_DMA_Abort_IT>
 80083d8:	4603      	mov	r3, r0
 80083da:	2b00      	cmp	r3, #0
 80083dc:	d00a      	beq.n	80083f4 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80083e2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 80083ea:	e003      	b.n	80083f4 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 80083ec:	6878      	ldr	r0, [r7, #4]
 80083ee:	f000 f809 	bl	8008404 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80083f2:	e000      	b.n	80083f6 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 80083f4:	bf00      	nop
    return;
 80083f6:	bf00      	nop
 80083f8:	bf00      	nop
  }
}
 80083fa:	3720      	adds	r7, #32
 80083fc:	46bd      	mov	sp, r7
 80083fe:	bd80      	pop	{r7, pc}
 8008400:	08008419 	.word	0x08008419

08008404 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8008404:	b480      	push	{r7}
 8008406:	b083      	sub	sp, #12
 8008408:	af00      	add	r7, sp, #0
 800840a:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800840c:	bf00      	nop
 800840e:	370c      	adds	r7, #12
 8008410:	46bd      	mov	sp, r7
 8008412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008416:	4770      	bx	lr

08008418 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008418:	b580      	push	{r7, lr}
 800841a:	b084      	sub	sp, #16
 800841c:	af00      	add	r7, sp, #0
 800841e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008424:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8008426:	68fb      	ldr	r3, [r7, #12]
 8008428:	2200      	movs	r2, #0
 800842a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 800842c:	68fb      	ldr	r3, [r7, #12]
 800842e:	2200      	movs	r2, #0
 8008430:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8008432:	68f8      	ldr	r0, [r7, #12]
 8008434:	f7ff ffe6 	bl	8008404 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8008438:	bf00      	nop
 800843a:	3710      	adds	r7, #16
 800843c:	46bd      	mov	sp, r7
 800843e:	bd80      	pop	{r7, pc}

08008440 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008440:	b580      	push	{r7, lr}
 8008442:	b082      	sub	sp, #8
 8008444:	af00      	add	r7, sp, #0
 8008446:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	2b00      	cmp	r3, #0
 800844c:	d101      	bne.n	8008452 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800844e:	2301      	movs	r3, #1
 8008450:	e01d      	b.n	800848e <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008458:	b2db      	uxtb	r3, r3
 800845a:	2b00      	cmp	r3, #0
 800845c:	d106      	bne.n	800846c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	2200      	movs	r2, #0
 8008462:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008466:	6878      	ldr	r0, [r7, #4]
 8008468:	f7fb f976 	bl	8003758 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	2202      	movs	r2, #2
 8008470:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	681a      	ldr	r2, [r3, #0]
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	3304      	adds	r3, #4
 800847c:	4619      	mov	r1, r3
 800847e:	4610      	mov	r0, r2
 8008480:	f000 fa42 	bl	8008908 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	2201      	movs	r2, #1
 8008488:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800848c:	2300      	movs	r3, #0
}
 800848e:	4618      	mov	r0, r3
 8008490:	3708      	adds	r7, #8
 8008492:	46bd      	mov	sp, r7
 8008494:	bd80      	pop	{r7, pc}

08008496 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8008496:	b480      	push	{r7}
 8008498:	b085      	sub	sp, #20
 800849a:	af00      	add	r7, sp, #0
 800849c:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	2202      	movs	r2, #2
 80084a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	689b      	ldr	r3, [r3, #8]
 80084ac:	f003 0307 	and.w	r3, r3, #7
 80084b0:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80084b2:	68fb      	ldr	r3, [r7, #12]
 80084b4:	2b06      	cmp	r3, #6
 80084b6:	d007      	beq.n	80084c8 <HAL_TIM_Base_Start+0x32>
  {
    __HAL_TIM_ENABLE(htim);
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	681a      	ldr	r2, [r3, #0]
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	f042 0201 	orr.w	r2, r2, #1
 80084c6:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	2201      	movs	r2, #1
 80084cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80084d0:	2300      	movs	r3, #0
}
 80084d2:	4618      	mov	r0, r3
 80084d4:	3714      	adds	r7, #20
 80084d6:	46bd      	mov	sp, r7
 80084d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084dc:	4770      	bx	lr

080084de <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80084de:	b480      	push	{r7}
 80084e0:	b085      	sub	sp, #20
 80084e2:	af00      	add	r7, sp, #0
 80084e4:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	68da      	ldr	r2, [r3, #12]
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	f042 0201 	orr.w	r2, r2, #1
 80084f4:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	689b      	ldr	r3, [r3, #8]
 80084fc:	f003 0307 	and.w	r3, r3, #7
 8008500:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008502:	68fb      	ldr	r3, [r7, #12]
 8008504:	2b06      	cmp	r3, #6
 8008506:	d007      	beq.n	8008518 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	681a      	ldr	r2, [r3, #0]
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	f042 0201 	orr.w	r2, r2, #1
 8008516:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008518:	2300      	movs	r3, #0
}
 800851a:	4618      	mov	r0, r3
 800851c:	3714      	adds	r7, #20
 800851e:	46bd      	mov	sp, r7
 8008520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008524:	4770      	bx	lr

08008526 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8008526:	b580      	push	{r7, lr}
 8008528:	b082      	sub	sp, #8
 800852a:	af00      	add	r7, sp, #0
 800852c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	2b00      	cmp	r3, #0
 8008532:	d101      	bne.n	8008538 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8008534:	2301      	movs	r3, #1
 8008536:	e01d      	b.n	8008574 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800853e:	b2db      	uxtb	r3, r3
 8008540:	2b00      	cmp	r3, #0
 8008542:	d106      	bne.n	8008552 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	2200      	movs	r2, #0
 8008548:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800854c:	6878      	ldr	r0, [r7, #4]
 800854e:	f000 f815 	bl	800857c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	2202      	movs	r2, #2
 8008556:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	681a      	ldr	r2, [r3, #0]
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	3304      	adds	r3, #4
 8008562:	4619      	mov	r1, r3
 8008564:	4610      	mov	r0, r2
 8008566:	f000 f9cf 	bl	8008908 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	2201      	movs	r2, #1
 800856e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008572:	2300      	movs	r3, #0
}
 8008574:	4618      	mov	r0, r3
 8008576:	3708      	adds	r7, #8
 8008578:	46bd      	mov	sp, r7
 800857a:	bd80      	pop	{r7, pc}

0800857c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800857c:	b480      	push	{r7}
 800857e:	b083      	sub	sp, #12
 8008580:	af00      	add	r7, sp, #0
 8008582:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8008584:	bf00      	nop
 8008586:	370c      	adds	r7, #12
 8008588:	46bd      	mov	sp, r7
 800858a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800858e:	4770      	bx	lr

08008590 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008590:	b580      	push	{r7, lr}
 8008592:	b084      	sub	sp, #16
 8008594:	af00      	add	r7, sp, #0
 8008596:	6078      	str	r0, [r7, #4]
 8008598:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	2201      	movs	r2, #1
 80085a0:	6839      	ldr	r1, [r7, #0]
 80085a2:	4618      	mov	r0, r3
 80085a4:	f000 fc9a 	bl	8008edc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	4a15      	ldr	r2, [pc, #84]	; (8008604 <HAL_TIM_PWM_Start+0x74>)
 80085ae:	4293      	cmp	r3, r2
 80085b0:	d004      	beq.n	80085bc <HAL_TIM_PWM_Start+0x2c>
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	4a14      	ldr	r2, [pc, #80]	; (8008608 <HAL_TIM_PWM_Start+0x78>)
 80085b8:	4293      	cmp	r3, r2
 80085ba:	d101      	bne.n	80085c0 <HAL_TIM_PWM_Start+0x30>
 80085bc:	2301      	movs	r3, #1
 80085be:	e000      	b.n	80085c2 <HAL_TIM_PWM_Start+0x32>
 80085c0:	2300      	movs	r3, #0
 80085c2:	2b00      	cmp	r3, #0
 80085c4:	d007      	beq.n	80085d6 <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80085d4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	689b      	ldr	r3, [r3, #8]
 80085dc:	f003 0307 	and.w	r3, r3, #7
 80085e0:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80085e2:	68fb      	ldr	r3, [r7, #12]
 80085e4:	2b06      	cmp	r3, #6
 80085e6:	d007      	beq.n	80085f8 <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	681a      	ldr	r2, [r3, #0]
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	f042 0201 	orr.w	r2, r2, #1
 80085f6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80085f8:	2300      	movs	r3, #0
}
 80085fa:	4618      	mov	r0, r3
 80085fc:	3710      	adds	r7, #16
 80085fe:	46bd      	mov	sp, r7
 8008600:	bd80      	pop	{r7, pc}
 8008602:	bf00      	nop
 8008604:	40010000 	.word	0x40010000
 8008608:	40010400 	.word	0x40010400

0800860c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800860c:	b580      	push	{r7, lr}
 800860e:	b084      	sub	sp, #16
 8008610:	af00      	add	r7, sp, #0
 8008612:	60f8      	str	r0, [r7, #12]
 8008614:	60b9      	str	r1, [r7, #8]
 8008616:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008618:	68fb      	ldr	r3, [r7, #12]
 800861a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800861e:	2b01      	cmp	r3, #1
 8008620:	d101      	bne.n	8008626 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8008622:	2302      	movs	r3, #2
 8008624:	e0b4      	b.n	8008790 <HAL_TIM_PWM_ConfigChannel+0x184>
 8008626:	68fb      	ldr	r3, [r7, #12]
 8008628:	2201      	movs	r2, #1
 800862a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800862e:	68fb      	ldr	r3, [r7, #12]
 8008630:	2202      	movs	r2, #2
 8008632:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	2b0c      	cmp	r3, #12
 800863a:	f200 809f 	bhi.w	800877c <HAL_TIM_PWM_ConfigChannel+0x170>
 800863e:	a201      	add	r2, pc, #4	; (adr r2, 8008644 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8008640:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008644:	08008679 	.word	0x08008679
 8008648:	0800877d 	.word	0x0800877d
 800864c:	0800877d 	.word	0x0800877d
 8008650:	0800877d 	.word	0x0800877d
 8008654:	080086b9 	.word	0x080086b9
 8008658:	0800877d 	.word	0x0800877d
 800865c:	0800877d 	.word	0x0800877d
 8008660:	0800877d 	.word	0x0800877d
 8008664:	080086fb 	.word	0x080086fb
 8008668:	0800877d 	.word	0x0800877d
 800866c:	0800877d 	.word	0x0800877d
 8008670:	0800877d 	.word	0x0800877d
 8008674:	0800873b 	.word	0x0800873b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008678:	68fb      	ldr	r3, [r7, #12]
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	68b9      	ldr	r1, [r7, #8]
 800867e:	4618      	mov	r0, r3
 8008680:	f000 f9e2 	bl	8008a48 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008684:	68fb      	ldr	r3, [r7, #12]
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	699a      	ldr	r2, [r3, #24]
 800868a:	68fb      	ldr	r3, [r7, #12]
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	f042 0208 	orr.w	r2, r2, #8
 8008692:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008694:	68fb      	ldr	r3, [r7, #12]
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	699a      	ldr	r2, [r3, #24]
 800869a:	68fb      	ldr	r3, [r7, #12]
 800869c:	681b      	ldr	r3, [r3, #0]
 800869e:	f022 0204 	bic.w	r2, r2, #4
 80086a2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80086a4:	68fb      	ldr	r3, [r7, #12]
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	6999      	ldr	r1, [r3, #24]
 80086aa:	68bb      	ldr	r3, [r7, #8]
 80086ac:	691a      	ldr	r2, [r3, #16]
 80086ae:	68fb      	ldr	r3, [r7, #12]
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	430a      	orrs	r2, r1
 80086b4:	619a      	str	r2, [r3, #24]
      break;
 80086b6:	e062      	b.n	800877e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80086b8:	68fb      	ldr	r3, [r7, #12]
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	68b9      	ldr	r1, [r7, #8]
 80086be:	4618      	mov	r0, r3
 80086c0:	f000 fa32 	bl	8008b28 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80086c4:	68fb      	ldr	r3, [r7, #12]
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	699a      	ldr	r2, [r3, #24]
 80086ca:	68fb      	ldr	r3, [r7, #12]
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80086d2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80086d4:	68fb      	ldr	r3, [r7, #12]
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	699a      	ldr	r2, [r3, #24]
 80086da:	68fb      	ldr	r3, [r7, #12]
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80086e2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80086e4:	68fb      	ldr	r3, [r7, #12]
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	6999      	ldr	r1, [r3, #24]
 80086ea:	68bb      	ldr	r3, [r7, #8]
 80086ec:	691b      	ldr	r3, [r3, #16]
 80086ee:	021a      	lsls	r2, r3, #8
 80086f0:	68fb      	ldr	r3, [r7, #12]
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	430a      	orrs	r2, r1
 80086f6:	619a      	str	r2, [r3, #24]
      break;
 80086f8:	e041      	b.n	800877e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80086fa:	68fb      	ldr	r3, [r7, #12]
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	68b9      	ldr	r1, [r7, #8]
 8008700:	4618      	mov	r0, r3
 8008702:	f000 fa87 	bl	8008c14 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008706:	68fb      	ldr	r3, [r7, #12]
 8008708:	681b      	ldr	r3, [r3, #0]
 800870a:	69da      	ldr	r2, [r3, #28]
 800870c:	68fb      	ldr	r3, [r7, #12]
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	f042 0208 	orr.w	r2, r2, #8
 8008714:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8008716:	68fb      	ldr	r3, [r7, #12]
 8008718:	681b      	ldr	r3, [r3, #0]
 800871a:	69da      	ldr	r2, [r3, #28]
 800871c:	68fb      	ldr	r3, [r7, #12]
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	f022 0204 	bic.w	r2, r2, #4
 8008724:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8008726:	68fb      	ldr	r3, [r7, #12]
 8008728:	681b      	ldr	r3, [r3, #0]
 800872a:	69d9      	ldr	r1, [r3, #28]
 800872c:	68bb      	ldr	r3, [r7, #8]
 800872e:	691a      	ldr	r2, [r3, #16]
 8008730:	68fb      	ldr	r3, [r7, #12]
 8008732:	681b      	ldr	r3, [r3, #0]
 8008734:	430a      	orrs	r2, r1
 8008736:	61da      	str	r2, [r3, #28]
      break;
 8008738:	e021      	b.n	800877e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800873a:	68fb      	ldr	r3, [r7, #12]
 800873c:	681b      	ldr	r3, [r3, #0]
 800873e:	68b9      	ldr	r1, [r7, #8]
 8008740:	4618      	mov	r0, r3
 8008742:	f000 fadb 	bl	8008cfc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008746:	68fb      	ldr	r3, [r7, #12]
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	69da      	ldr	r2, [r3, #28]
 800874c:	68fb      	ldr	r3, [r7, #12]
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008754:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008756:	68fb      	ldr	r3, [r7, #12]
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	69da      	ldr	r2, [r3, #28]
 800875c:	68fb      	ldr	r3, [r7, #12]
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008764:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008766:	68fb      	ldr	r3, [r7, #12]
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	69d9      	ldr	r1, [r3, #28]
 800876c:	68bb      	ldr	r3, [r7, #8]
 800876e:	691b      	ldr	r3, [r3, #16]
 8008770:	021a      	lsls	r2, r3, #8
 8008772:	68fb      	ldr	r3, [r7, #12]
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	430a      	orrs	r2, r1
 8008778:	61da      	str	r2, [r3, #28]
      break;
 800877a:	e000      	b.n	800877e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 800877c:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800877e:	68fb      	ldr	r3, [r7, #12]
 8008780:	2201      	movs	r2, #1
 8008782:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008786:	68fb      	ldr	r3, [r7, #12]
 8008788:	2200      	movs	r2, #0
 800878a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800878e:	2300      	movs	r3, #0
}
 8008790:	4618      	mov	r0, r3
 8008792:	3710      	adds	r7, #16
 8008794:	46bd      	mov	sp, r7
 8008796:	bd80      	pop	{r7, pc}

08008798 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008798:	b580      	push	{r7, lr}
 800879a:	b084      	sub	sp, #16
 800879c:	af00      	add	r7, sp, #0
 800879e:	6078      	str	r0, [r7, #4]
 80087a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80087a8:	2b01      	cmp	r3, #1
 80087aa:	d101      	bne.n	80087b0 <HAL_TIM_ConfigClockSource+0x18>
 80087ac:	2302      	movs	r3, #2
 80087ae:	e0a6      	b.n	80088fe <HAL_TIM_ConfigClockSource+0x166>
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	2201      	movs	r2, #1
 80087b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	2202      	movs	r2, #2
 80087bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	689b      	ldr	r3, [r3, #8]
 80087c6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80087c8:	68fb      	ldr	r3, [r7, #12]
 80087ca:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80087ce:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80087d0:	68fb      	ldr	r3, [r7, #12]
 80087d2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80087d6:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	681b      	ldr	r3, [r3, #0]
 80087dc:	68fa      	ldr	r2, [r7, #12]
 80087de:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80087e0:	683b      	ldr	r3, [r7, #0]
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	2b40      	cmp	r3, #64	; 0x40
 80087e6:	d067      	beq.n	80088b8 <HAL_TIM_ConfigClockSource+0x120>
 80087e8:	2b40      	cmp	r3, #64	; 0x40
 80087ea:	d80b      	bhi.n	8008804 <HAL_TIM_ConfigClockSource+0x6c>
 80087ec:	2b10      	cmp	r3, #16
 80087ee:	d073      	beq.n	80088d8 <HAL_TIM_ConfigClockSource+0x140>
 80087f0:	2b10      	cmp	r3, #16
 80087f2:	d802      	bhi.n	80087fa <HAL_TIM_ConfigClockSource+0x62>
 80087f4:	2b00      	cmp	r3, #0
 80087f6:	d06f      	beq.n	80088d8 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 80087f8:	e078      	b.n	80088ec <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80087fa:	2b20      	cmp	r3, #32
 80087fc:	d06c      	beq.n	80088d8 <HAL_TIM_ConfigClockSource+0x140>
 80087fe:	2b30      	cmp	r3, #48	; 0x30
 8008800:	d06a      	beq.n	80088d8 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8008802:	e073      	b.n	80088ec <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8008804:	2b70      	cmp	r3, #112	; 0x70
 8008806:	d00d      	beq.n	8008824 <HAL_TIM_ConfigClockSource+0x8c>
 8008808:	2b70      	cmp	r3, #112	; 0x70
 800880a:	d804      	bhi.n	8008816 <HAL_TIM_ConfigClockSource+0x7e>
 800880c:	2b50      	cmp	r3, #80	; 0x50
 800880e:	d033      	beq.n	8008878 <HAL_TIM_ConfigClockSource+0xe0>
 8008810:	2b60      	cmp	r3, #96	; 0x60
 8008812:	d041      	beq.n	8008898 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8008814:	e06a      	b.n	80088ec <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8008816:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800881a:	d066      	beq.n	80088ea <HAL_TIM_ConfigClockSource+0x152>
 800881c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008820:	d017      	beq.n	8008852 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8008822:	e063      	b.n	80088ec <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	6818      	ldr	r0, [r3, #0]
 8008828:	683b      	ldr	r3, [r7, #0]
 800882a:	6899      	ldr	r1, [r3, #8]
 800882c:	683b      	ldr	r3, [r7, #0]
 800882e:	685a      	ldr	r2, [r3, #4]
 8008830:	683b      	ldr	r3, [r7, #0]
 8008832:	68db      	ldr	r3, [r3, #12]
 8008834:	f000 fb32 	bl	8008e9c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	689b      	ldr	r3, [r3, #8]
 800883e:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008840:	68fb      	ldr	r3, [r7, #12]
 8008842:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8008846:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	68fa      	ldr	r2, [r7, #12]
 800884e:	609a      	str	r2, [r3, #8]
      break;
 8008850:	e04c      	b.n	80088ec <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	6818      	ldr	r0, [r3, #0]
 8008856:	683b      	ldr	r3, [r7, #0]
 8008858:	6899      	ldr	r1, [r3, #8]
 800885a:	683b      	ldr	r3, [r7, #0]
 800885c:	685a      	ldr	r2, [r3, #4]
 800885e:	683b      	ldr	r3, [r7, #0]
 8008860:	68db      	ldr	r3, [r3, #12]
 8008862:	f000 fb1b 	bl	8008e9c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	681b      	ldr	r3, [r3, #0]
 800886a:	689a      	ldr	r2, [r3, #8]
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008874:	609a      	str	r2, [r3, #8]
      break;
 8008876:	e039      	b.n	80088ec <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	6818      	ldr	r0, [r3, #0]
 800887c:	683b      	ldr	r3, [r7, #0]
 800887e:	6859      	ldr	r1, [r3, #4]
 8008880:	683b      	ldr	r3, [r7, #0]
 8008882:	68db      	ldr	r3, [r3, #12]
 8008884:	461a      	mov	r2, r3
 8008886:	f000 fa8f 	bl	8008da8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	681b      	ldr	r3, [r3, #0]
 800888e:	2150      	movs	r1, #80	; 0x50
 8008890:	4618      	mov	r0, r3
 8008892:	f000 fae8 	bl	8008e66 <TIM_ITRx_SetConfig>
      break;
 8008896:	e029      	b.n	80088ec <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	6818      	ldr	r0, [r3, #0]
 800889c:	683b      	ldr	r3, [r7, #0]
 800889e:	6859      	ldr	r1, [r3, #4]
 80088a0:	683b      	ldr	r3, [r7, #0]
 80088a2:	68db      	ldr	r3, [r3, #12]
 80088a4:	461a      	mov	r2, r3
 80088a6:	f000 faae 	bl	8008e06 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	2160      	movs	r1, #96	; 0x60
 80088b0:	4618      	mov	r0, r3
 80088b2:	f000 fad8 	bl	8008e66 <TIM_ITRx_SetConfig>
      break;
 80088b6:	e019      	b.n	80088ec <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	6818      	ldr	r0, [r3, #0]
 80088bc:	683b      	ldr	r3, [r7, #0]
 80088be:	6859      	ldr	r1, [r3, #4]
 80088c0:	683b      	ldr	r3, [r7, #0]
 80088c2:	68db      	ldr	r3, [r3, #12]
 80088c4:	461a      	mov	r2, r3
 80088c6:	f000 fa6f 	bl	8008da8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	681b      	ldr	r3, [r3, #0]
 80088ce:	2140      	movs	r1, #64	; 0x40
 80088d0:	4618      	mov	r0, r3
 80088d2:	f000 fac8 	bl	8008e66 <TIM_ITRx_SetConfig>
      break;
 80088d6:	e009      	b.n	80088ec <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	681a      	ldr	r2, [r3, #0]
 80088dc:	683b      	ldr	r3, [r7, #0]
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	4619      	mov	r1, r3
 80088e2:	4610      	mov	r0, r2
 80088e4:	f000 fabf 	bl	8008e66 <TIM_ITRx_SetConfig>
      break;
 80088e8:	e000      	b.n	80088ec <HAL_TIM_ConfigClockSource+0x154>
      break;
 80088ea:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	2201      	movs	r2, #1
 80088f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	2200      	movs	r2, #0
 80088f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80088fc:	2300      	movs	r3, #0
}
 80088fe:	4618      	mov	r0, r3
 8008900:	3710      	adds	r7, #16
 8008902:	46bd      	mov	sp, r7
 8008904:	bd80      	pop	{r7, pc}
	...

08008908 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008908:	b480      	push	{r7}
 800890a:	b085      	sub	sp, #20
 800890c:	af00      	add	r7, sp, #0
 800890e:	6078      	str	r0, [r7, #4]
 8008910:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	681b      	ldr	r3, [r3, #0]
 8008916:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	4a40      	ldr	r2, [pc, #256]	; (8008a1c <TIM_Base_SetConfig+0x114>)
 800891c:	4293      	cmp	r3, r2
 800891e:	d013      	beq.n	8008948 <TIM_Base_SetConfig+0x40>
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008926:	d00f      	beq.n	8008948 <TIM_Base_SetConfig+0x40>
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	4a3d      	ldr	r2, [pc, #244]	; (8008a20 <TIM_Base_SetConfig+0x118>)
 800892c:	4293      	cmp	r3, r2
 800892e:	d00b      	beq.n	8008948 <TIM_Base_SetConfig+0x40>
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	4a3c      	ldr	r2, [pc, #240]	; (8008a24 <TIM_Base_SetConfig+0x11c>)
 8008934:	4293      	cmp	r3, r2
 8008936:	d007      	beq.n	8008948 <TIM_Base_SetConfig+0x40>
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	4a3b      	ldr	r2, [pc, #236]	; (8008a28 <TIM_Base_SetConfig+0x120>)
 800893c:	4293      	cmp	r3, r2
 800893e:	d003      	beq.n	8008948 <TIM_Base_SetConfig+0x40>
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	4a3a      	ldr	r2, [pc, #232]	; (8008a2c <TIM_Base_SetConfig+0x124>)
 8008944:	4293      	cmp	r3, r2
 8008946:	d108      	bne.n	800895a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008948:	68fb      	ldr	r3, [r7, #12]
 800894a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800894e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008950:	683b      	ldr	r3, [r7, #0]
 8008952:	685b      	ldr	r3, [r3, #4]
 8008954:	68fa      	ldr	r2, [r7, #12]
 8008956:	4313      	orrs	r3, r2
 8008958:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	4a2f      	ldr	r2, [pc, #188]	; (8008a1c <TIM_Base_SetConfig+0x114>)
 800895e:	4293      	cmp	r3, r2
 8008960:	d02b      	beq.n	80089ba <TIM_Base_SetConfig+0xb2>
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008968:	d027      	beq.n	80089ba <TIM_Base_SetConfig+0xb2>
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	4a2c      	ldr	r2, [pc, #176]	; (8008a20 <TIM_Base_SetConfig+0x118>)
 800896e:	4293      	cmp	r3, r2
 8008970:	d023      	beq.n	80089ba <TIM_Base_SetConfig+0xb2>
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	4a2b      	ldr	r2, [pc, #172]	; (8008a24 <TIM_Base_SetConfig+0x11c>)
 8008976:	4293      	cmp	r3, r2
 8008978:	d01f      	beq.n	80089ba <TIM_Base_SetConfig+0xb2>
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	4a2a      	ldr	r2, [pc, #168]	; (8008a28 <TIM_Base_SetConfig+0x120>)
 800897e:	4293      	cmp	r3, r2
 8008980:	d01b      	beq.n	80089ba <TIM_Base_SetConfig+0xb2>
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	4a29      	ldr	r2, [pc, #164]	; (8008a2c <TIM_Base_SetConfig+0x124>)
 8008986:	4293      	cmp	r3, r2
 8008988:	d017      	beq.n	80089ba <TIM_Base_SetConfig+0xb2>
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	4a28      	ldr	r2, [pc, #160]	; (8008a30 <TIM_Base_SetConfig+0x128>)
 800898e:	4293      	cmp	r3, r2
 8008990:	d013      	beq.n	80089ba <TIM_Base_SetConfig+0xb2>
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	4a27      	ldr	r2, [pc, #156]	; (8008a34 <TIM_Base_SetConfig+0x12c>)
 8008996:	4293      	cmp	r3, r2
 8008998:	d00f      	beq.n	80089ba <TIM_Base_SetConfig+0xb2>
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	4a26      	ldr	r2, [pc, #152]	; (8008a38 <TIM_Base_SetConfig+0x130>)
 800899e:	4293      	cmp	r3, r2
 80089a0:	d00b      	beq.n	80089ba <TIM_Base_SetConfig+0xb2>
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	4a25      	ldr	r2, [pc, #148]	; (8008a3c <TIM_Base_SetConfig+0x134>)
 80089a6:	4293      	cmp	r3, r2
 80089a8:	d007      	beq.n	80089ba <TIM_Base_SetConfig+0xb2>
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	4a24      	ldr	r2, [pc, #144]	; (8008a40 <TIM_Base_SetConfig+0x138>)
 80089ae:	4293      	cmp	r3, r2
 80089b0:	d003      	beq.n	80089ba <TIM_Base_SetConfig+0xb2>
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	4a23      	ldr	r2, [pc, #140]	; (8008a44 <TIM_Base_SetConfig+0x13c>)
 80089b6:	4293      	cmp	r3, r2
 80089b8:	d108      	bne.n	80089cc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80089ba:	68fb      	ldr	r3, [r7, #12]
 80089bc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80089c0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80089c2:	683b      	ldr	r3, [r7, #0]
 80089c4:	68db      	ldr	r3, [r3, #12]
 80089c6:	68fa      	ldr	r2, [r7, #12]
 80089c8:	4313      	orrs	r3, r2
 80089ca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80089cc:	68fb      	ldr	r3, [r7, #12]
 80089ce:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80089d2:	683b      	ldr	r3, [r7, #0]
 80089d4:	695b      	ldr	r3, [r3, #20]
 80089d6:	4313      	orrs	r3, r2
 80089d8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	68fa      	ldr	r2, [r7, #12]
 80089de:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80089e0:	683b      	ldr	r3, [r7, #0]
 80089e2:	689a      	ldr	r2, [r3, #8]
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80089e8:	683b      	ldr	r3, [r7, #0]
 80089ea:	681a      	ldr	r2, [r3, #0]
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	4a0a      	ldr	r2, [pc, #40]	; (8008a1c <TIM_Base_SetConfig+0x114>)
 80089f4:	4293      	cmp	r3, r2
 80089f6:	d003      	beq.n	8008a00 <TIM_Base_SetConfig+0xf8>
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	4a0c      	ldr	r2, [pc, #48]	; (8008a2c <TIM_Base_SetConfig+0x124>)
 80089fc:	4293      	cmp	r3, r2
 80089fe:	d103      	bne.n	8008a08 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008a00:	683b      	ldr	r3, [r7, #0]
 8008a02:	691a      	ldr	r2, [r3, #16]
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	2201      	movs	r2, #1
 8008a0c:	615a      	str	r2, [r3, #20]
}
 8008a0e:	bf00      	nop
 8008a10:	3714      	adds	r7, #20
 8008a12:	46bd      	mov	sp, r7
 8008a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a18:	4770      	bx	lr
 8008a1a:	bf00      	nop
 8008a1c:	40010000 	.word	0x40010000
 8008a20:	40000400 	.word	0x40000400
 8008a24:	40000800 	.word	0x40000800
 8008a28:	40000c00 	.word	0x40000c00
 8008a2c:	40010400 	.word	0x40010400
 8008a30:	40014000 	.word	0x40014000
 8008a34:	40014400 	.word	0x40014400
 8008a38:	40014800 	.word	0x40014800
 8008a3c:	40001800 	.word	0x40001800
 8008a40:	40001c00 	.word	0x40001c00
 8008a44:	40002000 	.word	0x40002000

08008a48 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008a48:	b480      	push	{r7}
 8008a4a:	b087      	sub	sp, #28
 8008a4c:	af00      	add	r7, sp, #0
 8008a4e:	6078      	str	r0, [r7, #4]
 8008a50:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	6a1b      	ldr	r3, [r3, #32]
 8008a56:	f023 0201 	bic.w	r2, r3, #1
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	6a1b      	ldr	r3, [r3, #32]
 8008a62:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	685b      	ldr	r3, [r3, #4]
 8008a68:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	699b      	ldr	r3, [r3, #24]
 8008a6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008a70:	68fb      	ldr	r3, [r7, #12]
 8008a72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008a76:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008a78:	68fb      	ldr	r3, [r7, #12]
 8008a7a:	f023 0303 	bic.w	r3, r3, #3
 8008a7e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008a80:	683b      	ldr	r3, [r7, #0]
 8008a82:	681b      	ldr	r3, [r3, #0]
 8008a84:	68fa      	ldr	r2, [r7, #12]
 8008a86:	4313      	orrs	r3, r2
 8008a88:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008a8a:	697b      	ldr	r3, [r7, #20]
 8008a8c:	f023 0302 	bic.w	r3, r3, #2
 8008a90:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008a92:	683b      	ldr	r3, [r7, #0]
 8008a94:	689b      	ldr	r3, [r3, #8]
 8008a96:	697a      	ldr	r2, [r7, #20]
 8008a98:	4313      	orrs	r3, r2
 8008a9a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	4a20      	ldr	r2, [pc, #128]	; (8008b20 <TIM_OC1_SetConfig+0xd8>)
 8008aa0:	4293      	cmp	r3, r2
 8008aa2:	d003      	beq.n	8008aac <TIM_OC1_SetConfig+0x64>
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	4a1f      	ldr	r2, [pc, #124]	; (8008b24 <TIM_OC1_SetConfig+0xdc>)
 8008aa8:	4293      	cmp	r3, r2
 8008aaa:	d10c      	bne.n	8008ac6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008aac:	697b      	ldr	r3, [r7, #20]
 8008aae:	f023 0308 	bic.w	r3, r3, #8
 8008ab2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008ab4:	683b      	ldr	r3, [r7, #0]
 8008ab6:	68db      	ldr	r3, [r3, #12]
 8008ab8:	697a      	ldr	r2, [r7, #20]
 8008aba:	4313      	orrs	r3, r2
 8008abc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008abe:	697b      	ldr	r3, [r7, #20]
 8008ac0:	f023 0304 	bic.w	r3, r3, #4
 8008ac4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	4a15      	ldr	r2, [pc, #84]	; (8008b20 <TIM_OC1_SetConfig+0xd8>)
 8008aca:	4293      	cmp	r3, r2
 8008acc:	d003      	beq.n	8008ad6 <TIM_OC1_SetConfig+0x8e>
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	4a14      	ldr	r2, [pc, #80]	; (8008b24 <TIM_OC1_SetConfig+0xdc>)
 8008ad2:	4293      	cmp	r3, r2
 8008ad4:	d111      	bne.n	8008afa <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008ad6:	693b      	ldr	r3, [r7, #16]
 8008ad8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008adc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008ade:	693b      	ldr	r3, [r7, #16]
 8008ae0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008ae4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008ae6:	683b      	ldr	r3, [r7, #0]
 8008ae8:	695b      	ldr	r3, [r3, #20]
 8008aea:	693a      	ldr	r2, [r7, #16]
 8008aec:	4313      	orrs	r3, r2
 8008aee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008af0:	683b      	ldr	r3, [r7, #0]
 8008af2:	699b      	ldr	r3, [r3, #24]
 8008af4:	693a      	ldr	r2, [r7, #16]
 8008af6:	4313      	orrs	r3, r2
 8008af8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	693a      	ldr	r2, [r7, #16]
 8008afe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	68fa      	ldr	r2, [r7, #12]
 8008b04:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008b06:	683b      	ldr	r3, [r7, #0]
 8008b08:	685a      	ldr	r2, [r3, #4]
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	697a      	ldr	r2, [r7, #20]
 8008b12:	621a      	str	r2, [r3, #32]
}
 8008b14:	bf00      	nop
 8008b16:	371c      	adds	r7, #28
 8008b18:	46bd      	mov	sp, r7
 8008b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b1e:	4770      	bx	lr
 8008b20:	40010000 	.word	0x40010000
 8008b24:	40010400 	.word	0x40010400

08008b28 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008b28:	b480      	push	{r7}
 8008b2a:	b087      	sub	sp, #28
 8008b2c:	af00      	add	r7, sp, #0
 8008b2e:	6078      	str	r0, [r7, #4]
 8008b30:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	6a1b      	ldr	r3, [r3, #32]
 8008b36:	f023 0210 	bic.w	r2, r3, #16
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	6a1b      	ldr	r3, [r3, #32]
 8008b42:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	685b      	ldr	r3, [r3, #4]
 8008b48:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	699b      	ldr	r3, [r3, #24]
 8008b4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008b50:	68fb      	ldr	r3, [r7, #12]
 8008b52:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008b56:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008b58:	68fb      	ldr	r3, [r7, #12]
 8008b5a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008b5e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008b60:	683b      	ldr	r3, [r7, #0]
 8008b62:	681b      	ldr	r3, [r3, #0]
 8008b64:	021b      	lsls	r3, r3, #8
 8008b66:	68fa      	ldr	r2, [r7, #12]
 8008b68:	4313      	orrs	r3, r2
 8008b6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008b6c:	697b      	ldr	r3, [r7, #20]
 8008b6e:	f023 0320 	bic.w	r3, r3, #32
 8008b72:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008b74:	683b      	ldr	r3, [r7, #0]
 8008b76:	689b      	ldr	r3, [r3, #8]
 8008b78:	011b      	lsls	r3, r3, #4
 8008b7a:	697a      	ldr	r2, [r7, #20]
 8008b7c:	4313      	orrs	r3, r2
 8008b7e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	4a22      	ldr	r2, [pc, #136]	; (8008c0c <TIM_OC2_SetConfig+0xe4>)
 8008b84:	4293      	cmp	r3, r2
 8008b86:	d003      	beq.n	8008b90 <TIM_OC2_SetConfig+0x68>
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	4a21      	ldr	r2, [pc, #132]	; (8008c10 <TIM_OC2_SetConfig+0xe8>)
 8008b8c:	4293      	cmp	r3, r2
 8008b8e:	d10d      	bne.n	8008bac <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008b90:	697b      	ldr	r3, [r7, #20]
 8008b92:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008b96:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008b98:	683b      	ldr	r3, [r7, #0]
 8008b9a:	68db      	ldr	r3, [r3, #12]
 8008b9c:	011b      	lsls	r3, r3, #4
 8008b9e:	697a      	ldr	r2, [r7, #20]
 8008ba0:	4313      	orrs	r3, r2
 8008ba2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008ba4:	697b      	ldr	r3, [r7, #20]
 8008ba6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008baa:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	4a17      	ldr	r2, [pc, #92]	; (8008c0c <TIM_OC2_SetConfig+0xe4>)
 8008bb0:	4293      	cmp	r3, r2
 8008bb2:	d003      	beq.n	8008bbc <TIM_OC2_SetConfig+0x94>
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	4a16      	ldr	r2, [pc, #88]	; (8008c10 <TIM_OC2_SetConfig+0xe8>)
 8008bb8:	4293      	cmp	r3, r2
 8008bba:	d113      	bne.n	8008be4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008bbc:	693b      	ldr	r3, [r7, #16]
 8008bbe:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008bc2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008bc4:	693b      	ldr	r3, [r7, #16]
 8008bc6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008bca:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008bcc:	683b      	ldr	r3, [r7, #0]
 8008bce:	695b      	ldr	r3, [r3, #20]
 8008bd0:	009b      	lsls	r3, r3, #2
 8008bd2:	693a      	ldr	r2, [r7, #16]
 8008bd4:	4313      	orrs	r3, r2
 8008bd6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008bd8:	683b      	ldr	r3, [r7, #0]
 8008bda:	699b      	ldr	r3, [r3, #24]
 8008bdc:	009b      	lsls	r3, r3, #2
 8008bde:	693a      	ldr	r2, [r7, #16]
 8008be0:	4313      	orrs	r3, r2
 8008be2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	693a      	ldr	r2, [r7, #16]
 8008be8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	68fa      	ldr	r2, [r7, #12]
 8008bee:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008bf0:	683b      	ldr	r3, [r7, #0]
 8008bf2:	685a      	ldr	r2, [r3, #4]
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	697a      	ldr	r2, [r7, #20]
 8008bfc:	621a      	str	r2, [r3, #32]
}
 8008bfe:	bf00      	nop
 8008c00:	371c      	adds	r7, #28
 8008c02:	46bd      	mov	sp, r7
 8008c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c08:	4770      	bx	lr
 8008c0a:	bf00      	nop
 8008c0c:	40010000 	.word	0x40010000
 8008c10:	40010400 	.word	0x40010400

08008c14 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008c14:	b480      	push	{r7}
 8008c16:	b087      	sub	sp, #28
 8008c18:	af00      	add	r7, sp, #0
 8008c1a:	6078      	str	r0, [r7, #4]
 8008c1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	6a1b      	ldr	r3, [r3, #32]
 8008c22:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	6a1b      	ldr	r3, [r3, #32]
 8008c2e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	685b      	ldr	r3, [r3, #4]
 8008c34:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	69db      	ldr	r3, [r3, #28]
 8008c3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008c3c:	68fb      	ldr	r3, [r7, #12]
 8008c3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008c42:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008c44:	68fb      	ldr	r3, [r7, #12]
 8008c46:	f023 0303 	bic.w	r3, r3, #3
 8008c4a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008c4c:	683b      	ldr	r3, [r7, #0]
 8008c4e:	681b      	ldr	r3, [r3, #0]
 8008c50:	68fa      	ldr	r2, [r7, #12]
 8008c52:	4313      	orrs	r3, r2
 8008c54:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008c56:	697b      	ldr	r3, [r7, #20]
 8008c58:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008c5c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008c5e:	683b      	ldr	r3, [r7, #0]
 8008c60:	689b      	ldr	r3, [r3, #8]
 8008c62:	021b      	lsls	r3, r3, #8
 8008c64:	697a      	ldr	r2, [r7, #20]
 8008c66:	4313      	orrs	r3, r2
 8008c68:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	4a21      	ldr	r2, [pc, #132]	; (8008cf4 <TIM_OC3_SetConfig+0xe0>)
 8008c6e:	4293      	cmp	r3, r2
 8008c70:	d003      	beq.n	8008c7a <TIM_OC3_SetConfig+0x66>
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	4a20      	ldr	r2, [pc, #128]	; (8008cf8 <TIM_OC3_SetConfig+0xe4>)
 8008c76:	4293      	cmp	r3, r2
 8008c78:	d10d      	bne.n	8008c96 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008c7a:	697b      	ldr	r3, [r7, #20]
 8008c7c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008c80:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008c82:	683b      	ldr	r3, [r7, #0]
 8008c84:	68db      	ldr	r3, [r3, #12]
 8008c86:	021b      	lsls	r3, r3, #8
 8008c88:	697a      	ldr	r2, [r7, #20]
 8008c8a:	4313      	orrs	r3, r2
 8008c8c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008c8e:	697b      	ldr	r3, [r7, #20]
 8008c90:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008c94:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	4a16      	ldr	r2, [pc, #88]	; (8008cf4 <TIM_OC3_SetConfig+0xe0>)
 8008c9a:	4293      	cmp	r3, r2
 8008c9c:	d003      	beq.n	8008ca6 <TIM_OC3_SetConfig+0x92>
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	4a15      	ldr	r2, [pc, #84]	; (8008cf8 <TIM_OC3_SetConfig+0xe4>)
 8008ca2:	4293      	cmp	r3, r2
 8008ca4:	d113      	bne.n	8008cce <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008ca6:	693b      	ldr	r3, [r7, #16]
 8008ca8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008cac:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008cae:	693b      	ldr	r3, [r7, #16]
 8008cb0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008cb4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008cb6:	683b      	ldr	r3, [r7, #0]
 8008cb8:	695b      	ldr	r3, [r3, #20]
 8008cba:	011b      	lsls	r3, r3, #4
 8008cbc:	693a      	ldr	r2, [r7, #16]
 8008cbe:	4313      	orrs	r3, r2
 8008cc0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008cc2:	683b      	ldr	r3, [r7, #0]
 8008cc4:	699b      	ldr	r3, [r3, #24]
 8008cc6:	011b      	lsls	r3, r3, #4
 8008cc8:	693a      	ldr	r2, [r7, #16]
 8008cca:	4313      	orrs	r3, r2
 8008ccc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	693a      	ldr	r2, [r7, #16]
 8008cd2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	68fa      	ldr	r2, [r7, #12]
 8008cd8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008cda:	683b      	ldr	r3, [r7, #0]
 8008cdc:	685a      	ldr	r2, [r3, #4]
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	697a      	ldr	r2, [r7, #20]
 8008ce6:	621a      	str	r2, [r3, #32]
}
 8008ce8:	bf00      	nop
 8008cea:	371c      	adds	r7, #28
 8008cec:	46bd      	mov	sp, r7
 8008cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cf2:	4770      	bx	lr
 8008cf4:	40010000 	.word	0x40010000
 8008cf8:	40010400 	.word	0x40010400

08008cfc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008cfc:	b480      	push	{r7}
 8008cfe:	b087      	sub	sp, #28
 8008d00:	af00      	add	r7, sp, #0
 8008d02:	6078      	str	r0, [r7, #4]
 8008d04:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	6a1b      	ldr	r3, [r3, #32]
 8008d0a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	6a1b      	ldr	r3, [r3, #32]
 8008d16:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	685b      	ldr	r3, [r3, #4]
 8008d1c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	69db      	ldr	r3, [r3, #28]
 8008d22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008d24:	68fb      	ldr	r3, [r7, #12]
 8008d26:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008d2a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008d2c:	68fb      	ldr	r3, [r7, #12]
 8008d2e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008d32:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008d34:	683b      	ldr	r3, [r7, #0]
 8008d36:	681b      	ldr	r3, [r3, #0]
 8008d38:	021b      	lsls	r3, r3, #8
 8008d3a:	68fa      	ldr	r2, [r7, #12]
 8008d3c:	4313      	orrs	r3, r2
 8008d3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008d40:	693b      	ldr	r3, [r7, #16]
 8008d42:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008d46:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008d48:	683b      	ldr	r3, [r7, #0]
 8008d4a:	689b      	ldr	r3, [r3, #8]
 8008d4c:	031b      	lsls	r3, r3, #12
 8008d4e:	693a      	ldr	r2, [r7, #16]
 8008d50:	4313      	orrs	r3, r2
 8008d52:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	4a12      	ldr	r2, [pc, #72]	; (8008da0 <TIM_OC4_SetConfig+0xa4>)
 8008d58:	4293      	cmp	r3, r2
 8008d5a:	d003      	beq.n	8008d64 <TIM_OC4_SetConfig+0x68>
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	4a11      	ldr	r2, [pc, #68]	; (8008da4 <TIM_OC4_SetConfig+0xa8>)
 8008d60:	4293      	cmp	r3, r2
 8008d62:	d109      	bne.n	8008d78 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008d64:	697b      	ldr	r3, [r7, #20]
 8008d66:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008d6a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008d6c:	683b      	ldr	r3, [r7, #0]
 8008d6e:	695b      	ldr	r3, [r3, #20]
 8008d70:	019b      	lsls	r3, r3, #6
 8008d72:	697a      	ldr	r2, [r7, #20]
 8008d74:	4313      	orrs	r3, r2
 8008d76:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	697a      	ldr	r2, [r7, #20]
 8008d7c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	68fa      	ldr	r2, [r7, #12]
 8008d82:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008d84:	683b      	ldr	r3, [r7, #0]
 8008d86:	685a      	ldr	r2, [r3, #4]
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	693a      	ldr	r2, [r7, #16]
 8008d90:	621a      	str	r2, [r3, #32]
}
 8008d92:	bf00      	nop
 8008d94:	371c      	adds	r7, #28
 8008d96:	46bd      	mov	sp, r7
 8008d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d9c:	4770      	bx	lr
 8008d9e:	bf00      	nop
 8008da0:	40010000 	.word	0x40010000
 8008da4:	40010400 	.word	0x40010400

08008da8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008da8:	b480      	push	{r7}
 8008daa:	b087      	sub	sp, #28
 8008dac:	af00      	add	r7, sp, #0
 8008dae:	60f8      	str	r0, [r7, #12]
 8008db0:	60b9      	str	r1, [r7, #8]
 8008db2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008db4:	68fb      	ldr	r3, [r7, #12]
 8008db6:	6a1b      	ldr	r3, [r3, #32]
 8008db8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008dba:	68fb      	ldr	r3, [r7, #12]
 8008dbc:	6a1b      	ldr	r3, [r3, #32]
 8008dbe:	f023 0201 	bic.w	r2, r3, #1
 8008dc2:	68fb      	ldr	r3, [r7, #12]
 8008dc4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008dc6:	68fb      	ldr	r3, [r7, #12]
 8008dc8:	699b      	ldr	r3, [r3, #24]
 8008dca:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008dcc:	693b      	ldr	r3, [r7, #16]
 8008dce:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008dd2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	011b      	lsls	r3, r3, #4
 8008dd8:	693a      	ldr	r2, [r7, #16]
 8008dda:	4313      	orrs	r3, r2
 8008ddc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008dde:	697b      	ldr	r3, [r7, #20]
 8008de0:	f023 030a 	bic.w	r3, r3, #10
 8008de4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008de6:	697a      	ldr	r2, [r7, #20]
 8008de8:	68bb      	ldr	r3, [r7, #8]
 8008dea:	4313      	orrs	r3, r2
 8008dec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008dee:	68fb      	ldr	r3, [r7, #12]
 8008df0:	693a      	ldr	r2, [r7, #16]
 8008df2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008df4:	68fb      	ldr	r3, [r7, #12]
 8008df6:	697a      	ldr	r2, [r7, #20]
 8008df8:	621a      	str	r2, [r3, #32]
}
 8008dfa:	bf00      	nop
 8008dfc:	371c      	adds	r7, #28
 8008dfe:	46bd      	mov	sp, r7
 8008e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e04:	4770      	bx	lr

08008e06 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008e06:	b480      	push	{r7}
 8008e08:	b087      	sub	sp, #28
 8008e0a:	af00      	add	r7, sp, #0
 8008e0c:	60f8      	str	r0, [r7, #12]
 8008e0e:	60b9      	str	r1, [r7, #8]
 8008e10:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008e12:	68fb      	ldr	r3, [r7, #12]
 8008e14:	6a1b      	ldr	r3, [r3, #32]
 8008e16:	f023 0210 	bic.w	r2, r3, #16
 8008e1a:	68fb      	ldr	r3, [r7, #12]
 8008e1c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008e1e:	68fb      	ldr	r3, [r7, #12]
 8008e20:	699b      	ldr	r3, [r3, #24]
 8008e22:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008e24:	68fb      	ldr	r3, [r7, #12]
 8008e26:	6a1b      	ldr	r3, [r3, #32]
 8008e28:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008e2a:	697b      	ldr	r3, [r7, #20]
 8008e2c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008e30:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	031b      	lsls	r3, r3, #12
 8008e36:	697a      	ldr	r2, [r7, #20]
 8008e38:	4313      	orrs	r3, r2
 8008e3a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008e3c:	693b      	ldr	r3, [r7, #16]
 8008e3e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008e42:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008e44:	68bb      	ldr	r3, [r7, #8]
 8008e46:	011b      	lsls	r3, r3, #4
 8008e48:	693a      	ldr	r2, [r7, #16]
 8008e4a:	4313      	orrs	r3, r2
 8008e4c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008e4e:	68fb      	ldr	r3, [r7, #12]
 8008e50:	697a      	ldr	r2, [r7, #20]
 8008e52:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008e54:	68fb      	ldr	r3, [r7, #12]
 8008e56:	693a      	ldr	r2, [r7, #16]
 8008e58:	621a      	str	r2, [r3, #32]
}
 8008e5a:	bf00      	nop
 8008e5c:	371c      	adds	r7, #28
 8008e5e:	46bd      	mov	sp, r7
 8008e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e64:	4770      	bx	lr

08008e66 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008e66:	b480      	push	{r7}
 8008e68:	b085      	sub	sp, #20
 8008e6a:	af00      	add	r7, sp, #0
 8008e6c:	6078      	str	r0, [r7, #4]
 8008e6e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	689b      	ldr	r3, [r3, #8]
 8008e74:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008e76:	68fb      	ldr	r3, [r7, #12]
 8008e78:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008e7c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008e7e:	683a      	ldr	r2, [r7, #0]
 8008e80:	68fb      	ldr	r3, [r7, #12]
 8008e82:	4313      	orrs	r3, r2
 8008e84:	f043 0307 	orr.w	r3, r3, #7
 8008e88:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	68fa      	ldr	r2, [r7, #12]
 8008e8e:	609a      	str	r2, [r3, #8]
}
 8008e90:	bf00      	nop
 8008e92:	3714      	adds	r7, #20
 8008e94:	46bd      	mov	sp, r7
 8008e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e9a:	4770      	bx	lr

08008e9c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008e9c:	b480      	push	{r7}
 8008e9e:	b087      	sub	sp, #28
 8008ea0:	af00      	add	r7, sp, #0
 8008ea2:	60f8      	str	r0, [r7, #12]
 8008ea4:	60b9      	str	r1, [r7, #8]
 8008ea6:	607a      	str	r2, [r7, #4]
 8008ea8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008eaa:	68fb      	ldr	r3, [r7, #12]
 8008eac:	689b      	ldr	r3, [r3, #8]
 8008eae:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008eb0:	697b      	ldr	r3, [r7, #20]
 8008eb2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008eb6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008eb8:	683b      	ldr	r3, [r7, #0]
 8008eba:	021a      	lsls	r2, r3, #8
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	431a      	orrs	r2, r3
 8008ec0:	68bb      	ldr	r3, [r7, #8]
 8008ec2:	4313      	orrs	r3, r2
 8008ec4:	697a      	ldr	r2, [r7, #20]
 8008ec6:	4313      	orrs	r3, r2
 8008ec8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008eca:	68fb      	ldr	r3, [r7, #12]
 8008ecc:	697a      	ldr	r2, [r7, #20]
 8008ece:	609a      	str	r2, [r3, #8]
}
 8008ed0:	bf00      	nop
 8008ed2:	371c      	adds	r7, #28
 8008ed4:	46bd      	mov	sp, r7
 8008ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eda:	4770      	bx	lr

08008edc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008edc:	b480      	push	{r7}
 8008ede:	b087      	sub	sp, #28
 8008ee0:	af00      	add	r7, sp, #0
 8008ee2:	60f8      	str	r0, [r7, #12]
 8008ee4:	60b9      	str	r1, [r7, #8]
 8008ee6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008ee8:	68bb      	ldr	r3, [r7, #8]
 8008eea:	f003 031f 	and.w	r3, r3, #31
 8008eee:	2201      	movs	r2, #1
 8008ef0:	fa02 f303 	lsl.w	r3, r2, r3
 8008ef4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008ef6:	68fb      	ldr	r3, [r7, #12]
 8008ef8:	6a1a      	ldr	r2, [r3, #32]
 8008efa:	697b      	ldr	r3, [r7, #20]
 8008efc:	43db      	mvns	r3, r3
 8008efe:	401a      	ands	r2, r3
 8008f00:	68fb      	ldr	r3, [r7, #12]
 8008f02:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008f04:	68fb      	ldr	r3, [r7, #12]
 8008f06:	6a1a      	ldr	r2, [r3, #32]
 8008f08:	68bb      	ldr	r3, [r7, #8]
 8008f0a:	f003 031f 	and.w	r3, r3, #31
 8008f0e:	6879      	ldr	r1, [r7, #4]
 8008f10:	fa01 f303 	lsl.w	r3, r1, r3
 8008f14:	431a      	orrs	r2, r3
 8008f16:	68fb      	ldr	r3, [r7, #12]
 8008f18:	621a      	str	r2, [r3, #32]
}
 8008f1a:	bf00      	nop
 8008f1c:	371c      	adds	r7, #28
 8008f1e:	46bd      	mov	sp, r7
 8008f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f24:	4770      	bx	lr
	...

08008f28 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008f28:	b480      	push	{r7}
 8008f2a:	b085      	sub	sp, #20
 8008f2c:	af00      	add	r7, sp, #0
 8008f2e:	6078      	str	r0, [r7, #4]
 8008f30:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008f38:	2b01      	cmp	r3, #1
 8008f3a:	d101      	bne.n	8008f40 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008f3c:	2302      	movs	r3, #2
 8008f3e:	e05a      	b.n	8008ff6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	2201      	movs	r2, #1
 8008f44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	2202      	movs	r2, #2
 8008f4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	681b      	ldr	r3, [r3, #0]
 8008f54:	685b      	ldr	r3, [r3, #4]
 8008f56:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	681b      	ldr	r3, [r3, #0]
 8008f5c:	689b      	ldr	r3, [r3, #8]
 8008f5e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008f60:	68fb      	ldr	r3, [r7, #12]
 8008f62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008f66:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008f68:	683b      	ldr	r3, [r7, #0]
 8008f6a:	681b      	ldr	r3, [r3, #0]
 8008f6c:	68fa      	ldr	r2, [r7, #12]
 8008f6e:	4313      	orrs	r3, r2
 8008f70:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	681b      	ldr	r3, [r3, #0]
 8008f76:	68fa      	ldr	r2, [r7, #12]
 8008f78:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	681b      	ldr	r3, [r3, #0]
 8008f7e:	4a21      	ldr	r2, [pc, #132]	; (8009004 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8008f80:	4293      	cmp	r3, r2
 8008f82:	d022      	beq.n	8008fca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	681b      	ldr	r3, [r3, #0]
 8008f88:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008f8c:	d01d      	beq.n	8008fca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	681b      	ldr	r3, [r3, #0]
 8008f92:	4a1d      	ldr	r2, [pc, #116]	; (8009008 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8008f94:	4293      	cmp	r3, r2
 8008f96:	d018      	beq.n	8008fca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	681b      	ldr	r3, [r3, #0]
 8008f9c:	4a1b      	ldr	r2, [pc, #108]	; (800900c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8008f9e:	4293      	cmp	r3, r2
 8008fa0:	d013      	beq.n	8008fca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	681b      	ldr	r3, [r3, #0]
 8008fa6:	4a1a      	ldr	r2, [pc, #104]	; (8009010 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8008fa8:	4293      	cmp	r3, r2
 8008faa:	d00e      	beq.n	8008fca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	681b      	ldr	r3, [r3, #0]
 8008fb0:	4a18      	ldr	r2, [pc, #96]	; (8009014 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8008fb2:	4293      	cmp	r3, r2
 8008fb4:	d009      	beq.n	8008fca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	681b      	ldr	r3, [r3, #0]
 8008fba:	4a17      	ldr	r2, [pc, #92]	; (8009018 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8008fbc:	4293      	cmp	r3, r2
 8008fbe:	d004      	beq.n	8008fca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	681b      	ldr	r3, [r3, #0]
 8008fc4:	4a15      	ldr	r2, [pc, #84]	; (800901c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8008fc6:	4293      	cmp	r3, r2
 8008fc8:	d10c      	bne.n	8008fe4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008fca:	68bb      	ldr	r3, [r7, #8]
 8008fcc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008fd0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008fd2:	683b      	ldr	r3, [r7, #0]
 8008fd4:	685b      	ldr	r3, [r3, #4]
 8008fd6:	68ba      	ldr	r2, [r7, #8]
 8008fd8:	4313      	orrs	r3, r2
 8008fda:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	681b      	ldr	r3, [r3, #0]
 8008fe0:	68ba      	ldr	r2, [r7, #8]
 8008fe2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	2201      	movs	r2, #1
 8008fe8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	2200      	movs	r2, #0
 8008ff0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008ff4:	2300      	movs	r3, #0
}
 8008ff6:	4618      	mov	r0, r3
 8008ff8:	3714      	adds	r7, #20
 8008ffa:	46bd      	mov	sp, r7
 8008ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009000:	4770      	bx	lr
 8009002:	bf00      	nop
 8009004:	40010000 	.word	0x40010000
 8009008:	40000400 	.word	0x40000400
 800900c:	40000800 	.word	0x40000800
 8009010:	40000c00 	.word	0x40000c00
 8009014:	40010400 	.word	0x40010400
 8009018:	40014000 	.word	0x40014000
 800901c:	40001800 	.word	0x40001800

08009020 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009020:	b580      	push	{r7, lr}
 8009022:	b082      	sub	sp, #8
 8009024:	af00      	add	r7, sp, #0
 8009026:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	2b00      	cmp	r3, #0
 800902c:	d101      	bne.n	8009032 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800902e:	2301      	movs	r3, #1
 8009030:	e03f      	b.n	80090b2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8009038:	b2db      	uxtb	r3, r3
 800903a:	2b00      	cmp	r3, #0
 800903c:	d106      	bne.n	800904c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	2200      	movs	r2, #0
 8009042:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009046:	6878      	ldr	r0, [r7, #4]
 8009048:	f7fa fc60 	bl	800390c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	2224      	movs	r2, #36	; 0x24
 8009050:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	681b      	ldr	r3, [r3, #0]
 8009058:	68da      	ldr	r2, [r3, #12]
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	681b      	ldr	r3, [r3, #0]
 800905e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009062:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8009064:	6878      	ldr	r0, [r7, #4]
 8009066:	f000 f9cf 	bl	8009408 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	681b      	ldr	r3, [r3, #0]
 800906e:	691a      	ldr	r2, [r3, #16]
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	681b      	ldr	r3, [r3, #0]
 8009074:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009078:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	681b      	ldr	r3, [r3, #0]
 800907e:	695a      	ldr	r2, [r3, #20]
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	681b      	ldr	r3, [r3, #0]
 8009084:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009088:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	681b      	ldr	r3, [r3, #0]
 800908e:	68da      	ldr	r2, [r3, #12]
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	681b      	ldr	r3, [r3, #0]
 8009094:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009098:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	2200      	movs	r2, #0
 800909e:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	2220      	movs	r2, #32
 80090a4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	2220      	movs	r2, #32
 80090ac:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80090b0:	2300      	movs	r3, #0
}
 80090b2:	4618      	mov	r0, r3
 80090b4:	3708      	adds	r7, #8
 80090b6:	46bd      	mov	sp, r7
 80090b8:	bd80      	pop	{r7, pc}

080090ba <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80090ba:	b580      	push	{r7, lr}
 80090bc:	b088      	sub	sp, #32
 80090be:	af02      	add	r7, sp, #8
 80090c0:	60f8      	str	r0, [r7, #12]
 80090c2:	60b9      	str	r1, [r7, #8]
 80090c4:	603b      	str	r3, [r7, #0]
 80090c6:	4613      	mov	r3, r2
 80090c8:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 80090ca:	2300      	movs	r3, #0
 80090cc:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80090ce:	68fb      	ldr	r3, [r7, #12]
 80090d0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80090d4:	b2db      	uxtb	r3, r3
 80090d6:	2b20      	cmp	r3, #32
 80090d8:	f040 8083 	bne.w	80091e2 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 80090dc:	68bb      	ldr	r3, [r7, #8]
 80090de:	2b00      	cmp	r3, #0
 80090e0:	d002      	beq.n	80090e8 <HAL_UART_Transmit+0x2e>
 80090e2:	88fb      	ldrh	r3, [r7, #6]
 80090e4:	2b00      	cmp	r3, #0
 80090e6:	d101      	bne.n	80090ec <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 80090e8:	2301      	movs	r3, #1
 80090ea:	e07b      	b.n	80091e4 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80090ec:	68fb      	ldr	r3, [r7, #12]
 80090ee:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80090f2:	2b01      	cmp	r3, #1
 80090f4:	d101      	bne.n	80090fa <HAL_UART_Transmit+0x40>
 80090f6:	2302      	movs	r3, #2
 80090f8:	e074      	b.n	80091e4 <HAL_UART_Transmit+0x12a>
 80090fa:	68fb      	ldr	r3, [r7, #12]
 80090fc:	2201      	movs	r2, #1
 80090fe:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009102:	68fb      	ldr	r3, [r7, #12]
 8009104:	2200      	movs	r2, #0
 8009106:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009108:	68fb      	ldr	r3, [r7, #12]
 800910a:	2221      	movs	r2, #33	; 0x21
 800910c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8009110:	f7fa fd66 	bl	8003be0 <HAL_GetTick>
 8009114:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8009116:	68fb      	ldr	r3, [r7, #12]
 8009118:	88fa      	ldrh	r2, [r7, #6]
 800911a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800911c:	68fb      	ldr	r3, [r7, #12]
 800911e:	88fa      	ldrh	r2, [r7, #6]
 8009120:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8009122:	68fb      	ldr	r3, [r7, #12]
 8009124:	2200      	movs	r2, #0
 8009126:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 800912a:	e042      	b.n	80091b2 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 800912c:	68fb      	ldr	r3, [r7, #12]
 800912e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009130:	b29b      	uxth	r3, r3
 8009132:	3b01      	subs	r3, #1
 8009134:	b29a      	uxth	r2, r3
 8009136:	68fb      	ldr	r3, [r7, #12]
 8009138:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800913a:	68fb      	ldr	r3, [r7, #12]
 800913c:	689b      	ldr	r3, [r3, #8]
 800913e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009142:	d122      	bne.n	800918a <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8009144:	683b      	ldr	r3, [r7, #0]
 8009146:	9300      	str	r3, [sp, #0]
 8009148:	697b      	ldr	r3, [r7, #20]
 800914a:	2200      	movs	r2, #0
 800914c:	2180      	movs	r1, #128	; 0x80
 800914e:	68f8      	ldr	r0, [r7, #12]
 8009150:	f000 f910 	bl	8009374 <UART_WaitOnFlagUntilTimeout>
 8009154:	4603      	mov	r3, r0
 8009156:	2b00      	cmp	r3, #0
 8009158:	d001      	beq.n	800915e <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 800915a:	2303      	movs	r3, #3
 800915c:	e042      	b.n	80091e4 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 800915e:	68bb      	ldr	r3, [r7, #8]
 8009160:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8009162:	693b      	ldr	r3, [r7, #16]
 8009164:	881b      	ldrh	r3, [r3, #0]
 8009166:	461a      	mov	r2, r3
 8009168:	68fb      	ldr	r3, [r7, #12]
 800916a:	681b      	ldr	r3, [r3, #0]
 800916c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009170:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8009172:	68fb      	ldr	r3, [r7, #12]
 8009174:	691b      	ldr	r3, [r3, #16]
 8009176:	2b00      	cmp	r3, #0
 8009178:	d103      	bne.n	8009182 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 800917a:	68bb      	ldr	r3, [r7, #8]
 800917c:	3302      	adds	r3, #2
 800917e:	60bb      	str	r3, [r7, #8]
 8009180:	e017      	b.n	80091b2 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8009182:	68bb      	ldr	r3, [r7, #8]
 8009184:	3301      	adds	r3, #1
 8009186:	60bb      	str	r3, [r7, #8]
 8009188:	e013      	b.n	80091b2 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800918a:	683b      	ldr	r3, [r7, #0]
 800918c:	9300      	str	r3, [sp, #0]
 800918e:	697b      	ldr	r3, [r7, #20]
 8009190:	2200      	movs	r2, #0
 8009192:	2180      	movs	r1, #128	; 0x80
 8009194:	68f8      	ldr	r0, [r7, #12]
 8009196:	f000 f8ed 	bl	8009374 <UART_WaitOnFlagUntilTimeout>
 800919a:	4603      	mov	r3, r0
 800919c:	2b00      	cmp	r3, #0
 800919e:	d001      	beq.n	80091a4 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 80091a0:	2303      	movs	r3, #3
 80091a2:	e01f      	b.n	80091e4 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 80091a4:	68bb      	ldr	r3, [r7, #8]
 80091a6:	1c5a      	adds	r2, r3, #1
 80091a8:	60ba      	str	r2, [r7, #8]
 80091aa:	781a      	ldrb	r2, [r3, #0]
 80091ac:	68fb      	ldr	r3, [r7, #12]
 80091ae:	681b      	ldr	r3, [r3, #0]
 80091b0:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 80091b2:	68fb      	ldr	r3, [r7, #12]
 80091b4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80091b6:	b29b      	uxth	r3, r3
 80091b8:	2b00      	cmp	r3, #0
 80091ba:	d1b7      	bne.n	800912c <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80091bc:	683b      	ldr	r3, [r7, #0]
 80091be:	9300      	str	r3, [sp, #0]
 80091c0:	697b      	ldr	r3, [r7, #20]
 80091c2:	2200      	movs	r2, #0
 80091c4:	2140      	movs	r1, #64	; 0x40
 80091c6:	68f8      	ldr	r0, [r7, #12]
 80091c8:	f000 f8d4 	bl	8009374 <UART_WaitOnFlagUntilTimeout>
 80091cc:	4603      	mov	r3, r0
 80091ce:	2b00      	cmp	r3, #0
 80091d0:	d001      	beq.n	80091d6 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 80091d2:	2303      	movs	r3, #3
 80091d4:	e006      	b.n	80091e4 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80091d6:	68fb      	ldr	r3, [r7, #12]
 80091d8:	2220      	movs	r2, #32
 80091da:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 80091de:	2300      	movs	r3, #0
 80091e0:	e000      	b.n	80091e4 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 80091e2:	2302      	movs	r3, #2
  }
}
 80091e4:	4618      	mov	r0, r3
 80091e6:	3718      	adds	r7, #24
 80091e8:	46bd      	mov	sp, r7
 80091ea:	bd80      	pop	{r7, pc}

080091ec <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80091ec:	b580      	push	{r7, lr}
 80091ee:	b088      	sub	sp, #32
 80091f0:	af02      	add	r7, sp, #8
 80091f2:	60f8      	str	r0, [r7, #12]
 80091f4:	60b9      	str	r1, [r7, #8]
 80091f6:	603b      	str	r3, [r7, #0]
 80091f8:	4613      	mov	r3, r2
 80091fa:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 80091fc:	2300      	movs	r3, #0
 80091fe:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8009200:	68fb      	ldr	r3, [r7, #12]
 8009202:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8009206:	b2db      	uxtb	r3, r3
 8009208:	2b20      	cmp	r3, #32
 800920a:	f040 8090 	bne.w	800932e <HAL_UART_Receive+0x142>
  {
    if ((pData == NULL) || (Size == 0U))
 800920e:	68bb      	ldr	r3, [r7, #8]
 8009210:	2b00      	cmp	r3, #0
 8009212:	d002      	beq.n	800921a <HAL_UART_Receive+0x2e>
 8009214:	88fb      	ldrh	r3, [r7, #6]
 8009216:	2b00      	cmp	r3, #0
 8009218:	d101      	bne.n	800921e <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 800921a:	2301      	movs	r3, #1
 800921c:	e088      	b.n	8009330 <HAL_UART_Receive+0x144>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800921e:	68fb      	ldr	r3, [r7, #12]
 8009220:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8009224:	2b01      	cmp	r3, #1
 8009226:	d101      	bne.n	800922c <HAL_UART_Receive+0x40>
 8009228:	2302      	movs	r3, #2
 800922a:	e081      	b.n	8009330 <HAL_UART_Receive+0x144>
 800922c:	68fb      	ldr	r3, [r7, #12]
 800922e:	2201      	movs	r2, #1
 8009230:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009234:	68fb      	ldr	r3, [r7, #12]
 8009236:	2200      	movs	r2, #0
 8009238:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800923a:	68fb      	ldr	r3, [r7, #12]
 800923c:	2222      	movs	r2, #34	; 0x22
 800923e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8009242:	f7fa fccd 	bl	8003be0 <HAL_GetTick>
 8009246:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8009248:	68fb      	ldr	r3, [r7, #12]
 800924a:	88fa      	ldrh	r2, [r7, #6]
 800924c:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 800924e:	68fb      	ldr	r3, [r7, #12]
 8009250:	88fa      	ldrh	r2, [r7, #6]
 8009252:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8009254:	68fb      	ldr	r3, [r7, #12]
 8009256:	2200      	movs	r2, #0
 8009258:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 800925c:	e05c      	b.n	8009318 <HAL_UART_Receive+0x12c>
    {
      huart->RxXferCount--;
 800925e:	68fb      	ldr	r3, [r7, #12]
 8009260:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009262:	b29b      	uxth	r3, r3
 8009264:	3b01      	subs	r3, #1
 8009266:	b29a      	uxth	r2, r3
 8009268:	68fb      	ldr	r3, [r7, #12]
 800926a:	85da      	strh	r2, [r3, #46]	; 0x2e
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800926c:	68fb      	ldr	r3, [r7, #12]
 800926e:	689b      	ldr	r3, [r3, #8]
 8009270:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009274:	d12b      	bne.n	80092ce <HAL_UART_Receive+0xe2>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8009276:	683b      	ldr	r3, [r7, #0]
 8009278:	9300      	str	r3, [sp, #0]
 800927a:	697b      	ldr	r3, [r7, #20]
 800927c:	2200      	movs	r2, #0
 800927e:	2120      	movs	r1, #32
 8009280:	68f8      	ldr	r0, [r7, #12]
 8009282:	f000 f877 	bl	8009374 <UART_WaitOnFlagUntilTimeout>
 8009286:	4603      	mov	r3, r0
 8009288:	2b00      	cmp	r3, #0
 800928a:	d001      	beq.n	8009290 <HAL_UART_Receive+0xa4>
        {
          return HAL_TIMEOUT;
 800928c:	2303      	movs	r3, #3
 800928e:	e04f      	b.n	8009330 <HAL_UART_Receive+0x144>
        }
        tmp = (uint16_t *) pData;
 8009290:	68bb      	ldr	r3, [r7, #8]
 8009292:	613b      	str	r3, [r7, #16]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8009294:	68fb      	ldr	r3, [r7, #12]
 8009296:	691b      	ldr	r3, [r3, #16]
 8009298:	2b00      	cmp	r3, #0
 800929a:	d10c      	bne.n	80092b6 <HAL_UART_Receive+0xca>
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800929c:	68fb      	ldr	r3, [r7, #12]
 800929e:	681b      	ldr	r3, [r3, #0]
 80092a0:	685b      	ldr	r3, [r3, #4]
 80092a2:	b29b      	uxth	r3, r3
 80092a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80092a8:	b29a      	uxth	r2, r3
 80092aa:	693b      	ldr	r3, [r7, #16]
 80092ac:	801a      	strh	r2, [r3, #0]
          pData += 2U;
 80092ae:	68bb      	ldr	r3, [r7, #8]
 80092b0:	3302      	adds	r3, #2
 80092b2:	60bb      	str	r3, [r7, #8]
 80092b4:	e030      	b.n	8009318 <HAL_UART_Receive+0x12c>
        }
        else
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 80092b6:	68fb      	ldr	r3, [r7, #12]
 80092b8:	681b      	ldr	r3, [r3, #0]
 80092ba:	685b      	ldr	r3, [r3, #4]
 80092bc:	b29b      	uxth	r3, r3
 80092be:	b2db      	uxtb	r3, r3
 80092c0:	b29a      	uxth	r2, r3
 80092c2:	693b      	ldr	r3, [r7, #16]
 80092c4:	801a      	strh	r2, [r3, #0]
          pData += 1U;
 80092c6:	68bb      	ldr	r3, [r7, #8]
 80092c8:	3301      	adds	r3, #1
 80092ca:	60bb      	str	r3, [r7, #8]
 80092cc:	e024      	b.n	8009318 <HAL_UART_Receive+0x12c>
        }

      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80092ce:	683b      	ldr	r3, [r7, #0]
 80092d0:	9300      	str	r3, [sp, #0]
 80092d2:	697b      	ldr	r3, [r7, #20]
 80092d4:	2200      	movs	r2, #0
 80092d6:	2120      	movs	r1, #32
 80092d8:	68f8      	ldr	r0, [r7, #12]
 80092da:	f000 f84b 	bl	8009374 <UART_WaitOnFlagUntilTimeout>
 80092de:	4603      	mov	r3, r0
 80092e0:	2b00      	cmp	r3, #0
 80092e2:	d001      	beq.n	80092e8 <HAL_UART_Receive+0xfc>
        {
          return HAL_TIMEOUT;
 80092e4:	2303      	movs	r3, #3
 80092e6:	e023      	b.n	8009330 <HAL_UART_Receive+0x144>
        }
        if (huart->Init.Parity == UART_PARITY_NONE)
 80092e8:	68fb      	ldr	r3, [r7, #12]
 80092ea:	691b      	ldr	r3, [r3, #16]
 80092ec:	2b00      	cmp	r3, #0
 80092ee:	d108      	bne.n	8009302 <HAL_UART_Receive+0x116>
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80092f0:	68fb      	ldr	r3, [r7, #12]
 80092f2:	681b      	ldr	r3, [r3, #0]
 80092f4:	6859      	ldr	r1, [r3, #4]
 80092f6:	68bb      	ldr	r3, [r7, #8]
 80092f8:	1c5a      	adds	r2, r3, #1
 80092fa:	60ba      	str	r2, [r7, #8]
 80092fc:	b2ca      	uxtb	r2, r1
 80092fe:	701a      	strb	r2, [r3, #0]
 8009300:	e00a      	b.n	8009318 <HAL_UART_Receive+0x12c>
        }
        else
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8009302:	68fb      	ldr	r3, [r7, #12]
 8009304:	681b      	ldr	r3, [r3, #0]
 8009306:	685b      	ldr	r3, [r3, #4]
 8009308:	b2da      	uxtb	r2, r3
 800930a:	68bb      	ldr	r3, [r7, #8]
 800930c:	1c59      	adds	r1, r3, #1
 800930e:	60b9      	str	r1, [r7, #8]
 8009310:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8009314:	b2d2      	uxtb	r2, r2
 8009316:	701a      	strb	r2, [r3, #0]
    while (huart->RxXferCount > 0U)
 8009318:	68fb      	ldr	r3, [r7, #12]
 800931a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800931c:	b29b      	uxth	r3, r3
 800931e:	2b00      	cmp	r3, #0
 8009320:	d19d      	bne.n	800925e <HAL_UART_Receive+0x72>

      }
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8009322:	68fb      	ldr	r3, [r7, #12]
 8009324:	2220      	movs	r2, #32
 8009326:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    return HAL_OK;
 800932a:	2300      	movs	r3, #0
 800932c:	e000      	b.n	8009330 <HAL_UART_Receive+0x144>
  }
  else
  {
    return HAL_BUSY;
 800932e:	2302      	movs	r3, #2
  }
}
 8009330:	4618      	mov	r0, r3
 8009332:	3718      	adds	r7, #24
 8009334:	46bd      	mov	sp, r7
 8009336:	bd80      	pop	{r7, pc}

08009338 <HAL_UART_GetState>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL state
  */
HAL_UART_StateTypeDef HAL_UART_GetState(UART_HandleTypeDef *huart)
{
 8009338:	b480      	push	{r7}
 800933a:	b085      	sub	sp, #20
 800933c:	af00      	add	r7, sp, #0
 800933e:	6078      	str	r0, [r7, #4]
  uint32_t temp1 = 0x00U, temp2 = 0x00U;
 8009340:	2300      	movs	r3, #0
 8009342:	60fb      	str	r3, [r7, #12]
 8009344:	2300      	movs	r3, #0
 8009346:	60bb      	str	r3, [r7, #8]
  temp1 = huart->gState;
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800934e:	b2db      	uxtb	r3, r3
 8009350:	60fb      	str	r3, [r7, #12]
  temp2 = huart->RxState;
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8009358:	b2db      	uxtb	r3, r3
 800935a:	60bb      	str	r3, [r7, #8]

  return (HAL_UART_StateTypeDef)(temp1 | temp2);
 800935c:	68fb      	ldr	r3, [r7, #12]
 800935e:	b2da      	uxtb	r2, r3
 8009360:	68bb      	ldr	r3, [r7, #8]
 8009362:	b2db      	uxtb	r3, r3
 8009364:	4313      	orrs	r3, r2
 8009366:	b2db      	uxtb	r3, r3
}
 8009368:	4618      	mov	r0, r3
 800936a:	3714      	adds	r7, #20
 800936c:	46bd      	mov	sp, r7
 800936e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009372:	4770      	bx	lr

08009374 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8009374:	b580      	push	{r7, lr}
 8009376:	b084      	sub	sp, #16
 8009378:	af00      	add	r7, sp, #0
 800937a:	60f8      	str	r0, [r7, #12]
 800937c:	60b9      	str	r1, [r7, #8]
 800937e:	603b      	str	r3, [r7, #0]
 8009380:	4613      	mov	r3, r2
 8009382:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009384:	e02c      	b.n	80093e0 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009386:	69bb      	ldr	r3, [r7, #24]
 8009388:	f1b3 3fff 	cmp.w	r3, #4294967295
 800938c:	d028      	beq.n	80093e0 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800938e:	69bb      	ldr	r3, [r7, #24]
 8009390:	2b00      	cmp	r3, #0
 8009392:	d007      	beq.n	80093a4 <UART_WaitOnFlagUntilTimeout+0x30>
 8009394:	f7fa fc24 	bl	8003be0 <HAL_GetTick>
 8009398:	4602      	mov	r2, r0
 800939a:	683b      	ldr	r3, [r7, #0]
 800939c:	1ad3      	subs	r3, r2, r3
 800939e:	69ba      	ldr	r2, [r7, #24]
 80093a0:	429a      	cmp	r2, r3
 80093a2:	d21d      	bcs.n	80093e0 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80093a4:	68fb      	ldr	r3, [r7, #12]
 80093a6:	681b      	ldr	r3, [r3, #0]
 80093a8:	68da      	ldr	r2, [r3, #12]
 80093aa:	68fb      	ldr	r3, [r7, #12]
 80093ac:	681b      	ldr	r3, [r3, #0]
 80093ae:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80093b2:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80093b4:	68fb      	ldr	r3, [r7, #12]
 80093b6:	681b      	ldr	r3, [r3, #0]
 80093b8:	695a      	ldr	r2, [r3, #20]
 80093ba:	68fb      	ldr	r3, [r7, #12]
 80093bc:	681b      	ldr	r3, [r3, #0]
 80093be:	f022 0201 	bic.w	r2, r2, #1
 80093c2:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80093c4:	68fb      	ldr	r3, [r7, #12]
 80093c6:	2220      	movs	r2, #32
 80093c8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80093cc:	68fb      	ldr	r3, [r7, #12]
 80093ce:	2220      	movs	r2, #32
 80093d0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80093d4:	68fb      	ldr	r3, [r7, #12]
 80093d6:	2200      	movs	r2, #0
 80093d8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 80093dc:	2303      	movs	r3, #3
 80093de:	e00f      	b.n	8009400 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80093e0:	68fb      	ldr	r3, [r7, #12]
 80093e2:	681b      	ldr	r3, [r3, #0]
 80093e4:	681a      	ldr	r2, [r3, #0]
 80093e6:	68bb      	ldr	r3, [r7, #8]
 80093e8:	4013      	ands	r3, r2
 80093ea:	68ba      	ldr	r2, [r7, #8]
 80093ec:	429a      	cmp	r2, r3
 80093ee:	bf0c      	ite	eq
 80093f0:	2301      	moveq	r3, #1
 80093f2:	2300      	movne	r3, #0
 80093f4:	b2db      	uxtb	r3, r3
 80093f6:	461a      	mov	r2, r3
 80093f8:	79fb      	ldrb	r3, [r7, #7]
 80093fa:	429a      	cmp	r2, r3
 80093fc:	d0c3      	beq.n	8009386 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80093fe:	2300      	movs	r3, #0
}
 8009400:	4618      	mov	r0, r3
 8009402:	3710      	adds	r7, #16
 8009404:	46bd      	mov	sp, r7
 8009406:	bd80      	pop	{r7, pc}

08009408 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009408:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800940c:	b085      	sub	sp, #20
 800940e:	af00      	add	r7, sp, #0
 8009410:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	681b      	ldr	r3, [r3, #0]
 8009416:	691b      	ldr	r3, [r3, #16]
 8009418:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	68da      	ldr	r2, [r3, #12]
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	681b      	ldr	r3, [r3, #0]
 8009424:	430a      	orrs	r2, r1
 8009426:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	689a      	ldr	r2, [r3, #8]
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	691b      	ldr	r3, [r3, #16]
 8009430:	431a      	orrs	r2, r3
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	695b      	ldr	r3, [r3, #20]
 8009436:	431a      	orrs	r2, r3
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	69db      	ldr	r3, [r3, #28]
 800943c:	4313      	orrs	r3, r2
 800943e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	681b      	ldr	r3, [r3, #0]
 8009444:	68db      	ldr	r3, [r3, #12]
 8009446:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800944a:	f023 030c 	bic.w	r3, r3, #12
 800944e:	687a      	ldr	r2, [r7, #4]
 8009450:	6812      	ldr	r2, [r2, #0]
 8009452:	68f9      	ldr	r1, [r7, #12]
 8009454:	430b      	orrs	r3, r1
 8009456:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	681b      	ldr	r3, [r3, #0]
 800945c:	695b      	ldr	r3, [r3, #20]
 800945e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	699a      	ldr	r2, [r3, #24]
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	681b      	ldr	r3, [r3, #0]
 800946a:	430a      	orrs	r2, r1
 800946c:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	69db      	ldr	r3, [r3, #28]
 8009472:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009476:	f040 818b 	bne.w	8009790 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	681b      	ldr	r3, [r3, #0]
 800947e:	4ac1      	ldr	r2, [pc, #772]	; (8009784 <UART_SetConfig+0x37c>)
 8009480:	4293      	cmp	r3, r2
 8009482:	d005      	beq.n	8009490 <UART_SetConfig+0x88>
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	681b      	ldr	r3, [r3, #0]
 8009488:	4abf      	ldr	r2, [pc, #764]	; (8009788 <UART_SetConfig+0x380>)
 800948a:	4293      	cmp	r3, r2
 800948c:	f040 80bd 	bne.w	800960a <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8009490:	f7fd f95c 	bl	800674c <HAL_RCC_GetPCLK2Freq>
 8009494:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8009496:	68bb      	ldr	r3, [r7, #8]
 8009498:	461d      	mov	r5, r3
 800949a:	f04f 0600 	mov.w	r6, #0
 800949e:	46a8      	mov	r8, r5
 80094a0:	46b1      	mov	r9, r6
 80094a2:	eb18 0308 	adds.w	r3, r8, r8
 80094a6:	eb49 0409 	adc.w	r4, r9, r9
 80094aa:	4698      	mov	r8, r3
 80094ac:	46a1      	mov	r9, r4
 80094ae:	eb18 0805 	adds.w	r8, r8, r5
 80094b2:	eb49 0906 	adc.w	r9, r9, r6
 80094b6:	f04f 0100 	mov.w	r1, #0
 80094ba:	f04f 0200 	mov.w	r2, #0
 80094be:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80094c2:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80094c6:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80094ca:	4688      	mov	r8, r1
 80094cc:	4691      	mov	r9, r2
 80094ce:	eb18 0005 	adds.w	r0, r8, r5
 80094d2:	eb49 0106 	adc.w	r1, r9, r6
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	685b      	ldr	r3, [r3, #4]
 80094da:	461d      	mov	r5, r3
 80094dc:	f04f 0600 	mov.w	r6, #0
 80094e0:	196b      	adds	r3, r5, r5
 80094e2:	eb46 0406 	adc.w	r4, r6, r6
 80094e6:	461a      	mov	r2, r3
 80094e8:	4623      	mov	r3, r4
 80094ea:	f7f7 fbdd 	bl	8000ca8 <__aeabi_uldivmod>
 80094ee:	4603      	mov	r3, r0
 80094f0:	460c      	mov	r4, r1
 80094f2:	461a      	mov	r2, r3
 80094f4:	4ba5      	ldr	r3, [pc, #660]	; (800978c <UART_SetConfig+0x384>)
 80094f6:	fba3 2302 	umull	r2, r3, r3, r2
 80094fa:	095b      	lsrs	r3, r3, #5
 80094fc:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8009500:	68bb      	ldr	r3, [r7, #8]
 8009502:	461d      	mov	r5, r3
 8009504:	f04f 0600 	mov.w	r6, #0
 8009508:	46a9      	mov	r9, r5
 800950a:	46b2      	mov	sl, r6
 800950c:	eb19 0309 	adds.w	r3, r9, r9
 8009510:	eb4a 040a 	adc.w	r4, sl, sl
 8009514:	4699      	mov	r9, r3
 8009516:	46a2      	mov	sl, r4
 8009518:	eb19 0905 	adds.w	r9, r9, r5
 800951c:	eb4a 0a06 	adc.w	sl, sl, r6
 8009520:	f04f 0100 	mov.w	r1, #0
 8009524:	f04f 0200 	mov.w	r2, #0
 8009528:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800952c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8009530:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8009534:	4689      	mov	r9, r1
 8009536:	4692      	mov	sl, r2
 8009538:	eb19 0005 	adds.w	r0, r9, r5
 800953c:	eb4a 0106 	adc.w	r1, sl, r6
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	685b      	ldr	r3, [r3, #4]
 8009544:	461d      	mov	r5, r3
 8009546:	f04f 0600 	mov.w	r6, #0
 800954a:	196b      	adds	r3, r5, r5
 800954c:	eb46 0406 	adc.w	r4, r6, r6
 8009550:	461a      	mov	r2, r3
 8009552:	4623      	mov	r3, r4
 8009554:	f7f7 fba8 	bl	8000ca8 <__aeabi_uldivmod>
 8009558:	4603      	mov	r3, r0
 800955a:	460c      	mov	r4, r1
 800955c:	461a      	mov	r2, r3
 800955e:	4b8b      	ldr	r3, [pc, #556]	; (800978c <UART_SetConfig+0x384>)
 8009560:	fba3 1302 	umull	r1, r3, r3, r2
 8009564:	095b      	lsrs	r3, r3, #5
 8009566:	2164      	movs	r1, #100	; 0x64
 8009568:	fb01 f303 	mul.w	r3, r1, r3
 800956c:	1ad3      	subs	r3, r2, r3
 800956e:	00db      	lsls	r3, r3, #3
 8009570:	3332      	adds	r3, #50	; 0x32
 8009572:	4a86      	ldr	r2, [pc, #536]	; (800978c <UART_SetConfig+0x384>)
 8009574:	fba2 2303 	umull	r2, r3, r2, r3
 8009578:	095b      	lsrs	r3, r3, #5
 800957a:	005b      	lsls	r3, r3, #1
 800957c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8009580:	4498      	add	r8, r3
 8009582:	68bb      	ldr	r3, [r7, #8]
 8009584:	461d      	mov	r5, r3
 8009586:	f04f 0600 	mov.w	r6, #0
 800958a:	46a9      	mov	r9, r5
 800958c:	46b2      	mov	sl, r6
 800958e:	eb19 0309 	adds.w	r3, r9, r9
 8009592:	eb4a 040a 	adc.w	r4, sl, sl
 8009596:	4699      	mov	r9, r3
 8009598:	46a2      	mov	sl, r4
 800959a:	eb19 0905 	adds.w	r9, r9, r5
 800959e:	eb4a 0a06 	adc.w	sl, sl, r6
 80095a2:	f04f 0100 	mov.w	r1, #0
 80095a6:	f04f 0200 	mov.w	r2, #0
 80095aa:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80095ae:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80095b2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80095b6:	4689      	mov	r9, r1
 80095b8:	4692      	mov	sl, r2
 80095ba:	eb19 0005 	adds.w	r0, r9, r5
 80095be:	eb4a 0106 	adc.w	r1, sl, r6
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	685b      	ldr	r3, [r3, #4]
 80095c6:	461d      	mov	r5, r3
 80095c8:	f04f 0600 	mov.w	r6, #0
 80095cc:	196b      	adds	r3, r5, r5
 80095ce:	eb46 0406 	adc.w	r4, r6, r6
 80095d2:	461a      	mov	r2, r3
 80095d4:	4623      	mov	r3, r4
 80095d6:	f7f7 fb67 	bl	8000ca8 <__aeabi_uldivmod>
 80095da:	4603      	mov	r3, r0
 80095dc:	460c      	mov	r4, r1
 80095de:	461a      	mov	r2, r3
 80095e0:	4b6a      	ldr	r3, [pc, #424]	; (800978c <UART_SetConfig+0x384>)
 80095e2:	fba3 1302 	umull	r1, r3, r3, r2
 80095e6:	095b      	lsrs	r3, r3, #5
 80095e8:	2164      	movs	r1, #100	; 0x64
 80095ea:	fb01 f303 	mul.w	r3, r1, r3
 80095ee:	1ad3      	subs	r3, r2, r3
 80095f0:	00db      	lsls	r3, r3, #3
 80095f2:	3332      	adds	r3, #50	; 0x32
 80095f4:	4a65      	ldr	r2, [pc, #404]	; (800978c <UART_SetConfig+0x384>)
 80095f6:	fba2 2303 	umull	r2, r3, r2, r3
 80095fa:	095b      	lsrs	r3, r3, #5
 80095fc:	f003 0207 	and.w	r2, r3, #7
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	681b      	ldr	r3, [r3, #0]
 8009604:	4442      	add	r2, r8
 8009606:	609a      	str	r2, [r3, #8]
 8009608:	e26f      	b.n	8009aea <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800960a:	f7fd f88b 	bl	8006724 <HAL_RCC_GetPCLK1Freq>
 800960e:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8009610:	68bb      	ldr	r3, [r7, #8]
 8009612:	461d      	mov	r5, r3
 8009614:	f04f 0600 	mov.w	r6, #0
 8009618:	46a8      	mov	r8, r5
 800961a:	46b1      	mov	r9, r6
 800961c:	eb18 0308 	adds.w	r3, r8, r8
 8009620:	eb49 0409 	adc.w	r4, r9, r9
 8009624:	4698      	mov	r8, r3
 8009626:	46a1      	mov	r9, r4
 8009628:	eb18 0805 	adds.w	r8, r8, r5
 800962c:	eb49 0906 	adc.w	r9, r9, r6
 8009630:	f04f 0100 	mov.w	r1, #0
 8009634:	f04f 0200 	mov.w	r2, #0
 8009638:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800963c:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8009640:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8009644:	4688      	mov	r8, r1
 8009646:	4691      	mov	r9, r2
 8009648:	eb18 0005 	adds.w	r0, r8, r5
 800964c:	eb49 0106 	adc.w	r1, r9, r6
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	685b      	ldr	r3, [r3, #4]
 8009654:	461d      	mov	r5, r3
 8009656:	f04f 0600 	mov.w	r6, #0
 800965a:	196b      	adds	r3, r5, r5
 800965c:	eb46 0406 	adc.w	r4, r6, r6
 8009660:	461a      	mov	r2, r3
 8009662:	4623      	mov	r3, r4
 8009664:	f7f7 fb20 	bl	8000ca8 <__aeabi_uldivmod>
 8009668:	4603      	mov	r3, r0
 800966a:	460c      	mov	r4, r1
 800966c:	461a      	mov	r2, r3
 800966e:	4b47      	ldr	r3, [pc, #284]	; (800978c <UART_SetConfig+0x384>)
 8009670:	fba3 2302 	umull	r2, r3, r3, r2
 8009674:	095b      	lsrs	r3, r3, #5
 8009676:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800967a:	68bb      	ldr	r3, [r7, #8]
 800967c:	461d      	mov	r5, r3
 800967e:	f04f 0600 	mov.w	r6, #0
 8009682:	46a9      	mov	r9, r5
 8009684:	46b2      	mov	sl, r6
 8009686:	eb19 0309 	adds.w	r3, r9, r9
 800968a:	eb4a 040a 	adc.w	r4, sl, sl
 800968e:	4699      	mov	r9, r3
 8009690:	46a2      	mov	sl, r4
 8009692:	eb19 0905 	adds.w	r9, r9, r5
 8009696:	eb4a 0a06 	adc.w	sl, sl, r6
 800969a:	f04f 0100 	mov.w	r1, #0
 800969e:	f04f 0200 	mov.w	r2, #0
 80096a2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80096a6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80096aa:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80096ae:	4689      	mov	r9, r1
 80096b0:	4692      	mov	sl, r2
 80096b2:	eb19 0005 	adds.w	r0, r9, r5
 80096b6:	eb4a 0106 	adc.w	r1, sl, r6
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	685b      	ldr	r3, [r3, #4]
 80096be:	461d      	mov	r5, r3
 80096c0:	f04f 0600 	mov.w	r6, #0
 80096c4:	196b      	adds	r3, r5, r5
 80096c6:	eb46 0406 	adc.w	r4, r6, r6
 80096ca:	461a      	mov	r2, r3
 80096cc:	4623      	mov	r3, r4
 80096ce:	f7f7 faeb 	bl	8000ca8 <__aeabi_uldivmod>
 80096d2:	4603      	mov	r3, r0
 80096d4:	460c      	mov	r4, r1
 80096d6:	461a      	mov	r2, r3
 80096d8:	4b2c      	ldr	r3, [pc, #176]	; (800978c <UART_SetConfig+0x384>)
 80096da:	fba3 1302 	umull	r1, r3, r3, r2
 80096de:	095b      	lsrs	r3, r3, #5
 80096e0:	2164      	movs	r1, #100	; 0x64
 80096e2:	fb01 f303 	mul.w	r3, r1, r3
 80096e6:	1ad3      	subs	r3, r2, r3
 80096e8:	00db      	lsls	r3, r3, #3
 80096ea:	3332      	adds	r3, #50	; 0x32
 80096ec:	4a27      	ldr	r2, [pc, #156]	; (800978c <UART_SetConfig+0x384>)
 80096ee:	fba2 2303 	umull	r2, r3, r2, r3
 80096f2:	095b      	lsrs	r3, r3, #5
 80096f4:	005b      	lsls	r3, r3, #1
 80096f6:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80096fa:	4498      	add	r8, r3
 80096fc:	68bb      	ldr	r3, [r7, #8]
 80096fe:	461d      	mov	r5, r3
 8009700:	f04f 0600 	mov.w	r6, #0
 8009704:	46a9      	mov	r9, r5
 8009706:	46b2      	mov	sl, r6
 8009708:	eb19 0309 	adds.w	r3, r9, r9
 800970c:	eb4a 040a 	adc.w	r4, sl, sl
 8009710:	4699      	mov	r9, r3
 8009712:	46a2      	mov	sl, r4
 8009714:	eb19 0905 	adds.w	r9, r9, r5
 8009718:	eb4a 0a06 	adc.w	sl, sl, r6
 800971c:	f04f 0100 	mov.w	r1, #0
 8009720:	f04f 0200 	mov.w	r2, #0
 8009724:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009728:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800972c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8009730:	4689      	mov	r9, r1
 8009732:	4692      	mov	sl, r2
 8009734:	eb19 0005 	adds.w	r0, r9, r5
 8009738:	eb4a 0106 	adc.w	r1, sl, r6
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	685b      	ldr	r3, [r3, #4]
 8009740:	461d      	mov	r5, r3
 8009742:	f04f 0600 	mov.w	r6, #0
 8009746:	196b      	adds	r3, r5, r5
 8009748:	eb46 0406 	adc.w	r4, r6, r6
 800974c:	461a      	mov	r2, r3
 800974e:	4623      	mov	r3, r4
 8009750:	f7f7 faaa 	bl	8000ca8 <__aeabi_uldivmod>
 8009754:	4603      	mov	r3, r0
 8009756:	460c      	mov	r4, r1
 8009758:	461a      	mov	r2, r3
 800975a:	4b0c      	ldr	r3, [pc, #48]	; (800978c <UART_SetConfig+0x384>)
 800975c:	fba3 1302 	umull	r1, r3, r3, r2
 8009760:	095b      	lsrs	r3, r3, #5
 8009762:	2164      	movs	r1, #100	; 0x64
 8009764:	fb01 f303 	mul.w	r3, r1, r3
 8009768:	1ad3      	subs	r3, r2, r3
 800976a:	00db      	lsls	r3, r3, #3
 800976c:	3332      	adds	r3, #50	; 0x32
 800976e:	4a07      	ldr	r2, [pc, #28]	; (800978c <UART_SetConfig+0x384>)
 8009770:	fba2 2303 	umull	r2, r3, r2, r3
 8009774:	095b      	lsrs	r3, r3, #5
 8009776:	f003 0207 	and.w	r2, r3, #7
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	681b      	ldr	r3, [r3, #0]
 800977e:	4442      	add	r2, r8
 8009780:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8009782:	e1b2      	b.n	8009aea <UART_SetConfig+0x6e2>
 8009784:	40011000 	.word	0x40011000
 8009788:	40011400 	.word	0x40011400
 800978c:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	681b      	ldr	r3, [r3, #0]
 8009794:	4ad7      	ldr	r2, [pc, #860]	; (8009af4 <UART_SetConfig+0x6ec>)
 8009796:	4293      	cmp	r3, r2
 8009798:	d005      	beq.n	80097a6 <UART_SetConfig+0x39e>
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	681b      	ldr	r3, [r3, #0]
 800979e:	4ad6      	ldr	r2, [pc, #856]	; (8009af8 <UART_SetConfig+0x6f0>)
 80097a0:	4293      	cmp	r3, r2
 80097a2:	f040 80d1 	bne.w	8009948 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 80097a6:	f7fc ffd1 	bl	800674c <HAL_RCC_GetPCLK2Freq>
 80097aa:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80097ac:	68bb      	ldr	r3, [r7, #8]
 80097ae:	469a      	mov	sl, r3
 80097b0:	f04f 0b00 	mov.w	fp, #0
 80097b4:	46d0      	mov	r8, sl
 80097b6:	46d9      	mov	r9, fp
 80097b8:	eb18 0308 	adds.w	r3, r8, r8
 80097bc:	eb49 0409 	adc.w	r4, r9, r9
 80097c0:	4698      	mov	r8, r3
 80097c2:	46a1      	mov	r9, r4
 80097c4:	eb18 080a 	adds.w	r8, r8, sl
 80097c8:	eb49 090b 	adc.w	r9, r9, fp
 80097cc:	f04f 0100 	mov.w	r1, #0
 80097d0:	f04f 0200 	mov.w	r2, #0
 80097d4:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80097d8:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80097dc:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80097e0:	4688      	mov	r8, r1
 80097e2:	4691      	mov	r9, r2
 80097e4:	eb1a 0508 	adds.w	r5, sl, r8
 80097e8:	eb4b 0609 	adc.w	r6, fp, r9
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	685b      	ldr	r3, [r3, #4]
 80097f0:	4619      	mov	r1, r3
 80097f2:	f04f 0200 	mov.w	r2, #0
 80097f6:	f04f 0300 	mov.w	r3, #0
 80097fa:	f04f 0400 	mov.w	r4, #0
 80097fe:	0094      	lsls	r4, r2, #2
 8009800:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8009804:	008b      	lsls	r3, r1, #2
 8009806:	461a      	mov	r2, r3
 8009808:	4623      	mov	r3, r4
 800980a:	4628      	mov	r0, r5
 800980c:	4631      	mov	r1, r6
 800980e:	f7f7 fa4b 	bl	8000ca8 <__aeabi_uldivmod>
 8009812:	4603      	mov	r3, r0
 8009814:	460c      	mov	r4, r1
 8009816:	461a      	mov	r2, r3
 8009818:	4bb8      	ldr	r3, [pc, #736]	; (8009afc <UART_SetConfig+0x6f4>)
 800981a:	fba3 2302 	umull	r2, r3, r3, r2
 800981e:	095b      	lsrs	r3, r3, #5
 8009820:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8009824:	68bb      	ldr	r3, [r7, #8]
 8009826:	469b      	mov	fp, r3
 8009828:	f04f 0c00 	mov.w	ip, #0
 800982c:	46d9      	mov	r9, fp
 800982e:	46e2      	mov	sl, ip
 8009830:	eb19 0309 	adds.w	r3, r9, r9
 8009834:	eb4a 040a 	adc.w	r4, sl, sl
 8009838:	4699      	mov	r9, r3
 800983a:	46a2      	mov	sl, r4
 800983c:	eb19 090b 	adds.w	r9, r9, fp
 8009840:	eb4a 0a0c 	adc.w	sl, sl, ip
 8009844:	f04f 0100 	mov.w	r1, #0
 8009848:	f04f 0200 	mov.w	r2, #0
 800984c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009850:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8009854:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8009858:	4689      	mov	r9, r1
 800985a:	4692      	mov	sl, r2
 800985c:	eb1b 0509 	adds.w	r5, fp, r9
 8009860:	eb4c 060a 	adc.w	r6, ip, sl
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	685b      	ldr	r3, [r3, #4]
 8009868:	4619      	mov	r1, r3
 800986a:	f04f 0200 	mov.w	r2, #0
 800986e:	f04f 0300 	mov.w	r3, #0
 8009872:	f04f 0400 	mov.w	r4, #0
 8009876:	0094      	lsls	r4, r2, #2
 8009878:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800987c:	008b      	lsls	r3, r1, #2
 800987e:	461a      	mov	r2, r3
 8009880:	4623      	mov	r3, r4
 8009882:	4628      	mov	r0, r5
 8009884:	4631      	mov	r1, r6
 8009886:	f7f7 fa0f 	bl	8000ca8 <__aeabi_uldivmod>
 800988a:	4603      	mov	r3, r0
 800988c:	460c      	mov	r4, r1
 800988e:	461a      	mov	r2, r3
 8009890:	4b9a      	ldr	r3, [pc, #616]	; (8009afc <UART_SetConfig+0x6f4>)
 8009892:	fba3 1302 	umull	r1, r3, r3, r2
 8009896:	095b      	lsrs	r3, r3, #5
 8009898:	2164      	movs	r1, #100	; 0x64
 800989a:	fb01 f303 	mul.w	r3, r1, r3
 800989e:	1ad3      	subs	r3, r2, r3
 80098a0:	011b      	lsls	r3, r3, #4
 80098a2:	3332      	adds	r3, #50	; 0x32
 80098a4:	4a95      	ldr	r2, [pc, #596]	; (8009afc <UART_SetConfig+0x6f4>)
 80098a6:	fba2 2303 	umull	r2, r3, r2, r3
 80098aa:	095b      	lsrs	r3, r3, #5
 80098ac:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80098b0:	4498      	add	r8, r3
 80098b2:	68bb      	ldr	r3, [r7, #8]
 80098b4:	469b      	mov	fp, r3
 80098b6:	f04f 0c00 	mov.w	ip, #0
 80098ba:	46d9      	mov	r9, fp
 80098bc:	46e2      	mov	sl, ip
 80098be:	eb19 0309 	adds.w	r3, r9, r9
 80098c2:	eb4a 040a 	adc.w	r4, sl, sl
 80098c6:	4699      	mov	r9, r3
 80098c8:	46a2      	mov	sl, r4
 80098ca:	eb19 090b 	adds.w	r9, r9, fp
 80098ce:	eb4a 0a0c 	adc.w	sl, sl, ip
 80098d2:	f04f 0100 	mov.w	r1, #0
 80098d6:	f04f 0200 	mov.w	r2, #0
 80098da:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80098de:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80098e2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80098e6:	4689      	mov	r9, r1
 80098e8:	4692      	mov	sl, r2
 80098ea:	eb1b 0509 	adds.w	r5, fp, r9
 80098ee:	eb4c 060a 	adc.w	r6, ip, sl
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	685b      	ldr	r3, [r3, #4]
 80098f6:	4619      	mov	r1, r3
 80098f8:	f04f 0200 	mov.w	r2, #0
 80098fc:	f04f 0300 	mov.w	r3, #0
 8009900:	f04f 0400 	mov.w	r4, #0
 8009904:	0094      	lsls	r4, r2, #2
 8009906:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800990a:	008b      	lsls	r3, r1, #2
 800990c:	461a      	mov	r2, r3
 800990e:	4623      	mov	r3, r4
 8009910:	4628      	mov	r0, r5
 8009912:	4631      	mov	r1, r6
 8009914:	f7f7 f9c8 	bl	8000ca8 <__aeabi_uldivmod>
 8009918:	4603      	mov	r3, r0
 800991a:	460c      	mov	r4, r1
 800991c:	461a      	mov	r2, r3
 800991e:	4b77      	ldr	r3, [pc, #476]	; (8009afc <UART_SetConfig+0x6f4>)
 8009920:	fba3 1302 	umull	r1, r3, r3, r2
 8009924:	095b      	lsrs	r3, r3, #5
 8009926:	2164      	movs	r1, #100	; 0x64
 8009928:	fb01 f303 	mul.w	r3, r1, r3
 800992c:	1ad3      	subs	r3, r2, r3
 800992e:	011b      	lsls	r3, r3, #4
 8009930:	3332      	adds	r3, #50	; 0x32
 8009932:	4a72      	ldr	r2, [pc, #456]	; (8009afc <UART_SetConfig+0x6f4>)
 8009934:	fba2 2303 	umull	r2, r3, r2, r3
 8009938:	095b      	lsrs	r3, r3, #5
 800993a:	f003 020f 	and.w	r2, r3, #15
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	681b      	ldr	r3, [r3, #0]
 8009942:	4442      	add	r2, r8
 8009944:	609a      	str	r2, [r3, #8]
 8009946:	e0d0      	b.n	8009aea <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8009948:	f7fc feec 	bl	8006724 <HAL_RCC_GetPCLK1Freq>
 800994c:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800994e:	68bb      	ldr	r3, [r7, #8]
 8009950:	469a      	mov	sl, r3
 8009952:	f04f 0b00 	mov.w	fp, #0
 8009956:	46d0      	mov	r8, sl
 8009958:	46d9      	mov	r9, fp
 800995a:	eb18 0308 	adds.w	r3, r8, r8
 800995e:	eb49 0409 	adc.w	r4, r9, r9
 8009962:	4698      	mov	r8, r3
 8009964:	46a1      	mov	r9, r4
 8009966:	eb18 080a 	adds.w	r8, r8, sl
 800996a:	eb49 090b 	adc.w	r9, r9, fp
 800996e:	f04f 0100 	mov.w	r1, #0
 8009972:	f04f 0200 	mov.w	r2, #0
 8009976:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800997a:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800997e:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8009982:	4688      	mov	r8, r1
 8009984:	4691      	mov	r9, r2
 8009986:	eb1a 0508 	adds.w	r5, sl, r8
 800998a:	eb4b 0609 	adc.w	r6, fp, r9
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	685b      	ldr	r3, [r3, #4]
 8009992:	4619      	mov	r1, r3
 8009994:	f04f 0200 	mov.w	r2, #0
 8009998:	f04f 0300 	mov.w	r3, #0
 800999c:	f04f 0400 	mov.w	r4, #0
 80099a0:	0094      	lsls	r4, r2, #2
 80099a2:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80099a6:	008b      	lsls	r3, r1, #2
 80099a8:	461a      	mov	r2, r3
 80099aa:	4623      	mov	r3, r4
 80099ac:	4628      	mov	r0, r5
 80099ae:	4631      	mov	r1, r6
 80099b0:	f7f7 f97a 	bl	8000ca8 <__aeabi_uldivmod>
 80099b4:	4603      	mov	r3, r0
 80099b6:	460c      	mov	r4, r1
 80099b8:	461a      	mov	r2, r3
 80099ba:	4b50      	ldr	r3, [pc, #320]	; (8009afc <UART_SetConfig+0x6f4>)
 80099bc:	fba3 2302 	umull	r2, r3, r3, r2
 80099c0:	095b      	lsrs	r3, r3, #5
 80099c2:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80099c6:	68bb      	ldr	r3, [r7, #8]
 80099c8:	469b      	mov	fp, r3
 80099ca:	f04f 0c00 	mov.w	ip, #0
 80099ce:	46d9      	mov	r9, fp
 80099d0:	46e2      	mov	sl, ip
 80099d2:	eb19 0309 	adds.w	r3, r9, r9
 80099d6:	eb4a 040a 	adc.w	r4, sl, sl
 80099da:	4699      	mov	r9, r3
 80099dc:	46a2      	mov	sl, r4
 80099de:	eb19 090b 	adds.w	r9, r9, fp
 80099e2:	eb4a 0a0c 	adc.w	sl, sl, ip
 80099e6:	f04f 0100 	mov.w	r1, #0
 80099ea:	f04f 0200 	mov.w	r2, #0
 80099ee:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80099f2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80099f6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80099fa:	4689      	mov	r9, r1
 80099fc:	4692      	mov	sl, r2
 80099fe:	eb1b 0509 	adds.w	r5, fp, r9
 8009a02:	eb4c 060a 	adc.w	r6, ip, sl
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	685b      	ldr	r3, [r3, #4]
 8009a0a:	4619      	mov	r1, r3
 8009a0c:	f04f 0200 	mov.w	r2, #0
 8009a10:	f04f 0300 	mov.w	r3, #0
 8009a14:	f04f 0400 	mov.w	r4, #0
 8009a18:	0094      	lsls	r4, r2, #2
 8009a1a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8009a1e:	008b      	lsls	r3, r1, #2
 8009a20:	461a      	mov	r2, r3
 8009a22:	4623      	mov	r3, r4
 8009a24:	4628      	mov	r0, r5
 8009a26:	4631      	mov	r1, r6
 8009a28:	f7f7 f93e 	bl	8000ca8 <__aeabi_uldivmod>
 8009a2c:	4603      	mov	r3, r0
 8009a2e:	460c      	mov	r4, r1
 8009a30:	461a      	mov	r2, r3
 8009a32:	4b32      	ldr	r3, [pc, #200]	; (8009afc <UART_SetConfig+0x6f4>)
 8009a34:	fba3 1302 	umull	r1, r3, r3, r2
 8009a38:	095b      	lsrs	r3, r3, #5
 8009a3a:	2164      	movs	r1, #100	; 0x64
 8009a3c:	fb01 f303 	mul.w	r3, r1, r3
 8009a40:	1ad3      	subs	r3, r2, r3
 8009a42:	011b      	lsls	r3, r3, #4
 8009a44:	3332      	adds	r3, #50	; 0x32
 8009a46:	4a2d      	ldr	r2, [pc, #180]	; (8009afc <UART_SetConfig+0x6f4>)
 8009a48:	fba2 2303 	umull	r2, r3, r2, r3
 8009a4c:	095b      	lsrs	r3, r3, #5
 8009a4e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009a52:	4498      	add	r8, r3
 8009a54:	68bb      	ldr	r3, [r7, #8]
 8009a56:	469b      	mov	fp, r3
 8009a58:	f04f 0c00 	mov.w	ip, #0
 8009a5c:	46d9      	mov	r9, fp
 8009a5e:	46e2      	mov	sl, ip
 8009a60:	eb19 0309 	adds.w	r3, r9, r9
 8009a64:	eb4a 040a 	adc.w	r4, sl, sl
 8009a68:	4699      	mov	r9, r3
 8009a6a:	46a2      	mov	sl, r4
 8009a6c:	eb19 090b 	adds.w	r9, r9, fp
 8009a70:	eb4a 0a0c 	adc.w	sl, sl, ip
 8009a74:	f04f 0100 	mov.w	r1, #0
 8009a78:	f04f 0200 	mov.w	r2, #0
 8009a7c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009a80:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8009a84:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8009a88:	4689      	mov	r9, r1
 8009a8a:	4692      	mov	sl, r2
 8009a8c:	eb1b 0509 	adds.w	r5, fp, r9
 8009a90:	eb4c 060a 	adc.w	r6, ip, sl
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	685b      	ldr	r3, [r3, #4]
 8009a98:	4619      	mov	r1, r3
 8009a9a:	f04f 0200 	mov.w	r2, #0
 8009a9e:	f04f 0300 	mov.w	r3, #0
 8009aa2:	f04f 0400 	mov.w	r4, #0
 8009aa6:	0094      	lsls	r4, r2, #2
 8009aa8:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8009aac:	008b      	lsls	r3, r1, #2
 8009aae:	461a      	mov	r2, r3
 8009ab0:	4623      	mov	r3, r4
 8009ab2:	4628      	mov	r0, r5
 8009ab4:	4631      	mov	r1, r6
 8009ab6:	f7f7 f8f7 	bl	8000ca8 <__aeabi_uldivmod>
 8009aba:	4603      	mov	r3, r0
 8009abc:	460c      	mov	r4, r1
 8009abe:	461a      	mov	r2, r3
 8009ac0:	4b0e      	ldr	r3, [pc, #56]	; (8009afc <UART_SetConfig+0x6f4>)
 8009ac2:	fba3 1302 	umull	r1, r3, r3, r2
 8009ac6:	095b      	lsrs	r3, r3, #5
 8009ac8:	2164      	movs	r1, #100	; 0x64
 8009aca:	fb01 f303 	mul.w	r3, r1, r3
 8009ace:	1ad3      	subs	r3, r2, r3
 8009ad0:	011b      	lsls	r3, r3, #4
 8009ad2:	3332      	adds	r3, #50	; 0x32
 8009ad4:	4a09      	ldr	r2, [pc, #36]	; (8009afc <UART_SetConfig+0x6f4>)
 8009ad6:	fba2 2303 	umull	r2, r3, r2, r3
 8009ada:	095b      	lsrs	r3, r3, #5
 8009adc:	f003 020f 	and.w	r2, r3, #15
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	681b      	ldr	r3, [r3, #0]
 8009ae4:	4442      	add	r2, r8
 8009ae6:	609a      	str	r2, [r3, #8]
}
 8009ae8:	e7ff      	b.n	8009aea <UART_SetConfig+0x6e2>
 8009aea:	bf00      	nop
 8009aec:	3714      	adds	r7, #20
 8009aee:	46bd      	mov	sp, r7
 8009af0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009af4:	40011000 	.word	0x40011000
 8009af8:	40011400 	.word	0x40011400
 8009afc:	51eb851f 	.word	0x51eb851f

08009b00 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 8009b00:	b084      	sub	sp, #16
 8009b02:	b480      	push	{r7}
 8009b04:	b085      	sub	sp, #20
 8009b06:	af00      	add	r7, sp, #0
 8009b08:	6078      	str	r0, [r7, #4]
 8009b0a:	f107 001c 	add.w	r0, r7, #28
 8009b0e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8009b12:	2300      	movs	r3, #0
 8009b14:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 8009b16:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8009b18:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 8009b1a:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8009b1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 8009b1e:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8009b20:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 8009b22:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8009b24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 8009b26:	431a      	orrs	r2, r3
             Init.ClockDiv
 8009b28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 8009b2a:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8009b2c:	68fa      	ldr	r2, [r7, #12]
 8009b2e:	4313      	orrs	r3, r2
 8009b30:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	685b      	ldr	r3, [r3, #4]
 8009b36:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 8009b3a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8009b3e:	68fa      	ldr	r2, [r7, #12]
 8009b40:	431a      	orrs	r2, r3
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8009b46:	2300      	movs	r3, #0
}
 8009b48:	4618      	mov	r0, r3
 8009b4a:	3714      	adds	r7, #20
 8009b4c:	46bd      	mov	sp, r7
 8009b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b52:	b004      	add	sp, #16
 8009b54:	4770      	bx	lr

08009b56 <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 8009b56:	b480      	push	{r7}
 8009b58:	b083      	sub	sp, #12
 8009b5a:	af00      	add	r7, sp, #0
 8009b5c:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8009b64:	4618      	mov	r0, r3
 8009b66:	370c      	adds	r7, #12
 8009b68:	46bd      	mov	sp, r7
 8009b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b6e:	4770      	bx	lr

08009b70 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 8009b70:	b480      	push	{r7}
 8009b72:	b083      	sub	sp, #12
 8009b74:	af00      	add	r7, sp, #0
 8009b76:	6078      	str	r0, [r7, #4]
 8009b78:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 8009b7a:	683b      	ldr	r3, [r7, #0]
 8009b7c:	681a      	ldr	r2, [r3, #0]
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009b84:	2300      	movs	r3, #0
}
 8009b86:	4618      	mov	r0, r3
 8009b88:	370c      	adds	r7, #12
 8009b8a:	46bd      	mov	sp, r7
 8009b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b90:	4770      	bx	lr

08009b92 <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 8009b92:	b580      	push	{r7, lr}
 8009b94:	b082      	sub	sp, #8
 8009b96:	af00      	add	r7, sp, #0
 8009b98:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	2203      	movs	r2, #3
 8009b9e:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 8009ba0:	2002      	movs	r0, #2
 8009ba2:	f7fa f829 	bl	8003bf8 <HAL_Delay>
  
  return HAL_OK;
 8009ba6:	2300      	movs	r3, #0
}
 8009ba8:	4618      	mov	r0, r3
 8009baa:	3708      	adds	r7, #8
 8009bac:	46bd      	mov	sp, r7
 8009bae:	bd80      	pop	{r7, pc}

08009bb0 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 8009bb0:	b480      	push	{r7}
 8009bb2:	b083      	sub	sp, #12
 8009bb4:	af00      	add	r7, sp, #0
 8009bb6:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	681b      	ldr	r3, [r3, #0]
 8009bbc:	f003 0303 	and.w	r3, r3, #3
}
 8009bc0:	4618      	mov	r0, r3
 8009bc2:	370c      	adds	r7, #12
 8009bc4:	46bd      	mov	sp, r7
 8009bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bca:	4770      	bx	lr

08009bcc <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 8009bcc:	b480      	push	{r7}
 8009bce:	b085      	sub	sp, #20
 8009bd0:	af00      	add	r7, sp, #0
 8009bd2:	6078      	str	r0, [r7, #4]
 8009bd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8009bd6:	2300      	movs	r3, #0
 8009bd8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 8009bda:	683b      	ldr	r3, [r7, #0]
 8009bdc:	681a      	ldr	r2, [r3, #0]
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8009be2:	683b      	ldr	r3, [r7, #0]
 8009be4:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8009be6:	683b      	ldr	r3, [r7, #0]
 8009be8:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8009bea:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8009bec:	683b      	ldr	r3, [r7, #0]
 8009bee:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8009bf0:	431a      	orrs	r2, r3
                       Command->CPSM);
 8009bf2:	683b      	ldr	r3, [r7, #0]
 8009bf4:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8009bf6:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8009bf8:	68fa      	ldr	r2, [r7, #12]
 8009bfa:	4313      	orrs	r3, r2
 8009bfc:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	68db      	ldr	r3, [r3, #12]
 8009c02:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8009c06:	f023 030f 	bic.w	r3, r3, #15
 8009c0a:	68fa      	ldr	r2, [r7, #12]
 8009c0c:	431a      	orrs	r2, r3
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 8009c12:	2300      	movs	r3, #0
}
 8009c14:	4618      	mov	r0, r3
 8009c16:	3714      	adds	r7, #20
 8009c18:	46bd      	mov	sp, r7
 8009c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c1e:	4770      	bx	lr

08009c20 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 8009c20:	b480      	push	{r7}
 8009c22:	b083      	sub	sp, #12
 8009c24:	af00      	add	r7, sp, #0
 8009c26:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	691b      	ldr	r3, [r3, #16]
 8009c2c:	b2db      	uxtb	r3, r3
}
 8009c2e:	4618      	mov	r0, r3
 8009c30:	370c      	adds	r7, #12
 8009c32:	46bd      	mov	sp, r7
 8009c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c38:	4770      	bx	lr

08009c3a <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 8009c3a:	b480      	push	{r7}
 8009c3c:	b085      	sub	sp, #20
 8009c3e:	af00      	add	r7, sp, #0
 8009c40:	6078      	str	r0, [r7, #4]
 8009c42:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	3314      	adds	r3, #20
 8009c48:	461a      	mov	r2, r3
 8009c4a:	683b      	ldr	r3, [r7, #0]
 8009c4c:	4413      	add	r3, r2
 8009c4e:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8009c50:	68fb      	ldr	r3, [r7, #12]
 8009c52:	681b      	ldr	r3, [r3, #0]
}  
 8009c54:	4618      	mov	r0, r3
 8009c56:	3714      	adds	r7, #20
 8009c58:	46bd      	mov	sp, r7
 8009c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c5e:	4770      	bx	lr

08009c60 <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 8009c60:	b480      	push	{r7}
 8009c62:	b085      	sub	sp, #20
 8009c64:	af00      	add	r7, sp, #0
 8009c66:	6078      	str	r0, [r7, #4]
 8009c68:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8009c6a:	2300      	movs	r3, #0
 8009c6c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 8009c6e:	683b      	ldr	r3, [r7, #0]
 8009c70:	681a      	ldr	r2, [r3, #0]
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 8009c76:	683b      	ldr	r3, [r7, #0]
 8009c78:	685a      	ldr	r2, [r3, #4]
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8009c7e:	683b      	ldr	r3, [r7, #0]
 8009c80:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8009c82:	683b      	ldr	r3, [r7, #0]
 8009c84:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8009c86:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8009c88:	683b      	ldr	r3, [r7, #0]
 8009c8a:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8009c8c:	431a      	orrs	r2, r3
                       Data->DPSM);
 8009c8e:	683b      	ldr	r3, [r7, #0]
 8009c90:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8009c92:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8009c94:	68fa      	ldr	r2, [r7, #12]
 8009c96:	4313      	orrs	r3, r2
 8009c98:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c9e:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 8009ca2:	68fb      	ldr	r3, [r7, #12]
 8009ca4:	431a      	orrs	r2, r3
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8009caa:	2300      	movs	r3, #0

}
 8009cac:	4618      	mov	r0, r3
 8009cae:	3714      	adds	r7, #20
 8009cb0:	46bd      	mov	sp, r7
 8009cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cb6:	4770      	bx	lr

08009cb8 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 8009cb8:	b580      	push	{r7, lr}
 8009cba:	b088      	sub	sp, #32
 8009cbc:	af00      	add	r7, sp, #0
 8009cbe:	6078      	str	r0, [r7, #4]
 8009cc0:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8009cc2:	683b      	ldr	r3, [r7, #0]
 8009cc4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8009cc6:	2310      	movs	r3, #16
 8009cc8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009cca:	2340      	movs	r3, #64	; 0x40
 8009ccc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009cce:	2300      	movs	r3, #0
 8009cd0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009cd2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009cd6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009cd8:	f107 0308 	add.w	r3, r7, #8
 8009cdc:	4619      	mov	r1, r3
 8009cde:	6878      	ldr	r0, [r7, #4]
 8009ce0:	f7ff ff74 	bl	8009bcc <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 8009ce4:	f241 3288 	movw	r2, #5000	; 0x1388
 8009ce8:	2110      	movs	r1, #16
 8009cea:	6878      	ldr	r0, [r7, #4]
 8009cec:	f000 fa40 	bl	800a170 <SDMMC_GetCmdResp1>
 8009cf0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009cf2:	69fb      	ldr	r3, [r7, #28]
}
 8009cf4:	4618      	mov	r0, r3
 8009cf6:	3720      	adds	r7, #32
 8009cf8:	46bd      	mov	sp, r7
 8009cfa:	bd80      	pop	{r7, pc}

08009cfc <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8009cfc:	b580      	push	{r7, lr}
 8009cfe:	b088      	sub	sp, #32
 8009d00:	af00      	add	r7, sp, #0
 8009d02:	6078      	str	r0, [r7, #4]
 8009d04:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8009d06:	683b      	ldr	r3, [r7, #0]
 8009d08:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8009d0a:	2311      	movs	r3, #17
 8009d0c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009d0e:	2340      	movs	r3, #64	; 0x40
 8009d10:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009d12:	2300      	movs	r3, #0
 8009d14:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009d16:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009d1a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009d1c:	f107 0308 	add.w	r3, r7, #8
 8009d20:	4619      	mov	r1, r3
 8009d22:	6878      	ldr	r0, [r7, #4]
 8009d24:	f7ff ff52 	bl	8009bcc <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8009d28:	f241 3288 	movw	r2, #5000	; 0x1388
 8009d2c:	2111      	movs	r1, #17
 8009d2e:	6878      	ldr	r0, [r7, #4]
 8009d30:	f000 fa1e 	bl	800a170 <SDMMC_GetCmdResp1>
 8009d34:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009d36:	69fb      	ldr	r3, [r7, #28]
}
 8009d38:	4618      	mov	r0, r3
 8009d3a:	3720      	adds	r7, #32
 8009d3c:	46bd      	mov	sp, r7
 8009d3e:	bd80      	pop	{r7, pc}

08009d40 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8009d40:	b580      	push	{r7, lr}
 8009d42:	b088      	sub	sp, #32
 8009d44:	af00      	add	r7, sp, #0
 8009d46:	6078      	str	r0, [r7, #4]
 8009d48:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8009d4a:	683b      	ldr	r3, [r7, #0]
 8009d4c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8009d4e:	2312      	movs	r3, #18
 8009d50:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009d52:	2340      	movs	r3, #64	; 0x40
 8009d54:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009d56:	2300      	movs	r3, #0
 8009d58:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009d5a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009d5e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009d60:	f107 0308 	add.w	r3, r7, #8
 8009d64:	4619      	mov	r1, r3
 8009d66:	6878      	ldr	r0, [r7, #4]
 8009d68:	f7ff ff30 	bl	8009bcc <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8009d6c:	f241 3288 	movw	r2, #5000	; 0x1388
 8009d70:	2112      	movs	r1, #18
 8009d72:	6878      	ldr	r0, [r7, #4]
 8009d74:	f000 f9fc 	bl	800a170 <SDMMC_GetCmdResp1>
 8009d78:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009d7a:	69fb      	ldr	r3, [r7, #28]
}
 8009d7c:	4618      	mov	r0, r3
 8009d7e:	3720      	adds	r7, #32
 8009d80:	46bd      	mov	sp, r7
 8009d82:	bd80      	pop	{r7, pc}

08009d84 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8009d84:	b580      	push	{r7, lr}
 8009d86:	b088      	sub	sp, #32
 8009d88:	af00      	add	r7, sp, #0
 8009d8a:	6078      	str	r0, [r7, #4]
 8009d8c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8009d8e:	683b      	ldr	r3, [r7, #0]
 8009d90:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8009d92:	2318      	movs	r3, #24
 8009d94:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009d96:	2340      	movs	r3, #64	; 0x40
 8009d98:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009d9a:	2300      	movs	r3, #0
 8009d9c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009d9e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009da2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009da4:	f107 0308 	add.w	r3, r7, #8
 8009da8:	4619      	mov	r1, r3
 8009daa:	6878      	ldr	r0, [r7, #4]
 8009dac:	f7ff ff0e 	bl	8009bcc <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8009db0:	f241 3288 	movw	r2, #5000	; 0x1388
 8009db4:	2118      	movs	r1, #24
 8009db6:	6878      	ldr	r0, [r7, #4]
 8009db8:	f000 f9da 	bl	800a170 <SDMMC_GetCmdResp1>
 8009dbc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009dbe:	69fb      	ldr	r3, [r7, #28]
}
 8009dc0:	4618      	mov	r0, r3
 8009dc2:	3720      	adds	r7, #32
 8009dc4:	46bd      	mov	sp, r7
 8009dc6:	bd80      	pop	{r7, pc}

08009dc8 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8009dc8:	b580      	push	{r7, lr}
 8009dca:	b088      	sub	sp, #32
 8009dcc:	af00      	add	r7, sp, #0
 8009dce:	6078      	str	r0, [r7, #4]
 8009dd0:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8009dd2:	683b      	ldr	r3, [r7, #0]
 8009dd4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8009dd6:	2319      	movs	r3, #25
 8009dd8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009dda:	2340      	movs	r3, #64	; 0x40
 8009ddc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009dde:	2300      	movs	r3, #0
 8009de0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009de2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009de6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009de8:	f107 0308 	add.w	r3, r7, #8
 8009dec:	4619      	mov	r1, r3
 8009dee:	6878      	ldr	r0, [r7, #4]
 8009df0:	f7ff feec 	bl	8009bcc <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8009df4:	f241 3288 	movw	r2, #5000	; 0x1388
 8009df8:	2119      	movs	r1, #25
 8009dfa:	6878      	ldr	r0, [r7, #4]
 8009dfc:	f000 f9b8 	bl	800a170 <SDMMC_GetCmdResp1>
 8009e00:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009e02:	69fb      	ldr	r3, [r7, #28]
}
 8009e04:	4618      	mov	r0, r3
 8009e06:	3720      	adds	r7, #32
 8009e08:	46bd      	mov	sp, r7
 8009e0a:	bd80      	pop	{r7, pc}

08009e0c <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 8009e0c:	b580      	push	{r7, lr}
 8009e0e:	b088      	sub	sp, #32
 8009e10:	af00      	add	r7, sp, #0
 8009e12:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8009e14:	2300      	movs	r3, #0
 8009e16:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8009e18:	230c      	movs	r3, #12
 8009e1a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009e1c:	2340      	movs	r3, #64	; 0x40
 8009e1e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009e20:	2300      	movs	r3, #0
 8009e22:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009e24:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009e28:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009e2a:	f107 0308 	add.w	r3, r7, #8
 8009e2e:	4619      	mov	r1, r3
 8009e30:	6878      	ldr	r0, [r7, #4]
 8009e32:	f7ff fecb 	bl	8009bcc <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 8009e36:	4a05      	ldr	r2, [pc, #20]	; (8009e4c <SDMMC_CmdStopTransfer+0x40>)
 8009e38:	210c      	movs	r1, #12
 8009e3a:	6878      	ldr	r0, [r7, #4]
 8009e3c:	f000 f998 	bl	800a170 <SDMMC_GetCmdResp1>
 8009e40:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009e42:	69fb      	ldr	r3, [r7, #28]
}
 8009e44:	4618      	mov	r0, r3
 8009e46:	3720      	adds	r7, #32
 8009e48:	46bd      	mov	sp, r7
 8009e4a:	bd80      	pop	{r7, pc}
 8009e4c:	05f5e100 	.word	0x05f5e100

08009e50 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 8009e50:	b580      	push	{r7, lr}
 8009e52:	b08a      	sub	sp, #40	; 0x28
 8009e54:	af00      	add	r7, sp, #0
 8009e56:	60f8      	str	r0, [r7, #12]
 8009e58:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8009e5c:	683b      	ldr	r3, [r7, #0]
 8009e5e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8009e60:	2307      	movs	r3, #7
 8009e62:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009e64:	2340      	movs	r3, #64	; 0x40
 8009e66:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009e68:	2300      	movs	r3, #0
 8009e6a:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009e6c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009e70:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009e72:	f107 0310 	add.w	r3, r7, #16
 8009e76:	4619      	mov	r1, r3
 8009e78:	68f8      	ldr	r0, [r7, #12]
 8009e7a:	f7ff fea7 	bl	8009bcc <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 8009e7e:	f241 3288 	movw	r2, #5000	; 0x1388
 8009e82:	2107      	movs	r1, #7
 8009e84:	68f8      	ldr	r0, [r7, #12]
 8009e86:	f000 f973 	bl	800a170 <SDMMC_GetCmdResp1>
 8009e8a:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 8009e8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8009e8e:	4618      	mov	r0, r3
 8009e90:	3728      	adds	r7, #40	; 0x28
 8009e92:	46bd      	mov	sp, r7
 8009e94:	bd80      	pop	{r7, pc}

08009e96 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 8009e96:	b580      	push	{r7, lr}
 8009e98:	b088      	sub	sp, #32
 8009e9a:	af00      	add	r7, sp, #0
 8009e9c:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 8009e9e:	2300      	movs	r3, #0
 8009ea0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8009ea2:	2300      	movs	r3, #0
 8009ea4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 8009ea6:	2300      	movs	r3, #0
 8009ea8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009eaa:	2300      	movs	r3, #0
 8009eac:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009eae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009eb2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009eb4:	f107 0308 	add.w	r3, r7, #8
 8009eb8:	4619      	mov	r1, r3
 8009eba:	6878      	ldr	r0, [r7, #4]
 8009ebc:	f7ff fe86 	bl	8009bcc <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 8009ec0:	6878      	ldr	r0, [r7, #4]
 8009ec2:	f000 f92d 	bl	800a120 <SDMMC_GetCmdError>
 8009ec6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009ec8:	69fb      	ldr	r3, [r7, #28]
}
 8009eca:	4618      	mov	r0, r3
 8009ecc:	3720      	adds	r7, #32
 8009ece:	46bd      	mov	sp, r7
 8009ed0:	bd80      	pop	{r7, pc}

08009ed2 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 8009ed2:	b580      	push	{r7, lr}
 8009ed4:	b088      	sub	sp, #32
 8009ed6:	af00      	add	r7, sp, #0
 8009ed8:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8009eda:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8009ede:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8009ee0:	2308      	movs	r3, #8
 8009ee2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009ee4:	2340      	movs	r3, #64	; 0x40
 8009ee6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009ee8:	2300      	movs	r3, #0
 8009eea:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009eec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009ef0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009ef2:	f107 0308 	add.w	r3, r7, #8
 8009ef6:	4619      	mov	r1, r3
 8009ef8:	6878      	ldr	r0, [r7, #4]
 8009efa:	f7ff fe67 	bl	8009bcc <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 8009efe:	6878      	ldr	r0, [r7, #4]
 8009f00:	f000 fb16 	bl	800a530 <SDMMC_GetCmdResp7>
 8009f04:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009f06:	69fb      	ldr	r3, [r7, #28]
}
 8009f08:	4618      	mov	r0, r3
 8009f0a:	3720      	adds	r7, #32
 8009f0c:	46bd      	mov	sp, r7
 8009f0e:	bd80      	pop	{r7, pc}

08009f10 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8009f10:	b580      	push	{r7, lr}
 8009f12:	b088      	sub	sp, #32
 8009f14:	af00      	add	r7, sp, #0
 8009f16:	6078      	str	r0, [r7, #4]
 8009f18:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8009f1a:	683b      	ldr	r3, [r7, #0]
 8009f1c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8009f1e:	2337      	movs	r3, #55	; 0x37
 8009f20:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009f22:	2340      	movs	r3, #64	; 0x40
 8009f24:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009f26:	2300      	movs	r3, #0
 8009f28:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009f2a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009f2e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009f30:	f107 0308 	add.w	r3, r7, #8
 8009f34:	4619      	mov	r1, r3
 8009f36:	6878      	ldr	r0, [r7, #4]
 8009f38:	f7ff fe48 	bl	8009bcc <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 8009f3c:	f241 3288 	movw	r2, #5000	; 0x1388
 8009f40:	2137      	movs	r1, #55	; 0x37
 8009f42:	6878      	ldr	r0, [r7, #4]
 8009f44:	f000 f914 	bl	800a170 <SDMMC_GetCmdResp1>
 8009f48:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009f4a:	69fb      	ldr	r3, [r7, #28]
}
 8009f4c:	4618      	mov	r0, r3
 8009f4e:	3720      	adds	r7, #32
 8009f50:	46bd      	mov	sp, r7
 8009f52:	bd80      	pop	{r7, pc}

08009f54 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8009f54:	b580      	push	{r7, lr}
 8009f56:	b088      	sub	sp, #32
 8009f58:	af00      	add	r7, sp, #0
 8009f5a:	6078      	str	r0, [r7, #4]
 8009f5c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8009f5e:	683b      	ldr	r3, [r7, #0]
 8009f60:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009f64:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009f68:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8009f6a:	2329      	movs	r3, #41	; 0x29
 8009f6c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009f6e:	2340      	movs	r3, #64	; 0x40
 8009f70:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009f72:	2300      	movs	r3, #0
 8009f74:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009f76:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009f7a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009f7c:	f107 0308 	add.w	r3, r7, #8
 8009f80:	4619      	mov	r1, r3
 8009f82:	6878      	ldr	r0, [r7, #4]
 8009f84:	f7ff fe22 	bl	8009bcc <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 8009f88:	6878      	ldr	r0, [r7, #4]
 8009f8a:	f000 fa23 	bl	800a3d4 <SDMMC_GetCmdResp3>
 8009f8e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009f90:	69fb      	ldr	r3, [r7, #28]
}
 8009f92:	4618      	mov	r0, r3
 8009f94:	3720      	adds	r7, #32
 8009f96:	46bd      	mov	sp, r7
 8009f98:	bd80      	pop	{r7, pc}

08009f9a <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 8009f9a:	b580      	push	{r7, lr}
 8009f9c:	b088      	sub	sp, #32
 8009f9e:	af00      	add	r7, sp, #0
 8009fa0:	6078      	str	r0, [r7, #4]
 8009fa2:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8009fa4:	683b      	ldr	r3, [r7, #0]
 8009fa6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8009fa8:	2306      	movs	r3, #6
 8009faa:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009fac:	2340      	movs	r3, #64	; 0x40
 8009fae:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009fb0:	2300      	movs	r3, #0
 8009fb2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009fb4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009fb8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009fba:	f107 0308 	add.w	r3, r7, #8
 8009fbe:	4619      	mov	r1, r3
 8009fc0:	6878      	ldr	r0, [r7, #4]
 8009fc2:	f7ff fe03 	bl	8009bcc <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 8009fc6:	f241 3288 	movw	r2, #5000	; 0x1388
 8009fca:	2106      	movs	r1, #6
 8009fcc:	6878      	ldr	r0, [r7, #4]
 8009fce:	f000 f8cf 	bl	800a170 <SDMMC_GetCmdResp1>
 8009fd2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009fd4:	69fb      	ldr	r3, [r7, #28]
}
 8009fd6:	4618      	mov	r0, r3
 8009fd8:	3720      	adds	r7, #32
 8009fda:	46bd      	mov	sp, r7
 8009fdc:	bd80      	pop	{r7, pc}

08009fde <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 8009fde:	b580      	push	{r7, lr}
 8009fe0:	b088      	sub	sp, #32
 8009fe2:	af00      	add	r7, sp, #0
 8009fe4:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8009fe6:	2300      	movs	r3, #0
 8009fe8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8009fea:	2333      	movs	r3, #51	; 0x33
 8009fec:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009fee:	2340      	movs	r3, #64	; 0x40
 8009ff0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009ff2:	2300      	movs	r3, #0
 8009ff4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009ff6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009ffa:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009ffc:	f107 0308 	add.w	r3, r7, #8
 800a000:	4619      	mov	r1, r3
 800a002:	6878      	ldr	r0, [r7, #4]
 800a004:	f7ff fde2 	bl	8009bcc <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 800a008:	f241 3288 	movw	r2, #5000	; 0x1388
 800a00c:	2133      	movs	r1, #51	; 0x33
 800a00e:	6878      	ldr	r0, [r7, #4]
 800a010:	f000 f8ae 	bl	800a170 <SDMMC_GetCmdResp1>
 800a014:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a016:	69fb      	ldr	r3, [r7, #28]
}
 800a018:	4618      	mov	r0, r3
 800a01a:	3720      	adds	r7, #32
 800a01c:	46bd      	mov	sp, r7
 800a01e:	bd80      	pop	{r7, pc}

0800a020 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 800a020:	b580      	push	{r7, lr}
 800a022:	b088      	sub	sp, #32
 800a024:	af00      	add	r7, sp, #0
 800a026:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800a028:	2300      	movs	r3, #0
 800a02a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800a02c:	2302      	movs	r3, #2
 800a02e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800a030:	23c0      	movs	r3, #192	; 0xc0
 800a032:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a034:	2300      	movs	r3, #0
 800a036:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a038:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a03c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a03e:	f107 0308 	add.w	r3, r7, #8
 800a042:	4619      	mov	r1, r3
 800a044:	6878      	ldr	r0, [r7, #4]
 800a046:	f7ff fdc1 	bl	8009bcc <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800a04a:	6878      	ldr	r0, [r7, #4]
 800a04c:	f000 f97c 	bl	800a348 <SDMMC_GetCmdResp2>
 800a050:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a052:	69fb      	ldr	r3, [r7, #28]
}
 800a054:	4618      	mov	r0, r3
 800a056:	3720      	adds	r7, #32
 800a058:	46bd      	mov	sp, r7
 800a05a:	bd80      	pop	{r7, pc}

0800a05c <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800a05c:	b580      	push	{r7, lr}
 800a05e:	b088      	sub	sp, #32
 800a060:	af00      	add	r7, sp, #0
 800a062:	6078      	str	r0, [r7, #4]
 800a064:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800a066:	683b      	ldr	r3, [r7, #0]
 800a068:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800a06a:	2309      	movs	r3, #9
 800a06c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800a06e:	23c0      	movs	r3, #192	; 0xc0
 800a070:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a072:	2300      	movs	r3, #0
 800a074:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a076:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a07a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a07c:	f107 0308 	add.w	r3, r7, #8
 800a080:	4619      	mov	r1, r3
 800a082:	6878      	ldr	r0, [r7, #4]
 800a084:	f7ff fda2 	bl	8009bcc <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800a088:	6878      	ldr	r0, [r7, #4]
 800a08a:	f000 f95d 	bl	800a348 <SDMMC_GetCmdResp2>
 800a08e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a090:	69fb      	ldr	r3, [r7, #28]
}
 800a092:	4618      	mov	r0, r3
 800a094:	3720      	adds	r7, #32
 800a096:	46bd      	mov	sp, r7
 800a098:	bd80      	pop	{r7, pc}

0800a09a <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 800a09a:	b580      	push	{r7, lr}
 800a09c:	b088      	sub	sp, #32
 800a09e:	af00      	add	r7, sp, #0
 800a0a0:	6078      	str	r0, [r7, #4]
 800a0a2:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800a0a4:	2300      	movs	r3, #0
 800a0a6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800a0a8:	2303      	movs	r3, #3
 800a0aa:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a0ac:	2340      	movs	r3, #64	; 0x40
 800a0ae:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a0b0:	2300      	movs	r3, #0
 800a0b2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a0b4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a0b8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a0ba:	f107 0308 	add.w	r3, r7, #8
 800a0be:	4619      	mov	r1, r3
 800a0c0:	6878      	ldr	r0, [r7, #4]
 800a0c2:	f7ff fd83 	bl	8009bcc <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800a0c6:	683a      	ldr	r2, [r7, #0]
 800a0c8:	2103      	movs	r1, #3
 800a0ca:	6878      	ldr	r0, [r7, #4]
 800a0cc:	f000 f9bc 	bl	800a448 <SDMMC_GetCmdResp6>
 800a0d0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a0d2:	69fb      	ldr	r3, [r7, #28]
}
 800a0d4:	4618      	mov	r0, r3
 800a0d6:	3720      	adds	r7, #32
 800a0d8:	46bd      	mov	sp, r7
 800a0da:	bd80      	pop	{r7, pc}

0800a0dc <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800a0dc:	b580      	push	{r7, lr}
 800a0de:	b088      	sub	sp, #32
 800a0e0:	af00      	add	r7, sp, #0
 800a0e2:	6078      	str	r0, [r7, #4]
 800a0e4:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 800a0e6:	683b      	ldr	r3, [r7, #0]
 800a0e8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800a0ea:	230d      	movs	r3, #13
 800a0ec:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a0ee:	2340      	movs	r3, #64	; 0x40
 800a0f0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a0f2:	2300      	movs	r3, #0
 800a0f4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a0f6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a0fa:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a0fc:	f107 0308 	add.w	r3, r7, #8
 800a100:	4619      	mov	r1, r3
 800a102:	6878      	ldr	r0, [r7, #4]
 800a104:	f7ff fd62 	bl	8009bcc <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 800a108:	f241 3288 	movw	r2, #5000	; 0x1388
 800a10c:	210d      	movs	r1, #13
 800a10e:	6878      	ldr	r0, [r7, #4]
 800a110:	f000 f82e 	bl	800a170 <SDMMC_GetCmdResp1>
 800a114:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a116:	69fb      	ldr	r3, [r7, #28]
}
 800a118:	4618      	mov	r0, r3
 800a11a:	3720      	adds	r7, #32
 800a11c:	46bd      	mov	sp, r7
 800a11e:	bd80      	pop	{r7, pc}

0800a120 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 800a120:	b490      	push	{r4, r7}
 800a122:	b082      	sub	sp, #8
 800a124:	af00      	add	r7, sp, #0
 800a126:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800a128:	4b0f      	ldr	r3, [pc, #60]	; (800a168 <SDMMC_GetCmdError+0x48>)
 800a12a:	681b      	ldr	r3, [r3, #0]
 800a12c:	4a0f      	ldr	r2, [pc, #60]	; (800a16c <SDMMC_GetCmdError+0x4c>)
 800a12e:	fba2 2303 	umull	r2, r3, r2, r3
 800a132:	0a5b      	lsrs	r3, r3, #9
 800a134:	f241 3288 	movw	r2, #5000	; 0x1388
 800a138:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800a13c:	4623      	mov	r3, r4
 800a13e:	1e5c      	subs	r4, r3, #1
 800a140:	2b00      	cmp	r3, #0
 800a142:	d102      	bne.n	800a14a <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a144:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a148:	e009      	b.n	800a15e <SDMMC_GetCmdError+0x3e>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a14e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a152:	2b00      	cmp	r3, #0
 800a154:	d0f2      	beq.n	800a13c <SDMMC_GetCmdError+0x1c>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	22c5      	movs	r2, #197	; 0xc5
 800a15a:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 800a15c:	2300      	movs	r3, #0
}
 800a15e:	4618      	mov	r0, r3
 800a160:	3708      	adds	r7, #8
 800a162:	46bd      	mov	sp, r7
 800a164:	bc90      	pop	{r4, r7}
 800a166:	4770      	bx	lr
 800a168:	20000000 	.word	0x20000000
 800a16c:	10624dd3 	.word	0x10624dd3

0800a170 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 800a170:	b590      	push	{r4, r7, lr}
 800a172:	b087      	sub	sp, #28
 800a174:	af00      	add	r7, sp, #0
 800a176:	60f8      	str	r0, [r7, #12]
 800a178:	460b      	mov	r3, r1
 800a17a:	607a      	str	r2, [r7, #4]
 800a17c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800a17e:	4b6f      	ldr	r3, [pc, #444]	; (800a33c <SDMMC_GetCmdResp1+0x1cc>)
 800a180:	681b      	ldr	r3, [r3, #0]
 800a182:	4a6f      	ldr	r2, [pc, #444]	; (800a340 <SDMMC_GetCmdResp1+0x1d0>)
 800a184:	fba2 2303 	umull	r2, r3, r2, r3
 800a188:	0a5b      	lsrs	r3, r3, #9
 800a18a:	687a      	ldr	r2, [r7, #4]
 800a18c:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800a190:	4623      	mov	r3, r4
 800a192:	1e5c      	subs	r4, r3, #1
 800a194:	2b00      	cmp	r3, #0
 800a196:	d102      	bne.n	800a19e <SDMMC_GetCmdResp1+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a198:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a19c:	e0c9      	b.n	800a332 <SDMMC_GetCmdResp1+0x1c2>
    }
    sta_reg = SDIOx->STA;
 800a19e:	68fb      	ldr	r3, [r7, #12]
 800a1a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a1a2:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800a1a4:	697b      	ldr	r3, [r7, #20]
 800a1a6:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800a1aa:	2b00      	cmp	r3, #0
 800a1ac:	d0f0      	beq.n	800a190 <SDMMC_GetCmdResp1+0x20>
 800a1ae:	697b      	ldr	r3, [r7, #20]
 800a1b0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800a1b4:	2b00      	cmp	r3, #0
 800a1b6:	d1eb      	bne.n	800a190 <SDMMC_GetCmdResp1+0x20>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800a1b8:	68fb      	ldr	r3, [r7, #12]
 800a1ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a1bc:	f003 0304 	and.w	r3, r3, #4
 800a1c0:	2b00      	cmp	r3, #0
 800a1c2:	d004      	beq.n	800a1ce <SDMMC_GetCmdResp1+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800a1c4:	68fb      	ldr	r3, [r7, #12]
 800a1c6:	2204      	movs	r2, #4
 800a1c8:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a1ca:	2304      	movs	r3, #4
 800a1cc:	e0b1      	b.n	800a332 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800a1ce:	68fb      	ldr	r3, [r7, #12]
 800a1d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a1d2:	f003 0301 	and.w	r3, r3, #1
 800a1d6:	2b00      	cmp	r3, #0
 800a1d8:	d004      	beq.n	800a1e4 <SDMMC_GetCmdResp1+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800a1da:	68fb      	ldr	r3, [r7, #12]
 800a1dc:	2201      	movs	r2, #1
 800a1de:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a1e0:	2301      	movs	r3, #1
 800a1e2:	e0a6      	b.n	800a332 <SDMMC_GetCmdResp1+0x1c2>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800a1e4:	68fb      	ldr	r3, [r7, #12]
 800a1e6:	22c5      	movs	r2, #197	; 0xc5
 800a1e8:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800a1ea:	68f8      	ldr	r0, [r7, #12]
 800a1ec:	f7ff fd18 	bl	8009c20 <SDIO_GetCommandResponse>
 800a1f0:	4603      	mov	r3, r0
 800a1f2:	461a      	mov	r2, r3
 800a1f4:	7afb      	ldrb	r3, [r7, #11]
 800a1f6:	4293      	cmp	r3, r2
 800a1f8:	d001      	beq.n	800a1fe <SDMMC_GetCmdResp1+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a1fa:	2301      	movs	r3, #1
 800a1fc:	e099      	b.n	800a332 <SDMMC_GetCmdResp1+0x1c2>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800a1fe:	2100      	movs	r1, #0
 800a200:	68f8      	ldr	r0, [r7, #12]
 800a202:	f7ff fd1a 	bl	8009c3a <SDIO_GetResponse>
 800a206:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800a208:	693a      	ldr	r2, [r7, #16]
 800a20a:	4b4e      	ldr	r3, [pc, #312]	; (800a344 <SDMMC_GetCmdResp1+0x1d4>)
 800a20c:	4013      	ands	r3, r2
 800a20e:	2b00      	cmp	r3, #0
 800a210:	d101      	bne.n	800a216 <SDMMC_GetCmdResp1+0xa6>
  {
    return SDMMC_ERROR_NONE;
 800a212:	2300      	movs	r3, #0
 800a214:	e08d      	b.n	800a332 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800a216:	693b      	ldr	r3, [r7, #16]
 800a218:	2b00      	cmp	r3, #0
 800a21a:	da02      	bge.n	800a222 <SDMMC_GetCmdResp1+0xb2>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800a21c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800a220:	e087      	b.n	800a332 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800a222:	693b      	ldr	r3, [r7, #16]
 800a224:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800a228:	2b00      	cmp	r3, #0
 800a22a:	d001      	beq.n	800a230 <SDMMC_GetCmdResp1+0xc0>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800a22c:	2340      	movs	r3, #64	; 0x40
 800a22e:	e080      	b.n	800a332 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800a230:	693b      	ldr	r3, [r7, #16]
 800a232:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a236:	2b00      	cmp	r3, #0
 800a238:	d001      	beq.n	800a23e <SDMMC_GetCmdResp1+0xce>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800a23a:	2380      	movs	r3, #128	; 0x80
 800a23c:	e079      	b.n	800a332 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800a23e:	693b      	ldr	r3, [r7, #16]
 800a240:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a244:	2b00      	cmp	r3, #0
 800a246:	d002      	beq.n	800a24e <SDMMC_GetCmdResp1+0xde>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800a248:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a24c:	e071      	b.n	800a332 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800a24e:	693b      	ldr	r3, [r7, #16]
 800a250:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a254:	2b00      	cmp	r3, #0
 800a256:	d002      	beq.n	800a25e <SDMMC_GetCmdResp1+0xee>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800a258:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a25c:	e069      	b.n	800a332 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800a25e:	693b      	ldr	r3, [r7, #16]
 800a260:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800a264:	2b00      	cmp	r3, #0
 800a266:	d002      	beq.n	800a26e <SDMMC_GetCmdResp1+0xfe>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800a268:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a26c:	e061      	b.n	800a332 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800a26e:	693b      	ldr	r3, [r7, #16]
 800a270:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a274:	2b00      	cmp	r3, #0
 800a276:	d002      	beq.n	800a27e <SDMMC_GetCmdResp1+0x10e>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800a278:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800a27c:	e059      	b.n	800a332 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800a27e:	693b      	ldr	r3, [r7, #16]
 800a280:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a284:	2b00      	cmp	r3, #0
 800a286:	d002      	beq.n	800a28e <SDMMC_GetCmdResp1+0x11e>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800a288:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a28c:	e051      	b.n	800a332 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800a28e:	693b      	ldr	r3, [r7, #16]
 800a290:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a294:	2b00      	cmp	r3, #0
 800a296:	d002      	beq.n	800a29e <SDMMC_GetCmdResp1+0x12e>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800a298:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800a29c:	e049      	b.n	800a332 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800a29e:	693b      	ldr	r3, [r7, #16]
 800a2a0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a2a4:	2b00      	cmp	r3, #0
 800a2a6:	d002      	beq.n	800a2ae <SDMMC_GetCmdResp1+0x13e>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800a2a8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800a2ac:	e041      	b.n	800a332 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800a2ae:	693b      	ldr	r3, [r7, #16]
 800a2b0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a2b4:	2b00      	cmp	r3, #0
 800a2b6:	d002      	beq.n	800a2be <SDMMC_GetCmdResp1+0x14e>
  {
    return SDMMC_ERROR_CC_ERR;
 800a2b8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a2bc:	e039      	b.n	800a332 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800a2be:	693b      	ldr	r3, [r7, #16]
 800a2c0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a2c4:	2b00      	cmp	r3, #0
 800a2c6:	d002      	beq.n	800a2ce <SDMMC_GetCmdResp1+0x15e>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800a2c8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800a2cc:	e031      	b.n	800a332 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800a2ce:	693b      	ldr	r3, [r7, #16]
 800a2d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a2d4:	2b00      	cmp	r3, #0
 800a2d6:	d002      	beq.n	800a2de <SDMMC_GetCmdResp1+0x16e>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800a2d8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800a2dc:	e029      	b.n	800a332 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800a2de:	693b      	ldr	r3, [r7, #16]
 800a2e0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a2e4:	2b00      	cmp	r3, #0
 800a2e6:	d002      	beq.n	800a2ee <SDMMC_GetCmdResp1+0x17e>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800a2e8:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800a2ec:	e021      	b.n	800a332 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800a2ee:	693b      	ldr	r3, [r7, #16]
 800a2f0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a2f4:	2b00      	cmp	r3, #0
 800a2f6:	d002      	beq.n	800a2fe <SDMMC_GetCmdResp1+0x18e>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800a2f8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800a2fc:	e019      	b.n	800a332 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800a2fe:	693b      	ldr	r3, [r7, #16]
 800a300:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a304:	2b00      	cmp	r3, #0
 800a306:	d002      	beq.n	800a30e <SDMMC_GetCmdResp1+0x19e>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800a308:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800a30c:	e011      	b.n	800a332 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800a30e:	693b      	ldr	r3, [r7, #16]
 800a310:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a314:	2b00      	cmp	r3, #0
 800a316:	d002      	beq.n	800a31e <SDMMC_GetCmdResp1+0x1ae>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800a318:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800a31c:	e009      	b.n	800a332 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800a31e:	693b      	ldr	r3, [r7, #16]
 800a320:	f003 0308 	and.w	r3, r3, #8
 800a324:	2b00      	cmp	r3, #0
 800a326:	d002      	beq.n	800a32e <SDMMC_GetCmdResp1+0x1be>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800a328:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800a32c:	e001      	b.n	800a332 <SDMMC_GetCmdResp1+0x1c2>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800a32e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800a332:	4618      	mov	r0, r3
 800a334:	371c      	adds	r7, #28
 800a336:	46bd      	mov	sp, r7
 800a338:	bd90      	pop	{r4, r7, pc}
 800a33a:	bf00      	nop
 800a33c:	20000000 	.word	0x20000000
 800a340:	10624dd3 	.word	0x10624dd3
 800a344:	fdffe008 	.word	0xfdffe008

0800a348 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 800a348:	b490      	push	{r4, r7}
 800a34a:	b084      	sub	sp, #16
 800a34c:	af00      	add	r7, sp, #0
 800a34e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800a350:	4b1e      	ldr	r3, [pc, #120]	; (800a3cc <SDMMC_GetCmdResp2+0x84>)
 800a352:	681b      	ldr	r3, [r3, #0]
 800a354:	4a1e      	ldr	r2, [pc, #120]	; (800a3d0 <SDMMC_GetCmdResp2+0x88>)
 800a356:	fba2 2303 	umull	r2, r3, r2, r3
 800a35a:	0a5b      	lsrs	r3, r3, #9
 800a35c:	f241 3288 	movw	r2, #5000	; 0x1388
 800a360:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800a364:	4623      	mov	r3, r4
 800a366:	1e5c      	subs	r4, r3, #1
 800a368:	2b00      	cmp	r3, #0
 800a36a:	d102      	bne.n	800a372 <SDMMC_GetCmdResp2+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a36c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a370:	e026      	b.n	800a3c0 <SDMMC_GetCmdResp2+0x78>
    }
    sta_reg = SDIOx->STA;
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a376:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800a378:	68fb      	ldr	r3, [r7, #12]
 800a37a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800a37e:	2b00      	cmp	r3, #0
 800a380:	d0f0      	beq.n	800a364 <SDMMC_GetCmdResp2+0x1c>
 800a382:	68fb      	ldr	r3, [r7, #12]
 800a384:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800a388:	2b00      	cmp	r3, #0
 800a38a:	d1eb      	bne.n	800a364 <SDMMC_GetCmdResp2+0x1c>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a390:	f003 0304 	and.w	r3, r3, #4
 800a394:	2b00      	cmp	r3, #0
 800a396:	d004      	beq.n	800a3a2 <SDMMC_GetCmdResp2+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	2204      	movs	r2, #4
 800a39c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a39e:	2304      	movs	r3, #4
 800a3a0:	e00e      	b.n	800a3c0 <SDMMC_GetCmdResp2+0x78>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a3a6:	f003 0301 	and.w	r3, r3, #1
 800a3aa:	2b00      	cmp	r3, #0
 800a3ac:	d004      	beq.n	800a3b8 <SDMMC_GetCmdResp2+0x70>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	2201      	movs	r2, #1
 800a3b2:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a3b4:	2301      	movs	r3, #1
 800a3b6:	e003      	b.n	800a3c0 <SDMMC_GetCmdResp2+0x78>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	22c5      	movs	r2, #197	; 0xc5
 800a3bc:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800a3be:	2300      	movs	r3, #0
}
 800a3c0:	4618      	mov	r0, r3
 800a3c2:	3710      	adds	r7, #16
 800a3c4:	46bd      	mov	sp, r7
 800a3c6:	bc90      	pop	{r4, r7}
 800a3c8:	4770      	bx	lr
 800a3ca:	bf00      	nop
 800a3cc:	20000000 	.word	0x20000000
 800a3d0:	10624dd3 	.word	0x10624dd3

0800a3d4 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 800a3d4:	b490      	push	{r4, r7}
 800a3d6:	b084      	sub	sp, #16
 800a3d8:	af00      	add	r7, sp, #0
 800a3da:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800a3dc:	4b18      	ldr	r3, [pc, #96]	; (800a440 <SDMMC_GetCmdResp3+0x6c>)
 800a3de:	681b      	ldr	r3, [r3, #0]
 800a3e0:	4a18      	ldr	r2, [pc, #96]	; (800a444 <SDMMC_GetCmdResp3+0x70>)
 800a3e2:	fba2 2303 	umull	r2, r3, r2, r3
 800a3e6:	0a5b      	lsrs	r3, r3, #9
 800a3e8:	f241 3288 	movw	r2, #5000	; 0x1388
 800a3ec:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800a3f0:	4623      	mov	r3, r4
 800a3f2:	1e5c      	subs	r4, r3, #1
 800a3f4:	2b00      	cmp	r3, #0
 800a3f6:	d102      	bne.n	800a3fe <SDMMC_GetCmdResp3+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a3f8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a3fc:	e01b      	b.n	800a436 <SDMMC_GetCmdResp3+0x62>
    }
    sta_reg = SDIOx->STA;
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a402:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800a404:	68fb      	ldr	r3, [r7, #12]
 800a406:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800a40a:	2b00      	cmp	r3, #0
 800a40c:	d0f0      	beq.n	800a3f0 <SDMMC_GetCmdResp3+0x1c>
 800a40e:	68fb      	ldr	r3, [r7, #12]
 800a410:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800a414:	2b00      	cmp	r3, #0
 800a416:	d1eb      	bne.n	800a3f0 <SDMMC_GetCmdResp3+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a41c:	f003 0304 	and.w	r3, r3, #4
 800a420:	2b00      	cmp	r3, #0
 800a422:	d004      	beq.n	800a42e <SDMMC_GetCmdResp3+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	2204      	movs	r2, #4
 800a428:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a42a:	2304      	movs	r3, #4
 800a42c:	e003      	b.n	800a436 <SDMMC_GetCmdResp3+0x62>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	22c5      	movs	r2, #197	; 0xc5
 800a432:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800a434:	2300      	movs	r3, #0
}
 800a436:	4618      	mov	r0, r3
 800a438:	3710      	adds	r7, #16
 800a43a:	46bd      	mov	sp, r7
 800a43c:	bc90      	pop	{r4, r7}
 800a43e:	4770      	bx	lr
 800a440:	20000000 	.word	0x20000000
 800a444:	10624dd3 	.word	0x10624dd3

0800a448 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800a448:	b590      	push	{r4, r7, lr}
 800a44a:	b087      	sub	sp, #28
 800a44c:	af00      	add	r7, sp, #0
 800a44e:	60f8      	str	r0, [r7, #12]
 800a450:	460b      	mov	r3, r1
 800a452:	607a      	str	r2, [r7, #4]
 800a454:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800a456:	4b34      	ldr	r3, [pc, #208]	; (800a528 <SDMMC_GetCmdResp6+0xe0>)
 800a458:	681b      	ldr	r3, [r3, #0]
 800a45a:	4a34      	ldr	r2, [pc, #208]	; (800a52c <SDMMC_GetCmdResp6+0xe4>)
 800a45c:	fba2 2303 	umull	r2, r3, r2, r3
 800a460:	0a5b      	lsrs	r3, r3, #9
 800a462:	f241 3288 	movw	r2, #5000	; 0x1388
 800a466:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800a46a:	4623      	mov	r3, r4
 800a46c:	1e5c      	subs	r4, r3, #1
 800a46e:	2b00      	cmp	r3, #0
 800a470:	d102      	bne.n	800a478 <SDMMC_GetCmdResp6+0x30>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a472:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a476:	e052      	b.n	800a51e <SDMMC_GetCmdResp6+0xd6>
    }
    sta_reg = SDIOx->STA;
 800a478:	68fb      	ldr	r3, [r7, #12]
 800a47a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a47c:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800a47e:	697b      	ldr	r3, [r7, #20]
 800a480:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800a484:	2b00      	cmp	r3, #0
 800a486:	d0f0      	beq.n	800a46a <SDMMC_GetCmdResp6+0x22>
 800a488:	697b      	ldr	r3, [r7, #20]
 800a48a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800a48e:	2b00      	cmp	r3, #0
 800a490:	d1eb      	bne.n	800a46a <SDMMC_GetCmdResp6+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800a492:	68fb      	ldr	r3, [r7, #12]
 800a494:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a496:	f003 0304 	and.w	r3, r3, #4
 800a49a:	2b00      	cmp	r3, #0
 800a49c:	d004      	beq.n	800a4a8 <SDMMC_GetCmdResp6+0x60>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800a49e:	68fb      	ldr	r3, [r7, #12]
 800a4a0:	2204      	movs	r2, #4
 800a4a2:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a4a4:	2304      	movs	r3, #4
 800a4a6:	e03a      	b.n	800a51e <SDMMC_GetCmdResp6+0xd6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800a4a8:	68fb      	ldr	r3, [r7, #12]
 800a4aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a4ac:	f003 0301 	and.w	r3, r3, #1
 800a4b0:	2b00      	cmp	r3, #0
 800a4b2:	d004      	beq.n	800a4be <SDMMC_GetCmdResp6+0x76>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800a4b4:	68fb      	ldr	r3, [r7, #12]
 800a4b6:	2201      	movs	r2, #1
 800a4b8:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a4ba:	2301      	movs	r3, #1
 800a4bc:	e02f      	b.n	800a51e <SDMMC_GetCmdResp6+0xd6>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800a4be:	68f8      	ldr	r0, [r7, #12]
 800a4c0:	f7ff fbae 	bl	8009c20 <SDIO_GetCommandResponse>
 800a4c4:	4603      	mov	r3, r0
 800a4c6:	461a      	mov	r2, r3
 800a4c8:	7afb      	ldrb	r3, [r7, #11]
 800a4ca:	4293      	cmp	r3, r2
 800a4cc:	d001      	beq.n	800a4d2 <SDMMC_GetCmdResp6+0x8a>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a4ce:	2301      	movs	r3, #1
 800a4d0:	e025      	b.n	800a51e <SDMMC_GetCmdResp6+0xd6>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800a4d2:	68fb      	ldr	r3, [r7, #12]
 800a4d4:	22c5      	movs	r2, #197	; 0xc5
 800a4d6:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800a4d8:	2100      	movs	r1, #0
 800a4da:	68f8      	ldr	r0, [r7, #12]
 800a4dc:	f7ff fbad 	bl	8009c3a <SDIO_GetResponse>
 800a4e0:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800a4e2:	693b      	ldr	r3, [r7, #16]
 800a4e4:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800a4e8:	2b00      	cmp	r3, #0
 800a4ea:	d106      	bne.n	800a4fa <SDMMC_GetCmdResp6+0xb2>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800a4ec:	693b      	ldr	r3, [r7, #16]
 800a4ee:	0c1b      	lsrs	r3, r3, #16
 800a4f0:	b29a      	uxth	r2, r3
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800a4f6:	2300      	movs	r3, #0
 800a4f8:	e011      	b.n	800a51e <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800a4fa:	693b      	ldr	r3, [r7, #16]
 800a4fc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a500:	2b00      	cmp	r3, #0
 800a502:	d002      	beq.n	800a50a <SDMMC_GetCmdResp6+0xc2>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800a504:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800a508:	e009      	b.n	800a51e <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800a50a:	693b      	ldr	r3, [r7, #16]
 800a50c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a510:	2b00      	cmp	r3, #0
 800a512:	d002      	beq.n	800a51a <SDMMC_GetCmdResp6+0xd2>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800a514:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a518:	e001      	b.n	800a51e <SDMMC_GetCmdResp6+0xd6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800a51a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800a51e:	4618      	mov	r0, r3
 800a520:	371c      	adds	r7, #28
 800a522:	46bd      	mov	sp, r7
 800a524:	bd90      	pop	{r4, r7, pc}
 800a526:	bf00      	nop
 800a528:	20000000 	.word	0x20000000
 800a52c:	10624dd3 	.word	0x10624dd3

0800a530 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 800a530:	b490      	push	{r4, r7}
 800a532:	b084      	sub	sp, #16
 800a534:	af00      	add	r7, sp, #0
 800a536:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800a538:	4b21      	ldr	r3, [pc, #132]	; (800a5c0 <SDMMC_GetCmdResp7+0x90>)
 800a53a:	681b      	ldr	r3, [r3, #0]
 800a53c:	4a21      	ldr	r2, [pc, #132]	; (800a5c4 <SDMMC_GetCmdResp7+0x94>)
 800a53e:	fba2 2303 	umull	r2, r3, r2, r3
 800a542:	0a5b      	lsrs	r3, r3, #9
 800a544:	f241 3288 	movw	r2, #5000	; 0x1388
 800a548:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800a54c:	4623      	mov	r3, r4
 800a54e:	1e5c      	subs	r4, r3, #1
 800a550:	2b00      	cmp	r3, #0
 800a552:	d102      	bne.n	800a55a <SDMMC_GetCmdResp7+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a554:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a558:	e02c      	b.n	800a5b4 <SDMMC_GetCmdResp7+0x84>
    }
    sta_reg = SDIOx->STA;
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a55e:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800a560:	68fb      	ldr	r3, [r7, #12]
 800a562:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800a566:	2b00      	cmp	r3, #0
 800a568:	d0f0      	beq.n	800a54c <SDMMC_GetCmdResp7+0x1c>
 800a56a:	68fb      	ldr	r3, [r7, #12]
 800a56c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800a570:	2b00      	cmp	r3, #0
 800a572:	d1eb      	bne.n	800a54c <SDMMC_GetCmdResp7+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a578:	f003 0304 	and.w	r3, r3, #4
 800a57c:	2b00      	cmp	r3, #0
 800a57e:	d004      	beq.n	800a58a <SDMMC_GetCmdResp7+0x5a>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	2204      	movs	r2, #4
 800a584:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a586:	2304      	movs	r3, #4
 800a588:	e014      	b.n	800a5b4 <SDMMC_GetCmdResp7+0x84>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a58e:	f003 0301 	and.w	r3, r3, #1
 800a592:	2b00      	cmp	r3, #0
 800a594:	d004      	beq.n	800a5a0 <SDMMC_GetCmdResp7+0x70>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	2201      	movs	r2, #1
 800a59a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a59c:	2301      	movs	r3, #1
 800a59e:	e009      	b.n	800a5b4 <SDMMC_GetCmdResp7+0x84>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a5a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a5a8:	2b00      	cmp	r3, #0
 800a5aa:	d002      	beq.n	800a5b2 <SDMMC_GetCmdResp7+0x82>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	2240      	movs	r2, #64	; 0x40
 800a5b0:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800a5b2:	2300      	movs	r3, #0
  
}
 800a5b4:	4618      	mov	r0, r3
 800a5b6:	3710      	adds	r7, #16
 800a5b8:	46bd      	mov	sp, r7
 800a5ba:	bc90      	pop	{r4, r7}
 800a5bc:	4770      	bx	lr
 800a5be:	bf00      	nop
 800a5c0:	20000000 	.word	0x20000000
 800a5c4:	10624dd3 	.word	0x10624dd3

0800a5c8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800a5c8:	b084      	sub	sp, #16
 800a5ca:	b580      	push	{r7, lr}
 800a5cc:	b084      	sub	sp, #16
 800a5ce:	af00      	add	r7, sp, #0
 800a5d0:	6078      	str	r0, [r7, #4]
 800a5d2:	f107 001c 	add.w	r0, r7, #28
 800a5d6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800a5da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5dc:	2b01      	cmp	r3, #1
 800a5de:	d122      	bne.n	800a626 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a5e4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	68db      	ldr	r3, [r3, #12]
 800a5f0:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800a5f4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a5f8:	687a      	ldr	r2, [r7, #4]
 800a5fa:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	68db      	ldr	r3, [r3, #12]
 800a600:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800a608:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a60a:	2b01      	cmp	r3, #1
 800a60c:	d105      	bne.n	800a61a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800a60e:	687b      	ldr	r3, [r7, #4]
 800a610:	68db      	ldr	r3, [r3, #12]
 800a612:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 800a61a:	6878      	ldr	r0, [r7, #4]
 800a61c:	f001 fa7c 	bl	800bb18 <USB_CoreReset>
 800a620:	4603      	mov	r3, r0
 800a622:	73fb      	strb	r3, [r7, #15]
 800a624:	e01a      	b.n	800a65c <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	68db      	ldr	r3, [r3, #12]
 800a62a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 800a632:	6878      	ldr	r0, [r7, #4]
 800a634:	f001 fa70 	bl	800bb18 <USB_CoreReset>
 800a638:	4603      	mov	r3, r0
 800a63a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800a63c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a63e:	2b00      	cmp	r3, #0
 800a640:	d106      	bne.n	800a650 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800a642:	687b      	ldr	r3, [r7, #4]
 800a644:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a646:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	639a      	str	r2, [r3, #56]	; 0x38
 800a64e:	e005      	b.n	800a65c <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a654:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800a65c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a65e:	2b01      	cmp	r3, #1
 800a660:	d10b      	bne.n	800a67a <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	689b      	ldr	r3, [r3, #8]
 800a666:	f043 0206 	orr.w	r2, r3, #6
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	689b      	ldr	r3, [r3, #8]
 800a672:	f043 0220 	orr.w	r2, r3, #32
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800a67a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a67c:	4618      	mov	r0, r3
 800a67e:	3710      	adds	r7, #16
 800a680:	46bd      	mov	sp, r7
 800a682:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a686:	b004      	add	sp, #16
 800a688:	4770      	bx	lr
	...

0800a68c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800a68c:	b480      	push	{r7}
 800a68e:	b087      	sub	sp, #28
 800a690:	af00      	add	r7, sp, #0
 800a692:	60f8      	str	r0, [r7, #12]
 800a694:	60b9      	str	r1, [r7, #8]
 800a696:	4613      	mov	r3, r2
 800a698:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800a69a:	79fb      	ldrb	r3, [r7, #7]
 800a69c:	2b02      	cmp	r3, #2
 800a69e:	d165      	bne.n	800a76c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800a6a0:	68bb      	ldr	r3, [r7, #8]
 800a6a2:	4a41      	ldr	r2, [pc, #260]	; (800a7a8 <USB_SetTurnaroundTime+0x11c>)
 800a6a4:	4293      	cmp	r3, r2
 800a6a6:	d906      	bls.n	800a6b6 <USB_SetTurnaroundTime+0x2a>
 800a6a8:	68bb      	ldr	r3, [r7, #8]
 800a6aa:	4a40      	ldr	r2, [pc, #256]	; (800a7ac <USB_SetTurnaroundTime+0x120>)
 800a6ac:	4293      	cmp	r3, r2
 800a6ae:	d802      	bhi.n	800a6b6 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800a6b0:	230f      	movs	r3, #15
 800a6b2:	617b      	str	r3, [r7, #20]
 800a6b4:	e062      	b.n	800a77c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800a6b6:	68bb      	ldr	r3, [r7, #8]
 800a6b8:	4a3c      	ldr	r2, [pc, #240]	; (800a7ac <USB_SetTurnaroundTime+0x120>)
 800a6ba:	4293      	cmp	r3, r2
 800a6bc:	d906      	bls.n	800a6cc <USB_SetTurnaroundTime+0x40>
 800a6be:	68bb      	ldr	r3, [r7, #8]
 800a6c0:	4a3b      	ldr	r2, [pc, #236]	; (800a7b0 <USB_SetTurnaroundTime+0x124>)
 800a6c2:	4293      	cmp	r3, r2
 800a6c4:	d802      	bhi.n	800a6cc <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800a6c6:	230e      	movs	r3, #14
 800a6c8:	617b      	str	r3, [r7, #20]
 800a6ca:	e057      	b.n	800a77c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800a6cc:	68bb      	ldr	r3, [r7, #8]
 800a6ce:	4a38      	ldr	r2, [pc, #224]	; (800a7b0 <USB_SetTurnaroundTime+0x124>)
 800a6d0:	4293      	cmp	r3, r2
 800a6d2:	d906      	bls.n	800a6e2 <USB_SetTurnaroundTime+0x56>
 800a6d4:	68bb      	ldr	r3, [r7, #8]
 800a6d6:	4a37      	ldr	r2, [pc, #220]	; (800a7b4 <USB_SetTurnaroundTime+0x128>)
 800a6d8:	4293      	cmp	r3, r2
 800a6da:	d802      	bhi.n	800a6e2 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800a6dc:	230d      	movs	r3, #13
 800a6de:	617b      	str	r3, [r7, #20]
 800a6e0:	e04c      	b.n	800a77c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800a6e2:	68bb      	ldr	r3, [r7, #8]
 800a6e4:	4a33      	ldr	r2, [pc, #204]	; (800a7b4 <USB_SetTurnaroundTime+0x128>)
 800a6e6:	4293      	cmp	r3, r2
 800a6e8:	d906      	bls.n	800a6f8 <USB_SetTurnaroundTime+0x6c>
 800a6ea:	68bb      	ldr	r3, [r7, #8]
 800a6ec:	4a32      	ldr	r2, [pc, #200]	; (800a7b8 <USB_SetTurnaroundTime+0x12c>)
 800a6ee:	4293      	cmp	r3, r2
 800a6f0:	d802      	bhi.n	800a6f8 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800a6f2:	230c      	movs	r3, #12
 800a6f4:	617b      	str	r3, [r7, #20]
 800a6f6:	e041      	b.n	800a77c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800a6f8:	68bb      	ldr	r3, [r7, #8]
 800a6fa:	4a2f      	ldr	r2, [pc, #188]	; (800a7b8 <USB_SetTurnaroundTime+0x12c>)
 800a6fc:	4293      	cmp	r3, r2
 800a6fe:	d906      	bls.n	800a70e <USB_SetTurnaroundTime+0x82>
 800a700:	68bb      	ldr	r3, [r7, #8]
 800a702:	4a2e      	ldr	r2, [pc, #184]	; (800a7bc <USB_SetTurnaroundTime+0x130>)
 800a704:	4293      	cmp	r3, r2
 800a706:	d802      	bhi.n	800a70e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800a708:	230b      	movs	r3, #11
 800a70a:	617b      	str	r3, [r7, #20]
 800a70c:	e036      	b.n	800a77c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800a70e:	68bb      	ldr	r3, [r7, #8]
 800a710:	4a2a      	ldr	r2, [pc, #168]	; (800a7bc <USB_SetTurnaroundTime+0x130>)
 800a712:	4293      	cmp	r3, r2
 800a714:	d906      	bls.n	800a724 <USB_SetTurnaroundTime+0x98>
 800a716:	68bb      	ldr	r3, [r7, #8]
 800a718:	4a29      	ldr	r2, [pc, #164]	; (800a7c0 <USB_SetTurnaroundTime+0x134>)
 800a71a:	4293      	cmp	r3, r2
 800a71c:	d802      	bhi.n	800a724 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800a71e:	230a      	movs	r3, #10
 800a720:	617b      	str	r3, [r7, #20]
 800a722:	e02b      	b.n	800a77c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800a724:	68bb      	ldr	r3, [r7, #8]
 800a726:	4a26      	ldr	r2, [pc, #152]	; (800a7c0 <USB_SetTurnaroundTime+0x134>)
 800a728:	4293      	cmp	r3, r2
 800a72a:	d906      	bls.n	800a73a <USB_SetTurnaroundTime+0xae>
 800a72c:	68bb      	ldr	r3, [r7, #8]
 800a72e:	4a25      	ldr	r2, [pc, #148]	; (800a7c4 <USB_SetTurnaroundTime+0x138>)
 800a730:	4293      	cmp	r3, r2
 800a732:	d802      	bhi.n	800a73a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800a734:	2309      	movs	r3, #9
 800a736:	617b      	str	r3, [r7, #20]
 800a738:	e020      	b.n	800a77c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800a73a:	68bb      	ldr	r3, [r7, #8]
 800a73c:	4a21      	ldr	r2, [pc, #132]	; (800a7c4 <USB_SetTurnaroundTime+0x138>)
 800a73e:	4293      	cmp	r3, r2
 800a740:	d906      	bls.n	800a750 <USB_SetTurnaroundTime+0xc4>
 800a742:	68bb      	ldr	r3, [r7, #8]
 800a744:	4a20      	ldr	r2, [pc, #128]	; (800a7c8 <USB_SetTurnaroundTime+0x13c>)
 800a746:	4293      	cmp	r3, r2
 800a748:	d802      	bhi.n	800a750 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800a74a:	2308      	movs	r3, #8
 800a74c:	617b      	str	r3, [r7, #20]
 800a74e:	e015      	b.n	800a77c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800a750:	68bb      	ldr	r3, [r7, #8]
 800a752:	4a1d      	ldr	r2, [pc, #116]	; (800a7c8 <USB_SetTurnaroundTime+0x13c>)
 800a754:	4293      	cmp	r3, r2
 800a756:	d906      	bls.n	800a766 <USB_SetTurnaroundTime+0xda>
 800a758:	68bb      	ldr	r3, [r7, #8]
 800a75a:	4a1c      	ldr	r2, [pc, #112]	; (800a7cc <USB_SetTurnaroundTime+0x140>)
 800a75c:	4293      	cmp	r3, r2
 800a75e:	d802      	bhi.n	800a766 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800a760:	2307      	movs	r3, #7
 800a762:	617b      	str	r3, [r7, #20]
 800a764:	e00a      	b.n	800a77c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800a766:	2306      	movs	r3, #6
 800a768:	617b      	str	r3, [r7, #20]
 800a76a:	e007      	b.n	800a77c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800a76c:	79fb      	ldrb	r3, [r7, #7]
 800a76e:	2b00      	cmp	r3, #0
 800a770:	d102      	bne.n	800a778 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800a772:	2309      	movs	r3, #9
 800a774:	617b      	str	r3, [r7, #20]
 800a776:	e001      	b.n	800a77c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800a778:	2309      	movs	r3, #9
 800a77a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800a77c:	68fb      	ldr	r3, [r7, #12]
 800a77e:	68db      	ldr	r3, [r3, #12]
 800a780:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800a784:	68fb      	ldr	r3, [r7, #12]
 800a786:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800a788:	68fb      	ldr	r3, [r7, #12]
 800a78a:	68da      	ldr	r2, [r3, #12]
 800a78c:	697b      	ldr	r3, [r7, #20]
 800a78e:	029b      	lsls	r3, r3, #10
 800a790:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800a794:	431a      	orrs	r2, r3
 800a796:	68fb      	ldr	r3, [r7, #12]
 800a798:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800a79a:	2300      	movs	r3, #0
}
 800a79c:	4618      	mov	r0, r3
 800a79e:	371c      	adds	r7, #28
 800a7a0:	46bd      	mov	sp, r7
 800a7a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7a6:	4770      	bx	lr
 800a7a8:	00d8acbf 	.word	0x00d8acbf
 800a7ac:	00e4e1bf 	.word	0x00e4e1bf
 800a7b0:	00f423ff 	.word	0x00f423ff
 800a7b4:	0106737f 	.word	0x0106737f
 800a7b8:	011a499f 	.word	0x011a499f
 800a7bc:	01312cff 	.word	0x01312cff
 800a7c0:	014ca43f 	.word	0x014ca43f
 800a7c4:	016e35ff 	.word	0x016e35ff
 800a7c8:	01a6ab1f 	.word	0x01a6ab1f
 800a7cc:	01e847ff 	.word	0x01e847ff

0800a7d0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800a7d0:	b480      	push	{r7}
 800a7d2:	b083      	sub	sp, #12
 800a7d4:	af00      	add	r7, sp, #0
 800a7d6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	689b      	ldr	r3, [r3, #8]
 800a7dc:	f043 0201 	orr.w	r2, r3, #1
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800a7e4:	2300      	movs	r3, #0
}
 800a7e6:	4618      	mov	r0, r3
 800a7e8:	370c      	adds	r7, #12
 800a7ea:	46bd      	mov	sp, r7
 800a7ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7f0:	4770      	bx	lr

0800a7f2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800a7f2:	b480      	push	{r7}
 800a7f4:	b083      	sub	sp, #12
 800a7f6:	af00      	add	r7, sp, #0
 800a7f8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	689b      	ldr	r3, [r3, #8]
 800a7fe:	f023 0201 	bic.w	r2, r3, #1
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800a806:	2300      	movs	r3, #0
}
 800a808:	4618      	mov	r0, r3
 800a80a:	370c      	adds	r7, #12
 800a80c:	46bd      	mov	sp, r7
 800a80e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a812:	4770      	bx	lr

0800a814 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800a814:	b580      	push	{r7, lr}
 800a816:	b082      	sub	sp, #8
 800a818:	af00      	add	r7, sp, #0
 800a81a:	6078      	str	r0, [r7, #4]
 800a81c:	460b      	mov	r3, r1
 800a81e:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	68db      	ldr	r3, [r3, #12]
 800a824:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800a82c:	78fb      	ldrb	r3, [r7, #3]
 800a82e:	2b01      	cmp	r3, #1
 800a830:	d106      	bne.n	800a840 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	68db      	ldr	r3, [r3, #12]
 800a836:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	60da      	str	r2, [r3, #12]
 800a83e:	e00b      	b.n	800a858 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 800a840:	78fb      	ldrb	r3, [r7, #3]
 800a842:	2b00      	cmp	r3, #0
 800a844:	d106      	bne.n	800a854 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	68db      	ldr	r3, [r3, #12]
 800a84a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	60da      	str	r2, [r3, #12]
 800a852:	e001      	b.n	800a858 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800a854:	2301      	movs	r3, #1
 800a856:	e003      	b.n	800a860 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800a858:	2032      	movs	r0, #50	; 0x32
 800a85a:	f7f9 f9cd 	bl	8003bf8 <HAL_Delay>

  return HAL_OK;
 800a85e:	2300      	movs	r3, #0
}
 800a860:	4618      	mov	r0, r3
 800a862:	3708      	adds	r7, #8
 800a864:	46bd      	mov	sp, r7
 800a866:	bd80      	pop	{r7, pc}

0800a868 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800a868:	b084      	sub	sp, #16
 800a86a:	b580      	push	{r7, lr}
 800a86c:	b086      	sub	sp, #24
 800a86e:	af00      	add	r7, sp, #0
 800a870:	6078      	str	r0, [r7, #4]
 800a872:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800a876:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800a87a:	2300      	movs	r3, #0
 800a87c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800a882:	2300      	movs	r3, #0
 800a884:	613b      	str	r3, [r7, #16]
 800a886:	e009      	b.n	800a89c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800a888:	687a      	ldr	r2, [r7, #4]
 800a88a:	693b      	ldr	r3, [r7, #16]
 800a88c:	3340      	adds	r3, #64	; 0x40
 800a88e:	009b      	lsls	r3, r3, #2
 800a890:	4413      	add	r3, r2
 800a892:	2200      	movs	r2, #0
 800a894:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800a896:	693b      	ldr	r3, [r7, #16]
 800a898:	3301      	adds	r3, #1
 800a89a:	613b      	str	r3, [r7, #16]
 800a89c:	693b      	ldr	r3, [r7, #16]
 800a89e:	2b0e      	cmp	r3, #14
 800a8a0:	d9f2      	bls.n	800a888 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800a8a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a8a4:	2b00      	cmp	r3, #0
 800a8a6:	d112      	bne.n	800a8ce <USB_DevInit+0x66>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a8ac:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a8b8:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a8c4:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	639a      	str	r2, [r3, #56]	; 0x38
 800a8cc:	e00b      	b.n	800a8e6 <USB_DevInit+0x7e>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GOTGCTL &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800a8ce:	687b      	ldr	r3, [r7, #4]
 800a8d0:	681b      	ldr	r3, [r3, #0]
 800a8d2:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	601a      	str	r2, [r3, #0]
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a8de:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800a8e6:	68fb      	ldr	r3, [r7, #12]
 800a8e8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a8ec:	461a      	mov	r2, r3
 800a8ee:	2300      	movs	r3, #0
 800a8f0:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800a8f2:	68fb      	ldr	r3, [r7, #12]
 800a8f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a8f8:	4619      	mov	r1, r3
 800a8fa:	68fb      	ldr	r3, [r7, #12]
 800a8fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a900:	461a      	mov	r2, r3
 800a902:	680b      	ldr	r3, [r1, #0]
 800a904:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800a906:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a908:	2b01      	cmp	r3, #1
 800a90a:	d10c      	bne.n	800a926 <USB_DevInit+0xbe>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800a90c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a90e:	2b00      	cmp	r3, #0
 800a910:	d104      	bne.n	800a91c <USB_DevInit+0xb4>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800a912:	2100      	movs	r1, #0
 800a914:	6878      	ldr	r0, [r7, #4]
 800a916:	f000 f961 	bl	800abdc <USB_SetDevSpeed>
 800a91a:	e008      	b.n	800a92e <USB_DevInit+0xc6>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800a91c:	2101      	movs	r1, #1
 800a91e:	6878      	ldr	r0, [r7, #4]
 800a920:	f000 f95c 	bl	800abdc <USB_SetDevSpeed>
 800a924:	e003      	b.n	800a92e <USB_DevInit+0xc6>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800a926:	2103      	movs	r1, #3
 800a928:	6878      	ldr	r0, [r7, #4]
 800a92a:	f000 f957 	bl	800abdc <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800a92e:	2110      	movs	r1, #16
 800a930:	6878      	ldr	r0, [r7, #4]
 800a932:	f000 f90b 	bl	800ab4c <USB_FlushTxFifo>
 800a936:	4603      	mov	r3, r0
 800a938:	2b00      	cmp	r3, #0
 800a93a:	d001      	beq.n	800a940 <USB_DevInit+0xd8>
  {
    ret = HAL_ERROR;
 800a93c:	2301      	movs	r3, #1
 800a93e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800a940:	6878      	ldr	r0, [r7, #4]
 800a942:	f000 f929 	bl	800ab98 <USB_FlushRxFifo>
 800a946:	4603      	mov	r3, r0
 800a948:	2b00      	cmp	r3, #0
 800a94a:	d001      	beq.n	800a950 <USB_DevInit+0xe8>
  {
    ret = HAL_ERROR;
 800a94c:	2301      	movs	r3, #1
 800a94e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800a950:	68fb      	ldr	r3, [r7, #12]
 800a952:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a956:	461a      	mov	r2, r3
 800a958:	2300      	movs	r3, #0
 800a95a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800a95c:	68fb      	ldr	r3, [r7, #12]
 800a95e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a962:	461a      	mov	r2, r3
 800a964:	2300      	movs	r3, #0
 800a966:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800a968:	68fb      	ldr	r3, [r7, #12]
 800a96a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a96e:	461a      	mov	r2, r3
 800a970:	2300      	movs	r3, #0
 800a972:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a974:	2300      	movs	r3, #0
 800a976:	613b      	str	r3, [r7, #16]
 800a978:	e043      	b.n	800aa02 <USB_DevInit+0x19a>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800a97a:	693b      	ldr	r3, [r7, #16]
 800a97c:	015a      	lsls	r2, r3, #5
 800a97e:	68fb      	ldr	r3, [r7, #12]
 800a980:	4413      	add	r3, r2
 800a982:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a986:	681b      	ldr	r3, [r3, #0]
 800a988:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a98c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a990:	d118      	bne.n	800a9c4 <USB_DevInit+0x15c>
    {
      if (i == 0U)
 800a992:	693b      	ldr	r3, [r7, #16]
 800a994:	2b00      	cmp	r3, #0
 800a996:	d10a      	bne.n	800a9ae <USB_DevInit+0x146>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800a998:	693b      	ldr	r3, [r7, #16]
 800a99a:	015a      	lsls	r2, r3, #5
 800a99c:	68fb      	ldr	r3, [r7, #12]
 800a99e:	4413      	add	r3, r2
 800a9a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a9a4:	461a      	mov	r2, r3
 800a9a6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800a9aa:	6013      	str	r3, [r2, #0]
 800a9ac:	e013      	b.n	800a9d6 <USB_DevInit+0x16e>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800a9ae:	693b      	ldr	r3, [r7, #16]
 800a9b0:	015a      	lsls	r2, r3, #5
 800a9b2:	68fb      	ldr	r3, [r7, #12]
 800a9b4:	4413      	add	r3, r2
 800a9b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a9ba:	461a      	mov	r2, r3
 800a9bc:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800a9c0:	6013      	str	r3, [r2, #0]
 800a9c2:	e008      	b.n	800a9d6 <USB_DevInit+0x16e>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800a9c4:	693b      	ldr	r3, [r7, #16]
 800a9c6:	015a      	lsls	r2, r3, #5
 800a9c8:	68fb      	ldr	r3, [r7, #12]
 800a9ca:	4413      	add	r3, r2
 800a9cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a9d0:	461a      	mov	r2, r3
 800a9d2:	2300      	movs	r3, #0
 800a9d4:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800a9d6:	693b      	ldr	r3, [r7, #16]
 800a9d8:	015a      	lsls	r2, r3, #5
 800a9da:	68fb      	ldr	r3, [r7, #12]
 800a9dc:	4413      	add	r3, r2
 800a9de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a9e2:	461a      	mov	r2, r3
 800a9e4:	2300      	movs	r3, #0
 800a9e6:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800a9e8:	693b      	ldr	r3, [r7, #16]
 800a9ea:	015a      	lsls	r2, r3, #5
 800a9ec:	68fb      	ldr	r3, [r7, #12]
 800a9ee:	4413      	add	r3, r2
 800a9f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a9f4:	461a      	mov	r2, r3
 800a9f6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800a9fa:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a9fc:	693b      	ldr	r3, [r7, #16]
 800a9fe:	3301      	adds	r3, #1
 800aa00:	613b      	str	r3, [r7, #16]
 800aa02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa04:	693a      	ldr	r2, [r7, #16]
 800aa06:	429a      	cmp	r2, r3
 800aa08:	d3b7      	bcc.n	800a97a <USB_DevInit+0x112>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800aa0a:	2300      	movs	r3, #0
 800aa0c:	613b      	str	r3, [r7, #16]
 800aa0e:	e043      	b.n	800aa98 <USB_DevInit+0x230>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800aa10:	693b      	ldr	r3, [r7, #16]
 800aa12:	015a      	lsls	r2, r3, #5
 800aa14:	68fb      	ldr	r3, [r7, #12]
 800aa16:	4413      	add	r3, r2
 800aa18:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aa1c:	681b      	ldr	r3, [r3, #0]
 800aa1e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800aa22:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800aa26:	d118      	bne.n	800aa5a <USB_DevInit+0x1f2>
    {
      if (i == 0U)
 800aa28:	693b      	ldr	r3, [r7, #16]
 800aa2a:	2b00      	cmp	r3, #0
 800aa2c:	d10a      	bne.n	800aa44 <USB_DevInit+0x1dc>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800aa2e:	693b      	ldr	r3, [r7, #16]
 800aa30:	015a      	lsls	r2, r3, #5
 800aa32:	68fb      	ldr	r3, [r7, #12]
 800aa34:	4413      	add	r3, r2
 800aa36:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aa3a:	461a      	mov	r2, r3
 800aa3c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800aa40:	6013      	str	r3, [r2, #0]
 800aa42:	e013      	b.n	800aa6c <USB_DevInit+0x204>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800aa44:	693b      	ldr	r3, [r7, #16]
 800aa46:	015a      	lsls	r2, r3, #5
 800aa48:	68fb      	ldr	r3, [r7, #12]
 800aa4a:	4413      	add	r3, r2
 800aa4c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aa50:	461a      	mov	r2, r3
 800aa52:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800aa56:	6013      	str	r3, [r2, #0]
 800aa58:	e008      	b.n	800aa6c <USB_DevInit+0x204>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800aa5a:	693b      	ldr	r3, [r7, #16]
 800aa5c:	015a      	lsls	r2, r3, #5
 800aa5e:	68fb      	ldr	r3, [r7, #12]
 800aa60:	4413      	add	r3, r2
 800aa62:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aa66:	461a      	mov	r2, r3
 800aa68:	2300      	movs	r3, #0
 800aa6a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800aa6c:	693b      	ldr	r3, [r7, #16]
 800aa6e:	015a      	lsls	r2, r3, #5
 800aa70:	68fb      	ldr	r3, [r7, #12]
 800aa72:	4413      	add	r3, r2
 800aa74:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aa78:	461a      	mov	r2, r3
 800aa7a:	2300      	movs	r3, #0
 800aa7c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800aa7e:	693b      	ldr	r3, [r7, #16]
 800aa80:	015a      	lsls	r2, r3, #5
 800aa82:	68fb      	ldr	r3, [r7, #12]
 800aa84:	4413      	add	r3, r2
 800aa86:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aa8a:	461a      	mov	r2, r3
 800aa8c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800aa90:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800aa92:	693b      	ldr	r3, [r7, #16]
 800aa94:	3301      	adds	r3, #1
 800aa96:	613b      	str	r3, [r7, #16]
 800aa98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa9a:	693a      	ldr	r2, [r7, #16]
 800aa9c:	429a      	cmp	r2, r3
 800aa9e:	d3b7      	bcc.n	800aa10 <USB_DevInit+0x1a8>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800aaa0:	68fb      	ldr	r3, [r7, #12]
 800aaa2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800aaa6:	691b      	ldr	r3, [r3, #16]
 800aaa8:	68fa      	ldr	r2, [r7, #12]
 800aaaa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800aaae:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800aab2:	6113      	str	r3, [r2, #16]

  if (cfg.dma_enable == 1U)
 800aab4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aab6:	2b01      	cmp	r3, #1
 800aab8:	d111      	bne.n	800aade <USB_DevInit+0x276>
  {
    /*Set threshold parameters */
    USBx_DEVICE->DTHRCTL = USB_OTG_DTHRCTL_TXTHRLEN_6 |
 800aaba:	68fb      	ldr	r3, [r7, #12]
 800aabc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800aac0:	461a      	mov	r2, r3
 800aac2:	4b20      	ldr	r3, [pc, #128]	; (800ab44 <USB_DevInit+0x2dc>)
 800aac4:	6313      	str	r3, [r2, #48]	; 0x30
                           USB_OTG_DTHRCTL_RXTHRLEN_6;

    USBx_DEVICE->DTHRCTL |= USB_OTG_DTHRCTL_RXTHREN |
 800aac6:	68fb      	ldr	r3, [r7, #12]
 800aac8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800aacc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aace:	68fa      	ldr	r2, [r7, #12]
 800aad0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800aad4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800aad8:	f043 0303 	orr.w	r3, r3, #3
 800aadc:	6313      	str	r3, [r2, #48]	; 0x30
                            USB_OTG_DTHRCTL_ISOTHREN |
                            USB_OTG_DTHRCTL_NONISOTHREN;
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	2200      	movs	r2, #0
 800aae2:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800aaea:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800aaec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aaee:	2b00      	cmp	r3, #0
 800aaf0:	d105      	bne.n	800aafe <USB_DevInit+0x296>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800aaf2:	687b      	ldr	r3, [r7, #4]
 800aaf4:	699b      	ldr	r3, [r3, #24]
 800aaf6:	f043 0210 	orr.w	r2, r3, #16
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800aafe:	687b      	ldr	r3, [r7, #4]
 800ab00:	699a      	ldr	r2, [r3, #24]
 800ab02:	4b11      	ldr	r3, [pc, #68]	; (800ab48 <USB_DevInit+0x2e0>)
 800ab04:	4313      	orrs	r3, r2
 800ab06:	687a      	ldr	r2, [r7, #4]
 800ab08:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800ab0a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ab0c:	2b00      	cmp	r3, #0
 800ab0e:	d005      	beq.n	800ab1c <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	699b      	ldr	r3, [r3, #24]
 800ab14:	f043 0208 	orr.w	r2, r3, #8
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800ab1c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ab1e:	2b01      	cmp	r3, #1
 800ab20:	d107      	bne.n	800ab32 <USB_DevInit+0x2ca>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800ab22:	687b      	ldr	r3, [r7, #4]
 800ab24:	699b      	ldr	r3, [r3, #24]
 800ab26:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800ab2a:	f043 0304 	orr.w	r3, r3, #4
 800ab2e:	687a      	ldr	r2, [r7, #4]
 800ab30:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800ab32:	7dfb      	ldrb	r3, [r7, #23]
}
 800ab34:	4618      	mov	r0, r3
 800ab36:	3718      	adds	r7, #24
 800ab38:	46bd      	mov	sp, r7
 800ab3a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800ab3e:	b004      	add	sp, #16
 800ab40:	4770      	bx	lr
 800ab42:	bf00      	nop
 800ab44:	00800100 	.word	0x00800100
 800ab48:	803c3800 	.word	0x803c3800

0800ab4c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800ab4c:	b480      	push	{r7}
 800ab4e:	b085      	sub	sp, #20
 800ab50:	af00      	add	r7, sp, #0
 800ab52:	6078      	str	r0, [r7, #4]
 800ab54:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800ab56:	2300      	movs	r3, #0
 800ab58:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800ab5a:	683b      	ldr	r3, [r7, #0]
 800ab5c:	019b      	lsls	r3, r3, #6
 800ab5e:	f043 0220 	orr.w	r2, r3, #32
 800ab62:	687b      	ldr	r3, [r7, #4]
 800ab64:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800ab66:	68fb      	ldr	r3, [r7, #12]
 800ab68:	3301      	adds	r3, #1
 800ab6a:	60fb      	str	r3, [r7, #12]
 800ab6c:	68fb      	ldr	r3, [r7, #12]
 800ab6e:	4a09      	ldr	r2, [pc, #36]	; (800ab94 <USB_FlushTxFifo+0x48>)
 800ab70:	4293      	cmp	r3, r2
 800ab72:	d901      	bls.n	800ab78 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 800ab74:	2303      	movs	r3, #3
 800ab76:	e006      	b.n	800ab86 <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	691b      	ldr	r3, [r3, #16]
 800ab7c:	f003 0320 	and.w	r3, r3, #32
 800ab80:	2b20      	cmp	r3, #32
 800ab82:	d0f0      	beq.n	800ab66 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800ab84:	2300      	movs	r3, #0
}
 800ab86:	4618      	mov	r0, r3
 800ab88:	3714      	adds	r7, #20
 800ab8a:	46bd      	mov	sp, r7
 800ab8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab90:	4770      	bx	lr
 800ab92:	bf00      	nop
 800ab94:	00030d40 	.word	0x00030d40

0800ab98 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800ab98:	b480      	push	{r7}
 800ab9a:	b085      	sub	sp, #20
 800ab9c:	af00      	add	r7, sp, #0
 800ab9e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800aba0:	2300      	movs	r3, #0
 800aba2:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	2210      	movs	r2, #16
 800aba8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800abaa:	68fb      	ldr	r3, [r7, #12]
 800abac:	3301      	adds	r3, #1
 800abae:	60fb      	str	r3, [r7, #12]
 800abb0:	68fb      	ldr	r3, [r7, #12]
 800abb2:	4a09      	ldr	r2, [pc, #36]	; (800abd8 <USB_FlushRxFifo+0x40>)
 800abb4:	4293      	cmp	r3, r2
 800abb6:	d901      	bls.n	800abbc <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800abb8:	2303      	movs	r3, #3
 800abba:	e006      	b.n	800abca <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	691b      	ldr	r3, [r3, #16]
 800abc0:	f003 0310 	and.w	r3, r3, #16
 800abc4:	2b10      	cmp	r3, #16
 800abc6:	d0f0      	beq.n	800abaa <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800abc8:	2300      	movs	r3, #0
}
 800abca:	4618      	mov	r0, r3
 800abcc:	3714      	adds	r7, #20
 800abce:	46bd      	mov	sp, r7
 800abd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abd4:	4770      	bx	lr
 800abd6:	bf00      	nop
 800abd8:	00030d40 	.word	0x00030d40

0800abdc <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800abdc:	b480      	push	{r7}
 800abde:	b085      	sub	sp, #20
 800abe0:	af00      	add	r7, sp, #0
 800abe2:	6078      	str	r0, [r7, #4]
 800abe4:	460b      	mov	r3, r1
 800abe6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800abec:	68fb      	ldr	r3, [r7, #12]
 800abee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800abf2:	681a      	ldr	r2, [r3, #0]
 800abf4:	78fb      	ldrb	r3, [r7, #3]
 800abf6:	68f9      	ldr	r1, [r7, #12]
 800abf8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800abfc:	4313      	orrs	r3, r2
 800abfe:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800ac00:	2300      	movs	r3, #0
}
 800ac02:	4618      	mov	r0, r3
 800ac04:	3714      	adds	r7, #20
 800ac06:	46bd      	mov	sp, r7
 800ac08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac0c:	4770      	bx	lr

0800ac0e <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_HIGH: High speed mode
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800ac0e:	b480      	push	{r7}
 800ac10:	b087      	sub	sp, #28
 800ac12:	af00      	add	r7, sp, #0
 800ac14:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800ac1a:	693b      	ldr	r3, [r7, #16]
 800ac1c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ac20:	689b      	ldr	r3, [r3, #8]
 800ac22:	f003 0306 	and.w	r3, r3, #6
 800ac26:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800ac28:	68fb      	ldr	r3, [r7, #12]
 800ac2a:	2b00      	cmp	r3, #0
 800ac2c:	d102      	bne.n	800ac34 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800ac2e:	2300      	movs	r3, #0
 800ac30:	75fb      	strb	r3, [r7, #23]
 800ac32:	e00a      	b.n	800ac4a <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800ac34:	68fb      	ldr	r3, [r7, #12]
 800ac36:	2b02      	cmp	r3, #2
 800ac38:	d002      	beq.n	800ac40 <USB_GetDevSpeed+0x32>
 800ac3a:	68fb      	ldr	r3, [r7, #12]
 800ac3c:	2b06      	cmp	r3, #6
 800ac3e:	d102      	bne.n	800ac46 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800ac40:	2302      	movs	r3, #2
 800ac42:	75fb      	strb	r3, [r7, #23]
 800ac44:	e001      	b.n	800ac4a <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800ac46:	230f      	movs	r3, #15
 800ac48:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800ac4a:	7dfb      	ldrb	r3, [r7, #23]
}
 800ac4c:	4618      	mov	r0, r3
 800ac4e:	371c      	adds	r7, #28
 800ac50:	46bd      	mov	sp, r7
 800ac52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac56:	4770      	bx	lr

0800ac58 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800ac58:	b480      	push	{r7}
 800ac5a:	b085      	sub	sp, #20
 800ac5c:	af00      	add	r7, sp, #0
 800ac5e:	6078      	str	r0, [r7, #4]
 800ac60:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800ac66:	683b      	ldr	r3, [r7, #0]
 800ac68:	781b      	ldrb	r3, [r3, #0]
 800ac6a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800ac6c:	683b      	ldr	r3, [r7, #0]
 800ac6e:	785b      	ldrb	r3, [r3, #1]
 800ac70:	2b01      	cmp	r3, #1
 800ac72:	d13a      	bne.n	800acea <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800ac74:	68fb      	ldr	r3, [r7, #12]
 800ac76:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ac7a:	69da      	ldr	r2, [r3, #28]
 800ac7c:	683b      	ldr	r3, [r7, #0]
 800ac7e:	781b      	ldrb	r3, [r3, #0]
 800ac80:	f003 030f 	and.w	r3, r3, #15
 800ac84:	2101      	movs	r1, #1
 800ac86:	fa01 f303 	lsl.w	r3, r1, r3
 800ac8a:	b29b      	uxth	r3, r3
 800ac8c:	68f9      	ldr	r1, [r7, #12]
 800ac8e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ac92:	4313      	orrs	r3, r2
 800ac94:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800ac96:	68bb      	ldr	r3, [r7, #8]
 800ac98:	015a      	lsls	r2, r3, #5
 800ac9a:	68fb      	ldr	r3, [r7, #12]
 800ac9c:	4413      	add	r3, r2
 800ac9e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aca2:	681b      	ldr	r3, [r3, #0]
 800aca4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800aca8:	2b00      	cmp	r3, #0
 800acaa:	d155      	bne.n	800ad58 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800acac:	68bb      	ldr	r3, [r7, #8]
 800acae:	015a      	lsls	r2, r3, #5
 800acb0:	68fb      	ldr	r3, [r7, #12]
 800acb2:	4413      	add	r3, r2
 800acb4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800acb8:	681a      	ldr	r2, [r3, #0]
 800acba:	683b      	ldr	r3, [r7, #0]
 800acbc:	689b      	ldr	r3, [r3, #8]
 800acbe:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800acc2:	683b      	ldr	r3, [r7, #0]
 800acc4:	78db      	ldrb	r3, [r3, #3]
 800acc6:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800acc8:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800acca:	68bb      	ldr	r3, [r7, #8]
 800accc:	059b      	lsls	r3, r3, #22
 800acce:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800acd0:	4313      	orrs	r3, r2
 800acd2:	68ba      	ldr	r2, [r7, #8]
 800acd4:	0151      	lsls	r1, r2, #5
 800acd6:	68fa      	ldr	r2, [r7, #12]
 800acd8:	440a      	add	r2, r1
 800acda:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800acde:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ace2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ace6:	6013      	str	r3, [r2, #0]
 800ace8:	e036      	b.n	800ad58 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800acea:	68fb      	ldr	r3, [r7, #12]
 800acec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800acf0:	69da      	ldr	r2, [r3, #28]
 800acf2:	683b      	ldr	r3, [r7, #0]
 800acf4:	781b      	ldrb	r3, [r3, #0]
 800acf6:	f003 030f 	and.w	r3, r3, #15
 800acfa:	2101      	movs	r1, #1
 800acfc:	fa01 f303 	lsl.w	r3, r1, r3
 800ad00:	041b      	lsls	r3, r3, #16
 800ad02:	68f9      	ldr	r1, [r7, #12]
 800ad04:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ad08:	4313      	orrs	r3, r2
 800ad0a:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800ad0c:	68bb      	ldr	r3, [r7, #8]
 800ad0e:	015a      	lsls	r2, r3, #5
 800ad10:	68fb      	ldr	r3, [r7, #12]
 800ad12:	4413      	add	r3, r2
 800ad14:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ad18:	681b      	ldr	r3, [r3, #0]
 800ad1a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800ad1e:	2b00      	cmp	r3, #0
 800ad20:	d11a      	bne.n	800ad58 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800ad22:	68bb      	ldr	r3, [r7, #8]
 800ad24:	015a      	lsls	r2, r3, #5
 800ad26:	68fb      	ldr	r3, [r7, #12]
 800ad28:	4413      	add	r3, r2
 800ad2a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ad2e:	681a      	ldr	r2, [r3, #0]
 800ad30:	683b      	ldr	r3, [r7, #0]
 800ad32:	689b      	ldr	r3, [r3, #8]
 800ad34:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800ad38:	683b      	ldr	r3, [r7, #0]
 800ad3a:	78db      	ldrb	r3, [r3, #3]
 800ad3c:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800ad3e:	430b      	orrs	r3, r1
 800ad40:	4313      	orrs	r3, r2
 800ad42:	68ba      	ldr	r2, [r7, #8]
 800ad44:	0151      	lsls	r1, r2, #5
 800ad46:	68fa      	ldr	r2, [r7, #12]
 800ad48:	440a      	add	r2, r1
 800ad4a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ad4e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ad52:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ad56:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800ad58:	2300      	movs	r3, #0
}
 800ad5a:	4618      	mov	r0, r3
 800ad5c:	3714      	adds	r7, #20
 800ad5e:	46bd      	mov	sp, r7
 800ad60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad64:	4770      	bx	lr
	...

0800ad68 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800ad68:	b480      	push	{r7}
 800ad6a:	b085      	sub	sp, #20
 800ad6c:	af00      	add	r7, sp, #0
 800ad6e:	6078      	str	r0, [r7, #4]
 800ad70:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ad72:	687b      	ldr	r3, [r7, #4]
 800ad74:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800ad76:	683b      	ldr	r3, [r7, #0]
 800ad78:	781b      	ldrb	r3, [r3, #0]
 800ad7a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800ad7c:	683b      	ldr	r3, [r7, #0]
 800ad7e:	785b      	ldrb	r3, [r3, #1]
 800ad80:	2b01      	cmp	r3, #1
 800ad82:	d135      	bne.n	800adf0 <USB_DeactivateEndpoint+0x88>
  {
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800ad84:	68fb      	ldr	r3, [r7, #12]
 800ad86:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ad8a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ad8c:	683b      	ldr	r3, [r7, #0]
 800ad8e:	781b      	ldrb	r3, [r3, #0]
 800ad90:	f003 030f 	and.w	r3, r3, #15
 800ad94:	2101      	movs	r1, #1
 800ad96:	fa01 f303 	lsl.w	r3, r1, r3
 800ad9a:	b29b      	uxth	r3, r3
 800ad9c:	43db      	mvns	r3, r3
 800ad9e:	68f9      	ldr	r1, [r7, #12]
 800ada0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ada4:	4013      	ands	r3, r2
 800ada6:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800ada8:	68fb      	ldr	r3, [r7, #12]
 800adaa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800adae:	69da      	ldr	r2, [r3, #28]
 800adb0:	683b      	ldr	r3, [r7, #0]
 800adb2:	781b      	ldrb	r3, [r3, #0]
 800adb4:	f003 030f 	and.w	r3, r3, #15
 800adb8:	2101      	movs	r1, #1
 800adba:	fa01 f303 	lsl.w	r3, r1, r3
 800adbe:	b29b      	uxth	r3, r3
 800adc0:	43db      	mvns	r3, r3
 800adc2:	68f9      	ldr	r1, [r7, #12]
 800adc4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800adc8:	4013      	ands	r3, r2
 800adca:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800adcc:	68bb      	ldr	r3, [r7, #8]
 800adce:	015a      	lsls	r2, r3, #5
 800add0:	68fb      	ldr	r3, [r7, #12]
 800add2:	4413      	add	r3, r2
 800add4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800add8:	681a      	ldr	r2, [r3, #0]
 800adda:	68bb      	ldr	r3, [r7, #8]
 800addc:	0159      	lsls	r1, r3, #5
 800adde:	68fb      	ldr	r3, [r7, #12]
 800ade0:	440b      	add	r3, r1
 800ade2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ade6:	4619      	mov	r1, r3
 800ade8:	4b1f      	ldr	r3, [pc, #124]	; (800ae68 <USB_DeactivateEndpoint+0x100>)
 800adea:	4013      	ands	r3, r2
 800adec:	600b      	str	r3, [r1, #0]
 800adee:	e034      	b.n	800ae5a <USB_DeactivateEndpoint+0xf2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800adf0:	68fb      	ldr	r3, [r7, #12]
 800adf2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800adf6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800adf8:	683b      	ldr	r3, [r7, #0]
 800adfa:	781b      	ldrb	r3, [r3, #0]
 800adfc:	f003 030f 	and.w	r3, r3, #15
 800ae00:	2101      	movs	r1, #1
 800ae02:	fa01 f303 	lsl.w	r3, r1, r3
 800ae06:	041b      	lsls	r3, r3, #16
 800ae08:	43db      	mvns	r3, r3
 800ae0a:	68f9      	ldr	r1, [r7, #12]
 800ae0c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ae10:	4013      	ands	r3, r2
 800ae12:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800ae14:	68fb      	ldr	r3, [r7, #12]
 800ae16:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ae1a:	69da      	ldr	r2, [r3, #28]
 800ae1c:	683b      	ldr	r3, [r7, #0]
 800ae1e:	781b      	ldrb	r3, [r3, #0]
 800ae20:	f003 030f 	and.w	r3, r3, #15
 800ae24:	2101      	movs	r1, #1
 800ae26:	fa01 f303 	lsl.w	r3, r1, r3
 800ae2a:	041b      	lsls	r3, r3, #16
 800ae2c:	43db      	mvns	r3, r3
 800ae2e:	68f9      	ldr	r1, [r7, #12]
 800ae30:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ae34:	4013      	ands	r3, r2
 800ae36:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800ae38:	68bb      	ldr	r3, [r7, #8]
 800ae3a:	015a      	lsls	r2, r3, #5
 800ae3c:	68fb      	ldr	r3, [r7, #12]
 800ae3e:	4413      	add	r3, r2
 800ae40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ae44:	681a      	ldr	r2, [r3, #0]
 800ae46:	68bb      	ldr	r3, [r7, #8]
 800ae48:	0159      	lsls	r1, r3, #5
 800ae4a:	68fb      	ldr	r3, [r7, #12]
 800ae4c:	440b      	add	r3, r1
 800ae4e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ae52:	4619      	mov	r1, r3
 800ae54:	4b05      	ldr	r3, [pc, #20]	; (800ae6c <USB_DeactivateEndpoint+0x104>)
 800ae56:	4013      	ands	r3, r2
 800ae58:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800ae5a:	2300      	movs	r3, #0
}
 800ae5c:	4618      	mov	r0, r3
 800ae5e:	3714      	adds	r7, #20
 800ae60:	46bd      	mov	sp, r7
 800ae62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae66:	4770      	bx	lr
 800ae68:	ec337800 	.word	0xec337800
 800ae6c:	eff37800 	.word	0xeff37800

0800ae70 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800ae70:	b580      	push	{r7, lr}
 800ae72:	b08a      	sub	sp, #40	; 0x28
 800ae74:	af02      	add	r7, sp, #8
 800ae76:	60f8      	str	r0, [r7, #12]
 800ae78:	60b9      	str	r1, [r7, #8]
 800ae7a:	4613      	mov	r3, r2
 800ae7c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ae7e:	68fb      	ldr	r3, [r7, #12]
 800ae80:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800ae82:	68bb      	ldr	r3, [r7, #8]
 800ae84:	781b      	ldrb	r3, [r3, #0]
 800ae86:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800ae88:	68bb      	ldr	r3, [r7, #8]
 800ae8a:	785b      	ldrb	r3, [r3, #1]
 800ae8c:	2b01      	cmp	r3, #1
 800ae8e:	f040 815c 	bne.w	800b14a <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800ae92:	68bb      	ldr	r3, [r7, #8]
 800ae94:	695b      	ldr	r3, [r3, #20]
 800ae96:	2b00      	cmp	r3, #0
 800ae98:	d132      	bne.n	800af00 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800ae9a:	69bb      	ldr	r3, [r7, #24]
 800ae9c:	015a      	lsls	r2, r3, #5
 800ae9e:	69fb      	ldr	r3, [r7, #28]
 800aea0:	4413      	add	r3, r2
 800aea2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aea6:	691b      	ldr	r3, [r3, #16]
 800aea8:	69ba      	ldr	r2, [r7, #24]
 800aeaa:	0151      	lsls	r1, r2, #5
 800aeac:	69fa      	ldr	r2, [r7, #28]
 800aeae:	440a      	add	r2, r1
 800aeb0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800aeb4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800aeb8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800aebc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800aebe:	69bb      	ldr	r3, [r7, #24]
 800aec0:	015a      	lsls	r2, r3, #5
 800aec2:	69fb      	ldr	r3, [r7, #28]
 800aec4:	4413      	add	r3, r2
 800aec6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aeca:	691b      	ldr	r3, [r3, #16]
 800aecc:	69ba      	ldr	r2, [r7, #24]
 800aece:	0151      	lsls	r1, r2, #5
 800aed0:	69fa      	ldr	r2, [r7, #28]
 800aed2:	440a      	add	r2, r1
 800aed4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800aed8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800aedc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800aede:	69bb      	ldr	r3, [r7, #24]
 800aee0:	015a      	lsls	r2, r3, #5
 800aee2:	69fb      	ldr	r3, [r7, #28]
 800aee4:	4413      	add	r3, r2
 800aee6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aeea:	691b      	ldr	r3, [r3, #16]
 800aeec:	69ba      	ldr	r2, [r7, #24]
 800aeee:	0151      	lsls	r1, r2, #5
 800aef0:	69fa      	ldr	r2, [r7, #28]
 800aef2:	440a      	add	r2, r1
 800aef4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800aef8:	0cdb      	lsrs	r3, r3, #19
 800aefa:	04db      	lsls	r3, r3, #19
 800aefc:	6113      	str	r3, [r2, #16]
 800aefe:	e074      	b.n	800afea <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800af00:	69bb      	ldr	r3, [r7, #24]
 800af02:	015a      	lsls	r2, r3, #5
 800af04:	69fb      	ldr	r3, [r7, #28]
 800af06:	4413      	add	r3, r2
 800af08:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800af0c:	691b      	ldr	r3, [r3, #16]
 800af0e:	69ba      	ldr	r2, [r7, #24]
 800af10:	0151      	lsls	r1, r2, #5
 800af12:	69fa      	ldr	r2, [r7, #28]
 800af14:	440a      	add	r2, r1
 800af16:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800af1a:	0cdb      	lsrs	r3, r3, #19
 800af1c:	04db      	lsls	r3, r3, #19
 800af1e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800af20:	69bb      	ldr	r3, [r7, #24]
 800af22:	015a      	lsls	r2, r3, #5
 800af24:	69fb      	ldr	r3, [r7, #28]
 800af26:	4413      	add	r3, r2
 800af28:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800af2c:	691b      	ldr	r3, [r3, #16]
 800af2e:	69ba      	ldr	r2, [r7, #24]
 800af30:	0151      	lsls	r1, r2, #5
 800af32:	69fa      	ldr	r2, [r7, #28]
 800af34:	440a      	add	r2, r1
 800af36:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800af3a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800af3e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800af42:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800af44:	69bb      	ldr	r3, [r7, #24]
 800af46:	015a      	lsls	r2, r3, #5
 800af48:	69fb      	ldr	r3, [r7, #28]
 800af4a:	4413      	add	r3, r2
 800af4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800af50:	691a      	ldr	r2, [r3, #16]
 800af52:	68bb      	ldr	r3, [r7, #8]
 800af54:	6959      	ldr	r1, [r3, #20]
 800af56:	68bb      	ldr	r3, [r7, #8]
 800af58:	689b      	ldr	r3, [r3, #8]
 800af5a:	440b      	add	r3, r1
 800af5c:	1e59      	subs	r1, r3, #1
 800af5e:	68bb      	ldr	r3, [r7, #8]
 800af60:	689b      	ldr	r3, [r3, #8]
 800af62:	fbb1 f3f3 	udiv	r3, r1, r3
 800af66:	04d9      	lsls	r1, r3, #19
 800af68:	4b9d      	ldr	r3, [pc, #628]	; (800b1e0 <USB_EPStartXfer+0x370>)
 800af6a:	400b      	ands	r3, r1
 800af6c:	69b9      	ldr	r1, [r7, #24]
 800af6e:	0148      	lsls	r0, r1, #5
 800af70:	69f9      	ldr	r1, [r7, #28]
 800af72:	4401      	add	r1, r0
 800af74:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800af78:	4313      	orrs	r3, r2
 800af7a:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800af7c:	69bb      	ldr	r3, [r7, #24]
 800af7e:	015a      	lsls	r2, r3, #5
 800af80:	69fb      	ldr	r3, [r7, #28]
 800af82:	4413      	add	r3, r2
 800af84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800af88:	691a      	ldr	r2, [r3, #16]
 800af8a:	68bb      	ldr	r3, [r7, #8]
 800af8c:	695b      	ldr	r3, [r3, #20]
 800af8e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800af92:	69b9      	ldr	r1, [r7, #24]
 800af94:	0148      	lsls	r0, r1, #5
 800af96:	69f9      	ldr	r1, [r7, #28]
 800af98:	4401      	add	r1, r0
 800af9a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800af9e:	4313      	orrs	r3, r2
 800afa0:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800afa2:	68bb      	ldr	r3, [r7, #8]
 800afa4:	78db      	ldrb	r3, [r3, #3]
 800afa6:	2b01      	cmp	r3, #1
 800afa8:	d11f      	bne.n	800afea <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800afaa:	69bb      	ldr	r3, [r7, #24]
 800afac:	015a      	lsls	r2, r3, #5
 800afae:	69fb      	ldr	r3, [r7, #28]
 800afb0:	4413      	add	r3, r2
 800afb2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800afb6:	691b      	ldr	r3, [r3, #16]
 800afb8:	69ba      	ldr	r2, [r7, #24]
 800afba:	0151      	lsls	r1, r2, #5
 800afbc:	69fa      	ldr	r2, [r7, #28]
 800afbe:	440a      	add	r2, r1
 800afc0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800afc4:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800afc8:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800afca:	69bb      	ldr	r3, [r7, #24]
 800afcc:	015a      	lsls	r2, r3, #5
 800afce:	69fb      	ldr	r3, [r7, #28]
 800afd0:	4413      	add	r3, r2
 800afd2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800afd6:	691b      	ldr	r3, [r3, #16]
 800afd8:	69ba      	ldr	r2, [r7, #24]
 800afda:	0151      	lsls	r1, r2, #5
 800afdc:	69fa      	ldr	r2, [r7, #28]
 800afde:	440a      	add	r2, r1
 800afe0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800afe4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800afe8:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800afea:	79fb      	ldrb	r3, [r7, #7]
 800afec:	2b01      	cmp	r3, #1
 800afee:	d14b      	bne.n	800b088 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800aff0:	68bb      	ldr	r3, [r7, #8]
 800aff2:	691b      	ldr	r3, [r3, #16]
 800aff4:	2b00      	cmp	r3, #0
 800aff6:	d009      	beq.n	800b00c <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800aff8:	69bb      	ldr	r3, [r7, #24]
 800affa:	015a      	lsls	r2, r3, #5
 800affc:	69fb      	ldr	r3, [r7, #28]
 800affe:	4413      	add	r3, r2
 800b000:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b004:	461a      	mov	r2, r3
 800b006:	68bb      	ldr	r3, [r7, #8]
 800b008:	691b      	ldr	r3, [r3, #16]
 800b00a:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800b00c:	68bb      	ldr	r3, [r7, #8]
 800b00e:	78db      	ldrb	r3, [r3, #3]
 800b010:	2b01      	cmp	r3, #1
 800b012:	d128      	bne.n	800b066 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800b014:	69fb      	ldr	r3, [r7, #28]
 800b016:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b01a:	689b      	ldr	r3, [r3, #8]
 800b01c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b020:	2b00      	cmp	r3, #0
 800b022:	d110      	bne.n	800b046 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800b024:	69bb      	ldr	r3, [r7, #24]
 800b026:	015a      	lsls	r2, r3, #5
 800b028:	69fb      	ldr	r3, [r7, #28]
 800b02a:	4413      	add	r3, r2
 800b02c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b030:	681b      	ldr	r3, [r3, #0]
 800b032:	69ba      	ldr	r2, [r7, #24]
 800b034:	0151      	lsls	r1, r2, #5
 800b036:	69fa      	ldr	r2, [r7, #28]
 800b038:	440a      	add	r2, r1
 800b03a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b03e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800b042:	6013      	str	r3, [r2, #0]
 800b044:	e00f      	b.n	800b066 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800b046:	69bb      	ldr	r3, [r7, #24]
 800b048:	015a      	lsls	r2, r3, #5
 800b04a:	69fb      	ldr	r3, [r7, #28]
 800b04c:	4413      	add	r3, r2
 800b04e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b052:	681b      	ldr	r3, [r3, #0]
 800b054:	69ba      	ldr	r2, [r7, #24]
 800b056:	0151      	lsls	r1, r2, #5
 800b058:	69fa      	ldr	r2, [r7, #28]
 800b05a:	440a      	add	r2, r1
 800b05c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b060:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b064:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800b066:	69bb      	ldr	r3, [r7, #24]
 800b068:	015a      	lsls	r2, r3, #5
 800b06a:	69fb      	ldr	r3, [r7, #28]
 800b06c:	4413      	add	r3, r2
 800b06e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b072:	681b      	ldr	r3, [r3, #0]
 800b074:	69ba      	ldr	r2, [r7, #24]
 800b076:	0151      	lsls	r1, r2, #5
 800b078:	69fa      	ldr	r2, [r7, #28]
 800b07a:	440a      	add	r2, r1
 800b07c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b080:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800b084:	6013      	str	r3, [r2, #0]
 800b086:	e12f      	b.n	800b2e8 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800b088:	69bb      	ldr	r3, [r7, #24]
 800b08a:	015a      	lsls	r2, r3, #5
 800b08c:	69fb      	ldr	r3, [r7, #28]
 800b08e:	4413      	add	r3, r2
 800b090:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b094:	681b      	ldr	r3, [r3, #0]
 800b096:	69ba      	ldr	r2, [r7, #24]
 800b098:	0151      	lsls	r1, r2, #5
 800b09a:	69fa      	ldr	r2, [r7, #28]
 800b09c:	440a      	add	r2, r1
 800b09e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b0a2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800b0a6:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800b0a8:	68bb      	ldr	r3, [r7, #8]
 800b0aa:	78db      	ldrb	r3, [r3, #3]
 800b0ac:	2b01      	cmp	r3, #1
 800b0ae:	d015      	beq.n	800b0dc <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800b0b0:	68bb      	ldr	r3, [r7, #8]
 800b0b2:	695b      	ldr	r3, [r3, #20]
 800b0b4:	2b00      	cmp	r3, #0
 800b0b6:	f000 8117 	beq.w	800b2e8 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800b0ba:	69fb      	ldr	r3, [r7, #28]
 800b0bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b0c0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b0c2:	68bb      	ldr	r3, [r7, #8]
 800b0c4:	781b      	ldrb	r3, [r3, #0]
 800b0c6:	f003 030f 	and.w	r3, r3, #15
 800b0ca:	2101      	movs	r1, #1
 800b0cc:	fa01 f303 	lsl.w	r3, r1, r3
 800b0d0:	69f9      	ldr	r1, [r7, #28]
 800b0d2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b0d6:	4313      	orrs	r3, r2
 800b0d8:	634b      	str	r3, [r1, #52]	; 0x34
 800b0da:	e105      	b.n	800b2e8 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800b0dc:	69fb      	ldr	r3, [r7, #28]
 800b0de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b0e2:	689b      	ldr	r3, [r3, #8]
 800b0e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b0e8:	2b00      	cmp	r3, #0
 800b0ea:	d110      	bne.n	800b10e <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800b0ec:	69bb      	ldr	r3, [r7, #24]
 800b0ee:	015a      	lsls	r2, r3, #5
 800b0f0:	69fb      	ldr	r3, [r7, #28]
 800b0f2:	4413      	add	r3, r2
 800b0f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b0f8:	681b      	ldr	r3, [r3, #0]
 800b0fa:	69ba      	ldr	r2, [r7, #24]
 800b0fc:	0151      	lsls	r1, r2, #5
 800b0fe:	69fa      	ldr	r2, [r7, #28]
 800b100:	440a      	add	r2, r1
 800b102:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b106:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800b10a:	6013      	str	r3, [r2, #0]
 800b10c:	e00f      	b.n	800b12e <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800b10e:	69bb      	ldr	r3, [r7, #24]
 800b110:	015a      	lsls	r2, r3, #5
 800b112:	69fb      	ldr	r3, [r7, #28]
 800b114:	4413      	add	r3, r2
 800b116:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b11a:	681b      	ldr	r3, [r3, #0]
 800b11c:	69ba      	ldr	r2, [r7, #24]
 800b11e:	0151      	lsls	r1, r2, #5
 800b120:	69fa      	ldr	r2, [r7, #28]
 800b122:	440a      	add	r2, r1
 800b124:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b128:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b12c:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800b12e:	68bb      	ldr	r3, [r7, #8]
 800b130:	68d9      	ldr	r1, [r3, #12]
 800b132:	68bb      	ldr	r3, [r7, #8]
 800b134:	781a      	ldrb	r2, [r3, #0]
 800b136:	68bb      	ldr	r3, [r7, #8]
 800b138:	695b      	ldr	r3, [r3, #20]
 800b13a:	b298      	uxth	r0, r3
 800b13c:	79fb      	ldrb	r3, [r7, #7]
 800b13e:	9300      	str	r3, [sp, #0]
 800b140:	4603      	mov	r3, r0
 800b142:	68f8      	ldr	r0, [r7, #12]
 800b144:	f000 fa2b 	bl	800b59e <USB_WritePacket>
 800b148:	e0ce      	b.n	800b2e8 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800b14a:	69bb      	ldr	r3, [r7, #24]
 800b14c:	015a      	lsls	r2, r3, #5
 800b14e:	69fb      	ldr	r3, [r7, #28]
 800b150:	4413      	add	r3, r2
 800b152:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b156:	691b      	ldr	r3, [r3, #16]
 800b158:	69ba      	ldr	r2, [r7, #24]
 800b15a:	0151      	lsls	r1, r2, #5
 800b15c:	69fa      	ldr	r2, [r7, #28]
 800b15e:	440a      	add	r2, r1
 800b160:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b164:	0cdb      	lsrs	r3, r3, #19
 800b166:	04db      	lsls	r3, r3, #19
 800b168:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800b16a:	69bb      	ldr	r3, [r7, #24]
 800b16c:	015a      	lsls	r2, r3, #5
 800b16e:	69fb      	ldr	r3, [r7, #28]
 800b170:	4413      	add	r3, r2
 800b172:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b176:	691b      	ldr	r3, [r3, #16]
 800b178:	69ba      	ldr	r2, [r7, #24]
 800b17a:	0151      	lsls	r1, r2, #5
 800b17c:	69fa      	ldr	r2, [r7, #28]
 800b17e:	440a      	add	r2, r1
 800b180:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b184:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800b188:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800b18c:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800b18e:	68bb      	ldr	r3, [r7, #8]
 800b190:	695b      	ldr	r3, [r3, #20]
 800b192:	2b00      	cmp	r3, #0
 800b194:	d126      	bne.n	800b1e4 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800b196:	69bb      	ldr	r3, [r7, #24]
 800b198:	015a      	lsls	r2, r3, #5
 800b19a:	69fb      	ldr	r3, [r7, #28]
 800b19c:	4413      	add	r3, r2
 800b19e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b1a2:	691a      	ldr	r2, [r3, #16]
 800b1a4:	68bb      	ldr	r3, [r7, #8]
 800b1a6:	689b      	ldr	r3, [r3, #8]
 800b1a8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b1ac:	69b9      	ldr	r1, [r7, #24]
 800b1ae:	0148      	lsls	r0, r1, #5
 800b1b0:	69f9      	ldr	r1, [r7, #28]
 800b1b2:	4401      	add	r1, r0
 800b1b4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800b1b8:	4313      	orrs	r3, r2
 800b1ba:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800b1bc:	69bb      	ldr	r3, [r7, #24]
 800b1be:	015a      	lsls	r2, r3, #5
 800b1c0:	69fb      	ldr	r3, [r7, #28]
 800b1c2:	4413      	add	r3, r2
 800b1c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b1c8:	691b      	ldr	r3, [r3, #16]
 800b1ca:	69ba      	ldr	r2, [r7, #24]
 800b1cc:	0151      	lsls	r1, r2, #5
 800b1ce:	69fa      	ldr	r2, [r7, #28]
 800b1d0:	440a      	add	r2, r1
 800b1d2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b1d6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b1da:	6113      	str	r3, [r2, #16]
 800b1dc:	e036      	b.n	800b24c <USB_EPStartXfer+0x3dc>
 800b1de:	bf00      	nop
 800b1e0:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800b1e4:	68bb      	ldr	r3, [r7, #8]
 800b1e6:	695a      	ldr	r2, [r3, #20]
 800b1e8:	68bb      	ldr	r3, [r7, #8]
 800b1ea:	689b      	ldr	r3, [r3, #8]
 800b1ec:	4413      	add	r3, r2
 800b1ee:	1e5a      	subs	r2, r3, #1
 800b1f0:	68bb      	ldr	r3, [r7, #8]
 800b1f2:	689b      	ldr	r3, [r3, #8]
 800b1f4:	fbb2 f3f3 	udiv	r3, r2, r3
 800b1f8:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800b1fa:	69bb      	ldr	r3, [r7, #24]
 800b1fc:	015a      	lsls	r2, r3, #5
 800b1fe:	69fb      	ldr	r3, [r7, #28]
 800b200:	4413      	add	r3, r2
 800b202:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b206:	691a      	ldr	r2, [r3, #16]
 800b208:	8afb      	ldrh	r3, [r7, #22]
 800b20a:	04d9      	lsls	r1, r3, #19
 800b20c:	4b39      	ldr	r3, [pc, #228]	; (800b2f4 <USB_EPStartXfer+0x484>)
 800b20e:	400b      	ands	r3, r1
 800b210:	69b9      	ldr	r1, [r7, #24]
 800b212:	0148      	lsls	r0, r1, #5
 800b214:	69f9      	ldr	r1, [r7, #28]
 800b216:	4401      	add	r1, r0
 800b218:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800b21c:	4313      	orrs	r3, r2
 800b21e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 800b220:	69bb      	ldr	r3, [r7, #24]
 800b222:	015a      	lsls	r2, r3, #5
 800b224:	69fb      	ldr	r3, [r7, #28]
 800b226:	4413      	add	r3, r2
 800b228:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b22c:	691a      	ldr	r2, [r3, #16]
 800b22e:	68bb      	ldr	r3, [r7, #8]
 800b230:	689b      	ldr	r3, [r3, #8]
 800b232:	8af9      	ldrh	r1, [r7, #22]
 800b234:	fb01 f303 	mul.w	r3, r1, r3
 800b238:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b23c:	69b9      	ldr	r1, [r7, #24]
 800b23e:	0148      	lsls	r0, r1, #5
 800b240:	69f9      	ldr	r1, [r7, #28]
 800b242:	4401      	add	r1, r0
 800b244:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800b248:	4313      	orrs	r3, r2
 800b24a:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800b24c:	79fb      	ldrb	r3, [r7, #7]
 800b24e:	2b01      	cmp	r3, #1
 800b250:	d10d      	bne.n	800b26e <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800b252:	68bb      	ldr	r3, [r7, #8]
 800b254:	68db      	ldr	r3, [r3, #12]
 800b256:	2b00      	cmp	r3, #0
 800b258:	d009      	beq.n	800b26e <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800b25a:	68bb      	ldr	r3, [r7, #8]
 800b25c:	68d9      	ldr	r1, [r3, #12]
 800b25e:	69bb      	ldr	r3, [r7, #24]
 800b260:	015a      	lsls	r2, r3, #5
 800b262:	69fb      	ldr	r3, [r7, #28]
 800b264:	4413      	add	r3, r2
 800b266:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b26a:	460a      	mov	r2, r1
 800b26c:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800b26e:	68bb      	ldr	r3, [r7, #8]
 800b270:	78db      	ldrb	r3, [r3, #3]
 800b272:	2b01      	cmp	r3, #1
 800b274:	d128      	bne.n	800b2c8 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800b276:	69fb      	ldr	r3, [r7, #28]
 800b278:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b27c:	689b      	ldr	r3, [r3, #8]
 800b27e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b282:	2b00      	cmp	r3, #0
 800b284:	d110      	bne.n	800b2a8 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800b286:	69bb      	ldr	r3, [r7, #24]
 800b288:	015a      	lsls	r2, r3, #5
 800b28a:	69fb      	ldr	r3, [r7, #28]
 800b28c:	4413      	add	r3, r2
 800b28e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b292:	681b      	ldr	r3, [r3, #0]
 800b294:	69ba      	ldr	r2, [r7, #24]
 800b296:	0151      	lsls	r1, r2, #5
 800b298:	69fa      	ldr	r2, [r7, #28]
 800b29a:	440a      	add	r2, r1
 800b29c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b2a0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800b2a4:	6013      	str	r3, [r2, #0]
 800b2a6:	e00f      	b.n	800b2c8 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800b2a8:	69bb      	ldr	r3, [r7, #24]
 800b2aa:	015a      	lsls	r2, r3, #5
 800b2ac:	69fb      	ldr	r3, [r7, #28]
 800b2ae:	4413      	add	r3, r2
 800b2b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b2b4:	681b      	ldr	r3, [r3, #0]
 800b2b6:	69ba      	ldr	r2, [r7, #24]
 800b2b8:	0151      	lsls	r1, r2, #5
 800b2ba:	69fa      	ldr	r2, [r7, #28]
 800b2bc:	440a      	add	r2, r1
 800b2be:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b2c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b2c6:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800b2c8:	69bb      	ldr	r3, [r7, #24]
 800b2ca:	015a      	lsls	r2, r3, #5
 800b2cc:	69fb      	ldr	r3, [r7, #28]
 800b2ce:	4413      	add	r3, r2
 800b2d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b2d4:	681b      	ldr	r3, [r3, #0]
 800b2d6:	69ba      	ldr	r2, [r7, #24]
 800b2d8:	0151      	lsls	r1, r2, #5
 800b2da:	69fa      	ldr	r2, [r7, #28]
 800b2dc:	440a      	add	r2, r1
 800b2de:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b2e2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800b2e6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800b2e8:	2300      	movs	r3, #0
}
 800b2ea:	4618      	mov	r0, r3
 800b2ec:	3720      	adds	r7, #32
 800b2ee:	46bd      	mov	sp, r7
 800b2f0:	bd80      	pop	{r7, pc}
 800b2f2:	bf00      	nop
 800b2f4:	1ff80000 	.word	0x1ff80000

0800b2f8 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800b2f8:	b480      	push	{r7}
 800b2fa:	b087      	sub	sp, #28
 800b2fc:	af00      	add	r7, sp, #0
 800b2fe:	60f8      	str	r0, [r7, #12]
 800b300:	60b9      	str	r1, [r7, #8]
 800b302:	4613      	mov	r3, r2
 800b304:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b306:	68fb      	ldr	r3, [r7, #12]
 800b308:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800b30a:	68bb      	ldr	r3, [r7, #8]
 800b30c:	781b      	ldrb	r3, [r3, #0]
 800b30e:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800b310:	68bb      	ldr	r3, [r7, #8]
 800b312:	785b      	ldrb	r3, [r3, #1]
 800b314:	2b01      	cmp	r3, #1
 800b316:	f040 80cd 	bne.w	800b4b4 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800b31a:	68bb      	ldr	r3, [r7, #8]
 800b31c:	695b      	ldr	r3, [r3, #20]
 800b31e:	2b00      	cmp	r3, #0
 800b320:	d132      	bne.n	800b388 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800b322:	693b      	ldr	r3, [r7, #16]
 800b324:	015a      	lsls	r2, r3, #5
 800b326:	697b      	ldr	r3, [r7, #20]
 800b328:	4413      	add	r3, r2
 800b32a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b32e:	691b      	ldr	r3, [r3, #16]
 800b330:	693a      	ldr	r2, [r7, #16]
 800b332:	0151      	lsls	r1, r2, #5
 800b334:	697a      	ldr	r2, [r7, #20]
 800b336:	440a      	add	r2, r1
 800b338:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b33c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800b340:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800b344:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800b346:	693b      	ldr	r3, [r7, #16]
 800b348:	015a      	lsls	r2, r3, #5
 800b34a:	697b      	ldr	r3, [r7, #20]
 800b34c:	4413      	add	r3, r2
 800b34e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b352:	691b      	ldr	r3, [r3, #16]
 800b354:	693a      	ldr	r2, [r7, #16]
 800b356:	0151      	lsls	r1, r2, #5
 800b358:	697a      	ldr	r2, [r7, #20]
 800b35a:	440a      	add	r2, r1
 800b35c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b360:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b364:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800b366:	693b      	ldr	r3, [r7, #16]
 800b368:	015a      	lsls	r2, r3, #5
 800b36a:	697b      	ldr	r3, [r7, #20]
 800b36c:	4413      	add	r3, r2
 800b36e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b372:	691b      	ldr	r3, [r3, #16]
 800b374:	693a      	ldr	r2, [r7, #16]
 800b376:	0151      	lsls	r1, r2, #5
 800b378:	697a      	ldr	r2, [r7, #20]
 800b37a:	440a      	add	r2, r1
 800b37c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b380:	0cdb      	lsrs	r3, r3, #19
 800b382:	04db      	lsls	r3, r3, #19
 800b384:	6113      	str	r3, [r2, #16]
 800b386:	e04e      	b.n	800b426 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800b388:	693b      	ldr	r3, [r7, #16]
 800b38a:	015a      	lsls	r2, r3, #5
 800b38c:	697b      	ldr	r3, [r7, #20]
 800b38e:	4413      	add	r3, r2
 800b390:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b394:	691b      	ldr	r3, [r3, #16]
 800b396:	693a      	ldr	r2, [r7, #16]
 800b398:	0151      	lsls	r1, r2, #5
 800b39a:	697a      	ldr	r2, [r7, #20]
 800b39c:	440a      	add	r2, r1
 800b39e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b3a2:	0cdb      	lsrs	r3, r3, #19
 800b3a4:	04db      	lsls	r3, r3, #19
 800b3a6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800b3a8:	693b      	ldr	r3, [r7, #16]
 800b3aa:	015a      	lsls	r2, r3, #5
 800b3ac:	697b      	ldr	r3, [r7, #20]
 800b3ae:	4413      	add	r3, r2
 800b3b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b3b4:	691b      	ldr	r3, [r3, #16]
 800b3b6:	693a      	ldr	r2, [r7, #16]
 800b3b8:	0151      	lsls	r1, r2, #5
 800b3ba:	697a      	ldr	r2, [r7, #20]
 800b3bc:	440a      	add	r2, r1
 800b3be:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b3c2:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800b3c6:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800b3ca:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 800b3cc:	68bb      	ldr	r3, [r7, #8]
 800b3ce:	695a      	ldr	r2, [r3, #20]
 800b3d0:	68bb      	ldr	r3, [r7, #8]
 800b3d2:	689b      	ldr	r3, [r3, #8]
 800b3d4:	429a      	cmp	r2, r3
 800b3d6:	d903      	bls.n	800b3e0 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800b3d8:	68bb      	ldr	r3, [r7, #8]
 800b3da:	689a      	ldr	r2, [r3, #8]
 800b3dc:	68bb      	ldr	r3, [r7, #8]
 800b3de:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800b3e0:	693b      	ldr	r3, [r7, #16]
 800b3e2:	015a      	lsls	r2, r3, #5
 800b3e4:	697b      	ldr	r3, [r7, #20]
 800b3e6:	4413      	add	r3, r2
 800b3e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b3ec:	691b      	ldr	r3, [r3, #16]
 800b3ee:	693a      	ldr	r2, [r7, #16]
 800b3f0:	0151      	lsls	r1, r2, #5
 800b3f2:	697a      	ldr	r2, [r7, #20]
 800b3f4:	440a      	add	r2, r1
 800b3f6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b3fa:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b3fe:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800b400:	693b      	ldr	r3, [r7, #16]
 800b402:	015a      	lsls	r2, r3, #5
 800b404:	697b      	ldr	r3, [r7, #20]
 800b406:	4413      	add	r3, r2
 800b408:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b40c:	691a      	ldr	r2, [r3, #16]
 800b40e:	68bb      	ldr	r3, [r7, #8]
 800b410:	695b      	ldr	r3, [r3, #20]
 800b412:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b416:	6939      	ldr	r1, [r7, #16]
 800b418:	0148      	lsls	r0, r1, #5
 800b41a:	6979      	ldr	r1, [r7, #20]
 800b41c:	4401      	add	r1, r0
 800b41e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800b422:	4313      	orrs	r3, r2
 800b424:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800b426:	79fb      	ldrb	r3, [r7, #7]
 800b428:	2b01      	cmp	r3, #1
 800b42a:	d11e      	bne.n	800b46a <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800b42c:	68bb      	ldr	r3, [r7, #8]
 800b42e:	691b      	ldr	r3, [r3, #16]
 800b430:	2b00      	cmp	r3, #0
 800b432:	d009      	beq.n	800b448 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800b434:	693b      	ldr	r3, [r7, #16]
 800b436:	015a      	lsls	r2, r3, #5
 800b438:	697b      	ldr	r3, [r7, #20]
 800b43a:	4413      	add	r3, r2
 800b43c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b440:	461a      	mov	r2, r3
 800b442:	68bb      	ldr	r3, [r7, #8]
 800b444:	691b      	ldr	r3, [r3, #16]
 800b446:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800b448:	693b      	ldr	r3, [r7, #16]
 800b44a:	015a      	lsls	r2, r3, #5
 800b44c:	697b      	ldr	r3, [r7, #20]
 800b44e:	4413      	add	r3, r2
 800b450:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b454:	681b      	ldr	r3, [r3, #0]
 800b456:	693a      	ldr	r2, [r7, #16]
 800b458:	0151      	lsls	r1, r2, #5
 800b45a:	697a      	ldr	r2, [r7, #20]
 800b45c:	440a      	add	r2, r1
 800b45e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b462:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800b466:	6013      	str	r3, [r2, #0]
 800b468:	e092      	b.n	800b590 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800b46a:	693b      	ldr	r3, [r7, #16]
 800b46c:	015a      	lsls	r2, r3, #5
 800b46e:	697b      	ldr	r3, [r7, #20]
 800b470:	4413      	add	r3, r2
 800b472:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b476:	681b      	ldr	r3, [r3, #0]
 800b478:	693a      	ldr	r2, [r7, #16]
 800b47a:	0151      	lsls	r1, r2, #5
 800b47c:	697a      	ldr	r2, [r7, #20]
 800b47e:	440a      	add	r2, r1
 800b480:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b484:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800b488:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800b48a:	68bb      	ldr	r3, [r7, #8]
 800b48c:	695b      	ldr	r3, [r3, #20]
 800b48e:	2b00      	cmp	r3, #0
 800b490:	d07e      	beq.n	800b590 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800b492:	697b      	ldr	r3, [r7, #20]
 800b494:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b498:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b49a:	68bb      	ldr	r3, [r7, #8]
 800b49c:	781b      	ldrb	r3, [r3, #0]
 800b49e:	f003 030f 	and.w	r3, r3, #15
 800b4a2:	2101      	movs	r1, #1
 800b4a4:	fa01 f303 	lsl.w	r3, r1, r3
 800b4a8:	6979      	ldr	r1, [r7, #20]
 800b4aa:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b4ae:	4313      	orrs	r3, r2
 800b4b0:	634b      	str	r3, [r1, #52]	; 0x34
 800b4b2:	e06d      	b.n	800b590 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800b4b4:	693b      	ldr	r3, [r7, #16]
 800b4b6:	015a      	lsls	r2, r3, #5
 800b4b8:	697b      	ldr	r3, [r7, #20]
 800b4ba:	4413      	add	r3, r2
 800b4bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b4c0:	691b      	ldr	r3, [r3, #16]
 800b4c2:	693a      	ldr	r2, [r7, #16]
 800b4c4:	0151      	lsls	r1, r2, #5
 800b4c6:	697a      	ldr	r2, [r7, #20]
 800b4c8:	440a      	add	r2, r1
 800b4ca:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b4ce:	0cdb      	lsrs	r3, r3, #19
 800b4d0:	04db      	lsls	r3, r3, #19
 800b4d2:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800b4d4:	693b      	ldr	r3, [r7, #16]
 800b4d6:	015a      	lsls	r2, r3, #5
 800b4d8:	697b      	ldr	r3, [r7, #20]
 800b4da:	4413      	add	r3, r2
 800b4dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b4e0:	691b      	ldr	r3, [r3, #16]
 800b4e2:	693a      	ldr	r2, [r7, #16]
 800b4e4:	0151      	lsls	r1, r2, #5
 800b4e6:	697a      	ldr	r2, [r7, #20]
 800b4e8:	440a      	add	r2, r1
 800b4ea:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b4ee:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800b4f2:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800b4f6:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800b4f8:	68bb      	ldr	r3, [r7, #8]
 800b4fa:	695b      	ldr	r3, [r3, #20]
 800b4fc:	2b00      	cmp	r3, #0
 800b4fe:	d003      	beq.n	800b508 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 800b500:	68bb      	ldr	r3, [r7, #8]
 800b502:	689a      	ldr	r2, [r3, #8]
 800b504:	68bb      	ldr	r3, [r7, #8]
 800b506:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800b508:	693b      	ldr	r3, [r7, #16]
 800b50a:	015a      	lsls	r2, r3, #5
 800b50c:	697b      	ldr	r3, [r7, #20]
 800b50e:	4413      	add	r3, r2
 800b510:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b514:	691b      	ldr	r3, [r3, #16]
 800b516:	693a      	ldr	r2, [r7, #16]
 800b518:	0151      	lsls	r1, r2, #5
 800b51a:	697a      	ldr	r2, [r7, #20]
 800b51c:	440a      	add	r2, r1
 800b51e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b522:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b526:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 800b528:	693b      	ldr	r3, [r7, #16]
 800b52a:	015a      	lsls	r2, r3, #5
 800b52c:	697b      	ldr	r3, [r7, #20]
 800b52e:	4413      	add	r3, r2
 800b530:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b534:	691a      	ldr	r2, [r3, #16]
 800b536:	68bb      	ldr	r3, [r7, #8]
 800b538:	689b      	ldr	r3, [r3, #8]
 800b53a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b53e:	6939      	ldr	r1, [r7, #16]
 800b540:	0148      	lsls	r0, r1, #5
 800b542:	6979      	ldr	r1, [r7, #20]
 800b544:	4401      	add	r1, r0
 800b546:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800b54a:	4313      	orrs	r3, r2
 800b54c:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800b54e:	79fb      	ldrb	r3, [r7, #7]
 800b550:	2b01      	cmp	r3, #1
 800b552:	d10d      	bne.n	800b570 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800b554:	68bb      	ldr	r3, [r7, #8]
 800b556:	68db      	ldr	r3, [r3, #12]
 800b558:	2b00      	cmp	r3, #0
 800b55a:	d009      	beq.n	800b570 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800b55c:	68bb      	ldr	r3, [r7, #8]
 800b55e:	68d9      	ldr	r1, [r3, #12]
 800b560:	693b      	ldr	r3, [r7, #16]
 800b562:	015a      	lsls	r2, r3, #5
 800b564:	697b      	ldr	r3, [r7, #20]
 800b566:	4413      	add	r3, r2
 800b568:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b56c:	460a      	mov	r2, r1
 800b56e:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800b570:	693b      	ldr	r3, [r7, #16]
 800b572:	015a      	lsls	r2, r3, #5
 800b574:	697b      	ldr	r3, [r7, #20]
 800b576:	4413      	add	r3, r2
 800b578:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b57c:	681b      	ldr	r3, [r3, #0]
 800b57e:	693a      	ldr	r2, [r7, #16]
 800b580:	0151      	lsls	r1, r2, #5
 800b582:	697a      	ldr	r2, [r7, #20]
 800b584:	440a      	add	r2, r1
 800b586:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b58a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800b58e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800b590:	2300      	movs	r3, #0
}
 800b592:	4618      	mov	r0, r3
 800b594:	371c      	adds	r7, #28
 800b596:	46bd      	mov	sp, r7
 800b598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b59c:	4770      	bx	lr

0800b59e <USB_WritePacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800b59e:	b480      	push	{r7}
 800b5a0:	b089      	sub	sp, #36	; 0x24
 800b5a2:	af00      	add	r7, sp, #0
 800b5a4:	60f8      	str	r0, [r7, #12]
 800b5a6:	60b9      	str	r1, [r7, #8]
 800b5a8:	4611      	mov	r1, r2
 800b5aa:	461a      	mov	r2, r3
 800b5ac:	460b      	mov	r3, r1
 800b5ae:	71fb      	strb	r3, [r7, #7]
 800b5b0:	4613      	mov	r3, r2
 800b5b2:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b5b4:	68fb      	ldr	r3, [r7, #12]
 800b5b6:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 800b5b8:	68bb      	ldr	r3, [r7, #8]
 800b5ba:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 800b5bc:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800b5c0:	2b00      	cmp	r3, #0
 800b5c2:	d11a      	bne.n	800b5fa <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800b5c4:	88bb      	ldrh	r3, [r7, #4]
 800b5c6:	3303      	adds	r3, #3
 800b5c8:	089b      	lsrs	r3, r3, #2
 800b5ca:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800b5cc:	2300      	movs	r3, #0
 800b5ce:	61bb      	str	r3, [r7, #24]
 800b5d0:	e00f      	b.n	800b5f2 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800b5d2:	79fb      	ldrb	r3, [r7, #7]
 800b5d4:	031a      	lsls	r2, r3, #12
 800b5d6:	697b      	ldr	r3, [r7, #20]
 800b5d8:	4413      	add	r3, r2
 800b5da:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b5de:	461a      	mov	r2, r3
 800b5e0:	69fb      	ldr	r3, [r7, #28]
 800b5e2:	681b      	ldr	r3, [r3, #0]
 800b5e4:	6013      	str	r3, [r2, #0]
      pSrc++;
 800b5e6:	69fb      	ldr	r3, [r7, #28]
 800b5e8:	3304      	adds	r3, #4
 800b5ea:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800b5ec:	69bb      	ldr	r3, [r7, #24]
 800b5ee:	3301      	adds	r3, #1
 800b5f0:	61bb      	str	r3, [r7, #24]
 800b5f2:	69ba      	ldr	r2, [r7, #24]
 800b5f4:	693b      	ldr	r3, [r7, #16]
 800b5f6:	429a      	cmp	r2, r3
 800b5f8:	d3eb      	bcc.n	800b5d2 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800b5fa:	2300      	movs	r3, #0
}
 800b5fc:	4618      	mov	r0, r3
 800b5fe:	3724      	adds	r7, #36	; 0x24
 800b600:	46bd      	mov	sp, r7
 800b602:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b606:	4770      	bx	lr

0800b608 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800b608:	b480      	push	{r7}
 800b60a:	b089      	sub	sp, #36	; 0x24
 800b60c:	af00      	add	r7, sp, #0
 800b60e:	60f8      	str	r0, [r7, #12]
 800b610:	60b9      	str	r1, [r7, #8]
 800b612:	4613      	mov	r3, r2
 800b614:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b616:	68fb      	ldr	r3, [r7, #12]
 800b618:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 800b61a:	68bb      	ldr	r3, [r7, #8]
 800b61c:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 800b61e:	88fb      	ldrh	r3, [r7, #6]
 800b620:	3303      	adds	r3, #3
 800b622:	089b      	lsrs	r3, r3, #2
 800b624:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 800b626:	2300      	movs	r3, #0
 800b628:	61bb      	str	r3, [r7, #24]
 800b62a:	e00b      	b.n	800b644 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800b62c:	697b      	ldr	r3, [r7, #20]
 800b62e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b632:	681a      	ldr	r2, [r3, #0]
 800b634:	69fb      	ldr	r3, [r7, #28]
 800b636:	601a      	str	r2, [r3, #0]
    pDest++;
 800b638:	69fb      	ldr	r3, [r7, #28]
 800b63a:	3304      	adds	r3, #4
 800b63c:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800b63e:	69bb      	ldr	r3, [r7, #24]
 800b640:	3301      	adds	r3, #1
 800b642:	61bb      	str	r3, [r7, #24]
 800b644:	69ba      	ldr	r2, [r7, #24]
 800b646:	693b      	ldr	r3, [r7, #16]
 800b648:	429a      	cmp	r2, r3
 800b64a:	d3ef      	bcc.n	800b62c <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 800b64c:	69fb      	ldr	r3, [r7, #28]
}
 800b64e:	4618      	mov	r0, r3
 800b650:	3724      	adds	r7, #36	; 0x24
 800b652:	46bd      	mov	sp, r7
 800b654:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b658:	4770      	bx	lr

0800b65a <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800b65a:	b480      	push	{r7}
 800b65c:	b085      	sub	sp, #20
 800b65e:	af00      	add	r7, sp, #0
 800b660:	6078      	str	r0, [r7, #4]
 800b662:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b664:	687b      	ldr	r3, [r7, #4]
 800b666:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800b668:	683b      	ldr	r3, [r7, #0]
 800b66a:	781b      	ldrb	r3, [r3, #0]
 800b66c:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800b66e:	683b      	ldr	r3, [r7, #0]
 800b670:	785b      	ldrb	r3, [r3, #1]
 800b672:	2b01      	cmp	r3, #1
 800b674:	d12c      	bne.n	800b6d0 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800b676:	68bb      	ldr	r3, [r7, #8]
 800b678:	015a      	lsls	r2, r3, #5
 800b67a:	68fb      	ldr	r3, [r7, #12]
 800b67c:	4413      	add	r3, r2
 800b67e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b682:	681b      	ldr	r3, [r3, #0]
 800b684:	2b00      	cmp	r3, #0
 800b686:	db12      	blt.n	800b6ae <USB_EPSetStall+0x54>
 800b688:	68bb      	ldr	r3, [r7, #8]
 800b68a:	2b00      	cmp	r3, #0
 800b68c:	d00f      	beq.n	800b6ae <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800b68e:	68bb      	ldr	r3, [r7, #8]
 800b690:	015a      	lsls	r2, r3, #5
 800b692:	68fb      	ldr	r3, [r7, #12]
 800b694:	4413      	add	r3, r2
 800b696:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b69a:	681b      	ldr	r3, [r3, #0]
 800b69c:	68ba      	ldr	r2, [r7, #8]
 800b69e:	0151      	lsls	r1, r2, #5
 800b6a0:	68fa      	ldr	r2, [r7, #12]
 800b6a2:	440a      	add	r2, r1
 800b6a4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b6a8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800b6ac:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800b6ae:	68bb      	ldr	r3, [r7, #8]
 800b6b0:	015a      	lsls	r2, r3, #5
 800b6b2:	68fb      	ldr	r3, [r7, #12]
 800b6b4:	4413      	add	r3, r2
 800b6b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b6ba:	681b      	ldr	r3, [r3, #0]
 800b6bc:	68ba      	ldr	r2, [r7, #8]
 800b6be:	0151      	lsls	r1, r2, #5
 800b6c0:	68fa      	ldr	r2, [r7, #12]
 800b6c2:	440a      	add	r2, r1
 800b6c4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b6c8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800b6cc:	6013      	str	r3, [r2, #0]
 800b6ce:	e02b      	b.n	800b728 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800b6d0:	68bb      	ldr	r3, [r7, #8]
 800b6d2:	015a      	lsls	r2, r3, #5
 800b6d4:	68fb      	ldr	r3, [r7, #12]
 800b6d6:	4413      	add	r3, r2
 800b6d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b6dc:	681b      	ldr	r3, [r3, #0]
 800b6de:	2b00      	cmp	r3, #0
 800b6e0:	db12      	blt.n	800b708 <USB_EPSetStall+0xae>
 800b6e2:	68bb      	ldr	r3, [r7, #8]
 800b6e4:	2b00      	cmp	r3, #0
 800b6e6:	d00f      	beq.n	800b708 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800b6e8:	68bb      	ldr	r3, [r7, #8]
 800b6ea:	015a      	lsls	r2, r3, #5
 800b6ec:	68fb      	ldr	r3, [r7, #12]
 800b6ee:	4413      	add	r3, r2
 800b6f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b6f4:	681b      	ldr	r3, [r3, #0]
 800b6f6:	68ba      	ldr	r2, [r7, #8]
 800b6f8:	0151      	lsls	r1, r2, #5
 800b6fa:	68fa      	ldr	r2, [r7, #12]
 800b6fc:	440a      	add	r2, r1
 800b6fe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b702:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800b706:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800b708:	68bb      	ldr	r3, [r7, #8]
 800b70a:	015a      	lsls	r2, r3, #5
 800b70c:	68fb      	ldr	r3, [r7, #12]
 800b70e:	4413      	add	r3, r2
 800b710:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b714:	681b      	ldr	r3, [r3, #0]
 800b716:	68ba      	ldr	r2, [r7, #8]
 800b718:	0151      	lsls	r1, r2, #5
 800b71a:	68fa      	ldr	r2, [r7, #12]
 800b71c:	440a      	add	r2, r1
 800b71e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b722:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800b726:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800b728:	2300      	movs	r3, #0
}
 800b72a:	4618      	mov	r0, r3
 800b72c:	3714      	adds	r7, #20
 800b72e:	46bd      	mov	sp, r7
 800b730:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b734:	4770      	bx	lr

0800b736 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800b736:	b480      	push	{r7}
 800b738:	b085      	sub	sp, #20
 800b73a:	af00      	add	r7, sp, #0
 800b73c:	6078      	str	r0, [r7, #4]
 800b73e:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b740:	687b      	ldr	r3, [r7, #4]
 800b742:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800b744:	683b      	ldr	r3, [r7, #0]
 800b746:	781b      	ldrb	r3, [r3, #0]
 800b748:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800b74a:	683b      	ldr	r3, [r7, #0]
 800b74c:	785b      	ldrb	r3, [r3, #1]
 800b74e:	2b01      	cmp	r3, #1
 800b750:	d128      	bne.n	800b7a4 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800b752:	68bb      	ldr	r3, [r7, #8]
 800b754:	015a      	lsls	r2, r3, #5
 800b756:	68fb      	ldr	r3, [r7, #12]
 800b758:	4413      	add	r3, r2
 800b75a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b75e:	681b      	ldr	r3, [r3, #0]
 800b760:	68ba      	ldr	r2, [r7, #8]
 800b762:	0151      	lsls	r1, r2, #5
 800b764:	68fa      	ldr	r2, [r7, #12]
 800b766:	440a      	add	r2, r1
 800b768:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b76c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800b770:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800b772:	683b      	ldr	r3, [r7, #0]
 800b774:	78db      	ldrb	r3, [r3, #3]
 800b776:	2b03      	cmp	r3, #3
 800b778:	d003      	beq.n	800b782 <USB_EPClearStall+0x4c>
 800b77a:	683b      	ldr	r3, [r7, #0]
 800b77c:	78db      	ldrb	r3, [r3, #3]
 800b77e:	2b02      	cmp	r3, #2
 800b780:	d138      	bne.n	800b7f4 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800b782:	68bb      	ldr	r3, [r7, #8]
 800b784:	015a      	lsls	r2, r3, #5
 800b786:	68fb      	ldr	r3, [r7, #12]
 800b788:	4413      	add	r3, r2
 800b78a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b78e:	681b      	ldr	r3, [r3, #0]
 800b790:	68ba      	ldr	r2, [r7, #8]
 800b792:	0151      	lsls	r1, r2, #5
 800b794:	68fa      	ldr	r2, [r7, #12]
 800b796:	440a      	add	r2, r1
 800b798:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b79c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b7a0:	6013      	str	r3, [r2, #0]
 800b7a2:	e027      	b.n	800b7f4 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800b7a4:	68bb      	ldr	r3, [r7, #8]
 800b7a6:	015a      	lsls	r2, r3, #5
 800b7a8:	68fb      	ldr	r3, [r7, #12]
 800b7aa:	4413      	add	r3, r2
 800b7ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b7b0:	681b      	ldr	r3, [r3, #0]
 800b7b2:	68ba      	ldr	r2, [r7, #8]
 800b7b4:	0151      	lsls	r1, r2, #5
 800b7b6:	68fa      	ldr	r2, [r7, #12]
 800b7b8:	440a      	add	r2, r1
 800b7ba:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b7be:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800b7c2:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800b7c4:	683b      	ldr	r3, [r7, #0]
 800b7c6:	78db      	ldrb	r3, [r3, #3]
 800b7c8:	2b03      	cmp	r3, #3
 800b7ca:	d003      	beq.n	800b7d4 <USB_EPClearStall+0x9e>
 800b7cc:	683b      	ldr	r3, [r7, #0]
 800b7ce:	78db      	ldrb	r3, [r3, #3]
 800b7d0:	2b02      	cmp	r3, #2
 800b7d2:	d10f      	bne.n	800b7f4 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800b7d4:	68bb      	ldr	r3, [r7, #8]
 800b7d6:	015a      	lsls	r2, r3, #5
 800b7d8:	68fb      	ldr	r3, [r7, #12]
 800b7da:	4413      	add	r3, r2
 800b7dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b7e0:	681b      	ldr	r3, [r3, #0]
 800b7e2:	68ba      	ldr	r2, [r7, #8]
 800b7e4:	0151      	lsls	r1, r2, #5
 800b7e6:	68fa      	ldr	r2, [r7, #12]
 800b7e8:	440a      	add	r2, r1
 800b7ea:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b7ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b7f2:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800b7f4:	2300      	movs	r3, #0
}
 800b7f6:	4618      	mov	r0, r3
 800b7f8:	3714      	adds	r7, #20
 800b7fa:	46bd      	mov	sp, r7
 800b7fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b800:	4770      	bx	lr

0800b802 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800b802:	b480      	push	{r7}
 800b804:	b085      	sub	sp, #20
 800b806:	af00      	add	r7, sp, #0
 800b808:	6078      	str	r0, [r7, #4]
 800b80a:	460b      	mov	r3, r1
 800b80c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b80e:	687b      	ldr	r3, [r7, #4]
 800b810:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800b812:	68fb      	ldr	r3, [r7, #12]
 800b814:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b818:	681b      	ldr	r3, [r3, #0]
 800b81a:	68fa      	ldr	r2, [r7, #12]
 800b81c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b820:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800b824:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800b826:	68fb      	ldr	r3, [r7, #12]
 800b828:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b82c:	681a      	ldr	r2, [r3, #0]
 800b82e:	78fb      	ldrb	r3, [r7, #3]
 800b830:	011b      	lsls	r3, r3, #4
 800b832:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800b836:	68f9      	ldr	r1, [r7, #12]
 800b838:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b83c:	4313      	orrs	r3, r2
 800b83e:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800b840:	2300      	movs	r3, #0
}
 800b842:	4618      	mov	r0, r3
 800b844:	3714      	adds	r7, #20
 800b846:	46bd      	mov	sp, r7
 800b848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b84c:	4770      	bx	lr

0800b84e <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800b84e:	b580      	push	{r7, lr}
 800b850:	b084      	sub	sp, #16
 800b852:	af00      	add	r7, sp, #0
 800b854:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b856:	687b      	ldr	r3, [r7, #4]
 800b858:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800b85a:	68fb      	ldr	r3, [r7, #12]
 800b85c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b860:	685b      	ldr	r3, [r3, #4]
 800b862:	68fa      	ldr	r2, [r7, #12]
 800b864:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b868:	f023 0302 	bic.w	r3, r3, #2
 800b86c:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 800b86e:	2003      	movs	r0, #3
 800b870:	f7f8 f9c2 	bl	8003bf8 <HAL_Delay>

  return HAL_OK;
 800b874:	2300      	movs	r3, #0
}
 800b876:	4618      	mov	r0, r3
 800b878:	3710      	adds	r7, #16
 800b87a:	46bd      	mov	sp, r7
 800b87c:	bd80      	pop	{r7, pc}

0800b87e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800b87e:	b580      	push	{r7, lr}
 800b880:	b084      	sub	sp, #16
 800b882:	af00      	add	r7, sp, #0
 800b884:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b886:	687b      	ldr	r3, [r7, #4]
 800b888:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800b88a:	68fb      	ldr	r3, [r7, #12]
 800b88c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b890:	685b      	ldr	r3, [r3, #4]
 800b892:	68fa      	ldr	r2, [r7, #12]
 800b894:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b898:	f043 0302 	orr.w	r3, r3, #2
 800b89c:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 800b89e:	2003      	movs	r0, #3
 800b8a0:	f7f8 f9aa 	bl	8003bf8 <HAL_Delay>

  return HAL_OK;
 800b8a4:	2300      	movs	r3, #0
}
 800b8a6:	4618      	mov	r0, r3
 800b8a8:	3710      	adds	r7, #16
 800b8aa:	46bd      	mov	sp, r7
 800b8ac:	bd80      	pop	{r7, pc}

0800b8ae <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800b8ae:	b480      	push	{r7}
 800b8b0:	b085      	sub	sp, #20
 800b8b2:	af00      	add	r7, sp, #0
 800b8b4:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800b8b6:	687b      	ldr	r3, [r7, #4]
 800b8b8:	695b      	ldr	r3, [r3, #20]
 800b8ba:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800b8bc:	687b      	ldr	r3, [r7, #4]
 800b8be:	699b      	ldr	r3, [r3, #24]
 800b8c0:	68fa      	ldr	r2, [r7, #12]
 800b8c2:	4013      	ands	r3, r2
 800b8c4:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800b8c6:	68fb      	ldr	r3, [r7, #12]
}
 800b8c8:	4618      	mov	r0, r3
 800b8ca:	3714      	adds	r7, #20
 800b8cc:	46bd      	mov	sp, r7
 800b8ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8d2:	4770      	bx	lr

0800b8d4 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800b8d4:	b480      	push	{r7}
 800b8d6:	b085      	sub	sp, #20
 800b8d8:	af00      	add	r7, sp, #0
 800b8da:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b8dc:	687b      	ldr	r3, [r7, #4]
 800b8de:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800b8e0:	68fb      	ldr	r3, [r7, #12]
 800b8e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b8e6:	699b      	ldr	r3, [r3, #24]
 800b8e8:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800b8ea:	68fb      	ldr	r3, [r7, #12]
 800b8ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b8f0:	69db      	ldr	r3, [r3, #28]
 800b8f2:	68ba      	ldr	r2, [r7, #8]
 800b8f4:	4013      	ands	r3, r2
 800b8f6:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800b8f8:	68bb      	ldr	r3, [r7, #8]
 800b8fa:	0c1b      	lsrs	r3, r3, #16
}
 800b8fc:	4618      	mov	r0, r3
 800b8fe:	3714      	adds	r7, #20
 800b900:	46bd      	mov	sp, r7
 800b902:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b906:	4770      	bx	lr

0800b908 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800b908:	b480      	push	{r7}
 800b90a:	b085      	sub	sp, #20
 800b90c:	af00      	add	r7, sp, #0
 800b90e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b910:	687b      	ldr	r3, [r7, #4]
 800b912:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800b914:	68fb      	ldr	r3, [r7, #12]
 800b916:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b91a:	699b      	ldr	r3, [r3, #24]
 800b91c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800b91e:	68fb      	ldr	r3, [r7, #12]
 800b920:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b924:	69db      	ldr	r3, [r3, #28]
 800b926:	68ba      	ldr	r2, [r7, #8]
 800b928:	4013      	ands	r3, r2
 800b92a:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800b92c:	68bb      	ldr	r3, [r7, #8]
 800b92e:	b29b      	uxth	r3, r3
}
 800b930:	4618      	mov	r0, r3
 800b932:	3714      	adds	r7, #20
 800b934:	46bd      	mov	sp, r7
 800b936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b93a:	4770      	bx	lr

0800b93c <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800b93c:	b480      	push	{r7}
 800b93e:	b085      	sub	sp, #20
 800b940:	af00      	add	r7, sp, #0
 800b942:	6078      	str	r0, [r7, #4]
 800b944:	460b      	mov	r3, r1
 800b946:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b948:	687b      	ldr	r3, [r7, #4]
 800b94a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800b94c:	78fb      	ldrb	r3, [r7, #3]
 800b94e:	015a      	lsls	r2, r3, #5
 800b950:	68fb      	ldr	r3, [r7, #12]
 800b952:	4413      	add	r3, r2
 800b954:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b958:	689b      	ldr	r3, [r3, #8]
 800b95a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800b95c:	68fb      	ldr	r3, [r7, #12]
 800b95e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b962:	695b      	ldr	r3, [r3, #20]
 800b964:	68ba      	ldr	r2, [r7, #8]
 800b966:	4013      	ands	r3, r2
 800b968:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800b96a:	68bb      	ldr	r3, [r7, #8]
}
 800b96c:	4618      	mov	r0, r3
 800b96e:	3714      	adds	r7, #20
 800b970:	46bd      	mov	sp, r7
 800b972:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b976:	4770      	bx	lr

0800b978 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800b978:	b480      	push	{r7}
 800b97a:	b087      	sub	sp, #28
 800b97c:	af00      	add	r7, sp, #0
 800b97e:	6078      	str	r0, [r7, #4]
 800b980:	460b      	mov	r3, r1
 800b982:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b984:	687b      	ldr	r3, [r7, #4]
 800b986:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 800b988:	697b      	ldr	r3, [r7, #20]
 800b98a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b98e:	691b      	ldr	r3, [r3, #16]
 800b990:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800b992:	697b      	ldr	r3, [r7, #20]
 800b994:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b998:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b99a:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800b99c:	78fb      	ldrb	r3, [r7, #3]
 800b99e:	f003 030f 	and.w	r3, r3, #15
 800b9a2:	68fa      	ldr	r2, [r7, #12]
 800b9a4:	fa22 f303 	lsr.w	r3, r2, r3
 800b9a8:	01db      	lsls	r3, r3, #7
 800b9aa:	b2db      	uxtb	r3, r3
 800b9ac:	693a      	ldr	r2, [r7, #16]
 800b9ae:	4313      	orrs	r3, r2
 800b9b0:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800b9b2:	78fb      	ldrb	r3, [r7, #3]
 800b9b4:	015a      	lsls	r2, r3, #5
 800b9b6:	697b      	ldr	r3, [r7, #20]
 800b9b8:	4413      	add	r3, r2
 800b9ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b9be:	689b      	ldr	r3, [r3, #8]
 800b9c0:	693a      	ldr	r2, [r7, #16]
 800b9c2:	4013      	ands	r3, r2
 800b9c4:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800b9c6:	68bb      	ldr	r3, [r7, #8]
}
 800b9c8:	4618      	mov	r0, r3
 800b9ca:	371c      	adds	r7, #28
 800b9cc:	46bd      	mov	sp, r7
 800b9ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9d2:	4770      	bx	lr

0800b9d4 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800b9d4:	b480      	push	{r7}
 800b9d6:	b083      	sub	sp, #12
 800b9d8:	af00      	add	r7, sp, #0
 800b9da:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800b9dc:	687b      	ldr	r3, [r7, #4]
 800b9de:	695b      	ldr	r3, [r3, #20]
 800b9e0:	f003 0301 	and.w	r3, r3, #1
}
 800b9e4:	4618      	mov	r0, r3
 800b9e6:	370c      	adds	r7, #12
 800b9e8:	46bd      	mov	sp, r7
 800b9ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9ee:	4770      	bx	lr

0800b9f0 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800b9f0:	b480      	push	{r7}
 800b9f2:	b085      	sub	sp, #20
 800b9f4:	af00      	add	r7, sp, #0
 800b9f6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b9f8:	687b      	ldr	r3, [r7, #4]
 800b9fa:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP based on the enumeration speed */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800b9fc:	68fb      	ldr	r3, [r7, #12]
 800b9fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ba02:	681b      	ldr	r3, [r3, #0]
 800ba04:	68fa      	ldr	r2, [r7, #12]
 800ba06:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ba0a:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800ba0e:	f023 0307 	bic.w	r3, r3, #7
 800ba12:	6013      	str	r3, [r2, #0]

  if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_LS_PHY_6MHZ)
 800ba14:	68fb      	ldr	r3, [r7, #12]
 800ba16:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ba1a:	689b      	ldr	r3, [r3, #8]
 800ba1c:	f003 0306 	and.w	r3, r3, #6
 800ba20:	2b04      	cmp	r3, #4
 800ba22:	d109      	bne.n	800ba38 <USB_ActivateSetup+0x48>
  {
    USBx_INEP(0U)->DIEPCTL |= 3U;
 800ba24:	68fb      	ldr	r3, [r7, #12]
 800ba26:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ba2a:	681b      	ldr	r3, [r3, #0]
 800ba2c:	68fa      	ldr	r2, [r7, #12]
 800ba2e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ba32:	f043 0303 	orr.w	r3, r3, #3
 800ba36:	6013      	str	r3, [r2, #0]
  }
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800ba38:	68fb      	ldr	r3, [r7, #12]
 800ba3a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ba3e:	685b      	ldr	r3, [r3, #4]
 800ba40:	68fa      	ldr	r2, [r7, #12]
 800ba42:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800ba46:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ba4a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800ba4c:	2300      	movs	r3, #0
}
 800ba4e:	4618      	mov	r0, r3
 800ba50:	3714      	adds	r7, #20
 800ba52:	46bd      	mov	sp, r7
 800ba54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba58:	4770      	bx	lr
	...

0800ba5c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800ba5c:	b480      	push	{r7}
 800ba5e:	b087      	sub	sp, #28
 800ba60:	af00      	add	r7, sp, #0
 800ba62:	60f8      	str	r0, [r7, #12]
 800ba64:	460b      	mov	r3, r1
 800ba66:	607a      	str	r2, [r7, #4]
 800ba68:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ba6a:	68fb      	ldr	r3, [r7, #12]
 800ba6c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800ba6e:	68fb      	ldr	r3, [r7, #12]
 800ba70:	333c      	adds	r3, #60	; 0x3c
 800ba72:	3304      	adds	r3, #4
 800ba74:	681b      	ldr	r3, [r3, #0]
 800ba76:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800ba78:	693b      	ldr	r3, [r7, #16]
 800ba7a:	4a26      	ldr	r2, [pc, #152]	; (800bb14 <USB_EP0_OutStart+0xb8>)
 800ba7c:	4293      	cmp	r3, r2
 800ba7e:	d90a      	bls.n	800ba96 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800ba80:	697b      	ldr	r3, [r7, #20]
 800ba82:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ba86:	681b      	ldr	r3, [r3, #0]
 800ba88:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800ba8c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ba90:	d101      	bne.n	800ba96 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800ba92:	2300      	movs	r3, #0
 800ba94:	e037      	b.n	800bb06 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800ba96:	697b      	ldr	r3, [r7, #20]
 800ba98:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ba9c:	461a      	mov	r2, r3
 800ba9e:	2300      	movs	r3, #0
 800baa0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800baa2:	697b      	ldr	r3, [r7, #20]
 800baa4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800baa8:	691b      	ldr	r3, [r3, #16]
 800baaa:	697a      	ldr	r2, [r7, #20]
 800baac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bab0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800bab4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800bab6:	697b      	ldr	r3, [r7, #20]
 800bab8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800babc:	691b      	ldr	r3, [r3, #16]
 800babe:	697a      	ldr	r2, [r7, #20]
 800bac0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bac4:	f043 0318 	orr.w	r3, r3, #24
 800bac8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800baca:	697b      	ldr	r3, [r7, #20]
 800bacc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bad0:	691b      	ldr	r3, [r3, #16]
 800bad2:	697a      	ldr	r2, [r7, #20]
 800bad4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bad8:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800badc:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800bade:	7afb      	ldrb	r3, [r7, #11]
 800bae0:	2b01      	cmp	r3, #1
 800bae2:	d10f      	bne.n	800bb04 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800bae4:	697b      	ldr	r3, [r7, #20]
 800bae6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800baea:	461a      	mov	r2, r3
 800baec:	687b      	ldr	r3, [r7, #4]
 800baee:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800baf0:	697b      	ldr	r3, [r7, #20]
 800baf2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800baf6:	681b      	ldr	r3, [r3, #0]
 800baf8:	697a      	ldr	r2, [r7, #20]
 800bafa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bafe:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800bb02:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800bb04:	2300      	movs	r3, #0
}
 800bb06:	4618      	mov	r0, r3
 800bb08:	371c      	adds	r7, #28
 800bb0a:	46bd      	mov	sp, r7
 800bb0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb10:	4770      	bx	lr
 800bb12:	bf00      	nop
 800bb14:	4f54300a 	.word	0x4f54300a

0800bb18 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800bb18:	b480      	push	{r7}
 800bb1a:	b085      	sub	sp, #20
 800bb1c:	af00      	add	r7, sp, #0
 800bb1e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800bb20:	2300      	movs	r3, #0
 800bb22:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800bb24:	68fb      	ldr	r3, [r7, #12]
 800bb26:	3301      	adds	r3, #1
 800bb28:	60fb      	str	r3, [r7, #12]
 800bb2a:	68fb      	ldr	r3, [r7, #12]
 800bb2c:	4a13      	ldr	r2, [pc, #76]	; (800bb7c <USB_CoreReset+0x64>)
 800bb2e:	4293      	cmp	r3, r2
 800bb30:	d901      	bls.n	800bb36 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800bb32:	2303      	movs	r3, #3
 800bb34:	e01b      	b.n	800bb6e <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800bb36:	687b      	ldr	r3, [r7, #4]
 800bb38:	691b      	ldr	r3, [r3, #16]
 800bb3a:	2b00      	cmp	r3, #0
 800bb3c:	daf2      	bge.n	800bb24 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800bb3e:	2300      	movs	r3, #0
 800bb40:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800bb42:	687b      	ldr	r3, [r7, #4]
 800bb44:	691b      	ldr	r3, [r3, #16]
 800bb46:	f043 0201 	orr.w	r2, r3, #1
 800bb4a:	687b      	ldr	r3, [r7, #4]
 800bb4c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800bb4e:	68fb      	ldr	r3, [r7, #12]
 800bb50:	3301      	adds	r3, #1
 800bb52:	60fb      	str	r3, [r7, #12]
 800bb54:	68fb      	ldr	r3, [r7, #12]
 800bb56:	4a09      	ldr	r2, [pc, #36]	; (800bb7c <USB_CoreReset+0x64>)
 800bb58:	4293      	cmp	r3, r2
 800bb5a:	d901      	bls.n	800bb60 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800bb5c:	2303      	movs	r3, #3
 800bb5e:	e006      	b.n	800bb6e <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800bb60:	687b      	ldr	r3, [r7, #4]
 800bb62:	691b      	ldr	r3, [r3, #16]
 800bb64:	f003 0301 	and.w	r3, r3, #1
 800bb68:	2b01      	cmp	r3, #1
 800bb6a:	d0f0      	beq.n	800bb4e <USB_CoreReset+0x36>

  return HAL_OK;
 800bb6c:	2300      	movs	r3, #0
}
 800bb6e:	4618      	mov	r0, r3
 800bb70:	3714      	adds	r7, #20
 800bb72:	46bd      	mov	sp, r7
 800bb74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb78:	4770      	bx	lr
 800bb7a:	bf00      	nop
 800bb7c:	00030d40 	.word	0x00030d40

0800bb80 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */    

void MX_FATFS_Init(void) 
{
 800bb80:	b580      	push	{r7, lr}
 800bb82:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800bb84:	4904      	ldr	r1, [pc, #16]	; (800bb98 <MX_FATFS_Init+0x18>)
 800bb86:	4805      	ldr	r0, [pc, #20]	; (800bb9c <MX_FATFS_Init+0x1c>)
 800bb88:	f001 fe36 	bl	800d7f8 <FATFS_LinkDriver>
 800bb8c:	4603      	mov	r3, r0
 800bb8e:	461a      	mov	r2, r3
 800bb90:	4b03      	ldr	r3, [pc, #12]	; (800bba0 <MX_FATFS_Init+0x20>)
 800bb92:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */     
  /* USER CODE END Init */
}
 800bb94:	bf00      	nop
 800bb96:	bd80      	pop	{r7, pc}
 800bb98:	20001288 	.word	0x20001288
 800bb9c:	080126dc 	.word	0x080126dc
 800bba0:	20001284 	.word	0x20001284

0800bba4 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800bba4:	b580      	push	{r7, lr}
 800bba6:	b082      	sub	sp, #8
 800bba8:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800bbaa:	2300      	movs	r3, #0
 800bbac:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800bbae:	f000 f871 	bl	800bc94 <BSP_SD_IsDetected>
 800bbb2:	4603      	mov	r3, r0
 800bbb4:	2b01      	cmp	r3, #1
 800bbb6:	d001      	beq.n	800bbbc <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 800bbb8:	2301      	movs	r3, #1
 800bbba:	e012      	b.n	800bbe2 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 800bbbc:	480b      	ldr	r0, [pc, #44]	; (800bbec <BSP_SD_Init+0x48>)
 800bbbe:	f7fa ffa0 	bl	8006b02 <HAL_SD_Init>
 800bbc2:	4603      	mov	r3, r0
 800bbc4:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800bbc6:	79fb      	ldrb	r3, [r7, #7]
 800bbc8:	2b00      	cmp	r3, #0
 800bbca:	d109      	bne.n	800bbe0 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 800bbcc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800bbd0:	4806      	ldr	r0, [pc, #24]	; (800bbec <BSP_SD_Init+0x48>)
 800bbd2:	f7fb fd7f 	bl	80076d4 <HAL_SD_ConfigWideBusOperation>
 800bbd6:	4603      	mov	r3, r0
 800bbd8:	2b00      	cmp	r3, #0
 800bbda:	d001      	beq.n	800bbe0 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 800bbdc:	2301      	movs	r3, #1
 800bbde:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 800bbe0:	79fb      	ldrb	r3, [r7, #7]
}
 800bbe2:	4618      	mov	r0, r3
 800bbe4:	3708      	adds	r7, #8
 800bbe6:	46bd      	mov	sp, r7
 800bbe8:	bd80      	pop	{r7, pc}
 800bbea:	bf00      	nop
 800bbec:	200010a4 	.word	0x200010a4

0800bbf0 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read 
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 800bbf0:	b580      	push	{r7, lr}
 800bbf2:	b086      	sub	sp, #24
 800bbf4:	af00      	add	r7, sp, #0
 800bbf6:	60f8      	str	r0, [r7, #12]
 800bbf8:	60b9      	str	r1, [r7, #8]
 800bbfa:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800bbfc:	2300      	movs	r3, #0
 800bbfe:	75fb      	strb	r3, [r7, #23]
  
  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 800bc00:	687b      	ldr	r3, [r7, #4]
 800bc02:	68ba      	ldr	r2, [r7, #8]
 800bc04:	68f9      	ldr	r1, [r7, #12]
 800bc06:	4806      	ldr	r0, [pc, #24]	; (800bc20 <BSP_SD_ReadBlocks_DMA+0x30>)
 800bc08:	f7fb f80c 	bl	8006c24 <HAL_SD_ReadBlocks_DMA>
 800bc0c:	4603      	mov	r3, r0
 800bc0e:	2b00      	cmp	r3, #0
 800bc10:	d001      	beq.n	800bc16 <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800bc12:	2301      	movs	r3, #1
 800bc14:	75fb      	strb	r3, [r7, #23]
  }
  
  return sd_state; 
 800bc16:	7dfb      	ldrb	r3, [r7, #23]
}
 800bc18:	4618      	mov	r0, r3
 800bc1a:	3718      	adds	r7, #24
 800bc1c:	46bd      	mov	sp, r7
 800bc1e:	bd80      	pop	{r7, pc}
 800bc20:	200010a4 	.word	0x200010a4

0800bc24 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write 
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 800bc24:	b580      	push	{r7, lr}
 800bc26:	b086      	sub	sp, #24
 800bc28:	af00      	add	r7, sp, #0
 800bc2a:	60f8      	str	r0, [r7, #12]
 800bc2c:	60b9      	str	r1, [r7, #8]
 800bc2e:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800bc30:	2300      	movs	r3, #0
 800bc32:	75fb      	strb	r3, [r7, #23]
  
  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 800bc34:	687b      	ldr	r3, [r7, #4]
 800bc36:	68ba      	ldr	r2, [r7, #8]
 800bc38:	68f9      	ldr	r1, [r7, #12]
 800bc3a:	4806      	ldr	r0, [pc, #24]	; (800bc54 <BSP_SD_WriteBlocks_DMA+0x30>)
 800bc3c:	f7fb f8dc 	bl	8006df8 <HAL_SD_WriteBlocks_DMA>
 800bc40:	4603      	mov	r3, r0
 800bc42:	2b00      	cmp	r3, #0
 800bc44:	d001      	beq.n	800bc4a <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800bc46:	2301      	movs	r3, #1
 800bc48:	75fb      	strb	r3, [r7, #23]
  }
  
  return sd_state; 
 800bc4a:	7dfb      	ldrb	r3, [r7, #23]
}
 800bc4c:	4618      	mov	r0, r3
 800bc4e:	3718      	adds	r7, #24
 800bc50:	46bd      	mov	sp, r7
 800bc52:	bd80      	pop	{r7, pc}
 800bc54:	200010a4 	.word	0x200010a4

0800bc58 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800bc58:	b580      	push	{r7, lr}
 800bc5a:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800bc5c:	4805      	ldr	r0, [pc, #20]	; (800bc74 <BSP_SD_GetCardState+0x1c>)
 800bc5e:	f7fb fdb5 	bl	80077cc <HAL_SD_GetCardState>
 800bc62:	4603      	mov	r3, r0
 800bc64:	2b04      	cmp	r3, #4
 800bc66:	bf14      	ite	ne
 800bc68:	2301      	movne	r3, #1
 800bc6a:	2300      	moveq	r3, #0
 800bc6c:	b2db      	uxtb	r3, r3
}
 800bc6e:	4618      	mov	r0, r3
 800bc70:	bd80      	pop	{r7, pc}
 800bc72:	bf00      	nop
 800bc74:	200010a4 	.word	0x200010a4

0800bc78 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None 
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800bc78:	b580      	push	{r7, lr}
 800bc7a:	b082      	sub	sp, #8
 800bc7c:	af00      	add	r7, sp, #0
 800bc7e:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 800bc80:	6879      	ldr	r1, [r7, #4]
 800bc82:	4803      	ldr	r0, [pc, #12]	; (800bc90 <BSP_SD_GetCardInfo+0x18>)
 800bc84:	f7fb fcfa 	bl	800767c <HAL_SD_GetCardInfo>
}
 800bc88:	bf00      	nop
 800bc8a:	3708      	adds	r7, #8
 800bc8c:	46bd      	mov	sp, r7
 800bc8e:	bd80      	pop	{r7, pc}
 800bc90:	200010a4 	.word	0x200010a4

0800bc94 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800bc94:	b580      	push	{r7, lr}
 800bc96:	b082      	sub	sp, #8
 800bc98:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800bc9a:	2301      	movs	r3, #1
 800bc9c:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0) 
 800bc9e:	f000 f80b 	bl	800bcb8 <BSP_PlatformIsDetected>
 800bca2:	4603      	mov	r3, r0
 800bca4:	2b00      	cmp	r3, #0
 800bca6:	d101      	bne.n	800bcac <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800bca8:	2300      	movs	r3, #0
 800bcaa:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800bcac:	79fb      	ldrb	r3, [r7, #7]
 800bcae:	b2db      	uxtb	r3, r3
}
 800bcb0:	4618      	mov	r0, r3
 800bcb2:	3708      	adds	r7, #8
 800bcb4:	46bd      	mov	sp, r7
 800bcb6:	bd80      	pop	{r7, pc}

0800bcb8 <BSP_PlatformIsDetected>:
  *
  ******************************************************************************
*/
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800bcb8:	b580      	push	{r7, lr}
 800bcba:	b082      	sub	sp, #8
 800bcbc:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800bcbe:	2301      	movs	r3, #1
 800bcc0:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800bcc2:	f44f 7180 	mov.w	r1, #256	; 0x100
 800bcc6:	4806      	ldr	r0, [pc, #24]	; (800bce0 <BSP_PlatformIsDetected+0x28>)
 800bcc8:	f7f8 fe00 	bl	80048cc <HAL_GPIO_ReadPin>
 800bccc:	4603      	mov	r3, r0
 800bcce:	2b00      	cmp	r3, #0
 800bcd0:	d001      	beq.n	800bcd6 <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 800bcd2:	2300      	movs	r3, #0
 800bcd4:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */ 
    return status;
 800bcd6:	79fb      	ldrb	r3, [r7, #7]
}  
 800bcd8:	4618      	mov	r0, r3
 800bcda:	3708      	adds	r7, #8
 800bcdc:	46bd      	mov	sp, r7
 800bcde:	bd80      	pop	{r7, pc}
 800bce0:	40020000 	.word	0x40020000

0800bce4 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 800bce4:	b580      	push	{r7, lr}
 800bce6:	b084      	sub	sp, #16
 800bce8:	af00      	add	r7, sp, #0
 800bcea:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 800bcec:	f7f7 ff78 	bl	8003be0 <HAL_GetTick>
 800bcf0:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 800bcf2:	e006      	b.n	800bd02 <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800bcf4:	f7ff ffb0 	bl	800bc58 <BSP_SD_GetCardState>
 800bcf8:	4603      	mov	r3, r0
 800bcfa:	2b00      	cmp	r3, #0
 800bcfc:	d101      	bne.n	800bd02 <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 800bcfe:	2300      	movs	r3, #0
 800bd00:	e009      	b.n	800bd16 <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 800bd02:	f7f7 ff6d 	bl	8003be0 <HAL_GetTick>
 800bd06:	4602      	mov	r2, r0
 800bd08:	68fb      	ldr	r3, [r7, #12]
 800bd0a:	1ad3      	subs	r3, r2, r3
 800bd0c:	687a      	ldr	r2, [r7, #4]
 800bd0e:	429a      	cmp	r2, r3
 800bd10:	d8f0      	bhi.n	800bcf4 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 800bd12:	f04f 33ff 	mov.w	r3, #4294967295
}
 800bd16:	4618      	mov	r0, r3
 800bd18:	3710      	adds	r7, #16
 800bd1a:	46bd      	mov	sp, r7
 800bd1c:	bd80      	pop	{r7, pc}
	...

0800bd20 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800bd20:	b580      	push	{r7, lr}
 800bd22:	b082      	sub	sp, #8
 800bd24:	af00      	add	r7, sp, #0
 800bd26:	4603      	mov	r3, r0
 800bd28:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800bd2a:	4b0b      	ldr	r3, [pc, #44]	; (800bd58 <SD_CheckStatus+0x38>)
 800bd2c:	2201      	movs	r2, #1
 800bd2e:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800bd30:	f7ff ff92 	bl	800bc58 <BSP_SD_GetCardState>
 800bd34:	4603      	mov	r3, r0
 800bd36:	2b00      	cmp	r3, #0
 800bd38:	d107      	bne.n	800bd4a <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800bd3a:	4b07      	ldr	r3, [pc, #28]	; (800bd58 <SD_CheckStatus+0x38>)
 800bd3c:	781b      	ldrb	r3, [r3, #0]
 800bd3e:	b2db      	uxtb	r3, r3
 800bd40:	f023 0301 	bic.w	r3, r3, #1
 800bd44:	b2da      	uxtb	r2, r3
 800bd46:	4b04      	ldr	r3, [pc, #16]	; (800bd58 <SD_CheckStatus+0x38>)
 800bd48:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800bd4a:	4b03      	ldr	r3, [pc, #12]	; (800bd58 <SD_CheckStatus+0x38>)
 800bd4c:	781b      	ldrb	r3, [r3, #0]
 800bd4e:	b2db      	uxtb	r3, r3
}
 800bd50:	4618      	mov	r0, r3
 800bd52:	3708      	adds	r7, #8
 800bd54:	46bd      	mov	sp, r7
 800bd56:	bd80      	pop	{r7, pc}
 800bd58:	20000009 	.word	0x20000009

0800bd5c <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800bd5c:	b580      	push	{r7, lr}
 800bd5e:	b082      	sub	sp, #8
 800bd60:	af00      	add	r7, sp, #0
 800bd62:	4603      	mov	r3, r0
 800bd64:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800bd66:	f7ff ff1d 	bl	800bba4 <BSP_SD_Init>
 800bd6a:	4603      	mov	r3, r0
 800bd6c:	2b00      	cmp	r3, #0
 800bd6e:	d107      	bne.n	800bd80 <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 800bd70:	79fb      	ldrb	r3, [r7, #7]
 800bd72:	4618      	mov	r0, r3
 800bd74:	f7ff ffd4 	bl	800bd20 <SD_CheckStatus>
 800bd78:	4603      	mov	r3, r0
 800bd7a:	461a      	mov	r2, r3
 800bd7c:	4b04      	ldr	r3, [pc, #16]	; (800bd90 <SD_initialize+0x34>)
 800bd7e:	701a      	strb	r2, [r3, #0]
  }

#else
  Stat = SD_CheckStatus(lun);
#endif
  return Stat;
 800bd80:	4b03      	ldr	r3, [pc, #12]	; (800bd90 <SD_initialize+0x34>)
 800bd82:	781b      	ldrb	r3, [r3, #0]
 800bd84:	b2db      	uxtb	r3, r3
}
 800bd86:	4618      	mov	r0, r3
 800bd88:	3708      	adds	r7, #8
 800bd8a:	46bd      	mov	sp, r7
 800bd8c:	bd80      	pop	{r7, pc}
 800bd8e:	bf00      	nop
 800bd90:	20000009 	.word	0x20000009

0800bd94 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800bd94:	b580      	push	{r7, lr}
 800bd96:	b082      	sub	sp, #8
 800bd98:	af00      	add	r7, sp, #0
 800bd9a:	4603      	mov	r3, r0
 800bd9c:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800bd9e:	79fb      	ldrb	r3, [r7, #7]
 800bda0:	4618      	mov	r0, r3
 800bda2:	f7ff ffbd 	bl	800bd20 <SD_CheckStatus>
 800bda6:	4603      	mov	r3, r0
}
 800bda8:	4618      	mov	r0, r3
 800bdaa:	3708      	adds	r7, #8
 800bdac:	46bd      	mov	sp, r7
 800bdae:	bd80      	pop	{r7, pc}

0800bdb0 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
              
DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800bdb0:	b580      	push	{r7, lr}
 800bdb2:	b088      	sub	sp, #32
 800bdb4:	af00      	add	r7, sp, #0
 800bdb6:	60b9      	str	r1, [r7, #8]
 800bdb8:	607a      	str	r2, [r7, #4]
 800bdba:	603b      	str	r3, [r7, #0]
 800bdbc:	4603      	mov	r3, r0
 800bdbe:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800bdc0:	2301      	movs	r3, #1
 800bdc2:	77fb      	strb	r3, [r7, #31]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800bdc4:	f247 5030 	movw	r0, #30000	; 0x7530
 800bdc8:	f7ff ff8c 	bl	800bce4 <SD_CheckStatusWithTimeout>
 800bdcc:	4603      	mov	r3, r0
 800bdce:	2b00      	cmp	r3, #0
 800bdd0:	da01      	bge.n	800bdd6 <SD_read+0x26>
  {
    return res;
 800bdd2:	7ffb      	ldrb	r3, [r7, #31]
 800bdd4:	e08b      	b.n	800beee <SD_read+0x13e>
  }

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
 800bdd6:	68bb      	ldr	r3, [r7, #8]
 800bdd8:	f003 0303 	and.w	r3, r3, #3
 800bddc:	2b00      	cmp	r3, #0
 800bdde:	f040 8085 	bne.w	800beec <SD_read+0x13c>
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 800bde2:	683a      	ldr	r2, [r7, #0]
 800bde4:	6879      	ldr	r1, [r7, #4]
 800bde6:	68b8      	ldr	r0, [r7, #8]
 800bde8:	f7ff ff02 	bl	800bbf0 <BSP_SD_ReadBlocks_DMA>
 800bdec:	4603      	mov	r3, r0
 800bdee:	2b00      	cmp	r3, #0
 800bdf0:	d133      	bne.n	800be5a <SD_read+0xaa>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 800bdf2:	4b41      	ldr	r3, [pc, #260]	; (800bef8 <SD_read+0x148>)
 800bdf4:	2200      	movs	r2, #0
 800bdf6:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 800bdf8:	f7f7 fef2 	bl	8003be0 <HAL_GetTick>
 800bdfc:	6178      	str	r0, [r7, #20]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800bdfe:	bf00      	nop
 800be00:	4b3d      	ldr	r3, [pc, #244]	; (800bef8 <SD_read+0x148>)
 800be02:	681b      	ldr	r3, [r3, #0]
 800be04:	2b00      	cmp	r3, #0
 800be06:	d108      	bne.n	800be1a <SD_read+0x6a>
 800be08:	f7f7 feea 	bl	8003be0 <HAL_GetTick>
 800be0c:	4602      	mov	r2, r0
 800be0e:	697b      	ldr	r3, [r7, #20]
 800be10:	1ad3      	subs	r3, r2, r3
 800be12:	f247 522f 	movw	r2, #29999	; 0x752f
 800be16:	4293      	cmp	r3, r2
 800be18:	d9f2      	bls.n	800be00 <SD_read+0x50>
      {
      }
      /* incase of a timeout return error */
      if (ReadStatus == 0)
 800be1a:	4b37      	ldr	r3, [pc, #220]	; (800bef8 <SD_read+0x148>)
 800be1c:	681b      	ldr	r3, [r3, #0]
 800be1e:	2b00      	cmp	r3, #0
 800be20:	d102      	bne.n	800be28 <SD_read+0x78>
      {
        res = RES_ERROR;
 800be22:	2301      	movs	r3, #1
 800be24:	77fb      	strb	r3, [r7, #31]
 800be26:	e061      	b.n	800beec <SD_read+0x13c>
      }
      else
      {
        ReadStatus = 0;
 800be28:	4b33      	ldr	r3, [pc, #204]	; (800bef8 <SD_read+0x148>)
 800be2a:	2200      	movs	r2, #0
 800be2c:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 800be2e:	f7f7 fed7 	bl	8003be0 <HAL_GetTick>
 800be32:	6178      	str	r0, [r7, #20]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800be34:	e007      	b.n	800be46 <SD_read+0x96>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800be36:	f7ff ff0f 	bl	800bc58 <BSP_SD_GetCardState>
 800be3a:	4603      	mov	r3, r0
 800be3c:	2b00      	cmp	r3, #0
 800be3e:	d102      	bne.n	800be46 <SD_read+0x96>
          {
            res = RES_OK;
 800be40:	2300      	movs	r3, #0
 800be42:	77fb      	strb	r3, [r7, #31]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 800be44:	e052      	b.n	800beec <SD_read+0x13c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800be46:	f7f7 fecb 	bl	8003be0 <HAL_GetTick>
 800be4a:	4602      	mov	r2, r0
 800be4c:	697b      	ldr	r3, [r7, #20]
 800be4e:	1ad3      	subs	r3, r2, r3
 800be50:	f247 522f 	movw	r2, #29999	; 0x752f
 800be54:	4293      	cmp	r3, r2
 800be56:	d9ee      	bls.n	800be36 <SD_read+0x86>
 800be58:	e048      	b.n	800beec <SD_read+0x13c>
#if defined(ENABLE_SCRATCH_BUFFER)
    else {
      /* Slow path, fetch each sector a part and memcpy to destination buffer */
      int i;

      for (i = 0; i < count; i++) {
 800be5a:	2300      	movs	r3, #0
 800be5c:	61bb      	str	r3, [r7, #24]
 800be5e:	e034      	b.n	800beca <SD_read+0x11a>
        ret = BSP_SD_ReadBlocks_DMA((uint32_t*)scratch, (uint32_t)sector++, 1);
 800be60:	687b      	ldr	r3, [r7, #4]
 800be62:	1c5a      	adds	r2, r3, #1
 800be64:	607a      	str	r2, [r7, #4]
 800be66:	2201      	movs	r2, #1
 800be68:	4619      	mov	r1, r3
 800be6a:	4824      	ldr	r0, [pc, #144]	; (800befc <SD_read+0x14c>)
 800be6c:	f7ff fec0 	bl	800bbf0 <BSP_SD_ReadBlocks_DMA>
 800be70:	4603      	mov	r3, r0
 800be72:	77bb      	strb	r3, [r7, #30]
        if (ret == MSD_OK) {
 800be74:	7fbb      	ldrb	r3, [r7, #30]
 800be76:	2b00      	cmp	r3, #0
 800be78:	d12c      	bne.n	800bed4 <SD_read+0x124>
          /* wait until the read is successful or a timeout occurs */

          ReadStatus = 0;
 800be7a:	4b1f      	ldr	r3, [pc, #124]	; (800bef8 <SD_read+0x148>)
 800be7c:	2200      	movs	r2, #0
 800be7e:	601a      	str	r2, [r3, #0]
          timeout = HAL_GetTick();
 800be80:	f7f7 feae 	bl	8003be0 <HAL_GetTick>
 800be84:	6178      	str	r0, [r7, #20]
          while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800be86:	bf00      	nop
 800be88:	4b1b      	ldr	r3, [pc, #108]	; (800bef8 <SD_read+0x148>)
 800be8a:	681b      	ldr	r3, [r3, #0]
 800be8c:	2b00      	cmp	r3, #0
 800be8e:	d108      	bne.n	800bea2 <SD_read+0xf2>
 800be90:	f7f7 fea6 	bl	8003be0 <HAL_GetTick>
 800be94:	4602      	mov	r2, r0
 800be96:	697b      	ldr	r3, [r7, #20]
 800be98:	1ad3      	subs	r3, r2, r3
 800be9a:	f247 522f 	movw	r2, #29999	; 0x752f
 800be9e:	4293      	cmp	r3, r2
 800bea0:	d9f2      	bls.n	800be88 <SD_read+0xd8>
          {
          }
          if (ReadStatus == 0)
 800bea2:	4b15      	ldr	r3, [pc, #84]	; (800bef8 <SD_read+0x148>)
 800bea4:	681b      	ldr	r3, [r3, #0]
 800bea6:	2b00      	cmp	r3, #0
 800bea8:	d016      	beq.n	800bed8 <SD_read+0x128>
          *
          * invalidate the scratch buffer before the next read to get the actual data instead of the cached one
          */
          SCB_InvalidateDCache_by_Addr((uint32_t*)scratch, BLOCKSIZE);
#endif
          memcpy(buff, scratch, BLOCKSIZE);
 800beaa:	68bb      	ldr	r3, [r7, #8]
 800beac:	4a13      	ldr	r2, [pc, #76]	; (800befc <SD_read+0x14c>)
 800beae:	4618      	mov	r0, r3
 800beb0:	4611      	mov	r1, r2
 800beb2:	f44f 7300 	mov.w	r3, #512	; 0x200
 800beb6:	461a      	mov	r2, r3
 800beb8:	f002 fa18 	bl	800e2ec <memcpy>
          buff += BLOCKSIZE;
 800bebc:	68bb      	ldr	r3, [r7, #8]
 800bebe:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800bec2:	60bb      	str	r3, [r7, #8]
      for (i = 0; i < count; i++) {
 800bec4:	69bb      	ldr	r3, [r7, #24]
 800bec6:	3301      	adds	r3, #1
 800bec8:	61bb      	str	r3, [r7, #24]
 800beca:	69bb      	ldr	r3, [r7, #24]
 800becc:	683a      	ldr	r2, [r7, #0]
 800bece:	429a      	cmp	r2, r3
 800bed0:	d8c6      	bhi.n	800be60 <SD_read+0xb0>
 800bed2:	e002      	b.n	800beda <SD_read+0x12a>
        }
        else
        {
          break;
 800bed4:	bf00      	nop
 800bed6:	e000      	b.n	800beda <SD_read+0x12a>
            break;
 800bed8:	bf00      	nop
        }
      }

      if ((i == count) && (ret == MSD_OK))
 800beda:	69bb      	ldr	r3, [r7, #24]
 800bedc:	683a      	ldr	r2, [r7, #0]
 800bede:	429a      	cmp	r2, r3
 800bee0:	d104      	bne.n	800beec <SD_read+0x13c>
 800bee2:	7fbb      	ldrb	r3, [r7, #30]
 800bee4:	2b00      	cmp	r3, #0
 800bee6:	d101      	bne.n	800beec <SD_read+0x13c>
        res = RES_OK;
 800bee8:	2300      	movs	r3, #0
 800beea:	77fb      	strb	r3, [r7, #31]
    }
#endif
  }

  return res;
 800beec:	7ffb      	ldrb	r3, [r7, #31]
}
 800beee:	4618      	mov	r0, r3
 800bef0:	3720      	adds	r7, #32
 800bef2:	46bd      	mov	sp, r7
 800bef4:	bd80      	pop	{r7, pc}
 800bef6:	bf00      	nop
 800bef8:	20000978 	.word	0x20000978
 800befc:	20000774 	.word	0x20000774

0800bf00 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
              
DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800bf00:	b580      	push	{r7, lr}
 800bf02:	b088      	sub	sp, #32
 800bf04:	af00      	add	r7, sp, #0
 800bf06:	60b9      	str	r1, [r7, #8]
 800bf08:	607a      	str	r2, [r7, #4]
 800bf0a:	603b      	str	r3, [r7, #0]
 800bf0c:	4603      	mov	r3, r0
 800bf0e:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800bf10:	2301      	movs	r3, #1
 800bf12:	77fb      	strb	r3, [r7, #31]
  uint32_t timeout;
  uint8_t ret;
  int i;

   WriteStatus = 0;
 800bf14:	4b4c      	ldr	r3, [pc, #304]	; (800c048 <SD_write+0x148>)
 800bf16:	2200      	movs	r2, #0
 800bf18:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)   
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800bf1a:	f247 5030 	movw	r0, #30000	; 0x7530
 800bf1e:	f7ff fee1 	bl	800bce4 <SD_CheckStatusWithTimeout>
 800bf22:	4603      	mov	r3, r0
 800bf24:	2b00      	cmp	r3, #0
 800bf26:	da01      	bge.n	800bf2c <SD_write+0x2c>
  {
    return res;
 800bf28:	7ffb      	ldrb	r3, [r7, #31]
 800bf2a:	e088      	b.n	800c03e <SD_write+0x13e>
  }

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
 800bf2c:	68bb      	ldr	r3, [r7, #8]
 800bf2e:	f003 0303 	and.w	r3, r3, #3
 800bf32:	2b00      	cmp	r3, #0
 800bf34:	f040 8082 	bne.w	800c03c <SD_write+0x13c>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 800bf38:	683a      	ldr	r2, [r7, #0]
 800bf3a:	6879      	ldr	r1, [r7, #4]
 800bf3c:	68b8      	ldr	r0, [r7, #8]
 800bf3e:	f7ff fe71 	bl	800bc24 <BSP_SD_WriteBlocks_DMA>
 800bf42:	4603      	mov	r3, r0
 800bf44:	2b00      	cmp	r3, #0
 800bf46:	d130      	bne.n	800bfaa <SD_write+0xaa>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 800bf48:	f7f7 fe4a 	bl	8003be0 <HAL_GetTick>
 800bf4c:	6178      	str	r0, [r7, #20]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800bf4e:	bf00      	nop
 800bf50:	4b3d      	ldr	r3, [pc, #244]	; (800c048 <SD_write+0x148>)
 800bf52:	681b      	ldr	r3, [r3, #0]
 800bf54:	2b00      	cmp	r3, #0
 800bf56:	d108      	bne.n	800bf6a <SD_write+0x6a>
 800bf58:	f7f7 fe42 	bl	8003be0 <HAL_GetTick>
 800bf5c:	4602      	mov	r2, r0
 800bf5e:	697b      	ldr	r3, [r7, #20]
 800bf60:	1ad3      	subs	r3, r2, r3
 800bf62:	f247 522f 	movw	r2, #29999	; 0x752f
 800bf66:	4293      	cmp	r3, r2
 800bf68:	d9f2      	bls.n	800bf50 <SD_write+0x50>
      {
      }
      /* incase of a timeout return error */
      if (WriteStatus == 0)
 800bf6a:	4b37      	ldr	r3, [pc, #220]	; (800c048 <SD_write+0x148>)
 800bf6c:	681b      	ldr	r3, [r3, #0]
 800bf6e:	2b00      	cmp	r3, #0
 800bf70:	d102      	bne.n	800bf78 <SD_write+0x78>
      {
        res = RES_ERROR;
 800bf72:	2301      	movs	r3, #1
 800bf74:	77fb      	strb	r3, [r7, #31]
 800bf76:	e061      	b.n	800c03c <SD_write+0x13c>
      }
      else
      {
        WriteStatus = 0;
 800bf78:	4b33      	ldr	r3, [pc, #204]	; (800c048 <SD_write+0x148>)
 800bf7a:	2200      	movs	r2, #0
 800bf7c:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 800bf7e:	f7f7 fe2f 	bl	8003be0 <HAL_GetTick>
 800bf82:	6178      	str	r0, [r7, #20]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800bf84:	e007      	b.n	800bf96 <SD_write+0x96>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800bf86:	f7ff fe67 	bl	800bc58 <BSP_SD_GetCardState>
 800bf8a:	4603      	mov	r3, r0
 800bf8c:	2b00      	cmp	r3, #0
 800bf8e:	d102      	bne.n	800bf96 <SD_write+0x96>
          {
            res = RES_OK;
 800bf90:	2300      	movs	r3, #0
 800bf92:	77fb      	strb	r3, [r7, #31]
            break;
 800bf94:	e052      	b.n	800c03c <SD_write+0x13c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800bf96:	f7f7 fe23 	bl	8003be0 <HAL_GetTick>
 800bf9a:	4602      	mov	r2, r0
 800bf9c:	697b      	ldr	r3, [r7, #20]
 800bf9e:	1ad3      	subs	r3, r2, r3
 800bfa0:	f247 522f 	movw	r2, #29999	; 0x752f
 800bfa4:	4293      	cmp	r3, r2
 800bfa6:	d9ee      	bls.n	800bf86 <SD_write+0x86>
 800bfa8:	e048      	b.n	800c03c <SD_write+0x13c>
      * invalidate the scratch buffer before the next write to get the actual data instead of the cached one
      */
      SCB_InvalidateDCache_by_Addr((uint32_t*)scratch, BLOCKSIZE);
#endif

      for (i = 0; i < count; i++)
 800bfaa:	2300      	movs	r3, #0
 800bfac:	61bb      	str	r3, [r7, #24]
 800bfae:	e034      	b.n	800c01a <SD_write+0x11a>
      {
        WriteStatus = 0;
 800bfb0:	4b25      	ldr	r3, [pc, #148]	; (800c048 <SD_write+0x148>)
 800bfb2:	2200      	movs	r2, #0
 800bfb4:	601a      	str	r2, [r3, #0]
        ret = BSP_SD_WriteBlocks_DMA((uint32_t*)scratch, (uint32_t)sector++, 1);
 800bfb6:	687b      	ldr	r3, [r7, #4]
 800bfb8:	1c5a      	adds	r2, r3, #1
 800bfba:	607a      	str	r2, [r7, #4]
 800bfbc:	2201      	movs	r2, #1
 800bfbe:	4619      	mov	r1, r3
 800bfc0:	4822      	ldr	r0, [pc, #136]	; (800c04c <SD_write+0x14c>)
 800bfc2:	f7ff fe2f 	bl	800bc24 <BSP_SD_WriteBlocks_DMA>
 800bfc6:	4603      	mov	r3, r0
 800bfc8:	77bb      	strb	r3, [r7, #30]
        if (ret == MSD_OK) {
 800bfca:	7fbb      	ldrb	r3, [r7, #30]
 800bfcc:	2b00      	cmp	r3, #0
 800bfce:	d129      	bne.n	800c024 <SD_write+0x124>
          /* wait for a message from the queue or a timeout */
          timeout = HAL_GetTick();
 800bfd0:	f7f7 fe06 	bl	8003be0 <HAL_GetTick>
 800bfd4:	6178      	str	r0, [r7, #20]
          while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800bfd6:	bf00      	nop
 800bfd8:	4b1b      	ldr	r3, [pc, #108]	; (800c048 <SD_write+0x148>)
 800bfda:	681b      	ldr	r3, [r3, #0]
 800bfdc:	2b00      	cmp	r3, #0
 800bfde:	d108      	bne.n	800bff2 <SD_write+0xf2>
 800bfe0:	f7f7 fdfe 	bl	8003be0 <HAL_GetTick>
 800bfe4:	4602      	mov	r2, r0
 800bfe6:	697b      	ldr	r3, [r7, #20]
 800bfe8:	1ad3      	subs	r3, r2, r3
 800bfea:	f247 522f 	movw	r2, #29999	; 0x752f
 800bfee:	4293      	cmp	r3, r2
 800bff0:	d9f2      	bls.n	800bfd8 <SD_write+0xd8>
          {
          }
          if (WriteStatus == 0)
 800bff2:	4b15      	ldr	r3, [pc, #84]	; (800c048 <SD_write+0x148>)
 800bff4:	681b      	ldr	r3, [r3, #0]
 800bff6:	2b00      	cmp	r3, #0
 800bff8:	d016      	beq.n	800c028 <SD_write+0x128>
          {
            break;
          }

          memcpy((void *)buff, (void *)scratch, BLOCKSIZE);
 800bffa:	68bb      	ldr	r3, [r7, #8]
 800bffc:	4a13      	ldr	r2, [pc, #76]	; (800c04c <SD_write+0x14c>)
 800bffe:	4618      	mov	r0, r3
 800c000:	4611      	mov	r1, r2
 800c002:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c006:	461a      	mov	r2, r3
 800c008:	f002 f970 	bl	800e2ec <memcpy>
          buff += BLOCKSIZE;
 800c00c:	68bb      	ldr	r3, [r7, #8]
 800c00e:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800c012:	60bb      	str	r3, [r7, #8]
      for (i = 0; i < count; i++)
 800c014:	69bb      	ldr	r3, [r7, #24]
 800c016:	3301      	adds	r3, #1
 800c018:	61bb      	str	r3, [r7, #24]
 800c01a:	69bb      	ldr	r3, [r7, #24]
 800c01c:	683a      	ldr	r2, [r7, #0]
 800c01e:	429a      	cmp	r2, r3
 800c020:	d8c6      	bhi.n	800bfb0 <SD_write+0xb0>
 800c022:	e002      	b.n	800c02a <SD_write+0x12a>
        }
        else
        {
          break;
 800c024:	bf00      	nop
 800c026:	e000      	b.n	800c02a <SD_write+0x12a>
            break;
 800c028:	bf00      	nop
        }
      }
      if ((i == count) && (ret == MSD_OK))
 800c02a:	69bb      	ldr	r3, [r7, #24]
 800c02c:	683a      	ldr	r2, [r7, #0]
 800c02e:	429a      	cmp	r2, r3
 800c030:	d104      	bne.n	800c03c <SD_write+0x13c>
 800c032:	7fbb      	ldrb	r3, [r7, #30]
 800c034:	2b00      	cmp	r3, #0
 800c036:	d101      	bne.n	800c03c <SD_write+0x13c>
        res = RES_OK;
 800c038:	2300      	movs	r3, #0
 800c03a:	77fb      	strb	r3, [r7, #31]
    }

  }
  return res;
 800c03c:	7ffb      	ldrb	r3, [r7, #31]
}
 800c03e:	4618      	mov	r0, r3
 800c040:	3720      	adds	r7, #32
 800c042:	46bd      	mov	sp, r7
 800c044:	bd80      	pop	{r7, pc}
 800c046:	bf00      	nop
 800c048:	20000974 	.word	0x20000974
 800c04c:	20000774 	.word	0x20000774

0800c050 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800c050:	b580      	push	{r7, lr}
 800c052:	b08c      	sub	sp, #48	; 0x30
 800c054:	af00      	add	r7, sp, #0
 800c056:	4603      	mov	r3, r0
 800c058:	603a      	str	r2, [r7, #0]
 800c05a:	71fb      	strb	r3, [r7, #7]
 800c05c:	460b      	mov	r3, r1
 800c05e:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800c060:	2301      	movs	r3, #1
 800c062:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800c066:	4b25      	ldr	r3, [pc, #148]	; (800c0fc <SD_ioctl+0xac>)
 800c068:	781b      	ldrb	r3, [r3, #0]
 800c06a:	b2db      	uxtb	r3, r3
 800c06c:	f003 0301 	and.w	r3, r3, #1
 800c070:	2b00      	cmp	r3, #0
 800c072:	d001      	beq.n	800c078 <SD_ioctl+0x28>
 800c074:	2303      	movs	r3, #3
 800c076:	e03c      	b.n	800c0f2 <SD_ioctl+0xa2>

  switch (cmd)
 800c078:	79bb      	ldrb	r3, [r7, #6]
 800c07a:	2b03      	cmp	r3, #3
 800c07c:	d834      	bhi.n	800c0e8 <SD_ioctl+0x98>
 800c07e:	a201      	add	r2, pc, #4	; (adr r2, 800c084 <SD_ioctl+0x34>)
 800c080:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c084:	0800c095 	.word	0x0800c095
 800c088:	0800c09d 	.word	0x0800c09d
 800c08c:	0800c0b5 	.word	0x0800c0b5
 800c090:	0800c0cf 	.word	0x0800c0cf
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800c094:	2300      	movs	r3, #0
 800c096:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800c09a:	e028      	b.n	800c0ee <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800c09c:	f107 030c 	add.w	r3, r7, #12
 800c0a0:	4618      	mov	r0, r3
 800c0a2:	f7ff fde9 	bl	800bc78 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800c0a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c0a8:	683b      	ldr	r3, [r7, #0]
 800c0aa:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800c0ac:	2300      	movs	r3, #0
 800c0ae:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800c0b2:	e01c      	b.n	800c0ee <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800c0b4:	f107 030c 	add.w	r3, r7, #12
 800c0b8:	4618      	mov	r0, r3
 800c0ba:	f7ff fddd 	bl	800bc78 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800c0be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c0c0:	b29a      	uxth	r2, r3
 800c0c2:	683b      	ldr	r3, [r7, #0]
 800c0c4:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800c0c6:	2300      	movs	r3, #0
 800c0c8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800c0cc:	e00f      	b.n	800c0ee <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800c0ce:	f107 030c 	add.w	r3, r7, #12
 800c0d2:	4618      	mov	r0, r3
 800c0d4:	f7ff fdd0 	bl	800bc78 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800c0d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c0da:	0a5a      	lsrs	r2, r3, #9
 800c0dc:	683b      	ldr	r3, [r7, #0]
 800c0de:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800c0e0:	2300      	movs	r3, #0
 800c0e2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800c0e6:	e002      	b.n	800c0ee <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800c0e8:	2304      	movs	r3, #4
 800c0ea:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800c0ee:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800c0f2:	4618      	mov	r0, r3
 800c0f4:	3730      	adds	r7, #48	; 0x30
 800c0f6:	46bd      	mov	sp, r7
 800c0f8:	bd80      	pop	{r7, pc}
 800c0fa:	bf00      	nop
 800c0fc:	20000009 	.word	0x20000009

0800c100 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init (USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800c100:	b580      	push	{r7, lr}
 800c102:	b084      	sub	sp, #16
 800c104:	af00      	add	r7, sp, #0
 800c106:	6078      	str	r0, [r7, #4]
 800c108:	460b      	mov	r3, r1
 800c10a:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800c10c:	2300      	movs	r3, #0
 800c10e:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if(pdev->dev_speed == USBD_SPEED_HIGH)
 800c110:	687b      	ldr	r3, [r7, #4]
 800c112:	7c1b      	ldrb	r3, [r3, #16]
 800c114:	2b00      	cmp	r3, #0
 800c116:	d115      	bne.n	800c144 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800c118:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c11c:	2202      	movs	r2, #2
 800c11e:	2181      	movs	r1, #129	; 0x81
 800c120:	6878      	ldr	r0, [r7, #4]
 800c122:	f001 ff50 	bl	800dfc6 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800c126:	687b      	ldr	r3, [r7, #4]
 800c128:	2201      	movs	r2, #1
 800c12a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800c12c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c130:	2202      	movs	r2, #2
 800c132:	2101      	movs	r1, #1
 800c134:	6878      	ldr	r0, [r7, #4]
 800c136:	f001 ff46 	bl	800dfc6 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800c13a:	687b      	ldr	r3, [r7, #4]
 800c13c:	2201      	movs	r2, #1
 800c13e:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
 800c142:	e012      	b.n	800c16a <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800c144:	2340      	movs	r3, #64	; 0x40
 800c146:	2202      	movs	r2, #2
 800c148:	2181      	movs	r1, #129	; 0x81
 800c14a:	6878      	ldr	r0, [r7, #4]
 800c14c:	f001 ff3b 	bl	800dfc6 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800c150:	687b      	ldr	r3, [r7, #4]
 800c152:	2201      	movs	r2, #1
 800c154:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800c156:	2340      	movs	r3, #64	; 0x40
 800c158:	2202      	movs	r2, #2
 800c15a:	2101      	movs	r1, #1
 800c15c:	6878      	ldr	r0, [r7, #4]
 800c15e:	f001 ff32 	bl	800dfc6 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800c162:	687b      	ldr	r3, [r7, #4]
 800c164:	2201      	movs	r2, #1
 800c166:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800c16a:	2308      	movs	r3, #8
 800c16c:	2203      	movs	r2, #3
 800c16e:	2182      	movs	r1, #130	; 0x82
 800c170:	6878      	ldr	r0, [r7, #4]
 800c172:	f001 ff28 	bl	800dfc6 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800c176:	687b      	ldr	r3, [r7, #4]
 800c178:	2201      	movs	r2, #1
 800c17a:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof (USBD_CDC_HandleTypeDef));
 800c17c:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800c180:	f002 f8a4 	bl	800e2cc <malloc>
 800c184:	4603      	mov	r3, r0
 800c186:	461a      	mov	r2, r3
 800c188:	687b      	ldr	r3, [r7, #4]
 800c18a:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290

  if(pdev->pClassData == NULL)
 800c18e:	687b      	ldr	r3, [r7, #4]
 800c190:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800c194:	2b00      	cmp	r3, #0
 800c196:	d102      	bne.n	800c19e <USBD_CDC_Init+0x9e>
  {
    ret = 1U;
 800c198:	2301      	movs	r3, #1
 800c19a:	73fb      	strb	r3, [r7, #15]
 800c19c:	e026      	b.n	800c1ec <USBD_CDC_Init+0xec>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800c19e:	687b      	ldr	r3, [r7, #4]
 800c1a0:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800c1a4:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800c1a6:	687b      	ldr	r3, [r7, #4]
 800c1a8:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800c1ac:	681b      	ldr	r3, [r3, #0]
 800c1ae:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 800c1b0:	68bb      	ldr	r3, [r7, #8]
 800c1b2:	2200      	movs	r2, #0
 800c1b4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 800c1b8:	68bb      	ldr	r3, [r7, #8]
 800c1ba:	2200      	movs	r2, #0
 800c1bc:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if(pdev->dev_speed == USBD_SPEED_HIGH)
 800c1c0:	687b      	ldr	r3, [r7, #4]
 800c1c2:	7c1b      	ldrb	r3, [r3, #16]
 800c1c4:	2b00      	cmp	r3, #0
 800c1c6:	d109      	bne.n	800c1dc <USBD_CDC_Init+0xdc>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800c1c8:	68bb      	ldr	r3, [r7, #8]
 800c1ca:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800c1ce:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c1d2:	2101      	movs	r1, #1
 800c1d4:	6878      	ldr	r0, [r7, #4]
 800c1d6:	f001 ffe7 	bl	800e1a8 <USBD_LL_PrepareReceive>
 800c1da:	e007      	b.n	800c1ec <USBD_CDC_Init+0xec>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800c1dc:	68bb      	ldr	r3, [r7, #8]
 800c1de:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800c1e2:	2340      	movs	r3, #64	; 0x40
 800c1e4:	2101      	movs	r1, #1
 800c1e6:	6878      	ldr	r0, [r7, #4]
 800c1e8:	f001 ffde 	bl	800e1a8 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 800c1ec:	7bfb      	ldrb	r3, [r7, #15]
}
 800c1ee:	4618      	mov	r0, r3
 800c1f0:	3710      	adds	r7, #16
 800c1f2:	46bd      	mov	sp, r7
 800c1f4:	bd80      	pop	{r7, pc}

0800c1f6 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit (USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800c1f6:	b580      	push	{r7, lr}
 800c1f8:	b084      	sub	sp, #16
 800c1fa:	af00      	add	r7, sp, #0
 800c1fc:	6078      	str	r0, [r7, #4]
 800c1fe:	460b      	mov	r3, r1
 800c200:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800c202:	2300      	movs	r3, #0
 800c204:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800c206:	2181      	movs	r1, #129	; 0x81
 800c208:	6878      	ldr	r0, [r7, #4]
 800c20a:	f001 ff02 	bl	800e012 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800c20e:	687b      	ldr	r3, [r7, #4]
 800c210:	2200      	movs	r2, #0
 800c212:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800c214:	2101      	movs	r1, #1
 800c216:	6878      	ldr	r0, [r7, #4]
 800c218:	f001 fefb 	bl	800e012 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800c21c:	687b      	ldr	r3, [r7, #4]
 800c21e:	2200      	movs	r2, #0
 800c220:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800c224:	2182      	movs	r1, #130	; 0x82
 800c226:	6878      	ldr	r0, [r7, #4]
 800c228:	f001 fef3 	bl	800e012 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800c22c:	687b      	ldr	r3, [r7, #4]
 800c22e:	2200      	movs	r2, #0
 800c230:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if(pdev->pClassData != NULL)
 800c232:	687b      	ldr	r3, [r7, #4]
 800c234:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800c238:	2b00      	cmp	r3, #0
 800c23a:	d00e      	beq.n	800c25a <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800c23c:	687b      	ldr	r3, [r7, #4]
 800c23e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800c242:	685b      	ldr	r3, [r3, #4]
 800c244:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 800c246:	687b      	ldr	r3, [r7, #4]
 800c248:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800c24c:	4618      	mov	r0, r3
 800c24e:	f002 f845 	bl	800e2dc <free>
    pdev->pClassData = NULL;
 800c252:	687b      	ldr	r3, [r7, #4]
 800c254:	2200      	movs	r2, #0
 800c256:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290
  }

  return ret;
 800c25a:	7bfb      	ldrb	r3, [r7, #15]
}
 800c25c:	4618      	mov	r0, r3
 800c25e:	3710      	adds	r7, #16
 800c260:	46bd      	mov	sp, r7
 800c262:	bd80      	pop	{r7, pc}

0800c264 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup (USBD_HandleTypeDef *pdev,
                                USBD_SetupReqTypedef *req)
{
 800c264:	b580      	push	{r7, lr}
 800c266:	b086      	sub	sp, #24
 800c268:	af00      	add	r7, sp, #0
 800c26a:	6078      	str	r0, [r7, #4]
 800c26c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800c26e:	687b      	ldr	r3, [r7, #4]
 800c270:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800c274:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 800c276:	2300      	movs	r3, #0
 800c278:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 800c27a:	2300      	movs	r3, #0
 800c27c:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 800c27e:	2300      	movs	r3, #0
 800c280:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c282:	683b      	ldr	r3, [r7, #0]
 800c284:	781b      	ldrb	r3, [r3, #0]
 800c286:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800c28a:	2b00      	cmp	r3, #0
 800c28c:	d039      	beq.n	800c302 <USBD_CDC_Setup+0x9e>
 800c28e:	2b20      	cmp	r3, #32
 800c290:	d17c      	bne.n	800c38c <USBD_CDC_Setup+0x128>
  {
  case USB_REQ_TYPE_CLASS :
    if (req->wLength)
 800c292:	683b      	ldr	r3, [r7, #0]
 800c294:	88db      	ldrh	r3, [r3, #6]
 800c296:	2b00      	cmp	r3, #0
 800c298:	d029      	beq.n	800c2ee <USBD_CDC_Setup+0x8a>
    {
      if (req->bmRequest & 0x80U)
 800c29a:	683b      	ldr	r3, [r7, #0]
 800c29c:	781b      	ldrb	r3, [r3, #0]
 800c29e:	b25b      	sxtb	r3, r3
 800c2a0:	2b00      	cmp	r3, #0
 800c2a2:	da11      	bge.n	800c2c8 <USBD_CDC_Setup+0x64>
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800c2a4:	687b      	ldr	r3, [r7, #4]
 800c2a6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800c2aa:	689b      	ldr	r3, [r3, #8]
 800c2ac:	683a      	ldr	r2, [r7, #0]
 800c2ae:	7850      	ldrb	r0, [r2, #1]
                                                          (uint8_t *)(void *)hcdc->data,
 800c2b0:	6939      	ldr	r1, [r7, #16]
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800c2b2:	683a      	ldr	r2, [r7, #0]
 800c2b4:	88d2      	ldrh	r2, [r2, #6]
 800c2b6:	4798      	blx	r3
                                                          req->wLength);

          USBD_CtlSendData (pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800c2b8:	6939      	ldr	r1, [r7, #16]
 800c2ba:	683b      	ldr	r3, [r7, #0]
 800c2bc:	88db      	ldrh	r3, [r3, #6]
 800c2be:	461a      	mov	r2, r3
 800c2c0:	6878      	ldr	r0, [r7, #4]
 800c2c2:	f001 f9c9 	bl	800d658 <USBD_CtlSendData>
    else
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                        (uint8_t *)(void *)req, 0U);
    }
    break;
 800c2c6:	e068      	b.n	800c39a <USBD_CDC_Setup+0x136>
        hcdc->CmdOpCode = req->bRequest;
 800c2c8:	683b      	ldr	r3, [r7, #0]
 800c2ca:	785a      	ldrb	r2, [r3, #1]
 800c2cc:	693b      	ldr	r3, [r7, #16]
 800c2ce:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
        hcdc->CmdLength = (uint8_t)req->wLength;
 800c2d2:	683b      	ldr	r3, [r7, #0]
 800c2d4:	88db      	ldrh	r3, [r3, #6]
 800c2d6:	b2da      	uxtb	r2, r3
 800c2d8:	693b      	ldr	r3, [r7, #16]
 800c2da:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
        USBD_CtlPrepareRx (pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800c2de:	6939      	ldr	r1, [r7, #16]
 800c2e0:	683b      	ldr	r3, [r7, #0]
 800c2e2:	88db      	ldrh	r3, [r3, #6]
 800c2e4:	461a      	mov	r2, r3
 800c2e6:	6878      	ldr	r0, [r7, #4]
 800c2e8:	f001 f9e4 	bl	800d6b4 <USBD_CtlPrepareRx>
    break;
 800c2ec:	e055      	b.n	800c39a <USBD_CDC_Setup+0x136>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800c2ee:	687b      	ldr	r3, [r7, #4]
 800c2f0:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800c2f4:	689b      	ldr	r3, [r3, #8]
 800c2f6:	683a      	ldr	r2, [r7, #0]
 800c2f8:	7850      	ldrb	r0, [r2, #1]
 800c2fa:	2200      	movs	r2, #0
 800c2fc:	6839      	ldr	r1, [r7, #0]
 800c2fe:	4798      	blx	r3
    break;
 800c300:	e04b      	b.n	800c39a <USBD_CDC_Setup+0x136>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800c302:	683b      	ldr	r3, [r7, #0]
 800c304:	785b      	ldrb	r3, [r3, #1]
 800c306:	2b0a      	cmp	r3, #10
 800c308:	d017      	beq.n	800c33a <USBD_CDC_Setup+0xd6>
 800c30a:	2b0b      	cmp	r3, #11
 800c30c:	d029      	beq.n	800c362 <USBD_CDC_Setup+0xfe>
 800c30e:	2b00      	cmp	r3, #0
 800c310:	d133      	bne.n	800c37a <USBD_CDC_Setup+0x116>
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c312:	687b      	ldr	r3, [r7, #4]
 800c314:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800c318:	2b03      	cmp	r3, #3
 800c31a:	d107      	bne.n	800c32c <USBD_CDC_Setup+0xc8>
      {
        USBD_CtlSendData (pdev, (uint8_t *)(void *)&status_info, 2U);
 800c31c:	f107 030c 	add.w	r3, r7, #12
 800c320:	2202      	movs	r2, #2
 800c322:	4619      	mov	r1, r3
 800c324:	6878      	ldr	r0, [r7, #4]
 800c326:	f001 f997 	bl	800d658 <USBD_CtlSendData>
      else
      {
        USBD_CtlError (pdev, req);
			  ret = USBD_FAIL;
      }
      break;
 800c32a:	e02e      	b.n	800c38a <USBD_CDC_Setup+0x126>
        USBD_CtlError (pdev, req);
 800c32c:	6839      	ldr	r1, [r7, #0]
 800c32e:	6878      	ldr	r0, [r7, #4]
 800c330:	f001 f927 	bl	800d582 <USBD_CtlError>
			  ret = USBD_FAIL;
 800c334:	2302      	movs	r3, #2
 800c336:	75fb      	strb	r3, [r7, #23]
      break;
 800c338:	e027      	b.n	800c38a <USBD_CDC_Setup+0x126>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c33a:	687b      	ldr	r3, [r7, #4]
 800c33c:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800c340:	2b03      	cmp	r3, #3
 800c342:	d107      	bne.n	800c354 <USBD_CDC_Setup+0xf0>
      {
        USBD_CtlSendData (pdev, &ifalt, 1U);
 800c344:	f107 030f 	add.w	r3, r7, #15
 800c348:	2201      	movs	r2, #1
 800c34a:	4619      	mov	r1, r3
 800c34c:	6878      	ldr	r0, [r7, #4]
 800c34e:	f001 f983 	bl	800d658 <USBD_CtlSendData>
      else
      {
        USBD_CtlError (pdev, req);
			  ret = USBD_FAIL;
      }
      break;
 800c352:	e01a      	b.n	800c38a <USBD_CDC_Setup+0x126>
        USBD_CtlError (pdev, req);
 800c354:	6839      	ldr	r1, [r7, #0]
 800c356:	6878      	ldr	r0, [r7, #4]
 800c358:	f001 f913 	bl	800d582 <USBD_CtlError>
			  ret = USBD_FAIL;
 800c35c:	2302      	movs	r3, #2
 800c35e:	75fb      	strb	r3, [r7, #23]
      break;
 800c360:	e013      	b.n	800c38a <USBD_CDC_Setup+0x126>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800c362:	687b      	ldr	r3, [r7, #4]
 800c364:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800c368:	2b03      	cmp	r3, #3
 800c36a:	d00d      	beq.n	800c388 <USBD_CDC_Setup+0x124>
      {
        USBD_CtlError (pdev, req);
 800c36c:	6839      	ldr	r1, [r7, #0]
 800c36e:	6878      	ldr	r0, [r7, #4]
 800c370:	f001 f907 	bl	800d582 <USBD_CtlError>
			  ret = USBD_FAIL;
 800c374:	2302      	movs	r3, #2
 800c376:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800c378:	e006      	b.n	800c388 <USBD_CDC_Setup+0x124>

    default:
      USBD_CtlError (pdev, req);
 800c37a:	6839      	ldr	r1, [r7, #0]
 800c37c:	6878      	ldr	r0, [r7, #4]
 800c37e:	f001 f900 	bl	800d582 <USBD_CtlError>
      ret = USBD_FAIL;
 800c382:	2302      	movs	r3, #2
 800c384:	75fb      	strb	r3, [r7, #23]
      break;
 800c386:	e000      	b.n	800c38a <USBD_CDC_Setup+0x126>
      break;
 800c388:	bf00      	nop
    }
    break;
 800c38a:	e006      	b.n	800c39a <USBD_CDC_Setup+0x136>

  default:
    USBD_CtlError (pdev, req);
 800c38c:	6839      	ldr	r1, [r7, #0]
 800c38e:	6878      	ldr	r0, [r7, #4]
 800c390:	f001 f8f7 	bl	800d582 <USBD_CtlError>
    ret = USBD_FAIL;
 800c394:	2302      	movs	r3, #2
 800c396:	75fb      	strb	r3, [r7, #23]
    break;
 800c398:	bf00      	nop
  }

  return ret;
 800c39a:	7dfb      	ldrb	r3, [r7, #23]
}
 800c39c:	4618      	mov	r0, r3
 800c39e:	3718      	adds	r7, #24
 800c3a0:	46bd      	mov	sp, r7
 800c3a2:	bd80      	pop	{r7, pc}

0800c3a4 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800c3a4:	b580      	push	{r7, lr}
 800c3a6:	b084      	sub	sp, #16
 800c3a8:	af00      	add	r7, sp, #0
 800c3aa:	6078      	str	r0, [r7, #4]
 800c3ac:	460b      	mov	r3, r1
 800c3ae:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)pdev->pClassData;
 800c3b0:	687b      	ldr	r3, [r7, #4]
 800c3b2:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800c3b6:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800c3b8:	687b      	ldr	r3, [r7, #4]
 800c3ba:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800c3be:	60bb      	str	r3, [r7, #8]

  if(pdev->pClassData != NULL)
 800c3c0:	687b      	ldr	r3, [r7, #4]
 800c3c2:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800c3c6:	2b00      	cmp	r3, #0
 800c3c8:	d03a      	beq.n	800c440 <USBD_CDC_DataIn+0x9c>
  {
    if((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800c3ca:	78fa      	ldrb	r2, [r7, #3]
 800c3cc:	6879      	ldr	r1, [r7, #4]
 800c3ce:	4613      	mov	r3, r2
 800c3d0:	009b      	lsls	r3, r3, #2
 800c3d2:	4413      	add	r3, r2
 800c3d4:	009b      	lsls	r3, r3, #2
 800c3d6:	440b      	add	r3, r1
 800c3d8:	331c      	adds	r3, #28
 800c3da:	681b      	ldr	r3, [r3, #0]
 800c3dc:	2b00      	cmp	r3, #0
 800c3de:	d029      	beq.n	800c434 <USBD_CDC_DataIn+0x90>
 800c3e0:	78fa      	ldrb	r2, [r7, #3]
 800c3e2:	6879      	ldr	r1, [r7, #4]
 800c3e4:	4613      	mov	r3, r2
 800c3e6:	009b      	lsls	r3, r3, #2
 800c3e8:	4413      	add	r3, r2
 800c3ea:	009b      	lsls	r3, r3, #2
 800c3ec:	440b      	add	r3, r1
 800c3ee:	331c      	adds	r3, #28
 800c3f0:	681a      	ldr	r2, [r3, #0]
 800c3f2:	78f9      	ldrb	r1, [r7, #3]
 800c3f4:	68b8      	ldr	r0, [r7, #8]
 800c3f6:	460b      	mov	r3, r1
 800c3f8:	00db      	lsls	r3, r3, #3
 800c3fa:	1a5b      	subs	r3, r3, r1
 800c3fc:	009b      	lsls	r3, r3, #2
 800c3fe:	4403      	add	r3, r0
 800c400:	3344      	adds	r3, #68	; 0x44
 800c402:	681b      	ldr	r3, [r3, #0]
 800c404:	fbb2 f1f3 	udiv	r1, r2, r3
 800c408:	fb03 f301 	mul.w	r3, r3, r1
 800c40c:	1ad3      	subs	r3, r2, r3
 800c40e:	2b00      	cmp	r3, #0
 800c410:	d110      	bne.n	800c434 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 800c412:	78fa      	ldrb	r2, [r7, #3]
 800c414:	6879      	ldr	r1, [r7, #4]
 800c416:	4613      	mov	r3, r2
 800c418:	009b      	lsls	r3, r3, #2
 800c41a:	4413      	add	r3, r2
 800c41c:	009b      	lsls	r3, r3, #2
 800c41e:	440b      	add	r3, r1
 800c420:	331c      	adds	r3, #28
 800c422:	2200      	movs	r2, #0
 800c424:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit (pdev, epnum, NULL, 0U);
 800c426:	78f9      	ldrb	r1, [r7, #3]
 800c428:	2300      	movs	r3, #0
 800c42a:	2200      	movs	r2, #0
 800c42c:	6878      	ldr	r0, [r7, #4]
 800c42e:	f001 fe98 	bl	800e162 <USBD_LL_Transmit>
 800c432:	e003      	b.n	800c43c <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 800c434:	68fb      	ldr	r3, [r7, #12]
 800c436:	2200      	movs	r2, #0
 800c438:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 800c43c:	2300      	movs	r3, #0
 800c43e:	e000      	b.n	800c442 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 800c440:	2302      	movs	r3, #2
  }
}
 800c442:	4618      	mov	r0, r3
 800c444:	3710      	adds	r7, #16
 800c446:	46bd      	mov	sp, r7
 800c448:	bd80      	pop	{r7, pc}

0800c44a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800c44a:	b580      	push	{r7, lr}
 800c44c:	b084      	sub	sp, #16
 800c44e:	af00      	add	r7, sp, #0
 800c450:	6078      	str	r0, [r7, #4]
 800c452:	460b      	mov	r3, r1
 800c454:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800c456:	687b      	ldr	r3, [r7, #4]
 800c458:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800c45c:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize (pdev, epnum);
 800c45e:	78fb      	ldrb	r3, [r7, #3]
 800c460:	4619      	mov	r1, r3
 800c462:	6878      	ldr	r0, [r7, #4]
 800c464:	f001 fec3 	bl	800e1ee <USBD_LL_GetRxDataSize>
 800c468:	4602      	mov	r2, r0
 800c46a:	68fb      	ldr	r3, [r7, #12]
 800c46c:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if(pdev->pClassData != NULL)
 800c470:	687b      	ldr	r3, [r7, #4]
 800c472:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800c476:	2b00      	cmp	r3, #0
 800c478:	d00d      	beq.n	800c496 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800c47a:	687b      	ldr	r3, [r7, #4]
 800c47c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800c480:	68db      	ldr	r3, [r3, #12]
 800c482:	68fa      	ldr	r2, [r7, #12]
 800c484:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800c488:	68fa      	ldr	r2, [r7, #12]
 800c48a:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800c48e:	4611      	mov	r1, r2
 800c490:	4798      	blx	r3

    return USBD_OK;
 800c492:	2300      	movs	r3, #0
 800c494:	e000      	b.n	800c498 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 800c496:	2302      	movs	r3, #2
  }
}
 800c498:	4618      	mov	r0, r3
 800c49a:	3710      	adds	r7, #16
 800c49c:	46bd      	mov	sp, r7
 800c49e:	bd80      	pop	{r7, pc}

0800c4a0 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady (USBD_HandleTypeDef *pdev)
{
 800c4a0:	b580      	push	{r7, lr}
 800c4a2:	b084      	sub	sp, #16
 800c4a4:	af00      	add	r7, sp, #0
 800c4a6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800c4a8:	687b      	ldr	r3, [r7, #4]
 800c4aa:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800c4ae:	60fb      	str	r3, [r7, #12]

  if((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800c4b0:	687b      	ldr	r3, [r7, #4]
 800c4b2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800c4b6:	2b00      	cmp	r3, #0
 800c4b8:	d015      	beq.n	800c4e6 <USBD_CDC_EP0_RxReady+0x46>
 800c4ba:	68fb      	ldr	r3, [r7, #12]
 800c4bc:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800c4c0:	2bff      	cmp	r3, #255	; 0xff
 800c4c2:	d010      	beq.n	800c4e6 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800c4c4:	687b      	ldr	r3, [r7, #4]
 800c4c6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800c4ca:	689b      	ldr	r3, [r3, #8]
 800c4cc:	68fa      	ldr	r2, [r7, #12]
 800c4ce:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 800c4d2:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800c4d4:	68fa      	ldr	r2, [r7, #12]
 800c4d6:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800c4da:	b292      	uxth	r2, r2
 800c4dc:	4798      	blx	r3
      hcdc->CmdOpCode = 0xFFU;
 800c4de:	68fb      	ldr	r3, [r7, #12]
 800c4e0:	22ff      	movs	r2, #255	; 0xff
 800c4e2:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 800c4e6:	2300      	movs	r3, #0
}
 800c4e8:	4618      	mov	r0, r3
 800c4ea:	3710      	adds	r7, #16
 800c4ec:	46bd      	mov	sp, r7
 800c4ee:	bd80      	pop	{r7, pc}

0800c4f0 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc (uint16_t *length)
{
 800c4f0:	b480      	push	{r7}
 800c4f2:	b083      	sub	sp, #12
 800c4f4:	af00      	add	r7, sp, #0
 800c4f6:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_CfgFSDesc);
 800c4f8:	687b      	ldr	r3, [r7, #4]
 800c4fa:	2243      	movs	r2, #67	; 0x43
 800c4fc:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 800c4fe:	4b03      	ldr	r3, [pc, #12]	; (800c50c <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800c500:	4618      	mov	r0, r3
 800c502:	370c      	adds	r7, #12
 800c504:	46bd      	mov	sp, r7
 800c506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c50a:	4770      	bx	lr
 800c50c:	20000094 	.word	0x20000094

0800c510 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc (uint16_t *length)
{
 800c510:	b480      	push	{r7}
 800c512:	b083      	sub	sp, #12
 800c514:	af00      	add	r7, sp, #0
 800c516:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_CfgHSDesc);
 800c518:	687b      	ldr	r3, [r7, #4]
 800c51a:	2243      	movs	r2, #67	; 0x43
 800c51c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 800c51e:	4b03      	ldr	r3, [pc, #12]	; (800c52c <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800c520:	4618      	mov	r0, r3
 800c522:	370c      	adds	r7, #12
 800c524:	46bd      	mov	sp, r7
 800c526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c52a:	4770      	bx	lr
 800c52c:	20000050 	.word	0x20000050

0800c530 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc (uint16_t *length)
{
 800c530:	b480      	push	{r7}
 800c532:	b083      	sub	sp, #12
 800c534:	af00      	add	r7, sp, #0
 800c536:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_OtherSpeedCfgDesc);
 800c538:	687b      	ldr	r3, [r7, #4]
 800c53a:	2243      	movs	r2, #67	; 0x43
 800c53c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 800c53e:	4b03      	ldr	r3, [pc, #12]	; (800c54c <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800c540:	4618      	mov	r0, r3
 800c542:	370c      	adds	r7, #12
 800c544:	46bd      	mov	sp, r7
 800c546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c54a:	4770      	bx	lr
 800c54c:	200000d8 	.word	0x200000d8

0800c550 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor (uint16_t *length)
{
 800c550:	b480      	push	{r7}
 800c552:	b083      	sub	sp, #12
 800c554:	af00      	add	r7, sp, #0
 800c556:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_DeviceQualifierDesc);
 800c558:	687b      	ldr	r3, [r7, #4]
 800c55a:	220a      	movs	r2, #10
 800c55c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 800c55e:	4b03      	ldr	r3, [pc, #12]	; (800c56c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800c560:	4618      	mov	r0, r3
 800c562:	370c      	adds	r7, #12
 800c564:	46bd      	mov	sp, r7
 800c566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c56a:	4770      	bx	lr
 800c56c:	2000000c 	.word	0x2000000c

0800c570 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface  (USBD_HandleTypeDef   *pdev,
                                      USBD_CDC_ItfTypeDef *fops)
{
 800c570:	b480      	push	{r7}
 800c572:	b085      	sub	sp, #20
 800c574:	af00      	add	r7, sp, #0
 800c576:	6078      	str	r0, [r7, #4]
 800c578:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 800c57a:	2302      	movs	r3, #2
 800c57c:	73fb      	strb	r3, [r7, #15]

  if(fops != NULL)
 800c57e:	683b      	ldr	r3, [r7, #0]
 800c580:	2b00      	cmp	r3, #0
 800c582:	d005      	beq.n	800c590 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData= fops;
 800c584:	687b      	ldr	r3, [r7, #4]
 800c586:	683a      	ldr	r2, [r7, #0]
 800c588:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
    ret = USBD_OK;
 800c58c:	2300      	movs	r3, #0
 800c58e:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800c590:	7bfb      	ldrb	r3, [r7, #15]
}
 800c592:	4618      	mov	r0, r3
 800c594:	3714      	adds	r7, #20
 800c596:	46bd      	mov	sp, r7
 800c598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c59c:	4770      	bx	lr

0800c59e <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer  (USBD_HandleTypeDef   *pdev,
                                uint8_t  *pbuff,
                                uint16_t length)
{
 800c59e:	b480      	push	{r7}
 800c5a0:	b087      	sub	sp, #28
 800c5a2:	af00      	add	r7, sp, #0
 800c5a4:	60f8      	str	r0, [r7, #12]
 800c5a6:	60b9      	str	r1, [r7, #8]
 800c5a8:	4613      	mov	r3, r2
 800c5aa:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800c5ac:	68fb      	ldr	r3, [r7, #12]
 800c5ae:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800c5b2:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800c5b4:	697b      	ldr	r3, [r7, #20]
 800c5b6:	68ba      	ldr	r2, [r7, #8]
 800c5b8:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800c5bc:	88fa      	ldrh	r2, [r7, #6]
 800c5be:	697b      	ldr	r3, [r7, #20]
 800c5c0:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 800c5c4:	2300      	movs	r3, #0
}
 800c5c6:	4618      	mov	r0, r3
 800c5c8:	371c      	adds	r7, #28
 800c5ca:	46bd      	mov	sp, r7
 800c5cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5d0:	4770      	bx	lr

0800c5d2 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer  (USBD_HandleTypeDef   *pdev,
                                   uint8_t  *pbuff)
{
 800c5d2:	b480      	push	{r7}
 800c5d4:	b085      	sub	sp, #20
 800c5d6:	af00      	add	r7, sp, #0
 800c5d8:	6078      	str	r0, [r7, #4]
 800c5da:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800c5dc:	687b      	ldr	r3, [r7, #4]
 800c5de:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800c5e2:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 800c5e4:	68fb      	ldr	r3, [r7, #12]
 800c5e6:	683a      	ldr	r2, [r7, #0]
 800c5e8:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 800c5ec:	2300      	movs	r3, #0
}
 800c5ee:	4618      	mov	r0, r3
 800c5f0:	3714      	adds	r7, #20
 800c5f2:	46bd      	mov	sp, r7
 800c5f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5f8:	4770      	bx	lr

0800c5fa <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800c5fa:	b580      	push	{r7, lr}
 800c5fc:	b084      	sub	sp, #16
 800c5fe:	af00      	add	r7, sp, #0
 800c600:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800c602:	687b      	ldr	r3, [r7, #4]
 800c604:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800c608:	60fb      	str	r3, [r7, #12]

  if(pdev->pClassData != NULL)
 800c60a:	687b      	ldr	r3, [r7, #4]
 800c60c:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800c610:	2b00      	cmp	r3, #0
 800c612:	d01c      	beq.n	800c64e <USBD_CDC_TransmitPacket+0x54>
  {
    if(hcdc->TxState == 0U)
 800c614:	68fb      	ldr	r3, [r7, #12]
 800c616:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800c61a:	2b00      	cmp	r3, #0
 800c61c:	d115      	bne.n	800c64a <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 800c61e:	68fb      	ldr	r3, [r7, #12]
 800c620:	2201      	movs	r2, #1
 800c622:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800c626:	68fb      	ldr	r3, [r7, #12]
 800c628:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800c62c:	687b      	ldr	r3, [r7, #4]
 800c62e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800c630:	68fb      	ldr	r3, [r7, #12]
 800c632:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 800c636:	68fb      	ldr	r3, [r7, #12]
 800c638:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800c63c:	b29b      	uxth	r3, r3
 800c63e:	2181      	movs	r1, #129	; 0x81
 800c640:	6878      	ldr	r0, [r7, #4]
 800c642:	f001 fd8e 	bl	800e162 <USBD_LL_Transmit>

      return USBD_OK;
 800c646:	2300      	movs	r3, #0
 800c648:	e002      	b.n	800c650 <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 800c64a:	2301      	movs	r3, #1
 800c64c:	e000      	b.n	800c650 <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 800c64e:	2302      	movs	r3, #2
  }
}
 800c650:	4618      	mov	r0, r3
 800c652:	3710      	adds	r7, #16
 800c654:	46bd      	mov	sp, r7
 800c656:	bd80      	pop	{r7, pc}

0800c658 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800c658:	b580      	push	{r7, lr}
 800c65a:	b084      	sub	sp, #16
 800c65c:	af00      	add	r7, sp, #0
 800c65e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800c660:	687b      	ldr	r3, [r7, #4]
 800c662:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800c666:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if(pdev->pClassData != NULL)
 800c668:	687b      	ldr	r3, [r7, #4]
 800c66a:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800c66e:	2b00      	cmp	r3, #0
 800c670:	d017      	beq.n	800c6a2 <USBD_CDC_ReceivePacket+0x4a>
  {
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 800c672:	687b      	ldr	r3, [r7, #4]
 800c674:	7c1b      	ldrb	r3, [r3, #16]
 800c676:	2b00      	cmp	r3, #0
 800c678:	d109      	bne.n	800c68e <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800c67a:	68fb      	ldr	r3, [r7, #12]
 800c67c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800c680:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c684:	2101      	movs	r1, #1
 800c686:	6878      	ldr	r0, [r7, #4]
 800c688:	f001 fd8e 	bl	800e1a8 <USBD_LL_PrepareReceive>
 800c68c:	e007      	b.n	800c69e <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800c68e:	68fb      	ldr	r3, [r7, #12]
 800c690:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800c694:	2340      	movs	r3, #64	; 0x40
 800c696:	2101      	movs	r1, #1
 800c698:	6878      	ldr	r0, [r7, #4]
 800c69a:	f001 fd85 	bl	800e1a8 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 800c69e:	2300      	movs	r3, #0
 800c6a0:	e000      	b.n	800c6a4 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 800c6a2:	2302      	movs	r3, #2
  }
}
 800c6a4:	4618      	mov	r0, r3
 800c6a6:	3710      	adds	r7, #16
 800c6a8:	46bd      	mov	sp, r7
 800c6aa:	bd80      	pop	{r7, pc}

0800c6ac <USBD_Init>:
* @param  pdesc: Descriptor structure address
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev, USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800c6ac:	b580      	push	{r7, lr}
 800c6ae:	b084      	sub	sp, #16
 800c6b0:	af00      	add	r7, sp, #0
 800c6b2:	60f8      	str	r0, [r7, #12]
 800c6b4:	60b9      	str	r1, [r7, #8]
 800c6b6:	4613      	mov	r3, r2
 800c6b8:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if(pdev == NULL)
 800c6ba:	68fb      	ldr	r3, [r7, #12]
 800c6bc:	2b00      	cmp	r3, #0
 800c6be:	d101      	bne.n	800c6c4 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800c6c0:	2302      	movs	r3, #2
 800c6c2:	e01a      	b.n	800c6fa <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if(pdev->pClass != NULL)
 800c6c4:	68fb      	ldr	r3, [r7, #12]
 800c6c6:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800c6ca:	2b00      	cmp	r3, #0
 800c6cc:	d003      	beq.n	800c6d6 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800c6ce:	68fb      	ldr	r3, [r7, #12]
 800c6d0:	2200      	movs	r2, #0
 800c6d2:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
  }

  /* Assign USBD Descriptors */
  if(pdesc != NULL)
 800c6d6:	68bb      	ldr	r3, [r7, #8]
 800c6d8:	2b00      	cmp	r3, #0
 800c6da:	d003      	beq.n	800c6e4 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 800c6dc:	68fb      	ldr	r3, [r7, #12]
 800c6de:	68ba      	ldr	r2, [r7, #8]
 800c6e0:	f8c3 2288 	str.w	r2, [r3, #648]	; 0x288
  }

  /* Set Device initial State */
  pdev->dev_state  = USBD_STATE_DEFAULT;
 800c6e4:	68fb      	ldr	r3, [r7, #12]
 800c6e6:	2201      	movs	r2, #1
 800c6e8:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->id = id;
 800c6ec:	68fb      	ldr	r3, [r7, #12]
 800c6ee:	79fa      	ldrb	r2, [r7, #7]
 800c6f0:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800c6f2:	68f8      	ldr	r0, [r7, #12]
 800c6f4:	f001 fc00 	bl	800def8 <USBD_LL_Init>

  return USBD_OK;
 800c6f8:	2300      	movs	r3, #0
}
 800c6fa:	4618      	mov	r0, r3
 800c6fc:	3710      	adds	r7, #16
 800c6fe:	46bd      	mov	sp, r7
 800c700:	bd80      	pop	{r7, pc}

0800c702 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800c702:	b480      	push	{r7}
 800c704:	b085      	sub	sp, #20
 800c706:	af00      	add	r7, sp, #0
 800c708:	6078      	str	r0, [r7, #4]
 800c70a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef   status = USBD_OK;
 800c70c:	2300      	movs	r3, #0
 800c70e:	73fb      	strb	r3, [r7, #15]
  if(pclass != 0)
 800c710:	683b      	ldr	r3, [r7, #0]
 800c712:	2b00      	cmp	r3, #0
 800c714:	d006      	beq.n	800c724 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 800c716:	687b      	ldr	r3, [r7, #4]
 800c718:	683a      	ldr	r2, [r7, #0]
 800c71a:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
    status = USBD_OK;
 800c71e:	2300      	movs	r3, #0
 800c720:	73fb      	strb	r3, [r7, #15]
 800c722:	e001      	b.n	800c728 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 800c724:	2302      	movs	r3, #2
 800c726:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800c728:	7bfb      	ldrb	r3, [r7, #15]
}
 800c72a:	4618      	mov	r0, r3
 800c72c:	3714      	adds	r7, #20
 800c72e:	46bd      	mov	sp, r7
 800c730:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c734:	4770      	bx	lr

0800c736 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start  (USBD_HandleTypeDef *pdev)
{
 800c736:	b580      	push	{r7, lr}
 800c738:	b082      	sub	sp, #8
 800c73a:	af00      	add	r7, sp, #0
 800c73c:	6078      	str	r0, [r7, #4]

  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 800c73e:	6878      	ldr	r0, [r7, #4]
 800c740:	f001 fc26 	bl	800df90 <USBD_LL_Start>

  return USBD_OK;
 800c744:	2300      	movs	r3, #0
}
 800c746:	4618      	mov	r0, r3
 800c748:	3708      	adds	r7, #8
 800c74a:	46bd      	mov	sp, r7
 800c74c:	bd80      	pop	{r7, pc}

0800c74e <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode (USBD_HandleTypeDef  *pdev)
{
 800c74e:	b480      	push	{r7}
 800c750:	b083      	sub	sp, #12
 800c752:	af00      	add	r7, sp, #0
 800c754:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800c756:	2300      	movs	r3, #0
}
 800c758:	4618      	mov	r0, r3
 800c75a:	370c      	adds	r7, #12
 800c75c:	46bd      	mov	sp, r7
 800c75e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c762:	4770      	bx	lr

0800c764 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800c764:	b580      	push	{r7, lr}
 800c766:	b084      	sub	sp, #16
 800c768:	af00      	add	r7, sp, #0
 800c76a:	6078      	str	r0, [r7, #4]
 800c76c:	460b      	mov	r3, r1
 800c76e:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef   ret = USBD_FAIL;
 800c770:	2302      	movs	r3, #2
 800c772:	73fb      	strb	r3, [r7, #15]

  if(pdev->pClass != NULL)
 800c774:	687b      	ldr	r3, [r7, #4]
 800c776:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800c77a:	2b00      	cmp	r3, #0
 800c77c:	d00c      	beq.n	800c798 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if(pdev->pClass->Init(pdev, cfgidx) == 0U)
 800c77e:	687b      	ldr	r3, [r7, #4]
 800c780:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800c784:	681b      	ldr	r3, [r3, #0]
 800c786:	78fa      	ldrb	r2, [r7, #3]
 800c788:	4611      	mov	r1, r2
 800c78a:	6878      	ldr	r0, [r7, #4]
 800c78c:	4798      	blx	r3
 800c78e:	4603      	mov	r3, r0
 800c790:	2b00      	cmp	r3, #0
 800c792:	d101      	bne.n	800c798 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 800c794:	2300      	movs	r3, #0
 800c796:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 800c798:	7bfb      	ldrb	r3, [r7, #15]
}
 800c79a:	4618      	mov	r0, r3
 800c79c:	3710      	adds	r7, #16
 800c79e:	46bd      	mov	sp, r7
 800c7a0:	bd80      	pop	{r7, pc}

0800c7a2 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800c7a2:	b580      	push	{r7, lr}
 800c7a4:	b082      	sub	sp, #8
 800c7a6:	af00      	add	r7, sp, #0
 800c7a8:	6078      	str	r0, [r7, #4]
 800c7aa:	460b      	mov	r3, r1
 800c7ac:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 800c7ae:	687b      	ldr	r3, [r7, #4]
 800c7b0:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800c7b4:	685b      	ldr	r3, [r3, #4]
 800c7b6:	78fa      	ldrb	r2, [r7, #3]
 800c7b8:	4611      	mov	r1, r2
 800c7ba:	6878      	ldr	r0, [r7, #4]
 800c7bc:	4798      	blx	r3
  return USBD_OK;
 800c7be:	2300      	movs	r3, #0
}
 800c7c0:	4618      	mov	r0, r3
 800c7c2:	3708      	adds	r7, #8
 800c7c4:	46bd      	mov	sp, r7
 800c7c6:	bd80      	pop	{r7, pc}

0800c7c8 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800c7c8:	b580      	push	{r7, lr}
 800c7ca:	b082      	sub	sp, #8
 800c7cc:	af00      	add	r7, sp, #0
 800c7ce:	6078      	str	r0, [r7, #4]
 800c7d0:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800c7d2:	687b      	ldr	r3, [r7, #4]
 800c7d4:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800c7d8:	6839      	ldr	r1, [r7, #0]
 800c7da:	4618      	mov	r0, r3
 800c7dc:	f000 fe94 	bl	800d508 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800c7e0:	687b      	ldr	r3, [r7, #4]
 800c7e2:	2201      	movs	r2, #1
 800c7e4:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

  pdev->ep0_data_len = pdev->request.wLength;
 800c7e8:	687b      	ldr	r3, [r7, #4]
 800c7ea:	f8b3 3286 	ldrh.w	r3, [r3, #646]	; 0x286
 800c7ee:	461a      	mov	r2, r3
 800c7f0:	687b      	ldr	r3, [r7, #4]
 800c7f2:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

  switch (pdev->request.bmRequest & 0x1FU)
 800c7f6:	687b      	ldr	r3, [r7, #4]
 800c7f8:	f893 3280 	ldrb.w	r3, [r3, #640]	; 0x280
 800c7fc:	f003 031f 	and.w	r3, r3, #31
 800c800:	2b01      	cmp	r3, #1
 800c802:	d00c      	beq.n	800c81e <USBD_LL_SetupStage+0x56>
 800c804:	2b01      	cmp	r3, #1
 800c806:	d302      	bcc.n	800c80e <USBD_LL_SetupStage+0x46>
 800c808:	2b02      	cmp	r3, #2
 800c80a:	d010      	beq.n	800c82e <USBD_LL_SetupStage+0x66>
 800c80c:	e017      	b.n	800c83e <USBD_LL_SetupStage+0x76>
  {
  case USB_REQ_RECIPIENT_DEVICE:
    USBD_StdDevReq (pdev, &pdev->request);
 800c80e:	687b      	ldr	r3, [r7, #4]
 800c810:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800c814:	4619      	mov	r1, r3
 800c816:	6878      	ldr	r0, [r7, #4]
 800c818:	f000 fa04 	bl	800cc24 <USBD_StdDevReq>
    break;
 800c81c:	e01a      	b.n	800c854 <USBD_LL_SetupStage+0x8c>

  case USB_REQ_RECIPIENT_INTERFACE:
    USBD_StdItfReq(pdev, &pdev->request);
 800c81e:	687b      	ldr	r3, [r7, #4]
 800c820:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800c824:	4619      	mov	r1, r3
 800c826:	6878      	ldr	r0, [r7, #4]
 800c828:	f000 fa66 	bl	800ccf8 <USBD_StdItfReq>
    break;
 800c82c:	e012      	b.n	800c854 <USBD_LL_SetupStage+0x8c>

  case USB_REQ_RECIPIENT_ENDPOINT:
    USBD_StdEPReq(pdev, &pdev->request);
 800c82e:	687b      	ldr	r3, [r7, #4]
 800c830:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800c834:	4619      	mov	r1, r3
 800c836:	6878      	ldr	r0, [r7, #4]
 800c838:	f000 faa4 	bl	800cd84 <USBD_StdEPReq>
    break;
 800c83c:	e00a      	b.n	800c854 <USBD_LL_SetupStage+0x8c>

  default:
    USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800c83e:	687b      	ldr	r3, [r7, #4]
 800c840:	f893 3280 	ldrb.w	r3, [r3, #640]	; 0x280
 800c844:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800c848:	b2db      	uxtb	r3, r3
 800c84a:	4619      	mov	r1, r3
 800c84c:	6878      	ldr	r0, [r7, #4]
 800c84e:	f001 fbff 	bl	800e050 <USBD_LL_StallEP>
    break;
 800c852:	bf00      	nop
  }

  return USBD_OK;
 800c854:	2300      	movs	r3, #0
}
 800c856:	4618      	mov	r0, r3
 800c858:	3708      	adds	r7, #8
 800c85a:	46bd      	mov	sp, r7
 800c85c:	bd80      	pop	{r7, pc}

0800c85e <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800c85e:	b580      	push	{r7, lr}
 800c860:	b086      	sub	sp, #24
 800c862:	af00      	add	r7, sp, #0
 800c864:	60f8      	str	r0, [r7, #12]
 800c866:	460b      	mov	r3, r1
 800c868:	607a      	str	r2, [r7, #4]
 800c86a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef    *pep;

  if(epnum == 0U)
 800c86c:	7afb      	ldrb	r3, [r7, #11]
 800c86e:	2b00      	cmp	r3, #0
 800c870:	d14b      	bne.n	800c90a <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 800c872:	68fb      	ldr	r3, [r7, #12]
 800c874:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 800c878:	617b      	str	r3, [r7, #20]

    if ( pdev->ep0_state == USBD_EP0_DATA_OUT)
 800c87a:	68fb      	ldr	r3, [r7, #12]
 800c87c:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 800c880:	2b03      	cmp	r3, #3
 800c882:	d134      	bne.n	800c8ee <USBD_LL_DataOutStage+0x90>
    {
      if(pep->rem_length > pep->maxpacket)
 800c884:	697b      	ldr	r3, [r7, #20]
 800c886:	68da      	ldr	r2, [r3, #12]
 800c888:	697b      	ldr	r3, [r7, #20]
 800c88a:	691b      	ldr	r3, [r3, #16]
 800c88c:	429a      	cmp	r2, r3
 800c88e:	d919      	bls.n	800c8c4 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -=  pep->maxpacket;
 800c890:	697b      	ldr	r3, [r7, #20]
 800c892:	68da      	ldr	r2, [r3, #12]
 800c894:	697b      	ldr	r3, [r7, #20]
 800c896:	691b      	ldr	r3, [r3, #16]
 800c898:	1ad2      	subs	r2, r2, r3
 800c89a:	697b      	ldr	r3, [r7, #20]
 800c89c:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx (pdev,
                            pdata,
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800c89e:	697b      	ldr	r3, [r7, #20]
 800c8a0:	68da      	ldr	r2, [r3, #12]
 800c8a2:	697b      	ldr	r3, [r7, #20]
 800c8a4:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx (pdev,
 800c8a6:	429a      	cmp	r2, r3
 800c8a8:	d203      	bcs.n	800c8b2 <USBD_LL_DataOutStage+0x54>
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800c8aa:	697b      	ldr	r3, [r7, #20]
 800c8ac:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx (pdev,
 800c8ae:	b29b      	uxth	r3, r3
 800c8b0:	e002      	b.n	800c8b8 <USBD_LL_DataOutStage+0x5a>
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800c8b2:	697b      	ldr	r3, [r7, #20]
 800c8b4:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx (pdev,
 800c8b6:	b29b      	uxth	r3, r3
 800c8b8:	461a      	mov	r2, r3
 800c8ba:	6879      	ldr	r1, [r7, #4]
 800c8bc:	68f8      	ldr	r0, [r7, #12]
 800c8be:	f000 ff17 	bl	800d6f0 <USBD_CtlContinueRx>
 800c8c2:	e038      	b.n	800c936 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if((pdev->pClass->EP0_RxReady != NULL)&&
 800c8c4:	68fb      	ldr	r3, [r7, #12]
 800c8c6:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800c8ca:	691b      	ldr	r3, [r3, #16]
 800c8cc:	2b00      	cmp	r3, #0
 800c8ce:	d00a      	beq.n	800c8e6 <USBD_LL_DataOutStage+0x88>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800c8d0:	68fb      	ldr	r3, [r7, #12]
 800c8d2:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
        if((pdev->pClass->EP0_RxReady != NULL)&&
 800c8d6:	2b03      	cmp	r3, #3
 800c8d8:	d105      	bne.n	800c8e6 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800c8da:	68fb      	ldr	r3, [r7, #12]
 800c8dc:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800c8e0:	691b      	ldr	r3, [r3, #16]
 800c8e2:	68f8      	ldr	r0, [r7, #12]
 800c8e4:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 800c8e6:	68f8      	ldr	r0, [r7, #12]
 800c8e8:	f000 ff14 	bl	800d714 <USBD_CtlSendStatus>
 800c8ec:	e023      	b.n	800c936 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 800c8ee:	68fb      	ldr	r3, [r7, #12]
 800c8f0:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 800c8f4:	2b05      	cmp	r3, #5
 800c8f6:	d11e      	bne.n	800c936 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 800c8f8:	68fb      	ldr	r3, [r7, #12]
 800c8fa:	2200      	movs	r2, #0
 800c8fc:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
        USBD_LL_StallEP(pdev, 0U);
 800c900:	2100      	movs	r1, #0
 800c902:	68f8      	ldr	r0, [r7, #12]
 800c904:	f001 fba4 	bl	800e050 <USBD_LL_StallEP>
 800c908:	e015      	b.n	800c936 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if((pdev->pClass->DataOut != NULL) &&
 800c90a:	68fb      	ldr	r3, [r7, #12]
 800c90c:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800c910:	699b      	ldr	r3, [r3, #24]
 800c912:	2b00      	cmp	r3, #0
 800c914:	d00d      	beq.n	800c932 <USBD_LL_DataOutStage+0xd4>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 800c916:	68fb      	ldr	r3, [r7, #12]
 800c918:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
  else if((pdev->pClass->DataOut != NULL) &&
 800c91c:	2b03      	cmp	r3, #3
 800c91e:	d108      	bne.n	800c932 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 800c920:	68fb      	ldr	r3, [r7, #12]
 800c922:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800c926:	699b      	ldr	r3, [r3, #24]
 800c928:	7afa      	ldrb	r2, [r7, #11]
 800c92a:	4611      	mov	r1, r2
 800c92c:	68f8      	ldr	r0, [r7, #12]
 800c92e:	4798      	blx	r3
 800c930:	e001      	b.n	800c936 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800c932:	2302      	movs	r3, #2
 800c934:	e000      	b.n	800c938 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 800c936:	2300      	movs	r3, #0
}
 800c938:	4618      	mov	r0, r3
 800c93a:	3718      	adds	r7, #24
 800c93c:	46bd      	mov	sp, r7
 800c93e:	bd80      	pop	{r7, pc}

0800c940 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev, uint8_t epnum,
                                       uint8_t *pdata)
{
 800c940:	b580      	push	{r7, lr}
 800c942:	b086      	sub	sp, #24
 800c944:	af00      	add	r7, sp, #0
 800c946:	60f8      	str	r0, [r7, #12]
 800c948:	460b      	mov	r3, r1
 800c94a:	607a      	str	r2, [r7, #4]
 800c94c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if(epnum == 0U)
 800c94e:	7afb      	ldrb	r3, [r7, #11]
 800c950:	2b00      	cmp	r3, #0
 800c952:	d17f      	bne.n	800ca54 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 800c954:	68fb      	ldr	r3, [r7, #12]
 800c956:	3314      	adds	r3, #20
 800c958:	617b      	str	r3, [r7, #20]

    if ( pdev->ep0_state == USBD_EP0_DATA_IN)
 800c95a:	68fb      	ldr	r3, [r7, #12]
 800c95c:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 800c960:	2b02      	cmp	r3, #2
 800c962:	d15c      	bne.n	800ca1e <USBD_LL_DataInStage+0xde>
    {
      if(pep->rem_length > pep->maxpacket)
 800c964:	697b      	ldr	r3, [r7, #20]
 800c966:	68da      	ldr	r2, [r3, #12]
 800c968:	697b      	ldr	r3, [r7, #20]
 800c96a:	691b      	ldr	r3, [r3, #16]
 800c96c:	429a      	cmp	r2, r3
 800c96e:	d915      	bls.n	800c99c <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 800c970:	697b      	ldr	r3, [r7, #20]
 800c972:	68da      	ldr	r2, [r3, #12]
 800c974:	697b      	ldr	r3, [r7, #20]
 800c976:	691b      	ldr	r3, [r3, #16]
 800c978:	1ad2      	subs	r2, r2, r3
 800c97a:	697b      	ldr	r3, [r7, #20]
 800c97c:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData (pdev, pdata, (uint16_t)pep->rem_length);
 800c97e:	697b      	ldr	r3, [r7, #20]
 800c980:	68db      	ldr	r3, [r3, #12]
 800c982:	b29b      	uxth	r3, r3
 800c984:	461a      	mov	r2, r3
 800c986:	6879      	ldr	r1, [r7, #4]
 800c988:	68f8      	ldr	r0, [r7, #12]
 800c98a:	f000 fe81 	bl	800d690 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 800c98e:	2300      	movs	r3, #0
 800c990:	2200      	movs	r2, #0
 800c992:	2100      	movs	r1, #0
 800c994:	68f8      	ldr	r0, [r7, #12]
 800c996:	f001 fc07 	bl	800e1a8 <USBD_LL_PrepareReceive>
 800c99a:	e04e      	b.n	800ca3a <USBD_LL_DataInStage+0xfa>
      }
      else
      { /* last packet is MPS multiple, so send ZLP packet */
        if((pep->total_length % pep->maxpacket == 0U) &&
 800c99c:	697b      	ldr	r3, [r7, #20]
 800c99e:	689b      	ldr	r3, [r3, #8]
 800c9a0:	697a      	ldr	r2, [r7, #20]
 800c9a2:	6912      	ldr	r2, [r2, #16]
 800c9a4:	fbb3 f1f2 	udiv	r1, r3, r2
 800c9a8:	fb02 f201 	mul.w	r2, r2, r1
 800c9ac:	1a9b      	subs	r3, r3, r2
 800c9ae:	2b00      	cmp	r3, #0
 800c9b0:	d11c      	bne.n	800c9ec <USBD_LL_DataInStage+0xac>
           (pep->total_length >= pep->maxpacket) &&
 800c9b2:	697b      	ldr	r3, [r7, #20]
 800c9b4:	689a      	ldr	r2, [r3, #8]
 800c9b6:	697b      	ldr	r3, [r7, #20]
 800c9b8:	691b      	ldr	r3, [r3, #16]
        if((pep->total_length % pep->maxpacket == 0U) &&
 800c9ba:	429a      	cmp	r2, r3
 800c9bc:	d316      	bcc.n	800c9ec <USBD_LL_DataInStage+0xac>
           (pep->total_length < pdev->ep0_data_len))
 800c9be:	697b      	ldr	r3, [r7, #20]
 800c9c0:	689a      	ldr	r2, [r3, #8]
 800c9c2:	68fb      	ldr	r3, [r7, #12]
 800c9c4:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
           (pep->total_length >= pep->maxpacket) &&
 800c9c8:	429a      	cmp	r2, r3
 800c9ca:	d20f      	bcs.n	800c9ec <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800c9cc:	2200      	movs	r2, #0
 800c9ce:	2100      	movs	r1, #0
 800c9d0:	68f8      	ldr	r0, [r7, #12]
 800c9d2:	f000 fe5d 	bl	800d690 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800c9d6:	68fb      	ldr	r3, [r7, #12]
 800c9d8:	2200      	movs	r2, #0
 800c9da:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 800c9de:	2300      	movs	r3, #0
 800c9e0:	2200      	movs	r2, #0
 800c9e2:	2100      	movs	r1, #0
 800c9e4:	68f8      	ldr	r0, [r7, #12]
 800c9e6:	f001 fbdf 	bl	800e1a8 <USBD_LL_PrepareReceive>
 800c9ea:	e026      	b.n	800ca3a <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if((pdev->pClass->EP0_TxSent != NULL)&&
 800c9ec:	68fb      	ldr	r3, [r7, #12]
 800c9ee:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800c9f2:	68db      	ldr	r3, [r3, #12]
 800c9f4:	2b00      	cmp	r3, #0
 800c9f6:	d00a      	beq.n	800ca0e <USBD_LL_DataInStage+0xce>
             (pdev->dev_state == USBD_STATE_CONFIGURED))
 800c9f8:	68fb      	ldr	r3, [r7, #12]
 800c9fa:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
          if((pdev->pClass->EP0_TxSent != NULL)&&
 800c9fe:	2b03      	cmp	r3, #3
 800ca00:	d105      	bne.n	800ca0e <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800ca02:	68fb      	ldr	r3, [r7, #12]
 800ca04:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800ca08:	68db      	ldr	r3, [r3, #12]
 800ca0a:	68f8      	ldr	r0, [r7, #12]
 800ca0c:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 800ca0e:	2180      	movs	r1, #128	; 0x80
 800ca10:	68f8      	ldr	r0, [r7, #12]
 800ca12:	f001 fb1d 	bl	800e050 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 800ca16:	68f8      	ldr	r0, [r7, #12]
 800ca18:	f000 fe8f 	bl	800d73a <USBD_CtlReceiveStatus>
 800ca1c:	e00d      	b.n	800ca3a <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800ca1e:	68fb      	ldr	r3, [r7, #12]
 800ca20:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 800ca24:	2b04      	cmp	r3, #4
 800ca26:	d004      	beq.n	800ca32 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 800ca28:	68fb      	ldr	r3, [r7, #12]
 800ca2a:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800ca2e:	2b00      	cmp	r3, #0
 800ca30:	d103      	bne.n	800ca3a <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 800ca32:	2180      	movs	r1, #128	; 0x80
 800ca34:	68f8      	ldr	r0, [r7, #12]
 800ca36:	f001 fb0b 	bl	800e050 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 800ca3a:	68fb      	ldr	r3, [r7, #12]
 800ca3c:	f893 3278 	ldrb.w	r3, [r3, #632]	; 0x278
 800ca40:	2b01      	cmp	r3, #1
 800ca42:	d11d      	bne.n	800ca80 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 800ca44:	68f8      	ldr	r0, [r7, #12]
 800ca46:	f7ff fe82 	bl	800c74e <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800ca4a:	68fb      	ldr	r3, [r7, #12]
 800ca4c:	2200      	movs	r2, #0
 800ca4e:	f883 2278 	strb.w	r2, [r3, #632]	; 0x278
 800ca52:	e015      	b.n	800ca80 <USBD_LL_DataInStage+0x140>
    }
  }
  else if((pdev->pClass->DataIn != NULL) &&
 800ca54:	68fb      	ldr	r3, [r7, #12]
 800ca56:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800ca5a:	695b      	ldr	r3, [r3, #20]
 800ca5c:	2b00      	cmp	r3, #0
 800ca5e:	d00d      	beq.n	800ca7c <USBD_LL_DataInStage+0x13c>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 800ca60:	68fb      	ldr	r3, [r7, #12]
 800ca62:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
  else if((pdev->pClass->DataIn != NULL) &&
 800ca66:	2b03      	cmp	r3, #3
 800ca68:	d108      	bne.n	800ca7c <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 800ca6a:	68fb      	ldr	r3, [r7, #12]
 800ca6c:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800ca70:	695b      	ldr	r3, [r3, #20]
 800ca72:	7afa      	ldrb	r2, [r7, #11]
 800ca74:	4611      	mov	r1, r2
 800ca76:	68f8      	ldr	r0, [r7, #12]
 800ca78:	4798      	blx	r3
 800ca7a:	e001      	b.n	800ca80 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800ca7c:	2302      	movs	r3, #2
 800ca7e:	e000      	b.n	800ca82 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 800ca80:	2300      	movs	r3, #0
}
 800ca82:	4618      	mov	r0, r3
 800ca84:	3718      	adds	r7, #24
 800ca86:	46bd      	mov	sp, r7
 800ca88:	bd80      	pop	{r7, pc}

0800ca8a <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef  *pdev)
{
 800ca8a:	b580      	push	{r7, lr}
 800ca8c:	b082      	sub	sp, #8
 800ca8e:	af00      	add	r7, sp, #0
 800ca90:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800ca92:	2340      	movs	r3, #64	; 0x40
 800ca94:	2200      	movs	r2, #0
 800ca96:	2100      	movs	r1, #0
 800ca98:	6878      	ldr	r0, [r7, #4]
 800ca9a:	f001 fa94 	bl	800dfc6 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800ca9e:	687b      	ldr	r3, [r7, #4]
 800caa0:	2201      	movs	r2, #1
 800caa2:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800caa6:	687b      	ldr	r3, [r7, #4]
 800caa8:	2240      	movs	r2, #64	; 0x40
 800caaa:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800caae:	2340      	movs	r3, #64	; 0x40
 800cab0:	2200      	movs	r2, #0
 800cab2:	2180      	movs	r1, #128	; 0x80
 800cab4:	6878      	ldr	r0, [r7, #4]
 800cab6:	f001 fa86 	bl	800dfc6 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800caba:	687b      	ldr	r3, [r7, #4]
 800cabc:	2201      	movs	r2, #1
 800cabe:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800cac0:	687b      	ldr	r3, [r7, #4]
 800cac2:	2240      	movs	r2, #64	; 0x40
 800cac4:	625a      	str	r2, [r3, #36]	; 0x24
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800cac6:	687b      	ldr	r3, [r7, #4]
 800cac8:	2201      	movs	r2, #1
 800caca:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->ep0_state = USBD_EP0_IDLE;
 800cace:	687b      	ldr	r3, [r7, #4]
 800cad0:	2200      	movs	r2, #0
 800cad2:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->dev_config= 0U;
 800cad6:	687b      	ldr	r3, [r7, #4]
 800cad8:	2200      	movs	r2, #0
 800cada:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800cadc:	687b      	ldr	r3, [r7, #4]
 800cade:	2200      	movs	r2, #0
 800cae0:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c

  if (pdev->pClassData)
 800cae4:	687b      	ldr	r3, [r7, #4]
 800cae6:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800caea:	2b00      	cmp	r3, #0
 800caec:	d009      	beq.n	800cb02 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800caee:	687b      	ldr	r3, [r7, #4]
 800caf0:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800caf4:	685b      	ldr	r3, [r3, #4]
 800caf6:	687a      	ldr	r2, [r7, #4]
 800caf8:	6852      	ldr	r2, [r2, #4]
 800cafa:	b2d2      	uxtb	r2, r2
 800cafc:	4611      	mov	r1, r2
 800cafe:	6878      	ldr	r0, [r7, #4]
 800cb00:	4798      	blx	r3
  }

  return USBD_OK;
 800cb02:	2300      	movs	r3, #0
}
 800cb04:	4618      	mov	r0, r3
 800cb06:	3708      	adds	r7, #8
 800cb08:	46bd      	mov	sp, r7
 800cb0a:	bd80      	pop	{r7, pc}

0800cb0c <USBD_LL_SetSpeed>:
*         Handle Reset event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef  *pdev, USBD_SpeedTypeDef speed)
{
 800cb0c:	b480      	push	{r7}
 800cb0e:	b083      	sub	sp, #12
 800cb10:	af00      	add	r7, sp, #0
 800cb12:	6078      	str	r0, [r7, #4]
 800cb14:	460b      	mov	r3, r1
 800cb16:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800cb18:	687b      	ldr	r3, [r7, #4]
 800cb1a:	78fa      	ldrb	r2, [r7, #3]
 800cb1c:	741a      	strb	r2, [r3, #16]
  return USBD_OK;
 800cb1e:	2300      	movs	r3, #0
}
 800cb20:	4618      	mov	r0, r3
 800cb22:	370c      	adds	r7, #12
 800cb24:	46bd      	mov	sp, r7
 800cb26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb2a:	4770      	bx	lr

0800cb2c <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef  *pdev)
{
 800cb2c:	b480      	push	{r7}
 800cb2e:	b083      	sub	sp, #12
 800cb30:	af00      	add	r7, sp, #0
 800cb32:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 800cb34:	687b      	ldr	r3, [r7, #4]
 800cb36:	f893 2274 	ldrb.w	r2, [r3, #628]	; 0x274
 800cb3a:	687b      	ldr	r3, [r7, #4]
 800cb3c:	f883 2275 	strb.w	r2, [r3, #629]	; 0x275
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800cb40:	687b      	ldr	r3, [r7, #4]
 800cb42:	2204      	movs	r2, #4
 800cb44:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  return USBD_OK;
 800cb48:	2300      	movs	r3, #0
}
 800cb4a:	4618      	mov	r0, r3
 800cb4c:	370c      	adds	r7, #12
 800cb4e:	46bd      	mov	sp, r7
 800cb50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb54:	4770      	bx	lr

0800cb56 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef  *pdev)
{
 800cb56:	b480      	push	{r7}
 800cb58:	b083      	sub	sp, #12
 800cb5a:	af00      	add	r7, sp, #0
 800cb5c:	6078      	str	r0, [r7, #4]
  pdev->dev_state = pdev->dev_old_state;
 800cb5e:	687b      	ldr	r3, [r7, #4]
 800cb60:	f893 2275 	ldrb.w	r2, [r3, #629]	; 0x275
 800cb64:	687b      	ldr	r3, [r7, #4]
 800cb66:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  return USBD_OK;
 800cb6a:	2300      	movs	r3, #0
}
 800cb6c:	4618      	mov	r0, r3
 800cb6e:	370c      	adds	r7, #12
 800cb70:	46bd      	mov	sp, r7
 800cb72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb76:	4770      	bx	lr

0800cb78 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef  *pdev)
{
 800cb78:	b580      	push	{r7, lr}
 800cb7a:	b082      	sub	sp, #8
 800cb7c:	af00      	add	r7, sp, #0
 800cb7e:	6078      	str	r0, [r7, #4]
  if(pdev->dev_state == USBD_STATE_CONFIGURED)
 800cb80:	687b      	ldr	r3, [r7, #4]
 800cb82:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800cb86:	2b03      	cmp	r3, #3
 800cb88:	d10b      	bne.n	800cba2 <USBD_LL_SOF+0x2a>
  {
    if(pdev->pClass->SOF != NULL)
 800cb8a:	687b      	ldr	r3, [r7, #4]
 800cb8c:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800cb90:	69db      	ldr	r3, [r3, #28]
 800cb92:	2b00      	cmp	r3, #0
 800cb94:	d005      	beq.n	800cba2 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800cb96:	687b      	ldr	r3, [r7, #4]
 800cb98:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800cb9c:	69db      	ldr	r3, [r3, #28]
 800cb9e:	6878      	ldr	r0, [r7, #4]
 800cba0:	4798      	blx	r3
    }
  }
  return USBD_OK;
 800cba2:	2300      	movs	r3, #0
}
 800cba4:	4618      	mov	r0, r3
 800cba6:	3708      	adds	r7, #8
 800cba8:	46bd      	mov	sp, r7
 800cbaa:	bd80      	pop	{r7, pc}

0800cbac <USBD_LL_IsoINIncomplete>:
*         Handle iso in incomplete event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef  *pdev, uint8_t epnum)
{
 800cbac:	b480      	push	{r7}
 800cbae:	b083      	sub	sp, #12
 800cbb0:	af00      	add	r7, sp, #0
 800cbb2:	6078      	str	r0, [r7, #4]
 800cbb4:	460b      	mov	r3, r1
 800cbb6:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 800cbb8:	2300      	movs	r3, #0
}
 800cbba:	4618      	mov	r0, r3
 800cbbc:	370c      	adds	r7, #12
 800cbbe:	46bd      	mov	sp, r7
 800cbc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbc4:	4770      	bx	lr

0800cbc6 <USBD_LL_IsoOUTIncomplete>:
*         Handle iso out incomplete event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef  *pdev, uint8_t epnum)
{
 800cbc6:	b480      	push	{r7}
 800cbc8:	b083      	sub	sp, #12
 800cbca:	af00      	add	r7, sp, #0
 800cbcc:	6078      	str	r0, [r7, #4]
 800cbce:	460b      	mov	r3, r1
 800cbd0:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 800cbd2:	2300      	movs	r3, #0
}
 800cbd4:	4618      	mov	r0, r3
 800cbd6:	370c      	adds	r7, #12
 800cbd8:	46bd      	mov	sp, r7
 800cbda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbde:	4770      	bx	lr

0800cbe0 <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef  *pdev)
{
 800cbe0:	b480      	push	{r7}
 800cbe2:	b083      	sub	sp, #12
 800cbe4:	af00      	add	r7, sp, #0
 800cbe6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800cbe8:	2300      	movs	r3, #0
}
 800cbea:	4618      	mov	r0, r3
 800cbec:	370c      	adds	r7, #12
 800cbee:	46bd      	mov	sp, r7
 800cbf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbf4:	4770      	bx	lr

0800cbf6 <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef  *pdev)
{
 800cbf6:	b580      	push	{r7, lr}
 800cbf8:	b082      	sub	sp, #8
 800cbfa:	af00      	add	r7, sp, #0
 800cbfc:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800cbfe:	687b      	ldr	r3, [r7, #4]
 800cc00:	2201      	movs	r2, #1
 800cc02:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800cc06:	687b      	ldr	r3, [r7, #4]
 800cc08:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800cc0c:	685b      	ldr	r3, [r3, #4]
 800cc0e:	687a      	ldr	r2, [r7, #4]
 800cc10:	6852      	ldr	r2, [r2, #4]
 800cc12:	b2d2      	uxtb	r2, r2
 800cc14:	4611      	mov	r1, r2
 800cc16:	6878      	ldr	r0, [r7, #4]
 800cc18:	4798      	blx	r3

  return USBD_OK;
 800cc1a:	2300      	movs	r3, #0
}
 800cc1c:	4618      	mov	r0, r3
 800cc1e:	3708      	adds	r7, #8
 800cc20:	46bd      	mov	sp, r7
 800cc22:	bd80      	pop	{r7, pc}

0800cc24 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 800cc24:	b580      	push	{r7, lr}
 800cc26:	b084      	sub	sp, #16
 800cc28:	af00      	add	r7, sp, #0
 800cc2a:	6078      	str	r0, [r7, #4]
 800cc2c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800cc2e:	2300      	movs	r3, #0
 800cc30:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800cc32:	683b      	ldr	r3, [r7, #0]
 800cc34:	781b      	ldrb	r3, [r3, #0]
 800cc36:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800cc3a:	2b20      	cmp	r3, #32
 800cc3c:	d004      	beq.n	800cc48 <USBD_StdDevReq+0x24>
 800cc3e:	2b40      	cmp	r3, #64	; 0x40
 800cc40:	d002      	beq.n	800cc48 <USBD_StdDevReq+0x24>
 800cc42:	2b00      	cmp	r3, #0
 800cc44:	d008      	beq.n	800cc58 <USBD_StdDevReq+0x34>
 800cc46:	e04c      	b.n	800cce2 <USBD_StdDevReq+0xbe>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    pdev->pClass->Setup(pdev, req);
 800cc48:	687b      	ldr	r3, [r7, #4]
 800cc4a:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800cc4e:	689b      	ldr	r3, [r3, #8]
 800cc50:	6839      	ldr	r1, [r7, #0]
 800cc52:	6878      	ldr	r0, [r7, #4]
 800cc54:	4798      	blx	r3
    break;
 800cc56:	e049      	b.n	800ccec <USBD_StdDevReq+0xc8>

  case USB_REQ_TYPE_STANDARD:

    switch (req->bRequest)
 800cc58:	683b      	ldr	r3, [r7, #0]
 800cc5a:	785b      	ldrb	r3, [r3, #1]
 800cc5c:	2b09      	cmp	r3, #9
 800cc5e:	d83a      	bhi.n	800ccd6 <USBD_StdDevReq+0xb2>
 800cc60:	a201      	add	r2, pc, #4	; (adr r2, 800cc68 <USBD_StdDevReq+0x44>)
 800cc62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cc66:	bf00      	nop
 800cc68:	0800ccb9 	.word	0x0800ccb9
 800cc6c:	0800cccd 	.word	0x0800cccd
 800cc70:	0800ccd7 	.word	0x0800ccd7
 800cc74:	0800ccc3 	.word	0x0800ccc3
 800cc78:	0800ccd7 	.word	0x0800ccd7
 800cc7c:	0800cc9b 	.word	0x0800cc9b
 800cc80:	0800cc91 	.word	0x0800cc91
 800cc84:	0800ccd7 	.word	0x0800ccd7
 800cc88:	0800ccaf 	.word	0x0800ccaf
 800cc8c:	0800cca5 	.word	0x0800cca5
    {
    case USB_REQ_GET_DESCRIPTOR:

      USBD_GetDescriptor (pdev, req);
 800cc90:	6839      	ldr	r1, [r7, #0]
 800cc92:	6878      	ldr	r0, [r7, #4]
 800cc94:	f000 f9d2 	bl	800d03c <USBD_GetDescriptor>
      break;
 800cc98:	e022      	b.n	800cce0 <USBD_StdDevReq+0xbc>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress (pdev, req);
 800cc9a:	6839      	ldr	r1, [r7, #0]
 800cc9c:	6878      	ldr	r0, [r7, #4]
 800cc9e:	f000 fac7 	bl	800d230 <USBD_SetAddress>
      break;
 800cca2:	e01d      	b.n	800cce0 <USBD_StdDevReq+0xbc>

    case USB_REQ_SET_CONFIGURATION:
      USBD_SetConfig (pdev, req);
 800cca4:	6839      	ldr	r1, [r7, #0]
 800cca6:	6878      	ldr	r0, [r7, #4]
 800cca8:	f000 fb04 	bl	800d2b4 <USBD_SetConfig>
      break;
 800ccac:	e018      	b.n	800cce0 <USBD_StdDevReq+0xbc>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig (pdev, req);
 800ccae:	6839      	ldr	r1, [r7, #0]
 800ccb0:	6878      	ldr	r0, [r7, #4]
 800ccb2:	f000 fb8d 	bl	800d3d0 <USBD_GetConfig>
      break;
 800ccb6:	e013      	b.n	800cce0 <USBD_StdDevReq+0xbc>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus (pdev, req);
 800ccb8:	6839      	ldr	r1, [r7, #0]
 800ccba:	6878      	ldr	r0, [r7, #4]
 800ccbc:	f000 fbbc 	bl	800d438 <USBD_GetStatus>
      break;
 800ccc0:	e00e      	b.n	800cce0 <USBD_StdDevReq+0xbc>


    case USB_REQ_SET_FEATURE:
      USBD_SetFeature (pdev, req);
 800ccc2:	6839      	ldr	r1, [r7, #0]
 800ccc4:	6878      	ldr	r0, [r7, #4]
 800ccc6:	f000 fbea 	bl	800d49e <USBD_SetFeature>
      break;
 800ccca:	e009      	b.n	800cce0 <USBD_StdDevReq+0xbc>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature (pdev, req);
 800cccc:	6839      	ldr	r1, [r7, #0]
 800ccce:	6878      	ldr	r0, [r7, #4]
 800ccd0:	f000 fbf9 	bl	800d4c6 <USBD_ClrFeature>
      break;
 800ccd4:	e004      	b.n	800cce0 <USBD_StdDevReq+0xbc>

    default:
      USBD_CtlError(pdev, req);
 800ccd6:	6839      	ldr	r1, [r7, #0]
 800ccd8:	6878      	ldr	r0, [r7, #4]
 800ccda:	f000 fc52 	bl	800d582 <USBD_CtlError>
      break;
 800ccde:	bf00      	nop
    }
    break;
 800cce0:	e004      	b.n	800ccec <USBD_StdDevReq+0xc8>

  default:
    USBD_CtlError(pdev, req);
 800cce2:	6839      	ldr	r1, [r7, #0]
 800cce4:	6878      	ldr	r0, [r7, #4]
 800cce6:	f000 fc4c 	bl	800d582 <USBD_CtlError>
    break;
 800ccea:	bf00      	nop
  }

  return ret;
 800ccec:	7bfb      	ldrb	r3, [r7, #15]
}
 800ccee:	4618      	mov	r0, r3
 800ccf0:	3710      	adds	r7, #16
 800ccf2:	46bd      	mov	sp, r7
 800ccf4:	bd80      	pop	{r7, pc}
 800ccf6:	bf00      	nop

0800ccf8 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 800ccf8:	b580      	push	{r7, lr}
 800ccfa:	b084      	sub	sp, #16
 800ccfc:	af00      	add	r7, sp, #0
 800ccfe:	6078      	str	r0, [r7, #4]
 800cd00:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800cd02:	2300      	movs	r3, #0
 800cd04:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800cd06:	683b      	ldr	r3, [r7, #0]
 800cd08:	781b      	ldrb	r3, [r3, #0]
 800cd0a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800cd0e:	2b20      	cmp	r3, #32
 800cd10:	d003      	beq.n	800cd1a <USBD_StdItfReq+0x22>
 800cd12:	2b40      	cmp	r3, #64	; 0x40
 800cd14:	d001      	beq.n	800cd1a <USBD_StdItfReq+0x22>
 800cd16:	2b00      	cmp	r3, #0
 800cd18:	d12a      	bne.n	800cd70 <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 800cd1a:	687b      	ldr	r3, [r7, #4]
 800cd1c:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800cd20:	3b01      	subs	r3, #1
 800cd22:	2b02      	cmp	r3, #2
 800cd24:	d81d      	bhi.n	800cd62 <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800cd26:	683b      	ldr	r3, [r7, #0]
 800cd28:	889b      	ldrh	r3, [r3, #4]
 800cd2a:	b2db      	uxtb	r3, r3
 800cd2c:	2b01      	cmp	r3, #1
 800cd2e:	d813      	bhi.n	800cd58 <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup (pdev, req);
 800cd30:	687b      	ldr	r3, [r7, #4]
 800cd32:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800cd36:	689b      	ldr	r3, [r3, #8]
 800cd38:	6839      	ldr	r1, [r7, #0]
 800cd3a:	6878      	ldr	r0, [r7, #4]
 800cd3c:	4798      	blx	r3
 800cd3e:	4603      	mov	r3, r0
 800cd40:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 800cd42:	683b      	ldr	r3, [r7, #0]
 800cd44:	88db      	ldrh	r3, [r3, #6]
 800cd46:	2b00      	cmp	r3, #0
 800cd48:	d110      	bne.n	800cd6c <USBD_StdItfReq+0x74>
 800cd4a:	7bfb      	ldrb	r3, [r7, #15]
 800cd4c:	2b00      	cmp	r3, #0
 800cd4e:	d10d      	bne.n	800cd6c <USBD_StdItfReq+0x74>
        {
          USBD_CtlSendStatus(pdev);
 800cd50:	6878      	ldr	r0, [r7, #4]
 800cd52:	f000 fcdf 	bl	800d714 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 800cd56:	e009      	b.n	800cd6c <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 800cd58:	6839      	ldr	r1, [r7, #0]
 800cd5a:	6878      	ldr	r0, [r7, #4]
 800cd5c:	f000 fc11 	bl	800d582 <USBD_CtlError>
      break;
 800cd60:	e004      	b.n	800cd6c <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 800cd62:	6839      	ldr	r1, [r7, #0]
 800cd64:	6878      	ldr	r0, [r7, #4]
 800cd66:	f000 fc0c 	bl	800d582 <USBD_CtlError>
      break;
 800cd6a:	e000      	b.n	800cd6e <USBD_StdItfReq+0x76>
      break;
 800cd6c:	bf00      	nop
    }
    break;
 800cd6e:	e004      	b.n	800cd7a <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 800cd70:	6839      	ldr	r1, [r7, #0]
 800cd72:	6878      	ldr	r0, [r7, #4]
 800cd74:	f000 fc05 	bl	800d582 <USBD_CtlError>
    break;
 800cd78:	bf00      	nop
  }

  return USBD_OK;
 800cd7a:	2300      	movs	r3, #0
}
 800cd7c:	4618      	mov	r0, r3
 800cd7e:	3710      	adds	r7, #16
 800cd80:	46bd      	mov	sp, r7
 800cd82:	bd80      	pop	{r7, pc}

0800cd84 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 800cd84:	b580      	push	{r7, lr}
 800cd86:	b084      	sub	sp, #16
 800cd88:	af00      	add	r7, sp, #0
 800cd8a:	6078      	str	r0, [r7, #4]
 800cd8c:	6039      	str	r1, [r7, #0]

  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800cd8e:	2300      	movs	r3, #0
 800cd90:	73fb      	strb	r3, [r7, #15]
  USBD_EndpointTypeDef   *pep;
  ep_addr  = LOBYTE(req->wIndex);
 800cd92:	683b      	ldr	r3, [r7, #0]
 800cd94:	889b      	ldrh	r3, [r3, #4]
 800cd96:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800cd98:	683b      	ldr	r3, [r7, #0]
 800cd9a:	781b      	ldrb	r3, [r3, #0]
 800cd9c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800cda0:	2b20      	cmp	r3, #32
 800cda2:	d004      	beq.n	800cdae <USBD_StdEPReq+0x2a>
 800cda4:	2b40      	cmp	r3, #64	; 0x40
 800cda6:	d002      	beq.n	800cdae <USBD_StdEPReq+0x2a>
 800cda8:	2b00      	cmp	r3, #0
 800cdaa:	d008      	beq.n	800cdbe <USBD_StdEPReq+0x3a>
 800cdac:	e13b      	b.n	800d026 <USBD_StdEPReq+0x2a2>
  {

  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    pdev->pClass->Setup (pdev, req);
 800cdae:	687b      	ldr	r3, [r7, #4]
 800cdb0:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800cdb4:	689b      	ldr	r3, [r3, #8]
 800cdb6:	6839      	ldr	r1, [r7, #0]
 800cdb8:	6878      	ldr	r0, [r7, #4]
 800cdba:	4798      	blx	r3
    break;
 800cdbc:	e138      	b.n	800d030 <USBD_StdEPReq+0x2ac>

  case USB_REQ_TYPE_STANDARD:
    /* Check if it is a class request */
    if ((req->bmRequest & 0x60U) == 0x20U)
 800cdbe:	683b      	ldr	r3, [r7, #0]
 800cdc0:	781b      	ldrb	r3, [r3, #0]
 800cdc2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800cdc6:	2b20      	cmp	r3, #32
 800cdc8:	d10a      	bne.n	800cde0 <USBD_StdEPReq+0x5c>
    {
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup (pdev, req);
 800cdca:	687b      	ldr	r3, [r7, #4]
 800cdcc:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800cdd0:	689b      	ldr	r3, [r3, #8]
 800cdd2:	6839      	ldr	r1, [r7, #0]
 800cdd4:	6878      	ldr	r0, [r7, #4]
 800cdd6:	4798      	blx	r3
 800cdd8:	4603      	mov	r3, r0
 800cdda:	73fb      	strb	r3, [r7, #15]

      return ret;
 800cddc:	7bfb      	ldrb	r3, [r7, #15]
 800cdde:	e128      	b.n	800d032 <USBD_StdEPReq+0x2ae>
    }

    switch (req->bRequest)
 800cde0:	683b      	ldr	r3, [r7, #0]
 800cde2:	785b      	ldrb	r3, [r3, #1]
 800cde4:	2b01      	cmp	r3, #1
 800cde6:	d03e      	beq.n	800ce66 <USBD_StdEPReq+0xe2>
 800cde8:	2b03      	cmp	r3, #3
 800cdea:	d002      	beq.n	800cdf2 <USBD_StdEPReq+0x6e>
 800cdec:	2b00      	cmp	r3, #0
 800cdee:	d070      	beq.n	800ced2 <USBD_StdEPReq+0x14e>
 800cdf0:	e113      	b.n	800d01a <USBD_StdEPReq+0x296>
    {

    case USB_REQ_SET_FEATURE :

      switch (pdev->dev_state)
 800cdf2:	687b      	ldr	r3, [r7, #4]
 800cdf4:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800cdf8:	2b02      	cmp	r3, #2
 800cdfa:	d002      	beq.n	800ce02 <USBD_StdEPReq+0x7e>
 800cdfc:	2b03      	cmp	r3, #3
 800cdfe:	d015      	beq.n	800ce2c <USBD_StdEPReq+0xa8>
 800ce00:	e02b      	b.n	800ce5a <USBD_StdEPReq+0xd6>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ce02:	7bbb      	ldrb	r3, [r7, #14]
 800ce04:	2b00      	cmp	r3, #0
 800ce06:	d00c      	beq.n	800ce22 <USBD_StdEPReq+0x9e>
 800ce08:	7bbb      	ldrb	r3, [r7, #14]
 800ce0a:	2b80      	cmp	r3, #128	; 0x80
 800ce0c:	d009      	beq.n	800ce22 <USBD_StdEPReq+0x9e>
        {
          USBD_LL_StallEP(pdev, ep_addr);
 800ce0e:	7bbb      	ldrb	r3, [r7, #14]
 800ce10:	4619      	mov	r1, r3
 800ce12:	6878      	ldr	r0, [r7, #4]
 800ce14:	f001 f91c 	bl	800e050 <USBD_LL_StallEP>
          USBD_LL_StallEP(pdev, 0x80U);
 800ce18:	2180      	movs	r1, #128	; 0x80
 800ce1a:	6878      	ldr	r0, [r7, #4]
 800ce1c:	f001 f918 	bl	800e050 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800ce20:	e020      	b.n	800ce64 <USBD_StdEPReq+0xe0>
          USBD_CtlError(pdev, req);
 800ce22:	6839      	ldr	r1, [r7, #0]
 800ce24:	6878      	ldr	r0, [r7, #4]
 800ce26:	f000 fbac 	bl	800d582 <USBD_CtlError>
        break;
 800ce2a:	e01b      	b.n	800ce64 <USBD_StdEPReq+0xe0>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800ce2c:	683b      	ldr	r3, [r7, #0]
 800ce2e:	885b      	ldrh	r3, [r3, #2]
 800ce30:	2b00      	cmp	r3, #0
 800ce32:	d10e      	bne.n	800ce52 <USBD_StdEPReq+0xce>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800ce34:	7bbb      	ldrb	r3, [r7, #14]
 800ce36:	2b00      	cmp	r3, #0
 800ce38:	d00b      	beq.n	800ce52 <USBD_StdEPReq+0xce>
 800ce3a:	7bbb      	ldrb	r3, [r7, #14]
 800ce3c:	2b80      	cmp	r3, #128	; 0x80
 800ce3e:	d008      	beq.n	800ce52 <USBD_StdEPReq+0xce>
 800ce40:	683b      	ldr	r3, [r7, #0]
 800ce42:	88db      	ldrh	r3, [r3, #6]
 800ce44:	2b00      	cmp	r3, #0
 800ce46:	d104      	bne.n	800ce52 <USBD_StdEPReq+0xce>
          {
            USBD_LL_StallEP(pdev, ep_addr);
 800ce48:	7bbb      	ldrb	r3, [r7, #14]
 800ce4a:	4619      	mov	r1, r3
 800ce4c:	6878      	ldr	r0, [r7, #4]
 800ce4e:	f001 f8ff 	bl	800e050 <USBD_LL_StallEP>
          }
        }
        USBD_CtlSendStatus(pdev);
 800ce52:	6878      	ldr	r0, [r7, #4]
 800ce54:	f000 fc5e 	bl	800d714 <USBD_CtlSendStatus>

        break;
 800ce58:	e004      	b.n	800ce64 <USBD_StdEPReq+0xe0>

      default:
        USBD_CtlError(pdev, req);
 800ce5a:	6839      	ldr	r1, [r7, #0]
 800ce5c:	6878      	ldr	r0, [r7, #4]
 800ce5e:	f000 fb90 	bl	800d582 <USBD_CtlError>
        break;
 800ce62:	bf00      	nop
      }
      break;
 800ce64:	e0de      	b.n	800d024 <USBD_StdEPReq+0x2a0>

    case USB_REQ_CLEAR_FEATURE :

      switch (pdev->dev_state)
 800ce66:	687b      	ldr	r3, [r7, #4]
 800ce68:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800ce6c:	2b02      	cmp	r3, #2
 800ce6e:	d002      	beq.n	800ce76 <USBD_StdEPReq+0xf2>
 800ce70:	2b03      	cmp	r3, #3
 800ce72:	d015      	beq.n	800cea0 <USBD_StdEPReq+0x11c>
 800ce74:	e026      	b.n	800cec4 <USBD_StdEPReq+0x140>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ce76:	7bbb      	ldrb	r3, [r7, #14]
 800ce78:	2b00      	cmp	r3, #0
 800ce7a:	d00c      	beq.n	800ce96 <USBD_StdEPReq+0x112>
 800ce7c:	7bbb      	ldrb	r3, [r7, #14]
 800ce7e:	2b80      	cmp	r3, #128	; 0x80
 800ce80:	d009      	beq.n	800ce96 <USBD_StdEPReq+0x112>
        {
          USBD_LL_StallEP(pdev, ep_addr);
 800ce82:	7bbb      	ldrb	r3, [r7, #14]
 800ce84:	4619      	mov	r1, r3
 800ce86:	6878      	ldr	r0, [r7, #4]
 800ce88:	f001 f8e2 	bl	800e050 <USBD_LL_StallEP>
          USBD_LL_StallEP(pdev, 0x80U);
 800ce8c:	2180      	movs	r1, #128	; 0x80
 800ce8e:	6878      	ldr	r0, [r7, #4]
 800ce90:	f001 f8de 	bl	800e050 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800ce94:	e01c      	b.n	800ced0 <USBD_StdEPReq+0x14c>
          USBD_CtlError(pdev, req);
 800ce96:	6839      	ldr	r1, [r7, #0]
 800ce98:	6878      	ldr	r0, [r7, #4]
 800ce9a:	f000 fb72 	bl	800d582 <USBD_CtlError>
        break;
 800ce9e:	e017      	b.n	800ced0 <USBD_StdEPReq+0x14c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800cea0:	683b      	ldr	r3, [r7, #0]
 800cea2:	885b      	ldrh	r3, [r3, #2]
 800cea4:	2b00      	cmp	r3, #0
 800cea6:	d112      	bne.n	800cece <USBD_StdEPReq+0x14a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 800cea8:	7bbb      	ldrb	r3, [r7, #14]
 800ceaa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ceae:	2b00      	cmp	r3, #0
 800ceb0:	d004      	beq.n	800cebc <USBD_StdEPReq+0x138>
          {
            USBD_LL_ClearStallEP(pdev, ep_addr);
 800ceb2:	7bbb      	ldrb	r3, [r7, #14]
 800ceb4:	4619      	mov	r1, r3
 800ceb6:	6878      	ldr	r0, [r7, #4]
 800ceb8:	f001 f8e9 	bl	800e08e <USBD_LL_ClearStallEP>
          }
          USBD_CtlSendStatus(pdev);
 800cebc:	6878      	ldr	r0, [r7, #4]
 800cebe:	f000 fc29 	bl	800d714 <USBD_CtlSendStatus>
        }
        break;
 800cec2:	e004      	b.n	800cece <USBD_StdEPReq+0x14a>

      default:
        USBD_CtlError(pdev, req);
 800cec4:	6839      	ldr	r1, [r7, #0]
 800cec6:	6878      	ldr	r0, [r7, #4]
 800cec8:	f000 fb5b 	bl	800d582 <USBD_CtlError>
        break;
 800cecc:	e000      	b.n	800ced0 <USBD_StdEPReq+0x14c>
        break;
 800cece:	bf00      	nop
      }
      break;
 800ced0:	e0a8      	b.n	800d024 <USBD_StdEPReq+0x2a0>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 800ced2:	687b      	ldr	r3, [r7, #4]
 800ced4:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800ced8:	2b02      	cmp	r3, #2
 800ceda:	d002      	beq.n	800cee2 <USBD_StdEPReq+0x15e>
 800cedc:	2b03      	cmp	r3, #3
 800cede:	d031      	beq.n	800cf44 <USBD_StdEPReq+0x1c0>
 800cee0:	e095      	b.n	800d00e <USBD_StdEPReq+0x28a>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800cee2:	7bbb      	ldrb	r3, [r7, #14]
 800cee4:	2b00      	cmp	r3, #0
 800cee6:	d007      	beq.n	800cef8 <USBD_StdEPReq+0x174>
 800cee8:	7bbb      	ldrb	r3, [r7, #14]
 800ceea:	2b80      	cmp	r3, #128	; 0x80
 800ceec:	d004      	beq.n	800cef8 <USBD_StdEPReq+0x174>
        {
          USBD_CtlError(pdev, req);
 800ceee:	6839      	ldr	r1, [r7, #0]
 800cef0:	6878      	ldr	r0, [r7, #4]
 800cef2:	f000 fb46 	bl	800d582 <USBD_CtlError>
          break;
 800cef6:	e08f      	b.n	800d018 <USBD_StdEPReq+0x294>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 800cef8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800cefc:	2b00      	cmp	r3, #0
 800cefe:	da0b      	bge.n	800cf18 <USBD_StdEPReq+0x194>
 800cf00:	7bbb      	ldrb	r3, [r7, #14]
 800cf02:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800cf06:	4613      	mov	r3, r2
 800cf08:	009b      	lsls	r3, r3, #2
 800cf0a:	4413      	add	r3, r2
 800cf0c:	009b      	lsls	r3, r3, #2
 800cf0e:	3310      	adds	r3, #16
 800cf10:	687a      	ldr	r2, [r7, #4]
 800cf12:	4413      	add	r3, r2
 800cf14:	3304      	adds	r3, #4
 800cf16:	e00a      	b.n	800cf2e <USBD_StdEPReq+0x1aa>
          &pdev->ep_out[ep_addr & 0x7FU];
 800cf18:	7bbb      	ldrb	r3, [r7, #14]
 800cf1a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 800cf1e:	4613      	mov	r3, r2
 800cf20:	009b      	lsls	r3, r3, #2
 800cf22:	4413      	add	r3, r2
 800cf24:	009b      	lsls	r3, r3, #2
 800cf26:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 800cf2a:	687a      	ldr	r2, [r7, #4]
 800cf2c:	4413      	add	r3, r2
 800cf2e:	60bb      	str	r3, [r7, #8]

          pep->status = 0x0000U;
 800cf30:	68bb      	ldr	r3, [r7, #8]
 800cf32:	2200      	movs	r2, #0
 800cf34:	601a      	str	r2, [r3, #0]

          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 800cf36:	68bb      	ldr	r3, [r7, #8]
 800cf38:	2202      	movs	r2, #2
 800cf3a:	4619      	mov	r1, r3
 800cf3c:	6878      	ldr	r0, [r7, #4]
 800cf3e:	f000 fb8b 	bl	800d658 <USBD_CtlSendData>
          break;
 800cf42:	e069      	b.n	800d018 <USBD_StdEPReq+0x294>

      case USBD_STATE_CONFIGURED:
        if((ep_addr & 0x80U) == 0x80U)
 800cf44:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800cf48:	2b00      	cmp	r3, #0
 800cf4a:	da11      	bge.n	800cf70 <USBD_StdEPReq+0x1ec>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800cf4c:	7bbb      	ldrb	r3, [r7, #14]
 800cf4e:	f003 020f 	and.w	r2, r3, #15
 800cf52:	6879      	ldr	r1, [r7, #4]
 800cf54:	4613      	mov	r3, r2
 800cf56:	009b      	lsls	r3, r3, #2
 800cf58:	4413      	add	r3, r2
 800cf5a:	009b      	lsls	r3, r3, #2
 800cf5c:	440b      	add	r3, r1
 800cf5e:	3318      	adds	r3, #24
 800cf60:	681b      	ldr	r3, [r3, #0]
 800cf62:	2b00      	cmp	r3, #0
 800cf64:	d117      	bne.n	800cf96 <USBD_StdEPReq+0x212>
          {
            USBD_CtlError(pdev, req);
 800cf66:	6839      	ldr	r1, [r7, #0]
 800cf68:	6878      	ldr	r0, [r7, #4]
 800cf6a:	f000 fb0a 	bl	800d582 <USBD_CtlError>
            break;
 800cf6e:	e053      	b.n	800d018 <USBD_StdEPReq+0x294>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800cf70:	7bbb      	ldrb	r3, [r7, #14]
 800cf72:	f003 020f 	and.w	r2, r3, #15
 800cf76:	6879      	ldr	r1, [r7, #4]
 800cf78:	4613      	mov	r3, r2
 800cf7a:	009b      	lsls	r3, r3, #2
 800cf7c:	4413      	add	r3, r2
 800cf7e:	009b      	lsls	r3, r3, #2
 800cf80:	440b      	add	r3, r1
 800cf82:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800cf86:	681b      	ldr	r3, [r3, #0]
 800cf88:	2b00      	cmp	r3, #0
 800cf8a:	d104      	bne.n	800cf96 <USBD_StdEPReq+0x212>
          {
            USBD_CtlError(pdev, req);
 800cf8c:	6839      	ldr	r1, [r7, #0]
 800cf8e:	6878      	ldr	r0, [r7, #4]
 800cf90:	f000 faf7 	bl	800d582 <USBD_CtlError>
            break;
 800cf94:	e040      	b.n	800d018 <USBD_StdEPReq+0x294>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 800cf96:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800cf9a:	2b00      	cmp	r3, #0
 800cf9c:	da0b      	bge.n	800cfb6 <USBD_StdEPReq+0x232>
 800cf9e:	7bbb      	ldrb	r3, [r7, #14]
 800cfa0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800cfa4:	4613      	mov	r3, r2
 800cfa6:	009b      	lsls	r3, r3, #2
 800cfa8:	4413      	add	r3, r2
 800cfaa:	009b      	lsls	r3, r3, #2
 800cfac:	3310      	adds	r3, #16
 800cfae:	687a      	ldr	r2, [r7, #4]
 800cfb0:	4413      	add	r3, r2
 800cfb2:	3304      	adds	r3, #4
 800cfb4:	e00a      	b.n	800cfcc <USBD_StdEPReq+0x248>
          &pdev->ep_out[ep_addr & 0x7FU];
 800cfb6:	7bbb      	ldrb	r3, [r7, #14]
 800cfb8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 800cfbc:	4613      	mov	r3, r2
 800cfbe:	009b      	lsls	r3, r3, #2
 800cfc0:	4413      	add	r3, r2
 800cfc2:	009b      	lsls	r3, r3, #2
 800cfc4:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 800cfc8:	687a      	ldr	r2, [r7, #4]
 800cfca:	4413      	add	r3, r2
 800cfcc:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800cfce:	7bbb      	ldrb	r3, [r7, #14]
 800cfd0:	2b00      	cmp	r3, #0
 800cfd2:	d002      	beq.n	800cfda <USBD_StdEPReq+0x256>
 800cfd4:	7bbb      	ldrb	r3, [r7, #14]
 800cfd6:	2b80      	cmp	r3, #128	; 0x80
 800cfd8:	d103      	bne.n	800cfe2 <USBD_StdEPReq+0x25e>
          {
            pep->status = 0x0000U;
 800cfda:	68bb      	ldr	r3, [r7, #8]
 800cfdc:	2200      	movs	r2, #0
 800cfde:	601a      	str	r2, [r3, #0]
 800cfe0:	e00e      	b.n	800d000 <USBD_StdEPReq+0x27c>
          }
          else if(USBD_LL_IsStallEP(pdev, ep_addr))
 800cfe2:	7bbb      	ldrb	r3, [r7, #14]
 800cfe4:	4619      	mov	r1, r3
 800cfe6:	6878      	ldr	r0, [r7, #4]
 800cfe8:	f001 f870 	bl	800e0cc <USBD_LL_IsStallEP>
 800cfec:	4603      	mov	r3, r0
 800cfee:	2b00      	cmp	r3, #0
 800cff0:	d003      	beq.n	800cffa <USBD_StdEPReq+0x276>
          {
            pep->status = 0x0001U;
 800cff2:	68bb      	ldr	r3, [r7, #8]
 800cff4:	2201      	movs	r2, #1
 800cff6:	601a      	str	r2, [r3, #0]
 800cff8:	e002      	b.n	800d000 <USBD_StdEPReq+0x27c>
          }
          else
          {
            pep->status = 0x0000U;
 800cffa:	68bb      	ldr	r3, [r7, #8]
 800cffc:	2200      	movs	r2, #0
 800cffe:	601a      	str	r2, [r3, #0]
          }

          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 800d000:	68bb      	ldr	r3, [r7, #8]
 800d002:	2202      	movs	r2, #2
 800d004:	4619      	mov	r1, r3
 800d006:	6878      	ldr	r0, [r7, #4]
 800d008:	f000 fb26 	bl	800d658 <USBD_CtlSendData>
          break;
 800d00c:	e004      	b.n	800d018 <USBD_StdEPReq+0x294>

      default:
        USBD_CtlError(pdev, req);
 800d00e:	6839      	ldr	r1, [r7, #0]
 800d010:	6878      	ldr	r0, [r7, #4]
 800d012:	f000 fab6 	bl	800d582 <USBD_CtlError>
        break;
 800d016:	bf00      	nop
      }
      break;
 800d018:	e004      	b.n	800d024 <USBD_StdEPReq+0x2a0>

    default:
      USBD_CtlError(pdev, req);
 800d01a:	6839      	ldr	r1, [r7, #0]
 800d01c:	6878      	ldr	r0, [r7, #4]
 800d01e:	f000 fab0 	bl	800d582 <USBD_CtlError>
      break;
 800d022:	bf00      	nop
    }
    break;
 800d024:	e004      	b.n	800d030 <USBD_StdEPReq+0x2ac>

  default:
    USBD_CtlError(pdev, req);
 800d026:	6839      	ldr	r1, [r7, #0]
 800d028:	6878      	ldr	r0, [r7, #4]
 800d02a:	f000 faaa 	bl	800d582 <USBD_CtlError>
    break;
 800d02e:	bf00      	nop
  }

  return ret;
 800d030:	7bfb      	ldrb	r3, [r7, #15]
}
 800d032:	4618      	mov	r0, r3
 800d034:	3710      	adds	r7, #16
 800d036:	46bd      	mov	sp, r7
 800d038:	bd80      	pop	{r7, pc}
	...

0800d03c <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev ,
                               USBD_SetupReqTypedef *req)
{
 800d03c:	b580      	push	{r7, lr}
 800d03e:	b084      	sub	sp, #16
 800d040:	af00      	add	r7, sp, #0
 800d042:	6078      	str	r0, [r7, #4]
 800d044:	6039      	str	r1, [r7, #0]
  uint16_t len;
  uint8_t *pbuf;


  switch (req->wValue >> 8)
 800d046:	683b      	ldr	r3, [r7, #0]
 800d048:	885b      	ldrh	r3, [r3, #2]
 800d04a:	0a1b      	lsrs	r3, r3, #8
 800d04c:	b29b      	uxth	r3, r3
 800d04e:	3b01      	subs	r3, #1
 800d050:	2b06      	cmp	r3, #6
 800d052:	f200 80c9 	bhi.w	800d1e8 <USBD_GetDescriptor+0x1ac>
 800d056:	a201      	add	r2, pc, #4	; (adr r2, 800d05c <USBD_GetDescriptor+0x20>)
 800d058:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d05c:	0800d079 	.word	0x0800d079
 800d060:	0800d091 	.word	0x0800d091
 800d064:	0800d0d1 	.word	0x0800d0d1
 800d068:	0800d1e9 	.word	0x0800d1e9
 800d06c:	0800d1e9 	.word	0x0800d1e9
 800d070:	0800d195 	.word	0x0800d195
 800d074:	0800d1bb 	.word	0x0800d1bb
  case USB_DESC_TYPE_BOS:
    pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
    break;
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800d078:	687b      	ldr	r3, [r7, #4]
 800d07a:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800d07e:	681b      	ldr	r3, [r3, #0]
 800d080:	687a      	ldr	r2, [r7, #4]
 800d082:	7c12      	ldrb	r2, [r2, #16]
 800d084:	f107 010a 	add.w	r1, r7, #10
 800d088:	4610      	mov	r0, r2
 800d08a:	4798      	blx	r3
 800d08c:	60f8      	str	r0, [r7, #12]
    break;
 800d08e:	e0b0      	b.n	800d1f2 <USBD_GetDescriptor+0x1b6>

  case USB_DESC_TYPE_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH )
 800d090:	687b      	ldr	r3, [r7, #4]
 800d092:	7c1b      	ldrb	r3, [r3, #16]
 800d094:	2b00      	cmp	r3, #0
 800d096:	d10d      	bne.n	800d0b4 <USBD_GetDescriptor+0x78>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetHSConfigDescriptor(&len);
 800d098:	687b      	ldr	r3, [r7, #4]
 800d09a:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800d09e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d0a0:	f107 020a 	add.w	r2, r7, #10
 800d0a4:	4610      	mov	r0, r2
 800d0a6:	4798      	blx	r3
 800d0a8:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800d0aa:	68fb      	ldr	r3, [r7, #12]
 800d0ac:	3301      	adds	r3, #1
 800d0ae:	2202      	movs	r2, #2
 800d0b0:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 800d0b2:	e09e      	b.n	800d1f2 <USBD_GetDescriptor+0x1b6>
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 800d0b4:	687b      	ldr	r3, [r7, #4]
 800d0b6:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800d0ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d0bc:	f107 020a 	add.w	r2, r7, #10
 800d0c0:	4610      	mov	r0, r2
 800d0c2:	4798      	blx	r3
 800d0c4:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800d0c6:	68fb      	ldr	r3, [r7, #12]
 800d0c8:	3301      	adds	r3, #1
 800d0ca:	2202      	movs	r2, #2
 800d0cc:	701a      	strb	r2, [r3, #0]
    break;
 800d0ce:	e090      	b.n	800d1f2 <USBD_GetDescriptor+0x1b6>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 800d0d0:	683b      	ldr	r3, [r7, #0]
 800d0d2:	885b      	ldrh	r3, [r3, #2]
 800d0d4:	b2db      	uxtb	r3, r3
 800d0d6:	2b05      	cmp	r3, #5
 800d0d8:	d856      	bhi.n	800d188 <USBD_GetDescriptor+0x14c>
 800d0da:	a201      	add	r2, pc, #4	; (adr r2, 800d0e0 <USBD_GetDescriptor+0xa4>)
 800d0dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d0e0:	0800d0f9 	.word	0x0800d0f9
 800d0e4:	0800d111 	.word	0x0800d111
 800d0e8:	0800d129 	.word	0x0800d129
 800d0ec:	0800d141 	.word	0x0800d141
 800d0f0:	0800d159 	.word	0x0800d159
 800d0f4:	0800d171 	.word	0x0800d171
    {
    case USBD_IDX_LANGID_STR:
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800d0f8:	687b      	ldr	r3, [r7, #4]
 800d0fa:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800d0fe:	685b      	ldr	r3, [r3, #4]
 800d100:	687a      	ldr	r2, [r7, #4]
 800d102:	7c12      	ldrb	r2, [r2, #16]
 800d104:	f107 010a 	add.w	r1, r7, #10
 800d108:	4610      	mov	r0, r2
 800d10a:	4798      	blx	r3
 800d10c:	60f8      	str	r0, [r7, #12]
      break;
 800d10e:	e040      	b.n	800d192 <USBD_GetDescriptor+0x156>

    case USBD_IDX_MFC_STR:
      pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800d110:	687b      	ldr	r3, [r7, #4]
 800d112:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800d116:	689b      	ldr	r3, [r3, #8]
 800d118:	687a      	ldr	r2, [r7, #4]
 800d11a:	7c12      	ldrb	r2, [r2, #16]
 800d11c:	f107 010a 	add.w	r1, r7, #10
 800d120:	4610      	mov	r0, r2
 800d122:	4798      	blx	r3
 800d124:	60f8      	str	r0, [r7, #12]
      break;
 800d126:	e034      	b.n	800d192 <USBD_GetDescriptor+0x156>

    case USBD_IDX_PRODUCT_STR:
      pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800d128:	687b      	ldr	r3, [r7, #4]
 800d12a:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800d12e:	68db      	ldr	r3, [r3, #12]
 800d130:	687a      	ldr	r2, [r7, #4]
 800d132:	7c12      	ldrb	r2, [r2, #16]
 800d134:	f107 010a 	add.w	r1, r7, #10
 800d138:	4610      	mov	r0, r2
 800d13a:	4798      	blx	r3
 800d13c:	60f8      	str	r0, [r7, #12]
      break;
 800d13e:	e028      	b.n	800d192 <USBD_GetDescriptor+0x156>

    case USBD_IDX_SERIAL_STR:
      pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800d140:	687b      	ldr	r3, [r7, #4]
 800d142:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800d146:	691b      	ldr	r3, [r3, #16]
 800d148:	687a      	ldr	r2, [r7, #4]
 800d14a:	7c12      	ldrb	r2, [r2, #16]
 800d14c:	f107 010a 	add.w	r1, r7, #10
 800d150:	4610      	mov	r0, r2
 800d152:	4798      	blx	r3
 800d154:	60f8      	str	r0, [r7, #12]
      break;
 800d156:	e01c      	b.n	800d192 <USBD_GetDescriptor+0x156>

    case USBD_IDX_CONFIG_STR:
      pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800d158:	687b      	ldr	r3, [r7, #4]
 800d15a:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800d15e:	695b      	ldr	r3, [r3, #20]
 800d160:	687a      	ldr	r2, [r7, #4]
 800d162:	7c12      	ldrb	r2, [r2, #16]
 800d164:	f107 010a 	add.w	r1, r7, #10
 800d168:	4610      	mov	r0, r2
 800d16a:	4798      	blx	r3
 800d16c:	60f8      	str	r0, [r7, #12]
      break;
 800d16e:	e010      	b.n	800d192 <USBD_GetDescriptor+0x156>

    case USBD_IDX_INTERFACE_STR:
      pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800d170:	687b      	ldr	r3, [r7, #4]
 800d172:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800d176:	699b      	ldr	r3, [r3, #24]
 800d178:	687a      	ldr	r2, [r7, #4]
 800d17a:	7c12      	ldrb	r2, [r2, #16]
 800d17c:	f107 010a 	add.w	r1, r7, #10
 800d180:	4610      	mov	r0, r2
 800d182:	4798      	blx	r3
 800d184:	60f8      	str	r0, [r7, #12]
      break;
 800d186:	e004      	b.n	800d192 <USBD_GetDescriptor+0x156>
    default:
#if (USBD_SUPPORT_USER_STRING == 1U)
      pbuf = pdev->pClass->GetUsrStrDescriptor(pdev, (req->wValue) , &len);
      break;
#else
       USBD_CtlError(pdev , req);
 800d188:	6839      	ldr	r1, [r7, #0]
 800d18a:	6878      	ldr	r0, [r7, #4]
 800d18c:	f000 f9f9 	bl	800d582 <USBD_CtlError>
      return;
 800d190:	e04b      	b.n	800d22a <USBD_GetDescriptor+0x1ee>
#endif
    }
    break;
 800d192:	e02e      	b.n	800d1f2 <USBD_GetDescriptor+0x1b6>
  case USB_DESC_TYPE_DEVICE_QUALIFIER:

    if(pdev->dev_speed == USBD_SPEED_HIGH)
 800d194:	687b      	ldr	r3, [r7, #4]
 800d196:	7c1b      	ldrb	r3, [r3, #16]
 800d198:	2b00      	cmp	r3, #0
 800d19a:	d109      	bne.n	800d1b0 <USBD_GetDescriptor+0x174>
    {
      pbuf = (uint8_t *)pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800d19c:	687b      	ldr	r3, [r7, #4]
 800d19e:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800d1a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d1a4:	f107 020a 	add.w	r2, r7, #10
 800d1a8:	4610      	mov	r0, r2
 800d1aa:	4798      	blx	r3
 800d1ac:	60f8      	str	r0, [r7, #12]
      break;
 800d1ae:	e020      	b.n	800d1f2 <USBD_GetDescriptor+0x1b6>
    }
    else
    {
      USBD_CtlError(pdev , req);
 800d1b0:	6839      	ldr	r1, [r7, #0]
 800d1b2:	6878      	ldr	r0, [r7, #4]
 800d1b4:	f000 f9e5 	bl	800d582 <USBD_CtlError>
      return;
 800d1b8:	e037      	b.n	800d22a <USBD_GetDescriptor+0x1ee>
    }

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 800d1ba:	687b      	ldr	r3, [r7, #4]
 800d1bc:	7c1b      	ldrb	r3, [r3, #16]
 800d1be:	2b00      	cmp	r3, #0
 800d1c0:	d10d      	bne.n	800d1de <USBD_GetDescriptor+0x1a2>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800d1c2:	687b      	ldr	r3, [r7, #4]
 800d1c4:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800d1c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d1ca:	f107 020a 	add.w	r2, r7, #10
 800d1ce:	4610      	mov	r0, r2
 800d1d0:	4798      	blx	r3
 800d1d2:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800d1d4:	68fb      	ldr	r3, [r7, #12]
 800d1d6:	3301      	adds	r3, #1
 800d1d8:	2207      	movs	r2, #7
 800d1da:	701a      	strb	r2, [r3, #0]
      break;
 800d1dc:	e009      	b.n	800d1f2 <USBD_GetDescriptor+0x1b6>
    }
    else
    {
      USBD_CtlError(pdev , req);
 800d1de:	6839      	ldr	r1, [r7, #0]
 800d1e0:	6878      	ldr	r0, [r7, #4]
 800d1e2:	f000 f9ce 	bl	800d582 <USBD_CtlError>
      return;
 800d1e6:	e020      	b.n	800d22a <USBD_GetDescriptor+0x1ee>
    }

  default:
     USBD_CtlError(pdev , req);
 800d1e8:	6839      	ldr	r1, [r7, #0]
 800d1ea:	6878      	ldr	r0, [r7, #4]
 800d1ec:	f000 f9c9 	bl	800d582 <USBD_CtlError>
    return;
 800d1f0:	e01b      	b.n	800d22a <USBD_GetDescriptor+0x1ee>
  }

  if((len != 0U) && (req->wLength != 0U))
 800d1f2:	897b      	ldrh	r3, [r7, #10]
 800d1f4:	2b00      	cmp	r3, #0
 800d1f6:	d011      	beq.n	800d21c <USBD_GetDescriptor+0x1e0>
 800d1f8:	683b      	ldr	r3, [r7, #0]
 800d1fa:	88db      	ldrh	r3, [r3, #6]
 800d1fc:	2b00      	cmp	r3, #0
 800d1fe:	d00d      	beq.n	800d21c <USBD_GetDescriptor+0x1e0>
  {

    len = MIN(len, req->wLength);
 800d200:	683b      	ldr	r3, [r7, #0]
 800d202:	88da      	ldrh	r2, [r3, #6]
 800d204:	897b      	ldrh	r3, [r7, #10]
 800d206:	4293      	cmp	r3, r2
 800d208:	bf28      	it	cs
 800d20a:	4613      	movcs	r3, r2
 800d20c:	b29b      	uxth	r3, r3
 800d20e:	817b      	strh	r3, [r7, #10]

    USBD_CtlSendData (pdev, pbuf, len);
 800d210:	897b      	ldrh	r3, [r7, #10]
 800d212:	461a      	mov	r2, r3
 800d214:	68f9      	ldr	r1, [r7, #12]
 800d216:	6878      	ldr	r0, [r7, #4]
 800d218:	f000 fa1e 	bl	800d658 <USBD_CtlSendData>
  }

  if(req->wLength == 0U)
 800d21c:	683b      	ldr	r3, [r7, #0]
 800d21e:	88db      	ldrh	r3, [r3, #6]
 800d220:	2b00      	cmp	r3, #0
 800d222:	d102      	bne.n	800d22a <USBD_GetDescriptor+0x1ee>
  {
   USBD_CtlSendStatus(pdev);
 800d224:	6878      	ldr	r0, [r7, #4]
 800d226:	f000 fa75 	bl	800d714 <USBD_CtlSendStatus>
  }
}
 800d22a:	3710      	adds	r7, #16
 800d22c:	46bd      	mov	sp, r7
 800d22e:	bd80      	pop	{r7, pc}

0800d230 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 800d230:	b580      	push	{r7, lr}
 800d232:	b084      	sub	sp, #16
 800d234:	af00      	add	r7, sp, #0
 800d236:	6078      	str	r0, [r7, #4]
 800d238:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800d23a:	683b      	ldr	r3, [r7, #0]
 800d23c:	889b      	ldrh	r3, [r3, #4]
 800d23e:	2b00      	cmp	r3, #0
 800d240:	d130      	bne.n	800d2a4 <USBD_SetAddress+0x74>
 800d242:	683b      	ldr	r3, [r7, #0]
 800d244:	88db      	ldrh	r3, [r3, #6]
 800d246:	2b00      	cmp	r3, #0
 800d248:	d12c      	bne.n	800d2a4 <USBD_SetAddress+0x74>
 800d24a:	683b      	ldr	r3, [r7, #0]
 800d24c:	885b      	ldrh	r3, [r3, #2]
 800d24e:	2b7f      	cmp	r3, #127	; 0x7f
 800d250:	d828      	bhi.n	800d2a4 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800d252:	683b      	ldr	r3, [r7, #0]
 800d254:	885b      	ldrh	r3, [r3, #2]
 800d256:	b2db      	uxtb	r3, r3
 800d258:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d25c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d25e:	687b      	ldr	r3, [r7, #4]
 800d260:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800d264:	2b03      	cmp	r3, #3
 800d266:	d104      	bne.n	800d272 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev , req);
 800d268:	6839      	ldr	r1, [r7, #0]
 800d26a:	6878      	ldr	r0, [r7, #4]
 800d26c:	f000 f989 	bl	800d582 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d270:	e01c      	b.n	800d2ac <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800d272:	687b      	ldr	r3, [r7, #4]
 800d274:	7bfa      	ldrb	r2, [r7, #15]
 800d276:	f883 2276 	strb.w	r2, [r3, #630]	; 0x276
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800d27a:	7bfb      	ldrb	r3, [r7, #15]
 800d27c:	4619      	mov	r1, r3
 800d27e:	6878      	ldr	r0, [r7, #4]
 800d280:	f000 ff50 	bl	800e124 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800d284:	6878      	ldr	r0, [r7, #4]
 800d286:	f000 fa45 	bl	800d714 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800d28a:	7bfb      	ldrb	r3, [r7, #15]
 800d28c:	2b00      	cmp	r3, #0
 800d28e:	d004      	beq.n	800d29a <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800d290:	687b      	ldr	r3, [r7, #4]
 800d292:	2202      	movs	r2, #2
 800d294:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d298:	e008      	b.n	800d2ac <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800d29a:	687b      	ldr	r3, [r7, #4]
 800d29c:	2201      	movs	r2, #1
 800d29e:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d2a2:	e003      	b.n	800d2ac <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800d2a4:	6839      	ldr	r1, [r7, #0]
 800d2a6:	6878      	ldr	r0, [r7, #4]
 800d2a8:	f000 f96b 	bl	800d582 <USBD_CtlError>
  }
}
 800d2ac:	bf00      	nop
 800d2ae:	3710      	adds	r7, #16
 800d2b0:	46bd      	mov	sp, r7
 800d2b2:	bd80      	pop	{r7, pc}

0800d2b4 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d2b4:	b580      	push	{r7, lr}
 800d2b6:	b082      	sub	sp, #8
 800d2b8:	af00      	add	r7, sp, #0
 800d2ba:	6078      	str	r0, [r7, #4]
 800d2bc:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800d2be:	683b      	ldr	r3, [r7, #0]
 800d2c0:	885b      	ldrh	r3, [r3, #2]
 800d2c2:	b2da      	uxtb	r2, r3
 800d2c4:	4b41      	ldr	r3, [pc, #260]	; (800d3cc <USBD_SetConfig+0x118>)
 800d2c6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800d2c8:	4b40      	ldr	r3, [pc, #256]	; (800d3cc <USBD_SetConfig+0x118>)
 800d2ca:	781b      	ldrb	r3, [r3, #0]
 800d2cc:	2b01      	cmp	r3, #1
 800d2ce:	d904      	bls.n	800d2da <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 800d2d0:	6839      	ldr	r1, [r7, #0]
 800d2d2:	6878      	ldr	r0, [r7, #4]
 800d2d4:	f000 f955 	bl	800d582 <USBD_CtlError>
 800d2d8:	e075      	b.n	800d3c6 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 800d2da:	687b      	ldr	r3, [r7, #4]
 800d2dc:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800d2e0:	2b02      	cmp	r3, #2
 800d2e2:	d002      	beq.n	800d2ea <USBD_SetConfig+0x36>
 800d2e4:	2b03      	cmp	r3, #3
 800d2e6:	d023      	beq.n	800d330 <USBD_SetConfig+0x7c>
 800d2e8:	e062      	b.n	800d3b0 <USBD_SetConfig+0xfc>
    {
    case USBD_STATE_ADDRESSED:
      if (cfgidx)
 800d2ea:	4b38      	ldr	r3, [pc, #224]	; (800d3cc <USBD_SetConfig+0x118>)
 800d2ec:	781b      	ldrb	r3, [r3, #0]
 800d2ee:	2b00      	cmp	r3, #0
 800d2f0:	d01a      	beq.n	800d328 <USBD_SetConfig+0x74>
      {
        pdev->dev_config = cfgidx;
 800d2f2:	4b36      	ldr	r3, [pc, #216]	; (800d3cc <USBD_SetConfig+0x118>)
 800d2f4:	781b      	ldrb	r3, [r3, #0]
 800d2f6:	461a      	mov	r2, r3
 800d2f8:	687b      	ldr	r3, [r7, #4]
 800d2fa:	605a      	str	r2, [r3, #4]
        pdev->dev_state = USBD_STATE_CONFIGURED;
 800d2fc:	687b      	ldr	r3, [r7, #4]
 800d2fe:	2203      	movs	r2, #3
 800d300:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800d304:	4b31      	ldr	r3, [pc, #196]	; (800d3cc <USBD_SetConfig+0x118>)
 800d306:	781b      	ldrb	r3, [r3, #0]
 800d308:	4619      	mov	r1, r3
 800d30a:	6878      	ldr	r0, [r7, #4]
 800d30c:	f7ff fa2a 	bl	800c764 <USBD_SetClassConfig>
 800d310:	4603      	mov	r3, r0
 800d312:	2b02      	cmp	r3, #2
 800d314:	d104      	bne.n	800d320 <USBD_SetConfig+0x6c>
        {
          USBD_CtlError(pdev, req);
 800d316:	6839      	ldr	r1, [r7, #0]
 800d318:	6878      	ldr	r0, [r7, #4]
 800d31a:	f000 f932 	bl	800d582 <USBD_CtlError>
          return;
 800d31e:	e052      	b.n	800d3c6 <USBD_SetConfig+0x112>
        }
        USBD_CtlSendStatus(pdev);
 800d320:	6878      	ldr	r0, [r7, #4]
 800d322:	f000 f9f7 	bl	800d714 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlSendStatus(pdev);
      }
      break;
 800d326:	e04e      	b.n	800d3c6 <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 800d328:	6878      	ldr	r0, [r7, #4]
 800d32a:	f000 f9f3 	bl	800d714 <USBD_CtlSendStatus>
      break;
 800d32e:	e04a      	b.n	800d3c6 <USBD_SetConfig+0x112>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800d330:	4b26      	ldr	r3, [pc, #152]	; (800d3cc <USBD_SetConfig+0x118>)
 800d332:	781b      	ldrb	r3, [r3, #0]
 800d334:	2b00      	cmp	r3, #0
 800d336:	d112      	bne.n	800d35e <USBD_SetConfig+0xaa>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800d338:	687b      	ldr	r3, [r7, #4]
 800d33a:	2202      	movs	r2, #2
 800d33c:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
        pdev->dev_config = cfgidx;
 800d340:	4b22      	ldr	r3, [pc, #136]	; (800d3cc <USBD_SetConfig+0x118>)
 800d342:	781b      	ldrb	r3, [r3, #0]
 800d344:	461a      	mov	r2, r3
 800d346:	687b      	ldr	r3, [r7, #4]
 800d348:	605a      	str	r2, [r3, #4]
        USBD_ClrClassConfig(pdev, cfgidx);
 800d34a:	4b20      	ldr	r3, [pc, #128]	; (800d3cc <USBD_SetConfig+0x118>)
 800d34c:	781b      	ldrb	r3, [r3, #0]
 800d34e:	4619      	mov	r1, r3
 800d350:	6878      	ldr	r0, [r7, #4]
 800d352:	f7ff fa26 	bl	800c7a2 <USBD_ClrClassConfig>
        USBD_CtlSendStatus(pdev);
 800d356:	6878      	ldr	r0, [r7, #4]
 800d358:	f000 f9dc 	bl	800d714 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlSendStatus(pdev);
      }
      break;
 800d35c:	e033      	b.n	800d3c6 <USBD_SetConfig+0x112>
      else if (cfgidx != pdev->dev_config)
 800d35e:	4b1b      	ldr	r3, [pc, #108]	; (800d3cc <USBD_SetConfig+0x118>)
 800d360:	781b      	ldrb	r3, [r3, #0]
 800d362:	461a      	mov	r2, r3
 800d364:	687b      	ldr	r3, [r7, #4]
 800d366:	685b      	ldr	r3, [r3, #4]
 800d368:	429a      	cmp	r2, r3
 800d36a:	d01d      	beq.n	800d3a8 <USBD_SetConfig+0xf4>
        USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800d36c:	687b      	ldr	r3, [r7, #4]
 800d36e:	685b      	ldr	r3, [r3, #4]
 800d370:	b2db      	uxtb	r3, r3
 800d372:	4619      	mov	r1, r3
 800d374:	6878      	ldr	r0, [r7, #4]
 800d376:	f7ff fa14 	bl	800c7a2 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800d37a:	4b14      	ldr	r3, [pc, #80]	; (800d3cc <USBD_SetConfig+0x118>)
 800d37c:	781b      	ldrb	r3, [r3, #0]
 800d37e:	461a      	mov	r2, r3
 800d380:	687b      	ldr	r3, [r7, #4]
 800d382:	605a      	str	r2, [r3, #4]
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800d384:	4b11      	ldr	r3, [pc, #68]	; (800d3cc <USBD_SetConfig+0x118>)
 800d386:	781b      	ldrb	r3, [r3, #0]
 800d388:	4619      	mov	r1, r3
 800d38a:	6878      	ldr	r0, [r7, #4]
 800d38c:	f7ff f9ea 	bl	800c764 <USBD_SetClassConfig>
 800d390:	4603      	mov	r3, r0
 800d392:	2b02      	cmp	r3, #2
 800d394:	d104      	bne.n	800d3a0 <USBD_SetConfig+0xec>
          USBD_CtlError(pdev, req);
 800d396:	6839      	ldr	r1, [r7, #0]
 800d398:	6878      	ldr	r0, [r7, #4]
 800d39a:	f000 f8f2 	bl	800d582 <USBD_CtlError>
          return;
 800d39e:	e012      	b.n	800d3c6 <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 800d3a0:	6878      	ldr	r0, [r7, #4]
 800d3a2:	f000 f9b7 	bl	800d714 <USBD_CtlSendStatus>
      break;
 800d3a6:	e00e      	b.n	800d3c6 <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 800d3a8:	6878      	ldr	r0, [r7, #4]
 800d3aa:	f000 f9b3 	bl	800d714 <USBD_CtlSendStatus>
      break;
 800d3ae:	e00a      	b.n	800d3c6 <USBD_SetConfig+0x112>

    default:
      USBD_CtlError(pdev, req);
 800d3b0:	6839      	ldr	r1, [r7, #0]
 800d3b2:	6878      	ldr	r0, [r7, #4]
 800d3b4:	f000 f8e5 	bl	800d582 <USBD_CtlError>
      USBD_ClrClassConfig(pdev, cfgidx);
 800d3b8:	4b04      	ldr	r3, [pc, #16]	; (800d3cc <USBD_SetConfig+0x118>)
 800d3ba:	781b      	ldrb	r3, [r3, #0]
 800d3bc:	4619      	mov	r1, r3
 800d3be:	6878      	ldr	r0, [r7, #4]
 800d3c0:	f7ff f9ef 	bl	800c7a2 <USBD_ClrClassConfig>
      break;
 800d3c4:	bf00      	nop
    }
  }
}
 800d3c6:	3708      	adds	r7, #8
 800d3c8:	46bd      	mov	sp, r7
 800d3ca:	bd80      	pop	{r7, pc}
 800d3cc:	2000097c 	.word	0x2000097c

0800d3d0 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d3d0:	b580      	push	{r7, lr}
 800d3d2:	b082      	sub	sp, #8
 800d3d4:	af00      	add	r7, sp, #0
 800d3d6:	6078      	str	r0, [r7, #4]
 800d3d8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800d3da:	683b      	ldr	r3, [r7, #0]
 800d3dc:	88db      	ldrh	r3, [r3, #6]
 800d3de:	2b01      	cmp	r3, #1
 800d3e0:	d004      	beq.n	800d3ec <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev , req);
 800d3e2:	6839      	ldr	r1, [r7, #0]
 800d3e4:	6878      	ldr	r0, [r7, #4]
 800d3e6:	f000 f8cc 	bl	800d582 <USBD_CtlError>
    default:
      USBD_CtlError(pdev , req);
      break;
    }
  }
}
 800d3ea:	e021      	b.n	800d430 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 800d3ec:	687b      	ldr	r3, [r7, #4]
 800d3ee:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800d3f2:	2b01      	cmp	r3, #1
 800d3f4:	db17      	blt.n	800d426 <USBD_GetConfig+0x56>
 800d3f6:	2b02      	cmp	r3, #2
 800d3f8:	dd02      	ble.n	800d400 <USBD_GetConfig+0x30>
 800d3fa:	2b03      	cmp	r3, #3
 800d3fc:	d00b      	beq.n	800d416 <USBD_GetConfig+0x46>
 800d3fe:	e012      	b.n	800d426 <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 800d400:	687b      	ldr	r3, [r7, #4]
 800d402:	2200      	movs	r2, #0
 800d404:	609a      	str	r2, [r3, #8]
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800d406:	687b      	ldr	r3, [r7, #4]
 800d408:	3308      	adds	r3, #8
 800d40a:	2201      	movs	r2, #1
 800d40c:	4619      	mov	r1, r3
 800d40e:	6878      	ldr	r0, [r7, #4]
 800d410:	f000 f922 	bl	800d658 <USBD_CtlSendData>
      break;
 800d414:	e00c      	b.n	800d430 <USBD_GetConfig+0x60>
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800d416:	687b      	ldr	r3, [r7, #4]
 800d418:	3304      	adds	r3, #4
 800d41a:	2201      	movs	r2, #1
 800d41c:	4619      	mov	r1, r3
 800d41e:	6878      	ldr	r0, [r7, #4]
 800d420:	f000 f91a 	bl	800d658 <USBD_CtlSendData>
      break;
 800d424:	e004      	b.n	800d430 <USBD_GetConfig+0x60>
      USBD_CtlError(pdev , req);
 800d426:	6839      	ldr	r1, [r7, #0]
 800d428:	6878      	ldr	r0, [r7, #4]
 800d42a:	f000 f8aa 	bl	800d582 <USBD_CtlError>
      break;
 800d42e:	bf00      	nop
}
 800d430:	bf00      	nop
 800d432:	3708      	adds	r7, #8
 800d434:	46bd      	mov	sp, r7
 800d436:	bd80      	pop	{r7, pc}

0800d438 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d438:	b580      	push	{r7, lr}
 800d43a:	b082      	sub	sp, #8
 800d43c:	af00      	add	r7, sp, #0
 800d43e:	6078      	str	r0, [r7, #4]
 800d440:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800d442:	687b      	ldr	r3, [r7, #4]
 800d444:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800d448:	3b01      	subs	r3, #1
 800d44a:	2b02      	cmp	r3, #2
 800d44c:	d81e      	bhi.n	800d48c <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if(req->wLength != 0x2U)
 800d44e:	683b      	ldr	r3, [r7, #0]
 800d450:	88db      	ldrh	r3, [r3, #6]
 800d452:	2b02      	cmp	r3, #2
 800d454:	d004      	beq.n	800d460 <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 800d456:	6839      	ldr	r1, [r7, #0]
 800d458:	6878      	ldr	r0, [r7, #4]
 800d45a:	f000 f892 	bl	800d582 <USBD_CtlError>
      break;
 800d45e:	e01a      	b.n	800d496 <USBD_GetStatus+0x5e>
    }

#if ( USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800d460:	687b      	ldr	r3, [r7, #4]
 800d462:	2201      	movs	r2, #1
 800d464:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup)
 800d466:	687b      	ldr	r3, [r7, #4]
 800d468:	f8d3 327c 	ldr.w	r3, [r3, #636]	; 0x27c
 800d46c:	2b00      	cmp	r3, #0
 800d46e:	d005      	beq.n	800d47c <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800d470:	687b      	ldr	r3, [r7, #4]
 800d472:	68db      	ldr	r3, [r3, #12]
 800d474:	f043 0202 	orr.w	r2, r3, #2
 800d478:	687b      	ldr	r3, [r7, #4]
 800d47a:	60da      	str	r2, [r3, #12]
    }

    USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800d47c:	687b      	ldr	r3, [r7, #4]
 800d47e:	330c      	adds	r3, #12
 800d480:	2202      	movs	r2, #2
 800d482:	4619      	mov	r1, r3
 800d484:	6878      	ldr	r0, [r7, #4]
 800d486:	f000 f8e7 	bl	800d658 <USBD_CtlSendData>
    break;
 800d48a:	e004      	b.n	800d496 <USBD_GetStatus+0x5e>

  default :
    USBD_CtlError(pdev , req);
 800d48c:	6839      	ldr	r1, [r7, #0]
 800d48e:	6878      	ldr	r0, [r7, #4]
 800d490:	f000 f877 	bl	800d582 <USBD_CtlError>
    break;
 800d494:	bf00      	nop
  }
}
 800d496:	bf00      	nop
 800d498:	3708      	adds	r7, #8
 800d49a:	46bd      	mov	sp, r7
 800d49c:	bd80      	pop	{r7, pc}

0800d49e <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 800d49e:	b580      	push	{r7, lr}
 800d4a0:	b082      	sub	sp, #8
 800d4a2:	af00      	add	r7, sp, #0
 800d4a4:	6078      	str	r0, [r7, #4]
 800d4a6:	6039      	str	r1, [r7, #0]

  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800d4a8:	683b      	ldr	r3, [r7, #0]
 800d4aa:	885b      	ldrh	r3, [r3, #2]
 800d4ac:	2b01      	cmp	r3, #1
 800d4ae:	d106      	bne.n	800d4be <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800d4b0:	687b      	ldr	r3, [r7, #4]
 800d4b2:	2201      	movs	r2, #1
 800d4b4:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c
    USBD_CtlSendStatus(pdev);
 800d4b8:	6878      	ldr	r0, [r7, #4]
 800d4ba:	f000 f92b 	bl	800d714 <USBD_CtlSendStatus>
  }

}
 800d4be:	bf00      	nop
 800d4c0:	3708      	adds	r7, #8
 800d4c2:	46bd      	mov	sp, r7
 800d4c4:	bd80      	pop	{r7, pc}

0800d4c6 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 800d4c6:	b580      	push	{r7, lr}
 800d4c8:	b082      	sub	sp, #8
 800d4ca:	af00      	add	r7, sp, #0
 800d4cc:	6078      	str	r0, [r7, #4]
 800d4ce:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800d4d0:	687b      	ldr	r3, [r7, #4]
 800d4d2:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800d4d6:	3b01      	subs	r3, #1
 800d4d8:	2b02      	cmp	r3, #2
 800d4da:	d80b      	bhi.n	800d4f4 <USBD_ClrFeature+0x2e>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800d4dc:	683b      	ldr	r3, [r7, #0]
 800d4de:	885b      	ldrh	r3, [r3, #2]
 800d4e0:	2b01      	cmp	r3, #1
 800d4e2:	d10c      	bne.n	800d4fe <USBD_ClrFeature+0x38>
    {
      pdev->dev_remote_wakeup = 0U;
 800d4e4:	687b      	ldr	r3, [r7, #4]
 800d4e6:	2200      	movs	r2, #0
 800d4e8:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c
      USBD_CtlSendStatus(pdev);
 800d4ec:	6878      	ldr	r0, [r7, #4]
 800d4ee:	f000 f911 	bl	800d714 <USBD_CtlSendStatus>
    }
    break;
 800d4f2:	e004      	b.n	800d4fe <USBD_ClrFeature+0x38>

  default :
     USBD_CtlError(pdev , req);
 800d4f4:	6839      	ldr	r1, [r7, #0]
 800d4f6:	6878      	ldr	r0, [r7, #4]
 800d4f8:	f000 f843 	bl	800d582 <USBD_CtlError>
    break;
 800d4fc:	e000      	b.n	800d500 <USBD_ClrFeature+0x3a>
    break;
 800d4fe:	bf00      	nop
  }
}
 800d500:	bf00      	nop
 800d502:	3708      	adds	r7, #8
 800d504:	46bd      	mov	sp, r7
 800d506:	bd80      	pop	{r7, pc}

0800d508 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800d508:	b480      	push	{r7}
 800d50a:	b083      	sub	sp, #12
 800d50c:	af00      	add	r7, sp, #0
 800d50e:	6078      	str	r0, [r7, #4]
 800d510:	6039      	str	r1, [r7, #0]
  req->bmRequest     = *(uint8_t *)  (pdata);
 800d512:	683b      	ldr	r3, [r7, #0]
 800d514:	781a      	ldrb	r2, [r3, #0]
 800d516:	687b      	ldr	r3, [r7, #4]
 800d518:	701a      	strb	r2, [r3, #0]
  req->bRequest      = *(uint8_t *)  (pdata +  1);
 800d51a:	683b      	ldr	r3, [r7, #0]
 800d51c:	785a      	ldrb	r2, [r3, #1]
 800d51e:	687b      	ldr	r3, [r7, #4]
 800d520:	705a      	strb	r2, [r3, #1]
  req->wValue        = SWAPBYTE      (pdata +  2);
 800d522:	683b      	ldr	r3, [r7, #0]
 800d524:	3302      	adds	r3, #2
 800d526:	781b      	ldrb	r3, [r3, #0]
 800d528:	b29a      	uxth	r2, r3
 800d52a:	683b      	ldr	r3, [r7, #0]
 800d52c:	3303      	adds	r3, #3
 800d52e:	781b      	ldrb	r3, [r3, #0]
 800d530:	b29b      	uxth	r3, r3
 800d532:	021b      	lsls	r3, r3, #8
 800d534:	b29b      	uxth	r3, r3
 800d536:	4413      	add	r3, r2
 800d538:	b29a      	uxth	r2, r3
 800d53a:	687b      	ldr	r3, [r7, #4]
 800d53c:	805a      	strh	r2, [r3, #2]
  req->wIndex        = SWAPBYTE      (pdata +  4);
 800d53e:	683b      	ldr	r3, [r7, #0]
 800d540:	3304      	adds	r3, #4
 800d542:	781b      	ldrb	r3, [r3, #0]
 800d544:	b29a      	uxth	r2, r3
 800d546:	683b      	ldr	r3, [r7, #0]
 800d548:	3305      	adds	r3, #5
 800d54a:	781b      	ldrb	r3, [r3, #0]
 800d54c:	b29b      	uxth	r3, r3
 800d54e:	021b      	lsls	r3, r3, #8
 800d550:	b29b      	uxth	r3, r3
 800d552:	4413      	add	r3, r2
 800d554:	b29a      	uxth	r2, r3
 800d556:	687b      	ldr	r3, [r7, #4]
 800d558:	809a      	strh	r2, [r3, #4]
  req->wLength       = SWAPBYTE      (pdata +  6);
 800d55a:	683b      	ldr	r3, [r7, #0]
 800d55c:	3306      	adds	r3, #6
 800d55e:	781b      	ldrb	r3, [r3, #0]
 800d560:	b29a      	uxth	r2, r3
 800d562:	683b      	ldr	r3, [r7, #0]
 800d564:	3307      	adds	r3, #7
 800d566:	781b      	ldrb	r3, [r3, #0]
 800d568:	b29b      	uxth	r3, r3
 800d56a:	021b      	lsls	r3, r3, #8
 800d56c:	b29b      	uxth	r3, r3
 800d56e:	4413      	add	r3, r2
 800d570:	b29a      	uxth	r2, r3
 800d572:	687b      	ldr	r3, [r7, #4]
 800d574:	80da      	strh	r2, [r3, #6]

}
 800d576:	bf00      	nop
 800d578:	370c      	adds	r7, #12
 800d57a:	46bd      	mov	sp, r7
 800d57c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d580:	4770      	bx	lr

0800d582 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError( USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 800d582:	b580      	push	{r7, lr}
 800d584:	b082      	sub	sp, #8
 800d586:	af00      	add	r7, sp, #0
 800d588:	6078      	str	r0, [r7, #4]
 800d58a:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev , 0x80U);
 800d58c:	2180      	movs	r1, #128	; 0x80
 800d58e:	6878      	ldr	r0, [r7, #4]
 800d590:	f000 fd5e 	bl	800e050 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0U);
 800d594:	2100      	movs	r1, #0
 800d596:	6878      	ldr	r0, [r7, #4]
 800d598:	f000 fd5a 	bl	800e050 <USBD_LL_StallEP>
}
 800d59c:	bf00      	nop
 800d59e:	3708      	adds	r7, #8
 800d5a0:	46bd      	mov	sp, r7
 800d5a2:	bd80      	pop	{r7, pc}

0800d5a4 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800d5a4:	b580      	push	{r7, lr}
 800d5a6:	b086      	sub	sp, #24
 800d5a8:	af00      	add	r7, sp, #0
 800d5aa:	60f8      	str	r0, [r7, #12]
 800d5ac:	60b9      	str	r1, [r7, #8]
 800d5ae:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800d5b0:	2300      	movs	r3, #0
 800d5b2:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 800d5b4:	68fb      	ldr	r3, [r7, #12]
 800d5b6:	2b00      	cmp	r3, #0
 800d5b8:	d032      	beq.n	800d620 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800d5ba:	68f8      	ldr	r0, [r7, #12]
 800d5bc:	f000 f834 	bl	800d628 <USBD_GetLen>
 800d5c0:	4603      	mov	r3, r0
 800d5c2:	3301      	adds	r3, #1
 800d5c4:	b29b      	uxth	r3, r3
 800d5c6:	005b      	lsls	r3, r3, #1
 800d5c8:	b29a      	uxth	r2, r3
 800d5ca:	687b      	ldr	r3, [r7, #4]
 800d5cc:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800d5ce:	7dfb      	ldrb	r3, [r7, #23]
 800d5d0:	1c5a      	adds	r2, r3, #1
 800d5d2:	75fa      	strb	r2, [r7, #23]
 800d5d4:	461a      	mov	r2, r3
 800d5d6:	68bb      	ldr	r3, [r7, #8]
 800d5d8:	4413      	add	r3, r2
 800d5da:	687a      	ldr	r2, [r7, #4]
 800d5dc:	7812      	ldrb	r2, [r2, #0]
 800d5de:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800d5e0:	7dfb      	ldrb	r3, [r7, #23]
 800d5e2:	1c5a      	adds	r2, r3, #1
 800d5e4:	75fa      	strb	r2, [r7, #23]
 800d5e6:	461a      	mov	r2, r3
 800d5e8:	68bb      	ldr	r3, [r7, #8]
 800d5ea:	4413      	add	r3, r2
 800d5ec:	2203      	movs	r2, #3
 800d5ee:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800d5f0:	e012      	b.n	800d618 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 800d5f2:	68fb      	ldr	r3, [r7, #12]
 800d5f4:	1c5a      	adds	r2, r3, #1
 800d5f6:	60fa      	str	r2, [r7, #12]
 800d5f8:	7dfa      	ldrb	r2, [r7, #23]
 800d5fa:	1c51      	adds	r1, r2, #1
 800d5fc:	75f9      	strb	r1, [r7, #23]
 800d5fe:	4611      	mov	r1, r2
 800d600:	68ba      	ldr	r2, [r7, #8]
 800d602:	440a      	add	r2, r1
 800d604:	781b      	ldrb	r3, [r3, #0]
 800d606:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800d608:	7dfb      	ldrb	r3, [r7, #23]
 800d60a:	1c5a      	adds	r2, r3, #1
 800d60c:	75fa      	strb	r2, [r7, #23]
 800d60e:	461a      	mov	r2, r3
 800d610:	68bb      	ldr	r3, [r7, #8]
 800d612:	4413      	add	r3, r2
 800d614:	2200      	movs	r2, #0
 800d616:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800d618:	68fb      	ldr	r3, [r7, #12]
 800d61a:	781b      	ldrb	r3, [r3, #0]
 800d61c:	2b00      	cmp	r3, #0
 800d61e:	d1e8      	bne.n	800d5f2 <USBD_GetString+0x4e>
    }
  }
}
 800d620:	bf00      	nop
 800d622:	3718      	adds	r7, #24
 800d624:	46bd      	mov	sp, r7
 800d626:	bd80      	pop	{r7, pc}

0800d628 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800d628:	b480      	push	{r7}
 800d62a:	b085      	sub	sp, #20
 800d62c:	af00      	add	r7, sp, #0
 800d62e:	6078      	str	r0, [r7, #4]
    uint8_t  len = 0U;
 800d630:	2300      	movs	r3, #0
 800d632:	73fb      	strb	r3, [r7, #15]

    while (*buf != '\0')
 800d634:	e005      	b.n	800d642 <USBD_GetLen+0x1a>
    {
        len++;
 800d636:	7bfb      	ldrb	r3, [r7, #15]
 800d638:	3301      	adds	r3, #1
 800d63a:	73fb      	strb	r3, [r7, #15]
        buf++;
 800d63c:	687b      	ldr	r3, [r7, #4]
 800d63e:	3301      	adds	r3, #1
 800d640:	607b      	str	r3, [r7, #4]
    while (*buf != '\0')
 800d642:	687b      	ldr	r3, [r7, #4]
 800d644:	781b      	ldrb	r3, [r3, #0]
 800d646:	2b00      	cmp	r3, #0
 800d648:	d1f5      	bne.n	800d636 <USBD_GetLen+0xe>
    }

    return len;
 800d64a:	7bfb      	ldrb	r3, [r7, #15]
}
 800d64c:	4618      	mov	r0, r3
 800d64e:	3714      	adds	r7, #20
 800d650:	46bd      	mov	sp, r7
 800d652:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d656:	4770      	bx	lr

0800d658 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                     uint16_t len)
{
 800d658:	b580      	push	{r7, lr}
 800d65a:	b084      	sub	sp, #16
 800d65c:	af00      	add	r7, sp, #0
 800d65e:	60f8      	str	r0, [r7, #12]
 800d660:	60b9      	str	r1, [r7, #8]
 800d662:	4613      	mov	r3, r2
 800d664:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800d666:	68fb      	ldr	r3, [r7, #12]
 800d668:	2202      	movs	r2, #2
 800d66a:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->ep_in[0].total_length = len;
 800d66e:	88fa      	ldrh	r2, [r7, #6]
 800d670:	68fb      	ldr	r3, [r7, #12]
 800d672:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800d674:	88fa      	ldrh	r2, [r7, #6]
 800d676:	68fb      	ldr	r3, [r7, #12]
 800d678:	621a      	str	r2, [r3, #32]

 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 800d67a:	88fb      	ldrh	r3, [r7, #6]
 800d67c:	68ba      	ldr	r2, [r7, #8]
 800d67e:	2100      	movs	r1, #0
 800d680:	68f8      	ldr	r0, [r7, #12]
 800d682:	f000 fd6e 	bl	800e162 <USBD_LL_Transmit>

  return USBD_OK;
 800d686:	2300      	movs	r3, #0
}
 800d688:	4618      	mov	r0, r3
 800d68a:	3710      	adds	r7, #16
 800d68c:	46bd      	mov	sp, r7
 800d68e:	bd80      	pop	{r7, pc}

0800d690 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData (USBD_HandleTypeDef *pdev,
                                             uint8_t *pbuf, uint16_t len)
{
 800d690:	b580      	push	{r7, lr}
 800d692:	b084      	sub	sp, #16
 800d694:	af00      	add	r7, sp, #0
 800d696:	60f8      	str	r0, [r7, #12]
 800d698:	60b9      	str	r1, [r7, #8]
 800d69a:	4613      	mov	r3, r2
 800d69c:	80fb      	strh	r3, [r7, #6]
 /* Start the next transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 800d69e:	88fb      	ldrh	r3, [r7, #6]
 800d6a0:	68ba      	ldr	r2, [r7, #8]
 800d6a2:	2100      	movs	r1, #0
 800d6a4:	68f8      	ldr	r0, [r7, #12]
 800d6a6:	f000 fd5c 	bl	800e162 <USBD_LL_Transmit>

  return USBD_OK;
 800d6aa:	2300      	movs	r3, #0
}
 800d6ac:	4618      	mov	r0, r3
 800d6ae:	3710      	adds	r7, #16
 800d6b0:	46bd      	mov	sp, r7
 800d6b2:	bd80      	pop	{r7, pc}

0800d6b4 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                      uint16_t len)
{
 800d6b4:	b580      	push	{r7, lr}
 800d6b6:	b084      	sub	sp, #16
 800d6b8:	af00      	add	r7, sp, #0
 800d6ba:	60f8      	str	r0, [r7, #12]
 800d6bc:	60b9      	str	r1, [r7, #8]
 800d6be:	4613      	mov	r3, r2
 800d6c0:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800d6c2:	68fb      	ldr	r3, [r7, #12]
 800d6c4:	2203      	movs	r2, #3
 800d6c6:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->ep_out[0].total_length = len;
 800d6ca:	88fa      	ldrh	r2, [r7, #6]
 800d6cc:	68fb      	ldr	r3, [r7, #12]
 800d6ce:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
  pdev->ep_out[0].rem_length   = len;
 800d6d2:	88fa      	ldrh	r2, [r7, #6]
 800d6d4:	68fb      	ldr	r3, [r7, #12]
 800d6d6:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c

  /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, pbuf, len);
 800d6da:	88fb      	ldrh	r3, [r7, #6]
 800d6dc:	68ba      	ldr	r2, [r7, #8]
 800d6de:	2100      	movs	r1, #0
 800d6e0:	68f8      	ldr	r0, [r7, #12]
 800d6e2:	f000 fd61 	bl	800e1a8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800d6e6:	2300      	movs	r3, #0
}
 800d6e8:	4618      	mov	r0, r3
 800d6ea:	3710      	adds	r7, #16
 800d6ec:	46bd      	mov	sp, r7
 800d6ee:	bd80      	pop	{r7, pc}

0800d6f0 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                       uint16_t len)
{
 800d6f0:	b580      	push	{r7, lr}
 800d6f2:	b084      	sub	sp, #16
 800d6f4:	af00      	add	r7, sp, #0
 800d6f6:	60f8      	str	r0, [r7, #12]
 800d6f8:	60b9      	str	r1, [r7, #8]
 800d6fa:	4613      	mov	r3, r2
 800d6fc:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800d6fe:	88fb      	ldrh	r3, [r7, #6]
 800d700:	68ba      	ldr	r2, [r7, #8]
 800d702:	2100      	movs	r1, #0
 800d704:	68f8      	ldr	r0, [r7, #12]
 800d706:	f000 fd4f 	bl	800e1a8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800d70a:	2300      	movs	r3, #0
}
 800d70c:	4618      	mov	r0, r3
 800d70e:	3710      	adds	r7, #16
 800d710:	46bd      	mov	sp, r7
 800d712:	bd80      	pop	{r7, pc}

0800d714 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus (USBD_HandleTypeDef *pdev)
{
 800d714:	b580      	push	{r7, lr}
 800d716:	b082      	sub	sp, #8
 800d718:	af00      	add	r7, sp, #0
 800d71a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800d71c:	687b      	ldr	r3, [r7, #4]
 800d71e:	2204      	movs	r2, #4
 800d720:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800d724:	2300      	movs	r3, #0
 800d726:	2200      	movs	r2, #0
 800d728:	2100      	movs	r1, #0
 800d72a:	6878      	ldr	r0, [r7, #4]
 800d72c:	f000 fd19 	bl	800e162 <USBD_LL_Transmit>

  return USBD_OK;
 800d730:	2300      	movs	r3, #0
}
 800d732:	4618      	mov	r0, r3
 800d734:	3708      	adds	r7, #8
 800d736:	46bd      	mov	sp, r7
 800d738:	bd80      	pop	{r7, pc}

0800d73a <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus (USBD_HandleTypeDef *pdev)
{
 800d73a:	b580      	push	{r7, lr}
 800d73c:	b082      	sub	sp, #8
 800d73e:	af00      	add	r7, sp, #0
 800d740:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800d742:	687b      	ldr	r3, [r7, #4]
 800d744:	2205      	movs	r2, #5
 800d746:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

 /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 800d74a:	2300      	movs	r3, #0
 800d74c:	2200      	movs	r2, #0
 800d74e:	2100      	movs	r1, #0
 800d750:	6878      	ldr	r0, [r7, #4]
 800d752:	f000 fd29 	bl	800e1a8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800d756:	2300      	movs	r3, #0
}
 800d758:	4618      	mov	r0, r3
 800d75a:	3708      	adds	r7, #8
 800d75c:	46bd      	mov	sp, r7
 800d75e:	bd80      	pop	{r7, pc}

0800d760 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800d760:	b480      	push	{r7}
 800d762:	b087      	sub	sp, #28
 800d764:	af00      	add	r7, sp, #0
 800d766:	60f8      	str	r0, [r7, #12]
 800d768:	60b9      	str	r1, [r7, #8]
 800d76a:	4613      	mov	r3, r2
 800d76c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800d76e:	2301      	movs	r3, #1
 800d770:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800d772:	2300      	movs	r3, #0
 800d774:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800d776:	4b1f      	ldr	r3, [pc, #124]	; (800d7f4 <FATFS_LinkDriverEx+0x94>)
 800d778:	7a5b      	ldrb	r3, [r3, #9]
 800d77a:	b2db      	uxtb	r3, r3
 800d77c:	2b00      	cmp	r3, #0
 800d77e:	d131      	bne.n	800d7e4 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800d780:	4b1c      	ldr	r3, [pc, #112]	; (800d7f4 <FATFS_LinkDriverEx+0x94>)
 800d782:	7a5b      	ldrb	r3, [r3, #9]
 800d784:	b2db      	uxtb	r3, r3
 800d786:	461a      	mov	r2, r3
 800d788:	4b1a      	ldr	r3, [pc, #104]	; (800d7f4 <FATFS_LinkDriverEx+0x94>)
 800d78a:	2100      	movs	r1, #0
 800d78c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800d78e:	4b19      	ldr	r3, [pc, #100]	; (800d7f4 <FATFS_LinkDriverEx+0x94>)
 800d790:	7a5b      	ldrb	r3, [r3, #9]
 800d792:	b2db      	uxtb	r3, r3
 800d794:	4a17      	ldr	r2, [pc, #92]	; (800d7f4 <FATFS_LinkDriverEx+0x94>)
 800d796:	009b      	lsls	r3, r3, #2
 800d798:	4413      	add	r3, r2
 800d79a:	68fa      	ldr	r2, [r7, #12]
 800d79c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800d79e:	4b15      	ldr	r3, [pc, #84]	; (800d7f4 <FATFS_LinkDriverEx+0x94>)
 800d7a0:	7a5b      	ldrb	r3, [r3, #9]
 800d7a2:	b2db      	uxtb	r3, r3
 800d7a4:	461a      	mov	r2, r3
 800d7a6:	4b13      	ldr	r3, [pc, #76]	; (800d7f4 <FATFS_LinkDriverEx+0x94>)
 800d7a8:	4413      	add	r3, r2
 800d7aa:	79fa      	ldrb	r2, [r7, #7]
 800d7ac:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800d7ae:	4b11      	ldr	r3, [pc, #68]	; (800d7f4 <FATFS_LinkDriverEx+0x94>)
 800d7b0:	7a5b      	ldrb	r3, [r3, #9]
 800d7b2:	b2db      	uxtb	r3, r3
 800d7b4:	1c5a      	adds	r2, r3, #1
 800d7b6:	b2d1      	uxtb	r1, r2
 800d7b8:	4a0e      	ldr	r2, [pc, #56]	; (800d7f4 <FATFS_LinkDriverEx+0x94>)
 800d7ba:	7251      	strb	r1, [r2, #9]
 800d7bc:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800d7be:	7dbb      	ldrb	r3, [r7, #22]
 800d7c0:	3330      	adds	r3, #48	; 0x30
 800d7c2:	b2da      	uxtb	r2, r3
 800d7c4:	68bb      	ldr	r3, [r7, #8]
 800d7c6:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800d7c8:	68bb      	ldr	r3, [r7, #8]
 800d7ca:	3301      	adds	r3, #1
 800d7cc:	223a      	movs	r2, #58	; 0x3a
 800d7ce:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800d7d0:	68bb      	ldr	r3, [r7, #8]
 800d7d2:	3302      	adds	r3, #2
 800d7d4:	222f      	movs	r2, #47	; 0x2f
 800d7d6:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800d7d8:	68bb      	ldr	r3, [r7, #8]
 800d7da:	3303      	adds	r3, #3
 800d7dc:	2200      	movs	r2, #0
 800d7de:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800d7e0:	2300      	movs	r3, #0
 800d7e2:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800d7e4:	7dfb      	ldrb	r3, [r7, #23]
}
 800d7e6:	4618      	mov	r0, r3
 800d7e8:	371c      	adds	r7, #28
 800d7ea:	46bd      	mov	sp, r7
 800d7ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7f0:	4770      	bx	lr
 800d7f2:	bf00      	nop
 800d7f4:	20000980 	.word	0x20000980

0800d7f8 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800d7f8:	b580      	push	{r7, lr}
 800d7fa:	b082      	sub	sp, #8
 800d7fc:	af00      	add	r7, sp, #0
 800d7fe:	6078      	str	r0, [r7, #4]
 800d800:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800d802:	2200      	movs	r2, #0
 800d804:	6839      	ldr	r1, [r7, #0]
 800d806:	6878      	ldr	r0, [r7, #4]
 800d808:	f7ff ffaa 	bl	800d760 <FATFS_LinkDriverEx>
 800d80c:	4603      	mov	r3, r0
}
 800d80e:	4618      	mov	r0, r3
 800d810:	3708      	adds	r7, #8
 800d812:	46bd      	mov	sp, r7
 800d814:	bd80      	pop	{r7, pc}
	...

0800d818 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800d818:	b580      	push	{r7, lr}
 800d81a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800d81c:	2200      	movs	r2, #0
 800d81e:	4912      	ldr	r1, [pc, #72]	; (800d868 <MX_USB_DEVICE_Init+0x50>)
 800d820:	4812      	ldr	r0, [pc, #72]	; (800d86c <MX_USB_DEVICE_Init+0x54>)
 800d822:	f7fe ff43 	bl	800c6ac <USBD_Init>
 800d826:	4603      	mov	r3, r0
 800d828:	2b00      	cmp	r3, #0
 800d82a:	d001      	beq.n	800d830 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800d82c:	f7f5 fd52 	bl	80032d4 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800d830:	490f      	ldr	r1, [pc, #60]	; (800d870 <MX_USB_DEVICE_Init+0x58>)
 800d832:	480e      	ldr	r0, [pc, #56]	; (800d86c <MX_USB_DEVICE_Init+0x54>)
 800d834:	f7fe ff65 	bl	800c702 <USBD_RegisterClass>
 800d838:	4603      	mov	r3, r0
 800d83a:	2b00      	cmp	r3, #0
 800d83c:	d001      	beq.n	800d842 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800d83e:	f7f5 fd49 	bl	80032d4 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800d842:	490c      	ldr	r1, [pc, #48]	; (800d874 <MX_USB_DEVICE_Init+0x5c>)
 800d844:	4809      	ldr	r0, [pc, #36]	; (800d86c <MX_USB_DEVICE_Init+0x54>)
 800d846:	f7fe fe93 	bl	800c570 <USBD_CDC_RegisterInterface>
 800d84a:	4603      	mov	r3, r0
 800d84c:	2b00      	cmp	r3, #0
 800d84e:	d001      	beq.n	800d854 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800d850:	f7f5 fd40 	bl	80032d4 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800d854:	4805      	ldr	r0, [pc, #20]	; (800d86c <MX_USB_DEVICE_Init+0x54>)
 800d856:	f7fe ff6e 	bl	800c736 <USBD_Start>
 800d85a:	4603      	mov	r3, r0
 800d85c:	2b00      	cmp	r3, #0
 800d85e:	d001      	beq.n	800d864 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800d860:	f7f5 fd38 	bl	80032d4 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800d864:	bf00      	nop
 800d866:	bd80      	pop	{r7, pc}
 800d868:	2000012c 	.word	0x2000012c
 800d86c:	200032f0 	.word	0x200032f0
 800d870:	20000018 	.word	0x20000018
 800d874:	2000011c 	.word	0x2000011c

0800d878 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800d878:	b580      	push	{r7, lr}
 800d87a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800d87c:	2200      	movs	r2, #0
 800d87e:	4905      	ldr	r1, [pc, #20]	; (800d894 <CDC_Init_FS+0x1c>)
 800d880:	4805      	ldr	r0, [pc, #20]	; (800d898 <CDC_Init_FS+0x20>)
 800d882:	f7fe fe8c 	bl	800c59e <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800d886:	4905      	ldr	r1, [pc, #20]	; (800d89c <CDC_Init_FS+0x24>)
 800d888:	4803      	ldr	r0, [pc, #12]	; (800d898 <CDC_Init_FS+0x20>)
 800d88a:	f7fe fea2 	bl	800c5d2 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800d88e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800d890:	4618      	mov	r0, r3
 800d892:	bd80      	pop	{r7, pc}
 800d894:	20003d8c 	.word	0x20003d8c
 800d898:	200032f0 	.word	0x200032f0
 800d89c:	2000358c 	.word	0x2000358c

0800d8a0 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800d8a0:	b480      	push	{r7}
 800d8a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800d8a4:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800d8a6:	4618      	mov	r0, r3
 800d8a8:	46bd      	mov	sp, r7
 800d8aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8ae:	4770      	bx	lr

0800d8b0 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800d8b0:	b480      	push	{r7}
 800d8b2:	b085      	sub	sp, #20
 800d8b4:	af00      	add	r7, sp, #0
 800d8b6:	4603      	mov	r3, r0
 800d8b8:	6039      	str	r1, [r7, #0]
 800d8ba:	71fb      	strb	r3, [r7, #7]
 800d8bc:	4613      	mov	r3, r2
 800d8be:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  uint8_t tempbuf[7] = {0,0,0,0,0,0,0};
 800d8c0:	f107 0308 	add.w	r3, r7, #8
 800d8c4:	2200      	movs	r2, #0
 800d8c6:	601a      	str	r2, [r3, #0]
 800d8c8:	f8c3 2003 	str.w	r2, [r3, #3]
  switch(cmd)
 800d8cc:	79fb      	ldrb	r3, [r7, #7]
 800d8ce:	2b23      	cmp	r3, #35	; 0x23
 800d8d0:	d87c      	bhi.n	800d9cc <CDC_Control_FS+0x11c>
 800d8d2:	a201      	add	r2, pc, #4	; (adr r2, 800d8d8 <CDC_Control_FS+0x28>)
 800d8d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d8d8:	0800d9cd 	.word	0x0800d9cd
 800d8dc:	0800d9cd 	.word	0x0800d9cd
 800d8e0:	0800d9cd 	.word	0x0800d9cd
 800d8e4:	0800d9cd 	.word	0x0800d9cd
 800d8e8:	0800d9cd 	.word	0x0800d9cd
 800d8ec:	0800d9cd 	.word	0x0800d9cd
 800d8f0:	0800d9cd 	.word	0x0800d9cd
 800d8f4:	0800d9cd 	.word	0x0800d9cd
 800d8f8:	0800d9cd 	.word	0x0800d9cd
 800d8fc:	0800d9cd 	.word	0x0800d9cd
 800d900:	0800d9cd 	.word	0x0800d9cd
 800d904:	0800d9cd 	.word	0x0800d9cd
 800d908:	0800d9cd 	.word	0x0800d9cd
 800d90c:	0800d9cd 	.word	0x0800d9cd
 800d910:	0800d9cd 	.word	0x0800d9cd
 800d914:	0800d9cd 	.word	0x0800d9cd
 800d918:	0800d9cd 	.word	0x0800d9cd
 800d91c:	0800d9cd 	.word	0x0800d9cd
 800d920:	0800d9cd 	.word	0x0800d9cd
 800d924:	0800d9cd 	.word	0x0800d9cd
 800d928:	0800d9cd 	.word	0x0800d9cd
 800d92c:	0800d9cd 	.word	0x0800d9cd
 800d930:	0800d9cd 	.word	0x0800d9cd
 800d934:	0800d9cd 	.word	0x0800d9cd
 800d938:	0800d9cd 	.word	0x0800d9cd
 800d93c:	0800d9cd 	.word	0x0800d9cd
 800d940:	0800d9cd 	.word	0x0800d9cd
 800d944:	0800d9cd 	.word	0x0800d9cd
 800d948:	0800d9cd 	.word	0x0800d9cd
 800d94c:	0800d9cd 	.word	0x0800d9cd
 800d950:	0800d9cd 	.word	0x0800d9cd
 800d954:	0800d9cd 	.word	0x0800d9cd
 800d958:	0800d969 	.word	0x0800d969
 800d95c:	0800d995 	.word	0x0800d995
 800d960:	0800d9cd 	.word	0x0800d9cd
 800d964:	0800d9cd 	.word	0x0800d9cd
  /*                                        3 - Mark                             */
  /*                                        4 - Space                            */
  /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
  /*******************************************************************************/
    case CDC_SET_LINE_CODING:
      	tempbuf[0] = pbuf[0];
 800d968:	683b      	ldr	r3, [r7, #0]
 800d96a:	781b      	ldrb	r3, [r3, #0]
 800d96c:	723b      	strb	r3, [r7, #8]
      	tempbuf[1] = pbuf[1];
 800d96e:	683b      	ldr	r3, [r7, #0]
 800d970:	785b      	ldrb	r3, [r3, #1]
 800d972:	727b      	strb	r3, [r7, #9]
      	tempbuf[2] = pbuf[2];
 800d974:	683b      	ldr	r3, [r7, #0]
 800d976:	789b      	ldrb	r3, [r3, #2]
 800d978:	72bb      	strb	r3, [r7, #10]
      	tempbuf[3] = pbuf[3];
 800d97a:	683b      	ldr	r3, [r7, #0]
 800d97c:	78db      	ldrb	r3, [r3, #3]
 800d97e:	72fb      	strb	r3, [r7, #11]
      	tempbuf[4] = pbuf[4];
 800d980:	683b      	ldr	r3, [r7, #0]
 800d982:	791b      	ldrb	r3, [r3, #4]
 800d984:	733b      	strb	r3, [r7, #12]
      	tempbuf[5] = pbuf[5];
 800d986:	683b      	ldr	r3, [r7, #0]
 800d988:	795b      	ldrb	r3, [r3, #5]
 800d98a:	737b      	strb	r3, [r7, #13]
      	tempbuf[6] = pbuf[6];
 800d98c:	683b      	ldr	r3, [r7, #0]
 800d98e:	799b      	ldrb	r3, [r3, #6]
 800d990:	73bb      	strb	r3, [r7, #14]
      	break;
 800d992:	e01c      	b.n	800d9ce <CDC_Control_FS+0x11e>

    case CDC_GET_LINE_CODING:
      	pbuf[0] = tempbuf[0];
 800d994:	7a3a      	ldrb	r2, [r7, #8]
 800d996:	683b      	ldr	r3, [r7, #0]
 800d998:	701a      	strb	r2, [r3, #0]
      	pbuf[1] = tempbuf[1];
 800d99a:	683b      	ldr	r3, [r7, #0]
 800d99c:	3301      	adds	r3, #1
 800d99e:	7a7a      	ldrb	r2, [r7, #9]
 800d9a0:	701a      	strb	r2, [r3, #0]
      	pbuf[2] = tempbuf[2];
 800d9a2:	683b      	ldr	r3, [r7, #0]
 800d9a4:	3302      	adds	r3, #2
 800d9a6:	7aba      	ldrb	r2, [r7, #10]
 800d9a8:	701a      	strb	r2, [r3, #0]
      	pbuf[3] = tempbuf[3];
 800d9aa:	683b      	ldr	r3, [r7, #0]
 800d9ac:	3303      	adds	r3, #3
 800d9ae:	7afa      	ldrb	r2, [r7, #11]
 800d9b0:	701a      	strb	r2, [r3, #0]
      	pbuf[4] = tempbuf[4];
 800d9b2:	683b      	ldr	r3, [r7, #0]
 800d9b4:	3304      	adds	r3, #4
 800d9b6:	7b3a      	ldrb	r2, [r7, #12]
 800d9b8:	701a      	strb	r2, [r3, #0]
      	pbuf[5] = tempbuf[5];
 800d9ba:	683b      	ldr	r3, [r7, #0]
 800d9bc:	3305      	adds	r3, #5
 800d9be:	7b7a      	ldrb	r2, [r7, #13]
 800d9c0:	701a      	strb	r2, [r3, #0]
      	pbuf[6] = tempbuf[6];
 800d9c2:	683b      	ldr	r3, [r7, #0]
 800d9c4:	3306      	adds	r3, #6
 800d9c6:	7bba      	ldrb	r2, [r7, #14]
 800d9c8:	701a      	strb	r2, [r3, #0]
      	break;
 800d9ca:	e000      	b.n	800d9ce <CDC_Control_FS+0x11e>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800d9cc:	bf00      	nop
  }

  return (USBD_OK);
 800d9ce:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800d9d0:	4618      	mov	r0, r3
 800d9d2:	3714      	adds	r7, #20
 800d9d4:	46bd      	mov	sp, r7
 800d9d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9da:	4770      	bx	lr

0800d9dc <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800d9dc:	b580      	push	{r7, lr}
 800d9de:	b082      	sub	sp, #8
 800d9e0:	af00      	add	r7, sp, #0
 800d9e2:	6078      	str	r0, [r7, #4]
 800d9e4:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800d9e6:	6879      	ldr	r1, [r7, #4]
 800d9e8:	4805      	ldr	r0, [pc, #20]	; (800da00 <CDC_Receive_FS+0x24>)
 800d9ea:	f7fe fdf2 	bl	800c5d2 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800d9ee:	4804      	ldr	r0, [pc, #16]	; (800da00 <CDC_Receive_FS+0x24>)
 800d9f0:	f7fe fe32 	bl	800c658 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800d9f4:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800d9f6:	4618      	mov	r0, r3
 800d9f8:	3708      	adds	r7, #8
 800d9fa:	46bd      	mov	sp, r7
 800d9fc:	bd80      	pop	{r7, pc}
 800d9fe:	bf00      	nop
 800da00:	200032f0 	.word	0x200032f0

0800da04 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800da04:	b580      	push	{r7, lr}
 800da06:	b084      	sub	sp, #16
 800da08:	af00      	add	r7, sp, #0
 800da0a:	6078      	str	r0, [r7, #4]
 800da0c:	460b      	mov	r3, r1
 800da0e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800da10:	2300      	movs	r3, #0
 800da12:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800da14:	4b0d      	ldr	r3, [pc, #52]	; (800da4c <CDC_Transmit_FS+0x48>)
 800da16:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800da1a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800da1c:	68bb      	ldr	r3, [r7, #8]
 800da1e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800da22:	2b00      	cmp	r3, #0
 800da24:	d001      	beq.n	800da2a <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800da26:	2301      	movs	r3, #1
 800da28:	e00b      	b.n	800da42 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800da2a:	887b      	ldrh	r3, [r7, #2]
 800da2c:	461a      	mov	r2, r3
 800da2e:	6879      	ldr	r1, [r7, #4]
 800da30:	4806      	ldr	r0, [pc, #24]	; (800da4c <CDC_Transmit_FS+0x48>)
 800da32:	f7fe fdb4 	bl	800c59e <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800da36:	4805      	ldr	r0, [pc, #20]	; (800da4c <CDC_Transmit_FS+0x48>)
 800da38:	f7fe fddf 	bl	800c5fa <USBD_CDC_TransmitPacket>
 800da3c:	4603      	mov	r3, r0
 800da3e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800da40:	7bfb      	ldrb	r3, [r7, #15]
}
 800da42:	4618      	mov	r0, r3
 800da44:	3710      	adds	r7, #16
 800da46:	46bd      	mov	sp, r7
 800da48:	bd80      	pop	{r7, pc}
 800da4a:	bf00      	nop
 800da4c:	200032f0 	.word	0x200032f0

0800da50 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800da50:	b480      	push	{r7}
 800da52:	b083      	sub	sp, #12
 800da54:	af00      	add	r7, sp, #0
 800da56:	4603      	mov	r3, r0
 800da58:	6039      	str	r1, [r7, #0]
 800da5a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800da5c:	683b      	ldr	r3, [r7, #0]
 800da5e:	2212      	movs	r2, #18
 800da60:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800da62:	4b03      	ldr	r3, [pc, #12]	; (800da70 <USBD_FS_DeviceDescriptor+0x20>)
}
 800da64:	4618      	mov	r0, r3
 800da66:	370c      	adds	r7, #12
 800da68:	46bd      	mov	sp, r7
 800da6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da6e:	4770      	bx	lr
 800da70:	20000148 	.word	0x20000148

0800da74 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800da74:	b480      	push	{r7}
 800da76:	b083      	sub	sp, #12
 800da78:	af00      	add	r7, sp, #0
 800da7a:	4603      	mov	r3, r0
 800da7c:	6039      	str	r1, [r7, #0]
 800da7e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800da80:	683b      	ldr	r3, [r7, #0]
 800da82:	2204      	movs	r2, #4
 800da84:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800da86:	4b03      	ldr	r3, [pc, #12]	; (800da94 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800da88:	4618      	mov	r0, r3
 800da8a:	370c      	adds	r7, #12
 800da8c:	46bd      	mov	sp, r7
 800da8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da92:	4770      	bx	lr
 800da94:	2000015c 	.word	0x2000015c

0800da98 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800da98:	b580      	push	{r7, lr}
 800da9a:	b082      	sub	sp, #8
 800da9c:	af00      	add	r7, sp, #0
 800da9e:	4603      	mov	r3, r0
 800daa0:	6039      	str	r1, [r7, #0]
 800daa2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800daa4:	79fb      	ldrb	r3, [r7, #7]
 800daa6:	2b00      	cmp	r3, #0
 800daa8:	d105      	bne.n	800dab6 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800daaa:	683a      	ldr	r2, [r7, #0]
 800daac:	4907      	ldr	r1, [pc, #28]	; (800dacc <USBD_FS_ProductStrDescriptor+0x34>)
 800daae:	4808      	ldr	r0, [pc, #32]	; (800dad0 <USBD_FS_ProductStrDescriptor+0x38>)
 800dab0:	f7ff fd78 	bl	800d5a4 <USBD_GetString>
 800dab4:	e004      	b.n	800dac0 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800dab6:	683a      	ldr	r2, [r7, #0]
 800dab8:	4904      	ldr	r1, [pc, #16]	; (800dacc <USBD_FS_ProductStrDescriptor+0x34>)
 800daba:	4805      	ldr	r0, [pc, #20]	; (800dad0 <USBD_FS_ProductStrDescriptor+0x38>)
 800dabc:	f7ff fd72 	bl	800d5a4 <USBD_GetString>
  }
  return USBD_StrDesc;
 800dac0:	4b02      	ldr	r3, [pc, #8]	; (800dacc <USBD_FS_ProductStrDescriptor+0x34>)
}
 800dac2:	4618      	mov	r0, r3
 800dac4:	3708      	adds	r7, #8
 800dac6:	46bd      	mov	sp, r7
 800dac8:	bd80      	pop	{r7, pc}
 800daca:	bf00      	nop
 800dacc:	2000458c 	.word	0x2000458c
 800dad0:	08012680 	.word	0x08012680

0800dad4 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800dad4:	b580      	push	{r7, lr}
 800dad6:	b082      	sub	sp, #8
 800dad8:	af00      	add	r7, sp, #0
 800dada:	4603      	mov	r3, r0
 800dadc:	6039      	str	r1, [r7, #0]
 800dade:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800dae0:	683a      	ldr	r2, [r7, #0]
 800dae2:	4904      	ldr	r1, [pc, #16]	; (800daf4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800dae4:	4804      	ldr	r0, [pc, #16]	; (800daf8 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800dae6:	f7ff fd5d 	bl	800d5a4 <USBD_GetString>
  return USBD_StrDesc;
 800daea:	4b02      	ldr	r3, [pc, #8]	; (800daf4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800daec:	4618      	mov	r0, r3
 800daee:	3708      	adds	r7, #8
 800daf0:	46bd      	mov	sp, r7
 800daf2:	bd80      	pop	{r7, pc}
 800daf4:	2000458c 	.word	0x2000458c
 800daf8:	0801268c 	.word	0x0801268c

0800dafc <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800dafc:	b580      	push	{r7, lr}
 800dafe:	b082      	sub	sp, #8
 800db00:	af00      	add	r7, sp, #0
 800db02:	4603      	mov	r3, r0
 800db04:	6039      	str	r1, [r7, #0]
 800db06:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800db08:	683b      	ldr	r3, [r7, #0]
 800db0a:	221a      	movs	r2, #26
 800db0c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800db0e:	f000 f843 	bl	800db98 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */
  
  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800db12:	4b02      	ldr	r3, [pc, #8]	; (800db1c <USBD_FS_SerialStrDescriptor+0x20>)
}
 800db14:	4618      	mov	r0, r3
 800db16:	3708      	adds	r7, #8
 800db18:	46bd      	mov	sp, r7
 800db1a:	bd80      	pop	{r7, pc}
 800db1c:	20000160 	.word	0x20000160

0800db20 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800db20:	b580      	push	{r7, lr}
 800db22:	b082      	sub	sp, #8
 800db24:	af00      	add	r7, sp, #0
 800db26:	4603      	mov	r3, r0
 800db28:	6039      	str	r1, [r7, #0]
 800db2a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800db2c:	79fb      	ldrb	r3, [r7, #7]
 800db2e:	2b00      	cmp	r3, #0
 800db30:	d105      	bne.n	800db3e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800db32:	683a      	ldr	r2, [r7, #0]
 800db34:	4907      	ldr	r1, [pc, #28]	; (800db54 <USBD_FS_ConfigStrDescriptor+0x34>)
 800db36:	4808      	ldr	r0, [pc, #32]	; (800db58 <USBD_FS_ConfigStrDescriptor+0x38>)
 800db38:	f7ff fd34 	bl	800d5a4 <USBD_GetString>
 800db3c:	e004      	b.n	800db48 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800db3e:	683a      	ldr	r2, [r7, #0]
 800db40:	4904      	ldr	r1, [pc, #16]	; (800db54 <USBD_FS_ConfigStrDescriptor+0x34>)
 800db42:	4805      	ldr	r0, [pc, #20]	; (800db58 <USBD_FS_ConfigStrDescriptor+0x38>)
 800db44:	f7ff fd2e 	bl	800d5a4 <USBD_GetString>
  }
  return USBD_StrDesc;
 800db48:	4b02      	ldr	r3, [pc, #8]	; (800db54 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800db4a:	4618      	mov	r0, r3
 800db4c:	3708      	adds	r7, #8
 800db4e:	46bd      	mov	sp, r7
 800db50:	bd80      	pop	{r7, pc}
 800db52:	bf00      	nop
 800db54:	2000458c 	.word	0x2000458c
 800db58:	080126a0 	.word	0x080126a0

0800db5c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800db5c:	b580      	push	{r7, lr}
 800db5e:	b082      	sub	sp, #8
 800db60:	af00      	add	r7, sp, #0
 800db62:	4603      	mov	r3, r0
 800db64:	6039      	str	r1, [r7, #0]
 800db66:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800db68:	79fb      	ldrb	r3, [r7, #7]
 800db6a:	2b00      	cmp	r3, #0
 800db6c:	d105      	bne.n	800db7a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800db6e:	683a      	ldr	r2, [r7, #0]
 800db70:	4907      	ldr	r1, [pc, #28]	; (800db90 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800db72:	4808      	ldr	r0, [pc, #32]	; (800db94 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800db74:	f7ff fd16 	bl	800d5a4 <USBD_GetString>
 800db78:	e004      	b.n	800db84 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800db7a:	683a      	ldr	r2, [r7, #0]
 800db7c:	4904      	ldr	r1, [pc, #16]	; (800db90 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800db7e:	4805      	ldr	r0, [pc, #20]	; (800db94 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800db80:	f7ff fd10 	bl	800d5a4 <USBD_GetString>
  }
  return USBD_StrDesc;
 800db84:	4b02      	ldr	r3, [pc, #8]	; (800db90 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800db86:	4618      	mov	r0, r3
 800db88:	3708      	adds	r7, #8
 800db8a:	46bd      	mov	sp, r7
 800db8c:	bd80      	pop	{r7, pc}
 800db8e:	bf00      	nop
 800db90:	2000458c 	.word	0x2000458c
 800db94:	080126ac 	.word	0x080126ac

0800db98 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor 
  * @param  None 
  * @retval None
  */
static void Get_SerialNum(void)
{
 800db98:	b580      	push	{r7, lr}
 800db9a:	b084      	sub	sp, #16
 800db9c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800db9e:	4b0f      	ldr	r3, [pc, #60]	; (800dbdc <Get_SerialNum+0x44>)
 800dba0:	681b      	ldr	r3, [r3, #0]
 800dba2:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800dba4:	4b0e      	ldr	r3, [pc, #56]	; (800dbe0 <Get_SerialNum+0x48>)
 800dba6:	681b      	ldr	r3, [r3, #0]
 800dba8:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800dbaa:	4b0e      	ldr	r3, [pc, #56]	; (800dbe4 <Get_SerialNum+0x4c>)
 800dbac:	681b      	ldr	r3, [r3, #0]
 800dbae:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800dbb0:	68fa      	ldr	r2, [r7, #12]
 800dbb2:	687b      	ldr	r3, [r7, #4]
 800dbb4:	4413      	add	r3, r2
 800dbb6:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800dbb8:	68fb      	ldr	r3, [r7, #12]
 800dbba:	2b00      	cmp	r3, #0
 800dbbc:	d009      	beq.n	800dbd2 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800dbbe:	2208      	movs	r2, #8
 800dbc0:	4909      	ldr	r1, [pc, #36]	; (800dbe8 <Get_SerialNum+0x50>)
 800dbc2:	68f8      	ldr	r0, [r7, #12]
 800dbc4:	f000 f814 	bl	800dbf0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800dbc8:	2204      	movs	r2, #4
 800dbca:	4908      	ldr	r1, [pc, #32]	; (800dbec <Get_SerialNum+0x54>)
 800dbcc:	68b8      	ldr	r0, [r7, #8]
 800dbce:	f000 f80f 	bl	800dbf0 <IntToUnicode>
  }
}
 800dbd2:	bf00      	nop
 800dbd4:	3710      	adds	r7, #16
 800dbd6:	46bd      	mov	sp, r7
 800dbd8:	bd80      	pop	{r7, pc}
 800dbda:	bf00      	nop
 800dbdc:	1fff7a10 	.word	0x1fff7a10
 800dbe0:	1fff7a14 	.word	0x1fff7a14
 800dbe4:	1fff7a18 	.word	0x1fff7a18
 800dbe8:	20000162 	.word	0x20000162
 800dbec:	20000172 	.word	0x20000172

0800dbf0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer 
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800dbf0:	b480      	push	{r7}
 800dbf2:	b087      	sub	sp, #28
 800dbf4:	af00      	add	r7, sp, #0
 800dbf6:	60f8      	str	r0, [r7, #12]
 800dbf8:	60b9      	str	r1, [r7, #8]
 800dbfa:	4613      	mov	r3, r2
 800dbfc:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800dbfe:	2300      	movs	r3, #0
 800dc00:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800dc02:	2300      	movs	r3, #0
 800dc04:	75fb      	strb	r3, [r7, #23]
 800dc06:	e027      	b.n	800dc58 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800dc08:	68fb      	ldr	r3, [r7, #12]
 800dc0a:	0f1b      	lsrs	r3, r3, #28
 800dc0c:	2b09      	cmp	r3, #9
 800dc0e:	d80b      	bhi.n	800dc28 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800dc10:	68fb      	ldr	r3, [r7, #12]
 800dc12:	0f1b      	lsrs	r3, r3, #28
 800dc14:	b2da      	uxtb	r2, r3
 800dc16:	7dfb      	ldrb	r3, [r7, #23]
 800dc18:	005b      	lsls	r3, r3, #1
 800dc1a:	4619      	mov	r1, r3
 800dc1c:	68bb      	ldr	r3, [r7, #8]
 800dc1e:	440b      	add	r3, r1
 800dc20:	3230      	adds	r2, #48	; 0x30
 800dc22:	b2d2      	uxtb	r2, r2
 800dc24:	701a      	strb	r2, [r3, #0]
 800dc26:	e00a      	b.n	800dc3e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800dc28:	68fb      	ldr	r3, [r7, #12]
 800dc2a:	0f1b      	lsrs	r3, r3, #28
 800dc2c:	b2da      	uxtb	r2, r3
 800dc2e:	7dfb      	ldrb	r3, [r7, #23]
 800dc30:	005b      	lsls	r3, r3, #1
 800dc32:	4619      	mov	r1, r3
 800dc34:	68bb      	ldr	r3, [r7, #8]
 800dc36:	440b      	add	r3, r1
 800dc38:	3237      	adds	r2, #55	; 0x37
 800dc3a:	b2d2      	uxtb	r2, r2
 800dc3c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800dc3e:	68fb      	ldr	r3, [r7, #12]
 800dc40:	011b      	lsls	r3, r3, #4
 800dc42:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800dc44:	7dfb      	ldrb	r3, [r7, #23]
 800dc46:	005b      	lsls	r3, r3, #1
 800dc48:	3301      	adds	r3, #1
 800dc4a:	68ba      	ldr	r2, [r7, #8]
 800dc4c:	4413      	add	r3, r2
 800dc4e:	2200      	movs	r2, #0
 800dc50:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800dc52:	7dfb      	ldrb	r3, [r7, #23]
 800dc54:	3301      	adds	r3, #1
 800dc56:	75fb      	strb	r3, [r7, #23]
 800dc58:	7dfa      	ldrb	r2, [r7, #23]
 800dc5a:	79fb      	ldrb	r3, [r7, #7]
 800dc5c:	429a      	cmp	r2, r3
 800dc5e:	d3d3      	bcc.n	800dc08 <IntToUnicode+0x18>
  }
}
 800dc60:	bf00      	nop
 800dc62:	371c      	adds	r7, #28
 800dc64:	46bd      	mov	sp, r7
 800dc66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc6a:	4770      	bx	lr

0800dc6c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800dc6c:	b580      	push	{r7, lr}
 800dc6e:	b08a      	sub	sp, #40	; 0x28
 800dc70:	af00      	add	r7, sp, #0
 800dc72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800dc74:	f107 0314 	add.w	r3, r7, #20
 800dc78:	2200      	movs	r2, #0
 800dc7a:	601a      	str	r2, [r3, #0]
 800dc7c:	605a      	str	r2, [r3, #4]
 800dc7e:	609a      	str	r2, [r3, #8]
 800dc80:	60da      	str	r2, [r3, #12]
 800dc82:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800dc84:	687b      	ldr	r3, [r7, #4]
 800dc86:	681b      	ldr	r3, [r3, #0]
 800dc88:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800dc8c:	d13a      	bne.n	800dd04 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800dc8e:	2300      	movs	r3, #0
 800dc90:	613b      	str	r3, [r7, #16]
 800dc92:	4b1e      	ldr	r3, [pc, #120]	; (800dd0c <HAL_PCD_MspInit+0xa0>)
 800dc94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dc96:	4a1d      	ldr	r2, [pc, #116]	; (800dd0c <HAL_PCD_MspInit+0xa0>)
 800dc98:	f043 0301 	orr.w	r3, r3, #1
 800dc9c:	6313      	str	r3, [r2, #48]	; 0x30
 800dc9e:	4b1b      	ldr	r3, [pc, #108]	; (800dd0c <HAL_PCD_MspInit+0xa0>)
 800dca0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dca2:	f003 0301 	and.w	r3, r3, #1
 800dca6:	613b      	str	r3, [r7, #16]
 800dca8:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration    
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800dcaa:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800dcae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800dcb0:	2302      	movs	r3, #2
 800dcb2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800dcb4:	2300      	movs	r3, #0
 800dcb6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800dcb8:	2303      	movs	r3, #3
 800dcba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800dcbc:	230a      	movs	r3, #10
 800dcbe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800dcc0:	f107 0314 	add.w	r3, r7, #20
 800dcc4:	4619      	mov	r1, r3
 800dcc6:	4812      	ldr	r0, [pc, #72]	; (800dd10 <HAL_PCD_MspInit+0xa4>)
 800dcc8:	f7f6 fc66 	bl	8004598 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800dccc:	4b0f      	ldr	r3, [pc, #60]	; (800dd0c <HAL_PCD_MspInit+0xa0>)
 800dcce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dcd0:	4a0e      	ldr	r2, [pc, #56]	; (800dd0c <HAL_PCD_MspInit+0xa0>)
 800dcd2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800dcd6:	6353      	str	r3, [r2, #52]	; 0x34
 800dcd8:	2300      	movs	r3, #0
 800dcda:	60fb      	str	r3, [r7, #12]
 800dcdc:	4b0b      	ldr	r3, [pc, #44]	; (800dd0c <HAL_PCD_MspInit+0xa0>)
 800dcde:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800dce0:	4a0a      	ldr	r2, [pc, #40]	; (800dd0c <HAL_PCD_MspInit+0xa0>)
 800dce2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800dce6:	6453      	str	r3, [r2, #68]	; 0x44
 800dce8:	4b08      	ldr	r3, [pc, #32]	; (800dd0c <HAL_PCD_MspInit+0xa0>)
 800dcea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800dcec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800dcf0:	60fb      	str	r3, [r7, #12]
 800dcf2:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800dcf4:	2200      	movs	r2, #0
 800dcf6:	2100      	movs	r1, #0
 800dcf8:	2043      	movs	r0, #67	; 0x43
 800dcfa:	f7f6 f87a 	bl	8003df2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800dcfe:	2043      	movs	r0, #67	; 0x43
 800dd00:	f7f6 f893 	bl	8003e2a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800dd04:	bf00      	nop
 800dd06:	3728      	adds	r7, #40	; 0x28
 800dd08:	46bd      	mov	sp, r7
 800dd0a:	bd80      	pop	{r7, pc}
 800dd0c:	40023800 	.word	0x40023800
 800dd10:	40020000 	.word	0x40020000

0800dd14 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800dd14:	b580      	push	{r7, lr}
 800dd16:	b082      	sub	sp, #8
 800dd18:	af00      	add	r7, sp, #0
 800dd1a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800dd1c:	687b      	ldr	r3, [r7, #4]
 800dd1e:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 800dd22:	687b      	ldr	r3, [r7, #4]
 800dd24:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800dd28:	4619      	mov	r1, r3
 800dd2a:	4610      	mov	r0, r2
 800dd2c:	f7fe fd4c 	bl	800c7c8 <USBD_LL_SetupStage>
}
 800dd30:	bf00      	nop
 800dd32:	3708      	adds	r7, #8
 800dd34:	46bd      	mov	sp, r7
 800dd36:	bd80      	pop	{r7, pc}

0800dd38 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800dd38:	b580      	push	{r7, lr}
 800dd3a:	b082      	sub	sp, #8
 800dd3c:	af00      	add	r7, sp, #0
 800dd3e:	6078      	str	r0, [r7, #4]
 800dd40:	460b      	mov	r3, r1
 800dd42:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800dd44:	687b      	ldr	r3, [r7, #4]
 800dd46:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800dd4a:	78fa      	ldrb	r2, [r7, #3]
 800dd4c:	6879      	ldr	r1, [r7, #4]
 800dd4e:	4613      	mov	r3, r2
 800dd50:	00db      	lsls	r3, r3, #3
 800dd52:	1a9b      	subs	r3, r3, r2
 800dd54:	009b      	lsls	r3, r3, #2
 800dd56:	440b      	add	r3, r1
 800dd58:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800dd5c:	681a      	ldr	r2, [r3, #0]
 800dd5e:	78fb      	ldrb	r3, [r7, #3]
 800dd60:	4619      	mov	r1, r3
 800dd62:	f7fe fd7c 	bl	800c85e <USBD_LL_DataOutStage>
}
 800dd66:	bf00      	nop
 800dd68:	3708      	adds	r7, #8
 800dd6a:	46bd      	mov	sp, r7
 800dd6c:	bd80      	pop	{r7, pc}

0800dd6e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800dd6e:	b580      	push	{r7, lr}
 800dd70:	b082      	sub	sp, #8
 800dd72:	af00      	add	r7, sp, #0
 800dd74:	6078      	str	r0, [r7, #4]
 800dd76:	460b      	mov	r3, r1
 800dd78:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800dd7a:	687b      	ldr	r3, [r7, #4]
 800dd7c:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800dd80:	78fa      	ldrb	r2, [r7, #3]
 800dd82:	6879      	ldr	r1, [r7, #4]
 800dd84:	4613      	mov	r3, r2
 800dd86:	00db      	lsls	r3, r3, #3
 800dd88:	1a9b      	subs	r3, r3, r2
 800dd8a:	009b      	lsls	r3, r3, #2
 800dd8c:	440b      	add	r3, r1
 800dd8e:	3348      	adds	r3, #72	; 0x48
 800dd90:	681a      	ldr	r2, [r3, #0]
 800dd92:	78fb      	ldrb	r3, [r7, #3]
 800dd94:	4619      	mov	r1, r3
 800dd96:	f7fe fdd3 	bl	800c940 <USBD_LL_DataInStage>
}
 800dd9a:	bf00      	nop
 800dd9c:	3708      	adds	r7, #8
 800dd9e:	46bd      	mov	sp, r7
 800dda0:	bd80      	pop	{r7, pc}

0800dda2 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800dda2:	b580      	push	{r7, lr}
 800dda4:	b082      	sub	sp, #8
 800dda6:	af00      	add	r7, sp, #0
 800dda8:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800ddaa:	687b      	ldr	r3, [r7, #4]
 800ddac:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800ddb0:	4618      	mov	r0, r3
 800ddb2:	f7fe fee1 	bl	800cb78 <USBD_LL_SOF>
}
 800ddb6:	bf00      	nop
 800ddb8:	3708      	adds	r7, #8
 800ddba:	46bd      	mov	sp, r7
 800ddbc:	bd80      	pop	{r7, pc}

0800ddbe <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{ 
 800ddbe:	b580      	push	{r7, lr}
 800ddc0:	b084      	sub	sp, #16
 800ddc2:	af00      	add	r7, sp, #0
 800ddc4:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800ddc6:	2301      	movs	r3, #1
 800ddc8:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800ddca:	687b      	ldr	r3, [r7, #4]
 800ddcc:	68db      	ldr	r3, [r3, #12]
 800ddce:	2b00      	cmp	r3, #0
 800ddd0:	d102      	bne.n	800ddd8 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800ddd2:	2300      	movs	r3, #0
 800ddd4:	73fb      	strb	r3, [r7, #15]
 800ddd6:	e008      	b.n	800ddea <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800ddd8:	687b      	ldr	r3, [r7, #4]
 800ddda:	68db      	ldr	r3, [r3, #12]
 800dddc:	2b02      	cmp	r3, #2
 800ddde:	d102      	bne.n	800dde6 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800dde0:	2301      	movs	r3, #1
 800dde2:	73fb      	strb	r3, [r7, #15]
 800dde4:	e001      	b.n	800ddea <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800dde6:	f7f5 fa75 	bl	80032d4 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800ddea:	687b      	ldr	r3, [r7, #4]
 800ddec:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800ddf0:	7bfa      	ldrb	r2, [r7, #15]
 800ddf2:	4611      	mov	r1, r2
 800ddf4:	4618      	mov	r0, r3
 800ddf6:	f7fe fe89 	bl	800cb0c <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800ddfa:	687b      	ldr	r3, [r7, #4]
 800ddfc:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800de00:	4618      	mov	r0, r3
 800de02:	f7fe fe42 	bl	800ca8a <USBD_LL_Reset>
}
 800de06:	bf00      	nop
 800de08:	3710      	adds	r7, #16
 800de0a:	46bd      	mov	sp, r7
 800de0c:	bd80      	pop	{r7, pc}
	...

0800de10 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800de10:	b580      	push	{r7, lr}
 800de12:	b082      	sub	sp, #8
 800de14:	af00      	add	r7, sp, #0
 800de16:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800de18:	687b      	ldr	r3, [r7, #4]
 800de1a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800de1e:	4618      	mov	r0, r3
 800de20:	f7fe fe84 	bl	800cb2c <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800de24:	687b      	ldr	r3, [r7, #4]
 800de26:	681b      	ldr	r3, [r3, #0]
 800de28:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800de2c:	681b      	ldr	r3, [r3, #0]
 800de2e:	687a      	ldr	r2, [r7, #4]
 800de30:	6812      	ldr	r2, [r2, #0]
 800de32:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800de36:	f043 0301 	orr.w	r3, r3, #1
 800de3a:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800de3c:	687b      	ldr	r3, [r7, #4]
 800de3e:	6a1b      	ldr	r3, [r3, #32]
 800de40:	2b00      	cmp	r3, #0
 800de42:	d005      	beq.n	800de50 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800de44:	4b04      	ldr	r3, [pc, #16]	; (800de58 <HAL_PCD_SuspendCallback+0x48>)
 800de46:	691b      	ldr	r3, [r3, #16]
 800de48:	4a03      	ldr	r2, [pc, #12]	; (800de58 <HAL_PCD_SuspendCallback+0x48>)
 800de4a:	f043 0306 	orr.w	r3, r3, #6
 800de4e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800de50:	bf00      	nop
 800de52:	3708      	adds	r7, #8
 800de54:	46bd      	mov	sp, r7
 800de56:	bd80      	pop	{r7, pc}
 800de58:	e000ed00 	.word	0xe000ed00

0800de5c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800de5c:	b580      	push	{r7, lr}
 800de5e:	b082      	sub	sp, #8
 800de60:	af00      	add	r7, sp, #0
 800de62:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800de64:	687b      	ldr	r3, [r7, #4]
 800de66:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800de6a:	4618      	mov	r0, r3
 800de6c:	f7fe fe73 	bl	800cb56 <USBD_LL_Resume>
}
 800de70:	bf00      	nop
 800de72:	3708      	adds	r7, #8
 800de74:	46bd      	mov	sp, r7
 800de76:	bd80      	pop	{r7, pc}

0800de78 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800de78:	b580      	push	{r7, lr}
 800de7a:	b082      	sub	sp, #8
 800de7c:	af00      	add	r7, sp, #0
 800de7e:	6078      	str	r0, [r7, #4]
 800de80:	460b      	mov	r3, r1
 800de82:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800de84:	687b      	ldr	r3, [r7, #4]
 800de86:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800de8a:	78fa      	ldrb	r2, [r7, #3]
 800de8c:	4611      	mov	r1, r2
 800de8e:	4618      	mov	r0, r3
 800de90:	f7fe fe99 	bl	800cbc6 <USBD_LL_IsoOUTIncomplete>
}
 800de94:	bf00      	nop
 800de96:	3708      	adds	r7, #8
 800de98:	46bd      	mov	sp, r7
 800de9a:	bd80      	pop	{r7, pc}

0800de9c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800de9c:	b580      	push	{r7, lr}
 800de9e:	b082      	sub	sp, #8
 800dea0:	af00      	add	r7, sp, #0
 800dea2:	6078      	str	r0, [r7, #4]
 800dea4:	460b      	mov	r3, r1
 800dea6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800dea8:	687b      	ldr	r3, [r7, #4]
 800deaa:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800deae:	78fa      	ldrb	r2, [r7, #3]
 800deb0:	4611      	mov	r1, r2
 800deb2:	4618      	mov	r0, r3
 800deb4:	f7fe fe7a 	bl	800cbac <USBD_LL_IsoINIncomplete>
}
 800deb8:	bf00      	nop
 800deba:	3708      	adds	r7, #8
 800debc:	46bd      	mov	sp, r7
 800debe:	bd80      	pop	{r7, pc}

0800dec0 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800dec0:	b580      	push	{r7, lr}
 800dec2:	b082      	sub	sp, #8
 800dec4:	af00      	add	r7, sp, #0
 800dec6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800dec8:	687b      	ldr	r3, [r7, #4]
 800deca:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800dece:	4618      	mov	r0, r3
 800ded0:	f7fe fe86 	bl	800cbe0 <USBD_LL_DevConnected>
}
 800ded4:	bf00      	nop
 800ded6:	3708      	adds	r7, #8
 800ded8:	46bd      	mov	sp, r7
 800deda:	bd80      	pop	{r7, pc}

0800dedc <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800dedc:	b580      	push	{r7, lr}
 800dede:	b082      	sub	sp, #8
 800dee0:	af00      	add	r7, sp, #0
 800dee2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800dee4:	687b      	ldr	r3, [r7, #4]
 800dee6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800deea:	4618      	mov	r0, r3
 800deec:	f7fe fe83 	bl	800cbf6 <USBD_LL_DevDisconnected>
}
 800def0:	bf00      	nop
 800def2:	3708      	adds	r7, #8
 800def4:	46bd      	mov	sp, r7
 800def6:	bd80      	pop	{r7, pc}

0800def8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800def8:	b580      	push	{r7, lr}
 800defa:	b082      	sub	sp, #8
 800defc:	af00      	add	r7, sp, #0
 800defe:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800df00:	687b      	ldr	r3, [r7, #4]
 800df02:	781b      	ldrb	r3, [r3, #0]
 800df04:	2b00      	cmp	r3, #0
 800df06:	d13c      	bne.n	800df82 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800df08:	4a20      	ldr	r2, [pc, #128]	; (800df8c <USBD_LL_Init+0x94>)
 800df0a:	687b      	ldr	r3, [r7, #4]
 800df0c:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 800df10:	687b      	ldr	r3, [r7, #4]
 800df12:	4a1e      	ldr	r2, [pc, #120]	; (800df8c <USBD_LL_Init+0x94>)
 800df14:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298
  
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800df18:	4b1c      	ldr	r3, [pc, #112]	; (800df8c <USBD_LL_Init+0x94>)
 800df1a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800df1e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800df20:	4b1a      	ldr	r3, [pc, #104]	; (800df8c <USBD_LL_Init+0x94>)
 800df22:	2204      	movs	r2, #4
 800df24:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800df26:	4b19      	ldr	r3, [pc, #100]	; (800df8c <USBD_LL_Init+0x94>)
 800df28:	2202      	movs	r2, #2
 800df2a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800df2c:	4b17      	ldr	r3, [pc, #92]	; (800df8c <USBD_LL_Init+0x94>)
 800df2e:	2200      	movs	r2, #0
 800df30:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800df32:	4b16      	ldr	r3, [pc, #88]	; (800df8c <USBD_LL_Init+0x94>)
 800df34:	2202      	movs	r2, #2
 800df36:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800df38:	4b14      	ldr	r3, [pc, #80]	; (800df8c <USBD_LL_Init+0x94>)
 800df3a:	2200      	movs	r2, #0
 800df3c:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800df3e:	4b13      	ldr	r3, [pc, #76]	; (800df8c <USBD_LL_Init+0x94>)
 800df40:	2200      	movs	r2, #0
 800df42:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800df44:	4b11      	ldr	r3, [pc, #68]	; (800df8c <USBD_LL_Init+0x94>)
 800df46:	2200      	movs	r2, #0
 800df48:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800df4a:	4b10      	ldr	r3, [pc, #64]	; (800df8c <USBD_LL_Init+0x94>)
 800df4c:	2200      	movs	r2, #0
 800df4e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800df50:	4b0e      	ldr	r3, [pc, #56]	; (800df8c <USBD_LL_Init+0x94>)
 800df52:	2200      	movs	r2, #0
 800df54:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800df56:	480d      	ldr	r0, [pc, #52]	; (800df8c <USBD_LL_Init+0x94>)
 800df58:	f7f6 fe46 	bl	8004be8 <HAL_PCD_Init>
 800df5c:	4603      	mov	r3, r0
 800df5e:	2b00      	cmp	r3, #0
 800df60:	d001      	beq.n	800df66 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800df62:	f7f5 f9b7 	bl	80032d4 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800df66:	2180      	movs	r1, #128	; 0x80
 800df68:	4808      	ldr	r0, [pc, #32]	; (800df8c <USBD_LL_Init+0x94>)
 800df6a:	f7f7 ffaa 	bl	8005ec2 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800df6e:	2240      	movs	r2, #64	; 0x40
 800df70:	2100      	movs	r1, #0
 800df72:	4806      	ldr	r0, [pc, #24]	; (800df8c <USBD_LL_Init+0x94>)
 800df74:	f7f7 ff5e 	bl	8005e34 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800df78:	2280      	movs	r2, #128	; 0x80
 800df7a:	2101      	movs	r1, #1
 800df7c:	4803      	ldr	r0, [pc, #12]	; (800df8c <USBD_LL_Init+0x94>)
 800df7e:	f7f7 ff59 	bl	8005e34 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800df82:	2300      	movs	r3, #0
}
 800df84:	4618      	mov	r0, r3
 800df86:	3708      	adds	r7, #8
 800df88:	46bd      	mov	sp, r7
 800df8a:	bd80      	pop	{r7, pc}
 800df8c:	2000478c 	.word	0x2000478c

0800df90 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver. 
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800df90:	b580      	push	{r7, lr}
 800df92:	b084      	sub	sp, #16
 800df94:	af00      	add	r7, sp, #0
 800df96:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800df98:	2300      	movs	r3, #0
 800df9a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800df9c:	2300      	movs	r3, #0
 800df9e:	73bb      	strb	r3, [r7, #14]
 
  hal_status = HAL_PCD_Start(pdev->pData);
 800dfa0:	687b      	ldr	r3, [r7, #4]
 800dfa2:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800dfa6:	4618      	mov	r0, r3
 800dfa8:	f7f6 ff3b 	bl	8004e22 <HAL_PCD_Start>
 800dfac:	4603      	mov	r3, r0
 800dfae:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);     
 800dfb0:	7bfb      	ldrb	r3, [r7, #15]
 800dfb2:	4618      	mov	r0, r3
 800dfb4:	f000 f92e 	bl	800e214 <USBD_Get_USB_Status>
 800dfb8:	4603      	mov	r3, r0
 800dfba:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 800dfbc:	7bbb      	ldrb	r3, [r7, #14]
}
 800dfbe:	4618      	mov	r0, r3
 800dfc0:	3710      	adds	r7, #16
 800dfc2:	46bd      	mov	sp, r7
 800dfc4:	bd80      	pop	{r7, pc}

0800dfc6 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800dfc6:	b580      	push	{r7, lr}
 800dfc8:	b084      	sub	sp, #16
 800dfca:	af00      	add	r7, sp, #0
 800dfcc:	6078      	str	r0, [r7, #4]
 800dfce:	4608      	mov	r0, r1
 800dfd0:	4611      	mov	r1, r2
 800dfd2:	461a      	mov	r2, r3
 800dfd4:	4603      	mov	r3, r0
 800dfd6:	70fb      	strb	r3, [r7, #3]
 800dfd8:	460b      	mov	r3, r1
 800dfda:	70bb      	strb	r3, [r7, #2]
 800dfdc:	4613      	mov	r3, r2
 800dfde:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800dfe0:	2300      	movs	r3, #0
 800dfe2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800dfe4:	2300      	movs	r3, #0
 800dfe6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800dfe8:	687b      	ldr	r3, [r7, #4]
 800dfea:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 800dfee:	78bb      	ldrb	r3, [r7, #2]
 800dff0:	883a      	ldrh	r2, [r7, #0]
 800dff2:	78f9      	ldrb	r1, [r7, #3]
 800dff4:	f7f7 fb10 	bl	8005618 <HAL_PCD_EP_Open>
 800dff8:	4603      	mov	r3, r0
 800dffa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800dffc:	7bfb      	ldrb	r3, [r7, #15]
 800dffe:	4618      	mov	r0, r3
 800e000:	f000 f908 	bl	800e214 <USBD_Get_USB_Status>
 800e004:	4603      	mov	r3, r0
 800e006:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 800e008:	7bbb      	ldrb	r3, [r7, #14]
}
 800e00a:	4618      	mov	r0, r3
 800e00c:	3710      	adds	r7, #16
 800e00e:	46bd      	mov	sp, r7
 800e010:	bd80      	pop	{r7, pc}

0800e012 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e012:	b580      	push	{r7, lr}
 800e014:	b084      	sub	sp, #16
 800e016:	af00      	add	r7, sp, #0
 800e018:	6078      	str	r0, [r7, #4]
 800e01a:	460b      	mov	r3, r1
 800e01c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e01e:	2300      	movs	r3, #0
 800e020:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e022:	2300      	movs	r3, #0
 800e024:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800e026:	687b      	ldr	r3, [r7, #4]
 800e028:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800e02c:	78fa      	ldrb	r2, [r7, #3]
 800e02e:	4611      	mov	r1, r2
 800e030:	4618      	mov	r0, r3
 800e032:	f7f7 fb59 	bl	80056e8 <HAL_PCD_EP_Close>
 800e036:	4603      	mov	r3, r0
 800e038:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);    
 800e03a:	7bfb      	ldrb	r3, [r7, #15]
 800e03c:	4618      	mov	r0, r3
 800e03e:	f000 f8e9 	bl	800e214 <USBD_Get_USB_Status>
 800e042:	4603      	mov	r3, r0
 800e044:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;  
 800e046:	7bbb      	ldrb	r3, [r7, #14]
}
 800e048:	4618      	mov	r0, r3
 800e04a:	3710      	adds	r7, #16
 800e04c:	46bd      	mov	sp, r7
 800e04e:	bd80      	pop	{r7, pc}

0800e050 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e050:	b580      	push	{r7, lr}
 800e052:	b084      	sub	sp, #16
 800e054:	af00      	add	r7, sp, #0
 800e056:	6078      	str	r0, [r7, #4]
 800e058:	460b      	mov	r3, r1
 800e05a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e05c:	2300      	movs	r3, #0
 800e05e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e060:	2300      	movs	r3, #0
 800e062:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800e064:	687b      	ldr	r3, [r7, #4]
 800e066:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800e06a:	78fa      	ldrb	r2, [r7, #3]
 800e06c:	4611      	mov	r1, r2
 800e06e:	4618      	mov	r0, r3
 800e070:	f7f7 fc31 	bl	80058d6 <HAL_PCD_EP_SetStall>
 800e074:	4603      	mov	r3, r0
 800e076:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e078:	7bfb      	ldrb	r3, [r7, #15]
 800e07a:	4618      	mov	r0, r3
 800e07c:	f000 f8ca 	bl	800e214 <USBD_Get_USB_Status>
 800e080:	4603      	mov	r3, r0
 800e082:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;  
 800e084:	7bbb      	ldrb	r3, [r7, #14]
}
 800e086:	4618      	mov	r0, r3
 800e088:	3710      	adds	r7, #16
 800e08a:	46bd      	mov	sp, r7
 800e08c:	bd80      	pop	{r7, pc}

0800e08e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e08e:	b580      	push	{r7, lr}
 800e090:	b084      	sub	sp, #16
 800e092:	af00      	add	r7, sp, #0
 800e094:	6078      	str	r0, [r7, #4]
 800e096:	460b      	mov	r3, r1
 800e098:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e09a:	2300      	movs	r3, #0
 800e09c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e09e:	2300      	movs	r3, #0
 800e0a0:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800e0a2:	687b      	ldr	r3, [r7, #4]
 800e0a4:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800e0a8:	78fa      	ldrb	r2, [r7, #3]
 800e0aa:	4611      	mov	r1, r2
 800e0ac:	4618      	mov	r0, r3
 800e0ae:	f7f7 fc76 	bl	800599e <HAL_PCD_EP_ClrStall>
 800e0b2:	4603      	mov	r3, r0
 800e0b4:	73fb      	strb	r3, [r7, #15]
    
  usb_status =  USBD_Get_USB_Status(hal_status);  
 800e0b6:	7bfb      	ldrb	r3, [r7, #15]
 800e0b8:	4618      	mov	r0, r3
 800e0ba:	f000 f8ab 	bl	800e214 <USBD_Get_USB_Status>
 800e0be:	4603      	mov	r3, r0
 800e0c0:	73bb      	strb	r3, [r7, #14]
  
  return usb_status; 
 800e0c2:	7bbb      	ldrb	r3, [r7, #14]
}
 800e0c4:	4618      	mov	r0, r3
 800e0c6:	3710      	adds	r7, #16
 800e0c8:	46bd      	mov	sp, r7
 800e0ca:	bd80      	pop	{r7, pc}

0800e0cc <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e0cc:	b480      	push	{r7}
 800e0ce:	b085      	sub	sp, #20
 800e0d0:	af00      	add	r7, sp, #0
 800e0d2:	6078      	str	r0, [r7, #4]
 800e0d4:	460b      	mov	r3, r1
 800e0d6:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800e0d8:	687b      	ldr	r3, [r7, #4]
 800e0da:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800e0de:	60fb      	str	r3, [r7, #12]
  
  if((ep_addr & 0x80) == 0x80)
 800e0e0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800e0e4:	2b00      	cmp	r3, #0
 800e0e6:	da0b      	bge.n	800e100 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 800e0e8:	78fb      	ldrb	r3, [r7, #3]
 800e0ea:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800e0ee:	68f9      	ldr	r1, [r7, #12]
 800e0f0:	4613      	mov	r3, r2
 800e0f2:	00db      	lsls	r3, r3, #3
 800e0f4:	1a9b      	subs	r3, r3, r2
 800e0f6:	009b      	lsls	r3, r3, #2
 800e0f8:	440b      	add	r3, r1
 800e0fa:	333e      	adds	r3, #62	; 0x3e
 800e0fc:	781b      	ldrb	r3, [r3, #0]
 800e0fe:	e00b      	b.n	800e118 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 800e100:	78fb      	ldrb	r3, [r7, #3]
 800e102:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800e106:	68f9      	ldr	r1, [r7, #12]
 800e108:	4613      	mov	r3, r2
 800e10a:	00db      	lsls	r3, r3, #3
 800e10c:	1a9b      	subs	r3, r3, r2
 800e10e:	009b      	lsls	r3, r3, #2
 800e110:	440b      	add	r3, r1
 800e112:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800e116:	781b      	ldrb	r3, [r3, #0]
  }
}
 800e118:	4618      	mov	r0, r3
 800e11a:	3714      	adds	r7, #20
 800e11c:	46bd      	mov	sp, r7
 800e11e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e122:	4770      	bx	lr

0800e124 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800e124:	b580      	push	{r7, lr}
 800e126:	b084      	sub	sp, #16
 800e128:	af00      	add	r7, sp, #0
 800e12a:	6078      	str	r0, [r7, #4]
 800e12c:	460b      	mov	r3, r1
 800e12e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e130:	2300      	movs	r3, #0
 800e132:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e134:	2300      	movs	r3, #0
 800e136:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800e138:	687b      	ldr	r3, [r7, #4]
 800e13a:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800e13e:	78fa      	ldrb	r2, [r7, #3]
 800e140:	4611      	mov	r1, r2
 800e142:	4618      	mov	r0, r3
 800e144:	f7f7 fa43 	bl	80055ce <HAL_PCD_SetAddress>
 800e148:	4603      	mov	r3, r0
 800e14a:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);
 800e14c:	7bfb      	ldrb	r3, [r7, #15]
 800e14e:	4618      	mov	r0, r3
 800e150:	f000 f860 	bl	800e214 <USBD_Get_USB_Status>
 800e154:	4603      	mov	r3, r0
 800e156:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;  
 800e158:	7bbb      	ldrb	r3, [r7, #14]
}
 800e15a:	4618      	mov	r0, r3
 800e15c:	3710      	adds	r7, #16
 800e15e:	46bd      	mov	sp, r7
 800e160:	bd80      	pop	{r7, pc}

0800e162 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800e162:	b580      	push	{r7, lr}
 800e164:	b086      	sub	sp, #24
 800e166:	af00      	add	r7, sp, #0
 800e168:	60f8      	str	r0, [r7, #12]
 800e16a:	607a      	str	r2, [r7, #4]
 800e16c:	461a      	mov	r2, r3
 800e16e:	460b      	mov	r3, r1
 800e170:	72fb      	strb	r3, [r7, #11]
 800e172:	4613      	mov	r3, r2
 800e174:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e176:	2300      	movs	r3, #0
 800e178:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e17a:	2300      	movs	r3, #0
 800e17c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800e17e:	68fb      	ldr	r3, [r7, #12]
 800e180:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 800e184:	893b      	ldrh	r3, [r7, #8]
 800e186:	7af9      	ldrb	r1, [r7, #11]
 800e188:	687a      	ldr	r2, [r7, #4]
 800e18a:	f7f7 fb5a 	bl	8005842 <HAL_PCD_EP_Transmit>
 800e18e:	4603      	mov	r3, r0
 800e190:	75fb      	strb	r3, [r7, #23]
  
  usb_status =  USBD_Get_USB_Status(hal_status); 
 800e192:	7dfb      	ldrb	r3, [r7, #23]
 800e194:	4618      	mov	r0, r3
 800e196:	f000 f83d 	bl	800e214 <USBD_Get_USB_Status>
 800e19a:	4603      	mov	r3, r0
 800e19c:	75bb      	strb	r3, [r7, #22]
  
  return usb_status;    
 800e19e:	7dbb      	ldrb	r3, [r7, #22]
}
 800e1a0:	4618      	mov	r0, r3
 800e1a2:	3718      	adds	r7, #24
 800e1a4:	46bd      	mov	sp, r7
 800e1a6:	bd80      	pop	{r7, pc}

0800e1a8 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800e1a8:	b580      	push	{r7, lr}
 800e1aa:	b086      	sub	sp, #24
 800e1ac:	af00      	add	r7, sp, #0
 800e1ae:	60f8      	str	r0, [r7, #12]
 800e1b0:	607a      	str	r2, [r7, #4]
 800e1b2:	461a      	mov	r2, r3
 800e1b4:	460b      	mov	r3, r1
 800e1b6:	72fb      	strb	r3, [r7, #11]
 800e1b8:	4613      	mov	r3, r2
 800e1ba:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e1bc:	2300      	movs	r3, #0
 800e1be:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e1c0:	2300      	movs	r3, #0
 800e1c2:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800e1c4:	68fb      	ldr	r3, [r7, #12]
 800e1c6:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 800e1ca:	893b      	ldrh	r3, [r7, #8]
 800e1cc:	7af9      	ldrb	r1, [r7, #11]
 800e1ce:	687a      	ldr	r2, [r7, #4]
 800e1d0:	f7f7 fad4 	bl	800577c <HAL_PCD_EP_Receive>
 800e1d4:	4603      	mov	r3, r0
 800e1d6:	75fb      	strb	r3, [r7, #23]
  
  usb_status =  USBD_Get_USB_Status(hal_status);   
 800e1d8:	7dfb      	ldrb	r3, [r7, #23]
 800e1da:	4618      	mov	r0, r3
 800e1dc:	f000 f81a 	bl	800e214 <USBD_Get_USB_Status>
 800e1e0:	4603      	mov	r3, r0
 800e1e2:	75bb      	strb	r3, [r7, #22]
  
  return usb_status; 
 800e1e4:	7dbb      	ldrb	r3, [r7, #22]
}
 800e1e6:	4618      	mov	r0, r3
 800e1e8:	3718      	adds	r7, #24
 800e1ea:	46bd      	mov	sp, r7
 800e1ec:	bd80      	pop	{r7, pc}

0800e1ee <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e1ee:	b580      	push	{r7, lr}
 800e1f0:	b082      	sub	sp, #8
 800e1f2:	af00      	add	r7, sp, #0
 800e1f4:	6078      	str	r0, [r7, #4]
 800e1f6:	460b      	mov	r3, r1
 800e1f8:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800e1fa:	687b      	ldr	r3, [r7, #4]
 800e1fc:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800e200:	78fa      	ldrb	r2, [r7, #3]
 800e202:	4611      	mov	r1, r2
 800e204:	4618      	mov	r0, r3
 800e206:	f7f7 fb04 	bl	8005812 <HAL_PCD_EP_GetRxCount>
 800e20a:	4603      	mov	r3, r0
}
 800e20c:	4618      	mov	r0, r3
 800e20e:	3708      	adds	r7, #8
 800e210:	46bd      	mov	sp, r7
 800e212:	bd80      	pop	{r7, pc}

0800e214 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800e214:	b480      	push	{r7}
 800e216:	b085      	sub	sp, #20
 800e218:	af00      	add	r7, sp, #0
 800e21a:	4603      	mov	r3, r0
 800e21c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e21e:	2300      	movs	r3, #0
 800e220:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800e222:	79fb      	ldrb	r3, [r7, #7]
 800e224:	2b03      	cmp	r3, #3
 800e226:	d817      	bhi.n	800e258 <USBD_Get_USB_Status+0x44>
 800e228:	a201      	add	r2, pc, #4	; (adr r2, 800e230 <USBD_Get_USB_Status+0x1c>)
 800e22a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e22e:	bf00      	nop
 800e230:	0800e241 	.word	0x0800e241
 800e234:	0800e247 	.word	0x0800e247
 800e238:	0800e24d 	.word	0x0800e24d
 800e23c:	0800e253 	.word	0x0800e253
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800e240:	2300      	movs	r3, #0
 800e242:	73fb      	strb	r3, [r7, #15]
    break;
 800e244:	e00b      	b.n	800e25e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800e246:	2302      	movs	r3, #2
 800e248:	73fb      	strb	r3, [r7, #15]
    break;
 800e24a:	e008      	b.n	800e25e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800e24c:	2301      	movs	r3, #1
 800e24e:	73fb      	strb	r3, [r7, #15]
    break;
 800e250:	e005      	b.n	800e25e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800e252:	2302      	movs	r3, #2
 800e254:	73fb      	strb	r3, [r7, #15]
    break;
 800e256:	e002      	b.n	800e25e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800e258:	2302      	movs	r3, #2
 800e25a:	73fb      	strb	r3, [r7, #15]
    break;
 800e25c:	bf00      	nop
  }
  return usb_status;
 800e25e:	7bfb      	ldrb	r3, [r7, #15]
}
 800e260:	4618      	mov	r0, r3
 800e262:	3714      	adds	r7, #20
 800e264:	46bd      	mov	sp, r7
 800e266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e26a:	4770      	bx	lr

0800e26c <atof>:
 800e26c:	2100      	movs	r1, #0
 800e26e:	f001 bdcb 	b.w	800fe08 <strtod>

0800e272 <atoi>:
 800e272:	220a      	movs	r2, #10
 800e274:	2100      	movs	r1, #0
 800e276:	f001 be69 	b.w	800ff4c <strtol>

0800e27a <atol>:
 800e27a:	220a      	movs	r2, #10
 800e27c:	2100      	movs	r1, #0
 800e27e:	f001 be65 	b.w	800ff4c <strtol>
	...

0800e284 <__libc_init_array>:
 800e284:	b570      	push	{r4, r5, r6, lr}
 800e286:	4e0d      	ldr	r6, [pc, #52]	; (800e2bc <__libc_init_array+0x38>)
 800e288:	4c0d      	ldr	r4, [pc, #52]	; (800e2c0 <__libc_init_array+0x3c>)
 800e28a:	1ba4      	subs	r4, r4, r6
 800e28c:	10a4      	asrs	r4, r4, #2
 800e28e:	2500      	movs	r5, #0
 800e290:	42a5      	cmp	r5, r4
 800e292:	d109      	bne.n	800e2a8 <__libc_init_array+0x24>
 800e294:	4e0b      	ldr	r6, [pc, #44]	; (800e2c4 <__libc_init_array+0x40>)
 800e296:	4c0c      	ldr	r4, [pc, #48]	; (800e2c8 <__libc_init_array+0x44>)
 800e298:	f003 fdc2 	bl	8011e20 <_init>
 800e29c:	1ba4      	subs	r4, r4, r6
 800e29e:	10a4      	asrs	r4, r4, #2
 800e2a0:	2500      	movs	r5, #0
 800e2a2:	42a5      	cmp	r5, r4
 800e2a4:	d105      	bne.n	800e2b2 <__libc_init_array+0x2e>
 800e2a6:	bd70      	pop	{r4, r5, r6, pc}
 800e2a8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800e2ac:	4798      	blx	r3
 800e2ae:	3501      	adds	r5, #1
 800e2b0:	e7ee      	b.n	800e290 <__libc_init_array+0xc>
 800e2b2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800e2b6:	4798      	blx	r3
 800e2b8:	3501      	adds	r5, #1
 800e2ba:	e7f2      	b.n	800e2a2 <__libc_init_array+0x1e>
 800e2bc:	080129b0 	.word	0x080129b0
 800e2c0:	080129b0 	.word	0x080129b0
 800e2c4:	080129b0 	.word	0x080129b0
 800e2c8:	080129b4 	.word	0x080129b4

0800e2cc <malloc>:
 800e2cc:	4b02      	ldr	r3, [pc, #8]	; (800e2d8 <malloc+0xc>)
 800e2ce:	4601      	mov	r1, r0
 800e2d0:	6818      	ldr	r0, [r3, #0]
 800e2d2:	f000 b86d 	b.w	800e3b0 <_malloc_r>
 800e2d6:	bf00      	nop
 800e2d8:	2000017c 	.word	0x2000017c

0800e2dc <free>:
 800e2dc:	4b02      	ldr	r3, [pc, #8]	; (800e2e8 <free+0xc>)
 800e2de:	4601      	mov	r1, r0
 800e2e0:	6818      	ldr	r0, [r3, #0]
 800e2e2:	f000 b817 	b.w	800e314 <_free_r>
 800e2e6:	bf00      	nop
 800e2e8:	2000017c 	.word	0x2000017c

0800e2ec <memcpy>:
 800e2ec:	b510      	push	{r4, lr}
 800e2ee:	1e43      	subs	r3, r0, #1
 800e2f0:	440a      	add	r2, r1
 800e2f2:	4291      	cmp	r1, r2
 800e2f4:	d100      	bne.n	800e2f8 <memcpy+0xc>
 800e2f6:	bd10      	pop	{r4, pc}
 800e2f8:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e2fc:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e300:	e7f7      	b.n	800e2f2 <memcpy+0x6>

0800e302 <memset>:
 800e302:	4402      	add	r2, r0
 800e304:	4603      	mov	r3, r0
 800e306:	4293      	cmp	r3, r2
 800e308:	d100      	bne.n	800e30c <memset+0xa>
 800e30a:	4770      	bx	lr
 800e30c:	f803 1b01 	strb.w	r1, [r3], #1
 800e310:	e7f9      	b.n	800e306 <memset+0x4>
	...

0800e314 <_free_r>:
 800e314:	b538      	push	{r3, r4, r5, lr}
 800e316:	4605      	mov	r5, r0
 800e318:	2900      	cmp	r1, #0
 800e31a:	d045      	beq.n	800e3a8 <_free_r+0x94>
 800e31c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e320:	1f0c      	subs	r4, r1, #4
 800e322:	2b00      	cmp	r3, #0
 800e324:	bfb8      	it	lt
 800e326:	18e4      	addlt	r4, r4, r3
 800e328:	f002 ffb6 	bl	8011298 <__malloc_lock>
 800e32c:	4a1f      	ldr	r2, [pc, #124]	; (800e3ac <_free_r+0x98>)
 800e32e:	6813      	ldr	r3, [r2, #0]
 800e330:	4610      	mov	r0, r2
 800e332:	b933      	cbnz	r3, 800e342 <_free_r+0x2e>
 800e334:	6063      	str	r3, [r4, #4]
 800e336:	6014      	str	r4, [r2, #0]
 800e338:	4628      	mov	r0, r5
 800e33a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e33e:	f002 bfac 	b.w	801129a <__malloc_unlock>
 800e342:	42a3      	cmp	r3, r4
 800e344:	d90c      	bls.n	800e360 <_free_r+0x4c>
 800e346:	6821      	ldr	r1, [r4, #0]
 800e348:	1862      	adds	r2, r4, r1
 800e34a:	4293      	cmp	r3, r2
 800e34c:	bf04      	itt	eq
 800e34e:	681a      	ldreq	r2, [r3, #0]
 800e350:	685b      	ldreq	r3, [r3, #4]
 800e352:	6063      	str	r3, [r4, #4]
 800e354:	bf04      	itt	eq
 800e356:	1852      	addeq	r2, r2, r1
 800e358:	6022      	streq	r2, [r4, #0]
 800e35a:	6004      	str	r4, [r0, #0]
 800e35c:	e7ec      	b.n	800e338 <_free_r+0x24>
 800e35e:	4613      	mov	r3, r2
 800e360:	685a      	ldr	r2, [r3, #4]
 800e362:	b10a      	cbz	r2, 800e368 <_free_r+0x54>
 800e364:	42a2      	cmp	r2, r4
 800e366:	d9fa      	bls.n	800e35e <_free_r+0x4a>
 800e368:	6819      	ldr	r1, [r3, #0]
 800e36a:	1858      	adds	r0, r3, r1
 800e36c:	42a0      	cmp	r0, r4
 800e36e:	d10b      	bne.n	800e388 <_free_r+0x74>
 800e370:	6820      	ldr	r0, [r4, #0]
 800e372:	4401      	add	r1, r0
 800e374:	1858      	adds	r0, r3, r1
 800e376:	4282      	cmp	r2, r0
 800e378:	6019      	str	r1, [r3, #0]
 800e37a:	d1dd      	bne.n	800e338 <_free_r+0x24>
 800e37c:	6810      	ldr	r0, [r2, #0]
 800e37e:	6852      	ldr	r2, [r2, #4]
 800e380:	605a      	str	r2, [r3, #4]
 800e382:	4401      	add	r1, r0
 800e384:	6019      	str	r1, [r3, #0]
 800e386:	e7d7      	b.n	800e338 <_free_r+0x24>
 800e388:	d902      	bls.n	800e390 <_free_r+0x7c>
 800e38a:	230c      	movs	r3, #12
 800e38c:	602b      	str	r3, [r5, #0]
 800e38e:	e7d3      	b.n	800e338 <_free_r+0x24>
 800e390:	6820      	ldr	r0, [r4, #0]
 800e392:	1821      	adds	r1, r4, r0
 800e394:	428a      	cmp	r2, r1
 800e396:	bf04      	itt	eq
 800e398:	6811      	ldreq	r1, [r2, #0]
 800e39a:	6852      	ldreq	r2, [r2, #4]
 800e39c:	6062      	str	r2, [r4, #4]
 800e39e:	bf04      	itt	eq
 800e3a0:	1809      	addeq	r1, r1, r0
 800e3a2:	6021      	streq	r1, [r4, #0]
 800e3a4:	605c      	str	r4, [r3, #4]
 800e3a6:	e7c7      	b.n	800e338 <_free_r+0x24>
 800e3a8:	bd38      	pop	{r3, r4, r5, pc}
 800e3aa:	bf00      	nop
 800e3ac:	2000098c 	.word	0x2000098c

0800e3b0 <_malloc_r>:
 800e3b0:	b570      	push	{r4, r5, r6, lr}
 800e3b2:	1ccd      	adds	r5, r1, #3
 800e3b4:	f025 0503 	bic.w	r5, r5, #3
 800e3b8:	3508      	adds	r5, #8
 800e3ba:	2d0c      	cmp	r5, #12
 800e3bc:	bf38      	it	cc
 800e3be:	250c      	movcc	r5, #12
 800e3c0:	2d00      	cmp	r5, #0
 800e3c2:	4606      	mov	r6, r0
 800e3c4:	db01      	blt.n	800e3ca <_malloc_r+0x1a>
 800e3c6:	42a9      	cmp	r1, r5
 800e3c8:	d903      	bls.n	800e3d2 <_malloc_r+0x22>
 800e3ca:	230c      	movs	r3, #12
 800e3cc:	6033      	str	r3, [r6, #0]
 800e3ce:	2000      	movs	r0, #0
 800e3d0:	bd70      	pop	{r4, r5, r6, pc}
 800e3d2:	f002 ff61 	bl	8011298 <__malloc_lock>
 800e3d6:	4a21      	ldr	r2, [pc, #132]	; (800e45c <_malloc_r+0xac>)
 800e3d8:	6814      	ldr	r4, [r2, #0]
 800e3da:	4621      	mov	r1, r4
 800e3dc:	b991      	cbnz	r1, 800e404 <_malloc_r+0x54>
 800e3de:	4c20      	ldr	r4, [pc, #128]	; (800e460 <_malloc_r+0xb0>)
 800e3e0:	6823      	ldr	r3, [r4, #0]
 800e3e2:	b91b      	cbnz	r3, 800e3ec <_malloc_r+0x3c>
 800e3e4:	4630      	mov	r0, r6
 800e3e6:	f000 fe7b 	bl	800f0e0 <_sbrk_r>
 800e3ea:	6020      	str	r0, [r4, #0]
 800e3ec:	4629      	mov	r1, r5
 800e3ee:	4630      	mov	r0, r6
 800e3f0:	f000 fe76 	bl	800f0e0 <_sbrk_r>
 800e3f4:	1c43      	adds	r3, r0, #1
 800e3f6:	d124      	bne.n	800e442 <_malloc_r+0x92>
 800e3f8:	230c      	movs	r3, #12
 800e3fa:	6033      	str	r3, [r6, #0]
 800e3fc:	4630      	mov	r0, r6
 800e3fe:	f002 ff4c 	bl	801129a <__malloc_unlock>
 800e402:	e7e4      	b.n	800e3ce <_malloc_r+0x1e>
 800e404:	680b      	ldr	r3, [r1, #0]
 800e406:	1b5b      	subs	r3, r3, r5
 800e408:	d418      	bmi.n	800e43c <_malloc_r+0x8c>
 800e40a:	2b0b      	cmp	r3, #11
 800e40c:	d90f      	bls.n	800e42e <_malloc_r+0x7e>
 800e40e:	600b      	str	r3, [r1, #0]
 800e410:	50cd      	str	r5, [r1, r3]
 800e412:	18cc      	adds	r4, r1, r3
 800e414:	4630      	mov	r0, r6
 800e416:	f002 ff40 	bl	801129a <__malloc_unlock>
 800e41a:	f104 000b 	add.w	r0, r4, #11
 800e41e:	1d23      	adds	r3, r4, #4
 800e420:	f020 0007 	bic.w	r0, r0, #7
 800e424:	1ac3      	subs	r3, r0, r3
 800e426:	d0d3      	beq.n	800e3d0 <_malloc_r+0x20>
 800e428:	425a      	negs	r2, r3
 800e42a:	50e2      	str	r2, [r4, r3]
 800e42c:	e7d0      	b.n	800e3d0 <_malloc_r+0x20>
 800e42e:	428c      	cmp	r4, r1
 800e430:	684b      	ldr	r3, [r1, #4]
 800e432:	bf16      	itet	ne
 800e434:	6063      	strne	r3, [r4, #4]
 800e436:	6013      	streq	r3, [r2, #0]
 800e438:	460c      	movne	r4, r1
 800e43a:	e7eb      	b.n	800e414 <_malloc_r+0x64>
 800e43c:	460c      	mov	r4, r1
 800e43e:	6849      	ldr	r1, [r1, #4]
 800e440:	e7cc      	b.n	800e3dc <_malloc_r+0x2c>
 800e442:	1cc4      	adds	r4, r0, #3
 800e444:	f024 0403 	bic.w	r4, r4, #3
 800e448:	42a0      	cmp	r0, r4
 800e44a:	d005      	beq.n	800e458 <_malloc_r+0xa8>
 800e44c:	1a21      	subs	r1, r4, r0
 800e44e:	4630      	mov	r0, r6
 800e450:	f000 fe46 	bl	800f0e0 <_sbrk_r>
 800e454:	3001      	adds	r0, #1
 800e456:	d0cf      	beq.n	800e3f8 <_malloc_r+0x48>
 800e458:	6025      	str	r5, [r4, #0]
 800e45a:	e7db      	b.n	800e414 <_malloc_r+0x64>
 800e45c:	2000098c 	.word	0x2000098c
 800e460:	20000990 	.word	0x20000990

0800e464 <__cvt>:
 800e464:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e468:	ec55 4b10 	vmov	r4, r5, d0
 800e46c:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 800e46e:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800e472:	2d00      	cmp	r5, #0
 800e474:	460e      	mov	r6, r1
 800e476:	4691      	mov	r9, r2
 800e478:	4619      	mov	r1, r3
 800e47a:	bfb8      	it	lt
 800e47c:	4622      	movlt	r2, r4
 800e47e:	462b      	mov	r3, r5
 800e480:	f027 0720 	bic.w	r7, r7, #32
 800e484:	bfbb      	ittet	lt
 800e486:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800e48a:	461d      	movlt	r5, r3
 800e48c:	2300      	movge	r3, #0
 800e48e:	232d      	movlt	r3, #45	; 0x2d
 800e490:	bfb8      	it	lt
 800e492:	4614      	movlt	r4, r2
 800e494:	2f46      	cmp	r7, #70	; 0x46
 800e496:	700b      	strb	r3, [r1, #0]
 800e498:	d004      	beq.n	800e4a4 <__cvt+0x40>
 800e49a:	2f45      	cmp	r7, #69	; 0x45
 800e49c:	d100      	bne.n	800e4a0 <__cvt+0x3c>
 800e49e:	3601      	adds	r6, #1
 800e4a0:	2102      	movs	r1, #2
 800e4a2:	e000      	b.n	800e4a6 <__cvt+0x42>
 800e4a4:	2103      	movs	r1, #3
 800e4a6:	ab03      	add	r3, sp, #12
 800e4a8:	9301      	str	r3, [sp, #4]
 800e4aa:	ab02      	add	r3, sp, #8
 800e4ac:	9300      	str	r3, [sp, #0]
 800e4ae:	4632      	mov	r2, r6
 800e4b0:	4653      	mov	r3, sl
 800e4b2:	ec45 4b10 	vmov	d0, r4, r5
 800e4b6:	f001 fdeb 	bl	8010090 <_dtoa_r>
 800e4ba:	2f47      	cmp	r7, #71	; 0x47
 800e4bc:	4680      	mov	r8, r0
 800e4be:	d102      	bne.n	800e4c6 <__cvt+0x62>
 800e4c0:	f019 0f01 	tst.w	r9, #1
 800e4c4:	d026      	beq.n	800e514 <__cvt+0xb0>
 800e4c6:	2f46      	cmp	r7, #70	; 0x46
 800e4c8:	eb08 0906 	add.w	r9, r8, r6
 800e4cc:	d111      	bne.n	800e4f2 <__cvt+0x8e>
 800e4ce:	f898 3000 	ldrb.w	r3, [r8]
 800e4d2:	2b30      	cmp	r3, #48	; 0x30
 800e4d4:	d10a      	bne.n	800e4ec <__cvt+0x88>
 800e4d6:	2200      	movs	r2, #0
 800e4d8:	2300      	movs	r3, #0
 800e4da:	4620      	mov	r0, r4
 800e4dc:	4629      	mov	r1, r5
 800e4de:	f7f2 fb03 	bl	8000ae8 <__aeabi_dcmpeq>
 800e4e2:	b918      	cbnz	r0, 800e4ec <__cvt+0x88>
 800e4e4:	f1c6 0601 	rsb	r6, r6, #1
 800e4e8:	f8ca 6000 	str.w	r6, [sl]
 800e4ec:	f8da 3000 	ldr.w	r3, [sl]
 800e4f0:	4499      	add	r9, r3
 800e4f2:	2200      	movs	r2, #0
 800e4f4:	2300      	movs	r3, #0
 800e4f6:	4620      	mov	r0, r4
 800e4f8:	4629      	mov	r1, r5
 800e4fa:	f7f2 faf5 	bl	8000ae8 <__aeabi_dcmpeq>
 800e4fe:	b938      	cbnz	r0, 800e510 <__cvt+0xac>
 800e500:	2230      	movs	r2, #48	; 0x30
 800e502:	9b03      	ldr	r3, [sp, #12]
 800e504:	454b      	cmp	r3, r9
 800e506:	d205      	bcs.n	800e514 <__cvt+0xb0>
 800e508:	1c59      	adds	r1, r3, #1
 800e50a:	9103      	str	r1, [sp, #12]
 800e50c:	701a      	strb	r2, [r3, #0]
 800e50e:	e7f8      	b.n	800e502 <__cvt+0x9e>
 800e510:	f8cd 900c 	str.w	r9, [sp, #12]
 800e514:	9b03      	ldr	r3, [sp, #12]
 800e516:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800e518:	eba3 0308 	sub.w	r3, r3, r8
 800e51c:	4640      	mov	r0, r8
 800e51e:	6013      	str	r3, [r2, #0]
 800e520:	b004      	add	sp, #16
 800e522:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800e526 <__exponent>:
 800e526:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e528:	2900      	cmp	r1, #0
 800e52a:	4604      	mov	r4, r0
 800e52c:	bfba      	itte	lt
 800e52e:	4249      	neglt	r1, r1
 800e530:	232d      	movlt	r3, #45	; 0x2d
 800e532:	232b      	movge	r3, #43	; 0x2b
 800e534:	2909      	cmp	r1, #9
 800e536:	f804 2b02 	strb.w	r2, [r4], #2
 800e53a:	7043      	strb	r3, [r0, #1]
 800e53c:	dd20      	ble.n	800e580 <__exponent+0x5a>
 800e53e:	f10d 0307 	add.w	r3, sp, #7
 800e542:	461f      	mov	r7, r3
 800e544:	260a      	movs	r6, #10
 800e546:	fb91 f5f6 	sdiv	r5, r1, r6
 800e54a:	fb06 1115 	mls	r1, r6, r5, r1
 800e54e:	3130      	adds	r1, #48	; 0x30
 800e550:	2d09      	cmp	r5, #9
 800e552:	f803 1c01 	strb.w	r1, [r3, #-1]
 800e556:	f103 32ff 	add.w	r2, r3, #4294967295
 800e55a:	4629      	mov	r1, r5
 800e55c:	dc09      	bgt.n	800e572 <__exponent+0x4c>
 800e55e:	3130      	adds	r1, #48	; 0x30
 800e560:	3b02      	subs	r3, #2
 800e562:	f802 1c01 	strb.w	r1, [r2, #-1]
 800e566:	42bb      	cmp	r3, r7
 800e568:	4622      	mov	r2, r4
 800e56a:	d304      	bcc.n	800e576 <__exponent+0x50>
 800e56c:	1a10      	subs	r0, r2, r0
 800e56e:	b003      	add	sp, #12
 800e570:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e572:	4613      	mov	r3, r2
 800e574:	e7e7      	b.n	800e546 <__exponent+0x20>
 800e576:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e57a:	f804 2b01 	strb.w	r2, [r4], #1
 800e57e:	e7f2      	b.n	800e566 <__exponent+0x40>
 800e580:	2330      	movs	r3, #48	; 0x30
 800e582:	4419      	add	r1, r3
 800e584:	7083      	strb	r3, [r0, #2]
 800e586:	1d02      	adds	r2, r0, #4
 800e588:	70c1      	strb	r1, [r0, #3]
 800e58a:	e7ef      	b.n	800e56c <__exponent+0x46>

0800e58c <_printf_float>:
 800e58c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e590:	b08d      	sub	sp, #52	; 0x34
 800e592:	460c      	mov	r4, r1
 800e594:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 800e598:	4616      	mov	r6, r2
 800e59a:	461f      	mov	r7, r3
 800e59c:	4605      	mov	r5, r0
 800e59e:	f002 fe5b 	bl	8011258 <_localeconv_r>
 800e5a2:	6803      	ldr	r3, [r0, #0]
 800e5a4:	9304      	str	r3, [sp, #16]
 800e5a6:	4618      	mov	r0, r3
 800e5a8:	f7f1 fe1c 	bl	80001e4 <strlen>
 800e5ac:	2300      	movs	r3, #0
 800e5ae:	930a      	str	r3, [sp, #40]	; 0x28
 800e5b0:	f8d8 3000 	ldr.w	r3, [r8]
 800e5b4:	9005      	str	r0, [sp, #20]
 800e5b6:	3307      	adds	r3, #7
 800e5b8:	f023 0307 	bic.w	r3, r3, #7
 800e5bc:	f103 0208 	add.w	r2, r3, #8
 800e5c0:	f894 a018 	ldrb.w	sl, [r4, #24]
 800e5c4:	f8d4 b000 	ldr.w	fp, [r4]
 800e5c8:	f8c8 2000 	str.w	r2, [r8]
 800e5cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e5d0:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800e5d4:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800e5d8:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800e5dc:	9307      	str	r3, [sp, #28]
 800e5de:	f8cd 8018 	str.w	r8, [sp, #24]
 800e5e2:	f04f 32ff 	mov.w	r2, #4294967295
 800e5e6:	4ba7      	ldr	r3, [pc, #668]	; (800e884 <_printf_float+0x2f8>)
 800e5e8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e5ec:	f7f2 faae 	bl	8000b4c <__aeabi_dcmpun>
 800e5f0:	bb70      	cbnz	r0, 800e650 <_printf_float+0xc4>
 800e5f2:	f04f 32ff 	mov.w	r2, #4294967295
 800e5f6:	4ba3      	ldr	r3, [pc, #652]	; (800e884 <_printf_float+0x2f8>)
 800e5f8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e5fc:	f7f2 fa88 	bl	8000b10 <__aeabi_dcmple>
 800e600:	bb30      	cbnz	r0, 800e650 <_printf_float+0xc4>
 800e602:	2200      	movs	r2, #0
 800e604:	2300      	movs	r3, #0
 800e606:	4640      	mov	r0, r8
 800e608:	4649      	mov	r1, r9
 800e60a:	f7f2 fa77 	bl	8000afc <__aeabi_dcmplt>
 800e60e:	b110      	cbz	r0, 800e616 <_printf_float+0x8a>
 800e610:	232d      	movs	r3, #45	; 0x2d
 800e612:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e616:	4a9c      	ldr	r2, [pc, #624]	; (800e888 <_printf_float+0x2fc>)
 800e618:	4b9c      	ldr	r3, [pc, #624]	; (800e88c <_printf_float+0x300>)
 800e61a:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800e61e:	bf8c      	ite	hi
 800e620:	4690      	movhi	r8, r2
 800e622:	4698      	movls	r8, r3
 800e624:	2303      	movs	r3, #3
 800e626:	f02b 0204 	bic.w	r2, fp, #4
 800e62a:	6123      	str	r3, [r4, #16]
 800e62c:	6022      	str	r2, [r4, #0]
 800e62e:	f04f 0900 	mov.w	r9, #0
 800e632:	9700      	str	r7, [sp, #0]
 800e634:	4633      	mov	r3, r6
 800e636:	aa0b      	add	r2, sp, #44	; 0x2c
 800e638:	4621      	mov	r1, r4
 800e63a:	4628      	mov	r0, r5
 800e63c:	f000 f9e6 	bl	800ea0c <_printf_common>
 800e640:	3001      	adds	r0, #1
 800e642:	f040 808d 	bne.w	800e760 <_printf_float+0x1d4>
 800e646:	f04f 30ff 	mov.w	r0, #4294967295
 800e64a:	b00d      	add	sp, #52	; 0x34
 800e64c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e650:	4642      	mov	r2, r8
 800e652:	464b      	mov	r3, r9
 800e654:	4640      	mov	r0, r8
 800e656:	4649      	mov	r1, r9
 800e658:	f7f2 fa78 	bl	8000b4c <__aeabi_dcmpun>
 800e65c:	b110      	cbz	r0, 800e664 <_printf_float+0xd8>
 800e65e:	4a8c      	ldr	r2, [pc, #560]	; (800e890 <_printf_float+0x304>)
 800e660:	4b8c      	ldr	r3, [pc, #560]	; (800e894 <_printf_float+0x308>)
 800e662:	e7da      	b.n	800e61a <_printf_float+0x8e>
 800e664:	6861      	ldr	r1, [r4, #4]
 800e666:	1c4b      	adds	r3, r1, #1
 800e668:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 800e66c:	a80a      	add	r0, sp, #40	; 0x28
 800e66e:	d13e      	bne.n	800e6ee <_printf_float+0x162>
 800e670:	2306      	movs	r3, #6
 800e672:	6063      	str	r3, [r4, #4]
 800e674:	2300      	movs	r3, #0
 800e676:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800e67a:	ab09      	add	r3, sp, #36	; 0x24
 800e67c:	9300      	str	r3, [sp, #0]
 800e67e:	ec49 8b10 	vmov	d0, r8, r9
 800e682:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800e686:	6022      	str	r2, [r4, #0]
 800e688:	f8cd a004 	str.w	sl, [sp, #4]
 800e68c:	6861      	ldr	r1, [r4, #4]
 800e68e:	4628      	mov	r0, r5
 800e690:	f7ff fee8 	bl	800e464 <__cvt>
 800e694:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 800e698:	2b47      	cmp	r3, #71	; 0x47
 800e69a:	4680      	mov	r8, r0
 800e69c:	d109      	bne.n	800e6b2 <_printf_float+0x126>
 800e69e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e6a0:	1cd8      	adds	r0, r3, #3
 800e6a2:	db02      	blt.n	800e6aa <_printf_float+0x11e>
 800e6a4:	6862      	ldr	r2, [r4, #4]
 800e6a6:	4293      	cmp	r3, r2
 800e6a8:	dd47      	ble.n	800e73a <_printf_float+0x1ae>
 800e6aa:	f1aa 0a02 	sub.w	sl, sl, #2
 800e6ae:	fa5f fa8a 	uxtb.w	sl, sl
 800e6b2:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800e6b6:	9909      	ldr	r1, [sp, #36]	; 0x24
 800e6b8:	d824      	bhi.n	800e704 <_printf_float+0x178>
 800e6ba:	3901      	subs	r1, #1
 800e6bc:	4652      	mov	r2, sl
 800e6be:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800e6c2:	9109      	str	r1, [sp, #36]	; 0x24
 800e6c4:	f7ff ff2f 	bl	800e526 <__exponent>
 800e6c8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e6ca:	1813      	adds	r3, r2, r0
 800e6cc:	2a01      	cmp	r2, #1
 800e6ce:	4681      	mov	r9, r0
 800e6d0:	6123      	str	r3, [r4, #16]
 800e6d2:	dc02      	bgt.n	800e6da <_printf_float+0x14e>
 800e6d4:	6822      	ldr	r2, [r4, #0]
 800e6d6:	07d1      	lsls	r1, r2, #31
 800e6d8:	d501      	bpl.n	800e6de <_printf_float+0x152>
 800e6da:	3301      	adds	r3, #1
 800e6dc:	6123      	str	r3, [r4, #16]
 800e6de:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800e6e2:	2b00      	cmp	r3, #0
 800e6e4:	d0a5      	beq.n	800e632 <_printf_float+0xa6>
 800e6e6:	232d      	movs	r3, #45	; 0x2d
 800e6e8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e6ec:	e7a1      	b.n	800e632 <_printf_float+0xa6>
 800e6ee:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 800e6f2:	f000 8177 	beq.w	800e9e4 <_printf_float+0x458>
 800e6f6:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800e6fa:	d1bb      	bne.n	800e674 <_printf_float+0xe8>
 800e6fc:	2900      	cmp	r1, #0
 800e6fe:	d1b9      	bne.n	800e674 <_printf_float+0xe8>
 800e700:	2301      	movs	r3, #1
 800e702:	e7b6      	b.n	800e672 <_printf_float+0xe6>
 800e704:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 800e708:	d119      	bne.n	800e73e <_printf_float+0x1b2>
 800e70a:	2900      	cmp	r1, #0
 800e70c:	6863      	ldr	r3, [r4, #4]
 800e70e:	dd0c      	ble.n	800e72a <_printf_float+0x19e>
 800e710:	6121      	str	r1, [r4, #16]
 800e712:	b913      	cbnz	r3, 800e71a <_printf_float+0x18e>
 800e714:	6822      	ldr	r2, [r4, #0]
 800e716:	07d2      	lsls	r2, r2, #31
 800e718:	d502      	bpl.n	800e720 <_printf_float+0x194>
 800e71a:	3301      	adds	r3, #1
 800e71c:	440b      	add	r3, r1
 800e71e:	6123      	str	r3, [r4, #16]
 800e720:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e722:	65a3      	str	r3, [r4, #88]	; 0x58
 800e724:	f04f 0900 	mov.w	r9, #0
 800e728:	e7d9      	b.n	800e6de <_printf_float+0x152>
 800e72a:	b913      	cbnz	r3, 800e732 <_printf_float+0x1a6>
 800e72c:	6822      	ldr	r2, [r4, #0]
 800e72e:	07d0      	lsls	r0, r2, #31
 800e730:	d501      	bpl.n	800e736 <_printf_float+0x1aa>
 800e732:	3302      	adds	r3, #2
 800e734:	e7f3      	b.n	800e71e <_printf_float+0x192>
 800e736:	2301      	movs	r3, #1
 800e738:	e7f1      	b.n	800e71e <_printf_float+0x192>
 800e73a:	f04f 0a67 	mov.w	sl, #103	; 0x67
 800e73e:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800e742:	4293      	cmp	r3, r2
 800e744:	db05      	blt.n	800e752 <_printf_float+0x1c6>
 800e746:	6822      	ldr	r2, [r4, #0]
 800e748:	6123      	str	r3, [r4, #16]
 800e74a:	07d1      	lsls	r1, r2, #31
 800e74c:	d5e8      	bpl.n	800e720 <_printf_float+0x194>
 800e74e:	3301      	adds	r3, #1
 800e750:	e7e5      	b.n	800e71e <_printf_float+0x192>
 800e752:	2b00      	cmp	r3, #0
 800e754:	bfd4      	ite	le
 800e756:	f1c3 0302 	rsble	r3, r3, #2
 800e75a:	2301      	movgt	r3, #1
 800e75c:	4413      	add	r3, r2
 800e75e:	e7de      	b.n	800e71e <_printf_float+0x192>
 800e760:	6823      	ldr	r3, [r4, #0]
 800e762:	055a      	lsls	r2, r3, #21
 800e764:	d407      	bmi.n	800e776 <_printf_float+0x1ea>
 800e766:	6923      	ldr	r3, [r4, #16]
 800e768:	4642      	mov	r2, r8
 800e76a:	4631      	mov	r1, r6
 800e76c:	4628      	mov	r0, r5
 800e76e:	47b8      	blx	r7
 800e770:	3001      	adds	r0, #1
 800e772:	d12b      	bne.n	800e7cc <_printf_float+0x240>
 800e774:	e767      	b.n	800e646 <_printf_float+0xba>
 800e776:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800e77a:	f240 80dc 	bls.w	800e936 <_printf_float+0x3aa>
 800e77e:	2200      	movs	r2, #0
 800e780:	2300      	movs	r3, #0
 800e782:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800e786:	f7f2 f9af 	bl	8000ae8 <__aeabi_dcmpeq>
 800e78a:	2800      	cmp	r0, #0
 800e78c:	d033      	beq.n	800e7f6 <_printf_float+0x26a>
 800e78e:	2301      	movs	r3, #1
 800e790:	4a41      	ldr	r2, [pc, #260]	; (800e898 <_printf_float+0x30c>)
 800e792:	4631      	mov	r1, r6
 800e794:	4628      	mov	r0, r5
 800e796:	47b8      	blx	r7
 800e798:	3001      	adds	r0, #1
 800e79a:	f43f af54 	beq.w	800e646 <_printf_float+0xba>
 800e79e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800e7a2:	429a      	cmp	r2, r3
 800e7a4:	db02      	blt.n	800e7ac <_printf_float+0x220>
 800e7a6:	6823      	ldr	r3, [r4, #0]
 800e7a8:	07d8      	lsls	r0, r3, #31
 800e7aa:	d50f      	bpl.n	800e7cc <_printf_float+0x240>
 800e7ac:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e7b0:	4631      	mov	r1, r6
 800e7b2:	4628      	mov	r0, r5
 800e7b4:	47b8      	blx	r7
 800e7b6:	3001      	adds	r0, #1
 800e7b8:	f43f af45 	beq.w	800e646 <_printf_float+0xba>
 800e7bc:	f04f 0800 	mov.w	r8, #0
 800e7c0:	f104 091a 	add.w	r9, r4, #26
 800e7c4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e7c6:	3b01      	subs	r3, #1
 800e7c8:	4543      	cmp	r3, r8
 800e7ca:	dc09      	bgt.n	800e7e0 <_printf_float+0x254>
 800e7cc:	6823      	ldr	r3, [r4, #0]
 800e7ce:	079b      	lsls	r3, r3, #30
 800e7d0:	f100 8103 	bmi.w	800e9da <_printf_float+0x44e>
 800e7d4:	68e0      	ldr	r0, [r4, #12]
 800e7d6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e7d8:	4298      	cmp	r0, r3
 800e7da:	bfb8      	it	lt
 800e7dc:	4618      	movlt	r0, r3
 800e7de:	e734      	b.n	800e64a <_printf_float+0xbe>
 800e7e0:	2301      	movs	r3, #1
 800e7e2:	464a      	mov	r2, r9
 800e7e4:	4631      	mov	r1, r6
 800e7e6:	4628      	mov	r0, r5
 800e7e8:	47b8      	blx	r7
 800e7ea:	3001      	adds	r0, #1
 800e7ec:	f43f af2b 	beq.w	800e646 <_printf_float+0xba>
 800e7f0:	f108 0801 	add.w	r8, r8, #1
 800e7f4:	e7e6      	b.n	800e7c4 <_printf_float+0x238>
 800e7f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e7f8:	2b00      	cmp	r3, #0
 800e7fa:	dc2b      	bgt.n	800e854 <_printf_float+0x2c8>
 800e7fc:	2301      	movs	r3, #1
 800e7fe:	4a26      	ldr	r2, [pc, #152]	; (800e898 <_printf_float+0x30c>)
 800e800:	4631      	mov	r1, r6
 800e802:	4628      	mov	r0, r5
 800e804:	47b8      	blx	r7
 800e806:	3001      	adds	r0, #1
 800e808:	f43f af1d 	beq.w	800e646 <_printf_float+0xba>
 800e80c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e80e:	b923      	cbnz	r3, 800e81a <_printf_float+0x28e>
 800e810:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e812:	b913      	cbnz	r3, 800e81a <_printf_float+0x28e>
 800e814:	6823      	ldr	r3, [r4, #0]
 800e816:	07d9      	lsls	r1, r3, #31
 800e818:	d5d8      	bpl.n	800e7cc <_printf_float+0x240>
 800e81a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e81e:	4631      	mov	r1, r6
 800e820:	4628      	mov	r0, r5
 800e822:	47b8      	blx	r7
 800e824:	3001      	adds	r0, #1
 800e826:	f43f af0e 	beq.w	800e646 <_printf_float+0xba>
 800e82a:	f04f 0900 	mov.w	r9, #0
 800e82e:	f104 0a1a 	add.w	sl, r4, #26
 800e832:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e834:	425b      	negs	r3, r3
 800e836:	454b      	cmp	r3, r9
 800e838:	dc01      	bgt.n	800e83e <_printf_float+0x2b2>
 800e83a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e83c:	e794      	b.n	800e768 <_printf_float+0x1dc>
 800e83e:	2301      	movs	r3, #1
 800e840:	4652      	mov	r2, sl
 800e842:	4631      	mov	r1, r6
 800e844:	4628      	mov	r0, r5
 800e846:	47b8      	blx	r7
 800e848:	3001      	adds	r0, #1
 800e84a:	f43f aefc 	beq.w	800e646 <_printf_float+0xba>
 800e84e:	f109 0901 	add.w	r9, r9, #1
 800e852:	e7ee      	b.n	800e832 <_printf_float+0x2a6>
 800e854:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e856:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800e858:	429a      	cmp	r2, r3
 800e85a:	bfa8      	it	ge
 800e85c:	461a      	movge	r2, r3
 800e85e:	2a00      	cmp	r2, #0
 800e860:	4691      	mov	r9, r2
 800e862:	dd07      	ble.n	800e874 <_printf_float+0x2e8>
 800e864:	4613      	mov	r3, r2
 800e866:	4631      	mov	r1, r6
 800e868:	4642      	mov	r2, r8
 800e86a:	4628      	mov	r0, r5
 800e86c:	47b8      	blx	r7
 800e86e:	3001      	adds	r0, #1
 800e870:	f43f aee9 	beq.w	800e646 <_printf_float+0xba>
 800e874:	f104 031a 	add.w	r3, r4, #26
 800e878:	f04f 0b00 	mov.w	fp, #0
 800e87c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800e880:	9306      	str	r3, [sp, #24]
 800e882:	e015      	b.n	800e8b0 <_printf_float+0x324>
 800e884:	7fefffff 	.word	0x7fefffff
 800e888:	080126f4 	.word	0x080126f4
 800e88c:	080126f0 	.word	0x080126f0
 800e890:	080126fc 	.word	0x080126fc
 800e894:	080126f8 	.word	0x080126f8
 800e898:	08012700 	.word	0x08012700
 800e89c:	2301      	movs	r3, #1
 800e89e:	9a06      	ldr	r2, [sp, #24]
 800e8a0:	4631      	mov	r1, r6
 800e8a2:	4628      	mov	r0, r5
 800e8a4:	47b8      	blx	r7
 800e8a6:	3001      	adds	r0, #1
 800e8a8:	f43f aecd 	beq.w	800e646 <_printf_float+0xba>
 800e8ac:	f10b 0b01 	add.w	fp, fp, #1
 800e8b0:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 800e8b4:	ebaa 0309 	sub.w	r3, sl, r9
 800e8b8:	455b      	cmp	r3, fp
 800e8ba:	dcef      	bgt.n	800e89c <_printf_float+0x310>
 800e8bc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800e8c0:	429a      	cmp	r2, r3
 800e8c2:	44d0      	add	r8, sl
 800e8c4:	db15      	blt.n	800e8f2 <_printf_float+0x366>
 800e8c6:	6823      	ldr	r3, [r4, #0]
 800e8c8:	07da      	lsls	r2, r3, #31
 800e8ca:	d412      	bmi.n	800e8f2 <_printf_float+0x366>
 800e8cc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e8ce:	9909      	ldr	r1, [sp, #36]	; 0x24
 800e8d0:	eba3 020a 	sub.w	r2, r3, sl
 800e8d4:	eba3 0a01 	sub.w	sl, r3, r1
 800e8d8:	4592      	cmp	sl, r2
 800e8da:	bfa8      	it	ge
 800e8dc:	4692      	movge	sl, r2
 800e8de:	f1ba 0f00 	cmp.w	sl, #0
 800e8e2:	dc0e      	bgt.n	800e902 <_printf_float+0x376>
 800e8e4:	f04f 0800 	mov.w	r8, #0
 800e8e8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800e8ec:	f104 091a 	add.w	r9, r4, #26
 800e8f0:	e019      	b.n	800e926 <_printf_float+0x39a>
 800e8f2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e8f6:	4631      	mov	r1, r6
 800e8f8:	4628      	mov	r0, r5
 800e8fa:	47b8      	blx	r7
 800e8fc:	3001      	adds	r0, #1
 800e8fe:	d1e5      	bne.n	800e8cc <_printf_float+0x340>
 800e900:	e6a1      	b.n	800e646 <_printf_float+0xba>
 800e902:	4653      	mov	r3, sl
 800e904:	4642      	mov	r2, r8
 800e906:	4631      	mov	r1, r6
 800e908:	4628      	mov	r0, r5
 800e90a:	47b8      	blx	r7
 800e90c:	3001      	adds	r0, #1
 800e90e:	d1e9      	bne.n	800e8e4 <_printf_float+0x358>
 800e910:	e699      	b.n	800e646 <_printf_float+0xba>
 800e912:	2301      	movs	r3, #1
 800e914:	464a      	mov	r2, r9
 800e916:	4631      	mov	r1, r6
 800e918:	4628      	mov	r0, r5
 800e91a:	47b8      	blx	r7
 800e91c:	3001      	adds	r0, #1
 800e91e:	f43f ae92 	beq.w	800e646 <_printf_float+0xba>
 800e922:	f108 0801 	add.w	r8, r8, #1
 800e926:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800e92a:	1a9b      	subs	r3, r3, r2
 800e92c:	eba3 030a 	sub.w	r3, r3, sl
 800e930:	4543      	cmp	r3, r8
 800e932:	dcee      	bgt.n	800e912 <_printf_float+0x386>
 800e934:	e74a      	b.n	800e7cc <_printf_float+0x240>
 800e936:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e938:	2a01      	cmp	r2, #1
 800e93a:	dc01      	bgt.n	800e940 <_printf_float+0x3b4>
 800e93c:	07db      	lsls	r3, r3, #31
 800e93e:	d53a      	bpl.n	800e9b6 <_printf_float+0x42a>
 800e940:	2301      	movs	r3, #1
 800e942:	4642      	mov	r2, r8
 800e944:	4631      	mov	r1, r6
 800e946:	4628      	mov	r0, r5
 800e948:	47b8      	blx	r7
 800e94a:	3001      	adds	r0, #1
 800e94c:	f43f ae7b 	beq.w	800e646 <_printf_float+0xba>
 800e950:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e954:	4631      	mov	r1, r6
 800e956:	4628      	mov	r0, r5
 800e958:	47b8      	blx	r7
 800e95a:	3001      	adds	r0, #1
 800e95c:	f108 0801 	add.w	r8, r8, #1
 800e960:	f43f ae71 	beq.w	800e646 <_printf_float+0xba>
 800e964:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e966:	2200      	movs	r2, #0
 800e968:	f103 3aff 	add.w	sl, r3, #4294967295
 800e96c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800e970:	2300      	movs	r3, #0
 800e972:	f7f2 f8b9 	bl	8000ae8 <__aeabi_dcmpeq>
 800e976:	b9c8      	cbnz	r0, 800e9ac <_printf_float+0x420>
 800e978:	4653      	mov	r3, sl
 800e97a:	4642      	mov	r2, r8
 800e97c:	4631      	mov	r1, r6
 800e97e:	4628      	mov	r0, r5
 800e980:	47b8      	blx	r7
 800e982:	3001      	adds	r0, #1
 800e984:	d10e      	bne.n	800e9a4 <_printf_float+0x418>
 800e986:	e65e      	b.n	800e646 <_printf_float+0xba>
 800e988:	2301      	movs	r3, #1
 800e98a:	4652      	mov	r2, sl
 800e98c:	4631      	mov	r1, r6
 800e98e:	4628      	mov	r0, r5
 800e990:	47b8      	blx	r7
 800e992:	3001      	adds	r0, #1
 800e994:	f43f ae57 	beq.w	800e646 <_printf_float+0xba>
 800e998:	f108 0801 	add.w	r8, r8, #1
 800e99c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e99e:	3b01      	subs	r3, #1
 800e9a0:	4543      	cmp	r3, r8
 800e9a2:	dcf1      	bgt.n	800e988 <_printf_float+0x3fc>
 800e9a4:	464b      	mov	r3, r9
 800e9a6:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800e9aa:	e6de      	b.n	800e76a <_printf_float+0x1de>
 800e9ac:	f04f 0800 	mov.w	r8, #0
 800e9b0:	f104 0a1a 	add.w	sl, r4, #26
 800e9b4:	e7f2      	b.n	800e99c <_printf_float+0x410>
 800e9b6:	2301      	movs	r3, #1
 800e9b8:	e7df      	b.n	800e97a <_printf_float+0x3ee>
 800e9ba:	2301      	movs	r3, #1
 800e9bc:	464a      	mov	r2, r9
 800e9be:	4631      	mov	r1, r6
 800e9c0:	4628      	mov	r0, r5
 800e9c2:	47b8      	blx	r7
 800e9c4:	3001      	adds	r0, #1
 800e9c6:	f43f ae3e 	beq.w	800e646 <_printf_float+0xba>
 800e9ca:	f108 0801 	add.w	r8, r8, #1
 800e9ce:	68e3      	ldr	r3, [r4, #12]
 800e9d0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800e9d2:	1a9b      	subs	r3, r3, r2
 800e9d4:	4543      	cmp	r3, r8
 800e9d6:	dcf0      	bgt.n	800e9ba <_printf_float+0x42e>
 800e9d8:	e6fc      	b.n	800e7d4 <_printf_float+0x248>
 800e9da:	f04f 0800 	mov.w	r8, #0
 800e9de:	f104 0919 	add.w	r9, r4, #25
 800e9e2:	e7f4      	b.n	800e9ce <_printf_float+0x442>
 800e9e4:	2900      	cmp	r1, #0
 800e9e6:	f43f ae8b 	beq.w	800e700 <_printf_float+0x174>
 800e9ea:	2300      	movs	r3, #0
 800e9ec:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800e9f0:	ab09      	add	r3, sp, #36	; 0x24
 800e9f2:	9300      	str	r3, [sp, #0]
 800e9f4:	ec49 8b10 	vmov	d0, r8, r9
 800e9f8:	6022      	str	r2, [r4, #0]
 800e9fa:	f8cd a004 	str.w	sl, [sp, #4]
 800e9fe:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800ea02:	4628      	mov	r0, r5
 800ea04:	f7ff fd2e 	bl	800e464 <__cvt>
 800ea08:	4680      	mov	r8, r0
 800ea0a:	e648      	b.n	800e69e <_printf_float+0x112>

0800ea0c <_printf_common>:
 800ea0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ea10:	4691      	mov	r9, r2
 800ea12:	461f      	mov	r7, r3
 800ea14:	688a      	ldr	r2, [r1, #8]
 800ea16:	690b      	ldr	r3, [r1, #16]
 800ea18:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800ea1c:	4293      	cmp	r3, r2
 800ea1e:	bfb8      	it	lt
 800ea20:	4613      	movlt	r3, r2
 800ea22:	f8c9 3000 	str.w	r3, [r9]
 800ea26:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800ea2a:	4606      	mov	r6, r0
 800ea2c:	460c      	mov	r4, r1
 800ea2e:	b112      	cbz	r2, 800ea36 <_printf_common+0x2a>
 800ea30:	3301      	adds	r3, #1
 800ea32:	f8c9 3000 	str.w	r3, [r9]
 800ea36:	6823      	ldr	r3, [r4, #0]
 800ea38:	0699      	lsls	r1, r3, #26
 800ea3a:	bf42      	ittt	mi
 800ea3c:	f8d9 3000 	ldrmi.w	r3, [r9]
 800ea40:	3302      	addmi	r3, #2
 800ea42:	f8c9 3000 	strmi.w	r3, [r9]
 800ea46:	6825      	ldr	r5, [r4, #0]
 800ea48:	f015 0506 	ands.w	r5, r5, #6
 800ea4c:	d107      	bne.n	800ea5e <_printf_common+0x52>
 800ea4e:	f104 0a19 	add.w	sl, r4, #25
 800ea52:	68e3      	ldr	r3, [r4, #12]
 800ea54:	f8d9 2000 	ldr.w	r2, [r9]
 800ea58:	1a9b      	subs	r3, r3, r2
 800ea5a:	42ab      	cmp	r3, r5
 800ea5c:	dc28      	bgt.n	800eab0 <_printf_common+0xa4>
 800ea5e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800ea62:	6822      	ldr	r2, [r4, #0]
 800ea64:	3300      	adds	r3, #0
 800ea66:	bf18      	it	ne
 800ea68:	2301      	movne	r3, #1
 800ea6a:	0692      	lsls	r2, r2, #26
 800ea6c:	d42d      	bmi.n	800eaca <_printf_common+0xbe>
 800ea6e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800ea72:	4639      	mov	r1, r7
 800ea74:	4630      	mov	r0, r6
 800ea76:	47c0      	blx	r8
 800ea78:	3001      	adds	r0, #1
 800ea7a:	d020      	beq.n	800eabe <_printf_common+0xb2>
 800ea7c:	6823      	ldr	r3, [r4, #0]
 800ea7e:	68e5      	ldr	r5, [r4, #12]
 800ea80:	f8d9 2000 	ldr.w	r2, [r9]
 800ea84:	f003 0306 	and.w	r3, r3, #6
 800ea88:	2b04      	cmp	r3, #4
 800ea8a:	bf08      	it	eq
 800ea8c:	1aad      	subeq	r5, r5, r2
 800ea8e:	68a3      	ldr	r3, [r4, #8]
 800ea90:	6922      	ldr	r2, [r4, #16]
 800ea92:	bf0c      	ite	eq
 800ea94:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ea98:	2500      	movne	r5, #0
 800ea9a:	4293      	cmp	r3, r2
 800ea9c:	bfc4      	itt	gt
 800ea9e:	1a9b      	subgt	r3, r3, r2
 800eaa0:	18ed      	addgt	r5, r5, r3
 800eaa2:	f04f 0900 	mov.w	r9, #0
 800eaa6:	341a      	adds	r4, #26
 800eaa8:	454d      	cmp	r5, r9
 800eaaa:	d11a      	bne.n	800eae2 <_printf_common+0xd6>
 800eaac:	2000      	movs	r0, #0
 800eaae:	e008      	b.n	800eac2 <_printf_common+0xb6>
 800eab0:	2301      	movs	r3, #1
 800eab2:	4652      	mov	r2, sl
 800eab4:	4639      	mov	r1, r7
 800eab6:	4630      	mov	r0, r6
 800eab8:	47c0      	blx	r8
 800eaba:	3001      	adds	r0, #1
 800eabc:	d103      	bne.n	800eac6 <_printf_common+0xba>
 800eabe:	f04f 30ff 	mov.w	r0, #4294967295
 800eac2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800eac6:	3501      	adds	r5, #1
 800eac8:	e7c3      	b.n	800ea52 <_printf_common+0x46>
 800eaca:	18e1      	adds	r1, r4, r3
 800eacc:	1c5a      	adds	r2, r3, #1
 800eace:	2030      	movs	r0, #48	; 0x30
 800ead0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800ead4:	4422      	add	r2, r4
 800ead6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800eada:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800eade:	3302      	adds	r3, #2
 800eae0:	e7c5      	b.n	800ea6e <_printf_common+0x62>
 800eae2:	2301      	movs	r3, #1
 800eae4:	4622      	mov	r2, r4
 800eae6:	4639      	mov	r1, r7
 800eae8:	4630      	mov	r0, r6
 800eaea:	47c0      	blx	r8
 800eaec:	3001      	adds	r0, #1
 800eaee:	d0e6      	beq.n	800eabe <_printf_common+0xb2>
 800eaf0:	f109 0901 	add.w	r9, r9, #1
 800eaf4:	e7d8      	b.n	800eaa8 <_printf_common+0x9c>
	...

0800eaf8 <_printf_i>:
 800eaf8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800eafc:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800eb00:	460c      	mov	r4, r1
 800eb02:	7e09      	ldrb	r1, [r1, #24]
 800eb04:	b085      	sub	sp, #20
 800eb06:	296e      	cmp	r1, #110	; 0x6e
 800eb08:	4617      	mov	r7, r2
 800eb0a:	4606      	mov	r6, r0
 800eb0c:	4698      	mov	r8, r3
 800eb0e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800eb10:	f000 80b3 	beq.w	800ec7a <_printf_i+0x182>
 800eb14:	d822      	bhi.n	800eb5c <_printf_i+0x64>
 800eb16:	2963      	cmp	r1, #99	; 0x63
 800eb18:	d036      	beq.n	800eb88 <_printf_i+0x90>
 800eb1a:	d80a      	bhi.n	800eb32 <_printf_i+0x3a>
 800eb1c:	2900      	cmp	r1, #0
 800eb1e:	f000 80b9 	beq.w	800ec94 <_printf_i+0x19c>
 800eb22:	2958      	cmp	r1, #88	; 0x58
 800eb24:	f000 8083 	beq.w	800ec2e <_printf_i+0x136>
 800eb28:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800eb2c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800eb30:	e032      	b.n	800eb98 <_printf_i+0xa0>
 800eb32:	2964      	cmp	r1, #100	; 0x64
 800eb34:	d001      	beq.n	800eb3a <_printf_i+0x42>
 800eb36:	2969      	cmp	r1, #105	; 0x69
 800eb38:	d1f6      	bne.n	800eb28 <_printf_i+0x30>
 800eb3a:	6820      	ldr	r0, [r4, #0]
 800eb3c:	6813      	ldr	r3, [r2, #0]
 800eb3e:	0605      	lsls	r5, r0, #24
 800eb40:	f103 0104 	add.w	r1, r3, #4
 800eb44:	d52a      	bpl.n	800eb9c <_printf_i+0xa4>
 800eb46:	681b      	ldr	r3, [r3, #0]
 800eb48:	6011      	str	r1, [r2, #0]
 800eb4a:	2b00      	cmp	r3, #0
 800eb4c:	da03      	bge.n	800eb56 <_printf_i+0x5e>
 800eb4e:	222d      	movs	r2, #45	; 0x2d
 800eb50:	425b      	negs	r3, r3
 800eb52:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800eb56:	486f      	ldr	r0, [pc, #444]	; (800ed14 <_printf_i+0x21c>)
 800eb58:	220a      	movs	r2, #10
 800eb5a:	e039      	b.n	800ebd0 <_printf_i+0xd8>
 800eb5c:	2973      	cmp	r1, #115	; 0x73
 800eb5e:	f000 809d 	beq.w	800ec9c <_printf_i+0x1a4>
 800eb62:	d808      	bhi.n	800eb76 <_printf_i+0x7e>
 800eb64:	296f      	cmp	r1, #111	; 0x6f
 800eb66:	d020      	beq.n	800ebaa <_printf_i+0xb2>
 800eb68:	2970      	cmp	r1, #112	; 0x70
 800eb6a:	d1dd      	bne.n	800eb28 <_printf_i+0x30>
 800eb6c:	6823      	ldr	r3, [r4, #0]
 800eb6e:	f043 0320 	orr.w	r3, r3, #32
 800eb72:	6023      	str	r3, [r4, #0]
 800eb74:	e003      	b.n	800eb7e <_printf_i+0x86>
 800eb76:	2975      	cmp	r1, #117	; 0x75
 800eb78:	d017      	beq.n	800ebaa <_printf_i+0xb2>
 800eb7a:	2978      	cmp	r1, #120	; 0x78
 800eb7c:	d1d4      	bne.n	800eb28 <_printf_i+0x30>
 800eb7e:	2378      	movs	r3, #120	; 0x78
 800eb80:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800eb84:	4864      	ldr	r0, [pc, #400]	; (800ed18 <_printf_i+0x220>)
 800eb86:	e055      	b.n	800ec34 <_printf_i+0x13c>
 800eb88:	6813      	ldr	r3, [r2, #0]
 800eb8a:	1d19      	adds	r1, r3, #4
 800eb8c:	681b      	ldr	r3, [r3, #0]
 800eb8e:	6011      	str	r1, [r2, #0]
 800eb90:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800eb94:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800eb98:	2301      	movs	r3, #1
 800eb9a:	e08c      	b.n	800ecb6 <_printf_i+0x1be>
 800eb9c:	681b      	ldr	r3, [r3, #0]
 800eb9e:	6011      	str	r1, [r2, #0]
 800eba0:	f010 0f40 	tst.w	r0, #64	; 0x40
 800eba4:	bf18      	it	ne
 800eba6:	b21b      	sxthne	r3, r3
 800eba8:	e7cf      	b.n	800eb4a <_printf_i+0x52>
 800ebaa:	6813      	ldr	r3, [r2, #0]
 800ebac:	6825      	ldr	r5, [r4, #0]
 800ebae:	1d18      	adds	r0, r3, #4
 800ebb0:	6010      	str	r0, [r2, #0]
 800ebb2:	0628      	lsls	r0, r5, #24
 800ebb4:	d501      	bpl.n	800ebba <_printf_i+0xc2>
 800ebb6:	681b      	ldr	r3, [r3, #0]
 800ebb8:	e002      	b.n	800ebc0 <_printf_i+0xc8>
 800ebba:	0668      	lsls	r0, r5, #25
 800ebbc:	d5fb      	bpl.n	800ebb6 <_printf_i+0xbe>
 800ebbe:	881b      	ldrh	r3, [r3, #0]
 800ebc0:	4854      	ldr	r0, [pc, #336]	; (800ed14 <_printf_i+0x21c>)
 800ebc2:	296f      	cmp	r1, #111	; 0x6f
 800ebc4:	bf14      	ite	ne
 800ebc6:	220a      	movne	r2, #10
 800ebc8:	2208      	moveq	r2, #8
 800ebca:	2100      	movs	r1, #0
 800ebcc:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800ebd0:	6865      	ldr	r5, [r4, #4]
 800ebd2:	60a5      	str	r5, [r4, #8]
 800ebd4:	2d00      	cmp	r5, #0
 800ebd6:	f2c0 8095 	blt.w	800ed04 <_printf_i+0x20c>
 800ebda:	6821      	ldr	r1, [r4, #0]
 800ebdc:	f021 0104 	bic.w	r1, r1, #4
 800ebe0:	6021      	str	r1, [r4, #0]
 800ebe2:	2b00      	cmp	r3, #0
 800ebe4:	d13d      	bne.n	800ec62 <_printf_i+0x16a>
 800ebe6:	2d00      	cmp	r5, #0
 800ebe8:	f040 808e 	bne.w	800ed08 <_printf_i+0x210>
 800ebec:	4665      	mov	r5, ip
 800ebee:	2a08      	cmp	r2, #8
 800ebf0:	d10b      	bne.n	800ec0a <_printf_i+0x112>
 800ebf2:	6823      	ldr	r3, [r4, #0]
 800ebf4:	07db      	lsls	r3, r3, #31
 800ebf6:	d508      	bpl.n	800ec0a <_printf_i+0x112>
 800ebf8:	6923      	ldr	r3, [r4, #16]
 800ebfa:	6862      	ldr	r2, [r4, #4]
 800ebfc:	429a      	cmp	r2, r3
 800ebfe:	bfde      	ittt	le
 800ec00:	2330      	movle	r3, #48	; 0x30
 800ec02:	f805 3c01 	strble.w	r3, [r5, #-1]
 800ec06:	f105 35ff 	addle.w	r5, r5, #4294967295
 800ec0a:	ebac 0305 	sub.w	r3, ip, r5
 800ec0e:	6123      	str	r3, [r4, #16]
 800ec10:	f8cd 8000 	str.w	r8, [sp]
 800ec14:	463b      	mov	r3, r7
 800ec16:	aa03      	add	r2, sp, #12
 800ec18:	4621      	mov	r1, r4
 800ec1a:	4630      	mov	r0, r6
 800ec1c:	f7ff fef6 	bl	800ea0c <_printf_common>
 800ec20:	3001      	adds	r0, #1
 800ec22:	d14d      	bne.n	800ecc0 <_printf_i+0x1c8>
 800ec24:	f04f 30ff 	mov.w	r0, #4294967295
 800ec28:	b005      	add	sp, #20
 800ec2a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ec2e:	4839      	ldr	r0, [pc, #228]	; (800ed14 <_printf_i+0x21c>)
 800ec30:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800ec34:	6813      	ldr	r3, [r2, #0]
 800ec36:	6821      	ldr	r1, [r4, #0]
 800ec38:	1d1d      	adds	r5, r3, #4
 800ec3a:	681b      	ldr	r3, [r3, #0]
 800ec3c:	6015      	str	r5, [r2, #0]
 800ec3e:	060a      	lsls	r2, r1, #24
 800ec40:	d50b      	bpl.n	800ec5a <_printf_i+0x162>
 800ec42:	07ca      	lsls	r2, r1, #31
 800ec44:	bf44      	itt	mi
 800ec46:	f041 0120 	orrmi.w	r1, r1, #32
 800ec4a:	6021      	strmi	r1, [r4, #0]
 800ec4c:	b91b      	cbnz	r3, 800ec56 <_printf_i+0x15e>
 800ec4e:	6822      	ldr	r2, [r4, #0]
 800ec50:	f022 0220 	bic.w	r2, r2, #32
 800ec54:	6022      	str	r2, [r4, #0]
 800ec56:	2210      	movs	r2, #16
 800ec58:	e7b7      	b.n	800ebca <_printf_i+0xd2>
 800ec5a:	064d      	lsls	r5, r1, #25
 800ec5c:	bf48      	it	mi
 800ec5e:	b29b      	uxthmi	r3, r3
 800ec60:	e7ef      	b.n	800ec42 <_printf_i+0x14a>
 800ec62:	4665      	mov	r5, ip
 800ec64:	fbb3 f1f2 	udiv	r1, r3, r2
 800ec68:	fb02 3311 	mls	r3, r2, r1, r3
 800ec6c:	5cc3      	ldrb	r3, [r0, r3]
 800ec6e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800ec72:	460b      	mov	r3, r1
 800ec74:	2900      	cmp	r1, #0
 800ec76:	d1f5      	bne.n	800ec64 <_printf_i+0x16c>
 800ec78:	e7b9      	b.n	800ebee <_printf_i+0xf6>
 800ec7a:	6813      	ldr	r3, [r2, #0]
 800ec7c:	6825      	ldr	r5, [r4, #0]
 800ec7e:	6961      	ldr	r1, [r4, #20]
 800ec80:	1d18      	adds	r0, r3, #4
 800ec82:	6010      	str	r0, [r2, #0]
 800ec84:	0628      	lsls	r0, r5, #24
 800ec86:	681b      	ldr	r3, [r3, #0]
 800ec88:	d501      	bpl.n	800ec8e <_printf_i+0x196>
 800ec8a:	6019      	str	r1, [r3, #0]
 800ec8c:	e002      	b.n	800ec94 <_printf_i+0x19c>
 800ec8e:	066a      	lsls	r2, r5, #25
 800ec90:	d5fb      	bpl.n	800ec8a <_printf_i+0x192>
 800ec92:	8019      	strh	r1, [r3, #0]
 800ec94:	2300      	movs	r3, #0
 800ec96:	6123      	str	r3, [r4, #16]
 800ec98:	4665      	mov	r5, ip
 800ec9a:	e7b9      	b.n	800ec10 <_printf_i+0x118>
 800ec9c:	6813      	ldr	r3, [r2, #0]
 800ec9e:	1d19      	adds	r1, r3, #4
 800eca0:	6011      	str	r1, [r2, #0]
 800eca2:	681d      	ldr	r5, [r3, #0]
 800eca4:	6862      	ldr	r2, [r4, #4]
 800eca6:	2100      	movs	r1, #0
 800eca8:	4628      	mov	r0, r5
 800ecaa:	f7f1 faa9 	bl	8000200 <memchr>
 800ecae:	b108      	cbz	r0, 800ecb4 <_printf_i+0x1bc>
 800ecb0:	1b40      	subs	r0, r0, r5
 800ecb2:	6060      	str	r0, [r4, #4]
 800ecb4:	6863      	ldr	r3, [r4, #4]
 800ecb6:	6123      	str	r3, [r4, #16]
 800ecb8:	2300      	movs	r3, #0
 800ecba:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ecbe:	e7a7      	b.n	800ec10 <_printf_i+0x118>
 800ecc0:	6923      	ldr	r3, [r4, #16]
 800ecc2:	462a      	mov	r2, r5
 800ecc4:	4639      	mov	r1, r7
 800ecc6:	4630      	mov	r0, r6
 800ecc8:	47c0      	blx	r8
 800ecca:	3001      	adds	r0, #1
 800eccc:	d0aa      	beq.n	800ec24 <_printf_i+0x12c>
 800ecce:	6823      	ldr	r3, [r4, #0]
 800ecd0:	079b      	lsls	r3, r3, #30
 800ecd2:	d413      	bmi.n	800ecfc <_printf_i+0x204>
 800ecd4:	68e0      	ldr	r0, [r4, #12]
 800ecd6:	9b03      	ldr	r3, [sp, #12]
 800ecd8:	4298      	cmp	r0, r3
 800ecda:	bfb8      	it	lt
 800ecdc:	4618      	movlt	r0, r3
 800ecde:	e7a3      	b.n	800ec28 <_printf_i+0x130>
 800ece0:	2301      	movs	r3, #1
 800ece2:	464a      	mov	r2, r9
 800ece4:	4639      	mov	r1, r7
 800ece6:	4630      	mov	r0, r6
 800ece8:	47c0      	blx	r8
 800ecea:	3001      	adds	r0, #1
 800ecec:	d09a      	beq.n	800ec24 <_printf_i+0x12c>
 800ecee:	3501      	adds	r5, #1
 800ecf0:	68e3      	ldr	r3, [r4, #12]
 800ecf2:	9a03      	ldr	r2, [sp, #12]
 800ecf4:	1a9b      	subs	r3, r3, r2
 800ecf6:	42ab      	cmp	r3, r5
 800ecf8:	dcf2      	bgt.n	800ece0 <_printf_i+0x1e8>
 800ecfa:	e7eb      	b.n	800ecd4 <_printf_i+0x1dc>
 800ecfc:	2500      	movs	r5, #0
 800ecfe:	f104 0919 	add.w	r9, r4, #25
 800ed02:	e7f5      	b.n	800ecf0 <_printf_i+0x1f8>
 800ed04:	2b00      	cmp	r3, #0
 800ed06:	d1ac      	bne.n	800ec62 <_printf_i+0x16a>
 800ed08:	7803      	ldrb	r3, [r0, #0]
 800ed0a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800ed0e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ed12:	e76c      	b.n	800ebee <_printf_i+0xf6>
 800ed14:	08012702 	.word	0x08012702
 800ed18:	08012713 	.word	0x08012713

0800ed1c <_scanf_float>:
 800ed1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ed20:	469a      	mov	sl, r3
 800ed22:	688b      	ldr	r3, [r1, #8]
 800ed24:	4616      	mov	r6, r2
 800ed26:	1e5a      	subs	r2, r3, #1
 800ed28:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800ed2c:	b087      	sub	sp, #28
 800ed2e:	bf83      	ittte	hi
 800ed30:	f46f 72ae 	mvnhi.w	r2, #348	; 0x15c
 800ed34:	189b      	addhi	r3, r3, r2
 800ed36:	9301      	strhi	r3, [sp, #4]
 800ed38:	2300      	movls	r3, #0
 800ed3a:	bf86      	itte	hi
 800ed3c:	f240 135d 	movwhi	r3, #349	; 0x15d
 800ed40:	608b      	strhi	r3, [r1, #8]
 800ed42:	9301      	strls	r3, [sp, #4]
 800ed44:	680b      	ldr	r3, [r1, #0]
 800ed46:	4688      	mov	r8, r1
 800ed48:	f04f 0b00 	mov.w	fp, #0
 800ed4c:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800ed50:	f848 3b1c 	str.w	r3, [r8], #28
 800ed54:	e9cd bb03 	strd	fp, fp, [sp, #12]
 800ed58:	4607      	mov	r7, r0
 800ed5a:	460c      	mov	r4, r1
 800ed5c:	4645      	mov	r5, r8
 800ed5e:	465a      	mov	r2, fp
 800ed60:	46d9      	mov	r9, fp
 800ed62:	f8cd b008 	str.w	fp, [sp, #8]
 800ed66:	68a1      	ldr	r1, [r4, #8]
 800ed68:	b181      	cbz	r1, 800ed8c <_scanf_float+0x70>
 800ed6a:	6833      	ldr	r3, [r6, #0]
 800ed6c:	781b      	ldrb	r3, [r3, #0]
 800ed6e:	2b49      	cmp	r3, #73	; 0x49
 800ed70:	d071      	beq.n	800ee56 <_scanf_float+0x13a>
 800ed72:	d84d      	bhi.n	800ee10 <_scanf_float+0xf4>
 800ed74:	2b39      	cmp	r3, #57	; 0x39
 800ed76:	d840      	bhi.n	800edfa <_scanf_float+0xde>
 800ed78:	2b31      	cmp	r3, #49	; 0x31
 800ed7a:	f080 8088 	bcs.w	800ee8e <_scanf_float+0x172>
 800ed7e:	2b2d      	cmp	r3, #45	; 0x2d
 800ed80:	f000 8090 	beq.w	800eea4 <_scanf_float+0x188>
 800ed84:	d815      	bhi.n	800edb2 <_scanf_float+0x96>
 800ed86:	2b2b      	cmp	r3, #43	; 0x2b
 800ed88:	f000 808c 	beq.w	800eea4 <_scanf_float+0x188>
 800ed8c:	f1b9 0f00 	cmp.w	r9, #0
 800ed90:	d003      	beq.n	800ed9a <_scanf_float+0x7e>
 800ed92:	6823      	ldr	r3, [r4, #0]
 800ed94:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800ed98:	6023      	str	r3, [r4, #0]
 800ed9a:	3a01      	subs	r2, #1
 800ed9c:	2a01      	cmp	r2, #1
 800ed9e:	f200 80ea 	bhi.w	800ef76 <_scanf_float+0x25a>
 800eda2:	4545      	cmp	r5, r8
 800eda4:	f200 80dc 	bhi.w	800ef60 <_scanf_float+0x244>
 800eda8:	2601      	movs	r6, #1
 800edaa:	4630      	mov	r0, r6
 800edac:	b007      	add	sp, #28
 800edae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800edb2:	2b2e      	cmp	r3, #46	; 0x2e
 800edb4:	f000 809f 	beq.w	800eef6 <_scanf_float+0x1da>
 800edb8:	2b30      	cmp	r3, #48	; 0x30
 800edba:	d1e7      	bne.n	800ed8c <_scanf_float+0x70>
 800edbc:	6820      	ldr	r0, [r4, #0]
 800edbe:	f410 7f80 	tst.w	r0, #256	; 0x100
 800edc2:	d064      	beq.n	800ee8e <_scanf_float+0x172>
 800edc4:	9b01      	ldr	r3, [sp, #4]
 800edc6:	f020 0080 	bic.w	r0, r0, #128	; 0x80
 800edca:	6020      	str	r0, [r4, #0]
 800edcc:	f109 0901 	add.w	r9, r9, #1
 800edd0:	b11b      	cbz	r3, 800edda <_scanf_float+0xbe>
 800edd2:	3b01      	subs	r3, #1
 800edd4:	3101      	adds	r1, #1
 800edd6:	9301      	str	r3, [sp, #4]
 800edd8:	60a1      	str	r1, [r4, #8]
 800edda:	68a3      	ldr	r3, [r4, #8]
 800eddc:	3b01      	subs	r3, #1
 800edde:	60a3      	str	r3, [r4, #8]
 800ede0:	6923      	ldr	r3, [r4, #16]
 800ede2:	3301      	adds	r3, #1
 800ede4:	6123      	str	r3, [r4, #16]
 800ede6:	6873      	ldr	r3, [r6, #4]
 800ede8:	3b01      	subs	r3, #1
 800edea:	2b00      	cmp	r3, #0
 800edec:	6073      	str	r3, [r6, #4]
 800edee:	f340 80ac 	ble.w	800ef4a <_scanf_float+0x22e>
 800edf2:	6833      	ldr	r3, [r6, #0]
 800edf4:	3301      	adds	r3, #1
 800edf6:	6033      	str	r3, [r6, #0]
 800edf8:	e7b5      	b.n	800ed66 <_scanf_float+0x4a>
 800edfa:	2b45      	cmp	r3, #69	; 0x45
 800edfc:	f000 8085 	beq.w	800ef0a <_scanf_float+0x1ee>
 800ee00:	2b46      	cmp	r3, #70	; 0x46
 800ee02:	d06a      	beq.n	800eeda <_scanf_float+0x1be>
 800ee04:	2b41      	cmp	r3, #65	; 0x41
 800ee06:	d1c1      	bne.n	800ed8c <_scanf_float+0x70>
 800ee08:	2a01      	cmp	r2, #1
 800ee0a:	d1bf      	bne.n	800ed8c <_scanf_float+0x70>
 800ee0c:	2202      	movs	r2, #2
 800ee0e:	e046      	b.n	800ee9e <_scanf_float+0x182>
 800ee10:	2b65      	cmp	r3, #101	; 0x65
 800ee12:	d07a      	beq.n	800ef0a <_scanf_float+0x1ee>
 800ee14:	d818      	bhi.n	800ee48 <_scanf_float+0x12c>
 800ee16:	2b54      	cmp	r3, #84	; 0x54
 800ee18:	d066      	beq.n	800eee8 <_scanf_float+0x1cc>
 800ee1a:	d811      	bhi.n	800ee40 <_scanf_float+0x124>
 800ee1c:	2b4e      	cmp	r3, #78	; 0x4e
 800ee1e:	d1b5      	bne.n	800ed8c <_scanf_float+0x70>
 800ee20:	2a00      	cmp	r2, #0
 800ee22:	d146      	bne.n	800eeb2 <_scanf_float+0x196>
 800ee24:	f1b9 0f00 	cmp.w	r9, #0
 800ee28:	d145      	bne.n	800eeb6 <_scanf_float+0x19a>
 800ee2a:	6821      	ldr	r1, [r4, #0]
 800ee2c:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 800ee30:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 800ee34:	d13f      	bne.n	800eeb6 <_scanf_float+0x19a>
 800ee36:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 800ee3a:	6021      	str	r1, [r4, #0]
 800ee3c:	2201      	movs	r2, #1
 800ee3e:	e02e      	b.n	800ee9e <_scanf_float+0x182>
 800ee40:	2b59      	cmp	r3, #89	; 0x59
 800ee42:	d01e      	beq.n	800ee82 <_scanf_float+0x166>
 800ee44:	2b61      	cmp	r3, #97	; 0x61
 800ee46:	e7de      	b.n	800ee06 <_scanf_float+0xea>
 800ee48:	2b6e      	cmp	r3, #110	; 0x6e
 800ee4a:	d0e9      	beq.n	800ee20 <_scanf_float+0x104>
 800ee4c:	d815      	bhi.n	800ee7a <_scanf_float+0x15e>
 800ee4e:	2b66      	cmp	r3, #102	; 0x66
 800ee50:	d043      	beq.n	800eeda <_scanf_float+0x1be>
 800ee52:	2b69      	cmp	r3, #105	; 0x69
 800ee54:	d19a      	bne.n	800ed8c <_scanf_float+0x70>
 800ee56:	f1bb 0f00 	cmp.w	fp, #0
 800ee5a:	d138      	bne.n	800eece <_scanf_float+0x1b2>
 800ee5c:	f1b9 0f00 	cmp.w	r9, #0
 800ee60:	d197      	bne.n	800ed92 <_scanf_float+0x76>
 800ee62:	6821      	ldr	r1, [r4, #0]
 800ee64:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 800ee68:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 800ee6c:	d195      	bne.n	800ed9a <_scanf_float+0x7e>
 800ee6e:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 800ee72:	6021      	str	r1, [r4, #0]
 800ee74:	f04f 0b01 	mov.w	fp, #1
 800ee78:	e011      	b.n	800ee9e <_scanf_float+0x182>
 800ee7a:	2b74      	cmp	r3, #116	; 0x74
 800ee7c:	d034      	beq.n	800eee8 <_scanf_float+0x1cc>
 800ee7e:	2b79      	cmp	r3, #121	; 0x79
 800ee80:	d184      	bne.n	800ed8c <_scanf_float+0x70>
 800ee82:	f1bb 0f07 	cmp.w	fp, #7
 800ee86:	d181      	bne.n	800ed8c <_scanf_float+0x70>
 800ee88:	f04f 0b08 	mov.w	fp, #8
 800ee8c:	e007      	b.n	800ee9e <_scanf_float+0x182>
 800ee8e:	eb12 0f0b 	cmn.w	r2, fp
 800ee92:	f47f af7b 	bne.w	800ed8c <_scanf_float+0x70>
 800ee96:	6821      	ldr	r1, [r4, #0]
 800ee98:	f421 71c0 	bic.w	r1, r1, #384	; 0x180
 800ee9c:	6021      	str	r1, [r4, #0]
 800ee9e:	702b      	strb	r3, [r5, #0]
 800eea0:	3501      	adds	r5, #1
 800eea2:	e79a      	b.n	800edda <_scanf_float+0xbe>
 800eea4:	6821      	ldr	r1, [r4, #0]
 800eea6:	0608      	lsls	r0, r1, #24
 800eea8:	f57f af70 	bpl.w	800ed8c <_scanf_float+0x70>
 800eeac:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800eeb0:	e7f4      	b.n	800ee9c <_scanf_float+0x180>
 800eeb2:	2a02      	cmp	r2, #2
 800eeb4:	d047      	beq.n	800ef46 <_scanf_float+0x22a>
 800eeb6:	f1bb 0f01 	cmp.w	fp, #1
 800eeba:	d003      	beq.n	800eec4 <_scanf_float+0x1a8>
 800eebc:	f1bb 0f04 	cmp.w	fp, #4
 800eec0:	f47f af64 	bne.w	800ed8c <_scanf_float+0x70>
 800eec4:	f10b 0b01 	add.w	fp, fp, #1
 800eec8:	fa5f fb8b 	uxtb.w	fp, fp
 800eecc:	e7e7      	b.n	800ee9e <_scanf_float+0x182>
 800eece:	f1bb 0f03 	cmp.w	fp, #3
 800eed2:	d0f7      	beq.n	800eec4 <_scanf_float+0x1a8>
 800eed4:	f1bb 0f05 	cmp.w	fp, #5
 800eed8:	e7f2      	b.n	800eec0 <_scanf_float+0x1a4>
 800eeda:	f1bb 0f02 	cmp.w	fp, #2
 800eede:	f47f af55 	bne.w	800ed8c <_scanf_float+0x70>
 800eee2:	f04f 0b03 	mov.w	fp, #3
 800eee6:	e7da      	b.n	800ee9e <_scanf_float+0x182>
 800eee8:	f1bb 0f06 	cmp.w	fp, #6
 800eeec:	f47f af4e 	bne.w	800ed8c <_scanf_float+0x70>
 800eef0:	f04f 0b07 	mov.w	fp, #7
 800eef4:	e7d3      	b.n	800ee9e <_scanf_float+0x182>
 800eef6:	6821      	ldr	r1, [r4, #0]
 800eef8:	0588      	lsls	r0, r1, #22
 800eefa:	f57f af47 	bpl.w	800ed8c <_scanf_float+0x70>
 800eefe:	f421 7120 	bic.w	r1, r1, #640	; 0x280
 800ef02:	6021      	str	r1, [r4, #0]
 800ef04:	f8cd 9008 	str.w	r9, [sp, #8]
 800ef08:	e7c9      	b.n	800ee9e <_scanf_float+0x182>
 800ef0a:	6821      	ldr	r1, [r4, #0]
 800ef0c:	f401 60a0 	and.w	r0, r1, #1280	; 0x500
 800ef10:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 800ef14:	d006      	beq.n	800ef24 <_scanf_float+0x208>
 800ef16:	0548      	lsls	r0, r1, #21
 800ef18:	f57f af38 	bpl.w	800ed8c <_scanf_float+0x70>
 800ef1c:	f1b9 0f00 	cmp.w	r9, #0
 800ef20:	f43f af3b 	beq.w	800ed9a <_scanf_float+0x7e>
 800ef24:	0588      	lsls	r0, r1, #22
 800ef26:	bf58      	it	pl
 800ef28:	9802      	ldrpl	r0, [sp, #8]
 800ef2a:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 800ef2e:	bf58      	it	pl
 800ef30:	eba9 0000 	subpl.w	r0, r9, r0
 800ef34:	f441 71c0 	orr.w	r1, r1, #384	; 0x180
 800ef38:	bf58      	it	pl
 800ef3a:	e9cd 0503 	strdpl	r0, r5, [sp, #12]
 800ef3e:	6021      	str	r1, [r4, #0]
 800ef40:	f04f 0900 	mov.w	r9, #0
 800ef44:	e7ab      	b.n	800ee9e <_scanf_float+0x182>
 800ef46:	2203      	movs	r2, #3
 800ef48:	e7a9      	b.n	800ee9e <_scanf_float+0x182>
 800ef4a:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800ef4e:	9205      	str	r2, [sp, #20]
 800ef50:	4631      	mov	r1, r6
 800ef52:	4638      	mov	r0, r7
 800ef54:	4798      	blx	r3
 800ef56:	9a05      	ldr	r2, [sp, #20]
 800ef58:	2800      	cmp	r0, #0
 800ef5a:	f43f af04 	beq.w	800ed66 <_scanf_float+0x4a>
 800ef5e:	e715      	b.n	800ed8c <_scanf_float+0x70>
 800ef60:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800ef64:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 800ef68:	4632      	mov	r2, r6
 800ef6a:	4638      	mov	r0, r7
 800ef6c:	4798      	blx	r3
 800ef6e:	6923      	ldr	r3, [r4, #16]
 800ef70:	3b01      	subs	r3, #1
 800ef72:	6123      	str	r3, [r4, #16]
 800ef74:	e715      	b.n	800eda2 <_scanf_float+0x86>
 800ef76:	f10b 33ff 	add.w	r3, fp, #4294967295
 800ef7a:	2b06      	cmp	r3, #6
 800ef7c:	d80a      	bhi.n	800ef94 <_scanf_float+0x278>
 800ef7e:	f1bb 0f02 	cmp.w	fp, #2
 800ef82:	d968      	bls.n	800f056 <_scanf_float+0x33a>
 800ef84:	f1ab 0b03 	sub.w	fp, fp, #3
 800ef88:	fa5f fb8b 	uxtb.w	fp, fp
 800ef8c:	eba5 0b0b 	sub.w	fp, r5, fp
 800ef90:	455d      	cmp	r5, fp
 800ef92:	d14b      	bne.n	800f02c <_scanf_float+0x310>
 800ef94:	6823      	ldr	r3, [r4, #0]
 800ef96:	05da      	lsls	r2, r3, #23
 800ef98:	d51f      	bpl.n	800efda <_scanf_float+0x2be>
 800ef9a:	055b      	lsls	r3, r3, #21
 800ef9c:	d468      	bmi.n	800f070 <_scanf_float+0x354>
 800ef9e:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800efa2:	6923      	ldr	r3, [r4, #16]
 800efa4:	2965      	cmp	r1, #101	; 0x65
 800efa6:	f103 33ff 	add.w	r3, r3, #4294967295
 800efaa:	f105 3bff 	add.w	fp, r5, #4294967295
 800efae:	6123      	str	r3, [r4, #16]
 800efb0:	d00d      	beq.n	800efce <_scanf_float+0x2b2>
 800efb2:	2945      	cmp	r1, #69	; 0x45
 800efb4:	d00b      	beq.n	800efce <_scanf_float+0x2b2>
 800efb6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800efba:	4632      	mov	r2, r6
 800efbc:	4638      	mov	r0, r7
 800efbe:	4798      	blx	r3
 800efc0:	6923      	ldr	r3, [r4, #16]
 800efc2:	f815 1c02 	ldrb.w	r1, [r5, #-2]
 800efc6:	3b01      	subs	r3, #1
 800efc8:	f1a5 0b02 	sub.w	fp, r5, #2
 800efcc:	6123      	str	r3, [r4, #16]
 800efce:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800efd2:	4632      	mov	r2, r6
 800efd4:	4638      	mov	r0, r7
 800efd6:	4798      	blx	r3
 800efd8:	465d      	mov	r5, fp
 800efda:	6826      	ldr	r6, [r4, #0]
 800efdc:	f016 0610 	ands.w	r6, r6, #16
 800efe0:	d17a      	bne.n	800f0d8 <_scanf_float+0x3bc>
 800efe2:	702e      	strb	r6, [r5, #0]
 800efe4:	6823      	ldr	r3, [r4, #0]
 800efe6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800efea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800efee:	d142      	bne.n	800f076 <_scanf_float+0x35a>
 800eff0:	9b02      	ldr	r3, [sp, #8]
 800eff2:	eba9 0303 	sub.w	r3, r9, r3
 800eff6:	425a      	negs	r2, r3
 800eff8:	2b00      	cmp	r3, #0
 800effa:	d149      	bne.n	800f090 <_scanf_float+0x374>
 800effc:	2200      	movs	r2, #0
 800effe:	4641      	mov	r1, r8
 800f000:	4638      	mov	r0, r7
 800f002:	f000 fef1 	bl	800fde8 <_strtod_r>
 800f006:	6825      	ldr	r5, [r4, #0]
 800f008:	f8da 3000 	ldr.w	r3, [sl]
 800f00c:	f015 0f02 	tst.w	r5, #2
 800f010:	f103 0204 	add.w	r2, r3, #4
 800f014:	ec59 8b10 	vmov	r8, r9, d0
 800f018:	f8ca 2000 	str.w	r2, [sl]
 800f01c:	d043      	beq.n	800f0a6 <_scanf_float+0x38a>
 800f01e:	681b      	ldr	r3, [r3, #0]
 800f020:	e9c3 8900 	strd	r8, r9, [r3]
 800f024:	68e3      	ldr	r3, [r4, #12]
 800f026:	3301      	adds	r3, #1
 800f028:	60e3      	str	r3, [r4, #12]
 800f02a:	e6be      	b.n	800edaa <_scanf_float+0x8e>
 800f02c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800f030:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 800f034:	4632      	mov	r2, r6
 800f036:	4638      	mov	r0, r7
 800f038:	4798      	blx	r3
 800f03a:	6923      	ldr	r3, [r4, #16]
 800f03c:	3b01      	subs	r3, #1
 800f03e:	6123      	str	r3, [r4, #16]
 800f040:	e7a6      	b.n	800ef90 <_scanf_float+0x274>
 800f042:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800f046:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 800f04a:	4632      	mov	r2, r6
 800f04c:	4638      	mov	r0, r7
 800f04e:	4798      	blx	r3
 800f050:	6923      	ldr	r3, [r4, #16]
 800f052:	3b01      	subs	r3, #1
 800f054:	6123      	str	r3, [r4, #16]
 800f056:	4545      	cmp	r5, r8
 800f058:	d8f3      	bhi.n	800f042 <_scanf_float+0x326>
 800f05a:	e6a5      	b.n	800eda8 <_scanf_float+0x8c>
 800f05c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800f060:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 800f064:	4632      	mov	r2, r6
 800f066:	4638      	mov	r0, r7
 800f068:	4798      	blx	r3
 800f06a:	6923      	ldr	r3, [r4, #16]
 800f06c:	3b01      	subs	r3, #1
 800f06e:	6123      	str	r3, [r4, #16]
 800f070:	4545      	cmp	r5, r8
 800f072:	d8f3      	bhi.n	800f05c <_scanf_float+0x340>
 800f074:	e698      	b.n	800eda8 <_scanf_float+0x8c>
 800f076:	9b03      	ldr	r3, [sp, #12]
 800f078:	2b00      	cmp	r3, #0
 800f07a:	d0bf      	beq.n	800effc <_scanf_float+0x2e0>
 800f07c:	9904      	ldr	r1, [sp, #16]
 800f07e:	230a      	movs	r3, #10
 800f080:	4632      	mov	r2, r6
 800f082:	3101      	adds	r1, #1
 800f084:	4638      	mov	r0, r7
 800f086:	f000 ff4f 	bl	800ff28 <_strtol_r>
 800f08a:	9b03      	ldr	r3, [sp, #12]
 800f08c:	9d04      	ldr	r5, [sp, #16]
 800f08e:	1ac2      	subs	r2, r0, r3
 800f090:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800f094:	429d      	cmp	r5, r3
 800f096:	bf28      	it	cs
 800f098:	f504 75b7 	addcs.w	r5, r4, #366	; 0x16e
 800f09c:	490f      	ldr	r1, [pc, #60]	; (800f0dc <_scanf_float+0x3c0>)
 800f09e:	4628      	mov	r0, r5
 800f0a0:	f000 f834 	bl	800f10c <siprintf>
 800f0a4:	e7aa      	b.n	800effc <_scanf_float+0x2e0>
 800f0a6:	f015 0504 	ands.w	r5, r5, #4
 800f0aa:	d1b8      	bne.n	800f01e <_scanf_float+0x302>
 800f0ac:	681f      	ldr	r7, [r3, #0]
 800f0ae:	ee10 2a10 	vmov	r2, s0
 800f0b2:	464b      	mov	r3, r9
 800f0b4:	ee10 0a10 	vmov	r0, s0
 800f0b8:	4649      	mov	r1, r9
 800f0ba:	f7f1 fd47 	bl	8000b4c <__aeabi_dcmpun>
 800f0be:	b128      	cbz	r0, 800f0cc <_scanf_float+0x3b0>
 800f0c0:	4628      	mov	r0, r5
 800f0c2:	f000 f81d 	bl	800f100 <nanf>
 800f0c6:	ed87 0a00 	vstr	s0, [r7]
 800f0ca:	e7ab      	b.n	800f024 <_scanf_float+0x308>
 800f0cc:	4640      	mov	r0, r8
 800f0ce:	4649      	mov	r1, r9
 800f0d0:	f7f1 fd9a 	bl	8000c08 <__aeabi_d2f>
 800f0d4:	6038      	str	r0, [r7, #0]
 800f0d6:	e7a5      	b.n	800f024 <_scanf_float+0x308>
 800f0d8:	2600      	movs	r6, #0
 800f0da:	e666      	b.n	800edaa <_scanf_float+0x8e>
 800f0dc:	08012724 	.word	0x08012724

0800f0e0 <_sbrk_r>:
 800f0e0:	b538      	push	{r3, r4, r5, lr}
 800f0e2:	4c06      	ldr	r4, [pc, #24]	; (800f0fc <_sbrk_r+0x1c>)
 800f0e4:	2300      	movs	r3, #0
 800f0e6:	4605      	mov	r5, r0
 800f0e8:	4608      	mov	r0, r1
 800f0ea:	6023      	str	r3, [r4, #0]
 800f0ec:	f002 fe8a 	bl	8011e04 <_sbrk>
 800f0f0:	1c43      	adds	r3, r0, #1
 800f0f2:	d102      	bne.n	800f0fa <_sbrk_r+0x1a>
 800f0f4:	6823      	ldr	r3, [r4, #0]
 800f0f6:	b103      	cbz	r3, 800f0fa <_sbrk_r+0x1a>
 800f0f8:	602b      	str	r3, [r5, #0]
 800f0fa:	bd38      	pop	{r3, r4, r5, pc}
 800f0fc:	20004b94 	.word	0x20004b94

0800f100 <nanf>:
 800f100:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800f108 <nanf+0x8>
 800f104:	4770      	bx	lr
 800f106:	bf00      	nop
 800f108:	7fc00000 	.word	0x7fc00000

0800f10c <siprintf>:
 800f10c:	b40e      	push	{r1, r2, r3}
 800f10e:	b500      	push	{lr}
 800f110:	b09c      	sub	sp, #112	; 0x70
 800f112:	ab1d      	add	r3, sp, #116	; 0x74
 800f114:	9002      	str	r0, [sp, #8]
 800f116:	9006      	str	r0, [sp, #24]
 800f118:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800f11c:	4809      	ldr	r0, [pc, #36]	; (800f144 <siprintf+0x38>)
 800f11e:	9107      	str	r1, [sp, #28]
 800f120:	9104      	str	r1, [sp, #16]
 800f122:	4909      	ldr	r1, [pc, #36]	; (800f148 <siprintf+0x3c>)
 800f124:	f853 2b04 	ldr.w	r2, [r3], #4
 800f128:	9105      	str	r1, [sp, #20]
 800f12a:	6800      	ldr	r0, [r0, #0]
 800f12c:	9301      	str	r3, [sp, #4]
 800f12e:	a902      	add	r1, sp, #8
 800f130:	f002 fd1c 	bl	8011b6c <_svfiprintf_r>
 800f134:	9b02      	ldr	r3, [sp, #8]
 800f136:	2200      	movs	r2, #0
 800f138:	701a      	strb	r2, [r3, #0]
 800f13a:	b01c      	add	sp, #112	; 0x70
 800f13c:	f85d eb04 	ldr.w	lr, [sp], #4
 800f140:	b003      	add	sp, #12
 800f142:	4770      	bx	lr
 800f144:	2000017c 	.word	0x2000017c
 800f148:	ffff0208 	.word	0xffff0208

0800f14c <strchr>:
 800f14c:	b2c9      	uxtb	r1, r1
 800f14e:	4603      	mov	r3, r0
 800f150:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f154:	b11a      	cbz	r2, 800f15e <strchr+0x12>
 800f156:	428a      	cmp	r2, r1
 800f158:	d1f9      	bne.n	800f14e <strchr+0x2>
 800f15a:	4618      	mov	r0, r3
 800f15c:	4770      	bx	lr
 800f15e:	2900      	cmp	r1, #0
 800f160:	bf18      	it	ne
 800f162:	2300      	movne	r3, #0
 800f164:	e7f9      	b.n	800f15a <strchr+0xe>

0800f166 <strcpy>:
 800f166:	4603      	mov	r3, r0
 800f168:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f16c:	f803 2b01 	strb.w	r2, [r3], #1
 800f170:	2a00      	cmp	r2, #0
 800f172:	d1f9      	bne.n	800f168 <strcpy+0x2>
 800f174:	4770      	bx	lr

0800f176 <strncmp>:
 800f176:	b510      	push	{r4, lr}
 800f178:	b16a      	cbz	r2, 800f196 <strncmp+0x20>
 800f17a:	3901      	subs	r1, #1
 800f17c:	1884      	adds	r4, r0, r2
 800f17e:	f810 3b01 	ldrb.w	r3, [r0], #1
 800f182:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800f186:	4293      	cmp	r3, r2
 800f188:	d103      	bne.n	800f192 <strncmp+0x1c>
 800f18a:	42a0      	cmp	r0, r4
 800f18c:	d001      	beq.n	800f192 <strncmp+0x1c>
 800f18e:	2b00      	cmp	r3, #0
 800f190:	d1f5      	bne.n	800f17e <strncmp+0x8>
 800f192:	1a98      	subs	r0, r3, r2
 800f194:	bd10      	pop	{r4, pc}
 800f196:	4610      	mov	r0, r2
 800f198:	e7fc      	b.n	800f194 <strncmp+0x1e>

0800f19a <strncpy>:
 800f19a:	b570      	push	{r4, r5, r6, lr}
 800f19c:	3901      	subs	r1, #1
 800f19e:	4604      	mov	r4, r0
 800f1a0:	b902      	cbnz	r2, 800f1a4 <strncpy+0xa>
 800f1a2:	bd70      	pop	{r4, r5, r6, pc}
 800f1a4:	4623      	mov	r3, r4
 800f1a6:	f811 5f01 	ldrb.w	r5, [r1, #1]!
 800f1aa:	f803 5b01 	strb.w	r5, [r3], #1
 800f1ae:	1e56      	subs	r6, r2, #1
 800f1b0:	b92d      	cbnz	r5, 800f1be <strncpy+0x24>
 800f1b2:	4414      	add	r4, r2
 800f1b4:	42a3      	cmp	r3, r4
 800f1b6:	d0f4      	beq.n	800f1a2 <strncpy+0x8>
 800f1b8:	f803 5b01 	strb.w	r5, [r3], #1
 800f1bc:	e7fa      	b.n	800f1b4 <strncpy+0x1a>
 800f1be:	461c      	mov	r4, r3
 800f1c0:	4632      	mov	r2, r6
 800f1c2:	e7ed      	b.n	800f1a0 <strncpy+0x6>

0800f1c4 <sulp>:
 800f1c4:	b570      	push	{r4, r5, r6, lr}
 800f1c6:	4604      	mov	r4, r0
 800f1c8:	460d      	mov	r5, r1
 800f1ca:	ec45 4b10 	vmov	d0, r4, r5
 800f1ce:	4616      	mov	r6, r2
 800f1d0:	f002 fb30 	bl	8011834 <__ulp>
 800f1d4:	ec51 0b10 	vmov	r0, r1, d0
 800f1d8:	b17e      	cbz	r6, 800f1fa <sulp+0x36>
 800f1da:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800f1de:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800f1e2:	2b00      	cmp	r3, #0
 800f1e4:	dd09      	ble.n	800f1fa <sulp+0x36>
 800f1e6:	051b      	lsls	r3, r3, #20
 800f1e8:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800f1ec:	2400      	movs	r4, #0
 800f1ee:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800f1f2:	4622      	mov	r2, r4
 800f1f4:	462b      	mov	r3, r5
 800f1f6:	f7f1 fa0f 	bl	8000618 <__aeabi_dmul>
 800f1fa:	bd70      	pop	{r4, r5, r6, pc}
 800f1fc:	0000      	movs	r0, r0
	...

0800f200 <_strtod_l>:
 800f200:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f204:	461f      	mov	r7, r3
 800f206:	b0a1      	sub	sp, #132	; 0x84
 800f208:	2300      	movs	r3, #0
 800f20a:	4681      	mov	r9, r0
 800f20c:	4638      	mov	r0, r7
 800f20e:	460e      	mov	r6, r1
 800f210:	9217      	str	r2, [sp, #92]	; 0x5c
 800f212:	931c      	str	r3, [sp, #112]	; 0x70
 800f214:	f002 f81d 	bl	8011252 <__localeconv_l>
 800f218:	4680      	mov	r8, r0
 800f21a:	6800      	ldr	r0, [r0, #0]
 800f21c:	f7f0 ffe2 	bl	80001e4 <strlen>
 800f220:	f04f 0a00 	mov.w	sl, #0
 800f224:	4604      	mov	r4, r0
 800f226:	f04f 0b00 	mov.w	fp, #0
 800f22a:	961b      	str	r6, [sp, #108]	; 0x6c
 800f22c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800f22e:	781a      	ldrb	r2, [r3, #0]
 800f230:	2a0d      	cmp	r2, #13
 800f232:	d832      	bhi.n	800f29a <_strtod_l+0x9a>
 800f234:	2a09      	cmp	r2, #9
 800f236:	d236      	bcs.n	800f2a6 <_strtod_l+0xa6>
 800f238:	2a00      	cmp	r2, #0
 800f23a:	d03e      	beq.n	800f2ba <_strtod_l+0xba>
 800f23c:	2300      	movs	r3, #0
 800f23e:	930d      	str	r3, [sp, #52]	; 0x34
 800f240:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 800f242:	782b      	ldrb	r3, [r5, #0]
 800f244:	2b30      	cmp	r3, #48	; 0x30
 800f246:	f040 80ac 	bne.w	800f3a2 <_strtod_l+0x1a2>
 800f24a:	786b      	ldrb	r3, [r5, #1]
 800f24c:	2b58      	cmp	r3, #88	; 0x58
 800f24e:	d001      	beq.n	800f254 <_strtod_l+0x54>
 800f250:	2b78      	cmp	r3, #120	; 0x78
 800f252:	d167      	bne.n	800f324 <_strtod_l+0x124>
 800f254:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f256:	9301      	str	r3, [sp, #4]
 800f258:	ab1c      	add	r3, sp, #112	; 0x70
 800f25a:	9300      	str	r3, [sp, #0]
 800f25c:	9702      	str	r7, [sp, #8]
 800f25e:	ab1d      	add	r3, sp, #116	; 0x74
 800f260:	4a88      	ldr	r2, [pc, #544]	; (800f484 <_strtod_l+0x284>)
 800f262:	a91b      	add	r1, sp, #108	; 0x6c
 800f264:	4648      	mov	r0, r9
 800f266:	f001 fd1a 	bl	8010c9e <__gethex>
 800f26a:	f010 0407 	ands.w	r4, r0, #7
 800f26e:	4606      	mov	r6, r0
 800f270:	d005      	beq.n	800f27e <_strtod_l+0x7e>
 800f272:	2c06      	cmp	r4, #6
 800f274:	d12b      	bne.n	800f2ce <_strtod_l+0xce>
 800f276:	3501      	adds	r5, #1
 800f278:	2300      	movs	r3, #0
 800f27a:	951b      	str	r5, [sp, #108]	; 0x6c
 800f27c:	930d      	str	r3, [sp, #52]	; 0x34
 800f27e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800f280:	2b00      	cmp	r3, #0
 800f282:	f040 859a 	bne.w	800fdba <_strtod_l+0xbba>
 800f286:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f288:	b1e3      	cbz	r3, 800f2c4 <_strtod_l+0xc4>
 800f28a:	4652      	mov	r2, sl
 800f28c:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800f290:	ec43 2b10 	vmov	d0, r2, r3
 800f294:	b021      	add	sp, #132	; 0x84
 800f296:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f29a:	2a2b      	cmp	r2, #43	; 0x2b
 800f29c:	d015      	beq.n	800f2ca <_strtod_l+0xca>
 800f29e:	2a2d      	cmp	r2, #45	; 0x2d
 800f2a0:	d004      	beq.n	800f2ac <_strtod_l+0xac>
 800f2a2:	2a20      	cmp	r2, #32
 800f2a4:	d1ca      	bne.n	800f23c <_strtod_l+0x3c>
 800f2a6:	3301      	adds	r3, #1
 800f2a8:	931b      	str	r3, [sp, #108]	; 0x6c
 800f2aa:	e7bf      	b.n	800f22c <_strtod_l+0x2c>
 800f2ac:	2201      	movs	r2, #1
 800f2ae:	920d      	str	r2, [sp, #52]	; 0x34
 800f2b0:	1c5a      	adds	r2, r3, #1
 800f2b2:	921b      	str	r2, [sp, #108]	; 0x6c
 800f2b4:	785b      	ldrb	r3, [r3, #1]
 800f2b6:	2b00      	cmp	r3, #0
 800f2b8:	d1c2      	bne.n	800f240 <_strtod_l+0x40>
 800f2ba:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800f2bc:	961b      	str	r6, [sp, #108]	; 0x6c
 800f2be:	2b00      	cmp	r3, #0
 800f2c0:	f040 8579 	bne.w	800fdb6 <_strtod_l+0xbb6>
 800f2c4:	4652      	mov	r2, sl
 800f2c6:	465b      	mov	r3, fp
 800f2c8:	e7e2      	b.n	800f290 <_strtod_l+0x90>
 800f2ca:	2200      	movs	r2, #0
 800f2cc:	e7ef      	b.n	800f2ae <_strtod_l+0xae>
 800f2ce:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800f2d0:	b13a      	cbz	r2, 800f2e2 <_strtod_l+0xe2>
 800f2d2:	2135      	movs	r1, #53	; 0x35
 800f2d4:	a81e      	add	r0, sp, #120	; 0x78
 800f2d6:	f002 fba5 	bl	8011a24 <__copybits>
 800f2da:	991c      	ldr	r1, [sp, #112]	; 0x70
 800f2dc:	4648      	mov	r0, r9
 800f2de:	f002 f811 	bl	8011304 <_Bfree>
 800f2e2:	3c01      	subs	r4, #1
 800f2e4:	2c04      	cmp	r4, #4
 800f2e6:	d806      	bhi.n	800f2f6 <_strtod_l+0xf6>
 800f2e8:	e8df f004 	tbb	[pc, r4]
 800f2ec:	1714030a 	.word	0x1714030a
 800f2f0:	0a          	.byte	0x0a
 800f2f1:	00          	.byte	0x00
 800f2f2:	e9dd ab1e 	ldrd	sl, fp, [sp, #120]	; 0x78
 800f2f6:	0730      	lsls	r0, r6, #28
 800f2f8:	d5c1      	bpl.n	800f27e <_strtod_l+0x7e>
 800f2fa:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800f2fe:	e7be      	b.n	800f27e <_strtod_l+0x7e>
 800f300:	e9dd a31e 	ldrd	sl, r3, [sp, #120]	; 0x78
 800f304:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800f306:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800f30a:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800f30e:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800f312:	e7f0      	b.n	800f2f6 <_strtod_l+0xf6>
 800f314:	f8df b170 	ldr.w	fp, [pc, #368]	; 800f488 <_strtod_l+0x288>
 800f318:	e7ed      	b.n	800f2f6 <_strtod_l+0xf6>
 800f31a:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800f31e:	f04f 3aff 	mov.w	sl, #4294967295
 800f322:	e7e8      	b.n	800f2f6 <_strtod_l+0xf6>
 800f324:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800f326:	1c5a      	adds	r2, r3, #1
 800f328:	921b      	str	r2, [sp, #108]	; 0x6c
 800f32a:	785b      	ldrb	r3, [r3, #1]
 800f32c:	2b30      	cmp	r3, #48	; 0x30
 800f32e:	d0f9      	beq.n	800f324 <_strtod_l+0x124>
 800f330:	2b00      	cmp	r3, #0
 800f332:	d0a4      	beq.n	800f27e <_strtod_l+0x7e>
 800f334:	2301      	movs	r3, #1
 800f336:	2500      	movs	r5, #0
 800f338:	9306      	str	r3, [sp, #24]
 800f33a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800f33c:	9308      	str	r3, [sp, #32]
 800f33e:	9507      	str	r5, [sp, #28]
 800f340:	9505      	str	r5, [sp, #20]
 800f342:	220a      	movs	r2, #10
 800f344:	981b      	ldr	r0, [sp, #108]	; 0x6c
 800f346:	7807      	ldrb	r7, [r0, #0]
 800f348:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 800f34c:	b2d9      	uxtb	r1, r3
 800f34e:	2909      	cmp	r1, #9
 800f350:	d929      	bls.n	800f3a6 <_strtod_l+0x1a6>
 800f352:	4622      	mov	r2, r4
 800f354:	f8d8 1000 	ldr.w	r1, [r8]
 800f358:	f7ff ff0d 	bl	800f176 <strncmp>
 800f35c:	2800      	cmp	r0, #0
 800f35e:	d031      	beq.n	800f3c4 <_strtod_l+0x1c4>
 800f360:	2000      	movs	r0, #0
 800f362:	9c05      	ldr	r4, [sp, #20]
 800f364:	9004      	str	r0, [sp, #16]
 800f366:	463b      	mov	r3, r7
 800f368:	4602      	mov	r2, r0
 800f36a:	2b65      	cmp	r3, #101	; 0x65
 800f36c:	d001      	beq.n	800f372 <_strtod_l+0x172>
 800f36e:	2b45      	cmp	r3, #69	; 0x45
 800f370:	d114      	bne.n	800f39c <_strtod_l+0x19c>
 800f372:	b924      	cbnz	r4, 800f37e <_strtod_l+0x17e>
 800f374:	b910      	cbnz	r0, 800f37c <_strtod_l+0x17c>
 800f376:	9b06      	ldr	r3, [sp, #24]
 800f378:	2b00      	cmp	r3, #0
 800f37a:	d09e      	beq.n	800f2ba <_strtod_l+0xba>
 800f37c:	2400      	movs	r4, #0
 800f37e:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 800f380:	1c73      	adds	r3, r6, #1
 800f382:	931b      	str	r3, [sp, #108]	; 0x6c
 800f384:	7873      	ldrb	r3, [r6, #1]
 800f386:	2b2b      	cmp	r3, #43	; 0x2b
 800f388:	d078      	beq.n	800f47c <_strtod_l+0x27c>
 800f38a:	2b2d      	cmp	r3, #45	; 0x2d
 800f38c:	d070      	beq.n	800f470 <_strtod_l+0x270>
 800f38e:	f04f 0c00 	mov.w	ip, #0
 800f392:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 800f396:	2f09      	cmp	r7, #9
 800f398:	d97c      	bls.n	800f494 <_strtod_l+0x294>
 800f39a:	961b      	str	r6, [sp, #108]	; 0x6c
 800f39c:	f04f 0e00 	mov.w	lr, #0
 800f3a0:	e09a      	b.n	800f4d8 <_strtod_l+0x2d8>
 800f3a2:	2300      	movs	r3, #0
 800f3a4:	e7c7      	b.n	800f336 <_strtod_l+0x136>
 800f3a6:	9905      	ldr	r1, [sp, #20]
 800f3a8:	2908      	cmp	r1, #8
 800f3aa:	bfdd      	ittte	le
 800f3ac:	9907      	ldrle	r1, [sp, #28]
 800f3ae:	fb02 3301 	mlale	r3, r2, r1, r3
 800f3b2:	9307      	strle	r3, [sp, #28]
 800f3b4:	fb02 3505 	mlagt	r5, r2, r5, r3
 800f3b8:	9b05      	ldr	r3, [sp, #20]
 800f3ba:	3001      	adds	r0, #1
 800f3bc:	3301      	adds	r3, #1
 800f3be:	9305      	str	r3, [sp, #20]
 800f3c0:	901b      	str	r0, [sp, #108]	; 0x6c
 800f3c2:	e7bf      	b.n	800f344 <_strtod_l+0x144>
 800f3c4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800f3c6:	191a      	adds	r2, r3, r4
 800f3c8:	921b      	str	r2, [sp, #108]	; 0x6c
 800f3ca:	9a05      	ldr	r2, [sp, #20]
 800f3cc:	5d1b      	ldrb	r3, [r3, r4]
 800f3ce:	2a00      	cmp	r2, #0
 800f3d0:	d037      	beq.n	800f442 <_strtod_l+0x242>
 800f3d2:	9c05      	ldr	r4, [sp, #20]
 800f3d4:	4602      	mov	r2, r0
 800f3d6:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800f3da:	2909      	cmp	r1, #9
 800f3dc:	d913      	bls.n	800f406 <_strtod_l+0x206>
 800f3de:	2101      	movs	r1, #1
 800f3e0:	9104      	str	r1, [sp, #16]
 800f3e2:	e7c2      	b.n	800f36a <_strtod_l+0x16a>
 800f3e4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800f3e6:	1c5a      	adds	r2, r3, #1
 800f3e8:	921b      	str	r2, [sp, #108]	; 0x6c
 800f3ea:	785b      	ldrb	r3, [r3, #1]
 800f3ec:	3001      	adds	r0, #1
 800f3ee:	2b30      	cmp	r3, #48	; 0x30
 800f3f0:	d0f8      	beq.n	800f3e4 <_strtod_l+0x1e4>
 800f3f2:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 800f3f6:	2a08      	cmp	r2, #8
 800f3f8:	f200 84e4 	bhi.w	800fdc4 <_strtod_l+0xbc4>
 800f3fc:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800f3fe:	9208      	str	r2, [sp, #32]
 800f400:	4602      	mov	r2, r0
 800f402:	2000      	movs	r0, #0
 800f404:	4604      	mov	r4, r0
 800f406:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 800f40a:	f100 0101 	add.w	r1, r0, #1
 800f40e:	d012      	beq.n	800f436 <_strtod_l+0x236>
 800f410:	440a      	add	r2, r1
 800f412:	eb00 0c04 	add.w	ip, r0, r4
 800f416:	4621      	mov	r1, r4
 800f418:	270a      	movs	r7, #10
 800f41a:	458c      	cmp	ip, r1
 800f41c:	d113      	bne.n	800f446 <_strtod_l+0x246>
 800f41e:	1821      	adds	r1, r4, r0
 800f420:	2908      	cmp	r1, #8
 800f422:	f104 0401 	add.w	r4, r4, #1
 800f426:	4404      	add	r4, r0
 800f428:	dc19      	bgt.n	800f45e <_strtod_l+0x25e>
 800f42a:	9b07      	ldr	r3, [sp, #28]
 800f42c:	210a      	movs	r1, #10
 800f42e:	fb01 e303 	mla	r3, r1, r3, lr
 800f432:	9307      	str	r3, [sp, #28]
 800f434:	2100      	movs	r1, #0
 800f436:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800f438:	1c58      	adds	r0, r3, #1
 800f43a:	901b      	str	r0, [sp, #108]	; 0x6c
 800f43c:	785b      	ldrb	r3, [r3, #1]
 800f43e:	4608      	mov	r0, r1
 800f440:	e7c9      	b.n	800f3d6 <_strtod_l+0x1d6>
 800f442:	9805      	ldr	r0, [sp, #20]
 800f444:	e7d3      	b.n	800f3ee <_strtod_l+0x1ee>
 800f446:	2908      	cmp	r1, #8
 800f448:	f101 0101 	add.w	r1, r1, #1
 800f44c:	dc03      	bgt.n	800f456 <_strtod_l+0x256>
 800f44e:	9b07      	ldr	r3, [sp, #28]
 800f450:	437b      	muls	r3, r7
 800f452:	9307      	str	r3, [sp, #28]
 800f454:	e7e1      	b.n	800f41a <_strtod_l+0x21a>
 800f456:	2910      	cmp	r1, #16
 800f458:	bfd8      	it	le
 800f45a:	437d      	mulle	r5, r7
 800f45c:	e7dd      	b.n	800f41a <_strtod_l+0x21a>
 800f45e:	2c10      	cmp	r4, #16
 800f460:	bfdc      	itt	le
 800f462:	210a      	movle	r1, #10
 800f464:	fb01 e505 	mlale	r5, r1, r5, lr
 800f468:	e7e4      	b.n	800f434 <_strtod_l+0x234>
 800f46a:	2301      	movs	r3, #1
 800f46c:	9304      	str	r3, [sp, #16]
 800f46e:	e781      	b.n	800f374 <_strtod_l+0x174>
 800f470:	f04f 0c01 	mov.w	ip, #1
 800f474:	1cb3      	adds	r3, r6, #2
 800f476:	931b      	str	r3, [sp, #108]	; 0x6c
 800f478:	78b3      	ldrb	r3, [r6, #2]
 800f47a:	e78a      	b.n	800f392 <_strtod_l+0x192>
 800f47c:	f04f 0c00 	mov.w	ip, #0
 800f480:	e7f8      	b.n	800f474 <_strtod_l+0x274>
 800f482:	bf00      	nop
 800f484:	0801272c 	.word	0x0801272c
 800f488:	7ff00000 	.word	0x7ff00000
 800f48c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800f48e:	1c5f      	adds	r7, r3, #1
 800f490:	971b      	str	r7, [sp, #108]	; 0x6c
 800f492:	785b      	ldrb	r3, [r3, #1]
 800f494:	2b30      	cmp	r3, #48	; 0x30
 800f496:	d0f9      	beq.n	800f48c <_strtod_l+0x28c>
 800f498:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 800f49c:	2f08      	cmp	r7, #8
 800f49e:	f63f af7d 	bhi.w	800f39c <_strtod_l+0x19c>
 800f4a2:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 800f4a6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800f4a8:	930a      	str	r3, [sp, #40]	; 0x28
 800f4aa:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800f4ac:	1c5f      	adds	r7, r3, #1
 800f4ae:	971b      	str	r7, [sp, #108]	; 0x6c
 800f4b0:	785b      	ldrb	r3, [r3, #1]
 800f4b2:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 800f4b6:	f1b8 0f09 	cmp.w	r8, #9
 800f4ba:	d937      	bls.n	800f52c <_strtod_l+0x32c>
 800f4bc:	990a      	ldr	r1, [sp, #40]	; 0x28
 800f4be:	1a7f      	subs	r7, r7, r1
 800f4c0:	2f08      	cmp	r7, #8
 800f4c2:	f644 671f 	movw	r7, #19999	; 0x4e1f
 800f4c6:	dc37      	bgt.n	800f538 <_strtod_l+0x338>
 800f4c8:	45be      	cmp	lr, r7
 800f4ca:	bfa8      	it	ge
 800f4cc:	46be      	movge	lr, r7
 800f4ce:	f1bc 0f00 	cmp.w	ip, #0
 800f4d2:	d001      	beq.n	800f4d8 <_strtod_l+0x2d8>
 800f4d4:	f1ce 0e00 	rsb	lr, lr, #0
 800f4d8:	2c00      	cmp	r4, #0
 800f4da:	d151      	bne.n	800f580 <_strtod_l+0x380>
 800f4dc:	2800      	cmp	r0, #0
 800f4de:	f47f aece 	bne.w	800f27e <_strtod_l+0x7e>
 800f4e2:	9a06      	ldr	r2, [sp, #24]
 800f4e4:	2a00      	cmp	r2, #0
 800f4e6:	f47f aeca 	bne.w	800f27e <_strtod_l+0x7e>
 800f4ea:	9a04      	ldr	r2, [sp, #16]
 800f4ec:	2a00      	cmp	r2, #0
 800f4ee:	f47f aee4 	bne.w	800f2ba <_strtod_l+0xba>
 800f4f2:	2b4e      	cmp	r3, #78	; 0x4e
 800f4f4:	d027      	beq.n	800f546 <_strtod_l+0x346>
 800f4f6:	dc21      	bgt.n	800f53c <_strtod_l+0x33c>
 800f4f8:	2b49      	cmp	r3, #73	; 0x49
 800f4fa:	f47f aede 	bne.w	800f2ba <_strtod_l+0xba>
 800f4fe:	49a0      	ldr	r1, [pc, #640]	; (800f780 <_strtod_l+0x580>)
 800f500:	a81b      	add	r0, sp, #108	; 0x6c
 800f502:	f001 fdff 	bl	8011104 <__match>
 800f506:	2800      	cmp	r0, #0
 800f508:	f43f aed7 	beq.w	800f2ba <_strtod_l+0xba>
 800f50c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800f50e:	499d      	ldr	r1, [pc, #628]	; (800f784 <_strtod_l+0x584>)
 800f510:	3b01      	subs	r3, #1
 800f512:	a81b      	add	r0, sp, #108	; 0x6c
 800f514:	931b      	str	r3, [sp, #108]	; 0x6c
 800f516:	f001 fdf5 	bl	8011104 <__match>
 800f51a:	b910      	cbnz	r0, 800f522 <_strtod_l+0x322>
 800f51c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800f51e:	3301      	adds	r3, #1
 800f520:	931b      	str	r3, [sp, #108]	; 0x6c
 800f522:	f8df b274 	ldr.w	fp, [pc, #628]	; 800f798 <_strtod_l+0x598>
 800f526:	f04f 0a00 	mov.w	sl, #0
 800f52a:	e6a8      	b.n	800f27e <_strtod_l+0x7e>
 800f52c:	210a      	movs	r1, #10
 800f52e:	fb01 3e0e 	mla	lr, r1, lr, r3
 800f532:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800f536:	e7b8      	b.n	800f4aa <_strtod_l+0x2aa>
 800f538:	46be      	mov	lr, r7
 800f53a:	e7c8      	b.n	800f4ce <_strtod_l+0x2ce>
 800f53c:	2b69      	cmp	r3, #105	; 0x69
 800f53e:	d0de      	beq.n	800f4fe <_strtod_l+0x2fe>
 800f540:	2b6e      	cmp	r3, #110	; 0x6e
 800f542:	f47f aeba 	bne.w	800f2ba <_strtod_l+0xba>
 800f546:	4990      	ldr	r1, [pc, #576]	; (800f788 <_strtod_l+0x588>)
 800f548:	a81b      	add	r0, sp, #108	; 0x6c
 800f54a:	f001 fddb 	bl	8011104 <__match>
 800f54e:	2800      	cmp	r0, #0
 800f550:	f43f aeb3 	beq.w	800f2ba <_strtod_l+0xba>
 800f554:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800f556:	781b      	ldrb	r3, [r3, #0]
 800f558:	2b28      	cmp	r3, #40	; 0x28
 800f55a:	d10e      	bne.n	800f57a <_strtod_l+0x37a>
 800f55c:	aa1e      	add	r2, sp, #120	; 0x78
 800f55e:	498b      	ldr	r1, [pc, #556]	; (800f78c <_strtod_l+0x58c>)
 800f560:	a81b      	add	r0, sp, #108	; 0x6c
 800f562:	f001 fde3 	bl	801112c <__hexnan>
 800f566:	2805      	cmp	r0, #5
 800f568:	d107      	bne.n	800f57a <_strtod_l+0x37a>
 800f56a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800f56c:	f8dd a078 	ldr.w	sl, [sp, #120]	; 0x78
 800f570:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800f574:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800f578:	e681      	b.n	800f27e <_strtod_l+0x7e>
 800f57a:	f8df b224 	ldr.w	fp, [pc, #548]	; 800f7a0 <_strtod_l+0x5a0>
 800f57e:	e7d2      	b.n	800f526 <_strtod_l+0x326>
 800f580:	ebae 0302 	sub.w	r3, lr, r2
 800f584:	9306      	str	r3, [sp, #24]
 800f586:	9b05      	ldr	r3, [sp, #20]
 800f588:	9807      	ldr	r0, [sp, #28]
 800f58a:	2b00      	cmp	r3, #0
 800f58c:	bf08      	it	eq
 800f58e:	4623      	moveq	r3, r4
 800f590:	2c10      	cmp	r4, #16
 800f592:	9305      	str	r3, [sp, #20]
 800f594:	46a0      	mov	r8, r4
 800f596:	bfa8      	it	ge
 800f598:	f04f 0810 	movge.w	r8, #16
 800f59c:	f7f0 ffc2 	bl	8000524 <__aeabi_ui2d>
 800f5a0:	2c09      	cmp	r4, #9
 800f5a2:	4682      	mov	sl, r0
 800f5a4:	468b      	mov	fp, r1
 800f5a6:	dc13      	bgt.n	800f5d0 <_strtod_l+0x3d0>
 800f5a8:	9b06      	ldr	r3, [sp, #24]
 800f5aa:	2b00      	cmp	r3, #0
 800f5ac:	f43f ae67 	beq.w	800f27e <_strtod_l+0x7e>
 800f5b0:	9b06      	ldr	r3, [sp, #24]
 800f5b2:	dd7a      	ble.n	800f6aa <_strtod_l+0x4aa>
 800f5b4:	2b16      	cmp	r3, #22
 800f5b6:	dc61      	bgt.n	800f67c <_strtod_l+0x47c>
 800f5b8:	4a75      	ldr	r2, [pc, #468]	; (800f790 <_strtod_l+0x590>)
 800f5ba:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 800f5be:	e9de 0100 	ldrd	r0, r1, [lr]
 800f5c2:	4652      	mov	r2, sl
 800f5c4:	465b      	mov	r3, fp
 800f5c6:	f7f1 f827 	bl	8000618 <__aeabi_dmul>
 800f5ca:	4682      	mov	sl, r0
 800f5cc:	468b      	mov	fp, r1
 800f5ce:	e656      	b.n	800f27e <_strtod_l+0x7e>
 800f5d0:	4b6f      	ldr	r3, [pc, #444]	; (800f790 <_strtod_l+0x590>)
 800f5d2:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800f5d6:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800f5da:	f7f1 f81d 	bl	8000618 <__aeabi_dmul>
 800f5de:	4606      	mov	r6, r0
 800f5e0:	4628      	mov	r0, r5
 800f5e2:	460f      	mov	r7, r1
 800f5e4:	f7f0 ff9e 	bl	8000524 <__aeabi_ui2d>
 800f5e8:	4602      	mov	r2, r0
 800f5ea:	460b      	mov	r3, r1
 800f5ec:	4630      	mov	r0, r6
 800f5ee:	4639      	mov	r1, r7
 800f5f0:	f7f0 fe5c 	bl	80002ac <__adddf3>
 800f5f4:	2c0f      	cmp	r4, #15
 800f5f6:	4682      	mov	sl, r0
 800f5f8:	468b      	mov	fp, r1
 800f5fa:	ddd5      	ble.n	800f5a8 <_strtod_l+0x3a8>
 800f5fc:	9b06      	ldr	r3, [sp, #24]
 800f5fe:	eba4 0808 	sub.w	r8, r4, r8
 800f602:	4498      	add	r8, r3
 800f604:	f1b8 0f00 	cmp.w	r8, #0
 800f608:	f340 8096 	ble.w	800f738 <_strtod_l+0x538>
 800f60c:	f018 030f 	ands.w	r3, r8, #15
 800f610:	d00a      	beq.n	800f628 <_strtod_l+0x428>
 800f612:	495f      	ldr	r1, [pc, #380]	; (800f790 <_strtod_l+0x590>)
 800f614:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800f618:	4652      	mov	r2, sl
 800f61a:	465b      	mov	r3, fp
 800f61c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f620:	f7f0 fffa 	bl	8000618 <__aeabi_dmul>
 800f624:	4682      	mov	sl, r0
 800f626:	468b      	mov	fp, r1
 800f628:	f038 080f 	bics.w	r8, r8, #15
 800f62c:	d073      	beq.n	800f716 <_strtod_l+0x516>
 800f62e:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800f632:	dd47      	ble.n	800f6c4 <_strtod_l+0x4c4>
 800f634:	2400      	movs	r4, #0
 800f636:	46a0      	mov	r8, r4
 800f638:	9407      	str	r4, [sp, #28]
 800f63a:	9405      	str	r4, [sp, #20]
 800f63c:	2322      	movs	r3, #34	; 0x22
 800f63e:	f8df b158 	ldr.w	fp, [pc, #344]	; 800f798 <_strtod_l+0x598>
 800f642:	f8c9 3000 	str.w	r3, [r9]
 800f646:	f04f 0a00 	mov.w	sl, #0
 800f64a:	9b07      	ldr	r3, [sp, #28]
 800f64c:	2b00      	cmp	r3, #0
 800f64e:	f43f ae16 	beq.w	800f27e <_strtod_l+0x7e>
 800f652:	991c      	ldr	r1, [sp, #112]	; 0x70
 800f654:	4648      	mov	r0, r9
 800f656:	f001 fe55 	bl	8011304 <_Bfree>
 800f65a:	9905      	ldr	r1, [sp, #20]
 800f65c:	4648      	mov	r0, r9
 800f65e:	f001 fe51 	bl	8011304 <_Bfree>
 800f662:	4641      	mov	r1, r8
 800f664:	4648      	mov	r0, r9
 800f666:	f001 fe4d 	bl	8011304 <_Bfree>
 800f66a:	9907      	ldr	r1, [sp, #28]
 800f66c:	4648      	mov	r0, r9
 800f66e:	f001 fe49 	bl	8011304 <_Bfree>
 800f672:	4621      	mov	r1, r4
 800f674:	4648      	mov	r0, r9
 800f676:	f001 fe45 	bl	8011304 <_Bfree>
 800f67a:	e600      	b.n	800f27e <_strtod_l+0x7e>
 800f67c:	9a06      	ldr	r2, [sp, #24]
 800f67e:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 800f682:	4293      	cmp	r3, r2
 800f684:	dbba      	blt.n	800f5fc <_strtod_l+0x3fc>
 800f686:	4d42      	ldr	r5, [pc, #264]	; (800f790 <_strtod_l+0x590>)
 800f688:	f1c4 040f 	rsb	r4, r4, #15
 800f68c:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 800f690:	4652      	mov	r2, sl
 800f692:	465b      	mov	r3, fp
 800f694:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f698:	f7f0 ffbe 	bl	8000618 <__aeabi_dmul>
 800f69c:	9b06      	ldr	r3, [sp, #24]
 800f69e:	1b1c      	subs	r4, r3, r4
 800f6a0:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 800f6a4:	e9d5 2300 	ldrd	r2, r3, [r5]
 800f6a8:	e78d      	b.n	800f5c6 <_strtod_l+0x3c6>
 800f6aa:	f113 0f16 	cmn.w	r3, #22
 800f6ae:	dba5      	blt.n	800f5fc <_strtod_l+0x3fc>
 800f6b0:	4a37      	ldr	r2, [pc, #220]	; (800f790 <_strtod_l+0x590>)
 800f6b2:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 800f6b6:	e9d2 2300 	ldrd	r2, r3, [r2]
 800f6ba:	4650      	mov	r0, sl
 800f6bc:	4659      	mov	r1, fp
 800f6be:	f7f1 f8d5 	bl	800086c <__aeabi_ddiv>
 800f6c2:	e782      	b.n	800f5ca <_strtod_l+0x3ca>
 800f6c4:	2300      	movs	r3, #0
 800f6c6:	4e33      	ldr	r6, [pc, #204]	; (800f794 <_strtod_l+0x594>)
 800f6c8:	ea4f 1828 	mov.w	r8, r8, asr #4
 800f6cc:	4650      	mov	r0, sl
 800f6ce:	4659      	mov	r1, fp
 800f6d0:	461d      	mov	r5, r3
 800f6d2:	f1b8 0f01 	cmp.w	r8, #1
 800f6d6:	dc21      	bgt.n	800f71c <_strtod_l+0x51c>
 800f6d8:	b10b      	cbz	r3, 800f6de <_strtod_l+0x4de>
 800f6da:	4682      	mov	sl, r0
 800f6dc:	468b      	mov	fp, r1
 800f6de:	4b2d      	ldr	r3, [pc, #180]	; (800f794 <_strtod_l+0x594>)
 800f6e0:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800f6e4:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800f6e8:	4652      	mov	r2, sl
 800f6ea:	465b      	mov	r3, fp
 800f6ec:	e9d5 0100 	ldrd	r0, r1, [r5]
 800f6f0:	f7f0 ff92 	bl	8000618 <__aeabi_dmul>
 800f6f4:	4b28      	ldr	r3, [pc, #160]	; (800f798 <_strtod_l+0x598>)
 800f6f6:	460a      	mov	r2, r1
 800f6f8:	400b      	ands	r3, r1
 800f6fa:	4928      	ldr	r1, [pc, #160]	; (800f79c <_strtod_l+0x59c>)
 800f6fc:	428b      	cmp	r3, r1
 800f6fe:	4682      	mov	sl, r0
 800f700:	d898      	bhi.n	800f634 <_strtod_l+0x434>
 800f702:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800f706:	428b      	cmp	r3, r1
 800f708:	bf86      	itte	hi
 800f70a:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 800f7a4 <_strtod_l+0x5a4>
 800f70e:	f04f 3aff 	movhi.w	sl, #4294967295
 800f712:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800f716:	2300      	movs	r3, #0
 800f718:	9304      	str	r3, [sp, #16]
 800f71a:	e077      	b.n	800f80c <_strtod_l+0x60c>
 800f71c:	f018 0f01 	tst.w	r8, #1
 800f720:	d006      	beq.n	800f730 <_strtod_l+0x530>
 800f722:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 800f726:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f72a:	f7f0 ff75 	bl	8000618 <__aeabi_dmul>
 800f72e:	2301      	movs	r3, #1
 800f730:	3501      	adds	r5, #1
 800f732:	ea4f 0868 	mov.w	r8, r8, asr #1
 800f736:	e7cc      	b.n	800f6d2 <_strtod_l+0x4d2>
 800f738:	d0ed      	beq.n	800f716 <_strtod_l+0x516>
 800f73a:	f1c8 0800 	rsb	r8, r8, #0
 800f73e:	f018 020f 	ands.w	r2, r8, #15
 800f742:	d00a      	beq.n	800f75a <_strtod_l+0x55a>
 800f744:	4b12      	ldr	r3, [pc, #72]	; (800f790 <_strtod_l+0x590>)
 800f746:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800f74a:	4650      	mov	r0, sl
 800f74c:	4659      	mov	r1, fp
 800f74e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f752:	f7f1 f88b 	bl	800086c <__aeabi_ddiv>
 800f756:	4682      	mov	sl, r0
 800f758:	468b      	mov	fp, r1
 800f75a:	ea5f 1828 	movs.w	r8, r8, asr #4
 800f75e:	d0da      	beq.n	800f716 <_strtod_l+0x516>
 800f760:	f1b8 0f1f 	cmp.w	r8, #31
 800f764:	dd20      	ble.n	800f7a8 <_strtod_l+0x5a8>
 800f766:	2400      	movs	r4, #0
 800f768:	46a0      	mov	r8, r4
 800f76a:	9407      	str	r4, [sp, #28]
 800f76c:	9405      	str	r4, [sp, #20]
 800f76e:	2322      	movs	r3, #34	; 0x22
 800f770:	f04f 0a00 	mov.w	sl, #0
 800f774:	f04f 0b00 	mov.w	fp, #0
 800f778:	f8c9 3000 	str.w	r3, [r9]
 800f77c:	e765      	b.n	800f64a <_strtod_l+0x44a>
 800f77e:	bf00      	nop
 800f780:	080126f5 	.word	0x080126f5
 800f784:	08012783 	.word	0x08012783
 800f788:	080126fd 	.word	0x080126fd
 800f78c:	08012740 	.word	0x08012740
 800f790:	080127c0 	.word	0x080127c0
 800f794:	08012798 	.word	0x08012798
 800f798:	7ff00000 	.word	0x7ff00000
 800f79c:	7ca00000 	.word	0x7ca00000
 800f7a0:	fff80000 	.word	0xfff80000
 800f7a4:	7fefffff 	.word	0x7fefffff
 800f7a8:	f018 0310 	ands.w	r3, r8, #16
 800f7ac:	bf18      	it	ne
 800f7ae:	236a      	movne	r3, #106	; 0x6a
 800f7b0:	4da0      	ldr	r5, [pc, #640]	; (800fa34 <_strtod_l+0x834>)
 800f7b2:	9304      	str	r3, [sp, #16]
 800f7b4:	4650      	mov	r0, sl
 800f7b6:	4659      	mov	r1, fp
 800f7b8:	2300      	movs	r3, #0
 800f7ba:	f1b8 0f00 	cmp.w	r8, #0
 800f7be:	f300 810a 	bgt.w	800f9d6 <_strtod_l+0x7d6>
 800f7c2:	b10b      	cbz	r3, 800f7c8 <_strtod_l+0x5c8>
 800f7c4:	4682      	mov	sl, r0
 800f7c6:	468b      	mov	fp, r1
 800f7c8:	9b04      	ldr	r3, [sp, #16]
 800f7ca:	b1bb      	cbz	r3, 800f7fc <_strtod_l+0x5fc>
 800f7cc:	f3cb 530a 	ubfx	r3, fp, #20, #11
 800f7d0:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800f7d4:	2b00      	cmp	r3, #0
 800f7d6:	4659      	mov	r1, fp
 800f7d8:	dd10      	ble.n	800f7fc <_strtod_l+0x5fc>
 800f7da:	2b1f      	cmp	r3, #31
 800f7dc:	f340 8107 	ble.w	800f9ee <_strtod_l+0x7ee>
 800f7e0:	2b34      	cmp	r3, #52	; 0x34
 800f7e2:	bfde      	ittt	le
 800f7e4:	3b20      	suble	r3, #32
 800f7e6:	f04f 32ff 	movle.w	r2, #4294967295
 800f7ea:	fa02 f303 	lslle.w	r3, r2, r3
 800f7ee:	f04f 0a00 	mov.w	sl, #0
 800f7f2:	bfcc      	ite	gt
 800f7f4:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800f7f8:	ea03 0b01 	andle.w	fp, r3, r1
 800f7fc:	2200      	movs	r2, #0
 800f7fe:	2300      	movs	r3, #0
 800f800:	4650      	mov	r0, sl
 800f802:	4659      	mov	r1, fp
 800f804:	f7f1 f970 	bl	8000ae8 <__aeabi_dcmpeq>
 800f808:	2800      	cmp	r0, #0
 800f80a:	d1ac      	bne.n	800f766 <_strtod_l+0x566>
 800f80c:	9b07      	ldr	r3, [sp, #28]
 800f80e:	9300      	str	r3, [sp, #0]
 800f810:	9a05      	ldr	r2, [sp, #20]
 800f812:	9908      	ldr	r1, [sp, #32]
 800f814:	4623      	mov	r3, r4
 800f816:	4648      	mov	r0, r9
 800f818:	f001 fdc6 	bl	80113a8 <__s2b>
 800f81c:	9007      	str	r0, [sp, #28]
 800f81e:	2800      	cmp	r0, #0
 800f820:	f43f af08 	beq.w	800f634 <_strtod_l+0x434>
 800f824:	9a06      	ldr	r2, [sp, #24]
 800f826:	9b06      	ldr	r3, [sp, #24]
 800f828:	2a00      	cmp	r2, #0
 800f82a:	f1c3 0300 	rsb	r3, r3, #0
 800f82e:	bfa8      	it	ge
 800f830:	2300      	movge	r3, #0
 800f832:	930e      	str	r3, [sp, #56]	; 0x38
 800f834:	2400      	movs	r4, #0
 800f836:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800f83a:	9316      	str	r3, [sp, #88]	; 0x58
 800f83c:	46a0      	mov	r8, r4
 800f83e:	9b07      	ldr	r3, [sp, #28]
 800f840:	4648      	mov	r0, r9
 800f842:	6859      	ldr	r1, [r3, #4]
 800f844:	f001 fd2a 	bl	801129c <_Balloc>
 800f848:	9005      	str	r0, [sp, #20]
 800f84a:	2800      	cmp	r0, #0
 800f84c:	f43f aef6 	beq.w	800f63c <_strtod_l+0x43c>
 800f850:	9b07      	ldr	r3, [sp, #28]
 800f852:	691a      	ldr	r2, [r3, #16]
 800f854:	3202      	adds	r2, #2
 800f856:	f103 010c 	add.w	r1, r3, #12
 800f85a:	0092      	lsls	r2, r2, #2
 800f85c:	300c      	adds	r0, #12
 800f85e:	f7fe fd45 	bl	800e2ec <memcpy>
 800f862:	aa1e      	add	r2, sp, #120	; 0x78
 800f864:	a91d      	add	r1, sp, #116	; 0x74
 800f866:	ec4b ab10 	vmov	d0, sl, fp
 800f86a:	4648      	mov	r0, r9
 800f86c:	e9cd ab08 	strd	sl, fp, [sp, #32]
 800f870:	f002 f856 	bl	8011920 <__d2b>
 800f874:	901c      	str	r0, [sp, #112]	; 0x70
 800f876:	2800      	cmp	r0, #0
 800f878:	f43f aee0 	beq.w	800f63c <_strtod_l+0x43c>
 800f87c:	2101      	movs	r1, #1
 800f87e:	4648      	mov	r0, r9
 800f880:	f001 fe1e 	bl	80114c0 <__i2b>
 800f884:	4680      	mov	r8, r0
 800f886:	2800      	cmp	r0, #0
 800f888:	f43f aed8 	beq.w	800f63c <_strtod_l+0x43c>
 800f88c:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 800f88e:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800f890:	2e00      	cmp	r6, #0
 800f892:	bfab      	itete	ge
 800f894:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 800f896:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 800f898:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 800f89a:	9f0e      	ldrlt	r7, [sp, #56]	; 0x38
 800f89c:	bfac      	ite	ge
 800f89e:	18f7      	addge	r7, r6, r3
 800f8a0:	1b9d      	sublt	r5, r3, r6
 800f8a2:	9b04      	ldr	r3, [sp, #16]
 800f8a4:	1af6      	subs	r6, r6, r3
 800f8a6:	4416      	add	r6, r2
 800f8a8:	4b63      	ldr	r3, [pc, #396]	; (800fa38 <_strtod_l+0x838>)
 800f8aa:	3e01      	subs	r6, #1
 800f8ac:	429e      	cmp	r6, r3
 800f8ae:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800f8b2:	f280 80af 	bge.w	800fa14 <_strtod_l+0x814>
 800f8b6:	1b9b      	subs	r3, r3, r6
 800f8b8:	2b1f      	cmp	r3, #31
 800f8ba:	eba2 0203 	sub.w	r2, r2, r3
 800f8be:	f04f 0101 	mov.w	r1, #1
 800f8c2:	f300 809b 	bgt.w	800f9fc <_strtod_l+0x7fc>
 800f8c6:	fa01 f303 	lsl.w	r3, r1, r3
 800f8ca:	930f      	str	r3, [sp, #60]	; 0x3c
 800f8cc:	2300      	movs	r3, #0
 800f8ce:	930a      	str	r3, [sp, #40]	; 0x28
 800f8d0:	18be      	adds	r6, r7, r2
 800f8d2:	9b04      	ldr	r3, [sp, #16]
 800f8d4:	42b7      	cmp	r7, r6
 800f8d6:	4415      	add	r5, r2
 800f8d8:	441d      	add	r5, r3
 800f8da:	463b      	mov	r3, r7
 800f8dc:	bfa8      	it	ge
 800f8de:	4633      	movge	r3, r6
 800f8e0:	42ab      	cmp	r3, r5
 800f8e2:	bfa8      	it	ge
 800f8e4:	462b      	movge	r3, r5
 800f8e6:	2b00      	cmp	r3, #0
 800f8e8:	bfc2      	ittt	gt
 800f8ea:	1af6      	subgt	r6, r6, r3
 800f8ec:	1aed      	subgt	r5, r5, r3
 800f8ee:	1aff      	subgt	r7, r7, r3
 800f8f0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f8f2:	b1bb      	cbz	r3, 800f924 <_strtod_l+0x724>
 800f8f4:	4641      	mov	r1, r8
 800f8f6:	461a      	mov	r2, r3
 800f8f8:	4648      	mov	r0, r9
 800f8fa:	f001 fe81 	bl	8011600 <__pow5mult>
 800f8fe:	4680      	mov	r8, r0
 800f900:	2800      	cmp	r0, #0
 800f902:	f43f ae9b 	beq.w	800f63c <_strtod_l+0x43c>
 800f906:	4601      	mov	r1, r0
 800f908:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800f90a:	4648      	mov	r0, r9
 800f90c:	f001 fde1 	bl	80114d2 <__multiply>
 800f910:	900c      	str	r0, [sp, #48]	; 0x30
 800f912:	2800      	cmp	r0, #0
 800f914:	f43f ae92 	beq.w	800f63c <_strtod_l+0x43c>
 800f918:	991c      	ldr	r1, [sp, #112]	; 0x70
 800f91a:	4648      	mov	r0, r9
 800f91c:	f001 fcf2 	bl	8011304 <_Bfree>
 800f920:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f922:	931c      	str	r3, [sp, #112]	; 0x70
 800f924:	2e00      	cmp	r6, #0
 800f926:	dc7a      	bgt.n	800fa1e <_strtod_l+0x81e>
 800f928:	9b06      	ldr	r3, [sp, #24]
 800f92a:	2b00      	cmp	r3, #0
 800f92c:	dd08      	ble.n	800f940 <_strtod_l+0x740>
 800f92e:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800f930:	9905      	ldr	r1, [sp, #20]
 800f932:	4648      	mov	r0, r9
 800f934:	f001 fe64 	bl	8011600 <__pow5mult>
 800f938:	9005      	str	r0, [sp, #20]
 800f93a:	2800      	cmp	r0, #0
 800f93c:	f43f ae7e 	beq.w	800f63c <_strtod_l+0x43c>
 800f940:	2d00      	cmp	r5, #0
 800f942:	dd08      	ble.n	800f956 <_strtod_l+0x756>
 800f944:	462a      	mov	r2, r5
 800f946:	9905      	ldr	r1, [sp, #20]
 800f948:	4648      	mov	r0, r9
 800f94a:	f001 fea7 	bl	801169c <__lshift>
 800f94e:	9005      	str	r0, [sp, #20]
 800f950:	2800      	cmp	r0, #0
 800f952:	f43f ae73 	beq.w	800f63c <_strtod_l+0x43c>
 800f956:	2f00      	cmp	r7, #0
 800f958:	dd08      	ble.n	800f96c <_strtod_l+0x76c>
 800f95a:	4641      	mov	r1, r8
 800f95c:	463a      	mov	r2, r7
 800f95e:	4648      	mov	r0, r9
 800f960:	f001 fe9c 	bl	801169c <__lshift>
 800f964:	4680      	mov	r8, r0
 800f966:	2800      	cmp	r0, #0
 800f968:	f43f ae68 	beq.w	800f63c <_strtod_l+0x43c>
 800f96c:	9a05      	ldr	r2, [sp, #20]
 800f96e:	991c      	ldr	r1, [sp, #112]	; 0x70
 800f970:	4648      	mov	r0, r9
 800f972:	f001 ff01 	bl	8011778 <__mdiff>
 800f976:	4604      	mov	r4, r0
 800f978:	2800      	cmp	r0, #0
 800f97a:	f43f ae5f 	beq.w	800f63c <_strtod_l+0x43c>
 800f97e:	68c3      	ldr	r3, [r0, #12]
 800f980:	930c      	str	r3, [sp, #48]	; 0x30
 800f982:	2300      	movs	r3, #0
 800f984:	60c3      	str	r3, [r0, #12]
 800f986:	4641      	mov	r1, r8
 800f988:	f001 fedc 	bl	8011744 <__mcmp>
 800f98c:	2800      	cmp	r0, #0
 800f98e:	da55      	bge.n	800fa3c <_strtod_l+0x83c>
 800f990:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f992:	b9e3      	cbnz	r3, 800f9ce <_strtod_l+0x7ce>
 800f994:	f1ba 0f00 	cmp.w	sl, #0
 800f998:	d119      	bne.n	800f9ce <_strtod_l+0x7ce>
 800f99a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800f99e:	b9b3      	cbnz	r3, 800f9ce <_strtod_l+0x7ce>
 800f9a0:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800f9a4:	0d1b      	lsrs	r3, r3, #20
 800f9a6:	051b      	lsls	r3, r3, #20
 800f9a8:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800f9ac:	d90f      	bls.n	800f9ce <_strtod_l+0x7ce>
 800f9ae:	6963      	ldr	r3, [r4, #20]
 800f9b0:	b913      	cbnz	r3, 800f9b8 <_strtod_l+0x7b8>
 800f9b2:	6923      	ldr	r3, [r4, #16]
 800f9b4:	2b01      	cmp	r3, #1
 800f9b6:	dd0a      	ble.n	800f9ce <_strtod_l+0x7ce>
 800f9b8:	4621      	mov	r1, r4
 800f9ba:	2201      	movs	r2, #1
 800f9bc:	4648      	mov	r0, r9
 800f9be:	f001 fe6d 	bl	801169c <__lshift>
 800f9c2:	4641      	mov	r1, r8
 800f9c4:	4604      	mov	r4, r0
 800f9c6:	f001 febd 	bl	8011744 <__mcmp>
 800f9ca:	2800      	cmp	r0, #0
 800f9cc:	dc67      	bgt.n	800fa9e <_strtod_l+0x89e>
 800f9ce:	9b04      	ldr	r3, [sp, #16]
 800f9d0:	2b00      	cmp	r3, #0
 800f9d2:	d171      	bne.n	800fab8 <_strtod_l+0x8b8>
 800f9d4:	e63d      	b.n	800f652 <_strtod_l+0x452>
 800f9d6:	f018 0f01 	tst.w	r8, #1
 800f9da:	d004      	beq.n	800f9e6 <_strtod_l+0x7e6>
 800f9dc:	e9d5 2300 	ldrd	r2, r3, [r5]
 800f9e0:	f7f0 fe1a 	bl	8000618 <__aeabi_dmul>
 800f9e4:	2301      	movs	r3, #1
 800f9e6:	ea4f 0868 	mov.w	r8, r8, asr #1
 800f9ea:	3508      	adds	r5, #8
 800f9ec:	e6e5      	b.n	800f7ba <_strtod_l+0x5ba>
 800f9ee:	f04f 32ff 	mov.w	r2, #4294967295
 800f9f2:	fa02 f303 	lsl.w	r3, r2, r3
 800f9f6:	ea03 0a0a 	and.w	sl, r3, sl
 800f9fa:	e6ff      	b.n	800f7fc <_strtod_l+0x5fc>
 800f9fc:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 800fa00:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 800fa04:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 800fa08:	36e2      	adds	r6, #226	; 0xe2
 800fa0a:	fa01 f306 	lsl.w	r3, r1, r6
 800fa0e:	930a      	str	r3, [sp, #40]	; 0x28
 800fa10:	910f      	str	r1, [sp, #60]	; 0x3c
 800fa12:	e75d      	b.n	800f8d0 <_strtod_l+0x6d0>
 800fa14:	2300      	movs	r3, #0
 800fa16:	930a      	str	r3, [sp, #40]	; 0x28
 800fa18:	2301      	movs	r3, #1
 800fa1a:	930f      	str	r3, [sp, #60]	; 0x3c
 800fa1c:	e758      	b.n	800f8d0 <_strtod_l+0x6d0>
 800fa1e:	4632      	mov	r2, r6
 800fa20:	991c      	ldr	r1, [sp, #112]	; 0x70
 800fa22:	4648      	mov	r0, r9
 800fa24:	f001 fe3a 	bl	801169c <__lshift>
 800fa28:	901c      	str	r0, [sp, #112]	; 0x70
 800fa2a:	2800      	cmp	r0, #0
 800fa2c:	f47f af7c 	bne.w	800f928 <_strtod_l+0x728>
 800fa30:	e604      	b.n	800f63c <_strtod_l+0x43c>
 800fa32:	bf00      	nop
 800fa34:	08012758 	.word	0x08012758
 800fa38:	fffffc02 	.word	0xfffffc02
 800fa3c:	465d      	mov	r5, fp
 800fa3e:	f040 8086 	bne.w	800fb4e <_strtod_l+0x94e>
 800fa42:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800fa44:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800fa48:	b32a      	cbz	r2, 800fa96 <_strtod_l+0x896>
 800fa4a:	4aaf      	ldr	r2, [pc, #700]	; (800fd08 <_strtod_l+0xb08>)
 800fa4c:	4293      	cmp	r3, r2
 800fa4e:	d153      	bne.n	800faf8 <_strtod_l+0x8f8>
 800fa50:	9b04      	ldr	r3, [sp, #16]
 800fa52:	4650      	mov	r0, sl
 800fa54:	b1d3      	cbz	r3, 800fa8c <_strtod_l+0x88c>
 800fa56:	4aad      	ldr	r2, [pc, #692]	; (800fd0c <_strtod_l+0xb0c>)
 800fa58:	402a      	ands	r2, r5
 800fa5a:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 800fa5e:	f04f 31ff 	mov.w	r1, #4294967295
 800fa62:	d816      	bhi.n	800fa92 <_strtod_l+0x892>
 800fa64:	0d12      	lsrs	r2, r2, #20
 800fa66:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800fa6a:	fa01 f303 	lsl.w	r3, r1, r3
 800fa6e:	4298      	cmp	r0, r3
 800fa70:	d142      	bne.n	800faf8 <_strtod_l+0x8f8>
 800fa72:	4ba7      	ldr	r3, [pc, #668]	; (800fd10 <_strtod_l+0xb10>)
 800fa74:	429d      	cmp	r5, r3
 800fa76:	d102      	bne.n	800fa7e <_strtod_l+0x87e>
 800fa78:	3001      	adds	r0, #1
 800fa7a:	f43f addf 	beq.w	800f63c <_strtod_l+0x43c>
 800fa7e:	4ba3      	ldr	r3, [pc, #652]	; (800fd0c <_strtod_l+0xb0c>)
 800fa80:	402b      	ands	r3, r5
 800fa82:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800fa86:	f04f 0a00 	mov.w	sl, #0
 800fa8a:	e7a0      	b.n	800f9ce <_strtod_l+0x7ce>
 800fa8c:	f04f 33ff 	mov.w	r3, #4294967295
 800fa90:	e7ed      	b.n	800fa6e <_strtod_l+0x86e>
 800fa92:	460b      	mov	r3, r1
 800fa94:	e7eb      	b.n	800fa6e <_strtod_l+0x86e>
 800fa96:	bb7b      	cbnz	r3, 800faf8 <_strtod_l+0x8f8>
 800fa98:	f1ba 0f00 	cmp.w	sl, #0
 800fa9c:	d12c      	bne.n	800faf8 <_strtod_l+0x8f8>
 800fa9e:	9904      	ldr	r1, [sp, #16]
 800faa0:	4a9a      	ldr	r2, [pc, #616]	; (800fd0c <_strtod_l+0xb0c>)
 800faa2:	465b      	mov	r3, fp
 800faa4:	b1f1      	cbz	r1, 800fae4 <_strtod_l+0x8e4>
 800faa6:	ea02 010b 	and.w	r1, r2, fp
 800faaa:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800faae:	dc19      	bgt.n	800fae4 <_strtod_l+0x8e4>
 800fab0:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800fab4:	f77f ae5b 	ble.w	800f76e <_strtod_l+0x56e>
 800fab8:	4a96      	ldr	r2, [pc, #600]	; (800fd14 <_strtod_l+0xb14>)
 800faba:	2300      	movs	r3, #0
 800fabc:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 800fac0:	4650      	mov	r0, sl
 800fac2:	4659      	mov	r1, fp
 800fac4:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800fac8:	f7f0 fda6 	bl	8000618 <__aeabi_dmul>
 800facc:	4682      	mov	sl, r0
 800face:	468b      	mov	fp, r1
 800fad0:	2900      	cmp	r1, #0
 800fad2:	f47f adbe 	bne.w	800f652 <_strtod_l+0x452>
 800fad6:	2800      	cmp	r0, #0
 800fad8:	f47f adbb 	bne.w	800f652 <_strtod_l+0x452>
 800fadc:	2322      	movs	r3, #34	; 0x22
 800fade:	f8c9 3000 	str.w	r3, [r9]
 800fae2:	e5b6      	b.n	800f652 <_strtod_l+0x452>
 800fae4:	4013      	ands	r3, r2
 800fae6:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800faea:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800faee:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800faf2:	f04f 3aff 	mov.w	sl, #4294967295
 800faf6:	e76a      	b.n	800f9ce <_strtod_l+0x7ce>
 800faf8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fafa:	b193      	cbz	r3, 800fb22 <_strtod_l+0x922>
 800fafc:	422b      	tst	r3, r5
 800fafe:	f43f af66 	beq.w	800f9ce <_strtod_l+0x7ce>
 800fb02:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800fb04:	9a04      	ldr	r2, [sp, #16]
 800fb06:	4650      	mov	r0, sl
 800fb08:	4659      	mov	r1, fp
 800fb0a:	b173      	cbz	r3, 800fb2a <_strtod_l+0x92a>
 800fb0c:	f7ff fb5a 	bl	800f1c4 <sulp>
 800fb10:	4602      	mov	r2, r0
 800fb12:	460b      	mov	r3, r1
 800fb14:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800fb18:	f7f0 fbc8 	bl	80002ac <__adddf3>
 800fb1c:	4682      	mov	sl, r0
 800fb1e:	468b      	mov	fp, r1
 800fb20:	e755      	b.n	800f9ce <_strtod_l+0x7ce>
 800fb22:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800fb24:	ea13 0f0a 	tst.w	r3, sl
 800fb28:	e7e9      	b.n	800fafe <_strtod_l+0x8fe>
 800fb2a:	f7ff fb4b 	bl	800f1c4 <sulp>
 800fb2e:	4602      	mov	r2, r0
 800fb30:	460b      	mov	r3, r1
 800fb32:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800fb36:	f7f0 fbb7 	bl	80002a8 <__aeabi_dsub>
 800fb3a:	2200      	movs	r2, #0
 800fb3c:	2300      	movs	r3, #0
 800fb3e:	4682      	mov	sl, r0
 800fb40:	468b      	mov	fp, r1
 800fb42:	f7f0 ffd1 	bl	8000ae8 <__aeabi_dcmpeq>
 800fb46:	2800      	cmp	r0, #0
 800fb48:	f47f ae11 	bne.w	800f76e <_strtod_l+0x56e>
 800fb4c:	e73f      	b.n	800f9ce <_strtod_l+0x7ce>
 800fb4e:	4641      	mov	r1, r8
 800fb50:	4620      	mov	r0, r4
 800fb52:	f001 ff34 	bl	80119be <__ratio>
 800fb56:	ec57 6b10 	vmov	r6, r7, d0
 800fb5a:	2200      	movs	r2, #0
 800fb5c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800fb60:	ee10 0a10 	vmov	r0, s0
 800fb64:	4639      	mov	r1, r7
 800fb66:	f7f0 ffd3 	bl	8000b10 <__aeabi_dcmple>
 800fb6a:	2800      	cmp	r0, #0
 800fb6c:	d077      	beq.n	800fc5e <_strtod_l+0xa5e>
 800fb6e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800fb70:	2b00      	cmp	r3, #0
 800fb72:	d04a      	beq.n	800fc0a <_strtod_l+0xa0a>
 800fb74:	4b68      	ldr	r3, [pc, #416]	; (800fd18 <_strtod_l+0xb18>)
 800fb76:	2200      	movs	r2, #0
 800fb78:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800fb7c:	4f66      	ldr	r7, [pc, #408]	; (800fd18 <_strtod_l+0xb18>)
 800fb7e:	2600      	movs	r6, #0
 800fb80:	4b62      	ldr	r3, [pc, #392]	; (800fd0c <_strtod_l+0xb0c>)
 800fb82:	402b      	ands	r3, r5
 800fb84:	930f      	str	r3, [sp, #60]	; 0x3c
 800fb86:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800fb88:	4b64      	ldr	r3, [pc, #400]	; (800fd1c <_strtod_l+0xb1c>)
 800fb8a:	429a      	cmp	r2, r3
 800fb8c:	f040 80ce 	bne.w	800fd2c <_strtod_l+0xb2c>
 800fb90:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800fb94:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800fb98:	f1a5 7b54 	sub.w	fp, r5, #55574528	; 0x3500000
 800fb9c:	ec4b ab10 	vmov	d0, sl, fp
 800fba0:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 800fba4:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800fba8:	f001 fe44 	bl	8011834 <__ulp>
 800fbac:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800fbb0:	ec53 2b10 	vmov	r2, r3, d0
 800fbb4:	f7f0 fd30 	bl	8000618 <__aeabi_dmul>
 800fbb8:	4652      	mov	r2, sl
 800fbba:	465b      	mov	r3, fp
 800fbbc:	f7f0 fb76 	bl	80002ac <__adddf3>
 800fbc0:	460b      	mov	r3, r1
 800fbc2:	4952      	ldr	r1, [pc, #328]	; (800fd0c <_strtod_l+0xb0c>)
 800fbc4:	4a56      	ldr	r2, [pc, #344]	; (800fd20 <_strtod_l+0xb20>)
 800fbc6:	4019      	ands	r1, r3
 800fbc8:	4291      	cmp	r1, r2
 800fbca:	4682      	mov	sl, r0
 800fbcc:	d95b      	bls.n	800fc86 <_strtod_l+0xa86>
 800fbce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fbd0:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800fbd4:	4293      	cmp	r3, r2
 800fbd6:	d103      	bne.n	800fbe0 <_strtod_l+0x9e0>
 800fbd8:	9b08      	ldr	r3, [sp, #32]
 800fbda:	3301      	adds	r3, #1
 800fbdc:	f43f ad2e 	beq.w	800f63c <_strtod_l+0x43c>
 800fbe0:	f8df b12c 	ldr.w	fp, [pc, #300]	; 800fd10 <_strtod_l+0xb10>
 800fbe4:	f04f 3aff 	mov.w	sl, #4294967295
 800fbe8:	991c      	ldr	r1, [sp, #112]	; 0x70
 800fbea:	4648      	mov	r0, r9
 800fbec:	f001 fb8a 	bl	8011304 <_Bfree>
 800fbf0:	9905      	ldr	r1, [sp, #20]
 800fbf2:	4648      	mov	r0, r9
 800fbf4:	f001 fb86 	bl	8011304 <_Bfree>
 800fbf8:	4641      	mov	r1, r8
 800fbfa:	4648      	mov	r0, r9
 800fbfc:	f001 fb82 	bl	8011304 <_Bfree>
 800fc00:	4621      	mov	r1, r4
 800fc02:	4648      	mov	r0, r9
 800fc04:	f001 fb7e 	bl	8011304 <_Bfree>
 800fc08:	e619      	b.n	800f83e <_strtod_l+0x63e>
 800fc0a:	f1ba 0f00 	cmp.w	sl, #0
 800fc0e:	d11a      	bne.n	800fc46 <_strtod_l+0xa46>
 800fc10:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800fc14:	b9eb      	cbnz	r3, 800fc52 <_strtod_l+0xa52>
 800fc16:	2200      	movs	r2, #0
 800fc18:	4b3f      	ldr	r3, [pc, #252]	; (800fd18 <_strtod_l+0xb18>)
 800fc1a:	4630      	mov	r0, r6
 800fc1c:	4639      	mov	r1, r7
 800fc1e:	f7f0 ff6d 	bl	8000afc <__aeabi_dcmplt>
 800fc22:	b9c8      	cbnz	r0, 800fc58 <_strtod_l+0xa58>
 800fc24:	4630      	mov	r0, r6
 800fc26:	4639      	mov	r1, r7
 800fc28:	2200      	movs	r2, #0
 800fc2a:	4b3e      	ldr	r3, [pc, #248]	; (800fd24 <_strtod_l+0xb24>)
 800fc2c:	f7f0 fcf4 	bl	8000618 <__aeabi_dmul>
 800fc30:	4606      	mov	r6, r0
 800fc32:	460f      	mov	r7, r1
 800fc34:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 800fc38:	9618      	str	r6, [sp, #96]	; 0x60
 800fc3a:	9319      	str	r3, [sp, #100]	; 0x64
 800fc3c:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 800fc40:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800fc44:	e79c      	b.n	800fb80 <_strtod_l+0x980>
 800fc46:	f1ba 0f01 	cmp.w	sl, #1
 800fc4a:	d102      	bne.n	800fc52 <_strtod_l+0xa52>
 800fc4c:	2d00      	cmp	r5, #0
 800fc4e:	f43f ad8e 	beq.w	800f76e <_strtod_l+0x56e>
 800fc52:	2200      	movs	r2, #0
 800fc54:	4b34      	ldr	r3, [pc, #208]	; (800fd28 <_strtod_l+0xb28>)
 800fc56:	e78f      	b.n	800fb78 <_strtod_l+0x978>
 800fc58:	2600      	movs	r6, #0
 800fc5a:	4f32      	ldr	r7, [pc, #200]	; (800fd24 <_strtod_l+0xb24>)
 800fc5c:	e7ea      	b.n	800fc34 <_strtod_l+0xa34>
 800fc5e:	4b31      	ldr	r3, [pc, #196]	; (800fd24 <_strtod_l+0xb24>)
 800fc60:	4630      	mov	r0, r6
 800fc62:	4639      	mov	r1, r7
 800fc64:	2200      	movs	r2, #0
 800fc66:	f7f0 fcd7 	bl	8000618 <__aeabi_dmul>
 800fc6a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800fc6c:	4606      	mov	r6, r0
 800fc6e:	460f      	mov	r7, r1
 800fc70:	b933      	cbnz	r3, 800fc80 <_strtod_l+0xa80>
 800fc72:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800fc76:	9010      	str	r0, [sp, #64]	; 0x40
 800fc78:	9311      	str	r3, [sp, #68]	; 0x44
 800fc7a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800fc7e:	e7df      	b.n	800fc40 <_strtod_l+0xa40>
 800fc80:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 800fc84:	e7f9      	b.n	800fc7a <_strtod_l+0xa7a>
 800fc86:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800fc8a:	9b04      	ldr	r3, [sp, #16]
 800fc8c:	2b00      	cmp	r3, #0
 800fc8e:	d1ab      	bne.n	800fbe8 <_strtod_l+0x9e8>
 800fc90:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800fc94:	0d1b      	lsrs	r3, r3, #20
 800fc96:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800fc98:	051b      	lsls	r3, r3, #20
 800fc9a:	429a      	cmp	r2, r3
 800fc9c:	465d      	mov	r5, fp
 800fc9e:	d1a3      	bne.n	800fbe8 <_strtod_l+0x9e8>
 800fca0:	4639      	mov	r1, r7
 800fca2:	4630      	mov	r0, r6
 800fca4:	f7f0 ff68 	bl	8000b78 <__aeabi_d2iz>
 800fca8:	f7f0 fc4c 	bl	8000544 <__aeabi_i2d>
 800fcac:	460b      	mov	r3, r1
 800fcae:	4602      	mov	r2, r0
 800fcb0:	4639      	mov	r1, r7
 800fcb2:	4630      	mov	r0, r6
 800fcb4:	f7f0 faf8 	bl	80002a8 <__aeabi_dsub>
 800fcb8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800fcba:	4606      	mov	r6, r0
 800fcbc:	460f      	mov	r7, r1
 800fcbe:	b933      	cbnz	r3, 800fcce <_strtod_l+0xace>
 800fcc0:	f1ba 0f00 	cmp.w	sl, #0
 800fcc4:	d103      	bne.n	800fcce <_strtod_l+0xace>
 800fcc6:	f3cb 0513 	ubfx	r5, fp, #0, #20
 800fcca:	2d00      	cmp	r5, #0
 800fccc:	d06d      	beq.n	800fdaa <_strtod_l+0xbaa>
 800fcce:	a30a      	add	r3, pc, #40	; (adr r3, 800fcf8 <_strtod_l+0xaf8>)
 800fcd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fcd4:	4630      	mov	r0, r6
 800fcd6:	4639      	mov	r1, r7
 800fcd8:	f7f0 ff10 	bl	8000afc <__aeabi_dcmplt>
 800fcdc:	2800      	cmp	r0, #0
 800fcde:	f47f acb8 	bne.w	800f652 <_strtod_l+0x452>
 800fce2:	a307      	add	r3, pc, #28	; (adr r3, 800fd00 <_strtod_l+0xb00>)
 800fce4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fce8:	4630      	mov	r0, r6
 800fcea:	4639      	mov	r1, r7
 800fcec:	f7f0 ff24 	bl	8000b38 <__aeabi_dcmpgt>
 800fcf0:	2800      	cmp	r0, #0
 800fcf2:	f43f af79 	beq.w	800fbe8 <_strtod_l+0x9e8>
 800fcf6:	e4ac      	b.n	800f652 <_strtod_l+0x452>
 800fcf8:	94a03595 	.word	0x94a03595
 800fcfc:	3fdfffff 	.word	0x3fdfffff
 800fd00:	35afe535 	.word	0x35afe535
 800fd04:	3fe00000 	.word	0x3fe00000
 800fd08:	000fffff 	.word	0x000fffff
 800fd0c:	7ff00000 	.word	0x7ff00000
 800fd10:	7fefffff 	.word	0x7fefffff
 800fd14:	39500000 	.word	0x39500000
 800fd18:	3ff00000 	.word	0x3ff00000
 800fd1c:	7fe00000 	.word	0x7fe00000
 800fd20:	7c9fffff 	.word	0x7c9fffff
 800fd24:	3fe00000 	.word	0x3fe00000
 800fd28:	bff00000 	.word	0xbff00000
 800fd2c:	9b04      	ldr	r3, [sp, #16]
 800fd2e:	b333      	cbz	r3, 800fd7e <_strtod_l+0xb7e>
 800fd30:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800fd32:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800fd36:	d822      	bhi.n	800fd7e <_strtod_l+0xb7e>
 800fd38:	a327      	add	r3, pc, #156	; (adr r3, 800fdd8 <_strtod_l+0xbd8>)
 800fd3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fd3e:	4630      	mov	r0, r6
 800fd40:	4639      	mov	r1, r7
 800fd42:	f7f0 fee5 	bl	8000b10 <__aeabi_dcmple>
 800fd46:	b1a0      	cbz	r0, 800fd72 <_strtod_l+0xb72>
 800fd48:	4639      	mov	r1, r7
 800fd4a:	4630      	mov	r0, r6
 800fd4c:	f7f0 ff3c 	bl	8000bc8 <__aeabi_d2uiz>
 800fd50:	2800      	cmp	r0, #0
 800fd52:	bf08      	it	eq
 800fd54:	2001      	moveq	r0, #1
 800fd56:	f7f0 fbe5 	bl	8000524 <__aeabi_ui2d>
 800fd5a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800fd5c:	4606      	mov	r6, r0
 800fd5e:	460f      	mov	r7, r1
 800fd60:	bb03      	cbnz	r3, 800fda4 <_strtod_l+0xba4>
 800fd62:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800fd66:	9012      	str	r0, [sp, #72]	; 0x48
 800fd68:	9313      	str	r3, [sp, #76]	; 0x4c
 800fd6a:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 800fd6e:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800fd72:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800fd74:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800fd76:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800fd7a:	1a9b      	subs	r3, r3, r2
 800fd7c:	930b      	str	r3, [sp, #44]	; 0x2c
 800fd7e:	ed9d 0b08 	vldr	d0, [sp, #32]
 800fd82:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
 800fd86:	f001 fd55 	bl	8011834 <__ulp>
 800fd8a:	4650      	mov	r0, sl
 800fd8c:	ec53 2b10 	vmov	r2, r3, d0
 800fd90:	4659      	mov	r1, fp
 800fd92:	f7f0 fc41 	bl	8000618 <__aeabi_dmul>
 800fd96:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800fd9a:	f7f0 fa87 	bl	80002ac <__adddf3>
 800fd9e:	4682      	mov	sl, r0
 800fda0:	468b      	mov	fp, r1
 800fda2:	e772      	b.n	800fc8a <_strtod_l+0xa8a>
 800fda4:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48
 800fda8:	e7df      	b.n	800fd6a <_strtod_l+0xb6a>
 800fdaa:	a30d      	add	r3, pc, #52	; (adr r3, 800fde0 <_strtod_l+0xbe0>)
 800fdac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fdb0:	f7f0 fea4 	bl	8000afc <__aeabi_dcmplt>
 800fdb4:	e79c      	b.n	800fcf0 <_strtod_l+0xaf0>
 800fdb6:	2300      	movs	r3, #0
 800fdb8:	930d      	str	r3, [sp, #52]	; 0x34
 800fdba:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800fdbc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800fdbe:	6013      	str	r3, [r2, #0]
 800fdc0:	f7ff ba61 	b.w	800f286 <_strtod_l+0x86>
 800fdc4:	2b65      	cmp	r3, #101	; 0x65
 800fdc6:	f04f 0200 	mov.w	r2, #0
 800fdca:	f43f ab4e 	beq.w	800f46a <_strtod_l+0x26a>
 800fdce:	2101      	movs	r1, #1
 800fdd0:	4614      	mov	r4, r2
 800fdd2:	9104      	str	r1, [sp, #16]
 800fdd4:	f7ff bacb 	b.w	800f36e <_strtod_l+0x16e>
 800fdd8:	ffc00000 	.word	0xffc00000
 800fddc:	41dfffff 	.word	0x41dfffff
 800fde0:	94a03595 	.word	0x94a03595
 800fde4:	3fcfffff 	.word	0x3fcfffff

0800fde8 <_strtod_r>:
 800fde8:	4b05      	ldr	r3, [pc, #20]	; (800fe00 <_strtod_r+0x18>)
 800fdea:	681b      	ldr	r3, [r3, #0]
 800fdec:	b410      	push	{r4}
 800fdee:	6a1b      	ldr	r3, [r3, #32]
 800fdf0:	4c04      	ldr	r4, [pc, #16]	; (800fe04 <_strtod_r+0x1c>)
 800fdf2:	2b00      	cmp	r3, #0
 800fdf4:	bf08      	it	eq
 800fdf6:	4623      	moveq	r3, r4
 800fdf8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800fdfc:	f7ff ba00 	b.w	800f200 <_strtod_l>
 800fe00:	2000017c 	.word	0x2000017c
 800fe04:	200001e0 	.word	0x200001e0

0800fe08 <strtod>:
 800fe08:	4b07      	ldr	r3, [pc, #28]	; (800fe28 <strtod+0x20>)
 800fe0a:	4a08      	ldr	r2, [pc, #32]	; (800fe2c <strtod+0x24>)
 800fe0c:	b410      	push	{r4}
 800fe0e:	681c      	ldr	r4, [r3, #0]
 800fe10:	6a23      	ldr	r3, [r4, #32]
 800fe12:	2b00      	cmp	r3, #0
 800fe14:	bf08      	it	eq
 800fe16:	4613      	moveq	r3, r2
 800fe18:	460a      	mov	r2, r1
 800fe1a:	4601      	mov	r1, r0
 800fe1c:	4620      	mov	r0, r4
 800fe1e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800fe22:	f7ff b9ed 	b.w	800f200 <_strtod_l>
 800fe26:	bf00      	nop
 800fe28:	2000017c 	.word	0x2000017c
 800fe2c:	200001e0 	.word	0x200001e0

0800fe30 <_strtol_l.isra.0>:
 800fe30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fe34:	4680      	mov	r8, r0
 800fe36:	4689      	mov	r9, r1
 800fe38:	4692      	mov	sl, r2
 800fe3a:	461e      	mov	r6, r3
 800fe3c:	460f      	mov	r7, r1
 800fe3e:	463d      	mov	r5, r7
 800fe40:	9808      	ldr	r0, [sp, #32]
 800fe42:	f815 4b01 	ldrb.w	r4, [r5], #1
 800fe46:	f001 fa01 	bl	801124c <__locale_ctype_ptr_l>
 800fe4a:	4420      	add	r0, r4
 800fe4c:	7843      	ldrb	r3, [r0, #1]
 800fe4e:	f013 0308 	ands.w	r3, r3, #8
 800fe52:	d132      	bne.n	800feba <_strtol_l.isra.0+0x8a>
 800fe54:	2c2d      	cmp	r4, #45	; 0x2d
 800fe56:	d132      	bne.n	800febe <_strtol_l.isra.0+0x8e>
 800fe58:	787c      	ldrb	r4, [r7, #1]
 800fe5a:	1cbd      	adds	r5, r7, #2
 800fe5c:	2201      	movs	r2, #1
 800fe5e:	2e00      	cmp	r6, #0
 800fe60:	d05d      	beq.n	800ff1e <_strtol_l.isra.0+0xee>
 800fe62:	2e10      	cmp	r6, #16
 800fe64:	d109      	bne.n	800fe7a <_strtol_l.isra.0+0x4a>
 800fe66:	2c30      	cmp	r4, #48	; 0x30
 800fe68:	d107      	bne.n	800fe7a <_strtol_l.isra.0+0x4a>
 800fe6a:	782b      	ldrb	r3, [r5, #0]
 800fe6c:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800fe70:	2b58      	cmp	r3, #88	; 0x58
 800fe72:	d14f      	bne.n	800ff14 <_strtol_l.isra.0+0xe4>
 800fe74:	786c      	ldrb	r4, [r5, #1]
 800fe76:	2610      	movs	r6, #16
 800fe78:	3502      	adds	r5, #2
 800fe7a:	2a00      	cmp	r2, #0
 800fe7c:	bf14      	ite	ne
 800fe7e:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 800fe82:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 800fe86:	2700      	movs	r7, #0
 800fe88:	fbb1 fcf6 	udiv	ip, r1, r6
 800fe8c:	4638      	mov	r0, r7
 800fe8e:	fb06 1e1c 	mls	lr, r6, ip, r1
 800fe92:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 800fe96:	2b09      	cmp	r3, #9
 800fe98:	d817      	bhi.n	800feca <_strtol_l.isra.0+0x9a>
 800fe9a:	461c      	mov	r4, r3
 800fe9c:	42a6      	cmp	r6, r4
 800fe9e:	dd23      	ble.n	800fee8 <_strtol_l.isra.0+0xb8>
 800fea0:	1c7b      	adds	r3, r7, #1
 800fea2:	d007      	beq.n	800feb4 <_strtol_l.isra.0+0x84>
 800fea4:	4584      	cmp	ip, r0
 800fea6:	d31c      	bcc.n	800fee2 <_strtol_l.isra.0+0xb2>
 800fea8:	d101      	bne.n	800feae <_strtol_l.isra.0+0x7e>
 800feaa:	45a6      	cmp	lr, r4
 800feac:	db19      	blt.n	800fee2 <_strtol_l.isra.0+0xb2>
 800feae:	fb00 4006 	mla	r0, r0, r6, r4
 800feb2:	2701      	movs	r7, #1
 800feb4:	f815 4b01 	ldrb.w	r4, [r5], #1
 800feb8:	e7eb      	b.n	800fe92 <_strtol_l.isra.0+0x62>
 800feba:	462f      	mov	r7, r5
 800febc:	e7bf      	b.n	800fe3e <_strtol_l.isra.0+0xe>
 800febe:	2c2b      	cmp	r4, #43	; 0x2b
 800fec0:	bf04      	itt	eq
 800fec2:	1cbd      	addeq	r5, r7, #2
 800fec4:	787c      	ldrbeq	r4, [r7, #1]
 800fec6:	461a      	mov	r2, r3
 800fec8:	e7c9      	b.n	800fe5e <_strtol_l.isra.0+0x2e>
 800feca:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 800fece:	2b19      	cmp	r3, #25
 800fed0:	d801      	bhi.n	800fed6 <_strtol_l.isra.0+0xa6>
 800fed2:	3c37      	subs	r4, #55	; 0x37
 800fed4:	e7e2      	b.n	800fe9c <_strtol_l.isra.0+0x6c>
 800fed6:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 800feda:	2b19      	cmp	r3, #25
 800fedc:	d804      	bhi.n	800fee8 <_strtol_l.isra.0+0xb8>
 800fede:	3c57      	subs	r4, #87	; 0x57
 800fee0:	e7dc      	b.n	800fe9c <_strtol_l.isra.0+0x6c>
 800fee2:	f04f 37ff 	mov.w	r7, #4294967295
 800fee6:	e7e5      	b.n	800feb4 <_strtol_l.isra.0+0x84>
 800fee8:	1c7b      	adds	r3, r7, #1
 800feea:	d108      	bne.n	800fefe <_strtol_l.isra.0+0xce>
 800feec:	2322      	movs	r3, #34	; 0x22
 800feee:	f8c8 3000 	str.w	r3, [r8]
 800fef2:	4608      	mov	r0, r1
 800fef4:	f1ba 0f00 	cmp.w	sl, #0
 800fef8:	d107      	bne.n	800ff0a <_strtol_l.isra.0+0xda>
 800fefa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fefe:	b102      	cbz	r2, 800ff02 <_strtol_l.isra.0+0xd2>
 800ff00:	4240      	negs	r0, r0
 800ff02:	f1ba 0f00 	cmp.w	sl, #0
 800ff06:	d0f8      	beq.n	800fefa <_strtol_l.isra.0+0xca>
 800ff08:	b10f      	cbz	r7, 800ff0e <_strtol_l.isra.0+0xde>
 800ff0a:	f105 39ff 	add.w	r9, r5, #4294967295
 800ff0e:	f8ca 9000 	str.w	r9, [sl]
 800ff12:	e7f2      	b.n	800fefa <_strtol_l.isra.0+0xca>
 800ff14:	2430      	movs	r4, #48	; 0x30
 800ff16:	2e00      	cmp	r6, #0
 800ff18:	d1af      	bne.n	800fe7a <_strtol_l.isra.0+0x4a>
 800ff1a:	2608      	movs	r6, #8
 800ff1c:	e7ad      	b.n	800fe7a <_strtol_l.isra.0+0x4a>
 800ff1e:	2c30      	cmp	r4, #48	; 0x30
 800ff20:	d0a3      	beq.n	800fe6a <_strtol_l.isra.0+0x3a>
 800ff22:	260a      	movs	r6, #10
 800ff24:	e7a9      	b.n	800fe7a <_strtol_l.isra.0+0x4a>
	...

0800ff28 <_strtol_r>:
 800ff28:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ff2a:	4c06      	ldr	r4, [pc, #24]	; (800ff44 <_strtol_r+0x1c>)
 800ff2c:	4d06      	ldr	r5, [pc, #24]	; (800ff48 <_strtol_r+0x20>)
 800ff2e:	6824      	ldr	r4, [r4, #0]
 800ff30:	6a24      	ldr	r4, [r4, #32]
 800ff32:	2c00      	cmp	r4, #0
 800ff34:	bf08      	it	eq
 800ff36:	462c      	moveq	r4, r5
 800ff38:	9400      	str	r4, [sp, #0]
 800ff3a:	f7ff ff79 	bl	800fe30 <_strtol_l.isra.0>
 800ff3e:	b003      	add	sp, #12
 800ff40:	bd30      	pop	{r4, r5, pc}
 800ff42:	bf00      	nop
 800ff44:	2000017c 	.word	0x2000017c
 800ff48:	200001e0 	.word	0x200001e0

0800ff4c <strtol>:
 800ff4c:	4b08      	ldr	r3, [pc, #32]	; (800ff70 <strtol+0x24>)
 800ff4e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ff50:	681c      	ldr	r4, [r3, #0]
 800ff52:	4d08      	ldr	r5, [pc, #32]	; (800ff74 <strtol+0x28>)
 800ff54:	6a23      	ldr	r3, [r4, #32]
 800ff56:	2b00      	cmp	r3, #0
 800ff58:	bf08      	it	eq
 800ff5a:	462b      	moveq	r3, r5
 800ff5c:	9300      	str	r3, [sp, #0]
 800ff5e:	4613      	mov	r3, r2
 800ff60:	460a      	mov	r2, r1
 800ff62:	4601      	mov	r1, r0
 800ff64:	4620      	mov	r0, r4
 800ff66:	f7ff ff63 	bl	800fe30 <_strtol_l.isra.0>
 800ff6a:	b003      	add	sp, #12
 800ff6c:	bd30      	pop	{r4, r5, pc}
 800ff6e:	bf00      	nop
 800ff70:	2000017c 	.word	0x2000017c
 800ff74:	200001e0 	.word	0x200001e0

0800ff78 <quorem>:
 800ff78:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ff7c:	6903      	ldr	r3, [r0, #16]
 800ff7e:	690c      	ldr	r4, [r1, #16]
 800ff80:	42a3      	cmp	r3, r4
 800ff82:	4680      	mov	r8, r0
 800ff84:	f2c0 8082 	blt.w	801008c <quorem+0x114>
 800ff88:	3c01      	subs	r4, #1
 800ff8a:	f101 0714 	add.w	r7, r1, #20
 800ff8e:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 800ff92:	f100 0614 	add.w	r6, r0, #20
 800ff96:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800ff9a:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 800ff9e:	eb06 030c 	add.w	r3, r6, ip
 800ffa2:	3501      	adds	r5, #1
 800ffa4:	eb07 090c 	add.w	r9, r7, ip
 800ffa8:	9301      	str	r3, [sp, #4]
 800ffaa:	fbb0 f5f5 	udiv	r5, r0, r5
 800ffae:	b395      	cbz	r5, 8010016 <quorem+0x9e>
 800ffb0:	f04f 0a00 	mov.w	sl, #0
 800ffb4:	4638      	mov	r0, r7
 800ffb6:	46b6      	mov	lr, r6
 800ffb8:	46d3      	mov	fp, sl
 800ffba:	f850 2b04 	ldr.w	r2, [r0], #4
 800ffbe:	b293      	uxth	r3, r2
 800ffc0:	fb05 a303 	mla	r3, r5, r3, sl
 800ffc4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800ffc8:	b29b      	uxth	r3, r3
 800ffca:	ebab 0303 	sub.w	r3, fp, r3
 800ffce:	0c12      	lsrs	r2, r2, #16
 800ffd0:	f8de b000 	ldr.w	fp, [lr]
 800ffd4:	fb05 a202 	mla	r2, r5, r2, sl
 800ffd8:	fa13 f38b 	uxtah	r3, r3, fp
 800ffdc:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 800ffe0:	fa1f fb82 	uxth.w	fp, r2
 800ffe4:	f8de 2000 	ldr.w	r2, [lr]
 800ffe8:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 800ffec:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800fff0:	b29b      	uxth	r3, r3
 800fff2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800fff6:	4581      	cmp	r9, r0
 800fff8:	ea4f 4b22 	mov.w	fp, r2, asr #16
 800fffc:	f84e 3b04 	str.w	r3, [lr], #4
 8010000:	d2db      	bcs.n	800ffba <quorem+0x42>
 8010002:	f856 300c 	ldr.w	r3, [r6, ip]
 8010006:	b933      	cbnz	r3, 8010016 <quorem+0x9e>
 8010008:	9b01      	ldr	r3, [sp, #4]
 801000a:	3b04      	subs	r3, #4
 801000c:	429e      	cmp	r6, r3
 801000e:	461a      	mov	r2, r3
 8010010:	d330      	bcc.n	8010074 <quorem+0xfc>
 8010012:	f8c8 4010 	str.w	r4, [r8, #16]
 8010016:	4640      	mov	r0, r8
 8010018:	f001 fb94 	bl	8011744 <__mcmp>
 801001c:	2800      	cmp	r0, #0
 801001e:	db25      	blt.n	801006c <quorem+0xf4>
 8010020:	3501      	adds	r5, #1
 8010022:	4630      	mov	r0, r6
 8010024:	f04f 0c00 	mov.w	ip, #0
 8010028:	f857 2b04 	ldr.w	r2, [r7], #4
 801002c:	f8d0 e000 	ldr.w	lr, [r0]
 8010030:	b293      	uxth	r3, r2
 8010032:	ebac 0303 	sub.w	r3, ip, r3
 8010036:	0c12      	lsrs	r2, r2, #16
 8010038:	fa13 f38e 	uxtah	r3, r3, lr
 801003c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8010040:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8010044:	b29b      	uxth	r3, r3
 8010046:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801004a:	45b9      	cmp	r9, r7
 801004c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8010050:	f840 3b04 	str.w	r3, [r0], #4
 8010054:	d2e8      	bcs.n	8010028 <quorem+0xb0>
 8010056:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 801005a:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 801005e:	b92a      	cbnz	r2, 801006c <quorem+0xf4>
 8010060:	3b04      	subs	r3, #4
 8010062:	429e      	cmp	r6, r3
 8010064:	461a      	mov	r2, r3
 8010066:	d30b      	bcc.n	8010080 <quorem+0x108>
 8010068:	f8c8 4010 	str.w	r4, [r8, #16]
 801006c:	4628      	mov	r0, r5
 801006e:	b003      	add	sp, #12
 8010070:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010074:	6812      	ldr	r2, [r2, #0]
 8010076:	3b04      	subs	r3, #4
 8010078:	2a00      	cmp	r2, #0
 801007a:	d1ca      	bne.n	8010012 <quorem+0x9a>
 801007c:	3c01      	subs	r4, #1
 801007e:	e7c5      	b.n	801000c <quorem+0x94>
 8010080:	6812      	ldr	r2, [r2, #0]
 8010082:	3b04      	subs	r3, #4
 8010084:	2a00      	cmp	r2, #0
 8010086:	d1ef      	bne.n	8010068 <quorem+0xf0>
 8010088:	3c01      	subs	r4, #1
 801008a:	e7ea      	b.n	8010062 <quorem+0xea>
 801008c:	2000      	movs	r0, #0
 801008e:	e7ee      	b.n	801006e <quorem+0xf6>

08010090 <_dtoa_r>:
 8010090:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010094:	ec57 6b10 	vmov	r6, r7, d0
 8010098:	b097      	sub	sp, #92	; 0x5c
 801009a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 801009c:	9106      	str	r1, [sp, #24]
 801009e:	4604      	mov	r4, r0
 80100a0:	920b      	str	r2, [sp, #44]	; 0x2c
 80100a2:	9312      	str	r3, [sp, #72]	; 0x48
 80100a4:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80100a8:	e9cd 6700 	strd	r6, r7, [sp]
 80100ac:	b93d      	cbnz	r5, 80100be <_dtoa_r+0x2e>
 80100ae:	2010      	movs	r0, #16
 80100b0:	f7fe f90c 	bl	800e2cc <malloc>
 80100b4:	6260      	str	r0, [r4, #36]	; 0x24
 80100b6:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80100ba:	6005      	str	r5, [r0, #0]
 80100bc:	60c5      	str	r5, [r0, #12]
 80100be:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80100c0:	6819      	ldr	r1, [r3, #0]
 80100c2:	b151      	cbz	r1, 80100da <_dtoa_r+0x4a>
 80100c4:	685a      	ldr	r2, [r3, #4]
 80100c6:	604a      	str	r2, [r1, #4]
 80100c8:	2301      	movs	r3, #1
 80100ca:	4093      	lsls	r3, r2
 80100cc:	608b      	str	r3, [r1, #8]
 80100ce:	4620      	mov	r0, r4
 80100d0:	f001 f918 	bl	8011304 <_Bfree>
 80100d4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80100d6:	2200      	movs	r2, #0
 80100d8:	601a      	str	r2, [r3, #0]
 80100da:	1e3b      	subs	r3, r7, #0
 80100dc:	bfbb      	ittet	lt
 80100de:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80100e2:	9301      	strlt	r3, [sp, #4]
 80100e4:	2300      	movge	r3, #0
 80100e6:	2201      	movlt	r2, #1
 80100e8:	bfac      	ite	ge
 80100ea:	f8c8 3000 	strge.w	r3, [r8]
 80100ee:	f8c8 2000 	strlt.w	r2, [r8]
 80100f2:	4baf      	ldr	r3, [pc, #700]	; (80103b0 <_dtoa_r+0x320>)
 80100f4:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80100f8:	ea33 0308 	bics.w	r3, r3, r8
 80100fc:	d114      	bne.n	8010128 <_dtoa_r+0x98>
 80100fe:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8010100:	f242 730f 	movw	r3, #9999	; 0x270f
 8010104:	6013      	str	r3, [r2, #0]
 8010106:	9b00      	ldr	r3, [sp, #0]
 8010108:	b923      	cbnz	r3, 8010114 <_dtoa_r+0x84>
 801010a:	f3c8 0013 	ubfx	r0, r8, #0, #20
 801010e:	2800      	cmp	r0, #0
 8010110:	f000 8542 	beq.w	8010b98 <_dtoa_r+0xb08>
 8010114:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8010116:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 80103c4 <_dtoa_r+0x334>
 801011a:	2b00      	cmp	r3, #0
 801011c:	f000 8544 	beq.w	8010ba8 <_dtoa_r+0xb18>
 8010120:	f10b 0303 	add.w	r3, fp, #3
 8010124:	f000 bd3e 	b.w	8010ba4 <_dtoa_r+0xb14>
 8010128:	e9dd 6700 	ldrd	r6, r7, [sp]
 801012c:	2200      	movs	r2, #0
 801012e:	2300      	movs	r3, #0
 8010130:	4630      	mov	r0, r6
 8010132:	4639      	mov	r1, r7
 8010134:	f7f0 fcd8 	bl	8000ae8 <__aeabi_dcmpeq>
 8010138:	4681      	mov	r9, r0
 801013a:	b168      	cbz	r0, 8010158 <_dtoa_r+0xc8>
 801013c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801013e:	2301      	movs	r3, #1
 8010140:	6013      	str	r3, [r2, #0]
 8010142:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8010144:	2b00      	cmp	r3, #0
 8010146:	f000 8524 	beq.w	8010b92 <_dtoa_r+0xb02>
 801014a:	4b9a      	ldr	r3, [pc, #616]	; (80103b4 <_dtoa_r+0x324>)
 801014c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801014e:	f103 3bff 	add.w	fp, r3, #4294967295
 8010152:	6013      	str	r3, [r2, #0]
 8010154:	f000 bd28 	b.w	8010ba8 <_dtoa_r+0xb18>
 8010158:	aa14      	add	r2, sp, #80	; 0x50
 801015a:	a915      	add	r1, sp, #84	; 0x54
 801015c:	ec47 6b10 	vmov	d0, r6, r7
 8010160:	4620      	mov	r0, r4
 8010162:	f001 fbdd 	bl	8011920 <__d2b>
 8010166:	f3c8 550a 	ubfx	r5, r8, #20, #11
 801016a:	9004      	str	r0, [sp, #16]
 801016c:	2d00      	cmp	r5, #0
 801016e:	d07c      	beq.n	801026a <_dtoa_r+0x1da>
 8010170:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8010174:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8010178:	46b2      	mov	sl, r6
 801017a:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 801017e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8010182:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 8010186:	2200      	movs	r2, #0
 8010188:	4b8b      	ldr	r3, [pc, #556]	; (80103b8 <_dtoa_r+0x328>)
 801018a:	4650      	mov	r0, sl
 801018c:	4659      	mov	r1, fp
 801018e:	f7f0 f88b 	bl	80002a8 <__aeabi_dsub>
 8010192:	a381      	add	r3, pc, #516	; (adr r3, 8010398 <_dtoa_r+0x308>)
 8010194:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010198:	f7f0 fa3e 	bl	8000618 <__aeabi_dmul>
 801019c:	a380      	add	r3, pc, #512	; (adr r3, 80103a0 <_dtoa_r+0x310>)
 801019e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80101a2:	f7f0 f883 	bl	80002ac <__adddf3>
 80101a6:	4606      	mov	r6, r0
 80101a8:	4628      	mov	r0, r5
 80101aa:	460f      	mov	r7, r1
 80101ac:	f7f0 f9ca 	bl	8000544 <__aeabi_i2d>
 80101b0:	a37d      	add	r3, pc, #500	; (adr r3, 80103a8 <_dtoa_r+0x318>)
 80101b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80101b6:	f7f0 fa2f 	bl	8000618 <__aeabi_dmul>
 80101ba:	4602      	mov	r2, r0
 80101bc:	460b      	mov	r3, r1
 80101be:	4630      	mov	r0, r6
 80101c0:	4639      	mov	r1, r7
 80101c2:	f7f0 f873 	bl	80002ac <__adddf3>
 80101c6:	4606      	mov	r6, r0
 80101c8:	460f      	mov	r7, r1
 80101ca:	f7f0 fcd5 	bl	8000b78 <__aeabi_d2iz>
 80101ce:	2200      	movs	r2, #0
 80101d0:	4682      	mov	sl, r0
 80101d2:	2300      	movs	r3, #0
 80101d4:	4630      	mov	r0, r6
 80101d6:	4639      	mov	r1, r7
 80101d8:	f7f0 fc90 	bl	8000afc <__aeabi_dcmplt>
 80101dc:	b148      	cbz	r0, 80101f2 <_dtoa_r+0x162>
 80101de:	4650      	mov	r0, sl
 80101e0:	f7f0 f9b0 	bl	8000544 <__aeabi_i2d>
 80101e4:	4632      	mov	r2, r6
 80101e6:	463b      	mov	r3, r7
 80101e8:	f7f0 fc7e 	bl	8000ae8 <__aeabi_dcmpeq>
 80101ec:	b908      	cbnz	r0, 80101f2 <_dtoa_r+0x162>
 80101ee:	f10a 3aff 	add.w	sl, sl, #4294967295
 80101f2:	f1ba 0f16 	cmp.w	sl, #22
 80101f6:	d859      	bhi.n	80102ac <_dtoa_r+0x21c>
 80101f8:	4970      	ldr	r1, [pc, #448]	; (80103bc <_dtoa_r+0x32c>)
 80101fa:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 80101fe:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010202:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010206:	f7f0 fc97 	bl	8000b38 <__aeabi_dcmpgt>
 801020a:	2800      	cmp	r0, #0
 801020c:	d050      	beq.n	80102b0 <_dtoa_r+0x220>
 801020e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8010212:	2300      	movs	r3, #0
 8010214:	930f      	str	r3, [sp, #60]	; 0x3c
 8010216:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8010218:	1b5d      	subs	r5, r3, r5
 801021a:	f1b5 0801 	subs.w	r8, r5, #1
 801021e:	bf49      	itett	mi
 8010220:	f1c5 0301 	rsbmi	r3, r5, #1
 8010224:	2300      	movpl	r3, #0
 8010226:	9305      	strmi	r3, [sp, #20]
 8010228:	f04f 0800 	movmi.w	r8, #0
 801022c:	bf58      	it	pl
 801022e:	9305      	strpl	r3, [sp, #20]
 8010230:	f1ba 0f00 	cmp.w	sl, #0
 8010234:	db3e      	blt.n	80102b4 <_dtoa_r+0x224>
 8010236:	2300      	movs	r3, #0
 8010238:	44d0      	add	r8, sl
 801023a:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 801023e:	9307      	str	r3, [sp, #28]
 8010240:	9b06      	ldr	r3, [sp, #24]
 8010242:	2b09      	cmp	r3, #9
 8010244:	f200 8090 	bhi.w	8010368 <_dtoa_r+0x2d8>
 8010248:	2b05      	cmp	r3, #5
 801024a:	bfc4      	itt	gt
 801024c:	3b04      	subgt	r3, #4
 801024e:	9306      	strgt	r3, [sp, #24]
 8010250:	9b06      	ldr	r3, [sp, #24]
 8010252:	f1a3 0302 	sub.w	r3, r3, #2
 8010256:	bfcc      	ite	gt
 8010258:	2500      	movgt	r5, #0
 801025a:	2501      	movle	r5, #1
 801025c:	2b03      	cmp	r3, #3
 801025e:	f200 808f 	bhi.w	8010380 <_dtoa_r+0x2f0>
 8010262:	e8df f003 	tbb	[pc, r3]
 8010266:	7f7d      	.short	0x7f7d
 8010268:	7131      	.short	0x7131
 801026a:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 801026e:	441d      	add	r5, r3
 8010270:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8010274:	2820      	cmp	r0, #32
 8010276:	dd13      	ble.n	80102a0 <_dtoa_r+0x210>
 8010278:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 801027c:	9b00      	ldr	r3, [sp, #0]
 801027e:	fa08 f800 	lsl.w	r8, r8, r0
 8010282:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8010286:	fa23 f000 	lsr.w	r0, r3, r0
 801028a:	ea48 0000 	orr.w	r0, r8, r0
 801028e:	f7f0 f949 	bl	8000524 <__aeabi_ui2d>
 8010292:	2301      	movs	r3, #1
 8010294:	4682      	mov	sl, r0
 8010296:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 801029a:	3d01      	subs	r5, #1
 801029c:	9313      	str	r3, [sp, #76]	; 0x4c
 801029e:	e772      	b.n	8010186 <_dtoa_r+0xf6>
 80102a0:	9b00      	ldr	r3, [sp, #0]
 80102a2:	f1c0 0020 	rsb	r0, r0, #32
 80102a6:	fa03 f000 	lsl.w	r0, r3, r0
 80102aa:	e7f0      	b.n	801028e <_dtoa_r+0x1fe>
 80102ac:	2301      	movs	r3, #1
 80102ae:	e7b1      	b.n	8010214 <_dtoa_r+0x184>
 80102b0:	900f      	str	r0, [sp, #60]	; 0x3c
 80102b2:	e7b0      	b.n	8010216 <_dtoa_r+0x186>
 80102b4:	9b05      	ldr	r3, [sp, #20]
 80102b6:	eba3 030a 	sub.w	r3, r3, sl
 80102ba:	9305      	str	r3, [sp, #20]
 80102bc:	f1ca 0300 	rsb	r3, sl, #0
 80102c0:	9307      	str	r3, [sp, #28]
 80102c2:	2300      	movs	r3, #0
 80102c4:	930e      	str	r3, [sp, #56]	; 0x38
 80102c6:	e7bb      	b.n	8010240 <_dtoa_r+0x1b0>
 80102c8:	2301      	movs	r3, #1
 80102ca:	930a      	str	r3, [sp, #40]	; 0x28
 80102cc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80102ce:	2b00      	cmp	r3, #0
 80102d0:	dd59      	ble.n	8010386 <_dtoa_r+0x2f6>
 80102d2:	9302      	str	r3, [sp, #8]
 80102d4:	4699      	mov	r9, r3
 80102d6:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80102d8:	2200      	movs	r2, #0
 80102da:	6072      	str	r2, [r6, #4]
 80102dc:	2204      	movs	r2, #4
 80102de:	f102 0014 	add.w	r0, r2, #20
 80102e2:	4298      	cmp	r0, r3
 80102e4:	6871      	ldr	r1, [r6, #4]
 80102e6:	d953      	bls.n	8010390 <_dtoa_r+0x300>
 80102e8:	4620      	mov	r0, r4
 80102ea:	f000 ffd7 	bl	801129c <_Balloc>
 80102ee:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80102f0:	6030      	str	r0, [r6, #0]
 80102f2:	f1b9 0f0e 	cmp.w	r9, #14
 80102f6:	f8d3 b000 	ldr.w	fp, [r3]
 80102fa:	f200 80e6 	bhi.w	80104ca <_dtoa_r+0x43a>
 80102fe:	2d00      	cmp	r5, #0
 8010300:	f000 80e3 	beq.w	80104ca <_dtoa_r+0x43a>
 8010304:	ed9d 7b00 	vldr	d7, [sp]
 8010308:	f1ba 0f00 	cmp.w	sl, #0
 801030c:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8010310:	dd74      	ble.n	80103fc <_dtoa_r+0x36c>
 8010312:	4a2a      	ldr	r2, [pc, #168]	; (80103bc <_dtoa_r+0x32c>)
 8010314:	f00a 030f 	and.w	r3, sl, #15
 8010318:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 801031c:	ed93 7b00 	vldr	d7, [r3]
 8010320:	ea4f 162a 	mov.w	r6, sl, asr #4
 8010324:	06f0      	lsls	r0, r6, #27
 8010326:	ed8d 7b08 	vstr	d7, [sp, #32]
 801032a:	d565      	bpl.n	80103f8 <_dtoa_r+0x368>
 801032c:	4b24      	ldr	r3, [pc, #144]	; (80103c0 <_dtoa_r+0x330>)
 801032e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8010332:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8010336:	f7f0 fa99 	bl	800086c <__aeabi_ddiv>
 801033a:	e9cd 0100 	strd	r0, r1, [sp]
 801033e:	f006 060f 	and.w	r6, r6, #15
 8010342:	2503      	movs	r5, #3
 8010344:	4f1e      	ldr	r7, [pc, #120]	; (80103c0 <_dtoa_r+0x330>)
 8010346:	e04c      	b.n	80103e2 <_dtoa_r+0x352>
 8010348:	2301      	movs	r3, #1
 801034a:	930a      	str	r3, [sp, #40]	; 0x28
 801034c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801034e:	4453      	add	r3, sl
 8010350:	f103 0901 	add.w	r9, r3, #1
 8010354:	9302      	str	r3, [sp, #8]
 8010356:	464b      	mov	r3, r9
 8010358:	2b01      	cmp	r3, #1
 801035a:	bfb8      	it	lt
 801035c:	2301      	movlt	r3, #1
 801035e:	e7ba      	b.n	80102d6 <_dtoa_r+0x246>
 8010360:	2300      	movs	r3, #0
 8010362:	e7b2      	b.n	80102ca <_dtoa_r+0x23a>
 8010364:	2300      	movs	r3, #0
 8010366:	e7f0      	b.n	801034a <_dtoa_r+0x2ba>
 8010368:	2501      	movs	r5, #1
 801036a:	2300      	movs	r3, #0
 801036c:	9306      	str	r3, [sp, #24]
 801036e:	950a      	str	r5, [sp, #40]	; 0x28
 8010370:	f04f 33ff 	mov.w	r3, #4294967295
 8010374:	9302      	str	r3, [sp, #8]
 8010376:	4699      	mov	r9, r3
 8010378:	2200      	movs	r2, #0
 801037a:	2312      	movs	r3, #18
 801037c:	920b      	str	r2, [sp, #44]	; 0x2c
 801037e:	e7aa      	b.n	80102d6 <_dtoa_r+0x246>
 8010380:	2301      	movs	r3, #1
 8010382:	930a      	str	r3, [sp, #40]	; 0x28
 8010384:	e7f4      	b.n	8010370 <_dtoa_r+0x2e0>
 8010386:	2301      	movs	r3, #1
 8010388:	9302      	str	r3, [sp, #8]
 801038a:	4699      	mov	r9, r3
 801038c:	461a      	mov	r2, r3
 801038e:	e7f5      	b.n	801037c <_dtoa_r+0x2ec>
 8010390:	3101      	adds	r1, #1
 8010392:	6071      	str	r1, [r6, #4]
 8010394:	0052      	lsls	r2, r2, #1
 8010396:	e7a2      	b.n	80102de <_dtoa_r+0x24e>
 8010398:	636f4361 	.word	0x636f4361
 801039c:	3fd287a7 	.word	0x3fd287a7
 80103a0:	8b60c8b3 	.word	0x8b60c8b3
 80103a4:	3fc68a28 	.word	0x3fc68a28
 80103a8:	509f79fb 	.word	0x509f79fb
 80103ac:	3fd34413 	.word	0x3fd34413
 80103b0:	7ff00000 	.word	0x7ff00000
 80103b4:	08012701 	.word	0x08012701
 80103b8:	3ff80000 	.word	0x3ff80000
 80103bc:	080127c0 	.word	0x080127c0
 80103c0:	08012798 	.word	0x08012798
 80103c4:	08012789 	.word	0x08012789
 80103c8:	07f1      	lsls	r1, r6, #31
 80103ca:	d508      	bpl.n	80103de <_dtoa_r+0x34e>
 80103cc:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80103d0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80103d4:	f7f0 f920 	bl	8000618 <__aeabi_dmul>
 80103d8:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80103dc:	3501      	adds	r5, #1
 80103de:	1076      	asrs	r6, r6, #1
 80103e0:	3708      	adds	r7, #8
 80103e2:	2e00      	cmp	r6, #0
 80103e4:	d1f0      	bne.n	80103c8 <_dtoa_r+0x338>
 80103e6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80103ea:	e9dd 0100 	ldrd	r0, r1, [sp]
 80103ee:	f7f0 fa3d 	bl	800086c <__aeabi_ddiv>
 80103f2:	e9cd 0100 	strd	r0, r1, [sp]
 80103f6:	e01a      	b.n	801042e <_dtoa_r+0x39e>
 80103f8:	2502      	movs	r5, #2
 80103fa:	e7a3      	b.n	8010344 <_dtoa_r+0x2b4>
 80103fc:	f000 80a0 	beq.w	8010540 <_dtoa_r+0x4b0>
 8010400:	f1ca 0600 	rsb	r6, sl, #0
 8010404:	4b9f      	ldr	r3, [pc, #636]	; (8010684 <_dtoa_r+0x5f4>)
 8010406:	4fa0      	ldr	r7, [pc, #640]	; (8010688 <_dtoa_r+0x5f8>)
 8010408:	f006 020f 	and.w	r2, r6, #15
 801040c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8010410:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010414:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8010418:	f7f0 f8fe 	bl	8000618 <__aeabi_dmul>
 801041c:	e9cd 0100 	strd	r0, r1, [sp]
 8010420:	1136      	asrs	r6, r6, #4
 8010422:	2300      	movs	r3, #0
 8010424:	2502      	movs	r5, #2
 8010426:	2e00      	cmp	r6, #0
 8010428:	d17f      	bne.n	801052a <_dtoa_r+0x49a>
 801042a:	2b00      	cmp	r3, #0
 801042c:	d1e1      	bne.n	80103f2 <_dtoa_r+0x362>
 801042e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8010430:	2b00      	cmp	r3, #0
 8010432:	f000 8087 	beq.w	8010544 <_dtoa_r+0x4b4>
 8010436:	e9dd 6700 	ldrd	r6, r7, [sp]
 801043a:	2200      	movs	r2, #0
 801043c:	4b93      	ldr	r3, [pc, #588]	; (801068c <_dtoa_r+0x5fc>)
 801043e:	4630      	mov	r0, r6
 8010440:	4639      	mov	r1, r7
 8010442:	f7f0 fb5b 	bl	8000afc <__aeabi_dcmplt>
 8010446:	2800      	cmp	r0, #0
 8010448:	d07c      	beq.n	8010544 <_dtoa_r+0x4b4>
 801044a:	f1b9 0f00 	cmp.w	r9, #0
 801044e:	d079      	beq.n	8010544 <_dtoa_r+0x4b4>
 8010450:	9b02      	ldr	r3, [sp, #8]
 8010452:	2b00      	cmp	r3, #0
 8010454:	dd35      	ble.n	80104c2 <_dtoa_r+0x432>
 8010456:	f10a 33ff 	add.w	r3, sl, #4294967295
 801045a:	9308      	str	r3, [sp, #32]
 801045c:	4639      	mov	r1, r7
 801045e:	2200      	movs	r2, #0
 8010460:	4b8b      	ldr	r3, [pc, #556]	; (8010690 <_dtoa_r+0x600>)
 8010462:	4630      	mov	r0, r6
 8010464:	f7f0 f8d8 	bl	8000618 <__aeabi_dmul>
 8010468:	e9cd 0100 	strd	r0, r1, [sp]
 801046c:	9f02      	ldr	r7, [sp, #8]
 801046e:	3501      	adds	r5, #1
 8010470:	4628      	mov	r0, r5
 8010472:	f7f0 f867 	bl	8000544 <__aeabi_i2d>
 8010476:	e9dd 2300 	ldrd	r2, r3, [sp]
 801047a:	f7f0 f8cd 	bl	8000618 <__aeabi_dmul>
 801047e:	2200      	movs	r2, #0
 8010480:	4b84      	ldr	r3, [pc, #528]	; (8010694 <_dtoa_r+0x604>)
 8010482:	f7ef ff13 	bl	80002ac <__adddf3>
 8010486:	4605      	mov	r5, r0
 8010488:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 801048c:	2f00      	cmp	r7, #0
 801048e:	d15d      	bne.n	801054c <_dtoa_r+0x4bc>
 8010490:	2200      	movs	r2, #0
 8010492:	4b81      	ldr	r3, [pc, #516]	; (8010698 <_dtoa_r+0x608>)
 8010494:	e9dd 0100 	ldrd	r0, r1, [sp]
 8010498:	f7ef ff06 	bl	80002a8 <__aeabi_dsub>
 801049c:	462a      	mov	r2, r5
 801049e:	4633      	mov	r3, r6
 80104a0:	e9cd 0100 	strd	r0, r1, [sp]
 80104a4:	f7f0 fb48 	bl	8000b38 <__aeabi_dcmpgt>
 80104a8:	2800      	cmp	r0, #0
 80104aa:	f040 8288 	bne.w	80109be <_dtoa_r+0x92e>
 80104ae:	462a      	mov	r2, r5
 80104b0:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80104b4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80104b8:	f7f0 fb20 	bl	8000afc <__aeabi_dcmplt>
 80104bc:	2800      	cmp	r0, #0
 80104be:	f040 827c 	bne.w	80109ba <_dtoa_r+0x92a>
 80104c2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80104c6:	e9cd 2300 	strd	r2, r3, [sp]
 80104ca:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80104cc:	2b00      	cmp	r3, #0
 80104ce:	f2c0 8150 	blt.w	8010772 <_dtoa_r+0x6e2>
 80104d2:	f1ba 0f0e 	cmp.w	sl, #14
 80104d6:	f300 814c 	bgt.w	8010772 <_dtoa_r+0x6e2>
 80104da:	4b6a      	ldr	r3, [pc, #424]	; (8010684 <_dtoa_r+0x5f4>)
 80104dc:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80104e0:	ed93 7b00 	vldr	d7, [r3]
 80104e4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80104e6:	2b00      	cmp	r3, #0
 80104e8:	ed8d 7b02 	vstr	d7, [sp, #8]
 80104ec:	f280 80d8 	bge.w	80106a0 <_dtoa_r+0x610>
 80104f0:	f1b9 0f00 	cmp.w	r9, #0
 80104f4:	f300 80d4 	bgt.w	80106a0 <_dtoa_r+0x610>
 80104f8:	f040 825e 	bne.w	80109b8 <_dtoa_r+0x928>
 80104fc:	2200      	movs	r2, #0
 80104fe:	4b66      	ldr	r3, [pc, #408]	; (8010698 <_dtoa_r+0x608>)
 8010500:	ec51 0b17 	vmov	r0, r1, d7
 8010504:	f7f0 f888 	bl	8000618 <__aeabi_dmul>
 8010508:	e9dd 2300 	ldrd	r2, r3, [sp]
 801050c:	f7f0 fb0a 	bl	8000b24 <__aeabi_dcmpge>
 8010510:	464f      	mov	r7, r9
 8010512:	464e      	mov	r6, r9
 8010514:	2800      	cmp	r0, #0
 8010516:	f040 8234 	bne.w	8010982 <_dtoa_r+0x8f2>
 801051a:	2331      	movs	r3, #49	; 0x31
 801051c:	f10b 0501 	add.w	r5, fp, #1
 8010520:	f88b 3000 	strb.w	r3, [fp]
 8010524:	f10a 0a01 	add.w	sl, sl, #1
 8010528:	e22f      	b.n	801098a <_dtoa_r+0x8fa>
 801052a:	07f2      	lsls	r2, r6, #31
 801052c:	d505      	bpl.n	801053a <_dtoa_r+0x4aa>
 801052e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8010532:	f7f0 f871 	bl	8000618 <__aeabi_dmul>
 8010536:	3501      	adds	r5, #1
 8010538:	2301      	movs	r3, #1
 801053a:	1076      	asrs	r6, r6, #1
 801053c:	3708      	adds	r7, #8
 801053e:	e772      	b.n	8010426 <_dtoa_r+0x396>
 8010540:	2502      	movs	r5, #2
 8010542:	e774      	b.n	801042e <_dtoa_r+0x39e>
 8010544:	f8cd a020 	str.w	sl, [sp, #32]
 8010548:	464f      	mov	r7, r9
 801054a:	e791      	b.n	8010470 <_dtoa_r+0x3e0>
 801054c:	4b4d      	ldr	r3, [pc, #308]	; (8010684 <_dtoa_r+0x5f4>)
 801054e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8010552:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8010556:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010558:	2b00      	cmp	r3, #0
 801055a:	d047      	beq.n	80105ec <_dtoa_r+0x55c>
 801055c:	4602      	mov	r2, r0
 801055e:	460b      	mov	r3, r1
 8010560:	2000      	movs	r0, #0
 8010562:	494e      	ldr	r1, [pc, #312]	; (801069c <_dtoa_r+0x60c>)
 8010564:	f7f0 f982 	bl	800086c <__aeabi_ddiv>
 8010568:	462a      	mov	r2, r5
 801056a:	4633      	mov	r3, r6
 801056c:	f7ef fe9c 	bl	80002a8 <__aeabi_dsub>
 8010570:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8010574:	465d      	mov	r5, fp
 8010576:	e9dd 0100 	ldrd	r0, r1, [sp]
 801057a:	f7f0 fafd 	bl	8000b78 <__aeabi_d2iz>
 801057e:	4606      	mov	r6, r0
 8010580:	f7ef ffe0 	bl	8000544 <__aeabi_i2d>
 8010584:	4602      	mov	r2, r0
 8010586:	460b      	mov	r3, r1
 8010588:	e9dd 0100 	ldrd	r0, r1, [sp]
 801058c:	f7ef fe8c 	bl	80002a8 <__aeabi_dsub>
 8010590:	3630      	adds	r6, #48	; 0x30
 8010592:	f805 6b01 	strb.w	r6, [r5], #1
 8010596:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 801059a:	e9cd 0100 	strd	r0, r1, [sp]
 801059e:	f7f0 faad 	bl	8000afc <__aeabi_dcmplt>
 80105a2:	2800      	cmp	r0, #0
 80105a4:	d163      	bne.n	801066e <_dtoa_r+0x5de>
 80105a6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80105aa:	2000      	movs	r0, #0
 80105ac:	4937      	ldr	r1, [pc, #220]	; (801068c <_dtoa_r+0x5fc>)
 80105ae:	f7ef fe7b 	bl	80002a8 <__aeabi_dsub>
 80105b2:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80105b6:	f7f0 faa1 	bl	8000afc <__aeabi_dcmplt>
 80105ba:	2800      	cmp	r0, #0
 80105bc:	f040 80b7 	bne.w	801072e <_dtoa_r+0x69e>
 80105c0:	eba5 030b 	sub.w	r3, r5, fp
 80105c4:	429f      	cmp	r7, r3
 80105c6:	f77f af7c 	ble.w	80104c2 <_dtoa_r+0x432>
 80105ca:	2200      	movs	r2, #0
 80105cc:	4b30      	ldr	r3, [pc, #192]	; (8010690 <_dtoa_r+0x600>)
 80105ce:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80105d2:	f7f0 f821 	bl	8000618 <__aeabi_dmul>
 80105d6:	2200      	movs	r2, #0
 80105d8:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80105dc:	4b2c      	ldr	r3, [pc, #176]	; (8010690 <_dtoa_r+0x600>)
 80105de:	e9dd 0100 	ldrd	r0, r1, [sp]
 80105e2:	f7f0 f819 	bl	8000618 <__aeabi_dmul>
 80105e6:	e9cd 0100 	strd	r0, r1, [sp]
 80105ea:	e7c4      	b.n	8010576 <_dtoa_r+0x4e6>
 80105ec:	462a      	mov	r2, r5
 80105ee:	4633      	mov	r3, r6
 80105f0:	f7f0 f812 	bl	8000618 <__aeabi_dmul>
 80105f4:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80105f8:	eb0b 0507 	add.w	r5, fp, r7
 80105fc:	465e      	mov	r6, fp
 80105fe:	e9dd 0100 	ldrd	r0, r1, [sp]
 8010602:	f7f0 fab9 	bl	8000b78 <__aeabi_d2iz>
 8010606:	4607      	mov	r7, r0
 8010608:	f7ef ff9c 	bl	8000544 <__aeabi_i2d>
 801060c:	3730      	adds	r7, #48	; 0x30
 801060e:	4602      	mov	r2, r0
 8010610:	460b      	mov	r3, r1
 8010612:	e9dd 0100 	ldrd	r0, r1, [sp]
 8010616:	f7ef fe47 	bl	80002a8 <__aeabi_dsub>
 801061a:	f806 7b01 	strb.w	r7, [r6], #1
 801061e:	42ae      	cmp	r6, r5
 8010620:	e9cd 0100 	strd	r0, r1, [sp]
 8010624:	f04f 0200 	mov.w	r2, #0
 8010628:	d126      	bne.n	8010678 <_dtoa_r+0x5e8>
 801062a:	4b1c      	ldr	r3, [pc, #112]	; (801069c <_dtoa_r+0x60c>)
 801062c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8010630:	f7ef fe3c 	bl	80002ac <__adddf3>
 8010634:	4602      	mov	r2, r0
 8010636:	460b      	mov	r3, r1
 8010638:	e9dd 0100 	ldrd	r0, r1, [sp]
 801063c:	f7f0 fa7c 	bl	8000b38 <__aeabi_dcmpgt>
 8010640:	2800      	cmp	r0, #0
 8010642:	d174      	bne.n	801072e <_dtoa_r+0x69e>
 8010644:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8010648:	2000      	movs	r0, #0
 801064a:	4914      	ldr	r1, [pc, #80]	; (801069c <_dtoa_r+0x60c>)
 801064c:	f7ef fe2c 	bl	80002a8 <__aeabi_dsub>
 8010650:	4602      	mov	r2, r0
 8010652:	460b      	mov	r3, r1
 8010654:	e9dd 0100 	ldrd	r0, r1, [sp]
 8010658:	f7f0 fa50 	bl	8000afc <__aeabi_dcmplt>
 801065c:	2800      	cmp	r0, #0
 801065e:	f43f af30 	beq.w	80104c2 <_dtoa_r+0x432>
 8010662:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8010666:	2b30      	cmp	r3, #48	; 0x30
 8010668:	f105 32ff 	add.w	r2, r5, #4294967295
 801066c:	d002      	beq.n	8010674 <_dtoa_r+0x5e4>
 801066e:	f8dd a020 	ldr.w	sl, [sp, #32]
 8010672:	e04a      	b.n	801070a <_dtoa_r+0x67a>
 8010674:	4615      	mov	r5, r2
 8010676:	e7f4      	b.n	8010662 <_dtoa_r+0x5d2>
 8010678:	4b05      	ldr	r3, [pc, #20]	; (8010690 <_dtoa_r+0x600>)
 801067a:	f7ef ffcd 	bl	8000618 <__aeabi_dmul>
 801067e:	e9cd 0100 	strd	r0, r1, [sp]
 8010682:	e7bc      	b.n	80105fe <_dtoa_r+0x56e>
 8010684:	080127c0 	.word	0x080127c0
 8010688:	08012798 	.word	0x08012798
 801068c:	3ff00000 	.word	0x3ff00000
 8010690:	40240000 	.word	0x40240000
 8010694:	401c0000 	.word	0x401c0000
 8010698:	40140000 	.word	0x40140000
 801069c:	3fe00000 	.word	0x3fe00000
 80106a0:	e9dd 6700 	ldrd	r6, r7, [sp]
 80106a4:	465d      	mov	r5, fp
 80106a6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80106aa:	4630      	mov	r0, r6
 80106ac:	4639      	mov	r1, r7
 80106ae:	f7f0 f8dd 	bl	800086c <__aeabi_ddiv>
 80106b2:	f7f0 fa61 	bl	8000b78 <__aeabi_d2iz>
 80106b6:	4680      	mov	r8, r0
 80106b8:	f7ef ff44 	bl	8000544 <__aeabi_i2d>
 80106bc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80106c0:	f7ef ffaa 	bl	8000618 <__aeabi_dmul>
 80106c4:	4602      	mov	r2, r0
 80106c6:	460b      	mov	r3, r1
 80106c8:	4630      	mov	r0, r6
 80106ca:	4639      	mov	r1, r7
 80106cc:	f108 0630 	add.w	r6, r8, #48	; 0x30
 80106d0:	f7ef fdea 	bl	80002a8 <__aeabi_dsub>
 80106d4:	f805 6b01 	strb.w	r6, [r5], #1
 80106d8:	eba5 060b 	sub.w	r6, r5, fp
 80106dc:	45b1      	cmp	r9, r6
 80106de:	4602      	mov	r2, r0
 80106e0:	460b      	mov	r3, r1
 80106e2:	d139      	bne.n	8010758 <_dtoa_r+0x6c8>
 80106e4:	f7ef fde2 	bl	80002ac <__adddf3>
 80106e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80106ec:	4606      	mov	r6, r0
 80106ee:	460f      	mov	r7, r1
 80106f0:	f7f0 fa22 	bl	8000b38 <__aeabi_dcmpgt>
 80106f4:	b9c8      	cbnz	r0, 801072a <_dtoa_r+0x69a>
 80106f6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80106fa:	4630      	mov	r0, r6
 80106fc:	4639      	mov	r1, r7
 80106fe:	f7f0 f9f3 	bl	8000ae8 <__aeabi_dcmpeq>
 8010702:	b110      	cbz	r0, 801070a <_dtoa_r+0x67a>
 8010704:	f018 0f01 	tst.w	r8, #1
 8010708:	d10f      	bne.n	801072a <_dtoa_r+0x69a>
 801070a:	9904      	ldr	r1, [sp, #16]
 801070c:	4620      	mov	r0, r4
 801070e:	f000 fdf9 	bl	8011304 <_Bfree>
 8010712:	2300      	movs	r3, #0
 8010714:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8010716:	702b      	strb	r3, [r5, #0]
 8010718:	f10a 0301 	add.w	r3, sl, #1
 801071c:	6013      	str	r3, [r2, #0]
 801071e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8010720:	2b00      	cmp	r3, #0
 8010722:	f000 8241 	beq.w	8010ba8 <_dtoa_r+0xb18>
 8010726:	601d      	str	r5, [r3, #0]
 8010728:	e23e      	b.n	8010ba8 <_dtoa_r+0xb18>
 801072a:	f8cd a020 	str.w	sl, [sp, #32]
 801072e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8010732:	2a39      	cmp	r2, #57	; 0x39
 8010734:	f105 33ff 	add.w	r3, r5, #4294967295
 8010738:	d108      	bne.n	801074c <_dtoa_r+0x6bc>
 801073a:	459b      	cmp	fp, r3
 801073c:	d10a      	bne.n	8010754 <_dtoa_r+0x6c4>
 801073e:	9b08      	ldr	r3, [sp, #32]
 8010740:	3301      	adds	r3, #1
 8010742:	9308      	str	r3, [sp, #32]
 8010744:	2330      	movs	r3, #48	; 0x30
 8010746:	f88b 3000 	strb.w	r3, [fp]
 801074a:	465b      	mov	r3, fp
 801074c:	781a      	ldrb	r2, [r3, #0]
 801074e:	3201      	adds	r2, #1
 8010750:	701a      	strb	r2, [r3, #0]
 8010752:	e78c      	b.n	801066e <_dtoa_r+0x5de>
 8010754:	461d      	mov	r5, r3
 8010756:	e7ea      	b.n	801072e <_dtoa_r+0x69e>
 8010758:	2200      	movs	r2, #0
 801075a:	4b9b      	ldr	r3, [pc, #620]	; (80109c8 <_dtoa_r+0x938>)
 801075c:	f7ef ff5c 	bl	8000618 <__aeabi_dmul>
 8010760:	2200      	movs	r2, #0
 8010762:	2300      	movs	r3, #0
 8010764:	4606      	mov	r6, r0
 8010766:	460f      	mov	r7, r1
 8010768:	f7f0 f9be 	bl	8000ae8 <__aeabi_dcmpeq>
 801076c:	2800      	cmp	r0, #0
 801076e:	d09a      	beq.n	80106a6 <_dtoa_r+0x616>
 8010770:	e7cb      	b.n	801070a <_dtoa_r+0x67a>
 8010772:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010774:	2a00      	cmp	r2, #0
 8010776:	f000 808b 	beq.w	8010890 <_dtoa_r+0x800>
 801077a:	9a06      	ldr	r2, [sp, #24]
 801077c:	2a01      	cmp	r2, #1
 801077e:	dc6e      	bgt.n	801085e <_dtoa_r+0x7ce>
 8010780:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8010782:	2a00      	cmp	r2, #0
 8010784:	d067      	beq.n	8010856 <_dtoa_r+0x7c6>
 8010786:	f203 4333 	addw	r3, r3, #1075	; 0x433
 801078a:	9f07      	ldr	r7, [sp, #28]
 801078c:	9d05      	ldr	r5, [sp, #20]
 801078e:	9a05      	ldr	r2, [sp, #20]
 8010790:	2101      	movs	r1, #1
 8010792:	441a      	add	r2, r3
 8010794:	4620      	mov	r0, r4
 8010796:	9205      	str	r2, [sp, #20]
 8010798:	4498      	add	r8, r3
 801079a:	f000 fe91 	bl	80114c0 <__i2b>
 801079e:	4606      	mov	r6, r0
 80107a0:	2d00      	cmp	r5, #0
 80107a2:	dd0c      	ble.n	80107be <_dtoa_r+0x72e>
 80107a4:	f1b8 0f00 	cmp.w	r8, #0
 80107a8:	dd09      	ble.n	80107be <_dtoa_r+0x72e>
 80107aa:	4545      	cmp	r5, r8
 80107ac:	9a05      	ldr	r2, [sp, #20]
 80107ae:	462b      	mov	r3, r5
 80107b0:	bfa8      	it	ge
 80107b2:	4643      	movge	r3, r8
 80107b4:	1ad2      	subs	r2, r2, r3
 80107b6:	9205      	str	r2, [sp, #20]
 80107b8:	1aed      	subs	r5, r5, r3
 80107ba:	eba8 0803 	sub.w	r8, r8, r3
 80107be:	9b07      	ldr	r3, [sp, #28]
 80107c0:	b1eb      	cbz	r3, 80107fe <_dtoa_r+0x76e>
 80107c2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80107c4:	2b00      	cmp	r3, #0
 80107c6:	d067      	beq.n	8010898 <_dtoa_r+0x808>
 80107c8:	b18f      	cbz	r7, 80107ee <_dtoa_r+0x75e>
 80107ca:	4631      	mov	r1, r6
 80107cc:	463a      	mov	r2, r7
 80107ce:	4620      	mov	r0, r4
 80107d0:	f000 ff16 	bl	8011600 <__pow5mult>
 80107d4:	9a04      	ldr	r2, [sp, #16]
 80107d6:	4601      	mov	r1, r0
 80107d8:	4606      	mov	r6, r0
 80107da:	4620      	mov	r0, r4
 80107dc:	f000 fe79 	bl	80114d2 <__multiply>
 80107e0:	9904      	ldr	r1, [sp, #16]
 80107e2:	9008      	str	r0, [sp, #32]
 80107e4:	4620      	mov	r0, r4
 80107e6:	f000 fd8d 	bl	8011304 <_Bfree>
 80107ea:	9b08      	ldr	r3, [sp, #32]
 80107ec:	9304      	str	r3, [sp, #16]
 80107ee:	9b07      	ldr	r3, [sp, #28]
 80107f0:	1bda      	subs	r2, r3, r7
 80107f2:	d004      	beq.n	80107fe <_dtoa_r+0x76e>
 80107f4:	9904      	ldr	r1, [sp, #16]
 80107f6:	4620      	mov	r0, r4
 80107f8:	f000 ff02 	bl	8011600 <__pow5mult>
 80107fc:	9004      	str	r0, [sp, #16]
 80107fe:	2101      	movs	r1, #1
 8010800:	4620      	mov	r0, r4
 8010802:	f000 fe5d 	bl	80114c0 <__i2b>
 8010806:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8010808:	4607      	mov	r7, r0
 801080a:	2b00      	cmp	r3, #0
 801080c:	f000 81d0 	beq.w	8010bb0 <_dtoa_r+0xb20>
 8010810:	461a      	mov	r2, r3
 8010812:	4601      	mov	r1, r0
 8010814:	4620      	mov	r0, r4
 8010816:	f000 fef3 	bl	8011600 <__pow5mult>
 801081a:	9b06      	ldr	r3, [sp, #24]
 801081c:	2b01      	cmp	r3, #1
 801081e:	4607      	mov	r7, r0
 8010820:	dc40      	bgt.n	80108a4 <_dtoa_r+0x814>
 8010822:	9b00      	ldr	r3, [sp, #0]
 8010824:	2b00      	cmp	r3, #0
 8010826:	d139      	bne.n	801089c <_dtoa_r+0x80c>
 8010828:	9b01      	ldr	r3, [sp, #4]
 801082a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801082e:	2b00      	cmp	r3, #0
 8010830:	d136      	bne.n	80108a0 <_dtoa_r+0x810>
 8010832:	9b01      	ldr	r3, [sp, #4]
 8010834:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8010838:	0d1b      	lsrs	r3, r3, #20
 801083a:	051b      	lsls	r3, r3, #20
 801083c:	b12b      	cbz	r3, 801084a <_dtoa_r+0x7ba>
 801083e:	9b05      	ldr	r3, [sp, #20]
 8010840:	3301      	adds	r3, #1
 8010842:	9305      	str	r3, [sp, #20]
 8010844:	f108 0801 	add.w	r8, r8, #1
 8010848:	2301      	movs	r3, #1
 801084a:	9307      	str	r3, [sp, #28]
 801084c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801084e:	2b00      	cmp	r3, #0
 8010850:	d12a      	bne.n	80108a8 <_dtoa_r+0x818>
 8010852:	2001      	movs	r0, #1
 8010854:	e030      	b.n	80108b8 <_dtoa_r+0x828>
 8010856:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8010858:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 801085c:	e795      	b.n	801078a <_dtoa_r+0x6fa>
 801085e:	9b07      	ldr	r3, [sp, #28]
 8010860:	f109 37ff 	add.w	r7, r9, #4294967295
 8010864:	42bb      	cmp	r3, r7
 8010866:	bfbf      	itttt	lt
 8010868:	9b07      	ldrlt	r3, [sp, #28]
 801086a:	9707      	strlt	r7, [sp, #28]
 801086c:	1afa      	sublt	r2, r7, r3
 801086e:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8010870:	bfbb      	ittet	lt
 8010872:	189b      	addlt	r3, r3, r2
 8010874:	930e      	strlt	r3, [sp, #56]	; 0x38
 8010876:	1bdf      	subge	r7, r3, r7
 8010878:	2700      	movlt	r7, #0
 801087a:	f1b9 0f00 	cmp.w	r9, #0
 801087e:	bfb5      	itete	lt
 8010880:	9b05      	ldrlt	r3, [sp, #20]
 8010882:	9d05      	ldrge	r5, [sp, #20]
 8010884:	eba3 0509 	sublt.w	r5, r3, r9
 8010888:	464b      	movge	r3, r9
 801088a:	bfb8      	it	lt
 801088c:	2300      	movlt	r3, #0
 801088e:	e77e      	b.n	801078e <_dtoa_r+0x6fe>
 8010890:	9f07      	ldr	r7, [sp, #28]
 8010892:	9d05      	ldr	r5, [sp, #20]
 8010894:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8010896:	e783      	b.n	80107a0 <_dtoa_r+0x710>
 8010898:	9a07      	ldr	r2, [sp, #28]
 801089a:	e7ab      	b.n	80107f4 <_dtoa_r+0x764>
 801089c:	2300      	movs	r3, #0
 801089e:	e7d4      	b.n	801084a <_dtoa_r+0x7ba>
 80108a0:	9b00      	ldr	r3, [sp, #0]
 80108a2:	e7d2      	b.n	801084a <_dtoa_r+0x7ba>
 80108a4:	2300      	movs	r3, #0
 80108a6:	9307      	str	r3, [sp, #28]
 80108a8:	693b      	ldr	r3, [r7, #16]
 80108aa:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 80108ae:	6918      	ldr	r0, [r3, #16]
 80108b0:	f000 fdb8 	bl	8011424 <__hi0bits>
 80108b4:	f1c0 0020 	rsb	r0, r0, #32
 80108b8:	4440      	add	r0, r8
 80108ba:	f010 001f 	ands.w	r0, r0, #31
 80108be:	d047      	beq.n	8010950 <_dtoa_r+0x8c0>
 80108c0:	f1c0 0320 	rsb	r3, r0, #32
 80108c4:	2b04      	cmp	r3, #4
 80108c6:	dd3b      	ble.n	8010940 <_dtoa_r+0x8b0>
 80108c8:	9b05      	ldr	r3, [sp, #20]
 80108ca:	f1c0 001c 	rsb	r0, r0, #28
 80108ce:	4403      	add	r3, r0
 80108d0:	9305      	str	r3, [sp, #20]
 80108d2:	4405      	add	r5, r0
 80108d4:	4480      	add	r8, r0
 80108d6:	9b05      	ldr	r3, [sp, #20]
 80108d8:	2b00      	cmp	r3, #0
 80108da:	dd05      	ble.n	80108e8 <_dtoa_r+0x858>
 80108dc:	461a      	mov	r2, r3
 80108de:	9904      	ldr	r1, [sp, #16]
 80108e0:	4620      	mov	r0, r4
 80108e2:	f000 fedb 	bl	801169c <__lshift>
 80108e6:	9004      	str	r0, [sp, #16]
 80108e8:	f1b8 0f00 	cmp.w	r8, #0
 80108ec:	dd05      	ble.n	80108fa <_dtoa_r+0x86a>
 80108ee:	4639      	mov	r1, r7
 80108f0:	4642      	mov	r2, r8
 80108f2:	4620      	mov	r0, r4
 80108f4:	f000 fed2 	bl	801169c <__lshift>
 80108f8:	4607      	mov	r7, r0
 80108fa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80108fc:	b353      	cbz	r3, 8010954 <_dtoa_r+0x8c4>
 80108fe:	4639      	mov	r1, r7
 8010900:	9804      	ldr	r0, [sp, #16]
 8010902:	f000 ff1f 	bl	8011744 <__mcmp>
 8010906:	2800      	cmp	r0, #0
 8010908:	da24      	bge.n	8010954 <_dtoa_r+0x8c4>
 801090a:	2300      	movs	r3, #0
 801090c:	220a      	movs	r2, #10
 801090e:	9904      	ldr	r1, [sp, #16]
 8010910:	4620      	mov	r0, r4
 8010912:	f000 fd0e 	bl	8011332 <__multadd>
 8010916:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010918:	9004      	str	r0, [sp, #16]
 801091a:	f10a 3aff 	add.w	sl, sl, #4294967295
 801091e:	2b00      	cmp	r3, #0
 8010920:	f000 814d 	beq.w	8010bbe <_dtoa_r+0xb2e>
 8010924:	2300      	movs	r3, #0
 8010926:	4631      	mov	r1, r6
 8010928:	220a      	movs	r2, #10
 801092a:	4620      	mov	r0, r4
 801092c:	f000 fd01 	bl	8011332 <__multadd>
 8010930:	9b02      	ldr	r3, [sp, #8]
 8010932:	2b00      	cmp	r3, #0
 8010934:	4606      	mov	r6, r0
 8010936:	dc4f      	bgt.n	80109d8 <_dtoa_r+0x948>
 8010938:	9b06      	ldr	r3, [sp, #24]
 801093a:	2b02      	cmp	r3, #2
 801093c:	dd4c      	ble.n	80109d8 <_dtoa_r+0x948>
 801093e:	e011      	b.n	8010964 <_dtoa_r+0x8d4>
 8010940:	d0c9      	beq.n	80108d6 <_dtoa_r+0x846>
 8010942:	9a05      	ldr	r2, [sp, #20]
 8010944:	331c      	adds	r3, #28
 8010946:	441a      	add	r2, r3
 8010948:	9205      	str	r2, [sp, #20]
 801094a:	441d      	add	r5, r3
 801094c:	4498      	add	r8, r3
 801094e:	e7c2      	b.n	80108d6 <_dtoa_r+0x846>
 8010950:	4603      	mov	r3, r0
 8010952:	e7f6      	b.n	8010942 <_dtoa_r+0x8b2>
 8010954:	f1b9 0f00 	cmp.w	r9, #0
 8010958:	dc38      	bgt.n	80109cc <_dtoa_r+0x93c>
 801095a:	9b06      	ldr	r3, [sp, #24]
 801095c:	2b02      	cmp	r3, #2
 801095e:	dd35      	ble.n	80109cc <_dtoa_r+0x93c>
 8010960:	f8cd 9008 	str.w	r9, [sp, #8]
 8010964:	9b02      	ldr	r3, [sp, #8]
 8010966:	b963      	cbnz	r3, 8010982 <_dtoa_r+0x8f2>
 8010968:	4639      	mov	r1, r7
 801096a:	2205      	movs	r2, #5
 801096c:	4620      	mov	r0, r4
 801096e:	f000 fce0 	bl	8011332 <__multadd>
 8010972:	4601      	mov	r1, r0
 8010974:	4607      	mov	r7, r0
 8010976:	9804      	ldr	r0, [sp, #16]
 8010978:	f000 fee4 	bl	8011744 <__mcmp>
 801097c:	2800      	cmp	r0, #0
 801097e:	f73f adcc 	bgt.w	801051a <_dtoa_r+0x48a>
 8010982:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010984:	465d      	mov	r5, fp
 8010986:	ea6f 0a03 	mvn.w	sl, r3
 801098a:	f04f 0900 	mov.w	r9, #0
 801098e:	4639      	mov	r1, r7
 8010990:	4620      	mov	r0, r4
 8010992:	f000 fcb7 	bl	8011304 <_Bfree>
 8010996:	2e00      	cmp	r6, #0
 8010998:	f43f aeb7 	beq.w	801070a <_dtoa_r+0x67a>
 801099c:	f1b9 0f00 	cmp.w	r9, #0
 80109a0:	d005      	beq.n	80109ae <_dtoa_r+0x91e>
 80109a2:	45b1      	cmp	r9, r6
 80109a4:	d003      	beq.n	80109ae <_dtoa_r+0x91e>
 80109a6:	4649      	mov	r1, r9
 80109a8:	4620      	mov	r0, r4
 80109aa:	f000 fcab 	bl	8011304 <_Bfree>
 80109ae:	4631      	mov	r1, r6
 80109b0:	4620      	mov	r0, r4
 80109b2:	f000 fca7 	bl	8011304 <_Bfree>
 80109b6:	e6a8      	b.n	801070a <_dtoa_r+0x67a>
 80109b8:	2700      	movs	r7, #0
 80109ba:	463e      	mov	r6, r7
 80109bc:	e7e1      	b.n	8010982 <_dtoa_r+0x8f2>
 80109be:	f8dd a020 	ldr.w	sl, [sp, #32]
 80109c2:	463e      	mov	r6, r7
 80109c4:	e5a9      	b.n	801051a <_dtoa_r+0x48a>
 80109c6:	bf00      	nop
 80109c8:	40240000 	.word	0x40240000
 80109cc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80109ce:	f8cd 9008 	str.w	r9, [sp, #8]
 80109d2:	2b00      	cmp	r3, #0
 80109d4:	f000 80fa 	beq.w	8010bcc <_dtoa_r+0xb3c>
 80109d8:	2d00      	cmp	r5, #0
 80109da:	dd05      	ble.n	80109e8 <_dtoa_r+0x958>
 80109dc:	4631      	mov	r1, r6
 80109de:	462a      	mov	r2, r5
 80109e0:	4620      	mov	r0, r4
 80109e2:	f000 fe5b 	bl	801169c <__lshift>
 80109e6:	4606      	mov	r6, r0
 80109e8:	9b07      	ldr	r3, [sp, #28]
 80109ea:	2b00      	cmp	r3, #0
 80109ec:	d04c      	beq.n	8010a88 <_dtoa_r+0x9f8>
 80109ee:	6871      	ldr	r1, [r6, #4]
 80109f0:	4620      	mov	r0, r4
 80109f2:	f000 fc53 	bl	801129c <_Balloc>
 80109f6:	6932      	ldr	r2, [r6, #16]
 80109f8:	3202      	adds	r2, #2
 80109fa:	4605      	mov	r5, r0
 80109fc:	0092      	lsls	r2, r2, #2
 80109fe:	f106 010c 	add.w	r1, r6, #12
 8010a02:	300c      	adds	r0, #12
 8010a04:	f7fd fc72 	bl	800e2ec <memcpy>
 8010a08:	2201      	movs	r2, #1
 8010a0a:	4629      	mov	r1, r5
 8010a0c:	4620      	mov	r0, r4
 8010a0e:	f000 fe45 	bl	801169c <__lshift>
 8010a12:	9b00      	ldr	r3, [sp, #0]
 8010a14:	f8cd b014 	str.w	fp, [sp, #20]
 8010a18:	f003 0301 	and.w	r3, r3, #1
 8010a1c:	46b1      	mov	r9, r6
 8010a1e:	9307      	str	r3, [sp, #28]
 8010a20:	4606      	mov	r6, r0
 8010a22:	4639      	mov	r1, r7
 8010a24:	9804      	ldr	r0, [sp, #16]
 8010a26:	f7ff faa7 	bl	800ff78 <quorem>
 8010a2a:	4649      	mov	r1, r9
 8010a2c:	4605      	mov	r5, r0
 8010a2e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8010a32:	9804      	ldr	r0, [sp, #16]
 8010a34:	f000 fe86 	bl	8011744 <__mcmp>
 8010a38:	4632      	mov	r2, r6
 8010a3a:	9000      	str	r0, [sp, #0]
 8010a3c:	4639      	mov	r1, r7
 8010a3e:	4620      	mov	r0, r4
 8010a40:	f000 fe9a 	bl	8011778 <__mdiff>
 8010a44:	68c3      	ldr	r3, [r0, #12]
 8010a46:	4602      	mov	r2, r0
 8010a48:	bb03      	cbnz	r3, 8010a8c <_dtoa_r+0x9fc>
 8010a4a:	4601      	mov	r1, r0
 8010a4c:	9008      	str	r0, [sp, #32]
 8010a4e:	9804      	ldr	r0, [sp, #16]
 8010a50:	f000 fe78 	bl	8011744 <__mcmp>
 8010a54:	9a08      	ldr	r2, [sp, #32]
 8010a56:	4603      	mov	r3, r0
 8010a58:	4611      	mov	r1, r2
 8010a5a:	4620      	mov	r0, r4
 8010a5c:	9308      	str	r3, [sp, #32]
 8010a5e:	f000 fc51 	bl	8011304 <_Bfree>
 8010a62:	9b08      	ldr	r3, [sp, #32]
 8010a64:	b9a3      	cbnz	r3, 8010a90 <_dtoa_r+0xa00>
 8010a66:	9a06      	ldr	r2, [sp, #24]
 8010a68:	b992      	cbnz	r2, 8010a90 <_dtoa_r+0xa00>
 8010a6a:	9a07      	ldr	r2, [sp, #28]
 8010a6c:	b982      	cbnz	r2, 8010a90 <_dtoa_r+0xa00>
 8010a6e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8010a72:	d029      	beq.n	8010ac8 <_dtoa_r+0xa38>
 8010a74:	9b00      	ldr	r3, [sp, #0]
 8010a76:	2b00      	cmp	r3, #0
 8010a78:	dd01      	ble.n	8010a7e <_dtoa_r+0x9ee>
 8010a7a:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8010a7e:	9b05      	ldr	r3, [sp, #20]
 8010a80:	1c5d      	adds	r5, r3, #1
 8010a82:	f883 8000 	strb.w	r8, [r3]
 8010a86:	e782      	b.n	801098e <_dtoa_r+0x8fe>
 8010a88:	4630      	mov	r0, r6
 8010a8a:	e7c2      	b.n	8010a12 <_dtoa_r+0x982>
 8010a8c:	2301      	movs	r3, #1
 8010a8e:	e7e3      	b.n	8010a58 <_dtoa_r+0x9c8>
 8010a90:	9a00      	ldr	r2, [sp, #0]
 8010a92:	2a00      	cmp	r2, #0
 8010a94:	db04      	blt.n	8010aa0 <_dtoa_r+0xa10>
 8010a96:	d125      	bne.n	8010ae4 <_dtoa_r+0xa54>
 8010a98:	9a06      	ldr	r2, [sp, #24]
 8010a9a:	bb1a      	cbnz	r2, 8010ae4 <_dtoa_r+0xa54>
 8010a9c:	9a07      	ldr	r2, [sp, #28]
 8010a9e:	bb0a      	cbnz	r2, 8010ae4 <_dtoa_r+0xa54>
 8010aa0:	2b00      	cmp	r3, #0
 8010aa2:	ddec      	ble.n	8010a7e <_dtoa_r+0x9ee>
 8010aa4:	2201      	movs	r2, #1
 8010aa6:	9904      	ldr	r1, [sp, #16]
 8010aa8:	4620      	mov	r0, r4
 8010aaa:	f000 fdf7 	bl	801169c <__lshift>
 8010aae:	4639      	mov	r1, r7
 8010ab0:	9004      	str	r0, [sp, #16]
 8010ab2:	f000 fe47 	bl	8011744 <__mcmp>
 8010ab6:	2800      	cmp	r0, #0
 8010ab8:	dc03      	bgt.n	8010ac2 <_dtoa_r+0xa32>
 8010aba:	d1e0      	bne.n	8010a7e <_dtoa_r+0x9ee>
 8010abc:	f018 0f01 	tst.w	r8, #1
 8010ac0:	d0dd      	beq.n	8010a7e <_dtoa_r+0x9ee>
 8010ac2:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8010ac6:	d1d8      	bne.n	8010a7a <_dtoa_r+0x9ea>
 8010ac8:	9b05      	ldr	r3, [sp, #20]
 8010aca:	9a05      	ldr	r2, [sp, #20]
 8010acc:	1c5d      	adds	r5, r3, #1
 8010ace:	2339      	movs	r3, #57	; 0x39
 8010ad0:	7013      	strb	r3, [r2, #0]
 8010ad2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8010ad6:	2b39      	cmp	r3, #57	; 0x39
 8010ad8:	f105 32ff 	add.w	r2, r5, #4294967295
 8010adc:	d04f      	beq.n	8010b7e <_dtoa_r+0xaee>
 8010ade:	3301      	adds	r3, #1
 8010ae0:	7013      	strb	r3, [r2, #0]
 8010ae2:	e754      	b.n	801098e <_dtoa_r+0x8fe>
 8010ae4:	9a05      	ldr	r2, [sp, #20]
 8010ae6:	2b00      	cmp	r3, #0
 8010ae8:	f102 0501 	add.w	r5, r2, #1
 8010aec:	dd06      	ble.n	8010afc <_dtoa_r+0xa6c>
 8010aee:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8010af2:	d0e9      	beq.n	8010ac8 <_dtoa_r+0xa38>
 8010af4:	f108 0801 	add.w	r8, r8, #1
 8010af8:	9b05      	ldr	r3, [sp, #20]
 8010afa:	e7c2      	b.n	8010a82 <_dtoa_r+0x9f2>
 8010afc:	9a02      	ldr	r2, [sp, #8]
 8010afe:	f805 8c01 	strb.w	r8, [r5, #-1]
 8010b02:	eba5 030b 	sub.w	r3, r5, fp
 8010b06:	4293      	cmp	r3, r2
 8010b08:	d021      	beq.n	8010b4e <_dtoa_r+0xabe>
 8010b0a:	2300      	movs	r3, #0
 8010b0c:	220a      	movs	r2, #10
 8010b0e:	9904      	ldr	r1, [sp, #16]
 8010b10:	4620      	mov	r0, r4
 8010b12:	f000 fc0e 	bl	8011332 <__multadd>
 8010b16:	45b1      	cmp	r9, r6
 8010b18:	9004      	str	r0, [sp, #16]
 8010b1a:	f04f 0300 	mov.w	r3, #0
 8010b1e:	f04f 020a 	mov.w	r2, #10
 8010b22:	4649      	mov	r1, r9
 8010b24:	4620      	mov	r0, r4
 8010b26:	d105      	bne.n	8010b34 <_dtoa_r+0xaa4>
 8010b28:	f000 fc03 	bl	8011332 <__multadd>
 8010b2c:	4681      	mov	r9, r0
 8010b2e:	4606      	mov	r6, r0
 8010b30:	9505      	str	r5, [sp, #20]
 8010b32:	e776      	b.n	8010a22 <_dtoa_r+0x992>
 8010b34:	f000 fbfd 	bl	8011332 <__multadd>
 8010b38:	4631      	mov	r1, r6
 8010b3a:	4681      	mov	r9, r0
 8010b3c:	2300      	movs	r3, #0
 8010b3e:	220a      	movs	r2, #10
 8010b40:	4620      	mov	r0, r4
 8010b42:	f000 fbf6 	bl	8011332 <__multadd>
 8010b46:	4606      	mov	r6, r0
 8010b48:	e7f2      	b.n	8010b30 <_dtoa_r+0xaa0>
 8010b4a:	f04f 0900 	mov.w	r9, #0
 8010b4e:	2201      	movs	r2, #1
 8010b50:	9904      	ldr	r1, [sp, #16]
 8010b52:	4620      	mov	r0, r4
 8010b54:	f000 fda2 	bl	801169c <__lshift>
 8010b58:	4639      	mov	r1, r7
 8010b5a:	9004      	str	r0, [sp, #16]
 8010b5c:	f000 fdf2 	bl	8011744 <__mcmp>
 8010b60:	2800      	cmp	r0, #0
 8010b62:	dcb6      	bgt.n	8010ad2 <_dtoa_r+0xa42>
 8010b64:	d102      	bne.n	8010b6c <_dtoa_r+0xadc>
 8010b66:	f018 0f01 	tst.w	r8, #1
 8010b6a:	d1b2      	bne.n	8010ad2 <_dtoa_r+0xa42>
 8010b6c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8010b70:	2b30      	cmp	r3, #48	; 0x30
 8010b72:	f105 32ff 	add.w	r2, r5, #4294967295
 8010b76:	f47f af0a 	bne.w	801098e <_dtoa_r+0x8fe>
 8010b7a:	4615      	mov	r5, r2
 8010b7c:	e7f6      	b.n	8010b6c <_dtoa_r+0xadc>
 8010b7e:	4593      	cmp	fp, r2
 8010b80:	d105      	bne.n	8010b8e <_dtoa_r+0xafe>
 8010b82:	2331      	movs	r3, #49	; 0x31
 8010b84:	f10a 0a01 	add.w	sl, sl, #1
 8010b88:	f88b 3000 	strb.w	r3, [fp]
 8010b8c:	e6ff      	b.n	801098e <_dtoa_r+0x8fe>
 8010b8e:	4615      	mov	r5, r2
 8010b90:	e79f      	b.n	8010ad2 <_dtoa_r+0xa42>
 8010b92:	f8df b064 	ldr.w	fp, [pc, #100]	; 8010bf8 <_dtoa_r+0xb68>
 8010b96:	e007      	b.n	8010ba8 <_dtoa_r+0xb18>
 8010b98:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8010b9a:	f8df b060 	ldr.w	fp, [pc, #96]	; 8010bfc <_dtoa_r+0xb6c>
 8010b9e:	b11b      	cbz	r3, 8010ba8 <_dtoa_r+0xb18>
 8010ba0:	f10b 0308 	add.w	r3, fp, #8
 8010ba4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8010ba6:	6013      	str	r3, [r2, #0]
 8010ba8:	4658      	mov	r0, fp
 8010baa:	b017      	add	sp, #92	; 0x5c
 8010bac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010bb0:	9b06      	ldr	r3, [sp, #24]
 8010bb2:	2b01      	cmp	r3, #1
 8010bb4:	f77f ae35 	ble.w	8010822 <_dtoa_r+0x792>
 8010bb8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8010bba:	9307      	str	r3, [sp, #28]
 8010bbc:	e649      	b.n	8010852 <_dtoa_r+0x7c2>
 8010bbe:	9b02      	ldr	r3, [sp, #8]
 8010bc0:	2b00      	cmp	r3, #0
 8010bc2:	dc03      	bgt.n	8010bcc <_dtoa_r+0xb3c>
 8010bc4:	9b06      	ldr	r3, [sp, #24]
 8010bc6:	2b02      	cmp	r3, #2
 8010bc8:	f73f aecc 	bgt.w	8010964 <_dtoa_r+0x8d4>
 8010bcc:	465d      	mov	r5, fp
 8010bce:	4639      	mov	r1, r7
 8010bd0:	9804      	ldr	r0, [sp, #16]
 8010bd2:	f7ff f9d1 	bl	800ff78 <quorem>
 8010bd6:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8010bda:	f805 8b01 	strb.w	r8, [r5], #1
 8010bde:	9a02      	ldr	r2, [sp, #8]
 8010be0:	eba5 030b 	sub.w	r3, r5, fp
 8010be4:	429a      	cmp	r2, r3
 8010be6:	ddb0      	ble.n	8010b4a <_dtoa_r+0xaba>
 8010be8:	2300      	movs	r3, #0
 8010bea:	220a      	movs	r2, #10
 8010bec:	9904      	ldr	r1, [sp, #16]
 8010bee:	4620      	mov	r0, r4
 8010bf0:	f000 fb9f 	bl	8011332 <__multadd>
 8010bf4:	9004      	str	r0, [sp, #16]
 8010bf6:	e7ea      	b.n	8010bce <_dtoa_r+0xb3e>
 8010bf8:	08012700 	.word	0x08012700
 8010bfc:	08012780 	.word	0x08012780

08010c00 <rshift>:
 8010c00:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010c02:	6906      	ldr	r6, [r0, #16]
 8010c04:	114b      	asrs	r3, r1, #5
 8010c06:	429e      	cmp	r6, r3
 8010c08:	f100 0414 	add.w	r4, r0, #20
 8010c0c:	dd30      	ble.n	8010c70 <rshift+0x70>
 8010c0e:	f011 011f 	ands.w	r1, r1, #31
 8010c12:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 8010c16:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 8010c1a:	d108      	bne.n	8010c2e <rshift+0x2e>
 8010c1c:	4621      	mov	r1, r4
 8010c1e:	42b2      	cmp	r2, r6
 8010c20:	460b      	mov	r3, r1
 8010c22:	d211      	bcs.n	8010c48 <rshift+0x48>
 8010c24:	f852 3b04 	ldr.w	r3, [r2], #4
 8010c28:	f841 3b04 	str.w	r3, [r1], #4
 8010c2c:	e7f7      	b.n	8010c1e <rshift+0x1e>
 8010c2e:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 8010c32:	f1c1 0c20 	rsb	ip, r1, #32
 8010c36:	40cd      	lsrs	r5, r1
 8010c38:	3204      	adds	r2, #4
 8010c3a:	4623      	mov	r3, r4
 8010c3c:	42b2      	cmp	r2, r6
 8010c3e:	4617      	mov	r7, r2
 8010c40:	d30c      	bcc.n	8010c5c <rshift+0x5c>
 8010c42:	601d      	str	r5, [r3, #0]
 8010c44:	b105      	cbz	r5, 8010c48 <rshift+0x48>
 8010c46:	3304      	adds	r3, #4
 8010c48:	1b1a      	subs	r2, r3, r4
 8010c4a:	42a3      	cmp	r3, r4
 8010c4c:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8010c50:	bf08      	it	eq
 8010c52:	2300      	moveq	r3, #0
 8010c54:	6102      	str	r2, [r0, #16]
 8010c56:	bf08      	it	eq
 8010c58:	6143      	streq	r3, [r0, #20]
 8010c5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010c5c:	683f      	ldr	r7, [r7, #0]
 8010c5e:	fa07 f70c 	lsl.w	r7, r7, ip
 8010c62:	433d      	orrs	r5, r7
 8010c64:	f843 5b04 	str.w	r5, [r3], #4
 8010c68:	f852 5b04 	ldr.w	r5, [r2], #4
 8010c6c:	40cd      	lsrs	r5, r1
 8010c6e:	e7e5      	b.n	8010c3c <rshift+0x3c>
 8010c70:	4623      	mov	r3, r4
 8010c72:	e7e9      	b.n	8010c48 <rshift+0x48>

08010c74 <__hexdig_fun>:
 8010c74:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8010c78:	2b09      	cmp	r3, #9
 8010c7a:	d802      	bhi.n	8010c82 <__hexdig_fun+0xe>
 8010c7c:	3820      	subs	r0, #32
 8010c7e:	b2c0      	uxtb	r0, r0
 8010c80:	4770      	bx	lr
 8010c82:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8010c86:	2b05      	cmp	r3, #5
 8010c88:	d801      	bhi.n	8010c8e <__hexdig_fun+0x1a>
 8010c8a:	3847      	subs	r0, #71	; 0x47
 8010c8c:	e7f7      	b.n	8010c7e <__hexdig_fun+0xa>
 8010c8e:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8010c92:	2b05      	cmp	r3, #5
 8010c94:	d801      	bhi.n	8010c9a <__hexdig_fun+0x26>
 8010c96:	3827      	subs	r0, #39	; 0x27
 8010c98:	e7f1      	b.n	8010c7e <__hexdig_fun+0xa>
 8010c9a:	2000      	movs	r0, #0
 8010c9c:	4770      	bx	lr

08010c9e <__gethex>:
 8010c9e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010ca2:	b08b      	sub	sp, #44	; 0x2c
 8010ca4:	468a      	mov	sl, r1
 8010ca6:	9002      	str	r0, [sp, #8]
 8010ca8:	9816      	ldr	r0, [sp, #88]	; 0x58
 8010caa:	9306      	str	r3, [sp, #24]
 8010cac:	4690      	mov	r8, r2
 8010cae:	f000 fad0 	bl	8011252 <__localeconv_l>
 8010cb2:	6803      	ldr	r3, [r0, #0]
 8010cb4:	9303      	str	r3, [sp, #12]
 8010cb6:	4618      	mov	r0, r3
 8010cb8:	f7ef fa94 	bl	80001e4 <strlen>
 8010cbc:	9b03      	ldr	r3, [sp, #12]
 8010cbe:	9001      	str	r0, [sp, #4]
 8010cc0:	4403      	add	r3, r0
 8010cc2:	f04f 0b00 	mov.w	fp, #0
 8010cc6:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8010cca:	9307      	str	r3, [sp, #28]
 8010ccc:	f8da 3000 	ldr.w	r3, [sl]
 8010cd0:	3302      	adds	r3, #2
 8010cd2:	461f      	mov	r7, r3
 8010cd4:	f813 0b01 	ldrb.w	r0, [r3], #1
 8010cd8:	2830      	cmp	r0, #48	; 0x30
 8010cda:	d06c      	beq.n	8010db6 <__gethex+0x118>
 8010cdc:	f7ff ffca 	bl	8010c74 <__hexdig_fun>
 8010ce0:	4604      	mov	r4, r0
 8010ce2:	2800      	cmp	r0, #0
 8010ce4:	d16a      	bne.n	8010dbc <__gethex+0x11e>
 8010ce6:	9a01      	ldr	r2, [sp, #4]
 8010ce8:	9903      	ldr	r1, [sp, #12]
 8010cea:	4638      	mov	r0, r7
 8010cec:	f7fe fa43 	bl	800f176 <strncmp>
 8010cf0:	2800      	cmp	r0, #0
 8010cf2:	d166      	bne.n	8010dc2 <__gethex+0x124>
 8010cf4:	9b01      	ldr	r3, [sp, #4]
 8010cf6:	5cf8      	ldrb	r0, [r7, r3]
 8010cf8:	18fe      	adds	r6, r7, r3
 8010cfa:	f7ff ffbb 	bl	8010c74 <__hexdig_fun>
 8010cfe:	2800      	cmp	r0, #0
 8010d00:	d062      	beq.n	8010dc8 <__gethex+0x12a>
 8010d02:	4633      	mov	r3, r6
 8010d04:	7818      	ldrb	r0, [r3, #0]
 8010d06:	2830      	cmp	r0, #48	; 0x30
 8010d08:	461f      	mov	r7, r3
 8010d0a:	f103 0301 	add.w	r3, r3, #1
 8010d0e:	d0f9      	beq.n	8010d04 <__gethex+0x66>
 8010d10:	f7ff ffb0 	bl	8010c74 <__hexdig_fun>
 8010d14:	fab0 f580 	clz	r5, r0
 8010d18:	096d      	lsrs	r5, r5, #5
 8010d1a:	4634      	mov	r4, r6
 8010d1c:	f04f 0b01 	mov.w	fp, #1
 8010d20:	463a      	mov	r2, r7
 8010d22:	4616      	mov	r6, r2
 8010d24:	3201      	adds	r2, #1
 8010d26:	7830      	ldrb	r0, [r6, #0]
 8010d28:	f7ff ffa4 	bl	8010c74 <__hexdig_fun>
 8010d2c:	2800      	cmp	r0, #0
 8010d2e:	d1f8      	bne.n	8010d22 <__gethex+0x84>
 8010d30:	9a01      	ldr	r2, [sp, #4]
 8010d32:	9903      	ldr	r1, [sp, #12]
 8010d34:	4630      	mov	r0, r6
 8010d36:	f7fe fa1e 	bl	800f176 <strncmp>
 8010d3a:	b950      	cbnz	r0, 8010d52 <__gethex+0xb4>
 8010d3c:	b954      	cbnz	r4, 8010d54 <__gethex+0xb6>
 8010d3e:	9b01      	ldr	r3, [sp, #4]
 8010d40:	18f4      	adds	r4, r6, r3
 8010d42:	4622      	mov	r2, r4
 8010d44:	4616      	mov	r6, r2
 8010d46:	3201      	adds	r2, #1
 8010d48:	7830      	ldrb	r0, [r6, #0]
 8010d4a:	f7ff ff93 	bl	8010c74 <__hexdig_fun>
 8010d4e:	2800      	cmp	r0, #0
 8010d50:	d1f8      	bne.n	8010d44 <__gethex+0xa6>
 8010d52:	b10c      	cbz	r4, 8010d58 <__gethex+0xba>
 8010d54:	1ba4      	subs	r4, r4, r6
 8010d56:	00a4      	lsls	r4, r4, #2
 8010d58:	7833      	ldrb	r3, [r6, #0]
 8010d5a:	2b50      	cmp	r3, #80	; 0x50
 8010d5c:	d001      	beq.n	8010d62 <__gethex+0xc4>
 8010d5e:	2b70      	cmp	r3, #112	; 0x70
 8010d60:	d140      	bne.n	8010de4 <__gethex+0x146>
 8010d62:	7873      	ldrb	r3, [r6, #1]
 8010d64:	2b2b      	cmp	r3, #43	; 0x2b
 8010d66:	d031      	beq.n	8010dcc <__gethex+0x12e>
 8010d68:	2b2d      	cmp	r3, #45	; 0x2d
 8010d6a:	d033      	beq.n	8010dd4 <__gethex+0x136>
 8010d6c:	1c71      	adds	r1, r6, #1
 8010d6e:	f04f 0900 	mov.w	r9, #0
 8010d72:	7808      	ldrb	r0, [r1, #0]
 8010d74:	f7ff ff7e 	bl	8010c74 <__hexdig_fun>
 8010d78:	1e43      	subs	r3, r0, #1
 8010d7a:	b2db      	uxtb	r3, r3
 8010d7c:	2b18      	cmp	r3, #24
 8010d7e:	d831      	bhi.n	8010de4 <__gethex+0x146>
 8010d80:	f1a0 0210 	sub.w	r2, r0, #16
 8010d84:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8010d88:	f7ff ff74 	bl	8010c74 <__hexdig_fun>
 8010d8c:	1e43      	subs	r3, r0, #1
 8010d8e:	b2db      	uxtb	r3, r3
 8010d90:	2b18      	cmp	r3, #24
 8010d92:	d922      	bls.n	8010dda <__gethex+0x13c>
 8010d94:	f1b9 0f00 	cmp.w	r9, #0
 8010d98:	d000      	beq.n	8010d9c <__gethex+0xfe>
 8010d9a:	4252      	negs	r2, r2
 8010d9c:	4414      	add	r4, r2
 8010d9e:	f8ca 1000 	str.w	r1, [sl]
 8010da2:	b30d      	cbz	r5, 8010de8 <__gethex+0x14a>
 8010da4:	f1bb 0f00 	cmp.w	fp, #0
 8010da8:	bf0c      	ite	eq
 8010daa:	2706      	moveq	r7, #6
 8010dac:	2700      	movne	r7, #0
 8010dae:	4638      	mov	r0, r7
 8010db0:	b00b      	add	sp, #44	; 0x2c
 8010db2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010db6:	f10b 0b01 	add.w	fp, fp, #1
 8010dba:	e78a      	b.n	8010cd2 <__gethex+0x34>
 8010dbc:	2500      	movs	r5, #0
 8010dbe:	462c      	mov	r4, r5
 8010dc0:	e7ae      	b.n	8010d20 <__gethex+0x82>
 8010dc2:	463e      	mov	r6, r7
 8010dc4:	2501      	movs	r5, #1
 8010dc6:	e7c7      	b.n	8010d58 <__gethex+0xba>
 8010dc8:	4604      	mov	r4, r0
 8010dca:	e7fb      	b.n	8010dc4 <__gethex+0x126>
 8010dcc:	f04f 0900 	mov.w	r9, #0
 8010dd0:	1cb1      	adds	r1, r6, #2
 8010dd2:	e7ce      	b.n	8010d72 <__gethex+0xd4>
 8010dd4:	f04f 0901 	mov.w	r9, #1
 8010dd8:	e7fa      	b.n	8010dd0 <__gethex+0x132>
 8010dda:	230a      	movs	r3, #10
 8010ddc:	fb03 0202 	mla	r2, r3, r2, r0
 8010de0:	3a10      	subs	r2, #16
 8010de2:	e7cf      	b.n	8010d84 <__gethex+0xe6>
 8010de4:	4631      	mov	r1, r6
 8010de6:	e7da      	b.n	8010d9e <__gethex+0x100>
 8010de8:	1bf3      	subs	r3, r6, r7
 8010dea:	3b01      	subs	r3, #1
 8010dec:	4629      	mov	r1, r5
 8010dee:	2b07      	cmp	r3, #7
 8010df0:	dc49      	bgt.n	8010e86 <__gethex+0x1e8>
 8010df2:	9802      	ldr	r0, [sp, #8]
 8010df4:	f000 fa52 	bl	801129c <_Balloc>
 8010df8:	9b01      	ldr	r3, [sp, #4]
 8010dfa:	f100 0914 	add.w	r9, r0, #20
 8010dfe:	f04f 0b00 	mov.w	fp, #0
 8010e02:	f1c3 0301 	rsb	r3, r3, #1
 8010e06:	4605      	mov	r5, r0
 8010e08:	f8cd 9010 	str.w	r9, [sp, #16]
 8010e0c:	46da      	mov	sl, fp
 8010e0e:	9308      	str	r3, [sp, #32]
 8010e10:	42b7      	cmp	r7, r6
 8010e12:	d33b      	bcc.n	8010e8c <__gethex+0x1ee>
 8010e14:	9804      	ldr	r0, [sp, #16]
 8010e16:	f840 ab04 	str.w	sl, [r0], #4
 8010e1a:	eba0 0009 	sub.w	r0, r0, r9
 8010e1e:	1080      	asrs	r0, r0, #2
 8010e20:	6128      	str	r0, [r5, #16]
 8010e22:	0147      	lsls	r7, r0, #5
 8010e24:	4650      	mov	r0, sl
 8010e26:	f000 fafd 	bl	8011424 <__hi0bits>
 8010e2a:	f8d8 6000 	ldr.w	r6, [r8]
 8010e2e:	1a3f      	subs	r7, r7, r0
 8010e30:	42b7      	cmp	r7, r6
 8010e32:	dd64      	ble.n	8010efe <__gethex+0x260>
 8010e34:	1bbf      	subs	r7, r7, r6
 8010e36:	4639      	mov	r1, r7
 8010e38:	4628      	mov	r0, r5
 8010e3a:	f000 fe0d 	bl	8011a58 <__any_on>
 8010e3e:	4682      	mov	sl, r0
 8010e40:	b178      	cbz	r0, 8010e62 <__gethex+0x1c4>
 8010e42:	1e7b      	subs	r3, r7, #1
 8010e44:	1159      	asrs	r1, r3, #5
 8010e46:	f003 021f 	and.w	r2, r3, #31
 8010e4a:	f04f 0a01 	mov.w	sl, #1
 8010e4e:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8010e52:	fa0a f202 	lsl.w	r2, sl, r2
 8010e56:	420a      	tst	r2, r1
 8010e58:	d003      	beq.n	8010e62 <__gethex+0x1c4>
 8010e5a:	4553      	cmp	r3, sl
 8010e5c:	dc46      	bgt.n	8010eec <__gethex+0x24e>
 8010e5e:	f04f 0a02 	mov.w	sl, #2
 8010e62:	4639      	mov	r1, r7
 8010e64:	4628      	mov	r0, r5
 8010e66:	f7ff fecb 	bl	8010c00 <rshift>
 8010e6a:	443c      	add	r4, r7
 8010e6c:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8010e70:	42a3      	cmp	r3, r4
 8010e72:	da52      	bge.n	8010f1a <__gethex+0x27c>
 8010e74:	4629      	mov	r1, r5
 8010e76:	9802      	ldr	r0, [sp, #8]
 8010e78:	f000 fa44 	bl	8011304 <_Bfree>
 8010e7c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8010e7e:	2300      	movs	r3, #0
 8010e80:	6013      	str	r3, [r2, #0]
 8010e82:	27a3      	movs	r7, #163	; 0xa3
 8010e84:	e793      	b.n	8010dae <__gethex+0x110>
 8010e86:	3101      	adds	r1, #1
 8010e88:	105b      	asrs	r3, r3, #1
 8010e8a:	e7b0      	b.n	8010dee <__gethex+0x150>
 8010e8c:	1e73      	subs	r3, r6, #1
 8010e8e:	9305      	str	r3, [sp, #20]
 8010e90:	9a07      	ldr	r2, [sp, #28]
 8010e92:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8010e96:	4293      	cmp	r3, r2
 8010e98:	d018      	beq.n	8010ecc <__gethex+0x22e>
 8010e9a:	f1bb 0f20 	cmp.w	fp, #32
 8010e9e:	d107      	bne.n	8010eb0 <__gethex+0x212>
 8010ea0:	9b04      	ldr	r3, [sp, #16]
 8010ea2:	f8c3 a000 	str.w	sl, [r3]
 8010ea6:	3304      	adds	r3, #4
 8010ea8:	f04f 0a00 	mov.w	sl, #0
 8010eac:	9304      	str	r3, [sp, #16]
 8010eae:	46d3      	mov	fp, sl
 8010eb0:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8010eb4:	f7ff fede 	bl	8010c74 <__hexdig_fun>
 8010eb8:	f000 000f 	and.w	r0, r0, #15
 8010ebc:	fa00 f00b 	lsl.w	r0, r0, fp
 8010ec0:	ea4a 0a00 	orr.w	sl, sl, r0
 8010ec4:	f10b 0b04 	add.w	fp, fp, #4
 8010ec8:	9b05      	ldr	r3, [sp, #20]
 8010eca:	e00d      	b.n	8010ee8 <__gethex+0x24a>
 8010ecc:	9b05      	ldr	r3, [sp, #20]
 8010ece:	9a08      	ldr	r2, [sp, #32]
 8010ed0:	4413      	add	r3, r2
 8010ed2:	42bb      	cmp	r3, r7
 8010ed4:	d3e1      	bcc.n	8010e9a <__gethex+0x1fc>
 8010ed6:	4618      	mov	r0, r3
 8010ed8:	9a01      	ldr	r2, [sp, #4]
 8010eda:	9903      	ldr	r1, [sp, #12]
 8010edc:	9309      	str	r3, [sp, #36]	; 0x24
 8010ede:	f7fe f94a 	bl	800f176 <strncmp>
 8010ee2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010ee4:	2800      	cmp	r0, #0
 8010ee6:	d1d8      	bne.n	8010e9a <__gethex+0x1fc>
 8010ee8:	461e      	mov	r6, r3
 8010eea:	e791      	b.n	8010e10 <__gethex+0x172>
 8010eec:	1eb9      	subs	r1, r7, #2
 8010eee:	4628      	mov	r0, r5
 8010ef0:	f000 fdb2 	bl	8011a58 <__any_on>
 8010ef4:	2800      	cmp	r0, #0
 8010ef6:	d0b2      	beq.n	8010e5e <__gethex+0x1c0>
 8010ef8:	f04f 0a03 	mov.w	sl, #3
 8010efc:	e7b1      	b.n	8010e62 <__gethex+0x1c4>
 8010efe:	da09      	bge.n	8010f14 <__gethex+0x276>
 8010f00:	1bf7      	subs	r7, r6, r7
 8010f02:	4629      	mov	r1, r5
 8010f04:	463a      	mov	r2, r7
 8010f06:	9802      	ldr	r0, [sp, #8]
 8010f08:	f000 fbc8 	bl	801169c <__lshift>
 8010f0c:	1be4      	subs	r4, r4, r7
 8010f0e:	4605      	mov	r5, r0
 8010f10:	f100 0914 	add.w	r9, r0, #20
 8010f14:	f04f 0a00 	mov.w	sl, #0
 8010f18:	e7a8      	b.n	8010e6c <__gethex+0x1ce>
 8010f1a:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8010f1e:	42a0      	cmp	r0, r4
 8010f20:	dd6a      	ble.n	8010ff8 <__gethex+0x35a>
 8010f22:	1b04      	subs	r4, r0, r4
 8010f24:	42a6      	cmp	r6, r4
 8010f26:	dc2e      	bgt.n	8010f86 <__gethex+0x2e8>
 8010f28:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8010f2c:	2b02      	cmp	r3, #2
 8010f2e:	d022      	beq.n	8010f76 <__gethex+0x2d8>
 8010f30:	2b03      	cmp	r3, #3
 8010f32:	d024      	beq.n	8010f7e <__gethex+0x2e0>
 8010f34:	2b01      	cmp	r3, #1
 8010f36:	d115      	bne.n	8010f64 <__gethex+0x2c6>
 8010f38:	42a6      	cmp	r6, r4
 8010f3a:	d113      	bne.n	8010f64 <__gethex+0x2c6>
 8010f3c:	2e01      	cmp	r6, #1
 8010f3e:	dc0b      	bgt.n	8010f58 <__gethex+0x2ba>
 8010f40:	9a06      	ldr	r2, [sp, #24]
 8010f42:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8010f46:	6013      	str	r3, [r2, #0]
 8010f48:	2301      	movs	r3, #1
 8010f4a:	612b      	str	r3, [r5, #16]
 8010f4c:	f8c9 3000 	str.w	r3, [r9]
 8010f50:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8010f52:	2762      	movs	r7, #98	; 0x62
 8010f54:	601d      	str	r5, [r3, #0]
 8010f56:	e72a      	b.n	8010dae <__gethex+0x110>
 8010f58:	1e71      	subs	r1, r6, #1
 8010f5a:	4628      	mov	r0, r5
 8010f5c:	f000 fd7c 	bl	8011a58 <__any_on>
 8010f60:	2800      	cmp	r0, #0
 8010f62:	d1ed      	bne.n	8010f40 <__gethex+0x2a2>
 8010f64:	4629      	mov	r1, r5
 8010f66:	9802      	ldr	r0, [sp, #8]
 8010f68:	f000 f9cc 	bl	8011304 <_Bfree>
 8010f6c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8010f6e:	2300      	movs	r3, #0
 8010f70:	6013      	str	r3, [r2, #0]
 8010f72:	2750      	movs	r7, #80	; 0x50
 8010f74:	e71b      	b.n	8010dae <__gethex+0x110>
 8010f76:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8010f78:	2b00      	cmp	r3, #0
 8010f7a:	d0e1      	beq.n	8010f40 <__gethex+0x2a2>
 8010f7c:	e7f2      	b.n	8010f64 <__gethex+0x2c6>
 8010f7e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8010f80:	2b00      	cmp	r3, #0
 8010f82:	d1dd      	bne.n	8010f40 <__gethex+0x2a2>
 8010f84:	e7ee      	b.n	8010f64 <__gethex+0x2c6>
 8010f86:	1e67      	subs	r7, r4, #1
 8010f88:	f1ba 0f00 	cmp.w	sl, #0
 8010f8c:	d131      	bne.n	8010ff2 <__gethex+0x354>
 8010f8e:	b127      	cbz	r7, 8010f9a <__gethex+0x2fc>
 8010f90:	4639      	mov	r1, r7
 8010f92:	4628      	mov	r0, r5
 8010f94:	f000 fd60 	bl	8011a58 <__any_on>
 8010f98:	4682      	mov	sl, r0
 8010f9a:	117a      	asrs	r2, r7, #5
 8010f9c:	2301      	movs	r3, #1
 8010f9e:	f007 071f 	and.w	r7, r7, #31
 8010fa2:	fa03 f707 	lsl.w	r7, r3, r7
 8010fa6:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 8010faa:	4621      	mov	r1, r4
 8010fac:	421f      	tst	r7, r3
 8010fae:	4628      	mov	r0, r5
 8010fb0:	bf18      	it	ne
 8010fb2:	f04a 0a02 	orrne.w	sl, sl, #2
 8010fb6:	1b36      	subs	r6, r6, r4
 8010fb8:	f7ff fe22 	bl	8010c00 <rshift>
 8010fbc:	f8d8 4004 	ldr.w	r4, [r8, #4]
 8010fc0:	2702      	movs	r7, #2
 8010fc2:	f1ba 0f00 	cmp.w	sl, #0
 8010fc6:	d048      	beq.n	801105a <__gethex+0x3bc>
 8010fc8:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8010fcc:	2b02      	cmp	r3, #2
 8010fce:	d015      	beq.n	8010ffc <__gethex+0x35e>
 8010fd0:	2b03      	cmp	r3, #3
 8010fd2:	d017      	beq.n	8011004 <__gethex+0x366>
 8010fd4:	2b01      	cmp	r3, #1
 8010fd6:	d109      	bne.n	8010fec <__gethex+0x34e>
 8010fd8:	f01a 0f02 	tst.w	sl, #2
 8010fdc:	d006      	beq.n	8010fec <__gethex+0x34e>
 8010fde:	f8d9 3000 	ldr.w	r3, [r9]
 8010fe2:	ea4a 0a03 	orr.w	sl, sl, r3
 8010fe6:	f01a 0f01 	tst.w	sl, #1
 8010fea:	d10e      	bne.n	801100a <__gethex+0x36c>
 8010fec:	f047 0710 	orr.w	r7, r7, #16
 8010ff0:	e033      	b.n	801105a <__gethex+0x3bc>
 8010ff2:	f04f 0a01 	mov.w	sl, #1
 8010ff6:	e7d0      	b.n	8010f9a <__gethex+0x2fc>
 8010ff8:	2701      	movs	r7, #1
 8010ffa:	e7e2      	b.n	8010fc2 <__gethex+0x324>
 8010ffc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8010ffe:	f1c3 0301 	rsb	r3, r3, #1
 8011002:	9315      	str	r3, [sp, #84]	; 0x54
 8011004:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8011006:	2b00      	cmp	r3, #0
 8011008:	d0f0      	beq.n	8010fec <__gethex+0x34e>
 801100a:	f8d5 9010 	ldr.w	r9, [r5, #16]
 801100e:	f105 0314 	add.w	r3, r5, #20
 8011012:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 8011016:	eb03 010a 	add.w	r1, r3, sl
 801101a:	f04f 0c00 	mov.w	ip, #0
 801101e:	4618      	mov	r0, r3
 8011020:	f853 2b04 	ldr.w	r2, [r3], #4
 8011024:	f1b2 3fff 	cmp.w	r2, #4294967295
 8011028:	d01c      	beq.n	8011064 <__gethex+0x3c6>
 801102a:	3201      	adds	r2, #1
 801102c:	6002      	str	r2, [r0, #0]
 801102e:	2f02      	cmp	r7, #2
 8011030:	f105 0314 	add.w	r3, r5, #20
 8011034:	d138      	bne.n	80110a8 <__gethex+0x40a>
 8011036:	f8d8 2000 	ldr.w	r2, [r8]
 801103a:	3a01      	subs	r2, #1
 801103c:	42b2      	cmp	r2, r6
 801103e:	d10a      	bne.n	8011056 <__gethex+0x3b8>
 8011040:	1171      	asrs	r1, r6, #5
 8011042:	2201      	movs	r2, #1
 8011044:	f006 061f 	and.w	r6, r6, #31
 8011048:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801104c:	fa02 f606 	lsl.w	r6, r2, r6
 8011050:	421e      	tst	r6, r3
 8011052:	bf18      	it	ne
 8011054:	4617      	movne	r7, r2
 8011056:	f047 0720 	orr.w	r7, r7, #32
 801105a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801105c:	601d      	str	r5, [r3, #0]
 801105e:	9b06      	ldr	r3, [sp, #24]
 8011060:	601c      	str	r4, [r3, #0]
 8011062:	e6a4      	b.n	8010dae <__gethex+0x110>
 8011064:	4299      	cmp	r1, r3
 8011066:	f843 cc04 	str.w	ip, [r3, #-4]
 801106a:	d8d8      	bhi.n	801101e <__gethex+0x380>
 801106c:	68ab      	ldr	r3, [r5, #8]
 801106e:	4599      	cmp	r9, r3
 8011070:	db12      	blt.n	8011098 <__gethex+0x3fa>
 8011072:	6869      	ldr	r1, [r5, #4]
 8011074:	9802      	ldr	r0, [sp, #8]
 8011076:	3101      	adds	r1, #1
 8011078:	f000 f910 	bl	801129c <_Balloc>
 801107c:	692a      	ldr	r2, [r5, #16]
 801107e:	3202      	adds	r2, #2
 8011080:	f105 010c 	add.w	r1, r5, #12
 8011084:	4683      	mov	fp, r0
 8011086:	0092      	lsls	r2, r2, #2
 8011088:	300c      	adds	r0, #12
 801108a:	f7fd f92f 	bl	800e2ec <memcpy>
 801108e:	4629      	mov	r1, r5
 8011090:	9802      	ldr	r0, [sp, #8]
 8011092:	f000 f937 	bl	8011304 <_Bfree>
 8011096:	465d      	mov	r5, fp
 8011098:	692b      	ldr	r3, [r5, #16]
 801109a:	1c5a      	adds	r2, r3, #1
 801109c:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 80110a0:	612a      	str	r2, [r5, #16]
 80110a2:	2201      	movs	r2, #1
 80110a4:	615a      	str	r2, [r3, #20]
 80110a6:	e7c2      	b.n	801102e <__gethex+0x390>
 80110a8:	692a      	ldr	r2, [r5, #16]
 80110aa:	454a      	cmp	r2, r9
 80110ac:	dd0b      	ble.n	80110c6 <__gethex+0x428>
 80110ae:	2101      	movs	r1, #1
 80110b0:	4628      	mov	r0, r5
 80110b2:	f7ff fda5 	bl	8010c00 <rshift>
 80110b6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80110ba:	3401      	adds	r4, #1
 80110bc:	42a3      	cmp	r3, r4
 80110be:	f6ff aed9 	blt.w	8010e74 <__gethex+0x1d6>
 80110c2:	2701      	movs	r7, #1
 80110c4:	e7c7      	b.n	8011056 <__gethex+0x3b8>
 80110c6:	f016 061f 	ands.w	r6, r6, #31
 80110ca:	d0fa      	beq.n	80110c2 <__gethex+0x424>
 80110cc:	449a      	add	sl, r3
 80110ce:	f1c6 0620 	rsb	r6, r6, #32
 80110d2:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 80110d6:	f000 f9a5 	bl	8011424 <__hi0bits>
 80110da:	42b0      	cmp	r0, r6
 80110dc:	dbe7      	blt.n	80110ae <__gethex+0x410>
 80110de:	e7f0      	b.n	80110c2 <__gethex+0x424>

080110e0 <L_shift>:
 80110e0:	f1c2 0208 	rsb	r2, r2, #8
 80110e4:	0092      	lsls	r2, r2, #2
 80110e6:	b570      	push	{r4, r5, r6, lr}
 80110e8:	f1c2 0620 	rsb	r6, r2, #32
 80110ec:	6843      	ldr	r3, [r0, #4]
 80110ee:	6804      	ldr	r4, [r0, #0]
 80110f0:	fa03 f506 	lsl.w	r5, r3, r6
 80110f4:	432c      	orrs	r4, r5
 80110f6:	40d3      	lsrs	r3, r2
 80110f8:	6004      	str	r4, [r0, #0]
 80110fa:	f840 3f04 	str.w	r3, [r0, #4]!
 80110fe:	4288      	cmp	r0, r1
 8011100:	d3f4      	bcc.n	80110ec <L_shift+0xc>
 8011102:	bd70      	pop	{r4, r5, r6, pc}

08011104 <__match>:
 8011104:	b530      	push	{r4, r5, lr}
 8011106:	6803      	ldr	r3, [r0, #0]
 8011108:	3301      	adds	r3, #1
 801110a:	f811 4b01 	ldrb.w	r4, [r1], #1
 801110e:	b914      	cbnz	r4, 8011116 <__match+0x12>
 8011110:	6003      	str	r3, [r0, #0]
 8011112:	2001      	movs	r0, #1
 8011114:	bd30      	pop	{r4, r5, pc}
 8011116:	f813 2b01 	ldrb.w	r2, [r3], #1
 801111a:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 801111e:	2d19      	cmp	r5, #25
 8011120:	bf98      	it	ls
 8011122:	3220      	addls	r2, #32
 8011124:	42a2      	cmp	r2, r4
 8011126:	d0f0      	beq.n	801110a <__match+0x6>
 8011128:	2000      	movs	r0, #0
 801112a:	e7f3      	b.n	8011114 <__match+0x10>

0801112c <__hexnan>:
 801112c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011130:	680b      	ldr	r3, [r1, #0]
 8011132:	6801      	ldr	r1, [r0, #0]
 8011134:	115f      	asrs	r7, r3, #5
 8011136:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 801113a:	f013 031f 	ands.w	r3, r3, #31
 801113e:	b087      	sub	sp, #28
 8011140:	bf18      	it	ne
 8011142:	3704      	addne	r7, #4
 8011144:	2500      	movs	r5, #0
 8011146:	1f3e      	subs	r6, r7, #4
 8011148:	4682      	mov	sl, r0
 801114a:	4690      	mov	r8, r2
 801114c:	9301      	str	r3, [sp, #4]
 801114e:	f847 5c04 	str.w	r5, [r7, #-4]
 8011152:	46b1      	mov	r9, r6
 8011154:	4634      	mov	r4, r6
 8011156:	9502      	str	r5, [sp, #8]
 8011158:	46ab      	mov	fp, r5
 801115a:	784a      	ldrb	r2, [r1, #1]
 801115c:	1c4b      	adds	r3, r1, #1
 801115e:	9303      	str	r3, [sp, #12]
 8011160:	b342      	cbz	r2, 80111b4 <__hexnan+0x88>
 8011162:	4610      	mov	r0, r2
 8011164:	9105      	str	r1, [sp, #20]
 8011166:	9204      	str	r2, [sp, #16]
 8011168:	f7ff fd84 	bl	8010c74 <__hexdig_fun>
 801116c:	2800      	cmp	r0, #0
 801116e:	d143      	bne.n	80111f8 <__hexnan+0xcc>
 8011170:	9a04      	ldr	r2, [sp, #16]
 8011172:	9905      	ldr	r1, [sp, #20]
 8011174:	2a20      	cmp	r2, #32
 8011176:	d818      	bhi.n	80111aa <__hexnan+0x7e>
 8011178:	9b02      	ldr	r3, [sp, #8]
 801117a:	459b      	cmp	fp, r3
 801117c:	dd13      	ble.n	80111a6 <__hexnan+0x7a>
 801117e:	454c      	cmp	r4, r9
 8011180:	d206      	bcs.n	8011190 <__hexnan+0x64>
 8011182:	2d07      	cmp	r5, #7
 8011184:	dc04      	bgt.n	8011190 <__hexnan+0x64>
 8011186:	462a      	mov	r2, r5
 8011188:	4649      	mov	r1, r9
 801118a:	4620      	mov	r0, r4
 801118c:	f7ff ffa8 	bl	80110e0 <L_shift>
 8011190:	4544      	cmp	r4, r8
 8011192:	d944      	bls.n	801121e <__hexnan+0xf2>
 8011194:	2300      	movs	r3, #0
 8011196:	f1a4 0904 	sub.w	r9, r4, #4
 801119a:	f844 3c04 	str.w	r3, [r4, #-4]
 801119e:	f8cd b008 	str.w	fp, [sp, #8]
 80111a2:	464c      	mov	r4, r9
 80111a4:	461d      	mov	r5, r3
 80111a6:	9903      	ldr	r1, [sp, #12]
 80111a8:	e7d7      	b.n	801115a <__hexnan+0x2e>
 80111aa:	2a29      	cmp	r2, #41	; 0x29
 80111ac:	d14a      	bne.n	8011244 <__hexnan+0x118>
 80111ae:	3102      	adds	r1, #2
 80111b0:	f8ca 1000 	str.w	r1, [sl]
 80111b4:	f1bb 0f00 	cmp.w	fp, #0
 80111b8:	d044      	beq.n	8011244 <__hexnan+0x118>
 80111ba:	454c      	cmp	r4, r9
 80111bc:	d206      	bcs.n	80111cc <__hexnan+0xa0>
 80111be:	2d07      	cmp	r5, #7
 80111c0:	dc04      	bgt.n	80111cc <__hexnan+0xa0>
 80111c2:	462a      	mov	r2, r5
 80111c4:	4649      	mov	r1, r9
 80111c6:	4620      	mov	r0, r4
 80111c8:	f7ff ff8a 	bl	80110e0 <L_shift>
 80111cc:	4544      	cmp	r4, r8
 80111ce:	d928      	bls.n	8011222 <__hexnan+0xf6>
 80111d0:	4643      	mov	r3, r8
 80111d2:	f854 2b04 	ldr.w	r2, [r4], #4
 80111d6:	f843 2b04 	str.w	r2, [r3], #4
 80111da:	42a6      	cmp	r6, r4
 80111dc:	d2f9      	bcs.n	80111d2 <__hexnan+0xa6>
 80111de:	2200      	movs	r2, #0
 80111e0:	f843 2b04 	str.w	r2, [r3], #4
 80111e4:	429e      	cmp	r6, r3
 80111e6:	d2fb      	bcs.n	80111e0 <__hexnan+0xb4>
 80111e8:	6833      	ldr	r3, [r6, #0]
 80111ea:	b91b      	cbnz	r3, 80111f4 <__hexnan+0xc8>
 80111ec:	4546      	cmp	r6, r8
 80111ee:	d127      	bne.n	8011240 <__hexnan+0x114>
 80111f0:	2301      	movs	r3, #1
 80111f2:	6033      	str	r3, [r6, #0]
 80111f4:	2005      	movs	r0, #5
 80111f6:	e026      	b.n	8011246 <__hexnan+0x11a>
 80111f8:	3501      	adds	r5, #1
 80111fa:	2d08      	cmp	r5, #8
 80111fc:	f10b 0b01 	add.w	fp, fp, #1
 8011200:	dd06      	ble.n	8011210 <__hexnan+0xe4>
 8011202:	4544      	cmp	r4, r8
 8011204:	d9cf      	bls.n	80111a6 <__hexnan+0x7a>
 8011206:	2300      	movs	r3, #0
 8011208:	f844 3c04 	str.w	r3, [r4, #-4]
 801120c:	2501      	movs	r5, #1
 801120e:	3c04      	subs	r4, #4
 8011210:	6822      	ldr	r2, [r4, #0]
 8011212:	f000 000f 	and.w	r0, r0, #15
 8011216:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 801121a:	6020      	str	r0, [r4, #0]
 801121c:	e7c3      	b.n	80111a6 <__hexnan+0x7a>
 801121e:	2508      	movs	r5, #8
 8011220:	e7c1      	b.n	80111a6 <__hexnan+0x7a>
 8011222:	9b01      	ldr	r3, [sp, #4]
 8011224:	2b00      	cmp	r3, #0
 8011226:	d0df      	beq.n	80111e8 <__hexnan+0xbc>
 8011228:	f04f 32ff 	mov.w	r2, #4294967295
 801122c:	f1c3 0320 	rsb	r3, r3, #32
 8011230:	fa22 f303 	lsr.w	r3, r2, r3
 8011234:	f857 2c04 	ldr.w	r2, [r7, #-4]
 8011238:	401a      	ands	r2, r3
 801123a:	f847 2c04 	str.w	r2, [r7, #-4]
 801123e:	e7d3      	b.n	80111e8 <__hexnan+0xbc>
 8011240:	3e04      	subs	r6, #4
 8011242:	e7d1      	b.n	80111e8 <__hexnan+0xbc>
 8011244:	2004      	movs	r0, #4
 8011246:	b007      	add	sp, #28
 8011248:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801124c <__locale_ctype_ptr_l>:
 801124c:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8011250:	4770      	bx	lr

08011252 <__localeconv_l>:
 8011252:	30f0      	adds	r0, #240	; 0xf0
 8011254:	4770      	bx	lr
	...

08011258 <_localeconv_r>:
 8011258:	4b04      	ldr	r3, [pc, #16]	; (801126c <_localeconv_r+0x14>)
 801125a:	681b      	ldr	r3, [r3, #0]
 801125c:	6a18      	ldr	r0, [r3, #32]
 801125e:	4b04      	ldr	r3, [pc, #16]	; (8011270 <_localeconv_r+0x18>)
 8011260:	2800      	cmp	r0, #0
 8011262:	bf08      	it	eq
 8011264:	4618      	moveq	r0, r3
 8011266:	30f0      	adds	r0, #240	; 0xf0
 8011268:	4770      	bx	lr
 801126a:	bf00      	nop
 801126c:	2000017c 	.word	0x2000017c
 8011270:	200001e0 	.word	0x200001e0

08011274 <__ascii_mbtowc>:
 8011274:	b082      	sub	sp, #8
 8011276:	b901      	cbnz	r1, 801127a <__ascii_mbtowc+0x6>
 8011278:	a901      	add	r1, sp, #4
 801127a:	b142      	cbz	r2, 801128e <__ascii_mbtowc+0x1a>
 801127c:	b14b      	cbz	r3, 8011292 <__ascii_mbtowc+0x1e>
 801127e:	7813      	ldrb	r3, [r2, #0]
 8011280:	600b      	str	r3, [r1, #0]
 8011282:	7812      	ldrb	r2, [r2, #0]
 8011284:	1c10      	adds	r0, r2, #0
 8011286:	bf18      	it	ne
 8011288:	2001      	movne	r0, #1
 801128a:	b002      	add	sp, #8
 801128c:	4770      	bx	lr
 801128e:	4610      	mov	r0, r2
 8011290:	e7fb      	b.n	801128a <__ascii_mbtowc+0x16>
 8011292:	f06f 0001 	mvn.w	r0, #1
 8011296:	e7f8      	b.n	801128a <__ascii_mbtowc+0x16>

08011298 <__malloc_lock>:
 8011298:	4770      	bx	lr

0801129a <__malloc_unlock>:
 801129a:	4770      	bx	lr

0801129c <_Balloc>:
 801129c:	b570      	push	{r4, r5, r6, lr}
 801129e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80112a0:	4604      	mov	r4, r0
 80112a2:	460e      	mov	r6, r1
 80112a4:	b93d      	cbnz	r5, 80112b6 <_Balloc+0x1a>
 80112a6:	2010      	movs	r0, #16
 80112a8:	f7fd f810 	bl	800e2cc <malloc>
 80112ac:	6260      	str	r0, [r4, #36]	; 0x24
 80112ae:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80112b2:	6005      	str	r5, [r0, #0]
 80112b4:	60c5      	str	r5, [r0, #12]
 80112b6:	6a65      	ldr	r5, [r4, #36]	; 0x24
 80112b8:	68eb      	ldr	r3, [r5, #12]
 80112ba:	b183      	cbz	r3, 80112de <_Balloc+0x42>
 80112bc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80112be:	68db      	ldr	r3, [r3, #12]
 80112c0:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 80112c4:	b9b8      	cbnz	r0, 80112f6 <_Balloc+0x5a>
 80112c6:	2101      	movs	r1, #1
 80112c8:	fa01 f506 	lsl.w	r5, r1, r6
 80112cc:	1d6a      	adds	r2, r5, #5
 80112ce:	0092      	lsls	r2, r2, #2
 80112d0:	4620      	mov	r0, r4
 80112d2:	f000 fbe2 	bl	8011a9a <_calloc_r>
 80112d6:	b160      	cbz	r0, 80112f2 <_Balloc+0x56>
 80112d8:	e9c0 6501 	strd	r6, r5, [r0, #4]
 80112dc:	e00e      	b.n	80112fc <_Balloc+0x60>
 80112de:	2221      	movs	r2, #33	; 0x21
 80112e0:	2104      	movs	r1, #4
 80112e2:	4620      	mov	r0, r4
 80112e4:	f000 fbd9 	bl	8011a9a <_calloc_r>
 80112e8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80112ea:	60e8      	str	r0, [r5, #12]
 80112ec:	68db      	ldr	r3, [r3, #12]
 80112ee:	2b00      	cmp	r3, #0
 80112f0:	d1e4      	bne.n	80112bc <_Balloc+0x20>
 80112f2:	2000      	movs	r0, #0
 80112f4:	bd70      	pop	{r4, r5, r6, pc}
 80112f6:	6802      	ldr	r2, [r0, #0]
 80112f8:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 80112fc:	2300      	movs	r3, #0
 80112fe:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8011302:	e7f7      	b.n	80112f4 <_Balloc+0x58>

08011304 <_Bfree>:
 8011304:	b570      	push	{r4, r5, r6, lr}
 8011306:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8011308:	4606      	mov	r6, r0
 801130a:	460d      	mov	r5, r1
 801130c:	b93c      	cbnz	r4, 801131e <_Bfree+0x1a>
 801130e:	2010      	movs	r0, #16
 8011310:	f7fc ffdc 	bl	800e2cc <malloc>
 8011314:	6270      	str	r0, [r6, #36]	; 0x24
 8011316:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801131a:	6004      	str	r4, [r0, #0]
 801131c:	60c4      	str	r4, [r0, #12]
 801131e:	b13d      	cbz	r5, 8011330 <_Bfree+0x2c>
 8011320:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8011322:	686a      	ldr	r2, [r5, #4]
 8011324:	68db      	ldr	r3, [r3, #12]
 8011326:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801132a:	6029      	str	r1, [r5, #0]
 801132c:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8011330:	bd70      	pop	{r4, r5, r6, pc}

08011332 <__multadd>:
 8011332:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011336:	690d      	ldr	r5, [r1, #16]
 8011338:	461f      	mov	r7, r3
 801133a:	4606      	mov	r6, r0
 801133c:	460c      	mov	r4, r1
 801133e:	f101 0c14 	add.w	ip, r1, #20
 8011342:	2300      	movs	r3, #0
 8011344:	f8dc 0000 	ldr.w	r0, [ip]
 8011348:	b281      	uxth	r1, r0
 801134a:	fb02 7101 	mla	r1, r2, r1, r7
 801134e:	0c0f      	lsrs	r7, r1, #16
 8011350:	0c00      	lsrs	r0, r0, #16
 8011352:	fb02 7000 	mla	r0, r2, r0, r7
 8011356:	b289      	uxth	r1, r1
 8011358:	3301      	adds	r3, #1
 801135a:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 801135e:	429d      	cmp	r5, r3
 8011360:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8011364:	f84c 1b04 	str.w	r1, [ip], #4
 8011368:	dcec      	bgt.n	8011344 <__multadd+0x12>
 801136a:	b1d7      	cbz	r7, 80113a2 <__multadd+0x70>
 801136c:	68a3      	ldr	r3, [r4, #8]
 801136e:	42ab      	cmp	r3, r5
 8011370:	dc12      	bgt.n	8011398 <__multadd+0x66>
 8011372:	6861      	ldr	r1, [r4, #4]
 8011374:	4630      	mov	r0, r6
 8011376:	3101      	adds	r1, #1
 8011378:	f7ff ff90 	bl	801129c <_Balloc>
 801137c:	6922      	ldr	r2, [r4, #16]
 801137e:	3202      	adds	r2, #2
 8011380:	f104 010c 	add.w	r1, r4, #12
 8011384:	4680      	mov	r8, r0
 8011386:	0092      	lsls	r2, r2, #2
 8011388:	300c      	adds	r0, #12
 801138a:	f7fc ffaf 	bl	800e2ec <memcpy>
 801138e:	4621      	mov	r1, r4
 8011390:	4630      	mov	r0, r6
 8011392:	f7ff ffb7 	bl	8011304 <_Bfree>
 8011396:	4644      	mov	r4, r8
 8011398:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 801139c:	3501      	adds	r5, #1
 801139e:	615f      	str	r7, [r3, #20]
 80113a0:	6125      	str	r5, [r4, #16]
 80113a2:	4620      	mov	r0, r4
 80113a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080113a8 <__s2b>:
 80113a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80113ac:	460c      	mov	r4, r1
 80113ae:	4615      	mov	r5, r2
 80113b0:	461f      	mov	r7, r3
 80113b2:	2209      	movs	r2, #9
 80113b4:	3308      	adds	r3, #8
 80113b6:	4606      	mov	r6, r0
 80113b8:	fb93 f3f2 	sdiv	r3, r3, r2
 80113bc:	2100      	movs	r1, #0
 80113be:	2201      	movs	r2, #1
 80113c0:	429a      	cmp	r2, r3
 80113c2:	db20      	blt.n	8011406 <__s2b+0x5e>
 80113c4:	4630      	mov	r0, r6
 80113c6:	f7ff ff69 	bl	801129c <_Balloc>
 80113ca:	9b08      	ldr	r3, [sp, #32]
 80113cc:	6143      	str	r3, [r0, #20]
 80113ce:	2d09      	cmp	r5, #9
 80113d0:	f04f 0301 	mov.w	r3, #1
 80113d4:	6103      	str	r3, [r0, #16]
 80113d6:	dd19      	ble.n	801140c <__s2b+0x64>
 80113d8:	f104 0809 	add.w	r8, r4, #9
 80113dc:	46c1      	mov	r9, r8
 80113de:	442c      	add	r4, r5
 80113e0:	f819 3b01 	ldrb.w	r3, [r9], #1
 80113e4:	4601      	mov	r1, r0
 80113e6:	3b30      	subs	r3, #48	; 0x30
 80113e8:	220a      	movs	r2, #10
 80113ea:	4630      	mov	r0, r6
 80113ec:	f7ff ffa1 	bl	8011332 <__multadd>
 80113f0:	45a1      	cmp	r9, r4
 80113f2:	d1f5      	bne.n	80113e0 <__s2b+0x38>
 80113f4:	eb08 0405 	add.w	r4, r8, r5
 80113f8:	3c08      	subs	r4, #8
 80113fa:	1b2d      	subs	r5, r5, r4
 80113fc:	1963      	adds	r3, r4, r5
 80113fe:	42bb      	cmp	r3, r7
 8011400:	db07      	blt.n	8011412 <__s2b+0x6a>
 8011402:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011406:	0052      	lsls	r2, r2, #1
 8011408:	3101      	adds	r1, #1
 801140a:	e7d9      	b.n	80113c0 <__s2b+0x18>
 801140c:	340a      	adds	r4, #10
 801140e:	2509      	movs	r5, #9
 8011410:	e7f3      	b.n	80113fa <__s2b+0x52>
 8011412:	f814 3b01 	ldrb.w	r3, [r4], #1
 8011416:	4601      	mov	r1, r0
 8011418:	3b30      	subs	r3, #48	; 0x30
 801141a:	220a      	movs	r2, #10
 801141c:	4630      	mov	r0, r6
 801141e:	f7ff ff88 	bl	8011332 <__multadd>
 8011422:	e7eb      	b.n	80113fc <__s2b+0x54>

08011424 <__hi0bits>:
 8011424:	0c02      	lsrs	r2, r0, #16
 8011426:	0412      	lsls	r2, r2, #16
 8011428:	4603      	mov	r3, r0
 801142a:	b9b2      	cbnz	r2, 801145a <__hi0bits+0x36>
 801142c:	0403      	lsls	r3, r0, #16
 801142e:	2010      	movs	r0, #16
 8011430:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8011434:	bf04      	itt	eq
 8011436:	021b      	lsleq	r3, r3, #8
 8011438:	3008      	addeq	r0, #8
 801143a:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 801143e:	bf04      	itt	eq
 8011440:	011b      	lsleq	r3, r3, #4
 8011442:	3004      	addeq	r0, #4
 8011444:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8011448:	bf04      	itt	eq
 801144a:	009b      	lsleq	r3, r3, #2
 801144c:	3002      	addeq	r0, #2
 801144e:	2b00      	cmp	r3, #0
 8011450:	db06      	blt.n	8011460 <__hi0bits+0x3c>
 8011452:	005b      	lsls	r3, r3, #1
 8011454:	d503      	bpl.n	801145e <__hi0bits+0x3a>
 8011456:	3001      	adds	r0, #1
 8011458:	4770      	bx	lr
 801145a:	2000      	movs	r0, #0
 801145c:	e7e8      	b.n	8011430 <__hi0bits+0xc>
 801145e:	2020      	movs	r0, #32
 8011460:	4770      	bx	lr

08011462 <__lo0bits>:
 8011462:	6803      	ldr	r3, [r0, #0]
 8011464:	f013 0207 	ands.w	r2, r3, #7
 8011468:	4601      	mov	r1, r0
 801146a:	d00b      	beq.n	8011484 <__lo0bits+0x22>
 801146c:	07da      	lsls	r2, r3, #31
 801146e:	d423      	bmi.n	80114b8 <__lo0bits+0x56>
 8011470:	0798      	lsls	r0, r3, #30
 8011472:	bf49      	itett	mi
 8011474:	085b      	lsrmi	r3, r3, #1
 8011476:	089b      	lsrpl	r3, r3, #2
 8011478:	2001      	movmi	r0, #1
 801147a:	600b      	strmi	r3, [r1, #0]
 801147c:	bf5c      	itt	pl
 801147e:	600b      	strpl	r3, [r1, #0]
 8011480:	2002      	movpl	r0, #2
 8011482:	4770      	bx	lr
 8011484:	b298      	uxth	r0, r3
 8011486:	b9a8      	cbnz	r0, 80114b4 <__lo0bits+0x52>
 8011488:	0c1b      	lsrs	r3, r3, #16
 801148a:	2010      	movs	r0, #16
 801148c:	f013 0fff 	tst.w	r3, #255	; 0xff
 8011490:	bf04      	itt	eq
 8011492:	0a1b      	lsreq	r3, r3, #8
 8011494:	3008      	addeq	r0, #8
 8011496:	071a      	lsls	r2, r3, #28
 8011498:	bf04      	itt	eq
 801149a:	091b      	lsreq	r3, r3, #4
 801149c:	3004      	addeq	r0, #4
 801149e:	079a      	lsls	r2, r3, #30
 80114a0:	bf04      	itt	eq
 80114a2:	089b      	lsreq	r3, r3, #2
 80114a4:	3002      	addeq	r0, #2
 80114a6:	07da      	lsls	r2, r3, #31
 80114a8:	d402      	bmi.n	80114b0 <__lo0bits+0x4e>
 80114aa:	085b      	lsrs	r3, r3, #1
 80114ac:	d006      	beq.n	80114bc <__lo0bits+0x5a>
 80114ae:	3001      	adds	r0, #1
 80114b0:	600b      	str	r3, [r1, #0]
 80114b2:	4770      	bx	lr
 80114b4:	4610      	mov	r0, r2
 80114b6:	e7e9      	b.n	801148c <__lo0bits+0x2a>
 80114b8:	2000      	movs	r0, #0
 80114ba:	4770      	bx	lr
 80114bc:	2020      	movs	r0, #32
 80114be:	4770      	bx	lr

080114c0 <__i2b>:
 80114c0:	b510      	push	{r4, lr}
 80114c2:	460c      	mov	r4, r1
 80114c4:	2101      	movs	r1, #1
 80114c6:	f7ff fee9 	bl	801129c <_Balloc>
 80114ca:	2201      	movs	r2, #1
 80114cc:	6144      	str	r4, [r0, #20]
 80114ce:	6102      	str	r2, [r0, #16]
 80114d0:	bd10      	pop	{r4, pc}

080114d2 <__multiply>:
 80114d2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80114d6:	4614      	mov	r4, r2
 80114d8:	690a      	ldr	r2, [r1, #16]
 80114da:	6923      	ldr	r3, [r4, #16]
 80114dc:	429a      	cmp	r2, r3
 80114de:	bfb8      	it	lt
 80114e0:	460b      	movlt	r3, r1
 80114e2:	4688      	mov	r8, r1
 80114e4:	bfbc      	itt	lt
 80114e6:	46a0      	movlt	r8, r4
 80114e8:	461c      	movlt	r4, r3
 80114ea:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80114ee:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80114f2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80114f6:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80114fa:	eb07 0609 	add.w	r6, r7, r9
 80114fe:	42b3      	cmp	r3, r6
 8011500:	bfb8      	it	lt
 8011502:	3101      	addlt	r1, #1
 8011504:	f7ff feca 	bl	801129c <_Balloc>
 8011508:	f100 0514 	add.w	r5, r0, #20
 801150c:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8011510:	462b      	mov	r3, r5
 8011512:	2200      	movs	r2, #0
 8011514:	4573      	cmp	r3, lr
 8011516:	d316      	bcc.n	8011546 <__multiply+0x74>
 8011518:	f104 0214 	add.w	r2, r4, #20
 801151c:	f108 0114 	add.w	r1, r8, #20
 8011520:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8011524:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8011528:	9300      	str	r3, [sp, #0]
 801152a:	9b00      	ldr	r3, [sp, #0]
 801152c:	9201      	str	r2, [sp, #4]
 801152e:	4293      	cmp	r3, r2
 8011530:	d80c      	bhi.n	801154c <__multiply+0x7a>
 8011532:	2e00      	cmp	r6, #0
 8011534:	dd03      	ble.n	801153e <__multiply+0x6c>
 8011536:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 801153a:	2b00      	cmp	r3, #0
 801153c:	d05d      	beq.n	80115fa <__multiply+0x128>
 801153e:	6106      	str	r6, [r0, #16]
 8011540:	b003      	add	sp, #12
 8011542:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011546:	f843 2b04 	str.w	r2, [r3], #4
 801154a:	e7e3      	b.n	8011514 <__multiply+0x42>
 801154c:	f8b2 b000 	ldrh.w	fp, [r2]
 8011550:	f1bb 0f00 	cmp.w	fp, #0
 8011554:	d023      	beq.n	801159e <__multiply+0xcc>
 8011556:	4689      	mov	r9, r1
 8011558:	46ac      	mov	ip, r5
 801155a:	f04f 0800 	mov.w	r8, #0
 801155e:	f859 4b04 	ldr.w	r4, [r9], #4
 8011562:	f8dc a000 	ldr.w	sl, [ip]
 8011566:	b2a3      	uxth	r3, r4
 8011568:	fa1f fa8a 	uxth.w	sl, sl
 801156c:	fb0b a303 	mla	r3, fp, r3, sl
 8011570:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8011574:	f8dc 4000 	ldr.w	r4, [ip]
 8011578:	4443      	add	r3, r8
 801157a:	ea4f 4814 	mov.w	r8, r4, lsr #16
 801157e:	fb0b 840a 	mla	r4, fp, sl, r8
 8011582:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8011586:	46e2      	mov	sl, ip
 8011588:	b29b      	uxth	r3, r3
 801158a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 801158e:	454f      	cmp	r7, r9
 8011590:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8011594:	f84a 3b04 	str.w	r3, [sl], #4
 8011598:	d82b      	bhi.n	80115f2 <__multiply+0x120>
 801159a:	f8cc 8004 	str.w	r8, [ip, #4]
 801159e:	9b01      	ldr	r3, [sp, #4]
 80115a0:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 80115a4:	3204      	adds	r2, #4
 80115a6:	f1ba 0f00 	cmp.w	sl, #0
 80115aa:	d020      	beq.n	80115ee <__multiply+0x11c>
 80115ac:	682b      	ldr	r3, [r5, #0]
 80115ae:	4689      	mov	r9, r1
 80115b0:	46a8      	mov	r8, r5
 80115b2:	f04f 0b00 	mov.w	fp, #0
 80115b6:	f8b9 c000 	ldrh.w	ip, [r9]
 80115ba:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 80115be:	fb0a 440c 	mla	r4, sl, ip, r4
 80115c2:	445c      	add	r4, fp
 80115c4:	46c4      	mov	ip, r8
 80115c6:	b29b      	uxth	r3, r3
 80115c8:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80115cc:	f84c 3b04 	str.w	r3, [ip], #4
 80115d0:	f859 3b04 	ldr.w	r3, [r9], #4
 80115d4:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 80115d8:	0c1b      	lsrs	r3, r3, #16
 80115da:	fb0a b303 	mla	r3, sl, r3, fp
 80115de:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 80115e2:	454f      	cmp	r7, r9
 80115e4:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 80115e8:	d805      	bhi.n	80115f6 <__multiply+0x124>
 80115ea:	f8c8 3004 	str.w	r3, [r8, #4]
 80115ee:	3504      	adds	r5, #4
 80115f0:	e79b      	b.n	801152a <__multiply+0x58>
 80115f2:	46d4      	mov	ip, sl
 80115f4:	e7b3      	b.n	801155e <__multiply+0x8c>
 80115f6:	46e0      	mov	r8, ip
 80115f8:	e7dd      	b.n	80115b6 <__multiply+0xe4>
 80115fa:	3e01      	subs	r6, #1
 80115fc:	e799      	b.n	8011532 <__multiply+0x60>
	...

08011600 <__pow5mult>:
 8011600:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011604:	4615      	mov	r5, r2
 8011606:	f012 0203 	ands.w	r2, r2, #3
 801160a:	4606      	mov	r6, r0
 801160c:	460f      	mov	r7, r1
 801160e:	d007      	beq.n	8011620 <__pow5mult+0x20>
 8011610:	3a01      	subs	r2, #1
 8011612:	4c21      	ldr	r4, [pc, #132]	; (8011698 <__pow5mult+0x98>)
 8011614:	2300      	movs	r3, #0
 8011616:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801161a:	f7ff fe8a 	bl	8011332 <__multadd>
 801161e:	4607      	mov	r7, r0
 8011620:	10ad      	asrs	r5, r5, #2
 8011622:	d035      	beq.n	8011690 <__pow5mult+0x90>
 8011624:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8011626:	b93c      	cbnz	r4, 8011638 <__pow5mult+0x38>
 8011628:	2010      	movs	r0, #16
 801162a:	f7fc fe4f 	bl	800e2cc <malloc>
 801162e:	6270      	str	r0, [r6, #36]	; 0x24
 8011630:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8011634:	6004      	str	r4, [r0, #0]
 8011636:	60c4      	str	r4, [r0, #12]
 8011638:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 801163c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8011640:	b94c      	cbnz	r4, 8011656 <__pow5mult+0x56>
 8011642:	f240 2171 	movw	r1, #625	; 0x271
 8011646:	4630      	mov	r0, r6
 8011648:	f7ff ff3a 	bl	80114c0 <__i2b>
 801164c:	2300      	movs	r3, #0
 801164e:	f8c8 0008 	str.w	r0, [r8, #8]
 8011652:	4604      	mov	r4, r0
 8011654:	6003      	str	r3, [r0, #0]
 8011656:	f04f 0800 	mov.w	r8, #0
 801165a:	07eb      	lsls	r3, r5, #31
 801165c:	d50a      	bpl.n	8011674 <__pow5mult+0x74>
 801165e:	4639      	mov	r1, r7
 8011660:	4622      	mov	r2, r4
 8011662:	4630      	mov	r0, r6
 8011664:	f7ff ff35 	bl	80114d2 <__multiply>
 8011668:	4639      	mov	r1, r7
 801166a:	4681      	mov	r9, r0
 801166c:	4630      	mov	r0, r6
 801166e:	f7ff fe49 	bl	8011304 <_Bfree>
 8011672:	464f      	mov	r7, r9
 8011674:	106d      	asrs	r5, r5, #1
 8011676:	d00b      	beq.n	8011690 <__pow5mult+0x90>
 8011678:	6820      	ldr	r0, [r4, #0]
 801167a:	b938      	cbnz	r0, 801168c <__pow5mult+0x8c>
 801167c:	4622      	mov	r2, r4
 801167e:	4621      	mov	r1, r4
 8011680:	4630      	mov	r0, r6
 8011682:	f7ff ff26 	bl	80114d2 <__multiply>
 8011686:	6020      	str	r0, [r4, #0]
 8011688:	f8c0 8000 	str.w	r8, [r0]
 801168c:	4604      	mov	r4, r0
 801168e:	e7e4      	b.n	801165a <__pow5mult+0x5a>
 8011690:	4638      	mov	r0, r7
 8011692:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011696:	bf00      	nop
 8011698:	08012888 	.word	0x08012888

0801169c <__lshift>:
 801169c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80116a0:	460c      	mov	r4, r1
 80116a2:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80116a6:	6923      	ldr	r3, [r4, #16]
 80116a8:	6849      	ldr	r1, [r1, #4]
 80116aa:	eb0a 0903 	add.w	r9, sl, r3
 80116ae:	68a3      	ldr	r3, [r4, #8]
 80116b0:	4607      	mov	r7, r0
 80116b2:	4616      	mov	r6, r2
 80116b4:	f109 0501 	add.w	r5, r9, #1
 80116b8:	42ab      	cmp	r3, r5
 80116ba:	db32      	blt.n	8011722 <__lshift+0x86>
 80116bc:	4638      	mov	r0, r7
 80116be:	f7ff fded 	bl	801129c <_Balloc>
 80116c2:	2300      	movs	r3, #0
 80116c4:	4680      	mov	r8, r0
 80116c6:	f100 0114 	add.w	r1, r0, #20
 80116ca:	461a      	mov	r2, r3
 80116cc:	4553      	cmp	r3, sl
 80116ce:	db2b      	blt.n	8011728 <__lshift+0x8c>
 80116d0:	6920      	ldr	r0, [r4, #16]
 80116d2:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80116d6:	f104 0314 	add.w	r3, r4, #20
 80116da:	f016 021f 	ands.w	r2, r6, #31
 80116de:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80116e2:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80116e6:	d025      	beq.n	8011734 <__lshift+0x98>
 80116e8:	f1c2 0e20 	rsb	lr, r2, #32
 80116ec:	2000      	movs	r0, #0
 80116ee:	681e      	ldr	r6, [r3, #0]
 80116f0:	468a      	mov	sl, r1
 80116f2:	4096      	lsls	r6, r2
 80116f4:	4330      	orrs	r0, r6
 80116f6:	f84a 0b04 	str.w	r0, [sl], #4
 80116fa:	f853 0b04 	ldr.w	r0, [r3], #4
 80116fe:	459c      	cmp	ip, r3
 8011700:	fa20 f00e 	lsr.w	r0, r0, lr
 8011704:	d814      	bhi.n	8011730 <__lshift+0x94>
 8011706:	6048      	str	r0, [r1, #4]
 8011708:	b108      	cbz	r0, 801170e <__lshift+0x72>
 801170a:	f109 0502 	add.w	r5, r9, #2
 801170e:	3d01      	subs	r5, #1
 8011710:	4638      	mov	r0, r7
 8011712:	f8c8 5010 	str.w	r5, [r8, #16]
 8011716:	4621      	mov	r1, r4
 8011718:	f7ff fdf4 	bl	8011304 <_Bfree>
 801171c:	4640      	mov	r0, r8
 801171e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011722:	3101      	adds	r1, #1
 8011724:	005b      	lsls	r3, r3, #1
 8011726:	e7c7      	b.n	80116b8 <__lshift+0x1c>
 8011728:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 801172c:	3301      	adds	r3, #1
 801172e:	e7cd      	b.n	80116cc <__lshift+0x30>
 8011730:	4651      	mov	r1, sl
 8011732:	e7dc      	b.n	80116ee <__lshift+0x52>
 8011734:	3904      	subs	r1, #4
 8011736:	f853 2b04 	ldr.w	r2, [r3], #4
 801173a:	f841 2f04 	str.w	r2, [r1, #4]!
 801173e:	459c      	cmp	ip, r3
 8011740:	d8f9      	bhi.n	8011736 <__lshift+0x9a>
 8011742:	e7e4      	b.n	801170e <__lshift+0x72>

08011744 <__mcmp>:
 8011744:	6903      	ldr	r3, [r0, #16]
 8011746:	690a      	ldr	r2, [r1, #16]
 8011748:	1a9b      	subs	r3, r3, r2
 801174a:	b530      	push	{r4, r5, lr}
 801174c:	d10c      	bne.n	8011768 <__mcmp+0x24>
 801174e:	0092      	lsls	r2, r2, #2
 8011750:	3014      	adds	r0, #20
 8011752:	3114      	adds	r1, #20
 8011754:	1884      	adds	r4, r0, r2
 8011756:	4411      	add	r1, r2
 8011758:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 801175c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8011760:	4295      	cmp	r5, r2
 8011762:	d003      	beq.n	801176c <__mcmp+0x28>
 8011764:	d305      	bcc.n	8011772 <__mcmp+0x2e>
 8011766:	2301      	movs	r3, #1
 8011768:	4618      	mov	r0, r3
 801176a:	bd30      	pop	{r4, r5, pc}
 801176c:	42a0      	cmp	r0, r4
 801176e:	d3f3      	bcc.n	8011758 <__mcmp+0x14>
 8011770:	e7fa      	b.n	8011768 <__mcmp+0x24>
 8011772:	f04f 33ff 	mov.w	r3, #4294967295
 8011776:	e7f7      	b.n	8011768 <__mcmp+0x24>

08011778 <__mdiff>:
 8011778:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801177c:	460d      	mov	r5, r1
 801177e:	4607      	mov	r7, r0
 8011780:	4611      	mov	r1, r2
 8011782:	4628      	mov	r0, r5
 8011784:	4614      	mov	r4, r2
 8011786:	f7ff ffdd 	bl	8011744 <__mcmp>
 801178a:	1e06      	subs	r6, r0, #0
 801178c:	d108      	bne.n	80117a0 <__mdiff+0x28>
 801178e:	4631      	mov	r1, r6
 8011790:	4638      	mov	r0, r7
 8011792:	f7ff fd83 	bl	801129c <_Balloc>
 8011796:	2301      	movs	r3, #1
 8011798:	e9c0 3604 	strd	r3, r6, [r0, #16]
 801179c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80117a0:	bfa4      	itt	ge
 80117a2:	4623      	movge	r3, r4
 80117a4:	462c      	movge	r4, r5
 80117a6:	4638      	mov	r0, r7
 80117a8:	6861      	ldr	r1, [r4, #4]
 80117aa:	bfa6      	itte	ge
 80117ac:	461d      	movge	r5, r3
 80117ae:	2600      	movge	r6, #0
 80117b0:	2601      	movlt	r6, #1
 80117b2:	f7ff fd73 	bl	801129c <_Balloc>
 80117b6:	692b      	ldr	r3, [r5, #16]
 80117b8:	60c6      	str	r6, [r0, #12]
 80117ba:	6926      	ldr	r6, [r4, #16]
 80117bc:	f105 0914 	add.w	r9, r5, #20
 80117c0:	f104 0214 	add.w	r2, r4, #20
 80117c4:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 80117c8:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 80117cc:	f100 0514 	add.w	r5, r0, #20
 80117d0:	f04f 0e00 	mov.w	lr, #0
 80117d4:	f852 ab04 	ldr.w	sl, [r2], #4
 80117d8:	f859 4b04 	ldr.w	r4, [r9], #4
 80117dc:	fa1e f18a 	uxtah	r1, lr, sl
 80117e0:	b2a3      	uxth	r3, r4
 80117e2:	1ac9      	subs	r1, r1, r3
 80117e4:	0c23      	lsrs	r3, r4, #16
 80117e6:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 80117ea:	eb03 4321 	add.w	r3, r3, r1, asr #16
 80117ee:	b289      	uxth	r1, r1
 80117f0:	ea4f 4e23 	mov.w	lr, r3, asr #16
 80117f4:	45c8      	cmp	r8, r9
 80117f6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80117fa:	4694      	mov	ip, r2
 80117fc:	f845 3b04 	str.w	r3, [r5], #4
 8011800:	d8e8      	bhi.n	80117d4 <__mdiff+0x5c>
 8011802:	45bc      	cmp	ip, r7
 8011804:	d304      	bcc.n	8011810 <__mdiff+0x98>
 8011806:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 801180a:	b183      	cbz	r3, 801182e <__mdiff+0xb6>
 801180c:	6106      	str	r6, [r0, #16]
 801180e:	e7c5      	b.n	801179c <__mdiff+0x24>
 8011810:	f85c 1b04 	ldr.w	r1, [ip], #4
 8011814:	fa1e f381 	uxtah	r3, lr, r1
 8011818:	141a      	asrs	r2, r3, #16
 801181a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 801181e:	b29b      	uxth	r3, r3
 8011820:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8011824:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8011828:	f845 3b04 	str.w	r3, [r5], #4
 801182c:	e7e9      	b.n	8011802 <__mdiff+0x8a>
 801182e:	3e01      	subs	r6, #1
 8011830:	e7e9      	b.n	8011806 <__mdiff+0x8e>
	...

08011834 <__ulp>:
 8011834:	4b12      	ldr	r3, [pc, #72]	; (8011880 <__ulp+0x4c>)
 8011836:	ee10 2a90 	vmov	r2, s1
 801183a:	401a      	ands	r2, r3
 801183c:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 8011840:	2b00      	cmp	r3, #0
 8011842:	dd04      	ble.n	801184e <__ulp+0x1a>
 8011844:	2000      	movs	r0, #0
 8011846:	4619      	mov	r1, r3
 8011848:	ec41 0b10 	vmov	d0, r0, r1
 801184c:	4770      	bx	lr
 801184e:	425b      	negs	r3, r3
 8011850:	151b      	asrs	r3, r3, #20
 8011852:	2b13      	cmp	r3, #19
 8011854:	f04f 0000 	mov.w	r0, #0
 8011858:	f04f 0100 	mov.w	r1, #0
 801185c:	dc04      	bgt.n	8011868 <__ulp+0x34>
 801185e:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8011862:	fa42 f103 	asr.w	r1, r2, r3
 8011866:	e7ef      	b.n	8011848 <__ulp+0x14>
 8011868:	3b14      	subs	r3, #20
 801186a:	2b1e      	cmp	r3, #30
 801186c:	f04f 0201 	mov.w	r2, #1
 8011870:	bfda      	itte	le
 8011872:	f1c3 031f 	rsble	r3, r3, #31
 8011876:	fa02 f303 	lslle.w	r3, r2, r3
 801187a:	4613      	movgt	r3, r2
 801187c:	4618      	mov	r0, r3
 801187e:	e7e3      	b.n	8011848 <__ulp+0x14>
 8011880:	7ff00000 	.word	0x7ff00000

08011884 <__b2d>:
 8011884:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011886:	6905      	ldr	r5, [r0, #16]
 8011888:	f100 0714 	add.w	r7, r0, #20
 801188c:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8011890:	1f2e      	subs	r6, r5, #4
 8011892:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8011896:	4620      	mov	r0, r4
 8011898:	f7ff fdc4 	bl	8011424 <__hi0bits>
 801189c:	f1c0 0320 	rsb	r3, r0, #32
 80118a0:	280a      	cmp	r0, #10
 80118a2:	600b      	str	r3, [r1, #0]
 80118a4:	f8df c074 	ldr.w	ip, [pc, #116]	; 801191c <__b2d+0x98>
 80118a8:	dc14      	bgt.n	80118d4 <__b2d+0x50>
 80118aa:	f1c0 0e0b 	rsb	lr, r0, #11
 80118ae:	fa24 f10e 	lsr.w	r1, r4, lr
 80118b2:	42b7      	cmp	r7, r6
 80118b4:	ea41 030c 	orr.w	r3, r1, ip
 80118b8:	bf34      	ite	cc
 80118ba:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80118be:	2100      	movcs	r1, #0
 80118c0:	3015      	adds	r0, #21
 80118c2:	fa04 f000 	lsl.w	r0, r4, r0
 80118c6:	fa21 f10e 	lsr.w	r1, r1, lr
 80118ca:	ea40 0201 	orr.w	r2, r0, r1
 80118ce:	ec43 2b10 	vmov	d0, r2, r3
 80118d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80118d4:	42b7      	cmp	r7, r6
 80118d6:	bf3a      	itte	cc
 80118d8:	f1a5 0608 	subcc.w	r6, r5, #8
 80118dc:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80118e0:	2100      	movcs	r1, #0
 80118e2:	380b      	subs	r0, #11
 80118e4:	d015      	beq.n	8011912 <__b2d+0x8e>
 80118e6:	4084      	lsls	r4, r0
 80118e8:	f1c0 0520 	rsb	r5, r0, #32
 80118ec:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 80118f0:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 80118f4:	42be      	cmp	r6, r7
 80118f6:	fa21 fc05 	lsr.w	ip, r1, r5
 80118fa:	ea44 030c 	orr.w	r3, r4, ip
 80118fe:	bf8c      	ite	hi
 8011900:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8011904:	2400      	movls	r4, #0
 8011906:	fa01 f000 	lsl.w	r0, r1, r0
 801190a:	40ec      	lsrs	r4, r5
 801190c:	ea40 0204 	orr.w	r2, r0, r4
 8011910:	e7dd      	b.n	80118ce <__b2d+0x4a>
 8011912:	ea44 030c 	orr.w	r3, r4, ip
 8011916:	460a      	mov	r2, r1
 8011918:	e7d9      	b.n	80118ce <__b2d+0x4a>
 801191a:	bf00      	nop
 801191c:	3ff00000 	.word	0x3ff00000

08011920 <__d2b>:
 8011920:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8011924:	460e      	mov	r6, r1
 8011926:	2101      	movs	r1, #1
 8011928:	ec59 8b10 	vmov	r8, r9, d0
 801192c:	4615      	mov	r5, r2
 801192e:	f7ff fcb5 	bl	801129c <_Balloc>
 8011932:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8011936:	4607      	mov	r7, r0
 8011938:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801193c:	bb34      	cbnz	r4, 801198c <__d2b+0x6c>
 801193e:	9301      	str	r3, [sp, #4]
 8011940:	f1b8 0300 	subs.w	r3, r8, #0
 8011944:	d027      	beq.n	8011996 <__d2b+0x76>
 8011946:	a802      	add	r0, sp, #8
 8011948:	f840 3d08 	str.w	r3, [r0, #-8]!
 801194c:	f7ff fd89 	bl	8011462 <__lo0bits>
 8011950:	9900      	ldr	r1, [sp, #0]
 8011952:	b1f0      	cbz	r0, 8011992 <__d2b+0x72>
 8011954:	9a01      	ldr	r2, [sp, #4]
 8011956:	f1c0 0320 	rsb	r3, r0, #32
 801195a:	fa02 f303 	lsl.w	r3, r2, r3
 801195e:	430b      	orrs	r3, r1
 8011960:	40c2      	lsrs	r2, r0
 8011962:	617b      	str	r3, [r7, #20]
 8011964:	9201      	str	r2, [sp, #4]
 8011966:	9b01      	ldr	r3, [sp, #4]
 8011968:	61bb      	str	r3, [r7, #24]
 801196a:	2b00      	cmp	r3, #0
 801196c:	bf14      	ite	ne
 801196e:	2102      	movne	r1, #2
 8011970:	2101      	moveq	r1, #1
 8011972:	6139      	str	r1, [r7, #16]
 8011974:	b1c4      	cbz	r4, 80119a8 <__d2b+0x88>
 8011976:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 801197a:	4404      	add	r4, r0
 801197c:	6034      	str	r4, [r6, #0]
 801197e:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8011982:	6028      	str	r0, [r5, #0]
 8011984:	4638      	mov	r0, r7
 8011986:	b003      	add	sp, #12
 8011988:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801198c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8011990:	e7d5      	b.n	801193e <__d2b+0x1e>
 8011992:	6179      	str	r1, [r7, #20]
 8011994:	e7e7      	b.n	8011966 <__d2b+0x46>
 8011996:	a801      	add	r0, sp, #4
 8011998:	f7ff fd63 	bl	8011462 <__lo0bits>
 801199c:	9b01      	ldr	r3, [sp, #4]
 801199e:	617b      	str	r3, [r7, #20]
 80119a0:	2101      	movs	r1, #1
 80119a2:	6139      	str	r1, [r7, #16]
 80119a4:	3020      	adds	r0, #32
 80119a6:	e7e5      	b.n	8011974 <__d2b+0x54>
 80119a8:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 80119ac:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80119b0:	6030      	str	r0, [r6, #0]
 80119b2:	6918      	ldr	r0, [r3, #16]
 80119b4:	f7ff fd36 	bl	8011424 <__hi0bits>
 80119b8:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 80119bc:	e7e1      	b.n	8011982 <__d2b+0x62>

080119be <__ratio>:
 80119be:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80119c2:	4688      	mov	r8, r1
 80119c4:	4669      	mov	r1, sp
 80119c6:	4681      	mov	r9, r0
 80119c8:	f7ff ff5c 	bl	8011884 <__b2d>
 80119cc:	a901      	add	r1, sp, #4
 80119ce:	4640      	mov	r0, r8
 80119d0:	ec57 6b10 	vmov	r6, r7, d0
 80119d4:	f7ff ff56 	bl	8011884 <__b2d>
 80119d8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80119dc:	f8d8 2010 	ldr.w	r2, [r8, #16]
 80119e0:	eba3 0c02 	sub.w	ip, r3, r2
 80119e4:	e9dd 3200 	ldrd	r3, r2, [sp]
 80119e8:	1a9b      	subs	r3, r3, r2
 80119ea:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 80119ee:	ec5b ab10 	vmov	sl, fp, d0
 80119f2:	2b00      	cmp	r3, #0
 80119f4:	bfce      	itee	gt
 80119f6:	463a      	movgt	r2, r7
 80119f8:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80119fc:	465a      	movle	r2, fp
 80119fe:	4659      	mov	r1, fp
 8011a00:	463d      	mov	r5, r7
 8011a02:	bfd4      	ite	le
 8011a04:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
 8011a08:	eb02 5503 	addgt.w	r5, r2, r3, lsl #20
 8011a0c:	4630      	mov	r0, r6
 8011a0e:	ee10 2a10 	vmov	r2, s0
 8011a12:	460b      	mov	r3, r1
 8011a14:	4629      	mov	r1, r5
 8011a16:	f7ee ff29 	bl	800086c <__aeabi_ddiv>
 8011a1a:	ec41 0b10 	vmov	d0, r0, r1
 8011a1e:	b003      	add	sp, #12
 8011a20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08011a24 <__copybits>:
 8011a24:	3901      	subs	r1, #1
 8011a26:	b510      	push	{r4, lr}
 8011a28:	1149      	asrs	r1, r1, #5
 8011a2a:	6914      	ldr	r4, [r2, #16]
 8011a2c:	3101      	adds	r1, #1
 8011a2e:	f102 0314 	add.w	r3, r2, #20
 8011a32:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8011a36:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8011a3a:	42a3      	cmp	r3, r4
 8011a3c:	4602      	mov	r2, r0
 8011a3e:	d303      	bcc.n	8011a48 <__copybits+0x24>
 8011a40:	2300      	movs	r3, #0
 8011a42:	428a      	cmp	r2, r1
 8011a44:	d305      	bcc.n	8011a52 <__copybits+0x2e>
 8011a46:	bd10      	pop	{r4, pc}
 8011a48:	f853 2b04 	ldr.w	r2, [r3], #4
 8011a4c:	f840 2b04 	str.w	r2, [r0], #4
 8011a50:	e7f3      	b.n	8011a3a <__copybits+0x16>
 8011a52:	f842 3b04 	str.w	r3, [r2], #4
 8011a56:	e7f4      	b.n	8011a42 <__copybits+0x1e>

08011a58 <__any_on>:
 8011a58:	f100 0214 	add.w	r2, r0, #20
 8011a5c:	6900      	ldr	r0, [r0, #16]
 8011a5e:	114b      	asrs	r3, r1, #5
 8011a60:	4298      	cmp	r0, r3
 8011a62:	b510      	push	{r4, lr}
 8011a64:	db11      	blt.n	8011a8a <__any_on+0x32>
 8011a66:	dd0a      	ble.n	8011a7e <__any_on+0x26>
 8011a68:	f011 011f 	ands.w	r1, r1, #31
 8011a6c:	d007      	beq.n	8011a7e <__any_on+0x26>
 8011a6e:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8011a72:	fa24 f001 	lsr.w	r0, r4, r1
 8011a76:	fa00 f101 	lsl.w	r1, r0, r1
 8011a7a:	428c      	cmp	r4, r1
 8011a7c:	d10b      	bne.n	8011a96 <__any_on+0x3e>
 8011a7e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8011a82:	4293      	cmp	r3, r2
 8011a84:	d803      	bhi.n	8011a8e <__any_on+0x36>
 8011a86:	2000      	movs	r0, #0
 8011a88:	bd10      	pop	{r4, pc}
 8011a8a:	4603      	mov	r3, r0
 8011a8c:	e7f7      	b.n	8011a7e <__any_on+0x26>
 8011a8e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8011a92:	2900      	cmp	r1, #0
 8011a94:	d0f5      	beq.n	8011a82 <__any_on+0x2a>
 8011a96:	2001      	movs	r0, #1
 8011a98:	e7f6      	b.n	8011a88 <__any_on+0x30>

08011a9a <_calloc_r>:
 8011a9a:	b538      	push	{r3, r4, r5, lr}
 8011a9c:	fb02 f401 	mul.w	r4, r2, r1
 8011aa0:	4621      	mov	r1, r4
 8011aa2:	f7fc fc85 	bl	800e3b0 <_malloc_r>
 8011aa6:	4605      	mov	r5, r0
 8011aa8:	b118      	cbz	r0, 8011ab2 <_calloc_r+0x18>
 8011aaa:	4622      	mov	r2, r4
 8011aac:	2100      	movs	r1, #0
 8011aae:	f7fc fc28 	bl	800e302 <memset>
 8011ab2:	4628      	mov	r0, r5
 8011ab4:	bd38      	pop	{r3, r4, r5, pc}

08011ab6 <__ssputs_r>:
 8011ab6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011aba:	688e      	ldr	r6, [r1, #8]
 8011abc:	429e      	cmp	r6, r3
 8011abe:	4682      	mov	sl, r0
 8011ac0:	460c      	mov	r4, r1
 8011ac2:	4690      	mov	r8, r2
 8011ac4:	4699      	mov	r9, r3
 8011ac6:	d837      	bhi.n	8011b38 <__ssputs_r+0x82>
 8011ac8:	898a      	ldrh	r2, [r1, #12]
 8011aca:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8011ace:	d031      	beq.n	8011b34 <__ssputs_r+0x7e>
 8011ad0:	6825      	ldr	r5, [r4, #0]
 8011ad2:	6909      	ldr	r1, [r1, #16]
 8011ad4:	1a6f      	subs	r7, r5, r1
 8011ad6:	6965      	ldr	r5, [r4, #20]
 8011ad8:	2302      	movs	r3, #2
 8011ada:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8011ade:	fb95 f5f3 	sdiv	r5, r5, r3
 8011ae2:	f109 0301 	add.w	r3, r9, #1
 8011ae6:	443b      	add	r3, r7
 8011ae8:	429d      	cmp	r5, r3
 8011aea:	bf38      	it	cc
 8011aec:	461d      	movcc	r5, r3
 8011aee:	0553      	lsls	r3, r2, #21
 8011af0:	d530      	bpl.n	8011b54 <__ssputs_r+0x9e>
 8011af2:	4629      	mov	r1, r5
 8011af4:	f7fc fc5c 	bl	800e3b0 <_malloc_r>
 8011af8:	4606      	mov	r6, r0
 8011afa:	b950      	cbnz	r0, 8011b12 <__ssputs_r+0x5c>
 8011afc:	230c      	movs	r3, #12
 8011afe:	f8ca 3000 	str.w	r3, [sl]
 8011b02:	89a3      	ldrh	r3, [r4, #12]
 8011b04:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011b08:	81a3      	strh	r3, [r4, #12]
 8011b0a:	f04f 30ff 	mov.w	r0, #4294967295
 8011b0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011b12:	463a      	mov	r2, r7
 8011b14:	6921      	ldr	r1, [r4, #16]
 8011b16:	f7fc fbe9 	bl	800e2ec <memcpy>
 8011b1a:	89a3      	ldrh	r3, [r4, #12]
 8011b1c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8011b20:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011b24:	81a3      	strh	r3, [r4, #12]
 8011b26:	6126      	str	r6, [r4, #16]
 8011b28:	6165      	str	r5, [r4, #20]
 8011b2a:	443e      	add	r6, r7
 8011b2c:	1bed      	subs	r5, r5, r7
 8011b2e:	6026      	str	r6, [r4, #0]
 8011b30:	60a5      	str	r5, [r4, #8]
 8011b32:	464e      	mov	r6, r9
 8011b34:	454e      	cmp	r6, r9
 8011b36:	d900      	bls.n	8011b3a <__ssputs_r+0x84>
 8011b38:	464e      	mov	r6, r9
 8011b3a:	4632      	mov	r2, r6
 8011b3c:	4641      	mov	r1, r8
 8011b3e:	6820      	ldr	r0, [r4, #0]
 8011b40:	f000 f919 	bl	8011d76 <memmove>
 8011b44:	68a3      	ldr	r3, [r4, #8]
 8011b46:	1b9b      	subs	r3, r3, r6
 8011b48:	60a3      	str	r3, [r4, #8]
 8011b4a:	6823      	ldr	r3, [r4, #0]
 8011b4c:	441e      	add	r6, r3
 8011b4e:	6026      	str	r6, [r4, #0]
 8011b50:	2000      	movs	r0, #0
 8011b52:	e7dc      	b.n	8011b0e <__ssputs_r+0x58>
 8011b54:	462a      	mov	r2, r5
 8011b56:	f000 f927 	bl	8011da8 <_realloc_r>
 8011b5a:	4606      	mov	r6, r0
 8011b5c:	2800      	cmp	r0, #0
 8011b5e:	d1e2      	bne.n	8011b26 <__ssputs_r+0x70>
 8011b60:	6921      	ldr	r1, [r4, #16]
 8011b62:	4650      	mov	r0, sl
 8011b64:	f7fc fbd6 	bl	800e314 <_free_r>
 8011b68:	e7c8      	b.n	8011afc <__ssputs_r+0x46>
	...

08011b6c <_svfiprintf_r>:
 8011b6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011b70:	461d      	mov	r5, r3
 8011b72:	898b      	ldrh	r3, [r1, #12]
 8011b74:	061f      	lsls	r7, r3, #24
 8011b76:	b09d      	sub	sp, #116	; 0x74
 8011b78:	4680      	mov	r8, r0
 8011b7a:	460c      	mov	r4, r1
 8011b7c:	4616      	mov	r6, r2
 8011b7e:	d50f      	bpl.n	8011ba0 <_svfiprintf_r+0x34>
 8011b80:	690b      	ldr	r3, [r1, #16]
 8011b82:	b96b      	cbnz	r3, 8011ba0 <_svfiprintf_r+0x34>
 8011b84:	2140      	movs	r1, #64	; 0x40
 8011b86:	f7fc fc13 	bl	800e3b0 <_malloc_r>
 8011b8a:	6020      	str	r0, [r4, #0]
 8011b8c:	6120      	str	r0, [r4, #16]
 8011b8e:	b928      	cbnz	r0, 8011b9c <_svfiprintf_r+0x30>
 8011b90:	230c      	movs	r3, #12
 8011b92:	f8c8 3000 	str.w	r3, [r8]
 8011b96:	f04f 30ff 	mov.w	r0, #4294967295
 8011b9a:	e0c8      	b.n	8011d2e <_svfiprintf_r+0x1c2>
 8011b9c:	2340      	movs	r3, #64	; 0x40
 8011b9e:	6163      	str	r3, [r4, #20]
 8011ba0:	2300      	movs	r3, #0
 8011ba2:	9309      	str	r3, [sp, #36]	; 0x24
 8011ba4:	2320      	movs	r3, #32
 8011ba6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8011baa:	2330      	movs	r3, #48	; 0x30
 8011bac:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8011bb0:	9503      	str	r5, [sp, #12]
 8011bb2:	f04f 0b01 	mov.w	fp, #1
 8011bb6:	4637      	mov	r7, r6
 8011bb8:	463d      	mov	r5, r7
 8011bba:	f815 3b01 	ldrb.w	r3, [r5], #1
 8011bbe:	b10b      	cbz	r3, 8011bc4 <_svfiprintf_r+0x58>
 8011bc0:	2b25      	cmp	r3, #37	; 0x25
 8011bc2:	d13e      	bne.n	8011c42 <_svfiprintf_r+0xd6>
 8011bc4:	ebb7 0a06 	subs.w	sl, r7, r6
 8011bc8:	d00b      	beq.n	8011be2 <_svfiprintf_r+0x76>
 8011bca:	4653      	mov	r3, sl
 8011bcc:	4632      	mov	r2, r6
 8011bce:	4621      	mov	r1, r4
 8011bd0:	4640      	mov	r0, r8
 8011bd2:	f7ff ff70 	bl	8011ab6 <__ssputs_r>
 8011bd6:	3001      	adds	r0, #1
 8011bd8:	f000 80a4 	beq.w	8011d24 <_svfiprintf_r+0x1b8>
 8011bdc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011bde:	4453      	add	r3, sl
 8011be0:	9309      	str	r3, [sp, #36]	; 0x24
 8011be2:	783b      	ldrb	r3, [r7, #0]
 8011be4:	2b00      	cmp	r3, #0
 8011be6:	f000 809d 	beq.w	8011d24 <_svfiprintf_r+0x1b8>
 8011bea:	2300      	movs	r3, #0
 8011bec:	f04f 32ff 	mov.w	r2, #4294967295
 8011bf0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011bf4:	9304      	str	r3, [sp, #16]
 8011bf6:	9307      	str	r3, [sp, #28]
 8011bf8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8011bfc:	931a      	str	r3, [sp, #104]	; 0x68
 8011bfe:	462f      	mov	r7, r5
 8011c00:	2205      	movs	r2, #5
 8011c02:	f817 1b01 	ldrb.w	r1, [r7], #1
 8011c06:	4850      	ldr	r0, [pc, #320]	; (8011d48 <_svfiprintf_r+0x1dc>)
 8011c08:	f7ee fafa 	bl	8000200 <memchr>
 8011c0c:	9b04      	ldr	r3, [sp, #16]
 8011c0e:	b9d0      	cbnz	r0, 8011c46 <_svfiprintf_r+0xda>
 8011c10:	06d9      	lsls	r1, r3, #27
 8011c12:	bf44      	itt	mi
 8011c14:	2220      	movmi	r2, #32
 8011c16:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8011c1a:	071a      	lsls	r2, r3, #28
 8011c1c:	bf44      	itt	mi
 8011c1e:	222b      	movmi	r2, #43	; 0x2b
 8011c20:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8011c24:	782a      	ldrb	r2, [r5, #0]
 8011c26:	2a2a      	cmp	r2, #42	; 0x2a
 8011c28:	d015      	beq.n	8011c56 <_svfiprintf_r+0xea>
 8011c2a:	9a07      	ldr	r2, [sp, #28]
 8011c2c:	462f      	mov	r7, r5
 8011c2e:	2000      	movs	r0, #0
 8011c30:	250a      	movs	r5, #10
 8011c32:	4639      	mov	r1, r7
 8011c34:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011c38:	3b30      	subs	r3, #48	; 0x30
 8011c3a:	2b09      	cmp	r3, #9
 8011c3c:	d94d      	bls.n	8011cda <_svfiprintf_r+0x16e>
 8011c3e:	b1b8      	cbz	r0, 8011c70 <_svfiprintf_r+0x104>
 8011c40:	e00f      	b.n	8011c62 <_svfiprintf_r+0xf6>
 8011c42:	462f      	mov	r7, r5
 8011c44:	e7b8      	b.n	8011bb8 <_svfiprintf_r+0x4c>
 8011c46:	4a40      	ldr	r2, [pc, #256]	; (8011d48 <_svfiprintf_r+0x1dc>)
 8011c48:	1a80      	subs	r0, r0, r2
 8011c4a:	fa0b f000 	lsl.w	r0, fp, r0
 8011c4e:	4318      	orrs	r0, r3
 8011c50:	9004      	str	r0, [sp, #16]
 8011c52:	463d      	mov	r5, r7
 8011c54:	e7d3      	b.n	8011bfe <_svfiprintf_r+0x92>
 8011c56:	9a03      	ldr	r2, [sp, #12]
 8011c58:	1d11      	adds	r1, r2, #4
 8011c5a:	6812      	ldr	r2, [r2, #0]
 8011c5c:	9103      	str	r1, [sp, #12]
 8011c5e:	2a00      	cmp	r2, #0
 8011c60:	db01      	blt.n	8011c66 <_svfiprintf_r+0xfa>
 8011c62:	9207      	str	r2, [sp, #28]
 8011c64:	e004      	b.n	8011c70 <_svfiprintf_r+0x104>
 8011c66:	4252      	negs	r2, r2
 8011c68:	f043 0302 	orr.w	r3, r3, #2
 8011c6c:	9207      	str	r2, [sp, #28]
 8011c6e:	9304      	str	r3, [sp, #16]
 8011c70:	783b      	ldrb	r3, [r7, #0]
 8011c72:	2b2e      	cmp	r3, #46	; 0x2e
 8011c74:	d10c      	bne.n	8011c90 <_svfiprintf_r+0x124>
 8011c76:	787b      	ldrb	r3, [r7, #1]
 8011c78:	2b2a      	cmp	r3, #42	; 0x2a
 8011c7a:	d133      	bne.n	8011ce4 <_svfiprintf_r+0x178>
 8011c7c:	9b03      	ldr	r3, [sp, #12]
 8011c7e:	1d1a      	adds	r2, r3, #4
 8011c80:	681b      	ldr	r3, [r3, #0]
 8011c82:	9203      	str	r2, [sp, #12]
 8011c84:	2b00      	cmp	r3, #0
 8011c86:	bfb8      	it	lt
 8011c88:	f04f 33ff 	movlt.w	r3, #4294967295
 8011c8c:	3702      	adds	r7, #2
 8011c8e:	9305      	str	r3, [sp, #20]
 8011c90:	4d2e      	ldr	r5, [pc, #184]	; (8011d4c <_svfiprintf_r+0x1e0>)
 8011c92:	7839      	ldrb	r1, [r7, #0]
 8011c94:	2203      	movs	r2, #3
 8011c96:	4628      	mov	r0, r5
 8011c98:	f7ee fab2 	bl	8000200 <memchr>
 8011c9c:	b138      	cbz	r0, 8011cae <_svfiprintf_r+0x142>
 8011c9e:	2340      	movs	r3, #64	; 0x40
 8011ca0:	1b40      	subs	r0, r0, r5
 8011ca2:	fa03 f000 	lsl.w	r0, r3, r0
 8011ca6:	9b04      	ldr	r3, [sp, #16]
 8011ca8:	4303      	orrs	r3, r0
 8011caa:	3701      	adds	r7, #1
 8011cac:	9304      	str	r3, [sp, #16]
 8011cae:	7839      	ldrb	r1, [r7, #0]
 8011cb0:	4827      	ldr	r0, [pc, #156]	; (8011d50 <_svfiprintf_r+0x1e4>)
 8011cb2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8011cb6:	2206      	movs	r2, #6
 8011cb8:	1c7e      	adds	r6, r7, #1
 8011cba:	f7ee faa1 	bl	8000200 <memchr>
 8011cbe:	2800      	cmp	r0, #0
 8011cc0:	d038      	beq.n	8011d34 <_svfiprintf_r+0x1c8>
 8011cc2:	4b24      	ldr	r3, [pc, #144]	; (8011d54 <_svfiprintf_r+0x1e8>)
 8011cc4:	bb13      	cbnz	r3, 8011d0c <_svfiprintf_r+0x1a0>
 8011cc6:	9b03      	ldr	r3, [sp, #12]
 8011cc8:	3307      	adds	r3, #7
 8011cca:	f023 0307 	bic.w	r3, r3, #7
 8011cce:	3308      	adds	r3, #8
 8011cd0:	9303      	str	r3, [sp, #12]
 8011cd2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011cd4:	444b      	add	r3, r9
 8011cd6:	9309      	str	r3, [sp, #36]	; 0x24
 8011cd8:	e76d      	b.n	8011bb6 <_svfiprintf_r+0x4a>
 8011cda:	fb05 3202 	mla	r2, r5, r2, r3
 8011cde:	2001      	movs	r0, #1
 8011ce0:	460f      	mov	r7, r1
 8011ce2:	e7a6      	b.n	8011c32 <_svfiprintf_r+0xc6>
 8011ce4:	2300      	movs	r3, #0
 8011ce6:	3701      	adds	r7, #1
 8011ce8:	9305      	str	r3, [sp, #20]
 8011cea:	4619      	mov	r1, r3
 8011cec:	250a      	movs	r5, #10
 8011cee:	4638      	mov	r0, r7
 8011cf0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011cf4:	3a30      	subs	r2, #48	; 0x30
 8011cf6:	2a09      	cmp	r2, #9
 8011cf8:	d903      	bls.n	8011d02 <_svfiprintf_r+0x196>
 8011cfa:	2b00      	cmp	r3, #0
 8011cfc:	d0c8      	beq.n	8011c90 <_svfiprintf_r+0x124>
 8011cfe:	9105      	str	r1, [sp, #20]
 8011d00:	e7c6      	b.n	8011c90 <_svfiprintf_r+0x124>
 8011d02:	fb05 2101 	mla	r1, r5, r1, r2
 8011d06:	2301      	movs	r3, #1
 8011d08:	4607      	mov	r7, r0
 8011d0a:	e7f0      	b.n	8011cee <_svfiprintf_r+0x182>
 8011d0c:	ab03      	add	r3, sp, #12
 8011d0e:	9300      	str	r3, [sp, #0]
 8011d10:	4622      	mov	r2, r4
 8011d12:	4b11      	ldr	r3, [pc, #68]	; (8011d58 <_svfiprintf_r+0x1ec>)
 8011d14:	a904      	add	r1, sp, #16
 8011d16:	4640      	mov	r0, r8
 8011d18:	f7fc fc38 	bl	800e58c <_printf_float>
 8011d1c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8011d20:	4681      	mov	r9, r0
 8011d22:	d1d6      	bne.n	8011cd2 <_svfiprintf_r+0x166>
 8011d24:	89a3      	ldrh	r3, [r4, #12]
 8011d26:	065b      	lsls	r3, r3, #25
 8011d28:	f53f af35 	bmi.w	8011b96 <_svfiprintf_r+0x2a>
 8011d2c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8011d2e:	b01d      	add	sp, #116	; 0x74
 8011d30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011d34:	ab03      	add	r3, sp, #12
 8011d36:	9300      	str	r3, [sp, #0]
 8011d38:	4622      	mov	r2, r4
 8011d3a:	4b07      	ldr	r3, [pc, #28]	; (8011d58 <_svfiprintf_r+0x1ec>)
 8011d3c:	a904      	add	r1, sp, #16
 8011d3e:	4640      	mov	r0, r8
 8011d40:	f7fc feda 	bl	800eaf8 <_printf_i>
 8011d44:	e7ea      	b.n	8011d1c <_svfiprintf_r+0x1b0>
 8011d46:	bf00      	nop
 8011d48:	08012894 	.word	0x08012894
 8011d4c:	0801289a 	.word	0x0801289a
 8011d50:	0801289e 	.word	0x0801289e
 8011d54:	0800e58d 	.word	0x0800e58d
 8011d58:	08011ab7 	.word	0x08011ab7

08011d5c <__ascii_wctomb>:
 8011d5c:	b149      	cbz	r1, 8011d72 <__ascii_wctomb+0x16>
 8011d5e:	2aff      	cmp	r2, #255	; 0xff
 8011d60:	bf85      	ittet	hi
 8011d62:	238a      	movhi	r3, #138	; 0x8a
 8011d64:	6003      	strhi	r3, [r0, #0]
 8011d66:	700a      	strbls	r2, [r1, #0]
 8011d68:	f04f 30ff 	movhi.w	r0, #4294967295
 8011d6c:	bf98      	it	ls
 8011d6e:	2001      	movls	r0, #1
 8011d70:	4770      	bx	lr
 8011d72:	4608      	mov	r0, r1
 8011d74:	4770      	bx	lr

08011d76 <memmove>:
 8011d76:	4288      	cmp	r0, r1
 8011d78:	b510      	push	{r4, lr}
 8011d7a:	eb01 0302 	add.w	r3, r1, r2
 8011d7e:	d807      	bhi.n	8011d90 <memmove+0x1a>
 8011d80:	1e42      	subs	r2, r0, #1
 8011d82:	4299      	cmp	r1, r3
 8011d84:	d00a      	beq.n	8011d9c <memmove+0x26>
 8011d86:	f811 4b01 	ldrb.w	r4, [r1], #1
 8011d8a:	f802 4f01 	strb.w	r4, [r2, #1]!
 8011d8e:	e7f8      	b.n	8011d82 <memmove+0xc>
 8011d90:	4283      	cmp	r3, r0
 8011d92:	d9f5      	bls.n	8011d80 <memmove+0xa>
 8011d94:	1881      	adds	r1, r0, r2
 8011d96:	1ad2      	subs	r2, r2, r3
 8011d98:	42d3      	cmn	r3, r2
 8011d9a:	d100      	bne.n	8011d9e <memmove+0x28>
 8011d9c:	bd10      	pop	{r4, pc}
 8011d9e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8011da2:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8011da6:	e7f7      	b.n	8011d98 <memmove+0x22>

08011da8 <_realloc_r>:
 8011da8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011daa:	4607      	mov	r7, r0
 8011dac:	4614      	mov	r4, r2
 8011dae:	460e      	mov	r6, r1
 8011db0:	b921      	cbnz	r1, 8011dbc <_realloc_r+0x14>
 8011db2:	4611      	mov	r1, r2
 8011db4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8011db8:	f7fc bafa 	b.w	800e3b0 <_malloc_r>
 8011dbc:	b922      	cbnz	r2, 8011dc8 <_realloc_r+0x20>
 8011dbe:	f7fc faa9 	bl	800e314 <_free_r>
 8011dc2:	4625      	mov	r5, r4
 8011dc4:	4628      	mov	r0, r5
 8011dc6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011dc8:	f000 f814 	bl	8011df4 <_malloc_usable_size_r>
 8011dcc:	42a0      	cmp	r0, r4
 8011dce:	d20f      	bcs.n	8011df0 <_realloc_r+0x48>
 8011dd0:	4621      	mov	r1, r4
 8011dd2:	4638      	mov	r0, r7
 8011dd4:	f7fc faec 	bl	800e3b0 <_malloc_r>
 8011dd8:	4605      	mov	r5, r0
 8011dda:	2800      	cmp	r0, #0
 8011ddc:	d0f2      	beq.n	8011dc4 <_realloc_r+0x1c>
 8011dde:	4631      	mov	r1, r6
 8011de0:	4622      	mov	r2, r4
 8011de2:	f7fc fa83 	bl	800e2ec <memcpy>
 8011de6:	4631      	mov	r1, r6
 8011de8:	4638      	mov	r0, r7
 8011dea:	f7fc fa93 	bl	800e314 <_free_r>
 8011dee:	e7e9      	b.n	8011dc4 <_realloc_r+0x1c>
 8011df0:	4635      	mov	r5, r6
 8011df2:	e7e7      	b.n	8011dc4 <_realloc_r+0x1c>

08011df4 <_malloc_usable_size_r>:
 8011df4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011df8:	1f18      	subs	r0, r3, #4
 8011dfa:	2b00      	cmp	r3, #0
 8011dfc:	bfbc      	itt	lt
 8011dfe:	580b      	ldrlt	r3, [r1, r0]
 8011e00:	18c0      	addlt	r0, r0, r3
 8011e02:	4770      	bx	lr

08011e04 <_sbrk>:
 8011e04:	4b04      	ldr	r3, [pc, #16]	; (8011e18 <_sbrk+0x14>)
 8011e06:	6819      	ldr	r1, [r3, #0]
 8011e08:	4602      	mov	r2, r0
 8011e0a:	b909      	cbnz	r1, 8011e10 <_sbrk+0xc>
 8011e0c:	4903      	ldr	r1, [pc, #12]	; (8011e1c <_sbrk+0x18>)
 8011e0e:	6019      	str	r1, [r3, #0]
 8011e10:	6818      	ldr	r0, [r3, #0]
 8011e12:	4402      	add	r2, r0
 8011e14:	601a      	str	r2, [r3, #0]
 8011e16:	4770      	bx	lr
 8011e18:	20000994 	.word	0x20000994
 8011e1c:	20004b98 	.word	0x20004b98

08011e20 <_init>:
 8011e20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011e22:	bf00      	nop
 8011e24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011e26:	bc08      	pop	{r3}
 8011e28:	469e      	mov	lr, r3
 8011e2a:	4770      	bx	lr

08011e2c <_fini>:
 8011e2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011e2e:	bf00      	nop
 8011e30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011e32:	bc08      	pop	{r3}
 8011e34:	469e      	mov	lr, r3
 8011e36:	4770      	bx	lr
